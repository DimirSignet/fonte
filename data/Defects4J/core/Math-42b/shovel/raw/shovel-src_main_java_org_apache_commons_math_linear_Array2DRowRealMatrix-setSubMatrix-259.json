{
  "origin": "codeshovel",
  "repositoryName": "Math-42b",
  "repositoryPath": "/tmp/Math-42b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Array2DRowRealMatrix.java",
  "functionName": "setSubMatrix",
  "functionId": "setSubMatrix___subMatrix-double[][](modifiers-final)__row-int(modifiers-final)__column-int(modifiers-final)",
  "sourceFilePath": "src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java",
  "functionAnnotation": "@Override",
  "functionDoc": "@inheritDoc}\n",
  "functionStartLine": 259,
  "functionEndLine": 289,
  "numCommitsSeen": 15,
  "timeTaken": 4573,
  "changeHistory": [
    "e9c6d1de301072c16a48587db682542f967b3a9b",
    "b9b5413f8fcb9ab9a127c7040ace0074e07bb53c",
    "8742126f8f6117d90401f8d3ca1f40cd72b489aa",
    "1eaea0b549f685bd416cef68faa3a137b9bb3519",
    "bd345d954b85ef8eb3867c5044f933e34df0c124",
    "26dac5a0e7fc9c6be9571b3e71a15d8502480d96",
    "d6a438e931412713e99624cf9ed74470f1040184",
    "dbae4b01341d9d72e52d1e07a15d5023deca3d92"
  ],
  "changeHistoryShort": {
    "e9c6d1de301072c16a48587db682542f967b3a9b": "Ybodychange",
    "b9b5413f8fcb9ab9a127c7040ace0074e07bb53c": "Ybodychange",
    "8742126f8f6117d90401f8d3ca1f40cd72b489aa": "Ymultichange(Yexceptionschange,Ybodychange)",
    "1eaea0b549f685bd416cef68faa3a137b9bb3519": "Ybodychange",
    "bd345d954b85ef8eb3867c5044f933e34df0c124": "Ybodychange",
    "26dac5a0e7fc9c6be9571b3e71a15d8502480d96": "Yformatchange",
    "d6a438e931412713e99624cf9ed74470f1040184": "Yfilerename",
    "dbae4b01341d9d72e52d1e07a15d5023deca3d92": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e9c6d1de301072c16a48587db682542f967b3a9b": {
      "type": "Ybodychange",
      "commitMessage": "Replaced NullPointerException by NullArgumentException\n\nJIRA: MATH-403\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1132432 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/5/11, 7:59 AM",
      "commitName": "e9c6d1de301072c16a48587db682542f967b3a9b",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "6/3/11, 1:49 PM",
      "commitNameOld": "98e22d778b3a886be253638b9a6b7ec075c3d62d",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 1.76,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void setSubMatrix(final double[][] subMatrix, final int row, final int column) {\n    if (data \u003d\u003d null) {\n        if (row \u003e 0) {\n            throw new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET, row);\n        }\n        if (column \u003e 0) {\n            throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET, column);\n        }\n        MathUtils.checkNotNull(subMatrix);\n        final int nRows \u003d subMatrix.length;\n        if (nRows \u003d\u003d 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n        final int nCols \u003d subMatrix[0].length;\n        if (nCols \u003d\u003d 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n        data \u003d new double[subMatrix.length][nCols];\n        for (int i \u003d 0; i \u003c data.length; ++i) {\n            if (subMatrix[i].length !\u003d nCols) {\n                throw new DimensionMismatchException(subMatrix[i].length, nCols);\n            }\n            System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);\n        }\n    } else {\n        super.setSubMatrix(subMatrix, row, column);\n    }\n}",
      "path": "src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java",
      "functionStartLine": 271,
      "functionName": "setSubMatrix",
      "functionAnnotation": "@Override",
      "functionDoc": "@inheritDoc}\n",
      "diff": "@@ -1,28 +1,29 @@\n @Override\n public void setSubMatrix(final double[][] subMatrix, final int row, final int column) {\n     if (data \u003d\u003d null) {\n         if (row \u003e 0) {\n             throw new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET, row);\n         }\n         if (column \u003e 0) {\n             throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET, column);\n         }\n+        MathUtils.checkNotNull(subMatrix);\n         final int nRows \u003d subMatrix.length;\n         if (nRows \u003d\u003d 0) {\n             throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n         }\n         final int nCols \u003d subMatrix[0].length;\n         if (nCols \u003d\u003d 0) {\n             throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n         }\n         data \u003d new double[subMatrix.length][nCols];\n         for (int i \u003d 0; i \u003c data.length; ++i) {\n             if (subMatrix[i].length !\u003d nCols) {\n                 throw new DimensionMismatchException(subMatrix[i].length, nCols);\n             }\n             System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);\n         }\n     } else {\n         super.setSubMatrix(subMatrix, row, column);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b9b5413f8fcb9ab9a127c7040ace0074e07bb53c": {
      "type": "Ybodychange",
      "commitMessage": "MATH-425\nRemoved redundant exception \"throws\" clauses.\nJavadoc cleanup.\nThrowing \"NoDataException\" instead of \"ZeroException\" when row or column\ndata is missing.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1038403 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/23/10, 4:42 PM",
      "commitName": "b9b5413f8fcb9ab9a127c7040ace0074e07bb53c",
      "commitAuthor": "Gilles Sadowski",
      "commitDateOld": "11/12/10, 9:53 AM",
      "commitNameOld": "2a29e2e1929a8bb7ba5ac040087328196a09fe84",
      "commitAuthorOld": "Gilles Sadowski",
      "daysBetweenCommits": 11.28,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void setSubMatrix(final double[][] subMatrix, final int row, final int column) {\n    if (data \u003d\u003d null) {\n        if (row \u003e 0) {\n            throw new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET, row);\n        }\n        if (column \u003e 0) {\n            throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET, column);\n        }\n        final int nRows \u003d subMatrix.length;\n        if (nRows \u003d\u003d 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n        final int nCols \u003d subMatrix[0].length;\n        if (nCols \u003d\u003d 0) {\n            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n        data \u003d new double[subMatrix.length][nCols];\n        for (int i \u003d 0; i \u003c data.length; ++i) {\n            if (subMatrix[i].length !\u003d nCols) {\n                throw new DimensionMismatchException(subMatrix[i].length, nCols);\n            }\n            System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);\n        }\n    } else {\n        super.setSubMatrix(subMatrix, row, column);\n    }\n}",
      "path": "src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java",
      "functionStartLine": 269,
      "functionName": "setSubMatrix",
      "functionAnnotation": "@Override",
      "functionDoc": "@inheritDoc}\n",
      "diff": "@@ -1,28 +1,28 @@\n @Override\n public void setSubMatrix(final double[][] subMatrix, final int row, final int column) {\n     if (data \u003d\u003d null) {\n         if (row \u003e 0) {\n             throw new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET, row);\n         }\n         if (column \u003e 0) {\n             throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET, column);\n         }\n         final int nRows \u003d subMatrix.length;\n         if (nRows \u003d\u003d 0) {\n-            throw new ZeroException(LocalizedFormats.AT_LEAST_ONE_ROW);\n+            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n         }\n         final int nCols \u003d subMatrix[0].length;\n         if (nCols \u003d\u003d 0) {\n-            throw new ZeroException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n+            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n         }\n         data \u003d new double[subMatrix.length][nCols];\n         for (int i \u003d 0; i \u003c data.length; ++i) {\n             if (subMatrix[i].length !\u003d nCols) {\n                 throw new DimensionMismatchException(subMatrix[i].length, nCols);\n             }\n             System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);\n         }\n     } else {\n         super.setSubMatrix(subMatrix, row, column);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "8742126f8f6117d90401f8d3ca1f40cd72b489aa": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "MATH-425\nDeleted deprecated classes in package \"linear\".\nRemoved redundant methods in \"Array2DRowRealMatrix\".\nRemoved usage of \"MatrixIndexException\" (class is now deprecated).\nJavadoc clean up.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1027952 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/27/10, 6:16 AM",
      "commitName": "8742126f8f6117d90401f8d3ca1f40cd72b489aa",
      "commitAuthor": "Gilles Sadowski",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "MATH-425\nDeleted deprecated classes in package \"linear\".\nRemoved redundant methods in \"Array2DRowRealMatrix\".\nRemoved usage of \"MatrixIndexException\" (class is now deprecated).\nJavadoc clean up.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1027952 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/27/10, 6:16 AM",
          "commitName": "8742126f8f6117d90401f8d3ca1f40cd72b489aa",
          "commitAuthor": "Gilles Sadowski",
          "commitDateOld": "8/10/10, 3:46 AM",
          "commitNameOld": "986597f52ce9c6c1ff13fb134b91696de6ec2796",
          "commitAuthorOld": "Gilles Sadowski",
          "daysBetweenCommits": 78.1,
          "commitsBetweenForRepo": 104,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void setSubMatrix(final double[][] subMatrix, final int row, final int column) {\n    if (data \u003d\u003d null) {\n        if (row \u003e 0) {\n            throw new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET, row);\n        }\n        if (column \u003e 0) {\n            throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET, column);\n        }\n        final int nRows \u003d subMatrix.length;\n        if (nRows \u003d\u003d 0) {\n            throw new ZeroException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n        final int nCols \u003d subMatrix[0].length;\n        if (nCols \u003d\u003d 0) {\n            throw new ZeroException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n        data \u003d new double[subMatrix.length][nCols];\n        for (int i \u003d 0; i \u003c data.length; ++i) {\n            if (subMatrix[i].length !\u003d nCols) {\n                throw new DimensionMismatchException(subMatrix[i].length, nCols);\n            }\n            System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);\n        }\n    } else {\n        super.setSubMatrix(subMatrix, row, column);\n    }\n}",
          "path": "src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java",
          "functionStartLine": 273,
          "functionName": "setSubMatrix",
          "functionAnnotation": "@Override",
          "functionDoc": "@inheritDoc}\n",
          "diff": "@@ -1,28 +1,28 @@\n @Override\n-public void setSubMatrix(final double[][] subMatrix, final int row, final int column) throws MatrixIndexException {\n+public void setSubMatrix(final double[][] subMatrix, final int row, final int column) {\n     if (data \u003d\u003d null) {\n         if (row \u003e 0) {\n-            throw MathRuntimeException.createIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET, row);\n+            throw new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET, row);\n         }\n         if (column \u003e 0) {\n-            throw MathRuntimeException.createIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET, column);\n+            throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET, column);\n         }\n         final int nRows \u003d subMatrix.length;\n         if (nRows \u003d\u003d 0) {\n-            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.AT_LEAST_ONE_ROW);\n+            throw new ZeroException(LocalizedFormats.AT_LEAST_ONE_ROW);\n         }\n         final int nCols \u003d subMatrix[0].length;\n         if (nCols \u003d\u003d 0) {\n-            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n+            throw new ZeroException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n         }\n         data \u003d new double[subMatrix.length][nCols];\n         for (int i \u003d 0; i \u003c data.length; ++i) {\n             if (subMatrix[i].length !\u003d nCols) {\n-                throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.DIFFERENT_ROWS_LENGTHS, nCols, subMatrix[i].length);\n+                throw new DimensionMismatchException(subMatrix[i].length, nCols);\n             }\n             System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);\n         }\n     } else {\n         super.setSubMatrix(subMatrix, row, column);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[MatrixIndexException]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MATH-425\nDeleted deprecated classes in package \"linear\".\nRemoved redundant methods in \"Array2DRowRealMatrix\".\nRemoved usage of \"MatrixIndexException\" (class is now deprecated).\nJavadoc clean up.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1027952 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/27/10, 6:16 AM",
          "commitName": "8742126f8f6117d90401f8d3ca1f40cd72b489aa",
          "commitAuthor": "Gilles Sadowski",
          "commitDateOld": "8/10/10, 3:46 AM",
          "commitNameOld": "986597f52ce9c6c1ff13fb134b91696de6ec2796",
          "commitAuthorOld": "Gilles Sadowski",
          "daysBetweenCommits": 78.1,
          "commitsBetweenForRepo": 104,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void setSubMatrix(final double[][] subMatrix, final int row, final int column) {\n    if (data \u003d\u003d null) {\n        if (row \u003e 0) {\n            throw new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET, row);\n        }\n        if (column \u003e 0) {\n            throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET, column);\n        }\n        final int nRows \u003d subMatrix.length;\n        if (nRows \u003d\u003d 0) {\n            throw new ZeroException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n        final int nCols \u003d subMatrix[0].length;\n        if (nCols \u003d\u003d 0) {\n            throw new ZeroException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n        data \u003d new double[subMatrix.length][nCols];\n        for (int i \u003d 0; i \u003c data.length; ++i) {\n            if (subMatrix[i].length !\u003d nCols) {\n                throw new DimensionMismatchException(subMatrix[i].length, nCols);\n            }\n            System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);\n        }\n    } else {\n        super.setSubMatrix(subMatrix, row, column);\n    }\n}",
          "path": "src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java",
          "functionStartLine": 273,
          "functionName": "setSubMatrix",
          "functionAnnotation": "@Override",
          "functionDoc": "@inheritDoc}\n",
          "diff": "@@ -1,28 +1,28 @@\n @Override\n-public void setSubMatrix(final double[][] subMatrix, final int row, final int column) throws MatrixIndexException {\n+public void setSubMatrix(final double[][] subMatrix, final int row, final int column) {\n     if (data \u003d\u003d null) {\n         if (row \u003e 0) {\n-            throw MathRuntimeException.createIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET, row);\n+            throw new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET, row);\n         }\n         if (column \u003e 0) {\n-            throw MathRuntimeException.createIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET, column);\n+            throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET, column);\n         }\n         final int nRows \u003d subMatrix.length;\n         if (nRows \u003d\u003d 0) {\n-            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.AT_LEAST_ONE_ROW);\n+            throw new ZeroException(LocalizedFormats.AT_LEAST_ONE_ROW);\n         }\n         final int nCols \u003d subMatrix[0].length;\n         if (nCols \u003d\u003d 0) {\n-            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n+            throw new ZeroException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n         }\n         data \u003d new double[subMatrix.length][nCols];\n         for (int i \u003d 0; i \u003c data.length; ++i) {\n             if (subMatrix[i].length !\u003d nCols) {\n-                throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.DIFFERENT_ROWS_LENGTHS, nCols, subMatrix[i].length);\n+                throw new DimensionMismatchException(subMatrix[i].length, nCols);\n             }\n             System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);\n         }\n     } else {\n         super.setSubMatrix(subMatrix, row, column);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "1eaea0b549f685bd416cef68faa3a137b9bb3519": {
      "type": "Ybodychange",
      "commitMessage": "changed the localization mechanism for error messages. The new system is based on an enum rather than on duplicated string literals.\nJIRA: MATH-361\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@955423 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/16/10, 4:03 PM",
      "commitName": "1eaea0b549f685bd416cef68faa3a137b9bb3519",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "11/29/09, 1:47 PM",
      "commitNameOld": "bd345d954b85ef8eb3867c5044f933e34df0c124",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 199.05,
      "commitsBetweenForRepo": 217,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void setSubMatrix(final double[][] subMatrix, final int row, final int column) throws MatrixIndexException {\n    if (data \u003d\u003d null) {\n        if (row \u003e 0) {\n            throw MathRuntimeException.createIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET, row);\n        }\n        if (column \u003e 0) {\n            throw MathRuntimeException.createIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET, column);\n        }\n        final int nRows \u003d subMatrix.length;\n        if (nRows \u003d\u003d 0) {\n            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.AT_LEAST_ONE_ROW);\n        }\n        final int nCols \u003d subMatrix[0].length;\n        if (nCols \u003d\u003d 0) {\n            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n        }\n        data \u003d new double[subMatrix.length][nCols];\n        for (int i \u003d 0; i \u003c data.length; ++i) {\n            if (subMatrix[i].length !\u003d nCols) {\n                throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.DIFFERENT_ROWS_LENGTHS, nCols, subMatrix[i].length);\n            }\n            System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);\n        }\n    } else {\n        super.setSubMatrix(subMatrix, row, column);\n    }\n}",
      "path": "src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java",
      "functionStartLine": 314,
      "functionName": "setSubMatrix",
      "functionAnnotation": "@Override",
      "functionDoc": "@inheritDoc}\n",
      "diff": "@@ -1,28 +1,28 @@\n @Override\n public void setSubMatrix(final double[][] subMatrix, final int row, final int column) throws MatrixIndexException {\n     if (data \u003d\u003d null) {\n         if (row \u003e 0) {\n-            throw MathRuntimeException.createIllegalStateException(\"first {0} rows are not initialized yet\", row);\n+            throw MathRuntimeException.createIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET, row);\n         }\n         if (column \u003e 0) {\n-            throw MathRuntimeException.createIllegalStateException(\"first {0} columns are not initialized yet\", column);\n+            throw MathRuntimeException.createIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET, column);\n         }\n         final int nRows \u003d subMatrix.length;\n         if (nRows \u003d\u003d 0) {\n-            throw MathRuntimeException.createIllegalArgumentException(AT_LEAST_ONE_ROW_MESSAGE);\n+            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.AT_LEAST_ONE_ROW);\n         }\n         final int nCols \u003d subMatrix[0].length;\n         if (nCols \u003d\u003d 0) {\n-            throw MathRuntimeException.createIllegalArgumentException(AT_LEAST_ONE_COLUMN_MESSAGE);\n+            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n         }\n         data \u003d new double[subMatrix.length][nCols];\n         for (int i \u003d 0; i \u003c data.length; ++i) {\n             if (subMatrix[i].length !\u003d nCols) {\n-                throw MathRuntimeException.createIllegalArgumentException(DIFFERENT_ROWS_LENGTHS_MESSAGE, nCols, subMatrix[i].length);\n+                throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.DIFFERENT_ROWS_LENGTHS, nCols, subMatrix[i].length);\n             }\n             System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);\n         }\n     } else {\n         super.setSubMatrix(subMatrix, row, column);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bd345d954b85ef8eb3867c5044f933e34df0c124": {
      "type": "Ybodychange",
      "commitMessage": "replaced duplicated strings by a single static string in many classes\nthis will later allow enabling the MultipleStringLiterals rule in checkstyle\n(there are many other duplicated strings, so this cannot be enabled yet, I\u0027ll\ndo another pass on it later on)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@885278 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/29/09, 1:47 PM",
      "commitName": "bd345d954b85ef8eb3867c5044f933e34df0c124",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "9/5/09, 10:36 AM",
      "commitNameOld": "26dac5a0e7fc9c6be9571b3e71a15d8502480d96",
      "commitAuthorOld": "Phil Steitz",
      "daysBetweenCommits": 85.17,
      "commitsBetweenForRepo": 58,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void setSubMatrix(final double[][] subMatrix, final int row, final int column) throws MatrixIndexException {\n    if (data \u003d\u003d null) {\n        if (row \u003e 0) {\n            throw MathRuntimeException.createIllegalStateException(\"first {0} rows are not initialized yet\", row);\n        }\n        if (column \u003e 0) {\n            throw MathRuntimeException.createIllegalStateException(\"first {0} columns are not initialized yet\", column);\n        }\n        final int nRows \u003d subMatrix.length;\n        if (nRows \u003d\u003d 0) {\n            throw MathRuntimeException.createIllegalArgumentException(AT_LEAST_ONE_ROW_MESSAGE);\n        }\n        final int nCols \u003d subMatrix[0].length;\n        if (nCols \u003d\u003d 0) {\n            throw MathRuntimeException.createIllegalArgumentException(AT_LEAST_ONE_COLUMN_MESSAGE);\n        }\n        data \u003d new double[subMatrix.length][nCols];\n        for (int i \u003d 0; i \u003c data.length; ++i) {\n            if (subMatrix[i].length !\u003d nCols) {\n                throw MathRuntimeException.createIllegalArgumentException(DIFFERENT_ROWS_LENGTHS_MESSAGE, nCols, subMatrix[i].length);\n            }\n            System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);\n        }\n    } else {\n        super.setSubMatrix(subMatrix, row, column);\n    }\n}",
      "path": "src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java",
      "functionStartLine": 333,
      "functionName": "setSubMatrix",
      "functionAnnotation": "@Override",
      "functionDoc": "@inheritDoc}\n",
      "diff": "@@ -1,28 +1,28 @@\n @Override\n public void setSubMatrix(final double[][] subMatrix, final int row, final int column) throws MatrixIndexException {\n     if (data \u003d\u003d null) {\n         if (row \u003e 0) {\n             throw MathRuntimeException.createIllegalStateException(\"first {0} rows are not initialized yet\", row);\n         }\n         if (column \u003e 0) {\n             throw MathRuntimeException.createIllegalStateException(\"first {0} columns are not initialized yet\", column);\n         }\n         final int nRows \u003d subMatrix.length;\n         if (nRows \u003d\u003d 0) {\n-            throw MathRuntimeException.createIllegalArgumentException(\"matrix must have at least one row\");\n+            throw MathRuntimeException.createIllegalArgumentException(AT_LEAST_ONE_ROW_MESSAGE);\n         }\n         final int nCols \u003d subMatrix[0].length;\n         if (nCols \u003d\u003d 0) {\n-            throw MathRuntimeException.createIllegalArgumentException(\"matrix must have at least one column\");\n+            throw MathRuntimeException.createIllegalArgumentException(AT_LEAST_ONE_COLUMN_MESSAGE);\n         }\n         data \u003d new double[subMatrix.length][nCols];\n         for (int i \u003d 0; i \u003c data.length; ++i) {\n             if (subMatrix[i].length !\u003d nCols) {\n-                throw MathRuntimeException.createIllegalArgumentException(\"some rows have length {0} while others have length {1}\", nCols, subMatrix[i].length);\n+                throw MathRuntimeException.createIllegalArgumentException(DIFFERENT_ROWS_LENGTHS_MESSAGE, nCols, subMatrix[i].length);\n             }\n             System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);\n         }\n     } else {\n         super.setSubMatrix(subMatrix, row, column);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "26dac5a0e7fc9c6be9571b3e71a15d8502480d96": {
      "type": "Yformatchange",
      "commitMessage": "Removed trailing spaces.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@811685 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/5/09, 10:36 AM",
      "commitName": "26dac5a0e7fc9c6be9571b3e71a15d8502480d96",
      "commitAuthor": "Phil Steitz",
      "commitDateOld": "8/1/09, 7:30 AM",
      "commitNameOld": "d6a438e931412713e99624cf9ed74470f1040184",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 35.13,
      "commitsBetweenForRepo": 44,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void setSubMatrix(final double[][] subMatrix, final int row, final int column) throws MatrixIndexException {\n    if (data \u003d\u003d null) {\n        if (row \u003e 0) {\n            throw MathRuntimeException.createIllegalStateException(\"first {0} rows are not initialized yet\", row);\n        }\n        if (column \u003e 0) {\n            throw MathRuntimeException.createIllegalStateException(\"first {0} columns are not initialized yet\", column);\n        }\n        final int nRows \u003d subMatrix.length;\n        if (nRows \u003d\u003d 0) {\n            throw MathRuntimeException.createIllegalArgumentException(\"matrix must have at least one row\");\n        }\n        final int nCols \u003d subMatrix[0].length;\n        if (nCols \u003d\u003d 0) {\n            throw MathRuntimeException.createIllegalArgumentException(\"matrix must have at least one column\");\n        }\n        data \u003d new double[subMatrix.length][nCols];\n        for (int i \u003d 0; i \u003c data.length; ++i) {\n            if (subMatrix[i].length !\u003d nCols) {\n                throw MathRuntimeException.createIllegalArgumentException(\"some rows have length {0} while others have length {1}\", nCols, subMatrix[i].length);\n            }\n            System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);\n        }\n    } else {\n        super.setSubMatrix(subMatrix, row, column);\n    }\n}",
      "path": "src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java",
      "functionStartLine": 312,
      "functionName": "setSubMatrix",
      "functionAnnotation": "@Override",
      "functionDoc": "@inheritDoc}\n",
      "diff": "",
      "extendedDetails": {}
    },
    "d6a438e931412713e99624cf9ed74470f1040184": {
      "type": "Yfilerename",
      "commitMessage": "moved main java directory for compliance with maven standard directory layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@799870 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/1/09, 7:30 AM",
      "commitName": "d6a438e931412713e99624cf9ed74470f1040184",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "8/1/09, 7:23 AM",
      "commitNameOld": "2ad5ef61630be627f46ae1c266cf796f044bd4a8",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void setSubMatrix(final double[][] subMatrix, final int row, final int column) throws MatrixIndexException {\n    if (data \u003d\u003d null) {\n        if (row \u003e 0) {\n            throw MathRuntimeException.createIllegalStateException(\"first {0} rows are not initialized yet\", row);\n        }\n        if (column \u003e 0) {\n            throw MathRuntimeException.createIllegalStateException(\"first {0} columns are not initialized yet\", column);\n        }\n        final int nRows \u003d subMatrix.length;\n        if (nRows \u003d\u003d 0) {\n            throw MathRuntimeException.createIllegalArgumentException(\"matrix must have at least one row\");\n        }\n        final int nCols \u003d subMatrix[0].length;\n        if (nCols \u003d\u003d 0) {\n            throw MathRuntimeException.createIllegalArgumentException(\"matrix must have at least one column\");\n        }\n        data \u003d new double[subMatrix.length][nCols];\n        for (int i \u003d 0; i \u003c data.length; ++i) {\n            if (subMatrix[i].length !\u003d nCols) {\n                throw MathRuntimeException.createIllegalArgumentException(\"some rows have length {0} while others have length {1}\", nCols, subMatrix[i].length);\n            }\n            System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);\n        }\n    } else {\n        super.setSubMatrix(subMatrix, row, column);\n    }\n}",
      "path": "src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java",
      "functionStartLine": 312,
      "functionName": "setSubMatrix",
      "functionAnnotation": "@Override",
      "functionDoc": "@inheritDoc}\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java",
        "newPath": "src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java"
      }
    },
    "dbae4b01341d9d72e52d1e07a15d5023deca3d92": {
      "type": "Yintroduced",
      "commitMessage": "renamed RealMatrixImpl, RealVectorImpl, FieldMatrixImpl and FieldVectorImpl\ninto Array2DRowRealMatrix, ArrayRealVector, Array2DRowFieldMatrix and ArrayFieldVector\nas suggested by Sam in http://markmail.org/message/hh37ivxpzaoapekj\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@783702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/11/09, 1:54 AM",
      "commitName": "dbae4b01341d9d72e52d1e07a15d5023deca3d92",
      "commitAuthor": "Luc Maisonobe",
      "diff": "@@ -0,0 +1,28 @@\n+@Override\n+public void setSubMatrix(final double[][] subMatrix, final int row, final int column) throws MatrixIndexException {\n+    if (data \u003d\u003d null) {\n+        if (row \u003e 0) {\n+            throw MathRuntimeException.createIllegalStateException(\"first {0} rows are not initialized yet\", row);\n+        }\n+        if (column \u003e 0) {\n+            throw MathRuntimeException.createIllegalStateException(\"first {0} columns are not initialized yet\", column);\n+        }\n+        final int nRows \u003d subMatrix.length;\n+        if (nRows \u003d\u003d 0) {\n+            throw MathRuntimeException.createIllegalArgumentException(\"matrix must have at least one row\");\n+        }\n+        final int nCols \u003d subMatrix[0].length;\n+        if (nCols \u003d\u003d 0) {\n+            throw MathRuntimeException.createIllegalArgumentException(\"matrix must have at least one column\");\n+        }\n+        data \u003d new double[subMatrix.length][nCols];\n+        for (int i \u003d 0; i \u003c data.length; ++i) {\n+            if (subMatrix[i].length !\u003d nCols) {\n+                throw MathRuntimeException.createIllegalArgumentException(\"some rows have length {0} while others have length {1}\", nCols, subMatrix[i].length);\n+            }\n+            System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);\n+        }\n+    } else {\n+        super.setSubMatrix(subMatrix, row, column);\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic void setSubMatrix(final double[][] subMatrix, final int row, final int column) throws MatrixIndexException {\n    if (data \u003d\u003d null) {\n        if (row \u003e 0) {\n            throw MathRuntimeException.createIllegalStateException(\"first {0} rows are not initialized yet\", row);\n        }\n        if (column \u003e 0) {\n            throw MathRuntimeException.createIllegalStateException(\"first {0} columns are not initialized yet\", column);\n        }\n        final int nRows \u003d subMatrix.length;\n        if (nRows \u003d\u003d 0) {\n            throw MathRuntimeException.createIllegalArgumentException(\"matrix must have at least one row\");\n        }\n        final int nCols \u003d subMatrix[0].length;\n        if (nCols \u003d\u003d 0) {\n            throw MathRuntimeException.createIllegalArgumentException(\"matrix must have at least one column\");\n        }\n        data \u003d new double[subMatrix.length][nCols];\n        for (int i \u003d 0; i \u003c data.length; ++i) {\n            if (subMatrix[i].length !\u003d nCols) {\n                throw MathRuntimeException.createIllegalArgumentException(\"some rows have length {0} while others have length {1}\", nCols, subMatrix[i].length);\n            }\n            System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);\n        }\n    } else {\n        super.setSubMatrix(subMatrix, row, column);\n    }\n}",
      "path": "src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java",
      "functionStartLine": 312,
      "functionName": "setSubMatrix",
      "functionAnnotation": "@Override",
      "functionDoc": "@inheritDoc}\n"
    }
  }
}