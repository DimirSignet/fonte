{
  "origin": "codeshovel",
  "repositoryName": "Math-42b",
  "repositoryPath": "/tmp/Math-42b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SimplexSolver.java",
  "functionName": "getPivotRow",
  "functionId": "getPivotRow___tableau-SimplexTableau__col-int(modifiers-final)",
  "sourceFilePath": "src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java",
  "functionAnnotation": "",
  "functionDoc": "Returns the row with the minimum ratio as given by the minimum ratio test (MRT).\n\n@param tableau simple tableau for the problem\n@param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}\n@return row with the minimum ratio\n",
  "functionStartLine": 88,
  "functionEndLine": 126,
  "numCommitsSeen": 22,
  "timeTaken": 1693,
  "changeHistory": [
    "b59e97464fc8d910c06b90c06598d7176ce1924a",
    "91c94b8ca9d5dade4f02b43edd67542a22076ea1",
    "afef5eea05b8a7395f5ee33726aa2113771215f4",
    "ad48588bf1bb3a6761a3a7d2582af672f4f2e3dc",
    "71b31811964d5dc9387a53235e3f70616944de99",
    "26dac5a0e7fc9c6be9571b3e71a15d8502480d96",
    "4ece1884cc408e15c8f1db9010fec5cac43937b9",
    "d6a438e931412713e99624cf9ed74470f1040184",
    "f75e841b0f739bb69a76cd354d00aa0f22484e5d",
    "6c65646a2d62b8ead3a7d4da3410fc4050c25fb5",
    "96b1276efd88c536f3c918396f7460e557b9ee65"
  ],
  "changeHistoryShort": {
    "b59e97464fc8d910c06b90c06598d7176ce1924a": "Ybodychange",
    "91c94b8ca9d5dade4f02b43edd67542a22076ea1": "Yformatchange",
    "afef5eea05b8a7395f5ee33726aa2113771215f4": "Ybodychange",
    "ad48588bf1bb3a6761a3a7d2582af672f4f2e3dc": "Ybodychange",
    "71b31811964d5dc9387a53235e3f70616944de99": "Ymultichange(Yparameterchange,Ybodychange,Yparametermetachange)",
    "26dac5a0e7fc9c6be9571b3e71a15d8502480d96": "Yformatchange",
    "4ece1884cc408e15c8f1db9010fec5cac43937b9": "Ybodychange",
    "d6a438e931412713e99624cf9ed74470f1040184": "Yfilerename",
    "f75e841b0f739bb69a76cd354d00aa0f22484e5d": "Ydocchange",
    "6c65646a2d62b8ead3a7d4da3410fc4050c25fb5": "Ybodychange",
    "96b1276efd88c536f3c918396f7460e557b9ee65": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b59e97464fc8d910c06b90c06598d7176ce1924a": {
      "type": "Ybodychange",
      "commitMessage": "MATH-689\nMoved \"equals...\" and \"compareTo\" methods from \"MathUtils\" over to a new\n\"Precision\" class.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1181282 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/10/11, 3:35 PM",
      "commitName": "b59e97464fc8d910c06b90c06598d7176ce1924a",
      "commitAuthor": "Gilles Sadowski",
      "commitDateOld": "10/1/11, 7:52 AM",
      "commitNameOld": "da8550576fcdc213c528659c61a203911d3cb084",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 9.32,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "actualSource": "private Integer getPivotRow(SimplexTableau tableau, final int col) {\n    List\u003cInteger\u003e minRatioPositions \u003d new ArrayList\u003cInteger\u003e();\n    double minRatio \u003d Double.MAX_VALUE;\n    for (int i \u003d tableau.getNumObjectiveFunctions(); i \u003c tableau.getHeight(); i++) {\n        final double rhs \u003d tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry \u003d tableau.getEntry(i, col);\n        if (Precision.compareTo(entry, 0d, maxUlps) \u003e 0) {\n            final double ratio \u003d rhs / entry;\n            final int cmp \u003d Precision.compareTo(ratio, minRatio, maxUlps);\n            if (cmp \u003d\u003d 0) {\n                minRatioPositions.add(i);\n            } else if (cmp \u003c 0) {\n                minRatio \u003d ratio;\n                minRatioPositions \u003d new ArrayList\u003cInteger\u003e();\n                minRatioPositions.add(i);\n            }\n        }\n    }\n    if (minRatioPositions.size() \u003d\u003d 0) {\n        return null;\n    } else if (minRatioPositions.size() \u003e 1) {\n        for (Integer row : minRatioPositions) {\n            for (int i \u003d 0; i \u003c tableau.getNumArtificialVariables(); i++) {\n                int column \u003d i + tableau.getArtificialVariableOffset();\n                final double entry \u003d tableau.getEntry(row, column);\n                if (Precision.equals(entry, 1d, maxUlps) \u0026\u0026 row.equals(tableau.getBasicRow(column))) {\n                    return row;\n                }\n            }\n        }\n    }\n    return minRatioPositions.get(0);\n}",
      "path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java",
      "functionStartLine": 88,
      "functionName": "getPivotRow",
      "functionAnnotation": "",
      "functionDoc": "Returns the row with the minimum ratio as given by the minimum ratio test (MRT).\n\n@param tableau simple tableau for the problem\n@param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}\n@return row with the minimum ratio\n",
      "diff": "@@ -1,33 +1,33 @@\n private Integer getPivotRow(SimplexTableau tableau, final int col) {\n     List\u003cInteger\u003e minRatioPositions \u003d new ArrayList\u003cInteger\u003e();\n     double minRatio \u003d Double.MAX_VALUE;\n     for (int i \u003d tableau.getNumObjectiveFunctions(); i \u003c tableau.getHeight(); i++) {\n         final double rhs \u003d tableau.getEntry(i, tableau.getWidth() - 1);\n         final double entry \u003d tableau.getEntry(i, col);\n-        if (MathUtils.compareTo(entry, 0d, maxUlps) \u003e 0) {\n+        if (Precision.compareTo(entry, 0d, maxUlps) \u003e 0) {\n             final double ratio \u003d rhs / entry;\n-            final int cmp \u003d MathUtils.compareTo(ratio, minRatio, maxUlps);\n+            final int cmp \u003d Precision.compareTo(ratio, minRatio, maxUlps);\n             if (cmp \u003d\u003d 0) {\n                 minRatioPositions.add(i);\n             } else if (cmp \u003c 0) {\n                 minRatio \u003d ratio;\n                 minRatioPositions \u003d new ArrayList\u003cInteger\u003e();\n                 minRatioPositions.add(i);\n             }\n         }\n     }\n     if (minRatioPositions.size() \u003d\u003d 0) {\n         return null;\n     } else if (minRatioPositions.size() \u003e 1) {\n         for (Integer row : minRatioPositions) {\n             for (int i \u003d 0; i \u003c tableau.getNumArtificialVariables(); i++) {\n                 int column \u003d i + tableau.getArtificialVariableOffset();\n                 final double entry \u003d tableau.getEntry(row, column);\n-                if (MathUtils.equals(entry, 1d, maxUlps) \u0026\u0026 row.equals(tableau.getBasicRow(column))) {\n+                if (Precision.equals(entry, 1d, maxUlps) \u0026\u0026 row.equals(tableau.getBasicRow(column))) {\n                     return row;\n                 }\n             }\n         }\n     }\n     return minRatioPositions.get(0);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "91c94b8ca9d5dade4f02b43edd67542a22076ea1": {
      "type": "Yformatchange",
      "commitMessage": "Trailing spaces.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1091376 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/12/11, 4:29 AM",
      "commitName": "91c94b8ca9d5dade4f02b43edd67542a22076ea1",
      "commitAuthor": "Gilles Sadowski",
      "commitDateOld": "4/10/11, 9:00 AM",
      "commitNameOld": "afef5eea05b8a7395f5ee33726aa2113771215f4",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 1.81,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "private Integer getPivotRow(SimplexTableau tableau, final int col) {\n    List\u003cInteger\u003e minRatioPositions \u003d new ArrayList\u003cInteger\u003e();\n    double minRatio \u003d Double.MAX_VALUE;\n    for (int i \u003d tableau.getNumObjectiveFunctions(); i \u003c tableau.getHeight(); i++) {\n        final double rhs \u003d tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry \u003d tableau.getEntry(i, col);\n        if (MathUtils.compareTo(entry, 0d, maxUlps) \u003e 0) {\n            final double ratio \u003d rhs / entry;\n            final int cmp \u003d MathUtils.compareTo(ratio, minRatio, maxUlps);\n            if (cmp \u003d\u003d 0) {\n                minRatioPositions.add(i);\n            } else if (cmp \u003c 0) {\n                minRatio \u003d ratio;\n                minRatioPositions \u003d new ArrayList\u003cInteger\u003e();\n                minRatioPositions.add(i);\n            }\n        }\n    }\n    if (minRatioPositions.size() \u003d\u003d 0) {\n        return null;\n    } else if (minRatioPositions.size() \u003e 1) {\n        for (Integer row : minRatioPositions) {\n            for (int i \u003d 0; i \u003c tableau.getNumArtificialVariables(); i++) {\n                int column \u003d i + tableau.getArtificialVariableOffset();\n                final double entry \u003d tableau.getEntry(row, column);\n                if (MathUtils.equals(entry, 1d, maxUlps) \u0026\u0026 row.equals(tableau.getBasicRow(column))) {\n                    return row;\n                }\n            }\n        }\n    }\n    return minRatioPositions.get(0);\n}",
      "path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java",
      "functionStartLine": 88,
      "functionName": "getPivotRow",
      "functionAnnotation": "",
      "functionDoc": "Returns the row with the minimum ratio as given by the minimum ratio test (MRT).\n\n@param tableau simple tableau for the problem\n@param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}\n@return row with the minimum ratio\n",
      "diff": "",
      "extendedDetails": {}
    },
    "afef5eea05b8a7395f5ee33726aa2113771215f4": {
      "type": "Ybodychange",
      "commitMessage": "replaced the custom comparison method in SimplexSolver with the new MathUtils.compareTo(double, double, int) with maxUlps as the third parameter, as per Gilles advice.\n\nJira: MATH-434\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1090823 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/10/11, 9:00 AM",
      "commitName": "afef5eea05b8a7395f5ee33726aa2113771215f4",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "4/9/11, 12:20 PM",
      "commitNameOld": "ad48588bf1bb3a6761a3a7d2582af672f4f2e3dc",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 0.86,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "private Integer getPivotRow(SimplexTableau tableau, final int col) {\n    List\u003cInteger\u003e minRatioPositions \u003d new ArrayList\u003cInteger\u003e();\n    double minRatio \u003d Double.MAX_VALUE;\n    for (int i \u003d tableau.getNumObjectiveFunctions(); i \u003c tableau.getHeight(); i++) {\n        final double rhs \u003d tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry \u003d tableau.getEntry(i, col);\n        if (MathUtils.compareTo(entry, 0d, maxUlps) \u003e 0) {\n            final double ratio \u003d rhs / entry;\n            final int cmp \u003d MathUtils.compareTo(ratio, minRatio, maxUlps);\n            if (cmp \u003d\u003d 0) {\n                minRatioPositions.add(i);\n            } else if (cmp \u003c 0) {\n                minRatio \u003d ratio;\n                minRatioPositions \u003d new ArrayList\u003cInteger\u003e();\n                minRatioPositions.add(i);\n            }\n        }\n    }\n    if (minRatioPositions.size() \u003d\u003d 0) {\n        return null;\n    } else if (minRatioPositions.size() \u003e 1) {\n        for (Integer row : minRatioPositions) {\n            for (int i \u003d 0; i \u003c tableau.getNumArtificialVariables(); i++) {\n                int column \u003d i + tableau.getArtificialVariableOffset();\n                final double entry \u003d tableau.getEntry(row, column);\n                if (MathUtils.equals(entry, 1d, maxUlps) \u0026\u0026 row.equals(tableau.getBasicRow(column))) {\n                    return row;\n                }\n            }\n        }\n    }\n    return minRatioPositions.get(0);\n}",
      "path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java",
      "functionStartLine": 88,
      "functionName": "getPivotRow",
      "functionAnnotation": "",
      "functionDoc": "Returns the row with the minimum ratio as given by the minimum ratio test (MRT).\n\n@param tableau simple tableau for the problem\n@param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}\n@return row with the minimum ratio\n",
      "diff": "@@ -1,33 +1,33 @@\n private Integer getPivotRow(SimplexTableau tableau, final int col) {\n     List\u003cInteger\u003e minRatioPositions \u003d new ArrayList\u003cInteger\u003e();\n     double minRatio \u003d Double.MAX_VALUE;\n     for (int i \u003d tableau.getNumObjectiveFunctions(); i \u003c tableau.getHeight(); i++) {\n         final double rhs \u003d tableau.getEntry(i, tableau.getWidth() - 1);\n         final double entry \u003d tableau.getEntry(i, col);\n-        if (MathUtils.compareTo(entry, 0d, getEpsilon(entry)) \u003e 0) {\n+        if (MathUtils.compareTo(entry, 0d, maxUlps) \u003e 0) {\n             final double ratio \u003d rhs / entry;\n-            final int cmp \u003d MathUtils.compareTo(ratio, minRatio, getEpsilon(ratio));\n+            final int cmp \u003d MathUtils.compareTo(ratio, minRatio, maxUlps);\n             if (cmp \u003d\u003d 0) {\n                 minRatioPositions.add(i);\n             } else if (cmp \u003c 0) {\n                 minRatio \u003d ratio;\n                 minRatioPositions \u003d new ArrayList\u003cInteger\u003e();\n                 minRatioPositions.add(i);\n             }\n         }\n     }\n     if (minRatioPositions.size() \u003d\u003d 0) {\n         return null;\n     } else if (minRatioPositions.size() \u003e 1) {\n         for (Integer row : minRatioPositions) {\n             for (int i \u003d 0; i \u003c tableau.getNumArtificialVariables(); i++) {\n                 int column \u003d i + tableau.getArtificialVariableOffset();\n                 final double entry \u003d tableau.getEntry(row, column);\n-                if (MathUtils.equals(entry, 1d, getEpsilon(entry)) \u0026\u0026 row.equals(tableau.getBasicRow(column))) {\n+                if (MathUtils.equals(entry, 1d, maxUlps) \u0026\u0026 row.equals(tableau.getBasicRow(column))) {\n                     return row;\n                 }\n             }\n         }\n     }\n     return minRatioPositions.get(0);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ad48588bf1bb3a6761a3a7d2582af672f4f2e3dc": {
      "type": "Ybodychange",
      "commitMessage": "Fixed two errors in simplex solver when entries are close together or\nwhen variables are not restricted to non-negative.\n\nJira: MATH-434\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1090656 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/9/11, 12:20 PM",
      "commitName": "ad48588bf1bb3a6761a3a7d2582af672f4f2e3dc",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "9/9/09, 1:48 AM",
      "commitNameOld": "b05f8dca124e43a35f9d61f26aa776a423cf67e4",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 577.44,
      "commitsBetweenForRepo": 802,
      "commitsBetweenForFile": 1,
      "actualSource": "private Integer getPivotRow(SimplexTableau tableau, final int col) {\n    List\u003cInteger\u003e minRatioPositions \u003d new ArrayList\u003cInteger\u003e();\n    double minRatio \u003d Double.MAX_VALUE;\n    for (int i \u003d tableau.getNumObjectiveFunctions(); i \u003c tableau.getHeight(); i++) {\n        final double rhs \u003d tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry \u003d tableau.getEntry(i, col);\n        if (MathUtils.compareTo(entry, 0d, getEpsilon(entry)) \u003e 0) {\n            final double ratio \u003d rhs / entry;\n            final int cmp \u003d MathUtils.compareTo(ratio, minRatio, getEpsilon(ratio));\n            if (cmp \u003d\u003d 0) {\n                minRatioPositions.add(i);\n            } else if (cmp \u003c 0) {\n                minRatio \u003d ratio;\n                minRatioPositions \u003d new ArrayList\u003cInteger\u003e();\n                minRatioPositions.add(i);\n            }\n        }\n    }\n    if (minRatioPositions.size() \u003d\u003d 0) {\n        return null;\n    } else if (minRatioPositions.size() \u003e 1) {\n        for (Integer row : minRatioPositions) {\n            for (int i \u003d 0; i \u003c tableau.getNumArtificialVariables(); i++) {\n                int column \u003d i + tableau.getArtificialVariableOffset();\n                final double entry \u003d tableau.getEntry(row, column);\n                if (MathUtils.equals(entry, 1d, getEpsilon(entry)) \u0026\u0026 row.equals(tableau.getBasicRow(column))) {\n                    return row;\n                }\n            }\n        }\n    }\n    return minRatioPositions.get(0);\n}",
      "path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java",
      "functionStartLine": 89,
      "functionName": "getPivotRow",
      "functionAnnotation": "",
      "functionDoc": "Returns the row with the minimum ratio as given by the minimum ratio test (MRT).\n\n@param tableau simple tableau for the problem\n@param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}\n@return row with the minimum ratio\n",
      "diff": "@@ -1,31 +1,33 @@\n private Integer getPivotRow(SimplexTableau tableau, final int col) {\n     List\u003cInteger\u003e minRatioPositions \u003d new ArrayList\u003cInteger\u003e();\n     double minRatio \u003d Double.MAX_VALUE;\n     for (int i \u003d tableau.getNumObjectiveFunctions(); i \u003c tableau.getHeight(); i++) {\n         final double rhs \u003d tableau.getEntry(i, tableau.getWidth() - 1);\n         final double entry \u003d tableau.getEntry(i, col);\n-        if (MathUtils.compareTo(entry, 0, epsilon) \u003e 0) {\n+        if (MathUtils.compareTo(entry, 0d, getEpsilon(entry)) \u003e 0) {\n             final double ratio \u003d rhs / entry;\n-            if (MathUtils.equals(ratio, minRatio, epsilon)) {\n+            final int cmp \u003d MathUtils.compareTo(ratio, minRatio, getEpsilon(ratio));\n+            if (cmp \u003d\u003d 0) {\n                 minRatioPositions.add(i);\n-            } else if (ratio \u003c minRatio) {\n+            } else if (cmp \u003c 0) {\n                 minRatio \u003d ratio;\n                 minRatioPositions \u003d new ArrayList\u003cInteger\u003e();\n                 minRatioPositions.add(i);\n             }\n         }\n     }\n     if (minRatioPositions.size() \u003d\u003d 0) {\n         return null;\n     } else if (minRatioPositions.size() \u003e 1) {\n         for (Integer row : minRatioPositions) {\n             for (int i \u003d 0; i \u003c tableau.getNumArtificialVariables(); i++) {\n                 int column \u003d i + tableau.getArtificialVariableOffset();\n-                if (MathUtils.equals(tableau.getEntry(row, column), 1, epsilon) \u0026\u0026 row.equals(tableau.getBasicRow(column))) {\n+                final double entry \u003d tableau.getEntry(row, column);\n+                if (MathUtils.equals(entry, 1d, getEpsilon(entry)) \u0026\u0026 row.equals(tableau.getBasicRow(column))) {\n                     return row;\n                 }\n             }\n         }\n     }\n     return minRatioPositions.get(0);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "71b31811964d5dc9387a53235e3f70616944de99": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Yparametermetachange)",
      "commitMessage": "added Benjamin\u0027s patch from 2009-09-07\nJIRA: MATH-286\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@812390 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/8/09, 1:40 AM",
      "commitName": "71b31811964d5dc9387a53235e3f70616944de99",
      "commitAuthor": "Luc Maisonobe",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "added Benjamin\u0027s patch from 2009-09-07\nJIRA: MATH-286\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@812390 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "9/8/09, 1:40 AM",
          "commitName": "71b31811964d5dc9387a53235e3f70616944de99",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "9/5/09, 10:36 AM",
          "commitNameOld": "26dac5a0e7fc9c6be9571b3e71a15d8502480d96",
          "commitAuthorOld": "Phil Steitz",
          "daysBetweenCommits": 2.63,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "actualSource": "private Integer getPivotRow(SimplexTableau tableau, final int col) {\n    List\u003cInteger\u003e minRatioPositions \u003d new ArrayList\u003cInteger\u003e();\n    double minRatio \u003d Double.MAX_VALUE;\n    for (int i \u003d tableau.getNumObjectiveFunctions(); i \u003c tableau.getHeight(); i++) {\n        final double rhs \u003d tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry \u003d tableau.getEntry(i, col);\n        if (MathUtils.compareTo(entry, 0, epsilon) \u003e 0) {\n            final double ratio \u003d rhs / entry;\n            if (MathUtils.equals(ratio, minRatio, epsilon)) {\n                minRatioPositions.add(i);\n            } else if (ratio \u003c minRatio) {\n                minRatio \u003d ratio;\n                minRatioPositions \u003d new ArrayList\u003cInteger\u003e();\n                minRatioPositions.add(i);\n            }\n        }\n    }\n    if (minRatioPositions.size() \u003d\u003d 0) {\n        return null;\n    } else if (minRatioPositions.size() \u003e 1) {\n        for (Integer row : minRatioPositions) {\n            for (int i \u003d 0; i \u003c tableau.getNumArtificialVariables(); i++) {\n                int column \u003d i + tableau.getArtificialVariableOffset();\n                if (MathUtils.equals(tableau.getEntry(row, column), 1, epsilon) \u0026\u0026 row.equals(tableau.getBasicRow(column))) {\n                    return row;\n                }\n            }\n        }\n    }\n    return minRatioPositions.get(0);\n}",
          "path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java",
          "functionStartLine": 79,
          "functionName": "getPivotRow",
          "functionAnnotation": "",
          "functionDoc": "Returns the row with the minimum ratio as given by the minimum ratio test (MRT).\n\n@param tableau simple tableau for the problem\n@param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}\n@return row with the minimum ratio\n",
          "diff": "@@ -1,16 +1,31 @@\n-private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n+private Integer getPivotRow(SimplexTableau tableau, final int col) {\n+    List\u003cInteger\u003e minRatioPositions \u003d new ArrayList\u003cInteger\u003e();\n     double minRatio \u003d Double.MAX_VALUE;\n-    Integer minRatioPos \u003d null;\n     for (int i \u003d tableau.getNumObjectiveFunctions(); i \u003c tableau.getHeight(); i++) {\n         final double rhs \u003d tableau.getEntry(i, tableau.getWidth() - 1);\n         final double entry \u003d tableau.getEntry(i, col);\n         if (MathUtils.compareTo(entry, 0, epsilon) \u003e 0) {\n             final double ratio \u003d rhs / entry;\n-            if (ratio \u003c minRatio) {\n+            if (MathUtils.equals(ratio, minRatio, epsilon)) {\n+                minRatioPositions.add(i);\n+            } else if (ratio \u003c minRatio) {\n                 minRatio \u003d ratio;\n-                minRatioPos \u003d i;\n+                minRatioPositions \u003d new ArrayList\u003cInteger\u003e();\n+                minRatioPositions.add(i);\n             }\n         }\n     }\n-    return minRatioPos;\n+    if (minRatioPositions.size() \u003d\u003d 0) {\n+        return null;\n+    } else if (minRatioPositions.size() \u003e 1) {\n+        for (Integer row : minRatioPositions) {\n+            for (int i \u003d 0; i \u003c tableau.getNumArtificialVariables(); i++) {\n+                int column \u003d i + tableau.getArtificialVariableOffset();\n+                if (MathUtils.equals(tableau.getEntry(row, column), 1, epsilon) \u0026\u0026 row.equals(tableau.getBasicRow(column))) {\n+                    return row;\n+                }\n+            }\n+        }\n+    }\n+    return minRatioPositions.get(0);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[col-int(modifiers-final), tableau-SimplexTableau(modifiers-final)]",
            "newValue": "[tableau-SimplexTableau, col-int(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "added Benjamin\u0027s patch from 2009-09-07\nJIRA: MATH-286\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@812390 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "9/8/09, 1:40 AM",
          "commitName": "71b31811964d5dc9387a53235e3f70616944de99",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "9/5/09, 10:36 AM",
          "commitNameOld": "26dac5a0e7fc9c6be9571b3e71a15d8502480d96",
          "commitAuthorOld": "Phil Steitz",
          "daysBetweenCommits": 2.63,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "actualSource": "private Integer getPivotRow(SimplexTableau tableau, final int col) {\n    List\u003cInteger\u003e minRatioPositions \u003d new ArrayList\u003cInteger\u003e();\n    double minRatio \u003d Double.MAX_VALUE;\n    for (int i \u003d tableau.getNumObjectiveFunctions(); i \u003c tableau.getHeight(); i++) {\n        final double rhs \u003d tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry \u003d tableau.getEntry(i, col);\n        if (MathUtils.compareTo(entry, 0, epsilon) \u003e 0) {\n            final double ratio \u003d rhs / entry;\n            if (MathUtils.equals(ratio, minRatio, epsilon)) {\n                minRatioPositions.add(i);\n            } else if (ratio \u003c minRatio) {\n                minRatio \u003d ratio;\n                minRatioPositions \u003d new ArrayList\u003cInteger\u003e();\n                minRatioPositions.add(i);\n            }\n        }\n    }\n    if (minRatioPositions.size() \u003d\u003d 0) {\n        return null;\n    } else if (minRatioPositions.size() \u003e 1) {\n        for (Integer row : minRatioPositions) {\n            for (int i \u003d 0; i \u003c tableau.getNumArtificialVariables(); i++) {\n                int column \u003d i + tableau.getArtificialVariableOffset();\n                if (MathUtils.equals(tableau.getEntry(row, column), 1, epsilon) \u0026\u0026 row.equals(tableau.getBasicRow(column))) {\n                    return row;\n                }\n            }\n        }\n    }\n    return minRatioPositions.get(0);\n}",
          "path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java",
          "functionStartLine": 79,
          "functionName": "getPivotRow",
          "functionAnnotation": "",
          "functionDoc": "Returns the row with the minimum ratio as given by the minimum ratio test (MRT).\n\n@param tableau simple tableau for the problem\n@param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}\n@return row with the minimum ratio\n",
          "diff": "@@ -1,16 +1,31 @@\n-private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n+private Integer getPivotRow(SimplexTableau tableau, final int col) {\n+    List\u003cInteger\u003e minRatioPositions \u003d new ArrayList\u003cInteger\u003e();\n     double minRatio \u003d Double.MAX_VALUE;\n-    Integer minRatioPos \u003d null;\n     for (int i \u003d tableau.getNumObjectiveFunctions(); i \u003c tableau.getHeight(); i++) {\n         final double rhs \u003d tableau.getEntry(i, tableau.getWidth() - 1);\n         final double entry \u003d tableau.getEntry(i, col);\n         if (MathUtils.compareTo(entry, 0, epsilon) \u003e 0) {\n             final double ratio \u003d rhs / entry;\n-            if (ratio \u003c minRatio) {\n+            if (MathUtils.equals(ratio, minRatio, epsilon)) {\n+                minRatioPositions.add(i);\n+            } else if (ratio \u003c minRatio) {\n                 minRatio \u003d ratio;\n-                minRatioPos \u003d i;\n+                minRatioPositions \u003d new ArrayList\u003cInteger\u003e();\n+                minRatioPositions.add(i);\n             }\n         }\n     }\n-    return minRatioPos;\n+    if (minRatioPositions.size() \u003d\u003d 0) {\n+        return null;\n+    } else if (minRatioPositions.size() \u003e 1) {\n+        for (Integer row : minRatioPositions) {\n+            for (int i \u003d 0; i \u003c tableau.getNumArtificialVariables(); i++) {\n+                int column \u003d i + tableau.getArtificialVariableOffset();\n+                if (MathUtils.equals(tableau.getEntry(row, column), 1, epsilon) \u0026\u0026 row.equals(tableau.getBasicRow(column))) {\n+                    return row;\n+                }\n+            }\n+        }\n+    }\n+    return minRatioPositions.get(0);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "added Benjamin\u0027s patch from 2009-09-07\nJIRA: MATH-286\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@812390 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "9/8/09, 1:40 AM",
          "commitName": "71b31811964d5dc9387a53235e3f70616944de99",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "9/5/09, 10:36 AM",
          "commitNameOld": "26dac5a0e7fc9c6be9571b3e71a15d8502480d96",
          "commitAuthorOld": "Phil Steitz",
          "daysBetweenCommits": 2.63,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "actualSource": "private Integer getPivotRow(SimplexTableau tableau, final int col) {\n    List\u003cInteger\u003e minRatioPositions \u003d new ArrayList\u003cInteger\u003e();\n    double minRatio \u003d Double.MAX_VALUE;\n    for (int i \u003d tableau.getNumObjectiveFunctions(); i \u003c tableau.getHeight(); i++) {\n        final double rhs \u003d tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry \u003d tableau.getEntry(i, col);\n        if (MathUtils.compareTo(entry, 0, epsilon) \u003e 0) {\n            final double ratio \u003d rhs / entry;\n            if (MathUtils.equals(ratio, minRatio, epsilon)) {\n                minRatioPositions.add(i);\n            } else if (ratio \u003c minRatio) {\n                minRatio \u003d ratio;\n                minRatioPositions \u003d new ArrayList\u003cInteger\u003e();\n                minRatioPositions.add(i);\n            }\n        }\n    }\n    if (minRatioPositions.size() \u003d\u003d 0) {\n        return null;\n    } else if (minRatioPositions.size() \u003e 1) {\n        for (Integer row : minRatioPositions) {\n            for (int i \u003d 0; i \u003c tableau.getNumArtificialVariables(); i++) {\n                int column \u003d i + tableau.getArtificialVariableOffset();\n                if (MathUtils.equals(tableau.getEntry(row, column), 1, epsilon) \u0026\u0026 row.equals(tableau.getBasicRow(column))) {\n                    return row;\n                }\n            }\n        }\n    }\n    return minRatioPositions.get(0);\n}",
          "path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java",
          "functionStartLine": 79,
          "functionName": "getPivotRow",
          "functionAnnotation": "",
          "functionDoc": "Returns the row with the minimum ratio as given by the minimum ratio test (MRT).\n\n@param tableau simple tableau for the problem\n@param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}\n@return row with the minimum ratio\n",
          "diff": "@@ -1,16 +1,31 @@\n-private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n+private Integer getPivotRow(SimplexTableau tableau, final int col) {\n+    List\u003cInteger\u003e minRatioPositions \u003d new ArrayList\u003cInteger\u003e();\n     double minRatio \u003d Double.MAX_VALUE;\n-    Integer minRatioPos \u003d null;\n     for (int i \u003d tableau.getNumObjectiveFunctions(); i \u003c tableau.getHeight(); i++) {\n         final double rhs \u003d tableau.getEntry(i, tableau.getWidth() - 1);\n         final double entry \u003d tableau.getEntry(i, col);\n         if (MathUtils.compareTo(entry, 0, epsilon) \u003e 0) {\n             final double ratio \u003d rhs / entry;\n-            if (ratio \u003c minRatio) {\n+            if (MathUtils.equals(ratio, minRatio, epsilon)) {\n+                minRatioPositions.add(i);\n+            } else if (ratio \u003c minRatio) {\n                 minRatio \u003d ratio;\n-                minRatioPos \u003d i;\n+                minRatioPositions \u003d new ArrayList\u003cInteger\u003e();\n+                minRatioPositions.add(i);\n             }\n         }\n     }\n-    return minRatioPos;\n+    if (minRatioPositions.size() \u003d\u003d 0) {\n+        return null;\n+    } else if (minRatioPositions.size() \u003e 1) {\n+        for (Integer row : minRatioPositions) {\n+            for (int i \u003d 0; i \u003c tableau.getNumArtificialVariables(); i++) {\n+                int column \u003d i + tableau.getArtificialVariableOffset();\n+                if (MathUtils.equals(tableau.getEntry(row, column), 1, epsilon) \u0026\u0026 row.equals(tableau.getBasicRow(column))) {\n+                    return row;\n+                }\n+            }\n+        }\n+    }\n+    return minRatioPositions.get(0);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[col-int(modifiers-final), tableau-SimplexTableau(modifiers-final)]",
            "newValue": "[tableau-SimplexTableau, col-int(modifiers-final)]"
          }
        }
      ]
    },
    "26dac5a0e7fc9c6be9571b3e71a15d8502480d96": {
      "type": "Yformatchange",
      "commitMessage": "Removed trailing spaces.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@811685 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/5/09, 10:36 AM",
      "commitName": "26dac5a0e7fc9c6be9571b3e71a15d8502480d96",
      "commitAuthor": "Phil Steitz",
      "commitDateOld": "9/1/09, 2:02 PM",
      "commitNameOld": "d6beaeaa9c53aa4e6ae128a856e68a9eeb1cadb8",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 3.86,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n    double minRatio \u003d Double.MAX_VALUE;\n    Integer minRatioPos \u003d null;\n    for (int i \u003d tableau.getNumObjectiveFunctions(); i \u003c tableau.getHeight(); i++) {\n        final double rhs \u003d tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry \u003d tableau.getEntry(i, col);\n        if (MathUtils.compareTo(entry, 0, epsilon) \u003e 0) {\n            final double ratio \u003d rhs / entry;\n            if (ratio \u003c minRatio) {\n                minRatio \u003d ratio;\n                minRatioPos \u003d i;\n            }\n        }\n    }\n    return minRatioPos;\n}",
      "path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java",
      "functionStartLine": 76,
      "functionName": "getPivotRow",
      "functionAnnotation": "",
      "functionDoc": "Returns the row with the minimum ratio as given by the minimum ratio test (MRT).\n\n@param tableau simple tableau for the problem\n@param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}\n@return row with the minimum ratio\n",
      "diff": "",
      "extendedDetails": {}
    },
    "4ece1884cc408e15c8f1db9010fec5cac43937b9": {
      "type": "Ybodychange",
      "commitMessage": "fixed an error induced by zero entries in simplex solver\nJIRA: MATH-288\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@807738 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/25/09, 11:07 AM",
      "commitName": "4ece1884cc408e15c8f1db9010fec5cac43937b9",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "8/1/09, 7:30 AM",
      "commitNameOld": "d6a438e931412713e99624cf9ed74470f1040184",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 24.15,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "actualSource": "private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n    double minRatio \u003d Double.MAX_VALUE;\n    Integer minRatioPos \u003d null;\n    for (int i \u003d tableau.getNumObjectiveFunctions(); i \u003c tableau.getHeight(); i++) {\n        final double rhs \u003d tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry \u003d tableau.getEntry(i, col);\n        if (MathUtils.compareTo(entry, 0, epsilon) \u003e 0) {\n            final double ratio \u003d rhs / entry;\n            if (ratio \u003c minRatio) {\n                minRatio \u003d ratio;\n                minRatioPos \u003d i;\n            }\n        }\n    }\n    return minRatioPos;\n}",
      "path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java",
      "functionStartLine": 76,
      "functionName": "getPivotRow",
      "functionAnnotation": "",
      "functionDoc": "Returns the row with the minimum ratio as given by the minimum ratio test (MRT).\n\n@param tableau simple tableau for the problem\n@param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}\n@return row with the minimum ratio\n",
      "diff": "@@ -1,15 +1,16 @@\n private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n     double minRatio \u003d Double.MAX_VALUE;\n     Integer minRatioPos \u003d null;\n     for (int i \u003d tableau.getNumObjectiveFunctions(); i \u003c tableau.getHeight(); i++) {\n-        double rhs \u003d tableau.getEntry(i, tableau.getWidth() - 1);\n-        if (MathUtils.compareTo(tableau.getEntry(i, col), 0, epsilon) \u003e\u003d 0) {\n-            double ratio \u003d rhs / tableau.getEntry(i, col);\n+        final double rhs \u003d tableau.getEntry(i, tableau.getWidth() - 1);\n+        final double entry \u003d tableau.getEntry(i, col);\n+        if (MathUtils.compareTo(entry, 0, epsilon) \u003e 0) {\n+            final double ratio \u003d rhs / entry;\n             if (ratio \u003c minRatio) {\n                 minRatio \u003d ratio;\n                 minRatioPos \u003d i;\n             }\n         }\n     }\n     return minRatioPos;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d6a438e931412713e99624cf9ed74470f1040184": {
      "type": "Yfilerename",
      "commitMessage": "moved main java directory for compliance with maven standard directory layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@799870 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/1/09, 7:30 AM",
      "commitName": "d6a438e931412713e99624cf9ed74470f1040184",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "8/1/09, 7:23 AM",
      "commitNameOld": "2ad5ef61630be627f46ae1c266cf796f044bd4a8",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n    double minRatio \u003d Double.MAX_VALUE;\n    Integer minRatioPos \u003d null;\n    for (int i \u003d tableau.getNumObjectiveFunctions(); i \u003c tableau.getHeight(); i++) {\n        double rhs \u003d tableau.getEntry(i, tableau.getWidth() - 1);\n        if (MathUtils.compareTo(tableau.getEntry(i, col), 0, epsilon) \u003e\u003d 0) {\n            double ratio \u003d rhs / tableau.getEntry(i, col);\n            if (ratio \u003c minRatio) {\n                minRatio \u003d ratio;\n                minRatioPos \u003d i;\n            }\n        }\n    }\n    return minRatioPos;\n}",
      "path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java",
      "functionStartLine": 76,
      "functionName": "getPivotRow",
      "functionAnnotation": "",
      "functionDoc": "Returns the row with the minimum ratio as given by the minimum ratio test (MRT).\n\n@param tableau simple tableau for the problem\n@param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}\n@return row with the minimum ratio\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java",
        "newPath": "src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java"
      }
    },
    "f75e841b0f739bb69a76cd354d00aa0f22484e5d": {
      "type": "Ydocchange",
      "commitMessage": "Fixed javadoc link.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@797801 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/25/09, 10:22 AM",
      "commitName": "f75e841b0f739bb69a76cd354d00aa0f22484e5d",
      "commitAuthor": "Phil Steitz",
      "commitDateOld": "6/1/09, 9:39 PM",
      "commitNameOld": "efabab28b83811b92fb2c858226b04b42bab21e6",
      "commitAuthorOld": "William Barker",
      "daysBetweenCommits": 53.53,
      "commitsBetweenForRepo": 162,
      "commitsBetweenForFile": 1,
      "actualSource": "private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n    double minRatio \u003d Double.MAX_VALUE;\n    Integer minRatioPos \u003d null;\n    for (int i \u003d tableau.getNumObjectiveFunctions(); i \u003c tableau.getHeight(); i++) {\n        double rhs \u003d tableau.getEntry(i, tableau.getWidth() - 1);\n        if (MathUtils.compareTo(tableau.getEntry(i, col), 0, epsilon) \u003e\u003d 0) {\n            double ratio \u003d rhs / tableau.getEntry(i, col);\n            if (ratio \u003c minRatio) {\n                minRatio \u003d ratio;\n                minRatioPos \u003d i;\n            }\n        }\n    }\n    return minRatioPos;\n}",
      "path": "src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java",
      "functionStartLine": 76,
      "functionName": "getPivotRow",
      "functionAnnotation": "",
      "functionDoc": "Returns the row with the minimum ratio as given by the minimum ratio test (MRT).\n\n@param tableau simple tableau for the problem\n@param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}\n@return row with the minimum ratio\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Returns the row with the minimum ratio as given by the minimum ratio test (MRT).\n\n@param tableau simple tableau for the problem\n@param col the column to test the ratio of.  See {@link #getPivotColumn()}\n@return row with the minimum ratio\n",
        "newValue": "Returns the row with the minimum ratio as given by the minimum ratio test (MRT).\n\n@param tableau simple tableau for the problem\n@param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}\n@return row with the minimum ratio\n"
      }
    },
    "6c65646a2d62b8ead3a7d4da3410fc4050c25fb5": {
      "type": "Ybodychange",
      "commitMessage": "added a threshold for comparisons in Simplex solver\nJira: MATH-246\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@763412 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/8/09, 2:41 PM",
      "commitName": "6c65646a2d62b8ead3a7d4da3410fc4050c25fb5",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "4/5/09, 7:20 AM",
      "commitNameOld": "9c8d2c79c1ef565337599849cd066ff63b8d5816",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 3.31,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "actualSource": "private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n    double minRatio \u003d Double.MAX_VALUE;\n    Integer minRatioPos \u003d null;\n    for (int i \u003d tableau.getNumObjectiveFunctions(); i \u003c tableau.getHeight(); i++) {\n        double rhs \u003d tableau.getEntry(i, tableau.getWidth() - 1);\n        if (MathUtils.compareTo(tableau.getEntry(i, col), 0, epsilon) \u003e\u003d 0) {\n            double ratio \u003d rhs / tableau.getEntry(i, col);\n            if (ratio \u003c minRatio) {\n                minRatio \u003d ratio;\n                minRatioPos \u003d i;\n            }\n        }\n    }\n    return minRatioPos;\n}",
      "path": "src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java",
      "functionStartLine": 79,
      "functionName": "getPivotRow",
      "functionAnnotation": "",
      "functionDoc": "Returns the row with the minimum ratio as given by the minimum ratio test (MRT).\n\n@param tableau simple tableau for the problem\n@param col the column to test the ratio of.  See {@link #getPivotColumn()}\n@return row with the minimum ratio\n",
      "diff": "@@ -1,15 +1,15 @@\n private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n     double minRatio \u003d Double.MAX_VALUE;\n     Integer minRatioPos \u003d null;\n     for (int i \u003d tableau.getNumObjectiveFunctions(); i \u003c tableau.getHeight(); i++) {\n         double rhs \u003d tableau.getEntry(i, tableau.getWidth() - 1);\n-        if (tableau.getEntry(i, col) \u003e\u003d 0) {\n+        if (MathUtils.compareTo(tableau.getEntry(i, col), 0, epsilon) \u003e\u003d 0) {\n             double ratio \u003d rhs / tableau.getEntry(i, col);\n             if (ratio \u003c minRatio) {\n                 minRatio \u003d ratio;\n                 minRatioPos \u003d i;\n             }\n         }\n     }\n     return minRatioPos;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "96b1276efd88c536f3c918396f7460e557b9ee65": {
      "type": "Yintroduced",
      "commitMessage": "added an implementation of Dantzig\u0027s simplex algorithm\nto solve constrained linear optimization problems\nJIRA: MATH-246\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@758920 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/26/09, 4:25 PM",
      "commitName": "96b1276efd88c536f3c918396f7460e557b9ee65",
      "commitAuthor": "Luc Maisonobe",
      "diff": "@@ -0,0 +1,15 @@\n+private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n+    double minRatio \u003d Double.MAX_VALUE;\n+    Integer minRatioPos \u003d null;\n+    for (int i \u003d tableau.getNumObjectiveFunctions(); i \u003c tableau.getHeight(); i++) {\n+        double rhs \u003d tableau.getEntry(i, tableau.getWidth() - 1);\n+        if (tableau.getEntry(i, col) \u003e\u003d 0) {\n+            double ratio \u003d rhs / tableau.getEntry(i, col);\n+            if (ratio \u003c minRatio) {\n+                minRatio \u003d ratio;\n+                minRatioPos \u003d i;\n+            }\n+        }\n+    }\n+    return minRatioPos;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n    double minRatio \u003d Double.MAX_VALUE;\n    Integer minRatioPos \u003d null;\n    for (int i \u003d tableau.getNumObjectiveFunctions(); i \u003c tableau.getHeight(); i++) {\n        double rhs \u003d tableau.getEntry(i, tableau.getWidth() - 1);\n        if (tableau.getEntry(i, col) \u003e\u003d 0) {\n            double ratio \u003d rhs / tableau.getEntry(i, col);\n            if (ratio \u003c minRatio) {\n                minRatio \u003d ratio;\n                minRatioPos \u003d i;\n            }\n        }\n    }\n    return minRatioPos;\n}",
      "path": "src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java",
      "functionStartLine": 79,
      "functionName": "getPivotRow",
      "functionAnnotation": "",
      "functionDoc": "Returns the row with the minimum ratio as given by the minimum ratio test (MRT).\n\n@param tableau simple tableau for the problem\n@param col the column to test the ratio of.  See {@link #getPivotColumn()}\n@return row with the minimum ratio\n"
    }
  }
}