{
  "origin": "codeshovel",
  "repositoryName": "Closure-64b",
  "repositoryPath": "/tmp/Closure-64b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JSTypeRegistry.java",
  "functionName": "initializeBuiltInTypes",
  "functionId": "initializeBuiltInTypes",
  "sourceFilePath": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 236,
  "functionEndLine": 549,
  "numCommitsSeen": 40,
  "timeTaken": 2945,
  "changeHistory": [
    "f80152eb5a2de72e8336b26e0e78b9e6baae37d2",
    "043a352c2e85815a90a1926d112902d924bab6c1",
    "11bd742011d67590031dba6e9d1f7186393b38a0",
    "6dbca87c463d8a1e229a0d92d5cdf92247fdefde",
    "6bbac115c9a7928a7053b2da3a78df9569df8570",
    "1c75a5484b515bd593295fbf0c8491e2dd1f1c45",
    "e3bcc1c6e7ce7e9bfc3098cd5bf57774049f5baa",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "f80152eb5a2de72e8336b26e0e78b9e6baae37d2": "Ybodychange",
    "043a352c2e85815a90a1926d112902d924bab6c1": "Ybodychange",
    "11bd742011d67590031dba6e9d1f7186393b38a0": "Ybodychange",
    "6dbca87c463d8a1e229a0d92d5cdf92247fdefde": "Ybodychange",
    "6bbac115c9a7928a7053b2da3a78df9569df8570": "Ybodychange",
    "1c75a5484b515bd593295fbf0c8491e2dd1f1c45": "Ybodychange",
    "e3bcc1c6e7ce7e9bfc3098cd5bf57774049f5baa": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f80152eb5a2de72e8336b26e0e78b9e6baae37d2": {
      "type": "Ybodychange",
      "commitMessage": "\nMake the global-this a true subtype of window.\nDeclare \u0027goog\u0027 at scope-declaration time.\n\n\nR\u003djohnlenz\nDELTA\u003d166  (126 added, 11 deleted, 29 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d784\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@861 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/7/11, 5:08 PM",
      "commitName": "f80152eb5a2de72e8336b26e0e78b9e6baae37d2",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "2/14/11, 2:24 PM",
      "commitNameOld": "42c7587ffb41f2ce179710d64eb9285053379de0",
      "commitAuthorOld": "tylerg@google.com",
      "daysBetweenCommits": 21.11,
      "commitsBetweenForRepo": 77,
      "commitsBetweenForFile": 1,
      "actualSource": "private void initializeBuiltInTypes() {\n    BooleanType BOOLEAN_TYPE \u003d new BooleanType(this);\n    registerNativeType(JSTypeNative.BOOLEAN_TYPE, BOOLEAN_TYPE);\n    NullType NULL_TYPE \u003d new NullType(this);\n    registerNativeType(JSTypeNative.NULL_TYPE, NULL_TYPE);\n    NumberType NUMBER_TYPE \u003d new NumberType(this);\n    registerNativeType(JSTypeNative.NUMBER_TYPE, NUMBER_TYPE);\n    StringType STRING_TYPE \u003d new StringType(this);\n    registerNativeType(JSTypeNative.STRING_TYPE, STRING_TYPE);\n    UnknownType UNKNOWN_TYPE \u003d new UnknownType(this, false);\n    registerNativeType(JSTypeNative.UNKNOWN_TYPE, UNKNOWN_TYPE);\n    registerNativeType(JSTypeNative.CHECKED_UNKNOWN_TYPE, new UnknownType(this, true));\n    VoidType VOID_TYPE \u003d new VoidType(this);\n    registerNativeType(JSTypeNative.VOID_TYPE, VOID_TYPE);\n    AllType ALL_TYPE \u003d new AllType(this);\n    registerNativeType(JSTypeNative.ALL_TYPE, ALL_TYPE);\n    ObjectType TOP_LEVEL_PROTOTYPE \u003d new FunctionPrototypeType(this, null, null, true);\n    registerNativeType(JSTypeNative.TOP_LEVEL_PROTOTYPE, TOP_LEVEL_PROTOTYPE);\n    FunctionType OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Object\", null, createArrowType(createOptionalParameters(ALL_TYPE), UNKNOWN_TYPE), null, null, true, true);\n    OBJECT_FUNCTION_TYPE.defineDeclaredProperty(\"prototype\", TOP_LEVEL_PROTOTYPE, true, null);\n    registerNativeType(JSTypeNative.OBJECT_FUNCTION_TYPE, OBJECT_FUNCTION_TYPE);\n    ObjectType OBJECT_PROTOTYPE \u003d OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.OBJECT_PROTOTYPE, OBJECT_PROTOTYPE);\n    ObjectType OBJECT_TYPE \u003d OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.OBJECT_TYPE, OBJECT_TYPE);\n    FunctionType FUNCTION_FUNCTION_TYPE \u003d new FunctionType(this, \"Function\", null, createArrowType(createParametersWithVarArgs(ALL_TYPE), UNKNOWN_TYPE), null, null, true, true);\n    FUNCTION_FUNCTION_TYPE.setPrototypeBasedOn(OBJECT_TYPE);\n    registerNativeType(JSTypeNative.FUNCTION_FUNCTION_TYPE, FUNCTION_FUNCTION_TYPE);\n    ObjectType FUNCTION_PROTOTYPE \u003d FUNCTION_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.FUNCTION_PROTOTYPE, FUNCTION_PROTOTYPE);\n    NoType NO_TYPE \u003d new NoType(this);\n    registerNativeType(JSTypeNative.NO_TYPE, NO_TYPE);\n    NoObjectType NO_OBJECT_TYPE \u003d new NoObjectType(this);\n    registerNativeType(JSTypeNative.NO_OBJECT_TYPE, NO_OBJECT_TYPE);\n    NoObjectType NO_RESOLVED_TYPE \u003d new NoResolvedType(this);\n    registerNativeType(JSTypeNative.NO_RESOLVED_TYPE, NO_RESOLVED_TYPE);\n    FunctionType ARRAY_FUNCTION_TYPE \u003d new FunctionType(this, \"Array\", null, createArrowType(createParametersWithVarArgs(ALL_TYPE), null), null, null, true, true);\n    ARRAY_FUNCTION_TYPE.getInternalArrowType().returnType \u003d ARRAY_FUNCTION_TYPE.getInstanceType();\n    ObjectType arrayPrototype \u003d ARRAY_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.ARRAY_FUNCTION_TYPE, ARRAY_FUNCTION_TYPE);\n    ObjectType ARRAY_TYPE \u003d ARRAY_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.ARRAY_TYPE, ARRAY_TYPE);\n    FunctionType BOOLEAN_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Boolean\", null, createArrowType(createParameters(false, ALL_TYPE), BOOLEAN_TYPE), null, null, true, true);\n    ObjectType booleanPrototype \u003d BOOLEAN_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE, BOOLEAN_OBJECT_FUNCTION_TYPE);\n    ObjectType BOOLEAN_OBJECT_TYPE \u003d BOOLEAN_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.BOOLEAN_OBJECT_TYPE, BOOLEAN_OBJECT_TYPE);\n    FunctionType DATE_FUNCTION_TYPE \u003d new FunctionType(this, \"Date\", null, createArrowType(createOptionalParameters(UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE), STRING_TYPE), null, null, true, true);\n    ObjectType datePrototype \u003d DATE_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.DATE_FUNCTION_TYPE, DATE_FUNCTION_TYPE);\n    ObjectType DATE_TYPE \u003d DATE_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.DATE_TYPE, DATE_TYPE);\n    FunctionType ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"Error\");\n    registerNativeType(JSTypeNative.ERROR_FUNCTION_TYPE, ERROR_FUNCTION_TYPE);\n    ObjectType ERROR_TYPE \u003d ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.ERROR_TYPE, ERROR_TYPE);\n    FunctionType EVAL_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"EvalError\");\n    EVAL_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.EVAL_ERROR_FUNCTION_TYPE, EVAL_ERROR_FUNCTION_TYPE);\n    ObjectType EVAL_ERROR_TYPE \u003d EVAL_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.EVAL_ERROR_TYPE, EVAL_ERROR_TYPE);\n    FunctionType RANGE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"RangeError\");\n    RANGE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.RANGE_ERROR_FUNCTION_TYPE, RANGE_ERROR_FUNCTION_TYPE);\n    ObjectType RANGE_ERROR_TYPE \u003d RANGE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.RANGE_ERROR_TYPE, RANGE_ERROR_TYPE);\n    FunctionType REFERENCE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"ReferenceError\");\n    REFERENCE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE, REFERENCE_ERROR_FUNCTION_TYPE);\n    ObjectType REFERENCE_ERROR_TYPE \u003d REFERENCE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.REFERENCE_ERROR_TYPE, REFERENCE_ERROR_TYPE);\n    FunctionType SYNTAX_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"SyntaxError\");\n    SYNTAX_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE, SYNTAX_ERROR_FUNCTION_TYPE);\n    ObjectType SYNTAX_ERROR_TYPE \u003d SYNTAX_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.SYNTAX_ERROR_TYPE, SYNTAX_ERROR_TYPE);\n    FunctionType TYPE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"TypeError\");\n    TYPE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.TYPE_ERROR_FUNCTION_TYPE, TYPE_ERROR_FUNCTION_TYPE);\n    ObjectType TYPE_ERROR_TYPE \u003d TYPE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.TYPE_ERROR_TYPE, TYPE_ERROR_TYPE);\n    FunctionType URI_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"URIError\");\n    URI_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.URI_ERROR_FUNCTION_TYPE, URI_ERROR_FUNCTION_TYPE);\n    ObjectType URI_ERROR_TYPE \u003d URI_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.URI_ERROR_TYPE, URI_ERROR_TYPE);\n    FunctionType NUMBER_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Number\", null, createArrowType(createParameters(false, ALL_TYPE), NUMBER_TYPE), null, null, true, true);\n    ObjectType numberPrototype \u003d NUMBER_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE, NUMBER_OBJECT_FUNCTION_TYPE);\n    ObjectType NUMBER_OBJECT_TYPE \u003d NUMBER_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.NUMBER_OBJECT_TYPE, NUMBER_OBJECT_TYPE);\n    FunctionType REGEXP_FUNCTION_TYPE \u003d new FunctionType(this, \"RegExp\", null, createArrowType(createOptionalParameters(ALL_TYPE, ALL_TYPE)), null, null, true, true);\n    REGEXP_FUNCTION_TYPE.getInternalArrowType().returnType \u003d REGEXP_FUNCTION_TYPE.getInstanceType();\n    ObjectType regexpPrototype \u003d REGEXP_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.REGEXP_FUNCTION_TYPE, REGEXP_FUNCTION_TYPE);\n    ObjectType REGEXP_TYPE \u003d REGEXP_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.REGEXP_TYPE, REGEXP_TYPE);\n    FunctionType STRING_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"String\", null, createArrowType(createParameters(false, ALL_TYPE), STRING_TYPE), null, null, true, true);\n    ObjectType stringPrototype \u003d STRING_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE, STRING_OBJECT_FUNCTION_TYPE);\n    ObjectType STRING_OBJECT_TYPE \u003d STRING_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.STRING_OBJECT_TYPE, STRING_OBJECT_TYPE);\n    JSType OBJECT_NUMBER_STRING \u003d createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE);\n    registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING, OBJECT_NUMBER_STRING);\n    JSType OBJECT_NUMBER_STRING_BOOLEAN \u003d createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n    registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN, OBJECT_NUMBER_STRING_BOOLEAN);\n    JSType NUMBER_STRING_BOOLEAN \u003d createUnionType(NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n    registerNativeType(JSTypeNative.NUMBER_STRING_BOOLEAN, NUMBER_STRING_BOOLEAN);\n    JSType NUMBER_STRING \u003d createUnionType(NUMBER_TYPE, STRING_TYPE);\n    registerNativeType(JSTypeNative.NUMBER_STRING, NUMBER_STRING);\n    JSType STRING_VALUE_OR_OBJECT_TYPE \u003d createUnionType(STRING_OBJECT_TYPE, STRING_TYPE);\n    registerNativeType(JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE, STRING_VALUE_OR_OBJECT_TYPE);\n    JSType NUMBER_VALUE_OR_OBJECT_TYPE \u003d createUnionType(NUMBER_OBJECT_TYPE, NUMBER_TYPE);\n    registerNativeType(JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE, NUMBER_VALUE_OR_OBJECT_TYPE);\n    FunctionType U2U_FUNCTION_TYPE \u003d createFunctionType(UNKNOWN_TYPE, true, UNKNOWN_TYPE);\n    registerNativeType(JSTypeNative.U2U_FUNCTION_TYPE, U2U_FUNCTION_TYPE);\n    FunctionType U2U_CONSTRUCTOR_TYPE \u003d new FunctionType(this, \"Function\", null, createArrowType(createParametersWithVarArgs(UNKNOWN_TYPE), UNKNOWN_TYPE), NO_OBJECT_TYPE, null, true, true) {\n\n        private static final long serialVersionUID \u003d 1L;\n\n        @Override\n        public FunctionType getConstructor() {\n            return registry.getNativeFunctionType(JSTypeNative.FUNCTION_FUNCTION_TYPE);\n        }\n    };\n    registerNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE, U2U_CONSTRUCTOR_TYPE);\n    registerNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE, U2U_CONSTRUCTOR_TYPE);\n    FUNCTION_FUNCTION_TYPE.setInstanceType(U2U_CONSTRUCTOR_TYPE);\n    U2U_CONSTRUCTOR_TYPE.setImplicitPrototype(FUNCTION_PROTOTYPE);\n    FunctionType LEAST_FUNCTION_TYPE \u003d createFunctionType(NO_TYPE, true, ALL_TYPE);\n    registerNativeType(JSTypeNative.LEAST_FUNCTION_TYPE, LEAST_FUNCTION_TYPE);\n    FunctionType GLOBAL_THIS_CTOR \u003d new FunctionType(this, \"global this\", null, createArrowType(createParameters(false, ALL_TYPE), NUMBER_TYPE), null, null, true, true);\n    ObjectType GLOBAL_THIS \u003d GLOBAL_THIS_CTOR.getInstanceType();\n    registerNativeType(JSTypeNative.GLOBAL_THIS, GLOBAL_THIS);\n    FunctionType GREATEST_FUNCTION_TYPE \u003d createFunctionType(ALL_TYPE, true, NO_TYPE);\n    registerNativeType(JSTypeNative.GREATEST_FUNCTION_TYPE, GREATEST_FUNCTION_TYPE);\n    registerPropertyOnType(\"prototype\", OBJECT_FUNCTION_TYPE);\n}",
      "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
      "functionStartLine": 236,
      "functionName": "initializeBuiltInTypes",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,137 +1,138 @@\n private void initializeBuiltInTypes() {\n     BooleanType BOOLEAN_TYPE \u003d new BooleanType(this);\n     registerNativeType(JSTypeNative.BOOLEAN_TYPE, BOOLEAN_TYPE);\n     NullType NULL_TYPE \u003d new NullType(this);\n     registerNativeType(JSTypeNative.NULL_TYPE, NULL_TYPE);\n     NumberType NUMBER_TYPE \u003d new NumberType(this);\n     registerNativeType(JSTypeNative.NUMBER_TYPE, NUMBER_TYPE);\n     StringType STRING_TYPE \u003d new StringType(this);\n     registerNativeType(JSTypeNative.STRING_TYPE, STRING_TYPE);\n     UnknownType UNKNOWN_TYPE \u003d new UnknownType(this, false);\n     registerNativeType(JSTypeNative.UNKNOWN_TYPE, UNKNOWN_TYPE);\n     registerNativeType(JSTypeNative.CHECKED_UNKNOWN_TYPE, new UnknownType(this, true));\n     VoidType VOID_TYPE \u003d new VoidType(this);\n     registerNativeType(JSTypeNative.VOID_TYPE, VOID_TYPE);\n     AllType ALL_TYPE \u003d new AllType(this);\n     registerNativeType(JSTypeNative.ALL_TYPE, ALL_TYPE);\n     ObjectType TOP_LEVEL_PROTOTYPE \u003d new FunctionPrototypeType(this, null, null, true);\n     registerNativeType(JSTypeNative.TOP_LEVEL_PROTOTYPE, TOP_LEVEL_PROTOTYPE);\n     FunctionType OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Object\", null, createArrowType(createOptionalParameters(ALL_TYPE), UNKNOWN_TYPE), null, null, true, true);\n     OBJECT_FUNCTION_TYPE.defineDeclaredProperty(\"prototype\", TOP_LEVEL_PROTOTYPE, true, null);\n     registerNativeType(JSTypeNative.OBJECT_FUNCTION_TYPE, OBJECT_FUNCTION_TYPE);\n     ObjectType OBJECT_PROTOTYPE \u003d OBJECT_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.OBJECT_PROTOTYPE, OBJECT_PROTOTYPE);\n     ObjectType OBJECT_TYPE \u003d OBJECT_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.OBJECT_TYPE, OBJECT_TYPE);\n     FunctionType FUNCTION_FUNCTION_TYPE \u003d new FunctionType(this, \"Function\", null, createArrowType(createParametersWithVarArgs(ALL_TYPE), UNKNOWN_TYPE), null, null, true, true);\n     FUNCTION_FUNCTION_TYPE.setPrototypeBasedOn(OBJECT_TYPE);\n     registerNativeType(JSTypeNative.FUNCTION_FUNCTION_TYPE, FUNCTION_FUNCTION_TYPE);\n     ObjectType FUNCTION_PROTOTYPE \u003d FUNCTION_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.FUNCTION_PROTOTYPE, FUNCTION_PROTOTYPE);\n     NoType NO_TYPE \u003d new NoType(this);\n     registerNativeType(JSTypeNative.NO_TYPE, NO_TYPE);\n     NoObjectType NO_OBJECT_TYPE \u003d new NoObjectType(this);\n     registerNativeType(JSTypeNative.NO_OBJECT_TYPE, NO_OBJECT_TYPE);\n     NoObjectType NO_RESOLVED_TYPE \u003d new NoResolvedType(this);\n     registerNativeType(JSTypeNative.NO_RESOLVED_TYPE, NO_RESOLVED_TYPE);\n     FunctionType ARRAY_FUNCTION_TYPE \u003d new FunctionType(this, \"Array\", null, createArrowType(createParametersWithVarArgs(ALL_TYPE), null), null, null, true, true);\n     ARRAY_FUNCTION_TYPE.getInternalArrowType().returnType \u003d ARRAY_FUNCTION_TYPE.getInstanceType();\n     ObjectType arrayPrototype \u003d ARRAY_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.ARRAY_FUNCTION_TYPE, ARRAY_FUNCTION_TYPE);\n     ObjectType ARRAY_TYPE \u003d ARRAY_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.ARRAY_TYPE, ARRAY_TYPE);\n     FunctionType BOOLEAN_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Boolean\", null, createArrowType(createParameters(false, ALL_TYPE), BOOLEAN_TYPE), null, null, true, true);\n     ObjectType booleanPrototype \u003d BOOLEAN_OBJECT_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE, BOOLEAN_OBJECT_FUNCTION_TYPE);\n     ObjectType BOOLEAN_OBJECT_TYPE \u003d BOOLEAN_OBJECT_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.BOOLEAN_OBJECT_TYPE, BOOLEAN_OBJECT_TYPE);\n     FunctionType DATE_FUNCTION_TYPE \u003d new FunctionType(this, \"Date\", null, createArrowType(createOptionalParameters(UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE), STRING_TYPE), null, null, true, true);\n     ObjectType datePrototype \u003d DATE_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.DATE_FUNCTION_TYPE, DATE_FUNCTION_TYPE);\n     ObjectType DATE_TYPE \u003d DATE_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.DATE_TYPE, DATE_TYPE);\n     FunctionType ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"Error\");\n     registerNativeType(JSTypeNative.ERROR_FUNCTION_TYPE, ERROR_FUNCTION_TYPE);\n     ObjectType ERROR_TYPE \u003d ERROR_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.ERROR_TYPE, ERROR_TYPE);\n     FunctionType EVAL_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"EvalError\");\n     EVAL_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n     registerNativeType(JSTypeNative.EVAL_ERROR_FUNCTION_TYPE, EVAL_ERROR_FUNCTION_TYPE);\n     ObjectType EVAL_ERROR_TYPE \u003d EVAL_ERROR_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.EVAL_ERROR_TYPE, EVAL_ERROR_TYPE);\n     FunctionType RANGE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"RangeError\");\n     RANGE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n     registerNativeType(JSTypeNative.RANGE_ERROR_FUNCTION_TYPE, RANGE_ERROR_FUNCTION_TYPE);\n     ObjectType RANGE_ERROR_TYPE \u003d RANGE_ERROR_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.RANGE_ERROR_TYPE, RANGE_ERROR_TYPE);\n     FunctionType REFERENCE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"ReferenceError\");\n     REFERENCE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n     registerNativeType(JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE, REFERENCE_ERROR_FUNCTION_TYPE);\n     ObjectType REFERENCE_ERROR_TYPE \u003d REFERENCE_ERROR_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.REFERENCE_ERROR_TYPE, REFERENCE_ERROR_TYPE);\n     FunctionType SYNTAX_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"SyntaxError\");\n     SYNTAX_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n     registerNativeType(JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE, SYNTAX_ERROR_FUNCTION_TYPE);\n     ObjectType SYNTAX_ERROR_TYPE \u003d SYNTAX_ERROR_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.SYNTAX_ERROR_TYPE, SYNTAX_ERROR_TYPE);\n     FunctionType TYPE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"TypeError\");\n     TYPE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n     registerNativeType(JSTypeNative.TYPE_ERROR_FUNCTION_TYPE, TYPE_ERROR_FUNCTION_TYPE);\n     ObjectType TYPE_ERROR_TYPE \u003d TYPE_ERROR_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.TYPE_ERROR_TYPE, TYPE_ERROR_TYPE);\n     FunctionType URI_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"URIError\");\n     URI_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n     registerNativeType(JSTypeNative.URI_ERROR_FUNCTION_TYPE, URI_ERROR_FUNCTION_TYPE);\n     ObjectType URI_ERROR_TYPE \u003d URI_ERROR_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.URI_ERROR_TYPE, URI_ERROR_TYPE);\n     FunctionType NUMBER_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Number\", null, createArrowType(createParameters(false, ALL_TYPE), NUMBER_TYPE), null, null, true, true);\n     ObjectType numberPrototype \u003d NUMBER_OBJECT_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE, NUMBER_OBJECT_FUNCTION_TYPE);\n     ObjectType NUMBER_OBJECT_TYPE \u003d NUMBER_OBJECT_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.NUMBER_OBJECT_TYPE, NUMBER_OBJECT_TYPE);\n     FunctionType REGEXP_FUNCTION_TYPE \u003d new FunctionType(this, \"RegExp\", null, createArrowType(createOptionalParameters(ALL_TYPE, ALL_TYPE)), null, null, true, true);\n     REGEXP_FUNCTION_TYPE.getInternalArrowType().returnType \u003d REGEXP_FUNCTION_TYPE.getInstanceType();\n     ObjectType regexpPrototype \u003d REGEXP_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.REGEXP_FUNCTION_TYPE, REGEXP_FUNCTION_TYPE);\n     ObjectType REGEXP_TYPE \u003d REGEXP_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.REGEXP_TYPE, REGEXP_TYPE);\n     FunctionType STRING_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"String\", null, createArrowType(createParameters(false, ALL_TYPE), STRING_TYPE), null, null, true, true);\n     ObjectType stringPrototype \u003d STRING_OBJECT_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE, STRING_OBJECT_FUNCTION_TYPE);\n     ObjectType STRING_OBJECT_TYPE \u003d STRING_OBJECT_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.STRING_OBJECT_TYPE, STRING_OBJECT_TYPE);\n     JSType OBJECT_NUMBER_STRING \u003d createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE);\n     registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING, OBJECT_NUMBER_STRING);\n     JSType OBJECT_NUMBER_STRING_BOOLEAN \u003d createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n     registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN, OBJECT_NUMBER_STRING_BOOLEAN);\n     JSType NUMBER_STRING_BOOLEAN \u003d createUnionType(NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n     registerNativeType(JSTypeNative.NUMBER_STRING_BOOLEAN, NUMBER_STRING_BOOLEAN);\n     JSType NUMBER_STRING \u003d createUnionType(NUMBER_TYPE, STRING_TYPE);\n     registerNativeType(JSTypeNative.NUMBER_STRING, NUMBER_STRING);\n     JSType STRING_VALUE_OR_OBJECT_TYPE \u003d createUnionType(STRING_OBJECT_TYPE, STRING_TYPE);\n     registerNativeType(JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE, STRING_VALUE_OR_OBJECT_TYPE);\n     JSType NUMBER_VALUE_OR_OBJECT_TYPE \u003d createUnionType(NUMBER_OBJECT_TYPE, NUMBER_TYPE);\n     registerNativeType(JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE, NUMBER_VALUE_OR_OBJECT_TYPE);\n     FunctionType U2U_FUNCTION_TYPE \u003d createFunctionType(UNKNOWN_TYPE, true, UNKNOWN_TYPE);\n     registerNativeType(JSTypeNative.U2U_FUNCTION_TYPE, U2U_FUNCTION_TYPE);\n     FunctionType U2U_CONSTRUCTOR_TYPE \u003d new FunctionType(this, \"Function\", null, createArrowType(createParametersWithVarArgs(UNKNOWN_TYPE), UNKNOWN_TYPE), NO_OBJECT_TYPE, null, true, true) {\n \n         private static final long serialVersionUID \u003d 1L;\n \n         @Override\n         public FunctionType getConstructor() {\n             return registry.getNativeFunctionType(JSTypeNative.FUNCTION_FUNCTION_TYPE);\n         }\n     };\n     registerNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE, U2U_CONSTRUCTOR_TYPE);\n     registerNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE, U2U_CONSTRUCTOR_TYPE);\n     FUNCTION_FUNCTION_TYPE.setInstanceType(U2U_CONSTRUCTOR_TYPE);\n     U2U_CONSTRUCTOR_TYPE.setImplicitPrototype(FUNCTION_PROTOTYPE);\n     FunctionType LEAST_FUNCTION_TYPE \u003d createFunctionType(NO_TYPE, true, ALL_TYPE);\n     registerNativeType(JSTypeNative.LEAST_FUNCTION_TYPE, LEAST_FUNCTION_TYPE);\n-    ObjectType GLOBAL_THIS \u003d createObjectType(\"global this\", null, UNKNOWN_TYPE);\n+    FunctionType GLOBAL_THIS_CTOR \u003d new FunctionType(this, \"global this\", null, createArrowType(createParameters(false, ALL_TYPE), NUMBER_TYPE), null, null, true, true);\n+    ObjectType GLOBAL_THIS \u003d GLOBAL_THIS_CTOR.getInstanceType();\n     registerNativeType(JSTypeNative.GLOBAL_THIS, GLOBAL_THIS);\n     FunctionType GREATEST_FUNCTION_TYPE \u003d createFunctionType(ALL_TYPE, true, NO_TYPE);\n     registerNativeType(JSTypeNative.GREATEST_FUNCTION_TYPE, GREATEST_FUNCTION_TYPE);\n     registerPropertyOnType(\"prototype\", OBJECT_FUNCTION_TYPE);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "043a352c2e85815a90a1926d112902d924bab6c1": {
      "type": "Ybodychange",
      "commitMessage": "\nWhen we can\u0027t find a forward-declared type,\nthat type should resolve to an empty type.\nThis ensures that if someone tries to pass a param or return\nvalue to it, they get a type warning.\nTry #3\n!!!\n\nR\u003djohnlenz\nDELTA\u003d534  (451 added, 37 deleted, 46 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d362\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@731 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/26/11, 8:30 AM",
      "commitName": "043a352c2e85815a90a1926d112902d924bab6c1",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "1/18/11, 5:02 PM",
      "commitNameOld": "11bd742011d67590031dba6e9d1f7186393b38a0",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 7.64,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "actualSource": "private void initializeBuiltInTypes() {\n    BooleanType BOOLEAN_TYPE \u003d new BooleanType(this);\n    registerNativeType(JSTypeNative.BOOLEAN_TYPE, BOOLEAN_TYPE);\n    NullType NULL_TYPE \u003d new NullType(this);\n    registerNativeType(JSTypeNative.NULL_TYPE, NULL_TYPE);\n    NumberType NUMBER_TYPE \u003d new NumberType(this);\n    registerNativeType(JSTypeNative.NUMBER_TYPE, NUMBER_TYPE);\n    StringType STRING_TYPE \u003d new StringType(this);\n    registerNativeType(JSTypeNative.STRING_TYPE, STRING_TYPE);\n    UnknownType UNKNOWN_TYPE \u003d new UnknownType(this, false);\n    registerNativeType(JSTypeNative.UNKNOWN_TYPE, UNKNOWN_TYPE);\n    registerNativeType(JSTypeNative.CHECKED_UNKNOWN_TYPE, new UnknownType(this, true));\n    VoidType VOID_TYPE \u003d new VoidType(this);\n    registerNativeType(JSTypeNative.VOID_TYPE, VOID_TYPE);\n    AllType ALL_TYPE \u003d new AllType(this);\n    registerNativeType(JSTypeNative.ALL_TYPE, ALL_TYPE);\n    ObjectType TOP_LEVEL_PROTOTYPE \u003d new FunctionPrototypeType(this, null, null, true);\n    registerNativeType(JSTypeNative.TOP_LEVEL_PROTOTYPE, TOP_LEVEL_PROTOTYPE);\n    FunctionType OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Object\", null, createArrowType(createOptionalParameters(ALL_TYPE), UNKNOWN_TYPE), null, null, true, true);\n    OBJECT_FUNCTION_TYPE.defineDeclaredProperty(\"prototype\", TOP_LEVEL_PROTOTYPE, true, null);\n    registerNativeType(JSTypeNative.OBJECT_FUNCTION_TYPE, OBJECT_FUNCTION_TYPE);\n    ObjectType OBJECT_PROTOTYPE \u003d OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.OBJECT_PROTOTYPE, OBJECT_PROTOTYPE);\n    ObjectType OBJECT_TYPE \u003d OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.OBJECT_TYPE, OBJECT_TYPE);\n    FunctionType FUNCTION_FUNCTION_TYPE \u003d new FunctionType(this, \"Function\", null, createArrowType(createParametersWithVarArgs(ALL_TYPE), UNKNOWN_TYPE), null, null, true, true);\n    FUNCTION_FUNCTION_TYPE.setPrototypeBasedOn(OBJECT_TYPE);\n    registerNativeType(JSTypeNative.FUNCTION_FUNCTION_TYPE, FUNCTION_FUNCTION_TYPE);\n    ObjectType FUNCTION_PROTOTYPE \u003d FUNCTION_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.FUNCTION_PROTOTYPE, FUNCTION_PROTOTYPE);\n    NoType NO_TYPE \u003d new NoType(this);\n    registerNativeType(JSTypeNative.NO_TYPE, NO_TYPE);\n    NoObjectType NO_OBJECT_TYPE \u003d new NoObjectType(this);\n    registerNativeType(JSTypeNative.NO_OBJECT_TYPE, NO_OBJECT_TYPE);\n    NoObjectType NO_RESOLVED_TYPE \u003d new NoResolvedType(this);\n    registerNativeType(JSTypeNative.NO_RESOLVED_TYPE, NO_RESOLVED_TYPE);\n    FunctionType ARRAY_FUNCTION_TYPE \u003d new FunctionType(this, \"Array\", null, createArrowType(createParametersWithVarArgs(ALL_TYPE), null), null, null, true, true);\n    ARRAY_FUNCTION_TYPE.getInternalArrowType().returnType \u003d ARRAY_FUNCTION_TYPE.getInstanceType();\n    ObjectType arrayPrototype \u003d ARRAY_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.ARRAY_FUNCTION_TYPE, ARRAY_FUNCTION_TYPE);\n    ObjectType ARRAY_TYPE \u003d ARRAY_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.ARRAY_TYPE, ARRAY_TYPE);\n    FunctionType BOOLEAN_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Boolean\", null, createArrowType(createParameters(false, ALL_TYPE), BOOLEAN_TYPE), null, null, true, true);\n    ObjectType booleanPrototype \u003d BOOLEAN_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE, BOOLEAN_OBJECT_FUNCTION_TYPE);\n    ObjectType BOOLEAN_OBJECT_TYPE \u003d BOOLEAN_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.BOOLEAN_OBJECT_TYPE, BOOLEAN_OBJECT_TYPE);\n    FunctionType DATE_FUNCTION_TYPE \u003d new FunctionType(this, \"Date\", null, createArrowType(createOptionalParameters(UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE), STRING_TYPE), null, null, true, true);\n    ObjectType datePrototype \u003d DATE_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.DATE_FUNCTION_TYPE, DATE_FUNCTION_TYPE);\n    ObjectType DATE_TYPE \u003d DATE_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.DATE_TYPE, DATE_TYPE);\n    FunctionType ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"Error\");\n    registerNativeType(JSTypeNative.ERROR_FUNCTION_TYPE, ERROR_FUNCTION_TYPE);\n    ObjectType ERROR_TYPE \u003d ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.ERROR_TYPE, ERROR_TYPE);\n    FunctionType EVAL_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"EvalError\");\n    EVAL_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.EVAL_ERROR_FUNCTION_TYPE, EVAL_ERROR_FUNCTION_TYPE);\n    ObjectType EVAL_ERROR_TYPE \u003d EVAL_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.EVAL_ERROR_TYPE, EVAL_ERROR_TYPE);\n    FunctionType RANGE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"RangeError\");\n    RANGE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.RANGE_ERROR_FUNCTION_TYPE, RANGE_ERROR_FUNCTION_TYPE);\n    ObjectType RANGE_ERROR_TYPE \u003d RANGE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.RANGE_ERROR_TYPE, RANGE_ERROR_TYPE);\n    FunctionType REFERENCE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"ReferenceError\");\n    REFERENCE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE, REFERENCE_ERROR_FUNCTION_TYPE);\n    ObjectType REFERENCE_ERROR_TYPE \u003d REFERENCE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.REFERENCE_ERROR_TYPE, REFERENCE_ERROR_TYPE);\n    FunctionType SYNTAX_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"SyntaxError\");\n    SYNTAX_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE, SYNTAX_ERROR_FUNCTION_TYPE);\n    ObjectType SYNTAX_ERROR_TYPE \u003d SYNTAX_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.SYNTAX_ERROR_TYPE, SYNTAX_ERROR_TYPE);\n    FunctionType TYPE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"TypeError\");\n    TYPE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.TYPE_ERROR_FUNCTION_TYPE, TYPE_ERROR_FUNCTION_TYPE);\n    ObjectType TYPE_ERROR_TYPE \u003d TYPE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.TYPE_ERROR_TYPE, TYPE_ERROR_TYPE);\n    FunctionType URI_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"URIError\");\n    URI_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.URI_ERROR_FUNCTION_TYPE, URI_ERROR_FUNCTION_TYPE);\n    ObjectType URI_ERROR_TYPE \u003d URI_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.URI_ERROR_TYPE, URI_ERROR_TYPE);\n    FunctionType NUMBER_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Number\", null, createArrowType(createParameters(false, ALL_TYPE), NUMBER_TYPE), null, null, true, true);\n    ObjectType numberPrototype \u003d NUMBER_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE, NUMBER_OBJECT_FUNCTION_TYPE);\n    ObjectType NUMBER_OBJECT_TYPE \u003d NUMBER_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.NUMBER_OBJECT_TYPE, NUMBER_OBJECT_TYPE);\n    FunctionType REGEXP_FUNCTION_TYPE \u003d new FunctionType(this, \"RegExp\", null, createArrowType(createOptionalParameters(ALL_TYPE, ALL_TYPE)), null, null, true, true);\n    REGEXP_FUNCTION_TYPE.getInternalArrowType().returnType \u003d REGEXP_FUNCTION_TYPE.getInstanceType();\n    ObjectType regexpPrototype \u003d REGEXP_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.REGEXP_FUNCTION_TYPE, REGEXP_FUNCTION_TYPE);\n    ObjectType REGEXP_TYPE \u003d REGEXP_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.REGEXP_TYPE, REGEXP_TYPE);\n    FunctionType STRING_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"String\", null, createArrowType(createParameters(false, ALL_TYPE), STRING_TYPE), null, null, true, true);\n    ObjectType stringPrototype \u003d STRING_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE, STRING_OBJECT_FUNCTION_TYPE);\n    ObjectType STRING_OBJECT_TYPE \u003d STRING_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.STRING_OBJECT_TYPE, STRING_OBJECT_TYPE);\n    JSType OBJECT_NUMBER_STRING \u003d createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE);\n    registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING, OBJECT_NUMBER_STRING);\n    JSType OBJECT_NUMBER_STRING_BOOLEAN \u003d createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n    registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN, OBJECT_NUMBER_STRING_BOOLEAN);\n    JSType NUMBER_STRING_BOOLEAN \u003d createUnionType(NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n    registerNativeType(JSTypeNative.NUMBER_STRING_BOOLEAN, NUMBER_STRING_BOOLEAN);\n    JSType NUMBER_STRING \u003d createUnionType(NUMBER_TYPE, STRING_TYPE);\n    registerNativeType(JSTypeNative.NUMBER_STRING, NUMBER_STRING);\n    JSType STRING_VALUE_OR_OBJECT_TYPE \u003d createUnionType(STRING_OBJECT_TYPE, STRING_TYPE);\n    registerNativeType(JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE, STRING_VALUE_OR_OBJECT_TYPE);\n    JSType NUMBER_VALUE_OR_OBJECT_TYPE \u003d createUnionType(NUMBER_OBJECT_TYPE, NUMBER_TYPE);\n    registerNativeType(JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE, NUMBER_VALUE_OR_OBJECT_TYPE);\n    FunctionType U2U_FUNCTION_TYPE \u003d createFunctionType(UNKNOWN_TYPE, true, UNKNOWN_TYPE);\n    registerNativeType(JSTypeNative.U2U_FUNCTION_TYPE, U2U_FUNCTION_TYPE);\n    FunctionType U2U_CONSTRUCTOR_TYPE \u003d new FunctionType(this, \"Function\", null, createArrowType(createParametersWithVarArgs(UNKNOWN_TYPE), UNKNOWN_TYPE), NO_OBJECT_TYPE, null, true, true) {\n\n        private static final long serialVersionUID \u003d 1L;\n\n        @Override\n        public FunctionType getConstructor() {\n            return registry.getNativeFunctionType(JSTypeNative.FUNCTION_FUNCTION_TYPE);\n        }\n    };\n    registerNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE, U2U_CONSTRUCTOR_TYPE);\n    registerNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE, U2U_CONSTRUCTOR_TYPE);\n    FUNCTION_FUNCTION_TYPE.setInstanceType(U2U_CONSTRUCTOR_TYPE);\n    U2U_CONSTRUCTOR_TYPE.setImplicitPrototype(FUNCTION_PROTOTYPE);\n    FunctionType LEAST_FUNCTION_TYPE \u003d createFunctionType(NO_TYPE, true, ALL_TYPE);\n    registerNativeType(JSTypeNative.LEAST_FUNCTION_TYPE, LEAST_FUNCTION_TYPE);\n    ObjectType GLOBAL_THIS \u003d createObjectType(\"global this\", null, UNKNOWN_TYPE);\n    registerNativeType(JSTypeNative.GLOBAL_THIS, GLOBAL_THIS);\n    FunctionType GREATEST_FUNCTION_TYPE \u003d createFunctionType(ALL_TYPE, true, NO_TYPE);\n    registerNativeType(JSTypeNative.GREATEST_FUNCTION_TYPE, GREATEST_FUNCTION_TYPE);\n    registerPropertyOnType(\"prototype\", OBJECT_FUNCTION_TYPE);\n}",
      "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
      "functionStartLine": 236,
      "functionName": "initializeBuiltInTypes",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,135 +1,137 @@\n private void initializeBuiltInTypes() {\n     BooleanType BOOLEAN_TYPE \u003d new BooleanType(this);\n     registerNativeType(JSTypeNative.BOOLEAN_TYPE, BOOLEAN_TYPE);\n     NullType NULL_TYPE \u003d new NullType(this);\n     registerNativeType(JSTypeNative.NULL_TYPE, NULL_TYPE);\n     NumberType NUMBER_TYPE \u003d new NumberType(this);\n     registerNativeType(JSTypeNative.NUMBER_TYPE, NUMBER_TYPE);\n     StringType STRING_TYPE \u003d new StringType(this);\n     registerNativeType(JSTypeNative.STRING_TYPE, STRING_TYPE);\n     UnknownType UNKNOWN_TYPE \u003d new UnknownType(this, false);\n     registerNativeType(JSTypeNative.UNKNOWN_TYPE, UNKNOWN_TYPE);\n     registerNativeType(JSTypeNative.CHECKED_UNKNOWN_TYPE, new UnknownType(this, true));\n     VoidType VOID_TYPE \u003d new VoidType(this);\n     registerNativeType(JSTypeNative.VOID_TYPE, VOID_TYPE);\n     AllType ALL_TYPE \u003d new AllType(this);\n     registerNativeType(JSTypeNative.ALL_TYPE, ALL_TYPE);\n     ObjectType TOP_LEVEL_PROTOTYPE \u003d new FunctionPrototypeType(this, null, null, true);\n     registerNativeType(JSTypeNative.TOP_LEVEL_PROTOTYPE, TOP_LEVEL_PROTOTYPE);\n     FunctionType OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Object\", null, createArrowType(createOptionalParameters(ALL_TYPE), UNKNOWN_TYPE), null, null, true, true);\n     OBJECT_FUNCTION_TYPE.defineDeclaredProperty(\"prototype\", TOP_LEVEL_PROTOTYPE, true, null);\n     registerNativeType(JSTypeNative.OBJECT_FUNCTION_TYPE, OBJECT_FUNCTION_TYPE);\n     ObjectType OBJECT_PROTOTYPE \u003d OBJECT_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.OBJECT_PROTOTYPE, OBJECT_PROTOTYPE);\n     ObjectType OBJECT_TYPE \u003d OBJECT_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.OBJECT_TYPE, OBJECT_TYPE);\n     FunctionType FUNCTION_FUNCTION_TYPE \u003d new FunctionType(this, \"Function\", null, createArrowType(createParametersWithVarArgs(ALL_TYPE), UNKNOWN_TYPE), null, null, true, true);\n     FUNCTION_FUNCTION_TYPE.setPrototypeBasedOn(OBJECT_TYPE);\n     registerNativeType(JSTypeNative.FUNCTION_FUNCTION_TYPE, FUNCTION_FUNCTION_TYPE);\n     ObjectType FUNCTION_PROTOTYPE \u003d FUNCTION_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.FUNCTION_PROTOTYPE, FUNCTION_PROTOTYPE);\n     NoType NO_TYPE \u003d new NoType(this);\n     registerNativeType(JSTypeNative.NO_TYPE, NO_TYPE);\n     NoObjectType NO_OBJECT_TYPE \u003d new NoObjectType(this);\n     registerNativeType(JSTypeNative.NO_OBJECT_TYPE, NO_OBJECT_TYPE);\n+    NoObjectType NO_RESOLVED_TYPE \u003d new NoResolvedType(this);\n+    registerNativeType(JSTypeNative.NO_RESOLVED_TYPE, NO_RESOLVED_TYPE);\n     FunctionType ARRAY_FUNCTION_TYPE \u003d new FunctionType(this, \"Array\", null, createArrowType(createParametersWithVarArgs(ALL_TYPE), null), null, null, true, true);\n     ARRAY_FUNCTION_TYPE.getInternalArrowType().returnType \u003d ARRAY_FUNCTION_TYPE.getInstanceType();\n     ObjectType arrayPrototype \u003d ARRAY_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.ARRAY_FUNCTION_TYPE, ARRAY_FUNCTION_TYPE);\n     ObjectType ARRAY_TYPE \u003d ARRAY_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.ARRAY_TYPE, ARRAY_TYPE);\n     FunctionType BOOLEAN_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Boolean\", null, createArrowType(createParameters(false, ALL_TYPE), BOOLEAN_TYPE), null, null, true, true);\n     ObjectType booleanPrototype \u003d BOOLEAN_OBJECT_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE, BOOLEAN_OBJECT_FUNCTION_TYPE);\n     ObjectType BOOLEAN_OBJECT_TYPE \u003d BOOLEAN_OBJECT_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.BOOLEAN_OBJECT_TYPE, BOOLEAN_OBJECT_TYPE);\n     FunctionType DATE_FUNCTION_TYPE \u003d new FunctionType(this, \"Date\", null, createArrowType(createOptionalParameters(UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE), STRING_TYPE), null, null, true, true);\n     ObjectType datePrototype \u003d DATE_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.DATE_FUNCTION_TYPE, DATE_FUNCTION_TYPE);\n     ObjectType DATE_TYPE \u003d DATE_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.DATE_TYPE, DATE_TYPE);\n     FunctionType ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"Error\");\n     registerNativeType(JSTypeNative.ERROR_FUNCTION_TYPE, ERROR_FUNCTION_TYPE);\n     ObjectType ERROR_TYPE \u003d ERROR_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.ERROR_TYPE, ERROR_TYPE);\n     FunctionType EVAL_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"EvalError\");\n     EVAL_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n     registerNativeType(JSTypeNative.EVAL_ERROR_FUNCTION_TYPE, EVAL_ERROR_FUNCTION_TYPE);\n     ObjectType EVAL_ERROR_TYPE \u003d EVAL_ERROR_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.EVAL_ERROR_TYPE, EVAL_ERROR_TYPE);\n     FunctionType RANGE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"RangeError\");\n     RANGE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n     registerNativeType(JSTypeNative.RANGE_ERROR_FUNCTION_TYPE, RANGE_ERROR_FUNCTION_TYPE);\n     ObjectType RANGE_ERROR_TYPE \u003d RANGE_ERROR_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.RANGE_ERROR_TYPE, RANGE_ERROR_TYPE);\n     FunctionType REFERENCE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"ReferenceError\");\n     REFERENCE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n     registerNativeType(JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE, REFERENCE_ERROR_FUNCTION_TYPE);\n     ObjectType REFERENCE_ERROR_TYPE \u003d REFERENCE_ERROR_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.REFERENCE_ERROR_TYPE, REFERENCE_ERROR_TYPE);\n     FunctionType SYNTAX_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"SyntaxError\");\n     SYNTAX_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n     registerNativeType(JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE, SYNTAX_ERROR_FUNCTION_TYPE);\n     ObjectType SYNTAX_ERROR_TYPE \u003d SYNTAX_ERROR_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.SYNTAX_ERROR_TYPE, SYNTAX_ERROR_TYPE);\n     FunctionType TYPE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"TypeError\");\n     TYPE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n     registerNativeType(JSTypeNative.TYPE_ERROR_FUNCTION_TYPE, TYPE_ERROR_FUNCTION_TYPE);\n     ObjectType TYPE_ERROR_TYPE \u003d TYPE_ERROR_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.TYPE_ERROR_TYPE, TYPE_ERROR_TYPE);\n     FunctionType URI_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"URIError\");\n     URI_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n     registerNativeType(JSTypeNative.URI_ERROR_FUNCTION_TYPE, URI_ERROR_FUNCTION_TYPE);\n     ObjectType URI_ERROR_TYPE \u003d URI_ERROR_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.URI_ERROR_TYPE, URI_ERROR_TYPE);\n     FunctionType NUMBER_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Number\", null, createArrowType(createParameters(false, ALL_TYPE), NUMBER_TYPE), null, null, true, true);\n     ObjectType numberPrototype \u003d NUMBER_OBJECT_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE, NUMBER_OBJECT_FUNCTION_TYPE);\n     ObjectType NUMBER_OBJECT_TYPE \u003d NUMBER_OBJECT_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.NUMBER_OBJECT_TYPE, NUMBER_OBJECT_TYPE);\n     FunctionType REGEXP_FUNCTION_TYPE \u003d new FunctionType(this, \"RegExp\", null, createArrowType(createOptionalParameters(ALL_TYPE, ALL_TYPE)), null, null, true, true);\n     REGEXP_FUNCTION_TYPE.getInternalArrowType().returnType \u003d REGEXP_FUNCTION_TYPE.getInstanceType();\n     ObjectType regexpPrototype \u003d REGEXP_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.REGEXP_FUNCTION_TYPE, REGEXP_FUNCTION_TYPE);\n     ObjectType REGEXP_TYPE \u003d REGEXP_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.REGEXP_TYPE, REGEXP_TYPE);\n     FunctionType STRING_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"String\", null, createArrowType(createParameters(false, ALL_TYPE), STRING_TYPE), null, null, true, true);\n     ObjectType stringPrototype \u003d STRING_OBJECT_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE, STRING_OBJECT_FUNCTION_TYPE);\n     ObjectType STRING_OBJECT_TYPE \u003d STRING_OBJECT_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.STRING_OBJECT_TYPE, STRING_OBJECT_TYPE);\n     JSType OBJECT_NUMBER_STRING \u003d createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE);\n     registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING, OBJECT_NUMBER_STRING);\n     JSType OBJECT_NUMBER_STRING_BOOLEAN \u003d createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n     registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN, OBJECT_NUMBER_STRING_BOOLEAN);\n     JSType NUMBER_STRING_BOOLEAN \u003d createUnionType(NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n     registerNativeType(JSTypeNative.NUMBER_STRING_BOOLEAN, NUMBER_STRING_BOOLEAN);\n     JSType NUMBER_STRING \u003d createUnionType(NUMBER_TYPE, STRING_TYPE);\n     registerNativeType(JSTypeNative.NUMBER_STRING, NUMBER_STRING);\n     JSType STRING_VALUE_OR_OBJECT_TYPE \u003d createUnionType(STRING_OBJECT_TYPE, STRING_TYPE);\n     registerNativeType(JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE, STRING_VALUE_OR_OBJECT_TYPE);\n     JSType NUMBER_VALUE_OR_OBJECT_TYPE \u003d createUnionType(NUMBER_OBJECT_TYPE, NUMBER_TYPE);\n     registerNativeType(JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE, NUMBER_VALUE_OR_OBJECT_TYPE);\n     FunctionType U2U_FUNCTION_TYPE \u003d createFunctionType(UNKNOWN_TYPE, true, UNKNOWN_TYPE);\n     registerNativeType(JSTypeNative.U2U_FUNCTION_TYPE, U2U_FUNCTION_TYPE);\n     FunctionType U2U_CONSTRUCTOR_TYPE \u003d new FunctionType(this, \"Function\", null, createArrowType(createParametersWithVarArgs(UNKNOWN_TYPE), UNKNOWN_TYPE), NO_OBJECT_TYPE, null, true, true) {\n \n         private static final long serialVersionUID \u003d 1L;\n \n         @Override\n         public FunctionType getConstructor() {\n             return registry.getNativeFunctionType(JSTypeNative.FUNCTION_FUNCTION_TYPE);\n         }\n     };\n     registerNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE, U2U_CONSTRUCTOR_TYPE);\n     registerNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE, U2U_CONSTRUCTOR_TYPE);\n     FUNCTION_FUNCTION_TYPE.setInstanceType(U2U_CONSTRUCTOR_TYPE);\n     U2U_CONSTRUCTOR_TYPE.setImplicitPrototype(FUNCTION_PROTOTYPE);\n     FunctionType LEAST_FUNCTION_TYPE \u003d createFunctionType(NO_TYPE, true, ALL_TYPE);\n     registerNativeType(JSTypeNative.LEAST_FUNCTION_TYPE, LEAST_FUNCTION_TYPE);\n     ObjectType GLOBAL_THIS \u003d createObjectType(\"global this\", null, UNKNOWN_TYPE);\n     registerNativeType(JSTypeNative.GLOBAL_THIS, GLOBAL_THIS);\n     FunctionType GREATEST_FUNCTION_TYPE \u003d createFunctionType(ALL_TYPE, true, NO_TYPE);\n     registerNativeType(JSTypeNative.GREATEST_FUNCTION_TYPE, GREATEST_FUNCTION_TYPE);\n     registerPropertyOnType(\"prototype\", OBJECT_FUNCTION_TYPE);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "11bd742011d67590031dba6e9d1f7186393b38a0": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nbreaks contacts\n\n*** Original change description ***\n\nWhen we can\u0027t find a forward-declared type,\nthat type should resolve to an empty type.\nThis ensures that if someone tries to pass a param or return\nvalue to it, they get a type warning.\n\nDELTA\u003d461  (37 added, 385 deleted, 39 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d302\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@703 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/18/11, 5:02 PM",
      "commitName": "11bd742011d67590031dba6e9d1f7186393b38a0",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "1/18/11, 3:28 PM",
      "commitNameOld": "6dbca87c463d8a1e229a0d92d5cdf92247fdefde",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void initializeBuiltInTypes() {\n    BooleanType BOOLEAN_TYPE \u003d new BooleanType(this);\n    registerNativeType(JSTypeNative.BOOLEAN_TYPE, BOOLEAN_TYPE);\n    NullType NULL_TYPE \u003d new NullType(this);\n    registerNativeType(JSTypeNative.NULL_TYPE, NULL_TYPE);\n    NumberType NUMBER_TYPE \u003d new NumberType(this);\n    registerNativeType(JSTypeNative.NUMBER_TYPE, NUMBER_TYPE);\n    StringType STRING_TYPE \u003d new StringType(this);\n    registerNativeType(JSTypeNative.STRING_TYPE, STRING_TYPE);\n    UnknownType UNKNOWN_TYPE \u003d new UnknownType(this, false);\n    registerNativeType(JSTypeNative.UNKNOWN_TYPE, UNKNOWN_TYPE);\n    registerNativeType(JSTypeNative.CHECKED_UNKNOWN_TYPE, new UnknownType(this, true));\n    VoidType VOID_TYPE \u003d new VoidType(this);\n    registerNativeType(JSTypeNative.VOID_TYPE, VOID_TYPE);\n    AllType ALL_TYPE \u003d new AllType(this);\n    registerNativeType(JSTypeNative.ALL_TYPE, ALL_TYPE);\n    ObjectType TOP_LEVEL_PROTOTYPE \u003d new FunctionPrototypeType(this, null, null, true);\n    registerNativeType(JSTypeNative.TOP_LEVEL_PROTOTYPE, TOP_LEVEL_PROTOTYPE);\n    FunctionType OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Object\", null, createArrowType(createOptionalParameters(ALL_TYPE), UNKNOWN_TYPE), null, null, true, true);\n    OBJECT_FUNCTION_TYPE.defineDeclaredProperty(\"prototype\", TOP_LEVEL_PROTOTYPE, true, null);\n    registerNativeType(JSTypeNative.OBJECT_FUNCTION_TYPE, OBJECT_FUNCTION_TYPE);\n    ObjectType OBJECT_PROTOTYPE \u003d OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.OBJECT_PROTOTYPE, OBJECT_PROTOTYPE);\n    ObjectType OBJECT_TYPE \u003d OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.OBJECT_TYPE, OBJECT_TYPE);\n    FunctionType FUNCTION_FUNCTION_TYPE \u003d new FunctionType(this, \"Function\", null, createArrowType(createParametersWithVarArgs(ALL_TYPE), UNKNOWN_TYPE), null, null, true, true);\n    FUNCTION_FUNCTION_TYPE.setPrototypeBasedOn(OBJECT_TYPE);\n    registerNativeType(JSTypeNative.FUNCTION_FUNCTION_TYPE, FUNCTION_FUNCTION_TYPE);\n    ObjectType FUNCTION_PROTOTYPE \u003d FUNCTION_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.FUNCTION_PROTOTYPE, FUNCTION_PROTOTYPE);\n    NoType NO_TYPE \u003d new NoType(this);\n    registerNativeType(JSTypeNative.NO_TYPE, NO_TYPE);\n    NoObjectType NO_OBJECT_TYPE \u003d new NoObjectType(this);\n    registerNativeType(JSTypeNative.NO_OBJECT_TYPE, NO_OBJECT_TYPE);\n    FunctionType ARRAY_FUNCTION_TYPE \u003d new FunctionType(this, \"Array\", null, createArrowType(createParametersWithVarArgs(ALL_TYPE), null), null, null, true, true);\n    ARRAY_FUNCTION_TYPE.getInternalArrowType().returnType \u003d ARRAY_FUNCTION_TYPE.getInstanceType();\n    ObjectType arrayPrototype \u003d ARRAY_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.ARRAY_FUNCTION_TYPE, ARRAY_FUNCTION_TYPE);\n    ObjectType ARRAY_TYPE \u003d ARRAY_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.ARRAY_TYPE, ARRAY_TYPE);\n    FunctionType BOOLEAN_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Boolean\", null, createArrowType(createParameters(false, ALL_TYPE), BOOLEAN_TYPE), null, null, true, true);\n    ObjectType booleanPrototype \u003d BOOLEAN_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE, BOOLEAN_OBJECT_FUNCTION_TYPE);\n    ObjectType BOOLEAN_OBJECT_TYPE \u003d BOOLEAN_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.BOOLEAN_OBJECT_TYPE, BOOLEAN_OBJECT_TYPE);\n    FunctionType DATE_FUNCTION_TYPE \u003d new FunctionType(this, \"Date\", null, createArrowType(createOptionalParameters(UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE), STRING_TYPE), null, null, true, true);\n    ObjectType datePrototype \u003d DATE_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.DATE_FUNCTION_TYPE, DATE_FUNCTION_TYPE);\n    ObjectType DATE_TYPE \u003d DATE_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.DATE_TYPE, DATE_TYPE);\n    FunctionType ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"Error\");\n    registerNativeType(JSTypeNative.ERROR_FUNCTION_TYPE, ERROR_FUNCTION_TYPE);\n    ObjectType ERROR_TYPE \u003d ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.ERROR_TYPE, ERROR_TYPE);\n    FunctionType EVAL_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"EvalError\");\n    EVAL_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.EVAL_ERROR_FUNCTION_TYPE, EVAL_ERROR_FUNCTION_TYPE);\n    ObjectType EVAL_ERROR_TYPE \u003d EVAL_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.EVAL_ERROR_TYPE, EVAL_ERROR_TYPE);\n    FunctionType RANGE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"RangeError\");\n    RANGE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.RANGE_ERROR_FUNCTION_TYPE, RANGE_ERROR_FUNCTION_TYPE);\n    ObjectType RANGE_ERROR_TYPE \u003d RANGE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.RANGE_ERROR_TYPE, RANGE_ERROR_TYPE);\n    FunctionType REFERENCE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"ReferenceError\");\n    REFERENCE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE, REFERENCE_ERROR_FUNCTION_TYPE);\n    ObjectType REFERENCE_ERROR_TYPE \u003d REFERENCE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.REFERENCE_ERROR_TYPE, REFERENCE_ERROR_TYPE);\n    FunctionType SYNTAX_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"SyntaxError\");\n    SYNTAX_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE, SYNTAX_ERROR_FUNCTION_TYPE);\n    ObjectType SYNTAX_ERROR_TYPE \u003d SYNTAX_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.SYNTAX_ERROR_TYPE, SYNTAX_ERROR_TYPE);\n    FunctionType TYPE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"TypeError\");\n    TYPE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.TYPE_ERROR_FUNCTION_TYPE, TYPE_ERROR_FUNCTION_TYPE);\n    ObjectType TYPE_ERROR_TYPE \u003d TYPE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.TYPE_ERROR_TYPE, TYPE_ERROR_TYPE);\n    FunctionType URI_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"URIError\");\n    URI_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.URI_ERROR_FUNCTION_TYPE, URI_ERROR_FUNCTION_TYPE);\n    ObjectType URI_ERROR_TYPE \u003d URI_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.URI_ERROR_TYPE, URI_ERROR_TYPE);\n    FunctionType NUMBER_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Number\", null, createArrowType(createParameters(false, ALL_TYPE), NUMBER_TYPE), null, null, true, true);\n    ObjectType numberPrototype \u003d NUMBER_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE, NUMBER_OBJECT_FUNCTION_TYPE);\n    ObjectType NUMBER_OBJECT_TYPE \u003d NUMBER_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.NUMBER_OBJECT_TYPE, NUMBER_OBJECT_TYPE);\n    FunctionType REGEXP_FUNCTION_TYPE \u003d new FunctionType(this, \"RegExp\", null, createArrowType(createOptionalParameters(ALL_TYPE, ALL_TYPE)), null, null, true, true);\n    REGEXP_FUNCTION_TYPE.getInternalArrowType().returnType \u003d REGEXP_FUNCTION_TYPE.getInstanceType();\n    ObjectType regexpPrototype \u003d REGEXP_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.REGEXP_FUNCTION_TYPE, REGEXP_FUNCTION_TYPE);\n    ObjectType REGEXP_TYPE \u003d REGEXP_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.REGEXP_TYPE, REGEXP_TYPE);\n    FunctionType STRING_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"String\", null, createArrowType(createParameters(false, ALL_TYPE), STRING_TYPE), null, null, true, true);\n    ObjectType stringPrototype \u003d STRING_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE, STRING_OBJECT_FUNCTION_TYPE);\n    ObjectType STRING_OBJECT_TYPE \u003d STRING_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.STRING_OBJECT_TYPE, STRING_OBJECT_TYPE);\n    JSType OBJECT_NUMBER_STRING \u003d createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE);\n    registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING, OBJECT_NUMBER_STRING);\n    JSType OBJECT_NUMBER_STRING_BOOLEAN \u003d createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n    registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN, OBJECT_NUMBER_STRING_BOOLEAN);\n    JSType NUMBER_STRING_BOOLEAN \u003d createUnionType(NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n    registerNativeType(JSTypeNative.NUMBER_STRING_BOOLEAN, NUMBER_STRING_BOOLEAN);\n    JSType NUMBER_STRING \u003d createUnionType(NUMBER_TYPE, STRING_TYPE);\n    registerNativeType(JSTypeNative.NUMBER_STRING, NUMBER_STRING);\n    JSType STRING_VALUE_OR_OBJECT_TYPE \u003d createUnionType(STRING_OBJECT_TYPE, STRING_TYPE);\n    registerNativeType(JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE, STRING_VALUE_OR_OBJECT_TYPE);\n    JSType NUMBER_VALUE_OR_OBJECT_TYPE \u003d createUnionType(NUMBER_OBJECT_TYPE, NUMBER_TYPE);\n    registerNativeType(JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE, NUMBER_VALUE_OR_OBJECT_TYPE);\n    FunctionType U2U_FUNCTION_TYPE \u003d createFunctionType(UNKNOWN_TYPE, true, UNKNOWN_TYPE);\n    registerNativeType(JSTypeNative.U2U_FUNCTION_TYPE, U2U_FUNCTION_TYPE);\n    FunctionType U2U_CONSTRUCTOR_TYPE \u003d new FunctionType(this, \"Function\", null, createArrowType(createParametersWithVarArgs(UNKNOWN_TYPE), UNKNOWN_TYPE), NO_OBJECT_TYPE, null, true, true) {\n\n        private static final long serialVersionUID \u003d 1L;\n\n        @Override\n        public FunctionType getConstructor() {\n            return registry.getNativeFunctionType(JSTypeNative.FUNCTION_FUNCTION_TYPE);\n        }\n    };\n    registerNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE, U2U_CONSTRUCTOR_TYPE);\n    registerNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE, U2U_CONSTRUCTOR_TYPE);\n    FUNCTION_FUNCTION_TYPE.setInstanceType(U2U_CONSTRUCTOR_TYPE);\n    U2U_CONSTRUCTOR_TYPE.setImplicitPrototype(FUNCTION_PROTOTYPE);\n    FunctionType LEAST_FUNCTION_TYPE \u003d createFunctionType(NO_TYPE, true, ALL_TYPE);\n    registerNativeType(JSTypeNative.LEAST_FUNCTION_TYPE, LEAST_FUNCTION_TYPE);\n    ObjectType GLOBAL_THIS \u003d createObjectType(\"global this\", null, UNKNOWN_TYPE);\n    registerNativeType(JSTypeNative.GLOBAL_THIS, GLOBAL_THIS);\n    FunctionType GREATEST_FUNCTION_TYPE \u003d createFunctionType(ALL_TYPE, true, NO_TYPE);\n    registerNativeType(JSTypeNative.GREATEST_FUNCTION_TYPE, GREATEST_FUNCTION_TYPE);\n    registerPropertyOnType(\"prototype\", OBJECT_FUNCTION_TYPE);\n}",
      "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
      "functionStartLine": 236,
      "functionName": "initializeBuiltInTypes",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,137 +1,135 @@\n private void initializeBuiltInTypes() {\n     BooleanType BOOLEAN_TYPE \u003d new BooleanType(this);\n     registerNativeType(JSTypeNative.BOOLEAN_TYPE, BOOLEAN_TYPE);\n     NullType NULL_TYPE \u003d new NullType(this);\n     registerNativeType(JSTypeNative.NULL_TYPE, NULL_TYPE);\n     NumberType NUMBER_TYPE \u003d new NumberType(this);\n     registerNativeType(JSTypeNative.NUMBER_TYPE, NUMBER_TYPE);\n     StringType STRING_TYPE \u003d new StringType(this);\n     registerNativeType(JSTypeNative.STRING_TYPE, STRING_TYPE);\n     UnknownType UNKNOWN_TYPE \u003d new UnknownType(this, false);\n     registerNativeType(JSTypeNative.UNKNOWN_TYPE, UNKNOWN_TYPE);\n     registerNativeType(JSTypeNative.CHECKED_UNKNOWN_TYPE, new UnknownType(this, true));\n     VoidType VOID_TYPE \u003d new VoidType(this);\n     registerNativeType(JSTypeNative.VOID_TYPE, VOID_TYPE);\n     AllType ALL_TYPE \u003d new AllType(this);\n     registerNativeType(JSTypeNative.ALL_TYPE, ALL_TYPE);\n     ObjectType TOP_LEVEL_PROTOTYPE \u003d new FunctionPrototypeType(this, null, null, true);\n     registerNativeType(JSTypeNative.TOP_LEVEL_PROTOTYPE, TOP_LEVEL_PROTOTYPE);\n     FunctionType OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Object\", null, createArrowType(createOptionalParameters(ALL_TYPE), UNKNOWN_TYPE), null, null, true, true);\n     OBJECT_FUNCTION_TYPE.defineDeclaredProperty(\"prototype\", TOP_LEVEL_PROTOTYPE, true, null);\n     registerNativeType(JSTypeNative.OBJECT_FUNCTION_TYPE, OBJECT_FUNCTION_TYPE);\n     ObjectType OBJECT_PROTOTYPE \u003d OBJECT_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.OBJECT_PROTOTYPE, OBJECT_PROTOTYPE);\n     ObjectType OBJECT_TYPE \u003d OBJECT_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.OBJECT_TYPE, OBJECT_TYPE);\n     FunctionType FUNCTION_FUNCTION_TYPE \u003d new FunctionType(this, \"Function\", null, createArrowType(createParametersWithVarArgs(ALL_TYPE), UNKNOWN_TYPE), null, null, true, true);\n     FUNCTION_FUNCTION_TYPE.setPrototypeBasedOn(OBJECT_TYPE);\n     registerNativeType(JSTypeNative.FUNCTION_FUNCTION_TYPE, FUNCTION_FUNCTION_TYPE);\n     ObjectType FUNCTION_PROTOTYPE \u003d FUNCTION_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.FUNCTION_PROTOTYPE, FUNCTION_PROTOTYPE);\n     NoType NO_TYPE \u003d new NoType(this);\n     registerNativeType(JSTypeNative.NO_TYPE, NO_TYPE);\n     NoObjectType NO_OBJECT_TYPE \u003d new NoObjectType(this);\n     registerNativeType(JSTypeNative.NO_OBJECT_TYPE, NO_OBJECT_TYPE);\n-    NoObjectType NO_RESOLVED_TYPE \u003d new NoResolvedType(this);\n-    registerNativeType(JSTypeNative.NO_RESOLVED_TYPE, NO_RESOLVED_TYPE);\n     FunctionType ARRAY_FUNCTION_TYPE \u003d new FunctionType(this, \"Array\", null, createArrowType(createParametersWithVarArgs(ALL_TYPE), null), null, null, true, true);\n     ARRAY_FUNCTION_TYPE.getInternalArrowType().returnType \u003d ARRAY_FUNCTION_TYPE.getInstanceType();\n     ObjectType arrayPrototype \u003d ARRAY_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.ARRAY_FUNCTION_TYPE, ARRAY_FUNCTION_TYPE);\n     ObjectType ARRAY_TYPE \u003d ARRAY_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.ARRAY_TYPE, ARRAY_TYPE);\n     FunctionType BOOLEAN_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Boolean\", null, createArrowType(createParameters(false, ALL_TYPE), BOOLEAN_TYPE), null, null, true, true);\n     ObjectType booleanPrototype \u003d BOOLEAN_OBJECT_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE, BOOLEAN_OBJECT_FUNCTION_TYPE);\n     ObjectType BOOLEAN_OBJECT_TYPE \u003d BOOLEAN_OBJECT_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.BOOLEAN_OBJECT_TYPE, BOOLEAN_OBJECT_TYPE);\n     FunctionType DATE_FUNCTION_TYPE \u003d new FunctionType(this, \"Date\", null, createArrowType(createOptionalParameters(UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE), STRING_TYPE), null, null, true, true);\n     ObjectType datePrototype \u003d DATE_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.DATE_FUNCTION_TYPE, DATE_FUNCTION_TYPE);\n     ObjectType DATE_TYPE \u003d DATE_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.DATE_TYPE, DATE_TYPE);\n     FunctionType ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"Error\");\n     registerNativeType(JSTypeNative.ERROR_FUNCTION_TYPE, ERROR_FUNCTION_TYPE);\n     ObjectType ERROR_TYPE \u003d ERROR_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.ERROR_TYPE, ERROR_TYPE);\n     FunctionType EVAL_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"EvalError\");\n     EVAL_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n     registerNativeType(JSTypeNative.EVAL_ERROR_FUNCTION_TYPE, EVAL_ERROR_FUNCTION_TYPE);\n     ObjectType EVAL_ERROR_TYPE \u003d EVAL_ERROR_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.EVAL_ERROR_TYPE, EVAL_ERROR_TYPE);\n     FunctionType RANGE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"RangeError\");\n     RANGE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n     registerNativeType(JSTypeNative.RANGE_ERROR_FUNCTION_TYPE, RANGE_ERROR_FUNCTION_TYPE);\n     ObjectType RANGE_ERROR_TYPE \u003d RANGE_ERROR_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.RANGE_ERROR_TYPE, RANGE_ERROR_TYPE);\n     FunctionType REFERENCE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"ReferenceError\");\n     REFERENCE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n     registerNativeType(JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE, REFERENCE_ERROR_FUNCTION_TYPE);\n     ObjectType REFERENCE_ERROR_TYPE \u003d REFERENCE_ERROR_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.REFERENCE_ERROR_TYPE, REFERENCE_ERROR_TYPE);\n     FunctionType SYNTAX_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"SyntaxError\");\n     SYNTAX_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n     registerNativeType(JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE, SYNTAX_ERROR_FUNCTION_TYPE);\n     ObjectType SYNTAX_ERROR_TYPE \u003d SYNTAX_ERROR_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.SYNTAX_ERROR_TYPE, SYNTAX_ERROR_TYPE);\n     FunctionType TYPE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"TypeError\");\n     TYPE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n     registerNativeType(JSTypeNative.TYPE_ERROR_FUNCTION_TYPE, TYPE_ERROR_FUNCTION_TYPE);\n     ObjectType TYPE_ERROR_TYPE \u003d TYPE_ERROR_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.TYPE_ERROR_TYPE, TYPE_ERROR_TYPE);\n     FunctionType URI_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"URIError\");\n     URI_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n     registerNativeType(JSTypeNative.URI_ERROR_FUNCTION_TYPE, URI_ERROR_FUNCTION_TYPE);\n     ObjectType URI_ERROR_TYPE \u003d URI_ERROR_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.URI_ERROR_TYPE, URI_ERROR_TYPE);\n     FunctionType NUMBER_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Number\", null, createArrowType(createParameters(false, ALL_TYPE), NUMBER_TYPE), null, null, true, true);\n     ObjectType numberPrototype \u003d NUMBER_OBJECT_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE, NUMBER_OBJECT_FUNCTION_TYPE);\n     ObjectType NUMBER_OBJECT_TYPE \u003d NUMBER_OBJECT_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.NUMBER_OBJECT_TYPE, NUMBER_OBJECT_TYPE);\n     FunctionType REGEXP_FUNCTION_TYPE \u003d new FunctionType(this, \"RegExp\", null, createArrowType(createOptionalParameters(ALL_TYPE, ALL_TYPE)), null, null, true, true);\n     REGEXP_FUNCTION_TYPE.getInternalArrowType().returnType \u003d REGEXP_FUNCTION_TYPE.getInstanceType();\n     ObjectType regexpPrototype \u003d REGEXP_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.REGEXP_FUNCTION_TYPE, REGEXP_FUNCTION_TYPE);\n     ObjectType REGEXP_TYPE \u003d REGEXP_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.REGEXP_TYPE, REGEXP_TYPE);\n     FunctionType STRING_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"String\", null, createArrowType(createParameters(false, ALL_TYPE), STRING_TYPE), null, null, true, true);\n     ObjectType stringPrototype \u003d STRING_OBJECT_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE, STRING_OBJECT_FUNCTION_TYPE);\n     ObjectType STRING_OBJECT_TYPE \u003d STRING_OBJECT_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.STRING_OBJECT_TYPE, STRING_OBJECT_TYPE);\n     JSType OBJECT_NUMBER_STRING \u003d createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE);\n     registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING, OBJECT_NUMBER_STRING);\n     JSType OBJECT_NUMBER_STRING_BOOLEAN \u003d createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n     registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN, OBJECT_NUMBER_STRING_BOOLEAN);\n     JSType NUMBER_STRING_BOOLEAN \u003d createUnionType(NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n     registerNativeType(JSTypeNative.NUMBER_STRING_BOOLEAN, NUMBER_STRING_BOOLEAN);\n     JSType NUMBER_STRING \u003d createUnionType(NUMBER_TYPE, STRING_TYPE);\n     registerNativeType(JSTypeNative.NUMBER_STRING, NUMBER_STRING);\n     JSType STRING_VALUE_OR_OBJECT_TYPE \u003d createUnionType(STRING_OBJECT_TYPE, STRING_TYPE);\n     registerNativeType(JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE, STRING_VALUE_OR_OBJECT_TYPE);\n     JSType NUMBER_VALUE_OR_OBJECT_TYPE \u003d createUnionType(NUMBER_OBJECT_TYPE, NUMBER_TYPE);\n     registerNativeType(JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE, NUMBER_VALUE_OR_OBJECT_TYPE);\n     FunctionType U2U_FUNCTION_TYPE \u003d createFunctionType(UNKNOWN_TYPE, true, UNKNOWN_TYPE);\n     registerNativeType(JSTypeNative.U2U_FUNCTION_TYPE, U2U_FUNCTION_TYPE);\n     FunctionType U2U_CONSTRUCTOR_TYPE \u003d new FunctionType(this, \"Function\", null, createArrowType(createParametersWithVarArgs(UNKNOWN_TYPE), UNKNOWN_TYPE), NO_OBJECT_TYPE, null, true, true) {\n \n         private static final long serialVersionUID \u003d 1L;\n \n         @Override\n         public FunctionType getConstructor() {\n             return registry.getNativeFunctionType(JSTypeNative.FUNCTION_FUNCTION_TYPE);\n         }\n     };\n     registerNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE, U2U_CONSTRUCTOR_TYPE);\n     registerNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE, U2U_CONSTRUCTOR_TYPE);\n     FUNCTION_FUNCTION_TYPE.setInstanceType(U2U_CONSTRUCTOR_TYPE);\n     U2U_CONSTRUCTOR_TYPE.setImplicitPrototype(FUNCTION_PROTOTYPE);\n     FunctionType LEAST_FUNCTION_TYPE \u003d createFunctionType(NO_TYPE, true, ALL_TYPE);\n     registerNativeType(JSTypeNative.LEAST_FUNCTION_TYPE, LEAST_FUNCTION_TYPE);\n     ObjectType GLOBAL_THIS \u003d createObjectType(\"global this\", null, UNKNOWN_TYPE);\n     registerNativeType(JSTypeNative.GLOBAL_THIS, GLOBAL_THIS);\n     FunctionType GREATEST_FUNCTION_TYPE \u003d createFunctionType(ALL_TYPE, true, NO_TYPE);\n     registerNativeType(JSTypeNative.GREATEST_FUNCTION_TYPE, GREATEST_FUNCTION_TYPE);\n     registerPropertyOnType(\"prototype\", OBJECT_FUNCTION_TYPE);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6dbca87c463d8a1e229a0d92d5cdf92247fdefde": {
      "type": "Ybodychange",
      "commitMessage": "\nWhen we can\u0027t find a forward-declared type,\nthat type should resolve to an empty type.\nThis ensures that if someone tries to pass a param or return\nvalue to it, they get a type warning.\n\nR\u003djohnlenz\nDELTA\u003d461  (385 added, 37 deleted, 39 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d301\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@702 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/18/11, 3:28 PM",
      "commitName": "6dbca87c463d8a1e229a0d92d5cdf92247fdefde",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "1/7/11, 9:19 AM",
      "commitNameOld": "6bbac115c9a7928a7053b2da3a78df9569df8570",
      "commitAuthorOld": "bashir@google.com",
      "daysBetweenCommits": 11.26,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "actualSource": "private void initializeBuiltInTypes() {\n    BooleanType BOOLEAN_TYPE \u003d new BooleanType(this);\n    registerNativeType(JSTypeNative.BOOLEAN_TYPE, BOOLEAN_TYPE);\n    NullType NULL_TYPE \u003d new NullType(this);\n    registerNativeType(JSTypeNative.NULL_TYPE, NULL_TYPE);\n    NumberType NUMBER_TYPE \u003d new NumberType(this);\n    registerNativeType(JSTypeNative.NUMBER_TYPE, NUMBER_TYPE);\n    StringType STRING_TYPE \u003d new StringType(this);\n    registerNativeType(JSTypeNative.STRING_TYPE, STRING_TYPE);\n    UnknownType UNKNOWN_TYPE \u003d new UnknownType(this, false);\n    registerNativeType(JSTypeNative.UNKNOWN_TYPE, UNKNOWN_TYPE);\n    registerNativeType(JSTypeNative.CHECKED_UNKNOWN_TYPE, new UnknownType(this, true));\n    VoidType VOID_TYPE \u003d new VoidType(this);\n    registerNativeType(JSTypeNative.VOID_TYPE, VOID_TYPE);\n    AllType ALL_TYPE \u003d new AllType(this);\n    registerNativeType(JSTypeNative.ALL_TYPE, ALL_TYPE);\n    ObjectType TOP_LEVEL_PROTOTYPE \u003d new FunctionPrototypeType(this, null, null, true);\n    registerNativeType(JSTypeNative.TOP_LEVEL_PROTOTYPE, TOP_LEVEL_PROTOTYPE);\n    FunctionType OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Object\", null, createArrowType(createOptionalParameters(ALL_TYPE), UNKNOWN_TYPE), null, null, true, true);\n    OBJECT_FUNCTION_TYPE.defineDeclaredProperty(\"prototype\", TOP_LEVEL_PROTOTYPE, true, null);\n    registerNativeType(JSTypeNative.OBJECT_FUNCTION_TYPE, OBJECT_FUNCTION_TYPE);\n    ObjectType OBJECT_PROTOTYPE \u003d OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.OBJECT_PROTOTYPE, OBJECT_PROTOTYPE);\n    ObjectType OBJECT_TYPE \u003d OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.OBJECT_TYPE, OBJECT_TYPE);\n    FunctionType FUNCTION_FUNCTION_TYPE \u003d new FunctionType(this, \"Function\", null, createArrowType(createParametersWithVarArgs(ALL_TYPE), UNKNOWN_TYPE), null, null, true, true);\n    FUNCTION_FUNCTION_TYPE.setPrototypeBasedOn(OBJECT_TYPE);\n    registerNativeType(JSTypeNative.FUNCTION_FUNCTION_TYPE, FUNCTION_FUNCTION_TYPE);\n    ObjectType FUNCTION_PROTOTYPE \u003d FUNCTION_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.FUNCTION_PROTOTYPE, FUNCTION_PROTOTYPE);\n    NoType NO_TYPE \u003d new NoType(this);\n    registerNativeType(JSTypeNative.NO_TYPE, NO_TYPE);\n    NoObjectType NO_OBJECT_TYPE \u003d new NoObjectType(this);\n    registerNativeType(JSTypeNative.NO_OBJECT_TYPE, NO_OBJECT_TYPE);\n    NoObjectType NO_RESOLVED_TYPE \u003d new NoResolvedType(this);\n    registerNativeType(JSTypeNative.NO_RESOLVED_TYPE, NO_RESOLVED_TYPE);\n    FunctionType ARRAY_FUNCTION_TYPE \u003d new FunctionType(this, \"Array\", null, createArrowType(createParametersWithVarArgs(ALL_TYPE), null), null, null, true, true);\n    ARRAY_FUNCTION_TYPE.getInternalArrowType().returnType \u003d ARRAY_FUNCTION_TYPE.getInstanceType();\n    ObjectType arrayPrototype \u003d ARRAY_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.ARRAY_FUNCTION_TYPE, ARRAY_FUNCTION_TYPE);\n    ObjectType ARRAY_TYPE \u003d ARRAY_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.ARRAY_TYPE, ARRAY_TYPE);\n    FunctionType BOOLEAN_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Boolean\", null, createArrowType(createParameters(false, ALL_TYPE), BOOLEAN_TYPE), null, null, true, true);\n    ObjectType booleanPrototype \u003d BOOLEAN_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE, BOOLEAN_OBJECT_FUNCTION_TYPE);\n    ObjectType BOOLEAN_OBJECT_TYPE \u003d BOOLEAN_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.BOOLEAN_OBJECT_TYPE, BOOLEAN_OBJECT_TYPE);\n    FunctionType DATE_FUNCTION_TYPE \u003d new FunctionType(this, \"Date\", null, createArrowType(createOptionalParameters(UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE), STRING_TYPE), null, null, true, true);\n    ObjectType datePrototype \u003d DATE_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.DATE_FUNCTION_TYPE, DATE_FUNCTION_TYPE);\n    ObjectType DATE_TYPE \u003d DATE_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.DATE_TYPE, DATE_TYPE);\n    FunctionType ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"Error\");\n    registerNativeType(JSTypeNative.ERROR_FUNCTION_TYPE, ERROR_FUNCTION_TYPE);\n    ObjectType ERROR_TYPE \u003d ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.ERROR_TYPE, ERROR_TYPE);\n    FunctionType EVAL_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"EvalError\");\n    EVAL_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.EVAL_ERROR_FUNCTION_TYPE, EVAL_ERROR_FUNCTION_TYPE);\n    ObjectType EVAL_ERROR_TYPE \u003d EVAL_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.EVAL_ERROR_TYPE, EVAL_ERROR_TYPE);\n    FunctionType RANGE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"RangeError\");\n    RANGE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.RANGE_ERROR_FUNCTION_TYPE, RANGE_ERROR_FUNCTION_TYPE);\n    ObjectType RANGE_ERROR_TYPE \u003d RANGE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.RANGE_ERROR_TYPE, RANGE_ERROR_TYPE);\n    FunctionType REFERENCE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"ReferenceError\");\n    REFERENCE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE, REFERENCE_ERROR_FUNCTION_TYPE);\n    ObjectType REFERENCE_ERROR_TYPE \u003d REFERENCE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.REFERENCE_ERROR_TYPE, REFERENCE_ERROR_TYPE);\n    FunctionType SYNTAX_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"SyntaxError\");\n    SYNTAX_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE, SYNTAX_ERROR_FUNCTION_TYPE);\n    ObjectType SYNTAX_ERROR_TYPE \u003d SYNTAX_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.SYNTAX_ERROR_TYPE, SYNTAX_ERROR_TYPE);\n    FunctionType TYPE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"TypeError\");\n    TYPE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.TYPE_ERROR_FUNCTION_TYPE, TYPE_ERROR_FUNCTION_TYPE);\n    ObjectType TYPE_ERROR_TYPE \u003d TYPE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.TYPE_ERROR_TYPE, TYPE_ERROR_TYPE);\n    FunctionType URI_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"URIError\");\n    URI_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.URI_ERROR_FUNCTION_TYPE, URI_ERROR_FUNCTION_TYPE);\n    ObjectType URI_ERROR_TYPE \u003d URI_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.URI_ERROR_TYPE, URI_ERROR_TYPE);\n    FunctionType NUMBER_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Number\", null, createArrowType(createParameters(false, ALL_TYPE), NUMBER_TYPE), null, null, true, true);\n    ObjectType numberPrototype \u003d NUMBER_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE, NUMBER_OBJECT_FUNCTION_TYPE);\n    ObjectType NUMBER_OBJECT_TYPE \u003d NUMBER_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.NUMBER_OBJECT_TYPE, NUMBER_OBJECT_TYPE);\n    FunctionType REGEXP_FUNCTION_TYPE \u003d new FunctionType(this, \"RegExp\", null, createArrowType(createOptionalParameters(ALL_TYPE, ALL_TYPE)), null, null, true, true);\n    REGEXP_FUNCTION_TYPE.getInternalArrowType().returnType \u003d REGEXP_FUNCTION_TYPE.getInstanceType();\n    ObjectType regexpPrototype \u003d REGEXP_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.REGEXP_FUNCTION_TYPE, REGEXP_FUNCTION_TYPE);\n    ObjectType REGEXP_TYPE \u003d REGEXP_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.REGEXP_TYPE, REGEXP_TYPE);\n    FunctionType STRING_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"String\", null, createArrowType(createParameters(false, ALL_TYPE), STRING_TYPE), null, null, true, true);\n    ObjectType stringPrototype \u003d STRING_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE, STRING_OBJECT_FUNCTION_TYPE);\n    ObjectType STRING_OBJECT_TYPE \u003d STRING_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.STRING_OBJECT_TYPE, STRING_OBJECT_TYPE);\n    JSType OBJECT_NUMBER_STRING \u003d createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE);\n    registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING, OBJECT_NUMBER_STRING);\n    JSType OBJECT_NUMBER_STRING_BOOLEAN \u003d createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n    registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN, OBJECT_NUMBER_STRING_BOOLEAN);\n    JSType NUMBER_STRING_BOOLEAN \u003d createUnionType(NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n    registerNativeType(JSTypeNative.NUMBER_STRING_BOOLEAN, NUMBER_STRING_BOOLEAN);\n    JSType NUMBER_STRING \u003d createUnionType(NUMBER_TYPE, STRING_TYPE);\n    registerNativeType(JSTypeNative.NUMBER_STRING, NUMBER_STRING);\n    JSType STRING_VALUE_OR_OBJECT_TYPE \u003d createUnionType(STRING_OBJECT_TYPE, STRING_TYPE);\n    registerNativeType(JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE, STRING_VALUE_OR_OBJECT_TYPE);\n    JSType NUMBER_VALUE_OR_OBJECT_TYPE \u003d createUnionType(NUMBER_OBJECT_TYPE, NUMBER_TYPE);\n    registerNativeType(JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE, NUMBER_VALUE_OR_OBJECT_TYPE);\n    FunctionType U2U_FUNCTION_TYPE \u003d createFunctionType(UNKNOWN_TYPE, true, UNKNOWN_TYPE);\n    registerNativeType(JSTypeNative.U2U_FUNCTION_TYPE, U2U_FUNCTION_TYPE);\n    FunctionType U2U_CONSTRUCTOR_TYPE \u003d new FunctionType(this, \"Function\", null, createArrowType(createParametersWithVarArgs(UNKNOWN_TYPE), UNKNOWN_TYPE), NO_OBJECT_TYPE, null, true, true) {\n\n        private static final long serialVersionUID \u003d 1L;\n\n        @Override\n        public FunctionType getConstructor() {\n            return registry.getNativeFunctionType(JSTypeNative.FUNCTION_FUNCTION_TYPE);\n        }\n    };\n    registerNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE, U2U_CONSTRUCTOR_TYPE);\n    registerNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE, U2U_CONSTRUCTOR_TYPE);\n    FUNCTION_FUNCTION_TYPE.setInstanceType(U2U_CONSTRUCTOR_TYPE);\n    U2U_CONSTRUCTOR_TYPE.setImplicitPrototype(FUNCTION_PROTOTYPE);\n    FunctionType LEAST_FUNCTION_TYPE \u003d createFunctionType(NO_TYPE, true, ALL_TYPE);\n    registerNativeType(JSTypeNative.LEAST_FUNCTION_TYPE, LEAST_FUNCTION_TYPE);\n    ObjectType GLOBAL_THIS \u003d createObjectType(\"global this\", null, UNKNOWN_TYPE);\n    registerNativeType(JSTypeNative.GLOBAL_THIS, GLOBAL_THIS);\n    FunctionType GREATEST_FUNCTION_TYPE \u003d createFunctionType(ALL_TYPE, true, NO_TYPE);\n    registerNativeType(JSTypeNative.GREATEST_FUNCTION_TYPE, GREATEST_FUNCTION_TYPE);\n    registerPropertyOnType(\"prototype\", OBJECT_FUNCTION_TYPE);\n}",
      "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
      "functionStartLine": 236,
      "functionName": "initializeBuiltInTypes",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,135 +1,137 @@\n private void initializeBuiltInTypes() {\n     BooleanType BOOLEAN_TYPE \u003d new BooleanType(this);\n     registerNativeType(JSTypeNative.BOOLEAN_TYPE, BOOLEAN_TYPE);\n     NullType NULL_TYPE \u003d new NullType(this);\n     registerNativeType(JSTypeNative.NULL_TYPE, NULL_TYPE);\n     NumberType NUMBER_TYPE \u003d new NumberType(this);\n     registerNativeType(JSTypeNative.NUMBER_TYPE, NUMBER_TYPE);\n     StringType STRING_TYPE \u003d new StringType(this);\n     registerNativeType(JSTypeNative.STRING_TYPE, STRING_TYPE);\n     UnknownType UNKNOWN_TYPE \u003d new UnknownType(this, false);\n     registerNativeType(JSTypeNative.UNKNOWN_TYPE, UNKNOWN_TYPE);\n     registerNativeType(JSTypeNative.CHECKED_UNKNOWN_TYPE, new UnknownType(this, true));\n     VoidType VOID_TYPE \u003d new VoidType(this);\n     registerNativeType(JSTypeNative.VOID_TYPE, VOID_TYPE);\n     AllType ALL_TYPE \u003d new AllType(this);\n     registerNativeType(JSTypeNative.ALL_TYPE, ALL_TYPE);\n     ObjectType TOP_LEVEL_PROTOTYPE \u003d new FunctionPrototypeType(this, null, null, true);\n     registerNativeType(JSTypeNative.TOP_LEVEL_PROTOTYPE, TOP_LEVEL_PROTOTYPE);\n     FunctionType OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Object\", null, createArrowType(createOptionalParameters(ALL_TYPE), UNKNOWN_TYPE), null, null, true, true);\n     OBJECT_FUNCTION_TYPE.defineDeclaredProperty(\"prototype\", TOP_LEVEL_PROTOTYPE, true, null);\n     registerNativeType(JSTypeNative.OBJECT_FUNCTION_TYPE, OBJECT_FUNCTION_TYPE);\n     ObjectType OBJECT_PROTOTYPE \u003d OBJECT_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.OBJECT_PROTOTYPE, OBJECT_PROTOTYPE);\n     ObjectType OBJECT_TYPE \u003d OBJECT_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.OBJECT_TYPE, OBJECT_TYPE);\n     FunctionType FUNCTION_FUNCTION_TYPE \u003d new FunctionType(this, \"Function\", null, createArrowType(createParametersWithVarArgs(ALL_TYPE), UNKNOWN_TYPE), null, null, true, true);\n     FUNCTION_FUNCTION_TYPE.setPrototypeBasedOn(OBJECT_TYPE);\n     registerNativeType(JSTypeNative.FUNCTION_FUNCTION_TYPE, FUNCTION_FUNCTION_TYPE);\n     ObjectType FUNCTION_PROTOTYPE \u003d FUNCTION_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.FUNCTION_PROTOTYPE, FUNCTION_PROTOTYPE);\n     NoType NO_TYPE \u003d new NoType(this);\n     registerNativeType(JSTypeNative.NO_TYPE, NO_TYPE);\n     NoObjectType NO_OBJECT_TYPE \u003d new NoObjectType(this);\n     registerNativeType(JSTypeNative.NO_OBJECT_TYPE, NO_OBJECT_TYPE);\n+    NoObjectType NO_RESOLVED_TYPE \u003d new NoResolvedType(this);\n+    registerNativeType(JSTypeNative.NO_RESOLVED_TYPE, NO_RESOLVED_TYPE);\n     FunctionType ARRAY_FUNCTION_TYPE \u003d new FunctionType(this, \"Array\", null, createArrowType(createParametersWithVarArgs(ALL_TYPE), null), null, null, true, true);\n     ARRAY_FUNCTION_TYPE.getInternalArrowType().returnType \u003d ARRAY_FUNCTION_TYPE.getInstanceType();\n     ObjectType arrayPrototype \u003d ARRAY_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.ARRAY_FUNCTION_TYPE, ARRAY_FUNCTION_TYPE);\n     ObjectType ARRAY_TYPE \u003d ARRAY_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.ARRAY_TYPE, ARRAY_TYPE);\n     FunctionType BOOLEAN_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Boolean\", null, createArrowType(createParameters(false, ALL_TYPE), BOOLEAN_TYPE), null, null, true, true);\n     ObjectType booleanPrototype \u003d BOOLEAN_OBJECT_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE, BOOLEAN_OBJECT_FUNCTION_TYPE);\n     ObjectType BOOLEAN_OBJECT_TYPE \u003d BOOLEAN_OBJECT_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.BOOLEAN_OBJECT_TYPE, BOOLEAN_OBJECT_TYPE);\n     FunctionType DATE_FUNCTION_TYPE \u003d new FunctionType(this, \"Date\", null, createArrowType(createOptionalParameters(UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE), STRING_TYPE), null, null, true, true);\n     ObjectType datePrototype \u003d DATE_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.DATE_FUNCTION_TYPE, DATE_FUNCTION_TYPE);\n     ObjectType DATE_TYPE \u003d DATE_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.DATE_TYPE, DATE_TYPE);\n     FunctionType ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"Error\");\n     registerNativeType(JSTypeNative.ERROR_FUNCTION_TYPE, ERROR_FUNCTION_TYPE);\n     ObjectType ERROR_TYPE \u003d ERROR_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.ERROR_TYPE, ERROR_TYPE);\n     FunctionType EVAL_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"EvalError\");\n     EVAL_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n     registerNativeType(JSTypeNative.EVAL_ERROR_FUNCTION_TYPE, EVAL_ERROR_FUNCTION_TYPE);\n     ObjectType EVAL_ERROR_TYPE \u003d EVAL_ERROR_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.EVAL_ERROR_TYPE, EVAL_ERROR_TYPE);\n     FunctionType RANGE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"RangeError\");\n     RANGE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n     registerNativeType(JSTypeNative.RANGE_ERROR_FUNCTION_TYPE, RANGE_ERROR_FUNCTION_TYPE);\n     ObjectType RANGE_ERROR_TYPE \u003d RANGE_ERROR_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.RANGE_ERROR_TYPE, RANGE_ERROR_TYPE);\n     FunctionType REFERENCE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"ReferenceError\");\n     REFERENCE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n     registerNativeType(JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE, REFERENCE_ERROR_FUNCTION_TYPE);\n     ObjectType REFERENCE_ERROR_TYPE \u003d REFERENCE_ERROR_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.REFERENCE_ERROR_TYPE, REFERENCE_ERROR_TYPE);\n     FunctionType SYNTAX_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"SyntaxError\");\n     SYNTAX_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n     registerNativeType(JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE, SYNTAX_ERROR_FUNCTION_TYPE);\n     ObjectType SYNTAX_ERROR_TYPE \u003d SYNTAX_ERROR_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.SYNTAX_ERROR_TYPE, SYNTAX_ERROR_TYPE);\n     FunctionType TYPE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"TypeError\");\n     TYPE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n     registerNativeType(JSTypeNative.TYPE_ERROR_FUNCTION_TYPE, TYPE_ERROR_FUNCTION_TYPE);\n     ObjectType TYPE_ERROR_TYPE \u003d TYPE_ERROR_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.TYPE_ERROR_TYPE, TYPE_ERROR_TYPE);\n     FunctionType URI_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"URIError\");\n     URI_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n     registerNativeType(JSTypeNative.URI_ERROR_FUNCTION_TYPE, URI_ERROR_FUNCTION_TYPE);\n     ObjectType URI_ERROR_TYPE \u003d URI_ERROR_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.URI_ERROR_TYPE, URI_ERROR_TYPE);\n     FunctionType NUMBER_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Number\", null, createArrowType(createParameters(false, ALL_TYPE), NUMBER_TYPE), null, null, true, true);\n     ObjectType numberPrototype \u003d NUMBER_OBJECT_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE, NUMBER_OBJECT_FUNCTION_TYPE);\n     ObjectType NUMBER_OBJECT_TYPE \u003d NUMBER_OBJECT_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.NUMBER_OBJECT_TYPE, NUMBER_OBJECT_TYPE);\n     FunctionType REGEXP_FUNCTION_TYPE \u003d new FunctionType(this, \"RegExp\", null, createArrowType(createOptionalParameters(ALL_TYPE, ALL_TYPE)), null, null, true, true);\n     REGEXP_FUNCTION_TYPE.getInternalArrowType().returnType \u003d REGEXP_FUNCTION_TYPE.getInstanceType();\n     ObjectType regexpPrototype \u003d REGEXP_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.REGEXP_FUNCTION_TYPE, REGEXP_FUNCTION_TYPE);\n     ObjectType REGEXP_TYPE \u003d REGEXP_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.REGEXP_TYPE, REGEXP_TYPE);\n     FunctionType STRING_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"String\", null, createArrowType(createParameters(false, ALL_TYPE), STRING_TYPE), null, null, true, true);\n     ObjectType stringPrototype \u003d STRING_OBJECT_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE, STRING_OBJECT_FUNCTION_TYPE);\n     ObjectType STRING_OBJECT_TYPE \u003d STRING_OBJECT_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.STRING_OBJECT_TYPE, STRING_OBJECT_TYPE);\n     JSType OBJECT_NUMBER_STRING \u003d createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE);\n     registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING, OBJECT_NUMBER_STRING);\n     JSType OBJECT_NUMBER_STRING_BOOLEAN \u003d createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n     registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN, OBJECT_NUMBER_STRING_BOOLEAN);\n     JSType NUMBER_STRING_BOOLEAN \u003d createUnionType(NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n     registerNativeType(JSTypeNative.NUMBER_STRING_BOOLEAN, NUMBER_STRING_BOOLEAN);\n     JSType NUMBER_STRING \u003d createUnionType(NUMBER_TYPE, STRING_TYPE);\n     registerNativeType(JSTypeNative.NUMBER_STRING, NUMBER_STRING);\n     JSType STRING_VALUE_OR_OBJECT_TYPE \u003d createUnionType(STRING_OBJECT_TYPE, STRING_TYPE);\n     registerNativeType(JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE, STRING_VALUE_OR_OBJECT_TYPE);\n     JSType NUMBER_VALUE_OR_OBJECT_TYPE \u003d createUnionType(NUMBER_OBJECT_TYPE, NUMBER_TYPE);\n     registerNativeType(JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE, NUMBER_VALUE_OR_OBJECT_TYPE);\n     FunctionType U2U_FUNCTION_TYPE \u003d createFunctionType(UNKNOWN_TYPE, true, UNKNOWN_TYPE);\n     registerNativeType(JSTypeNative.U2U_FUNCTION_TYPE, U2U_FUNCTION_TYPE);\n     FunctionType U2U_CONSTRUCTOR_TYPE \u003d new FunctionType(this, \"Function\", null, createArrowType(createParametersWithVarArgs(UNKNOWN_TYPE), UNKNOWN_TYPE), NO_OBJECT_TYPE, null, true, true) {\n \n         private static final long serialVersionUID \u003d 1L;\n \n         @Override\n         public FunctionType getConstructor() {\n             return registry.getNativeFunctionType(JSTypeNative.FUNCTION_FUNCTION_TYPE);\n         }\n     };\n     registerNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE, U2U_CONSTRUCTOR_TYPE);\n     registerNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE, U2U_CONSTRUCTOR_TYPE);\n     FUNCTION_FUNCTION_TYPE.setInstanceType(U2U_CONSTRUCTOR_TYPE);\n     U2U_CONSTRUCTOR_TYPE.setImplicitPrototype(FUNCTION_PROTOTYPE);\n     FunctionType LEAST_FUNCTION_TYPE \u003d createFunctionType(NO_TYPE, true, ALL_TYPE);\n     registerNativeType(JSTypeNative.LEAST_FUNCTION_TYPE, LEAST_FUNCTION_TYPE);\n     ObjectType GLOBAL_THIS \u003d createObjectType(\"global this\", null, UNKNOWN_TYPE);\n     registerNativeType(JSTypeNative.GLOBAL_THIS, GLOBAL_THIS);\n     FunctionType GREATEST_FUNCTION_TYPE \u003d createFunctionType(ALL_TYPE, true, NO_TYPE);\n     registerNativeType(JSTypeNative.GREATEST_FUNCTION_TYPE, GREATEST_FUNCTION_TYPE);\n     registerPropertyOnType(\"prototype\", OBJECT_FUNCTION_TYPE);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6bbac115c9a7928a7053b2da3a78df9569df8570": {
      "type": "Ybodychange",
      "commitMessage": "\nAdding getPropertyNode functionality to ObjectType. This needs\nassociating nodes to properties in defineProperty.\n\nR\u003dnicksantos\nDELTA\u003d307  (127 added, 0 deleted, 180 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d223\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@674 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/7/11, 9:19 AM",
      "commitName": "6bbac115c9a7928a7053b2da3a78df9569df8570",
      "commitAuthor": "bashir@google.com",
      "commitDateOld": "12/14/10, 1:49 PM",
      "commitNameOld": "e9f7e6114414f68deb90f4116861d7a054365404",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 23.81,
      "commitsBetweenForRepo": 43,
      "commitsBetweenForFile": 1,
      "actualSource": "private void initializeBuiltInTypes() {\n    BooleanType BOOLEAN_TYPE \u003d new BooleanType(this);\n    registerNativeType(JSTypeNative.BOOLEAN_TYPE, BOOLEAN_TYPE);\n    NullType NULL_TYPE \u003d new NullType(this);\n    registerNativeType(JSTypeNative.NULL_TYPE, NULL_TYPE);\n    NumberType NUMBER_TYPE \u003d new NumberType(this);\n    registerNativeType(JSTypeNative.NUMBER_TYPE, NUMBER_TYPE);\n    StringType STRING_TYPE \u003d new StringType(this);\n    registerNativeType(JSTypeNative.STRING_TYPE, STRING_TYPE);\n    UnknownType UNKNOWN_TYPE \u003d new UnknownType(this, false);\n    registerNativeType(JSTypeNative.UNKNOWN_TYPE, UNKNOWN_TYPE);\n    registerNativeType(JSTypeNative.CHECKED_UNKNOWN_TYPE, new UnknownType(this, true));\n    VoidType VOID_TYPE \u003d new VoidType(this);\n    registerNativeType(JSTypeNative.VOID_TYPE, VOID_TYPE);\n    AllType ALL_TYPE \u003d new AllType(this);\n    registerNativeType(JSTypeNative.ALL_TYPE, ALL_TYPE);\n    ObjectType TOP_LEVEL_PROTOTYPE \u003d new FunctionPrototypeType(this, null, null, true);\n    registerNativeType(JSTypeNative.TOP_LEVEL_PROTOTYPE, TOP_LEVEL_PROTOTYPE);\n    FunctionType OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Object\", null, createArrowType(createOptionalParameters(ALL_TYPE), UNKNOWN_TYPE), null, null, true, true);\n    OBJECT_FUNCTION_TYPE.defineDeclaredProperty(\"prototype\", TOP_LEVEL_PROTOTYPE, true, null);\n    registerNativeType(JSTypeNative.OBJECT_FUNCTION_TYPE, OBJECT_FUNCTION_TYPE);\n    ObjectType OBJECT_PROTOTYPE \u003d OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.OBJECT_PROTOTYPE, OBJECT_PROTOTYPE);\n    ObjectType OBJECT_TYPE \u003d OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.OBJECT_TYPE, OBJECT_TYPE);\n    FunctionType FUNCTION_FUNCTION_TYPE \u003d new FunctionType(this, \"Function\", null, createArrowType(createParametersWithVarArgs(ALL_TYPE), UNKNOWN_TYPE), null, null, true, true);\n    FUNCTION_FUNCTION_TYPE.setPrototypeBasedOn(OBJECT_TYPE);\n    registerNativeType(JSTypeNative.FUNCTION_FUNCTION_TYPE, FUNCTION_FUNCTION_TYPE);\n    ObjectType FUNCTION_PROTOTYPE \u003d FUNCTION_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.FUNCTION_PROTOTYPE, FUNCTION_PROTOTYPE);\n    NoType NO_TYPE \u003d new NoType(this);\n    registerNativeType(JSTypeNative.NO_TYPE, NO_TYPE);\n    NoObjectType NO_OBJECT_TYPE \u003d new NoObjectType(this);\n    registerNativeType(JSTypeNative.NO_OBJECT_TYPE, NO_OBJECT_TYPE);\n    FunctionType ARRAY_FUNCTION_TYPE \u003d new FunctionType(this, \"Array\", null, createArrowType(createParametersWithVarArgs(ALL_TYPE), null), null, null, true, true);\n    ARRAY_FUNCTION_TYPE.getInternalArrowType().returnType \u003d ARRAY_FUNCTION_TYPE.getInstanceType();\n    ObjectType arrayPrototype \u003d ARRAY_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.ARRAY_FUNCTION_TYPE, ARRAY_FUNCTION_TYPE);\n    ObjectType ARRAY_TYPE \u003d ARRAY_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.ARRAY_TYPE, ARRAY_TYPE);\n    FunctionType BOOLEAN_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Boolean\", null, createArrowType(createParameters(false, ALL_TYPE), BOOLEAN_TYPE), null, null, true, true);\n    ObjectType booleanPrototype \u003d BOOLEAN_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE, BOOLEAN_OBJECT_FUNCTION_TYPE);\n    ObjectType BOOLEAN_OBJECT_TYPE \u003d BOOLEAN_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.BOOLEAN_OBJECT_TYPE, BOOLEAN_OBJECT_TYPE);\n    FunctionType DATE_FUNCTION_TYPE \u003d new FunctionType(this, \"Date\", null, createArrowType(createOptionalParameters(UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE), STRING_TYPE), null, null, true, true);\n    ObjectType datePrototype \u003d DATE_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.DATE_FUNCTION_TYPE, DATE_FUNCTION_TYPE);\n    ObjectType DATE_TYPE \u003d DATE_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.DATE_TYPE, DATE_TYPE);\n    FunctionType ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"Error\");\n    registerNativeType(JSTypeNative.ERROR_FUNCTION_TYPE, ERROR_FUNCTION_TYPE);\n    ObjectType ERROR_TYPE \u003d ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.ERROR_TYPE, ERROR_TYPE);\n    FunctionType EVAL_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"EvalError\");\n    EVAL_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.EVAL_ERROR_FUNCTION_TYPE, EVAL_ERROR_FUNCTION_TYPE);\n    ObjectType EVAL_ERROR_TYPE \u003d EVAL_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.EVAL_ERROR_TYPE, EVAL_ERROR_TYPE);\n    FunctionType RANGE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"RangeError\");\n    RANGE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.RANGE_ERROR_FUNCTION_TYPE, RANGE_ERROR_FUNCTION_TYPE);\n    ObjectType RANGE_ERROR_TYPE \u003d RANGE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.RANGE_ERROR_TYPE, RANGE_ERROR_TYPE);\n    FunctionType REFERENCE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"ReferenceError\");\n    REFERENCE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE, REFERENCE_ERROR_FUNCTION_TYPE);\n    ObjectType REFERENCE_ERROR_TYPE \u003d REFERENCE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.REFERENCE_ERROR_TYPE, REFERENCE_ERROR_TYPE);\n    FunctionType SYNTAX_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"SyntaxError\");\n    SYNTAX_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE, SYNTAX_ERROR_FUNCTION_TYPE);\n    ObjectType SYNTAX_ERROR_TYPE \u003d SYNTAX_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.SYNTAX_ERROR_TYPE, SYNTAX_ERROR_TYPE);\n    FunctionType TYPE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"TypeError\");\n    TYPE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.TYPE_ERROR_FUNCTION_TYPE, TYPE_ERROR_FUNCTION_TYPE);\n    ObjectType TYPE_ERROR_TYPE \u003d TYPE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.TYPE_ERROR_TYPE, TYPE_ERROR_TYPE);\n    FunctionType URI_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"URIError\");\n    URI_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.URI_ERROR_FUNCTION_TYPE, URI_ERROR_FUNCTION_TYPE);\n    ObjectType URI_ERROR_TYPE \u003d URI_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.URI_ERROR_TYPE, URI_ERROR_TYPE);\n    FunctionType NUMBER_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Number\", null, createArrowType(createParameters(false, ALL_TYPE), NUMBER_TYPE), null, null, true, true);\n    ObjectType numberPrototype \u003d NUMBER_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE, NUMBER_OBJECT_FUNCTION_TYPE);\n    ObjectType NUMBER_OBJECT_TYPE \u003d NUMBER_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.NUMBER_OBJECT_TYPE, NUMBER_OBJECT_TYPE);\n    FunctionType REGEXP_FUNCTION_TYPE \u003d new FunctionType(this, \"RegExp\", null, createArrowType(createOptionalParameters(ALL_TYPE, ALL_TYPE)), null, null, true, true);\n    REGEXP_FUNCTION_TYPE.getInternalArrowType().returnType \u003d REGEXP_FUNCTION_TYPE.getInstanceType();\n    ObjectType regexpPrototype \u003d REGEXP_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.REGEXP_FUNCTION_TYPE, REGEXP_FUNCTION_TYPE);\n    ObjectType REGEXP_TYPE \u003d REGEXP_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.REGEXP_TYPE, REGEXP_TYPE);\n    FunctionType STRING_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"String\", null, createArrowType(createParameters(false, ALL_TYPE), STRING_TYPE), null, null, true, true);\n    ObjectType stringPrototype \u003d STRING_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE, STRING_OBJECT_FUNCTION_TYPE);\n    ObjectType STRING_OBJECT_TYPE \u003d STRING_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.STRING_OBJECT_TYPE, STRING_OBJECT_TYPE);\n    JSType OBJECT_NUMBER_STRING \u003d createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE);\n    registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING, OBJECT_NUMBER_STRING);\n    JSType OBJECT_NUMBER_STRING_BOOLEAN \u003d createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n    registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN, OBJECT_NUMBER_STRING_BOOLEAN);\n    JSType NUMBER_STRING_BOOLEAN \u003d createUnionType(NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n    registerNativeType(JSTypeNative.NUMBER_STRING_BOOLEAN, NUMBER_STRING_BOOLEAN);\n    JSType NUMBER_STRING \u003d createUnionType(NUMBER_TYPE, STRING_TYPE);\n    registerNativeType(JSTypeNative.NUMBER_STRING, NUMBER_STRING);\n    JSType STRING_VALUE_OR_OBJECT_TYPE \u003d createUnionType(STRING_OBJECT_TYPE, STRING_TYPE);\n    registerNativeType(JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE, STRING_VALUE_OR_OBJECT_TYPE);\n    JSType NUMBER_VALUE_OR_OBJECT_TYPE \u003d createUnionType(NUMBER_OBJECT_TYPE, NUMBER_TYPE);\n    registerNativeType(JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE, NUMBER_VALUE_OR_OBJECT_TYPE);\n    FunctionType U2U_FUNCTION_TYPE \u003d createFunctionType(UNKNOWN_TYPE, true, UNKNOWN_TYPE);\n    registerNativeType(JSTypeNative.U2U_FUNCTION_TYPE, U2U_FUNCTION_TYPE);\n    FunctionType U2U_CONSTRUCTOR_TYPE \u003d new FunctionType(this, \"Function\", null, createArrowType(createParametersWithVarArgs(UNKNOWN_TYPE), UNKNOWN_TYPE), NO_OBJECT_TYPE, null, true, true) {\n\n        private static final long serialVersionUID \u003d 1L;\n\n        @Override\n        public FunctionType getConstructor() {\n            return registry.getNativeFunctionType(JSTypeNative.FUNCTION_FUNCTION_TYPE);\n        }\n    };\n    registerNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE, U2U_CONSTRUCTOR_TYPE);\n    registerNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE, U2U_CONSTRUCTOR_TYPE);\n    FUNCTION_FUNCTION_TYPE.setInstanceType(U2U_CONSTRUCTOR_TYPE);\n    U2U_CONSTRUCTOR_TYPE.setImplicitPrototype(FUNCTION_PROTOTYPE);\n    FunctionType LEAST_FUNCTION_TYPE \u003d createFunctionType(NO_TYPE, true, ALL_TYPE);\n    registerNativeType(JSTypeNative.LEAST_FUNCTION_TYPE, LEAST_FUNCTION_TYPE);\n    ObjectType GLOBAL_THIS \u003d createObjectType(\"global this\", null, UNKNOWN_TYPE);\n    registerNativeType(JSTypeNative.GLOBAL_THIS, GLOBAL_THIS);\n    FunctionType GREATEST_FUNCTION_TYPE \u003d createFunctionType(ALL_TYPE, true, NO_TYPE);\n    registerNativeType(JSTypeNative.GREATEST_FUNCTION_TYPE, GREATEST_FUNCTION_TYPE);\n    registerPropertyOnType(\"prototype\", OBJECT_FUNCTION_TYPE);\n}",
      "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
      "functionStartLine": 236,
      "functionName": "initializeBuiltInTypes",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,135 +1,135 @@\n private void initializeBuiltInTypes() {\n     BooleanType BOOLEAN_TYPE \u003d new BooleanType(this);\n     registerNativeType(JSTypeNative.BOOLEAN_TYPE, BOOLEAN_TYPE);\n     NullType NULL_TYPE \u003d new NullType(this);\n     registerNativeType(JSTypeNative.NULL_TYPE, NULL_TYPE);\n     NumberType NUMBER_TYPE \u003d new NumberType(this);\n     registerNativeType(JSTypeNative.NUMBER_TYPE, NUMBER_TYPE);\n     StringType STRING_TYPE \u003d new StringType(this);\n     registerNativeType(JSTypeNative.STRING_TYPE, STRING_TYPE);\n     UnknownType UNKNOWN_TYPE \u003d new UnknownType(this, false);\n     registerNativeType(JSTypeNative.UNKNOWN_TYPE, UNKNOWN_TYPE);\n     registerNativeType(JSTypeNative.CHECKED_UNKNOWN_TYPE, new UnknownType(this, true));\n     VoidType VOID_TYPE \u003d new VoidType(this);\n     registerNativeType(JSTypeNative.VOID_TYPE, VOID_TYPE);\n     AllType ALL_TYPE \u003d new AllType(this);\n     registerNativeType(JSTypeNative.ALL_TYPE, ALL_TYPE);\n     ObjectType TOP_LEVEL_PROTOTYPE \u003d new FunctionPrototypeType(this, null, null, true);\n     registerNativeType(JSTypeNative.TOP_LEVEL_PROTOTYPE, TOP_LEVEL_PROTOTYPE);\n     FunctionType OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Object\", null, createArrowType(createOptionalParameters(ALL_TYPE), UNKNOWN_TYPE), null, null, true, true);\n-    OBJECT_FUNCTION_TYPE.defineDeclaredProperty(\"prototype\", TOP_LEVEL_PROTOTYPE, true);\n+    OBJECT_FUNCTION_TYPE.defineDeclaredProperty(\"prototype\", TOP_LEVEL_PROTOTYPE, true, null);\n     registerNativeType(JSTypeNative.OBJECT_FUNCTION_TYPE, OBJECT_FUNCTION_TYPE);\n     ObjectType OBJECT_PROTOTYPE \u003d OBJECT_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.OBJECT_PROTOTYPE, OBJECT_PROTOTYPE);\n     ObjectType OBJECT_TYPE \u003d OBJECT_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.OBJECT_TYPE, OBJECT_TYPE);\n     FunctionType FUNCTION_FUNCTION_TYPE \u003d new FunctionType(this, \"Function\", null, createArrowType(createParametersWithVarArgs(ALL_TYPE), UNKNOWN_TYPE), null, null, true, true);\n     FUNCTION_FUNCTION_TYPE.setPrototypeBasedOn(OBJECT_TYPE);\n     registerNativeType(JSTypeNative.FUNCTION_FUNCTION_TYPE, FUNCTION_FUNCTION_TYPE);\n     ObjectType FUNCTION_PROTOTYPE \u003d FUNCTION_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.FUNCTION_PROTOTYPE, FUNCTION_PROTOTYPE);\n     NoType NO_TYPE \u003d new NoType(this);\n     registerNativeType(JSTypeNative.NO_TYPE, NO_TYPE);\n     NoObjectType NO_OBJECT_TYPE \u003d new NoObjectType(this);\n     registerNativeType(JSTypeNative.NO_OBJECT_TYPE, NO_OBJECT_TYPE);\n     FunctionType ARRAY_FUNCTION_TYPE \u003d new FunctionType(this, \"Array\", null, createArrowType(createParametersWithVarArgs(ALL_TYPE), null), null, null, true, true);\n     ARRAY_FUNCTION_TYPE.getInternalArrowType().returnType \u003d ARRAY_FUNCTION_TYPE.getInstanceType();\n     ObjectType arrayPrototype \u003d ARRAY_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.ARRAY_FUNCTION_TYPE, ARRAY_FUNCTION_TYPE);\n     ObjectType ARRAY_TYPE \u003d ARRAY_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.ARRAY_TYPE, ARRAY_TYPE);\n     FunctionType BOOLEAN_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Boolean\", null, createArrowType(createParameters(false, ALL_TYPE), BOOLEAN_TYPE), null, null, true, true);\n     ObjectType booleanPrototype \u003d BOOLEAN_OBJECT_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE, BOOLEAN_OBJECT_FUNCTION_TYPE);\n     ObjectType BOOLEAN_OBJECT_TYPE \u003d BOOLEAN_OBJECT_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.BOOLEAN_OBJECT_TYPE, BOOLEAN_OBJECT_TYPE);\n     FunctionType DATE_FUNCTION_TYPE \u003d new FunctionType(this, \"Date\", null, createArrowType(createOptionalParameters(UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE), STRING_TYPE), null, null, true, true);\n     ObjectType datePrototype \u003d DATE_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.DATE_FUNCTION_TYPE, DATE_FUNCTION_TYPE);\n     ObjectType DATE_TYPE \u003d DATE_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.DATE_TYPE, DATE_TYPE);\n     FunctionType ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"Error\");\n     registerNativeType(JSTypeNative.ERROR_FUNCTION_TYPE, ERROR_FUNCTION_TYPE);\n     ObjectType ERROR_TYPE \u003d ERROR_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.ERROR_TYPE, ERROR_TYPE);\n     FunctionType EVAL_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"EvalError\");\n     EVAL_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n     registerNativeType(JSTypeNative.EVAL_ERROR_FUNCTION_TYPE, EVAL_ERROR_FUNCTION_TYPE);\n     ObjectType EVAL_ERROR_TYPE \u003d EVAL_ERROR_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.EVAL_ERROR_TYPE, EVAL_ERROR_TYPE);\n     FunctionType RANGE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"RangeError\");\n     RANGE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n     registerNativeType(JSTypeNative.RANGE_ERROR_FUNCTION_TYPE, RANGE_ERROR_FUNCTION_TYPE);\n     ObjectType RANGE_ERROR_TYPE \u003d RANGE_ERROR_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.RANGE_ERROR_TYPE, RANGE_ERROR_TYPE);\n     FunctionType REFERENCE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"ReferenceError\");\n     REFERENCE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n     registerNativeType(JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE, REFERENCE_ERROR_FUNCTION_TYPE);\n     ObjectType REFERENCE_ERROR_TYPE \u003d REFERENCE_ERROR_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.REFERENCE_ERROR_TYPE, REFERENCE_ERROR_TYPE);\n     FunctionType SYNTAX_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"SyntaxError\");\n     SYNTAX_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n     registerNativeType(JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE, SYNTAX_ERROR_FUNCTION_TYPE);\n     ObjectType SYNTAX_ERROR_TYPE \u003d SYNTAX_ERROR_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.SYNTAX_ERROR_TYPE, SYNTAX_ERROR_TYPE);\n     FunctionType TYPE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"TypeError\");\n     TYPE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n     registerNativeType(JSTypeNative.TYPE_ERROR_FUNCTION_TYPE, TYPE_ERROR_FUNCTION_TYPE);\n     ObjectType TYPE_ERROR_TYPE \u003d TYPE_ERROR_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.TYPE_ERROR_TYPE, TYPE_ERROR_TYPE);\n     FunctionType URI_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"URIError\");\n     URI_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n     registerNativeType(JSTypeNative.URI_ERROR_FUNCTION_TYPE, URI_ERROR_FUNCTION_TYPE);\n     ObjectType URI_ERROR_TYPE \u003d URI_ERROR_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.URI_ERROR_TYPE, URI_ERROR_TYPE);\n     FunctionType NUMBER_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Number\", null, createArrowType(createParameters(false, ALL_TYPE), NUMBER_TYPE), null, null, true, true);\n     ObjectType numberPrototype \u003d NUMBER_OBJECT_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE, NUMBER_OBJECT_FUNCTION_TYPE);\n     ObjectType NUMBER_OBJECT_TYPE \u003d NUMBER_OBJECT_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.NUMBER_OBJECT_TYPE, NUMBER_OBJECT_TYPE);\n     FunctionType REGEXP_FUNCTION_TYPE \u003d new FunctionType(this, \"RegExp\", null, createArrowType(createOptionalParameters(ALL_TYPE, ALL_TYPE)), null, null, true, true);\n     REGEXP_FUNCTION_TYPE.getInternalArrowType().returnType \u003d REGEXP_FUNCTION_TYPE.getInstanceType();\n     ObjectType regexpPrototype \u003d REGEXP_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.REGEXP_FUNCTION_TYPE, REGEXP_FUNCTION_TYPE);\n     ObjectType REGEXP_TYPE \u003d REGEXP_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.REGEXP_TYPE, REGEXP_TYPE);\n     FunctionType STRING_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"String\", null, createArrowType(createParameters(false, ALL_TYPE), STRING_TYPE), null, null, true, true);\n     ObjectType stringPrototype \u003d STRING_OBJECT_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE, STRING_OBJECT_FUNCTION_TYPE);\n     ObjectType STRING_OBJECT_TYPE \u003d STRING_OBJECT_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.STRING_OBJECT_TYPE, STRING_OBJECT_TYPE);\n     JSType OBJECT_NUMBER_STRING \u003d createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE);\n     registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING, OBJECT_NUMBER_STRING);\n     JSType OBJECT_NUMBER_STRING_BOOLEAN \u003d createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n     registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN, OBJECT_NUMBER_STRING_BOOLEAN);\n     JSType NUMBER_STRING_BOOLEAN \u003d createUnionType(NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n     registerNativeType(JSTypeNative.NUMBER_STRING_BOOLEAN, NUMBER_STRING_BOOLEAN);\n     JSType NUMBER_STRING \u003d createUnionType(NUMBER_TYPE, STRING_TYPE);\n     registerNativeType(JSTypeNative.NUMBER_STRING, NUMBER_STRING);\n     JSType STRING_VALUE_OR_OBJECT_TYPE \u003d createUnionType(STRING_OBJECT_TYPE, STRING_TYPE);\n     registerNativeType(JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE, STRING_VALUE_OR_OBJECT_TYPE);\n     JSType NUMBER_VALUE_OR_OBJECT_TYPE \u003d createUnionType(NUMBER_OBJECT_TYPE, NUMBER_TYPE);\n     registerNativeType(JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE, NUMBER_VALUE_OR_OBJECT_TYPE);\n     FunctionType U2U_FUNCTION_TYPE \u003d createFunctionType(UNKNOWN_TYPE, true, UNKNOWN_TYPE);\n     registerNativeType(JSTypeNative.U2U_FUNCTION_TYPE, U2U_FUNCTION_TYPE);\n     FunctionType U2U_CONSTRUCTOR_TYPE \u003d new FunctionType(this, \"Function\", null, createArrowType(createParametersWithVarArgs(UNKNOWN_TYPE), UNKNOWN_TYPE), NO_OBJECT_TYPE, null, true, true) {\n \n         private static final long serialVersionUID \u003d 1L;\n \n         @Override\n         public FunctionType getConstructor() {\n             return registry.getNativeFunctionType(JSTypeNative.FUNCTION_FUNCTION_TYPE);\n         }\n     };\n     registerNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE, U2U_CONSTRUCTOR_TYPE);\n     registerNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE, U2U_CONSTRUCTOR_TYPE);\n     FUNCTION_FUNCTION_TYPE.setInstanceType(U2U_CONSTRUCTOR_TYPE);\n     U2U_CONSTRUCTOR_TYPE.setImplicitPrototype(FUNCTION_PROTOTYPE);\n     FunctionType LEAST_FUNCTION_TYPE \u003d createFunctionType(NO_TYPE, true, ALL_TYPE);\n     registerNativeType(JSTypeNative.LEAST_FUNCTION_TYPE, LEAST_FUNCTION_TYPE);\n     ObjectType GLOBAL_THIS \u003d createObjectType(\"global this\", null, UNKNOWN_TYPE);\n     registerNativeType(JSTypeNative.GLOBAL_THIS, GLOBAL_THIS);\n     FunctionType GREATEST_FUNCTION_TYPE \u003d createFunctionType(ALL_TYPE, true, NO_TYPE);\n     registerNativeType(JSTypeNative.GREATEST_FUNCTION_TYPE, GREATEST_FUNCTION_TYPE);\n     registerPropertyOnType(\"prototype\", OBJECT_FUNCTION_TYPE);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1c75a5484b515bd593295fbf0c8491e2dd1f1c45": {
      "type": "Ybodychange",
      "commitMessage": "\nremove all uses of Sets of types.\nequality can change over time, so this is not safe.\nThis means we need to be much more explicit in how\nwe collapse type duplicates in unions and in type tightening\n\nR\u003djohnlenz\nDELTA\u003d319  (210 added, 52 deleted, 57 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d121\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@623 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/13/10, 8:10 AM",
      "commitName": "1c75a5484b515bd593295fbf0c8491e2dd1f1c45",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "11/30/10, 10:47 AM",
      "commitNameOld": "78eb67212252fb94f85e77fba7bc69dd33b44d3c",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 12.89,
      "commitsBetweenForRepo": 45,
      "commitsBetweenForFile": 1,
      "actualSource": "private void initializeBuiltInTypes() {\n    BooleanType BOOLEAN_TYPE \u003d new BooleanType(this);\n    registerNativeType(JSTypeNative.BOOLEAN_TYPE, BOOLEAN_TYPE);\n    NullType NULL_TYPE \u003d new NullType(this);\n    registerNativeType(JSTypeNative.NULL_TYPE, NULL_TYPE);\n    NumberType NUMBER_TYPE \u003d new NumberType(this);\n    registerNativeType(JSTypeNative.NUMBER_TYPE, NUMBER_TYPE);\n    StringType STRING_TYPE \u003d new StringType(this);\n    registerNativeType(JSTypeNative.STRING_TYPE, STRING_TYPE);\n    UnknownType UNKNOWN_TYPE \u003d new UnknownType(this, false);\n    registerNativeType(JSTypeNative.UNKNOWN_TYPE, UNKNOWN_TYPE);\n    registerNativeType(JSTypeNative.CHECKED_UNKNOWN_TYPE, new UnknownType(this, true));\n    VoidType VOID_TYPE \u003d new VoidType(this);\n    registerNativeType(JSTypeNative.VOID_TYPE, VOID_TYPE);\n    AllType ALL_TYPE \u003d new AllType(this);\n    registerNativeType(JSTypeNative.ALL_TYPE, ALL_TYPE);\n    ObjectType TOP_LEVEL_PROTOTYPE \u003d new FunctionPrototypeType(this, null, null, true);\n    registerNativeType(JSTypeNative.TOP_LEVEL_PROTOTYPE, TOP_LEVEL_PROTOTYPE);\n    FunctionType OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Object\", null, createArrowType(createOptionalParameters(ALL_TYPE), UNKNOWN_TYPE), null, null, true, true);\n    OBJECT_FUNCTION_TYPE.defineDeclaredProperty(\"prototype\", TOP_LEVEL_PROTOTYPE, true);\n    registerNativeType(JSTypeNative.OBJECT_FUNCTION_TYPE, OBJECT_FUNCTION_TYPE);\n    ObjectType OBJECT_PROTOTYPE \u003d OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.OBJECT_PROTOTYPE, OBJECT_PROTOTYPE);\n    ObjectType OBJECT_TYPE \u003d OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.OBJECT_TYPE, OBJECT_TYPE);\n    FunctionType FUNCTION_FUNCTION_TYPE \u003d new FunctionType(this, \"Function\", null, createArrowType(createParametersWithVarArgs(ALL_TYPE), UNKNOWN_TYPE), null, null, true, true);\n    FUNCTION_FUNCTION_TYPE.setPrototypeBasedOn(OBJECT_TYPE);\n    registerNativeType(JSTypeNative.FUNCTION_FUNCTION_TYPE, FUNCTION_FUNCTION_TYPE);\n    ObjectType FUNCTION_PROTOTYPE \u003d FUNCTION_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.FUNCTION_PROTOTYPE, FUNCTION_PROTOTYPE);\n    NoType NO_TYPE \u003d new NoType(this);\n    registerNativeType(JSTypeNative.NO_TYPE, NO_TYPE);\n    NoObjectType NO_OBJECT_TYPE \u003d new NoObjectType(this);\n    registerNativeType(JSTypeNative.NO_OBJECT_TYPE, NO_OBJECT_TYPE);\n    FunctionType ARRAY_FUNCTION_TYPE \u003d new FunctionType(this, \"Array\", null, createArrowType(createParametersWithVarArgs(ALL_TYPE), null), null, null, true, true);\n    ARRAY_FUNCTION_TYPE.getInternalArrowType().returnType \u003d ARRAY_FUNCTION_TYPE.getInstanceType();\n    ObjectType arrayPrototype \u003d ARRAY_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.ARRAY_FUNCTION_TYPE, ARRAY_FUNCTION_TYPE);\n    ObjectType ARRAY_TYPE \u003d ARRAY_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.ARRAY_TYPE, ARRAY_TYPE);\n    FunctionType BOOLEAN_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Boolean\", null, createArrowType(createParameters(false, ALL_TYPE), BOOLEAN_TYPE), null, null, true, true);\n    ObjectType booleanPrototype \u003d BOOLEAN_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE, BOOLEAN_OBJECT_FUNCTION_TYPE);\n    ObjectType BOOLEAN_OBJECT_TYPE \u003d BOOLEAN_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.BOOLEAN_OBJECT_TYPE, BOOLEAN_OBJECT_TYPE);\n    FunctionType DATE_FUNCTION_TYPE \u003d new FunctionType(this, \"Date\", null, createArrowType(createOptionalParameters(UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE), STRING_TYPE), null, null, true, true);\n    ObjectType datePrototype \u003d DATE_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.DATE_FUNCTION_TYPE, DATE_FUNCTION_TYPE);\n    ObjectType DATE_TYPE \u003d DATE_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.DATE_TYPE, DATE_TYPE);\n    FunctionType ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"Error\");\n    registerNativeType(JSTypeNative.ERROR_FUNCTION_TYPE, ERROR_FUNCTION_TYPE);\n    ObjectType ERROR_TYPE \u003d ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.ERROR_TYPE, ERROR_TYPE);\n    FunctionType EVAL_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"EvalError\");\n    EVAL_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.EVAL_ERROR_FUNCTION_TYPE, EVAL_ERROR_FUNCTION_TYPE);\n    ObjectType EVAL_ERROR_TYPE \u003d EVAL_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.EVAL_ERROR_TYPE, EVAL_ERROR_TYPE);\n    FunctionType RANGE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"RangeError\");\n    RANGE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.RANGE_ERROR_FUNCTION_TYPE, RANGE_ERROR_FUNCTION_TYPE);\n    ObjectType RANGE_ERROR_TYPE \u003d RANGE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.RANGE_ERROR_TYPE, RANGE_ERROR_TYPE);\n    FunctionType REFERENCE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"ReferenceError\");\n    REFERENCE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE, REFERENCE_ERROR_FUNCTION_TYPE);\n    ObjectType REFERENCE_ERROR_TYPE \u003d REFERENCE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.REFERENCE_ERROR_TYPE, REFERENCE_ERROR_TYPE);\n    FunctionType SYNTAX_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"SyntaxError\");\n    SYNTAX_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE, SYNTAX_ERROR_FUNCTION_TYPE);\n    ObjectType SYNTAX_ERROR_TYPE \u003d SYNTAX_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.SYNTAX_ERROR_TYPE, SYNTAX_ERROR_TYPE);\n    FunctionType TYPE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"TypeError\");\n    TYPE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.TYPE_ERROR_FUNCTION_TYPE, TYPE_ERROR_FUNCTION_TYPE);\n    ObjectType TYPE_ERROR_TYPE \u003d TYPE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.TYPE_ERROR_TYPE, TYPE_ERROR_TYPE);\n    FunctionType URI_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"URIError\");\n    URI_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.URI_ERROR_FUNCTION_TYPE, URI_ERROR_FUNCTION_TYPE);\n    ObjectType URI_ERROR_TYPE \u003d URI_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.URI_ERROR_TYPE, URI_ERROR_TYPE);\n    FunctionType NUMBER_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Number\", null, createArrowType(createParameters(false, ALL_TYPE), NUMBER_TYPE), null, null, true, true);\n    ObjectType numberPrototype \u003d NUMBER_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE, NUMBER_OBJECT_FUNCTION_TYPE);\n    ObjectType NUMBER_OBJECT_TYPE \u003d NUMBER_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.NUMBER_OBJECT_TYPE, NUMBER_OBJECT_TYPE);\n    FunctionType REGEXP_FUNCTION_TYPE \u003d new FunctionType(this, \"RegExp\", null, createArrowType(createOptionalParameters(ALL_TYPE, ALL_TYPE)), null, null, true, true);\n    REGEXP_FUNCTION_TYPE.getInternalArrowType().returnType \u003d REGEXP_FUNCTION_TYPE.getInstanceType();\n    ObjectType regexpPrototype \u003d REGEXP_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.REGEXP_FUNCTION_TYPE, REGEXP_FUNCTION_TYPE);\n    ObjectType REGEXP_TYPE \u003d REGEXP_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.REGEXP_TYPE, REGEXP_TYPE);\n    FunctionType STRING_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"String\", null, createArrowType(createParameters(false, ALL_TYPE), STRING_TYPE), null, null, true, true);\n    ObjectType stringPrototype \u003d STRING_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE, STRING_OBJECT_FUNCTION_TYPE);\n    ObjectType STRING_OBJECT_TYPE \u003d STRING_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.STRING_OBJECT_TYPE, STRING_OBJECT_TYPE);\n    JSType OBJECT_NUMBER_STRING \u003d createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE);\n    registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING, OBJECT_NUMBER_STRING);\n    JSType OBJECT_NUMBER_STRING_BOOLEAN \u003d createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n    registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN, OBJECT_NUMBER_STRING_BOOLEAN);\n    JSType NUMBER_STRING_BOOLEAN \u003d createUnionType(NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n    registerNativeType(JSTypeNative.NUMBER_STRING_BOOLEAN, NUMBER_STRING_BOOLEAN);\n    JSType NUMBER_STRING \u003d createUnionType(NUMBER_TYPE, STRING_TYPE);\n    registerNativeType(JSTypeNative.NUMBER_STRING, NUMBER_STRING);\n    JSType STRING_VALUE_OR_OBJECT_TYPE \u003d createUnionType(STRING_OBJECT_TYPE, STRING_TYPE);\n    registerNativeType(JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE, STRING_VALUE_OR_OBJECT_TYPE);\n    JSType NUMBER_VALUE_OR_OBJECT_TYPE \u003d createUnionType(NUMBER_OBJECT_TYPE, NUMBER_TYPE);\n    registerNativeType(JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE, NUMBER_VALUE_OR_OBJECT_TYPE);\n    FunctionType U2U_FUNCTION_TYPE \u003d createFunctionType(UNKNOWN_TYPE, true, UNKNOWN_TYPE);\n    registerNativeType(JSTypeNative.U2U_FUNCTION_TYPE, U2U_FUNCTION_TYPE);\n    FunctionType U2U_CONSTRUCTOR_TYPE \u003d new FunctionType(this, \"Function\", null, createArrowType(createParametersWithVarArgs(UNKNOWN_TYPE), UNKNOWN_TYPE), NO_OBJECT_TYPE, null, true, true) {\n\n        private static final long serialVersionUID \u003d 1L;\n\n        @Override\n        public FunctionType getConstructor() {\n            return registry.getNativeFunctionType(JSTypeNative.FUNCTION_FUNCTION_TYPE);\n        }\n    };\n    registerNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE, U2U_CONSTRUCTOR_TYPE);\n    registerNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE, U2U_CONSTRUCTOR_TYPE);\n    FUNCTION_FUNCTION_TYPE.setInstanceType(U2U_CONSTRUCTOR_TYPE);\n    U2U_CONSTRUCTOR_TYPE.setImplicitPrototype(FUNCTION_PROTOTYPE);\n    FunctionType LEAST_FUNCTION_TYPE \u003d createFunctionType(NO_TYPE, true, ALL_TYPE);\n    registerNativeType(JSTypeNative.LEAST_FUNCTION_TYPE, LEAST_FUNCTION_TYPE);\n    ObjectType GLOBAL_THIS \u003d createObjectType(\"global this\", null, UNKNOWN_TYPE);\n    registerNativeType(JSTypeNative.GLOBAL_THIS, GLOBAL_THIS);\n    FunctionType GREATEST_FUNCTION_TYPE \u003d createFunctionType(ALL_TYPE, true, NO_TYPE);\n    registerNativeType(JSTypeNative.GREATEST_FUNCTION_TYPE, GREATEST_FUNCTION_TYPE);\n    registerPropertyOnType(\"prototype\", OBJECT_FUNCTION_TYPE);\n}",
      "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
      "functionStartLine": 235,
      "functionName": "initializeBuiltInTypes",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,134 +1,135 @@\n private void initializeBuiltInTypes() {\n     BooleanType BOOLEAN_TYPE \u003d new BooleanType(this);\n     registerNativeType(JSTypeNative.BOOLEAN_TYPE, BOOLEAN_TYPE);\n     NullType NULL_TYPE \u003d new NullType(this);\n     registerNativeType(JSTypeNative.NULL_TYPE, NULL_TYPE);\n     NumberType NUMBER_TYPE \u003d new NumberType(this);\n     registerNativeType(JSTypeNative.NUMBER_TYPE, NUMBER_TYPE);\n     StringType STRING_TYPE \u003d new StringType(this);\n     registerNativeType(JSTypeNative.STRING_TYPE, STRING_TYPE);\n     UnknownType UNKNOWN_TYPE \u003d new UnknownType(this, false);\n     registerNativeType(JSTypeNative.UNKNOWN_TYPE, UNKNOWN_TYPE);\n     registerNativeType(JSTypeNative.CHECKED_UNKNOWN_TYPE, new UnknownType(this, true));\n     VoidType VOID_TYPE \u003d new VoidType(this);\n     registerNativeType(JSTypeNative.VOID_TYPE, VOID_TYPE);\n     AllType ALL_TYPE \u003d new AllType(this);\n     registerNativeType(JSTypeNative.ALL_TYPE, ALL_TYPE);\n     ObjectType TOP_LEVEL_PROTOTYPE \u003d new FunctionPrototypeType(this, null, null, true);\n     registerNativeType(JSTypeNative.TOP_LEVEL_PROTOTYPE, TOP_LEVEL_PROTOTYPE);\n     FunctionType OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Object\", null, createArrowType(createOptionalParameters(ALL_TYPE), UNKNOWN_TYPE), null, null, true, true);\n     OBJECT_FUNCTION_TYPE.defineDeclaredProperty(\"prototype\", TOP_LEVEL_PROTOTYPE, true);\n     registerNativeType(JSTypeNative.OBJECT_FUNCTION_TYPE, OBJECT_FUNCTION_TYPE);\n     ObjectType OBJECT_PROTOTYPE \u003d OBJECT_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.OBJECT_PROTOTYPE, OBJECT_PROTOTYPE);\n     ObjectType OBJECT_TYPE \u003d OBJECT_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.OBJECT_TYPE, OBJECT_TYPE);\n     FunctionType FUNCTION_FUNCTION_TYPE \u003d new FunctionType(this, \"Function\", null, createArrowType(createParametersWithVarArgs(ALL_TYPE), UNKNOWN_TYPE), null, null, true, true);\n     FUNCTION_FUNCTION_TYPE.setPrototypeBasedOn(OBJECT_TYPE);\n     registerNativeType(JSTypeNative.FUNCTION_FUNCTION_TYPE, FUNCTION_FUNCTION_TYPE);\n     ObjectType FUNCTION_PROTOTYPE \u003d FUNCTION_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.FUNCTION_PROTOTYPE, FUNCTION_PROTOTYPE);\n     NoType NO_TYPE \u003d new NoType(this);\n     registerNativeType(JSTypeNative.NO_TYPE, NO_TYPE);\n     NoObjectType NO_OBJECT_TYPE \u003d new NoObjectType(this);\n     registerNativeType(JSTypeNative.NO_OBJECT_TYPE, NO_OBJECT_TYPE);\n     FunctionType ARRAY_FUNCTION_TYPE \u003d new FunctionType(this, \"Array\", null, createArrowType(createParametersWithVarArgs(ALL_TYPE), null), null, null, true, true);\n     ARRAY_FUNCTION_TYPE.getInternalArrowType().returnType \u003d ARRAY_FUNCTION_TYPE.getInstanceType();\n     ObjectType arrayPrototype \u003d ARRAY_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.ARRAY_FUNCTION_TYPE, ARRAY_FUNCTION_TYPE);\n     ObjectType ARRAY_TYPE \u003d ARRAY_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.ARRAY_TYPE, ARRAY_TYPE);\n     FunctionType BOOLEAN_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Boolean\", null, createArrowType(createParameters(false, ALL_TYPE), BOOLEAN_TYPE), null, null, true, true);\n     ObjectType booleanPrototype \u003d BOOLEAN_OBJECT_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE, BOOLEAN_OBJECT_FUNCTION_TYPE);\n     ObjectType BOOLEAN_OBJECT_TYPE \u003d BOOLEAN_OBJECT_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.BOOLEAN_OBJECT_TYPE, BOOLEAN_OBJECT_TYPE);\n     FunctionType DATE_FUNCTION_TYPE \u003d new FunctionType(this, \"Date\", null, createArrowType(createOptionalParameters(UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE), STRING_TYPE), null, null, true, true);\n     ObjectType datePrototype \u003d DATE_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.DATE_FUNCTION_TYPE, DATE_FUNCTION_TYPE);\n     ObjectType DATE_TYPE \u003d DATE_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.DATE_TYPE, DATE_TYPE);\n     FunctionType ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"Error\");\n     registerNativeType(JSTypeNative.ERROR_FUNCTION_TYPE, ERROR_FUNCTION_TYPE);\n     ObjectType ERROR_TYPE \u003d ERROR_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.ERROR_TYPE, ERROR_TYPE);\n     FunctionType EVAL_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"EvalError\");\n     EVAL_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n     registerNativeType(JSTypeNative.EVAL_ERROR_FUNCTION_TYPE, EVAL_ERROR_FUNCTION_TYPE);\n     ObjectType EVAL_ERROR_TYPE \u003d EVAL_ERROR_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.EVAL_ERROR_TYPE, EVAL_ERROR_TYPE);\n     FunctionType RANGE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"RangeError\");\n     RANGE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n     registerNativeType(JSTypeNative.RANGE_ERROR_FUNCTION_TYPE, RANGE_ERROR_FUNCTION_TYPE);\n     ObjectType RANGE_ERROR_TYPE \u003d RANGE_ERROR_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.RANGE_ERROR_TYPE, RANGE_ERROR_TYPE);\n     FunctionType REFERENCE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"ReferenceError\");\n     REFERENCE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n     registerNativeType(JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE, REFERENCE_ERROR_FUNCTION_TYPE);\n     ObjectType REFERENCE_ERROR_TYPE \u003d REFERENCE_ERROR_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.REFERENCE_ERROR_TYPE, REFERENCE_ERROR_TYPE);\n     FunctionType SYNTAX_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"SyntaxError\");\n     SYNTAX_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n     registerNativeType(JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE, SYNTAX_ERROR_FUNCTION_TYPE);\n     ObjectType SYNTAX_ERROR_TYPE \u003d SYNTAX_ERROR_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.SYNTAX_ERROR_TYPE, SYNTAX_ERROR_TYPE);\n     FunctionType TYPE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"TypeError\");\n     TYPE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n     registerNativeType(JSTypeNative.TYPE_ERROR_FUNCTION_TYPE, TYPE_ERROR_FUNCTION_TYPE);\n     ObjectType TYPE_ERROR_TYPE \u003d TYPE_ERROR_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.TYPE_ERROR_TYPE, TYPE_ERROR_TYPE);\n     FunctionType URI_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"URIError\");\n     URI_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n     registerNativeType(JSTypeNative.URI_ERROR_FUNCTION_TYPE, URI_ERROR_FUNCTION_TYPE);\n     ObjectType URI_ERROR_TYPE \u003d URI_ERROR_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.URI_ERROR_TYPE, URI_ERROR_TYPE);\n     FunctionType NUMBER_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Number\", null, createArrowType(createParameters(false, ALL_TYPE), NUMBER_TYPE), null, null, true, true);\n     ObjectType numberPrototype \u003d NUMBER_OBJECT_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE, NUMBER_OBJECT_FUNCTION_TYPE);\n     ObjectType NUMBER_OBJECT_TYPE \u003d NUMBER_OBJECT_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.NUMBER_OBJECT_TYPE, NUMBER_OBJECT_TYPE);\n     FunctionType REGEXP_FUNCTION_TYPE \u003d new FunctionType(this, \"RegExp\", null, createArrowType(createOptionalParameters(ALL_TYPE, ALL_TYPE)), null, null, true, true);\n     REGEXP_FUNCTION_TYPE.getInternalArrowType().returnType \u003d REGEXP_FUNCTION_TYPE.getInstanceType();\n     ObjectType regexpPrototype \u003d REGEXP_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.REGEXP_FUNCTION_TYPE, REGEXP_FUNCTION_TYPE);\n     ObjectType REGEXP_TYPE \u003d REGEXP_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.REGEXP_TYPE, REGEXP_TYPE);\n     FunctionType STRING_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"String\", null, createArrowType(createParameters(false, ALL_TYPE), STRING_TYPE), null, null, true, true);\n     ObjectType stringPrototype \u003d STRING_OBJECT_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE, STRING_OBJECT_FUNCTION_TYPE);\n     ObjectType STRING_OBJECT_TYPE \u003d STRING_OBJECT_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.STRING_OBJECT_TYPE, STRING_OBJECT_TYPE);\n     JSType OBJECT_NUMBER_STRING \u003d createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE);\n     registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING, OBJECT_NUMBER_STRING);\n     JSType OBJECT_NUMBER_STRING_BOOLEAN \u003d createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n     registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN, OBJECT_NUMBER_STRING_BOOLEAN);\n     JSType NUMBER_STRING_BOOLEAN \u003d createUnionType(NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n     registerNativeType(JSTypeNative.NUMBER_STRING_BOOLEAN, NUMBER_STRING_BOOLEAN);\n     JSType NUMBER_STRING \u003d createUnionType(NUMBER_TYPE, STRING_TYPE);\n     registerNativeType(JSTypeNative.NUMBER_STRING, NUMBER_STRING);\n     JSType STRING_VALUE_OR_OBJECT_TYPE \u003d createUnionType(STRING_OBJECT_TYPE, STRING_TYPE);\n     registerNativeType(JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE, STRING_VALUE_OR_OBJECT_TYPE);\n     JSType NUMBER_VALUE_OR_OBJECT_TYPE \u003d createUnionType(NUMBER_OBJECT_TYPE, NUMBER_TYPE);\n     registerNativeType(JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE, NUMBER_VALUE_OR_OBJECT_TYPE);\n     FunctionType U2U_FUNCTION_TYPE \u003d createFunctionType(UNKNOWN_TYPE, true, UNKNOWN_TYPE);\n     registerNativeType(JSTypeNative.U2U_FUNCTION_TYPE, U2U_FUNCTION_TYPE);\n     FunctionType U2U_CONSTRUCTOR_TYPE \u003d new FunctionType(this, \"Function\", null, createArrowType(createParametersWithVarArgs(UNKNOWN_TYPE), UNKNOWN_TYPE), NO_OBJECT_TYPE, null, true, true) {\n \n         private static final long serialVersionUID \u003d 1L;\n \n         @Override\n         public FunctionType getConstructor() {\n             return registry.getNativeFunctionType(JSTypeNative.FUNCTION_FUNCTION_TYPE);\n         }\n     };\n     registerNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE, U2U_CONSTRUCTOR_TYPE);\n     registerNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE, U2U_CONSTRUCTOR_TYPE);\n     FUNCTION_FUNCTION_TYPE.setInstanceType(U2U_CONSTRUCTOR_TYPE);\n     U2U_CONSTRUCTOR_TYPE.setImplicitPrototype(FUNCTION_PROTOTYPE);\n     FunctionType LEAST_FUNCTION_TYPE \u003d createFunctionType(NO_TYPE, true, ALL_TYPE);\n     registerNativeType(JSTypeNative.LEAST_FUNCTION_TYPE, LEAST_FUNCTION_TYPE);\n     ObjectType GLOBAL_THIS \u003d createObjectType(\"global this\", null, UNKNOWN_TYPE);\n     registerNativeType(JSTypeNative.GLOBAL_THIS, GLOBAL_THIS);\n     FunctionType GREATEST_FUNCTION_TYPE \u003d createFunctionType(ALL_TYPE, true, NO_TYPE);\n     registerNativeType(JSTypeNative.GREATEST_FUNCTION_TYPE, GREATEST_FUNCTION_TYPE);\n+    registerPropertyOnType(\"prototype\", OBJECT_FUNCTION_TYPE);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e3bcc1c6e7ce7e9bfc3098cd5bf57774049f5baa": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/04/15 by nick\n\n        Move the construction of ArrowTypes out of FunctionType.\n\n        R\u003djohn\n        DELTA\u003d197  (79 added, 27 deleted, 91 changed)\n\nChange on 2010/04/15 by nick\n\n        if a file is marked as an @extern, then make it an extern.\n\n        R\u003drobert\n        DELTA\u003d51  (46 added, 0 deleted, 5 changed)\n\nChange on 2010/04/15 by john\n\n        Maintain source information.\n\n        R\u003dalan\n        DELTA\u003d60  (28 added, 7 deleted, 25 changed)\n\nChange on 2010/04/15 by john\n\n        Fix overly aggressive RegExp check.\n\n        R\u003dalan\n        DELTA\u003d15  (12 added, 0 deleted, 3 changed)\n\nChange on 2010/04/15 by nick\n\n        more fun with function-type building.\n\n        R\u003djohn\n        DELTA\u003d432  (206 added, 142 deleted, 84 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003doqlcyn\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@186 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/15/10, 4:45 PM",
      "commitName": "e3bcc1c6e7ce7e9bfc3098cd5bf57774049f5baa",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/14/10, 4:53 PM",
      "commitNameOld": "43859717972907dd1ecebd8dca6e05036386e28b",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 0.99,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "private void initializeBuiltInTypes() {\n    BooleanType BOOLEAN_TYPE \u003d new BooleanType(this);\n    registerNativeType(JSTypeNative.BOOLEAN_TYPE, BOOLEAN_TYPE);\n    NullType NULL_TYPE \u003d new NullType(this);\n    registerNativeType(JSTypeNative.NULL_TYPE, NULL_TYPE);\n    NumberType NUMBER_TYPE \u003d new NumberType(this);\n    registerNativeType(JSTypeNative.NUMBER_TYPE, NUMBER_TYPE);\n    StringType STRING_TYPE \u003d new StringType(this);\n    registerNativeType(JSTypeNative.STRING_TYPE, STRING_TYPE);\n    UnknownType UNKNOWN_TYPE \u003d new UnknownType(this, false);\n    registerNativeType(JSTypeNative.UNKNOWN_TYPE, UNKNOWN_TYPE);\n    registerNativeType(JSTypeNative.CHECKED_UNKNOWN_TYPE, new UnknownType(this, true));\n    VoidType VOID_TYPE \u003d new VoidType(this);\n    registerNativeType(JSTypeNative.VOID_TYPE, VOID_TYPE);\n    AllType ALL_TYPE \u003d new AllType(this);\n    registerNativeType(JSTypeNative.ALL_TYPE, ALL_TYPE);\n    ObjectType TOP_LEVEL_PROTOTYPE \u003d new FunctionPrototypeType(this, null, null, true);\n    registerNativeType(JSTypeNative.TOP_LEVEL_PROTOTYPE, TOP_LEVEL_PROTOTYPE);\n    FunctionType OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Object\", null, createArrowType(createOptionalParameters(ALL_TYPE), UNKNOWN_TYPE), null, null, true, true);\n    OBJECT_FUNCTION_TYPE.defineDeclaredProperty(\"prototype\", TOP_LEVEL_PROTOTYPE, true);\n    registerNativeType(JSTypeNative.OBJECT_FUNCTION_TYPE, OBJECT_FUNCTION_TYPE);\n    ObjectType OBJECT_PROTOTYPE \u003d OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.OBJECT_PROTOTYPE, OBJECT_PROTOTYPE);\n    ObjectType OBJECT_TYPE \u003d OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.OBJECT_TYPE, OBJECT_TYPE);\n    FunctionType FUNCTION_FUNCTION_TYPE \u003d new FunctionType(this, \"Function\", null, createArrowType(createParametersWithVarArgs(ALL_TYPE), UNKNOWN_TYPE), null, null, true, true);\n    FUNCTION_FUNCTION_TYPE.setPrototypeBasedOn(OBJECT_TYPE);\n    registerNativeType(JSTypeNative.FUNCTION_FUNCTION_TYPE, FUNCTION_FUNCTION_TYPE);\n    ObjectType FUNCTION_PROTOTYPE \u003d FUNCTION_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.FUNCTION_PROTOTYPE, FUNCTION_PROTOTYPE);\n    NoType NO_TYPE \u003d new NoType(this);\n    registerNativeType(JSTypeNative.NO_TYPE, NO_TYPE);\n    NoObjectType NO_OBJECT_TYPE \u003d new NoObjectType(this);\n    registerNativeType(JSTypeNative.NO_OBJECT_TYPE, NO_OBJECT_TYPE);\n    FunctionType ARRAY_FUNCTION_TYPE \u003d new FunctionType(this, \"Array\", null, createArrowType(createParametersWithVarArgs(ALL_TYPE), null), null, null, true, true);\n    ARRAY_FUNCTION_TYPE.getInternalArrowType().returnType \u003d ARRAY_FUNCTION_TYPE.getInstanceType();\n    ObjectType arrayPrototype \u003d ARRAY_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.ARRAY_FUNCTION_TYPE, ARRAY_FUNCTION_TYPE);\n    ObjectType ARRAY_TYPE \u003d ARRAY_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.ARRAY_TYPE, ARRAY_TYPE);\n    FunctionType BOOLEAN_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Boolean\", null, createArrowType(createParameters(false, ALL_TYPE), BOOLEAN_TYPE), null, null, true, true);\n    ObjectType booleanPrototype \u003d BOOLEAN_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE, BOOLEAN_OBJECT_FUNCTION_TYPE);\n    ObjectType BOOLEAN_OBJECT_TYPE \u003d BOOLEAN_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.BOOLEAN_OBJECT_TYPE, BOOLEAN_OBJECT_TYPE);\n    FunctionType DATE_FUNCTION_TYPE \u003d new FunctionType(this, \"Date\", null, createArrowType(createOptionalParameters(UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE), STRING_TYPE), null, null, true, true);\n    ObjectType datePrototype \u003d DATE_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.DATE_FUNCTION_TYPE, DATE_FUNCTION_TYPE);\n    ObjectType DATE_TYPE \u003d DATE_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.DATE_TYPE, DATE_TYPE);\n    FunctionType ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"Error\");\n    registerNativeType(JSTypeNative.ERROR_FUNCTION_TYPE, ERROR_FUNCTION_TYPE);\n    ObjectType ERROR_TYPE \u003d ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.ERROR_TYPE, ERROR_TYPE);\n    FunctionType EVAL_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"EvalError\");\n    EVAL_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.EVAL_ERROR_FUNCTION_TYPE, EVAL_ERROR_FUNCTION_TYPE);\n    ObjectType EVAL_ERROR_TYPE \u003d EVAL_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.EVAL_ERROR_TYPE, EVAL_ERROR_TYPE);\n    FunctionType RANGE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"RangeError\");\n    RANGE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.RANGE_ERROR_FUNCTION_TYPE, RANGE_ERROR_FUNCTION_TYPE);\n    ObjectType RANGE_ERROR_TYPE \u003d RANGE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.RANGE_ERROR_TYPE, RANGE_ERROR_TYPE);\n    FunctionType REFERENCE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"ReferenceError\");\n    REFERENCE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE, REFERENCE_ERROR_FUNCTION_TYPE);\n    ObjectType REFERENCE_ERROR_TYPE \u003d REFERENCE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.REFERENCE_ERROR_TYPE, REFERENCE_ERROR_TYPE);\n    FunctionType SYNTAX_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"SyntaxError\");\n    SYNTAX_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE, SYNTAX_ERROR_FUNCTION_TYPE);\n    ObjectType SYNTAX_ERROR_TYPE \u003d SYNTAX_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.SYNTAX_ERROR_TYPE, SYNTAX_ERROR_TYPE);\n    FunctionType TYPE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"TypeError\");\n    TYPE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.TYPE_ERROR_FUNCTION_TYPE, TYPE_ERROR_FUNCTION_TYPE);\n    ObjectType TYPE_ERROR_TYPE \u003d TYPE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.TYPE_ERROR_TYPE, TYPE_ERROR_TYPE);\n    FunctionType URI_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"URIError\");\n    URI_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.URI_ERROR_FUNCTION_TYPE, URI_ERROR_FUNCTION_TYPE);\n    ObjectType URI_ERROR_TYPE \u003d URI_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.URI_ERROR_TYPE, URI_ERROR_TYPE);\n    FunctionType NUMBER_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Number\", null, createArrowType(createParameters(false, ALL_TYPE), NUMBER_TYPE), null, null, true, true);\n    ObjectType numberPrototype \u003d NUMBER_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE, NUMBER_OBJECT_FUNCTION_TYPE);\n    ObjectType NUMBER_OBJECT_TYPE \u003d NUMBER_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.NUMBER_OBJECT_TYPE, NUMBER_OBJECT_TYPE);\n    FunctionType REGEXP_FUNCTION_TYPE \u003d new FunctionType(this, \"RegExp\", null, createArrowType(createOptionalParameters(ALL_TYPE, ALL_TYPE)), null, null, true, true);\n    REGEXP_FUNCTION_TYPE.getInternalArrowType().returnType \u003d REGEXP_FUNCTION_TYPE.getInstanceType();\n    ObjectType regexpPrototype \u003d REGEXP_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.REGEXP_FUNCTION_TYPE, REGEXP_FUNCTION_TYPE);\n    ObjectType REGEXP_TYPE \u003d REGEXP_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.REGEXP_TYPE, REGEXP_TYPE);\n    FunctionType STRING_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"String\", null, createArrowType(createParameters(false, ALL_TYPE), STRING_TYPE), null, null, true, true);\n    ObjectType stringPrototype \u003d STRING_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE, STRING_OBJECT_FUNCTION_TYPE);\n    ObjectType STRING_OBJECT_TYPE \u003d STRING_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.STRING_OBJECT_TYPE, STRING_OBJECT_TYPE);\n    JSType OBJECT_NUMBER_STRING \u003d createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE);\n    registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING, OBJECT_NUMBER_STRING);\n    JSType OBJECT_NUMBER_STRING_BOOLEAN \u003d createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n    registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN, OBJECT_NUMBER_STRING_BOOLEAN);\n    JSType NUMBER_STRING_BOOLEAN \u003d createUnionType(NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n    registerNativeType(JSTypeNative.NUMBER_STRING_BOOLEAN, NUMBER_STRING_BOOLEAN);\n    JSType NUMBER_STRING \u003d createUnionType(NUMBER_TYPE, STRING_TYPE);\n    registerNativeType(JSTypeNative.NUMBER_STRING, NUMBER_STRING);\n    JSType STRING_VALUE_OR_OBJECT_TYPE \u003d createUnionType(STRING_OBJECT_TYPE, STRING_TYPE);\n    registerNativeType(JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE, STRING_VALUE_OR_OBJECT_TYPE);\n    JSType NUMBER_VALUE_OR_OBJECT_TYPE \u003d createUnionType(NUMBER_OBJECT_TYPE, NUMBER_TYPE);\n    registerNativeType(JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE, NUMBER_VALUE_OR_OBJECT_TYPE);\n    FunctionType U2U_FUNCTION_TYPE \u003d createFunctionType(UNKNOWN_TYPE, true, UNKNOWN_TYPE);\n    registerNativeType(JSTypeNative.U2U_FUNCTION_TYPE, U2U_FUNCTION_TYPE);\n    FunctionType U2U_CONSTRUCTOR_TYPE \u003d new FunctionType(this, \"Function\", null, createArrowType(createParametersWithVarArgs(UNKNOWN_TYPE), UNKNOWN_TYPE), NO_OBJECT_TYPE, null, true, true) {\n\n        private static final long serialVersionUID \u003d 1L;\n\n        @Override\n        public FunctionType getConstructor() {\n            return registry.getNativeFunctionType(JSTypeNative.FUNCTION_FUNCTION_TYPE);\n        }\n    };\n    registerNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE, U2U_CONSTRUCTOR_TYPE);\n    registerNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE, U2U_CONSTRUCTOR_TYPE);\n    FUNCTION_FUNCTION_TYPE.setInstanceType(U2U_CONSTRUCTOR_TYPE);\n    U2U_CONSTRUCTOR_TYPE.setImplicitPrototype(FUNCTION_PROTOTYPE);\n    FunctionType LEAST_FUNCTION_TYPE \u003d createFunctionType(NO_TYPE, true, ALL_TYPE);\n    registerNativeType(JSTypeNative.LEAST_FUNCTION_TYPE, LEAST_FUNCTION_TYPE);\n    ObjectType GLOBAL_THIS \u003d createObjectType(\"global this\", null, UNKNOWN_TYPE);\n    registerNativeType(JSTypeNative.GLOBAL_THIS, GLOBAL_THIS);\n    FunctionType GREATEST_FUNCTION_TYPE \u003d createFunctionType(ALL_TYPE, true, NO_TYPE);\n    registerNativeType(JSTypeNative.GREATEST_FUNCTION_TYPE, GREATEST_FUNCTION_TYPE);\n}",
      "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
      "functionStartLine": 180,
      "functionName": "initializeBuiltInTypes",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,148 +1,134 @@\n private void initializeBuiltInTypes() {\n     BooleanType BOOLEAN_TYPE \u003d new BooleanType(this);\n     registerNativeType(JSTypeNative.BOOLEAN_TYPE, BOOLEAN_TYPE);\n     NullType NULL_TYPE \u003d new NullType(this);\n     registerNativeType(JSTypeNative.NULL_TYPE, NULL_TYPE);\n     NumberType NUMBER_TYPE \u003d new NumberType(this);\n     registerNativeType(JSTypeNative.NUMBER_TYPE, NUMBER_TYPE);\n     StringType STRING_TYPE \u003d new StringType(this);\n     registerNativeType(JSTypeNative.STRING_TYPE, STRING_TYPE);\n     UnknownType UNKNOWN_TYPE \u003d new UnknownType(this, false);\n     registerNativeType(JSTypeNative.UNKNOWN_TYPE, UNKNOWN_TYPE);\n     registerNativeType(JSTypeNative.CHECKED_UNKNOWN_TYPE, new UnknownType(this, true));\n     VoidType VOID_TYPE \u003d new VoidType(this);\n     registerNativeType(JSTypeNative.VOID_TYPE, VOID_TYPE);\n     AllType ALL_TYPE \u003d new AllType(this);\n     registerNativeType(JSTypeNative.ALL_TYPE, ALL_TYPE);\n     ObjectType TOP_LEVEL_PROTOTYPE \u003d new FunctionPrototypeType(this, null, null, true);\n     registerNativeType(JSTypeNative.TOP_LEVEL_PROTOTYPE, TOP_LEVEL_PROTOTYPE);\n-    FunctionType OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Object\", null, createOptionalParameters(ALL_TYPE), UNKNOWN_TYPE, null, null, true, true);\n+    FunctionType OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Object\", null, createArrowType(createOptionalParameters(ALL_TYPE), UNKNOWN_TYPE), null, null, true, true);\n     OBJECT_FUNCTION_TYPE.defineDeclaredProperty(\"prototype\", TOP_LEVEL_PROTOTYPE, true);\n     registerNativeType(JSTypeNative.OBJECT_FUNCTION_TYPE, OBJECT_FUNCTION_TYPE);\n     ObjectType OBJECT_PROTOTYPE \u003d OBJECT_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.OBJECT_PROTOTYPE, OBJECT_PROTOTYPE);\n     ObjectType OBJECT_TYPE \u003d OBJECT_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.OBJECT_TYPE, OBJECT_TYPE);\n-    FunctionType FUNCTION_FUNCTION_TYPE \u003d new FunctionType(this, \"Function\", null, createParametersWithVarArgs(ALL_TYPE), UNKNOWN_TYPE, null, null, true, true);\n+    FunctionType FUNCTION_FUNCTION_TYPE \u003d new FunctionType(this, \"Function\", null, createArrowType(createParametersWithVarArgs(ALL_TYPE), UNKNOWN_TYPE), null, null, true, true);\n     FUNCTION_FUNCTION_TYPE.setPrototypeBasedOn(OBJECT_TYPE);\n     registerNativeType(JSTypeNative.FUNCTION_FUNCTION_TYPE, FUNCTION_FUNCTION_TYPE);\n     ObjectType FUNCTION_PROTOTYPE \u003d FUNCTION_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.FUNCTION_PROTOTYPE, FUNCTION_PROTOTYPE);\n     NoType NO_TYPE \u003d new NoType(this);\n     registerNativeType(JSTypeNative.NO_TYPE, NO_TYPE);\n     NoObjectType NO_OBJECT_TYPE \u003d new NoObjectType(this);\n     registerNativeType(JSTypeNative.NO_OBJECT_TYPE, NO_OBJECT_TYPE);\n-    FunctionType ARRAY_FUNCTION_TYPE \u003d new FunctionType(this, \"Array\", null, createParametersWithVarArgs(ALL_TYPE), null, null, null, true, true) {\n-\n-        private static final long serialVersionUID \u003d 1L;\n-\n-        @Override\n-        public JSType getReturnType() {\n-            return getInstanceType();\n-        }\n-    };\n+    FunctionType ARRAY_FUNCTION_TYPE \u003d new FunctionType(this, \"Array\", null, createArrowType(createParametersWithVarArgs(ALL_TYPE), null), null, null, true, true);\n+    ARRAY_FUNCTION_TYPE.getInternalArrowType().returnType \u003d ARRAY_FUNCTION_TYPE.getInstanceType();\n     ObjectType arrayPrototype \u003d ARRAY_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.ARRAY_FUNCTION_TYPE, ARRAY_FUNCTION_TYPE);\n     ObjectType ARRAY_TYPE \u003d ARRAY_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.ARRAY_TYPE, ARRAY_TYPE);\n-    FunctionType BOOLEAN_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Boolean\", null, createParameters(false, ALL_TYPE), BOOLEAN_TYPE, null, null, true, true);\n+    FunctionType BOOLEAN_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Boolean\", null, createArrowType(createParameters(false, ALL_TYPE), BOOLEAN_TYPE), null, null, true, true);\n     ObjectType booleanPrototype \u003d BOOLEAN_OBJECT_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE, BOOLEAN_OBJECT_FUNCTION_TYPE);\n     ObjectType BOOLEAN_OBJECT_TYPE \u003d BOOLEAN_OBJECT_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.BOOLEAN_OBJECT_TYPE, BOOLEAN_OBJECT_TYPE);\n-    FunctionType DATE_FUNCTION_TYPE \u003d new FunctionType(this, \"Date\", null, createOptionalParameters(UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE), STRING_TYPE, null, null, true, true);\n+    FunctionType DATE_FUNCTION_TYPE \u003d new FunctionType(this, \"Date\", null, createArrowType(createOptionalParameters(UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE), STRING_TYPE), null, null, true, true);\n     ObjectType datePrototype \u003d DATE_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.DATE_FUNCTION_TYPE, DATE_FUNCTION_TYPE);\n     ObjectType DATE_TYPE \u003d DATE_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.DATE_TYPE, DATE_TYPE);\n     FunctionType ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"Error\");\n     registerNativeType(JSTypeNative.ERROR_FUNCTION_TYPE, ERROR_FUNCTION_TYPE);\n     ObjectType ERROR_TYPE \u003d ERROR_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.ERROR_TYPE, ERROR_TYPE);\n     FunctionType EVAL_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"EvalError\");\n     EVAL_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n     registerNativeType(JSTypeNative.EVAL_ERROR_FUNCTION_TYPE, EVAL_ERROR_FUNCTION_TYPE);\n     ObjectType EVAL_ERROR_TYPE \u003d EVAL_ERROR_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.EVAL_ERROR_TYPE, EVAL_ERROR_TYPE);\n     FunctionType RANGE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"RangeError\");\n     RANGE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n     registerNativeType(JSTypeNative.RANGE_ERROR_FUNCTION_TYPE, RANGE_ERROR_FUNCTION_TYPE);\n     ObjectType RANGE_ERROR_TYPE \u003d RANGE_ERROR_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.RANGE_ERROR_TYPE, RANGE_ERROR_TYPE);\n     FunctionType REFERENCE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"ReferenceError\");\n     REFERENCE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n     registerNativeType(JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE, REFERENCE_ERROR_FUNCTION_TYPE);\n     ObjectType REFERENCE_ERROR_TYPE \u003d REFERENCE_ERROR_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.REFERENCE_ERROR_TYPE, REFERENCE_ERROR_TYPE);\n     FunctionType SYNTAX_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"SyntaxError\");\n     SYNTAX_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n     registerNativeType(JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE, SYNTAX_ERROR_FUNCTION_TYPE);\n     ObjectType SYNTAX_ERROR_TYPE \u003d SYNTAX_ERROR_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.SYNTAX_ERROR_TYPE, SYNTAX_ERROR_TYPE);\n     FunctionType TYPE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"TypeError\");\n     TYPE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n     registerNativeType(JSTypeNative.TYPE_ERROR_FUNCTION_TYPE, TYPE_ERROR_FUNCTION_TYPE);\n     ObjectType TYPE_ERROR_TYPE \u003d TYPE_ERROR_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.TYPE_ERROR_TYPE, TYPE_ERROR_TYPE);\n     FunctionType URI_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"URIError\");\n     URI_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n     registerNativeType(JSTypeNative.URI_ERROR_FUNCTION_TYPE, URI_ERROR_FUNCTION_TYPE);\n     ObjectType URI_ERROR_TYPE \u003d URI_ERROR_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.URI_ERROR_TYPE, URI_ERROR_TYPE);\n-    FunctionType NUMBER_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Number\", null, createParameters(false, ALL_TYPE), NUMBER_TYPE, null, null, true, true);\n+    FunctionType NUMBER_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Number\", null, createArrowType(createParameters(false, ALL_TYPE), NUMBER_TYPE), null, null, true, true);\n     ObjectType numberPrototype \u003d NUMBER_OBJECT_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE, NUMBER_OBJECT_FUNCTION_TYPE);\n     ObjectType NUMBER_OBJECT_TYPE \u003d NUMBER_OBJECT_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.NUMBER_OBJECT_TYPE, NUMBER_OBJECT_TYPE);\n-    FunctionType REGEXP_FUNCTION_TYPE \u003d new FunctionType(this, \"RegExp\", null, createOptionalParameters(ALL_TYPE, ALL_TYPE), null, null, null, true, true) {\n-\n-        private static final long serialVersionUID \u003d 1L;\n-\n-        @Override\n-        public JSType getReturnType() {\n-            return getInstanceType();\n-        }\n-    };\n+    FunctionType REGEXP_FUNCTION_TYPE \u003d new FunctionType(this, \"RegExp\", null, createArrowType(createOptionalParameters(ALL_TYPE, ALL_TYPE)), null, null, true, true);\n+    REGEXP_FUNCTION_TYPE.getInternalArrowType().returnType \u003d REGEXP_FUNCTION_TYPE.getInstanceType();\n     ObjectType regexpPrototype \u003d REGEXP_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.REGEXP_FUNCTION_TYPE, REGEXP_FUNCTION_TYPE);\n     ObjectType REGEXP_TYPE \u003d REGEXP_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.REGEXP_TYPE, REGEXP_TYPE);\n-    FunctionType STRING_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"String\", null, createParameters(false, ALL_TYPE), STRING_TYPE, null, null, true, true);\n+    FunctionType STRING_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"String\", null, createArrowType(createParameters(false, ALL_TYPE), STRING_TYPE), null, null, true, true);\n     ObjectType stringPrototype \u003d STRING_OBJECT_FUNCTION_TYPE.getPrototype();\n     registerNativeType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE, STRING_OBJECT_FUNCTION_TYPE);\n     ObjectType STRING_OBJECT_TYPE \u003d STRING_OBJECT_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.STRING_OBJECT_TYPE, STRING_OBJECT_TYPE);\n     JSType OBJECT_NUMBER_STRING \u003d createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE);\n     registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING, OBJECT_NUMBER_STRING);\n     JSType OBJECT_NUMBER_STRING_BOOLEAN \u003d createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n     registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN, OBJECT_NUMBER_STRING_BOOLEAN);\n     JSType NUMBER_STRING_BOOLEAN \u003d createUnionType(NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n     registerNativeType(JSTypeNative.NUMBER_STRING_BOOLEAN, NUMBER_STRING_BOOLEAN);\n     JSType NUMBER_STRING \u003d createUnionType(NUMBER_TYPE, STRING_TYPE);\n     registerNativeType(JSTypeNative.NUMBER_STRING, NUMBER_STRING);\n     JSType STRING_VALUE_OR_OBJECT_TYPE \u003d createUnionType(STRING_OBJECT_TYPE, STRING_TYPE);\n     registerNativeType(JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE, STRING_VALUE_OR_OBJECT_TYPE);\n     JSType NUMBER_VALUE_OR_OBJECT_TYPE \u003d createUnionType(NUMBER_OBJECT_TYPE, NUMBER_TYPE);\n     registerNativeType(JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE, NUMBER_VALUE_OR_OBJECT_TYPE);\n     FunctionType U2U_FUNCTION_TYPE \u003d createFunctionType(UNKNOWN_TYPE, true, UNKNOWN_TYPE);\n     registerNativeType(JSTypeNative.U2U_FUNCTION_TYPE, U2U_FUNCTION_TYPE);\n-    FunctionType U2U_CONSTRUCTOR_TYPE \u003d new FunctionType(this, \"Function\", null, createParametersWithVarArgs(UNKNOWN_TYPE), UNKNOWN_TYPE, NO_OBJECT_TYPE, null, true, true) {\n+    FunctionType U2U_CONSTRUCTOR_TYPE \u003d new FunctionType(this, \"Function\", null, createArrowType(createParametersWithVarArgs(UNKNOWN_TYPE), UNKNOWN_TYPE), NO_OBJECT_TYPE, null, true, true) {\n \n         private static final long serialVersionUID \u003d 1L;\n \n         @Override\n         public FunctionType getConstructor() {\n             return registry.getNativeFunctionType(JSTypeNative.FUNCTION_FUNCTION_TYPE);\n         }\n     };\n     registerNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE, U2U_CONSTRUCTOR_TYPE);\n     registerNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE, U2U_CONSTRUCTOR_TYPE);\n     FUNCTION_FUNCTION_TYPE.setInstanceType(U2U_CONSTRUCTOR_TYPE);\n     U2U_CONSTRUCTOR_TYPE.setImplicitPrototype(FUNCTION_PROTOTYPE);\n     FunctionType LEAST_FUNCTION_TYPE \u003d createFunctionType(NO_TYPE, true, ALL_TYPE);\n     registerNativeType(JSTypeNative.LEAST_FUNCTION_TYPE, LEAST_FUNCTION_TYPE);\n     ObjectType GLOBAL_THIS \u003d createObjectType(\"global this\", null, UNKNOWN_TYPE);\n     registerNativeType(JSTypeNative.GLOBAL_THIS, GLOBAL_THIS);\n     FunctionType GREATEST_FUNCTION_TYPE \u003d createFunctionType(ALL_TYPE, true, NO_TYPE);\n     registerNativeType(JSTypeNative.GREATEST_FUNCTION_TYPE, GREATEST_FUNCTION_TYPE);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,148 @@\n+private void initializeBuiltInTypes() {\n+    BooleanType BOOLEAN_TYPE \u003d new BooleanType(this);\n+    registerNativeType(JSTypeNative.BOOLEAN_TYPE, BOOLEAN_TYPE);\n+    NullType NULL_TYPE \u003d new NullType(this);\n+    registerNativeType(JSTypeNative.NULL_TYPE, NULL_TYPE);\n+    NumberType NUMBER_TYPE \u003d new NumberType(this);\n+    registerNativeType(JSTypeNative.NUMBER_TYPE, NUMBER_TYPE);\n+    StringType STRING_TYPE \u003d new StringType(this);\n+    registerNativeType(JSTypeNative.STRING_TYPE, STRING_TYPE);\n+    UnknownType UNKNOWN_TYPE \u003d new UnknownType(this, false);\n+    registerNativeType(JSTypeNative.UNKNOWN_TYPE, UNKNOWN_TYPE);\n+    registerNativeType(JSTypeNative.CHECKED_UNKNOWN_TYPE, new UnknownType(this, true));\n+    VoidType VOID_TYPE \u003d new VoidType(this);\n+    registerNativeType(JSTypeNative.VOID_TYPE, VOID_TYPE);\n+    AllType ALL_TYPE \u003d new AllType(this);\n+    registerNativeType(JSTypeNative.ALL_TYPE, ALL_TYPE);\n+    ObjectType TOP_LEVEL_PROTOTYPE \u003d new FunctionPrototypeType(this, null, null, true);\n+    registerNativeType(JSTypeNative.TOP_LEVEL_PROTOTYPE, TOP_LEVEL_PROTOTYPE);\n+    FunctionType OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Object\", null, createOptionalParameters(ALL_TYPE), UNKNOWN_TYPE, null, null, true, true);\n+    OBJECT_FUNCTION_TYPE.defineDeclaredProperty(\"prototype\", TOP_LEVEL_PROTOTYPE, true);\n+    registerNativeType(JSTypeNative.OBJECT_FUNCTION_TYPE, OBJECT_FUNCTION_TYPE);\n+    ObjectType OBJECT_PROTOTYPE \u003d OBJECT_FUNCTION_TYPE.getPrototype();\n+    registerNativeType(JSTypeNative.OBJECT_PROTOTYPE, OBJECT_PROTOTYPE);\n+    ObjectType OBJECT_TYPE \u003d OBJECT_FUNCTION_TYPE.getInstanceType();\n+    registerNativeType(JSTypeNative.OBJECT_TYPE, OBJECT_TYPE);\n+    FunctionType FUNCTION_FUNCTION_TYPE \u003d new FunctionType(this, \"Function\", null, createParametersWithVarArgs(ALL_TYPE), UNKNOWN_TYPE, null, null, true, true);\n+    FUNCTION_FUNCTION_TYPE.setPrototypeBasedOn(OBJECT_TYPE);\n+    registerNativeType(JSTypeNative.FUNCTION_FUNCTION_TYPE, FUNCTION_FUNCTION_TYPE);\n+    ObjectType FUNCTION_PROTOTYPE \u003d FUNCTION_FUNCTION_TYPE.getPrototype();\n+    registerNativeType(JSTypeNative.FUNCTION_PROTOTYPE, FUNCTION_PROTOTYPE);\n+    NoType NO_TYPE \u003d new NoType(this);\n+    registerNativeType(JSTypeNative.NO_TYPE, NO_TYPE);\n+    NoObjectType NO_OBJECT_TYPE \u003d new NoObjectType(this);\n+    registerNativeType(JSTypeNative.NO_OBJECT_TYPE, NO_OBJECT_TYPE);\n+    FunctionType ARRAY_FUNCTION_TYPE \u003d new FunctionType(this, \"Array\", null, createParametersWithVarArgs(ALL_TYPE), null, null, null, true, true) {\n+\n+        private static final long serialVersionUID \u003d 1L;\n+\n+        @Override\n+        public JSType getReturnType() {\n+            return getInstanceType();\n+        }\n+    };\n+    ObjectType arrayPrototype \u003d ARRAY_FUNCTION_TYPE.getPrototype();\n+    registerNativeType(JSTypeNative.ARRAY_FUNCTION_TYPE, ARRAY_FUNCTION_TYPE);\n+    ObjectType ARRAY_TYPE \u003d ARRAY_FUNCTION_TYPE.getInstanceType();\n+    registerNativeType(JSTypeNative.ARRAY_TYPE, ARRAY_TYPE);\n+    FunctionType BOOLEAN_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Boolean\", null, createParameters(false, ALL_TYPE), BOOLEAN_TYPE, null, null, true, true);\n+    ObjectType booleanPrototype \u003d BOOLEAN_OBJECT_FUNCTION_TYPE.getPrototype();\n+    registerNativeType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE, BOOLEAN_OBJECT_FUNCTION_TYPE);\n+    ObjectType BOOLEAN_OBJECT_TYPE \u003d BOOLEAN_OBJECT_FUNCTION_TYPE.getInstanceType();\n+    registerNativeType(JSTypeNative.BOOLEAN_OBJECT_TYPE, BOOLEAN_OBJECT_TYPE);\n+    FunctionType DATE_FUNCTION_TYPE \u003d new FunctionType(this, \"Date\", null, createOptionalParameters(UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE), STRING_TYPE, null, null, true, true);\n+    ObjectType datePrototype \u003d DATE_FUNCTION_TYPE.getPrototype();\n+    registerNativeType(JSTypeNative.DATE_FUNCTION_TYPE, DATE_FUNCTION_TYPE);\n+    ObjectType DATE_TYPE \u003d DATE_FUNCTION_TYPE.getInstanceType();\n+    registerNativeType(JSTypeNative.DATE_TYPE, DATE_TYPE);\n+    FunctionType ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"Error\");\n+    registerNativeType(JSTypeNative.ERROR_FUNCTION_TYPE, ERROR_FUNCTION_TYPE);\n+    ObjectType ERROR_TYPE \u003d ERROR_FUNCTION_TYPE.getInstanceType();\n+    registerNativeType(JSTypeNative.ERROR_TYPE, ERROR_TYPE);\n+    FunctionType EVAL_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"EvalError\");\n+    EVAL_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n+    registerNativeType(JSTypeNative.EVAL_ERROR_FUNCTION_TYPE, EVAL_ERROR_FUNCTION_TYPE);\n+    ObjectType EVAL_ERROR_TYPE \u003d EVAL_ERROR_FUNCTION_TYPE.getInstanceType();\n+    registerNativeType(JSTypeNative.EVAL_ERROR_TYPE, EVAL_ERROR_TYPE);\n+    FunctionType RANGE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"RangeError\");\n+    RANGE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n+    registerNativeType(JSTypeNative.RANGE_ERROR_FUNCTION_TYPE, RANGE_ERROR_FUNCTION_TYPE);\n+    ObjectType RANGE_ERROR_TYPE \u003d RANGE_ERROR_FUNCTION_TYPE.getInstanceType();\n+    registerNativeType(JSTypeNative.RANGE_ERROR_TYPE, RANGE_ERROR_TYPE);\n+    FunctionType REFERENCE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"ReferenceError\");\n+    REFERENCE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n+    registerNativeType(JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE, REFERENCE_ERROR_FUNCTION_TYPE);\n+    ObjectType REFERENCE_ERROR_TYPE \u003d REFERENCE_ERROR_FUNCTION_TYPE.getInstanceType();\n+    registerNativeType(JSTypeNative.REFERENCE_ERROR_TYPE, REFERENCE_ERROR_TYPE);\n+    FunctionType SYNTAX_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"SyntaxError\");\n+    SYNTAX_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n+    registerNativeType(JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE, SYNTAX_ERROR_FUNCTION_TYPE);\n+    ObjectType SYNTAX_ERROR_TYPE \u003d SYNTAX_ERROR_FUNCTION_TYPE.getInstanceType();\n+    registerNativeType(JSTypeNative.SYNTAX_ERROR_TYPE, SYNTAX_ERROR_TYPE);\n+    FunctionType TYPE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"TypeError\");\n+    TYPE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n+    registerNativeType(JSTypeNative.TYPE_ERROR_FUNCTION_TYPE, TYPE_ERROR_FUNCTION_TYPE);\n+    ObjectType TYPE_ERROR_TYPE \u003d TYPE_ERROR_FUNCTION_TYPE.getInstanceType();\n+    registerNativeType(JSTypeNative.TYPE_ERROR_TYPE, TYPE_ERROR_TYPE);\n+    FunctionType URI_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"URIError\");\n+    URI_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n+    registerNativeType(JSTypeNative.URI_ERROR_FUNCTION_TYPE, URI_ERROR_FUNCTION_TYPE);\n+    ObjectType URI_ERROR_TYPE \u003d URI_ERROR_FUNCTION_TYPE.getInstanceType();\n+    registerNativeType(JSTypeNative.URI_ERROR_TYPE, URI_ERROR_TYPE);\n+    FunctionType NUMBER_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Number\", null, createParameters(false, ALL_TYPE), NUMBER_TYPE, null, null, true, true);\n+    ObjectType numberPrototype \u003d NUMBER_OBJECT_FUNCTION_TYPE.getPrototype();\n+    registerNativeType(JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE, NUMBER_OBJECT_FUNCTION_TYPE);\n+    ObjectType NUMBER_OBJECT_TYPE \u003d NUMBER_OBJECT_FUNCTION_TYPE.getInstanceType();\n+    registerNativeType(JSTypeNative.NUMBER_OBJECT_TYPE, NUMBER_OBJECT_TYPE);\n+    FunctionType REGEXP_FUNCTION_TYPE \u003d new FunctionType(this, \"RegExp\", null, createOptionalParameters(ALL_TYPE, ALL_TYPE), null, null, null, true, true) {\n+\n+        private static final long serialVersionUID \u003d 1L;\n+\n+        @Override\n+        public JSType getReturnType() {\n+            return getInstanceType();\n+        }\n+    };\n+    ObjectType regexpPrototype \u003d REGEXP_FUNCTION_TYPE.getPrototype();\n+    registerNativeType(JSTypeNative.REGEXP_FUNCTION_TYPE, REGEXP_FUNCTION_TYPE);\n+    ObjectType REGEXP_TYPE \u003d REGEXP_FUNCTION_TYPE.getInstanceType();\n+    registerNativeType(JSTypeNative.REGEXP_TYPE, REGEXP_TYPE);\n+    FunctionType STRING_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"String\", null, createParameters(false, ALL_TYPE), STRING_TYPE, null, null, true, true);\n+    ObjectType stringPrototype \u003d STRING_OBJECT_FUNCTION_TYPE.getPrototype();\n+    registerNativeType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE, STRING_OBJECT_FUNCTION_TYPE);\n+    ObjectType STRING_OBJECT_TYPE \u003d STRING_OBJECT_FUNCTION_TYPE.getInstanceType();\n+    registerNativeType(JSTypeNative.STRING_OBJECT_TYPE, STRING_OBJECT_TYPE);\n+    JSType OBJECT_NUMBER_STRING \u003d createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE);\n+    registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING, OBJECT_NUMBER_STRING);\n+    JSType OBJECT_NUMBER_STRING_BOOLEAN \u003d createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n+    registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN, OBJECT_NUMBER_STRING_BOOLEAN);\n+    JSType NUMBER_STRING_BOOLEAN \u003d createUnionType(NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n+    registerNativeType(JSTypeNative.NUMBER_STRING_BOOLEAN, NUMBER_STRING_BOOLEAN);\n+    JSType NUMBER_STRING \u003d createUnionType(NUMBER_TYPE, STRING_TYPE);\n+    registerNativeType(JSTypeNative.NUMBER_STRING, NUMBER_STRING);\n+    JSType STRING_VALUE_OR_OBJECT_TYPE \u003d createUnionType(STRING_OBJECT_TYPE, STRING_TYPE);\n+    registerNativeType(JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE, STRING_VALUE_OR_OBJECT_TYPE);\n+    JSType NUMBER_VALUE_OR_OBJECT_TYPE \u003d createUnionType(NUMBER_OBJECT_TYPE, NUMBER_TYPE);\n+    registerNativeType(JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE, NUMBER_VALUE_OR_OBJECT_TYPE);\n+    FunctionType U2U_FUNCTION_TYPE \u003d createFunctionType(UNKNOWN_TYPE, true, UNKNOWN_TYPE);\n+    registerNativeType(JSTypeNative.U2U_FUNCTION_TYPE, U2U_FUNCTION_TYPE);\n+    FunctionType U2U_CONSTRUCTOR_TYPE \u003d new FunctionType(this, \"Function\", null, createParametersWithVarArgs(UNKNOWN_TYPE), UNKNOWN_TYPE, NO_OBJECT_TYPE, null, true, true) {\n+\n+        private static final long serialVersionUID \u003d 1L;\n+\n+        @Override\n+        public FunctionType getConstructor() {\n+            return registry.getNativeFunctionType(JSTypeNative.FUNCTION_FUNCTION_TYPE);\n+        }\n+    };\n+    registerNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE, U2U_CONSTRUCTOR_TYPE);\n+    registerNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE, U2U_CONSTRUCTOR_TYPE);\n+    FUNCTION_FUNCTION_TYPE.setInstanceType(U2U_CONSTRUCTOR_TYPE);\n+    U2U_CONSTRUCTOR_TYPE.setImplicitPrototype(FUNCTION_PROTOTYPE);\n+    FunctionType LEAST_FUNCTION_TYPE \u003d createFunctionType(NO_TYPE, true, ALL_TYPE);\n+    registerNativeType(JSTypeNative.LEAST_FUNCTION_TYPE, LEAST_FUNCTION_TYPE);\n+    ObjectType GLOBAL_THIS \u003d createObjectType(\"global this\", null, UNKNOWN_TYPE);\n+    registerNativeType(JSTypeNative.GLOBAL_THIS, GLOBAL_THIS);\n+    FunctionType GREATEST_FUNCTION_TYPE \u003d createFunctionType(ALL_TYPE, true, NO_TYPE);\n+    registerNativeType(JSTypeNative.GREATEST_FUNCTION_TYPE, GREATEST_FUNCTION_TYPE);\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void initializeBuiltInTypes() {\n    BooleanType BOOLEAN_TYPE \u003d new BooleanType(this);\n    registerNativeType(JSTypeNative.BOOLEAN_TYPE, BOOLEAN_TYPE);\n    NullType NULL_TYPE \u003d new NullType(this);\n    registerNativeType(JSTypeNative.NULL_TYPE, NULL_TYPE);\n    NumberType NUMBER_TYPE \u003d new NumberType(this);\n    registerNativeType(JSTypeNative.NUMBER_TYPE, NUMBER_TYPE);\n    StringType STRING_TYPE \u003d new StringType(this);\n    registerNativeType(JSTypeNative.STRING_TYPE, STRING_TYPE);\n    UnknownType UNKNOWN_TYPE \u003d new UnknownType(this, false);\n    registerNativeType(JSTypeNative.UNKNOWN_TYPE, UNKNOWN_TYPE);\n    registerNativeType(JSTypeNative.CHECKED_UNKNOWN_TYPE, new UnknownType(this, true));\n    VoidType VOID_TYPE \u003d new VoidType(this);\n    registerNativeType(JSTypeNative.VOID_TYPE, VOID_TYPE);\n    AllType ALL_TYPE \u003d new AllType(this);\n    registerNativeType(JSTypeNative.ALL_TYPE, ALL_TYPE);\n    ObjectType TOP_LEVEL_PROTOTYPE \u003d new FunctionPrototypeType(this, null, null, true);\n    registerNativeType(JSTypeNative.TOP_LEVEL_PROTOTYPE, TOP_LEVEL_PROTOTYPE);\n    FunctionType OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Object\", null, createOptionalParameters(ALL_TYPE), UNKNOWN_TYPE, null, null, true, true);\n    OBJECT_FUNCTION_TYPE.defineDeclaredProperty(\"prototype\", TOP_LEVEL_PROTOTYPE, true);\n    registerNativeType(JSTypeNative.OBJECT_FUNCTION_TYPE, OBJECT_FUNCTION_TYPE);\n    ObjectType OBJECT_PROTOTYPE \u003d OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.OBJECT_PROTOTYPE, OBJECT_PROTOTYPE);\n    ObjectType OBJECT_TYPE \u003d OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.OBJECT_TYPE, OBJECT_TYPE);\n    FunctionType FUNCTION_FUNCTION_TYPE \u003d new FunctionType(this, \"Function\", null, createParametersWithVarArgs(ALL_TYPE), UNKNOWN_TYPE, null, null, true, true);\n    FUNCTION_FUNCTION_TYPE.setPrototypeBasedOn(OBJECT_TYPE);\n    registerNativeType(JSTypeNative.FUNCTION_FUNCTION_TYPE, FUNCTION_FUNCTION_TYPE);\n    ObjectType FUNCTION_PROTOTYPE \u003d FUNCTION_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.FUNCTION_PROTOTYPE, FUNCTION_PROTOTYPE);\n    NoType NO_TYPE \u003d new NoType(this);\n    registerNativeType(JSTypeNative.NO_TYPE, NO_TYPE);\n    NoObjectType NO_OBJECT_TYPE \u003d new NoObjectType(this);\n    registerNativeType(JSTypeNative.NO_OBJECT_TYPE, NO_OBJECT_TYPE);\n    FunctionType ARRAY_FUNCTION_TYPE \u003d new FunctionType(this, \"Array\", null, createParametersWithVarArgs(ALL_TYPE), null, null, null, true, true) {\n\n        private static final long serialVersionUID \u003d 1L;\n\n        @Override\n        public JSType getReturnType() {\n            return getInstanceType();\n        }\n    };\n    ObjectType arrayPrototype \u003d ARRAY_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.ARRAY_FUNCTION_TYPE, ARRAY_FUNCTION_TYPE);\n    ObjectType ARRAY_TYPE \u003d ARRAY_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.ARRAY_TYPE, ARRAY_TYPE);\n    FunctionType BOOLEAN_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Boolean\", null, createParameters(false, ALL_TYPE), BOOLEAN_TYPE, null, null, true, true);\n    ObjectType booleanPrototype \u003d BOOLEAN_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE, BOOLEAN_OBJECT_FUNCTION_TYPE);\n    ObjectType BOOLEAN_OBJECT_TYPE \u003d BOOLEAN_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.BOOLEAN_OBJECT_TYPE, BOOLEAN_OBJECT_TYPE);\n    FunctionType DATE_FUNCTION_TYPE \u003d new FunctionType(this, \"Date\", null, createOptionalParameters(UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE), STRING_TYPE, null, null, true, true);\n    ObjectType datePrototype \u003d DATE_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.DATE_FUNCTION_TYPE, DATE_FUNCTION_TYPE);\n    ObjectType DATE_TYPE \u003d DATE_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.DATE_TYPE, DATE_TYPE);\n    FunctionType ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"Error\");\n    registerNativeType(JSTypeNative.ERROR_FUNCTION_TYPE, ERROR_FUNCTION_TYPE);\n    ObjectType ERROR_TYPE \u003d ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.ERROR_TYPE, ERROR_TYPE);\n    FunctionType EVAL_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"EvalError\");\n    EVAL_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.EVAL_ERROR_FUNCTION_TYPE, EVAL_ERROR_FUNCTION_TYPE);\n    ObjectType EVAL_ERROR_TYPE \u003d EVAL_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.EVAL_ERROR_TYPE, EVAL_ERROR_TYPE);\n    FunctionType RANGE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"RangeError\");\n    RANGE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.RANGE_ERROR_FUNCTION_TYPE, RANGE_ERROR_FUNCTION_TYPE);\n    ObjectType RANGE_ERROR_TYPE \u003d RANGE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.RANGE_ERROR_TYPE, RANGE_ERROR_TYPE);\n    FunctionType REFERENCE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"ReferenceError\");\n    REFERENCE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE, REFERENCE_ERROR_FUNCTION_TYPE);\n    ObjectType REFERENCE_ERROR_TYPE \u003d REFERENCE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.REFERENCE_ERROR_TYPE, REFERENCE_ERROR_TYPE);\n    FunctionType SYNTAX_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"SyntaxError\");\n    SYNTAX_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE, SYNTAX_ERROR_FUNCTION_TYPE);\n    ObjectType SYNTAX_ERROR_TYPE \u003d SYNTAX_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.SYNTAX_ERROR_TYPE, SYNTAX_ERROR_TYPE);\n    FunctionType TYPE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"TypeError\");\n    TYPE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.TYPE_ERROR_FUNCTION_TYPE, TYPE_ERROR_FUNCTION_TYPE);\n    ObjectType TYPE_ERROR_TYPE \u003d TYPE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.TYPE_ERROR_TYPE, TYPE_ERROR_TYPE);\n    FunctionType URI_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"URIError\");\n    URI_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.URI_ERROR_FUNCTION_TYPE, URI_ERROR_FUNCTION_TYPE);\n    ObjectType URI_ERROR_TYPE \u003d URI_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.URI_ERROR_TYPE, URI_ERROR_TYPE);\n    FunctionType NUMBER_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Number\", null, createParameters(false, ALL_TYPE), NUMBER_TYPE, null, null, true, true);\n    ObjectType numberPrototype \u003d NUMBER_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE, NUMBER_OBJECT_FUNCTION_TYPE);\n    ObjectType NUMBER_OBJECT_TYPE \u003d NUMBER_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.NUMBER_OBJECT_TYPE, NUMBER_OBJECT_TYPE);\n    FunctionType REGEXP_FUNCTION_TYPE \u003d new FunctionType(this, \"RegExp\", null, createOptionalParameters(ALL_TYPE, ALL_TYPE), null, null, null, true, true) {\n\n        private static final long serialVersionUID \u003d 1L;\n\n        @Override\n        public JSType getReturnType() {\n            return getInstanceType();\n        }\n    };\n    ObjectType regexpPrototype \u003d REGEXP_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.REGEXP_FUNCTION_TYPE, REGEXP_FUNCTION_TYPE);\n    ObjectType REGEXP_TYPE \u003d REGEXP_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.REGEXP_TYPE, REGEXP_TYPE);\n    FunctionType STRING_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"String\", null, createParameters(false, ALL_TYPE), STRING_TYPE, null, null, true, true);\n    ObjectType stringPrototype \u003d STRING_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE, STRING_OBJECT_FUNCTION_TYPE);\n    ObjectType STRING_OBJECT_TYPE \u003d STRING_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.STRING_OBJECT_TYPE, STRING_OBJECT_TYPE);\n    JSType OBJECT_NUMBER_STRING \u003d createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE);\n    registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING, OBJECT_NUMBER_STRING);\n    JSType OBJECT_NUMBER_STRING_BOOLEAN \u003d createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n    registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN, OBJECT_NUMBER_STRING_BOOLEAN);\n    JSType NUMBER_STRING_BOOLEAN \u003d createUnionType(NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n    registerNativeType(JSTypeNative.NUMBER_STRING_BOOLEAN, NUMBER_STRING_BOOLEAN);\n    JSType NUMBER_STRING \u003d createUnionType(NUMBER_TYPE, STRING_TYPE);\n    registerNativeType(JSTypeNative.NUMBER_STRING, NUMBER_STRING);\n    JSType STRING_VALUE_OR_OBJECT_TYPE \u003d createUnionType(STRING_OBJECT_TYPE, STRING_TYPE);\n    registerNativeType(JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE, STRING_VALUE_OR_OBJECT_TYPE);\n    JSType NUMBER_VALUE_OR_OBJECT_TYPE \u003d createUnionType(NUMBER_OBJECT_TYPE, NUMBER_TYPE);\n    registerNativeType(JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE, NUMBER_VALUE_OR_OBJECT_TYPE);\n    FunctionType U2U_FUNCTION_TYPE \u003d createFunctionType(UNKNOWN_TYPE, true, UNKNOWN_TYPE);\n    registerNativeType(JSTypeNative.U2U_FUNCTION_TYPE, U2U_FUNCTION_TYPE);\n    FunctionType U2U_CONSTRUCTOR_TYPE \u003d new FunctionType(this, \"Function\", null, createParametersWithVarArgs(UNKNOWN_TYPE), UNKNOWN_TYPE, NO_OBJECT_TYPE, null, true, true) {\n\n        private static final long serialVersionUID \u003d 1L;\n\n        @Override\n        public FunctionType getConstructor() {\n            return registry.getNativeFunctionType(JSTypeNative.FUNCTION_FUNCTION_TYPE);\n        }\n    };\n    registerNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE, U2U_CONSTRUCTOR_TYPE);\n    registerNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE, U2U_CONSTRUCTOR_TYPE);\n    FUNCTION_FUNCTION_TYPE.setInstanceType(U2U_CONSTRUCTOR_TYPE);\n    U2U_CONSTRUCTOR_TYPE.setImplicitPrototype(FUNCTION_PROTOTYPE);\n    FunctionType LEAST_FUNCTION_TYPE \u003d createFunctionType(NO_TYPE, true, ALL_TYPE);\n    registerNativeType(JSTypeNative.LEAST_FUNCTION_TYPE, LEAST_FUNCTION_TYPE);\n    ObjectType GLOBAL_THIS \u003d createObjectType(\"global this\", null, UNKNOWN_TYPE);\n    registerNativeType(JSTypeNative.GLOBAL_THIS, GLOBAL_THIS);\n    FunctionType GREATEST_FUNCTION_TYPE \u003d createFunctionType(ALL_TYPE, true, NO_TYPE);\n    registerNativeType(JSTypeNative.GREATEST_FUNCTION_TYPE, GREATEST_FUNCTION_TYPE);\n}",
      "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
      "functionStartLine": 166,
      "functionName": "initializeBuiltInTypes",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}