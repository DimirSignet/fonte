{
  "origin": "codeshovel",
  "repositoryName": "Closure-64b",
  "repositoryPath": "/tmp/Closure-64b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ReplaceCssNames.java",
  "functionName": "visit",
  "functionId": "$visit___t-NodeTraversal__n-Node__parent-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/ReplaceCssNames.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 140,
  "functionEndLine": 192,
  "numCommitsSeen": 15,
  "timeTaken": 512,
  "changeHistory": [
    "efe3e7ff6349539bae7e2c36dc627129e268de30",
    "de13c3313c05f4449c50c560324389d6905a214d",
    "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "efe3e7ff6349539bae7e2c36dc627129e268de30": "Ybodychange",
    "de13c3313c05f4449c50c560324389d6905a214d": "Ybodychange",
    "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "efe3e7ff6349539bae7e2c36dc627129e268de30": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/04/14 by john\n\n        Remove redundant function.\n\n        R\u003drobert\n        DELTA\u003d20  (0 added, 18 deleted, 2 changed)\n\nChange on 2010/04/14 by john\n\n        Maintain source information in InlineVariables.\n\n        R\u003dalan\n        DELTA\u003d10  (7 added, 1 deleted, 2 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dvjrbog\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@185 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/15/10, 8:29 AM",
      "commitName": "efe3e7ff6349539bae7e2c36dc627129e268de30",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/13/10, 2:39 PM",
      "commitNameOld": "de13c3313c05f4449c50c560324389d6905a214d",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 1.74,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() \u003d\u003d Token.CALL \u0026\u0026 GET_CSS_NAME_FUNCTION.equals(n.getFirstChild().getQualifiedName())) {\n        int count \u003d n.getChildCount();\n        Node first \u003d n.getFirstChild().getNext();\n        switch(count) {\n            case 2:\n                if (first.getType() \u003d\u003d Token.STRING) {\n                    processStringNode(t, first);\n                    n.removeChild(first);\n                    parent.replaceChild(n, first);\n                    compiler.reportCodeChange();\n                } else {\n                    compiler.report(t.makeError(n, STRING_LITERAL_EXPECTED_ERROR, Token.name(first.getType())));\n                }\n                break;\n            case 3:\n                Node second \u003d first.getNext();\n                if (first.getType() \u003d\u003d Token.STRING) {\n                    compiler.report(t.makeError(n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString(), second.getString()));\n                } else if (second.getType() \u003d\u003d Token.STRING) {\n                    processStringNode(t, second);\n                    n.removeChild(first);\n                    Node replacement \u003d new Node(Token.ADD, first, Node.newString(\"-\" + second.getString()).copyInformationFrom(second)).copyInformationFrom(n);\n                    replacement.setJSType(nativeStringType);\n                    parent.replaceChild(n, replacement);\n                    compiler.reportCodeChange();\n                } else {\n                    compiler.report(t.makeError(n, STRING_LITERAL_EXPECTED_ERROR, Token.name(second.getType())));\n                }\n                break;\n            default:\n                compiler.report(t.makeError(n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf(count)));\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/ReplaceCssNames.java",
      "functionStartLine": 120,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,36 +1,36 @@\n @Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() \u003d\u003d Token.CALL \u0026\u0026 GET_CSS_NAME_FUNCTION.equals(n.getFirstChild().getQualifiedName())) {\n         int count \u003d n.getChildCount();\n         Node first \u003d n.getFirstChild().getNext();\n         switch(count) {\n             case 2:\n                 if (first.getType() \u003d\u003d Token.STRING) {\n                     processStringNode(t, first);\n                     n.removeChild(first);\n                     parent.replaceChild(n, first);\n                     compiler.reportCodeChange();\n                 } else {\n                     compiler.report(t.makeError(n, STRING_LITERAL_EXPECTED_ERROR, Token.name(first.getType())));\n                 }\n                 break;\n             case 3:\n                 Node second \u003d first.getNext();\n                 if (first.getType() \u003d\u003d Token.STRING) {\n                     compiler.report(t.makeError(n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString(), second.getString()));\n                 } else if (second.getType() \u003d\u003d Token.STRING) {\n                     processStringNode(t, second);\n                     n.removeChild(first);\n-                    Node replacement \u003d new Node(Token.ADD, first, Node.newString(\"-\" + second.getString()).copySourceLocationFrom(second)).copySourceLocationFrom(n);\n+                    Node replacement \u003d new Node(Token.ADD, first, Node.newString(\"-\" + second.getString()).copyInformationFrom(second)).copyInformationFrom(n);\n                     replacement.setJSType(nativeStringType);\n                     parent.replaceChild(n, replacement);\n                     compiler.reportCodeChange();\n                 } else {\n                     compiler.report(t.makeError(n, STRING_LITERAL_EXPECTED_ERROR, Token.name(second.getType())));\n                 }\n                 break;\n             default:\n                 compiler.report(t.makeError(n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf(count)));\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "de13c3313c05f4449c50c560324389d6905a214d": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/04/13 by john\n\n        Experimental option: Flag to change named object references from \"Object|null\" to \"Object|null|undefined\".\n\n        R\u003dalan,nick\n        DELTA\u003d7144  (7131 added, 5 deleted, 8 changed)\n\nChange on 2010/04/13 by nicksantos\n\n        get rid of some backdoor gmail apis.\n\n        R\u003djohn\n        DELTA\u003d44  (0 added, 33 deleted, 11 changed)\n\nChange on 2010/04/13 by nicksantos\n\n        fix TypeCheckTest to parse externs files properly.\n        i still need to merge the TypeCheckTest-forking cl into this one.\n\n        R\u003djohn\n        DELTA\u003d42  (12 added, 0 deleted, 30 changed)\n\nChange on 2010/04/13 by john\n\n        Enable expression decomposition for function inlining by default.\n\n        R\u003dnick\n        DELTA\u003d1  (0 added, 0 deleted, 1 changed)\n\nChange on 2010/04/13 by john\n\n        Move ReplaceCssNames to allow type checking of goog.getCssName.\n\n        R\u003dmark\n        DELTA\u003d39  (35 added, 4 deleted, 0 changed)\n\nChange on 2010/04/13 by john\n\n        Maintain source and type information during ReplaceCssNames.\n\n        R\u003dmark\n        DELTA\u003d31  (30 added, 0 deleted, 1 changed)\n\nChange on 2010/04/13 by nick\n\n        fix up type information on event listener functions.\n\n        R\u003dalan\n        DELTA\u003d2  (0 added, 0 deleted, 2 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dwescxy\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@182 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/13/10, 2:39 PM",
      "commitName": "de13c3313c05f4449c50c560324389d6905a214d",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "3/29/10, 7:04 AM",
      "commitNameOld": "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 15.32,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() \u003d\u003d Token.CALL \u0026\u0026 GET_CSS_NAME_FUNCTION.equals(n.getFirstChild().getQualifiedName())) {\n        int count \u003d n.getChildCount();\n        Node first \u003d n.getFirstChild().getNext();\n        switch(count) {\n            case 2:\n                if (first.getType() \u003d\u003d Token.STRING) {\n                    processStringNode(t, first);\n                    n.removeChild(first);\n                    parent.replaceChild(n, first);\n                    compiler.reportCodeChange();\n                } else {\n                    compiler.report(t.makeError(n, STRING_LITERAL_EXPECTED_ERROR, Token.name(first.getType())));\n                }\n                break;\n            case 3:\n                Node second \u003d first.getNext();\n                if (first.getType() \u003d\u003d Token.STRING) {\n                    compiler.report(t.makeError(n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString(), second.getString()));\n                } else if (second.getType() \u003d\u003d Token.STRING) {\n                    processStringNode(t, second);\n                    n.removeChild(first);\n                    Node replacement \u003d new Node(Token.ADD, first, Node.newString(\"-\" + second.getString()).copySourceLocationFrom(second)).copySourceLocationFrom(n);\n                    replacement.setJSType(nativeStringType);\n                    parent.replaceChild(n, replacement);\n                    compiler.reportCodeChange();\n                } else {\n                    compiler.report(t.makeError(n, STRING_LITERAL_EXPECTED_ERROR, Token.name(second.getType())));\n                }\n                break;\n            default:\n                compiler.report(t.makeError(n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf(count)));\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/ReplaceCssNames.java",
      "functionStartLine": 120,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,35 +1,36 @@\n @Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() \u003d\u003d Token.CALL \u0026\u0026 GET_CSS_NAME_FUNCTION.equals(n.getFirstChild().getQualifiedName())) {\n         int count \u003d n.getChildCount();\n         Node first \u003d n.getFirstChild().getNext();\n         switch(count) {\n             case 2:\n                 if (first.getType() \u003d\u003d Token.STRING) {\n                     processStringNode(t, first);\n                     n.removeChild(first);\n                     parent.replaceChild(n, first);\n                     compiler.reportCodeChange();\n                 } else {\n                     compiler.report(t.makeError(n, STRING_LITERAL_EXPECTED_ERROR, Token.name(first.getType())));\n                 }\n                 break;\n             case 3:\n                 Node second \u003d first.getNext();\n                 if (first.getType() \u003d\u003d Token.STRING) {\n                     compiler.report(t.makeError(n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString(), second.getString()));\n                 } else if (second.getType() \u003d\u003d Token.STRING) {\n                     processStringNode(t, second);\n                     n.removeChild(first);\n-                    Node replacement \u003d new Node(Token.ADD, first, Node.newString(\"-\" + second.getString()));\n+                    Node replacement \u003d new Node(Token.ADD, first, Node.newString(\"-\" + second.getString()).copySourceLocationFrom(second)).copySourceLocationFrom(n);\n+                    replacement.setJSType(nativeStringType);\n                     parent.replaceChild(n, replacement);\n                     compiler.reportCodeChange();\n                 } else {\n                     compiler.report(t.makeError(n, STRING_LITERAL_EXPECTED_ERROR, Token.name(second.getType())));\n                 }\n                 break;\n             default:\n                 compiler.report(t.makeError(n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf(count)));\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4": {
      "type": "Ybodychange",
      "commitMessage": "Remove circular dependency between error-reporting and the rest\nof the compiler. (Nick)\nR\u003dalan\nDELTA\u003d152  (27 added, 28 deleted, 97 changed)\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@159 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/29/10, 7:04 AM",
      "commitName": "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "1/8/10, 1:41 PM",
      "commitNameOld": "6d374c3ee4c9c2651ffb44048924e127fd2bf37c",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 79.68,
      "commitsBetweenForRepo": 91,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() \u003d\u003d Token.CALL \u0026\u0026 GET_CSS_NAME_FUNCTION.equals(n.getFirstChild().getQualifiedName())) {\n        int count \u003d n.getChildCount();\n        Node first \u003d n.getFirstChild().getNext();\n        switch(count) {\n            case 2:\n                if (first.getType() \u003d\u003d Token.STRING) {\n                    processStringNode(t, first);\n                    n.removeChild(first);\n                    parent.replaceChild(n, first);\n                    compiler.reportCodeChange();\n                } else {\n                    compiler.report(t.makeError(n, STRING_LITERAL_EXPECTED_ERROR, Token.name(first.getType())));\n                }\n                break;\n            case 3:\n                Node second \u003d first.getNext();\n                if (first.getType() \u003d\u003d Token.STRING) {\n                    compiler.report(t.makeError(n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString(), second.getString()));\n                } else if (second.getType() \u003d\u003d Token.STRING) {\n                    processStringNode(t, second);\n                    n.removeChild(first);\n                    Node replacement \u003d new Node(Token.ADD, first, Node.newString(\"-\" + second.getString()));\n                    parent.replaceChild(n, replacement);\n                    compiler.reportCodeChange();\n                } else {\n                    compiler.report(t.makeError(n, STRING_LITERAL_EXPECTED_ERROR, Token.name(second.getType())));\n                }\n                break;\n            default:\n                compiler.report(t.makeError(n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf(count)));\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/ReplaceCssNames.java",
      "functionStartLine": 113,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,35 +1,35 @@\n @Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() \u003d\u003d Token.CALL \u0026\u0026 GET_CSS_NAME_FUNCTION.equals(n.getFirstChild().getQualifiedName())) {\n         int count \u003d n.getChildCount();\n         Node first \u003d n.getFirstChild().getNext();\n         switch(count) {\n             case 2:\n                 if (first.getType() \u003d\u003d Token.STRING) {\n                     processStringNode(t, first);\n                     n.removeChild(first);\n                     parent.replaceChild(n, first);\n                     compiler.reportCodeChange();\n                 } else {\n-                    compiler.report(JSError.make(t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name(first.getType())));\n+                    compiler.report(t.makeError(n, STRING_LITERAL_EXPECTED_ERROR, Token.name(first.getType())));\n                 }\n                 break;\n             case 3:\n                 Node second \u003d first.getNext();\n                 if (first.getType() \u003d\u003d Token.STRING) {\n-                    compiler.report(JSError.make(t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString(), second.getString()));\n+                    compiler.report(t.makeError(n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString(), second.getString()));\n                 } else if (second.getType() \u003d\u003d Token.STRING) {\n                     processStringNode(t, second);\n                     n.removeChild(first);\n                     Node replacement \u003d new Node(Token.ADD, first, Node.newString(\"-\" + second.getString()));\n                     parent.replaceChild(n, replacement);\n                     compiler.reportCodeChange();\n                 } else {\n-                    compiler.report(JSError.make(t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name(second.getType())));\n+                    compiler.report(t.makeError(n, STRING_LITERAL_EXPECTED_ERROR, Token.name(second.getType())));\n                 }\n                 break;\n             default:\n-                compiler.report(JSError.make(t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf(count)));\n+                compiler.report(t.makeError(n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf(count)));\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,35 @@\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n.getType() \u003d\u003d Token.CALL \u0026\u0026 GET_CSS_NAME_FUNCTION.equals(n.getFirstChild().getQualifiedName())) {\n+        int count \u003d n.getChildCount();\n+        Node first \u003d n.getFirstChild().getNext();\n+        switch(count) {\n+            case 2:\n+                if (first.getType() \u003d\u003d Token.STRING) {\n+                    processStringNode(t, first);\n+                    n.removeChild(first);\n+                    parent.replaceChild(n, first);\n+                    compiler.reportCodeChange();\n+                } else {\n+                    compiler.report(JSError.make(t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name(first.getType())));\n+                }\n+                break;\n+            case 3:\n+                Node second \u003d first.getNext();\n+                if (first.getType() \u003d\u003d Token.STRING) {\n+                    compiler.report(JSError.make(t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString(), second.getString()));\n+                } else if (second.getType() \u003d\u003d Token.STRING) {\n+                    processStringNode(t, second);\n+                    n.removeChild(first);\n+                    Node replacement \u003d new Node(Token.ADD, first, Node.newString(\"-\" + second.getString()));\n+                    parent.replaceChild(n, replacement);\n+                    compiler.reportCodeChange();\n+                } else {\n+                    compiler.report(JSError.make(t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name(second.getType())));\n+                }\n+                break;\n+            default:\n+                compiler.report(JSError.make(t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf(count)));\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() \u003d\u003d Token.CALL \u0026\u0026 GET_CSS_NAME_FUNCTION.equals(n.getFirstChild().getQualifiedName())) {\n        int count \u003d n.getChildCount();\n        Node first \u003d n.getFirstChild().getNext();\n        switch(count) {\n            case 2:\n                if (first.getType() \u003d\u003d Token.STRING) {\n                    processStringNode(t, first);\n                    n.removeChild(first);\n                    parent.replaceChild(n, first);\n                    compiler.reportCodeChange();\n                } else {\n                    compiler.report(JSError.make(t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name(first.getType())));\n                }\n                break;\n            case 3:\n                Node second \u003d first.getNext();\n                if (first.getType() \u003d\u003d Token.STRING) {\n                    compiler.report(JSError.make(t, n, UNEXPECTED_STRING_LITERAL_ERROR, first.getString(), second.getString()));\n                } else if (second.getType() \u003d\u003d Token.STRING) {\n                    processStringNode(t, second);\n                    n.removeChild(first);\n                    Node replacement \u003d new Node(Token.ADD, first, Node.newString(\"-\" + second.getString()));\n                    parent.replaceChild(n, replacement);\n                    compiler.reportCodeChange();\n                } else {\n                    compiler.report(JSError.make(t, n, STRING_LITERAL_EXPECTED_ERROR, Token.name(second.getType())));\n                }\n                break;\n            default:\n                compiler.report(JSError.make(t, n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf(count)));\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/ReplaceCssNames.java",
      "functionStartLine": 113,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}