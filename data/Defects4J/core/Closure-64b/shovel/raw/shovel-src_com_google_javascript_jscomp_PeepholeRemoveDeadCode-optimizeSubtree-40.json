{
  "origin": "codeshovel",
  "repositoryName": "Closure-64b",
  "repositoryPath": "/tmp/Closure-64b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PeepholeRemoveDeadCode.java",
  "functionName": "optimizeSubtree",
  "functionId": "optimizeSubtree___subtree-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 40,
  "functionEndLine": 74,
  "numCommitsSeen": 23,
  "timeTaken": 3608,
  "changeHistory": [
    "1668b7774dd529234defd8c19cf6d20a1673b582",
    "a455a437d82e4945330499cb7925fc767a4db046",
    "48701cc70fde194c05ecd008fc1015b9d82921d1",
    "513d04bd0b3be2cf6dbf6748ed28414af4d071ad",
    "66527dd399f7142edc491037b4488b158073ae55",
    "ad32e173b7c78f48ff85324dc310fa5b5888e2aa",
    "9de5e9b4671773bb3f2d5932e57c1b4186b9b777",
    "e33e925eea3a8e4de958864e531e1adc4da62e18"
  ],
  "changeHistoryShort": {
    "1668b7774dd529234defd8c19cf6d20a1673b582": "Ybodychange",
    "a455a437d82e4945330499cb7925fc767a4db046": "Ybodychange",
    "48701cc70fde194c05ecd008fc1015b9d82921d1": "Ybodychange",
    "513d04bd0b3be2cf6dbf6748ed28414af4d071ad": "Ybodychange",
    "66527dd399f7142edc491037b4488b158073ae55": "Ybodychange",
    "ad32e173b7c78f48ff85324dc310fa5b5888e2aa": "Ybodychange",
    "9de5e9b4671773bb3f2d5932e57c1b4186b9b777": "Yformatchange",
    "e33e925eea3a8e4de958864e531e1adc4da62e18": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1668b7774dd529234defd8c19cf6d20a1673b582": {
      "type": "Ybodychange",
      "commitMessage": "\nMove peephole TRY folding to PeepholdRemoveDeadCode.\n\nR\u003dnicksantos\nDELTA\u003d35  (34 added, 0 deleted, 1 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d218\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@669 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/6/11, 4:55 PM",
      "commitName": "1668b7774dd529234defd8c19cf6d20a1673b582",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "12/20/10, 10:42 AM",
      "commitNameOld": "a455a437d82e4945330499cb7925fc767a4db046",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 17.26,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nNode optimizeSubtree(Node subtree) {\n    switch(subtree.getType()) {\n        case Token.ASSIGN:\n            return tryFoldAssignment(subtree);\n        case Token.COMMA:\n            return tryFoldComma(subtree);\n        case Token.SCRIPT:\n        case Token.BLOCK:\n            return tryOptimizeBlock(subtree);\n        case Token.EXPR_RESULT:\n            subtree \u003d tryFoldExpr(subtree);\n            return subtree;\n        case Token.HOOK:\n            return tryFoldHook(subtree);\n        case Token.SWITCH:\n            return tryOptimizeSwitch(subtree);\n        case Token.IF:\n            return tryFoldIf(subtree);\n        case Token.WHILE:\n            return tryFoldWhile(subtree);\n        case Token.FOR:\n            {\n                Node condition \u003d NodeUtil.getConditionExpression(subtree);\n                if (condition !\u003d null) {\n                    tryFoldForCondition(condition);\n                }\n            }\n            return tryFoldFor(subtree);\n        case Token.DO:\n            return tryFoldDo(subtree);\n        case Token.TRY:\n            return tryFoldTry(subtree);\n        default:\n            return subtree;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java",
      "functionStartLine": 40,
      "functionName": "optimizeSubtree",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,35 +1,37 @@\n @Override\n Node optimizeSubtree(Node subtree) {\n     switch(subtree.getType()) {\n         case Token.ASSIGN:\n             return tryFoldAssignment(subtree);\n         case Token.COMMA:\n             return tryFoldComma(subtree);\n         case Token.SCRIPT:\n         case Token.BLOCK:\n             return tryOptimizeBlock(subtree);\n         case Token.EXPR_RESULT:\n             subtree \u003d tryFoldExpr(subtree);\n             return subtree;\n         case Token.HOOK:\n             return tryFoldHook(subtree);\n         case Token.SWITCH:\n             return tryOptimizeSwitch(subtree);\n         case Token.IF:\n             return tryFoldIf(subtree);\n         case Token.WHILE:\n             return tryFoldWhile(subtree);\n         case Token.FOR:\n             {\n                 Node condition \u003d NodeUtil.getConditionExpression(subtree);\n                 if (condition !\u003d null) {\n                     tryFoldForCondition(condition);\n                 }\n             }\n             return tryFoldFor(subtree);\n         case Token.DO:\n             return tryFoldDo(subtree);\n+        case Token.TRY:\n+            return tryFoldTry(subtree);\n         default:\n             return subtree;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a455a437d82e4945330499cb7925fc767a4db046": {
      "type": "Ybodychange",
      "commitMessage": "\nFold identity assignments\n\nR\u003dnicksantos\nDELTA\u003d30  (30 added, 0 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d163\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@648 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/20/10, 10:42 AM",
      "commitName": "a455a437d82e4945330499cb7925fc767a4db046",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/11/10, 9:42 PM",
      "commitNameOld": "df223efd38c514d584f00d076488ab9a02011492",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 38.54,
      "commitsBetweenForRepo": 100,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nNode optimizeSubtree(Node subtree) {\n    switch(subtree.getType()) {\n        case Token.ASSIGN:\n            return tryFoldAssignment(subtree);\n        case Token.COMMA:\n            return tryFoldComma(subtree);\n        case Token.SCRIPT:\n        case Token.BLOCK:\n            return tryOptimizeBlock(subtree);\n        case Token.EXPR_RESULT:\n            subtree \u003d tryFoldExpr(subtree);\n            return subtree;\n        case Token.HOOK:\n            return tryFoldHook(subtree);\n        case Token.SWITCH:\n            return tryOptimizeSwitch(subtree);\n        case Token.IF:\n            return tryFoldIf(subtree);\n        case Token.WHILE:\n            return tryFoldWhile(subtree);\n        case Token.FOR:\n            {\n                Node condition \u003d NodeUtil.getConditionExpression(subtree);\n                if (condition !\u003d null) {\n                    tryFoldForCondition(condition);\n                }\n            }\n            return tryFoldFor(subtree);\n        case Token.DO:\n            return tryFoldDo(subtree);\n        default:\n            return subtree;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java",
      "functionStartLine": 40,
      "functionName": "optimizeSubtree",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,33 +1,35 @@\n @Override\n Node optimizeSubtree(Node subtree) {\n     switch(subtree.getType()) {\n+        case Token.ASSIGN:\n+            return tryFoldAssignment(subtree);\n         case Token.COMMA:\n             return tryFoldComma(subtree);\n         case Token.SCRIPT:\n         case Token.BLOCK:\n             return tryOptimizeBlock(subtree);\n         case Token.EXPR_RESULT:\n             subtree \u003d tryFoldExpr(subtree);\n             return subtree;\n         case Token.HOOK:\n             return tryFoldHook(subtree);\n         case Token.SWITCH:\n             return tryOptimizeSwitch(subtree);\n         case Token.IF:\n             return tryFoldIf(subtree);\n         case Token.WHILE:\n             return tryFoldWhile(subtree);\n         case Token.FOR:\n             {\n                 Node condition \u003d NodeUtil.getConditionExpression(subtree);\n                 if (condition !\u003d null) {\n                     tryFoldForCondition(condition);\n                 }\n             }\n             return tryFoldFor(subtree);\n         case Token.DO:\n             return tryFoldDo(subtree);\n         default:\n             return subtree;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "48701cc70fde194c05ecd008fc1015b9d82921d1": {
      "type": "Ybodychange",
      "commitMessage": "\n- Generalize unused operation removal and remove a couple of special cases (HOOK, NOT).\n- Add handling for other AST locations that can have unused ops removed (COMMA lhs and FOR increment expressions).\n\nR\u003dacleung\nDELTA\u003d358  (260 added, 80 deleted, 18 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d197245\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@390 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/27/10, 3:09 PM",
      "commitName": "48701cc70fde194c05ecd008fc1015b9d82921d1",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "8/16/10, 11:54 AM",
      "commitNameOld": "d5b11f8918aaac365ce173dd9e6edadc687fb4b5",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 11.14,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nNode optimizeSubtree(Node subtree) {\n    switch(subtree.getType()) {\n        case Token.COMMA:\n            return tryFoldComma(subtree);\n        case Token.SCRIPT:\n        case Token.BLOCK:\n            return tryOptimizeBlock(subtree);\n        case Token.EXPR_RESULT:\n            subtree \u003d tryFoldExpr(subtree);\n            return subtree;\n        case Token.HOOK:\n            return tryFoldHook(subtree);\n        case Token.SWITCH:\n            return tryOptimizeSwitch(subtree);\n        case Token.IF:\n            return tryFoldIf(subtree);\n        case Token.WHILE:\n            return tryFoldWhile(subtree);\n        case Token.FOR:\n            {\n                Node condition \u003d NodeUtil.getConditionExpression(subtree);\n                if (condition !\u003d null) {\n                    tryFoldForCondition(condition);\n                }\n            }\n            return tryFoldFor(subtree);\n        case Token.DO:\n            return tryFoldDo(subtree);\n        default:\n            return subtree;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java",
      "functionStartLine": 42,
      "functionName": "optimizeSubtree",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,32 +1,33 @@\n @Override\n Node optimizeSubtree(Node subtree) {\n     switch(subtree.getType()) {\n         case Token.COMMA:\n             return tryFoldComma(subtree);\n         case Token.SCRIPT:\n         case Token.BLOCK:\n             return tryOptimizeBlock(subtree);\n         case Token.EXPR_RESULT:\n-            return tryFoldHookExpr(subtree);\n+            subtree \u003d tryFoldExpr(subtree);\n+            return subtree;\n         case Token.HOOK:\n             return tryFoldHook(subtree);\n         case Token.SWITCH:\n             return tryOptimizeSwitch(subtree);\n         case Token.IF:\n             return tryFoldIf(subtree);\n         case Token.WHILE:\n             return tryFoldWhile(subtree);\n         case Token.FOR:\n             {\n                 Node condition \u003d NodeUtil.getConditionExpression(subtree);\n                 if (condition !\u003d null) {\n                     tryFoldForCondition(condition);\n                 }\n             }\n             return tryFoldFor(subtree);\n         case Token.DO:\n             return tryFoldDo(subtree);\n         default:\n             return subtree;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "513d04bd0b3be2cf6dbf6748ed28414af4d071ad": {
      "type": "Ybodychange",
      "commitMessage": "\nRemove useless cases in switch statements.\n\nR\u003dacleung\nDELTA\u003d126  (125 added, 0 deleted, 1 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d103005\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@355 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/12/10, 3:29 PM",
      "commitName": "513d04bd0b3be2cf6dbf6748ed28414af4d071ad",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "8/12/10, 12:04 PM",
      "commitNameOld": "66527dd399f7142edc491037b4488b158073ae55",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 0.14,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nNode optimizeSubtree(Node subtree) {\n    switch(subtree.getType()) {\n        case Token.COMMA:\n            return tryFoldComma(subtree);\n        case Token.SCRIPT:\n        case Token.BLOCK:\n            return tryOptimizeBlock(subtree);\n        case Token.EXPR_RESULT:\n            return tryFoldHookExpr(subtree);\n        case Token.HOOK:\n            return tryFoldHook(subtree);\n        case Token.SWITCH:\n            return tryOptimizeSwitch(subtree);\n        case Token.IF:\n            return tryFoldIf(subtree);\n        case Token.WHILE:\n            return tryFoldWhile(subtree);\n        case Token.FOR:\n            {\n                Node condition \u003d NodeUtil.getConditionExpression(subtree);\n                if (condition !\u003d null) {\n                    tryFoldForCondition(condition);\n                }\n            }\n            return tryFoldFor(subtree);\n        case Token.DO:\n            return tryFoldDo(subtree);\n        default:\n            return subtree;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java",
      "functionStartLine": 40,
      "functionName": "optimizeSubtree",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,30 +1,32 @@\n @Override\n Node optimizeSubtree(Node subtree) {\n     switch(subtree.getType()) {\n         case Token.COMMA:\n             return tryFoldComma(subtree);\n         case Token.SCRIPT:\n         case Token.BLOCK:\n             return tryOptimizeBlock(subtree);\n         case Token.EXPR_RESULT:\n             return tryFoldHookExpr(subtree);\n         case Token.HOOK:\n             return tryFoldHook(subtree);\n+        case Token.SWITCH:\n+            return tryOptimizeSwitch(subtree);\n         case Token.IF:\n             return tryFoldIf(subtree);\n         case Token.WHILE:\n             return tryFoldWhile(subtree);\n         case Token.FOR:\n             {\n                 Node condition \u003d NodeUtil.getConditionExpression(subtree);\n                 if (condition !\u003d null) {\n                     tryFoldForCondition(condition);\n                 }\n             }\n             return tryFoldFor(subtree);\n         case Token.DO:\n             return tryFoldDo(subtree);\n         default:\n             return subtree;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "66527dd399f7142edc491037b4488b158073ae55": {
      "type": "Ybodychange",
      "commitMessage": "\nFix needed PeepholeRemoveDeadCode to fix the Calendar builde.\n\nR\u003ddcc\nDELTA\u003d330  (161 added, 96 deleted, 73 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d103004\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@354 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/12/10, 12:04 PM",
      "commitName": "66527dd399f7142edc491037b4488b158073ae55",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "8/12/10, 6:02 PM",
      "commitNameOld": "15acafb00636f99295b394145b9b60a5e624ddfa",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": -0.25,
      "commitsBetweenForRepo": 0,
      "commitsBetweenForFile": 0,
      "actualSource": "@Override\nNode optimizeSubtree(Node subtree) {\n    switch(subtree.getType()) {\n        case Token.COMMA:\n            return tryFoldComma(subtree);\n        case Token.SCRIPT:\n        case Token.BLOCK:\n            return tryOptimizeBlock(subtree);\n        case Token.EXPR_RESULT:\n            return tryFoldHookExpr(subtree);\n        case Token.HOOK:\n            return tryFoldHook(subtree);\n        case Token.IF:\n            return tryFoldIf(subtree);\n        case Token.WHILE:\n            return tryFoldWhile(subtree);\n        case Token.FOR:\n            {\n                Node condition \u003d NodeUtil.getConditionExpression(subtree);\n                if (condition !\u003d null) {\n                    tryFoldForCondition(condition);\n                }\n            }\n            return tryFoldFor(subtree);\n        case Token.DO:\n            return tryFoldDo(subtree);\n        default:\n            return subtree;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java",
      "functionStartLine": 40,
      "functionName": "optimizeSubtree",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,27 +1,30 @@\n @Override\n Node optimizeSubtree(Node subtree) {\n     switch(subtree.getType()) {\n         case Token.COMMA:\n             return tryFoldComma(subtree);\n         case Token.SCRIPT:\n         case Token.BLOCK:\n             return tryOptimizeBlock(subtree);\n-        case Token.IF:\n+        case Token.EXPR_RESULT:\n+            return tryFoldHookExpr(subtree);\n         case Token.HOOK:\n-            return tryFoldHookIf(subtree);\n+            return tryFoldHook(subtree);\n+        case Token.IF:\n+            return tryFoldIf(subtree);\n         case Token.WHILE:\n             return tryFoldWhile(subtree);\n         case Token.FOR:\n             {\n                 Node condition \u003d NodeUtil.getConditionExpression(subtree);\n                 if (condition !\u003d null) {\n                     tryFoldForCondition(condition);\n                 }\n             }\n             return tryFoldFor(subtree);\n         case Token.DO:\n             return tryFoldDo(subtree);\n         default:\n             return subtree;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ad32e173b7c78f48ff85324dc310fa5b5888e2aa": {
      "type": "Ybodychange",
      "commitMessage": "\nChanges to completely remove goog.userAgent as required by\njavatests/com/google/javascript/closure/CompileUserAgentTest.  This\nrequires three changes:\n\n1) being able to remove expressions without side-effects in the global\nscope with the PeepholeRemoveDeadCode pass. This is simply a change to\nhandle both BLOCK and SCRIPT.\n\n2) a change to be able to fold constant result if conditions that have\nside-effects (a \u003d 1).  This was a change to include a smarter version\nof NodeUtil.getBooleanValue. A general expression evaluator would be\npreferred.\n\n3) and finally a bit of a hack to handle assignments followed by if\nstatements.  I would prefer a general solution, but this works well\nenough for this purpose.  A good general solution would need a general\nin-place expression evaluator and control-flow value propagation, both\nof which I\u0027ve special cased. It handles this:\n\na \u003d /MSIE/\nif (a) {\na.exec(value);\n}\n\n(we want the regexp object to get inlined into the exec call so it is known to\nbe side-effect free).\n\nR\u003dgboyer,acleung\nDELTA\u003d388  (333 added, 28 deleted, 27 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d90004\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@326 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/4/10, 12:47 PM",
      "commitName": "ad32e173b7c78f48ff85324dc310fa5b5888e2aa",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "7/23/10, 2:49 PM",
      "commitNameOld": "f0362b1ab1ae1339e017b1d04f016980e3fa6cb6",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 11.92,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nNode optimizeSubtree(Node subtree) {\n    switch(subtree.getType()) {\n        case Token.COMMA:\n            return tryFoldComma(subtree);\n        case Token.SCRIPT:\n        case Token.BLOCK:\n            return tryOptimizeBlock(subtree);\n        case Token.IF:\n        case Token.HOOK:\n            return tryFoldHookIf(subtree);\n        case Token.WHILE:\n            return tryFoldWhile(subtree);\n        case Token.FOR:\n            {\n                Node condition \u003d NodeUtil.getConditionExpression(subtree);\n                if (condition !\u003d null) {\n                    tryFoldForCondition(condition);\n                }\n            }\n            return tryFoldFor(subtree);\n        case Token.DO:\n            return tryFoldDo(subtree);\n        default:\n            return subtree;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java",
      "functionStartLine": 40,
      "functionName": "optimizeSubtree",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,26 +1,27 @@\n @Override\n Node optimizeSubtree(Node subtree) {\n     switch(subtree.getType()) {\n         case Token.COMMA:\n             return tryFoldComma(subtree);\n+        case Token.SCRIPT:\n         case Token.BLOCK:\n-            return tryFoldBlock(subtree);\n+            return tryOptimizeBlock(subtree);\n         case Token.IF:\n         case Token.HOOK:\n             return tryFoldHookIf(subtree);\n         case Token.WHILE:\n             return tryFoldWhile(subtree);\n         case Token.FOR:\n             {\n                 Node condition \u003d NodeUtil.getConditionExpression(subtree);\n                 if (condition !\u003d null) {\n                     tryFoldForCondition(condition);\n                 }\n             }\n             return tryFoldFor(subtree);\n         case Token.DO:\n             return tryFoldDo(subtree);\n         default:\n             return subtree;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9de5e9b4671773bb3f2d5932e57c1b4186b9b777": {
      "type": "Yformatchange",
      "commitMessage": "\nChange on 2010/06/30 15:06:33 by johnlenz\n\n\tAdd a diagnostic group so that projects with weird externs can opt-out of the stricter extern checks.\n\n\tR\u003dnicksantos\n\tDELTA\u003d54  (52 added, 0 deleted, 2 changed)\n\nChange on 2010/06/30 17:56:51 by johnlenz\n\n\tRevert warning levels until after a release is put out to control them.\n\n\tR\u003dnicksantos\n\tDELTA\u003d4  (2 added, 0 deleted, 2 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d47002\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@260 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/1/10, 7:38 AM",
      "commitName": "9de5e9b4671773bb3f2d5932e57c1b4186b9b777",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "6/16/10, 12:33 PM",
      "commitNameOld": "e33e925eea3a8e4de958864e531e1adc4da62e18",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 14.8,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nNode optimizeSubtree(Node subtree) {\n    switch(subtree.getType()) {\n        case Token.COMMA:\n            return tryFoldComma(subtree);\n        case Token.BLOCK:\n            return tryFoldBlock(subtree);\n        case Token.IF:\n        case Token.HOOK:\n            return tryFoldHookIf(subtree);\n        case Token.WHILE:\n            return tryFoldWhile(subtree);\n        case Token.FOR:\n            {\n                Node condition \u003d NodeUtil.getConditionExpression(subtree);\n                if (condition !\u003d null) {\n                    tryFoldForCondition(condition);\n                }\n            }\n            return tryFoldFor(subtree);\n        case Token.DO:\n            return tryFoldDo(subtree);\n        default:\n            return subtree;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java",
      "functionStartLine": 40,
      "functionName": "optimizeSubtree",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "e33e925eea3a8e4de958864e531e1adc4da62e18": {
      "type": "Yintroduced",
      "commitMessage": "\nChange on 2010/06/14 by johnlenz\n\n        Remove unneed parenthese from hook expressions.\n\n        R\u003dacleung\n        DELTA\u003d76  (20 added, 4 deleted, 52 changed)\n\nChange on 2010/06/14 by johnlenz\n\n        Fix non-determinisim.\n\n        R\u003djschorr\n        DELTA\u003d5  (3 added, 0 deleted, 2 changed)\n\nChange on 2010/06/15 by nicksantos\n\n        fix a regression caused by a change in the ordering in which\n        constant folding is done.\n        parts of PeepholeSubstituteAlternateSyntax will crash if they\n        see a NEG node with a NUMBER child.\n        They were assuming that FoldConstants would fold these into one node.\n\n        R\u003ddcc,acleung\n        DELTA\u003d153  (70 added, 6 deleted, 77 changed)\n\nChange on 2010/06/15 by johnlenz\n\n        More debug diffing improvements: convert unique globally unique names\n        to locally unique names for reproduciblity.\n\n        R\u003dacleung\n        DELTA\u003d222  (44 added, 7 deleted, 171 changed)\n\nChange on 2010/06/15 by nicksantos\n\n        Add the @nocompile annotation as a signal that this file should\n        be dropped silently if it gets pulled into a --manage_closure_dependencies\n        build.\n\n        R\u003dbowdidge,gboyer\n        DELTA\u003d82  (60 added, 1 deleted, 21 changed)\n\nChange on 2010/06/15 by dcc\n\n        Refactor FoldConstants dead code removal into PeepholeRemoveDeadCode.\n\n        R\u003dacleung\n        DELTA\u003d744  (403 added, 307 deleted, 34 changed)\n\nChange on 2010/06/15 by dcc\n\n        ExternExports test now emits type annotation for exported externs.\n                - Changed ExternExportsPass to generate the externs as an AST and then print\n        to a String rather than ad hoc with a StringBuilder.\n                - Changed TypedCodeGenerator to generate \u0027*\u0027 (AllType) for parameters with unknown types rather than \u0027?\u0027 (UnknownType) since \u0027?\u0027 is not valid JSDoc.\n\n        R\u003dacleung\n        DELTA\u003d643  (496 added, 66 deleted, 81 changed)\n\nChange on 2010/06/16 by johnlenz\n\n        Tweak to PureFunctionIndentifier to propagate the side-effects for\n        anonymous function expressions like: (Date.now||function(){return\n        +new Date})()\n\n        R\u003davd\n        DELTA\u003d42  (39 added, 0 deleted, 3 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d29010\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@243 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/16/10, 12:33 PM",
      "commitName": "e33e925eea3a8e4de958864e531e1adc4da62e18",
      "commitAuthor": "Nicholas.J.Santos",
      "diff": "@@ -0,0 +1,26 @@\n+@Override\n+Node optimizeSubtree(Node subtree) {\n+    switch(subtree.getType()) {\n+        case Token.COMMA:\n+            return tryFoldComma(subtree);\n+        case Token.BLOCK:\n+            return tryFoldBlock(subtree);\n+        case Token.IF:\n+        case Token.HOOK:\n+            return tryFoldHookIf(subtree);\n+        case Token.WHILE:\n+            return tryFoldWhile(subtree);\n+        case Token.FOR:\n+            {\n+                Node condition \u003d NodeUtil.getConditionExpression(subtree);\n+                if (condition !\u003d null) {\n+                    tryFoldForCondition(condition);\n+                }\n+            }\n+            return tryFoldFor(subtree);\n+        case Token.DO:\n+            return tryFoldDo(subtree);\n+        default:\n+            return subtree;\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\nNode optimizeSubtree(Node subtree) {\n    switch(subtree.getType()) {\n        case Token.COMMA:\n            return tryFoldComma(subtree);\n        case Token.BLOCK:\n            return tryFoldBlock(subtree);\n        case Token.IF:\n        case Token.HOOK:\n            return tryFoldHookIf(subtree);\n        case Token.WHILE:\n            return tryFoldWhile(subtree);\n        case Token.FOR:\n            {\n                Node condition \u003d NodeUtil.getConditionExpression(subtree);\n                if (condition !\u003d null) {\n                    tryFoldForCondition(condition);\n                }\n            }\n            return tryFoldFor(subtree);\n        case Token.DO:\n            return tryFoldDo(subtree);\n        default:\n            return subtree;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java",
      "functionStartLine": 40,
      "functionName": "optimizeSubtree",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}