{
  "origin": "codeshovel",
  "repositoryName": "Closure-64b",
  "repositoryPath": "/tmp/Closure-64b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ShadowVariables.java",
  "functionName": "enterScope",
  "functionId": "$enterScope___t-NodeTraversal",
  "sourceFilePath": "src/com/google/javascript/jscomp/ShadowVariables.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 176,
  "functionEndLine": 226,
  "numCommitsSeen": 5,
  "timeTaken": 853,
  "changeHistory": [
    "69c3608899f162b58555e4b5f9dab2719f9fbf11",
    "695eed613dede3a21f673cd18f89b39e086ddc45",
    "b6e3f5c01de00915df7682dba4e9a7f733630d34"
  ],
  "changeHistoryShort": {
    "69c3608899f162b58555e4b5f9dab2719f9fbf11": "Ybodychange",
    "695eed613dede3a21f673cd18f89b39e086ddc45": "Ybodychange",
    "b6e3f5c01de00915df7682dba4e9a7f733630d34": "Yintroduced"
  },
  "changeHistoryDetails": {
    "69c3608899f162b58555e4b5f9dab2719f9fbf11": {
      "type": "Ybodychange",
      "commitMessage": "\nFix incorrect pseudo names in shadow variables.\n\nR\u003dnicksantos\nDELTA\u003d48  (41 added, 0 deleted, 7 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1098\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@946 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/28/11, 2:45 PM",
      "commitName": "69c3608899f162b58555e4b5f9dab2719f9fbf11",
      "commitAuthor": "acleung@google.com",
      "commitDateOld": "3/16/11, 12:45 PM",
      "commitNameOld": "695eed613dede3a21f673cd18f89b39e086ddc45",
      "commitAuthorOld": "acleung@google.com",
      "daysBetweenCommits": 12.08,
      "commitsBetweenForRepo": 43,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void enterScope(NodeTraversal t) {\n    Scope s \u003d t.getScope();\n    if (!s.isLocal()) {\n        return;\n    }\n    if (s.getParent().isGlobal()) {\n        return;\n    }\n    for (Iterator\u003cVar\u003e vars \u003d s.getVars(); vars.hasNext(); ) {\n        Var var \u003d vars.next();\n        if (var.isBleedingFunction()) {\n            continue;\n        }\n        if (compiler.getCodingConvention().isExported(var.name, s.isLocal())) {\n            continue;\n        }\n        Assignment bestShadow \u003d findBestShadow(s, var);\n        if (bestShadow \u003d\u003d null) {\n            continue;\n        }\n        Assignment localAssignment \u003d assignments.get(var.getName());\n        if (bestShadow.count \u003c localAssignment.count) {\n            continue;\n        }\n        doShadow(localAssignment, bestShadow, var);\n        if (oldPseudoNameMap !\u003d null) {\n            String targetPseudoName \u003d oldPseudoNameMap.get(s.getVar(bestShadow.oldName).nameNode);\n            for (Node use : varToNameUsage.get(var)) {\n                deltaPseudoNameMap.put(use, targetPseudoName);\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/ShadowVariables.java",
      "functionStartLine": 176,
      "functionName": "enterScope",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,34 +1,34 @@\n @Override\n public void enterScope(NodeTraversal t) {\n     Scope s \u003d t.getScope();\n     if (!s.isLocal()) {\n         return;\n     }\n     if (s.getParent().isGlobal()) {\n         return;\n     }\n     for (Iterator\u003cVar\u003e vars \u003d s.getVars(); vars.hasNext(); ) {\n         Var var \u003d vars.next();\n         if (var.isBleedingFunction()) {\n             continue;\n         }\n         if (compiler.getCodingConvention().isExported(var.name, s.isLocal())) {\n             continue;\n         }\n         Assignment bestShadow \u003d findBestShadow(s, var);\n         if (bestShadow \u003d\u003d null) {\n             continue;\n         }\n         Assignment localAssignment \u003d assignments.get(var.getName());\n         if (bestShadow.count \u003c localAssignment.count) {\n             continue;\n         }\n         doShadow(localAssignment, bestShadow, var);\n-        if (pseudoNameMap !\u003d null) {\n-            String targetPseudoName \u003d pseudoNameMap.get(s.getVar(bestShadow.oldName).nameNode);\n+        if (oldPseudoNameMap !\u003d null) {\n+            String targetPseudoName \u003d oldPseudoNameMap.get(s.getVar(bestShadow.oldName).nameNode);\n             for (Node use : varToNameUsage.get(var)) {\n-                pseudoNameMap.put(use, targetPseudoName);\n+                deltaPseudoNameMap.put(use, targetPseudoName);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "695eed613dede3a21f673cd18f89b39e086ddc45": {
      "type": "Ybodychange",
      "commitMessage": "\nFix $super in variable name shadowing.\n\nR\u003djohnlenz\nDELTA\u003d17  (14 added, 0 deleted, 3 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d912\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@895 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/16/11, 12:45 PM",
      "commitName": "695eed613dede3a21f673cd18f89b39e086ddc45",
      "commitAuthor": "acleung@google.com",
      "commitDateOld": "2/22/11, 2:58 PM",
      "commitNameOld": "b6e3f5c01de00915df7682dba4e9a7f733630d34",
      "commitAuthorOld": "acleung@google.com",
      "daysBetweenCommits": 21.87,
      "commitsBetweenForRepo": 86,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void enterScope(NodeTraversal t) {\n    Scope s \u003d t.getScope();\n    if (!s.isLocal()) {\n        return;\n    }\n    if (s.getParent().isGlobal()) {\n        return;\n    }\n    for (Iterator\u003cVar\u003e vars \u003d s.getVars(); vars.hasNext(); ) {\n        Var var \u003d vars.next();\n        if (var.isBleedingFunction()) {\n            continue;\n        }\n        if (compiler.getCodingConvention().isExported(var.name, s.isLocal())) {\n            continue;\n        }\n        Assignment bestShadow \u003d findBestShadow(s, var);\n        if (bestShadow \u003d\u003d null) {\n            continue;\n        }\n        Assignment localAssignment \u003d assignments.get(var.getName());\n        if (bestShadow.count \u003c localAssignment.count) {\n            continue;\n        }\n        doShadow(localAssignment, bestShadow, var);\n        if (pseudoNameMap !\u003d null) {\n            String targetPseudoName \u003d pseudoNameMap.get(s.getVar(bestShadow.oldName).nameNode);\n            for (Node use : varToNameUsage.get(var)) {\n                pseudoNameMap.put(use, targetPseudoName);\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/ShadowVariables.java",
      "functionStartLine": 167,
      "functionName": "enterScope",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,31 +1,34 @@\n @Override\n public void enterScope(NodeTraversal t) {\n     Scope s \u003d t.getScope();\n     if (!s.isLocal()) {\n         return;\n     }\n     if (s.getParent().isGlobal()) {\n         return;\n     }\n     for (Iterator\u003cVar\u003e vars \u003d s.getVars(); vars.hasNext(); ) {\n         Var var \u003d vars.next();\n         if (var.isBleedingFunction()) {\n             continue;\n         }\n+        if (compiler.getCodingConvention().isExported(var.name, s.isLocal())) {\n+            continue;\n+        }\n         Assignment bestShadow \u003d findBestShadow(s, var);\n         if (bestShadow \u003d\u003d null) {\n             continue;\n         }\n         Assignment localAssignment \u003d assignments.get(var.getName());\n         if (bestShadow.count \u003c localAssignment.count) {\n             continue;\n         }\n         doShadow(localAssignment, bestShadow, var);\n         if (pseudoNameMap !\u003d null) {\n             String targetPseudoName \u003d pseudoNameMap.get(s.getVar(bestShadow.oldName).nameNode);\n             for (Node use : varToNameUsage.get(var)) {\n                 pseudoNameMap.put(use, targetPseudoName);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b6e3f5c01de00915df7682dba4e9a7f733630d34": {
      "type": "Yintroduced",
      "commitMessage": "\nShadows variables\n\nR\u003djohnlenz,nicksantos\nDELTA\u003d580  (531 added, 7 deleted, 42 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d639\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@808 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/22/11, 2:58 PM",
      "commitName": "b6e3f5c01de00915df7682dba4e9a7f733630d34",
      "commitAuthor": "acleung@google.com",
      "diff": "@@ -0,0 +1,31 @@\n+@Override\n+public void enterScope(NodeTraversal t) {\n+    Scope s \u003d t.getScope();\n+    if (!s.isLocal()) {\n+        return;\n+    }\n+    if (s.getParent().isGlobal()) {\n+        return;\n+    }\n+    for (Iterator\u003cVar\u003e vars \u003d s.getVars(); vars.hasNext(); ) {\n+        Var var \u003d vars.next();\n+        if (var.isBleedingFunction()) {\n+            continue;\n+        }\n+        Assignment bestShadow \u003d findBestShadow(s, var);\n+        if (bestShadow \u003d\u003d null) {\n+            continue;\n+        }\n+        Assignment localAssignment \u003d assignments.get(var.getName());\n+        if (bestShadow.count \u003c localAssignment.count) {\n+            continue;\n+        }\n+        doShadow(localAssignment, bestShadow, var);\n+        if (pseudoNameMap !\u003d null) {\n+            String targetPseudoName \u003d pseudoNameMap.get(s.getVar(bestShadow.oldName).nameNode);\n+            for (Node use : varToNameUsage.get(var)) {\n+                pseudoNameMap.put(use, targetPseudoName);\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic void enterScope(NodeTraversal t) {\n    Scope s \u003d t.getScope();\n    if (!s.isLocal()) {\n        return;\n    }\n    if (s.getParent().isGlobal()) {\n        return;\n    }\n    for (Iterator\u003cVar\u003e vars \u003d s.getVars(); vars.hasNext(); ) {\n        Var var \u003d vars.next();\n        if (var.isBleedingFunction()) {\n            continue;\n        }\n        Assignment bestShadow \u003d findBestShadow(s, var);\n        if (bestShadow \u003d\u003d null) {\n            continue;\n        }\n        Assignment localAssignment \u003d assignments.get(var.getName());\n        if (bestShadow.count \u003c localAssignment.count) {\n            continue;\n        }\n        doShadow(localAssignment, bestShadow, var);\n        if (pseudoNameMap !\u003d null) {\n            String targetPseudoName \u003d pseudoNameMap.get(s.getVar(bestShadow.oldName).nameNode);\n            for (Node use : varToNameUsage.get(var)) {\n                pseudoNameMap.put(use, targetPseudoName);\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/ShadowVariables.java",
      "functionStartLine": 167,
      "functionName": "enterScope",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}