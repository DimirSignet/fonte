{
  "origin": "codeshovel",
  "repositoryName": "Closure-64b",
  "repositoryPath": "/tmp/Closure-64b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JsDocInfoParser.java",
  "functionName": "parseParamTypeExpressionAnnotation",
  "functionId": "parseParamTypeExpressionAnnotation___token-JsDocToken",
  "sourceFilePath": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
  "functionAnnotation": "",
  "functionDoc": "ParamTypeExpressionAnnotation :\u003d\n    \u0027{\u0027 OptionalParameterType \u0027}\u0027 |\n    \u0027{\u0027 TopLevelTypeExpression \u0027}\u0027 |\n    \u0027{\u0027 \u0027...\u0027 TopLevelTypeExpression \u0027}\u0027\n\nOptionalParameterType :\u003d\n    TopLevelTypeExpression \u0027\u003d\u0027\n",
  "functionStartLine": 1511,
  "functionEndLine": 1546,
  "numCommitsSeen": 45,
  "timeTaken": 4947,
  "changeHistory": [
    "168bc14ff5e9e664863c3b1146f2a5b7a30ffb42",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "168bc14ff5e9e664863c3b1146f2a5b7a30ffb42": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "168bc14ff5e9e664863c3b1146f2a5b7a30ffb42": {
      "type": "Ybodychange",
      "commitMessage": "Add a pass for collecting symbols exported like window[\u0027x\u0027] \u003d ...\n\nFix for issue #70.\n\nAssorted minor bug fixes.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@31 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/11/09, 3:29 PM",
      "commitName": "168bc14ff5e9e664863c3b1146f2a5b7a30ffb42",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "12/1/09, 8:28 AM",
      "commitNameOld": "a478193982ce1fb9271e3f7ebcc1369913c9a859",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 10.29,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "private Node parseParamTypeExpressionAnnotation(JsDocToken token) {\n    Preconditions.checkArgument(token \u003d\u003d JsDocToken.LC);\n    skipEOLs();\n    boolean restArg \u003d false;\n    token \u003d next();\n    if (token \u003d\u003d JsDocToken.ELLIPSIS) {\n        token \u003d next();\n        if (token \u003d\u003d JsDocToken.RC) {\n            return wrapNode(Token.ELLIPSIS, new Node(Token.EMPTY));\n        }\n        restArg \u003d true;\n    }\n    Node typeNode \u003d parseTopLevelTypeExpression(token);\n    if (typeNode !\u003d null) {\n        skipEOLs();\n        if (restArg) {\n            typeNode \u003d wrapNode(Token.ELLIPSIS, typeNode);\n        } else if (match(JsDocToken.EQUALS)) {\n            next();\n            skipEOLs();\n            typeNode \u003d wrapNode(Token.EQUALS, typeNode);\n        }\n        if (!match(JsDocToken.RC)) {\n            reportTypeSyntaxWarning(\"msg.jsdoc.missing.rc\");\n        } else {\n            next();\n        }\n    }\n    return typeNode;\n}",
      "path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
      "functionStartLine": 1423,
      "functionName": "parseParamTypeExpressionAnnotation",
      "functionAnnotation": "",
      "functionDoc": "ParamTypeExpressionAnnotation :\u003d\n    \u0027{\u0027 OptionalParameterType \u0027}\u0027 |\n    \u0027{\u0027 TopLevelTypeExpression \u0027}\u0027 |\n    \u0027{\u0027 \u0027...\u0027 TopLevelTypeExpression \u0027}\u0027\n\nOptionalParameterType :\u003d\n    TopLevelTypeExpression \u0027\u003d\u0027\n",
      "diff": "@@ -1,27 +1,30 @@\n private Node parseParamTypeExpressionAnnotation(JsDocToken token) {\n     Preconditions.checkArgument(token \u003d\u003d JsDocToken.LC);\n     skipEOLs();\n     boolean restArg \u003d false;\n     token \u003d next();\n     if (token \u003d\u003d JsDocToken.ELLIPSIS) {\n         token \u003d next();\n+        if (token \u003d\u003d JsDocToken.RC) {\n+            return wrapNode(Token.ELLIPSIS, new Node(Token.EMPTY));\n+        }\n         restArg \u003d true;\n     }\n     Node typeNode \u003d parseTopLevelTypeExpression(token);\n     if (typeNode !\u003d null) {\n         skipEOLs();\n         if (restArg) {\n             typeNode \u003d wrapNode(Token.ELLIPSIS, typeNode);\n         } else if (match(JsDocToken.EQUALS)) {\n             next();\n             skipEOLs();\n             typeNode \u003d wrapNode(Token.EQUALS, typeNode);\n         }\n         if (!match(JsDocToken.RC)) {\n             reportTypeSyntaxWarning(\"msg.jsdoc.missing.rc\");\n         } else {\n             next();\n         }\n     }\n     return typeNode;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,27 @@\n+private Node parseParamTypeExpressionAnnotation(JsDocToken token) {\n+    Preconditions.checkArgument(token \u003d\u003d JsDocToken.LC);\n+    skipEOLs();\n+    boolean restArg \u003d false;\n+    token \u003d next();\n+    if (token \u003d\u003d JsDocToken.ELLIPSIS) {\n+        token \u003d next();\n+        restArg \u003d true;\n+    }\n+    Node typeNode \u003d parseTopLevelTypeExpression(token);\n+    if (typeNode !\u003d null) {\n+        skipEOLs();\n+        if (restArg) {\n+            typeNode \u003d wrapNode(Token.ELLIPSIS, typeNode);\n+        } else if (match(JsDocToken.EQUALS)) {\n+            next();\n+            skipEOLs();\n+            typeNode \u003d wrapNode(Token.EQUALS, typeNode);\n+        }\n+        if (!match(JsDocToken.RC)) {\n+            reportTypeSyntaxWarning(\"msg.jsdoc.missing.rc\");\n+        } else {\n+            next();\n+        }\n+    }\n+    return typeNode;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private Node parseParamTypeExpressionAnnotation(JsDocToken token) {\n    Preconditions.checkArgument(token \u003d\u003d JsDocToken.LC);\n    skipEOLs();\n    boolean restArg \u003d false;\n    token \u003d next();\n    if (token \u003d\u003d JsDocToken.ELLIPSIS) {\n        token \u003d next();\n        restArg \u003d true;\n    }\n    Node typeNode \u003d parseTopLevelTypeExpression(token);\n    if (typeNode !\u003d null) {\n        skipEOLs();\n        if (restArg) {\n            typeNode \u003d wrapNode(Token.ELLIPSIS, typeNode);\n        } else if (match(JsDocToken.EQUALS)) {\n            next();\n            skipEOLs();\n            typeNode \u003d wrapNode(Token.EQUALS, typeNode);\n        }\n        if (!match(JsDocToken.RC)) {\n            reportTypeSyntaxWarning(\"msg.jsdoc.missing.rc\");\n        } else {\n            next();\n        }\n    }\n    return typeNode;\n}",
      "path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
      "functionStartLine": 1382,
      "functionName": "parseParamTypeExpressionAnnotation",
      "functionAnnotation": "",
      "functionDoc": "ParamTypeExpressionAnnotation :\u003d\n    \u0027{\u0027 OptionalParameterType \u0027}\u0027 |\n    \u0027{\u0027 TopLevelTypeExpression \u0027}\u0027 |\n    \u0027{\u0027 \u0027...\u0027 TopLevelTypeExpression \u0027}\u0027\n\nOptionalParameterType :\u003d\n    TopLevelTypeExpression \u0027\u003d\u0027\n"
    }
  }
}