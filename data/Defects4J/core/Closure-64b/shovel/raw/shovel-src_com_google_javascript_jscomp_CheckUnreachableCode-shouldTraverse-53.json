{
  "origin": "codeshovel",
  "repositoryName": "Closure-64b",
  "repositoryPath": "/tmp/Closure-64b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CheckUnreachableCode.java",
  "functionName": "shouldTraverse",
  "functionId": "shouldTraverse___t-NodeTraversal__n-Node__parent-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/CheckUnreachableCode.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 53,
  "functionEndLine": 75,
  "numCommitsSeen": 14,
  "timeTaken": 408,
  "changeHistory": [
    "c669a68d9206402f0779338261351907bae9c26e",
    "7093341a5107e6afd7fb0145aa6e07991091047b",
    "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "c669a68d9206402f0779338261351907bae9c26e": "Ybodychange",
    "7093341a5107e6afd7fb0145aa6e07991091047b": "Ybodychange",
    "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c669a68d9206402f0779338261351907bae9c26e": {
      "type": "Ybodychange",
      "commitMessage": "\nAdd the \"uselessCode\" diagnostic group\nFix JSError.make so it works for CheckUnreachableCode.\n\nR\u003dacleung,ajp\nDELTA\u003d58  (14 added, 26 deleted, 18 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d714057\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@510 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/25/10, 1:52 PM",
      "commitName": "c669a68d9206402f0779338261351907bae9c26e",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "9/13/10, 11:12 AM",
      "commitNameOld": "4c6e1039b80859f17de5f3cbcfeba61ed8ea0485",
      "commitAuthorOld": "elbaum@google.com",
      "daysBetweenCommits": 42.11,
      "commitsBetweenForRepo": 85,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    GraphNode\u003cNode, Branch\u003e gNode \u003d t.getControlFlowGraph().getNode(n);\n    if (gNode !\u003d null \u0026\u0026 gNode.getAnnotation() !\u003d GraphReachability.REACHABLE) {\n        if (n.getLineno() !\u003d -1 \u0026\u0026 n.getType() !\u003d Token.EMPTY \u0026\u0026 n.getType() !\u003d Token.BREAK) {\n            compiler.report(t.makeError(n, level, UNREACHABLE_CODE));\n            new GraphReachability\u003cNode, ControlFlowGraph.Branch\u003e(t.getControlFlowGraph()).recompute(n);\n            return false;\n        }\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/jscomp/CheckUnreachableCode.java",
      "functionStartLine": 53,
      "functionName": "shouldTraverse",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,19 +1,12 @@\n @Override\n public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-    if (!shouldCheck(n)) {\n-        return false;\n-    }\n-    if (scopeNeedsInit) {\n-        initScope(t.getControlFlowGraph());\n-        scopeNeedsInit \u003d false;\n-    }\n     GraphNode\u003cNode, Branch\u003e gNode \u003d t.getControlFlowGraph().getNode(n);\n     if (gNode !\u003d null \u0026\u0026 gNode.getAnnotation() !\u003d GraphReachability.REACHABLE) {\n         if (n.getLineno() !\u003d -1 \u0026\u0026 n.getType() !\u003d Token.EMPTY \u0026\u0026 n.getType() !\u003d Token.BREAK) {\n             compiler.report(t.makeError(n, level, UNREACHABLE_CODE));\n             new GraphReachability\u003cNode, ControlFlowGraph.Branch\u003e(t.getControlFlowGraph()).recompute(n);\n             return false;\n         }\n     }\n     return true;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7093341a5107e6afd7fb0145aa6e07991091047b": {
      "type": "Ybodychange",
      "commitMessage": "\nAdd a \"@suppress {unreachable}\".\n\nR\u003dacleung\nDELTA\u003d92  (87 added, 2 deleted, 3 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d87016\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@341 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/5/10, 4:33 PM",
      "commitName": "7093341a5107e6afd7fb0145aa6e07991091047b",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "6/16/10, 12:33 PM",
      "commitNameOld": "e33e925eea3a8e4de958864e531e1adc4da62e18",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 50.17,
      "commitsBetweenForRepo": 96,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (!shouldCheck(n)) {\n        return false;\n    }\n    if (scopeNeedsInit) {\n        initScope(t.getControlFlowGraph());\n        scopeNeedsInit \u003d false;\n    }\n    GraphNode\u003cNode, Branch\u003e gNode \u003d t.getControlFlowGraph().getNode(n);\n    if (gNode !\u003d null \u0026\u0026 gNode.getAnnotation() !\u003d GraphReachability.REACHABLE) {\n        if (n.getLineno() !\u003d -1 \u0026\u0026 n.getType() !\u003d Token.EMPTY \u0026\u0026 n.getType() !\u003d Token.BREAK) {\n            compiler.report(t.makeError(n, level, UNREACHABLE_CODE));\n            new GraphReachability\u003cNode, ControlFlowGraph.Branch\u003e(t.getControlFlowGraph()).recompute(n);\n            return false;\n        }\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/jscomp/CheckUnreachableCode.java",
      "functionStartLine": 56,
      "functionName": "shouldTraverse",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,12 +1,19 @@\n @Override\n public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+    if (!shouldCheck(n)) {\n+        return false;\n+    }\n+    if (scopeNeedsInit) {\n+        initScope(t.getControlFlowGraph());\n+        scopeNeedsInit \u003d false;\n+    }\n     GraphNode\u003cNode, Branch\u003e gNode \u003d t.getControlFlowGraph().getNode(n);\n     if (gNode !\u003d null \u0026\u0026 gNode.getAnnotation() !\u003d GraphReachability.REACHABLE) {\n         if (n.getLineno() !\u003d -1 \u0026\u0026 n.getType() !\u003d Token.EMPTY \u0026\u0026 n.getType() !\u003d Token.BREAK) {\n             compiler.report(t.makeError(n, level, UNREACHABLE_CODE));\n             new GraphReachability\u003cNode, ControlFlowGraph.Branch\u003e(t.getControlFlowGraph()).recompute(n);\n             return false;\n         }\n     }\n     return true;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4": {
      "type": "Ybodychange",
      "commitMessage": "Remove circular dependency between error-reporting and the rest\nof the compiler. (Nick)\nR\u003dalan\nDELTA\u003d152  (27 added, 28 deleted, 97 changed)\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@159 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/29/10, 7:04 AM",
      "commitName": "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "11/3/09, 3:51 PM",
      "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 145.59,
      "commitsBetweenForRepo": 132,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    GraphNode\u003cNode, Branch\u003e gNode \u003d t.getControlFlowGraph().getNode(n);\n    if (gNode !\u003d null \u0026\u0026 gNode.getAnnotation() !\u003d GraphReachability.REACHABLE) {\n        if (n.getLineno() !\u003d -1 \u0026\u0026 n.getType() !\u003d Token.EMPTY \u0026\u0026 n.getType() !\u003d Token.BREAK) {\n            compiler.report(t.makeError(n, level, UNREACHABLE_CODE));\n            new GraphReachability\u003cNode, ControlFlowGraph.Branch\u003e(t.getControlFlowGraph()).recompute(n);\n            return false;\n        }\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/jscomp/CheckUnreachableCode.java",
      "functionStartLine": 54,
      "functionName": "shouldTraverse",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,12 +1,12 @@\n @Override\n public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n     GraphNode\u003cNode, Branch\u003e gNode \u003d t.getControlFlowGraph().getNode(n);\n     if (gNode !\u003d null \u0026\u0026 gNode.getAnnotation() !\u003d GraphReachability.REACHABLE) {\n         if (n.getLineno() !\u003d -1 \u0026\u0026 n.getType() !\u003d Token.EMPTY \u0026\u0026 n.getType() !\u003d Token.BREAK) {\n-            compiler.report(JSError.make(t, n, level, UNREACHABLE_CODE));\n+            compiler.report(t.makeError(n, level, UNREACHABLE_CODE));\n             new GraphReachability\u003cNode, ControlFlowGraph.Branch\u003e(t.getControlFlowGraph()).recompute(n);\n             return false;\n         }\n     }\n     return true;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,12 @@\n+@Override\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+    GraphNode\u003cNode, Branch\u003e gNode \u003d t.getControlFlowGraph().getNode(n);\n+    if (gNode !\u003d null \u0026\u0026 gNode.getAnnotation() !\u003d GraphReachability.REACHABLE) {\n+        if (n.getLineno() !\u003d -1 \u0026\u0026 n.getType() !\u003d Token.EMPTY \u0026\u0026 n.getType() !\u003d Token.BREAK) {\n+            compiler.report(JSError.make(t, n, level, UNREACHABLE_CODE));\n+            new GraphReachability\u003cNode, ControlFlowGraph.Branch\u003e(t.getControlFlowGraph()).recompute(n);\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    GraphNode\u003cNode, Branch\u003e gNode \u003d t.getControlFlowGraph().getNode(n);\n    if (gNode !\u003d null \u0026\u0026 gNode.getAnnotation() !\u003d GraphReachability.REACHABLE) {\n        if (n.getLineno() !\u003d -1 \u0026\u0026 n.getType() !\u003d Token.EMPTY \u0026\u0026 n.getType() !\u003d Token.BREAK) {\n            compiler.report(JSError.make(t, n, level, UNREACHABLE_CODE));\n            new GraphReachability\u003cNode, ControlFlowGraph.Branch\u003e(t.getControlFlowGraph()).recompute(n);\n            return false;\n        }\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/jscomp/CheckUnreachableCode.java",
      "functionStartLine": 54,
      "functionName": "shouldTraverse",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}