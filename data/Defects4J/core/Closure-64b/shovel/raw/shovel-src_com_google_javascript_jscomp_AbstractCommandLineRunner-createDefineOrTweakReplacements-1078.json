{
  "origin": "codeshovel",
  "repositoryName": "Closure-64b",
  "repositoryPath": "/tmp/Closure-64b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractCommandLineRunner.java",
  "functionName": "createDefineOrTweakReplacements",
  "functionId": "createDefineOrTweakReplacements___definitions-List__String____options-CompilerOptions__tweaks-boolean",
  "sourceFilePath": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
  "functionAnnotation": "@VisibleForTesting",
  "functionDoc": "Create a map of constant names to constant values from a textual\ndescription of the map.\n\n@param definitions A list of overriding definitions for defines in\n    the form \u003cname\u003e[\u003d\u003cval\u003e], where \u003cval\u003e is a number, boolean, or\n    single-quoted string without single quotes.\n",
  "functionStartLine": 1078,
  "functionEndLine": 1136,
  "numCommitsSeen": 98,
  "timeTaken": 3752,
  "changeHistory": [
    "606015f2b48ebaefb3cb1193d2b9d0310f3dc2f5",
    "7eaa0d8eca2549742649af34671eaf3da83b5c08",
    "848ace840362a1f5558bec065cb40548ff66587a",
    "ffe07f8c307c6b421cead64229eddb3602369f44"
  ],
  "changeHistoryShort": {
    "606015f2b48ebaefb3cb1193d2b9d0310f3dc2f5": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
    "7eaa0d8eca2549742649af34671eaf3da83b5c08": "Ybodychange",
    "848ace840362a1f5558bec065cb40548ff66587a": "Yfilerename",
    "ffe07f8c307c6b421cead64229eddb3602369f44": "Yintroduced"
  },
  "changeHistoryDetails": {
    "606015f2b48ebaefb3cb1193d2b9d0310f3dc2f5": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
      "commitMessage": "\n-Add command line options for the ProcessTweaks pass.\n\nR\u003dnicksantos\nDELTA\u003d202  (151 added, 22 deleted, 29 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d277\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@692 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/13/11, 11:07 AM",
      "commitName": "606015f2b48ebaefb3cb1193d2b9d0310f3dc2f5",
      "commitAuthor": "agrieve@google.com",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "\n-Add command line options for the ProcessTweaks pass.\n\nR\u003dnicksantos\nDELTA\u003d202  (151 added, 22 deleted, 29 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d277\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@692 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/13/11, 11:07 AM",
          "commitName": "606015f2b48ebaefb3cb1193d2b9d0310f3dc2f5",
          "commitAuthor": "agrieve@google.com",
          "commitDateOld": "11/18/10, 4:43 PM",
          "commitNameOld": "e94b5cc0f19b45dbd6fb65ea365f67d038e815ef",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 55.77,
          "commitsBetweenForRepo": 122,
          "commitsBetweenForFile": 1,
          "actualSource": "@VisibleForTesting\nstatic void createDefineOrTweakReplacements(List\u003cString\u003e definitions, CompilerOptions options, boolean tweaks) {\n    for (String override : definitions) {\n        String[] assignment \u003d override.split(\"\u003d\", 2);\n        String defName \u003d assignment[0];\n        if (defName.length() \u003e 0) {\n            String defValue \u003d assignment.length \u003d\u003d 1 ? \"true\" : assignment[1];\n            boolean isTrue \u003d defValue.equals(\"true\");\n            boolean isFalse \u003d defValue.equals(\"false\");\n            if (isTrue || isFalse) {\n                if (tweaks) {\n                    options.setTweakToBooleanLiteral(defName, isTrue);\n                } else {\n                    options.setDefineToBooleanLiteral(defName, isTrue);\n                }\n                continue;\n            } else if (defValue.length() \u003e 1 \u0026\u0026 ((defValue.charAt(0) \u003d\u003d \u0027\\\u0027\u0027 \u0026\u0026 defValue.charAt(defValue.length() - 1) \u003d\u003d \u0027\\\u0027\u0027) || (defValue.charAt(0) \u003d\u003d \u0027\\\"\u0027 \u0026\u0026 defValue.charAt(defValue.length() - 1) \u003d\u003d \u0027\\\"\u0027))) {\n                String maybeStringVal \u003d defValue.substring(1, defValue.length() - 1);\n                if (maybeStringVal.indexOf(defValue.charAt(0)) \u003d\u003d -1) {\n                    if (tweaks) {\n                        options.setTweakToStringLiteral(defName, maybeStringVal);\n                    } else {\n                        options.setDefineToStringLiteral(defName, maybeStringVal);\n                    }\n                    continue;\n                }\n            } else {\n                try {\n                    double value \u003d Double.parseDouble(defValue);\n                    if (tweaks) {\n                        options.setTweakToDoubleLiteral(defName, value);\n                    } else {\n                        options.setDefineToDoubleLiteral(defName, value);\n                    }\n                    continue;\n                } catch (NumberFormatException e) {\n                }\n            }\n        }\n        if (tweaks) {\n            throw new RuntimeException(\"--tweak flag syntax invalid: \" + override);\n        }\n        throw new RuntimeException(\"--define flag syntax invalid: \" + override);\n    }\n}",
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
          "functionStartLine": 994,
          "functionName": "createDefineOrTweakReplacements",
          "functionAnnotation": "@VisibleForTesting",
          "functionDoc": "Create a map of constant names to constant values from a textual\ndescription of the map.\n\n@param definitions A list of overriding definitions for defines in\n    the form \u003cname\u003e[\u003d\u003cval\u003e], where \u003cval\u003e is a number, boolean, or\n    single-quoted string without single quotes.\n",
          "diff": "@@ -1,35 +1,45 @@\n @VisibleForTesting\n-static void createDefineReplacements(List\u003cString\u003e definitions, CompilerOptions options) {\n+static void createDefineOrTweakReplacements(List\u003cString\u003e definitions, CompilerOptions options, boolean tweaks) {\n     for (String override : definitions) {\n         String[] assignment \u003d override.split(\"\u003d\", 2);\n         String defName \u003d assignment[0];\n         if (defName.length() \u003e 0) {\n-            if (assignment.length \u003d\u003d 1) {\n-                options.setDefineToBooleanLiteral(defName, true);\n-                continue;\n-            } else {\n-                String defValue \u003d assignment[1];\n-                if (defValue.equals(\"true\")) {\n-                    options.setDefineToBooleanLiteral(defName, true);\n-                    continue;\n-                } else if (defValue.equals(\"false\")) {\n-                    options.setDefineToBooleanLiteral(defName, false);\n-                    continue;\n-                } else if (defValue.length() \u003e 1 \u0026\u0026 ((defValue.charAt(0) \u003d\u003d \u0027\\\u0027\u0027 \u0026\u0026 defValue.charAt(defValue.length() - 1) \u003d\u003d \u0027\\\u0027\u0027) || (defValue.charAt(0) \u003d\u003d \u0027\\\"\u0027 \u0026\u0026 defValue.charAt(defValue.length() - 1) \u003d\u003d \u0027\\\"\u0027))) {\n-                    String maybeStringVal \u003d defValue.substring(1, defValue.length() - 1);\n-                    if (maybeStringVal.indexOf(defValue.charAt(0)) \u003d\u003d -1) {\n-                        options.setDefineToStringLiteral(defName, maybeStringVal);\n-                        continue;\n-                    }\n+            String defValue \u003d assignment.length \u003d\u003d 1 ? \"true\" : assignment[1];\n+            boolean isTrue \u003d defValue.equals(\"true\");\n+            boolean isFalse \u003d defValue.equals(\"false\");\n+            if (isTrue || isFalse) {\n+                if (tweaks) {\n+                    options.setTweakToBooleanLiteral(defName, isTrue);\n                 } else {\n-                    try {\n-                        options.setDefineToDoubleLiteral(defName, Double.parseDouble(defValue));\n-                        continue;\n-                    } catch (NumberFormatException e) {\n+                    options.setDefineToBooleanLiteral(defName, isTrue);\n+                }\n+                continue;\n+            } else if (defValue.length() \u003e 1 \u0026\u0026 ((defValue.charAt(0) \u003d\u003d \u0027\\\u0027\u0027 \u0026\u0026 defValue.charAt(defValue.length() - 1) \u003d\u003d \u0027\\\u0027\u0027) || (defValue.charAt(0) \u003d\u003d \u0027\\\"\u0027 \u0026\u0026 defValue.charAt(defValue.length() - 1) \u003d\u003d \u0027\\\"\u0027))) {\n+                String maybeStringVal \u003d defValue.substring(1, defValue.length() - 1);\n+                if (maybeStringVal.indexOf(defValue.charAt(0)) \u003d\u003d -1) {\n+                    if (tweaks) {\n+                        options.setTweakToStringLiteral(defName, maybeStringVal);\n+                    } else {\n+                        options.setDefineToStringLiteral(defName, maybeStringVal);\n                     }\n+                    continue;\n+                }\n+            } else {\n+                try {\n+                    double value \u003d Double.parseDouble(defValue);\n+                    if (tweaks) {\n+                        options.setTweakToDoubleLiteral(defName, value);\n+                    } else {\n+                        options.setDefineToDoubleLiteral(defName, value);\n+                    }\n+                    continue;\n+                } catch (NumberFormatException e) {\n                 }\n             }\n         }\n+        if (tweaks) {\n+            throw new RuntimeException(\"--tweak flag syntax invalid: \" + override);\n+        }\n         throw new RuntimeException(\"--define flag syntax invalid: \" + override);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "createDefineReplacements",
            "newValue": "createDefineOrTweakReplacements"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "\n-Add command line options for the ProcessTweaks pass.\n\nR\u003dnicksantos\nDELTA\u003d202  (151 added, 22 deleted, 29 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d277\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@692 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/13/11, 11:07 AM",
          "commitName": "606015f2b48ebaefb3cb1193d2b9d0310f3dc2f5",
          "commitAuthor": "agrieve@google.com",
          "commitDateOld": "11/18/10, 4:43 PM",
          "commitNameOld": "e94b5cc0f19b45dbd6fb65ea365f67d038e815ef",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 55.77,
          "commitsBetweenForRepo": 122,
          "commitsBetweenForFile": 1,
          "actualSource": "@VisibleForTesting\nstatic void createDefineOrTweakReplacements(List\u003cString\u003e definitions, CompilerOptions options, boolean tweaks) {\n    for (String override : definitions) {\n        String[] assignment \u003d override.split(\"\u003d\", 2);\n        String defName \u003d assignment[0];\n        if (defName.length() \u003e 0) {\n            String defValue \u003d assignment.length \u003d\u003d 1 ? \"true\" : assignment[1];\n            boolean isTrue \u003d defValue.equals(\"true\");\n            boolean isFalse \u003d defValue.equals(\"false\");\n            if (isTrue || isFalse) {\n                if (tweaks) {\n                    options.setTweakToBooleanLiteral(defName, isTrue);\n                } else {\n                    options.setDefineToBooleanLiteral(defName, isTrue);\n                }\n                continue;\n            } else if (defValue.length() \u003e 1 \u0026\u0026 ((defValue.charAt(0) \u003d\u003d \u0027\\\u0027\u0027 \u0026\u0026 defValue.charAt(defValue.length() - 1) \u003d\u003d \u0027\\\u0027\u0027) || (defValue.charAt(0) \u003d\u003d \u0027\\\"\u0027 \u0026\u0026 defValue.charAt(defValue.length() - 1) \u003d\u003d \u0027\\\"\u0027))) {\n                String maybeStringVal \u003d defValue.substring(1, defValue.length() - 1);\n                if (maybeStringVal.indexOf(defValue.charAt(0)) \u003d\u003d -1) {\n                    if (tweaks) {\n                        options.setTweakToStringLiteral(defName, maybeStringVal);\n                    } else {\n                        options.setDefineToStringLiteral(defName, maybeStringVal);\n                    }\n                    continue;\n                }\n            } else {\n                try {\n                    double value \u003d Double.parseDouble(defValue);\n                    if (tweaks) {\n                        options.setTweakToDoubleLiteral(defName, value);\n                    } else {\n                        options.setDefineToDoubleLiteral(defName, value);\n                    }\n                    continue;\n                } catch (NumberFormatException e) {\n                }\n            }\n        }\n        if (tweaks) {\n            throw new RuntimeException(\"--tweak flag syntax invalid: \" + override);\n        }\n        throw new RuntimeException(\"--define flag syntax invalid: \" + override);\n    }\n}",
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
          "functionStartLine": 994,
          "functionName": "createDefineOrTweakReplacements",
          "functionAnnotation": "@VisibleForTesting",
          "functionDoc": "Create a map of constant names to constant values from a textual\ndescription of the map.\n\n@param definitions A list of overriding definitions for defines in\n    the form \u003cname\u003e[\u003d\u003cval\u003e], where \u003cval\u003e is a number, boolean, or\n    single-quoted string without single quotes.\n",
          "diff": "@@ -1,35 +1,45 @@\n @VisibleForTesting\n-static void createDefineReplacements(List\u003cString\u003e definitions, CompilerOptions options) {\n+static void createDefineOrTweakReplacements(List\u003cString\u003e definitions, CompilerOptions options, boolean tweaks) {\n     for (String override : definitions) {\n         String[] assignment \u003d override.split(\"\u003d\", 2);\n         String defName \u003d assignment[0];\n         if (defName.length() \u003e 0) {\n-            if (assignment.length \u003d\u003d 1) {\n-                options.setDefineToBooleanLiteral(defName, true);\n-                continue;\n-            } else {\n-                String defValue \u003d assignment[1];\n-                if (defValue.equals(\"true\")) {\n-                    options.setDefineToBooleanLiteral(defName, true);\n-                    continue;\n-                } else if (defValue.equals(\"false\")) {\n-                    options.setDefineToBooleanLiteral(defName, false);\n-                    continue;\n-                } else if (defValue.length() \u003e 1 \u0026\u0026 ((defValue.charAt(0) \u003d\u003d \u0027\\\u0027\u0027 \u0026\u0026 defValue.charAt(defValue.length() - 1) \u003d\u003d \u0027\\\u0027\u0027) || (defValue.charAt(0) \u003d\u003d \u0027\\\"\u0027 \u0026\u0026 defValue.charAt(defValue.length() - 1) \u003d\u003d \u0027\\\"\u0027))) {\n-                    String maybeStringVal \u003d defValue.substring(1, defValue.length() - 1);\n-                    if (maybeStringVal.indexOf(defValue.charAt(0)) \u003d\u003d -1) {\n-                        options.setDefineToStringLiteral(defName, maybeStringVal);\n-                        continue;\n-                    }\n+            String defValue \u003d assignment.length \u003d\u003d 1 ? \"true\" : assignment[1];\n+            boolean isTrue \u003d defValue.equals(\"true\");\n+            boolean isFalse \u003d defValue.equals(\"false\");\n+            if (isTrue || isFalse) {\n+                if (tweaks) {\n+                    options.setTweakToBooleanLiteral(defName, isTrue);\n                 } else {\n-                    try {\n-                        options.setDefineToDoubleLiteral(defName, Double.parseDouble(defValue));\n-                        continue;\n-                    } catch (NumberFormatException e) {\n+                    options.setDefineToBooleanLiteral(defName, isTrue);\n+                }\n+                continue;\n+            } else if (defValue.length() \u003e 1 \u0026\u0026 ((defValue.charAt(0) \u003d\u003d \u0027\\\u0027\u0027 \u0026\u0026 defValue.charAt(defValue.length() - 1) \u003d\u003d \u0027\\\u0027\u0027) || (defValue.charAt(0) \u003d\u003d \u0027\\\"\u0027 \u0026\u0026 defValue.charAt(defValue.length() - 1) \u003d\u003d \u0027\\\"\u0027))) {\n+                String maybeStringVal \u003d defValue.substring(1, defValue.length() - 1);\n+                if (maybeStringVal.indexOf(defValue.charAt(0)) \u003d\u003d -1) {\n+                    if (tweaks) {\n+                        options.setTweakToStringLiteral(defName, maybeStringVal);\n+                    } else {\n+                        options.setDefineToStringLiteral(defName, maybeStringVal);\n                     }\n+                    continue;\n+                }\n+            } else {\n+                try {\n+                    double value \u003d Double.parseDouble(defValue);\n+                    if (tweaks) {\n+                        options.setTweakToDoubleLiteral(defName, value);\n+                    } else {\n+                        options.setDefineToDoubleLiteral(defName, value);\n+                    }\n+                    continue;\n+                } catch (NumberFormatException e) {\n                 }\n             }\n         }\n+        if (tweaks) {\n+            throw new RuntimeException(\"--tweak flag syntax invalid: \" + override);\n+        }\n         throw new RuntimeException(\"--define flag syntax invalid: \" + override);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[definitions-List\u003cString\u003e, options-CompilerOptions]",
            "newValue": "[definitions-List\u003cString\u003e, options-CompilerOptions, tweaks-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\n-Add command line options for the ProcessTweaks pass.\n\nR\u003dnicksantos\nDELTA\u003d202  (151 added, 22 deleted, 29 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d277\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@692 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/13/11, 11:07 AM",
          "commitName": "606015f2b48ebaefb3cb1193d2b9d0310f3dc2f5",
          "commitAuthor": "agrieve@google.com",
          "commitDateOld": "11/18/10, 4:43 PM",
          "commitNameOld": "e94b5cc0f19b45dbd6fb65ea365f67d038e815ef",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 55.77,
          "commitsBetweenForRepo": 122,
          "commitsBetweenForFile": 1,
          "actualSource": "@VisibleForTesting\nstatic void createDefineOrTweakReplacements(List\u003cString\u003e definitions, CompilerOptions options, boolean tweaks) {\n    for (String override : definitions) {\n        String[] assignment \u003d override.split(\"\u003d\", 2);\n        String defName \u003d assignment[0];\n        if (defName.length() \u003e 0) {\n            String defValue \u003d assignment.length \u003d\u003d 1 ? \"true\" : assignment[1];\n            boolean isTrue \u003d defValue.equals(\"true\");\n            boolean isFalse \u003d defValue.equals(\"false\");\n            if (isTrue || isFalse) {\n                if (tweaks) {\n                    options.setTweakToBooleanLiteral(defName, isTrue);\n                } else {\n                    options.setDefineToBooleanLiteral(defName, isTrue);\n                }\n                continue;\n            } else if (defValue.length() \u003e 1 \u0026\u0026 ((defValue.charAt(0) \u003d\u003d \u0027\\\u0027\u0027 \u0026\u0026 defValue.charAt(defValue.length() - 1) \u003d\u003d \u0027\\\u0027\u0027) || (defValue.charAt(0) \u003d\u003d \u0027\\\"\u0027 \u0026\u0026 defValue.charAt(defValue.length() - 1) \u003d\u003d \u0027\\\"\u0027))) {\n                String maybeStringVal \u003d defValue.substring(1, defValue.length() - 1);\n                if (maybeStringVal.indexOf(defValue.charAt(0)) \u003d\u003d -1) {\n                    if (tweaks) {\n                        options.setTweakToStringLiteral(defName, maybeStringVal);\n                    } else {\n                        options.setDefineToStringLiteral(defName, maybeStringVal);\n                    }\n                    continue;\n                }\n            } else {\n                try {\n                    double value \u003d Double.parseDouble(defValue);\n                    if (tweaks) {\n                        options.setTweakToDoubleLiteral(defName, value);\n                    } else {\n                        options.setDefineToDoubleLiteral(defName, value);\n                    }\n                    continue;\n                } catch (NumberFormatException e) {\n                }\n            }\n        }\n        if (tweaks) {\n            throw new RuntimeException(\"--tweak flag syntax invalid: \" + override);\n        }\n        throw new RuntimeException(\"--define flag syntax invalid: \" + override);\n    }\n}",
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
          "functionStartLine": 994,
          "functionName": "createDefineOrTweakReplacements",
          "functionAnnotation": "@VisibleForTesting",
          "functionDoc": "Create a map of constant names to constant values from a textual\ndescription of the map.\n\n@param definitions A list of overriding definitions for defines in\n    the form \u003cname\u003e[\u003d\u003cval\u003e], where \u003cval\u003e is a number, boolean, or\n    single-quoted string without single quotes.\n",
          "diff": "@@ -1,35 +1,45 @@\n @VisibleForTesting\n-static void createDefineReplacements(List\u003cString\u003e definitions, CompilerOptions options) {\n+static void createDefineOrTweakReplacements(List\u003cString\u003e definitions, CompilerOptions options, boolean tweaks) {\n     for (String override : definitions) {\n         String[] assignment \u003d override.split(\"\u003d\", 2);\n         String defName \u003d assignment[0];\n         if (defName.length() \u003e 0) {\n-            if (assignment.length \u003d\u003d 1) {\n-                options.setDefineToBooleanLiteral(defName, true);\n-                continue;\n-            } else {\n-                String defValue \u003d assignment[1];\n-                if (defValue.equals(\"true\")) {\n-                    options.setDefineToBooleanLiteral(defName, true);\n-                    continue;\n-                } else if (defValue.equals(\"false\")) {\n-                    options.setDefineToBooleanLiteral(defName, false);\n-                    continue;\n-                } else if (defValue.length() \u003e 1 \u0026\u0026 ((defValue.charAt(0) \u003d\u003d \u0027\\\u0027\u0027 \u0026\u0026 defValue.charAt(defValue.length() - 1) \u003d\u003d \u0027\\\u0027\u0027) || (defValue.charAt(0) \u003d\u003d \u0027\\\"\u0027 \u0026\u0026 defValue.charAt(defValue.length() - 1) \u003d\u003d \u0027\\\"\u0027))) {\n-                    String maybeStringVal \u003d defValue.substring(1, defValue.length() - 1);\n-                    if (maybeStringVal.indexOf(defValue.charAt(0)) \u003d\u003d -1) {\n-                        options.setDefineToStringLiteral(defName, maybeStringVal);\n-                        continue;\n-                    }\n+            String defValue \u003d assignment.length \u003d\u003d 1 ? \"true\" : assignment[1];\n+            boolean isTrue \u003d defValue.equals(\"true\");\n+            boolean isFalse \u003d defValue.equals(\"false\");\n+            if (isTrue || isFalse) {\n+                if (tweaks) {\n+                    options.setTweakToBooleanLiteral(defName, isTrue);\n                 } else {\n-                    try {\n-                        options.setDefineToDoubleLiteral(defName, Double.parseDouble(defValue));\n-                        continue;\n-                    } catch (NumberFormatException e) {\n+                    options.setDefineToBooleanLiteral(defName, isTrue);\n+                }\n+                continue;\n+            } else if (defValue.length() \u003e 1 \u0026\u0026 ((defValue.charAt(0) \u003d\u003d \u0027\\\u0027\u0027 \u0026\u0026 defValue.charAt(defValue.length() - 1) \u003d\u003d \u0027\\\u0027\u0027) || (defValue.charAt(0) \u003d\u003d \u0027\\\"\u0027 \u0026\u0026 defValue.charAt(defValue.length() - 1) \u003d\u003d \u0027\\\"\u0027))) {\n+                String maybeStringVal \u003d defValue.substring(1, defValue.length() - 1);\n+                if (maybeStringVal.indexOf(defValue.charAt(0)) \u003d\u003d -1) {\n+                    if (tweaks) {\n+                        options.setTweakToStringLiteral(defName, maybeStringVal);\n+                    } else {\n+                        options.setDefineToStringLiteral(defName, maybeStringVal);\n                     }\n+                    continue;\n+                }\n+            } else {\n+                try {\n+                    double value \u003d Double.parseDouble(defValue);\n+                    if (tweaks) {\n+                        options.setTweakToDoubleLiteral(defName, value);\n+                    } else {\n+                        options.setDefineToDoubleLiteral(defName, value);\n+                    }\n+                    continue;\n+                } catch (NumberFormatException e) {\n                 }\n             }\n         }\n+        if (tweaks) {\n+            throw new RuntimeException(\"--tweak flag syntax invalid: \" + override);\n+        }\n         throw new RuntimeException(\"--define flag syntax invalid: \" + override);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "7eaa0d8eca2549742649af34671eaf3da83b5c08": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/04/06 by john\n\n        Update RemoveConstantExpressions to handle removing expressions whose\n        roots are calls to functions without side-effects.\n\n        R\u003dantonio\n        DELTA\u003d19  (18 added, 0 deleted, 1 changed)\n\nChange on 2010/04/06 by john\n\n        Cleanup NodeUtil self references.\n\n        R\u003drobert\n        DELTA\u003d12  (0 added, 0 deleted, 12 changed)\n\nChange on 2010/04/07 by john\n\n        Make things easier for shell escaping, accept both single and double\n        quotes for strings in --define flags.\n        Fixes issue 139.\n\n        R\u003drobert\n        DELTA\u003d18  (14 added, 0 deleted, 4 changed)\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dwdwbvk\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@173 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/7/10, 11:34 AM",
      "commitName": "7eaa0d8eca2549742649af34671eaf3da83b5c08",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "3/30/10, 9:01 PM",
      "commitNameOld": "8c5eb247cb5361a6ffa2d86aa4c2de17c234bda7",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 7.61,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "@VisibleForTesting\nstatic void createDefineReplacements(List\u003cString\u003e definitions, CompilerOptions options) {\n    for (String override : definitions) {\n        String[] assignment \u003d override.split(\"\u003d\", 2);\n        String defName \u003d assignment[0];\n        if (defName.length() \u003e 0) {\n            if (assignment.length \u003d\u003d 1) {\n                options.setDefineToBooleanLiteral(defName, true);\n                continue;\n            } else {\n                String defValue \u003d assignment[1];\n                if (defValue.equals(\"true\")) {\n                    options.setDefineToBooleanLiteral(defName, true);\n                    continue;\n                } else if (defValue.equals(\"false\")) {\n                    options.setDefineToBooleanLiteral(defName, false);\n                    continue;\n                } else if (defValue.length() \u003e 1 \u0026\u0026 ((defValue.charAt(0) \u003d\u003d \u0027\\\u0027\u0027 \u0026\u0026 defValue.charAt(defValue.length() - 1) \u003d\u003d \u0027\\\u0027\u0027) || (defValue.charAt(0) \u003d\u003d \u0027\\\"\u0027 \u0026\u0026 defValue.charAt(defValue.length() - 1) \u003d\u003d \u0027\\\"\u0027))) {\n                    String maybeStringVal \u003d defValue.substring(1, defValue.length() - 1);\n                    if (maybeStringVal.indexOf(defValue.charAt(0)) \u003d\u003d -1) {\n                        options.setDefineToStringLiteral(defName, maybeStringVal);\n                        continue;\n                    }\n                } else {\n                    try {\n                        options.setDefineToDoubleLiteral(defName, Double.parseDouble(defValue));\n                        continue;\n                    } catch (NumberFormatException e) {\n                    }\n                }\n            }\n        }\n        throw new RuntimeException(\"--define flag syntax invalid: \" + override);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
      "functionStartLine": 848,
      "functionName": "createDefineReplacements",
      "functionAnnotation": "@VisibleForTesting",
      "functionDoc": "Create a map of constant names to constant values from a textual\ndescription of the map.\n\n@param definitions A list of overriding definitions for defines in\n    the form \u003cname\u003e[\u003d\u003cval\u003e], where \u003cval\u003e is a number, boolean, or\n    single-quoted string without single quotes.\n",
      "diff": "@@ -1,35 +1,35 @@\n @VisibleForTesting\n static void createDefineReplacements(List\u003cString\u003e definitions, CompilerOptions options) {\n     for (String override : definitions) {\n         String[] assignment \u003d override.split(\"\u003d\", 2);\n         String defName \u003d assignment[0];\n         if (defName.length() \u003e 0) {\n             if (assignment.length \u003d\u003d 1) {\n                 options.setDefineToBooleanLiteral(defName, true);\n                 continue;\n             } else {\n                 String defValue \u003d assignment[1];\n                 if (defValue.equals(\"true\")) {\n                     options.setDefineToBooleanLiteral(defName, true);\n                     continue;\n                 } else if (defValue.equals(\"false\")) {\n                     options.setDefineToBooleanLiteral(defName, false);\n                     continue;\n-                } else if (defValue.length() \u003e 1 \u0026\u0026 defValue.charAt(0) \u003d\u003d \u0027\\\u0027\u0027 \u0026\u0026 defValue.charAt(defValue.length() - 1) \u003d\u003d \u0027\\\u0027\u0027) {\n+                } else if (defValue.length() \u003e 1 \u0026\u0026 ((defValue.charAt(0) \u003d\u003d \u0027\\\u0027\u0027 \u0026\u0026 defValue.charAt(defValue.length() - 1) \u003d\u003d \u0027\\\u0027\u0027) || (defValue.charAt(0) \u003d\u003d \u0027\\\"\u0027 \u0026\u0026 defValue.charAt(defValue.length() - 1) \u003d\u003d \u0027\\\"\u0027))) {\n                     String maybeStringVal \u003d defValue.substring(1, defValue.length() - 1);\n-                    if (maybeStringVal.indexOf(\u0027\\\u0027\u0027) \u003d\u003d -1) {\n+                    if (maybeStringVal.indexOf(defValue.charAt(0)) \u003d\u003d -1) {\n                         options.setDefineToStringLiteral(defName, maybeStringVal);\n                         continue;\n                     }\n                 } else {\n                     try {\n                         options.setDefineToDoubleLiteral(defName, Double.parseDouble(defValue));\n                         continue;\n                     } catch (NumberFormatException e) {\n                     }\n                 }\n             }\n         }\n         throw new RuntimeException(\"--define flag syntax invalid: \" + override);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "848ace840362a1f5558bec065cb40548ff66587a": {
      "type": "Yfilerename",
      "commitMessage": "Rename CompilerRunner -\u003e CommandLineRunner.\nI\u0027ll also do this for JSCompilerRunner, but it will be a much\nbigger change. (Nick)\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@119 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/26/10, 6:04 PM",
      "commitName": "848ace840362a1f5558bec065cb40548ff66587a",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "2/26/10, 3:45 PM",
      "commitNameOld": "50c1b3d39ff5b17c956a2235f97f7b5da05ab6f0",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@VisibleForTesting\nstatic void createDefineReplacements(List\u003cString\u003e definitions, CompilerOptions options) {\n    for (String override : definitions) {\n        String[] assignment \u003d override.split(\"\u003d\", 2);\n        String defName \u003d assignment[0];\n        if (defName.length() \u003e 0) {\n            if (assignment.length \u003d\u003d 1) {\n                options.setDefineToBooleanLiteral(defName, true);\n                continue;\n            } else {\n                String defValue \u003d assignment[1];\n                if (defValue.equals(\"true\")) {\n                    options.setDefineToBooleanLiteral(defName, true);\n                    continue;\n                } else if (defValue.equals(\"false\")) {\n                    options.setDefineToBooleanLiteral(defName, false);\n                    continue;\n                } else if (defValue.length() \u003e 1 \u0026\u0026 defValue.charAt(0) \u003d\u003d \u0027\\\u0027\u0027 \u0026\u0026 defValue.charAt(defValue.length() - 1) \u003d\u003d \u0027\\\u0027\u0027) {\n                    String maybeStringVal \u003d defValue.substring(1, defValue.length() - 1);\n                    if (maybeStringVal.indexOf(\u0027\\\u0027\u0027) \u003d\u003d -1) {\n                        options.setDefineToStringLiteral(defName, maybeStringVal);\n                        continue;\n                    }\n                } else {\n                    try {\n                        options.setDefineToDoubleLiteral(defName, Double.parseDouble(defValue));\n                        continue;\n                    } catch (NumberFormatException e) {\n                    }\n                }\n            }\n        }\n        throw new RuntimeException(\"--define flag syntax invalid: \" + override);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
      "functionStartLine": 1002,
      "functionName": "createDefineReplacements",
      "functionAnnotation": "@VisibleForTesting",
      "functionDoc": "Create a map of constant names to constant values from a textual\ndescription of the map.\n\n@param definitions A list of overriding definitions for defines in\n    the form \u003cname\u003e[\u003d\u003cval\u003e], where \u003cval\u003e is a number, boolean, or\n    single-quoted string without single quotes.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/com/google/javascript/jscomp/AbstractCompilerRunner.java",
        "newPath": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java"
      }
    },
    "ffe07f8c307c6b421cead64229eddb3602369f44": {
      "type": "Yintroduced",
      "commitMessage": "Add --define flag to the API.\nRemove the warning for ambiguous function definitions: it\u0027s not yet fully baked.\nFix a bug in data-flow based variable inlining.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@16 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/30/09, 9:30 AM",
      "commitName": "ffe07f8c307c6b421cead64229eddb3602369f44",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,35 @@\n+@VisibleForTesting\n+static void createDefineReplacements(List\u003cString\u003e definitions, CompilerOptions options) {\n+    for (String override : definitions) {\n+        String[] assignment \u003d override.split(\"\u003d\", 2);\n+        String defName \u003d assignment[0];\n+        if (defName.length() \u003e 0) {\n+            if (assignment.length \u003d\u003d 1) {\n+                options.setDefineToBooleanLiteral(defName, true);\n+                continue;\n+            } else {\n+                String defValue \u003d assignment[1];\n+                if (defValue.equals(\"true\")) {\n+                    options.setDefineToBooleanLiteral(defName, true);\n+                    continue;\n+                } else if (defValue.equals(\"false\")) {\n+                    options.setDefineToBooleanLiteral(defName, false);\n+                    continue;\n+                } else if (defValue.length() \u003e 1 \u0026\u0026 defValue.charAt(0) \u003d\u003d \u0027\\\u0027\u0027 \u0026\u0026 defValue.charAt(defValue.length() - 1) \u003d\u003d \u0027\\\u0027\u0027) {\n+                    String maybeStringVal \u003d defValue.substring(1, defValue.length() - 1);\n+                    if (maybeStringVal.indexOf(\u0027\\\u0027\u0027) \u003d\u003d -1) {\n+                        options.setDefineToStringLiteral(defName, maybeStringVal);\n+                        continue;\n+                    }\n+                } else {\n+                    try {\n+                        options.setDefineToDoubleLiteral(defName, Double.parseDouble(defValue));\n+                        continue;\n+                    } catch (NumberFormatException e) {\n+                    }\n+                }\n+            }\n+        }\n+        throw new RuntimeException(\"--define flag syntax invalid: \" + override);\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "@VisibleForTesting\nstatic void createDefineReplacements(List\u003cString\u003e definitions, CompilerOptions options) {\n    for (String override : definitions) {\n        String[] assignment \u003d override.split(\"\u003d\", 2);\n        String defName \u003d assignment[0];\n        if (defName.length() \u003e 0) {\n            if (assignment.length \u003d\u003d 1) {\n                options.setDefineToBooleanLiteral(defName, true);\n                continue;\n            } else {\n                String defValue \u003d assignment[1];\n                if (defValue.equals(\"true\")) {\n                    options.setDefineToBooleanLiteral(defName, true);\n                    continue;\n                } else if (defValue.equals(\"false\")) {\n                    options.setDefineToBooleanLiteral(defName, false);\n                    continue;\n                } else if (defValue.length() \u003e 1 \u0026\u0026 defValue.charAt(0) \u003d\u003d \u0027\\\u0027\u0027 \u0026\u0026 defValue.charAt(defValue.length() - 1) \u003d\u003d \u0027\\\u0027\u0027) {\n                    String maybeStringVal \u003d defValue.substring(1, defValue.length() - 1);\n                    if (maybeStringVal.indexOf(\u0027\\\u0027\u0027) \u003d\u003d -1) {\n                        options.setDefineToStringLiteral(defName, maybeStringVal);\n                        continue;\n                    }\n                } else {\n                    try {\n                        options.setDefineToDoubleLiteral(defName, Double.parseDouble(defValue));\n                        continue;\n                    } catch (NumberFormatException e) {\n                    }\n                }\n            }\n        }\n        throw new RuntimeException(\"--define flag syntax invalid: \" + override);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/AbstractCompilerRunner.java",
      "functionStartLine": 905,
      "functionName": "createDefineReplacements",
      "functionAnnotation": "@VisibleForTesting",
      "functionDoc": "Create a map of constant names to constant values from a textual\ndescription of the map.\n\n@param definitions A list of overriding definitions for defines in\n    the form \u003cname\u003e[\u003d\u003cval\u003e], where \u003cval\u003e is a number, boolean, or\n    single-quoted string without single quotes.\n"
    }
  }
}