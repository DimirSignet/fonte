{
  "origin": "codeshovel",
  "repositoryName": "Closure-64b",
  "repositoryPath": "/tmp/Closure-64b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FunctionType.java",
  "functionName": "isSubtype",
  "functionId": "isSubtype___that-JSType",
  "sourceFilePath": "src/com/google/javascript/rhino/jstype/FunctionType.java",
  "functionAnnotation": "@Override",
  "functionDoc": "A function is a subtype of another if their call methods are related via\nsubtyping and {@code this} is a subtype of {@code that} with regard to\nthe prototype chain.\n",
  "functionStartLine": 833,
  "functionEndLine": 874,
  "numCommitsSeen": 42,
  "timeTaken": 1676,
  "changeHistory": [
    "af4b8d4a2da7996f15b405f523ee8b31a0fbf021",
    "599e40891b9e5cb55af2dd3bb8027cee846087c1",
    "cf5fd88f13f0b11625ac407f85cb58b36862e173",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "af4b8d4a2da7996f15b405f523ee8b31a0fbf021": "Ybodychange",
    "599e40891b9e5cb55af2dd3bb8027cee846087c1": "Ybodychange",
    "cf5fd88f13f0b11625ac407f85cb58b36862e173": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "af4b8d4a2da7996f15b405f523ee8b31a0fbf021": {
      "type": "Ybodychange",
      "commitMessage": "\nMake subtyping of Functions with this:SomeInterface\nmore lenient\n\nR\u003djohnlenz\nDELTA\u003d59  (55 added, 0 deleted, 4 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1207088\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@559 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/16/10, 11:03 AM",
      "commitName": "af4b8d4a2da7996f15b405f523ee8b31a0fbf021",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "11/1/10, 9:00 AM",
      "commitNameOld": "c5e143f7df0c3d73f6634488cac8ad8e7054fe05",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 15.13,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic boolean isSubtype(JSType that) {\n    if (JSType.isSubtype(this, that)) {\n        return true;\n    }\n    if (that.isFunctionType()) {\n        if (((FunctionType) that).isInterface()) {\n            return true;\n        }\n        if (this.isInterface()) {\n            return false;\n        }\n        FunctionType other \u003d (FunctionType) that;\n        boolean treatThisTypesAsCovariant \u003d this.isConstructor() || other.isConstructor() || (other.typeOfThis.getConstructor() !\u003d null \u0026\u0026 other.typeOfThis.getConstructor().isInterface()) || other.typeOfThis.isSubtype(this.typeOfThis) || this.typeOfThis.isSubtype(other.typeOfThis);\n        return treatThisTypesAsCovariant \u0026\u0026 this.call.isSubtype(other.call);\n    }\n    return getNativeType(JSTypeNative.FUNCTION_PROTOTYPE).isSubtype(that);\n}",
      "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
      "functionStartLine": 752,
      "functionName": "isSubtype",
      "functionAnnotation": "@Override",
      "functionDoc": "A function is a subtype of another if their call methods are related via\nsubtyping and {@code this} is a subtype of {@code that} with regard to\nthe prototype chain.\n",
      "diff": "@@ -1,17 +1,18 @@\n @Override\n public boolean isSubtype(JSType that) {\n     if (JSType.isSubtype(this, that)) {\n         return true;\n     }\n     if (that.isFunctionType()) {\n         if (((FunctionType) that).isInterface()) {\n             return true;\n         }\n         if (this.isInterface()) {\n             return false;\n         }\n         FunctionType other \u003d (FunctionType) that;\n-        return (this.isConstructor() || other.isConstructor() || other.typeOfThis.isSubtype(this.typeOfThis) || this.typeOfThis.isSubtype(other.typeOfThis)) \u0026\u0026 this.call.isSubtype(other.call);\n+        boolean treatThisTypesAsCovariant \u003d this.isConstructor() || other.isConstructor() || (other.typeOfThis.getConstructor() !\u003d null \u0026\u0026 other.typeOfThis.getConstructor().isInterface()) || other.typeOfThis.isSubtype(this.typeOfThis) || this.typeOfThis.isSubtype(other.typeOfThis);\n+        return treatThisTypesAsCovariant \u0026\u0026 this.call.isSubtype(other.call);\n     }\n     return getNativeType(JSTypeNative.FUNCTION_PROTOTYPE).isSubtype(that);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "599e40891b9e5cb55af2dd3bb8027cee846087c1": {
      "type": "Ybodychange",
      "commitMessage": "\nFunctionType needs to know about proxy types.\n\nR\u003dnicksantos\nDELTA\u003d38  (27 added, 7 deleted, 4 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d373001\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@501 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/21/10, 9:23 AM",
      "commitName": "599e40891b9e5cb55af2dd3bb8027cee846087c1",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "9/13/10, 11:12 AM",
      "commitNameOld": "4c6e1039b80859f17de5f3cbcfeba61ed8ea0485",
      "commitAuthorOld": "elbaum@google.com",
      "daysBetweenCommits": 37.92,
      "commitsBetweenForRepo": 76,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic boolean isSubtype(JSType that) {\n    if (JSType.isSubtype(this, that)) {\n        return true;\n    }\n    if (that.isFunctionType()) {\n        if (((FunctionType) that).isInterface()) {\n            return true;\n        }\n        if (this.isInterface()) {\n            return false;\n        }\n        FunctionType other \u003d (FunctionType) that;\n        return (this.isConstructor() || other.isConstructor() || other.typeOfThis.isSubtype(this.typeOfThis) || this.typeOfThis.isSubtype(other.typeOfThis)) \u0026\u0026 this.call.isSubtype(other.call);\n    }\n    return getNativeType(JSTypeNative.FUNCTION_PROTOTYPE).isSubtype(that);\n}",
      "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
      "functionStartLine": 683,
      "functionName": "isSubtype",
      "functionAnnotation": "@Override",
      "functionDoc": "A function is a subtype of another if their call methods are related via\nsubtyping and {@code this} is a subtype of {@code that} with regard to\nthe prototype chain.\n",
      "diff": "@@ -1,25 +1,17 @@\n @Override\n public boolean isSubtype(JSType that) {\n-    if (this.isEquivalentTo(that)) {\n+    if (JSType.isSubtype(this, that)) {\n         return true;\n     }\n     if (that.isFunctionType()) {\n         if (((FunctionType) that).isInterface()) {\n             return true;\n         }\n         if (this.isInterface()) {\n             return false;\n         }\n         FunctionType other \u003d (FunctionType) that;\n         return (this.isConstructor() || other.isConstructor() || other.typeOfThis.isSubtype(this.typeOfThis) || this.typeOfThis.isSubtype(other.typeOfThis)) \u0026\u0026 this.call.isSubtype(other.call);\n     }\n-    if (that instanceof UnionType) {\n-        UnionType union \u003d (UnionType) that;\n-        for (JSType element : union.alternates) {\n-            if (this.isSubtype(element)) {\n-                return true;\n-            }\n-        }\n-    }\n     return getNativeType(JSTypeNative.FUNCTION_PROTOTYPE).isSubtype(that);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "cf5fd88f13f0b11625ac407f85cb58b36862e173": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/05/25 by nicksantos\n\n        start moving away from using Object#equals for type equality.\n\n        R\u003djohnlenz\n        DELTA\u003d445  (98 added, 3 deleted, 344 changed)\n\nChange on 2010/05/25 by acleung\n\n        Fix bug with resolving a member function of a resolved constructor.\n\n        R\u003djohnlenz\n        DELTA\u003d48  (48 added, 0 deleted, 0 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d12002\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@231 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/26/10, 8:26 AM",
      "commitName": "cf5fd88f13f0b11625ac407f85cb58b36862e173",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "5/18/10, 10:06 AM",
      "commitNameOld": "a9757e8c7d85f9ee9622b3e5352955ba3429733d",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 7.93,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic boolean isSubtype(JSType that) {\n    if (this.isEquivalentTo(that)) {\n        return true;\n    }\n    if (that.isFunctionType()) {\n        if (((FunctionType) that).isInterface()) {\n            return true;\n        }\n        if (this.isInterface()) {\n            return false;\n        }\n        FunctionType other \u003d (FunctionType) that;\n        return (this.isConstructor() || other.isConstructor() || other.typeOfThis.isSubtype(this.typeOfThis) || this.typeOfThis.isSubtype(other.typeOfThis)) \u0026\u0026 this.call.isSubtype(other.call);\n    }\n    if (that instanceof UnionType) {\n        UnionType union \u003d (UnionType) that;\n        for (JSType element : union.alternates) {\n            if (this.isSubtype(element)) {\n                return true;\n            }\n        }\n    }\n    return getNativeType(JSTypeNative.FUNCTION_PROTOTYPE).isSubtype(that);\n}",
      "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
      "functionStartLine": 681,
      "functionName": "isSubtype",
      "functionAnnotation": "@Override",
      "functionDoc": "A function is a subtype of another if their call methods are related via\nsubtyping and {@code this} is a subtype of {@code that} with regard to\nthe prototype chain.\n",
      "diff": "@@ -1,25 +1,25 @@\n @Override\n public boolean isSubtype(JSType that) {\n-    if (this.equals(that)) {\n+    if (this.isEquivalentTo(that)) {\n         return true;\n     }\n     if (that.isFunctionType()) {\n         if (((FunctionType) that).isInterface()) {\n             return true;\n         }\n         if (this.isInterface()) {\n             return false;\n         }\n         FunctionType other \u003d (FunctionType) that;\n         return (this.isConstructor() || other.isConstructor() || other.typeOfThis.isSubtype(this.typeOfThis) || this.typeOfThis.isSubtype(other.typeOfThis)) \u0026\u0026 this.call.isSubtype(other.call);\n     }\n     if (that instanceof UnionType) {\n         UnionType union \u003d (UnionType) that;\n         for (JSType element : union.alternates) {\n             if (this.isSubtype(element)) {\n                 return true;\n             }\n         }\n     }\n     return getNativeType(JSTypeNative.FUNCTION_PROTOTYPE).isSubtype(that);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,25 @@\n+@Override\n+public boolean isSubtype(JSType that) {\n+    if (this.equals(that)) {\n+        return true;\n+    }\n+    if (that.isFunctionType()) {\n+        if (((FunctionType) that).isInterface()) {\n+            return true;\n+        }\n+        if (this.isInterface()) {\n+            return false;\n+        }\n+        FunctionType other \u003d (FunctionType) that;\n+        return (this.isConstructor() || other.isConstructor() || other.typeOfThis.isSubtype(this.typeOfThis) || this.typeOfThis.isSubtype(other.typeOfThis)) \u0026\u0026 this.call.isSubtype(other.call);\n+    }\n+    if (that instanceof UnionType) {\n+        UnionType union \u003d (UnionType) that;\n+        for (JSType element : union.alternates) {\n+            if (this.isSubtype(element)) {\n+                return true;\n+            }\n+        }\n+    }\n+    return getNativeType(JSTypeNative.FUNCTION_PROTOTYPE).isSubtype(that);\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic boolean isSubtype(JSType that) {\n    if (this.equals(that)) {\n        return true;\n    }\n    if (that.isFunctionType()) {\n        if (((FunctionType) that).isInterface()) {\n            return true;\n        }\n        if (this.isInterface()) {\n            return false;\n        }\n        FunctionType other \u003d (FunctionType) that;\n        return (this.isConstructor() || other.isConstructor() || other.typeOfThis.isSubtype(this.typeOfThis) || this.typeOfThis.isSubtype(other.typeOfThis)) \u0026\u0026 this.call.isSubtype(other.call);\n    }\n    if (that instanceof UnionType) {\n        UnionType union \u003d (UnionType) that;\n        for (JSType element : union.alternates) {\n            if (this.isSubtype(element)) {\n                return true;\n            }\n        }\n    }\n    return getNativeType(JSTypeNative.FUNCTION_PROTOTYPE).isSubtype(that);\n}",
      "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
      "functionStartLine": 701,
      "functionName": "isSubtype",
      "functionAnnotation": "@Override",
      "functionDoc": "A function is a subtype of another if their call methods are related via\nsubtyping and {@code this} is a subtype of {@code that} with regard to\nthe prototype chain.\n"
    }
  }
}