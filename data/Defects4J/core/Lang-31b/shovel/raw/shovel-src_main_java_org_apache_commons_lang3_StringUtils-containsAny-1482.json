{
  "origin": "codeshovel",
  "repositoryName": "Lang-31b",
  "repositoryPath": "/tmp/Lang-31b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "StringUtils.java",
  "functionName": "containsAny",
  "functionId": "containsAny___cs-CharSequence__searchChars-String",
  "sourceFilePath": "src/main/java/org/apache/commons/lang3/StringUtils.java",
  "functionAnnotation": "",
  "functionDoc": "\u003cp\u003e\nChecks if the CharSequence contains any character in the given set of characters.\n\u003c/p\u003e\n\n\u003cp\u003e\nA \u003ccode\u003enull\u003c/code\u003e CharSequence will return \u003ccode\u003efalse\u003c/code\u003e. A \u003ccode\u003enull\u003c/code\u003e search CharSequence will return\n\u003ccode\u003efalse\u003c/code\u003e.\n\u003c/p\u003e\n\n\u003cpre\u003e\nStringUtils.containsAny(null, *)            \u003d false\nStringUtils.containsAny(\"\", *)              \u003d false\nStringUtils.containsAny(*, null)            \u003d false\nStringUtils.containsAny(*, \"\")              \u003d false\nStringUtils.containsAny(\"zzabyycdxx\", \"za\") \u003d true\nStringUtils.containsAny(\"zzabyycdxx\", \"by\") \u003d true\nStringUtils.containsAny(\"aba\",\"z\")          \u003d false\n\u003c/pre\u003e\n\n@param cs the CharSequence to check, may be null\n@param searchChars the chars to search for, may be null\n@return the \u003ccode\u003etrue\u003c/code\u003e if any of the chars are found, \u003ccode\u003efalse\u003c/code\u003e if no match or null input\n@since 2.4\n",
  "functionStartLine": 1482,
  "functionEndLine": 1487,
  "numCommitsSeen": 256,
  "timeTaken": 8957,
  "changeHistory": [
    "cf2e48a05c250feb636dd337dae1ffb7a1d9d411",
    "b1686009b5494119575d43525b0829162ab79853",
    "586080851f6bca4d7aa84a7d307203ad8222407e",
    "4aefe9f0b1d8e5f9649eceaf0e232eff71b3d034",
    "2a088e07629f1d3f3cf3205ef04754067a2aad21",
    "4bdc5d864104f29b4ebfe0105b75002db9f58f07"
  ],
  "changeHistoryShort": {
    "cf2e48a05c250feb636dd337dae1ffb7a1d9d411": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "b1686009b5494119575d43525b0829162ab79853": "Yfilerename",
    "586080851f6bca4d7aa84a7d307203ad8222407e": "Yfilerename",
    "4aefe9f0b1d8e5f9649eceaf0e232eff71b3d034": "Ydocchange",
    "2a088e07629f1d3f3cf3205ef04754067a2aad21": "Ybodychange",
    "4bdc5d864104f29b4ebfe0105b75002db9f58f07": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cf2e48a05c250feb636dd337dae1ffb7a1d9d411": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "Change StringUtils arguments from String to CharSequence.\n\nDetails: Working with (trunk) StringUtils (SU) I see the following emerge: \n\n- In SVN already and continuing: Change StringUtils arguments from String to CharSequence (CS).\n\n- This leads to replacing calls to String.substring(int[,int]) with calls to CharSequence.subSequence(int)\n\n- This leads to creating a CharSequenceUtils class (in SVN now, more on this new class below) and CharSequenceUtils.subSequence(CharSequence,int) to avoid changing \"str.substring(start)\" over and over to \"str.subSequence(start, str.length())\". For examples, see new versions of capitalize and uncapitalize.\n\n- We end up using a toString() on CharSequence to return a String from StringUtil when working with a CharSequence.\n\nSo we have StringUtils using CharSequence inputs as much as possible instead of String, which is nice. \n\nThe CharSequence method subSequence returns a CharSequence; though the Javadoc states \"Returns a new CharSequence that is a subsequence of this sequence.\", this does not guaranteed the return value to be the same kind of CharSequence as the receiver). Since we are after all in a class called StringUtil, calling toString() is a must.\n\nI propose that we create when possible the methods that are now StringUtils CharSequence methods into CharSequenceUtils and let StringUtil call CharSequenceUtils and then do its toString() and other String specific logic. Later we could have other CharSequence type of utils (for CharBuffer, StringBuiler, StringBuffer, etc) that use the \u0027primitives\u0027 from CharSequenceUtils.\nThis means that for methods that are based solely on methods that are now in CharSequence, these can be moved to CharSequenceUtils without effort (all is* methods only call CharSequence#length() and charAt() for example and are now typed as CS, still in SU). \n\nWe can leave @deprecateds method in SU as a nicety to avoid too much porting pain: First change the package to lang3 then you can \u0027optimize\u0027 by changing call sites from SU to CSU.\n\nAs a start, I put in SVN a CharSequenceUtils (CSU) implementation for length() and subSequence().\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@920543 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/8/10, 2:15 PM",
      "commitName": "cf2e48a05c250feb636dd337dae1ffb7a1d9d411",
      "commitAuthor": "Gary D. Gregory",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Change StringUtils arguments from String to CharSequence.\n\nDetails: Working with (trunk) StringUtils (SU) I see the following emerge: \n\n- In SVN already and continuing: Change StringUtils arguments from String to CharSequence (CS).\n\n- This leads to replacing calls to String.substring(int[,int]) with calls to CharSequence.subSequence(int)\n\n- This leads to creating a CharSequenceUtils class (in SVN now, more on this new class below) and CharSequenceUtils.subSequence(CharSequence,int) to avoid changing \"str.substring(start)\" over and over to \"str.subSequence(start, str.length())\". For examples, see new versions of capitalize and uncapitalize.\n\n- We end up using a toString() on CharSequence to return a String from StringUtil when working with a CharSequence.\n\nSo we have StringUtils using CharSequence inputs as much as possible instead of String, which is nice. \n\nThe CharSequence method subSequence returns a CharSequence; though the Javadoc states \"Returns a new CharSequence that is a subsequence of this sequence.\", this does not guaranteed the return value to be the same kind of CharSequence as the receiver). Since we are after all in a class called StringUtil, calling toString() is a must.\n\nI propose that we create when possible the methods that are now StringUtils CharSequence methods into CharSequenceUtils and let StringUtil call CharSequenceUtils and then do its toString() and other String specific logic. Later we could have other CharSequence type of utils (for CharBuffer, StringBuiler, StringBuffer, etc) that use the \u0027primitives\u0027 from CharSequenceUtils.\nThis means that for methods that are based solely on methods that are now in CharSequence, these can be moved to CharSequenceUtils without effort (all is* methods only call CharSequence#length() and charAt() for example and are now typed as CS, still in SU). \n\nWe can leave @deprecateds method in SU as a nicety to avoid too much porting pain: First change the package to lang3 then you can \u0027optimize\u0027 by changing call sites from SU to CSU.\n\nAs a start, I put in SVN a CharSequenceUtils (CSU) implementation for length() and subSequence().\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@920543 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "3/8/10, 2:15 PM",
          "commitName": "cf2e48a05c250feb636dd337dae1ffb7a1d9d411",
          "commitAuthor": "Gary D. Gregory",
          "commitDateOld": "3/7/10, 7:41 PM",
          "commitNameOld": "43885858071f12924607fb91ea595424e5880c3d",
          "commitAuthorOld": "Gary D. Gregory",
          "daysBetweenCommits": 0.77,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static boolean containsAny(CharSequence cs, String searchChars) {\n    if (searchChars \u003d\u003d null) {\n        return false;\n    }\n    return containsAny(cs, searchChars.toCharArray());\n}",
          "path": "src/main/java/org/apache/commons/lang3/StringUtils.java",
          "functionStartLine": 1482,
          "functionName": "containsAny",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003e\nChecks if the CharSequence contains any character in the given set of characters.\n\u003c/p\u003e\n\n\u003cp\u003e\nA \u003ccode\u003enull\u003c/code\u003e CharSequence will return \u003ccode\u003efalse\u003c/code\u003e. A \u003ccode\u003enull\u003c/code\u003e search CharSequence will return\n\u003ccode\u003efalse\u003c/code\u003e.\n\u003c/p\u003e\n\n\u003cpre\u003e\nStringUtils.containsAny(null, *)            \u003d false\nStringUtils.containsAny(\"\", *)              \u003d false\nStringUtils.containsAny(*, null)            \u003d false\nStringUtils.containsAny(*, \"\")              \u003d false\nStringUtils.containsAny(\"zzabyycdxx\", \"za\") \u003d true\nStringUtils.containsAny(\"zzabyycdxx\", \"by\") \u003d true\nStringUtils.containsAny(\"aba\",\"z\")          \u003d false\n\u003c/pre\u003e\n\n@param cs the CharSequence to check, may be null\n@param searchChars the chars to search for, may be null\n@return the \u003ccode\u003etrue\u003c/code\u003e if any of the chars are found, \u003ccode\u003efalse\u003c/code\u003e if no match or null input\n@since 2.4\n",
          "diff": "@@ -1,6 +1,6 @@\n-public static boolean containsAny(String str, String searchChars) {\n+public static boolean containsAny(CharSequence cs, String searchChars) {\n     if (searchChars \u003d\u003d null) {\n         return false;\n     }\n-    return containsAny(str, searchChars.toCharArray());\n+    return containsAny(cs, searchChars.toCharArray());\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[str-String, searchChars-String]",
            "newValue": "[cs-CharSequence, searchChars-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Change StringUtils arguments from String to CharSequence.\n\nDetails: Working with (trunk) StringUtils (SU) I see the following emerge: \n\n- In SVN already and continuing: Change StringUtils arguments from String to CharSequence (CS).\n\n- This leads to replacing calls to String.substring(int[,int]) with calls to CharSequence.subSequence(int)\n\n- This leads to creating a CharSequenceUtils class (in SVN now, more on this new class below) and CharSequenceUtils.subSequence(CharSequence,int) to avoid changing \"str.substring(start)\" over and over to \"str.subSequence(start, str.length())\". For examples, see new versions of capitalize and uncapitalize.\n\n- We end up using a toString() on CharSequence to return a String from StringUtil when working with a CharSequence.\n\nSo we have StringUtils using CharSequence inputs as much as possible instead of String, which is nice. \n\nThe CharSequence method subSequence returns a CharSequence; though the Javadoc states \"Returns a new CharSequence that is a subsequence of this sequence.\", this does not guaranteed the return value to be the same kind of CharSequence as the receiver). Since we are after all in a class called StringUtil, calling toString() is a must.\n\nI propose that we create when possible the methods that are now StringUtils CharSequence methods into CharSequenceUtils and let StringUtil call CharSequenceUtils and then do its toString() and other String specific logic. Later we could have other CharSequence type of utils (for CharBuffer, StringBuiler, StringBuffer, etc) that use the \u0027primitives\u0027 from CharSequenceUtils.\nThis means that for methods that are based solely on methods that are now in CharSequence, these can be moved to CharSequenceUtils without effort (all is* methods only call CharSequence#length() and charAt() for example and are now typed as CS, still in SU). \n\nWe can leave @deprecateds method in SU as a nicety to avoid too much porting pain: First change the package to lang3 then you can \u0027optimize\u0027 by changing call sites from SU to CSU.\n\nAs a start, I put in SVN a CharSequenceUtils (CSU) implementation for length() and subSequence().\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@920543 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "3/8/10, 2:15 PM",
          "commitName": "cf2e48a05c250feb636dd337dae1ffb7a1d9d411",
          "commitAuthor": "Gary D. Gregory",
          "commitDateOld": "3/7/10, 7:41 PM",
          "commitNameOld": "43885858071f12924607fb91ea595424e5880c3d",
          "commitAuthorOld": "Gary D. Gregory",
          "daysBetweenCommits": 0.77,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static boolean containsAny(CharSequence cs, String searchChars) {\n    if (searchChars \u003d\u003d null) {\n        return false;\n    }\n    return containsAny(cs, searchChars.toCharArray());\n}",
          "path": "src/main/java/org/apache/commons/lang3/StringUtils.java",
          "functionStartLine": 1482,
          "functionName": "containsAny",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003e\nChecks if the CharSequence contains any character in the given set of characters.\n\u003c/p\u003e\n\n\u003cp\u003e\nA \u003ccode\u003enull\u003c/code\u003e CharSequence will return \u003ccode\u003efalse\u003c/code\u003e. A \u003ccode\u003enull\u003c/code\u003e search CharSequence will return\n\u003ccode\u003efalse\u003c/code\u003e.\n\u003c/p\u003e\n\n\u003cpre\u003e\nStringUtils.containsAny(null, *)            \u003d false\nStringUtils.containsAny(\"\", *)              \u003d false\nStringUtils.containsAny(*, null)            \u003d false\nStringUtils.containsAny(*, \"\")              \u003d false\nStringUtils.containsAny(\"zzabyycdxx\", \"za\") \u003d true\nStringUtils.containsAny(\"zzabyycdxx\", \"by\") \u003d true\nStringUtils.containsAny(\"aba\",\"z\")          \u003d false\n\u003c/pre\u003e\n\n@param cs the CharSequence to check, may be null\n@param searchChars the chars to search for, may be null\n@return the \u003ccode\u003etrue\u003c/code\u003e if any of the chars are found, \u003ccode\u003efalse\u003c/code\u003e if no match or null input\n@since 2.4\n",
          "diff": "@@ -1,6 +1,6 @@\n-public static boolean containsAny(String str, String searchChars) {\n+public static boolean containsAny(CharSequence cs, String searchChars) {\n     if (searchChars \u003d\u003d null) {\n         return false;\n     }\n-    return containsAny(str, searchChars.toCharArray());\n+    return containsAny(cs, searchChars.toCharArray());\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Change StringUtils arguments from String to CharSequence.\n\nDetails: Working with (trunk) StringUtils (SU) I see the following emerge: \n\n- In SVN already and continuing: Change StringUtils arguments from String to CharSequence (CS).\n\n- This leads to replacing calls to String.substring(int[,int]) with calls to CharSequence.subSequence(int)\n\n- This leads to creating a CharSequenceUtils class (in SVN now, more on this new class below) and CharSequenceUtils.subSequence(CharSequence,int) to avoid changing \"str.substring(start)\" over and over to \"str.subSequence(start, str.length())\". For examples, see new versions of capitalize and uncapitalize.\n\n- We end up using a toString() on CharSequence to return a String from StringUtil when working with a CharSequence.\n\nSo we have StringUtils using CharSequence inputs as much as possible instead of String, which is nice. \n\nThe CharSequence method subSequence returns a CharSequence; though the Javadoc states \"Returns a new CharSequence that is a subsequence of this sequence.\", this does not guaranteed the return value to be the same kind of CharSequence as the receiver). Since we are after all in a class called StringUtil, calling toString() is a must.\n\nI propose that we create when possible the methods that are now StringUtils CharSequence methods into CharSequenceUtils and let StringUtil call CharSequenceUtils and then do its toString() and other String specific logic. Later we could have other CharSequence type of utils (for CharBuffer, StringBuiler, StringBuffer, etc) that use the \u0027primitives\u0027 from CharSequenceUtils.\nThis means that for methods that are based solely on methods that are now in CharSequence, these can be moved to CharSequenceUtils without effort (all is* methods only call CharSequence#length() and charAt() for example and are now typed as CS, still in SU). \n\nWe can leave @deprecateds method in SU as a nicety to avoid too much porting pain: First change the package to lang3 then you can \u0027optimize\u0027 by changing call sites from SU to CSU.\n\nAs a start, I put in SVN a CharSequenceUtils (CSU) implementation for length() and subSequence().\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@920543 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "3/8/10, 2:15 PM",
          "commitName": "cf2e48a05c250feb636dd337dae1ffb7a1d9d411",
          "commitAuthor": "Gary D. Gregory",
          "commitDateOld": "3/7/10, 7:41 PM",
          "commitNameOld": "43885858071f12924607fb91ea595424e5880c3d",
          "commitAuthorOld": "Gary D. Gregory",
          "daysBetweenCommits": 0.77,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static boolean containsAny(CharSequence cs, String searchChars) {\n    if (searchChars \u003d\u003d null) {\n        return false;\n    }\n    return containsAny(cs, searchChars.toCharArray());\n}",
          "path": "src/main/java/org/apache/commons/lang3/StringUtils.java",
          "functionStartLine": 1482,
          "functionName": "containsAny",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003e\nChecks if the CharSequence contains any character in the given set of characters.\n\u003c/p\u003e\n\n\u003cp\u003e\nA \u003ccode\u003enull\u003c/code\u003e CharSequence will return \u003ccode\u003efalse\u003c/code\u003e. A \u003ccode\u003enull\u003c/code\u003e search CharSequence will return\n\u003ccode\u003efalse\u003c/code\u003e.\n\u003c/p\u003e\n\n\u003cpre\u003e\nStringUtils.containsAny(null, *)            \u003d false\nStringUtils.containsAny(\"\", *)              \u003d false\nStringUtils.containsAny(*, null)            \u003d false\nStringUtils.containsAny(*, \"\")              \u003d false\nStringUtils.containsAny(\"zzabyycdxx\", \"za\") \u003d true\nStringUtils.containsAny(\"zzabyycdxx\", \"by\") \u003d true\nStringUtils.containsAny(\"aba\",\"z\")          \u003d false\n\u003c/pre\u003e\n\n@param cs the CharSequence to check, may be null\n@param searchChars the chars to search for, may be null\n@return the \u003ccode\u003etrue\u003c/code\u003e if any of the chars are found, \u003ccode\u003efalse\u003c/code\u003e if no match or null input\n@since 2.4\n",
          "diff": "@@ -1,6 +1,6 @@\n-public static boolean containsAny(String str, String searchChars) {\n+public static boolean containsAny(CharSequence cs, String searchChars) {\n     if (searchChars \u003d\u003d null) {\n         return false;\n     }\n-    return containsAny(str, searchChars.toCharArray());\n+    return containsAny(cs, searchChars.toCharArray());\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "\u003cp\u003e\nChecks if the String contains any character in the given set of characters.\n\u003c/p\u003e\n\n\u003cp\u003e\nA \u003ccode\u003enull\u003c/code\u003e String will return \u003ccode\u003efalse\u003c/code\u003e. A \u003ccode\u003enull\u003c/code\u003e search string will return\n\u003ccode\u003efalse\u003c/code\u003e.\n\u003c/p\u003e\n\n\u003cpre\u003e\nStringUtils.containsAny(null, *)            \u003d false\nStringUtils.containsAny(\"\", *)              \u003d false\nStringUtils.containsAny(*, null)            \u003d false\nStringUtils.containsAny(*, \"\")              \u003d false\nStringUtils.containsAny(\"zzabyycdxx\", \"za\") \u003d true\nStringUtils.containsAny(\"zzabyycdxx\", \"by\") \u003d true\nStringUtils.containsAny(\"aba\",\"z\")          \u003d false\n\u003c/pre\u003e\n\n@param str the String to check, may be null\n@param searchChars the chars to search for, may be null\n@return the \u003ccode\u003etrue\u003c/code\u003e if any of the chars are found, \u003ccode\u003efalse\u003c/code\u003e if no match or null input\n@since 2.4\n",
            "newValue": "\u003cp\u003e\nChecks if the CharSequence contains any character in the given set of characters.\n\u003c/p\u003e\n\n\u003cp\u003e\nA \u003ccode\u003enull\u003c/code\u003e CharSequence will return \u003ccode\u003efalse\u003c/code\u003e. A \u003ccode\u003enull\u003c/code\u003e search CharSequence will return\n\u003ccode\u003efalse\u003c/code\u003e.\n\u003c/p\u003e\n\n\u003cpre\u003e\nStringUtils.containsAny(null, *)            \u003d false\nStringUtils.containsAny(\"\", *)              \u003d false\nStringUtils.containsAny(*, null)            \u003d false\nStringUtils.containsAny(*, \"\")              \u003d false\nStringUtils.containsAny(\"zzabyycdxx\", \"za\") \u003d true\nStringUtils.containsAny(\"zzabyycdxx\", \"by\") \u003d true\nStringUtils.containsAny(\"aba\",\"z\")          \u003d false\n\u003c/pre\u003e\n\n@param cs the CharSequence to check, may be null\n@param searchChars the chars to search for, may be null\n@return the \u003ccode\u003etrue\u003c/code\u003e if any of the chars are found, \u003ccode\u003efalse\u003c/code\u003e if no match or null input\n@since 2.4\n"
          }
        }
      ]
    },
    "b1686009b5494119575d43525b0829162ab79853": {
      "type": "Yfilerename",
      "commitMessage": "Move main source to src/main/java\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@895322 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/2/10, 6:11 PM",
      "commitName": "b1686009b5494119575d43525b0829162ab79853",
      "commitAuthor": "Paul C. Benedict Jr",
      "commitDateOld": "1/2/10, 6:09 PM",
      "commitNameOld": "1f725a97e73edd27301e889408832b34a3d69e63",
      "commitAuthorOld": "Paul C. Benedict Jr",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static boolean containsAny(String str, String searchChars) {\n    if (searchChars \u003d\u003d null) {\n        return false;\n    }\n    return containsAny(str, searchChars.toCharArray());\n}",
      "path": "src/main/java/org/apache/commons/lang3/StringUtils.java",
      "functionStartLine": 1468,
      "functionName": "containsAny",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003e\nChecks if the String contains any character in the given set of characters.\n\u003c/p\u003e\n\n\u003cp\u003e\nA \u003ccode\u003enull\u003c/code\u003e String will return \u003ccode\u003efalse\u003c/code\u003e. A \u003ccode\u003enull\u003c/code\u003e search string will return\n\u003ccode\u003efalse\u003c/code\u003e.\n\u003c/p\u003e\n\n\u003cpre\u003e\nStringUtils.containsAny(null, *)            \u003d false\nStringUtils.containsAny(\"\", *)              \u003d false\nStringUtils.containsAny(*, null)            \u003d false\nStringUtils.containsAny(*, \"\")              \u003d false\nStringUtils.containsAny(\"zzabyycdxx\", \"za\") \u003d true\nStringUtils.containsAny(\"zzabyycdxx\", \"by\") \u003d true\nStringUtils.containsAny(\"aba\",\"z\")          \u003d false\n\u003c/pre\u003e\n\n@param str the String to check, may be null\n@param searchChars the chars to search for, may be null\n@return the \u003ccode\u003etrue\u003c/code\u003e if any of the chars are found, \u003ccode\u003efalse\u003c/code\u003e if no match or null input\n@since 2.4\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/lang3/StringUtils.java",
        "newPath": "src/main/java/org/apache/commons/lang3/StringUtils.java"
      }
    },
    "586080851f6bca4d7aa84a7d307203ad8222407e": {
      "type": "Yfilerename",
      "commitMessage": "Changing directory name from lang to lang3. Build will fail (probably) until Java code is changed in subsequent commit. LANG-563\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@889202 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/10/09, 3:33 AM",
      "commitName": "586080851f6bca4d7aa84a7d307203ad8222407e",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "12/10/09, 3:31 AM",
      "commitNameOld": "da479d635f66c1f82a1f858591cfb1b9941457ae",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static boolean containsAny(String str, String searchChars) {\n    if (searchChars \u003d\u003d null) {\n        return false;\n    }\n    return containsAny(str, searchChars.toCharArray());\n}",
      "path": "src/java/org/apache/commons/lang3/StringUtils.java",
      "functionStartLine": 1192,
      "functionName": "containsAny",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003e\nChecks if the String contains any character in the given set of characters.\n\u003c/p\u003e\n\n\u003cp\u003e\nA \u003ccode\u003enull\u003c/code\u003e String will return \u003ccode\u003efalse\u003c/code\u003e. A \u003ccode\u003enull\u003c/code\u003e search string will return\n\u003ccode\u003efalse\u003c/code\u003e.\n\u003c/p\u003e\n\n\u003cpre\u003e\nStringUtils.containsAny(null, *)            \u003d false\nStringUtils.containsAny(\"\", *)              \u003d false\nStringUtils.containsAny(*, null)            \u003d false\nStringUtils.containsAny(*, \"\")              \u003d false\nStringUtils.containsAny(\"zzabyycdxx\", \"za\") \u003d true\nStringUtils.containsAny(\"zzabyycdxx\", \"by\") \u003d true\nStringUtils.containsAny(\"aba\",\"z\")          \u003d false\n\u003c/pre\u003e\n\n@param str the String to check, may be null\n@param searchChars the chars to search for, may be null\n@return the \u003ccode\u003etrue\u003c/code\u003e if any of the chars are found, \u003ccode\u003efalse\u003c/code\u003e if no match or null input\n@since 2.4\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/lang/StringUtils.java",
        "newPath": "src/java/org/apache/commons/lang3/StringUtils.java"
      }
    },
    "4aefe9f0b1d8e5f9649eceaf0e232eff71b3d034": {
      "type": "Ydocchange",
      "commitMessage": "Format @since 2.4 methods to match the rest of the file. For example, expressions use no spaces around parens.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@619143 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/6/08, 12:21 PM",
      "commitName": "4aefe9f0b1d8e5f9649eceaf0e232eff71b3d034",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "2/6/08, 12:10 PM",
      "commitNameOld": "2a088e07629f1d3f3cf3205ef04754067a2aad21",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static boolean containsAny(String str, String searchChars) {\n    if (searchChars \u003d\u003d null) {\n        return false;\n    }\n    return containsAny(str, searchChars.toCharArray());\n}",
      "path": "src/java/org/apache/commons/lang/StringUtils.java",
      "functionStartLine": 1207,
      "functionName": "containsAny",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003e\nChecks if the String contains any character in the given set of characters.\n\u003c/p\u003e\n\n\u003cp\u003e\nA \u003ccode\u003enull\u003c/code\u003e String will return \u003ccode\u003efalse\u003c/code\u003e. A \u003ccode\u003enull\u003c/code\u003e search string will return\n\u003ccode\u003efalse\u003c/code\u003e.\n\u003c/p\u003e\n\n\u003cpre\u003e\nStringUtils.containsAny(null, *)            \u003d false\nStringUtils.containsAny(\"\", *)              \u003d false\nStringUtils.containsAny(*, null)            \u003d false\nStringUtils.containsAny(*, \"\")              \u003d false\nStringUtils.containsAny(\"zzabyycdxx\", \"za\") \u003d true\nStringUtils.containsAny(\"zzabyycdxx\", \"by\") \u003d true\nStringUtils.containsAny(\"aba\",\"z\")          \u003d false\n\u003c/pre\u003e\n\n@param str the String to check, may be null\n@param searchChars the chars to search for, may be null\n@return the \u003ccode\u003etrue\u003c/code\u003e if any of the chars are found, \u003ccode\u003efalse\u003c/code\u003e if no match or null input\n@since 2.4\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "\u003cp\u003eChecks if the String contains any character in the given\nset of characters.\u003c/p\u003e\n\n\u003cp\u003eA \u003ccode\u003enull\u003c/code\u003e String will return \u003ccode\u003efalse\u003c/code\u003e.\nA \u003ccode\u003enull\u003c/code\u003e search string will return \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\n\u003cpre\u003e\nStringUtils.containsAny(null, *)            \u003d false\nStringUtils.containsAny(\"\", *)              \u003d false\nStringUtils.containsAny(*, null)            \u003d false\nStringUtils.containsAny(*, \"\")              \u003d false\nStringUtils.containsAny(\"zzabyycdxx\", \"za\") \u003d true\nStringUtils.containsAny(\"zzabyycdxx\", \"by\") \u003d true\nStringUtils.containsAny(\"aba\",\"z\")          \u003d false\n\u003c/pre\u003e\n\n@param str the String to check, may be null\n@param searchChars the chars to search for, may be null\n@return the \u003ccode\u003etrue\u003c/code\u003e if any of the chars are found,\n\u003ccode\u003efalse\u003c/code\u003e if no match or null input\n@since 2.4\n",
        "newValue": "\u003cp\u003e\nChecks if the String contains any character in the given set of characters.\n\u003c/p\u003e\n\n\u003cp\u003e\nA \u003ccode\u003enull\u003c/code\u003e String will return \u003ccode\u003efalse\u003c/code\u003e. A \u003ccode\u003enull\u003c/code\u003e search string will return\n\u003ccode\u003efalse\u003c/code\u003e.\n\u003c/p\u003e\n\n\u003cpre\u003e\nStringUtils.containsAny(null, *)            \u003d false\nStringUtils.containsAny(\"\", *)              \u003d false\nStringUtils.containsAny(*, null)            \u003d false\nStringUtils.containsAny(*, \"\")              \u003d false\nStringUtils.containsAny(\"zzabyycdxx\", \"za\") \u003d true\nStringUtils.containsAny(\"zzabyycdxx\", \"by\") \u003d true\nStringUtils.containsAny(\"aba\",\"z\")          \u003d false\n\u003c/pre\u003e\n\n@param str the String to check, may be null\n@param searchChars the chars to search for, may be null\n@return the \u003ccode\u003etrue\u003c/code\u003e if any of the chars are found, \u003ccode\u003efalse\u003c/code\u003e if no match or null input\n@since 2.4\n"
      }
    },
    "2a088e07629f1d3f3cf3205ef04754067a2aad21": {
      "type": "Ybodychange",
      "commitMessage": "Simplify code paths where a statement is unnecessarily nested within an else clause. Also flip some if/else statements when tests can be expressed more clearly.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@619137 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/6/08, 12:10 PM",
      "commitName": "2a088e07629f1d3f3cf3205ef04754067a2aad21",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "2/6/08, 11:27 AM",
      "commitNameOld": "a285861cf07afacbe6e74a9a2ce69894a7944ff0",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static boolean containsAny(String str, String searchChars) {\n    if (searchChars \u003d\u003d null) {\n        return false;\n    }\n    return containsAny(str, searchChars.toCharArray());\n}",
      "path": "src/java/org/apache/commons/lang/StringUtils.java",
      "functionStartLine": 1204,
      "functionName": "containsAny",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eChecks if the String contains any character in the given\nset of characters.\u003c/p\u003e\n\n\u003cp\u003eA \u003ccode\u003enull\u003c/code\u003e String will return \u003ccode\u003efalse\u003c/code\u003e.\nA \u003ccode\u003enull\u003c/code\u003e search string will return \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\n\u003cpre\u003e\nStringUtils.containsAny(null, *)            \u003d false\nStringUtils.containsAny(\"\", *)              \u003d false\nStringUtils.containsAny(*, null)            \u003d false\nStringUtils.containsAny(*, \"\")              \u003d false\nStringUtils.containsAny(\"zzabyycdxx\", \"za\") \u003d true\nStringUtils.containsAny(\"zzabyycdxx\", \"by\") \u003d true\nStringUtils.containsAny(\"aba\",\"z\")          \u003d false\n\u003c/pre\u003e\n\n@param str the String to check, may be null\n@param searchChars the chars to search for, may be null\n@return the \u003ccode\u003etrue\u003c/code\u003e if any of the chars are found,\n\u003ccode\u003efalse\u003c/code\u003e if no match or null input\n@since 2.4\n",
      "diff": "@@ -1,7 +1,6 @@\n public static boolean containsAny(String str, String searchChars) {\n     if (searchChars \u003d\u003d null) {\n         return false;\n-    } else {\n-        return containsAny(str, searchChars.toCharArray());\n     }\n+    return containsAny(str, searchChars.toCharArray());\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4bdc5d864104f29b4ebfe0105b75002db9f58f07": {
      "type": "Yintroduced",
      "commitMessage": "LANG-377 Add containsAny() methods to StringUtils\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@595929 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/17/07, 1:53 AM",
      "commitName": "4bdc5d864104f29b4ebfe0105b75002db9f58f07",
      "commitAuthor": "Niall Kegan Pemberton",
      "diff": "@@ -0,0 +1,7 @@\n+public static boolean containsAny(String str, String searchChars) {\n+    if (searchChars \u003d\u003d null) {\n+        return false;\n+    } else {\n+        return containsAny(str, searchChars.toCharArray());\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "public static boolean containsAny(String str, String searchChars) {\n    if (searchChars \u003d\u003d null) {\n        return false;\n    } else {\n        return containsAny(str, searchChars.toCharArray());\n    }\n}",
      "path": "src/java/org/apache/commons/lang/StringUtils.java",
      "functionStartLine": 1204,
      "functionName": "containsAny",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eChecks if the String contains any character in the given\nset of characters.\u003c/p\u003e\n\n\u003cp\u003eA \u003ccode\u003enull\u003c/code\u003e String will return \u003ccode\u003efalse\u003c/code\u003e.\nA \u003ccode\u003enull\u003c/code\u003e search string will return \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\n\u003cpre\u003e\nStringUtils.containsAny(null, *)            \u003d false\nStringUtils.containsAny(\"\", *)              \u003d false\nStringUtils.containsAny(*, null)            \u003d false\nStringUtils.containsAny(*, \"\")              \u003d false\nStringUtils.containsAny(\"zzabyycdxx\", \"za\") \u003d true\nStringUtils.containsAny(\"zzabyycdxx\", \"by\") \u003d true\nStringUtils.containsAny(\"aba\",\"z\")          \u003d false\n\u003c/pre\u003e\n\n@param str the String to check, may be null\n@param searchChars the chars to search for, may be null\n@return the \u003ccode\u003etrue\u003c/code\u003e if any of the chars are found,\n\u003ccode\u003efalse\u003c/code\u003e if no match or null input\n@since 2.4\n"
    }
  }
}