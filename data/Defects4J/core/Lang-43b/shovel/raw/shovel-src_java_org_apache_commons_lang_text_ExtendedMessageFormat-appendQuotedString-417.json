{
  "origin": "codeshovel",
  "repositoryName": "Lang-43b",
  "repositoryPath": "/tmp/Lang-43b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ExtendedMessageFormat.java",
  "functionName": "appendQuotedString",
  "functionId": "appendQuotedString___pattern-String__pos-ParsePosition__appendTo-StringBuffer__escapingOn-boolean",
  "sourceFilePath": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java",
  "functionAnnotation": "",
  "functionDoc": "Consume a quoted string, adding it to \u003ccode\u003eappendTo\u003c/code\u003e if\nspecified.\n\n@param pattern pattern to parse\n@param pos current parse position\n@param appendTo optional StringBuffer to append\n@param escapingOn whether to process escaped quotes\n@return \u003ccode\u003eappendTo\u003c/code\u003e\n",
  "functionStartLine": 417,
  "functionEndLine": 444,
  "numCommitsSeen": 15,
  "timeTaken": 1111,
  "changeHistory": [
    "695289c466e51ff7f211867dccbc755fd515fc43",
    "9d5837bfc4b05cc2659e9c920d75a07a4a07b2ab",
    "783f8b9c552be16a92e8d0241a321378defacd51",
    "b2f1757bf9ec1632a940b9a2e65a1a022ba54af8"
  ],
  "changeHistoryShort": {
    "695289c466e51ff7f211867dccbc755fd515fc43": "Yformatchange",
    "9d5837bfc4b05cc2659e9c920d75a07a4a07b2ab": "Ymultichange(Ydocchange,Yformatchange)",
    "783f8b9c552be16a92e8d0241a321378defacd51": "Ybodychange",
    "b2f1757bf9ec1632a940b9a2e65a1a022ba54af8": "Yintroduced"
  },
  "changeHistoryDetails": {
    "695289c466e51ff7f211867dccbc755fd515fc43": {
      "type": "Yformatchange",
      "commitMessage": "[LANG-362] simplify ExtendedMessageFormat design; recycle as much of super implementation as possible\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@630969 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/25/08, 11:51 AM",
      "commitName": "695289c466e51ff7f211867dccbc755fd515fc43",
      "commitAuthor": "Matthew Jason Benson",
      "commitDateOld": "1/16/08, 4:31 PM",
      "commitNameOld": "d22a7081177900da607990bfa75cdf28d01abff0",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 39.81,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "actualSource": "private StringBuffer appendQuotedString(String pattern, ParsePosition pos, StringBuffer appendTo, boolean escapingOn) {\n    int start \u003d pos.getIndex();\n    char[] c \u003d pattern.toCharArray();\n    if (escapingOn \u0026\u0026 c[start] \u003d\u003d QUOTE) {\n        return appendTo \u003d\u003d null ? null : appendTo.append(QUOTE);\n    }\n    int lastHold \u003d start;\n    for (int i \u003d pos.getIndex(); i \u003c pattern.length(); i++) {\n        if (escapingOn \u0026\u0026 pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n            appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);\n            pos.setIndex(i + ESCAPED_QUOTE.length());\n            lastHold \u003d pos.getIndex();\n            continue;\n        }\n        switch(c[pos.getIndex()]) {\n            case QUOTE:\n                next(pos);\n                return appendTo \u003d\u003d null ? null : appendTo.append(c, lastHold, pos.getIndex() - lastHold);\n            default:\n                next(pos);\n        }\n    }\n    throw new IllegalArgumentException(\"Unterminated quoted string at position \" + start);\n}",
      "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java",
      "functionStartLine": 384,
      "functionName": "appendQuotedString",
      "functionAnnotation": "",
      "functionDoc": "Consume a quoted string, adding it to \u003ccode\u003eappendTo\u003c/code\u003e if\nspecified.\n\n@param pattern pattern to parse\n@param pos current parse position\n@param appendTo optional StringBuffer to append\n@param escapingOn whether to process escaped quotes\n@return \u003ccode\u003eappendTo\u003c/code\u003e\n",
      "diff": "",
      "extendedDetails": {}
    },
    "9d5837bfc4b05cc2659e9c920d75a07a4a07b2ab": {
      "type": "Ymultichange(Ydocchange,Yformatchange)",
      "commitMessage": "[LANG-362] checkstyle; javadoc; extended testing which necessitated some refactorings\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@598707 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/27/07, 9:27 AM",
      "commitName": "9d5837bfc4b05cc2659e9c920d75a07a4a07b2ab",
      "commitAuthor": "Matthew Jason Benson",
      "subchanges": [
        {
          "type": "Ydocchange",
          "commitMessage": "[LANG-362] checkstyle; javadoc; extended testing which necessitated some refactorings\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@598707 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/27/07, 9:27 AM",
          "commitName": "9d5837bfc4b05cc2659e9c920d75a07a4a07b2ab",
          "commitAuthor": "Matthew Jason Benson",
          "commitDateOld": "11/5/07, 8:16 AM",
          "commitNameOld": "783f8b9c552be16a92e8d0241a321378defacd51",
          "commitAuthorOld": "Matthew Jason Benson",
          "daysBetweenCommits": 22.05,
          "commitsBetweenForRepo": 42,
          "commitsBetweenForFile": 1,
          "actualSource": "private StringBuffer appendQuotedString(String pattern, ParsePosition pos, StringBuffer appendTo, boolean escapingOn) {\n    int start \u003d pos.getIndex();\n    char[] c \u003d pattern.toCharArray();\n    if (escapingOn \u0026\u0026 c[start] \u003d\u003d QUOTE) {\n        return appendTo \u003d\u003d null ? null : appendTo.append(QUOTE);\n    }\n    int lastHold \u003d start;\n    for (int i \u003d pos.getIndex(); i \u003c pattern.length(); i++) {\n        if (escapingOn \u0026\u0026 pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n            appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);\n            pos.setIndex(i + ESCAPED_QUOTE.length());\n            lastHold \u003d pos.getIndex();\n            continue;\n        }\n        switch(c[pos.getIndex()]) {\n            case QUOTE:\n                next(pos);\n                return appendTo \u003d\u003d null ? null : appendTo.append(c, lastHold, pos.getIndex() - lastHold);\n            default:\n                next(pos);\n        }\n    }\n    throw new IllegalArgumentException(\"Unterminated quoted string at position \" + start);\n}",
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java",
          "functionStartLine": 249,
          "functionName": "appendQuotedString",
          "functionAnnotation": "",
          "functionDoc": "Consume a quoted string, adding it to \u003ccode\u003eappendTo\u003c/code\u003e if\nspecified.\n\n@param pattern pattern to parse\n@param pos current parse position\n@param appendTo optional StringBuffer to append\n@param escapingOn whether to process escaped quotes\n@return \u003ccode\u003eappendTo\u003c/code\u003e\n",
          "diff": "",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "Consume a quoted string, adding it to \u003ccode\u003eappendTo\u003c/code\u003e if\nspecified.\n\n@param pattern pattern to parse\n@param pos current parse position\n@param appendTo optional StringBuffer to append\n@param escapingOn whether to process escaped quotes\n@return \u003ccode\u003eappendTo\u003c/code\u003e\n"
          }
        },
        {
          "type": "Yformatchange",
          "commitMessage": "[LANG-362] checkstyle; javadoc; extended testing which necessitated some refactorings\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@598707 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/27/07, 9:27 AM",
          "commitName": "9d5837bfc4b05cc2659e9c920d75a07a4a07b2ab",
          "commitAuthor": "Matthew Jason Benson",
          "commitDateOld": "11/5/07, 8:16 AM",
          "commitNameOld": "783f8b9c552be16a92e8d0241a321378defacd51",
          "commitAuthorOld": "Matthew Jason Benson",
          "daysBetweenCommits": 22.05,
          "commitsBetweenForRepo": 42,
          "commitsBetweenForFile": 1,
          "actualSource": "private StringBuffer appendQuotedString(String pattern, ParsePosition pos, StringBuffer appendTo, boolean escapingOn) {\n    int start \u003d pos.getIndex();\n    char[] c \u003d pattern.toCharArray();\n    if (escapingOn \u0026\u0026 c[start] \u003d\u003d QUOTE) {\n        return appendTo \u003d\u003d null ? null : appendTo.append(QUOTE);\n    }\n    int lastHold \u003d start;\n    for (int i \u003d pos.getIndex(); i \u003c pattern.length(); i++) {\n        if (escapingOn \u0026\u0026 pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n            appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);\n            pos.setIndex(i + ESCAPED_QUOTE.length());\n            lastHold \u003d pos.getIndex();\n            continue;\n        }\n        switch(c[pos.getIndex()]) {\n            case QUOTE:\n                next(pos);\n                return appendTo \u003d\u003d null ? null : appendTo.append(c, lastHold, pos.getIndex() - lastHold);\n            default:\n                next(pos);\n        }\n    }\n    throw new IllegalArgumentException(\"Unterminated quoted string at position \" + start);\n}",
          "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java",
          "functionStartLine": 249,
          "functionName": "appendQuotedString",
          "functionAnnotation": "",
          "functionDoc": "Consume a quoted string, adding it to \u003ccode\u003eappendTo\u003c/code\u003e if\nspecified.\n\n@param pattern pattern to parse\n@param pos current parse position\n@param appendTo optional StringBuffer to append\n@param escapingOn whether to process escaped quotes\n@return \u003ccode\u003eappendTo\u003c/code\u003e\n",
          "diff": "",
          "extendedDetails": {}
        }
      ]
    },
    "783f8b9c552be16a92e8d0241a321378defacd51": {
      "type": "Ybodychange",
      "commitMessage": "remove accidental use of 1.5+ method\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@592063 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/5/07, 8:16 AM",
      "commitName": "783f8b9c552be16a92e8d0241a321378defacd51",
      "commitAuthor": "Matthew Jason Benson",
      "commitDateOld": "10/30/07, 8:06 AM",
      "commitNameOld": "b2f1757bf9ec1632a940b9a2e65a1a022ba54af8",
      "commitAuthorOld": "Matthew Jason Benson",
      "daysBetweenCommits": 6.05,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "private StringBuffer appendQuotedString(String pattern, ParsePosition pos, StringBuffer appendTo, boolean escapingOn) {\n    int start \u003d pos.getIndex();\n    char[] c \u003d pattern.toCharArray();\n    if (escapingOn \u0026\u0026 c[start] \u003d\u003d QUOTE) {\n        return appendTo \u003d\u003d null ? null : appendTo.append(QUOTE);\n    }\n    int lastHold \u003d start;\n    for (int i \u003d pos.getIndex(); i \u003c pattern.length(); i++) {\n        if (escapingOn \u0026\u0026 pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n            appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);\n            pos.setIndex(i + ESCAPED_QUOTE.length());\n            lastHold \u003d pos.getIndex();\n            continue;\n        }\n        switch(c[pos.getIndex()]) {\n            case QUOTE:\n                next(pos);\n                return appendTo \u003d\u003d null ? null : appendTo.append(c, lastHold, pos.getIndex() - lastHold);\n            default:\n                next(pos);\n        }\n    }\n    throw new IllegalArgumentException(\"Unterminated quoted string at position \" + start);\n}",
      "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java",
      "functionStartLine": 192,
      "functionName": "appendQuotedString",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,23 +1,24 @@\n private StringBuffer appendQuotedString(String pattern, ParsePosition pos, StringBuffer appendTo, boolean escapingOn) {\n     int start \u003d pos.getIndex();\n-    if (escapingOn \u0026\u0026 pattern.charAt(start) \u003d\u003d QUOTE) {\n+    char[] c \u003d pattern.toCharArray();\n+    if (escapingOn \u0026\u0026 c[start] \u003d\u003d QUOTE) {\n         return appendTo \u003d\u003d null ? null : appendTo.append(QUOTE);\n     }\n     int lastHold \u003d start;\n     for (int i \u003d pos.getIndex(); i \u003c pattern.length(); i++) {\n         if (escapingOn \u0026\u0026 pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n-            appendTo.append(pattern, lastHold, pos.getIndex()).append(QUOTE);\n+            appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);\n             pos.setIndex(i + ESCAPED_QUOTE.length());\n             lastHold \u003d pos.getIndex();\n             continue;\n         }\n-        switch(pattern.charAt(pos.getIndex())) {\n+        switch(c[pos.getIndex()]) {\n             case QUOTE:\n                 next(pos);\n-                return appendTo \u003d\u003d null ? null : appendTo.append(pattern, lastHold, pos.getIndex());\n+                return appendTo \u003d\u003d null ? null : appendTo.append(c, lastHold, pos.getIndex() - lastHold);\n             default:\n                 next(pos);\n         }\n     }\n     throw new IllegalArgumentException(\"Unterminated quoted string at position \" + start);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b2f1757bf9ec1632a940b9a2e65a1a022ba54af8": {
      "type": "Yintroduced",
      "commitMessage": "[LANG-362] Add ExtendedMessageFormat\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@590106 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/30/07, 8:06 AM",
      "commitName": "b2f1757bf9ec1632a940b9a2e65a1a022ba54af8",
      "commitAuthor": "Matthew Jason Benson",
      "diff": "@@ -0,0 +1,23 @@\n+private StringBuffer appendQuotedString(String pattern, ParsePosition pos, StringBuffer appendTo, boolean escapingOn) {\n+    int start \u003d pos.getIndex();\n+    if (escapingOn \u0026\u0026 pattern.charAt(start) \u003d\u003d QUOTE) {\n+        return appendTo \u003d\u003d null ? null : appendTo.append(QUOTE);\n+    }\n+    int lastHold \u003d start;\n+    for (int i \u003d pos.getIndex(); i \u003c pattern.length(); i++) {\n+        if (escapingOn \u0026\u0026 pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n+            appendTo.append(pattern, lastHold, pos.getIndex()).append(QUOTE);\n+            pos.setIndex(i + ESCAPED_QUOTE.length());\n+            lastHold \u003d pos.getIndex();\n+            continue;\n+        }\n+        switch(pattern.charAt(pos.getIndex())) {\n+            case QUOTE:\n+                next(pos);\n+                return appendTo \u003d\u003d null ? null : appendTo.append(pattern, lastHold, pos.getIndex());\n+            default:\n+                next(pos);\n+        }\n+    }\n+    throw new IllegalArgumentException(\"Unterminated quoted string at position \" + start);\n+}\n\\ No newline at end of file\n",
      "actualSource": "private StringBuffer appendQuotedString(String pattern, ParsePosition pos, StringBuffer appendTo, boolean escapingOn) {\n    int start \u003d pos.getIndex();\n    if (escapingOn \u0026\u0026 pattern.charAt(start) \u003d\u003d QUOTE) {\n        return appendTo \u003d\u003d null ? null : appendTo.append(QUOTE);\n    }\n    int lastHold \u003d start;\n    for (int i \u003d pos.getIndex(); i \u003c pattern.length(); i++) {\n        if (escapingOn \u0026\u0026 pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n            appendTo.append(pattern, lastHold, pos.getIndex()).append(QUOTE);\n            pos.setIndex(i + ESCAPED_QUOTE.length());\n            lastHold \u003d pos.getIndex();\n            continue;\n        }\n        switch(pattern.charAt(pos.getIndex())) {\n            case QUOTE:\n                next(pos);\n                return appendTo \u003d\u003d null ? null : appendTo.append(pattern, lastHold, pos.getIndex());\n            default:\n                next(pos);\n        }\n    }\n    throw new IllegalArgumentException(\"Unterminated quoted string at position \" + start);\n}",
      "path": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java",
      "functionStartLine": 191,
      "functionName": "appendQuotedString",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}