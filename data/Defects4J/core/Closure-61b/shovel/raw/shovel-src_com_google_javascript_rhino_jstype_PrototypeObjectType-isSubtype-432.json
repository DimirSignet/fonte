{
  "origin": "codeshovel",
  "repositoryName": "Closure-61b",
  "repositoryPath": "/tmp/Closure-61b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PrototypeObjectType.java",
  "functionName": "isSubtype",
  "functionId": "isSubtype___that-JSType",
  "sourceFilePath": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 432,
  "functionEndLine": 483,
  "numCommitsSeen": 19,
  "timeTaken": 823,
  "changeHistory": [
    "c438dfd06013f82daa648d23b864842ff1881695",
    "2851a41947bed8b8e100c7dac7d1edbc1c909d24",
    "a36a61a9027c5bca5752b0ecca7c609c07e568bb",
    "86860111110ec7a96d92fbefb6c3ae15e3575405",
    "a2d8936fae3eb0e3873c7f7c0233344c81436404",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "c438dfd06013f82daa648d23b864842ff1881695": "Ybodychange",
    "2851a41947bed8b8e100c7dac7d1edbc1c909d24": "Ybodychange",
    "a36a61a9027c5bca5752b0ecca7c609c07e568bb": "Ybodychange",
    "86860111110ec7a96d92fbefb6c3ae15e3575405": "Ybodychange",
    "a2d8936fae3eb0e3873c7f7c0233344c81436404": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c438dfd06013f82daa648d23b864842ff1881695": {
      "type": "Ybodychange",
      "commitMessage": "\nImplement multiple extends for interfaces\n\nR\u003dnicksantos\nDELTA\u003d711  (635 added, 41 deleted, 35 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1917\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1105 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/16/11, 12:57 PM",
      "commitName": "c438dfd06013f82daa648d23b864842ff1881695",
      "commitAuthor": "zhuyi@google.com",
      "commitDateOld": "5/10/11, 2:34 PM",
      "commitNameOld": "2851a41947bed8b8e100c7dac7d1edbc1c909d24",
      "commitAuthorOld": "zhuyi@google.com",
      "daysBetweenCommits": 5.93,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic boolean isSubtype(JSType that) {\n    if (JSType.isSubtype(this, that)) {\n        return true;\n    }\n    if (that instanceof UnionType) {\n        return false;\n    }\n    if (that instanceof RecordType) {\n        return RecordType.isSubtype(this, (RecordType) that);\n    }\n    ObjectType thatObj \u003d that.toObjectType();\n    ObjectType thatCtor \u003d thatObj \u003d\u003d null ? null : thatObj.getConstructor();\n    if (thatCtor !\u003d null \u0026\u0026 thatCtor.isInterface()) {\n        Iterable\u003cObjectType\u003e thisInterfaces \u003d getCtorImplementedInterfaces();\n        for (ObjectType thisInterface : thisInterfaces) {\n            if (thisInterface.isSubtype(that)) {\n                return true;\n            }\n        }\n    }\n    if (getConstructor() !\u003d null \u0026\u0026 getConstructor().isInterface()) {\n        for (ObjectType thisInterface : getCtorExtendedInterfaces()) {\n            if (thisInterface.isSubtype(that)) {\n                return true;\n            }\n        }\n    }\n    if (that !\u003d null) {\n        if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n            return true;\n        }\n        return this.isImplicitPrototype(thatObj);\n    }\n    return false;\n}",
      "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
      "functionStartLine": 437,
      "functionName": "isSubtype",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,29 +1,36 @@\n @Override\n public boolean isSubtype(JSType that) {\n     if (JSType.isSubtype(this, that)) {\n         return true;\n     }\n     if (that instanceof UnionType) {\n         return false;\n     }\n     if (that instanceof RecordType) {\n         return RecordType.isSubtype(this, (RecordType) that);\n     }\n     ObjectType thatObj \u003d that.toObjectType();\n     ObjectType thatCtor \u003d thatObj \u003d\u003d null ? null : thatObj.getConstructor();\n     if (thatCtor !\u003d null \u0026\u0026 thatCtor.isInterface()) {\n         Iterable\u003cObjectType\u003e thisInterfaces \u003d getCtorImplementedInterfaces();\n         for (ObjectType thisInterface : thisInterfaces) {\n             if (thisInterface.isSubtype(that)) {\n                 return true;\n             }\n         }\n     }\n+    if (getConstructor() !\u003d null \u0026\u0026 getConstructor().isInterface()) {\n+        for (ObjectType thisInterface : getCtorExtendedInterfaces()) {\n+            if (thisInterface.isSubtype(that)) {\n+                return true;\n+            }\n+        }\n+    }\n     if (that !\u003d null) {\n         if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n             return true;\n         }\n         return this.isImplicitPrototype(thatObj);\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2851a41947bed8b8e100c7dac7d1edbc1c909d24": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nGot multiple cases broken from different teams.\n\n*** Original change description ***\n\nImplement multi extends for interfaces\n\nR\u003dnicksantos\nDELTA\u003d635  (41 added, 560 deleted, 34 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1813\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1077 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/10/11, 2:34 PM",
      "commitName": "2851a41947bed8b8e100c7dac7d1edbc1c909d24",
      "commitAuthor": "zhuyi@google.com",
      "commitDateOld": "5/10/11, 1:26 PM",
      "commitNameOld": "a36a61a9027c5bca5752b0ecca7c609c07e568bb",
      "commitAuthorOld": "zhuyi@google.com",
      "daysBetweenCommits": 0.05,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic boolean isSubtype(JSType that) {\n    if (JSType.isSubtype(this, that)) {\n        return true;\n    }\n    if (that instanceof UnionType) {\n        return false;\n    }\n    if (that instanceof RecordType) {\n        return RecordType.isSubtype(this, (RecordType) that);\n    }\n    ObjectType thatObj \u003d that.toObjectType();\n    ObjectType thatCtor \u003d thatObj \u003d\u003d null ? null : thatObj.getConstructor();\n    if (thatCtor !\u003d null \u0026\u0026 thatCtor.isInterface()) {\n        Iterable\u003cObjectType\u003e thisInterfaces \u003d getCtorImplementedInterfaces();\n        for (ObjectType thisInterface : thisInterfaces) {\n            if (thisInterface.isSubtype(that)) {\n                return true;\n            }\n        }\n    }\n    if (that !\u003d null) {\n        if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n            return true;\n        }\n        return this.isImplicitPrototype(thatObj);\n    }\n    return false;\n}",
      "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
      "functionStartLine": 430,
      "functionName": "isSubtype",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,39 +1,29 @@\n @Override\n public boolean isSubtype(JSType that) {\n     if (JSType.isSubtype(this, that)) {\n         return true;\n     }\n     if (that instanceof UnionType) {\n         return false;\n     }\n     if (that instanceof RecordType) {\n         return RecordType.isSubtype(this, (RecordType) that);\n     }\n     ObjectType thatObj \u003d that.toObjectType();\n     ObjectType thatCtor \u003d thatObj \u003d\u003d null ? null : thatObj.getConstructor();\n     if (thatCtor !\u003d null \u0026\u0026 thatCtor.isInterface()) {\n         Iterable\u003cObjectType\u003e thisInterfaces \u003d getCtorImplementedInterfaces();\n         for (ObjectType thisInterface : thisInterfaces) {\n             if (thisInterface.isSubtype(that)) {\n                 return true;\n             }\n         }\n     }\n-    if (getConstructor() !\u003d null \u0026\u0026 getConstructor().isInterface()) {\n-        for (ObjectType thisInterface : getCtorExtendedInterfaces()) {\n-            if (thisInterface.isSubtype(that)) {\n-                return true;\n-            }\n-        }\n-        if (that.isEquivalentTo(registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE))) {\n-            return true;\n-        }\n-    }\n     if (that !\u003d null) {\n         if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n             return true;\n         }\n         return this.isImplicitPrototype(thatObj);\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a36a61a9027c5bca5752b0ecca7c609c07e568bb": {
      "type": "Ybodychange",
      "commitMessage": "\nImplement multi extends for interfaces\n\nR\u003dnicksantos\nDELTA\u003d635  (560 added, 41 deleted, 34 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1810\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1074 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/10/11, 1:26 PM",
      "commitName": "a36a61a9027c5bca5752b0ecca7c609c07e568bb",
      "commitAuthor": "zhuyi@google.com",
      "commitDateOld": "5/10/11, 8:34 AM",
      "commitNameOld": "091577d5000b2260452cdc79eacf54925de894a3",
      "commitAuthorOld": "bashir@google.com",
      "daysBetweenCommits": 0.2,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic boolean isSubtype(JSType that) {\n    if (JSType.isSubtype(this, that)) {\n        return true;\n    }\n    if (that instanceof UnionType) {\n        return false;\n    }\n    if (that instanceof RecordType) {\n        return RecordType.isSubtype(this, (RecordType) that);\n    }\n    ObjectType thatObj \u003d that.toObjectType();\n    ObjectType thatCtor \u003d thatObj \u003d\u003d null ? null : thatObj.getConstructor();\n    if (thatCtor !\u003d null \u0026\u0026 thatCtor.isInterface()) {\n        Iterable\u003cObjectType\u003e thisInterfaces \u003d getCtorImplementedInterfaces();\n        for (ObjectType thisInterface : thisInterfaces) {\n            if (thisInterface.isSubtype(that)) {\n                return true;\n            }\n        }\n    }\n    if (getConstructor() !\u003d null \u0026\u0026 getConstructor().isInterface()) {\n        for (ObjectType thisInterface : getCtorExtendedInterfaces()) {\n            if (thisInterface.isSubtype(that)) {\n                return true;\n            }\n        }\n        if (that.isEquivalentTo(registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE))) {\n            return true;\n        }\n    }\n    if (that !\u003d null) {\n        if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n            return true;\n        }\n        return this.isImplicitPrototype(thatObj);\n    }\n    return false;\n}",
      "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
      "functionStartLine": 435,
      "functionName": "isSubtype",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,29 +1,39 @@\n @Override\n public boolean isSubtype(JSType that) {\n     if (JSType.isSubtype(this, that)) {\n         return true;\n     }\n     if (that instanceof UnionType) {\n         return false;\n     }\n     if (that instanceof RecordType) {\n         return RecordType.isSubtype(this, (RecordType) that);\n     }\n     ObjectType thatObj \u003d that.toObjectType();\n     ObjectType thatCtor \u003d thatObj \u003d\u003d null ? null : thatObj.getConstructor();\n     if (thatCtor !\u003d null \u0026\u0026 thatCtor.isInterface()) {\n         Iterable\u003cObjectType\u003e thisInterfaces \u003d getCtorImplementedInterfaces();\n         for (ObjectType thisInterface : thisInterfaces) {\n             if (thisInterface.isSubtype(that)) {\n                 return true;\n             }\n         }\n     }\n+    if (getConstructor() !\u003d null \u0026\u0026 getConstructor().isInterface()) {\n+        for (ObjectType thisInterface : getCtorExtendedInterfaces()) {\n+            if (thisInterface.isSubtype(that)) {\n+                return true;\n+            }\n+        }\n+        if (that.isEquivalentTo(registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE))) {\n+            return true;\n+        }\n+    }\n     if (that !\u003d null) {\n         if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n             return true;\n         }\n         return this.isImplicitPrototype(thatObj);\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "86860111110ec7a96d92fbefb6c3ae15e3575405": {
      "type": "Ybodychange",
      "commitMessage": "Fix up the inheritance hierarchy so that \"Foo implements Bar\" implies\nthat Bar.prototype is the implicit prototype of Foo.prototoype.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@58 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/7/10, 7:08 AM",
      "commitName": "86860111110ec7a96d92fbefb6c3ae15e3575405",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "12/15/09, 1:52 PM",
      "commitNameOld": "a2d8936fae3eb0e3873c7f7c0233344c81436404",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 22.72,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic boolean isSubtype(JSType that) {\n    if (JSType.isSubtype(this, that)) {\n        return true;\n    }\n    if (that instanceof UnionType) {\n        return false;\n    }\n    if (that instanceof RecordType) {\n        return RecordType.isSubtype(this, (RecordType) that);\n    }\n    ObjectType thatObj \u003d that.toObjectType();\n    ObjectType thatCtor \u003d thatObj \u003d\u003d null ? null : thatObj.getConstructor();\n    if (thatCtor !\u003d null \u0026\u0026 thatCtor.isInterface()) {\n        Iterable\u003cObjectType\u003e thisInterfaces \u003d getCtorImplementedInterfaces();\n        for (ObjectType thisInterface : thisInterfaces) {\n            if (thisInterface.isSubtype(that)) {\n                return true;\n            }\n        }\n    }\n    if (that !\u003d null) {\n        if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n            return true;\n        }\n        return this.isImplicitPrototype(thatObj);\n    }\n    return false;\n}",
      "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
      "functionStartLine": 360,
      "functionName": "isSubtype",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,17 +1,29 @@\n @Override\n public boolean isSubtype(JSType that) {\n     if (JSType.isSubtype(this, that)) {\n         return true;\n     }\n+    if (that instanceof UnionType) {\n+        return false;\n+    }\n     if (that instanceof RecordType) {\n         return RecordType.isSubtype(this, (RecordType) that);\n     }\n-    ObjectType thatObj \u003d ObjectType.cast(that);\n+    ObjectType thatObj \u003d that.toObjectType();\n+    ObjectType thatCtor \u003d thatObj \u003d\u003d null ? null : thatObj.getConstructor();\n+    if (thatCtor !\u003d null \u0026\u0026 thatCtor.isInterface()) {\n+        Iterable\u003cObjectType\u003e thisInterfaces \u003d getCtorImplementedInterfaces();\n+        for (ObjectType thisInterface : thisInterfaces) {\n+            if (thisInterface.isSubtype(that)) {\n+                return true;\n+            }\n+        }\n+    }\n     if (that !\u003d null) {\n         if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n             return true;\n         }\n         return this.isImplicitPrototype(thatObj);\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a2d8936fae3eb0e3873c7f7c0233344c81436404": {
      "type": "Ybodychange",
      "commitMessage": "Add warnings for functions that are ambiguously defined on different\nbrowsers.\n\nAdd better support for Caja.\n\nRollback the change to CoalesceVariableNames, because it had problems.\n\nInternal type system refactoring.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@33 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/15/09, 1:52 PM",
      "commitName": "a2d8936fae3eb0e3873c7f7c0233344c81436404",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/25/09, 6:53 AM",
      "commitNameOld": "3bee5d740c96572faea4b9fb8b632e0e07b13cbb",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 20.29,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic boolean isSubtype(JSType that) {\n    if (JSType.isSubtype(this, that)) {\n        return true;\n    }\n    if (that instanceof RecordType) {\n        return RecordType.isSubtype(this, (RecordType) that);\n    }\n    ObjectType thatObj \u003d ObjectType.cast(that);\n    if (that !\u003d null) {\n        if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n            return true;\n        }\n        return this.isImplicitPrototype(thatObj);\n    }\n    return false;\n}",
      "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
      "functionStartLine": 360,
      "functionName": "isSubtype",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,16 +1,17 @@\n @Override\n public boolean isSubtype(JSType that) {\n     if (JSType.isSubtype(this, that)) {\n         return true;\n     }\n     if (that instanceof RecordType) {\n         return RecordType.isSubtype(this, (RecordType) that);\n     }\n-    if (that instanceof ObjectType) {\n+    ObjectType thatObj \u003d ObjectType.cast(that);\n+    if (that !\u003d null) {\n         if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n             return true;\n         }\n-        return this.isImplicitPrototype((ObjectType) that);\n+        return this.isImplicitPrototype(thatObj);\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,16 @@\n+@Override\n+public boolean isSubtype(JSType that) {\n+    if (JSType.isSubtype(this, that)) {\n+        return true;\n+    }\n+    if (that instanceof RecordType) {\n+        return RecordType.isSubtype(this, (RecordType) that);\n+    }\n+    if (that instanceof ObjectType) {\n+        if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n+            return true;\n+        }\n+        return this.isImplicitPrototype((ObjectType) that);\n+    }\n+    return false;\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic boolean isSubtype(JSType that) {\n    if (JSType.isSubtype(this, that)) {\n        return true;\n    }\n    if (that instanceof RecordType) {\n        return RecordType.isSubtype(this, (RecordType) that);\n    }\n    if (that instanceof ObjectType) {\n        if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n            return true;\n        }\n        return this.isImplicitPrototype((ObjectType) that);\n    }\n    return false;\n}",
      "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
      "functionStartLine": 360,
      "functionName": "isSubtype",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}