{
  "origin": "codeshovel",
  "repositoryName": "Closure-61b",
  "repositoryPath": "/tmp/Closure-61b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PeepholeRemoveDeadCode.java",
  "functionName": "tryOptimizeConditionalAfterAssign",
  "functionId": "tryOptimizeConditionalAfterAssign___n-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java",
  "functionAnnotation": "",
  "functionDoc": "Attempt to replace the condition of if or hook immediately that is a\nreference to a name that is assigned immediately before.\n",
  "functionStartLine": 480,
  "functionEndLine": 521,
  "numCommitsSeen": 23,
  "timeTaken": 1761,
  "changeHistory": [
    "86a7d25f3cc1177f35dc6480260fb807912c03fa",
    "ad32e173b7c78f48ff85324dc310fa5b5888e2aa"
  ],
  "changeHistoryShort": {
    "86a7d25f3cc1177f35dc6480260fb807912c03fa": "Ybodychange",
    "ad32e173b7c78f48ff85324dc310fa5b5888e2aa": "Yintroduced"
  },
  "changeHistoryDetails": {
    "86a7d25f3cc1177f35dc6480260fb807912c03fa": {
      "type": "Ybodychange",
      "commitMessage": "\nFix bad folding of expressions containing object and array literals with side-effects.\n\nR\u003dnicksantos\nDELTA\u003d144  (94 added, 0 deleted, 50 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1088\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@941 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/25/11, 4:27 PM",
      "commitName": "86a7d25f3cc1177f35dc6480260fb807912c03fa",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "3/23/11, 2:00 AM",
      "commitNameOld": "d5e2ff0785050ac532fcae42f4396b52313af0c4",
      "commitAuthorOld": "acleung@google.com",
      "daysBetweenCommits": 2.6,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "private void tryOptimizeConditionalAfterAssign(Node n) {\n    Node next \u003d n.getNext();\n    if (isSimpleAssignment(n) \u0026\u0026 isConditionalStatement(next)) {\n        Node lhsAssign \u003d getSimpleAssignmentName(n);\n        Node condition \u003d getConditionalStatementCondition(next);\n        if (NodeUtil.isName(lhsAssign) \u0026\u0026 NodeUtil.isName(condition) \u0026\u0026 lhsAssign.getString().equals(condition.getString())) {\n            Node rhsAssign \u003d getSimpleAssignmentValue(n);\n            TernaryValue value \u003d NodeUtil.getImpureBooleanValue(rhsAssign);\n            if (value !\u003d TernaryValue.UNKNOWN) {\n                int replacementConditionNodeType \u003d (value.toBoolean(true)) ? Token.TRUE : Token.FALSE;\n                condition.getParent().replaceChild(condition, new Node(replacementConditionNodeType));\n                reportCodeChange();\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java",
      "functionStartLine": 481,
      "functionName": "tryOptimizeConditionalAfterAssign",
      "functionAnnotation": "",
      "functionDoc": "Attempt to replace the condition of if or hook immediately that is a\nreference to a name that is assigned immediately before.\n",
      "diff": "@@ -1,16 +1,16 @@\n private void tryOptimizeConditionalAfterAssign(Node n) {\n     Node next \u003d n.getNext();\n     if (isSimpleAssignment(n) \u0026\u0026 isConditionalStatement(next)) {\n         Node lhsAssign \u003d getSimpleAssignmentName(n);\n         Node condition \u003d getConditionalStatementCondition(next);\n         if (NodeUtil.isName(lhsAssign) \u0026\u0026 NodeUtil.isName(condition) \u0026\u0026 lhsAssign.getString().equals(condition.getString())) {\n             Node rhsAssign \u003d getSimpleAssignmentValue(n);\n-            TernaryValue value \u003d NodeUtil.getExpressionBooleanValue(rhsAssign);\n+            TernaryValue value \u003d NodeUtil.getImpureBooleanValue(rhsAssign);\n             if (value !\u003d TernaryValue.UNKNOWN) {\n                 int replacementConditionNodeType \u003d (value.toBoolean(true)) ? Token.TRUE : Token.FALSE;\n                 condition.getParent().replaceChild(condition, new Node(replacementConditionNodeType));\n                 reportCodeChange();\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ad32e173b7c78f48ff85324dc310fa5b5888e2aa": {
      "type": "Yintroduced",
      "commitMessage": "\nChanges to completely remove goog.userAgent as required by\njavatests/com/google/javascript/closure/CompileUserAgentTest.  This\nrequires three changes:\n\n1) being able to remove expressions without side-effects in the global\nscope with the PeepholeRemoveDeadCode pass. This is simply a change to\nhandle both BLOCK and SCRIPT.\n\n2) a change to be able to fold constant result if conditions that have\nside-effects (a \u003d 1).  This was a change to include a smarter version\nof NodeUtil.getBooleanValue. A general expression evaluator would be\npreferred.\n\n3) and finally a bit of a hack to handle assignments followed by if\nstatements.  I would prefer a general solution, but this works well\nenough for this purpose.  A good general solution would need a general\nin-place expression evaluator and control-flow value propagation, both\nof which I\u0027ve special cased. It handles this:\n\na \u003d /MSIE/\nif (a) {\na.exec(value);\n}\n\n(we want the regexp object to get inlined into the exec call so it is known to\nbe side-effect free).\n\nR\u003dgboyer,acleung\nDELTA\u003d388  (333 added, 28 deleted, 27 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d90004\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@326 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/4/10, 12:47 PM",
      "commitName": "ad32e173b7c78f48ff85324dc310fa5b5888e2aa",
      "commitAuthor": "Nicholas.J.Santos",
      "diff": "@@ -0,0 +1,16 @@\n+private void tryOptimizeConditionalAfterAssign(Node n) {\n+    Node next \u003d n.getNext();\n+    if (isSimpleAssignment(n) \u0026\u0026 isConditionalStatement(next)) {\n+        Node lhsAssign \u003d getSimpleAssignmentName(n);\n+        Node condition \u003d getConditionalStatementCondition(next);\n+        if (NodeUtil.isName(lhsAssign) \u0026\u0026 NodeUtil.isName(condition) \u0026\u0026 lhsAssign.getString().equals(condition.getString())) {\n+            Node rhsAssign \u003d getSimpleAssignmentValue(n);\n+            TernaryValue value \u003d NodeUtil.getExpressionBooleanValue(rhsAssign);\n+            if (value !\u003d TernaryValue.UNKNOWN) {\n+                int replacementConditionNodeType \u003d (value.toBoolean(true)) ? Token.TRUE : Token.FALSE;\n+                condition.getParent().replaceChild(condition, new Node(replacementConditionNodeType));\n+                reportCodeChange();\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void tryOptimizeConditionalAfterAssign(Node n) {\n    Node next \u003d n.getNext();\n    if (isSimpleAssignment(n) \u0026\u0026 isConditionalStatement(next)) {\n        Node lhsAssign \u003d getSimpleAssignmentName(n);\n        Node condition \u003d getConditionalStatementCondition(next);\n        if (NodeUtil.isName(lhsAssign) \u0026\u0026 NodeUtil.isName(condition) \u0026\u0026 lhsAssign.getString().equals(condition.getString())) {\n            Node rhsAssign \u003d getSimpleAssignmentValue(n);\n            TernaryValue value \u003d NodeUtil.getExpressionBooleanValue(rhsAssign);\n            if (value !\u003d TernaryValue.UNKNOWN) {\n                int replacementConditionNodeType \u003d (value.toBoolean(true)) ? Token.TRUE : Token.FALSE;\n                condition.getParent().replaceChild(condition, new Node(replacementConditionNodeType));\n                reportCodeChange();\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java",
      "functionStartLine": 136,
      "functionName": "tryOptimizeConditionalAfterAssign",
      "functionAnnotation": "",
      "functionDoc": "Attempt to replace the condition of if or hook immediately that is a\nreference to a name that is assigned immediately before.\n"
    }
  }
}