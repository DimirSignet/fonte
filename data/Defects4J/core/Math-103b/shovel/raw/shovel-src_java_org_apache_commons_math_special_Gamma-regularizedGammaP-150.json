{
  "origin": "codeshovel",
  "repositoryName": "Math-103b",
  "repositoryPath": "/tmp/Math-103b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Gamma.java",
  "functionName": "regularizedGammaP",
  "functionId": "regularizedGammaP___a-double__x-double__epsilon-double__maxIterations-int",
  "sourceFilePath": "src/java/org/apache/commons/math/special/Gamma.java",
  "functionAnnotation": "",
  "functionDoc": "Returns the regularized gamma function P(a, x).\n\nThe implementation of this method is based on:\n\u003cul\u003e\n\u003cli\u003e\n\u003ca href\u003d\"http://mathworld.wolfram.com/RegularizedGammaFunction.html\"\u003e\nRegularized Gamma Function\u003c/a\u003e, equation (1).\u003c/li\u003e\n\u003cli\u003e\n\u003ca href\u003d\"http://mathworld.wolfram.com/IncompleteGammaFunction.html\"\u003e\nIncomplete Gamma Function\u003c/a\u003e, equation (4).\u003c/li\u003e\n\u003cli\u003e\n\u003ca href\u003d\"http://mathworld.wolfram.com/ConfluentHypergeometricFunctionoftheFirstKind.html\"\u003e\nConfluent Hypergeometric Function of the First Kind\u003c/a\u003e, equation (1).\n\u003c/li\u003e\n\u003c/ul\u003e\n\n@param a the a parameter.\n@param x the value.\n@param epsilon When the absolute value of the nth item in the\n               series is less than epsilon the approximation ceases\n               to calculate further elements in the series.\n@param maxIterations Maximum number of \"iterations\" to complete.\n@return the regularized gamma function P(a, x)\n@throws MathException if the algorithm fails to converge.\n",
  "functionStartLine": 150,
  "functionEndLine": 187,
  "numCommitsSeen": 27,
  "timeTaken": 689,
  "changeHistory": [
    "d2d4c5fd63f279be0797468277593ef72506c696",
    "ad6929ea0c89c085422c1e43bb3f763a0e3d25e4",
    "a25f1e4515b215f4510088cd1787725479390b14",
    "e13ab6ed9aead32cf545b319ff22d168985c45e4",
    "0a904461932f2c0455611e77ec6a8d8aced2980b"
  ],
  "changeHistoryShort": {
    "d2d4c5fd63f279be0797468277593ef72506c696": "Ybodychange",
    "ad6929ea0c89c085422c1e43bb3f763a0e3d25e4": "Ybodychange",
    "a25f1e4515b215f4510088cd1787725479390b14": "Ybodychange",
    "e13ab6ed9aead32cf545b319ff22d168985c45e4": "Ydocchange",
    "0a904461932f2c0455611e77ec6a8d8aced2980b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d2d4c5fd63f279be0797468277593ef72506c696": {
      "type": "Ybodychange",
      "commitMessage": "Added and used a specialized convergence exception for exceeded iteration counts\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@506585 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/12/07, 11:17 AM",
      "commitName": "d2d4c5fd63f279be0797468277593ef72506c696",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "11/28/06, 11:14 PM",
      "commitNameOld": "05f7f6059bd0cbb69b5dd49c061f1f3520e0ee1e",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 75.5,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) throws MathException {\n    double ret;\n    if (Double.isNaN(a) || Double.isNaN(x) || (a \u003c\u003d 0.0) || (x \u003c 0.0)) {\n        ret \u003d Double.NaN;\n    } else if (x \u003d\u003d 0.0) {\n        ret \u003d 0.0;\n    } else if (a \u003e\u003d 1.0 \u0026\u0026 x \u003e a) {\n        ret \u003d 1.0 - regularizedGammaQ(a, x, epsilon, maxIterations);\n    } else {\n        double n \u003d 0.0;\n        double an \u003d 1.0 / a;\n        double sum \u003d an;\n        while (Math.abs(an) \u003e epsilon \u0026\u0026 n \u003c maxIterations) {\n            n \u003d n + 1.0;\n            an \u003d an * (x / (a + n));\n            sum \u003d sum + an;\n        }\n        if (n \u003e\u003d maxIterations) {\n            throw new MaxIterationsExceededException(maxIterations);\n        } else {\n            ret \u003d Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;\n        }\n    }\n    return ret;\n}",
      "path": "src/java/org/apache/commons/math/special/Gamma.java",
      "functionStartLine": 150,
      "functionName": "regularizedGammaP",
      "functionAnnotation": "",
      "functionDoc": "Returns the regularized gamma function P(a, x).\n\nThe implementation of this method is based on:\n\u003cul\u003e\n\u003cli\u003e\n\u003ca href\u003d\"http://mathworld.wolfram.com/RegularizedGammaFunction.html\"\u003e\nRegularized Gamma Function\u003c/a\u003e, equation (1).\u003c/li\u003e\n\u003cli\u003e\n\u003ca href\u003d\"http://mathworld.wolfram.com/IncompleteGammaFunction.html\"\u003e\nIncomplete Gamma Function\u003c/a\u003e, equation (4).\u003c/li\u003e\n\u003cli\u003e\n\u003ca href\u003d\"http://mathworld.wolfram.com/ConfluentHypergeometricFunctionoftheFirstKind.html\"\u003e\nConfluent Hypergeometric Function of the First Kind\u003c/a\u003e, equation (1).\n\u003c/li\u003e\n\u003c/ul\u003e\n\n@param a the a parameter.\n@param x the value.\n@param epsilon When the absolute value of the nth item in the\n               series is less than epsilon the approximation ceases\n               to calculate further elements in the series.\n@param maxIterations Maximum number of \"iterations\" to complete.\n@return the regularized gamma function P(a, x)\n@throws MathException if the algorithm fails to converge.\n",
      "diff": "@@ -1,25 +1,25 @@\n public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) throws MathException {\n     double ret;\n     if (Double.isNaN(a) || Double.isNaN(x) || (a \u003c\u003d 0.0) || (x \u003c 0.0)) {\n         ret \u003d Double.NaN;\n     } else if (x \u003d\u003d 0.0) {\n         ret \u003d 0.0;\n     } else if (a \u003e\u003d 1.0 \u0026\u0026 x \u003e a) {\n         ret \u003d 1.0 - regularizedGammaQ(a, x, epsilon, maxIterations);\n     } else {\n         double n \u003d 0.0;\n         double an \u003d 1.0 / a;\n         double sum \u003d an;\n         while (Math.abs(an) \u003e epsilon \u0026\u0026 n \u003c maxIterations) {\n             n \u003d n + 1.0;\n             an \u003d an * (x / (a + n));\n             sum \u003d sum + an;\n         }\n         if (n \u003e\u003d maxIterations) {\n-            throw new ConvergenceException(\"maximum number of iterations reached\");\n+            throw new MaxIterationsExceededException(maxIterations);\n         } else {\n             ret \u003d Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;\n         }\n     }\n     return ret;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ad6929ea0c89c085422c1e43bb3f763a0e3d25e4": {
      "type": "Ybodychange",
      "commitMessage": "Merged changes in MATH_1_1 branch to trunk.  This includes revision 232577 through revision 234481.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@239294 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/22/05, 7:27 PM",
      "commitName": "ad6929ea0c89c085422c1e43bb3f763a0e3d25e4",
      "commitAuthor": "Brent Worden",
      "commitDateOld": "2/26/05, 5:11 AM",
      "commitNameOld": "65b65f88b74de6b3462b04b2cf2a69f064a77557",
      "commitAuthorOld": "Dirk Verbeeck",
      "daysBetweenCommits": 177.55,
      "commitsBetweenForRepo": 77,
      "commitsBetweenForFile": 1,
      "actualSource": "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) throws MathException {\n    double ret;\n    if (Double.isNaN(a) || Double.isNaN(x) || (a \u003c\u003d 0.0) || (x \u003c 0.0)) {\n        ret \u003d Double.NaN;\n    } else if (x \u003d\u003d 0.0) {\n        ret \u003d 0.0;\n    } else if (a \u003e\u003d 1.0 \u0026\u0026 x \u003e a) {\n        ret \u003d 1.0 - regularizedGammaQ(a, x, epsilon, maxIterations);\n    } else {\n        double n \u003d 0.0;\n        double an \u003d 1.0 / a;\n        double sum \u003d an;\n        while (Math.abs(an) \u003e epsilon \u0026\u0026 n \u003c maxIterations) {\n            n \u003d n + 1.0;\n            an \u003d an * (x / (a + n));\n            sum \u003d sum + an;\n        }\n        if (n \u003e\u003d maxIterations) {\n            throw new ConvergenceException(\"maximum number of iterations reached\");\n        } else {\n            ret \u003d Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;\n        }\n    }\n    return ret;\n}",
      "path": "src/java/org/apache/commons/math/special/Gamma.java",
      "functionStartLine": 146,
      "functionName": "regularizedGammaP",
      "functionAnnotation": "",
      "functionDoc": "Returns the regularized gamma function P(a, x).\n\nThe implementation of this method is based on:\n\u003cul\u003e\n\u003cli\u003e\n\u003ca href\u003d\"http://mathworld.wolfram.com/RegularizedGammaFunction.html\"\u003e\nRegularized Gamma Function\u003c/a\u003e, equation (1).\u003c/li\u003e\n\u003cli\u003e\n\u003ca href\u003d\"http://mathworld.wolfram.com/IncompleteGammaFunction.html\"\u003e\nIncomplete Gamma Function\u003c/a\u003e, equation (4).\u003c/li\u003e\n\u003cli\u003e\n\u003ca href\u003d\"http://mathworld.wolfram.com/ConfluentHypergeometricFunctionoftheFirstKind.html\"\u003e\nConfluent Hypergeometric Function of the First Kind\u003c/a\u003e, equation (1).\n\u003c/li\u003e\n\u003c/ul\u003e\n\n@param a the a parameter.\n@param x the value.\n@param epsilon When the absolute value of the nth item in the\n               series is less than epsilon the approximation ceases\n               to calculate further elements in the series.\n@param maxIterations Maximum number of \"iterations\" to complete.\n@return the regularized gamma function P(a, x)\n@throws MathException if the algorithm fails to converge.\n",
      "diff": "@@ -1,25 +1,25 @@\n public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) throws MathException {\n     double ret;\n     if (Double.isNaN(a) || Double.isNaN(x) || (a \u003c\u003d 0.0) || (x \u003c 0.0)) {\n         ret \u003d Double.NaN;\n     } else if (x \u003d\u003d 0.0) {\n         ret \u003d 0.0;\n-    } else if (a \u003e 1.0 \u0026\u0026 x \u003e a) {\n+    } else if (a \u003e\u003d 1.0 \u0026\u0026 x \u003e a) {\n         ret \u003d 1.0 - regularizedGammaQ(a, x, epsilon, maxIterations);\n     } else {\n         double n \u003d 0.0;\n         double an \u003d 1.0 / a;\n         double sum \u003d an;\n         while (Math.abs(an) \u003e epsilon \u0026\u0026 n \u003c maxIterations) {\n             n \u003d n + 1.0;\n             an \u003d an * (x / (a + n));\n             sum \u003d sum + an;\n         }\n         if (n \u003e\u003d maxIterations) {\n             throw new ConvergenceException(\"maximum number of iterations reached\");\n         } else {\n             ret \u003d Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;\n         }\n     }\n     return ret;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a25f1e4515b215f4510088cd1787725479390b14": {
      "type": "Ybodychange",
      "commitMessage": "PR: 29419\nAdded an implementation of regularized gamma function, Q(a, x) \u003d 1 - P(a,x), based on a continued fraction.  This converges much faster for the large x case.  I added the example submitted by Scott as a test case and ran all the test cases with everything passing.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141286 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/7/04, 1:30 PM",
      "commitName": "a25f1e4515b215f4510088cd1787725479390b14",
      "commitAuthor": "Brent Worden",
      "commitDateOld": "4/23/04, 12:30 PM",
      "commitNameOld": "e13ab6ed9aead32cf545b319ff22d168985c45e4",
      "commitAuthorOld": "Brent Worden",
      "daysBetweenCommits": 45.04,
      "commitsBetweenForRepo": 100,
      "commitsBetweenForFile": 1,
      "actualSource": "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) throws MathException {\n    double ret;\n    if (Double.isNaN(a) || Double.isNaN(x) || (a \u003c\u003d 0.0) || (x \u003c 0.0)) {\n        ret \u003d Double.NaN;\n    } else if (x \u003d\u003d 0.0) {\n        ret \u003d 0.0;\n    } else if (a \u003e 1.0 \u0026\u0026 x \u003e a) {\n        ret \u003d 1.0 - regularizedGammaQ(a, x, epsilon, maxIterations);\n    } else {\n        double n \u003d 0.0;\n        double an \u003d 1.0 / a;\n        double sum \u003d an;\n        while (Math.abs(an) \u003e epsilon \u0026\u0026 n \u003c maxIterations) {\n            n \u003d n + 1.0;\n            an \u003d an * (x / (a + n));\n            sum \u003d sum + an;\n        }\n        if (n \u003e\u003d maxIterations) {\n            throw new ConvergenceException(\"maximum number of iterations reached\");\n        } else {\n            ret \u003d Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;\n        }\n    }\n    return ret;\n}",
      "path": "src/java/org/apache/commons/math/special/Gamma.java",
      "functionStartLine": 143,
      "functionName": "regularizedGammaP",
      "functionAnnotation": "",
      "functionDoc": "Returns the regularized gamma function P(a, x).\n\nThe implementation of this method is based on:\n\u003cul\u003e\n\u003cli\u003e\n\u003ca href\u003d\"http://mathworld.wolfram.com/RegularizedGammaFunction.html\"\u003e\nRegularized Gamma Function\u003c/a\u003e, equation (1).\u003c/li\u003e\n\u003cli\u003e\n\u003ca href\u003d\"http://mathworld.wolfram.com/IncompleteGammaFunction.html\"\u003e\nIncomplete Gamma Function\u003c/a\u003e, equation (4).\u003c/li\u003e\n\u003cli\u003e\n\u003ca href\u003d\"http://mathworld.wolfram.com/ConfluentHypergeometricFunctionoftheFirstKind.html\"\u003e\nConfluent Hypergeometric Function of the First Kind\u003c/a\u003e, equation (1).\n\u003c/li\u003e\n\u003c/ul\u003e\n\n@param a the a parameter.\n@param x the value.\n@param epsilon When the absolute value of the nth item in the\n               series is less than epsilon the approximation ceases\n               to calculate further elements in the series.\n@param maxIterations Maximum number of \"iterations\" to complete.\n@return the regularized gamma function P(a, x)\n@throws MathException if the algorithm fails to converge.\n",
      "diff": "@@ -1,23 +1,25 @@\n public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) throws MathException {\n     double ret;\n     if (Double.isNaN(a) || Double.isNaN(x) || (a \u003c\u003d 0.0) || (x \u003c 0.0)) {\n         ret \u003d Double.NaN;\n     } else if (x \u003d\u003d 0.0) {\n         ret \u003d 0.0;\n+    } else if (a \u003e 1.0 \u0026\u0026 x \u003e a) {\n+        ret \u003d 1.0 - regularizedGammaQ(a, x, epsilon, maxIterations);\n     } else {\n         double n \u003d 0.0;\n         double an \u003d 1.0 / a;\n         double sum \u003d an;\n         while (Math.abs(an) \u003e epsilon \u0026\u0026 n \u003c maxIterations) {\n             n \u003d n + 1.0;\n             an \u003d an * (x / (a + n));\n             sum \u003d sum + an;\n         }\n         if (n \u003e\u003d maxIterations) {\n             throw new ConvergenceException(\"maximum number of iterations reached\");\n         } else {\n             ret \u003d Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;\n         }\n     }\n     return ret;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e13ab6ed9aead32cf545b319ff22d168985c45e4": {
      "type": "Ydocchange",
      "commitMessage": "Added some parameter javadoc comments.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141186 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/23/04, 12:30 PM",
      "commitName": "e13ab6ed9aead32cf545b319ff22d168985c45e4",
      "commitAuthor": "Brent Worden",
      "commitDateOld": "2/21/04, 1:35 PM",
      "commitNameOld": "5d66d93e57e142760603024ce1429f2d229a6c8f",
      "commitAuthorOld": "Phil Steitz",
      "daysBetweenCommits": 61.91,
      "commitsBetweenForRepo": 82,
      "commitsBetweenForFile": 1,
      "actualSource": "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) throws MathException {\n    double ret;\n    if (Double.isNaN(a) || Double.isNaN(x) || (a \u003c\u003d 0.0) || (x \u003c 0.0)) {\n        ret \u003d Double.NaN;\n    } else if (x \u003d\u003d 0.0) {\n        ret \u003d 0.0;\n    } else {\n        double n \u003d 0.0;\n        double an \u003d 1.0 / a;\n        double sum \u003d an;\n        while (Math.abs(an) \u003e epsilon \u0026\u0026 n \u003c maxIterations) {\n            n \u003d n + 1.0;\n            an \u003d an * (x / (a + n));\n            sum \u003d sum + an;\n        }\n        if (n \u003e\u003d maxIterations) {\n            throw new ConvergenceException(\"maximum number of iterations reached\");\n        } else {\n            ret \u003d Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;\n        }\n    }\n    return ret;\n}",
      "path": "src/java/org/apache/commons/math/special/Gamma.java",
      "functionStartLine": 101,
      "functionName": "regularizedGammaP",
      "functionAnnotation": "",
      "functionDoc": "Returns the regularized gamma function P(a, x).\n\nThe implementation of this method is based on:\n\u003cul\u003e\n\u003cli\u003e\n\u003ca href\u003d\"http://mathworld.wolfram.com/RegularizedGammaFunction.html\"\u003e\nRegularized Gamma Function\u003c/a\u003e, equation (1).\u003c/li\u003e\n\u003cli\u003e\n\u003ca href\u003d\"http://mathworld.wolfram.com/IncompleteGammaFunction.html\"\u003e\nIncomplete Gamma Function\u003c/a\u003e, equation (4).\u003c/li\u003e\n\u003cli\u003e\n\u003ca href\u003d\"http://mathworld.wolfram.com/ConfluentHypergeometricFunctionoftheFirstKind.html\"\u003e\nConfluent Hypergeometric Function of the First Kind\u003c/a\u003e, equation (1).\n\u003c/li\u003e\n\u003c/ul\u003e\n\n@param a the a parameter.\n@param x the value.\n@param epsilon When the absolute value of the nth item in the\n               series is less than epsilon the approximation ceases\n               to calculate further elements in the series.\n@param maxIterations Maximum number of \"iterations\" to complete.\n@return the regularized gamma function P(a, x)\n@throws MathException if the algorithm fails to converge.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Returns the regularized gamma function P(a, x).\n\nThe implementation of this method is based on:\n\u003cul\u003e\n\u003cli\u003e\n\u003ca href\u003d\"http://mathworld.wolfram.com/RegularizedGammaFunction.html\"\u003e\nRegularized Gamma Function\u003c/a\u003e, equation (1).\u003c/li\u003e\n\u003cli\u003e\n\u003ca href\u003d\"http://mathworld.wolfram.com/IncompleteGammaFunction.html\"\u003e\nIncomplete Gamma Function\u003c/a\u003e, equation (4).\u003c/li\u003e\n\u003cli\u003e\n\u003ca href\u003d\"http://mathworld.wolfram.com/ConfluentHypergeometricFunctionoftheFirstKind.html\"\u003e\nConfluent Hypergeometric Function of the First Kind\u003c/a\u003e, equation (1).\n\u003c/li\u003e\n\u003c/ul\u003e\n\n@param a ???\n@param x ???\n@param epsilon When the absolute value of the nth item in the\n               series is less than epsilon the approximation ceases\n               to calculate further elements in the series.\n@param maxIterations Maximum number of \"iterations\" to complete.\n@return the regularized gamma function P(a, x)\n@throws MathException if the algorithm fails to converge.\n",
        "newValue": "Returns the regularized gamma function P(a, x).\n\nThe implementation of this method is based on:\n\u003cul\u003e\n\u003cli\u003e\n\u003ca href\u003d\"http://mathworld.wolfram.com/RegularizedGammaFunction.html\"\u003e\nRegularized Gamma Function\u003c/a\u003e, equation (1).\u003c/li\u003e\n\u003cli\u003e\n\u003ca href\u003d\"http://mathworld.wolfram.com/IncompleteGammaFunction.html\"\u003e\nIncomplete Gamma Function\u003c/a\u003e, equation (4).\u003c/li\u003e\n\u003cli\u003e\n\u003ca href\u003d\"http://mathworld.wolfram.com/ConfluentHypergeometricFunctionoftheFirstKind.html\"\u003e\nConfluent Hypergeometric Function of the First Kind\u003c/a\u003e, equation (1).\n\u003c/li\u003e\n\u003c/ul\u003e\n\n@param a the a parameter.\n@param x the value.\n@param epsilon When the absolute value of the nth item in the\n               series is less than epsilon the approximation ceases\n               to calculate further elements in the series.\n@param maxIterations Maximum number of \"iterations\" to complete.\n@return the regularized gamma function P(a, x)\n@throws MathException if the algorithm fails to converge.\n"
      }
    },
    "0a904461932f2c0455611e77ec6a8d8aced2980b": {
      "type": "Yintroduced",
      "commitMessage": "Attempting to recover last revision.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141013 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/14/03, 2:25 PM",
      "commitName": "0a904461932f2c0455611e77ec6a8d8aced2980b",
      "commitAuthor": "Mark R. Diggory",
      "diff": "@@ -0,0 +1,23 @@\n+public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) throws MathException {\n+    double ret;\n+    if (Double.isNaN(a) || Double.isNaN(x) || (a \u003c\u003d 0.0) || (x \u003c 0.0)) {\n+        ret \u003d Double.NaN;\n+    } else if (x \u003d\u003d 0.0) {\n+        ret \u003d 0.0;\n+    } else {\n+        double n \u003d 0.0;\n+        double an \u003d 1.0 / a;\n+        double sum \u003d an;\n+        while (Math.abs(an) \u003e epsilon \u0026\u0026 n \u003c maxIterations) {\n+            n \u003d n + 1.0;\n+            an \u003d an * (x / (a + n));\n+            sum \u003d sum + an;\n+        }\n+        if (n \u003e\u003d maxIterations) {\n+            throw new ConvergenceException(\"maximum number of iterations reached\");\n+        } else {\n+            ret \u003d Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;\n+        }\n+    }\n+    return ret;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) throws MathException {\n    double ret;\n    if (Double.isNaN(a) || Double.isNaN(x) || (a \u003c\u003d 0.0) || (x \u003c 0.0)) {\n        ret \u003d Double.NaN;\n    } else if (x \u003d\u003d 0.0) {\n        ret \u003d 0.0;\n    } else {\n        double n \u003d 0.0;\n        double an \u003d 1.0 / a;\n        double sum \u003d an;\n        while (Math.abs(an) \u003e epsilon \u0026\u0026 n \u003c maxIterations) {\n            n \u003d n + 1.0;\n            an \u003d an * (x / (a + n));\n            sum \u003d sum + an;\n        }\n        if (n \u003e\u003d maxIterations) {\n            throw new ConvergenceException(\"maximum number of iterations reached\");\n        } else {\n            ret \u003d Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;\n        }\n    }\n    return ret;\n}",
      "path": "src/java/org/apache/commons/math/special/Gamma.java",
      "functionStartLine": 137,
      "functionName": "regularizedGammaP",
      "functionAnnotation": "",
      "functionDoc": "Returns the regularized gamma function P(a, x).\n\nThe implementation of this method is based on:\n\u003cul\u003e\n\u003cli\u003e\n\u003ca href\u003d\"http://mathworld.wolfram.com/RegularizedGammaFunction.html\"\u003e\nRegularized Gamma Function\u003c/a\u003e, equation (1).\u003c/li\u003e\n\u003cli\u003e\n\u003ca href\u003d\"http://mathworld.wolfram.com/IncompleteGammaFunction.html\"\u003e\nIncomplete Gamma Function\u003c/a\u003e, equation (4).\u003c/li\u003e\n\u003cli\u003e\n\u003ca href\u003d\"http://mathworld.wolfram.com/ConfluentHypergeometricFunctionoftheFirstKind.html\"\u003e\nConfluent Hypergeometric Function of the First Kind\u003c/a\u003e, equation (1).\n\u003c/li\u003e\n\u003c/ul\u003e\n\n@param a ???\n@param x ???\n@param epsilon When the absolute value of the nth item in the\n               series is less than epsilon the approximation ceases\n               to calculate further elements in the series.\n@param maxIterations Maximum number of \"iterations\" to complete.\n@return the regularized gamma function P(a, x)\n@throws MathException if the algorithm fails to converge.\n"
    }
  }
}