{
  "origin": "codeshovel",
  "repositoryName": "Lang-52b",
  "repositoryPath": "/tmp/Lang-52b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "StringEscapeUtils.java",
  "functionName": "escapeJavaStyleString",
  "functionId": "escapeJavaStyleString___out-Writer__str-String__escapeSingleQuote-boolean",
  "sourceFilePath": "src/java/org/apache/commons/lang/StringEscapeUtils.java",
  "functionAnnotation": "",
  "functionDoc": "\u003cp\u003eWorker method for the {@link #escapeJavaScript(String)} method.\u003c/p\u003e\n\n@param out write to receieve the escaped string\n@param str String to escape values in, may be null\n@param escapeSingleQuote escapes single quotes if \u003ccode\u003etrue\u003c/code\u003e\n@throws IOException if an IOException occurs\n",
  "functionStartLine": 171,
  "functionEndLine": 242,
  "numCommitsSeen": 49,
  "timeTaken": 1593,
  "changeHistory": [
    "857a172b413bc475ecca22c84d091e2fb5748bf1",
    "11ff5aa662b11ecdafe9c7d128f6e2211a234be3",
    "5814f50b85a8bf36437e46a420e514a53c7d4837",
    "4d9bdc04b603a00c9335f53c34405dd46b2205ce",
    "97dfb3a031f9f5ec3e8d0ec49f0cc2c322f70ffc",
    "fd38d2f21e2fff119cd9404e2b2742ccb1488541",
    "7eba6afba9a9e1c934985a494725f9470d34c9ec",
    "f03e83e74e8a723fd8c8fffc84cc7faaf9494ab4"
  ],
  "changeHistoryShort": {
    "857a172b413bc475ecca22c84d091e2fb5748bf1": "Ydocchange",
    "11ff5aa662b11ecdafe9c7d128f6e2211a234be3": "Ydocchange",
    "5814f50b85a8bf36437e46a420e514a53c7d4837": "Ybodychange",
    "4d9bdc04b603a00c9335f53c34405dd46b2205ce": "Ybodychange",
    "97dfb3a031f9f5ec3e8d0ec49f0cc2c322f70ffc": "Ybodychange",
    "fd38d2f21e2fff119cd9404e2b2742ccb1488541": "Ybodychange",
    "7eba6afba9a9e1c934985a494725f9470d34c9ec": "Yformatchange",
    "f03e83e74e8a723fd8c8fffc84cc7faaf9494ab4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "857a172b413bc475ecca22c84d091e2fb5748bf1": {
      "type": "Ydocchange",
      "commitMessage": "applied javadoc cleanup patch from http://issues.apache.org/bugzilla/show_bug.cgi?id\u003d35676 (did not apply the VariableFormatter javadoc path since this class is still being worked)\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@209978 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/9/05, 5:44 PM",
      "commitName": "857a172b413bc475ecca22c84d091e2fb5748bf1",
      "commitAuthor": "Steven Caswell",
      "commitDateOld": "6/26/05, 5:54 PM",
      "commitNameOld": "de9bb803f62d8f5b3ccc352594da45245c3115ee",
      "commitAuthorOld": "Steven Caswell",
      "daysBetweenCommits": 12.99,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "actualSource": "private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {\n    if (out \u003d\u003d null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (str \u003d\u003d null) {\n        return;\n    }\n    int sz;\n    sz \u003d str.length();\n    for (int i \u003d 0; i \u003c sz; i++) {\n        char ch \u003d str.charAt(i);\n        if (ch \u003e 0xfff) {\n            out.write(\"\\\\u\" + hex(ch));\n        } else if (ch \u003e 0xff) {\n            out.write(\"\\\\u0\" + hex(ch));\n        } else if (ch \u003e 0x7f) {\n            out.write(\"\\\\u00\" + hex(ch));\n        } else if (ch \u003c 32) {\n            switch(ch) {\n                case \u0027\\b\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027b\u0027);\n                    break;\n                case \u0027\\n\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027n\u0027);\n                    break;\n                case \u0027\\t\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027t\u0027);\n                    break;\n                case \u0027\\f\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027f\u0027);\n                    break;\n                case \u0027\\r\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027r\u0027);\n                    break;\n                default:\n                    if (ch \u003e 0xf) {\n                        out.write(\"\\\\u00\" + hex(ch));\n                    } else {\n                        out.write(\"\\\\u000\" + hex(ch));\n                    }\n                    break;\n            }\n        } else {\n            switch(ch) {\n                case \u0027\\\u0027\u0027:\n                    if (escapeSingleQuote) {\n                        out.write(\u0027\\\\\u0027);\n                    }\n                    out.write(\u0027\\\u0027\u0027);\n                    break;\n                case \u0027\"\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027\"\u0027);\n                    break;\n                case \u0027\\\\\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027\\\\\u0027);\n                    break;\n                default:\n                    out.write(ch);\n                    break;\n            }\n        }\n    }\n}",
      "path": "src/java/org/apache/commons/lang/StringEscapeUtils.java",
      "functionStartLine": 171,
      "functionName": "escapeJavaStyleString",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eWorker method for the {@link #escapeJavaScript(String)} method.\u003c/p\u003e\n\n@param out write to receieve the escaped string\n@param str String to escape values in, may be null\n@param escapeSingleQuote escapes single quotes if \u003ccode\u003etrue\u003c/code\u003e\n@throws IOException if an IOException occurs\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "\u003cp\u003eWorker method for the {@link escapeJavaScript(String) method.\u003c/p\u003e\n\n@param out write to receieve the escaped string\n@param str String to escape values in, may be null\n@param escapeSingleQuote escapes single quotes if \u003ccode\u003etrue\u003c/code\u003e\n@throws IOException if an IOException occurs\n",
        "newValue": "\u003cp\u003eWorker method for the {@link #escapeJavaScript(String)} method.\u003c/p\u003e\n\n@param out write to receieve the escaped string\n@param str String to escape values in, may be null\n@param escapeSingleQuote escapes single quotes if \u003ccode\u003etrue\u003c/code\u003e\n@throws IOException if an IOException occurs\n"
      }
    },
    "11ff5aa662b11ecdafe9c7d128f6e2211a234be3": {
      "type": "Ydocchange",
      "commitMessage": "corrected style issues (mostly empty blocks and missing javadocs)\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@201881 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/26/05, 10:42 AM",
      "commitName": "11ff5aa662b11ecdafe9c7d128f6e2211a234be3",
      "commitAuthor": "Steven Caswell",
      "commitDateOld": "6/26/05, 9:56 AM",
      "commitNameOld": "6609517d29ca4e8123a18b425ab277500ae34e90",
      "commitAuthorOld": "Steven Caswell",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {\n    if (out \u003d\u003d null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (str \u003d\u003d null) {\n        return;\n    }\n    int sz;\n    sz \u003d str.length();\n    for (int i \u003d 0; i \u003c sz; i++) {\n        char ch \u003d str.charAt(i);\n        if (ch \u003e 0xfff) {\n            out.write(\"\\\\u\" + hex(ch));\n        } else if (ch \u003e 0xff) {\n            out.write(\"\\\\u0\" + hex(ch));\n        } else if (ch \u003e 0x7f) {\n            out.write(\"\\\\u00\" + hex(ch));\n        } else if (ch \u003c 32) {\n            switch(ch) {\n                case \u0027\\b\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027b\u0027);\n                    break;\n                case \u0027\\n\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027n\u0027);\n                    break;\n                case \u0027\\t\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027t\u0027);\n                    break;\n                case \u0027\\f\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027f\u0027);\n                    break;\n                case \u0027\\r\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027r\u0027);\n                    break;\n                default:\n                    if (ch \u003e 0xf) {\n                        out.write(\"\\\\u00\" + hex(ch));\n                    } else {\n                        out.write(\"\\\\u000\" + hex(ch));\n                    }\n                    break;\n            }\n        } else {\n            switch(ch) {\n                case \u0027\\\u0027\u0027:\n                    if (escapeSingleQuote) {\n                        out.write(\u0027\\\\\u0027);\n                    }\n                    out.write(\u0027\\\u0027\u0027);\n                    break;\n                case \u0027\"\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027\"\u0027);\n                    break;\n                case \u0027\\\\\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027\\\\\u0027);\n                    break;\n                default:\n                    out.write(ch);\n                    break;\n            }\n        }\n    }\n}",
      "path": "src/java/org/apache/commons/lang/StringEscapeUtils.java",
      "functionStartLine": 171,
      "functionName": "escapeJavaStyleString",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eWorker method for the {@link escapeJavaScript(String) method.\u003c/p\u003e\n\n@param out write to receieve the escaped string\n@param str String to escape values in, may be null\n@param escapeSingleQuote escapes single quotes if \u003ccode\u003etrue\u003c/code\u003e\n@throws IOException if an IOException occurs\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "",
        "newValue": "\u003cp\u003eWorker method for the {@link escapeJavaScript(String) method.\u003c/p\u003e\n\n@param out write to receieve the escaped string\n@param str String to escape values in, may be null\n@param escapeSingleQuote escapes single quotes if \u003ccode\u003etrue\u003c/code\u003e\n@throws IOException if an IOException occurs\n"
      }
    },
    "5814f50b85a8bf36437e46a420e514a53c7d4837": {
      "type": "Ybodychange",
      "commitMessage": "Formatting changes (inserting missing {}s) in StringEscapeUtils.\nPatch submitted by Fredrik Westermarck\nReviewed by Phil Steitz\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137668 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/12/03, 8:23 PM",
      "commitName": "5814f50b85a8bf36437e46a420e514a53c7d4837",
      "commitAuthor": "Phil Steitz",
      "commitDateOld": "9/7/03, 7:32 AM",
      "commitNameOld": "5c89ea5c8f8a5110b575f0b8dd511b6aecd19359",
      "commitAuthorOld": "Phil Steitz",
      "daysBetweenCommits": 5.54,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {\n    if (out \u003d\u003d null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (str \u003d\u003d null) {\n        return;\n    }\n    int sz;\n    sz \u003d str.length();\n    for (int i \u003d 0; i \u003c sz; i++) {\n        char ch \u003d str.charAt(i);\n        if (ch \u003e 0xfff) {\n            out.write(\"\\\\u\" + hex(ch));\n        } else if (ch \u003e 0xff) {\n            out.write(\"\\\\u0\" + hex(ch));\n        } else if (ch \u003e 0x7f) {\n            out.write(\"\\\\u00\" + hex(ch));\n        } else if (ch \u003c 32) {\n            switch(ch) {\n                case \u0027\\b\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027b\u0027);\n                    break;\n                case \u0027\\n\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027n\u0027);\n                    break;\n                case \u0027\\t\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027t\u0027);\n                    break;\n                case \u0027\\f\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027f\u0027);\n                    break;\n                case \u0027\\r\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027r\u0027);\n                    break;\n                default:\n                    if (ch \u003e 0xf) {\n                        out.write(\"\\\\u00\" + hex(ch));\n                    } else {\n                        out.write(\"\\\\u000\" + hex(ch));\n                    }\n                    break;\n            }\n        } else {\n            switch(ch) {\n                case \u0027\\\u0027\u0027:\n                    if (escapeSingleQuote) {\n                        out.write(\u0027\\\\\u0027);\n                    }\n                    out.write(\u0027\\\u0027\u0027);\n                    break;\n                case \u0027\"\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027\"\u0027);\n                    break;\n                case \u0027\\\\\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027\\\\\u0027);\n                    break;\n                default:\n                    out.write(ch);\n                    break;\n            }\n        }\n    }\n}",
      "path": "src/java/org/apache/commons/lang/StringEscapeUtils.java",
      "functionStartLine": 193,
      "functionName": "escapeJavaStyleString",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,69 +1,70 @@\n private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {\n     if (out \u003d\u003d null) {\n         throw new IllegalArgumentException(\"The Writer must not be null\");\n     }\n     if (str \u003d\u003d null) {\n         return;\n     }\n     int sz;\n     sz \u003d str.length();\n     for (int i \u003d 0; i \u003c sz; i++) {\n         char ch \u003d str.charAt(i);\n         if (ch \u003e 0xfff) {\n             out.write(\"\\\\u\" + hex(ch));\n         } else if (ch \u003e 0xff) {\n             out.write(\"\\\\u0\" + hex(ch));\n         } else if (ch \u003e 0x7f) {\n             out.write(\"\\\\u00\" + hex(ch));\n         } else if (ch \u003c 32) {\n             switch(ch) {\n                 case \u0027\\b\u0027:\n                     out.write(\u0027\\\\\u0027);\n                     out.write(\u0027b\u0027);\n                     break;\n                 case \u0027\\n\u0027:\n                     out.write(\u0027\\\\\u0027);\n                     out.write(\u0027n\u0027);\n                     break;\n                 case \u0027\\t\u0027:\n                     out.write(\u0027\\\\\u0027);\n                     out.write(\u0027t\u0027);\n                     break;\n                 case \u0027\\f\u0027:\n                     out.write(\u0027\\\\\u0027);\n                     out.write(\u0027f\u0027);\n                     break;\n                 case \u0027\\r\u0027:\n                     out.write(\u0027\\\\\u0027);\n                     out.write(\u0027r\u0027);\n                     break;\n                 default:\n                     if (ch \u003e 0xf) {\n                         out.write(\"\\\\u00\" + hex(ch));\n                     } else {\n                         out.write(\"\\\\u000\" + hex(ch));\n                     }\n                     break;\n             }\n         } else {\n             switch(ch) {\n                 case \u0027\\\u0027\u0027:\n-                    if (escapeSingleQuote)\n+                    if (escapeSingleQuote) {\n                         out.write(\u0027\\\\\u0027);\n+                    }\n                     out.write(\u0027\\\u0027\u0027);\n                     break;\n                 case \u0027\"\u0027:\n                     out.write(\u0027\\\\\u0027);\n                     out.write(\u0027\"\u0027);\n                     break;\n                 case \u0027\\\\\u0027:\n                     out.write(\u0027\\\\\u0027);\n                     out.write(\u0027\\\\\u0027);\n                     break;\n                 default:\n                     out.write(ch);\n                     break;\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4d9bdc04b603a00c9335f53c34405dd46b2205ce": {
      "type": "Ybodychange",
      "commitMessage": "Unify exception handling re IAE\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137544 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/31/03, 4:45 PM",
      "commitName": "4d9bdc04b603a00c9335f53c34405dd46b2205ce",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "7/28/03, 9:17 AM",
      "commitNameOld": "4a3781fb888da27d9e90f37815829285897b2327",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 3.31,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "actualSource": "private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {\n    if (out \u003d\u003d null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (str \u003d\u003d null) {\n        return;\n    }\n    int sz;\n    sz \u003d str.length();\n    for (int i \u003d 0; i \u003c sz; i++) {\n        char ch \u003d str.charAt(i);\n        if (ch \u003e 0xfff) {\n            out.write(\"\\\\u\" + hex(ch));\n        } else if (ch \u003e 0xff) {\n            out.write(\"\\\\u0\" + hex(ch));\n        } else if (ch \u003e 0x7f) {\n            out.write(\"\\\\u00\" + hex(ch));\n        } else if (ch \u003c 32) {\n            switch(ch) {\n                case \u0027\\b\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027b\u0027);\n                    break;\n                case \u0027\\n\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027n\u0027);\n                    break;\n                case \u0027\\t\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027t\u0027);\n                    break;\n                case \u0027\\f\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027f\u0027);\n                    break;\n                case \u0027\\r\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027r\u0027);\n                    break;\n                default:\n                    if (ch \u003e 0xf) {\n                        out.write(\"\\\\u00\" + hex(ch));\n                    } else {\n                        out.write(\"\\\\u000\" + hex(ch));\n                    }\n                    break;\n            }\n        } else {\n            switch(ch) {\n                case \u0027\\\u0027\u0027:\n                    if (escapeSingleQuote)\n                        out.write(\u0027\\\\\u0027);\n                    out.write(\u0027\\\u0027\u0027);\n                    break;\n                case \u0027\"\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027\"\u0027);\n                    break;\n                case \u0027\\\\\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027\\\\\u0027);\n                    break;\n                default:\n                    out.write(ch);\n                    break;\n            }\n        }\n    }\n}",
      "path": "src/java/org/apache/commons/lang/StringEscapeUtils.java",
      "functionStartLine": 192,
      "functionName": "escapeJavaStyleString",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,69 +1,69 @@\n private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {\n     if (out \u003d\u003d null) {\n-        throw new NullArgumentException(\"Writer\");\n+        throw new IllegalArgumentException(\"The Writer must not be null\");\n     }\n     if (str \u003d\u003d null) {\n         return;\n     }\n     int sz;\n     sz \u003d str.length();\n     for (int i \u003d 0; i \u003c sz; i++) {\n         char ch \u003d str.charAt(i);\n         if (ch \u003e 0xfff) {\n             out.write(\"\\\\u\" + hex(ch));\n         } else if (ch \u003e 0xff) {\n             out.write(\"\\\\u0\" + hex(ch));\n         } else if (ch \u003e 0x7f) {\n             out.write(\"\\\\u00\" + hex(ch));\n         } else if (ch \u003c 32) {\n             switch(ch) {\n                 case \u0027\\b\u0027:\n                     out.write(\u0027\\\\\u0027);\n                     out.write(\u0027b\u0027);\n                     break;\n                 case \u0027\\n\u0027:\n                     out.write(\u0027\\\\\u0027);\n                     out.write(\u0027n\u0027);\n                     break;\n                 case \u0027\\t\u0027:\n                     out.write(\u0027\\\\\u0027);\n                     out.write(\u0027t\u0027);\n                     break;\n                 case \u0027\\f\u0027:\n                     out.write(\u0027\\\\\u0027);\n                     out.write(\u0027f\u0027);\n                     break;\n                 case \u0027\\r\u0027:\n                     out.write(\u0027\\\\\u0027);\n                     out.write(\u0027r\u0027);\n                     break;\n                 default:\n                     if (ch \u003e 0xf) {\n                         out.write(\"\\\\u00\" + hex(ch));\n                     } else {\n                         out.write(\"\\\\u000\" + hex(ch));\n                     }\n                     break;\n             }\n         } else {\n             switch(ch) {\n                 case \u0027\\\u0027\u0027:\n                     if (escapeSingleQuote)\n                         out.write(\u0027\\\\\u0027);\n                     out.write(\u0027\\\u0027\u0027);\n                     break;\n                 case \u0027\"\u0027:\n                     out.write(\u0027\\\\\u0027);\n                     out.write(\u0027\"\u0027);\n                     break;\n                 case \u0027\\\\\u0027:\n                     out.write(\u0027\\\\\u0027);\n                     out.write(\u0027\\\\\u0027);\n                     break;\n                 default:\n                     out.write(ch);\n                     break;\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "97dfb3a031f9f5ec3e8d0ec49f0cc2c322f70ffc": {
      "type": "Ybodychange",
      "commitMessage": "Update null behaviour for consistency and clarity\nDoument null behaviour\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137458 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/19/03, 1:22 PM",
      "commitName": "97dfb3a031f9f5ec3e8d0ec49f0cc2c322f70ffc",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "7/7/03, 10:59 PM",
      "commitNameOld": "043babf502ddf5a8fa731cb6b3a56814c14952a1",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 11.6,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "actualSource": "private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {\n    if (out \u003d\u003d null) {\n        throw new NullArgumentException(\"Writer\");\n    }\n    if (str \u003d\u003d null) {\n        return;\n    }\n    int sz;\n    sz \u003d str.length();\n    for (int i \u003d 0; i \u003c sz; i++) {\n        char ch \u003d str.charAt(i);\n        if (ch \u003e 0xfff) {\n            out.write(\"\\\\u\" + hex(ch));\n        } else if (ch \u003e 0xff) {\n            out.write(\"\\\\u0\" + hex(ch));\n        } else if (ch \u003e 0x7f) {\n            out.write(\"\\\\u00\" + hex(ch));\n        } else if (ch \u003c 32) {\n            switch(ch) {\n                case \u0027\\b\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027b\u0027);\n                    break;\n                case \u0027\\n\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027n\u0027);\n                    break;\n                case \u0027\\t\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027t\u0027);\n                    break;\n                case \u0027\\f\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027f\u0027);\n                    break;\n                case \u0027\\r\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027r\u0027);\n                    break;\n                default:\n                    if (ch \u003e 0xf) {\n                        out.write(\"\\\\u00\" + hex(ch));\n                    } else {\n                        out.write(\"\\\\u000\" + hex(ch));\n                    }\n                    break;\n            }\n        } else {\n            switch(ch) {\n                case \u0027\\\u0027\u0027:\n                    if (escapeSingleQuote)\n                        out.write(\u0027\\\\\u0027);\n                    out.write(\u0027\\\u0027\u0027);\n                    break;\n                case \u0027\"\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027\"\u0027);\n                    break;\n                case \u0027\\\\\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027\\\\\u0027);\n                    break;\n                default:\n                    out.write(ch);\n                    break;\n            }\n        }\n    }\n}",
      "path": "src/java/org/apache/commons/lang/StringEscapeUtils.java",
      "functionStartLine": 194,
      "functionName": "escapeJavaStyleString",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,63 +1,69 @@\n private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {\n+    if (out \u003d\u003d null) {\n+        throw new NullArgumentException(\"Writer\");\n+    }\n+    if (str \u003d\u003d null) {\n+        return;\n+    }\n     int sz;\n     sz \u003d str.length();\n     for (int i \u003d 0; i \u003c sz; i++) {\n         char ch \u003d str.charAt(i);\n         if (ch \u003e 0xfff) {\n             out.write(\"\\\\u\" + hex(ch));\n         } else if (ch \u003e 0xff) {\n             out.write(\"\\\\u0\" + hex(ch));\n         } else if (ch \u003e 0x7f) {\n             out.write(\"\\\\u00\" + hex(ch));\n         } else if (ch \u003c 32) {\n             switch(ch) {\n                 case \u0027\\b\u0027:\n                     out.write(\u0027\\\\\u0027);\n                     out.write(\u0027b\u0027);\n                     break;\n                 case \u0027\\n\u0027:\n                     out.write(\u0027\\\\\u0027);\n                     out.write(\u0027n\u0027);\n                     break;\n                 case \u0027\\t\u0027:\n                     out.write(\u0027\\\\\u0027);\n                     out.write(\u0027t\u0027);\n                     break;\n                 case \u0027\\f\u0027:\n                     out.write(\u0027\\\\\u0027);\n                     out.write(\u0027f\u0027);\n                     break;\n                 case \u0027\\r\u0027:\n                     out.write(\u0027\\\\\u0027);\n                     out.write(\u0027r\u0027);\n                     break;\n                 default:\n                     if (ch \u003e 0xf) {\n                         out.write(\"\\\\u00\" + hex(ch));\n                     } else {\n                         out.write(\"\\\\u000\" + hex(ch));\n                     }\n                     break;\n             }\n         } else {\n             switch(ch) {\n                 case \u0027\\\u0027\u0027:\n                     if (escapeSingleQuote)\n                         out.write(\u0027\\\\\u0027);\n                     out.write(\u0027\\\u0027\u0027);\n                     break;\n                 case \u0027\"\u0027:\n                     out.write(\u0027\\\\\u0027);\n                     out.write(\u0027\"\u0027);\n                     break;\n                 case \u0027\\\\\u0027:\n                     out.write(\u0027\\\\\u0027);\n                     out.write(\u0027\\\\\u0027);\n                     break;\n                 default:\n                     out.write(ch);\n                     break;\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "fd38d2f21e2fff119cd9404e2b2742ccb1488541": {
      "type": "Ybodychange",
      "commitMessage": "Escaping unicode uses capital letters e.g. \\uABCD\nFound and fixed bug when unicode character is at the end of a string to unescape\nAdded unit tests for above bug to both StringUtilsTest and StringEscapeUtilsTest\nStringUtils.[un]escape now call StringEscapeUtils.[un]escapeJava\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137291 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/9/03, 11:45 AM",
      "commitName": "fd38d2f21e2fff119cd9404e2b2742ccb1488541",
      "commitAuthor": "Alex Chaffee",
      "commitDateOld": "4/8/03, 5:07 PM",
      "commitNameOld": "3fa46d07871f37d6895108db353548c04581dd52",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 0.78,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {\n    int sz;\n    sz \u003d str.length();\n    for (int i \u003d 0; i \u003c sz; i++) {\n        char ch \u003d str.charAt(i);\n        if (ch \u003e 0xfff) {\n            out.write(\"\\\\u\" + hex(ch));\n        } else if (ch \u003e 0xff) {\n            out.write(\"\\\\u0\" + hex(ch));\n        } else if (ch \u003e 0x7f) {\n            out.write(\"\\\\u00\" + hex(ch));\n        } else if (ch \u003c 32) {\n            switch(ch) {\n                case \u0027\\b\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027b\u0027);\n                    break;\n                case \u0027\\n\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027n\u0027);\n                    break;\n                case \u0027\\t\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027t\u0027);\n                    break;\n                case \u0027\\f\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027f\u0027);\n                    break;\n                case \u0027\\r\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027r\u0027);\n                    break;\n                default:\n                    if (ch \u003e 0xf) {\n                        out.write(\"\\\\u00\" + hex(ch));\n                    } else {\n                        out.write(\"\\\\u000\" + hex(ch));\n                    }\n                    break;\n            }\n        } else {\n            switch(ch) {\n                case \u0027\\\u0027\u0027:\n                    if (escapeSingleQuote)\n                        out.write(\u0027\\\\\u0027);\n                    out.write(\u0027\\\u0027\u0027);\n                    break;\n                case \u0027\"\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027\"\u0027);\n                    break;\n                case \u0027\\\\\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027\\\\\u0027);\n                    break;\n                default:\n                    out.write(ch);\n                    break;\n            }\n        }\n    }\n}",
      "path": "src/java/org/apache/commons/lang/StringEscapeUtils.java",
      "functionStartLine": 179,
      "functionName": "escapeJavaStyleString",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,63 +1,63 @@\n private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {\n     int sz;\n     sz \u003d str.length();\n     for (int i \u003d 0; i \u003c sz; i++) {\n         char ch \u003d str.charAt(i);\n         if (ch \u003e 0xfff) {\n-            out.write(\"\\\\u\" + Integer.toHexString(ch));\n+            out.write(\"\\\\u\" + hex(ch));\n         } else if (ch \u003e 0xff) {\n-            out.write(\"\\\\u0\" + Integer.toHexString(ch));\n+            out.write(\"\\\\u0\" + hex(ch));\n         } else if (ch \u003e 0x7f) {\n-            out.write(\"\\\\u00\" + Integer.toHexString(ch));\n+            out.write(\"\\\\u00\" + hex(ch));\n         } else if (ch \u003c 32) {\n             switch(ch) {\n                 case \u0027\\b\u0027:\n                     out.write(\u0027\\\\\u0027);\n                     out.write(\u0027b\u0027);\n                     break;\n                 case \u0027\\n\u0027:\n                     out.write(\u0027\\\\\u0027);\n                     out.write(\u0027n\u0027);\n                     break;\n                 case \u0027\\t\u0027:\n                     out.write(\u0027\\\\\u0027);\n                     out.write(\u0027t\u0027);\n                     break;\n                 case \u0027\\f\u0027:\n                     out.write(\u0027\\\\\u0027);\n                     out.write(\u0027f\u0027);\n                     break;\n                 case \u0027\\r\u0027:\n                     out.write(\u0027\\\\\u0027);\n                     out.write(\u0027r\u0027);\n                     break;\n                 default:\n                     if (ch \u003e 0xf) {\n-                        out.write(\"\\\\u00\" + Integer.toHexString(ch));\n+                        out.write(\"\\\\u00\" + hex(ch));\n                     } else {\n-                        out.write(\"\\\\u000\" + Integer.toHexString(ch));\n+                        out.write(\"\\\\u000\" + hex(ch));\n                     }\n                     break;\n             }\n         } else {\n             switch(ch) {\n                 case \u0027\\\u0027\u0027:\n                     if (escapeSingleQuote)\n                         out.write(\u0027\\\\\u0027);\n                     out.write(\u0027\\\u0027\u0027);\n                     break;\n                 case \u0027\"\u0027:\n                     out.write(\u0027\\\\\u0027);\n                     out.write(\u0027\"\u0027);\n                     break;\n                 case \u0027\\\\\u0027:\n                     out.write(\u0027\\\\\u0027);\n                     out.write(\u0027\\\\\u0027);\n                     break;\n                 default:\n                     out.write(ch);\n                     break;\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7eba6afba9a9e1c934985a494725f9470d34c9ec": {
      "type": "Yformatchange",
      "commitMessage": "added some more entities from HTML 4.0 spec, refactored (Entities class), initialize maps on demand\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137280 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/1/03, 10:14 PM",
      "commitName": "7eba6afba9a9e1c934985a494725f9470d34c9ec",
      "commitAuthor": "Alex Chaffee",
      "commitDateOld": "4/1/03, 9:19 AM",
      "commitNameOld": "cb483b43365bb816ba789f4da8d61ead0acc1e2f",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 0.54,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {\n    int sz;\n    sz \u003d str.length();\n    for (int i \u003d 0; i \u003c sz; i++) {\n        char ch \u003d str.charAt(i);\n        if (ch \u003e 0xfff) {\n            out.write(\"\\\\u\" + Integer.toHexString(ch));\n        } else if (ch \u003e 0xff) {\n            out.write(\"\\\\u0\" + Integer.toHexString(ch));\n        } else if (ch \u003e 0x7f) {\n            out.write(\"\\\\u00\" + Integer.toHexString(ch));\n        } else if (ch \u003c 32) {\n            switch(ch) {\n                case \u0027\\b\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027b\u0027);\n                    break;\n                case \u0027\\n\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027n\u0027);\n                    break;\n                case \u0027\\t\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027t\u0027);\n                    break;\n                case \u0027\\f\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027f\u0027);\n                    break;\n                case \u0027\\r\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027r\u0027);\n                    break;\n                default:\n                    if (ch \u003e 0xf) {\n                        out.write(\"\\\\u00\" + Integer.toHexString(ch));\n                    } else {\n                        out.write(\"\\\\u000\" + Integer.toHexString(ch));\n                    }\n                    break;\n            }\n        } else {\n            switch(ch) {\n                case \u0027\\\u0027\u0027:\n                    if (escapeSingleQuote)\n                        out.write(\u0027\\\\\u0027);\n                    out.write(\u0027\\\u0027\u0027);\n                    break;\n                case \u0027\"\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027\"\u0027);\n                    break;\n                case \u0027\\\\\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027\\\\\u0027);\n                    break;\n                default:\n                    out.write(ch);\n                    break;\n            }\n        }\n    }\n}",
      "path": "src/java/org/apache/commons/lang/StringEscapeUtils.java",
      "functionStartLine": 179,
      "functionName": "escapeJavaStyleString",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "f03e83e74e8a723fd8c8fffc84cc7faaf9494ab4": {
      "type": "Yintroduced",
      "commitMessage": "StringEscapeUtils: escape/unescape Java/JavaScript/HTML\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137278 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/30/03, 7:53 PM",
      "commitName": "f03e83e74e8a723fd8c8fffc84cc7faaf9494ab4",
      "commitAuthor": "Alex Chaffee",
      "diff": "@@ -0,0 +1,63 @@\n+private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {\n+    int sz;\n+    sz \u003d str.length();\n+    for (int i \u003d 0; i \u003c sz; i++) {\n+        char ch \u003d str.charAt(i);\n+        if (ch \u003e 0xfff) {\n+            out.write(\"\\\\u\" + Integer.toHexString(ch));\n+        } else if (ch \u003e 0xff) {\n+            out.write(\"\\\\u0\" + Integer.toHexString(ch));\n+        } else if (ch \u003e 0x7f) {\n+            out.write(\"\\\\u00\" + Integer.toHexString(ch));\n+        } else if (ch \u003c 32) {\n+            switch(ch) {\n+                case \u0027\\b\u0027:\n+                    out.write(\u0027\\\\\u0027);\n+                    out.write(\u0027b\u0027);\n+                    break;\n+                case \u0027\\n\u0027:\n+                    out.write(\u0027\\\\\u0027);\n+                    out.write(\u0027n\u0027);\n+                    break;\n+                case \u0027\\t\u0027:\n+                    out.write(\u0027\\\\\u0027);\n+                    out.write(\u0027t\u0027);\n+                    break;\n+                case \u0027\\f\u0027:\n+                    out.write(\u0027\\\\\u0027);\n+                    out.write(\u0027f\u0027);\n+                    break;\n+                case \u0027\\r\u0027:\n+                    out.write(\u0027\\\\\u0027);\n+                    out.write(\u0027r\u0027);\n+                    break;\n+                default:\n+                    if (ch \u003e 0xf) {\n+                        out.write(\"\\\\u00\" + Integer.toHexString(ch));\n+                    } else {\n+                        out.write(\"\\\\u000\" + Integer.toHexString(ch));\n+                    }\n+                    break;\n+            }\n+        } else {\n+            switch(ch) {\n+                case \u0027\\\u0027\u0027:\n+                    if (escapeSingleQuote)\n+                        out.write(\u0027\\\\\u0027);\n+                    out.write(\u0027\\\u0027\u0027);\n+                    break;\n+                case \u0027\"\u0027:\n+                    out.write(\u0027\\\\\u0027);\n+                    out.write(\u0027\"\u0027);\n+                    break;\n+                case \u0027\\\\\u0027:\n+                    out.write(\u0027\\\\\u0027);\n+                    out.write(\u0027\\\\\u0027);\n+                    break;\n+                default:\n+                    out.write(ch);\n+                    break;\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {\n    int sz;\n    sz \u003d str.length();\n    for (int i \u003d 0; i \u003c sz; i++) {\n        char ch \u003d str.charAt(i);\n        if (ch \u003e 0xfff) {\n            out.write(\"\\\\u\" + Integer.toHexString(ch));\n        } else if (ch \u003e 0xff) {\n            out.write(\"\\\\u0\" + Integer.toHexString(ch));\n        } else if (ch \u003e 0x7f) {\n            out.write(\"\\\\u00\" + Integer.toHexString(ch));\n        } else if (ch \u003c 32) {\n            switch(ch) {\n                case \u0027\\b\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027b\u0027);\n                    break;\n                case \u0027\\n\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027n\u0027);\n                    break;\n                case \u0027\\t\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027t\u0027);\n                    break;\n                case \u0027\\f\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027f\u0027);\n                    break;\n                case \u0027\\r\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027r\u0027);\n                    break;\n                default:\n                    if (ch \u003e 0xf) {\n                        out.write(\"\\\\u00\" + Integer.toHexString(ch));\n                    } else {\n                        out.write(\"\\\\u000\" + Integer.toHexString(ch));\n                    }\n                    break;\n            }\n        } else {\n            switch(ch) {\n                case \u0027\\\u0027\u0027:\n                    if (escapeSingleQuote)\n                        out.write(\u0027\\\\\u0027);\n                    out.write(\u0027\\\u0027\u0027);\n                    break;\n                case \u0027\"\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027\"\u0027);\n                    break;\n                case \u0027\\\\\u0027:\n                    out.write(\u0027\\\\\u0027);\n                    out.write(\u0027\\\\\u0027);\n                    break;\n                default:\n                    out.write(ch);\n                    break;\n            }\n        }\n    }\n}",
      "path": "src/java/org/apache/commons/lang/StringEscapeUtils.java",
      "functionStartLine": 183,
      "functionName": "escapeJavaStyleString",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}