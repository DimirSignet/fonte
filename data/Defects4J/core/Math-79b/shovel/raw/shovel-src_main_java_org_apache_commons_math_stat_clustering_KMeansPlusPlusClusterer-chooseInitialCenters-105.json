{
  "origin": "codeshovel",
  "repositoryName": "Math-79b",
  "repositoryPath": "/tmp/Math-79b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "KMeansPlusPlusClusterer.java",
  "functionName": "chooseInitialCenters",
  "functionId": "chooseInitialCenters___points-Collection__T__(modifiers-final)__k-int(modifiers-final)__random-Random(modifiers-final)",
  "sourceFilePath": "src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java",
  "functionAnnotation": "",
  "functionDoc": "Use K-means++ to choose the initial centers.\n\n@param \u003cT\u003e type of the points to cluster\n@param points the points to choose the initial centers from\n@param k the number of centers to choose\n@param random random generator to use\n@return the initial centers\n",
  "functionStartLine": 105,
  "functionEndLine": 141,
  "numCommitsSeen": 4,
  "timeTaken": 507,
  "changeHistory": [
    "26dac5a0e7fc9c6be9571b3e71a15d8502480d96",
    "d6a438e931412713e99624cf9ed74470f1040184",
    "8de9de7243b6b4cdb35a056d3243124165e16dd6",
    "189717fd10f468e2d0a40bc94369fca5b3d1ec41"
  ],
  "changeHistoryShort": {
    "26dac5a0e7fc9c6be9571b3e71a15d8502480d96": "Yformatchange",
    "d6a438e931412713e99624cf9ed74470f1040184": "Yfilerename",
    "8de9de7243b6b4cdb35a056d3243124165e16dd6": "Ydocchange",
    "189717fd10f468e2d0a40bc94369fca5b3d1ec41": "Yintroduced"
  },
  "changeHistoryDetails": {
    "26dac5a0e7fc9c6be9571b3e71a15d8502480d96": {
      "type": "Yformatchange",
      "commitMessage": "Removed trailing spaces.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@811685 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/5/09, 10:36 AM",
      "commitName": "26dac5a0e7fc9c6be9571b3e71a15d8502480d96",
      "commitAuthor": "Phil Steitz",
      "commitDateOld": "8/1/09, 7:30 AM",
      "commitNameOld": "d6a438e931412713e99624cf9ed74470f1040184",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 35.13,
      "commitsBetweenForRepo": 44,
      "commitsBetweenForFile": 1,
      "actualSource": "private static \u003cT extends Clusterable\u003cT\u003e\u003e List\u003cCluster\u003cT\u003e\u003e chooseInitialCenters(final Collection\u003cT\u003e points, final int k, final Random random) {\n    final List\u003cT\u003e pointSet \u003d new ArrayList\u003cT\u003e(points);\n    final List\u003cCluster\u003cT\u003e\u003e resultSet \u003d new ArrayList\u003cCluster\u003cT\u003e\u003e();\n    final T firstPoint \u003d pointSet.remove(random.nextInt(pointSet.size()));\n    resultSet.add(new Cluster\u003cT\u003e(firstPoint));\n    final double[] dx2 \u003d new double[pointSet.size()];\n    while (resultSet.size() \u003c k) {\n        int sum \u003d 0;\n        for (int i \u003d 0; i \u003c pointSet.size(); i++) {\n            final T p \u003d pointSet.get(i);\n            final Cluster\u003cT\u003e nearest \u003d getNearestCluster(resultSet, p);\n            final double d \u003d p.distanceFrom(nearest.getCenter());\n            sum +\u003d d * d;\n            dx2[i] \u003d sum;\n        }\n        final double r \u003d random.nextDouble() * sum;\n        for (int i \u003d 0; i \u003c dx2.length; i++) {\n            if (dx2[i] \u003e\u003d r) {\n                final T p \u003d pointSet.remove(i);\n                resultSet.add(new Cluster\u003cT\u003e(p));\n                break;\n            }\n        }\n    }\n    return resultSet;\n}",
      "path": "src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java",
      "functionStartLine": 105,
      "functionName": "chooseInitialCenters",
      "functionAnnotation": "",
      "functionDoc": "Use K-means++ to choose the initial centers.\n\n@param \u003cT\u003e type of the points to cluster\n@param points the points to choose the initial centers from\n@param k the number of centers to choose\n@param random random generator to use\n@return the initial centers\n",
      "diff": "",
      "extendedDetails": {}
    },
    "d6a438e931412713e99624cf9ed74470f1040184": {
      "type": "Yfilerename",
      "commitMessage": "moved main java directory for compliance with maven standard directory layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@799870 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/1/09, 7:30 AM",
      "commitName": "d6a438e931412713e99624cf9ed74470f1040184",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "8/1/09, 7:23 AM",
      "commitNameOld": "2ad5ef61630be627f46ae1c266cf796f044bd4a8",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private static \u003cT extends Clusterable\u003cT\u003e\u003e List\u003cCluster\u003cT\u003e\u003e chooseInitialCenters(final Collection\u003cT\u003e points, final int k, final Random random) {\n    final List\u003cT\u003e pointSet \u003d new ArrayList\u003cT\u003e(points);\n    final List\u003cCluster\u003cT\u003e\u003e resultSet \u003d new ArrayList\u003cCluster\u003cT\u003e\u003e();\n    final T firstPoint \u003d pointSet.remove(random.nextInt(pointSet.size()));\n    resultSet.add(new Cluster\u003cT\u003e(firstPoint));\n    final double[] dx2 \u003d new double[pointSet.size()];\n    while (resultSet.size() \u003c k) {\n        int sum \u003d 0;\n        for (int i \u003d 0; i \u003c pointSet.size(); i++) {\n            final T p \u003d pointSet.get(i);\n            final Cluster\u003cT\u003e nearest \u003d getNearestCluster(resultSet, p);\n            final double d \u003d p.distanceFrom(nearest.getCenter());\n            sum +\u003d d * d;\n            dx2[i] \u003d sum;\n        }\n        final double r \u003d random.nextDouble() * sum;\n        for (int i \u003d 0; i \u003c dx2.length; i++) {\n            if (dx2[i] \u003e\u003d r) {\n                final T p \u003d pointSet.remove(i);\n                resultSet.add(new Cluster\u003cT\u003e(p));\n                break;\n            }\n        }\n    }\n    return resultSet;\n}",
      "path": "src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java",
      "functionStartLine": 105,
      "functionName": "chooseInitialCenters",
      "functionAnnotation": "",
      "functionDoc": "Use K-means++ to choose the initial centers.\n\n@param \u003cT\u003e type of the points to cluster\n@param points the points to choose the initial centers from\n@param k the number of centers to choose\n@param random random generator to use\n@return the initial centers\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java",
        "newPath": "src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java"
      }
    },
    "8de9de7243b6b4cdb35a056d3243124165e16dd6": {
      "type": "Ydocchange",
      "commitMessage": "fixed various checkstyle and findbugs errors\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@771076 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/3/09, 9:28 AM",
      "commitName": "8de9de7243b6b4cdb35a056d3243124165e16dd6",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "5/2/09, 12:34 PM",
      "commitNameOld": "189717fd10f468e2d0a40bc94369fca5b3d1ec41",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 0.87,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private static \u003cT extends Clusterable\u003cT\u003e\u003e List\u003cCluster\u003cT\u003e\u003e chooseInitialCenters(final Collection\u003cT\u003e points, final int k, final Random random) {\n    final List\u003cT\u003e pointSet \u003d new ArrayList\u003cT\u003e(points);\n    final List\u003cCluster\u003cT\u003e\u003e resultSet \u003d new ArrayList\u003cCluster\u003cT\u003e\u003e();\n    final T firstPoint \u003d pointSet.remove(random.nextInt(pointSet.size()));\n    resultSet.add(new Cluster\u003cT\u003e(firstPoint));\n    final double[] dx2 \u003d new double[pointSet.size()];\n    while (resultSet.size() \u003c k) {\n        int sum \u003d 0;\n        for (int i \u003d 0; i \u003c pointSet.size(); i++) {\n            final T p \u003d pointSet.get(i);\n            final Cluster\u003cT\u003e nearest \u003d getNearestCluster(resultSet, p);\n            final double d \u003d p.distanceFrom(nearest.getCenter());\n            sum +\u003d d * d;\n            dx2[i] \u003d sum;\n        }\n        final double r \u003d random.nextDouble() * sum;\n        for (int i \u003d 0; i \u003c dx2.length; i++) {\n            if (dx2[i] \u003e\u003d r) {\n                final T p \u003d pointSet.remove(i);\n                resultSet.add(new Cluster\u003cT\u003e(p));\n                break;\n            }\n        }\n    }\n    return resultSet;\n}",
      "path": "src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java",
      "functionStartLine": 105,
      "functionName": "chooseInitialCenters",
      "functionAnnotation": "",
      "functionDoc": "Use K-means++ to choose the initial centers.\n\n@param \u003cT\u003e type of the points to cluster\n@param points the points to choose the initial centers from\n@param k the number of centers to choose\n@param random random generator to use\n@return the initial centers\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Use K-means++ to choose the initial centers.\n\n@param points the points to choose the initial centers from\n@param k the number of centers to choose\n@param random random generator to use\n@return the initial centers\n",
        "newValue": "Use K-means++ to choose the initial centers.\n\n@param \u003cT\u003e type of the points to cluster\n@param points the points to choose the initial centers from\n@param k the number of centers to choose\n@param random random generator to use\n@return the initial centers\n"
      }
    },
    "189717fd10f468e2d0a40bc94369fca5b3d1ec41": {
      "type": "Yintroduced",
      "commitMessage": "added a clustering package with an implementation of k-means++\nJIRA: MATH-266\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@770979 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/2/09, 12:34 PM",
      "commitName": "189717fd10f468e2d0a40bc94369fca5b3d1ec41",
      "commitAuthor": "Luc Maisonobe",
      "diff": "@@ -0,0 +1,26 @@\n+private static \u003cT extends Clusterable\u003cT\u003e\u003e List\u003cCluster\u003cT\u003e\u003e chooseInitialCenters(final Collection\u003cT\u003e points, final int k, final Random random) {\n+    final List\u003cT\u003e pointSet \u003d new ArrayList\u003cT\u003e(points);\n+    final List\u003cCluster\u003cT\u003e\u003e resultSet \u003d new ArrayList\u003cCluster\u003cT\u003e\u003e();\n+    final T firstPoint \u003d pointSet.remove(random.nextInt(pointSet.size()));\n+    resultSet.add(new Cluster\u003cT\u003e(firstPoint));\n+    final double[] dx2 \u003d new double[pointSet.size()];\n+    while (resultSet.size() \u003c k) {\n+        int sum \u003d 0;\n+        for (int i \u003d 0; i \u003c pointSet.size(); i++) {\n+            final T p \u003d pointSet.get(i);\n+            final Cluster\u003cT\u003e nearest \u003d getNearestCluster(resultSet, p);\n+            final double d \u003d p.distanceFrom(nearest.getCenter());\n+            sum +\u003d d * d;\n+            dx2[i] \u003d sum;\n+        }\n+        final double r \u003d random.nextDouble() * sum;\n+        for (int i \u003d 0; i \u003c dx2.length; i++) {\n+            if (dx2[i] \u003e\u003d r) {\n+                final T p \u003d pointSet.remove(i);\n+                resultSet.add(new Cluster\u003cT\u003e(p));\n+                break;\n+            }\n+        }\n+    }\n+    return resultSet;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private static \u003cT extends Clusterable\u003cT\u003e\u003e List\u003cCluster\u003cT\u003e\u003e chooseInitialCenters(final Collection\u003cT\u003e points, final int k, final Random random) {\n    final List\u003cT\u003e pointSet \u003d new ArrayList\u003cT\u003e(points);\n    final List\u003cCluster\u003cT\u003e\u003e resultSet \u003d new ArrayList\u003cCluster\u003cT\u003e\u003e();\n    final T firstPoint \u003d pointSet.remove(random.nextInt(pointSet.size()));\n    resultSet.add(new Cluster\u003cT\u003e(firstPoint));\n    final double[] dx2 \u003d new double[pointSet.size()];\n    while (resultSet.size() \u003c k) {\n        int sum \u003d 0;\n        for (int i \u003d 0; i \u003c pointSet.size(); i++) {\n            final T p \u003d pointSet.get(i);\n            final Cluster\u003cT\u003e nearest \u003d getNearestCluster(resultSet, p);\n            final double d \u003d p.distanceFrom(nearest.getCenter());\n            sum +\u003d d * d;\n            dx2[i] \u003d sum;\n        }\n        final double r \u003d random.nextDouble() * sum;\n        for (int i \u003d 0; i \u003c dx2.length; i++) {\n            if (dx2[i] \u003e\u003d r) {\n                final T p \u003d pointSet.remove(i);\n                resultSet.add(new Cluster\u003cT\u003e(p));\n                break;\n            }\n        }\n    }\n    return resultSet;\n}",
      "path": "src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java",
      "functionStartLine": 102,
      "functionName": "chooseInitialCenters",
      "functionAnnotation": "",
      "functionDoc": "Use K-means++ to choose the initial centers.\n\n@param points the points to choose the initial centers from\n@param k the number of centers to choose\n@param random random generator to use\n@return the initial centers\n"
    }
  }
}