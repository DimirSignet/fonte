{
  "origin": "codeshovel",
  "repositoryName": "Closure-33b",
  "repositoryPath": "/tmp/Closure-33b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TypeInference.java",
  "functionName": "traverseObjectLiteral",
  "functionId": "traverseObjectLiteral___n-Node__scope-FlowScope",
  "sourceFilePath": "src/com/google/javascript/jscomp/TypeInference.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 646,
  "functionEndLine": 705,
  "numCommitsSeen": 69,
  "timeTaken": 4833,
  "changeHistory": [
    "c5d7b308ecf260bf6ccf4b20ac256074fc42768f",
    "03ce555bcedcf98d99de1b4f8a6238ba75ee6850",
    "06484feebf8fc124b48eb1c252e57bc4e6f76d6f",
    "70f817ae4f80ac11dd2dfe97babf5896c690fb48",
    "6bbac115c9a7928a7053b2da3a78df9569df8570",
    "1bd8d2f0f4f3edcc11aa441f50223967a98bf85d",
    "34fd5f8275ae69fc772c2283a3c5fd13b93a7c42",
    "55120873537502992211e66a111d7693d611474f",
    "0a40e6661cd197e1cd0d3a3bccaa4c5313df8514",
    "c017fec84fafb3d0b44a27008a7b42180f97f72a",
    "c698f56dd397f1e373d9e1d7d977223d04068301",
    "b7b201a08e330c9638f52f5dfe824e426a34f2c5",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "c5d7b308ecf260bf6ccf4b20ac256074fc42768f": "Ybodychange",
    "03ce555bcedcf98d99de1b4f8a6238ba75ee6850": "Ybodychange",
    "06484feebf8fc124b48eb1c252e57bc4e6f76d6f": "Ybodychange",
    "70f817ae4f80ac11dd2dfe97babf5896c690fb48": "Ybodychange",
    "6bbac115c9a7928a7053b2da3a78df9569df8570": "Ybodychange",
    "1bd8d2f0f4f3edcc11aa441f50223967a98bf85d": "Ybodychange",
    "34fd5f8275ae69fc772c2283a3c5fd13b93a7c42": "Ybodychange",
    "55120873537502992211e66a111d7693d611474f": "Ybodychange",
    "0a40e6661cd197e1cd0d3a3bccaa4c5313df8514": "Ybodychange",
    "c017fec84fafb3d0b44a27008a7b42180f97f72a": "Ybodychange",
    "c698f56dd397f1e373d9e1d7d977223d04068301": "Ybodychange",
    "b7b201a08e330c9638f52f5dfe824e426a34f2c5": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c5d7b308ecf260bf6ccf4b20ac256074fc42768f": {
      "type": "Ybodychange",
      "commitMessage": "\nBetter type inference on object literal properties\n\nR\u003dacleung\nDELTA\u003d99  (70 added, 6 deleted, 23 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3703\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1595 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/14/11, 3:03 PM",
      "commitName": "c5d7b308ecf260bf6ccf4b20ac256074fc42768f",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "11/11/11, 4:42 PM",
      "commitNameOld": "5524adbda991632656059566b69cc2771ba42b7d",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 2.93,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "private FlowScope traverseObjectLiteral(Node n, FlowScope scope) {\n    JSType type \u003d n.getJSType();\n    Preconditions.checkNotNull(type);\n    for (Node name \u003d n.getFirstChild(); name !\u003d null; name \u003d name.getNext()) {\n        scope \u003d traverse(name.getFirstChild(), scope);\n    }\n    ObjectType objectType \u003d ObjectType.cast(type);\n    if (objectType \u003d\u003d null) {\n        return scope;\n    }\n    boolean hasLendsName \u003d n.getJSDocInfo() !\u003d null \u0026\u0026 n.getJSDocInfo().getLendsName() !\u003d null;\n    if (objectType.hasReferenceName() \u0026\u0026 !hasLendsName) {\n        return scope;\n    }\n    String qObjName \u003d NodeUtil.getBestLValueName(NodeUtil.getBestLValue(n));\n    for (Node name \u003d n.getFirstChild(); name !\u003d null; name \u003d name.getNext()) {\n        Node value \u003d name.getFirstChild();\n        String memberName \u003d NodeUtil.getObjectLitKeyName(name);\n        if (memberName !\u003d null) {\n            JSType rawValueType \u003d name.getFirstChild().getJSType();\n            JSType valueType \u003d NodeUtil.getObjectLitKeyTypeFromValueType(name, rawValueType);\n            if (valueType \u003d\u003d null) {\n                valueType \u003d getNativeType(UNKNOWN_TYPE);\n            }\n            objectType.defineInferredProperty(memberName, valueType, name);\n            if (qObjName !\u003d null \u0026\u0026 name.isString()) {\n                String qKeyName \u003d qObjName + \".\" + memberName;\n                Var var \u003d syntacticScope.getVar(qKeyName);\n                JSType oldType \u003d var \u003d\u003d null ? null : var.getType();\n                if (var !\u003d null \u0026\u0026 var.isTypeInferred()) {\n                    var.setType(oldType \u003d\u003d null ? valueType : oldType.getLeastSupertype(oldType));\n                }\n                scope.inferQualifiedSlot(name, qKeyName, oldType \u003d\u003d null ? getNativeType(UNKNOWN_TYPE) : oldType, valueType);\n            }\n        } else {\n            n.setJSType(getNativeType(UNKNOWN_TYPE));\n        }\n    }\n    return scope;\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 623,
      "functionName": "traverseObjectLiteral",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,30 +1,40 @@\n private FlowScope traverseObjectLiteral(Node n, FlowScope scope) {\n     JSType type \u003d n.getJSType();\n     Preconditions.checkNotNull(type);\n     for (Node name \u003d n.getFirstChild(); name !\u003d null; name \u003d name.getNext()) {\n         scope \u003d traverse(name.getFirstChild(), scope);\n     }\n     ObjectType objectType \u003d ObjectType.cast(type);\n     if (objectType \u003d\u003d null) {\n         return scope;\n     }\n     boolean hasLendsName \u003d n.getJSDocInfo() !\u003d null \u0026\u0026 n.getJSDocInfo().getLendsName() !\u003d null;\n     if (objectType.hasReferenceName() \u0026\u0026 !hasLendsName) {\n         return scope;\n     }\n+    String qObjName \u003d NodeUtil.getBestLValueName(NodeUtil.getBestLValue(n));\n     for (Node name \u003d n.getFirstChild(); name !\u003d null; name \u003d name.getNext()) {\n         Node value \u003d name.getFirstChild();\n         String memberName \u003d NodeUtil.getObjectLitKeyName(name);\n         if (memberName !\u003d null) {\n             JSType rawValueType \u003d name.getFirstChild().getJSType();\n             JSType valueType \u003d NodeUtil.getObjectLitKeyTypeFromValueType(name, rawValueType);\n             if (valueType \u003d\u003d null) {\n                 valueType \u003d getNativeType(UNKNOWN_TYPE);\n             }\n             objectType.defineInferredProperty(memberName, valueType, name);\n+            if (qObjName !\u003d null \u0026\u0026 name.isString()) {\n+                String qKeyName \u003d qObjName + \".\" + memberName;\n+                Var var \u003d syntacticScope.getVar(qKeyName);\n+                JSType oldType \u003d var \u003d\u003d null ? null : var.getType();\n+                if (var !\u003d null \u0026\u0026 var.isTypeInferred()) {\n+                    var.setType(oldType \u003d\u003d null ? valueType : oldType.getLeastSupertype(oldType));\n+                }\n+                scope.inferQualifiedSlot(name, qKeyName, oldType \u003d\u003d null ? getNativeType(UNKNOWN_TYPE) : oldType, valueType);\n+            }\n         } else {\n             n.setJSType(getNativeType(UNKNOWN_TYPE));\n         }\n     }\n     return scope;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "03ce555bcedcf98d99de1b4f8a6238ba75ee6850": {
      "type": "Ybodychange",
      "commitMessage": "\nSimplify the type system a bit by pulling extern info off the nodes\n\nR\u003djohnlenz\nDELTA\u003d171  (4 added, 42 deleted, 125 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2500\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1242 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/1/11, 2:00 PM",
      "commitName": "03ce555bcedcf98d99de1b4f8a6238ba75ee6850",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "5/24/11, 10:37 AM",
      "commitNameOld": "c590fe51732eea3b712c7f894ba3f5a9d23613e1",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 38.14,
      "commitsBetweenForRepo": 108,
      "commitsBetweenForFile": 1,
      "actualSource": "private FlowScope traverseObjectLiteral(Node n, FlowScope scope) {\n    JSType type \u003d n.getJSType();\n    Preconditions.checkNotNull(type);\n    for (Node name \u003d n.getFirstChild(); name !\u003d null; name \u003d name.getNext()) {\n        scope \u003d traverse(name.getFirstChild(), scope);\n    }\n    ObjectType objectType \u003d ObjectType.cast(type);\n    if (objectType \u003d\u003d null) {\n        return scope;\n    }\n    boolean hasLendsName \u003d n.getJSDocInfo() !\u003d null \u0026\u0026 n.getJSDocInfo().getLendsName() !\u003d null;\n    if (objectType.hasReferenceName() \u0026\u0026 !hasLendsName) {\n        return scope;\n    }\n    for (Node name \u003d n.getFirstChild(); name !\u003d null; name \u003d name.getNext()) {\n        Node value \u003d name.getFirstChild();\n        String memberName \u003d NodeUtil.getObjectLitKeyName(name);\n        if (memberName !\u003d null) {\n            JSType rawValueType \u003d name.getFirstChild().getJSType();\n            JSType valueType \u003d NodeUtil.getObjectLitKeyTypeFromValueType(name, rawValueType);\n            if (valueType \u003d\u003d null) {\n                valueType \u003d getNativeType(UNKNOWN_TYPE);\n            }\n            objectType.defineInferredProperty(memberName, valueType, name);\n        } else {\n            n.setJSType(getNativeType(UNKNOWN_TYPE));\n        }\n    }\n    return scope;\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 680,
      "functionName": "traverseObjectLiteral",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,30 +1,30 @@\n private FlowScope traverseObjectLiteral(Node n, FlowScope scope) {\n     JSType type \u003d n.getJSType();\n     Preconditions.checkNotNull(type);\n     for (Node name \u003d n.getFirstChild(); name !\u003d null; name \u003d name.getNext()) {\n         scope \u003d traverse(name.getFirstChild(), scope);\n     }\n     ObjectType objectType \u003d ObjectType.cast(type);\n     if (objectType \u003d\u003d null) {\n         return scope;\n     }\n     boolean hasLendsName \u003d n.getJSDocInfo() !\u003d null \u0026\u0026 n.getJSDocInfo().getLendsName() !\u003d null;\n     if (objectType.hasReferenceName() \u0026\u0026 !hasLendsName) {\n         return scope;\n     }\n     for (Node name \u003d n.getFirstChild(); name !\u003d null; name \u003d name.getNext()) {\n         Node value \u003d name.getFirstChild();\n         String memberName \u003d NodeUtil.getObjectLitKeyName(name);\n         if (memberName !\u003d null) {\n             JSType rawValueType \u003d name.getFirstChild().getJSType();\n             JSType valueType \u003d NodeUtil.getObjectLitKeyTypeFromValueType(name, rawValueType);\n             if (valueType \u003d\u003d null) {\n                 valueType \u003d getNativeType(UNKNOWN_TYPE);\n             }\n-            objectType.defineInferredProperty(memberName, valueType, false, name);\n+            objectType.defineInferredProperty(memberName, valueType, name);\n         } else {\n             n.setJSType(getNativeType(UNKNOWN_TYPE));\n         }\n     }\n     return scope;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "06484feebf8fc124b48eb1c252e57bc4e6f76d6f": {
      "type": "Ybodychange",
      "commitMessage": "\nalways do type inference on the values of an object literal,\neven if we decide to bail out early and leave the literal itself\nalone.\n\nR\u003djohnlenz\nDELTA\u003d30  (28 added, 1 deleted, 1 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d377\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@737 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/28/11, 10:24 AM",
      "commitName": "06484feebf8fc124b48eb1c252e57bc4e6f76d6f",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "1/27/11, 10:33 AM",
      "commitNameOld": "70f817ae4f80ac11dd2dfe97babf5896c690fb48",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 0.99,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "private FlowScope traverseObjectLiteral(Node n, FlowScope scope) {\n    JSType type \u003d n.getJSType();\n    Preconditions.checkNotNull(type);\n    for (Node name \u003d n.getFirstChild(); name !\u003d null; name \u003d name.getNext()) {\n        scope \u003d traverse(name.getFirstChild(), scope);\n    }\n    ObjectType objectType \u003d ObjectType.cast(type);\n    if (objectType \u003d\u003d null) {\n        return scope;\n    }\n    boolean hasLendsName \u003d n.getJSDocInfo() !\u003d null \u0026\u0026 n.getJSDocInfo().getLendsName() !\u003d null;\n    if (objectType.hasReferenceName() \u0026\u0026 !hasLendsName) {\n        return scope;\n    }\n    for (Node name \u003d n.getFirstChild(); name !\u003d null; name \u003d name.getNext()) {\n        Node value \u003d name.getFirstChild();\n        String memberName \u003d NodeUtil.getObjectLitKeyName(name);\n        if (memberName !\u003d null) {\n            JSType rawValueType \u003d name.getFirstChild().getJSType();\n            JSType valueType \u003d NodeUtil.getObjectLitKeyTypeFromValueType(name, rawValueType);\n            if (valueType \u003d\u003d null) {\n                valueType \u003d getNativeType(UNKNOWN_TYPE);\n            }\n            objectType.defineInferredProperty(memberName, valueType, false, name);\n        } else {\n            n.setJSType(getNativeType(UNKNOWN_TYPE));\n        }\n    }\n    return scope;\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 680,
      "functionName": "traverseObjectLiteral",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,28 +1,30 @@\n private FlowScope traverseObjectLiteral(Node n, FlowScope scope) {\n     JSType type \u003d n.getJSType();\n     Preconditions.checkNotNull(type);\n+    for (Node name \u003d n.getFirstChild(); name !\u003d null; name \u003d name.getNext()) {\n+        scope \u003d traverse(name.getFirstChild(), scope);\n+    }\n     ObjectType objectType \u003d ObjectType.cast(type);\n     if (objectType \u003d\u003d null) {\n         return scope;\n     }\n     boolean hasLendsName \u003d n.getJSDocInfo() !\u003d null \u0026\u0026 n.getJSDocInfo().getLendsName() !\u003d null;\n     if (objectType.hasReferenceName() \u0026\u0026 !hasLendsName) {\n         return scope;\n     }\n     for (Node name \u003d n.getFirstChild(); name !\u003d null; name \u003d name.getNext()) {\n         Node value \u003d name.getFirstChild();\n-        scope \u003d traverse(value, scope);\n         String memberName \u003d NodeUtil.getObjectLitKeyName(name);\n         if (memberName !\u003d null) {\n             JSType rawValueType \u003d name.getFirstChild().getJSType();\n             JSType valueType \u003d NodeUtil.getObjectLitKeyTypeFromValueType(name, rawValueType);\n             if (valueType \u003d\u003d null) {\n                 valueType \u003d getNativeType(UNKNOWN_TYPE);\n             }\n             objectType.defineInferredProperty(memberName, valueType, false, name);\n         } else {\n             n.setJSType(getNativeType(UNKNOWN_TYPE));\n         }\n     }\n     return scope;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "70f817ae4f80ac11dd2dfe97babf5896c690fb48": {
      "type": "Ybodychange",
      "commitMessage": "\nAdd basic getters and setters support to TypeInference.\n\nR\u003dnicksantos\nDELTA\u003d573  (533 added, 15 deleted, 25 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d366\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@735 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/27/11, 10:33 AM",
      "commitName": "70f817ae4f80ac11dd2dfe97babf5896c690fb48",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "1/7/11, 9:19 AM",
      "commitNameOld": "6bbac115c9a7928a7053b2da3a78df9569df8570",
      "commitAuthorOld": "bashir@google.com",
      "daysBetweenCommits": 20.05,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "actualSource": "private FlowScope traverseObjectLiteral(Node n, FlowScope scope) {\n    JSType type \u003d n.getJSType();\n    Preconditions.checkNotNull(type);\n    ObjectType objectType \u003d ObjectType.cast(type);\n    if (objectType \u003d\u003d null) {\n        return scope;\n    }\n    boolean hasLendsName \u003d n.getJSDocInfo() !\u003d null \u0026\u0026 n.getJSDocInfo().getLendsName() !\u003d null;\n    if (objectType.hasReferenceName() \u0026\u0026 !hasLendsName) {\n        return scope;\n    }\n    for (Node name \u003d n.getFirstChild(); name !\u003d null; name \u003d name.getNext()) {\n        Node value \u003d name.getFirstChild();\n        scope \u003d traverse(value, scope);\n        String memberName \u003d NodeUtil.getObjectLitKeyName(name);\n        if (memberName !\u003d null) {\n            JSType rawValueType \u003d name.getFirstChild().getJSType();\n            JSType valueType \u003d NodeUtil.getObjectLitKeyTypeFromValueType(name, rawValueType);\n            if (valueType \u003d\u003d null) {\n                valueType \u003d getNativeType(UNKNOWN_TYPE);\n            }\n            objectType.defineInferredProperty(memberName, valueType, false, name);\n        } else {\n            n.setJSType(getNativeType(UNKNOWN_TYPE));\n        }\n    }\n    return scope;\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 680,
      "functionName": "traverseObjectLiteral",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,24 +1,28 @@\n private FlowScope traverseObjectLiteral(Node n, FlowScope scope) {\n     JSType type \u003d n.getJSType();\n     Preconditions.checkNotNull(type);\n     ObjectType objectType \u003d ObjectType.cast(type);\n     if (objectType \u003d\u003d null) {\n         return scope;\n     }\n     boolean hasLendsName \u003d n.getJSDocInfo() !\u003d null \u0026\u0026 n.getJSDocInfo().getLendsName() !\u003d null;\n     if (objectType.hasReferenceName() \u0026\u0026 !hasLendsName) {\n         return scope;\n     }\n     for (Node name \u003d n.getFirstChild(); name !\u003d null; name \u003d name.getNext()) {\n         Node value \u003d name.getFirstChild();\n         scope \u003d traverse(value, scope);\n-        String memberName \u003d NodeUtil.getStringValue(name);\n+        String memberName \u003d NodeUtil.getObjectLitKeyName(name);\n         if (memberName !\u003d null) {\n-            objectType.defineInferredProperty(memberName, getJSType(value), false, name);\n+            JSType rawValueType \u003d name.getFirstChild().getJSType();\n+            JSType valueType \u003d NodeUtil.getObjectLitKeyTypeFromValueType(name, rawValueType);\n+            if (valueType \u003d\u003d null) {\n+                valueType \u003d getNativeType(UNKNOWN_TYPE);\n+            }\n+            objectType.defineInferredProperty(memberName, valueType, false, name);\n         } else {\n             n.setJSType(getNativeType(UNKNOWN_TYPE));\n-            return scope;\n         }\n     }\n     return scope;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6bbac115c9a7928a7053b2da3a78df9569df8570": {
      "type": "Ybodychange",
      "commitMessage": "\nAdding getPropertyNode functionality to ObjectType. This needs\nassociating nodes to properties in defineProperty.\n\nR\u003dnicksantos\nDELTA\u003d307  (127 added, 0 deleted, 180 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d223\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@674 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/7/11, 9:19 AM",
      "commitName": "6bbac115c9a7928a7053b2da3a78df9569df8570",
      "commitAuthor": "bashir@google.com",
      "commitDateOld": "12/15/10, 2:37 PM",
      "commitNameOld": "f1a08e4f38ace8c387085a7e7e2f52adaa9d88ca",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 22.78,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "actualSource": "private FlowScope traverseObjectLiteral(Node n, FlowScope scope) {\n    JSType type \u003d n.getJSType();\n    Preconditions.checkNotNull(type);\n    ObjectType objectType \u003d ObjectType.cast(type);\n    if (objectType \u003d\u003d null) {\n        return scope;\n    }\n    boolean hasLendsName \u003d n.getJSDocInfo() !\u003d null \u0026\u0026 n.getJSDocInfo().getLendsName() !\u003d null;\n    if (objectType.hasReferenceName() \u0026\u0026 !hasLendsName) {\n        return scope;\n    }\n    for (Node name \u003d n.getFirstChild(); name !\u003d null; name \u003d name.getNext()) {\n        Node value \u003d name.getFirstChild();\n        scope \u003d traverse(value, scope);\n        String memberName \u003d NodeUtil.getStringValue(name);\n        if (memberName !\u003d null) {\n            objectType.defineInferredProperty(memberName, getJSType(value), false, name);\n        } else {\n            n.setJSType(getNativeType(UNKNOWN_TYPE));\n            return scope;\n        }\n    }\n    return scope;\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 680,
      "functionName": "traverseObjectLiteral",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,24 +1,24 @@\n private FlowScope traverseObjectLiteral(Node n, FlowScope scope) {\n     JSType type \u003d n.getJSType();\n     Preconditions.checkNotNull(type);\n     ObjectType objectType \u003d ObjectType.cast(type);\n     if (objectType \u003d\u003d null) {\n         return scope;\n     }\n     boolean hasLendsName \u003d n.getJSDocInfo() !\u003d null \u0026\u0026 n.getJSDocInfo().getLendsName() !\u003d null;\n     if (objectType.hasReferenceName() \u0026\u0026 !hasLendsName) {\n         return scope;\n     }\n     for (Node name \u003d n.getFirstChild(); name !\u003d null; name \u003d name.getNext()) {\n         Node value \u003d name.getFirstChild();\n         scope \u003d traverse(value, scope);\n         String memberName \u003d NodeUtil.getStringValue(name);\n         if (memberName !\u003d null) {\n-            objectType.defineInferredProperty(memberName, getJSType(value), false);\n+            objectType.defineInferredProperty(memberName, getJSType(value), false, name);\n         } else {\n             n.setJSType(getNativeType(UNKNOWN_TYPE));\n             return scope;\n         }\n     }\n     return scope;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1bd8d2f0f4f3edcc11aa441f50223967a98bf85d": {
      "type": "Ybodychange",
      "commitMessage": "\ntype-check the @lends annotation\n\nR\u003dacleung\nDELTA\u003d207  (163 added, 42 deleted, 2 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d751020\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@512 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/26/10, 8:07 AM",
      "commitName": "1bd8d2f0f4f3edcc11aa441f50223967a98bf85d",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "10/19/10, 10:47 AM",
      "commitNameOld": "5db16f8f51592b6a6ac97c609fb0c691cc3f201a",
      "commitAuthorOld": "mgoodman@google.com",
      "daysBetweenCommits": 6.89,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "actualSource": "private FlowScope traverseObjectLiteral(Node n, FlowScope scope) {\n    JSType type \u003d n.getJSType();\n    Preconditions.checkNotNull(type);\n    ObjectType objectType \u003d ObjectType.cast(type);\n    if (objectType \u003d\u003d null) {\n        return scope;\n    }\n    boolean hasLendsName \u003d n.getJSDocInfo() !\u003d null \u0026\u0026 n.getJSDocInfo().getLendsName() !\u003d null;\n    if (objectType.hasReferenceName() \u0026\u0026 !hasLendsName) {\n        return scope;\n    }\n    for (Node name \u003d n.getFirstChild(); name !\u003d null; name \u003d name.getNext()) {\n        Node value \u003d name.getFirstChild();\n        scope \u003d traverse(value, scope);\n        String memberName \u003d NodeUtil.getStringValue(name);\n        if (memberName !\u003d null) {\n            objectType.defineInferredProperty(memberName, getJSType(value), false);\n        } else {\n            n.setJSType(getNativeType(UNKNOWN_TYPE));\n            return scope;\n        }\n    }\n    return scope;\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 662,
      "functionName": "traverseObjectLiteral",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,20 +1,24 @@\n private FlowScope traverseObjectLiteral(Node n, FlowScope scope) {\n     JSType type \u003d n.getJSType();\n     Preconditions.checkNotNull(type);\n     ObjectType objectType \u003d ObjectType.cast(type);\n-    if (objectType \u003d\u003d null || objectType.hasReferenceName()) {\n+    if (objectType \u003d\u003d null) {\n+        return scope;\n+    }\n+    boolean hasLendsName \u003d n.getJSDocInfo() !\u003d null \u0026\u0026 n.getJSDocInfo().getLendsName() !\u003d null;\n+    if (objectType.hasReferenceName() \u0026\u0026 !hasLendsName) {\n         return scope;\n     }\n     for (Node name \u003d n.getFirstChild(); name !\u003d null; name \u003d name.getNext()) {\n         Node value \u003d name.getFirstChild();\n         scope \u003d traverse(value, scope);\n         String memberName \u003d NodeUtil.getStringValue(name);\n         if (memberName !\u003d null) {\n             objectType.defineInferredProperty(memberName, getJSType(value), false);\n         } else {\n             n.setJSType(getNativeType(UNKNOWN_TYPE));\n             return scope;\n         }\n     }\n     return scope;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "34fd5f8275ae69fc772c2283a3c5fd13b93a7c42": {
      "type": "Ybodychange",
      "commitMessage": "\nChange the OBJECTLIT AST structure from:\n\nOBJECTLIT\n  KEY1\n  VALUE1\n\nto\n\nOBJECTLIT\n  KEY1\n    VALUE1\n\nFixes issue 241\n\nR\u003dacleung,johnlenz,stevey\nDELTA\u003d268  (101 added, 51 deleted, 116 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d356416\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@494 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/18/10, 2:55 PM",
      "commitName": "34fd5f8275ae69fc772c2283a3c5fd13b93a7c42",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "9/16/10, 8:25 AM",
      "commitNameOld": "55120873537502992211e66a111d7693d611474f",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 32.27,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "actualSource": "private FlowScope traverseObjectLiteral(Node n, FlowScope scope) {\n    JSType type \u003d n.getJSType();\n    Preconditions.checkNotNull(type);\n    ObjectType objectType \u003d ObjectType.cast(type);\n    if (objectType \u003d\u003d null || objectType.hasReferenceName()) {\n        return scope;\n    }\n    for (Node name \u003d n.getFirstChild(); name !\u003d null; name \u003d name.getNext()) {\n        Node value \u003d name.getFirstChild();\n        scope \u003d traverse(value, scope);\n        String memberName \u003d NodeUtil.getStringValue(name);\n        if (memberName !\u003d null) {\n            objectType.defineInferredProperty(memberName, getJSType(value), false);\n        } else {\n            n.setJSType(getNativeType(UNKNOWN_TYPE));\n            return scope;\n        }\n    }\n    return scope;\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 662,
      "functionName": "traverseObjectLiteral",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,21 +1,20 @@\n private FlowScope traverseObjectLiteral(Node n, FlowScope scope) {\n     JSType type \u003d n.getJSType();\n     Preconditions.checkNotNull(type);\n     ObjectType objectType \u003d ObjectType.cast(type);\n     if (objectType \u003d\u003d null || objectType.hasReferenceName()) {\n         return scope;\n     }\n-    for (Node name \u003d n.getFirstChild(); name !\u003d null; name \u003d name.getNext().getNext()) {\n-        Node value \u003d name.getNext();\n-        scope \u003d traverse(name, scope);\n+    for (Node name \u003d n.getFirstChild(); name !\u003d null; name \u003d name.getNext()) {\n+        Node value \u003d name.getFirstChild();\n         scope \u003d traverse(value, scope);\n         String memberName \u003d NodeUtil.getStringValue(name);\n         if (memberName !\u003d null) {\n             objectType.defineInferredProperty(memberName, getJSType(value), false);\n         } else {\n             n.setJSType(getNativeType(UNKNOWN_TYPE));\n             return scope;\n         }\n     }\n     return scope;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "55120873537502992211e66a111d7693d611474f": {
      "type": "Ybodychange",
      "commitMessage": "\nfix a nasty type inference edge case\n\nR\u003dnadaa\nDELTA\u003d27  (22 added, 0 deleted, 5 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d219634\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@434 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/16/10, 8:25 AM",
      "commitName": "55120873537502992211e66a111d7693d611474f",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "9/14/10, 1:26 PM",
      "commitNameOld": "8159a9f30a503650d754b7e8b30d491c4e415a72",
      "commitAuthorOld": "mgoodman@google.com",
      "daysBetweenCommits": 1.79,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "private FlowScope traverseObjectLiteral(Node n, FlowScope scope) {\n    JSType type \u003d n.getJSType();\n    Preconditions.checkNotNull(type);\n    ObjectType objectType \u003d ObjectType.cast(type);\n    if (objectType \u003d\u003d null || objectType.hasReferenceName()) {\n        return scope;\n    }\n    for (Node name \u003d n.getFirstChild(); name !\u003d null; name \u003d name.getNext().getNext()) {\n        Node value \u003d name.getNext();\n        scope \u003d traverse(name, scope);\n        scope \u003d traverse(value, scope);\n        String memberName \u003d NodeUtil.getStringValue(name);\n        if (memberName !\u003d null) {\n            objectType.defineInferredProperty(memberName, getJSType(value), false);\n        } else {\n            n.setJSType(getNativeType(UNKNOWN_TYPE));\n            return scope;\n        }\n    }\n    return scope;\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 662,
      "functionName": "traverseObjectLiteral",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,20 +1,21 @@\n private FlowScope traverseObjectLiteral(Node n, FlowScope scope) {\n-    ObjectType objectType \u003d (ObjectType) n.getJSType();\n-    Preconditions.checkNotNull(objectType);\n-    if (objectType.hasReferenceName()) {\n+    JSType type \u003d n.getJSType();\n+    Preconditions.checkNotNull(type);\n+    ObjectType objectType \u003d ObjectType.cast(type);\n+    if (objectType \u003d\u003d null || objectType.hasReferenceName()) {\n         return scope;\n     }\n     for (Node name \u003d n.getFirstChild(); name !\u003d null; name \u003d name.getNext().getNext()) {\n         Node value \u003d name.getNext();\n         scope \u003d traverse(name, scope);\n         scope \u003d traverse(value, scope);\n         String memberName \u003d NodeUtil.getStringValue(name);\n         if (memberName !\u003d null) {\n             objectType.defineInferredProperty(memberName, getJSType(value), false);\n         } else {\n             n.setJSType(getNativeType(UNKNOWN_TYPE));\n             return scope;\n         }\n     }\n     return scope;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0a40e6661cd197e1cd0d3a3bccaa4c5313df8514": {
      "type": "Ybodychange",
      "commitMessage": "\nfix a weird integration issue.\nsome processes run the\nprovide/require processor after scope creation.  That means\nthat TypedScopeCreator can\u0027t assign types to the\nnew namespaces.  Normal closure compiler is moving towards a model\nwhere TypedScopeCreator declares namespaces in the global\nscope.\nIt\u0027s not clear how we should resolve this inconsistency, but\nfor now this shim will make things better.\n\nR\u003dmoedinger\nDELTA\u003d25  (15 added, 5 deleted, 5 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d214752\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@419 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/13/10, 7:29 AM",
      "commitName": "0a40e6661cd197e1cd0d3a3bccaa4c5313df8514",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "9/11/10, 6:01 AM",
      "commitNameOld": "c017fec84fafb3d0b44a27008a7b42180f97f72a",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 2.06,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private FlowScope traverseObjectLiteral(Node n, FlowScope scope) {\n    ObjectType objectType \u003d (ObjectType) n.getJSType();\n    Preconditions.checkNotNull(objectType);\n    if (objectType.hasReferenceName()) {\n        return scope;\n    }\n    for (Node name \u003d n.getFirstChild(); name !\u003d null; name \u003d name.getNext().getNext()) {\n        Node value \u003d name.getNext();\n        scope \u003d traverse(name, scope);\n        scope \u003d traverse(value, scope);\n        String memberName \u003d NodeUtil.getStringValue(name);\n        if (memberName !\u003d null) {\n            objectType.defineInferredProperty(memberName, getJSType(value), false);\n        } else {\n            n.setJSType(getNativeType(UNKNOWN_TYPE));\n            return scope;\n        }\n    }\n    return scope;\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 658,
      "functionName": "traverseObjectLiteral",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,22 +1,20 @@\n private FlowScope traverseObjectLiteral(Node n, FlowScope scope) {\n     ObjectType objectType \u003d (ObjectType) n.getJSType();\n-    if (objectType \u003d\u003d null) {\n-        return scope;\n-    }\n+    Preconditions.checkNotNull(objectType);\n     if (objectType.hasReferenceName()) {\n         return scope;\n     }\n     for (Node name \u003d n.getFirstChild(); name !\u003d null; name \u003d name.getNext().getNext()) {\n         Node value \u003d name.getNext();\n         scope \u003d traverse(name, scope);\n         scope \u003d traverse(value, scope);\n         String memberName \u003d NodeUtil.getStringValue(name);\n         if (memberName !\u003d null) {\n             objectType.defineInferredProperty(memberName, getJSType(value), false);\n         } else {\n             n.setJSType(getNativeType(UNKNOWN_TYPE));\n             return scope;\n         }\n     }\n     return scope;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c017fec84fafb3d0b44a27008a7b42180f97f72a": {
      "type": "Ybodychange",
      "commitMessage": "\nquick shim\n\nDELTA\u003d6  (6 added, 0 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d215352\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@418 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/11/10, 6:01 AM",
      "commitName": "c017fec84fafb3d0b44a27008a7b42180f97f72a",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "9/10/10, 9:53 PM",
      "commitNameOld": "c698f56dd397f1e373d9e1d7d977223d04068301",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private FlowScope traverseObjectLiteral(Node n, FlowScope scope) {\n    ObjectType objectType \u003d (ObjectType) n.getJSType();\n    if (objectType \u003d\u003d null) {\n        return scope;\n    }\n    if (objectType.hasReferenceName()) {\n        return scope;\n    }\n    for (Node name \u003d n.getFirstChild(); name !\u003d null; name \u003d name.getNext().getNext()) {\n        Node value \u003d name.getNext();\n        scope \u003d traverse(name, scope);\n        scope \u003d traverse(value, scope);\n        String memberName \u003d NodeUtil.getStringValue(name);\n        if (memberName !\u003d null) {\n            objectType.defineInferredProperty(memberName, getJSType(value), false);\n        } else {\n            n.setJSType(getNativeType(UNKNOWN_TYPE));\n            return scope;\n        }\n    }\n    return scope;\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 658,
      "functionName": "traverseObjectLiteral",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,19 +1,22 @@\n private FlowScope traverseObjectLiteral(Node n, FlowScope scope) {\n     ObjectType objectType \u003d (ObjectType) n.getJSType();\n+    if (objectType \u003d\u003d null) {\n+        return scope;\n+    }\n     if (objectType.hasReferenceName()) {\n         return scope;\n     }\n     for (Node name \u003d n.getFirstChild(); name !\u003d null; name \u003d name.getNext().getNext()) {\n         Node value \u003d name.getNext();\n         scope \u003d traverse(name, scope);\n         scope \u003d traverse(value, scope);\n         String memberName \u003d NodeUtil.getStringValue(name);\n         if (memberName !\u003d null) {\n             objectType.defineInferredProperty(memberName, getJSType(value), false);\n         } else {\n             n.setJSType(getNativeType(UNKNOWN_TYPE));\n             return scope;\n         }\n     }\n     return scope;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c698f56dd397f1e373d9e1d7d977223d04068301": {
      "type": "Ybodychange",
      "commitMessage": "\nadd some more special handling for goog.object.reflect.\n\nR\u003djohnlenz\nDELTA\u003d14  (10 added, 0 deleted, 4 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d214393\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@417 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/10/10, 9:53 PM",
      "commitName": "c698f56dd397f1e373d9e1d7d977223d04068301",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "9/8/10, 12:26 PM",
      "commitNameOld": "b7b201a08e330c9638f52f5dfe824e426a34f2c5",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 2.39,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "private FlowScope traverseObjectLiteral(Node n, FlowScope scope) {\n    ObjectType objectType \u003d (ObjectType) n.getJSType();\n    if (objectType.hasReferenceName()) {\n        return scope;\n    }\n    for (Node name \u003d n.getFirstChild(); name !\u003d null; name \u003d name.getNext().getNext()) {\n        Node value \u003d name.getNext();\n        scope \u003d traverse(name, scope);\n        scope \u003d traverse(value, scope);\n        String memberName \u003d NodeUtil.getStringValue(name);\n        if (memberName !\u003d null) {\n            objectType.defineInferredProperty(memberName, getJSType(value), false);\n        } else {\n            n.setJSType(getNativeType(UNKNOWN_TYPE));\n            return scope;\n        }\n    }\n    return scope;\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 658,
      "functionName": "traverseObjectLiteral",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,16 +1,19 @@\n private FlowScope traverseObjectLiteral(Node n, FlowScope scope) {\n     ObjectType objectType \u003d (ObjectType) n.getJSType();\n+    if (objectType.hasReferenceName()) {\n+        return scope;\n+    }\n     for (Node name \u003d n.getFirstChild(); name !\u003d null; name \u003d name.getNext().getNext()) {\n         Node value \u003d name.getNext();\n         scope \u003d traverse(name, scope);\n         scope \u003d traverse(value, scope);\n         String memberName \u003d NodeUtil.getStringValue(name);\n         if (memberName !\u003d null) {\n             objectType.defineInferredProperty(memberName, getJSType(value), false);\n         } else {\n             n.setJSType(getNativeType(UNKNOWN_TYPE));\n             return scope;\n         }\n     }\n     return scope;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b7b201a08e330c9638f52f5dfe824e426a34f2c5": {
      "type": "Ybodychange",
      "commitMessage": "\nAttach types to literals at scope-creation time instead of at\ninference time.\nScope-creation already attaches types to function literals at\nscope-creation type, so this makes the other literals more consistent\nwith function literals.\n\nR\u003djohnlenz\nDELTA\u003d167  (102 added, 53 deleted, 12 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d209649\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@411 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/8/10, 12:26 PM",
      "commitName": "b7b201a08e330c9638f52f5dfe824e426a34f2c5",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "8/12/10, 6:02 PM",
      "commitNameOld": "15acafb00636f99295b394145b9b60a5e624ddfa",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 26.77,
      "commitsBetweenForRepo": 52,
      "commitsBetweenForFile": 1,
      "actualSource": "private FlowScope traverseObjectLiteral(Node n, FlowScope scope) {\n    ObjectType objectType \u003d (ObjectType) n.getJSType();\n    for (Node name \u003d n.getFirstChild(); name !\u003d null; name \u003d name.getNext().getNext()) {\n        Node value \u003d name.getNext();\n        scope \u003d traverse(name, scope);\n        scope \u003d traverse(value, scope);\n        String memberName \u003d NodeUtil.getStringValue(name);\n        if (memberName !\u003d null) {\n            objectType.defineInferredProperty(memberName, getJSType(value), false);\n        } else {\n            n.setJSType(getNativeType(UNKNOWN_TYPE));\n            return scope;\n        }\n    }\n    return scope;\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 658,
      "functionName": "traverseObjectLiteral",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,20 +1,16 @@\n private FlowScope traverseObjectLiteral(Node n, FlowScope scope) {\n-    if (n.getJSType() !\u003d null) {\n-        return scope;\n-    }\n-    ObjectType objectType \u003d registry.createAnonymousObjectType();\n+    ObjectType objectType \u003d (ObjectType) n.getJSType();\n     for (Node name \u003d n.getFirstChild(); name !\u003d null; name \u003d name.getNext().getNext()) {\n         Node value \u003d name.getNext();\n         scope \u003d traverse(name, scope);\n         scope \u003d traverse(value, scope);\n         String memberName \u003d NodeUtil.getStringValue(name);\n         if (memberName !\u003d null) {\n             objectType.defineInferredProperty(memberName, getJSType(value), false);\n         } else {\n             n.setJSType(getNativeType(UNKNOWN_TYPE));\n             return scope;\n         }\n     }\n-    n.setJSType(objectType);\n     return scope;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,20 @@\n+private FlowScope traverseObjectLiteral(Node n, FlowScope scope) {\n+    if (n.getJSType() !\u003d null) {\n+        return scope;\n+    }\n+    ObjectType objectType \u003d registry.createAnonymousObjectType();\n+    for (Node name \u003d n.getFirstChild(); name !\u003d null; name \u003d name.getNext().getNext()) {\n+        Node value \u003d name.getNext();\n+        scope \u003d traverse(name, scope);\n+        scope \u003d traverse(value, scope);\n+        String memberName \u003d NodeUtil.getStringValue(name);\n+        if (memberName !\u003d null) {\n+            objectType.defineInferredProperty(memberName, getJSType(value), false);\n+        } else {\n+            n.setJSType(getNativeType(UNKNOWN_TYPE));\n+            return scope;\n+        }\n+    }\n+    n.setJSType(objectType);\n+    return scope;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private FlowScope traverseObjectLiteral(Node n, FlowScope scope) {\n    if (n.getJSType() !\u003d null) {\n        return scope;\n    }\n    ObjectType objectType \u003d registry.createAnonymousObjectType();\n    for (Node name \u003d n.getFirstChild(); name !\u003d null; name \u003d name.getNext().getNext()) {\n        Node value \u003d name.getNext();\n        scope \u003d traverse(name, scope);\n        scope \u003d traverse(value, scope);\n        String memberName \u003d NodeUtil.getStringValue(name);\n        if (memberName !\u003d null) {\n            objectType.defineInferredProperty(memberName, getJSType(value), false);\n        } else {\n            n.setJSType(getNativeType(UNKNOWN_TYPE));\n            return scope;\n        }\n    }\n    n.setJSType(objectType);\n    return scope;\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 614,
      "functionName": "traverseObjectLiteral",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}