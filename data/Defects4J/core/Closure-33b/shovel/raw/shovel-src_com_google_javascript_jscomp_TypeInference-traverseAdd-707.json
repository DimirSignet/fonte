{
  "origin": "codeshovel",
  "repositoryName": "Closure-33b",
  "repositoryPath": "/tmp/Closure-33b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TypeInference.java",
  "functionName": "traverseAdd",
  "functionId": "traverseAdd___n-Node__scope-FlowScope",
  "sourceFilePath": "src/com/google/javascript/jscomp/TypeInference.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 707,
  "functionEndLine": 739,
  "numCommitsSeen": 69,
  "timeTaken": 4421,
  "changeHistory": [
    "925a8f78c8c6a407435e6fb4513ad96d617643a3",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "925a8f78c8c6a407435e6fb4513ad96d617643a3": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "925a8f78c8c6a407435e6fb4513ad96d617643a3": {
      "type": "Ybodychange",
      "commitMessage": "\nReplace some straggler \"n.isType() \u003d\u003d Token.XX\" calls.\n\nR\u003dnicksantos\nDELTA\u003d70  (36 added, 6 deleted, 28 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3725\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1601 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/15/11, 5:35 PM",
      "commitName": "925a8f78c8c6a407435e6fb4513ad96d617643a3",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/14/11, 6:13 PM",
      "commitNameOld": "39f629a8cfaab37da55288010640d7e516000b1f",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 0.97,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private FlowScope traverseAdd(Node n, FlowScope scope) {\n    Node left \u003d n.getFirstChild();\n    Node right \u003d left.getNext();\n    scope \u003d traverseChildren(n, scope);\n    JSType leftType \u003d left.getJSType();\n    JSType rightType \u003d right.getJSType();\n    JSType type \u003d getNativeType(UNKNOWN_TYPE);\n    if (leftType !\u003d null \u0026\u0026 rightType !\u003d null) {\n        boolean leftIsUnknown \u003d leftType.isUnknownType();\n        boolean rightIsUnknown \u003d rightType.isUnknownType();\n        if (leftIsUnknown \u0026\u0026 rightIsUnknown) {\n            type \u003d getNativeType(UNKNOWN_TYPE);\n        } else if ((!leftIsUnknown \u0026\u0026 leftType.isString()) || (!rightIsUnknown \u0026\u0026 rightType.isString())) {\n            type \u003d getNativeType(STRING_TYPE);\n        } else if (leftIsUnknown || rightIsUnknown) {\n            type \u003d getNativeType(UNKNOWN_TYPE);\n        } else if (isAddedAsNumber(leftType) \u0026\u0026 isAddedAsNumber(rightType)) {\n            type \u003d getNativeType(NUMBER_TYPE);\n        } else {\n            type \u003d registry.createUnionType(STRING_TYPE, NUMBER_TYPE);\n        }\n    }\n    n.setJSType(type);\n    if (n.isAssignAdd()) {\n        updateScopeForTypeChange(scope, left, leftType, type);\n    }\n    return scope;\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 684,
      "functionName": "traverseAdd",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,28 +1,28 @@\n private FlowScope traverseAdd(Node n, FlowScope scope) {\n     Node left \u003d n.getFirstChild();\n     Node right \u003d left.getNext();\n     scope \u003d traverseChildren(n, scope);\n     JSType leftType \u003d left.getJSType();\n     JSType rightType \u003d right.getJSType();\n     JSType type \u003d getNativeType(UNKNOWN_TYPE);\n     if (leftType !\u003d null \u0026\u0026 rightType !\u003d null) {\n         boolean leftIsUnknown \u003d leftType.isUnknownType();\n         boolean rightIsUnknown \u003d rightType.isUnknownType();\n         if (leftIsUnknown \u0026\u0026 rightIsUnknown) {\n             type \u003d getNativeType(UNKNOWN_TYPE);\n         } else if ((!leftIsUnknown \u0026\u0026 leftType.isString()) || (!rightIsUnknown \u0026\u0026 rightType.isString())) {\n             type \u003d getNativeType(STRING_TYPE);\n         } else if (leftIsUnknown || rightIsUnknown) {\n             type \u003d getNativeType(UNKNOWN_TYPE);\n         } else if (isAddedAsNumber(leftType) \u0026\u0026 isAddedAsNumber(rightType)) {\n             type \u003d getNativeType(NUMBER_TYPE);\n         } else {\n             type \u003d registry.createUnionType(STRING_TYPE, NUMBER_TYPE);\n         }\n     }\n     n.setJSType(type);\n-    if (n.getType() \u003d\u003d Token.ASSIGN_ADD) {\n+    if (n.isAssignAdd()) {\n         updateScopeForTypeChange(scope, left, leftType, type);\n     }\n     return scope;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,28 @@\n+private FlowScope traverseAdd(Node n, FlowScope scope) {\n+    Node left \u003d n.getFirstChild();\n+    Node right \u003d left.getNext();\n+    scope \u003d traverseChildren(n, scope);\n+    JSType leftType \u003d left.getJSType();\n+    JSType rightType \u003d right.getJSType();\n+    JSType type \u003d getNativeType(UNKNOWN_TYPE);\n+    if (leftType !\u003d null \u0026\u0026 rightType !\u003d null) {\n+        boolean leftIsUnknown \u003d leftType.isUnknownType();\n+        boolean rightIsUnknown \u003d rightType.isUnknownType();\n+        if (leftIsUnknown \u0026\u0026 rightIsUnknown) {\n+            type \u003d getNativeType(UNKNOWN_TYPE);\n+        } else if ((!leftIsUnknown \u0026\u0026 leftType.isString()) || (!rightIsUnknown \u0026\u0026 rightType.isString())) {\n+            type \u003d getNativeType(STRING_TYPE);\n+        } else if (leftIsUnknown || rightIsUnknown) {\n+            type \u003d getNativeType(UNKNOWN_TYPE);\n+        } else if (isAddedAsNumber(leftType) \u0026\u0026 isAddedAsNumber(rightType)) {\n+            type \u003d getNativeType(NUMBER_TYPE);\n+        } else {\n+            type \u003d registry.createUnionType(STRING_TYPE, NUMBER_TYPE);\n+        }\n+    }\n+    n.setJSType(type);\n+    if (n.getType() \u003d\u003d Token.ASSIGN_ADD) {\n+        updateScopeForTypeChange(scope, left, leftType, type);\n+    }\n+    return scope;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private FlowScope traverseAdd(Node n, FlowScope scope) {\n    Node left \u003d n.getFirstChild();\n    Node right \u003d left.getNext();\n    scope \u003d traverseChildren(n, scope);\n    JSType leftType \u003d left.getJSType();\n    JSType rightType \u003d right.getJSType();\n    JSType type \u003d getNativeType(UNKNOWN_TYPE);\n    if (leftType !\u003d null \u0026\u0026 rightType !\u003d null) {\n        boolean leftIsUnknown \u003d leftType.isUnknownType();\n        boolean rightIsUnknown \u003d rightType.isUnknownType();\n        if (leftIsUnknown \u0026\u0026 rightIsUnknown) {\n            type \u003d getNativeType(UNKNOWN_TYPE);\n        } else if ((!leftIsUnknown \u0026\u0026 leftType.isString()) || (!rightIsUnknown \u0026\u0026 rightType.isString())) {\n            type \u003d getNativeType(STRING_TYPE);\n        } else if (leftIsUnknown || rightIsUnknown) {\n            type \u003d getNativeType(UNKNOWN_TYPE);\n        } else if (isAddedAsNumber(leftType) \u0026\u0026 isAddedAsNumber(rightType)) {\n            type \u003d getNativeType(NUMBER_TYPE);\n        } else {\n            type \u003d registry.createUnionType(STRING_TYPE, NUMBER_TYPE);\n        }\n    }\n    n.setJSType(type);\n    if (n.getType() \u003d\u003d Token.ASSIGN_ADD) {\n        updateScopeForTypeChange(scope, left, leftType, type);\n    }\n    return scope;\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 642,
      "functionName": "traverseAdd",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}