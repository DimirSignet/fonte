{
  "origin": "codeshovel",
  "repositoryName": "Closure-33b",
  "repositoryPath": "/tmp/Closure-33b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TypeCheck.java",
  "functionName": "visitBinaryOperator",
  "functionId": "visitBinaryOperator___op-int__t-NodeTraversal__n-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/TypeCheck.java",
  "functionAnnotation": "",
  "functionDoc": "This function unifies the type checking involved in the core binary\noperators and the corresponding assignment operators.  The representation\nused internally is such that common code can handle both kinds of\noperators easily.\n\n@param op The operator.\n@param t The traversal object, needed to report errors.\n@param n The node being checked.\n",
  "functionStartLine": 1706,
  "functionEndLine": 1760,
  "numCommitsSeen": 71,
  "timeTaken": 5607,
  "changeHistory": [
    "4e976ac213f448bab78f5c1432340c489b533d7b",
    "0895c28861ee4a1969acc858f1a703ab11ddc64c",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "4e976ac213f448bab78f5c1432340c489b533d7b": "Ybodychange",
    "0895c28861ee4a1969acc858f1a703ab11ddc64c": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4e976ac213f448bab78f5c1432340c489b533d7b": {
      "type": "Ybodychange",
      "commitMessage": "\nRemove redundant Token to string function.\n\nR\u003dnicksantos\nDELTA\u003d148  (16 added, 89 deleted, 43 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3765\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1621 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/17/11, 10:08 AM",
      "commitName": "4e976ac213f448bab78f5c1432340c489b533d7b",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/15/11, 5:35 PM",
      "commitNameOld": "925a8f78c8c6a407435e6fb4513ad96d617643a3",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 1.69,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "private void visitBinaryOperator(int op, NodeTraversal t, Node n) {\n    Node left \u003d n.getFirstChild();\n    JSType leftType \u003d getJSType(left);\n    Node right \u003d n.getLastChild();\n    JSType rightType \u003d getJSType(right);\n    switch(op) {\n        case Token.ASSIGN_LSH:\n        case Token.ASSIGN_RSH:\n        case Token.LSH:\n        case Token.RSH:\n        case Token.ASSIGN_URSH:\n        case Token.URSH:\n            if (!leftType.matchesInt32Context()) {\n                report(t, left, BIT_OPERATION, NodeUtil.opToStr(n.getType()), leftType.toString());\n            }\n            if (!rightType.matchesUint32Context()) {\n                report(t, right, BIT_OPERATION, NodeUtil.opToStr(n.getType()), rightType.toString());\n            }\n            break;\n        case Token.ASSIGN_DIV:\n        case Token.ASSIGN_MOD:\n        case Token.ASSIGN_MUL:\n        case Token.ASSIGN_SUB:\n        case Token.DIV:\n        case Token.MOD:\n        case Token.MUL:\n        case Token.SUB:\n            validator.expectNumber(t, left, leftType, \"left operand\");\n            validator.expectNumber(t, right, rightType, \"right operand\");\n            break;\n        case Token.ASSIGN_BITAND:\n        case Token.ASSIGN_BITXOR:\n        case Token.ASSIGN_BITOR:\n        case Token.BITAND:\n        case Token.BITXOR:\n        case Token.BITOR:\n            validator.expectBitwiseable(t, left, leftType, \"bad left operand to bitwise operator\");\n            validator.expectBitwiseable(t, right, rightType, \"bad right operand to bitwise operator\");\n            break;\n        case Token.ASSIGN_ADD:\n        case Token.ADD:\n            break;\n        default:\n            report(t, n, UNEXPECTED_TOKEN, Token.name(op));\n    }\n    ensureTyped(t, n);\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1692,
      "functionName": "visitBinaryOperator",
      "functionAnnotation": "",
      "functionDoc": "This function unifies the type checking involved in the core binary\noperators and the corresponding assignment operators.  The representation\nused internally is such that common code can handle both kinds of\noperators easily.\n\n@param op The operator.\n@param t The traversal object, needed to report errors.\n@param n The node being checked.\n",
      "diff": "@@ -1,47 +1,47 @@\n private void visitBinaryOperator(int op, NodeTraversal t, Node n) {\n     Node left \u003d n.getFirstChild();\n     JSType leftType \u003d getJSType(left);\n     Node right \u003d n.getLastChild();\n     JSType rightType \u003d getJSType(right);\n     switch(op) {\n         case Token.ASSIGN_LSH:\n         case Token.ASSIGN_RSH:\n         case Token.LSH:\n         case Token.RSH:\n         case Token.ASSIGN_URSH:\n         case Token.URSH:\n             if (!leftType.matchesInt32Context()) {\n                 report(t, left, BIT_OPERATION, NodeUtil.opToStr(n.getType()), leftType.toString());\n             }\n             if (!rightType.matchesUint32Context()) {\n                 report(t, right, BIT_OPERATION, NodeUtil.opToStr(n.getType()), rightType.toString());\n             }\n             break;\n         case Token.ASSIGN_DIV:\n         case Token.ASSIGN_MOD:\n         case Token.ASSIGN_MUL:\n         case Token.ASSIGN_SUB:\n         case Token.DIV:\n         case Token.MOD:\n         case Token.MUL:\n         case Token.SUB:\n             validator.expectNumber(t, left, leftType, \"left operand\");\n             validator.expectNumber(t, right, rightType, \"right operand\");\n             break;\n         case Token.ASSIGN_BITAND:\n         case Token.ASSIGN_BITXOR:\n         case Token.ASSIGN_BITOR:\n         case Token.BITAND:\n         case Token.BITXOR:\n         case Token.BITOR:\n             validator.expectBitwiseable(t, left, leftType, \"bad left operand to bitwise operator\");\n             validator.expectBitwiseable(t, right, rightType, \"bad right operand to bitwise operator\");\n             break;\n         case Token.ASSIGN_ADD:\n         case Token.ADD:\n             break;\n         default:\n-            report(t, n, UNEXPECTED_TOKEN, Node.tokenToName(op));\n+            report(t, n, UNEXPECTED_TOKEN, Token.name(op));\n     }\n     ensureTyped(t, n);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0895c28861ee4a1969acc858f1a703ab11ddc64c": {
      "type": "Ybodychange",
      "commitMessage": "\n\nChange on 2010/06/16 by johnlenz\n\n        Remove unused member variable.\n\n        R\u003dacleung\n        DELTA\u003d17  (0 added, 12 deleted, 5 changed)\n\nChange on 2010/06/16 by acleung\n\n        Make @notypecheck behaves like it is doing typechecking except for reporting errors.\n\n        R\u003djohnlenz\n        DELTA\u003d144  (89 added, 17 deleted, 38 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d28012\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@245 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/17/10, 10:16 AM",
      "commitName": "0895c28861ee4a1969acc858f1a703ab11ddc64c",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "5/3/10, 7:03 AM",
      "commitNameOld": "9147da9979fb00599efd700fa5e0cccfa93d25a5",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 45.13,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "actualSource": "private void visitBinaryOperator(int op, NodeTraversal t, Node n) {\n    Node left \u003d n.getFirstChild();\n    JSType leftType \u003d getJSType(left);\n    Node right \u003d n.getLastChild();\n    JSType rightType \u003d getJSType(right);\n    switch(op) {\n        case Token.ASSIGN_LSH:\n        case Token.ASSIGN_RSH:\n        case Token.LSH:\n        case Token.RSH:\n        case Token.ASSIGN_URSH:\n        case Token.URSH:\n            if (!leftType.matchesInt32Context()) {\n                report(t, left, BIT_OPERATION, NodeUtil.opToStr(n.getType()), leftType.toString());\n            }\n            if (!rightType.matchesUint32Context()) {\n                report(t, right, BIT_OPERATION, NodeUtil.opToStr(n.getType()), rightType.toString());\n            }\n            break;\n        case Token.ASSIGN_DIV:\n        case Token.ASSIGN_MOD:\n        case Token.ASSIGN_MUL:\n        case Token.ASSIGN_SUB:\n        case Token.DIV:\n        case Token.MOD:\n        case Token.MUL:\n        case Token.SUB:\n            validator.expectNumber(t, left, leftType, \"left operand\");\n            validator.expectNumber(t, right, rightType, \"right operand\");\n            break;\n        case Token.ASSIGN_BITAND:\n        case Token.ASSIGN_BITXOR:\n        case Token.ASSIGN_BITOR:\n        case Token.BITAND:\n        case Token.BITXOR:\n        case Token.BITOR:\n            validator.expectBitwiseable(t, left, leftType, \"bad left operand to bitwise operator\");\n            validator.expectBitwiseable(t, right, rightType, \"bad right operand to bitwise operator\");\n            break;\n        case Token.ASSIGN_ADD:\n        case Token.ADD:\n            break;\n        default:\n            report(t, n, UNEXPECTED_TOKEN, Node.tokenToName(op));\n    }\n    ensureTyped(t, n);\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1466,
      "functionName": "visitBinaryOperator",
      "functionAnnotation": "",
      "functionDoc": "This function unifies the type checking involved in the core binary\noperators and the corresponding assignment operators.  The representation\nused internally is such that common code can handle both kinds of\noperators easily.\n\n@param op The operator.\n@param t The traversal object, needed to report errors.\n@param n The node being checked.\n",
      "diff": "@@ -1,47 +1,47 @@\n private void visitBinaryOperator(int op, NodeTraversal t, Node n) {\n     Node left \u003d n.getFirstChild();\n     JSType leftType \u003d getJSType(left);\n     Node right \u003d n.getLastChild();\n     JSType rightType \u003d getJSType(right);\n     switch(op) {\n         case Token.ASSIGN_LSH:\n         case Token.ASSIGN_RSH:\n         case Token.LSH:\n         case Token.RSH:\n         case Token.ASSIGN_URSH:\n         case Token.URSH:\n             if (!leftType.matchesInt32Context()) {\n-                t.report(left, BIT_OPERATION, NodeUtil.opToStr(n.getType()), leftType.toString());\n+                report(t, left, BIT_OPERATION, NodeUtil.opToStr(n.getType()), leftType.toString());\n             }\n             if (!rightType.matchesUint32Context()) {\n-                t.report(right, BIT_OPERATION, NodeUtil.opToStr(n.getType()), rightType.toString());\n+                report(t, right, BIT_OPERATION, NodeUtil.opToStr(n.getType()), rightType.toString());\n             }\n             break;\n         case Token.ASSIGN_DIV:\n         case Token.ASSIGN_MOD:\n         case Token.ASSIGN_MUL:\n         case Token.ASSIGN_SUB:\n         case Token.DIV:\n         case Token.MOD:\n         case Token.MUL:\n         case Token.SUB:\n             validator.expectNumber(t, left, leftType, \"left operand\");\n             validator.expectNumber(t, right, rightType, \"right operand\");\n             break;\n         case Token.ASSIGN_BITAND:\n         case Token.ASSIGN_BITXOR:\n         case Token.ASSIGN_BITOR:\n         case Token.BITAND:\n         case Token.BITXOR:\n         case Token.BITOR:\n             validator.expectBitwiseable(t, left, leftType, \"bad left operand to bitwise operator\");\n             validator.expectBitwiseable(t, right, rightType, \"bad right operand to bitwise operator\");\n             break;\n         case Token.ASSIGN_ADD:\n         case Token.ADD:\n             break;\n         default:\n-            t.report(n, UNEXPECTED_TOKEN, Node.tokenToName(op));\n+            report(t, n, UNEXPECTED_TOKEN, Node.tokenToName(op));\n     }\n     ensureTyped(t, n);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,47 @@\n+private void visitBinaryOperator(int op, NodeTraversal t, Node n) {\n+    Node left \u003d n.getFirstChild();\n+    JSType leftType \u003d getJSType(left);\n+    Node right \u003d n.getLastChild();\n+    JSType rightType \u003d getJSType(right);\n+    switch(op) {\n+        case Token.ASSIGN_LSH:\n+        case Token.ASSIGN_RSH:\n+        case Token.LSH:\n+        case Token.RSH:\n+        case Token.ASSIGN_URSH:\n+        case Token.URSH:\n+            if (!leftType.matchesInt32Context()) {\n+                t.report(left, BIT_OPERATION, NodeUtil.opToStr(n.getType()), leftType.toString());\n+            }\n+            if (!rightType.matchesUint32Context()) {\n+                t.report(right, BIT_OPERATION, NodeUtil.opToStr(n.getType()), rightType.toString());\n+            }\n+            break;\n+        case Token.ASSIGN_DIV:\n+        case Token.ASSIGN_MOD:\n+        case Token.ASSIGN_MUL:\n+        case Token.ASSIGN_SUB:\n+        case Token.DIV:\n+        case Token.MOD:\n+        case Token.MUL:\n+        case Token.SUB:\n+            validator.expectNumber(t, left, leftType, \"left operand\");\n+            validator.expectNumber(t, right, rightType, \"right operand\");\n+            break;\n+        case Token.ASSIGN_BITAND:\n+        case Token.ASSIGN_BITXOR:\n+        case Token.ASSIGN_BITOR:\n+        case Token.BITAND:\n+        case Token.BITXOR:\n+        case Token.BITOR:\n+            validator.expectBitwiseable(t, left, leftType, \"bad left operand to bitwise operator\");\n+            validator.expectBitwiseable(t, right, rightType, \"bad right operand to bitwise operator\");\n+            break;\n+        case Token.ASSIGN_ADD:\n+        case Token.ADD:\n+            break;\n+        default:\n+            t.report(n, UNEXPECTED_TOKEN, Node.tokenToName(op));\n+    }\n+    ensureTyped(t, n);\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void visitBinaryOperator(int op, NodeTraversal t, Node n) {\n    Node left \u003d n.getFirstChild();\n    JSType leftType \u003d getJSType(left);\n    Node right \u003d n.getLastChild();\n    JSType rightType \u003d getJSType(right);\n    switch(op) {\n        case Token.ASSIGN_LSH:\n        case Token.ASSIGN_RSH:\n        case Token.LSH:\n        case Token.RSH:\n        case Token.ASSIGN_URSH:\n        case Token.URSH:\n            if (!leftType.matchesInt32Context()) {\n                t.report(left, BIT_OPERATION, NodeUtil.opToStr(n.getType()), leftType.toString());\n            }\n            if (!rightType.matchesUint32Context()) {\n                t.report(right, BIT_OPERATION, NodeUtil.opToStr(n.getType()), rightType.toString());\n            }\n            break;\n        case Token.ASSIGN_DIV:\n        case Token.ASSIGN_MOD:\n        case Token.ASSIGN_MUL:\n        case Token.ASSIGN_SUB:\n        case Token.DIV:\n        case Token.MOD:\n        case Token.MUL:\n        case Token.SUB:\n            validator.expectNumber(t, left, leftType, \"left operand\");\n            validator.expectNumber(t, right, rightType, \"right operand\");\n            break;\n        case Token.ASSIGN_BITAND:\n        case Token.ASSIGN_BITXOR:\n        case Token.ASSIGN_BITOR:\n        case Token.BITAND:\n        case Token.BITXOR:\n        case Token.BITOR:\n            validator.expectBitwiseable(t, left, leftType, \"bad left operand to bitwise operator\");\n            validator.expectBitwiseable(t, right, rightType, \"bad right operand to bitwise operator\");\n            break;\n        case Token.ASSIGN_ADD:\n        case Token.ADD:\n            break;\n        default:\n            t.report(n, UNEXPECTED_TOKEN, Node.tokenToName(op));\n    }\n    ensureTyped(t, n);\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1453,
      "functionName": "visitBinaryOperator",
      "functionAnnotation": "",
      "functionDoc": "This function unifies the type checking involved in the core binary\noperators and the corresponding assignment operators.  The representation\nused internally is such that common code can handle both kinds of\noperators easily.\n\n@param op The operator.\n@param t The traversal object, needed to report errors.\n@param n The node being checked.\n"
    }
  }
}