{
  "origin": "codeshovel",
  "repositoryName": "Closure-33b",
  "repositoryPath": "/tmp/Closure-33b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TypeCheck.java",
  "functionName": "visitReturn",
  "functionId": "visitReturn___t-NodeTraversal__n-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/TypeCheck.java",
  "functionAnnotation": "",
  "functionDoc": "Visits a RETURN node.\n\n@param t The node traversal object that supplies context, such as the\nscope chain to use in name lookups as well as error reporting.\n@param n The node being visited.\n",
  "functionStartLine": 1659,
  "functionEndLine": 1694,
  "numCommitsSeen": 71,
  "timeTaken": 5536,
  "changeHistory": [
    "bd9c7b620384fe5a98772729001ed56304459bc6",
    "01d1238a2a577d8988a72c29304a3283ca05a29a",
    "fc0798047ad3aac58a54ea65f9f1c8857745419f",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "bd9c7b620384fe5a98772729001ed56304459bc6": "Ybodychange",
    "01d1238a2a577d8988a72c29304a3283ca05a29a": "Ybodychange",
    "fc0798047ad3aac58a54ea65f9f1c8857745419f": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bd9c7b620384fe5a98772729001ed56304459bc6": {
      "type": "Ybodychange",
      "commitMessage": "\nAdd toMaybeFunctionType/toMaybeEnumElementType.\ntry #2. the bugs in jstestc were fixed. this cl is exactly\nthe same as the original\n\nR\u003djohnlenz\nDELTA\u003d317  (79 added, 47 deleted, 191 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3078\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1367 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/18/11, 3:46 PM",
      "commitName": "bd9c7b620384fe5a98772729001ed56304459bc6",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "8/18/11, 10:40 AM",
      "commitNameOld": "01d1238a2a577d8988a72c29304a3283ca05a29a",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.21,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private void visitReturn(NodeTraversal t, Node n) {\n    Node function \u003d t.getEnclosingFunction();\n    if (function \u003d\u003d null) {\n        return;\n    }\n    JSType jsType \u003d getJSType(function);\n    if (jsType.isFunctionType()) {\n        FunctionType functionType \u003d jsType.toMaybeFunctionType();\n        JSType returnType \u003d functionType.getReturnType();\n        if (returnType \u003d\u003d null) {\n            returnType \u003d getNativeType(VOID_TYPE);\n        }\n        Node valueNode \u003d n.getFirstChild();\n        JSType actualReturnType;\n        if (valueNode \u003d\u003d null) {\n            actualReturnType \u003d getNativeType(VOID_TYPE);\n            valueNode \u003d n;\n        } else {\n            actualReturnType \u003d getJSType(valueNode);\n        }\n        validator.expectCanAssignTo(t, valueNode, actualReturnType, returnType, \"inconsistent return type\");\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1648,
      "functionName": "visitReturn",
      "functionAnnotation": "",
      "functionDoc": "Visits a RETURN node.\n\n@param t The node traversal object that supplies context, such as the\nscope chain to use in name lookups as well as error reporting.\n@param n The node being visited.\n",
      "diff": "@@ -1,23 +1,23 @@\n private void visitReturn(NodeTraversal t, Node n) {\n     Node function \u003d t.getEnclosingFunction();\n     if (function \u003d\u003d null) {\n         return;\n     }\n     JSType jsType \u003d getJSType(function);\n-    if (jsType instanceof FunctionType) {\n-        FunctionType functionType \u003d (FunctionType) jsType;\n+    if (jsType.isFunctionType()) {\n+        FunctionType functionType \u003d jsType.toMaybeFunctionType();\n         JSType returnType \u003d functionType.getReturnType();\n         if (returnType \u003d\u003d null) {\n             returnType \u003d getNativeType(VOID_TYPE);\n         }\n         Node valueNode \u003d n.getFirstChild();\n         JSType actualReturnType;\n         if (valueNode \u003d\u003d null) {\n             actualReturnType \u003d getNativeType(VOID_TYPE);\n             valueNode \u003d n;\n         } else {\n             actualReturnType \u003d getJSType(valueNode);\n         }\n         validator.expectCanAssignTo(t, valueNode, actualReturnType, returnType, \"inconsistent return type\");\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "01d1238a2a577d8988a72c29304a3283ca05a29a": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nbroke some tests\n\n*** Original change description ***\n\nAdd toMaybeFunctionType/toMaybeEnumElementType.\nwow, nullability is annoying!\n\nDELTA\u003d318  (48 added, 79 deleted, 191 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3075\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1364 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/18/11, 10:40 AM",
      "commitName": "01d1238a2a577d8988a72c29304a3283ca05a29a",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "8/18/11, 9:38 AM",
      "commitNameOld": "fc0798047ad3aac58a54ea65f9f1c8857745419f",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void visitReturn(NodeTraversal t, Node n) {\n    Node function \u003d t.getEnclosingFunction();\n    if (function \u003d\u003d null) {\n        return;\n    }\n    JSType jsType \u003d getJSType(function);\n    if (jsType instanceof FunctionType) {\n        FunctionType functionType \u003d (FunctionType) jsType;\n        JSType returnType \u003d functionType.getReturnType();\n        if (returnType \u003d\u003d null) {\n            returnType \u003d getNativeType(VOID_TYPE);\n        }\n        Node valueNode \u003d n.getFirstChild();\n        JSType actualReturnType;\n        if (valueNode \u003d\u003d null) {\n            actualReturnType \u003d getNativeType(VOID_TYPE);\n            valueNode \u003d n;\n        } else {\n            actualReturnType \u003d getJSType(valueNode);\n        }\n        validator.expectCanAssignTo(t, valueNode, actualReturnType, returnType, \"inconsistent return type\");\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1646,
      "functionName": "visitReturn",
      "functionAnnotation": "",
      "functionDoc": "Visits a RETURN node.\n\n@param t The node traversal object that supplies context, such as the\nscope chain to use in name lookups as well as error reporting.\n@param n The node being visited.\n",
      "diff": "@@ -1,23 +1,23 @@\n private void visitReturn(NodeTraversal t, Node n) {\n     Node function \u003d t.getEnclosingFunction();\n     if (function \u003d\u003d null) {\n         return;\n     }\n     JSType jsType \u003d getJSType(function);\n-    if (jsType.isFunctionType()) {\n-        FunctionType functionType \u003d jsType.toMaybeFunctionType();\n+    if (jsType instanceof FunctionType) {\n+        FunctionType functionType \u003d (FunctionType) jsType;\n         JSType returnType \u003d functionType.getReturnType();\n         if (returnType \u003d\u003d null) {\n             returnType \u003d getNativeType(VOID_TYPE);\n         }\n         Node valueNode \u003d n.getFirstChild();\n         JSType actualReturnType;\n         if (valueNode \u003d\u003d null) {\n             actualReturnType \u003d getNativeType(VOID_TYPE);\n             valueNode \u003d n;\n         } else {\n             actualReturnType \u003d getJSType(valueNode);\n         }\n         validator.expectCanAssignTo(t, valueNode, actualReturnType, returnType, \"inconsistent return type\");\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "fc0798047ad3aac58a54ea65f9f1c8857745419f": {
      "type": "Ybodychange",
      "commitMessage": "\nAdd toMaybeFunctionType/toMaybeEnumElementType.\nwow, nullability is annoying!\n\nR\u003djohnlenz\nDELTA\u003d318  (79 added, 48 deleted, 191 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3074\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1363 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/18/11, 9:38 AM",
      "commitName": "fc0798047ad3aac58a54ea65f9f1c8857745419f",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "8/4/11, 9:23 AM",
      "commitNameOld": "0af94b21ceb7f8f0891b85e5713ff93c230e1bb6",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 14.01,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "actualSource": "private void visitReturn(NodeTraversal t, Node n) {\n    Node function \u003d t.getEnclosingFunction();\n    if (function \u003d\u003d null) {\n        return;\n    }\n    JSType jsType \u003d getJSType(function);\n    if (jsType.isFunctionType()) {\n        FunctionType functionType \u003d jsType.toMaybeFunctionType();\n        JSType returnType \u003d functionType.getReturnType();\n        if (returnType \u003d\u003d null) {\n            returnType \u003d getNativeType(VOID_TYPE);\n        }\n        Node valueNode \u003d n.getFirstChild();\n        JSType actualReturnType;\n        if (valueNode \u003d\u003d null) {\n            actualReturnType \u003d getNativeType(VOID_TYPE);\n            valueNode \u003d n;\n        } else {\n            actualReturnType \u003d getJSType(valueNode);\n        }\n        validator.expectCanAssignTo(t, valueNode, actualReturnType, returnType, \"inconsistent return type\");\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1648,
      "functionName": "visitReturn",
      "functionAnnotation": "",
      "functionDoc": "Visits a RETURN node.\n\n@param t The node traversal object that supplies context, such as the\nscope chain to use in name lookups as well as error reporting.\n@param n The node being visited.\n",
      "diff": "@@ -1,23 +1,23 @@\n private void visitReturn(NodeTraversal t, Node n) {\n     Node function \u003d t.getEnclosingFunction();\n     if (function \u003d\u003d null) {\n         return;\n     }\n     JSType jsType \u003d getJSType(function);\n-    if (jsType instanceof FunctionType) {\n-        FunctionType functionType \u003d (FunctionType) jsType;\n+    if (jsType.isFunctionType()) {\n+        FunctionType functionType \u003d jsType.toMaybeFunctionType();\n         JSType returnType \u003d functionType.getReturnType();\n         if (returnType \u003d\u003d null) {\n             returnType \u003d getNativeType(VOID_TYPE);\n         }\n         Node valueNode \u003d n.getFirstChild();\n         JSType actualReturnType;\n         if (valueNode \u003d\u003d null) {\n             actualReturnType \u003d getNativeType(VOID_TYPE);\n             valueNode \u003d n;\n         } else {\n             actualReturnType \u003d getJSType(valueNode);\n         }\n         validator.expectCanAssignTo(t, valueNode, actualReturnType, returnType, \"inconsistent return type\");\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,23 @@\n+private void visitReturn(NodeTraversal t, Node n) {\n+    Node function \u003d t.getEnclosingFunction();\n+    if (function \u003d\u003d null) {\n+        return;\n+    }\n+    JSType jsType \u003d getJSType(function);\n+    if (jsType instanceof FunctionType) {\n+        FunctionType functionType \u003d (FunctionType) jsType;\n+        JSType returnType \u003d functionType.getReturnType();\n+        if (returnType \u003d\u003d null) {\n+            returnType \u003d getNativeType(VOID_TYPE);\n+        }\n+        Node valueNode \u003d n.getFirstChild();\n+        JSType actualReturnType;\n+        if (valueNode \u003d\u003d null) {\n+            actualReturnType \u003d getNativeType(VOID_TYPE);\n+            valueNode \u003d n;\n+        } else {\n+            actualReturnType \u003d getJSType(valueNode);\n+        }\n+        validator.expectCanAssignTo(t, valueNode, actualReturnType, returnType, \"inconsistent return type\");\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void visitReturn(NodeTraversal t, Node n) {\n    Node function \u003d t.getEnclosingFunction();\n    if (function \u003d\u003d null) {\n        return;\n    }\n    JSType jsType \u003d getJSType(function);\n    if (jsType instanceof FunctionType) {\n        FunctionType functionType \u003d (FunctionType) jsType;\n        JSType returnType \u003d functionType.getReturnType();\n        if (returnType \u003d\u003d null) {\n            returnType \u003d getNativeType(VOID_TYPE);\n        }\n        Node valueNode \u003d n.getFirstChild();\n        JSType actualReturnType;\n        if (valueNode \u003d\u003d null) {\n            actualReturnType \u003d getNativeType(VOID_TYPE);\n            valueNode \u003d n;\n        } else {\n            actualReturnType \u003d getJSType(valueNode);\n        }\n        validator.expectCanAssignTo(t, valueNode, actualReturnType, returnType, \"inconsistent return type\");\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1406,
      "functionName": "visitReturn",
      "functionAnnotation": "",
      "functionDoc": "Visits a RETURN node.\n\n@param t The node traversal object that supplies context, such as the\nscope chain to use in name lookups as well as error reporting.\n@param n The node being visited.\n"
    }
  }
}