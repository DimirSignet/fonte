{
  "origin": "codeshovel",
  "repositoryName": "Closure-33b",
  "repositoryPath": "/tmp/Closure-33b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TypeValidator.java",
  "functionName": "expectUndeclaredVariable",
  "functionId": "expectUndeclaredVariable___sourceName-String__input-CompilerInput__n-Node__parent-Node__var-Var__variableName-String__newType-JSType",
  "sourceFilePath": "src/com/google/javascript/jscomp/TypeValidator.java",
  "functionAnnotation": "",
  "functionDoc": "Expect that the given variable has not been declared with a type.\n\n@param sourceName The name of the source file we\u0027re in.\n@param n The node where warnings should point to.\n@param parent The parent of {@code n}.\n@param var The variable that we\u0027re checking.\n@param variableName The name of the variable.\n@param newType The type being applied to the variable. Mostly just here\n    for the benefit of the warning.\n@return The variable we end up with. Most of the time, this will just\n    be {@code var}, but in some rare cases we will need to declare\n    a new var with new source info.\n",
  "functionStartLine": 514,
  "functionEndLine": 574,
  "numCommitsSeen": 63,
  "timeTaken": 2227,
  "changeHistory": [
    "c2e1d41c876befd2c6b80861b2680685d8f54a5e",
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
    "6a2b233cac8fad95318405149b01d2c073509f62",
    "41ecd65c09b6d39253c4f855e615daabbc7e241a",
    "8bf67e65c7ee2a202ac2dbf252727ae656642350",
    "0895c28861ee4a1969acc858f1a703ab11ddc64c",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "c2e1d41c876befd2c6b80861b2680685d8f54a5e": "Ymultichange(Yreturntypechange,Ybodychange,Ydocchange)",
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c": "Ybodychange",
    "6a2b233cac8fad95318405149b01d2c073509f62": "Ymultichange(Yparameterchange,Ybodychange)",
    "41ecd65c09b6d39253c4f855e615daabbc7e241a": "Ybodychange",
    "8bf67e65c7ee2a202ac2dbf252727ae656642350": "Ybodychange",
    "0895c28861ee4a1969acc858f1a703ab11ddc64c": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c2e1d41c876befd2c6b80861b2680685d8f54a5e": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange,Ydocchange)",
      "commitMessage": "\nredeclare prototypes of native types when we see them in the externs.\nThis ensures that they get proper source info\n\nR\u003djohnlenz\nDELTA\u003d94  (32 added, 2 deleted, 60 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3900\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1656 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/1/11, 11:56 AM",
      "commitName": "c2e1d41c876befd2c6b80861b2680685d8f54a5e",
      "commitAuthor": "nicksantos@google.com",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "\nredeclare prototypes of native types when we see them in the externs.\nThis ensures that they get proper source info\n\nR\u003djohnlenz\nDELTA\u003d94  (32 added, 2 deleted, 60 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3900\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1656 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "12/1/11, 11:56 AM",
          "commitName": "c2e1d41c876befd2c6b80861b2680685d8f54a5e",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "11/10/11, 8:36 AM",
          "commitNameOld": "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 21.14,
          "commitsBetweenForRepo": 62,
          "commitsBetweenForFile": 1,
          "actualSource": "Var expectUndeclaredVariable(String sourceName, CompilerInput input, Node n, Node parent, Var var, String variableName, JSType newType) {\n    Var newVar \u003d var;\n    boolean allowDupe \u003d false;\n    if (n.isGetProp() || NodeUtil.isObjectLitKey(n, parent)) {\n        JSDocInfo info \u003d n.getJSDocInfo();\n        if (info \u003d\u003d null) {\n            info \u003d parent.getJSDocInfo();\n        }\n        allowDupe \u003d info !\u003d null \u0026\u0026 info.getSuppressions().contains(\"duplicate\");\n    }\n    JSType varType \u003d var.getType();\n    if (varType !\u003d null \u0026\u0026 varType !\u003d typeRegistry.getNativeType(UNKNOWN_TYPE) \u0026\u0026 newType !\u003d null \u0026\u0026 newType !\u003d typeRegistry.getNativeType(UNKNOWN_TYPE)) {\n        if (var.input \u003d\u003d null) {\n            Scope s \u003d var.getScope();\n            s.undeclare(var);\n            newVar \u003d s.declare(variableName, n, varType, input, false);\n            n.setJSType(varType);\n            if (parent.isVar()) {\n                if (n.getFirstChild() !\u003d null) {\n                    n.getFirstChild().setJSType(varType);\n                }\n            } else {\n                Preconditions.checkState(parent.isFunction());\n                parent.setJSType(varType);\n            }\n        } else {\n            if (!(allowDupe || var.getParentNode().isExprResult()) || !newType.equals(varType)) {\n                report(JSError.make(sourceName, n, DUP_VAR_DECLARATION, variableName, newType.toString(), var.getInputName(), String.valueOf(var.nameNode.getLineno()), varType.toString()));\n            }\n        }\n    }\n    return newVar;\n}",
          "path": "src/com/google/javascript/jscomp/TypeValidator.java",
          "functionStartLine": 501,
          "functionName": "expectUndeclaredVariable",
          "functionAnnotation": "",
          "functionDoc": "Expect that the given variable has not been declared with a type.\n\n@param sourceName The name of the source file we\u0027re in.\n@param n The node where warnings should point to.\n@param parent The parent of {@code n}.\n@param var The variable that we\u0027re checking.\n@param variableName The name of the variable.\n@param newType The type being applied to the variable. Mostly just here\n    for the benefit of the warning.\n@return The variable we end up with. Most of the time, this will just\n    be {@code var}, but in some rare cases we will need to declare\n    a new var with new source info.\n",
          "diff": "@@ -1,31 +1,33 @@\n-void expectUndeclaredVariable(String sourceName, CompilerInput input, Node n, Node parent, Var var, String variableName, JSType newType) {\n+Var expectUndeclaredVariable(String sourceName, CompilerInput input, Node n, Node parent, Var var, String variableName, JSType newType) {\n+    Var newVar \u003d var;\n     boolean allowDupe \u003d false;\n     if (n.isGetProp() || NodeUtil.isObjectLitKey(n, parent)) {\n         JSDocInfo info \u003d n.getJSDocInfo();\n         if (info \u003d\u003d null) {\n             info \u003d parent.getJSDocInfo();\n         }\n         allowDupe \u003d info !\u003d null \u0026\u0026 info.getSuppressions().contains(\"duplicate\");\n     }\n     JSType varType \u003d var.getType();\n     if (varType !\u003d null \u0026\u0026 varType !\u003d typeRegistry.getNativeType(UNKNOWN_TYPE) \u0026\u0026 newType !\u003d null \u0026\u0026 newType !\u003d typeRegistry.getNativeType(UNKNOWN_TYPE)) {\n         if (var.input \u003d\u003d null) {\n             Scope s \u003d var.getScope();\n             s.undeclare(var);\n-            s.declare(variableName, n, varType, input, false);\n+            newVar \u003d s.declare(variableName, n, varType, input, false);\n             n.setJSType(varType);\n             if (parent.isVar()) {\n                 if (n.getFirstChild() !\u003d null) {\n                     n.getFirstChild().setJSType(varType);\n                 }\n             } else {\n                 Preconditions.checkState(parent.isFunction());\n                 parent.setJSType(varType);\n             }\n         } else {\n             if (!(allowDupe || var.getParentNode().isExprResult()) || !newType.equals(varType)) {\n                 report(JSError.make(sourceName, n, DUP_VAR_DECLARATION, variableName, newType.toString(), var.getInputName(), String.valueOf(var.nameNode.getLineno()), varType.toString()));\n             }\n         }\n     }\n+    return newVar;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "Var"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nredeclare prototypes of native types when we see them in the externs.\nThis ensures that they get proper source info\n\nR\u003djohnlenz\nDELTA\u003d94  (32 added, 2 deleted, 60 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3900\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1656 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "12/1/11, 11:56 AM",
          "commitName": "c2e1d41c876befd2c6b80861b2680685d8f54a5e",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "11/10/11, 8:36 AM",
          "commitNameOld": "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 21.14,
          "commitsBetweenForRepo": 62,
          "commitsBetweenForFile": 1,
          "actualSource": "Var expectUndeclaredVariable(String sourceName, CompilerInput input, Node n, Node parent, Var var, String variableName, JSType newType) {\n    Var newVar \u003d var;\n    boolean allowDupe \u003d false;\n    if (n.isGetProp() || NodeUtil.isObjectLitKey(n, parent)) {\n        JSDocInfo info \u003d n.getJSDocInfo();\n        if (info \u003d\u003d null) {\n            info \u003d parent.getJSDocInfo();\n        }\n        allowDupe \u003d info !\u003d null \u0026\u0026 info.getSuppressions().contains(\"duplicate\");\n    }\n    JSType varType \u003d var.getType();\n    if (varType !\u003d null \u0026\u0026 varType !\u003d typeRegistry.getNativeType(UNKNOWN_TYPE) \u0026\u0026 newType !\u003d null \u0026\u0026 newType !\u003d typeRegistry.getNativeType(UNKNOWN_TYPE)) {\n        if (var.input \u003d\u003d null) {\n            Scope s \u003d var.getScope();\n            s.undeclare(var);\n            newVar \u003d s.declare(variableName, n, varType, input, false);\n            n.setJSType(varType);\n            if (parent.isVar()) {\n                if (n.getFirstChild() !\u003d null) {\n                    n.getFirstChild().setJSType(varType);\n                }\n            } else {\n                Preconditions.checkState(parent.isFunction());\n                parent.setJSType(varType);\n            }\n        } else {\n            if (!(allowDupe || var.getParentNode().isExprResult()) || !newType.equals(varType)) {\n                report(JSError.make(sourceName, n, DUP_VAR_DECLARATION, variableName, newType.toString(), var.getInputName(), String.valueOf(var.nameNode.getLineno()), varType.toString()));\n            }\n        }\n    }\n    return newVar;\n}",
          "path": "src/com/google/javascript/jscomp/TypeValidator.java",
          "functionStartLine": 501,
          "functionName": "expectUndeclaredVariable",
          "functionAnnotation": "",
          "functionDoc": "Expect that the given variable has not been declared with a type.\n\n@param sourceName The name of the source file we\u0027re in.\n@param n The node where warnings should point to.\n@param parent The parent of {@code n}.\n@param var The variable that we\u0027re checking.\n@param variableName The name of the variable.\n@param newType The type being applied to the variable. Mostly just here\n    for the benefit of the warning.\n@return The variable we end up with. Most of the time, this will just\n    be {@code var}, but in some rare cases we will need to declare\n    a new var with new source info.\n",
          "diff": "@@ -1,31 +1,33 @@\n-void expectUndeclaredVariable(String sourceName, CompilerInput input, Node n, Node parent, Var var, String variableName, JSType newType) {\n+Var expectUndeclaredVariable(String sourceName, CompilerInput input, Node n, Node parent, Var var, String variableName, JSType newType) {\n+    Var newVar \u003d var;\n     boolean allowDupe \u003d false;\n     if (n.isGetProp() || NodeUtil.isObjectLitKey(n, parent)) {\n         JSDocInfo info \u003d n.getJSDocInfo();\n         if (info \u003d\u003d null) {\n             info \u003d parent.getJSDocInfo();\n         }\n         allowDupe \u003d info !\u003d null \u0026\u0026 info.getSuppressions().contains(\"duplicate\");\n     }\n     JSType varType \u003d var.getType();\n     if (varType !\u003d null \u0026\u0026 varType !\u003d typeRegistry.getNativeType(UNKNOWN_TYPE) \u0026\u0026 newType !\u003d null \u0026\u0026 newType !\u003d typeRegistry.getNativeType(UNKNOWN_TYPE)) {\n         if (var.input \u003d\u003d null) {\n             Scope s \u003d var.getScope();\n             s.undeclare(var);\n-            s.declare(variableName, n, varType, input, false);\n+            newVar \u003d s.declare(variableName, n, varType, input, false);\n             n.setJSType(varType);\n             if (parent.isVar()) {\n                 if (n.getFirstChild() !\u003d null) {\n                     n.getFirstChild().setJSType(varType);\n                 }\n             } else {\n                 Preconditions.checkState(parent.isFunction());\n                 parent.setJSType(varType);\n             }\n         } else {\n             if (!(allowDupe || var.getParentNode().isExprResult()) || !newType.equals(varType)) {\n                 report(JSError.make(sourceName, n, DUP_VAR_DECLARATION, variableName, newType.toString(), var.getInputName(), String.valueOf(var.nameNode.getLineno()), varType.toString()));\n             }\n         }\n     }\n+    return newVar;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "\nredeclare prototypes of native types when we see them in the externs.\nThis ensures that they get proper source info\n\nR\u003djohnlenz\nDELTA\u003d94  (32 added, 2 deleted, 60 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3900\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1656 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "12/1/11, 11:56 AM",
          "commitName": "c2e1d41c876befd2c6b80861b2680685d8f54a5e",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "11/10/11, 8:36 AM",
          "commitNameOld": "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 21.14,
          "commitsBetweenForRepo": 62,
          "commitsBetweenForFile": 1,
          "actualSource": "Var expectUndeclaredVariable(String sourceName, CompilerInput input, Node n, Node parent, Var var, String variableName, JSType newType) {\n    Var newVar \u003d var;\n    boolean allowDupe \u003d false;\n    if (n.isGetProp() || NodeUtil.isObjectLitKey(n, parent)) {\n        JSDocInfo info \u003d n.getJSDocInfo();\n        if (info \u003d\u003d null) {\n            info \u003d parent.getJSDocInfo();\n        }\n        allowDupe \u003d info !\u003d null \u0026\u0026 info.getSuppressions().contains(\"duplicate\");\n    }\n    JSType varType \u003d var.getType();\n    if (varType !\u003d null \u0026\u0026 varType !\u003d typeRegistry.getNativeType(UNKNOWN_TYPE) \u0026\u0026 newType !\u003d null \u0026\u0026 newType !\u003d typeRegistry.getNativeType(UNKNOWN_TYPE)) {\n        if (var.input \u003d\u003d null) {\n            Scope s \u003d var.getScope();\n            s.undeclare(var);\n            newVar \u003d s.declare(variableName, n, varType, input, false);\n            n.setJSType(varType);\n            if (parent.isVar()) {\n                if (n.getFirstChild() !\u003d null) {\n                    n.getFirstChild().setJSType(varType);\n                }\n            } else {\n                Preconditions.checkState(parent.isFunction());\n                parent.setJSType(varType);\n            }\n        } else {\n            if (!(allowDupe || var.getParentNode().isExprResult()) || !newType.equals(varType)) {\n                report(JSError.make(sourceName, n, DUP_VAR_DECLARATION, variableName, newType.toString(), var.getInputName(), String.valueOf(var.nameNode.getLineno()), varType.toString()));\n            }\n        }\n    }\n    return newVar;\n}",
          "path": "src/com/google/javascript/jscomp/TypeValidator.java",
          "functionStartLine": 501,
          "functionName": "expectUndeclaredVariable",
          "functionAnnotation": "",
          "functionDoc": "Expect that the given variable has not been declared with a type.\n\n@param sourceName The name of the source file we\u0027re in.\n@param n The node where warnings should point to.\n@param parent The parent of {@code n}.\n@param var The variable that we\u0027re checking.\n@param variableName The name of the variable.\n@param newType The type being applied to the variable. Mostly just here\n    for the benefit of the warning.\n@return The variable we end up with. Most of the time, this will just\n    be {@code var}, but in some rare cases we will need to declare\n    a new var with new source info.\n",
          "diff": "@@ -1,31 +1,33 @@\n-void expectUndeclaredVariable(String sourceName, CompilerInput input, Node n, Node parent, Var var, String variableName, JSType newType) {\n+Var expectUndeclaredVariable(String sourceName, CompilerInput input, Node n, Node parent, Var var, String variableName, JSType newType) {\n+    Var newVar \u003d var;\n     boolean allowDupe \u003d false;\n     if (n.isGetProp() || NodeUtil.isObjectLitKey(n, parent)) {\n         JSDocInfo info \u003d n.getJSDocInfo();\n         if (info \u003d\u003d null) {\n             info \u003d parent.getJSDocInfo();\n         }\n         allowDupe \u003d info !\u003d null \u0026\u0026 info.getSuppressions().contains(\"duplicate\");\n     }\n     JSType varType \u003d var.getType();\n     if (varType !\u003d null \u0026\u0026 varType !\u003d typeRegistry.getNativeType(UNKNOWN_TYPE) \u0026\u0026 newType !\u003d null \u0026\u0026 newType !\u003d typeRegistry.getNativeType(UNKNOWN_TYPE)) {\n         if (var.input \u003d\u003d null) {\n             Scope s \u003d var.getScope();\n             s.undeclare(var);\n-            s.declare(variableName, n, varType, input, false);\n+            newVar \u003d s.declare(variableName, n, varType, input, false);\n             n.setJSType(varType);\n             if (parent.isVar()) {\n                 if (n.getFirstChild() !\u003d null) {\n                     n.getFirstChild().setJSType(varType);\n                 }\n             } else {\n                 Preconditions.checkState(parent.isFunction());\n                 parent.setJSType(varType);\n             }\n         } else {\n             if (!(allowDupe || var.getParentNode().isExprResult()) || !newType.equals(varType)) {\n                 report(JSError.make(sourceName, n, DUP_VAR_DECLARATION, variableName, newType.toString(), var.getInputName(), String.valueOf(var.nameNode.getLineno()), varType.toString()));\n             }\n         }\n     }\n+    return newVar;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Expect that the given variable has not been declared with a type.\n\n@param sourceName The name of the source file we\u0027re in.\n@param n The node where warnings should point to.\n@param parent The parent of {@code n}.\n@param var The variable that we\u0027re checking.\n@param variableName The name of the variable.\n@param newType The type being applied to the variable. Mostly just here\n    for the benefit of the warning.\n",
            "newValue": "Expect that the given variable has not been declared with a type.\n\n@param sourceName The name of the source file we\u0027re in.\n@param n The node where warnings should point to.\n@param parent The parent of {@code n}.\n@param var The variable that we\u0027re checking.\n@param variableName The name of the variable.\n@param newType The type being applied to the variable. Mostly just here\n    for the benefit of the warning.\n@return The variable we end up with. Most of the time, this will just\n    be {@code var}, but in some rare cases we will need to declare\n    a new var with new source info.\n"
          }
        }
      ]
    },
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c": {
      "type": "Ybodychange",
      "commitMessage": "\nReplace the bulk of the Node.getType() \u003d\u003d Token.XXX calls with\nNode.isXXX calls.\n\nR\u003dnicksantos\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3677\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1582 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/10/11, 8:36 AM",
      "commitName": "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "9/6/11, 11:52 AM",
      "commitNameOld": "6a2b233cac8fad95318405149b01d2c073509f62",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 64.91,
      "commitsBetweenForRepo": 157,
      "commitsBetweenForFile": 1,
      "actualSource": "void expectUndeclaredVariable(String sourceName, CompilerInput input, Node n, Node parent, Var var, String variableName, JSType newType) {\n    boolean allowDupe \u003d false;\n    if (n.isGetProp() || NodeUtil.isObjectLitKey(n, parent)) {\n        JSDocInfo info \u003d n.getJSDocInfo();\n        if (info \u003d\u003d null) {\n            info \u003d parent.getJSDocInfo();\n        }\n        allowDupe \u003d info !\u003d null \u0026\u0026 info.getSuppressions().contains(\"duplicate\");\n    }\n    JSType varType \u003d var.getType();\n    if (varType !\u003d null \u0026\u0026 varType !\u003d typeRegistry.getNativeType(UNKNOWN_TYPE) \u0026\u0026 newType !\u003d null \u0026\u0026 newType !\u003d typeRegistry.getNativeType(UNKNOWN_TYPE)) {\n        if (var.input \u003d\u003d null) {\n            Scope s \u003d var.getScope();\n            s.undeclare(var);\n            s.declare(variableName, n, varType, input, false);\n            n.setJSType(varType);\n            if (parent.isVar()) {\n                if (n.getFirstChild() !\u003d null) {\n                    n.getFirstChild().setJSType(varType);\n                }\n            } else {\n                Preconditions.checkState(parent.isFunction());\n                parent.setJSType(varType);\n            }\n        } else {\n            if (!(allowDupe || var.getParentNode().isExprResult()) || !newType.equals(varType)) {\n                report(JSError.make(sourceName, n, DUP_VAR_DECLARATION, variableName, newType.toString(), var.getInputName(), String.valueOf(var.nameNode.getLineno()), varType.toString()));\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeValidator.java",
      "functionStartLine": 498,
      "functionName": "expectUndeclaredVariable",
      "functionAnnotation": "",
      "functionDoc": "Expect that the given variable has not been declared with a type.\n\n@param sourceName The name of the source file we\u0027re in.\n@param n The node where warnings should point to.\n@param parent The parent of {@code n}.\n@param var The variable that we\u0027re checking.\n@param variableName The name of the variable.\n@param newType The type being applied to the variable. Mostly just here\n    for the benefit of the warning.\n",
      "diff": "@@ -1,31 +1,31 @@\n void expectUndeclaredVariable(String sourceName, CompilerInput input, Node n, Node parent, Var var, String variableName, JSType newType) {\n     boolean allowDupe \u003d false;\n-    if (n.getType() \u003d\u003d Token.GETPROP || NodeUtil.isObjectLitKey(n, parent)) {\n+    if (n.isGetProp() || NodeUtil.isObjectLitKey(n, parent)) {\n         JSDocInfo info \u003d n.getJSDocInfo();\n         if (info \u003d\u003d null) {\n             info \u003d parent.getJSDocInfo();\n         }\n         allowDupe \u003d info !\u003d null \u0026\u0026 info.getSuppressions().contains(\"duplicate\");\n     }\n     JSType varType \u003d var.getType();\n     if (varType !\u003d null \u0026\u0026 varType !\u003d typeRegistry.getNativeType(UNKNOWN_TYPE) \u0026\u0026 newType !\u003d null \u0026\u0026 newType !\u003d typeRegistry.getNativeType(UNKNOWN_TYPE)) {\n         if (var.input \u003d\u003d null) {\n             Scope s \u003d var.getScope();\n             s.undeclare(var);\n             s.declare(variableName, n, varType, input, false);\n             n.setJSType(varType);\n-            if (parent.getType() \u003d\u003d Token.VAR) {\n+            if (parent.isVar()) {\n                 if (n.getFirstChild() !\u003d null) {\n                     n.getFirstChild().setJSType(varType);\n                 }\n             } else {\n-                Preconditions.checkState(parent.getType() \u003d\u003d Token.FUNCTION);\n+                Preconditions.checkState(parent.isFunction());\n                 parent.setJSType(varType);\n             }\n         } else {\n-            if (!(allowDupe || var.getParentNode().getType() \u003d\u003d Token.EXPR_RESULT) || !newType.equals(varType)) {\n+            if (!(allowDupe || var.getParentNode().isExprResult()) || !newType.equals(varType)) {\n                 report(JSError.make(sourceName, n, DUP_VAR_DECLARATION, variableName, newType.toString(), var.getInputName(), String.valueOf(var.nameNode.getLineno()), varType.toString()));\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6a2b233cac8fad95318405149b01d2c073509f62": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "\nRedeclare native types in the externs. This ensures that source links\npoint to the right place\n\nR\u003dacleung\nDELTA\u003d22  (17 added, 1 deleted, 4 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3185\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1409 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/6/11, 11:52 AM",
      "commitName": "6a2b233cac8fad95318405149b01d2c073509f62",
      "commitAuthor": "nicksantos@google.com",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "\nRedeclare native types in the externs. This ensures that source links\npoint to the right place\n\nR\u003dacleung\nDELTA\u003d22  (17 added, 1 deleted, 4 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3185\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1409 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "9/6/11, 11:52 AM",
          "commitName": "6a2b233cac8fad95318405149b01d2c073509f62",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "9/2/11, 3:20 PM",
          "commitNameOld": "d4fd1cb4c14d66eb5dd3acad580f6c36f2f26c48",
          "commitAuthorOld": "henrywong@google.com",
          "daysBetweenCommits": 3.86,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "void expectUndeclaredVariable(String sourceName, CompilerInput input, Node n, Node parent, Var var, String variableName, JSType newType) {\n    boolean allowDupe \u003d false;\n    if (n.getType() \u003d\u003d Token.GETPROP || NodeUtil.isObjectLitKey(n, parent)) {\n        JSDocInfo info \u003d n.getJSDocInfo();\n        if (info \u003d\u003d null) {\n            info \u003d parent.getJSDocInfo();\n        }\n        allowDupe \u003d info !\u003d null \u0026\u0026 info.getSuppressions().contains(\"duplicate\");\n    }\n    JSType varType \u003d var.getType();\n    if (varType !\u003d null \u0026\u0026 varType !\u003d typeRegistry.getNativeType(UNKNOWN_TYPE) \u0026\u0026 newType !\u003d null \u0026\u0026 newType !\u003d typeRegistry.getNativeType(UNKNOWN_TYPE)) {\n        if (var.input \u003d\u003d null) {\n            Scope s \u003d var.getScope();\n            s.undeclare(var);\n            s.declare(variableName, n, varType, input, false);\n            n.setJSType(varType);\n            if (parent.getType() \u003d\u003d Token.VAR) {\n                if (n.getFirstChild() !\u003d null) {\n                    n.getFirstChild().setJSType(varType);\n                }\n            } else {\n                Preconditions.checkState(parent.getType() \u003d\u003d Token.FUNCTION);\n                parent.setJSType(varType);\n            }\n        } else {\n            if (!(allowDupe || var.getParentNode().getType() \u003d\u003d Token.EXPR_RESULT) || !newType.equals(varType)) {\n                report(JSError.make(sourceName, n, DUP_VAR_DECLARATION, variableName, newType.toString(), var.getInputName(), String.valueOf(var.nameNode.getLineno()), varType.toString()));\n            }\n        }\n    }\n}",
          "path": "src/com/google/javascript/jscomp/TypeValidator.java",
          "functionStartLine": 499,
          "functionName": "expectUndeclaredVariable",
          "functionAnnotation": "",
          "functionDoc": "Expect that the given variable has not been declared with a type.\n\n@param sourceName The name of the source file we\u0027re in.\n@param n The node where warnings should point to.\n@param parent The parent of {@code n}.\n@param var The variable that we\u0027re checking.\n@param variableName The name of the variable.\n@param newType The type being applied to the variable. Mostly just here\n    for the benefit of the warning.\n",
          "diff": "@@ -1,28 +1,31 @@\n-void expectUndeclaredVariable(String sourceName, Node n, Node parent, Var var, String variableName, JSType newType) {\n+void expectUndeclaredVariable(String sourceName, CompilerInput input, Node n, Node parent, Var var, String variableName, JSType newType) {\n     boolean allowDupe \u003d false;\n     if (n.getType() \u003d\u003d Token.GETPROP || NodeUtil.isObjectLitKey(n, parent)) {\n         JSDocInfo info \u003d n.getJSDocInfo();\n         if (info \u003d\u003d null) {\n             info \u003d parent.getJSDocInfo();\n         }\n         allowDupe \u003d info !\u003d null \u0026\u0026 info.getSuppressions().contains(\"duplicate\");\n     }\n     JSType varType \u003d var.getType();\n     if (varType !\u003d null \u0026\u0026 varType !\u003d typeRegistry.getNativeType(UNKNOWN_TYPE) \u0026\u0026 newType !\u003d null \u0026\u0026 newType !\u003d typeRegistry.getNativeType(UNKNOWN_TYPE)) {\n         if (var.input \u003d\u003d null) {\n+            Scope s \u003d var.getScope();\n+            s.undeclare(var);\n+            s.declare(variableName, n, varType, input, false);\n             n.setJSType(varType);\n             if (parent.getType() \u003d\u003d Token.VAR) {\n                 if (n.getFirstChild() !\u003d null) {\n                     n.getFirstChild().setJSType(varType);\n                 }\n             } else {\n                 Preconditions.checkState(parent.getType() \u003d\u003d Token.FUNCTION);\n                 parent.setJSType(varType);\n             }\n         } else {\n             if (!(allowDupe || var.getParentNode().getType() \u003d\u003d Token.EXPR_RESULT) || !newType.equals(varType)) {\n                 report(JSError.make(sourceName, n, DUP_VAR_DECLARATION, variableName, newType.toString(), var.getInputName(), String.valueOf(var.nameNode.getLineno()), varType.toString()));\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[sourceName-String, n-Node, parent-Node, var-Var, variableName-String, newType-JSType]",
            "newValue": "[sourceName-String, input-CompilerInput, n-Node, parent-Node, var-Var, variableName-String, newType-JSType]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nRedeclare native types in the externs. This ensures that source links\npoint to the right place\n\nR\u003dacleung\nDELTA\u003d22  (17 added, 1 deleted, 4 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3185\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1409 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "9/6/11, 11:52 AM",
          "commitName": "6a2b233cac8fad95318405149b01d2c073509f62",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "9/2/11, 3:20 PM",
          "commitNameOld": "d4fd1cb4c14d66eb5dd3acad580f6c36f2f26c48",
          "commitAuthorOld": "henrywong@google.com",
          "daysBetweenCommits": 3.86,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "void expectUndeclaredVariable(String sourceName, CompilerInput input, Node n, Node parent, Var var, String variableName, JSType newType) {\n    boolean allowDupe \u003d false;\n    if (n.getType() \u003d\u003d Token.GETPROP || NodeUtil.isObjectLitKey(n, parent)) {\n        JSDocInfo info \u003d n.getJSDocInfo();\n        if (info \u003d\u003d null) {\n            info \u003d parent.getJSDocInfo();\n        }\n        allowDupe \u003d info !\u003d null \u0026\u0026 info.getSuppressions().contains(\"duplicate\");\n    }\n    JSType varType \u003d var.getType();\n    if (varType !\u003d null \u0026\u0026 varType !\u003d typeRegistry.getNativeType(UNKNOWN_TYPE) \u0026\u0026 newType !\u003d null \u0026\u0026 newType !\u003d typeRegistry.getNativeType(UNKNOWN_TYPE)) {\n        if (var.input \u003d\u003d null) {\n            Scope s \u003d var.getScope();\n            s.undeclare(var);\n            s.declare(variableName, n, varType, input, false);\n            n.setJSType(varType);\n            if (parent.getType() \u003d\u003d Token.VAR) {\n                if (n.getFirstChild() !\u003d null) {\n                    n.getFirstChild().setJSType(varType);\n                }\n            } else {\n                Preconditions.checkState(parent.getType() \u003d\u003d Token.FUNCTION);\n                parent.setJSType(varType);\n            }\n        } else {\n            if (!(allowDupe || var.getParentNode().getType() \u003d\u003d Token.EXPR_RESULT) || !newType.equals(varType)) {\n                report(JSError.make(sourceName, n, DUP_VAR_DECLARATION, variableName, newType.toString(), var.getInputName(), String.valueOf(var.nameNode.getLineno()), varType.toString()));\n            }\n        }\n    }\n}",
          "path": "src/com/google/javascript/jscomp/TypeValidator.java",
          "functionStartLine": 499,
          "functionName": "expectUndeclaredVariable",
          "functionAnnotation": "",
          "functionDoc": "Expect that the given variable has not been declared with a type.\n\n@param sourceName The name of the source file we\u0027re in.\n@param n The node where warnings should point to.\n@param parent The parent of {@code n}.\n@param var The variable that we\u0027re checking.\n@param variableName The name of the variable.\n@param newType The type being applied to the variable. Mostly just here\n    for the benefit of the warning.\n",
          "diff": "@@ -1,28 +1,31 @@\n-void expectUndeclaredVariable(String sourceName, Node n, Node parent, Var var, String variableName, JSType newType) {\n+void expectUndeclaredVariable(String sourceName, CompilerInput input, Node n, Node parent, Var var, String variableName, JSType newType) {\n     boolean allowDupe \u003d false;\n     if (n.getType() \u003d\u003d Token.GETPROP || NodeUtil.isObjectLitKey(n, parent)) {\n         JSDocInfo info \u003d n.getJSDocInfo();\n         if (info \u003d\u003d null) {\n             info \u003d parent.getJSDocInfo();\n         }\n         allowDupe \u003d info !\u003d null \u0026\u0026 info.getSuppressions().contains(\"duplicate\");\n     }\n     JSType varType \u003d var.getType();\n     if (varType !\u003d null \u0026\u0026 varType !\u003d typeRegistry.getNativeType(UNKNOWN_TYPE) \u0026\u0026 newType !\u003d null \u0026\u0026 newType !\u003d typeRegistry.getNativeType(UNKNOWN_TYPE)) {\n         if (var.input \u003d\u003d null) {\n+            Scope s \u003d var.getScope();\n+            s.undeclare(var);\n+            s.declare(variableName, n, varType, input, false);\n             n.setJSType(varType);\n             if (parent.getType() \u003d\u003d Token.VAR) {\n                 if (n.getFirstChild() !\u003d null) {\n                     n.getFirstChild().setJSType(varType);\n                 }\n             } else {\n                 Preconditions.checkState(parent.getType() \u003d\u003d Token.FUNCTION);\n                 parent.setJSType(varType);\n             }\n         } else {\n             if (!(allowDupe || var.getParentNode().getType() \u003d\u003d Token.EXPR_RESULT) || !newType.equals(varType)) {\n                 report(JSError.make(sourceName, n, DUP_VAR_DECLARATION, variableName, newType.toString(), var.getInputName(), String.valueOf(var.nameNode.getLineno()), varType.toString()));\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "41ecd65c09b6d39253c4f855e615daabbc7e241a": {
      "type": "Ybodychange",
      "commitMessage": "\nBetter warnings for fixing DisambiguateProperties ignores.\n\nR\u003djohnlenz\nDELTA\u003d164  (92 added, 23 deleted, 49 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2860\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1316 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/2/11, 5:01 PM",
      "commitName": "41ecd65c09b6d39253c4f855e615daabbc7e241a",
      "commitAuthor": "acleung@google.com",
      "commitDateOld": "7/27/11, 9:33 AM",
      "commitNameOld": "749d75ccbf82ffee5c613dbed9f9782cd740a01f",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 6.31,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "actualSource": "void expectUndeclaredVariable(String sourceName, Node n, Node parent, Var var, String variableName, JSType newType) {\n    boolean allowDupe \u003d false;\n    if (n.getType() \u003d\u003d Token.GETPROP || NodeUtil.isObjectLitKey(n, parent)) {\n        JSDocInfo info \u003d n.getJSDocInfo();\n        if (info \u003d\u003d null) {\n            info \u003d parent.getJSDocInfo();\n        }\n        allowDupe \u003d info !\u003d null \u0026\u0026 info.getSuppressions().contains(\"duplicate\");\n    }\n    JSType varType \u003d var.getType();\n    if (varType !\u003d null \u0026\u0026 varType !\u003d typeRegistry.getNativeType(UNKNOWN_TYPE) \u0026\u0026 newType !\u003d null \u0026\u0026 newType !\u003d typeRegistry.getNativeType(UNKNOWN_TYPE)) {\n        if (var.input \u003d\u003d null) {\n            n.setJSType(varType);\n            if (parent.getType() \u003d\u003d Token.VAR) {\n                if (n.getFirstChild() !\u003d null) {\n                    n.getFirstChild().setJSType(varType);\n                }\n            } else {\n                Preconditions.checkState(parent.getType() \u003d\u003d Token.FUNCTION);\n                parent.setJSType(varType);\n            }\n        } else {\n            if (!(allowDupe || var.getParentNode().getType() \u003d\u003d Token.EXPR_RESULT) || !newType.equals(varType)) {\n                report(JSError.make(sourceName, n, DUP_VAR_DECLARATION, variableName, newType.toString(), var.getInputName(), String.valueOf(var.nameNode.getLineno()), varType.toString()));\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeValidator.java",
      "functionStartLine": 504,
      "functionName": "expectUndeclaredVariable",
      "functionAnnotation": "",
      "functionDoc": "Expect that the given variable has not been declared with a type.\n\n@param sourceName The name of the source file we\u0027re in.\n@param n The node where warnings should point to.\n@param parent The parent of {@code n}.\n@param var The variable that we\u0027re checking.\n@param variableName The name of the variable.\n@param newType The type being applied to the variable. Mostly just here\n    for the benefit of the warning.\n",
      "diff": "@@ -1,30 +1,28 @@\n void expectUndeclaredVariable(String sourceName, Node n, Node parent, Var var, String variableName, JSType newType) {\n     boolean allowDupe \u003d false;\n     if (n.getType() \u003d\u003d Token.GETPROP || NodeUtil.isObjectLitKey(n, parent)) {\n         JSDocInfo info \u003d n.getJSDocInfo();\n         if (info \u003d\u003d null) {\n             info \u003d parent.getJSDocInfo();\n         }\n         allowDupe \u003d info !\u003d null \u0026\u0026 info.getSuppressions().contains(\"duplicate\");\n     }\n     JSType varType \u003d var.getType();\n     if (varType !\u003d null \u0026\u0026 varType !\u003d typeRegistry.getNativeType(UNKNOWN_TYPE) \u0026\u0026 newType !\u003d null \u0026\u0026 newType !\u003d typeRegistry.getNativeType(UNKNOWN_TYPE)) {\n         if (var.input \u003d\u003d null) {\n             n.setJSType(varType);\n             if (parent.getType() \u003d\u003d Token.VAR) {\n                 if (n.getFirstChild() !\u003d null) {\n                     n.getFirstChild().setJSType(varType);\n                 }\n             } else {\n                 Preconditions.checkState(parent.getType() \u003d\u003d Token.FUNCTION);\n                 parent.setJSType(varType);\n             }\n         } else {\n             if (!(allowDupe || var.getParentNode().getType() \u003d\u003d Token.EXPR_RESULT) || !newType.equals(varType)) {\n-                if (shouldReport) {\n-                    compiler.report(JSError.make(sourceName, n, DUP_VAR_DECLARATION, variableName, newType.toString(), var.getInputName(), String.valueOf(var.nameNode.getLineno()), varType.toString()));\n-                }\n+                report(JSError.make(sourceName, n, DUP_VAR_DECLARATION, variableName, newType.toString(), var.getInputName(), String.valueOf(var.nameNode.getLineno()), varType.toString()));\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "8bf67e65c7ee2a202ac2dbf252727ae656642350": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2011-03-18 10:06:19-07:00 by nicksantos\n\n\tAllow suppression of duplicate property declarations when\n\tthe property is in an object literal\n\n\tR\u003djohnlenz\n\tDELTA\u003d48  (47 added, 0 deleted, 1 changed)\n\nChange on 2011-03-18 12:02:54-07:00 by nicksantos\n\n\tAllow the \"global this\" warning to be suppressed on a per-file basis\n\n\tR\u003djohnlenz\n\tDELTA\u003d82  (50 added, 22 deleted, 10 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d945\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@909 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/18/11, 5:25 PM",
      "commitName": "8bf67e65c7ee2a202ac2dbf252727ae656642350",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "2/28/11, 8:08 AM",
      "commitNameOld": "09ed556367fbe81b3003881dfacad643939664c0",
      "commitAuthorOld": "zhuyi@google.com",
      "daysBetweenCommits": 18.35,
      "commitsBetweenForRepo": 74,
      "commitsBetweenForFile": 1,
      "actualSource": "void expectUndeclaredVariable(String sourceName, Node n, Node parent, Var var, String variableName, JSType newType) {\n    boolean allowDupe \u003d false;\n    if (n.getType() \u003d\u003d Token.GETPROP || NodeUtil.isObjectLitKey(n, parent)) {\n        JSDocInfo info \u003d n.getJSDocInfo();\n        if (info \u003d\u003d null) {\n            info \u003d parent.getJSDocInfo();\n        }\n        allowDupe \u003d info !\u003d null \u0026\u0026 info.getSuppressions().contains(\"duplicate\");\n    }\n    JSType varType \u003d var.getType();\n    if (varType !\u003d null \u0026\u0026 varType !\u003d typeRegistry.getNativeType(UNKNOWN_TYPE) \u0026\u0026 newType !\u003d null \u0026\u0026 newType !\u003d typeRegistry.getNativeType(UNKNOWN_TYPE)) {\n        if (var.input \u003d\u003d null) {\n            n.setJSType(varType);\n            if (parent.getType() \u003d\u003d Token.VAR) {\n                if (n.getFirstChild() !\u003d null) {\n                    n.getFirstChild().setJSType(varType);\n                }\n            } else {\n                Preconditions.checkState(parent.getType() \u003d\u003d Token.FUNCTION);\n                parent.setJSType(varType);\n            }\n        } else {\n            if (!(allowDupe || var.getParentNode().getType() \u003d\u003d Token.EXPR_RESULT) || !newType.equals(varType)) {\n                if (shouldReport) {\n                    compiler.report(JSError.make(sourceName, n, DUP_VAR_DECLARATION, variableName, newType.toString(), var.getInputName(), String.valueOf(var.nameNode.getLineno()), varType.toString()));\n                }\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeValidator.java",
      "functionStartLine": 506,
      "functionName": "expectUndeclaredVariable",
      "functionAnnotation": "",
      "functionDoc": "Expect that the given variable has not been declared with a type.\n\n@param sourceName The name of the source file we\u0027re in.\n@param n The node where warnings should point to.\n@param parent The parent of {@code n}.\n@param var The variable that we\u0027re checking.\n@param variableName The name of the variable.\n@param newType The type being applied to the variable. Mostly just here\n    for the benefit of the warning.\n",
      "diff": "@@ -1,30 +1,30 @@\n void expectUndeclaredVariable(String sourceName, Node n, Node parent, Var var, String variableName, JSType newType) {\n     boolean allowDupe \u003d false;\n-    if (n.getType() \u003d\u003d Token.GETPROP) {\n+    if (n.getType() \u003d\u003d Token.GETPROP || NodeUtil.isObjectLitKey(n, parent)) {\n         JSDocInfo info \u003d n.getJSDocInfo();\n         if (info \u003d\u003d null) {\n             info \u003d parent.getJSDocInfo();\n         }\n         allowDupe \u003d info !\u003d null \u0026\u0026 info.getSuppressions().contains(\"duplicate\");\n     }\n     JSType varType \u003d var.getType();\n     if (varType !\u003d null \u0026\u0026 varType !\u003d typeRegistry.getNativeType(UNKNOWN_TYPE) \u0026\u0026 newType !\u003d null \u0026\u0026 newType !\u003d typeRegistry.getNativeType(UNKNOWN_TYPE)) {\n         if (var.input \u003d\u003d null) {\n             n.setJSType(varType);\n             if (parent.getType() \u003d\u003d Token.VAR) {\n                 if (n.getFirstChild() !\u003d null) {\n                     n.getFirstChild().setJSType(varType);\n                 }\n             } else {\n                 Preconditions.checkState(parent.getType() \u003d\u003d Token.FUNCTION);\n                 parent.setJSType(varType);\n             }\n         } else {\n             if (!(allowDupe || var.getParentNode().getType() \u003d\u003d Token.EXPR_RESULT) || !newType.equals(varType)) {\n                 if (shouldReport) {\n                     compiler.report(JSError.make(sourceName, n, DUP_VAR_DECLARATION, variableName, newType.toString(), var.getInputName(), String.valueOf(var.nameNode.getLineno()), varType.toString()));\n                 }\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0895c28861ee4a1969acc858f1a703ab11ddc64c": {
      "type": "Ybodychange",
      "commitMessage": "\n\nChange on 2010/06/16 by johnlenz\n\n        Remove unused member variable.\n\n        R\u003dacleung\n        DELTA\u003d17  (0 added, 12 deleted, 5 changed)\n\nChange on 2010/06/16 by acleung\n\n        Make @notypecheck behaves like it is doing typechecking except for reporting errors.\n\n        R\u003djohnlenz\n        DELTA\u003d144  (89 added, 17 deleted, 38 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d28012\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@245 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/17/10, 10:16 AM",
      "commitName": "0895c28861ee4a1969acc858f1a703ab11ddc64c",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "3/29/10, 7:04 AM",
      "commitNameOld": "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 80.13,
      "commitsBetweenForRepo": 71,
      "commitsBetweenForFile": 1,
      "actualSource": "void expectUndeclaredVariable(String sourceName, Node n, Node parent, Var var, String variableName, JSType newType) {\n    boolean allowDupe \u003d false;\n    if (n.getType() \u003d\u003d Token.GETPROP) {\n        JSDocInfo info \u003d n.getJSDocInfo();\n        if (info \u003d\u003d null) {\n            info \u003d parent.getJSDocInfo();\n        }\n        allowDupe \u003d info !\u003d null \u0026\u0026 info.getSuppressions().contains(\"duplicate\");\n    }\n    JSType varType \u003d var.getType();\n    if (varType !\u003d null \u0026\u0026 varType !\u003d typeRegistry.getNativeType(UNKNOWN_TYPE) \u0026\u0026 newType !\u003d null \u0026\u0026 newType !\u003d typeRegistry.getNativeType(UNKNOWN_TYPE)) {\n        if (var.input \u003d\u003d null) {\n            n.setJSType(varType);\n            if (parent.getType() \u003d\u003d Token.VAR) {\n                if (n.getFirstChild() !\u003d null) {\n                    n.getFirstChild().setJSType(varType);\n                }\n            } else {\n                Preconditions.checkState(parent.getType() \u003d\u003d Token.FUNCTION);\n                parent.setJSType(varType);\n            }\n        } else {\n            if (!(allowDupe || var.getParentNode().getType() \u003d\u003d Token.EXPR_RESULT) || !newType.equals(varType)) {\n                if (shouldReport) {\n                    compiler.report(JSError.make(sourceName, n, DUP_VAR_DECLARATION, variableName, newType.toString(), var.getInputName(), String.valueOf(var.nameNode.getLineno()), varType.toString()));\n                }\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeValidator.java",
      "functionStartLine": 463,
      "functionName": "expectUndeclaredVariable",
      "functionAnnotation": "",
      "functionDoc": "Expect that the given variable has not been declared with a type.\n\n@param sourceName The name of the source file we\u0027re in.\n@param n The node where warnings should point to.\n@param parent The parent of {@code n}.\n@param var The variable that we\u0027re checking.\n@param variableName The name of the variable.\n@param newType The type being applied to the variable. Mostly just here\n    for the benefit of the warning.\n",
      "diff": "@@ -1,28 +1,30 @@\n void expectUndeclaredVariable(String sourceName, Node n, Node parent, Var var, String variableName, JSType newType) {\n     boolean allowDupe \u003d false;\n     if (n.getType() \u003d\u003d Token.GETPROP) {\n         JSDocInfo info \u003d n.getJSDocInfo();\n         if (info \u003d\u003d null) {\n             info \u003d parent.getJSDocInfo();\n         }\n         allowDupe \u003d info !\u003d null \u0026\u0026 info.getSuppressions().contains(\"duplicate\");\n     }\n     JSType varType \u003d var.getType();\n     if (varType !\u003d null \u0026\u0026 varType !\u003d typeRegistry.getNativeType(UNKNOWN_TYPE) \u0026\u0026 newType !\u003d null \u0026\u0026 newType !\u003d typeRegistry.getNativeType(UNKNOWN_TYPE)) {\n         if (var.input \u003d\u003d null) {\n             n.setJSType(varType);\n             if (parent.getType() \u003d\u003d Token.VAR) {\n                 if (n.getFirstChild() !\u003d null) {\n                     n.getFirstChild().setJSType(varType);\n                 }\n             } else {\n                 Preconditions.checkState(parent.getType() \u003d\u003d Token.FUNCTION);\n                 parent.setJSType(varType);\n             }\n         } else {\n             if (!(allowDupe || var.getParentNode().getType() \u003d\u003d Token.EXPR_RESULT) || !newType.equals(varType)) {\n-                compiler.report(JSError.make(sourceName, n, DUP_VAR_DECLARATION, variableName, newType.toString(), var.getInputName(), String.valueOf(var.nameNode.getLineno()), varType.toString()));\n+                if (shouldReport) {\n+                    compiler.report(JSError.make(sourceName, n, DUP_VAR_DECLARATION, variableName, newType.toString(), var.getInputName(), String.valueOf(var.nameNode.getLineno()), varType.toString()));\n+                }\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,28 @@\n+void expectUndeclaredVariable(String sourceName, Node n, Node parent, Var var, String variableName, JSType newType) {\n+    boolean allowDupe \u003d false;\n+    if (n.getType() \u003d\u003d Token.GETPROP) {\n+        JSDocInfo info \u003d n.getJSDocInfo();\n+        if (info \u003d\u003d null) {\n+            info \u003d parent.getJSDocInfo();\n+        }\n+        allowDupe \u003d info !\u003d null \u0026\u0026 info.getSuppressions().contains(\"duplicate\");\n+    }\n+    JSType varType \u003d var.getType();\n+    if (varType !\u003d null \u0026\u0026 varType !\u003d typeRegistry.getNativeType(UNKNOWN_TYPE) \u0026\u0026 newType !\u003d null \u0026\u0026 newType !\u003d typeRegistry.getNativeType(UNKNOWN_TYPE)) {\n+        if (var.input \u003d\u003d null) {\n+            n.setJSType(varType);\n+            if (parent.getType() \u003d\u003d Token.VAR) {\n+                if (n.getFirstChild() !\u003d null) {\n+                    n.getFirstChild().setJSType(varType);\n+                }\n+            } else {\n+                Preconditions.checkState(parent.getType() \u003d\u003d Token.FUNCTION);\n+                parent.setJSType(varType);\n+            }\n+        } else {\n+            if (!(allowDupe || var.getParentNode().getType() \u003d\u003d Token.EXPR_RESULT) || !newType.equals(varType)) {\n+                compiler.report(JSError.make(sourceName, n, DUP_VAR_DECLARATION, variableName, newType.toString(), var.getInputName(), String.valueOf(var.nameNode.getLineno()), varType.toString()));\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "void expectUndeclaredVariable(String sourceName, Node n, Node parent, Var var, String variableName, JSType newType) {\n    boolean allowDupe \u003d false;\n    if (n.getType() \u003d\u003d Token.GETPROP) {\n        JSDocInfo info \u003d n.getJSDocInfo();\n        if (info \u003d\u003d null) {\n            info \u003d parent.getJSDocInfo();\n        }\n        allowDupe \u003d info !\u003d null \u0026\u0026 info.getSuppressions().contains(\"duplicate\");\n    }\n    JSType varType \u003d var.getType();\n    if (varType !\u003d null \u0026\u0026 varType !\u003d typeRegistry.getNativeType(UNKNOWN_TYPE) \u0026\u0026 newType !\u003d null \u0026\u0026 newType !\u003d typeRegistry.getNativeType(UNKNOWN_TYPE)) {\n        if (var.input \u003d\u003d null) {\n            n.setJSType(varType);\n            if (parent.getType() \u003d\u003d Token.VAR) {\n                if (n.getFirstChild() !\u003d null) {\n                    n.getFirstChild().setJSType(varType);\n                }\n            } else {\n                Preconditions.checkState(parent.getType() \u003d\u003d Token.FUNCTION);\n                parent.setJSType(varType);\n            }\n        } else {\n            if (!(allowDupe || var.getParentNode().getType() \u003d\u003d Token.EXPR_RESULT) || !newType.equals(varType)) {\n                compiler.report(JSError.make(sourceName, n, DUP_VAR_DECLARATION, variableName, newType.toString(), var.getInputName(), String.valueOf(var.nameNode.getLineno()), varType.toString()));\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeValidator.java",
      "functionStartLine": 445,
      "functionName": "expectUndeclaredVariable",
      "functionAnnotation": "",
      "functionDoc": "Expect that the given variable has not been declared with a type.\n\n@param sourceName The name of the source file we\u0027re in.\n@param n The node where warnings should point to.\n@param parent The parent of {@code n}.\n@param var The variable that we\u0027re checking.\n@param variableName The name of the variable.\n@param newType The type being applied to the variable. Mostly just here\n    for the benefit of the warning.\n"
    }
  }
}