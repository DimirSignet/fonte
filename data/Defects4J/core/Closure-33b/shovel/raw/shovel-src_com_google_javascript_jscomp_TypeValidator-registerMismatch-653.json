{
  "origin": "codeshovel",
  "repositoryName": "Closure-33b",
  "repositoryPath": "/tmp/Closure-33b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TypeValidator.java",
  "functionName": "registerMismatch",
  "functionId": "registerMismatch___found-JSType__required-JSType__error-JSError",
  "sourceFilePath": "src/com/google/javascript/jscomp/TypeValidator.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 653,
  "functionEndLine": 677,
  "numCommitsSeen": 57,
  "timeTaken": 1978,
  "changeHistory": [
    "bd9c7b620384fe5a98772729001ed56304459bc6",
    "01d1238a2a577d8988a72c29304a3283ca05a29a",
    "fc0798047ad3aac58a54ea65f9f1c8857745419f",
    "41ecd65c09b6d39253c4f855e615daabbc7e241a",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "bd9c7b620384fe5a98772729001ed56304459bc6": "Ybodychange",
    "01d1238a2a577d8988a72c29304a3283ca05a29a": "Ybodychange",
    "fc0798047ad3aac58a54ea65f9f1c8857745419f": "Ybodychange",
    "41ecd65c09b6d39253c4f855e615daabbc7e241a": "Ymultichange(Yparameterchange,Ybodychange)",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bd9c7b620384fe5a98772729001ed56304459bc6": {
      "type": "Ybodychange",
      "commitMessage": "\nAdd toMaybeFunctionType/toMaybeEnumElementType.\ntry #2. the bugs in jstestc were fixed. this cl is exactly\nthe same as the original\n\nR\u003djohnlenz\nDELTA\u003d317  (79 added, 47 deleted, 191 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3078\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1367 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/18/11, 3:46 PM",
      "commitName": "bd9c7b620384fe5a98772729001ed56304459bc6",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "8/18/11, 10:40 AM",
      "commitNameOld": "01d1238a2a577d8988a72c29304a3283ca05a29a",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.21,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private void registerMismatch(JSType found, JSType required, JSError error) {\n    found \u003d found.restrictByNotNullOrUndefined();\n    required \u003d required.restrictByNotNullOrUndefined();\n    if (found.canAssignTo(required) || required.canAssignTo(found)) {\n        return;\n    }\n    mismatches.add(new TypeMismatch(found, required, error));\n    if (found.isFunctionType() \u0026\u0026 required.isFunctionType()) {\n        FunctionType fnTypeA \u003d found.toMaybeFunctionType();\n        FunctionType fnTypeB \u003d required.toMaybeFunctionType();\n        Iterator\u003cNode\u003e paramItA \u003d fnTypeA.getParameters().iterator();\n        Iterator\u003cNode\u003e paramItB \u003d fnTypeB.getParameters().iterator();\n        while (paramItA.hasNext() \u0026\u0026 paramItB.hasNext()) {\n            registerIfMismatch(paramItA.next().getJSType(), paramItB.next().getJSType(), error);\n        }\n        registerIfMismatch(fnTypeA.getReturnType(), fnTypeB.getReturnType(), error);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeValidator.java",
      "functionStartLine": 627,
      "functionName": "registerMismatch",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,18 +1,18 @@\n private void registerMismatch(JSType found, JSType required, JSError error) {\n     found \u003d found.restrictByNotNullOrUndefined();\n     required \u003d required.restrictByNotNullOrUndefined();\n     if (found.canAssignTo(required) || required.canAssignTo(found)) {\n         return;\n     }\n     mismatches.add(new TypeMismatch(found, required, error));\n-    if (found instanceof FunctionType \u0026\u0026 required instanceof FunctionType) {\n-        FunctionType fnTypeA \u003d ((FunctionType) found);\n-        FunctionType fnTypeB \u003d ((FunctionType) required);\n+    if (found.isFunctionType() \u0026\u0026 required.isFunctionType()) {\n+        FunctionType fnTypeA \u003d found.toMaybeFunctionType();\n+        FunctionType fnTypeB \u003d required.toMaybeFunctionType();\n         Iterator\u003cNode\u003e paramItA \u003d fnTypeA.getParameters().iterator();\n         Iterator\u003cNode\u003e paramItB \u003d fnTypeB.getParameters().iterator();\n         while (paramItA.hasNext() \u0026\u0026 paramItB.hasNext()) {\n             registerIfMismatch(paramItA.next().getJSType(), paramItB.next().getJSType(), error);\n         }\n         registerIfMismatch(fnTypeA.getReturnType(), fnTypeB.getReturnType(), error);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "01d1238a2a577d8988a72c29304a3283ca05a29a": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nbroke some tests\n\n*** Original change description ***\n\nAdd toMaybeFunctionType/toMaybeEnumElementType.\nwow, nullability is annoying!\n\nDELTA\u003d318  (48 added, 79 deleted, 191 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3075\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1364 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/18/11, 10:40 AM",
      "commitName": "01d1238a2a577d8988a72c29304a3283ca05a29a",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "8/18/11, 9:38 AM",
      "commitNameOld": "fc0798047ad3aac58a54ea65f9f1c8857745419f",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void registerMismatch(JSType found, JSType required, JSError error) {\n    found \u003d found.restrictByNotNullOrUndefined();\n    required \u003d required.restrictByNotNullOrUndefined();\n    if (found.canAssignTo(required) || required.canAssignTo(found)) {\n        return;\n    }\n    mismatches.add(new TypeMismatch(found, required, error));\n    if (found instanceof FunctionType \u0026\u0026 required instanceof FunctionType) {\n        FunctionType fnTypeA \u003d ((FunctionType) found);\n        FunctionType fnTypeB \u003d ((FunctionType) required);\n        Iterator\u003cNode\u003e paramItA \u003d fnTypeA.getParameters().iterator();\n        Iterator\u003cNode\u003e paramItB \u003d fnTypeB.getParameters().iterator();\n        while (paramItA.hasNext() \u0026\u0026 paramItB.hasNext()) {\n            registerIfMismatch(paramItA.next().getJSType(), paramItB.next().getJSType(), error);\n        }\n        registerIfMismatch(fnTypeA.getReturnType(), fnTypeB.getReturnType(), error);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeValidator.java",
      "functionStartLine": 627,
      "functionName": "registerMismatch",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,18 +1,18 @@\n private void registerMismatch(JSType found, JSType required, JSError error) {\n     found \u003d found.restrictByNotNullOrUndefined();\n     required \u003d required.restrictByNotNullOrUndefined();\n     if (found.canAssignTo(required) || required.canAssignTo(found)) {\n         return;\n     }\n     mismatches.add(new TypeMismatch(found, required, error));\n-    if (found.isFunctionType() \u0026\u0026 required.isFunctionType()) {\n-        FunctionType fnTypeA \u003d found.toMaybeFunctionType();\n-        FunctionType fnTypeB \u003d required.toMaybeFunctionType();\n+    if (found instanceof FunctionType \u0026\u0026 required instanceof FunctionType) {\n+        FunctionType fnTypeA \u003d ((FunctionType) found);\n+        FunctionType fnTypeB \u003d ((FunctionType) required);\n         Iterator\u003cNode\u003e paramItA \u003d fnTypeA.getParameters().iterator();\n         Iterator\u003cNode\u003e paramItB \u003d fnTypeB.getParameters().iterator();\n         while (paramItA.hasNext() \u0026\u0026 paramItB.hasNext()) {\n             registerIfMismatch(paramItA.next().getJSType(), paramItB.next().getJSType(), error);\n         }\n         registerIfMismatch(fnTypeA.getReturnType(), fnTypeB.getReturnType(), error);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "fc0798047ad3aac58a54ea65f9f1c8857745419f": {
      "type": "Ybodychange",
      "commitMessage": "\nAdd toMaybeFunctionType/toMaybeEnumElementType.\nwow, nullability is annoying!\n\nR\u003djohnlenz\nDELTA\u003d318  (79 added, 48 deleted, 191 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3074\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1363 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/18/11, 9:38 AM",
      "commitName": "fc0798047ad3aac58a54ea65f9f1c8857745419f",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "8/17/11, 11:43 AM",
      "commitNameOld": "5ac633a4e4471847da5aa22bb1fcf28727eb7fe9",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.91,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void registerMismatch(JSType found, JSType required, JSError error) {\n    found \u003d found.restrictByNotNullOrUndefined();\n    required \u003d required.restrictByNotNullOrUndefined();\n    if (found.canAssignTo(required) || required.canAssignTo(found)) {\n        return;\n    }\n    mismatches.add(new TypeMismatch(found, required, error));\n    if (found.isFunctionType() \u0026\u0026 required.isFunctionType()) {\n        FunctionType fnTypeA \u003d found.toMaybeFunctionType();\n        FunctionType fnTypeB \u003d required.toMaybeFunctionType();\n        Iterator\u003cNode\u003e paramItA \u003d fnTypeA.getParameters().iterator();\n        Iterator\u003cNode\u003e paramItB \u003d fnTypeB.getParameters().iterator();\n        while (paramItA.hasNext() \u0026\u0026 paramItB.hasNext()) {\n            registerIfMismatch(paramItA.next().getJSType(), paramItB.next().getJSType(), error);\n        }\n        registerIfMismatch(fnTypeA.getReturnType(), fnTypeB.getReturnType(), error);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeValidator.java",
      "functionStartLine": 627,
      "functionName": "registerMismatch",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,18 +1,18 @@\n private void registerMismatch(JSType found, JSType required, JSError error) {\n     found \u003d found.restrictByNotNullOrUndefined();\n     required \u003d required.restrictByNotNullOrUndefined();\n     if (found.canAssignTo(required) || required.canAssignTo(found)) {\n         return;\n     }\n     mismatches.add(new TypeMismatch(found, required, error));\n-    if (found instanceof FunctionType \u0026\u0026 required instanceof FunctionType) {\n-        FunctionType fnTypeA \u003d ((FunctionType) found);\n-        FunctionType fnTypeB \u003d ((FunctionType) required);\n+    if (found.isFunctionType() \u0026\u0026 required.isFunctionType()) {\n+        FunctionType fnTypeA \u003d found.toMaybeFunctionType();\n+        FunctionType fnTypeB \u003d required.toMaybeFunctionType();\n         Iterator\u003cNode\u003e paramItA \u003d fnTypeA.getParameters().iterator();\n         Iterator\u003cNode\u003e paramItB \u003d fnTypeB.getParameters().iterator();\n         while (paramItA.hasNext() \u0026\u0026 paramItB.hasNext()) {\n             registerIfMismatch(paramItA.next().getJSType(), paramItB.next().getJSType(), error);\n         }\n         registerIfMismatch(fnTypeA.getReturnType(), fnTypeB.getReturnType(), error);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "41ecd65c09b6d39253c4f855e615daabbc7e241a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "\nBetter warnings for fixing DisambiguateProperties ignores.\n\nR\u003djohnlenz\nDELTA\u003d164  (92 added, 23 deleted, 49 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2860\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1316 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/2/11, 5:01 PM",
      "commitName": "41ecd65c09b6d39253c4f855e615daabbc7e241a",
      "commitAuthor": "acleung@google.com",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "\nBetter warnings for fixing DisambiguateProperties ignores.\n\nR\u003djohnlenz\nDELTA\u003d164  (92 added, 23 deleted, 49 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2860\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1316 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "8/2/11, 5:01 PM",
          "commitName": "41ecd65c09b6d39253c4f855e615daabbc7e241a",
          "commitAuthor": "acleung@google.com",
          "commitDateOld": "7/27/11, 9:33 AM",
          "commitNameOld": "749d75ccbf82ffee5c613dbed9f9782cd740a01f",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 6.31,
          "commitsBetweenForRepo": 18,
          "commitsBetweenForFile": 1,
          "actualSource": "private void registerMismatch(JSType found, JSType required, JSError error) {\n    found \u003d found.restrictByNotNullOrUndefined();\n    required \u003d required.restrictByNotNullOrUndefined();\n    if (found.canAssignTo(required) || required.canAssignTo(found)) {\n        return;\n    }\n    mismatches.add(new TypeMismatch(found, required, error));\n    if (found instanceof FunctionType \u0026\u0026 required instanceof FunctionType) {\n        FunctionType fnTypeA \u003d ((FunctionType) found);\n        FunctionType fnTypeB \u003d ((FunctionType) required);\n        Iterator\u003cNode\u003e paramItA \u003d fnTypeA.getParameters().iterator();\n        Iterator\u003cNode\u003e paramItB \u003d fnTypeB.getParameters().iterator();\n        while (paramItA.hasNext() \u0026\u0026 paramItB.hasNext()) {\n            registerIfMismatch(paramItA.next().getJSType(), paramItB.next().getJSType(), error);\n        }\n        registerIfMismatch(fnTypeA.getReturnType(), fnTypeB.getReturnType(), error);\n    }\n}",
          "path": "src/com/google/javascript/jscomp/TypeValidator.java",
          "functionStartLine": 628,
          "functionName": "registerMismatch",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,18 +1,18 @@\n-private void registerMismatch(JSType found, JSType required) {\n+private void registerMismatch(JSType found, JSType required, JSError error) {\n     found \u003d found.restrictByNotNullOrUndefined();\n     required \u003d required.restrictByNotNullOrUndefined();\n     if (found.canAssignTo(required) || required.canAssignTo(found)) {\n         return;\n     }\n-    mismatches.add(new TypeMismatch(found, required));\n+    mismatches.add(new TypeMismatch(found, required, error));\n     if (found instanceof FunctionType \u0026\u0026 required instanceof FunctionType) {\n         FunctionType fnTypeA \u003d ((FunctionType) found);\n         FunctionType fnTypeB \u003d ((FunctionType) required);\n         Iterator\u003cNode\u003e paramItA \u003d fnTypeA.getParameters().iterator();\n         Iterator\u003cNode\u003e paramItB \u003d fnTypeB.getParameters().iterator();\n         while (paramItA.hasNext() \u0026\u0026 paramItB.hasNext()) {\n-            registerIfMismatch(paramItA.next().getJSType(), paramItB.next().getJSType());\n+            registerIfMismatch(paramItA.next().getJSType(), paramItB.next().getJSType(), error);\n         }\n-        registerIfMismatch(fnTypeA.getReturnType(), fnTypeB.getReturnType());\n+        registerIfMismatch(fnTypeA.getReturnType(), fnTypeB.getReturnType(), error);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[found-JSType, required-JSType]",
            "newValue": "[found-JSType, required-JSType, error-JSError]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nBetter warnings for fixing DisambiguateProperties ignores.\n\nR\u003djohnlenz\nDELTA\u003d164  (92 added, 23 deleted, 49 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2860\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1316 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "8/2/11, 5:01 PM",
          "commitName": "41ecd65c09b6d39253c4f855e615daabbc7e241a",
          "commitAuthor": "acleung@google.com",
          "commitDateOld": "7/27/11, 9:33 AM",
          "commitNameOld": "749d75ccbf82ffee5c613dbed9f9782cd740a01f",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 6.31,
          "commitsBetweenForRepo": 18,
          "commitsBetweenForFile": 1,
          "actualSource": "private void registerMismatch(JSType found, JSType required, JSError error) {\n    found \u003d found.restrictByNotNullOrUndefined();\n    required \u003d required.restrictByNotNullOrUndefined();\n    if (found.canAssignTo(required) || required.canAssignTo(found)) {\n        return;\n    }\n    mismatches.add(new TypeMismatch(found, required, error));\n    if (found instanceof FunctionType \u0026\u0026 required instanceof FunctionType) {\n        FunctionType fnTypeA \u003d ((FunctionType) found);\n        FunctionType fnTypeB \u003d ((FunctionType) required);\n        Iterator\u003cNode\u003e paramItA \u003d fnTypeA.getParameters().iterator();\n        Iterator\u003cNode\u003e paramItB \u003d fnTypeB.getParameters().iterator();\n        while (paramItA.hasNext() \u0026\u0026 paramItB.hasNext()) {\n            registerIfMismatch(paramItA.next().getJSType(), paramItB.next().getJSType(), error);\n        }\n        registerIfMismatch(fnTypeA.getReturnType(), fnTypeB.getReturnType(), error);\n    }\n}",
          "path": "src/com/google/javascript/jscomp/TypeValidator.java",
          "functionStartLine": 628,
          "functionName": "registerMismatch",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,18 +1,18 @@\n-private void registerMismatch(JSType found, JSType required) {\n+private void registerMismatch(JSType found, JSType required, JSError error) {\n     found \u003d found.restrictByNotNullOrUndefined();\n     required \u003d required.restrictByNotNullOrUndefined();\n     if (found.canAssignTo(required) || required.canAssignTo(found)) {\n         return;\n     }\n-    mismatches.add(new TypeMismatch(found, required));\n+    mismatches.add(new TypeMismatch(found, required, error));\n     if (found instanceof FunctionType \u0026\u0026 required instanceof FunctionType) {\n         FunctionType fnTypeA \u003d ((FunctionType) found);\n         FunctionType fnTypeB \u003d ((FunctionType) required);\n         Iterator\u003cNode\u003e paramItA \u003d fnTypeA.getParameters().iterator();\n         Iterator\u003cNode\u003e paramItB \u003d fnTypeB.getParameters().iterator();\n         while (paramItA.hasNext() \u0026\u0026 paramItB.hasNext()) {\n-            registerIfMismatch(paramItA.next().getJSType(), paramItB.next().getJSType());\n+            registerIfMismatch(paramItA.next().getJSType(), paramItB.next().getJSType(), error);\n         }\n-        registerIfMismatch(fnTypeA.getReturnType(), fnTypeB.getReturnType());\n+        registerIfMismatch(fnTypeA.getReturnType(), fnTypeB.getReturnType(), error);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,18 @@\n+private void registerMismatch(JSType found, JSType required) {\n+    found \u003d found.restrictByNotNullOrUndefined();\n+    required \u003d required.restrictByNotNullOrUndefined();\n+    if (found.canAssignTo(required) || required.canAssignTo(found)) {\n+        return;\n+    }\n+    mismatches.add(new TypeMismatch(found, required));\n+    if (found instanceof FunctionType \u0026\u0026 required instanceof FunctionType) {\n+        FunctionType fnTypeA \u003d ((FunctionType) found);\n+        FunctionType fnTypeB \u003d ((FunctionType) required);\n+        Iterator\u003cNode\u003e paramItA \u003d fnTypeA.getParameters().iterator();\n+        Iterator\u003cNode\u003e paramItB \u003d fnTypeB.getParameters().iterator();\n+        while (paramItA.hasNext() \u0026\u0026 paramItB.hasNext()) {\n+            registerIfMismatch(paramItA.next().getJSType(), paramItB.next().getJSType());\n+        }\n+        registerIfMismatch(fnTypeA.getReturnType(), fnTypeB.getReturnType());\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void registerMismatch(JSType found, JSType required) {\n    found \u003d found.restrictByNotNullOrUndefined();\n    required \u003d required.restrictByNotNullOrUndefined();\n    if (found.canAssignTo(required) || required.canAssignTo(found)) {\n        return;\n    }\n    mismatches.add(new TypeMismatch(found, required));\n    if (found instanceof FunctionType \u0026\u0026 required instanceof FunctionType) {\n        FunctionType fnTypeA \u003d ((FunctionType) found);\n        FunctionType fnTypeB \u003d ((FunctionType) required);\n        Iterator\u003cNode\u003e paramItA \u003d fnTypeA.getParameters().iterator();\n        Iterator\u003cNode\u003e paramItB \u003d fnTypeB.getParameters().iterator();\n        while (paramItA.hasNext() \u0026\u0026 paramItB.hasNext()) {\n            registerIfMismatch(paramItA.next().getJSType(), paramItB.next().getJSType());\n        }\n        registerIfMismatch(fnTypeA.getReturnType(), fnTypeB.getReturnType());\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeValidator.java",
      "functionStartLine": 547,
      "functionName": "registerMismatch",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}