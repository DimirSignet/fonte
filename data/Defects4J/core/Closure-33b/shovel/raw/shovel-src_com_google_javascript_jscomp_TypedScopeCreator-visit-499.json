{
  "origin": "codeshovel",
  "repositoryName": "Closure-33b",
  "repositoryPath": "/tmp/Closure-33b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TypedScopeCreator.java",
  "functionName": "visit",
  "functionId": "$visit___t-NodeTraversal__n-Node__parent-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 499,
  "functionEndLine": 555,
  "numCommitsSeen": 90,
  "timeTaken": 7116,
  "changeHistory": [
    "8f01ae1412b9da415ddbeb25c9da4f4a19cb06aa",
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
    "dff730a3759cad9c491f72d9905eee93962d3d35",
    "bf8fc4533884f914182f861576808e71c18410cc",
    "07dd3707c1a61ff21de3f7a7f15585bbb5f70573",
    "41abf3b75893403d9e21c33d06e8dc233b5cf657",
    "b7b201a08e330c9638f52f5dfe824e426a34f2c5",
    "e8eafe7acfd53e5385e4f31692c4db67c3777185",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "8f01ae1412b9da415ddbeb25c9da4f4a19cb06aa": "Ybodychange",
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c": "Ybodychange",
    "dff730a3759cad9c491f72d9905eee93962d3d35": "Ymultichange(Ybodychange,Ydocchange)",
    "bf8fc4533884f914182f861576808e71c18410cc": "Ybodychange",
    "07dd3707c1a61ff21de3f7a7f15585bbb5f70573": "Ybodychange",
    "41abf3b75893403d9e21c33d06e8dc233b5cf657": "Ybodychange",
    "b7b201a08e330c9638f52f5dfe824e426a34f2c5": "Ybodychange",
    "e8eafe7acfd53e5385e4f31692c4db67c3777185": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8f01ae1412b9da415ddbeb25c9da4f4a19cb06aa": {
      "type": "Ybodychange",
      "commitMessage": "\nHandle another special case in the\n\"is this function inferred or declared?\"\ndecision tree.\n\nR\u003dacleung\nDELTA\u003d67  (63 added, 0 deleted, 4 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d4439\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1852 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/28/12, 12:21 PM",
      "commitName": "8f01ae1412b9da415ddbeb25c9da4f4a19cb06aa",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "1/17/12, 8:37 AM",
      "commitNameOld": "f636f23bdef4b27752ca249a28463ec1b6af1f0b",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 71.11,
      "commitsBetweenForRepo": 100,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (t.inGlobalScope()) {\n        return;\n    }\n    if (n.isReturn() \u0026\u0026 n.getFirstChild() !\u003d null) {\n        data.get(t.getScopeRoot()).recordNonEmptyReturn();\n    }\n    if (t.getScopeDepth() \u003c\u003d 2) {\n        return;\n    }\n    if (n.isName() \u0026\u0026 NodeUtil.isLValue(n)) {\n        String name \u003d n.getString();\n        Scope scope \u003d t.getScope();\n        Var var \u003d scope.getVar(name);\n        if (var !\u003d null) {\n            Scope ownerScope \u003d var.getScope();\n            if (scope !\u003d ownerScope \u0026\u0026 ownerScope.isLocal()) {\n                data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n            }\n        }\n    } else if (n.isGetProp() \u0026\u0026 n.isUnscopedQualifiedName() \u0026\u0026 NodeUtil.isLValue(n)) {\n        String name \u003d NodeUtil.getRootOfQualifiedName(n).getString();\n        Scope scope \u003d t.getScope();\n        Var var \u003d scope.getVar(name);\n        if (var !\u003d null) {\n            Scope ownerScope \u003d var.getScope();\n            if (scope !\u003d ownerScope \u0026\u0026 ownerScope.isLocal()) {\n                data.get(ownerScope.getRootNode()).recordEscapedQualifiedName(n.getQualifiedName());\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 1947,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,19 +1,33 @@\n @Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     if (t.inGlobalScope()) {\n         return;\n     }\n     if (n.isReturn() \u0026\u0026 n.getFirstChild() !\u003d null) {\n         data.get(t.getScopeRoot()).recordNonEmptyReturn();\n-    } else if (n.isName() \u0026\u0026 NodeUtil.isLValue(n)) {\n+    }\n+    if (t.getScopeDepth() \u003c\u003d 2) {\n+        return;\n+    }\n+    if (n.isName() \u0026\u0026 NodeUtil.isLValue(n)) {\n         String name \u003d n.getString();\n         Scope scope \u003d t.getScope();\n         Var var \u003d scope.getVar(name);\n         if (var !\u003d null) {\n             Scope ownerScope \u003d var.getScope();\n             if (scope !\u003d ownerScope \u0026\u0026 ownerScope.isLocal()) {\n                 data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n             }\n         }\n+    } else if (n.isGetProp() \u0026\u0026 n.isUnscopedQualifiedName() \u0026\u0026 NodeUtil.isLValue(n)) {\n+        String name \u003d NodeUtil.getRootOfQualifiedName(n).getString();\n+        Scope scope \u003d t.getScope();\n+        Var var \u003d scope.getVar(name);\n+        if (var !\u003d null) {\n+            Scope ownerScope \u003d var.getScope();\n+            if (scope !\u003d ownerScope \u0026\u0026 ownerScope.isLocal()) {\n+                data.get(ownerScope.getRootNode()).recordEscapedQualifiedName(n.getQualifiedName());\n+            }\n+        }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c": {
      "type": "Ybodychange",
      "commitMessage": "\nReplace the bulk of the Node.getType() \u003d\u003d Token.XXX calls with\nNode.isXXX calls.\n\nR\u003dnicksantos\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3677\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1582 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/10/11, 8:36 AM",
      "commitName": "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/9/11, 2:45 PM",
      "commitNameOld": "103bd46736cbbbabe6ad27ab11da10d6dbb1a8e5",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (t.inGlobalScope()) {\n        return;\n    }\n    if (n.isReturn() \u0026\u0026 n.getFirstChild() !\u003d null) {\n        data.get(t.getScopeRoot()).recordNonEmptyReturn();\n    } else if (n.isName() \u0026\u0026 NodeUtil.isLValue(n)) {\n        String name \u003d n.getString();\n        Scope scope \u003d t.getScope();\n        Var var \u003d scope.getVar(name);\n        if (var !\u003d null) {\n            Scope ownerScope \u003d var.getScope();\n            if (scope !\u003d ownerScope \u0026\u0026 ownerScope.isLocal()) {\n                data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 1854,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,19 +1,19 @@\n @Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     if (t.inGlobalScope()) {\n         return;\n     }\n-    if (n.getType() \u003d\u003d Token.RETURN \u0026\u0026 n.getFirstChild() !\u003d null) {\n+    if (n.isReturn() \u0026\u0026 n.getFirstChild() !\u003d null) {\n         data.get(t.getScopeRoot()).recordNonEmptyReturn();\n-    } else if (n.getType() \u003d\u003d Token.NAME \u0026\u0026 NodeUtil.isLValue(n)) {\n+    } else if (n.isName() \u0026\u0026 NodeUtil.isLValue(n)) {\n         String name \u003d n.getString();\n         Scope scope \u003d t.getScope();\n         Var var \u003d scope.getVar(name);\n         if (var !\u003d null) {\n             Scope ownerScope \u003d var.getScope();\n             if (scope !\u003d ownerScope \u0026\u0026 ownerScope.isLocal()) {\n                 data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "dff730a3759cad9c491f72d9905eee93962d3d35": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "\nBreak out basic function analysis into a separate pass, rather\nthan trying to do it as we go.\nThere should be no functional change, but this should make it\na lot easier to move things around in the future.\n\nR\u003dacleung\nDELTA\u003d332  (224 added, 89 deleted, 19 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3318\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1460 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/21/11, 5:18 PM",
      "commitName": "dff730a3759cad9c491f72d9905eee93962d3d35",
      "commitAuthor": "nicksantos@google.com",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "\nBreak out basic function analysis into a separate pass, rather\nthan trying to do it as we go.\nThere should be no functional change, but this should make it\na lot easier to move things around in the future.\n\nR\u003dacleung\nDELTA\u003d332  (224 added, 89 deleted, 19 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3318\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1460 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "9/21/11, 5:18 PM",
          "commitName": "dff730a3759cad9c491f72d9905eee93962d3d35",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "9/14/11, 2:04 PM",
          "commitNameOld": "87a4a3c27a5e60e95df3ec398272d499d9915b56",
          "commitAuthorOld": "tylerg@google.com",
          "daysBetweenCommits": 7.13,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (t.inGlobalScope()) {\n        return;\n    }\n    if (n.getType() \u003d\u003d Token.RETURN \u0026\u0026 n.getFirstChild() !\u003d null) {\n        data.get(t.getScopeRoot()).recordNonEmptyReturn();\n    } else if (n.getType() \u003d\u003d Token.NAME \u0026\u0026 NodeUtil.isLValue(n)) {\n        String name \u003d n.getString();\n        Scope scope \u003d t.getScope();\n        Var var \u003d scope.getVar(name);\n        if (var !\u003d null) {\n            Scope ownerScope \u003d var.getScope();\n            if (scope !\u003d ownerScope \u0026\u0026 ownerScope.isLocal()) {\n                data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n            }\n        }\n    }\n}",
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
          "functionStartLine": 1847,
          "functionName": "visit",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,10 +1,19 @@\n @Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n-    if (n \u003d\u003d scope.getRootNode())\n-        return;\n-    if (n.getType() \u003d\u003d Token.LP \u0026\u0026 parent \u003d\u003d scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n+    if (t.inGlobalScope()) {\n         return;\n     }\n-    super.visit(t, n, parent);\n+    if (n.getType() \u003d\u003d Token.RETURN \u0026\u0026 n.getFirstChild() !\u003d null) {\n+        data.get(t.getScopeRoot()).recordNonEmptyReturn();\n+    } else if (n.getType() \u003d\u003d Token.NAME \u0026\u0026 NodeUtil.isLValue(n)) {\n+        String name \u003d n.getString();\n+        Scope scope \u003d t.getScope();\n+        Var var \u003d scope.getVar(name);\n+        if (var !\u003d null) {\n+            Scope ownerScope \u003d var.getScope();\n+            if (scope !\u003d ownerScope \u0026\u0026 ownerScope.isLocal()) {\n+                data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n+            }\n+        }\n+    }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "\nBreak out basic function analysis into a separate pass, rather\nthan trying to do it as we go.\nThere should be no functional change, but this should make it\na lot easier to move things around in the future.\n\nR\u003dacleung\nDELTA\u003d332  (224 added, 89 deleted, 19 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3318\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1460 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "9/21/11, 5:18 PM",
          "commitName": "dff730a3759cad9c491f72d9905eee93962d3d35",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "9/14/11, 2:04 PM",
          "commitNameOld": "87a4a3c27a5e60e95df3ec398272d499d9915b56",
          "commitAuthorOld": "tylerg@google.com",
          "daysBetweenCommits": 7.13,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (t.inGlobalScope()) {\n        return;\n    }\n    if (n.getType() \u003d\u003d Token.RETURN \u0026\u0026 n.getFirstChild() !\u003d null) {\n        data.get(t.getScopeRoot()).recordNonEmptyReturn();\n    } else if (n.getType() \u003d\u003d Token.NAME \u0026\u0026 NodeUtil.isLValue(n)) {\n        String name \u003d n.getString();\n        Scope scope \u003d t.getScope();\n        Var var \u003d scope.getVar(name);\n        if (var !\u003d null) {\n            Scope ownerScope \u003d var.getScope();\n            if (scope !\u003d ownerScope \u0026\u0026 ownerScope.isLocal()) {\n                data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n            }\n        }\n    }\n}",
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
          "functionStartLine": 1847,
          "functionName": "visit",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,10 +1,19 @@\n @Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n-    if (n \u003d\u003d scope.getRootNode())\n-        return;\n-    if (n.getType() \u003d\u003d Token.LP \u0026\u0026 parent \u003d\u003d scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n+    if (t.inGlobalScope()) {\n         return;\n     }\n-    super.visit(t, n, parent);\n+    if (n.getType() \u003d\u003d Token.RETURN \u0026\u0026 n.getFirstChild() !\u003d null) {\n+        data.get(t.getScopeRoot()).recordNonEmptyReturn();\n+    } else if (n.getType() \u003d\u003d Token.NAME \u0026\u0026 NodeUtil.isLValue(n)) {\n+        String name \u003d n.getString();\n+        Scope scope \u003d t.getScope();\n+        Var var \u003d scope.getVar(name);\n+        if (var !\u003d null) {\n+            Scope ownerScope \u003d var.getScope();\n+            if (scope !\u003d ownerScope \u0026\u0026 ownerScope.isLocal()) {\n+                data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n+            }\n+        }\n+    }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Visit a node in a local scope, and add any local variables or catch\nparameters into the local symbol table.\n\n@param t The node traversal.\n@param n The node being visited.\n@param parent The parent of n\n",
            "newValue": ""
          }
        }
      ]
    },
    "bf8fc4533884f914182f861576808e71c18410cc": {
      "type": "Ybodychange",
      "commitMessage": "\nUnify global scope building and local scope building.\nThis goes a long way towards fixing issue 61.\nTry #2\n\nR\u003djohnlenz\nDELTA\u003d492  (242 added, 203 deleted, 47 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d215716\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@424 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/13/10, 5:41 PM",
      "commitName": "bf8fc4533884f914182f861576808e71c18410cc",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "9/13/10, 1:29 PM",
      "commitNameOld": "07dd3707c1a61ff21de3f7a7f15585bbb5f70573",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.17,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n \u003d\u003d scope.getRootNode())\n        return;\n    if (n.getType() \u003d\u003d Token.LP \u0026\u0026 parent \u003d\u003d scope.getRootNode()) {\n        handleFunctionInputs(parent);\n        return;\n    }\n    super.visit(t, n, parent);\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 1443,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "Visit a node in a local scope, and add any local variables or catch\nparameters into the local symbol table.\n\n@param t The node traversal.\n@param n The node being visited.\n@param parent The parent of n\n",
      "diff": "@@ -1,24 +1,10 @@\n @Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n \u003d\u003d scope.getRootNode())\n         return;\n     if (n.getType() \u003d\u003d Token.LP \u0026\u0026 parent \u003d\u003d scope.getRootNode()) {\n         handleFunctionInputs(parent);\n         return;\n     }\n-    attachLiteralTypes(n);\n-    switch(n.getType()) {\n-        case Token.FUNCTION:\n-            if (parent.getType() \u003d\u003d Token.NAME) {\n-                return;\n-            }\n-            defineDeclaredFunction(n, parent);\n-            break;\n-        case Token.CATCH:\n-            defineCatch(n, parent);\n-            break;\n-        case Token.VAR:\n-            defineVar(n, parent);\n-            break;\n-    }\n+    super.visit(t, n, parent);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "07dd3707c1a61ff21de3f7a7f15585bbb5f70573": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nmay be causing gmail issue, but not sure. rolling back to be safe.\n\n*** Original change description ***\n\nUnify global scope building and local scope building.\nThis goes a long way towards fixing issue 61\n\nDELTA\u003d507  (218 added, 257 deleted, 32 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d214753\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@423 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/13/10, 1:29 PM",
      "commitName": "07dd3707c1a61ff21de3f7a7f15585bbb5f70573",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "9/13/10, 12:20 PM",
      "commitNameOld": "41abf3b75893403d9e21c33d06e8dc233b5cf657",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.05,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n \u003d\u003d scope.getRootNode())\n        return;\n    if (n.getType() \u003d\u003d Token.LP \u0026\u0026 parent \u003d\u003d scope.getRootNode()) {\n        handleFunctionInputs(parent);\n        return;\n    }\n    attachLiteralTypes(n);\n    switch(n.getType()) {\n        case Token.FUNCTION:\n            if (parent.getType() \u003d\u003d Token.NAME) {\n                return;\n            }\n            defineDeclaredFunction(n, parent);\n            break;\n        case Token.CATCH:\n            defineCatch(n, parent);\n            break;\n        case Token.VAR:\n            defineVar(n, parent);\n            break;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 1420,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "Visit a node in a local scope, and add any local variables or catch\nparameters into the local symbol table.\n\n@param t The node traversal.\n@param n The node being visited.\n@param parent The parent of n\n",
      "diff": "@@ -1,10 +1,24 @@\n @Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n \u003d\u003d scope.getRootNode())\n         return;\n     if (n.getType() \u003d\u003d Token.LP \u0026\u0026 parent \u003d\u003d scope.getRootNode()) {\n         handleFunctionInputs(parent);\n         return;\n     }\n-    super.visit(t, n, parent);\n+    attachLiteralTypes(n);\n+    switch(n.getType()) {\n+        case Token.FUNCTION:\n+            if (parent.getType() \u003d\u003d Token.NAME) {\n+                return;\n+            }\n+            defineDeclaredFunction(n, parent);\n+            break;\n+        case Token.CATCH:\n+            defineCatch(n, parent);\n+            break;\n+        case Token.VAR:\n+            defineVar(n, parent);\n+            break;\n+    }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "41abf3b75893403d9e21c33d06e8dc233b5cf657": {
      "type": "Ybodychange",
      "commitMessage": "\nUnify global scope building and local scope building.\nThis goes a long way towards fixing issue 61\n\nR\u003djohnlenz\nDELTA\u003d492  (242 added, 203 deleted, 47 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d215715\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@422 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/13/10, 12:20 PM",
      "commitName": "41abf3b75893403d9e21c33d06e8dc233b5cf657",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "9/13/10, 7:29 AM",
      "commitNameOld": "0a40e6661cd197e1cd0d3a3bccaa4c5313df8514",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.2,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n \u003d\u003d scope.getRootNode())\n        return;\n    if (n.getType() \u003d\u003d Token.LP \u0026\u0026 parent \u003d\u003d scope.getRootNode()) {\n        handleFunctionInputs(parent);\n        return;\n    }\n    super.visit(t, n, parent);\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 1443,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "Visit a node in a local scope, and add any local variables or catch\nparameters into the local symbol table.\n\n@param t The node traversal.\n@param n The node being visited.\n@param parent The parent of n\n",
      "diff": "@@ -1,24 +1,10 @@\n @Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n \u003d\u003d scope.getRootNode())\n         return;\n     if (n.getType() \u003d\u003d Token.LP \u0026\u0026 parent \u003d\u003d scope.getRootNode()) {\n         handleFunctionInputs(parent);\n         return;\n     }\n-    attachLiteralTypes(n);\n-    switch(n.getType()) {\n-        case Token.FUNCTION:\n-            if (parent.getType() \u003d\u003d Token.NAME) {\n-                return;\n-            }\n-            defineDeclaredFunction(n, parent);\n-            break;\n-        case Token.CATCH:\n-            defineCatch(n, parent);\n-            break;\n-        case Token.VAR:\n-            defineVar(n, parent);\n-            break;\n-    }\n+    super.visit(t, n, parent);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b7b201a08e330c9638f52f5dfe824e426a34f2c5": {
      "type": "Ybodychange",
      "commitMessage": "\nAttach types to literals at scope-creation time instead of at\ninference time.\nScope-creation already attaches types to function literals at\nscope-creation type, so this makes the other literals more consistent\nwith function literals.\n\nR\u003djohnlenz\nDELTA\u003d167  (102 added, 53 deleted, 12 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d209649\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@411 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/8/10, 12:26 PM",
      "commitName": "b7b201a08e330c9638f52f5dfe824e426a34f2c5",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "7/19/10, 5:30 PM",
      "commitNameOld": "e8eafe7acfd53e5385e4f31692c4db67c3777185",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 50.79,
      "commitsBetweenForRepo": 116,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n \u003d\u003d scope.getRootNode())\n        return;\n    if (n.getType() \u003d\u003d Token.LP \u0026\u0026 parent \u003d\u003d scope.getRootNode()) {\n        handleFunctionInputs(parent);\n        return;\n    }\n    attachLiteralTypes(n);\n    switch(n.getType()) {\n        case Token.FUNCTION:\n            if (parent.getType() \u003d\u003d Token.NAME) {\n                return;\n            }\n            defineDeclaredFunction(n, parent);\n            break;\n        case Token.CATCH:\n            defineCatch(n, parent);\n            break;\n        case Token.VAR:\n            defineVar(n, parent);\n            break;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 1418,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "Visit a node in a local scope, and add any local variables or catch\nparameters into the local symbol table.\n\n@param t The node traversal.\n@param n The node being visited.\n@param parent The parent of n\n",
      "diff": "@@ -1,23 +1,24 @@\n @Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n \u003d\u003d scope.getRootNode())\n         return;\n     if (n.getType() \u003d\u003d Token.LP \u0026\u0026 parent \u003d\u003d scope.getRootNode()) {\n         handleFunctionInputs(parent);\n         return;\n     }\n+    attachLiteralTypes(n);\n     switch(n.getType()) {\n         case Token.FUNCTION:\n             if (parent.getType() \u003d\u003d Token.NAME) {\n                 return;\n             }\n             defineDeclaredFunction(n, parent);\n             break;\n         case Token.CATCH:\n             defineCatch(n, parent);\n             break;\n         case Token.VAR:\n             defineVar(n, parent);\n             break;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e8eafe7acfd53e5385e4f31692c4db67c3777185": {
      "type": "Ybodychange",
      "commitMessage": "\nRefactor typedscopecreator a bit to make it easier\nto see what\u0027s going on. basically, i removed a level of dynamic\ndispatch. there should be no functional changes in this cl.\n\nR\u003djohnlenz\nDELTA\u003d228  (89 added, 62 deleted, 77 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d54005\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@292 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/19/10, 5:30 PM",
      "commitName": "e8eafe7acfd53e5385e4f31692c4db67c3777185",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "7/16/10, 2:56 AM",
      "commitNameOld": "192a60673cfd308fbcb735664fbab98e3cb3a21a",
      "commitAuthorOld": "nadaa@google.com",
      "daysBetweenCommits": 3.61,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n \u003d\u003d scope.getRootNode())\n        return;\n    if (n.getType() \u003d\u003d Token.LP \u0026\u0026 parent \u003d\u003d scope.getRootNode()) {\n        handleFunctionInputs(parent);\n        return;\n    }\n    switch(n.getType()) {\n        case Token.FUNCTION:\n            if (parent.getType() \u003d\u003d Token.NAME) {\n                return;\n            }\n            defineDeclaredFunction(n, parent);\n            break;\n        case Token.CATCH:\n            defineCatch(n, parent);\n            break;\n        case Token.VAR:\n            defineVar(n, parent);\n            break;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 1368,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "Visit a node in a local scope, and add any local variables or catch\nparameters into the local symbol table.\n\n@param t The node traversal.\n@param n The node being visited.\n@param parent The parent of n\n",
      "diff": "@@ -1,21 +1,23 @@\n @Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n \u003d\u003d scope.getRootNode())\n         return;\n     if (n.getType() \u003d\u003d Token.LP \u0026\u0026 parent \u003d\u003d scope.getRootNode()) {\n         handleFunctionInputs(parent);\n         return;\n     }\n     switch(n.getType()) {\n         case Token.FUNCTION:\n             if (parent.getType() \u003d\u003d Token.NAME) {\n                 return;\n             }\n-            define(n, parent);\n+            defineDeclaredFunction(n, parent);\n             break;\n         case Token.CATCH:\n+            defineCatch(n, parent);\n+            break;\n         case Token.VAR:\n-            define(n, parent);\n+            defineVar(n, parent);\n             break;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,21 @@\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n \u003d\u003d scope.getRootNode())\n+        return;\n+    if (n.getType() \u003d\u003d Token.LP \u0026\u0026 parent \u003d\u003d scope.getRootNode()) {\n+        handleFunctionInputs(parent);\n+        return;\n+    }\n+    switch(n.getType()) {\n+        case Token.FUNCTION:\n+            if (parent.getType() \u003d\u003d Token.NAME) {\n+                return;\n+            }\n+            define(n, parent);\n+            break;\n+        case Token.CATCH:\n+        case Token.VAR:\n+            define(n, parent);\n+            break;\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n \u003d\u003d scope.getRootNode())\n        return;\n    if (n.getType() \u003d\u003d Token.LP \u0026\u0026 parent \u003d\u003d scope.getRootNode()) {\n        handleFunctionInputs(parent);\n        return;\n    }\n    switch(n.getType()) {\n        case Token.FUNCTION:\n            if (parent.getType() \u003d\u003d Token.NAME) {\n                return;\n            }\n            define(n, parent);\n            break;\n        case Token.CATCH:\n        case Token.VAR:\n            define(n, parent);\n            break;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 1197,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "Visit a node in a local scope, and add any local variables or catch\nparameters into the local symbol table.\n\n@param t The node traversal.\n@param n The node being visited.\n@param parent The parent of n\n"
    }
  }
}