{
  "origin": "codeshovel",
  "repositoryName": "Closure-33b",
  "repositoryPath": "/tmp/Closure-33b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JsDocInfoParser.java",
  "functionName": "parseUnionTypeWithAlternate",
  "functionId": "parseUnionTypeWithAlternate___token-JsDocToken__alternate-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
  "functionAnnotation": "",
  "functionDoc": "Create a new union type, with an alternate that has already been\nparsed. The alternate may be null.\n",
  "functionStartLine": 1982,
  "functionEndLine": 2021,
  "numCommitsSeen": 57,
  "timeTaken": 6423,
  "changeHistory": [
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,33 @@\n+private Node parseUnionTypeWithAlternate(JsDocToken token, Node alternate) {\n+    Node union \u003d newNode(Token.PIPE);\n+    if (alternate !\u003d null) {\n+        union.addChildToBack(alternate);\n+    }\n+    Node expr \u003d null;\n+    do {\n+        if (expr !\u003d null) {\n+            skipEOLs();\n+            token \u003d next();\n+            Preconditions.checkState(token \u003d\u003d JsDocToken.PIPE || token \u003d\u003d JsDocToken.COMMA);\n+            boolean isPipe \u003d token \u003d\u003d JsDocToken.PIPE;\n+            if (isPipe \u0026\u0026 match(JsDocToken.PIPE)) {\n+                next();\n+            }\n+            skipEOLs();\n+            token \u003d next();\n+        }\n+        expr \u003d parseTypeExpression(token);\n+        if (expr \u003d\u003d null) {\n+            return null;\n+        }\n+        union.addChildToBack(expr);\n+    } while (match(JsDocToken.PIPE, JsDocToken.COMMA));\n+    if (alternate \u003d\u003d null) {\n+        skipEOLs();\n+        if (!match(JsDocToken.RP)) {\n+            return reportTypeSyntaxWarning(\"msg.jsdoc.missing.rp\");\n+        }\n+        next();\n+    }\n+    return union;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private Node parseUnionTypeWithAlternate(JsDocToken token, Node alternate) {\n    Node union \u003d newNode(Token.PIPE);\n    if (alternate !\u003d null) {\n        union.addChildToBack(alternate);\n    }\n    Node expr \u003d null;\n    do {\n        if (expr !\u003d null) {\n            skipEOLs();\n            token \u003d next();\n            Preconditions.checkState(token \u003d\u003d JsDocToken.PIPE || token \u003d\u003d JsDocToken.COMMA);\n            boolean isPipe \u003d token \u003d\u003d JsDocToken.PIPE;\n            if (isPipe \u0026\u0026 match(JsDocToken.PIPE)) {\n                next();\n            }\n            skipEOLs();\n            token \u003d next();\n        }\n        expr \u003d parseTypeExpression(token);\n        if (expr \u003d\u003d null) {\n            return null;\n        }\n        union.addChildToBack(expr);\n    } while (match(JsDocToken.PIPE, JsDocToken.COMMA));\n    if (alternate \u003d\u003d null) {\n        skipEOLs();\n        if (!match(JsDocToken.RP)) {\n            return reportTypeSyntaxWarning(\"msg.jsdoc.missing.rp\");\n        }\n        next();\n    }\n    return union;\n}",
      "path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
      "functionStartLine": 1762,
      "functionName": "parseUnionTypeWithAlternate",
      "functionAnnotation": "",
      "functionDoc": "Create a new union type, with an alternate that has already been\nparsed. The alternate may be null.\n"
    }
  }
}