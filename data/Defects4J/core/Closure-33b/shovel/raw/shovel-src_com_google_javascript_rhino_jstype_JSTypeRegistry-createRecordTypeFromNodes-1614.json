{
  "origin": "codeshovel",
  "repositoryName": "Closure-33b",
  "repositoryPath": "/tmp/Closure-33b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JSTypeRegistry.java",
  "functionName": "createRecordTypeFromNodes",
  "functionId": "createRecordTypeFromNodes___n-Node__sourceName-String__scope-StaticScope__JSType__",
  "sourceFilePath": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
  "functionAnnotation": "",
  "functionDoc": "Creates a RecordType from the nodes representing said record type.\n\n@param n The node with type info.\n@param sourceName The source file name.\n@param scope A scope for doing type name lookups.\n",
  "functionStartLine": 1614,
  "functionEndLine": 1665,
  "numCommitsSeen": 55,
  "timeTaken": 3752,
  "changeHistory": [
    "22dd6b542acd662c55c0ebe31ba9062d3493740e",
    "290bffbf3b0a6917be44513accef3a082543bbb4",
    "63c9ab97253d7bfb1d5e2a27c39c9c3a8a6d3d7e",
    "4434b45f18d2e74ec809a9bbeb67571b604ce6d0",
    "6bbac115c9a7928a7053b2da3a78df9569df8570",
    "58c3e4ce1d17ec619bcc4964bdeebc676f93567d",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "22dd6b542acd662c55c0ebe31ba9062d3493740e": "Ybodychange",
    "290bffbf3b0a6917be44513accef3a082543bbb4": "Ybodychange",
    "63c9ab97253d7bfb1d5e2a27c39c9c3a8a6d3d7e": "Ybodychange",
    "4434b45f18d2e74ec809a9bbeb67571b604ce6d0": "Ybodychange",
    "6bbac115c9a7928a7053b2da3a78df9569df8570": "Ybodychange",
    "58c3e4ce1d17ec619bcc4964bdeebc676f93567d": "Ymultichange(Ymodifierchange,Ybodychange)",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "22dd6b542acd662c55c0ebe31ba9062d3493740e": {
      "type": "Ybodychange",
      "commitMessage": "\nSimplify the error reporter interface.\n\nR\u003dnicksantos\nDELTA\u003d47  (24 added, 5 deleted, 18 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3690\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1585 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/10/11, 12:21 PM",
      "commitName": "22dd6b542acd662c55c0ebe31ba9062d3493740e",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/9/11, 2:45 PM",
      "commitNameOld": "103bd46736cbbbabe6ad27ab11da10d6dbb1a8e5",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.9,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "private JSType createRecordTypeFromNodes(Node n, String sourceName, StaticScope\u003cJSType\u003e scope) {\n    RecordTypeBuilder builder \u003d new RecordTypeBuilder(this);\n    for (Node fieldTypeNode \u003d n.getFirstChild(); fieldTypeNode !\u003d null; fieldTypeNode \u003d fieldTypeNode.getNext()) {\n        Node fieldNameNode \u003d fieldTypeNode;\n        boolean hasType \u003d false;\n        if (fieldTypeNode.getType() \u003d\u003d Token.COLON) {\n            fieldNameNode \u003d fieldTypeNode.getFirstChild();\n            hasType \u003d true;\n        }\n        String fieldName \u003d fieldNameNode.getString();\n        if (fieldName.startsWith(\"\u0027\") || fieldName.startsWith(\"\\\"\")) {\n            fieldName \u003d fieldName.substring(1, fieldName.length() - 1);\n        }\n        JSType fieldType \u003d null;\n        if (hasType) {\n            fieldType \u003d createFromTypeNodesInternal(fieldTypeNode.getLastChild(), sourceName, scope);\n        } else {\n            fieldType \u003d getNativeType(JSTypeNative.UNKNOWN_TYPE);\n        }\n        if (builder.addProperty(fieldName, fieldType, fieldNameNode) \u003d\u003d null) {\n            reporter.warning(\"Duplicate record field \" + fieldName, sourceName, n.getLineno(), fieldNameNode.getCharno());\n        }\n    }\n    return builder.build();\n}",
      "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
      "functionStartLine": 1614,
      "functionName": "createRecordTypeFromNodes",
      "functionAnnotation": "",
      "functionDoc": "Creates a RecordType from the nodes representing said record type.\n\n@param n The node with type info.\n@param sourceName The source file name.\n@param scope A scope for doing type name lookups.\n",
      "diff": "@@ -1,25 +1,25 @@\n private JSType createRecordTypeFromNodes(Node n, String sourceName, StaticScope\u003cJSType\u003e scope) {\n     RecordTypeBuilder builder \u003d new RecordTypeBuilder(this);\n     for (Node fieldTypeNode \u003d n.getFirstChild(); fieldTypeNode !\u003d null; fieldTypeNode \u003d fieldTypeNode.getNext()) {\n         Node fieldNameNode \u003d fieldTypeNode;\n         boolean hasType \u003d false;\n         if (fieldTypeNode.getType() \u003d\u003d Token.COLON) {\n             fieldNameNode \u003d fieldTypeNode.getFirstChild();\n             hasType \u003d true;\n         }\n         String fieldName \u003d fieldNameNode.getString();\n         if (fieldName.startsWith(\"\u0027\") || fieldName.startsWith(\"\\\"\")) {\n             fieldName \u003d fieldName.substring(1, fieldName.length() - 1);\n         }\n         JSType fieldType \u003d null;\n         if (hasType) {\n             fieldType \u003d createFromTypeNodesInternal(fieldTypeNode.getLastChild(), sourceName, scope);\n         } else {\n             fieldType \u003d getNativeType(JSTypeNative.UNKNOWN_TYPE);\n         }\n         if (builder.addProperty(fieldName, fieldType, fieldNameNode) \u003d\u003d null) {\n-            reporter.warning(\"Duplicate record field \" + fieldName, sourceName, n.getLineno(), \"\", fieldNameNode.getCharno());\n+            reporter.warning(\"Duplicate record field \" + fieldName, sourceName, n.getLineno(), fieldNameNode.getCharno());\n         }\n     }\n     return builder.build();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "290bffbf3b0a6917be44513accef3a082543bbb4": {
      "type": "Ybodychange",
      "commitMessage": "\nFixes another record type issue (incremental, to make warning message more precise)\n\nR\u003dnicksantos,johnlenz\nDELTA\u003d3  (0 added, 0 deleted, 3 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1180\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@956 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/31/11, 8:57 AM",
      "commitName": "290bffbf3b0a6917be44513accef3a082543bbb4",
      "commitAuthor": "zhuyi@google.com",
      "commitDateOld": "3/30/11, 3:02 PM",
      "commitNameOld": "63c9ab97253d7bfb1d5e2a27c39c9c3a8a6d3d7e",
      "commitAuthorOld": "zhuyi@google.com",
      "daysBetweenCommits": 0.75,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private JSType createRecordTypeFromNodes(Node n, String sourceName, StaticScope\u003cJSType\u003e scope) {\n    RecordTypeBuilder builder \u003d new RecordTypeBuilder(this);\n    for (Node fieldTypeNode \u003d n.getFirstChild(); fieldTypeNode !\u003d null; fieldTypeNode \u003d fieldTypeNode.getNext()) {\n        Node fieldNameNode \u003d fieldTypeNode;\n        boolean hasType \u003d false;\n        if (fieldTypeNode.getType() \u003d\u003d Token.COLON) {\n            fieldNameNode \u003d fieldTypeNode.getFirstChild();\n            hasType \u003d true;\n        }\n        String fieldName \u003d fieldNameNode.getString();\n        if (fieldName.startsWith(\"\u0027\") || fieldName.startsWith(\"\\\"\")) {\n            fieldName \u003d fieldName.substring(1, fieldName.length() - 1);\n        }\n        JSType fieldType \u003d null;\n        if (hasType) {\n            fieldType \u003d createFromTypeNodesInternal(fieldTypeNode.getLastChild(), sourceName, scope);\n        } else {\n            fieldType \u003d getNativeType(JSTypeNative.UNKNOWN_TYPE);\n        }\n        if (builder.addProperty(fieldName, fieldType, fieldNameNode) \u003d\u003d null) {\n            reporter.warning(\"Duplicate record field \" + fieldName, sourceName, n.getLineno(), \"\", fieldNameNode.getCharno());\n        }\n    }\n    return builder.build();\n}",
      "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
      "functionStartLine": 1527,
      "functionName": "createRecordTypeFromNodes",
      "functionAnnotation": "",
      "functionDoc": "Creates a RecordType from the nodes representing said record type.\n\n@param n The node with type info.\n@param sourceName The source file name.\n@param scope A scope for doing type name lookups.\n",
      "diff": "@@ -1,25 +1,25 @@\n private JSType createRecordTypeFromNodes(Node n, String sourceName, StaticScope\u003cJSType\u003e scope) {\n     RecordTypeBuilder builder \u003d new RecordTypeBuilder(this);\n     for (Node fieldTypeNode \u003d n.getFirstChild(); fieldTypeNode !\u003d null; fieldTypeNode \u003d fieldTypeNode.getNext()) {\n         Node fieldNameNode \u003d fieldTypeNode;\n         boolean hasType \u003d false;\n         if (fieldTypeNode.getType() \u003d\u003d Token.COLON) {\n             fieldNameNode \u003d fieldTypeNode.getFirstChild();\n             hasType \u003d true;\n         }\n         String fieldName \u003d fieldNameNode.getString();\n         if (fieldName.startsWith(\"\u0027\") || fieldName.startsWith(\"\\\"\")) {\n             fieldName \u003d fieldName.substring(1, fieldName.length() - 1);\n         }\n         JSType fieldType \u003d null;\n         if (hasType) {\n             fieldType \u003d createFromTypeNodesInternal(fieldTypeNode.getLastChild(), sourceName, scope);\n         } else {\n             fieldType \u003d getNativeType(JSTypeNative.UNKNOWN_TYPE);\n         }\n         if (builder.addProperty(fieldName, fieldType, fieldNameNode) \u003d\u003d null) {\n-            reporter.warning(\"Duplicate record field \" + fieldName, sourceName, n.getLineno(), \"\", n.getCharno());\n+            reporter.warning(\"Duplicate record field \" + fieldName, sourceName, n.getLineno(), \"\", fieldNameNode.getCharno());\n         }\n     }\n     return builder.build();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "63c9ab97253d7bfb1d5e2a27c39c9c3a8a6d3d7e": {
      "type": "Ybodychange",
      "commitMessage": "\nFixes an issue\n\nR\u003dnicksantos\nDELTA\u003d37  (31 added, 1 deleted, 5 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1179\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@955 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/30/11, 3:02 PM",
      "commitName": "63c9ab97253d7bfb1d5e2a27c39c9c3a8a6d3d7e",
      "commitAuthor": "zhuyi@google.com",
      "commitDateOld": "3/10/11, 8:26 AM",
      "commitNameOld": "4434b45f18d2e74ec809a9bbeb67571b604ce6d0",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 20.23,
      "commitsBetweenForRepo": 75,
      "commitsBetweenForFile": 1,
      "actualSource": "private JSType createRecordTypeFromNodes(Node n, String sourceName, StaticScope\u003cJSType\u003e scope) {\n    RecordTypeBuilder builder \u003d new RecordTypeBuilder(this);\n    for (Node fieldTypeNode \u003d n.getFirstChild(); fieldTypeNode !\u003d null; fieldTypeNode \u003d fieldTypeNode.getNext()) {\n        Node fieldNameNode \u003d fieldTypeNode;\n        boolean hasType \u003d false;\n        if (fieldTypeNode.getType() \u003d\u003d Token.COLON) {\n            fieldNameNode \u003d fieldTypeNode.getFirstChild();\n            hasType \u003d true;\n        }\n        String fieldName \u003d fieldNameNode.getString();\n        if (fieldName.startsWith(\"\u0027\") || fieldName.startsWith(\"\\\"\")) {\n            fieldName \u003d fieldName.substring(1, fieldName.length() - 1);\n        }\n        JSType fieldType \u003d null;\n        if (hasType) {\n            fieldType \u003d createFromTypeNodesInternal(fieldTypeNode.getLastChild(), sourceName, scope);\n        } else {\n            fieldType \u003d getNativeType(JSTypeNative.UNKNOWN_TYPE);\n        }\n        if (builder.addProperty(fieldName, fieldType, fieldNameNode) \u003d\u003d null) {\n            reporter.warning(\"Duplicate record field \" + fieldName, sourceName, n.getLineno(), \"\", n.getCharno());\n        }\n    }\n    return builder.build();\n}",
      "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
      "functionStartLine": 1527,
      "functionName": "createRecordTypeFromNodes",
      "functionAnnotation": "",
      "functionDoc": "Creates a RecordType from the nodes representing said record type.\n\n@param n The node with type info.\n@param sourceName The source file name.\n@param scope A scope for doing type name lookups.\n",
      "diff": "@@ -1,23 +1,25 @@\n private JSType createRecordTypeFromNodes(Node n, String sourceName, StaticScope\u003cJSType\u003e scope) {\n     RecordTypeBuilder builder \u003d new RecordTypeBuilder(this);\n     for (Node fieldTypeNode \u003d n.getFirstChild(); fieldTypeNode !\u003d null; fieldTypeNode \u003d fieldTypeNode.getNext()) {\n         Node fieldNameNode \u003d fieldTypeNode;\n         boolean hasType \u003d false;\n         if (fieldTypeNode.getType() \u003d\u003d Token.COLON) {\n             fieldNameNode \u003d fieldTypeNode.getFirstChild();\n             hasType \u003d true;\n         }\n         String fieldName \u003d fieldNameNode.getString();\n         if (fieldName.startsWith(\"\u0027\") || fieldName.startsWith(\"\\\"\")) {\n             fieldName \u003d fieldName.substring(1, fieldName.length() - 1);\n         }\n         JSType fieldType \u003d null;\n         if (hasType) {\n             fieldType \u003d createFromTypeNodesInternal(fieldTypeNode.getLastChild(), sourceName, scope);\n         } else {\n             fieldType \u003d getNativeType(JSTypeNative.UNKNOWN_TYPE);\n         }\n-        builder.addProperty(fieldName, fieldType, fieldNameNode);\n+        if (builder.addProperty(fieldName, fieldType, fieldNameNode) \u003d\u003d null) {\n+            reporter.warning(\"Duplicate record field \" + fieldName, sourceName, n.getLineno(), \"\", n.getCharno());\n+        }\n     }\n     return builder.build();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4434b45f18d2e74ec809a9bbeb67571b604ce6d0": {
      "type": "Ybodychange",
      "commitMessage": "\nUnforgiven types.\nNow that you can suppress type-parsing warnings by simply turning\noff type checking, we should just get rid of all the old forgiving\nlogic.\n\nR\u003dacleung\nDELTA\u003d128  (5 added, 86 deleted, 37 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d812\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@872 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/10/11, 8:26 AM",
      "commitName": "4434b45f18d2e74ec809a9bbeb67571b604ce6d0",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "3/7/11, 5:08 PM",
      "commitNameOld": "f80152eb5a2de72e8336b26e0e78b9e6baae37d2",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 2.64,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "private JSType createRecordTypeFromNodes(Node n, String sourceName, StaticScope\u003cJSType\u003e scope) {\n    RecordTypeBuilder builder \u003d new RecordTypeBuilder(this);\n    for (Node fieldTypeNode \u003d n.getFirstChild(); fieldTypeNode !\u003d null; fieldTypeNode \u003d fieldTypeNode.getNext()) {\n        Node fieldNameNode \u003d fieldTypeNode;\n        boolean hasType \u003d false;\n        if (fieldTypeNode.getType() \u003d\u003d Token.COLON) {\n            fieldNameNode \u003d fieldTypeNode.getFirstChild();\n            hasType \u003d true;\n        }\n        String fieldName \u003d fieldNameNode.getString();\n        if (fieldName.startsWith(\"\u0027\") || fieldName.startsWith(\"\\\"\")) {\n            fieldName \u003d fieldName.substring(1, fieldName.length() - 1);\n        }\n        JSType fieldType \u003d null;\n        if (hasType) {\n            fieldType \u003d createFromTypeNodesInternal(fieldTypeNode.getLastChild(), sourceName, scope);\n        } else {\n            fieldType \u003d getNativeType(JSTypeNative.UNKNOWN_TYPE);\n        }\n        builder.addProperty(fieldName, fieldType, fieldNameNode);\n    }\n    return builder.build();\n}",
      "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
      "functionStartLine": 1527,
      "functionName": "createRecordTypeFromNodes",
      "functionAnnotation": "",
      "functionDoc": "Creates a RecordType from the nodes representing said record type.\n\n@param n The node with type info.\n@param sourceName The source file name.\n@param scope A scope for doing type name lookups.\n",
      "diff": "@@ -1,23 +1,23 @@\n private JSType createRecordTypeFromNodes(Node n, String sourceName, StaticScope\u003cJSType\u003e scope) {\n     RecordTypeBuilder builder \u003d new RecordTypeBuilder(this);\n     for (Node fieldTypeNode \u003d n.getFirstChild(); fieldTypeNode !\u003d null; fieldTypeNode \u003d fieldTypeNode.getNext()) {\n         Node fieldNameNode \u003d fieldTypeNode;\n         boolean hasType \u003d false;\n         if (fieldTypeNode.getType() \u003d\u003d Token.COLON) {\n             fieldNameNode \u003d fieldTypeNode.getFirstChild();\n             hasType \u003d true;\n         }\n         String fieldName \u003d fieldNameNode.getString();\n         if (fieldName.startsWith(\"\u0027\") || fieldName.startsWith(\"\\\"\")) {\n             fieldName \u003d fieldName.substring(1, fieldName.length() - 1);\n         }\n         JSType fieldType \u003d null;\n         if (hasType) {\n-            fieldType \u003d createFromTypeNodesInternal(fieldTypeNode.getLastChild(), sourceName, scope, false);\n+            fieldType \u003d createFromTypeNodesInternal(fieldTypeNode.getLastChild(), sourceName, scope);\n         } else {\n             fieldType \u003d getNativeType(JSTypeNative.UNKNOWN_TYPE);\n         }\n         builder.addProperty(fieldName, fieldType, fieldNameNode);\n     }\n     return builder.build();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6bbac115c9a7928a7053b2da3a78df9569df8570": {
      "type": "Ybodychange",
      "commitMessage": "\nAdding getPropertyNode functionality to ObjectType. This needs\nassociating nodes to properties in defineProperty.\n\nR\u003dnicksantos\nDELTA\u003d307  (127 added, 0 deleted, 180 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d223\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@674 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/7/11, 9:19 AM",
      "commitName": "6bbac115c9a7928a7053b2da3a78df9569df8570",
      "commitAuthor": "bashir@google.com",
      "commitDateOld": "12/14/10, 1:49 PM",
      "commitNameOld": "e9f7e6114414f68deb90f4116861d7a054365404",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 23.81,
      "commitsBetweenForRepo": 43,
      "commitsBetweenForFile": 1,
      "actualSource": "private JSType createRecordTypeFromNodes(Node n, String sourceName, StaticScope\u003cJSType\u003e scope) {\n    RecordTypeBuilder builder \u003d new RecordTypeBuilder(this);\n    for (Node fieldTypeNode \u003d n.getFirstChild(); fieldTypeNode !\u003d null; fieldTypeNode \u003d fieldTypeNode.getNext()) {\n        Node fieldNameNode \u003d fieldTypeNode;\n        boolean hasType \u003d false;\n        if (fieldTypeNode.getType() \u003d\u003d Token.COLON) {\n            fieldNameNode \u003d fieldTypeNode.getFirstChild();\n            hasType \u003d true;\n        }\n        String fieldName \u003d fieldNameNode.getString();\n        if (fieldName.startsWith(\"\u0027\") || fieldName.startsWith(\"\\\"\")) {\n            fieldName \u003d fieldName.substring(1, fieldName.length() - 1);\n        }\n        JSType fieldType \u003d null;\n        if (hasType) {\n            fieldType \u003d createFromTypeNodesInternal(fieldTypeNode.getLastChild(), sourceName, scope, false);\n        } else {\n            fieldType \u003d getNativeType(JSTypeNative.UNKNOWN_TYPE);\n        }\n        builder.addProperty(fieldName, fieldType, fieldNameNode);\n    }\n    return builder.build();\n}",
      "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
      "functionStartLine": 1537,
      "functionName": "createRecordTypeFromNodes",
      "functionAnnotation": "",
      "functionDoc": "Creates a RecordType from the nodes representing said record type.\n\n@param n The node with type info.\n@param sourceName The source file name.\n@param scope A scope for doing type name lookups.\n",
      "diff": "@@ -1,23 +1,23 @@\n private JSType createRecordTypeFromNodes(Node n, String sourceName, StaticScope\u003cJSType\u003e scope) {\n     RecordTypeBuilder builder \u003d new RecordTypeBuilder(this);\n     for (Node fieldTypeNode \u003d n.getFirstChild(); fieldTypeNode !\u003d null; fieldTypeNode \u003d fieldTypeNode.getNext()) {\n         Node fieldNameNode \u003d fieldTypeNode;\n         boolean hasType \u003d false;\n         if (fieldTypeNode.getType() \u003d\u003d Token.COLON) {\n             fieldNameNode \u003d fieldTypeNode.getFirstChild();\n             hasType \u003d true;\n         }\n         String fieldName \u003d fieldNameNode.getString();\n         if (fieldName.startsWith(\"\u0027\") || fieldName.startsWith(\"\\\"\")) {\n             fieldName \u003d fieldName.substring(1, fieldName.length() - 1);\n         }\n         JSType fieldType \u003d null;\n         if (hasType) {\n             fieldType \u003d createFromTypeNodesInternal(fieldTypeNode.getLastChild(), sourceName, scope, false);\n         } else {\n             fieldType \u003d getNativeType(JSTypeNative.UNKNOWN_TYPE);\n         }\n-        builder.addProperty(fieldName, fieldType);\n+        builder.addProperty(fieldName, fieldType, fieldNameNode);\n     }\n     return builder.build();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "58c3e4ce1d17ec619bcc4964bdeebc676f93567d": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "\n\nChange on 2010/05/03 by robby\n\n        Preliminary: goog.scope support for closure-compiler\n\n        R\u003dnick,john\n        DELTA\u003d318  (318 added, 0 deleted, 0 changed)\n\nChange on 2010/05/03 by nick\n\n        Add a bit more smarts to type resolution. Also, give it a\n        \"forceResolve\" method so that it will try to resolve type names,\n        even if the registry is in a lazy mode.\n\n        R\u003drobert\n        DELTA\u003d205  (133 added, 54 deleted, 18 changed)\n\nChange on 2010/05/03 by alan\n\n        Enable Flow Sensitive Inlining by default. Passes GMail automation test.\n\n        R\u003dnick\n        DELTA\u003d1  (0 added, 0 deleted, 1 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dcmvhwl\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@202 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/4/10, 7:39 AM",
      "commitName": "58c3e4ce1d17ec619bcc4964bdeebc676f93567d",
      "commitAuthor": "Nicholas.J.Santos",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "\n\nChange on 2010/05/03 by robby\n\n        Preliminary: goog.scope support for closure-compiler\n\n        R\u003dnick,john\n        DELTA\u003d318  (318 added, 0 deleted, 0 changed)\n\nChange on 2010/05/03 by nick\n\n        Add a bit more smarts to type resolution. Also, give it a\n        \"forceResolve\" method so that it will try to resolve type names,\n        even if the registry is in a lazy mode.\n\n        R\u003drobert\n        DELTA\u003d205  (133 added, 54 deleted, 18 changed)\n\nChange on 2010/05/03 by alan\n\n        Enable Flow Sensitive Inlining by default. Passes GMail automation test.\n\n        R\u003dnick\n        DELTA\u003d1  (0 added, 0 deleted, 1 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dcmvhwl\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@202 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "5/4/10, 7:39 AM",
          "commitName": "58c3e4ce1d17ec619bcc4964bdeebc676f93567d",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "4/27/10, 12:02 PM",
          "commitNameOld": "eb5eae4438f49ffddd3c8be1413eeb9e7ecfb311",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 6.82,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "private JSType createRecordTypeFromNodes(Node n, String sourceName, StaticScope\u003cJSType\u003e scope) {\n    RecordTypeBuilder builder \u003d new RecordTypeBuilder(this);\n    for (Node fieldTypeNode \u003d n.getFirstChild(); fieldTypeNode !\u003d null; fieldTypeNode \u003d fieldTypeNode.getNext()) {\n        Node fieldNameNode \u003d fieldTypeNode;\n        boolean hasType \u003d false;\n        if (fieldTypeNode.getType() \u003d\u003d Token.COLON) {\n            fieldNameNode \u003d fieldTypeNode.getFirstChild();\n            hasType \u003d true;\n        }\n        String fieldName \u003d fieldNameNode.getString();\n        if (fieldName.startsWith(\"\u0027\") || fieldName.startsWith(\"\\\"\")) {\n            fieldName \u003d fieldName.substring(1, fieldName.length() - 1);\n        }\n        JSType fieldType \u003d null;\n        if (hasType) {\n            fieldType \u003d createFromTypeNodesInternal(fieldTypeNode.getLastChild(), sourceName, scope, false);\n        } else {\n            fieldType \u003d getNativeType(JSTypeNative.UNKNOWN_TYPE);\n        }\n        builder.addProperty(fieldName, fieldType);\n    }\n    return builder.build();\n}",
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
          "functionStartLine": 1450,
          "functionName": "createRecordTypeFromNodes",
          "functionAnnotation": "",
          "functionDoc": "Creates a RecordType from the nodes representing said record type.\n\n@param n The node with type info.\n@param sourceName The source file name.\n@param scope A scope for doing type name lookups.\n",
          "diff": "@@ -1,23 +1,23 @@\n-public JSType createRecordTypeFromNodes(Node n, String sourceName, StaticScope\u003cJSType\u003e scope) {\n+private JSType createRecordTypeFromNodes(Node n, String sourceName, StaticScope\u003cJSType\u003e scope) {\n     RecordTypeBuilder builder \u003d new RecordTypeBuilder(this);\n     for (Node fieldTypeNode \u003d n.getFirstChild(); fieldTypeNode !\u003d null; fieldTypeNode \u003d fieldTypeNode.getNext()) {\n         Node fieldNameNode \u003d fieldTypeNode;\n         boolean hasType \u003d false;\n         if (fieldTypeNode.getType() \u003d\u003d Token.COLON) {\n             fieldNameNode \u003d fieldTypeNode.getFirstChild();\n             hasType \u003d true;\n         }\n         String fieldName \u003d fieldNameNode.getString();\n         if (fieldName.startsWith(\"\u0027\") || fieldName.startsWith(\"\\\"\")) {\n             fieldName \u003d fieldName.substring(1, fieldName.length() - 1);\n         }\n         JSType fieldType \u003d null;\n         if (hasType) {\n-            fieldType \u003d createFromTypeNodes(fieldTypeNode.getLastChild(), sourceName, scope);\n+            fieldType \u003d createFromTypeNodesInternal(fieldTypeNode.getLastChild(), sourceName, scope, false);\n         } else {\n             fieldType \u003d getNativeType(JSTypeNative.UNKNOWN_TYPE);\n         }\n         builder.addProperty(fieldName, fieldType);\n     }\n     return builder.build();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\n\nChange on 2010/05/03 by robby\n\n        Preliminary: goog.scope support for closure-compiler\n\n        R\u003dnick,john\n        DELTA\u003d318  (318 added, 0 deleted, 0 changed)\n\nChange on 2010/05/03 by nick\n\n        Add a bit more smarts to type resolution. Also, give it a\n        \"forceResolve\" method so that it will try to resolve type names,\n        even if the registry is in a lazy mode.\n\n        R\u003drobert\n        DELTA\u003d205  (133 added, 54 deleted, 18 changed)\n\nChange on 2010/05/03 by alan\n\n        Enable Flow Sensitive Inlining by default. Passes GMail automation test.\n\n        R\u003dnick\n        DELTA\u003d1  (0 added, 0 deleted, 1 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dcmvhwl\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@202 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "5/4/10, 7:39 AM",
          "commitName": "58c3e4ce1d17ec619bcc4964bdeebc676f93567d",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "4/27/10, 12:02 PM",
          "commitNameOld": "eb5eae4438f49ffddd3c8be1413eeb9e7ecfb311",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 6.82,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "private JSType createRecordTypeFromNodes(Node n, String sourceName, StaticScope\u003cJSType\u003e scope) {\n    RecordTypeBuilder builder \u003d new RecordTypeBuilder(this);\n    for (Node fieldTypeNode \u003d n.getFirstChild(); fieldTypeNode !\u003d null; fieldTypeNode \u003d fieldTypeNode.getNext()) {\n        Node fieldNameNode \u003d fieldTypeNode;\n        boolean hasType \u003d false;\n        if (fieldTypeNode.getType() \u003d\u003d Token.COLON) {\n            fieldNameNode \u003d fieldTypeNode.getFirstChild();\n            hasType \u003d true;\n        }\n        String fieldName \u003d fieldNameNode.getString();\n        if (fieldName.startsWith(\"\u0027\") || fieldName.startsWith(\"\\\"\")) {\n            fieldName \u003d fieldName.substring(1, fieldName.length() - 1);\n        }\n        JSType fieldType \u003d null;\n        if (hasType) {\n            fieldType \u003d createFromTypeNodesInternal(fieldTypeNode.getLastChild(), sourceName, scope, false);\n        } else {\n            fieldType \u003d getNativeType(JSTypeNative.UNKNOWN_TYPE);\n        }\n        builder.addProperty(fieldName, fieldType);\n    }\n    return builder.build();\n}",
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
          "functionStartLine": 1450,
          "functionName": "createRecordTypeFromNodes",
          "functionAnnotation": "",
          "functionDoc": "Creates a RecordType from the nodes representing said record type.\n\n@param n The node with type info.\n@param sourceName The source file name.\n@param scope A scope for doing type name lookups.\n",
          "diff": "@@ -1,23 +1,23 @@\n-public JSType createRecordTypeFromNodes(Node n, String sourceName, StaticScope\u003cJSType\u003e scope) {\n+private JSType createRecordTypeFromNodes(Node n, String sourceName, StaticScope\u003cJSType\u003e scope) {\n     RecordTypeBuilder builder \u003d new RecordTypeBuilder(this);\n     for (Node fieldTypeNode \u003d n.getFirstChild(); fieldTypeNode !\u003d null; fieldTypeNode \u003d fieldTypeNode.getNext()) {\n         Node fieldNameNode \u003d fieldTypeNode;\n         boolean hasType \u003d false;\n         if (fieldTypeNode.getType() \u003d\u003d Token.COLON) {\n             fieldNameNode \u003d fieldTypeNode.getFirstChild();\n             hasType \u003d true;\n         }\n         String fieldName \u003d fieldNameNode.getString();\n         if (fieldName.startsWith(\"\u0027\") || fieldName.startsWith(\"\\\"\")) {\n             fieldName \u003d fieldName.substring(1, fieldName.length() - 1);\n         }\n         JSType fieldType \u003d null;\n         if (hasType) {\n-            fieldType \u003d createFromTypeNodes(fieldTypeNode.getLastChild(), sourceName, scope);\n+            fieldType \u003d createFromTypeNodesInternal(fieldTypeNode.getLastChild(), sourceName, scope, false);\n         } else {\n             fieldType \u003d getNativeType(JSTypeNative.UNKNOWN_TYPE);\n         }\n         builder.addProperty(fieldName, fieldType);\n     }\n     return builder.build();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,23 @@\n+public JSType createRecordTypeFromNodes(Node n, String sourceName, StaticScope\u003cJSType\u003e scope) {\n+    RecordTypeBuilder builder \u003d new RecordTypeBuilder(this);\n+    for (Node fieldTypeNode \u003d n.getFirstChild(); fieldTypeNode !\u003d null; fieldTypeNode \u003d fieldTypeNode.getNext()) {\n+        Node fieldNameNode \u003d fieldTypeNode;\n+        boolean hasType \u003d false;\n+        if (fieldTypeNode.getType() \u003d\u003d Token.COLON) {\n+            fieldNameNode \u003d fieldTypeNode.getFirstChild();\n+            hasType \u003d true;\n+        }\n+        String fieldName \u003d fieldNameNode.getString();\n+        if (fieldName.startsWith(\"\u0027\") || fieldName.startsWith(\"\\\"\")) {\n+            fieldName \u003d fieldName.substring(1, fieldName.length() - 1);\n+        }\n+        JSType fieldType \u003d null;\n+        if (hasType) {\n+            fieldType \u003d createFromTypeNodes(fieldTypeNode.getLastChild(), sourceName, scope);\n+        } else {\n+            fieldType \u003d getNativeType(JSTypeNative.UNKNOWN_TYPE);\n+        }\n+        builder.addProperty(fieldName, fieldType);\n+    }\n+    return builder.build();\n+}\n\\ No newline at end of file\n",
      "actualSource": "public JSType createRecordTypeFromNodes(Node n, String sourceName, StaticScope\u003cJSType\u003e scope) {\n    RecordTypeBuilder builder \u003d new RecordTypeBuilder(this);\n    for (Node fieldTypeNode \u003d n.getFirstChild(); fieldTypeNode !\u003d null; fieldTypeNode \u003d fieldTypeNode.getNext()) {\n        Node fieldNameNode \u003d fieldTypeNode;\n        boolean hasType \u003d false;\n        if (fieldTypeNode.getType() \u003d\u003d Token.COLON) {\n            fieldNameNode \u003d fieldTypeNode.getFirstChild();\n            hasType \u003d true;\n        }\n        String fieldName \u003d fieldNameNode.getString();\n        if (fieldName.startsWith(\"\u0027\") || fieldName.startsWith(\"\\\"\")) {\n            fieldName \u003d fieldName.substring(1, fieldName.length() - 1);\n        }\n        JSType fieldType \u003d null;\n        if (hasType) {\n            fieldType \u003d createFromTypeNodes(fieldTypeNode.getLastChild(), sourceName, scope);\n        } else {\n            fieldType \u003d getNativeType(JSTypeNative.UNKNOWN_TYPE);\n        }\n        builder.addProperty(fieldName, fieldType);\n    }\n    return builder.build();\n}",
      "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
      "functionStartLine": 1114,
      "functionName": "createRecordTypeFromNodes",
      "functionAnnotation": "",
      "functionDoc": "Creates a RecordType from the nodes representing said record type.\n\n@param n The node with type info.\n@param sourceName The source file name.\n@param scope A scope for doing type name lookups.\n"
    }
  }
}