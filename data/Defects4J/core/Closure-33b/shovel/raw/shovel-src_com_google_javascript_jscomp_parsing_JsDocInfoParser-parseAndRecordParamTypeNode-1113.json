{
  "origin": "codeshovel",
  "repositoryName": "Closure-33b",
  "repositoryPath": "/tmp/Closure-33b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JsDocInfoParser.java",
  "functionName": "parseAndRecordParamTypeNode",
  "functionId": "parseAndRecordParamTypeNode___token-JsDocToken",
  "sourceFilePath": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
  "functionAnnotation": "",
  "functionDoc": "Looks for a type expression at the current token and if found,\nreturns it. Note that this method consumes input.\n\nParameter type expressions are special for two reasons:\n\u003col\u003e\n  \u003cli\u003eThey must begin with \u0027{\u0027, to distinguish type names from param names.\n  \u003cli\u003eThey may end in \u0027\u003d\u0027, to denote optionality.\n\u003c/ol\u003e\n\n@param token The current token.\n@return The type expression found or null if none.\n",
  "functionStartLine": 1113,
  "functionEndLine": 1127,
  "numCommitsSeen": 57,
  "timeTaken": 5896,
  "changeHistory": [
    "ff67789e6125face69d6dc28697121cb3b6df854",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "ff67789e6125face69d6dc28697121cb3b6df854": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ff67789e6125face69d6dc28697121cb3b6df854": {
      "type": "Ybodychange",
      "commitMessage": "\nFix a bunch of bugs in marker generation, and add lots of inline\nassertions to prevent this from regressing.\nRight now, Grok has a bunch of checks to work around these bugs,\nand we would like to get rid of them.\n\nR\u003djschorr,tylerg\nDELTA\u003d272  (134 added, 14 deleted, 124 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3268\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1442 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/14/11, 8:18 AM",
      "commitName": "ff67789e6125face69d6dc28697121cb3b6df854",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "9/12/11, 4:16 PM",
      "commitNameOld": "9b0cdf5103dc9211cf138389d901d056b86c7292",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 1.67,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "private Node parseAndRecordParamTypeNode(JsDocToken token) {\n    Preconditions.checkArgument(token \u003d\u003d JsDocToken.LC);\n    int lineno \u003d stream.getLineno();\n    int startCharno \u003d stream.getCharno();\n    Node typeNode \u003d parseParamTypeExpressionAnnotation(token);\n    if (typeNode !\u003d null) {\n        int endLineno \u003d stream.getLineno();\n        int endCharno \u003d stream.getCharno();\n        jsdocBuilder.markTypeNode(typeNode, lineno, startCharno, endLineno, endCharno, true);\n    }\n    return typeNode;\n}",
      "path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
      "functionStartLine": 1097,
      "functionName": "parseAndRecordParamTypeNode",
      "functionAnnotation": "",
      "functionDoc": "Looks for a type expression at the current token and if found,\nreturns it. Note that this method consumes input.\n\nParameter type expressions are special for two reasons:\n\u003col\u003e\n  \u003cli\u003eThey must begin with \u0027{\u0027, to distinguish type names from param names.\n  \u003cli\u003eThey may end in \u0027\u003d\u0027, to denote optionality.\n\u003c/ol\u003e\n\n@param token The current token.\n@return The type expression found or null if none.\n",
      "diff": "@@ -1,9 +1,12 @@\n private Node parseAndRecordParamTypeNode(JsDocToken token) {\n     Preconditions.checkArgument(token \u003d\u003d JsDocToken.LC);\n     int lineno \u003d stream.getLineno();\n     int startCharno \u003d stream.getCharno();\n     Node typeNode \u003d parseParamTypeExpressionAnnotation(token);\n-    int endCharno \u003d stream.getCharno();\n-    jsdocBuilder.markTypeNode(typeNode, lineno, startCharno, endCharno, true);\n+    if (typeNode !\u003d null) {\n+        int endLineno \u003d stream.getLineno();\n+        int endCharno \u003d stream.getCharno();\n+        jsdocBuilder.markTypeNode(typeNode, lineno, startCharno, endLineno, endCharno, true);\n+    }\n     return typeNode;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,9 @@\n+private Node parseAndRecordParamTypeNode(JsDocToken token) {\n+    Preconditions.checkArgument(token \u003d\u003d JsDocToken.LC);\n+    int lineno \u003d stream.getLineno();\n+    int startCharno \u003d stream.getCharno();\n+    Node typeNode \u003d parseParamTypeExpressionAnnotation(token);\n+    int endCharno \u003d stream.getCharno();\n+    jsdocBuilder.markTypeNode(typeNode, lineno, startCharno, endCharno, true);\n+    return typeNode;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private Node parseAndRecordParamTypeNode(JsDocToken token) {\n    Preconditions.checkArgument(token \u003d\u003d JsDocToken.LC);\n    int lineno \u003d stream.getLineno();\n    int startCharno \u003d stream.getCharno();\n    Node typeNode \u003d parseParamTypeExpressionAnnotation(token);\n    int endCharno \u003d stream.getCharno();\n    jsdocBuilder.markTypeNode(typeNode, lineno, startCharno, endCharno, true);\n    return typeNode;\n}",
      "path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
      "functionStartLine": 952,
      "functionName": "parseAndRecordParamTypeNode",
      "functionAnnotation": "",
      "functionDoc": "Looks for a type expression at the current token and if found,\nreturns it. Note that this method consumes input.\n\nParameter type expressions are special for two reasons:\n\u003col\u003e\n  \u003cli\u003eThey must begin with \u0027{\u0027, to distinguish type names from param names.\n  \u003cli\u003eThey may end in \u0027\u003d\u0027, to denote optionality.\n\u003c/ol\u003e\n\n@param token The current token.\n@return The type expression found or null if none.\n"
    }
  }
}