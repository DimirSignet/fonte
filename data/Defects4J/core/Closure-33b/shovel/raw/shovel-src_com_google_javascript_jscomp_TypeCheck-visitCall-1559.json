{
  "origin": "codeshovel",
  "repositoryName": "Closure-33b",
  "repositoryPath": "/tmp/Closure-33b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TypeCheck.java",
  "functionName": "visitCall",
  "functionId": "visitCall___t-NodeTraversal__n-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/TypeCheck.java",
  "functionAnnotation": "",
  "functionDoc": "Visits a CALL node.\n\n@param t The node traversal object that supplies context, such as the\nscope chain to use in name lookups as well as error reporting.\n@param n The node being visited.\n",
  "functionStartLine": 1559,
  "functionEndLine": 1611,
  "numCommitsSeen": 71,
  "timeTaken": 5997,
  "changeHistory": [
    "3517e9bad4eceb4aefaa9f3a999ec83f2db33f25",
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
    "bd9c7b620384fe5a98772729001ed56304459bc6",
    "01d1238a2a577d8988a72c29304a3283ca05a29a",
    "fc0798047ad3aac58a54ea65f9f1c8857745419f",
    "0af94b21ceb7f8f0891b85e5713ff93c230e1bb6",
    "63df133d0850805818d1e280ba47dcefc9763c89",
    "fdce3fde269834d9907127955701fc6d783fb3bc",
    "b41c7bd823a9d7df8b9ec276ff3ce4286ab1e890",
    "d63b204e3e8f5fd9b78ba8408c9599dda122694c",
    "0895c28861ee4a1969acc858f1a703ab11ddc64c",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "3517e9bad4eceb4aefaa9f3a999ec83f2db33f25": "Ybodychange",
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c": "Ybodychange",
    "bd9c7b620384fe5a98772729001ed56304459bc6": "Ybodychange",
    "01d1238a2a577d8988a72c29304a3283ca05a29a": "Ybodychange",
    "fc0798047ad3aac58a54ea65f9f1c8857745419f": "Ybodychange",
    "0af94b21ceb7f8f0891b85e5713ff93c230e1bb6": "Ybodychange",
    "63df133d0850805818d1e280ba47dcefc9763c89": "Ybodychange",
    "fdce3fde269834d9907127955701fc6d783fb3bc": "Ybodychange",
    "b41c7bd823a9d7df8b9ec276ff3ce4286ab1e890": "Ybodychange",
    "d63b204e3e8f5fd9b78ba8408c9599dda122694c": "Ybodychange",
    "0895c28861ee4a1969acc858f1a703ab11ddc64c": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3517e9bad4eceb4aefaa9f3a999ec83f2db33f25": {
      "type": "Ybodychange",
      "commitMessage": "\nNPE in Type Check if a cleanup pass wiped out an associated node from a JsDoc node, but we still try to check it to see if it is in an extern.\nUse default behavior if the JsDoc is not able to be queried.\n\nR\u003dnicksantos\nDELTA\u003d29  (28 added, 0 deleted, 1 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3694\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1589 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/11/11, 9:57 AM",
      "commitName": "3517e9bad4eceb4aefaa9f3a999ec83f2db33f25",
      "commitAuthor": "tylerg@google.com",
      "commitDateOld": "11/10/11, 8:36 AM",
      "commitNameOld": "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 1.06,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "private void visitCall(NodeTraversal t, Node n) {\n    Node child \u003d n.getFirstChild();\n    JSType childType \u003d getJSType(child).restrictByNotNullOrUndefined();\n    if (!childType.canBeCalled()) {\n        report(t, n, NOT_CALLABLE, childType.toString());\n        ensureTyped(t, n);\n        return;\n    }\n    if (childType.isFunctionType()) {\n        FunctionType functionType \u003d childType.toMaybeFunctionType();\n        boolean isExtern \u003d false;\n        JSDocInfo functionJSDocInfo \u003d functionType.getJSDocInfo();\n        if (functionJSDocInfo !\u003d null \u0026\u0026 functionJSDocInfo.getAssociatedNode() !\u003d null) {\n            isExtern \u003d functionJSDocInfo.getAssociatedNode().isFromExterns();\n        }\n        if (functionType.isConstructor() \u0026\u0026 !functionType.isNativeObjectType() \u0026\u0026 (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n            report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n        }\n        if (functionType.isOrdinaryFunction() \u0026\u0026 !functionType.getTypeOfThis().isUnknownType() \u0026\u0026 !functionType.getTypeOfThis().isNativeObjectType() \u0026\u0026 !(child.isGetElem() || child.isGetProp())) {\n            report(t, n, EXPECTED_THIS_TYPE, functionType.toString());\n        }\n        visitParameterList(t, n, functionType);\n        ensureTyped(t, n, functionType.getReturnType());\n    } else {\n        ensureTyped(t, n);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1545,
      "functionName": "visitCall",
      "functionAnnotation": "",
      "functionDoc": "Visits a CALL node.\n\n@param t The node traversal object that supplies context, such as the\nscope chain to use in name lookups as well as error reporting.\n@param n The node being visited.\n",
      "diff": "@@ -1,27 +1,27 @@\n private void visitCall(NodeTraversal t, Node n) {\n     Node child \u003d n.getFirstChild();\n     JSType childType \u003d getJSType(child).restrictByNotNullOrUndefined();\n     if (!childType.canBeCalled()) {\n         report(t, n, NOT_CALLABLE, childType.toString());\n         ensureTyped(t, n);\n         return;\n     }\n     if (childType.isFunctionType()) {\n         FunctionType functionType \u003d childType.toMaybeFunctionType();\n         boolean isExtern \u003d false;\n         JSDocInfo functionJSDocInfo \u003d functionType.getJSDocInfo();\n-        if (functionJSDocInfo !\u003d null) {\n+        if (functionJSDocInfo !\u003d null \u0026\u0026 functionJSDocInfo.getAssociatedNode() !\u003d null) {\n             isExtern \u003d functionJSDocInfo.getAssociatedNode().isFromExterns();\n         }\n         if (functionType.isConstructor() \u0026\u0026 !functionType.isNativeObjectType() \u0026\u0026 (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n             report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n         }\n         if (functionType.isOrdinaryFunction() \u0026\u0026 !functionType.getTypeOfThis().isUnknownType() \u0026\u0026 !functionType.getTypeOfThis().isNativeObjectType() \u0026\u0026 !(child.isGetElem() || child.isGetProp())) {\n             report(t, n, EXPECTED_THIS_TYPE, functionType.toString());\n         }\n         visitParameterList(t, n, functionType);\n         ensureTyped(t, n, functionType.getReturnType());\n     } else {\n         ensureTyped(t, n);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c": {
      "type": "Ybodychange",
      "commitMessage": "\nReplace the bulk of the Node.getType() \u003d\u003d Token.XXX calls with\nNode.isXXX calls.\n\nR\u003dnicksantos\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3677\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1582 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/10/11, 8:36 AM",
      "commitName": "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/8/11, 12:25 PM",
      "commitNameOld": "9d8201624c22636577d47a40aa03de44363b695b",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 1.84,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "private void visitCall(NodeTraversal t, Node n) {\n    Node child \u003d n.getFirstChild();\n    JSType childType \u003d getJSType(child).restrictByNotNullOrUndefined();\n    if (!childType.canBeCalled()) {\n        report(t, n, NOT_CALLABLE, childType.toString());\n        ensureTyped(t, n);\n        return;\n    }\n    if (childType.isFunctionType()) {\n        FunctionType functionType \u003d childType.toMaybeFunctionType();\n        boolean isExtern \u003d false;\n        JSDocInfo functionJSDocInfo \u003d functionType.getJSDocInfo();\n        if (functionJSDocInfo !\u003d null) {\n            isExtern \u003d functionJSDocInfo.getAssociatedNode().isFromExterns();\n        }\n        if (functionType.isConstructor() \u0026\u0026 !functionType.isNativeObjectType() \u0026\u0026 (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n            report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n        }\n        if (functionType.isOrdinaryFunction() \u0026\u0026 !functionType.getTypeOfThis().isUnknownType() \u0026\u0026 !functionType.getTypeOfThis().isNativeObjectType() \u0026\u0026 !(child.isGetElem() || child.isGetProp())) {\n            report(t, n, EXPECTED_THIS_TYPE, functionType.toString());\n        }\n        visitParameterList(t, n, functionType);\n        ensureTyped(t, n, functionType.getReturnType());\n    } else {\n        ensureTyped(t, n);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1545,
      "functionName": "visitCall",
      "functionAnnotation": "",
      "functionDoc": "Visits a CALL node.\n\n@param t The node traversal object that supplies context, such as the\nscope chain to use in name lookups as well as error reporting.\n@param n The node being visited.\n",
      "diff": "@@ -1,27 +1,27 @@\n private void visitCall(NodeTraversal t, Node n) {\n     Node child \u003d n.getFirstChild();\n     JSType childType \u003d getJSType(child).restrictByNotNullOrUndefined();\n     if (!childType.canBeCalled()) {\n         report(t, n, NOT_CALLABLE, childType.toString());\n         ensureTyped(t, n);\n         return;\n     }\n     if (childType.isFunctionType()) {\n         FunctionType functionType \u003d childType.toMaybeFunctionType();\n         boolean isExtern \u003d false;\n         JSDocInfo functionJSDocInfo \u003d functionType.getJSDocInfo();\n         if (functionJSDocInfo !\u003d null) {\n             isExtern \u003d functionJSDocInfo.getAssociatedNode().isFromExterns();\n         }\n         if (functionType.isConstructor() \u0026\u0026 !functionType.isNativeObjectType() \u0026\u0026 (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n             report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n         }\n-        if (functionType.isOrdinaryFunction() \u0026\u0026 !functionType.getTypeOfThis().isUnknownType() \u0026\u0026 !functionType.getTypeOfThis().isNativeObjectType() \u0026\u0026 !(child.getType() \u003d\u003d Token.GETELEM || child.getType() \u003d\u003d Token.GETPROP)) {\n+        if (functionType.isOrdinaryFunction() \u0026\u0026 !functionType.getTypeOfThis().isUnknownType() \u0026\u0026 !functionType.getTypeOfThis().isNativeObjectType() \u0026\u0026 !(child.isGetElem() || child.isGetProp())) {\n             report(t, n, EXPECTED_THIS_TYPE, functionType.toString());\n         }\n         visitParameterList(t, n, functionType);\n         ensureTyped(t, n, functionType.getReturnType());\n     } else {\n         ensureTyped(t, n);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bd9c7b620384fe5a98772729001ed56304459bc6": {
      "type": "Ybodychange",
      "commitMessage": "\nAdd toMaybeFunctionType/toMaybeEnumElementType.\ntry #2. the bugs in jstestc were fixed. this cl is exactly\nthe same as the original\n\nR\u003djohnlenz\nDELTA\u003d317  (79 added, 47 deleted, 191 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3078\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1367 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/18/11, 3:46 PM",
      "commitName": "bd9c7b620384fe5a98772729001ed56304459bc6",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "8/18/11, 10:40 AM",
      "commitNameOld": "01d1238a2a577d8988a72c29304a3283ca05a29a",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.21,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private void visitCall(NodeTraversal t, Node n) {\n    Node child \u003d n.getFirstChild();\n    JSType childType \u003d getJSType(child).restrictByNotNullOrUndefined();\n    if (!childType.canBeCalled()) {\n        report(t, n, NOT_CALLABLE, childType.toString());\n        ensureTyped(t, n);\n        return;\n    }\n    if (childType.isFunctionType()) {\n        FunctionType functionType \u003d childType.toMaybeFunctionType();\n        boolean isExtern \u003d false;\n        JSDocInfo functionJSDocInfo \u003d functionType.getJSDocInfo();\n        if (functionJSDocInfo !\u003d null) {\n            isExtern \u003d functionJSDocInfo.getAssociatedNode().isFromExterns();\n        }\n        if (functionType.isConstructor() \u0026\u0026 !functionType.isNativeObjectType() \u0026\u0026 (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n            report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n        }\n        if (functionType.isOrdinaryFunction() \u0026\u0026 !functionType.getTypeOfThis().isUnknownType() \u0026\u0026 !functionType.getTypeOfThis().isNativeObjectType() \u0026\u0026 !(child.getType() \u003d\u003d Token.GETELEM || child.getType() \u003d\u003d Token.GETPROP)) {\n            report(t, n, EXPECTED_THIS_TYPE, functionType.toString());\n        }\n        visitParameterList(t, n, functionType);\n        ensureTyped(t, n, functionType.getReturnType());\n    } else {\n        ensureTyped(t, n);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1549,
      "functionName": "visitCall",
      "functionAnnotation": "",
      "functionDoc": "Visits a CALL node.\n\n@param t The node traversal object that supplies context, such as the\nscope chain to use in name lookups as well as error reporting.\n@param n The node being visited.\n",
      "diff": "@@ -1,27 +1,27 @@\n private void visitCall(NodeTraversal t, Node n) {\n     Node child \u003d n.getFirstChild();\n     JSType childType \u003d getJSType(child).restrictByNotNullOrUndefined();\n     if (!childType.canBeCalled()) {\n         report(t, n, NOT_CALLABLE, childType.toString());\n         ensureTyped(t, n);\n         return;\n     }\n-    if (childType instanceof FunctionType) {\n-        FunctionType functionType \u003d (FunctionType) childType;\n+    if (childType.isFunctionType()) {\n+        FunctionType functionType \u003d childType.toMaybeFunctionType();\n         boolean isExtern \u003d false;\n         JSDocInfo functionJSDocInfo \u003d functionType.getJSDocInfo();\n         if (functionJSDocInfo !\u003d null) {\n             isExtern \u003d functionJSDocInfo.getAssociatedNode().isFromExterns();\n         }\n         if (functionType.isConstructor() \u0026\u0026 !functionType.isNativeObjectType() \u0026\u0026 (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n             report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n         }\n         if (functionType.isOrdinaryFunction() \u0026\u0026 !functionType.getTypeOfThis().isUnknownType() \u0026\u0026 !functionType.getTypeOfThis().isNativeObjectType() \u0026\u0026 !(child.getType() \u003d\u003d Token.GETELEM || child.getType() \u003d\u003d Token.GETPROP)) {\n             report(t, n, EXPECTED_THIS_TYPE, functionType.toString());\n         }\n         visitParameterList(t, n, functionType);\n         ensureTyped(t, n, functionType.getReturnType());\n     } else {\n         ensureTyped(t, n);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "01d1238a2a577d8988a72c29304a3283ca05a29a": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nbroke some tests\n\n*** Original change description ***\n\nAdd toMaybeFunctionType/toMaybeEnumElementType.\nwow, nullability is annoying!\n\nDELTA\u003d318  (48 added, 79 deleted, 191 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3075\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1364 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/18/11, 10:40 AM",
      "commitName": "01d1238a2a577d8988a72c29304a3283ca05a29a",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "8/18/11, 9:38 AM",
      "commitNameOld": "fc0798047ad3aac58a54ea65f9f1c8857745419f",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void visitCall(NodeTraversal t, Node n) {\n    Node child \u003d n.getFirstChild();\n    JSType childType \u003d getJSType(child).restrictByNotNullOrUndefined();\n    if (!childType.canBeCalled()) {\n        report(t, n, NOT_CALLABLE, childType.toString());\n        ensureTyped(t, n);\n        return;\n    }\n    if (childType instanceof FunctionType) {\n        FunctionType functionType \u003d (FunctionType) childType;\n        boolean isExtern \u003d false;\n        JSDocInfo functionJSDocInfo \u003d functionType.getJSDocInfo();\n        if (functionJSDocInfo !\u003d null) {\n            isExtern \u003d functionJSDocInfo.getAssociatedNode().isFromExterns();\n        }\n        if (functionType.isConstructor() \u0026\u0026 !functionType.isNativeObjectType() \u0026\u0026 (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n            report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n        }\n        if (functionType.isOrdinaryFunction() \u0026\u0026 !functionType.getTypeOfThis().isUnknownType() \u0026\u0026 !functionType.getTypeOfThis().isNativeObjectType() \u0026\u0026 !(child.getType() \u003d\u003d Token.GETELEM || child.getType() \u003d\u003d Token.GETPROP)) {\n            report(t, n, EXPECTED_THIS_TYPE, functionType.toString());\n        }\n        visitParameterList(t, n, functionType);\n        ensureTyped(t, n, functionType.getReturnType());\n    } else {\n        ensureTyped(t, n);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1547,
      "functionName": "visitCall",
      "functionAnnotation": "",
      "functionDoc": "Visits a CALL node.\n\n@param t The node traversal object that supplies context, such as the\nscope chain to use in name lookups as well as error reporting.\n@param n The node being visited.\n",
      "diff": "@@ -1,27 +1,27 @@\n private void visitCall(NodeTraversal t, Node n) {\n     Node child \u003d n.getFirstChild();\n     JSType childType \u003d getJSType(child).restrictByNotNullOrUndefined();\n     if (!childType.canBeCalled()) {\n         report(t, n, NOT_CALLABLE, childType.toString());\n         ensureTyped(t, n);\n         return;\n     }\n-    if (childType.isFunctionType()) {\n-        FunctionType functionType \u003d childType.toMaybeFunctionType();\n+    if (childType instanceof FunctionType) {\n+        FunctionType functionType \u003d (FunctionType) childType;\n         boolean isExtern \u003d false;\n         JSDocInfo functionJSDocInfo \u003d functionType.getJSDocInfo();\n         if (functionJSDocInfo !\u003d null) {\n             isExtern \u003d functionJSDocInfo.getAssociatedNode().isFromExterns();\n         }\n         if (functionType.isConstructor() \u0026\u0026 !functionType.isNativeObjectType() \u0026\u0026 (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n             report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n         }\n         if (functionType.isOrdinaryFunction() \u0026\u0026 !functionType.getTypeOfThis().isUnknownType() \u0026\u0026 !functionType.getTypeOfThis().isNativeObjectType() \u0026\u0026 !(child.getType() \u003d\u003d Token.GETELEM || child.getType() \u003d\u003d Token.GETPROP)) {\n             report(t, n, EXPECTED_THIS_TYPE, functionType.toString());\n         }\n         visitParameterList(t, n, functionType);\n         ensureTyped(t, n, functionType.getReturnType());\n     } else {\n         ensureTyped(t, n);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "fc0798047ad3aac58a54ea65f9f1c8857745419f": {
      "type": "Ybodychange",
      "commitMessage": "\nAdd toMaybeFunctionType/toMaybeEnumElementType.\nwow, nullability is annoying!\n\nR\u003djohnlenz\nDELTA\u003d318  (79 added, 48 deleted, 191 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3074\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1363 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/18/11, 9:38 AM",
      "commitName": "fc0798047ad3aac58a54ea65f9f1c8857745419f",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "8/4/11, 9:23 AM",
      "commitNameOld": "0af94b21ceb7f8f0891b85e5713ff93c230e1bb6",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 14.01,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "actualSource": "private void visitCall(NodeTraversal t, Node n) {\n    Node child \u003d n.getFirstChild();\n    JSType childType \u003d getJSType(child).restrictByNotNullOrUndefined();\n    if (!childType.canBeCalled()) {\n        report(t, n, NOT_CALLABLE, childType.toString());\n        ensureTyped(t, n);\n        return;\n    }\n    if (childType.isFunctionType()) {\n        FunctionType functionType \u003d childType.toMaybeFunctionType();\n        boolean isExtern \u003d false;\n        JSDocInfo functionJSDocInfo \u003d functionType.getJSDocInfo();\n        if (functionJSDocInfo !\u003d null) {\n            isExtern \u003d functionJSDocInfo.getAssociatedNode().isFromExterns();\n        }\n        if (functionType.isConstructor() \u0026\u0026 !functionType.isNativeObjectType() \u0026\u0026 (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n            report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n        }\n        if (functionType.isOrdinaryFunction() \u0026\u0026 !functionType.getTypeOfThis().isUnknownType() \u0026\u0026 !functionType.getTypeOfThis().isNativeObjectType() \u0026\u0026 !(child.getType() \u003d\u003d Token.GETELEM || child.getType() \u003d\u003d Token.GETPROP)) {\n            report(t, n, EXPECTED_THIS_TYPE, functionType.toString());\n        }\n        visitParameterList(t, n, functionType);\n        ensureTyped(t, n, functionType.getReturnType());\n    } else {\n        ensureTyped(t, n);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1549,
      "functionName": "visitCall",
      "functionAnnotation": "",
      "functionDoc": "Visits a CALL node.\n\n@param t The node traversal object that supplies context, such as the\nscope chain to use in name lookups as well as error reporting.\n@param n The node being visited.\n",
      "diff": "@@ -1,27 +1,27 @@\n private void visitCall(NodeTraversal t, Node n) {\n     Node child \u003d n.getFirstChild();\n     JSType childType \u003d getJSType(child).restrictByNotNullOrUndefined();\n     if (!childType.canBeCalled()) {\n         report(t, n, NOT_CALLABLE, childType.toString());\n         ensureTyped(t, n);\n         return;\n     }\n-    if (childType instanceof FunctionType) {\n-        FunctionType functionType \u003d (FunctionType) childType;\n+    if (childType.isFunctionType()) {\n+        FunctionType functionType \u003d childType.toMaybeFunctionType();\n         boolean isExtern \u003d false;\n         JSDocInfo functionJSDocInfo \u003d functionType.getJSDocInfo();\n         if (functionJSDocInfo !\u003d null) {\n             isExtern \u003d functionJSDocInfo.getAssociatedNode().isFromExterns();\n         }\n         if (functionType.isConstructor() \u0026\u0026 !functionType.isNativeObjectType() \u0026\u0026 (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n             report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n         }\n         if (functionType.isOrdinaryFunction() \u0026\u0026 !functionType.getTypeOfThis().isUnknownType() \u0026\u0026 !functionType.getTypeOfThis().isNativeObjectType() \u0026\u0026 !(child.getType() \u003d\u003d Token.GETELEM || child.getType() \u003d\u003d Token.GETPROP)) {\n             report(t, n, EXPECTED_THIS_TYPE, functionType.toString());\n         }\n         visitParameterList(t, n, functionType);\n         ensureTyped(t, n, functionType.getReturnType());\n     } else {\n         ensureTyped(t, n);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0af94b21ceb7f8f0891b85e5713ff93c230e1bb6": {
      "type": "Ybodychange",
      "commitMessage": "\nPart 3, source name/input id split:\nChange the construction of JSDocInfo to allow the determination of\nthe source type (extern or not) without requiring the source to be looked\nup by name.\n\nR\u003dnicksantos\nDELTA\u003d99  (51 added, 21 deleted, 27 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2898\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1327 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/4/11, 9:23 AM",
      "commitName": "0af94b21ceb7f8f0891b85e5713ff93c230e1bb6",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "7/28/11, 4:19 PM",
      "commitNameOld": "76abdf11394c0e7515ae63335676ea3657badb45",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 6.71,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "actualSource": "private void visitCall(NodeTraversal t, Node n) {\n    Node child \u003d n.getFirstChild();\n    JSType childType \u003d getJSType(child).restrictByNotNullOrUndefined();\n    if (!childType.canBeCalled()) {\n        report(t, n, NOT_CALLABLE, childType.toString());\n        ensureTyped(t, n);\n        return;\n    }\n    if (childType instanceof FunctionType) {\n        FunctionType functionType \u003d (FunctionType) childType;\n        boolean isExtern \u003d false;\n        JSDocInfo functionJSDocInfo \u003d functionType.getJSDocInfo();\n        if (functionJSDocInfo !\u003d null) {\n            isExtern \u003d functionJSDocInfo.getAssociatedNode().isFromExterns();\n        }\n        if (functionType.isConstructor() \u0026\u0026 !functionType.isNativeObjectType() \u0026\u0026 (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n            report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n        }\n        if (functionType.isOrdinaryFunction() \u0026\u0026 !functionType.getTypeOfThis().isUnknownType() \u0026\u0026 !functionType.getTypeOfThis().isNativeObjectType() \u0026\u0026 !(child.getType() \u003d\u003d Token.GETELEM || child.getType() \u003d\u003d Token.GETPROP)) {\n            report(t, n, EXPECTED_THIS_TYPE, functionType.toString());\n        }\n        visitParameterList(t, n, functionType);\n        ensureTyped(t, n, functionType.getReturnType());\n    } else {\n        ensureTyped(t, n);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1547,
      "functionName": "visitCall",
      "functionAnnotation": "",
      "functionDoc": "Visits a CALL node.\n\n@param t The node traversal object that supplies context, such as the\nscope chain to use in name lookups as well as error reporting.\n@param n The node being visited.\n",
      "diff": "@@ -1,29 +1,27 @@\n private void visitCall(NodeTraversal t, Node n) {\n     Node child \u003d n.getFirstChild();\n     JSType childType \u003d getJSType(child).restrictByNotNullOrUndefined();\n     if (!childType.canBeCalled()) {\n         report(t, n, NOT_CALLABLE, childType.toString());\n         ensureTyped(t, n);\n         return;\n     }\n     if (childType instanceof FunctionType) {\n         FunctionType functionType \u003d (FunctionType) childType;\n         boolean isExtern \u003d false;\n         JSDocInfo functionJSDocInfo \u003d functionType.getJSDocInfo();\n         if (functionJSDocInfo !\u003d null) {\n-            String sourceName \u003d functionJSDocInfo.getSourceName();\n-            CompilerInput functionSource \u003d compiler.getInput(sourceName);\n-            isExtern \u003d functionSource.isExtern();\n+            isExtern \u003d functionJSDocInfo.getAssociatedNode().isFromExterns();\n         }\n         if (functionType.isConstructor() \u0026\u0026 !functionType.isNativeObjectType() \u0026\u0026 (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n             report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n         }\n         if (functionType.isOrdinaryFunction() \u0026\u0026 !functionType.getTypeOfThis().isUnknownType() \u0026\u0026 !functionType.getTypeOfThis().isNativeObjectType() \u0026\u0026 !(child.getType() \u003d\u003d Token.GETELEM || child.getType() \u003d\u003d Token.GETPROP)) {\n             report(t, n, EXPECTED_THIS_TYPE, functionType.toString());\n         }\n         visitParameterList(t, n, functionType);\n         ensureTyped(t, n, functionType.getReturnType());\n     } else {\n         ensureTyped(t, n);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "63df133d0850805818d1e280ba47dcefc9763c89": {
      "type": "Ybodychange",
      "commitMessage": "\nMake sure that functions are called with a \u0027this\u0027 type.\nFixes issue 440\n\nR\u003dzhuyi\nDELTA\u003d60  (59 added, 0 deleted, 1 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2097\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1147 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/31/11, 8:14 AM",
      "commitName": "63df133d0850805818d1e280ba47dcefc9763c89",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "5/18/11, 9:53 AM",
      "commitNameOld": "aa7c8f99aa0cf5b8016e139b383aa0dd13f68051",
      "commitAuthorOld": "zhuyi@google.com",
      "daysBetweenCommits": 12.93,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "actualSource": "private void visitCall(NodeTraversal t, Node n) {\n    Node child \u003d n.getFirstChild();\n    JSType childType \u003d getJSType(child).restrictByNotNullOrUndefined();\n    if (!childType.canBeCalled()) {\n        report(t, n, NOT_CALLABLE, childType.toString());\n        ensureTyped(t, n);\n        return;\n    }\n    if (childType instanceof FunctionType) {\n        FunctionType functionType \u003d (FunctionType) childType;\n        boolean isExtern \u003d false;\n        JSDocInfo functionJSDocInfo \u003d functionType.getJSDocInfo();\n        if (functionJSDocInfo !\u003d null) {\n            String sourceName \u003d functionJSDocInfo.getSourceName();\n            CompilerInput functionSource \u003d compiler.getInput(sourceName);\n            isExtern \u003d functionSource.isExtern();\n        }\n        if (functionType.isConstructor() \u0026\u0026 !functionType.isNativeObjectType() \u0026\u0026 (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n            report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n        }\n        if (functionType.isOrdinaryFunction() \u0026\u0026 !functionType.getTypeOfThis().isUnknownType() \u0026\u0026 !functionType.getTypeOfThis().isNativeObjectType() \u0026\u0026 !(child.getType() \u003d\u003d Token.GETELEM || child.getType() \u003d\u003d Token.GETPROP)) {\n            report(t, n, EXPECTED_THIS_TYPE, functionType.toString());\n        }\n        visitParameterList(t, n, functionType);\n        ensureTyped(t, n, functionType.getReturnType());\n    } else {\n        ensureTyped(t, n);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1544,
      "functionName": "visitCall",
      "functionAnnotation": "",
      "functionDoc": "Visits a CALL node.\n\n@param t The node traversal object that supplies context, such as the\nscope chain to use in name lookups as well as error reporting.\n@param n The node being visited.\n",
      "diff": "@@ -1,26 +1,29 @@\n private void visitCall(NodeTraversal t, Node n) {\n     Node child \u003d n.getFirstChild();\n     JSType childType \u003d getJSType(child).restrictByNotNullOrUndefined();\n     if (!childType.canBeCalled()) {\n         report(t, n, NOT_CALLABLE, childType.toString());\n         ensureTyped(t, n);\n         return;\n     }\n     if (childType instanceof FunctionType) {\n         FunctionType functionType \u003d (FunctionType) childType;\n         boolean isExtern \u003d false;\n         JSDocInfo functionJSDocInfo \u003d functionType.getJSDocInfo();\n         if (functionJSDocInfo !\u003d null) {\n             String sourceName \u003d functionJSDocInfo.getSourceName();\n             CompilerInput functionSource \u003d compiler.getInput(sourceName);\n             isExtern \u003d functionSource.isExtern();\n         }\n         if (functionType.isConstructor() \u0026\u0026 !functionType.isNativeObjectType() \u0026\u0026 (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n             report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n         }\n+        if (functionType.isOrdinaryFunction() \u0026\u0026 !functionType.getTypeOfThis().isUnknownType() \u0026\u0026 !functionType.getTypeOfThis().isNativeObjectType() \u0026\u0026 !(child.getType() \u003d\u003d Token.GETELEM || child.getType() \u003d\u003d Token.GETPROP)) {\n+            report(t, n, EXPECTED_THIS_TYPE, functionType.toString());\n+        }\n         visitParameterList(t, n, functionType);\n         ensureTyped(t, n, functionType.getReturnType());\n     } else {\n         ensureTyped(t, n);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "fdce3fde269834d9907127955701fc6d783fb3bc": {
      "type": "Ybodychange",
      "commitMessage": "\nSuppress warnings about constructors called without the \"new\" keyword when the constructor is both defined in an extern file and has an explicit @return annotation. This supports the factory design pattern used in many 3rd party libraries.\n\nCommitted by Chad.\n\nRevision created by MOE tool push_codebase.\n\nR\u003dacleung\nDELTA\u003d1897  (819 added, 919 deleted, 159 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1013\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@934 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/23/11, 3:36 PM",
      "commitName": "fdce3fde269834d9907127955701fc6d783fb3bc",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "3/21/11, 2:54 PM",
      "commitNameOld": "b41c7bd823a9d7df8b9ec276ff3ce4286ab1e890",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 2.03,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "actualSource": "private void visitCall(NodeTraversal t, Node n) {\n    Node child \u003d n.getFirstChild();\n    JSType childType \u003d getJSType(child).restrictByNotNullOrUndefined();\n    if (!childType.canBeCalled()) {\n        report(t, n, NOT_CALLABLE, childType.toString());\n        ensureTyped(t, n);\n        return;\n    }\n    if (childType instanceof FunctionType) {\n        FunctionType functionType \u003d (FunctionType) childType;\n        boolean isExtern \u003d false;\n        JSDocInfo functionJSDocInfo \u003d functionType.getJSDocInfo();\n        if (functionJSDocInfo !\u003d null) {\n            String sourceName \u003d functionJSDocInfo.getSourceName();\n            CompilerInput functionSource \u003d compiler.getInput(sourceName);\n            isExtern \u003d functionSource.isExtern();\n        }\n        if (functionType.isConstructor() \u0026\u0026 !functionType.isNativeObjectType() \u0026\u0026 (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n            report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n        }\n        visitParameterList(t, n, functionType);\n        ensureTyped(t, n, functionType.getReturnType());\n    } else {\n        ensureTyped(t, n);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1437,
      "functionName": "visitCall",
      "functionAnnotation": "",
      "functionDoc": "Visits a CALL node.\n\n@param t The node traversal object that supplies context, such as the\nscope chain to use in name lookups as well as error reporting.\n@param n The node being visited.\n",
      "diff": "@@ -1,19 +1,26 @@\n private void visitCall(NodeTraversal t, Node n) {\n     Node child \u003d n.getFirstChild();\n     JSType childType \u003d getJSType(child).restrictByNotNullOrUndefined();\n     if (!childType.canBeCalled()) {\n         report(t, n, NOT_CALLABLE, childType.toString());\n         ensureTyped(t, n);\n         return;\n     }\n     if (childType instanceof FunctionType) {\n         FunctionType functionType \u003d (FunctionType) childType;\n-        if (functionType.isConstructor() \u0026\u0026 !functionType.isNativeObjectType()) {\n+        boolean isExtern \u003d false;\n+        JSDocInfo functionJSDocInfo \u003d functionType.getJSDocInfo();\n+        if (functionJSDocInfo !\u003d null) {\n+            String sourceName \u003d functionJSDocInfo.getSourceName();\n+            CompilerInput functionSource \u003d compiler.getInput(sourceName);\n+            isExtern \u003d functionSource.isExtern();\n+        }\n+        if (functionType.isConstructor() \u0026\u0026 !functionType.isNativeObjectType() \u0026\u0026 (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n             report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n         }\n         visitParameterList(t, n, functionType);\n         ensureTyped(t, n, functionType.getReturnType());\n     } else {\n         ensureTyped(t, n);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b41c7bd823a9d7df8b9ec276ff3ce4286ab1e890": {
      "type": "Ybodychange",
      "commitMessage": "\nRemove RETURN statement token for operator precedent table\n\nR\u003dnicksantos\nDELTA\u003d1  (0 added, 1 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d973\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@921 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/21/11, 2:54 PM",
      "commitName": "b41c7bd823a9d7df8b9ec276ff3ce4286ab1e890",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "3/22/11, 2:17 PM",
      "commitNameOld": "d63b204e3e8f5fd9b78ba8408c9599dda122694c",
      "commitAuthorOld": "chadkillingsworth@missouristate.edu",
      "daysBetweenCommits": -0.97,
      "commitsBetweenForRepo": 0,
      "commitsBetweenForFile": 0,
      "actualSource": "private void visitCall(NodeTraversal t, Node n) {\n    Node child \u003d n.getFirstChild();\n    JSType childType \u003d getJSType(child).restrictByNotNullOrUndefined();\n    if (!childType.canBeCalled()) {\n        report(t, n, NOT_CALLABLE, childType.toString());\n        ensureTyped(t, n);\n        return;\n    }\n    if (childType instanceof FunctionType) {\n        FunctionType functionType \u003d (FunctionType) childType;\n        if (functionType.isConstructor() \u0026\u0026 !functionType.isNativeObjectType()) {\n            report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n        }\n        visitParameterList(t, n, functionType);\n        ensureTyped(t, n, functionType.getReturnType());\n    } else {\n        ensureTyped(t, n);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1437,
      "functionName": "visitCall",
      "functionAnnotation": "",
      "functionDoc": "Visits a CALL node.\n\n@param t The node traversal object that supplies context, such as the\nscope chain to use in name lookups as well as error reporting.\n@param n The node being visited.\n",
      "diff": "@@ -1,26 +1,19 @@\n private void visitCall(NodeTraversal t, Node n) {\n     Node child \u003d n.getFirstChild();\n     JSType childType \u003d getJSType(child).restrictByNotNullOrUndefined();\n     if (!childType.canBeCalled()) {\n         report(t, n, NOT_CALLABLE, childType.toString());\n         ensureTyped(t, n);\n         return;\n     }\n     if (childType instanceof FunctionType) {\n         FunctionType functionType \u003d (FunctionType) childType;\n-        boolean isExtern \u003d false;\n-        JSDocInfo functionJSDocInfo \u003d functionType.getJSDocInfo();\n-        if (functionJSDocInfo !\u003d null) {\n-            String sourceName \u003d functionJSDocInfo.getSourceName();\n-            CompilerInput functionSource \u003d compiler.getInput(sourceName);\n-            isExtern \u003d functionSource.isExtern();\n-        }\n-        if (functionType.isConstructor() \u0026\u0026 !functionType.isNativeObjectType() \u0026\u0026 (functionType.getReturnType().isUnknownType() || !isExtern)) {\n+        if (functionType.isConstructor() \u0026\u0026 !functionType.isNativeObjectType()) {\n             report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n         }\n         visitParameterList(t, n, functionType);\n         ensureTyped(t, n, functionType.getReturnType());\n     } else {\n         ensureTyped(t, n);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d63b204e3e8f5fd9b78ba8408c9599dda122694c": {
      "type": "Ybodychange",
      "commitMessage": "Suppress warnings about constructors called without the \"new\" keyword when the constructor is both defined in an extern file and has an explicit @return annotation. This supports the factory design pattern used in many 3rd party libraries.\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@917 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/22/11, 2:17 PM",
      "commitName": "d63b204e3e8f5fd9b78ba8408c9599dda122694c",
      "commitAuthor": "chadkillingsworth@missouristate.edu",
      "commitDateOld": "3/7/11, 12:59 PM",
      "commitNameOld": "5709ec1d0bbe5b7726a14d06f7eab9c35150e314",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 15.01,
      "commitsBetweenForRepo": 54,
      "commitsBetweenForFile": 1,
      "actualSource": "private void visitCall(NodeTraversal t, Node n) {\n    Node child \u003d n.getFirstChild();\n    JSType childType \u003d getJSType(child).restrictByNotNullOrUndefined();\n    if (!childType.canBeCalled()) {\n        report(t, n, NOT_CALLABLE, childType.toString());\n        ensureTyped(t, n);\n        return;\n    }\n    if (childType instanceof FunctionType) {\n        FunctionType functionType \u003d (FunctionType) childType;\n        boolean isExtern \u003d false;\n        JSDocInfo functionJSDocInfo \u003d functionType.getJSDocInfo();\n        if (functionJSDocInfo !\u003d null) {\n            String sourceName \u003d functionJSDocInfo.getSourceName();\n            CompilerInput functionSource \u003d compiler.getInput(sourceName);\n            isExtern \u003d functionSource.isExtern();\n        }\n        if (functionType.isConstructor() \u0026\u0026 !functionType.isNativeObjectType() \u0026\u0026 (functionType.getReturnType().isUnknownType() || !isExtern)) {\n            report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n        }\n        visitParameterList(t, n, functionType);\n        ensureTyped(t, n, functionType.getReturnType());\n    } else {\n        ensureTyped(t, n);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1437,
      "functionName": "visitCall",
      "functionAnnotation": "",
      "functionDoc": "Visits a CALL node.\n\n@param t The node traversal object that supplies context, such as the\nscope chain to use in name lookups as well as error reporting.\n@param n The node being visited.\n",
      "diff": "@@ -1,19 +1,26 @@\n private void visitCall(NodeTraversal t, Node n) {\n     Node child \u003d n.getFirstChild();\n     JSType childType \u003d getJSType(child).restrictByNotNullOrUndefined();\n     if (!childType.canBeCalled()) {\n         report(t, n, NOT_CALLABLE, childType.toString());\n         ensureTyped(t, n);\n         return;\n     }\n     if (childType instanceof FunctionType) {\n         FunctionType functionType \u003d (FunctionType) childType;\n-        if (functionType.isConstructor() \u0026\u0026 !functionType.isNativeObjectType()) {\n+        boolean isExtern \u003d false;\n+        JSDocInfo functionJSDocInfo \u003d functionType.getJSDocInfo();\n+        if (functionJSDocInfo !\u003d null) {\n+            String sourceName \u003d functionJSDocInfo.getSourceName();\n+            CompilerInput functionSource \u003d compiler.getInput(sourceName);\n+            isExtern \u003d functionSource.isExtern();\n+        }\n+        if (functionType.isConstructor() \u0026\u0026 !functionType.isNativeObjectType() \u0026\u0026 (functionType.getReturnType().isUnknownType() || !isExtern)) {\n             report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n         }\n         visitParameterList(t, n, functionType);\n         ensureTyped(t, n, functionType.getReturnType());\n     } else {\n         ensureTyped(t, n);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0895c28861ee4a1969acc858f1a703ab11ddc64c": {
      "type": "Ybodychange",
      "commitMessage": "\n\nChange on 2010/06/16 by johnlenz\n\n        Remove unused member variable.\n\n        R\u003dacleung\n        DELTA\u003d17  (0 added, 12 deleted, 5 changed)\n\nChange on 2010/06/16 by acleung\n\n        Make @notypecheck behaves like it is doing typechecking except for reporting errors.\n\n        R\u003djohnlenz\n        DELTA\u003d144  (89 added, 17 deleted, 38 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d28012\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@245 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/17/10, 10:16 AM",
      "commitName": "0895c28861ee4a1969acc858f1a703ab11ddc64c",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "5/3/10, 7:03 AM",
      "commitNameOld": "9147da9979fb00599efd700fa5e0cccfa93d25a5",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 45.13,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "actualSource": "private void visitCall(NodeTraversal t, Node n) {\n    Node child \u003d n.getFirstChild();\n    JSType childType \u003d getJSType(child).restrictByNotNullOrUndefined();\n    if (!childType.canBeCalled()) {\n        report(t, n, NOT_CALLABLE, childType.toString());\n        ensureTyped(t, n);\n        return;\n    }\n    if (childType instanceof FunctionType) {\n        FunctionType functionType \u003d (FunctionType) childType;\n        if (functionType.isConstructor() \u0026\u0026 !functionType.isNativeObjectType()) {\n            report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n        }\n        visitParameterList(t, n, functionType);\n        ensureTyped(t, n, functionType.getReturnType());\n    } else {\n        ensureTyped(t, n);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1348,
      "functionName": "visitCall",
      "functionAnnotation": "",
      "functionDoc": "Visits a CALL node.\n\n@param t The node traversal object that supplies context, such as the\nscope chain to use in name lookups as well as error reporting.\n@param n The node being visited.\n",
      "diff": "@@ -1,19 +1,19 @@\n private void visitCall(NodeTraversal t, Node n) {\n     Node child \u003d n.getFirstChild();\n     JSType childType \u003d getJSType(child).restrictByNotNullOrUndefined();\n     if (!childType.canBeCalled()) {\n-        t.report(n, NOT_CALLABLE, childType.toString());\n+        report(t, n, NOT_CALLABLE, childType.toString());\n         ensureTyped(t, n);\n         return;\n     }\n     if (childType instanceof FunctionType) {\n         FunctionType functionType \u003d (FunctionType) childType;\n         if (functionType.isConstructor() \u0026\u0026 !functionType.isNativeObjectType()) {\n-            t.report(n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n+            report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n         }\n         visitParameterList(t, n, functionType);\n         ensureTyped(t, n, functionType.getReturnType());\n     } else {\n         ensureTyped(t, n);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,19 @@\n+private void visitCall(NodeTraversal t, Node n) {\n+    Node child \u003d n.getFirstChild();\n+    JSType childType \u003d getJSType(child).restrictByNotNullOrUndefined();\n+    if (!childType.canBeCalled()) {\n+        t.report(n, NOT_CALLABLE, childType.toString());\n+        ensureTyped(t, n);\n+        return;\n+    }\n+    if (childType instanceof FunctionType) {\n+        FunctionType functionType \u003d (FunctionType) childType;\n+        if (functionType.isConstructor() \u0026\u0026 !functionType.isNativeObjectType()) {\n+            t.report(n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n+        }\n+        visitParameterList(t, n, functionType);\n+        ensureTyped(t, n, functionType.getReturnType());\n+    } else {\n+        ensureTyped(t, n);\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void visitCall(NodeTraversal t, Node n) {\n    Node child \u003d n.getFirstChild();\n    JSType childType \u003d getJSType(child).restrictByNotNullOrUndefined();\n    if (!childType.canBeCalled()) {\n        t.report(n, NOT_CALLABLE, childType.toString());\n        ensureTyped(t, n);\n        return;\n    }\n    if (childType instanceof FunctionType) {\n        FunctionType functionType \u003d (FunctionType) childType;\n        if (functionType.isConstructor() \u0026\u0026 !functionType.isNativeObjectType()) {\n            t.report(n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n        }\n        visitParameterList(t, n, functionType);\n        ensureTyped(t, n, functionType.getReturnType());\n    } else {\n        ensureTyped(t, n);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1335,
      "functionName": "visitCall",
      "functionAnnotation": "",
      "functionDoc": "Visits a CALL node.\n\n@param t The node traversal object that supplies context, such as the\nscope chain to use in name lookups as well as error reporting.\n@param n The node being visited.\n"
    }
  }
}