{
  "origin": "codeshovel",
  "repositoryName": "Closure-33b",
  "repositoryPath": "/tmp/Closure-33b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FunctionTypeBuilder.java",
  "functionName": "getOrCreateConstructor",
  "functionId": "getOrCreateConstructor",
  "sourceFilePath": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
  "functionAnnotation": "",
  "functionDoc": "Returns a constructor function either by returning it from the\nregistry if it exists or creating and registering a new type. If\nthere is already a type, then warn if the existing type is\ndifferent than the one we are creating, though still return the\nexisting function if possible.  The primary purpose of this is\nthat registering a constructor will fail for all built-in types\nthat are initialized in {@link JSTypeRegistry}.  We a) want to\nmake sure that the type information specified in the externs file\nmatches what is in the registry and b) annotate the externs with\nthe {@link JSType} from the registry so that there are not two\nseparate JSType objects for one type.\n",
  "functionStartLine": 662,
  "functionEndLine": 698,
  "numCommitsSeen": 46,
  "timeTaken": 1943,
  "changeHistory": [
    "dff730a3759cad9c491f72d9905eee93962d3d35",
    "46bf070288b2bc34b324e9bbacd293083cb97c6e",
    "e7ad2425c384dcb18a34bec8e147a91c658d5118",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "dff730a3759cad9c491f72d9905eee93962d3d35": "Ybodychange",
    "46bf070288b2bc34b324e9bbacd293083cb97c6e": "Ybodychange",
    "e7ad2425c384dcb18a34bec8e147a91c658d5118": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "dff730a3759cad9c491f72d9905eee93962d3d35": {
      "type": "Ybodychange",
      "commitMessage": "\nBreak out basic function analysis into a separate pass, rather\nthan trying to do it as we go.\nThere should be no functional change, but this should make it\na lot easier to move things around in the future.\n\nR\u003dacleung\nDELTA\u003d332  (224 added, 89 deleted, 19 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3318\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1460 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/21/11, 5:18 PM",
      "commitName": "dff730a3759cad9c491f72d9905eee93962d3d35",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "9/7/11, 8:05 AM",
      "commitNameOld": "46bf070288b2bc34b324e9bbacd293083cb97c6e",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 14.38,
      "commitsBetweenForRepo": 46,
      "commitsBetweenForFile": 1,
      "actualSource": "private FunctionType getOrCreateConstructor() {\n    FunctionType fnType \u003d typeRegistry.createConstructorType(fnName, contents.getSourceNode(), parametersNode, returnType);\n    JSType existingType \u003d typeRegistry.getType(fnName);\n    if (existingType !\u003d null) {\n        boolean isInstanceObject \u003d existingType.isInstanceType();\n        if (isInstanceObject || fnName.equals(\"Function\")) {\n            FunctionType existingFn \u003d isInstanceObject ? existingType.toObjectType().getConstructor() : typeRegistry.getNativeFunctionType(FUNCTION_FUNCTION_TYPE);\n            if (existingFn.getSource() \u003d\u003d null) {\n                existingFn.setSource(contents.getSourceNode());\n            }\n            if (!existingFn.hasEqualCallType(fnType)) {\n                reportWarning(TYPE_REDEFINITION, fnName, fnType.toString(), existingFn.toString());\n            }\n            return existingFn;\n        } else {\n        }\n    }\n    maybeSetBaseType(fnType);\n    if (getScopeDeclaredIn().isGlobal() \u0026\u0026 !fnName.isEmpty()) {\n        typeRegistry.declareType(fnName, fnType.getInstanceType());\n    }\n    return fnType;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
      "functionStartLine": 644,
      "functionName": "getOrCreateConstructor",
      "functionAnnotation": "",
      "functionDoc": "Returns a constructor function either by returning it from the\nregistry if it exists or creating and registering a new type. If\nthere is already a type, then warn if the existing type is\ndifferent than the one we are creating, though still return the\nexisting function if possible.  The primary purpose of this is\nthat registering a constructor will fail for all built-in types\nthat are initialized in {@link JSTypeRegistry}.  We a) want to\nmake sure that the type information specified in the externs file\nmatches what is in the registry and b) annotate the externs with\nthe {@link JSType} from the registry so that there are not two\nseparate JSType objects for one type.\n",
      "diff": "@@ -1,23 +1,23 @@\n private FunctionType getOrCreateConstructor() {\n-    FunctionType fnType \u003d typeRegistry.createConstructorType(fnName, sourceNode, parametersNode, returnType);\n+    FunctionType fnType \u003d typeRegistry.createConstructorType(fnName, contents.getSourceNode(), parametersNode, returnType);\n     JSType existingType \u003d typeRegistry.getType(fnName);\n     if (existingType !\u003d null) {\n         boolean isInstanceObject \u003d existingType.isInstanceType();\n         if (isInstanceObject || fnName.equals(\"Function\")) {\n             FunctionType existingFn \u003d isInstanceObject ? existingType.toObjectType().getConstructor() : typeRegistry.getNativeFunctionType(FUNCTION_FUNCTION_TYPE);\n             if (existingFn.getSource() \u003d\u003d null) {\n-                existingFn.setSource(sourceNode);\n+                existingFn.setSource(contents.getSourceNode());\n             }\n             if (!existingFn.hasEqualCallType(fnType)) {\n                 reportWarning(TYPE_REDEFINITION, fnName, fnType.toString(), existingFn.toString());\n             }\n             return existingFn;\n         } else {\n         }\n     }\n     maybeSetBaseType(fnType);\n     if (getScopeDeclaredIn().isGlobal() \u0026\u0026 !fnName.isEmpty()) {\n         typeRegistry.declareType(fnName, fnType.getInstanceType());\n     }\n     return fnType;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "46bf070288b2bc34b324e9bbacd293083cb97c6e": {
      "type": "Ybodychange",
      "commitMessage": "\nMake InstanceObjectType package-private\nThere\u0027s not really any reason to use this class directly.\n\nR\u003dtylerg\nDELTA\u003d59  (11 added, 9 deleted, 39 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3204\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1414 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/7/11, 8:05 AM",
      "commitName": "46bf070288b2bc34b324e9bbacd293083cb97c6e",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "8/31/11, 8:11 AM",
      "commitNameOld": "a2dd1662d90524a12a99a9fa7d4308568938d963",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 7.0,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "actualSource": "private FunctionType getOrCreateConstructor() {\n    FunctionType fnType \u003d typeRegistry.createConstructorType(fnName, sourceNode, parametersNode, returnType);\n    JSType existingType \u003d typeRegistry.getType(fnName);\n    if (existingType !\u003d null) {\n        boolean isInstanceObject \u003d existingType.isInstanceType();\n        if (isInstanceObject || fnName.equals(\"Function\")) {\n            FunctionType existingFn \u003d isInstanceObject ? existingType.toObjectType().getConstructor() : typeRegistry.getNativeFunctionType(FUNCTION_FUNCTION_TYPE);\n            if (existingFn.getSource() \u003d\u003d null) {\n                existingFn.setSource(sourceNode);\n            }\n            if (!existingFn.hasEqualCallType(fnType)) {\n                reportWarning(TYPE_REDEFINITION, fnName, fnType.toString(), existingFn.toString());\n            }\n            return existingFn;\n        } else {\n        }\n    }\n    maybeSetBaseType(fnType);\n    if (getScopeDeclaredIn().isGlobal() \u0026\u0026 !fnName.isEmpty()) {\n        typeRegistry.declareType(fnName, fnType.getInstanceType());\n    }\n    return fnType;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
      "functionStartLine": 669,
      "functionName": "getOrCreateConstructor",
      "functionAnnotation": "",
      "functionDoc": "Returns a constructor function either by returning it from the\nregistry if it exists or creating and registering a new type. If\nthere is already a type, then warn if the existing type is\ndifferent than the one we are creating, though still return the\nexisting function if possible.  The primary purpose of this is\nthat registering a constructor will fail for all built-in types\nthat are initialized in {@link JSTypeRegistry}.  We a) want to\nmake sure that the type information specified in the externs file\nmatches what is in the registry and b) annotate the externs with\nthe {@link JSType} from the registry so that there are not two\nseparate JSType objects for one type.\n",
      "diff": "@@ -1,23 +1,23 @@\n private FunctionType getOrCreateConstructor() {\n     FunctionType fnType \u003d typeRegistry.createConstructorType(fnName, sourceNode, parametersNode, returnType);\n     JSType existingType \u003d typeRegistry.getType(fnName);\n     if (existingType !\u003d null) {\n-        boolean isInstanceObject \u003d existingType instanceof InstanceObjectType;\n+        boolean isInstanceObject \u003d existingType.isInstanceType();\n         if (isInstanceObject || fnName.equals(\"Function\")) {\n-            FunctionType existingFn \u003d isInstanceObject ? ((InstanceObjectType) existingType).getConstructor() : typeRegistry.getNativeFunctionType(FUNCTION_FUNCTION_TYPE);\n+            FunctionType existingFn \u003d isInstanceObject ? existingType.toObjectType().getConstructor() : typeRegistry.getNativeFunctionType(FUNCTION_FUNCTION_TYPE);\n             if (existingFn.getSource() \u003d\u003d null) {\n                 existingFn.setSource(sourceNode);\n             }\n             if (!existingFn.hasEqualCallType(fnType)) {\n                 reportWarning(TYPE_REDEFINITION, fnName, fnType.toString(), existingFn.toString());\n             }\n             return existingFn;\n         } else {\n         }\n     }\n     maybeSetBaseType(fnType);\n     if (getScopeDeclaredIn().isGlobal() \u0026\u0026 !fnName.isEmpty()) {\n         typeRegistry.declareType(fnName, fnType.getInstanceType());\n     }\n     return fnType;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e7ad2425c384dcb18a34bec8e147a91c658d5118": {
      "type": "Ybodychange",
      "commitMessage": "\nBe a bit better about constructors defined in local scopes on\nglobal objects.\n\nR\u003djohnlenz\nDELTA\u003d74  (72 added, 0 deleted, 2 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d29\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@579 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/30/10, 5:12 PM",
      "commitName": "e7ad2425c384dcb18a34bec8e147a91c658d5118",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "11/12/10, 1:38 PM",
      "commitNameOld": "25904fa3b61c1d6ef494dd7839eae1d1f49ff38d",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 18.15,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "actualSource": "private FunctionType getOrCreateConstructor() {\n    FunctionType fnType \u003d typeRegistry.createConstructorType(fnName, sourceNode, parametersNode, returnType);\n    JSType existingType \u003d typeRegistry.getType(fnName);\n    if (existingType !\u003d null) {\n        boolean isInstanceObject \u003d existingType instanceof InstanceObjectType;\n        if (isInstanceObject || fnName.equals(\"Function\")) {\n            FunctionType existingFn \u003d isInstanceObject ? ((InstanceObjectType) existingType).getConstructor() : typeRegistry.getNativeFunctionType(FUNCTION_FUNCTION_TYPE);\n            if (existingFn.getSource() \u003d\u003d null) {\n                existingFn.setSource(sourceNode);\n            }\n            if (!existingFn.hasEqualCallType(fnType)) {\n                reportWarning(TYPE_REDEFINITION, fnName, fnType.toString(), existingFn.toString());\n            }\n            return existingFn;\n        } else {\n        }\n    }\n    maybeSetBaseType(fnType);\n    if (getScopeDeclaredIn().isGlobal() \u0026\u0026 !fnName.isEmpty()) {\n        typeRegistry.declareType(fnName, fnType.getInstanceType());\n    }\n    return fnType;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
      "functionStartLine": 672,
      "functionName": "getOrCreateConstructor",
      "functionAnnotation": "",
      "functionDoc": "Returns a constructor function either by returning it from the\nregistry if it exists or creating and registering a new type. If\nthere is already a type, then warn if the existing type is\ndifferent than the one we are creating, though still return the\nexisting function if possible.  The primary purpose of this is\nthat registering a constructor will fail for all built-in types\nthat are initialized in {@link JSTypeRegistry}.  We a) want to\nmake sure that the type information specified in the externs file\nmatches what is in the registry and b) annotate the externs with\nthe {@link JSType} from the registry so that there are not two\nseparate JSType objects for one type.\n",
      "diff": "@@ -1,23 +1,23 @@\n private FunctionType getOrCreateConstructor() {\n     FunctionType fnType \u003d typeRegistry.createConstructorType(fnName, sourceNode, parametersNode, returnType);\n     JSType existingType \u003d typeRegistry.getType(fnName);\n     if (existingType !\u003d null) {\n         boolean isInstanceObject \u003d existingType instanceof InstanceObjectType;\n         if (isInstanceObject || fnName.equals(\"Function\")) {\n             FunctionType existingFn \u003d isInstanceObject ? ((InstanceObjectType) existingType).getConstructor() : typeRegistry.getNativeFunctionType(FUNCTION_FUNCTION_TYPE);\n             if (existingFn.getSource() \u003d\u003d null) {\n                 existingFn.setSource(sourceNode);\n             }\n             if (!existingFn.hasEqualCallType(fnType)) {\n                 reportWarning(TYPE_REDEFINITION, fnName, fnType.toString(), existingFn.toString());\n             }\n             return existingFn;\n         } else {\n         }\n     }\n     maybeSetBaseType(fnType);\n-    if (scope.isGlobal() \u0026\u0026 !fnName.isEmpty()) {\n+    if (getScopeDeclaredIn().isGlobal() \u0026\u0026 !fnName.isEmpty()) {\n         typeRegistry.declareType(fnName, fnType.getInstanceType());\n     }\n     return fnType;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,23 @@\n+private FunctionType getOrCreateConstructor() {\n+    FunctionType fnType \u003d typeRegistry.createConstructorType(fnName, sourceNode, parametersNode, returnType);\n+    JSType existingType \u003d typeRegistry.getType(fnName);\n+    if (existingType !\u003d null) {\n+        boolean isInstanceObject \u003d existingType instanceof InstanceObjectType;\n+        if (isInstanceObject || fnName.equals(\"Function\")) {\n+            FunctionType existingFn \u003d isInstanceObject ? ((InstanceObjectType) existingType).getConstructor() : typeRegistry.getNativeFunctionType(FUNCTION_FUNCTION_TYPE);\n+            if (existingFn.getSource() \u003d\u003d null) {\n+                existingFn.setSource(sourceNode);\n+            }\n+            if (!existingFn.hasEqualCallType(fnType)) {\n+                reportWarning(TYPE_REDEFINITION, fnName, fnType.toString(), existingFn.toString());\n+            }\n+            return existingFn;\n+        } else {\n+        }\n+    }\n+    maybeSetBaseType(fnType);\n+    if (scope.isGlobal() \u0026\u0026 !fnName.isEmpty()) {\n+        typeRegistry.declareType(fnName, fnType.getInstanceType());\n+    }\n+    return fnType;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private FunctionType getOrCreateConstructor() {\n    FunctionType fnType \u003d typeRegistry.createConstructorType(fnName, sourceNode, parametersNode, returnType);\n    JSType existingType \u003d typeRegistry.getType(fnName);\n    if (existingType !\u003d null) {\n        boolean isInstanceObject \u003d existingType instanceof InstanceObjectType;\n        if (isInstanceObject || fnName.equals(\"Function\")) {\n            FunctionType existingFn \u003d isInstanceObject ? ((InstanceObjectType) existingType).getConstructor() : typeRegistry.getNativeFunctionType(FUNCTION_FUNCTION_TYPE);\n            if (existingFn.getSource() \u003d\u003d null) {\n                existingFn.setSource(sourceNode);\n            }\n            if (!existingFn.hasEqualCallType(fnType)) {\n                reportWarning(TYPE_REDEFINITION, fnName, fnType.toString(), existingFn.toString());\n            }\n            return existingFn;\n        } else {\n        }\n    }\n    maybeSetBaseType(fnType);\n    if (scope.isGlobal() \u0026\u0026 !fnName.isEmpty()) {\n        typeRegistry.declareType(fnName, fnType.getInstanceType());\n    }\n    return fnType;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
      "functionStartLine": 520,
      "functionName": "getOrCreateConstructor",
      "functionAnnotation": "",
      "functionDoc": "Returns a constructor function either by returning it from the\nregistry if it exists or creating and registering a new type. If\nthere is already a type, then warn if the existing type is\ndifferent than the one we are creating, though still return the\nexisting function if possible.  The primary purpose of this is\nthat registering a constructor will fail for all built-in types\nthat are initialized in {@link JSTypeRegistry}.  We a) want to\nmake sure that the type information specified in the externs file\nmatches what is in the registry and b) annotate the externs with\nthe {@link JSType} from the registry so that there are not two\nseparate JSType objects for one type.\n"
    }
  }
}