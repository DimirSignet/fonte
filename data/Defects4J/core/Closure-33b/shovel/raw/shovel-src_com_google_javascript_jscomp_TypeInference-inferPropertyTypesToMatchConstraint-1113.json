{
  "origin": "codeshovel",
  "repositoryName": "Closure-33b",
  "repositoryPath": "/tmp/Closure-33b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TypeInference.java",
  "functionName": "inferPropertyTypesToMatchConstraint",
  "functionId": "inferPropertyTypesToMatchConstraint___type-JSType__constraint-JSType",
  "sourceFilePath": "src/com/google/javascript/jscomp/TypeInference.java",
  "functionAnnotation": "",
  "functionDoc": "Suppose X is an object with inferred properties.\nSuppose also that X is used in a way where it would only type-check\ncorrectly if some of those properties are widened.\nThen we should be polite and automatically widen X\u0027s properties for him.\n\nFor a concrete example, consider:\nparam x {{prop: (number|undefined)}}\nfunction f(x) {}\nf({});\n\nIf we give the anonymous object an inferred property of (number|undefined),\nthen this code will type-check appropriately.\n",
  "functionStartLine": 1113,
  "functionEndLine": 1124,
  "numCommitsSeen": 69,
  "timeTaken": 3102,
  "changeHistory": [
    "22784dc96c391b01692ce686eb93b9aa0ef74ede",
    "c8d189698a5bf3362ccd820b42f3d62c550ec983",
    "03ce555bcedcf98d99de1b4f8a6238ba75ee6850",
    "c590fe51732eea3b712c7f894ba3f5a9d23613e1",
    "643bd6436989e7a957ccefeed8ea5ecc8e84a748"
  ],
  "changeHistoryShort": {
    "22784dc96c391b01692ce686eb93b9aa0ef74ede": "Ybodychange",
    "c8d189698a5bf3362ccd820b42f3d62c550ec983": "Ybodychange",
    "03ce555bcedcf98d99de1b4f8a6238ba75ee6850": "Ybodychange",
    "c590fe51732eea3b712c7f894ba3f5a9d23613e1": "Ybodychange",
    "643bd6436989e7a957ccefeed8ea5ecc8e84a748": "Yintroduced"
  },
  "changeHistoryDetails": {
    "22784dc96c391b01692ce686eb93b9aa0ef74ede": {
      "type": "Ybodychange",
      "commitMessage": "\npush reverse-inference into the type system\nfixes issue 669\n\nR\u003djohnlenz\nDELTA\u003d77  (62 added, 13 deleted, 2 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d4306\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1802 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/1/12, 8:46 AM",
      "commitName": "22784dc96c391b01692ce686eb93b9aa0ef74ede",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "1/4/12, 3:39 PM",
      "commitNameOld": "11e74627a0d7b25f96993f17b13c0c6b69c4da68",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 56.71,
      "commitsBetweenForRepo": 76,
      "commitsBetweenForFile": 1,
      "actualSource": "private void inferPropertyTypesToMatchConstraint(JSType type, JSType constraint) {\n    if (type \u003d\u003d null || constraint \u003d\u003d null) {\n        return;\n    }\n    ObjectType constraintObj \u003d ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n    if (constraintObj !\u003d null) {\n        type.matchConstraint(constraintObj);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 1113,
      "functionName": "inferPropertyTypesToMatchConstraint",
      "functionAnnotation": "",
      "functionDoc": "Suppose X is an object with inferred properties.\nSuppose also that X is used in a way where it would only type-check\ncorrectly if some of those properties are widened.\nThen we should be polite and automatically widen X\u0027s properties for him.\n\nFor a concrete example, consider:\nparam x {{prop: (number|undefined)}}\nfunction f(x) {}\nf({});\n\nIf we give the anonymous object an inferred property of (number|undefined),\nthen this code will type-check appropriately.\n",
      "diff": "@@ -1,21 +1,9 @@\n private void inferPropertyTypesToMatchConstraint(JSType type, JSType constraint) {\n     if (type \u003d\u003d null || constraint \u003d\u003d null) {\n         return;\n     }\n     ObjectType constraintObj \u003d ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj !\u003d null \u0026\u0026 constraintObj.isRecordType()) {\n-        ObjectType objType \u003d ObjectType.cast(type.restrictByNotNullOrUndefined());\n-        if (objType !\u003d null) {\n-            for (String prop : constraintObj.getOwnPropertyNames()) {\n-                JSType propType \u003d constraintObj.getPropertyType(prop);\n-                if (!objType.isPropertyTypeDeclared(prop)) {\n-                    JSType typeToInfer \u003d propType;\n-                    if (!objType.hasProperty(prop)) {\n-                        typeToInfer \u003d getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-                    }\n-                    objType.defineInferredProperty(prop, typeToInfer, null);\n-                }\n-            }\n-        }\n+    if (constraintObj !\u003d null) {\n+        type.matchConstraint(constraintObj);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c8d189698a5bf3362ccd820b42f3d62c550ec983": {
      "type": "Ybodychange",
      "commitMessage": "\nreverse property inference based on return type\n\nR\u003dacleung\nDELTA\u003d57  (56 added, 1 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3991\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1686 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/15/11, 12:56 PM",
      "commitName": "c8d189698a5bf3362ccd820b42f3d62c550ec983",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "11/15/11, 5:35 PM",
      "commitNameOld": "925a8f78c8c6a407435e6fb4513ad96d617643a3",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 29.81,
      "commitsBetweenForRepo": 72,
      "commitsBetweenForFile": 1,
      "actualSource": "private void inferPropertyTypesToMatchConstraint(JSType type, JSType constraint) {\n    if (type \u003d\u003d null || constraint \u003d\u003d null) {\n        return;\n    }\n    ObjectType constraintObj \u003d ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n    if (constraintObj !\u003d null \u0026\u0026 constraintObj.isRecordType()) {\n        ObjectType objType \u003d ObjectType.cast(type.restrictByNotNullOrUndefined());\n        if (objType !\u003d null) {\n            for (String prop : constraintObj.getOwnPropertyNames()) {\n                JSType propType \u003d constraintObj.getPropertyType(prop);\n                if (!objType.isPropertyTypeDeclared(prop)) {\n                    JSType typeToInfer \u003d propType;\n                    if (!objType.hasProperty(prop)) {\n                        typeToInfer \u003d getNativeType(VOID_TYPE).getLeastSupertype(propType);\n                    }\n                    objType.defineInferredProperty(prop, typeToInfer, null);\n                }\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 1059,
      "functionName": "inferPropertyTypesToMatchConstraint",
      "functionAnnotation": "",
      "functionDoc": "Suppose X is an object with inferred properties.\nSuppose also that X is used in a way where it would only type-check\ncorrectly if some of those properties are widened.\nThen we should be polite and automatically widen X\u0027s properties for him.\n\nFor a concrete example, consider:\nparam x {{prop: (number|undefined)}}\nfunction f(x) {}\nf({});\n\nIf we give the anonymous object an inferred property of (number|undefined),\nthen this code will type-check appropriately.\n",
      "diff": "@@ -1,18 +1,21 @@\n private void inferPropertyTypesToMatchConstraint(JSType type, JSType constraint) {\n+    if (type \u003d\u003d null || constraint \u003d\u003d null) {\n+        return;\n+    }\n     ObjectType constraintObj \u003d ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n     if (constraintObj !\u003d null \u0026\u0026 constraintObj.isRecordType()) {\n         ObjectType objType \u003d ObjectType.cast(type.restrictByNotNullOrUndefined());\n         if (objType !\u003d null) {\n             for (String prop : constraintObj.getOwnPropertyNames()) {\n                 JSType propType \u003d constraintObj.getPropertyType(prop);\n                 if (!objType.isPropertyTypeDeclared(prop)) {\n                     JSType typeToInfer \u003d propType;\n                     if (!objType.hasProperty(prop)) {\n                         typeToInfer \u003d getNativeType(VOID_TYPE).getLeastSupertype(propType);\n                     }\n                     objType.defineInferredProperty(prop, typeToInfer, null);\n                 }\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "03ce555bcedcf98d99de1b4f8a6238ba75ee6850": {
      "type": "Ybodychange",
      "commitMessage": "\nSimplify the type system a bit by pulling extern info off the nodes\n\nR\u003djohnlenz\nDELTA\u003d171  (4 added, 42 deleted, 125 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2500\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1242 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/1/11, 2:00 PM",
      "commitName": "03ce555bcedcf98d99de1b4f8a6238ba75ee6850",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "5/24/11, 10:37 AM",
      "commitNameOld": "c590fe51732eea3b712c7f894ba3f5a9d23613e1",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 38.14,
      "commitsBetweenForRepo": 108,
      "commitsBetweenForFile": 1,
      "actualSource": "private void inferPropertyTypesToMatchConstraint(JSType type, JSType constraint) {\n    ObjectType constraintObj \u003d ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n    if (constraintObj !\u003d null \u0026\u0026 constraintObj.isRecordType()) {\n        ObjectType objType \u003d ObjectType.cast(type.restrictByNotNullOrUndefined());\n        if (objType !\u003d null) {\n            for (String prop : constraintObj.getOwnPropertyNames()) {\n                JSType propType \u003d constraintObj.getPropertyType(prop);\n                if (!objType.isPropertyTypeDeclared(prop)) {\n                    JSType typeToInfer \u003d propType;\n                    if (!objType.hasProperty(prop)) {\n                        typeToInfer \u003d getNativeType(VOID_TYPE).getLeastSupertype(propType);\n                    }\n                    objType.defineInferredProperty(prop, typeToInfer, null);\n                }\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 1064,
      "functionName": "inferPropertyTypesToMatchConstraint",
      "functionAnnotation": "",
      "functionDoc": "Suppose X is an object with inferred properties.\nSuppose also that X is used in a way where it would only type-check\ncorrectly if some of those properties are widened.\nThen we should be polite and automatically widen X\u0027s properties for him.\n\nFor a concrete example, consider:\nparam x {{prop: (number|undefined)}}\nfunction f(x) {}\nf({});\n\nIf we give the anonymous object an inferred property of (number|undefined),\nthen this code will type-check appropriately.\n",
      "diff": "@@ -1,18 +1,18 @@\n private void inferPropertyTypesToMatchConstraint(JSType type, JSType constraint) {\n     ObjectType constraintObj \u003d ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n     if (constraintObj !\u003d null \u0026\u0026 constraintObj.isRecordType()) {\n         ObjectType objType \u003d ObjectType.cast(type.restrictByNotNullOrUndefined());\n         if (objType !\u003d null) {\n             for (String prop : constraintObj.getOwnPropertyNames()) {\n                 JSType propType \u003d constraintObj.getPropertyType(prop);\n                 if (!objType.isPropertyTypeDeclared(prop)) {\n                     JSType typeToInfer \u003d propType;\n                     if (!objType.hasProperty(prop)) {\n                         typeToInfer \u003d getNativeType(VOID_TYPE).getLeastSupertype(propType);\n                     }\n-                    objType.defineInferredProperty(prop, typeToInfer, false, null);\n+                    objType.defineInferredProperty(prop, typeToInfer, null);\n                 }\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c590fe51732eea3b712c7f894ba3f5a9d23613e1": {
      "type": "Ybodychange",
      "commitMessage": "\nMinor changes to the last cl. This isn\u0027t functionally different\nin any way (getLeastSupertype usually just creates a union),\nbut are slightly more semantically correct\n\nR\u003dzhuyi\nDELTA\u003d11  (3 added, 1 deleted, 7 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2000\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1129 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/24/11, 10:37 AM",
      "commitName": "c590fe51732eea3b712c7f894ba3f5a9d23613e1",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "5/23/11, 8:37 AM",
      "commitNameOld": "643bd6436989e7a957ccefeed8ea5ecc8e84a748",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 1.08,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "private void inferPropertyTypesToMatchConstraint(JSType type, JSType constraint) {\n    ObjectType constraintObj \u003d ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n    if (constraintObj !\u003d null \u0026\u0026 constraintObj.isRecordType()) {\n        ObjectType objType \u003d ObjectType.cast(type.restrictByNotNullOrUndefined());\n        if (objType !\u003d null) {\n            for (String prop : constraintObj.getOwnPropertyNames()) {\n                JSType propType \u003d constraintObj.getPropertyType(prop);\n                if (!objType.isPropertyTypeDeclared(prop)) {\n                    JSType typeToInfer \u003d propType;\n                    if (!objType.hasProperty(prop)) {\n                        typeToInfer \u003d getNativeType(VOID_TYPE).getLeastSupertype(propType);\n                    }\n                    objType.defineInferredProperty(prop, typeToInfer, false, null);\n                }\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 1064,
      "functionName": "inferPropertyTypesToMatchConstraint",
      "functionAnnotation": "",
      "functionDoc": "Suppose X is an object with inferred properties.\nSuppose also that X is used in a way where it would only type-check\ncorrectly if some of those properties are widened.\nThen we should be polite and automatically widen X\u0027s properties for him.\n\nFor a concrete example, consider:\nparam x {{prop: (number|undefined)}}\nfunction f(x) {}\nf({});\n\nIf we give the anonymous object an inferred property of (number|undefined),\nthen this code will type-check appropriately.\n",
      "diff": "@@ -1,16 +1,18 @@\n private void inferPropertyTypesToMatchConstraint(JSType type, JSType constraint) {\n     ObjectType constraintObj \u003d ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n     if (constraintObj !\u003d null \u0026\u0026 constraintObj.isRecordType()) {\n         ObjectType objType \u003d ObjectType.cast(type.restrictByNotNullOrUndefined());\n-        for (String prop : constraintObj.getOwnPropertyNames()) {\n-            JSType propType \u003d constraintObj.getPropertyType(prop);\n-            if (objType !\u003d null \u0026\u0026 !objType.isPropertyTypeDeclared(prop)) {\n-                JSType typeToInfer \u003d propType;\n-                if (!objType.hasProperty(prop)) {\n-                    typeToInfer \u003d registry.createUnionType(getNativeType(VOID_TYPE), propType);\n+        if (objType !\u003d null) {\n+            for (String prop : constraintObj.getOwnPropertyNames()) {\n+                JSType propType \u003d constraintObj.getPropertyType(prop);\n+                if (!objType.isPropertyTypeDeclared(prop)) {\n+                    JSType typeToInfer \u003d propType;\n+                    if (!objType.hasProperty(prop)) {\n+                        typeToInfer \u003d getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+                    }\n+                    objType.defineInferredProperty(prop, typeToInfer, false, null);\n                 }\n-                objType.defineInferredProperty(prop, typeToInfer, false, null);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "643bd6436989e7a957ccefeed8ea5ecc8e84a748": {
      "type": "Yintroduced",
      "commitMessage": "\nInfer properties of anonymous objects\n\nR\u003dzhuyi\nDELTA\u003d106  (98 added, 6 deleted, 2 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1996\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1125 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/23/11, 8:37 AM",
      "commitName": "643bd6436989e7a957ccefeed8ea5ecc8e84a748",
      "commitAuthor": "nicksantos@google.com",
      "diff": "@@ -0,0 +1,16 @@\n+private void inferPropertyTypesToMatchConstraint(JSType type, JSType constraint) {\n+    ObjectType constraintObj \u003d ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n+    if (constraintObj !\u003d null \u0026\u0026 constraintObj.isRecordType()) {\n+        ObjectType objType \u003d ObjectType.cast(type.restrictByNotNullOrUndefined());\n+        for (String prop : constraintObj.getOwnPropertyNames()) {\n+            JSType propType \u003d constraintObj.getPropertyType(prop);\n+            if (objType !\u003d null \u0026\u0026 !objType.isPropertyTypeDeclared(prop)) {\n+                JSType typeToInfer \u003d propType;\n+                if (!objType.hasProperty(prop)) {\n+                    typeToInfer \u003d registry.createUnionType(getNativeType(VOID_TYPE), propType);\n+                }\n+                objType.defineInferredProperty(prop, typeToInfer, false, null);\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void inferPropertyTypesToMatchConstraint(JSType type, JSType constraint) {\n    ObjectType constraintObj \u003d ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n    if (constraintObj !\u003d null \u0026\u0026 constraintObj.isRecordType()) {\n        ObjectType objType \u003d ObjectType.cast(type.restrictByNotNullOrUndefined());\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType \u003d constraintObj.getPropertyType(prop);\n            if (objType !\u003d null \u0026\u0026 !objType.isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer \u003d propType;\n                if (!objType.hasProperty(prop)) {\n                    typeToInfer \u003d registry.createUnionType(getNativeType(VOID_TYPE), propType);\n                }\n                objType.defineInferredProperty(prop, typeToInfer, false, null);\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 1064,
      "functionName": "inferPropertyTypesToMatchConstraint",
      "functionAnnotation": "",
      "functionDoc": "Suppose X is an object with inferred properties.\nSuppose also that X is used in a way where it would only type-check\ncorrectly if some of those properties are widened.\nThen we should be polite and automatically widen X\u0027s properties for him.\n\nFor a concrete example, consider:\nparam x {{prop: (number|undefined)}}\nfunction f(x) {}\nf({});\n\nIf we give the anonymous object an inferred property of (number|undefined),\nthen this code will type-check appropriately.\n"
    }
  }
}