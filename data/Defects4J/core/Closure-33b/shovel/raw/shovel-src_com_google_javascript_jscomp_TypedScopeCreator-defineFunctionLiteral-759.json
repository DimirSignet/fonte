{
  "origin": "codeshovel",
  "repositoryName": "Closure-33b",
  "repositoryPath": "/tmp/Closure-33b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TypedScopeCreator.java",
  "functionName": "defineFunctionLiteral",
  "functionId": "$defineFunctionLiteral___n-Node__parent-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
  "functionAnnotation": "",
  "functionDoc": "Defines a function literal.\n",
  "functionStartLine": 759,
  "functionEndLine": 779,
  "numCommitsSeen": 130,
  "timeTaken": 6078,
  "changeHistory": [
    "e58030c47800f5842a950cf7ceb40bba5bd1dd23",
    "2ea78e73e6ace693e18d535560606dfd49c3f9bc",
    "e8eafe7acfd53e5385e4f31692c4db67c3777185"
  ],
  "changeHistoryShort": {
    "e58030c47800f5842a950cf7ceb40bba5bd1dd23": "Ybodychange",
    "2ea78e73e6ace693e18d535560606dfd49c3f9bc": "Ymultichange(Yrename,Ybodychange,Ydocchange)",
    "e8eafe7acfd53e5385e4f31692c4db67c3777185": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e58030c47800f5842a950cf7ceb40bba5bd1dd23": {
      "type": "Ybodychange",
      "commitMessage": "\nFirst crack at a new js indexer.\nOnly about 10% of the tests pass, but that\u0027s 10 better than 0\nwoohoo!\n\nR\u003dacleung,stevey\nDELTA\u003d1067  (523 added, 183 deleted, 361 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2897\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1326 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/4/11, 8:56 AM",
      "commitName": "e58030c47800f5842a950cf7ceb40bba5bd1dd23",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "8/1/11, 10:56 AM",
      "commitNameOld": "5912a2fb9367a461f5b86f6e42704773f849e464",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 2.92,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "void defineFunctionLiteral(Node n, Node parent) {\n    assertDefinitionNode(n, Token.FUNCTION);\n    Node lValue \u003d NodeUtil.getBestLValue(n);\n    JSDocInfo info \u003d NodeUtil.getBestJSDocInfo(n);\n    String functionName \u003d NodeUtil.getBestLValueName(lValue);\n    FunctionType functionType \u003d createFunctionTypeFromNodes(n, functionName, info, lValue);\n    setDeferredType(n, functionType);\n    if (NodeUtil.isFunctionDeclaration(n)) {\n        defineSlot(n.getFirstChild(), n, functionType);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 695,
      "functionName": "defineFunctionLiteral",
      "functionAnnotation": "",
      "functionDoc": "Defines a function literal.\n",
      "diff": "@@ -1,11 +1,11 @@\n void defineFunctionLiteral(Node n, Node parent) {\n     assertDefinitionNode(n, Token.FUNCTION);\n-    Node lValue \u003d getBestLValue(n);\n-    JSDocInfo info \u003d getBestJSDocInfo(n);\n-    String functionName \u003d getBestLValueName(lValue);\n+    Node lValue \u003d NodeUtil.getBestLValue(n);\n+    JSDocInfo info \u003d NodeUtil.getBestJSDocInfo(n);\n+    String functionName \u003d NodeUtil.getBestLValueName(lValue);\n     FunctionType functionType \u003d createFunctionTypeFromNodes(n, functionName, info, lValue);\n     setDeferredType(n, functionType);\n     if (NodeUtil.isFunctionDeclaration(n)) {\n         defineSlot(n.getFirstChild(), n, functionType);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2ea78e73e6ace693e18d535560606dfd49c3f9bc": {
      "type": "Ymultichange(Yrename,Ybodychange,Ydocchange)",
      "commitMessage": "\nClean up type discovery by refactoring to the following algorithm.\n1) When we see a function literal, create the authoritative\ntype for it.\n2) When we see an object literal, create the authoritative\ntype for it.\n3) When we declare a symbol, check to see if it\u0027s assigned to\nan object or function literal, and use that type if it\nmake sense to do so. Otherwise, fall back on the JSDoc info.\nThis should make it a lot easier to give accurate types to object\nliteral properties.\nI didn\u0027t intend to create any functional changes in this CL,\nbut some minor ones were inevitable.\n\nR\u003djohnlenz\nDELTA\u003d618  (320 added, 249 deleted, 49 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d392\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@739 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/31/11, 8:08 AM",
      "commitName": "2ea78e73e6ace693e18d535560606dfd49c3f9bc",
      "commitAuthor": "nicksantos@google.com",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "\nClean up type discovery by refactoring to the following algorithm.\n1) When we see a function literal, create the authoritative\ntype for it.\n2) When we see an object literal, create the authoritative\ntype for it.\n3) When we declare a symbol, check to see if it\u0027s assigned to\nan object or function literal, and use that type if it\nmake sense to do so. Otherwise, fall back on the JSDoc info.\nThis should make it a lot easier to give accurate types to object\nliteral properties.\nI didn\u0027t intend to create any functional changes in this CL,\nbut some minor ones were inevitable.\n\nR\u003djohnlenz\nDELTA\u003d618  (320 added, 249 deleted, 49 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d392\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@739 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/31/11, 8:08 AM",
          "commitName": "2ea78e73e6ace693e18d535560606dfd49c3f9bc",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "1/27/11, 10:33 AM",
          "commitNameOld": "70f817ae4f80ac11dd2dfe97babf5896c690fb48",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 3.9,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "void defineFunctionLiteral(Node n, Node parent) {\n    assertDefinitionNode(n, Token.FUNCTION);\n    Node lValue \u003d getBestLValue(n);\n    JSDocInfo info \u003d getBestJSDocInfo(n);\n    String functionName \u003d getBestLValueName(lValue);\n    FunctionType functionType \u003d createFunctionTypeFromNodes(n, functionName, info, lValue);\n    setDeferredType(n, functionType);\n    if (NodeUtil.isFunctionDeclaration(n)) {\n        defineSlot(n.getFirstChild(), n, functionType);\n    }\n}",
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
          "functionStartLine": 662,
          "functionName": "defineFunctionLiteral",
          "functionAnnotation": "",
          "functionDoc": "Defines a function literal.\n",
          "diff": "@@ -1,11 +1,11 @@\n-void defineDeclaredFunction(Node n, Node parent) {\n+void defineFunctionLiteral(Node n, Node parent) {\n     assertDefinitionNode(n, Token.FUNCTION);\n-    JSDocInfo info \u003d n.getJSDocInfo();\n-    int parentType \u003d parent.getType();\n-    Preconditions.checkState((scope.isLocal() || parentType !\u003d Token.ASSIGN) \u0026\u0026 parentType !\u003d Token.NAME, \"function defined as standalone function when it is being \" + \"assigned\");\n-    String functionName \u003d n.getFirstChild().getString();\n-    FunctionType functionType \u003d getFunctionType(functionName, n, info, null);\n+    Node lValue \u003d getBestLValue(n);\n+    JSDocInfo info \u003d getBestJSDocInfo(n);\n+    String functionName \u003d getBestLValueName(lValue);\n+    FunctionType functionType \u003d createFunctionTypeFromNodes(n, functionName, info, lValue);\n+    setDeferredType(n, functionType);\n     if (NodeUtil.isFunctionDeclaration(n)) {\n         defineSlot(n.getFirstChild(), n, functionType);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "defineDeclaredFunction",
            "newValue": "defineFunctionLiteral"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nClean up type discovery by refactoring to the following algorithm.\n1) When we see a function literal, create the authoritative\ntype for it.\n2) When we see an object literal, create the authoritative\ntype for it.\n3) When we declare a symbol, check to see if it\u0027s assigned to\nan object or function literal, and use that type if it\nmake sense to do so. Otherwise, fall back on the JSDoc info.\nThis should make it a lot easier to give accurate types to object\nliteral properties.\nI didn\u0027t intend to create any functional changes in this CL,\nbut some minor ones were inevitable.\n\nR\u003djohnlenz\nDELTA\u003d618  (320 added, 249 deleted, 49 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d392\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@739 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/31/11, 8:08 AM",
          "commitName": "2ea78e73e6ace693e18d535560606dfd49c3f9bc",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "1/27/11, 10:33 AM",
          "commitNameOld": "70f817ae4f80ac11dd2dfe97babf5896c690fb48",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 3.9,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "void defineFunctionLiteral(Node n, Node parent) {\n    assertDefinitionNode(n, Token.FUNCTION);\n    Node lValue \u003d getBestLValue(n);\n    JSDocInfo info \u003d getBestJSDocInfo(n);\n    String functionName \u003d getBestLValueName(lValue);\n    FunctionType functionType \u003d createFunctionTypeFromNodes(n, functionName, info, lValue);\n    setDeferredType(n, functionType);\n    if (NodeUtil.isFunctionDeclaration(n)) {\n        defineSlot(n.getFirstChild(), n, functionType);\n    }\n}",
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
          "functionStartLine": 662,
          "functionName": "defineFunctionLiteral",
          "functionAnnotation": "",
          "functionDoc": "Defines a function literal.\n",
          "diff": "@@ -1,11 +1,11 @@\n-void defineDeclaredFunction(Node n, Node parent) {\n+void defineFunctionLiteral(Node n, Node parent) {\n     assertDefinitionNode(n, Token.FUNCTION);\n-    JSDocInfo info \u003d n.getJSDocInfo();\n-    int parentType \u003d parent.getType();\n-    Preconditions.checkState((scope.isLocal() || parentType !\u003d Token.ASSIGN) \u0026\u0026 parentType !\u003d Token.NAME, \"function defined as standalone function when it is being \" + \"assigned\");\n-    String functionName \u003d n.getFirstChild().getString();\n-    FunctionType functionType \u003d getFunctionType(functionName, n, info, null);\n+    Node lValue \u003d getBestLValue(n);\n+    JSDocInfo info \u003d getBestJSDocInfo(n);\n+    String functionName \u003d getBestLValueName(lValue);\n+    FunctionType functionType \u003d createFunctionTypeFromNodes(n, functionName, info, lValue);\n+    setDeferredType(n, functionType);\n     if (NodeUtil.isFunctionDeclaration(n)) {\n         defineSlot(n.getFirstChild(), n, functionType);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "\nClean up type discovery by refactoring to the following algorithm.\n1) When we see a function literal, create the authoritative\ntype for it.\n2) When we see an object literal, create the authoritative\ntype for it.\n3) When we declare a symbol, check to see if it\u0027s assigned to\nan object or function literal, and use that type if it\nmake sense to do so. Otherwise, fall back on the JSDoc info.\nThis should make it a lot easier to give accurate types to object\nliteral properties.\nI didn\u0027t intend to create any functional changes in this CL,\nbut some minor ones were inevitable.\n\nR\u003djohnlenz\nDELTA\u003d618  (320 added, 249 deleted, 49 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d392\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@739 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/31/11, 8:08 AM",
          "commitName": "2ea78e73e6ace693e18d535560606dfd49c3f9bc",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "1/27/11, 10:33 AM",
          "commitNameOld": "70f817ae4f80ac11dd2dfe97babf5896c690fb48",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 3.9,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "void defineFunctionLiteral(Node n, Node parent) {\n    assertDefinitionNode(n, Token.FUNCTION);\n    Node lValue \u003d getBestLValue(n);\n    JSDocInfo info \u003d getBestJSDocInfo(n);\n    String functionName \u003d getBestLValueName(lValue);\n    FunctionType functionType \u003d createFunctionTypeFromNodes(n, functionName, info, lValue);\n    setDeferredType(n, functionType);\n    if (NodeUtil.isFunctionDeclaration(n)) {\n        defineSlot(n.getFirstChild(), n, functionType);\n    }\n}",
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
          "functionStartLine": 662,
          "functionName": "defineFunctionLiteral",
          "functionAnnotation": "",
          "functionDoc": "Defines a function literal.\n",
          "diff": "@@ -1,11 +1,11 @@\n-void defineDeclaredFunction(Node n, Node parent) {\n+void defineFunctionLiteral(Node n, Node parent) {\n     assertDefinitionNode(n, Token.FUNCTION);\n-    JSDocInfo info \u003d n.getJSDocInfo();\n-    int parentType \u003d parent.getType();\n-    Preconditions.checkState((scope.isLocal() || parentType !\u003d Token.ASSIGN) \u0026\u0026 parentType !\u003d Token.NAME, \"function defined as standalone function when it is being \" + \"assigned\");\n-    String functionName \u003d n.getFirstChild().getString();\n-    FunctionType functionType \u003d getFunctionType(functionName, n, info, null);\n+    Node lValue \u003d getBestLValue(n);\n+    JSDocInfo info \u003d getBestJSDocInfo(n);\n+    String functionName \u003d getBestLValueName(lValue);\n+    FunctionType functionType \u003d createFunctionTypeFromNodes(n, functionName, info, lValue);\n+    setDeferredType(n, functionType);\n     if (NodeUtil.isFunctionDeclaration(n)) {\n         defineSlot(n.getFirstChild(), n, functionType);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Defines a declared function.\n",
            "newValue": "Defines a function literal.\n"
          }
        }
      ]
    },
    "e8eafe7acfd53e5385e4f31692c4db67c3777185": {
      "type": "Yintroduced",
      "commitMessage": "\nRefactor typedscopecreator a bit to make it easier\nto see what\u0027s going on. basically, i removed a level of dynamic\ndispatch. there should be no functional changes in this cl.\n\nR\u003djohnlenz\nDELTA\u003d228  (89 added, 62 deleted, 77 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d54005\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@292 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/19/10, 5:30 PM",
      "commitName": "e8eafe7acfd53e5385e4f31692c4db67c3777185",
      "commitAuthor": "nicksantos@google.com",
      "diff": "@@ -0,0 +1,11 @@\n+void defineDeclaredFunction(Node n, Node parent) {\n+    assertDefinitionNode(n, Token.FUNCTION);\n+    JSDocInfo info \u003d n.getJSDocInfo();\n+    int parentType \u003d parent.getType();\n+    Preconditions.checkState((scope.isLocal() || parentType !\u003d Token.ASSIGN) \u0026\u0026 parentType !\u003d Token.NAME, \"function defined as standalone function when it is being \" + \"assigned\");\n+    String functionName \u003d n.getFirstChild().getString();\n+    FunctionType functionType \u003d getFunctionType(functionName, n, info, null);\n+    if (NodeUtil.isFunctionDeclaration(n)) {\n+        defineSlot(n.getFirstChild(), n, functionType);\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "void defineDeclaredFunction(Node n, Node parent) {\n    assertDefinitionNode(n, Token.FUNCTION);\n    JSDocInfo info \u003d n.getJSDocInfo();\n    int parentType \u003d parent.getType();\n    Preconditions.checkState((scope.isLocal() || parentType !\u003d Token.ASSIGN) \u0026\u0026 parentType !\u003d Token.NAME, \"function defined as standalone function when it is being \" + \"assigned\");\n    String functionName \u003d n.getFirstChild().getString();\n    FunctionType functionType \u003d getFunctionType(functionName, n, info, null);\n    if (NodeUtil.isFunctionDeclaration(n)) {\n        defineSlot(n.getFirstChild(), n, functionType);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 458,
      "functionName": "defineDeclaredFunction",
      "functionAnnotation": "",
      "functionDoc": "Defines a declared function.\n"
    }
  }
}