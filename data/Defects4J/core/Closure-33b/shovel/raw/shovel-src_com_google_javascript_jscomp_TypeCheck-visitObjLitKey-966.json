{
  "origin": "codeshovel",
  "repositoryName": "Closure-33b",
  "repositoryPath": "/tmp/Closure-33b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TypeCheck.java",
  "functionName": "visitObjLitKey",
  "functionId": "visitObjLitKey___t-NodeTraversal__key-Node__objlit-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/TypeCheck.java",
  "functionAnnotation": "",
  "functionDoc": "Visits an object literal field definition \u003ccode\u003ekey : value\u003c/code\u003e.\n\nIf the \u003ccode\u003elvalue\u003c/code\u003e is a prototype modification, we change the\nschema of the object type it is referring to.\n\n@param t the traversal\n@param key the assign node\n",
  "functionStartLine": 966,
  "functionEndLine": 1027,
  "numCommitsSeen": 71,
  "timeTaken": 4975,
  "changeHistory": [
    "342d12414cbf8e0cd19f6cab95b9bcd485c2f49b",
    "9614c7c0ffe2418359fe91be2a0e61400142237d",
    "70f817ae4f80ac11dd2dfe97babf5896c690fb48"
  ],
  "changeHistoryShort": {
    "342d12414cbf8e0cd19f6cab95b9bcd485c2f49b": "Ybodychange",
    "9614c7c0ffe2418359fe91be2a0e61400142237d": "Ybodychange",
    "70f817ae4f80ac11dd2dfe97babf5896c690fb48": "Yintroduced"
  },
  "changeHistoryDetails": {
    "342d12414cbf8e0cd19f6cab95b9bcd485c2f49b": {
      "type": "Ybodychange",
      "commitMessage": "\nFixes generateExports for enums\nFixes issue 310\n\nR\u003djohnlenz,jschorr\nDELTA\u003d226  (141 added, 6 deleted, 79 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d4138\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1747 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/26/12, 1:04 PM",
      "commitName": "342d12414cbf8e0cd19f6cab95b9bcd485c2f49b",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "1/4/12, 11:53 AM",
      "commitNameOld": "5f8b6f54294ce8b454f78165f5230b3759d11e37",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 22.05,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "actualSource": "private void visitObjLitKey(NodeTraversal t, Node key, Node objlit) {\n    if (objlit.isFromExterns()) {\n        ensureTyped(t, key);\n        return;\n    }\n    Node rvalue \u003d key.getFirstChild();\n    JSType rightType \u003d NodeUtil.getObjectLitKeyTypeFromValueType(key, getJSType(rvalue));\n    if (rightType \u003d\u003d null) {\n        rightType \u003d getNativeType(UNKNOWN_TYPE);\n    }\n    Node owner \u003d objlit;\n    JSType keyType \u003d getJSType(key);\n    JSType allowedValueType \u003d keyType;\n    if (allowedValueType.isEnumElementType()) {\n        allowedValueType \u003d allowedValueType.toMaybeEnumElementType().getPrimitiveType();\n    }\n    boolean valid \u003d validator.expectCanAssignToPropertyOf(t, key, rightType, allowedValueType, owner, NodeUtil.getObjectLitKeyName(key));\n    if (valid) {\n        ensureTyped(t, key, rightType);\n    } else {\n        ensureTyped(t, key);\n    }\n    JSType objlitType \u003d getJSType(objlit);\n    ObjectType type \u003d ObjectType.cast(objlitType.restrictByNotNullOrUndefined());\n    if (type !\u003d null) {\n        String property \u003d NodeUtil.getObjectLitKeyName(key);\n        if (type.hasProperty(property) \u0026\u0026 !type.isPropertyTypeInferred(property) \u0026\u0026 !propertyIsImplicitCast(type, property)) {\n            validator.expectCanAssignToPropertyOf(t, key, keyType, type.getPropertyType(property), owner, property);\n        }\n        return;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 943,
      "functionName": "visitObjLitKey",
      "functionAnnotation": "",
      "functionDoc": "Visits an object literal field definition \u003ccode\u003ekey : value\u003c/code\u003e.\n\nIf the \u003ccode\u003elvalue\u003c/code\u003e is a prototype modification, we change the\nschema of the object type it is referring to.\n\n@param t the traversal\n@param key the assign node\n",
      "diff": "@@ -1,28 +1,32 @@\n private void visitObjLitKey(NodeTraversal t, Node key, Node objlit) {\n+    if (objlit.isFromExterns()) {\n+        ensureTyped(t, key);\n+        return;\n+    }\n     Node rvalue \u003d key.getFirstChild();\n     JSType rightType \u003d NodeUtil.getObjectLitKeyTypeFromValueType(key, getJSType(rvalue));\n     if (rightType \u003d\u003d null) {\n         rightType \u003d getNativeType(UNKNOWN_TYPE);\n     }\n     Node owner \u003d objlit;\n     JSType keyType \u003d getJSType(key);\n     JSType allowedValueType \u003d keyType;\n     if (allowedValueType.isEnumElementType()) {\n         allowedValueType \u003d allowedValueType.toMaybeEnumElementType().getPrimitiveType();\n     }\n     boolean valid \u003d validator.expectCanAssignToPropertyOf(t, key, rightType, allowedValueType, owner, NodeUtil.getObjectLitKeyName(key));\n     if (valid) {\n         ensureTyped(t, key, rightType);\n     } else {\n         ensureTyped(t, key);\n     }\n     JSType objlitType \u003d getJSType(objlit);\n     ObjectType type \u003d ObjectType.cast(objlitType.restrictByNotNullOrUndefined());\n     if (type !\u003d null) {\n         String property \u003d NodeUtil.getObjectLitKeyName(key);\n         if (type.hasProperty(property) \u0026\u0026 !type.isPropertyTypeInferred(property) \u0026\u0026 !propertyIsImplicitCast(type, property)) {\n             validator.expectCanAssignToPropertyOf(t, key, keyType, type.getPropertyType(property), owner, property);\n         }\n         return;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9614c7c0ffe2418359fe91be2a0e61400142237d": {
      "type": "Ybodychange",
      "commitMessage": "\nremove some special-case code for enums\nnow that we handle object literals properly, we can just\nuse the normal checks\n\nR\u003dacleung\nDELTA\u003d137  (46 added, 26 deleted, 65 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3459\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1509 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/12/11, 8:07 PM",
      "commitName": "9614c7c0ffe2418359fe91be2a0e61400142237d",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "10/4/11, 4:04 PM",
      "commitNameOld": "febdacb341025491b3ae83ee8ffa9d22c69c295e",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 8.17,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "actualSource": "private void visitObjLitKey(NodeTraversal t, Node key, Node objlit) {\n    Node rvalue \u003d key.getFirstChild();\n    JSType rightType \u003d NodeUtil.getObjectLitKeyTypeFromValueType(key, getJSType(rvalue));\n    if (rightType \u003d\u003d null) {\n        rightType \u003d getNativeType(UNKNOWN_TYPE);\n    }\n    Node owner \u003d objlit;\n    JSType keyType \u003d getJSType(key);\n    JSType allowedValueType \u003d keyType;\n    if (allowedValueType.isEnumElementType()) {\n        allowedValueType \u003d allowedValueType.toMaybeEnumElementType().getPrimitiveType();\n    }\n    boolean valid \u003d validator.expectCanAssignToPropertyOf(t, key, rightType, allowedValueType, owner, NodeUtil.getObjectLitKeyName(key));\n    if (valid) {\n        ensureTyped(t, key, rightType);\n    } else {\n        ensureTyped(t, key);\n    }\n    JSType objlitType \u003d getJSType(objlit);\n    ObjectType type \u003d ObjectType.cast(objlitType.restrictByNotNullOrUndefined());\n    if (type !\u003d null) {\n        String property \u003d NodeUtil.getObjectLitKeyName(key);\n        if (type.hasProperty(property) \u0026\u0026 !type.isPropertyTypeInferred(property) \u0026\u0026 !propertyIsImplicitCast(type, property)) {\n            validator.expectCanAssignToPropertyOf(t, key, keyType, type.getPropertyType(property), owner, property);\n        }\n        return;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 951,
      "functionName": "visitObjLitKey",
      "functionAnnotation": "",
      "functionDoc": "Visits an object literal field definition \u003ccode\u003ekey : value\u003c/code\u003e.\n\nIf the \u003ccode\u003elvalue\u003c/code\u003e is a prototype modification, we change the\nschema of the object type it is referring to.\n\n@param t the traversal\n@param key the assign node\n",
      "diff": "@@ -1,24 +1,28 @@\n private void visitObjLitKey(NodeTraversal t, Node key, Node objlit) {\n     Node rvalue \u003d key.getFirstChild();\n     JSType rightType \u003d NodeUtil.getObjectLitKeyTypeFromValueType(key, getJSType(rvalue));\n     if (rightType \u003d\u003d null) {\n         rightType \u003d getNativeType(UNKNOWN_TYPE);\n     }\n     Node owner \u003d objlit;\n     JSType keyType \u003d getJSType(key);\n-    boolean valid \u003d validator.expectCanAssignToPropertyOf(t, key, rightType, keyType, owner, NodeUtil.getObjectLitKeyName(key));\n+    JSType allowedValueType \u003d keyType;\n+    if (allowedValueType.isEnumElementType()) {\n+        allowedValueType \u003d allowedValueType.toMaybeEnumElementType().getPrimitiveType();\n+    }\n+    boolean valid \u003d validator.expectCanAssignToPropertyOf(t, key, rightType, allowedValueType, owner, NodeUtil.getObjectLitKeyName(key));\n     if (valid) {\n         ensureTyped(t, key, rightType);\n     } else {\n         ensureTyped(t, key);\n     }\n     JSType objlitType \u003d getJSType(objlit);\n     ObjectType type \u003d ObjectType.cast(objlitType.restrictByNotNullOrUndefined());\n     if (type !\u003d null) {\n         String property \u003d NodeUtil.getObjectLitKeyName(key);\n         if (type.hasProperty(property) \u0026\u0026 !type.isPropertyTypeInferred(property) \u0026\u0026 !propertyIsImplicitCast(type, property)) {\n             validator.expectCanAssignToPropertyOf(t, key, keyType, type.getPropertyType(property), owner, property);\n         }\n         return;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "70f817ae4f80ac11dd2dfe97babf5896c690fb48": {
      "type": "Yintroduced",
      "commitMessage": "\nAdd basic getters and setters support to TypeInference.\n\nR\u003dnicksantos\nDELTA\u003d573  (533 added, 15 deleted, 25 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d366\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@735 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/27/11, 10:33 AM",
      "commitName": "70f817ae4f80ac11dd2dfe97babf5896c690fb48",
      "commitAuthor": "johnlenz@google.com",
      "diff": "@@ -0,0 +1,24 @@\n+private void visitObjLitKey(NodeTraversal t, Node key, Node objlit) {\n+    Node rvalue \u003d key.getFirstChild();\n+    JSType rightType \u003d NodeUtil.getObjectLitKeyTypeFromValueType(key, getJSType(rvalue));\n+    if (rightType \u003d\u003d null) {\n+        rightType \u003d getNativeType(UNKNOWN_TYPE);\n+    }\n+    Node owner \u003d objlit;\n+    JSType keyType \u003d getJSType(key);\n+    boolean valid \u003d validator.expectCanAssignToPropertyOf(t, key, rightType, keyType, owner, NodeUtil.getObjectLitKeyName(key));\n+    if (valid) {\n+        ensureTyped(t, key, rightType);\n+    } else {\n+        ensureTyped(t, key);\n+    }\n+    JSType objlitType \u003d getJSType(objlit);\n+    ObjectType type \u003d ObjectType.cast(objlitType.restrictByNotNullOrUndefined());\n+    if (type !\u003d null) {\n+        String property \u003d NodeUtil.getObjectLitKeyName(key);\n+        if (type.hasProperty(property) \u0026\u0026 !type.isPropertyTypeInferred(property) \u0026\u0026 !propertyIsImplicitCast(type, property)) {\n+            validator.expectCanAssignToPropertyOf(t, key, keyType, type.getPropertyType(property), owner, property);\n+        }\n+        return;\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void visitObjLitKey(NodeTraversal t, Node key, Node objlit) {\n    Node rvalue \u003d key.getFirstChild();\n    JSType rightType \u003d NodeUtil.getObjectLitKeyTypeFromValueType(key, getJSType(rvalue));\n    if (rightType \u003d\u003d null) {\n        rightType \u003d getNativeType(UNKNOWN_TYPE);\n    }\n    Node owner \u003d objlit;\n    JSType keyType \u003d getJSType(key);\n    boolean valid \u003d validator.expectCanAssignToPropertyOf(t, key, rightType, keyType, owner, NodeUtil.getObjectLitKeyName(key));\n    if (valid) {\n        ensureTyped(t, key, rightType);\n    } else {\n        ensureTyped(t, key);\n    }\n    JSType objlitType \u003d getJSType(objlit);\n    ObjectType type \u003d ObjectType.cast(objlitType.restrictByNotNullOrUndefined());\n    if (type !\u003d null) {\n        String property \u003d NodeUtil.getObjectLitKeyName(key);\n        if (type.hasProperty(property) \u0026\u0026 !type.isPropertyTypeInferred(property) \u0026\u0026 !propertyIsImplicitCast(type, property)) {\n            validator.expectCanAssignToPropertyOf(t, key, keyType, type.getPropertyType(property), owner, property);\n        }\n        return;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 946,
      "functionName": "visitObjLitKey",
      "functionAnnotation": "",
      "functionDoc": "Visits an object literal field definition \u003ccode\u003ekey : value\u003c/code\u003e.\n\nIf the \u003ccode\u003elvalue\u003c/code\u003e is a prototype modification, we change the\nschema of the object type it is referring to.\n\n@param t the traversal\n@param key the assign node\n"
    }
  }
}