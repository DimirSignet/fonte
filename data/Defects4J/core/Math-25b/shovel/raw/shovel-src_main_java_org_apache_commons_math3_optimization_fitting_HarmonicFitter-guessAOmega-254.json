{
  "origin": "codeshovel",
  "repositoryName": "Math-25b",
  "repositoryPath": "/tmp/Math-25b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HarmonicFitter.java",
  "functionName": "guessAOmega",
  "functionId": "$guessAOmega",
  "sourceFilePath": "src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java",
  "functionAnnotation": "",
  "functionDoc": "Estimate a first guess of the amplitude and angular frequency.\nThis method assumes that the {@link #sortObservations()} method\nhas been called previously.\n\n@throws ZeroException if the abscissa range is zero.\n",
  "functionStartLine": 254,
  "functionEndLine": 323,
  "numCommitsSeen": 25,
  "timeTaken": 12329,
  "changeHistory": [
    "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd",
    "87f65fc9cf6c588ac2c97cbda1c096598a511a70",
    "b67bf47e45fa177c25fd5c445011d868a5383a6d",
    "80b1e90b42a34856b61cec628fcea6633d1000cd",
    "1eaea0b549f685bd416cef68faa3a137b9bb3519",
    "d6a438e931412713e99624cf9ed74470f1040184",
    "8fd1834813ca42fa107b783fd57672f4f5bc9091",
    "676c203843a2b968236da27702eb8789051a9784",
    "89ac173c2b467e6289df0e62f2a43ed1730fbad5"
  ],
  "changeHistoryShort": {
    "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd": "Ymovefromfile",
    "87f65fc9cf6c588ac2c97cbda1c096598a511a70": "Ybodychange",
    "b67bf47e45fa177c25fd5c445011d868a5383a6d": "Ymultichange(Ymovefromfile,Yexceptionschange,Ybodychange,Ydocchange)",
    "80b1e90b42a34856b61cec628fcea6633d1000cd": "Ybodychange",
    "1eaea0b549f685bd416cef68faa3a137b9bb3519": "Ybodychange",
    "d6a438e931412713e99624cf9ed74470f1040184": "Yfilerename",
    "8fd1834813ca42fa107b783fd57672f4f5bc9091": "Ymultichange(Ymovefromfile,Yexceptionschange,Ybodychange,Ydocchange)",
    "676c203843a2b968236da27702eb8789051a9784": "Ymultichange(Ybodychange,Ydocchange)",
    "89ac173c2b467e6289df0e62f2a43ed1730fbad5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd": {
      "type": "Ymovefromfile",
      "commitMessage": "MATH-444\nBase package name change: \"o.a.c.math\" -\u003e \"o.a.c.math3\"\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1244107 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/14/12, 8:17 AM",
      "commitName": "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd",
      "commitAuthor": "Gilles Sadowski",
      "commitDateOld": "2/14/12, 6:34 AM",
      "commitNameOld": "53257329dd394be1333b38bae787bf0cf19dc900",
      "commitAuthorOld": "Gilles Sadowski",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void guessAOmega() {\n    double sx2 \u003d 0;\n    double sy2 \u003d 0;\n    double sxy \u003d 0;\n    double sxz \u003d 0;\n    double syz \u003d 0;\n    double currentX \u003d observations[0].getX();\n    double currentY \u003d observations[0].getY();\n    double f2Integral \u003d 0;\n    double fPrime2Integral \u003d 0;\n    final double startX \u003d currentX;\n    for (int i \u003d 1; i \u003c observations.length; ++i) {\n        final double previousX \u003d currentX;\n        final double previousY \u003d currentY;\n        currentX \u003d observations[i].getX();\n        currentY \u003d observations[i].getY();\n        final double dx \u003d currentX - previousX;\n        final double dy \u003d currentY - previousY;\n        final double f2StepIntegral \u003d dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;\n        final double fPrime2StepIntegral \u003d dy * dy / dx;\n        final double x \u003d currentX - startX;\n        f2Integral +\u003d f2StepIntegral;\n        fPrime2Integral +\u003d fPrime2StepIntegral;\n        sx2 +\u003d x * x;\n        sy2 +\u003d f2Integral * f2Integral;\n        sxy +\u003d x * f2Integral;\n        sxz +\u003d x * fPrime2Integral;\n        syz +\u003d f2Integral * fPrime2Integral;\n    }\n    double c1 \u003d sy2 * sxz - sxy * syz;\n    double c2 \u003d sxy * sxz - sx2 * syz;\n    double c3 \u003d sx2 * sy2 - sxy * sxy;\n    if ((c1 / c2 \u003c 0) || (c2 / c3 \u003c 0)) {\n        final int last \u003d observations.length - 1;\n        final double xRange \u003d observations[last].getX() - observations[0].getX();\n        if (xRange \u003d\u003d 0) {\n            throw new ZeroException();\n        }\n        omega \u003d 2 * Math.PI / xRange;\n        double yMin \u003d Double.POSITIVE_INFINITY;\n        double yMax \u003d Double.NEGATIVE_INFINITY;\n        for (int i \u003d 1; i \u003c observations.length; ++i) {\n            final double y \u003d observations[i].getY();\n            if (y \u003c yMin) {\n                yMin \u003d y;\n            }\n            if (y \u003e yMax) {\n                yMax \u003d y;\n            }\n        }\n        a \u003d 0.5 * (yMax - yMin);\n    } else {\n        a \u003d FastMath.sqrt(c1 / c2);\n        omega \u003d FastMath.sqrt(c2 / c3);\n    }\n}",
      "path": "src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java",
      "functionStartLine": 254,
      "functionName": "guessAOmega",
      "functionAnnotation": "",
      "functionDoc": "Estimate a first guess of the amplitude and angular frequency.\nThis method assumes that the {@link #sortObservations()} method\nhas been called previously.\n\n@throws ZeroException if the abscissa range is zero.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java",
        "newPath": "src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java",
        "oldMethodName": "guessAOmega",
        "newMethodName": "guessAOmega"
      }
    },
    "87f65fc9cf6c588ac2c97cbda1c096598a511a70": {
      "type": "Ybodychange",
      "commitMessage": "MATH-521\nChanged initial guess default values.\nAdded test.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1073796 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/23/11, 7:52 AM",
      "commitName": "87f65fc9cf6c588ac2c97cbda1c096598a511a70",
      "commitAuthor": "Gilles Sadowski",
      "commitDateOld": "2/22/11, 8:13 AM",
      "commitNameOld": "b67bf47e45fa177c25fd5c445011d868a5383a6d",
      "commitAuthorOld": "Gilles Sadowski",
      "daysBetweenCommits": 0.99,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "private void guessAOmega() {\n    double sx2 \u003d 0;\n    double sy2 \u003d 0;\n    double sxy \u003d 0;\n    double sxz \u003d 0;\n    double syz \u003d 0;\n    double currentX \u003d observations[0].getX();\n    double currentY \u003d observations[0].getY();\n    double f2Integral \u003d 0;\n    double fPrime2Integral \u003d 0;\n    final double startX \u003d currentX;\n    for (int i \u003d 1; i \u003c observations.length; ++i) {\n        final double previousX \u003d currentX;\n        final double previousY \u003d currentY;\n        currentX \u003d observations[i].getX();\n        currentY \u003d observations[i].getY();\n        final double dx \u003d currentX - previousX;\n        final double dy \u003d currentY - previousY;\n        final double f2StepIntegral \u003d dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;\n        final double fPrime2StepIntegral \u003d dy * dy / dx;\n        final double x \u003d currentX - startX;\n        f2Integral +\u003d f2StepIntegral;\n        fPrime2Integral +\u003d fPrime2StepIntegral;\n        sx2 +\u003d x * x;\n        sy2 +\u003d f2Integral * f2Integral;\n        sxy +\u003d x * f2Integral;\n        sxz +\u003d x * fPrime2Integral;\n        syz +\u003d f2Integral * fPrime2Integral;\n    }\n    double c1 \u003d sy2 * sxz - sxy * syz;\n    double c2 \u003d sxy * sxz - sx2 * syz;\n    double c3 \u003d sx2 * sy2 - sxy * sxy;\n    if ((c1 / c2 \u003c 0) || (c2 / c3 \u003c 0)) {\n        final int last \u003d observations.length - 1;\n        final double xRange \u003d observations[last].getX() - observations[0].getX();\n        if (xRange \u003d\u003d 0) {\n            throw new ZeroException();\n        }\n        omega \u003d 2 * Math.PI / xRange;\n        double yMin \u003d Double.POSITIVE_INFINITY;\n        double yMax \u003d Double.NEGATIVE_INFINITY;\n        for (int i \u003d 1; i \u003c observations.length; ++i) {\n            final double y \u003d observations[i].getY();\n            if (y \u003c yMin) {\n                yMin \u003d y;\n            }\n            if (y \u003e yMax) {\n                yMax \u003d y;\n            }\n        }\n        a \u003d 0.5 * (yMax - yMin);\n    } else {\n        a \u003d FastMath.sqrt(c1 / c2);\n        omega \u003d FastMath.sqrt(c2 / c3);\n    }\n}",
      "path": "src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java",
      "functionStartLine": 254,
      "functionName": "guessAOmega",
      "functionAnnotation": "",
      "functionDoc": "Estimate a first guess of the amplitude and angular frequency.\nThis method assumes that the {@link #sortObservations()} method\nhas been called previously.\n\n@throws ZeroException if the abscissa range is zero.\n",
      "diff": "@@ -1,44 +1,56 @@\n private void guessAOmega() {\n     double sx2 \u003d 0;\n     double sy2 \u003d 0;\n     double sxy \u003d 0;\n     double sxz \u003d 0;\n     double syz \u003d 0;\n     double currentX \u003d observations[0].getX();\n     double currentY \u003d observations[0].getY();\n     double f2Integral \u003d 0;\n     double fPrime2Integral \u003d 0;\n     final double startX \u003d currentX;\n     for (int i \u003d 1; i \u003c observations.length; ++i) {\n         final double previousX \u003d currentX;\n         final double previousY \u003d currentY;\n         currentX \u003d observations[i].getX();\n         currentY \u003d observations[i].getY();\n         final double dx \u003d currentX - previousX;\n         final double dy \u003d currentY - previousY;\n         final double f2StepIntegral \u003d dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;\n         final double fPrime2StepIntegral \u003d dy * dy / dx;\n         final double x \u003d currentX - startX;\n         f2Integral +\u003d f2StepIntegral;\n         fPrime2Integral +\u003d fPrime2StepIntegral;\n         sx2 +\u003d x * x;\n         sy2 +\u003d f2Integral * f2Integral;\n         sxy +\u003d x * f2Integral;\n         sxz +\u003d x * fPrime2Integral;\n         syz +\u003d f2Integral * fPrime2Integral;\n     }\n     double c1 \u003d sy2 * sxz - sxy * syz;\n     double c2 \u003d sxy * sxz - sx2 * syz;\n     double c3 \u003d sx2 * sy2 - sxy * sxy;\n     if ((c1 / c2 \u003c 0) || (c2 / c3 \u003c 0)) {\n-        a \u003d 0;\n-        final double range \u003d observations[observations.length - 1].getX() - observations[0].getX();\n-        if (range \u003d\u003d 0) {\n+        final int last \u003d observations.length - 1;\n+        final double xRange \u003d observations[last].getX() - observations[0].getX();\n+        if (xRange \u003d\u003d 0) {\n             throw new ZeroException();\n         }\n-        omega \u003d 2 * Math.PI / range;\n+        omega \u003d 2 * Math.PI / xRange;\n+        double yMin \u003d Double.POSITIVE_INFINITY;\n+        double yMax \u003d Double.NEGATIVE_INFINITY;\n+        for (int i \u003d 1; i \u003c observations.length; ++i) {\n+            final double y \u003d observations[i].getY();\n+            if (y \u003c yMin) {\n+                yMin \u003d y;\n+            }\n+            if (y \u003e yMax) {\n+                yMax \u003d y;\n+            }\n+        }\n+        a \u003d 0.5 * (yMax - yMin);\n     } else {\n         a \u003d FastMath.sqrt(c1 / c2);\n         omega \u003d FastMath.sqrt(c2 / c3);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b67bf47e45fa177c25fd5c445011d868a5383a6d": {
      "type": "Ymultichange(Ymovefromfile,Yexceptionschange,Ybodychange,Ydocchange)",
      "commitMessage": "MATH-517\n\"HarmonicFitter\" refactored to include the functionality of\n\"HarmonicCoefficientsGuesser\" as an inner class, and now using\n\"HarmonicOscillator\" (from package \"analysis.function\") instead of\n\"HarmonicFunction\" (from package \"optimization.fitting\").\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1073378 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/22/11, 8:13 AM",
      "commitName": "b67bf47e45fa177c25fd5c445011d868a5383a6d",
      "commitAuthor": "Gilles Sadowski",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "MATH-517\n\"HarmonicFitter\" refactored to include the functionality of\n\"HarmonicCoefficientsGuesser\" as an inner class, and now using\n\"HarmonicOscillator\" (from package \"analysis.function\") instead of\n\"HarmonicFunction\" (from package \"optimization.fitting\").\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1073378 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2/22/11, 8:13 AM",
          "commitName": "b67bf47e45fa177c25fd5c445011d868a5383a6d",
          "commitAuthor": "Gilles Sadowski",
          "commitDateOld": "2/22/11, 7:34 AM",
          "commitNameOld": "b8a0427d9e70b2da0e88edebcb76371bc5cd3c84",
          "commitAuthorOld": "Gilles Sadowski",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void guessAOmega() {\n    double sx2 \u003d 0;\n    double sy2 \u003d 0;\n    double sxy \u003d 0;\n    double sxz \u003d 0;\n    double syz \u003d 0;\n    double currentX \u003d observations[0].getX();\n    double currentY \u003d observations[0].getY();\n    double f2Integral \u003d 0;\n    double fPrime2Integral \u003d 0;\n    final double startX \u003d currentX;\n    for (int i \u003d 1; i \u003c observations.length; ++i) {\n        final double previousX \u003d currentX;\n        final double previousY \u003d currentY;\n        currentX \u003d observations[i].getX();\n        currentY \u003d observations[i].getY();\n        final double dx \u003d currentX - previousX;\n        final double dy \u003d currentY - previousY;\n        final double f2StepIntegral \u003d dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;\n        final double fPrime2StepIntegral \u003d dy * dy / dx;\n        final double x \u003d currentX - startX;\n        f2Integral +\u003d f2StepIntegral;\n        fPrime2Integral +\u003d fPrime2StepIntegral;\n        sx2 +\u003d x * x;\n        sy2 +\u003d f2Integral * f2Integral;\n        sxy +\u003d x * f2Integral;\n        sxz +\u003d x * fPrime2Integral;\n        syz +\u003d f2Integral * fPrime2Integral;\n    }\n    double c1 \u003d sy2 * sxz - sxy * syz;\n    double c2 \u003d sxy * sxz - sx2 * syz;\n    double c3 \u003d sx2 * sy2 - sxy * sxy;\n    if ((c1 / c2 \u003c 0) || (c2 / c3 \u003c 0)) {\n        a \u003d 0;\n        final double range \u003d observations[observations.length - 1].getX() - observations[0].getX();\n        if (range \u003d\u003d 0) {\n            throw new ZeroException();\n        }\n        omega \u003d 2 * Math.PI / range;\n    } else {\n        a \u003d FastMath.sqrt(c1 / c2);\n        omega \u003d FastMath.sqrt(c2 / c3);\n    }\n}",
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java",
          "functionStartLine": 254,
          "functionName": "guessAOmega",
          "functionAnnotation": "",
          "functionDoc": "Estimate a first guess of the amplitude and angular frequency.\nThis method assumes that the {@link #sortObservations()} method\nhas been called previously.\n\n@throws ZeroException if the abscissa range is zero.\n",
          "diff": "@@ -1,38 +1,44 @@\n-private void guessAOmega() throws OptimizationException {\n-    double sx2 \u003d 0.0;\n-    double sy2 \u003d 0.0;\n-    double sxy \u003d 0.0;\n-    double sxz \u003d 0.0;\n-    double syz \u003d 0.0;\n+private void guessAOmega() {\n+    double sx2 \u003d 0;\n+    double sy2 \u003d 0;\n+    double sxy \u003d 0;\n+    double sxz \u003d 0;\n+    double syz \u003d 0;\n     double currentX \u003d observations[0].getX();\n     double currentY \u003d observations[0].getY();\n     double f2Integral \u003d 0;\n     double fPrime2Integral \u003d 0;\n     final double startX \u003d currentX;\n     for (int i \u003d 1; i \u003c observations.length; ++i) {\n         final double previousX \u003d currentX;\n         final double previousY \u003d currentY;\n         currentX \u003d observations[i].getX();\n         currentY \u003d observations[i].getY();\n         final double dx \u003d currentX - previousX;\n         final double dy \u003d currentY - previousY;\n         final double f2StepIntegral \u003d dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;\n         final double fPrime2StepIntegral \u003d dy * dy / dx;\n         final double x \u003d currentX - startX;\n         f2Integral +\u003d f2StepIntegral;\n         fPrime2Integral +\u003d fPrime2StepIntegral;\n         sx2 +\u003d x * x;\n         sy2 +\u003d f2Integral * f2Integral;\n         sxy +\u003d x * f2Integral;\n         sxz +\u003d x * fPrime2Integral;\n         syz +\u003d f2Integral * fPrime2Integral;\n     }\n     double c1 \u003d sy2 * sxz - sxy * syz;\n     double c2 \u003d sxy * sxz - sx2 * syz;\n     double c3 \u003d sx2 * sy2 - sxy * sxy;\n-    if ((c1 / c2 \u003c 0.0) || (c2 / c3 \u003c 0.0)) {\n-        throw new OptimizationException(LocalizedFormats.UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS);\n+    if ((c1 / c2 \u003c 0) || (c2 / c3 \u003c 0)) {\n+        a \u003d 0;\n+        final double range \u003d observations[observations.length - 1].getX() - observations[0].getX();\n+        if (range \u003d\u003d 0) {\n+            throw new ZeroException();\n+        }\n+        omega \u003d 2 * Math.PI / range;\n+    } else {\n+        a \u003d FastMath.sqrt(c1 / c2);\n+        omega \u003d FastMath.sqrt(c2 / c3);\n     }\n-    a \u003d FastMath.sqrt(c1 / c2);\n-    omega \u003d FastMath.sqrt(c2 / c3);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java",
            "newPath": "src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java",
            "oldMethodName": "guessAOmega",
            "newMethodName": "guessAOmega"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "MATH-517\n\"HarmonicFitter\" refactored to include the functionality of\n\"HarmonicCoefficientsGuesser\" as an inner class, and now using\n\"HarmonicOscillator\" (from package \"analysis.function\") instead of\n\"HarmonicFunction\" (from package \"optimization.fitting\").\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1073378 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2/22/11, 8:13 AM",
          "commitName": "b67bf47e45fa177c25fd5c445011d868a5383a6d",
          "commitAuthor": "Gilles Sadowski",
          "commitDateOld": "2/22/11, 7:34 AM",
          "commitNameOld": "b8a0427d9e70b2da0e88edebcb76371bc5cd3c84",
          "commitAuthorOld": "Gilles Sadowski",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void guessAOmega() {\n    double sx2 \u003d 0;\n    double sy2 \u003d 0;\n    double sxy \u003d 0;\n    double sxz \u003d 0;\n    double syz \u003d 0;\n    double currentX \u003d observations[0].getX();\n    double currentY \u003d observations[0].getY();\n    double f2Integral \u003d 0;\n    double fPrime2Integral \u003d 0;\n    final double startX \u003d currentX;\n    for (int i \u003d 1; i \u003c observations.length; ++i) {\n        final double previousX \u003d currentX;\n        final double previousY \u003d currentY;\n        currentX \u003d observations[i].getX();\n        currentY \u003d observations[i].getY();\n        final double dx \u003d currentX - previousX;\n        final double dy \u003d currentY - previousY;\n        final double f2StepIntegral \u003d dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;\n        final double fPrime2StepIntegral \u003d dy * dy / dx;\n        final double x \u003d currentX - startX;\n        f2Integral +\u003d f2StepIntegral;\n        fPrime2Integral +\u003d fPrime2StepIntegral;\n        sx2 +\u003d x * x;\n        sy2 +\u003d f2Integral * f2Integral;\n        sxy +\u003d x * f2Integral;\n        sxz +\u003d x * fPrime2Integral;\n        syz +\u003d f2Integral * fPrime2Integral;\n    }\n    double c1 \u003d sy2 * sxz - sxy * syz;\n    double c2 \u003d sxy * sxz - sx2 * syz;\n    double c3 \u003d sx2 * sy2 - sxy * sxy;\n    if ((c1 / c2 \u003c 0) || (c2 / c3 \u003c 0)) {\n        a \u003d 0;\n        final double range \u003d observations[observations.length - 1].getX() - observations[0].getX();\n        if (range \u003d\u003d 0) {\n            throw new ZeroException();\n        }\n        omega \u003d 2 * Math.PI / range;\n    } else {\n        a \u003d FastMath.sqrt(c1 / c2);\n        omega \u003d FastMath.sqrt(c2 / c3);\n    }\n}",
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java",
          "functionStartLine": 254,
          "functionName": "guessAOmega",
          "functionAnnotation": "",
          "functionDoc": "Estimate a first guess of the amplitude and angular frequency.\nThis method assumes that the {@link #sortObservations()} method\nhas been called previously.\n\n@throws ZeroException if the abscissa range is zero.\n",
          "diff": "@@ -1,38 +1,44 @@\n-private void guessAOmega() throws OptimizationException {\n-    double sx2 \u003d 0.0;\n-    double sy2 \u003d 0.0;\n-    double sxy \u003d 0.0;\n-    double sxz \u003d 0.0;\n-    double syz \u003d 0.0;\n+private void guessAOmega() {\n+    double sx2 \u003d 0;\n+    double sy2 \u003d 0;\n+    double sxy \u003d 0;\n+    double sxz \u003d 0;\n+    double syz \u003d 0;\n     double currentX \u003d observations[0].getX();\n     double currentY \u003d observations[0].getY();\n     double f2Integral \u003d 0;\n     double fPrime2Integral \u003d 0;\n     final double startX \u003d currentX;\n     for (int i \u003d 1; i \u003c observations.length; ++i) {\n         final double previousX \u003d currentX;\n         final double previousY \u003d currentY;\n         currentX \u003d observations[i].getX();\n         currentY \u003d observations[i].getY();\n         final double dx \u003d currentX - previousX;\n         final double dy \u003d currentY - previousY;\n         final double f2StepIntegral \u003d dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;\n         final double fPrime2StepIntegral \u003d dy * dy / dx;\n         final double x \u003d currentX - startX;\n         f2Integral +\u003d f2StepIntegral;\n         fPrime2Integral +\u003d fPrime2StepIntegral;\n         sx2 +\u003d x * x;\n         sy2 +\u003d f2Integral * f2Integral;\n         sxy +\u003d x * f2Integral;\n         sxz +\u003d x * fPrime2Integral;\n         syz +\u003d f2Integral * fPrime2Integral;\n     }\n     double c1 \u003d sy2 * sxz - sxy * syz;\n     double c2 \u003d sxy * sxz - sx2 * syz;\n     double c3 \u003d sx2 * sy2 - sxy * sxy;\n-    if ((c1 / c2 \u003c 0.0) || (c2 / c3 \u003c 0.0)) {\n-        throw new OptimizationException(LocalizedFormats.UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS);\n+    if ((c1 / c2 \u003c 0) || (c2 / c3 \u003c 0)) {\n+        a \u003d 0;\n+        final double range \u003d observations[observations.length - 1].getX() - observations[0].getX();\n+        if (range \u003d\u003d 0) {\n+            throw new ZeroException();\n+        }\n+        omega \u003d 2 * Math.PI / range;\n+    } else {\n+        a \u003d FastMath.sqrt(c1 / c2);\n+        omega \u003d FastMath.sqrt(c2 / c3);\n     }\n-    a \u003d FastMath.sqrt(c1 / c2);\n-    omega \u003d FastMath.sqrt(c2 / c3);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[OptimizationException]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MATH-517\n\"HarmonicFitter\" refactored to include the functionality of\n\"HarmonicCoefficientsGuesser\" as an inner class, and now using\n\"HarmonicOscillator\" (from package \"analysis.function\") instead of\n\"HarmonicFunction\" (from package \"optimization.fitting\").\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1073378 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2/22/11, 8:13 AM",
          "commitName": "b67bf47e45fa177c25fd5c445011d868a5383a6d",
          "commitAuthor": "Gilles Sadowski",
          "commitDateOld": "2/22/11, 7:34 AM",
          "commitNameOld": "b8a0427d9e70b2da0e88edebcb76371bc5cd3c84",
          "commitAuthorOld": "Gilles Sadowski",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void guessAOmega() {\n    double sx2 \u003d 0;\n    double sy2 \u003d 0;\n    double sxy \u003d 0;\n    double sxz \u003d 0;\n    double syz \u003d 0;\n    double currentX \u003d observations[0].getX();\n    double currentY \u003d observations[0].getY();\n    double f2Integral \u003d 0;\n    double fPrime2Integral \u003d 0;\n    final double startX \u003d currentX;\n    for (int i \u003d 1; i \u003c observations.length; ++i) {\n        final double previousX \u003d currentX;\n        final double previousY \u003d currentY;\n        currentX \u003d observations[i].getX();\n        currentY \u003d observations[i].getY();\n        final double dx \u003d currentX - previousX;\n        final double dy \u003d currentY - previousY;\n        final double f2StepIntegral \u003d dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;\n        final double fPrime2StepIntegral \u003d dy * dy / dx;\n        final double x \u003d currentX - startX;\n        f2Integral +\u003d f2StepIntegral;\n        fPrime2Integral +\u003d fPrime2StepIntegral;\n        sx2 +\u003d x * x;\n        sy2 +\u003d f2Integral * f2Integral;\n        sxy +\u003d x * f2Integral;\n        sxz +\u003d x * fPrime2Integral;\n        syz +\u003d f2Integral * fPrime2Integral;\n    }\n    double c1 \u003d sy2 * sxz - sxy * syz;\n    double c2 \u003d sxy * sxz - sx2 * syz;\n    double c3 \u003d sx2 * sy2 - sxy * sxy;\n    if ((c1 / c2 \u003c 0) || (c2 / c3 \u003c 0)) {\n        a \u003d 0;\n        final double range \u003d observations[observations.length - 1].getX() - observations[0].getX();\n        if (range \u003d\u003d 0) {\n            throw new ZeroException();\n        }\n        omega \u003d 2 * Math.PI / range;\n    } else {\n        a \u003d FastMath.sqrt(c1 / c2);\n        omega \u003d FastMath.sqrt(c2 / c3);\n    }\n}",
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java",
          "functionStartLine": 254,
          "functionName": "guessAOmega",
          "functionAnnotation": "",
          "functionDoc": "Estimate a first guess of the amplitude and angular frequency.\nThis method assumes that the {@link #sortObservations()} method\nhas been called previously.\n\n@throws ZeroException if the abscissa range is zero.\n",
          "diff": "@@ -1,38 +1,44 @@\n-private void guessAOmega() throws OptimizationException {\n-    double sx2 \u003d 0.0;\n-    double sy2 \u003d 0.0;\n-    double sxy \u003d 0.0;\n-    double sxz \u003d 0.0;\n-    double syz \u003d 0.0;\n+private void guessAOmega() {\n+    double sx2 \u003d 0;\n+    double sy2 \u003d 0;\n+    double sxy \u003d 0;\n+    double sxz \u003d 0;\n+    double syz \u003d 0;\n     double currentX \u003d observations[0].getX();\n     double currentY \u003d observations[0].getY();\n     double f2Integral \u003d 0;\n     double fPrime2Integral \u003d 0;\n     final double startX \u003d currentX;\n     for (int i \u003d 1; i \u003c observations.length; ++i) {\n         final double previousX \u003d currentX;\n         final double previousY \u003d currentY;\n         currentX \u003d observations[i].getX();\n         currentY \u003d observations[i].getY();\n         final double dx \u003d currentX - previousX;\n         final double dy \u003d currentY - previousY;\n         final double f2StepIntegral \u003d dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;\n         final double fPrime2StepIntegral \u003d dy * dy / dx;\n         final double x \u003d currentX - startX;\n         f2Integral +\u003d f2StepIntegral;\n         fPrime2Integral +\u003d fPrime2StepIntegral;\n         sx2 +\u003d x * x;\n         sy2 +\u003d f2Integral * f2Integral;\n         sxy +\u003d x * f2Integral;\n         sxz +\u003d x * fPrime2Integral;\n         syz +\u003d f2Integral * fPrime2Integral;\n     }\n     double c1 \u003d sy2 * sxz - sxy * syz;\n     double c2 \u003d sxy * sxz - sx2 * syz;\n     double c3 \u003d sx2 * sy2 - sxy * sxy;\n-    if ((c1 / c2 \u003c 0.0) || (c2 / c3 \u003c 0.0)) {\n-        throw new OptimizationException(LocalizedFormats.UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS);\n+    if ((c1 / c2 \u003c 0) || (c2 / c3 \u003c 0)) {\n+        a \u003d 0;\n+        final double range \u003d observations[observations.length - 1].getX() - observations[0].getX();\n+        if (range \u003d\u003d 0) {\n+            throw new ZeroException();\n+        }\n+        omega \u003d 2 * Math.PI / range;\n+    } else {\n+        a \u003d FastMath.sqrt(c1 / c2);\n+        omega \u003d FastMath.sqrt(c2 / c3);\n     }\n-    a \u003d FastMath.sqrt(c1 / c2);\n-    omega \u003d FastMath.sqrt(c2 / c3);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "MATH-517\n\"HarmonicFitter\" refactored to include the functionality of\n\"HarmonicCoefficientsGuesser\" as an inner class, and now using\n\"HarmonicOscillator\" (from package \"analysis.function\") instead of\n\"HarmonicFunction\" (from package \"optimization.fitting\").\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1073378 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2/22/11, 8:13 AM",
          "commitName": "b67bf47e45fa177c25fd5c445011d868a5383a6d",
          "commitAuthor": "Gilles Sadowski",
          "commitDateOld": "2/22/11, 7:34 AM",
          "commitNameOld": "b8a0427d9e70b2da0e88edebcb76371bc5cd3c84",
          "commitAuthorOld": "Gilles Sadowski",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void guessAOmega() {\n    double sx2 \u003d 0;\n    double sy2 \u003d 0;\n    double sxy \u003d 0;\n    double sxz \u003d 0;\n    double syz \u003d 0;\n    double currentX \u003d observations[0].getX();\n    double currentY \u003d observations[0].getY();\n    double f2Integral \u003d 0;\n    double fPrime2Integral \u003d 0;\n    final double startX \u003d currentX;\n    for (int i \u003d 1; i \u003c observations.length; ++i) {\n        final double previousX \u003d currentX;\n        final double previousY \u003d currentY;\n        currentX \u003d observations[i].getX();\n        currentY \u003d observations[i].getY();\n        final double dx \u003d currentX - previousX;\n        final double dy \u003d currentY - previousY;\n        final double f2StepIntegral \u003d dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;\n        final double fPrime2StepIntegral \u003d dy * dy / dx;\n        final double x \u003d currentX - startX;\n        f2Integral +\u003d f2StepIntegral;\n        fPrime2Integral +\u003d fPrime2StepIntegral;\n        sx2 +\u003d x * x;\n        sy2 +\u003d f2Integral * f2Integral;\n        sxy +\u003d x * f2Integral;\n        sxz +\u003d x * fPrime2Integral;\n        syz +\u003d f2Integral * fPrime2Integral;\n    }\n    double c1 \u003d sy2 * sxz - sxy * syz;\n    double c2 \u003d sxy * sxz - sx2 * syz;\n    double c3 \u003d sx2 * sy2 - sxy * sxy;\n    if ((c1 / c2 \u003c 0) || (c2 / c3 \u003c 0)) {\n        a \u003d 0;\n        final double range \u003d observations[observations.length - 1].getX() - observations[0].getX();\n        if (range \u003d\u003d 0) {\n            throw new ZeroException();\n        }\n        omega \u003d 2 * Math.PI / range;\n    } else {\n        a \u003d FastMath.sqrt(c1 / c2);\n        omega \u003d FastMath.sqrt(c2 / c3);\n    }\n}",
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java",
          "functionStartLine": 254,
          "functionName": "guessAOmega",
          "functionAnnotation": "",
          "functionDoc": "Estimate a first guess of the amplitude and angular frequency.\nThis method assumes that the {@link #sortObservations()} method\nhas been called previously.\n\n@throws ZeroException if the abscissa range is zero.\n",
          "diff": "@@ -1,38 +1,44 @@\n-private void guessAOmega() throws OptimizationException {\n-    double sx2 \u003d 0.0;\n-    double sy2 \u003d 0.0;\n-    double sxy \u003d 0.0;\n-    double sxz \u003d 0.0;\n-    double syz \u003d 0.0;\n+private void guessAOmega() {\n+    double sx2 \u003d 0;\n+    double sy2 \u003d 0;\n+    double sxy \u003d 0;\n+    double sxz \u003d 0;\n+    double syz \u003d 0;\n     double currentX \u003d observations[0].getX();\n     double currentY \u003d observations[0].getY();\n     double f2Integral \u003d 0;\n     double fPrime2Integral \u003d 0;\n     final double startX \u003d currentX;\n     for (int i \u003d 1; i \u003c observations.length; ++i) {\n         final double previousX \u003d currentX;\n         final double previousY \u003d currentY;\n         currentX \u003d observations[i].getX();\n         currentY \u003d observations[i].getY();\n         final double dx \u003d currentX - previousX;\n         final double dy \u003d currentY - previousY;\n         final double f2StepIntegral \u003d dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;\n         final double fPrime2StepIntegral \u003d dy * dy / dx;\n         final double x \u003d currentX - startX;\n         f2Integral +\u003d f2StepIntegral;\n         fPrime2Integral +\u003d fPrime2StepIntegral;\n         sx2 +\u003d x * x;\n         sy2 +\u003d f2Integral * f2Integral;\n         sxy +\u003d x * f2Integral;\n         sxz +\u003d x * fPrime2Integral;\n         syz +\u003d f2Integral * fPrime2Integral;\n     }\n     double c1 \u003d sy2 * sxz - sxy * syz;\n     double c2 \u003d sxy * sxz - sx2 * syz;\n     double c3 \u003d sx2 * sy2 - sxy * sxy;\n-    if ((c1 / c2 \u003c 0.0) || (c2 / c3 \u003c 0.0)) {\n-        throw new OptimizationException(LocalizedFormats.UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS);\n+    if ((c1 / c2 \u003c 0) || (c2 / c3 \u003c 0)) {\n+        a \u003d 0;\n+        final double range \u003d observations[observations.length - 1].getX() - observations[0].getX();\n+        if (range \u003d\u003d 0) {\n+            throw new ZeroException();\n+        }\n+        omega \u003d 2 * Math.PI / range;\n+    } else {\n+        a \u003d FastMath.sqrt(c1 / c2);\n+        omega \u003d FastMath.sqrt(c2 / c3);\n     }\n-    a \u003d FastMath.sqrt(c1 / c2);\n-    omega \u003d FastMath.sqrt(c2 / c3);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Estimate a first guess of the a and \u0026omega; coefficients.\n\n@exception OptimizationException if the sample is too short or if\nthe first guess cannot be computed (when the elements under the\nsquare roots are negative).\n",
            "newValue": "Estimate a first guess of the amplitude and angular frequency.\nThis method assumes that the {@link #sortObservations()} method\nhas been called previously.\n\n@throws ZeroException if the abscissa range is zero.\n"
          }
        }
      ]
    },
    "80b1e90b42a34856b61cec628fcea6633d1000cd": {
      "type": "Ybodychange",
      "commitMessage": "added FastMath and used it everywhere in replacement of java.util.Math\nthe unit tests have not been added yet (waiting for dfp library addition)\nJIRA: MATH-375\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@990658 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/29/10, 3:04 PM",
      "commitName": "80b1e90b42a34856b61cec628fcea6633d1000cd",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "8/10/10, 3:46 AM",
      "commitNameOld": "986597f52ce9c6c1ff13fb134b91696de6ec2796",
      "commitAuthorOld": "Gilles Sadowski",
      "daysBetweenCommits": 19.47,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "private void guessAOmega() throws OptimizationException {\n    double sx2 \u003d 0.0;\n    double sy2 \u003d 0.0;\n    double sxy \u003d 0.0;\n    double sxz \u003d 0.0;\n    double syz \u003d 0.0;\n    double currentX \u003d observations[0].getX();\n    double currentY \u003d observations[0].getY();\n    double f2Integral \u003d 0;\n    double fPrime2Integral \u003d 0;\n    final double startX \u003d currentX;\n    for (int i \u003d 1; i \u003c observations.length; ++i) {\n        final double previousX \u003d currentX;\n        final double previousY \u003d currentY;\n        currentX \u003d observations[i].getX();\n        currentY \u003d observations[i].getY();\n        final double dx \u003d currentX - previousX;\n        final double dy \u003d currentY - previousY;\n        final double f2StepIntegral \u003d dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;\n        final double fPrime2StepIntegral \u003d dy * dy / dx;\n        final double x \u003d currentX - startX;\n        f2Integral +\u003d f2StepIntegral;\n        fPrime2Integral +\u003d fPrime2StepIntegral;\n        sx2 +\u003d x * x;\n        sy2 +\u003d f2Integral * f2Integral;\n        sxy +\u003d x * f2Integral;\n        sxz +\u003d x * fPrime2Integral;\n        syz +\u003d f2Integral * fPrime2Integral;\n    }\n    double c1 \u003d sy2 * sxz - sxy * syz;\n    double c2 \u003d sxy * sxz - sx2 * syz;\n    double c3 \u003d sx2 * sy2 - sxy * sxy;\n    if ((c1 / c2 \u003c 0.0) || (c2 / c3 \u003c 0.0)) {\n        throw new OptimizationException(LocalizedFormats.UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS);\n    }\n    a \u003d FastMath.sqrt(c1 / c2);\n    omega \u003d FastMath.sqrt(c2 / c3);\n}",
      "path": "src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java",
      "functionStartLine": 196,
      "functionName": "guessAOmega",
      "functionAnnotation": "",
      "functionDoc": "Estimate a first guess of the a and \u0026omega; coefficients.\n\n@exception OptimizationException if the sample is too short or if\nthe first guess cannot be computed (when the elements under the\nsquare roots are negative).\n",
      "diff": "@@ -1,38 +1,38 @@\n private void guessAOmega() throws OptimizationException {\n     double sx2 \u003d 0.0;\n     double sy2 \u003d 0.0;\n     double sxy \u003d 0.0;\n     double sxz \u003d 0.0;\n     double syz \u003d 0.0;\n     double currentX \u003d observations[0].getX();\n     double currentY \u003d observations[0].getY();\n     double f2Integral \u003d 0;\n     double fPrime2Integral \u003d 0;\n     final double startX \u003d currentX;\n     for (int i \u003d 1; i \u003c observations.length; ++i) {\n         final double previousX \u003d currentX;\n         final double previousY \u003d currentY;\n         currentX \u003d observations[i].getX();\n         currentY \u003d observations[i].getY();\n         final double dx \u003d currentX - previousX;\n         final double dy \u003d currentY - previousY;\n         final double f2StepIntegral \u003d dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;\n         final double fPrime2StepIntegral \u003d dy * dy / dx;\n         final double x \u003d currentX - startX;\n         f2Integral +\u003d f2StepIntegral;\n         fPrime2Integral +\u003d fPrime2StepIntegral;\n         sx2 +\u003d x * x;\n         sy2 +\u003d f2Integral * f2Integral;\n         sxy +\u003d x * f2Integral;\n         sxz +\u003d x * fPrime2Integral;\n         syz +\u003d f2Integral * fPrime2Integral;\n     }\n     double c1 \u003d sy2 * sxz - sxy * syz;\n     double c2 \u003d sxy * sxz - sx2 * syz;\n     double c3 \u003d sx2 * sy2 - sxy * sxy;\n     if ((c1 / c2 \u003c 0.0) || (c2 / c3 \u003c 0.0)) {\n         throw new OptimizationException(LocalizedFormats.UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS);\n     }\n-    a \u003d Math.sqrt(c1 / c2);\n-    omega \u003d Math.sqrt(c2 / c3);\n+    a \u003d FastMath.sqrt(c1 / c2);\n+    omega \u003d FastMath.sqrt(c2 / c3);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1eaea0b549f685bd416cef68faa3a137b9bb3519": {
      "type": "Ybodychange",
      "commitMessage": "changed the localization mechanism for error messages. The new system is based on an enum rather than on duplicated string literals.\nJIRA: MATH-361\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@955423 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/16/10, 4:03 PM",
      "commitName": "1eaea0b549f685bd416cef68faa3a137b9bb3519",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "8/1/09, 7:30 AM",
      "commitNameOld": "d6a438e931412713e99624cf9ed74470f1040184",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 319.36,
      "commitsBetweenForRepo": 319,
      "commitsBetweenForFile": 1,
      "actualSource": "private void guessAOmega() throws OptimizationException {\n    double sx2 \u003d 0.0;\n    double sy2 \u003d 0.0;\n    double sxy \u003d 0.0;\n    double sxz \u003d 0.0;\n    double syz \u003d 0.0;\n    double currentX \u003d observations[0].getX();\n    double currentY \u003d observations[0].getY();\n    double f2Integral \u003d 0;\n    double fPrime2Integral \u003d 0;\n    final double startX \u003d currentX;\n    for (int i \u003d 1; i \u003c observations.length; ++i) {\n        final double previousX \u003d currentX;\n        final double previousY \u003d currentY;\n        currentX \u003d observations[i].getX();\n        currentY \u003d observations[i].getY();\n        final double dx \u003d currentX - previousX;\n        final double dy \u003d currentY - previousY;\n        final double f2StepIntegral \u003d dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;\n        final double fPrime2StepIntegral \u003d dy * dy / dx;\n        final double x \u003d currentX - startX;\n        f2Integral +\u003d f2StepIntegral;\n        fPrime2Integral +\u003d fPrime2StepIntegral;\n        sx2 +\u003d x * x;\n        sy2 +\u003d f2Integral * f2Integral;\n        sxy +\u003d x * f2Integral;\n        sxz +\u003d x * fPrime2Integral;\n        syz +\u003d f2Integral * fPrime2Integral;\n    }\n    double c1 \u003d sy2 * sxz - sxy * syz;\n    double c2 \u003d sxy * sxz - sx2 * syz;\n    double c3 \u003d sx2 * sy2 - sxy * sxy;\n    if ((c1 / c2 \u003c 0.0) || (c2 / c3 \u003c 0.0)) {\n        throw new OptimizationException(LocalizedFormats.UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS);\n    }\n    a \u003d Math.sqrt(c1 / c2);\n    omega \u003d Math.sqrt(c2 / c3);\n}",
      "path": "src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java",
      "functionStartLine": 195,
      "functionName": "guessAOmega",
      "functionAnnotation": "",
      "functionDoc": "Estimate a first guess of the a and \u0026omega; coefficients.\n\n@exception OptimizationException if the sample is too short or if\nthe first guess cannot be computed (when the elements under the\nsquare roots are negative).\n",
      "diff": "@@ -1,38 +1,38 @@\n private void guessAOmega() throws OptimizationException {\n     double sx2 \u003d 0.0;\n     double sy2 \u003d 0.0;\n     double sxy \u003d 0.0;\n     double sxz \u003d 0.0;\n     double syz \u003d 0.0;\n     double currentX \u003d observations[0].getX();\n     double currentY \u003d observations[0].getY();\n     double f2Integral \u003d 0;\n     double fPrime2Integral \u003d 0;\n     final double startX \u003d currentX;\n     for (int i \u003d 1; i \u003c observations.length; ++i) {\n         final double previousX \u003d currentX;\n         final double previousY \u003d currentY;\n         currentX \u003d observations[i].getX();\n         currentY \u003d observations[i].getY();\n         final double dx \u003d currentX - previousX;\n         final double dy \u003d currentY - previousY;\n         final double f2StepIntegral \u003d dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;\n         final double fPrime2StepIntegral \u003d dy * dy / dx;\n         final double x \u003d currentX - startX;\n         f2Integral +\u003d f2StepIntegral;\n         fPrime2Integral +\u003d fPrime2StepIntegral;\n         sx2 +\u003d x * x;\n         sy2 +\u003d f2Integral * f2Integral;\n         sxy +\u003d x * f2Integral;\n         sxz +\u003d x * fPrime2Integral;\n         syz +\u003d f2Integral * fPrime2Integral;\n     }\n     double c1 \u003d sy2 * sxz - sxy * syz;\n     double c2 \u003d sxy * sxz - sx2 * syz;\n     double c3 \u003d sx2 * sy2 - sxy * sxy;\n     if ((c1 / c2 \u003c 0.0) || (c2 / c3 \u003c 0.0)) {\n-        throw new OptimizationException(\"unable to first guess the harmonic coefficients\");\n+        throw new OptimizationException(LocalizedFormats.UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS);\n     }\n     a \u003d Math.sqrt(c1 / c2);\n     omega \u003d Math.sqrt(c2 / c3);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d6a438e931412713e99624cf9ed74470f1040184": {
      "type": "Yfilerename",
      "commitMessage": "moved main java directory for compliance with maven standard directory layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@799870 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/1/09, 7:30 AM",
      "commitName": "d6a438e931412713e99624cf9ed74470f1040184",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "8/1/09, 7:23 AM",
      "commitNameOld": "2ad5ef61630be627f46ae1c266cf796f044bd4a8",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void guessAOmega() throws OptimizationException {\n    double sx2 \u003d 0.0;\n    double sy2 \u003d 0.0;\n    double sxy \u003d 0.0;\n    double sxz \u003d 0.0;\n    double syz \u003d 0.0;\n    double currentX \u003d observations[0].getX();\n    double currentY \u003d observations[0].getY();\n    double f2Integral \u003d 0;\n    double fPrime2Integral \u003d 0;\n    final double startX \u003d currentX;\n    for (int i \u003d 1; i \u003c observations.length; ++i) {\n        final double previousX \u003d currentX;\n        final double previousY \u003d currentY;\n        currentX \u003d observations[i].getX();\n        currentY \u003d observations[i].getY();\n        final double dx \u003d currentX - previousX;\n        final double dy \u003d currentY - previousY;\n        final double f2StepIntegral \u003d dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;\n        final double fPrime2StepIntegral \u003d dy * dy / dx;\n        final double x \u003d currentX - startX;\n        f2Integral +\u003d f2StepIntegral;\n        fPrime2Integral +\u003d fPrime2StepIntegral;\n        sx2 +\u003d x * x;\n        sy2 +\u003d f2Integral * f2Integral;\n        sxy +\u003d x * f2Integral;\n        sxz +\u003d x * fPrime2Integral;\n        syz +\u003d f2Integral * fPrime2Integral;\n    }\n    double c1 \u003d sy2 * sxz - sxy * syz;\n    double c2 \u003d sxy * sxz - sx2 * syz;\n    double c3 \u003d sx2 * sy2 - sxy * sxy;\n    if ((c1 / c2 \u003c 0.0) || (c2 / c3 \u003c 0.0)) {\n        throw new OptimizationException(\"unable to first guess the harmonic coefficients\");\n    }\n    a \u003d Math.sqrt(c1 / c2);\n    omega \u003d Math.sqrt(c2 / c3);\n}",
      "path": "src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java",
      "functionStartLine": 194,
      "functionName": "guessAOmega",
      "functionAnnotation": "",
      "functionDoc": "Estimate a first guess of the a and \u0026omega; coefficients.\n\n@exception OptimizationException if the sample is too short or if\nthe first guess cannot be computed (when the elements under the\nsquare roots are negative).\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java",
        "newPath": "src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java"
      }
    },
    "8fd1834813ca42fa107b783fd57672f4f5bc9091": {
      "type": "Ymultichange(Ymovefromfile,Yexceptionschange,Ybodychange,Ydocchange)",
      "commitMessage": "merged curve fitting from mantissa into commons-math\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@786479 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/19/09, 5:36 AM",
      "commitName": "8fd1834813ca42fa107b783fd57672f4f5bc9091",
      "commitAuthor": "Luc Maisonobe",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "merged curve fitting from mantissa into commons-math\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@786479 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "6/19/09, 5:36 AM",
          "commitName": "8fd1834813ca42fa107b783fd57672f4f5bc9091",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "6/19/09, 5:33 AM",
          "commitNameOld": "2f65d00640bf4ba57dd24f390c489b131480cc2f",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void guessAOmega() throws OptimizationException {\n    double sx2 \u003d 0.0;\n    double sy2 \u003d 0.0;\n    double sxy \u003d 0.0;\n    double sxz \u003d 0.0;\n    double syz \u003d 0.0;\n    double currentX \u003d observations[0].getX();\n    double currentY \u003d observations[0].getY();\n    double f2Integral \u003d 0;\n    double fPrime2Integral \u003d 0;\n    final double startX \u003d currentX;\n    for (int i \u003d 1; i \u003c observations.length; ++i) {\n        final double previousX \u003d currentX;\n        final double previousY \u003d currentY;\n        currentX \u003d observations[i].getX();\n        currentY \u003d observations[i].getY();\n        final double dx \u003d currentX - previousX;\n        final double dy \u003d currentY - previousY;\n        final double f2StepIntegral \u003d dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;\n        final double fPrime2StepIntegral \u003d dy * dy / dx;\n        final double x \u003d currentX - startX;\n        f2Integral +\u003d f2StepIntegral;\n        fPrime2Integral +\u003d fPrime2StepIntegral;\n        sx2 +\u003d x * x;\n        sy2 +\u003d f2Integral * f2Integral;\n        sxy +\u003d x * f2Integral;\n        sxz +\u003d x * fPrime2Integral;\n        syz +\u003d f2Integral * fPrime2Integral;\n    }\n    double c1 \u003d sy2 * sxz - sxy * syz;\n    double c2 \u003d sxy * sxz - sx2 * syz;\n    double c3 \u003d sx2 * sy2 - sxy * sxy;\n    if ((c1 / c2 \u003c 0.0) || (c2 / c3 \u003c 0.0)) {\n        throw new OptimizationException(\"unable to first guess the harmonic coefficients\");\n    }\n    a \u003d Math.sqrt(c1 / c2);\n    omega \u003d Math.sqrt(c2 / c3);\n}",
          "path": "src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java",
          "functionStartLine": 194,
          "functionName": "guessAOmega",
          "functionAnnotation": "",
          "functionDoc": "Estimate a first guess of the a and \u0026omega; coefficients.\n\n@exception OptimizationException if the sample is too short or if\nthe first guess cannot be computed (when the elements under the\nsquare roots are negative).\n",
          "diff": "@@ -1,33 +1,38 @@\n-private void guessAOmega() throws ExhaustedSampleException, FunctionException, EstimationException {\n+private void guessAOmega() throws OptimizationException {\n     double sx2 \u003d 0.0;\n     double sy2 \u003d 0.0;\n     double sxy \u003d 0.0;\n     double sxz \u003d 0.0;\n     double syz \u003d 0.0;\n-    F2FP2Iterator iter \u003d new F2FP2Iterator(measurements);\n-    SampledFunctionIterator sampler \u003d new EnhancedSimpsonIntegratorSampler(iter);\n-    VectorialValuedPair p0 \u003d sampler.nextSamplePoint();\n-    double p0X \u003d p0.x;\n-    double[] p0Y \u003d p0.y;\n-    while (sampler.hasNext()) {\n-        VectorialValuedPair point \u003d sampler.nextSamplePoint();\n-        double pX \u003d point.x;\n-        double[] pY \u003d point.y;\n-        double x \u003d pX - p0X;\n-        double y \u003d pY[0] - p0Y[0];\n-        double z \u003d pY[1] - p0Y[1];\n+    double currentX \u003d observations[0].getX();\n+    double currentY \u003d observations[0].getY();\n+    double f2Integral \u003d 0;\n+    double fPrime2Integral \u003d 0;\n+    final double startX \u003d currentX;\n+    for (int i \u003d 1; i \u003c observations.length; ++i) {\n+        final double previousX \u003d currentX;\n+        final double previousY \u003d currentY;\n+        currentX \u003d observations[i].getX();\n+        currentY \u003d observations[i].getY();\n+        final double dx \u003d currentX - previousX;\n+        final double dy \u003d currentY - previousY;\n+        final double f2StepIntegral \u003d dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;\n+        final double fPrime2StepIntegral \u003d dy * dy / dx;\n+        final double x \u003d currentX - startX;\n+        f2Integral +\u003d f2StepIntegral;\n+        fPrime2Integral +\u003d fPrime2StepIntegral;\n         sx2 +\u003d x * x;\n-        sy2 +\u003d y * y;\n-        sxy +\u003d x * y;\n-        sxz +\u003d x * z;\n-        syz +\u003d y * z;\n+        sy2 +\u003d f2Integral * f2Integral;\n+        sxy +\u003d x * f2Integral;\n+        sxz +\u003d x * fPrime2Integral;\n+        syz +\u003d f2Integral * fPrime2Integral;\n     }\n     double c1 \u003d sy2 * sxz - sxy * syz;\n     double c2 \u003d sxy * sxz - sx2 * syz;\n     double c3 \u003d sx2 * sy2 - sxy * sxy;\n     if ((c1 / c2 \u003c 0.0) || (c2 / c3 \u003c 0.0)) {\n-        throw new EstimationException(\"unable to guess a first estimate\");\n+        throw new OptimizationException(\"unable to first guess the harmonic coefficients\");\n     }\n     a \u003d Math.sqrt(c1 / c2);\n     omega \u003d Math.sqrt(c2 / c3);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java",
            "newPath": "src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java",
            "oldMethodName": "guessAOmega",
            "newMethodName": "guessAOmega"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "merged curve fitting from mantissa into commons-math\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@786479 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "6/19/09, 5:36 AM",
          "commitName": "8fd1834813ca42fa107b783fd57672f4f5bc9091",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "6/19/09, 5:33 AM",
          "commitNameOld": "2f65d00640bf4ba57dd24f390c489b131480cc2f",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void guessAOmega() throws OptimizationException {\n    double sx2 \u003d 0.0;\n    double sy2 \u003d 0.0;\n    double sxy \u003d 0.0;\n    double sxz \u003d 0.0;\n    double syz \u003d 0.0;\n    double currentX \u003d observations[0].getX();\n    double currentY \u003d observations[0].getY();\n    double f2Integral \u003d 0;\n    double fPrime2Integral \u003d 0;\n    final double startX \u003d currentX;\n    for (int i \u003d 1; i \u003c observations.length; ++i) {\n        final double previousX \u003d currentX;\n        final double previousY \u003d currentY;\n        currentX \u003d observations[i].getX();\n        currentY \u003d observations[i].getY();\n        final double dx \u003d currentX - previousX;\n        final double dy \u003d currentY - previousY;\n        final double f2StepIntegral \u003d dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;\n        final double fPrime2StepIntegral \u003d dy * dy / dx;\n        final double x \u003d currentX - startX;\n        f2Integral +\u003d f2StepIntegral;\n        fPrime2Integral +\u003d fPrime2StepIntegral;\n        sx2 +\u003d x * x;\n        sy2 +\u003d f2Integral * f2Integral;\n        sxy +\u003d x * f2Integral;\n        sxz +\u003d x * fPrime2Integral;\n        syz +\u003d f2Integral * fPrime2Integral;\n    }\n    double c1 \u003d sy2 * sxz - sxy * syz;\n    double c2 \u003d sxy * sxz - sx2 * syz;\n    double c3 \u003d sx2 * sy2 - sxy * sxy;\n    if ((c1 / c2 \u003c 0.0) || (c2 / c3 \u003c 0.0)) {\n        throw new OptimizationException(\"unable to first guess the harmonic coefficients\");\n    }\n    a \u003d Math.sqrt(c1 / c2);\n    omega \u003d Math.sqrt(c2 / c3);\n}",
          "path": "src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java",
          "functionStartLine": 194,
          "functionName": "guessAOmega",
          "functionAnnotation": "",
          "functionDoc": "Estimate a first guess of the a and \u0026omega; coefficients.\n\n@exception OptimizationException if the sample is too short or if\nthe first guess cannot be computed (when the elements under the\nsquare roots are negative).\n",
          "diff": "@@ -1,33 +1,38 @@\n-private void guessAOmega() throws ExhaustedSampleException, FunctionException, EstimationException {\n+private void guessAOmega() throws OptimizationException {\n     double sx2 \u003d 0.0;\n     double sy2 \u003d 0.0;\n     double sxy \u003d 0.0;\n     double sxz \u003d 0.0;\n     double syz \u003d 0.0;\n-    F2FP2Iterator iter \u003d new F2FP2Iterator(measurements);\n-    SampledFunctionIterator sampler \u003d new EnhancedSimpsonIntegratorSampler(iter);\n-    VectorialValuedPair p0 \u003d sampler.nextSamplePoint();\n-    double p0X \u003d p0.x;\n-    double[] p0Y \u003d p0.y;\n-    while (sampler.hasNext()) {\n-        VectorialValuedPair point \u003d sampler.nextSamplePoint();\n-        double pX \u003d point.x;\n-        double[] pY \u003d point.y;\n-        double x \u003d pX - p0X;\n-        double y \u003d pY[0] - p0Y[0];\n-        double z \u003d pY[1] - p0Y[1];\n+    double currentX \u003d observations[0].getX();\n+    double currentY \u003d observations[0].getY();\n+    double f2Integral \u003d 0;\n+    double fPrime2Integral \u003d 0;\n+    final double startX \u003d currentX;\n+    for (int i \u003d 1; i \u003c observations.length; ++i) {\n+        final double previousX \u003d currentX;\n+        final double previousY \u003d currentY;\n+        currentX \u003d observations[i].getX();\n+        currentY \u003d observations[i].getY();\n+        final double dx \u003d currentX - previousX;\n+        final double dy \u003d currentY - previousY;\n+        final double f2StepIntegral \u003d dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;\n+        final double fPrime2StepIntegral \u003d dy * dy / dx;\n+        final double x \u003d currentX - startX;\n+        f2Integral +\u003d f2StepIntegral;\n+        fPrime2Integral +\u003d fPrime2StepIntegral;\n         sx2 +\u003d x * x;\n-        sy2 +\u003d y * y;\n-        sxy +\u003d x * y;\n-        sxz +\u003d x * z;\n-        syz +\u003d y * z;\n+        sy2 +\u003d f2Integral * f2Integral;\n+        sxy +\u003d x * f2Integral;\n+        sxz +\u003d x * fPrime2Integral;\n+        syz +\u003d f2Integral * fPrime2Integral;\n     }\n     double c1 \u003d sy2 * sxz - sxy * syz;\n     double c2 \u003d sxy * sxz - sx2 * syz;\n     double c3 \u003d sx2 * sy2 - sxy * sxy;\n     if ((c1 / c2 \u003c 0.0) || (c2 / c3 \u003c 0.0)) {\n-        throw new EstimationException(\"unable to guess a first estimate\");\n+        throw new OptimizationException(\"unable to first guess the harmonic coefficients\");\n     }\n     a \u003d Math.sqrt(c1 / c2);\n     omega \u003d Math.sqrt(c2 / c3);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[ExhaustedSampleException, FunctionException, EstimationException]",
            "newValue": "[OptimizationException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "merged curve fitting from mantissa into commons-math\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@786479 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "6/19/09, 5:36 AM",
          "commitName": "8fd1834813ca42fa107b783fd57672f4f5bc9091",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "6/19/09, 5:33 AM",
          "commitNameOld": "2f65d00640bf4ba57dd24f390c489b131480cc2f",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void guessAOmega() throws OptimizationException {\n    double sx2 \u003d 0.0;\n    double sy2 \u003d 0.0;\n    double sxy \u003d 0.0;\n    double sxz \u003d 0.0;\n    double syz \u003d 0.0;\n    double currentX \u003d observations[0].getX();\n    double currentY \u003d observations[0].getY();\n    double f2Integral \u003d 0;\n    double fPrime2Integral \u003d 0;\n    final double startX \u003d currentX;\n    for (int i \u003d 1; i \u003c observations.length; ++i) {\n        final double previousX \u003d currentX;\n        final double previousY \u003d currentY;\n        currentX \u003d observations[i].getX();\n        currentY \u003d observations[i].getY();\n        final double dx \u003d currentX - previousX;\n        final double dy \u003d currentY - previousY;\n        final double f2StepIntegral \u003d dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;\n        final double fPrime2StepIntegral \u003d dy * dy / dx;\n        final double x \u003d currentX - startX;\n        f2Integral +\u003d f2StepIntegral;\n        fPrime2Integral +\u003d fPrime2StepIntegral;\n        sx2 +\u003d x * x;\n        sy2 +\u003d f2Integral * f2Integral;\n        sxy +\u003d x * f2Integral;\n        sxz +\u003d x * fPrime2Integral;\n        syz +\u003d f2Integral * fPrime2Integral;\n    }\n    double c1 \u003d sy2 * sxz - sxy * syz;\n    double c2 \u003d sxy * sxz - sx2 * syz;\n    double c3 \u003d sx2 * sy2 - sxy * sxy;\n    if ((c1 / c2 \u003c 0.0) || (c2 / c3 \u003c 0.0)) {\n        throw new OptimizationException(\"unable to first guess the harmonic coefficients\");\n    }\n    a \u003d Math.sqrt(c1 / c2);\n    omega \u003d Math.sqrt(c2 / c3);\n}",
          "path": "src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java",
          "functionStartLine": 194,
          "functionName": "guessAOmega",
          "functionAnnotation": "",
          "functionDoc": "Estimate a first guess of the a and \u0026omega; coefficients.\n\n@exception OptimizationException if the sample is too short or if\nthe first guess cannot be computed (when the elements under the\nsquare roots are negative).\n",
          "diff": "@@ -1,33 +1,38 @@\n-private void guessAOmega() throws ExhaustedSampleException, FunctionException, EstimationException {\n+private void guessAOmega() throws OptimizationException {\n     double sx2 \u003d 0.0;\n     double sy2 \u003d 0.0;\n     double sxy \u003d 0.0;\n     double sxz \u003d 0.0;\n     double syz \u003d 0.0;\n-    F2FP2Iterator iter \u003d new F2FP2Iterator(measurements);\n-    SampledFunctionIterator sampler \u003d new EnhancedSimpsonIntegratorSampler(iter);\n-    VectorialValuedPair p0 \u003d sampler.nextSamplePoint();\n-    double p0X \u003d p0.x;\n-    double[] p0Y \u003d p0.y;\n-    while (sampler.hasNext()) {\n-        VectorialValuedPair point \u003d sampler.nextSamplePoint();\n-        double pX \u003d point.x;\n-        double[] pY \u003d point.y;\n-        double x \u003d pX - p0X;\n-        double y \u003d pY[0] - p0Y[0];\n-        double z \u003d pY[1] - p0Y[1];\n+    double currentX \u003d observations[0].getX();\n+    double currentY \u003d observations[0].getY();\n+    double f2Integral \u003d 0;\n+    double fPrime2Integral \u003d 0;\n+    final double startX \u003d currentX;\n+    for (int i \u003d 1; i \u003c observations.length; ++i) {\n+        final double previousX \u003d currentX;\n+        final double previousY \u003d currentY;\n+        currentX \u003d observations[i].getX();\n+        currentY \u003d observations[i].getY();\n+        final double dx \u003d currentX - previousX;\n+        final double dy \u003d currentY - previousY;\n+        final double f2StepIntegral \u003d dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;\n+        final double fPrime2StepIntegral \u003d dy * dy / dx;\n+        final double x \u003d currentX - startX;\n+        f2Integral +\u003d f2StepIntegral;\n+        fPrime2Integral +\u003d fPrime2StepIntegral;\n         sx2 +\u003d x * x;\n-        sy2 +\u003d y * y;\n-        sxy +\u003d x * y;\n-        sxz +\u003d x * z;\n-        syz +\u003d y * z;\n+        sy2 +\u003d f2Integral * f2Integral;\n+        sxy +\u003d x * f2Integral;\n+        sxz +\u003d x * fPrime2Integral;\n+        syz +\u003d f2Integral * fPrime2Integral;\n     }\n     double c1 \u003d sy2 * sxz - sxy * syz;\n     double c2 \u003d sxy * sxz - sx2 * syz;\n     double c3 \u003d sx2 * sy2 - sxy * sxy;\n     if ((c1 / c2 \u003c 0.0) || (c2 / c3 \u003c 0.0)) {\n-        throw new EstimationException(\"unable to guess a first estimate\");\n+        throw new OptimizationException(\"unable to first guess the harmonic coefficients\");\n     }\n     a \u003d Math.sqrt(c1 / c2);\n     omega \u003d Math.sqrt(c2 / c3);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "merged curve fitting from mantissa into commons-math\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@786479 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "6/19/09, 5:36 AM",
          "commitName": "8fd1834813ca42fa107b783fd57672f4f5bc9091",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "6/19/09, 5:33 AM",
          "commitNameOld": "2f65d00640bf4ba57dd24f390c489b131480cc2f",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void guessAOmega() throws OptimizationException {\n    double sx2 \u003d 0.0;\n    double sy2 \u003d 0.0;\n    double sxy \u003d 0.0;\n    double sxz \u003d 0.0;\n    double syz \u003d 0.0;\n    double currentX \u003d observations[0].getX();\n    double currentY \u003d observations[0].getY();\n    double f2Integral \u003d 0;\n    double fPrime2Integral \u003d 0;\n    final double startX \u003d currentX;\n    for (int i \u003d 1; i \u003c observations.length; ++i) {\n        final double previousX \u003d currentX;\n        final double previousY \u003d currentY;\n        currentX \u003d observations[i].getX();\n        currentY \u003d observations[i].getY();\n        final double dx \u003d currentX - previousX;\n        final double dy \u003d currentY - previousY;\n        final double f2StepIntegral \u003d dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;\n        final double fPrime2StepIntegral \u003d dy * dy / dx;\n        final double x \u003d currentX - startX;\n        f2Integral +\u003d f2StepIntegral;\n        fPrime2Integral +\u003d fPrime2StepIntegral;\n        sx2 +\u003d x * x;\n        sy2 +\u003d f2Integral * f2Integral;\n        sxy +\u003d x * f2Integral;\n        sxz +\u003d x * fPrime2Integral;\n        syz +\u003d f2Integral * fPrime2Integral;\n    }\n    double c1 \u003d sy2 * sxz - sxy * syz;\n    double c2 \u003d sxy * sxz - sx2 * syz;\n    double c3 \u003d sx2 * sy2 - sxy * sxy;\n    if ((c1 / c2 \u003c 0.0) || (c2 / c3 \u003c 0.0)) {\n        throw new OptimizationException(\"unable to first guess the harmonic coefficients\");\n    }\n    a \u003d Math.sqrt(c1 / c2);\n    omega \u003d Math.sqrt(c2 / c3);\n}",
          "path": "src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java",
          "functionStartLine": 194,
          "functionName": "guessAOmega",
          "functionAnnotation": "",
          "functionDoc": "Estimate a first guess of the a and \u0026omega; coefficients.\n\n@exception OptimizationException if the sample is too short or if\nthe first guess cannot be computed (when the elements under the\nsquare roots are negative).\n",
          "diff": "@@ -1,33 +1,38 @@\n-private void guessAOmega() throws ExhaustedSampleException, FunctionException, EstimationException {\n+private void guessAOmega() throws OptimizationException {\n     double sx2 \u003d 0.0;\n     double sy2 \u003d 0.0;\n     double sxy \u003d 0.0;\n     double sxz \u003d 0.0;\n     double syz \u003d 0.0;\n-    F2FP2Iterator iter \u003d new F2FP2Iterator(measurements);\n-    SampledFunctionIterator sampler \u003d new EnhancedSimpsonIntegratorSampler(iter);\n-    VectorialValuedPair p0 \u003d sampler.nextSamplePoint();\n-    double p0X \u003d p0.x;\n-    double[] p0Y \u003d p0.y;\n-    while (sampler.hasNext()) {\n-        VectorialValuedPair point \u003d sampler.nextSamplePoint();\n-        double pX \u003d point.x;\n-        double[] pY \u003d point.y;\n-        double x \u003d pX - p0X;\n-        double y \u003d pY[0] - p0Y[0];\n-        double z \u003d pY[1] - p0Y[1];\n+    double currentX \u003d observations[0].getX();\n+    double currentY \u003d observations[0].getY();\n+    double f2Integral \u003d 0;\n+    double fPrime2Integral \u003d 0;\n+    final double startX \u003d currentX;\n+    for (int i \u003d 1; i \u003c observations.length; ++i) {\n+        final double previousX \u003d currentX;\n+        final double previousY \u003d currentY;\n+        currentX \u003d observations[i].getX();\n+        currentY \u003d observations[i].getY();\n+        final double dx \u003d currentX - previousX;\n+        final double dy \u003d currentY - previousY;\n+        final double f2StepIntegral \u003d dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;\n+        final double fPrime2StepIntegral \u003d dy * dy / dx;\n+        final double x \u003d currentX - startX;\n+        f2Integral +\u003d f2StepIntegral;\n+        fPrime2Integral +\u003d fPrime2StepIntegral;\n         sx2 +\u003d x * x;\n-        sy2 +\u003d y * y;\n-        sxy +\u003d x * y;\n-        sxz +\u003d x * z;\n-        syz +\u003d y * z;\n+        sy2 +\u003d f2Integral * f2Integral;\n+        sxy +\u003d x * f2Integral;\n+        sxz +\u003d x * fPrime2Integral;\n+        syz +\u003d f2Integral * fPrime2Integral;\n     }\n     double c1 \u003d sy2 * sxz - sxy * syz;\n     double c2 \u003d sxy * sxz - sx2 * syz;\n     double c3 \u003d sx2 * sy2 - sxy * sxy;\n     if ((c1 / c2 \u003c 0.0) || (c2 / c3 \u003c 0.0)) {\n-        throw new EstimationException(\"unable to guess a first estimate\");\n+        throw new OptimizationException(\"unable to first guess the harmonic coefficients\");\n     }\n     a \u003d Math.sqrt(c1 / c2);\n     omega \u003d Math.sqrt(c2 / c3);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Estimate a first guess of the a and \u0026omega; coefficients.\n\n@exception ExhaustedSampleException if the sample is exhausted.\n@exception FunctionException if the integrator throws one.\n@exception EstimationException if the sample is too short or if\nthe first guess cannot be computed (when the elements under the\nsquare roots are negative).\n",
            "newValue": "Estimate a first guess of the a and \u0026omega; coefficients.\n\n@exception OptimizationException if the sample is too short or if\nthe first guess cannot be computed (when the elements under the\nsquare roots are negative).\n"
          }
        }
      ]
    },
    "676c203843a2b968236da27702eb8789051a9784": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Updated contributed sources - Mantissa 7 upgrade. JIRA: MATH-162\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@488828 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/19/06, 2:11 PM",
      "commitName": "676c203843a2b968236da27702eb8789051a9784",
      "commitAuthor": "Phil Steitz",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Updated contributed sources - Mantissa 7 upgrade. JIRA: MATH-162\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@488828 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/19/06, 2:11 PM",
          "commitName": "676c203843a2b968236da27702eb8789051a9784",
          "commitAuthor": "Phil Steitz",
          "commitDateOld": "11/19/06, 1:36 PM",
          "commitNameOld": "89ac173c2b467e6289df0e62f2a43ed1730fbad5",
          "commitAuthorOld": "Phil Steitz",
          "daysBetweenCommits": 30.02,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "actualSource": "private void guessAOmega() throws ExhaustedSampleException, FunctionException, EstimationException {\n    double sx2 \u003d 0.0;\n    double sy2 \u003d 0.0;\n    double sxy \u003d 0.0;\n    double sxz \u003d 0.0;\n    double syz \u003d 0.0;\n    F2FP2Iterator iter \u003d new F2FP2Iterator(measurements);\n    SampledFunctionIterator sampler \u003d new EnhancedSimpsonIntegratorSampler(iter);\n    VectorialValuedPair p0 \u003d sampler.nextSamplePoint();\n    double p0X \u003d p0.x;\n    double[] p0Y \u003d p0.y;\n    while (sampler.hasNext()) {\n        VectorialValuedPair point \u003d sampler.nextSamplePoint();\n        double pX \u003d point.x;\n        double[] pY \u003d point.y;\n        double x \u003d pX - p0X;\n        double y \u003d pY[0] - p0Y[0];\n        double z \u003d pY[1] - p0Y[1];\n        sx2 +\u003d x * x;\n        sy2 +\u003d y * y;\n        sxy +\u003d x * y;\n        sxz +\u003d x * z;\n        syz +\u003d y * z;\n    }\n    double c1 \u003d sy2 * sxz - sxy * syz;\n    double c2 \u003d sxy * sxz - sx2 * syz;\n    double c3 \u003d sx2 * sy2 - sxy * sxy;\n    if ((c1 / c2 \u003c 0.0) || (c2 / c3 \u003c 0.0)) {\n        throw new EstimationException(\"unable to guess a first estimate\");\n    }\n    a \u003d Math.sqrt(c1 / c2);\n    omega \u003d Math.sqrt(c2 / c3);\n}",
          "path": "src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java",
          "functionStartLine": 172,
          "functionName": "guessAOmega",
          "functionAnnotation": "",
          "functionDoc": "Estimate a first guess of the a and \u0026omega; coefficients.\n\n@exception ExhaustedSampleException if the sample is exhausted.\n@exception FunctionException if the integrator throws one.\n@exception EstimationException if the sample is too short or if\nthe first guess cannot be computed (when the elements under the\nsquare roots are negative).\n",
          "diff": "@@ -1,33 +1,33 @@\n private void guessAOmega() throws ExhaustedSampleException, FunctionException, EstimationException {\n     double sx2 \u003d 0.0;\n     double sy2 \u003d 0.0;\n     double sxy \u003d 0.0;\n     double sxz \u003d 0.0;\n     double syz \u003d 0.0;\n     F2FP2Iterator iter \u003d new F2FP2Iterator(measurements);\n     SampledFunctionIterator sampler \u003d new EnhancedSimpsonIntegratorSampler(iter);\n     VectorialValuedPair p0 \u003d sampler.nextSamplePoint();\n-    double p0X \u003d p0.getX();\n-    double[] p0Y \u003d p0.getY();\n+    double p0X \u003d p0.x;\n+    double[] p0Y \u003d p0.y;\n     while (sampler.hasNext()) {\n         VectorialValuedPair point \u003d sampler.nextSamplePoint();\n-        double pX \u003d point.getX();\n-        double[] pY \u003d point.getY();\n-        double dx \u003d pX - p0X;\n-        double dy0 \u003d pY[0] - p0Y[0];\n-        double dy1 \u003d pY[1] - p0Y[1];\n-        sx2 +\u003d dx * dx;\n-        sy2 +\u003d dy0 * dy0;\n-        sxy +\u003d dx * dy0;\n-        sxz +\u003d dx * dy1;\n-        syz +\u003d dy0 * dy1;\n+        double pX \u003d point.x;\n+        double[] pY \u003d point.y;\n+        double x \u003d pX - p0X;\n+        double y \u003d pY[0] - p0Y[0];\n+        double z \u003d pY[1] - p0Y[1];\n+        sx2 +\u003d x * x;\n+        sy2 +\u003d y * y;\n+        sxy +\u003d x * y;\n+        sxz +\u003d x * z;\n+        syz +\u003d y * z;\n     }\n     double c1 \u003d sy2 * sxz - sxy * syz;\n     double c2 \u003d sxy * sxz - sx2 * syz;\n     double c3 \u003d sx2 * sy2 - sxy * sxy;\n     if ((c1 / c2 \u003c 0.0) || (c2 / c3 \u003c 0.0)) {\n         throw new EstimationException(\"unable to guess a first estimate\");\n     }\n     a \u003d Math.sqrt(c1 / c2);\n     omega \u003d Math.sqrt(c2 / c3);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Updated contributed sources - Mantissa 7 upgrade. JIRA: MATH-162\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@488828 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/19/06, 2:11 PM",
          "commitName": "676c203843a2b968236da27702eb8789051a9784",
          "commitAuthor": "Phil Steitz",
          "commitDateOld": "11/19/06, 1:36 PM",
          "commitNameOld": "89ac173c2b467e6289df0e62f2a43ed1730fbad5",
          "commitAuthorOld": "Phil Steitz",
          "daysBetweenCommits": 30.02,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "actualSource": "private void guessAOmega() throws ExhaustedSampleException, FunctionException, EstimationException {\n    double sx2 \u003d 0.0;\n    double sy2 \u003d 0.0;\n    double sxy \u003d 0.0;\n    double sxz \u003d 0.0;\n    double syz \u003d 0.0;\n    F2FP2Iterator iter \u003d new F2FP2Iterator(measurements);\n    SampledFunctionIterator sampler \u003d new EnhancedSimpsonIntegratorSampler(iter);\n    VectorialValuedPair p0 \u003d sampler.nextSamplePoint();\n    double p0X \u003d p0.x;\n    double[] p0Y \u003d p0.y;\n    while (sampler.hasNext()) {\n        VectorialValuedPair point \u003d sampler.nextSamplePoint();\n        double pX \u003d point.x;\n        double[] pY \u003d point.y;\n        double x \u003d pX - p0X;\n        double y \u003d pY[0] - p0Y[0];\n        double z \u003d pY[1] - p0Y[1];\n        sx2 +\u003d x * x;\n        sy2 +\u003d y * y;\n        sxy +\u003d x * y;\n        sxz +\u003d x * z;\n        syz +\u003d y * z;\n    }\n    double c1 \u003d sy2 * sxz - sxy * syz;\n    double c2 \u003d sxy * sxz - sx2 * syz;\n    double c3 \u003d sx2 * sy2 - sxy * sxy;\n    if ((c1 / c2 \u003c 0.0) || (c2 / c3 \u003c 0.0)) {\n        throw new EstimationException(\"unable to guess a first estimate\");\n    }\n    a \u003d Math.sqrt(c1 / c2);\n    omega \u003d Math.sqrt(c2 / c3);\n}",
          "path": "src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java",
          "functionStartLine": 172,
          "functionName": "guessAOmega",
          "functionAnnotation": "",
          "functionDoc": "Estimate a first guess of the a and \u0026omega; coefficients.\n\n@exception ExhaustedSampleException if the sample is exhausted.\n@exception FunctionException if the integrator throws one.\n@exception EstimationException if the sample is too short or if\nthe first guess cannot be computed (when the elements under the\nsquare roots are negative).\n",
          "diff": "@@ -1,33 +1,33 @@\n private void guessAOmega() throws ExhaustedSampleException, FunctionException, EstimationException {\n     double sx2 \u003d 0.0;\n     double sy2 \u003d 0.0;\n     double sxy \u003d 0.0;\n     double sxz \u003d 0.0;\n     double syz \u003d 0.0;\n     F2FP2Iterator iter \u003d new F2FP2Iterator(measurements);\n     SampledFunctionIterator sampler \u003d new EnhancedSimpsonIntegratorSampler(iter);\n     VectorialValuedPair p0 \u003d sampler.nextSamplePoint();\n-    double p0X \u003d p0.getX();\n-    double[] p0Y \u003d p0.getY();\n+    double p0X \u003d p0.x;\n+    double[] p0Y \u003d p0.y;\n     while (sampler.hasNext()) {\n         VectorialValuedPair point \u003d sampler.nextSamplePoint();\n-        double pX \u003d point.getX();\n-        double[] pY \u003d point.getY();\n-        double dx \u003d pX - p0X;\n-        double dy0 \u003d pY[0] - p0Y[0];\n-        double dy1 \u003d pY[1] - p0Y[1];\n-        sx2 +\u003d dx * dx;\n-        sy2 +\u003d dy0 * dy0;\n-        sxy +\u003d dx * dy0;\n-        sxz +\u003d dx * dy1;\n-        syz +\u003d dy0 * dy1;\n+        double pX \u003d point.x;\n+        double[] pY \u003d point.y;\n+        double x \u003d pX - p0X;\n+        double y \u003d pY[0] - p0Y[0];\n+        double z \u003d pY[1] - p0Y[1];\n+        sx2 +\u003d x * x;\n+        sy2 +\u003d y * y;\n+        sxy +\u003d x * y;\n+        sxz +\u003d x * z;\n+        syz +\u003d y * z;\n     }\n     double c1 \u003d sy2 * sxz - sxy * syz;\n     double c2 \u003d sxy * sxz - sx2 * syz;\n     double c3 \u003d sx2 * sy2 - sxy * sxy;\n     if ((c1 / c2 \u003c 0.0) || (c2 / c3 \u003c 0.0)) {\n         throw new EstimationException(\"unable to guess a first estimate\");\n     }\n     a \u003d Math.sqrt(c1 / c2);\n     omega \u003d Math.sqrt(c2 / c3);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Estimate a first guess of the a and omega coefficients.\n\n@exception ExhaustedSampleException if the sample is exhausted.\n@exception FunctionException if the integrator throws one.\n@exception EstimationException if the sample is too short or if\nthe first guess cannot be computed (when the elements under the\nsquare roots are negative).\n",
            "newValue": "Estimate a first guess of the a and \u0026omega; coefficients.\n\n@exception ExhaustedSampleException if the sample is exhausted.\n@exception FunctionException if the integrator throws one.\n@exception EstimationException if the sample is too short or if\nthe first guess cannot be computed (when the elements under the\nsquare roots are negative).\n"
          }
        }
      ]
    },
    "89ac173c2b467e6289df0e62f2a43ed1730fbad5": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@476930 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/19/06, 1:36 PM",
      "commitName": "89ac173c2b467e6289df0e62f2a43ed1730fbad5",
      "commitAuthor": "Phil Steitz",
      "diff": "@@ -0,0 +1,33 @@\n+private void guessAOmega() throws ExhaustedSampleException, FunctionException, EstimationException {\n+    double sx2 \u003d 0.0;\n+    double sy2 \u003d 0.0;\n+    double sxy \u003d 0.0;\n+    double sxz \u003d 0.0;\n+    double syz \u003d 0.0;\n+    F2FP2Iterator iter \u003d new F2FP2Iterator(measurements);\n+    SampledFunctionIterator sampler \u003d new EnhancedSimpsonIntegratorSampler(iter);\n+    VectorialValuedPair p0 \u003d sampler.nextSamplePoint();\n+    double p0X \u003d p0.getX();\n+    double[] p0Y \u003d p0.getY();\n+    while (sampler.hasNext()) {\n+        VectorialValuedPair point \u003d sampler.nextSamplePoint();\n+        double pX \u003d point.getX();\n+        double[] pY \u003d point.getY();\n+        double dx \u003d pX - p0X;\n+        double dy0 \u003d pY[0] - p0Y[0];\n+        double dy1 \u003d pY[1] - p0Y[1];\n+        sx2 +\u003d dx * dx;\n+        sy2 +\u003d dy0 * dy0;\n+        sxy +\u003d dx * dy0;\n+        sxz +\u003d dx * dy1;\n+        syz +\u003d dy0 * dy1;\n+    }\n+    double c1 \u003d sy2 * sxz - sxy * syz;\n+    double c2 \u003d sxy * sxz - sx2 * syz;\n+    double c3 \u003d sx2 * sy2 - sxy * sxy;\n+    if ((c1 / c2 \u003c 0.0) || (c2 / c3 \u003c 0.0)) {\n+        throw new EstimationException(\"unable to guess a first estimate\");\n+    }\n+    a \u003d Math.sqrt(c1 / c2);\n+    omega \u003d Math.sqrt(c2 / c3);\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void guessAOmega() throws ExhaustedSampleException, FunctionException, EstimationException {\n    double sx2 \u003d 0.0;\n    double sy2 \u003d 0.0;\n    double sxy \u003d 0.0;\n    double sxz \u003d 0.0;\n    double syz \u003d 0.0;\n    F2FP2Iterator iter \u003d new F2FP2Iterator(measurements);\n    SampledFunctionIterator sampler \u003d new EnhancedSimpsonIntegratorSampler(iter);\n    VectorialValuedPair p0 \u003d sampler.nextSamplePoint();\n    double p0X \u003d p0.getX();\n    double[] p0Y \u003d p0.getY();\n    while (sampler.hasNext()) {\n        VectorialValuedPair point \u003d sampler.nextSamplePoint();\n        double pX \u003d point.getX();\n        double[] pY \u003d point.getY();\n        double dx \u003d pX - p0X;\n        double dy0 \u003d pY[0] - p0Y[0];\n        double dy1 \u003d pY[1] - p0Y[1];\n        sx2 +\u003d dx * dx;\n        sy2 +\u003d dy0 * dy0;\n        sxy +\u003d dx * dy0;\n        sxz +\u003d dx * dy1;\n        syz +\u003d dy0 * dy1;\n    }\n    double c1 \u003d sy2 * sxz - sxy * syz;\n    double c2 \u003d sxy * sxz - sx2 * syz;\n    double c3 \u003d sx2 * sy2 - sxy * sxy;\n    if ((c1 / c2 \u003c 0.0) || (c2 / c3 \u003c 0.0)) {\n        throw new EstimationException(\"unable to guess a first estimate\");\n    }\n    a \u003d Math.sqrt(c1 / c2);\n    omega \u003d Math.sqrt(c2 / c3);\n}",
      "path": "src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java",
      "functionStartLine": 173,
      "functionName": "guessAOmega",
      "functionAnnotation": "",
      "functionDoc": "Estimate a first guess of the a and omega coefficients.\n\n@exception ExhaustedSampleException if the sample is exhausted.\n@exception FunctionException if the integrator throws one.\n@exception EstimationException if the sample is too short or if\nthe first guess cannot be computed (when the elements under the\nsquare roots are negative).\n"
    }
  }
}