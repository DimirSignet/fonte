{
  "origin": "codeshovel",
  "repositoryName": "Math-25b",
  "repositoryPath": "/tmp/Math-25b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HarmonicFitter.java",
  "functionName": "guessPhi",
  "functionId": "$guessPhi",
  "sourceFilePath": "src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java",
  "functionAnnotation": "",
  "functionDoc": "Estimate a first guess of the phase.\n",
  "functionStartLine": 328,
  "functionEndLine": 351,
  "numCommitsSeen": 25,
  "timeTaken": 12720,
  "changeHistory": [
    "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd",
    "b67bf47e45fa177c25fd5c445011d868a5383a6d",
    "80b1e90b42a34856b61cec628fcea6633d1000cd",
    "d6a438e931412713e99624cf9ed74470f1040184",
    "8fd1834813ca42fa107b783fd57672f4f5bc9091",
    "676c203843a2b968236da27702eb8789051a9784",
    "89ac173c2b467e6289df0e62f2a43ed1730fbad5"
  ],
  "changeHistoryShort": {
    "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd": "Ymovefromfile",
    "b67bf47e45fa177c25fd5c445011d868a5383a6d": "Ymultichange(Ymovefromfile,Ybodychange,Ydocchange)",
    "80b1e90b42a34856b61cec628fcea6633d1000cd": "Ybodychange",
    "d6a438e931412713e99624cf9ed74470f1040184": "Yfilerename",
    "8fd1834813ca42fa107b783fd57672f4f5bc9091": "Ymultichange(Ymovefromfile,Yexceptionschange,Ybodychange,Ydocchange)",
    "676c203843a2b968236da27702eb8789051a9784": "Ymultichange(Ybodychange,Ydocchange)",
    "89ac173c2b467e6289df0e62f2a43ed1730fbad5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd": {
      "type": "Ymovefromfile",
      "commitMessage": "MATH-444\nBase package name change: \"o.a.c.math\" -\u003e \"o.a.c.math3\"\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1244107 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/14/12, 8:17 AM",
      "commitName": "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd",
      "commitAuthor": "Gilles Sadowski",
      "commitDateOld": "2/14/12, 6:34 AM",
      "commitNameOld": "53257329dd394be1333b38bae787bf0cf19dc900",
      "commitAuthorOld": "Gilles Sadowski",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void guessPhi() {\n    double fcMean \u003d 0;\n    double fsMean \u003d 0;\n    double currentX \u003d observations[0].getX();\n    double currentY \u003d observations[0].getY();\n    for (int i \u003d 1; i \u003c observations.length; ++i) {\n        final double previousX \u003d currentX;\n        final double previousY \u003d currentY;\n        currentX \u003d observations[i].getX();\n        currentY \u003d observations[i].getY();\n        final double currentYPrime \u003d (currentY - previousY) / (currentX - previousX);\n        double omegaX \u003d omega * currentX;\n        double cosine \u003d FastMath.cos(omegaX);\n        double sine \u003d FastMath.sin(omegaX);\n        fcMean +\u003d omega * currentY * cosine - currentYPrime * sine;\n        fsMean +\u003d omega * currentY * sine + currentYPrime * cosine;\n    }\n    phi \u003d FastMath.atan2(-fsMean, fcMean);\n}",
      "path": "src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java",
      "functionStartLine": 328,
      "functionName": "guessPhi",
      "functionAnnotation": "",
      "functionDoc": "Estimate a first guess of the phase.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java",
        "newPath": "src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java",
        "oldMethodName": "guessPhi",
        "newMethodName": "guessPhi"
      }
    },
    "b67bf47e45fa177c25fd5c445011d868a5383a6d": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange,Ydocchange)",
      "commitMessage": "MATH-517\n\"HarmonicFitter\" refactored to include the functionality of\n\"HarmonicCoefficientsGuesser\" as an inner class, and now using\n\"HarmonicOscillator\" (from package \"analysis.function\") instead of\n\"HarmonicFunction\" (from package \"optimization.fitting\").\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1073378 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/22/11, 8:13 AM",
      "commitName": "b67bf47e45fa177c25fd5c445011d868a5383a6d",
      "commitAuthor": "Gilles Sadowski",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "MATH-517\n\"HarmonicFitter\" refactored to include the functionality of\n\"HarmonicCoefficientsGuesser\" as an inner class, and now using\n\"HarmonicOscillator\" (from package \"analysis.function\") instead of\n\"HarmonicFunction\" (from package \"optimization.fitting\").\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1073378 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2/22/11, 8:13 AM",
          "commitName": "b67bf47e45fa177c25fd5c445011d868a5383a6d",
          "commitAuthor": "Gilles Sadowski",
          "commitDateOld": "2/22/11, 7:34 AM",
          "commitNameOld": "b8a0427d9e70b2da0e88edebcb76371bc5cd3c84",
          "commitAuthorOld": "Gilles Sadowski",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void guessPhi() {\n    double fcMean \u003d 0;\n    double fsMean \u003d 0;\n    double currentX \u003d observations[0].getX();\n    double currentY \u003d observations[0].getY();\n    for (int i \u003d 1; i \u003c observations.length; ++i) {\n        final double previousX \u003d currentX;\n        final double previousY \u003d currentY;\n        currentX \u003d observations[i].getX();\n        currentY \u003d observations[i].getY();\n        final double currentYPrime \u003d (currentY - previousY) / (currentX - previousX);\n        double omegaX \u003d omega * currentX;\n        double cosine \u003d FastMath.cos(omegaX);\n        double sine \u003d FastMath.sin(omegaX);\n        fcMean +\u003d omega * currentY * cosine - currentYPrime * sine;\n        fsMean +\u003d omega * currentY * sine + currentYPrime * cosine;\n    }\n    phi \u003d FastMath.atan2(-fsMean, fcMean);\n}",
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java",
          "functionStartLine": 318,
          "functionName": "guessPhi",
          "functionAnnotation": "",
          "functionDoc": "Estimate a first guess of the phase.\n",
          "diff": "@@ -1,19 +1,19 @@\n private void guessPhi() {\n-    double fcMean \u003d 0.0;\n-    double fsMean \u003d 0.0;\n+    double fcMean \u003d 0;\n+    double fsMean \u003d 0;\n     double currentX \u003d observations[0].getX();\n     double currentY \u003d observations[0].getY();\n     for (int i \u003d 1; i \u003c observations.length; ++i) {\n         final double previousX \u003d currentX;\n         final double previousY \u003d currentY;\n         currentX \u003d observations[i].getX();\n         currentY \u003d observations[i].getY();\n         final double currentYPrime \u003d (currentY - previousY) / (currentX - previousX);\n         double omegaX \u003d omega * currentX;\n         double cosine \u003d FastMath.cos(omegaX);\n         double sine \u003d FastMath.sin(omegaX);\n         fcMean +\u003d omega * currentY * cosine - currentYPrime * sine;\n         fsMean +\u003d omega * currentY * sine + currentYPrime * cosine;\n     }\n     phi \u003d FastMath.atan2(-fsMean, fcMean);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java",
            "newPath": "src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java",
            "oldMethodName": "guessPhi",
            "newMethodName": "guessPhi"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MATH-517\n\"HarmonicFitter\" refactored to include the functionality of\n\"HarmonicCoefficientsGuesser\" as an inner class, and now using\n\"HarmonicOscillator\" (from package \"analysis.function\") instead of\n\"HarmonicFunction\" (from package \"optimization.fitting\").\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1073378 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2/22/11, 8:13 AM",
          "commitName": "b67bf47e45fa177c25fd5c445011d868a5383a6d",
          "commitAuthor": "Gilles Sadowski",
          "commitDateOld": "2/22/11, 7:34 AM",
          "commitNameOld": "b8a0427d9e70b2da0e88edebcb76371bc5cd3c84",
          "commitAuthorOld": "Gilles Sadowski",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void guessPhi() {\n    double fcMean \u003d 0;\n    double fsMean \u003d 0;\n    double currentX \u003d observations[0].getX();\n    double currentY \u003d observations[0].getY();\n    for (int i \u003d 1; i \u003c observations.length; ++i) {\n        final double previousX \u003d currentX;\n        final double previousY \u003d currentY;\n        currentX \u003d observations[i].getX();\n        currentY \u003d observations[i].getY();\n        final double currentYPrime \u003d (currentY - previousY) / (currentX - previousX);\n        double omegaX \u003d omega * currentX;\n        double cosine \u003d FastMath.cos(omegaX);\n        double sine \u003d FastMath.sin(omegaX);\n        fcMean +\u003d omega * currentY * cosine - currentYPrime * sine;\n        fsMean +\u003d omega * currentY * sine + currentYPrime * cosine;\n    }\n    phi \u003d FastMath.atan2(-fsMean, fcMean);\n}",
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java",
          "functionStartLine": 318,
          "functionName": "guessPhi",
          "functionAnnotation": "",
          "functionDoc": "Estimate a first guess of the phase.\n",
          "diff": "@@ -1,19 +1,19 @@\n private void guessPhi() {\n-    double fcMean \u003d 0.0;\n-    double fsMean \u003d 0.0;\n+    double fcMean \u003d 0;\n+    double fsMean \u003d 0;\n     double currentX \u003d observations[0].getX();\n     double currentY \u003d observations[0].getY();\n     for (int i \u003d 1; i \u003c observations.length; ++i) {\n         final double previousX \u003d currentX;\n         final double previousY \u003d currentY;\n         currentX \u003d observations[i].getX();\n         currentY \u003d observations[i].getY();\n         final double currentYPrime \u003d (currentY - previousY) / (currentX - previousX);\n         double omegaX \u003d omega * currentX;\n         double cosine \u003d FastMath.cos(omegaX);\n         double sine \u003d FastMath.sin(omegaX);\n         fcMean +\u003d omega * currentY * cosine - currentYPrime * sine;\n         fsMean +\u003d omega * currentY * sine + currentYPrime * cosine;\n     }\n     phi \u003d FastMath.atan2(-fsMean, fcMean);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "MATH-517\n\"HarmonicFitter\" refactored to include the functionality of\n\"HarmonicCoefficientsGuesser\" as an inner class, and now using\n\"HarmonicOscillator\" (from package \"analysis.function\") instead of\n\"HarmonicFunction\" (from package \"optimization.fitting\").\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1073378 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2/22/11, 8:13 AM",
          "commitName": "b67bf47e45fa177c25fd5c445011d868a5383a6d",
          "commitAuthor": "Gilles Sadowski",
          "commitDateOld": "2/22/11, 7:34 AM",
          "commitNameOld": "b8a0427d9e70b2da0e88edebcb76371bc5cd3c84",
          "commitAuthorOld": "Gilles Sadowski",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void guessPhi() {\n    double fcMean \u003d 0;\n    double fsMean \u003d 0;\n    double currentX \u003d observations[0].getX();\n    double currentY \u003d observations[0].getY();\n    for (int i \u003d 1; i \u003c observations.length; ++i) {\n        final double previousX \u003d currentX;\n        final double previousY \u003d currentY;\n        currentX \u003d observations[i].getX();\n        currentY \u003d observations[i].getY();\n        final double currentYPrime \u003d (currentY - previousY) / (currentX - previousX);\n        double omegaX \u003d omega * currentX;\n        double cosine \u003d FastMath.cos(omegaX);\n        double sine \u003d FastMath.sin(omegaX);\n        fcMean +\u003d omega * currentY * cosine - currentYPrime * sine;\n        fsMean +\u003d omega * currentY * sine + currentYPrime * cosine;\n    }\n    phi \u003d FastMath.atan2(-fsMean, fcMean);\n}",
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java",
          "functionStartLine": 318,
          "functionName": "guessPhi",
          "functionAnnotation": "",
          "functionDoc": "Estimate a first guess of the phase.\n",
          "diff": "@@ -1,19 +1,19 @@\n private void guessPhi() {\n-    double fcMean \u003d 0.0;\n-    double fsMean \u003d 0.0;\n+    double fcMean \u003d 0;\n+    double fsMean \u003d 0;\n     double currentX \u003d observations[0].getX();\n     double currentY \u003d observations[0].getY();\n     for (int i \u003d 1; i \u003c observations.length; ++i) {\n         final double previousX \u003d currentX;\n         final double previousY \u003d currentY;\n         currentX \u003d observations[i].getX();\n         currentY \u003d observations[i].getY();\n         final double currentYPrime \u003d (currentY - previousY) / (currentX - previousX);\n         double omegaX \u003d omega * currentX;\n         double cosine \u003d FastMath.cos(omegaX);\n         double sine \u003d FastMath.sin(omegaX);\n         fcMean +\u003d omega * currentY * cosine - currentYPrime * sine;\n         fsMean +\u003d omega * currentY * sine + currentYPrime * cosine;\n     }\n     phi \u003d FastMath.atan2(-fsMean, fcMean);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Estimate a first guess of the \u0026phi; coefficient.\n",
            "newValue": "Estimate a first guess of the phase.\n"
          }
        }
      ]
    },
    "80b1e90b42a34856b61cec628fcea6633d1000cd": {
      "type": "Ybodychange",
      "commitMessage": "added FastMath and used it everywhere in replacement of java.util.Math\nthe unit tests have not been added yet (waiting for dfp library addition)\nJIRA: MATH-375\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@990658 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/29/10, 3:04 PM",
      "commitName": "80b1e90b42a34856b61cec628fcea6633d1000cd",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "8/10/10, 3:46 AM",
      "commitNameOld": "986597f52ce9c6c1ff13fb134b91696de6ec2796",
      "commitAuthorOld": "Gilles Sadowski",
      "daysBetweenCommits": 19.47,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "private void guessPhi() {\n    double fcMean \u003d 0.0;\n    double fsMean \u003d 0.0;\n    double currentX \u003d observations[0].getX();\n    double currentY \u003d observations[0].getY();\n    for (int i \u003d 1; i \u003c observations.length; ++i) {\n        final double previousX \u003d currentX;\n        final double previousY \u003d currentY;\n        currentX \u003d observations[i].getX();\n        currentY \u003d observations[i].getY();\n        final double currentYPrime \u003d (currentY - previousY) / (currentX - previousX);\n        double omegaX \u003d omega * currentX;\n        double cosine \u003d FastMath.cos(omegaX);\n        double sine \u003d FastMath.sin(omegaX);\n        fcMean +\u003d omega * currentY * cosine - currentYPrime * sine;\n        fsMean +\u003d omega * currentY * sine + currentYPrime * cosine;\n    }\n    phi \u003d FastMath.atan2(-fsMean, fcMean);\n}",
      "path": "src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java",
      "functionStartLine": 252,
      "functionName": "guessPhi",
      "functionAnnotation": "",
      "functionDoc": "Estimate a first guess of the \u0026phi; coefficient.\n",
      "diff": "@@ -1,19 +1,19 @@\n private void guessPhi() {\n     double fcMean \u003d 0.0;\n     double fsMean \u003d 0.0;\n     double currentX \u003d observations[0].getX();\n     double currentY \u003d observations[0].getY();\n     for (int i \u003d 1; i \u003c observations.length; ++i) {\n         final double previousX \u003d currentX;\n         final double previousY \u003d currentY;\n         currentX \u003d observations[i].getX();\n         currentY \u003d observations[i].getY();\n         final double currentYPrime \u003d (currentY - previousY) / (currentX - previousX);\n         double omegaX \u003d omega * currentX;\n-        double cosine \u003d Math.cos(omegaX);\n-        double sine \u003d Math.sin(omegaX);\n+        double cosine \u003d FastMath.cos(omegaX);\n+        double sine \u003d FastMath.sin(omegaX);\n         fcMean +\u003d omega * currentY * cosine - currentYPrime * sine;\n         fsMean +\u003d omega * currentY * sine + currentYPrime * cosine;\n     }\n-    phi \u003d Math.atan2(-fsMean, fcMean);\n+    phi \u003d FastMath.atan2(-fsMean, fcMean);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d6a438e931412713e99624cf9ed74470f1040184": {
      "type": "Yfilerename",
      "commitMessage": "moved main java directory for compliance with maven standard directory layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@799870 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/1/09, 7:30 AM",
      "commitName": "d6a438e931412713e99624cf9ed74470f1040184",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "8/1/09, 7:23 AM",
      "commitNameOld": "2ad5ef61630be627f46ae1c266cf796f044bd4a8",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void guessPhi() {\n    double fcMean \u003d 0.0;\n    double fsMean \u003d 0.0;\n    double currentX \u003d observations[0].getX();\n    double currentY \u003d observations[0].getY();\n    for (int i \u003d 1; i \u003c observations.length; ++i) {\n        final double previousX \u003d currentX;\n        final double previousY \u003d currentY;\n        currentX \u003d observations[i].getX();\n        currentY \u003d observations[i].getY();\n        final double currentYPrime \u003d (currentY - previousY) / (currentX - previousX);\n        double omegaX \u003d omega * currentX;\n        double cosine \u003d Math.cos(omegaX);\n        double sine \u003d Math.sin(omegaX);\n        fcMean +\u003d omega * currentY * cosine - currentYPrime * sine;\n        fsMean +\u003d omega * currentY * sine + currentYPrime * cosine;\n    }\n    phi \u003d Math.atan2(-fsMean, fcMean);\n}",
      "path": "src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java",
      "functionStartLine": 250,
      "functionName": "guessPhi",
      "functionAnnotation": "",
      "functionDoc": "Estimate a first guess of the \u0026phi; coefficient.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java",
        "newPath": "src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java"
      }
    },
    "8fd1834813ca42fa107b783fd57672f4f5bc9091": {
      "type": "Ymultichange(Ymovefromfile,Yexceptionschange,Ybodychange,Ydocchange)",
      "commitMessage": "merged curve fitting from mantissa into commons-math\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@786479 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/19/09, 5:36 AM",
      "commitName": "8fd1834813ca42fa107b783fd57672f4f5bc9091",
      "commitAuthor": "Luc Maisonobe",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "merged curve fitting from mantissa into commons-math\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@786479 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "6/19/09, 5:36 AM",
          "commitName": "8fd1834813ca42fa107b783fd57672f4f5bc9091",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "6/19/09, 5:33 AM",
          "commitNameOld": "2f65d00640bf4ba57dd24f390c489b131480cc2f",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void guessPhi() {\n    double fcMean \u003d 0.0;\n    double fsMean \u003d 0.0;\n    double currentX \u003d observations[0].getX();\n    double currentY \u003d observations[0].getY();\n    for (int i \u003d 1; i \u003c observations.length; ++i) {\n        final double previousX \u003d currentX;\n        final double previousY \u003d currentY;\n        currentX \u003d observations[i].getX();\n        currentY \u003d observations[i].getY();\n        final double currentYPrime \u003d (currentY - previousY) / (currentX - previousX);\n        double omegaX \u003d omega * currentX;\n        double cosine \u003d Math.cos(omegaX);\n        double sine \u003d Math.sin(omegaX);\n        fcMean +\u003d omega * currentY * cosine - currentYPrime * sine;\n        fsMean +\u003d omega * currentY * sine + currentYPrime * cosine;\n    }\n    phi \u003d Math.atan2(-fsMean, fcMean);\n}",
          "path": "src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java",
          "functionStartLine": 250,
          "functionName": "guessPhi",
          "functionAnnotation": "",
          "functionDoc": "Estimate a first guess of the \u0026phi; coefficient.\n",
          "diff": "@@ -1,14 +1,19 @@\n-private void guessPhi() throws ExhaustedSampleException, FunctionException {\n-    SampledFunctionIterator iter \u003d new FFPIterator(measurements);\n+private void guessPhi() {\n     double fcMean \u003d 0.0;\n     double fsMean \u003d 0.0;\n-    while (iter.hasNext()) {\n-        VectorialValuedPair point \u003d iter.nextSamplePoint();\n-        double omegaX \u003d omega * point.x;\n+    double currentX \u003d observations[0].getX();\n+    double currentY \u003d observations[0].getY();\n+    for (int i \u003d 1; i \u003c observations.length; ++i) {\n+        final double previousX \u003d currentX;\n+        final double previousY \u003d currentY;\n+        currentX \u003d observations[i].getX();\n+        currentY \u003d observations[i].getY();\n+        final double currentYPrime \u003d (currentY - previousY) / (currentX - previousX);\n+        double omegaX \u003d omega * currentX;\n         double cosine \u003d Math.cos(omegaX);\n         double sine \u003d Math.sin(omegaX);\n-        fcMean +\u003d omega * point.y[0] * cosine - point.y[1] * sine;\n-        fsMean +\u003d omega * point.y[0] * sine + point.y[1] * cosine;\n+        fcMean +\u003d omega * currentY * cosine - currentYPrime * sine;\n+        fsMean +\u003d omega * currentY * sine + currentYPrime * cosine;\n     }\n     phi \u003d Math.atan2(-fsMean, fcMean);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java",
            "newPath": "src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java",
            "oldMethodName": "guessPhi",
            "newMethodName": "guessPhi"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "merged curve fitting from mantissa into commons-math\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@786479 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "6/19/09, 5:36 AM",
          "commitName": "8fd1834813ca42fa107b783fd57672f4f5bc9091",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "6/19/09, 5:33 AM",
          "commitNameOld": "2f65d00640bf4ba57dd24f390c489b131480cc2f",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void guessPhi() {\n    double fcMean \u003d 0.0;\n    double fsMean \u003d 0.0;\n    double currentX \u003d observations[0].getX();\n    double currentY \u003d observations[0].getY();\n    for (int i \u003d 1; i \u003c observations.length; ++i) {\n        final double previousX \u003d currentX;\n        final double previousY \u003d currentY;\n        currentX \u003d observations[i].getX();\n        currentY \u003d observations[i].getY();\n        final double currentYPrime \u003d (currentY - previousY) / (currentX - previousX);\n        double omegaX \u003d omega * currentX;\n        double cosine \u003d Math.cos(omegaX);\n        double sine \u003d Math.sin(omegaX);\n        fcMean +\u003d omega * currentY * cosine - currentYPrime * sine;\n        fsMean +\u003d omega * currentY * sine + currentYPrime * cosine;\n    }\n    phi \u003d Math.atan2(-fsMean, fcMean);\n}",
          "path": "src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java",
          "functionStartLine": 250,
          "functionName": "guessPhi",
          "functionAnnotation": "",
          "functionDoc": "Estimate a first guess of the \u0026phi; coefficient.\n",
          "diff": "@@ -1,14 +1,19 @@\n-private void guessPhi() throws ExhaustedSampleException, FunctionException {\n-    SampledFunctionIterator iter \u003d new FFPIterator(measurements);\n+private void guessPhi() {\n     double fcMean \u003d 0.0;\n     double fsMean \u003d 0.0;\n-    while (iter.hasNext()) {\n-        VectorialValuedPair point \u003d iter.nextSamplePoint();\n-        double omegaX \u003d omega * point.x;\n+    double currentX \u003d observations[0].getX();\n+    double currentY \u003d observations[0].getY();\n+    for (int i \u003d 1; i \u003c observations.length; ++i) {\n+        final double previousX \u003d currentX;\n+        final double previousY \u003d currentY;\n+        currentX \u003d observations[i].getX();\n+        currentY \u003d observations[i].getY();\n+        final double currentYPrime \u003d (currentY - previousY) / (currentX - previousX);\n+        double omegaX \u003d omega * currentX;\n         double cosine \u003d Math.cos(omegaX);\n         double sine \u003d Math.sin(omegaX);\n-        fcMean +\u003d omega * point.y[0] * cosine - point.y[1] * sine;\n-        fsMean +\u003d omega * point.y[0] * sine + point.y[1] * cosine;\n+        fcMean +\u003d omega * currentY * cosine - currentYPrime * sine;\n+        fsMean +\u003d omega * currentY * sine + currentYPrime * cosine;\n     }\n     phi \u003d Math.atan2(-fsMean, fcMean);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[ExhaustedSampleException, FunctionException]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "merged curve fitting from mantissa into commons-math\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@786479 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "6/19/09, 5:36 AM",
          "commitName": "8fd1834813ca42fa107b783fd57672f4f5bc9091",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "6/19/09, 5:33 AM",
          "commitNameOld": "2f65d00640bf4ba57dd24f390c489b131480cc2f",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void guessPhi() {\n    double fcMean \u003d 0.0;\n    double fsMean \u003d 0.0;\n    double currentX \u003d observations[0].getX();\n    double currentY \u003d observations[0].getY();\n    for (int i \u003d 1; i \u003c observations.length; ++i) {\n        final double previousX \u003d currentX;\n        final double previousY \u003d currentY;\n        currentX \u003d observations[i].getX();\n        currentY \u003d observations[i].getY();\n        final double currentYPrime \u003d (currentY - previousY) / (currentX - previousX);\n        double omegaX \u003d omega * currentX;\n        double cosine \u003d Math.cos(omegaX);\n        double sine \u003d Math.sin(omegaX);\n        fcMean +\u003d omega * currentY * cosine - currentYPrime * sine;\n        fsMean +\u003d omega * currentY * sine + currentYPrime * cosine;\n    }\n    phi \u003d Math.atan2(-fsMean, fcMean);\n}",
          "path": "src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java",
          "functionStartLine": 250,
          "functionName": "guessPhi",
          "functionAnnotation": "",
          "functionDoc": "Estimate a first guess of the \u0026phi; coefficient.\n",
          "diff": "@@ -1,14 +1,19 @@\n-private void guessPhi() throws ExhaustedSampleException, FunctionException {\n-    SampledFunctionIterator iter \u003d new FFPIterator(measurements);\n+private void guessPhi() {\n     double fcMean \u003d 0.0;\n     double fsMean \u003d 0.0;\n-    while (iter.hasNext()) {\n-        VectorialValuedPair point \u003d iter.nextSamplePoint();\n-        double omegaX \u003d omega * point.x;\n+    double currentX \u003d observations[0].getX();\n+    double currentY \u003d observations[0].getY();\n+    for (int i \u003d 1; i \u003c observations.length; ++i) {\n+        final double previousX \u003d currentX;\n+        final double previousY \u003d currentY;\n+        currentX \u003d observations[i].getX();\n+        currentY \u003d observations[i].getY();\n+        final double currentYPrime \u003d (currentY - previousY) / (currentX - previousX);\n+        double omegaX \u003d omega * currentX;\n         double cosine \u003d Math.cos(omegaX);\n         double sine \u003d Math.sin(omegaX);\n-        fcMean +\u003d omega * point.y[0] * cosine - point.y[1] * sine;\n-        fsMean +\u003d omega * point.y[0] * sine + point.y[1] * cosine;\n+        fcMean +\u003d omega * currentY * cosine - currentYPrime * sine;\n+        fsMean +\u003d omega * currentY * sine + currentYPrime * cosine;\n     }\n     phi \u003d Math.atan2(-fsMean, fcMean);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "merged curve fitting from mantissa into commons-math\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@786479 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "6/19/09, 5:36 AM",
          "commitName": "8fd1834813ca42fa107b783fd57672f4f5bc9091",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "6/19/09, 5:33 AM",
          "commitNameOld": "2f65d00640bf4ba57dd24f390c489b131480cc2f",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void guessPhi() {\n    double fcMean \u003d 0.0;\n    double fsMean \u003d 0.0;\n    double currentX \u003d observations[0].getX();\n    double currentY \u003d observations[0].getY();\n    for (int i \u003d 1; i \u003c observations.length; ++i) {\n        final double previousX \u003d currentX;\n        final double previousY \u003d currentY;\n        currentX \u003d observations[i].getX();\n        currentY \u003d observations[i].getY();\n        final double currentYPrime \u003d (currentY - previousY) / (currentX - previousX);\n        double omegaX \u003d omega * currentX;\n        double cosine \u003d Math.cos(omegaX);\n        double sine \u003d Math.sin(omegaX);\n        fcMean +\u003d omega * currentY * cosine - currentYPrime * sine;\n        fsMean +\u003d omega * currentY * sine + currentYPrime * cosine;\n    }\n    phi \u003d Math.atan2(-fsMean, fcMean);\n}",
          "path": "src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java",
          "functionStartLine": 250,
          "functionName": "guessPhi",
          "functionAnnotation": "",
          "functionDoc": "Estimate a first guess of the \u0026phi; coefficient.\n",
          "diff": "@@ -1,14 +1,19 @@\n-private void guessPhi() throws ExhaustedSampleException, FunctionException {\n-    SampledFunctionIterator iter \u003d new FFPIterator(measurements);\n+private void guessPhi() {\n     double fcMean \u003d 0.0;\n     double fsMean \u003d 0.0;\n-    while (iter.hasNext()) {\n-        VectorialValuedPair point \u003d iter.nextSamplePoint();\n-        double omegaX \u003d omega * point.x;\n+    double currentX \u003d observations[0].getX();\n+    double currentY \u003d observations[0].getY();\n+    for (int i \u003d 1; i \u003c observations.length; ++i) {\n+        final double previousX \u003d currentX;\n+        final double previousY \u003d currentY;\n+        currentX \u003d observations[i].getX();\n+        currentY \u003d observations[i].getY();\n+        final double currentYPrime \u003d (currentY - previousY) / (currentX - previousX);\n+        double omegaX \u003d omega * currentX;\n         double cosine \u003d Math.cos(omegaX);\n         double sine \u003d Math.sin(omegaX);\n-        fcMean +\u003d omega * point.y[0] * cosine - point.y[1] * sine;\n-        fsMean +\u003d omega * point.y[0] * sine + point.y[1] * cosine;\n+        fcMean +\u003d omega * currentY * cosine - currentYPrime * sine;\n+        fsMean +\u003d omega * currentY * sine + currentYPrime * cosine;\n     }\n     phi \u003d Math.atan2(-fsMean, fcMean);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Estimate a first guess of the \u0026phi; coefficient.\n\n@exception ExhaustedSampleException if the sample is exhausted.\n@exception FunctionException if the sampler throws one.\n",
            "newValue": "Estimate a first guess of the \u0026phi; coefficient.\n"
          }
        }
      ]
    },
    "676c203843a2b968236da27702eb8789051a9784": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Updated contributed sources - Mantissa 7 upgrade. JIRA: MATH-162\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@488828 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/19/06, 2:11 PM",
      "commitName": "676c203843a2b968236da27702eb8789051a9784",
      "commitAuthor": "Phil Steitz",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Updated contributed sources - Mantissa 7 upgrade. JIRA: MATH-162\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@488828 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/19/06, 2:11 PM",
          "commitName": "676c203843a2b968236da27702eb8789051a9784",
          "commitAuthor": "Phil Steitz",
          "commitDateOld": "11/19/06, 1:36 PM",
          "commitNameOld": "89ac173c2b467e6289df0e62f2a43ed1730fbad5",
          "commitAuthorOld": "Phil Steitz",
          "daysBetweenCommits": 30.02,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "actualSource": "private void guessPhi() throws ExhaustedSampleException, FunctionException {\n    SampledFunctionIterator iter \u003d new FFPIterator(measurements);\n    double fcMean \u003d 0.0;\n    double fsMean \u003d 0.0;\n    while (iter.hasNext()) {\n        VectorialValuedPair point \u003d iter.nextSamplePoint();\n        double omegaX \u003d omega * point.x;\n        double cosine \u003d Math.cos(omegaX);\n        double sine \u003d Math.sin(omegaX);\n        fcMean +\u003d omega * point.y[0] * cosine - point.y[1] * sine;\n        fsMean +\u003d omega * point.y[0] * sine + point.y[1] * cosine;\n    }\n    phi \u003d Math.atan2(-fsMean, fcMean);\n}",
          "path": "src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java",
          "functionStartLine": 228,
          "functionName": "guessPhi",
          "functionAnnotation": "",
          "functionDoc": "Estimate a first guess of the \u0026phi; coefficient.\n\n@exception ExhaustedSampleException if the sample is exhausted.\n@exception FunctionException if the sampler throws one.\n",
          "diff": "@@ -1,15 +1,14 @@\n private void guessPhi() throws ExhaustedSampleException, FunctionException {\n     SampledFunctionIterator iter \u003d new FFPIterator(measurements);\n     double fcMean \u003d 0.0;\n     double fsMean \u003d 0.0;\n     while (iter.hasNext()) {\n         VectorialValuedPair point \u003d iter.nextSamplePoint();\n-        double omegaX \u003d omega * point.getX();\n-        double[] pY \u003d point.getY();\n+        double omegaX \u003d omega * point.x;\n         double cosine \u003d Math.cos(omegaX);\n         double sine \u003d Math.sin(omegaX);\n-        fcMean +\u003d omega * pY[0] * cosine - pY[1] * sine;\n-        fsMean +\u003d omega * pY[0] * sine + pY[1] * cosine;\n+        fcMean +\u003d omega * point.y[0] * cosine - point.y[1] * sine;\n+        fsMean +\u003d omega * point.y[0] * sine + point.y[1] * cosine;\n     }\n     phi \u003d Math.atan2(-fsMean, fcMean);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Updated contributed sources - Mantissa 7 upgrade. JIRA: MATH-162\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@488828 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/19/06, 2:11 PM",
          "commitName": "676c203843a2b968236da27702eb8789051a9784",
          "commitAuthor": "Phil Steitz",
          "commitDateOld": "11/19/06, 1:36 PM",
          "commitNameOld": "89ac173c2b467e6289df0e62f2a43ed1730fbad5",
          "commitAuthorOld": "Phil Steitz",
          "daysBetweenCommits": 30.02,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "actualSource": "private void guessPhi() throws ExhaustedSampleException, FunctionException {\n    SampledFunctionIterator iter \u003d new FFPIterator(measurements);\n    double fcMean \u003d 0.0;\n    double fsMean \u003d 0.0;\n    while (iter.hasNext()) {\n        VectorialValuedPair point \u003d iter.nextSamplePoint();\n        double omegaX \u003d omega * point.x;\n        double cosine \u003d Math.cos(omegaX);\n        double sine \u003d Math.sin(omegaX);\n        fcMean +\u003d omega * point.y[0] * cosine - point.y[1] * sine;\n        fsMean +\u003d omega * point.y[0] * sine + point.y[1] * cosine;\n    }\n    phi \u003d Math.atan2(-fsMean, fcMean);\n}",
          "path": "src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java",
          "functionStartLine": 228,
          "functionName": "guessPhi",
          "functionAnnotation": "",
          "functionDoc": "Estimate a first guess of the \u0026phi; coefficient.\n\n@exception ExhaustedSampleException if the sample is exhausted.\n@exception FunctionException if the sampler throws one.\n",
          "diff": "@@ -1,15 +1,14 @@\n private void guessPhi() throws ExhaustedSampleException, FunctionException {\n     SampledFunctionIterator iter \u003d new FFPIterator(measurements);\n     double fcMean \u003d 0.0;\n     double fsMean \u003d 0.0;\n     while (iter.hasNext()) {\n         VectorialValuedPair point \u003d iter.nextSamplePoint();\n-        double omegaX \u003d omega * point.getX();\n-        double[] pY \u003d point.getY();\n+        double omegaX \u003d omega * point.x;\n         double cosine \u003d Math.cos(omegaX);\n         double sine \u003d Math.sin(omegaX);\n-        fcMean +\u003d omega * pY[0] * cosine - pY[1] * sine;\n-        fsMean +\u003d omega * pY[0] * sine + pY[1] * cosine;\n+        fcMean +\u003d omega * point.y[0] * cosine - point.y[1] * sine;\n+        fsMean +\u003d omega * point.y[0] * sine + point.y[1] * cosine;\n     }\n     phi \u003d Math.atan2(-fsMean, fcMean);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Estimate a first guess of the phi coefficient.\n\n@exception ExhaustedSampleException if the sample is exhausted.\n@exception FunctionException if the sampler throws one.\n",
            "newValue": "Estimate a first guess of the \u0026phi; coefficient.\n\n@exception ExhaustedSampleException if the sample is exhausted.\n@exception FunctionException if the sampler throws one.\n"
          }
        }
      ]
    },
    "89ac173c2b467e6289df0e62f2a43ed1730fbad5": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@476930 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/19/06, 1:36 PM",
      "commitName": "89ac173c2b467e6289df0e62f2a43ed1730fbad5",
      "commitAuthor": "Phil Steitz",
      "diff": "@@ -0,0 +1,15 @@\n+private void guessPhi() throws ExhaustedSampleException, FunctionException {\n+    SampledFunctionIterator iter \u003d new FFPIterator(measurements);\n+    double fcMean \u003d 0.0;\n+    double fsMean \u003d 0.0;\n+    while (iter.hasNext()) {\n+        VectorialValuedPair point \u003d iter.nextSamplePoint();\n+        double omegaX \u003d omega * point.getX();\n+        double[] pY \u003d point.getY();\n+        double cosine \u003d Math.cos(omegaX);\n+        double sine \u003d Math.sin(omegaX);\n+        fcMean +\u003d omega * pY[0] * cosine - pY[1] * sine;\n+        fsMean +\u003d omega * pY[0] * sine + pY[1] * cosine;\n+    }\n+    phi \u003d Math.atan2(-fsMean, fcMean);\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void guessPhi() throws ExhaustedSampleException, FunctionException {\n    SampledFunctionIterator iter \u003d new FFPIterator(measurements);\n    double fcMean \u003d 0.0;\n    double fsMean \u003d 0.0;\n    while (iter.hasNext()) {\n        VectorialValuedPair point \u003d iter.nextSamplePoint();\n        double omegaX \u003d omega * point.getX();\n        double[] pY \u003d point.getY();\n        double cosine \u003d Math.cos(omegaX);\n        double sine \u003d Math.sin(omegaX);\n        fcMean +\u003d omega * pY[0] * cosine - pY[1] * sine;\n        fsMean +\u003d omega * pY[0] * sine + pY[1] * cosine;\n    }\n    phi \u003d Math.atan2(-fsMean, fcMean);\n}",
      "path": "src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java",
      "functionStartLine": 229,
      "functionName": "guessPhi",
      "functionAnnotation": "",
      "functionDoc": "Estimate a first guess of the phi coefficient.\n\n@exception ExhaustedSampleException if the sample is exhausted.\n@exception FunctionException if the sampler throws one.\n"
    }
  }
}