{
  "origin": "codeshovel",
  "repositoryName": "Math-48b",
  "repositoryPath": "/tmp/Math-48b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BaseAbstractUnivariateRealSolver.java",
  "functionName": "setup",
  "functionId": "setup___maxEval-int__f-FUNC__min-double__max-double__startValue-double",
  "sourceFilePath": "src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java",
  "functionAnnotation": "",
  "functionDoc": "Prepare for computation.\nSubclasses must call this method if they override any of the\n{@code solve} methods.\n\n@param f Function to solve.\n@param min Lower bound for the interval.\n@param max Upper bound for the interval.\n@param startValue Start value to use.\n@param maxEval Maximum number of evaluations.\n",
  "functionStartLine": 168,
  "functionEndLine": 182,
  "numCommitsSeen": 8,
  "timeTaken": 1882,
  "changeHistory": [
    "fc55e2950090b84be6125cb4b6296364d97d5500",
    "6cca072b5c9c5e2e2e0c6f208ce874e03993ed1f",
    "74ff198bd249a56d1349b963bd265f8899743b9b"
  ],
  "changeHistoryShort": {
    "fc55e2950090b84be6125cb4b6296364d97d5500": "Ybodychange",
    "6cca072b5c9c5e2e2e0c6f208ce874e03993ed1f": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "74ff198bd249a56d1349b963bd265f8899743b9b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "fc55e2950090b84be6125cb4b6296364d97d5500": {
      "type": "Ybodychange",
      "commitMessage": "use checkNotNull\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1144821 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/10/11, 4:01 AM",
      "commitName": "fc55e2950090b84be6125cb4b6296364d97d5500",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "6/3/11, 1:49 PM",
      "commitNameOld": "98e22d778b3a886be253638b9a6b7ec075c3d62d",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 36.59,
      "commitsBetweenForRepo": 64,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void setup(int maxEval, FUNC f, double min, double max, double startValue) {\n    MathUtils.checkNotNull(f);\n    searchMin \u003d min;\n    searchMax \u003d max;\n    searchStart \u003d startValue;\n    function \u003d f;\n    evaluations.setMaximalCount(maxEval);\n    evaluations.resetCount();\n}",
      "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java",
      "functionStartLine": 166,
      "functionName": "setup",
      "functionAnnotation": "",
      "functionDoc": "Prepare for computation.\nSubclasses must call this method if they override any of the\n{@code solve} methods.\n\n@param f Function to solve.\n@param min Lower bound for the interval.\n@param max Upper bound for the interval.\n@param startValue Start value to use.\n@param maxEval Maximum number of evaluations.\n",
      "diff": "@@ -1,11 +1,9 @@\n protected void setup(int maxEval, FUNC f, double min, double max, double startValue) {\n-    if (f \u003d\u003d null) {\n-        throw new NullArgumentException();\n-    }\n+    MathUtils.checkNotNull(f);\n     searchMin \u003d min;\n     searchMax \u003d max;\n     searchStart \u003d startValue;\n     function \u003d f;\n     evaluations.setMaximalCount(maxEval);\n     evaluations.resetCount();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6cca072b5c9c5e2e2e0c6f208ce874e03993ed1f": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "MATH-451\nIn solvers, the maximum number of evaluations is passed as a parameter to the\nmethod \"solve\". The \"setMaxEvaluations\" accessor is removed.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1042151 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/4/10, 3:31 AM",
      "commitName": "6cca072b5c9c5e2e2e0c6f208ce874e03993ed1f",
      "commitAuthor": "Gilles Sadowski",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MATH-451\nIn solvers, the maximum number of evaluations is passed as a parameter to the\nmethod \"solve\". The \"setMaxEvaluations\" accessor is removed.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1042151 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/4/10, 3:31 AM",
          "commitName": "6cca072b5c9c5e2e2e0c6f208ce874e03993ed1f",
          "commitAuthor": "Gilles Sadowski",
          "commitDateOld": "11/25/10, 8:22 AM",
          "commitNameOld": "74ff198bd249a56d1349b963bd265f8899743b9b",
          "commitAuthorOld": "Gilles Sadowski",
          "daysBetweenCommits": 8.8,
          "commitsBetweenForRepo": 17,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void setup(int maxEval, FUNC f, double min, double max, double startValue) {\n    if (f \u003d\u003d null) {\n        throw new NullArgumentException();\n    }\n    searchMin \u003d min;\n    searchMax \u003d max;\n    searchStart \u003d startValue;\n    function \u003d f;\n    evaluations.setMaximalCount(maxEval);\n    evaluations.resetCount();\n}",
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java",
          "functionStartLine": 170,
          "functionName": "setup",
          "functionAnnotation": "",
          "functionDoc": "Prepare for computation.\nSubclasses must call this method if they override any of the\n{@code solve} methods.\n\n@param f Function to solve.\n@param min Lower bound for the interval.\n@param max Upper bound for the interval.\n@param startValue Start value to use.\n@param maxEval Maximum number of evaluations.\n",
          "diff": "@@ -1,10 +1,11 @@\n-protected void setup(FUNC f, double min, double max, double startValue) {\n+protected void setup(int maxEval, FUNC f, double min, double max, double startValue) {\n     if (f \u003d\u003d null) {\n         throw new NullArgumentException();\n     }\n     searchMin \u003d min;\n     searchMax \u003d max;\n     searchStart \u003d startValue;\n     function \u003d f;\n+    evaluations.setMaximalCount(maxEval);\n     evaluations.resetCount();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[f-FUNC, min-double, max-double, startValue-double]",
            "newValue": "[maxEval-int, f-FUNC, min-double, max-double, startValue-double]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MATH-451\nIn solvers, the maximum number of evaluations is passed as a parameter to the\nmethod \"solve\". The \"setMaxEvaluations\" accessor is removed.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1042151 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/4/10, 3:31 AM",
          "commitName": "6cca072b5c9c5e2e2e0c6f208ce874e03993ed1f",
          "commitAuthor": "Gilles Sadowski",
          "commitDateOld": "11/25/10, 8:22 AM",
          "commitNameOld": "74ff198bd249a56d1349b963bd265f8899743b9b",
          "commitAuthorOld": "Gilles Sadowski",
          "daysBetweenCommits": 8.8,
          "commitsBetweenForRepo": 17,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void setup(int maxEval, FUNC f, double min, double max, double startValue) {\n    if (f \u003d\u003d null) {\n        throw new NullArgumentException();\n    }\n    searchMin \u003d min;\n    searchMax \u003d max;\n    searchStart \u003d startValue;\n    function \u003d f;\n    evaluations.setMaximalCount(maxEval);\n    evaluations.resetCount();\n}",
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java",
          "functionStartLine": 170,
          "functionName": "setup",
          "functionAnnotation": "",
          "functionDoc": "Prepare for computation.\nSubclasses must call this method if they override any of the\n{@code solve} methods.\n\n@param f Function to solve.\n@param min Lower bound for the interval.\n@param max Upper bound for the interval.\n@param startValue Start value to use.\n@param maxEval Maximum number of evaluations.\n",
          "diff": "@@ -1,10 +1,11 @@\n-protected void setup(FUNC f, double min, double max, double startValue) {\n+protected void setup(int maxEval, FUNC f, double min, double max, double startValue) {\n     if (f \u003d\u003d null) {\n         throw new NullArgumentException();\n     }\n     searchMin \u003d min;\n     searchMax \u003d max;\n     searchStart \u003d startValue;\n     function \u003d f;\n+    evaluations.setMaximalCount(maxEval);\n     evaluations.resetCount();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "MATH-451\nIn solvers, the maximum number of evaluations is passed as a parameter to the\nmethod \"solve\". The \"setMaxEvaluations\" accessor is removed.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1042151 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/4/10, 3:31 AM",
          "commitName": "6cca072b5c9c5e2e2e0c6f208ce874e03993ed1f",
          "commitAuthor": "Gilles Sadowski",
          "commitDateOld": "11/25/10, 8:22 AM",
          "commitNameOld": "74ff198bd249a56d1349b963bd265f8899743b9b",
          "commitAuthorOld": "Gilles Sadowski",
          "daysBetweenCommits": 8.8,
          "commitsBetweenForRepo": 17,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void setup(int maxEval, FUNC f, double min, double max, double startValue) {\n    if (f \u003d\u003d null) {\n        throw new NullArgumentException();\n    }\n    searchMin \u003d min;\n    searchMax \u003d max;\n    searchStart \u003d startValue;\n    function \u003d f;\n    evaluations.setMaximalCount(maxEval);\n    evaluations.resetCount();\n}",
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java",
          "functionStartLine": 170,
          "functionName": "setup",
          "functionAnnotation": "",
          "functionDoc": "Prepare for computation.\nSubclasses must call this method if they override any of the\n{@code solve} methods.\n\n@param f Function to solve.\n@param min Lower bound for the interval.\n@param max Upper bound for the interval.\n@param startValue Start value to use.\n@param maxEval Maximum number of evaluations.\n",
          "diff": "@@ -1,10 +1,11 @@\n-protected void setup(FUNC f, double min, double max, double startValue) {\n+protected void setup(int maxEval, FUNC f, double min, double max, double startValue) {\n     if (f \u003d\u003d null) {\n         throw new NullArgumentException();\n     }\n     searchMin \u003d min;\n     searchMax \u003d max;\n     searchStart \u003d startValue;\n     function \u003d f;\n+    evaluations.setMaximalCount(maxEval);\n     evaluations.resetCount();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Prepare for computation.\nSubclasses must call this method if they override any of the\n{@code solve} methods.\n\n@param f Function to solve.\n@param min Lower bound for the interval.\n@param max Upper bound for the interval.\n@param startValue Start value to use.\n",
            "newValue": "Prepare for computation.\nSubclasses must call this method if they override any of the\n{@code solve} methods.\n\n@param f Function to solve.\n@param min Lower bound for the interval.\n@param max Upper bound for the interval.\n@param startValue Start value to use.\n@param maxEval Maximum number of evaluations.\n"
          }
        }
      ]
    },
    "74ff198bd249a56d1349b963bd265f8899743b9b": {
      "type": "Yintroduced",
      "commitMessage": "MATH-439\nRefactored the \"solvers\" package. Implementations refer to number of\nevaluation of the objective function (instead of the number of iterations).\nNew interfaces and base classes.\n\"NewtonSolver\" fits in the design without resorting to a cast.\nCreated class \"MullerSolver2\" to contain the code of the method named \"solve2\"\nin class \"MullerSolver\".\nRemoved \"UnivariateRealSolverFactory\" and \"UnivariateRealSolverFactoryImpl\".\nDefault solver in \"UnivariateRealSolverUtils\" is explicitely instantiated.\n\"AbstractContinuousDistribution\": Type of exception thrown changed in\n\"UnivariateRealSolverUtils\".\nFactored out duplicate code (in \"GaussNewtonOptimizerTest\" and\n\"LevenbergMarquardtOptimizerTest\"): class \"Circle\" is now called\n\"CircleVectorial\". Also factored out the \"Circle\" class from\n\"NonLinearConjugateGradientOptimizerTest\": class is named \"CircleScalar\".\nCreated \"SecantSolverTest\", moving there all the tests for the class\n\"SecantSolver\" that were located in class \"BrentSolverTest\".\nCreated new interface and base class for polynomial functions solvers\n(\"LaguerreSolver\") so that the function type is now checked at compile time.\nRemoved deprecated exceptions (MATH-441).\nJavadoc clean-up.\nLowered tolerance values in some unit tests.\nTests upgraded to Junit 4 (MATH-423).\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1039083 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/25/10, 8:22 AM",
      "commitName": "74ff198bd249a56d1349b963bd265f8899743b9b",
      "commitAuthor": "Gilles Sadowski",
      "diff": "@@ -0,0 +1,10 @@\n+protected void setup(FUNC f, double min, double max, double startValue) {\n+    if (f \u003d\u003d null) {\n+        throw new NullArgumentException();\n+    }\n+    searchMin \u003d min;\n+    searchMax \u003d max;\n+    searchStart \u003d startValue;\n+    function \u003d f;\n+    evaluations.resetCount();\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected void setup(FUNC f, double min, double max, double startValue) {\n    if (f \u003d\u003d null) {\n        throw new NullArgumentException();\n    }\n    searchMin \u003d min;\n    searchMax \u003d max;\n    searchStart \u003d startValue;\n    function \u003d f;\n    evaluations.resetCount();\n}",
      "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java",
      "functionStartLine": 171,
      "functionName": "setup",
      "functionAnnotation": "",
      "functionDoc": "Prepare for computation.\nSubclasses must call this method if they override any of the\n{@code solve} methods.\n\n@param f Function to solve.\n@param min Lower bound for the interval.\n@param max Upper bound for the interval.\n@param startValue Start value to use.\n"
    }
  }
}