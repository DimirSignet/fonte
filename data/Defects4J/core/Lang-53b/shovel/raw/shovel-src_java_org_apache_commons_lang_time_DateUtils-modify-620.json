{
  "origin": "codeshovel",
  "repositoryName": "Lang-53b",
  "repositoryPath": "/tmp/Lang-53b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DateUtils.java",
  "functionName": "modify",
  "functionId": "modify___val-Calendar__field-int__round-boolean",
  "sourceFilePath": "src/java/org/apache/commons/lang/time/DateUtils.java",
  "functionAnnotation": "",
  "functionDoc": "\u003cp\u003eInternal calculation method.\u003c/p\u003e\n\n@param val the calendar\n@param field the field constant\n@param round true to round, false to truncate\n@throws ArithmeticException if the year is over 280 million\n",
  "functionStartLine": 620,
  "functionEndLine": 744,
  "numCommitsSeen": 52,
  "timeTaken": 2493,
  "changeHistory": [
    "bb1671667d9085fb76bd06af7f7ad91d2c1c8389",
    "76c30b16251829c2cb4e90ade925a1991df61c98",
    "a5cdfc4da2e797b79a38a69e112f905900c86b95",
    "bc25cdf764a778a34a8361d18772a90bf697751b",
    "a26102b3007b34100fbd3ee5e457374f4a7b9140",
    "823fa853932927e32f3c274bee23396966c08fe7",
    "c66659d62dbf69d4c1ccc5c9c50938273436c1b3",
    "63ab3ece1b17a371aa265574dd79ee7104b46921",
    "9839566cf0eb6d299a61d6354522d6f65ab83af3",
    "6400026ca238c10b5864f278777745851ba0e4c0",
    "4dcba82f4fce40bf0ad7a74ade88e59e99252a49"
  ],
  "changeHistoryShort": {
    "bb1671667d9085fb76bd06af7f7ad91d2c1c8389": "Ybodychange",
    "76c30b16251829c2cb4e90ade925a1991df61c98": "Ybodychange",
    "a5cdfc4da2e797b79a38a69e112f905900c86b95": "Ybodychange",
    "bc25cdf764a778a34a8361d18772a90bf697751b": "Ymultichange(Ybodychange,Ydocchange)",
    "a26102b3007b34100fbd3ee5e457374f4a7b9140": "Ybodychange",
    "823fa853932927e32f3c274bee23396966c08fe7": "Ybodychange",
    "c66659d62dbf69d4c1ccc5c9c50938273436c1b3": "Ydocchange",
    "63ab3ece1b17a371aa265574dd79ee7104b46921": "Ymultichange(Ybodychange,Ydocchange)",
    "9839566cf0eb6d299a61d6354522d6f65ab83af3": "Ymultichange(Ymovefromfile,Ybodychange)",
    "6400026ca238c10b5864f278777745851ba0e4c0": "Yfilerename",
    "4dcba82f4fce40bf0ad7a74ade88e59e99252a49": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bb1671667d9085fb76bd06af7f7ad91d2c1c8389": {
      "type": "Ybodychange",
      "commitMessage": "Adding Niall\u0027s fix for LANG-59 - an edge case in date truncation - and his enhancement \nfor the unit test that was there. \n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@424192 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/20/06, 10:47 PM",
      "commitName": "bb1671667d9085fb76bd06af7f7ad91d2c1c8389",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "7/5/06, 4:49 PM",
      "commitNameOld": "76c30b16251829c2cb4e90ade925a1991df61c98",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 15.25,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "private static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) \u003e 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    if (field \u003d\u003d Calendar.MILLISECOND) {\n        return;\n    }\n    Date date \u003d val.getTime();\n    long time \u003d date.getTime();\n    boolean done \u003d false;\n    int millisecs \u003d val.get(Calendar.MILLISECOND);\n    if (!round || millisecs \u003c 500) {\n        time \u003d time - millisecs;\n        if (field \u003d\u003d Calendar.SECOND) {\n            done \u003d true;\n        }\n    }\n    int seconds \u003d val.get(Calendar.SECOND);\n    if (!done \u0026\u0026 (!round || seconds \u003c 30)) {\n        time \u003d time - (seconds * 1000L);\n        if (field \u003d\u003d Calendar.MINUTE) {\n            done \u003d true;\n        }\n    }\n    int minutes \u003d val.get(Calendar.MINUTE);\n    if (!done \u0026\u0026 (!round || minutes \u003c 30)) {\n        time \u003d time - (minutes * 60000L);\n    }\n    if (date.getTime() !\u003d time) {\n        date.setTime(time);\n        val.setTime(date);\n    }\n    boolean roundUp \u003d false;\n    for (int i \u003d 0; i \u003c fields.length; i++) {\n        for (int j \u003d 0; j \u003c fields[i].length; j++) {\n            if (fields[i][j] \u003d\u003d field) {\n                if (round \u0026\u0026 roundUp) {\n                    if (field \u003d\u003d DateUtils.SEMI_MONTH) {\n                        if (val.get(Calendar.DATE) \u003d\u003d 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset \u003d 0;\n        boolean offsetSet \u003d false;\n        switch(field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] \u003d\u003d Calendar.DATE) {\n                    offset \u003d val.get(Calendar.DATE) - 1;\n                    if (offset \u003e\u003d 15) {\n                        offset -\u003d 15;\n                    }\n                    roundUp \u003d offset \u003e 7;\n                    offsetSet \u003d true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] \u003d\u003d Calendar.HOUR_OF_DAY) {\n                    offset \u003d val.get(Calendar.HOUR_OF_DAY);\n                    if (offset \u003e\u003d 12) {\n                        offset -\u003d 12;\n                    }\n                    roundUp \u003d offset \u003e 6;\n                    offsetSet \u003d true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min \u003d val.getActualMinimum(fields[i][0]);\n            int max \u003d val.getActualMaximum(fields[i][0]);\n            offset \u003d val.get(fields[i][0]) - min;\n            roundUp \u003d offset \u003e ((max - min) / 2);\n        }\n        if (offset !\u003d 0) {\n            val.set(fields[i][0], val.get(fields[i][0]) - offset);\n        }\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}",
      "path": "src/java/org/apache/commons/lang/time/DateUtils.java",
      "functionStartLine": 619,
      "functionName": "modify",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eInternal calculation method.\u003c/p\u003e\n\n@param val the calendar\n@param field the field constant\n@param round true to round, false to truncate\n@throws ArithmeticException if the year is over 280 million\n",
      "diff": "@@ -1,57 +1,87 @@\n private static void modify(Calendar val, int field, boolean round) {\n     if (val.get(Calendar.YEAR) \u003e 280000000) {\n         throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n     }\n+    if (field \u003d\u003d Calendar.MILLISECOND) {\n+        return;\n+    }\n+    Date date \u003d val.getTime();\n+    long time \u003d date.getTime();\n+    boolean done \u003d false;\n+    int millisecs \u003d val.get(Calendar.MILLISECOND);\n+    if (!round || millisecs \u003c 500) {\n+        time \u003d time - millisecs;\n+        if (field \u003d\u003d Calendar.SECOND) {\n+            done \u003d true;\n+        }\n+    }\n+    int seconds \u003d val.get(Calendar.SECOND);\n+    if (!done \u0026\u0026 (!round || seconds \u003c 30)) {\n+        time \u003d time - (seconds * 1000L);\n+        if (field \u003d\u003d Calendar.MINUTE) {\n+            done \u003d true;\n+        }\n+    }\n+    int minutes \u003d val.get(Calendar.MINUTE);\n+    if (!done \u0026\u0026 (!round || minutes \u003c 30)) {\n+        time \u003d time - (minutes * 60000L);\n+    }\n+    if (date.getTime() !\u003d time) {\n+        date.setTime(time);\n+        val.setTime(date);\n+    }\n     boolean roundUp \u003d false;\n     for (int i \u003d 0; i \u003c fields.length; i++) {\n         for (int j \u003d 0; j \u003c fields[i].length; j++) {\n             if (fields[i][j] \u003d\u003d field) {\n                 if (round \u0026\u0026 roundUp) {\n                     if (field \u003d\u003d DateUtils.SEMI_MONTH) {\n                         if (val.get(Calendar.DATE) \u003d\u003d 1) {\n                             val.add(Calendar.DATE, 15);\n                         } else {\n                             val.add(Calendar.DATE, -15);\n                             val.add(Calendar.MONTH, 1);\n                         }\n                     } else {\n                         val.add(fields[i][0], 1);\n                     }\n                 }\n                 return;\n             }\n         }\n         int offset \u003d 0;\n         boolean offsetSet \u003d false;\n         switch(field) {\n             case DateUtils.SEMI_MONTH:\n                 if (fields[i][0] \u003d\u003d Calendar.DATE) {\n                     offset \u003d val.get(Calendar.DATE) - 1;\n                     if (offset \u003e\u003d 15) {\n                         offset -\u003d 15;\n                     }\n                     roundUp \u003d offset \u003e 7;\n                     offsetSet \u003d true;\n                 }\n                 break;\n             case Calendar.AM_PM:\n                 if (fields[i][0] \u003d\u003d Calendar.HOUR_OF_DAY) {\n                     offset \u003d val.get(Calendar.HOUR_OF_DAY);\n                     if (offset \u003e\u003d 12) {\n                         offset -\u003d 12;\n                     }\n                     roundUp \u003d offset \u003e 6;\n                     offsetSet \u003d true;\n                 }\n                 break;\n         }\n         if (!offsetSet) {\n             int min \u003d val.getActualMinimum(fields[i][0]);\n             int max \u003d val.getActualMaximum(fields[i][0]);\n             offset \u003d val.get(fields[i][0]) - min;\n             roundUp \u003d offset \u003e ((max - min) / 2);\n         }\n-        val.set(fields[i][0], val.get(fields[i][0]) - offset);\n+        if (offset !\u003d 0) {\n+            val.set(fields[i][0], val.get(fields[i][0]) - offset);\n+        }\n     }\n     throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "76c30b16251829c2cb4e90ade925a1991df61c98": {
      "type": "Ybodychange",
      "commitMessage": "Remove debugging code\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@419387 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/5/06, 4:49 PM",
      "commitName": "76c30b16251829c2cb4e90ade925a1991df61c98",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "7/4/06, 11:14 PM",
      "commitNameOld": "a5cdfc4da2e797b79a38a69e112f905900c86b95",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 0.73,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "private static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) \u003e 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    boolean roundUp \u003d false;\n    for (int i \u003d 0; i \u003c fields.length; i++) {\n        for (int j \u003d 0; j \u003c fields[i].length; j++) {\n            if (fields[i][j] \u003d\u003d field) {\n                if (round \u0026\u0026 roundUp) {\n                    if (field \u003d\u003d DateUtils.SEMI_MONTH) {\n                        if (val.get(Calendar.DATE) \u003d\u003d 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset \u003d 0;\n        boolean offsetSet \u003d false;\n        switch(field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] \u003d\u003d Calendar.DATE) {\n                    offset \u003d val.get(Calendar.DATE) - 1;\n                    if (offset \u003e\u003d 15) {\n                        offset -\u003d 15;\n                    }\n                    roundUp \u003d offset \u003e 7;\n                    offsetSet \u003d true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] \u003d\u003d Calendar.HOUR_OF_DAY) {\n                    offset \u003d val.get(Calendar.HOUR_OF_DAY);\n                    if (offset \u003e\u003d 12) {\n                        offset -\u003d 12;\n                    }\n                    roundUp \u003d offset \u003e 6;\n                    offsetSet \u003d true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min \u003d val.getActualMinimum(fields[i][0]);\n            int max \u003d val.getActualMaximum(fields[i][0]);\n            offset \u003d val.get(fields[i][0]) - min;\n            roundUp \u003d offset \u003e ((max - min) / 2);\n        }\n        val.set(fields[i][0], val.get(fields[i][0]) - offset);\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}",
      "path": "src/java/org/apache/commons/lang/time/DateUtils.java",
      "functionStartLine": 619,
      "functionName": "modify",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eInternal calculation method.\u003c/p\u003e\n\n@param val the calendar\n@param field the field constant\n@param round true to round, false to truncate\n@throws ArithmeticException if the year is over 280 million\n",
      "diff": "@@ -1,58 +1,57 @@\n private static void modify(Calendar val, int field, boolean round) {\n     if (val.get(Calendar.YEAR) \u003e 280000000) {\n         throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n     }\n     boolean roundUp \u003d false;\n     for (int i \u003d 0; i \u003c fields.length; i++) {\n         for (int j \u003d 0; j \u003c fields[i].length; j++) {\n             if (fields[i][j] \u003d\u003d field) {\n                 if (round \u0026\u0026 roundUp) {\n                     if (field \u003d\u003d DateUtils.SEMI_MONTH) {\n                         if (val.get(Calendar.DATE) \u003d\u003d 1) {\n                             val.add(Calendar.DATE, 15);\n                         } else {\n                             val.add(Calendar.DATE, -15);\n                             val.add(Calendar.MONTH, 1);\n                         }\n                     } else {\n                         val.add(fields[i][0], 1);\n                     }\n                 }\n                 return;\n             }\n         }\n         int offset \u003d 0;\n         boolean offsetSet \u003d false;\n         switch(field) {\n             case DateUtils.SEMI_MONTH:\n                 if (fields[i][0] \u003d\u003d Calendar.DATE) {\n                     offset \u003d val.get(Calendar.DATE) - 1;\n                     if (offset \u003e\u003d 15) {\n                         offset -\u003d 15;\n                     }\n                     roundUp \u003d offset \u003e 7;\n                     offsetSet \u003d true;\n                 }\n                 break;\n             case Calendar.AM_PM:\n                 if (fields[i][0] \u003d\u003d Calendar.HOUR_OF_DAY) {\n                     offset \u003d val.get(Calendar.HOUR_OF_DAY);\n                     if (offset \u003e\u003d 12) {\n                         offset -\u003d 12;\n                     }\n                     roundUp \u003d offset \u003e 6;\n                     offsetSet \u003d true;\n                 }\n                 break;\n         }\n         if (!offsetSet) {\n             int min \u003d val.getActualMinimum(fields[i][0]);\n             int max \u003d val.getActualMaximum(fields[i][0]);\n             offset \u003d val.get(fields[i][0]) - min;\n             roundUp \u003d offset \u003e ((max - min) / 2);\n         }\n-        System.err.println(\"DST: \" + val.get(Calendar.DST_OFFSET));\n         val.set(fields[i][0], val.get(fields[i][0]) - offset);\n     }\n     throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a5cdfc4da2e797b79a38a69e112f905900c86b95": {
      "type": "Ybodychange",
      "commitMessage": "Minor style fixes suggested by checkstyle\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@419174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/4/06, 11:14 PM",
      "commitName": "a5cdfc4da2e797b79a38a69e112f905900c86b95",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "4/16/06, 1:55 PM",
      "commitNameOld": "a4e75ee190102562f124ac2743243f5a94eb65d2",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 79.39,
      "commitsBetweenForRepo": 50,
      "commitsBetweenForFile": 1,
      "actualSource": "private static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) \u003e 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    boolean roundUp \u003d false;\n    for (int i \u003d 0; i \u003c fields.length; i++) {\n        for (int j \u003d 0; j \u003c fields[i].length; j++) {\n            if (fields[i][j] \u003d\u003d field) {\n                if (round \u0026\u0026 roundUp) {\n                    if (field \u003d\u003d DateUtils.SEMI_MONTH) {\n                        if (val.get(Calendar.DATE) \u003d\u003d 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset \u003d 0;\n        boolean offsetSet \u003d false;\n        switch(field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] \u003d\u003d Calendar.DATE) {\n                    offset \u003d val.get(Calendar.DATE) - 1;\n                    if (offset \u003e\u003d 15) {\n                        offset -\u003d 15;\n                    }\n                    roundUp \u003d offset \u003e 7;\n                    offsetSet \u003d true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] \u003d\u003d Calendar.HOUR_OF_DAY) {\n                    offset \u003d val.get(Calendar.HOUR_OF_DAY);\n                    if (offset \u003e\u003d 12) {\n                        offset -\u003d 12;\n                    }\n                    roundUp \u003d offset \u003e 6;\n                    offsetSet \u003d true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min \u003d val.getActualMinimum(fields[i][0]);\n            int max \u003d val.getActualMaximum(fields[i][0]);\n            offset \u003d val.get(fields[i][0]) - min;\n            roundUp \u003d offset \u003e ((max - min) / 2);\n        }\n        System.err.println(\"DST: \" + val.get(Calendar.DST_OFFSET));\n        val.set(fields[i][0], val.get(fields[i][0]) - offset);\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}",
      "path": "src/java/org/apache/commons/lang/time/DateUtils.java",
      "functionStartLine": 619,
      "functionName": "modify",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eInternal calculation method.\u003c/p\u003e\n\n@param val the calendar\n@param field the field constant\n@param round true to round, false to truncate\n@throws ArithmeticException if the year is over 280 million\n",
      "diff": "@@ -1,57 +1,58 @@\n private static void modify(Calendar val, int field, boolean round) {\n     if (val.get(Calendar.YEAR) \u003e 280000000) {\n         throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n     }\n     boolean roundUp \u003d false;\n     for (int i \u003d 0; i \u003c fields.length; i++) {\n         for (int j \u003d 0; j \u003c fields[i].length; j++) {\n             if (fields[i][j] \u003d\u003d field) {\n                 if (round \u0026\u0026 roundUp) {\n                     if (field \u003d\u003d DateUtils.SEMI_MONTH) {\n                         if (val.get(Calendar.DATE) \u003d\u003d 1) {\n                             val.add(Calendar.DATE, 15);\n                         } else {\n                             val.add(Calendar.DATE, -15);\n                             val.add(Calendar.MONTH, 1);\n                         }\n                     } else {\n                         val.add(fields[i][0], 1);\n                     }\n                 }\n                 return;\n             }\n         }\n         int offset \u003d 0;\n         boolean offsetSet \u003d false;\n         switch(field) {\n             case DateUtils.SEMI_MONTH:\n                 if (fields[i][0] \u003d\u003d Calendar.DATE) {\n                     offset \u003d val.get(Calendar.DATE) - 1;\n                     if (offset \u003e\u003d 15) {\n                         offset -\u003d 15;\n                     }\n                     roundUp \u003d offset \u003e 7;\n                     offsetSet \u003d true;\n                 }\n                 break;\n             case Calendar.AM_PM:\n                 if (fields[i][0] \u003d\u003d Calendar.HOUR_OF_DAY) {\n                     offset \u003d val.get(Calendar.HOUR_OF_DAY);\n                     if (offset \u003e\u003d 12) {\n                         offset -\u003d 12;\n                     }\n                     roundUp \u003d offset \u003e 6;\n                     offsetSet \u003d true;\n                 }\n                 break;\n         }\n         if (!offsetSet) {\n             int min \u003d val.getActualMinimum(fields[i][0]);\n             int max \u003d val.getActualMaximum(fields[i][0]);\n             offset \u003d val.get(fields[i][0]) - min;\n             roundUp \u003d offset \u003e ((max - min) / 2);\n         }\n+        System.err.println(\"DST: \" + val.get(Calendar.DST_OFFSET));\n         val.set(fields[i][0], val.get(fields[i][0]) - offset);\n     }\n     throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bc25cdf764a778a34a8361d18772a90bf697751b": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Fix DateUtils.truncate oddity at the far end of the Date spectrum\nbug 31395, from Marc Portier\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137984 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/16/04, 10:43 AM",
      "commitName": "bc25cdf764a778a34a8361d18772a90bf697751b",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Fix DateUtils.truncate oddity at the far end of the Date spectrum\nbug 31395, from Marc Portier\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137984 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/16/04, 10:43 AM",
          "commitName": "bc25cdf764a778a34a8361d18772a90bf697751b",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "10/16/04, 10:08 AM",
          "commitNameOld": "2a41c12c95bb41f7b07a270927b27f3bc5098621",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "private static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) \u003e 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    boolean roundUp \u003d false;\n    for (int i \u003d 0; i \u003c fields.length; i++) {\n        for (int j \u003d 0; j \u003c fields[i].length; j++) {\n            if (fields[i][j] \u003d\u003d field) {\n                if (round \u0026\u0026 roundUp) {\n                    if (field \u003d\u003d DateUtils.SEMI_MONTH) {\n                        if (val.get(Calendar.DATE) \u003d\u003d 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset \u003d 0;\n        boolean offsetSet \u003d false;\n        switch(field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] \u003d\u003d Calendar.DATE) {\n                    offset \u003d val.get(Calendar.DATE) - 1;\n                    if (offset \u003e\u003d 15) {\n                        offset -\u003d 15;\n                    }\n                    roundUp \u003d offset \u003e 7;\n                    offsetSet \u003d true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] \u003d\u003d Calendar.HOUR_OF_DAY) {\n                    offset \u003d val.get(Calendar.HOUR_OF_DAY);\n                    if (offset \u003e\u003d 12) {\n                        offset -\u003d 12;\n                    }\n                    roundUp \u003d offset \u003e 6;\n                    offsetSet \u003d true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min \u003d val.getActualMinimum(fields[i][0]);\n            int max \u003d val.getActualMaximum(fields[i][0]);\n            offset \u003d val.get(fields[i][0]) - min;\n            roundUp \u003d offset \u003e ((max - min) / 2);\n        }\n        val.set(fields[i][0], val.get(fields[i][0]) - offset);\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}",
          "path": "src/java/org/apache/commons/lang/time/DateUtils.java",
          "functionStartLine": 444,
          "functionName": "modify",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eInternal calculation method.\u003c/p\u003e\n\n@param val the calendar\n@param field the field constant\n@param round true to round, false to truncate\n@throws ArithmeticException if the year is over 280 million\n",
          "diff": "@@ -1,54 +1,57 @@\n private static void modify(Calendar val, int field, boolean round) {\n+    if (val.get(Calendar.YEAR) \u003e 280000000) {\n+        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n+    }\n     boolean roundUp \u003d false;\n     for (int i \u003d 0; i \u003c fields.length; i++) {\n         for (int j \u003d 0; j \u003c fields[i].length; j++) {\n             if (fields[i][j] \u003d\u003d field) {\n                 if (round \u0026\u0026 roundUp) {\n                     if (field \u003d\u003d DateUtils.SEMI_MONTH) {\n                         if (val.get(Calendar.DATE) \u003d\u003d 1) {\n                             val.add(Calendar.DATE, 15);\n                         } else {\n                             val.add(Calendar.DATE, -15);\n                             val.add(Calendar.MONTH, 1);\n                         }\n                     } else {\n                         val.add(fields[i][0], 1);\n                     }\n                 }\n                 return;\n             }\n         }\n         int offset \u003d 0;\n         boolean offsetSet \u003d false;\n         switch(field) {\n             case DateUtils.SEMI_MONTH:\n                 if (fields[i][0] \u003d\u003d Calendar.DATE) {\n                     offset \u003d val.get(Calendar.DATE) - 1;\n                     if (offset \u003e\u003d 15) {\n                         offset -\u003d 15;\n                     }\n                     roundUp \u003d offset \u003e 7;\n                     offsetSet \u003d true;\n                 }\n                 break;\n             case Calendar.AM_PM:\n                 if (fields[i][0] \u003d\u003d Calendar.HOUR_OF_DAY) {\n                     offset \u003d val.get(Calendar.HOUR_OF_DAY);\n                     if (offset \u003e\u003d 12) {\n                         offset -\u003d 12;\n                     }\n                     roundUp \u003d offset \u003e 6;\n                     offsetSet \u003d true;\n                 }\n                 break;\n         }\n         if (!offsetSet) {\n             int min \u003d val.getActualMinimum(fields[i][0]);\n             int max \u003d val.getActualMaximum(fields[i][0]);\n             offset \u003d val.get(fields[i][0]) - min;\n             roundUp \u003d offset \u003e ((max - min) / 2);\n         }\n         val.set(fields[i][0], val.get(fields[i][0]) - offset);\n     }\n     throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Fix DateUtils.truncate oddity at the far end of the Date spectrum\nbug 31395, from Marc Portier\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137984 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/16/04, 10:43 AM",
          "commitName": "bc25cdf764a778a34a8361d18772a90bf697751b",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "10/16/04, 10:08 AM",
          "commitNameOld": "2a41c12c95bb41f7b07a270927b27f3bc5098621",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "private static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) \u003e 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    boolean roundUp \u003d false;\n    for (int i \u003d 0; i \u003c fields.length; i++) {\n        for (int j \u003d 0; j \u003c fields[i].length; j++) {\n            if (fields[i][j] \u003d\u003d field) {\n                if (round \u0026\u0026 roundUp) {\n                    if (field \u003d\u003d DateUtils.SEMI_MONTH) {\n                        if (val.get(Calendar.DATE) \u003d\u003d 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset \u003d 0;\n        boolean offsetSet \u003d false;\n        switch(field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] \u003d\u003d Calendar.DATE) {\n                    offset \u003d val.get(Calendar.DATE) - 1;\n                    if (offset \u003e\u003d 15) {\n                        offset -\u003d 15;\n                    }\n                    roundUp \u003d offset \u003e 7;\n                    offsetSet \u003d true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] \u003d\u003d Calendar.HOUR_OF_DAY) {\n                    offset \u003d val.get(Calendar.HOUR_OF_DAY);\n                    if (offset \u003e\u003d 12) {\n                        offset -\u003d 12;\n                    }\n                    roundUp \u003d offset \u003e 6;\n                    offsetSet \u003d true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min \u003d val.getActualMinimum(fields[i][0]);\n            int max \u003d val.getActualMaximum(fields[i][0]);\n            offset \u003d val.get(fields[i][0]) - min;\n            roundUp \u003d offset \u003e ((max - min) / 2);\n        }\n        val.set(fields[i][0], val.get(fields[i][0]) - offset);\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}",
          "path": "src/java/org/apache/commons/lang/time/DateUtils.java",
          "functionStartLine": 444,
          "functionName": "modify",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eInternal calculation method.\u003c/p\u003e\n\n@param val the calendar\n@param field the field constant\n@param round true to round, false to truncate\n@throws ArithmeticException if the year is over 280 million\n",
          "diff": "@@ -1,54 +1,57 @@\n private static void modify(Calendar val, int field, boolean round) {\n+    if (val.get(Calendar.YEAR) \u003e 280000000) {\n+        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n+    }\n     boolean roundUp \u003d false;\n     for (int i \u003d 0; i \u003c fields.length; i++) {\n         for (int j \u003d 0; j \u003c fields[i].length; j++) {\n             if (fields[i][j] \u003d\u003d field) {\n                 if (round \u0026\u0026 roundUp) {\n                     if (field \u003d\u003d DateUtils.SEMI_MONTH) {\n                         if (val.get(Calendar.DATE) \u003d\u003d 1) {\n                             val.add(Calendar.DATE, 15);\n                         } else {\n                             val.add(Calendar.DATE, -15);\n                             val.add(Calendar.MONTH, 1);\n                         }\n                     } else {\n                         val.add(fields[i][0], 1);\n                     }\n                 }\n                 return;\n             }\n         }\n         int offset \u003d 0;\n         boolean offsetSet \u003d false;\n         switch(field) {\n             case DateUtils.SEMI_MONTH:\n                 if (fields[i][0] \u003d\u003d Calendar.DATE) {\n                     offset \u003d val.get(Calendar.DATE) - 1;\n                     if (offset \u003e\u003d 15) {\n                         offset -\u003d 15;\n                     }\n                     roundUp \u003d offset \u003e 7;\n                     offsetSet \u003d true;\n                 }\n                 break;\n             case Calendar.AM_PM:\n                 if (fields[i][0] \u003d\u003d Calendar.HOUR_OF_DAY) {\n                     offset \u003d val.get(Calendar.HOUR_OF_DAY);\n                     if (offset \u003e\u003d 12) {\n                         offset -\u003d 12;\n                     }\n                     roundUp \u003d offset \u003e 6;\n                     offsetSet \u003d true;\n                 }\n                 break;\n         }\n         if (!offsetSet) {\n             int min \u003d val.getActualMinimum(fields[i][0]);\n             int max \u003d val.getActualMaximum(fields[i][0]);\n             offset \u003d val.get(fields[i][0]) - min;\n             roundUp \u003d offset \u003e ((max - min) / 2);\n         }\n         val.set(fields[i][0], val.get(fields[i][0]) - offset);\n     }\n     throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "\u003cp\u003eInternal calculation method.\u003c/p\u003e\n\n@param val the calendar\n@param field the field constant\n@param round true to round, false to truncate\n",
            "newValue": "\u003cp\u003eInternal calculation method.\u003c/p\u003e\n\n@param val the calendar\n@param field the field constant\n@param round true to round, false to truncate\n@throws ArithmeticException if the year is over 280 million\n"
          }
        }
      ]
    },
    "a26102b3007b34100fbd3ee5e457374f4a7b9140": {
      "type": "Ybodychange",
      "commitMessage": "corrected calendar field used to calculate the offset when modifying the hour for a round or truncated based on AM_PM\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137881 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/11/04, 5:04 PM",
      "commitName": "a26102b3007b34100fbd3ee5e457374f4a7b9140",
      "commitAuthor": "Steven Caswell",
      "commitDateOld": "7/11/04, 11:40 AM",
      "commitNameOld": "868093fcfa8c8ba21dafe9313063a3f8408fb789",
      "commitAuthorOld": "Steven Caswell",
      "daysBetweenCommits": 0.23,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "private static void modify(Calendar val, int field, boolean round) {\n    boolean roundUp \u003d false;\n    for (int i \u003d 0; i \u003c fields.length; i++) {\n        for (int j \u003d 0; j \u003c fields[i].length; j++) {\n            if (fields[i][j] \u003d\u003d field) {\n                if (round \u0026\u0026 roundUp) {\n                    if (field \u003d\u003d DateUtils.SEMI_MONTH) {\n                        if (val.get(Calendar.DATE) \u003d\u003d 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset \u003d 0;\n        boolean offsetSet \u003d false;\n        switch(field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] \u003d\u003d Calendar.DATE) {\n                    offset \u003d val.get(Calendar.DATE) - 1;\n                    if (offset \u003e\u003d 15) {\n                        offset -\u003d 15;\n                    }\n                    roundUp \u003d offset \u003e 7;\n                    offsetSet \u003d true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] \u003d\u003d Calendar.HOUR_OF_DAY) {\n                    offset \u003d val.get(Calendar.HOUR_OF_DAY);\n                    if (offset \u003e\u003d 12) {\n                        offset -\u003d 12;\n                    }\n                    roundUp \u003d offset \u003e 6;\n                    offsetSet \u003d true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min \u003d val.getActualMinimum(fields[i][0]);\n            int max \u003d val.getActualMaximum(fields[i][0]);\n            offset \u003d val.get(fields[i][0]) - min;\n            roundUp \u003d offset \u003e ((max - min) / 2);\n        }\n        val.set(fields[i][0], val.get(fields[i][0]) - offset);\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}",
      "path": "src/java/org/apache/commons/lang/time/DateUtils.java",
      "functionStartLine": 322,
      "functionName": "modify",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eInternal calculation method.\u003c/p\u003e\n\n@param val the calendar\n@param field the field constant\n@param round true to round, false to truncate\n",
      "diff": "@@ -1,54 +1,54 @@\n private static void modify(Calendar val, int field, boolean round) {\n     boolean roundUp \u003d false;\n     for (int i \u003d 0; i \u003c fields.length; i++) {\n         for (int j \u003d 0; j \u003c fields[i].length; j++) {\n             if (fields[i][j] \u003d\u003d field) {\n                 if (round \u0026\u0026 roundUp) {\n                     if (field \u003d\u003d DateUtils.SEMI_MONTH) {\n                         if (val.get(Calendar.DATE) \u003d\u003d 1) {\n                             val.add(Calendar.DATE, 15);\n                         } else {\n                             val.add(Calendar.DATE, -15);\n                             val.add(Calendar.MONTH, 1);\n                         }\n                     } else {\n                         val.add(fields[i][0], 1);\n                     }\n                 }\n                 return;\n             }\n         }\n         int offset \u003d 0;\n         boolean offsetSet \u003d false;\n         switch(field) {\n             case DateUtils.SEMI_MONTH:\n                 if (fields[i][0] \u003d\u003d Calendar.DATE) {\n                     offset \u003d val.get(Calendar.DATE) - 1;\n                     if (offset \u003e\u003d 15) {\n                         offset -\u003d 15;\n                     }\n                     roundUp \u003d offset \u003e 7;\n                     offsetSet \u003d true;\n                 }\n                 break;\n             case Calendar.AM_PM:\n-                if (fields[i][0] \u003d\u003d Calendar.HOUR) {\n-                    offset \u003d val.get(Calendar.HOUR);\n+                if (fields[i][0] \u003d\u003d Calendar.HOUR_OF_DAY) {\n+                    offset \u003d val.get(Calendar.HOUR_OF_DAY);\n                     if (offset \u003e\u003d 12) {\n                         offset -\u003d 12;\n                     }\n                     roundUp \u003d offset \u003e 6;\n                     offsetSet \u003d true;\n                 }\n                 break;\n         }\n         if (!offsetSet) {\n             int min \u003d val.getActualMinimum(fields[i][0]);\n             int max \u003d val.getActualMaximum(fields[i][0]);\n             offset \u003d val.get(fields[i][0]) - min;\n             roundUp \u003d offset \u003e ((max - min) / 2);\n         }\n         val.set(fields[i][0], val.get(fields[i][0]) - offset);\n     }\n     throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "823fa853932927e32f3c274bee23396966c08fe7": {
      "type": "Ybodychange",
      "commitMessage": "changed modify method to calculate the field offset and use the set method, rather than adding the offset and letting Calendar perform the calculation - this fixes http://issues.apache.org/bugzilla/show_bug.cgi?id\u003d25560;\nupdated javadocs on round method to explain how rounding across daylight saving time is handled\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137866 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/5/04, 10:54 AM",
      "commitName": "823fa853932927e32f3c274bee23396966c08fe7",
      "commitAuthor": "Steven Caswell",
      "commitDateOld": "6/26/04, 11:29 PM",
      "commitNameOld": "6f4a8a2d8a4cb26c95fbccfaf402ca10d48bc9ea",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 8.48,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "private static void modify(Calendar val, int field, boolean round) {\n    boolean roundUp \u003d false;\n    for (int i \u003d 0; i \u003c fields.length; i++) {\n        for (int j \u003d 0; j \u003c fields[i].length; j++) {\n            if (fields[i][j] \u003d\u003d field) {\n                if (round \u0026\u0026 roundUp) {\n                    if (field \u003d\u003d DateUtils.SEMI_MONTH) {\n                        if (val.get(Calendar.DATE) \u003d\u003d 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset \u003d 0;\n        boolean offsetSet \u003d false;\n        switch(field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] \u003d\u003d Calendar.DATE) {\n                    offset \u003d val.get(Calendar.DATE) - 1;\n                    if (offset \u003e\u003d 15) {\n                        offset -\u003d 15;\n                    }\n                    roundUp \u003d offset \u003e 7;\n                    offsetSet \u003d true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] \u003d\u003d Calendar.HOUR) {\n                    offset \u003d val.get(Calendar.HOUR);\n                    if (offset \u003e\u003d 12) {\n                        offset -\u003d 12;\n                    }\n                    roundUp \u003d offset \u003e 6;\n                    offsetSet \u003d true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min \u003d val.getActualMinimum(fields[i][0]);\n            int max \u003d val.getActualMaximum(fields[i][0]);\n            offset \u003d val.get(fields[i][0]) - min;\n            roundUp \u003d offset \u003e ((max - min) / 2);\n        }\n        val.set(fields[i][0], val.get(fields[i][0]) - offset);\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}",
      "path": "src/java/org/apache/commons/lang/time/DateUtils.java",
      "functionStartLine": 322,
      "functionName": "modify",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eInternal calculation method.\u003c/p\u003e\n\n@param val the calendar\n@param field the field constant\n@param round true to round, false to truncate\n",
      "diff": "@@ -1,54 +1,54 @@\n private static void modify(Calendar val, int field, boolean round) {\n     boolean roundUp \u003d false;\n     for (int i \u003d 0; i \u003c fields.length; i++) {\n         for (int j \u003d 0; j \u003c fields[i].length; j++) {\n             if (fields[i][j] \u003d\u003d field) {\n                 if (round \u0026\u0026 roundUp) {\n                     if (field \u003d\u003d DateUtils.SEMI_MONTH) {\n                         if (val.get(Calendar.DATE) \u003d\u003d 1) {\n                             val.add(Calendar.DATE, 15);\n                         } else {\n                             val.add(Calendar.DATE, -15);\n                             val.add(Calendar.MONTH, 1);\n                         }\n                     } else {\n                         val.add(fields[i][0], 1);\n                     }\n                 }\n                 return;\n             }\n         }\n         int offset \u003d 0;\n         boolean offsetSet \u003d false;\n         switch(field) {\n             case DateUtils.SEMI_MONTH:\n                 if (fields[i][0] \u003d\u003d Calendar.DATE) {\n                     offset \u003d val.get(Calendar.DATE) - 1;\n                     if (offset \u003e\u003d 15) {\n                         offset -\u003d 15;\n                     }\n                     roundUp \u003d offset \u003e 7;\n                     offsetSet \u003d true;\n                 }\n                 break;\n             case Calendar.AM_PM:\n                 if (fields[i][0] \u003d\u003d Calendar.HOUR) {\n                     offset \u003d val.get(Calendar.HOUR);\n                     if (offset \u003e\u003d 12) {\n                         offset -\u003d 12;\n                     }\n                     roundUp \u003d offset \u003e 6;\n                     offsetSet \u003d true;\n                 }\n                 break;\n         }\n         if (!offsetSet) {\n             int min \u003d val.getActualMinimum(fields[i][0]);\n             int max \u003d val.getActualMaximum(fields[i][0]);\n             offset \u003d val.get(fields[i][0]) - min;\n             roundUp \u003d offset \u003e ((max - min) / 2);\n         }\n-        val.add(fields[i][0], -offset);\n+        val.set(fields[i][0], val.get(fields[i][0]) - offset);\n     }\n     throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c66659d62dbf69d4c1ccc5c9c50938273436c1b3": {
      "type": "Ydocchange",
      "commitMessage": "Javadoc fixes. Shouldn\u0027t have been anything other than javadoc changes in this.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137416 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/14/03, 3:25 PM",
      "commitName": "c66659d62dbf69d4c1ccc5c9c50938273436c1b3",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "6/28/03, 10:49 AM",
      "commitNameOld": "a10e65e0001a05deba86ac42bdbf145e7179856c",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 16.19,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "actualSource": "private static void modify(Calendar val, int field, boolean round) {\n    boolean roundUp \u003d false;\n    for (int i \u003d 0; i \u003c fields.length; i++) {\n        for (int j \u003d 0; j \u003c fields[i].length; j++) {\n            if (fields[i][j] \u003d\u003d field) {\n                if (round \u0026\u0026 roundUp) {\n                    if (field \u003d\u003d DateUtils.SEMI_MONTH) {\n                        if (val.get(Calendar.DATE) \u003d\u003d 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset \u003d 0;\n        boolean offsetSet \u003d false;\n        switch(field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] \u003d\u003d Calendar.DATE) {\n                    offset \u003d val.get(Calendar.DATE) - 1;\n                    if (offset \u003e\u003d 15) {\n                        offset -\u003d 15;\n                    }\n                    roundUp \u003d offset \u003e 7;\n                    offsetSet \u003d true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] \u003d\u003d Calendar.HOUR) {\n                    offset \u003d val.get(Calendar.HOUR);\n                    if (offset \u003e\u003d 12) {\n                        offset -\u003d 12;\n                    }\n                    roundUp \u003d offset \u003e 6;\n                    offsetSet \u003d true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min \u003d val.getActualMinimum(fields[i][0]);\n            int max \u003d val.getActualMaximum(fields[i][0]);\n            offset \u003d val.get(fields[i][0]) - min;\n            roundUp \u003d offset \u003e ((max - min) / 2);\n        }\n        val.add(fields[i][0], -offset);\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}",
      "path": "src/java/org/apache/commons/lang/time/DateUtils.java",
      "functionStartLine": 336,
      "functionName": "modify",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eInternal calculation method.\u003c/p\u003e\n\n@param val the calendar\n@param field the field constant\n@param round true to round, false to truncate\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Internal calculation method\n\n@param val the calendar\n@param field the field constant\n@param round true to round, false to truncate\n",
        "newValue": "\u003cp\u003eInternal calculation method.\u003c/p\u003e\n\n@param val the calendar\n@param field the field constant\n@param round true to round, false to truncate\n"
      }
    },
    "63ab3ece1b17a371aa265574dd79ee7104b46921": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Prepare DateUtils for 2.0 release\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137375 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/23/03, 4:41 PM",
      "commitName": "63ab3ece1b17a371aa265574dd79ee7104b46921",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Prepare DateUtils for 2.0 release\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137375 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "6/23/03, 4:41 PM",
          "commitName": "63ab3ece1b17a371aa265574dd79ee7104b46921",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "6/8/03, 4:14 PM",
          "commitNameOld": "9839566cf0eb6d299a61d6354522d6f65ab83af3",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 15.02,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "actualSource": "private static void modify(Calendar val, int field, boolean round) {\n    boolean roundUp \u003d false;\n    for (int i \u003d 0; i \u003c fields.length; i++) {\n        for (int j \u003d 0; j \u003c fields[i].length; j++) {\n            if (fields[i][j] \u003d\u003d field) {\n                if (round \u0026\u0026 roundUp) {\n                    if (field \u003d\u003d DateUtils.SEMI_MONTH) {\n                        if (val.get(Calendar.DATE) \u003d\u003d 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset \u003d 0;\n        boolean offsetSet \u003d false;\n        switch(field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] \u003d\u003d Calendar.DATE) {\n                    offset \u003d val.get(Calendar.DATE) - 1;\n                    if (offset \u003e\u003d 15) {\n                        offset -\u003d 15;\n                    }\n                    roundUp \u003d offset \u003e 7;\n                    offsetSet \u003d true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] \u003d\u003d Calendar.HOUR) {\n                    offset \u003d val.get(Calendar.HOUR);\n                    if (offset \u003e\u003d 12) {\n                        offset -\u003d 12;\n                    }\n                    roundUp \u003d offset \u003e 6;\n                    offsetSet \u003d true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min \u003d val.getActualMinimum(fields[i][0]);\n            int max \u003d val.getActualMaximum(fields[i][0]);\n            offset \u003d val.get(fields[i][0]) - min;\n            roundUp \u003d offset \u003e ((max - min) / 2);\n        }\n        val.add(fields[i][0], -offset);\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}",
          "path": "src/java/org/apache/commons/lang/time/DateUtils.java",
          "functionStartLine": 312,
          "functionName": "modify",
          "functionAnnotation": "",
          "functionDoc": "Internal calculation method\n\n@param val the calendar\n@param field the field constant\n@param round true to round, false to truncate\n",
          "diff": "@@ -1,54 +1,54 @@\n private static void modify(Calendar val, int field, boolean round) {\n     boolean roundUp \u003d false;\n     for (int i \u003d 0; i \u003c fields.length; i++) {\n         for (int j \u003d 0; j \u003c fields[i].length; j++) {\n             if (fields[i][j] \u003d\u003d field) {\n                 if (round \u0026\u0026 roundUp) {\n                     if (field \u003d\u003d DateUtils.SEMI_MONTH) {\n                         if (val.get(Calendar.DATE) \u003d\u003d 1) {\n                             val.add(Calendar.DATE, 15);\n                         } else {\n                             val.add(Calendar.DATE, -15);\n                             val.add(Calendar.MONTH, 1);\n                         }\n                     } else {\n                         val.add(fields[i][0], 1);\n                     }\n                 }\n                 return;\n             }\n         }\n         int offset \u003d 0;\n         boolean offsetSet \u003d false;\n         switch(field) {\n             case DateUtils.SEMI_MONTH:\n                 if (fields[i][0] \u003d\u003d Calendar.DATE) {\n                     offset \u003d val.get(Calendar.DATE) - 1;\n                     if (offset \u003e\u003d 15) {\n                         offset -\u003d 15;\n                     }\n                     roundUp \u003d offset \u003e 7;\n                     offsetSet \u003d true;\n                 }\n                 break;\n             case Calendar.AM_PM:\n                 if (fields[i][0] \u003d\u003d Calendar.HOUR) {\n                     offset \u003d val.get(Calendar.HOUR);\n                     if (offset \u003e\u003d 12) {\n                         offset -\u003d 12;\n                     }\n                     roundUp \u003d offset \u003e 6;\n                     offsetSet \u003d true;\n                 }\n                 break;\n         }\n         if (!offsetSet) {\n             int min \u003d val.getActualMinimum(fields[i][0]);\n             int max \u003d val.getActualMaximum(fields[i][0]);\n             offset \u003d val.get(fields[i][0]) - min;\n             roundUp \u003d offset \u003e ((max - min) / 2);\n         }\n         val.add(fields[i][0], -offset);\n     }\n-    throw new RuntimeException(\"We do not support that field.\");\n+    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Prepare DateUtils for 2.0 release\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137375 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "6/23/03, 4:41 PM",
          "commitName": "63ab3ece1b17a371aa265574dd79ee7104b46921",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "6/8/03, 4:14 PM",
          "commitNameOld": "9839566cf0eb6d299a61d6354522d6f65ab83af3",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 15.02,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "actualSource": "private static void modify(Calendar val, int field, boolean round) {\n    boolean roundUp \u003d false;\n    for (int i \u003d 0; i \u003c fields.length; i++) {\n        for (int j \u003d 0; j \u003c fields[i].length; j++) {\n            if (fields[i][j] \u003d\u003d field) {\n                if (round \u0026\u0026 roundUp) {\n                    if (field \u003d\u003d DateUtils.SEMI_MONTH) {\n                        if (val.get(Calendar.DATE) \u003d\u003d 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset \u003d 0;\n        boolean offsetSet \u003d false;\n        switch(field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] \u003d\u003d Calendar.DATE) {\n                    offset \u003d val.get(Calendar.DATE) - 1;\n                    if (offset \u003e\u003d 15) {\n                        offset -\u003d 15;\n                    }\n                    roundUp \u003d offset \u003e 7;\n                    offsetSet \u003d true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] \u003d\u003d Calendar.HOUR) {\n                    offset \u003d val.get(Calendar.HOUR);\n                    if (offset \u003e\u003d 12) {\n                        offset -\u003d 12;\n                    }\n                    roundUp \u003d offset \u003e 6;\n                    offsetSet \u003d true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min \u003d val.getActualMinimum(fields[i][0]);\n            int max \u003d val.getActualMaximum(fields[i][0]);\n            offset \u003d val.get(fields[i][0]) - min;\n            roundUp \u003d offset \u003e ((max - min) / 2);\n        }\n        val.add(fields[i][0], -offset);\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}",
          "path": "src/java/org/apache/commons/lang/time/DateUtils.java",
          "functionStartLine": 312,
          "functionName": "modify",
          "functionAnnotation": "",
          "functionDoc": "Internal calculation method\n\n@param val the calendar\n@param field the field constant\n@param round true to round, false to truncate\n",
          "diff": "@@ -1,54 +1,54 @@\n private static void modify(Calendar val, int field, boolean round) {\n     boolean roundUp \u003d false;\n     for (int i \u003d 0; i \u003c fields.length; i++) {\n         for (int j \u003d 0; j \u003c fields[i].length; j++) {\n             if (fields[i][j] \u003d\u003d field) {\n                 if (round \u0026\u0026 roundUp) {\n                     if (field \u003d\u003d DateUtils.SEMI_MONTH) {\n                         if (val.get(Calendar.DATE) \u003d\u003d 1) {\n                             val.add(Calendar.DATE, 15);\n                         } else {\n                             val.add(Calendar.DATE, -15);\n                             val.add(Calendar.MONTH, 1);\n                         }\n                     } else {\n                         val.add(fields[i][0], 1);\n                     }\n                 }\n                 return;\n             }\n         }\n         int offset \u003d 0;\n         boolean offsetSet \u003d false;\n         switch(field) {\n             case DateUtils.SEMI_MONTH:\n                 if (fields[i][0] \u003d\u003d Calendar.DATE) {\n                     offset \u003d val.get(Calendar.DATE) - 1;\n                     if (offset \u003e\u003d 15) {\n                         offset -\u003d 15;\n                     }\n                     roundUp \u003d offset \u003e 7;\n                     offsetSet \u003d true;\n                 }\n                 break;\n             case Calendar.AM_PM:\n                 if (fields[i][0] \u003d\u003d Calendar.HOUR) {\n                     offset \u003d val.get(Calendar.HOUR);\n                     if (offset \u003e\u003d 12) {\n                         offset -\u003d 12;\n                     }\n                     roundUp \u003d offset \u003e 6;\n                     offsetSet \u003d true;\n                 }\n                 break;\n         }\n         if (!offsetSet) {\n             int min \u003d val.getActualMinimum(fields[i][0]);\n             int max \u003d val.getActualMaximum(fields[i][0]);\n             offset \u003d val.get(fields[i][0]) - min;\n             roundUp \u003d offset \u003e ((max - min) / 2);\n         }\n         val.add(fields[i][0], -offset);\n     }\n-    throw new RuntimeException(\"We do not support that field.\");\n+    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "Internal calculation method\n\n@param val the calendar\n@param field the field constant\n@param round true to round, false to truncate\n"
          }
        }
      ]
    },
    "9839566cf0eb6d299a61d6354522d6f65ab83af3": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "Rework time package in preparation for 2.0 release\nDateUtils split to DateFormatUtils and DurationFormatUtils\nCalendarUtils renamed to DateUtils\nStopWatch time format method moved to DurationFormatUtils\nTests updated and pass\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137361 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/8/03, 4:14 PM",
      "commitName": "9839566cf0eb6d299a61d6354522d6f65ab83af3",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "Rework time package in preparation for 2.0 release\nDateUtils split to DateFormatUtils and DurationFormatUtils\nCalendarUtils renamed to DateUtils\nStopWatch time format method moved to DurationFormatUtils\nTests updated and pass\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137361 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "6/8/03, 4:14 PM",
          "commitName": "9839566cf0eb6d299a61d6354522d6f65ab83af3",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "6/8/03, 7:19 AM",
          "commitNameOld": "18b614c14626fedade91a7c534a9cf7eeccbb17a",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 0.37,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private static void modify(Calendar val, int field, boolean round) {\n    boolean roundUp \u003d false;\n    for (int i \u003d 0; i \u003c fields.length; i++) {\n        for (int j \u003d 0; j \u003c fields[i].length; j++) {\n            if (fields[i][j] \u003d\u003d field) {\n                if (round \u0026\u0026 roundUp) {\n                    if (field \u003d\u003d DateUtils.SEMI_MONTH) {\n                        if (val.get(Calendar.DATE) \u003d\u003d 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset \u003d 0;\n        boolean offsetSet \u003d false;\n        switch(field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] \u003d\u003d Calendar.DATE) {\n                    offset \u003d val.get(Calendar.DATE) - 1;\n                    if (offset \u003e\u003d 15) {\n                        offset -\u003d 15;\n                    }\n                    roundUp \u003d offset \u003e 7;\n                    offsetSet \u003d true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] \u003d\u003d Calendar.HOUR) {\n                    offset \u003d val.get(Calendar.HOUR);\n                    if (offset \u003e\u003d 12) {\n                        offset -\u003d 12;\n                    }\n                    roundUp \u003d offset \u003e 6;\n                    offsetSet \u003d true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min \u003d val.getActualMinimum(fields[i][0]);\n            int max \u003d val.getActualMaximum(fields[i][0]);\n            offset \u003d val.get(fields[i][0]) - min;\n            roundUp \u003d offset \u003e ((max - min) / 2);\n        }\n        val.add(fields[i][0], -offset);\n    }\n    throw new RuntimeException(\"We do not support that field.\");\n}",
          "path": "src/java/org/apache/commons/lang/time/DateUtils.java",
          "functionStartLine": 227,
          "functionName": "modify",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,54 +1,54 @@\n private static void modify(Calendar val, int field, boolean round) {\n     boolean roundUp \u003d false;\n     for (int i \u003d 0; i \u003c fields.length; i++) {\n         for (int j \u003d 0; j \u003c fields[i].length; j++) {\n             if (fields[i][j] \u003d\u003d field) {\n                 if (round \u0026\u0026 roundUp) {\n-                    if (field \u003d\u003d CalendarUtils.SEMI_MONTH) {\n+                    if (field \u003d\u003d DateUtils.SEMI_MONTH) {\n                         if (val.get(Calendar.DATE) \u003d\u003d 1) {\n                             val.add(Calendar.DATE, 15);\n                         } else {\n                             val.add(Calendar.DATE, -15);\n                             val.add(Calendar.MONTH, 1);\n                         }\n                     } else {\n                         val.add(fields[i][0], 1);\n                     }\n                 }\n                 return;\n             }\n         }\n         int offset \u003d 0;\n         boolean offsetSet \u003d false;\n         switch(field) {\n-            case CalendarUtils.SEMI_MONTH:\n+            case DateUtils.SEMI_MONTH:\n                 if (fields[i][0] \u003d\u003d Calendar.DATE) {\n                     offset \u003d val.get(Calendar.DATE) - 1;\n                     if (offset \u003e\u003d 15) {\n                         offset -\u003d 15;\n                     }\n                     roundUp \u003d offset \u003e 7;\n                     offsetSet \u003d true;\n                 }\n                 break;\n             case Calendar.AM_PM:\n                 if (fields[i][0] \u003d\u003d Calendar.HOUR) {\n                     offset \u003d val.get(Calendar.HOUR);\n                     if (offset \u003e\u003d 12) {\n                         offset -\u003d 12;\n                     }\n                     roundUp \u003d offset \u003e 6;\n                     offsetSet \u003d true;\n                 }\n                 break;\n         }\n         if (!offsetSet) {\n             int min \u003d val.getActualMinimum(fields[i][0]);\n             int max \u003d val.getActualMaximum(fields[i][0]);\n             offset \u003d val.get(fields[i][0]) - min;\n             roundUp \u003d offset \u003e ((max - min) / 2);\n         }\n         val.add(fields[i][0], -offset);\n     }\n     throw new RuntimeException(\"We do not support that field.\");\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/java/org/apache/commons/lang/time/CalendarUtils.java",
            "newPath": "src/java/org/apache/commons/lang/time/DateUtils.java",
            "oldMethodName": "modify",
            "newMethodName": "modify"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Rework time package in preparation for 2.0 release\nDateUtils split to DateFormatUtils and DurationFormatUtils\nCalendarUtils renamed to DateUtils\nStopWatch time format method moved to DurationFormatUtils\nTests updated and pass\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137361 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "6/8/03, 4:14 PM",
          "commitName": "9839566cf0eb6d299a61d6354522d6f65ab83af3",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "6/8/03, 7:19 AM",
          "commitNameOld": "18b614c14626fedade91a7c534a9cf7eeccbb17a",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 0.37,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private static void modify(Calendar val, int field, boolean round) {\n    boolean roundUp \u003d false;\n    for (int i \u003d 0; i \u003c fields.length; i++) {\n        for (int j \u003d 0; j \u003c fields[i].length; j++) {\n            if (fields[i][j] \u003d\u003d field) {\n                if (round \u0026\u0026 roundUp) {\n                    if (field \u003d\u003d DateUtils.SEMI_MONTH) {\n                        if (val.get(Calendar.DATE) \u003d\u003d 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset \u003d 0;\n        boolean offsetSet \u003d false;\n        switch(field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] \u003d\u003d Calendar.DATE) {\n                    offset \u003d val.get(Calendar.DATE) - 1;\n                    if (offset \u003e\u003d 15) {\n                        offset -\u003d 15;\n                    }\n                    roundUp \u003d offset \u003e 7;\n                    offsetSet \u003d true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] \u003d\u003d Calendar.HOUR) {\n                    offset \u003d val.get(Calendar.HOUR);\n                    if (offset \u003e\u003d 12) {\n                        offset -\u003d 12;\n                    }\n                    roundUp \u003d offset \u003e 6;\n                    offsetSet \u003d true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min \u003d val.getActualMinimum(fields[i][0]);\n            int max \u003d val.getActualMaximum(fields[i][0]);\n            offset \u003d val.get(fields[i][0]) - min;\n            roundUp \u003d offset \u003e ((max - min) / 2);\n        }\n        val.add(fields[i][0], -offset);\n    }\n    throw new RuntimeException(\"We do not support that field.\");\n}",
          "path": "src/java/org/apache/commons/lang/time/DateUtils.java",
          "functionStartLine": 227,
          "functionName": "modify",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,54 +1,54 @@\n private static void modify(Calendar val, int field, boolean round) {\n     boolean roundUp \u003d false;\n     for (int i \u003d 0; i \u003c fields.length; i++) {\n         for (int j \u003d 0; j \u003c fields[i].length; j++) {\n             if (fields[i][j] \u003d\u003d field) {\n                 if (round \u0026\u0026 roundUp) {\n-                    if (field \u003d\u003d CalendarUtils.SEMI_MONTH) {\n+                    if (field \u003d\u003d DateUtils.SEMI_MONTH) {\n                         if (val.get(Calendar.DATE) \u003d\u003d 1) {\n                             val.add(Calendar.DATE, 15);\n                         } else {\n                             val.add(Calendar.DATE, -15);\n                             val.add(Calendar.MONTH, 1);\n                         }\n                     } else {\n                         val.add(fields[i][0], 1);\n                     }\n                 }\n                 return;\n             }\n         }\n         int offset \u003d 0;\n         boolean offsetSet \u003d false;\n         switch(field) {\n-            case CalendarUtils.SEMI_MONTH:\n+            case DateUtils.SEMI_MONTH:\n                 if (fields[i][0] \u003d\u003d Calendar.DATE) {\n                     offset \u003d val.get(Calendar.DATE) - 1;\n                     if (offset \u003e\u003d 15) {\n                         offset -\u003d 15;\n                     }\n                     roundUp \u003d offset \u003e 7;\n                     offsetSet \u003d true;\n                 }\n                 break;\n             case Calendar.AM_PM:\n                 if (fields[i][0] \u003d\u003d Calendar.HOUR) {\n                     offset \u003d val.get(Calendar.HOUR);\n                     if (offset \u003e\u003d 12) {\n                         offset -\u003d 12;\n                     }\n                     roundUp \u003d offset \u003e 6;\n                     offsetSet \u003d true;\n                 }\n                 break;\n         }\n         if (!offsetSet) {\n             int min \u003d val.getActualMinimum(fields[i][0]);\n             int max \u003d val.getActualMaximum(fields[i][0]);\n             offset \u003d val.get(fields[i][0]) - min;\n             roundUp \u003d offset \u003e ((max - min) / 2);\n         }\n         val.add(fields[i][0], -offset);\n     }\n     throw new RuntimeException(\"We do not support that field.\");\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "6400026ca238c10b5864f278777745851ba0e4c0": {
      "type": "Yfilerename",
      "commitMessage": "Create time subpackage\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137194 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/18/02, 3:30 PM",
      "commitName": "6400026ca238c10b5864f278777745851ba0e4c0",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "12/18/02, 3:28 PM",
      "commitNameOld": "338c0e3370fd11f830d2a3b8346d80965c1f1c3e",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private static void modify(Calendar val, int field, boolean round) {\n    boolean roundUp \u003d false;\n    for (int i \u003d 0; i \u003c fields.length; i++) {\n        for (int j \u003d 0; j \u003c fields[i].length; j++) {\n            if (fields[i][j] \u003d\u003d field) {\n                if (round \u0026\u0026 roundUp) {\n                    if (field \u003d\u003d CalendarUtils.SEMI_MONTH) {\n                        if (val.get(Calendar.DATE) \u003d\u003d 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset \u003d 0;\n        boolean offsetSet \u003d false;\n        switch(field) {\n            case CalendarUtils.SEMI_MONTH:\n                if (fields[i][0] \u003d\u003d Calendar.DATE) {\n                    offset \u003d val.get(Calendar.DATE) - 1;\n                    if (offset \u003e\u003d 15) {\n                        offset -\u003d 15;\n                    }\n                    roundUp \u003d offset \u003e 7;\n                    offsetSet \u003d true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] \u003d\u003d Calendar.HOUR) {\n                    offset \u003d val.get(Calendar.HOUR);\n                    if (offset \u003e\u003d 12) {\n                        offset -\u003d 12;\n                    }\n                    roundUp \u003d offset \u003e 6;\n                    offsetSet \u003d true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min \u003d val.getActualMinimum(fields[i][0]);\n            int max \u003d val.getActualMaximum(fields[i][0]);\n            offset \u003d val.get(fields[i][0]) - min;\n            roundUp \u003d offset \u003e ((max - min) / 2);\n        }\n        val.add(fields[i][0], -offset);\n    }\n    throw new RuntimeException(\"We do not support that field.\");\n}",
      "path": "src/java/org/apache/commons/lang/time/CalendarUtils.java",
      "functionStartLine": 195,
      "functionName": "modify",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/lang/CalendarUtils.java",
        "newPath": "src/java/org/apache/commons/lang/time/CalendarUtils.java"
      }
    },
    "4dcba82f4fce40bf0ad7a74ade88e59e99252a49": {
      "type": "Yintroduced",
      "commitMessage": "CalendarUtils from the sandbox, for merger with DateUtils. Or parallel living.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137190 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/16/02, 1:55 PM",
      "commitName": "4dcba82f4fce40bf0ad7a74ade88e59e99252a49",
      "commitAuthor": "Henri Yandell",
      "diff": "@@ -0,0 +1,54 @@\n+private static void modify(Calendar val, int field, boolean round) {\n+    boolean roundUp \u003d false;\n+    for (int i \u003d 0; i \u003c fields.length; i++) {\n+        for (int j \u003d 0; j \u003c fields[i].length; j++) {\n+            if (fields[i][j] \u003d\u003d field) {\n+                if (round \u0026\u0026 roundUp) {\n+                    if (field \u003d\u003d CalendarUtils.SEMI_MONTH) {\n+                        if (val.get(Calendar.DATE) \u003d\u003d 1) {\n+                            val.add(Calendar.DATE, 15);\n+                        } else {\n+                            val.add(Calendar.DATE, -15);\n+                            val.add(Calendar.MONTH, 1);\n+                        }\n+                    } else {\n+                        val.add(fields[i][0], 1);\n+                    }\n+                }\n+                return;\n+            }\n+        }\n+        int offset \u003d 0;\n+        boolean offsetSet \u003d false;\n+        switch(field) {\n+            case CalendarUtils.SEMI_MONTH:\n+                if (fields[i][0] \u003d\u003d Calendar.DATE) {\n+                    offset \u003d val.get(Calendar.DATE) - 1;\n+                    if (offset \u003e\u003d 15) {\n+                        offset -\u003d 15;\n+                    }\n+                    roundUp \u003d offset \u003e 7;\n+                    offsetSet \u003d true;\n+                }\n+                break;\n+            case Calendar.AM_PM:\n+                if (fields[i][0] \u003d\u003d Calendar.HOUR) {\n+                    offset \u003d val.get(Calendar.HOUR);\n+                    if (offset \u003e\u003d 12) {\n+                        offset -\u003d 12;\n+                    }\n+                    roundUp \u003d offset \u003e 6;\n+                    offsetSet \u003d true;\n+                }\n+                break;\n+        }\n+        if (!offsetSet) {\n+            int min \u003d val.getActualMinimum(fields[i][0]);\n+            int max \u003d val.getActualMaximum(fields[i][0]);\n+            offset \u003d val.get(fields[i][0]) - min;\n+            roundUp \u003d offset \u003e ((max - min) / 2);\n+        }\n+        val.add(fields[i][0], -offset);\n+    }\n+    throw new RuntimeException(\"We do not support that field.\");\n+}\n\\ No newline at end of file\n",
      "actualSource": "private static void modify(Calendar val, int field, boolean round) {\n    boolean roundUp \u003d false;\n    for (int i \u003d 0; i \u003c fields.length; i++) {\n        for (int j \u003d 0; j \u003c fields[i].length; j++) {\n            if (fields[i][j] \u003d\u003d field) {\n                if (round \u0026\u0026 roundUp) {\n                    if (field \u003d\u003d CalendarUtils.SEMI_MONTH) {\n                        if (val.get(Calendar.DATE) \u003d\u003d 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset \u003d 0;\n        boolean offsetSet \u003d false;\n        switch(field) {\n            case CalendarUtils.SEMI_MONTH:\n                if (fields[i][0] \u003d\u003d Calendar.DATE) {\n                    offset \u003d val.get(Calendar.DATE) - 1;\n                    if (offset \u003e\u003d 15) {\n                        offset -\u003d 15;\n                    }\n                    roundUp \u003d offset \u003e 7;\n                    offsetSet \u003d true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] \u003d\u003d Calendar.HOUR) {\n                    offset \u003d val.get(Calendar.HOUR);\n                    if (offset \u003e\u003d 12) {\n                        offset -\u003d 12;\n                    }\n                    roundUp \u003d offset \u003e 6;\n                    offsetSet \u003d true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min \u003d val.getActualMinimum(fields[i][0]);\n            int max \u003d val.getActualMaximum(fields[i][0]);\n            offset \u003d val.get(fields[i][0]) - min;\n            roundUp \u003d offset \u003e ((max - min) / 2);\n        }\n        val.add(fields[i][0], -offset);\n    }\n    throw new RuntimeException(\"We do not support that field.\");\n}",
      "path": "src/java/org/apache/commons/lang/CalendarUtils.java",
      "functionStartLine": 195,
      "functionName": "modify",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}