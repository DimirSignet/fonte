{
  "origin": "codeshovel",
  "repositoryName": "Lang-53b",
  "repositoryPath": "/tmp/Lang-53b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DateUtils.java",
  "functionName": "round",
  "functionId": "round___date-Date__field-int",
  "sourceFilePath": "src/java/org/apache/commons/lang/time/DateUtils.java",
  "functionAnnotation": "",
  "functionDoc": "\u003cp\u003eRound this date, leaving the field specified as the most\nsignificant field.\u003c/p\u003e\n\n\u003cp\u003eFor example, if you had the datetime of 28 Mar 2002\n13:45:01.231, if this was passed with HOUR, it would return\n28 Mar 2002 14:00:00.000. If this was passed with MONTH, it\nwould return 1 April 2002 0:00:00.000.\u003c/p\u003e\n\n\u003cp\u003eFor a date in a timezone that handles the change to daylight\nsaving time, rounding to Calendar.HOUR_OF_DAY will behave as follows.\nSuppose daylight saving time begins at 02:00 on March 30. Rounding a \ndate that crosses this time would produce the following values:\n\u003cul\u003e\n\u003cli\u003eMarch 30, 2003 01:10 rounds to March 30, 2003 01:00\u003c/li\u003e\n\u003cli\u003eMarch 30, 2003 01:40 rounds to March 30, 2003 03:00\u003c/li\u003e\n\u003cli\u003eMarch 30, 2003 02:10 rounds to March 30, 2003 03:00\u003c/li\u003e\n\u003cli\u003eMarch 30, 2003 02:40 rounds to March 30, 2003 04:00\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\n@param date the date to work with\n@param field the field from \u003ccode\u003eCalendar\u003c/code\u003e\n or \u003ccode\u003eSEMI_MONTH\u003c/code\u003e\n@return the rounded date\n@throws IllegalArgumentException if the date is \u003ccode\u003enull\u003c/code\u003e\n@throws ArithmeticException if the year is over 280 million\n",
  "functionStartLine": 436,
  "functionEndLine": 444,
  "numCommitsSeen": 55,
  "timeTaken": 2346,
  "changeHistory": [
    "bc25cdf764a778a34a8361d18772a90bf697751b",
    "14742cd0d1c0aa4a43088c2b1b8be1b34ace55c3",
    "823fa853932927e32f3c274bee23396966c08fe7",
    "6f4a8a2d8a4cb26c95fbccfaf402ca10d48bc9ea",
    "c66659d62dbf69d4c1ccc5c9c50938273436c1b3",
    "63ab3ece1b17a371aa265574dd79ee7104b46921",
    "9839566cf0eb6d299a61d6354522d6f65ab83af3",
    "6400026ca238c10b5864f278777745851ba0e4c0",
    "4dcba82f4fce40bf0ad7a74ade88e59e99252a49"
  ],
  "changeHistoryShort": {
    "bc25cdf764a778a34a8361d18772a90bf697751b": "Ydocchange",
    "14742cd0d1c0aa4a43088c2b1b8be1b34ace55c3": "Ydocchange",
    "823fa853932927e32f3c274bee23396966c08fe7": "Ydocchange",
    "6f4a8a2d8a4cb26c95fbccfaf402ca10d48bc9ea": "Ybodychange",
    "c66659d62dbf69d4c1ccc5c9c50938273436c1b3": "Ydocchange",
    "63ab3ece1b17a371aa265574dd79ee7104b46921": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "9839566cf0eb6d299a61d6354522d6f65ab83af3": "Ymovefromfile",
    "6400026ca238c10b5864f278777745851ba0e4c0": "Yfilerename",
    "4dcba82f4fce40bf0ad7a74ade88e59e99252a49": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bc25cdf764a778a34a8361d18772a90bf697751b": {
      "type": "Ydocchange",
      "commitMessage": "Fix DateUtils.truncate oddity at the far end of the Date spectrum\nbug 31395, from Marc Portier\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137984 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/16/04, 10:43 AM",
      "commitName": "bc25cdf764a778a34a8361d18772a90bf697751b",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "10/16/04, 10:08 AM",
      "commitNameOld": "2a41c12c95bb41f7b07a270927b27f3bc5098621",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Date round(Date date, int field) {\n    if (date \u003d\u003d null) {\n        throw new IllegalArgumentException(\"The date must not be null\");\n    }\n    Calendar gval \u003d Calendar.getInstance();\n    gval.setTime(date);\n    modify(gval, field, true);\n    return gval.getTime();\n}",
      "path": "src/java/org/apache/commons/lang/time/DateUtils.java",
      "functionStartLine": 260,
      "functionName": "round",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eRound this date, leaving the field specified as the most\nsignificant field.\u003c/p\u003e\n\n\u003cp\u003eFor example, if you had the datetime of 28 Mar 2002\n13:45:01.231, if this was passed with HOUR, it would return\n28 Mar 2002 14:00:00.000. If this was passed with MONTH, it\nwould return 1 April 2002 0:00:00.000.\u003c/p\u003e\n\n\u003cp\u003eFor a date in a timezone that handles the change to daylight\nsaving time, rounding to Calendar.HOUR_OF_DAY will behave as follows.\nSuppose daylight saving time begins at 02:00 on March 30. Rounding a \ndate that crosses this time would produce the following values:\n\u003cul\u003e\n\u003cli\u003eMarch 30, 2003 01:10 rounds to March 30, 2003 01:00\u003c/li\u003e\n\u003cli\u003eMarch 30, 2003 01:40 rounds to March 30, 2003 03:00\u003c/li\u003e\n\u003cli\u003eMarch 30, 2003 02:10 rounds to March 30, 2003 03:00\u003c/li\u003e\n\u003cli\u003eMarch 30, 2003 02:40 rounds to March 30, 2003 04:00\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\n@param date the date to work with\n@param field the field from \u003ccode\u003eCalendar\u003c/code\u003e\n or \u003ccode\u003eSEMI_MONTH\u003c/code\u003e\n@return the rounded date\n@throws IllegalArgumentException if the date is \u003ccode\u003enull\u003c/code\u003e\n@throws ArithmeticException if the year is over 280 million\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "\u003cp\u003eRound this date, leaving the field specified as the most\nsignificant field.\u003c/p\u003e\n\n\u003cp\u003eFor example, if you had the datetime of 28 Mar 2002\n13:45:01.231, if this was passed with HOUR, it would return\n28 Mar 2002 14:00:00.000. If this was passed with MONTH, it\nwould return 1 April 2002 0:00:00.000.\u003c/p\u003e\n\n\u003cp\u003eFor a date in a timezone that handles the change to daylight\nsaving time, rounding to Calendar.HOUR_OF_DAY will behave as follows.\nSuppose daylight saving time begins at 02:00 on March 30. Rounding a \ndate that crosses this time would produce the following values:\n\u003cul\u003e\n\u003cli\u003eMarch 30, 2003 01:10 rounds to March 30, 2003 01:00\u003c/li\u003e\n\u003cli\u003eMarch 30, 2003 01:40 rounds to March 30, 2003 03:00\u003c/li\u003e\n\u003cli\u003eMarch 30, 2003 02:10 rounds to March 30, 2003 03:00\u003c/li\u003e\n\u003cli\u003eMarch 30, 2003 02:40 rounds to March 30, 2003 04:00\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\n@param date the date to work with\n@param field the field from \u003ccode\u003eCalendar\u003c/code\u003e\n or \u003ccode\u003eSEMI_MONTH\u003c/code\u003e\n@return the rounded date\n@throws IllegalArgumentException if the date is \u003ccode\u003enull\u003c/code\u003e\n",
        "newValue": "\u003cp\u003eRound this date, leaving the field specified as the most\nsignificant field.\u003c/p\u003e\n\n\u003cp\u003eFor example, if you had the datetime of 28 Mar 2002\n13:45:01.231, if this was passed with HOUR, it would return\n28 Mar 2002 14:00:00.000. If this was passed with MONTH, it\nwould return 1 April 2002 0:00:00.000.\u003c/p\u003e\n\n\u003cp\u003eFor a date in a timezone that handles the change to daylight\nsaving time, rounding to Calendar.HOUR_OF_DAY will behave as follows.\nSuppose daylight saving time begins at 02:00 on March 30. Rounding a \ndate that crosses this time would produce the following values:\n\u003cul\u003e\n\u003cli\u003eMarch 30, 2003 01:10 rounds to March 30, 2003 01:00\u003c/li\u003e\n\u003cli\u003eMarch 30, 2003 01:40 rounds to March 30, 2003 03:00\u003c/li\u003e\n\u003cli\u003eMarch 30, 2003 02:10 rounds to March 30, 2003 03:00\u003c/li\u003e\n\u003cli\u003eMarch 30, 2003 02:40 rounds to March 30, 2003 04:00\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\n@param date the date to work with\n@param field the field from \u003ccode\u003eCalendar\u003c/code\u003e\n or \u003ccode\u003eSEMI_MONTH\u003c/code\u003e\n@return the rounded date\n@throws IllegalArgumentException if the date is \u003ccode\u003enull\u003c/code\u003e\n@throws ArithmeticException if the year is over 280 million\n"
      }
    },
    "14742cd0d1c0aa4a43088c2b1b8be1b34ace55c3": {
      "type": "Ydocchange",
      "commitMessage": "corrected javadoc typo\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137868 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/5/04, 11:07 AM",
      "commitName": "14742cd0d1c0aa4a43088c2b1b8be1b34ace55c3",
      "commitAuthor": "Steven Caswell",
      "commitDateOld": "7/5/04, 10:54 AM",
      "commitNameOld": "823fa853932927e32f3c274bee23396966c08fe7",
      "commitAuthorOld": "Steven Caswell",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Date round(Date date, int field) {\n    if (date \u003d\u003d null) {\n        throw new IllegalArgumentException(\"The date must not be null\");\n    }\n    Calendar gval \u003d Calendar.getInstance();\n    gval.setTime(date);\n    modify(gval, field, true);\n    return gval.getTime();\n}",
      "path": "src/java/org/apache/commons/lang/time/DateUtils.java",
      "functionStartLine": 144,
      "functionName": "round",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eRound this date, leaving the field specified as the most\nsignificant field.\u003c/p\u003e\n\n\u003cp\u003eFor example, if you had the datetime of 28 Mar 2002\n13:45:01.231, if this was passed with HOUR, it would return\n28 Mar 2002 14:00:00.000. If this was passed with MONTH, it\nwould return 1 April 2002 0:00:00.000.\u003c/p\u003e\n\n\u003cp\u003eFor a date in a timezone that handles the change to daylight\nsaving time, rounding to Calendar.HOUR_OF_DAY will behave as follows.\nSuppose daylight saving time begins at 02:00 on March 30. Rounding a \ndate that crosses this time would produce the following values:\n\u003cul\u003e\n\u003cli\u003eMarch 30, 2003 01:10 rounds to March 30, 2003 01:00\u003c/li\u003e\n\u003cli\u003eMarch 30, 2003 01:40 rounds to March 30, 2003 03:00\u003c/li\u003e\n\u003cli\u003eMarch 30, 2003 02:10 rounds to March 30, 2003 03:00\u003c/li\u003e\n\u003cli\u003eMarch 30, 2003 02:40 rounds to March 30, 2003 04:00\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\n@param date the date to work with\n@param field the field from \u003ccode\u003eCalendar\u003c/code\u003e\n or \u003ccode\u003eSEMI_MONTH\u003c/code\u003e\n@return the rounded date\n@throws IllegalArgumentException if the date is \u003ccode\u003enull\u003c/code\u003e\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "\u003cp\u003eRound this date, leaving the field specified as the most\nsignificant field.\u003c/p\u003e\n\n\u003cp\u003eFor example, if you had the datetime of 28 Mar 2002\n13:45:01.231, if this was passed with HOUR, it would return\n28 Mar 2002 14:00:00.000. If this was passed with MONTH, it\nwould return 1 April 2002 0:00:00.000.\u003c/p\u003e\n\n\u003cp\u003eFor a date in a timezone that handles the change to daylight\nsaving time, roudning to Calendar.HOUR_OF_DAY will behave as follows.\nSuppose daylight saving time begins at 02:00 on March 30. Rounding a \ndate that crosses this time would produce the following values:\n\u003cul\u003e\n\u003cli\u003eMarch 30, 2003 01:10 rounds to March 30, 2003 01:00\u003c/li\u003e\n\u003cli\u003eMarch 30, 2003 01:40 rounds to March 30, 2003 03:00\u003c/li\u003e\n\u003cli\u003eMarch 30, 2003 02:10 rounds to March 30, 2003 03:00\u003c/li\u003e\n\u003cli\u003eMarch 30, 2003 02:40 rounds to March 30, 2003 04:00\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\n@param date the date to work with\n@param field the field from \u003ccode\u003eCalendar\u003c/code\u003e\n or \u003ccode\u003eSEMI_MONTH\u003c/code\u003e\n@return the rounded date\n@throws IllegalArgumentException if the date is \u003ccode\u003enull\u003c/code\u003e\n",
        "newValue": "\u003cp\u003eRound this date, leaving the field specified as the most\nsignificant field.\u003c/p\u003e\n\n\u003cp\u003eFor example, if you had the datetime of 28 Mar 2002\n13:45:01.231, if this was passed with HOUR, it would return\n28 Mar 2002 14:00:00.000. If this was passed with MONTH, it\nwould return 1 April 2002 0:00:00.000.\u003c/p\u003e\n\n\u003cp\u003eFor a date in a timezone that handles the change to daylight\nsaving time, rounding to Calendar.HOUR_OF_DAY will behave as follows.\nSuppose daylight saving time begins at 02:00 on March 30. Rounding a \ndate that crosses this time would produce the following values:\n\u003cul\u003e\n\u003cli\u003eMarch 30, 2003 01:10 rounds to March 30, 2003 01:00\u003c/li\u003e\n\u003cli\u003eMarch 30, 2003 01:40 rounds to March 30, 2003 03:00\u003c/li\u003e\n\u003cli\u003eMarch 30, 2003 02:10 rounds to March 30, 2003 03:00\u003c/li\u003e\n\u003cli\u003eMarch 30, 2003 02:40 rounds to March 30, 2003 04:00\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\n@param date the date to work with\n@param field the field from \u003ccode\u003eCalendar\u003c/code\u003e\n or \u003ccode\u003eSEMI_MONTH\u003c/code\u003e\n@return the rounded date\n@throws IllegalArgumentException if the date is \u003ccode\u003enull\u003c/code\u003e\n"
      }
    },
    "823fa853932927e32f3c274bee23396966c08fe7": {
      "type": "Ydocchange",
      "commitMessage": "changed modify method to calculate the field offset and use the set method, rather than adding the offset and letting Calendar perform the calculation - this fixes http://issues.apache.org/bugzilla/show_bug.cgi?id\u003d25560;\nupdated javadocs on round method to explain how rounding across daylight saving time is handled\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137866 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/5/04, 10:54 AM",
      "commitName": "823fa853932927e32f3c274bee23396966c08fe7",
      "commitAuthor": "Steven Caswell",
      "commitDateOld": "6/26/04, 11:29 PM",
      "commitNameOld": "6f4a8a2d8a4cb26c95fbccfaf402ca10d48bc9ea",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 8.48,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Date round(Date date, int field) {\n    if (date \u003d\u003d null) {\n        throw new IllegalArgumentException(\"The date must not be null\");\n    }\n    Calendar gval \u003d Calendar.getInstance();\n    gval.setTime(date);\n    modify(gval, field, true);\n    return gval.getTime();\n}",
      "path": "src/java/org/apache/commons/lang/time/DateUtils.java",
      "functionStartLine": 144,
      "functionName": "round",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eRound this date, leaving the field specified as the most\nsignificant field.\u003c/p\u003e\n\n\u003cp\u003eFor example, if you had the datetime of 28 Mar 2002\n13:45:01.231, if this was passed with HOUR, it would return\n28 Mar 2002 14:00:00.000. If this was passed with MONTH, it\nwould return 1 April 2002 0:00:00.000.\u003c/p\u003e\n\n\u003cp\u003eFor a date in a timezone that handles the change to daylight\nsaving time, roudning to Calendar.HOUR_OF_DAY will behave as follows.\nSuppose daylight saving time begins at 02:00 on March 30. Rounding a \ndate that crosses this time would produce the following values:\n\u003cul\u003e\n\u003cli\u003eMarch 30, 2003 01:10 rounds to March 30, 2003 01:00\u003c/li\u003e\n\u003cli\u003eMarch 30, 2003 01:40 rounds to March 30, 2003 03:00\u003c/li\u003e\n\u003cli\u003eMarch 30, 2003 02:10 rounds to March 30, 2003 03:00\u003c/li\u003e\n\u003cli\u003eMarch 30, 2003 02:40 rounds to March 30, 2003 04:00\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\n@param date the date to work with\n@param field the field from \u003ccode\u003eCalendar\u003c/code\u003e\n or \u003ccode\u003eSEMI_MONTH\u003c/code\u003e\n@return the rounded date\n@throws IllegalArgumentException if the date is \u003ccode\u003enull\u003c/code\u003e\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "\u003cp\u003eRound this date, leaving the field specified as the most\nsignificant field.\u003c/p\u003e\n\n\u003cp\u003eFor example, if you had the datetime of 28 Mar 2002\n13:45:01.231, if this was passed with HOUR, it would return\n28 Mar 2002 14:00:00.000. If this was passed with MONTH, it\nwould return 1 April 2002 0:00:00.000.\u003c/p\u003e\n\n@param date the date to work with\n@param field the field from \u003ccode\u003eCalendar\u003c/code\u003e\n or \u003ccode\u003eSEMI_MONTH\u003c/code\u003e\n@return the rounded date\n@throws IllegalArgumentException if the date is \u003ccode\u003enull\u003c/code\u003e\n",
        "newValue": "\u003cp\u003eRound this date, leaving the field specified as the most\nsignificant field.\u003c/p\u003e\n\n\u003cp\u003eFor example, if you had the datetime of 28 Mar 2002\n13:45:01.231, if this was passed with HOUR, it would return\n28 Mar 2002 14:00:00.000. If this was passed with MONTH, it\nwould return 1 April 2002 0:00:00.000.\u003c/p\u003e\n\n\u003cp\u003eFor a date in a timezone that handles the change to daylight\nsaving time, roudning to Calendar.HOUR_OF_DAY will behave as follows.\nSuppose daylight saving time begins at 02:00 on March 30. Rounding a \ndate that crosses this time would produce the following values:\n\u003cul\u003e\n\u003cli\u003eMarch 30, 2003 01:10 rounds to March 30, 2003 01:00\u003c/li\u003e\n\u003cli\u003eMarch 30, 2003 01:40 rounds to March 30, 2003 03:00\u003c/li\u003e\n\u003cli\u003eMarch 30, 2003 02:10 rounds to March 30, 2003 03:00\u003c/li\u003e\n\u003cli\u003eMarch 30, 2003 02:40 rounds to March 30, 2003 04:00\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\n@param date the date to work with\n@param field the field from \u003ccode\u003eCalendar\u003c/code\u003e\n or \u003ccode\u003eSEMI_MONTH\u003c/code\u003e\n@return the rounded date\n@throws IllegalArgumentException if the date is \u003ccode\u003enull\u003c/code\u003e\n"
      }
    },
    "6f4a8a2d8a4cb26c95fbccfaf402ca10d48bc9ea": {
      "type": "Ybodychange",
      "commitMessage": "flipped from being hardcoded to GregorianCalendar to using getInstance. Cannot think of any reason why a GregorianCalendar was being created directly\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137855 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/26/04, 11:29 PM",
      "commitName": "6f4a8a2d8a4cb26c95fbccfaf402ca10d48bc9ea",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "2/18/04, 3:06 PM",
      "commitNameOld": "a6c9528cd88adee314a3bf2d0f66c3938906503f",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 129.31,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Date round(Date date, int field) {\n    if (date \u003d\u003d null) {\n        throw new IllegalArgumentException(\"The date must not be null\");\n    }\n    Calendar gval \u003d Calendar.getInstance();\n    gval.setTime(date);\n    modify(gval, field, true);\n    return gval.getTime();\n}",
      "path": "src/java/org/apache/commons/lang/time/DateUtils.java",
      "functionStartLine": 132,
      "functionName": "round",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eRound this date, leaving the field specified as the most\nsignificant field.\u003c/p\u003e\n\n\u003cp\u003eFor example, if you had the datetime of 28 Mar 2002\n13:45:01.231, if this was passed with HOUR, it would return\n28 Mar 2002 14:00:00.000. If this was passed with MONTH, it\nwould return 1 April 2002 0:00:00.000.\u003c/p\u003e\n\n@param date the date to work with\n@param field the field from \u003ccode\u003eCalendar\u003c/code\u003e\n or \u003ccode\u003eSEMI_MONTH\u003c/code\u003e\n@return the rounded date\n@throws IllegalArgumentException if the date is \u003ccode\u003enull\u003c/code\u003e\n",
      "diff": "@@ -1,9 +1,9 @@\n public static Date round(Date date, int field) {\n     if (date \u003d\u003d null) {\n         throw new IllegalArgumentException(\"The date must not be null\");\n     }\n-    GregorianCalendar gval \u003d new GregorianCalendar();\n+    Calendar gval \u003d Calendar.getInstance();\n     gval.setTime(date);\n     modify(gval, field, true);\n     return gval.getTime();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c66659d62dbf69d4c1ccc5c9c50938273436c1b3": {
      "type": "Ydocchange",
      "commitMessage": "Javadoc fixes. Shouldn\u0027t have been anything other than javadoc changes in this.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137416 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/14/03, 3:25 PM",
      "commitName": "c66659d62dbf69d4c1ccc5c9c50938273436c1b3",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "6/28/03, 10:49 AM",
      "commitNameOld": "a10e65e0001a05deba86ac42bdbf145e7179856c",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 16.19,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Date round(Date date, int field) {\n    if (date \u003d\u003d null) {\n        throw new IllegalArgumentException(\"The date must not be null\");\n    }\n    GregorianCalendar gval \u003d new GregorianCalendar();\n    gval.setTime(date);\n    modify(gval, field, true);\n    return gval.getTime();\n}",
      "path": "src/java/org/apache/commons/lang/time/DateUtils.java",
      "functionStartLine": 182,
      "functionName": "round",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eRound this date, leaving the field specified as the most\nsignificant field.\u003c/p\u003e\n\n\u003cp\u003eFor example, if you had the datetime of 28 Mar 2002\n13:45:01.231, if this was passed with HOUR, it would return\n28 Mar 2002 14:00:00.000. If this was passed with MONTH, it\nwould return 1 April 2002 0:00:00.000.\u003c/p\u003e\n\n@param date the date to work with\n@param field the field from \u003ccode\u003eCalendar\u003c/code\u003e\n or \u003ccode\u003eSEMI_MONTH\u003c/code\u003e\n@return the rounded date\n@throws IllegalArgumentException if the date is \u003ccode\u003enull\u003c/code\u003e\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Round this date, leaving the field specified as the most significant\nfield.  For example, if you had the datetime of 28 Mar 2002\n13:45:01.231, if this was passed with HOUR, it would return 28 Mar\n2002 14:00:00.000.  If this was passed with MONTH, it would return\n1 April 2002 0:00:00.000.\n\n@param date the date to work with\n@param field the field from \u003ccode\u003eCalendar\u003c/code\u003e or SEMI_MONTH\n@return the rounded date\n@throws IllegalArgumentException if the date is null\n",
        "newValue": "\u003cp\u003eRound this date, leaving the field specified as the most\nsignificant field.\u003c/p\u003e\n\n\u003cp\u003eFor example, if you had the datetime of 28 Mar 2002\n13:45:01.231, if this was passed with HOUR, it would return\n28 Mar 2002 14:00:00.000. If this was passed with MONTH, it\nwould return 1 April 2002 0:00:00.000.\u003c/p\u003e\n\n@param date the date to work with\n@param field the field from \u003ccode\u003eCalendar\u003c/code\u003e\n or \u003ccode\u003eSEMI_MONTH\u003c/code\u003e\n@return the rounded date\n@throws IllegalArgumentException if the date is \u003ccode\u003enull\u003c/code\u003e\n"
      }
    },
    "63ab3ece1b17a371aa265574dd79ee7104b46921": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "Prepare DateUtils for 2.0 release\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137375 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/23/03, 4:41 PM",
      "commitName": "63ab3ece1b17a371aa265574dd79ee7104b46921",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prepare DateUtils for 2.0 release\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137375 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "6/23/03, 4:41 PM",
          "commitName": "63ab3ece1b17a371aa265574dd79ee7104b46921",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "6/8/03, 4:14 PM",
          "commitNameOld": "9839566cf0eb6d299a61d6354522d6f65ab83af3",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 15.02,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "actualSource": "public static Date round(Date date, int field) {\n    if (date \u003d\u003d null) {\n        throw new IllegalArgumentException(\"The date must not be null\");\n    }\n    GregorianCalendar gval \u003d new GregorianCalendar();\n    gval.setTime(date);\n    modify(gval, field, true);\n    return gval.getTime();\n}",
          "path": "src/java/org/apache/commons/lang/time/DateUtils.java",
          "functionStartLine": 177,
          "functionName": "round",
          "functionAnnotation": "",
          "functionDoc": "Round this date, leaving the field specified as the most significant\nfield.  For example, if you had the datetime of 28 Mar 2002\n13:45:01.231, if this was passed with HOUR, it would return 28 Mar\n2002 14:00:00.000.  If this was passed with MONTH, it would return\n1 April 2002 0:00:00.000.\n\n@param date the date to work with\n@param field the field from \u003ccode\u003eCalendar\u003c/code\u003e or SEMI_MONTH\n@return the rounded date\n@throws IllegalArgumentException if the date is null\n",
          "diff": "@@ -1,9 +1,9 @@\n-public static Date round(Object val, int field) {\n-    if (val instanceof Date) {\n-        return round((Date) val, field);\n-    } else if (val instanceof Calendar) {\n-        return round((Calendar) val, field).getTime();\n-    } else {\n-        throw new ClassCastException(\"Could not round \" + val);\n+public static Date round(Date date, int field) {\n+    if (date \u003d\u003d null) {\n+        throw new IllegalArgumentException(\"The date must not be null\");\n     }\n+    GregorianCalendar gval \u003d new GregorianCalendar();\n+    gval.setTime(date);\n+    modify(gval, field, true);\n+    return gval.getTime();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[val-Object, field-int]",
            "newValue": "[date-Date, field-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prepare DateUtils for 2.0 release\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137375 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "6/23/03, 4:41 PM",
          "commitName": "63ab3ece1b17a371aa265574dd79ee7104b46921",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "6/8/03, 4:14 PM",
          "commitNameOld": "9839566cf0eb6d299a61d6354522d6f65ab83af3",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 15.02,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "actualSource": "public static Date round(Date date, int field) {\n    if (date \u003d\u003d null) {\n        throw new IllegalArgumentException(\"The date must not be null\");\n    }\n    GregorianCalendar gval \u003d new GregorianCalendar();\n    gval.setTime(date);\n    modify(gval, field, true);\n    return gval.getTime();\n}",
          "path": "src/java/org/apache/commons/lang/time/DateUtils.java",
          "functionStartLine": 177,
          "functionName": "round",
          "functionAnnotation": "",
          "functionDoc": "Round this date, leaving the field specified as the most significant\nfield.  For example, if you had the datetime of 28 Mar 2002\n13:45:01.231, if this was passed with HOUR, it would return 28 Mar\n2002 14:00:00.000.  If this was passed with MONTH, it would return\n1 April 2002 0:00:00.000.\n\n@param date the date to work with\n@param field the field from \u003ccode\u003eCalendar\u003c/code\u003e or SEMI_MONTH\n@return the rounded date\n@throws IllegalArgumentException if the date is null\n",
          "diff": "@@ -1,9 +1,9 @@\n-public static Date round(Object val, int field) {\n-    if (val instanceof Date) {\n-        return round((Date) val, field);\n-    } else if (val instanceof Calendar) {\n-        return round((Calendar) val, field).getTime();\n-    } else {\n-        throw new ClassCastException(\"Could not round \" + val);\n+public static Date round(Date date, int field) {\n+    if (date \u003d\u003d null) {\n+        throw new IllegalArgumentException(\"The date must not be null\");\n     }\n+    GregorianCalendar gval \u003d new GregorianCalendar();\n+    gval.setTime(date);\n+    modify(gval, field, true);\n+    return gval.getTime();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Prepare DateUtils for 2.0 release\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137375 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "6/23/03, 4:41 PM",
          "commitName": "63ab3ece1b17a371aa265574dd79ee7104b46921",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "6/8/03, 4:14 PM",
          "commitNameOld": "9839566cf0eb6d299a61d6354522d6f65ab83af3",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 15.02,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "actualSource": "public static Date round(Date date, int field) {\n    if (date \u003d\u003d null) {\n        throw new IllegalArgumentException(\"The date must not be null\");\n    }\n    GregorianCalendar gval \u003d new GregorianCalendar();\n    gval.setTime(date);\n    modify(gval, field, true);\n    return gval.getTime();\n}",
          "path": "src/java/org/apache/commons/lang/time/DateUtils.java",
          "functionStartLine": 177,
          "functionName": "round",
          "functionAnnotation": "",
          "functionDoc": "Round this date, leaving the field specified as the most significant\nfield.  For example, if you had the datetime of 28 Mar 2002\n13:45:01.231, if this was passed with HOUR, it would return 28 Mar\n2002 14:00:00.000.  If this was passed with MONTH, it would return\n1 April 2002 0:00:00.000.\n\n@param date the date to work with\n@param field the field from \u003ccode\u003eCalendar\u003c/code\u003e or SEMI_MONTH\n@return the rounded date\n@throws IllegalArgumentException if the date is null\n",
          "diff": "@@ -1,9 +1,9 @@\n-public static Date round(Object val, int field) {\n-    if (val instanceof Date) {\n-        return round((Date) val, field);\n-    } else if (val instanceof Calendar) {\n-        return round((Calendar) val, field).getTime();\n-    } else {\n-        throw new ClassCastException(\"Could not round \" + val);\n+public static Date round(Date date, int field) {\n+    if (date \u003d\u003d null) {\n+        throw new IllegalArgumentException(\"The date must not be null\");\n     }\n+    GregorianCalendar gval \u003d new GregorianCalendar();\n+    gval.setTime(date);\n+    modify(gval, field, true);\n+    return gval.getTime();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "See the other round method.  Works with an Object, trying to\nuse it as either a Date or Calendar.\n",
            "newValue": "Round this date, leaving the field specified as the most significant\nfield.  For example, if you had the datetime of 28 Mar 2002\n13:45:01.231, if this was passed with HOUR, it would return 28 Mar\n2002 14:00:00.000.  If this was passed with MONTH, it would return\n1 April 2002 0:00:00.000.\n\n@param date the date to work with\n@param field the field from \u003ccode\u003eCalendar\u003c/code\u003e or SEMI_MONTH\n@return the rounded date\n@throws IllegalArgumentException if the date is null\n"
          }
        }
      ]
    },
    "9839566cf0eb6d299a61d6354522d6f65ab83af3": {
      "type": "Ymovefromfile",
      "commitMessage": "Rework time package in preparation for 2.0 release\nDateUtils split to DateFormatUtils and DurationFormatUtils\nCalendarUtils renamed to DateUtils\nStopWatch time format method moved to DurationFormatUtils\nTests updated and pass\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137361 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/8/03, 4:14 PM",
      "commitName": "9839566cf0eb6d299a61d6354522d6f65ab83af3",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "6/8/03, 7:19 AM",
      "commitNameOld": "18b614c14626fedade91a7c534a9cf7eeccbb17a",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.37,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Date round(Object val, int field) {\n    if (val instanceof Date) {\n        return round((Date) val, field);\n    } else if (val instanceof Calendar) {\n        return round((Calendar) val, field).getTime();\n    } else {\n        throw new ClassCastException(\"Could not round \" + val);\n    }\n}",
      "path": "src/java/org/apache/commons/lang/time/DateUtils.java",
      "functionStartLine": 180,
      "functionName": "round",
      "functionAnnotation": "",
      "functionDoc": "See the other round method.  Works with an Object, trying to\nuse it as either a Date or Calendar.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/lang/time/CalendarUtils.java",
        "newPath": "src/java/org/apache/commons/lang/time/DateUtils.java",
        "oldMethodName": "round",
        "newMethodName": "round"
      }
    },
    "6400026ca238c10b5864f278777745851ba0e4c0": {
      "type": "Yfilerename",
      "commitMessage": "Create time subpackage\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137194 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/18/02, 3:30 PM",
      "commitName": "6400026ca238c10b5864f278777745851ba0e4c0",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "12/18/02, 3:28 PM",
      "commitNameOld": "338c0e3370fd11f830d2a3b8346d80965c1f1c3e",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Date round(Object val, int field) {\n    if (val instanceof Date) {\n        return round((Date) val, field);\n    } else if (val instanceof Calendar) {\n        return round((Calendar) val, field).getTime();\n    } else {\n        throw new ClassCastException(\"Could not round \" + val);\n    }\n}",
      "path": "src/java/org/apache/commons/lang/time/CalendarUtils.java",
      "functionStartLine": 148,
      "functionName": "round",
      "functionAnnotation": "",
      "functionDoc": "See the other round method.  Works with an Object, trying to\nuse it as either a Date or Calendar.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/lang/CalendarUtils.java",
        "newPath": "src/java/org/apache/commons/lang/time/CalendarUtils.java"
      }
    },
    "4dcba82f4fce40bf0ad7a74ade88e59e99252a49": {
      "type": "Yintroduced",
      "commitMessage": "CalendarUtils from the sandbox, for merger with DateUtils. Or parallel living.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137190 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/16/02, 1:55 PM",
      "commitName": "4dcba82f4fce40bf0ad7a74ade88e59e99252a49",
      "commitAuthor": "Henri Yandell",
      "diff": "@@ -0,0 +1,9 @@\n+public static Date round(Object val, int field) {\n+    if (val instanceof Date) {\n+        return round((Date) val, field);\n+    } else if (val instanceof Calendar) {\n+        return round((Calendar) val, field).getTime();\n+    } else {\n+        throw new ClassCastException(\"Could not round \" + val);\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "public static Date round(Object val, int field) {\n    if (val instanceof Date) {\n        return round((Date) val, field);\n    } else if (val instanceof Calendar) {\n        return round((Calendar) val, field).getTime();\n    } else {\n        throw new ClassCastException(\"Could not round \" + val);\n    }\n}",
      "path": "src/java/org/apache/commons/lang/CalendarUtils.java",
      "functionStartLine": 148,
      "functionName": "round",
      "functionAnnotation": "",
      "functionDoc": "See the other round method.  Works with an Object, trying to\nuse it as either a Date or Calendar.\n"
    }
  }
}