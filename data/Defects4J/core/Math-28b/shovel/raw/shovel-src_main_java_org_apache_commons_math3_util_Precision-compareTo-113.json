{
  "origin": "codeshovel",
  "repositoryName": "Math-28b",
  "repositoryPath": "/tmp/Math-28b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Precision.java",
  "functionName": "compareTo",
  "functionId": "compareTo___x-double(modifiers-final)__y-double(modifiers-final)__maxUlps-int(modifiers-final)",
  "sourceFilePath": "src/main/java/org/apache/commons/math3/util/Precision.java",
  "functionAnnotation": "",
  "functionDoc": "Compares two numbers given some amount of allowed error.\nTwo float numbers are considered equal if there are {@code (maxUlps - 1)}\n(or fewer) floating point numbers between them, i.e. two adjacent floating\npoint numbers are considered equal.\nAdapted from \u003ca\nhref\u003d\"http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm\"\u003e\nBruce Dawson\u003c/a\u003e\n\n@param x first value\n@param y second value\n@param maxUlps @code (maxUlps - 1)} is the number of floating point\nvalues between {@code x} and {@code y}.\n@return \u003cul\u003e\u003cli\u003e0 if  {@link #equals(double, double, int) equals(x, y, maxUlps)}\u003c/li\u003e\n      \u003cli\u003e\u0026lt; 0 if !{@link #equals(double, double, int) equals(x, y, maxUlps)} \u0026amp;\u0026amp; x \u0026lt; y\u003c/li\u003e\n      \u003cli\u003e\u003e 0 if !{@link #equals(double, double, int) equals(x, y, maxUlps)} \u0026amp;\u0026amp; x \u003e y\u003c/li\u003e\u003c/ul\u003e\n",
  "functionStartLine": 113,
  "functionEndLine": 120,
  "numCommitsSeen": 91,
  "timeTaken": 15113,
  "changeHistory": [
    "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd",
    "b59e97464fc8d910c06b90c06598d7176ce1924a",
    "edf9205a6dc8c634985fa2f0e07a7ef598881fd9"
  ],
  "changeHistoryShort": {
    "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd": "Ymovefromfile",
    "b59e97464fc8d910c06b90c06598d7176ce1924a": "Ymovefromfile",
    "edf9205a6dc8c634985fa2f0e07a7ef598881fd9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd": {
      "type": "Ymovefromfile",
      "commitMessage": "MATH-444\nBase package name change: \"o.a.c.math\" -\u003e \"o.a.c.math3\"\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1244107 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/14/12, 8:17 AM",
      "commitName": "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd",
      "commitAuthor": "Gilles Sadowski",
      "commitDateOld": "2/14/12, 6:34 AM",
      "commitNameOld": "53257329dd394be1333b38bae787bf0cf19dc900",
      "commitAuthorOld": "Gilles Sadowski",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static int compareTo(final double x, final double y, final int maxUlps) {\n    if (equals(x, y, maxUlps)) {\n        return 0;\n    } else if (x \u003c y) {\n        return -1;\n    }\n    return 1;\n}",
      "path": "src/main/java/org/apache/commons/math3/util/Precision.java",
      "functionStartLine": 90,
      "functionName": "compareTo",
      "functionAnnotation": "",
      "functionDoc": "Compares two numbers given some amount of allowed error.\nTwo float numbers are considered equal if there are {@code (maxUlps - 1)}\n(or fewer) floating point numbers between them, i.e. two adjacent floating\npoint numbers are considered equal.\nAdapted from \u003ca\nhref\u003d\"http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm\"\u003e\nBruce Dawson\u003c/a\u003e\n\n@param x first value\n@param y second value\n@param maxUlps @code (maxUlps - 1)} is the number of floating point\nvalues between {@code x} and {@code y}.\n@return \u003cul\u003e\u003cli\u003e0 if  {@link #equals(double, double, int) equals(x, y, maxUlps)}\u003c/li\u003e\n      \u003cli\u003e\u0026lt; 0 if !{@link #equals(double, double, int) equals(x, y, maxUlps)} \u0026amp;\u0026amp; x \u0026lt; y\u003c/li\u003e\n      \u003cli\u003e\u003e 0 if !{@link #equals(double, double, int) equals(x, y, maxUlps)} \u0026amp;\u0026amp; x \u003e y\u003c/li\u003e\u003c/ul\u003e\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/main/java/org/apache/commons/math/util/Precision.java",
        "newPath": "src/main/java/org/apache/commons/math3/util/Precision.java",
        "oldMethodName": "compareTo",
        "newMethodName": "compareTo"
      }
    },
    "b59e97464fc8d910c06b90c06598d7176ce1924a": {
      "type": "Ymovefromfile",
      "commitMessage": "MATH-689\nMoved \"equals...\" and \"compareTo\" methods from \"MathUtils\" over to a new\n\"Precision\" class.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1181282 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/10/11, 3:35 PM",
      "commitName": "b59e97464fc8d910c06b90c06598d7176ce1924a",
      "commitAuthor": "Gilles Sadowski",
      "commitDateOld": "10/10/11, 2:20 PM",
      "commitNameOld": "e24e9c1cf7e76ffb4d76c1ad541833a9b32ced5a",
      "commitAuthorOld": "Gilles Sadowski",
      "daysBetweenCommits": 0.05,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static int compareTo(final double x, final double y, final int maxUlps) {\n    if (equals(x, y, maxUlps)) {\n        return 0;\n    } else if (x \u003c y) {\n        return -1;\n    }\n    return 1;\n}",
      "path": "src/main/java/org/apache/commons/math/util/Precision.java",
      "functionStartLine": 74,
      "functionName": "compareTo",
      "functionAnnotation": "",
      "functionDoc": "Compares two numbers given some amount of allowed error.\nTwo float numbers are considered equal if there are {@code (maxUlps - 1)}\n(or fewer) floating point numbers between them, i.e. two adjacent floating\npoint numbers are considered equal.\nAdapted from \u003ca\nhref\u003d\"http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm\"\u003e\nBruce Dawson\u003c/a\u003e\n\n@param x first value\n@param y second value\n@param maxUlps @code (maxUlps - 1)} is the number of floating point\nvalues between {@code x} and {@code y}.\n@return \u003cul\u003e\u003cli\u003e0 if  {@link #equals(double, double, int) equals(x, y, maxUlps)}\u003c/li\u003e\n      \u003cli\u003e\u0026lt; 0 if !{@link #equals(double, double, int) equals(x, y, maxUlps)} \u0026amp;\u0026amp; x \u0026lt; y\u003c/li\u003e\n      \u003cli\u003e\u003e 0 if !{@link #equals(double, double, int) equals(x, y, maxUlps)} \u0026amp;\u0026amp; x \u003e y\u003c/li\u003e\u003c/ul\u003e\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "newPath": "src/main/java/org/apache/commons/math/util/Precision.java",
        "oldMethodName": "compareTo",
        "newMethodName": "compareTo"
      }
    },
    "edf9205a6dc8c634985fa2f0e07a7ef598881fd9": {
      "type": "Yintroduced",
      "commitMessage": "Added a compareTo method to MathUtils that uses a number of ulps as a tolerance error, and works well on all numbers, including normals, subnormals, signed zeroes, infinities and NaNs\n\nJira: MATH-557\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1090820 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/10/11, 8:56 AM",
      "commitName": "edf9205a6dc8c634985fa2f0e07a7ef598881fd9",
      "commitAuthor": "Luc Maisonobe",
      "diff": "@@ -0,0 +1,8 @@\n+public static int compareTo(final double x, final double y, final int maxUlps) {\n+    if (equals(x, y, maxUlps)) {\n+        return 0;\n+    } else if (x \u003c y) {\n+        return -1;\n+    }\n+    return 1;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public static int compareTo(final double x, final double y, final int maxUlps) {\n    if (equals(x, y, maxUlps)) {\n        return 0;\n    } else if (x \u003c y) {\n        return -1;\n    }\n    return 1;\n}",
      "path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
      "functionStartLine": 425,
      "functionName": "compareTo",
      "functionAnnotation": "",
      "functionDoc": "Compares two numbers given some amount of allowed error.\nTwo float numbers are considered equal if there are {@code (maxUlps - 1)}\n(or fewer) floating point numbers between them, i.e. two adjacent floating\npoint numbers are considered equal.\nAdapted from \u003ca\nhref\u003d\"http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm\"\u003e\nBruce Dawson\u003c/a\u003e\n\n@param x first value\n@param y second value\n@param maxUlps @code (maxUlps - 1)} is the number of floating point\nvalues between {@code x} and {@code y}.\n@return \u003cul\u003e\u003cli\u003e0 if  {@link #equals(double, double, int) equals(x, y, maxUlps)}\u003c/li\u003e\n      \u003cli\u003e\u0026lt; 0 if !{@link #equals(double, double, int) equals(x, y, maxUlps)} \u0026amp;\u0026amp; x \u0026lt; y\u003c/li\u003e\n      \u003cli\u003e\u003e 0 if !{@link #equals(double, double, int) equals(x, y, maxUlps)} \u0026amp;\u0026amp; x \u003e y\u003c/li\u003e\u003c/ul\u003e\n"
    }
  }
}