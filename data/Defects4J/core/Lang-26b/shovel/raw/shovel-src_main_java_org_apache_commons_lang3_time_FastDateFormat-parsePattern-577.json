{
  "origin": "codeshovel",
  "repositoryName": "Lang-26b",
  "repositoryPath": "/tmp/Lang-26b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FastDateFormat.java",
  "functionName": "parsePattern",
  "functionId": "parsePattern",
  "sourceFilePath": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
  "functionAnnotation": "",
  "functionDoc": "\u003cp\u003eReturns a list of Rules given a pattern.\u003c/p\u003e\n\n@return a \u003ccode\u003eList\u003c/code\u003e of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n",
  "functionStartLine": 577,
  "functionEndLine": 698,
  "numCommitsSeen": 55,
  "timeTaken": 3689,
  "changeHistory": [
    "b1686009b5494119575d43525b0829162ab79853",
    "586080851f6bca4d7aa84a7d307203ad8222407e",
    "b044272b6584ab5a6ac5a15b5baac0d585557db4",
    "1df3e07f73b1c68bf0537c15824734fb765321eb",
    "5e0cb6e46f53da3ee1dbc7d786adae226210993b",
    "c66659d62dbf69d4c1ccc5c9c50938273436c1b3",
    "9839566cf0eb6d299a61d6354522d6f65ab83af3",
    "87ea5b31fffed5eec72593130df81e49b0401bf2",
    "d3015ae73bfbf0ee970199cd6a1e073fbfd9c7ef",
    "e794af9688ae2dee664864be0d128df9a88509ba"
  ],
  "changeHistoryShort": {
    "b1686009b5494119575d43525b0829162ab79853": "Yfilerename",
    "586080851f6bca4d7aa84a7d307203ad8222407e": "Yfilerename",
    "b044272b6584ab5a6ac5a15b5baac0d585557db4": "Ymultichange(Yreturntypechange,Ybodychange)",
    "1df3e07f73b1c68bf0537c15824734fb765321eb": "Ybodychange",
    "5e0cb6e46f53da3ee1dbc7d786adae226210993b": "Ybodychange",
    "c66659d62dbf69d4c1ccc5c9c50938273436c1b3": "Ydocchange",
    "9839566cf0eb6d299a61d6354522d6f65ab83af3": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange,Ydocchange)",
    "87ea5b31fffed5eec72593130df81e49b0401bf2": "Ymultichange(Ydocchange,Yformatchange)",
    "d3015ae73bfbf0ee970199cd6a1e073fbfd9c7ef": "Yformatchange",
    "e794af9688ae2dee664864be0d128df9a88509ba": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b1686009b5494119575d43525b0829162ab79853": {
      "type": "Yfilerename",
      "commitMessage": "Move main source to src/main/java\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@895322 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/2/10, 6:11 PM",
      "commitName": "b1686009b5494119575d43525b0829162ab79853",
      "commitAuthor": "Paul C. Benedict Jr",
      "commitDateOld": "1/2/10, 6:09 PM",
      "commitNameOld": "1f725a97e73edd27301e889408832b34a3d69e63",
      "commitAuthorOld": "Paul C. Benedict Jr",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected List\u003cRule\u003e parsePattern() {\n    DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n    List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n    String[] ERAs \u003d symbols.getEras();\n    String[] months \u003d symbols.getMonths();\n    String[] shortMonths \u003d symbols.getShortMonths();\n    String[] weekdays \u003d symbols.getWeekdays();\n    String[] shortWeekdays \u003d symbols.getShortWeekdays();\n    String[] AmPmStrings \u003d symbols.getAmPmStrings();\n    int length \u003d mPattern.length();\n    int[] indexRef \u003d new int[1];\n    for (int i \u003d 0; i \u003c length; i++) {\n        indexRef[0] \u003d i;\n        String token \u003d parseToken(mPattern, indexRef);\n        i \u003d indexRef[0];\n        int tokenLen \u003d token.length();\n        if (tokenLen \u003d\u003d 0) {\n            break;\n        }\n        Rule rule;\n        char c \u003d token.charAt(0);\n        switch(c) {\n            case \u0027G\u0027:\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d selectNumberRule(Calendar.YEAR, tokenLen);\n                } else {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case \u0027M\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027:\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027:\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027:\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027:\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027:\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027:\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027:\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027z\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027:\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027:\n                String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}",
      "path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
      "functionStartLine": 577,
      "functionName": "parsePattern",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eReturns a list of Rules given a pattern.\u003c/p\u003e\n\n@return a \u003ccode\u003eList\u003c/code\u003e of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "newPath": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java"
      }
    },
    "586080851f6bca4d7aa84a7d307203ad8222407e": {
      "type": "Yfilerename",
      "commitMessage": "Changing directory name from lang to lang3. Build will fail (probably) until Java code is changed in subsequent commit. LANG-563\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@889202 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/10/09, 3:33 AM",
      "commitName": "586080851f6bca4d7aa84a7d307203ad8222407e",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "12/10/09, 3:31 AM",
      "commitNameOld": "da479d635f66c1f82a1f858591cfb1b9941457ae",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected List\u003cRule\u003e parsePattern() {\n    DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n    List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n    String[] ERAs \u003d symbols.getEras();\n    String[] months \u003d symbols.getMonths();\n    String[] shortMonths \u003d symbols.getShortMonths();\n    String[] weekdays \u003d symbols.getWeekdays();\n    String[] shortWeekdays \u003d symbols.getShortWeekdays();\n    String[] AmPmStrings \u003d symbols.getAmPmStrings();\n    int length \u003d mPattern.length();\n    int[] indexRef \u003d new int[1];\n    for (int i \u003d 0; i \u003c length; i++) {\n        indexRef[0] \u003d i;\n        String token \u003d parseToken(mPattern, indexRef);\n        i \u003d indexRef[0];\n        int tokenLen \u003d token.length();\n        if (tokenLen \u003d\u003d 0) {\n            break;\n        }\n        Rule rule;\n        char c \u003d token.charAt(0);\n        switch(c) {\n            case \u0027G\u0027:\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d selectNumberRule(Calendar.YEAR, tokenLen);\n                } else {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case \u0027M\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027:\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027:\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027:\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027:\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027:\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027:\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027:\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027z\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027:\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027:\n                String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}",
      "path": "src/java/org/apache/commons/lang3/time/FastDateFormat.java",
      "functionStartLine": 577,
      "functionName": "parsePattern",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eReturns a list of Rules given a pattern.\u003c/p\u003e\n\n@return a \u003ccode\u003eList\u003c/code\u003e of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "newPath": "src/java/org/apache/commons/lang3/time/FastDateFormat.java"
      }
    },
    "b044272b6584ab5a6ac5a15b5baac0d585557db4": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "Genericize some more classes\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@754810 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/15/09, 8:35 PM",
      "commitName": "b044272b6584ab5a6ac5a15b5baac0d585557db4",
      "commitAuthor": "Sebastian Bazley",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "Genericize some more classes\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@754810 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "3/15/09, 8:35 PM",
          "commitName": "b044272b6584ab5a6ac5a15b5baac0d585557db4",
          "commitAuthor": "Sebastian Bazley",
          "commitDateOld": "3/14/09, 7:57 AM",
          "commitNameOld": "06372160be086fb78817a837837ac646a2189543",
          "commitAuthorOld": "Sebastian Bazley",
          "daysBetweenCommits": 1.53,
          "commitsBetweenForRepo": 47,
          "commitsBetweenForFile": 1,
          "actualSource": "protected List\u003cRule\u003e parsePattern() {\n    DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n    List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n    String[] ERAs \u003d symbols.getEras();\n    String[] months \u003d symbols.getMonths();\n    String[] shortMonths \u003d symbols.getShortMonths();\n    String[] weekdays \u003d symbols.getWeekdays();\n    String[] shortWeekdays \u003d symbols.getShortWeekdays();\n    String[] AmPmStrings \u003d symbols.getAmPmStrings();\n    int length \u003d mPattern.length();\n    int[] indexRef \u003d new int[1];\n    for (int i \u003d 0; i \u003c length; i++) {\n        indexRef[0] \u003d i;\n        String token \u003d parseToken(mPattern, indexRef);\n        i \u003d indexRef[0];\n        int tokenLen \u003d token.length();\n        if (tokenLen \u003d\u003d 0) {\n            break;\n        }\n        Rule rule;\n        char c \u003d token.charAt(0);\n        switch(c) {\n            case \u0027G\u0027:\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d selectNumberRule(Calendar.YEAR, tokenLen);\n                } else {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case \u0027M\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027:\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027:\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027:\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027:\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027:\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027:\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027:\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027z\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027:\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027:\n                String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}",
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
          "functionStartLine": 577,
          "functionName": "parsePattern",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eReturns a list of Rules given a pattern.\u003c/p\u003e\n\n@return a \u003ccode\u003eList\u003c/code\u003e of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n",
          "diff": "@@ -1,114 +1,114 @@\n-protected List parsePattern() {\n+protected List\u003cRule\u003e parsePattern() {\n     DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n-    List rules \u003d new ArrayList();\n+    List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n     String[] ERAs \u003d symbols.getEras();\n     String[] months \u003d symbols.getMonths();\n     String[] shortMonths \u003d symbols.getShortMonths();\n     String[] weekdays \u003d symbols.getWeekdays();\n     String[] shortWeekdays \u003d symbols.getShortWeekdays();\n     String[] AmPmStrings \u003d symbols.getAmPmStrings();\n     int length \u003d mPattern.length();\n     int[] indexRef \u003d new int[1];\n     for (int i \u003d 0; i \u003c length; i++) {\n         indexRef[0] \u003d i;\n         String token \u003d parseToken(mPattern, indexRef);\n         i \u003d indexRef[0];\n         int tokenLen \u003d token.length();\n         if (tokenLen \u003d\u003d 0) {\n             break;\n         }\n         Rule rule;\n         char c \u003d token.charAt(0);\n         switch(c) {\n             case \u0027G\u0027:\n                 rule \u003d new TextField(Calendar.ERA, ERAs);\n                 break;\n             case \u0027y\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d selectNumberRule(Calendar.YEAR, tokenLen);\n                 } else {\n                     rule \u003d TwoDigitYearField.INSTANCE;\n                 }\n                 break;\n             case \u0027M\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen \u003d\u003d 3) {\n                     rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitMonthField.INSTANCE;\n                 } else {\n                     rule \u003d UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case \u0027d\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case \u0027h\u0027:\n                 rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case \u0027H\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case \u0027m\u0027:\n                 rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case \u0027s\u0027:\n                 rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case \u0027S\u0027:\n                 rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case \u0027E\u0027:\n                 rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                 break;\n             case \u0027D\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case \u0027F\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case \u0027w\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case \u0027W\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case \u0027a\u0027:\n                 rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case \u0027k\u0027:\n                 rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case \u0027K\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case \u0027z\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                 } else {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                 }\n                 break;\n             case \u0027Z\u0027:\n                 if (tokenLen \u003d\u003d 1) {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                 } else {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case \u0027\\\u0027\u0027:\n                 String sub \u003d token.substring(1);\n                 if (sub.length() \u003d\u003d 1) {\n                     rule \u003d new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule \u003d new StringLiteral(sub);\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n         }\n         rules.add(rule);\n     }\n     return rules;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "List",
            "newValue": "List\u003cRule\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Genericize some more classes\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@754810 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "3/15/09, 8:35 PM",
          "commitName": "b044272b6584ab5a6ac5a15b5baac0d585557db4",
          "commitAuthor": "Sebastian Bazley",
          "commitDateOld": "3/14/09, 7:57 AM",
          "commitNameOld": "06372160be086fb78817a837837ac646a2189543",
          "commitAuthorOld": "Sebastian Bazley",
          "daysBetweenCommits": 1.53,
          "commitsBetweenForRepo": 47,
          "commitsBetweenForFile": 1,
          "actualSource": "protected List\u003cRule\u003e parsePattern() {\n    DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n    List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n    String[] ERAs \u003d symbols.getEras();\n    String[] months \u003d symbols.getMonths();\n    String[] shortMonths \u003d symbols.getShortMonths();\n    String[] weekdays \u003d symbols.getWeekdays();\n    String[] shortWeekdays \u003d symbols.getShortWeekdays();\n    String[] AmPmStrings \u003d symbols.getAmPmStrings();\n    int length \u003d mPattern.length();\n    int[] indexRef \u003d new int[1];\n    for (int i \u003d 0; i \u003c length; i++) {\n        indexRef[0] \u003d i;\n        String token \u003d parseToken(mPattern, indexRef);\n        i \u003d indexRef[0];\n        int tokenLen \u003d token.length();\n        if (tokenLen \u003d\u003d 0) {\n            break;\n        }\n        Rule rule;\n        char c \u003d token.charAt(0);\n        switch(c) {\n            case \u0027G\u0027:\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d selectNumberRule(Calendar.YEAR, tokenLen);\n                } else {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case \u0027M\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027:\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027:\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027:\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027:\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027:\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027:\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027:\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027z\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027:\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027:\n                String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}",
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
          "functionStartLine": 577,
          "functionName": "parsePattern",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eReturns a list of Rules given a pattern.\u003c/p\u003e\n\n@return a \u003ccode\u003eList\u003c/code\u003e of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n",
          "diff": "@@ -1,114 +1,114 @@\n-protected List parsePattern() {\n+protected List\u003cRule\u003e parsePattern() {\n     DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n-    List rules \u003d new ArrayList();\n+    List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n     String[] ERAs \u003d symbols.getEras();\n     String[] months \u003d symbols.getMonths();\n     String[] shortMonths \u003d symbols.getShortMonths();\n     String[] weekdays \u003d symbols.getWeekdays();\n     String[] shortWeekdays \u003d symbols.getShortWeekdays();\n     String[] AmPmStrings \u003d symbols.getAmPmStrings();\n     int length \u003d mPattern.length();\n     int[] indexRef \u003d new int[1];\n     for (int i \u003d 0; i \u003c length; i++) {\n         indexRef[0] \u003d i;\n         String token \u003d parseToken(mPattern, indexRef);\n         i \u003d indexRef[0];\n         int tokenLen \u003d token.length();\n         if (tokenLen \u003d\u003d 0) {\n             break;\n         }\n         Rule rule;\n         char c \u003d token.charAt(0);\n         switch(c) {\n             case \u0027G\u0027:\n                 rule \u003d new TextField(Calendar.ERA, ERAs);\n                 break;\n             case \u0027y\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d selectNumberRule(Calendar.YEAR, tokenLen);\n                 } else {\n                     rule \u003d TwoDigitYearField.INSTANCE;\n                 }\n                 break;\n             case \u0027M\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen \u003d\u003d 3) {\n                     rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitMonthField.INSTANCE;\n                 } else {\n                     rule \u003d UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case \u0027d\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case \u0027h\u0027:\n                 rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case \u0027H\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case \u0027m\u0027:\n                 rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case \u0027s\u0027:\n                 rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case \u0027S\u0027:\n                 rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case \u0027E\u0027:\n                 rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                 break;\n             case \u0027D\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case \u0027F\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case \u0027w\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case \u0027W\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case \u0027a\u0027:\n                 rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case \u0027k\u0027:\n                 rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case \u0027K\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case \u0027z\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                 } else {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                 }\n                 break;\n             case \u0027Z\u0027:\n                 if (tokenLen \u003d\u003d 1) {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                 } else {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case \u0027\\\u0027\u0027:\n                 String sub \u003d token.substring(1);\n                 if (sub.length() \u003d\u003d 1) {\n                     rule \u003d new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule \u003d new StringLiteral(sub);\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n         }\n         rules.add(rule);\n     }\n     return rules;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "1df3e07f73b1c68bf0537c15824734fb765321eb": {
      "type": "Ybodychange",
      "commitMessage": "Fix for zero-padding of years.\n\nA commented out set of failing tests are added to the Unit Test and need to be addressed.\n\nSubmitted by:\tJerson Chua\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137932 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/11/04, 10:03 PM",
      "commitName": "1df3e07f73b1c68bf0537c15824734fb765321eb",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "7/5/04, 3:37 PM",
      "commitNameOld": "c2003e4aa91120db3b91cdc659aded992bc68f58",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 68.27,
      "commitsBetweenForRepo": 61,
      "commitsBetweenForFile": 1,
      "actualSource": "protected List parsePattern() {\n    DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n    List rules \u003d new ArrayList();\n    String[] ERAs \u003d symbols.getEras();\n    String[] months \u003d symbols.getMonths();\n    String[] shortMonths \u003d symbols.getShortMonths();\n    String[] weekdays \u003d symbols.getWeekdays();\n    String[] shortWeekdays \u003d symbols.getShortWeekdays();\n    String[] AmPmStrings \u003d symbols.getAmPmStrings();\n    int length \u003d mPattern.length();\n    int[] indexRef \u003d new int[1];\n    for (int i \u003d 0; i \u003c length; i++) {\n        indexRef[0] \u003d i;\n        String token \u003d parseToken(mPattern, indexRef);\n        i \u003d indexRef[0];\n        int tokenLen \u003d token.length();\n        if (tokenLen \u003d\u003d 0) {\n            break;\n        }\n        Rule rule;\n        char c \u003d token.charAt(0);\n        switch(c) {\n            case \u0027G\u0027:\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d selectNumberRule(Calendar.YEAR, tokenLen);\n                } else {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case \u0027M\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027:\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027:\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027:\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027:\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027:\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027:\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027:\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027z\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027:\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027:\n                String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}",
      "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
      "functionStartLine": 561,
      "functionName": "parsePattern",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eReturns a list of Rules given a pattern.\u003c/p\u003e\n\n@return a \u003ccode\u003eList\u003c/code\u003e of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n",
      "diff": "@@ -1,114 +1,114 @@\n protected List parsePattern() {\n     DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n     List rules \u003d new ArrayList();\n     String[] ERAs \u003d symbols.getEras();\n     String[] months \u003d symbols.getMonths();\n     String[] shortMonths \u003d symbols.getShortMonths();\n     String[] weekdays \u003d symbols.getWeekdays();\n     String[] shortWeekdays \u003d symbols.getShortWeekdays();\n     String[] AmPmStrings \u003d symbols.getAmPmStrings();\n     int length \u003d mPattern.length();\n     int[] indexRef \u003d new int[1];\n     for (int i \u003d 0; i \u003c length; i++) {\n         indexRef[0] \u003d i;\n         String token \u003d parseToken(mPattern, indexRef);\n         i \u003d indexRef[0];\n         int tokenLen \u003d token.length();\n         if (tokenLen \u003d\u003d 0) {\n             break;\n         }\n         Rule rule;\n         char c \u003d token.charAt(0);\n         switch(c) {\n             case \u0027G\u0027:\n                 rule \u003d new TextField(Calendar.ERA, ERAs);\n                 break;\n             case \u0027y\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n-                    rule \u003d UnpaddedNumberField.INSTANCE_YEAR;\n+                    rule \u003d selectNumberRule(Calendar.YEAR, tokenLen);\n                 } else {\n                     rule \u003d TwoDigitYearField.INSTANCE;\n                 }\n                 break;\n             case \u0027M\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen \u003d\u003d 3) {\n                     rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitMonthField.INSTANCE;\n                 } else {\n                     rule \u003d UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case \u0027d\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case \u0027h\u0027:\n                 rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case \u0027H\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case \u0027m\u0027:\n                 rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case \u0027s\u0027:\n                 rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case \u0027S\u0027:\n                 rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case \u0027E\u0027:\n                 rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                 break;\n             case \u0027D\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case \u0027F\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case \u0027w\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case \u0027W\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case \u0027a\u0027:\n                 rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case \u0027k\u0027:\n                 rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case \u0027K\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case \u0027z\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                 } else {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                 }\n                 break;\n             case \u0027Z\u0027:\n                 if (tokenLen \u003d\u003d 1) {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                 } else {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case \u0027\\\u0027\u0027:\n                 String sub \u003d token.substring(1);\n                 if (sub.length() \u003d\u003d 1) {\n                     rule \u003d new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule \u003d new StringLiteral(sub);\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n         }\n         rules.add(rule);\n     }\n     return rules;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5e0cb6e46f53da3ee1dbc7d786adae226210993b": {
      "type": "Ybodychange",
      "commitMessage": "Remove unneeded String constructor as found by findBugs\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137495 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/25/03, 3:53 PM",
      "commitName": "5e0cb6e46f53da3ee1dbc7d786adae226210993b",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "7/21/03, 5:09 PM",
      "commitNameOld": "1ef6ff31f40d2db947688df9862f20bcd63e3611",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 3.95,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "protected List parsePattern() {\n    DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n    List rules \u003d new ArrayList();\n    String[] ERAs \u003d symbols.getEras();\n    String[] months \u003d symbols.getMonths();\n    String[] shortMonths \u003d symbols.getShortMonths();\n    String[] weekdays \u003d symbols.getWeekdays();\n    String[] shortWeekdays \u003d symbols.getShortWeekdays();\n    String[] AmPmStrings \u003d symbols.getAmPmStrings();\n    int length \u003d mPattern.length();\n    int[] indexRef \u003d new int[1];\n    for (int i \u003d 0; i \u003c length; i++) {\n        indexRef[0] \u003d i;\n        String token \u003d parseToken(mPattern, indexRef);\n        i \u003d indexRef[0];\n        int tokenLen \u003d token.length();\n        if (tokenLen \u003d\u003d 0) {\n            break;\n        }\n        Rule rule;\n        char c \u003d token.charAt(0);\n        switch(c) {\n            case \u0027G\u0027:\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d UnpaddedNumberField.INSTANCE_YEAR;\n                } else {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case \u0027M\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027:\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027:\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027:\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027:\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027:\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027:\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027:\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027z\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027:\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027:\n                String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}",
      "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
      "functionStartLine": 465,
      "functionName": "parsePattern",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eReturns a list of Rules given a pattern.\u003c/p\u003e\n\n@return a \u003ccode\u003eList\u003c/code\u003e of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n",
      "diff": "@@ -1,114 +1,114 @@\n protected List parsePattern() {\n     DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n     List rules \u003d new ArrayList();\n     String[] ERAs \u003d symbols.getEras();\n     String[] months \u003d symbols.getMonths();\n     String[] shortMonths \u003d symbols.getShortMonths();\n     String[] weekdays \u003d symbols.getWeekdays();\n     String[] shortWeekdays \u003d symbols.getShortWeekdays();\n     String[] AmPmStrings \u003d symbols.getAmPmStrings();\n     int length \u003d mPattern.length();\n     int[] indexRef \u003d new int[1];\n     for (int i \u003d 0; i \u003c length; i++) {\n         indexRef[0] \u003d i;\n         String token \u003d parseToken(mPattern, indexRef);\n         i \u003d indexRef[0];\n         int tokenLen \u003d token.length();\n         if (tokenLen \u003d\u003d 0) {\n             break;\n         }\n         Rule rule;\n         char c \u003d token.charAt(0);\n         switch(c) {\n             case \u0027G\u0027:\n                 rule \u003d new TextField(Calendar.ERA, ERAs);\n                 break;\n             case \u0027y\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d UnpaddedNumberField.INSTANCE_YEAR;\n                 } else {\n                     rule \u003d TwoDigitYearField.INSTANCE;\n                 }\n                 break;\n             case \u0027M\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen \u003d\u003d 3) {\n                     rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitMonthField.INSTANCE;\n                 } else {\n                     rule \u003d UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case \u0027d\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case \u0027h\u0027:\n                 rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case \u0027H\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case \u0027m\u0027:\n                 rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case \u0027s\u0027:\n                 rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case \u0027S\u0027:\n                 rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case \u0027E\u0027:\n                 rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                 break;\n             case \u0027D\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case \u0027F\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case \u0027w\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case \u0027W\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case \u0027a\u0027:\n                 rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case \u0027k\u0027:\n                 rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case \u0027K\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case \u0027z\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                 } else {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                 }\n                 break;\n             case \u0027Z\u0027:\n                 if (tokenLen \u003d\u003d 1) {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                 } else {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case \u0027\\\u0027\u0027:\n                 String sub \u003d token.substring(1);\n                 if (sub.length() \u003d\u003d 1) {\n                     rule \u003d new CharacterLiteral(sub.charAt(0));\n                 } else {\n-                    rule \u003d new StringLiteral(new String(sub));\n+                    rule \u003d new StringLiteral(sub);\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n         }\n         rules.add(rule);\n     }\n     return rules;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c66659d62dbf69d4c1ccc5c9c50938273436c1b3": {
      "type": "Ydocchange",
      "commitMessage": "Javadoc fixes. Shouldn\u0027t have been anything other than javadoc changes in this.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137416 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/14/03, 3:25 PM",
      "commitName": "c66659d62dbf69d4c1ccc5c9c50938273436c1b3",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "7/12/03, 1:26 AM",
      "commitNameOld": "ebadc9d7d2cc78511ba6d9d50b4e3ba4f6d78f0b",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 2.58,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "protected List parsePattern() {\n    DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n    List rules \u003d new ArrayList();\n    String[] ERAs \u003d symbols.getEras();\n    String[] months \u003d symbols.getMonths();\n    String[] shortMonths \u003d symbols.getShortMonths();\n    String[] weekdays \u003d symbols.getWeekdays();\n    String[] shortWeekdays \u003d symbols.getShortWeekdays();\n    String[] AmPmStrings \u003d symbols.getAmPmStrings();\n    int length \u003d mPattern.length();\n    int[] indexRef \u003d new int[1];\n    for (int i \u003d 0; i \u003c length; i++) {\n        indexRef[0] \u003d i;\n        String token \u003d parseToken(mPattern, indexRef);\n        i \u003d indexRef[0];\n        int tokenLen \u003d token.length();\n        if (tokenLen \u003d\u003d 0) {\n            break;\n        }\n        Rule rule;\n        char c \u003d token.charAt(0);\n        switch(c) {\n            case \u0027G\u0027:\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d UnpaddedNumberField.INSTANCE_YEAR;\n                } else {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case \u0027M\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027:\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027:\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027:\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027:\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027:\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027:\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027:\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027z\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027:\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027:\n                String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(new String(sub));\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}",
      "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
      "functionStartLine": 459,
      "functionName": "parsePattern",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eReturns a list of Rules given a pattern.\u003c/p\u003e\n\n@return a \u003ccode\u003eList\u003c/code\u003e of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Returns a list of Rules given a pattern.\n\n@return a List of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n",
        "newValue": "\u003cp\u003eReturns a list of Rules given a pattern.\u003c/p\u003e\n\n@return a \u003ccode\u003eList\u003c/code\u003e of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n"
      }
    },
    "9839566cf0eb6d299a61d6354522d6f65ab83af3": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange,Ydocchange)",
      "commitMessage": "Rework time package in preparation for 2.0 release\nDateUtils split to DateFormatUtils and DurationFormatUtils\nCalendarUtils renamed to DateUtils\nStopWatch time format method moved to DurationFormatUtils\nTests updated and pass\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137361 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/8/03, 4:14 PM",
      "commitName": "9839566cf0eb6d299a61d6354522d6f65ab83af3",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "Rework time package in preparation for 2.0 release\nDateUtils split to DateFormatUtils and DurationFormatUtils\nCalendarUtils renamed to DateUtils\nStopWatch time format method moved to DurationFormatUtils\nTests updated and pass\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137361 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "6/8/03, 4:14 PM",
          "commitName": "9839566cf0eb6d299a61d6354522d6f65ab83af3",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "5/21/03, 4:39 PM",
          "commitNameOld": "87ea5b31fffed5eec72593130df81e49b0401bf2",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 17.98,
          "commitsBetweenForRepo": 35,
          "commitsBetweenForFile": 1,
          "actualSource": "protected List parsePattern() {\n    DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n    List rules \u003d new ArrayList();\n    String[] ERAs \u003d symbols.getEras();\n    String[] months \u003d symbols.getMonths();\n    String[] shortMonths \u003d symbols.getShortMonths();\n    String[] weekdays \u003d symbols.getWeekdays();\n    String[] shortWeekdays \u003d symbols.getShortWeekdays();\n    String[] AmPmStrings \u003d symbols.getAmPmStrings();\n    int length \u003d mPattern.length();\n    int[] indexRef \u003d new int[1];\n    for (int i \u003d 0; i \u003c length; i++) {\n        indexRef[0] \u003d i;\n        String token \u003d parseToken(mPattern, indexRef);\n        i \u003d indexRef[0];\n        int tokenLen \u003d token.length();\n        if (tokenLen \u003d\u003d 0) {\n            break;\n        }\n        Rule rule;\n        char c \u003d token.charAt(0);\n        switch(c) {\n            case \u0027G\u0027:\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d UnpaddedNumberField.INSTANCE_YEAR;\n                } else {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case \u0027M\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027:\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027:\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027:\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027:\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027:\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027:\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027:\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027z\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027:\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027:\n                String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(new String(sub));\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}",
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
          "functionStartLine": 409,
          "functionName": "parsePattern",
          "functionAnnotation": "",
          "functionDoc": "Returns a list of Rules given a pattern.\n\n@return a List of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n",
          "diff": "@@ -1,106 +1,114 @@\n-private static List parse(String pattern, TimeZone timeZone, Locale locale, DateFormatSymbols symbols) {\n+protected List parsePattern() {\n+    DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n     List rules \u003d new ArrayList();\n     String[] ERAs \u003d symbols.getEras();\n     String[] months \u003d symbols.getMonths();\n     String[] shortMonths \u003d symbols.getShortMonths();\n     String[] weekdays \u003d symbols.getWeekdays();\n     String[] shortWeekdays \u003d symbols.getShortWeekdays();\n     String[] AmPmStrings \u003d symbols.getAmPmStrings();\n-    int length \u003d pattern.length();\n+    int length \u003d mPattern.length();\n     int[] indexRef \u003d new int[1];\n     for (int i \u003d 0; i \u003c length; i++) {\n         indexRef[0] \u003d i;\n-        String token \u003d parseToken(pattern, indexRef);\n+        String token \u003d parseToken(mPattern, indexRef);\n         i \u003d indexRef[0];\n         int tokenLen \u003d token.length();\n         if (tokenLen \u003d\u003d 0) {\n             break;\n         }\n         Rule rule;\n         char c \u003d token.charAt(0);\n         switch(c) {\n             case \u0027G\u0027:\n                 rule \u003d new TextField(Calendar.ERA, ERAs);\n                 break;\n             case \u0027y\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n-                    rule \u003d new UnpaddedNumberField(Calendar.YEAR);\n+                    rule \u003d UnpaddedNumberField.INSTANCE_YEAR;\n                 } else {\n-                    rule \u003d new TwoDigitYearField();\n+                    rule \u003d TwoDigitYearField.INSTANCE;\n                 }\n                 break;\n             case \u0027M\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen \u003d\u003d 3) {\n                     rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen \u003d\u003d 2) {\n-                    rule \u003d new TwoDigitMonthField();\n+                    rule \u003d TwoDigitMonthField.INSTANCE;\n                 } else {\n-                    rule \u003d new UnpaddedMonthField();\n+                    rule \u003d UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case \u0027d\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case \u0027h\u0027:\n                 rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case \u0027H\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case \u0027m\u0027:\n                 rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case \u0027s\u0027:\n                 rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case \u0027S\u0027:\n                 rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case \u0027E\u0027:\n                 rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                 break;\n             case \u0027D\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case \u0027F\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case \u0027w\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case \u0027W\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case \u0027a\u0027:\n                 rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case \u0027k\u0027:\n                 rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case \u0027K\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case \u0027z\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n-                    rule \u003d new TimeZoneRule(timeZone, locale, TimeZone.LONG);\n+                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                 } else {\n-                    rule \u003d new TimeZoneRule(timeZone, locale, TimeZone.SHORT);\n+                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n+                }\n+                break;\n+            case \u0027Z\u0027:\n+                if (tokenLen \u003d\u003d 1) {\n+                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n+                } else {\n+                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case \u0027\\\u0027\u0027:\n                 String sub \u003d token.substring(1);\n                 if (sub.length() \u003d\u003d 1) {\n                     rule \u003d new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule \u003d new StringLiteral(new String(sub));\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n         }\n         rules.add(rule);\n     }\n     return rules;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "parse",
            "newValue": "parsePattern"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "Rework time package in preparation for 2.0 release\nDateUtils split to DateFormatUtils and DurationFormatUtils\nCalendarUtils renamed to DateUtils\nStopWatch time format method moved to DurationFormatUtils\nTests updated and pass\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137361 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "6/8/03, 4:14 PM",
          "commitName": "9839566cf0eb6d299a61d6354522d6f65ab83af3",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "5/21/03, 4:39 PM",
          "commitNameOld": "87ea5b31fffed5eec72593130df81e49b0401bf2",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 17.98,
          "commitsBetweenForRepo": 35,
          "commitsBetweenForFile": 1,
          "actualSource": "protected List parsePattern() {\n    DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n    List rules \u003d new ArrayList();\n    String[] ERAs \u003d symbols.getEras();\n    String[] months \u003d symbols.getMonths();\n    String[] shortMonths \u003d symbols.getShortMonths();\n    String[] weekdays \u003d symbols.getWeekdays();\n    String[] shortWeekdays \u003d symbols.getShortWeekdays();\n    String[] AmPmStrings \u003d symbols.getAmPmStrings();\n    int length \u003d mPattern.length();\n    int[] indexRef \u003d new int[1];\n    for (int i \u003d 0; i \u003c length; i++) {\n        indexRef[0] \u003d i;\n        String token \u003d parseToken(mPattern, indexRef);\n        i \u003d indexRef[0];\n        int tokenLen \u003d token.length();\n        if (tokenLen \u003d\u003d 0) {\n            break;\n        }\n        Rule rule;\n        char c \u003d token.charAt(0);\n        switch(c) {\n            case \u0027G\u0027:\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d UnpaddedNumberField.INSTANCE_YEAR;\n                } else {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case \u0027M\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027:\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027:\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027:\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027:\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027:\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027:\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027:\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027z\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027:\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027:\n                String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(new String(sub));\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}",
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
          "functionStartLine": 409,
          "functionName": "parsePattern",
          "functionAnnotation": "",
          "functionDoc": "Returns a list of Rules given a pattern.\n\n@return a List of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n",
          "diff": "@@ -1,106 +1,114 @@\n-private static List parse(String pattern, TimeZone timeZone, Locale locale, DateFormatSymbols symbols) {\n+protected List parsePattern() {\n+    DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n     List rules \u003d new ArrayList();\n     String[] ERAs \u003d symbols.getEras();\n     String[] months \u003d symbols.getMonths();\n     String[] shortMonths \u003d symbols.getShortMonths();\n     String[] weekdays \u003d symbols.getWeekdays();\n     String[] shortWeekdays \u003d symbols.getShortWeekdays();\n     String[] AmPmStrings \u003d symbols.getAmPmStrings();\n-    int length \u003d pattern.length();\n+    int length \u003d mPattern.length();\n     int[] indexRef \u003d new int[1];\n     for (int i \u003d 0; i \u003c length; i++) {\n         indexRef[0] \u003d i;\n-        String token \u003d parseToken(pattern, indexRef);\n+        String token \u003d parseToken(mPattern, indexRef);\n         i \u003d indexRef[0];\n         int tokenLen \u003d token.length();\n         if (tokenLen \u003d\u003d 0) {\n             break;\n         }\n         Rule rule;\n         char c \u003d token.charAt(0);\n         switch(c) {\n             case \u0027G\u0027:\n                 rule \u003d new TextField(Calendar.ERA, ERAs);\n                 break;\n             case \u0027y\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n-                    rule \u003d new UnpaddedNumberField(Calendar.YEAR);\n+                    rule \u003d UnpaddedNumberField.INSTANCE_YEAR;\n                 } else {\n-                    rule \u003d new TwoDigitYearField();\n+                    rule \u003d TwoDigitYearField.INSTANCE;\n                 }\n                 break;\n             case \u0027M\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen \u003d\u003d 3) {\n                     rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen \u003d\u003d 2) {\n-                    rule \u003d new TwoDigitMonthField();\n+                    rule \u003d TwoDigitMonthField.INSTANCE;\n                 } else {\n-                    rule \u003d new UnpaddedMonthField();\n+                    rule \u003d UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case \u0027d\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case \u0027h\u0027:\n                 rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case \u0027H\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case \u0027m\u0027:\n                 rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case \u0027s\u0027:\n                 rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case \u0027S\u0027:\n                 rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case \u0027E\u0027:\n                 rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                 break;\n             case \u0027D\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case \u0027F\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case \u0027w\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case \u0027W\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case \u0027a\u0027:\n                 rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case \u0027k\u0027:\n                 rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case \u0027K\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case \u0027z\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n-                    rule \u003d new TimeZoneRule(timeZone, locale, TimeZone.LONG);\n+                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                 } else {\n-                    rule \u003d new TimeZoneRule(timeZone, locale, TimeZone.SHORT);\n+                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n+                }\n+                break;\n+            case \u0027Z\u0027:\n+                if (tokenLen \u003d\u003d 1) {\n+                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n+                } else {\n+                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case \u0027\\\u0027\u0027:\n                 String sub \u003d token.substring(1);\n                 if (sub.length() \u003d\u003d 1) {\n                     rule \u003d new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule \u003d new StringLiteral(new String(sub));\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n         }\n         rules.add(rule);\n     }\n     return rules;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[pattern-String, timeZone-TimeZone, locale-Locale, symbols-DateFormatSymbols]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Rework time package in preparation for 2.0 release\nDateUtils split to DateFormatUtils and DurationFormatUtils\nCalendarUtils renamed to DateUtils\nStopWatch time format method moved to DurationFormatUtils\nTests updated and pass\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137361 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "6/8/03, 4:14 PM",
          "commitName": "9839566cf0eb6d299a61d6354522d6f65ab83af3",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "5/21/03, 4:39 PM",
          "commitNameOld": "87ea5b31fffed5eec72593130df81e49b0401bf2",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 17.98,
          "commitsBetweenForRepo": 35,
          "commitsBetweenForFile": 1,
          "actualSource": "protected List parsePattern() {\n    DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n    List rules \u003d new ArrayList();\n    String[] ERAs \u003d symbols.getEras();\n    String[] months \u003d symbols.getMonths();\n    String[] shortMonths \u003d symbols.getShortMonths();\n    String[] weekdays \u003d symbols.getWeekdays();\n    String[] shortWeekdays \u003d symbols.getShortWeekdays();\n    String[] AmPmStrings \u003d symbols.getAmPmStrings();\n    int length \u003d mPattern.length();\n    int[] indexRef \u003d new int[1];\n    for (int i \u003d 0; i \u003c length; i++) {\n        indexRef[0] \u003d i;\n        String token \u003d parseToken(mPattern, indexRef);\n        i \u003d indexRef[0];\n        int tokenLen \u003d token.length();\n        if (tokenLen \u003d\u003d 0) {\n            break;\n        }\n        Rule rule;\n        char c \u003d token.charAt(0);\n        switch(c) {\n            case \u0027G\u0027:\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d UnpaddedNumberField.INSTANCE_YEAR;\n                } else {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case \u0027M\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027:\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027:\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027:\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027:\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027:\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027:\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027:\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027z\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027:\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027:\n                String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(new String(sub));\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}",
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
          "functionStartLine": 409,
          "functionName": "parsePattern",
          "functionAnnotation": "",
          "functionDoc": "Returns a list of Rules given a pattern.\n\n@return a List of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n",
          "diff": "@@ -1,106 +1,114 @@\n-private static List parse(String pattern, TimeZone timeZone, Locale locale, DateFormatSymbols symbols) {\n+protected List parsePattern() {\n+    DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n     List rules \u003d new ArrayList();\n     String[] ERAs \u003d symbols.getEras();\n     String[] months \u003d symbols.getMonths();\n     String[] shortMonths \u003d symbols.getShortMonths();\n     String[] weekdays \u003d symbols.getWeekdays();\n     String[] shortWeekdays \u003d symbols.getShortWeekdays();\n     String[] AmPmStrings \u003d symbols.getAmPmStrings();\n-    int length \u003d pattern.length();\n+    int length \u003d mPattern.length();\n     int[] indexRef \u003d new int[1];\n     for (int i \u003d 0; i \u003c length; i++) {\n         indexRef[0] \u003d i;\n-        String token \u003d parseToken(pattern, indexRef);\n+        String token \u003d parseToken(mPattern, indexRef);\n         i \u003d indexRef[0];\n         int tokenLen \u003d token.length();\n         if (tokenLen \u003d\u003d 0) {\n             break;\n         }\n         Rule rule;\n         char c \u003d token.charAt(0);\n         switch(c) {\n             case \u0027G\u0027:\n                 rule \u003d new TextField(Calendar.ERA, ERAs);\n                 break;\n             case \u0027y\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n-                    rule \u003d new UnpaddedNumberField(Calendar.YEAR);\n+                    rule \u003d UnpaddedNumberField.INSTANCE_YEAR;\n                 } else {\n-                    rule \u003d new TwoDigitYearField();\n+                    rule \u003d TwoDigitYearField.INSTANCE;\n                 }\n                 break;\n             case \u0027M\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen \u003d\u003d 3) {\n                     rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen \u003d\u003d 2) {\n-                    rule \u003d new TwoDigitMonthField();\n+                    rule \u003d TwoDigitMonthField.INSTANCE;\n                 } else {\n-                    rule \u003d new UnpaddedMonthField();\n+                    rule \u003d UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case \u0027d\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case \u0027h\u0027:\n                 rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case \u0027H\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case \u0027m\u0027:\n                 rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case \u0027s\u0027:\n                 rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case \u0027S\u0027:\n                 rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case \u0027E\u0027:\n                 rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                 break;\n             case \u0027D\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case \u0027F\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case \u0027w\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case \u0027W\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case \u0027a\u0027:\n                 rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case \u0027k\u0027:\n                 rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case \u0027K\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case \u0027z\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n-                    rule \u003d new TimeZoneRule(timeZone, locale, TimeZone.LONG);\n+                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                 } else {\n-                    rule \u003d new TimeZoneRule(timeZone, locale, TimeZone.SHORT);\n+                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n+                }\n+                break;\n+            case \u0027Z\u0027:\n+                if (tokenLen \u003d\u003d 1) {\n+                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n+                } else {\n+                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case \u0027\\\u0027\u0027:\n                 String sub \u003d token.substring(1);\n                 if (sub.length() \u003d\u003d 1) {\n                     rule \u003d new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule \u003d new StringLiteral(new String(sub));\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n         }\n         rules.add(rule);\n     }\n     return rules;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[private, static]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Rework time package in preparation for 2.0 release\nDateUtils split to DateFormatUtils and DurationFormatUtils\nCalendarUtils renamed to DateUtils\nStopWatch time format method moved to DurationFormatUtils\nTests updated and pass\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137361 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "6/8/03, 4:14 PM",
          "commitName": "9839566cf0eb6d299a61d6354522d6f65ab83af3",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "5/21/03, 4:39 PM",
          "commitNameOld": "87ea5b31fffed5eec72593130df81e49b0401bf2",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 17.98,
          "commitsBetweenForRepo": 35,
          "commitsBetweenForFile": 1,
          "actualSource": "protected List parsePattern() {\n    DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n    List rules \u003d new ArrayList();\n    String[] ERAs \u003d symbols.getEras();\n    String[] months \u003d symbols.getMonths();\n    String[] shortMonths \u003d symbols.getShortMonths();\n    String[] weekdays \u003d symbols.getWeekdays();\n    String[] shortWeekdays \u003d symbols.getShortWeekdays();\n    String[] AmPmStrings \u003d symbols.getAmPmStrings();\n    int length \u003d mPattern.length();\n    int[] indexRef \u003d new int[1];\n    for (int i \u003d 0; i \u003c length; i++) {\n        indexRef[0] \u003d i;\n        String token \u003d parseToken(mPattern, indexRef);\n        i \u003d indexRef[0];\n        int tokenLen \u003d token.length();\n        if (tokenLen \u003d\u003d 0) {\n            break;\n        }\n        Rule rule;\n        char c \u003d token.charAt(0);\n        switch(c) {\n            case \u0027G\u0027:\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d UnpaddedNumberField.INSTANCE_YEAR;\n                } else {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case \u0027M\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027:\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027:\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027:\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027:\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027:\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027:\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027:\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027z\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027:\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027:\n                String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(new String(sub));\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}",
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
          "functionStartLine": 409,
          "functionName": "parsePattern",
          "functionAnnotation": "",
          "functionDoc": "Returns a list of Rules given a pattern.\n\n@return a List of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n",
          "diff": "@@ -1,106 +1,114 @@\n-private static List parse(String pattern, TimeZone timeZone, Locale locale, DateFormatSymbols symbols) {\n+protected List parsePattern() {\n+    DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n     List rules \u003d new ArrayList();\n     String[] ERAs \u003d symbols.getEras();\n     String[] months \u003d symbols.getMonths();\n     String[] shortMonths \u003d symbols.getShortMonths();\n     String[] weekdays \u003d symbols.getWeekdays();\n     String[] shortWeekdays \u003d symbols.getShortWeekdays();\n     String[] AmPmStrings \u003d symbols.getAmPmStrings();\n-    int length \u003d pattern.length();\n+    int length \u003d mPattern.length();\n     int[] indexRef \u003d new int[1];\n     for (int i \u003d 0; i \u003c length; i++) {\n         indexRef[0] \u003d i;\n-        String token \u003d parseToken(pattern, indexRef);\n+        String token \u003d parseToken(mPattern, indexRef);\n         i \u003d indexRef[0];\n         int tokenLen \u003d token.length();\n         if (tokenLen \u003d\u003d 0) {\n             break;\n         }\n         Rule rule;\n         char c \u003d token.charAt(0);\n         switch(c) {\n             case \u0027G\u0027:\n                 rule \u003d new TextField(Calendar.ERA, ERAs);\n                 break;\n             case \u0027y\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n-                    rule \u003d new UnpaddedNumberField(Calendar.YEAR);\n+                    rule \u003d UnpaddedNumberField.INSTANCE_YEAR;\n                 } else {\n-                    rule \u003d new TwoDigitYearField();\n+                    rule \u003d TwoDigitYearField.INSTANCE;\n                 }\n                 break;\n             case \u0027M\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen \u003d\u003d 3) {\n                     rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen \u003d\u003d 2) {\n-                    rule \u003d new TwoDigitMonthField();\n+                    rule \u003d TwoDigitMonthField.INSTANCE;\n                 } else {\n-                    rule \u003d new UnpaddedMonthField();\n+                    rule \u003d UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case \u0027d\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case \u0027h\u0027:\n                 rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case \u0027H\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case \u0027m\u0027:\n                 rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case \u0027s\u0027:\n                 rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case \u0027S\u0027:\n                 rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case \u0027E\u0027:\n                 rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                 break;\n             case \u0027D\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case \u0027F\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case \u0027w\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case \u0027W\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case \u0027a\u0027:\n                 rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case \u0027k\u0027:\n                 rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case \u0027K\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case \u0027z\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n-                    rule \u003d new TimeZoneRule(timeZone, locale, TimeZone.LONG);\n+                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                 } else {\n-                    rule \u003d new TimeZoneRule(timeZone, locale, TimeZone.SHORT);\n+                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n+                }\n+                break;\n+            case \u0027Z\u0027:\n+                if (tokenLen \u003d\u003d 1) {\n+                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n+                } else {\n+                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case \u0027\\\u0027\u0027:\n                 String sub \u003d token.substring(1);\n                 if (sub.length() \u003d\u003d 1) {\n                     rule \u003d new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule \u003d new StringLiteral(new String(sub));\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n         }\n         rules.add(rule);\n     }\n     return rules;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Rework time package in preparation for 2.0 release\nDateUtils split to DateFormatUtils and DurationFormatUtils\nCalendarUtils renamed to DateUtils\nStopWatch time format method moved to DurationFormatUtils\nTests updated and pass\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137361 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "6/8/03, 4:14 PM",
          "commitName": "9839566cf0eb6d299a61d6354522d6f65ab83af3",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "5/21/03, 4:39 PM",
          "commitNameOld": "87ea5b31fffed5eec72593130df81e49b0401bf2",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 17.98,
          "commitsBetweenForRepo": 35,
          "commitsBetweenForFile": 1,
          "actualSource": "protected List parsePattern() {\n    DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n    List rules \u003d new ArrayList();\n    String[] ERAs \u003d symbols.getEras();\n    String[] months \u003d symbols.getMonths();\n    String[] shortMonths \u003d symbols.getShortMonths();\n    String[] weekdays \u003d symbols.getWeekdays();\n    String[] shortWeekdays \u003d symbols.getShortWeekdays();\n    String[] AmPmStrings \u003d symbols.getAmPmStrings();\n    int length \u003d mPattern.length();\n    int[] indexRef \u003d new int[1];\n    for (int i \u003d 0; i \u003c length; i++) {\n        indexRef[0] \u003d i;\n        String token \u003d parseToken(mPattern, indexRef);\n        i \u003d indexRef[0];\n        int tokenLen \u003d token.length();\n        if (tokenLen \u003d\u003d 0) {\n            break;\n        }\n        Rule rule;\n        char c \u003d token.charAt(0);\n        switch(c) {\n            case \u0027G\u0027:\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d UnpaddedNumberField.INSTANCE_YEAR;\n                } else {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case \u0027M\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027:\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027:\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027:\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027:\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027:\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027:\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027:\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027z\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027:\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027:\n                String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(new String(sub));\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}",
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
          "functionStartLine": 409,
          "functionName": "parsePattern",
          "functionAnnotation": "",
          "functionDoc": "Returns a list of Rules given a pattern.\n\n@return a List of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n",
          "diff": "@@ -1,106 +1,114 @@\n-private static List parse(String pattern, TimeZone timeZone, Locale locale, DateFormatSymbols symbols) {\n+protected List parsePattern() {\n+    DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n     List rules \u003d new ArrayList();\n     String[] ERAs \u003d symbols.getEras();\n     String[] months \u003d symbols.getMonths();\n     String[] shortMonths \u003d symbols.getShortMonths();\n     String[] weekdays \u003d symbols.getWeekdays();\n     String[] shortWeekdays \u003d symbols.getShortWeekdays();\n     String[] AmPmStrings \u003d symbols.getAmPmStrings();\n-    int length \u003d pattern.length();\n+    int length \u003d mPattern.length();\n     int[] indexRef \u003d new int[1];\n     for (int i \u003d 0; i \u003c length; i++) {\n         indexRef[0] \u003d i;\n-        String token \u003d parseToken(pattern, indexRef);\n+        String token \u003d parseToken(mPattern, indexRef);\n         i \u003d indexRef[0];\n         int tokenLen \u003d token.length();\n         if (tokenLen \u003d\u003d 0) {\n             break;\n         }\n         Rule rule;\n         char c \u003d token.charAt(0);\n         switch(c) {\n             case \u0027G\u0027:\n                 rule \u003d new TextField(Calendar.ERA, ERAs);\n                 break;\n             case \u0027y\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n-                    rule \u003d new UnpaddedNumberField(Calendar.YEAR);\n+                    rule \u003d UnpaddedNumberField.INSTANCE_YEAR;\n                 } else {\n-                    rule \u003d new TwoDigitYearField();\n+                    rule \u003d TwoDigitYearField.INSTANCE;\n                 }\n                 break;\n             case \u0027M\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen \u003d\u003d 3) {\n                     rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen \u003d\u003d 2) {\n-                    rule \u003d new TwoDigitMonthField();\n+                    rule \u003d TwoDigitMonthField.INSTANCE;\n                 } else {\n-                    rule \u003d new UnpaddedMonthField();\n+                    rule \u003d UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case \u0027d\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case \u0027h\u0027:\n                 rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case \u0027H\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case \u0027m\u0027:\n                 rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case \u0027s\u0027:\n                 rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case \u0027S\u0027:\n                 rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case \u0027E\u0027:\n                 rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                 break;\n             case \u0027D\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case \u0027F\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case \u0027w\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case \u0027W\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case \u0027a\u0027:\n                 rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case \u0027k\u0027:\n                 rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case \u0027K\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case \u0027z\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n-                    rule \u003d new TimeZoneRule(timeZone, locale, TimeZone.LONG);\n+                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                 } else {\n-                    rule \u003d new TimeZoneRule(timeZone, locale, TimeZone.SHORT);\n+                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n+                }\n+                break;\n+            case \u0027Z\u0027:\n+                if (tokenLen \u003d\u003d 1) {\n+                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n+                } else {\n+                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case \u0027\\\u0027\u0027:\n                 String sub \u003d token.substring(1);\n                 if (sub.length() \u003d\u003d 1) {\n                     rule \u003d new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule \u003d new StringLiteral(new String(sub));\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n         }\n         rules.add(rule);\n     }\n     return rules;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Returns a list of Rules given a pattern.\n\n@param pattern the pattern to parse\n@param timeZone the time zone to use\n@param locale the locale to use\n@param symbols the symbols to use\n@return a List of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n",
            "newValue": "Returns a list of Rules given a pattern.\n\n@return a List of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n"
          }
        }
      ]
    },
    "87ea5b31fffed5eec72593130df81e49b0401bf2": {
      "type": "Ymultichange(Ydocchange,Yformatchange)",
      "commitMessage": "Update class and add javadoc ready for release\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137326 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/21/03, 4:39 PM",
      "commitName": "87ea5b31fffed5eec72593130df81e49b0401bf2",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Ydocchange",
          "commitMessage": "Update class and add javadoc ready for release\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137326 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "5/21/03, 4:39 PM",
          "commitName": "87ea5b31fffed5eec72593130df81e49b0401bf2",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "2/4/03, 2:19 PM",
          "commitNameOld": "b54f848cb94c43a317c67cfe0c67ff83a1af2693",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 106.06,
          "commitsBetweenForRepo": 74,
          "commitsBetweenForFile": 1,
          "actualSource": "private static List parse(String pattern, TimeZone timeZone, Locale locale, DateFormatSymbols symbols) {\n    List rules \u003d new ArrayList();\n    String[] ERAs \u003d symbols.getEras();\n    String[] months \u003d symbols.getMonths();\n    String[] shortMonths \u003d symbols.getShortMonths();\n    String[] weekdays \u003d symbols.getWeekdays();\n    String[] shortWeekdays \u003d symbols.getShortWeekdays();\n    String[] AmPmStrings \u003d symbols.getAmPmStrings();\n    int length \u003d pattern.length();\n    int[] indexRef \u003d new int[1];\n    for (int i \u003d 0; i \u003c length; i++) {\n        indexRef[0] \u003d i;\n        String token \u003d parseToken(pattern, indexRef);\n        i \u003d indexRef[0];\n        int tokenLen \u003d token.length();\n        if (tokenLen \u003d\u003d 0) {\n            break;\n        }\n        Rule rule;\n        char c \u003d token.charAt(0);\n        switch(c) {\n            case \u0027G\u0027:\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new UnpaddedNumberField(Calendar.YEAR);\n                } else {\n                    rule \u003d new TwoDigitYearField();\n                }\n                break;\n            case \u0027M\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d new TwoDigitMonthField();\n                } else {\n                    rule \u003d new UnpaddedMonthField();\n                }\n                break;\n            case \u0027d\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027:\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027:\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027:\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027:\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027:\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027:\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027:\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027z\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneRule(timeZone, locale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneRule(timeZone, locale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027\\\u0027\u0027:\n                String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(new String(sub));\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}",
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
          "functionStartLine": 355,
          "functionName": "parse",
          "functionAnnotation": "",
          "functionDoc": "Returns a list of Rules given a pattern.\n\n@param pattern the pattern to parse\n@param timeZone the time zone to use\n@param locale the locale to use\n@param symbols the symbols to use\n@return a List of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n",
          "diff": "",
          "extendedDetails": {
            "oldValue": "Returns a list of Rules.\n",
            "newValue": "Returns a list of Rules given a pattern.\n\n@param pattern the pattern to parse\n@param timeZone the time zone to use\n@param locale the locale to use\n@param symbols the symbols to use\n@return a List of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n"
          }
        },
        {
          "type": "Yformatchange",
          "commitMessage": "Update class and add javadoc ready for release\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137326 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "5/21/03, 4:39 PM",
          "commitName": "87ea5b31fffed5eec72593130df81e49b0401bf2",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "2/4/03, 2:19 PM",
          "commitNameOld": "b54f848cb94c43a317c67cfe0c67ff83a1af2693",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 106.06,
          "commitsBetweenForRepo": 74,
          "commitsBetweenForFile": 1,
          "actualSource": "private static List parse(String pattern, TimeZone timeZone, Locale locale, DateFormatSymbols symbols) {\n    List rules \u003d new ArrayList();\n    String[] ERAs \u003d symbols.getEras();\n    String[] months \u003d symbols.getMonths();\n    String[] shortMonths \u003d symbols.getShortMonths();\n    String[] weekdays \u003d symbols.getWeekdays();\n    String[] shortWeekdays \u003d symbols.getShortWeekdays();\n    String[] AmPmStrings \u003d symbols.getAmPmStrings();\n    int length \u003d pattern.length();\n    int[] indexRef \u003d new int[1];\n    for (int i \u003d 0; i \u003c length; i++) {\n        indexRef[0] \u003d i;\n        String token \u003d parseToken(pattern, indexRef);\n        i \u003d indexRef[0];\n        int tokenLen \u003d token.length();\n        if (tokenLen \u003d\u003d 0) {\n            break;\n        }\n        Rule rule;\n        char c \u003d token.charAt(0);\n        switch(c) {\n            case \u0027G\u0027:\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new UnpaddedNumberField(Calendar.YEAR);\n                } else {\n                    rule \u003d new TwoDigitYearField();\n                }\n                break;\n            case \u0027M\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d new TwoDigitMonthField();\n                } else {\n                    rule \u003d new UnpaddedMonthField();\n                }\n                break;\n            case \u0027d\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027:\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027:\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027:\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027:\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027:\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027:\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027:\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027z\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneRule(timeZone, locale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneRule(timeZone, locale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027\\\u0027\u0027:\n                String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(new String(sub));\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}",
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
          "functionStartLine": 355,
          "functionName": "parse",
          "functionAnnotation": "",
          "functionDoc": "Returns a list of Rules given a pattern.\n\n@param pattern the pattern to parse\n@param timeZone the time zone to use\n@param locale the locale to use\n@param symbols the symbols to use\n@return a List of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n",
          "diff": "",
          "extendedDetails": {}
        }
      ]
    },
    "d3015ae73bfbf0ee970199cd6a1e073fbfd9c7ef": {
      "type": "Yformatchange",
      "commitMessage": "Reformatted [dos2unix]. A newline was introduced after the licence so that cvs\nwould allow the commit.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137223 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/7/03, 1:21 PM",
      "commitName": "d3015ae73bfbf0ee970199cd6a1e073fbfd9c7ef",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "1/7/03, 11:55 AM",
      "commitNameOld": "e794af9688ae2dee664864be0d128df9a88509ba",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "private static List parse(String pattern, TimeZone timeZone, Locale locale, DateFormatSymbols symbols) {\n    List rules \u003d new ArrayList();\n    String[] ERAs \u003d symbols.getEras();\n    String[] months \u003d symbols.getMonths();\n    String[] shortMonths \u003d symbols.getShortMonths();\n    String[] weekdays \u003d symbols.getWeekdays();\n    String[] shortWeekdays \u003d symbols.getShortWeekdays();\n    String[] AmPmStrings \u003d symbols.getAmPmStrings();\n    int length \u003d pattern.length();\n    int[] indexRef \u003d new int[1];\n    for (int i \u003d 0; i \u003c length; i++) {\n        indexRef[0] \u003d i;\n        String token \u003d parseToken(pattern, indexRef);\n        i \u003d indexRef[0];\n        int tokenLen \u003d token.length();\n        if (tokenLen \u003d\u003d 0) {\n            break;\n        }\n        Rule rule;\n        char c \u003d token.charAt(0);\n        switch(c) {\n            case \u0027G\u0027:\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new UnpaddedNumberField(Calendar.YEAR);\n                } else {\n                    rule \u003d new TwoDigitYearField();\n                }\n                break;\n            case \u0027M\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d new TwoDigitMonthField();\n                } else {\n                    rule \u003d new UnpaddedMonthField();\n                }\n                break;\n            case \u0027d\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027:\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027:\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027:\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027:\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027:\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027:\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027:\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027z\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneRule(timeZone, locale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneRule(timeZone, locale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027\\\u0027\u0027:\n                String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(new String(sub));\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}",
      "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
      "functionStartLine": 372,
      "functionName": "parse",
      "functionAnnotation": "",
      "functionDoc": "Returns a list of Rules.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "e794af9688ae2dee664864be0d128df9a88509ba": {
      "type": "Yintroduced",
      "commitMessage": "A thread-safe, faster version of java.text\u0027s DateFormat. While JODA contains\nbetter, this version is religion-free.\n\nPermission given by Brian S O\u0027Neill:\nhttp://archives.apache.org/eyebrowse/ReadMsg?listName\u003dcommons-dev@jakarta.apache.org\u0026msgNo\u003d20612\n\nSubmitted by:\tSean Schofield\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137221 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/7/03, 11:55 AM",
      "commitName": "e794af9688ae2dee664864be0d128df9a88509ba",
      "commitAuthor": "Henri Yandell",
      "diff": "@@ -0,0 +1,106 @@\n+private static List parse(String pattern, TimeZone timeZone, Locale locale, DateFormatSymbols symbols) {\n+    List rules \u003d new ArrayList();\n+    String[] ERAs \u003d symbols.getEras();\n+    String[] months \u003d symbols.getMonths();\n+    String[] shortMonths \u003d symbols.getShortMonths();\n+    String[] weekdays \u003d symbols.getWeekdays();\n+    String[] shortWeekdays \u003d symbols.getShortWeekdays();\n+    String[] AmPmStrings \u003d symbols.getAmPmStrings();\n+    int length \u003d pattern.length();\n+    int[] indexRef \u003d new int[1];\n+    for (int i \u003d 0; i \u003c length; i++) {\n+        indexRef[0] \u003d i;\n+        String token \u003d parseToken(pattern, indexRef);\n+        i \u003d indexRef[0];\n+        int tokenLen \u003d token.length();\n+        if (tokenLen \u003d\u003d 0) {\n+            break;\n+        }\n+        Rule rule;\n+        char c \u003d token.charAt(0);\n+        switch(c) {\n+            case \u0027G\u0027:\n+                rule \u003d new TextField(Calendar.ERA, ERAs);\n+                break;\n+            case \u0027y\u0027:\n+                if (tokenLen \u003e\u003d 4) {\n+                    rule \u003d new UnpaddedNumberField(Calendar.YEAR);\n+                } else {\n+                    rule \u003d new TwoDigitYearField();\n+                }\n+                break;\n+            case \u0027M\u0027:\n+                if (tokenLen \u003e\u003d 4) {\n+                    rule \u003d new TextField(Calendar.MONTH, months);\n+                } else if (tokenLen \u003d\u003d 3) {\n+                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n+                } else if (tokenLen \u003d\u003d 2) {\n+                    rule \u003d new TwoDigitMonthField();\n+                } else {\n+                    rule \u003d new UnpaddedMonthField();\n+                }\n+                break;\n+            case \u0027d\u0027:\n+                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n+                break;\n+            case \u0027h\u0027:\n+                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n+                break;\n+            case \u0027H\u0027:\n+                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n+                break;\n+            case \u0027m\u0027:\n+                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n+                break;\n+            case \u0027s\u0027:\n+                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n+                break;\n+            case \u0027S\u0027:\n+                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n+                break;\n+            case \u0027E\u0027:\n+                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n+                break;\n+            case \u0027D\u0027:\n+                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n+                break;\n+            case \u0027F\u0027:\n+                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n+                break;\n+            case \u0027w\u0027:\n+                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n+                break;\n+            case \u0027W\u0027:\n+                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n+                break;\n+            case \u0027a\u0027:\n+                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n+                break;\n+            case \u0027k\u0027:\n+                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n+                break;\n+            case \u0027K\u0027:\n+                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n+                break;\n+            case \u0027z\u0027:\n+                if (tokenLen \u003e\u003d 4) {\n+                    rule \u003d new TimeZoneRule(timeZone, locale, TimeZone.LONG);\n+                } else {\n+                    rule \u003d new TimeZoneRule(timeZone, locale, TimeZone.SHORT);\n+                }\n+                break;\n+            case \u0027\\\u0027\u0027:\n+                String sub \u003d token.substring(1);\n+                if (sub.length() \u003d\u003d 1) {\n+                    rule \u003d new CharacterLiteral(sub.charAt(0));\n+                } else {\n+                    rule \u003d new StringLiteral(new String(sub));\n+                }\n+                break;\n+            default:\n+                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n+        }\n+        rules.add(rule);\n+    }\n+    return rules;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private static List parse(String pattern, TimeZone timeZone, Locale locale, DateFormatSymbols symbols) {\n    List rules \u003d new ArrayList();\n    String[] ERAs \u003d symbols.getEras();\n    String[] months \u003d symbols.getMonths();\n    String[] shortMonths \u003d symbols.getShortMonths();\n    String[] weekdays \u003d symbols.getWeekdays();\n    String[] shortWeekdays \u003d symbols.getShortWeekdays();\n    String[] AmPmStrings \u003d symbols.getAmPmStrings();\n    int length \u003d pattern.length();\n    int[] indexRef \u003d new int[1];\n    for (int i \u003d 0; i \u003c length; i++) {\n        indexRef[0] \u003d i;\n        String token \u003d parseToken(pattern, indexRef);\n        i \u003d indexRef[0];\n        int tokenLen \u003d token.length();\n        if (tokenLen \u003d\u003d 0) {\n            break;\n        }\n        Rule rule;\n        char c \u003d token.charAt(0);\n        switch(c) {\n            case \u0027G\u0027:\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new UnpaddedNumberField(Calendar.YEAR);\n                } else {\n                    rule \u003d new TwoDigitYearField();\n                }\n                break;\n            case \u0027M\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d new TwoDigitMonthField();\n                } else {\n                    rule \u003d new UnpaddedMonthField();\n                }\n                break;\n            case \u0027d\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027:\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027:\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027:\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027:\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027:\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027:\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027:\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027z\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneRule(timeZone, locale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneRule(timeZone, locale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027\\\u0027\u0027:\n                String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(new String(sub));\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}",
      "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
      "functionStartLine": 371,
      "functionName": "parse",
      "functionAnnotation": "",
      "functionDoc": "Returns a list of Rules.\n"
    }
  }
}