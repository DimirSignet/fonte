{
  "origin": "codeshovel",
  "repositoryName": "Time-1b",
  "repositoryPath": "/tmp/Time-1b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BaseChronology.java",
  "functionName": "validate",
  "functionId": "validate___partial-ReadablePartial__values-int[]",
  "sourceFilePath": "src/main/java/org/joda/time/chrono/BaseChronology.java",
  "functionAnnotation": "",
  "functionDoc": "Validates whether the fields stored in a partial instant are valid.\n\u003cp\u003e\nThis implementation uses {@link DateTimeField#getMinimumValue(ReadablePartial, int[])}\nand {@link DateTimeField#getMaximumValue(ReadablePartial, int[])}.\n\n@param partial the partial instant to validate\n@param values the values to validate, not null unless the partial is empty\n@throws IllegalArgumentException if the instant is invalid\n",
  "functionStartLine": 180,
  "functionEndLine": 213,
  "numCommitsSeen": 41,
  "timeTaken": 1501,
  "changeHistory": [
    "dba7c37ea3d83b32779d3bb13cb184aedf761a8a",
    "9d991bcfd898a7b06239dbe1788774ba5106562b",
    "df4a82f4fb46cc2248280c462e18f08d55a3d112",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1",
    "e9a0d0df22a9b3d06940daa76f6accb5e63b2df9",
    "24481f10ccfe00f1e0e1566c63db861e33085862",
    "6bdd176eed470329a73d7ee08498183e579cea60",
    "02bafa309ebf978036b14215f04dfb46c51ab6b1",
    "58ebc40ac4ce4fba5c838968936d7f130dde2141",
    "7db787317115fc706deb42cdc623d0b5324375d0"
  ],
  "changeHistoryShort": {
    "dba7c37ea3d83b32779d3bb13cb184aedf761a8a": "Ydocchange",
    "9d991bcfd898a7b06239dbe1788774ba5106562b": "Ybodychange",
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": "Yfilerename",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": "Yfilerename",
    "e9a0d0df22a9b3d06940daa76f6accb5e63b2df9": "Ybodychange",
    "24481f10ccfe00f1e0e1566c63db861e33085862": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "6bdd176eed470329a73d7ee08498183e579cea60": "Yfilerename",
    "02bafa309ebf978036b14215f04dfb46c51ab6b1": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "58ebc40ac4ce4fba5c838968936d7f130dde2141": "Yparameterchange",
    "7db787317115fc706deb42cdc623d0b5324375d0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "dba7c37ea3d83b32779d3bb13cb184aedf761a8a": {
      "type": "Ydocchange",
      "commitMessage": "Add better null comment [3513326]\n",
      "commitDate": "3/30/12, 3:33 PM",
      "commitName": "dba7c37ea3d83b32779d3bb13cb184aedf761a8a",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "7/14/11, 8:56 PM",
      "commitNameOld": "9d991bcfd898a7b06239dbe1788774ba5106562b",
      "commitAuthorOld": "Dave Brosius",
      "daysBetweenCommits": 259.78,
      "commitsBetweenForRepo": 52,
      "commitsBetweenForFile": 1,
      "actualSource": "public void validate(ReadablePartial partial, int[] values) {\n    int size \u003d partial.size();\n    for (int i \u003d 0; i \u003c size; i++) {\n        int value \u003d values[i];\n        DateTimeField field \u003d partial.getField(i);\n        if (value \u003c field.getMinimumValue()) {\n            throw new IllegalFieldValueException(field.getType(), Integer.valueOf(value), Integer.valueOf(field.getMinimumValue()), null);\n        }\n        if (value \u003e field.getMaximumValue()) {\n            throw new IllegalFieldValueException(field.getType(), Integer.valueOf(value), null, Integer.valueOf(field.getMaximumValue()));\n        }\n    }\n    for (int i \u003d 0; i \u003c size; i++) {\n        int value \u003d values[i];\n        DateTimeField field \u003d partial.getField(i);\n        if (value \u003c field.getMinimumValue(partial, values)) {\n            throw new IllegalFieldValueException(field.getType(), Integer.valueOf(value), Integer.valueOf(field.getMinimumValue(partial, values)), null);\n        }\n        if (value \u003e field.getMaximumValue(partial, values)) {\n            throw new IllegalFieldValueException(field.getType(), Integer.valueOf(value), null, Integer.valueOf(field.getMaximumValue(partial, values)));\n        }\n    }\n}",
      "path": "src/main/java/org/joda/time/chrono/BaseChronology.java",
      "functionStartLine": 180,
      "functionName": "validate",
      "functionAnnotation": "",
      "functionDoc": "Validates whether the fields stored in a partial instant are valid.\n\u003cp\u003e\nThis implementation uses {@link DateTimeField#getMinimumValue(ReadablePartial, int[])}\nand {@link DateTimeField#getMaximumValue(ReadablePartial, int[])}.\n\n@param partial the partial instant to validate\n@param values the values to validate, not null unless the partial is empty\n@throws IllegalArgumentException if the instant is invalid\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Validates whether the fields stored in a partial instant are valid.\n\u003cp\u003e\nThis implementation uses {@link DateTimeField#getMinimumValue(ReadablePartial, int[])}\nand {@link DateTimeField#getMaximumValue(ReadablePartial, int[])}.\n\n@param partial the partial instant to validate\n@param values the values to validate, not null\n@throws IllegalArgumentException if the instant is invalid\n",
        "newValue": "Validates whether the fields stored in a partial instant are valid.\n\u003cp\u003e\nThis implementation uses {@link DateTimeField#getMinimumValue(ReadablePartial, int[])}\nand {@link DateTimeField#getMaximumValue(ReadablePartial, int[])}.\n\n@param partial the partial instant to validate\n@param values the values to validate, not null unless the partial is empty\n@throws IllegalArgumentException if the instant is invalid\n"
      }
    },
    "9d991bcfd898a7b06239dbe1788774ba5106562b": {
      "type": "Ybodychange",
      "commitMessage": "use the Integer cache where possible\n",
      "commitDate": "7/14/11, 8:56 PM",
      "commitName": "9d991bcfd898a7b06239dbe1788774ba5106562b",
      "commitAuthor": "Dave Brosius",
      "commitDateOld": "5/16/11, 10:02 AM",
      "commitNameOld": "df4a82f4fb46cc2248280c462e18f08d55a3d112",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 59.45,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "actualSource": "public void validate(ReadablePartial partial, int[] values) {\n    int size \u003d partial.size();\n    for (int i \u003d 0; i \u003c size; i++) {\n        int value \u003d values[i];\n        DateTimeField field \u003d partial.getField(i);\n        if (value \u003c field.getMinimumValue()) {\n            throw new IllegalFieldValueException(field.getType(), Integer.valueOf(value), Integer.valueOf(field.getMinimumValue()), null);\n        }\n        if (value \u003e field.getMaximumValue()) {\n            throw new IllegalFieldValueException(field.getType(), Integer.valueOf(value), null, Integer.valueOf(field.getMaximumValue()));\n        }\n    }\n    for (int i \u003d 0; i \u003c size; i++) {\n        int value \u003d values[i];\n        DateTimeField field \u003d partial.getField(i);\n        if (value \u003c field.getMinimumValue(partial, values)) {\n            throw new IllegalFieldValueException(field.getType(), Integer.valueOf(value), Integer.valueOf(field.getMinimumValue(partial, values)), null);\n        }\n        if (value \u003e field.getMaximumValue(partial, values)) {\n            throw new IllegalFieldValueException(field.getType(), Integer.valueOf(value), null, Integer.valueOf(field.getMaximumValue(partial, values)));\n        }\n    }\n}",
      "path": "src/main/java/org/joda/time/chrono/BaseChronology.java",
      "functionStartLine": 180,
      "functionName": "validate",
      "functionAnnotation": "",
      "functionDoc": "Validates whether the fields stored in a partial instant are valid.\n\u003cp\u003e\nThis implementation uses {@link DateTimeField#getMinimumValue(ReadablePartial, int[])}\nand {@link DateTimeField#getMaximumValue(ReadablePartial, int[])}.\n\n@param partial the partial instant to validate\n@param values the values to validate, not null\n@throws IllegalArgumentException if the instant is invalid\n",
      "diff": "@@ -1,23 +1,23 @@\n public void validate(ReadablePartial partial, int[] values) {\n     int size \u003d partial.size();\n     for (int i \u003d 0; i \u003c size; i++) {\n         int value \u003d values[i];\n         DateTimeField field \u003d partial.getField(i);\n         if (value \u003c field.getMinimumValue()) {\n-            throw new IllegalFieldValueException(field.getType(), new Integer(value), new Integer(field.getMinimumValue()), null);\n+            throw new IllegalFieldValueException(field.getType(), Integer.valueOf(value), Integer.valueOf(field.getMinimumValue()), null);\n         }\n         if (value \u003e field.getMaximumValue()) {\n-            throw new IllegalFieldValueException(field.getType(), new Integer(value), null, new Integer(field.getMaximumValue()));\n+            throw new IllegalFieldValueException(field.getType(), Integer.valueOf(value), null, Integer.valueOf(field.getMaximumValue()));\n         }\n     }\n     for (int i \u003d 0; i \u003c size; i++) {\n         int value \u003d values[i];\n         DateTimeField field \u003d partial.getField(i);\n         if (value \u003c field.getMinimumValue(partial, values)) {\n-            throw new IllegalFieldValueException(field.getType(), new Integer(value), new Integer(field.getMinimumValue(partial, values)), null);\n+            throw new IllegalFieldValueException(field.getType(), Integer.valueOf(value), Integer.valueOf(field.getMinimumValue(partial, values)), null);\n         }\n         if (value \u003e field.getMaximumValue(partial, values)) {\n-            throw new IllegalFieldValueException(field.getType(), new Integer(value), null, new Integer(field.getMaximumValue(partial, values)));\n+            throw new IllegalFieldValueException(field.getType(), Integer.valueOf(value), null, Integer.valueOf(field.getMaximumValue(partial, values)));\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": {
      "type": "Yfilerename",
      "commitMessage": "Remove JodaTime folder moving files to top level\n",
      "commitDate": "5/16/11, 10:02 AM",
      "commitName": "df4a82f4fb46cc2248280c462e18f08d55a3d112",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "5/16/11, 9:58 AM",
      "commitNameOld": "72b22654962284bac59c2777131b42a2d1f53228",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public void validate(ReadablePartial partial, int[] values) {\n    int size \u003d partial.size();\n    for (int i \u003d 0; i \u003c size; i++) {\n        int value \u003d values[i];\n        DateTimeField field \u003d partial.getField(i);\n        if (value \u003c field.getMinimumValue()) {\n            throw new IllegalFieldValueException(field.getType(), new Integer(value), new Integer(field.getMinimumValue()), null);\n        }\n        if (value \u003e field.getMaximumValue()) {\n            throw new IllegalFieldValueException(field.getType(), new Integer(value), null, new Integer(field.getMaximumValue()));\n        }\n    }\n    for (int i \u003d 0; i \u003c size; i++) {\n        int value \u003d values[i];\n        DateTimeField field \u003d partial.getField(i);\n        if (value \u003c field.getMinimumValue(partial, values)) {\n            throw new IllegalFieldValueException(field.getType(), new Integer(value), new Integer(field.getMinimumValue(partial, values)), null);\n        }\n        if (value \u003e field.getMaximumValue(partial, values)) {\n            throw new IllegalFieldValueException(field.getType(), new Integer(value), null, new Integer(field.getMaximumValue(partial, values)));\n        }\n    }\n}",
      "path": "src/main/java/org/joda/time/chrono/BaseChronology.java",
      "functionStartLine": 180,
      "functionName": "validate",
      "functionAnnotation": "",
      "functionDoc": "Validates whether the fields stored in a partial instant are valid.\n\u003cp\u003e\nThis implementation uses {@link DateTimeField#getMinimumValue(ReadablePartial, int[])}\nand {@link DateTimeField#getMaximumValue(ReadablePartial, int[])}.\n\n@param partial the partial instant to validate\n@param values the values to validate, not null\n@throws IllegalArgumentException if the instant is invalid\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/main/java/org/joda/time/chrono/BaseChronology.java",
        "newPath": "src/main/java/org/joda/time/chrono/BaseChronology.java"
      }
    },
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": {
      "type": "Yfilerename",
      "commitMessage": "Convert to maven 2\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1540 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/8/10, 5:17 PM",
      "commitName": "53feb3fa56af7260e607844524b7e5a9be49ecc1",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/8/10, 5:02 PM",
      "commitNameOld": "7fa2ceaf5d95d050095432aa646ea803aa35e122",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public void validate(ReadablePartial partial, int[] values) {\n    int size \u003d partial.size();\n    for (int i \u003d 0; i \u003c size; i++) {\n        int value \u003d values[i];\n        DateTimeField field \u003d partial.getField(i);\n        if (value \u003c field.getMinimumValue()) {\n            throw new IllegalFieldValueException(field.getType(), new Integer(value), new Integer(field.getMinimumValue()), null);\n        }\n        if (value \u003e field.getMaximumValue()) {\n            throw new IllegalFieldValueException(field.getType(), new Integer(value), null, new Integer(field.getMaximumValue()));\n        }\n    }\n    for (int i \u003d 0; i \u003c size; i++) {\n        int value \u003d values[i];\n        DateTimeField field \u003d partial.getField(i);\n        if (value \u003c field.getMinimumValue(partial, values)) {\n            throw new IllegalFieldValueException(field.getType(), new Integer(value), new Integer(field.getMinimumValue(partial, values)), null);\n        }\n        if (value \u003e field.getMaximumValue(partial, values)) {\n            throw new IllegalFieldValueException(field.getType(), new Integer(value), null, new Integer(field.getMaximumValue(partial, values)));\n        }\n    }\n}",
      "path": "JodaTime/src/main/java/org/joda/time/chrono/BaseChronology.java",
      "functionStartLine": 180,
      "functionName": "validate",
      "functionAnnotation": "",
      "functionDoc": "Validates whether the fields stored in a partial instant are valid.\n\u003cp\u003e\nThis implementation uses {@link DateTimeField#getMinimumValue(ReadablePartial, int[])}\nand {@link DateTimeField#getMaximumValue(ReadablePartial, int[])}.\n\n@param partial the partial instant to validate\n@param values the values to validate, not null\n@throws IllegalArgumentException if the instant is invalid\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/java/org/joda/time/chrono/BaseChronology.java",
        "newPath": "JodaTime/src/main/java/org/joda/time/chrono/BaseChronology.java"
      }
    },
    "e9a0d0df22a9b3d06940daa76f6accb5e63b2df9": {
      "type": "Ybodychange",
      "commitMessage": "Added IllegalFieldValueException class.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@766 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "5/30/05, 11:20 AM",
      "commitName": "e9a0d0df22a9b3d06940daa76f6accb5e63b2df9",
      "commitAuthor": "Brian S O\u0027Neill",
      "commitDateOld": "2/21/05, 8:55 PM",
      "commitNameOld": "b87ac3b95ef4ca3fde725b568371c10779bf1427",
      "commitAuthorOld": "Brian S O\u0027Neill",
      "daysBetweenCommits": 97.56,
      "commitsBetweenForRepo": 35,
      "commitsBetweenForFile": 1,
      "actualSource": "public void validate(ReadablePartial partial, int[] values) {\n    int size \u003d partial.size();\n    for (int i \u003d 0; i \u003c size; i++) {\n        int value \u003d values[i];\n        DateTimeField field \u003d partial.getField(i);\n        if (value \u003c field.getMinimumValue()) {\n            throw new IllegalFieldValueException(field.getType(), new Integer(value), new Integer(field.getMinimumValue()), null);\n        }\n        if (value \u003e field.getMaximumValue()) {\n            throw new IllegalFieldValueException(field.getType(), new Integer(value), null, new Integer(field.getMaximumValue()));\n        }\n    }\n    for (int i \u003d 0; i \u003c size; i++) {\n        int value \u003d values[i];\n        DateTimeField field \u003d partial.getField(i);\n        if (value \u003c field.getMinimumValue(partial, values)) {\n            throw new IllegalFieldValueException(field.getType(), new Integer(value), new Integer(field.getMinimumValue(partial, values)), null);\n        }\n        if (value \u003e field.getMaximumValue(partial, values)) {\n            throw new IllegalFieldValueException(field.getType(), new Integer(value), null, new Integer(field.getMaximumValue(partial, values)));\n        }\n    }\n}",
      "path": "JodaTime/src/java/org/joda/time/chrono/BaseChronology.java",
      "functionStartLine": 180,
      "functionName": "validate",
      "functionAnnotation": "",
      "functionDoc": "Validates whether the fields stored in a partial instant are valid.\n\u003cp\u003e\nThis implementation uses {@link DateTimeField#getMinimumValue(ReadablePartial, int[])}\nand {@link DateTimeField#getMaximumValue(ReadablePartial, int[])}.\n\n@param partial the partial instant to validate\n@param values the values to validate, not null\n@throws IllegalArgumentException if the instant is invalid\n",
      "diff": "@@ -1,23 +1,23 @@\n public void validate(ReadablePartial partial, int[] values) {\n     int size \u003d partial.size();\n     for (int i \u003d 0; i \u003c size; i++) {\n         int value \u003d values[i];\n         DateTimeField field \u003d partial.getField(i);\n         if (value \u003c field.getMinimumValue()) {\n-            throw new IllegalArgumentException(\"Value \" + value + \" for \" + field.getName() + \" is less than minimum\");\n+            throw new IllegalFieldValueException(field.getType(), new Integer(value), new Integer(field.getMinimumValue()), null);\n         }\n         if (value \u003e field.getMaximumValue()) {\n-            throw new IllegalArgumentException(\"Value \" + value + \" for \" + field.getName() + \" is greater than maximum\");\n+            throw new IllegalFieldValueException(field.getType(), new Integer(value), null, new Integer(field.getMaximumValue()));\n         }\n     }\n     for (int i \u003d 0; i \u003c size; i++) {\n         int value \u003d values[i];\n         DateTimeField field \u003d partial.getField(i);\n         if (value \u003c field.getMinimumValue(partial, values)) {\n-            throw new IllegalArgumentException(\"Value \" + value + \" for \" + field.getName() + \" is less than minimum\");\n+            throw new IllegalFieldValueException(field.getType(), new Integer(value), new Integer(field.getMinimumValue(partial, values)), null);\n         }\n         if (value \u003e field.getMaximumValue(partial, values)) {\n-            throw new IllegalArgumentException(\"Value \" + value + \" for \" + field.getName() + \" is greater than maximum\");\n+            throw new IllegalFieldValueException(field.getType(), new Integer(value), null, new Integer(field.getMaximumValue(partial, values)));\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "24481f10ccfe00f1e0e1566c63db861e33085862": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "Use DateTimeFieldType in ReadablePartial\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@469 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "9/2/04, 6:13 PM",
      "commitName": "24481f10ccfe00f1e0e1566c63db861e33085862",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Use DateTimeFieldType in ReadablePartial\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@469 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "9/2/04, 6:13 PM",
          "commitName": "24481f10ccfe00f1e0e1566c63db861e33085862",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "9/2/04, 3:47 PM",
          "commitNameOld": "0d18055d0b3c2e687197a8651b3a06e097fe5c48",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 0.1,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public void validate(ReadablePartial partial, int[] values) {\n    int size \u003d partial.size();\n    for (int i \u003d 0; i \u003c size; i++) {\n        int value \u003d values[i];\n        DateTimeField field \u003d partial.getField(i);\n        if (value \u003c field.getMinimumValue()) {\n            throw new IllegalArgumentException(\"Value \" + value + \" for \" + field.getName() + \" is less than minimum\");\n        }\n        if (value \u003e field.getMaximumValue()) {\n            throw new IllegalArgumentException(\"Value \" + value + \" for \" + field.getName() + \" is greater than maximum\");\n        }\n    }\n    for (int i \u003d 0; i \u003c size; i++) {\n        int value \u003d values[i];\n        DateTimeField field \u003d partial.getField(i);\n        if (value \u003c field.getMinimumValue(partial, values)) {\n            throw new IllegalArgumentException(\"Value \" + value + \" for \" + field.getName() + \" is less than minimum\");\n        }\n        if (value \u003e field.getMaximumValue(partial, values)) {\n            throw new IllegalArgumentException(\"Value \" + value + \" for \" + field.getName() + \" is greater than maximum\");\n        }\n    }\n}",
          "path": "JodaTime/src/java/org/joda/time/chrono/BaseChronology.java",
          "functionStartLine": 214,
          "functionName": "validate",
          "functionAnnotation": "",
          "functionDoc": "Validates whether the fields stored in a partial instant are valid.\n\u003cp\u003e\nThis implementation uses {@link DateTimeField#getMinimumValue(ReadablePartial, int[])}\nand {@link DateTimeField#getMaximumValue(ReadablePartial, int[])}.\n\n@param partial the partial instant to validate\n@param values the values to validate, not null\n@throws IllegalArgumentException if the instant is invalid\n",
          "diff": "@@ -1,19 +1,23 @@\n-public void validate(ReadablePartial instant, int[] values) {\n-    DateTimeField[] fields \u003d instant.getFields();\n-    for (int i \u003d 0; i \u003c fields.length; i++) {\n-        if (values[i] \u003c fields[i].getMinimumValue()) {\n-            throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is less than minimum\");\n+public void validate(ReadablePartial partial, int[] values) {\n+    int size \u003d partial.size();\n+    for (int i \u003d 0; i \u003c size; i++) {\n+        int value \u003d values[i];\n+        DateTimeField field \u003d partial.getField(i);\n+        if (value \u003c field.getMinimumValue()) {\n+            throw new IllegalArgumentException(\"Value \" + value + \" for \" + field.getName() + \" is less than minimum\");\n         }\n-        if (values[i] \u003e fields[i].getMaximumValue()) {\n-            throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is greater than maximum\");\n+        if (value \u003e field.getMaximumValue()) {\n+            throw new IllegalArgumentException(\"Value \" + value + \" for \" + field.getName() + \" is greater than maximum\");\n         }\n     }\n-    for (int i \u003d 0; i \u003c fields.length; i++) {\n-        if (values[i] \u003c fields[i].getMinimumValue(instant, values)) {\n-            throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is less than minimum\");\n+    for (int i \u003d 0; i \u003c size; i++) {\n+        int value \u003d values[i];\n+        DateTimeField field \u003d partial.getField(i);\n+        if (value \u003c field.getMinimumValue(partial, values)) {\n+            throw new IllegalArgumentException(\"Value \" + value + \" for \" + field.getName() + \" is less than minimum\");\n         }\n-        if (values[i] \u003e fields[i].getMaximumValue(instant, values)) {\n-            throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is greater than maximum\");\n+        if (value \u003e field.getMaximumValue(partial, values)) {\n+            throw new IllegalArgumentException(\"Value \" + value + \" for \" + field.getName() + \" is greater than maximum\");\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[instant-ReadablePartial, values-int[]]",
            "newValue": "[partial-ReadablePartial, values-int[]]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Use DateTimeFieldType in ReadablePartial\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@469 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "9/2/04, 6:13 PM",
          "commitName": "24481f10ccfe00f1e0e1566c63db861e33085862",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "9/2/04, 3:47 PM",
          "commitNameOld": "0d18055d0b3c2e687197a8651b3a06e097fe5c48",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 0.1,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public void validate(ReadablePartial partial, int[] values) {\n    int size \u003d partial.size();\n    for (int i \u003d 0; i \u003c size; i++) {\n        int value \u003d values[i];\n        DateTimeField field \u003d partial.getField(i);\n        if (value \u003c field.getMinimumValue()) {\n            throw new IllegalArgumentException(\"Value \" + value + \" for \" + field.getName() + \" is less than minimum\");\n        }\n        if (value \u003e field.getMaximumValue()) {\n            throw new IllegalArgumentException(\"Value \" + value + \" for \" + field.getName() + \" is greater than maximum\");\n        }\n    }\n    for (int i \u003d 0; i \u003c size; i++) {\n        int value \u003d values[i];\n        DateTimeField field \u003d partial.getField(i);\n        if (value \u003c field.getMinimumValue(partial, values)) {\n            throw new IllegalArgumentException(\"Value \" + value + \" for \" + field.getName() + \" is less than minimum\");\n        }\n        if (value \u003e field.getMaximumValue(partial, values)) {\n            throw new IllegalArgumentException(\"Value \" + value + \" for \" + field.getName() + \" is greater than maximum\");\n        }\n    }\n}",
          "path": "JodaTime/src/java/org/joda/time/chrono/BaseChronology.java",
          "functionStartLine": 214,
          "functionName": "validate",
          "functionAnnotation": "",
          "functionDoc": "Validates whether the fields stored in a partial instant are valid.\n\u003cp\u003e\nThis implementation uses {@link DateTimeField#getMinimumValue(ReadablePartial, int[])}\nand {@link DateTimeField#getMaximumValue(ReadablePartial, int[])}.\n\n@param partial the partial instant to validate\n@param values the values to validate, not null\n@throws IllegalArgumentException if the instant is invalid\n",
          "diff": "@@ -1,19 +1,23 @@\n-public void validate(ReadablePartial instant, int[] values) {\n-    DateTimeField[] fields \u003d instant.getFields();\n-    for (int i \u003d 0; i \u003c fields.length; i++) {\n-        if (values[i] \u003c fields[i].getMinimumValue()) {\n-            throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is less than minimum\");\n+public void validate(ReadablePartial partial, int[] values) {\n+    int size \u003d partial.size();\n+    for (int i \u003d 0; i \u003c size; i++) {\n+        int value \u003d values[i];\n+        DateTimeField field \u003d partial.getField(i);\n+        if (value \u003c field.getMinimumValue()) {\n+            throw new IllegalArgumentException(\"Value \" + value + \" for \" + field.getName() + \" is less than minimum\");\n         }\n-        if (values[i] \u003e fields[i].getMaximumValue()) {\n-            throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is greater than maximum\");\n+        if (value \u003e field.getMaximumValue()) {\n+            throw new IllegalArgumentException(\"Value \" + value + \" for \" + field.getName() + \" is greater than maximum\");\n         }\n     }\n-    for (int i \u003d 0; i \u003c fields.length; i++) {\n-        if (values[i] \u003c fields[i].getMinimumValue(instant, values)) {\n-            throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is less than minimum\");\n+    for (int i \u003d 0; i \u003c size; i++) {\n+        int value \u003d values[i];\n+        DateTimeField field \u003d partial.getField(i);\n+        if (value \u003c field.getMinimumValue(partial, values)) {\n+            throw new IllegalArgumentException(\"Value \" + value + \" for \" + field.getName() + \" is less than minimum\");\n         }\n-        if (values[i] \u003e fields[i].getMaximumValue(instant, values)) {\n-            throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is greater than maximum\");\n+        if (value \u003e field.getMaximumValue(partial, values)) {\n+            throw new IllegalArgumentException(\"Value \" + value + \" for \" + field.getName() + \" is greater than maximum\");\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Use DateTimeFieldType in ReadablePartial\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@469 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "9/2/04, 6:13 PM",
          "commitName": "24481f10ccfe00f1e0e1566c63db861e33085862",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "9/2/04, 3:47 PM",
          "commitNameOld": "0d18055d0b3c2e687197a8651b3a06e097fe5c48",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 0.1,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public void validate(ReadablePartial partial, int[] values) {\n    int size \u003d partial.size();\n    for (int i \u003d 0; i \u003c size; i++) {\n        int value \u003d values[i];\n        DateTimeField field \u003d partial.getField(i);\n        if (value \u003c field.getMinimumValue()) {\n            throw new IllegalArgumentException(\"Value \" + value + \" for \" + field.getName() + \" is less than minimum\");\n        }\n        if (value \u003e field.getMaximumValue()) {\n            throw new IllegalArgumentException(\"Value \" + value + \" for \" + field.getName() + \" is greater than maximum\");\n        }\n    }\n    for (int i \u003d 0; i \u003c size; i++) {\n        int value \u003d values[i];\n        DateTimeField field \u003d partial.getField(i);\n        if (value \u003c field.getMinimumValue(partial, values)) {\n            throw new IllegalArgumentException(\"Value \" + value + \" for \" + field.getName() + \" is less than minimum\");\n        }\n        if (value \u003e field.getMaximumValue(partial, values)) {\n            throw new IllegalArgumentException(\"Value \" + value + \" for \" + field.getName() + \" is greater than maximum\");\n        }\n    }\n}",
          "path": "JodaTime/src/java/org/joda/time/chrono/BaseChronology.java",
          "functionStartLine": 214,
          "functionName": "validate",
          "functionAnnotation": "",
          "functionDoc": "Validates whether the fields stored in a partial instant are valid.\n\u003cp\u003e\nThis implementation uses {@link DateTimeField#getMinimumValue(ReadablePartial, int[])}\nand {@link DateTimeField#getMaximumValue(ReadablePartial, int[])}.\n\n@param partial the partial instant to validate\n@param values the values to validate, not null\n@throws IllegalArgumentException if the instant is invalid\n",
          "diff": "@@ -1,19 +1,23 @@\n-public void validate(ReadablePartial instant, int[] values) {\n-    DateTimeField[] fields \u003d instant.getFields();\n-    for (int i \u003d 0; i \u003c fields.length; i++) {\n-        if (values[i] \u003c fields[i].getMinimumValue()) {\n-            throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is less than minimum\");\n+public void validate(ReadablePartial partial, int[] values) {\n+    int size \u003d partial.size();\n+    for (int i \u003d 0; i \u003c size; i++) {\n+        int value \u003d values[i];\n+        DateTimeField field \u003d partial.getField(i);\n+        if (value \u003c field.getMinimumValue()) {\n+            throw new IllegalArgumentException(\"Value \" + value + \" for \" + field.getName() + \" is less than minimum\");\n         }\n-        if (values[i] \u003e fields[i].getMaximumValue()) {\n-            throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is greater than maximum\");\n+        if (value \u003e field.getMaximumValue()) {\n+            throw new IllegalArgumentException(\"Value \" + value + \" for \" + field.getName() + \" is greater than maximum\");\n         }\n     }\n-    for (int i \u003d 0; i \u003c fields.length; i++) {\n-        if (values[i] \u003c fields[i].getMinimumValue(instant, values)) {\n-            throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is less than minimum\");\n+    for (int i \u003d 0; i \u003c size; i++) {\n+        int value \u003d values[i];\n+        DateTimeField field \u003d partial.getField(i);\n+        if (value \u003c field.getMinimumValue(partial, values)) {\n+            throw new IllegalArgumentException(\"Value \" + value + \" for \" + field.getName() + \" is less than minimum\");\n         }\n-        if (values[i] \u003e fields[i].getMaximumValue(instant, values)) {\n-            throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is greater than maximum\");\n+        if (value \u003e field.getMaximumValue(partial, values)) {\n+            throw new IllegalArgumentException(\"Value \" + value + \" for \" + field.getName() + \" is greater than maximum\");\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Validates whether the fields stored in a partial instant are valid.\n\u003cp\u003e\nThis implementation uses {@link DateTimeField#getMinimumValue(ReadablePartial, int[])}\nand {@link DateTimeField#getMaximumValue(ReadablePartial, int[])}.\n\n@param instant the partial instant to validate\n@param values the values to validate, not null\n@throws IllegalArgumentException if the instant is invalid\n",
            "newValue": "Validates whether the fields stored in a partial instant are valid.\n\u003cp\u003e\nThis implementation uses {@link DateTimeField#getMinimumValue(ReadablePartial, int[])}\nand {@link DateTimeField#getMaximumValue(ReadablePartial, int[])}.\n\n@param partial the partial instant to validate\n@param values the values to validate, not null\n@throws IllegalArgumentException if the instant is invalid\n"
          }
        }
      ]
    },
    "6bdd176eed470329a73d7ee08498183e579cea60": {
      "type": "Yfilerename",
      "commitMessage": "Change Chronology to abstract class\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@432 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/22/04, 8:15 AM",
      "commitName": "6bdd176eed470329a73d7ee08498183e579cea60",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/22/04, 7:44 AM",
      "commitNameOld": "5f9b9b675631bda3568df0d47ca305126d426011",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public void validate(ReadablePartial instant, int[] values) {\n    DateTimeField[] fields \u003d instant.getFields();\n    for (int i \u003d 0; i \u003c fields.length; i++) {\n        if (values[i] \u003c fields[i].getMinimumValue()) {\n            throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is less than minimum\");\n        }\n        if (values[i] \u003e fields[i].getMaximumValue()) {\n            throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is greater than maximum\");\n        }\n    }\n    for (int i \u003d 0; i \u003c fields.length; i++) {\n        if (values[i] \u003c fields[i].getMinimumValue(instant, values)) {\n            throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is less than minimum\");\n        }\n        if (values[i] \u003e fields[i].getMaximumValue(instant, values)) {\n            throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is greater than maximum\");\n        }\n    }\n}",
      "path": "JodaTime/src/java/org/joda/time/chrono/BaseChronology.java",
      "functionStartLine": 212,
      "functionName": "validate",
      "functionAnnotation": "",
      "functionDoc": "Validates whether the fields stored in a partial instant are valid.\n\u003cp\u003e\nThis implementation uses {@link DateTimeField#getMinimumValue(ReadablePartial, int[])}\nand {@link DateTimeField#getMaximumValue(ReadablePartial, int[])}.\n\n@param instant the partial instant to validate\n@param values the values to validate, not null\n@throws IllegalArgumentException if the instant is invalid\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java",
        "newPath": "JodaTime/src/java/org/joda/time/chrono/BaseChronology.java"
      }
    },
    "02bafa309ebf978036b14215f04dfb46c51ab6b1": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "Update validate to be more flexible\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@429 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/22/04, 7:41 AM",
      "commitName": "02bafa309ebf978036b14215f04dfb46c51ab6b1",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Update validate to be more flexible\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@429 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "8/22/04, 7:41 AM",
          "commitName": "02bafa309ebf978036b14215f04dfb46c51ab6b1",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "8/7/04, 6:42 AM",
          "commitNameOld": "c578139c0184963ad7123ee107d7e12ef399de2d",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 15.04,
          "commitsBetweenForRepo": 58,
          "commitsBetweenForFile": 1,
          "actualSource": "public void validate(ReadablePartial instant, int[] values) {\n    DateTimeField[] fields \u003d instant.getFields();\n    for (int i \u003d 0; i \u003c fields.length; i++) {\n        if (values[i] \u003c fields[i].getMinimumValue()) {\n            throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is less than minimum\");\n        }\n        if (values[i] \u003e fields[i].getMaximumValue()) {\n            throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is greater than maximum\");\n        }\n    }\n    for (int i \u003d 0; i \u003c fields.length; i++) {\n        if (values[i] \u003c fields[i].getMinimumValue(instant, values)) {\n            throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is less than minimum\");\n        }\n        if (values[i] \u003e fields[i].getMaximumValue(instant, values)) {\n            throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is greater than maximum\");\n        }\n    }\n}",
          "path": "JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java",
          "functionStartLine": 210,
          "functionName": "validate",
          "functionAnnotation": "",
          "functionDoc": "Validates whether the fields stored in a partial instant are valid.\n\u003cp\u003e\nThis implementation uses {@link DateTimeField#getMinimumValue(ReadablePartial, int[])}\nand {@link DateTimeField#getMaximumValue(ReadablePartial, int[])}.\n\n@param instant the partial instant to validate\n@param values the values to validate, not null\n@throws IllegalArgumentException if the instant is invalid\n",
          "diff": "@@ -1,20 +1,19 @@\n-public void validate(ReadablePartial instant) {\n+public void validate(ReadablePartial instant, int[] values) {\n     DateTimeField[] fields \u003d instant.getFields();\n-    int[] values \u003d instant.getValues();\n     for (int i \u003d 0; i \u003c fields.length; i++) {\n         if (values[i] \u003c fields[i].getMinimumValue()) {\n             throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is less than minimum\");\n         }\n         if (values[i] \u003e fields[i].getMaximumValue()) {\n             throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is greater than maximum\");\n         }\n     }\n     for (int i \u003d 0; i \u003c fields.length; i++) {\n-        if (values[i] \u003c fields[i].getMinimumValue(instant)) {\n+        if (values[i] \u003c fields[i].getMinimumValue(instant, values)) {\n             throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is less than minimum\");\n         }\n-        if (values[i] \u003e fields[i].getMaximumValue(instant)) {\n+        if (values[i] \u003e fields[i].getMaximumValue(instant, values)) {\n             throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is greater than maximum\");\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[instant-ReadablePartial]",
            "newValue": "[instant-ReadablePartial, values-int[]]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Update validate to be more flexible\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@429 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "8/22/04, 7:41 AM",
          "commitName": "02bafa309ebf978036b14215f04dfb46c51ab6b1",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "8/7/04, 6:42 AM",
          "commitNameOld": "c578139c0184963ad7123ee107d7e12ef399de2d",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 15.04,
          "commitsBetweenForRepo": 58,
          "commitsBetweenForFile": 1,
          "actualSource": "public void validate(ReadablePartial instant, int[] values) {\n    DateTimeField[] fields \u003d instant.getFields();\n    for (int i \u003d 0; i \u003c fields.length; i++) {\n        if (values[i] \u003c fields[i].getMinimumValue()) {\n            throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is less than minimum\");\n        }\n        if (values[i] \u003e fields[i].getMaximumValue()) {\n            throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is greater than maximum\");\n        }\n    }\n    for (int i \u003d 0; i \u003c fields.length; i++) {\n        if (values[i] \u003c fields[i].getMinimumValue(instant, values)) {\n            throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is less than minimum\");\n        }\n        if (values[i] \u003e fields[i].getMaximumValue(instant, values)) {\n            throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is greater than maximum\");\n        }\n    }\n}",
          "path": "JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java",
          "functionStartLine": 210,
          "functionName": "validate",
          "functionAnnotation": "",
          "functionDoc": "Validates whether the fields stored in a partial instant are valid.\n\u003cp\u003e\nThis implementation uses {@link DateTimeField#getMinimumValue(ReadablePartial, int[])}\nand {@link DateTimeField#getMaximumValue(ReadablePartial, int[])}.\n\n@param instant the partial instant to validate\n@param values the values to validate, not null\n@throws IllegalArgumentException if the instant is invalid\n",
          "diff": "@@ -1,20 +1,19 @@\n-public void validate(ReadablePartial instant) {\n+public void validate(ReadablePartial instant, int[] values) {\n     DateTimeField[] fields \u003d instant.getFields();\n-    int[] values \u003d instant.getValues();\n     for (int i \u003d 0; i \u003c fields.length; i++) {\n         if (values[i] \u003c fields[i].getMinimumValue()) {\n             throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is less than minimum\");\n         }\n         if (values[i] \u003e fields[i].getMaximumValue()) {\n             throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is greater than maximum\");\n         }\n     }\n     for (int i \u003d 0; i \u003c fields.length; i++) {\n-        if (values[i] \u003c fields[i].getMinimumValue(instant)) {\n+        if (values[i] \u003c fields[i].getMinimumValue(instant, values)) {\n             throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is less than minimum\");\n         }\n-        if (values[i] \u003e fields[i].getMaximumValue(instant)) {\n+        if (values[i] \u003e fields[i].getMaximumValue(instant, values)) {\n             throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is greater than maximum\");\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Update validate to be more flexible\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@429 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "8/22/04, 7:41 AM",
          "commitName": "02bafa309ebf978036b14215f04dfb46c51ab6b1",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "8/7/04, 6:42 AM",
          "commitNameOld": "c578139c0184963ad7123ee107d7e12ef399de2d",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 15.04,
          "commitsBetweenForRepo": 58,
          "commitsBetweenForFile": 1,
          "actualSource": "public void validate(ReadablePartial instant, int[] values) {\n    DateTimeField[] fields \u003d instant.getFields();\n    for (int i \u003d 0; i \u003c fields.length; i++) {\n        if (values[i] \u003c fields[i].getMinimumValue()) {\n            throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is less than minimum\");\n        }\n        if (values[i] \u003e fields[i].getMaximumValue()) {\n            throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is greater than maximum\");\n        }\n    }\n    for (int i \u003d 0; i \u003c fields.length; i++) {\n        if (values[i] \u003c fields[i].getMinimumValue(instant, values)) {\n            throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is less than minimum\");\n        }\n        if (values[i] \u003e fields[i].getMaximumValue(instant, values)) {\n            throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is greater than maximum\");\n        }\n    }\n}",
          "path": "JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java",
          "functionStartLine": 210,
          "functionName": "validate",
          "functionAnnotation": "",
          "functionDoc": "Validates whether the fields stored in a partial instant are valid.\n\u003cp\u003e\nThis implementation uses {@link DateTimeField#getMinimumValue(ReadablePartial, int[])}\nand {@link DateTimeField#getMaximumValue(ReadablePartial, int[])}.\n\n@param instant the partial instant to validate\n@param values the values to validate, not null\n@throws IllegalArgumentException if the instant is invalid\n",
          "diff": "@@ -1,20 +1,19 @@\n-public void validate(ReadablePartial instant) {\n+public void validate(ReadablePartial instant, int[] values) {\n     DateTimeField[] fields \u003d instant.getFields();\n-    int[] values \u003d instant.getValues();\n     for (int i \u003d 0; i \u003c fields.length; i++) {\n         if (values[i] \u003c fields[i].getMinimumValue()) {\n             throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is less than minimum\");\n         }\n         if (values[i] \u003e fields[i].getMaximumValue()) {\n             throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is greater than maximum\");\n         }\n     }\n     for (int i \u003d 0; i \u003c fields.length; i++) {\n-        if (values[i] \u003c fields[i].getMinimumValue(instant)) {\n+        if (values[i] \u003c fields[i].getMinimumValue(instant, values)) {\n             throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is less than minimum\");\n         }\n-        if (values[i] \u003e fields[i].getMaximumValue(instant)) {\n+        if (values[i] \u003e fields[i].getMaximumValue(instant, values)) {\n             throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is greater than maximum\");\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Validates whether the fields stored in a partial instant are valid.\n\u003cp\u003e\nThis implementation uses {@link DateTimeField#getMinimumValue()} and\n{@link DateTimeField#getMaximumValue()}.\n\n@param instant the partial instant to validate\n@throws IllegalArgumentException if the instant is invalid\n",
            "newValue": "Validates whether the fields stored in a partial instant are valid.\n\u003cp\u003e\nThis implementation uses {@link DateTimeField#getMinimumValue(ReadablePartial, int[])}\nand {@link DateTimeField#getMaximumValue(ReadablePartial, int[])}.\n\n@param instant the partial instant to validate\n@param values the values to validate, not null\n@throws IllegalArgumentException if the instant is invalid\n"
          }
        }
      ]
    },
    "58ebc40ac4ce4fba5c838968936d7f130dde2141": {
      "type": "Yparameterchange",
      "commitMessage": "Rename PartialInstant to ReadablePartial\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@242 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "6/27/04, 1:03 PM",
      "commitName": "58ebc40ac4ce4fba5c838968936d7f130dde2141",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "5/31/04, 3:57 AM",
      "commitNameOld": "7db787317115fc706deb42cdc623d0b5324375d0",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 27.38,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "actualSource": "public void validate(ReadablePartial instant) {\n    DateTimeField[] fields \u003d instant.getFields();\n    int[] values \u003d instant.getValues();\n    for (int i \u003d 0; i \u003c fields.length; i++) {\n        if (values[i] \u003c fields[i].getMinimumValue()) {\n            throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is less than minimum\");\n        }\n        if (values[i] \u003e fields[i].getMaximumValue()) {\n            throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is greater than maximum\");\n        }\n    }\n    for (int i \u003d 0; i \u003c fields.length; i++) {\n        if (values[i] \u003c fields[i].getMinimumValue(instant)) {\n            throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is less than minimum\");\n        }\n        if (values[i] \u003e fields[i].getMaximumValue(instant)) {\n            throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is greater than maximum\");\n        }\n    }\n}",
      "path": "JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java",
      "functionStartLine": 284,
      "functionName": "validate",
      "functionAnnotation": "",
      "functionDoc": "Validates whether the fields stored in a partial instant are valid.\n\u003cp\u003e\nThis implementation uses {@link DateTimeField#getMinimumValue()} and\n{@link DateTimeField#getMaximumValue()}.\n\n@param instant the partial instant to validate\n@throws IllegalArgumentException if the instant is invalid\n",
      "diff": "@@ -1,20 +1,20 @@\n-public void validate(PartialInstant instant) {\n+public void validate(ReadablePartial instant) {\n     DateTimeField[] fields \u003d instant.getFields();\n     int[] values \u003d instant.getValues();\n     for (int i \u003d 0; i \u003c fields.length; i++) {\n         if (values[i] \u003c fields[i].getMinimumValue()) {\n             throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is less than minimum\");\n         }\n         if (values[i] \u003e fields[i].getMaximumValue()) {\n             throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is greater than maximum\");\n         }\n     }\n     for (int i \u003d 0; i \u003c fields.length; i++) {\n         if (values[i] \u003c fields[i].getMinimumValue(instant)) {\n             throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is less than minimum\");\n         }\n         if (values[i] \u003e fields[i].getMaximumValue(instant)) {\n             throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is greater than maximum\");\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[instant-PartialInstant]",
        "newValue": "[instant-ReadablePartial]"
      }
    },
    "7db787317115fc706deb42cdc623d0b5324375d0": {
      "type": "Yintroduced",
      "commitMessage": "Add validate() to Chronology for PartialInstant\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@210 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "5/31/04, 3:57 AM",
      "commitName": "7db787317115fc706deb42cdc623d0b5324375d0",
      "commitAuthor": "Stephen Colebourne",
      "diff": "@@ -0,0 +1,20 @@\n+public void validate(PartialInstant instant) {\n+    DateTimeField[] fields \u003d instant.getFields();\n+    int[] values \u003d instant.getValues();\n+    for (int i \u003d 0; i \u003c fields.length; i++) {\n+        if (values[i] \u003c fields[i].getMinimumValue()) {\n+            throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is less than minimum\");\n+        }\n+        if (values[i] \u003e fields[i].getMaximumValue()) {\n+            throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is greater than maximum\");\n+        }\n+    }\n+    for (int i \u003d 0; i \u003c fields.length; i++) {\n+        if (values[i] \u003c fields[i].getMinimumValue(instant)) {\n+            throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is less than minimum\");\n+        }\n+        if (values[i] \u003e fields[i].getMaximumValue(instant)) {\n+            throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is greater than maximum\");\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "public void validate(PartialInstant instant) {\n    DateTimeField[] fields \u003d instant.getFields();\n    int[] values \u003d instant.getValues();\n    for (int i \u003d 0; i \u003c fields.length; i++) {\n        if (values[i] \u003c fields[i].getMinimumValue()) {\n            throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is less than minimum\");\n        }\n        if (values[i] \u003e fields[i].getMaximumValue()) {\n            throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is greater than maximum\");\n        }\n    }\n    for (int i \u003d 0; i \u003c fields.length; i++) {\n        if (values[i] \u003c fields[i].getMinimumValue(instant)) {\n            throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is less than minimum\");\n        }\n        if (values[i] \u003e fields[i].getMaximumValue(instant)) {\n            throw new IllegalArgumentException(\"Value \" + values[i] + \" for \" + fields[i].getName() + \" is greater than maximum\");\n        }\n    }\n}",
      "path": "JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java",
      "functionStartLine": 284,
      "functionName": "validate",
      "functionAnnotation": "",
      "functionDoc": "Validates whether the fields stored in a partial instant are valid.\n\u003cp\u003e\nThis implementation uses {@link DateTimeField#getMinimumValue()} and\n{@link DateTimeField#getMaximumValue()}.\n\n@param instant the partial instant to validate\n@throws IllegalArgumentException if the instant is invalid\n"
    }
  }
}