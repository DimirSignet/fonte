{
  "origin": "codeshovel",
  "repositoryName": "Time-1b",
  "repositoryPath": "/tmp/Time-1b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DateTimeZone.java",
  "functionName": "setProvider0",
  "functionId": "setProvider0___provider-Provider",
  "sourceFilePath": "src/main/java/org/joda/time/DateTimeZone.java",
  "functionAnnotation": "",
  "functionDoc": "Sets the zone provider factory without performing the security check.\n\n@param provider provider to use, or null for default\n@throws IllegalArgumentException if the provider is invalid\n",
  "functionStartLine": 442,
  "functionEndLine": 459,
  "numCommitsSeen": 60,
  "timeTaken": 2501,
  "changeHistory": [
    "df4a82f4fb46cc2248280c462e18f08d55a3d112",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1",
    "3f1e047c898c9c925e1faac33bb07e1cb05d88cb",
    "6682ab2abccb5819ec2e62a1f3f9018945bed9cd",
    "a26563f0cd1fbdd5587a0f9d3c0c77864553d737",
    "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb"
  ],
  "changeHistoryShort": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": "Yfilerename",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": "Yfilerename",
    "3f1e047c898c9c925e1faac33bb07e1cb05d88cb": "Ybodychange",
    "6682ab2abccb5819ec2e62a1f3f9018945bed9cd": "Ydocchange",
    "a26563f0cd1fbdd5587a0f9d3c0c77864553d737": "Ybodychange",
    "0e07ac6b2cff63550d7df336355ca63cc05aa40b": "Ymultichange(Yrename,Ymodifierchange,Yexceptionschange,Ybodychange,Ydocchange)",
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb": "Yintroduced"
  },
  "changeHistoryDetails": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": {
      "type": "Yfilerename",
      "commitMessage": "Remove JodaTime folder moving files to top level\n",
      "commitDate": "5/16/11, 10:02 AM",
      "commitName": "df4a82f4fb46cc2248280c462e18f08d55a3d112",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "5/16/11, 9:58 AM",
      "commitNameOld": "72b22654962284bac59c2777131b42a2d1f53228",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private static void setProvider0(Provider provider) {\n    if (provider \u003d\u003d null) {\n        provider \u003d getDefaultProvider();\n    }\n    Set\u003cString\u003e ids \u003d provider.getAvailableIDs();\n    if (ids \u003d\u003d null || ids.size() \u003d\u003d 0) {\n        throw new IllegalArgumentException(\"The provider doesn\u0027t have any available ids\");\n    }\n    if (!ids.contains(\"UTC\")) {\n        throw new IllegalArgumentException(\"The provider doesn\u0027t support UTC\");\n    }\n    if (!UTC.equals(provider.getZone(\"UTC\"))) {\n        throw new IllegalArgumentException(\"Invalid UTC zone provided\");\n    }\n    cProvider \u003d provider;\n    cAvailableIDs \u003d ids;\n}",
      "path": "src/main/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 414,
      "functionName": "setProvider0",
      "functionAnnotation": "",
      "functionDoc": "Sets the zone provider factory without performing the security check.\n\n@param provider provider to use, or null for default\n@throws IllegalArgumentException if the provider is invalid\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/main/java/org/joda/time/DateTimeZone.java",
        "newPath": "src/main/java/org/joda/time/DateTimeZone.java"
      }
    },
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": {
      "type": "Yfilerename",
      "commitMessage": "Convert to maven 2\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1540 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/8/10, 5:17 PM",
      "commitName": "53feb3fa56af7260e607844524b7e5a9be49ecc1",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/8/10, 5:02 PM",
      "commitNameOld": "7fa2ceaf5d95d050095432aa646ea803aa35e122",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private static void setProvider0(Provider provider) {\n    if (provider \u003d\u003d null) {\n        provider \u003d getDefaultProvider();\n    }\n    Set\u003cString\u003e ids \u003d provider.getAvailableIDs();\n    if (ids \u003d\u003d null || ids.size() \u003d\u003d 0) {\n        throw new IllegalArgumentException(\"The provider doesn\u0027t have any available ids\");\n    }\n    if (!ids.contains(\"UTC\")) {\n        throw new IllegalArgumentException(\"The provider doesn\u0027t support UTC\");\n    }\n    if (!UTC.equals(provider.getZone(\"UTC\"))) {\n        throw new IllegalArgumentException(\"Invalid UTC zone provided\");\n    }\n    cProvider \u003d provider;\n    cAvailableIDs \u003d ids;\n}",
      "path": "JodaTime/src/main/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 399,
      "functionName": "setProvider0",
      "functionAnnotation": "",
      "functionDoc": "Sets the zone provider factory without performing the security check.\n\n@param provider provider to use, or null for default\n@throws IllegalArgumentException if the provider is invalid\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
        "newPath": "JodaTime/src/main/java/org/joda/time/DateTimeZone.java"
      }
    },
    "3f1e047c898c9c925e1faac33bb07e1cb05d88cb": {
      "type": "Ybodychange",
      "commitMessage": "Move to Java 5 with generics\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1406 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "11/4/09, 3:55 PM",
      "commitName": "3f1e047c898c9c925e1faac33bb07e1cb05d88cb",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "5/2/09, 4:22 PM",
      "commitNameOld": "51ed4026310a311e21eba19fee9df3c66c67c4cc",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 186.02,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "actualSource": "private static void setProvider0(Provider provider) {\n    if (provider \u003d\u003d null) {\n        provider \u003d getDefaultProvider();\n    }\n    Set\u003cString\u003e ids \u003d provider.getAvailableIDs();\n    if (ids \u003d\u003d null || ids.size() \u003d\u003d 0) {\n        throw new IllegalArgumentException(\"The provider doesn\u0027t have any available ids\");\n    }\n    if (!ids.contains(\"UTC\")) {\n        throw new IllegalArgumentException(\"The provider doesn\u0027t support UTC\");\n    }\n    if (!UTC.equals(provider.getZone(\"UTC\"))) {\n        throw new IllegalArgumentException(\"Invalid UTC zone provided\");\n    }\n    cProvider \u003d provider;\n    cAvailableIDs \u003d ids;\n}",
      "path": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 390,
      "functionName": "setProvider0",
      "functionAnnotation": "",
      "functionDoc": "Sets the zone provider factory without performing the security check.\n\n@param provider provider to use, or null for default\n@throws IllegalArgumentException if the provider is invalid\n",
      "diff": "@@ -1,17 +1,17 @@\n private static void setProvider0(Provider provider) {\n     if (provider \u003d\u003d null) {\n         provider \u003d getDefaultProvider();\n     }\n-    Set ids \u003d provider.getAvailableIDs();\n+    Set\u003cString\u003e ids \u003d provider.getAvailableIDs();\n     if (ids \u003d\u003d null || ids.size() \u003d\u003d 0) {\n         throw new IllegalArgumentException(\"The provider doesn\u0027t have any available ids\");\n     }\n     if (!ids.contains(\"UTC\")) {\n         throw new IllegalArgumentException(\"The provider doesn\u0027t support UTC\");\n     }\n     if (!UTC.equals(provider.getZone(\"UTC\"))) {\n         throw new IllegalArgumentException(\"Invalid UTC zone provided\");\n     }\n     cProvider \u003d provider;\n     cAvailableIDs \u003d ids;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6682ab2abccb5819ec2e62a1f3f9018945bed9cd": {
      "type": "Ydocchange",
      "commitMessage": "Test DateTimeZone\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@279 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "7/14/04, 4:23 PM",
      "commitName": "6682ab2abccb5819ec2e62a1f3f9018945bed9cd",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "5/14/04, 11:08 PM",
      "commitNameOld": "eb0cac2be7678d8c6b3c2bde3aff15eb4ca982f1",
      "commitAuthorOld": "Brian S O\u0027Neill",
      "daysBetweenCommits": 60.72,
      "commitsBetweenForRepo": 79,
      "commitsBetweenForFile": 1,
      "actualSource": "private static void setProvider0(Provider provider) {\n    if (provider \u003d\u003d null) {\n        provider \u003d getDefaultProvider();\n    }\n    Set ids \u003d provider.getAvailableIDs();\n    if (ids \u003d\u003d null || ids.size() \u003d\u003d 0) {\n        throw new IllegalArgumentException(\"The provider doesn\u0027t have any available ids\");\n    }\n    if (!ids.contains(\"UTC\")) {\n        throw new IllegalArgumentException(\"The provider doesn\u0027t support UTC\");\n    }\n    if (!UTC.equals(provider.getZone(\"UTC\"))) {\n        throw new IllegalArgumentException(\"Invalid UTC zone provided\");\n    }\n    cProvider \u003d provider;\n    cAvailableIDs \u003d ids;\n}",
      "path": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 354,
      "functionName": "setProvider0",
      "functionAnnotation": "",
      "functionDoc": "Sets the zone provider factory without performing the security check.\n\n@param provider provider to use, or null for default\n@throws IllegalArgumentException if the provider is invalid\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Doesn\u0027t perform a security check.\n",
        "newValue": "Sets the zone provider factory without performing the security check.\n\n@param provider provider to use, or null for default\n@throws IllegalArgumentException if the provider is invalid\n"
      }
    },
    "a26563f0cd1fbdd5587a0f9d3c0c77864553d737": {
      "type": "Ybodychange",
      "commitMessage": "Rename getDateTimeZone methods to getZone etc\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@177 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "4/14/04, 4:43 PM",
      "commitName": "a26563f0cd1fbdd5587a0f9d3c0c77864553d737",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "1/3/04, 3:20 PM",
      "commitNameOld": "fd68de5eed8630dec3635a0fb6d7d82d960efa1b",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 102.02,
      "commitsBetweenForRepo": 80,
      "commitsBetweenForFile": 1,
      "actualSource": "private static void setProvider0(Provider provider) {\n    if (provider \u003d\u003d null) {\n        provider \u003d getDefaultProvider();\n    }\n    Set ids \u003d provider.getAvailableIDs();\n    if (ids \u003d\u003d null || ids.size() \u003d\u003d 0) {\n        throw new IllegalArgumentException(\"The provider doesn\u0027t have any available ids\");\n    }\n    if (!ids.contains(\"UTC\")) {\n        throw new IllegalArgumentException(\"The provider doesn\u0027t support UTC\");\n    }\n    if (!UTC.equals(provider.getZone(\"UTC\"))) {\n        throw new IllegalArgumentException(\"Invalid UTC zone provided\");\n    }\n    cProvider \u003d provider;\n    cAvailableIDs \u003d ids;\n}",
      "path": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 316,
      "functionName": "setProvider0",
      "functionAnnotation": "",
      "functionDoc": "Doesn\u0027t perform a security check.\n",
      "diff": "@@ -1,17 +1,17 @@\n private static void setProvider0(Provider provider) {\n     if (provider \u003d\u003d null) {\n         provider \u003d getDefaultProvider();\n     }\n     Set ids \u003d provider.getAvailableIDs();\n     if (ids \u003d\u003d null || ids.size() \u003d\u003d 0) {\n         throw new IllegalArgumentException(\"The provider doesn\u0027t have any available ids\");\n     }\n     if (!ids.contains(\"UTC\")) {\n         throw new IllegalArgumentException(\"The provider doesn\u0027t support UTC\");\n     }\n-    if (!UTC.equals(provider.getDateTimeZone(\"UTC\"))) {\n+    if (!UTC.equals(provider.getZone(\"UTC\"))) {\n         throw new IllegalArgumentException(\"Invalid UTC zone provided\");\n     }\n     cProvider \u003d provider;\n     cAvailableIDs \u003d ids;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0e07ac6b2cff63550d7df336355ca63cc05aa40b": {
      "type": "Ymultichange(Yrename,Ymodifierchange,Yexceptionschange,Ybodychange,Ydocchange)",
      "commitMessage": "Move from Joda CVS\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@10 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "12/18/03, 6:07 PM",
      "commitName": "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "Move from Joda CVS\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@10 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "12/18/03, 6:07 PM",
          "commitName": "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "12/16/03, 1:39 PM",
          "commitNameOld": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 2.19,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "private static void setProvider0(Provider provider) {\n    if (provider \u003d\u003d null) {\n        provider \u003d getDefaultProvider();\n    }\n    Set ids \u003d provider.getAvailableIDs();\n    if (ids \u003d\u003d null || ids.size() \u003d\u003d 0) {\n        throw new IllegalArgumentException(\"The provider doesn\u0027t have any available ids\");\n    }\n    if (!ids.contains(\"UTC\")) {\n        throw new IllegalArgumentException(\"The provider doesn\u0027t support UTC\");\n    }\n    if (!UTC.equals(provider.getDateTimeZone(\"UTC\"))) {\n        throw new IllegalArgumentException(\"Invalid UTC zone provided\");\n    }\n    cProvider \u003d provider;\n    cAvailableIDs \u003d ids;\n}",
          "path": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
          "functionStartLine": 315,
          "functionName": "setProvider0",
          "functionAnnotation": "",
          "functionDoc": "Doesn\u0027t perform a security check.\n",
          "diff": "@@ -1,17 +1,17 @@\n-public static void setProvider(Provider provider) throws SecurityException {\n+private static void setProvider0(Provider provider) {\n     if (provider \u003d\u003d null) {\n-        throw new IllegalArgumentException(\"The provider must not be null\");\n+        provider \u003d getDefaultProvider();\n     }\n     Set ids \u003d provider.getAvailableIDs();\n     if (ids \u003d\u003d null || ids.size() \u003d\u003d 0) {\n         throw new IllegalArgumentException(\"The provider doesn\u0027t have any available ids\");\n     }\n     if (!ids.contains(\"UTC\")) {\n         throw new IllegalArgumentException(\"The provider doesn\u0027t support UTC\");\n     }\n     if (!UTC.equals(provider.getDateTimeZone(\"UTC\"))) {\n         throw new IllegalArgumentException(\"Invalid UTC zone provided\");\n     }\n     cProvider \u003d provider;\n     cAvailableIDs \u003d ids;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "setProvider",
            "newValue": "setProvider0"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Move from Joda CVS\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@10 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "12/18/03, 6:07 PM",
          "commitName": "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "12/16/03, 1:39 PM",
          "commitNameOld": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 2.19,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "private static void setProvider0(Provider provider) {\n    if (provider \u003d\u003d null) {\n        provider \u003d getDefaultProvider();\n    }\n    Set ids \u003d provider.getAvailableIDs();\n    if (ids \u003d\u003d null || ids.size() \u003d\u003d 0) {\n        throw new IllegalArgumentException(\"The provider doesn\u0027t have any available ids\");\n    }\n    if (!ids.contains(\"UTC\")) {\n        throw new IllegalArgumentException(\"The provider doesn\u0027t support UTC\");\n    }\n    if (!UTC.equals(provider.getDateTimeZone(\"UTC\"))) {\n        throw new IllegalArgumentException(\"Invalid UTC zone provided\");\n    }\n    cProvider \u003d provider;\n    cAvailableIDs \u003d ids;\n}",
          "path": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
          "functionStartLine": 315,
          "functionName": "setProvider0",
          "functionAnnotation": "",
          "functionDoc": "Doesn\u0027t perform a security check.\n",
          "diff": "@@ -1,17 +1,17 @@\n-public static void setProvider(Provider provider) throws SecurityException {\n+private static void setProvider0(Provider provider) {\n     if (provider \u003d\u003d null) {\n-        throw new IllegalArgumentException(\"The provider must not be null\");\n+        provider \u003d getDefaultProvider();\n     }\n     Set ids \u003d provider.getAvailableIDs();\n     if (ids \u003d\u003d null || ids.size() \u003d\u003d 0) {\n         throw new IllegalArgumentException(\"The provider doesn\u0027t have any available ids\");\n     }\n     if (!ids.contains(\"UTC\")) {\n         throw new IllegalArgumentException(\"The provider doesn\u0027t support UTC\");\n     }\n     if (!UTC.equals(provider.getDateTimeZone(\"UTC\"))) {\n         throw new IllegalArgumentException(\"Invalid UTC zone provided\");\n     }\n     cProvider \u003d provider;\n     cAvailableIDs \u003d ids;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[public, static]",
            "newValue": "[private, static]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "Move from Joda CVS\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@10 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "12/18/03, 6:07 PM",
          "commitName": "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "12/16/03, 1:39 PM",
          "commitNameOld": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 2.19,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "private static void setProvider0(Provider provider) {\n    if (provider \u003d\u003d null) {\n        provider \u003d getDefaultProvider();\n    }\n    Set ids \u003d provider.getAvailableIDs();\n    if (ids \u003d\u003d null || ids.size() \u003d\u003d 0) {\n        throw new IllegalArgumentException(\"The provider doesn\u0027t have any available ids\");\n    }\n    if (!ids.contains(\"UTC\")) {\n        throw new IllegalArgumentException(\"The provider doesn\u0027t support UTC\");\n    }\n    if (!UTC.equals(provider.getDateTimeZone(\"UTC\"))) {\n        throw new IllegalArgumentException(\"Invalid UTC zone provided\");\n    }\n    cProvider \u003d provider;\n    cAvailableIDs \u003d ids;\n}",
          "path": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
          "functionStartLine": 315,
          "functionName": "setProvider0",
          "functionAnnotation": "",
          "functionDoc": "Doesn\u0027t perform a security check.\n",
          "diff": "@@ -1,17 +1,17 @@\n-public static void setProvider(Provider provider) throws SecurityException {\n+private static void setProvider0(Provider provider) {\n     if (provider \u003d\u003d null) {\n-        throw new IllegalArgumentException(\"The provider must not be null\");\n+        provider \u003d getDefaultProvider();\n     }\n     Set ids \u003d provider.getAvailableIDs();\n     if (ids \u003d\u003d null || ids.size() \u003d\u003d 0) {\n         throw new IllegalArgumentException(\"The provider doesn\u0027t have any available ids\");\n     }\n     if (!ids.contains(\"UTC\")) {\n         throw new IllegalArgumentException(\"The provider doesn\u0027t support UTC\");\n     }\n     if (!UTC.equals(provider.getDateTimeZone(\"UTC\"))) {\n         throw new IllegalArgumentException(\"Invalid UTC zone provided\");\n     }\n     cProvider \u003d provider;\n     cAvailableIDs \u003d ids;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[SecurityException]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Move from Joda CVS\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@10 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "12/18/03, 6:07 PM",
          "commitName": "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "12/16/03, 1:39 PM",
          "commitNameOld": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 2.19,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "private static void setProvider0(Provider provider) {\n    if (provider \u003d\u003d null) {\n        provider \u003d getDefaultProvider();\n    }\n    Set ids \u003d provider.getAvailableIDs();\n    if (ids \u003d\u003d null || ids.size() \u003d\u003d 0) {\n        throw new IllegalArgumentException(\"The provider doesn\u0027t have any available ids\");\n    }\n    if (!ids.contains(\"UTC\")) {\n        throw new IllegalArgumentException(\"The provider doesn\u0027t support UTC\");\n    }\n    if (!UTC.equals(provider.getDateTimeZone(\"UTC\"))) {\n        throw new IllegalArgumentException(\"Invalid UTC zone provided\");\n    }\n    cProvider \u003d provider;\n    cAvailableIDs \u003d ids;\n}",
          "path": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
          "functionStartLine": 315,
          "functionName": "setProvider0",
          "functionAnnotation": "",
          "functionDoc": "Doesn\u0027t perform a security check.\n",
          "diff": "@@ -1,17 +1,17 @@\n-public static void setProvider(Provider provider) throws SecurityException {\n+private static void setProvider0(Provider provider) {\n     if (provider \u003d\u003d null) {\n-        throw new IllegalArgumentException(\"The provider must not be null\");\n+        provider \u003d getDefaultProvider();\n     }\n     Set ids \u003d provider.getAvailableIDs();\n     if (ids \u003d\u003d null || ids.size() \u003d\u003d 0) {\n         throw new IllegalArgumentException(\"The provider doesn\u0027t have any available ids\");\n     }\n     if (!ids.contains(\"UTC\")) {\n         throw new IllegalArgumentException(\"The provider doesn\u0027t support UTC\");\n     }\n     if (!UTC.equals(provider.getDateTimeZone(\"UTC\"))) {\n         throw new IllegalArgumentException(\"Invalid UTC zone provided\");\n     }\n     cProvider \u003d provider;\n     cAvailableIDs \u003d ids;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Move from Joda CVS\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@10 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "12/18/03, 6:07 PM",
          "commitName": "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "12/16/03, 1:39 PM",
          "commitNameOld": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 2.19,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "private static void setProvider0(Provider provider) {\n    if (provider \u003d\u003d null) {\n        provider \u003d getDefaultProvider();\n    }\n    Set ids \u003d provider.getAvailableIDs();\n    if (ids \u003d\u003d null || ids.size() \u003d\u003d 0) {\n        throw new IllegalArgumentException(\"The provider doesn\u0027t have any available ids\");\n    }\n    if (!ids.contains(\"UTC\")) {\n        throw new IllegalArgumentException(\"The provider doesn\u0027t support UTC\");\n    }\n    if (!UTC.equals(provider.getDateTimeZone(\"UTC\"))) {\n        throw new IllegalArgumentException(\"Invalid UTC zone provided\");\n    }\n    cProvider \u003d provider;\n    cAvailableIDs \u003d ids;\n}",
          "path": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
          "functionStartLine": 315,
          "functionName": "setProvider0",
          "functionAnnotation": "",
          "functionDoc": "Doesn\u0027t perform a security check.\n",
          "diff": "@@ -1,17 +1,17 @@\n-public static void setProvider(Provider provider) throws SecurityException {\n+private static void setProvider0(Provider provider) {\n     if (provider \u003d\u003d null) {\n-        throw new IllegalArgumentException(\"The provider must not be null\");\n+        provider \u003d getDefaultProvider();\n     }\n     Set ids \u003d provider.getAvailableIDs();\n     if (ids \u003d\u003d null || ids.size() \u003d\u003d 0) {\n         throw new IllegalArgumentException(\"The provider doesn\u0027t have any available ids\");\n     }\n     if (!ids.contains(\"UTC\")) {\n         throw new IllegalArgumentException(\"The provider doesn\u0027t support UTC\");\n     }\n     if (!UTC.equals(provider.getDateTimeZone(\"UTC\"))) {\n         throw new IllegalArgumentException(\"Invalid UTC zone provided\");\n     }\n     cProvider \u003d provider;\n     cAvailableIDs \u003d ids;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "Doesn\u0027t perform a security check.\n"
          }
        }
      ]
    },
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb": {
      "type": "Yintroduced",
      "commitMessage": "Move version 0.9 to joda-time repository\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@4 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "12/16/03, 1:39 PM",
      "commitName": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
      "commitAuthor": "Stephen Colebourne",
      "diff": "@@ -0,0 +1,17 @@\n+public static void setProvider(Provider provider) throws SecurityException {\n+    if (provider \u003d\u003d null) {\n+        throw new IllegalArgumentException(\"The provider must not be null\");\n+    }\n+    Set ids \u003d provider.getAvailableIDs();\n+    if (ids \u003d\u003d null || ids.size() \u003d\u003d 0) {\n+        throw new IllegalArgumentException(\"The provider doesn\u0027t have any available ids\");\n+    }\n+    if (!ids.contains(\"UTC\")) {\n+        throw new IllegalArgumentException(\"The provider doesn\u0027t support UTC\");\n+    }\n+    if (!UTC.equals(provider.getDateTimeZone(\"UTC\"))) {\n+        throw new IllegalArgumentException(\"Invalid UTC zone provided\");\n+    }\n+    cProvider \u003d provider;\n+    cAvailableIDs \u003d ids;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public static void setProvider(Provider provider) throws SecurityException {\n    if (provider \u003d\u003d null) {\n        throw new IllegalArgumentException(\"The provider must not be null\");\n    }\n    Set ids \u003d provider.getAvailableIDs();\n    if (ids \u003d\u003d null || ids.size() \u003d\u003d 0) {\n        throw new IllegalArgumentException(\"The provider doesn\u0027t have any available ids\");\n    }\n    if (!ids.contains(\"UTC\")) {\n        throw new IllegalArgumentException(\"The provider doesn\u0027t support UTC\");\n    }\n    if (!UTC.equals(provider.getDateTimeZone(\"UTC\"))) {\n        throw new IllegalArgumentException(\"Invalid UTC zone provided\");\n    }\n    cProvider \u003d provider;\n    cAvailableIDs \u003d ids;\n}",
      "path": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 346,
      "functionName": "setProvider",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}