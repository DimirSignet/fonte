{
  "origin": "codeshovel",
  "repositoryName": "Closure-2b",
  "repositoryPath": "/tmp/Closure-2b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TypeInferencePass.java",
  "functionName": "inferAllScopes",
  "functionId": "inferAllScopes___node-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/TypeInferencePass.java",
  "functionAnnotation": "",
  "functionDoc": "Entry point for type inference when running over part of the tree.\n",
  "functionStartLine": 77,
  "functionEndLine": 107,
  "numCommitsSeen": 42,
  "timeTaken": 1601,
  "changeHistory": [
    "a7f99cbb3ba646de8e19f0248099dad9cf0432a6",
    "dff730a3759cad9c491f72d9905eee93962d3d35",
    "279196b617c5de1ade21110979b6b13d8eda6342",
    "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4",
    "c0face2a48665e46f4829f54ee24cfa4cf8d4589",
    "f78e933dbc678936ed5fcf453ab3c80b87d1e59d",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "a7f99cbb3ba646de8e19f0248099dad9cf0432a6": "Ymultichange(Yrename,Yparameterchange,Ybodychange,Ydocchange)",
    "dff730a3759cad9c491f72d9905eee93962d3d35": "Ybodychange",
    "279196b617c5de1ade21110979b6b13d8eda6342": "Ybodychange",
    "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4": "Ybodychange",
    "c0face2a48665e46f4829f54ee24cfa4cf8d4589": "Ybodychange",
    "f78e933dbc678936ed5fcf453ab3c80b87d1e59d": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a7f99cbb3ba646de8e19f0248099dad9cf0432a6": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "\nAlternate proposal for handling IIFEs\nFixes issue 61\n\nR\u003ddimvar\nDELTA\u003d243  (149 added, 31 deleted, 63 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5594\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2240 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/4/12, 11:18 AM",
      "commitName": "a7f99cbb3ba646de8e19f0248099dad9cf0432a6",
      "commitAuthor": "nicksantos@google.com",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "\nAlternate proposal for handling IIFEs\nFixes issue 61\n\nR\u003ddimvar\nDELTA\u003d243  (149 added, 31 deleted, 63 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5594\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2240 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "10/4/12, 11:18 AM",
          "commitName": "a7f99cbb3ba646de8e19f0248099dad9cf0432a6",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "5/3/12, 10:16 AM",
          "commitNameOld": "30373de7d6af5dc5fdffcdae9bc2d9d79c9e5dd4",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 154.04,
          "commitsBetweenForRepo": 274,
          "commitsBetweenForFile": 1,
          "actualSource": "void inferAllScopes(Node node) {\n    (new NodeTraversal(compiler, new FirstScopeBuildingCallback(), scopeCreator)).traverseWithScope(node, topScope);\n    (new NodeTraversal(compiler, new SecondScopeBuildingCallback(), scopeCreator)).traverseWithScope(node, topScope);\n}",
          "path": "src/com/google/javascript/jscomp/TypeInferencePass.java",
          "functionStartLine": 77,
          "functionName": "inferAllScopes",
          "functionAnnotation": "",
          "functionDoc": "Entry point for type inference when running over part of the tree.\n",
          "diff": "@@ -1,9 +1,4 @@\n-void inferTypes(NodeTraversal t, Node n, Scope scope) {\n-    TypeInference typeInference \u003d new TypeInference(compiler, computeCfg(n), reverseInterpreter, scope, assertionFunctionsMap);\n-    try {\n-        typeInference.analyze();\n-        compiler.getTypeRegistry().resolveTypesInScope(scope);\n-    } catch (DataFlowAnalysis.MaxIterationsExceededException e) {\n-        compiler.report(t.makeError(n, DATAFLOW_ERROR));\n-    }\n+void inferAllScopes(Node node) {\n+    (new NodeTraversal(compiler, new FirstScopeBuildingCallback(), scopeCreator)).traverseWithScope(node, topScope);\n+    (new NodeTraversal(compiler, new SecondScopeBuildingCallback(), scopeCreator)).traverseWithScope(node, topScope);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "inferTypes",
            "newValue": "inferAllScopes"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "\nAlternate proposal for handling IIFEs\nFixes issue 61\n\nR\u003ddimvar\nDELTA\u003d243  (149 added, 31 deleted, 63 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5594\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2240 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "10/4/12, 11:18 AM",
          "commitName": "a7f99cbb3ba646de8e19f0248099dad9cf0432a6",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "5/3/12, 10:16 AM",
          "commitNameOld": "30373de7d6af5dc5fdffcdae9bc2d9d79c9e5dd4",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 154.04,
          "commitsBetweenForRepo": 274,
          "commitsBetweenForFile": 1,
          "actualSource": "void inferAllScopes(Node node) {\n    (new NodeTraversal(compiler, new FirstScopeBuildingCallback(), scopeCreator)).traverseWithScope(node, topScope);\n    (new NodeTraversal(compiler, new SecondScopeBuildingCallback(), scopeCreator)).traverseWithScope(node, topScope);\n}",
          "path": "src/com/google/javascript/jscomp/TypeInferencePass.java",
          "functionStartLine": 77,
          "functionName": "inferAllScopes",
          "functionAnnotation": "",
          "functionDoc": "Entry point for type inference when running over part of the tree.\n",
          "diff": "@@ -1,9 +1,4 @@\n-void inferTypes(NodeTraversal t, Node n, Scope scope) {\n-    TypeInference typeInference \u003d new TypeInference(compiler, computeCfg(n), reverseInterpreter, scope, assertionFunctionsMap);\n-    try {\n-        typeInference.analyze();\n-        compiler.getTypeRegistry().resolveTypesInScope(scope);\n-    } catch (DataFlowAnalysis.MaxIterationsExceededException e) {\n-        compiler.report(t.makeError(n, DATAFLOW_ERROR));\n-    }\n+void inferAllScopes(Node node) {\n+    (new NodeTraversal(compiler, new FirstScopeBuildingCallback(), scopeCreator)).traverseWithScope(node, topScope);\n+    (new NodeTraversal(compiler, new SecondScopeBuildingCallback(), scopeCreator)).traverseWithScope(node, topScope);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[t-NodeTraversal, n-Node, scope-Scope]",
            "newValue": "[node-Node]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nAlternate proposal for handling IIFEs\nFixes issue 61\n\nR\u003ddimvar\nDELTA\u003d243  (149 added, 31 deleted, 63 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5594\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2240 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "10/4/12, 11:18 AM",
          "commitName": "a7f99cbb3ba646de8e19f0248099dad9cf0432a6",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "5/3/12, 10:16 AM",
          "commitNameOld": "30373de7d6af5dc5fdffcdae9bc2d9d79c9e5dd4",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 154.04,
          "commitsBetweenForRepo": 274,
          "commitsBetweenForFile": 1,
          "actualSource": "void inferAllScopes(Node node) {\n    (new NodeTraversal(compiler, new FirstScopeBuildingCallback(), scopeCreator)).traverseWithScope(node, topScope);\n    (new NodeTraversal(compiler, new SecondScopeBuildingCallback(), scopeCreator)).traverseWithScope(node, topScope);\n}",
          "path": "src/com/google/javascript/jscomp/TypeInferencePass.java",
          "functionStartLine": 77,
          "functionName": "inferAllScopes",
          "functionAnnotation": "",
          "functionDoc": "Entry point for type inference when running over part of the tree.\n",
          "diff": "@@ -1,9 +1,4 @@\n-void inferTypes(NodeTraversal t, Node n, Scope scope) {\n-    TypeInference typeInference \u003d new TypeInference(compiler, computeCfg(n), reverseInterpreter, scope, assertionFunctionsMap);\n-    try {\n-        typeInference.analyze();\n-        compiler.getTypeRegistry().resolveTypesInScope(scope);\n-    } catch (DataFlowAnalysis.MaxIterationsExceededException e) {\n-        compiler.report(t.makeError(n, DATAFLOW_ERROR));\n-    }\n+void inferAllScopes(Node node) {\n+    (new NodeTraversal(compiler, new FirstScopeBuildingCallback(), scopeCreator)).traverseWithScope(node, topScope);\n+    (new NodeTraversal(compiler, new SecondScopeBuildingCallback(), scopeCreator)).traverseWithScope(node, topScope);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "\nAlternate proposal for handling IIFEs\nFixes issue 61\n\nR\u003ddimvar\nDELTA\u003d243  (149 added, 31 deleted, 63 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5594\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2240 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "10/4/12, 11:18 AM",
          "commitName": "a7f99cbb3ba646de8e19f0248099dad9cf0432a6",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "5/3/12, 10:16 AM",
          "commitNameOld": "30373de7d6af5dc5fdffcdae9bc2d9d79c9e5dd4",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 154.04,
          "commitsBetweenForRepo": 274,
          "commitsBetweenForFile": 1,
          "actualSource": "void inferAllScopes(Node node) {\n    (new NodeTraversal(compiler, new FirstScopeBuildingCallback(), scopeCreator)).traverseWithScope(node, topScope);\n    (new NodeTraversal(compiler, new SecondScopeBuildingCallback(), scopeCreator)).traverseWithScope(node, topScope);\n}",
          "path": "src/com/google/javascript/jscomp/TypeInferencePass.java",
          "functionStartLine": 77,
          "functionName": "inferAllScopes",
          "functionAnnotation": "",
          "functionDoc": "Entry point for type inference when running over part of the tree.\n",
          "diff": "@@ -1,9 +1,4 @@\n-void inferTypes(NodeTraversal t, Node n, Scope scope) {\n-    TypeInference typeInference \u003d new TypeInference(compiler, computeCfg(n), reverseInterpreter, scope, assertionFunctionsMap);\n-    try {\n-        typeInference.analyze();\n-        compiler.getTypeRegistry().resolveTypesInScope(scope);\n-    } catch (DataFlowAnalysis.MaxIterationsExceededException e) {\n-        compiler.report(t.makeError(n, DATAFLOW_ERROR));\n-    }\n+void inferAllScopes(Node node) {\n+    (new NodeTraversal(compiler, new FirstScopeBuildingCallback(), scopeCreator)).traverseWithScope(node, topScope);\n+    (new NodeTraversal(compiler, new SecondScopeBuildingCallback(), scopeCreator)).traverseWithScope(node, topScope);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "Entry point for type inference when running over part of the tree.\n"
          }
        }
      ]
    },
    "dff730a3759cad9c491f72d9905eee93962d3d35": {
      "type": "Ybodychange",
      "commitMessage": "\nBreak out basic function analysis into a separate pass, rather\nthan trying to do it as we go.\nThere should be no functional change, but this should make it\na lot easier to move things around in the future.\n\nR\u003dacleung\nDELTA\u003d332  (224 added, 89 deleted, 19 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3318\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1460 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/21/11, 5:18 PM",
      "commitName": "dff730a3759cad9c491f72d9905eee93962d3d35",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "7/28/11, 4:19 PM",
      "commitNameOld": "76abdf11394c0e7515ae63335676ea3657badb45",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 55.04,
      "commitsBetweenForRepo": 144,
      "commitsBetweenForFile": 1,
      "actualSource": "void inferTypes(NodeTraversal t, Node n, Scope scope) {\n    TypeInference typeInference \u003d new TypeInference(compiler, computeCfg(n), reverseInterpreter, scope, assertionFunctionsMap);\n    try {\n        typeInference.analyze();\n        compiler.getTypeRegistry().resolveTypesInScope(scope);\n    } catch (DataFlowAnalysis.MaxIterationsExceededException e) {\n        compiler.report(t.makeError(n, DATAFLOW_ERROR));\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeInferencePass.java",
      "functionStartLine": 103,
      "functionName": "inferTypes",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,10 +1,9 @@\n void inferTypes(NodeTraversal t, Node n, Scope scope) {\n-    TypeInference typeInference \u003d new TypeInference(compiler, computeCfg(n), reverseInterpreter, scope, assertionFunctionsMap, getUnflowableVars(scope));\n+    TypeInference typeInference \u003d new TypeInference(compiler, computeCfg(n), reverseInterpreter, scope, assertionFunctionsMap);\n     try {\n         typeInference.analyze();\n-        escapedLocalVars.putAll(typeInference.getAssignedOuterLocalVars());\n         compiler.getTypeRegistry().resolveTypesInScope(scope);\n     } catch (DataFlowAnalysis.MaxIterationsExceededException e) {\n         compiler.report(t.makeError(n, DATAFLOW_ERROR));\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "279196b617c5de1ade21110979b6b13d8eda6342": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/05/04 by nick\n\n        Pipe everything through the module code path.\n        This teases out a bunch of edge-case bugs that worked in the non-module\n        code path, but not the module code path (and vice-versa)\n\n        R\u003dalan\n        DELTA\u003d136  (67 added, 19 deleted, 50 changed)\n\nChange on 2010/05/04 by nick\n\n        fiddle with the check_global_this_level decision tree\n        This should be off by default if collapse_properties is off,\n        and on by default if collapse_properties is on.\n\n        R\u003dalan\n        DELTA\u003d47  (32 added, 4 deleted, 11 changed)\n\nChange on 2010/05/04 by andrew\n\n        -Infer that arguments to goog.asserts.assert() are non-nullable after the\n        call.\n        -Infer the types of arguments to goog.asserts.assert{String,Number,...} after\n        the call.\n\n        Tested:\n          -Added new unit tests.\n\n        R\u003dnick\n        DELTA\u003d277  (266 added, 4 deleted, 7 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dqdhuno\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@203 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/5/10, 4:36 PM",
      "commitName": "279196b617c5de1ade21110979b6b13d8eda6342",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "3/29/10, 7:04 AM",
      "commitNameOld": "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 37.4,
      "commitsBetweenForRepo": 41,
      "commitsBetweenForFile": 1,
      "actualSource": "void inferTypes(NodeTraversal t, Node n, Scope scope) {\n    TypeInference typeInference \u003d new TypeInference(compiler, computeCfg(n), reverseInterpreter, scope, assertionFunctionsMap, getUnflowableVars(scope));\n    try {\n        typeInference.analyze();\n        escapedLocalVars.putAll(typeInference.getAssignedOuterLocalVars());\n        compiler.getTypeRegistry().resolveTypesInScope(scope);\n    } catch (DataFlowAnalysis.MaxIterationsExceededException e) {\n        compiler.report(t.makeError(n, DATAFLOW_ERROR));\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeInferencePass.java",
      "functionStartLine": 103,
      "functionName": "inferTypes",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,10 +1,10 @@\n void inferTypes(NodeTraversal t, Node n, Scope scope) {\n-    TypeInference typeInference \u003d new TypeInference(compiler, computeCfg(n), reverseInterpreter, scope, getUnflowableVars(scope));\n+    TypeInference typeInference \u003d new TypeInference(compiler, computeCfg(n), reverseInterpreter, scope, assertionFunctionsMap, getUnflowableVars(scope));\n     try {\n         typeInference.analyze();\n         escapedLocalVars.putAll(typeInference.getAssignedOuterLocalVars());\n         compiler.getTypeRegistry().resolveTypesInScope(scope);\n     } catch (DataFlowAnalysis.MaxIterationsExceededException e) {\n         compiler.report(t.makeError(n, DATAFLOW_ERROR));\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4": {
      "type": "Ybodychange",
      "commitMessage": "Remove circular dependency between error-reporting and the rest\nof the compiler. (Nick)\nR\u003dalan\nDELTA\u003d152  (27 added, 28 deleted, 97 changed)\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@159 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/29/10, 7:04 AM",
      "commitName": "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "2/8/10, 3:25 PM",
      "commitNameOld": "c0face2a48665e46f4829f54ee24cfa4cf8d4589",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 48.61,
      "commitsBetweenForRepo": 62,
      "commitsBetweenForFile": 1,
      "actualSource": "void inferTypes(NodeTraversal t, Node n, Scope scope) {\n    TypeInference typeInference \u003d new TypeInference(compiler, computeCfg(n), reverseInterpreter, scope, getUnflowableVars(scope));\n    try {\n        typeInference.analyze();\n        escapedLocalVars.putAll(typeInference.getAssignedOuterLocalVars());\n        compiler.getTypeRegistry().resolveTypesInScope(scope);\n    } catch (DataFlowAnalysis.MaxIterationsExceededException e) {\n        compiler.report(t.makeError(n, DATAFLOW_ERROR));\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeInferencePass.java",
      "functionStartLine": 92,
      "functionName": "inferTypes",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,10 +1,10 @@\n void inferTypes(NodeTraversal t, Node n, Scope scope) {\n     TypeInference typeInference \u003d new TypeInference(compiler, computeCfg(n), reverseInterpreter, scope, getUnflowableVars(scope));\n     try {\n         typeInference.analyze();\n         escapedLocalVars.putAll(typeInference.getAssignedOuterLocalVars());\n         compiler.getTypeRegistry().resolveTypesInScope(scope);\n     } catch (DataFlowAnalysis.MaxIterationsExceededException e) {\n-        compiler.report(JSError.make(t, n, DATAFLOW_ERROR));\n+        compiler.report(t.makeError(n, DATAFLOW_ERROR));\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c0face2a48665e46f4829f54ee24cfa4cf8d4589": {
      "type": "Ybodychange",
      "commitMessage": "Fix a bug in type inference when there are more than two inner\nfunctions in a local scope.\n\nAdd a --print_pass_graph flag that prints the passes run as a DOT file.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@96 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/8/10, 3:25 PM",
      "commitName": "c0face2a48665e46f4829f54ee24cfa4cf8d4589",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "2/1/10, 4:09 PM",
      "commitNameOld": "f78e933dbc678936ed5fcf453ab3c80b87d1e59d",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 6.97,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "void inferTypes(NodeTraversal t, Node n, Scope scope) {\n    TypeInference typeInference \u003d new TypeInference(compiler, computeCfg(n), reverseInterpreter, scope, getUnflowableVars(scope));\n    try {\n        typeInference.analyze();\n        escapedLocalVars.putAll(typeInference.getAssignedOuterLocalVars());\n        compiler.getTypeRegistry().resolveTypesInScope(scope);\n    } catch (DataFlowAnalysis.MaxIterationsExceededException e) {\n        compiler.report(JSError.make(t, n, DATAFLOW_ERROR));\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeInferencePass.java",
      "functionStartLine": 92,
      "functionName": "inferTypes",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,10 +1,10 @@\n void inferTypes(NodeTraversal t, Node n, Scope scope) {\n-    TypeInference typeInference \u003d new TypeInference(compiler, computeCfg(n), reverseInterpreter, scope, escapedLocalVars.get(scope));\n+    TypeInference typeInference \u003d new TypeInference(compiler, computeCfg(n), reverseInterpreter, scope, getUnflowableVars(scope));\n     try {\n         typeInference.analyze();\n         escapedLocalVars.putAll(typeInference.getAssignedOuterLocalVars());\n         compiler.getTypeRegistry().resolveTypesInScope(scope);\n     } catch (DataFlowAnalysis.MaxIterationsExceededException e) {\n         compiler.report(JSError.make(t, n, DATAFLOW_ERROR));\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f78e933dbc678936ed5fcf453ab3c80b87d1e59d": {
      "type": "Ybodychange",
      "commitMessage": "Don\u0027t do local type inference on local vars that are assigned in inner\nscopes, because it\u0027s pretty close to impossible to do it right.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@84 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/1/10, 4:09 PM",
      "commitName": "f78e933dbc678936ed5fcf453ab3c80b87d1e59d",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "11/3/09, 3:51 PM",
      "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 90.01,
      "commitsBetweenForRepo": 61,
      "commitsBetweenForFile": 1,
      "actualSource": "void inferTypes(NodeTraversal t, Node n, Scope scope) {\n    TypeInference typeInference \u003d new TypeInference(compiler, computeCfg(n), reverseInterpreter, scope, escapedLocalVars.get(scope));\n    try {\n        typeInference.analyze();\n        escapedLocalVars.putAll(typeInference.getAssignedOuterLocalVars());\n        compiler.getTypeRegistry().resolveTypesInScope(scope);\n    } catch (DataFlowAnalysis.MaxIterationsExceededException e) {\n        compiler.report(JSError.make(t, n, DATAFLOW_ERROR));\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeInferencePass.java",
      "functionStartLine": 79,
      "functionName": "inferTypes",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,9 +1,10 @@\n void inferTypes(NodeTraversal t, Node n, Scope scope) {\n-    TypeInference typeInference \u003d new TypeInference(compiler, computeCfg(n), reverseInterpreter, scope);\n+    TypeInference typeInference \u003d new TypeInference(compiler, computeCfg(n), reverseInterpreter, scope, escapedLocalVars.get(scope));\n     try {\n         typeInference.analyze();\n+        escapedLocalVars.putAll(typeInference.getAssignedOuterLocalVars());\n         compiler.getTypeRegistry().resolveTypesInScope(scope);\n     } catch (DataFlowAnalysis.MaxIterationsExceededException e) {\n         compiler.report(JSError.make(t, n, DATAFLOW_ERROR));\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,9 @@\n+void inferTypes(NodeTraversal t, Node n, Scope scope) {\n+    TypeInference typeInference \u003d new TypeInference(compiler, computeCfg(n), reverseInterpreter, scope);\n+    try {\n+        typeInference.analyze();\n+        compiler.getTypeRegistry().resolveTypesInScope(scope);\n+    } catch (DataFlowAnalysis.MaxIterationsExceededException e) {\n+        compiler.report(JSError.make(t, n, DATAFLOW_ERROR));\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "void inferTypes(NodeTraversal t, Node n, Scope scope) {\n    TypeInference typeInference \u003d new TypeInference(compiler, computeCfg(n), reverseInterpreter, scope);\n    try {\n        typeInference.analyze();\n        compiler.getTypeRegistry().resolveTypesInScope(scope);\n    } catch (DataFlowAnalysis.MaxIterationsExceededException e) {\n        compiler.report(JSError.make(t, n, DATAFLOW_ERROR));\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeInferencePass.java",
      "functionStartLine": 71,
      "functionName": "inferTypes",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}