{
  "origin": "codeshovel",
  "repositoryName": "Closure-2b",
  "repositoryPath": "/tmp/Closure-2b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FunctionTypeBuilder.java",
  "functionName": "inferFromOverriddenFunction",
  "functionId": "inferFromOverriddenFunction___oldType-FunctionType(annotations-@Nullable)__paramsParent-Node(annotations-@Nullable)",
  "sourceFilePath": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
  "functionAnnotation": "",
  "functionDoc": "Infer the parameter and return types of a function from\nthe parameter and return types of the function it is overriding.\n\n@param oldType The function being overridden. Does nothing if this is null.\n@param paramsParent The LP node of the function that we\u0027re assigning to.\n    If null, that just means we\u0027re not initializing this to a function\n    literal.\n",
  "functionStartLine": 233,
  "functionEndLine": 291,
  "numCommitsSeen": 68,
  "timeTaken": 2355,
  "changeHistory": [
    "7607c67e6094775757ae2fa50793a6b99dd28a89",
    "00b1517c53912ac6843c257c0a6ead1176e8c5ee",
    "f147cca743f4975fc88e26001a8efc74d592cfd1",
    "b8fb1c4377809503625087f13c1ade664ce9b7e2",
    "6a36f04485599820ff86441accee002b4deec2eb",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "7607c67e6094775757ae2fa50793a6b99dd28a89": "Ybodychange",
    "00b1517c53912ac6843c257c0a6ead1176e8c5ee": "Ybodychange",
    "f147cca743f4975fc88e26001a8efc74d592cfd1": "Ybodychange",
    "b8fb1c4377809503625087f13c1ade664ce9b7e2": "Ymultichange(Ybodychange,Yparametermetachange,Ydocchange)",
    "6a36f04485599820ff86441accee002b4deec2eb": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7607c67e6094775757ae2fa50793a6b99dd28a89": {
      "type": "Ybodychange",
      "commitMessage": "\nslight tweak to arity checking:\nif the subclass method doesn\u0027t need all the arguments\nof the superclass method, then don\u0027t require them\n\nR\u003djohnlenz\nDELTA\u003d73  (62 added, 7 deleted, 4 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d4217\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1777 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/14/12, 8:12 AM",
      "commitName": "7607c67e6094775757ae2fa50793a6b99dd28a89",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "1/23/12, 3:36 PM",
      "commitNameOld": "00b1517c53912ac6843c257c0a6ead1176e8c5ee",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 21.69,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "actualSource": "FunctionTypeBuilder inferFromOverriddenFunction(@Nullable FunctionType oldType, @Nullable Node paramsParent) {\n    if (oldType \u003d\u003d null) {\n        return this;\n    }\n    returnType \u003d oldType.getReturnType();\n    returnTypeInferred \u003d oldType.isReturnTypeInferred();\n    if (paramsParent \u003d\u003d null) {\n        parametersNode \u003d oldType.getParametersNode();\n        if (parametersNode \u003d\u003d null) {\n            parametersNode \u003d new FunctionParamBuilder(typeRegistry).build();\n        }\n    } else {\n        FunctionParamBuilder paramBuilder \u003d new FunctionParamBuilder(typeRegistry);\n        Iterator\u003cNode\u003e oldParams \u003d oldType.getParameters().iterator();\n        boolean warnedAboutArgList \u003d false;\n        boolean oldParamsListHitOptArgs \u003d false;\n        for (Node currentParam \u003d paramsParent.getFirstChild(); currentParam !\u003d null; currentParam \u003d currentParam.getNext()) {\n            if (oldParams.hasNext()) {\n                Node oldParam \u003d oldParams.next();\n                Node newParam \u003d paramBuilder.newParameterFromNode(oldParam);\n                oldParamsListHitOptArgs \u003d oldParamsListHitOptArgs || oldParam.isVarArgs() || oldParam.isOptionalArg();\n                if (currentParam.getNext() !\u003d null \u0026\u0026 newParam.isVarArgs()) {\n                    newParam.setVarArgs(false);\n                    newParam.setOptionalArg(true);\n                }\n            } else {\n                warnedAboutArgList |\u003d addParameter(paramBuilder, typeRegistry.getNativeType(UNKNOWN_TYPE), warnedAboutArgList, codingConvention.isOptionalParameter(currentParam) || oldParamsListHitOptArgs, codingConvention.isVarArgsParameter(currentParam));\n            }\n        }\n        while (oldParams.hasNext()) {\n            paramBuilder.newOptionalParameterFromNode(oldParams.next());\n        }\n        parametersNode \u003d paramBuilder.build();\n    }\n    return this;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
      "functionStartLine": 242,
      "functionName": "inferFromOverriddenFunction",
      "functionAnnotation": "",
      "functionDoc": "Infer the parameter and return types of a function from\nthe parameter and return types of the function it is overriding.\n\n@param oldType The function being overridden. Does nothing if this is null.\n@param paramsParent The LP node of the function that we\u0027re assigning to.\n    If null, that just means we\u0027re not initializing this to a function\n    literal.\n",
      "diff": "@@ -1,36 +1,36 @@\n FunctionTypeBuilder inferFromOverriddenFunction(@Nullable FunctionType oldType, @Nullable Node paramsParent) {\n     if (oldType \u003d\u003d null) {\n         return this;\n     }\n     returnType \u003d oldType.getReturnType();\n     returnTypeInferred \u003d oldType.isReturnTypeInferred();\n     if (paramsParent \u003d\u003d null) {\n         parametersNode \u003d oldType.getParametersNode();\n         if (parametersNode \u003d\u003d null) {\n             parametersNode \u003d new FunctionParamBuilder(typeRegistry).build();\n         }\n     } else {\n         FunctionParamBuilder paramBuilder \u003d new FunctionParamBuilder(typeRegistry);\n         Iterator\u003cNode\u003e oldParams \u003d oldType.getParameters().iterator();\n         boolean warnedAboutArgList \u003d false;\n         boolean oldParamsListHitOptArgs \u003d false;\n         for (Node currentParam \u003d paramsParent.getFirstChild(); currentParam !\u003d null; currentParam \u003d currentParam.getNext()) {\n             if (oldParams.hasNext()) {\n                 Node oldParam \u003d oldParams.next();\n                 Node newParam \u003d paramBuilder.newParameterFromNode(oldParam);\n                 oldParamsListHitOptArgs \u003d oldParamsListHitOptArgs || oldParam.isVarArgs() || oldParam.isOptionalArg();\n                 if (currentParam.getNext() !\u003d null \u0026\u0026 newParam.isVarArgs()) {\n                     newParam.setVarArgs(false);\n                     newParam.setOptionalArg(true);\n                 }\n             } else {\n                 warnedAboutArgList |\u003d addParameter(paramBuilder, typeRegistry.getNativeType(UNKNOWN_TYPE), warnedAboutArgList, codingConvention.isOptionalParameter(currentParam) || oldParamsListHitOptArgs, codingConvention.isVarArgsParameter(currentParam));\n             }\n         }\n         while (oldParams.hasNext()) {\n-            paramBuilder.newParameterFromNode(oldParams.next());\n+            paramBuilder.newOptionalParameterFromNode(oldParams.next());\n         }\n         parametersNode \u003d paramBuilder.build();\n     }\n     return this;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "00b1517c53912ac6843c257c0a6ead1176e8c5ee": {
      "type": "Ybodychange",
      "commitMessage": "\nWhen inferring a function type, there may be formal parameters\nthat do not appear in the function literal\nFixes issue 368\n\nTested:\nyes\n\nR\u003djohnlenz\nDELTA\u003d47  (37 added, 6 deleted, 4 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d4126\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1742 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/23/12, 3:36 PM",
      "commitName": "00b1517c53912ac6843c257c0a6ead1176e8c5ee",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "11/22/11, 2:28 PM",
      "commitNameOld": "9dfbc803407e714f9744555a1c9e7c4230f1816d",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 62.05,
      "commitsBetweenForRepo": 90,
      "commitsBetweenForFile": 1,
      "actualSource": "FunctionTypeBuilder inferFromOverriddenFunction(@Nullable FunctionType oldType, @Nullable Node paramsParent) {\n    if (oldType \u003d\u003d null) {\n        return this;\n    }\n    returnType \u003d oldType.getReturnType();\n    returnTypeInferred \u003d oldType.isReturnTypeInferred();\n    if (paramsParent \u003d\u003d null) {\n        parametersNode \u003d oldType.getParametersNode();\n        if (parametersNode \u003d\u003d null) {\n            parametersNode \u003d new FunctionParamBuilder(typeRegistry).build();\n        }\n    } else {\n        FunctionParamBuilder paramBuilder \u003d new FunctionParamBuilder(typeRegistry);\n        Iterator\u003cNode\u003e oldParams \u003d oldType.getParameters().iterator();\n        boolean warnedAboutArgList \u003d false;\n        boolean oldParamsListHitOptArgs \u003d false;\n        for (Node currentParam \u003d paramsParent.getFirstChild(); currentParam !\u003d null; currentParam \u003d currentParam.getNext()) {\n            if (oldParams.hasNext()) {\n                Node oldParam \u003d oldParams.next();\n                Node newParam \u003d paramBuilder.newParameterFromNode(oldParam);\n                oldParamsListHitOptArgs \u003d oldParamsListHitOptArgs || oldParam.isVarArgs() || oldParam.isOptionalArg();\n                if (currentParam.getNext() !\u003d null \u0026\u0026 newParam.isVarArgs()) {\n                    newParam.setVarArgs(false);\n                    newParam.setOptionalArg(true);\n                }\n            } else {\n                warnedAboutArgList |\u003d addParameter(paramBuilder, typeRegistry.getNativeType(UNKNOWN_TYPE), warnedAboutArgList, codingConvention.isOptionalParameter(currentParam) || oldParamsListHitOptArgs, codingConvention.isVarArgsParameter(currentParam));\n            }\n        }\n        while (oldParams.hasNext()) {\n            paramBuilder.newParameterFromNode(oldParams.next());\n        }\n        parametersNode \u003d paramBuilder.build();\n    }\n    return this;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
      "functionStartLine": 242,
      "functionName": "inferFromOverriddenFunction",
      "functionAnnotation": "",
      "functionDoc": "Infer the parameter and return types of a function from\nthe parameter and return types of the function it is overriding.\n\n@param oldType The function being overridden. Does nothing if this is null.\n@param paramsParent The LP node of the function that we\u0027re assigning to.\n    If null, that just means we\u0027re not initializing this to a function\n    literal.\n",
      "diff": "@@ -1,33 +1,36 @@\n FunctionTypeBuilder inferFromOverriddenFunction(@Nullable FunctionType oldType, @Nullable Node paramsParent) {\n     if (oldType \u003d\u003d null) {\n         return this;\n     }\n     returnType \u003d oldType.getReturnType();\n     returnTypeInferred \u003d oldType.isReturnTypeInferred();\n     if (paramsParent \u003d\u003d null) {\n         parametersNode \u003d oldType.getParametersNode();\n         if (parametersNode \u003d\u003d null) {\n             parametersNode \u003d new FunctionParamBuilder(typeRegistry).build();\n         }\n     } else {\n         FunctionParamBuilder paramBuilder \u003d new FunctionParamBuilder(typeRegistry);\n         Iterator\u003cNode\u003e oldParams \u003d oldType.getParameters().iterator();\n         boolean warnedAboutArgList \u003d false;\n         boolean oldParamsListHitOptArgs \u003d false;\n         for (Node currentParam \u003d paramsParent.getFirstChild(); currentParam !\u003d null; currentParam \u003d currentParam.getNext()) {\n             if (oldParams.hasNext()) {\n                 Node oldParam \u003d oldParams.next();\n                 Node newParam \u003d paramBuilder.newParameterFromNode(oldParam);\n                 oldParamsListHitOptArgs \u003d oldParamsListHitOptArgs || oldParam.isVarArgs() || oldParam.isOptionalArg();\n                 if (currentParam.getNext() !\u003d null \u0026\u0026 newParam.isVarArgs()) {\n                     newParam.setVarArgs(false);\n                     newParam.setOptionalArg(true);\n                 }\n             } else {\n                 warnedAboutArgList |\u003d addParameter(paramBuilder, typeRegistry.getNativeType(UNKNOWN_TYPE), warnedAboutArgList, codingConvention.isOptionalParameter(currentParam) || oldParamsListHitOptArgs, codingConvention.isVarArgsParameter(currentParam));\n             }\n         }\n+        while (oldParams.hasNext()) {\n+            paramBuilder.newParameterFromNode(oldParams.next());\n+        }\n         parametersNode \u003d paramBuilder.build();\n     }\n     return this;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f147cca743f4975fc88e26001a8efc74d592cfd1": {
      "type": "Ybodychange",
      "commitMessage": "\nfix a logic error in pulling optionality off supertypes.\n\nR\u003djohnlenz\nDELTA\u003d22  (19 added, 1 deleted, 2 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d56001\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@299 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/20/10, 2:31 PM",
      "commitName": "f147cca743f4975fc88e26001a8efc74d592cfd1",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "6/30/10, 3:28 PM",
      "commitNameOld": "b8fb1c4377809503625087f13c1ade664ce9b7e2",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 19.96,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "actualSource": "FunctionTypeBuilder inferFromOverriddenFunction(@Nullable FunctionType oldType, @Nullable Node paramsParent) {\n    if (oldType \u003d\u003d null) {\n        return this;\n    }\n    returnType \u003d oldType.getReturnType();\n    returnTypeInferred \u003d oldType.isReturnTypeInferred();\n    if (paramsParent \u003d\u003d null) {\n        parametersNode \u003d oldType.getParametersNode();\n        if (parametersNode \u003d\u003d null) {\n            parametersNode \u003d new FunctionParamBuilder(typeRegistry).build();\n        }\n    } else {\n        FunctionParamBuilder paramBuilder \u003d new FunctionParamBuilder(typeRegistry);\n        Iterator\u003cNode\u003e oldParams \u003d oldType.getParameters().iterator();\n        boolean warnedAboutArgList \u003d false;\n        boolean oldParamsListHitOptArgs \u003d false;\n        for (Node currentParam \u003d paramsParent.getFirstChild(); currentParam !\u003d null; currentParam \u003d currentParam.getNext()) {\n            if (oldParams.hasNext()) {\n                Node oldParam \u003d oldParams.next();\n                Node newParam \u003d paramBuilder.newParameterFromNode(oldParam);\n                oldParamsListHitOptArgs \u003d oldParamsListHitOptArgs || oldParam.isVarArgs() || oldParam.isOptionalArg();\n                if (currentParam.getNext() !\u003d null \u0026\u0026 newParam.isVarArgs()) {\n                    newParam.setVarArgs(false);\n                    newParam.setOptionalArg(true);\n                }\n            } else {\n                warnedAboutArgList |\u003d addParameter(paramBuilder, typeRegistry.getNativeType(UNKNOWN_TYPE), warnedAboutArgList, codingConvention.isOptionalParameter(currentParam) || oldParamsListHitOptArgs, codingConvention.isVarArgsParameter(currentParam));\n            }\n        }\n        parametersNode \u003d paramBuilder.build();\n    }\n    return this;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
      "functionStartLine": 162,
      "functionName": "inferFromOverriddenFunction",
      "functionAnnotation": "",
      "functionDoc": "Infer the parameter and return types of a function from\nthe parameter and return types of the function it is overriding.\n\n@param oldType The function being overridden. Does nothing if this is null.\n@param paramsParent The LP node of the function that we\u0027re assigning to.\n    If null, that just means we\u0027re not initializing this to a function\n    literal.\n",
      "diff": "@@ -1,33 +1,33 @@\n FunctionTypeBuilder inferFromOverriddenFunction(@Nullable FunctionType oldType, @Nullable Node paramsParent) {\n     if (oldType \u003d\u003d null) {\n         return this;\n     }\n     returnType \u003d oldType.getReturnType();\n     returnTypeInferred \u003d oldType.isReturnTypeInferred();\n     if (paramsParent \u003d\u003d null) {\n         parametersNode \u003d oldType.getParametersNode();\n         if (parametersNode \u003d\u003d null) {\n             parametersNode \u003d new FunctionParamBuilder(typeRegistry).build();\n         }\n     } else {\n         FunctionParamBuilder paramBuilder \u003d new FunctionParamBuilder(typeRegistry);\n         Iterator\u003cNode\u003e oldParams \u003d oldType.getParameters().iterator();\n         boolean warnedAboutArgList \u003d false;\n-        boolean oldParamsNodeHasVarArgs \u003d false;\n+        boolean oldParamsListHitOptArgs \u003d false;\n         for (Node currentParam \u003d paramsParent.getFirstChild(); currentParam !\u003d null; currentParam \u003d currentParam.getNext()) {\n             if (oldParams.hasNext()) {\n                 Node oldParam \u003d oldParams.next();\n                 Node newParam \u003d paramBuilder.newParameterFromNode(oldParam);\n+                oldParamsListHitOptArgs \u003d oldParamsListHitOptArgs || oldParam.isVarArgs() || oldParam.isOptionalArg();\n                 if (currentParam.getNext() !\u003d null \u0026\u0026 newParam.isVarArgs()) {\n                     newParam.setVarArgs(false);\n                     newParam.setOptionalArg(true);\n-                    oldParamsNodeHasVarArgs \u003d true;\n                 }\n             } else {\n-                warnedAboutArgList |\u003d addParameter(paramBuilder, typeRegistry.getNativeType(UNKNOWN_TYPE), warnedAboutArgList, codingConvention.isOptionalParameter(currentParam) || oldParamsNodeHasVarArgs, codingConvention.isVarArgsParameter(currentParam));\n+                warnedAboutArgList |\u003d addParameter(paramBuilder, typeRegistry.getNativeType(UNKNOWN_TYPE), warnedAboutArgList, codingConvention.isOptionalParameter(currentParam) || oldParamsListHitOptArgs, codingConvention.isVarArgsParameter(currentParam));\n             }\n         }\n         parametersNode \u003d paramBuilder.build();\n     }\n     return this;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b8fb1c4377809503625087f13c1ade664ce9b7e2": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange,Ydocchange)",
      "commitMessage": "\nChange on 2010/06/29 13:33:11 by nicksantos\n\n\tBe more aggressive about pulling param/return types off the overridden\n\tmethod.\n\n\tR\u003djohnlenz\n\tDELTA\u003d198  (149 added, 21 deleted, 28 changed)\n\nChange on 2010/06/30 05:24:10 by nthomas\n\n\tAdd ontouch{cancel,end,move,start} attribute declarations per the Safari Reference Library:\n\thttp://developer.apple.com/safari/library/documentation/AppleApplications/Reference/SafariHTMLRef/Articles/Attributes.html\n\n\tR\u003dacleung\n\tDELTA\u003d28  (28 added, 0 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d47001\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@259 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/30/10, 3:28 PM",
      "commitName": "b8fb1c4377809503625087f13c1ade664ce9b7e2",
      "commitAuthor": "Nicholas.J.Santos",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "\nChange on 2010/06/29 13:33:11 by nicksantos\n\n\tBe more aggressive about pulling param/return types off the overridden\n\tmethod.\n\n\tR\u003djohnlenz\n\tDELTA\u003d198  (149 added, 21 deleted, 28 changed)\n\nChange on 2010/06/30 05:24:10 by nthomas\n\n\tAdd ontouch{cancel,end,move,start} attribute declarations per the Safari Reference Library:\n\thttp://developer.apple.com/safari/library/documentation/AppleApplications/Reference/SafariHTMLRef/Articles/Attributes.html\n\n\tR\u003dacleung\n\tDELTA\u003d28  (28 added, 0 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d47001\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@259 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "6/30/10, 3:28 PM",
          "commitName": "b8fb1c4377809503625087f13c1ade664ce9b7e2",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "6/22/10, 5:19 PM",
          "commitNameOld": "465282f1ca28a208b06c47b55fd292d4631c55da",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 7.92,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "actualSource": "FunctionTypeBuilder inferFromOverriddenFunction(@Nullable FunctionType oldType, @Nullable Node paramsParent) {\n    if (oldType \u003d\u003d null) {\n        return this;\n    }\n    returnType \u003d oldType.getReturnType();\n    returnTypeInferred \u003d oldType.isReturnTypeInferred();\n    if (paramsParent \u003d\u003d null) {\n        parametersNode \u003d oldType.getParametersNode();\n        if (parametersNode \u003d\u003d null) {\n            parametersNode \u003d new FunctionParamBuilder(typeRegistry).build();\n        }\n    } else {\n        FunctionParamBuilder paramBuilder \u003d new FunctionParamBuilder(typeRegistry);\n        Iterator\u003cNode\u003e oldParams \u003d oldType.getParameters().iterator();\n        boolean warnedAboutArgList \u003d false;\n        boolean oldParamsNodeHasVarArgs \u003d false;\n        for (Node currentParam \u003d paramsParent.getFirstChild(); currentParam !\u003d null; currentParam \u003d currentParam.getNext()) {\n            if (oldParams.hasNext()) {\n                Node oldParam \u003d oldParams.next();\n                Node newParam \u003d paramBuilder.newParameterFromNode(oldParam);\n                if (currentParam.getNext() !\u003d null \u0026\u0026 newParam.isVarArgs()) {\n                    newParam.setVarArgs(false);\n                    newParam.setOptionalArg(true);\n                    oldParamsNodeHasVarArgs \u003d true;\n                }\n            } else {\n                warnedAboutArgList |\u003d addParameter(paramBuilder, typeRegistry.getNativeType(UNKNOWN_TYPE), warnedAboutArgList, codingConvention.isOptionalParameter(currentParam) || oldParamsNodeHasVarArgs, codingConvention.isVarArgsParameter(currentParam));\n            }\n        }\n        parametersNode \u003d paramBuilder.build();\n    }\n    return this;\n}",
          "path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
          "functionStartLine": 162,
          "functionName": "inferFromOverriddenFunction",
          "functionAnnotation": "",
          "functionDoc": "Infer the parameter and return types of a function from\nthe parameter and return types of the function it is overriding.\n\n@param oldType The function being overridden. Does nothing if this is null.\n@param paramsParent The LP node of the function that we\u0027re assigning to.\n    If null, that just means we\u0027re not initializing this to a function\n    literal.\n",
          "diff": "@@ -1,22 +1,33 @@\n-FunctionTypeBuilder inferFromOverriddenFunction(FunctionType oldType, @Nullable Node paramsParent) {\n+FunctionTypeBuilder inferFromOverriddenFunction(@Nullable FunctionType oldType, @Nullable Node paramsParent) {\n+    if (oldType \u003d\u003d null) {\n+        return this;\n+    }\n     returnType \u003d oldType.getReturnType();\n+    returnTypeInferred \u003d oldType.isReturnTypeInferred();\n     if (paramsParent \u003d\u003d null) {\n         parametersNode \u003d oldType.getParametersNode();\n         if (parametersNode \u003d\u003d null) {\n             parametersNode \u003d new FunctionParamBuilder(typeRegistry).build();\n         }\n     } else {\n         FunctionParamBuilder paramBuilder \u003d new FunctionParamBuilder(typeRegistry);\n         Iterator\u003cNode\u003e oldParams \u003d oldType.getParameters().iterator();\n         boolean warnedAboutArgList \u003d false;\n+        boolean oldParamsNodeHasVarArgs \u003d false;\n         for (Node currentParam \u003d paramsParent.getFirstChild(); currentParam !\u003d null; currentParam \u003d currentParam.getNext()) {\n             if (oldParams.hasNext()) {\n-                paramBuilder.newParameterFromNode(oldParams.next());\n+                Node oldParam \u003d oldParams.next();\n+                Node newParam \u003d paramBuilder.newParameterFromNode(oldParam);\n+                if (currentParam.getNext() !\u003d null \u0026\u0026 newParam.isVarArgs()) {\n+                    newParam.setVarArgs(false);\n+                    newParam.setOptionalArg(true);\n+                    oldParamsNodeHasVarArgs \u003d true;\n+                }\n             } else {\n-                warnedAboutArgList |\u003d addParameter(paramBuilder, typeRegistry.getNativeType(UNKNOWN_TYPE), warnedAboutArgList, codingConvention.isOptionalParameter(currentParam), codingConvention.isVarArgsParameter(currentParam));\n+                warnedAboutArgList |\u003d addParameter(paramBuilder, typeRegistry.getNativeType(UNKNOWN_TYPE), warnedAboutArgList, codingConvention.isOptionalParameter(currentParam) || oldParamsNodeHasVarArgs, codingConvention.isVarArgsParameter(currentParam));\n             }\n         }\n         parametersNode \u003d paramBuilder.build();\n     }\n     return this;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "\nChange on 2010/06/29 13:33:11 by nicksantos\n\n\tBe more aggressive about pulling param/return types off the overridden\n\tmethod.\n\n\tR\u003djohnlenz\n\tDELTA\u003d198  (149 added, 21 deleted, 28 changed)\n\nChange on 2010/06/30 05:24:10 by nthomas\n\n\tAdd ontouch{cancel,end,move,start} attribute declarations per the Safari Reference Library:\n\thttp://developer.apple.com/safari/library/documentation/AppleApplications/Reference/SafariHTMLRef/Articles/Attributes.html\n\n\tR\u003dacleung\n\tDELTA\u003d28  (28 added, 0 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d47001\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@259 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "6/30/10, 3:28 PM",
          "commitName": "b8fb1c4377809503625087f13c1ade664ce9b7e2",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "6/22/10, 5:19 PM",
          "commitNameOld": "465282f1ca28a208b06c47b55fd292d4631c55da",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 7.92,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "actualSource": "FunctionTypeBuilder inferFromOverriddenFunction(@Nullable FunctionType oldType, @Nullable Node paramsParent) {\n    if (oldType \u003d\u003d null) {\n        return this;\n    }\n    returnType \u003d oldType.getReturnType();\n    returnTypeInferred \u003d oldType.isReturnTypeInferred();\n    if (paramsParent \u003d\u003d null) {\n        parametersNode \u003d oldType.getParametersNode();\n        if (parametersNode \u003d\u003d null) {\n            parametersNode \u003d new FunctionParamBuilder(typeRegistry).build();\n        }\n    } else {\n        FunctionParamBuilder paramBuilder \u003d new FunctionParamBuilder(typeRegistry);\n        Iterator\u003cNode\u003e oldParams \u003d oldType.getParameters().iterator();\n        boolean warnedAboutArgList \u003d false;\n        boolean oldParamsNodeHasVarArgs \u003d false;\n        for (Node currentParam \u003d paramsParent.getFirstChild(); currentParam !\u003d null; currentParam \u003d currentParam.getNext()) {\n            if (oldParams.hasNext()) {\n                Node oldParam \u003d oldParams.next();\n                Node newParam \u003d paramBuilder.newParameterFromNode(oldParam);\n                if (currentParam.getNext() !\u003d null \u0026\u0026 newParam.isVarArgs()) {\n                    newParam.setVarArgs(false);\n                    newParam.setOptionalArg(true);\n                    oldParamsNodeHasVarArgs \u003d true;\n                }\n            } else {\n                warnedAboutArgList |\u003d addParameter(paramBuilder, typeRegistry.getNativeType(UNKNOWN_TYPE), warnedAboutArgList, codingConvention.isOptionalParameter(currentParam) || oldParamsNodeHasVarArgs, codingConvention.isVarArgsParameter(currentParam));\n            }\n        }\n        parametersNode \u003d paramBuilder.build();\n    }\n    return this;\n}",
          "path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
          "functionStartLine": 162,
          "functionName": "inferFromOverriddenFunction",
          "functionAnnotation": "",
          "functionDoc": "Infer the parameter and return types of a function from\nthe parameter and return types of the function it is overriding.\n\n@param oldType The function being overridden. Does nothing if this is null.\n@param paramsParent The LP node of the function that we\u0027re assigning to.\n    If null, that just means we\u0027re not initializing this to a function\n    literal.\n",
          "diff": "@@ -1,22 +1,33 @@\n-FunctionTypeBuilder inferFromOverriddenFunction(FunctionType oldType, @Nullable Node paramsParent) {\n+FunctionTypeBuilder inferFromOverriddenFunction(@Nullable FunctionType oldType, @Nullable Node paramsParent) {\n+    if (oldType \u003d\u003d null) {\n+        return this;\n+    }\n     returnType \u003d oldType.getReturnType();\n+    returnTypeInferred \u003d oldType.isReturnTypeInferred();\n     if (paramsParent \u003d\u003d null) {\n         parametersNode \u003d oldType.getParametersNode();\n         if (parametersNode \u003d\u003d null) {\n             parametersNode \u003d new FunctionParamBuilder(typeRegistry).build();\n         }\n     } else {\n         FunctionParamBuilder paramBuilder \u003d new FunctionParamBuilder(typeRegistry);\n         Iterator\u003cNode\u003e oldParams \u003d oldType.getParameters().iterator();\n         boolean warnedAboutArgList \u003d false;\n+        boolean oldParamsNodeHasVarArgs \u003d false;\n         for (Node currentParam \u003d paramsParent.getFirstChild(); currentParam !\u003d null; currentParam \u003d currentParam.getNext()) {\n             if (oldParams.hasNext()) {\n-                paramBuilder.newParameterFromNode(oldParams.next());\n+                Node oldParam \u003d oldParams.next();\n+                Node newParam \u003d paramBuilder.newParameterFromNode(oldParam);\n+                if (currentParam.getNext() !\u003d null \u0026\u0026 newParam.isVarArgs()) {\n+                    newParam.setVarArgs(false);\n+                    newParam.setOptionalArg(true);\n+                    oldParamsNodeHasVarArgs \u003d true;\n+                }\n             } else {\n-                warnedAboutArgList |\u003d addParameter(paramBuilder, typeRegistry.getNativeType(UNKNOWN_TYPE), warnedAboutArgList, codingConvention.isOptionalParameter(currentParam), codingConvention.isVarArgsParameter(currentParam));\n+                warnedAboutArgList |\u003d addParameter(paramBuilder, typeRegistry.getNativeType(UNKNOWN_TYPE), warnedAboutArgList, codingConvention.isOptionalParameter(currentParam) || oldParamsNodeHasVarArgs, codingConvention.isVarArgsParameter(currentParam));\n             }\n         }\n         parametersNode \u003d paramBuilder.build();\n     }\n     return this;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[oldType-FunctionType, paramsParent-Node(annotations-@Nullable)]",
            "newValue": "[oldType-FunctionType(annotations-@Nullable), paramsParent-Node(annotations-@Nullable)]"
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "\nChange on 2010/06/29 13:33:11 by nicksantos\n\n\tBe more aggressive about pulling param/return types off the overridden\n\tmethod.\n\n\tR\u003djohnlenz\n\tDELTA\u003d198  (149 added, 21 deleted, 28 changed)\n\nChange on 2010/06/30 05:24:10 by nthomas\n\n\tAdd ontouch{cancel,end,move,start} attribute declarations per the Safari Reference Library:\n\thttp://developer.apple.com/safari/library/documentation/AppleApplications/Reference/SafariHTMLRef/Articles/Attributes.html\n\n\tR\u003dacleung\n\tDELTA\u003d28  (28 added, 0 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d47001\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@259 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "6/30/10, 3:28 PM",
          "commitName": "b8fb1c4377809503625087f13c1ade664ce9b7e2",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "6/22/10, 5:19 PM",
          "commitNameOld": "465282f1ca28a208b06c47b55fd292d4631c55da",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 7.92,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "actualSource": "FunctionTypeBuilder inferFromOverriddenFunction(@Nullable FunctionType oldType, @Nullable Node paramsParent) {\n    if (oldType \u003d\u003d null) {\n        return this;\n    }\n    returnType \u003d oldType.getReturnType();\n    returnTypeInferred \u003d oldType.isReturnTypeInferred();\n    if (paramsParent \u003d\u003d null) {\n        parametersNode \u003d oldType.getParametersNode();\n        if (parametersNode \u003d\u003d null) {\n            parametersNode \u003d new FunctionParamBuilder(typeRegistry).build();\n        }\n    } else {\n        FunctionParamBuilder paramBuilder \u003d new FunctionParamBuilder(typeRegistry);\n        Iterator\u003cNode\u003e oldParams \u003d oldType.getParameters().iterator();\n        boolean warnedAboutArgList \u003d false;\n        boolean oldParamsNodeHasVarArgs \u003d false;\n        for (Node currentParam \u003d paramsParent.getFirstChild(); currentParam !\u003d null; currentParam \u003d currentParam.getNext()) {\n            if (oldParams.hasNext()) {\n                Node oldParam \u003d oldParams.next();\n                Node newParam \u003d paramBuilder.newParameterFromNode(oldParam);\n                if (currentParam.getNext() !\u003d null \u0026\u0026 newParam.isVarArgs()) {\n                    newParam.setVarArgs(false);\n                    newParam.setOptionalArg(true);\n                    oldParamsNodeHasVarArgs \u003d true;\n                }\n            } else {\n                warnedAboutArgList |\u003d addParameter(paramBuilder, typeRegistry.getNativeType(UNKNOWN_TYPE), warnedAboutArgList, codingConvention.isOptionalParameter(currentParam) || oldParamsNodeHasVarArgs, codingConvention.isVarArgsParameter(currentParam));\n            }\n        }\n        parametersNode \u003d paramBuilder.build();\n    }\n    return this;\n}",
          "path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
          "functionStartLine": 162,
          "functionName": "inferFromOverriddenFunction",
          "functionAnnotation": "",
          "functionDoc": "Infer the parameter and return types of a function from\nthe parameter and return types of the function it is overriding.\n\n@param oldType The function being overridden. Does nothing if this is null.\n@param paramsParent The LP node of the function that we\u0027re assigning to.\n    If null, that just means we\u0027re not initializing this to a function\n    literal.\n",
          "diff": "@@ -1,22 +1,33 @@\n-FunctionTypeBuilder inferFromOverriddenFunction(FunctionType oldType, @Nullable Node paramsParent) {\n+FunctionTypeBuilder inferFromOverriddenFunction(@Nullable FunctionType oldType, @Nullable Node paramsParent) {\n+    if (oldType \u003d\u003d null) {\n+        return this;\n+    }\n     returnType \u003d oldType.getReturnType();\n+    returnTypeInferred \u003d oldType.isReturnTypeInferred();\n     if (paramsParent \u003d\u003d null) {\n         parametersNode \u003d oldType.getParametersNode();\n         if (parametersNode \u003d\u003d null) {\n             parametersNode \u003d new FunctionParamBuilder(typeRegistry).build();\n         }\n     } else {\n         FunctionParamBuilder paramBuilder \u003d new FunctionParamBuilder(typeRegistry);\n         Iterator\u003cNode\u003e oldParams \u003d oldType.getParameters().iterator();\n         boolean warnedAboutArgList \u003d false;\n+        boolean oldParamsNodeHasVarArgs \u003d false;\n         for (Node currentParam \u003d paramsParent.getFirstChild(); currentParam !\u003d null; currentParam \u003d currentParam.getNext()) {\n             if (oldParams.hasNext()) {\n-                paramBuilder.newParameterFromNode(oldParams.next());\n+                Node oldParam \u003d oldParams.next();\n+                Node newParam \u003d paramBuilder.newParameterFromNode(oldParam);\n+                if (currentParam.getNext() !\u003d null \u0026\u0026 newParam.isVarArgs()) {\n+                    newParam.setVarArgs(false);\n+                    newParam.setOptionalArg(true);\n+                    oldParamsNodeHasVarArgs \u003d true;\n+                }\n             } else {\n-                warnedAboutArgList |\u003d addParameter(paramBuilder, typeRegistry.getNativeType(UNKNOWN_TYPE), warnedAboutArgList, codingConvention.isOptionalParameter(currentParam), codingConvention.isVarArgsParameter(currentParam));\n+                warnedAboutArgList |\u003d addParameter(paramBuilder, typeRegistry.getNativeType(UNKNOWN_TYPE), warnedAboutArgList, codingConvention.isOptionalParameter(currentParam) || oldParamsNodeHasVarArgs, codingConvention.isVarArgsParameter(currentParam));\n             }\n         }\n         parametersNode \u003d paramBuilder.build();\n     }\n     return this;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Infer the parameter and return types of a function from\nthe parameter and return types of the function it is overriding.\n\n@param oldType The function being overridden.\n@param paramsParent The LP node of the function that we\u0027re assigning to.\n    If null, that just means we\u0027re not initializing this to a function\n    literal.\n",
            "newValue": "Infer the parameter and return types of a function from\nthe parameter and return types of the function it is overriding.\n\n@param oldType The function being overridden. Does nothing if this is null.\n@param paramsParent The LP node of the function that we\u0027re assigning to.\n    If null, that just means we\u0027re not initializing this to a function\n    literal.\n"
          }
        }
      ]
    },
    "6a36f04485599820ff86441accee002b4deec2eb": {
      "type": "Ybodychange",
      "commitMessage": "Fixes for issues 14 and 16.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@7 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/11/09, 11:05 AM",
      "commitName": "6a36f04485599820ff86441accee002b4deec2eb",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/3/09, 3:51 PM",
      "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 7.8,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "FunctionTypeBuilder inferFromOverriddenFunction(FunctionType oldType, @Nullable Node paramsParent) {\n    returnType \u003d oldType.getReturnType();\n    if (paramsParent \u003d\u003d null) {\n        parametersNode \u003d oldType.getParametersNode();\n        if (parametersNode \u003d\u003d null) {\n            parametersNode \u003d new FunctionParamBuilder(typeRegistry).build();\n        }\n    } else {\n        FunctionParamBuilder paramBuilder \u003d new FunctionParamBuilder(typeRegistry);\n        Iterator\u003cNode\u003e oldParams \u003d oldType.getParameters().iterator();\n        boolean warnedAboutArgList \u003d false;\n        for (Node currentParam \u003d paramsParent.getFirstChild(); currentParam !\u003d null; currentParam \u003d currentParam.getNext()) {\n            if (oldParams.hasNext()) {\n                paramBuilder.newParameterFromNode(oldParams.next());\n            } else {\n                warnedAboutArgList |\u003d addParameter(paramBuilder, typeRegistry.getNativeType(UNKNOWN_TYPE), warnedAboutArgList, codingConvention.isOptionalParameter(currentParam), codingConvention.isVarArgsParameter(currentParam));\n            }\n        }\n        parametersNode \u003d paramBuilder.build();\n    }\n    return this;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
      "functionStartLine": 158,
      "functionName": "inferFromOverriddenFunction",
      "functionAnnotation": "",
      "functionDoc": "Infer the parameter and return types of a function from\nthe parameter and return types of the function it is overriding.\n\n@param oldType The function being overridden.\n@param paramsParent The LP node of the function that we\u0027re assigning to.\n    If null, that just means we\u0027re not initializing this to a function\n    literal.\n",
      "diff": "@@ -1,23 +1,22 @@\n FunctionTypeBuilder inferFromOverriddenFunction(FunctionType oldType, @Nullable Node paramsParent) {\n     returnType \u003d oldType.getReturnType();\n     if (paramsParent \u003d\u003d null) {\n         parametersNode \u003d oldType.getParametersNode();\n         if (parametersNode \u003d\u003d null) {\n             parametersNode \u003d new FunctionParamBuilder(typeRegistry).build();\n         }\n     } else {\n         FunctionParamBuilder paramBuilder \u003d new FunctionParamBuilder(typeRegistry);\n         Iterator\u003cNode\u003e oldParams \u003d oldType.getParameters().iterator();\n         boolean warnedAboutArgList \u003d false;\n         for (Node currentParam \u003d paramsParent.getFirstChild(); currentParam !\u003d null; currentParam \u003d currentParam.getNext()) {\n             if (oldParams.hasNext()) {\n                 paramBuilder.newParameterFromNode(oldParams.next());\n             } else {\n-                String name \u003d currentParam.getString();\n-                warnedAboutArgList |\u003d addParameter(paramBuilder, typeRegistry.getNativeType(UNKNOWN_TYPE), warnedAboutArgList, codingConvention.isOptionalParameter(name), codingConvention.isVarArgsParameter(currentParam, name));\n+                warnedAboutArgList |\u003d addParameter(paramBuilder, typeRegistry.getNativeType(UNKNOWN_TYPE), warnedAboutArgList, codingConvention.isOptionalParameter(currentParam), codingConvention.isVarArgsParameter(currentParam));\n             }\n         }\n         parametersNode \u003d paramBuilder.build();\n     }\n     return this;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,23 @@\n+FunctionTypeBuilder inferFromOverriddenFunction(FunctionType oldType, @Nullable Node paramsParent) {\n+    returnType \u003d oldType.getReturnType();\n+    if (paramsParent \u003d\u003d null) {\n+        parametersNode \u003d oldType.getParametersNode();\n+        if (parametersNode \u003d\u003d null) {\n+            parametersNode \u003d new FunctionParamBuilder(typeRegistry).build();\n+        }\n+    } else {\n+        FunctionParamBuilder paramBuilder \u003d new FunctionParamBuilder(typeRegistry);\n+        Iterator\u003cNode\u003e oldParams \u003d oldType.getParameters().iterator();\n+        boolean warnedAboutArgList \u003d false;\n+        for (Node currentParam \u003d paramsParent.getFirstChild(); currentParam !\u003d null; currentParam \u003d currentParam.getNext()) {\n+            if (oldParams.hasNext()) {\n+                paramBuilder.newParameterFromNode(oldParams.next());\n+            } else {\n+                String name \u003d currentParam.getString();\n+                warnedAboutArgList |\u003d addParameter(paramBuilder, typeRegistry.getNativeType(UNKNOWN_TYPE), warnedAboutArgList, codingConvention.isOptionalParameter(name), codingConvention.isVarArgsParameter(currentParam, name));\n+            }\n+        }\n+        parametersNode \u003d paramBuilder.build();\n+    }\n+    return this;\n+}\n\\ No newline at end of file\n",
      "actualSource": "FunctionTypeBuilder inferFromOverriddenFunction(FunctionType oldType, @Nullable Node paramsParent) {\n    returnType \u003d oldType.getReturnType();\n    if (paramsParent \u003d\u003d null) {\n        parametersNode \u003d oldType.getParametersNode();\n        if (parametersNode \u003d\u003d null) {\n            parametersNode \u003d new FunctionParamBuilder(typeRegistry).build();\n        }\n    } else {\n        FunctionParamBuilder paramBuilder \u003d new FunctionParamBuilder(typeRegistry);\n        Iterator\u003cNode\u003e oldParams \u003d oldType.getParameters().iterator();\n        boolean warnedAboutArgList \u003d false;\n        for (Node currentParam \u003d paramsParent.getFirstChild(); currentParam !\u003d null; currentParam \u003d currentParam.getNext()) {\n            if (oldParams.hasNext()) {\n                paramBuilder.newParameterFromNode(oldParams.next());\n            } else {\n                String name \u003d currentParam.getString();\n                warnedAboutArgList |\u003d addParameter(paramBuilder, typeRegistry.getNativeType(UNKNOWN_TYPE), warnedAboutArgList, codingConvention.isOptionalParameter(name), codingConvention.isVarArgsParameter(currentParam, name));\n            }\n        }\n        parametersNode \u003d paramBuilder.build();\n    }\n    return this;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
      "functionStartLine": 158,
      "functionName": "inferFromOverriddenFunction",
      "functionAnnotation": "",
      "functionDoc": "Infer the parameter and return types of a function from\nthe parameter and return types of the function it is overriding.\n\n@param oldType The function being overridden.\n@param paramsParent The LP node of the function that we\u0027re assigning to.\n    If null, that just means we\u0027re not initializing this to a function\n    literal.\n"
    }
  }
}