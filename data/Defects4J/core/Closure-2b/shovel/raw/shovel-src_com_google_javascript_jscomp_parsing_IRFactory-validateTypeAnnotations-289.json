{
  "origin": "codeshovel",
  "repositoryName": "Closure-2b",
  "repositoryPath": "/tmp/Closure-2b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "IRFactory.java",
  "functionName": "validateTypeAnnotations",
  "functionId": "validateTypeAnnotations___info-JSDocInfo__node-AstNode__irNode-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 289,
  "functionEndLine": 341,
  "numCommitsSeen": 75,
  "timeTaken": 3038,
  "changeHistory": [
    "0b054d7d1b185b02c595c646bc0f11a6d809c934",
    "24fd842a5380a350bcde0bed60287053bc9b37f0",
    "5428589fcac11bb899a44ef827e12a253e29d323",
    "4dfd943bd8896e062c6f03e8f658c6579efcbc17",
    "6829657ab0be6215e9cc0143f89af82753d5203d"
  ],
  "changeHistoryShort": {
    "0b054d7d1b185b02c595c646bc0f11a6d809c934": "Ybodychange",
    "24fd842a5380a350bcde0bed60287053bc9b37f0": "Ybodychange",
    "5428589fcac11bb899a44ef827e12a253e29d323": "Ybodychange",
    "4dfd943bd8896e062c6f03e8f658c6579efcbc17": "Ybodychange",
    "6829657ab0be6215e9cc0143f89af82753d5203d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0b054d7d1b185b02c595c646bc0f11a6d809c934": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback\n\n*** Reason for rollback ***\n\nDisable cast warnings by default. Most projects however have\nit turn up to ERROR.\n\n*** Original change description ***\n\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nbreaks various projects without whitelists\n\n*** Original change description ***\n\nIntroduced a CAST ast node\n\nR\u003dnicksantos\nDELTA\u003d1968  (1746 added, 44 deleted, 178 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5970\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2394 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/12/12, 5:18 PM",
      "commitName": "0b054d7d1b185b02c595c646bc0f11a6d809c934",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/19/12, 3:19 PM",
      "commitNameOld": "24fd842a5380a350bcde0bed60287053bc9b37f0",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 23.08,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "actualSource": "private void validateTypeAnnotations(JSDocInfo info, AstNode node, Node irNode) {\n    if (info.hasType()) {\n        boolean valid \u003d false;\n        switch(node.getType()) {\n            case com.google.javascript.rhino.head.Token.LP:\n                valid \u003d node instanceof ParenthesizedExpression;\n                break;\n            case com.google.javascript.rhino.head.Token.VAR:\n                valid \u003d true;\n                break;\n            case com.google.javascript.rhino.head.Token.FUNCTION:\n                FunctionNode fnNode \u003d (FunctionNode) node;\n                valid \u003d fnNode.getFunctionType() \u003d\u003d FunctionNode.FUNCTION_STATEMENT;\n                break;\n            case com.google.javascript.rhino.head.Token.NAME:\n                valid \u003d node.getParent() instanceof ObjectProperty || node.getParent() instanceof CatchClause || node.getParent() instanceof FunctionNode;\n                break;\n            case com.google.javascript.rhino.head.Token.GET:\n            case com.google.javascript.rhino.head.Token.SET:\n            case com.google.javascript.rhino.head.Token.NUMBER:\n            case com.google.javascript.rhino.head.Token.STRING:\n                valid \u003d node.getParent() instanceof ObjectProperty;\n                break;\n            case com.google.javascript.rhino.head.Token.ASSIGN:\n                if (node instanceof Assignment) {\n                    valid \u003d isExprStmt(node.getParent()) \u0026\u0026 isPropAccess(((Assignment) node).getLeft());\n                }\n                break;\n            case com.google.javascript.rhino.head.Token.GETPROP:\n            case com.google.javascript.rhino.head.Token.GETELEM:\n                valid \u003d isExprStmt(node.getParent());\n                break;\n        }\n        if (!valid) {\n            errorReporter.warning(MISPLACED_TYPE_ANNOTATION, sourceName, node.getLineno(), \"\", 0);\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
      "functionStartLine": 289,
      "functionName": "validateTypeAnnotations",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,38 +1,38 @@\n private void validateTypeAnnotations(JSDocInfo info, AstNode node, Node irNode) {\n-    if (info.getType() !\u003d null) {\n+    if (info.hasType()) {\n         boolean valid \u003d false;\n         switch(node.getType()) {\n             case com.google.javascript.rhino.head.Token.LP:\n                 valid \u003d node instanceof ParenthesizedExpression;\n                 break;\n             case com.google.javascript.rhino.head.Token.VAR:\n                 valid \u003d true;\n                 break;\n             case com.google.javascript.rhino.head.Token.FUNCTION:\n                 FunctionNode fnNode \u003d (FunctionNode) node;\n                 valid \u003d fnNode.getFunctionType() \u003d\u003d FunctionNode.FUNCTION_STATEMENT;\n                 break;\n             case com.google.javascript.rhino.head.Token.NAME:\n                 valid \u003d node.getParent() instanceof ObjectProperty || node.getParent() instanceof CatchClause || node.getParent() instanceof FunctionNode;\n                 break;\n             case com.google.javascript.rhino.head.Token.GET:\n             case com.google.javascript.rhino.head.Token.SET:\n             case com.google.javascript.rhino.head.Token.NUMBER:\n             case com.google.javascript.rhino.head.Token.STRING:\n                 valid \u003d node.getParent() instanceof ObjectProperty;\n                 break;\n             case com.google.javascript.rhino.head.Token.ASSIGN:\n                 if (node instanceof Assignment) {\n                     valid \u003d isExprStmt(node.getParent()) \u0026\u0026 isPropAccess(((Assignment) node).getLeft());\n                 }\n                 break;\n             case com.google.javascript.rhino.head.Token.GETPROP:\n             case com.google.javascript.rhino.head.Token.GETELEM:\n                 valid \u003d isExprStmt(node.getParent());\n                 break;\n         }\n         if (!valid) {\n             errorReporter.warning(MISPLACED_TYPE_ANNOTATION, sourceName, node.getLineno(), \"\", 0);\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "24fd842a5380a350bcde0bed60287053bc9b37f0": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback \n\n*** Reason for rollback ***\n\nbreaks various projects without whitelists\n\n*** Original change description ***\n\nIntroduced a CAST ast node\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5848\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2334 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/19/12, 3:19 PM",
      "commitName": "24fd842a5380a350bcde0bed60287053bc9b37f0",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/19/12, 1:47 PM",
      "commitNameOld": "5428589fcac11bb899a44ef827e12a253e29d323",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "private void validateTypeAnnotations(JSDocInfo info, AstNode node, Node irNode) {\n    if (info.getType() !\u003d null) {\n        boolean valid \u003d false;\n        switch(node.getType()) {\n            case com.google.javascript.rhino.head.Token.LP:\n                valid \u003d node instanceof ParenthesizedExpression;\n                break;\n            case com.google.javascript.rhino.head.Token.VAR:\n                valid \u003d true;\n                break;\n            case com.google.javascript.rhino.head.Token.FUNCTION:\n                FunctionNode fnNode \u003d (FunctionNode) node;\n                valid \u003d fnNode.getFunctionType() \u003d\u003d FunctionNode.FUNCTION_STATEMENT;\n                break;\n            case com.google.javascript.rhino.head.Token.NAME:\n                valid \u003d node.getParent() instanceof ObjectProperty || node.getParent() instanceof CatchClause || node.getParent() instanceof FunctionNode;\n                break;\n            case com.google.javascript.rhino.head.Token.GET:\n            case com.google.javascript.rhino.head.Token.SET:\n            case com.google.javascript.rhino.head.Token.NUMBER:\n            case com.google.javascript.rhino.head.Token.STRING:\n                valid \u003d node.getParent() instanceof ObjectProperty;\n                break;\n            case com.google.javascript.rhino.head.Token.ASSIGN:\n                if (node instanceof Assignment) {\n                    valid \u003d isExprStmt(node.getParent()) \u0026\u0026 isPropAccess(((Assignment) node).getLeft());\n                }\n                break;\n            case com.google.javascript.rhino.head.Token.GETPROP:\n            case com.google.javascript.rhino.head.Token.GETELEM:\n                valid \u003d isExprStmt(node.getParent());\n                break;\n        }\n        if (!valid) {\n            errorReporter.warning(MISPLACED_TYPE_ANNOTATION, sourceName, node.getLineno(), \"\", 0);\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
      "functionStartLine": 289,
      "functionName": "validateTypeAnnotations",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,38 +1,38 @@\n private void validateTypeAnnotations(JSDocInfo info, AstNode node, Node irNode) {\n-    if (info.hasType()) {\n+    if (info.getType() !\u003d null) {\n         boolean valid \u003d false;\n         switch(node.getType()) {\n             case com.google.javascript.rhino.head.Token.LP:\n                 valid \u003d node instanceof ParenthesizedExpression;\n                 break;\n             case com.google.javascript.rhino.head.Token.VAR:\n                 valid \u003d true;\n                 break;\n             case com.google.javascript.rhino.head.Token.FUNCTION:\n                 FunctionNode fnNode \u003d (FunctionNode) node;\n                 valid \u003d fnNode.getFunctionType() \u003d\u003d FunctionNode.FUNCTION_STATEMENT;\n                 break;\n             case com.google.javascript.rhino.head.Token.NAME:\n                 valid \u003d node.getParent() instanceof ObjectProperty || node.getParent() instanceof CatchClause || node.getParent() instanceof FunctionNode;\n                 break;\n             case com.google.javascript.rhino.head.Token.GET:\n             case com.google.javascript.rhino.head.Token.SET:\n             case com.google.javascript.rhino.head.Token.NUMBER:\n             case com.google.javascript.rhino.head.Token.STRING:\n                 valid \u003d node.getParent() instanceof ObjectProperty;\n                 break;\n             case com.google.javascript.rhino.head.Token.ASSIGN:\n                 if (node instanceof Assignment) {\n                     valid \u003d isExprStmt(node.getParent()) \u0026\u0026 isPropAccess(((Assignment) node).getLeft());\n                 }\n                 break;\n             case com.google.javascript.rhino.head.Token.GETPROP:\n             case com.google.javascript.rhino.head.Token.GETELEM:\n                 valid \u003d isExprStmt(node.getParent());\n                 break;\n         }\n         if (!valid) {\n             errorReporter.warning(MISPLACED_TYPE_ANNOTATION, sourceName, node.getLineno(), \"\", 0);\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5428589fcac11bb899a44ef827e12a253e29d323": {
      "type": "Ybodychange",
      "commitMessage": "\nIntroduced a CAST ast node\n\nR\u003dnicksantos,dimvar\nDELTA\u003d2832  (2746 added, 13 deleted, 73 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5846\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2332 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/19/12, 1:47 PM",
      "commitName": "5428589fcac11bb899a44ef827e12a253e29d323",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/4/12, 10:01 PM",
      "commitNameOld": "4dfd943bd8896e062c6f03e8f658c6579efcbc17",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 14.66,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "actualSource": "private void validateTypeAnnotations(JSDocInfo info, AstNode node, Node irNode) {\n    if (info.hasType()) {\n        boolean valid \u003d false;\n        switch(node.getType()) {\n            case com.google.javascript.rhino.head.Token.LP:\n                valid \u003d node instanceof ParenthesizedExpression;\n                break;\n            case com.google.javascript.rhino.head.Token.VAR:\n                valid \u003d true;\n                break;\n            case com.google.javascript.rhino.head.Token.FUNCTION:\n                FunctionNode fnNode \u003d (FunctionNode) node;\n                valid \u003d fnNode.getFunctionType() \u003d\u003d FunctionNode.FUNCTION_STATEMENT;\n                break;\n            case com.google.javascript.rhino.head.Token.NAME:\n                valid \u003d node.getParent() instanceof ObjectProperty || node.getParent() instanceof CatchClause || node.getParent() instanceof FunctionNode;\n                break;\n            case com.google.javascript.rhino.head.Token.GET:\n            case com.google.javascript.rhino.head.Token.SET:\n            case com.google.javascript.rhino.head.Token.NUMBER:\n            case com.google.javascript.rhino.head.Token.STRING:\n                valid \u003d node.getParent() instanceof ObjectProperty;\n                break;\n            case com.google.javascript.rhino.head.Token.ASSIGN:\n                if (node instanceof Assignment) {\n                    valid \u003d isExprStmt(node.getParent()) \u0026\u0026 isPropAccess(((Assignment) node).getLeft());\n                }\n                break;\n            case com.google.javascript.rhino.head.Token.GETPROP:\n            case com.google.javascript.rhino.head.Token.GETELEM:\n                valid \u003d isExprStmt(node.getParent());\n                break;\n        }\n        if (!valid) {\n            errorReporter.warning(MISPLACED_TYPE_ANNOTATION, sourceName, node.getLineno(), \"\", 0);\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
      "functionStartLine": 289,
      "functionName": "validateTypeAnnotations",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,38 +1,38 @@\n private void validateTypeAnnotations(JSDocInfo info, AstNode node, Node irNode) {\n-    if (info.getType() !\u003d null) {\n+    if (info.hasType()) {\n         boolean valid \u003d false;\n         switch(node.getType()) {\n             case com.google.javascript.rhino.head.Token.LP:\n                 valid \u003d node instanceof ParenthesizedExpression;\n                 break;\n             case com.google.javascript.rhino.head.Token.VAR:\n                 valid \u003d true;\n                 break;\n             case com.google.javascript.rhino.head.Token.FUNCTION:\n                 FunctionNode fnNode \u003d (FunctionNode) node;\n                 valid \u003d fnNode.getFunctionType() \u003d\u003d FunctionNode.FUNCTION_STATEMENT;\n                 break;\n             case com.google.javascript.rhino.head.Token.NAME:\n                 valid \u003d node.getParent() instanceof ObjectProperty || node.getParent() instanceof CatchClause || node.getParent() instanceof FunctionNode;\n                 break;\n             case com.google.javascript.rhino.head.Token.GET:\n             case com.google.javascript.rhino.head.Token.SET:\n             case com.google.javascript.rhino.head.Token.NUMBER:\n             case com.google.javascript.rhino.head.Token.STRING:\n                 valid \u003d node.getParent() instanceof ObjectProperty;\n                 break;\n             case com.google.javascript.rhino.head.Token.ASSIGN:\n                 if (node instanceof Assignment) {\n                     valid \u003d isExprStmt(node.getParent()) \u0026\u0026 isPropAccess(((Assignment) node).getLeft());\n                 }\n                 break;\n             case com.google.javascript.rhino.head.Token.GETPROP:\n             case com.google.javascript.rhino.head.Token.GETELEM:\n                 valid \u003d isExprStmt(node.getParent());\n                 break;\n         }\n         if (!valid) {\n             errorReporter.warning(MISPLACED_TYPE_ANNOTATION, sourceName, node.getLineno(), \"\", 0);\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4dfd943bd8896e062c6f03e8f658c6579efcbc17": {
      "type": "Ybodychange",
      "commitMessage": "\nAdd support in the Rhino parser for annotating function parameters and\ncatch expressions.\n\nR\u003dnicksantos\nDELTA\u003d53  (46 added, 6 deleted, 1 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5745\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2295 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/4/12, 10:01 PM",
      "commitName": "4dfd943bd8896e062c6f03e8f658c6579efcbc17",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "10/30/12, 1:37 PM",
      "commitNameOld": "6829657ab0be6215e9cc0143f89af82753d5203d",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 5.39,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "private void validateTypeAnnotations(JSDocInfo info, AstNode node, Node irNode) {\n    if (info.getType() !\u003d null) {\n        boolean valid \u003d false;\n        switch(node.getType()) {\n            case com.google.javascript.rhino.head.Token.LP:\n                valid \u003d node instanceof ParenthesizedExpression;\n                break;\n            case com.google.javascript.rhino.head.Token.VAR:\n                valid \u003d true;\n                break;\n            case com.google.javascript.rhino.head.Token.FUNCTION:\n                FunctionNode fnNode \u003d (FunctionNode) node;\n                valid \u003d fnNode.getFunctionType() \u003d\u003d FunctionNode.FUNCTION_STATEMENT;\n                break;\n            case com.google.javascript.rhino.head.Token.NAME:\n                valid \u003d node.getParent() instanceof ObjectProperty || node.getParent() instanceof CatchClause || node.getParent() instanceof FunctionNode;\n                break;\n            case com.google.javascript.rhino.head.Token.GET:\n            case com.google.javascript.rhino.head.Token.SET:\n            case com.google.javascript.rhino.head.Token.NUMBER:\n            case com.google.javascript.rhino.head.Token.STRING:\n                valid \u003d node.getParent() instanceof ObjectProperty;\n                break;\n            case com.google.javascript.rhino.head.Token.ASSIGN:\n                if (node instanceof Assignment) {\n                    valid \u003d isExprStmt(node.getParent()) \u0026\u0026 isPropAccess(((Assignment) node).getLeft());\n                }\n                break;\n            case com.google.javascript.rhino.head.Token.GETPROP:\n            case com.google.javascript.rhino.head.Token.GETELEM:\n                valid \u003d isExprStmt(node.getParent());\n                break;\n        }\n        if (!valid) {\n            errorReporter.warning(MISPLACED_TYPE_ANNOTATION, sourceName, node.getLineno(), \"\", 0);\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
      "functionStartLine": 289,
      "functionName": "validateTypeAnnotations",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,36 +1,38 @@\n private void validateTypeAnnotations(JSDocInfo info, AstNode node, Node irNode) {\n     if (info.getType() !\u003d null) {\n         boolean valid \u003d false;\n         switch(node.getType()) {\n             case com.google.javascript.rhino.head.Token.LP:\n                 valid \u003d node instanceof ParenthesizedExpression;\n                 break;\n             case com.google.javascript.rhino.head.Token.VAR:\n                 valid \u003d true;\n                 break;\n             case com.google.javascript.rhino.head.Token.FUNCTION:\n                 FunctionNode fnNode \u003d (FunctionNode) node;\n                 valid \u003d fnNode.getFunctionType() \u003d\u003d FunctionNode.FUNCTION_STATEMENT;\n                 break;\n+            case com.google.javascript.rhino.head.Token.NAME:\n+                valid \u003d node.getParent() instanceof ObjectProperty || node.getParent() instanceof CatchClause || node.getParent() instanceof FunctionNode;\n+                break;\n             case com.google.javascript.rhino.head.Token.GET:\n             case com.google.javascript.rhino.head.Token.SET:\n-            case com.google.javascript.rhino.head.Token.NAME:\n             case com.google.javascript.rhino.head.Token.NUMBER:\n             case com.google.javascript.rhino.head.Token.STRING:\n                 valid \u003d node.getParent() instanceof ObjectProperty;\n                 break;\n             case com.google.javascript.rhino.head.Token.ASSIGN:\n                 if (node instanceof Assignment) {\n                     valid \u003d isExprStmt(node.getParent()) \u0026\u0026 isPropAccess(((Assignment) node).getLeft());\n                 }\n                 break;\n             case com.google.javascript.rhino.head.Token.GETPROP:\n             case com.google.javascript.rhino.head.Token.GETELEM:\n                 valid \u003d isExprStmt(node.getParent());\n                 break;\n         }\n         if (!valid) {\n             errorReporter.warning(MISPLACED_TYPE_ANNOTATION, sourceName, node.getLineno(), \"\", 0);\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6829657ab0be6215e9cc0143f89af82753d5203d": {
      "type": "Yintroduced",
      "commitMessage": "\nAdd a warning (disabled by default) controlled by the MISPLACED_TYPE_ANNOTATION, that limits the places we accept JSDoc with \"@type\" annotations.  This will help us detect useless ones (aka floaters).\n\nR\u003dnicksantos\nDELTA\u003d274  (240 added, 11 deleted, 23 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5721\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2285 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/30/12, 1:37 PM",
      "commitName": "6829657ab0be6215e9cc0143f89af82753d5203d",
      "commitAuthor": "johnlenz@google.com",
      "diff": "@@ -0,0 +1,36 @@\n+private void validateTypeAnnotations(JSDocInfo info, AstNode node, Node irNode) {\n+    if (info.getType() !\u003d null) {\n+        boolean valid \u003d false;\n+        switch(node.getType()) {\n+            case com.google.javascript.rhino.head.Token.LP:\n+                valid \u003d node instanceof ParenthesizedExpression;\n+                break;\n+            case com.google.javascript.rhino.head.Token.VAR:\n+                valid \u003d true;\n+                break;\n+            case com.google.javascript.rhino.head.Token.FUNCTION:\n+                FunctionNode fnNode \u003d (FunctionNode) node;\n+                valid \u003d fnNode.getFunctionType() \u003d\u003d FunctionNode.FUNCTION_STATEMENT;\n+                break;\n+            case com.google.javascript.rhino.head.Token.GET:\n+            case com.google.javascript.rhino.head.Token.SET:\n+            case com.google.javascript.rhino.head.Token.NAME:\n+            case com.google.javascript.rhino.head.Token.NUMBER:\n+            case com.google.javascript.rhino.head.Token.STRING:\n+                valid \u003d node.getParent() instanceof ObjectProperty;\n+                break;\n+            case com.google.javascript.rhino.head.Token.ASSIGN:\n+                if (node instanceof Assignment) {\n+                    valid \u003d isExprStmt(node.getParent()) \u0026\u0026 isPropAccess(((Assignment) node).getLeft());\n+                }\n+                break;\n+            case com.google.javascript.rhino.head.Token.GETPROP:\n+            case com.google.javascript.rhino.head.Token.GETELEM:\n+                valid \u003d isExprStmt(node.getParent());\n+                break;\n+        }\n+        if (!valid) {\n+            errorReporter.warning(MISPLACED_TYPE_ANNOTATION, sourceName, node.getLineno(), \"\", 0);\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void validateTypeAnnotations(JSDocInfo info, AstNode node, Node irNode) {\n    if (info.getType() !\u003d null) {\n        boolean valid \u003d false;\n        switch(node.getType()) {\n            case com.google.javascript.rhino.head.Token.LP:\n                valid \u003d node instanceof ParenthesizedExpression;\n                break;\n            case com.google.javascript.rhino.head.Token.VAR:\n                valid \u003d true;\n                break;\n            case com.google.javascript.rhino.head.Token.FUNCTION:\n                FunctionNode fnNode \u003d (FunctionNode) node;\n                valid \u003d fnNode.getFunctionType() \u003d\u003d FunctionNode.FUNCTION_STATEMENT;\n                break;\n            case com.google.javascript.rhino.head.Token.GET:\n            case com.google.javascript.rhino.head.Token.SET:\n            case com.google.javascript.rhino.head.Token.NAME:\n            case com.google.javascript.rhino.head.Token.NUMBER:\n            case com.google.javascript.rhino.head.Token.STRING:\n                valid \u003d node.getParent() instanceof ObjectProperty;\n                break;\n            case com.google.javascript.rhino.head.Token.ASSIGN:\n                if (node instanceof Assignment) {\n                    valid \u003d isExprStmt(node.getParent()) \u0026\u0026 isPropAccess(((Assignment) node).getLeft());\n                }\n                break;\n            case com.google.javascript.rhino.head.Token.GETPROP:\n            case com.google.javascript.rhino.head.Token.GETELEM:\n                valid \u003d isExprStmt(node.getParent());\n                break;\n        }\n        if (!valid) {\n            errorReporter.warning(MISPLACED_TYPE_ANNOTATION, sourceName, node.getLineno(), \"\", 0);\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
      "functionStartLine": 289,
      "functionName": "validateTypeAnnotations",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}