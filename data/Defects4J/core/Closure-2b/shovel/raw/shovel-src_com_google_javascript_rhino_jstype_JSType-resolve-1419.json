{
  "origin": "codeshovel",
  "repositoryName": "Closure-2b",
  "repositoryPath": "/tmp/Closure-2b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JSType.java",
  "functionName": "resolve",
  "functionId": "resolve___t-ErrorReporter__scope-StaticScope__JSType__",
  "sourceFilePath": "src/com/google/javascript/rhino/jstype/JSType.java",
  "functionAnnotation": "",
  "functionDoc": "Resolve this type in the given scope.\n\nThe returned value must be equal to {@code this}, as defined by\n{@link #isEquivalentTo}. It may or may not be the same object. This method\nmay modify the internal state of {@code this}, as long as it does\nso in a way that preserves Object equality.\n\nFor efficiency, we should only resolve a type once per compilation job.\nFor incremental compilations, one compilation job may need the\nartifacts from a previous generation, so we will eventually need\na generational flag instead of a boolean one.\n",
  "functionStartLine": 1419,
  "functionEndLine": 1432,
  "numCommitsSeen": 83,
  "timeTaken": 3749,
  "changeHistory": [
    "cf5fd88f13f0b11625ac407f85cb58b36862e173",
    "58c3e4ce1d17ec619bcc4964bdeebc676f93567d",
    "bca9abb0e3062d373fe52c0e8340337588c05708",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "cf5fd88f13f0b11625ac407f85cb58b36862e173": "Ydocchange",
    "58c3e4ce1d17ec619bcc4964bdeebc676f93567d": "Ybodychange",
    "bca9abb0e3062d373fe52c0e8340337588c05708": "Ymultichange(Ymovefromfile,Yreturntypechange,Ymodifierchange,Ybodychange,Ydocchange,Yparameterchange)",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cf5fd88f13f0b11625ac407f85cb58b36862e173": {
      "type": "Ydocchange",
      "commitMessage": "\nChange on 2010/05/25 by nicksantos\n\n        start moving away from using Object#equals for type equality.\n\n        R\u003djohnlenz\n        DELTA\u003d445  (98 added, 3 deleted, 344 changed)\n\nChange on 2010/05/25 by acleung\n\n        Fix bug with resolving a member function of a resolved constructor.\n\n        R\u003djohnlenz\n        DELTA\u003d48  (48 added, 0 deleted, 0 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d12002\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@231 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/26/10, 8:26 AM",
      "commitName": "cf5fd88f13f0b11625ac407f85cb58b36862e173",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "5/4/10, 7:39 AM",
      "commitNameOld": "58c3e4ce1d17ec619bcc4964bdeebc676f93567d",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 22.03,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "actualSource": "public final JSType resolve(ErrorReporter t, StaticScope\u003cJSType\u003e scope) {\n    if (resolved) {\n        if (resolveResult \u003d\u003d null) {\n            return registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);\n        }\n        return resolveResult;\n    }\n    resolved \u003d true;\n    resolveResult \u003d resolveInternal(t, scope);\n    resolveResult.setResolvedTypeInternal(resolveResult);\n    return resolveResult;\n}",
      "path": "src/com/google/javascript/rhino/jstype/JSType.java",
      "functionStartLine": 878,
      "functionName": "resolve",
      "functionAnnotation": "",
      "functionDoc": "Resolve this type in the given scope.\n\nThe returned value must be equal to {@code this}, as defined by\n{@link #isEquivalentTo}. It may or may not be the same object. This method\nmay modify the internal state of {@code this}, as long as it does\nso in a way that preserves Object equality.\n\nFor efficiency, we should only resolve a type once per compilation job.\nFor incremental compilations, one compilation job may need the\nartifacts from a previous generation, so we will eventually need\na generational flag instead of a boolean one.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Resolve this type in the given scope.\n\nThe returned value must be equal to {@code this}, as defined by\n{@link Object#equals}. It may or may not be the same object. This method\nmay modify the internal state of {@code this}, as long as it does\nso in a way that preserves Object equality.\n\nFor efficiency, we should only resolve a type once per compilation job.\nFor incremental compilations, one compilation job may need the\nartifacts from a previous generation, so we will eventually need\na generational flag instead of a boolean one.\n",
        "newValue": "Resolve this type in the given scope.\n\nThe returned value must be equal to {@code this}, as defined by\n{@link #isEquivalentTo}. It may or may not be the same object. This method\nmay modify the internal state of {@code this}, as long as it does\nso in a way that preserves Object equality.\n\nFor efficiency, we should only resolve a type once per compilation job.\nFor incremental compilations, one compilation job may need the\nartifacts from a previous generation, so we will eventually need\na generational flag instead of a boolean one.\n"
      }
    },
    "58c3e4ce1d17ec619bcc4964bdeebc676f93567d": {
      "type": "Ybodychange",
      "commitMessage": "\n\nChange on 2010/05/03 by robby\n\n        Preliminary: goog.scope support for closure-compiler\n\n        R\u003dnick,john\n        DELTA\u003d318  (318 added, 0 deleted, 0 changed)\n\nChange on 2010/05/03 by nick\n\n        Add a bit more smarts to type resolution. Also, give it a\n        \"forceResolve\" method so that it will try to resolve type names,\n        even if the registry is in a lazy mode.\n\n        R\u003drobert\n        DELTA\u003d205  (133 added, 54 deleted, 18 changed)\n\nChange on 2010/05/03 by alan\n\n        Enable Flow Sensitive Inlining by default. Passes GMail automation test.\n\n        R\u003dnick\n        DELTA\u003d1  (0 added, 0 deleted, 1 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dcmvhwl\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@202 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/4/10, 7:39 AM",
      "commitName": "58c3e4ce1d17ec619bcc4964bdeebc676f93567d",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/27/10, 12:02 PM",
      "commitNameOld": "eb5eae4438f49ffddd3c8be1413eeb9e7ecfb311",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 6.82,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "public final JSType resolve(ErrorReporter t, StaticScope\u003cJSType\u003e scope) {\n    if (resolved) {\n        if (resolveResult \u003d\u003d null) {\n            return registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);\n        }\n        return resolveResult;\n    }\n    resolved \u003d true;\n    resolveResult \u003d resolveInternal(t, scope);\n    resolveResult.setResolvedTypeInternal(resolveResult);\n    return resolveResult;\n}",
      "path": "src/com/google/javascript/rhino/jstype/JSType.java",
      "functionStartLine": 866,
      "functionName": "resolve",
      "functionAnnotation": "",
      "functionDoc": "Resolve this type in the given scope.\n\nThe returned value must be equal to {@code this}, as defined by\n{@link Object#equals}. It may or may not be the same object. This method\nmay modify the internal state of {@code this}, as long as it does\nso in a way that preserves Object equality.\n\nFor efficiency, we should only resolve a type once per compilation job.\nFor incremental compilations, one compilation job may need the\nartifacts from a previous generation, so we will eventually need\na generational flag instead of a boolean one.\n",
      "diff": "@@ -1,11 +1,12 @@\n public final JSType resolve(ErrorReporter t, StaticScope\u003cJSType\u003e scope) {\n     if (resolved) {\n         if (resolveResult \u003d\u003d null) {\n             return registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);\n         }\n         return resolveResult;\n     }\n     resolved \u003d true;\n     resolveResult \u003d resolveInternal(t, scope);\n+    resolveResult.setResolvedTypeInternal(resolveResult);\n     return resolveResult;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bca9abb0e3062d373fe52c0e8340337588c05708": {
      "type": "Ymultichange(Ymovefromfile,Yreturntypechange,Ymodifierchange,Ybodychange,Ydocchange,Yparameterchange)",
      "commitMessage": "Make sure that InlineVariables can inline variables that are never defined.\n\nCreate a function-inlining blacklist.\n\nSome minor type inference fixes.\n\nStart re-architecting type resolution to happen differently.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@77 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/26/10, 1:59 PM",
      "commitName": "bca9abb0e3062d373fe52c0e8340337588c05708",
      "commitAuthor": "Nicholas.J.Santos",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "Make sure that InlineVariables can inline variables that are never defined.\n\nCreate a function-inlining blacklist.\n\nSome minor type inference fixes.\n\nStart re-architecting type resolution to happen differently.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@77 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/26/10, 1:59 PM",
          "commitName": "bca9abb0e3062d373fe52c0e8340337588c05708",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "1/23/10, 6:45 PM",
          "commitNameOld": "d43115b1d7513fede46087040d2e7cb0bdf5d5b3",
          "commitAuthorOld": "mbolin",
          "daysBetweenCommits": 2.8,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public final JSType resolve(ErrorReporter t, StaticScope\u003cJSType\u003e scope) {\n    if (resolved) {\n        if (resolveResult \u003d\u003d null) {\n            return registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);\n        }\n        return resolveResult;\n    }\n    resolved \u003d true;\n    resolveResult \u003d resolveInternal(t, scope);\n    return resolveResult;\n}",
          "path": "src/com/google/javascript/rhino/jstype/JSType.java",
          "functionStartLine": 851,
          "functionName": "resolve",
          "functionAnnotation": "",
          "functionDoc": "Resolve this type in the given scope.\n\nThe returned value must be equal to {@code this}, as defined by\n{@link Object#equals}. It may or may not be the same object. This method\nmay modify the internal state of {@code this}, as long as it does\nso in a way that preserves Object equality.\n\nFor efficiency, we should only resolve a type once per compilation job.\nFor incremental compilations, one compilation job may need the\nartifacts from a previous generation, so we will eventually need\na generational flag instead of a boolean one.\n",
          "diff": "@@ -1,14 +1,11 @@\n-public void resolve(ErrorReporter t, StaticScope\u003cJSType\u003e enclosing) {\n-    if (isResolved())\n-        return;\n-    resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-        handleTypeCycle(t);\n+public final JSType resolve(ErrorReporter t, StaticScope\u003cJSType\u003e scope) {\n+    if (resolved) {\n+        if (resolveResult \u003d\u003d null) {\n+            return registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);\n+        }\n+        return resolveResult;\n     }\n-    if (isResolved())\n-        return;\n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-        handleTypeCycle(t);\n-    }\n+    resolved \u003d true;\n+    resolveResult \u003d resolveInternal(t, scope);\n+    return resolveResult;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/com/google/javascript/rhino/jstype/NamedType.java",
            "newPath": "src/com/google/javascript/rhino/jstype/JSType.java",
            "oldMethodName": "resolve",
            "newMethodName": "resolve"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "Make sure that InlineVariables can inline variables that are never defined.\n\nCreate a function-inlining blacklist.\n\nSome minor type inference fixes.\n\nStart re-architecting type resolution to happen differently.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@77 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/26/10, 1:59 PM",
          "commitName": "bca9abb0e3062d373fe52c0e8340337588c05708",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "1/23/10, 6:45 PM",
          "commitNameOld": "d43115b1d7513fede46087040d2e7cb0bdf5d5b3",
          "commitAuthorOld": "mbolin",
          "daysBetweenCommits": 2.8,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public final JSType resolve(ErrorReporter t, StaticScope\u003cJSType\u003e scope) {\n    if (resolved) {\n        if (resolveResult \u003d\u003d null) {\n            return registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);\n        }\n        return resolveResult;\n    }\n    resolved \u003d true;\n    resolveResult \u003d resolveInternal(t, scope);\n    return resolveResult;\n}",
          "path": "src/com/google/javascript/rhino/jstype/JSType.java",
          "functionStartLine": 851,
          "functionName": "resolve",
          "functionAnnotation": "",
          "functionDoc": "Resolve this type in the given scope.\n\nThe returned value must be equal to {@code this}, as defined by\n{@link Object#equals}. It may or may not be the same object. This method\nmay modify the internal state of {@code this}, as long as it does\nso in a way that preserves Object equality.\n\nFor efficiency, we should only resolve a type once per compilation job.\nFor incremental compilations, one compilation job may need the\nartifacts from a previous generation, so we will eventually need\na generational flag instead of a boolean one.\n",
          "diff": "@@ -1,14 +1,11 @@\n-public void resolve(ErrorReporter t, StaticScope\u003cJSType\u003e enclosing) {\n-    if (isResolved())\n-        return;\n-    resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-        handleTypeCycle(t);\n+public final JSType resolve(ErrorReporter t, StaticScope\u003cJSType\u003e scope) {\n+    if (resolved) {\n+        if (resolveResult \u003d\u003d null) {\n+            return registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);\n+        }\n+        return resolveResult;\n     }\n-    if (isResolved())\n-        return;\n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-        handleTypeCycle(t);\n-    }\n+    resolved \u003d true;\n+    resolveResult \u003d resolveInternal(t, scope);\n+    return resolveResult;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "JSType"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Make sure that InlineVariables can inline variables that are never defined.\n\nCreate a function-inlining blacklist.\n\nSome minor type inference fixes.\n\nStart re-architecting type resolution to happen differently.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@77 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/26/10, 1:59 PM",
          "commitName": "bca9abb0e3062d373fe52c0e8340337588c05708",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "1/23/10, 6:45 PM",
          "commitNameOld": "d43115b1d7513fede46087040d2e7cb0bdf5d5b3",
          "commitAuthorOld": "mbolin",
          "daysBetweenCommits": 2.8,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public final JSType resolve(ErrorReporter t, StaticScope\u003cJSType\u003e scope) {\n    if (resolved) {\n        if (resolveResult \u003d\u003d null) {\n            return registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);\n        }\n        return resolveResult;\n    }\n    resolved \u003d true;\n    resolveResult \u003d resolveInternal(t, scope);\n    return resolveResult;\n}",
          "path": "src/com/google/javascript/rhino/jstype/JSType.java",
          "functionStartLine": 851,
          "functionName": "resolve",
          "functionAnnotation": "",
          "functionDoc": "Resolve this type in the given scope.\n\nThe returned value must be equal to {@code this}, as defined by\n{@link Object#equals}. It may or may not be the same object. This method\nmay modify the internal state of {@code this}, as long as it does\nso in a way that preserves Object equality.\n\nFor efficiency, we should only resolve a type once per compilation job.\nFor incremental compilations, one compilation job may need the\nartifacts from a previous generation, so we will eventually need\na generational flag instead of a boolean one.\n",
          "diff": "@@ -1,14 +1,11 @@\n-public void resolve(ErrorReporter t, StaticScope\u003cJSType\u003e enclosing) {\n-    if (isResolved())\n-        return;\n-    resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-        handleTypeCycle(t);\n+public final JSType resolve(ErrorReporter t, StaticScope\u003cJSType\u003e scope) {\n+    if (resolved) {\n+        if (resolveResult \u003d\u003d null) {\n+            return registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);\n+        }\n+        return resolveResult;\n     }\n-    if (isResolved())\n-        return;\n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-        handleTypeCycle(t);\n-    }\n+    resolved \u003d true;\n+    resolveResult \u003d resolveInternal(t, scope);\n+    return resolveResult;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[public, final]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Make sure that InlineVariables can inline variables that are never defined.\n\nCreate a function-inlining blacklist.\n\nSome minor type inference fixes.\n\nStart re-architecting type resolution to happen differently.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@77 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/26/10, 1:59 PM",
          "commitName": "bca9abb0e3062d373fe52c0e8340337588c05708",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "1/23/10, 6:45 PM",
          "commitNameOld": "d43115b1d7513fede46087040d2e7cb0bdf5d5b3",
          "commitAuthorOld": "mbolin",
          "daysBetweenCommits": 2.8,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public final JSType resolve(ErrorReporter t, StaticScope\u003cJSType\u003e scope) {\n    if (resolved) {\n        if (resolveResult \u003d\u003d null) {\n            return registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);\n        }\n        return resolveResult;\n    }\n    resolved \u003d true;\n    resolveResult \u003d resolveInternal(t, scope);\n    return resolveResult;\n}",
          "path": "src/com/google/javascript/rhino/jstype/JSType.java",
          "functionStartLine": 851,
          "functionName": "resolve",
          "functionAnnotation": "",
          "functionDoc": "Resolve this type in the given scope.\n\nThe returned value must be equal to {@code this}, as defined by\n{@link Object#equals}. It may or may not be the same object. This method\nmay modify the internal state of {@code this}, as long as it does\nso in a way that preserves Object equality.\n\nFor efficiency, we should only resolve a type once per compilation job.\nFor incremental compilations, one compilation job may need the\nartifacts from a previous generation, so we will eventually need\na generational flag instead of a boolean one.\n",
          "diff": "@@ -1,14 +1,11 @@\n-public void resolve(ErrorReporter t, StaticScope\u003cJSType\u003e enclosing) {\n-    if (isResolved())\n-        return;\n-    resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-        handleTypeCycle(t);\n+public final JSType resolve(ErrorReporter t, StaticScope\u003cJSType\u003e scope) {\n+    if (resolved) {\n+        if (resolveResult \u003d\u003d null) {\n+            return registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);\n+        }\n+        return resolveResult;\n     }\n-    if (isResolved())\n-        return;\n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-        handleTypeCycle(t);\n-    }\n+    resolved \u003d true;\n+    resolveResult \u003d resolveInternal(t, scope);\n+    return resolveResult;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Make sure that InlineVariables can inline variables that are never defined.\n\nCreate a function-inlining blacklist.\n\nSome minor type inference fixes.\n\nStart re-architecting type resolution to happen differently.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@77 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/26/10, 1:59 PM",
          "commitName": "bca9abb0e3062d373fe52c0e8340337588c05708",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "1/23/10, 6:45 PM",
          "commitNameOld": "d43115b1d7513fede46087040d2e7cb0bdf5d5b3",
          "commitAuthorOld": "mbolin",
          "daysBetweenCommits": 2.8,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public final JSType resolve(ErrorReporter t, StaticScope\u003cJSType\u003e scope) {\n    if (resolved) {\n        if (resolveResult \u003d\u003d null) {\n            return registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);\n        }\n        return resolveResult;\n    }\n    resolved \u003d true;\n    resolveResult \u003d resolveInternal(t, scope);\n    return resolveResult;\n}",
          "path": "src/com/google/javascript/rhino/jstype/JSType.java",
          "functionStartLine": 851,
          "functionName": "resolve",
          "functionAnnotation": "",
          "functionDoc": "Resolve this type in the given scope.\n\nThe returned value must be equal to {@code this}, as defined by\n{@link Object#equals}. It may or may not be the same object. This method\nmay modify the internal state of {@code this}, as long as it does\nso in a way that preserves Object equality.\n\nFor efficiency, we should only resolve a type once per compilation job.\nFor incremental compilations, one compilation job may need the\nartifacts from a previous generation, so we will eventually need\na generational flag instead of a boolean one.\n",
          "diff": "@@ -1,14 +1,11 @@\n-public void resolve(ErrorReporter t, StaticScope\u003cJSType\u003e enclosing) {\n-    if (isResolved())\n-        return;\n-    resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-        handleTypeCycle(t);\n+public final JSType resolve(ErrorReporter t, StaticScope\u003cJSType\u003e scope) {\n+    if (resolved) {\n+        if (resolveResult \u003d\u003d null) {\n+            return registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);\n+        }\n+        return resolveResult;\n     }\n-    if (isResolved())\n-        return;\n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-        handleTypeCycle(t);\n-    }\n+    resolved \u003d true;\n+    resolveResult \u003d resolveInternal(t, scope);\n+    return resolveResult;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Resolve the referenced type within the enclosing scope.\n",
            "newValue": "Resolve this type in the given scope.\n\nThe returned value must be equal to {@code this}, as defined by\n{@link Object#equals}. It may or may not be the same object. This method\nmay modify the internal state of {@code this}, as long as it does\nso in a way that preserves Object equality.\n\nFor efficiency, we should only resolve a type once per compilation job.\nFor incremental compilations, one compilation job may need the\nartifacts from a previous generation, so we will eventually need\na generational flag instead of a boolean one.\n"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "Make sure that InlineVariables can inline variables that are never defined.\n\nCreate a function-inlining blacklist.\n\nSome minor type inference fixes.\n\nStart re-architecting type resolution to happen differently.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@77 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/26/10, 1:59 PM",
          "commitName": "bca9abb0e3062d373fe52c0e8340337588c05708",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "1/23/10, 6:45 PM",
          "commitNameOld": "d43115b1d7513fede46087040d2e7cb0bdf5d5b3",
          "commitAuthorOld": "mbolin",
          "daysBetweenCommits": 2.8,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public final JSType resolve(ErrorReporter t, StaticScope\u003cJSType\u003e scope) {\n    if (resolved) {\n        if (resolveResult \u003d\u003d null) {\n            return registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);\n        }\n        return resolveResult;\n    }\n    resolved \u003d true;\n    resolveResult \u003d resolveInternal(t, scope);\n    return resolveResult;\n}",
          "path": "src/com/google/javascript/rhino/jstype/JSType.java",
          "functionStartLine": 851,
          "functionName": "resolve",
          "functionAnnotation": "",
          "functionDoc": "Resolve this type in the given scope.\n\nThe returned value must be equal to {@code this}, as defined by\n{@link Object#equals}. It may or may not be the same object. This method\nmay modify the internal state of {@code this}, as long as it does\nso in a way that preserves Object equality.\n\nFor efficiency, we should only resolve a type once per compilation job.\nFor incremental compilations, one compilation job may need the\nartifacts from a previous generation, so we will eventually need\na generational flag instead of a boolean one.\n",
          "diff": "@@ -1,14 +1,11 @@\n-public void resolve(ErrorReporter t, StaticScope\u003cJSType\u003e enclosing) {\n-    if (isResolved())\n-        return;\n-    resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-        handleTypeCycle(t);\n+public final JSType resolve(ErrorReporter t, StaticScope\u003cJSType\u003e scope) {\n+    if (resolved) {\n+        if (resolveResult \u003d\u003d null) {\n+            return registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);\n+        }\n+        return resolveResult;\n     }\n-    if (isResolved())\n-        return;\n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-        handleTypeCycle(t);\n-    }\n+    resolved \u003d true;\n+    resolveResult \u003d resolveInternal(t, scope);\n+    return resolveResult;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[t-ErrorReporter, enclosing-StaticScope\u003cJSType\u003e]",
            "newValue": "[t-ErrorReporter, scope-StaticScope\u003cJSType\u003e]"
          }
        }
      ]
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,14 @@\n+public void resolve(ErrorReporter t, StaticScope\u003cJSType\u003e enclosing) {\n+    if (isResolved())\n+        return;\n+    resolveViaRegistry(t, enclosing);\n+    if (detectImplicitPrototypeCycle()) {\n+        handleTypeCycle(t);\n+    }\n+    if (isResolved())\n+        return;\n+    resolveViaProperties(t, enclosing);\n+    if (detectImplicitPrototypeCycle()) {\n+        handleTypeCycle(t);\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "public void resolve(ErrorReporter t, StaticScope\u003cJSType\u003e enclosing) {\n    if (isResolved())\n        return;\n    resolveViaRegistry(t, enclosing);\n    if (detectImplicitPrototypeCycle()) {\n        handleTypeCycle(t);\n    }\n    if (isResolved())\n        return;\n    resolveViaProperties(t, enclosing);\n    if (detectImplicitPrototypeCycle()) {\n        handleTypeCycle(t);\n    }\n}",
      "path": "src/com/google/javascript/rhino/jstype/NamedType.java",
      "functionStartLine": 188,
      "functionName": "resolve",
      "functionAnnotation": "",
      "functionDoc": "Resolve the referenced type within the enclosing scope.\n"
    }
  }
}