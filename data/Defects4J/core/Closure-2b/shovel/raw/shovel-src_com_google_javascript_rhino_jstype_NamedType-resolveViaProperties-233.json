{
  "origin": "codeshovel",
  "repositoryName": "Closure-2b",
  "repositoryPath": "/tmp/Closure-2b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NamedType.java",
  "functionName": "resolveViaProperties",
  "functionId": "resolveViaProperties___t-ErrorReporter__enclosing-StaticScope__JSType__",
  "sourceFilePath": "src/com/google/javascript/rhino/jstype/NamedType.java",
  "functionAnnotation": "",
  "functionDoc": "Resolves a named type by looking up its first component in the scope, and\nsubsequent components as properties. The scope must have been fully\nparsed and a symbol table constructed.\n",
  "functionStartLine": 233,
  "functionEndLine": 258,
  "numCommitsSeen": 39,
  "timeTaken": 1212,
  "changeHistory": [
    "ab9150f51865434432e38ddb79c01944542bdde1",
    "bd9c7b620384fe5a98772729001ed56304459bc6",
    "01d1238a2a577d8988a72c29304a3283ca05a29a",
    "fc0798047ad3aac58a54ea65f9f1c8857745419f",
    "d6227f739b8380f74663b2f536ed4a9649fd0841",
    "b2a304dd9ec2ab9fe4ddf88d07f80cba26cc266d",
    "a2d8936fae3eb0e3873c7f7c0233344c81436404",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "ab9150f51865434432e38ddb79c01944542bdde1": "Ybodychange",
    "bd9c7b620384fe5a98772729001ed56304459bc6": "Ybodychange",
    "01d1238a2a577d8988a72c29304a3283ca05a29a": "Ybodychange",
    "fc0798047ad3aac58a54ea65f9f1c8857745419f": "Ybodychange",
    "d6227f739b8380f74663b2f536ed4a9649fd0841": "Ybodychange",
    "b2a304dd9ec2ab9fe4ddf88d07f80cba26cc266d": "Ybodychange",
    "a2d8936fae3eb0e3873c7f7c0233344c81436404": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ab9150f51865434432e38ddb79c01944542bdde1": {
      "type": "Ybodychange",
      "commitMessage": "\nspecial-handling for resolving bottom types (like\nActiveXObject)\n\nR\u003dacleung\nDELTA\u003d17  (16 added, 0 deleted, 1 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3317\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1459 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/21/11, 12:03 PM",
      "commitName": "ab9150f51865434432e38ddb79c01944542bdde1",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "8/18/11, 3:46 PM",
      "commitNameOld": "bd9c7b620384fe5a98772729001ed56304459bc6",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 33.84,
      "commitsBetweenForRepo": 91,
      "commitsBetweenForFile": 1,
      "actualSource": "private void resolveViaProperties(ErrorReporter t, StaticScope\u003cJSType\u003e enclosing) {\n    JSType value \u003d lookupViaProperties(t, enclosing);\n    if (value !\u003d null \u0026\u0026 value.isFunctionType() \u0026\u0026 (value.isConstructor() || value.isInterface())) {\n        FunctionType functionType \u003d value.toMaybeFunctionType();\n        setReferencedAndResolvedType(functionType.getInstanceType(), t, enclosing);\n    } else if (value !\u003d null \u0026\u0026 value.isNoObjectType()) {\n        setReferencedAndResolvedType(registry.getNativeFunctionType(JSTypeNative.NO_OBJECT_TYPE).getInstanceType(), t, enclosing);\n    } else if (value instanceof EnumType) {\n        setReferencedAndResolvedType(((EnumType) value).getElementsType(), t, enclosing);\n    } else {\n        handleUnresolvedType(t, value \u003d\u003d null || value.isUnknownType());\n    }\n}",
      "path": "src/com/google/javascript/rhino/jstype/NamedType.java",
      "functionStartLine": 257,
      "functionName": "resolveViaProperties",
      "functionAnnotation": "",
      "functionDoc": "Resolves a named type by looking up its first component in the scope, and\nsubsequent components as properties. The scope must have been fully\nparsed and a symbol table constructed.\n",
      "diff": "@@ -1,11 +1,13 @@\n private void resolveViaProperties(ErrorReporter t, StaticScope\u003cJSType\u003e enclosing) {\n     JSType value \u003d lookupViaProperties(t, enclosing);\n-    if (value !\u003d null \u0026\u0026 (value.isConstructor() || value.isInterface())) {\n+    if (value !\u003d null \u0026\u0026 value.isFunctionType() \u0026\u0026 (value.isConstructor() || value.isInterface())) {\n         FunctionType functionType \u003d value.toMaybeFunctionType();\n         setReferencedAndResolvedType(functionType.getInstanceType(), t, enclosing);\n+    } else if (value !\u003d null \u0026\u0026 value.isNoObjectType()) {\n+        setReferencedAndResolvedType(registry.getNativeFunctionType(JSTypeNative.NO_OBJECT_TYPE).getInstanceType(), t, enclosing);\n     } else if (value instanceof EnumType) {\n         setReferencedAndResolvedType(((EnumType) value).getElementsType(), t, enclosing);\n     } else {\n         handleUnresolvedType(t, value \u003d\u003d null || value.isUnknownType());\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bd9c7b620384fe5a98772729001ed56304459bc6": {
      "type": "Ybodychange",
      "commitMessage": "\nAdd toMaybeFunctionType/toMaybeEnumElementType.\ntry #2. the bugs in jstestc were fixed. this cl is exactly\nthe same as the original\n\nR\u003djohnlenz\nDELTA\u003d317  (79 added, 47 deleted, 191 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3078\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1367 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/18/11, 3:46 PM",
      "commitName": "bd9c7b620384fe5a98772729001ed56304459bc6",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "8/18/11, 10:40 AM",
      "commitNameOld": "01d1238a2a577d8988a72c29304a3283ca05a29a",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.21,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private void resolveViaProperties(ErrorReporter t, StaticScope\u003cJSType\u003e enclosing) {\n    JSType value \u003d lookupViaProperties(t, enclosing);\n    if (value !\u003d null \u0026\u0026 (value.isConstructor() || value.isInterface())) {\n        FunctionType functionType \u003d value.toMaybeFunctionType();\n        setReferencedAndResolvedType(functionType.getInstanceType(), t, enclosing);\n    } else if (value instanceof EnumType) {\n        setReferencedAndResolvedType(((EnumType) value).getElementsType(), t, enclosing);\n    } else {\n        handleUnresolvedType(t, value \u003d\u003d null || value.isUnknownType());\n    }\n}",
      "path": "src/com/google/javascript/rhino/jstype/NamedType.java",
      "functionStartLine": 257,
      "functionName": "resolveViaProperties",
      "functionAnnotation": "",
      "functionDoc": "Resolves a named type by looking up its first component in the scope, and\nsubsequent components as properties. The scope must have been fully\nparsed and a symbol table constructed.\n",
      "diff": "@@ -1,11 +1,11 @@\n private void resolveViaProperties(ErrorReporter t, StaticScope\u003cJSType\u003e enclosing) {\n     JSType value \u003d lookupViaProperties(t, enclosing);\n-    if ((value instanceof FunctionType) \u0026\u0026 (value.isConstructor() || value.isInterface())) {\n-        FunctionType functionType \u003d (FunctionType) value;\n+    if (value !\u003d null \u0026\u0026 (value.isConstructor() || value.isInterface())) {\n+        FunctionType functionType \u003d value.toMaybeFunctionType();\n         setReferencedAndResolvedType(functionType.getInstanceType(), t, enclosing);\n     } else if (value instanceof EnumType) {\n         setReferencedAndResolvedType(((EnumType) value).getElementsType(), t, enclosing);\n     } else {\n         handleUnresolvedType(t, value \u003d\u003d null || value.isUnknownType());\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "01d1238a2a577d8988a72c29304a3283ca05a29a": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nbroke some tests\n\n*** Original change description ***\n\nAdd toMaybeFunctionType/toMaybeEnumElementType.\nwow, nullability is annoying!\n\nDELTA\u003d318  (48 added, 79 deleted, 191 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3075\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1364 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/18/11, 10:40 AM",
      "commitName": "01d1238a2a577d8988a72c29304a3283ca05a29a",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "8/18/11, 9:38 AM",
      "commitNameOld": "fc0798047ad3aac58a54ea65f9f1c8857745419f",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void resolveViaProperties(ErrorReporter t, StaticScope\u003cJSType\u003e enclosing) {\n    JSType value \u003d lookupViaProperties(t, enclosing);\n    if ((value instanceof FunctionType) \u0026\u0026 (value.isConstructor() || value.isInterface())) {\n        FunctionType functionType \u003d (FunctionType) value;\n        setReferencedAndResolvedType(functionType.getInstanceType(), t, enclosing);\n    } else if (value instanceof EnumType) {\n        setReferencedAndResolvedType(((EnumType) value).getElementsType(), t, enclosing);\n    } else {\n        handleUnresolvedType(t, value \u003d\u003d null || value.isUnknownType());\n    }\n}",
      "path": "src/com/google/javascript/rhino/jstype/NamedType.java",
      "functionStartLine": 257,
      "functionName": "resolveViaProperties",
      "functionAnnotation": "",
      "functionDoc": "Resolves a named type by looking up its first component in the scope, and\nsubsequent components as properties. The scope must have been fully\nparsed and a symbol table constructed.\n",
      "diff": "@@ -1,11 +1,11 @@\n private void resolveViaProperties(ErrorReporter t, StaticScope\u003cJSType\u003e enclosing) {\n     JSType value \u003d lookupViaProperties(t, enclosing);\n-    if (value !\u003d null \u0026\u0026 (value.isConstructor() || value.isInterface())) {\n-        FunctionType functionType \u003d value.toMaybeFunctionType();\n+    if ((value instanceof FunctionType) \u0026\u0026 (value.isConstructor() || value.isInterface())) {\n+        FunctionType functionType \u003d (FunctionType) value;\n         setReferencedAndResolvedType(functionType.getInstanceType(), t, enclosing);\n     } else if (value instanceof EnumType) {\n         setReferencedAndResolvedType(((EnumType) value).getElementsType(), t, enclosing);\n     } else {\n         handleUnresolvedType(t, value \u003d\u003d null || value.isUnknownType());\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "fc0798047ad3aac58a54ea65f9f1c8857745419f": {
      "type": "Ybodychange",
      "commitMessage": "\nAdd toMaybeFunctionType/toMaybeEnumElementType.\nwow, nullability is annoying!\n\nR\u003djohnlenz\nDELTA\u003d318  (79 added, 48 deleted, 191 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3074\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1363 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/18/11, 9:38 AM",
      "commitName": "fc0798047ad3aac58a54ea65f9f1c8857745419f",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "7/1/11, 2:00 PM",
      "commitNameOld": "03ce555bcedcf98d99de1b4f8a6238ba75ee6850",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 47.82,
      "commitsBetweenForRepo": 103,
      "commitsBetweenForFile": 1,
      "actualSource": "private void resolveViaProperties(ErrorReporter t, StaticScope\u003cJSType\u003e enclosing) {\n    JSType value \u003d lookupViaProperties(t, enclosing);\n    if (value !\u003d null \u0026\u0026 (value.isConstructor() || value.isInterface())) {\n        FunctionType functionType \u003d value.toMaybeFunctionType();\n        setReferencedAndResolvedType(functionType.getInstanceType(), t, enclosing);\n    } else if (value instanceof EnumType) {\n        setReferencedAndResolvedType(((EnumType) value).getElementsType(), t, enclosing);\n    } else {\n        handleUnresolvedType(t, value \u003d\u003d null || value.isUnknownType());\n    }\n}",
      "path": "src/com/google/javascript/rhino/jstype/NamedType.java",
      "functionStartLine": 257,
      "functionName": "resolveViaProperties",
      "functionAnnotation": "",
      "functionDoc": "Resolves a named type by looking up its first component in the scope, and\nsubsequent components as properties. The scope must have been fully\nparsed and a symbol table constructed.\n",
      "diff": "@@ -1,11 +1,11 @@\n private void resolveViaProperties(ErrorReporter t, StaticScope\u003cJSType\u003e enclosing) {\n     JSType value \u003d lookupViaProperties(t, enclosing);\n-    if ((value instanceof FunctionType) \u0026\u0026 (value.isConstructor() || value.isInterface())) {\n-        FunctionType functionType \u003d (FunctionType) value;\n+    if (value !\u003d null \u0026\u0026 (value.isConstructor() || value.isInterface())) {\n+        FunctionType functionType \u003d value.toMaybeFunctionType();\n         setReferencedAndResolvedType(functionType.getInstanceType(), t, enclosing);\n     } else if (value instanceof EnumType) {\n         setReferencedAndResolvedType(((EnumType) value).getElementsType(), t, enclosing);\n     } else {\n         handleUnresolvedType(t, value \u003d\u003d null || value.isUnknownType());\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d6227f739b8380f74663b2f536ed4a9649fd0841": {
      "type": "Ybodychange",
      "commitMessage": "\nAdd half-assed support for late-resolved typedefs of union types.\nThe fundamental issue is that NamedType is a proxy wrapper around\nObjectTypes, but has always been used for non-object types (like\ntypedef\u0027d unions.\nI eventually want to move towards the using UnresolvedTypes for type\nresolution. Under that system, the proxy wrapper gets thrown away.\nUnresolveTypes would also solve this issue. But that system breaks\na whole bunch of assumptions about hash codes and referential\ntransparency, so we\u0027re not ready for it yet.\n\nR\u003djohnlenz\nDELTA\u003d116  (75 added, 0 deleted, 41 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d304858\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@482 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/8/10, 1:19 PM",
      "commitName": "d6227f739b8380f74663b2f536ed4a9649fd0841",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "9/13/10, 11:12 AM",
      "commitNameOld": "4c6e1039b80859f17de5f3cbcfeba61ed8ea0485",
      "commitAuthorOld": "elbaum@google.com",
      "daysBetweenCommits": 25.09,
      "commitsBetweenForRepo": 57,
      "commitsBetweenForFile": 1,
      "actualSource": "private void resolveViaProperties(ErrorReporter t, StaticScope\u003cJSType\u003e enclosing) {\n    JSType value \u003d lookupViaProperties(t, enclosing);\n    if ((value instanceof FunctionType) \u0026\u0026 (value.isConstructor() || value.isInterface())) {\n        FunctionType functionType \u003d (FunctionType) value;\n        setReferencedAndResolvedType(functionType.getInstanceType(), t, enclosing);\n    } else if (value instanceof EnumType) {\n        setReferencedAndResolvedType(((EnumType) value).getElementsType(), t, enclosing);\n    } else {\n        handleUnresolvedType(t, value \u003d\u003d null || value.isUnknownType());\n    }\n}",
      "path": "src/com/google/javascript/rhino/jstype/NamedType.java",
      "functionStartLine": 224,
      "functionName": "resolveViaProperties",
      "functionAnnotation": "",
      "functionDoc": "Resolves a named type by looking up its first component in the scope, and\nsubsequent components as properties. The scope must have been fully\nparsed and a symbol table constructed.\n",
      "diff": "@@ -1,11 +1,11 @@\n private void resolveViaProperties(ErrorReporter t, StaticScope\u003cJSType\u003e enclosing) {\n     JSType value \u003d lookupViaProperties(t, enclosing);\n     if ((value instanceof FunctionType) \u0026\u0026 (value.isConstructor() || value.isInterface())) {\n         FunctionType functionType \u003d (FunctionType) value;\n-        setReferencedType(functionType.getInstanceType(), t, enclosing);\n+        setReferencedAndResolvedType(functionType.getInstanceType(), t, enclosing);\n     } else if (value instanceof EnumType) {\n-        setReferencedType(((EnumType) value).getElementsType(), t, enclosing);\n+        setReferencedAndResolvedType(((EnumType) value).getElementsType(), t, enclosing);\n     } else {\n         handleUnresolvedType(t, value \u003d\u003d null || value.isUnknownType());\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b2a304dd9ec2ab9fe4ddf88d07f80cba26cc266d": {
      "type": "Ybodychange",
      "commitMessage": "\nDo some clean up on how we resolve type names.\n\nR\u003djohnlenz\nDELTA\u003d103  (73 added, 19 deleted, 11 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d60002\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@305 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/22/10, 12:06 PM",
      "commitName": "b2a304dd9ec2ab9fe4ddf88d07f80cba26cc266d",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "5/27/10, 10:18 PM",
      "commitNameOld": "6d00ac1a68612aade8a19d7ecc9b180f00ae5234",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 55.58,
      "commitsBetweenForRepo": 70,
      "commitsBetweenForFile": 1,
      "actualSource": "private void resolveViaProperties(ErrorReporter t, StaticScope\u003cJSType\u003e enclosing) {\n    JSType value \u003d lookupViaProperties(t, enclosing);\n    if ((value instanceof FunctionType) \u0026\u0026 (value.isConstructor() || value.isInterface())) {\n        FunctionType functionType \u003d (FunctionType) value;\n        setReferencedType(functionType.getInstanceType(), t, enclosing);\n    } else if (value instanceof EnumType) {\n        setReferencedType(((EnumType) value).getElementsType(), t, enclosing);\n    } else {\n        handleUnresolvedType(t, value \u003d\u003d null || value.isUnknownType());\n    }\n}",
      "path": "src/com/google/javascript/rhino/jstype/NamedType.java",
      "functionStartLine": 224,
      "functionName": "resolveViaProperties",
      "functionAnnotation": "",
      "functionDoc": "Resolves a named type by looking up its first component in the scope, and\nsubsequent components as properties. The scope must have been fully\nparsed and a symbol table constructed.\n",
      "diff": "@@ -1,46 +1,11 @@\n private void resolveViaProperties(ErrorReporter t, StaticScope\u003cJSType\u003e enclosing) {\n-    String[] componentNames \u003d reference.split(\"\\\\.\", -1);\n-    if (componentNames[0].length() \u003d\u003d 0) {\n-        handleUnresolvedType(t);\n-        return;\n-    }\n-    StaticSlot\u003cJSType\u003e slot \u003d enclosing.getSlot(componentNames[0]);\n-    if (slot \u003d\u003d null) {\n-        handleUnresolvedType(t);\n-        return;\n-    }\n-    JSType slotType \u003d slot.getType();\n-    if (slotType \u003d\u003d null || slotType.isAllType() || slotType.isNoType()) {\n-        handleUnresolvedType(t);\n-        return;\n-    }\n-    JSType value \u003d getTypedefType(t, slot, componentNames[0]);\n-    if (value \u003d\u003d null) {\n-        handleUnresolvedType(t);\n-        return;\n-    }\n-    for (int i \u003d 1; i \u003c componentNames.length; i++) {\n-        ObjectType parentClass \u003d ObjectType.cast(value);\n-        if (parentClass \u003d\u003d null) {\n-            handleUnresolvedType(t);\n-            return;\n-        }\n-        if (componentNames[i].length() \u003d\u003d 0) {\n-            handleUnresolvedType(t);\n-            return;\n-        }\n-        value \u003d parentClass.getPropertyType(componentNames[i]);\n-    }\n-    if (value instanceof FunctionType) {\n+    JSType value \u003d lookupViaProperties(t, enclosing);\n+    if ((value instanceof FunctionType) \u0026\u0026 (value.isConstructor() || value.isInterface())) {\n         FunctionType functionType \u003d (FunctionType) value;\n-        if (functionType.isConstructor() || functionType.isInterface()) {\n-            setReferencedType(functionType.getInstanceType(), t, enclosing);\n-        } else {\n-            handleUnresolvedType(t);\n-        }\n+        setReferencedType(functionType.getInstanceType(), t, enclosing);\n     } else if (value instanceof EnumType) {\n         setReferencedType(((EnumType) value).getElementsType(), t, enclosing);\n     } else {\n-        handleUnresolvedType(t);\n+        handleUnresolvedType(t, value \u003d\u003d null || value.isUnknownType());\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a2d8936fae3eb0e3873c7f7c0233344c81436404": {
      "type": "Ybodychange",
      "commitMessage": "Add warnings for functions that are ambiguously defined on different\nbrowsers.\n\nAdd better support for Caja.\n\nRollback the change to CoalesceVariableNames, because it had problems.\n\nInternal type system refactoring.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@33 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/15/09, 1:52 PM",
      "commitName": "a2d8936fae3eb0e3873c7f7c0233344c81436404",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "12/7/09, 1:53 PM",
      "commitNameOld": "845f5ff65858fd0d1829f3d2f16f758725e8028f",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 8.0,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "private void resolveViaProperties(ErrorReporter t, StaticScope\u003cJSType\u003e enclosing) {\n    String[] componentNames \u003d reference.split(\"\\\\.\", -1);\n    if (componentNames[0].length() \u003d\u003d 0) {\n        handleUnresolvedType(t);\n        return;\n    }\n    StaticSlot\u003cJSType\u003e slot \u003d enclosing.getSlot(componentNames[0]);\n    if (slot \u003d\u003d null) {\n        handleUnresolvedType(t);\n        return;\n    }\n    JSType slotType \u003d slot.getType();\n    if (slotType \u003d\u003d null || slotType.isAllType() || slotType.isNoType()) {\n        handleUnresolvedType(t);\n        return;\n    }\n    JSType value \u003d getTypedefType(t, slot, componentNames[0]);\n    if (value \u003d\u003d null) {\n        handleUnresolvedType(t);\n        return;\n    }\n    for (int i \u003d 1; i \u003c componentNames.length; i++) {\n        ObjectType parentClass \u003d ObjectType.cast(value);\n        if (parentClass \u003d\u003d null) {\n            handleUnresolvedType(t);\n            return;\n        }\n        if (componentNames[i].length() \u003d\u003d 0) {\n            handleUnresolvedType(t);\n            return;\n        }\n        value \u003d parentClass.getPropertyType(componentNames[i]);\n    }\n    if (value instanceof FunctionType) {\n        FunctionType functionType \u003d (FunctionType) value;\n        if (functionType.isConstructor() || functionType.isInterface()) {\n            setReferencedType(functionType.getInstanceType(), t, enclosing);\n        } else {\n            handleUnresolvedType(t);\n        }\n    } else if (value instanceof EnumType) {\n        setReferencedType(((EnumType) value).getElementsType(), t, enclosing);\n    } else {\n        handleUnresolvedType(t);\n    }\n}",
      "path": "src/com/google/javascript/rhino/jstype/NamedType.java",
      "functionStartLine": 226,
      "functionName": "resolveViaProperties",
      "functionAnnotation": "",
      "functionDoc": "Resolves a named type by looking up its first component in the scope, and\nsubsequent components as properties. The scope must have been fully\nparsed and a symbol table constructed.\n",
      "diff": "@@ -1,46 +1,46 @@\n private void resolveViaProperties(ErrorReporter t, StaticScope\u003cJSType\u003e enclosing) {\n     String[] componentNames \u003d reference.split(\"\\\\.\", -1);\n     if (componentNames[0].length() \u003d\u003d 0) {\n         handleUnresolvedType(t);\n         return;\n     }\n     StaticSlot\u003cJSType\u003e slot \u003d enclosing.getSlot(componentNames[0]);\n     if (slot \u003d\u003d null) {\n         handleUnresolvedType(t);\n         return;\n     }\n     JSType slotType \u003d slot.getType();\n     if (slotType \u003d\u003d null || slotType.isAllType() || slotType.isNoType()) {\n         handleUnresolvedType(t);\n         return;\n     }\n     JSType value \u003d getTypedefType(t, slot, componentNames[0]);\n     if (value \u003d\u003d null) {\n         handleUnresolvedType(t);\n         return;\n     }\n     for (int i \u003d 1; i \u003c componentNames.length; i++) {\n-        if (!(value instanceof ObjectType)) {\n+        ObjectType parentClass \u003d ObjectType.cast(value);\n+        if (parentClass \u003d\u003d null) {\n             handleUnresolvedType(t);\n             return;\n         }\n-        ObjectType parentClass \u003d (ObjectType) value;\n         if (componentNames[i].length() \u003d\u003d 0) {\n             handleUnresolvedType(t);\n             return;\n         }\n         value \u003d parentClass.getPropertyType(componentNames[i]);\n     }\n     if (value instanceof FunctionType) {\n         FunctionType functionType \u003d (FunctionType) value;\n         if (functionType.isConstructor() || functionType.isInterface()) {\n             setReferencedType(functionType.getInstanceType(), t, enclosing);\n         } else {\n             handleUnresolvedType(t);\n         }\n     } else if (value instanceof EnumType) {\n         setReferencedType(((EnumType) value).getElementsType(), t, enclosing);\n     } else {\n         handleUnresolvedType(t);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,46 @@\n+private void resolveViaProperties(ErrorReporter t, StaticScope\u003cJSType\u003e enclosing) {\n+    String[] componentNames \u003d reference.split(\"\\\\.\", -1);\n+    if (componentNames[0].length() \u003d\u003d 0) {\n+        handleUnresolvedType(t);\n+        return;\n+    }\n+    StaticSlot\u003cJSType\u003e slot \u003d enclosing.getSlot(componentNames[0]);\n+    if (slot \u003d\u003d null) {\n+        handleUnresolvedType(t);\n+        return;\n+    }\n+    JSType slotType \u003d slot.getType();\n+    if (slotType \u003d\u003d null || slotType.isAllType() || slotType.isNoType()) {\n+        handleUnresolvedType(t);\n+        return;\n+    }\n+    JSType value \u003d getTypedefType(t, slot, componentNames[0]);\n+    if (value \u003d\u003d null) {\n+        handleUnresolvedType(t);\n+        return;\n+    }\n+    for (int i \u003d 1; i \u003c componentNames.length; i++) {\n+        if (!(value instanceof ObjectType)) {\n+            handleUnresolvedType(t);\n+            return;\n+        }\n+        ObjectType parentClass \u003d (ObjectType) value;\n+        if (componentNames[i].length() \u003d\u003d 0) {\n+            handleUnresolvedType(t);\n+            return;\n+        }\n+        value \u003d parentClass.getPropertyType(componentNames[i]);\n+    }\n+    if (value instanceof FunctionType) {\n+        FunctionType functionType \u003d (FunctionType) value;\n+        if (functionType.isConstructor() || functionType.isInterface()) {\n+            setReferencedType(functionType.getInstanceType(), t, enclosing);\n+        } else {\n+            handleUnresolvedType(t);\n+        }\n+    } else if (value instanceof EnumType) {\n+        setReferencedType(((EnumType) value).getElementsType(), t, enclosing);\n+    } else {\n+        handleUnresolvedType(t);\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void resolveViaProperties(ErrorReporter t, StaticScope\u003cJSType\u003e enclosing) {\n    String[] componentNames \u003d reference.split(\"\\\\.\", -1);\n    if (componentNames[0].length() \u003d\u003d 0) {\n        handleUnresolvedType(t);\n        return;\n    }\n    StaticSlot\u003cJSType\u003e slot \u003d enclosing.getSlot(componentNames[0]);\n    if (slot \u003d\u003d null) {\n        handleUnresolvedType(t);\n        return;\n    }\n    JSType slotType \u003d slot.getType();\n    if (slotType \u003d\u003d null || slotType.isAllType() || slotType.isNoType()) {\n        handleUnresolvedType(t);\n        return;\n    }\n    JSType value \u003d getTypedefType(t, slot, componentNames[0]);\n    if (value \u003d\u003d null) {\n        handleUnresolvedType(t);\n        return;\n    }\n    for (int i \u003d 1; i \u003c componentNames.length; i++) {\n        if (!(value instanceof ObjectType)) {\n            handleUnresolvedType(t);\n            return;\n        }\n        ObjectType parentClass \u003d (ObjectType) value;\n        if (componentNames[i].length() \u003d\u003d 0) {\n            handleUnresolvedType(t);\n            return;\n        }\n        value \u003d parentClass.getPropertyType(componentNames[i]);\n    }\n    if (value instanceof FunctionType) {\n        FunctionType functionType \u003d (FunctionType) value;\n        if (functionType.isConstructor() || functionType.isInterface()) {\n            setReferencedType(functionType.getInstanceType(), t, enclosing);\n        } else {\n            handleUnresolvedType(t);\n        }\n    } else if (value instanceof EnumType) {\n        setReferencedType(((EnumType) value).getElementsType(), t, enclosing);\n    } else {\n        handleUnresolvedType(t);\n    }\n}",
      "path": "src/com/google/javascript/rhino/jstype/NamedType.java",
      "functionStartLine": 224,
      "functionName": "resolveViaProperties",
      "functionAnnotation": "",
      "functionDoc": "Resolves a named type by looking up its first component in the scope, and\nsubsequent components as properties. The scope must have been fully\nparsed and a symbol table constructed.\n"
    }
  }
}