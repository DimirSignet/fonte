{
  "origin": "codeshovel",
  "repositoryName": "Closure-2b",
  "repositoryPath": "/tmp/Closure-2b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NamedType.java",
  "functionName": "handleUnresolvedType",
  "functionId": "handleUnresolvedType___t-ErrorReporter__ignoreForwardReferencedTypes-boolean",
  "sourceFilePath": "src/com/google/javascript/rhino/jstype/NamedType.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 338,
  "functionEndLine": 361,
  "numCommitsSeen": 49,
  "timeTaken": 1494,
  "changeHistory": [
    "22dd6b542acd662c55c0ebe31ba9062d3493740e",
    "4434b45f18d2e74ec809a9bbeb67571b604ce6d0",
    "5709ec1d0bbe5b7726a14d06f7eab9c35150e314",
    "043a352c2e85815a90a1926d112902d924bab6c1",
    "11bd742011d67590031dba6e9d1f7186393b38a0",
    "6dbca87c463d8a1e229a0d92d5cdf92247fdefde",
    "5a3b4cb6b7e816aacd0ffd4c71e23da949fe360d",
    "d6227f739b8380f74663b2f536ed4a9649fd0841",
    "4bc588102a66b46608a29e41d0343e1e27e1c3e5",
    "b2a304dd9ec2ab9fe4ddf88d07f80cba26cc266d",
    "bca9abb0e3062d373fe52c0e8340337588c05708",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "22dd6b542acd662c55c0ebe31ba9062d3493740e": "Ybodychange",
    "4434b45f18d2e74ec809a9bbeb67571b604ce6d0": "Ybodychange",
    "5709ec1d0bbe5b7726a14d06f7eab9c35150e314": "Ybodychange",
    "043a352c2e85815a90a1926d112902d924bab6c1": "Ybodychange",
    "11bd742011d67590031dba6e9d1f7186393b38a0": "Ybodychange",
    "6dbca87c463d8a1e229a0d92d5cdf92247fdefde": "Ybodychange",
    "5a3b4cb6b7e816aacd0ffd4c71e23da949fe360d": "Ybodychange",
    "d6227f739b8380f74663b2f536ed4a9649fd0841": "Ybodychange",
    "4bc588102a66b46608a29e41d0343e1e27e1c3e5": "Ybodychange",
    "b2a304dd9ec2ab9fe4ddf88d07f80cba26cc266d": "Ymultichange(Yparameterchange,Ybodychange)",
    "bca9abb0e3062d373fe52c0e8340337588c05708": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "22dd6b542acd662c55c0ebe31ba9062d3493740e": {
      "type": "Ybodychange",
      "commitMessage": "\nSimplify the error reporter interface.\n\nR\u003dnicksantos\nDELTA\u003d47  (24 added, 5 deleted, 18 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3690\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1585 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/10/11, 12:21 PM",
      "commitName": "22dd6b542acd662c55c0ebe31ba9062d3493740e",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "9/21/11, 12:03 PM",
      "commitNameOld": "ab9150f51865434432e38ddb79c01944542bdde1",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 50.05,
      "commitsBetweenForRepo": 110,
      "commitsBetweenForFile": 1,
      "actualSource": "private void handleUnresolvedType(ErrorReporter t, boolean ignoreForwardReferencedTypes) {\n    if (registry.isLastGeneration()) {\n        boolean isForwardDeclared \u003d ignoreForwardReferencedTypes \u0026\u0026 registry.isForwardDeclaredType(reference);\n        if (!isForwardDeclared \u0026\u0026 registry.isLastGeneration()) {\n            t.warning(\"Bad type annotation. Unknown type \" + reference, sourceName, lineno, charno);\n        } else {\n            setReferencedType(registry.getNativeObjectType(JSTypeNative.NO_RESOLVED_TYPE));\n            if (registry.isLastGeneration() \u0026\u0026 validator !\u003d null) {\n                validator.apply(getReferencedType());\n            }\n        }\n        setResolvedTypeInternal(getReferencedType());\n    } else {\n        setResolvedTypeInternal(this);\n    }\n}",
      "path": "src/com/google/javascript/rhino/jstype/NamedType.java",
      "functionStartLine": 354,
      "functionName": "handleUnresolvedType",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,16 +1,16 @@\n private void handleUnresolvedType(ErrorReporter t, boolean ignoreForwardReferencedTypes) {\n     if (registry.isLastGeneration()) {\n         boolean isForwardDeclared \u003d ignoreForwardReferencedTypes \u0026\u0026 registry.isForwardDeclaredType(reference);\n         if (!isForwardDeclared \u0026\u0026 registry.isLastGeneration()) {\n-            t.warning(\"Bad type annotation. Unknown type \" + reference, sourceName, lineno, null, charno);\n+            t.warning(\"Bad type annotation. Unknown type \" + reference, sourceName, lineno, charno);\n         } else {\n             setReferencedType(registry.getNativeObjectType(JSTypeNative.NO_RESOLVED_TYPE));\n             if (registry.isLastGeneration() \u0026\u0026 validator !\u003d null) {\n                 validator.apply(getReferencedType());\n             }\n         }\n         setResolvedTypeInternal(getReferencedType());\n     } else {\n         setResolvedTypeInternal(this);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4434b45f18d2e74ec809a9bbeb67571b604ce6d0": {
      "type": "Ybodychange",
      "commitMessage": "\nUnforgiven types.\nNow that you can suppress type-parsing warnings by simply turning\noff type checking, we should just get rid of all the old forgiving\nlogic.\n\nR\u003dacleung\nDELTA\u003d128  (5 added, 86 deleted, 37 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d812\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@872 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/10/11, 8:26 AM",
      "commitName": "4434b45f18d2e74ec809a9bbeb67571b604ce6d0",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "3/7/11, 12:59 PM",
      "commitNameOld": "5709ec1d0bbe5b7726a14d06f7eab9c35150e314",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 2.81,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "private void handleUnresolvedType(ErrorReporter t, boolean ignoreForwardReferencedTypes) {\n    if (registry.isLastGeneration()) {\n        boolean isForwardDeclared \u003d ignoreForwardReferencedTypes \u0026\u0026 registry.isForwardDeclaredType(reference);\n        if (!isForwardDeclared \u0026\u0026 registry.isLastGeneration()) {\n            t.warning(\"Bad type annotation. Unknown type \" + reference, sourceName, lineno, null, charno);\n        } else {\n            setReferencedType(registry.getNativeObjectType(JSTypeNative.NO_RESOLVED_TYPE));\n            if (registry.isLastGeneration() \u0026\u0026 validator !\u003d null) {\n                validator.apply(getReferencedType());\n            }\n        }\n        setResolvedTypeInternal(getReferencedType());\n    } else {\n        setResolvedTypeInternal(this);\n    }\n}",
      "path": "src/com/google/javascript/rhino/jstype/NamedType.java",
      "functionStartLine": 350,
      "functionName": "handleUnresolvedType",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,21 +1,16 @@\n private void handleUnresolvedType(ErrorReporter t, boolean ignoreForwardReferencedTypes) {\n     if (registry.isLastGeneration()) {\n         boolean isForwardDeclared \u003d ignoreForwardReferencedTypes \u0026\u0026 registry.isForwardDeclaredType(reference);\n-        boolean beForgiving \u003d forgiving || isForwardDeclared;\n-        if (!beForgiving \u0026\u0026 registry.isLastGeneration()) {\n+        if (!isForwardDeclared \u0026\u0026 registry.isLastGeneration()) {\n             t.warning(\"Bad type annotation. Unknown type \" + reference, sourceName, lineno, null, charno);\n         } else {\n-            if (isForwardDeclared) {\n-                setReferencedType(registry.getNativeObjectType(JSTypeNative.NO_RESOLVED_TYPE));\n-            } else {\n-                setReferencedType(registry.getNativeObjectType(JSTypeNative.CHECKED_UNKNOWN_TYPE));\n-            }\n+            setReferencedType(registry.getNativeObjectType(JSTypeNative.NO_RESOLVED_TYPE));\n             if (registry.isLastGeneration() \u0026\u0026 validator !\u003d null) {\n                 validator.apply(getReferencedType());\n             }\n         }\n         setResolvedTypeInternal(getReferencedType());\n     } else {\n         setResolvedTypeInternal(this);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5709ec1d0bbe5b7726a14d06f7eab9c35150e314": {
      "type": "Ybodychange",
      "commitMessage": "\nPut bad type annotations behind a diagnostic group, so that they\naren\u0027t reported if type-checking isn\u0027t on.\n\nR\u003dacleung\nDELTA\u003d300  (110 added, 11 deleted, 179 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d780\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@857 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/7/11, 12:59 PM",
      "commitName": "5709ec1d0bbe5b7726a14d06f7eab9c35150e314",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "3/7/11, 10:45 AM",
      "commitNameOld": "164dbb3842f3028ccdf89cdbe678d161518e9f05",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.09,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "private void handleUnresolvedType(ErrorReporter t, boolean ignoreForwardReferencedTypes) {\n    if (registry.isLastGeneration()) {\n        boolean isForwardDeclared \u003d ignoreForwardReferencedTypes \u0026\u0026 registry.isForwardDeclaredType(reference);\n        boolean beForgiving \u003d forgiving || isForwardDeclared;\n        if (!beForgiving \u0026\u0026 registry.isLastGeneration()) {\n            t.warning(\"Bad type annotation. Unknown type \" + reference, sourceName, lineno, null, charno);\n        } else {\n            if (isForwardDeclared) {\n                setReferencedType(registry.getNativeObjectType(JSTypeNative.NO_RESOLVED_TYPE));\n            } else {\n                setReferencedType(registry.getNativeObjectType(JSTypeNative.CHECKED_UNKNOWN_TYPE));\n            }\n            if (registry.isLastGeneration() \u0026\u0026 validator !\u003d null) {\n                validator.apply(getReferencedType());\n            }\n        }\n        setResolvedTypeInternal(getReferencedType());\n    } else {\n        setResolvedTypeInternal(this);\n    }\n}",
      "path": "src/com/google/javascript/rhino/jstype/NamedType.java",
      "functionStartLine": 367,
      "functionName": "handleUnresolvedType",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,21 +1,21 @@\n private void handleUnresolvedType(ErrorReporter t, boolean ignoreForwardReferencedTypes) {\n     if (registry.isLastGeneration()) {\n         boolean isForwardDeclared \u003d ignoreForwardReferencedTypes \u0026\u0026 registry.isForwardDeclaredType(reference);\n         boolean beForgiving \u003d forgiving || isForwardDeclared;\n         if (!beForgiving \u0026\u0026 registry.isLastGeneration()) {\n-            t.warning(\"Unknown type \" + reference, sourceName, lineno, null, charno);\n+            t.warning(\"Bad type annotation. Unknown type \" + reference, sourceName, lineno, null, charno);\n         } else {\n             if (isForwardDeclared) {\n                 setReferencedType(registry.getNativeObjectType(JSTypeNative.NO_RESOLVED_TYPE));\n             } else {\n                 setReferencedType(registry.getNativeObjectType(JSTypeNative.CHECKED_UNKNOWN_TYPE));\n             }\n             if (registry.isLastGeneration() \u0026\u0026 validator !\u003d null) {\n                 validator.apply(getReferencedType());\n             }\n         }\n         setResolvedTypeInternal(getReferencedType());\n     } else {\n         setResolvedTypeInternal(this);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "043a352c2e85815a90a1926d112902d924bab6c1": {
      "type": "Ybodychange",
      "commitMessage": "\nWhen we can\u0027t find a forward-declared type,\nthat type should resolve to an empty type.\nThis ensures that if someone tries to pass a param or return\nvalue to it, they get a type warning.\nTry #3\n!!!\n\nR\u003djohnlenz\nDELTA\u003d534  (451 added, 37 deleted, 46 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d362\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@731 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/26/11, 8:30 AM",
      "commitName": "043a352c2e85815a90a1926d112902d924bab6c1",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "1/18/11, 5:02 PM",
      "commitNameOld": "11bd742011d67590031dba6e9d1f7186393b38a0",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 7.64,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "actualSource": "private void handleUnresolvedType(ErrorReporter t, boolean ignoreForwardReferencedTypes) {\n    if (registry.isLastGeneration()) {\n        boolean isForwardDeclared \u003d ignoreForwardReferencedTypes \u0026\u0026 registry.isForwardDeclaredType(reference);\n        boolean beForgiving \u003d forgiving || isForwardDeclared;\n        if (!beForgiving \u0026\u0026 registry.isLastGeneration()) {\n            t.warning(\"Unknown type \" + reference, sourceName, lineno, null, charno);\n        } else {\n            if (isForwardDeclared) {\n                setReferencedType(registry.getNativeObjectType(JSTypeNative.NO_RESOLVED_TYPE));\n            } else {\n                setReferencedType(registry.getNativeObjectType(JSTypeNative.CHECKED_UNKNOWN_TYPE));\n            }\n            if (registry.isLastGeneration() \u0026\u0026 validator !\u003d null) {\n                validator.apply(getReferencedType());\n            }\n        }\n        setResolvedTypeInternal(getReferencedType());\n    } else {\n        setResolvedTypeInternal(this);\n    }\n}",
      "path": "src/com/google/javascript/rhino/jstype/NamedType.java",
      "functionStartLine": 323,
      "functionName": "handleUnresolvedType",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,17 +1,21 @@\n private void handleUnresolvedType(ErrorReporter t, boolean ignoreForwardReferencedTypes) {\n     if (registry.isLastGeneration()) {\n         boolean isForwardDeclared \u003d ignoreForwardReferencedTypes \u0026\u0026 registry.isForwardDeclaredType(reference);\n         boolean beForgiving \u003d forgiving || isForwardDeclared;\n         if (!beForgiving \u0026\u0026 registry.isLastGeneration()) {\n             t.warning(\"Unknown type \" + reference, sourceName, lineno, null, charno);\n         } else {\n-            setReferencedType(registry.getNativeObjectType(JSTypeNative.CHECKED_UNKNOWN_TYPE));\n+            if (isForwardDeclared) {\n+                setReferencedType(registry.getNativeObjectType(JSTypeNative.NO_RESOLVED_TYPE));\n+            } else {\n+                setReferencedType(registry.getNativeObjectType(JSTypeNative.CHECKED_UNKNOWN_TYPE));\n+            }\n             if (registry.isLastGeneration() \u0026\u0026 validator !\u003d null) {\n                 validator.apply(getReferencedType());\n             }\n         }\n         setResolvedTypeInternal(getReferencedType());\n     } else {\n         setResolvedTypeInternal(this);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "11bd742011d67590031dba6e9d1f7186393b38a0": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nbreaks contacts\n\n*** Original change description ***\n\nWhen we can\u0027t find a forward-declared type,\nthat type should resolve to an empty type.\nThis ensures that if someone tries to pass a param or return\nvalue to it, they get a type warning.\n\nDELTA\u003d461  (37 added, 385 deleted, 39 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d302\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@703 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/18/11, 5:02 PM",
      "commitName": "11bd742011d67590031dba6e9d1f7186393b38a0",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "1/18/11, 3:28 PM",
      "commitNameOld": "6dbca87c463d8a1e229a0d92d5cdf92247fdefde",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void handleUnresolvedType(ErrorReporter t, boolean ignoreForwardReferencedTypes) {\n    if (registry.isLastGeneration()) {\n        boolean isForwardDeclared \u003d ignoreForwardReferencedTypes \u0026\u0026 registry.isForwardDeclaredType(reference);\n        boolean beForgiving \u003d forgiving || isForwardDeclared;\n        if (!beForgiving \u0026\u0026 registry.isLastGeneration()) {\n            t.warning(\"Unknown type \" + reference, sourceName, lineno, null, charno);\n        } else {\n            setReferencedType(registry.getNativeObjectType(JSTypeNative.CHECKED_UNKNOWN_TYPE));\n            if (registry.isLastGeneration() \u0026\u0026 validator !\u003d null) {\n                validator.apply(getReferencedType());\n            }\n        }\n        setResolvedTypeInternal(getReferencedType());\n    } else {\n        setResolvedTypeInternal(this);\n    }\n}",
      "path": "src/com/google/javascript/rhino/jstype/NamedType.java",
      "functionStartLine": 323,
      "functionName": "handleUnresolvedType",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,21 +1,17 @@\n private void handleUnresolvedType(ErrorReporter t, boolean ignoreForwardReferencedTypes) {\n     if (registry.isLastGeneration()) {\n         boolean isForwardDeclared \u003d ignoreForwardReferencedTypes \u0026\u0026 registry.isForwardDeclaredType(reference);\n         boolean beForgiving \u003d forgiving || isForwardDeclared;\n         if (!beForgiving \u0026\u0026 registry.isLastGeneration()) {\n             t.warning(\"Unknown type \" + reference, sourceName, lineno, null, charno);\n         } else {\n-            if (isForwardDeclared) {\n-                setReferencedType(registry.getNativeObjectType(JSTypeNative.NO_RESOLVED_TYPE));\n-            } else {\n-                setReferencedType(registry.getNativeObjectType(JSTypeNative.CHECKED_UNKNOWN_TYPE));\n-            }\n+            setReferencedType(registry.getNativeObjectType(JSTypeNative.CHECKED_UNKNOWN_TYPE));\n             if (registry.isLastGeneration() \u0026\u0026 validator !\u003d null) {\n                 validator.apply(getReferencedType());\n             }\n         }\n         setResolvedTypeInternal(getReferencedType());\n     } else {\n         setResolvedTypeInternal(this);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6dbca87c463d8a1e229a0d92d5cdf92247fdefde": {
      "type": "Ybodychange",
      "commitMessage": "\nWhen we can\u0027t find a forward-declared type,\nthat type should resolve to an empty type.\nThis ensures that if someone tries to pass a param or return\nvalue to it, they get a type warning.\n\nR\u003djohnlenz\nDELTA\u003d461  (385 added, 37 deleted, 39 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d301\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@702 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/18/11, 3:28 PM",
      "commitName": "6dbca87c463d8a1e229a0d92d5cdf92247fdefde",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "10/13/10, 2:23 PM",
      "commitNameOld": "5a3b4cb6b7e816aacd0ffd4c71e23da949fe360d",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 97.09,
      "commitsBetweenForRepo": 210,
      "commitsBetweenForFile": 1,
      "actualSource": "private void handleUnresolvedType(ErrorReporter t, boolean ignoreForwardReferencedTypes) {\n    if (registry.isLastGeneration()) {\n        boolean isForwardDeclared \u003d ignoreForwardReferencedTypes \u0026\u0026 registry.isForwardDeclaredType(reference);\n        boolean beForgiving \u003d forgiving || isForwardDeclared;\n        if (!beForgiving \u0026\u0026 registry.isLastGeneration()) {\n            t.warning(\"Unknown type \" + reference, sourceName, lineno, null, charno);\n        } else {\n            if (isForwardDeclared) {\n                setReferencedType(registry.getNativeObjectType(JSTypeNative.NO_RESOLVED_TYPE));\n            } else {\n                setReferencedType(registry.getNativeObjectType(JSTypeNative.CHECKED_UNKNOWN_TYPE));\n            }\n            if (registry.isLastGeneration() \u0026\u0026 validator !\u003d null) {\n                validator.apply(getReferencedType());\n            }\n        }\n        setResolvedTypeInternal(getReferencedType());\n    } else {\n        setResolvedTypeInternal(this);\n    }\n}",
      "path": "src/com/google/javascript/rhino/jstype/NamedType.java",
      "functionStartLine": 323,
      "functionName": "handleUnresolvedType",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,17 +1,21 @@\n private void handleUnresolvedType(ErrorReporter t, boolean ignoreForwardReferencedTypes) {\n     if (registry.isLastGeneration()) {\n         boolean isForwardDeclared \u003d ignoreForwardReferencedTypes \u0026\u0026 registry.isForwardDeclaredType(reference);\n         boolean beForgiving \u003d forgiving || isForwardDeclared;\n         if (!beForgiving \u0026\u0026 registry.isLastGeneration()) {\n             t.warning(\"Unknown type \" + reference, sourceName, lineno, null, charno);\n         } else {\n-            setReferencedType(registry.getNativeObjectType(JSTypeNative.CHECKED_UNKNOWN_TYPE));\n+            if (isForwardDeclared) {\n+                setReferencedType(registry.getNativeObjectType(JSTypeNative.NO_RESOLVED_TYPE));\n+            } else {\n+                setReferencedType(registry.getNativeObjectType(JSTypeNative.CHECKED_UNKNOWN_TYPE));\n+            }\n             if (registry.isLastGeneration() \u0026\u0026 validator !\u003d null) {\n                 validator.apply(getReferencedType());\n             }\n         }\n         setResolvedTypeInternal(getReferencedType());\n     } else {\n         setResolvedTypeInternal(this);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5a3b4cb6b7e816aacd0ffd4c71e23da949fe360d": {
      "type": "Ybodychange",
      "commitMessage": "\nimprove validation for types that are resolved later.\n\nR\u003djohnlenz\nDELTA\u003d192  (166 added, 1 deleted, 25 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d337976\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@486 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/13/10, 2:23 PM",
      "commitName": "5a3b4cb6b7e816aacd0ffd4c71e23da949fe360d",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "10/8/10, 1:19 PM",
      "commitNameOld": "d6227f739b8380f74663b2f536ed4a9649fd0841",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 5.04,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "private void handleUnresolvedType(ErrorReporter t, boolean ignoreForwardReferencedTypes) {\n    if (registry.isLastGeneration()) {\n        boolean isForwardDeclared \u003d ignoreForwardReferencedTypes \u0026\u0026 registry.isForwardDeclaredType(reference);\n        boolean beForgiving \u003d forgiving || isForwardDeclared;\n        if (!beForgiving \u0026\u0026 registry.isLastGeneration()) {\n            t.warning(\"Unknown type \" + reference, sourceName, lineno, null, charno);\n        } else {\n            setReferencedType(registry.getNativeObjectType(JSTypeNative.CHECKED_UNKNOWN_TYPE));\n            if (registry.isLastGeneration() \u0026\u0026 validator !\u003d null) {\n                validator.apply(getReferencedType());\n            }\n        }\n        setResolvedTypeInternal(getReferencedType());\n    } else {\n        setResolvedTypeInternal(this);\n    }\n}",
      "path": "src/com/google/javascript/rhino/jstype/NamedType.java",
      "functionStartLine": 323,
      "functionName": "handleUnresolvedType",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,13 +1,17 @@\n private void handleUnresolvedType(ErrorReporter t, boolean ignoreForwardReferencedTypes) {\n     if (registry.isLastGeneration()) {\n-        boolean beForgiving \u003d forgiving || (ignoreForwardReferencedTypes \u0026\u0026 registry.isForwardDeclaredType(reference));\n+        boolean isForwardDeclared \u003d ignoreForwardReferencedTypes \u0026\u0026 registry.isForwardDeclaredType(reference);\n+        boolean beForgiving \u003d forgiving || isForwardDeclared;\n         if (!beForgiving \u0026\u0026 registry.isLastGeneration()) {\n             t.warning(\"Unknown type \" + reference, sourceName, lineno, null, charno);\n         } else {\n             setReferencedType(registry.getNativeObjectType(JSTypeNative.CHECKED_UNKNOWN_TYPE));\n+            if (registry.isLastGeneration() \u0026\u0026 validator !\u003d null) {\n+                validator.apply(getReferencedType());\n+            }\n         }\n         setResolvedTypeInternal(getReferencedType());\n     } else {\n         setResolvedTypeInternal(this);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d6227f739b8380f74663b2f536ed4a9649fd0841": {
      "type": "Ybodychange",
      "commitMessage": "\nAdd half-assed support for late-resolved typedefs of union types.\nThe fundamental issue is that NamedType is a proxy wrapper around\nObjectTypes, but has always been used for non-object types (like\ntypedef\u0027d unions.\nI eventually want to move towards the using UnresolvedTypes for type\nresolution. Under that system, the proxy wrapper gets thrown away.\nUnresolveTypes would also solve this issue. But that system breaks\na whole bunch of assumptions about hash codes and referential\ntransparency, so we\u0027re not ready for it yet.\n\nR\u003djohnlenz\nDELTA\u003d116  (75 added, 0 deleted, 41 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d304858\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@482 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/8/10, 1:19 PM",
      "commitName": "d6227f739b8380f74663b2f536ed4a9649fd0841",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "9/13/10, 11:12 AM",
      "commitNameOld": "4c6e1039b80859f17de5f3cbcfeba61ed8ea0485",
      "commitAuthorOld": "elbaum@google.com",
      "daysBetweenCommits": 25.09,
      "commitsBetweenForRepo": 57,
      "commitsBetweenForFile": 1,
      "actualSource": "private void handleUnresolvedType(ErrorReporter t, boolean ignoreForwardReferencedTypes) {\n    if (registry.isLastGeneration()) {\n        boolean beForgiving \u003d forgiving || (ignoreForwardReferencedTypes \u0026\u0026 registry.isForwardDeclaredType(reference));\n        if (!beForgiving \u0026\u0026 registry.isLastGeneration()) {\n            t.warning(\"Unknown type \" + reference, sourceName, lineno, null, charno);\n        } else {\n            setReferencedType(registry.getNativeObjectType(JSTypeNative.CHECKED_UNKNOWN_TYPE));\n        }\n        setResolvedTypeInternal(getReferencedType());\n    } else {\n        setResolvedTypeInternal(this);\n    }\n}",
      "path": "src/com/google/javascript/rhino/jstype/NamedType.java",
      "functionStartLine": 314,
      "functionName": "handleUnresolvedType",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,13 +1,13 @@\n private void handleUnresolvedType(ErrorReporter t, boolean ignoreForwardReferencedTypes) {\n     if (registry.isLastGeneration()) {\n         boolean beForgiving \u003d forgiving || (ignoreForwardReferencedTypes \u0026\u0026 registry.isForwardDeclaredType(reference));\n         if (!beForgiving \u0026\u0026 registry.isLastGeneration()) {\n             t.warning(\"Unknown type \" + reference, sourceName, lineno, null, charno);\n         } else {\n-            referencedType \u003d registry.getNativeObjectType(JSTypeNative.CHECKED_UNKNOWN_TYPE);\n+            setReferencedType(registry.getNativeObjectType(JSTypeNative.CHECKED_UNKNOWN_TYPE));\n         }\n-        setResolvedTypeInternal(referencedType);\n+        setResolvedTypeInternal(getReferencedType());\n     } else {\n         setResolvedTypeInternal(this);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4bc588102a66b46608a29e41d0343e1e27e1c3e5": {
      "type": "Ybodychange",
      "commitMessage": "\ndon\u0027t unbox proxy types until the last generation\n\nR\u003djohnlenz\nDELTA\u003d68  (54 added, 3 deleted, 11 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d92003\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@350 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/10/10, 2:49 PM",
      "commitName": "4bc588102a66b46608a29e41d0343e1e27e1c3e5",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "8/10/10, 10:17 AM",
      "commitNameOld": "027442d1a12004c6e27ca76d5eea68774c52ce7c",
      "commitAuthorOld": "elnatan@google.com",
      "daysBetweenCommits": 0.19,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "private void handleUnresolvedType(ErrorReporter t, boolean ignoreForwardReferencedTypes) {\n    if (registry.isLastGeneration()) {\n        boolean beForgiving \u003d forgiving || (ignoreForwardReferencedTypes \u0026\u0026 registry.isForwardDeclaredType(reference));\n        if (!beForgiving \u0026\u0026 registry.isLastGeneration()) {\n            t.warning(\"Unknown type \" + reference, sourceName, lineno, null, charno);\n        } else {\n            referencedType \u003d registry.getNativeObjectType(JSTypeNative.CHECKED_UNKNOWN_TYPE);\n        }\n        setResolvedTypeInternal(referencedType);\n    } else {\n        setResolvedTypeInternal(this);\n    }\n}",
      "path": "src/com/google/javascript/rhino/jstype/NamedType.java",
      "functionStartLine": 310,
      "functionName": "handleUnresolvedType",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,9 +1,13 @@\n private void handleUnresolvedType(ErrorReporter t, boolean ignoreForwardReferencedTypes) {\n-    boolean beForgiving \u003d forgiving || (ignoreForwardReferencedTypes \u0026\u0026 registry.isForwardDeclaredType(reference));\n-    if (!beForgiving \u0026\u0026 registry.isLastGeneration()) {\n-        t.warning(\"Unknown type \" + reference, sourceName, lineno, null, charno);\n+    if (registry.isLastGeneration()) {\n+        boolean beForgiving \u003d forgiving || (ignoreForwardReferencedTypes \u0026\u0026 registry.isForwardDeclaredType(reference));\n+        if (!beForgiving \u0026\u0026 registry.isLastGeneration()) {\n+            t.warning(\"Unknown type \" + reference, sourceName, lineno, null, charno);\n+        } else {\n+            referencedType \u003d registry.getNativeObjectType(JSTypeNative.CHECKED_UNKNOWN_TYPE);\n+        }\n+        setResolvedTypeInternal(referencedType);\n     } else {\n-        referencedType \u003d registry.getNativeObjectType(JSTypeNative.CHECKED_UNKNOWN_TYPE);\n+        setResolvedTypeInternal(this);\n     }\n-    setResolvedTypeInternal(referencedType);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b2a304dd9ec2ab9fe4ddf88d07f80cba26cc266d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "\nDo some clean up on how we resolve type names.\n\nR\u003djohnlenz\nDELTA\u003d103  (73 added, 19 deleted, 11 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d60002\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@305 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/22/10, 12:06 PM",
      "commitName": "b2a304dd9ec2ab9fe4ddf88d07f80cba26cc266d",
      "commitAuthor": "nicksantos@google.com",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "\nDo some clean up on how we resolve type names.\n\nR\u003djohnlenz\nDELTA\u003d103  (73 added, 19 deleted, 11 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d60002\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@305 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "7/22/10, 12:06 PM",
          "commitName": "b2a304dd9ec2ab9fe4ddf88d07f80cba26cc266d",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "5/27/10, 10:18 PM",
          "commitNameOld": "6d00ac1a68612aade8a19d7ecc9b180f00ae5234",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 55.58,
          "commitsBetweenForRepo": 70,
          "commitsBetweenForFile": 1,
          "actualSource": "private void handleUnresolvedType(ErrorReporter t, boolean ignoreForwardReferencedTypes) {\n    boolean beForgiving \u003d forgiving || (ignoreForwardReferencedTypes \u0026\u0026 registry.isForwardDeclaredType(reference));\n    if (!beForgiving \u0026\u0026 registry.isLastGeneration()) {\n        t.warning(\"Unknown type \" + reference, sourceName, lineno, null, charno);\n    } else {\n        referencedType \u003d registry.getNativeObjectType(JSTypeNative.CHECKED_UNKNOWN_TYPE);\n    }\n    setResolvedTypeInternal(referencedType);\n}",
          "path": "src/com/google/javascript/rhino/jstype/NamedType.java",
          "functionStartLine": 310,
          "functionName": "handleUnresolvedType",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,8 +1,9 @@\n-private void handleUnresolvedType(ErrorReporter t) {\n-    if (!registry.isForwardDeclaredType(reference) \u0026\u0026 !forgiving \u0026\u0026 registry.isLastGeneration()) {\n+private void handleUnresolvedType(ErrorReporter t, boolean ignoreForwardReferencedTypes) {\n+    boolean beForgiving \u003d forgiving || (ignoreForwardReferencedTypes \u0026\u0026 registry.isForwardDeclaredType(reference));\n+    if (!beForgiving \u0026\u0026 registry.isLastGeneration()) {\n         t.warning(\"Unknown type \" + reference, sourceName, lineno, null, charno);\n     } else {\n         referencedType \u003d registry.getNativeObjectType(JSTypeNative.CHECKED_UNKNOWN_TYPE);\n     }\n     setResolvedTypeInternal(referencedType);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[t-ErrorReporter]",
            "newValue": "[t-ErrorReporter, ignoreForwardReferencedTypes-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nDo some clean up on how we resolve type names.\n\nR\u003djohnlenz\nDELTA\u003d103  (73 added, 19 deleted, 11 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d60002\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@305 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "7/22/10, 12:06 PM",
          "commitName": "b2a304dd9ec2ab9fe4ddf88d07f80cba26cc266d",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "5/27/10, 10:18 PM",
          "commitNameOld": "6d00ac1a68612aade8a19d7ecc9b180f00ae5234",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 55.58,
          "commitsBetweenForRepo": 70,
          "commitsBetweenForFile": 1,
          "actualSource": "private void handleUnresolvedType(ErrorReporter t, boolean ignoreForwardReferencedTypes) {\n    boolean beForgiving \u003d forgiving || (ignoreForwardReferencedTypes \u0026\u0026 registry.isForwardDeclaredType(reference));\n    if (!beForgiving \u0026\u0026 registry.isLastGeneration()) {\n        t.warning(\"Unknown type \" + reference, sourceName, lineno, null, charno);\n    } else {\n        referencedType \u003d registry.getNativeObjectType(JSTypeNative.CHECKED_UNKNOWN_TYPE);\n    }\n    setResolvedTypeInternal(referencedType);\n}",
          "path": "src/com/google/javascript/rhino/jstype/NamedType.java",
          "functionStartLine": 310,
          "functionName": "handleUnresolvedType",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,8 +1,9 @@\n-private void handleUnresolvedType(ErrorReporter t) {\n-    if (!registry.isForwardDeclaredType(reference) \u0026\u0026 !forgiving \u0026\u0026 registry.isLastGeneration()) {\n+private void handleUnresolvedType(ErrorReporter t, boolean ignoreForwardReferencedTypes) {\n+    boolean beForgiving \u003d forgiving || (ignoreForwardReferencedTypes \u0026\u0026 registry.isForwardDeclaredType(reference));\n+    if (!beForgiving \u0026\u0026 registry.isLastGeneration()) {\n         t.warning(\"Unknown type \" + reference, sourceName, lineno, null, charno);\n     } else {\n         referencedType \u003d registry.getNativeObjectType(JSTypeNative.CHECKED_UNKNOWN_TYPE);\n     }\n     setResolvedTypeInternal(referencedType);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "bca9abb0e3062d373fe52c0e8340337588c05708": {
      "type": "Ybodychange",
      "commitMessage": "Make sure that InlineVariables can inline variables that are never defined.\n\nCreate a function-inlining blacklist.\n\nSome minor type inference fixes.\n\nStart re-architecting type resolution to happen differently.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@77 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/26/10, 1:59 PM",
      "commitName": "bca9abb0e3062d373fe52c0e8340337588c05708",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "12/15/09, 1:52 PM",
      "commitNameOld": "a2d8936fae3eb0e3873c7f7c0233344c81436404",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 42.0,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "actualSource": "private void handleUnresolvedType(ErrorReporter t) {\n    if (!registry.isForwardDeclaredType(reference) \u0026\u0026 !forgiving \u0026\u0026 registry.isLastGeneration()) {\n        t.warning(\"Unknown type \" + reference, sourceName, lineno, null, charno);\n    } else {\n        referencedType \u003d registry.getNativeObjectType(JSTypeNative.CHECKED_UNKNOWN_TYPE);\n    }\n    setResolvedTypeInternal(referencedType);\n}",
      "path": "src/com/google/javascript/rhino/jstype/NamedType.java",
      "functionStartLine": 301,
      "functionName": "handleUnresolvedType",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,8 +1,8 @@\n private void handleUnresolvedType(ErrorReporter t) {\n     if (!registry.isForwardDeclaredType(reference) \u0026\u0026 !forgiving \u0026\u0026 registry.isLastGeneration()) {\n         t.warning(\"Unknown type \" + reference, sourceName, lineno, null, charno);\n     } else {\n         referencedType \u003d registry.getNativeObjectType(JSTypeNative.CHECKED_UNKNOWN_TYPE);\n     }\n-    isResolved \u003d true;\n+    setResolvedTypeInternal(referencedType);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,8 @@\n+private void handleUnresolvedType(ErrorReporter t) {\n+    if (!registry.isForwardDeclaredType(reference) \u0026\u0026 !forgiving \u0026\u0026 registry.isLastGeneration()) {\n+        t.warning(\"Unknown type \" + reference, sourceName, lineno, null, charno);\n+    } else {\n+        referencedType \u003d registry.getNativeObjectType(JSTypeNative.CHECKED_UNKNOWN_TYPE);\n+    }\n+    isResolved \u003d true;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void handleUnresolvedType(ErrorReporter t) {\n    if (!registry.isForwardDeclaredType(reference) \u0026\u0026 !forgiving \u0026\u0026 registry.isLastGeneration()) {\n        t.warning(\"Unknown type \" + reference, sourceName, lineno, null, charno);\n    } else {\n        referencedType \u003d registry.getNativeObjectType(JSTypeNative.CHECKED_UNKNOWN_TYPE);\n    }\n    isResolved \u003d true;\n}",
      "path": "src/com/google/javascript/rhino/jstype/NamedType.java",
      "functionStartLine": 302,
      "functionName": "handleUnresolvedType",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}