{
  "origin": "codeshovel",
  "repositoryName": "Closure-2b",
  "repositoryPath": "/tmp/Closure-2b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JSTypeRegistry.java",
  "functionName": "registerPropertyOnType",
  "functionId": "registerPropertyOnType___propertyName-String__type-JSType",
  "sourceFilePath": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
  "functionAnnotation": "",
  "functionDoc": "Tells the type system that {@code owner} may have a property named\n{@code propertyName}. This allows the registry to keep track of what\ntypes a property is defined upon.\n\nThis is NOT the same as saying that {@code owner} must have a property\nnamed type. ObjectType#hasProperty attempts to minimize false positives\n(\"if we\u0027re not sure, then don\u0027t type check this property\"). The type\nregistry, on the other hand, should attempt to minimize false negatives\n(\"if this property is assigned anywhere in the program, it must\nshow up in the type registry\").\n",
  "functionStartLine": 624,
  "functionEndLine": 636,
  "numCommitsSeen": 84,
  "timeTaken": 4852,
  "changeHistory": [
    "79c373c265c0444e0e1edb014ec4e763689879dc",
    "1c75a5484b515bd593295fbf0c8491e2dd1f1c45",
    "e152ec001d2c6a9bbd6e0d9443552371d11e461f",
    "831de24c490d14ef7dc99148cf2be39f6c67df92",
    "6bf3a6410d71c3da0ea29c8ca425962d284f361c",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "79c373c265c0444e0e1edb014ec4e763689879dc": "Ybodychange",
    "1c75a5484b515bd593295fbf0c8491e2dd1f1c45": "Ybodychange",
    "e152ec001d2c6a9bbd6e0d9443552371d11e461f": "Ybodychange",
    "831de24c490d14ef7dc99148cf2be39f6c67df92": "Ybodychange",
    "6bf3a6410d71c3da0ea29c8ca425962d284f361c": "Ymultichange(Yparameterchange,Ybodychange)",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "79c373c265c0444e0e1edb014ec4e763689879dc": {
      "type": "Ybodychange",
      "commitMessage": "\nAs per email/IM conversations, this CL raises the maximum number of alternate types tracked by the UnionTypeBuilder during property checking. This prevents methods that appear on more than 20 types from always being reported as being a property of ?\n\nR\u003dmoedinger,nicksantos\nDELTA\u003d63  (58 added, 1 deleted, 4 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2760\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1293 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/27/11, 4:17 AM",
      "commitName": "79c373c265c0444e0e1edb014ec4e763689879dc",
      "commitAuthor": "henrywong@google.com",
      "commitDateOld": "7/1/11, 2:00 PM",
      "commitNameOld": "03ce555bcedcf98d99de1b4f8a6238ba75ee6850",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 25.59,
      "commitsBetweenForRepo": 47,
      "commitsBetweenForFile": 1,
      "actualSource": "public void registerPropertyOnType(String propertyName, JSType type) {\n    UnionTypeBuilder typeSet \u003d typesIndexedByProperty.get(propertyName);\n    if (typeSet \u003d\u003d null) {\n        typeSet \u003d new UnionTypeBuilder(this, PROPERTY_CHECKING_UNION_SIZE);\n        typesIndexedByProperty.put(propertyName, typeSet);\n    }\n    typeSet.addAlternate(type);\n    addReferenceTypeIndexedByProperty(propertyName, type);\n    greatestSubtypeByProperty.remove(propertyName);\n}",
      "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
      "functionStartLine": 616,
      "functionName": "registerPropertyOnType",
      "functionAnnotation": "",
      "functionDoc": "Tells the type system that {@code owner} may have a property named\n{@code propertyName}. This allows the registry to keep track of what\ntypes a property is defined upon.\n\nThis is NOT the same as saying that {@code owner} must have a property\nnamed type. ObjectType#hasProperty attempts to minimize false positives\n(\"if we\u0027re not sure, then don\u0027t type check this property\"). The type\nregistry, on the other hand, should attempt to minimize false negatives\n(\"if this property is assigned anywhere in the program, it must\nshow up in the type registry\").\n",
      "diff": "@@ -1,10 +1,10 @@\n public void registerPropertyOnType(String propertyName, JSType type) {\n     UnionTypeBuilder typeSet \u003d typesIndexedByProperty.get(propertyName);\n     if (typeSet \u003d\u003d null) {\n-        typeSet \u003d new UnionTypeBuilder(this);\n+        typeSet \u003d new UnionTypeBuilder(this, PROPERTY_CHECKING_UNION_SIZE);\n         typesIndexedByProperty.put(propertyName, typeSet);\n     }\n     typeSet.addAlternate(type);\n     addReferenceTypeIndexedByProperty(propertyName, type);\n     greatestSubtypeByProperty.remove(propertyName);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1c75a5484b515bd593295fbf0c8491e2dd1f1c45": {
      "type": "Ybodychange",
      "commitMessage": "\nremove all uses of Sets of types.\nequality can change over time, so this is not safe.\nThis means we need to be much more explicit in how\nwe collapse type duplicates in unions and in type tightening\n\nR\u003djohnlenz\nDELTA\u003d319  (210 added, 52 deleted, 57 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d121\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@623 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/13/10, 8:10 AM",
      "commitName": "1c75a5484b515bd593295fbf0c8491e2dd1f1c45",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "11/30/10, 10:47 AM",
      "commitNameOld": "78eb67212252fb94f85e77fba7bc69dd33b44d3c",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 12.89,
      "commitsBetweenForRepo": 45,
      "commitsBetweenForFile": 1,
      "actualSource": "public void registerPropertyOnType(String propertyName, JSType type) {\n    UnionTypeBuilder typeSet \u003d typesIndexedByProperty.get(propertyName);\n    if (typeSet \u003d\u003d null) {\n        typeSet \u003d new UnionTypeBuilder(this);\n        typesIndexedByProperty.put(propertyName, typeSet);\n    }\n    typeSet.addAlternate(type);\n    addReferenceTypeIndexedByProperty(propertyName, type);\n    greatestSubtypeByProperty.remove(propertyName);\n}",
      "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
      "functionStartLine": 598,
      "functionName": "registerPropertyOnType",
      "functionAnnotation": "",
      "functionDoc": "Tells the type system that {@code owner} may have a property named\n{@code propertyName}. This allows the registry to keep track of what\ntypes a property is defined upon.\n\nThis is NOT the same as saying that {@code owner} must have a property\nnamed type. ObjectType#hasProperty attempts to minimize false positives\n(\"if we\u0027re not sure, then don\u0027t type check this property\"). The type\nregistry, on the other hand, should attempt to minimize false negatives\n(\"if this property is assigned anywhere in the program, it must\nshow up in the type registry\").\n",
      "diff": "@@ -1,21 +1,10 @@\n public void registerPropertyOnType(String propertyName, JSType type) {\n-    ObjectType owner \u003d null;\n-    if (type instanceof ObjectType) {\n-        owner \u003d (ObjectType) type;\n-    } else if (getNativeType(ALL_TYPE).isSubtype(type)) {\n-        owner \u003d getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n-    } else if (type instanceof UnionType) {\n-        for (JSType alternate : ((UnionType) type).getAlternates()) {\n-            registerPropertyOnType(propertyName, alternate);\n-        }\n-    }\n-    if (owner \u003d\u003d null) {\n-        return;\n-    }\n-    Set\u003cObjectType\u003e typeSet \u003d typesIndexedByProperty.get(propertyName);\n+    UnionTypeBuilder typeSet \u003d typesIndexedByProperty.get(propertyName);\n     if (typeSet \u003d\u003d null) {\n-        typesIndexedByProperty.put(propertyName, typeSet \u003d new LinkedHashSet\u003cObjectType\u003e());\n+        typeSet \u003d new UnionTypeBuilder(this);\n+        typesIndexedByProperty.put(propertyName, typeSet);\n     }\n+    typeSet.addAlternate(type);\n+    addReferenceTypeIndexedByProperty(propertyName, type);\n     greatestSubtypeByProperty.remove(propertyName);\n-    typeSet.add(owner);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e152ec001d2c6a9bbd6e0d9443552371d11e461f": {
      "type": "Ybodychange",
      "commitMessage": "\nMake guava not google_common\n\nR\u003dacleung\nDELTA\u003d87  (34 added, 19 deleted, 34 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d196209\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@392 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/27/10, 3:52 PM",
      "commitName": "e152ec001d2c6a9bbd6e0d9443552371d11e461f",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "8/13/10, 1:00 PM",
      "commitNameOld": "831de24c490d14ef7dc99148cf2be39f6c67df92",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 14.12,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "actualSource": "public void registerPropertyOnType(String propertyName, JSType type) {\n    ObjectType owner \u003d null;\n    if (type instanceof ObjectType) {\n        owner \u003d (ObjectType) type;\n    } else if (getNativeType(ALL_TYPE).isSubtype(type)) {\n        owner \u003d getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n    } else if (type instanceof UnionType) {\n        for (JSType alternate : ((UnionType) type).getAlternates()) {\n            registerPropertyOnType(propertyName, alternate);\n        }\n    }\n    if (owner \u003d\u003d null) {\n        return;\n    }\n    Set\u003cObjectType\u003e typeSet \u003d typesIndexedByProperty.get(propertyName);\n    if (typeSet \u003d\u003d null) {\n        typesIndexedByProperty.put(propertyName, typeSet \u003d new LinkedHashSet\u003cObjectType\u003e());\n    }\n    greatestSubtypeByProperty.remove(propertyName);\n    typeSet.add(owner);\n}",
      "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
      "functionStartLine": 588,
      "functionName": "registerPropertyOnType",
      "functionAnnotation": "",
      "functionDoc": "Tells the type system that {@code owner} may have a property named\n{@code propertyName}. This allows the registry to keep track of what\ntypes a property is defined upon.\n\nThis is NOT the same as saying that {@code owner} must have a property\nnamed type. ObjectType#hasProperty attempts to minimize false positives\n(\"if we\u0027re not sure, then don\u0027t type check this property\"). The type\nregistry, on the other hand, should attempt to minimize false negatives\n(\"if this property is assigned anywhere in the program, it must\nshow up in the type registry\").\n",
      "diff": "@@ -1,21 +1,21 @@\n public void registerPropertyOnType(String propertyName, JSType type) {\n     ObjectType owner \u003d null;\n     if (type instanceof ObjectType) {\n         owner \u003d (ObjectType) type;\n     } else if (getNativeType(ALL_TYPE).isSubtype(type)) {\n         owner \u003d getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     } else if (type instanceof UnionType) {\n         for (JSType alternate : ((UnionType) type).getAlternates()) {\n             registerPropertyOnType(propertyName, alternate);\n         }\n     }\n     if (owner \u003d\u003d null) {\n         return;\n     }\n     Set\u003cObjectType\u003e typeSet \u003d typesIndexedByProperty.get(propertyName);\n     if (typeSet \u003d\u003d null) {\n-        typesIndexedByProperty.put(propertyName, typeSet \u003d Sets.newLinkedHashSet());\n+        typesIndexedByProperty.put(propertyName, typeSet \u003d new LinkedHashSet\u003cObjectType\u003e());\n     }\n     greatestSubtypeByProperty.remove(propertyName);\n     typeSet.add(owner);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "831de24c490d14ef7dc99148cf2be39f6c67df92": {
      "type": "Ybodychange",
      "commitMessage": "\nUse more deterministic data structures in the type system.\nNot all of these are strictly necessary right now, but they\nwill help prevent non-determinism in the future.\n\nR\u003dacleung\nDELTA\u003d16  (5 added, 2 deleted, 9 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d110008\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@361 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/13/10, 1:00 PM",
      "commitName": "831de24c490d14ef7dc99148cf2be39f6c67df92",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "8/12/10, 6:02 PM",
      "commitNameOld": "15acafb00636f99295b394145b9b60a5e624ddfa",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 0.79,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "public void registerPropertyOnType(String propertyName, JSType type) {\n    ObjectType owner \u003d null;\n    if (type instanceof ObjectType) {\n        owner \u003d (ObjectType) type;\n    } else if (getNativeType(ALL_TYPE).isSubtype(type)) {\n        owner \u003d getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n    } else if (type instanceof UnionType) {\n        for (JSType alternate : ((UnionType) type).getAlternates()) {\n            registerPropertyOnType(propertyName, alternate);\n        }\n    }\n    if (owner \u003d\u003d null) {\n        return;\n    }\n    Set\u003cObjectType\u003e typeSet \u003d typesIndexedByProperty.get(propertyName);\n    if (typeSet \u003d\u003d null) {\n        typesIndexedByProperty.put(propertyName, typeSet \u003d Sets.newLinkedHashSet());\n    }\n    greatestSubtypeByProperty.remove(propertyName);\n    typeSet.add(owner);\n}",
      "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
      "functionStartLine": 587,
      "functionName": "registerPropertyOnType",
      "functionAnnotation": "",
      "functionDoc": "Tells the type system that {@code owner} may have a property named\n{@code propertyName}. This allows the registry to keep track of what\ntypes a property is defined upon.\n\nThis is NOT the same as saying that {@code owner} must have a property\nnamed type. ObjectType#hasProperty attempts to minimize false positives\n(\"if we\u0027re not sure, then don\u0027t type check this property\"). The type\nregistry, on the other hand, should attempt to minimize false negatives\n(\"if this property is assigned anywhere in the program, it must\nshow up in the type registry\").\n",
      "diff": "@@ -1,21 +1,21 @@\n public void registerPropertyOnType(String propertyName, JSType type) {\n     ObjectType owner \u003d null;\n     if (type instanceof ObjectType) {\n         owner \u003d (ObjectType) type;\n     } else if (getNativeType(ALL_TYPE).isSubtype(type)) {\n         owner \u003d getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n     } else if (type instanceof UnionType) {\n         for (JSType alternate : ((UnionType) type).getAlternates()) {\n             registerPropertyOnType(propertyName, alternate);\n         }\n     }\n     if (owner \u003d\u003d null) {\n         return;\n     }\n     Set\u003cObjectType\u003e typeSet \u003d typesIndexedByProperty.get(propertyName);\n     if (typeSet \u003d\u003d null) {\n-        typesIndexedByProperty.put(propertyName, typeSet \u003d Sets.newHashSet());\n+        typesIndexedByProperty.put(propertyName, typeSet \u003d Sets.newLinkedHashSet());\n     }\n     greatestSubtypeByProperty.remove(propertyName);\n     typeSet.add(owner);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6bf3a6410d71c3da0ea29c8ca425962d284f361c": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "\nChange on 2010/07/14 09:56:57 by nicksantos\n\n\twhen looking for missing properties, make sure we track properties\n\tassigned to ALL types and partial-object UNION types.\n\n\tR\u003dmoedinger\n\tDELTA\u003d57  (53 added, 1 deleted, 3 changed)\n\nChange on 2010/07/14 12:34:22 by acleung\n\n\tPrevent future JDK change onCollections.sort that would breaks GraphColoringTest.\n\n\tR\u003dnicksantos\n\tDELTA\u003d2  (2 added, 0 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d51006\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@277 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/14/10, 3:50 PM",
      "commitName": "6bf3a6410d71c3da0ea29c8ca425962d284f361c",
      "commitAuthor": "Nicholas.J.Santos",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "\nChange on 2010/07/14 09:56:57 by nicksantos\n\n\twhen looking for missing properties, make sure we track properties\n\tassigned to ALL types and partial-object UNION types.\n\n\tR\u003dmoedinger\n\tDELTA\u003d57  (53 added, 1 deleted, 3 changed)\n\nChange on 2010/07/14 12:34:22 by acleung\n\n\tPrevent future JDK change onCollections.sort that would breaks GraphColoringTest.\n\n\tR\u003dnicksantos\n\tDELTA\u003d2  (2 added, 0 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d51006\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@277 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "7/14/10, 3:50 PM",
          "commitName": "6bf3a6410d71c3da0ea29c8ca425962d284f361c",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "5/27/10, 10:18 PM",
          "commitNameOld": "6d00ac1a68612aade8a19d7ecc9b180f00ae5234",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 47.73,
          "commitsBetweenForRepo": 42,
          "commitsBetweenForFile": 1,
          "actualSource": "public void registerPropertyOnType(String propertyName, JSType type) {\n    ObjectType owner \u003d null;\n    if (type instanceof ObjectType) {\n        owner \u003d (ObjectType) type;\n    } else if (getNativeType(ALL_TYPE).isSubtype(type)) {\n        owner \u003d getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n    } else if (type instanceof UnionType) {\n        for (JSType alternate : ((UnionType) type).getAlternates()) {\n            registerPropertyOnType(propertyName, alternate);\n        }\n    }\n    if (owner \u003d\u003d null) {\n        return;\n    }\n    Set\u003cObjectType\u003e typeSet \u003d typesIndexedByProperty.get(propertyName);\n    if (typeSet \u003d\u003d null) {\n        typesIndexedByProperty.put(propertyName, typeSet \u003d Sets.newHashSet());\n    }\n    greatestSubtypeByProperty.remove(propertyName);\n    typeSet.add(owner);\n}",
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
          "functionStartLine": 587,
          "functionName": "registerPropertyOnType",
          "functionAnnotation": "",
          "functionDoc": "Tells the type system that {@code owner} may have a property named\n{@code propertyName}. This allows the registry to keep track of what\ntypes a property is defined upon.\n\nThis is NOT the same as saying that {@code owner} must have a property\nnamed type. ObjectType#hasProperty attempts to minimize false positives\n(\"if we\u0027re not sure, then don\u0027t type check this property\"). The type\nregistry, on the other hand, should attempt to minimize false negatives\n(\"if this property is assigned anywhere in the program, it must\nshow up in the type registry\").\n",
          "diff": "@@ -1,8 +1,21 @@\n-public void registerPropertyOnType(String propertyName, ObjectType owner) {\n+public void registerPropertyOnType(String propertyName, JSType type) {\n+    ObjectType owner \u003d null;\n+    if (type instanceof ObjectType) {\n+        owner \u003d (ObjectType) type;\n+    } else if (getNativeType(ALL_TYPE).isSubtype(type)) {\n+        owner \u003d getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n+    } else if (type instanceof UnionType) {\n+        for (JSType alternate : ((UnionType) type).getAlternates()) {\n+            registerPropertyOnType(propertyName, alternate);\n+        }\n+    }\n+    if (owner \u003d\u003d null) {\n+        return;\n+    }\n     Set\u003cObjectType\u003e typeSet \u003d typesIndexedByProperty.get(propertyName);\n     if (typeSet \u003d\u003d null) {\n         typesIndexedByProperty.put(propertyName, typeSet \u003d Sets.newHashSet());\n     }\n     greatestSubtypeByProperty.remove(propertyName);\n     typeSet.add(owner);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[propertyName-String, owner-ObjectType]",
            "newValue": "[propertyName-String, type-JSType]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nChange on 2010/07/14 09:56:57 by nicksantos\n\n\twhen looking for missing properties, make sure we track properties\n\tassigned to ALL types and partial-object UNION types.\n\n\tR\u003dmoedinger\n\tDELTA\u003d57  (53 added, 1 deleted, 3 changed)\n\nChange on 2010/07/14 12:34:22 by acleung\n\n\tPrevent future JDK change onCollections.sort that would breaks GraphColoringTest.\n\n\tR\u003dnicksantos\n\tDELTA\u003d2  (2 added, 0 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d51006\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@277 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "7/14/10, 3:50 PM",
          "commitName": "6bf3a6410d71c3da0ea29c8ca425962d284f361c",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "5/27/10, 10:18 PM",
          "commitNameOld": "6d00ac1a68612aade8a19d7ecc9b180f00ae5234",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 47.73,
          "commitsBetweenForRepo": 42,
          "commitsBetweenForFile": 1,
          "actualSource": "public void registerPropertyOnType(String propertyName, JSType type) {\n    ObjectType owner \u003d null;\n    if (type instanceof ObjectType) {\n        owner \u003d (ObjectType) type;\n    } else if (getNativeType(ALL_TYPE).isSubtype(type)) {\n        owner \u003d getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n    } else if (type instanceof UnionType) {\n        for (JSType alternate : ((UnionType) type).getAlternates()) {\n            registerPropertyOnType(propertyName, alternate);\n        }\n    }\n    if (owner \u003d\u003d null) {\n        return;\n    }\n    Set\u003cObjectType\u003e typeSet \u003d typesIndexedByProperty.get(propertyName);\n    if (typeSet \u003d\u003d null) {\n        typesIndexedByProperty.put(propertyName, typeSet \u003d Sets.newHashSet());\n    }\n    greatestSubtypeByProperty.remove(propertyName);\n    typeSet.add(owner);\n}",
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
          "functionStartLine": 587,
          "functionName": "registerPropertyOnType",
          "functionAnnotation": "",
          "functionDoc": "Tells the type system that {@code owner} may have a property named\n{@code propertyName}. This allows the registry to keep track of what\ntypes a property is defined upon.\n\nThis is NOT the same as saying that {@code owner} must have a property\nnamed type. ObjectType#hasProperty attempts to minimize false positives\n(\"if we\u0027re not sure, then don\u0027t type check this property\"). The type\nregistry, on the other hand, should attempt to minimize false negatives\n(\"if this property is assigned anywhere in the program, it must\nshow up in the type registry\").\n",
          "diff": "@@ -1,8 +1,21 @@\n-public void registerPropertyOnType(String propertyName, ObjectType owner) {\n+public void registerPropertyOnType(String propertyName, JSType type) {\n+    ObjectType owner \u003d null;\n+    if (type instanceof ObjectType) {\n+        owner \u003d (ObjectType) type;\n+    } else if (getNativeType(ALL_TYPE).isSubtype(type)) {\n+        owner \u003d getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n+    } else if (type instanceof UnionType) {\n+        for (JSType alternate : ((UnionType) type).getAlternates()) {\n+            registerPropertyOnType(propertyName, alternate);\n+        }\n+    }\n+    if (owner \u003d\u003d null) {\n+        return;\n+    }\n     Set\u003cObjectType\u003e typeSet \u003d typesIndexedByProperty.get(propertyName);\n     if (typeSet \u003d\u003d null) {\n         typesIndexedByProperty.put(propertyName, typeSet \u003d Sets.newHashSet());\n     }\n     greatestSubtypeByProperty.remove(propertyName);\n     typeSet.add(owner);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,8 @@\n+public void registerPropertyOnType(String propertyName, ObjectType owner) {\n+    Set\u003cObjectType\u003e typeSet \u003d typesIndexedByProperty.get(propertyName);\n+    if (typeSet \u003d\u003d null) {\n+        typesIndexedByProperty.put(propertyName, typeSet \u003d Sets.newHashSet());\n+    }\n+    greatestSubtypeByProperty.remove(propertyName);\n+    typeSet.add(owner);\n+}\n\\ No newline at end of file\n",
      "actualSource": "public void registerPropertyOnType(String propertyName, ObjectType owner) {\n    Set\u003cObjectType\u003e typeSet \u003d typesIndexedByProperty.get(propertyName);\n    if (typeSet \u003d\u003d null) {\n        typesIndexedByProperty.put(propertyName, typeSet \u003d Sets.newHashSet());\n    }\n    greatestSubtypeByProperty.remove(propertyName);\n    typeSet.add(owner);\n}",
      "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
      "functionStartLine": 525,
      "functionName": "registerPropertyOnType",
      "functionAnnotation": "",
      "functionDoc": "Tells the type system that {@code owner} may have a property named\n{@code propertyName}. This allows the registry to keep track of what\ntypes a property is defined upon.\n\nThis is NOT the same as saying that {@code owner} must have a property\nnamed type. ObjectType#hasProperty attempts to minimize false positives\n(\"if we\u0027re not sure, then don\u0027t type check this property\"). The type\nregistry, on the other hand, should attempt to minimize false negatives\n(\"if this property is assigned anywhere in the program, it must\nshow up in the type registry\").\n"
    }
  }
}