{
  "origin": "codeshovel",
  "repositoryName": "Closure-2b",
  "repositoryPath": "/tmp/Closure-2b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TypedScopeCreator.java",
  "functionName": "finishConstructorDefinition",
  "functionId": "$finishConstructorDefinition___n-Node__variableName-String__fnType-FunctionType__scopeToDeclareIn-Scope__input-CompilerInput__newVar-Var",
  "sourceFilePath": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 1206,
  "functionEndLine": 1250,
  "numCommitsSeen": 117,
  "timeTaken": 1908,
  "changeHistory": [
    "b2430d29987b54e977a5e5e8db9242f4486c750b",
    "10c0c9ff36fb717223facd60efec8cf4ad97824f"
  ],
  "changeHistoryShort": {
    "b2430d29987b54e977a5e5e8db9242f4486c750b": "Ybodychange",
    "10c0c9ff36fb717223facd60efec8cf4ad97824f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b2430d29987b54e977a5e5e8db9242f4486c750b": {
      "type": "Ybodychange",
      "commitMessage": "\nProposal: change how we represent property sets on objects.\nI went down this rabbit-hole to experiment with a few different things:\n- Separating property bookkeeping from type relation bookkeeping.\n- Use the same property-store for \"new Foo()\" and \"Foo.prototype\".\nI don\u0027t think that maintaining separate property maps for these two\ntypes actually buys us anything, and it\u0027s inconsistent with how they\u0027re\nused in practice.\n- Use the same property-store for \"Foo.\u003cBar\u003e\" and \"Foo.\u003cBaz\u003e\"\nI actually like how this ended up--it\u0027s a lot easier to see how properties\nare inherited. But I\u0027m curious what others think.\n\nR\u003djohnlenz,dimvar\nDELTA\u003d507  (347 added, 143 deleted, 17 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5910\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2361 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/3/12, 9:30 AM",
      "commitName": "b2430d29987b54e977a5e5e8db9242f4486c750b",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "11/13/12, 5:24 PM",
      "commitNameOld": "27fb062582e27295e55c53eb6d93a9f5068dc216",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 19.67,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "actualSource": "private void finishConstructorDefinition(Node n, String variableName, FunctionType fnType, Scope scopeToDeclareIn, CompilerInput input, Var newVar) {\n    FunctionType superClassCtor \u003d fnType.getSuperClassConstructor();\n    Property prototypeSlot \u003d fnType.getSlot(\"prototype\");\n    prototypeSlot.setNode(n);\n    String prototypeName \u003d variableName + \".prototype\";\n    Var prototypeVar \u003d scopeToDeclareIn.getVar(prototypeName);\n    if (prototypeVar !\u003d null \u0026\u0026 prototypeVar.scope \u003d\u003d scopeToDeclareIn) {\n        scopeToDeclareIn.undeclare(prototypeVar);\n    }\n    scopeToDeclareIn.declare(prototypeName, n, prototypeSlot.getType(), input, superClassCtor \u003d\u003d null || superClassCtor.getInstanceType().isEquivalentTo(getNativeType(OBJECT_TYPE)));\n    if (newVar.getInitialValue() \u003d\u003d null \u0026\u0026 !n.isFromExterns()) {\n        compiler.report(JSError.make(sourceName, n, fnType.isConstructor() ? CTOR_INITIALIZER : IFACE_INITIALIZER, variableName));\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 1206,
      "functionName": "finishConstructorDefinition",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,14 +1,14 @@\n private void finishConstructorDefinition(Node n, String variableName, FunctionType fnType, Scope scopeToDeclareIn, CompilerInput input, Var newVar) {\n     FunctionType superClassCtor \u003d fnType.getSuperClassConstructor();\n-    ObjectType.Property prototypeSlot \u003d fnType.getSlot(\"prototype\");\n+    Property prototypeSlot \u003d fnType.getSlot(\"prototype\");\n     prototypeSlot.setNode(n);\n     String prototypeName \u003d variableName + \".prototype\";\n     Var prototypeVar \u003d scopeToDeclareIn.getVar(prototypeName);\n     if (prototypeVar !\u003d null \u0026\u0026 prototypeVar.scope \u003d\u003d scopeToDeclareIn) {\n         scopeToDeclareIn.undeclare(prototypeVar);\n     }\n     scopeToDeclareIn.declare(prototypeName, n, prototypeSlot.getType(), input, superClassCtor \u003d\u003d null || superClassCtor.getInstanceType().isEquivalentTo(getNativeType(OBJECT_TYPE)));\n     if (newVar.getInitialValue() \u003d\u003d null \u0026\u0026 !n.isFromExterns()) {\n         compiler.report(JSError.make(sourceName, n, fnType.isConstructor() ? CTOR_INITIALIZER : IFACE_INITIALIZER, variableName));\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "10c0c9ff36fb717223facd60efec8cf4ad97824f": {
      "type": "Yintroduced",
      "commitMessage": "\nHandle constructor aliases in the indexer.\n\nR\u003djohnlenz\nDELTA\u003d150  (97 added, 47 deleted, 6 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5539\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2212 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/24/12, 11:13 AM",
      "commitName": "10c0c9ff36fb717223facd60efec8cf4ad97824f",
      "commitAuthor": "nicksantos@google.com",
      "diff": "@@ -0,0 +1,14 @@\n+private void finishConstructorDefinition(Node n, String variableName, FunctionType fnType, Scope scopeToDeclareIn, CompilerInput input, Var newVar) {\n+    FunctionType superClassCtor \u003d fnType.getSuperClassConstructor();\n+    ObjectType.Property prototypeSlot \u003d fnType.getSlot(\"prototype\");\n+    prototypeSlot.setNode(n);\n+    String prototypeName \u003d variableName + \".prototype\";\n+    Var prototypeVar \u003d scopeToDeclareIn.getVar(prototypeName);\n+    if (prototypeVar !\u003d null \u0026\u0026 prototypeVar.scope \u003d\u003d scopeToDeclareIn) {\n+        scopeToDeclareIn.undeclare(prototypeVar);\n+    }\n+    scopeToDeclareIn.declare(prototypeName, n, prototypeSlot.getType(), input, superClassCtor \u003d\u003d null || superClassCtor.getInstanceType().isEquivalentTo(getNativeType(OBJECT_TYPE)));\n+    if (newVar.getInitialValue() \u003d\u003d null \u0026\u0026 !n.isFromExterns()) {\n+        compiler.report(JSError.make(sourceName, n, fnType.isConstructor() ? CTOR_INITIALIZER : IFACE_INITIALIZER, variableName));\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void finishConstructorDefinition(Node n, String variableName, FunctionType fnType, Scope scopeToDeclareIn, CompilerInput input, Var newVar) {\n    FunctionType superClassCtor \u003d fnType.getSuperClassConstructor();\n    ObjectType.Property prototypeSlot \u003d fnType.getSlot(\"prototype\");\n    prototypeSlot.setNode(n);\n    String prototypeName \u003d variableName + \".prototype\";\n    Var prototypeVar \u003d scopeToDeclareIn.getVar(prototypeName);\n    if (prototypeVar !\u003d null \u0026\u0026 prototypeVar.scope \u003d\u003d scopeToDeclareIn) {\n        scopeToDeclareIn.undeclare(prototypeVar);\n    }\n    scopeToDeclareIn.declare(prototypeName, n, prototypeSlot.getType(), input, superClassCtor \u003d\u003d null || superClassCtor.getInstanceType().isEquivalentTo(getNativeType(OBJECT_TYPE)));\n    if (newVar.getInitialValue() \u003d\u003d null \u0026\u0026 !n.isFromExterns()) {\n        compiler.report(JSError.make(sourceName, n, fnType.isConstructor() ? CTOR_INITIALIZER : IFACE_INITIALIZER, variableName));\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 1195,
      "functionName": "finishConstructorDefinition",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}