{
  "origin": "codeshovel",
  "repositoryName": "Closure-2b",
  "repositoryPath": "/tmp/Closure-2b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TypeCheck.java",
  "functionName": "visitFunction",
  "functionId": "visitFunction___t-NodeTraversal__n-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/TypeCheck.java",
  "functionAnnotation": "",
  "functionDoc": "Visits a {@link Token#FUNCTION} node.\n\n@param t The node traversal object that supplies context, such as the\nscope chain to use in name lookups as well as error reporting.\n@param n The node being visited.\n",
  "functionStartLine": 1597,
  "functionEndLine": 1666,
  "numCommitsSeen": 101,
  "timeTaken": 8937,
  "changeHistory": [
    "d71162d4337d5d12efe41d2debf7e565c2e8b871",
    "d93f2d5aaf346749eaa6ae1641a171aeb177de5d",
    "5222108be8ce0536b4f95d1743be406110afcb4b",
    "bbf1b138e20a36ca79b2a012ae145c943929a6dd",
    "00241aa722c2245784e63dba9d444fce88134aed",
    "63e875373844bdb6cedc7be3f537baa32cbd2ec0",
    "5fa514bee8f76534232e4653eaf16cd416e08012",
    "bd9c7b620384fe5a98772729001ed56304459bc6",
    "01d1238a2a577d8988a72c29304a3283ca05a29a",
    "fc0798047ad3aac58a54ea65f9f1c8857745419f",
    "aa7c8f99aa0cf5b8016e139b383aa0dd13f68051",
    "c438dfd06013f82daa648d23b864842ff1881695",
    "2851a41947bed8b8e100c7dac7d1edbc1c909d24",
    "a36a61a9027c5bca5752b0ecca7c609c07e568bb",
    "e82290302eaf2757281651588ee43441ed6d57d6",
    "09ed556367fbe81b3003881dfacad643939664c0",
    "0895c28861ee4a1969acc858f1a703ab11ddc64c",
    "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4",
    "a2d8936fae3eb0e3873c7f7c0233344c81436404",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "d71162d4337d5d12efe41d2debf7e565c2e8b871": "Ybodychange",
    "d93f2d5aaf346749eaa6ae1641a171aeb177de5d": "Ybodychange",
    "5222108be8ce0536b4f95d1743be406110afcb4b": "Ybodychange",
    "bbf1b138e20a36ca79b2a012ae145c943929a6dd": "Ybodychange",
    "00241aa722c2245784e63dba9d444fce88134aed": "Ybodychange",
    "63e875373844bdb6cedc7be3f537baa32cbd2ec0": "Ybodychange",
    "5fa514bee8f76534232e4653eaf16cd416e08012": "Ybodychange",
    "bd9c7b620384fe5a98772729001ed56304459bc6": "Ybodychange",
    "01d1238a2a577d8988a72c29304a3283ca05a29a": "Ybodychange",
    "fc0798047ad3aac58a54ea65f9f1c8857745419f": "Ybodychange",
    "aa7c8f99aa0cf5b8016e139b383aa0dd13f68051": "Ybodychange",
    "c438dfd06013f82daa648d23b864842ff1881695": "Ybodychange",
    "2851a41947bed8b8e100c7dac7d1edbc1c909d24": "Ybodychange",
    "a36a61a9027c5bca5752b0ecca7c609c07e568bb": "Ybodychange",
    "e82290302eaf2757281651588ee43441ed6d57d6": "Ybodychange",
    "09ed556367fbe81b3003881dfacad643939664c0": "Ybodychange",
    "0895c28861ee4a1969acc858f1a703ab11ddc64c": "Ybodychange",
    "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4": "Ybodychange",
    "a2d8936fae3eb0e3873c7f7c0233344c81436404": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d71162d4337d5d12efe41d2debf7e565c2e8b871": {
      "type": "Ybodychange",
      "commitMessage": "\nDetect when the prototype property of a @struct constructor is assigned to an unannotated object literal.\n\nR\u003dnicksantos\nDELTA\u003d30  (17 added, 2 deleted, 11 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5718\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2282 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/26/12, 10:29 AM",
      "commitName": "d71162d4337d5d12efe41d2debf7e565c2e8b871",
      "commitAuthor": "dimvar@google.com",
      "commitDateOld": "10/22/12, 3:27 PM",
      "commitNameOld": "d2de4be06b3b0e73df3d957e170a1a90b923a416",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 3.79,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "private void visitFunction(NodeTraversal t, Node n) {\n    FunctionType functionType \u003d JSType.toMaybeFunctionType(n.getJSType());\n    String functionPrivateName \u003d n.getFirstChild().getString();\n    if (functionType.isConstructor()) {\n        FunctionType baseConstructor \u003d functionType.getSuperClassConstructor();\n        if (baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 baseConstructor !\u003d null \u0026\u0026 baseConstructor.isInterface()) {\n            compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, \"constructor\", functionPrivateName));\n        } else {\n            if (baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE)) {\n                ObjectType proto \u003d functionType.getPrototype();\n                if (functionType.makesStructs() \u0026\u0026 !proto.isStruct()) {\n                    compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, \"struct\", functionPrivateName));\n                } else if (functionType.makesDicts() \u0026\u0026 !proto.isDict()) {\n                    compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, \"dict\", functionPrivateName));\n                }\n            }\n            for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n                boolean badImplementedType \u003d false;\n                ObjectType baseInterfaceObj \u003d ObjectType.cast(baseInterface);\n                if (baseInterfaceObj !\u003d null) {\n                    FunctionType interfaceConstructor \u003d baseInterfaceObj.getConstructor();\n                    if (interfaceConstructor !\u003d null \u0026\u0026 !interfaceConstructor.isInterface()) {\n                        badImplementedType \u003d true;\n                    }\n                } else {\n                    badImplementedType \u003d true;\n                }\n                if (badImplementedType) {\n                    report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n                }\n            }\n            validator.expectAllInterfaceProperties(t, n, functionType);\n        }\n    } else if (functionType.isInterface()) {\n        for (ObjectType extInterface : functionType.getExtendedInterfaces()) {\n            if (extInterface.getConstructor() !\u003d null \u0026\u0026 !extInterface.getConstructor().isInterface()) {\n                compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, \"interface\", functionPrivateName));\n            }\n        }\n        if (functionType.getExtendedInterfacesCount() \u003e 1) {\n            HashMap\u003cString, ObjectType\u003e properties \u003d new HashMap\u003cString, ObjectType\u003e();\n            HashMap\u003cString, ObjectType\u003e currentProperties \u003d new HashMap\u003cString, ObjectType\u003e();\n            for (ObjectType interfaceType : functionType.getExtendedInterfaces()) {\n                currentProperties.clear();\n                checkInterfaceConflictProperties(t, n, functionPrivateName, properties, currentProperties, interfaceType);\n                properties.putAll(currentProperties);\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1568,
      "functionName": "visitFunction",
      "functionAnnotation": "",
      "functionDoc": "Visits a {@link Token#FUNCTION} node.\n\n@param t The node traversal object that supplies context, such as the\nscope chain to use in name lookups as well as error reporting.\n@param n The node being visited.\n",
      "diff": "@@ -1,49 +1,50 @@\n private void visitFunction(NodeTraversal t, Node n) {\n     FunctionType functionType \u003d JSType.toMaybeFunctionType(n.getJSType());\n     String functionPrivateName \u003d n.getFirstChild().getString();\n     if (functionType.isConstructor()) {\n         FunctionType baseConstructor \u003d functionType.getSuperClassConstructor();\n         if (baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 baseConstructor !\u003d null \u0026\u0026 baseConstructor.isInterface()) {\n             compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, \"constructor\", functionPrivateName));\n         } else {\n-            if (baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 baseConstructor !\u003d null) {\n-                if (functionType.makesStructs() \u0026\u0026 !baseConstructor.makesStructs()) {\n+            if (baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE)) {\n+                ObjectType proto \u003d functionType.getPrototype();\n+                if (functionType.makesStructs() \u0026\u0026 !proto.isStruct()) {\n                     compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, \"struct\", functionPrivateName));\n-                } else if (functionType.makesDicts() \u0026\u0026 !baseConstructor.makesDicts()) {\n+                } else if (functionType.makesDicts() \u0026\u0026 !proto.isDict()) {\n                     compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, \"dict\", functionPrivateName));\n                 }\n             }\n             for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n                 boolean badImplementedType \u003d false;\n                 ObjectType baseInterfaceObj \u003d ObjectType.cast(baseInterface);\n                 if (baseInterfaceObj !\u003d null) {\n                     FunctionType interfaceConstructor \u003d baseInterfaceObj.getConstructor();\n                     if (interfaceConstructor !\u003d null \u0026\u0026 !interfaceConstructor.isInterface()) {\n                         badImplementedType \u003d true;\n                     }\n                 } else {\n                     badImplementedType \u003d true;\n                 }\n                 if (badImplementedType) {\n                     report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n                 }\n             }\n             validator.expectAllInterfaceProperties(t, n, functionType);\n         }\n     } else if (functionType.isInterface()) {\n         for (ObjectType extInterface : functionType.getExtendedInterfaces()) {\n             if (extInterface.getConstructor() !\u003d null \u0026\u0026 !extInterface.getConstructor().isInterface()) {\n                 compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, \"interface\", functionPrivateName));\n             }\n         }\n         if (functionType.getExtendedInterfacesCount() \u003e 1) {\n             HashMap\u003cString, ObjectType\u003e properties \u003d new HashMap\u003cString, ObjectType\u003e();\n             HashMap\u003cString, ObjectType\u003e currentProperties \u003d new HashMap\u003cString, ObjectType\u003e();\n             for (ObjectType interfaceType : functionType.getExtendedInterfaces()) {\n                 currentProperties.clear();\n                 checkInterfaceConflictProperties(t, n, functionPrivateName, properties, currentProperties, interfaceType);\n                 properties.putAll(currentProperties);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d93f2d5aaf346749eaa6ae1641a171aeb177de5d": {
      "type": "Ybodychange",
      "commitMessage": "\nSeal struct instances.\n\nR\u003dnicksantos\nDELTA\u003d189  (157 added, 15 deleted, 17 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5655\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2261 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/16/12, 3:17 PM",
      "commitName": "d93f2d5aaf346749eaa6ae1641a171aeb177de5d",
      "commitAuthor": "dimvar@google.com",
      "commitDateOld": "10/4/12, 11:18 AM",
      "commitNameOld": "a7f99cbb3ba646de8e19f0248099dad9cf0432a6",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 12.17,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "actualSource": "private void visitFunction(NodeTraversal t, Node n) {\n    FunctionType functionType \u003d JSType.toMaybeFunctionType(n.getJSType());\n    String functionPrivateName \u003d n.getFirstChild().getString();\n    if (functionType.isConstructor()) {\n        FunctionType baseConstructor \u003d functionType.getSuperClassConstructor();\n        if (baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 baseConstructor !\u003d null \u0026\u0026 baseConstructor.isInterface()) {\n            compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, \"constructor\", functionPrivateName));\n        } else {\n            if (baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 baseConstructor !\u003d null) {\n                if (functionType.makesStructs() \u0026\u0026 !baseConstructor.makesStructs()) {\n                    compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, \"struct\", functionPrivateName));\n                } else if (functionType.makesDicts() \u0026\u0026 !baseConstructor.makesDicts()) {\n                    compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, \"dict\", functionPrivateName));\n                }\n            }\n            for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n                boolean badImplementedType \u003d false;\n                ObjectType baseInterfaceObj \u003d ObjectType.cast(baseInterface);\n                if (baseInterfaceObj !\u003d null) {\n                    FunctionType interfaceConstructor \u003d baseInterfaceObj.getConstructor();\n                    if (interfaceConstructor !\u003d null \u0026\u0026 !interfaceConstructor.isInterface()) {\n                        badImplementedType \u003d true;\n                    }\n                } else {\n                    badImplementedType \u003d true;\n                }\n                if (badImplementedType) {\n                    report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n                }\n            }\n            validator.expectAllInterfaceProperties(t, n, functionType);\n        }\n    } else if (functionType.isInterface()) {\n        for (ObjectType extInterface : functionType.getExtendedInterfaces()) {\n            if (extInterface.getConstructor() !\u003d null \u0026\u0026 !extInterface.getConstructor().isInterface()) {\n                compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, \"interface\", functionPrivateName));\n            }\n        }\n        if (functionType.getExtendedInterfacesCount() \u003e 1) {\n            HashMap\u003cString, ObjectType\u003e properties \u003d new HashMap\u003cString, ObjectType\u003e();\n            HashMap\u003cString, ObjectType\u003e currentProperties \u003d new HashMap\u003cString, ObjectType\u003e();\n            for (ObjectType interfaceType : functionType.getExtendedInterfaces()) {\n                currentProperties.clear();\n                checkInterfaceConflictProperties(t, n, functionPrivateName, properties, currentProperties, interfaceType);\n                properties.putAll(currentProperties);\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1562,
      "functionName": "visitFunction",
      "functionAnnotation": "",
      "functionDoc": "Visits a {@link Token#FUNCTION} node.\n\n@param t The node traversal object that supplies context, such as the\nscope chain to use in name lookups as well as error reporting.\n@param n The node being visited.\n",
      "diff": "@@ -1,49 +1,49 @@\n private void visitFunction(NodeTraversal t, Node n) {\n     FunctionType functionType \u003d JSType.toMaybeFunctionType(n.getJSType());\n     String functionPrivateName \u003d n.getFirstChild().getString();\n     if (functionType.isConstructor()) {\n         FunctionType baseConstructor \u003d functionType.getSuperClassConstructor();\n-        if (baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 baseConstructor !\u003d null \u0026\u0026 baseConstructor.isInterface() \u0026\u0026 functionType.isConstructor()) {\n+        if (baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 baseConstructor !\u003d null \u0026\u0026 baseConstructor.isInterface()) {\n             compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, \"constructor\", functionPrivateName));\n         } else {\n             if (baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 baseConstructor !\u003d null) {\n                 if (functionType.makesStructs() \u0026\u0026 !baseConstructor.makesStructs()) {\n                     compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, \"struct\", functionPrivateName));\n                 } else if (functionType.makesDicts() \u0026\u0026 !baseConstructor.makesDicts()) {\n                     compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, \"dict\", functionPrivateName));\n                 }\n             }\n             for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n                 boolean badImplementedType \u003d false;\n                 ObjectType baseInterfaceObj \u003d ObjectType.cast(baseInterface);\n                 if (baseInterfaceObj !\u003d null) {\n                     FunctionType interfaceConstructor \u003d baseInterfaceObj.getConstructor();\n                     if (interfaceConstructor !\u003d null \u0026\u0026 !interfaceConstructor.isInterface()) {\n                         badImplementedType \u003d true;\n                     }\n                 } else {\n                     badImplementedType \u003d true;\n                 }\n                 if (badImplementedType) {\n                     report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n                 }\n             }\n             validator.expectAllInterfaceProperties(t, n, functionType);\n         }\n     } else if (functionType.isInterface()) {\n         for (ObjectType extInterface : functionType.getExtendedInterfaces()) {\n             if (extInterface.getConstructor() !\u003d null \u0026\u0026 !extInterface.getConstructor().isInterface()) {\n                 compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, \"interface\", functionPrivateName));\n             }\n         }\n         if (functionType.getExtendedInterfacesCount() \u003e 1) {\n             HashMap\u003cString, ObjectType\u003e properties \u003d new HashMap\u003cString, ObjectType\u003e();\n             HashMap\u003cString, ObjectType\u003e currentProperties \u003d new HashMap\u003cString, ObjectType\u003e();\n             for (ObjectType interfaceType : functionType.getExtendedInterfaces()) {\n                 currentProperties.clear();\n                 checkInterfaceConflictProperties(t, n, functionPrivateName, properties, currentProperties, interfaceType);\n                 properties.putAll(currentProperties);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5222108be8ce0536b4f95d1743be406110afcb4b": {
      "type": "Ybodychange",
      "commitMessage": "\nFix a bug where we would warn you when an interface implemented\nanother interface, but wire it up anyway.\n\nR\u003ddimvar\nDELTA\u003d47  (24 added, 5 deleted, 18 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5585\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2234 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/2/12, 3:54 PM",
      "commitName": "5222108be8ce0536b4f95d1743be406110afcb4b",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "9/28/12, 10:31 AM",
      "commitNameOld": "e237d2643b102fbea616717806391f48e2ce506a",
      "commitAuthorOld": "dimvar@google.com",
      "daysBetweenCommits": 4.22,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "private void visitFunction(NodeTraversal t, Node n) {\n    FunctionType functionType \u003d JSType.toMaybeFunctionType(n.getJSType());\n    String functionPrivateName \u003d n.getFirstChild().getString();\n    if (functionType.isConstructor()) {\n        FunctionType baseConstructor \u003d functionType.getSuperClassConstructor();\n        if (baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 baseConstructor !\u003d null \u0026\u0026 baseConstructor.isInterface() \u0026\u0026 functionType.isConstructor()) {\n            compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, \"constructor\", functionPrivateName));\n        } else {\n            if (baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 baseConstructor !\u003d null) {\n                if (functionType.makesStructs() \u0026\u0026 !baseConstructor.makesStructs()) {\n                    compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, \"struct\", functionPrivateName));\n                } else if (functionType.makesDicts() \u0026\u0026 !baseConstructor.makesDicts()) {\n                    compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, \"dict\", functionPrivateName));\n                }\n            }\n            for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n                boolean badImplementedType \u003d false;\n                ObjectType baseInterfaceObj \u003d ObjectType.cast(baseInterface);\n                if (baseInterfaceObj !\u003d null) {\n                    FunctionType interfaceConstructor \u003d baseInterfaceObj.getConstructor();\n                    if (interfaceConstructor !\u003d null \u0026\u0026 !interfaceConstructor.isInterface()) {\n                        badImplementedType \u003d true;\n                    }\n                } else {\n                    badImplementedType \u003d true;\n                }\n                if (badImplementedType) {\n                    report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n                }\n            }\n            validator.expectAllInterfaceProperties(t, n, functionType);\n        }\n    } else if (functionType.isInterface()) {\n        for (ObjectType extInterface : functionType.getExtendedInterfaces()) {\n            if (extInterface.getConstructor() !\u003d null \u0026\u0026 !extInterface.getConstructor().isInterface()) {\n                compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, \"interface\", functionPrivateName));\n            }\n        }\n        if (functionType.getExtendedInterfacesCount() \u003e 1) {\n            HashMap\u003cString, ObjectType\u003e properties \u003d new HashMap\u003cString, ObjectType\u003e();\n            HashMap\u003cString, ObjectType\u003e currentProperties \u003d new HashMap\u003cString, ObjectType\u003e();\n            for (ObjectType interfaceType : functionType.getExtendedInterfaces()) {\n                currentProperties.clear();\n                checkInterfaceConflictProperties(t, n, functionPrivateName, properties, currentProperties, interfaceType);\n                properties.putAll(currentProperties);\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1535,
      "functionName": "visitFunction",
      "functionAnnotation": "",
      "functionDoc": "Visits a {@link Token#FUNCTION} node.\n\n@param t The node traversal object that supplies context, such as the\nscope chain to use in name lookups as well as error reporting.\n@param n The node being visited.\n",
      "diff": "@@ -1,52 +1,49 @@\n private void visitFunction(NodeTraversal t, Node n) {\n     FunctionType functionType \u003d JSType.toMaybeFunctionType(n.getJSType());\n     String functionPrivateName \u003d n.getFirstChild().getString();\n     if (functionType.isConstructor()) {\n         FunctionType baseConstructor \u003d functionType.getSuperClassConstructor();\n         if (baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 baseConstructor !\u003d null \u0026\u0026 baseConstructor.isInterface() \u0026\u0026 functionType.isConstructor()) {\n             compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, \"constructor\", functionPrivateName));\n         } else {\n             if (baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 baseConstructor !\u003d null) {\n                 if (functionType.makesStructs() \u0026\u0026 !baseConstructor.makesStructs()) {\n                     compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, \"struct\", functionPrivateName));\n                 } else if (functionType.makesDicts() \u0026\u0026 !baseConstructor.makesDicts()) {\n                     compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, \"dict\", functionPrivateName));\n                 }\n             }\n             for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n                 boolean badImplementedType \u003d false;\n                 ObjectType baseInterfaceObj \u003d ObjectType.cast(baseInterface);\n                 if (baseInterfaceObj !\u003d null) {\n                     FunctionType interfaceConstructor \u003d baseInterfaceObj.getConstructor();\n                     if (interfaceConstructor !\u003d null \u0026\u0026 !interfaceConstructor.isInterface()) {\n                         badImplementedType \u003d true;\n                     }\n                 } else {\n                     badImplementedType \u003d true;\n                 }\n                 if (badImplementedType) {\n                     report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n                 }\n             }\n             validator.expectAllInterfaceProperties(t, n, functionType);\n         }\n     } else if (functionType.isInterface()) {\n         for (ObjectType extInterface : functionType.getExtendedInterfaces()) {\n             if (extInterface.getConstructor() !\u003d null \u0026\u0026 !extInterface.getConstructor().isInterface()) {\n                 compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, \"interface\", functionPrivateName));\n             }\n         }\n-        if (functionType.hasImplementedInterfaces()) {\n-            compiler.report(t.makeError(n, CONFLICTING_IMPLEMENTED_TYPE, functionPrivateName));\n-        }\n         if (functionType.getExtendedInterfacesCount() \u003e 1) {\n             HashMap\u003cString, ObjectType\u003e properties \u003d new HashMap\u003cString, ObjectType\u003e();\n             HashMap\u003cString, ObjectType\u003e currentProperties \u003d new HashMap\u003cString, ObjectType\u003e();\n             for (ObjectType interfaceType : functionType.getExtendedInterfaces()) {\n                 currentProperties.clear();\n                 checkInterfaceConflictProperties(t, n, functionPrivateName, properties, currentProperties, interfaceType);\n                 properties.putAll(currentProperties);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bbf1b138e20a36ca79b2a012ae145c943929a6dd": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback\n\n*** Reason for rollback ***\n\nFailures don\u0027t seem related to jscompiler. Resubmitting for now.\n\n*** Original change description ***\n\nAutomated g4 rollback\n\n*** Reason for rollback ***\n\nChange caused tests to stop building.\n\n*** Original change description ***\n\nNew @struct and @dict annotations for constructors.\nWith these annotations, one can enforce only dot or only bracket access on object properties.\n\nR\u003dnicksantos\nDELTA\u003d476  (391 added, 34 deleted, 51 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5491\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2184 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/11/12, 4:17 PM",
      "commitName": "bbf1b138e20a36ca79b2a012ae145c943929a6dd",
      "commitAuthor": "dimvar@google.com",
      "commitDateOld": "9/11/12, 11:52 AM",
      "commitNameOld": "00241aa722c2245784e63dba9d444fce88134aed",
      "commitAuthorOld": "dimvar@google.com",
      "daysBetweenCommits": 0.18,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "private void visitFunction(NodeTraversal t, Node n) {\n    FunctionType functionType \u003d JSType.toMaybeFunctionType(n.getJSType());\n    String functionPrivateName \u003d n.getFirstChild().getString();\n    if (functionType.isConstructor()) {\n        FunctionType baseConstructor \u003d functionType.getSuperClassConstructor();\n        if (baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 baseConstructor !\u003d null \u0026\u0026 baseConstructor.isInterface() \u0026\u0026 functionType.isConstructor()) {\n            compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, \"constructor\", functionPrivateName));\n        } else {\n            if (baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 baseConstructor !\u003d null) {\n                if (functionType.makesStructs() \u0026\u0026 !baseConstructor.makesStructs()) {\n                    compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, \"struct\", functionPrivateName));\n                } else if (functionType.makesDicts() \u0026\u0026 !baseConstructor.makesDicts()) {\n                    compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, \"dict\", functionPrivateName));\n                }\n            }\n            for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n                boolean badImplementedType \u003d false;\n                ObjectType baseInterfaceObj \u003d ObjectType.cast(baseInterface);\n                if (baseInterfaceObj !\u003d null) {\n                    FunctionType interfaceConstructor \u003d baseInterfaceObj.getConstructor();\n                    if (interfaceConstructor !\u003d null \u0026\u0026 !interfaceConstructor.isInterface()) {\n                        badImplementedType \u003d true;\n                    }\n                } else {\n                    badImplementedType \u003d true;\n                }\n                if (badImplementedType) {\n                    report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n                }\n            }\n            validator.expectAllInterfaceProperties(t, n, functionType);\n        }\n    } else if (functionType.isInterface()) {\n        for (ObjectType extInterface : functionType.getExtendedInterfaces()) {\n            if (extInterface.getConstructor() !\u003d null \u0026\u0026 !extInterface.getConstructor().isInterface()) {\n                compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, \"interface\", functionPrivateName));\n            }\n        }\n        if (functionType.hasImplementedInterfaces()) {\n            compiler.report(t.makeError(n, CONFLICTING_IMPLEMENTED_TYPE, functionPrivateName));\n        }\n        if (functionType.getExtendedInterfacesCount() \u003e 1) {\n            HashMap\u003cString, ObjectType\u003e properties \u003d new HashMap\u003cString, ObjectType\u003e();\n            HashMap\u003cString, ObjectType\u003e currentProperties \u003d new HashMap\u003cString, ObjectType\u003e();\n            for (ObjectType interfaceType : functionType.getExtendedInterfaces()) {\n                currentProperties.clear();\n                checkInterfaceConflictProperties(t, n, functionPrivateName, properties, currentProperties, interfaceType);\n                properties.putAll(currentProperties);\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1523,
      "functionName": "visitFunction",
      "functionAnnotation": "",
      "functionDoc": "Visits a {@link Token#FUNCTION} node.\n\n@param t The node traversal object that supplies context, such as the\nscope chain to use in name lookups as well as error reporting.\n@param n The node being visited.\n",
      "diff": "@@ -1,45 +1,52 @@\n private void visitFunction(NodeTraversal t, Node n) {\n     FunctionType functionType \u003d JSType.toMaybeFunctionType(n.getJSType());\n     String functionPrivateName \u003d n.getFirstChild().getString();\n     if (functionType.isConstructor()) {\n         FunctionType baseConstructor \u003d functionType.getSuperClassConstructor();\n-        if (baseConstructor !\u003d null \u0026\u0026 baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 (baseConstructor.isInterface() \u0026\u0026 functionType.isConstructor())) {\n-            compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n+        if (baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 baseConstructor !\u003d null \u0026\u0026 baseConstructor.isInterface() \u0026\u0026 functionType.isConstructor()) {\n+            compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, \"constructor\", functionPrivateName));\n         } else {\n+            if (baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 baseConstructor !\u003d null) {\n+                if (functionType.makesStructs() \u0026\u0026 !baseConstructor.makesStructs()) {\n+                    compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, \"struct\", functionPrivateName));\n+                } else if (functionType.makesDicts() \u0026\u0026 !baseConstructor.makesDicts()) {\n+                    compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, \"dict\", functionPrivateName));\n+                }\n+            }\n             for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n                 boolean badImplementedType \u003d false;\n                 ObjectType baseInterfaceObj \u003d ObjectType.cast(baseInterface);\n                 if (baseInterfaceObj !\u003d null) {\n                     FunctionType interfaceConstructor \u003d baseInterfaceObj.getConstructor();\n                     if (interfaceConstructor !\u003d null \u0026\u0026 !interfaceConstructor.isInterface()) {\n                         badImplementedType \u003d true;\n                     }\n                 } else {\n                     badImplementedType \u003d true;\n                 }\n                 if (badImplementedType) {\n                     report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n                 }\n             }\n             validator.expectAllInterfaceProperties(t, n, functionType);\n         }\n     } else if (functionType.isInterface()) {\n         for (ObjectType extInterface : functionType.getExtendedInterfaces()) {\n             if (extInterface.getConstructor() !\u003d null \u0026\u0026 !extInterface.getConstructor().isInterface()) {\n-                compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n+                compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, \"interface\", functionPrivateName));\n             }\n         }\n         if (functionType.hasImplementedInterfaces()) {\n             compiler.report(t.makeError(n, CONFLICTING_IMPLEMENTED_TYPE, functionPrivateName));\n         }\n         if (functionType.getExtendedInterfacesCount() \u003e 1) {\n             HashMap\u003cString, ObjectType\u003e properties \u003d new HashMap\u003cString, ObjectType\u003e();\n             HashMap\u003cString, ObjectType\u003e currentProperties \u003d new HashMap\u003cString, ObjectType\u003e();\n             for (ObjectType interfaceType : functionType.getExtendedInterfaces()) {\n                 currentProperties.clear();\n                 checkInterfaceConflictProperties(t, n, functionPrivateName, properties, currentProperties, interfaceType);\n                 properties.putAll(currentProperties);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "00241aa722c2245784e63dba9d444fce88134aed": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback\n\n*** Reason for rollback ***\n\nChange caused tests to stop building.\n\n*** Original change description ***\n\nNew @struct and @dict annotations for constructors.\nWith these annotations, one can enforce only dot or only bracket access on object properties.\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5489\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2182 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/11/12, 11:52 AM",
      "commitName": "00241aa722c2245784e63dba9d444fce88134aed",
      "commitAuthor": "dimvar@google.com",
      "commitDateOld": "9/11/12, 11:10 AM",
      "commitNameOld": "63e875373844bdb6cedc7be3f537baa32cbd2ec0",
      "commitAuthorOld": "dimvar@google.com",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void visitFunction(NodeTraversal t, Node n) {\n    FunctionType functionType \u003d JSType.toMaybeFunctionType(n.getJSType());\n    String functionPrivateName \u003d n.getFirstChild().getString();\n    if (functionType.isConstructor()) {\n        FunctionType baseConstructor \u003d functionType.getSuperClassConstructor();\n        if (baseConstructor !\u003d null \u0026\u0026 baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 (baseConstructor.isInterface() \u0026\u0026 functionType.isConstructor())) {\n            compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n        } else {\n            for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n                boolean badImplementedType \u003d false;\n                ObjectType baseInterfaceObj \u003d ObjectType.cast(baseInterface);\n                if (baseInterfaceObj !\u003d null) {\n                    FunctionType interfaceConstructor \u003d baseInterfaceObj.getConstructor();\n                    if (interfaceConstructor !\u003d null \u0026\u0026 !interfaceConstructor.isInterface()) {\n                        badImplementedType \u003d true;\n                    }\n                } else {\n                    badImplementedType \u003d true;\n                }\n                if (badImplementedType) {\n                    report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n                }\n            }\n            validator.expectAllInterfaceProperties(t, n, functionType);\n        }\n    } else if (functionType.isInterface()) {\n        for (ObjectType extInterface : functionType.getExtendedInterfaces()) {\n            if (extInterface.getConstructor() !\u003d null \u0026\u0026 !extInterface.getConstructor().isInterface()) {\n                compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n            }\n        }\n        if (functionType.hasImplementedInterfaces()) {\n            compiler.report(t.makeError(n, CONFLICTING_IMPLEMENTED_TYPE, functionPrivateName));\n        }\n        if (functionType.getExtendedInterfacesCount() \u003e 1) {\n            HashMap\u003cString, ObjectType\u003e properties \u003d new HashMap\u003cString, ObjectType\u003e();\n            HashMap\u003cString, ObjectType\u003e currentProperties \u003d new HashMap\u003cString, ObjectType\u003e();\n            for (ObjectType interfaceType : functionType.getExtendedInterfaces()) {\n                currentProperties.clear();\n                checkInterfaceConflictProperties(t, n, functionPrivateName, properties, currentProperties, interfaceType);\n                properties.putAll(currentProperties);\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1534,
      "functionName": "visitFunction",
      "functionAnnotation": "",
      "functionDoc": "Visits a {@link Token#FUNCTION} node.\n\n@param t The node traversal object that supplies context, such as the\nscope chain to use in name lookups as well as error reporting.\n@param n The node being visited.\n",
      "diff": "@@ -1,52 +1,45 @@\n private void visitFunction(NodeTraversal t, Node n) {\n     FunctionType functionType \u003d JSType.toMaybeFunctionType(n.getJSType());\n     String functionPrivateName \u003d n.getFirstChild().getString();\n     if (functionType.isConstructor()) {\n         FunctionType baseConstructor \u003d functionType.getSuperClassConstructor();\n-        if (baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 baseConstructor !\u003d null \u0026\u0026 baseConstructor.isInterface() \u0026\u0026 functionType.isConstructor()) {\n-            compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, \"constructor\", functionPrivateName));\n+        if (baseConstructor !\u003d null \u0026\u0026 baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 (baseConstructor.isInterface() \u0026\u0026 functionType.isConstructor())) {\n+            compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n         } else {\n-            if (baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 baseConstructor !\u003d null) {\n-                if (functionType.makesStructs() \u0026\u0026 !baseConstructor.makesStructs()) {\n-                    compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, \"struct\", functionPrivateName));\n-                } else if (functionType.makesDicts() \u0026\u0026 !baseConstructor.makesDicts()) {\n-                    compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, \"dict\", functionPrivateName));\n-                }\n-            }\n             for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n                 boolean badImplementedType \u003d false;\n                 ObjectType baseInterfaceObj \u003d ObjectType.cast(baseInterface);\n                 if (baseInterfaceObj !\u003d null) {\n                     FunctionType interfaceConstructor \u003d baseInterfaceObj.getConstructor();\n                     if (interfaceConstructor !\u003d null \u0026\u0026 !interfaceConstructor.isInterface()) {\n                         badImplementedType \u003d true;\n                     }\n                 } else {\n                     badImplementedType \u003d true;\n                 }\n                 if (badImplementedType) {\n                     report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n                 }\n             }\n             validator.expectAllInterfaceProperties(t, n, functionType);\n         }\n     } else if (functionType.isInterface()) {\n         for (ObjectType extInterface : functionType.getExtendedInterfaces()) {\n             if (extInterface.getConstructor() !\u003d null \u0026\u0026 !extInterface.getConstructor().isInterface()) {\n-                compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, \"interface\", functionPrivateName));\n+                compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n             }\n         }\n         if (functionType.hasImplementedInterfaces()) {\n             compiler.report(t.makeError(n, CONFLICTING_IMPLEMENTED_TYPE, functionPrivateName));\n         }\n         if (functionType.getExtendedInterfacesCount() \u003e 1) {\n             HashMap\u003cString, ObjectType\u003e properties \u003d new HashMap\u003cString, ObjectType\u003e();\n             HashMap\u003cString, ObjectType\u003e currentProperties \u003d new HashMap\u003cString, ObjectType\u003e();\n             for (ObjectType interfaceType : functionType.getExtendedInterfaces()) {\n                 currentProperties.clear();\n                 checkInterfaceConflictProperties(t, n, functionPrivateName, properties, currentProperties, interfaceType);\n                 properties.putAll(currentProperties);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "63e875373844bdb6cedc7be3f537baa32cbd2ec0": {
      "type": "Ybodychange",
      "commitMessage": "\nNew @struct and @dict annotations for constructors.\nWith these annotations, one can enforce only dot or only bracket access on object properties.\n\nR\u003dnicksantos\nDELTA\u003d476  (391 added, 34 deleted, 51 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5488\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2181 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/11/12, 11:10 AM",
      "commitName": "63e875373844bdb6cedc7be3f537baa32cbd2ec0",
      "commitAuthor": "dimvar@google.com",
      "commitDateOld": "8/22/12, 12:20 PM",
      "commitNameOld": "d0f6017ead696c8bc68f01b167d9e9bb4b091921",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 19.95,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "actualSource": "private void visitFunction(NodeTraversal t, Node n) {\n    FunctionType functionType \u003d JSType.toMaybeFunctionType(n.getJSType());\n    String functionPrivateName \u003d n.getFirstChild().getString();\n    if (functionType.isConstructor()) {\n        FunctionType baseConstructor \u003d functionType.getSuperClassConstructor();\n        if (baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 baseConstructor !\u003d null \u0026\u0026 baseConstructor.isInterface() \u0026\u0026 functionType.isConstructor()) {\n            compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, \"constructor\", functionPrivateName));\n        } else {\n            if (baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 baseConstructor !\u003d null) {\n                if (functionType.makesStructs() \u0026\u0026 !baseConstructor.makesStructs()) {\n                    compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, \"struct\", functionPrivateName));\n                } else if (functionType.makesDicts() \u0026\u0026 !baseConstructor.makesDicts()) {\n                    compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, \"dict\", functionPrivateName));\n                }\n            }\n            for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n                boolean badImplementedType \u003d false;\n                ObjectType baseInterfaceObj \u003d ObjectType.cast(baseInterface);\n                if (baseInterfaceObj !\u003d null) {\n                    FunctionType interfaceConstructor \u003d baseInterfaceObj.getConstructor();\n                    if (interfaceConstructor !\u003d null \u0026\u0026 !interfaceConstructor.isInterface()) {\n                        badImplementedType \u003d true;\n                    }\n                } else {\n                    badImplementedType \u003d true;\n                }\n                if (badImplementedType) {\n                    report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n                }\n            }\n            validator.expectAllInterfaceProperties(t, n, functionType);\n        }\n    } else if (functionType.isInterface()) {\n        for (ObjectType extInterface : functionType.getExtendedInterfaces()) {\n            if (extInterface.getConstructor() !\u003d null \u0026\u0026 !extInterface.getConstructor().isInterface()) {\n                compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, \"interface\", functionPrivateName));\n            }\n        }\n        if (functionType.hasImplementedInterfaces()) {\n            compiler.report(t.makeError(n, CONFLICTING_IMPLEMENTED_TYPE, functionPrivateName));\n        }\n        if (functionType.getExtendedInterfacesCount() \u003e 1) {\n            HashMap\u003cString, ObjectType\u003e properties \u003d new HashMap\u003cString, ObjectType\u003e();\n            HashMap\u003cString, ObjectType\u003e currentProperties \u003d new HashMap\u003cString, ObjectType\u003e();\n            for (ObjectType interfaceType : functionType.getExtendedInterfaces()) {\n                currentProperties.clear();\n                checkInterfaceConflictProperties(t, n, functionPrivateName, properties, currentProperties, interfaceType);\n                properties.putAll(currentProperties);\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1523,
      "functionName": "visitFunction",
      "functionAnnotation": "",
      "functionDoc": "Visits a {@link Token#FUNCTION} node.\n\n@param t The node traversal object that supplies context, such as the\nscope chain to use in name lookups as well as error reporting.\n@param n The node being visited.\n",
      "diff": "@@ -1,45 +1,52 @@\n private void visitFunction(NodeTraversal t, Node n) {\n     FunctionType functionType \u003d JSType.toMaybeFunctionType(n.getJSType());\n     String functionPrivateName \u003d n.getFirstChild().getString();\n     if (functionType.isConstructor()) {\n         FunctionType baseConstructor \u003d functionType.getSuperClassConstructor();\n-        if (baseConstructor !\u003d null \u0026\u0026 baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 (baseConstructor.isInterface() \u0026\u0026 functionType.isConstructor())) {\n-            compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n+        if (baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 baseConstructor !\u003d null \u0026\u0026 baseConstructor.isInterface() \u0026\u0026 functionType.isConstructor()) {\n+            compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, \"constructor\", functionPrivateName));\n         } else {\n+            if (baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 baseConstructor !\u003d null) {\n+                if (functionType.makesStructs() \u0026\u0026 !baseConstructor.makesStructs()) {\n+                    compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, \"struct\", functionPrivateName));\n+                } else if (functionType.makesDicts() \u0026\u0026 !baseConstructor.makesDicts()) {\n+                    compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, \"dict\", functionPrivateName));\n+                }\n+            }\n             for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n                 boolean badImplementedType \u003d false;\n                 ObjectType baseInterfaceObj \u003d ObjectType.cast(baseInterface);\n                 if (baseInterfaceObj !\u003d null) {\n                     FunctionType interfaceConstructor \u003d baseInterfaceObj.getConstructor();\n                     if (interfaceConstructor !\u003d null \u0026\u0026 !interfaceConstructor.isInterface()) {\n                         badImplementedType \u003d true;\n                     }\n                 } else {\n                     badImplementedType \u003d true;\n                 }\n                 if (badImplementedType) {\n                     report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n                 }\n             }\n             validator.expectAllInterfaceProperties(t, n, functionType);\n         }\n     } else if (functionType.isInterface()) {\n         for (ObjectType extInterface : functionType.getExtendedInterfaces()) {\n             if (extInterface.getConstructor() !\u003d null \u0026\u0026 !extInterface.getConstructor().isInterface()) {\n-                compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n+                compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, \"interface\", functionPrivateName));\n             }\n         }\n         if (functionType.hasImplementedInterfaces()) {\n             compiler.report(t.makeError(n, CONFLICTING_IMPLEMENTED_TYPE, functionPrivateName));\n         }\n         if (functionType.getExtendedInterfacesCount() \u003e 1) {\n             HashMap\u003cString, ObjectType\u003e properties \u003d new HashMap\u003cString, ObjectType\u003e();\n             HashMap\u003cString, ObjectType\u003e currentProperties \u003d new HashMap\u003cString, ObjectType\u003e();\n             for (ObjectType interfaceType : functionType.getExtendedInterfaces()) {\n                 currentProperties.clear();\n                 checkInterfaceConflictProperties(t, n, functionPrivateName, properties, currentProperties, interfaceType);\n                 properties.putAll(currentProperties);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5fa514bee8f76534232e4653eaf16cd416e08012": {
      "type": "Ybodychange",
      "commitMessage": "\nChange how Function prototypes are represented in the type\nsystem.  This fixes lots of bugs when an anonymous object is\nthe prototype, and will make life a lot easier for IDEs.\n\nR\u003djohnlenz\nDELTA\u003d370  (129 added, 177 deleted, 64 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3135\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1389 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/25/11, 8:10 AM",
      "commitName": "5fa514bee8f76534232e4653eaf16cd416e08012",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "8/19/11, 1:01 PM",
      "commitNameOld": "dc8e627390bcd4568447aa6875946ff1506e28b4",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 5.8,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "actualSource": "private void visitFunction(NodeTraversal t, Node n) {\n    FunctionType functionType \u003d JSType.toMaybeFunctionType(n.getJSType());\n    String functionPrivateName \u003d n.getFirstChild().getString();\n    if (functionType.isConstructor()) {\n        FunctionType baseConstructor \u003d functionType.getSuperClassConstructor();\n        if (baseConstructor !\u003d null \u0026\u0026 baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 (baseConstructor.isInterface() \u0026\u0026 functionType.isConstructor())) {\n            compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n        } else {\n            for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n                boolean badImplementedType \u003d false;\n                ObjectType baseInterfaceObj \u003d ObjectType.cast(baseInterface);\n                if (baseInterfaceObj !\u003d null) {\n                    FunctionType interfaceConstructor \u003d baseInterfaceObj.getConstructor();\n                    if (interfaceConstructor !\u003d null \u0026\u0026 !interfaceConstructor.isInterface()) {\n                        badImplementedType \u003d true;\n                    }\n                } else {\n                    badImplementedType \u003d true;\n                }\n                if (badImplementedType) {\n                    report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n                }\n            }\n            validator.expectAllInterfaceProperties(t, n, functionType);\n        }\n    } else if (functionType.isInterface()) {\n        for (ObjectType extInterface : functionType.getExtendedInterfaces()) {\n            if (extInterface.getConstructor() !\u003d null \u0026\u0026 !extInterface.getConstructor().isInterface()) {\n                compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n            }\n        }\n        if (functionType.hasImplementedInterfaces()) {\n            compiler.report(t.makeError(n, CONFLICTING_IMPLEMENTED_TYPE, functionPrivateName));\n        }\n        if (functionType.getExtendedInterfacesCount() \u003e 1) {\n            HashMap\u003cString, ObjectType\u003e properties \u003d new HashMap\u003cString, ObjectType\u003e();\n            HashMap\u003cString, ObjectType\u003e currentProperties \u003d new HashMap\u003cString, ObjectType\u003e();\n            for (ObjectType interfaceType : functionType.getExtendedInterfaces()) {\n                currentProperties.clear();\n                checkInterfaceConflictProperties(t, n, functionPrivateName, properties, currentProperties, interfaceType);\n                properties.putAll(currentProperties);\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1466,
      "functionName": "visitFunction",
      "functionAnnotation": "",
      "functionDoc": "Visits a {@link Token#FUNCTION} node.\n\n@param t The node traversal object that supplies context, such as the\nscope chain to use in name lookups as well as error reporting.\n@param n The node being visited.\n",
      "diff": "@@ -1,45 +1,45 @@\n private void visitFunction(NodeTraversal t, Node n) {\n     FunctionType functionType \u003d JSType.toMaybeFunctionType(n.getJSType());\n     String functionPrivateName \u003d n.getFirstChild().getString();\n     if (functionType.isConstructor()) {\n-        FunctionType baseConstructor \u003d functionType.getPrototype().getImplicitPrototype().getConstructor();\n+        FunctionType baseConstructor \u003d functionType.getSuperClassConstructor();\n         if (baseConstructor !\u003d null \u0026\u0026 baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 (baseConstructor.isInterface() \u0026\u0026 functionType.isConstructor())) {\n             compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n         } else {\n             for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n                 boolean badImplementedType \u003d false;\n                 ObjectType baseInterfaceObj \u003d ObjectType.cast(baseInterface);\n                 if (baseInterfaceObj !\u003d null) {\n                     FunctionType interfaceConstructor \u003d baseInterfaceObj.getConstructor();\n                     if (interfaceConstructor !\u003d null \u0026\u0026 !interfaceConstructor.isInterface()) {\n                         badImplementedType \u003d true;\n                     }\n                 } else {\n                     badImplementedType \u003d true;\n                 }\n                 if (badImplementedType) {\n                     report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n                 }\n             }\n             validator.expectAllInterfaceProperties(t, n, functionType);\n         }\n     } else if (functionType.isInterface()) {\n         for (ObjectType extInterface : functionType.getExtendedInterfaces()) {\n             if (extInterface.getConstructor() !\u003d null \u0026\u0026 !extInterface.getConstructor().isInterface()) {\n                 compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n             }\n         }\n         if (functionType.hasImplementedInterfaces()) {\n             compiler.report(t.makeError(n, CONFLICTING_IMPLEMENTED_TYPE, functionPrivateName));\n         }\n         if (functionType.getExtendedInterfacesCount() \u003e 1) {\n             HashMap\u003cString, ObjectType\u003e properties \u003d new HashMap\u003cString, ObjectType\u003e();\n             HashMap\u003cString, ObjectType\u003e currentProperties \u003d new HashMap\u003cString, ObjectType\u003e();\n             for (ObjectType interfaceType : functionType.getExtendedInterfaces()) {\n                 currentProperties.clear();\n                 checkInterfaceConflictProperties(t, n, functionPrivateName, properties, currentProperties, interfaceType);\n                 properties.putAll(currentProperties);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bd9c7b620384fe5a98772729001ed56304459bc6": {
      "type": "Ybodychange",
      "commitMessage": "\nAdd toMaybeFunctionType/toMaybeEnumElementType.\ntry #2. the bugs in jstestc were fixed. this cl is exactly\nthe same as the original\n\nR\u003djohnlenz\nDELTA\u003d317  (79 added, 47 deleted, 191 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3078\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1367 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/18/11, 3:46 PM",
      "commitName": "bd9c7b620384fe5a98772729001ed56304459bc6",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "8/18/11, 10:40 AM",
      "commitNameOld": "01d1238a2a577d8988a72c29304a3283ca05a29a",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.21,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private void visitFunction(NodeTraversal t, Node n) {\n    FunctionType functionType \u003d JSType.toMaybeFunctionType(n.getJSType());\n    String functionPrivateName \u003d n.getFirstChild().getString();\n    if (functionType.isConstructor()) {\n        FunctionType baseConstructor \u003d functionType.getPrototype().getImplicitPrototype().getConstructor();\n        if (baseConstructor !\u003d null \u0026\u0026 baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 (baseConstructor.isInterface() \u0026\u0026 functionType.isConstructor())) {\n            compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n        } else {\n            for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n                boolean badImplementedType \u003d false;\n                ObjectType baseInterfaceObj \u003d ObjectType.cast(baseInterface);\n                if (baseInterfaceObj !\u003d null) {\n                    FunctionType interfaceConstructor \u003d baseInterfaceObj.getConstructor();\n                    if (interfaceConstructor !\u003d null \u0026\u0026 !interfaceConstructor.isInterface()) {\n                        badImplementedType \u003d true;\n                    }\n                } else {\n                    badImplementedType \u003d true;\n                }\n                if (badImplementedType) {\n                    report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n                }\n            }\n            validator.expectAllInterfaceProperties(t, n, functionType);\n        }\n    } else if (functionType.isInterface()) {\n        for (ObjectType extInterface : functionType.getExtendedInterfaces()) {\n            if (extInterface.getConstructor() !\u003d null \u0026\u0026 !extInterface.getConstructor().isInterface()) {\n                compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n            }\n        }\n        if (functionType.hasImplementedInterfaces()) {\n            compiler.report(t.makeError(n, CONFLICTING_IMPLEMENTED_TYPE, functionPrivateName));\n        }\n        if (functionType.getExtendedInterfacesCount() \u003e 1) {\n            HashMap\u003cString, ObjectType\u003e properties \u003d new HashMap\u003cString, ObjectType\u003e();\n            HashMap\u003cString, ObjectType\u003e currentProperties \u003d new HashMap\u003cString, ObjectType\u003e();\n            for (ObjectType interfaceType : functionType.getExtendedInterfaces()) {\n                currentProperties.clear();\n                checkInterfaceConflictProperties(t, n, functionPrivateName, properties, currentProperties, interfaceType);\n                properties.putAll(currentProperties);\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1478,
      "functionName": "visitFunction",
      "functionAnnotation": "",
      "functionDoc": "Visits a {@link Token#FUNCTION} node.\n\n@param t The node traversal object that supplies context, such as the\nscope chain to use in name lookups as well as error reporting.\n@param n The node being visited.\n",
      "diff": "@@ -1,45 +1,45 @@\n private void visitFunction(NodeTraversal t, Node n) {\n-    FunctionType functionType \u003d (FunctionType) n.getJSType();\n+    FunctionType functionType \u003d JSType.toMaybeFunctionType(n.getJSType());\n     String functionPrivateName \u003d n.getFirstChild().getString();\n     if (functionType.isConstructor()) {\n         FunctionType baseConstructor \u003d functionType.getPrototype().getImplicitPrototype().getConstructor();\n         if (baseConstructor !\u003d null \u0026\u0026 baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 (baseConstructor.isInterface() \u0026\u0026 functionType.isConstructor())) {\n             compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n         } else {\n             for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n                 boolean badImplementedType \u003d false;\n                 ObjectType baseInterfaceObj \u003d ObjectType.cast(baseInterface);\n                 if (baseInterfaceObj !\u003d null) {\n                     FunctionType interfaceConstructor \u003d baseInterfaceObj.getConstructor();\n                     if (interfaceConstructor !\u003d null \u0026\u0026 !interfaceConstructor.isInterface()) {\n                         badImplementedType \u003d true;\n                     }\n                 } else {\n                     badImplementedType \u003d true;\n                 }\n                 if (badImplementedType) {\n                     report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n                 }\n             }\n             validator.expectAllInterfaceProperties(t, n, functionType);\n         }\n     } else if (functionType.isInterface()) {\n         for (ObjectType extInterface : functionType.getExtendedInterfaces()) {\n             if (extInterface.getConstructor() !\u003d null \u0026\u0026 !extInterface.getConstructor().isInterface()) {\n                 compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n             }\n         }\n         if (functionType.hasImplementedInterfaces()) {\n             compiler.report(t.makeError(n, CONFLICTING_IMPLEMENTED_TYPE, functionPrivateName));\n         }\n         if (functionType.getExtendedInterfacesCount() \u003e 1) {\n             HashMap\u003cString, ObjectType\u003e properties \u003d new HashMap\u003cString, ObjectType\u003e();\n             HashMap\u003cString, ObjectType\u003e currentProperties \u003d new HashMap\u003cString, ObjectType\u003e();\n             for (ObjectType interfaceType : functionType.getExtendedInterfaces()) {\n                 currentProperties.clear();\n                 checkInterfaceConflictProperties(t, n, functionPrivateName, properties, currentProperties, interfaceType);\n                 properties.putAll(currentProperties);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "01d1238a2a577d8988a72c29304a3283ca05a29a": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nbroke some tests\n\n*** Original change description ***\n\nAdd toMaybeFunctionType/toMaybeEnumElementType.\nwow, nullability is annoying!\n\nDELTA\u003d318  (48 added, 79 deleted, 191 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3075\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1364 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/18/11, 10:40 AM",
      "commitName": "01d1238a2a577d8988a72c29304a3283ca05a29a",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "8/18/11, 9:38 AM",
      "commitNameOld": "fc0798047ad3aac58a54ea65f9f1c8857745419f",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void visitFunction(NodeTraversal t, Node n) {\n    FunctionType functionType \u003d (FunctionType) n.getJSType();\n    String functionPrivateName \u003d n.getFirstChild().getString();\n    if (functionType.isConstructor()) {\n        FunctionType baseConstructor \u003d functionType.getPrototype().getImplicitPrototype().getConstructor();\n        if (baseConstructor !\u003d null \u0026\u0026 baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 (baseConstructor.isInterface() \u0026\u0026 functionType.isConstructor())) {\n            compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n        } else {\n            for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n                boolean badImplementedType \u003d false;\n                ObjectType baseInterfaceObj \u003d ObjectType.cast(baseInterface);\n                if (baseInterfaceObj !\u003d null) {\n                    FunctionType interfaceConstructor \u003d baseInterfaceObj.getConstructor();\n                    if (interfaceConstructor !\u003d null \u0026\u0026 !interfaceConstructor.isInterface()) {\n                        badImplementedType \u003d true;\n                    }\n                } else {\n                    badImplementedType \u003d true;\n                }\n                if (badImplementedType) {\n                    report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n                }\n            }\n            validator.expectAllInterfaceProperties(t, n, functionType);\n        }\n    } else if (functionType.isInterface()) {\n        for (ObjectType extInterface : functionType.getExtendedInterfaces()) {\n            if (extInterface.getConstructor() !\u003d null \u0026\u0026 !extInterface.getConstructor().isInterface()) {\n                compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n            }\n        }\n        if (functionType.hasImplementedInterfaces()) {\n            compiler.report(t.makeError(n, CONFLICTING_IMPLEMENTED_TYPE, functionPrivateName));\n        }\n        if (functionType.getExtendedInterfacesCount() \u003e 1) {\n            HashMap\u003cString, ObjectType\u003e properties \u003d new HashMap\u003cString, ObjectType\u003e();\n            HashMap\u003cString, ObjectType\u003e currentProperties \u003d new HashMap\u003cString, ObjectType\u003e();\n            for (ObjectType interfaceType : functionType.getExtendedInterfaces()) {\n                currentProperties.clear();\n                checkInterfaceConflictProperties(t, n, functionPrivateName, properties, currentProperties, interfaceType);\n                properties.putAll(currentProperties);\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1476,
      "functionName": "visitFunction",
      "functionAnnotation": "",
      "functionDoc": "Visits a {@link Token#FUNCTION} node.\n\n@param t The node traversal object that supplies context, such as the\nscope chain to use in name lookups as well as error reporting.\n@param n The node being visited.\n",
      "diff": "@@ -1,45 +1,45 @@\n private void visitFunction(NodeTraversal t, Node n) {\n-    FunctionType functionType \u003d JSType.toMaybeFunctionType(n.getJSType());\n+    FunctionType functionType \u003d (FunctionType) n.getJSType();\n     String functionPrivateName \u003d n.getFirstChild().getString();\n     if (functionType.isConstructor()) {\n         FunctionType baseConstructor \u003d functionType.getPrototype().getImplicitPrototype().getConstructor();\n         if (baseConstructor !\u003d null \u0026\u0026 baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 (baseConstructor.isInterface() \u0026\u0026 functionType.isConstructor())) {\n             compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n         } else {\n             for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n                 boolean badImplementedType \u003d false;\n                 ObjectType baseInterfaceObj \u003d ObjectType.cast(baseInterface);\n                 if (baseInterfaceObj !\u003d null) {\n                     FunctionType interfaceConstructor \u003d baseInterfaceObj.getConstructor();\n                     if (interfaceConstructor !\u003d null \u0026\u0026 !interfaceConstructor.isInterface()) {\n                         badImplementedType \u003d true;\n                     }\n                 } else {\n                     badImplementedType \u003d true;\n                 }\n                 if (badImplementedType) {\n                     report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n                 }\n             }\n             validator.expectAllInterfaceProperties(t, n, functionType);\n         }\n     } else if (functionType.isInterface()) {\n         for (ObjectType extInterface : functionType.getExtendedInterfaces()) {\n             if (extInterface.getConstructor() !\u003d null \u0026\u0026 !extInterface.getConstructor().isInterface()) {\n                 compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n             }\n         }\n         if (functionType.hasImplementedInterfaces()) {\n             compiler.report(t.makeError(n, CONFLICTING_IMPLEMENTED_TYPE, functionPrivateName));\n         }\n         if (functionType.getExtendedInterfacesCount() \u003e 1) {\n             HashMap\u003cString, ObjectType\u003e properties \u003d new HashMap\u003cString, ObjectType\u003e();\n             HashMap\u003cString, ObjectType\u003e currentProperties \u003d new HashMap\u003cString, ObjectType\u003e();\n             for (ObjectType interfaceType : functionType.getExtendedInterfaces()) {\n                 currentProperties.clear();\n                 checkInterfaceConflictProperties(t, n, functionPrivateName, properties, currentProperties, interfaceType);\n                 properties.putAll(currentProperties);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "fc0798047ad3aac58a54ea65f9f1c8857745419f": {
      "type": "Ybodychange",
      "commitMessage": "\nAdd toMaybeFunctionType/toMaybeEnumElementType.\nwow, nullability is annoying!\n\nR\u003djohnlenz\nDELTA\u003d318  (79 added, 48 deleted, 191 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3074\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1363 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/18/11, 9:38 AM",
      "commitName": "fc0798047ad3aac58a54ea65f9f1c8857745419f",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "8/4/11, 9:23 AM",
      "commitNameOld": "0af94b21ceb7f8f0891b85e5713ff93c230e1bb6",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 14.01,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "actualSource": "private void visitFunction(NodeTraversal t, Node n) {\n    FunctionType functionType \u003d JSType.toMaybeFunctionType(n.getJSType());\n    String functionPrivateName \u003d n.getFirstChild().getString();\n    if (functionType.isConstructor()) {\n        FunctionType baseConstructor \u003d functionType.getPrototype().getImplicitPrototype().getConstructor();\n        if (baseConstructor !\u003d null \u0026\u0026 baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 (baseConstructor.isInterface() \u0026\u0026 functionType.isConstructor())) {\n            compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n        } else {\n            for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n                boolean badImplementedType \u003d false;\n                ObjectType baseInterfaceObj \u003d ObjectType.cast(baseInterface);\n                if (baseInterfaceObj !\u003d null) {\n                    FunctionType interfaceConstructor \u003d baseInterfaceObj.getConstructor();\n                    if (interfaceConstructor !\u003d null \u0026\u0026 !interfaceConstructor.isInterface()) {\n                        badImplementedType \u003d true;\n                    }\n                } else {\n                    badImplementedType \u003d true;\n                }\n                if (badImplementedType) {\n                    report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n                }\n            }\n            validator.expectAllInterfaceProperties(t, n, functionType);\n        }\n    } else if (functionType.isInterface()) {\n        for (ObjectType extInterface : functionType.getExtendedInterfaces()) {\n            if (extInterface.getConstructor() !\u003d null \u0026\u0026 !extInterface.getConstructor().isInterface()) {\n                compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n            }\n        }\n        if (functionType.hasImplementedInterfaces()) {\n            compiler.report(t.makeError(n, CONFLICTING_IMPLEMENTED_TYPE, functionPrivateName));\n        }\n        if (functionType.getExtendedInterfacesCount() \u003e 1) {\n            HashMap\u003cString, ObjectType\u003e properties \u003d new HashMap\u003cString, ObjectType\u003e();\n            HashMap\u003cString, ObjectType\u003e currentProperties \u003d new HashMap\u003cString, ObjectType\u003e();\n            for (ObjectType interfaceType : functionType.getExtendedInterfaces()) {\n                currentProperties.clear();\n                checkInterfaceConflictProperties(t, n, functionPrivateName, properties, currentProperties, interfaceType);\n                properties.putAll(currentProperties);\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1478,
      "functionName": "visitFunction",
      "functionAnnotation": "",
      "functionDoc": "Visits a {@link Token#FUNCTION} node.\n\n@param t The node traversal object that supplies context, such as the\nscope chain to use in name lookups as well as error reporting.\n@param n The node being visited.\n",
      "diff": "@@ -1,45 +1,45 @@\n private void visitFunction(NodeTraversal t, Node n) {\n-    FunctionType functionType \u003d (FunctionType) n.getJSType();\n+    FunctionType functionType \u003d JSType.toMaybeFunctionType(n.getJSType());\n     String functionPrivateName \u003d n.getFirstChild().getString();\n     if (functionType.isConstructor()) {\n         FunctionType baseConstructor \u003d functionType.getPrototype().getImplicitPrototype().getConstructor();\n         if (baseConstructor !\u003d null \u0026\u0026 baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 (baseConstructor.isInterface() \u0026\u0026 functionType.isConstructor())) {\n             compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n         } else {\n             for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n                 boolean badImplementedType \u003d false;\n                 ObjectType baseInterfaceObj \u003d ObjectType.cast(baseInterface);\n                 if (baseInterfaceObj !\u003d null) {\n                     FunctionType interfaceConstructor \u003d baseInterfaceObj.getConstructor();\n                     if (interfaceConstructor !\u003d null \u0026\u0026 !interfaceConstructor.isInterface()) {\n                         badImplementedType \u003d true;\n                     }\n                 } else {\n                     badImplementedType \u003d true;\n                 }\n                 if (badImplementedType) {\n                     report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n                 }\n             }\n             validator.expectAllInterfaceProperties(t, n, functionType);\n         }\n     } else if (functionType.isInterface()) {\n         for (ObjectType extInterface : functionType.getExtendedInterfaces()) {\n             if (extInterface.getConstructor() !\u003d null \u0026\u0026 !extInterface.getConstructor().isInterface()) {\n                 compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n             }\n         }\n         if (functionType.hasImplementedInterfaces()) {\n             compiler.report(t.makeError(n, CONFLICTING_IMPLEMENTED_TYPE, functionPrivateName));\n         }\n         if (functionType.getExtendedInterfacesCount() \u003e 1) {\n             HashMap\u003cString, ObjectType\u003e properties \u003d new HashMap\u003cString, ObjectType\u003e();\n             HashMap\u003cString, ObjectType\u003e currentProperties \u003d new HashMap\u003cString, ObjectType\u003e();\n             for (ObjectType interfaceType : functionType.getExtendedInterfaces()) {\n                 currentProperties.clear();\n                 checkInterfaceConflictProperties(t, n, functionPrivateName, properties, currentProperties, interfaceType);\n                 properties.putAll(currentProperties);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "aa7c8f99aa0cf5b8016e139b383aa0dd13f68051": {
      "type": "Ybodychange",
      "commitMessage": "\nType Check for Multiple Extends Interface Properties\n\nR\u003dnicksantos\nDELTA\u003d222  (222 added, 0 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1944\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1113 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/18/11, 9:53 AM",
      "commitName": "aa7c8f99aa0cf5b8016e139b383aa0dd13f68051",
      "commitAuthor": "zhuyi@google.com",
      "commitDateOld": "5/16/11, 12:57 PM",
      "commitNameOld": "c438dfd06013f82daa648d23b864842ff1881695",
      "commitAuthorOld": "zhuyi@google.com",
      "daysBetweenCommits": 1.87,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "private void visitFunction(NodeTraversal t, Node n) {\n    FunctionType functionType \u003d (FunctionType) n.getJSType();\n    String functionPrivateName \u003d n.getFirstChild().getString();\n    if (functionType.isConstructor()) {\n        FunctionType baseConstructor \u003d functionType.getPrototype().getImplicitPrototype().getConstructor();\n        if (baseConstructor !\u003d null \u0026\u0026 baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 (baseConstructor.isInterface() \u0026\u0026 functionType.isConstructor())) {\n            compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n        } else {\n            for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n                boolean badImplementedType \u003d false;\n                ObjectType baseInterfaceObj \u003d ObjectType.cast(baseInterface);\n                if (baseInterfaceObj !\u003d null) {\n                    FunctionType interfaceConstructor \u003d baseInterfaceObj.getConstructor();\n                    if (interfaceConstructor !\u003d null \u0026\u0026 !interfaceConstructor.isInterface()) {\n                        badImplementedType \u003d true;\n                    }\n                } else {\n                    badImplementedType \u003d true;\n                }\n                if (badImplementedType) {\n                    report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n                }\n            }\n            validator.expectAllInterfaceProperties(t, n, functionType);\n        }\n    } else if (functionType.isInterface()) {\n        for (ObjectType extInterface : functionType.getExtendedInterfaces()) {\n            if (extInterface.getConstructor() !\u003d null \u0026\u0026 !extInterface.getConstructor().isInterface()) {\n                compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n            }\n        }\n        if (functionType.hasImplementedInterfaces()) {\n            compiler.report(t.makeError(n, CONFLICTING_IMPLEMENTED_TYPE, functionPrivateName));\n        }\n        if (functionType.getExtendedInterfacesCount() \u003e 1) {\n            HashMap\u003cString, ObjectType\u003e properties \u003d new HashMap\u003cString, ObjectType\u003e();\n            HashMap\u003cString, ObjectType\u003e currentProperties \u003d new HashMap\u003cString, ObjectType\u003e();\n            for (ObjectType interfaceType : functionType.getExtendedInterfaces()) {\n                currentProperties.clear();\n                checkInterfaceConflictProperties(t, n, functionPrivateName, properties, currentProperties, interfaceType);\n                properties.putAll(currentProperties);\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1467,
      "functionName": "visitFunction",
      "functionAnnotation": "",
      "functionDoc": "Visits a {@link Token#FUNCTION} node.\n\n@param t The node traversal object that supplies context, such as the\nscope chain to use in name lookups as well as error reporting.\n@param n The node being visited.\n",
      "diff": "@@ -1,36 +1,45 @@\n private void visitFunction(NodeTraversal t, Node n) {\n     FunctionType functionType \u003d (FunctionType) n.getJSType();\n     String functionPrivateName \u003d n.getFirstChild().getString();\n     if (functionType.isConstructor()) {\n         FunctionType baseConstructor \u003d functionType.getPrototype().getImplicitPrototype().getConstructor();\n         if (baseConstructor !\u003d null \u0026\u0026 baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 (baseConstructor.isInterface() \u0026\u0026 functionType.isConstructor())) {\n             compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n         } else {\n             for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n                 boolean badImplementedType \u003d false;\n                 ObjectType baseInterfaceObj \u003d ObjectType.cast(baseInterface);\n                 if (baseInterfaceObj !\u003d null) {\n                     FunctionType interfaceConstructor \u003d baseInterfaceObj.getConstructor();\n                     if (interfaceConstructor !\u003d null \u0026\u0026 !interfaceConstructor.isInterface()) {\n                         badImplementedType \u003d true;\n                     }\n                 } else {\n                     badImplementedType \u003d true;\n                 }\n                 if (badImplementedType) {\n                     report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n                 }\n             }\n             validator.expectAllInterfaceProperties(t, n, functionType);\n         }\n     } else if (functionType.isInterface()) {\n         for (ObjectType extInterface : functionType.getExtendedInterfaces()) {\n             if (extInterface.getConstructor() !\u003d null \u0026\u0026 !extInterface.getConstructor().isInterface()) {\n                 compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n             }\n         }\n         if (functionType.hasImplementedInterfaces()) {\n             compiler.report(t.makeError(n, CONFLICTING_IMPLEMENTED_TYPE, functionPrivateName));\n         }\n+        if (functionType.getExtendedInterfacesCount() \u003e 1) {\n+            HashMap\u003cString, ObjectType\u003e properties \u003d new HashMap\u003cString, ObjectType\u003e();\n+            HashMap\u003cString, ObjectType\u003e currentProperties \u003d new HashMap\u003cString, ObjectType\u003e();\n+            for (ObjectType interfaceType : functionType.getExtendedInterfaces()) {\n+                currentProperties.clear();\n+                checkInterfaceConflictProperties(t, n, functionPrivateName, properties, currentProperties, interfaceType);\n+                properties.putAll(currentProperties);\n+            }\n+        }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c438dfd06013f82daa648d23b864842ff1881695": {
      "type": "Ybodychange",
      "commitMessage": "\nImplement multiple extends for interfaces\n\nR\u003dnicksantos\nDELTA\u003d711  (635 added, 41 deleted, 35 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1917\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1105 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/16/11, 12:57 PM",
      "commitName": "c438dfd06013f82daa648d23b864842ff1881695",
      "commitAuthor": "zhuyi@google.com",
      "commitDateOld": "5/10/11, 2:34 PM",
      "commitNameOld": "2851a41947bed8b8e100c7dac7d1edbc1c909d24",
      "commitAuthorOld": "zhuyi@google.com",
      "daysBetweenCommits": 5.93,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "actualSource": "private void visitFunction(NodeTraversal t, Node n) {\n    FunctionType functionType \u003d (FunctionType) n.getJSType();\n    String functionPrivateName \u003d n.getFirstChild().getString();\n    if (functionType.isConstructor()) {\n        FunctionType baseConstructor \u003d functionType.getPrototype().getImplicitPrototype().getConstructor();\n        if (baseConstructor !\u003d null \u0026\u0026 baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 (baseConstructor.isInterface() \u0026\u0026 functionType.isConstructor())) {\n            compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n        } else {\n            for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n                boolean badImplementedType \u003d false;\n                ObjectType baseInterfaceObj \u003d ObjectType.cast(baseInterface);\n                if (baseInterfaceObj !\u003d null) {\n                    FunctionType interfaceConstructor \u003d baseInterfaceObj.getConstructor();\n                    if (interfaceConstructor !\u003d null \u0026\u0026 !interfaceConstructor.isInterface()) {\n                        badImplementedType \u003d true;\n                    }\n                } else {\n                    badImplementedType \u003d true;\n                }\n                if (badImplementedType) {\n                    report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n                }\n            }\n            validator.expectAllInterfaceProperties(t, n, functionType);\n        }\n    } else if (functionType.isInterface()) {\n        for (ObjectType extInterface : functionType.getExtendedInterfaces()) {\n            if (extInterface.getConstructor() !\u003d null \u0026\u0026 !extInterface.getConstructor().isInterface()) {\n                compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n            }\n        }\n        if (functionType.hasImplementedInterfaces()) {\n            compiler.report(t.makeError(n, CONFLICTING_IMPLEMENTED_TYPE, functionPrivateName));\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1422,
      "functionName": "visitFunction",
      "functionAnnotation": "",
      "functionDoc": "Visits a {@link Token#FUNCTION} node.\n\n@param t The node traversal object that supplies context, such as the\nscope chain to use in name lookups as well as error reporting.\n@param n The node being visited.\n",
      "diff": "@@ -1,35 +1,36 @@\n private void visitFunction(NodeTraversal t, Node n) {\n-    JSDocInfo info \u003d n.getJSDocInfo();\n     FunctionType functionType \u003d (FunctionType) n.getJSType();\n     String functionPrivateName \u003d n.getFirstChild().getString();\n-    if (functionType.isInterface() || functionType.isConstructor()) {\n+    if (functionType.isConstructor()) {\n         FunctionType baseConstructor \u003d functionType.getPrototype().getImplicitPrototype().getConstructor();\n-        if (baseConstructor !\u003d null \u0026\u0026 baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 (baseConstructor.isConstructor() \u0026\u0026 functionType.isInterface() || baseConstructor.isInterface() \u0026\u0026 functionType.isConstructor())) {\n+        if (baseConstructor !\u003d null \u0026\u0026 baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 (baseConstructor.isInterface() \u0026\u0026 functionType.isConstructor())) {\n             compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n-        }\n-        if (functionType.isInterface()) {\n-            if (functionType.hasImplementedInterfaces()) {\n-                compiler.report(t.makeError(n, CONFLICTING_IMPLEMENTED_TYPE, functionPrivateName));\n-            }\n         } else {\n             for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n                 boolean badImplementedType \u003d false;\n                 ObjectType baseInterfaceObj \u003d ObjectType.cast(baseInterface);\n                 if (baseInterfaceObj !\u003d null) {\n                     FunctionType interfaceConstructor \u003d baseInterfaceObj.getConstructor();\n                     if (interfaceConstructor !\u003d null \u0026\u0026 !interfaceConstructor.isInterface()) {\n                         badImplementedType \u003d true;\n                     }\n                 } else {\n                     badImplementedType \u003d true;\n                 }\n                 if (badImplementedType) {\n                     report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n                 }\n             }\n-        }\n-        if (functionType.isConstructor()) {\n             validator.expectAllInterfaceProperties(t, n, functionType);\n         }\n+    } else if (functionType.isInterface()) {\n+        for (ObjectType extInterface : functionType.getExtendedInterfaces()) {\n+            if (extInterface.getConstructor() !\u003d null \u0026\u0026 !extInterface.getConstructor().isInterface()) {\n+                compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n+            }\n+        }\n+        if (functionType.hasImplementedInterfaces()) {\n+            compiler.report(t.makeError(n, CONFLICTING_IMPLEMENTED_TYPE, functionPrivateName));\n+        }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2851a41947bed8b8e100c7dac7d1edbc1c909d24": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nGot multiple cases broken from different teams.\n\n*** Original change description ***\n\nImplement multi extends for interfaces\n\nR\u003dnicksantos\nDELTA\u003d635  (41 added, 560 deleted, 34 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1813\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1077 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/10/11, 2:34 PM",
      "commitName": "2851a41947bed8b8e100c7dac7d1edbc1c909d24",
      "commitAuthor": "zhuyi@google.com",
      "commitDateOld": "5/10/11, 1:26 PM",
      "commitNameOld": "a36a61a9027c5bca5752b0ecca7c609c07e568bb",
      "commitAuthorOld": "zhuyi@google.com",
      "daysBetweenCommits": 0.05,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private void visitFunction(NodeTraversal t, Node n) {\n    JSDocInfo info \u003d n.getJSDocInfo();\n    FunctionType functionType \u003d (FunctionType) n.getJSType();\n    String functionPrivateName \u003d n.getFirstChild().getString();\n    if (functionType.isInterface() || functionType.isConstructor()) {\n        FunctionType baseConstructor \u003d functionType.getPrototype().getImplicitPrototype().getConstructor();\n        if (baseConstructor !\u003d null \u0026\u0026 baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 (baseConstructor.isConstructor() \u0026\u0026 functionType.isInterface() || baseConstructor.isInterface() \u0026\u0026 functionType.isConstructor())) {\n            compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n        }\n        if (functionType.isInterface()) {\n            if (functionType.hasImplementedInterfaces()) {\n                compiler.report(t.makeError(n, CONFLICTING_IMPLEMENTED_TYPE, functionPrivateName));\n            }\n        } else {\n            for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n                boolean badImplementedType \u003d false;\n                ObjectType baseInterfaceObj \u003d ObjectType.cast(baseInterface);\n                if (baseInterfaceObj !\u003d null) {\n                    FunctionType interfaceConstructor \u003d baseInterfaceObj.getConstructor();\n                    if (interfaceConstructor !\u003d null \u0026\u0026 !interfaceConstructor.isInterface()) {\n                        badImplementedType \u003d true;\n                    }\n                } else {\n                    badImplementedType \u003d true;\n                }\n                if (badImplementedType) {\n                    report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n                }\n            }\n        }\n        if (functionType.isConstructor()) {\n            validator.expectAllInterfaceProperties(t, n, functionType);\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1395,
      "functionName": "visitFunction",
      "functionAnnotation": "",
      "functionDoc": "Visits a {@link Token#FUNCTION} node.\n\n@param t The node traversal object that supplies context, such as the\nscope chain to use in name lookups as well as error reporting.\n@param n The node being visited.\n",
      "diff": "@@ -1,36 +1,35 @@\n private void visitFunction(NodeTraversal t, Node n) {\n+    JSDocInfo info \u003d n.getJSDocInfo();\n     FunctionType functionType \u003d (FunctionType) n.getJSType();\n     String functionPrivateName \u003d n.getFirstChild().getString();\n-    if (functionType.isConstructor()) {\n+    if (functionType.isInterface() || functionType.isConstructor()) {\n         FunctionType baseConstructor \u003d functionType.getPrototype().getImplicitPrototype().getConstructor();\n-        if (baseConstructor !\u003d null \u0026\u0026 baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 (baseConstructor.isInterface() \u0026\u0026 functionType.isConstructor())) {\n+        if (baseConstructor !\u003d null \u0026\u0026 baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 (baseConstructor.isConstructor() \u0026\u0026 functionType.isInterface() || baseConstructor.isInterface() \u0026\u0026 functionType.isConstructor())) {\n             compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n+        }\n+        if (functionType.isInterface()) {\n+            if (functionType.hasImplementedInterfaces()) {\n+                compiler.report(t.makeError(n, CONFLICTING_IMPLEMENTED_TYPE, functionPrivateName));\n+            }\n         } else {\n             for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n                 boolean badImplementedType \u003d false;\n                 ObjectType baseInterfaceObj \u003d ObjectType.cast(baseInterface);\n                 if (baseInterfaceObj !\u003d null) {\n                     FunctionType interfaceConstructor \u003d baseInterfaceObj.getConstructor();\n                     if (interfaceConstructor !\u003d null \u0026\u0026 !interfaceConstructor.isInterface()) {\n                         badImplementedType \u003d true;\n                     }\n                 } else {\n                     badImplementedType \u003d true;\n                 }\n                 if (badImplementedType) {\n                     report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n                 }\n             }\n+        }\n+        if (functionType.isConstructor()) {\n             validator.expectAllInterfaceProperties(t, n, functionType);\n         }\n-    } else if (functionType.isInterface()) {\n-        for (ObjectType extInterface : functionType.getExtendedInterfaces()) {\n-            if (extInterface.getConstructor() !\u003d null \u0026\u0026 !extInterface.getConstructor().isInterface()) {\n-                compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n-            }\n-        }\n-        if (functionType.hasImplementedInterfaces()) {\n-            compiler.report(t.makeError(n, CONFLICTING_IMPLEMENTED_TYPE, functionPrivateName));\n-        }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a36a61a9027c5bca5752b0ecca7c609c07e568bb": {
      "type": "Ybodychange",
      "commitMessage": "\nImplement multi extends for interfaces\n\nR\u003dnicksantos\nDELTA\u003d635  (560 added, 41 deleted, 34 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1810\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1074 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/10/11, 1:26 PM",
      "commitName": "a36a61a9027c5bca5752b0ecca7c609c07e568bb",
      "commitAuthor": "zhuyi@google.com",
      "commitDateOld": "4/19/11, 5:06 PM",
      "commitNameOld": "e82290302eaf2757281651588ee43441ed6d57d6",
      "commitAuthorOld": "zhuyi@google.com",
      "daysBetweenCommits": 20.85,
      "commitsBetweenForRepo": 50,
      "commitsBetweenForFile": 1,
      "actualSource": "private void visitFunction(NodeTraversal t, Node n) {\n    FunctionType functionType \u003d (FunctionType) n.getJSType();\n    String functionPrivateName \u003d n.getFirstChild().getString();\n    if (functionType.isConstructor()) {\n        FunctionType baseConstructor \u003d functionType.getPrototype().getImplicitPrototype().getConstructor();\n        if (baseConstructor !\u003d null \u0026\u0026 baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 (baseConstructor.isInterface() \u0026\u0026 functionType.isConstructor())) {\n            compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n        } else {\n            for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n                boolean badImplementedType \u003d false;\n                ObjectType baseInterfaceObj \u003d ObjectType.cast(baseInterface);\n                if (baseInterfaceObj !\u003d null) {\n                    FunctionType interfaceConstructor \u003d baseInterfaceObj.getConstructor();\n                    if (interfaceConstructor !\u003d null \u0026\u0026 !interfaceConstructor.isInterface()) {\n                        badImplementedType \u003d true;\n                    }\n                } else {\n                    badImplementedType \u003d true;\n                }\n                if (badImplementedType) {\n                    report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n                }\n            }\n            validator.expectAllInterfaceProperties(t, n, functionType);\n        }\n    } else if (functionType.isInterface()) {\n        for (ObjectType extInterface : functionType.getExtendedInterfaces()) {\n            if (extInterface.getConstructor() !\u003d null \u0026\u0026 !extInterface.getConstructor().isInterface()) {\n                compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n            }\n        }\n        if (functionType.hasImplementedInterfaces()) {\n            compiler.report(t.makeError(n, CONFLICTING_IMPLEMENTED_TYPE, functionPrivateName));\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1422,
      "functionName": "visitFunction",
      "functionAnnotation": "",
      "functionDoc": "Visits a {@link Token#FUNCTION} node.\n\n@param t The node traversal object that supplies context, such as the\nscope chain to use in name lookups as well as error reporting.\n@param n The node being visited.\n",
      "diff": "@@ -1,35 +1,36 @@\n private void visitFunction(NodeTraversal t, Node n) {\n-    JSDocInfo info \u003d n.getJSDocInfo();\n     FunctionType functionType \u003d (FunctionType) n.getJSType();\n     String functionPrivateName \u003d n.getFirstChild().getString();\n-    if (functionType.isInterface() || functionType.isConstructor()) {\n+    if (functionType.isConstructor()) {\n         FunctionType baseConstructor \u003d functionType.getPrototype().getImplicitPrototype().getConstructor();\n-        if (baseConstructor !\u003d null \u0026\u0026 baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 (baseConstructor.isConstructor() \u0026\u0026 functionType.isInterface() || baseConstructor.isInterface() \u0026\u0026 functionType.isConstructor())) {\n+        if (baseConstructor !\u003d null \u0026\u0026 baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 (baseConstructor.isInterface() \u0026\u0026 functionType.isConstructor())) {\n             compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n-        }\n-        if (functionType.isInterface()) {\n-            if (functionType.hasImplementedInterfaces()) {\n-                compiler.report(t.makeError(n, CONFLICTING_IMPLEMENTED_TYPE, functionPrivateName));\n-            }\n         } else {\n             for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n                 boolean badImplementedType \u003d false;\n                 ObjectType baseInterfaceObj \u003d ObjectType.cast(baseInterface);\n                 if (baseInterfaceObj !\u003d null) {\n                     FunctionType interfaceConstructor \u003d baseInterfaceObj.getConstructor();\n                     if (interfaceConstructor !\u003d null \u0026\u0026 !interfaceConstructor.isInterface()) {\n                         badImplementedType \u003d true;\n                     }\n                 } else {\n                     badImplementedType \u003d true;\n                 }\n                 if (badImplementedType) {\n                     report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n                 }\n             }\n-        }\n-        if (functionType.isConstructor()) {\n             validator.expectAllInterfaceProperties(t, n, functionType);\n         }\n+    } else if (functionType.isInterface()) {\n+        for (ObjectType extInterface : functionType.getExtendedInterfaces()) {\n+            if (extInterface.getConstructor() !\u003d null \u0026\u0026 !extInterface.getConstructor().isInterface()) {\n+                compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n+            }\n+        }\n+        if (functionType.hasImplementedInterfaces()) {\n+            compiler.report(t.makeError(n, CONFLICTING_IMPLEMENTED_TYPE, functionPrivateName));\n+        }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e82290302eaf2757281651588ee43441ed6d57d6": {
      "type": "Ybodychange",
      "commitMessage": "\nAdd type check that an interface cannot implement any interfaces\n\nR\u003djohnlenz,nicksantos\nDELTA\u003d60  (42 added, 7 deleted, 11 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1507\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1024 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/19/11, 5:06 PM",
      "commitName": "e82290302eaf2757281651588ee43441ed6d57d6",
      "commitAuthor": "zhuyi@google.com",
      "commitDateOld": "4/12/11, 12:15 PM",
      "commitNameOld": "f322be0e576d5e2114cb59c0a6537197997b9c59",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 7.2,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "actualSource": "private void visitFunction(NodeTraversal t, Node n) {\n    JSDocInfo info \u003d n.getJSDocInfo();\n    FunctionType functionType \u003d (FunctionType) n.getJSType();\n    String functionPrivateName \u003d n.getFirstChild().getString();\n    if (functionType.isInterface() || functionType.isConstructor()) {\n        FunctionType baseConstructor \u003d functionType.getPrototype().getImplicitPrototype().getConstructor();\n        if (baseConstructor !\u003d null \u0026\u0026 baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 (baseConstructor.isConstructor() \u0026\u0026 functionType.isInterface() || baseConstructor.isInterface() \u0026\u0026 functionType.isConstructor())) {\n            compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n        }\n        if (functionType.isInterface()) {\n            if (functionType.hasImplementedInterfaces()) {\n                compiler.report(t.makeError(n, CONFLICTING_IMPLEMENTED_TYPE, functionPrivateName));\n            }\n        } else {\n            for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n                boolean badImplementedType \u003d false;\n                ObjectType baseInterfaceObj \u003d ObjectType.cast(baseInterface);\n                if (baseInterfaceObj !\u003d null) {\n                    FunctionType interfaceConstructor \u003d baseInterfaceObj.getConstructor();\n                    if (interfaceConstructor !\u003d null \u0026\u0026 !interfaceConstructor.isInterface()) {\n                        badImplementedType \u003d true;\n                    }\n                } else {\n                    badImplementedType \u003d true;\n                }\n                if (badImplementedType) {\n                    report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n                }\n            }\n        }\n        if (functionType.isConstructor()) {\n            validator.expectAllInterfaceProperties(t, n, functionType);\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1395,
      "functionName": "visitFunction",
      "functionAnnotation": "",
      "functionDoc": "Visits a {@link Token#FUNCTION} node.\n\n@param t The node traversal object that supplies context, such as the\nscope chain to use in name lookups as well as error reporting.\n@param n The node being visited.\n",
      "diff": "@@ -1,29 +1,35 @@\n private void visitFunction(NodeTraversal t, Node n) {\n     JSDocInfo info \u003d n.getJSDocInfo();\n     FunctionType functionType \u003d (FunctionType) n.getJSType();\n     String functionPrivateName \u003d n.getFirstChild().getString();\n     if (functionType.isInterface() || functionType.isConstructor()) {\n         FunctionType baseConstructor \u003d functionType.getPrototype().getImplicitPrototype().getConstructor();\n         if (baseConstructor !\u003d null \u0026\u0026 baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 (baseConstructor.isConstructor() \u0026\u0026 functionType.isInterface() || baseConstructor.isInterface() \u0026\u0026 functionType.isConstructor())) {\n             compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n         }\n-        for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n-            boolean badImplementedType \u003d false;\n-            ObjectType baseInterfaceObj \u003d ObjectType.cast(baseInterface);\n-            if (baseInterfaceObj !\u003d null) {\n-                FunctionType interfaceConstructor \u003d baseInterfaceObj.getConstructor();\n-                if (interfaceConstructor !\u003d null \u0026\u0026 !interfaceConstructor.isInterface()) {\n+        if (functionType.isInterface()) {\n+            if (functionType.hasImplementedInterfaces()) {\n+                compiler.report(t.makeError(n, CONFLICTING_IMPLEMENTED_TYPE, functionPrivateName));\n+            }\n+        } else {\n+            for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n+                boolean badImplementedType \u003d false;\n+                ObjectType baseInterfaceObj \u003d ObjectType.cast(baseInterface);\n+                if (baseInterfaceObj !\u003d null) {\n+                    FunctionType interfaceConstructor \u003d baseInterfaceObj.getConstructor();\n+                    if (interfaceConstructor !\u003d null \u0026\u0026 !interfaceConstructor.isInterface()) {\n+                        badImplementedType \u003d true;\n+                    }\n+                } else {\n                     badImplementedType \u003d true;\n                 }\n-            } else {\n-                badImplementedType \u003d true;\n-            }\n-            if (badImplementedType) {\n-                report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n+                if (badImplementedType) {\n+                    report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n+                }\n             }\n         }\n         if (functionType.isConstructor()) {\n             validator.expectAllInterfaceProperties(t, n, functionType);\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "09ed556367fbe81b3003881dfacad643939664c0": {
      "type": "Ybodychange",
      "commitMessage": "\nFixes issue 204\nAdd support for data members on interfaces\n\nR\u003djohnlenz,nicksantos,acleung\nDELTA\u003d211  (77 added, 125 deleted, 9 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d692\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@829 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/28/11, 8:08 AM",
      "commitName": "09ed556367fbe81b3003881dfacad643939664c0",
      "commitAuthor": "zhuyi@google.com",
      "commitDateOld": "1/27/11, 10:33 AM",
      "commitNameOld": "70f817ae4f80ac11dd2dfe97babf5896c690fb48",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 31.9,
      "commitsBetweenForRepo": 91,
      "commitsBetweenForFile": 1,
      "actualSource": "private void visitFunction(NodeTraversal t, Node n) {\n    JSDocInfo info \u003d n.getJSDocInfo();\n    FunctionType functionType \u003d (FunctionType) n.getJSType();\n    String functionPrivateName \u003d n.getFirstChild().getString();\n    if (functionType.isInterface() || functionType.isConstructor()) {\n        FunctionType baseConstructor \u003d functionType.getPrototype().getImplicitPrototype().getConstructor();\n        if (baseConstructor !\u003d null \u0026\u0026 baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 (baseConstructor.isConstructor() \u0026\u0026 functionType.isInterface() || baseConstructor.isInterface() \u0026\u0026 functionType.isConstructor())) {\n            compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n        }\n        for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n            boolean badImplementedType \u003d false;\n            ObjectType baseInterfaceObj \u003d ObjectType.cast(baseInterface);\n            if (baseInterfaceObj !\u003d null) {\n                FunctionType interfaceConstructor \u003d baseInterfaceObj.getConstructor();\n                if (interfaceConstructor !\u003d null \u0026\u0026 !interfaceConstructor.isInterface()) {\n                    badImplementedType \u003d true;\n                }\n            } else {\n                badImplementedType \u003d true;\n            }\n            if (badImplementedType) {\n                report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n            }\n        }\n        if (functionType.isConstructor()) {\n            validator.expectAllInterfaceProperties(t, n, functionType);\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1390,
      "functionName": "visitFunction",
      "functionAnnotation": "",
      "functionDoc": "Visits a {@link Token#FUNCTION} node.\n\n@param t The node traversal object that supplies context, such as the\nscope chain to use in name lookups as well as error reporting.\n@param n The node being visited.\n",
      "diff": "@@ -1,29 +1,29 @@\n private void visitFunction(NodeTraversal t, Node n) {\n     JSDocInfo info \u003d n.getJSDocInfo();\n     FunctionType functionType \u003d (FunctionType) n.getJSType();\n     String functionPrivateName \u003d n.getFirstChild().getString();\n     if (functionType.isInterface() || functionType.isConstructor()) {\n         FunctionType baseConstructor \u003d functionType.getPrototype().getImplicitPrototype().getConstructor();\n         if (baseConstructor !\u003d null \u0026\u0026 baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 (baseConstructor.isConstructor() \u0026\u0026 functionType.isInterface() || baseConstructor.isInterface() \u0026\u0026 functionType.isConstructor())) {\n             compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n         }\n         for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n             boolean badImplementedType \u003d false;\n             ObjectType baseInterfaceObj \u003d ObjectType.cast(baseInterface);\n             if (baseInterfaceObj !\u003d null) {\n                 FunctionType interfaceConstructor \u003d baseInterfaceObj.getConstructor();\n                 if (interfaceConstructor !\u003d null \u0026\u0026 !interfaceConstructor.isInterface()) {\n                     badImplementedType \u003d true;\n                 }\n             } else {\n                 badImplementedType \u003d true;\n             }\n             if (badImplementedType) {\n                 report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n             }\n         }\n         if (functionType.isConstructor()) {\n-            validator.expectAllInterfacePropertiesImplemented(functionType);\n+            validator.expectAllInterfaceProperties(t, n, functionType);\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0895c28861ee4a1969acc858f1a703ab11ddc64c": {
      "type": "Ybodychange",
      "commitMessage": "\n\nChange on 2010/06/16 by johnlenz\n\n        Remove unused member variable.\n\n        R\u003dacleung\n        DELTA\u003d17  (0 added, 12 deleted, 5 changed)\n\nChange on 2010/06/16 by acleung\n\n        Make @notypecheck behaves like it is doing typechecking except for reporting errors.\n\n        R\u003djohnlenz\n        DELTA\u003d144  (89 added, 17 deleted, 38 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d28012\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@245 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/17/10, 10:16 AM",
      "commitName": "0895c28861ee4a1969acc858f1a703ab11ddc64c",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "5/3/10, 7:03 AM",
      "commitNameOld": "9147da9979fb00599efd700fa5e0cccfa93d25a5",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 45.13,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "actualSource": "private void visitFunction(NodeTraversal t, Node n) {\n    JSDocInfo info \u003d n.getJSDocInfo();\n    FunctionType functionType \u003d (FunctionType) n.getJSType();\n    String functionPrivateName \u003d n.getFirstChild().getString();\n    if (functionType.isInterface() || functionType.isConstructor()) {\n        FunctionType baseConstructor \u003d functionType.getPrototype().getImplicitPrototype().getConstructor();\n        if (baseConstructor !\u003d null \u0026\u0026 baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 (baseConstructor.isConstructor() \u0026\u0026 functionType.isInterface() || baseConstructor.isInterface() \u0026\u0026 functionType.isConstructor())) {\n            compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n        }\n        for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n            boolean badImplementedType \u003d false;\n            ObjectType baseInterfaceObj \u003d ObjectType.cast(baseInterface);\n            if (baseInterfaceObj !\u003d null) {\n                FunctionType interfaceConstructor \u003d baseInterfaceObj.getConstructor();\n                if (interfaceConstructor !\u003d null \u0026\u0026 !interfaceConstructor.isInterface()) {\n                    badImplementedType \u003d true;\n                }\n            } else {\n                badImplementedType \u003d true;\n            }\n            if (badImplementedType) {\n                report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n            }\n        }\n        if (functionType.isConstructor()) {\n            validator.expectAllInterfacePropertiesImplemented(functionType);\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1302,
      "functionName": "visitFunction",
      "functionAnnotation": "",
      "functionDoc": "Visits a {@link Token#FUNCTION} node.\n\n@param t The node traversal object that supplies context, such as the\nscope chain to use in name lookups as well as error reporting.\n@param n The node being visited.\n",
      "diff": "@@ -1,29 +1,29 @@\n private void visitFunction(NodeTraversal t, Node n) {\n     JSDocInfo info \u003d n.getJSDocInfo();\n     FunctionType functionType \u003d (FunctionType) n.getJSType();\n     String functionPrivateName \u003d n.getFirstChild().getString();\n     if (functionType.isInterface() || functionType.isConstructor()) {\n         FunctionType baseConstructor \u003d functionType.getPrototype().getImplicitPrototype().getConstructor();\n         if (baseConstructor !\u003d null \u0026\u0026 baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 (baseConstructor.isConstructor() \u0026\u0026 functionType.isInterface() || baseConstructor.isInterface() \u0026\u0026 functionType.isConstructor())) {\n             compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n         }\n         for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n             boolean badImplementedType \u003d false;\n             ObjectType baseInterfaceObj \u003d ObjectType.cast(baseInterface);\n             if (baseInterfaceObj !\u003d null) {\n                 FunctionType interfaceConstructor \u003d baseInterfaceObj.getConstructor();\n                 if (interfaceConstructor !\u003d null \u0026\u0026 !interfaceConstructor.isInterface()) {\n                     badImplementedType \u003d true;\n                 }\n             } else {\n                 badImplementedType \u003d true;\n             }\n             if (badImplementedType) {\n-                t.report(n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n+                report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n             }\n         }\n         if (functionType.isConstructor()) {\n             validator.expectAllInterfacePropertiesImplemented(functionType);\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4": {
      "type": "Ybodychange",
      "commitMessage": "Remove circular dependency between error-reporting and the rest\nof the compiler. (Nick)\nR\u003dalan\nDELTA\u003d152  (27 added, 28 deleted, 97 changed)\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@159 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/29/10, 7:04 AM",
      "commitName": "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "3/11/10, 9:31 PM",
      "commitNameOld": "7bfdbd9164601af44d17edd51be829fde2cc51aa",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 17.36,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "actualSource": "private void visitFunction(NodeTraversal t, Node n) {\n    JSDocInfo info \u003d n.getJSDocInfo();\n    FunctionType functionType \u003d (FunctionType) n.getJSType();\n    String functionPrivateName \u003d n.getFirstChild().getString();\n    if (functionType.isInterface() || functionType.isConstructor()) {\n        FunctionType baseConstructor \u003d functionType.getPrototype().getImplicitPrototype().getConstructor();\n        if (baseConstructor !\u003d null \u0026\u0026 baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 (baseConstructor.isConstructor() \u0026\u0026 functionType.isInterface() || baseConstructor.isInterface() \u0026\u0026 functionType.isConstructor())) {\n            compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n        }\n        for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n            boolean badImplementedType \u003d false;\n            ObjectType baseInterfaceObj \u003d ObjectType.cast(baseInterface);\n            if (baseInterfaceObj !\u003d null) {\n                FunctionType interfaceConstructor \u003d baseInterfaceObj.getConstructor();\n                if (interfaceConstructor !\u003d null \u0026\u0026 !interfaceConstructor.isInterface()) {\n                    badImplementedType \u003d true;\n                }\n            } else {\n                badImplementedType \u003d true;\n            }\n            if (badImplementedType) {\n                t.report(n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n            }\n        }\n        if (functionType.isConstructor()) {\n            validator.expectAllInterfacePropertiesImplemented(functionType);\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1320,
      "functionName": "visitFunction",
      "functionAnnotation": "",
      "functionDoc": "Visits a {@link Token#FUNCTION} node.\n\n@param t The node traversal object that supplies context, such as the\nscope chain to use in name lookups as well as error reporting.\n@param n The node being visited.\n",
      "diff": "@@ -1,29 +1,29 @@\n private void visitFunction(NodeTraversal t, Node n) {\n     JSDocInfo info \u003d n.getJSDocInfo();\n     FunctionType functionType \u003d (FunctionType) n.getJSType();\n     String functionPrivateName \u003d n.getFirstChild().getString();\n     if (functionType.isInterface() || functionType.isConstructor()) {\n         FunctionType baseConstructor \u003d functionType.getPrototype().getImplicitPrototype().getConstructor();\n         if (baseConstructor !\u003d null \u0026\u0026 baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 (baseConstructor.isConstructor() \u0026\u0026 functionType.isInterface() || baseConstructor.isInterface() \u0026\u0026 functionType.isConstructor())) {\n-            compiler.report(JSError.make(t, n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n+            compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n         }\n         for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n             boolean badImplementedType \u003d false;\n             ObjectType baseInterfaceObj \u003d ObjectType.cast(baseInterface);\n             if (baseInterfaceObj !\u003d null) {\n                 FunctionType interfaceConstructor \u003d baseInterfaceObj.getConstructor();\n                 if (interfaceConstructor !\u003d null \u0026\u0026 !interfaceConstructor.isInterface()) {\n                     badImplementedType \u003d true;\n                 }\n             } else {\n                 badImplementedType \u003d true;\n             }\n             if (badImplementedType) {\n                 t.report(n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n             }\n         }\n         if (functionType.isConstructor()) {\n             validator.expectAllInterfacePropertiesImplemented(functionType);\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a2d8936fae3eb0e3873c7f7c0233344c81436404": {
      "type": "Ybodychange",
      "commitMessage": "Add warnings for functions that are ambiguously defined on different\nbrowsers.\n\nAdd better support for Caja.\n\nRollback the change to CoalesceVariableNames, because it had problems.\n\nInternal type system refactoring.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@33 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/15/09, 1:52 PM",
      "commitName": "a2d8936fae3eb0e3873c7f7c0233344c81436404",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/25/09, 6:53 AM",
      "commitNameOld": "3bee5d740c96572faea4b9fb8b632e0e07b13cbb",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 20.29,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "private void visitFunction(NodeTraversal t, Node n) {\n    JSDocInfo info \u003d n.getJSDocInfo();\n    FunctionType functionType \u003d (FunctionType) n.getJSType();\n    String functionPrivateName \u003d n.getFirstChild().getString();\n    if (functionType.isInterface() || functionType.isConstructor()) {\n        FunctionType baseConstructor \u003d functionType.getPrototype().getImplicitPrototype().getConstructor();\n        if (baseConstructor !\u003d null \u0026\u0026 baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 (baseConstructor.isConstructor() \u0026\u0026 functionType.isInterface() || baseConstructor.isInterface() \u0026\u0026 functionType.isConstructor())) {\n            compiler.report(JSError.make(t, n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n        }\n        for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n            boolean badImplementedType \u003d false;\n            ObjectType baseInterfaceObj \u003d ObjectType.cast(baseInterface);\n            if (baseInterfaceObj !\u003d null) {\n                FunctionType interfaceConstructor \u003d baseInterfaceObj.getConstructor();\n                if (interfaceConstructor !\u003d null \u0026\u0026 !interfaceConstructor.isInterface()) {\n                    badImplementedType \u003d true;\n                }\n            } else {\n                badImplementedType \u003d true;\n            }\n            if (badImplementedType) {\n                t.report(n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n            }\n        }\n        if (functionType.isConstructor()) {\n            validator.expectAllInterfacePropertiesImplemented(functionType);\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1289,
      "functionName": "visitFunction",
      "functionAnnotation": "",
      "functionDoc": "Visits a {@link Token#FUNCTION} node.\n\n@param t The node traversal object that supplies context, such as the\nscope chain to use in name lookups as well as error reporting.\n@param n The node being visited.\n",
      "diff": "@@ -1,28 +1,29 @@\n private void visitFunction(NodeTraversal t, Node n) {\n     JSDocInfo info \u003d n.getJSDocInfo();\n     FunctionType functionType \u003d (FunctionType) n.getJSType();\n     String functionPrivateName \u003d n.getFirstChild().getString();\n     if (functionType.isInterface() || functionType.isConstructor()) {\n         FunctionType baseConstructor \u003d functionType.getPrototype().getImplicitPrototype().getConstructor();\n         if (baseConstructor !\u003d null \u0026\u0026 baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 (baseConstructor.isConstructor() \u0026\u0026 functionType.isInterface() || baseConstructor.isInterface() \u0026\u0026 functionType.isConstructor())) {\n             compiler.report(JSError.make(t, n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n         }\n         for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n             boolean badImplementedType \u003d false;\n-            if (baseInterface instanceof ObjectType) {\n-                FunctionType interfaceConstructor \u003d ((ObjectType) baseInterface).getConstructor();\n+            ObjectType baseInterfaceObj \u003d ObjectType.cast(baseInterface);\n+            if (baseInterfaceObj !\u003d null) {\n+                FunctionType interfaceConstructor \u003d baseInterfaceObj.getConstructor();\n                 if (interfaceConstructor !\u003d null \u0026\u0026 !interfaceConstructor.isInterface()) {\n                     badImplementedType \u003d true;\n                 }\n             } else {\n                 badImplementedType \u003d true;\n             }\n             if (badImplementedType) {\n                 t.report(n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n             }\n         }\n         if (functionType.isConstructor()) {\n             validator.expectAllInterfacePropertiesImplemented(functionType);\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,28 @@\n+private void visitFunction(NodeTraversal t, Node n) {\n+    JSDocInfo info \u003d n.getJSDocInfo();\n+    FunctionType functionType \u003d (FunctionType) n.getJSType();\n+    String functionPrivateName \u003d n.getFirstChild().getString();\n+    if (functionType.isInterface() || functionType.isConstructor()) {\n+        FunctionType baseConstructor \u003d functionType.getPrototype().getImplicitPrototype().getConstructor();\n+        if (baseConstructor !\u003d null \u0026\u0026 baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 (baseConstructor.isConstructor() \u0026\u0026 functionType.isInterface() || baseConstructor.isInterface() \u0026\u0026 functionType.isConstructor())) {\n+            compiler.report(JSError.make(t, n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n+        }\n+        for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n+            boolean badImplementedType \u003d false;\n+            if (baseInterface instanceof ObjectType) {\n+                FunctionType interfaceConstructor \u003d ((ObjectType) baseInterface).getConstructor();\n+                if (interfaceConstructor !\u003d null \u0026\u0026 !interfaceConstructor.isInterface()) {\n+                    badImplementedType \u003d true;\n+                }\n+            } else {\n+                badImplementedType \u003d true;\n+            }\n+            if (badImplementedType) {\n+                t.report(n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n+            }\n+        }\n+        if (functionType.isConstructor()) {\n+            validator.expectAllInterfacePropertiesImplemented(functionType);\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void visitFunction(NodeTraversal t, Node n) {\n    JSDocInfo info \u003d n.getJSDocInfo();\n    FunctionType functionType \u003d (FunctionType) n.getJSType();\n    String functionPrivateName \u003d n.getFirstChild().getString();\n    if (functionType.isInterface() || functionType.isConstructor()) {\n        FunctionType baseConstructor \u003d functionType.getPrototype().getImplicitPrototype().getConstructor();\n        if (baseConstructor !\u003d null \u0026\u0026 baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 (baseConstructor.isConstructor() \u0026\u0026 functionType.isInterface() || baseConstructor.isInterface() \u0026\u0026 functionType.isConstructor())) {\n            compiler.report(JSError.make(t, n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n        }\n        for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n            boolean badImplementedType \u003d false;\n            if (baseInterface instanceof ObjectType) {\n                FunctionType interfaceConstructor \u003d ((ObjectType) baseInterface).getConstructor();\n                if (interfaceConstructor !\u003d null \u0026\u0026 !interfaceConstructor.isInterface()) {\n                    badImplementedType \u003d true;\n                }\n            } else {\n                badImplementedType \u003d true;\n            }\n            if (badImplementedType) {\n                t.report(n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n            }\n        }\n        if (functionType.isConstructor()) {\n            validator.expectAllInterfacePropertiesImplemented(functionType);\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1290,
      "functionName": "visitFunction",
      "functionAnnotation": "",
      "functionDoc": "Visits a {@link Token#FUNCTION} node.\n\n@param t The node traversal object that supplies context, such as the\nscope chain to use in name lookups as well as error reporting.\n@param n The node being visited.\n"
    }
  }
}