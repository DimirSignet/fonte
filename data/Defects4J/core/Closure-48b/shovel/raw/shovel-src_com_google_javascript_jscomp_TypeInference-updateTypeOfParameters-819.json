{
  "origin": "codeshovel",
  "repositoryName": "Closure-48b",
  "repositoryPath": "/tmp/Closure-48b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TypeInference.java",
  "functionName": "updateTypeOfParameters",
  "functionId": "updateTypeOfParameters___n-Node__fnType-FunctionType",
  "sourceFilePath": "src/com/google/javascript/jscomp/TypeInference.java",
  "functionAnnotation": "",
  "functionDoc": "For functions with function parameters, type inference will set the type of\na function literal argument from the function parameter type.\n",
  "functionStartLine": 819,
  "functionEndLine": 844,
  "numCommitsSeen": 109,
  "timeTaken": 4646,
  "changeHistory": [
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
    "bd9c7b620384fe5a98772729001ed56304459bc6",
    "01d1238a2a577d8988a72c29304a3283ca05a29a",
    "fc0798047ad3aac58a54ea65f9f1c8857745419f",
    "643bd6436989e7a957ccefeed8ea5ecc8e84a748",
    "c722073c9544792e02d8a101ae317869430180a5",
    "45e90a3d390335fe246b8d3f1868a74e1663b607",
    "52666da81761e9652993fd8e7e375ad456408419",
    "3c4504a78a84e4715439cddb4028c25be2ce308f",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c": "Ybodychange",
    "bd9c7b620384fe5a98772729001ed56304459bc6": "Ybodychange",
    "01d1238a2a577d8988a72c29304a3283ca05a29a": "Ybodychange",
    "fc0798047ad3aac58a54ea65f9f1c8857745419f": "Ybodychange",
    "643bd6436989e7a957ccefeed8ea5ecc8e84a748": "Ymultichange(Yrename,Ybodychange)",
    "c722073c9544792e02d8a101ae317869430180a5": "Ybodychange",
    "45e90a3d390335fe246b8d3f1868a74e1663b607": "Ybodychange",
    "52666da81761e9652993fd8e7e375ad456408419": "Ybodychange",
    "3c4504a78a84e4715439cddb4028c25be2ce308f": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c": {
      "type": "Ybodychange",
      "commitMessage": "\nReplace the bulk of the Node.getType() \u003d\u003d Token.XXX calls with\nNode.isXXX calls.\n\nR\u003dnicksantos\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3677\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1582 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/10/11, 8:36 AM",
      "commitName": "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/7/11, 2:21 PM",
      "commitNameOld": "6641663fa9970c4d7bcdd96a6f31b83b18c3ee3d",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 2.76,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "actualSource": "private void updateTypeOfParameters(Node n, FunctionType fnType) {\n    int i \u003d 0;\n    int childCount \u003d n.getChildCount();\n    for (Node iParameter : fnType.getParameters()) {\n        if (i + 1 \u003e\u003d childCount) {\n            return;\n        }\n        JSType iParameterType \u003d getJSType(iParameter);\n        Node iArgument \u003d n.getChildAtIndex(i + 1);\n        JSType iArgumentType \u003d getJSType(iArgument);\n        inferPropertyTypesToMatchConstraint(iArgumentType, iParameterType);\n        if (iParameterType.isFunctionType()) {\n            FunctionType iParameterFnType \u003d iParameterType.toMaybeFunctionType();\n            if (iArgument.isFunction() \u0026\u0026 iArgumentType.isFunctionType() \u0026\u0026 iArgument.getJSDocInfo() \u003d\u003d null) {\n                iArgument.setJSType(iParameterFnType);\n            }\n        }\n        i++;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 819,
      "functionName": "updateTypeOfParameters",
      "functionAnnotation": "",
      "functionDoc": "For functions with function parameters, type inference will set the type of\na function literal argument from the function parameter type.\n",
      "diff": "@@ -1,20 +1,20 @@\n private void updateTypeOfParameters(Node n, FunctionType fnType) {\n     int i \u003d 0;\n     int childCount \u003d n.getChildCount();\n     for (Node iParameter : fnType.getParameters()) {\n         if (i + 1 \u003e\u003d childCount) {\n             return;\n         }\n         JSType iParameterType \u003d getJSType(iParameter);\n         Node iArgument \u003d n.getChildAtIndex(i + 1);\n         JSType iArgumentType \u003d getJSType(iArgument);\n         inferPropertyTypesToMatchConstraint(iArgumentType, iParameterType);\n         if (iParameterType.isFunctionType()) {\n             FunctionType iParameterFnType \u003d iParameterType.toMaybeFunctionType();\n-            if (iArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 iArgumentType.isFunctionType() \u0026\u0026 iArgument.getJSDocInfo() \u003d\u003d null) {\n+            if (iArgument.isFunction() \u0026\u0026 iArgumentType.isFunctionType() \u0026\u0026 iArgument.getJSDocInfo() \u003d\u003d null) {\n                 iArgument.setJSType(iParameterFnType);\n             }\n         }\n         i++;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bd9c7b620384fe5a98772729001ed56304459bc6": {
      "type": "Ybodychange",
      "commitMessage": "\nAdd toMaybeFunctionType/toMaybeEnumElementType.\ntry #2. the bugs in jstestc were fixed. this cl is exactly\nthe same as the original\n\nR\u003djohnlenz\nDELTA\u003d317  (79 added, 47 deleted, 191 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3078\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1367 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/18/11, 3:46 PM",
      "commitName": "bd9c7b620384fe5a98772729001ed56304459bc6",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "8/18/11, 10:40 AM",
      "commitNameOld": "01d1238a2a577d8988a72c29304a3283ca05a29a",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.21,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private void updateTypeOfParameters(Node n, FunctionType fnType) {\n    int i \u003d 0;\n    int childCount \u003d n.getChildCount();\n    for (Node iParameter : fnType.getParameters()) {\n        if (i + 1 \u003e\u003d childCount) {\n            return;\n        }\n        JSType iParameterType \u003d getJSType(iParameter);\n        Node iArgument \u003d n.getChildAtIndex(i + 1);\n        JSType iArgumentType \u003d getJSType(iArgument);\n        inferPropertyTypesToMatchConstraint(iArgumentType, iParameterType);\n        if (iParameterType.isFunctionType()) {\n            FunctionType iParameterFnType \u003d iParameterType.toMaybeFunctionType();\n            if (iArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 iArgumentType.isFunctionType() \u0026\u0026 iArgument.getJSDocInfo() \u003d\u003d null) {\n                iArgument.setJSType(iParameterFnType);\n            }\n        }\n        i++;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 875,
      "functionName": "updateTypeOfParameters",
      "functionAnnotation": "",
      "functionDoc": "For functions with function parameters, type inference will set the type of\na function literal argument from the function parameter type.\n",
      "diff": "@@ -1,20 +1,20 @@\n private void updateTypeOfParameters(Node n, FunctionType fnType) {\n     int i \u003d 0;\n     int childCount \u003d n.getChildCount();\n     for (Node iParameter : fnType.getParameters()) {\n         if (i + 1 \u003e\u003d childCount) {\n             return;\n         }\n-        JSType iParameterType \u003d iParameter.getJSType();\n+        JSType iParameterType \u003d getJSType(iParameter);\n         Node iArgument \u003d n.getChildAtIndex(i + 1);\n         JSType iArgumentType \u003d getJSType(iArgument);\n         inferPropertyTypesToMatchConstraint(iArgumentType, iParameterType);\n-        if (iParameterType instanceof FunctionType) {\n-            FunctionType iParameterFnType \u003d (FunctionType) iParameterType;\n-            if (iArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 iArgumentType instanceof FunctionType \u0026\u0026 iArgument.getJSDocInfo() \u003d\u003d null) {\n+        if (iParameterType.isFunctionType()) {\n+            FunctionType iParameterFnType \u003d iParameterType.toMaybeFunctionType();\n+            if (iArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 iArgumentType.isFunctionType() \u0026\u0026 iArgument.getJSDocInfo() \u003d\u003d null) {\n                 iArgument.setJSType(iParameterFnType);\n             }\n         }\n         i++;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "01d1238a2a577d8988a72c29304a3283ca05a29a": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nbroke some tests\n\n*** Original change description ***\n\nAdd toMaybeFunctionType/toMaybeEnumElementType.\nwow, nullability is annoying!\n\nDELTA\u003d318  (48 added, 79 deleted, 191 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3075\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1364 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/18/11, 10:40 AM",
      "commitName": "01d1238a2a577d8988a72c29304a3283ca05a29a",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "8/18/11, 9:38 AM",
      "commitNameOld": "fc0798047ad3aac58a54ea65f9f1c8857745419f",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void updateTypeOfParameters(Node n, FunctionType fnType) {\n    int i \u003d 0;\n    int childCount \u003d n.getChildCount();\n    for (Node iParameter : fnType.getParameters()) {\n        if (i + 1 \u003e\u003d childCount) {\n            return;\n        }\n        JSType iParameterType \u003d iParameter.getJSType();\n        Node iArgument \u003d n.getChildAtIndex(i + 1);\n        JSType iArgumentType \u003d getJSType(iArgument);\n        inferPropertyTypesToMatchConstraint(iArgumentType, iParameterType);\n        if (iParameterType instanceof FunctionType) {\n            FunctionType iParameterFnType \u003d (FunctionType) iParameterType;\n            if (iArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 iArgumentType instanceof FunctionType \u0026\u0026 iArgument.getJSDocInfo() \u003d\u003d null) {\n                iArgument.setJSType(iParameterFnType);\n            }\n        }\n        i++;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 875,
      "functionName": "updateTypeOfParameters",
      "functionAnnotation": "",
      "functionDoc": "For functions with function parameters, type inference will set the type of\na function literal argument from the function parameter type.\n",
      "diff": "@@ -1,20 +1,20 @@\n private void updateTypeOfParameters(Node n, FunctionType fnType) {\n     int i \u003d 0;\n     int childCount \u003d n.getChildCount();\n     for (Node iParameter : fnType.getParameters()) {\n         if (i + 1 \u003e\u003d childCount) {\n             return;\n         }\n-        JSType iParameterType \u003d getJSType(iParameter);\n+        JSType iParameterType \u003d iParameter.getJSType();\n         Node iArgument \u003d n.getChildAtIndex(i + 1);\n         JSType iArgumentType \u003d getJSType(iArgument);\n         inferPropertyTypesToMatchConstraint(iArgumentType, iParameterType);\n-        if (iParameterType.isFunctionType()) {\n-            FunctionType iParameterFnType \u003d iParameterType.toMaybeFunctionType();\n-            if (iArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 iArgumentType.isFunctionType() \u0026\u0026 iArgument.getJSDocInfo() \u003d\u003d null) {\n+        if (iParameterType instanceof FunctionType) {\n+            FunctionType iParameterFnType \u003d (FunctionType) iParameterType;\n+            if (iArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 iArgumentType instanceof FunctionType \u0026\u0026 iArgument.getJSDocInfo() \u003d\u003d null) {\n                 iArgument.setJSType(iParameterFnType);\n             }\n         }\n         i++;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "fc0798047ad3aac58a54ea65f9f1c8857745419f": {
      "type": "Ybodychange",
      "commitMessage": "\nAdd toMaybeFunctionType/toMaybeEnumElementType.\nwow, nullability is annoying!\n\nR\u003djohnlenz\nDELTA\u003d318  (79 added, 48 deleted, 191 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3074\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1363 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/18/11, 9:38 AM",
      "commitName": "fc0798047ad3aac58a54ea65f9f1c8857745419f",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "8/17/11, 11:43 AM",
      "commitNameOld": "5ac633a4e4471847da5aa22bb1fcf28727eb7fe9",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.91,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void updateTypeOfParameters(Node n, FunctionType fnType) {\n    int i \u003d 0;\n    int childCount \u003d n.getChildCount();\n    for (Node iParameter : fnType.getParameters()) {\n        if (i + 1 \u003e\u003d childCount) {\n            return;\n        }\n        JSType iParameterType \u003d getJSType(iParameter);\n        Node iArgument \u003d n.getChildAtIndex(i + 1);\n        JSType iArgumentType \u003d getJSType(iArgument);\n        inferPropertyTypesToMatchConstraint(iArgumentType, iParameterType);\n        if (iParameterType.isFunctionType()) {\n            FunctionType iParameterFnType \u003d iParameterType.toMaybeFunctionType();\n            if (iArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 iArgumentType.isFunctionType() \u0026\u0026 iArgument.getJSDocInfo() \u003d\u003d null) {\n                iArgument.setJSType(iParameterFnType);\n            }\n        }\n        i++;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 875,
      "functionName": "updateTypeOfParameters",
      "functionAnnotation": "",
      "functionDoc": "For functions with function parameters, type inference will set the type of\na function literal argument from the function parameter type.\n",
      "diff": "@@ -1,20 +1,20 @@\n private void updateTypeOfParameters(Node n, FunctionType fnType) {\n     int i \u003d 0;\n     int childCount \u003d n.getChildCount();\n     for (Node iParameter : fnType.getParameters()) {\n         if (i + 1 \u003e\u003d childCount) {\n             return;\n         }\n-        JSType iParameterType \u003d iParameter.getJSType();\n+        JSType iParameterType \u003d getJSType(iParameter);\n         Node iArgument \u003d n.getChildAtIndex(i + 1);\n         JSType iArgumentType \u003d getJSType(iArgument);\n         inferPropertyTypesToMatchConstraint(iArgumentType, iParameterType);\n-        if (iParameterType instanceof FunctionType) {\n-            FunctionType iParameterFnType \u003d (FunctionType) iParameterType;\n-            if (iArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 iArgumentType instanceof FunctionType \u0026\u0026 iArgument.getJSDocInfo() \u003d\u003d null) {\n+        if (iParameterType.isFunctionType()) {\n+            FunctionType iParameterFnType \u003d iParameterType.toMaybeFunctionType();\n+            if (iArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 iArgumentType.isFunctionType() \u0026\u0026 iArgument.getJSDocInfo() \u003d\u003d null) {\n                 iArgument.setJSType(iParameterFnType);\n             }\n         }\n         i++;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "643bd6436989e7a957ccefeed8ea5ecc8e84a748": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "\nInfer properties of anonymous objects\n\nR\u003dzhuyi\nDELTA\u003d106  (98 added, 6 deleted, 2 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1996\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1125 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/23/11, 8:37 AM",
      "commitName": "643bd6436989e7a957ccefeed8ea5ecc8e84a748",
      "commitAuthor": "nicksantos@google.com",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "\nInfer properties of anonymous objects\n\nR\u003dzhuyi\nDELTA\u003d106  (98 added, 6 deleted, 2 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1996\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1125 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "5/23/11, 8:37 AM",
          "commitName": "643bd6436989e7a957ccefeed8ea5ecc8e84a748",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "5/9/11, 4:32 PM",
          "commitNameOld": "de306603cfe39c64672539af78bb74a10439e1b3",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 13.67,
          "commitsBetweenForRepo": 53,
          "commitsBetweenForFile": 1,
          "actualSource": "private void updateTypeOfParameters(Node n, FunctionType fnType) {\n    int i \u003d 0;\n    int childCount \u003d n.getChildCount();\n    for (Node iParameter : fnType.getParameters()) {\n        if (i + 1 \u003e\u003d childCount) {\n            return;\n        }\n        JSType iParameterType \u003d iParameter.getJSType();\n        Node iArgument \u003d n.getChildAtIndex(i + 1);\n        JSType iArgumentType \u003d getJSType(iArgument);\n        inferPropertyTypesToMatchConstraint(iArgumentType, iParameterType);\n        if (iParameterType instanceof FunctionType) {\n            FunctionType iParameterFnType \u003d (FunctionType) iParameterType;\n            if (iArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 iArgumentType instanceof FunctionType \u0026\u0026 iArgument.getJSDocInfo() \u003d\u003d null) {\n                iArgument.setJSType(iParameterFnType);\n            }\n        }\n        i++;\n    }\n}",
          "path": "src/com/google/javascript/jscomp/TypeInference.java",
          "functionStartLine": 867,
          "functionName": "updateTypeOfParameters",
          "functionAnnotation": "",
          "functionDoc": "For functions with function parameters, type inference will set the type of\na function literal argument from the function parameter type.\n",
          "diff": "@@ -1,19 +1,20 @@\n-private void updateTypeOfParametersOnClosure(Node n, FunctionType fnType) {\n+private void updateTypeOfParameters(Node n, FunctionType fnType) {\n     int i \u003d 0;\n     int childCount \u003d n.getChildCount();\n     for (Node iParameter : fnType.getParameters()) {\n+        if (i + 1 \u003e\u003d childCount) {\n+            return;\n+        }\n         JSType iParameterType \u003d iParameter.getJSType();\n+        Node iArgument \u003d n.getChildAtIndex(i + 1);\n+        JSType iArgumentType \u003d getJSType(iArgument);\n+        inferPropertyTypesToMatchConstraint(iArgumentType, iParameterType);\n         if (iParameterType instanceof FunctionType) {\n             FunctionType iParameterFnType \u003d (FunctionType) iParameterType;\n-            if (i + 1 \u003e\u003d childCount) {\n-                return;\n-            }\n-            Node iArgument \u003d n.getChildAtIndex(i + 1);\n-            JSType iArgumentType \u003d getJSType(iArgument);\n             if (iArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 iArgumentType instanceof FunctionType \u0026\u0026 iArgument.getJSDocInfo() \u003d\u003d null) {\n                 iArgument.setJSType(iParameterFnType);\n             }\n         }\n         i++;\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "updateTypeOfParametersOnClosure",
            "newValue": "updateTypeOfParameters"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nInfer properties of anonymous objects\n\nR\u003dzhuyi\nDELTA\u003d106  (98 added, 6 deleted, 2 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1996\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1125 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "5/23/11, 8:37 AM",
          "commitName": "643bd6436989e7a957ccefeed8ea5ecc8e84a748",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "5/9/11, 4:32 PM",
          "commitNameOld": "de306603cfe39c64672539af78bb74a10439e1b3",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 13.67,
          "commitsBetweenForRepo": 53,
          "commitsBetweenForFile": 1,
          "actualSource": "private void updateTypeOfParameters(Node n, FunctionType fnType) {\n    int i \u003d 0;\n    int childCount \u003d n.getChildCount();\n    for (Node iParameter : fnType.getParameters()) {\n        if (i + 1 \u003e\u003d childCount) {\n            return;\n        }\n        JSType iParameterType \u003d iParameter.getJSType();\n        Node iArgument \u003d n.getChildAtIndex(i + 1);\n        JSType iArgumentType \u003d getJSType(iArgument);\n        inferPropertyTypesToMatchConstraint(iArgumentType, iParameterType);\n        if (iParameterType instanceof FunctionType) {\n            FunctionType iParameterFnType \u003d (FunctionType) iParameterType;\n            if (iArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 iArgumentType instanceof FunctionType \u0026\u0026 iArgument.getJSDocInfo() \u003d\u003d null) {\n                iArgument.setJSType(iParameterFnType);\n            }\n        }\n        i++;\n    }\n}",
          "path": "src/com/google/javascript/jscomp/TypeInference.java",
          "functionStartLine": 867,
          "functionName": "updateTypeOfParameters",
          "functionAnnotation": "",
          "functionDoc": "For functions with function parameters, type inference will set the type of\na function literal argument from the function parameter type.\n",
          "diff": "@@ -1,19 +1,20 @@\n-private void updateTypeOfParametersOnClosure(Node n, FunctionType fnType) {\n+private void updateTypeOfParameters(Node n, FunctionType fnType) {\n     int i \u003d 0;\n     int childCount \u003d n.getChildCount();\n     for (Node iParameter : fnType.getParameters()) {\n+        if (i + 1 \u003e\u003d childCount) {\n+            return;\n+        }\n         JSType iParameterType \u003d iParameter.getJSType();\n+        Node iArgument \u003d n.getChildAtIndex(i + 1);\n+        JSType iArgumentType \u003d getJSType(iArgument);\n+        inferPropertyTypesToMatchConstraint(iArgumentType, iParameterType);\n         if (iParameterType instanceof FunctionType) {\n             FunctionType iParameterFnType \u003d (FunctionType) iParameterType;\n-            if (i + 1 \u003e\u003d childCount) {\n-                return;\n-            }\n-            Node iArgument \u003d n.getChildAtIndex(i + 1);\n-            JSType iArgumentType \u003d getJSType(iArgument);\n             if (iArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 iArgumentType instanceof FunctionType \u0026\u0026 iArgument.getJSDocInfo() \u003d\u003d null) {\n                 iArgument.setJSType(iParameterFnType);\n             }\n         }\n         i++;\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "c722073c9544792e02d8a101ae317869430180a5": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nfixed the new warnings.\n\n*** Original change description ***\n\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nbreaks builds\n\n*** Original change description ***\n\nFix TypeInference#updateTypeOfParametersOnClosure.\n\nUse call site for warning source instead of function definition.\n\nR\u003djohnlenz\nDELTA\u003d31  (28 added, 1 deleted, 2 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1029002\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@527 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/29/10, 3:12 PM",
      "commitName": "c722073c9544792e02d8a101ae317869430180a5",
      "commitAuthor": "mgoodman@google.com",
      "commitDateOld": "10/29/10, 12:46 PM",
      "commitNameOld": "45e90a3d390335fe246b8d3f1868a74e1663b607",
      "commitAuthorOld": "mgoodman@google.com",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "private void updateTypeOfParametersOnClosure(Node n, FunctionType fnType) {\n    int i \u003d 0;\n    int childCount \u003d n.getChildCount();\n    for (Node iParameter : fnType.getParameters()) {\n        JSType iParameterType \u003d iParameter.getJSType();\n        if (iParameterType instanceof FunctionType) {\n            FunctionType iParameterFnType \u003d (FunctionType) iParameterType;\n            if (i + 1 \u003e\u003d childCount) {\n                return;\n            }\n            Node iArgument \u003d n.getChildAtIndex(i + 1);\n            JSType iArgumentType \u003d getJSType(iArgument);\n            if (iArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 iArgumentType instanceof FunctionType \u0026\u0026 iArgument.getJSDocInfo() \u003d\u003d null) {\n                iArgument.setJSType(iParameterFnType);\n            }\n        }\n        i++;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 841,
      "functionName": "updateTypeOfParametersOnClosure",
      "functionAnnotation": "",
      "functionDoc": "For functions with function parameters, type inference will set the type of\na function literal argument from the function parameter type.\n",
      "diff": "@@ -1,19 +1,19 @@\n private void updateTypeOfParametersOnClosure(Node n, FunctionType fnType) {\n     int i \u003d 0;\n     int childCount \u003d n.getChildCount();\n     for (Node iParameter : fnType.getParameters()) {\n         JSType iParameterType \u003d iParameter.getJSType();\n         if (iParameterType instanceof FunctionType) {\n             FunctionType iParameterFnType \u003d (FunctionType) iParameterType;\n             if (i + 1 \u003e\u003d childCount) {\n                 return;\n             }\n             Node iArgument \u003d n.getChildAtIndex(i + 1);\n             JSType iArgumentType \u003d getJSType(iArgument);\n-            if (iArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 iArgumentType instanceof FunctionType \u0026\u0026 iArgumentType.getJSDocInfo() \u003d\u003d null) {\n+            if (iArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 iArgumentType instanceof FunctionType \u0026\u0026 iArgument.getJSDocInfo() \u003d\u003d null) {\n                 iArgument.setJSType(iParameterFnType);\n             }\n         }\n         i++;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "45e90a3d390335fe246b8d3f1868a74e1663b607": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nbreaks builds\n\n*** Original change description ***\n\nFix TypeInference#updateTypeOfParametersOnClosure.\n\nUse call site for warning source instead of function definition.\n\nR\u003djohnlenz\nDELTA\u003d31  (1 added, 28 deleted, 2 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d869001\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@525 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/29/10, 12:46 PM",
      "commitName": "45e90a3d390335fe246b8d3f1868a74e1663b607",
      "commitAuthor": "mgoodman@google.com",
      "commitDateOld": "10/29/10, 11:07 AM",
      "commitNameOld": "52666da81761e9652993fd8e7e375ad456408419",
      "commitAuthorOld": "mgoodman@google.com",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private void updateTypeOfParametersOnClosure(Node n, FunctionType fnType) {\n    int i \u003d 0;\n    int childCount \u003d n.getChildCount();\n    for (Node iParameter : fnType.getParameters()) {\n        JSType iParameterType \u003d iParameter.getJSType();\n        if (iParameterType instanceof FunctionType) {\n            FunctionType iParameterFnType \u003d (FunctionType) iParameterType;\n            if (i + 1 \u003e\u003d childCount) {\n                return;\n            }\n            Node iArgument \u003d n.getChildAtIndex(i + 1);\n            JSType iArgumentType \u003d getJSType(iArgument);\n            if (iArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 iArgumentType instanceof FunctionType \u0026\u0026 iArgumentType.getJSDocInfo() \u003d\u003d null) {\n                iArgument.setJSType(iParameterFnType);\n            }\n        }\n        i++;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 841,
      "functionName": "updateTypeOfParametersOnClosure",
      "functionAnnotation": "",
      "functionDoc": "For functions with function parameters, type inference will set the type of\na function literal argument from the function parameter type.\n",
      "diff": "@@ -1,19 +1,19 @@\n private void updateTypeOfParametersOnClosure(Node n, FunctionType fnType) {\n     int i \u003d 0;\n     int childCount \u003d n.getChildCount();\n     for (Node iParameter : fnType.getParameters()) {\n         JSType iParameterType \u003d iParameter.getJSType();\n         if (iParameterType instanceof FunctionType) {\n             FunctionType iParameterFnType \u003d (FunctionType) iParameterType;\n             if (i + 1 \u003e\u003d childCount) {\n                 return;\n             }\n             Node iArgument \u003d n.getChildAtIndex(i + 1);\n             JSType iArgumentType \u003d getJSType(iArgument);\n-            if (iArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 iArgumentType instanceof FunctionType \u0026\u0026 iArgument.getJSDocInfo() \u003d\u003d null) {\n+            if (iArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 iArgumentType instanceof FunctionType \u0026\u0026 iArgumentType.getJSDocInfo() \u003d\u003d null) {\n                 iArgument.setJSType(iParameterFnType);\n             }\n         }\n         i++;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "52666da81761e9652993fd8e7e375ad456408419": {
      "type": "Ybodychange",
      "commitMessage": "\nFix TypeInference#updateTypeOfParametersOnClosure.\n\nUse call site for warning source instead of function definition.\n\nR\u003dnicksantos\nDELTA\u003d31  (28 added, 1 deleted, 2 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d863019\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@522 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/29/10, 11:07 AM",
      "commitName": "52666da81761e9652993fd8e7e375ad456408419",
      "commitAuthor": "mgoodman@google.com",
      "commitDateOld": "10/26/10, 8:07 AM",
      "commitNameOld": "1bd8d2f0f4f3edcc11aa441f50223967a98bf85d",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 3.13,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "private void updateTypeOfParametersOnClosure(Node n, FunctionType fnType) {\n    int i \u003d 0;\n    int childCount \u003d n.getChildCount();\n    for (Node iParameter : fnType.getParameters()) {\n        JSType iParameterType \u003d iParameter.getJSType();\n        if (iParameterType instanceof FunctionType) {\n            FunctionType iParameterFnType \u003d (FunctionType) iParameterType;\n            if (i + 1 \u003e\u003d childCount) {\n                return;\n            }\n            Node iArgument \u003d n.getChildAtIndex(i + 1);\n            JSType iArgumentType \u003d getJSType(iArgument);\n            if (iArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 iArgumentType instanceof FunctionType \u0026\u0026 iArgument.getJSDocInfo() \u003d\u003d null) {\n                iArgument.setJSType(iParameterFnType);\n            }\n        }\n        i++;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 841,
      "functionName": "updateTypeOfParametersOnClosure",
      "functionAnnotation": "",
      "functionDoc": "For functions with function parameters, type inference will set the type of\na function literal argument from the function parameter type.\n",
      "diff": "@@ -1,19 +1,19 @@\n private void updateTypeOfParametersOnClosure(Node n, FunctionType fnType) {\n     int i \u003d 0;\n     int childCount \u003d n.getChildCount();\n     for (Node iParameter : fnType.getParameters()) {\n         JSType iParameterType \u003d iParameter.getJSType();\n         if (iParameterType instanceof FunctionType) {\n             FunctionType iParameterFnType \u003d (FunctionType) iParameterType;\n             if (i + 1 \u003e\u003d childCount) {\n                 return;\n             }\n             Node iArgument \u003d n.getChildAtIndex(i + 1);\n             JSType iArgumentType \u003d getJSType(iArgument);\n-            if (iArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 iArgumentType instanceof FunctionType \u0026\u0026 iArgumentType.getJSDocInfo() \u003d\u003d null) {\n+            if (iArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 iArgumentType instanceof FunctionType \u0026\u0026 iArgument.getJSDocInfo() \u003d\u003d null) {\n                 iArgument.setJSType(iParameterFnType);\n             }\n         }\n         i++;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3c4504a78a84e4715439cddb4028c25be2ce308f": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/07/13 17:21:32 by dhans\n\n        A few optimizations which replace getChildCount with more efficient functions for Node class.\n\n        R\u003djohnlenz\n        DELTA\u003d13  (2 added, 0 deleted, 11 changed)\n\nChange on 2010/07/13 18:08:42 by johnlenz\n\n        Add info for newly json.jar to README\n\n        R\u003dnicksantos\n        DELTA\u003d13  (13 added, 0 deleted, 0 changed)\n\nChange on 2010/07/14 08:51:02 by johnlenz\n\n        Attempt to add \"@nosideeffects\" to appropriate dom methods.\n\n        R\u003dgboyer\n        DELTA\u003d93  (91 added, 0 deleted, 2 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d48012\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@276 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/14/10, 10:45 AM",
      "commitName": "3c4504a78a84e4715439cddb4028c25be2ce308f",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "7/13/10, 3:28 PM",
      "commitNameOld": "660e7b525f76cd64d10ccc8724a1b0e0c501d1d9",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 0.8,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "private void updateTypeOfParametersOnClosure(Node n, FunctionType fnType) {\n    int i \u003d 0;\n    int childCount \u003d n.getChildCount();\n    for (Node iParameter : fnType.getParameters()) {\n        JSType iParameterType \u003d iParameter.getJSType();\n        if (iParameterType instanceof FunctionType) {\n            FunctionType iParameterFnType \u003d (FunctionType) iParameterType;\n            if (i + 1 \u003e\u003d childCount) {\n                return;\n            }\n            Node iArgument \u003d n.getChildAtIndex(i + 1);\n            JSType iArgumentType \u003d getJSType(iArgument);\n            if (iArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 iArgumentType instanceof FunctionType \u0026\u0026 iArgumentType.getJSDocInfo() \u003d\u003d null) {\n                iArgument.setJSType(iParameterFnType);\n            }\n        }\n        i++;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 845,
      "functionName": "updateTypeOfParametersOnClosure",
      "functionAnnotation": "",
      "functionDoc": "For functions with function parameters, type inference will set the type of\na function literal argument from the function parameter type.\n",
      "diff": "@@ -1,18 +1,19 @@\n private void updateTypeOfParametersOnClosure(Node n, FunctionType fnType) {\n     int i \u003d 0;\n+    int childCount \u003d n.getChildCount();\n     for (Node iParameter : fnType.getParameters()) {\n         JSType iParameterType \u003d iParameter.getJSType();\n         if (iParameterType instanceof FunctionType) {\n             FunctionType iParameterFnType \u003d (FunctionType) iParameterType;\n-            if (i + 1 \u003e\u003d n.getChildCount()) {\n+            if (i + 1 \u003e\u003d childCount) {\n                 return;\n             }\n             Node iArgument \u003d n.getChildAtIndex(i + 1);\n             JSType iArgumentType \u003d getJSType(iArgument);\n             if (iArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 iArgumentType instanceof FunctionType \u0026\u0026 iArgumentType.getJSDocInfo() \u003d\u003d null) {\n                 iArgument.setJSType(iParameterFnType);\n             }\n         }\n         i++;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,18 @@\n+private void updateTypeOfParametersOnClosure(Node n, FunctionType fnType) {\n+    int i \u003d 0;\n+    for (Node iParameter : fnType.getParameters()) {\n+        JSType iParameterType \u003d iParameter.getJSType();\n+        if (iParameterType instanceof FunctionType) {\n+            FunctionType iParameterFnType \u003d (FunctionType) iParameterType;\n+            if (i + 1 \u003e\u003d n.getChildCount()) {\n+                return;\n+            }\n+            Node iArgument \u003d n.getChildAtIndex(i + 1);\n+            JSType iArgumentType \u003d getJSType(iArgument);\n+            if (iArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 iArgumentType instanceof FunctionType \u0026\u0026 iArgumentType.getJSDocInfo() \u003d\u003d null) {\n+                iArgument.setJSType(iParameterFnType);\n+            }\n+        }\n+        i++;\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void updateTypeOfParametersOnClosure(Node n, FunctionType fnType) {\n    int i \u003d 0;\n    for (Node iParameter : fnType.getParameters()) {\n        JSType iParameterType \u003d iParameter.getJSType();\n        if (iParameterType instanceof FunctionType) {\n            FunctionType iParameterFnType \u003d (FunctionType) iParameterType;\n            if (i + 1 \u003e\u003d n.getChildCount()) {\n                return;\n            }\n            Node iArgument \u003d n.getChildAtIndex(i + 1);\n            JSType iArgumentType \u003d getJSType(iArgument);\n            if (iArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 iArgumentType instanceof FunctionType \u0026\u0026 iArgumentType.getJSDocInfo() \u003d\u003d null) {\n                iArgument.setJSType(iParameterFnType);\n            }\n        }\n        i++;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 737,
      "functionName": "updateTypeOfParametersOnClosure",
      "functionAnnotation": "",
      "functionDoc": "For functions with function parameters, type inference will set the type of\na function literal argument from the function parameter type.\n"
    }
  }
}