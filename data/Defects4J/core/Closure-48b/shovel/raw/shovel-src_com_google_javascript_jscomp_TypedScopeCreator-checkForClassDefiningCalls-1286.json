{
  "origin": "codeshovel",
  "repositoryName": "Closure-48b",
  "repositoryPath": "/tmp/Closure-48b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TypedScopeCreator.java",
  "functionName": "checkForClassDefiningCalls",
  "functionId": "$checkForClassDefiningCalls___t-NodeTraversal__n-Node__parent-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
  "functionAnnotation": "",
  "functionDoc": "Look for class-defining calls.\nBecause JS has no \u0027native\u0027 syntax for defining classes,\nthis is often very coding-convention dependent and business-logic heavy.\n",
  "functionStartLine": 1286,
  "functionEndLine": 1353,
  "numCommitsSeen": 83,
  "timeTaken": 5189,
  "changeHistory": [
    "5912a2fb9367a461f5b86f6e42704773f849e464",
    "e8eafe7acfd53e5385e4f31692c4db67c3777185"
  ],
  "changeHistoryShort": {
    "5912a2fb9367a461f5b86f6e42704773f849e464": "Ybodychange",
    "e8eafe7acfd53e5385e4f31692c4db67c3777185": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5912a2fb9367a461f5b86f6e42704773f849e464": {
      "type": "Ybodychange",
      "commitMessage": "\nHandle locally defined constructors more gracefully\n\nR\u003djohnlenz\nDELTA\u003d61  (52 added, 0 deleted, 9 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2852\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1312 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/1/11, 10:56 AM",
      "commitName": "5912a2fb9367a461f5b86f6e42704773f849e464",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "7/28/11, 4:19 PM",
      "commitNameOld": "76abdf11394c0e7515ae63335676ea3657badb45",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 3.78,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "private void checkForClassDefiningCalls(NodeTraversal t, Node n, Node parent) {\n    SubclassRelationship relationship \u003d codingConvention.getClassesDefinedByCall(n);\n    if (relationship !\u003d null) {\n        FunctionType superCtor \u003d getFunctionType(scope.getVar(relationship.superclassName));\n        FunctionType subCtor \u003d getFunctionType(scope.getVar(relationship.subclassName));\n        if (superCtor !\u003d null \u0026\u0026 superCtor.isConstructor() \u0026\u0026 subCtor !\u003d null \u0026\u0026 subCtor.isConstructor()) {\n            ObjectType superClass \u003d superCtor.getInstanceType();\n            ObjectType subClass \u003d subCtor.getInstanceType();\n            superCtor \u003d superClass.getConstructor();\n            subCtor \u003d subClass.getConstructor();\n            if (relationship.type \u003d\u003d SubclassType.INHERITS \u0026\u0026 !superClass.isEmptyType() \u0026\u0026 !subClass.isEmptyType()) {\n                validator.expectSuperType(t, n, superClass, subClass);\n            }\n            if (superCtor !\u003d null \u0026\u0026 subCtor !\u003d null) {\n                codingConvention.applySubclassRelationship(superCtor, subCtor, relationship.type);\n            }\n        }\n    }\n    String singletonGetterClassName \u003d codingConvention.getSingletonGetterClassName(n);\n    if (singletonGetterClassName !\u003d null) {\n        ObjectType objectType \u003d ObjectType.cast(typeRegistry.getType(singletonGetterClassName));\n        if (objectType !\u003d null) {\n            FunctionType functionType \u003d objectType.getConstructor();\n            if (functionType !\u003d null) {\n                FunctionType getterType \u003d typeRegistry.createFunctionType(objectType);\n                codingConvention.applySingletonGetter(functionType, getterType, objectType);\n            }\n        }\n    }\n    DelegateRelationship delegateRelationship \u003d codingConvention.getDelegateRelationship(n);\n    if (delegateRelationship !\u003d null) {\n        applyDelegateRelationship(delegateRelationship);\n    }\n    ObjectLiteralCast objectLiteralCast \u003d codingConvention.getObjectLiteralCast(t, n);\n    if (objectLiteralCast !\u003d null) {\n        ObjectType type \u003d ObjectType.cast(typeRegistry.getType(objectLiteralCast.typeName));\n        if (type !\u003d null \u0026\u0026 type.getConstructor() !\u003d null) {\n            setDeferredType(objectLiteralCast.objectNode, type);\n        } else {\n            compiler.report(JSError.make(t.getSourceName(), n, CONSTRUCTOR_EXPECTED));\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 1225,
      "functionName": "checkForClassDefiningCalls",
      "functionAnnotation": "",
      "functionDoc": "Look for class-defining calls.\nBecause JS has no \u0027native\u0027 syntax for defining classes,\nthis is often very coding-convention dependent and business-logic heavy.\n",
      "diff": "@@ -1,41 +1,43 @@\n private void checkForClassDefiningCalls(NodeTraversal t, Node n, Node parent) {\n     SubclassRelationship relationship \u003d codingConvention.getClassesDefinedByCall(n);\n     if (relationship !\u003d null) {\n-        ObjectType superClass \u003d ObjectType.cast(typeRegistry.getType(relationship.superclassName));\n-        ObjectType subClass \u003d ObjectType.cast(typeRegistry.getType(relationship.subclassName));\n-        if (superClass !\u003d null \u0026\u0026 subClass !\u003d null) {\n-            FunctionType superCtor \u003d superClass.getConstructor();\n-            FunctionType subCtor \u003d subClass.getConstructor();\n-            if (relationship.type \u003d\u003d SubclassType.INHERITS) {\n+        FunctionType superCtor \u003d getFunctionType(scope.getVar(relationship.superclassName));\n+        FunctionType subCtor \u003d getFunctionType(scope.getVar(relationship.subclassName));\n+        if (superCtor !\u003d null \u0026\u0026 superCtor.isConstructor() \u0026\u0026 subCtor !\u003d null \u0026\u0026 subCtor.isConstructor()) {\n+            ObjectType superClass \u003d superCtor.getInstanceType();\n+            ObjectType subClass \u003d subCtor.getInstanceType();\n+            superCtor \u003d superClass.getConstructor();\n+            subCtor \u003d subClass.getConstructor();\n+            if (relationship.type \u003d\u003d SubclassType.INHERITS \u0026\u0026 !superClass.isEmptyType() \u0026\u0026 !subClass.isEmptyType()) {\n                 validator.expectSuperType(t, n, superClass, subClass);\n             }\n             if (superCtor !\u003d null \u0026\u0026 subCtor !\u003d null) {\n                 codingConvention.applySubclassRelationship(superCtor, subCtor, relationship.type);\n             }\n         }\n     }\n     String singletonGetterClassName \u003d codingConvention.getSingletonGetterClassName(n);\n     if (singletonGetterClassName !\u003d null) {\n         ObjectType objectType \u003d ObjectType.cast(typeRegistry.getType(singletonGetterClassName));\n         if (objectType !\u003d null) {\n             FunctionType functionType \u003d objectType.getConstructor();\n             if (functionType !\u003d null) {\n                 FunctionType getterType \u003d typeRegistry.createFunctionType(objectType);\n                 codingConvention.applySingletonGetter(functionType, getterType, objectType);\n             }\n         }\n     }\n     DelegateRelationship delegateRelationship \u003d codingConvention.getDelegateRelationship(n);\n     if (delegateRelationship !\u003d null) {\n         applyDelegateRelationship(delegateRelationship);\n     }\n     ObjectLiteralCast objectLiteralCast \u003d codingConvention.getObjectLiteralCast(t, n);\n     if (objectLiteralCast !\u003d null) {\n         ObjectType type \u003d ObjectType.cast(typeRegistry.getType(objectLiteralCast.typeName));\n         if (type !\u003d null \u0026\u0026 type.getConstructor() !\u003d null) {\n             setDeferredType(objectLiteralCast.objectNode, type);\n         } else {\n             compiler.report(JSError.make(t.getSourceName(), n, CONSTRUCTOR_EXPECTED));\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e8eafe7acfd53e5385e4f31692c4db67c3777185": {
      "type": "Yintroduced",
      "commitMessage": "\nRefactor typedscopecreator a bit to make it easier\nto see what\u0027s going on. basically, i removed a level of dynamic\ndispatch. there should be no functional changes in this cl.\n\nR\u003djohnlenz\nDELTA\u003d228  (89 added, 62 deleted, 77 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d54005\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@292 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/19/10, 5:30 PM",
      "commitName": "e8eafe7acfd53e5385e4f31692c4db67c3777185",
      "commitAuthor": "nicksantos@google.com",
      "diff": "@@ -0,0 +1,41 @@\n+private void checkForClassDefiningCalls(NodeTraversal t, Node n, Node parent) {\n+    SubclassRelationship relationship \u003d codingConvention.getClassesDefinedByCall(n);\n+    if (relationship !\u003d null) {\n+        ObjectType superClass \u003d ObjectType.cast(typeRegistry.getType(relationship.superclassName));\n+        ObjectType subClass \u003d ObjectType.cast(typeRegistry.getType(relationship.subclassName));\n+        if (superClass !\u003d null \u0026\u0026 subClass !\u003d null) {\n+            FunctionType superCtor \u003d superClass.getConstructor();\n+            FunctionType subCtor \u003d subClass.getConstructor();\n+            if (relationship.type \u003d\u003d SubclassType.INHERITS) {\n+                validator.expectSuperType(t, n, superClass, subClass);\n+            }\n+            if (superCtor !\u003d null \u0026\u0026 subCtor !\u003d null) {\n+                codingConvention.applySubclassRelationship(superCtor, subCtor, relationship.type);\n+            }\n+        }\n+    }\n+    String singletonGetterClassName \u003d codingConvention.getSingletonGetterClassName(n);\n+    if (singletonGetterClassName !\u003d null) {\n+        ObjectType objectType \u003d ObjectType.cast(typeRegistry.getType(singletonGetterClassName));\n+        if (objectType !\u003d null) {\n+            FunctionType functionType \u003d objectType.getConstructor();\n+            if (functionType !\u003d null) {\n+                FunctionType getterType \u003d typeRegistry.createFunctionType(objectType);\n+                codingConvention.applySingletonGetter(functionType, getterType, objectType);\n+            }\n+        }\n+    }\n+    DelegateRelationship delegateRelationship \u003d codingConvention.getDelegateRelationship(n);\n+    if (delegateRelationship !\u003d null) {\n+        applyDelegateRelationship(delegateRelationship);\n+    }\n+    ObjectLiteralCast objectLiteralCast \u003d codingConvention.getObjectLiteralCast(t, n);\n+    if (objectLiteralCast !\u003d null) {\n+        ObjectType type \u003d ObjectType.cast(typeRegistry.getType(objectLiteralCast.typeName));\n+        if (type !\u003d null \u0026\u0026 type.getConstructor() !\u003d null) {\n+            setDeferredType(objectLiteralCast.objectNode, type);\n+        } else {\n+            compiler.report(JSError.make(t.getSourceName(), n, CONSTRUCTOR_EXPECTED));\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void checkForClassDefiningCalls(NodeTraversal t, Node n, Node parent) {\n    SubclassRelationship relationship \u003d codingConvention.getClassesDefinedByCall(n);\n    if (relationship !\u003d null) {\n        ObjectType superClass \u003d ObjectType.cast(typeRegistry.getType(relationship.superclassName));\n        ObjectType subClass \u003d ObjectType.cast(typeRegistry.getType(relationship.subclassName));\n        if (superClass !\u003d null \u0026\u0026 subClass !\u003d null) {\n            FunctionType superCtor \u003d superClass.getConstructor();\n            FunctionType subCtor \u003d subClass.getConstructor();\n            if (relationship.type \u003d\u003d SubclassType.INHERITS) {\n                validator.expectSuperType(t, n, superClass, subClass);\n            }\n            if (superCtor !\u003d null \u0026\u0026 subCtor !\u003d null) {\n                codingConvention.applySubclassRelationship(superCtor, subCtor, relationship.type);\n            }\n        }\n    }\n    String singletonGetterClassName \u003d codingConvention.getSingletonGetterClassName(n);\n    if (singletonGetterClassName !\u003d null) {\n        ObjectType objectType \u003d ObjectType.cast(typeRegistry.getType(singletonGetterClassName));\n        if (objectType !\u003d null) {\n            FunctionType functionType \u003d objectType.getConstructor();\n            if (functionType !\u003d null) {\n                FunctionType getterType \u003d typeRegistry.createFunctionType(objectType);\n                codingConvention.applySingletonGetter(functionType, getterType, objectType);\n            }\n        }\n    }\n    DelegateRelationship delegateRelationship \u003d codingConvention.getDelegateRelationship(n);\n    if (delegateRelationship !\u003d null) {\n        applyDelegateRelationship(delegateRelationship);\n    }\n    ObjectLiteralCast objectLiteralCast \u003d codingConvention.getObjectLiteralCast(t, n);\n    if (objectLiteralCast !\u003d null) {\n        ObjectType type \u003d ObjectType.cast(typeRegistry.getType(objectLiteralCast.typeName));\n        if (type !\u003d null \u0026\u0026 type.getConstructor() !\u003d null) {\n            setDeferredType(objectLiteralCast.objectNode, type);\n        } else {\n            compiler.report(JSError.make(t.getSourceName(), n, CONSTRUCTOR_EXPECTED));\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 916,
      "functionName": "checkForClassDefiningCalls",
      "functionAnnotation": "",
      "functionDoc": "Look for class-defining calls.\nBecause JS has no \u0027native\u0027 syntax for defining classes,\nthis is often very coding-convention dependent and business-logic heavy.\n"
    }
  }
}