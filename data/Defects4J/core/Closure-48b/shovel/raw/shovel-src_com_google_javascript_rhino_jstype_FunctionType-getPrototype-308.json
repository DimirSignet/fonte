{
  "origin": "codeshovel",
  "repositoryName": "Closure-48b",
  "repositoryPath": "/tmp/Closure-48b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FunctionType.java",
  "functionName": "getPrototype",
  "functionId": "getPrototype",
  "sourceFilePath": "src/com/google/javascript/rhino/jstype/FunctionType.java",
  "functionAnnotation": "",
  "functionDoc": "Gets the {@code prototype} property of this function type. This is\nequivalent to {@code (ObjectType) getPropertyType(\"prototype\")}.\n",
  "functionStartLine": 308,
  "functionEndLine": 320,
  "numCommitsSeen": 60,
  "timeTaken": 2510,
  "changeHistory": [
    "5c695ce6ca5095ba764d34e634c20f65d8a558e2",
    "5fa514bee8f76534232e4653eaf16cd416e08012",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "5c695ce6ca5095ba764d34e634c20f65d8a558e2": "Ybodychange",
    "5fa514bee8f76534232e4653eaf16cd416e08012": "Ymultichange(Yreturntypechange,Ybodychange)",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5c695ce6ca5095ba764d34e634c20f65d8a558e2": {
      "type": "Ybodychange",
      "commitMessage": "\nProper source information for function prototypes\n\nR\u003dacleung\nDELTA\u003d343  (190 added, 106 deleted, 47 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3216\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1424 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/8/11, 7:15 AM",
      "commitName": "5c695ce6ca5095ba764d34e634c20f65d8a558e2",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "8/31/11, 7:30 PM",
      "commitNameOld": "7e9b8336568ea7f05c33e1b58eb67fa6d4eee756",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 7.49,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "actualSource": "public ObjectType getPrototype() {\n    if (prototypeSlot \u003d\u003d null) {\n        setPrototype(new PrototypeObjectType(registry, this.getReferenceName() + \".prototype\", registry.getNativeObjectType(OBJECT_TYPE), isNativeObjectType()), null);\n    }\n    return (ObjectType) prototypeSlot.getType();\n}",
      "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
      "functionStartLine": 305,
      "functionName": "getPrototype",
      "functionAnnotation": "",
      "functionDoc": "Gets the {@code prototype} property of this function type. This is\nequivalent to {@code (ObjectType) getPropertyType(\"prototype\")}.\n",
      "diff": "@@ -1,6 +1,6 @@\n public ObjectType getPrototype() {\n-    if (prototype \u003d\u003d null) {\n-        setPrototype(new PrototypeObjectType(registry, this.getReferenceName() + \".prototype\", registry.getNativeObjectType(OBJECT_TYPE), isNativeObjectType()));\n+    if (prototypeSlot \u003d\u003d null) {\n+        setPrototype(new PrototypeObjectType(registry, this.getReferenceName() + \".prototype\", registry.getNativeObjectType(OBJECT_TYPE), isNativeObjectType()), null);\n     }\n-    return prototype;\n+    return (ObjectType) prototypeSlot.getType();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5fa514bee8f76534232e4653eaf16cd416e08012": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "\nChange how Function prototypes are represented in the type\nsystem.  This fixes lots of bugs when an anonymous object is\nthe prototype, and will make life a lot easier for IDEs.\n\nR\u003djohnlenz\nDELTA\u003d370  (129 added, 177 deleted, 64 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3135\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1389 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/25/11, 8:10 AM",
      "commitName": "5fa514bee8f76534232e4653eaf16cd416e08012",
      "commitAuthor": "nicksantos@google.com",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "\nChange how Function prototypes are represented in the type\nsystem.  This fixes lots of bugs when an anonymous object is\nthe prototype, and will make life a lot easier for IDEs.\n\nR\u003djohnlenz\nDELTA\u003d370  (129 added, 177 deleted, 64 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3135\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1389 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "8/25/11, 8:10 AM",
          "commitName": "5fa514bee8f76534232e4653eaf16cd416e08012",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "8/22/11, 11:38 AM",
          "commitNameOld": "1aaaaa9fe982beb4cd34edb0f7452a3c6da199d9",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 2.86,
          "commitsBetweenForRepo": 17,
          "commitsBetweenForFile": 1,
          "actualSource": "public ObjectType getPrototype() {\n    if (prototype \u003d\u003d null) {\n        setPrototype(new PrototypeObjectType(registry, this.getReferenceName() + \".prototype\", registry.getNativeObjectType(OBJECT_TYPE), isNativeObjectType()));\n    }\n    return prototype;\n}",
          "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
          "functionStartLine": 304,
          "functionName": "getPrototype",
          "functionAnnotation": "",
          "functionDoc": "Gets the {@code prototype} property of this function type. This is\nequivalent to {@code (ObjectType) getPropertyType(\"prototype\")}.\n",
          "diff": "@@ -1,6 +1,6 @@\n-public FunctionPrototypeType getPrototype() {\n+public ObjectType getPrototype() {\n     if (prototype \u003d\u003d null) {\n-        setPrototype(new FunctionPrototypeType(registry, this, null));\n+        setPrototype(new PrototypeObjectType(registry, this.getReferenceName() + \".prototype\", registry.getNativeObjectType(OBJECT_TYPE), isNativeObjectType()));\n     }\n     return prototype;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "FunctionPrototypeType",
            "newValue": "ObjectType"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nChange how Function prototypes are represented in the type\nsystem.  This fixes lots of bugs when an anonymous object is\nthe prototype, and will make life a lot easier for IDEs.\n\nR\u003djohnlenz\nDELTA\u003d370  (129 added, 177 deleted, 64 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3135\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1389 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "8/25/11, 8:10 AM",
          "commitName": "5fa514bee8f76534232e4653eaf16cd416e08012",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "8/22/11, 11:38 AM",
          "commitNameOld": "1aaaaa9fe982beb4cd34edb0f7452a3c6da199d9",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 2.86,
          "commitsBetweenForRepo": 17,
          "commitsBetweenForFile": 1,
          "actualSource": "public ObjectType getPrototype() {\n    if (prototype \u003d\u003d null) {\n        setPrototype(new PrototypeObjectType(registry, this.getReferenceName() + \".prototype\", registry.getNativeObjectType(OBJECT_TYPE), isNativeObjectType()));\n    }\n    return prototype;\n}",
          "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
          "functionStartLine": 304,
          "functionName": "getPrototype",
          "functionAnnotation": "",
          "functionDoc": "Gets the {@code prototype} property of this function type. This is\nequivalent to {@code (ObjectType) getPropertyType(\"prototype\")}.\n",
          "diff": "@@ -1,6 +1,6 @@\n-public FunctionPrototypeType getPrototype() {\n+public ObjectType getPrototype() {\n     if (prototype \u003d\u003d null) {\n-        setPrototype(new FunctionPrototypeType(registry, this, null));\n+        setPrototype(new PrototypeObjectType(registry, this.getReferenceName() + \".prototype\", registry.getNativeObjectType(OBJECT_TYPE), isNativeObjectType()));\n     }\n     return prototype;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,6 @@\n+public FunctionPrototypeType getPrototype() {\n+    if (prototype \u003d\u003d null) {\n+        setPrototype(new FunctionPrototypeType(registry, this, null));\n+    }\n+    return prototype;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public FunctionPrototypeType getPrototype() {\n    if (prototype \u003d\u003d null) {\n        setPrototype(new FunctionPrototypeType(registry, this, null));\n    }\n    return prototype;\n}",
      "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
      "functionStartLine": 307,
      "functionName": "getPrototype",
      "functionAnnotation": "",
      "functionDoc": "Gets the {@code prototype} property of this function type. This is\nequivalent to {@code (ObjectType) getPropertyType(\"prototype\")}.\n"
    }
  }
}