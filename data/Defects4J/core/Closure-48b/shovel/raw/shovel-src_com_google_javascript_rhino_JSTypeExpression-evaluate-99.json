{
  "origin": "codeshovel",
  "repositoryName": "Closure-48b",
  "repositoryPath": "/tmp/Closure-48b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JSTypeExpression.java",
  "functionName": "evaluate",
  "functionId": "evaluate___scope-StaticScope__JSType____registry-JSTypeRegistry",
  "sourceFilePath": "src/com/google/javascript/rhino/JSTypeExpression.java",
  "functionAnnotation": "",
  "functionDoc": "Evaluates the type expression into a {@code JSType} object.\n",
  "functionStartLine": 99,
  "functionEndLine": 103,
  "numCommitsSeen": 14,
  "timeTaken": 652,
  "changeHistory": [
    "27d9224ea579a3cf5780de2994bac258b3cfcd42",
    "4434b45f18d2e74ec809a9bbeb67571b604ce6d0",
    "eb5eae4438f49ffddd3c8be1413eeb9e7ecfb311",
    "c764a46abf211d4677fadc33f7d466e5b14fa088",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "27d9224ea579a3cf5780de2994bac258b3cfcd42": "Ybodychange",
    "4434b45f18d2e74ec809a9bbeb67571b604ce6d0": "Ybodychange",
    "eb5eae4438f49ffddd3c8be1413eeb9e7ecfb311": "Ybodychange",
    "c764a46abf211d4677fadc33f7d466e5b14fa088": "Yparameterchange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "27d9224ea579a3cf5780de2994bac258b3cfcd42": {
      "type": "Ybodychange",
      "commitMessage": "\nstart indexing jsdoc asts\n\nR\u003djschorr\nDELTA\u003d223  (193 added, 21 deleted, 9 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3296\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1451 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/19/11, 2:19 PM",
      "commitName": "27d9224ea579a3cf5780de2994bac258b3cfcd42",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "4/12/11, 12:15 PM",
      "commitNameOld": "f322be0e576d5e2114cb59c0a6537197997b9c59",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 160.09,
      "commitsBetweenForRepo": 424,
      "commitsBetweenForFile": 1,
      "actualSource": "public JSType evaluate(StaticScope\u003cJSType\u003e scope, JSTypeRegistry registry) {\n    JSType type \u003d registry.createFromTypeNodes(root, sourceName, scope);\n    root.setJSType(type);\n    return type;\n}",
      "path": "src/com/google/javascript/rhino/JSTypeExpression.java",
      "functionStartLine": 99,
      "functionName": "evaluate",
      "functionAnnotation": "",
      "functionDoc": "Evaluates the type expression into a {@code JSType} object.\n",
      "diff": "@@ -1,3 +1,5 @@\n public JSType evaluate(StaticScope\u003cJSType\u003e scope, JSTypeRegistry registry) {\n-    return registry.createFromTypeNodes(root, sourceName, scope);\n+    JSType type \u003d registry.createFromTypeNodes(root, sourceName, scope);\n+    root.setJSType(type);\n+    return type;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4434b45f18d2e74ec809a9bbeb67571b604ce6d0": {
      "type": "Ybodychange",
      "commitMessage": "\nUnforgiven types.\nNow that you can suppress type-parsing warnings by simply turning\noff type checking, we should just get rid of all the old forgiving\nlogic.\n\nR\u003dacleung\nDELTA\u003d128  (5 added, 86 deleted, 37 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d812\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@872 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/10/11, 8:26 AM",
      "commitName": "4434b45f18d2e74ec809a9bbeb67571b604ce6d0",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "3/3/11, 5:04 PM",
      "commitNameOld": "e4cf805a6a27301672660756202e8dedee1e012b",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 6.64,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "actualSource": "public JSType evaluate(StaticScope\u003cJSType\u003e scope, JSTypeRegistry registry) {\n    return registry.createFromTypeNodes(root, sourceName, scope);\n}",
      "path": "src/com/google/javascript/rhino/JSTypeExpression.java",
      "functionStartLine": 99,
      "functionName": "evaluate",
      "functionAnnotation": "",
      "functionDoc": "Evaluates the type expression into a {@code JSType} object.\n",
      "diff": "@@ -1,3 +1,3 @@\n public JSType evaluate(StaticScope\u003cJSType\u003e scope, JSTypeRegistry registry) {\n-    return registry.createFromTypeNodes(root, sourceName, scope, root.getBooleanProp(Node.BRACELESS_TYPE));\n+    return registry.createFromTypeNodes(root, sourceName, scope);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "eb5eae4438f49ffddd3c8be1413eeb9e7ecfb311": {
      "type": "Ybodychange",
      "commitMessage": "Change on 2010/04/26 by nick\n\n        forbid getters and setters. fixes closure-compiler issue 154.\n\n        R\u003drobert\n        DELTA\u003d57  (55 added, 0 deleted, 2 changed)\n\nChange on 2010/04/26 by nick\n\n        create a helper method for getting the transitive closure of a\n        number of roots.\n\n        R\u003dalan\n        DELTA\u003d172  (168 added, 2 deleted, 2 changed)\n\nChange on 2010/04/26 by nick\n\n        create a new mechanism for type name resolution.\n\n        R\u003djohn\n        DELTA\u003d222  (210 added, 5 deleted, 7 changed)\n\nChange on 2010/04/27 by john\n\n        Remove unused variables in uncalled global functions when not removing\n        unused global names. Fixes issue 155.\n\n        R\u003dnick\n        DELTA\u003d42  (34 added, 3 deleted, 5 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003daepekd\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@199 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/27/10, 12:02 PM",
      "commitName": "eb5eae4438f49ffddd3c8be1413eeb9e7ecfb311",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/14/10, 9:15 AM",
      "commitNameOld": "c764a46abf211d4677fadc33f7d466e5b14fa088",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 13.12,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "actualSource": "public JSType evaluate(StaticScope\u003cJSType\u003e scope, JSTypeRegistry registry) {\n    return registry.createFromTypeNodes(root, sourceName, scope, root.getBooleanProp(Node.BRACELESS_TYPE));\n}",
      "path": "src/com/google/javascript/rhino/JSTypeExpression.java",
      "functionStartLine": 99,
      "functionName": "evaluate",
      "functionAnnotation": "",
      "functionDoc": "Evaluates the type expression into a {@code JSType} object.\n",
      "diff": "@@ -1,7 +1,3 @@\n public JSType evaluate(StaticScope\u003cJSType\u003e scope, JSTypeRegistry registry) {\n-    JSType type \u003d registry.createFromTypeNodes(root, sourceName, scope);\n-    if (root.getBooleanProp(Node.BRACELESS_TYPE)) {\n-        type.forgiveUnknownNames();\n-    }\n-    return type;\n+    return registry.createFromTypeNodes(root, sourceName, scope, root.getBooleanProp(Node.BRACELESS_TYPE));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c764a46abf211d4677fadc33f7d466e5b14fa088": {
      "type": "Yparameterchange",
      "commitMessage": "\nChange on 2010/04/13 by john\n\n        Here is a crazy thought, let\u0027s not require the JSTypeRegistry during\n        parsing.\n\n        There are basically two changes here:\n        1) The IRFactory was looking for enums to seed the JSTypeRegistry, so\n        we do that when we setup for type interence.\n        2) The JSDocParser was checking the types of @defines objects, now do\n        that during ProcessDefines.\n\n        R\u003drobert,mark\n        DELTA\u003d207  (82 added, 89 deleted, 36 changed)\n\nChange on 2010/04/14 by nick\n\n        Add a debugging function for JSType hashcodes.\n        i found this useful, and thought others might too.\n\n        R\u003djohn\n        DELTA\u003d69  (69 added, 0 deleted, 0 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dfqsoxx\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@183 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/14/10, 9:15 AM",
      "commitName": "c764a46abf211d4677fadc33f7d466e5b14fa088",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "3/11/10, 9:31 PM",
      "commitNameOld": "7bfdbd9164601af44d17edd51be829fde2cc51aa",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 33.45,
      "commitsBetweenForRepo": 47,
      "commitsBetweenForFile": 1,
      "actualSource": "public JSType evaluate(StaticScope\u003cJSType\u003e scope, JSTypeRegistry registry) {\n    JSType type \u003d registry.createFromTypeNodes(root, sourceName, scope);\n    if (root.getBooleanProp(Node.BRACELESS_TYPE)) {\n        type.forgiveUnknownNames();\n    }\n    return type;\n}",
      "path": "src/com/google/javascript/rhino/JSTypeExpression.java",
      "functionStartLine": 99,
      "functionName": "evaluate",
      "functionAnnotation": "",
      "functionDoc": "Evaluates the type expression into a {@code JSType} object.\n",
      "diff": "@@ -1,7 +1,7 @@\n-public JSType evaluate(StaticScope\u003cJSType\u003e scope) {\n+public JSType evaluate(StaticScope\u003cJSType\u003e scope, JSTypeRegistry registry) {\n     JSType type \u003d registry.createFromTypeNodes(root, sourceName, scope);\n     if (root.getBooleanProp(Node.BRACELESS_TYPE)) {\n         type.forgiveUnknownNames();\n     }\n     return type;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[scope-StaticScope\u003cJSType\u003e]",
        "newValue": "[scope-StaticScope\u003cJSType\u003e, registry-JSTypeRegistry]"
      }
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,7 @@\n+public JSType evaluate(StaticScope\u003cJSType\u003e scope) {\n+    JSType type \u003d registry.createFromTypeNodes(root, sourceName, scope);\n+    if (root.getBooleanProp(Node.BRACELESS_TYPE)) {\n+        type.forgiveUnknownNames();\n+    }\n+    return type;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public JSType evaluate(StaticScope\u003cJSType\u003e scope) {\n    JSType type \u003d registry.createFromTypeNodes(root, sourceName, scope);\n    if (root.getBooleanProp(Node.BRACELESS_TYPE)) {\n        type.forgiveUnknownNames();\n    }\n    return type;\n}",
      "path": "src/com/google/javascript/rhino/JSTypeExpression.java",
      "functionStartLine": 91,
      "functionName": "evaluate",
      "functionAnnotation": "",
      "functionDoc": "Evaluates the type expression into a {@code JSType} object.\n"
    }
  }
}