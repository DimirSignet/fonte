{
  "origin": "codeshovel",
  "repositoryName": "Closure-48b",
  "repositoryPath": "/tmp/Closure-48b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ArrowType.java",
  "functionName": "isSubtype",
  "functionId": "isSubtype___other-JSType",
  "sourceFilePath": "src/com/google/javascript/rhino/jstype/ArrowType.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 80,
  "functionEndLine": 140,
  "numCommitsSeen": 13,
  "timeTaken": 379,
  "changeHistory": [
    "97bbbffb65eda01aa9b38a5cec43a598afb39070",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "97bbbffb65eda01aa9b38a5cec43a598afb39070": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "97bbbffb65eda01aa9b38a5cec43a598afb39070": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/05/12 by nick\n\n        simplify how we build source map paths.\n\n        R\u003djoey\n        DELTA\u003d111  (76 added, 4 deleted, 31 changed)\n\nChange on 2010/05/12 by nick\n\n        Use generics magic to clean up the graph code a bit.\n        These changes don\u0027t give the performance improvements that I hoped,\n        but i think they\u0027re good changes anyway.\n\n        R\u003dalan\n        DELTA\u003d253  (69 added, 121 deleted, 63 changed)\n\nChange on 2010/05/12 by nick\n\n        API clean-up: don\u0027t store null return types or parameter-list types.\n\n        R\u003drobert\n        DELTA\u003d195  (89 added, 54 deleted, 52 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003ddzaoho\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@209 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/13/10, 10:46 AM",
      "commitName": "97bbbffb65eda01aa9b38a5cec43a598afb39070",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "1/26/10, 1:59 PM",
      "commitNameOld": "bca9abb0e3062d373fe52c0e8340337588c05708",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 106.82,
      "commitsBetweenForRepo": 124,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n        return false;\n    }\n    ArrowType that \u003d (ArrowType) other;\n    if (!this.returnType.isSubtype(that.returnType)) {\n        return false;\n    }\n    Node thisParam \u003d parameters.getFirstChild();\n    Node thatParam \u003d that.parameters.getFirstChild();\n    while (thisParam !\u003d null \u0026\u0026 thatParam !\u003d null) {\n        JSType thisParamType \u003d thisParam.getJSType();\n        if (thisParamType !\u003d null) {\n            JSType thatParamType \u003d thatParam.getJSType();\n            if (thatParamType \u003d\u003d null || !thatParamType.isSubtype(thisParamType)) {\n                return false;\n            }\n        }\n        boolean thisIsVarArgs \u003d thisParam.isVarArgs();\n        boolean thatIsVarArgs \u003d thatParam.isVarArgs();\n        if (!thisIsVarArgs) {\n            thisParam \u003d thisParam.getNext();\n        }\n        if (!thatIsVarArgs) {\n            thatParam \u003d thatParam.getNext();\n        }\n        if (thisIsVarArgs \u0026\u0026 thatIsVarArgs) {\n            thisParam \u003d null;\n            thatParam \u003d null;\n        }\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
      "functionStartLine": 73,
      "functionName": "isSubtype",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,36 +1,34 @@\n @Override\n public boolean isSubtype(JSType other) {\n     if (!(other instanceof ArrowType)) {\n         return false;\n     }\n     ArrowType that \u003d (ArrowType) other;\n-    if (this.returnType !\u003d null \u0026\u0026 that.returnType !\u003d null \u0026\u0026 !this.returnType.isSubtype(that.returnType)) {\n+    if (!this.returnType.isSubtype(that.returnType)) {\n         return false;\n     }\n-    if (this.parameters !\u003d null \u0026\u0026 that.parameters !\u003d null) {\n-        Node thisParam \u003d parameters.getFirstChild();\n-        Node thatParam \u003d that.parameters.getFirstChild();\n-        while (thisParam !\u003d null \u0026\u0026 thatParam !\u003d null) {\n-            JSType thisParamType \u003d thisParam.getJSType();\n-            if (thisParamType !\u003d null) {\n-                JSType thatParamType \u003d thatParam.getJSType();\n-                if (thatParamType \u003d\u003d null || !thatParamType.isSubtype(thisParamType)) {\n-                    return false;\n-                }\n+    Node thisParam \u003d parameters.getFirstChild();\n+    Node thatParam \u003d that.parameters.getFirstChild();\n+    while (thisParam !\u003d null \u0026\u0026 thatParam !\u003d null) {\n+        JSType thisParamType \u003d thisParam.getJSType();\n+        if (thisParamType !\u003d null) {\n+            JSType thatParamType \u003d thatParam.getJSType();\n+            if (thatParamType \u003d\u003d null || !thatParamType.isSubtype(thisParamType)) {\n+                return false;\n             }\n-            boolean thisIsVarArgs \u003d thisParam.isVarArgs();\n-            boolean thatIsVarArgs \u003d thatParam.isVarArgs();\n-            if (!thisIsVarArgs) {\n-                thisParam \u003d thisParam.getNext();\n-            }\n-            if (!thatIsVarArgs) {\n-                thatParam \u003d thatParam.getNext();\n-            }\n-            if (thisIsVarArgs \u0026\u0026 thatIsVarArgs) {\n-                thisParam \u003d null;\n-                thatParam \u003d null;\n-            }\n+        }\n+        boolean thisIsVarArgs \u003d thisParam.isVarArgs();\n+        boolean thatIsVarArgs \u003d thatParam.isVarArgs();\n+        if (!thisIsVarArgs) {\n+            thisParam \u003d thisParam.getNext();\n+        }\n+        if (!thatIsVarArgs) {\n+            thatParam \u003d thatParam.getNext();\n+        }\n+        if (thisIsVarArgs \u0026\u0026 thatIsVarArgs) {\n+            thisParam \u003d null;\n+            thatParam \u003d null;\n         }\n     }\n     return true;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,36 @@\n+@Override\n+public boolean isSubtype(JSType other) {\n+    if (!(other instanceof ArrowType)) {\n+        return false;\n+    }\n+    ArrowType that \u003d (ArrowType) other;\n+    if (this.returnType !\u003d null \u0026\u0026 that.returnType !\u003d null \u0026\u0026 !this.returnType.isSubtype(that.returnType)) {\n+        return false;\n+    }\n+    if (this.parameters !\u003d null \u0026\u0026 that.parameters !\u003d null) {\n+        Node thisParam \u003d parameters.getFirstChild();\n+        Node thatParam \u003d that.parameters.getFirstChild();\n+        while (thisParam !\u003d null \u0026\u0026 thatParam !\u003d null) {\n+            JSType thisParamType \u003d thisParam.getJSType();\n+            if (thisParamType !\u003d null) {\n+                JSType thatParamType \u003d thatParam.getJSType();\n+                if (thatParamType \u003d\u003d null || !thatParamType.isSubtype(thisParamType)) {\n+                    return false;\n+                }\n+            }\n+            boolean thisIsVarArgs \u003d thisParam.isVarArgs();\n+            boolean thatIsVarArgs \u003d thatParam.isVarArgs();\n+            if (!thisIsVarArgs) {\n+                thisParam \u003d thisParam.getNext();\n+            }\n+            if (!thatIsVarArgs) {\n+                thatParam \u003d thatParam.getNext();\n+            }\n+            if (thisIsVarArgs \u0026\u0026 thatIsVarArgs) {\n+                thisParam \u003d null;\n+                thatParam \u003d null;\n+            }\n+        }\n+    }\n+    return true;\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n        return false;\n    }\n    ArrowType that \u003d (ArrowType) other;\n    if (this.returnType !\u003d null \u0026\u0026 that.returnType !\u003d null \u0026\u0026 !this.returnType.isSubtype(that.returnType)) {\n        return false;\n    }\n    if (this.parameters !\u003d null \u0026\u0026 that.parameters !\u003d null) {\n        Node thisParam \u003d parameters.getFirstChild();\n        Node thatParam \u003d that.parameters.getFirstChild();\n        while (thisParam !\u003d null \u0026\u0026 thatParam !\u003d null) {\n            JSType thisParamType \u003d thisParam.getJSType();\n            if (thisParamType !\u003d null) {\n                JSType thatParamType \u003d thatParam.getJSType();\n                if (thatParamType \u003d\u003d null || !thatParamType.isSubtype(thisParamType)) {\n                    return false;\n                }\n            }\n            boolean thisIsVarArgs \u003d thisParam.isVarArgs();\n            boolean thatIsVarArgs \u003d thatParam.isVarArgs();\n            if (!thisIsVarArgs) {\n                thisParam \u003d thisParam.getNext();\n            }\n            if (!thatIsVarArgs) {\n                thatParam \u003d thatParam.getNext();\n            }\n            if (thisIsVarArgs \u0026\u0026 thatIsVarArgs) {\n                thisParam \u003d null;\n                thatParam \u003d null;\n            }\n        }\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
      "functionStartLine": 68,
      "functionName": "isSubtype",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}