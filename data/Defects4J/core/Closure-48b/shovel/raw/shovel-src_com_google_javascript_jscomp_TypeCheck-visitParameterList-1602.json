{
  "origin": "codeshovel",
  "repositoryName": "Closure-48b",
  "repositoryPath": "/tmp/Closure-48b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TypeCheck.java",
  "functionName": "visitParameterList",
  "functionId": "visitParameterList___t-NodeTraversal__call-Node__functionType-FunctionType",
  "sourceFilePath": "src/com/google/javascript/jscomp/TypeCheck.java",
  "functionAnnotation": "",
  "functionDoc": "Visits the parameters of a CALL or a NEW node.\n",
  "functionStartLine": 1602,
  "functionEndLine": 1636,
  "numCommitsSeen": 63,
  "timeTaken": 4798,
  "changeHistory": [
    "807aaf2569e9eb09761068c5aeb95654daea30d9",
    "e829dafb9b3365bda6b6bb80f5fa97783752d143",
    "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "807aaf2569e9eb09761068c5aeb95654daea30d9": "Ybodychange",
    "e829dafb9b3365bda6b6bb80f5fa97783752d143": "Ybodychange",
    "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "807aaf2569e9eb09761068c5aeb95654daea30d9": {
      "type": "Ybodychange",
      "commitMessage": "\ncheck var_args properly\nFixes issue 229.\n\nR\u003dmoedinger\nDELTA\u003d20  (17 added, 0 deleted, 3 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d201482\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@402 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/2/10, 9:49 AM",
      "commitName": "807aaf2569e9eb09761068c5aeb95654daea30d9",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "8/12/10, 6:02 PM",
      "commitNameOld": "15acafb00636f99295b394145b9b60a5e624ddfa",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 20.66,
      "commitsBetweenForRepo": 43,
      "commitsBetweenForFile": 1,
      "actualSource": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n    Iterator\u003cNode\u003e arguments \u003d call.children().iterator();\n    arguments.next();\n    Iterator\u003cNode\u003e parameters \u003d functionType.getParameters().iterator();\n    int ordinal \u003d 0;\n    Node parameter \u003d null;\n    Node argument \u003d null;\n    while (arguments.hasNext() \u0026\u0026 (parameters.hasNext() || parameter !\u003d null \u0026\u0026 parameter.isVarArgs())) {\n        if (parameters.hasNext()) {\n            parameter \u003d parameters.next();\n        }\n        argument \u003d arguments.next();\n        ordinal++;\n        validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n    int numArgs \u003d call.getChildCount() - 1;\n    int minArgs \u003d functionType.getMinArguments();\n    int maxArgs \u003d functionType.getMaxArguments();\n    if (minArgs \u003e numArgs || maxArgs \u003c numArgs) {\n        report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false), String.valueOf(numArgs), String.valueOf(minArgs), maxArgs !\u003d Integer.MAX_VALUE ? \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1399,
      "functionName": "visitParameterList",
      "functionAnnotation": "",
      "functionDoc": "Visits the parameters of a CALL or a NEW node.\n",
      "diff": "@@ -1,18 +1,22 @@\n private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n     Iterator\u003cNode\u003e arguments \u003d call.children().iterator();\n     arguments.next();\n     Iterator\u003cNode\u003e parameters \u003d functionType.getParameters().iterator();\n     int ordinal \u003d 0;\n-    while (arguments.hasNext() \u0026\u0026 parameters.hasNext()) {\n-        Node parameter \u003d parameters.next();\n-        Node argument \u003d arguments.next();\n+    Node parameter \u003d null;\n+    Node argument \u003d null;\n+    while (arguments.hasNext() \u0026\u0026 (parameters.hasNext() || parameter !\u003d null \u0026\u0026 parameter.isVarArgs())) {\n+        if (parameters.hasNext()) {\n+            parameter \u003d parameters.next();\n+        }\n+        argument \u003d arguments.next();\n         ordinal++;\n         validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, ordinal);\n     }\n     int numArgs \u003d call.getChildCount() - 1;\n     int minArgs \u003d functionType.getMinArguments();\n     int maxArgs \u003d functionType.getMaxArguments();\n     if (minArgs \u003e numArgs || maxArgs \u003c numArgs) {\n         report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false), String.valueOf(numArgs), String.valueOf(minArgs), maxArgs !\u003d Integer.MAX_VALUE ? \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e829dafb9b3365bda6b6bb80f5fa97783752d143": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/06/17 by nicksantos\n\n        don\u0027t use Sets to build union types.\n\n        R\u003djohnlenz\n        DELTA\u003d76  (52 added, 6 deleted, 18 changed)\n\nChange on 2010/06/17 by nicksantos\n\n        fix a couple bugs in goog.scope processing\n\n        R\u003drobbyw\n        DELTA\u003d54  (42 added, 11 deleted, 1 changed)\n\n\nChange on 2010/06/17 by acleung\n\n        Disables function argument check with @notypecheck is on for the whole file.\n\n        R\u003djohnlenz\n        DELTA\u003d8  (5 added, 1 deleted, 2 changed)\n\nChange on 2010/06/17 by dcc\n\n        Fix NPE in ExportExternsPass with --check_types\u003dfalse.\n\n        R\u003dacleung\n        DELTA\u003d72  (66 added, 4 deleted, 2 changed)\n\nChange on 2010/06/17 by johnlenz\n\n        Change stub method parameters to allow sanity checks to pass with\n        CrossModuleMethodMotion.\n\n        R\u003dnicksantos\n        DELTA\u003d7  (3 added, 0 deleted, 4 changed)\n\nChange on 2010/06/18 by johnlenz\n\n        Modify AliasKeywords so passes the sanity checks: don\u0027t create coding\n        convention constants without annotation them so that the tests pass\n        when the sanity checks are on.\n\n        R\u003dnicksantos\n        DELTA\u003d18  (5 added, 0 deleted, 13 changed)\n\nChange on 2010/06/18 by johnlenz\n\n        Fix source maps when run with sanity checks.\n\n        R\u003dnicksantos\n        DELTA\u003d10  (7 added, 0 deleted, 3 changed)\n\nChange on 2010/06/18 by johnlenz\n\n        Changes to PrepareAst to make it valid to run during SanityChecks.\n\n        R\u003dnicksantos\n        DELTA\u003d18  (5 added, 0 deleted, 13 changed)\n\nChange on 2010/06/18 by nicksantos\n\n        fix constant annotations in CollapseProperties.\n\n        R\u003djohnlenz\n        DELTA\u003d61  (49 added, 1 deleted, 11 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d30002\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@246 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/18/10, 5:18 PM",
      "commitName": "e829dafb9b3365bda6b6bb80f5fa97783752d143",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "6/17/10, 10:16 AM",
      "commitNameOld": "0895c28861ee4a1969acc858f1a703ab11ddc64c",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 1.29,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n    Iterator\u003cNode\u003e arguments \u003d call.children().iterator();\n    arguments.next();\n    Iterator\u003cNode\u003e parameters \u003d functionType.getParameters().iterator();\n    int ordinal \u003d 0;\n    while (arguments.hasNext() \u0026\u0026 parameters.hasNext()) {\n        Node parameter \u003d parameters.next();\n        Node argument \u003d arguments.next();\n        ordinal++;\n        validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n    int numArgs \u003d call.getChildCount() - 1;\n    int minArgs \u003d functionType.getMinArguments();\n    int maxArgs \u003d functionType.getMaxArguments();\n    if (minArgs \u003e numArgs || maxArgs \u003c numArgs) {\n        report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false), String.valueOf(numArgs), String.valueOf(minArgs), maxArgs !\u003d Integer.MAX_VALUE ? \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1383,
      "functionName": "visitParameterList",
      "functionAnnotation": "",
      "functionDoc": "Visits the parameters of a CALL or a NEW node.\n",
      "diff": "@@ -1,18 +1,18 @@\n private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n     Iterator\u003cNode\u003e arguments \u003d call.children().iterator();\n     arguments.next();\n     Iterator\u003cNode\u003e parameters \u003d functionType.getParameters().iterator();\n     int ordinal \u003d 0;\n     while (arguments.hasNext() \u0026\u0026 parameters.hasNext()) {\n         Node parameter \u003d parameters.next();\n         Node argument \u003d arguments.next();\n         ordinal++;\n         validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, ordinal);\n     }\n     int numArgs \u003d call.getChildCount() - 1;\n     int minArgs \u003d functionType.getMinArguments();\n     int maxArgs \u003d functionType.getMaxArguments();\n     if (minArgs \u003e numArgs || maxArgs \u003c numArgs) {\n-        t.getCompiler().report(t.makeError(call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false), String.valueOf(numArgs), String.valueOf(minArgs), maxArgs !\u003d Integer.MAX_VALUE ? \" and no more than \" + maxArgs + \" argument(s)\" : \"\"));\n+        report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false), String.valueOf(numArgs), String.valueOf(minArgs), maxArgs !\u003d Integer.MAX_VALUE ? \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4": {
      "type": "Ybodychange",
      "commitMessage": "Remove circular dependency between error-reporting and the rest\nof the compiler. (Nick)\nR\u003dalan\nDELTA\u003d152  (27 added, 28 deleted, 97 changed)\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@159 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/29/10, 7:04 AM",
      "commitName": "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "3/11/10, 9:31 PM",
      "commitNameOld": "7bfdbd9164601af44d17edd51be829fde2cc51aa",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 17.36,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "actualSource": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n    Iterator\u003cNode\u003e arguments \u003d call.children().iterator();\n    arguments.next();\n    Iterator\u003cNode\u003e parameters \u003d functionType.getParameters().iterator();\n    int ordinal \u003d 0;\n    while (arguments.hasNext() \u0026\u0026 parameters.hasNext()) {\n        Node parameter \u003d parameters.next();\n        Node argument \u003d arguments.next();\n        ordinal++;\n        validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n    int numArgs \u003d call.getChildCount() - 1;\n    int minArgs \u003d functionType.getMinArguments();\n    int maxArgs \u003d functionType.getMaxArguments();\n    if (minArgs \u003e numArgs || maxArgs \u003c numArgs) {\n        t.getCompiler().report(t.makeError(call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false), String.valueOf(numArgs), String.valueOf(minArgs), maxArgs !\u003d Integer.MAX_VALUE ? \" and no more than \" + maxArgs + \" argument(s)\" : \"\"));\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1401,
      "functionName": "visitParameterList",
      "functionAnnotation": "",
      "functionDoc": "Visits the parameters of a CALL or a NEW node.\n",
      "diff": "@@ -1,18 +1,18 @@\n private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n     Iterator\u003cNode\u003e arguments \u003d call.children().iterator();\n     arguments.next();\n     Iterator\u003cNode\u003e parameters \u003d functionType.getParameters().iterator();\n     int ordinal \u003d 0;\n     while (arguments.hasNext() \u0026\u0026 parameters.hasNext()) {\n         Node parameter \u003d parameters.next();\n         Node argument \u003d arguments.next();\n         ordinal++;\n         validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, ordinal);\n     }\n     int numArgs \u003d call.getChildCount() - 1;\n     int minArgs \u003d functionType.getMinArguments();\n     int maxArgs \u003d functionType.getMaxArguments();\n     if (minArgs \u003e numArgs || maxArgs \u003c numArgs) {\n-        t.getCompiler().report(JSError.make(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false), String.valueOf(numArgs), String.valueOf(minArgs), maxArgs !\u003d Integer.MAX_VALUE ? \" and no more than \" + maxArgs + \" argument(s)\" : \"\"));\n+        t.getCompiler().report(t.makeError(call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false), String.valueOf(numArgs), String.valueOf(minArgs), maxArgs !\u003d Integer.MAX_VALUE ? \" and no more than \" + maxArgs + \" argument(s)\" : \"\"));\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,18 @@\n+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n+    Iterator\u003cNode\u003e arguments \u003d call.children().iterator();\n+    arguments.next();\n+    Iterator\u003cNode\u003e parameters \u003d functionType.getParameters().iterator();\n+    int ordinal \u003d 0;\n+    while (arguments.hasNext() \u0026\u0026 parameters.hasNext()) {\n+        Node parameter \u003d parameters.next();\n+        Node argument \u003d arguments.next();\n+        ordinal++;\n+        validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, ordinal);\n+    }\n+    int numArgs \u003d call.getChildCount() - 1;\n+    int minArgs \u003d functionType.getMinArguments();\n+    int maxArgs \u003d functionType.getMaxArguments();\n+    if (minArgs \u003e numArgs || maxArgs \u003c numArgs) {\n+        t.getCompiler().report(JSError.make(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false), String.valueOf(numArgs), String.valueOf(minArgs), maxArgs !\u003d Integer.MAX_VALUE ? \" and no more than \" + maxArgs + \" argument(s)\" : \"\"));\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n    Iterator\u003cNode\u003e arguments \u003d call.children().iterator();\n    arguments.next();\n    Iterator\u003cNode\u003e parameters \u003d functionType.getParameters().iterator();\n    int ordinal \u003d 0;\n    while (arguments.hasNext() \u0026\u0026 parameters.hasNext()) {\n        Node parameter \u003d parameters.next();\n        Node argument \u003d arguments.next();\n        ordinal++;\n        validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n    int numArgs \u003d call.getChildCount() - 1;\n    int minArgs \u003d functionType.getMinArguments();\n    int maxArgs \u003d functionType.getMaxArguments();\n    if (minArgs \u003e numArgs || maxArgs \u003c numArgs) {\n        t.getCompiler().report(JSError.make(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false), String.valueOf(numArgs), String.valueOf(minArgs), maxArgs !\u003d Integer.MAX_VALUE ? \" and no more than \" + maxArgs + \" argument(s)\" : \"\"));\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1370,
      "functionName": "visitParameterList",
      "functionAnnotation": "",
      "functionDoc": "Visits the parameters of a CALL or a NEW node.\n"
    }
  }
}