{
  "origin": "codeshovel",
  "repositoryName": "Closure-48b",
  "repositoryPath": "/tmp/Closure-48b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "IRFactory.java",
  "functionName": "createJsDocInfoParser",
  "functionId": "createJsDocInfoParser___node-Comment__irNode-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
  "functionAnnotation": "",
  "functionDoc": "Creates a JsDocInfoParser and parses the JsDoc string.\n\nUsed both for handling individual JSDoc comments and for handling\nfile-level JSDoc comments (@fileoverview and @license).\n\n@param node The JsDoc Comment node to parse.\n@param irNode\n@return A JSDocInfoParser. Will contain either fileoverview jsdoc, or\n    normal jsdoc, or no jsdoc (if the method parses to the wrong level).\n",
  "functionStartLine": 334,
  "functionEndLine": 354,
  "numCommitsSeen": 120,
  "timeTaken": 5135,
  "changeHistory": [
    "0af94b21ceb7f8f0891b85e5713ff93c230e1bb6",
    "9320feca198878ca9464aae089399a8891c314d7",
    "68c9dd762c89b2d1d0e2c2edb1e82df43602e7bc",
    "f95797059bdc7b6c4cfc4960081f0773ec85bbf8",
    "7287c0ac1d7fb09e5b52a0bf68caf79bfcb09d87",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "0af94b21ceb7f8f0891b85e5713ff93c230e1bb6": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "9320feca198878ca9464aae089399a8891c314d7": "Ybodychange",
    "68c9dd762c89b2d1d0e2c2edb1e82df43602e7bc": "Ybodychange",
    "f95797059bdc7b6c4cfc4960081f0773ec85bbf8": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "7287c0ac1d7fb09e5b52a0bf68caf79bfcb09d87": "Ymultichange(Yrename,Yreturntypechange,Ybodychange,Ydocchange)",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0af94b21ceb7f8f0891b85e5713ff93c230e1bb6": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "\nPart 3, source name/input id split:\nChange the construction of JSDocInfo to allow the determination of\nthe source type (extern or not) without requiring the source to be looked\nup by name.\n\nR\u003dnicksantos\nDELTA\u003d99  (51 added, 21 deleted, 27 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2898\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1327 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/4/11, 9:23 AM",
      "commitName": "0af94b21ceb7f8f0891b85e5713ff93c230e1bb6",
      "commitAuthor": "johnlenz@google.com",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "\nPart 3, source name/input id split:\nChange the construction of JSDocInfo to allow the determination of\nthe source type (extern or not) without requiring the source to be looked\nup by name.\n\nR\u003dnicksantos\nDELTA\u003d99  (51 added, 21 deleted, 27 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2898\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1327 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "8/4/11, 9:23 AM",
          "commitName": "0af94b21ceb7f8f0891b85e5713ff93c230e1bb6",
          "commitAuthor": "johnlenz@google.com",
          "commitDateOld": "7/28/11, 4:19 PM",
          "commitNameOld": "76abdf11394c0e7515ae63335676ea3657badb45",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 6.71,
          "commitsBetweenForRepo": 20,
          "commitsBetweenForFile": 1,
          "actualSource": "private JsDocInfoParser createJsDocInfoParser(Comment node, Node irNode) {\n    String comment \u003d node.getValue();\n    int lineno \u003d node.getLineno();\n    int position \u003d node.getAbsolutePosition();\n    int numOpeningChars \u003d 3;\n    JsDocInfoParser jsdocParser \u003d new JsDocInfoParser(new JsDocTokenStream(comment.substring(numOpeningChars), lineno, position2charno(position) + numOpeningChars), node, irNode, config, errorReporter);\n    jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);\n    jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);\n    jsdocParser.parse();\n    return jsdocParser;\n}",
          "path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
          "functionStartLine": 336,
          "functionName": "createJsDocInfoParser",
          "functionAnnotation": "",
          "functionDoc": "Creates a JsDocInfoParser and parses the JsDoc string.\n\nUsed both for handling individual JSDoc comments and for handling\nfile-level JSDoc comments (@fileoverview and @license).\n\n@param node The JsDoc Comment node to parse.\n@param irNode\n@return A JSDocInfoParser. Will contain either fileoverview jsdoc, or\n    normal jsdoc, or no jsdoc (if the method parses to the wrong level).\n",
          "diff": "@@ -1,11 +1,11 @@\n-private JsDocInfoParser createJsDocInfoParser(Comment node) {\n+private JsDocInfoParser createJsDocInfoParser(Comment node, Node irNode) {\n     String comment \u003d node.getValue();\n     int lineno \u003d node.getLineno();\n     int position \u003d node.getAbsolutePosition();\n     int numOpeningChars \u003d 3;\n-    JsDocInfoParser jsdocParser \u003d new JsDocInfoParser(new JsDocTokenStream(comment.substring(numOpeningChars), lineno, position2charno(position) + numOpeningChars), node, sourceFile, config, errorReporter);\n+    JsDocInfoParser jsdocParser \u003d new JsDocInfoParser(new JsDocTokenStream(comment.substring(numOpeningChars), lineno, position2charno(position) + numOpeningChars), node, irNode, config, errorReporter);\n     jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);\n     jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);\n     jsdocParser.parse();\n     return jsdocParser;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[node-Comment]",
            "newValue": "[node-Comment, irNode-Node]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nPart 3, source name/input id split:\nChange the construction of JSDocInfo to allow the determination of\nthe source type (extern or not) without requiring the source to be looked\nup by name.\n\nR\u003dnicksantos\nDELTA\u003d99  (51 added, 21 deleted, 27 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2898\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1327 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "8/4/11, 9:23 AM",
          "commitName": "0af94b21ceb7f8f0891b85e5713ff93c230e1bb6",
          "commitAuthor": "johnlenz@google.com",
          "commitDateOld": "7/28/11, 4:19 PM",
          "commitNameOld": "76abdf11394c0e7515ae63335676ea3657badb45",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 6.71,
          "commitsBetweenForRepo": 20,
          "commitsBetweenForFile": 1,
          "actualSource": "private JsDocInfoParser createJsDocInfoParser(Comment node, Node irNode) {\n    String comment \u003d node.getValue();\n    int lineno \u003d node.getLineno();\n    int position \u003d node.getAbsolutePosition();\n    int numOpeningChars \u003d 3;\n    JsDocInfoParser jsdocParser \u003d new JsDocInfoParser(new JsDocTokenStream(comment.substring(numOpeningChars), lineno, position2charno(position) + numOpeningChars), node, irNode, config, errorReporter);\n    jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);\n    jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);\n    jsdocParser.parse();\n    return jsdocParser;\n}",
          "path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
          "functionStartLine": 336,
          "functionName": "createJsDocInfoParser",
          "functionAnnotation": "",
          "functionDoc": "Creates a JsDocInfoParser and parses the JsDoc string.\n\nUsed both for handling individual JSDoc comments and for handling\nfile-level JSDoc comments (@fileoverview and @license).\n\n@param node The JsDoc Comment node to parse.\n@param irNode\n@return A JSDocInfoParser. Will contain either fileoverview jsdoc, or\n    normal jsdoc, or no jsdoc (if the method parses to the wrong level).\n",
          "diff": "@@ -1,11 +1,11 @@\n-private JsDocInfoParser createJsDocInfoParser(Comment node) {\n+private JsDocInfoParser createJsDocInfoParser(Comment node, Node irNode) {\n     String comment \u003d node.getValue();\n     int lineno \u003d node.getLineno();\n     int position \u003d node.getAbsolutePosition();\n     int numOpeningChars \u003d 3;\n-    JsDocInfoParser jsdocParser \u003d new JsDocInfoParser(new JsDocTokenStream(comment.substring(numOpeningChars), lineno, position2charno(position) + numOpeningChars), node, sourceFile, config, errorReporter);\n+    JsDocInfoParser jsdocParser \u003d new JsDocInfoParser(new JsDocTokenStream(comment.substring(numOpeningChars), lineno, position2charno(position) + numOpeningChars), node, irNode, config, errorReporter);\n     jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);\n     jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);\n     jsdocParser.parse();\n     return jsdocParser;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "\nPart 3, source name/input id split:\nChange the construction of JSDocInfo to allow the determination of\nthe source type (extern or not) without requiring the source to be looked\nup by name.\n\nR\u003dnicksantos\nDELTA\u003d99  (51 added, 21 deleted, 27 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2898\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1327 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "8/4/11, 9:23 AM",
          "commitName": "0af94b21ceb7f8f0891b85e5713ff93c230e1bb6",
          "commitAuthor": "johnlenz@google.com",
          "commitDateOld": "7/28/11, 4:19 PM",
          "commitNameOld": "76abdf11394c0e7515ae63335676ea3657badb45",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 6.71,
          "commitsBetweenForRepo": 20,
          "commitsBetweenForFile": 1,
          "actualSource": "private JsDocInfoParser createJsDocInfoParser(Comment node, Node irNode) {\n    String comment \u003d node.getValue();\n    int lineno \u003d node.getLineno();\n    int position \u003d node.getAbsolutePosition();\n    int numOpeningChars \u003d 3;\n    JsDocInfoParser jsdocParser \u003d new JsDocInfoParser(new JsDocTokenStream(comment.substring(numOpeningChars), lineno, position2charno(position) + numOpeningChars), node, irNode, config, errorReporter);\n    jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);\n    jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);\n    jsdocParser.parse();\n    return jsdocParser;\n}",
          "path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
          "functionStartLine": 336,
          "functionName": "createJsDocInfoParser",
          "functionAnnotation": "",
          "functionDoc": "Creates a JsDocInfoParser and parses the JsDoc string.\n\nUsed both for handling individual JSDoc comments and for handling\nfile-level JSDoc comments (@fileoverview and @license).\n\n@param node The JsDoc Comment node to parse.\n@param irNode\n@return A JSDocInfoParser. Will contain either fileoverview jsdoc, or\n    normal jsdoc, or no jsdoc (if the method parses to the wrong level).\n",
          "diff": "@@ -1,11 +1,11 @@\n-private JsDocInfoParser createJsDocInfoParser(Comment node) {\n+private JsDocInfoParser createJsDocInfoParser(Comment node, Node irNode) {\n     String comment \u003d node.getValue();\n     int lineno \u003d node.getLineno();\n     int position \u003d node.getAbsolutePosition();\n     int numOpeningChars \u003d 3;\n-    JsDocInfoParser jsdocParser \u003d new JsDocInfoParser(new JsDocTokenStream(comment.substring(numOpeningChars), lineno, position2charno(position) + numOpeningChars), node, sourceFile, config, errorReporter);\n+    JsDocInfoParser jsdocParser \u003d new JsDocInfoParser(new JsDocTokenStream(comment.substring(numOpeningChars), lineno, position2charno(position) + numOpeningChars), node, irNode, config, errorReporter);\n     jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);\n     jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);\n     jsdocParser.parse();\n     return jsdocParser;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Creates a JsDocInfoParser and parses the JsDoc string.\n\nUsed both for handling individual JSDoc comments and for handling\nfile-level JSDoc comments (@fileoverview and @license).\n\n@param node The JsDoc Comment node to parse.\n@return A JSDocInfoParser. Will contain either fileoverview jsdoc, or\n    normal jsdoc, or no jsdoc (if the method parses to the wrong level).\n",
            "newValue": "Creates a JsDocInfoParser and parses the JsDoc string.\n\nUsed both for handling individual JSDoc comments and for handling\nfile-level JSDoc comments (@fileoverview and @license).\n\n@param node The JsDoc Comment node to parse.\n@param irNode\n@return A JSDocInfoParser. Will contain either fileoverview jsdoc, or\n    normal jsdoc, or no jsdoc (if the method parses to the wrong level).\n"
          }
        }
      ]
    },
    "9320feca198878ca9464aae089399a8891c314d7": {
      "type": "Ybodychange",
      "commitMessage": "\nMake StaticSourceFile a property of Node\n\nR\u003djohnlenz\nDELTA\u003d183  (102 added, 25 deleted, 56 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2496\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1236 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/30/11, 1:25 PM",
      "commitName": "9320feca198878ca9464aae089399a8891c314d7",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "6/9/11, 12:01 PM",
      "commitNameOld": "0235adc719d0858653861b8ced39a1d057cf93a0",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 21.06,
      "commitsBetweenForRepo": 65,
      "commitsBetweenForFile": 1,
      "actualSource": "private JsDocInfoParser createJsDocInfoParser(Comment node) {\n    String comment \u003d node.getValue();\n    int lineno \u003d node.getLineno();\n    int position \u003d node.getAbsolutePosition();\n    int numOpeningChars \u003d 3;\n    JsDocInfoParser jsdocParser \u003d new JsDocInfoParser(new JsDocTokenStream(comment.substring(numOpeningChars), lineno, position2charno(position) + numOpeningChars), node, sourceFile, config, errorReporter);\n    jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);\n    jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);\n    jsdocParser.parse();\n    return jsdocParser;\n}",
      "path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
      "functionStartLine": 332,
      "functionName": "createJsDocInfoParser",
      "functionAnnotation": "",
      "functionDoc": "Creates a JsDocInfoParser and parses the JsDoc string.\n\nUsed both for handling individual JSDoc comments and for handling\nfile-level JSDoc comments (@fileoverview and @license).\n\n@param node The JsDoc Comment node to parse.\n@return A JSDocInfoParser. Will contain either fileoverview jsdoc, or\n    normal jsdoc, or no jsdoc (if the method parses to the wrong level).\n",
      "diff": "@@ -1,11 +1,11 @@\n private JsDocInfoParser createJsDocInfoParser(Comment node) {\n     String comment \u003d node.getValue();\n     int lineno \u003d node.getLineno();\n     int position \u003d node.getAbsolutePosition();\n     int numOpeningChars \u003d 3;\n-    JsDocInfoParser jsdocParser \u003d new JsDocInfoParser(new JsDocTokenStream(comment.substring(numOpeningChars), lineno, position2charno(position) + numOpeningChars), node, sourceName, config, errorReporter);\n+    JsDocInfoParser jsdocParser \u003d new JsDocInfoParser(new JsDocTokenStream(comment.substring(numOpeningChars), lineno, position2charno(position) + numOpeningChars), node, sourceFile, config, errorReporter);\n     jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);\n     jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);\n     jsdocParser.parse();\n     return jsdocParser;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "68c9dd762c89b2d1d0e2c2edb1e82df43602e7bc": {
      "type": "Ybodychange",
      "commitMessage": "\nRecord the original source comment if parseJsDocDocumentation\nis enabled\n\nR\u003dtylerg\nDELTA\u003d47  (44 added, 1 deleted, 2 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d177\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@654 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/21/10, 11:18 AM",
      "commitName": "68c9dd762c89b2d1d0e2c2edb1e82df43602e7bc",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "12/7/10, 12:48 PM",
      "commitNameOld": "be0104009f06fafdb7428398d2c8299d13a1df12",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 13.94,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "actualSource": "private JsDocInfoParser createJsDocInfoParser(Comment node) {\n    String comment \u003d node.getValue();\n    int lineno \u003d node.getLineno();\n    int position \u003d node.getAbsolutePosition();\n    int numOpeningChars \u003d 3;\n    JsDocInfoParser jsdocParser \u003d new JsDocInfoParser(new JsDocTokenStream(comment.substring(numOpeningChars), lineno, position2charno(position) + numOpeningChars), node, sourceName, config, errorReporter);\n    jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);\n    jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);\n    jsdocParser.parse();\n    return jsdocParser;\n}",
      "path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
      "functionStartLine": 240,
      "functionName": "createJsDocInfoParser",
      "functionAnnotation": "",
      "functionDoc": "Creates a JsDocInfoParser and parses the JsDoc string.\n\nUsed both for handling individual JSDoc comments and for handling\nfile-level JSDoc comments (@fileoverview and @license).\n\n@param node The JsDoc Comment node to parse.\n@return A JSDocInfoParser. Will contain either fileoverview jsdoc, or\n    normal jsdoc, or no jsdoc (if the method parses to the wrong level).\n",
      "diff": "@@ -1,11 +1,11 @@\n private JsDocInfoParser createJsDocInfoParser(Comment node) {\n     String comment \u003d node.getValue();\n     int lineno \u003d node.getLineno();\n     int position \u003d node.getAbsolutePosition();\n     int numOpeningChars \u003d 3;\n-    JsDocInfoParser jsdocParser \u003d new JsDocInfoParser(new JsDocTokenStream(comment.substring(numOpeningChars), lineno, position2charno(position) + numOpeningChars), sourceName, config, errorReporter);\n+    JsDocInfoParser jsdocParser \u003d new JsDocInfoParser(new JsDocTokenStream(comment.substring(numOpeningChars), lineno, position2charno(position) + numOpeningChars), node, sourceName, config, errorReporter);\n     jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);\n     jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);\n     jsdocParser.parse();\n     return jsdocParser;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f95797059bdc7b6c4cfc4960081f0773ec85bbf8": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "\nClean up some record keeping of comments.  This doesn\u0027t appear to have\nhelped the parsing speed at all.\n\nR\u003dnicksantos\nDELTA\u003d134  (45 added, 66 deleted, 23 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d266012\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@465 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/27/10, 1:21 PM",
      "commitName": "f95797059bdc7b6c4cfc4960081f0773ec85bbf8",
      "commitAuthor": "johnlenz@google.com",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "\nClean up some record keeping of comments.  This doesn\u0027t appear to have\nhelped the parsing speed at all.\n\nR\u003dnicksantos\nDELTA\u003d134  (45 added, 66 deleted, 23 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d266012\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@465 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "9/27/10, 1:21 PM",
          "commitName": "f95797059bdc7b6c4cfc4960081f0773ec85bbf8",
          "commitAuthor": "johnlenz@google.com",
          "commitDateOld": "9/13/10, 11:12 AM",
          "commitNameOld": "4c6e1039b80859f17de5f3cbcfeba61ed8ea0485",
          "commitAuthorOld": "elbaum@google.com",
          "daysBetweenCommits": 14.09,
          "commitsBetweenForRepo": 41,
          "commitsBetweenForFile": 1,
          "actualSource": "private JsDocInfoParser createJsDocInfoParser(Comment node) {\n    String comment \u003d node.getValue();\n    int lineno \u003d node.getLineno();\n    int position \u003d node.getAbsolutePosition();\n    int numOpeningChars \u003d 3;\n    JsDocInfoParser jsdocParser \u003d new JsDocInfoParser(new JsDocTokenStream(comment.substring(numOpeningChars), lineno, position2charno(position) + numOpeningChars), sourceName, config, errorReporter);\n    jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);\n    jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);\n    jsdocParser.parse();\n    return jsdocParser;\n}",
          "path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
          "functionStartLine": 240,
          "functionName": "createJsDocInfoParser",
          "functionAnnotation": "",
          "functionDoc": "Creates a JsDocInfoParser and parses the JsDoc string.\n\nUsed both for handling individual JSDoc comments and for handling\nfile-level JSDoc comments (@fileoverview and @license).\n\n@param node The JsDoc Comment node to parse.\n@return A JSDocInfoParser. Will contain either fileoverview jsdoc, or\n    normal jsdoc, or no jsdoc (if the method parses to the wrong level).\n",
          "diff": "@@ -1,8 +1,11 @@\n-private JsDocInfoParser createJsDocInfoParser(String comment, int lineno, int position, Node.FileLevelJsDocBuilder fileLevelJsDocBuilder, JSDocInfo fileOverviewInfo) {\n+private JsDocInfoParser createJsDocInfoParser(Comment node) {\n+    String comment \u003d node.getValue();\n+    int lineno \u003d node.getLineno();\n+    int position \u003d node.getAbsolutePosition();\n     int numOpeningChars \u003d 3;\n     JsDocInfoParser jsdocParser \u003d new JsDocInfoParser(new JsDocTokenStream(comment.substring(numOpeningChars), lineno, position2charno(position) + numOpeningChars), sourceName, config, errorReporter);\n     jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);\n     jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);\n     jsdocParser.parse();\n     return jsdocParser;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[comment-String, lineno-int, position-int, fileLevelJsDocBuilder-Node.FileLevelJsDocBuilder, fileOverviewInfo-JSDocInfo]",
            "newValue": "[node-Comment]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nClean up some record keeping of comments.  This doesn\u0027t appear to have\nhelped the parsing speed at all.\n\nR\u003dnicksantos\nDELTA\u003d134  (45 added, 66 deleted, 23 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d266012\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@465 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "9/27/10, 1:21 PM",
          "commitName": "f95797059bdc7b6c4cfc4960081f0773ec85bbf8",
          "commitAuthor": "johnlenz@google.com",
          "commitDateOld": "9/13/10, 11:12 AM",
          "commitNameOld": "4c6e1039b80859f17de5f3cbcfeba61ed8ea0485",
          "commitAuthorOld": "elbaum@google.com",
          "daysBetweenCommits": 14.09,
          "commitsBetweenForRepo": 41,
          "commitsBetweenForFile": 1,
          "actualSource": "private JsDocInfoParser createJsDocInfoParser(Comment node) {\n    String comment \u003d node.getValue();\n    int lineno \u003d node.getLineno();\n    int position \u003d node.getAbsolutePosition();\n    int numOpeningChars \u003d 3;\n    JsDocInfoParser jsdocParser \u003d new JsDocInfoParser(new JsDocTokenStream(comment.substring(numOpeningChars), lineno, position2charno(position) + numOpeningChars), sourceName, config, errorReporter);\n    jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);\n    jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);\n    jsdocParser.parse();\n    return jsdocParser;\n}",
          "path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
          "functionStartLine": 240,
          "functionName": "createJsDocInfoParser",
          "functionAnnotation": "",
          "functionDoc": "Creates a JsDocInfoParser and parses the JsDoc string.\n\nUsed both for handling individual JSDoc comments and for handling\nfile-level JSDoc comments (@fileoverview and @license).\n\n@param node The JsDoc Comment node to parse.\n@return A JSDocInfoParser. Will contain either fileoverview jsdoc, or\n    normal jsdoc, or no jsdoc (if the method parses to the wrong level).\n",
          "diff": "@@ -1,8 +1,11 @@\n-private JsDocInfoParser createJsDocInfoParser(String comment, int lineno, int position, Node.FileLevelJsDocBuilder fileLevelJsDocBuilder, JSDocInfo fileOverviewInfo) {\n+private JsDocInfoParser createJsDocInfoParser(Comment node) {\n+    String comment \u003d node.getValue();\n+    int lineno \u003d node.getLineno();\n+    int position \u003d node.getAbsolutePosition();\n     int numOpeningChars \u003d 3;\n     JsDocInfoParser jsdocParser \u003d new JsDocInfoParser(new JsDocTokenStream(comment.substring(numOpeningChars), lineno, position2charno(position) + numOpeningChars), sourceName, config, errorReporter);\n     jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);\n     jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);\n     jsdocParser.parse();\n     return jsdocParser;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "\nClean up some record keeping of comments.  This doesn\u0027t appear to have\nhelped the parsing speed at all.\n\nR\u003dnicksantos\nDELTA\u003d134  (45 added, 66 deleted, 23 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d266012\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@465 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "9/27/10, 1:21 PM",
          "commitName": "f95797059bdc7b6c4cfc4960081f0773ec85bbf8",
          "commitAuthor": "johnlenz@google.com",
          "commitDateOld": "9/13/10, 11:12 AM",
          "commitNameOld": "4c6e1039b80859f17de5f3cbcfeba61ed8ea0485",
          "commitAuthorOld": "elbaum@google.com",
          "daysBetweenCommits": 14.09,
          "commitsBetweenForRepo": 41,
          "commitsBetweenForFile": 1,
          "actualSource": "private JsDocInfoParser createJsDocInfoParser(Comment node) {\n    String comment \u003d node.getValue();\n    int lineno \u003d node.getLineno();\n    int position \u003d node.getAbsolutePosition();\n    int numOpeningChars \u003d 3;\n    JsDocInfoParser jsdocParser \u003d new JsDocInfoParser(new JsDocTokenStream(comment.substring(numOpeningChars), lineno, position2charno(position) + numOpeningChars), sourceName, config, errorReporter);\n    jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);\n    jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);\n    jsdocParser.parse();\n    return jsdocParser;\n}",
          "path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
          "functionStartLine": 240,
          "functionName": "createJsDocInfoParser",
          "functionAnnotation": "",
          "functionDoc": "Creates a JsDocInfoParser and parses the JsDoc string.\n\nUsed both for handling individual JSDoc comments and for handling\nfile-level JSDoc comments (@fileoverview and @license).\n\n@param node The JsDoc Comment node to parse.\n@return A JSDocInfoParser. Will contain either fileoverview jsdoc, or\n    normal jsdoc, or no jsdoc (if the method parses to the wrong level).\n",
          "diff": "@@ -1,8 +1,11 @@\n-private JsDocInfoParser createJsDocInfoParser(String comment, int lineno, int position, Node.FileLevelJsDocBuilder fileLevelJsDocBuilder, JSDocInfo fileOverviewInfo) {\n+private JsDocInfoParser createJsDocInfoParser(Comment node) {\n+    String comment \u003d node.getValue();\n+    int lineno \u003d node.getLineno();\n+    int position \u003d node.getAbsolutePosition();\n     int numOpeningChars \u003d 3;\n     JsDocInfoParser jsdocParser \u003d new JsDocInfoParser(new JsDocTokenStream(comment.substring(numOpeningChars), lineno, position2charno(position) + numOpeningChars), sourceName, config, errorReporter);\n     jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);\n     jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);\n     jsdocParser.parse();\n     return jsdocParser;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Creates a JsDocInfoParser and parses the JsDoc string.\n\nUsed both for handling individual JSDoc comments and for handling\nfile-level JSDoc comments (@fileoverview and @license).\n\n@param comment The JsDoc comment to parse.\n@param lineno The line number of the node this comment is attached to.\n@param fileLevelJsDocBuilder The builder for file-level JSDocInfo.\n@param fileOverviewInfo The current @fileoverview JSDocInfo, so that the\n    parser may warn if another @fileoverview is found. May be null.\n@return A JSDocInfoParser. Will contain either fileoverview jsdoc, or\n    normal jsdoc, or no jsdoc (if the method parses to the wrong level).\n",
            "newValue": "Creates a JsDocInfoParser and parses the JsDoc string.\n\nUsed both for handling individual JSDoc comments and for handling\nfile-level JSDoc comments (@fileoverview and @license).\n\n@param node The JsDoc Comment node to parse.\n@return A JSDocInfoParser. Will contain either fileoverview jsdoc, or\n    normal jsdoc, or no jsdoc (if the method parses to the wrong level).\n"
          }
        }
      ]
    },
    "7287c0ac1d7fb09e5b52a0bf68caf79bfcb09d87": {
      "type": "Ymultichange(Yrename,Yreturntypechange,Ybodychange,Ydocchange)",
      "commitMessage": "Speed up parsing a bit by refactoring how we pull jsdoc comments into\nthe AST.\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@101 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/10/10, 3:02 PM",
      "commitName": "7287c0ac1d7fb09e5b52a0bf68caf79bfcb09d87",
      "commitAuthor": "Nicholas.J.Santos",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "Speed up parsing a bit by refactoring how we pull jsdoc comments into\nthe AST.\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@101 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "2/10/10, 3:02 PM",
          "commitName": "7287c0ac1d7fb09e5b52a0bf68caf79bfcb09d87",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "12/8/09, 3:50 PM",
          "commitNameOld": "847b296c23a63aa0a0b38cc3e63883e1688288e3",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 63.97,
          "commitsBetweenForRepo": 56,
          "commitsBetweenForFile": 1,
          "actualSource": "private JsDocInfoParser createJsDocInfoParser(String comment, int lineno, int position, Node.FileLevelJsDocBuilder fileLevelJsDocBuilder, JSDocInfo fileOverviewInfo) {\n    int numOpeningChars \u003d 3;\n    JsDocInfoParser jsdocParser \u003d new JsDocInfoParser(new JsDocTokenStream(comment.substring(numOpeningChars), lineno, position2charno(position) + numOpeningChars), sourceName, config, errorReporter);\n    jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);\n    jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);\n    jsdocParser.parse();\n    return jsdocParser;\n}",
          "path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
          "functionStartLine": 223,
          "functionName": "createJsDocInfoParser",
          "functionAnnotation": "",
          "functionDoc": "Creates a JsDocInfoParser and parses the JsDoc string.\n\nUsed both for handling individual JSDoc comments and for handling\nfile-level JSDoc comments (@fileoverview and @license).\n\n@param comment The JsDoc comment to parse.\n@param lineno The line number of the node this comment is attached to.\n@param fileLevelJsDocBuilder The builder for file-level JSDocInfo.\n@param fileOverviewInfo The current @fileoverview JSDocInfo, so that the\n    parser may warn if another @fileoverview is found. May be null.\n@return A JSDocInfoParser. Will contain either fileoverview jsdoc, or\n    normal jsdoc, or no jsdoc (if the method parses to the wrong level).\n",
          "diff": "@@ -1,12 +1,8 @@\n-private JSDocInfo parseJSDocInfo(String comment, int lineno, int position, Node.FileLevelJsDocBuilder fileLevelJsDocBuilder, JSDocInfo fileOverviewInfo) {\n+private JsDocInfoParser createJsDocInfoParser(String comment, int lineno, int position, Node.FileLevelJsDocBuilder fileLevelJsDocBuilder, JSDocInfo fileOverviewInfo) {\n     int numOpeningChars \u003d 3;\n     JsDocInfoParser jsdocParser \u003d new JsDocInfoParser(new JsDocTokenStream(comment.substring(numOpeningChars), lineno, position2charno(position) + numOpeningChars), sourceName, config, errorReporter);\n     jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);\n     jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);\n     jsdocParser.parse();\n-    if (fileLevelJsDocBuilder !\u003d null) {\n-        return jsdocParser.getFileOverviewJSDocInfo();\n-    } else {\n-        return jsdocParser.retrieveAndResetParsedJSDocInfo();\n-    }\n+    return jsdocParser;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "parseJSDocInfo",
            "newValue": "createJsDocInfoParser"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "Speed up parsing a bit by refactoring how we pull jsdoc comments into\nthe AST.\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@101 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "2/10/10, 3:02 PM",
          "commitName": "7287c0ac1d7fb09e5b52a0bf68caf79bfcb09d87",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "12/8/09, 3:50 PM",
          "commitNameOld": "847b296c23a63aa0a0b38cc3e63883e1688288e3",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 63.97,
          "commitsBetweenForRepo": 56,
          "commitsBetweenForFile": 1,
          "actualSource": "private JsDocInfoParser createJsDocInfoParser(String comment, int lineno, int position, Node.FileLevelJsDocBuilder fileLevelJsDocBuilder, JSDocInfo fileOverviewInfo) {\n    int numOpeningChars \u003d 3;\n    JsDocInfoParser jsdocParser \u003d new JsDocInfoParser(new JsDocTokenStream(comment.substring(numOpeningChars), lineno, position2charno(position) + numOpeningChars), sourceName, config, errorReporter);\n    jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);\n    jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);\n    jsdocParser.parse();\n    return jsdocParser;\n}",
          "path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
          "functionStartLine": 223,
          "functionName": "createJsDocInfoParser",
          "functionAnnotation": "",
          "functionDoc": "Creates a JsDocInfoParser and parses the JsDoc string.\n\nUsed both for handling individual JSDoc comments and for handling\nfile-level JSDoc comments (@fileoverview and @license).\n\n@param comment The JsDoc comment to parse.\n@param lineno The line number of the node this comment is attached to.\n@param fileLevelJsDocBuilder The builder for file-level JSDocInfo.\n@param fileOverviewInfo The current @fileoverview JSDocInfo, so that the\n    parser may warn if another @fileoverview is found. May be null.\n@return A JSDocInfoParser. Will contain either fileoverview jsdoc, or\n    normal jsdoc, or no jsdoc (if the method parses to the wrong level).\n",
          "diff": "@@ -1,12 +1,8 @@\n-private JSDocInfo parseJSDocInfo(String comment, int lineno, int position, Node.FileLevelJsDocBuilder fileLevelJsDocBuilder, JSDocInfo fileOverviewInfo) {\n+private JsDocInfoParser createJsDocInfoParser(String comment, int lineno, int position, Node.FileLevelJsDocBuilder fileLevelJsDocBuilder, JSDocInfo fileOverviewInfo) {\n     int numOpeningChars \u003d 3;\n     JsDocInfoParser jsdocParser \u003d new JsDocInfoParser(new JsDocTokenStream(comment.substring(numOpeningChars), lineno, position2charno(position) + numOpeningChars), sourceName, config, errorReporter);\n     jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);\n     jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);\n     jsdocParser.parse();\n-    if (fileLevelJsDocBuilder !\u003d null) {\n-        return jsdocParser.getFileOverviewJSDocInfo();\n-    } else {\n-        return jsdocParser.retrieveAndResetParsedJSDocInfo();\n-    }\n+    return jsdocParser;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "JSDocInfo",
            "newValue": "JsDocInfoParser"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Speed up parsing a bit by refactoring how we pull jsdoc comments into\nthe AST.\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@101 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "2/10/10, 3:02 PM",
          "commitName": "7287c0ac1d7fb09e5b52a0bf68caf79bfcb09d87",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "12/8/09, 3:50 PM",
          "commitNameOld": "847b296c23a63aa0a0b38cc3e63883e1688288e3",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 63.97,
          "commitsBetweenForRepo": 56,
          "commitsBetweenForFile": 1,
          "actualSource": "private JsDocInfoParser createJsDocInfoParser(String comment, int lineno, int position, Node.FileLevelJsDocBuilder fileLevelJsDocBuilder, JSDocInfo fileOverviewInfo) {\n    int numOpeningChars \u003d 3;\n    JsDocInfoParser jsdocParser \u003d new JsDocInfoParser(new JsDocTokenStream(comment.substring(numOpeningChars), lineno, position2charno(position) + numOpeningChars), sourceName, config, errorReporter);\n    jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);\n    jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);\n    jsdocParser.parse();\n    return jsdocParser;\n}",
          "path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
          "functionStartLine": 223,
          "functionName": "createJsDocInfoParser",
          "functionAnnotation": "",
          "functionDoc": "Creates a JsDocInfoParser and parses the JsDoc string.\n\nUsed both for handling individual JSDoc comments and for handling\nfile-level JSDoc comments (@fileoverview and @license).\n\n@param comment The JsDoc comment to parse.\n@param lineno The line number of the node this comment is attached to.\n@param fileLevelJsDocBuilder The builder for file-level JSDocInfo.\n@param fileOverviewInfo The current @fileoverview JSDocInfo, so that the\n    parser may warn if another @fileoverview is found. May be null.\n@return A JSDocInfoParser. Will contain either fileoverview jsdoc, or\n    normal jsdoc, or no jsdoc (if the method parses to the wrong level).\n",
          "diff": "@@ -1,12 +1,8 @@\n-private JSDocInfo parseJSDocInfo(String comment, int lineno, int position, Node.FileLevelJsDocBuilder fileLevelJsDocBuilder, JSDocInfo fileOverviewInfo) {\n+private JsDocInfoParser createJsDocInfoParser(String comment, int lineno, int position, Node.FileLevelJsDocBuilder fileLevelJsDocBuilder, JSDocInfo fileOverviewInfo) {\n     int numOpeningChars \u003d 3;\n     JsDocInfoParser jsdocParser \u003d new JsDocInfoParser(new JsDocTokenStream(comment.substring(numOpeningChars), lineno, position2charno(position) + numOpeningChars), sourceName, config, errorReporter);\n     jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);\n     jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);\n     jsdocParser.parse();\n-    if (fileLevelJsDocBuilder !\u003d null) {\n-        return jsdocParser.getFileOverviewJSDocInfo();\n-    } else {\n-        return jsdocParser.retrieveAndResetParsedJSDocInfo();\n-    }\n+    return jsdocParser;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Speed up parsing a bit by refactoring how we pull jsdoc comments into\nthe AST.\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@101 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "2/10/10, 3:02 PM",
          "commitName": "7287c0ac1d7fb09e5b52a0bf68caf79bfcb09d87",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "12/8/09, 3:50 PM",
          "commitNameOld": "847b296c23a63aa0a0b38cc3e63883e1688288e3",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 63.97,
          "commitsBetweenForRepo": 56,
          "commitsBetweenForFile": 1,
          "actualSource": "private JsDocInfoParser createJsDocInfoParser(String comment, int lineno, int position, Node.FileLevelJsDocBuilder fileLevelJsDocBuilder, JSDocInfo fileOverviewInfo) {\n    int numOpeningChars \u003d 3;\n    JsDocInfoParser jsdocParser \u003d new JsDocInfoParser(new JsDocTokenStream(comment.substring(numOpeningChars), lineno, position2charno(position) + numOpeningChars), sourceName, config, errorReporter);\n    jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);\n    jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);\n    jsdocParser.parse();\n    return jsdocParser;\n}",
          "path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
          "functionStartLine": 223,
          "functionName": "createJsDocInfoParser",
          "functionAnnotation": "",
          "functionDoc": "Creates a JsDocInfoParser and parses the JsDoc string.\n\nUsed both for handling individual JSDoc comments and for handling\nfile-level JSDoc comments (@fileoverview and @license).\n\n@param comment The JsDoc comment to parse.\n@param lineno The line number of the node this comment is attached to.\n@param fileLevelJsDocBuilder The builder for file-level JSDocInfo.\n@param fileOverviewInfo The current @fileoverview JSDocInfo, so that the\n    parser may warn if another @fileoverview is found. May be null.\n@return A JSDocInfoParser. Will contain either fileoverview jsdoc, or\n    normal jsdoc, or no jsdoc (if the method parses to the wrong level).\n",
          "diff": "@@ -1,12 +1,8 @@\n-private JSDocInfo parseJSDocInfo(String comment, int lineno, int position, Node.FileLevelJsDocBuilder fileLevelJsDocBuilder, JSDocInfo fileOverviewInfo) {\n+private JsDocInfoParser createJsDocInfoParser(String comment, int lineno, int position, Node.FileLevelJsDocBuilder fileLevelJsDocBuilder, JSDocInfo fileOverviewInfo) {\n     int numOpeningChars \u003d 3;\n     JsDocInfoParser jsdocParser \u003d new JsDocInfoParser(new JsDocTokenStream(comment.substring(numOpeningChars), lineno, position2charno(position) + numOpeningChars), sourceName, config, errorReporter);\n     jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);\n     jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);\n     jsdocParser.parse();\n-    if (fileLevelJsDocBuilder !\u003d null) {\n-        return jsdocParser.getFileOverviewJSDocInfo();\n-    } else {\n-        return jsdocParser.retrieveAndResetParsedJSDocInfo();\n-    }\n+    return jsdocParser;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Parse a JsDoc string into a JSDocInfo.\n\nUsed both for handling individual JSDoc comments (when it returns the new\nJSDocInfo for the node) and for handling file-level JSDoc comments\n(@fileoverview and @license).  In this second case, it returns a\nJSDocInfo if it found another @fileoverview, or null if not.  Also in\nthe second case, all @license text found gets shoved into the\nfileLevelJsDocBuilder object.\n\n@param comment The JsDoc comment to parse.\n@param lineno The line number of the node this comment is attached to.\n@param fileLevelJsDocBuilder The builder for file-level JSDocInfo. If not\n    null, this method parses to a fileOverview JSDocInfo as opposed to a\n    node-level one.\n@param fileOverviewInfo The current @fileoverview JSDocInfo, so that the\n    parser may warn if another @fileoverview is found. May be null.\n@return A JSDocInfo. May be null if the method parses to the wrong level.\n",
            "newValue": "Creates a JsDocInfoParser and parses the JsDoc string.\n\nUsed both for handling individual JSDoc comments and for handling\nfile-level JSDoc comments (@fileoverview and @license).\n\n@param comment The JsDoc comment to parse.\n@param lineno The line number of the node this comment is attached to.\n@param fileLevelJsDocBuilder The builder for file-level JSDocInfo.\n@param fileOverviewInfo The current @fileoverview JSDocInfo, so that the\n    parser may warn if another @fileoverview is found. May be null.\n@return A JSDocInfoParser. Will contain either fileoverview jsdoc, or\n    normal jsdoc, or no jsdoc (if the method parses to the wrong level).\n"
          }
        }
      ]
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,12 @@\n+private JSDocInfo parseJSDocInfo(String comment, int lineno, int position, Node.FileLevelJsDocBuilder fileLevelJsDocBuilder, JSDocInfo fileOverviewInfo) {\n+    int numOpeningChars \u003d 3;\n+    JsDocInfoParser jsdocParser \u003d new JsDocInfoParser(new JsDocTokenStream(comment.substring(numOpeningChars), lineno, position2charno(position) + numOpeningChars), sourceName, config, errorReporter);\n+    jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);\n+    jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);\n+    jsdocParser.parse();\n+    if (fileLevelJsDocBuilder !\u003d null) {\n+        return jsdocParser.getFileOverviewJSDocInfo();\n+    } else {\n+        return jsdocParser.retrieveAndResetParsedJSDocInfo();\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private JSDocInfo parseJSDocInfo(String comment, int lineno, int position, Node.FileLevelJsDocBuilder fileLevelJsDocBuilder, JSDocInfo fileOverviewInfo) {\n    int numOpeningChars \u003d 3;\n    JsDocInfoParser jsdocParser \u003d new JsDocInfoParser(new JsDocTokenStream(comment.substring(numOpeningChars), lineno, position2charno(position) + numOpeningChars), sourceName, config, errorReporter);\n    jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);\n    jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);\n    jsdocParser.parse();\n    if (fileLevelJsDocBuilder !\u003d null) {\n        return jsdocParser.getFileOverviewJSDocInfo();\n    } else {\n        return jsdocParser.retrieveAndResetParsedJSDocInfo();\n    }\n}",
      "path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
      "functionStartLine": 256,
      "functionName": "parseJSDocInfo",
      "functionAnnotation": "",
      "functionDoc": "Parse a JsDoc string into a JSDocInfo.\n\nUsed both for handling individual JSDoc comments (when it returns the new\nJSDocInfo for the node) and for handling file-level JSDoc comments\n(@fileoverview and @license).  In this second case, it returns a\nJSDocInfo if it found another @fileoverview, or null if not.  Also in\nthe second case, all @license text found gets shoved into the\nfileLevelJsDocBuilder object.\n\n@param comment The JsDoc comment to parse.\n@param lineno The line number of the node this comment is attached to.\n@param fileLevelJsDocBuilder The builder for file-level JSDocInfo. If not\n    null, this method parses to a fileOverview JSDocInfo as opposed to a\n    node-level one.\n@param fileOverviewInfo The current @fileoverview JSDocInfo, so that the\n    parser may warn if another @fileoverview is found. May be null.\n@return A JSDocInfo. May be null if the method parses to the wrong level.\n"
    }
  }
}