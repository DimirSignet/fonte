{
  "origin": "codeshovel",
  "repositoryName": "Closure-48b",
  "repositoryPath": "/tmp/Closure-48b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ClosureCodingConvention.java",
  "functionName": "getObjectLiteralCast",
  "functionId": "getObjectLiteralCast___t-NodeTraversal__callNode-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 299,
  "functionEndLine": 323,
  "numCommitsSeen": 32,
  "timeTaken": 1063,
  "changeHistory": [
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
    "9407ab7f8cabbfc7c475a1521b13ca51907d145b",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c": "Ybodychange",
    "9407ab7f8cabbfc7c475a1521b13ca51907d145b": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c": {
      "type": "Ybodychange",
      "commitMessage": "\nReplace the bulk of the Node.getType() \u003d\u003d Token.XXX calls with\nNode.isXXX calls.\n\nR\u003dnicksantos\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3677\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1582 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/10/11, 8:36 AM",
      "commitName": "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/8/11, 12:25 PM",
      "commitNameOld": "9d8201624c22636577d47a40aa03de44363b695b",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 1.84,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic ObjectLiteralCast getObjectLiteralCast(NodeTraversal t, Node callNode) {\n    Preconditions.checkArgument(callNode.isCall());\n    Node callName \u003d callNode.getFirstChild();\n    if (!\"goog.reflect.object\".equals(callName.getQualifiedName()) || callNode.getChildCount() !\u003d 3) {\n        return null;\n    }\n    Node typeNode \u003d callName.getNext();\n    if (!typeNode.isQualifiedName()) {\n        return null;\n    }\n    Node objectNode \u003d typeNode.getNext();\n    if (objectNode.getType() !\u003d Token.OBJECTLIT) {\n        t.getCompiler().report(JSError.make(t.getSourceName(), callNode, OBJECTLIT_EXPECTED));\n        return null;\n    }\n    return new ObjectLiteralCast(typeNode.getQualifiedName(), typeNode.getNext());\n}",
      "path": "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
      "functionStartLine": 299,
      "functionName": "getObjectLiteralCast",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,18 +1,18 @@\n @Override\n public ObjectLiteralCast getObjectLiteralCast(NodeTraversal t, Node callNode) {\n-    Preconditions.checkArgument(callNode.getType() \u003d\u003d Token.CALL);\n+    Preconditions.checkArgument(callNode.isCall());\n     Node callName \u003d callNode.getFirstChild();\n     if (!\"goog.reflect.object\".equals(callName.getQualifiedName()) || callNode.getChildCount() !\u003d 3) {\n         return null;\n     }\n     Node typeNode \u003d callName.getNext();\n     if (!typeNode.isQualifiedName()) {\n         return null;\n     }\n     Node objectNode \u003d typeNode.getNext();\n     if (objectNode.getType() !\u003d Token.OBJECTLIT) {\n         t.getCompiler().report(JSError.make(t.getSourceName(), callNode, OBJECTLIT_EXPECTED));\n         return null;\n     }\n     return new ObjectLiteralCast(typeNode.getQualifiedName(), typeNode.getNext());\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9407ab7f8cabbfc7c475a1521b13ca51907d145b": {
      "type": "Ybodychange",
      "commitMessage": "\nDon\u0027t crash on bad goog.reflect.object calls.\n\nR\u003dacleung\nDELTA\u003d21  (19 added, 1 deleted, 1 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2143\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1155 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/2/11, 11:32 AM",
      "commitName": "9407ab7f8cabbfc7c475a1521b13ca51907d145b",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "6/1/11, 1:41 PM",
      "commitNameOld": "32c0f8b8b23713431c3866ab5769e735abe3a429",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.91,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic ObjectLiteralCast getObjectLiteralCast(NodeTraversal t, Node callNode) {\n    Preconditions.checkArgument(callNode.getType() \u003d\u003d Token.CALL);\n    Node callName \u003d callNode.getFirstChild();\n    if (!\"goog.reflect.object\".equals(callName.getQualifiedName()) || callNode.getChildCount() !\u003d 3) {\n        return null;\n    }\n    Node typeNode \u003d callName.getNext();\n    if (!typeNode.isQualifiedName()) {\n        return null;\n    }\n    Node objectNode \u003d typeNode.getNext();\n    if (objectNode.getType() !\u003d Token.OBJECTLIT) {\n        t.getCompiler().report(JSError.make(t.getSourceName(), callNode, OBJECTLIT_EXPECTED));\n        return null;\n    }\n    return new ObjectLiteralCast(typeNode.getQualifiedName(), typeNode.getNext());\n}",
      "path": "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
      "functionStartLine": 286,
      "functionName": "getObjectLiteralCast",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,18 +1,18 @@\n @Override\n public ObjectLiteralCast getObjectLiteralCast(NodeTraversal t, Node callNode) {\n     Preconditions.checkArgument(callNode.getType() \u003d\u003d Token.CALL);\n     Node callName \u003d callNode.getFirstChild();\n-    if (!\"goog.reflect.object\".equals(callName.getQualifiedName()) || callName.getChildCount() !\u003d 2) {\n+    if (!\"goog.reflect.object\".equals(callName.getQualifiedName()) || callNode.getChildCount() !\u003d 3) {\n         return null;\n     }\n     Node typeNode \u003d callName.getNext();\n     if (!typeNode.isQualifiedName()) {\n         return null;\n     }\n     Node objectNode \u003d typeNode.getNext();\n     if (objectNode.getType() !\u003d Token.OBJECTLIT) {\n         t.getCompiler().report(JSError.make(t.getSourceName(), callNode, OBJECTLIT_EXPECTED));\n         return null;\n     }\n     return new ObjectLiteralCast(typeNode.getQualifiedName(), typeNode.getNext());\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,18 @@\n+@Override\n+public ObjectLiteralCast getObjectLiteralCast(NodeTraversal t, Node callNode) {\n+    Preconditions.checkArgument(callNode.getType() \u003d\u003d Token.CALL);\n+    Node callName \u003d callNode.getFirstChild();\n+    if (!\"goog.reflect.object\".equals(callName.getQualifiedName()) || callName.getChildCount() !\u003d 2) {\n+        return null;\n+    }\n+    Node typeNode \u003d callName.getNext();\n+    if (!typeNode.isQualifiedName()) {\n+        return null;\n+    }\n+    Node objectNode \u003d typeNode.getNext();\n+    if (objectNode.getType() !\u003d Token.OBJECTLIT) {\n+        t.getCompiler().report(JSError.make(t.getSourceName(), callNode, OBJECTLIT_EXPECTED));\n+        return null;\n+    }\n+    return new ObjectLiteralCast(typeNode.getQualifiedName(), typeNode.getNext());\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic ObjectLiteralCast getObjectLiteralCast(NodeTraversal t, Node callNode) {\n    Preconditions.checkArgument(callNode.getType() \u003d\u003d Token.CALL);\n    Node callName \u003d callNode.getFirstChild();\n    if (!\"goog.reflect.object\".equals(callName.getQualifiedName()) || callName.getChildCount() !\u003d 2) {\n        return null;\n    }\n    Node typeNode \u003d callName.getNext();\n    if (!typeNode.isQualifiedName()) {\n        return null;\n    }\n    Node objectNode \u003d typeNode.getNext();\n    if (objectNode.getType() !\u003d Token.OBJECTLIT) {\n        t.getCompiler().report(JSError.make(t.getSourceName(), callNode, OBJECTLIT_EXPECTED));\n        return null;\n    }\n    return new ObjectLiteralCast(typeNode.getQualifiedName(), typeNode.getNext());\n}",
      "path": "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
      "functionStartLine": 306,
      "functionName": "getObjectLiteralCast",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}