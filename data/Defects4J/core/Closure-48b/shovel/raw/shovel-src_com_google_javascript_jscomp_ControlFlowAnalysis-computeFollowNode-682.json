{
  "origin": "codeshovel",
  "repositoryName": "Closure-48b",
  "repositoryPath": "/tmp/Closure-48b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ControlFlowAnalysis.java",
  "functionName": "computeFollowNode",
  "functionId": "computeFollowNode___fromNode-Node__node-Node__cfa-ControlFlowAnalysis",
  "sourceFilePath": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
  "functionAnnotation": "",
  "functionDoc": "Computes the follow() node of a given node and its parent. There is a side\neffect when calling this function. If this function computed an edge that\nexists a FINALLY, it\u0027ll attempt to connect the fromNode to the outer\nFINALLY according to the finallyMap.\n\n@param fromNode The original source node since {@code node} is changed\n       during recursion.\n@param node The node that follow() should compute.\n",
  "functionStartLine": 682,
  "functionEndLine": 779,
  "numCommitsSeen": 23,
  "timeTaken": 1875,
  "changeHistory": [
    "5524adbda991632656059566b69cc2771ba42b7d",
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
    "0a39688562637465944df3c29ae0c1259cc0a4dc",
    "3bee5d740c96572faea4b9fb8b632e0e07b13cbb",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "5524adbda991632656059566b69cc2771ba42b7d": "Ybodychange",
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c": "Ybodychange",
    "0a39688562637465944df3c29ae0c1259cc0a4dc": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "3bee5d740c96572faea4b9fb8b632e0e07b13cbb": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5524adbda991632656059566b69cc2771ba42b7d": {
      "type": "Ybodychange",
      "commitMessage": "\nRename a couple of AST nodes:\nDEFAULT becomes DEFAULT_CASE\nLP becomes PARAM_LIST\nGET becomes GETTER_DEF\nSET becomes SETTER_DEF\n\nR\u003dnicksantos\nDELTA\u003d215  (40 added, 5 deleted, 170 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3695\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1590 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/11/11, 4:42 PM",
      "commitName": "5524adbda991632656059566b69cc2771ba42b7d",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/10/11, 8:36 AM",
      "commitNameOld": "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 1.34,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "private static Node computeFollowNode(Node fromNode, Node node, ControlFlowAnalysis cfa) {\n    Node parent \u003d node.getParent();\n    if (parent \u003d\u003d null || parent.isFunction() || (cfa !\u003d null \u0026\u0026 node \u003d\u003d cfa.root)) {\n        return null;\n    }\n    switch(parent.getType()) {\n        case Token.IF:\n            return computeFollowNode(fromNode, parent, cfa);\n        case Token.CASE:\n        case Token.DEFAULT_CASE:\n            if (parent.getNext() !\u003d null) {\n                if (parent.getNext().isCase()) {\n                    return parent.getNext().getFirstChild().getNext();\n                } else if (parent.getNext().isDefaultCase()) {\n                    return parent.getNext().getFirstChild();\n                } else {\n                    Preconditions.checkState(false, \"Not reachable\");\n                }\n            } else {\n                return computeFollowNode(fromNode, parent, cfa);\n            }\n            break;\n        case Token.FOR:\n            if (NodeUtil.isForIn(parent)) {\n                return parent;\n            } else {\n                return parent.getFirstChild().getNext().getNext();\n            }\n        case Token.WHILE:\n        case Token.DO:\n            return parent;\n        case Token.TRY:\n            if (parent.getFirstChild() \u003d\u003d node) {\n                if (NodeUtil.hasFinally(parent)) {\n                    return computeFallThrough(parent.getLastChild());\n                } else {\n                    return computeFollowNode(fromNode, parent, cfa);\n                }\n            } else if (NodeUtil.getCatchBlock(parent) \u003d\u003d node) {\n                if (NodeUtil.hasFinally(parent)) {\n                    return computeFallThrough(node.getNext());\n                } else {\n                    return computeFollowNode(fromNode, parent, cfa);\n                }\n            } else if (parent.getLastChild() \u003d\u003d node) {\n                if (cfa !\u003d null) {\n                    for (Node finallyNode : cfa.finallyMap.get(parent)) {\n                        cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n                    }\n                }\n                return computeFollowNode(fromNode, parent, cfa);\n            }\n    }\n    Node nextSibling \u003d node.getNext();\n    while (nextSibling !\u003d null \u0026\u0026 nextSibling.isFunction()) {\n        nextSibling \u003d nextSibling.getNext();\n    }\n    if (nextSibling !\u003d null) {\n        return computeFallThrough(nextSibling);\n    } else {\n        return computeFollowNode(fromNode, parent, cfa);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
      "functionStartLine": 682,
      "functionName": "computeFollowNode",
      "functionAnnotation": "",
      "functionDoc": "Computes the follow() node of a given node and its parent. There is a side\neffect when calling this function. If this function computed an edge that\nexists a FINALLY, it\u0027ll attempt to connect the fromNode to the outer\nFINALLY according to the finallyMap.\n\n@param fromNode The original source node since {@code node} is changed\n       during recursion.\n@param node The node that follow() should compute.\n",
      "diff": "@@ -1,63 +1,63 @@\n private static Node computeFollowNode(Node fromNode, Node node, ControlFlowAnalysis cfa) {\n     Node parent \u003d node.getParent();\n     if (parent \u003d\u003d null || parent.isFunction() || (cfa !\u003d null \u0026\u0026 node \u003d\u003d cfa.root)) {\n         return null;\n     }\n     switch(parent.getType()) {\n         case Token.IF:\n             return computeFollowNode(fromNode, parent, cfa);\n         case Token.CASE:\n-        case Token.DEFAULT:\n+        case Token.DEFAULT_CASE:\n             if (parent.getNext() !\u003d null) {\n                 if (parent.getNext().isCase()) {\n                     return parent.getNext().getFirstChild().getNext();\n-                } else if (parent.getNext().isDefault()) {\n+                } else if (parent.getNext().isDefaultCase()) {\n                     return parent.getNext().getFirstChild();\n                 } else {\n                     Preconditions.checkState(false, \"Not reachable\");\n                 }\n             } else {\n                 return computeFollowNode(fromNode, parent, cfa);\n             }\n             break;\n         case Token.FOR:\n             if (NodeUtil.isForIn(parent)) {\n                 return parent;\n             } else {\n                 return parent.getFirstChild().getNext().getNext();\n             }\n         case Token.WHILE:\n         case Token.DO:\n             return parent;\n         case Token.TRY:\n             if (parent.getFirstChild() \u003d\u003d node) {\n                 if (NodeUtil.hasFinally(parent)) {\n                     return computeFallThrough(parent.getLastChild());\n                 } else {\n                     return computeFollowNode(fromNode, parent, cfa);\n                 }\n             } else if (NodeUtil.getCatchBlock(parent) \u003d\u003d node) {\n                 if (NodeUtil.hasFinally(parent)) {\n                     return computeFallThrough(node.getNext());\n                 } else {\n                     return computeFollowNode(fromNode, parent, cfa);\n                 }\n             } else if (parent.getLastChild() \u003d\u003d node) {\n                 if (cfa !\u003d null) {\n                     for (Node finallyNode : cfa.finallyMap.get(parent)) {\n                         cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n                     }\n                 }\n                 return computeFollowNode(fromNode, parent, cfa);\n             }\n     }\n     Node nextSibling \u003d node.getNext();\n     while (nextSibling !\u003d null \u0026\u0026 nextSibling.isFunction()) {\n         nextSibling \u003d nextSibling.getNext();\n     }\n     if (nextSibling !\u003d null) {\n         return computeFallThrough(nextSibling);\n     } else {\n         return computeFollowNode(fromNode, parent, cfa);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c": {
      "type": "Ybodychange",
      "commitMessage": "\nReplace the bulk of the Node.getType() \u003d\u003d Token.XXX calls with\nNode.isXXX calls.\n\nR\u003dnicksantos\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3677\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1582 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/10/11, 8:36 AM",
      "commitName": "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/9/11, 1:51 PM",
      "commitNameOld": "3d80e1ed8fffbcb5f41b63f64726d9a4c76f209f",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 0.78,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "private static Node computeFollowNode(Node fromNode, Node node, ControlFlowAnalysis cfa) {\n    Node parent \u003d node.getParent();\n    if (parent \u003d\u003d null || parent.isFunction() || (cfa !\u003d null \u0026\u0026 node \u003d\u003d cfa.root)) {\n        return null;\n    }\n    switch(parent.getType()) {\n        case Token.IF:\n            return computeFollowNode(fromNode, parent, cfa);\n        case Token.CASE:\n        case Token.DEFAULT:\n            if (parent.getNext() !\u003d null) {\n                if (parent.getNext().isCase()) {\n                    return parent.getNext().getFirstChild().getNext();\n                } else if (parent.getNext().isDefault()) {\n                    return parent.getNext().getFirstChild();\n                } else {\n                    Preconditions.checkState(false, \"Not reachable\");\n                }\n            } else {\n                return computeFollowNode(fromNode, parent, cfa);\n            }\n            break;\n        case Token.FOR:\n            if (NodeUtil.isForIn(parent)) {\n                return parent;\n            } else {\n                return parent.getFirstChild().getNext().getNext();\n            }\n        case Token.WHILE:\n        case Token.DO:\n            return parent;\n        case Token.TRY:\n            if (parent.getFirstChild() \u003d\u003d node) {\n                if (NodeUtil.hasFinally(parent)) {\n                    return computeFallThrough(parent.getLastChild());\n                } else {\n                    return computeFollowNode(fromNode, parent, cfa);\n                }\n            } else if (NodeUtil.getCatchBlock(parent) \u003d\u003d node) {\n                if (NodeUtil.hasFinally(parent)) {\n                    return computeFallThrough(node.getNext());\n                } else {\n                    return computeFollowNode(fromNode, parent, cfa);\n                }\n            } else if (parent.getLastChild() \u003d\u003d node) {\n                if (cfa !\u003d null) {\n                    for (Node finallyNode : cfa.finallyMap.get(parent)) {\n                        cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n                    }\n                }\n                return computeFollowNode(fromNode, parent, cfa);\n            }\n    }\n    Node nextSibling \u003d node.getNext();\n    while (nextSibling !\u003d null \u0026\u0026 nextSibling.isFunction()) {\n        nextSibling \u003d nextSibling.getNext();\n    }\n    if (nextSibling !\u003d null) {\n        return computeFallThrough(nextSibling);\n    } else {\n        return computeFollowNode(fromNode, parent, cfa);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
      "functionStartLine": 682,
      "functionName": "computeFollowNode",
      "functionAnnotation": "",
      "functionDoc": "Computes the follow() node of a given node and its parent. There is a side\neffect when calling this function. If this function computed an edge that\nexists a FINALLY, it\u0027ll attempt to connect the fromNode to the outer\nFINALLY according to the finallyMap.\n\n@param fromNode The original source node since {@code node} is changed\n       during recursion.\n@param node The node that follow() should compute.\n",
      "diff": "@@ -1,63 +1,63 @@\n private static Node computeFollowNode(Node fromNode, Node node, ControlFlowAnalysis cfa) {\n     Node parent \u003d node.getParent();\n-    if (parent \u003d\u003d null || parent.getType() \u003d\u003d Token.FUNCTION || (cfa !\u003d null \u0026\u0026 node \u003d\u003d cfa.root)) {\n+    if (parent \u003d\u003d null || parent.isFunction() || (cfa !\u003d null \u0026\u0026 node \u003d\u003d cfa.root)) {\n         return null;\n     }\n     switch(parent.getType()) {\n         case Token.IF:\n             return computeFollowNode(fromNode, parent, cfa);\n         case Token.CASE:\n         case Token.DEFAULT:\n             if (parent.getNext() !\u003d null) {\n-                if (parent.getNext().getType() \u003d\u003d Token.CASE) {\n+                if (parent.getNext().isCase()) {\n                     return parent.getNext().getFirstChild().getNext();\n-                } else if (parent.getNext().getType() \u003d\u003d Token.DEFAULT) {\n+                } else if (parent.getNext().isDefault()) {\n                     return parent.getNext().getFirstChild();\n                 } else {\n                     Preconditions.checkState(false, \"Not reachable\");\n                 }\n             } else {\n                 return computeFollowNode(fromNode, parent, cfa);\n             }\n             break;\n         case Token.FOR:\n             if (NodeUtil.isForIn(parent)) {\n                 return parent;\n             } else {\n                 return parent.getFirstChild().getNext().getNext();\n             }\n         case Token.WHILE:\n         case Token.DO:\n             return parent;\n         case Token.TRY:\n             if (parent.getFirstChild() \u003d\u003d node) {\n                 if (NodeUtil.hasFinally(parent)) {\n                     return computeFallThrough(parent.getLastChild());\n                 } else {\n                     return computeFollowNode(fromNode, parent, cfa);\n                 }\n             } else if (NodeUtil.getCatchBlock(parent) \u003d\u003d node) {\n                 if (NodeUtil.hasFinally(parent)) {\n                     return computeFallThrough(node.getNext());\n                 } else {\n                     return computeFollowNode(fromNode, parent, cfa);\n                 }\n             } else if (parent.getLastChild() \u003d\u003d node) {\n                 if (cfa !\u003d null) {\n                     for (Node finallyNode : cfa.finallyMap.get(parent)) {\n                         cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n                     }\n                 }\n                 return computeFollowNode(fromNode, parent, cfa);\n             }\n     }\n     Node nextSibling \u003d node.getNext();\n-    while (nextSibling !\u003d null \u0026\u0026 nextSibling.getType() \u003d\u003d Token.FUNCTION) {\n+    while (nextSibling !\u003d null \u0026\u0026 nextSibling.isFunction()) {\n         nextSibling \u003d nextSibling.getNext();\n     }\n     if (nextSibling !\u003d null) {\n         return computeFallThrough(nextSibling);\n     } else {\n         return computeFollowNode(fromNode, parent, cfa);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0a39688562637465944df3c29ae0c1259cc0a4dc": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "\nRemoves useless unconditional jumps\n\nR\u003djohnlenz\nDELTA\u003d179  (96 added, 33 deleted, 50 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d88010\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@337 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/4/10, 5:53 PM",
      "commitName": "0a39688562637465944df3c29ae0c1259cc0a4dc",
      "commitAuthor": "acleung@google.com",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "\nRemoves useless unconditional jumps\n\nR\u003djohnlenz\nDELTA\u003d179  (96 added, 33 deleted, 50 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d88010\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@337 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "8/4/10, 5:53 PM",
          "commitName": "0a39688562637465944df3c29ae0c1259cc0a4dc",
          "commitAuthor": "acleung@google.com",
          "commitDateOld": "2/22/10, 5:07 PM",
          "commitNameOld": "2f5cb1622371de540fe20dcbe0411651ec89f952",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 162.99,
          "commitsBetweenForRepo": 207,
          "commitsBetweenForFile": 1,
          "actualSource": "private static Node computeFollowNode(Node fromNode, Node node, ControlFlowAnalysis cfa) {\n    Node parent \u003d node.getParent();\n    if (parent \u003d\u003d null || parent.getType() \u003d\u003d Token.FUNCTION || (cfa !\u003d null \u0026\u0026 node \u003d\u003d cfa.root)) {\n        return null;\n    }\n    switch(parent.getType()) {\n        case Token.IF:\n            return computeFollowNode(fromNode, parent, cfa);\n        case Token.CASE:\n        case Token.DEFAULT:\n            if (parent.getNext() !\u003d null) {\n                if (parent.getNext().getType() \u003d\u003d Token.CASE) {\n                    return parent.getNext().getFirstChild().getNext();\n                } else if (parent.getNext().getType() \u003d\u003d Token.DEFAULT) {\n                    return parent.getNext().getFirstChild();\n                } else {\n                    Preconditions.checkState(false, \"Not reachable\");\n                }\n            } else {\n                return computeFollowNode(fromNode, parent, cfa);\n            }\n            break;\n        case Token.FOR:\n            if (NodeUtil.isForIn(parent)) {\n                return parent;\n            } else {\n                return parent.getFirstChild().getNext().getNext();\n            }\n        case Token.WHILE:\n        case Token.DO:\n            return parent;\n        case Token.TRY:\n            if (parent.getFirstChild() \u003d\u003d node) {\n                if (NodeUtil.hasFinally(parent)) {\n                    return computeFallThrough(parent.getLastChild());\n                } else {\n                    return computeFollowNode(fromNode, parent, cfa);\n                }\n            } else if (NodeUtil.getCatchBlock(parent) \u003d\u003d node) {\n                if (NodeUtil.hasFinally(parent)) {\n                    return computeFallThrough(node.getNext());\n                } else {\n                    return computeFollowNode(fromNode, parent, cfa);\n                }\n            } else if (parent.getLastChild() \u003d\u003d node) {\n                if (cfa !\u003d null) {\n                    for (Node finallyNode : cfa.finallyMap.get(parent)) {\n                        cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n                    }\n                }\n                return computeFollowNode(fromNode, parent, cfa);\n            }\n    }\n    Node nextSibling \u003d node.getNext();\n    while (nextSibling !\u003d null \u0026\u0026 nextSibling.getType() \u003d\u003d Token.FUNCTION) {\n        nextSibling \u003d nextSibling.getNext();\n    }\n    if (nextSibling !\u003d null) {\n        return computeFallThrough(nextSibling);\n    } else {\n        return computeFollowNode(fromNode, parent, cfa);\n    }\n}",
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
          "functionStartLine": 674,
          "functionName": "computeFollowNode",
          "functionAnnotation": "",
          "functionDoc": "Computes the follow() node of a given node and its parent. There is a side\neffect when calling this function. If this function computed an edge that\nexists a FINALLY, it\u0027ll attempt to connect the fromNode to the outer\nFINALLY according to the finallyMap.\n\n@param fromNode The original source node since {@code node} is changed\n       during recursion.\n@param node The node that follow() should compute.\n",
          "diff": "@@ -1,61 +1,63 @@\n-private Node computeFollowNode(Node fromNode, Node node) {\n+private static Node computeFollowNode(Node fromNode, Node node, ControlFlowAnalysis cfa) {\n     Node parent \u003d node.getParent();\n-    if (parent \u003d\u003d null || parent.getType() \u003d\u003d Token.FUNCTION || node \u003d\u003d root) {\n+    if (parent \u003d\u003d null || parent.getType() \u003d\u003d Token.FUNCTION || (cfa !\u003d null \u0026\u0026 node \u003d\u003d cfa.root)) {\n         return null;\n     }\n     switch(parent.getType()) {\n         case Token.IF:\n-            return computeFollowNode(fromNode, parent);\n+            return computeFollowNode(fromNode, parent, cfa);\n         case Token.CASE:\n         case Token.DEFAULT:\n             if (parent.getNext() !\u003d null) {\n                 if (parent.getNext().getType() \u003d\u003d Token.CASE) {\n                     return parent.getNext().getFirstChild().getNext();\n                 } else if (parent.getNext().getType() \u003d\u003d Token.DEFAULT) {\n                     return parent.getNext().getFirstChild();\n                 } else {\n                     Preconditions.checkState(false, \"Not reachable\");\n                 }\n             } else {\n-                return computeFollowNode(fromNode, parent);\n+                return computeFollowNode(fromNode, parent, cfa);\n             }\n             break;\n         case Token.FOR:\n             if (NodeUtil.isForIn(parent)) {\n                 return parent;\n             } else {\n                 return parent.getFirstChild().getNext().getNext();\n             }\n         case Token.WHILE:\n         case Token.DO:\n             return parent;\n         case Token.TRY:\n             if (parent.getFirstChild() \u003d\u003d node) {\n                 if (NodeUtil.hasFinally(parent)) {\n                     return computeFallThrough(parent.getLastChild());\n                 } else {\n-                    return computeFollowNode(fromNode, parent);\n+                    return computeFollowNode(fromNode, parent, cfa);\n                 }\n             } else if (NodeUtil.getCatchBlock(parent) \u003d\u003d node) {\n                 if (NodeUtil.hasFinally(parent)) {\n                     return computeFallThrough(node.getNext());\n                 } else {\n-                    return computeFollowNode(fromNode, parent);\n+                    return computeFollowNode(fromNode, parent, cfa);\n                 }\n             } else if (parent.getLastChild() \u003d\u003d node) {\n-                for (Node finallyNode : finallyMap.get(parent)) {\n-                    createEdge(fromNode, Branch.UNCOND, finallyNode);\n+                if (cfa !\u003d null) {\n+                    for (Node finallyNode : cfa.finallyMap.get(parent)) {\n+                        cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+                    }\n                 }\n-                return computeFollowNode(fromNode, parent);\n+                return computeFollowNode(fromNode, parent, cfa);\n             }\n     }\n     Node nextSibling \u003d node.getNext();\n     while (nextSibling !\u003d null \u0026\u0026 nextSibling.getType() \u003d\u003d Token.FUNCTION) {\n         nextSibling \u003d nextSibling.getNext();\n     }\n     if (nextSibling !\u003d null) {\n         return computeFallThrough(nextSibling);\n     } else {\n-        return computeFollowNode(fromNode, parent);\n+        return computeFollowNode(fromNode, parent, cfa);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[fromNode-Node, node-Node]",
            "newValue": "[fromNode-Node, node-Node, cfa-ControlFlowAnalysis]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "\nRemoves useless unconditional jumps\n\nR\u003djohnlenz\nDELTA\u003d179  (96 added, 33 deleted, 50 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d88010\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@337 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "8/4/10, 5:53 PM",
          "commitName": "0a39688562637465944df3c29ae0c1259cc0a4dc",
          "commitAuthor": "acleung@google.com",
          "commitDateOld": "2/22/10, 5:07 PM",
          "commitNameOld": "2f5cb1622371de540fe20dcbe0411651ec89f952",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 162.99,
          "commitsBetweenForRepo": 207,
          "commitsBetweenForFile": 1,
          "actualSource": "private static Node computeFollowNode(Node fromNode, Node node, ControlFlowAnalysis cfa) {\n    Node parent \u003d node.getParent();\n    if (parent \u003d\u003d null || parent.getType() \u003d\u003d Token.FUNCTION || (cfa !\u003d null \u0026\u0026 node \u003d\u003d cfa.root)) {\n        return null;\n    }\n    switch(parent.getType()) {\n        case Token.IF:\n            return computeFollowNode(fromNode, parent, cfa);\n        case Token.CASE:\n        case Token.DEFAULT:\n            if (parent.getNext() !\u003d null) {\n                if (parent.getNext().getType() \u003d\u003d Token.CASE) {\n                    return parent.getNext().getFirstChild().getNext();\n                } else if (parent.getNext().getType() \u003d\u003d Token.DEFAULT) {\n                    return parent.getNext().getFirstChild();\n                } else {\n                    Preconditions.checkState(false, \"Not reachable\");\n                }\n            } else {\n                return computeFollowNode(fromNode, parent, cfa);\n            }\n            break;\n        case Token.FOR:\n            if (NodeUtil.isForIn(parent)) {\n                return parent;\n            } else {\n                return parent.getFirstChild().getNext().getNext();\n            }\n        case Token.WHILE:\n        case Token.DO:\n            return parent;\n        case Token.TRY:\n            if (parent.getFirstChild() \u003d\u003d node) {\n                if (NodeUtil.hasFinally(parent)) {\n                    return computeFallThrough(parent.getLastChild());\n                } else {\n                    return computeFollowNode(fromNode, parent, cfa);\n                }\n            } else if (NodeUtil.getCatchBlock(parent) \u003d\u003d node) {\n                if (NodeUtil.hasFinally(parent)) {\n                    return computeFallThrough(node.getNext());\n                } else {\n                    return computeFollowNode(fromNode, parent, cfa);\n                }\n            } else if (parent.getLastChild() \u003d\u003d node) {\n                if (cfa !\u003d null) {\n                    for (Node finallyNode : cfa.finallyMap.get(parent)) {\n                        cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n                    }\n                }\n                return computeFollowNode(fromNode, parent, cfa);\n            }\n    }\n    Node nextSibling \u003d node.getNext();\n    while (nextSibling !\u003d null \u0026\u0026 nextSibling.getType() \u003d\u003d Token.FUNCTION) {\n        nextSibling \u003d nextSibling.getNext();\n    }\n    if (nextSibling !\u003d null) {\n        return computeFallThrough(nextSibling);\n    } else {\n        return computeFollowNode(fromNode, parent, cfa);\n    }\n}",
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
          "functionStartLine": 674,
          "functionName": "computeFollowNode",
          "functionAnnotation": "",
          "functionDoc": "Computes the follow() node of a given node and its parent. There is a side\neffect when calling this function. If this function computed an edge that\nexists a FINALLY, it\u0027ll attempt to connect the fromNode to the outer\nFINALLY according to the finallyMap.\n\n@param fromNode The original source node since {@code node} is changed\n       during recursion.\n@param node The node that follow() should compute.\n",
          "diff": "@@ -1,61 +1,63 @@\n-private Node computeFollowNode(Node fromNode, Node node) {\n+private static Node computeFollowNode(Node fromNode, Node node, ControlFlowAnalysis cfa) {\n     Node parent \u003d node.getParent();\n-    if (parent \u003d\u003d null || parent.getType() \u003d\u003d Token.FUNCTION || node \u003d\u003d root) {\n+    if (parent \u003d\u003d null || parent.getType() \u003d\u003d Token.FUNCTION || (cfa !\u003d null \u0026\u0026 node \u003d\u003d cfa.root)) {\n         return null;\n     }\n     switch(parent.getType()) {\n         case Token.IF:\n-            return computeFollowNode(fromNode, parent);\n+            return computeFollowNode(fromNode, parent, cfa);\n         case Token.CASE:\n         case Token.DEFAULT:\n             if (parent.getNext() !\u003d null) {\n                 if (parent.getNext().getType() \u003d\u003d Token.CASE) {\n                     return parent.getNext().getFirstChild().getNext();\n                 } else if (parent.getNext().getType() \u003d\u003d Token.DEFAULT) {\n                     return parent.getNext().getFirstChild();\n                 } else {\n                     Preconditions.checkState(false, \"Not reachable\");\n                 }\n             } else {\n-                return computeFollowNode(fromNode, parent);\n+                return computeFollowNode(fromNode, parent, cfa);\n             }\n             break;\n         case Token.FOR:\n             if (NodeUtil.isForIn(parent)) {\n                 return parent;\n             } else {\n                 return parent.getFirstChild().getNext().getNext();\n             }\n         case Token.WHILE:\n         case Token.DO:\n             return parent;\n         case Token.TRY:\n             if (parent.getFirstChild() \u003d\u003d node) {\n                 if (NodeUtil.hasFinally(parent)) {\n                     return computeFallThrough(parent.getLastChild());\n                 } else {\n-                    return computeFollowNode(fromNode, parent);\n+                    return computeFollowNode(fromNode, parent, cfa);\n                 }\n             } else if (NodeUtil.getCatchBlock(parent) \u003d\u003d node) {\n                 if (NodeUtil.hasFinally(parent)) {\n                     return computeFallThrough(node.getNext());\n                 } else {\n-                    return computeFollowNode(fromNode, parent);\n+                    return computeFollowNode(fromNode, parent, cfa);\n                 }\n             } else if (parent.getLastChild() \u003d\u003d node) {\n-                for (Node finallyNode : finallyMap.get(parent)) {\n-                    createEdge(fromNode, Branch.UNCOND, finallyNode);\n+                if (cfa !\u003d null) {\n+                    for (Node finallyNode : cfa.finallyMap.get(parent)) {\n+                        cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+                    }\n                 }\n-                return computeFollowNode(fromNode, parent);\n+                return computeFollowNode(fromNode, parent, cfa);\n             }\n     }\n     Node nextSibling \u003d node.getNext();\n     while (nextSibling !\u003d null \u0026\u0026 nextSibling.getType() \u003d\u003d Token.FUNCTION) {\n         nextSibling \u003d nextSibling.getNext();\n     }\n     if (nextSibling !\u003d null) {\n         return computeFallThrough(nextSibling);\n     } else {\n-        return computeFollowNode(fromNode, parent);\n+        return computeFollowNode(fromNode, parent, cfa);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[private, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nRemoves useless unconditional jumps\n\nR\u003djohnlenz\nDELTA\u003d179  (96 added, 33 deleted, 50 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d88010\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@337 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "8/4/10, 5:53 PM",
          "commitName": "0a39688562637465944df3c29ae0c1259cc0a4dc",
          "commitAuthor": "acleung@google.com",
          "commitDateOld": "2/22/10, 5:07 PM",
          "commitNameOld": "2f5cb1622371de540fe20dcbe0411651ec89f952",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 162.99,
          "commitsBetweenForRepo": 207,
          "commitsBetweenForFile": 1,
          "actualSource": "private static Node computeFollowNode(Node fromNode, Node node, ControlFlowAnalysis cfa) {\n    Node parent \u003d node.getParent();\n    if (parent \u003d\u003d null || parent.getType() \u003d\u003d Token.FUNCTION || (cfa !\u003d null \u0026\u0026 node \u003d\u003d cfa.root)) {\n        return null;\n    }\n    switch(parent.getType()) {\n        case Token.IF:\n            return computeFollowNode(fromNode, parent, cfa);\n        case Token.CASE:\n        case Token.DEFAULT:\n            if (parent.getNext() !\u003d null) {\n                if (parent.getNext().getType() \u003d\u003d Token.CASE) {\n                    return parent.getNext().getFirstChild().getNext();\n                } else if (parent.getNext().getType() \u003d\u003d Token.DEFAULT) {\n                    return parent.getNext().getFirstChild();\n                } else {\n                    Preconditions.checkState(false, \"Not reachable\");\n                }\n            } else {\n                return computeFollowNode(fromNode, parent, cfa);\n            }\n            break;\n        case Token.FOR:\n            if (NodeUtil.isForIn(parent)) {\n                return parent;\n            } else {\n                return parent.getFirstChild().getNext().getNext();\n            }\n        case Token.WHILE:\n        case Token.DO:\n            return parent;\n        case Token.TRY:\n            if (parent.getFirstChild() \u003d\u003d node) {\n                if (NodeUtil.hasFinally(parent)) {\n                    return computeFallThrough(parent.getLastChild());\n                } else {\n                    return computeFollowNode(fromNode, parent, cfa);\n                }\n            } else if (NodeUtil.getCatchBlock(parent) \u003d\u003d node) {\n                if (NodeUtil.hasFinally(parent)) {\n                    return computeFallThrough(node.getNext());\n                } else {\n                    return computeFollowNode(fromNode, parent, cfa);\n                }\n            } else if (parent.getLastChild() \u003d\u003d node) {\n                if (cfa !\u003d null) {\n                    for (Node finallyNode : cfa.finallyMap.get(parent)) {\n                        cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n                    }\n                }\n                return computeFollowNode(fromNode, parent, cfa);\n            }\n    }\n    Node nextSibling \u003d node.getNext();\n    while (nextSibling !\u003d null \u0026\u0026 nextSibling.getType() \u003d\u003d Token.FUNCTION) {\n        nextSibling \u003d nextSibling.getNext();\n    }\n    if (nextSibling !\u003d null) {\n        return computeFallThrough(nextSibling);\n    } else {\n        return computeFollowNode(fromNode, parent, cfa);\n    }\n}",
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
          "functionStartLine": 674,
          "functionName": "computeFollowNode",
          "functionAnnotation": "",
          "functionDoc": "Computes the follow() node of a given node and its parent. There is a side\neffect when calling this function. If this function computed an edge that\nexists a FINALLY, it\u0027ll attempt to connect the fromNode to the outer\nFINALLY according to the finallyMap.\n\n@param fromNode The original source node since {@code node} is changed\n       during recursion.\n@param node The node that follow() should compute.\n",
          "diff": "@@ -1,61 +1,63 @@\n-private Node computeFollowNode(Node fromNode, Node node) {\n+private static Node computeFollowNode(Node fromNode, Node node, ControlFlowAnalysis cfa) {\n     Node parent \u003d node.getParent();\n-    if (parent \u003d\u003d null || parent.getType() \u003d\u003d Token.FUNCTION || node \u003d\u003d root) {\n+    if (parent \u003d\u003d null || parent.getType() \u003d\u003d Token.FUNCTION || (cfa !\u003d null \u0026\u0026 node \u003d\u003d cfa.root)) {\n         return null;\n     }\n     switch(parent.getType()) {\n         case Token.IF:\n-            return computeFollowNode(fromNode, parent);\n+            return computeFollowNode(fromNode, parent, cfa);\n         case Token.CASE:\n         case Token.DEFAULT:\n             if (parent.getNext() !\u003d null) {\n                 if (parent.getNext().getType() \u003d\u003d Token.CASE) {\n                     return parent.getNext().getFirstChild().getNext();\n                 } else if (parent.getNext().getType() \u003d\u003d Token.DEFAULT) {\n                     return parent.getNext().getFirstChild();\n                 } else {\n                     Preconditions.checkState(false, \"Not reachable\");\n                 }\n             } else {\n-                return computeFollowNode(fromNode, parent);\n+                return computeFollowNode(fromNode, parent, cfa);\n             }\n             break;\n         case Token.FOR:\n             if (NodeUtil.isForIn(parent)) {\n                 return parent;\n             } else {\n                 return parent.getFirstChild().getNext().getNext();\n             }\n         case Token.WHILE:\n         case Token.DO:\n             return parent;\n         case Token.TRY:\n             if (parent.getFirstChild() \u003d\u003d node) {\n                 if (NodeUtil.hasFinally(parent)) {\n                     return computeFallThrough(parent.getLastChild());\n                 } else {\n-                    return computeFollowNode(fromNode, parent);\n+                    return computeFollowNode(fromNode, parent, cfa);\n                 }\n             } else if (NodeUtil.getCatchBlock(parent) \u003d\u003d node) {\n                 if (NodeUtil.hasFinally(parent)) {\n                     return computeFallThrough(node.getNext());\n                 } else {\n-                    return computeFollowNode(fromNode, parent);\n+                    return computeFollowNode(fromNode, parent, cfa);\n                 }\n             } else if (parent.getLastChild() \u003d\u003d node) {\n-                for (Node finallyNode : finallyMap.get(parent)) {\n-                    createEdge(fromNode, Branch.UNCOND, finallyNode);\n+                if (cfa !\u003d null) {\n+                    for (Node finallyNode : cfa.finallyMap.get(parent)) {\n+                        cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+                    }\n                 }\n-                return computeFollowNode(fromNode, parent);\n+                return computeFollowNode(fromNode, parent, cfa);\n             }\n     }\n     Node nextSibling \u003d node.getNext();\n     while (nextSibling !\u003d null \u0026\u0026 nextSibling.getType() \u003d\u003d Token.FUNCTION) {\n         nextSibling \u003d nextSibling.getNext();\n     }\n     if (nextSibling !\u003d null) {\n         return computeFallThrough(nextSibling);\n     } else {\n-        return computeFollowNode(fromNode, parent);\n+        return computeFollowNode(fromNode, parent, cfa);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "3bee5d740c96572faea4b9fb8b632e0e07b13cbb": {
      "type": "Ybodychange",
      "commitMessage": "Add a mechanism for inlining local vars, and turn it on by default.\nWarnings for \"ambiguous\" function definitions.\nRefactoring and renaming of some method names.\nUse \"\u003d\" optionality annotation in externs.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@15 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/25/09, 6:53 AM",
      "commitName": "3bee5d740c96572faea4b9fb8b632e0e07b13cbb",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/3/09, 3:51 PM",
      "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 21.63,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "actualSource": "private Node computeFollowNode(Node fromNode, Node node) {\n    Node parent \u003d node.getParent();\n    if (parent \u003d\u003d null || parent.getType() \u003d\u003d Token.FUNCTION || node \u003d\u003d root) {\n        return null;\n    }\n    switch(parent.getType()) {\n        case Token.IF:\n            return computeFollowNode(fromNode, parent);\n        case Token.CASE:\n        case Token.DEFAULT:\n            if (parent.getNext() !\u003d null) {\n                if (parent.getNext().getType() \u003d\u003d Token.CASE) {\n                    return parent.getNext().getFirstChild().getNext();\n                } else if (parent.getNext().getType() \u003d\u003d Token.DEFAULT) {\n                    return parent.getNext().getFirstChild();\n                } else {\n                    Preconditions.checkState(false, \"Not reachable\");\n                }\n            } else {\n                return computeFollowNode(fromNode, parent);\n            }\n            break;\n        case Token.FOR:\n            if (NodeUtil.isForIn(parent)) {\n                return parent;\n            } else {\n                return parent.getFirstChild().getNext().getNext();\n            }\n        case Token.WHILE:\n        case Token.DO:\n            return parent;\n        case Token.TRY:\n            if (parent.getFirstChild() \u003d\u003d node) {\n                if (NodeUtil.hasFinally(parent)) {\n                    return computeFallThrough(parent.getLastChild());\n                } else {\n                    return computeFollowNode(fromNode, parent);\n                }\n            } else if (NodeUtil.getCatchBlock(parent) \u003d\u003d node) {\n                if (NodeUtil.hasFinally(parent)) {\n                    return computeFallThrough(node.getNext());\n                } else {\n                    return computeFollowNode(fromNode, parent);\n                }\n            } else if (parent.getLastChild() \u003d\u003d node) {\n                for (Node finallyNode : finallyMap.get(parent)) {\n                    createEdge(fromNode, Branch.UNCOND, finallyNode);\n                }\n                return computeFollowNode(fromNode, parent);\n            }\n    }\n    Node nextSibling \u003d node.getNext();\n    while (nextSibling !\u003d null \u0026\u0026 nextSibling.getType() \u003d\u003d Token.FUNCTION) {\n        nextSibling \u003d nextSibling.getNext();\n    }\n    if (nextSibling !\u003d null) {\n        return computeFallThrough(nextSibling);\n    } else {\n        return computeFollowNode(fromNode, parent);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
      "functionStartLine": 671,
      "functionName": "computeFollowNode",
      "functionAnnotation": "",
      "functionDoc": "Computes the follow() node of a given node and its parent. There is a side\neffect when calling this function. If this function computed an edge that\nexists a FINALLY, it\u0027ll attempt to connect the fromNode to the outer\nFINALLY according to the finallyMap.\n\n@param fromNode The original source node since {@code node} is changed\n       during recursion.\n@param node The node that follow() should compute.\n",
      "diff": "@@ -1,61 +1,61 @@\n private Node computeFollowNode(Node fromNode, Node node) {\n     Node parent \u003d node.getParent();\n     if (parent \u003d\u003d null || parent.getType() \u003d\u003d Token.FUNCTION || node \u003d\u003d root) {\n         return null;\n     }\n     switch(parent.getType()) {\n         case Token.IF:\n             return computeFollowNode(fromNode, parent);\n         case Token.CASE:\n         case Token.DEFAULT:\n             if (parent.getNext() !\u003d null) {\n                 if (parent.getNext().getType() \u003d\u003d Token.CASE) {\n                     return parent.getNext().getFirstChild().getNext();\n                 } else if (parent.getNext().getType() \u003d\u003d Token.DEFAULT) {\n                     return parent.getNext().getFirstChild();\n                 } else {\n                     Preconditions.checkState(false, \"Not reachable\");\n                 }\n             } else {\n                 return computeFollowNode(fromNode, parent);\n             }\n             break;\n         case Token.FOR:\n-            if (parent.getChildCount() \u003d\u003d 4) {\n-                return parent.getFirstChild().getNext().getNext();\n-            } else {\n+            if (NodeUtil.isForIn(parent)) {\n                 return parent;\n+            } else {\n+                return parent.getFirstChild().getNext().getNext();\n             }\n         case Token.WHILE:\n         case Token.DO:\n             return parent;\n         case Token.TRY:\n             if (parent.getFirstChild() \u003d\u003d node) {\n                 if (NodeUtil.hasFinally(parent)) {\n                     return computeFallThrough(parent.getLastChild());\n                 } else {\n                     return computeFollowNode(fromNode, parent);\n                 }\n             } else if (NodeUtil.getCatchBlock(parent) \u003d\u003d node) {\n                 if (NodeUtil.hasFinally(parent)) {\n                     return computeFallThrough(node.getNext());\n                 } else {\n                     return computeFollowNode(fromNode, parent);\n                 }\n             } else if (parent.getLastChild() \u003d\u003d node) {\n                 for (Node finallyNode : finallyMap.get(parent)) {\n                     createEdge(fromNode, Branch.UNCOND, finallyNode);\n                 }\n                 return computeFollowNode(fromNode, parent);\n             }\n     }\n     Node nextSibling \u003d node.getNext();\n     while (nextSibling !\u003d null \u0026\u0026 nextSibling.getType() \u003d\u003d Token.FUNCTION) {\n         nextSibling \u003d nextSibling.getNext();\n     }\n     if (nextSibling !\u003d null) {\n         return computeFallThrough(nextSibling);\n     } else {\n         return computeFollowNode(fromNode, parent);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,61 @@\n+private Node computeFollowNode(Node fromNode, Node node) {\n+    Node parent \u003d node.getParent();\n+    if (parent \u003d\u003d null || parent.getType() \u003d\u003d Token.FUNCTION || node \u003d\u003d root) {\n+        return null;\n+    }\n+    switch(parent.getType()) {\n+        case Token.IF:\n+            return computeFollowNode(fromNode, parent);\n+        case Token.CASE:\n+        case Token.DEFAULT:\n+            if (parent.getNext() !\u003d null) {\n+                if (parent.getNext().getType() \u003d\u003d Token.CASE) {\n+                    return parent.getNext().getFirstChild().getNext();\n+                } else if (parent.getNext().getType() \u003d\u003d Token.DEFAULT) {\n+                    return parent.getNext().getFirstChild();\n+                } else {\n+                    Preconditions.checkState(false, \"Not reachable\");\n+                }\n+            } else {\n+                return computeFollowNode(fromNode, parent);\n+            }\n+            break;\n+        case Token.FOR:\n+            if (parent.getChildCount() \u003d\u003d 4) {\n+                return parent.getFirstChild().getNext().getNext();\n+            } else {\n+                return parent;\n+            }\n+        case Token.WHILE:\n+        case Token.DO:\n+            return parent;\n+        case Token.TRY:\n+            if (parent.getFirstChild() \u003d\u003d node) {\n+                if (NodeUtil.hasFinally(parent)) {\n+                    return computeFallThrough(parent.getLastChild());\n+                } else {\n+                    return computeFollowNode(fromNode, parent);\n+                }\n+            } else if (NodeUtil.getCatchBlock(parent) \u003d\u003d node) {\n+                if (NodeUtil.hasFinally(parent)) {\n+                    return computeFallThrough(node.getNext());\n+                } else {\n+                    return computeFollowNode(fromNode, parent);\n+                }\n+            } else if (parent.getLastChild() \u003d\u003d node) {\n+                for (Node finallyNode : finallyMap.get(parent)) {\n+                    createEdge(fromNode, Branch.UNCOND, finallyNode);\n+                }\n+                return computeFollowNode(fromNode, parent);\n+            }\n+    }\n+    Node nextSibling \u003d node.getNext();\n+    while (nextSibling !\u003d null \u0026\u0026 nextSibling.getType() \u003d\u003d Token.FUNCTION) {\n+        nextSibling \u003d nextSibling.getNext();\n+    }\n+    if (nextSibling !\u003d null) {\n+        return computeFallThrough(nextSibling);\n+    } else {\n+        return computeFollowNode(fromNode, parent);\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private Node computeFollowNode(Node fromNode, Node node) {\n    Node parent \u003d node.getParent();\n    if (parent \u003d\u003d null || parent.getType() \u003d\u003d Token.FUNCTION || node \u003d\u003d root) {\n        return null;\n    }\n    switch(parent.getType()) {\n        case Token.IF:\n            return computeFollowNode(fromNode, parent);\n        case Token.CASE:\n        case Token.DEFAULT:\n            if (parent.getNext() !\u003d null) {\n                if (parent.getNext().getType() \u003d\u003d Token.CASE) {\n                    return parent.getNext().getFirstChild().getNext();\n                } else if (parent.getNext().getType() \u003d\u003d Token.DEFAULT) {\n                    return parent.getNext().getFirstChild();\n                } else {\n                    Preconditions.checkState(false, \"Not reachable\");\n                }\n            } else {\n                return computeFollowNode(fromNode, parent);\n            }\n            break;\n        case Token.FOR:\n            if (parent.getChildCount() \u003d\u003d 4) {\n                return parent.getFirstChild().getNext().getNext();\n            } else {\n                return parent;\n            }\n        case Token.WHILE:\n        case Token.DO:\n            return parent;\n        case Token.TRY:\n            if (parent.getFirstChild() \u003d\u003d node) {\n                if (NodeUtil.hasFinally(parent)) {\n                    return computeFallThrough(parent.getLastChild());\n                } else {\n                    return computeFollowNode(fromNode, parent);\n                }\n            } else if (NodeUtil.getCatchBlock(parent) \u003d\u003d node) {\n                if (NodeUtil.hasFinally(parent)) {\n                    return computeFallThrough(node.getNext());\n                } else {\n                    return computeFollowNode(fromNode, parent);\n                }\n            } else if (parent.getLastChild() \u003d\u003d node) {\n                for (Node finallyNode : finallyMap.get(parent)) {\n                    createEdge(fromNode, Branch.UNCOND, finallyNode);\n                }\n                return computeFollowNode(fromNode, parent);\n            }\n    }\n    Node nextSibling \u003d node.getNext();\n    while (nextSibling !\u003d null \u0026\u0026 nextSibling.getType() \u003d\u003d Token.FUNCTION) {\n        nextSibling \u003d nextSibling.getNext();\n    }\n    if (nextSibling !\u003d null) {\n        return computeFallThrough(nextSibling);\n    } else {\n        return computeFollowNode(fromNode, parent);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
      "functionStartLine": 671,
      "functionName": "computeFollowNode",
      "functionAnnotation": "",
      "functionDoc": "Computes the follow() node of a given node and its parent. There is a side\neffect when calling this function. If this function computed an edge that\nexists a FINALLY, it\u0027ll attempt to connect the fromNode to the outer\nFINALLY according to the finallyMap.\n\n@param fromNode The original source node since {@code node} is changed\n       during recursion.\n@param node The node that follow() should compute.\n"
    }
  }
}