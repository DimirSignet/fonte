{
  "origin": "codeshovel",
  "repositoryName": "Closure-48b",
  "repositoryPath": "/tmp/Closure-48b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TypeCheck.java",
  "functionName": "checkDeclaredPropertyInheritance",
  "functionId": "checkDeclaredPropertyInheritance___t-NodeTraversal__n-Node__ctorType-FunctionType__propertyName-String__info-JSDocInfo__propertyType-JSType",
  "sourceFilePath": "src/com/google/javascript/jscomp/TypeCheck.java",
  "functionAnnotation": "",
  "functionDoc": "Given a constructor type and a property name, check that the property has\nthe JSDoc annotation @override iff the property is declared on a\nsuperclass. Several checks regarding inheritance correctness are also\nperformed.\n",
  "functionStartLine": 1019,
  "functionEndLine": 1120,
  "numCommitsSeen": 63,
  "timeTaken": 5045,
  "changeHistory": [
    "c438dfd06013f82daa648d23b864842ff1881695",
    "2851a41947bed8b8e100c7dac7d1edbc1c909d24",
    "a36a61a9027c5bca5752b0ecca7c609c07e568bb",
    "09ed556367fbe81b3003881dfacad643939664c0",
    "043a352c2e85815a90a1926d112902d924bab6c1",
    "11bd742011d67590031dba6e9d1f7186393b38a0",
    "6dbca87c463d8a1e229a0d92d5cdf92247fdefde",
    "ef0c0c69bd0d838fa623bfa0e8a71855e7741126",
    "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4",
    "a2d8936fae3eb0e3873c7f7c0233344c81436404",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "c438dfd06013f82daa648d23b864842ff1881695": "Ybodychange",
    "2851a41947bed8b8e100c7dac7d1edbc1c909d24": "Ybodychange",
    "a36a61a9027c5bca5752b0ecca7c609c07e568bb": "Ybodychange",
    "09ed556367fbe81b3003881dfacad643939664c0": "Ybodychange",
    "043a352c2e85815a90a1926d112902d924bab6c1": "Ybodychange",
    "11bd742011d67590031dba6e9d1f7186393b38a0": "Ybodychange",
    "6dbca87c463d8a1e229a0d92d5cdf92247fdefde": "Ybodychange",
    "ef0c0c69bd0d838fa623bfa0e8a71855e7741126": "Ybodychange",
    "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4": "Ybodychange",
    "a2d8936fae3eb0e3873c7f7c0233344c81436404": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c438dfd06013f82daa648d23b864842ff1881695": {
      "type": "Ybodychange",
      "commitMessage": "\nImplement multiple extends for interfaces\n\nR\u003dnicksantos\nDELTA\u003d711  (635 added, 41 deleted, 35 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1917\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1105 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/16/11, 12:57 PM",
      "commitName": "c438dfd06013f82daa648d23b864842ff1881695",
      "commitAuthor": "zhuyi@google.com",
      "commitDateOld": "5/10/11, 2:34 PM",
      "commitNameOld": "2851a41947bed8b8e100c7dac7d1edbc1c909d24",
      "commitAuthorOld": "zhuyi@google.com",
      "daysBetweenCommits": 5.93,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "actualSource": "private void checkDeclaredPropertyInheritance(NodeTraversal t, Node n, FunctionType ctorType, String propertyName, JSDocInfo info, JSType propertyType) {\n    if (hasUnknownOrEmptySupertype(ctorType)) {\n        return;\n    }\n    FunctionType superClass \u003d ctorType.getSuperClassConstructor();\n    boolean superClassHasProperty \u003d superClass !\u003d null \u0026\u0026 superClass.getPrototype().hasProperty(propertyName);\n    boolean superInterfacesHasProperty \u003d false;\n    if (ctorType.isInterface()) {\n        for (ObjectType interfaceType : ctorType.getExtendedInterfaces()) {\n            superInterfacesHasProperty \u003d superInterfacesHasProperty || interfaceType.hasProperty(propertyName);\n        }\n    }\n    boolean declaredOverride \u003d info !\u003d null \u0026\u0026 info.isOverride();\n    boolean foundInterfaceProperty \u003d false;\n    if (ctorType.isConstructor()) {\n        for (JSType implementedInterface : ctorType.getAllImplementedInterfaces()) {\n            if (implementedInterface.isUnknownType() || implementedInterface.isEmptyType()) {\n                continue;\n            }\n            FunctionType interfaceType \u003d implementedInterface.toObjectType().getConstructor();\n            Preconditions.checkNotNull(interfaceType);\n            boolean interfaceHasProperty \u003d interfaceType.getPrototype().hasProperty(propertyName);\n            foundInterfaceProperty \u003d foundInterfaceProperty || interfaceHasProperty;\n            if (reportMissingOverride.isOn() \u0026\u0026 !declaredOverride \u0026\u0026 interfaceHasProperty) {\n                compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));\n            }\n        }\n    }\n    if (!declaredOverride \u0026\u0026 !superClassHasProperty \u0026\u0026 !superInterfacesHasProperty) {\n        return;\n    }\n    JSType topInstanceType \u003d superClassHasProperty ? superClass.getTopMostDefiningType(propertyName) : null;\n    if (reportMissingOverride.isOn() \u0026\u0026 ctorType.isConstructor() \u0026\u0026 !declaredOverride \u0026\u0026 superClassHasProperty) {\n        compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));\n    }\n    if (!declaredOverride) {\n        return;\n    }\n    if (superClassHasProperty) {\n        JSType superClassPropType \u003d superClass.getPrototype().getPropertyType(propertyName);\n        if (!propertyType.canAssignTo(superClassPropType)) {\n            compiler.report(t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));\n        }\n    } else if (superInterfacesHasProperty) {\n        for (ObjectType interfaceType : ctorType.getExtendedInterfaces()) {\n            if (interfaceType.hasProperty(propertyName)) {\n                JSType superPropertyType \u003d interfaceType.getPropertyType(propertyName);\n                if (!propertyType.canAssignTo(superPropertyType)) {\n                    topInstanceType \u003d interfaceType.getConstructor().getTopMostDefiningType(propertyName);\n                    compiler.report(t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superPropertyType.toString(), propertyType.toString()));\n                }\n            }\n        }\n    } else if (!foundInterfaceProperty) {\n        compiler.report(t.makeError(n, UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1011,
      "functionName": "checkDeclaredPropertyInheritance",
      "functionAnnotation": "",
      "functionDoc": "Given a constructor type and a property name, check that the property has\nthe JSDoc annotation @override iff the property is declared on a\nsuperclass. Several checks regarding inheritance correctness are also\nperformed.\n",
      "diff": "@@ -1,41 +1,57 @@\n private void checkDeclaredPropertyInheritance(NodeTraversal t, Node n, FunctionType ctorType, String propertyName, JSDocInfo info, JSType propertyType) {\n     if (hasUnknownOrEmptySupertype(ctorType)) {\n         return;\n     }\n     FunctionType superClass \u003d ctorType.getSuperClassConstructor();\n     boolean superClassHasProperty \u003d superClass !\u003d null \u0026\u0026 superClass.getPrototype().hasProperty(propertyName);\n+    boolean superInterfacesHasProperty \u003d false;\n+    if (ctorType.isInterface()) {\n+        for (ObjectType interfaceType : ctorType.getExtendedInterfaces()) {\n+            superInterfacesHasProperty \u003d superInterfacesHasProperty || interfaceType.hasProperty(propertyName);\n+        }\n+    }\n     boolean declaredOverride \u003d info !\u003d null \u0026\u0026 info.isOverride();\n     boolean foundInterfaceProperty \u003d false;\n     if (ctorType.isConstructor()) {\n-        for (JSType implementedInterface : ctorType.getImplementedInterfaces()) {\n+        for (JSType implementedInterface : ctorType.getAllImplementedInterfaces()) {\n             if (implementedInterface.isUnknownType() || implementedInterface.isEmptyType()) {\n                 continue;\n             }\n             FunctionType interfaceType \u003d implementedInterface.toObjectType().getConstructor();\n             Preconditions.checkNotNull(interfaceType);\n             boolean interfaceHasProperty \u003d interfaceType.getPrototype().hasProperty(propertyName);\n             foundInterfaceProperty \u003d foundInterfaceProperty || interfaceHasProperty;\n             if (reportMissingOverride.isOn() \u0026\u0026 !declaredOverride \u0026\u0026 interfaceHasProperty) {\n                 compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));\n             }\n         }\n     }\n-    if (!declaredOverride \u0026\u0026 !superClassHasProperty) {\n+    if (!declaredOverride \u0026\u0026 !superClassHasProperty \u0026\u0026 !superInterfacesHasProperty) {\n         return;\n     }\n     JSType topInstanceType \u003d superClassHasProperty ? superClass.getTopMostDefiningType(propertyName) : null;\n     if (reportMissingOverride.isOn() \u0026\u0026 ctorType.isConstructor() \u0026\u0026 !declaredOverride \u0026\u0026 superClassHasProperty) {\n         compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));\n     }\n     if (!declaredOverride) {\n         return;\n     }\n     if (superClassHasProperty) {\n         JSType superClassPropType \u003d superClass.getPrototype().getPropertyType(propertyName);\n         if (!propertyType.canAssignTo(superClassPropType)) {\n             compiler.report(t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));\n         }\n+    } else if (superInterfacesHasProperty) {\n+        for (ObjectType interfaceType : ctorType.getExtendedInterfaces()) {\n+            if (interfaceType.hasProperty(propertyName)) {\n+                JSType superPropertyType \u003d interfaceType.getPropertyType(propertyName);\n+                if (!propertyType.canAssignTo(superPropertyType)) {\n+                    topInstanceType \u003d interfaceType.getConstructor().getTopMostDefiningType(propertyName);\n+                    compiler.report(t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superPropertyType.toString(), propertyType.toString()));\n+                }\n+            }\n+        }\n     } else if (!foundInterfaceProperty) {\n         compiler.report(t.makeError(n, UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2851a41947bed8b8e100c7dac7d1edbc1c909d24": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nGot multiple cases broken from different teams.\n\n*** Original change description ***\n\nImplement multi extends for interfaces\n\nR\u003dnicksantos\nDELTA\u003d635  (41 added, 560 deleted, 34 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1813\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1077 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/10/11, 2:34 PM",
      "commitName": "2851a41947bed8b8e100c7dac7d1edbc1c909d24",
      "commitAuthor": "zhuyi@google.com",
      "commitDateOld": "5/10/11, 1:26 PM",
      "commitNameOld": "a36a61a9027c5bca5752b0ecca7c609c07e568bb",
      "commitAuthorOld": "zhuyi@google.com",
      "daysBetweenCommits": 0.05,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private void checkDeclaredPropertyInheritance(NodeTraversal t, Node n, FunctionType ctorType, String propertyName, JSDocInfo info, JSType propertyType) {\n    if (hasUnknownOrEmptySupertype(ctorType)) {\n        return;\n    }\n    FunctionType superClass \u003d ctorType.getSuperClassConstructor();\n    boolean superClassHasProperty \u003d superClass !\u003d null \u0026\u0026 superClass.getPrototype().hasProperty(propertyName);\n    boolean declaredOverride \u003d info !\u003d null \u0026\u0026 info.isOverride();\n    boolean foundInterfaceProperty \u003d false;\n    if (ctorType.isConstructor()) {\n        for (JSType implementedInterface : ctorType.getImplementedInterfaces()) {\n            if (implementedInterface.isUnknownType() || implementedInterface.isEmptyType()) {\n                continue;\n            }\n            FunctionType interfaceType \u003d implementedInterface.toObjectType().getConstructor();\n            Preconditions.checkNotNull(interfaceType);\n            boolean interfaceHasProperty \u003d interfaceType.getPrototype().hasProperty(propertyName);\n            foundInterfaceProperty \u003d foundInterfaceProperty || interfaceHasProperty;\n            if (reportMissingOverride.isOn() \u0026\u0026 !declaredOverride \u0026\u0026 interfaceHasProperty) {\n                compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));\n            }\n        }\n    }\n    if (!declaredOverride \u0026\u0026 !superClassHasProperty) {\n        return;\n    }\n    JSType topInstanceType \u003d superClassHasProperty ? superClass.getTopMostDefiningType(propertyName) : null;\n    if (reportMissingOverride.isOn() \u0026\u0026 ctorType.isConstructor() \u0026\u0026 !declaredOverride \u0026\u0026 superClassHasProperty) {\n        compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));\n    }\n    if (!declaredOverride) {\n        return;\n    }\n    if (superClassHasProperty) {\n        JSType superClassPropType \u003d superClass.getPrototype().getPropertyType(propertyName);\n        if (!propertyType.canAssignTo(superClassPropType)) {\n            compiler.report(t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));\n        }\n    } else if (!foundInterfaceProperty) {\n        compiler.report(t.makeError(n, UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1011,
      "functionName": "checkDeclaredPropertyInheritance",
      "functionAnnotation": "",
      "functionDoc": "Given a constructor type and a property name, check that the property has\nthe JSDoc annotation @override iff the property is declared on a\nsuperclass. Several checks regarding inheritance correctness are also\nperformed.\n",
      "diff": "@@ -1,57 +1,41 @@\n private void checkDeclaredPropertyInheritance(NodeTraversal t, Node n, FunctionType ctorType, String propertyName, JSDocInfo info, JSType propertyType) {\n     if (hasUnknownOrEmptySupertype(ctorType)) {\n         return;\n     }\n     FunctionType superClass \u003d ctorType.getSuperClassConstructor();\n     boolean superClassHasProperty \u003d superClass !\u003d null \u0026\u0026 superClass.getPrototype().hasProperty(propertyName);\n-    boolean superInterfacesHasProperty \u003d false;\n-    if (ctorType.isInterface()) {\n-        for (ObjectType interfaceType : ctorType.getExtendedInterfaces()) {\n-            superInterfacesHasProperty \u003d superInterfacesHasProperty || interfaceType.hasProperty(propertyName);\n-        }\n-    }\n     boolean declaredOverride \u003d info !\u003d null \u0026\u0026 info.isOverride();\n     boolean foundInterfaceProperty \u003d false;\n     if (ctorType.isConstructor()) {\n-        for (JSType implementedInterface : ctorType.getAllImplementedInterfaces()) {\n+        for (JSType implementedInterface : ctorType.getImplementedInterfaces()) {\n             if (implementedInterface.isUnknownType() || implementedInterface.isEmptyType()) {\n                 continue;\n             }\n             FunctionType interfaceType \u003d implementedInterface.toObjectType().getConstructor();\n             Preconditions.checkNotNull(interfaceType);\n             boolean interfaceHasProperty \u003d interfaceType.getPrototype().hasProperty(propertyName);\n             foundInterfaceProperty \u003d foundInterfaceProperty || interfaceHasProperty;\n             if (reportMissingOverride.isOn() \u0026\u0026 !declaredOverride \u0026\u0026 interfaceHasProperty) {\n                 compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));\n             }\n         }\n     }\n-    if (!declaredOverride \u0026\u0026 !superClassHasProperty \u0026\u0026 !superInterfacesHasProperty) {\n+    if (!declaredOverride \u0026\u0026 !superClassHasProperty) {\n         return;\n     }\n     JSType topInstanceType \u003d superClassHasProperty ? superClass.getTopMostDefiningType(propertyName) : null;\n     if (reportMissingOverride.isOn() \u0026\u0026 ctorType.isConstructor() \u0026\u0026 !declaredOverride \u0026\u0026 superClassHasProperty) {\n         compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));\n     }\n     if (!declaredOverride) {\n         return;\n     }\n     if (superClassHasProperty) {\n         JSType superClassPropType \u003d superClass.getPrototype().getPropertyType(propertyName);\n         if (!propertyType.canAssignTo(superClassPropType)) {\n             compiler.report(t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));\n         }\n-    } else if (superInterfacesHasProperty) {\n-        for (ObjectType interfaceType : ctorType.getExtendedInterfaces()) {\n-            if (interfaceType.hasProperty(propertyName)) {\n-                JSType superPropertyType \u003d interfaceType.getPropertyType(propertyName);\n-                if (!propertyType.canAssignTo(superPropertyType)) {\n-                    topInstanceType \u003d interfaceType.getConstructor().getTopMostDefiningType(propertyName);\n-                    compiler.report(t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superPropertyType.toString(), propertyType.toString()));\n-                }\n-            }\n-        }\n     } else if (!foundInterfaceProperty) {\n         compiler.report(t.makeError(n, UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a36a61a9027c5bca5752b0ecca7c609c07e568bb": {
      "type": "Ybodychange",
      "commitMessage": "\nImplement multi extends for interfaces\n\nR\u003dnicksantos\nDELTA\u003d635  (560 added, 41 deleted, 34 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1810\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1074 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/10/11, 1:26 PM",
      "commitName": "a36a61a9027c5bca5752b0ecca7c609c07e568bb",
      "commitAuthor": "zhuyi@google.com",
      "commitDateOld": "4/19/11, 5:06 PM",
      "commitNameOld": "e82290302eaf2757281651588ee43441ed6d57d6",
      "commitAuthorOld": "zhuyi@google.com",
      "daysBetweenCommits": 20.85,
      "commitsBetweenForRepo": 50,
      "commitsBetweenForFile": 1,
      "actualSource": "private void checkDeclaredPropertyInheritance(NodeTraversal t, Node n, FunctionType ctorType, String propertyName, JSDocInfo info, JSType propertyType) {\n    if (hasUnknownOrEmptySupertype(ctorType)) {\n        return;\n    }\n    FunctionType superClass \u003d ctorType.getSuperClassConstructor();\n    boolean superClassHasProperty \u003d superClass !\u003d null \u0026\u0026 superClass.getPrototype().hasProperty(propertyName);\n    boolean superInterfacesHasProperty \u003d false;\n    if (ctorType.isInterface()) {\n        for (ObjectType interfaceType : ctorType.getExtendedInterfaces()) {\n            superInterfacesHasProperty \u003d superInterfacesHasProperty || interfaceType.hasProperty(propertyName);\n        }\n    }\n    boolean declaredOverride \u003d info !\u003d null \u0026\u0026 info.isOverride();\n    boolean foundInterfaceProperty \u003d false;\n    if (ctorType.isConstructor()) {\n        for (JSType implementedInterface : ctorType.getAllImplementedInterfaces()) {\n            if (implementedInterface.isUnknownType() || implementedInterface.isEmptyType()) {\n                continue;\n            }\n            FunctionType interfaceType \u003d implementedInterface.toObjectType().getConstructor();\n            Preconditions.checkNotNull(interfaceType);\n            boolean interfaceHasProperty \u003d interfaceType.getPrototype().hasProperty(propertyName);\n            foundInterfaceProperty \u003d foundInterfaceProperty || interfaceHasProperty;\n            if (reportMissingOverride.isOn() \u0026\u0026 !declaredOverride \u0026\u0026 interfaceHasProperty) {\n                compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));\n            }\n        }\n    }\n    if (!declaredOverride \u0026\u0026 !superClassHasProperty \u0026\u0026 !superInterfacesHasProperty) {\n        return;\n    }\n    JSType topInstanceType \u003d superClassHasProperty ? superClass.getTopMostDefiningType(propertyName) : null;\n    if (reportMissingOverride.isOn() \u0026\u0026 ctorType.isConstructor() \u0026\u0026 !declaredOverride \u0026\u0026 superClassHasProperty) {\n        compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));\n    }\n    if (!declaredOverride) {\n        return;\n    }\n    if (superClassHasProperty) {\n        JSType superClassPropType \u003d superClass.getPrototype().getPropertyType(propertyName);\n        if (!propertyType.canAssignTo(superClassPropType)) {\n            compiler.report(t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));\n        }\n    } else if (superInterfacesHasProperty) {\n        for (ObjectType interfaceType : ctorType.getExtendedInterfaces()) {\n            if (interfaceType.hasProperty(propertyName)) {\n                JSType superPropertyType \u003d interfaceType.getPropertyType(propertyName);\n                if (!propertyType.canAssignTo(superPropertyType)) {\n                    topInstanceType \u003d interfaceType.getConstructor().getTopMostDefiningType(propertyName);\n                    compiler.report(t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superPropertyType.toString(), propertyType.toString()));\n                }\n            }\n        }\n    } else if (!foundInterfaceProperty) {\n        compiler.report(t.makeError(n, UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1011,
      "functionName": "checkDeclaredPropertyInheritance",
      "functionAnnotation": "",
      "functionDoc": "Given a constructor type and a property name, check that the property has\nthe JSDoc annotation @override iff the property is declared on a\nsuperclass. Several checks regarding inheritance correctness are also\nperformed.\n",
      "diff": "@@ -1,41 +1,57 @@\n private void checkDeclaredPropertyInheritance(NodeTraversal t, Node n, FunctionType ctorType, String propertyName, JSDocInfo info, JSType propertyType) {\n     if (hasUnknownOrEmptySupertype(ctorType)) {\n         return;\n     }\n     FunctionType superClass \u003d ctorType.getSuperClassConstructor();\n     boolean superClassHasProperty \u003d superClass !\u003d null \u0026\u0026 superClass.getPrototype().hasProperty(propertyName);\n+    boolean superInterfacesHasProperty \u003d false;\n+    if (ctorType.isInterface()) {\n+        for (ObjectType interfaceType : ctorType.getExtendedInterfaces()) {\n+            superInterfacesHasProperty \u003d superInterfacesHasProperty || interfaceType.hasProperty(propertyName);\n+        }\n+    }\n     boolean declaredOverride \u003d info !\u003d null \u0026\u0026 info.isOverride();\n     boolean foundInterfaceProperty \u003d false;\n     if (ctorType.isConstructor()) {\n-        for (JSType implementedInterface : ctorType.getImplementedInterfaces()) {\n+        for (JSType implementedInterface : ctorType.getAllImplementedInterfaces()) {\n             if (implementedInterface.isUnknownType() || implementedInterface.isEmptyType()) {\n                 continue;\n             }\n             FunctionType interfaceType \u003d implementedInterface.toObjectType().getConstructor();\n             Preconditions.checkNotNull(interfaceType);\n             boolean interfaceHasProperty \u003d interfaceType.getPrototype().hasProperty(propertyName);\n             foundInterfaceProperty \u003d foundInterfaceProperty || interfaceHasProperty;\n             if (reportMissingOverride.isOn() \u0026\u0026 !declaredOverride \u0026\u0026 interfaceHasProperty) {\n                 compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));\n             }\n         }\n     }\n-    if (!declaredOverride \u0026\u0026 !superClassHasProperty) {\n+    if (!declaredOverride \u0026\u0026 !superClassHasProperty \u0026\u0026 !superInterfacesHasProperty) {\n         return;\n     }\n     JSType topInstanceType \u003d superClassHasProperty ? superClass.getTopMostDefiningType(propertyName) : null;\n     if (reportMissingOverride.isOn() \u0026\u0026 ctorType.isConstructor() \u0026\u0026 !declaredOverride \u0026\u0026 superClassHasProperty) {\n         compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));\n     }\n     if (!declaredOverride) {\n         return;\n     }\n     if (superClassHasProperty) {\n         JSType superClassPropType \u003d superClass.getPrototype().getPropertyType(propertyName);\n         if (!propertyType.canAssignTo(superClassPropType)) {\n             compiler.report(t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));\n         }\n+    } else if (superInterfacesHasProperty) {\n+        for (ObjectType interfaceType : ctorType.getExtendedInterfaces()) {\n+            if (interfaceType.hasProperty(propertyName)) {\n+                JSType superPropertyType \u003d interfaceType.getPropertyType(propertyName);\n+                if (!propertyType.canAssignTo(superPropertyType)) {\n+                    topInstanceType \u003d interfaceType.getConstructor().getTopMostDefiningType(propertyName);\n+                    compiler.report(t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superPropertyType.toString(), propertyType.toString()));\n+                }\n+            }\n+        }\n     } else if (!foundInterfaceProperty) {\n         compiler.report(t.makeError(n, UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "09ed556367fbe81b3003881dfacad643939664c0": {
      "type": "Ybodychange",
      "commitMessage": "\nFixes issue 204\nAdd support for data members on interfaces\n\nR\u003djohnlenz,nicksantos,acleung\nDELTA\u003d211  (77 added, 125 deleted, 9 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d692\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@829 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/28/11, 8:08 AM",
      "commitName": "09ed556367fbe81b3003881dfacad643939664c0",
      "commitAuthor": "zhuyi@google.com",
      "commitDateOld": "1/27/11, 10:33 AM",
      "commitNameOld": "70f817ae4f80ac11dd2dfe97babf5896c690fb48",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 31.9,
      "commitsBetweenForRepo": 91,
      "commitsBetweenForFile": 1,
      "actualSource": "private void checkDeclaredPropertyInheritance(NodeTraversal t, Node n, FunctionType ctorType, String propertyName, JSDocInfo info, JSType propertyType) {\n    if (hasUnknownOrEmptySupertype(ctorType)) {\n        return;\n    }\n    FunctionType superClass \u003d ctorType.getSuperClassConstructor();\n    boolean superClassHasProperty \u003d superClass !\u003d null \u0026\u0026 superClass.getPrototype().hasProperty(propertyName);\n    boolean declaredOverride \u003d info !\u003d null \u0026\u0026 info.isOverride();\n    boolean foundInterfaceProperty \u003d false;\n    if (ctorType.isConstructor()) {\n        for (JSType implementedInterface : ctorType.getImplementedInterfaces()) {\n            if (implementedInterface.isUnknownType() || implementedInterface.isEmptyType()) {\n                continue;\n            }\n            FunctionType interfaceType \u003d implementedInterface.toObjectType().getConstructor();\n            Preconditions.checkNotNull(interfaceType);\n            boolean interfaceHasProperty \u003d interfaceType.getPrototype().hasProperty(propertyName);\n            foundInterfaceProperty \u003d foundInterfaceProperty || interfaceHasProperty;\n            if (reportMissingOverride.isOn() \u0026\u0026 !declaredOverride \u0026\u0026 interfaceHasProperty) {\n                compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));\n            }\n        }\n    }\n    if (!declaredOverride \u0026\u0026 !superClassHasProperty) {\n        return;\n    }\n    JSType topInstanceType \u003d superClassHasProperty ? superClass.getTopMostDefiningType(propertyName) : null;\n    if (reportMissingOverride.isOn() \u0026\u0026 ctorType.isConstructor() \u0026\u0026 !declaredOverride \u0026\u0026 superClassHasProperty) {\n        compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));\n    }\n    if (!declaredOverride) {\n        return;\n    }\n    if (superClassHasProperty) {\n        JSType superClassPropType \u003d superClass.getPrototype().getPropertyType(propertyName);\n        if (!propertyType.canAssignTo(superClassPropType)) {\n            compiler.report(t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));\n        }\n    } else if (!foundInterfaceProperty) {\n        compiler.report(t.makeError(n, UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1006,
      "functionName": "checkDeclaredPropertyInheritance",
      "functionAnnotation": "",
      "functionDoc": "Given a constructor type and a property name, check that the property has\nthe JSDoc annotation @override iff the property is declared on a\nsuperclass. Several checks regarding inheritance correctness are also\nperformed.\n",
      "diff": "@@ -1,47 +1,41 @@\n private void checkDeclaredPropertyInheritance(NodeTraversal t, Node n, FunctionType ctorType, String propertyName, JSDocInfo info, JSType propertyType) {\n     if (hasUnknownOrEmptySupertype(ctorType)) {\n         return;\n     }\n     FunctionType superClass \u003d ctorType.getSuperClassConstructor();\n     boolean superClassHasProperty \u003d superClass !\u003d null \u0026\u0026 superClass.getPrototype().hasProperty(propertyName);\n     boolean declaredOverride \u003d info !\u003d null \u0026\u0026 info.isOverride();\n     boolean foundInterfaceProperty \u003d false;\n     if (ctorType.isConstructor()) {\n         for (JSType implementedInterface : ctorType.getImplementedInterfaces()) {\n             if (implementedInterface.isUnknownType() || implementedInterface.isEmptyType()) {\n                 continue;\n             }\n             FunctionType interfaceType \u003d implementedInterface.toObjectType().getConstructor();\n             Preconditions.checkNotNull(interfaceType);\n             boolean interfaceHasProperty \u003d interfaceType.getPrototype().hasProperty(propertyName);\n             foundInterfaceProperty \u003d foundInterfaceProperty || interfaceHasProperty;\n             if (reportMissingOverride.isOn() \u0026\u0026 !declaredOverride \u0026\u0026 interfaceHasProperty) {\n                 compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));\n             }\n-            if (interfaceHasProperty) {\n-                JSType interfacePropType \u003d interfaceType.getPrototype().getPropertyType(propertyName);\n-                if (!propertyType.canAssignTo(interfacePropType)) {\n-                    compiler.report(t.makeError(n, HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString(), interfacePropType.toString(), propertyType.toString()));\n-                }\n-            }\n         }\n     }\n     if (!declaredOverride \u0026\u0026 !superClassHasProperty) {\n         return;\n     }\n     JSType topInstanceType \u003d superClassHasProperty ? superClass.getTopMostDefiningType(propertyName) : null;\n     if (reportMissingOverride.isOn() \u0026\u0026 ctorType.isConstructor() \u0026\u0026 !declaredOverride \u0026\u0026 superClassHasProperty) {\n         compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));\n     }\n     if (!declaredOverride) {\n         return;\n     }\n     if (superClassHasProperty) {\n         JSType superClassPropType \u003d superClass.getPrototype().getPropertyType(propertyName);\n         if (!propertyType.canAssignTo(superClassPropType)) {\n             compiler.report(t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));\n         }\n     } else if (!foundInterfaceProperty) {\n         compiler.report(t.makeError(n, UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "043a352c2e85815a90a1926d112902d924bab6c1": {
      "type": "Ybodychange",
      "commitMessage": "\nWhen we can\u0027t find a forward-declared type,\nthat type should resolve to an empty type.\nThis ensures that if someone tries to pass a param or return\nvalue to it, they get a type warning.\nTry #3\n!!!\n\nR\u003djohnlenz\nDELTA\u003d534  (451 added, 37 deleted, 46 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d362\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@731 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/26/11, 8:30 AM",
      "commitName": "043a352c2e85815a90a1926d112902d924bab6c1",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "1/18/11, 5:02 PM",
      "commitNameOld": "11bd742011d67590031dba6e9d1f7186393b38a0",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 7.64,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "actualSource": "private void checkDeclaredPropertyInheritance(NodeTraversal t, Node n, FunctionType ctorType, String propertyName, JSDocInfo info, JSType propertyType) {\n    if (hasUnknownOrEmptySupertype(ctorType)) {\n        return;\n    }\n    FunctionType superClass \u003d ctorType.getSuperClassConstructor();\n    boolean superClassHasProperty \u003d superClass !\u003d null \u0026\u0026 superClass.getPrototype().hasProperty(propertyName);\n    boolean declaredOverride \u003d info !\u003d null \u0026\u0026 info.isOverride();\n    boolean foundInterfaceProperty \u003d false;\n    if (ctorType.isConstructor()) {\n        for (JSType implementedInterface : ctorType.getImplementedInterfaces()) {\n            if (implementedInterface.isUnknownType() || implementedInterface.isEmptyType()) {\n                continue;\n            }\n            FunctionType interfaceType \u003d implementedInterface.toObjectType().getConstructor();\n            Preconditions.checkNotNull(interfaceType);\n            boolean interfaceHasProperty \u003d interfaceType.getPrototype().hasProperty(propertyName);\n            foundInterfaceProperty \u003d foundInterfaceProperty || interfaceHasProperty;\n            if (reportMissingOverride.isOn() \u0026\u0026 !declaredOverride \u0026\u0026 interfaceHasProperty) {\n                compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));\n            }\n            if (interfaceHasProperty) {\n                JSType interfacePropType \u003d interfaceType.getPrototype().getPropertyType(propertyName);\n                if (!propertyType.canAssignTo(interfacePropType)) {\n                    compiler.report(t.makeError(n, HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString(), interfacePropType.toString(), propertyType.toString()));\n                }\n            }\n        }\n    }\n    if (!declaredOverride \u0026\u0026 !superClassHasProperty) {\n        return;\n    }\n    JSType topInstanceType \u003d superClassHasProperty ? superClass.getTopMostDefiningType(propertyName) : null;\n    if (reportMissingOverride.isOn() \u0026\u0026 ctorType.isConstructor() \u0026\u0026 !declaredOverride \u0026\u0026 superClassHasProperty) {\n        compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));\n    }\n    if (!declaredOverride) {\n        return;\n    }\n    if (superClassHasProperty) {\n        JSType superClassPropType \u003d superClass.getPrototype().getPropertyType(propertyName);\n        if (!propertyType.canAssignTo(superClassPropType)) {\n            compiler.report(t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));\n        }\n    } else if (!foundInterfaceProperty) {\n        compiler.report(t.makeError(n, UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 949,
      "functionName": "checkDeclaredPropertyInheritance",
      "functionAnnotation": "",
      "functionDoc": "Given a constructor type and a property name, check that the property has\nthe JSDoc annotation @override iff the property is declared on a\nsuperclass. Several checks regarding inheritance correctness are also\nperformed.\n",
      "diff": "@@ -1,46 +1,47 @@\n private void checkDeclaredPropertyInheritance(NodeTraversal t, Node n, FunctionType ctorType, String propertyName, JSDocInfo info, JSType propertyType) {\n-    if (ctorType.hasUnknownSupertype()) {\n+    if (hasUnknownOrEmptySupertype(ctorType)) {\n         return;\n     }\n     FunctionType superClass \u003d ctorType.getSuperClassConstructor();\n     boolean superClassHasProperty \u003d superClass !\u003d null \u0026\u0026 superClass.getPrototype().hasProperty(propertyName);\n     boolean declaredOverride \u003d info !\u003d null \u0026\u0026 info.isOverride();\n     boolean foundInterfaceProperty \u003d false;\n     if (ctorType.isConstructor()) {\n         for (JSType implementedInterface : ctorType.getImplementedInterfaces()) {\n-            if (implementedInterface.isUnknownType()) {\n+            if (implementedInterface.isUnknownType() || implementedInterface.isEmptyType()) {\n                 continue;\n             }\n             FunctionType interfaceType \u003d implementedInterface.toObjectType().getConstructor();\n+            Preconditions.checkNotNull(interfaceType);\n             boolean interfaceHasProperty \u003d interfaceType.getPrototype().hasProperty(propertyName);\n             foundInterfaceProperty \u003d foundInterfaceProperty || interfaceHasProperty;\n             if (reportMissingOverride.isOn() \u0026\u0026 !declaredOverride \u0026\u0026 interfaceHasProperty) {\n                 compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));\n             }\n             if (interfaceHasProperty) {\n                 JSType interfacePropType \u003d interfaceType.getPrototype().getPropertyType(propertyName);\n                 if (!propertyType.canAssignTo(interfacePropType)) {\n                     compiler.report(t.makeError(n, HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString(), interfacePropType.toString(), propertyType.toString()));\n                 }\n             }\n         }\n     }\n     if (!declaredOverride \u0026\u0026 !superClassHasProperty) {\n         return;\n     }\n     JSType topInstanceType \u003d superClassHasProperty ? superClass.getTopMostDefiningType(propertyName) : null;\n     if (reportMissingOverride.isOn() \u0026\u0026 ctorType.isConstructor() \u0026\u0026 !declaredOverride \u0026\u0026 superClassHasProperty) {\n         compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));\n     }\n     if (!declaredOverride) {\n         return;\n     }\n     if (superClassHasProperty) {\n         JSType superClassPropType \u003d superClass.getPrototype().getPropertyType(propertyName);\n         if (!propertyType.canAssignTo(superClassPropType)) {\n             compiler.report(t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));\n         }\n     } else if (!foundInterfaceProperty) {\n         compiler.report(t.makeError(n, UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "11bd742011d67590031dba6e9d1f7186393b38a0": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nbreaks contacts\n\n*** Original change description ***\n\nWhen we can\u0027t find a forward-declared type,\nthat type should resolve to an empty type.\nThis ensures that if someone tries to pass a param or return\nvalue to it, they get a type warning.\n\nDELTA\u003d461  (37 added, 385 deleted, 39 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d302\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@703 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/18/11, 5:02 PM",
      "commitName": "11bd742011d67590031dba6e9d1f7186393b38a0",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "1/18/11, 3:28 PM",
      "commitNameOld": "6dbca87c463d8a1e229a0d92d5cdf92247fdefde",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void checkDeclaredPropertyInheritance(NodeTraversal t, Node n, FunctionType ctorType, String propertyName, JSDocInfo info, JSType propertyType) {\n    if (ctorType.hasUnknownSupertype()) {\n        return;\n    }\n    FunctionType superClass \u003d ctorType.getSuperClassConstructor();\n    boolean superClassHasProperty \u003d superClass !\u003d null \u0026\u0026 superClass.getPrototype().hasProperty(propertyName);\n    boolean declaredOverride \u003d info !\u003d null \u0026\u0026 info.isOverride();\n    boolean foundInterfaceProperty \u003d false;\n    if (ctorType.isConstructor()) {\n        for (JSType implementedInterface : ctorType.getImplementedInterfaces()) {\n            if (implementedInterface.isUnknownType()) {\n                continue;\n            }\n            FunctionType interfaceType \u003d implementedInterface.toObjectType().getConstructor();\n            boolean interfaceHasProperty \u003d interfaceType.getPrototype().hasProperty(propertyName);\n            foundInterfaceProperty \u003d foundInterfaceProperty || interfaceHasProperty;\n            if (reportMissingOverride.isOn() \u0026\u0026 !declaredOverride \u0026\u0026 interfaceHasProperty) {\n                compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));\n            }\n            if (interfaceHasProperty) {\n                JSType interfacePropType \u003d interfaceType.getPrototype().getPropertyType(propertyName);\n                if (!propertyType.canAssignTo(interfacePropType)) {\n                    compiler.report(t.makeError(n, HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString(), interfacePropType.toString(), propertyType.toString()));\n                }\n            }\n        }\n    }\n    if (!declaredOverride \u0026\u0026 !superClassHasProperty) {\n        return;\n    }\n    JSType topInstanceType \u003d superClassHasProperty ? superClass.getTopMostDefiningType(propertyName) : null;\n    if (reportMissingOverride.isOn() \u0026\u0026 ctorType.isConstructor() \u0026\u0026 !declaredOverride \u0026\u0026 superClassHasProperty) {\n        compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));\n    }\n    if (!declaredOverride) {\n        return;\n    }\n    if (superClassHasProperty) {\n        JSType superClassPropType \u003d superClass.getPrototype().getPropertyType(propertyName);\n        if (!propertyType.canAssignTo(superClassPropType)) {\n            compiler.report(t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));\n        }\n    } else if (!foundInterfaceProperty) {\n        compiler.report(t.makeError(n, UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 949,
      "functionName": "checkDeclaredPropertyInheritance",
      "functionAnnotation": "",
      "functionDoc": "Given a constructor type and a property name, check that the property has\nthe JSDoc annotation @override iff the property is declared on a\nsuperclass. Several checks regarding inheritance correctness are also\nperformed.\n",
      "diff": "@@ -1,47 +1,46 @@\n private void checkDeclaredPropertyInheritance(NodeTraversal t, Node n, FunctionType ctorType, String propertyName, JSDocInfo info, JSType propertyType) {\n-    if (hasUnknownOrEmptySupertype(ctorType)) {\n+    if (ctorType.hasUnknownSupertype()) {\n         return;\n     }\n     FunctionType superClass \u003d ctorType.getSuperClassConstructor();\n     boolean superClassHasProperty \u003d superClass !\u003d null \u0026\u0026 superClass.getPrototype().hasProperty(propertyName);\n     boolean declaredOverride \u003d info !\u003d null \u0026\u0026 info.isOverride();\n     boolean foundInterfaceProperty \u003d false;\n     if (ctorType.isConstructor()) {\n         for (JSType implementedInterface : ctorType.getImplementedInterfaces()) {\n-            if (implementedInterface.isUnknownType() || implementedInterface.isEmptyType()) {\n+            if (implementedInterface.isUnknownType()) {\n                 continue;\n             }\n             FunctionType interfaceType \u003d implementedInterface.toObjectType().getConstructor();\n-            Preconditions.checkNotNull(interfaceType);\n             boolean interfaceHasProperty \u003d interfaceType.getPrototype().hasProperty(propertyName);\n             foundInterfaceProperty \u003d foundInterfaceProperty || interfaceHasProperty;\n             if (reportMissingOverride.isOn() \u0026\u0026 !declaredOverride \u0026\u0026 interfaceHasProperty) {\n                 compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));\n             }\n             if (interfaceHasProperty) {\n                 JSType interfacePropType \u003d interfaceType.getPrototype().getPropertyType(propertyName);\n                 if (!propertyType.canAssignTo(interfacePropType)) {\n                     compiler.report(t.makeError(n, HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString(), interfacePropType.toString(), propertyType.toString()));\n                 }\n             }\n         }\n     }\n     if (!declaredOverride \u0026\u0026 !superClassHasProperty) {\n         return;\n     }\n     JSType topInstanceType \u003d superClassHasProperty ? superClass.getTopMostDefiningType(propertyName) : null;\n     if (reportMissingOverride.isOn() \u0026\u0026 ctorType.isConstructor() \u0026\u0026 !declaredOverride \u0026\u0026 superClassHasProperty) {\n         compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));\n     }\n     if (!declaredOverride) {\n         return;\n     }\n     if (superClassHasProperty) {\n         JSType superClassPropType \u003d superClass.getPrototype().getPropertyType(propertyName);\n         if (!propertyType.canAssignTo(superClassPropType)) {\n             compiler.report(t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));\n         }\n     } else if (!foundInterfaceProperty) {\n         compiler.report(t.makeError(n, UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6dbca87c463d8a1e229a0d92d5cdf92247fdefde": {
      "type": "Ybodychange",
      "commitMessage": "\nWhen we can\u0027t find a forward-declared type,\nthat type should resolve to an empty type.\nThis ensures that if someone tries to pass a param or return\nvalue to it, they get a type warning.\n\nR\u003djohnlenz\nDELTA\u003d461  (385 added, 37 deleted, 39 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d301\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@702 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/18/11, 3:28 PM",
      "commitName": "6dbca87c463d8a1e229a0d92d5cdf92247fdefde",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "1/10/11, 12:54 PM",
      "commitNameOld": "9d9957fdd23ff13d187d4b8832d580bf8622baf6",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 8.11,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "actualSource": "private void checkDeclaredPropertyInheritance(NodeTraversal t, Node n, FunctionType ctorType, String propertyName, JSDocInfo info, JSType propertyType) {\n    if (hasUnknownOrEmptySupertype(ctorType)) {\n        return;\n    }\n    FunctionType superClass \u003d ctorType.getSuperClassConstructor();\n    boolean superClassHasProperty \u003d superClass !\u003d null \u0026\u0026 superClass.getPrototype().hasProperty(propertyName);\n    boolean declaredOverride \u003d info !\u003d null \u0026\u0026 info.isOverride();\n    boolean foundInterfaceProperty \u003d false;\n    if (ctorType.isConstructor()) {\n        for (JSType implementedInterface : ctorType.getImplementedInterfaces()) {\n            if (implementedInterface.isUnknownType() || implementedInterface.isEmptyType()) {\n                continue;\n            }\n            FunctionType interfaceType \u003d implementedInterface.toObjectType().getConstructor();\n            Preconditions.checkNotNull(interfaceType);\n            boolean interfaceHasProperty \u003d interfaceType.getPrototype().hasProperty(propertyName);\n            foundInterfaceProperty \u003d foundInterfaceProperty || interfaceHasProperty;\n            if (reportMissingOverride.isOn() \u0026\u0026 !declaredOverride \u0026\u0026 interfaceHasProperty) {\n                compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));\n            }\n            if (interfaceHasProperty) {\n                JSType interfacePropType \u003d interfaceType.getPrototype().getPropertyType(propertyName);\n                if (!propertyType.canAssignTo(interfacePropType)) {\n                    compiler.report(t.makeError(n, HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString(), interfacePropType.toString(), propertyType.toString()));\n                }\n            }\n        }\n    }\n    if (!declaredOverride \u0026\u0026 !superClassHasProperty) {\n        return;\n    }\n    JSType topInstanceType \u003d superClassHasProperty ? superClass.getTopMostDefiningType(propertyName) : null;\n    if (reportMissingOverride.isOn() \u0026\u0026 ctorType.isConstructor() \u0026\u0026 !declaredOverride \u0026\u0026 superClassHasProperty) {\n        compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));\n    }\n    if (!declaredOverride) {\n        return;\n    }\n    if (superClassHasProperty) {\n        JSType superClassPropType \u003d superClass.getPrototype().getPropertyType(propertyName);\n        if (!propertyType.canAssignTo(superClassPropType)) {\n            compiler.report(t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));\n        }\n    } else if (!foundInterfaceProperty) {\n        compiler.report(t.makeError(n, UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 949,
      "functionName": "checkDeclaredPropertyInheritance",
      "functionAnnotation": "",
      "functionDoc": "Given a constructor type and a property name, check that the property has\nthe JSDoc annotation @override iff the property is declared on a\nsuperclass. Several checks regarding inheritance correctness are also\nperformed.\n",
      "diff": "@@ -1,46 +1,47 @@\n private void checkDeclaredPropertyInheritance(NodeTraversal t, Node n, FunctionType ctorType, String propertyName, JSDocInfo info, JSType propertyType) {\n-    if (ctorType.hasUnknownSupertype()) {\n+    if (hasUnknownOrEmptySupertype(ctorType)) {\n         return;\n     }\n     FunctionType superClass \u003d ctorType.getSuperClassConstructor();\n     boolean superClassHasProperty \u003d superClass !\u003d null \u0026\u0026 superClass.getPrototype().hasProperty(propertyName);\n     boolean declaredOverride \u003d info !\u003d null \u0026\u0026 info.isOverride();\n     boolean foundInterfaceProperty \u003d false;\n     if (ctorType.isConstructor()) {\n         for (JSType implementedInterface : ctorType.getImplementedInterfaces()) {\n-            if (implementedInterface.isUnknownType()) {\n+            if (implementedInterface.isUnknownType() || implementedInterface.isEmptyType()) {\n                 continue;\n             }\n             FunctionType interfaceType \u003d implementedInterface.toObjectType().getConstructor();\n+            Preconditions.checkNotNull(interfaceType);\n             boolean interfaceHasProperty \u003d interfaceType.getPrototype().hasProperty(propertyName);\n             foundInterfaceProperty \u003d foundInterfaceProperty || interfaceHasProperty;\n             if (reportMissingOverride.isOn() \u0026\u0026 !declaredOverride \u0026\u0026 interfaceHasProperty) {\n                 compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));\n             }\n             if (interfaceHasProperty) {\n                 JSType interfacePropType \u003d interfaceType.getPrototype().getPropertyType(propertyName);\n                 if (!propertyType.canAssignTo(interfacePropType)) {\n                     compiler.report(t.makeError(n, HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString(), interfacePropType.toString(), propertyType.toString()));\n                 }\n             }\n         }\n     }\n     if (!declaredOverride \u0026\u0026 !superClassHasProperty) {\n         return;\n     }\n     JSType topInstanceType \u003d superClassHasProperty ? superClass.getTopMostDefiningType(propertyName) : null;\n     if (reportMissingOverride.isOn() \u0026\u0026 ctorType.isConstructor() \u0026\u0026 !declaredOverride \u0026\u0026 superClassHasProperty) {\n         compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));\n     }\n     if (!declaredOverride) {\n         return;\n     }\n     if (superClassHasProperty) {\n         JSType superClassPropType \u003d superClass.getPrototype().getPropertyType(propertyName);\n         if (!propertyType.canAssignTo(superClassPropType)) {\n             compiler.report(t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));\n         }\n     } else if (!foundInterfaceProperty) {\n         compiler.report(t.makeError(n, UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ef0c0c69bd0d838fa623bfa0e8a71855e7741126": {
      "type": "Ybodychange",
      "commitMessage": "\nInterface data members part 2:  Allow type checks on implementing\nclass declarations without \"@override\".\n\n\nR\u003dpupius,nicksantos\nDELTA\u003d95  (59 added, 32 deleted, 4 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d855001\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@521 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/28/10, 3:11 PM",
      "commitName": "ef0c0c69bd0d838fa623bfa0e8a71855e7741126",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "10/27/10, 7:03 PM",
      "commitNameOld": "de491e70b971caca03f07531c2caf97b878cd1ff",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.84,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "private void checkDeclaredPropertyInheritance(NodeTraversal t, Node n, FunctionType ctorType, String propertyName, JSDocInfo info, JSType propertyType) {\n    if (ctorType.hasUnknownSupertype()) {\n        return;\n    }\n    FunctionType superClass \u003d ctorType.getSuperClassConstructor();\n    boolean superClassHasProperty \u003d superClass !\u003d null \u0026\u0026 superClass.getPrototype().hasProperty(propertyName);\n    boolean declaredOverride \u003d info !\u003d null \u0026\u0026 info.isOverride();\n    boolean foundInterfaceProperty \u003d false;\n    if (ctorType.isConstructor()) {\n        for (JSType implementedInterface : ctorType.getImplementedInterfaces()) {\n            if (implementedInterface.isUnknownType()) {\n                continue;\n            }\n            FunctionType interfaceType \u003d implementedInterface.toObjectType().getConstructor();\n            boolean interfaceHasProperty \u003d interfaceType.getPrototype().hasProperty(propertyName);\n            foundInterfaceProperty \u003d foundInterfaceProperty || interfaceHasProperty;\n            if (reportMissingOverride.isOn() \u0026\u0026 !declaredOverride \u0026\u0026 interfaceHasProperty) {\n                compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));\n            }\n            if (interfaceHasProperty) {\n                JSType interfacePropType \u003d interfaceType.getPrototype().getPropertyType(propertyName);\n                if (!propertyType.canAssignTo(interfacePropType)) {\n                    compiler.report(t.makeError(n, HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString(), interfacePropType.toString(), propertyType.toString()));\n                }\n            }\n        }\n    }\n    if (!declaredOverride \u0026\u0026 !superClassHasProperty) {\n        return;\n    }\n    JSType topInstanceType \u003d superClassHasProperty ? superClass.getTopMostDefiningType(propertyName) : null;\n    if (reportMissingOverride.isOn() \u0026\u0026 ctorType.isConstructor() \u0026\u0026 !declaredOverride \u0026\u0026 superClassHasProperty) {\n        compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));\n    }\n    if (!declaredOverride) {\n        return;\n    }\n    if (superClassHasProperty) {\n        JSType superClassPropType \u003d superClass.getPrototype().getPropertyType(propertyName);\n        if (!propertyType.canAssignTo(superClassPropType)) {\n            compiler.report(t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));\n        }\n    } else if (!foundInterfaceProperty) {\n        compiler.report(t.makeError(n, UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 947,
      "functionName": "checkDeclaredPropertyInheritance",
      "functionAnnotation": "",
      "functionDoc": "Given a constructor type and a property name, check that the property has\nthe JSDoc annotation @override iff the property is declared on a\nsuperclass. Several checks regarding inheritance correctness are also\nperformed.\n",
      "diff": "@@ -1,49 +1,46 @@\n private void checkDeclaredPropertyInheritance(NodeTraversal t, Node n, FunctionType ctorType, String propertyName, JSDocInfo info, JSType propertyType) {\n     if (ctorType.hasUnknownSupertype()) {\n         return;\n     }\n     FunctionType superClass \u003d ctorType.getSuperClassConstructor();\n     boolean superClassHasProperty \u003d superClass !\u003d null \u0026\u0026 superClass.getPrototype().hasProperty(propertyName);\n     boolean declaredOverride \u003d info !\u003d null \u0026\u0026 info.isOverride();\n     boolean foundInterfaceProperty \u003d false;\n     if (ctorType.isConstructor()) {\n         for (JSType implementedInterface : ctorType.getImplementedInterfaces()) {\n             if (implementedInterface.isUnknownType()) {\n                 continue;\n             }\n             FunctionType interfaceType \u003d implementedInterface.toObjectType().getConstructor();\n             boolean interfaceHasProperty \u003d interfaceType.getPrototype().hasProperty(propertyName);\n             foundInterfaceProperty \u003d foundInterfaceProperty || interfaceHasProperty;\n             if (reportMissingOverride.isOn() \u0026\u0026 !declaredOverride \u0026\u0026 interfaceHasProperty) {\n                 compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));\n             }\n-            if (!declaredOverride) {\n-                continue;\n-            }\n             if (interfaceHasProperty) {\n                 JSType interfacePropType \u003d interfaceType.getPrototype().getPropertyType(propertyName);\n                 if (!propertyType.canAssignTo(interfacePropType)) {\n                     compiler.report(t.makeError(n, HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString(), interfacePropType.toString(), propertyType.toString()));\n                 }\n             }\n         }\n     }\n     if (!declaredOverride \u0026\u0026 !superClassHasProperty) {\n         return;\n     }\n     JSType topInstanceType \u003d superClassHasProperty ? superClass.getTopMostDefiningType(propertyName) : null;\n     if (reportMissingOverride.isOn() \u0026\u0026 ctorType.isConstructor() \u0026\u0026 !declaredOverride \u0026\u0026 superClassHasProperty) {\n         compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));\n     }\n     if (!declaredOverride) {\n         return;\n     }\n     if (superClassHasProperty) {\n         JSType superClassPropType \u003d superClass.getPrototype().getPropertyType(propertyName);\n         if (!propertyType.canAssignTo(superClassPropType)) {\n             compiler.report(t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));\n         }\n     } else if (!foundInterfaceProperty) {\n         compiler.report(t.makeError(n, UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4": {
      "type": "Ybodychange",
      "commitMessage": "Remove circular dependency between error-reporting and the rest\nof the compiler. (Nick)\nR\u003dalan\nDELTA\u003d152  (27 added, 28 deleted, 97 changed)\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@159 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/29/10, 7:04 AM",
      "commitName": "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "3/11/10, 9:31 PM",
      "commitNameOld": "7bfdbd9164601af44d17edd51be829fde2cc51aa",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 17.36,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "actualSource": "private void checkDeclaredPropertyInheritance(NodeTraversal t, Node n, FunctionType ctorType, String propertyName, JSDocInfo info, JSType propertyType) {\n    if (ctorType.hasUnknownSupertype()) {\n        return;\n    }\n    FunctionType superClass \u003d ctorType.getSuperClassConstructor();\n    boolean superClassHasProperty \u003d superClass !\u003d null \u0026\u0026 superClass.getPrototype().hasProperty(propertyName);\n    boolean declaredOverride \u003d info !\u003d null \u0026\u0026 info.isOverride();\n    boolean foundInterfaceProperty \u003d false;\n    if (ctorType.isConstructor()) {\n        for (JSType implementedInterface : ctorType.getImplementedInterfaces()) {\n            if (implementedInterface.isUnknownType()) {\n                continue;\n            }\n            FunctionType interfaceType \u003d implementedInterface.toObjectType().getConstructor();\n            boolean interfaceHasProperty \u003d interfaceType.getPrototype().hasProperty(propertyName);\n            foundInterfaceProperty \u003d foundInterfaceProperty || interfaceHasProperty;\n            if (reportMissingOverride.isOn() \u0026\u0026 !declaredOverride \u0026\u0026 interfaceHasProperty) {\n                compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));\n            }\n            if (!declaredOverride) {\n                continue;\n            }\n            if (interfaceHasProperty) {\n                JSType interfacePropType \u003d interfaceType.getPrototype().getPropertyType(propertyName);\n                if (!propertyType.canAssignTo(interfacePropType)) {\n                    compiler.report(t.makeError(n, HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString(), interfacePropType.toString(), propertyType.toString()));\n                }\n            }\n        }\n    }\n    if (!declaredOverride \u0026\u0026 !superClassHasProperty) {\n        return;\n    }\n    JSType topInstanceType \u003d superClassHasProperty ? superClass.getTopMostDefiningType(propertyName) : null;\n    if (reportMissingOverride.isOn() \u0026\u0026 ctorType.isConstructor() \u0026\u0026 !declaredOverride \u0026\u0026 superClassHasProperty) {\n        compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));\n    }\n    if (!declaredOverride) {\n        return;\n    }\n    if (superClassHasProperty) {\n        JSType superClassPropType \u003d superClass.getPrototype().getPropertyType(propertyName);\n        if (!propertyType.canAssignTo(superClassPropType)) {\n            compiler.report(t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));\n        }\n    } else if (!foundInterfaceProperty) {\n        compiler.report(t.makeError(n, UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 965,
      "functionName": "checkDeclaredPropertyInheritance",
      "functionAnnotation": "",
      "functionDoc": "Given a constructor type and a property name, check that the property has\nthe JSDoc annotation @override iff the property is declared on a\nsuperclass. Several checks regarding inheritance correctness are also\nperformed.\n",
      "diff": "@@ -1,49 +1,49 @@\n private void checkDeclaredPropertyInheritance(NodeTraversal t, Node n, FunctionType ctorType, String propertyName, JSDocInfo info, JSType propertyType) {\n     if (ctorType.hasUnknownSupertype()) {\n         return;\n     }\n     FunctionType superClass \u003d ctorType.getSuperClassConstructor();\n     boolean superClassHasProperty \u003d superClass !\u003d null \u0026\u0026 superClass.getPrototype().hasProperty(propertyName);\n     boolean declaredOverride \u003d info !\u003d null \u0026\u0026 info.isOverride();\n     boolean foundInterfaceProperty \u003d false;\n     if (ctorType.isConstructor()) {\n         for (JSType implementedInterface : ctorType.getImplementedInterfaces()) {\n             if (implementedInterface.isUnknownType()) {\n                 continue;\n             }\n             FunctionType interfaceType \u003d implementedInterface.toObjectType().getConstructor();\n             boolean interfaceHasProperty \u003d interfaceType.getPrototype().hasProperty(propertyName);\n             foundInterfaceProperty \u003d foundInterfaceProperty || interfaceHasProperty;\n             if (reportMissingOverride.isOn() \u0026\u0026 !declaredOverride \u0026\u0026 interfaceHasProperty) {\n-                compiler.report(JSError.make(t, n, reportMissingOverride, HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));\n+                compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));\n             }\n             if (!declaredOverride) {\n                 continue;\n             }\n             if (interfaceHasProperty) {\n                 JSType interfacePropType \u003d interfaceType.getPrototype().getPropertyType(propertyName);\n                 if (!propertyType.canAssignTo(interfacePropType)) {\n-                    compiler.report(JSError.make(t, n, HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString(), interfacePropType.toString(), propertyType.toString()));\n+                    compiler.report(t.makeError(n, HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString(), interfacePropType.toString(), propertyType.toString()));\n                 }\n             }\n         }\n     }\n     if (!declaredOverride \u0026\u0026 !superClassHasProperty) {\n         return;\n     }\n     JSType topInstanceType \u003d superClassHasProperty ? superClass.getTopMostDefiningType(propertyName) : null;\n     if (reportMissingOverride.isOn() \u0026\u0026 ctorType.isConstructor() \u0026\u0026 !declaredOverride \u0026\u0026 superClassHasProperty) {\n-        compiler.report(JSError.make(t, n, reportMissingOverride, HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));\n+        compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));\n     }\n     if (!declaredOverride) {\n         return;\n     }\n     if (superClassHasProperty) {\n         JSType superClassPropType \u003d superClass.getPrototype().getPropertyType(propertyName);\n         if (!propertyType.canAssignTo(superClassPropType)) {\n-            compiler.report(JSError.make(t, n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));\n+            compiler.report(t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));\n         }\n     } else if (!foundInterfaceProperty) {\n-        compiler.report(JSError.make(t, n, UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));\n+        compiler.report(t.makeError(n, UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a2d8936fae3eb0e3873c7f7c0233344c81436404": {
      "type": "Ybodychange",
      "commitMessage": "Add warnings for functions that are ambiguously defined on different\nbrowsers.\n\nAdd better support for Caja.\n\nRollback the change to CoalesceVariableNames, because it had problems.\n\nInternal type system refactoring.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@33 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/15/09, 1:52 PM",
      "commitName": "a2d8936fae3eb0e3873c7f7c0233344c81436404",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/25/09, 6:53 AM",
      "commitNameOld": "3bee5d740c96572faea4b9fb8b632e0e07b13cbb",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 20.29,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "private void checkDeclaredPropertyInheritance(NodeTraversal t, Node n, FunctionType ctorType, String propertyName, JSDocInfo info, JSType propertyType) {\n    if (ctorType.hasUnknownSupertype()) {\n        return;\n    }\n    FunctionType superClass \u003d ctorType.getSuperClassConstructor();\n    boolean superClassHasProperty \u003d superClass !\u003d null \u0026\u0026 superClass.getPrototype().hasProperty(propertyName);\n    boolean declaredOverride \u003d info !\u003d null \u0026\u0026 info.isOverride();\n    boolean foundInterfaceProperty \u003d false;\n    if (ctorType.isConstructor()) {\n        for (JSType implementedInterface : ctorType.getImplementedInterfaces()) {\n            if (implementedInterface.isUnknownType()) {\n                continue;\n            }\n            FunctionType interfaceType \u003d implementedInterface.toObjectType().getConstructor();\n            boolean interfaceHasProperty \u003d interfaceType.getPrototype().hasProperty(propertyName);\n            foundInterfaceProperty \u003d foundInterfaceProperty || interfaceHasProperty;\n            if (reportMissingOverride.isOn() \u0026\u0026 !declaredOverride \u0026\u0026 interfaceHasProperty) {\n                compiler.report(JSError.make(t, n, reportMissingOverride, HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));\n            }\n            if (!declaredOverride) {\n                continue;\n            }\n            if (interfaceHasProperty) {\n                JSType interfacePropType \u003d interfaceType.getPrototype().getPropertyType(propertyName);\n                if (!propertyType.canAssignTo(interfacePropType)) {\n                    compiler.report(JSError.make(t, n, HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString(), interfacePropType.toString(), propertyType.toString()));\n                }\n            }\n        }\n    }\n    if (!declaredOverride \u0026\u0026 !superClassHasProperty) {\n        return;\n    }\n    JSType topInstanceType \u003d superClassHasProperty ? superClass.getTopMostDefiningType(propertyName) : null;\n    if (reportMissingOverride.isOn() \u0026\u0026 ctorType.isConstructor() \u0026\u0026 !declaredOverride \u0026\u0026 superClassHasProperty) {\n        compiler.report(JSError.make(t, n, reportMissingOverride, HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));\n    }\n    if (!declaredOverride) {\n        return;\n    }\n    if (superClassHasProperty) {\n        JSType superClassPropType \u003d superClass.getPrototype().getPropertyType(propertyName);\n        if (!propertyType.canAssignTo(superClassPropType)) {\n            compiler.report(JSError.make(t, n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));\n        }\n    } else if (!foundInterfaceProperty) {\n        compiler.report(JSError.make(t, n, UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 936,
      "functionName": "checkDeclaredPropertyInheritance",
      "functionAnnotation": "",
      "functionDoc": "Given a constructor type and a property name, check that the property has\nthe JSDoc annotation @override iff the property is declared on a\nsuperclass. Several checks regarding inheritance correctness are also\nperformed.\n",
      "diff": "@@ -1,49 +1,49 @@\n private void checkDeclaredPropertyInheritance(NodeTraversal t, Node n, FunctionType ctorType, String propertyName, JSDocInfo info, JSType propertyType) {\n     if (ctorType.hasUnknownSupertype()) {\n         return;\n     }\n     FunctionType superClass \u003d ctorType.getSuperClassConstructor();\n     boolean superClassHasProperty \u003d superClass !\u003d null \u0026\u0026 superClass.getPrototype().hasProperty(propertyName);\n     boolean declaredOverride \u003d info !\u003d null \u0026\u0026 info.isOverride();\n     boolean foundInterfaceProperty \u003d false;\n     if (ctorType.isConstructor()) {\n         for (JSType implementedInterface : ctorType.getImplementedInterfaces()) {\n             if (implementedInterface.isUnknownType()) {\n                 continue;\n             }\n-            FunctionType interfaceType \u003d ((ObjectType) implementedInterface).getConstructor();\n+            FunctionType interfaceType \u003d implementedInterface.toObjectType().getConstructor();\n             boolean interfaceHasProperty \u003d interfaceType.getPrototype().hasProperty(propertyName);\n             foundInterfaceProperty \u003d foundInterfaceProperty || interfaceHasProperty;\n             if (reportMissingOverride.isOn() \u0026\u0026 !declaredOverride \u0026\u0026 interfaceHasProperty) {\n                 compiler.report(JSError.make(t, n, reportMissingOverride, HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));\n             }\n             if (!declaredOverride) {\n                 continue;\n             }\n             if (interfaceHasProperty) {\n                 JSType interfacePropType \u003d interfaceType.getPrototype().getPropertyType(propertyName);\n                 if (!propertyType.canAssignTo(interfacePropType)) {\n                     compiler.report(JSError.make(t, n, HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString(), interfacePropType.toString(), propertyType.toString()));\n                 }\n             }\n         }\n     }\n     if (!declaredOverride \u0026\u0026 !superClassHasProperty) {\n         return;\n     }\n     JSType topInstanceType \u003d superClassHasProperty ? superClass.getTopMostDefiningType(propertyName) : null;\n     if (reportMissingOverride.isOn() \u0026\u0026 ctorType.isConstructor() \u0026\u0026 !declaredOverride \u0026\u0026 superClassHasProperty) {\n         compiler.report(JSError.make(t, n, reportMissingOverride, HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));\n     }\n     if (!declaredOverride) {\n         return;\n     }\n     if (superClassHasProperty) {\n         JSType superClassPropType \u003d superClass.getPrototype().getPropertyType(propertyName);\n         if (!propertyType.canAssignTo(superClassPropType)) {\n             compiler.report(JSError.make(t, n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));\n         }\n     } else if (!foundInterfaceProperty) {\n         compiler.report(JSError.make(t, n, UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,49 @@\n+private void checkDeclaredPropertyInheritance(NodeTraversal t, Node n, FunctionType ctorType, String propertyName, JSDocInfo info, JSType propertyType) {\n+    if (ctorType.hasUnknownSupertype()) {\n+        return;\n+    }\n+    FunctionType superClass \u003d ctorType.getSuperClassConstructor();\n+    boolean superClassHasProperty \u003d superClass !\u003d null \u0026\u0026 superClass.getPrototype().hasProperty(propertyName);\n+    boolean declaredOverride \u003d info !\u003d null \u0026\u0026 info.isOverride();\n+    boolean foundInterfaceProperty \u003d false;\n+    if (ctorType.isConstructor()) {\n+        for (JSType implementedInterface : ctorType.getImplementedInterfaces()) {\n+            if (implementedInterface.isUnknownType()) {\n+                continue;\n+            }\n+            FunctionType interfaceType \u003d ((ObjectType) implementedInterface).getConstructor();\n+            boolean interfaceHasProperty \u003d interfaceType.getPrototype().hasProperty(propertyName);\n+            foundInterfaceProperty \u003d foundInterfaceProperty || interfaceHasProperty;\n+            if (reportMissingOverride.isOn() \u0026\u0026 !declaredOverride \u0026\u0026 interfaceHasProperty) {\n+                compiler.report(JSError.make(t, n, reportMissingOverride, HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));\n+            }\n+            if (!declaredOverride) {\n+                continue;\n+            }\n+            if (interfaceHasProperty) {\n+                JSType interfacePropType \u003d interfaceType.getPrototype().getPropertyType(propertyName);\n+                if (!propertyType.canAssignTo(interfacePropType)) {\n+                    compiler.report(JSError.make(t, n, HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString(), interfacePropType.toString(), propertyType.toString()));\n+                }\n+            }\n+        }\n+    }\n+    if (!declaredOverride \u0026\u0026 !superClassHasProperty) {\n+        return;\n+    }\n+    JSType topInstanceType \u003d superClassHasProperty ? superClass.getTopMostDefiningType(propertyName) : null;\n+    if (reportMissingOverride.isOn() \u0026\u0026 ctorType.isConstructor() \u0026\u0026 !declaredOverride \u0026\u0026 superClassHasProperty) {\n+        compiler.report(JSError.make(t, n, reportMissingOverride, HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));\n+    }\n+    if (!declaredOverride) {\n+        return;\n+    }\n+    if (superClassHasProperty) {\n+        JSType superClassPropType \u003d superClass.getPrototype().getPropertyType(propertyName);\n+        if (!propertyType.canAssignTo(superClassPropType)) {\n+            compiler.report(JSError.make(t, n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));\n+        }\n+    } else if (!foundInterfaceProperty) {\n+        compiler.report(JSError.make(t, n, UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void checkDeclaredPropertyInheritance(NodeTraversal t, Node n, FunctionType ctorType, String propertyName, JSDocInfo info, JSType propertyType) {\n    if (ctorType.hasUnknownSupertype()) {\n        return;\n    }\n    FunctionType superClass \u003d ctorType.getSuperClassConstructor();\n    boolean superClassHasProperty \u003d superClass !\u003d null \u0026\u0026 superClass.getPrototype().hasProperty(propertyName);\n    boolean declaredOverride \u003d info !\u003d null \u0026\u0026 info.isOverride();\n    boolean foundInterfaceProperty \u003d false;\n    if (ctorType.isConstructor()) {\n        for (JSType implementedInterface : ctorType.getImplementedInterfaces()) {\n            if (implementedInterface.isUnknownType()) {\n                continue;\n            }\n            FunctionType interfaceType \u003d ((ObjectType) implementedInterface).getConstructor();\n            boolean interfaceHasProperty \u003d interfaceType.getPrototype().hasProperty(propertyName);\n            foundInterfaceProperty \u003d foundInterfaceProperty || interfaceHasProperty;\n            if (reportMissingOverride.isOn() \u0026\u0026 !declaredOverride \u0026\u0026 interfaceHasProperty) {\n                compiler.report(JSError.make(t, n, reportMissingOverride, HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));\n            }\n            if (!declaredOverride) {\n                continue;\n            }\n            if (interfaceHasProperty) {\n                JSType interfacePropType \u003d interfaceType.getPrototype().getPropertyType(propertyName);\n                if (!propertyType.canAssignTo(interfacePropType)) {\n                    compiler.report(JSError.make(t, n, HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString(), interfacePropType.toString(), propertyType.toString()));\n                }\n            }\n        }\n    }\n    if (!declaredOverride \u0026\u0026 !superClassHasProperty) {\n        return;\n    }\n    JSType topInstanceType \u003d superClassHasProperty ? superClass.getTopMostDefiningType(propertyName) : null;\n    if (reportMissingOverride.isOn() \u0026\u0026 ctorType.isConstructor() \u0026\u0026 !declaredOverride \u0026\u0026 superClassHasProperty) {\n        compiler.report(JSError.make(t, n, reportMissingOverride, HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));\n    }\n    if (!declaredOverride) {\n        return;\n    }\n    if (superClassHasProperty) {\n        JSType superClassPropType \u003d superClass.getPrototype().getPropertyType(propertyName);\n        if (!propertyType.canAssignTo(superClassPropType)) {\n            compiler.report(JSError.make(t, n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));\n        }\n    } else if (!foundInterfaceProperty) {\n        compiler.report(JSError.make(t, n, UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 937,
      "functionName": "checkDeclaredPropertyInheritance",
      "functionAnnotation": "",
      "functionDoc": "Given a constructor type and a property name, check that the property has\nthe JSDoc annotation @override iff the property is declared on a\nsuperclass. Several checks regarding inheritance correctness are also\nperformed.\n"
    }
  }
}