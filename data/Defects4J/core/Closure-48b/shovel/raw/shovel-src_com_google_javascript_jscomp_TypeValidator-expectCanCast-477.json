{
  "origin": "codeshovel",
  "repositoryName": "Closure-48b",
  "repositoryPath": "/tmp/Closure-48b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TypeValidator.java",
  "functionName": "expectCanCast",
  "functionId": "expectCanCast___t-NodeTraversal__n-Node__type-JSType__castType-JSType",
  "sourceFilePath": "src/com/google/javascript/jscomp/TypeValidator.java",
  "functionAnnotation": "",
  "functionDoc": "Expect that the first type can be cast to the second type. The first type\nshould be either a subtype or supertype of the second.\n\n@param t The node traversal.\n@param n The node where warnings should point.\n@param type The type being cast from.\n@param castType The type being cast to.\n",
  "functionStartLine": 477,
  "functionEndLine": 485,
  "numCommitsSeen": 31,
  "timeTaken": 1495,
  "changeHistory": [
    "41ecd65c09b6d39253c4f855e615daabbc7e241a",
    "0895c28861ee4a1969acc858f1a703ab11ddc64c",
    "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "41ecd65c09b6d39253c4f855e615daabbc7e241a": "Ybodychange",
    "0895c28861ee4a1969acc858f1a703ab11ddc64c": "Ybodychange",
    "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "41ecd65c09b6d39253c4f855e615daabbc7e241a": {
      "type": "Ybodychange",
      "commitMessage": "\nBetter warnings for fixing DisambiguateProperties ignores.\n\nR\u003djohnlenz\nDELTA\u003d164  (92 added, 23 deleted, 49 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2860\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1316 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/2/11, 5:01 PM",
      "commitName": "41ecd65c09b6d39253c4f855e615daabbc7e241a",
      "commitAuthor": "acleung@google.com",
      "commitDateOld": "7/27/11, 9:33 AM",
      "commitNameOld": "749d75ccbf82ffee5c613dbed9f9782cd740a01f",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 6.31,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "actualSource": "void expectCanCast(NodeTraversal t, Node n, JSType type, JSType castType) {\n    castType \u003d castType.restrictByNotNullOrUndefined();\n    type \u003d type.restrictByNotNullOrUndefined();\n    if (!type.canAssignTo(castType) \u0026\u0026 !castType.canAssignTo(type)) {\n        registerMismatch(type, castType, report(t.makeError(n, INVALID_CAST, castType.toString(), type.toString())));\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeValidator.java",
      "functionStartLine": 483,
      "functionName": "expectCanCast",
      "functionAnnotation": "",
      "functionDoc": "Expect that the first type can be cast to the second type. The first type\nshould be either a subtype or supertype of the second.\n\n@param t The node traversal.\n@param n The node where warnings should point.\n@param type The type being cast from.\n@param castType The type being cast to.\n",
      "diff": "@@ -1,10 +1,7 @@\n void expectCanCast(NodeTraversal t, Node n, JSType type, JSType castType) {\n     castType \u003d castType.restrictByNotNullOrUndefined();\n     type \u003d type.restrictByNotNullOrUndefined();\n     if (!type.canAssignTo(castType) \u0026\u0026 !castType.canAssignTo(type)) {\n-        if (shouldReport) {\n-            compiler.report(t.makeError(n, INVALID_CAST, castType.toString(), type.toString()));\n-        }\n-        registerMismatch(type, castType);\n+        registerMismatch(type, castType, report(t.makeError(n, INVALID_CAST, castType.toString(), type.toString())));\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0895c28861ee4a1969acc858f1a703ab11ddc64c": {
      "type": "Ybodychange",
      "commitMessage": "\n\nChange on 2010/06/16 by johnlenz\n\n        Remove unused member variable.\n\n        R\u003dacleung\n        DELTA\u003d17  (0 added, 12 deleted, 5 changed)\n\nChange on 2010/06/16 by acleung\n\n        Make @notypecheck behaves like it is doing typechecking except for reporting errors.\n\n        R\u003djohnlenz\n        DELTA\u003d144  (89 added, 17 deleted, 38 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d28012\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@245 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/17/10, 10:16 AM",
      "commitName": "0895c28861ee4a1969acc858f1a703ab11ddc64c",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "3/29/10, 7:04 AM",
      "commitNameOld": "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 80.13,
      "commitsBetweenForRepo": 71,
      "commitsBetweenForFile": 1,
      "actualSource": "void expectCanCast(NodeTraversal t, Node n, JSType type, JSType castType) {\n    castType \u003d castType.restrictByNotNullOrUndefined();\n    type \u003d type.restrictByNotNullOrUndefined();\n    if (!type.canAssignTo(castType) \u0026\u0026 !castType.canAssignTo(type)) {\n        if (shouldReport) {\n            compiler.report(t.makeError(n, INVALID_CAST, castType.toString(), type.toString()));\n        }\n        registerMismatch(type, castType);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeValidator.java",
      "functionStartLine": 438,
      "functionName": "expectCanCast",
      "functionAnnotation": "",
      "functionDoc": "Expect that the first type can be cast to the second type. The first type\nshould be either a subtype or supertype of the second.\n\n@param t The node traversal.\n@param n The node where warnings should point.\n@param type The type being cast from.\n@param castType The type being cast to.\n",
      "diff": "@@ -1,8 +1,10 @@\n void expectCanCast(NodeTraversal t, Node n, JSType type, JSType castType) {\n     castType \u003d castType.restrictByNotNullOrUndefined();\n     type \u003d type.restrictByNotNullOrUndefined();\n     if (!type.canAssignTo(castType) \u0026\u0026 !castType.canAssignTo(type)) {\n-        compiler.report(t.makeError(n, INVALID_CAST, castType.toString(), type.toString()));\n+        if (shouldReport) {\n+            compiler.report(t.makeError(n, INVALID_CAST, castType.toString(), type.toString()));\n+        }\n         registerMismatch(type, castType);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4": {
      "type": "Ybodychange",
      "commitMessage": "Remove circular dependency between error-reporting and the rest\nof the compiler. (Nick)\nR\u003dalan\nDELTA\u003d152  (27 added, 28 deleted, 97 changed)\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@159 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/29/10, 7:04 AM",
      "commitName": "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "3/11/10, 9:31 PM",
      "commitNameOld": "7bfdbd9164601af44d17edd51be829fde2cc51aa",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 17.36,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "actualSource": "void expectCanCast(NodeTraversal t, Node n, JSType type, JSType castType) {\n    castType \u003d castType.restrictByNotNullOrUndefined();\n    type \u003d type.restrictByNotNullOrUndefined();\n    if (!type.canAssignTo(castType) \u0026\u0026 !castType.canAssignTo(type)) {\n        compiler.report(t.makeError(n, INVALID_CAST, castType.toString(), type.toString()));\n        registerMismatch(type, castType);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeValidator.java",
      "functionStartLine": 429,
      "functionName": "expectCanCast",
      "functionAnnotation": "",
      "functionDoc": "Expect that the first type can be cast to the second type. The first type\nshould be either a subtype or supertype of the second.\n\n@param t The node traversal.\n@param n The node where warnings should point.\n@param type The type being cast from.\n@param castType The type being cast to.\n",
      "diff": "@@ -1,8 +1,8 @@\n void expectCanCast(NodeTraversal t, Node n, JSType type, JSType castType) {\n     castType \u003d castType.restrictByNotNullOrUndefined();\n     type \u003d type.restrictByNotNullOrUndefined();\n     if (!type.canAssignTo(castType) \u0026\u0026 !castType.canAssignTo(type)) {\n-        compiler.report(JSError.make(t, n, INVALID_CAST, castType.toString(), type.toString()));\n+        compiler.report(t.makeError(n, INVALID_CAST, castType.toString(), type.toString()));\n         registerMismatch(type, castType);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,8 @@\n+void expectCanCast(NodeTraversal t, Node n, JSType type, JSType castType) {\n+    castType \u003d castType.restrictByNotNullOrUndefined();\n+    type \u003d type.restrictByNotNullOrUndefined();\n+    if (!type.canAssignTo(castType) \u0026\u0026 !castType.canAssignTo(type)) {\n+        compiler.report(JSError.make(t, n, INVALID_CAST, castType.toString(), type.toString()));\n+        registerMismatch(type, castType);\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "void expectCanCast(NodeTraversal t, Node n, JSType type, JSType castType) {\n    castType \u003d castType.restrictByNotNullOrUndefined();\n    type \u003d type.restrictByNotNullOrUndefined();\n    if (!type.canAssignTo(castType) \u0026\u0026 !castType.canAssignTo(type)) {\n        compiler.report(JSError.make(t, n, INVALID_CAST, castType.toString(), type.toString()));\n        registerMismatch(type, castType);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeValidator.java",
      "functionStartLine": 422,
      "functionName": "expectCanCast",
      "functionAnnotation": "",
      "functionDoc": "Expect that the first type can be cast to the second type. The first type\nshould be either a subtype or supertype of the second.\n\n@param t The node traversal.\n@param n The node where warnings should point.\n@param type The type being cast from.\n@param castType The type being cast to.\n"
    }
  }
}