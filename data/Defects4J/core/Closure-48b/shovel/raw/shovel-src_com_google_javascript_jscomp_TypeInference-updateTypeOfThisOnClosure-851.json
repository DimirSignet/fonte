{
  "origin": "codeshovel",
  "repositoryName": "Closure-48b",
  "repositoryPath": "/tmp/Closure-48b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TypeInference.java",
  "functionName": "updateTypeOfThisOnClosure",
  "functionId": "updateTypeOfThisOnClosure___n-Node__fnType-FunctionType",
  "sourceFilePath": "src/com/google/javascript/jscomp/TypeInference.java",
  "functionAnnotation": "",
  "functionDoc": "For functions with function(this: T, ...) and T as parameters, type\ninference will set the type of this on a function literal argument to the\nthe actual type of T.\n",
  "functionStartLine": 851,
  "functionEndLine": 938,
  "numCommitsSeen": 63,
  "timeTaken": 4572,
  "changeHistory": [
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
    "e8c234a050e4ed6c8220d5afc0b6a4d5d166b7e0",
    "b52343f59b46c0730b090e358f3a5dbcb0dc976c",
    "bd9c7b620384fe5a98772729001ed56304459bc6",
    "01d1238a2a577d8988a72c29304a3283ca05a29a",
    "fc0798047ad3aac58a54ea65f9f1c8857745419f",
    "1c5d6203ab1152a6dee19149fdca2ecd1d8f585f",
    "b02b646a75d6dd26f41fe6d987841ed01c8ec161",
    "c722073c9544792e02d8a101ae317869430180a5",
    "45e90a3d390335fe246b8d3f1868a74e1663b607",
    "52666da81761e9652993fd8e7e375ad456408419",
    "5db16f8f51592b6a6ac97c609fb0c691cc3f201a",
    "8159a9f30a503650d754b7e8b30d491c4e415a72",
    "3c4504a78a84e4715439cddb4028c25be2ce308f",
    "ebb59a97610015bc41bda7f458dd1428a3a3e335",
    "43859717972907dd1ecebd8dca6e05036386e28b",
    "3bee5d740c96572faea4b9fb8b632e0e07b13cbb",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c": "Ybodychange",
    "e8c234a050e4ed6c8220d5afc0b6a4d5d166b7e0": "Ybodychange",
    "b52343f59b46c0730b090e358f3a5dbcb0dc976c": "Ybodychange",
    "bd9c7b620384fe5a98772729001ed56304459bc6": "Ybodychange",
    "01d1238a2a577d8988a72c29304a3283ca05a29a": "Ybodychange",
    "fc0798047ad3aac58a54ea65f9f1c8857745419f": "Ybodychange",
    "1c5d6203ab1152a6dee19149fdca2ecd1d8f585f": "Ybodychange",
    "b02b646a75d6dd26f41fe6d987841ed01c8ec161": "Ybodychange",
    "c722073c9544792e02d8a101ae317869430180a5": "Ybodychange",
    "45e90a3d390335fe246b8d3f1868a74e1663b607": "Ybodychange",
    "52666da81761e9652993fd8e7e375ad456408419": "Ybodychange",
    "5db16f8f51592b6a6ac97c609fb0c691cc3f201a": "Ybodychange",
    "8159a9f30a503650d754b7e8b30d491c4e415a72": "Ybodychange",
    "3c4504a78a84e4715439cddb4028c25be2ce308f": "Ybodychange",
    "ebb59a97610015bc41bda7f458dd1428a3a3e335": "Ybodychange",
    "43859717972907dd1ecebd8dca6e05036386e28b": "Ybodychange",
    "3bee5d740c96572faea4b9fb8b632e0e07b13cbb": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c": {
      "type": "Ybodychange",
      "commitMessage": "\nReplace the bulk of the Node.getType() \u003d\u003d Token.XXX calls with\nNode.isXXX calls.\n\nR\u003dnicksantos\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3677\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1582 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/10/11, 8:36 AM",
      "commitName": "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/7/11, 2:21 PM",
      "commitNameOld": "6641663fa9970c4d7bcdd96a6f31b83b18c3ee3d",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 2.76,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "actualSource": "private void updateTypeOfThisOnClosure(Node n, FunctionType fnType) {\n    if (fnType.getTemplateTypeName() \u003d\u003d null) {\n        return;\n    }\n    int i \u003d 0;\n    int childCount \u003d n.getChildCount();\n    for (Node iParameter : fnType.getParameters()) {\n        JSType iParameterType \u003d getJSType(iParameter).restrictByNotNullOrUndefined();\n        if (iParameterType.isTemplateType()) {\n            ObjectType iArgumentType \u003d null;\n            if (i + 1 \u003c childCount) {\n                Node iArgument \u003d n.getChildAtIndex(i + 1);\n                iArgumentType \u003d getJSType(iArgument).restrictByNotNullOrUndefined().collapseUnion().toObjectType();\n                if (iArgumentType \u003d\u003d null) {\n                    compiler.report(JSError.make(NodeUtil.getSourceName(iArgument), iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE, getJSType(iArgument).toString()));\n                    return;\n                }\n            }\n            boolean foundTemplateTypeOfThisParameter \u003d false;\n            int j \u003d 0;\n            for (Node jParameter : fnType.getParameters()) {\n                JSType jParameterType \u003d getJSType(jParameter).restrictByNotNullOrUndefined();\n                if (jParameterType.isFunctionType()) {\n                    FunctionType jParameterFnType \u003d jParameterType.toMaybeFunctionType();\n                    if (jParameterFnType.getTypeOfThis().equals(iParameterType)) {\n                        foundTemplateTypeOfThisParameter \u003d true;\n                        if (j + 1 \u003e\u003d childCount) {\n                            return;\n                        }\n                        Node jArgument \u003d n.getChildAtIndex(j + 1);\n                        JSType jArgumentType \u003d getJSType(jArgument);\n                        if (jArgument.isFunction() \u0026\u0026 jArgumentType.isFunctionType()) {\n                            if (iArgumentType !\u003d null \u0026\u0026 !iArgumentType.isNoType()) {\n                                FunctionType jArgumentFnType \u003d jArgumentType.toMaybeFunctionType();\n                                if (jArgumentFnType.getTypeOfThis().isUnknownType()) {\n                                    jArgument.setJSType(registry.createFunctionTypeWithNewThisType(jArgumentFnType, iArgumentType));\n                                }\n                            } else {\n                                if (NodeUtil.referencesThis(NodeUtil.getFunctionBody(jArgument))) {\n                                    compiler.report(JSError.make(NodeUtil.getSourceName(n), n, FUNCTION_LITERAL_UNDEFINED_THIS));\n                                }\n                            }\n                        }\n                    }\n                }\n                j++;\n            }\n            if (!foundTemplateTypeOfThisParameter) {\n                compiler.report(JSError.make(NodeUtil.getSourceName(n), n, TEMPLATE_TYPE_OF_THIS_EXPECTED));\n                return;\n            }\n        }\n        i++;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 851,
      "functionName": "updateTypeOfThisOnClosure",
      "functionAnnotation": "",
      "functionDoc": "For functions with function(this: T, ...) and T as parameters, type\ninference will set the type of this on a function literal argument to the\nthe actual type of T.\n",
      "diff": "@@ -1,55 +1,55 @@\n private void updateTypeOfThisOnClosure(Node n, FunctionType fnType) {\n     if (fnType.getTemplateTypeName() \u003d\u003d null) {\n         return;\n     }\n     int i \u003d 0;\n     int childCount \u003d n.getChildCount();\n     for (Node iParameter : fnType.getParameters()) {\n         JSType iParameterType \u003d getJSType(iParameter).restrictByNotNullOrUndefined();\n         if (iParameterType.isTemplateType()) {\n             ObjectType iArgumentType \u003d null;\n             if (i + 1 \u003c childCount) {\n                 Node iArgument \u003d n.getChildAtIndex(i + 1);\n                 iArgumentType \u003d getJSType(iArgument).restrictByNotNullOrUndefined().collapseUnion().toObjectType();\n                 if (iArgumentType \u003d\u003d null) {\n                     compiler.report(JSError.make(NodeUtil.getSourceName(iArgument), iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE, getJSType(iArgument).toString()));\n                     return;\n                 }\n             }\n             boolean foundTemplateTypeOfThisParameter \u003d false;\n             int j \u003d 0;\n             for (Node jParameter : fnType.getParameters()) {\n                 JSType jParameterType \u003d getJSType(jParameter).restrictByNotNullOrUndefined();\n                 if (jParameterType.isFunctionType()) {\n                     FunctionType jParameterFnType \u003d jParameterType.toMaybeFunctionType();\n                     if (jParameterFnType.getTypeOfThis().equals(iParameterType)) {\n                         foundTemplateTypeOfThisParameter \u003d true;\n                         if (j + 1 \u003e\u003d childCount) {\n                             return;\n                         }\n                         Node jArgument \u003d n.getChildAtIndex(j + 1);\n                         JSType jArgumentType \u003d getJSType(jArgument);\n-                        if (jArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 jArgumentType.isFunctionType()) {\n+                        if (jArgument.isFunction() \u0026\u0026 jArgumentType.isFunctionType()) {\n                             if (iArgumentType !\u003d null \u0026\u0026 !iArgumentType.isNoType()) {\n                                 FunctionType jArgumentFnType \u003d jArgumentType.toMaybeFunctionType();\n                                 if (jArgumentFnType.getTypeOfThis().isUnknownType()) {\n                                     jArgument.setJSType(registry.createFunctionTypeWithNewThisType(jArgumentFnType, iArgumentType));\n                                 }\n                             } else {\n                                 if (NodeUtil.referencesThis(NodeUtil.getFunctionBody(jArgument))) {\n                                     compiler.report(JSError.make(NodeUtil.getSourceName(n), n, FUNCTION_LITERAL_UNDEFINED_THIS));\n                                 }\n                             }\n                         }\n                     }\n                 }\n                 j++;\n             }\n             if (!foundTemplateTypeOfThisParameter) {\n                 compiler.report(JSError.make(NodeUtil.getSourceName(n), n, TEMPLATE_TYPE_OF_THIS_EXPECTED));\n                 return;\n             }\n         }\n         i++;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e8c234a050e4ed6c8220d5afc0b6a4d5d166b7e0": {
      "type": "Ybodychange",
      "commitMessage": "\nFix a bug in \u0027this\u0027 type inference, where it didn\u0027t work\ncorrectly when you have the union of two objects.\nAlso, make these default to warnings. These days,\nwe have a separate mechanism for upgrading warnings to errors.\n(--jscomp_error\u003dcheckTypes)\n\nR\u003dmgoodman\nDELTA\u003d41  (21 added, 0 deleted, 20 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3455\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1505 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/12/11, 4:13 PM",
      "commitName": "e8c234a050e4ed6c8220d5afc0b6a4d5d166b7e0",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "9/23/11, 3:22 PM",
      "commitNameOld": "2427228f43a8ace0d18597ab828f5f4775f5d716",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 19.04,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "actualSource": "private void updateTypeOfThisOnClosure(Node n, FunctionType fnType) {\n    if (fnType.getTemplateTypeName() \u003d\u003d null) {\n        return;\n    }\n    int i \u003d 0;\n    int childCount \u003d n.getChildCount();\n    for (Node iParameter : fnType.getParameters()) {\n        JSType iParameterType \u003d getJSType(iParameter).restrictByNotNullOrUndefined();\n        if (iParameterType.isTemplateType()) {\n            ObjectType iArgumentType \u003d null;\n            if (i + 1 \u003c childCount) {\n                Node iArgument \u003d n.getChildAtIndex(i + 1);\n                iArgumentType \u003d getJSType(iArgument).restrictByNotNullOrUndefined().collapseUnion().toObjectType();\n                if (iArgumentType \u003d\u003d null) {\n                    compiler.report(JSError.make(NodeUtil.getSourceName(iArgument), iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE, getJSType(iArgument).toString()));\n                    return;\n                }\n            }\n            boolean foundTemplateTypeOfThisParameter \u003d false;\n            int j \u003d 0;\n            for (Node jParameter : fnType.getParameters()) {\n                JSType jParameterType \u003d getJSType(jParameter).restrictByNotNullOrUndefined();\n                if (jParameterType.isFunctionType()) {\n                    FunctionType jParameterFnType \u003d jParameterType.toMaybeFunctionType();\n                    if (jParameterFnType.getTypeOfThis().equals(iParameterType)) {\n                        foundTemplateTypeOfThisParameter \u003d true;\n                        if (j + 1 \u003e\u003d childCount) {\n                            return;\n                        }\n                        Node jArgument \u003d n.getChildAtIndex(j + 1);\n                        JSType jArgumentType \u003d getJSType(jArgument);\n                        if (jArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 jArgumentType.isFunctionType()) {\n                            if (iArgumentType !\u003d null \u0026\u0026 !iArgumentType.isNoType()) {\n                                FunctionType jArgumentFnType \u003d jArgumentType.toMaybeFunctionType();\n                                if (jArgumentFnType.getTypeOfThis().isUnknownType()) {\n                                    jArgument.setJSType(registry.createFunctionTypeWithNewThisType(jArgumentFnType, iArgumentType));\n                                }\n                            } else {\n                                if (NodeUtil.referencesThis(NodeUtil.getFunctionBody(jArgument))) {\n                                    compiler.report(JSError.make(NodeUtil.getSourceName(n), n, FUNCTION_LITERAL_UNDEFINED_THIS));\n                                }\n                            }\n                        }\n                    }\n                }\n                j++;\n            }\n            if (!foundTemplateTypeOfThisParameter) {\n                compiler.report(JSError.make(NodeUtil.getSourceName(n), n, TEMPLATE_TYPE_OF_THIS_EXPECTED));\n                return;\n            }\n        }\n        i++;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 852,
      "functionName": "updateTypeOfThisOnClosure",
      "functionAnnotation": "",
      "functionDoc": "For functions with function(this: T, ...) and T as parameters, type\ninference will set the type of this on a function literal argument to the\nthe actual type of T.\n",
      "diff": "@@ -1,55 +1,55 @@\n private void updateTypeOfThisOnClosure(Node n, FunctionType fnType) {\n     if (fnType.getTemplateTypeName() \u003d\u003d null) {\n         return;\n     }\n     int i \u003d 0;\n     int childCount \u003d n.getChildCount();\n     for (Node iParameter : fnType.getParameters()) {\n         JSType iParameterType \u003d getJSType(iParameter).restrictByNotNullOrUndefined();\n         if (iParameterType.isTemplateType()) {\n-            JSType iArgumentType \u003d null;\n+            ObjectType iArgumentType \u003d null;\n             if (i + 1 \u003c childCount) {\n                 Node iArgument \u003d n.getChildAtIndex(i + 1);\n-                iArgumentType \u003d getJSType(iArgument).restrictByNotNullOrUndefined();\n-                if (!(iArgumentType instanceof ObjectType)) {\n-                    compiler.report(JSError.make(NodeUtil.getSourceName(iArgument), iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE));\n+                iArgumentType \u003d getJSType(iArgument).restrictByNotNullOrUndefined().collapseUnion().toObjectType();\n+                if (iArgumentType \u003d\u003d null) {\n+                    compiler.report(JSError.make(NodeUtil.getSourceName(iArgument), iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE, getJSType(iArgument).toString()));\n                     return;\n                 }\n             }\n             boolean foundTemplateTypeOfThisParameter \u003d false;\n             int j \u003d 0;\n             for (Node jParameter : fnType.getParameters()) {\n                 JSType jParameterType \u003d getJSType(jParameter).restrictByNotNullOrUndefined();\n                 if (jParameterType.isFunctionType()) {\n                     FunctionType jParameterFnType \u003d jParameterType.toMaybeFunctionType();\n                     if (jParameterFnType.getTypeOfThis().equals(iParameterType)) {\n                         foundTemplateTypeOfThisParameter \u003d true;\n                         if (j + 1 \u003e\u003d childCount) {\n                             return;\n                         }\n                         Node jArgument \u003d n.getChildAtIndex(j + 1);\n                         JSType jArgumentType \u003d getJSType(jArgument);\n                         if (jArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 jArgumentType.isFunctionType()) {\n                             if (iArgumentType !\u003d null \u0026\u0026 !iArgumentType.isNoType()) {\n                                 FunctionType jArgumentFnType \u003d jArgumentType.toMaybeFunctionType();\n                                 if (jArgumentFnType.getTypeOfThis().isUnknownType()) {\n-                                    jArgument.setJSType(registry.createFunctionTypeWithNewThisType(jArgumentFnType, (ObjectType) iArgumentType));\n+                                    jArgument.setJSType(registry.createFunctionTypeWithNewThisType(jArgumentFnType, iArgumentType));\n                                 }\n                             } else {\n                                 if (NodeUtil.referencesThis(NodeUtil.getFunctionBody(jArgument))) {\n                                     compiler.report(JSError.make(NodeUtil.getSourceName(n), n, FUNCTION_LITERAL_UNDEFINED_THIS));\n                                 }\n                             }\n                         }\n                     }\n                 }\n                 j++;\n             }\n             if (!foundTemplateTypeOfThisParameter) {\n                 compiler.report(JSError.make(NodeUtil.getSourceName(n), n, TEMPLATE_TYPE_OF_THIS_EXPECTED));\n                 return;\n             }\n         }\n         i++;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b52343f59b46c0730b090e358f3a5dbcb0dc976c": {
      "type": "Ybodychange",
      "commitMessage": "\nI\u0027ve heard people argue that it\u0027s best practice to specify\nthe \u0027this\u0027 type even if you don\u0027t use it. I kind of agree.\nOnce we have template types rolled out, then it might make sense\nto turn this warning on. But while they\u0027re not rolled out, we can\u0027t\nreally expect people to do what this warning asks, and\nit\u0027s making the rollout a lot harder.\n\nR\u003dmgoodman\nDELTA\u003d24  (0 added, 24 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3232\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1426 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/8/11, 3:30 PM",
      "commitName": "b52343f59b46c0730b090e358f3a5dbcb0dc976c",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "8/30/11, 12:59 PM",
      "commitNameOld": "1a196b77fb5c6b699586ad6a9a2c3bc3ea57b345",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 9.11,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "actualSource": "private void updateTypeOfThisOnClosure(Node n, FunctionType fnType) {\n    if (fnType.getTemplateTypeName() \u003d\u003d null) {\n        return;\n    }\n    int i \u003d 0;\n    int childCount \u003d n.getChildCount();\n    for (Node iParameter : fnType.getParameters()) {\n        JSType iParameterType \u003d getJSType(iParameter).restrictByNotNullOrUndefined();\n        if (iParameterType.isTemplateType()) {\n            JSType iArgumentType \u003d null;\n            if (i + 1 \u003c childCount) {\n                Node iArgument \u003d n.getChildAtIndex(i + 1);\n                iArgumentType \u003d getJSType(iArgument).restrictByNotNullOrUndefined();\n                if (!(iArgumentType instanceof ObjectType)) {\n                    compiler.report(JSError.make(NodeUtil.getSourceName(iArgument), iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE));\n                    return;\n                }\n            }\n            boolean foundTemplateTypeOfThisParameter \u003d false;\n            int j \u003d 0;\n            for (Node jParameter : fnType.getParameters()) {\n                JSType jParameterType \u003d getJSType(jParameter).restrictByNotNullOrUndefined();\n                if (jParameterType.isFunctionType()) {\n                    FunctionType jParameterFnType \u003d jParameterType.toMaybeFunctionType();\n                    if (jParameterFnType.getTypeOfThis().equals(iParameterType)) {\n                        foundTemplateTypeOfThisParameter \u003d true;\n                        if (j + 1 \u003e\u003d childCount) {\n                            return;\n                        }\n                        Node jArgument \u003d n.getChildAtIndex(j + 1);\n                        JSType jArgumentType \u003d getJSType(jArgument);\n                        if (jArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 jArgumentType.isFunctionType()) {\n                            if (iArgumentType !\u003d null \u0026\u0026 !iArgumentType.isNoType()) {\n                                FunctionType jArgumentFnType \u003d jArgumentType.toMaybeFunctionType();\n                                if (jArgumentFnType.getTypeOfThis().isUnknownType()) {\n                                    jArgument.setJSType(registry.createFunctionTypeWithNewThisType(jArgumentFnType, (ObjectType) iArgumentType));\n                                }\n                            } else {\n                                if (NodeUtil.referencesThis(NodeUtil.getFunctionBody(jArgument))) {\n                                    compiler.report(JSError.make(NodeUtil.getSourceName(n), n, FUNCTION_LITERAL_UNDEFINED_THIS));\n                                }\n                            }\n                        }\n                    }\n                }\n                j++;\n            }\n            if (!foundTemplateTypeOfThisParameter) {\n                compiler.report(JSError.make(NodeUtil.getSourceName(n), n, TEMPLATE_TYPE_OF_THIS_EXPECTED));\n                return;\n            }\n        }\n        i++;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 902,
      "functionName": "updateTypeOfThisOnClosure",
      "functionAnnotation": "",
      "functionDoc": "For functions with function(this: T, ...) and T as parameters, type\ninference will set the type of this on a function literal argument to the\nthe actual type of T.\n",
      "diff": "@@ -1,58 +1,55 @@\n private void updateTypeOfThisOnClosure(Node n, FunctionType fnType) {\n     if (fnType.getTemplateTypeName() \u003d\u003d null) {\n         return;\n     }\n     int i \u003d 0;\n     int childCount \u003d n.getChildCount();\n     for (Node iParameter : fnType.getParameters()) {\n         JSType iParameterType \u003d getJSType(iParameter).restrictByNotNullOrUndefined();\n         if (iParameterType.isTemplateType()) {\n             JSType iArgumentType \u003d null;\n             if (i + 1 \u003c childCount) {\n                 Node iArgument \u003d n.getChildAtIndex(i + 1);\n                 iArgumentType \u003d getJSType(iArgument).restrictByNotNullOrUndefined();\n                 if (!(iArgumentType instanceof ObjectType)) {\n                     compiler.report(JSError.make(NodeUtil.getSourceName(iArgument), iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE));\n                     return;\n                 }\n             }\n             boolean foundTemplateTypeOfThisParameter \u003d false;\n             int j \u003d 0;\n             for (Node jParameter : fnType.getParameters()) {\n                 JSType jParameterType \u003d getJSType(jParameter).restrictByNotNullOrUndefined();\n                 if (jParameterType.isFunctionType()) {\n                     FunctionType jParameterFnType \u003d jParameterType.toMaybeFunctionType();\n                     if (jParameterFnType.getTypeOfThis().equals(iParameterType)) {\n                         foundTemplateTypeOfThisParameter \u003d true;\n                         if (j + 1 \u003e\u003d childCount) {\n                             return;\n                         }\n                         Node jArgument \u003d n.getChildAtIndex(j + 1);\n                         JSType jArgumentType \u003d getJSType(jArgument);\n                         if (jArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 jArgumentType.isFunctionType()) {\n                             if (iArgumentType !\u003d null \u0026\u0026 !iArgumentType.isNoType()) {\n                                 FunctionType jArgumentFnType \u003d jArgumentType.toMaybeFunctionType();\n                                 if (jArgumentFnType.getTypeOfThis().isUnknownType()) {\n                                     jArgument.setJSType(registry.createFunctionTypeWithNewThisType(jArgumentFnType, (ObjectType) iArgumentType));\n                                 }\n-                                if (!NodeUtil.referencesThis(NodeUtil.getFunctionBody(jArgument))) {\n-                                    compiler.report(JSError.make(NodeUtil.getSourceName(n), n, FUNCTION_LITERAL_UNREAD_THIS));\n-                                }\n                             } else {\n                                 if (NodeUtil.referencesThis(NodeUtil.getFunctionBody(jArgument))) {\n                                     compiler.report(JSError.make(NodeUtil.getSourceName(n), n, FUNCTION_LITERAL_UNDEFINED_THIS));\n                                 }\n                             }\n                         }\n                     }\n                 }\n                 j++;\n             }\n             if (!foundTemplateTypeOfThisParameter) {\n                 compiler.report(JSError.make(NodeUtil.getSourceName(n), n, TEMPLATE_TYPE_OF_THIS_EXPECTED));\n                 return;\n             }\n         }\n         i++;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bd9c7b620384fe5a98772729001ed56304459bc6": {
      "type": "Ybodychange",
      "commitMessage": "\nAdd toMaybeFunctionType/toMaybeEnumElementType.\ntry #2. the bugs in jstestc were fixed. this cl is exactly\nthe same as the original\n\nR\u003djohnlenz\nDELTA\u003d317  (79 added, 47 deleted, 191 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3078\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1367 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/18/11, 3:46 PM",
      "commitName": "bd9c7b620384fe5a98772729001ed56304459bc6",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "8/18/11, 10:40 AM",
      "commitNameOld": "01d1238a2a577d8988a72c29304a3283ca05a29a",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.21,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private void updateTypeOfThisOnClosure(Node n, FunctionType fnType) {\n    if (fnType.getTemplateTypeName() \u003d\u003d null) {\n        return;\n    }\n    int i \u003d 0;\n    int childCount \u003d n.getChildCount();\n    for (Node iParameter : fnType.getParameters()) {\n        JSType iParameterType \u003d getJSType(iParameter).restrictByNotNullOrUndefined();\n        if (iParameterType.isTemplateType()) {\n            JSType iArgumentType \u003d null;\n            if (i + 1 \u003c childCount) {\n                Node iArgument \u003d n.getChildAtIndex(i + 1);\n                iArgumentType \u003d getJSType(iArgument).restrictByNotNullOrUndefined();\n                if (!(iArgumentType instanceof ObjectType)) {\n                    compiler.report(JSError.make(NodeUtil.getSourceName(iArgument), iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE));\n                    return;\n                }\n            }\n            boolean foundTemplateTypeOfThisParameter \u003d false;\n            int j \u003d 0;\n            for (Node jParameter : fnType.getParameters()) {\n                JSType jParameterType \u003d getJSType(jParameter).restrictByNotNullOrUndefined();\n                if (jParameterType.isFunctionType()) {\n                    FunctionType jParameterFnType \u003d jParameterType.toMaybeFunctionType();\n                    if (jParameterFnType.getTypeOfThis().equals(iParameterType)) {\n                        foundTemplateTypeOfThisParameter \u003d true;\n                        if (j + 1 \u003e\u003d childCount) {\n                            return;\n                        }\n                        Node jArgument \u003d n.getChildAtIndex(j + 1);\n                        JSType jArgumentType \u003d getJSType(jArgument);\n                        if (jArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 jArgumentType.isFunctionType()) {\n                            if (iArgumentType !\u003d null \u0026\u0026 !iArgumentType.isNoType()) {\n                                FunctionType jArgumentFnType \u003d jArgumentType.toMaybeFunctionType();\n                                if (jArgumentFnType.getTypeOfThis().isUnknownType()) {\n                                    jArgument.setJSType(registry.createFunctionTypeWithNewThisType(jArgumentFnType, (ObjectType) iArgumentType));\n                                }\n                                if (!NodeUtil.referencesThis(NodeUtil.getFunctionBody(jArgument))) {\n                                    compiler.report(JSError.make(NodeUtil.getSourceName(n), n, FUNCTION_LITERAL_UNREAD_THIS));\n                                }\n                            } else {\n                                if (NodeUtil.referencesThis(NodeUtil.getFunctionBody(jArgument))) {\n                                    compiler.report(JSError.make(NodeUtil.getSourceName(n), n, FUNCTION_LITERAL_UNDEFINED_THIS));\n                                }\n                            }\n                        }\n                    }\n                }\n                j++;\n            }\n            if (!foundTemplateTypeOfThisParameter) {\n                compiler.report(JSError.make(NodeUtil.getSourceName(n), n, TEMPLATE_TYPE_OF_THIS_EXPECTED));\n                return;\n            }\n        }\n        i++;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 907,
      "functionName": "updateTypeOfThisOnClosure",
      "functionAnnotation": "",
      "functionDoc": "For functions with function(this: T, ...) and T as parameters, type\ninference will set the type of this on a function literal argument to the\nthe actual type of T.\n",
      "diff": "@@ -1,58 +1,58 @@\n private void updateTypeOfThisOnClosure(Node n, FunctionType fnType) {\n     if (fnType.getTemplateTypeName() \u003d\u003d null) {\n         return;\n     }\n     int i \u003d 0;\n     int childCount \u003d n.getChildCount();\n     for (Node iParameter : fnType.getParameters()) {\n         JSType iParameterType \u003d getJSType(iParameter).restrictByNotNullOrUndefined();\n         if (iParameterType.isTemplateType()) {\n             JSType iArgumentType \u003d null;\n             if (i + 1 \u003c childCount) {\n                 Node iArgument \u003d n.getChildAtIndex(i + 1);\n                 iArgumentType \u003d getJSType(iArgument).restrictByNotNullOrUndefined();\n                 if (!(iArgumentType instanceof ObjectType)) {\n                     compiler.report(JSError.make(NodeUtil.getSourceName(iArgument), iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE));\n                     return;\n                 }\n             }\n             boolean foundTemplateTypeOfThisParameter \u003d false;\n             int j \u003d 0;\n             for (Node jParameter : fnType.getParameters()) {\n                 JSType jParameterType \u003d getJSType(jParameter).restrictByNotNullOrUndefined();\n-                if (jParameterType instanceof FunctionType) {\n-                    FunctionType jParameterFnType \u003d (FunctionType) jParameterType;\n+                if (jParameterType.isFunctionType()) {\n+                    FunctionType jParameterFnType \u003d jParameterType.toMaybeFunctionType();\n                     if (jParameterFnType.getTypeOfThis().equals(iParameterType)) {\n                         foundTemplateTypeOfThisParameter \u003d true;\n                         if (j + 1 \u003e\u003d childCount) {\n                             return;\n                         }\n                         Node jArgument \u003d n.getChildAtIndex(j + 1);\n                         JSType jArgumentType \u003d getJSType(jArgument);\n-                        if (jArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 jArgumentType instanceof FunctionType) {\n+                        if (jArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 jArgumentType.isFunctionType()) {\n                             if (iArgumentType !\u003d null \u0026\u0026 !iArgumentType.isNoType()) {\n-                                FunctionType jArgumentFnType \u003d (FunctionType) jArgumentType;\n+                                FunctionType jArgumentFnType \u003d jArgumentType.toMaybeFunctionType();\n                                 if (jArgumentFnType.getTypeOfThis().isUnknownType()) {\n                                     jArgument.setJSType(registry.createFunctionTypeWithNewThisType(jArgumentFnType, (ObjectType) iArgumentType));\n                                 }\n                                 if (!NodeUtil.referencesThis(NodeUtil.getFunctionBody(jArgument))) {\n                                     compiler.report(JSError.make(NodeUtil.getSourceName(n), n, FUNCTION_LITERAL_UNREAD_THIS));\n                                 }\n                             } else {\n                                 if (NodeUtil.referencesThis(NodeUtil.getFunctionBody(jArgument))) {\n                                     compiler.report(JSError.make(NodeUtil.getSourceName(n), n, FUNCTION_LITERAL_UNDEFINED_THIS));\n                                 }\n                             }\n                         }\n                     }\n                 }\n                 j++;\n             }\n             if (!foundTemplateTypeOfThisParameter) {\n                 compiler.report(JSError.make(NodeUtil.getSourceName(n), n, TEMPLATE_TYPE_OF_THIS_EXPECTED));\n                 return;\n             }\n         }\n         i++;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "01d1238a2a577d8988a72c29304a3283ca05a29a": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nbroke some tests\n\n*** Original change description ***\n\nAdd toMaybeFunctionType/toMaybeEnumElementType.\nwow, nullability is annoying!\n\nDELTA\u003d318  (48 added, 79 deleted, 191 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3075\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1364 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/18/11, 10:40 AM",
      "commitName": "01d1238a2a577d8988a72c29304a3283ca05a29a",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "8/18/11, 9:38 AM",
      "commitNameOld": "fc0798047ad3aac58a54ea65f9f1c8857745419f",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void updateTypeOfThisOnClosure(Node n, FunctionType fnType) {\n    if (fnType.getTemplateTypeName() \u003d\u003d null) {\n        return;\n    }\n    int i \u003d 0;\n    int childCount \u003d n.getChildCount();\n    for (Node iParameter : fnType.getParameters()) {\n        JSType iParameterType \u003d getJSType(iParameter).restrictByNotNullOrUndefined();\n        if (iParameterType.isTemplateType()) {\n            JSType iArgumentType \u003d null;\n            if (i + 1 \u003c childCount) {\n                Node iArgument \u003d n.getChildAtIndex(i + 1);\n                iArgumentType \u003d getJSType(iArgument).restrictByNotNullOrUndefined();\n                if (!(iArgumentType instanceof ObjectType)) {\n                    compiler.report(JSError.make(NodeUtil.getSourceName(iArgument), iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE));\n                    return;\n                }\n            }\n            boolean foundTemplateTypeOfThisParameter \u003d false;\n            int j \u003d 0;\n            for (Node jParameter : fnType.getParameters()) {\n                JSType jParameterType \u003d getJSType(jParameter).restrictByNotNullOrUndefined();\n                if (jParameterType instanceof FunctionType) {\n                    FunctionType jParameterFnType \u003d (FunctionType) jParameterType;\n                    if (jParameterFnType.getTypeOfThis().equals(iParameterType)) {\n                        foundTemplateTypeOfThisParameter \u003d true;\n                        if (j + 1 \u003e\u003d childCount) {\n                            return;\n                        }\n                        Node jArgument \u003d n.getChildAtIndex(j + 1);\n                        JSType jArgumentType \u003d getJSType(jArgument);\n                        if (jArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 jArgumentType instanceof FunctionType) {\n                            if (iArgumentType !\u003d null \u0026\u0026 !iArgumentType.isNoType()) {\n                                FunctionType jArgumentFnType \u003d (FunctionType) jArgumentType;\n                                if (jArgumentFnType.getTypeOfThis().isUnknownType()) {\n                                    jArgument.setJSType(registry.createFunctionTypeWithNewThisType(jArgumentFnType, (ObjectType) iArgumentType));\n                                }\n                                if (!NodeUtil.referencesThis(NodeUtil.getFunctionBody(jArgument))) {\n                                    compiler.report(JSError.make(NodeUtil.getSourceName(n), n, FUNCTION_LITERAL_UNREAD_THIS));\n                                }\n                            } else {\n                                if (NodeUtil.referencesThis(NodeUtil.getFunctionBody(jArgument))) {\n                                    compiler.report(JSError.make(NodeUtil.getSourceName(n), n, FUNCTION_LITERAL_UNDEFINED_THIS));\n                                }\n                            }\n                        }\n                    }\n                }\n                j++;\n            }\n            if (!foundTemplateTypeOfThisParameter) {\n                compiler.report(JSError.make(NodeUtil.getSourceName(n), n, TEMPLATE_TYPE_OF_THIS_EXPECTED));\n                return;\n            }\n        }\n        i++;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 907,
      "functionName": "updateTypeOfThisOnClosure",
      "functionAnnotation": "",
      "functionDoc": "For functions with function(this: T, ...) and T as parameters, type\ninference will set the type of this on a function literal argument to the\nthe actual type of T.\n",
      "diff": "@@ -1,58 +1,58 @@\n private void updateTypeOfThisOnClosure(Node n, FunctionType fnType) {\n     if (fnType.getTemplateTypeName() \u003d\u003d null) {\n         return;\n     }\n     int i \u003d 0;\n     int childCount \u003d n.getChildCount();\n     for (Node iParameter : fnType.getParameters()) {\n         JSType iParameterType \u003d getJSType(iParameter).restrictByNotNullOrUndefined();\n         if (iParameterType.isTemplateType()) {\n             JSType iArgumentType \u003d null;\n             if (i + 1 \u003c childCount) {\n                 Node iArgument \u003d n.getChildAtIndex(i + 1);\n                 iArgumentType \u003d getJSType(iArgument).restrictByNotNullOrUndefined();\n                 if (!(iArgumentType instanceof ObjectType)) {\n                     compiler.report(JSError.make(NodeUtil.getSourceName(iArgument), iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE));\n                     return;\n                 }\n             }\n             boolean foundTemplateTypeOfThisParameter \u003d false;\n             int j \u003d 0;\n             for (Node jParameter : fnType.getParameters()) {\n                 JSType jParameterType \u003d getJSType(jParameter).restrictByNotNullOrUndefined();\n-                if (jParameterType.isFunctionType()) {\n-                    FunctionType jParameterFnType \u003d jParameterType.toMaybeFunctionType();\n+                if (jParameterType instanceof FunctionType) {\n+                    FunctionType jParameterFnType \u003d (FunctionType) jParameterType;\n                     if (jParameterFnType.getTypeOfThis().equals(iParameterType)) {\n                         foundTemplateTypeOfThisParameter \u003d true;\n                         if (j + 1 \u003e\u003d childCount) {\n                             return;\n                         }\n                         Node jArgument \u003d n.getChildAtIndex(j + 1);\n                         JSType jArgumentType \u003d getJSType(jArgument);\n-                        if (jArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 jArgumentType.isFunctionType()) {\n+                        if (jArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 jArgumentType instanceof FunctionType) {\n                             if (iArgumentType !\u003d null \u0026\u0026 !iArgumentType.isNoType()) {\n-                                FunctionType jArgumentFnType \u003d jArgumentType.toMaybeFunctionType();\n+                                FunctionType jArgumentFnType \u003d (FunctionType) jArgumentType;\n                                 if (jArgumentFnType.getTypeOfThis().isUnknownType()) {\n                                     jArgument.setJSType(registry.createFunctionTypeWithNewThisType(jArgumentFnType, (ObjectType) iArgumentType));\n                                 }\n                                 if (!NodeUtil.referencesThis(NodeUtil.getFunctionBody(jArgument))) {\n                                     compiler.report(JSError.make(NodeUtil.getSourceName(n), n, FUNCTION_LITERAL_UNREAD_THIS));\n                                 }\n                             } else {\n                                 if (NodeUtil.referencesThis(NodeUtil.getFunctionBody(jArgument))) {\n                                     compiler.report(JSError.make(NodeUtil.getSourceName(n), n, FUNCTION_LITERAL_UNDEFINED_THIS));\n                                 }\n                             }\n                         }\n                     }\n                 }\n                 j++;\n             }\n             if (!foundTemplateTypeOfThisParameter) {\n                 compiler.report(JSError.make(NodeUtil.getSourceName(n), n, TEMPLATE_TYPE_OF_THIS_EXPECTED));\n                 return;\n             }\n         }\n         i++;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "fc0798047ad3aac58a54ea65f9f1c8857745419f": {
      "type": "Ybodychange",
      "commitMessage": "\nAdd toMaybeFunctionType/toMaybeEnumElementType.\nwow, nullability is annoying!\n\nR\u003djohnlenz\nDELTA\u003d318  (79 added, 48 deleted, 191 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3074\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1363 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/18/11, 9:38 AM",
      "commitName": "fc0798047ad3aac58a54ea65f9f1c8857745419f",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "8/17/11, 11:43 AM",
      "commitNameOld": "5ac633a4e4471847da5aa22bb1fcf28727eb7fe9",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.91,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void updateTypeOfThisOnClosure(Node n, FunctionType fnType) {\n    if (fnType.getTemplateTypeName() \u003d\u003d null) {\n        return;\n    }\n    int i \u003d 0;\n    int childCount \u003d n.getChildCount();\n    for (Node iParameter : fnType.getParameters()) {\n        JSType iParameterType \u003d getJSType(iParameter).restrictByNotNullOrUndefined();\n        if (iParameterType.isTemplateType()) {\n            JSType iArgumentType \u003d null;\n            if (i + 1 \u003c childCount) {\n                Node iArgument \u003d n.getChildAtIndex(i + 1);\n                iArgumentType \u003d getJSType(iArgument).restrictByNotNullOrUndefined();\n                if (!(iArgumentType instanceof ObjectType)) {\n                    compiler.report(JSError.make(NodeUtil.getSourceName(iArgument), iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE));\n                    return;\n                }\n            }\n            boolean foundTemplateTypeOfThisParameter \u003d false;\n            int j \u003d 0;\n            for (Node jParameter : fnType.getParameters()) {\n                JSType jParameterType \u003d getJSType(jParameter).restrictByNotNullOrUndefined();\n                if (jParameterType.isFunctionType()) {\n                    FunctionType jParameterFnType \u003d jParameterType.toMaybeFunctionType();\n                    if (jParameterFnType.getTypeOfThis().equals(iParameterType)) {\n                        foundTemplateTypeOfThisParameter \u003d true;\n                        if (j + 1 \u003e\u003d childCount) {\n                            return;\n                        }\n                        Node jArgument \u003d n.getChildAtIndex(j + 1);\n                        JSType jArgumentType \u003d getJSType(jArgument);\n                        if (jArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 jArgumentType.isFunctionType()) {\n                            if (iArgumentType !\u003d null \u0026\u0026 !iArgumentType.isNoType()) {\n                                FunctionType jArgumentFnType \u003d jArgumentType.toMaybeFunctionType();\n                                if (jArgumentFnType.getTypeOfThis().isUnknownType()) {\n                                    jArgument.setJSType(registry.createFunctionTypeWithNewThisType(jArgumentFnType, (ObjectType) iArgumentType));\n                                }\n                                if (!NodeUtil.referencesThis(NodeUtil.getFunctionBody(jArgument))) {\n                                    compiler.report(JSError.make(NodeUtil.getSourceName(n), n, FUNCTION_LITERAL_UNREAD_THIS));\n                                }\n                            } else {\n                                if (NodeUtil.referencesThis(NodeUtil.getFunctionBody(jArgument))) {\n                                    compiler.report(JSError.make(NodeUtil.getSourceName(n), n, FUNCTION_LITERAL_UNDEFINED_THIS));\n                                }\n                            }\n                        }\n                    }\n                }\n                j++;\n            }\n            if (!foundTemplateTypeOfThisParameter) {\n                compiler.report(JSError.make(NodeUtil.getSourceName(n), n, TEMPLATE_TYPE_OF_THIS_EXPECTED));\n                return;\n            }\n        }\n        i++;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 907,
      "functionName": "updateTypeOfThisOnClosure",
      "functionAnnotation": "",
      "functionDoc": "For functions with function(this: T, ...) and T as parameters, type\ninference will set the type of this on a function literal argument to the\nthe actual type of T.\n",
      "diff": "@@ -1,58 +1,58 @@\n private void updateTypeOfThisOnClosure(Node n, FunctionType fnType) {\n     if (fnType.getTemplateTypeName() \u003d\u003d null) {\n         return;\n     }\n     int i \u003d 0;\n     int childCount \u003d n.getChildCount();\n     for (Node iParameter : fnType.getParameters()) {\n         JSType iParameterType \u003d getJSType(iParameter).restrictByNotNullOrUndefined();\n         if (iParameterType.isTemplateType()) {\n             JSType iArgumentType \u003d null;\n             if (i + 1 \u003c childCount) {\n                 Node iArgument \u003d n.getChildAtIndex(i + 1);\n                 iArgumentType \u003d getJSType(iArgument).restrictByNotNullOrUndefined();\n                 if (!(iArgumentType instanceof ObjectType)) {\n                     compiler.report(JSError.make(NodeUtil.getSourceName(iArgument), iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE));\n                     return;\n                 }\n             }\n             boolean foundTemplateTypeOfThisParameter \u003d false;\n             int j \u003d 0;\n             for (Node jParameter : fnType.getParameters()) {\n                 JSType jParameterType \u003d getJSType(jParameter).restrictByNotNullOrUndefined();\n-                if (jParameterType instanceof FunctionType) {\n-                    FunctionType jParameterFnType \u003d (FunctionType) jParameterType;\n+                if (jParameterType.isFunctionType()) {\n+                    FunctionType jParameterFnType \u003d jParameterType.toMaybeFunctionType();\n                     if (jParameterFnType.getTypeOfThis().equals(iParameterType)) {\n                         foundTemplateTypeOfThisParameter \u003d true;\n                         if (j + 1 \u003e\u003d childCount) {\n                             return;\n                         }\n                         Node jArgument \u003d n.getChildAtIndex(j + 1);\n                         JSType jArgumentType \u003d getJSType(jArgument);\n-                        if (jArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 jArgumentType instanceof FunctionType) {\n+                        if (jArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 jArgumentType.isFunctionType()) {\n                             if (iArgumentType !\u003d null \u0026\u0026 !iArgumentType.isNoType()) {\n-                                FunctionType jArgumentFnType \u003d (FunctionType) jArgumentType;\n+                                FunctionType jArgumentFnType \u003d jArgumentType.toMaybeFunctionType();\n                                 if (jArgumentFnType.getTypeOfThis().isUnknownType()) {\n                                     jArgument.setJSType(registry.createFunctionTypeWithNewThisType(jArgumentFnType, (ObjectType) iArgumentType));\n                                 }\n                                 if (!NodeUtil.referencesThis(NodeUtil.getFunctionBody(jArgument))) {\n                                     compiler.report(JSError.make(NodeUtil.getSourceName(n), n, FUNCTION_LITERAL_UNREAD_THIS));\n                                 }\n                             } else {\n                                 if (NodeUtil.referencesThis(NodeUtil.getFunctionBody(jArgument))) {\n                                     compiler.report(JSError.make(NodeUtil.getSourceName(n), n, FUNCTION_LITERAL_UNDEFINED_THIS));\n                                 }\n                             }\n                         }\n                     }\n                 }\n                 j++;\n             }\n             if (!foundTemplateTypeOfThisParameter) {\n                 compiler.report(JSError.make(NodeUtil.getSourceName(n), n, TEMPLATE_TYPE_OF_THIS_EXPECTED));\n                 return;\n             }\n         }\n         i++;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1c5d6203ab1152a6dee19149fdca2ecd1d8f585f": {
      "type": "Ybodychange",
      "commitMessage": "\ntype inference in the delete operator\n\nR\u003djohnlenz\nDELTA\u003d34  (28 added, 0 deleted, 6 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d717\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@840 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/1/11, 5:40 PM",
      "commitName": "1c5d6203ab1152a6dee19149fdca2ecd1d8f585f",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "1/28/11, 10:24 AM",
      "commitNameOld": "06484feebf8fc124b48eb1c252e57bc4e6f76d6f",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 32.3,
      "commitsBetweenForRepo": 100,
      "commitsBetweenForFile": 1,
      "actualSource": "private void updateTypeOfThisOnClosure(Node n, FunctionType fnType) {\n    if (fnType.getTemplateTypeName() \u003d\u003d null) {\n        return;\n    }\n    int i \u003d 0;\n    int childCount \u003d n.getChildCount();\n    for (Node iParameter : fnType.getParameters()) {\n        JSType iParameterType \u003d getJSType(iParameter).restrictByNotNullOrUndefined();\n        if (iParameterType.isTemplateType()) {\n            JSType iArgumentType \u003d null;\n            if (i + 1 \u003c childCount) {\n                Node iArgument \u003d n.getChildAtIndex(i + 1);\n                iArgumentType \u003d getJSType(iArgument).restrictByNotNullOrUndefined();\n                if (!(iArgumentType instanceof ObjectType)) {\n                    compiler.report(JSError.make(NodeUtil.getSourceName(iArgument), iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE));\n                    return;\n                }\n            }\n            boolean foundTemplateTypeOfThisParameter \u003d false;\n            int j \u003d 0;\n            for (Node jParameter : fnType.getParameters()) {\n                JSType jParameterType \u003d getJSType(jParameter).restrictByNotNullOrUndefined();\n                if (jParameterType instanceof FunctionType) {\n                    FunctionType jParameterFnType \u003d (FunctionType) jParameterType;\n                    if (jParameterFnType.getTypeOfThis().equals(iParameterType)) {\n                        foundTemplateTypeOfThisParameter \u003d true;\n                        if (j + 1 \u003e\u003d childCount) {\n                            return;\n                        }\n                        Node jArgument \u003d n.getChildAtIndex(j + 1);\n                        JSType jArgumentType \u003d getJSType(jArgument);\n                        if (jArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 jArgumentType instanceof FunctionType) {\n                            if (iArgumentType !\u003d null \u0026\u0026 !iArgumentType.isNoType()) {\n                                FunctionType jArgumentFnType \u003d (FunctionType) jArgumentType;\n                                if (jArgumentFnType.getTypeOfThis().isUnknownType()) {\n                                    jArgument.setJSType(registry.createFunctionTypeWithNewThisType(jArgumentFnType, (ObjectType) iArgumentType));\n                                }\n                                if (!NodeUtil.referencesThis(NodeUtil.getFunctionBody(jArgument))) {\n                                    compiler.report(JSError.make(NodeUtil.getSourceName(n), n, FUNCTION_LITERAL_UNREAD_THIS));\n                                }\n                            } else {\n                                if (NodeUtil.referencesThis(NodeUtil.getFunctionBody(jArgument))) {\n                                    compiler.report(JSError.make(NodeUtil.getSourceName(n), n, FUNCTION_LITERAL_UNDEFINED_THIS));\n                                }\n                            }\n                        }\n                    }\n                }\n                j++;\n            }\n            if (!foundTemplateTypeOfThisParameter) {\n                compiler.report(JSError.make(NodeUtil.getSourceName(n), n, TEMPLATE_TYPE_OF_THIS_EXPECTED));\n                return;\n            }\n        }\n        i++;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 900,
      "functionName": "updateTypeOfThisOnClosure",
      "functionAnnotation": "",
      "functionDoc": "For functions with function(this: T, ...) and T as parameters, type\ninference will set the type of this on a function literal argument to the\nthe actual type of T.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "b02b646a75d6dd26f41fe6d987841ed01c8ec161": {
      "type": "Ybodychange",
      "commitMessage": "\nMake unread bound this argument a warning.\n\nR\u003dnicksantos\nDELTA\u003d41  (36 added, 2 deleted, 3 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d71\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@600 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/6/10, 2:55 PM",
      "commitName": "b02b646a75d6dd26f41fe6d987841ed01c8ec161",
      "commitAuthor": "mgoodman@google.com",
      "commitDateOld": "11/11/10, 9:42 PM",
      "commitNameOld": "df223efd38c514d584f00d076488ab9a02011492",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 24.72,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "actualSource": "private void updateTypeOfThisOnClosure(Node n, FunctionType fnType) {\n    if (fnType.getTemplateTypeName() \u003d\u003d null) {\n        return;\n    }\n    int i \u003d 0;\n    int childCount \u003d n.getChildCount();\n    for (Node iParameter : fnType.getParameters()) {\n        JSType iParameterType \u003d getJSType(iParameter).restrictByNotNullOrUndefined();\n        if (iParameterType.isTemplateType()) {\n            JSType iArgumentType \u003d null;\n            if (i + 1 \u003c childCount) {\n                Node iArgument \u003d n.getChildAtIndex(i + 1);\n                iArgumentType \u003d getJSType(iArgument).restrictByNotNullOrUndefined();\n                if (!(iArgumentType instanceof ObjectType)) {\n                    compiler.report(JSError.make(NodeUtil.getSourceName(iArgument), iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE));\n                    return;\n                }\n            }\n            boolean foundTemplateTypeOfThisParameter \u003d false;\n            int j \u003d 0;\n            for (Node jParameter : fnType.getParameters()) {\n                JSType jParameterType \u003d getJSType(jParameter).restrictByNotNullOrUndefined();\n                if (jParameterType instanceof FunctionType) {\n                    FunctionType jParameterFnType \u003d (FunctionType) jParameterType;\n                    if (jParameterFnType.getTypeOfThis().equals(iParameterType)) {\n                        foundTemplateTypeOfThisParameter \u003d true;\n                        if (j + 1 \u003e\u003d childCount) {\n                            return;\n                        }\n                        Node jArgument \u003d n.getChildAtIndex(j + 1);\n                        JSType jArgumentType \u003d getJSType(jArgument);\n                        if (jArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 jArgumentType instanceof FunctionType) {\n                            if (iArgumentType !\u003d null \u0026\u0026 !iArgumentType.isNoType()) {\n                                FunctionType jArgumentFnType \u003d (FunctionType) jArgumentType;\n                                if (jArgumentFnType.getTypeOfThis().isUnknownType()) {\n                                    jArgument.setJSType(registry.createFunctionTypeWithNewThisType(jArgumentFnType, (ObjectType) iArgumentType));\n                                }\n                                if (!NodeUtil.referencesThis(NodeUtil.getFunctionBody(jArgument))) {\n                                    compiler.report(JSError.make(NodeUtil.getSourceName(n), n, FUNCTION_LITERAL_UNREAD_THIS));\n                                }\n                            } else {\n                                if (NodeUtil.referencesThis(NodeUtil.getFunctionBody(jArgument))) {\n                                    compiler.report(JSError.make(NodeUtil.getSourceName(n), n, FUNCTION_LITERAL_UNDEFINED_THIS));\n                                }\n                            }\n                        }\n                    }\n                }\n                j++;\n            }\n            if (!foundTemplateTypeOfThisParameter) {\n                compiler.report(JSError.make(NodeUtil.getSourceName(n), n, TEMPLATE_TYPE_OF_THIS_EXPECTED));\n                return;\n            }\n        }\n        i++;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 875,
      "functionName": "updateTypeOfThisOnClosure",
      "functionAnnotation": "",
      "functionDoc": "For functions with function(this: T, ...) and T as parameters, type\ninference will set the type of this on a function literal argument to the\nthe actual type of T.\n",
      "diff": "@@ -1,57 +1,58 @@\n private void updateTypeOfThisOnClosure(Node n, FunctionType fnType) {\n     if (fnType.getTemplateTypeName() \u003d\u003d null) {\n         return;\n     }\n     int i \u003d 0;\n     int childCount \u003d n.getChildCount();\n     for (Node iParameter : fnType.getParameters()) {\n         JSType iParameterType \u003d getJSType(iParameter).restrictByNotNullOrUndefined();\n         if (iParameterType.isTemplateType()) {\n             JSType iArgumentType \u003d null;\n-            boolean foundTemplateTypeArgument \u003d false;\n             if (i + 1 \u003c childCount) {\n-                foundTemplateTypeArgument \u003d true;\n                 Node iArgument \u003d n.getChildAtIndex(i + 1);\n                 iArgumentType \u003d getJSType(iArgument).restrictByNotNullOrUndefined();\n                 if (!(iArgumentType instanceof ObjectType)) {\n                     compiler.report(JSError.make(NodeUtil.getSourceName(iArgument), iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE));\n                     return;\n                 }\n             }\n             boolean foundTemplateTypeOfThisParameter \u003d false;\n             int j \u003d 0;\n             for (Node jParameter : fnType.getParameters()) {\n                 JSType jParameterType \u003d getJSType(jParameter).restrictByNotNullOrUndefined();\n                 if (jParameterType instanceof FunctionType) {\n                     FunctionType jParameterFnType \u003d (FunctionType) jParameterType;\n                     if (jParameterFnType.getTypeOfThis().equals(iParameterType)) {\n                         foundTemplateTypeOfThisParameter \u003d true;\n                         if (j + 1 \u003e\u003d childCount) {\n                             return;\n                         }\n                         Node jArgument \u003d n.getChildAtIndex(j + 1);\n                         JSType jArgumentType \u003d getJSType(jArgument);\n                         if (jArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 jArgumentType instanceof FunctionType) {\n-                            if (foundTemplateTypeArgument) {\n+                            if (iArgumentType !\u003d null \u0026\u0026 !iArgumentType.isNoType()) {\n                                 FunctionType jArgumentFnType \u003d (FunctionType) jArgumentType;\n                                 if (jArgumentFnType.getTypeOfThis().isUnknownType()) {\n                                     jArgument.setJSType(registry.createFunctionTypeWithNewThisType(jArgumentFnType, (ObjectType) iArgumentType));\n                                 }\n+                                if (!NodeUtil.referencesThis(NodeUtil.getFunctionBody(jArgument))) {\n+                                    compiler.report(JSError.make(NodeUtil.getSourceName(n), n, FUNCTION_LITERAL_UNREAD_THIS));\n+                                }\n                             } else {\n                                 if (NodeUtil.referencesThis(NodeUtil.getFunctionBody(jArgument))) {\n                                     compiler.report(JSError.make(NodeUtil.getSourceName(n), n, FUNCTION_LITERAL_UNDEFINED_THIS));\n                                 }\n                             }\n                         }\n                     }\n                 }\n                 j++;\n             }\n             if (!foundTemplateTypeOfThisParameter) {\n                 compiler.report(JSError.make(NodeUtil.getSourceName(n), n, TEMPLATE_TYPE_OF_THIS_EXPECTED));\n                 return;\n             }\n         }\n         i++;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c722073c9544792e02d8a101ae317869430180a5": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nfixed the new warnings.\n\n*** Original change description ***\n\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nbreaks builds\n\n*** Original change description ***\n\nFix TypeInference#updateTypeOfParametersOnClosure.\n\nUse call site for warning source instead of function definition.\n\nR\u003djohnlenz\nDELTA\u003d31  (28 added, 1 deleted, 2 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1029002\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@527 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/29/10, 3:12 PM",
      "commitName": "c722073c9544792e02d8a101ae317869430180a5",
      "commitAuthor": "mgoodman@google.com",
      "commitDateOld": "10/29/10, 12:46 PM",
      "commitNameOld": "45e90a3d390335fe246b8d3f1868a74e1663b607",
      "commitAuthorOld": "mgoodman@google.com",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "private void updateTypeOfThisOnClosure(Node n, FunctionType fnType) {\n    if (fnType.getTemplateTypeName() \u003d\u003d null) {\n        return;\n    }\n    int i \u003d 0;\n    int childCount \u003d n.getChildCount();\n    for (Node iParameter : fnType.getParameters()) {\n        JSType iParameterType \u003d getJSType(iParameter).restrictByNotNullOrUndefined();\n        if (iParameterType.isTemplateType()) {\n            JSType iArgumentType \u003d null;\n            boolean foundTemplateTypeArgument \u003d false;\n            if (i + 1 \u003c childCount) {\n                foundTemplateTypeArgument \u003d true;\n                Node iArgument \u003d n.getChildAtIndex(i + 1);\n                iArgumentType \u003d getJSType(iArgument).restrictByNotNullOrUndefined();\n                if (!(iArgumentType instanceof ObjectType)) {\n                    compiler.report(JSError.make(NodeUtil.getSourceName(iArgument), iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE));\n                    return;\n                }\n            }\n            boolean foundTemplateTypeOfThisParameter \u003d false;\n            int j \u003d 0;\n            for (Node jParameter : fnType.getParameters()) {\n                JSType jParameterType \u003d getJSType(jParameter).restrictByNotNullOrUndefined();\n                if (jParameterType instanceof FunctionType) {\n                    FunctionType jParameterFnType \u003d (FunctionType) jParameterType;\n                    if (jParameterFnType.getTypeOfThis().equals(iParameterType)) {\n                        foundTemplateTypeOfThisParameter \u003d true;\n                        if (j + 1 \u003e\u003d childCount) {\n                            return;\n                        }\n                        Node jArgument \u003d n.getChildAtIndex(j + 1);\n                        JSType jArgumentType \u003d getJSType(jArgument);\n                        if (jArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 jArgumentType instanceof FunctionType) {\n                            if (foundTemplateTypeArgument) {\n                                FunctionType jArgumentFnType \u003d (FunctionType) jArgumentType;\n                                if (jArgumentFnType.getTypeOfThis().isUnknownType()) {\n                                    jArgument.setJSType(registry.createFunctionTypeWithNewThisType(jArgumentFnType, (ObjectType) iArgumentType));\n                                }\n                            } else {\n                                if (NodeUtil.referencesThis(NodeUtil.getFunctionBody(jArgument))) {\n                                    compiler.report(JSError.make(NodeUtil.getSourceName(n), n, FUNCTION_LITERAL_UNDEFINED_THIS));\n                                }\n                            }\n                        }\n                    }\n                }\n                j++;\n            }\n            if (!foundTemplateTypeOfThisParameter) {\n                compiler.report(JSError.make(NodeUtil.getSourceName(n), n, TEMPLATE_TYPE_OF_THIS_EXPECTED));\n                return;\n            }\n        }\n        i++;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 870,
      "functionName": "updateTypeOfThisOnClosure",
      "functionAnnotation": "",
      "functionDoc": "For functions with function(this: T, ...) and T as parameters, type\ninference will set the type of this on a function literal argument to the\nthe actual type of T.\n",
      "diff": "@@ -1,58 +1,57 @@\n private void updateTypeOfThisOnClosure(Node n, FunctionType fnType) {\n     if (fnType.getTemplateTypeName() \u003d\u003d null) {\n         return;\n     }\n     int i \u003d 0;\n     int childCount \u003d n.getChildCount();\n     for (Node iParameter : fnType.getParameters()) {\n         JSType iParameterType \u003d getJSType(iParameter).restrictByNotNullOrUndefined();\n         if (iParameterType.isTemplateType()) {\n             JSType iArgumentType \u003d null;\n             boolean foundTemplateTypeArgument \u003d false;\n             if (i + 1 \u003c childCount) {\n                 foundTemplateTypeArgument \u003d true;\n                 Node iArgument \u003d n.getChildAtIndex(i + 1);\n                 iArgumentType \u003d getJSType(iArgument).restrictByNotNullOrUndefined();\n                 if (!(iArgumentType instanceof ObjectType)) {\n                     compiler.report(JSError.make(NodeUtil.getSourceName(iArgument), iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE));\n                     return;\n                 }\n             }\n             boolean foundTemplateTypeOfThisParameter \u003d false;\n             int j \u003d 0;\n             for (Node jParameter : fnType.getParameters()) {\n                 JSType jParameterType \u003d getJSType(jParameter).restrictByNotNullOrUndefined();\n                 if (jParameterType instanceof FunctionType) {\n                     FunctionType jParameterFnType \u003d (FunctionType) jParameterType;\n                     if (jParameterFnType.getTypeOfThis().equals(iParameterType)) {\n                         foundTemplateTypeOfThisParameter \u003d true;\n                         if (j + 1 \u003e\u003d childCount) {\n                             return;\n                         }\n                         Node jArgument \u003d n.getChildAtIndex(j + 1);\n                         JSType jArgumentType \u003d getJSType(jArgument);\n                         if (jArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 jArgumentType instanceof FunctionType) {\n                             if (foundTemplateTypeArgument) {\n                                 FunctionType jArgumentFnType \u003d (FunctionType) jArgumentType;\n                                 if (jArgumentFnType.getTypeOfThis().isUnknownType()) {\n                                     jArgument.setJSType(registry.createFunctionTypeWithNewThisType(jArgumentFnType, (ObjectType) iArgumentType));\n                                 }\n                             } else {\n                                 if (NodeUtil.referencesThis(NodeUtil.getFunctionBody(jArgument))) {\n                                     compiler.report(JSError.make(NodeUtil.getSourceName(n), n, FUNCTION_LITERAL_UNDEFINED_THIS));\n                                 }\n                             }\n                         }\n                     }\n                 }\n                 j++;\n             }\n             if (!foundTemplateTypeOfThisParameter) {\n-                Node source \u003d fnType.getSource();\n-                compiler.report(JSError.make(NodeUtil.getSourceName(source), source, TEMPLATE_TYPE_OF_THIS_EXPECTED));\n+                compiler.report(JSError.make(NodeUtil.getSourceName(n), n, TEMPLATE_TYPE_OF_THIS_EXPECTED));\n                 return;\n             }\n         }\n         i++;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "45e90a3d390335fe246b8d3f1868a74e1663b607": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nbreaks builds\n\n*** Original change description ***\n\nFix TypeInference#updateTypeOfParametersOnClosure.\n\nUse call site for warning source instead of function definition.\n\nR\u003djohnlenz\nDELTA\u003d31  (1 added, 28 deleted, 2 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d869001\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@525 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/29/10, 12:46 PM",
      "commitName": "45e90a3d390335fe246b8d3f1868a74e1663b607",
      "commitAuthor": "mgoodman@google.com",
      "commitDateOld": "10/29/10, 11:07 AM",
      "commitNameOld": "52666da81761e9652993fd8e7e375ad456408419",
      "commitAuthorOld": "mgoodman@google.com",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private void updateTypeOfThisOnClosure(Node n, FunctionType fnType) {\n    if (fnType.getTemplateTypeName() \u003d\u003d null) {\n        return;\n    }\n    int i \u003d 0;\n    int childCount \u003d n.getChildCount();\n    for (Node iParameter : fnType.getParameters()) {\n        JSType iParameterType \u003d getJSType(iParameter).restrictByNotNullOrUndefined();\n        if (iParameterType.isTemplateType()) {\n            JSType iArgumentType \u003d null;\n            boolean foundTemplateTypeArgument \u003d false;\n            if (i + 1 \u003c childCount) {\n                foundTemplateTypeArgument \u003d true;\n                Node iArgument \u003d n.getChildAtIndex(i + 1);\n                iArgumentType \u003d getJSType(iArgument).restrictByNotNullOrUndefined();\n                if (!(iArgumentType instanceof ObjectType)) {\n                    compiler.report(JSError.make(NodeUtil.getSourceName(iArgument), iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE));\n                    return;\n                }\n            }\n            boolean foundTemplateTypeOfThisParameter \u003d false;\n            int j \u003d 0;\n            for (Node jParameter : fnType.getParameters()) {\n                JSType jParameterType \u003d getJSType(jParameter).restrictByNotNullOrUndefined();\n                if (jParameterType instanceof FunctionType) {\n                    FunctionType jParameterFnType \u003d (FunctionType) jParameterType;\n                    if (jParameterFnType.getTypeOfThis().equals(iParameterType)) {\n                        foundTemplateTypeOfThisParameter \u003d true;\n                        if (j + 1 \u003e\u003d childCount) {\n                            return;\n                        }\n                        Node jArgument \u003d n.getChildAtIndex(j + 1);\n                        JSType jArgumentType \u003d getJSType(jArgument);\n                        if (jArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 jArgumentType instanceof FunctionType) {\n                            if (foundTemplateTypeArgument) {\n                                FunctionType jArgumentFnType \u003d (FunctionType) jArgumentType;\n                                if (jArgumentFnType.getTypeOfThis().isUnknownType()) {\n                                    jArgument.setJSType(registry.createFunctionTypeWithNewThisType(jArgumentFnType, (ObjectType) iArgumentType));\n                                }\n                            } else {\n                                if (NodeUtil.referencesThis(NodeUtil.getFunctionBody(jArgument))) {\n                                    compiler.report(JSError.make(NodeUtil.getSourceName(n), n, FUNCTION_LITERAL_UNDEFINED_THIS));\n                                }\n                            }\n                        }\n                    }\n                }\n                j++;\n            }\n            if (!foundTemplateTypeOfThisParameter) {\n                Node source \u003d fnType.getSource();\n                compiler.report(JSError.make(NodeUtil.getSourceName(source), source, TEMPLATE_TYPE_OF_THIS_EXPECTED));\n                return;\n            }\n        }\n        i++;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 870,
      "functionName": "updateTypeOfThisOnClosure",
      "functionAnnotation": "",
      "functionDoc": "For functions with function(this: T, ...) and T as parameters, type\ninference will set the type of this on a function literal argument to the\nthe actual type of T.\n",
      "diff": "@@ -1,57 +1,58 @@\n private void updateTypeOfThisOnClosure(Node n, FunctionType fnType) {\n     if (fnType.getTemplateTypeName() \u003d\u003d null) {\n         return;\n     }\n     int i \u003d 0;\n     int childCount \u003d n.getChildCount();\n     for (Node iParameter : fnType.getParameters()) {\n         JSType iParameterType \u003d getJSType(iParameter).restrictByNotNullOrUndefined();\n         if (iParameterType.isTemplateType()) {\n             JSType iArgumentType \u003d null;\n             boolean foundTemplateTypeArgument \u003d false;\n             if (i + 1 \u003c childCount) {\n                 foundTemplateTypeArgument \u003d true;\n                 Node iArgument \u003d n.getChildAtIndex(i + 1);\n                 iArgumentType \u003d getJSType(iArgument).restrictByNotNullOrUndefined();\n                 if (!(iArgumentType instanceof ObjectType)) {\n                     compiler.report(JSError.make(NodeUtil.getSourceName(iArgument), iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE));\n                     return;\n                 }\n             }\n             boolean foundTemplateTypeOfThisParameter \u003d false;\n             int j \u003d 0;\n             for (Node jParameter : fnType.getParameters()) {\n                 JSType jParameterType \u003d getJSType(jParameter).restrictByNotNullOrUndefined();\n                 if (jParameterType instanceof FunctionType) {\n                     FunctionType jParameterFnType \u003d (FunctionType) jParameterType;\n                     if (jParameterFnType.getTypeOfThis().equals(iParameterType)) {\n                         foundTemplateTypeOfThisParameter \u003d true;\n                         if (j + 1 \u003e\u003d childCount) {\n                             return;\n                         }\n                         Node jArgument \u003d n.getChildAtIndex(j + 1);\n                         JSType jArgumentType \u003d getJSType(jArgument);\n                         if (jArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 jArgumentType instanceof FunctionType) {\n                             if (foundTemplateTypeArgument) {\n                                 FunctionType jArgumentFnType \u003d (FunctionType) jArgumentType;\n                                 if (jArgumentFnType.getTypeOfThis().isUnknownType()) {\n                                     jArgument.setJSType(registry.createFunctionTypeWithNewThisType(jArgumentFnType, (ObjectType) iArgumentType));\n                                 }\n                             } else {\n                                 if (NodeUtil.referencesThis(NodeUtil.getFunctionBody(jArgument))) {\n                                     compiler.report(JSError.make(NodeUtil.getSourceName(n), n, FUNCTION_LITERAL_UNDEFINED_THIS));\n                                 }\n                             }\n                         }\n                     }\n                 }\n                 j++;\n             }\n             if (!foundTemplateTypeOfThisParameter) {\n-                compiler.report(JSError.make(NodeUtil.getSourceName(n), n, TEMPLATE_TYPE_OF_THIS_EXPECTED));\n+                Node source \u003d fnType.getSource();\n+                compiler.report(JSError.make(NodeUtil.getSourceName(source), source, TEMPLATE_TYPE_OF_THIS_EXPECTED));\n                 return;\n             }\n         }\n         i++;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "52666da81761e9652993fd8e7e375ad456408419": {
      "type": "Ybodychange",
      "commitMessage": "\nFix TypeInference#updateTypeOfParametersOnClosure.\n\nUse call site for warning source instead of function definition.\n\nR\u003dnicksantos\nDELTA\u003d31  (28 added, 1 deleted, 2 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d863019\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@522 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/29/10, 11:07 AM",
      "commitName": "52666da81761e9652993fd8e7e375ad456408419",
      "commitAuthor": "mgoodman@google.com",
      "commitDateOld": "10/26/10, 8:07 AM",
      "commitNameOld": "1bd8d2f0f4f3edcc11aa441f50223967a98bf85d",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 3.13,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "private void updateTypeOfThisOnClosure(Node n, FunctionType fnType) {\n    if (fnType.getTemplateTypeName() \u003d\u003d null) {\n        return;\n    }\n    int i \u003d 0;\n    int childCount \u003d n.getChildCount();\n    for (Node iParameter : fnType.getParameters()) {\n        JSType iParameterType \u003d getJSType(iParameter).restrictByNotNullOrUndefined();\n        if (iParameterType.isTemplateType()) {\n            JSType iArgumentType \u003d null;\n            boolean foundTemplateTypeArgument \u003d false;\n            if (i + 1 \u003c childCount) {\n                foundTemplateTypeArgument \u003d true;\n                Node iArgument \u003d n.getChildAtIndex(i + 1);\n                iArgumentType \u003d getJSType(iArgument).restrictByNotNullOrUndefined();\n                if (!(iArgumentType instanceof ObjectType)) {\n                    compiler.report(JSError.make(NodeUtil.getSourceName(iArgument), iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE));\n                    return;\n                }\n            }\n            boolean foundTemplateTypeOfThisParameter \u003d false;\n            int j \u003d 0;\n            for (Node jParameter : fnType.getParameters()) {\n                JSType jParameterType \u003d getJSType(jParameter).restrictByNotNullOrUndefined();\n                if (jParameterType instanceof FunctionType) {\n                    FunctionType jParameterFnType \u003d (FunctionType) jParameterType;\n                    if (jParameterFnType.getTypeOfThis().equals(iParameterType)) {\n                        foundTemplateTypeOfThisParameter \u003d true;\n                        if (j + 1 \u003e\u003d childCount) {\n                            return;\n                        }\n                        Node jArgument \u003d n.getChildAtIndex(j + 1);\n                        JSType jArgumentType \u003d getJSType(jArgument);\n                        if (jArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 jArgumentType instanceof FunctionType) {\n                            if (foundTemplateTypeArgument) {\n                                FunctionType jArgumentFnType \u003d (FunctionType) jArgumentType;\n                                if (jArgumentFnType.getTypeOfThis().isUnknownType()) {\n                                    jArgument.setJSType(registry.createFunctionTypeWithNewThisType(jArgumentFnType, (ObjectType) iArgumentType));\n                                }\n                            } else {\n                                if (NodeUtil.referencesThis(NodeUtil.getFunctionBody(jArgument))) {\n                                    compiler.report(JSError.make(NodeUtil.getSourceName(n), n, FUNCTION_LITERAL_UNDEFINED_THIS));\n                                }\n                            }\n                        }\n                    }\n                }\n                j++;\n            }\n            if (!foundTemplateTypeOfThisParameter) {\n                compiler.report(JSError.make(NodeUtil.getSourceName(n), n, TEMPLATE_TYPE_OF_THIS_EXPECTED));\n                return;\n            }\n        }\n        i++;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 870,
      "functionName": "updateTypeOfThisOnClosure",
      "functionAnnotation": "",
      "functionDoc": "For functions with function(this: T, ...) and T as parameters, type\ninference will set the type of this on a function literal argument to the\nthe actual type of T.\n",
      "diff": "@@ -1,58 +1,57 @@\n private void updateTypeOfThisOnClosure(Node n, FunctionType fnType) {\n     if (fnType.getTemplateTypeName() \u003d\u003d null) {\n         return;\n     }\n     int i \u003d 0;\n     int childCount \u003d n.getChildCount();\n     for (Node iParameter : fnType.getParameters()) {\n         JSType iParameterType \u003d getJSType(iParameter).restrictByNotNullOrUndefined();\n         if (iParameterType.isTemplateType()) {\n             JSType iArgumentType \u003d null;\n             boolean foundTemplateTypeArgument \u003d false;\n             if (i + 1 \u003c childCount) {\n                 foundTemplateTypeArgument \u003d true;\n                 Node iArgument \u003d n.getChildAtIndex(i + 1);\n                 iArgumentType \u003d getJSType(iArgument).restrictByNotNullOrUndefined();\n                 if (!(iArgumentType instanceof ObjectType)) {\n                     compiler.report(JSError.make(NodeUtil.getSourceName(iArgument), iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE));\n                     return;\n                 }\n             }\n             boolean foundTemplateTypeOfThisParameter \u003d false;\n             int j \u003d 0;\n             for (Node jParameter : fnType.getParameters()) {\n                 JSType jParameterType \u003d getJSType(jParameter).restrictByNotNullOrUndefined();\n                 if (jParameterType instanceof FunctionType) {\n                     FunctionType jParameterFnType \u003d (FunctionType) jParameterType;\n                     if (jParameterFnType.getTypeOfThis().equals(iParameterType)) {\n                         foundTemplateTypeOfThisParameter \u003d true;\n                         if (j + 1 \u003e\u003d childCount) {\n                             return;\n                         }\n                         Node jArgument \u003d n.getChildAtIndex(j + 1);\n                         JSType jArgumentType \u003d getJSType(jArgument);\n                         if (jArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 jArgumentType instanceof FunctionType) {\n                             if (foundTemplateTypeArgument) {\n                                 FunctionType jArgumentFnType \u003d (FunctionType) jArgumentType;\n                                 if (jArgumentFnType.getTypeOfThis().isUnknownType()) {\n                                     jArgument.setJSType(registry.createFunctionTypeWithNewThisType(jArgumentFnType, (ObjectType) iArgumentType));\n                                 }\n                             } else {\n                                 if (NodeUtil.referencesThis(NodeUtil.getFunctionBody(jArgument))) {\n                                     compiler.report(JSError.make(NodeUtil.getSourceName(n), n, FUNCTION_LITERAL_UNDEFINED_THIS));\n                                 }\n                             }\n                         }\n                     }\n                 }\n                 j++;\n             }\n             if (!foundTemplateTypeOfThisParameter) {\n-                Node source \u003d fnType.getSource();\n-                compiler.report(JSError.make(NodeUtil.getSourceName(source), source, TEMPLATE_TYPE_OF_THIS_EXPECTED));\n+                compiler.report(JSError.make(NodeUtil.getSourceName(n), n, TEMPLATE_TYPE_OF_THIS_EXPECTED));\n                 return;\n             }\n         }\n         i++;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5db16f8f51592b6a6ac97c609fb0c691cc3f201a": {
      "type": "Ybodychange",
      "commitMessage": "\nLet the template function type be nullable.\n\nR\u003dnicksantos\nDELTA\u003d8  (1 added, 0 deleted, 7 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d358566\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@497 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/19/10, 10:47 AM",
      "commitName": "5db16f8f51592b6a6ac97c609fb0c691cc3f201a",
      "commitAuthor": "mgoodman@google.com",
      "commitDateOld": "10/18/10, 2:55 PM",
      "commitNameOld": "34fd5f8275ae69fc772c2283a3c5fd13b93a7c42",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.83,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private void updateTypeOfThisOnClosure(Node n, FunctionType fnType) {\n    if (fnType.getTemplateTypeName() \u003d\u003d null) {\n        return;\n    }\n    int i \u003d 0;\n    int childCount \u003d n.getChildCount();\n    for (Node iParameter : fnType.getParameters()) {\n        JSType iParameterType \u003d getJSType(iParameter).restrictByNotNullOrUndefined();\n        if (iParameterType.isTemplateType()) {\n            JSType iArgumentType \u003d null;\n            boolean foundTemplateTypeArgument \u003d false;\n            if (i + 1 \u003c childCount) {\n                foundTemplateTypeArgument \u003d true;\n                Node iArgument \u003d n.getChildAtIndex(i + 1);\n                iArgumentType \u003d getJSType(iArgument).restrictByNotNullOrUndefined();\n                if (!(iArgumentType instanceof ObjectType)) {\n                    compiler.report(JSError.make(NodeUtil.getSourceName(iArgument), iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE));\n                    return;\n                }\n            }\n            boolean foundTemplateTypeOfThisParameter \u003d false;\n            int j \u003d 0;\n            for (Node jParameter : fnType.getParameters()) {\n                JSType jParameterType \u003d getJSType(jParameter).restrictByNotNullOrUndefined();\n                if (jParameterType instanceof FunctionType) {\n                    FunctionType jParameterFnType \u003d (FunctionType) jParameterType;\n                    if (jParameterFnType.getTypeOfThis().equals(iParameterType)) {\n                        foundTemplateTypeOfThisParameter \u003d true;\n                        if (j + 1 \u003e\u003d childCount) {\n                            return;\n                        }\n                        Node jArgument \u003d n.getChildAtIndex(j + 1);\n                        JSType jArgumentType \u003d getJSType(jArgument);\n                        if (jArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 jArgumentType instanceof FunctionType) {\n                            if (foundTemplateTypeArgument) {\n                                FunctionType jArgumentFnType \u003d (FunctionType) jArgumentType;\n                                if (jArgumentFnType.getTypeOfThis().isUnknownType()) {\n                                    jArgument.setJSType(registry.createFunctionTypeWithNewThisType(jArgumentFnType, (ObjectType) iArgumentType));\n                                }\n                            } else {\n                                if (NodeUtil.referencesThis(NodeUtil.getFunctionBody(jArgument))) {\n                                    compiler.report(JSError.make(NodeUtil.getSourceName(n), n, FUNCTION_LITERAL_UNDEFINED_THIS));\n                                }\n                            }\n                        }\n                    }\n                }\n                j++;\n            }\n            if (!foundTemplateTypeOfThisParameter) {\n                Node source \u003d fnType.getSource();\n                compiler.report(JSError.make(NodeUtil.getSourceName(source), source, TEMPLATE_TYPE_OF_THIS_EXPECTED));\n                return;\n            }\n        }\n        i++;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 864,
      "functionName": "updateTypeOfThisOnClosure",
      "functionAnnotation": "",
      "functionDoc": "For functions with function(this: T, ...) and T as parameters, type\ninference will set the type of this on a function literal argument to the\nthe actual type of T.\n",
      "diff": "@@ -1,59 +1,58 @@\n private void updateTypeOfThisOnClosure(Node n, FunctionType fnType) {\n     if (fnType.getTemplateTypeName() \u003d\u003d null) {\n         return;\n     }\n     int i \u003d 0;\n     int childCount \u003d n.getChildCount();\n     for (Node iParameter : fnType.getParameters()) {\n-        JSType iParameterType \u003d getJSType(iParameter);\n-        iParameterType \u003d iParameterType.restrictByNotNullOrUndefined();\n+        JSType iParameterType \u003d getJSType(iParameter).restrictByNotNullOrUndefined();\n         if (iParameterType.isTemplateType()) {\n             JSType iArgumentType \u003d null;\n             boolean foundTemplateTypeArgument \u003d false;\n             if (i + 1 \u003c childCount) {\n                 foundTemplateTypeArgument \u003d true;\n                 Node iArgument \u003d n.getChildAtIndex(i + 1);\n                 iArgumentType \u003d getJSType(iArgument).restrictByNotNullOrUndefined();\n                 if (!(iArgumentType instanceof ObjectType)) {\n                     compiler.report(JSError.make(NodeUtil.getSourceName(iArgument), iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE));\n                     return;\n                 }\n             }\n             boolean foundTemplateTypeOfThisParameter \u003d false;\n             int j \u003d 0;\n             for (Node jParameter : fnType.getParameters()) {\n-                JSType jParameterType \u003d getJSType(jParameter);\n+                JSType jParameterType \u003d getJSType(jParameter).restrictByNotNullOrUndefined();\n                 if (jParameterType instanceof FunctionType) {\n                     FunctionType jParameterFnType \u003d (FunctionType) jParameterType;\n                     if (jParameterFnType.getTypeOfThis().equals(iParameterType)) {\n                         foundTemplateTypeOfThisParameter \u003d true;\n                         if (j + 1 \u003e\u003d childCount) {\n                             return;\n                         }\n                         Node jArgument \u003d n.getChildAtIndex(j + 1);\n                         JSType jArgumentType \u003d getJSType(jArgument);\n                         if (jArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 jArgumentType instanceof FunctionType) {\n                             if (foundTemplateTypeArgument) {\n                                 FunctionType jArgumentFnType \u003d (FunctionType) jArgumentType;\n                                 if (jArgumentFnType.getTypeOfThis().isUnknownType()) {\n                                     jArgument.setJSType(registry.createFunctionTypeWithNewThisType(jArgumentFnType, (ObjectType) iArgumentType));\n                                 }\n                             } else {\n                                 if (NodeUtil.referencesThis(NodeUtil.getFunctionBody(jArgument))) {\n                                     compiler.report(JSError.make(NodeUtil.getSourceName(n), n, FUNCTION_LITERAL_UNDEFINED_THIS));\n                                 }\n                             }\n                         }\n                     }\n                 }\n                 j++;\n             }\n             if (!foundTemplateTypeOfThisParameter) {\n                 Node source \u003d fnType.getSource();\n                 compiler.report(JSError.make(NodeUtil.getSourceName(source), source, TEMPLATE_TYPE_OF_THIS_EXPECTED));\n                 return;\n             }\n         }\n         i++;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "8159a9f30a503650d754b7e8b30d491c4e415a72": {
      "type": "Ybodychange",
      "commitMessage": "\nWarn about undefined this argument when the function literal argument\nreferences this.\n\nR\u003dnicksantos\nDELTA\u003d82  (43 added, 5 deleted, 34 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d219268\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@427 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/14/10, 1:26 PM",
      "commitName": "8159a9f30a503650d754b7e8b30d491c4e415a72",
      "commitAuthor": "mgoodman@google.com",
      "commitDateOld": "9/13/10, 11:12 AM",
      "commitNameOld": "4c6e1039b80859f17de5f3cbcfeba61ed8ea0485",
      "commitAuthorOld": "elbaum@google.com",
      "daysBetweenCommits": 1.09,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "private void updateTypeOfThisOnClosure(Node n, FunctionType fnType) {\n    if (fnType.getTemplateTypeName() \u003d\u003d null) {\n        return;\n    }\n    int i \u003d 0;\n    int childCount \u003d n.getChildCount();\n    for (Node iParameter : fnType.getParameters()) {\n        JSType iParameterType \u003d getJSType(iParameter);\n        iParameterType \u003d iParameterType.restrictByNotNullOrUndefined();\n        if (iParameterType.isTemplateType()) {\n            JSType iArgumentType \u003d null;\n            boolean foundTemplateTypeArgument \u003d false;\n            if (i + 1 \u003c childCount) {\n                foundTemplateTypeArgument \u003d true;\n                Node iArgument \u003d n.getChildAtIndex(i + 1);\n                iArgumentType \u003d getJSType(iArgument).restrictByNotNullOrUndefined();\n                if (!(iArgumentType instanceof ObjectType)) {\n                    compiler.report(JSError.make(NodeUtil.getSourceName(iArgument), iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE));\n                    return;\n                }\n            }\n            boolean foundTemplateTypeOfThisParameter \u003d false;\n            int j \u003d 0;\n            for (Node jParameter : fnType.getParameters()) {\n                JSType jParameterType \u003d getJSType(jParameter);\n                if (jParameterType instanceof FunctionType) {\n                    FunctionType jParameterFnType \u003d (FunctionType) jParameterType;\n                    if (jParameterFnType.getTypeOfThis().equals(iParameterType)) {\n                        foundTemplateTypeOfThisParameter \u003d true;\n                        if (j + 1 \u003e\u003d childCount) {\n                            return;\n                        }\n                        Node jArgument \u003d n.getChildAtIndex(j + 1);\n                        JSType jArgumentType \u003d getJSType(jArgument);\n                        if (jArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 jArgumentType instanceof FunctionType) {\n                            if (foundTemplateTypeArgument) {\n                                FunctionType jArgumentFnType \u003d (FunctionType) jArgumentType;\n                                if (jArgumentFnType.getTypeOfThis().isUnknownType()) {\n                                    jArgument.setJSType(registry.createFunctionTypeWithNewThisType(jArgumentFnType, (ObjectType) iArgumentType));\n                                }\n                            } else {\n                                if (NodeUtil.referencesThis(NodeUtil.getFunctionBody(jArgument))) {\n                                    compiler.report(JSError.make(NodeUtil.getSourceName(n), n, FUNCTION_LITERAL_UNDEFINED_THIS));\n                                }\n                            }\n                        }\n                    }\n                }\n                j++;\n            }\n            if (!foundTemplateTypeOfThisParameter) {\n                Node source \u003d fnType.getSource();\n                compiler.report(JSError.make(NodeUtil.getSourceName(source), source, TEMPLATE_TYPE_OF_THIS_EXPECTED));\n                return;\n            }\n        }\n        i++;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 861,
      "functionName": "updateTypeOfThisOnClosure",
      "functionAnnotation": "",
      "functionDoc": "For functions with function(this: T, ...) and T as parameters, type\ninference will set the type of this on a function literal argument to the\nthe actual type of T.\n",
      "diff": "@@ -1,54 +1,59 @@\n private void updateTypeOfThisOnClosure(Node n, FunctionType fnType) {\n     if (fnType.getTemplateTypeName() \u003d\u003d null) {\n         return;\n     }\n     int i \u003d 0;\n     int childCount \u003d n.getChildCount();\n     for (Node iParameter : fnType.getParameters()) {\n         JSType iParameterType \u003d getJSType(iParameter);\n         iParameterType \u003d iParameterType.restrictByNotNullOrUndefined();\n         if (iParameterType.isTemplateType()) {\n-            if (i + 1 \u003e\u003d childCount) {\n-                return;\n-            }\n-            Node iArgument \u003d n.getChildAtIndex(i + 1);\n-            JSType iArgumentType \u003d getJSType(iArgument);\n-            if (iArgumentType !\u003d null) {\n-                iArgumentType \u003d iArgumentType.restrictByNotNullOrUndefined();\n+            JSType iArgumentType \u003d null;\n+            boolean foundTemplateTypeArgument \u003d false;\n+            if (i + 1 \u003c childCount) {\n+                foundTemplateTypeArgument \u003d true;\n+                Node iArgument \u003d n.getChildAtIndex(i + 1);\n+                iArgumentType \u003d getJSType(iArgument).restrictByNotNullOrUndefined();\n                 if (!(iArgumentType instanceof ObjectType)) {\n                     compiler.report(JSError.make(NodeUtil.getSourceName(iArgument), iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE));\n                     return;\n                 }\n-                boolean foundTemplateTypeOfThisParameter \u003d false;\n-                int j \u003d 0;\n-                for (Node jParameter : fnType.getParameters()) {\n-                    JSType jParameterType \u003d getJSType(jParameter);\n-                    if (jParameterType instanceof FunctionType) {\n-                        FunctionType jParameterFnType \u003d (FunctionType) jParameterType;\n-                        if (jParameterFnType.getTypeOfThis().equals(iParameterType)) {\n-                            foundTemplateTypeOfThisParameter \u003d true;\n-                            if (j + 1 \u003e\u003d childCount) {\n-                                return;\n-                            }\n-                            Node jArgument \u003d n.getChildAtIndex(j + 1);\n-                            JSType jArgumentType \u003d getJSType(jArgument);\n-                            if (jArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 jArgumentType instanceof FunctionType) {\n+            }\n+            boolean foundTemplateTypeOfThisParameter \u003d false;\n+            int j \u003d 0;\n+            for (Node jParameter : fnType.getParameters()) {\n+                JSType jParameterType \u003d getJSType(jParameter);\n+                if (jParameterType instanceof FunctionType) {\n+                    FunctionType jParameterFnType \u003d (FunctionType) jParameterType;\n+                    if (jParameterFnType.getTypeOfThis().equals(iParameterType)) {\n+                        foundTemplateTypeOfThisParameter \u003d true;\n+                        if (j + 1 \u003e\u003d childCount) {\n+                            return;\n+                        }\n+                        Node jArgument \u003d n.getChildAtIndex(j + 1);\n+                        JSType jArgumentType \u003d getJSType(jArgument);\n+                        if (jArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 jArgumentType instanceof FunctionType) {\n+                            if (foundTemplateTypeArgument) {\n                                 FunctionType jArgumentFnType \u003d (FunctionType) jArgumentType;\n                                 if (jArgumentFnType.getTypeOfThis().isUnknownType()) {\n                                     jArgument.setJSType(registry.createFunctionTypeWithNewThisType(jArgumentFnType, (ObjectType) iArgumentType));\n                                 }\n+                            } else {\n+                                if (NodeUtil.referencesThis(NodeUtil.getFunctionBody(jArgument))) {\n+                                    compiler.report(JSError.make(NodeUtil.getSourceName(n), n, FUNCTION_LITERAL_UNDEFINED_THIS));\n+                                }\n                             }\n                         }\n                     }\n-                    j++;\n                 }\n-                if (!foundTemplateTypeOfThisParameter) {\n-                    Node source \u003d fnType.getSource();\n-                    compiler.report(JSError.make(NodeUtil.getSourceName(source), source, TEMPLATE_TYPE_OF_THIS_EXPECTED));\n-                    return;\n-                }\n+                j++;\n+            }\n+            if (!foundTemplateTypeOfThisParameter) {\n+                Node source \u003d fnType.getSource();\n+                compiler.report(JSError.make(NodeUtil.getSourceName(source), source, TEMPLATE_TYPE_OF_THIS_EXPECTED));\n+                return;\n             }\n         }\n         i++;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3c4504a78a84e4715439cddb4028c25be2ce308f": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/07/13 17:21:32 by dhans\n\n        A few optimizations which replace getChildCount with more efficient functions for Node class.\n\n        R\u003djohnlenz\n        DELTA\u003d13  (2 added, 0 deleted, 11 changed)\n\nChange on 2010/07/13 18:08:42 by johnlenz\n\n        Add info for newly json.jar to README\n\n        R\u003dnicksantos\n        DELTA\u003d13  (13 added, 0 deleted, 0 changed)\n\nChange on 2010/07/14 08:51:02 by johnlenz\n\n        Attempt to add \"@nosideeffects\" to appropriate dom methods.\n\n        R\u003dgboyer\n        DELTA\u003d93  (91 added, 0 deleted, 2 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d48012\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@276 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/14/10, 10:45 AM",
      "commitName": "3c4504a78a84e4715439cddb4028c25be2ce308f",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "7/13/10, 3:28 PM",
      "commitNameOld": "660e7b525f76cd64d10ccc8724a1b0e0c501d1d9",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 0.8,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "private void updateTypeOfThisOnClosure(Node n, FunctionType fnType) {\n    if (fnType.getTemplateTypeName() \u003d\u003d null) {\n        return;\n    }\n    int i \u003d 0;\n    int childCount \u003d n.getChildCount();\n    for (Node iParameter : fnType.getParameters()) {\n        JSType iParameterType \u003d getJSType(iParameter);\n        iParameterType \u003d iParameterType.restrictByNotNullOrUndefined();\n        if (iParameterType.isTemplateType()) {\n            if (i + 1 \u003e\u003d childCount) {\n                return;\n            }\n            Node iArgument \u003d n.getChildAtIndex(i + 1);\n            JSType iArgumentType \u003d getJSType(iArgument);\n            if (iArgumentType !\u003d null) {\n                iArgumentType \u003d iArgumentType.restrictByNotNullOrUndefined();\n                if (!(iArgumentType instanceof ObjectType)) {\n                    compiler.report(JSError.make(NodeUtil.getSourceName(iArgument), iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE));\n                    return;\n                }\n                boolean foundTemplateTypeOfThisParameter \u003d false;\n                int j \u003d 0;\n                for (Node jParameter : fnType.getParameters()) {\n                    JSType jParameterType \u003d getJSType(jParameter);\n                    if (jParameterType instanceof FunctionType) {\n                        FunctionType jParameterFnType \u003d (FunctionType) jParameterType;\n                        if (jParameterFnType.getTypeOfThis().equals(iParameterType)) {\n                            foundTemplateTypeOfThisParameter \u003d true;\n                            if (j + 1 \u003e\u003d childCount) {\n                                return;\n                            }\n                            Node jArgument \u003d n.getChildAtIndex(j + 1);\n                            JSType jArgumentType \u003d getJSType(jArgument);\n                            if (jArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 jArgumentType instanceof FunctionType) {\n                                FunctionType jArgumentFnType \u003d (FunctionType) jArgumentType;\n                                if (jArgumentFnType.getTypeOfThis().isUnknownType()) {\n                                    jArgument.setJSType(registry.createFunctionTypeWithNewThisType(jArgumentFnType, (ObjectType) iArgumentType));\n                                }\n                            }\n                        }\n                    }\n                    j++;\n                }\n                if (!foundTemplateTypeOfThisParameter) {\n                    Node source \u003d fnType.getSource();\n                    compiler.report(JSError.make(NodeUtil.getSourceName(source), source, TEMPLATE_TYPE_OF_THIS_EXPECTED));\n                    return;\n                }\n            }\n        }\n        i++;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 874,
      "functionName": "updateTypeOfThisOnClosure",
      "functionAnnotation": "",
      "functionDoc": "For functions with function(this: T, ...) and T as parameters, type\ninference will set the type of this on a function literal argument to the\nthe actual type of T.\n",
      "diff": "@@ -1,53 +1,54 @@\n private void updateTypeOfThisOnClosure(Node n, FunctionType fnType) {\n     if (fnType.getTemplateTypeName() \u003d\u003d null) {\n         return;\n     }\n     int i \u003d 0;\n+    int childCount \u003d n.getChildCount();\n     for (Node iParameter : fnType.getParameters()) {\n         JSType iParameterType \u003d getJSType(iParameter);\n         iParameterType \u003d iParameterType.restrictByNotNullOrUndefined();\n         if (iParameterType.isTemplateType()) {\n-            if (i + 1 \u003e\u003d n.getChildCount()) {\n+            if (i + 1 \u003e\u003d childCount) {\n                 return;\n             }\n             Node iArgument \u003d n.getChildAtIndex(i + 1);\n             JSType iArgumentType \u003d getJSType(iArgument);\n             if (iArgumentType !\u003d null) {\n                 iArgumentType \u003d iArgumentType.restrictByNotNullOrUndefined();\n                 if (!(iArgumentType instanceof ObjectType)) {\n                     compiler.report(JSError.make(NodeUtil.getSourceName(iArgument), iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE));\n                     return;\n                 }\n                 boolean foundTemplateTypeOfThisParameter \u003d false;\n                 int j \u003d 0;\n                 for (Node jParameter : fnType.getParameters()) {\n                     JSType jParameterType \u003d getJSType(jParameter);\n                     if (jParameterType instanceof FunctionType) {\n                         FunctionType jParameterFnType \u003d (FunctionType) jParameterType;\n                         if (jParameterFnType.getTypeOfThis().equals(iParameterType)) {\n                             foundTemplateTypeOfThisParameter \u003d true;\n-                            if (j + 1 \u003e\u003d n.getChildCount()) {\n+                            if (j + 1 \u003e\u003d childCount) {\n                                 return;\n                             }\n                             Node jArgument \u003d n.getChildAtIndex(j + 1);\n                             JSType jArgumentType \u003d getJSType(jArgument);\n                             if (jArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 jArgumentType instanceof FunctionType) {\n                                 FunctionType jArgumentFnType \u003d (FunctionType) jArgumentType;\n                                 if (jArgumentFnType.getTypeOfThis().isUnknownType()) {\n                                     jArgument.setJSType(registry.createFunctionTypeWithNewThisType(jArgumentFnType, (ObjectType) iArgumentType));\n                                 }\n                             }\n                         }\n                     }\n                     j++;\n                 }\n                 if (!foundTemplateTypeOfThisParameter) {\n                     Node source \u003d fnType.getSource();\n                     compiler.report(JSError.make(NodeUtil.getSourceName(source), source, TEMPLATE_TYPE_OF_THIS_EXPECTED));\n                     return;\n                 }\n             }\n         }\n         i++;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ebb59a97610015bc41bda7f458dd1428a3a3e335": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/04/22 by nick\n\n        fix the extern definition of Window.prototype.stop\n\n        R\u003dsiggy\n        DELTA\u003d1  (0 added, 0 deleted, 1 changed)\n\nChange on 2010/04/22 by john\n\n        \"Anonymous function\" is a confusing term for functions with names.\n        Properly we are usually distinguishing between functions statements\n        (function declarations) and function expressions.\n\n        R\u003dalan\n        DELTA\u003d172  (7 added, 14 deleted, 151 changed)\n\nChange on 2010/04/22 by john\n\n        Standardize the definition of setTimeout/setInterval.\n        Fix for Issue 137\n\n        R\u003dnick\n        DELTA\u003d6  (2 added, 2 deleted, 2 changed)\n\nChange on 2010/04/22 by mark\n\n        Various delegate fixes.\n\n        Give the delegate proxy a name unique from the delegate base so that\n        InstanceObjectType#equals distinguishes them. This is necessary for\n        AmbiguateProperties to work.\n\n        Fix the prototype of the delegate proxy. This makes\n        DisambiguateProperties continue to work.\n\n        Add superclass methods of the delegate base to the delegate proxy.\n\n\n        R\u003dandrew,nada\n        DELTA\u003d526  (383 added, 104 deleted, 39 changed)\n\nChange on 2010/04/23 by john\n\n        Allow variable inlining of function statements. For simplicity  limited to functions defined before first use.\n\n        R\u003dnick\n        DELTA\u003d79  (49 added, 3 deleted, 27 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dhakjvx\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@197 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/23/10, 11:31 AM",
      "commitName": "ebb59a97610015bc41bda7f458dd1428a3a3e335",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/14/10, 4:53 PM",
      "commitNameOld": "43859717972907dd1ecebd8dca6e05036386e28b",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 8.78,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "actualSource": "private void updateTypeOfThisOnClosure(Node n, FunctionType fnType) {\n    if (fnType.getTemplateTypeName() \u003d\u003d null) {\n        return;\n    }\n    int i \u003d 0;\n    for (Node iParameter : fnType.getParameters()) {\n        JSType iParameterType \u003d getJSType(iParameter);\n        iParameterType \u003d iParameterType.restrictByNotNullOrUndefined();\n        if (iParameterType.isTemplateType()) {\n            if (i + 1 \u003e\u003d n.getChildCount()) {\n                return;\n            }\n            Node iArgument \u003d n.getChildAtIndex(i + 1);\n            JSType iArgumentType \u003d getJSType(iArgument);\n            if (iArgumentType !\u003d null) {\n                iArgumentType \u003d iArgumentType.restrictByNotNullOrUndefined();\n                if (!(iArgumentType instanceof ObjectType)) {\n                    compiler.report(JSError.make(NodeUtil.getSourceName(iArgument), iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE));\n                    return;\n                }\n                boolean foundTemplateTypeOfThisParameter \u003d false;\n                int j \u003d 0;\n                for (Node jParameter : fnType.getParameters()) {\n                    JSType jParameterType \u003d getJSType(jParameter);\n                    if (jParameterType instanceof FunctionType) {\n                        FunctionType jParameterFnType \u003d (FunctionType) jParameterType;\n                        if (jParameterFnType.getTypeOfThis().equals(iParameterType)) {\n                            foundTemplateTypeOfThisParameter \u003d true;\n                            if (j + 1 \u003e\u003d n.getChildCount()) {\n                                return;\n                            }\n                            Node jArgument \u003d n.getChildAtIndex(j + 1);\n                            JSType jArgumentType \u003d getJSType(jArgument);\n                            if (jArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 jArgumentType instanceof FunctionType) {\n                                FunctionType jArgumentFnType \u003d (FunctionType) jArgumentType;\n                                if (jArgumentFnType.getTypeOfThis().isUnknownType()) {\n                                    jArgument.setJSType(registry.createFunctionTypeWithNewThisType(jArgumentFnType, (ObjectType) iArgumentType));\n                                }\n                            }\n                        }\n                    }\n                    j++;\n                }\n                if (!foundTemplateTypeOfThisParameter) {\n                    Node source \u003d fnType.getSource();\n                    compiler.report(JSError.make(NodeUtil.getSourceName(source), source, TEMPLATE_TYPE_OF_THIS_EXPECTED));\n                    return;\n                }\n            }\n        }\n        i++;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 820,
      "functionName": "updateTypeOfThisOnClosure",
      "functionAnnotation": "",
      "functionDoc": "For functions with function(this: T, ...) and T as parameters, type\ninference will set the type of this on a function literal argument to the\nthe actual type of T.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "43859717972907dd1ecebd8dca6e05036386e28b": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/04/14 by john\n\n        Stop creating specialized Node types for FUNCTION and SCRIPT as the added functionality isn\u0027t used anywhere.\n\n        Also correct some formatting issue with Node (as it won\u0027t need to be merged with anything else anymore).\n\n        R\u003dsteve,robert\n        DELTA\u003d3969  (1913 added, 1925 deleted, 131 changed)\n\nChange on 2010/04/14 by john\n\n        Fix source information in MinimizeExitPoints.\n\n        R\u003drobert\n        DELTA\u003d10  (5 added, 2 deleted, 3 changed)\n\nChange on 2010/04/14 by john\n\n        Maintain source information.\n\n        R\u003dantonio\n        DELTA\u003d17  (11 added, 0 deleted, 6 changed)\n\nChange on 2010/04/14 by john\n\n        Maintain source information through FoldConstants.\n\n        R\u003drobert\n        DELTA\u003d42  (22 added, 0 deleted, 20 changed)\n\nChange on 2010/04/14 by nick\n\n        lock down function type construction\n\n        R\u003djohn\n        DELTA\u003d111  (83 added, 9 deleted, 19 changed)\n\nChange on 2010/04/14 by john\n\n        Fix source info in CollapseProperties.\n\n        R\u003dnick\n        DELTA\u003d17  (8 added, 3 deleted, 6 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dmbevwz\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@184 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/14/10, 4:53 PM",
      "commitName": "43859717972907dd1ecebd8dca6e05036386e28b",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/14/10, 9:15 AM",
      "commitNameOld": "c764a46abf211d4677fadc33f7d466e5b14fa088",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 0.32,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void updateTypeOfThisOnClosure(Node n, FunctionType fnType) {\n    if (fnType.getTemplateTypeName() \u003d\u003d null) {\n        return;\n    }\n    int i \u003d 0;\n    for (Node iParameter : fnType.getParameters()) {\n        JSType iParameterType \u003d getJSType(iParameter);\n        iParameterType \u003d iParameterType.restrictByNotNullOrUndefined();\n        if (iParameterType.isTemplateType()) {\n            if (i + 1 \u003e\u003d n.getChildCount()) {\n                return;\n            }\n            Node iArgument \u003d n.getChildAtIndex(i + 1);\n            JSType iArgumentType \u003d getJSType(iArgument);\n            if (iArgumentType !\u003d null) {\n                iArgumentType \u003d iArgumentType.restrictByNotNullOrUndefined();\n                if (!(iArgumentType instanceof ObjectType)) {\n                    compiler.report(JSError.make(NodeUtil.getSourceName(iArgument), iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE));\n                    return;\n                }\n                boolean foundTemplateTypeOfThisParameter \u003d false;\n                int j \u003d 0;\n                for (Node jParameter : fnType.getParameters()) {\n                    JSType jParameterType \u003d getJSType(jParameter);\n                    if (jParameterType instanceof FunctionType) {\n                        FunctionType jParameterFnType \u003d (FunctionType) jParameterType;\n                        if (jParameterFnType.getTypeOfThis().equals(iParameterType)) {\n                            foundTemplateTypeOfThisParameter \u003d true;\n                            if (j + 1 \u003e\u003d n.getChildCount()) {\n                                return;\n                            }\n                            Node jArgument \u003d n.getChildAtIndex(j + 1);\n                            JSType jArgumentType \u003d getJSType(jArgument);\n                            if (jArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 jArgumentType instanceof FunctionType) {\n                                FunctionType jArgumentFnType \u003d (FunctionType) jArgumentType;\n                                if (jArgumentFnType.getTypeOfThis().isUnknownType()) {\n                                    jArgument.setJSType(registry.createFunctionTypeWithNewThisType(jArgumentFnType, (ObjectType) iArgumentType));\n                                }\n                            }\n                        }\n                    }\n                    j++;\n                }\n                if (!foundTemplateTypeOfThisParameter) {\n                    Node source \u003d fnType.getSource();\n                    compiler.report(JSError.make(NodeUtil.getSourceName(source), source, TEMPLATE_TYPE_OF_THIS_EXPECTED));\n                    return;\n                }\n            }\n        }\n        i++;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 820,
      "functionName": "updateTypeOfThisOnClosure",
      "functionAnnotation": "",
      "functionDoc": "For functions with function(this: T, ...) and T as parameters, type\ninference will set the type of this on a function literal argument to the\nthe actual type of T.\n",
      "diff": "@@ -1,53 +1,53 @@\n private void updateTypeOfThisOnClosure(Node n, FunctionType fnType) {\n     if (fnType.getTemplateTypeName() \u003d\u003d null) {\n         return;\n     }\n     int i \u003d 0;\n     for (Node iParameter : fnType.getParameters()) {\n         JSType iParameterType \u003d getJSType(iParameter);\n         iParameterType \u003d iParameterType.restrictByNotNullOrUndefined();\n         if (iParameterType.isTemplateType()) {\n             if (i + 1 \u003e\u003d n.getChildCount()) {\n                 return;\n             }\n             Node iArgument \u003d n.getChildAtIndex(i + 1);\n             JSType iArgumentType \u003d getJSType(iArgument);\n             if (iArgumentType !\u003d null) {\n                 iArgumentType \u003d iArgumentType.restrictByNotNullOrUndefined();\n                 if (!(iArgumentType instanceof ObjectType)) {\n                     compiler.report(JSError.make(NodeUtil.getSourceName(iArgument), iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE));\n                     return;\n                 }\n                 boolean foundTemplateTypeOfThisParameter \u003d false;\n                 int j \u003d 0;\n                 for (Node jParameter : fnType.getParameters()) {\n                     JSType jParameterType \u003d getJSType(jParameter);\n                     if (jParameterType instanceof FunctionType) {\n                         FunctionType jParameterFnType \u003d (FunctionType) jParameterType;\n                         if (jParameterFnType.getTypeOfThis().equals(iParameterType)) {\n                             foundTemplateTypeOfThisParameter \u003d true;\n                             if (j + 1 \u003e\u003d n.getChildCount()) {\n                                 return;\n                             }\n                             Node jArgument \u003d n.getChildAtIndex(j + 1);\n                             JSType jArgumentType \u003d getJSType(jArgument);\n                             if (jArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 jArgumentType instanceof FunctionType) {\n                                 FunctionType jArgumentFnType \u003d (FunctionType) jArgumentType;\n                                 if (jArgumentFnType.getTypeOfThis().isUnknownType()) {\n-                                    jArgument.setJSType(new FunctionType(registry, jArgumentFnType.getReferenceName(), jArgumentFnType.getSource(), jArgumentFnType.getParametersNode(), jArgumentFnType.getReturnType(), (ObjectType) iArgumentType));\n+                                    jArgument.setJSType(registry.createFunctionTypeWithNewThisType(jArgumentFnType, (ObjectType) iArgumentType));\n                                 }\n                             }\n                         }\n                     }\n                     j++;\n                 }\n                 if (!foundTemplateTypeOfThisParameter) {\n                     Node source \u003d fnType.getSource();\n                     compiler.report(JSError.make(NodeUtil.getSourceName(source), source, TEMPLATE_TYPE_OF_THIS_EXPECTED));\n                     return;\n                 }\n             }\n         }\n         i++;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3bee5d740c96572faea4b9fb8b632e0e07b13cbb": {
      "type": "Ybodychange",
      "commitMessage": "Add a mechanism for inlining local vars, and turn it on by default.\nWarnings for \"ambiguous\" function definitions.\nRefactoring and renaming of some method names.\nUse \"\u003d\" optionality annotation in externs.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@15 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/25/09, 6:53 AM",
      "commitName": "3bee5d740c96572faea4b9fb8b632e0e07b13cbb",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/3/09, 3:51 PM",
      "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 21.63,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "actualSource": "private void updateTypeOfThisOnClosure(Node n, FunctionType fnType) {\n    if (fnType.getTemplateTypeName() \u003d\u003d null) {\n        return;\n    }\n    int i \u003d 0;\n    for (Node iParameter : fnType.getParameters()) {\n        JSType iParameterType \u003d getJSType(iParameter);\n        iParameterType \u003d iParameterType.restrictByNotNullOrUndefined();\n        if (iParameterType.isTemplateType()) {\n            if (i + 1 \u003e\u003d n.getChildCount()) {\n                return;\n            }\n            Node iArgument \u003d n.getChildAtIndex(i + 1);\n            JSType iArgumentType \u003d getJSType(iArgument);\n            if (iArgumentType !\u003d null) {\n                iArgumentType \u003d iArgumentType.restrictByNotNullOrUndefined();\n                if (!(iArgumentType instanceof ObjectType)) {\n                    compiler.report(JSError.make(NodeUtil.getSourceName(iArgument), iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE));\n                    return;\n                }\n                boolean foundTemplateTypeOfThisParameter \u003d false;\n                int j \u003d 0;\n                for (Node jParameter : fnType.getParameters()) {\n                    JSType jParameterType \u003d getJSType(jParameter);\n                    if (jParameterType instanceof FunctionType) {\n                        FunctionType jParameterFnType \u003d (FunctionType) jParameterType;\n                        if (jParameterFnType.getTypeOfThis().equals(iParameterType)) {\n                            foundTemplateTypeOfThisParameter \u003d true;\n                            if (j + 1 \u003e\u003d n.getChildCount()) {\n                                return;\n                            }\n                            Node jArgument \u003d n.getChildAtIndex(j + 1);\n                            JSType jArgumentType \u003d getJSType(jArgument);\n                            if (jArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 jArgumentType instanceof FunctionType) {\n                                FunctionType jArgumentFnType \u003d (FunctionType) jArgumentType;\n                                if (jArgumentFnType.getTypeOfThis().isUnknownType()) {\n                                    jArgument.setJSType(new FunctionType(registry, jArgumentFnType.getReferenceName(), jArgumentFnType.getSource(), jArgumentFnType.getParametersNode(), jArgumentFnType.getReturnType(), (ObjectType) iArgumentType));\n                                }\n                            }\n                        }\n                    }\n                    j++;\n                }\n                if (!foundTemplateTypeOfThisParameter) {\n                    Node source \u003d fnType.getSource();\n                    compiler.report(JSError.make(NodeUtil.getSourceName(source), source, TEMPLATE_TYPE_OF_THIS_EXPECTED));\n                    return;\n                }\n            }\n        }\n        i++;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 764,
      "functionName": "updateTypeOfThisOnClosure",
      "functionAnnotation": "",
      "functionDoc": "For functions with function(this: T, ...) and T as parameters, type\ninference will set the type of this on a function literal argument to the\nthe actual type of T.\n",
      "diff": "@@ -1,53 +1,53 @@\n private void updateTypeOfThisOnClosure(Node n, FunctionType fnType) {\n     if (fnType.getTemplateTypeName() \u003d\u003d null) {\n         return;\n     }\n     int i \u003d 0;\n     for (Node iParameter : fnType.getParameters()) {\n         JSType iParameterType \u003d getJSType(iParameter);\n         iParameterType \u003d iParameterType.restrictByNotNullOrUndefined();\n         if (iParameterType.isTemplateType()) {\n             if (i + 1 \u003e\u003d n.getChildCount()) {\n                 return;\n             }\n             Node iArgument \u003d n.getChildAtIndex(i + 1);\n             JSType iArgumentType \u003d getJSType(iArgument);\n             if (iArgumentType !\u003d null) {\n                 iArgumentType \u003d iArgumentType.restrictByNotNullOrUndefined();\n                 if (!(iArgumentType instanceof ObjectType)) {\n                     compiler.report(JSError.make(NodeUtil.getSourceName(iArgument), iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE));\n                     return;\n                 }\n                 boolean foundTemplateTypeOfThisParameter \u003d false;\n                 int j \u003d 0;\n                 for (Node jParameter : fnType.getParameters()) {\n                     JSType jParameterType \u003d getJSType(jParameter);\n                     if (jParameterType instanceof FunctionType) {\n                         FunctionType jParameterFnType \u003d (FunctionType) jParameterType;\n                         if (jParameterFnType.getTypeOfThis().equals(iParameterType)) {\n                             foundTemplateTypeOfThisParameter \u003d true;\n                             if (j + 1 \u003e\u003d n.getChildCount()) {\n                                 return;\n                             }\n                             Node jArgument \u003d n.getChildAtIndex(j + 1);\n                             JSType jArgumentType \u003d getJSType(jArgument);\n                             if (jArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 jArgumentType instanceof FunctionType) {\n                                 FunctionType jArgumentFnType \u003d (FunctionType) jArgumentType;\n                                 if (jArgumentFnType.getTypeOfThis().isUnknownType()) {\n-                                    jArgument.setJSType(new FunctionType(registry, jArgumentFnType.getName(), jArgumentFnType.getSource(), jArgumentFnType.getParametersNode(), jArgumentFnType.getReturnType(), (ObjectType) iArgumentType));\n+                                    jArgument.setJSType(new FunctionType(registry, jArgumentFnType.getReferenceName(), jArgumentFnType.getSource(), jArgumentFnType.getParametersNode(), jArgumentFnType.getReturnType(), (ObjectType) iArgumentType));\n                                 }\n                             }\n                         }\n                     }\n                     j++;\n                 }\n                 if (!foundTemplateTypeOfThisParameter) {\n                     Node source \u003d fnType.getSource();\n                     compiler.report(JSError.make(NodeUtil.getSourceName(source), source, TEMPLATE_TYPE_OF_THIS_EXPECTED));\n                     return;\n                 }\n             }\n         }\n         i++;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,53 @@\n+private void updateTypeOfThisOnClosure(Node n, FunctionType fnType) {\n+    if (fnType.getTemplateTypeName() \u003d\u003d null) {\n+        return;\n+    }\n+    int i \u003d 0;\n+    for (Node iParameter : fnType.getParameters()) {\n+        JSType iParameterType \u003d getJSType(iParameter);\n+        iParameterType \u003d iParameterType.restrictByNotNullOrUndefined();\n+        if (iParameterType.isTemplateType()) {\n+            if (i + 1 \u003e\u003d n.getChildCount()) {\n+                return;\n+            }\n+            Node iArgument \u003d n.getChildAtIndex(i + 1);\n+            JSType iArgumentType \u003d getJSType(iArgument);\n+            if (iArgumentType !\u003d null) {\n+                iArgumentType \u003d iArgumentType.restrictByNotNullOrUndefined();\n+                if (!(iArgumentType instanceof ObjectType)) {\n+                    compiler.report(JSError.make(NodeUtil.getSourceName(iArgument), iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE));\n+                    return;\n+                }\n+                boolean foundTemplateTypeOfThisParameter \u003d false;\n+                int j \u003d 0;\n+                for (Node jParameter : fnType.getParameters()) {\n+                    JSType jParameterType \u003d getJSType(jParameter);\n+                    if (jParameterType instanceof FunctionType) {\n+                        FunctionType jParameterFnType \u003d (FunctionType) jParameterType;\n+                        if (jParameterFnType.getTypeOfThis().equals(iParameterType)) {\n+                            foundTemplateTypeOfThisParameter \u003d true;\n+                            if (j + 1 \u003e\u003d n.getChildCount()) {\n+                                return;\n+                            }\n+                            Node jArgument \u003d n.getChildAtIndex(j + 1);\n+                            JSType jArgumentType \u003d getJSType(jArgument);\n+                            if (jArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 jArgumentType instanceof FunctionType) {\n+                                FunctionType jArgumentFnType \u003d (FunctionType) jArgumentType;\n+                                if (jArgumentFnType.getTypeOfThis().isUnknownType()) {\n+                                    jArgument.setJSType(new FunctionType(registry, jArgumentFnType.getName(), jArgumentFnType.getSource(), jArgumentFnType.getParametersNode(), jArgumentFnType.getReturnType(), (ObjectType) iArgumentType));\n+                                }\n+                            }\n+                        }\n+                    }\n+                    j++;\n+                }\n+                if (!foundTemplateTypeOfThisParameter) {\n+                    Node source \u003d fnType.getSource();\n+                    compiler.report(JSError.make(NodeUtil.getSourceName(source), source, TEMPLATE_TYPE_OF_THIS_EXPECTED));\n+                    return;\n+                }\n+            }\n+        }\n+        i++;\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void updateTypeOfThisOnClosure(Node n, FunctionType fnType) {\n    if (fnType.getTemplateTypeName() \u003d\u003d null) {\n        return;\n    }\n    int i \u003d 0;\n    for (Node iParameter : fnType.getParameters()) {\n        JSType iParameterType \u003d getJSType(iParameter);\n        iParameterType \u003d iParameterType.restrictByNotNullOrUndefined();\n        if (iParameterType.isTemplateType()) {\n            if (i + 1 \u003e\u003d n.getChildCount()) {\n                return;\n            }\n            Node iArgument \u003d n.getChildAtIndex(i + 1);\n            JSType iArgumentType \u003d getJSType(iArgument);\n            if (iArgumentType !\u003d null) {\n                iArgumentType \u003d iArgumentType.restrictByNotNullOrUndefined();\n                if (!(iArgumentType instanceof ObjectType)) {\n                    compiler.report(JSError.make(NodeUtil.getSourceName(iArgument), iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE));\n                    return;\n                }\n                boolean foundTemplateTypeOfThisParameter \u003d false;\n                int j \u003d 0;\n                for (Node jParameter : fnType.getParameters()) {\n                    JSType jParameterType \u003d getJSType(jParameter);\n                    if (jParameterType instanceof FunctionType) {\n                        FunctionType jParameterFnType \u003d (FunctionType) jParameterType;\n                        if (jParameterFnType.getTypeOfThis().equals(iParameterType)) {\n                            foundTemplateTypeOfThisParameter \u003d true;\n                            if (j + 1 \u003e\u003d n.getChildCount()) {\n                                return;\n                            }\n                            Node jArgument \u003d n.getChildAtIndex(j + 1);\n                            JSType jArgumentType \u003d getJSType(jArgument);\n                            if (jArgument.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 jArgumentType instanceof FunctionType) {\n                                FunctionType jArgumentFnType \u003d (FunctionType) jArgumentType;\n                                if (jArgumentFnType.getTypeOfThis().isUnknownType()) {\n                                    jArgument.setJSType(new FunctionType(registry, jArgumentFnType.getName(), jArgumentFnType.getSource(), jArgumentFnType.getParametersNode(), jArgumentFnType.getReturnType(), (ObjectType) iArgumentType));\n                                }\n                            }\n                        }\n                    }\n                    j++;\n                }\n                if (!foundTemplateTypeOfThisParameter) {\n                    Node source \u003d fnType.getSource();\n                    compiler.report(JSError.make(NodeUtil.getSourceName(source), source, TEMPLATE_TYPE_OF_THIS_EXPECTED));\n                    return;\n                }\n            }\n        }\n        i++;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 765,
      "functionName": "updateTypeOfThisOnClosure",
      "functionAnnotation": "",
      "functionDoc": "For functions with function(this: T, ...) and T as parameters, type\ninference will set the type of this on a function literal argument to the\nthe actual type of T.\n"
    }
  }
}