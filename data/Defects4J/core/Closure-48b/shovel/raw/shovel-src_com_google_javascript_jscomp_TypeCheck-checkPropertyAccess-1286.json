{
  "origin": "codeshovel",
  "repositoryName": "Closure-48b",
  "repositoryPath": "/tmp/Closure-48b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TypeCheck.java",
  "functionName": "checkPropertyAccess",
  "functionId": "checkPropertyAccess___childType-JSType__propName-String__t-NodeTraversal__n-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/TypeCheck.java",
  "functionAnnotation": "",
  "functionDoc": "Emit a warning if we can prove that a property cannot possibly be\ndefined on an object. Note the difference between JS and a strictly\nstatically typed language: we\u0027re checking if the property\n*cannot be defined*, whereas a java compiler would check if the\nproperty *can be undefined*.\n",
  "functionStartLine": 1286,
  "functionEndLine": 1313,
  "numCommitsSeen": 63,
  "timeTaken": 4833,
  "changeHistory": [
    "a69d5521ba50a1952682ab53bb0f1a1288314e8a",
    "0895c28861ee4a1969acc858f1a703ab11ddc64c",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "a69d5521ba50a1952682ab53bb0f1a1288314e8a": "Ymultichange(Ybodychange,Ydocchange)",
    "0895c28861ee4a1969acc858f1a703ab11ddc64c": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a69d5521ba50a1952682ab53bb0f1a1288314e8a": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "\nbetter property checks on union types\n\nR\u003djohnlenz\nDELTA\u003d90  (68 added, 2 deleted, 20 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3236\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1427 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/12/11, 7:22 AM",
      "commitName": "a69d5521ba50a1952682ab53bb0f1a1288314e8a",
      "commitAuthor": "nicksantos@google.com",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "\nbetter property checks on union types\n\nR\u003djohnlenz\nDELTA\u003d90  (68 added, 2 deleted, 20 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3236\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1427 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "9/12/11, 7:22 AM",
          "commitName": "a69d5521ba50a1952682ab53bb0f1a1288314e8a",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "8/25/11, 8:10 AM",
          "commitNameOld": "5fa514bee8f76534232e4653eaf16cd416e08012",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 17.97,
          "commitsBetweenForRepo": 38,
          "commitsBetweenForFile": 1,
          "actualSource": "private void checkPropertyAccess(JSType childType, String propName, NodeTraversal t, Node n) {\n    JSType propType \u003d getJSType(n);\n    if (propType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE))) {\n        childType \u003d childType.autobox();\n        ObjectType objectType \u003d ObjectType.cast(childType);\n        if (objectType !\u003d null) {\n            if (!objectType.hasProperty(propName) || objectType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE))) {\n                if (objectType instanceof EnumType) {\n                    report(t, n, INEXISTENT_ENUM_ELEMENT, propName);\n                } else {\n                    checkPropertyAccessHelper(objectType, propName, t, n);\n                }\n            }\n        } else {\n            checkPropertyAccessHelper(childType, propName, t, n);\n        }\n    }\n}",
          "path": "src/com/google/javascript/jscomp/TypeCheck.java",
          "functionStartLine": 1293,
          "functionName": "checkPropertyAccess",
          "functionAnnotation": "",
          "functionDoc": "Emit a warning if we can prove that a property cannot possibly be\ndefined on an object. Note the difference between JS and a strictly\nstatically typed language: we\u0027re checking if the property\n*cannot be defined*, whereas a java compiler would check if the\nproperty *can be undefined*.\n",
          "diff": "@@ -1,16 +1,18 @@\n private void checkPropertyAccess(JSType childType, String propName, NodeTraversal t, Node n) {\n-    ObjectType objectType \u003d childType.dereference();\n-    if (objectType !\u003d null) {\n-        JSType propType \u003d getJSType(n);\n-        if ((!objectType.hasProperty(propName) || objectType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE))) \u0026\u0026 propType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE))) {\n-            if (objectType instanceof EnumType) {\n-                report(t, n, INEXISTENT_ENUM_ELEMENT, propName);\n-            } else if (!objectType.isEmptyType() \u0026\u0026 reportMissingProperties \u0026\u0026 !isPropertyTest(n)) {\n-                if (!typeRegistry.canPropertyBeDefined(objectType, propName)) {\n-                    report(t, n, INEXISTENT_PROPERTY, propName, validator.getReadableJSTypeName(n.getFirstChild(), true));\n+    JSType propType \u003d getJSType(n);\n+    if (propType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE))) {\n+        childType \u003d childType.autobox();\n+        ObjectType objectType \u003d ObjectType.cast(childType);\n+        if (objectType !\u003d null) {\n+            if (!objectType.hasProperty(propName) || objectType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE))) {\n+                if (objectType instanceof EnumType) {\n+                    report(t, n, INEXISTENT_ENUM_ELEMENT, propName);\n+                } else {\n+                    checkPropertyAccessHelper(objectType, propName, t, n);\n                 }\n             }\n+        } else {\n+            checkPropertyAccessHelper(childType, propName, t, n);\n         }\n-    } else {\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "\nbetter property checks on union types\n\nR\u003djohnlenz\nDELTA\u003d90  (68 added, 2 deleted, 20 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3236\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1427 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "9/12/11, 7:22 AM",
          "commitName": "a69d5521ba50a1952682ab53bb0f1a1288314e8a",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "8/25/11, 8:10 AM",
          "commitNameOld": "5fa514bee8f76534232e4653eaf16cd416e08012",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 17.97,
          "commitsBetweenForRepo": 38,
          "commitsBetweenForFile": 1,
          "actualSource": "private void checkPropertyAccess(JSType childType, String propName, NodeTraversal t, Node n) {\n    JSType propType \u003d getJSType(n);\n    if (propType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE))) {\n        childType \u003d childType.autobox();\n        ObjectType objectType \u003d ObjectType.cast(childType);\n        if (objectType !\u003d null) {\n            if (!objectType.hasProperty(propName) || objectType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE))) {\n                if (objectType instanceof EnumType) {\n                    report(t, n, INEXISTENT_ENUM_ELEMENT, propName);\n                } else {\n                    checkPropertyAccessHelper(objectType, propName, t, n);\n                }\n            }\n        } else {\n            checkPropertyAccessHelper(childType, propName, t, n);\n        }\n    }\n}",
          "path": "src/com/google/javascript/jscomp/TypeCheck.java",
          "functionStartLine": 1293,
          "functionName": "checkPropertyAccess",
          "functionAnnotation": "",
          "functionDoc": "Emit a warning if we can prove that a property cannot possibly be\ndefined on an object. Note the difference between JS and a strictly\nstatically typed language: we\u0027re checking if the property\n*cannot be defined*, whereas a java compiler would check if the\nproperty *can be undefined*.\n",
          "diff": "@@ -1,16 +1,18 @@\n private void checkPropertyAccess(JSType childType, String propName, NodeTraversal t, Node n) {\n-    ObjectType objectType \u003d childType.dereference();\n-    if (objectType !\u003d null) {\n-        JSType propType \u003d getJSType(n);\n-        if ((!objectType.hasProperty(propName) || objectType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE))) \u0026\u0026 propType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE))) {\n-            if (objectType instanceof EnumType) {\n-                report(t, n, INEXISTENT_ENUM_ELEMENT, propName);\n-            } else if (!objectType.isEmptyType() \u0026\u0026 reportMissingProperties \u0026\u0026 !isPropertyTest(n)) {\n-                if (!typeRegistry.canPropertyBeDefined(objectType, propName)) {\n-                    report(t, n, INEXISTENT_PROPERTY, propName, validator.getReadableJSTypeName(n.getFirstChild(), true));\n+    JSType propType \u003d getJSType(n);\n+    if (propType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE))) {\n+        childType \u003d childType.autobox();\n+        ObjectType objectType \u003d ObjectType.cast(childType);\n+        if (objectType !\u003d null) {\n+            if (!objectType.hasProperty(propName) || objectType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE))) {\n+                if (objectType instanceof EnumType) {\n+                    report(t, n, INEXISTENT_ENUM_ELEMENT, propName);\n+                } else {\n+                    checkPropertyAccessHelper(objectType, propName, t, n);\n                 }\n             }\n+        } else {\n+            checkPropertyAccessHelper(childType, propName, t, n);\n         }\n-    } else {\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Make sure that the access of this property is ok.\n",
            "newValue": "Emit a warning if we can prove that a property cannot possibly be\ndefined on an object. Note the difference between JS and a strictly\nstatically typed language: we\u0027re checking if the property\n*cannot be defined*, whereas a java compiler would check if the\nproperty *can be undefined*.\n"
          }
        }
      ]
    },
    "0895c28861ee4a1969acc858f1a703ab11ddc64c": {
      "type": "Ybodychange",
      "commitMessage": "\n\nChange on 2010/06/16 by johnlenz\n\n        Remove unused member variable.\n\n        R\u003dacleung\n        DELTA\u003d17  (0 added, 12 deleted, 5 changed)\n\nChange on 2010/06/16 by acleung\n\n        Make @notypecheck behaves like it is doing typechecking except for reporting errors.\n\n        R\u003djohnlenz\n        DELTA\u003d144  (89 added, 17 deleted, 38 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d28012\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@245 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/17/10, 10:16 AM",
      "commitName": "0895c28861ee4a1969acc858f1a703ab11ddc64c",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "5/3/10, 7:03 AM",
      "commitNameOld": "9147da9979fb00599efd700fa5e0cccfa93d25a5",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 45.13,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "actualSource": "private void checkPropertyAccess(JSType childType, String propName, NodeTraversal t, Node n) {\n    ObjectType objectType \u003d childType.dereference();\n    if (objectType !\u003d null) {\n        JSType propType \u003d getJSType(n);\n        if ((!objectType.hasProperty(propName) || objectType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE))) \u0026\u0026 propType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE))) {\n            if (objectType instanceof EnumType) {\n                report(t, n, INEXISTENT_ENUM_ELEMENT, propName);\n            } else if (!objectType.isEmptyType() \u0026\u0026 reportMissingProperties \u0026\u0026 !isPropertyTest(n)) {\n                if (!typeRegistry.canPropertyBeDefined(objectType, propName)) {\n                    report(t, n, INEXISTENT_PROPERTY, propName, validator.getReadableJSTypeName(n.getFirstChild(), true));\n                }\n            }\n        }\n    } else {\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1158,
      "functionName": "checkPropertyAccess",
      "functionAnnotation": "",
      "functionDoc": "Make sure that the access of this property is ok.\n",
      "diff": "@@ -1,16 +1,16 @@\n private void checkPropertyAccess(JSType childType, String propName, NodeTraversal t, Node n) {\n     ObjectType objectType \u003d childType.dereference();\n     if (objectType !\u003d null) {\n         JSType propType \u003d getJSType(n);\n         if ((!objectType.hasProperty(propName) || objectType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE))) \u0026\u0026 propType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE))) {\n             if (objectType instanceof EnumType) {\n-                t.report(n, INEXISTENT_ENUM_ELEMENT, propName);\n+                report(t, n, INEXISTENT_ENUM_ELEMENT, propName);\n             } else if (!objectType.isEmptyType() \u0026\u0026 reportMissingProperties \u0026\u0026 !isPropertyTest(n)) {\n                 if (!typeRegistry.canPropertyBeDefined(objectType, propName)) {\n-                    t.report(n, INEXISTENT_PROPERTY, propName, validator.getReadableJSTypeName(n.getFirstChild(), true));\n+                    report(t, n, INEXISTENT_PROPERTY, propName, validator.getReadableJSTypeName(n.getFirstChild(), true));\n                 }\n             }\n         }\n     } else {\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,16 @@\n+private void checkPropertyAccess(JSType childType, String propName, NodeTraversal t, Node n) {\n+    ObjectType objectType \u003d childType.dereference();\n+    if (objectType !\u003d null) {\n+        JSType propType \u003d getJSType(n);\n+        if ((!objectType.hasProperty(propName) || objectType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE))) \u0026\u0026 propType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE))) {\n+            if (objectType instanceof EnumType) {\n+                t.report(n, INEXISTENT_ENUM_ELEMENT, propName);\n+            } else if (!objectType.isEmptyType() \u0026\u0026 reportMissingProperties \u0026\u0026 !isPropertyTest(n)) {\n+                if (!typeRegistry.canPropertyBeDefined(objectType, propName)) {\n+                    t.report(n, INEXISTENT_PROPERTY, propName, validator.getReadableJSTypeName(n.getFirstChild(), true));\n+                }\n+            }\n+        }\n+    } else {\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void checkPropertyAccess(JSType childType, String propName, NodeTraversal t, Node n) {\n    ObjectType objectType \u003d childType.dereference();\n    if (objectType !\u003d null) {\n        JSType propType \u003d getJSType(n);\n        if ((!objectType.hasProperty(propName) || objectType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE))) \u0026\u0026 propType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE))) {\n            if (objectType instanceof EnumType) {\n                t.report(n, INEXISTENT_ENUM_ELEMENT, propName);\n            } else if (!objectType.isEmptyType() \u0026\u0026 reportMissingProperties \u0026\u0026 !isPropertyTest(n)) {\n                if (!typeRegistry.canPropertyBeDefined(objectType, propName)) {\n                    t.report(n, INEXISTENT_PROPERTY, propName, validator.getReadableJSTypeName(n.getFirstChild(), true));\n                }\n            }\n        }\n    } else {\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1147,
      "functionName": "checkPropertyAccess",
      "functionAnnotation": "",
      "functionDoc": "Make sure that the access of this property is ok.\n"
    }
  }
}