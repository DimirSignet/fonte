{
  "origin": "codeshovel",
  "repositoryName": "Math-96b",
  "repositoryPath": "/tmp/Math-96b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Complex.java",
  "functionName": "multiply",
  "functionId": "multiply___rhs-Complex",
  "sourceFilePath": "src/java/org/apache/commons/math/complex/Complex.java",
  "functionAnnotation": "",
  "functionDoc": "Return the product of this complex number and the given complex number.\n\u003cp\u003e\nImplements preliminary checks for NaN and infinity followed by\nthe definitional formula:\n\u003cpre\u003e\u003ccode\u003e\n(a + bi)(c + di) \u003d (ac - bd) + (ad + bc)i\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/p\u003e\n\u003cp\u003e\nReturns {@link #NaN} if either this or \u003ccode\u003erhs\u003c/code\u003e has one or more\nNaN parts.\n\u003c/p\u003e\nReturns {@link #INF} if neither this nor \u003ccode\u003erhs\u003c/code\u003e has one or more\nNaN parts and if either this or \u003ccode\u003erhs\u003c/code\u003e has one or more\ninfinite parts (same result is returned regardless of the sign of the\ncomponents).\n\u003c/p\u003e\n\u003cp\u003e\nReturns finite values in components of the result per the\ndefinitional formula in all remaining cases.\n \u003c/p\u003e\n\n@param rhs the other complex number\n@return the complex number product\n@throws NullPointerException if \u003ccode\u003erhs\u003c/code\u003e is null\n",
  "functionStartLine": 357,
  "functionEndLine": 368,
  "numCommitsSeen": 20,
  "timeTaken": 772,
  "changeHistory": [
    "6375e636998ba899dd6354a5aaf60b357dbe66d6",
    "912d9beb43edb26caf87a32f08664ea634136c73",
    "6ef3b2932f4ca9219e41784bb0cd229dcabcdb11",
    "0a904461932f2c0455611e77ec6a8d8aced2980b"
  ],
  "changeHistoryShort": {
    "6375e636998ba899dd6354a5aaf60b357dbe66d6": "Ymultichange(Ybodychange,Ydocchange)",
    "912d9beb43edb26caf87a32f08664ea634136c73": "Ybodychange",
    "6ef3b2932f4ca9219e41784bb0cd229dcabcdb11": "Ymultichange(Ybodychange,Ydocchange)",
    "0a904461932f2c0455611e77ec6a8d8aced2980b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6375e636998ba899dd6354a5aaf60b357dbe66d6": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "MATH-164 add a special handling for multiplication of complex\nnumbers with infinite parts\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@610288 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/8/08, 11:30 PM",
      "commitName": "6375e636998ba899dd6354a5aaf60b357dbe66d6",
      "commitAuthor": "Luc Maisonobe",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "MATH-164 add a special handling for multiplication of complex\nnumbers with infinite parts\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@610288 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "1/8/08, 11:30 PM",
          "commitName": "6375e636998ba899dd6354a5aaf60b357dbe66d6",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "11/18/07, 3:38 PM",
          "commitNameOld": "912d9beb43edb26caf87a32f08664ea634136c73",
          "commitAuthorOld": "Phil Steitz",
          "daysBetweenCommits": 51.33,
          "commitsBetweenForRepo": 24,
          "commitsBetweenForFile": 1,
          "actualSource": "public Complex multiply(Complex rhs) {\n    if (isNaN() || rhs.isNaN()) {\n        return NaN;\n    }\n    if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(rhs.real) || Double.isInfinite(rhs.imaginary)) {\n        return INF;\n    }\n    return createComplex(real * rhs.real - imaginary * rhs.imaginary, real * rhs.imaginary + imaginary * rhs.real);\n}",
          "path": "src/java/org/apache/commons/math/complex/Complex.java",
          "functionStartLine": 354,
          "functionName": "multiply",
          "functionAnnotation": "",
          "functionDoc": "Return the product of this complex number and the given complex number.\n\u003cp\u003e\nImplements preliminary checks for NaN and infinity followed by\nthe definitional formula:\n\u003cpre\u003e\u003ccode\u003e\n(a + bi)(c + di) \u003d (ac - bd) + (ad + bc)i\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/p\u003e\n\u003cp\u003e\nReturns {@link #NaN} if either this or \u003ccode\u003erhs\u003c/code\u003e has one or more\nNaN parts.\n\u003c/p\u003e\nReturns {@link #INF} if neither this nor \u003ccode\u003erhs\u003c/code\u003e has one or more\nNaN parts and if either this or \u003ccode\u003erhs\u003c/code\u003e has one or more\ninfinite parts (same result is returned regardless of the sign of the\ncomponents).\n\u003c/p\u003e\n\u003cp\u003e\nReturns finite values in components of the result per the\ndefinitional formula in all remaining cases.\n \u003c/p\u003e\n\n@param rhs the other complex number\n@return the complex number product\n@throws NullPointerException if \u003ccode\u003erhs\u003c/code\u003e is null\n",
          "diff": "@@ -1,6 +1,9 @@\n public Complex multiply(Complex rhs) {\n     if (isNaN() || rhs.isNaN()) {\n         return NaN;\n     }\n+    if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(rhs.real) || Double.isInfinite(rhs.imaginary)) {\n+        return INF;\n+    }\n     return createComplex(real * rhs.real - imaginary * rhs.imaginary, real * rhs.imaginary + imaginary * rhs.real);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "MATH-164 add a special handling for multiplication of complex\nnumbers with infinite parts\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@610288 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "1/8/08, 11:30 PM",
          "commitName": "6375e636998ba899dd6354a5aaf60b357dbe66d6",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "11/18/07, 3:38 PM",
          "commitNameOld": "912d9beb43edb26caf87a32f08664ea634136c73",
          "commitAuthorOld": "Phil Steitz",
          "daysBetweenCommits": 51.33,
          "commitsBetweenForRepo": 24,
          "commitsBetweenForFile": 1,
          "actualSource": "public Complex multiply(Complex rhs) {\n    if (isNaN() || rhs.isNaN()) {\n        return NaN;\n    }\n    if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(rhs.real) || Double.isInfinite(rhs.imaginary)) {\n        return INF;\n    }\n    return createComplex(real * rhs.real - imaginary * rhs.imaginary, real * rhs.imaginary + imaginary * rhs.real);\n}",
          "path": "src/java/org/apache/commons/math/complex/Complex.java",
          "functionStartLine": 354,
          "functionName": "multiply",
          "functionAnnotation": "",
          "functionDoc": "Return the product of this complex number and the given complex number.\n\u003cp\u003e\nImplements preliminary checks for NaN and infinity followed by\nthe definitional formula:\n\u003cpre\u003e\u003ccode\u003e\n(a + bi)(c + di) \u003d (ac - bd) + (ad + bc)i\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/p\u003e\n\u003cp\u003e\nReturns {@link #NaN} if either this or \u003ccode\u003erhs\u003c/code\u003e has one or more\nNaN parts.\n\u003c/p\u003e\nReturns {@link #INF} if neither this nor \u003ccode\u003erhs\u003c/code\u003e has one or more\nNaN parts and if either this or \u003ccode\u003erhs\u003c/code\u003e has one or more\ninfinite parts (same result is returned regardless of the sign of the\ncomponents).\n\u003c/p\u003e\n\u003cp\u003e\nReturns finite values in components of the result per the\ndefinitional formula in all remaining cases.\n \u003c/p\u003e\n\n@param rhs the other complex number\n@return the complex number product\n@throws NullPointerException if \u003ccode\u003erhs\u003c/code\u003e is null\n",
          "diff": "@@ -1,6 +1,9 @@\n public Complex multiply(Complex rhs) {\n     if (isNaN() || rhs.isNaN()) {\n         return NaN;\n     }\n+    if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(rhs.real) || Double.isInfinite(rhs.imaginary)) {\n+        return INF;\n+    }\n     return createComplex(real * rhs.real - imaginary * rhs.imaginary, real * rhs.imaginary + imaginary * rhs.real);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Return the product of this complex number and the given complex number.\n\u003cp\u003e\nImplements the definitional formula:\n\u003cpre\u003e\u003ccode\u003e\n(a + bi)(c + di) \u003d (ac - bd) + (ad + bc)i\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\nReturns {@link #NaN} if either this or \u003ccode\u003erhs\u003c/code\u003e has one or more\nNaN parts.\n\u003cp\u003e\nReturns NaN or infinite values in components of the result per the\ndefinitional formula and and the rules for {@link java.lang.Double}\narithmetic.  Examples:\n\u003cpre\u003e\u003ccode\u003e\n (1 + i) (INF + i)  \u003d  INF + INFi\n (1 + INFi) (1 - INFi) \u003d INF + NaNi\n (-INF + -INFi)(1 + NaNi) \u003d NaN + NaNi\n \u003c/code\u003e\u003c/pre\u003e\n\n@param rhs the other complex number\n@return the complex number product\n@throws NullPointerException if \u003ccode\u003erhs\u003c/code\u003e is null\n",
            "newValue": "Return the product of this complex number and the given complex number.\n\u003cp\u003e\nImplements preliminary checks for NaN and infinity followed by\nthe definitional formula:\n\u003cpre\u003e\u003ccode\u003e\n(a + bi)(c + di) \u003d (ac - bd) + (ad + bc)i\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/p\u003e\n\u003cp\u003e\nReturns {@link #NaN} if either this or \u003ccode\u003erhs\u003c/code\u003e has one or more\nNaN parts.\n\u003c/p\u003e\nReturns {@link #INF} if neither this nor \u003ccode\u003erhs\u003c/code\u003e has one or more\nNaN parts and if either this or \u003ccode\u003erhs\u003c/code\u003e has one or more\ninfinite parts (same result is returned regardless of the sign of the\ncomponents).\n\u003c/p\u003e\n\u003cp\u003e\nReturns finite values in components of the result per the\ndefinitional formula in all remaining cases.\n \u003c/p\u003e\n\n@param rhs the other complex number\n@return the complex number product\n@throws NullPointerException if \u003ccode\u003erhs\u003c/code\u003e is null\n"
          }
        }
      ]
    },
    "912d9beb43edb26caf87a32f08664ea634136c73": {
      "type": "Ybodychange",
      "commitMessage": "Merged most functions from ComplexUtils into Complex class, added\nstatic factory method to Complex.\nJIRA: MATH-171\nReported and patched by Niall Pemberton\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@596159 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/18/07, 3:38 PM",
      "commitName": "912d9beb43edb26caf87a32f08664ea634136c73",
      "commitAuthor": "Phil Steitz",
      "commitDateOld": "11/28/06, 11:14 PM",
      "commitNameOld": "05f7f6059bd0cbb69b5dd49c061f1f3520e0ee1e",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 354.68,
      "commitsBetweenForRepo": 180,
      "commitsBetweenForFile": 1,
      "actualSource": "public Complex multiply(Complex rhs) {\n    if (isNaN() || rhs.isNaN()) {\n        return NaN;\n    }\n    return createComplex(real * rhs.real - imaginary * rhs.imaginary, real * rhs.imaginary + imaginary * rhs.real);\n}",
      "path": "src/java/org/apache/commons/math/complex/Complex.java",
      "functionStartLine": 348,
      "functionName": "multiply",
      "functionAnnotation": "",
      "functionDoc": "Return the product of this complex number and the given complex number.\n\u003cp\u003e\nImplements the definitional formula:\n\u003cpre\u003e\u003ccode\u003e\n(a + bi)(c + di) \u003d (ac - bd) + (ad + bc)i\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\nReturns {@link #NaN} if either this or \u003ccode\u003erhs\u003c/code\u003e has one or more\nNaN parts.\n\u003cp\u003e\nReturns NaN or infinite values in components of the result per the\ndefinitional formula and and the rules for {@link java.lang.Double}\narithmetic.  Examples:\n\u003cpre\u003e\u003ccode\u003e\n (1 + i) (INF + i)  \u003d  INF + INFi\n (1 + INFi) (1 - INFi) \u003d INF + NaNi\n (-INF + -INFi)(1 + NaNi) \u003d NaN + NaNi\n \u003c/code\u003e\u003c/pre\u003e\n\n@param rhs the other complex number\n@return the complex number product\n@throws NullPointerException if \u003ccode\u003erhs\u003c/code\u003e is null\n",
      "diff": "@@ -1,6 +1,6 @@\n public Complex multiply(Complex rhs) {\n     if (isNaN() || rhs.isNaN()) {\n         return NaN;\n     }\n-    return new Complex(real * rhs.real - imaginary * rhs.imaginary, real * rhs.imaginary + imaginary * rhs.real);\n+    return createComplex(real * rhs.real - imaginary * rhs.imaginary, real * rhs.imaginary + imaginary * rhs.real);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6ef3b2932f4ca9219e41784bb0cd229dcabcdb11": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Merged (final) src changes from MATH_1_1 release branch r321516-358399\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@358631 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/22/05, 1:16 PM",
      "commitName": "6ef3b2932f4ca9219e41784bb0cd229dcabcdb11",
      "commitAuthor": "Phil Steitz",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Merged (final) src changes from MATH_1_1 release branch r321516-358399\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@358631 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/22/05, 1:16 PM",
          "commitName": "6ef3b2932f4ca9219e41784bb0cd229dcabcdb11",
          "commitAuthor": "Phil Steitz",
          "commitDateOld": "10/15/05, 8:29 PM",
          "commitNameOld": "545e47a273803b1d080b186c8cf139492f82c4fb",
          "commitAuthorOld": "Phil Steitz",
          "daysBetweenCommits": 67.74,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "actualSource": "public Complex multiply(Complex rhs) {\n    if (isNaN() || rhs.isNaN()) {\n        return NaN;\n    }\n    return new Complex(real * rhs.real - imaginary * rhs.imaginary, real * rhs.imaginary + imaginary * rhs.real);\n}",
          "path": "src/java/org/apache/commons/math/complex/Complex.java",
          "functionStartLine": 347,
          "functionName": "multiply",
          "functionAnnotation": "",
          "functionDoc": "Return the product of this complex number and the given complex number.\n\u003cp\u003e\nImplements the definitional formula:\n\u003cpre\u003e\u003ccode\u003e\n(a + bi)(c + di) \u003d (ac - bd) + (ad + bc)i\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\nReturns {@link #NaN} if either this or \u003ccode\u003erhs\u003c/code\u003e has one or more\nNaN parts.\n\u003cp\u003e\nReturns NaN or infinite values in components of the result per the\ndefinitional formula and and the rules for {@link java.lang.Double}\narithmetic.  Examples:\n\u003cpre\u003e\u003ccode\u003e\n (1 + i) (INF + i)  \u003d  INF + INFi\n (1 + INFi) (1 - INFi) \u003d INF + NaNi\n (-INF + -INFi)(1 + NaNi) \u003d NaN + NaNi\n \u003c/code\u003e\u003c/pre\u003e\n\n@param rhs the other complex number\n@return the complex number product\n@throws NullPointerException if \u003ccode\u003erhs\u003c/code\u003e is null\n",
          "diff": "@@ -1,9 +1,6 @@\n public Complex multiply(Complex rhs) {\n     if (isNaN() || rhs.isNaN()) {\n         return NaN;\n     }\n-    double p \u003d (real + imaginary) * (rhs.getReal() + rhs.getImaginary());\n-    double ac \u003d real * rhs.getReal();\n-    double bd \u003d imaginary * rhs.getImaginary();\n-    return new Complex(ac - bd, p - ac - bd);\n+    return new Complex(real * rhs.real - imaginary * rhs.imaginary, real * rhs.imaginary + imaginary * rhs.real);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Merged (final) src changes from MATH_1_1 release branch r321516-358399\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@358631 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/22/05, 1:16 PM",
          "commitName": "6ef3b2932f4ca9219e41784bb0cd229dcabcdb11",
          "commitAuthor": "Phil Steitz",
          "commitDateOld": "10/15/05, 8:29 PM",
          "commitNameOld": "545e47a273803b1d080b186c8cf139492f82c4fb",
          "commitAuthorOld": "Phil Steitz",
          "daysBetweenCommits": 67.74,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "actualSource": "public Complex multiply(Complex rhs) {\n    if (isNaN() || rhs.isNaN()) {\n        return NaN;\n    }\n    return new Complex(real * rhs.real - imaginary * rhs.imaginary, real * rhs.imaginary + imaginary * rhs.real);\n}",
          "path": "src/java/org/apache/commons/math/complex/Complex.java",
          "functionStartLine": 347,
          "functionName": "multiply",
          "functionAnnotation": "",
          "functionDoc": "Return the product of this complex number and the given complex number.\n\u003cp\u003e\nImplements the definitional formula:\n\u003cpre\u003e\u003ccode\u003e\n(a + bi)(c + di) \u003d (ac - bd) + (ad + bc)i\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\nReturns {@link #NaN} if either this or \u003ccode\u003erhs\u003c/code\u003e has one or more\nNaN parts.\n\u003cp\u003e\nReturns NaN or infinite values in components of the result per the\ndefinitional formula and and the rules for {@link java.lang.Double}\narithmetic.  Examples:\n\u003cpre\u003e\u003ccode\u003e\n (1 + i) (INF + i)  \u003d  INF + INFi\n (1 + INFi) (1 - INFi) \u003d INF + NaNi\n (-INF + -INFi)(1 + NaNi) \u003d NaN + NaNi\n \u003c/code\u003e\u003c/pre\u003e\n\n@param rhs the other complex number\n@return the complex number product\n@throws NullPointerException if \u003ccode\u003erhs\u003c/code\u003e is null\n",
          "diff": "@@ -1,9 +1,6 @@\n public Complex multiply(Complex rhs) {\n     if (isNaN() || rhs.isNaN()) {\n         return NaN;\n     }\n-    double p \u003d (real + imaginary) * (rhs.getReal() + rhs.getImaginary());\n-    double ac \u003d real * rhs.getReal();\n-    double bd \u003d imaginary * rhs.getImaginary();\n-    return new Complex(ac - bd, p - ac - bd);\n+    return new Complex(real * rhs.real - imaginary * rhs.imaginary, real * rhs.imaginary + imaginary * rhs.real);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Return the product of this complex number and the given complex number.\n\n@param rhs the other complex number.\n@return the complex number product.\n",
            "newValue": "Return the product of this complex number and the given complex number.\n\u003cp\u003e\nImplements the definitional formula:\n\u003cpre\u003e\u003ccode\u003e\n(a + bi)(c + di) \u003d (ac - bd) + (ad + bc)i\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\nReturns {@link #NaN} if either this or \u003ccode\u003erhs\u003c/code\u003e has one or more\nNaN parts.\n\u003cp\u003e\nReturns NaN or infinite values in components of the result per the\ndefinitional formula and and the rules for {@link java.lang.Double}\narithmetic.  Examples:\n\u003cpre\u003e\u003ccode\u003e\n (1 + i) (INF + i)  \u003d  INF + INFi\n (1 + INFi) (1 - INFi) \u003d INF + NaNi\n (-INF + -INFi)(1 + NaNi) \u003d NaN + NaNi\n \u003c/code\u003e\u003c/pre\u003e\n\n@param rhs the other complex number\n@return the complex number product\n@throws NullPointerException if \u003ccode\u003erhs\u003c/code\u003e is null\n"
          }
        }
      ]
    },
    "0a904461932f2c0455611e77ec6a8d8aced2980b": {
      "type": "Yintroduced",
      "commitMessage": "Attempting to recover last revision.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141013 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/14/03, 2:25 PM",
      "commitName": "0a904461932f2c0455611e77ec6a8d8aced2980b",
      "commitAuthor": "Mark R. Diggory",
      "diff": "@@ -0,0 +1,9 @@\n+public Complex multiply(Complex rhs) {\n+    if (isNaN() || rhs.isNaN()) {\n+        return NaN;\n+    }\n+    double p \u003d (real + imaginary) * (rhs.getReal() + rhs.getImaginary());\n+    double ac \u003d real * rhs.getReal();\n+    double bd \u003d imaginary * rhs.getImaginary();\n+    return new Complex(ac - bd, p - ac - bd);\n+}\n\\ No newline at end of file\n",
      "actualSource": "public Complex multiply(Complex rhs) {\n    if (isNaN() || rhs.isNaN()) {\n        return NaN;\n    }\n    double p \u003d (real + imaginary) * (rhs.getReal() + rhs.getImaginary());\n    double ac \u003d real * rhs.getReal();\n    double bd \u003d imaginary * rhs.getImaginary();\n    return new Complex(ac - bd, p - ac - bd);\n}",
      "path": "src/java/org/apache/commons/math/complex/Complex.java",
      "functionStartLine": 210,
      "functionName": "multiply",
      "functionAnnotation": "",
      "functionDoc": "Return the product of this complex number and the given complex number.\n\n@param rhs the other complex number.\n@return the complex number product.\n"
    }
  }
}