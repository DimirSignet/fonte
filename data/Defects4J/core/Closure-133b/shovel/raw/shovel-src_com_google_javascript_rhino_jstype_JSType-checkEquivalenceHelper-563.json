{
  "origin": "codeshovel",
  "repositoryName": "Closure-133b",
  "repositoryPath": "/tmp/Closure-133b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JSType.java",
  "functionName": "checkEquivalenceHelper",
  "functionId": "checkEquivalenceHelper___that-JSType__eqMethod-EquivalenceMethod",
  "sourceFilePath": "src/com/google/javascript/rhino/jstype/JSType.java",
  "functionAnnotation": "",
  "functionDoc": "An equivalence visitor.\n",
  "functionStartLine": 563,
  "functionEndLine": 631,
  "numCommitsSeen": 152,
  "timeTaken": 4137,
  "changeHistory": [
    "44ebf6062655dc55d0569c80ce7806100435fba0",
    "4cac8c1e896e04418f57f9a6208311444aa3d5f3",
    "e43d4fa98a5eddcf1a6fda0f21ad07ad08f6839a",
    "ac239c7c53aa4d6c3105f600dec8af69da530883",
    "b2c046d1cda6af9818e0a3390eccd699792701c9"
  ],
  "changeHistoryShort": {
    "44ebf6062655dc55d0569c80ce7806100435fba0": "Ybodychange",
    "4cac8c1e896e04418f57f9a6208311444aa3d5f3": "Ybodychange",
    "e43d4fa98a5eddcf1a6fda0f21ad07ad08f6839a": "Ybodychange",
    "ac239c7c53aa4d6c3105f600dec8af69da530883": "Ymultichange(Yparameterchange,Ybodychange)",
    "b2c046d1cda6af9818e0a3390eccd699792701c9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "44ebf6062655dc55d0569c80ce7806100435fba0": {
      "type": "Ybodychange",
      "commitMessage": "\nExtends TemplatizedType to handle any number of template types, and removes IndexedType. Converts Array and Object to the new generic templatized type system.\n\nR\u003ddimvar,nicksantos,johnlenz,tylerg\nDELTA\u003d544 (273 added, 143 deleted, 128 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d6255\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2504 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/4/13, 1:10 PM",
      "commitName": "44ebf6062655dc55d0569c80ce7806100435fba0",
      "commitAuthor": "izaakr@google.com",
      "commitDateOld": "1/29/13, 11:03 AM",
      "commitNameOld": "2065172121162371081ca134f05d0da599ca0ba4",
      "commitAuthorOld": "izaakr@google.com",
      "daysBetweenCommits": 6.09,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "boolean checkEquivalenceHelper(JSType that, EquivalenceMethod eqMethod) {\n    if (this \u003d\u003d that) {\n        return true;\n    }\n    boolean thisUnknown \u003d isUnknownType();\n    boolean thatUnknown \u003d that.isUnknownType();\n    if (thisUnknown || thatUnknown) {\n        if (eqMethod \u003d\u003d EquivalenceMethod.INVARIANT) {\n            return true;\n        } else if (eqMethod \u003d\u003d EquivalenceMethod.DATA_FLOW) {\n            return thisUnknown \u0026\u0026 thatUnknown;\n        } else if (thisUnknown \u0026\u0026 thatUnknown \u0026\u0026 (isNominalType() ^ that.isNominalType())) {\n            return false;\n        }\n    }\n    if (isUnionType() \u0026\u0026 that.isUnionType()) {\n        return toMaybeUnionType().checkUnionEquivalenceHelper(that.toMaybeUnionType(), eqMethod);\n    }\n    if (isFunctionType() \u0026\u0026 that.isFunctionType()) {\n        return toMaybeFunctionType().checkFunctionEquivalenceHelper(that.toMaybeFunctionType(), eqMethod);\n    }\n    if (isRecordType() \u0026\u0026 that.isRecordType()) {\n        return toMaybeRecordType().checkRecordEquivalenceHelper(that.toMaybeRecordType(), eqMethod);\n    }\n    if (!getTemplateTypeMap().checkEquivalenceHelper(that.getTemplateTypeMap(), eqMethod)) {\n        return false;\n    }\n    if (isNominalType() \u0026\u0026 that.isNominalType()) {\n        return toObjectType().getReferenceName().equals(that.toObjectType().getReferenceName());\n    }\n    if (this instanceof ProxyObjectType) {\n        return ((ProxyObjectType) this).getReferencedTypeInternal().checkEquivalenceHelper(that, eqMethod);\n    }\n    if (that instanceof ProxyObjectType) {\n        return checkEquivalenceHelper(((ProxyObjectType) that).getReferencedTypeInternal(), eqMethod);\n    }\n    return this \u003d\u003d that;\n}",
      "path": "src/com/google/javascript/rhino/jstype/JSType.java",
      "functionStartLine": 563,
      "functionName": "checkEquivalenceHelper",
      "functionAnnotation": "",
      "functionDoc": "An equivalence visitor.\n",
      "diff": "@@ -1,50 +1,38 @@\n boolean checkEquivalenceHelper(JSType that, EquivalenceMethod eqMethod) {\n     if (this \u003d\u003d that) {\n         return true;\n     }\n     boolean thisUnknown \u003d isUnknownType();\n     boolean thatUnknown \u003d that.isUnknownType();\n     if (thisUnknown || thatUnknown) {\n         if (eqMethod \u003d\u003d EquivalenceMethod.INVARIANT) {\n             return true;\n         } else if (eqMethod \u003d\u003d EquivalenceMethod.DATA_FLOW) {\n             return thisUnknown \u0026\u0026 thatUnknown;\n         } else if (thisUnknown \u0026\u0026 thatUnknown \u0026\u0026 (isNominalType() ^ that.isNominalType())) {\n             return false;\n         }\n     }\n     if (isUnionType() \u0026\u0026 that.isUnionType()) {\n         return toMaybeUnionType().checkUnionEquivalenceHelper(that.toMaybeUnionType(), eqMethod);\n     }\n     if (isFunctionType() \u0026\u0026 that.isFunctionType()) {\n         return toMaybeFunctionType().checkFunctionEquivalenceHelper(that.toMaybeFunctionType(), eqMethod);\n     }\n     if (isRecordType() \u0026\u0026 that.isRecordType()) {\n         return toMaybeRecordType().checkRecordEquivalenceHelper(that.toMaybeRecordType(), eqMethod);\n     }\n-    TemplatizedType thisParamType \u003d toMaybeTemplatizedType();\n-    TemplatizedType thatParamType \u003d that.toMaybeTemplatizedType();\n-    if (thisParamType !\u003d null || thatParamType !\u003d null) {\n-        boolean paramsMatch \u003d false;\n-        if (thisParamType !\u003d null \u0026\u0026 thatParamType !\u003d null) {\n-            paramsMatch \u003d thisParamType.getTemplateType().checkEquivalenceHelper(thatParamType.getTemplateType(), eqMethod);\n-        } else if (eqMethod \u003d\u003d EquivalenceMethod.IDENTITY) {\n-            paramsMatch \u003d false;\n-        } else {\n-            paramsMatch \u003d true;\n-        }\n-        JSType thisRootType \u003d thisParamType \u003d\u003d null ? this : thisParamType.getReferencedTypeInternal();\n-        JSType thatRootType \u003d thatParamType \u003d\u003d null ? that : thatParamType.getReferencedTypeInternal();\n-        return paramsMatch \u0026\u0026 thisRootType.checkEquivalenceHelper(thatRootType, eqMethod);\n+    if (!getTemplateTypeMap().checkEquivalenceHelper(that.getTemplateTypeMap(), eqMethod)) {\n+        return false;\n     }\n     if (isNominalType() \u0026\u0026 that.isNominalType()) {\n         return toObjectType().getReferenceName().equals(that.toObjectType().getReferenceName());\n     }\n     if (this instanceof ProxyObjectType) {\n         return ((ProxyObjectType) this).getReferencedTypeInternal().checkEquivalenceHelper(that, eqMethod);\n     }\n     if (that instanceof ProxyObjectType) {\n         return checkEquivalenceHelper(((ProxyObjectType) that).getReferencedTypeInternal(), eqMethod);\n     }\n     return this \u003d\u003d that;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4cac8c1e896e04418f57f9a6208311444aa3d5f3": {
      "type": "Ybodychange",
      "commitMessage": "\nRenames ParameterizedType to TemplatizedType.\n\nR\u003ddimvar,nicksantos,johnlenz\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d6186\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2486 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/23/13, 5:45 PM",
      "commitName": "4cac8c1e896e04418f57f9a6208311444aa3d5f3",
      "commitAuthor": "izaakr@google.com",
      "commitDateOld": "1/10/13, 4:31 PM",
      "commitNameOld": "9bf6d8db973a4691ad1551bdcbc559a86ba60532",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 13.05,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "actualSource": "boolean checkEquivalenceHelper(JSType that, EquivalenceMethod eqMethod) {\n    if (this \u003d\u003d that) {\n        return true;\n    }\n    boolean thisUnknown \u003d isUnknownType();\n    boolean thatUnknown \u003d that.isUnknownType();\n    if (thisUnknown || thatUnknown) {\n        if (eqMethod \u003d\u003d EquivalenceMethod.INVARIANT) {\n            return true;\n        } else if (eqMethod \u003d\u003d EquivalenceMethod.DATA_FLOW) {\n            return thisUnknown \u0026\u0026 thatUnknown;\n        } else if (thisUnknown \u0026\u0026 thatUnknown \u0026\u0026 (isNominalType() ^ that.isNominalType())) {\n            return false;\n        }\n    }\n    if (isUnionType() \u0026\u0026 that.isUnionType()) {\n        return toMaybeUnionType().checkUnionEquivalenceHelper(that.toMaybeUnionType(), eqMethod);\n    }\n    if (isFunctionType() \u0026\u0026 that.isFunctionType()) {\n        return toMaybeFunctionType().checkFunctionEquivalenceHelper(that.toMaybeFunctionType(), eqMethod);\n    }\n    if (isRecordType() \u0026\u0026 that.isRecordType()) {\n        return toMaybeRecordType().checkRecordEquivalenceHelper(that.toMaybeRecordType(), eqMethod);\n    }\n    TemplatizedType thisParamType \u003d toMaybeTemplatizedType();\n    TemplatizedType thatParamType \u003d that.toMaybeTemplatizedType();\n    if (thisParamType !\u003d null || thatParamType !\u003d null) {\n        boolean paramsMatch \u003d false;\n        if (thisParamType !\u003d null \u0026\u0026 thatParamType !\u003d null) {\n            paramsMatch \u003d thisParamType.getTemplateType().checkEquivalenceHelper(thatParamType.getTemplateType(), eqMethod);\n        } else if (eqMethod \u003d\u003d EquivalenceMethod.IDENTITY) {\n            paramsMatch \u003d false;\n        } else {\n            paramsMatch \u003d true;\n        }\n        JSType thisRootType \u003d thisParamType \u003d\u003d null ? this : thisParamType.getReferencedTypeInternal();\n        JSType thatRootType \u003d thatParamType \u003d\u003d null ? that : thatParamType.getReferencedTypeInternal();\n        return paramsMatch \u0026\u0026 thisRootType.checkEquivalenceHelper(thatRootType, eqMethod);\n    }\n    if (isNominalType() \u0026\u0026 that.isNominalType()) {\n        return toObjectType().getReferenceName().equals(that.toObjectType().getReferenceName());\n    }\n    if (this instanceof ProxyObjectType) {\n        return ((ProxyObjectType) this).getReferencedTypeInternal().checkEquivalenceHelper(that, eqMethod);\n    }\n    if (that instanceof ProxyObjectType) {\n        return checkEquivalenceHelper(((ProxyObjectType) that).getReferencedTypeInternal(), eqMethod);\n    }\n    return this \u003d\u003d that;\n}",
      "path": "src/com/google/javascript/rhino/jstype/JSType.java",
      "functionStartLine": 657,
      "functionName": "checkEquivalenceHelper",
      "functionAnnotation": "",
      "functionDoc": "An equivalence visitor.\n",
      "diff": "@@ -1,50 +1,50 @@\n boolean checkEquivalenceHelper(JSType that, EquivalenceMethod eqMethod) {\n     if (this \u003d\u003d that) {\n         return true;\n     }\n     boolean thisUnknown \u003d isUnknownType();\n     boolean thatUnknown \u003d that.isUnknownType();\n     if (thisUnknown || thatUnknown) {\n         if (eqMethod \u003d\u003d EquivalenceMethod.INVARIANT) {\n             return true;\n         } else if (eqMethod \u003d\u003d EquivalenceMethod.DATA_FLOW) {\n             return thisUnknown \u0026\u0026 thatUnknown;\n         } else if (thisUnknown \u0026\u0026 thatUnknown \u0026\u0026 (isNominalType() ^ that.isNominalType())) {\n             return false;\n         }\n     }\n     if (isUnionType() \u0026\u0026 that.isUnionType()) {\n         return toMaybeUnionType().checkUnionEquivalenceHelper(that.toMaybeUnionType(), eqMethod);\n     }\n     if (isFunctionType() \u0026\u0026 that.isFunctionType()) {\n         return toMaybeFunctionType().checkFunctionEquivalenceHelper(that.toMaybeFunctionType(), eqMethod);\n     }\n     if (isRecordType() \u0026\u0026 that.isRecordType()) {\n         return toMaybeRecordType().checkRecordEquivalenceHelper(that.toMaybeRecordType(), eqMethod);\n     }\n-    ParameterizedType thisParamType \u003d toMaybeParameterizedType();\n-    ParameterizedType thatParamType \u003d that.toMaybeParameterizedType();\n+    TemplatizedType thisParamType \u003d toMaybeTemplatizedType();\n+    TemplatizedType thatParamType \u003d that.toMaybeTemplatizedType();\n     if (thisParamType !\u003d null || thatParamType !\u003d null) {\n         boolean paramsMatch \u003d false;\n         if (thisParamType !\u003d null \u0026\u0026 thatParamType !\u003d null) {\n-            paramsMatch \u003d thisParamType.getParameterType().checkEquivalenceHelper(thatParamType.getParameterType(), eqMethod);\n+            paramsMatch \u003d thisParamType.getTemplateType().checkEquivalenceHelper(thatParamType.getTemplateType(), eqMethod);\n         } else if (eqMethod \u003d\u003d EquivalenceMethod.IDENTITY) {\n             paramsMatch \u003d false;\n         } else {\n             paramsMatch \u003d true;\n         }\n         JSType thisRootType \u003d thisParamType \u003d\u003d null ? this : thisParamType.getReferencedTypeInternal();\n         JSType thatRootType \u003d thatParamType \u003d\u003d null ? that : thatParamType.getReferencedTypeInternal();\n         return paramsMatch \u0026\u0026 thisRootType.checkEquivalenceHelper(thatRootType, eqMethod);\n     }\n     if (isNominalType() \u0026\u0026 that.isNominalType()) {\n         return toObjectType().getReferenceName().equals(that.toObjectType().getReferenceName());\n     }\n     if (this instanceof ProxyObjectType) {\n         return ((ProxyObjectType) this).getReferencedTypeInternal().checkEquivalenceHelper(that, eqMethod);\n     }\n     if (that instanceof ProxyObjectType) {\n         return checkEquivalenceHelper(((ProxyObjectType) that).getReferencedTypeInternal(), eqMethod);\n     }\n     return this \u003d\u003d that;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e43d4fa98a5eddcf1a6fda0f21ad07ad08f6839a": {
      "type": "Ybodychange",
      "commitMessage": "\nBugfix for struct/dict: mutating the prototype property of functions\n\nR\u003dnicksantos\nDELTA\u003d74  (50 added, 6 deleted, 18 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5709\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2280 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/25/12, 3:36 PM",
      "commitName": "e43d4fa98a5eddcf1a6fda0f21ad07ad08f6839a",
      "commitAuthor": "dimvar@google.com",
      "commitDateOld": "10/24/12, 2:07 PM",
      "commitNameOld": "177d001a30c568037141e555d84f9bd28d3d2d86",
      "commitAuthorOld": "izaakr@google.com",
      "daysBetweenCommits": 1.06,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "boolean checkEquivalenceHelper(JSType that, EquivalenceMethod eqMethod) {\n    if (this \u003d\u003d that) {\n        return true;\n    }\n    boolean thisUnknown \u003d isUnknownType();\n    boolean thatUnknown \u003d that.isUnknownType();\n    if (thisUnknown || thatUnknown) {\n        if (eqMethod \u003d\u003d EquivalenceMethod.INVARIANT) {\n            return true;\n        } else if (eqMethod \u003d\u003d EquivalenceMethod.DATA_FLOW) {\n            return thisUnknown \u0026\u0026 thatUnknown;\n        } else if (thisUnknown \u0026\u0026 thatUnknown \u0026\u0026 (isNominalType() ^ that.isNominalType())) {\n            return false;\n        }\n    }\n    if (isUnionType() \u0026\u0026 that.isUnionType()) {\n        return toMaybeUnionType().checkUnionEquivalenceHelper(that.toMaybeUnionType(), eqMethod);\n    }\n    if (isFunctionType() \u0026\u0026 that.isFunctionType()) {\n        return toMaybeFunctionType().checkFunctionEquivalenceHelper(that.toMaybeFunctionType(), eqMethod);\n    }\n    if (isRecordType() \u0026\u0026 that.isRecordType()) {\n        return toMaybeRecordType().checkRecordEquivalenceHelper(that.toMaybeRecordType(), eqMethod);\n    }\n    ParameterizedType thisParamType \u003d toMaybeParameterizedType();\n    ParameterizedType thatParamType \u003d that.toMaybeParameterizedType();\n    if (thisParamType !\u003d null || thatParamType !\u003d null) {\n        boolean paramsMatch \u003d false;\n        if (thisParamType !\u003d null \u0026\u0026 thatParamType !\u003d null) {\n            paramsMatch \u003d thisParamType.getParameterType().checkEquivalenceHelper(thatParamType.getParameterType(), eqMethod);\n        } else if (eqMethod \u003d\u003d EquivalenceMethod.IDENTITY) {\n            paramsMatch \u003d false;\n        } else {\n            paramsMatch \u003d true;\n        }\n        JSType thisRootType \u003d thisParamType \u003d\u003d null ? this : thisParamType.getReferencedTypeInternal();\n        JSType thatRootType \u003d thatParamType \u003d\u003d null ? that : thatParamType.getReferencedTypeInternal();\n        return paramsMatch \u0026\u0026 thisRootType.checkEquivalenceHelper(thatRootType, eqMethod);\n    }\n    if (isNominalType() \u0026\u0026 that.isNominalType()) {\n        return toObjectType().getReferenceName().equals(that.toObjectType().getReferenceName());\n    }\n    if (this instanceof ProxyObjectType) {\n        return ((ProxyObjectType) this).getReferencedTypeInternal().checkEquivalenceHelper(that, eqMethod);\n    }\n    if (that instanceof ProxyObjectType) {\n        return checkEquivalenceHelper(((ProxyObjectType) that).getReferencedTypeInternal(), eqMethod);\n    }\n    return this \u003d\u003d that;\n}",
      "path": "src/com/google/javascript/rhino/jstype/JSType.java",
      "functionStartLine": 646,
      "functionName": "checkEquivalenceHelper",
      "functionAnnotation": "",
      "functionDoc": "An equivalence visitor.\n",
      "diff": "@@ -1,50 +1,50 @@\n boolean checkEquivalenceHelper(JSType that, EquivalenceMethod eqMethod) {\n     if (this \u003d\u003d that) {\n         return true;\n     }\n     boolean thisUnknown \u003d isUnknownType();\n     boolean thatUnknown \u003d that.isUnknownType();\n     if (thisUnknown || thatUnknown) {\n         if (eqMethod \u003d\u003d EquivalenceMethod.INVARIANT) {\n             return true;\n         } else if (eqMethod \u003d\u003d EquivalenceMethod.DATA_FLOW) {\n             return thisUnknown \u0026\u0026 thatUnknown;\n         } else if (thisUnknown \u0026\u0026 thatUnknown \u0026\u0026 (isNominalType() ^ that.isNominalType())) {\n             return false;\n         }\n     }\n     if (isUnionType() \u0026\u0026 that.isUnionType()) {\n-        return this.toMaybeUnionType().checkUnionEquivalenceHelper(that.toMaybeUnionType(), eqMethod);\n+        return toMaybeUnionType().checkUnionEquivalenceHelper(that.toMaybeUnionType(), eqMethod);\n     }\n     if (isFunctionType() \u0026\u0026 that.isFunctionType()) {\n-        return this.toMaybeFunctionType().checkFunctionEquivalenceHelper(that.toMaybeFunctionType(), eqMethod);\n+        return toMaybeFunctionType().checkFunctionEquivalenceHelper(that.toMaybeFunctionType(), eqMethod);\n     }\n     if (isRecordType() \u0026\u0026 that.isRecordType()) {\n-        return this.toMaybeRecordType().checkRecordEquivalenceHelper(that.toMaybeRecordType(), eqMethod);\n+        return toMaybeRecordType().checkRecordEquivalenceHelper(that.toMaybeRecordType(), eqMethod);\n     }\n     ParameterizedType thisParamType \u003d toMaybeParameterizedType();\n     ParameterizedType thatParamType \u003d that.toMaybeParameterizedType();\n     if (thisParamType !\u003d null || thatParamType !\u003d null) {\n         boolean paramsMatch \u003d false;\n         if (thisParamType !\u003d null \u0026\u0026 thatParamType !\u003d null) {\n             paramsMatch \u003d thisParamType.getParameterType().checkEquivalenceHelper(thatParamType.getParameterType(), eqMethod);\n         } else if (eqMethod \u003d\u003d EquivalenceMethod.IDENTITY) {\n             paramsMatch \u003d false;\n         } else {\n             paramsMatch \u003d true;\n         }\n         JSType thisRootType \u003d thisParamType \u003d\u003d null ? this : thisParamType.getReferencedTypeInternal();\n         JSType thatRootType \u003d thatParamType \u003d\u003d null ? that : thatParamType.getReferencedTypeInternal();\n         return paramsMatch \u0026\u0026 thisRootType.checkEquivalenceHelper(thatRootType, eqMethod);\n     }\n     if (isNominalType() \u0026\u0026 that.isNominalType()) {\n         return toObjectType().getReferenceName().equals(that.toObjectType().getReferenceName());\n     }\n     if (this instanceof ProxyObjectType) {\n         return ((ProxyObjectType) this).getReferencedTypeInternal().checkEquivalenceHelper(that, eqMethod);\n     }\n     if (that instanceof ProxyObjectType) {\n         return checkEquivalenceHelper(((ProxyObjectType) that).getReferencedTypeInternal(), eqMethod);\n     }\n     return this \u003d\u003d that;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ac239c7c53aa4d6c3105f600dec8af69da530883": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "\nAdd a new isInvariant relation.\nFixes issue 791.\n\nR\u003ddimvar\nDELTA\u003d231  (175 added, 7 deleted, 49 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5678\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2265 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/19/12, 9:41 AM",
      "commitName": "ac239c7c53aa4d6c3105f600dec8af69da530883",
      "commitAuthor": "nicksantos@google.com",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "\nAdd a new isInvariant relation.\nFixes issue 791.\n\nR\u003ddimvar\nDELTA\u003d231  (175 added, 7 deleted, 49 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5678\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2265 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "10/19/12, 9:41 AM",
          "commitName": "ac239c7c53aa4d6c3105f600dec8af69da530883",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "10/16/12, 3:17 PM",
          "commitNameOld": "d93f2d5aaf346749eaa6ae1641a171aeb177de5d",
          "commitAuthorOld": "dimvar@google.com",
          "daysBetweenCommits": 2.77,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "boolean checkEquivalenceHelper(JSType that, EquivalenceMethod eqMethod) {\n    if (this \u003d\u003d that) {\n        return true;\n    }\n    boolean thisUnknown \u003d isUnknownType();\n    boolean thatUnknown \u003d that.isUnknownType();\n    if (thisUnknown || thatUnknown) {\n        if (eqMethod \u003d\u003d EquivalenceMethod.INVARIANT) {\n            return true;\n        } else if (eqMethod \u003d\u003d EquivalenceMethod.DATA_FLOW) {\n            return thisUnknown \u0026\u0026 thatUnknown;\n        } else if (thisUnknown \u0026\u0026 thatUnknown \u0026\u0026 (isNominalType() ^ that.isNominalType())) {\n            return false;\n        }\n    }\n    if (isUnionType() \u0026\u0026 that.isUnionType()) {\n        return this.toMaybeUnionType().checkUnionEquivalenceHelper(that.toMaybeUnionType(), eqMethod);\n    }\n    if (isFunctionType() \u0026\u0026 that.isFunctionType()) {\n        return this.toMaybeFunctionType().checkFunctionEquivalenceHelper(that.toMaybeFunctionType(), eqMethod);\n    }\n    if (isRecordType() \u0026\u0026 that.isRecordType()) {\n        return this.toMaybeRecordType().checkRecordEquivalenceHelper(that.toMaybeRecordType(), eqMethod);\n    }\n    ParameterizedType thisParamType \u003d toMaybeParameterizedType();\n    ParameterizedType thatParamType \u003d that.toMaybeParameterizedType();\n    if (thisParamType !\u003d null || thatParamType !\u003d null) {\n        boolean paramsMatch \u003d false;\n        if (thisParamType !\u003d null \u0026\u0026 thatParamType !\u003d null) {\n            paramsMatch \u003d thisParamType.getParameterType().checkEquivalenceHelper(thatParamType.getParameterType(), eqMethod);\n        } else if (eqMethod \u003d\u003d EquivalenceMethod.IDENTITY) {\n            paramsMatch \u003d false;\n        } else {\n            paramsMatch \u003d true;\n        }\n        JSType thisRootType \u003d thisParamType \u003d\u003d null ? this : thisParamType.getReferencedTypeInternal();\n        JSType thatRootType \u003d thatParamType \u003d\u003d null ? that : thatParamType.getReferencedTypeInternal();\n        return paramsMatch \u0026\u0026 thisRootType.checkEquivalenceHelper(thatRootType, eqMethod);\n    }\n    if (isNominalType() \u0026\u0026 that.isNominalType()) {\n        return toObjectType().getReferenceName().equals(that.toObjectType().getReferenceName());\n    }\n    if (this instanceof ProxyObjectType) {\n        return ((ProxyObjectType) this).getReferencedTypeInternal().checkEquivalenceHelper(that, eqMethod);\n    }\n    if (that instanceof ProxyObjectType) {\n        return checkEquivalenceHelper(((ProxyObjectType) that).getReferencedTypeInternal(), eqMethod);\n    }\n    return this \u003d\u003d that;\n}",
          "path": "src/com/google/javascript/rhino/jstype/JSType.java",
          "functionStartLine": 520,
          "functionName": "checkEquivalenceHelper",
          "functionAnnotation": "",
          "functionDoc": "An equivalence visitor.\n",
          "diff": "@@ -1,48 +1,50 @@\n-boolean checkEquivalenceHelper(JSType that, boolean tolerateUnknowns) {\n+boolean checkEquivalenceHelper(JSType that, EquivalenceMethod eqMethod) {\n     if (this \u003d\u003d that) {\n         return true;\n     }\n     boolean thisUnknown \u003d isUnknownType();\n     boolean thatUnknown \u003d that.isUnknownType();\n-    if (isUnknownType() || that.isUnknownType()) {\n-        if (tolerateUnknowns) {\n+    if (thisUnknown || thatUnknown) {\n+        if (eqMethod \u003d\u003d EquivalenceMethod.INVARIANT) {\n+            return true;\n+        } else if (eqMethod \u003d\u003d EquivalenceMethod.DATA_FLOW) {\n             return thisUnknown \u0026\u0026 thatUnknown;\n         } else if (thisUnknown \u0026\u0026 thatUnknown \u0026\u0026 (isNominalType() ^ that.isNominalType())) {\n             return false;\n         }\n     }\n     if (isUnionType() \u0026\u0026 that.isUnionType()) {\n-        return this.toMaybeUnionType().checkUnionEquivalenceHelper(that.toMaybeUnionType(), tolerateUnknowns);\n+        return this.toMaybeUnionType().checkUnionEquivalenceHelper(that.toMaybeUnionType(), eqMethod);\n     }\n     if (isFunctionType() \u0026\u0026 that.isFunctionType()) {\n-        return this.toMaybeFunctionType().checkFunctionEquivalenceHelper(that.toMaybeFunctionType(), tolerateUnknowns);\n+        return this.toMaybeFunctionType().checkFunctionEquivalenceHelper(that.toMaybeFunctionType(), eqMethod);\n     }\n     if (isRecordType() \u0026\u0026 that.isRecordType()) {\n-        return this.toMaybeRecordType().checkRecordEquivalenceHelper(that.toMaybeRecordType(), tolerateUnknowns);\n+        return this.toMaybeRecordType().checkRecordEquivalenceHelper(that.toMaybeRecordType(), eqMethod);\n     }\n     ParameterizedType thisParamType \u003d toMaybeParameterizedType();\n     ParameterizedType thatParamType \u003d that.toMaybeParameterizedType();\n     if (thisParamType !\u003d null || thatParamType !\u003d null) {\n         boolean paramsMatch \u003d false;\n         if (thisParamType !\u003d null \u0026\u0026 thatParamType !\u003d null) {\n-            paramsMatch \u003d thisParamType.getParameterType().checkEquivalenceHelper(thatParamType.getParameterType(), tolerateUnknowns);\n-        } else if (tolerateUnknowns) {\n-            paramsMatch \u003d true;\n-        } else {\n+            paramsMatch \u003d thisParamType.getParameterType().checkEquivalenceHelper(thatParamType.getParameterType(), eqMethod);\n+        } else if (eqMethod \u003d\u003d EquivalenceMethod.IDENTITY) {\n             paramsMatch \u003d false;\n+        } else {\n+            paramsMatch \u003d true;\n         }\n         JSType thisRootType \u003d thisParamType \u003d\u003d null ? this : thisParamType.getReferencedTypeInternal();\n         JSType thatRootType \u003d thatParamType \u003d\u003d null ? that : thatParamType.getReferencedTypeInternal();\n-        return paramsMatch \u0026\u0026 thisRootType.checkEquivalenceHelper(thatRootType, tolerateUnknowns);\n+        return paramsMatch \u0026\u0026 thisRootType.checkEquivalenceHelper(thatRootType, eqMethod);\n     }\n     if (isNominalType() \u0026\u0026 that.isNominalType()) {\n         return toObjectType().getReferenceName().equals(that.toObjectType().getReferenceName());\n     }\n     if (this instanceof ProxyObjectType) {\n-        return ((ProxyObjectType) this).getReferencedTypeInternal().checkEquivalenceHelper(that, tolerateUnknowns);\n+        return ((ProxyObjectType) this).getReferencedTypeInternal().checkEquivalenceHelper(that, eqMethod);\n     }\n     if (that instanceof ProxyObjectType) {\n-        return checkEquivalenceHelper(((ProxyObjectType) that).getReferencedTypeInternal(), tolerateUnknowns);\n+        return checkEquivalenceHelper(((ProxyObjectType) that).getReferencedTypeInternal(), eqMethod);\n     }\n     return this \u003d\u003d that;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[that-JSType, tolerateUnknowns-boolean]",
            "newValue": "[that-JSType, eqMethod-EquivalenceMethod]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nAdd a new isInvariant relation.\nFixes issue 791.\n\nR\u003ddimvar\nDELTA\u003d231  (175 added, 7 deleted, 49 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5678\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2265 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "10/19/12, 9:41 AM",
          "commitName": "ac239c7c53aa4d6c3105f600dec8af69da530883",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "10/16/12, 3:17 PM",
          "commitNameOld": "d93f2d5aaf346749eaa6ae1641a171aeb177de5d",
          "commitAuthorOld": "dimvar@google.com",
          "daysBetweenCommits": 2.77,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "boolean checkEquivalenceHelper(JSType that, EquivalenceMethod eqMethod) {\n    if (this \u003d\u003d that) {\n        return true;\n    }\n    boolean thisUnknown \u003d isUnknownType();\n    boolean thatUnknown \u003d that.isUnknownType();\n    if (thisUnknown || thatUnknown) {\n        if (eqMethod \u003d\u003d EquivalenceMethod.INVARIANT) {\n            return true;\n        } else if (eqMethod \u003d\u003d EquivalenceMethod.DATA_FLOW) {\n            return thisUnknown \u0026\u0026 thatUnknown;\n        } else if (thisUnknown \u0026\u0026 thatUnknown \u0026\u0026 (isNominalType() ^ that.isNominalType())) {\n            return false;\n        }\n    }\n    if (isUnionType() \u0026\u0026 that.isUnionType()) {\n        return this.toMaybeUnionType().checkUnionEquivalenceHelper(that.toMaybeUnionType(), eqMethod);\n    }\n    if (isFunctionType() \u0026\u0026 that.isFunctionType()) {\n        return this.toMaybeFunctionType().checkFunctionEquivalenceHelper(that.toMaybeFunctionType(), eqMethod);\n    }\n    if (isRecordType() \u0026\u0026 that.isRecordType()) {\n        return this.toMaybeRecordType().checkRecordEquivalenceHelper(that.toMaybeRecordType(), eqMethod);\n    }\n    ParameterizedType thisParamType \u003d toMaybeParameterizedType();\n    ParameterizedType thatParamType \u003d that.toMaybeParameterizedType();\n    if (thisParamType !\u003d null || thatParamType !\u003d null) {\n        boolean paramsMatch \u003d false;\n        if (thisParamType !\u003d null \u0026\u0026 thatParamType !\u003d null) {\n            paramsMatch \u003d thisParamType.getParameterType().checkEquivalenceHelper(thatParamType.getParameterType(), eqMethod);\n        } else if (eqMethod \u003d\u003d EquivalenceMethod.IDENTITY) {\n            paramsMatch \u003d false;\n        } else {\n            paramsMatch \u003d true;\n        }\n        JSType thisRootType \u003d thisParamType \u003d\u003d null ? this : thisParamType.getReferencedTypeInternal();\n        JSType thatRootType \u003d thatParamType \u003d\u003d null ? that : thatParamType.getReferencedTypeInternal();\n        return paramsMatch \u0026\u0026 thisRootType.checkEquivalenceHelper(thatRootType, eqMethod);\n    }\n    if (isNominalType() \u0026\u0026 that.isNominalType()) {\n        return toObjectType().getReferenceName().equals(that.toObjectType().getReferenceName());\n    }\n    if (this instanceof ProxyObjectType) {\n        return ((ProxyObjectType) this).getReferencedTypeInternal().checkEquivalenceHelper(that, eqMethod);\n    }\n    if (that instanceof ProxyObjectType) {\n        return checkEquivalenceHelper(((ProxyObjectType) that).getReferencedTypeInternal(), eqMethod);\n    }\n    return this \u003d\u003d that;\n}",
          "path": "src/com/google/javascript/rhino/jstype/JSType.java",
          "functionStartLine": 520,
          "functionName": "checkEquivalenceHelper",
          "functionAnnotation": "",
          "functionDoc": "An equivalence visitor.\n",
          "diff": "@@ -1,48 +1,50 @@\n-boolean checkEquivalenceHelper(JSType that, boolean tolerateUnknowns) {\n+boolean checkEquivalenceHelper(JSType that, EquivalenceMethod eqMethod) {\n     if (this \u003d\u003d that) {\n         return true;\n     }\n     boolean thisUnknown \u003d isUnknownType();\n     boolean thatUnknown \u003d that.isUnknownType();\n-    if (isUnknownType() || that.isUnknownType()) {\n-        if (tolerateUnknowns) {\n+    if (thisUnknown || thatUnknown) {\n+        if (eqMethod \u003d\u003d EquivalenceMethod.INVARIANT) {\n+            return true;\n+        } else if (eqMethod \u003d\u003d EquivalenceMethod.DATA_FLOW) {\n             return thisUnknown \u0026\u0026 thatUnknown;\n         } else if (thisUnknown \u0026\u0026 thatUnknown \u0026\u0026 (isNominalType() ^ that.isNominalType())) {\n             return false;\n         }\n     }\n     if (isUnionType() \u0026\u0026 that.isUnionType()) {\n-        return this.toMaybeUnionType().checkUnionEquivalenceHelper(that.toMaybeUnionType(), tolerateUnknowns);\n+        return this.toMaybeUnionType().checkUnionEquivalenceHelper(that.toMaybeUnionType(), eqMethod);\n     }\n     if (isFunctionType() \u0026\u0026 that.isFunctionType()) {\n-        return this.toMaybeFunctionType().checkFunctionEquivalenceHelper(that.toMaybeFunctionType(), tolerateUnknowns);\n+        return this.toMaybeFunctionType().checkFunctionEquivalenceHelper(that.toMaybeFunctionType(), eqMethod);\n     }\n     if (isRecordType() \u0026\u0026 that.isRecordType()) {\n-        return this.toMaybeRecordType().checkRecordEquivalenceHelper(that.toMaybeRecordType(), tolerateUnknowns);\n+        return this.toMaybeRecordType().checkRecordEquivalenceHelper(that.toMaybeRecordType(), eqMethod);\n     }\n     ParameterizedType thisParamType \u003d toMaybeParameterizedType();\n     ParameterizedType thatParamType \u003d that.toMaybeParameterizedType();\n     if (thisParamType !\u003d null || thatParamType !\u003d null) {\n         boolean paramsMatch \u003d false;\n         if (thisParamType !\u003d null \u0026\u0026 thatParamType !\u003d null) {\n-            paramsMatch \u003d thisParamType.getParameterType().checkEquivalenceHelper(thatParamType.getParameterType(), tolerateUnknowns);\n-        } else if (tolerateUnknowns) {\n-            paramsMatch \u003d true;\n-        } else {\n+            paramsMatch \u003d thisParamType.getParameterType().checkEquivalenceHelper(thatParamType.getParameterType(), eqMethod);\n+        } else if (eqMethod \u003d\u003d EquivalenceMethod.IDENTITY) {\n             paramsMatch \u003d false;\n+        } else {\n+            paramsMatch \u003d true;\n         }\n         JSType thisRootType \u003d thisParamType \u003d\u003d null ? this : thisParamType.getReferencedTypeInternal();\n         JSType thatRootType \u003d thatParamType \u003d\u003d null ? that : thatParamType.getReferencedTypeInternal();\n-        return paramsMatch \u0026\u0026 thisRootType.checkEquivalenceHelper(thatRootType, tolerateUnknowns);\n+        return paramsMatch \u0026\u0026 thisRootType.checkEquivalenceHelper(thatRootType, eqMethod);\n     }\n     if (isNominalType() \u0026\u0026 that.isNominalType()) {\n         return toObjectType().getReferenceName().equals(that.toObjectType().getReferenceName());\n     }\n     if (this instanceof ProxyObjectType) {\n-        return ((ProxyObjectType) this).getReferencedTypeInternal().checkEquivalenceHelper(that, tolerateUnknowns);\n+        return ((ProxyObjectType) this).getReferencedTypeInternal().checkEquivalenceHelper(that, eqMethod);\n     }\n     if (that instanceof ProxyObjectType) {\n-        return checkEquivalenceHelper(((ProxyObjectType) that).getReferencedTypeInternal(), tolerateUnknowns);\n+        return checkEquivalenceHelper(((ProxyObjectType) that).getReferencedTypeInternal(), eqMethod);\n     }\n     return this \u003d\u003d that;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "b2c046d1cda6af9818e0a3390eccd699792701c9": {
      "type": "Yintroduced",
      "commitMessage": "\nClean up the equivalence relation to use less polymorphism magic.\nThis is a big step towards addressing issue 791, but not quite there yet.\n\nR\u003djohnlenz\nDELTA\u003d385  (198 added, 116 deleted, 71 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5632\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2253 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/9/12, 8:41 AM",
      "commitName": "b2c046d1cda6af9818e0a3390eccd699792701c9",
      "commitAuthor": "nicksantos@google.com",
      "diff": "@@ -0,0 +1,48 @@\n+boolean checkEquivalenceHelper(JSType that, boolean tolerateUnknowns) {\n+    if (this \u003d\u003d that) {\n+        return true;\n+    }\n+    boolean thisUnknown \u003d isUnknownType();\n+    boolean thatUnknown \u003d that.isUnknownType();\n+    if (isUnknownType() || that.isUnknownType()) {\n+        if (tolerateUnknowns) {\n+            return thisUnknown \u0026\u0026 thatUnknown;\n+        } else if (thisUnknown \u0026\u0026 thatUnknown \u0026\u0026 (isNominalType() ^ that.isNominalType())) {\n+            return false;\n+        }\n+    }\n+    if (isUnionType() \u0026\u0026 that.isUnionType()) {\n+        return this.toMaybeUnionType().checkUnionEquivalenceHelper(that.toMaybeUnionType(), tolerateUnknowns);\n+    }\n+    if (isFunctionType() \u0026\u0026 that.isFunctionType()) {\n+        return this.toMaybeFunctionType().checkFunctionEquivalenceHelper(that.toMaybeFunctionType(), tolerateUnknowns);\n+    }\n+    if (isRecordType() \u0026\u0026 that.isRecordType()) {\n+        return this.toMaybeRecordType().checkRecordEquivalenceHelper(that.toMaybeRecordType(), tolerateUnknowns);\n+    }\n+    ParameterizedType thisParamType \u003d toMaybeParameterizedType();\n+    ParameterizedType thatParamType \u003d that.toMaybeParameterizedType();\n+    if (thisParamType !\u003d null || thatParamType !\u003d null) {\n+        boolean paramsMatch \u003d false;\n+        if (thisParamType !\u003d null \u0026\u0026 thatParamType !\u003d null) {\n+            paramsMatch \u003d thisParamType.getParameterType().checkEquivalenceHelper(thatParamType.getParameterType(), tolerateUnknowns);\n+        } else if (tolerateUnknowns) {\n+            paramsMatch \u003d true;\n+        } else {\n+            paramsMatch \u003d false;\n+        }\n+        JSType thisRootType \u003d thisParamType \u003d\u003d null ? this : thisParamType.getReferencedTypeInternal();\n+        JSType thatRootType \u003d thatParamType \u003d\u003d null ? that : thatParamType.getReferencedTypeInternal();\n+        return paramsMatch \u0026\u0026 thisRootType.checkEquivalenceHelper(thatRootType, tolerateUnknowns);\n+    }\n+    if (isNominalType() \u0026\u0026 that.isNominalType()) {\n+        return toObjectType().getReferenceName().equals(that.toObjectType().getReferenceName());\n+    }\n+    if (this instanceof ProxyObjectType) {\n+        return ((ProxyObjectType) this).getReferencedTypeInternal().checkEquivalenceHelper(that, tolerateUnknowns);\n+    }\n+    if (that instanceof ProxyObjectType) {\n+        return checkEquivalenceHelper(((ProxyObjectType) that).getReferencedTypeInternal(), tolerateUnknowns);\n+    }\n+    return this \u003d\u003d that;\n+}\n\\ No newline at end of file\n",
      "actualSource": "boolean checkEquivalenceHelper(JSType that, boolean tolerateUnknowns) {\n    if (this \u003d\u003d that) {\n        return true;\n    }\n    boolean thisUnknown \u003d isUnknownType();\n    boolean thatUnknown \u003d that.isUnknownType();\n    if (isUnknownType() || that.isUnknownType()) {\n        if (tolerateUnknowns) {\n            return thisUnknown \u0026\u0026 thatUnknown;\n        } else if (thisUnknown \u0026\u0026 thatUnknown \u0026\u0026 (isNominalType() ^ that.isNominalType())) {\n            return false;\n        }\n    }\n    if (isUnionType() \u0026\u0026 that.isUnionType()) {\n        return this.toMaybeUnionType().checkUnionEquivalenceHelper(that.toMaybeUnionType(), tolerateUnknowns);\n    }\n    if (isFunctionType() \u0026\u0026 that.isFunctionType()) {\n        return this.toMaybeFunctionType().checkFunctionEquivalenceHelper(that.toMaybeFunctionType(), tolerateUnknowns);\n    }\n    if (isRecordType() \u0026\u0026 that.isRecordType()) {\n        return this.toMaybeRecordType().checkRecordEquivalenceHelper(that.toMaybeRecordType(), tolerateUnknowns);\n    }\n    ParameterizedType thisParamType \u003d toMaybeParameterizedType();\n    ParameterizedType thatParamType \u003d that.toMaybeParameterizedType();\n    if (thisParamType !\u003d null || thatParamType !\u003d null) {\n        boolean paramsMatch \u003d false;\n        if (thisParamType !\u003d null \u0026\u0026 thatParamType !\u003d null) {\n            paramsMatch \u003d thisParamType.getParameterType().checkEquivalenceHelper(thatParamType.getParameterType(), tolerateUnknowns);\n        } else if (tolerateUnknowns) {\n            paramsMatch \u003d true;\n        } else {\n            paramsMatch \u003d false;\n        }\n        JSType thisRootType \u003d thisParamType \u003d\u003d null ? this : thisParamType.getReferencedTypeInternal();\n        JSType thatRootType \u003d thatParamType \u003d\u003d null ? that : thatParamType.getReferencedTypeInternal();\n        return paramsMatch \u0026\u0026 thisRootType.checkEquivalenceHelper(thatRootType, tolerateUnknowns);\n    }\n    if (isNominalType() \u0026\u0026 that.isNominalType()) {\n        return toObjectType().getReferenceName().equals(that.toObjectType().getReferenceName());\n    }\n    if (this instanceof ProxyObjectType) {\n        return ((ProxyObjectType) this).getReferencedTypeInternal().checkEquivalenceHelper(that, tolerateUnknowns);\n    }\n    if (that instanceof ProxyObjectType) {\n        return checkEquivalenceHelper(((ProxyObjectType) that).getReferencedTypeInternal(), tolerateUnknowns);\n    }\n    return this \u003d\u003d that;\n}",
      "path": "src/com/google/javascript/rhino/jstype/JSType.java",
      "functionStartLine": 505,
      "functionName": "checkEquivalenceHelper",
      "functionAnnotation": "",
      "functionDoc": "An equivalence visitor.\n"
    }
  }
}