{
  "origin": "codeshovel",
  "repositoryName": "Closure-133b",
  "repositoryPath": "/tmp/Closure-133b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FunctionType.java",
  "functionName": "setPrototypeBasedOn",
  "functionId": "setPrototypeBasedOn___baseType-ObjectType__propertyNode-Node",
  "sourceFilePath": "src/com/google/javascript/rhino/jstype/FunctionType.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 396,
  "functionEndLine": 421,
  "numCommitsSeen": 148,
  "timeTaken": 4275,
  "changeHistory": [
    "d71162d4337d5d12efe41d2debf7e565c2e8b871",
    "f1be9f1d6bad1a138a4db2ca50036737a370095d",
    "5c695ce6ca5095ba764d34e634c20f65d8a558e2",
    "7e9b8336568ea7f05c33e1b58eb67fa6d4eee756",
    "5fa514bee8f76534232e4653eaf16cd416e08012",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "d71162d4337d5d12efe41d2debf7e565c2e8b871": "Ybodychange",
    "f1be9f1d6bad1a138a4db2ca50036737a370095d": "Ybodychange",
    "5c695ce6ca5095ba764d34e634c20f65d8a558e2": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange,Ydocchange)",
    "7e9b8336568ea7f05c33e1b58eb67fa6d4eee756": "Ybodychange",
    "5fa514bee8f76534232e4653eaf16cd416e08012": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d71162d4337d5d12efe41d2debf7e565c2e8b871": {
      "type": "Ybodychange",
      "commitMessage": "\nDetect when the prototype property of a @struct constructor is assigned to an unannotated object literal.\n\nR\u003dnicksantos\nDELTA\u003d30  (17 added, 2 deleted, 11 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5718\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2282 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/26/12, 10:29 AM",
      "commitName": "d71162d4337d5d12efe41d2debf7e565c2e8b871",
      "commitAuthor": "dimvar@google.com",
      "commitDateOld": "10/24/12, 2:07 PM",
      "commitNameOld": "177d001a30c568037141e555d84f9bd28d3d2d86",
      "commitAuthorOld": "izaakr@google.com",
      "daysBetweenCommits": 1.85,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "void setPrototypeBasedOn(ObjectType baseType, Node propertyNode) {\n    if (baseType.hasReferenceName() || isNativeObjectType() || baseType.isFunctionPrototypeType()) {\n        baseType \u003d new PrototypeObjectType(registry, getReferenceName() + \".prototype\", baseType);\n    }\n    setPrototype(baseType, propertyNode);\n}",
      "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
      "functionStartLine": 395,
      "functionName": "setPrototypeBasedOn",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,6 +1,6 @@\n void setPrototypeBasedOn(ObjectType baseType, Node propertyNode) {\n     if (baseType.hasReferenceName() || isNativeObjectType() || baseType.isFunctionPrototypeType()) {\n-        baseType \u003d new PrototypeObjectType(registry, this.getReferenceName() + \".prototype\", baseType);\n+        baseType \u003d new PrototypeObjectType(registry, getReferenceName() + \".prototype\", baseType);\n     }\n     setPrototype(baseType, propertyNode);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f1be9f1d6bad1a138a4db2ca50036737a370095d": {
      "type": "Ybodychange",
      "commitMessage": "\nFix a nasty bug where properties on one prototype were leaking onto\nunrelated prototypes\n\nR\u003dacleung\nDELTA\u003d84  (65 added, 1 deleted, 18 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d4450\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1855 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/29/12, 7:42 PM",
      "commitName": "f1be9f1d6bad1a138a4db2ca50036737a370095d",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "3/12/12, 1:45 PM",
      "commitNameOld": "b742849cc99956b4b2d89eda4d9bf2eac5429e95",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 17.25,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "actualSource": "void setPrototypeBasedOn(ObjectType baseType, Node propertyNode) {\n    if (baseType.hasReferenceName() || isNativeObjectType() || baseType.isFunctionPrototypeType()) {\n        baseType \u003d new PrototypeObjectType(registry, this.getReferenceName() + \".prototype\", baseType);\n    }\n    setPrototype(baseType, propertyNode);\n}",
      "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
      "functionStartLine": 341,
      "functionName": "setPrototypeBasedOn",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,6 +1,6 @@\n void setPrototypeBasedOn(ObjectType baseType, Node propertyNode) {\n-    if (baseType.hasReferenceName() || isNativeObjectType() || baseType.isFunctionPrototypeType() || !(baseType instanceof PrototypeObjectType)) {\n+    if (baseType.hasReferenceName() || isNativeObjectType() || baseType.isFunctionPrototypeType()) {\n         baseType \u003d new PrototypeObjectType(registry, this.getReferenceName() + \".prototype\", baseType);\n     }\n-    setPrototype((PrototypeObjectType) baseType, propertyNode);\n+    setPrototype(baseType, propertyNode);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5c695ce6ca5095ba764d34e634c20f65d8a558e2": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange,Ydocchange)",
      "commitMessage": "\nProper source information for function prototypes\n\nR\u003dacleung\nDELTA\u003d343  (190 added, 106 deleted, 47 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3216\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1424 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/8/11, 7:15 AM",
      "commitName": "5c695ce6ca5095ba764d34e634c20f65d8a558e2",
      "commitAuthor": "nicksantos@google.com",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "\nProper source information for function prototypes\n\nR\u003dacleung\nDELTA\u003d343  (190 added, 106 deleted, 47 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3216\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1424 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "9/8/11, 7:15 AM",
          "commitName": "5c695ce6ca5095ba764d34e634c20f65d8a558e2",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "8/31/11, 7:30 PM",
          "commitNameOld": "7e9b8336568ea7f05c33e1b58eb67fa6d4eee756",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 7.49,
          "commitsBetweenForRepo": 23,
          "commitsBetweenForFile": 1,
          "actualSource": "void setPrototypeBasedOn(ObjectType baseType, Node propertyNode) {\n    if (baseType.hasReferenceName() || isNativeObjectType() || baseType.isFunctionPrototypeType() || !(baseType instanceof PrototypeObjectType)) {\n        baseType \u003d new PrototypeObjectType(registry, this.getReferenceName() + \".prototype\", baseType);\n    }\n    setPrototype((PrototypeObjectType) baseType, propertyNode);\n}",
          "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
          "functionStartLine": 328,
          "functionName": "setPrototypeBasedOn",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,6 +1,6 @@\n-public void setPrototypeBasedOn(ObjectType baseType) {\n+void setPrototypeBasedOn(ObjectType baseType, Node propertyNode) {\n     if (baseType.hasReferenceName() || isNativeObjectType() || baseType.isFunctionPrototypeType() || !(baseType instanceof PrototypeObjectType)) {\n         baseType \u003d new PrototypeObjectType(registry, this.getReferenceName() + \".prototype\", baseType);\n     }\n-    setPrototype((PrototypeObjectType) baseType);\n+    setPrototype((PrototypeObjectType) baseType, propertyNode);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[baseType-ObjectType]",
            "newValue": "[baseType-ObjectType, propertyNode-Node]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "\nProper source information for function prototypes\n\nR\u003dacleung\nDELTA\u003d343  (190 added, 106 deleted, 47 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3216\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1424 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "9/8/11, 7:15 AM",
          "commitName": "5c695ce6ca5095ba764d34e634c20f65d8a558e2",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "8/31/11, 7:30 PM",
          "commitNameOld": "7e9b8336568ea7f05c33e1b58eb67fa6d4eee756",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 7.49,
          "commitsBetweenForRepo": 23,
          "commitsBetweenForFile": 1,
          "actualSource": "void setPrototypeBasedOn(ObjectType baseType, Node propertyNode) {\n    if (baseType.hasReferenceName() || isNativeObjectType() || baseType.isFunctionPrototypeType() || !(baseType instanceof PrototypeObjectType)) {\n        baseType \u003d new PrototypeObjectType(registry, this.getReferenceName() + \".prototype\", baseType);\n    }\n    setPrototype((PrototypeObjectType) baseType, propertyNode);\n}",
          "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
          "functionStartLine": 328,
          "functionName": "setPrototypeBasedOn",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,6 +1,6 @@\n-public void setPrototypeBasedOn(ObjectType baseType) {\n+void setPrototypeBasedOn(ObjectType baseType, Node propertyNode) {\n     if (baseType.hasReferenceName() || isNativeObjectType() || baseType.isFunctionPrototypeType() || !(baseType instanceof PrototypeObjectType)) {\n         baseType \u003d new PrototypeObjectType(registry, this.getReferenceName() + \".prototype\", baseType);\n     }\n-    setPrototype((PrototypeObjectType) baseType);\n+    setPrototype((PrototypeObjectType) baseType, propertyNode);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nProper source information for function prototypes\n\nR\u003dacleung\nDELTA\u003d343  (190 added, 106 deleted, 47 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3216\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1424 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "9/8/11, 7:15 AM",
          "commitName": "5c695ce6ca5095ba764d34e634c20f65d8a558e2",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "8/31/11, 7:30 PM",
          "commitNameOld": "7e9b8336568ea7f05c33e1b58eb67fa6d4eee756",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 7.49,
          "commitsBetweenForRepo": 23,
          "commitsBetweenForFile": 1,
          "actualSource": "void setPrototypeBasedOn(ObjectType baseType, Node propertyNode) {\n    if (baseType.hasReferenceName() || isNativeObjectType() || baseType.isFunctionPrototypeType() || !(baseType instanceof PrototypeObjectType)) {\n        baseType \u003d new PrototypeObjectType(registry, this.getReferenceName() + \".prototype\", baseType);\n    }\n    setPrototype((PrototypeObjectType) baseType, propertyNode);\n}",
          "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
          "functionStartLine": 328,
          "functionName": "setPrototypeBasedOn",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,6 +1,6 @@\n-public void setPrototypeBasedOn(ObjectType baseType) {\n+void setPrototypeBasedOn(ObjectType baseType, Node propertyNode) {\n     if (baseType.hasReferenceName() || isNativeObjectType() || baseType.isFunctionPrototypeType() || !(baseType instanceof PrototypeObjectType)) {\n         baseType \u003d new PrototypeObjectType(registry, this.getReferenceName() + \".prototype\", baseType);\n     }\n-    setPrototype((PrototypeObjectType) baseType);\n+    setPrototype((PrototypeObjectType) baseType, propertyNode);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "\nProper source information for function prototypes\n\nR\u003dacleung\nDELTA\u003d343  (190 added, 106 deleted, 47 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3216\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1424 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "9/8/11, 7:15 AM",
          "commitName": "5c695ce6ca5095ba764d34e634c20f65d8a558e2",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "8/31/11, 7:30 PM",
          "commitNameOld": "7e9b8336568ea7f05c33e1b58eb67fa6d4eee756",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 7.49,
          "commitsBetweenForRepo": 23,
          "commitsBetweenForFile": 1,
          "actualSource": "void setPrototypeBasedOn(ObjectType baseType, Node propertyNode) {\n    if (baseType.hasReferenceName() || isNativeObjectType() || baseType.isFunctionPrototypeType() || !(baseType instanceof PrototypeObjectType)) {\n        baseType \u003d new PrototypeObjectType(registry, this.getReferenceName() + \".prototype\", baseType);\n    }\n    setPrototype((PrototypeObjectType) baseType, propertyNode);\n}",
          "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
          "functionStartLine": 328,
          "functionName": "setPrototypeBasedOn",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,6 +1,6 @@\n-public void setPrototypeBasedOn(ObjectType baseType) {\n+void setPrototypeBasedOn(ObjectType baseType, Node propertyNode) {\n     if (baseType.hasReferenceName() || isNativeObjectType() || baseType.isFunctionPrototypeType() || !(baseType instanceof PrototypeObjectType)) {\n         baseType \u003d new PrototypeObjectType(registry, this.getReferenceName() + \".prototype\", baseType);\n     }\n-    setPrototype((PrototypeObjectType) baseType);\n+    setPrototype((PrototypeObjectType) baseType, propertyNode);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Sets the prototype, creating the prototype object from the given\nbase type.\n\n@param baseType The base type.\n",
            "newValue": ""
          }
        }
      ]
    },
    "7e9b8336568ea7f05c33e1b58eb67fa6d4eee756": {
      "type": "Ybodychange",
      "commitMessage": "\nSupport chrome-team\u0027s style of defining prototypes.\nFixes issue 537\n\nR\u003dacleung\nDELTA\u003d149  (127 added, 19 deleted, 3 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3173\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1401 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/31/11, 7:30 PM",
      "commitName": "7e9b8336568ea7f05c33e1b58eb67fa6d4eee756",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "8/25/11, 3:00 PM",
      "commitNameOld": "2e48f3ae25431bfa204db0bba2eeb47191659cdb",
      "commitAuthorOld": "bashir@google.com",
      "daysBetweenCommits": 6.19,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "public void setPrototypeBasedOn(ObjectType baseType) {\n    if (baseType.hasReferenceName() || isNativeObjectType() || baseType.isFunctionPrototypeType() || !(baseType instanceof PrototypeObjectType)) {\n        baseType \u003d new PrototypeObjectType(registry, this.getReferenceName() + \".prototype\", baseType);\n    }\n    setPrototype((PrototypeObjectType) baseType);\n}",
      "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
      "functionStartLine": 322,
      "functionName": "setPrototypeBasedOn",
      "functionAnnotation": "",
      "functionDoc": "Sets the prototype, creating the prototype object from the given\nbase type.\n\n@param baseType The base type.\n",
      "diff": "@@ -1,6 +1,6 @@\n public void setPrototypeBasedOn(ObjectType baseType) {\n-    if (baseType.hasReferenceName() || baseType.isUnknownType() || isNativeObjectType() || baseType.isFunctionPrototypeType() || !(baseType instanceof PrototypeObjectType)) {\n+    if (baseType.hasReferenceName() || isNativeObjectType() || baseType.isFunctionPrototypeType() || !(baseType instanceof PrototypeObjectType)) {\n         baseType \u003d new PrototypeObjectType(registry, this.getReferenceName() + \".prototype\", baseType);\n     }\n     setPrototype((PrototypeObjectType) baseType);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5fa514bee8f76534232e4653eaf16cd416e08012": {
      "type": "Ybodychange",
      "commitMessage": "\nChange how Function prototypes are represented in the type\nsystem.  This fixes lots of bugs when an anonymous object is\nthe prototype, and will make life a lot easier for IDEs.\n\nR\u003djohnlenz\nDELTA\u003d370  (129 added, 177 deleted, 64 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3135\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1389 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/25/11, 8:10 AM",
      "commitName": "5fa514bee8f76534232e4653eaf16cd416e08012",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "8/22/11, 11:38 AM",
      "commitNameOld": "1aaaaa9fe982beb4cd34edb0f7452a3c6da199d9",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 2.86,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "actualSource": "public void setPrototypeBasedOn(ObjectType baseType) {\n    if (baseType.hasReferenceName() || baseType.isUnknownType() || isNativeObjectType() || baseType.isFunctionPrototypeType() || !(baseType instanceof PrototypeObjectType)) {\n        baseType \u003d new PrototypeObjectType(registry, this.getReferenceName() + \".prototype\", baseType);\n    }\n    setPrototype((PrototypeObjectType) baseType);\n}",
      "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
      "functionStartLine": 322,
      "functionName": "setPrototypeBasedOn",
      "functionAnnotation": "",
      "functionDoc": "Sets the prototype, creating the prototype object from the given\nbase type.\n\n@param baseType The base type.\n",
      "diff": "@@ -1,7 +1,6 @@\n public void setPrototypeBasedOn(ObjectType baseType) {\n-    if (prototype \u003d\u003d null) {\n-        setPrototype(new FunctionPrototypeType(registry, this, baseType, isNativeObjectType()));\n-    } else {\n-        prototype.setImplicitPrototype(baseType);\n+    if (baseType.hasReferenceName() || baseType.isUnknownType() || isNativeObjectType() || baseType.isFunctionPrototypeType() || !(baseType instanceof PrototypeObjectType)) {\n+        baseType \u003d new PrototypeObjectType(registry, this.getReferenceName() + \".prototype\", baseType);\n     }\n+    setPrototype((PrototypeObjectType) baseType);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,7 @@\n+public void setPrototypeBasedOn(ObjectType baseType) {\n+    if (prototype \u003d\u003d null) {\n+        setPrototype(new FunctionPrototypeType(registry, this, baseType, isNativeObjectType()));\n+    } else {\n+        prototype.setImplicitPrototype(baseType);\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "public void setPrototypeBasedOn(ObjectType baseType) {\n    if (prototype \u003d\u003d null) {\n        setPrototype(new FunctionPrototypeType(registry, this, baseType, isNativeObjectType()));\n    } else {\n        prototype.setImplicitPrototype(baseType);\n    }\n}",
      "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
      "functionStartLine": 320,
      "functionName": "setPrototypeBasedOn",
      "functionAnnotation": "",
      "functionDoc": "Sets the prototype, creating the prototype object from the given\nbase type.\n\n@param baseType The base type.\n"
    }
  }
}