{
  "origin": "codeshovel",
  "repositoryName": "Closure-133b",
  "repositoryPath": "/tmp/Closure-133b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JsDocInfoParser.java",
  "functionName": "parseAndRecordTypeNode",
  "functionId": "parseAndRecordTypeNode___token-JsDocToken__lineno-int__startCharno-int__matchingLC-boolean__onlyParseSimpleNames-boolean",
  "sourceFilePath": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
  "functionAnnotation": "",
  "functionDoc": "Looks for a parameter type expression at the current token and if found,\nreturns it. Note that this method consumes input.\n\n@param token The current token.\n@param lineno The line of the type expression.\n@param startCharno The starting character position of the type expression.\n@param matchingLC Whether the type expression starts with a \"{\".\n@param onlyParseSimpleNames If true, only simple type names are parsed\n    (via a call to parseTypeNameAnnotation instead of\n    parseTypeExpressionAnnotation).\n@return The type expression found or null if none.\n",
  "functionStartLine": 1227,
  "functionEndLine": 1248,
  "numCommitsSeen": 72,
  "timeTaken": 8008,
  "changeHistory": [
    "8d251a4f194ddf5562efda7f69a621d334936708",
    "ff67789e6125face69d6dc28697121cb3b6df854",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "8d251a4f194ddf5562efda7f69a621d334936708": "Ybodychange",
    "ff67789e6125face69d6dc28697121cb3b6df854": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8d251a4f194ddf5562efda7f69a621d334936708": {
      "type": "Ybodychange",
      "commitMessage": "\nRemove useless Node annotation\n\nR\u003dnicksantos\nDELTA\u003d12  (0 added, 12 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5540\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2213 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/24/12, 12:10 PM",
      "commitName": "8d251a4f194ddf5562efda7f69a621d334936708",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "9/4/12, 6:11 PM",
      "commitNameOld": "f93b77f649d5af99e53ead426561cb62b09e2dd2",
      "commitAuthorOld": "dimvar@google.com",
      "daysBetweenCommits": 19.75,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "actualSource": "private Node parseAndRecordTypeNode(JsDocToken token, int lineno, int startCharno, boolean matchingLC, boolean onlyParseSimpleNames) {\n    Node typeNode \u003d null;\n    if (onlyParseSimpleNames) {\n        typeNode \u003d parseTypeNameAnnotation(token);\n    } else {\n        typeNode \u003d parseTypeExpressionAnnotation(token);\n    }\n    if (typeNode !\u003d null) {\n        int endLineno \u003d stream.getLineno();\n        int endCharno \u003d stream.getCharno();\n        jsdocBuilder.markTypeNode(typeNode, lineno, startCharno, endLineno, endCharno, matchingLC);\n    }\n    return typeNode;\n}",
      "path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
      "functionStartLine": 1156,
      "functionName": "parseAndRecordTypeNode",
      "functionAnnotation": "",
      "functionDoc": "Looks for a parameter type expression at the current token and if found,\nreturns it. Note that this method consumes input.\n\n@param token The current token.\n@param lineno The line of the type expression.\n@param startCharno The starting character position of the type expression.\n@param matchingLC Whether the type expression starts with a \"{\".\n@param onlyParseSimpleNames If true, only simple type names are parsed\n    (via a call to parseTypeNameAnnotation instead of\n    parseTypeExpressionAnnotation).\n@return The type expression found or null if none.\n",
      "diff": "@@ -1,17 +1,14 @@\n private Node parseAndRecordTypeNode(JsDocToken token, int lineno, int startCharno, boolean matchingLC, boolean onlyParseSimpleNames) {\n     Node typeNode \u003d null;\n     if (onlyParseSimpleNames) {\n         typeNode \u003d parseTypeNameAnnotation(token);\n     } else {\n         typeNode \u003d parseTypeExpressionAnnotation(token);\n     }\n-    if (typeNode !\u003d null \u0026\u0026 !matchingLC) {\n-        typeNode.putBooleanProp(Node.BRACELESS_TYPE, true);\n-    }\n     if (typeNode !\u003d null) {\n         int endLineno \u003d stream.getLineno();\n         int endCharno \u003d stream.getCharno();\n         jsdocBuilder.markTypeNode(typeNode, lineno, startCharno, endLineno, endCharno, matchingLC);\n     }\n     return typeNode;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ff67789e6125face69d6dc28697121cb3b6df854": {
      "type": "Ybodychange",
      "commitMessage": "\nFix a bunch of bugs in marker generation, and add lots of inline\nassertions to prevent this from regressing.\nRight now, Grok has a bunch of checks to work around these bugs,\nand we would like to get rid of them.\n\nR\u003djschorr,tylerg\nDELTA\u003d272  (134 added, 14 deleted, 124 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3268\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1442 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/14/11, 8:18 AM",
      "commitName": "ff67789e6125face69d6dc28697121cb3b6df854",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "9/12/11, 4:16 PM",
      "commitNameOld": "9b0cdf5103dc9211cf138389d901d056b86c7292",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 1.67,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "private Node parseAndRecordTypeNode(JsDocToken token, int lineno, int startCharno, boolean matchingLC, boolean onlyParseSimpleNames) {\n    Node typeNode \u003d null;\n    if (onlyParseSimpleNames) {\n        typeNode \u003d parseTypeNameAnnotation(token);\n    } else {\n        typeNode \u003d parseTypeExpressionAnnotation(token);\n    }\n    if (typeNode !\u003d null \u0026\u0026 !matchingLC) {\n        typeNode.putBooleanProp(Node.BRACELESS_TYPE, true);\n    }\n    if (typeNode !\u003d null) {\n        int endLineno \u003d stream.getLineno();\n        int endCharno \u003d stream.getCharno();\n        jsdocBuilder.markTypeNode(typeNode, lineno, startCharno, endLineno, endCharno, matchingLC);\n    }\n    return typeNode;\n}",
      "path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
      "functionStartLine": 1126,
      "functionName": "parseAndRecordTypeNode",
      "functionAnnotation": "",
      "functionDoc": "Looks for a parameter type expression at the current token and if found,\nreturns it. Note that this method consumes input.\n\n@param token The current token.\n@param lineno The line of the type expression.\n@param startCharno The starting character position of the type expression.\n@param matchingLC Whether the type expression starts with a \"{\".\n@param onlyParseSimpleNames If true, only simple type names are parsed\n    (via a call to parseTypeNameAnnotation instead of\n    parseTypeExpressionAnnotation).\n@return The type expression found or null if none.\n",
      "diff": "@@ -1,14 +1,17 @@\n private Node parseAndRecordTypeNode(JsDocToken token, int lineno, int startCharno, boolean matchingLC, boolean onlyParseSimpleNames) {\n     Node typeNode \u003d null;\n     if (onlyParseSimpleNames) {\n         typeNode \u003d parseTypeNameAnnotation(token);\n     } else {\n         typeNode \u003d parseTypeExpressionAnnotation(token);\n     }\n     if (typeNode !\u003d null \u0026\u0026 !matchingLC) {\n         typeNode.putBooleanProp(Node.BRACELESS_TYPE, true);\n     }\n-    int endCharno \u003d stream.getCharno();\n-    jsdocBuilder.markTypeNode(typeNode, lineno, startCharno, endCharno, matchingLC);\n+    if (typeNode !\u003d null) {\n+        int endLineno \u003d stream.getLineno();\n+        int endCharno \u003d stream.getCharno();\n+        jsdocBuilder.markTypeNode(typeNode, lineno, startCharno, endLineno, endCharno, matchingLC);\n+    }\n     return typeNode;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,14 @@\n+private Node parseAndRecordTypeNode(JsDocToken token, int lineno, int startCharno, boolean matchingLC, boolean onlyParseSimpleNames) {\n+    Node typeNode \u003d null;\n+    if (onlyParseSimpleNames) {\n+        typeNode \u003d parseTypeNameAnnotation(token);\n+    } else {\n+        typeNode \u003d parseTypeExpressionAnnotation(token);\n+    }\n+    if (typeNode !\u003d null \u0026\u0026 !matchingLC) {\n+        typeNode.putBooleanProp(Node.BRACELESS_TYPE, true);\n+    }\n+    int endCharno \u003d stream.getCharno();\n+    jsdocBuilder.markTypeNode(typeNode, lineno, startCharno, endCharno, matchingLC);\n+    return typeNode;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private Node parseAndRecordTypeNode(JsDocToken token, int lineno, int startCharno, boolean matchingLC, boolean onlyParseSimpleNames) {\n    Node typeNode \u003d null;\n    if (onlyParseSimpleNames) {\n        typeNode \u003d parseTypeNameAnnotation(token);\n    } else {\n        typeNode \u003d parseTypeExpressionAnnotation(token);\n    }\n    if (typeNode !\u003d null \u0026\u0026 !matchingLC) {\n        typeNode.putBooleanProp(Node.BRACELESS_TYPE, true);\n    }\n    int endCharno \u003d stream.getCharno();\n    jsdocBuilder.markTypeNode(typeNode, lineno, startCharno, endCharno, matchingLC);\n    return typeNode;\n}",
      "path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
      "functionStartLine": 978,
      "functionName": "parseAndRecordTypeNode",
      "functionAnnotation": "",
      "functionDoc": "Looks for a parameter type expression at the current token and if found,\nreturns it. Note that this method consumes input.\n\n@param token The current token.\n@param lineno The line of the type expression.\n@param startCharno The starting character position of the type expression.\n@param matchingLC Whether the type expression starts with a \"{\".\n@param onlyParseSimpleNames If true, only simple type names are parsed\n    (via a call to parseTypeNameAnnotation instead of\n    parseTypeExpressionAnnotation).\n@return The type expression found or null if none.\n"
    }
  }
}