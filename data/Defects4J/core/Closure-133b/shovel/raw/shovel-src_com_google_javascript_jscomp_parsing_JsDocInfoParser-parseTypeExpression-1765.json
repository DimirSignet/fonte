{
  "origin": "codeshovel",
  "repositoryName": "Closure-133b",
  "repositoryPath": "/tmp/Closure-133b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JsDocInfoParser.java",
  "functionName": "parseTypeExpression",
  "functionId": "parseTypeExpression___token-JsDocToken",
  "sourceFilePath": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
  "functionAnnotation": "",
  "functionDoc": "TypeExpression :\u003d BasicTypeExpression\n    | \u0027?\u0027 BasicTypeExpression\n    | \u0027!\u0027 BasicTypeExpression\n    | BasicTypeExpression \u0027?\u0027\n    | BasicTypeExpression \u0027!\u0027\n    | \u0027?\u0027\n",
  "functionStartLine": 1765,
  "functionEndLine": 1808,
  "numCommitsSeen": 72,
  "timeTaken": 8251,
  "changeHistory": [
    "8a15e3bd039ccbfd48c844dac1b9b7bca6b987d8",
    "3706221fa9c7bec26ea69889da16b03587838708",
    "2dbbe0784ee3e549eb0cc4d679aeddaac1243145",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "8a15e3bd039ccbfd48c844dac1b9b7bca6b987d8": "Ybodychange",
    "3706221fa9c7bec26ea69889da16b03587838708": "Ybodychange",
    "2dbbe0784ee3e549eb0cc4d679aeddaac1243145": "Ymultichange(Ybodychange,Ydocchange)",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8a15e3bd039ccbfd48c844dac1b9b7bca6b987d8": {
      "type": "Ybodychange",
      "commitMessage": "\nfix a bug in the jstype parser, to allow Array.\u003c?\u003e\n\nR\u003ddimvar\nDELTA\u003d9 (7 added, 1 deleted, 1 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d6040\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2421 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/21/12, 2:18 PM",
      "commitName": "8a15e3bd039ccbfd48c844dac1b9b7bca6b987d8",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "12/13/12, 10:28 AM",
      "commitNameOld": "5872088329ac563b52fa695994bbcb5e10623870",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 8.16,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "actualSource": "private Node parseTypeExpression(JsDocToken token) {\n    if (token \u003d\u003d JsDocToken.QMARK) {\n        token \u003d next();\n        if (token \u003d\u003d JsDocToken.COMMA || token \u003d\u003d JsDocToken.EQUALS || token \u003d\u003d JsDocToken.RB || token \u003d\u003d JsDocToken.RC || token \u003d\u003d JsDocToken.RP || token \u003d\u003d JsDocToken.PIPE || token \u003d\u003d JsDocToken.GT) {\n            restoreLookAhead(token);\n            return newNode(Token.QMARK);\n        }\n        return wrapNode(Token.QMARK, parseBasicTypeExpression(token));\n    } else if (token \u003d\u003d JsDocToken.BANG) {\n        return wrapNode(Token.BANG, parseBasicTypeExpression(next()));\n    } else {\n        Node basicTypeExpr \u003d parseBasicTypeExpression(token);\n        if (basicTypeExpr !\u003d null) {\n            if (match(JsDocToken.QMARK)) {\n                next();\n                return wrapNode(Token.QMARK, basicTypeExpr);\n            } else if (match(JsDocToken.BANG)) {\n                next();\n                return wrapNode(Token.BANG, basicTypeExpr);\n            }\n        }\n        return basicTypeExpr;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
      "functionStartLine": 1722,
      "functionName": "parseTypeExpression",
      "functionAnnotation": "",
      "functionDoc": "TypeExpression :\u003d BasicTypeExpression\n    | \u0027?\u0027 BasicTypeExpression\n    | \u0027!\u0027 BasicTypeExpression\n    | BasicTypeExpression \u0027?\u0027\n    | BasicTypeExpression \u0027!\u0027\n    | \u0027?\u0027\n",
      "diff": "@@ -1,24 +1,24 @@\n private Node parseTypeExpression(JsDocToken token) {\n     if (token \u003d\u003d JsDocToken.QMARK) {\n         token \u003d next();\n-        if (token \u003d\u003d JsDocToken.COMMA || token \u003d\u003d JsDocToken.EQUALS || token \u003d\u003d JsDocToken.RB || token \u003d\u003d JsDocToken.RC || token \u003d\u003d JsDocToken.RP || token \u003d\u003d JsDocToken.PIPE) {\n+        if (token \u003d\u003d JsDocToken.COMMA || token \u003d\u003d JsDocToken.EQUALS || token \u003d\u003d JsDocToken.RB || token \u003d\u003d JsDocToken.RC || token \u003d\u003d JsDocToken.RP || token \u003d\u003d JsDocToken.PIPE || token \u003d\u003d JsDocToken.GT) {\n             restoreLookAhead(token);\n             return newNode(Token.QMARK);\n         }\n         return wrapNode(Token.QMARK, parseBasicTypeExpression(token));\n     } else if (token \u003d\u003d JsDocToken.BANG) {\n         return wrapNode(Token.BANG, parseBasicTypeExpression(next()));\n     } else {\n         Node basicTypeExpr \u003d parseBasicTypeExpression(token);\n         if (basicTypeExpr !\u003d null) {\n             if (match(JsDocToken.QMARK)) {\n                 next();\n                 return wrapNode(Token.QMARK, basicTypeExpr);\n             } else if (match(JsDocToken.BANG)) {\n                 next();\n                 return wrapNode(Token.BANG, basicTypeExpr);\n             }\n         }\n         return basicTypeExpr;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3706221fa9c7bec26ea69889da16b03587838708": {
      "type": "Ybodychange",
      "commitMessage": "\nfix a minor type parsing bug\nAdd some tests to ensure that you can use unknown variable argument\nlists to silence warnings\n\nR\u003dacleung\nDELTA\u003d83  (83 added, 0 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d4193\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1771 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/8/12, 3:00 PM",
      "commitName": "3706221fa9c7bec26ea69889da16b03587838708",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "1/10/12, 11:06 AM",
      "commitNameOld": "5f09c4d523e715607f7f74854c4916e279b5b562",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 29.16,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "actualSource": "private Node parseTypeExpression(JsDocToken token) {\n    if (token \u003d\u003d JsDocToken.QMARK) {\n        token \u003d next();\n        if (token \u003d\u003d JsDocToken.COMMA || token \u003d\u003d JsDocToken.EQUALS || token \u003d\u003d JsDocToken.RB || token \u003d\u003d JsDocToken.RC || token \u003d\u003d JsDocToken.RP || token \u003d\u003d JsDocToken.PIPE) {\n            restoreLookAhead(token);\n            return newNode(Token.QMARK);\n        }\n        return wrapNode(Token.QMARK, parseBasicTypeExpression(token));\n    } else if (token \u003d\u003d JsDocToken.BANG) {\n        return wrapNode(Token.BANG, parseBasicTypeExpression(next()));\n    } else {\n        Node basicTypeExpr \u003d parseBasicTypeExpression(token);\n        if (basicTypeExpr !\u003d null) {\n            if (match(JsDocToken.QMARK)) {\n                next();\n                return wrapNode(Token.QMARK, basicTypeExpr);\n            } else if (match(JsDocToken.BANG)) {\n                next();\n                return wrapNode(Token.BANG, basicTypeExpr);\n            }\n        }\n        return basicTypeExpr;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
      "functionStartLine": 1659,
      "functionName": "parseTypeExpression",
      "functionAnnotation": "",
      "functionDoc": "TypeExpression :\u003d BasicTypeExpression\n    | \u0027?\u0027 BasicTypeExpression\n    | \u0027!\u0027 BasicTypeExpression\n    | BasicTypeExpression \u0027?\u0027\n    | BasicTypeExpression \u0027!\u0027\n    | \u0027?\u0027\n",
      "diff": "@@ -1,24 +1,24 @@\n private Node parseTypeExpression(JsDocToken token) {\n     if (token \u003d\u003d JsDocToken.QMARK) {\n         token \u003d next();\n-        if (token \u003d\u003d JsDocToken.COMMA || token \u003d\u003d JsDocToken.EQUALS || token \u003d\u003d JsDocToken.RC || token \u003d\u003d JsDocToken.RP || token \u003d\u003d JsDocToken.PIPE) {\n+        if (token \u003d\u003d JsDocToken.COMMA || token \u003d\u003d JsDocToken.EQUALS || token \u003d\u003d JsDocToken.RB || token \u003d\u003d JsDocToken.RC || token \u003d\u003d JsDocToken.RP || token \u003d\u003d JsDocToken.PIPE) {\n             restoreLookAhead(token);\n             return newNode(Token.QMARK);\n         }\n         return wrapNode(Token.QMARK, parseBasicTypeExpression(token));\n     } else if (token \u003d\u003d JsDocToken.BANG) {\n         return wrapNode(Token.BANG, parseBasicTypeExpression(next()));\n     } else {\n         Node basicTypeExpr \u003d parseBasicTypeExpression(token);\n         if (basicTypeExpr !\u003d null) {\n             if (match(JsDocToken.QMARK)) {\n                 next();\n                 return wrapNode(Token.QMARK, basicTypeExpr);\n             } else if (match(JsDocToken.BANG)) {\n                 next();\n                 return wrapNode(Token.BANG, basicTypeExpr);\n             }\n         }\n         return basicTypeExpr;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2dbbe0784ee3e549eb0cc4d679aeddaac1243145": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "\nChange on 2010/04/09 by nick\n\n        Make it possible to explicitly specify unknown parameter and\n        return types.\n\n        R\u003dnada\n        DELTA\u003d77  (74 added, 0 deleted, 3 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dwjzzsm\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@179 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/9/10, 11:07 AM",
      "commitName": "2dbbe0784ee3e549eb0cc4d679aeddaac1243145",
      "commitAuthor": "Nicholas.J.Santos",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "\nChange on 2010/04/09 by nick\n\n        Make it possible to explicitly specify unknown parameter and\n        return types.\n\n        R\u003dnada\n        DELTA\u003d77  (74 added, 0 deleted, 3 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dwjzzsm\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@179 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "4/9/10, 11:07 AM",
          "commitName": "2dbbe0784ee3e549eb0cc4d679aeddaac1243145",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "4/5/10, 11:58 PM",
          "commitNameOld": "c25df7eca2462861bf42ad8b74215099c3f81ae6",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 3.46,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "private Node parseTypeExpression(JsDocToken token) {\n    if (token \u003d\u003d JsDocToken.QMARK) {\n        token \u003d next();\n        if (token \u003d\u003d JsDocToken.COMMA || token \u003d\u003d JsDocToken.EQUALS || token \u003d\u003d JsDocToken.RC || token \u003d\u003d JsDocToken.RP || token \u003d\u003d JsDocToken.PIPE) {\n            restoreLookAhead(token);\n            return newNode(Token.QMARK);\n        }\n        return wrapNode(Token.QMARK, parseBasicTypeExpression(token));\n    } else if (token \u003d\u003d JsDocToken.BANG) {\n        return wrapNode(Token.BANG, parseBasicTypeExpression(next()));\n    } else {\n        Node basicTypeExpr \u003d parseBasicTypeExpression(token);\n        if (basicTypeExpr !\u003d null) {\n            if (match(JsDocToken.QMARK)) {\n                next();\n                return wrapNode(Token.QMARK, basicTypeExpr);\n            } else if (match(JsDocToken.BANG)) {\n                next();\n                return wrapNode(Token.BANG, basicTypeExpr);\n            }\n        }\n        return basicTypeExpr;\n    }\n}",
          "path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
          "functionStartLine": 1453,
          "functionName": "parseTypeExpression",
          "functionAnnotation": "",
          "functionDoc": "TypeExpression :\u003d BasicTypeExpression\n    | \u0027?\u0027 BasicTypeExpression\n    | \u0027!\u0027 BasicTypeExpression\n    | BasicTypeExpression \u0027?\u0027\n    | BasicTypeExpression \u0027!\u0027\n    | \u0027?\u0027\n",
          "diff": "@@ -1,19 +1,24 @@\n private Node parseTypeExpression(JsDocToken token) {\n     if (token \u003d\u003d JsDocToken.QMARK) {\n-        return wrapNode(Token.QMARK, parseBasicTypeExpression(next()));\n+        token \u003d next();\n+        if (token \u003d\u003d JsDocToken.COMMA || token \u003d\u003d JsDocToken.EQUALS || token \u003d\u003d JsDocToken.RC || token \u003d\u003d JsDocToken.RP || token \u003d\u003d JsDocToken.PIPE) {\n+            restoreLookAhead(token);\n+            return newNode(Token.QMARK);\n+        }\n+        return wrapNode(Token.QMARK, parseBasicTypeExpression(token));\n     } else if (token \u003d\u003d JsDocToken.BANG) {\n         return wrapNode(Token.BANG, parseBasicTypeExpression(next()));\n     } else {\n         Node basicTypeExpr \u003d parseBasicTypeExpression(token);\n         if (basicTypeExpr !\u003d null) {\n             if (match(JsDocToken.QMARK)) {\n                 next();\n                 return wrapNode(Token.QMARK, basicTypeExpr);\n             } else if (match(JsDocToken.BANG)) {\n                 next();\n                 return wrapNode(Token.BANG, basicTypeExpr);\n             }\n         }\n         return basicTypeExpr;\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "\nChange on 2010/04/09 by nick\n\n        Make it possible to explicitly specify unknown parameter and\n        return types.\n\n        R\u003dnada\n        DELTA\u003d77  (74 added, 0 deleted, 3 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dwjzzsm\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@179 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "4/9/10, 11:07 AM",
          "commitName": "2dbbe0784ee3e549eb0cc4d679aeddaac1243145",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "4/5/10, 11:58 PM",
          "commitNameOld": "c25df7eca2462861bf42ad8b74215099c3f81ae6",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 3.46,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "private Node parseTypeExpression(JsDocToken token) {\n    if (token \u003d\u003d JsDocToken.QMARK) {\n        token \u003d next();\n        if (token \u003d\u003d JsDocToken.COMMA || token \u003d\u003d JsDocToken.EQUALS || token \u003d\u003d JsDocToken.RC || token \u003d\u003d JsDocToken.RP || token \u003d\u003d JsDocToken.PIPE) {\n            restoreLookAhead(token);\n            return newNode(Token.QMARK);\n        }\n        return wrapNode(Token.QMARK, parseBasicTypeExpression(token));\n    } else if (token \u003d\u003d JsDocToken.BANG) {\n        return wrapNode(Token.BANG, parseBasicTypeExpression(next()));\n    } else {\n        Node basicTypeExpr \u003d parseBasicTypeExpression(token);\n        if (basicTypeExpr !\u003d null) {\n            if (match(JsDocToken.QMARK)) {\n                next();\n                return wrapNode(Token.QMARK, basicTypeExpr);\n            } else if (match(JsDocToken.BANG)) {\n                next();\n                return wrapNode(Token.BANG, basicTypeExpr);\n            }\n        }\n        return basicTypeExpr;\n    }\n}",
          "path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
          "functionStartLine": 1453,
          "functionName": "parseTypeExpression",
          "functionAnnotation": "",
          "functionDoc": "TypeExpression :\u003d BasicTypeExpression\n    | \u0027?\u0027 BasicTypeExpression\n    | \u0027!\u0027 BasicTypeExpression\n    | BasicTypeExpression \u0027?\u0027\n    | BasicTypeExpression \u0027!\u0027\n    | \u0027?\u0027\n",
          "diff": "@@ -1,19 +1,24 @@\n private Node parseTypeExpression(JsDocToken token) {\n     if (token \u003d\u003d JsDocToken.QMARK) {\n-        return wrapNode(Token.QMARK, parseBasicTypeExpression(next()));\n+        token \u003d next();\n+        if (token \u003d\u003d JsDocToken.COMMA || token \u003d\u003d JsDocToken.EQUALS || token \u003d\u003d JsDocToken.RC || token \u003d\u003d JsDocToken.RP || token \u003d\u003d JsDocToken.PIPE) {\n+            restoreLookAhead(token);\n+            return newNode(Token.QMARK);\n+        }\n+        return wrapNode(Token.QMARK, parseBasicTypeExpression(token));\n     } else if (token \u003d\u003d JsDocToken.BANG) {\n         return wrapNode(Token.BANG, parseBasicTypeExpression(next()));\n     } else {\n         Node basicTypeExpr \u003d parseBasicTypeExpression(token);\n         if (basicTypeExpr !\u003d null) {\n             if (match(JsDocToken.QMARK)) {\n                 next();\n                 return wrapNode(Token.QMARK, basicTypeExpr);\n             } else if (match(JsDocToken.BANG)) {\n                 next();\n                 return wrapNode(Token.BANG, basicTypeExpr);\n             }\n         }\n         return basicTypeExpr;\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "TypeExpression :\u003d BasicTypeExpression\n    | \u0027?\u0027 BasicTypeExpression\n    | \u0027!\u0027 BasicTypeExpression\n    | BasicTypeExpression \u0027?\u0027\n    | BasicTypeExpression \u0027!\u0027\n",
            "newValue": "TypeExpression :\u003d BasicTypeExpression\n    | \u0027?\u0027 BasicTypeExpression\n    | \u0027!\u0027 BasicTypeExpression\n    | BasicTypeExpression \u0027?\u0027\n    | BasicTypeExpression \u0027!\u0027\n    | \u0027?\u0027\n"
          }
        }
      ]
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,19 @@\n+private Node parseTypeExpression(JsDocToken token) {\n+    if (token \u003d\u003d JsDocToken.QMARK) {\n+        return wrapNode(Token.QMARK, parseBasicTypeExpression(next()));\n+    } else if (token \u003d\u003d JsDocToken.BANG) {\n+        return wrapNode(Token.BANG, parseBasicTypeExpression(next()));\n+    } else {\n+        Node basicTypeExpr \u003d parseBasicTypeExpression(token);\n+        if (basicTypeExpr !\u003d null) {\n+            if (match(JsDocToken.QMARK)) {\n+                next();\n+                return wrapNode(Token.QMARK, basicTypeExpr);\n+            } else if (match(JsDocToken.BANG)) {\n+                next();\n+                return wrapNode(Token.BANG, basicTypeExpr);\n+            }\n+        }\n+        return basicTypeExpr;\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private Node parseTypeExpression(JsDocToken token) {\n    if (token \u003d\u003d JsDocToken.QMARK) {\n        return wrapNode(Token.QMARK, parseBasicTypeExpression(next()));\n    } else if (token \u003d\u003d JsDocToken.BANG) {\n        return wrapNode(Token.BANG, parseBasicTypeExpression(next()));\n    } else {\n        Node basicTypeExpr \u003d parseBasicTypeExpression(token);\n        if (basicTypeExpr !\u003d null) {\n            if (match(JsDocToken.QMARK)) {\n                next();\n                return wrapNode(Token.QMARK, basicTypeExpr);\n            } else if (match(JsDocToken.BANG)) {\n                next();\n                return wrapNode(Token.BANG, basicTypeExpr);\n            }\n        }\n        return basicTypeExpr;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
      "functionStartLine": 1491,
      "functionName": "parseTypeExpression",
      "functionAnnotation": "",
      "functionDoc": "TypeExpression :\u003d BasicTypeExpression\n    | \u0027?\u0027 BasicTypeExpression\n    | \u0027!\u0027 BasicTypeExpression\n    | BasicTypeExpression \u0027?\u0027\n    | BasicTypeExpression \u0027!\u0027\n"
    }
  }
}