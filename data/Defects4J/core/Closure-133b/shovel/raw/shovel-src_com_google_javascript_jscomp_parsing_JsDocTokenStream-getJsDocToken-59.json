{
  "origin": "codeshovel",
  "repositoryName": "Closure-133b",
  "repositoryPath": "/tmp/Closure-133b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JsDocTokenStream.java",
  "functionName": "getJsDocToken",
  "functionId": "getJsDocToken",
  "sourceFilePath": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
  "functionAnnotation": "@SuppressWarnings(\"fallthrough\")",
  "functionDoc": "Tokenizes JSDoc comments.\n",
  "functionStartLine": 59,
  "functionEndLine": 194,
  "numCommitsSeen": 11,
  "timeTaken": 851,
  "changeHistory": [
    "70a5626922ea7e8c98747e22b6986638ba38fadc",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "70a5626922ea7e8c98747e22b6986638ba38fadc": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "70a5626922ea7e8c98747e22b6986638ba38fadc": {
      "type": "Ybodychange",
      "commitMessage": "\nFix various typos, spelling and grammar errors.\nFixes issue 734. \nContributed by Robert Gust Bardon\n\nR\u003dnicksantos\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d4827\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1979 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/18/12, 11:09 AM",
      "commitName": "70a5626922ea7e8c98747e22b6986638ba38fadc",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "1/10/12, 11:06 AM",
      "commitNameOld": "5f09c4d523e715607f7f74854c4916e279b5b562",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 128.96,
      "commitsBetweenForRepo": 220,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"fallthrough\")\nfinal JsDocToken getJsDocToken() {\n    int c;\n    stringBufferTop \u003d 0;\n    for (; ; ) {\n        for (; ; ) {\n            charno \u003d -1;\n            c \u003d getChar();\n            if (c \u003d\u003d EOF_CHAR) {\n                return JsDocToken.EOF;\n            } else if (c \u003d\u003d \u0027\\n\u0027) {\n                return JsDocToken.EOL;\n            } else if (!isJSSpace(c)) {\n                break;\n            }\n        }\n        switch(c) {\n            case \u0027@\u0027:\n                do {\n                    c \u003d getChar();\n                    if (isAlpha(c)) {\n                        addToString(c);\n                    } else {\n                        ungetChar(c);\n                        this.string \u003d getStringFromBuffer();\n                        stringBufferTop \u003d 0;\n                        return JsDocToken.ANNOTATION;\n                    }\n                } while (true);\n            case \u0027*\u0027:\n                if (matchChar(\u0027/\u0027)) {\n                    return JsDocToken.EOC;\n                } else {\n                    return JsDocToken.STAR;\n                }\n            case \u0027,\u0027:\n                return JsDocToken.COMMA;\n            case \u0027\u003e\u0027:\n                return JsDocToken.GT;\n            case \u0027(\u0027:\n                return JsDocToken.LP;\n            case \u0027)\u0027:\n                return JsDocToken.RP;\n            case \u0027{\u0027:\n                return JsDocToken.LC;\n            case \u0027}\u0027:\n                return JsDocToken.RC;\n            case \u0027[\u0027:\n                return JsDocToken.LB;\n            case \u0027]\u0027:\n                return JsDocToken.RB;\n            case \u0027?\u0027:\n                return JsDocToken.QMARK;\n            case \u0027!\u0027:\n                return JsDocToken.BANG;\n            case \u0027:\u0027:\n                return JsDocToken.COLON;\n            case \u0027\u003d\u0027:\n                return JsDocToken.EQUALS;\n            case \u0027|\u0027:\n                matchChar(\u0027|\u0027);\n                return JsDocToken.PIPE;\n            case \u0027.\u0027:\n                c \u003d getChar();\n                if (c \u003d\u003d \u0027\u003c\u0027) {\n                    return JsDocToken.LT;\n                } else {\n                    if (c \u003d\u003d \u0027.\u0027) {\n                        c \u003d getChar();\n                        if (c \u003d\u003d \u0027.\u0027) {\n                            return JsDocToken.ELLIPSIS;\n                        } else {\n                            addToString(\u0027.\u0027);\n                        }\n                    }\n                    ungetBuffer[ungetCursor++] \u003d c;\n                    c \u003d \u0027.\u0027;\n                }\n            default:\n                {\n                    int c1 \u003d c;\n                    addToString(c);\n                    int c2 \u003d getChar();\n                    if (!isJSDocString(c2)) {\n                        ungetChar(c2);\n                        this.string \u003d getStringFromBuffer();\n                        stringBufferTop \u003d 0;\n                        return JsDocToken.STRING;\n                    } else {\n                        do {\n                            c1 \u003d c2;\n                            c2 \u003d getChar();\n                            if (c1 \u003d\u003d \u0027.\u0027 \u0026\u0026 c2 \u003d\u003d \u0027\u003c\u0027) {\n                                ungetChar(c2);\n                                ungetChar(c1);\n                                this.string \u003d getStringFromBuffer();\n                                stringBufferTop \u003d 0;\n                                return JsDocToken.STRING;\n                            } else {\n                                if (isJSDocString(c2)) {\n                                    addToString(c1);\n                                } else {\n                                    ungetChar(c2);\n                                    addToString(c1);\n                                    this.string \u003d getStringFromBuffer();\n                                    stringBufferTop \u003d 0;\n                                    return JsDocToken.STRING;\n                                }\n                            }\n                        } while (true);\n                    }\n                }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
      "functionStartLine": 59,
      "functionName": "getJsDocToken",
      "functionAnnotation": "@SuppressWarnings(\"fallthrough\")",
      "functionDoc": "Tokenizes JSDoc comments.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,115 @@\n+@SuppressWarnings(\"fallthrough\")\n+final JsDocToken getJsDocToken() {\n+    int c;\n+    stringBufferTop \u003d 0;\n+    for (; ; ) {\n+        for (; ; ) {\n+            charno \u003d -1;\n+            c \u003d getChar();\n+            if (c \u003d\u003d EOF_CHAR) {\n+                return JsDocToken.EOF;\n+            } else if (c \u003d\u003d \u0027\\n\u0027) {\n+                return JsDocToken.EOL;\n+            } else if (!isJSSpace(c)) {\n+                break;\n+            }\n+        }\n+        switch(c) {\n+            case \u0027@\u0027:\n+                do {\n+                    c \u003d getChar();\n+                    if (isAlpha(c)) {\n+                        addToString(c);\n+                    } else {\n+                        ungetChar(c);\n+                        this.string \u003d getStringFromBuffer();\n+                        stringBufferTop \u003d 0;\n+                        return JsDocToken.ANNOTATION;\n+                    }\n+                } while (true);\n+            case \u0027*\u0027:\n+                if (matchChar(\u0027/\u0027)) {\n+                    return JsDocToken.EOC;\n+                } else {\n+                    return JsDocToken.STAR;\n+                }\n+            case \u0027,\u0027:\n+                return JsDocToken.COMMA;\n+            case \u0027\u003e\u0027:\n+                return JsDocToken.GT;\n+            case \u0027(\u0027:\n+                return JsDocToken.LP;\n+            case \u0027)\u0027:\n+                return JsDocToken.RP;\n+            case \u0027{\u0027:\n+                return JsDocToken.LC;\n+            case \u0027}\u0027:\n+                return JsDocToken.RC;\n+            case \u0027[\u0027:\n+                return JsDocToken.LB;\n+            case \u0027]\u0027:\n+                return JsDocToken.RB;\n+            case \u0027?\u0027:\n+                return JsDocToken.QMARK;\n+            case \u0027!\u0027:\n+                return JsDocToken.BANG;\n+            case \u0027:\u0027:\n+                return JsDocToken.COLON;\n+            case \u0027\u003d\u0027:\n+                return JsDocToken.EQUALS;\n+            case \u0027|\u0027:\n+                matchChar(\u0027|\u0027);\n+                return JsDocToken.PIPE;\n+            case \u0027.\u0027:\n+                c \u003d getChar();\n+                if (c \u003d\u003d \u0027\u003c\u0027) {\n+                    return JsDocToken.LT;\n+                } else {\n+                    if (c \u003d\u003d \u0027.\u0027) {\n+                        c \u003d getChar();\n+                        if (c \u003d\u003d \u0027.\u0027) {\n+                            return JsDocToken.ELLIPSIS;\n+                        } else {\n+                            addToString(\u0027.\u0027);\n+                        }\n+                    }\n+                    ungetBuffer[ungetCursor++] \u003d c;\n+                    c \u003d \u0027.\u0027;\n+                }\n+            default:\n+                {\n+                    int c1 \u003d c;\n+                    addToString(c);\n+                    int c2 \u003d getChar();\n+                    if (!isJSDocString(c2)) {\n+                        ungetChar(c2);\n+                        this.string \u003d getStringFromBuffer();\n+                        stringBufferTop \u003d 0;\n+                        return JsDocToken.STRING;\n+                    } else {\n+                        do {\n+                            c1 \u003d c2;\n+                            c2 \u003d getChar();\n+                            if (c1 \u003d\u003d \u0027.\u0027 \u0026\u0026 c2 \u003d\u003d \u0027\u003c\u0027) {\n+                                ungetChar(c2);\n+                                ungetChar(c1);\n+                                this.string \u003d getStringFromBuffer();\n+                                stringBufferTop \u003d 0;\n+                                return JsDocToken.STRING;\n+                            } else {\n+                                if (isJSDocString(c2)) {\n+                                    addToString(c1);\n+                                } else {\n+                                    ungetChar(c2);\n+                                    addToString(c1);\n+                                    this.string \u003d getStringFromBuffer();\n+                                    stringBufferTop \u003d 0;\n+                                    return JsDocToken.STRING;\n+                                }\n+                            }\n+                        } while (true);\n+                    }\n+                }\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "@SuppressWarnings(\"fallthrough\")\nfinal JsDocToken getJsDocToken() {\n    int c;\n    stringBufferTop \u003d 0;\n    for (; ; ) {\n        for (; ; ) {\n            charno \u003d -1;\n            c \u003d getChar();\n            if (c \u003d\u003d EOF_CHAR) {\n                return JsDocToken.EOF;\n            } else if (c \u003d\u003d \u0027\\n\u0027) {\n                return JsDocToken.EOL;\n            } else if (!isJSSpace(c)) {\n                break;\n            }\n        }\n        switch(c) {\n            case \u0027@\u0027:\n                do {\n                    c \u003d getChar();\n                    if (isAlpha(c)) {\n                        addToString(c);\n                    } else {\n                        ungetChar(c);\n                        this.string \u003d getStringFromBuffer();\n                        stringBufferTop \u003d 0;\n                        return JsDocToken.ANNOTATION;\n                    }\n                } while (true);\n            case \u0027*\u0027:\n                if (matchChar(\u0027/\u0027)) {\n                    return JsDocToken.EOC;\n                } else {\n                    return JsDocToken.STAR;\n                }\n            case \u0027,\u0027:\n                return JsDocToken.COMMA;\n            case \u0027\u003e\u0027:\n                return JsDocToken.GT;\n            case \u0027(\u0027:\n                return JsDocToken.LP;\n            case \u0027)\u0027:\n                return JsDocToken.RP;\n            case \u0027{\u0027:\n                return JsDocToken.LC;\n            case \u0027}\u0027:\n                return JsDocToken.RC;\n            case \u0027[\u0027:\n                return JsDocToken.LB;\n            case \u0027]\u0027:\n                return JsDocToken.RB;\n            case \u0027?\u0027:\n                return JsDocToken.QMARK;\n            case \u0027!\u0027:\n                return JsDocToken.BANG;\n            case \u0027:\u0027:\n                return JsDocToken.COLON;\n            case \u0027\u003d\u0027:\n                return JsDocToken.EQUALS;\n            case \u0027|\u0027:\n                matchChar(\u0027|\u0027);\n                return JsDocToken.PIPE;\n            case \u0027.\u0027:\n                c \u003d getChar();\n                if (c \u003d\u003d \u0027\u003c\u0027) {\n                    return JsDocToken.LT;\n                } else {\n                    if (c \u003d\u003d \u0027.\u0027) {\n                        c \u003d getChar();\n                        if (c \u003d\u003d \u0027.\u0027) {\n                            return JsDocToken.ELLIPSIS;\n                        } else {\n                            addToString(\u0027.\u0027);\n                        }\n                    }\n                    ungetBuffer[ungetCursor++] \u003d c;\n                    c \u003d \u0027.\u0027;\n                }\n            default:\n                {\n                    int c1 \u003d c;\n                    addToString(c);\n                    int c2 \u003d getChar();\n                    if (!isJSDocString(c2)) {\n                        ungetChar(c2);\n                        this.string \u003d getStringFromBuffer();\n                        stringBufferTop \u003d 0;\n                        return JsDocToken.STRING;\n                    } else {\n                        do {\n                            c1 \u003d c2;\n                            c2 \u003d getChar();\n                            if (c1 \u003d\u003d \u0027.\u0027 \u0026\u0026 c2 \u003d\u003d \u0027\u003c\u0027) {\n                                ungetChar(c2);\n                                ungetChar(c1);\n                                this.string \u003d getStringFromBuffer();\n                                stringBufferTop \u003d 0;\n                                return JsDocToken.STRING;\n                            } else {\n                                if (isJSDocString(c2)) {\n                                    addToString(c1);\n                                } else {\n                                    ungetChar(c2);\n                                    addToString(c1);\n                                    this.string \u003d getStringFromBuffer();\n                                    stringBufferTop \u003d 0;\n                                    return JsDocToken.STRING;\n                                }\n                            }\n                        } while (true);\n                    }\n                }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
      "functionStartLine": 61,
      "functionName": "getJsDocToken",
      "functionAnnotation": "@SuppressWarnings(\"fallthrough\")",
      "functionDoc": "Tokenizes JSDoc comments.\n"
    }
  }
}