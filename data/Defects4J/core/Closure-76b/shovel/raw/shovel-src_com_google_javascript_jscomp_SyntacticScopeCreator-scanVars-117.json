{
  "origin": "codeshovel",
  "repositoryName": "Closure-76b",
  "repositoryPath": "/tmp/Closure-76b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SyntacticScopeCreator.java",
  "functionName": "scanVars",
  "functionId": "scanVars___n-Node__parent-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
  "functionAnnotation": "",
  "functionDoc": "Scans and gather variables declarations under a Node\n",
  "functionStartLine": 117,
  "functionEndLine": 170,
  "numCommitsSeen": 13,
  "timeTaken": 668,
  "changeHistory": [
    "86caf52b53f53d8b83e9c1092f4b15ddeb6ca5bb",
    "6d8fd424925b186d720112e4f14e6898386a66b0",
    "ebb59a97610015bc41bda7f458dd1428a3a3e335",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "86caf52b53f53d8b83e9c1092f4b15ddeb6ca5bb": "Ybodychange",
    "6d8fd424925b186d720112e4f14e6898386a66b0": "Ybodychange",
    "ebb59a97610015bc41bda7f458dd1428a3a3e335": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "86caf52b53f53d8b83e9c1092f4b15ddeb6ca5bb": {
      "type": "Ybodychange",
      "commitMessage": "\nIf a variable is doubly declared in externs and sources,\nwe should keep around both VAR keywords.\nFixes issue 290\n\nR\u003djohnlenz\nDELTA\u003d93  (45 added, 19 deleted, 29 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d107\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@614 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/9/10, 12:58 PM",
      "commitName": "86caf52b53f53d8b83e9c1092f4b15ddeb6ca5bb",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "11/11/10, 9:42 PM",
      "commitNameOld": "df223efd38c514d584f00d076488ab9a02011492",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 27.64,
      "commitsBetweenForRepo": 67,
      "commitsBetweenForFile": 1,
      "actualSource": "private void scanVars(Node n, Node parent) {\n    switch(n.getType()) {\n        case Token.VAR:\n            for (Node child \u003d n.getFirstChild(); child !\u003d null; ) {\n                Node next \u003d child.getNext();\n                declareVar(child);\n                child \u003d next;\n            }\n            return;\n        case Token.FUNCTION:\n            if (NodeUtil.isFunctionExpression(n)) {\n                return;\n            }\n            String fnName \u003d n.getFirstChild().getString();\n            if (fnName.isEmpty()) {\n                return;\n            }\n            declareVar(n.getFirstChild());\n            return;\n        case Token.CATCH:\n            Preconditions.checkState(n.getChildCount() \u003d\u003d 2);\n            Preconditions.checkState(n.getFirstChild().getType() \u003d\u003d Token.NAME);\n            final Node var \u003d n.getFirstChild();\n            final Node block \u003d var.getNext();\n            declareVar(var);\n            scanVars(block, n);\n            return;\n        case Token.SCRIPT:\n            sourceName \u003d (String) n.getProp(Node.SOURCENAME_PROP);\n            break;\n    }\n    if (NodeUtil.isControlStructure(n) || NodeUtil.isStatementBlock(n)) {\n        for (Node child \u003d n.getFirstChild(); child !\u003d null; ) {\n            Node next \u003d child.getNext();\n            scanVars(child, n);\n            child \u003d next;\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
      "functionStartLine": 117,
      "functionName": "scanVars",
      "functionAnnotation": "",
      "functionDoc": "Scans and gather variables declarations under a Node\n",
      "diff": "@@ -1,41 +1,39 @@\n private void scanVars(Node n, Node parent) {\n     switch(n.getType()) {\n         case Token.VAR:\n             for (Node child \u003d n.getFirstChild(); child !\u003d null; ) {\n                 Node next \u003d child.getNext();\n-                Preconditions.checkState(child.getType() \u003d\u003d Token.NAME);\n-                String name \u003d child.getString();\n-                declareVar(name, child, n, parent, null, n);\n+                declareVar(child);\n                 child \u003d next;\n             }\n             return;\n         case Token.FUNCTION:\n             if (NodeUtil.isFunctionExpression(n)) {\n                 return;\n             }\n             String fnName \u003d n.getFirstChild().getString();\n             if (fnName.isEmpty()) {\n                 return;\n             }\n-            declareVar(fnName, n.getFirstChild(), n, parent, null, n);\n+            declareVar(n.getFirstChild());\n             return;\n         case Token.CATCH:\n             Preconditions.checkState(n.getChildCount() \u003d\u003d 2);\n             Preconditions.checkState(n.getFirstChild().getType() \u003d\u003d Token.NAME);\n             final Node var \u003d n.getFirstChild();\n             final Node block \u003d var.getNext();\n-            declareVar(var.getString(), var, n, parent, null, n);\n+            declareVar(var);\n             scanVars(block, n);\n             return;\n         case Token.SCRIPT:\n             sourceName \u003d (String) n.getProp(Node.SOURCENAME_PROP);\n             break;\n     }\n     if (NodeUtil.isControlStructure(n) || NodeUtil.isStatementBlock(n)) {\n         for (Node child \u003d n.getFirstChild(); child !\u003d null; ) {\n             Node next \u003d child.getNext();\n             scanVars(child, n);\n             child \u003d next;\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6d8fd424925b186d720112e4f14e6898386a66b0": {
      "type": "Ybodychange",
      "commitMessage": "\nFix the CATCH tree structure.\n\nR\u003djohnlenz,dhans\nDELTA\u003d341  (5 added, 116 deleted, 220 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d211729\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@415 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/9/10, 2:49 PM",
      "commitName": "6d8fd424925b186d720112e4f14e6898386a66b0",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "8/12/10, 6:02 PM",
      "commitNameOld": "15acafb00636f99295b394145b9b60a5e624ddfa",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 27.87,
      "commitsBetweenForRepo": 56,
      "commitsBetweenForFile": 1,
      "actualSource": "private void scanVars(Node n, Node parent) {\n    switch(n.getType()) {\n        case Token.VAR:\n            for (Node child \u003d n.getFirstChild(); child !\u003d null; ) {\n                Node next \u003d child.getNext();\n                Preconditions.checkState(child.getType() \u003d\u003d Token.NAME);\n                String name \u003d child.getString();\n                declareVar(name, child, n, parent, null, n);\n                child \u003d next;\n            }\n            return;\n        case Token.FUNCTION:\n            if (NodeUtil.isFunctionExpression(n)) {\n                return;\n            }\n            String fnName \u003d n.getFirstChild().getString();\n            if (fnName.isEmpty()) {\n                return;\n            }\n            declareVar(fnName, n.getFirstChild(), n, parent, null, n);\n            return;\n        case Token.CATCH:\n            Preconditions.checkState(n.getChildCount() \u003d\u003d 2);\n            Preconditions.checkState(n.getFirstChild().getType() \u003d\u003d Token.NAME);\n            final Node var \u003d n.getFirstChild();\n            final Node block \u003d var.getNext();\n            declareVar(var.getString(), var, n, parent, null, n);\n            scanVars(block, n);\n            return;\n        case Token.SCRIPT:\n            sourceName \u003d (String) n.getProp(Node.SOURCENAME_PROP);\n            break;\n    }\n    if (NodeUtil.isControlStructure(n) || NodeUtil.isStatementBlock(n)) {\n        for (Node child \u003d n.getFirstChild(); child !\u003d null; ) {\n            Node next \u003d child.getNext();\n            scanVars(child, n);\n            child \u003d next;\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
      "functionStartLine": 119,
      "functionName": "scanVars",
      "functionAnnotation": "",
      "functionDoc": "Scans and gather variables declarations under a Node\n",
      "diff": "@@ -1,41 +1,41 @@\n private void scanVars(Node n, Node parent) {\n     switch(n.getType()) {\n         case Token.VAR:\n             for (Node child \u003d n.getFirstChild(); child !\u003d null; ) {\n                 Node next \u003d child.getNext();\n                 Preconditions.checkState(child.getType() \u003d\u003d Token.NAME);\n                 String name \u003d child.getString();\n                 declareVar(name, child, n, parent, null, n);\n                 child \u003d next;\n             }\n             return;\n         case Token.FUNCTION:\n             if (NodeUtil.isFunctionExpression(n)) {\n                 return;\n             }\n             String fnName \u003d n.getFirstChild().getString();\n             if (fnName.isEmpty()) {\n                 return;\n             }\n             declareVar(fnName, n.getFirstChild(), n, parent, null, n);\n             return;\n         case Token.CATCH:\n-            Preconditions.checkState(n.getChildCount() \u003d\u003d 3);\n+            Preconditions.checkState(n.getChildCount() \u003d\u003d 2);\n             Preconditions.checkState(n.getFirstChild().getType() \u003d\u003d Token.NAME);\n             final Node var \u003d n.getFirstChild();\n-            final Node block \u003d var.getNext().getNext();\n+            final Node block \u003d var.getNext();\n             declareVar(var.getString(), var, n, parent, null, n);\n             scanVars(block, n);\n             return;\n         case Token.SCRIPT:\n             sourceName \u003d (String) n.getProp(Node.SOURCENAME_PROP);\n             break;\n     }\n     if (NodeUtil.isControlStructure(n) || NodeUtil.isStatementBlock(n)) {\n         for (Node child \u003d n.getFirstChild(); child !\u003d null; ) {\n             Node next \u003d child.getNext();\n             scanVars(child, n);\n             child \u003d next;\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ebb59a97610015bc41bda7f458dd1428a3a3e335": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/04/22 by nick\n\n        fix the extern definition of Window.prototype.stop\n\n        R\u003dsiggy\n        DELTA\u003d1  (0 added, 0 deleted, 1 changed)\n\nChange on 2010/04/22 by john\n\n        \"Anonymous function\" is a confusing term for functions with names.\n        Properly we are usually distinguishing between functions statements\n        (function declarations) and function expressions.\n\n        R\u003dalan\n        DELTA\u003d172  (7 added, 14 deleted, 151 changed)\n\nChange on 2010/04/22 by john\n\n        Standardize the definition of setTimeout/setInterval.\n        Fix for Issue 137\n\n        R\u003dnick\n        DELTA\u003d6  (2 added, 2 deleted, 2 changed)\n\nChange on 2010/04/22 by mark\n\n        Various delegate fixes.\n\n        Give the delegate proxy a name unique from the delegate base so that\n        InstanceObjectType#equals distinguishes them. This is necessary for\n        AmbiguateProperties to work.\n\n        Fix the prototype of the delegate proxy. This makes\n        DisambiguateProperties continue to work.\n\n        Add superclass methods of the delegate base to the delegate proxy.\n\n\n        R\u003dandrew,nada\n        DELTA\u003d526  (383 added, 104 deleted, 39 changed)\n\nChange on 2010/04/23 by john\n\n        Allow variable inlining of function statements. For simplicity  limited to functions defined before first use.\n\n        R\u003dnick\n        DELTA\u003d79  (49 added, 3 deleted, 27 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dhakjvx\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@197 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/23/10, 11:31 AM",
      "commitName": "ebb59a97610015bc41bda7f458dd1428a3a3e335",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/6/10, 5:31 PM",
      "commitNameOld": "45fd54a488cfbf27978fc4811a722f1fedb8ddaa",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 16.75,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "actualSource": "private void scanVars(Node n, Node parent) {\n    switch(n.getType()) {\n        case Token.VAR:\n            for (Node child \u003d n.getFirstChild(); child !\u003d null; ) {\n                Node next \u003d child.getNext();\n                Preconditions.checkState(child.getType() \u003d\u003d Token.NAME);\n                String name \u003d child.getString();\n                declareVar(name, child, n, parent, null, n);\n                child \u003d next;\n            }\n            return;\n        case Token.FUNCTION:\n            if (NodeUtil.isFunctionExpression(n)) {\n                return;\n            }\n            String fnName \u003d n.getFirstChild().getString();\n            if (fnName.isEmpty()) {\n                return;\n            }\n            declareVar(fnName, n.getFirstChild(), n, parent, null, n);\n            return;\n        case Token.CATCH:\n            Preconditions.checkState(n.getChildCount() \u003d\u003d 3);\n            Preconditions.checkState(n.getFirstChild().getType() \u003d\u003d Token.NAME);\n            final Node var \u003d n.getFirstChild();\n            final Node block \u003d var.getNext().getNext();\n            declareVar(var.getString(), var, n, parent, null, n);\n            scanVars(block, n);\n            return;\n        case Token.SCRIPT:\n            sourceName \u003d (String) n.getProp(Node.SOURCENAME_PROP);\n            break;\n    }\n    if (NodeUtil.isControlStructure(n) || NodeUtil.isStatementBlock(n)) {\n        for (Node child \u003d n.getFirstChild(); child !\u003d null; ) {\n            Node next \u003d child.getNext();\n            scanVars(child, n);\n            child \u003d next;\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
      "functionStartLine": 119,
      "functionName": "scanVars",
      "functionAnnotation": "",
      "functionDoc": "Scans and gather variables declarations under a Node\n",
      "diff": "@@ -1,41 +1,41 @@\n private void scanVars(Node n, Node parent) {\n     switch(n.getType()) {\n         case Token.VAR:\n             for (Node child \u003d n.getFirstChild(); child !\u003d null; ) {\n                 Node next \u003d child.getNext();\n                 Preconditions.checkState(child.getType() \u003d\u003d Token.NAME);\n                 String name \u003d child.getString();\n                 declareVar(name, child, n, parent, null, n);\n                 child \u003d next;\n             }\n             return;\n         case Token.FUNCTION:\n-            if (NodeUtil.isFunctionAnonymous(n)) {\n+            if (NodeUtil.isFunctionExpression(n)) {\n                 return;\n             }\n             String fnName \u003d n.getFirstChild().getString();\n             if (fnName.isEmpty()) {\n                 return;\n             }\n             declareVar(fnName, n.getFirstChild(), n, parent, null, n);\n             return;\n         case Token.CATCH:\n             Preconditions.checkState(n.getChildCount() \u003d\u003d 3);\n             Preconditions.checkState(n.getFirstChild().getType() \u003d\u003d Token.NAME);\n             final Node var \u003d n.getFirstChild();\n             final Node block \u003d var.getNext().getNext();\n             declareVar(var.getString(), var, n, parent, null, n);\n             scanVars(block, n);\n             return;\n         case Token.SCRIPT:\n             sourceName \u003d (String) n.getProp(Node.SOURCENAME_PROP);\n             break;\n     }\n     if (NodeUtil.isControlStructure(n) || NodeUtil.isStatementBlock(n)) {\n         for (Node child \u003d n.getFirstChild(); child !\u003d null; ) {\n             Node next \u003d child.getNext();\n             scanVars(child, n);\n             child \u003d next;\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,41 @@\n+private void scanVars(Node n, Node parent) {\n+    switch(n.getType()) {\n+        case Token.VAR:\n+            for (Node child \u003d n.getFirstChild(); child !\u003d null; ) {\n+                Node next \u003d child.getNext();\n+                Preconditions.checkState(child.getType() \u003d\u003d Token.NAME);\n+                String name \u003d child.getString();\n+                declareVar(name, child, n, parent, null, n);\n+                child \u003d next;\n+            }\n+            return;\n+        case Token.FUNCTION:\n+            if (NodeUtil.isFunctionAnonymous(n)) {\n+                return;\n+            }\n+            String fnName \u003d n.getFirstChild().getString();\n+            if (fnName.isEmpty()) {\n+                return;\n+            }\n+            declareVar(fnName, n.getFirstChild(), n, parent, null, n);\n+            return;\n+        case Token.CATCH:\n+            Preconditions.checkState(n.getChildCount() \u003d\u003d 3);\n+            Preconditions.checkState(n.getFirstChild().getType() \u003d\u003d Token.NAME);\n+            final Node var \u003d n.getFirstChild();\n+            final Node block \u003d var.getNext().getNext();\n+            declareVar(var.getString(), var, n, parent, null, n);\n+            scanVars(block, n);\n+            return;\n+        case Token.SCRIPT:\n+            sourceName \u003d (String) n.getProp(Node.SOURCENAME_PROP);\n+            break;\n+    }\n+    if (NodeUtil.isControlStructure(n) || NodeUtil.isStatementBlock(n)) {\n+        for (Node child \u003d n.getFirstChild(); child !\u003d null; ) {\n+            Node next \u003d child.getNext();\n+            scanVars(child, n);\n+            child \u003d next;\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void scanVars(Node n, Node parent) {\n    switch(n.getType()) {\n        case Token.VAR:\n            for (Node child \u003d n.getFirstChild(); child !\u003d null; ) {\n                Node next \u003d child.getNext();\n                Preconditions.checkState(child.getType() \u003d\u003d Token.NAME);\n                String name \u003d child.getString();\n                declareVar(name, child, n, parent, null, n);\n                child \u003d next;\n            }\n            return;\n        case Token.FUNCTION:\n            if (NodeUtil.isFunctionAnonymous(n)) {\n                return;\n            }\n            String fnName \u003d n.getFirstChild().getString();\n            if (fnName.isEmpty()) {\n                return;\n            }\n            declareVar(fnName, n.getFirstChild(), n, parent, null, n);\n            return;\n        case Token.CATCH:\n            Preconditions.checkState(n.getChildCount() \u003d\u003d 3);\n            Preconditions.checkState(n.getFirstChild().getType() \u003d\u003d Token.NAME);\n            final Node var \u003d n.getFirstChild();\n            final Node block \u003d var.getNext().getNext();\n            declareVar(var.getString(), var, n, parent, null, n);\n            scanVars(block, n);\n            return;\n        case Token.SCRIPT:\n            sourceName \u003d (String) n.getProp(Node.SOURCENAME_PROP);\n            break;\n    }\n    if (NodeUtil.isControlStructure(n) || NodeUtil.isStatementBlock(n)) {\n        for (Node child \u003d n.getFirstChild(); child !\u003d null; ) {\n            Node next \u003d child.getNext();\n            scanVars(child, n);\n            child \u003d next;\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
      "functionStartLine": 110,
      "functionName": "scanVars",
      "functionAnnotation": "",
      "functionDoc": "Scans and gather variables declarations under a Node\n"
    }
  }
}