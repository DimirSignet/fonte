{
  "origin": "codeshovel",
  "repositoryName": "Closure-76b",
  "repositoryPath": "/tmp/Closure-76b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DeadAssignmentsElimination.java",
  "functionName": "tryRemoveAssignment",
  "functionId": "tryRemoveAssignment___t-NodeTraversal__n-Node__exprRoot-Node__state-FlowState__LiveVariableLattice__",
  "sourceFilePath": "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
  "functionAnnotation": "",
  "functionDoc": "Determines if any local variables are dead after the instruction {@code n}\nand are assigned within the subtree of {@code n}. Removes those assignments\nif there are any.\n\n@param n Target instruction.\n@param exprRoot The CFG node where the liveness information in state is\n    still correct.\n@param state The liveness information at {@code n}.\n",
  "functionStartLine": 169,
  "functionEndLine": 273,
  "numCommitsSeen": 17,
  "timeTaken": 919,
  "changeHistory": [
    "107c16a3f88f04b8f128aa4f50ca5e5bd02b65f8",
    "e3bcc1c6e7ce7e9bfc3098cd5bf57774049f5baa",
    "f8229e74701c28f001e5b4954c1f1f7a2b764c11",
    "13fa93d548673546ea7b13471858cf3febbd1f40",
    "fe64e87cccd2c38524c0b36c49beb4c988d1453a",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "107c16a3f88f04b8f128aa4f50ca5e5bd02b65f8": "Ybodychange",
    "e3bcc1c6e7ce7e9bfc3098cd5bf57774049f5baa": "Ybodychange",
    "f8229e74701c28f001e5b4954c1f1f7a2b764c11": "Yformatchange",
    "13fa93d548673546ea7b13471858cf3febbd1f40": "Ybodychange",
    "fe64e87cccd2c38524c0b36c49beb4c988d1453a": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "107c16a3f88f04b8f128aa4f50ca5e5bd02b65f8": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/06/10 by nicksantos\n\n\tadd firebugIgnore to externs.\n\n\tR\u003djparent\n\tDELTA\u003d7  (7 added, 0 deleted, 0 changed)\n\nChange on 2010/06/11 by nicksantos\n\n\tcreate an externs file for the top-level google namespace.\n\n\tR\u003djschorr\n\tDELTA\u003d36  (36 added, 0 deleted, 0 changed)\n\nChange on 2010/06/11 by jschorr\n\n\tRemove non-determinism in the source map generator.\n\n\tR\u003dnicksantos\n\tDELTA\u003d63  (58 added, 3 deleted, 2 changed)\n\nChange on 2010/06/13 by acleung\n\n\tRemove indentity assignments.\n\n\tR\u003ddcc\n\tDELTA\u003d20  (20 added, 0 deleted, 0 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d27010\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@242 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/14/10, 1:48 PM",
      "commitName": "107c16a3f88f04b8f128aa4f50ca5e5bd02b65f8",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "5/29/10, 1:07 PM",
      "commitNameOld": "b4801b28ceea8db0f63da7440d6769cb9b7cce8a",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 16.03,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot, FlowState\u003cLiveVariableLattice\u003e state) {\n    Node parent \u003d n.getParent();\n    if (NodeUtil.isAssignmentOp(n) || n.getType() \u003d\u003d Token.INC || n.getType() \u003d\u003d Token.DEC) {\n        Node lhs \u003d n.getFirstChild();\n        Node rhs \u003d lhs.getNext();\n        if (rhs !\u003d null) {\n            tryRemoveAssignment(t, rhs, exprRoot, state);\n            rhs \u003d lhs.getNext();\n        }\n        Scope scope \u003d t.getScope();\n        if (!NodeUtil.isName(lhs)) {\n            return;\n        }\n        String name \u003d lhs.getString();\n        if (!scope.isDeclared(name, false)) {\n            return;\n        }\n        Var var \u003d scope.getVar(name);\n        if (liveness.getEscapedLocals().contains(var)) {\n            return;\n        }\n        if (rhs !\u003d null \u0026\u0026 NodeUtil.isName(rhs) \u0026\u0026 rhs.getString().equals(var.name) \u0026\u0026 NodeUtil.isAssign(n)) {\n            n.removeChild(rhs);\n            n.getParent().replaceChild(n, rhs);\n            compiler.reportCodeChange();\n            return;\n        }\n        if (state.getOut().isLive(var)) {\n            return;\n        }\n        if (state.getIn().isLive(var) \u0026\u0026 isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n            return;\n        }\n        if (NodeUtil.isAssign(n)) {\n            n.removeChild(rhs);\n            n.getParent().replaceChild(n, rhs);\n        } else if (NodeUtil.isAssignmentOp(n)) {\n            n.removeChild(rhs);\n            n.removeChild(lhs);\n            Node op \u003d new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n            parent.replaceChild(n, op);\n        } else if (n.getType() \u003d\u003d Token.INC || n.getType() \u003d\u003d Token.DEC) {\n            if (NodeUtil.isExpressionNode(parent)) {\n                parent.replaceChild(n, new Node(Token.VOID, Node.newNumber(0).copyInformationFrom(n)));\n            } else if (n.getType() \u003d\u003d Token.COMMA \u0026\u0026 n !\u003d parent.getLastChild()) {\n                parent.removeChild(n);\n            } else if (parent.getType() \u003d\u003d Token.FOR \u0026\u0026 !NodeUtil.isForIn(parent) \u0026\u0026 NodeUtil.getConditionExpression(parent) !\u003d n) {\n                parent.replaceChild(n, new Node(Token.EMPTY));\n            } else {\n                return;\n            }\n        } else {\n            Preconditions.checkState(false, \"Unknown statement\");\n        }\n        compiler.reportCodeChange();\n        return;\n    } else {\n        for (Node c \u003d n.getFirstChild(); c !\u003d null; ) {\n            Node next \u003d c.getNext();\n            if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n                tryRemoveAssignment(t, c, exprRoot, state);\n            }\n            c \u003d next;\n        }\n        return;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
      "functionStartLine": 147,
      "functionName": "tryRemoveAssignment",
      "functionAnnotation": "",
      "functionDoc": "Determines if any local variables are dead after the instruction {@code n}\nand are assigned within the subtree of {@code n}. Removes those assignments\nif there are any.\n\n@param n Target instruction.\n@param exprRoot The CFG node where the liveness information in state is\n    still correct.\n@param state The liveness information at {@code n}.\n",
      "diff": "@@ -1,61 +1,67 @@\n private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot, FlowState\u003cLiveVariableLattice\u003e state) {\n     Node parent \u003d n.getParent();\n     if (NodeUtil.isAssignmentOp(n) || n.getType() \u003d\u003d Token.INC || n.getType() \u003d\u003d Token.DEC) {\n         Node lhs \u003d n.getFirstChild();\n         Node rhs \u003d lhs.getNext();\n         if (rhs !\u003d null) {\n             tryRemoveAssignment(t, rhs, exprRoot, state);\n             rhs \u003d lhs.getNext();\n         }\n         Scope scope \u003d t.getScope();\n         if (!NodeUtil.isName(lhs)) {\n             return;\n         }\n         String name \u003d lhs.getString();\n         if (!scope.isDeclared(name, false)) {\n             return;\n         }\n         Var var \u003d scope.getVar(name);\n         if (liveness.getEscapedLocals().contains(var)) {\n             return;\n         }\n+        if (rhs !\u003d null \u0026\u0026 NodeUtil.isName(rhs) \u0026\u0026 rhs.getString().equals(var.name) \u0026\u0026 NodeUtil.isAssign(n)) {\n+            n.removeChild(rhs);\n+            n.getParent().replaceChild(n, rhs);\n+            compiler.reportCodeChange();\n+            return;\n+        }\n         if (state.getOut().isLive(var)) {\n             return;\n         }\n         if (state.getIn().isLive(var) \u0026\u0026 isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n             return;\n         }\n         if (NodeUtil.isAssign(n)) {\n             n.removeChild(rhs);\n             n.getParent().replaceChild(n, rhs);\n         } else if (NodeUtil.isAssignmentOp(n)) {\n             n.removeChild(rhs);\n             n.removeChild(lhs);\n             Node op \u003d new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n             parent.replaceChild(n, op);\n         } else if (n.getType() \u003d\u003d Token.INC || n.getType() \u003d\u003d Token.DEC) {\n             if (NodeUtil.isExpressionNode(parent)) {\n                 parent.replaceChild(n, new Node(Token.VOID, Node.newNumber(0).copyInformationFrom(n)));\n             } else if (n.getType() \u003d\u003d Token.COMMA \u0026\u0026 n !\u003d parent.getLastChild()) {\n                 parent.removeChild(n);\n             } else if (parent.getType() \u003d\u003d Token.FOR \u0026\u0026 !NodeUtil.isForIn(parent) \u0026\u0026 NodeUtil.getConditionExpression(parent) !\u003d n) {\n                 parent.replaceChild(n, new Node(Token.EMPTY));\n             } else {\n                 return;\n             }\n         } else {\n             Preconditions.checkState(false, \"Unknown statement\");\n         }\n         compiler.reportCodeChange();\n         return;\n     } else {\n         for (Node c \u003d n.getFirstChild(); c !\u003d null; ) {\n             Node next \u003d c.getNext();\n             if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n                 tryRemoveAssignment(t, c, exprRoot, state);\n             }\n             c \u003d next;\n         }\n         return;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e3bcc1c6e7ce7e9bfc3098cd5bf57774049f5baa": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/04/15 by nick\n\n        Move the construction of ArrowTypes out of FunctionType.\n\n        R\u003djohn\n        DELTA\u003d197  (79 added, 27 deleted, 91 changed)\n\nChange on 2010/04/15 by nick\n\n        if a file is marked as an @extern, then make it an extern.\n\n        R\u003drobert\n        DELTA\u003d51  (46 added, 0 deleted, 5 changed)\n\nChange on 2010/04/15 by john\n\n        Maintain source information.\n\n        R\u003dalan\n        DELTA\u003d60  (28 added, 7 deleted, 25 changed)\n\nChange on 2010/04/15 by john\n\n        Fix overly aggressive RegExp check.\n\n        R\u003dalan\n        DELTA\u003d15  (12 added, 0 deleted, 3 changed)\n\nChange on 2010/04/15 by nick\n\n        more fun with function-type building.\n\n        R\u003djohn\n        DELTA\u003d432  (206 added, 142 deleted, 84 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003doqlcyn\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@186 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/15/10, 4:45 PM",
      "commitName": "e3bcc1c6e7ce7e9bfc3098cd5bf57774049f5baa",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/7/10, 5:51 PM",
      "commitNameOld": "f8229e74701c28f001e5b4954c1f1f7a2b764c11",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 7.95,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot, FlowState\u003cLiveVariableLattice\u003e state) {\n    Node parent \u003d n.getParent();\n    if (NodeUtil.isAssignmentOp(n) || n.getType() \u003d\u003d Token.INC || n.getType() \u003d\u003d Token.DEC) {\n        Node lhs \u003d n.getFirstChild();\n        Node rhs \u003d lhs.getNext();\n        if (rhs !\u003d null) {\n            tryRemoveAssignment(t, rhs, exprRoot, state);\n            rhs \u003d lhs.getNext();\n        }\n        Scope scope \u003d t.getScope();\n        if (!NodeUtil.isName(lhs)) {\n            return;\n        }\n        String name \u003d lhs.getString();\n        if (!scope.isDeclared(name, false)) {\n            return;\n        }\n        Var var \u003d scope.getVar(name);\n        if (liveness.getEscapedLocals().contains(var)) {\n            return;\n        }\n        if (state.getOut().isLive(var)) {\n            return;\n        }\n        if (state.getIn().isLive(var) \u0026\u0026 isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n            return;\n        }\n        if (NodeUtil.isAssign(n)) {\n            n.removeChild(rhs);\n            n.getParent().replaceChild(n, rhs);\n        } else if (NodeUtil.isAssignmentOp(n)) {\n            n.removeChild(rhs);\n            n.removeChild(lhs);\n            Node op \u003d new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n            parent.replaceChild(n, op);\n        } else if (n.getType() \u003d\u003d Token.INC || n.getType() \u003d\u003d Token.DEC) {\n            if (NodeUtil.isExpressionNode(parent)) {\n                parent.replaceChild(n, new Node(Token.VOID, Node.newNumber(0).copyInformationFrom(n)));\n            } else if (n.getType() \u003d\u003d Token.COMMA \u0026\u0026 n !\u003d parent.getLastChild()) {\n                parent.removeChild(n);\n            } else if (parent.getType() \u003d\u003d Token.FOR \u0026\u0026 !NodeUtil.isForIn(parent) \u0026\u0026 NodeUtil.getConditionExpression(parent) !\u003d n) {\n                parent.replaceChild(n, new Node(Token.EMPTY));\n            } else {\n                return;\n            }\n        } else {\n            Preconditions.checkState(false, \"Unknown statement\");\n        }\n        compiler.reportCodeChange();\n        return;\n    } else {\n        for (Node c \u003d n.getFirstChild(); c !\u003d null; ) {\n            Node next \u003d c.getNext();\n            if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n                tryRemoveAssignment(t, c, exprRoot, state);\n            }\n            c \u003d next;\n        }\n        return;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
      "functionStartLine": 148,
      "functionName": "tryRemoveAssignment",
      "functionAnnotation": "",
      "functionDoc": "Determines if any local variables are dead after the instruction {@code n}\nand are assigned within the subtree of {@code n}. Removes those assignments\nif there are any.\n\n@param n Target instruction.\n@param exprRoot The CFG node where the liveness information in state is\n    still correct.\n@param state The liveness information at {@code n}.\n",
      "diff": "@@ -1,61 +1,61 @@\n private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot, FlowState\u003cLiveVariableLattice\u003e state) {\n     Node parent \u003d n.getParent();\n     if (NodeUtil.isAssignmentOp(n) || n.getType() \u003d\u003d Token.INC || n.getType() \u003d\u003d Token.DEC) {\n         Node lhs \u003d n.getFirstChild();\n         Node rhs \u003d lhs.getNext();\n         if (rhs !\u003d null) {\n             tryRemoveAssignment(t, rhs, exprRoot, state);\n             rhs \u003d lhs.getNext();\n         }\n         Scope scope \u003d t.getScope();\n         if (!NodeUtil.isName(lhs)) {\n             return;\n         }\n         String name \u003d lhs.getString();\n         if (!scope.isDeclared(name, false)) {\n             return;\n         }\n         Var var \u003d scope.getVar(name);\n         if (liveness.getEscapedLocals().contains(var)) {\n             return;\n         }\n         if (state.getOut().isLive(var)) {\n             return;\n         }\n         if (state.getIn().isLive(var) \u0026\u0026 isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n             return;\n         }\n         if (NodeUtil.isAssign(n)) {\n             n.removeChild(rhs);\n             n.getParent().replaceChild(n, rhs);\n         } else if (NodeUtil.isAssignmentOp(n)) {\n             n.removeChild(rhs);\n             n.removeChild(lhs);\n             Node op \u003d new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n             parent.replaceChild(n, op);\n         } else if (n.getType() \u003d\u003d Token.INC || n.getType() \u003d\u003d Token.DEC) {\n             if (NodeUtil.isExpressionNode(parent)) {\n-                parent.replaceChild(n, new Node(Token.VOID, Node.newNumber(0)));\n+                parent.replaceChild(n, new Node(Token.VOID, Node.newNumber(0).copyInformationFrom(n)));\n             } else if (n.getType() \u003d\u003d Token.COMMA \u0026\u0026 n !\u003d parent.getLastChild()) {\n                 parent.removeChild(n);\n             } else if (parent.getType() \u003d\u003d Token.FOR \u0026\u0026 !NodeUtil.isForIn(parent) \u0026\u0026 NodeUtil.getConditionExpression(parent) !\u003d n) {\n                 parent.replaceChild(n, new Node(Token.EMPTY));\n             } else {\n                 return;\n             }\n         } else {\n             Preconditions.checkState(false, \"Unknown statement\");\n         }\n         compiler.reportCodeChange();\n         return;\n     } else {\n         for (Node c \u003d n.getFirstChild(); c !\u003d null; ) {\n             Node next \u003d c.getNext();\n             if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n                 tryRemoveAssignment(t, c, exprRoot, state);\n             }\n             c \u003d next;\n         }\n         return;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f8229e74701c28f001e5b4954c1f1f7a2b764c11": {
      "type": "Yformatchange",
      "commitMessage": "\nsome whitespace-only changes\n\nFix up a type annotation on jquery externs.\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dweleuk\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@174 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/7/10, 5:51 PM",
      "commitName": "f8229e74701c28f001e5b4954c1f1f7a2b764c11",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "12/9/09, 1:32 PM",
      "commitNameOld": "13fa93d548673546ea7b13471858cf3febbd1f40",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 119.14,
      "commitsBetweenForRepo": 127,
      "commitsBetweenForFile": 1,
      "actualSource": "private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot, FlowState\u003cLiveVariableLattice\u003e state) {\n    Node parent \u003d n.getParent();\n    if (NodeUtil.isAssignmentOp(n) || n.getType() \u003d\u003d Token.INC || n.getType() \u003d\u003d Token.DEC) {\n        Node lhs \u003d n.getFirstChild();\n        Node rhs \u003d lhs.getNext();\n        if (rhs !\u003d null) {\n            tryRemoveAssignment(t, rhs, exprRoot, state);\n            rhs \u003d lhs.getNext();\n        }\n        Scope scope \u003d t.getScope();\n        if (!NodeUtil.isName(lhs)) {\n            return;\n        }\n        String name \u003d lhs.getString();\n        if (!scope.isDeclared(name, false)) {\n            return;\n        }\n        Var var \u003d scope.getVar(name);\n        if (liveness.getEscapedLocals().contains(var)) {\n            return;\n        }\n        if (state.getOut().isLive(var)) {\n            return;\n        }\n        if (state.getIn().isLive(var) \u0026\u0026 isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n            return;\n        }\n        if (NodeUtil.isAssign(n)) {\n            n.removeChild(rhs);\n            n.getParent().replaceChild(n, rhs);\n        } else if (NodeUtil.isAssignmentOp(n)) {\n            n.removeChild(rhs);\n            n.removeChild(lhs);\n            Node op \u003d new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n            parent.replaceChild(n, op);\n        } else if (n.getType() \u003d\u003d Token.INC || n.getType() \u003d\u003d Token.DEC) {\n            if (NodeUtil.isExpressionNode(parent)) {\n                parent.replaceChild(n, new Node(Token.VOID, Node.newNumber(0)));\n            } else if (n.getType() \u003d\u003d Token.COMMA \u0026\u0026 n !\u003d parent.getLastChild()) {\n                parent.removeChild(n);\n            } else if (parent.getType() \u003d\u003d Token.FOR \u0026\u0026 !NodeUtil.isForIn(parent) \u0026\u0026 NodeUtil.getConditionExpression(parent) !\u003d n) {\n                parent.replaceChild(n, new Node(Token.EMPTY));\n            } else {\n                return;\n            }\n        } else {\n            Preconditions.checkState(false, \"Unknown statement\");\n        }\n        compiler.reportCodeChange();\n        return;\n    } else {\n        for (Node c \u003d n.getFirstChild(); c !\u003d null; ) {\n            Node next \u003d c.getNext();\n            if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n                tryRemoveAssignment(t, c, exprRoot, state);\n            }\n            c \u003d next;\n        }\n        return;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
      "functionStartLine": 148,
      "functionName": "tryRemoveAssignment",
      "functionAnnotation": "",
      "functionDoc": "Determines if any local variables are dead after the instruction {@code n}\nand are assigned within the subtree of {@code n}. Removes those assignments\nif there are any.\n\n@param n Target instruction.\n@param exprRoot The CFG node where the liveness information in state is\n    still correct.\n@param state The liveness information at {@code n}.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "13fa93d548673546ea7b13471858cf3febbd1f40": {
      "type": "Ybodychange",
      "commitMessage": "Better dead assignment elimination.\n\nTurn on function inlining into local scopes by default.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@22 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/9/09, 1:32 PM",
      "commitName": "13fa93d548673546ea7b13471858cf3febbd1f40",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/25/09, 6:53 AM",
      "commitNameOld": "3bee5d740c96572faea4b9fb8b632e0e07b13cbb",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 14.28,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot, FlowState\u003cLiveVariableLattice\u003e state) {\n    Node parent \u003d n.getParent();\n    if (NodeUtil.isAssignmentOp(n) || n.getType() \u003d\u003d Token.INC || n.getType() \u003d\u003d Token.DEC) {\n        Node lhs \u003d n.getFirstChild();\n        Node rhs \u003d lhs.getNext();\n        if (rhs !\u003d null) {\n            tryRemoveAssignment(t, rhs, exprRoot, state);\n            rhs \u003d lhs.getNext();\n        }\n        Scope scope \u003d t.getScope();\n        if (!NodeUtil.isName(lhs)) {\n            return;\n        }\n        String name \u003d lhs.getString();\n        if (!scope.isDeclared(name, false)) {\n            return;\n        }\n        Var var \u003d scope.getVar(name);\n        if (liveness.getEscapedLocals().contains(var)) {\n            return;\n        }\n        if (state.getOut().isLive(var)) {\n            return;\n        }\n        if (state.getIn().isLive(var) \u0026\u0026 isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n            return;\n        }\n        if (NodeUtil.isAssign(n)) {\n            n.removeChild(rhs);\n            n.getParent().replaceChild(n, rhs);\n        } else if (NodeUtil.isAssignmentOp(n)) {\n            n.removeChild(rhs);\n            n.removeChild(lhs);\n            Node op \u003d new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n            parent.replaceChild(n, op);\n        } else if (n.getType() \u003d\u003d Token.INC || n.getType() \u003d\u003d Token.DEC) {\n            if (NodeUtil.isExpressionNode(parent)) {\n                parent.replaceChild(n, new Node(Token.VOID, Node.newNumber(0)));\n            } else if (n.getType() \u003d\u003d Token.COMMA \u0026\u0026 n !\u003d parent.getLastChild()) {\n                parent.removeChild(n);\n            } else if (parent.getType() \u003d\u003d Token.FOR \u0026\u0026 !NodeUtil.isForIn(parent) \u0026\u0026 NodeUtil.getConditionExpression(parent) !\u003d n) {\n                parent.replaceChild(n, new Node(Token.EMPTY));\n            } else {\n                return;\n            }\n        } else {\n            Preconditions.checkState(false, \"Unknown statement\");\n        }\n        compiler.reportCodeChange();\n        return;\n    } else {\n        for (Node c \u003d n.getFirstChild(); c !\u003d null; ) {\n            Node next \u003d c.getNext();\n            if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n                tryRemoveAssignment(t, c, exprRoot, state);\n            }\n            c \u003d next;\n        }\n        return;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
      "functionStartLine": 148,
      "functionName": "tryRemoveAssignment",
      "functionAnnotation": "",
      "functionDoc": "Determines if any local variables are dead after the instruction {@code n}\nand are assigned within the subtree of {@code n}. Removes those assignments\nif there are any.\n\n@param n Target instruction.\n@param exprRoot The CFG node where the liveness information in state is\n    still correct.\n@param state The liveness information at {@code n}.\n",
      "diff": "@@ -1,50 +1,61 @@\n private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot, FlowState\u003cLiveVariableLattice\u003e state) {\n-    if (NodeUtil.isAssignmentOp(n)) {\n+    Node parent \u003d n.getParent();\n+    if (NodeUtil.isAssignmentOp(n) || n.getType() \u003d\u003d Token.INC || n.getType() \u003d\u003d Token.DEC) {\n         Node lhs \u003d n.getFirstChild();\n         Node rhs \u003d lhs.getNext();\n         if (rhs !\u003d null) {\n             tryRemoveAssignment(t, rhs, exprRoot, state);\n             rhs \u003d lhs.getNext();\n         }\n         Scope scope \u003d t.getScope();\n         if (!NodeUtil.isName(lhs)) {\n             return;\n         }\n         String name \u003d lhs.getString();\n         if (!scope.isDeclared(name, false)) {\n             return;\n         }\n         Var var \u003d scope.getVar(name);\n         if (liveness.getEscapedLocals().contains(var)) {\n             return;\n         }\n         if (state.getOut().isLive(var)) {\n             return;\n         }\n         if (state.getIn().isLive(var) \u0026\u0026 isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n             return;\n         }\n         if (NodeUtil.isAssign(n)) {\n             n.removeChild(rhs);\n             n.getParent().replaceChild(n, rhs);\n         } else if (NodeUtil.isAssignmentOp(n)) {\n             n.removeChild(rhs);\n             n.removeChild(lhs);\n             Node op \u003d new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n-            n.getParent().replaceChild(n, op);\n+            parent.replaceChild(n, op);\n+        } else if (n.getType() \u003d\u003d Token.INC || n.getType() \u003d\u003d Token.DEC) {\n+            if (NodeUtil.isExpressionNode(parent)) {\n+                parent.replaceChild(n, new Node(Token.VOID, Node.newNumber(0)));\n+            } else if (n.getType() \u003d\u003d Token.COMMA \u0026\u0026 n !\u003d parent.getLastChild()) {\n+                parent.removeChild(n);\n+            } else if (parent.getType() \u003d\u003d Token.FOR \u0026\u0026 !NodeUtil.isForIn(parent) \u0026\u0026 NodeUtil.getConditionExpression(parent) !\u003d n) {\n+                parent.replaceChild(n, new Node(Token.EMPTY));\n+            } else {\n+                return;\n+            }\n         } else {\n-            Preconditions.checkState(false, \"Unknow statement\");\n+            Preconditions.checkState(false, \"Unknown statement\");\n         }\n         compiler.reportCodeChange();\n         return;\n     } else {\n         for (Node c \u003d n.getFirstChild(); c !\u003d null; ) {\n             Node next \u003d c.getNext();\n             if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n                 tryRemoveAssignment(t, c, exprRoot, state);\n             }\n             c \u003d next;\n         }\n         return;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "fe64e87cccd2c38524c0b36c49beb4c988d1453a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "Never rename a variable named \"$super\", because the Prototype library\nuses this to do magic.\n\nBetter dead assignment elimination.\n\nEmit an error if you declare a parameter twice.\n\nDon\u0027t do anonymous function collapsing by default.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@12 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/17/09, 4:21 PM",
      "commitName": "fe64e87cccd2c38524c0b36c49beb4c988d1453a",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Never rename a variable named \"$super\", because the Prototype library\nuses this to do magic.\n\nBetter dead assignment elimination.\n\nEmit an error if you declare a parameter twice.\n\nDon\u0027t do anonymous function collapsing by default.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@12 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "11/17/09, 4:21 PM",
          "commitName": "fe64e87cccd2c38524c0b36c49beb4c988d1453a",
          "commitAuthor": "nicholas.j.santos@gmail.com",
          "commitDateOld": "11/3/09, 3:51 PM",
          "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 14.02,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "actualSource": "private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot, FlowState\u003cLiveVariableLattice\u003e state) {\n    if (NodeUtil.isAssignmentOp(n)) {\n        Node lhs \u003d n.getFirstChild();\n        Node rhs \u003d lhs.getNext();\n        if (rhs !\u003d null) {\n            tryRemoveAssignment(t, rhs, exprRoot, state);\n            rhs \u003d lhs.getNext();\n        }\n        Scope scope \u003d t.getScope();\n        if (!NodeUtil.isName(lhs)) {\n            return;\n        }\n        String name \u003d lhs.getString();\n        if (!scope.isDeclared(name, false)) {\n            return;\n        }\n        Var var \u003d scope.getVar(name);\n        if (liveness.getEscapedLocals().contains(var)) {\n            return;\n        }\n        if (state.getOut().isLive(var)) {\n            return;\n        }\n        if (state.getIn().isLive(var) \u0026\u0026 isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n            return;\n        }\n        if (NodeUtil.isAssign(n)) {\n            n.removeChild(rhs);\n            n.getParent().replaceChild(n, rhs);\n        } else if (NodeUtil.isAssignmentOp(n)) {\n            n.removeChild(rhs);\n            n.removeChild(lhs);\n            Node op \u003d new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n            n.getParent().replaceChild(n, op);\n        } else {\n            Preconditions.checkState(false, \"Unknow statement\");\n        }\n        compiler.reportCodeChange();\n        return;\n    } else {\n        for (Node c \u003d n.getFirstChild(); c !\u003d null; ) {\n            Node next \u003d c.getNext();\n            if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n                tryRemoveAssignment(t, c, exprRoot, state);\n            }\n            c \u003d next;\n        }\n        return;\n    }\n}",
          "path": "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
          "functionStartLine": 148,
          "functionName": "tryRemoveAssignment",
          "functionAnnotation": "",
          "functionDoc": "Determines if any local variables are dead after the instruction {@code n}\nand are assigned within the subtree of {@code n}. Removes those assignments\nif there are any.\n\n@param n Target instruction.\n@param exprRoot The CFG node where the liveness information in state is\n    still correct.\n@param state The liveness information at {@code n}.\n",
          "diff": "@@ -1,36 +1,50 @@\n-private void tryRemoveAssignment(NodeTraversal t, Node n, Node parent, FlowState\u003cLiveVariableLattice\u003e state) {\n-    if (NodeUtil.isAssign(n)) {\n+private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot, FlowState\u003cLiveVariableLattice\u003e state) {\n+    if (NodeUtil.isAssignmentOp(n)) {\n         Node lhs \u003d n.getFirstChild();\n+        Node rhs \u003d lhs.getNext();\n+        if (rhs !\u003d null) {\n+            tryRemoveAssignment(t, rhs, exprRoot, state);\n+            rhs \u003d lhs.getNext();\n+        }\n         Scope scope \u003d t.getScope();\n         if (!NodeUtil.isName(lhs)) {\n             return;\n         }\n         String name \u003d lhs.getString();\n         if (!scope.isDeclared(name, false)) {\n             return;\n         }\n         Var var \u003d scope.getVar(name);\n         if (liveness.getEscapedLocals().contains(var)) {\n             return;\n         }\n         if (state.getOut().isLive(var)) {\n             return;\n         }\n-        if (state.getIn().isLive(var)) {\n+        if (state.getIn().isLive(var) \u0026\u0026 isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n             return;\n         }\n-        Node rhs \u003d n.getLastChild();\n-        logger.info(\"Removing dead assignemnt to \" + name + \" in \" + t.getSourceName() + \" line \" + n.getLineno());\n-        n.removeChild(rhs);\n-        parent.replaceChild(n, rhs);\n+        if (NodeUtil.isAssign(n)) {\n+            n.removeChild(rhs);\n+            n.getParent().replaceChild(n, rhs);\n+        } else if (NodeUtil.isAssignmentOp(n)) {\n+            n.removeChild(rhs);\n+            n.removeChild(lhs);\n+            Node op \u003d new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n+            n.getParent().replaceChild(n, op);\n+        } else {\n+            Preconditions.checkState(false, \"Unknow statement\");\n+        }\n         compiler.reportCodeChange();\n         return;\n     } else {\n         for (Node c \u003d n.getFirstChild(); c !\u003d null; ) {\n             Node next \u003d c.getNext();\n-            tryRemoveAssignment(t, c, n, state);\n+            if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n+                tryRemoveAssignment(t, c, exprRoot, state);\n+            }\n             c \u003d next;\n         }\n         return;\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[t-NodeTraversal, n-Node, parent-Node, state-FlowState\u003cLiveVariableLattice\u003e]",
            "newValue": "[t-NodeTraversal, n-Node, exprRoot-Node, state-FlowState\u003cLiveVariableLattice\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Never rename a variable named \"$super\", because the Prototype library\nuses this to do magic.\n\nBetter dead assignment elimination.\n\nEmit an error if you declare a parameter twice.\n\nDon\u0027t do anonymous function collapsing by default.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@12 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "11/17/09, 4:21 PM",
          "commitName": "fe64e87cccd2c38524c0b36c49beb4c988d1453a",
          "commitAuthor": "nicholas.j.santos@gmail.com",
          "commitDateOld": "11/3/09, 3:51 PM",
          "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 14.02,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "actualSource": "private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot, FlowState\u003cLiveVariableLattice\u003e state) {\n    if (NodeUtil.isAssignmentOp(n)) {\n        Node lhs \u003d n.getFirstChild();\n        Node rhs \u003d lhs.getNext();\n        if (rhs !\u003d null) {\n            tryRemoveAssignment(t, rhs, exprRoot, state);\n            rhs \u003d lhs.getNext();\n        }\n        Scope scope \u003d t.getScope();\n        if (!NodeUtil.isName(lhs)) {\n            return;\n        }\n        String name \u003d lhs.getString();\n        if (!scope.isDeclared(name, false)) {\n            return;\n        }\n        Var var \u003d scope.getVar(name);\n        if (liveness.getEscapedLocals().contains(var)) {\n            return;\n        }\n        if (state.getOut().isLive(var)) {\n            return;\n        }\n        if (state.getIn().isLive(var) \u0026\u0026 isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n            return;\n        }\n        if (NodeUtil.isAssign(n)) {\n            n.removeChild(rhs);\n            n.getParent().replaceChild(n, rhs);\n        } else if (NodeUtil.isAssignmentOp(n)) {\n            n.removeChild(rhs);\n            n.removeChild(lhs);\n            Node op \u003d new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n            n.getParent().replaceChild(n, op);\n        } else {\n            Preconditions.checkState(false, \"Unknow statement\");\n        }\n        compiler.reportCodeChange();\n        return;\n    } else {\n        for (Node c \u003d n.getFirstChild(); c !\u003d null; ) {\n            Node next \u003d c.getNext();\n            if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n                tryRemoveAssignment(t, c, exprRoot, state);\n            }\n            c \u003d next;\n        }\n        return;\n    }\n}",
          "path": "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
          "functionStartLine": 148,
          "functionName": "tryRemoveAssignment",
          "functionAnnotation": "",
          "functionDoc": "Determines if any local variables are dead after the instruction {@code n}\nand are assigned within the subtree of {@code n}. Removes those assignments\nif there are any.\n\n@param n Target instruction.\n@param exprRoot The CFG node where the liveness information in state is\n    still correct.\n@param state The liveness information at {@code n}.\n",
          "diff": "@@ -1,36 +1,50 @@\n-private void tryRemoveAssignment(NodeTraversal t, Node n, Node parent, FlowState\u003cLiveVariableLattice\u003e state) {\n-    if (NodeUtil.isAssign(n)) {\n+private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot, FlowState\u003cLiveVariableLattice\u003e state) {\n+    if (NodeUtil.isAssignmentOp(n)) {\n         Node lhs \u003d n.getFirstChild();\n+        Node rhs \u003d lhs.getNext();\n+        if (rhs !\u003d null) {\n+            tryRemoveAssignment(t, rhs, exprRoot, state);\n+            rhs \u003d lhs.getNext();\n+        }\n         Scope scope \u003d t.getScope();\n         if (!NodeUtil.isName(lhs)) {\n             return;\n         }\n         String name \u003d lhs.getString();\n         if (!scope.isDeclared(name, false)) {\n             return;\n         }\n         Var var \u003d scope.getVar(name);\n         if (liveness.getEscapedLocals().contains(var)) {\n             return;\n         }\n         if (state.getOut().isLive(var)) {\n             return;\n         }\n-        if (state.getIn().isLive(var)) {\n+        if (state.getIn().isLive(var) \u0026\u0026 isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n             return;\n         }\n-        Node rhs \u003d n.getLastChild();\n-        logger.info(\"Removing dead assignemnt to \" + name + \" in \" + t.getSourceName() + \" line \" + n.getLineno());\n-        n.removeChild(rhs);\n-        parent.replaceChild(n, rhs);\n+        if (NodeUtil.isAssign(n)) {\n+            n.removeChild(rhs);\n+            n.getParent().replaceChild(n, rhs);\n+        } else if (NodeUtil.isAssignmentOp(n)) {\n+            n.removeChild(rhs);\n+            n.removeChild(lhs);\n+            Node op \u003d new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n+            n.getParent().replaceChild(n, op);\n+        } else {\n+            Preconditions.checkState(false, \"Unknow statement\");\n+        }\n         compiler.reportCodeChange();\n         return;\n     } else {\n         for (Node c \u003d n.getFirstChild(); c !\u003d null; ) {\n             Node next \u003d c.getNext();\n-            tryRemoveAssignment(t, c, n, state);\n+            if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n+                tryRemoveAssignment(t, c, exprRoot, state);\n+            }\n             c \u003d next;\n         }\n         return;\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Never rename a variable named \"$super\", because the Prototype library\nuses this to do magic.\n\nBetter dead assignment elimination.\n\nEmit an error if you declare a parameter twice.\n\nDon\u0027t do anonymous function collapsing by default.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@12 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "11/17/09, 4:21 PM",
          "commitName": "fe64e87cccd2c38524c0b36c49beb4c988d1453a",
          "commitAuthor": "nicholas.j.santos@gmail.com",
          "commitDateOld": "11/3/09, 3:51 PM",
          "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 14.02,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "actualSource": "private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot, FlowState\u003cLiveVariableLattice\u003e state) {\n    if (NodeUtil.isAssignmentOp(n)) {\n        Node lhs \u003d n.getFirstChild();\n        Node rhs \u003d lhs.getNext();\n        if (rhs !\u003d null) {\n            tryRemoveAssignment(t, rhs, exprRoot, state);\n            rhs \u003d lhs.getNext();\n        }\n        Scope scope \u003d t.getScope();\n        if (!NodeUtil.isName(lhs)) {\n            return;\n        }\n        String name \u003d lhs.getString();\n        if (!scope.isDeclared(name, false)) {\n            return;\n        }\n        Var var \u003d scope.getVar(name);\n        if (liveness.getEscapedLocals().contains(var)) {\n            return;\n        }\n        if (state.getOut().isLive(var)) {\n            return;\n        }\n        if (state.getIn().isLive(var) \u0026\u0026 isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n            return;\n        }\n        if (NodeUtil.isAssign(n)) {\n            n.removeChild(rhs);\n            n.getParent().replaceChild(n, rhs);\n        } else if (NodeUtil.isAssignmentOp(n)) {\n            n.removeChild(rhs);\n            n.removeChild(lhs);\n            Node op \u003d new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n            n.getParent().replaceChild(n, op);\n        } else {\n            Preconditions.checkState(false, \"Unknow statement\");\n        }\n        compiler.reportCodeChange();\n        return;\n    } else {\n        for (Node c \u003d n.getFirstChild(); c !\u003d null; ) {\n            Node next \u003d c.getNext();\n            if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n                tryRemoveAssignment(t, c, exprRoot, state);\n            }\n            c \u003d next;\n        }\n        return;\n    }\n}",
          "path": "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
          "functionStartLine": 148,
          "functionName": "tryRemoveAssignment",
          "functionAnnotation": "",
          "functionDoc": "Determines if any local variables are dead after the instruction {@code n}\nand are assigned within the subtree of {@code n}. Removes those assignments\nif there are any.\n\n@param n Target instruction.\n@param exprRoot The CFG node where the liveness information in state is\n    still correct.\n@param state The liveness information at {@code n}.\n",
          "diff": "@@ -1,36 +1,50 @@\n-private void tryRemoveAssignment(NodeTraversal t, Node n, Node parent, FlowState\u003cLiveVariableLattice\u003e state) {\n-    if (NodeUtil.isAssign(n)) {\n+private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot, FlowState\u003cLiveVariableLattice\u003e state) {\n+    if (NodeUtil.isAssignmentOp(n)) {\n         Node lhs \u003d n.getFirstChild();\n+        Node rhs \u003d lhs.getNext();\n+        if (rhs !\u003d null) {\n+            tryRemoveAssignment(t, rhs, exprRoot, state);\n+            rhs \u003d lhs.getNext();\n+        }\n         Scope scope \u003d t.getScope();\n         if (!NodeUtil.isName(lhs)) {\n             return;\n         }\n         String name \u003d lhs.getString();\n         if (!scope.isDeclared(name, false)) {\n             return;\n         }\n         Var var \u003d scope.getVar(name);\n         if (liveness.getEscapedLocals().contains(var)) {\n             return;\n         }\n         if (state.getOut().isLive(var)) {\n             return;\n         }\n-        if (state.getIn().isLive(var)) {\n+        if (state.getIn().isLive(var) \u0026\u0026 isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n             return;\n         }\n-        Node rhs \u003d n.getLastChild();\n-        logger.info(\"Removing dead assignemnt to \" + name + \" in \" + t.getSourceName() + \" line \" + n.getLineno());\n-        n.removeChild(rhs);\n-        parent.replaceChild(n, rhs);\n+        if (NodeUtil.isAssign(n)) {\n+            n.removeChild(rhs);\n+            n.getParent().replaceChild(n, rhs);\n+        } else if (NodeUtil.isAssignmentOp(n)) {\n+            n.removeChild(rhs);\n+            n.removeChild(lhs);\n+            Node op \u003d new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n+            n.getParent().replaceChild(n, op);\n+        } else {\n+            Preconditions.checkState(false, \"Unknow statement\");\n+        }\n         compiler.reportCodeChange();\n         return;\n     } else {\n         for (Node c \u003d n.getFirstChild(); c !\u003d null; ) {\n             Node next \u003d c.getNext();\n-            tryRemoveAssignment(t, c, n, state);\n+            if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n+                tryRemoveAssignment(t, c, exprRoot, state);\n+            }\n             c \u003d next;\n         }\n         return;\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Determines if any local variables are dead after the instruction {@code n}\nand are assigned within the subtree of {@code n}. Removes those assignments\nif there are any.\n\n@param n Target instruction.\n@param parent Parent of {@code n}.\n@param state The liveness information at {@code n}.\n",
            "newValue": "Determines if any local variables are dead after the instruction {@code n}\nand are assigned within the subtree of {@code n}. Removes those assignments\nif there are any.\n\n@param n Target instruction.\n@param exprRoot The CFG node where the liveness information in state is\n    still correct.\n@param state The liveness information at {@code n}.\n"
          }
        }
      ]
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,36 @@\n+private void tryRemoveAssignment(NodeTraversal t, Node n, Node parent, FlowState\u003cLiveVariableLattice\u003e state) {\n+    if (NodeUtil.isAssign(n)) {\n+        Node lhs \u003d n.getFirstChild();\n+        Scope scope \u003d t.getScope();\n+        if (!NodeUtil.isName(lhs)) {\n+            return;\n+        }\n+        String name \u003d lhs.getString();\n+        if (!scope.isDeclared(name, false)) {\n+            return;\n+        }\n+        Var var \u003d scope.getVar(name);\n+        if (liveness.getEscapedLocals().contains(var)) {\n+            return;\n+        }\n+        if (state.getOut().isLive(var)) {\n+            return;\n+        }\n+        if (state.getIn().isLive(var)) {\n+            return;\n+        }\n+        Node rhs \u003d n.getLastChild();\n+        logger.info(\"Removing dead assignemnt to \" + name + \" in \" + t.getSourceName() + \" line \" + n.getLineno());\n+        n.removeChild(rhs);\n+        parent.replaceChild(n, rhs);\n+        compiler.reportCodeChange();\n+        return;\n+    } else {\n+        for (Node c \u003d n.getFirstChild(); c !\u003d null; ) {\n+            Node next \u003d c.getNext();\n+            tryRemoveAssignment(t, c, n, state);\n+            c \u003d next;\n+        }\n+        return;\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void tryRemoveAssignment(NodeTraversal t, Node n, Node parent, FlowState\u003cLiveVariableLattice\u003e state) {\n    if (NodeUtil.isAssign(n)) {\n        Node lhs \u003d n.getFirstChild();\n        Scope scope \u003d t.getScope();\n        if (!NodeUtil.isName(lhs)) {\n            return;\n        }\n        String name \u003d lhs.getString();\n        if (!scope.isDeclared(name, false)) {\n            return;\n        }\n        Var var \u003d scope.getVar(name);\n        if (liveness.getEscapedLocals().contains(var)) {\n            return;\n        }\n        if (state.getOut().isLive(var)) {\n            return;\n        }\n        if (state.getIn().isLive(var)) {\n            return;\n        }\n        Node rhs \u003d n.getLastChild();\n        logger.info(\"Removing dead assignemnt to \" + name + \" in \" + t.getSourceName() + \" line \" + n.getLineno());\n        n.removeChild(rhs);\n        parent.replaceChild(n, rhs);\n        compiler.reportCodeChange();\n        return;\n    } else {\n        for (Node c \u003d n.getFirstChild(); c !\u003d null; ) {\n            Node next \u003d c.getNext();\n            tryRemoveAssignment(t, c, n, state);\n            c \u003d next;\n        }\n        return;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
      "functionStartLine": 149,
      "functionName": "tryRemoveAssignment",
      "functionAnnotation": "",
      "functionDoc": "Determines if any local variables are dead after the instruction {@code n}\nand are assigned within the subtree of {@code n}. Removes those assignments\nif there are any.\n\n@param n Target instruction.\n@param parent Parent of {@code n}.\n@param state The liveness information at {@code n}.\n"
    }
  }
}