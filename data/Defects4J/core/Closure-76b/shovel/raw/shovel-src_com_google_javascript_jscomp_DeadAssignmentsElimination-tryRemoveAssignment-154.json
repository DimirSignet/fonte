{
  "origin": "codeshovel",
  "repositoryName": "Closure-76b",
  "repositoryPath": "/tmp/Closure-76b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DeadAssignmentsElimination.java",
  "functionName": "tryRemoveAssignment",
  "functionId": "tryRemoveAssignment___t-NodeTraversal__n-Node__state-FlowState__LiveVariableLattice__",
  "sourceFilePath": "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 154,
  "functionEndLine": 157,
  "numCommitsSeen": 17,
  "timeTaken": 1011,
  "changeHistory": [
    "fe64e87cccd2c38524c0b36c49beb4c988d1453a",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "fe64e87cccd2c38524c0b36c49beb4c988d1453a": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "fe64e87cccd2c38524c0b36c49beb4c988d1453a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "Never rename a variable named \"$super\", because the Prototype library\nuses this to do magic.\n\nBetter dead assignment elimination.\n\nEmit an error if you declare a parameter twice.\n\nDon\u0027t do anonymous function collapsing by default.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@12 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/17/09, 4:21 PM",
      "commitName": "fe64e87cccd2c38524c0b36c49beb4c988d1453a",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Never rename a variable named \"$super\", because the Prototype library\nuses this to do magic.\n\nBetter dead assignment elimination.\n\nEmit an error if you declare a parameter twice.\n\nDon\u0027t do anonymous function collapsing by default.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@12 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "11/17/09, 4:21 PM",
          "commitName": "fe64e87cccd2c38524c0b36c49beb4c988d1453a",
          "commitAuthor": "nicholas.j.santos@gmail.com",
          "commitDateOld": "11/3/09, 3:51 PM",
          "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 14.02,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "actualSource": "private void tryRemoveAssignment(NodeTraversal t, Node n, FlowState\u003cLiveVariableLattice\u003e state) {\n    tryRemoveAssignment(t, n, n, state);\n}",
          "path": "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
          "functionStartLine": 133,
          "functionName": "tryRemoveAssignment",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,36 +1,3 @@\n-private void tryRemoveAssignment(NodeTraversal t, Node n, Node parent, FlowState\u003cLiveVariableLattice\u003e state) {\n-    if (NodeUtil.isAssign(n)) {\n-        Node lhs \u003d n.getFirstChild();\n-        Scope scope \u003d t.getScope();\n-        if (!NodeUtil.isName(lhs)) {\n-            return;\n-        }\n-        String name \u003d lhs.getString();\n-        if (!scope.isDeclared(name, false)) {\n-            return;\n-        }\n-        Var var \u003d scope.getVar(name);\n-        if (liveness.getEscapedLocals().contains(var)) {\n-            return;\n-        }\n-        if (state.getOut().isLive(var)) {\n-            return;\n-        }\n-        if (state.getIn().isLive(var)) {\n-            return;\n-        }\n-        Node rhs \u003d n.getLastChild();\n-        logger.info(\"Removing dead assignemnt to \" + name + \" in \" + t.getSourceName() + \" line \" + n.getLineno());\n-        n.removeChild(rhs);\n-        parent.replaceChild(n, rhs);\n-        compiler.reportCodeChange();\n-        return;\n-    } else {\n-        for (Node c \u003d n.getFirstChild(); c !\u003d null; ) {\n-            Node next \u003d c.getNext();\n-            tryRemoveAssignment(t, c, n, state);\n-            c \u003d next;\n-        }\n-        return;\n-    }\n+private void tryRemoveAssignment(NodeTraversal t, Node n, FlowState\u003cLiveVariableLattice\u003e state) {\n+    tryRemoveAssignment(t, n, n, state);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[t-NodeTraversal, n-Node, parent-Node, state-FlowState\u003cLiveVariableLattice\u003e]",
            "newValue": "[t-NodeTraversal, n-Node, state-FlowState\u003cLiveVariableLattice\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Never rename a variable named \"$super\", because the Prototype library\nuses this to do magic.\n\nBetter dead assignment elimination.\n\nEmit an error if you declare a parameter twice.\n\nDon\u0027t do anonymous function collapsing by default.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@12 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "11/17/09, 4:21 PM",
          "commitName": "fe64e87cccd2c38524c0b36c49beb4c988d1453a",
          "commitAuthor": "nicholas.j.santos@gmail.com",
          "commitDateOld": "11/3/09, 3:51 PM",
          "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 14.02,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "actualSource": "private void tryRemoveAssignment(NodeTraversal t, Node n, FlowState\u003cLiveVariableLattice\u003e state) {\n    tryRemoveAssignment(t, n, n, state);\n}",
          "path": "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
          "functionStartLine": 133,
          "functionName": "tryRemoveAssignment",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,36 +1,3 @@\n-private void tryRemoveAssignment(NodeTraversal t, Node n, Node parent, FlowState\u003cLiveVariableLattice\u003e state) {\n-    if (NodeUtil.isAssign(n)) {\n-        Node lhs \u003d n.getFirstChild();\n-        Scope scope \u003d t.getScope();\n-        if (!NodeUtil.isName(lhs)) {\n-            return;\n-        }\n-        String name \u003d lhs.getString();\n-        if (!scope.isDeclared(name, false)) {\n-            return;\n-        }\n-        Var var \u003d scope.getVar(name);\n-        if (liveness.getEscapedLocals().contains(var)) {\n-            return;\n-        }\n-        if (state.getOut().isLive(var)) {\n-            return;\n-        }\n-        if (state.getIn().isLive(var)) {\n-            return;\n-        }\n-        Node rhs \u003d n.getLastChild();\n-        logger.info(\"Removing dead assignemnt to \" + name + \" in \" + t.getSourceName() + \" line \" + n.getLineno());\n-        n.removeChild(rhs);\n-        parent.replaceChild(n, rhs);\n-        compiler.reportCodeChange();\n-        return;\n-    } else {\n-        for (Node c \u003d n.getFirstChild(); c !\u003d null; ) {\n-            Node next \u003d c.getNext();\n-            tryRemoveAssignment(t, c, n, state);\n-            c \u003d next;\n-        }\n-        return;\n-    }\n+private void tryRemoveAssignment(NodeTraversal t, Node n, FlowState\u003cLiveVariableLattice\u003e state) {\n+    tryRemoveAssignment(t, n, n, state);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Never rename a variable named \"$super\", because the Prototype library\nuses this to do magic.\n\nBetter dead assignment elimination.\n\nEmit an error if you declare a parameter twice.\n\nDon\u0027t do anonymous function collapsing by default.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@12 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "11/17/09, 4:21 PM",
          "commitName": "fe64e87cccd2c38524c0b36c49beb4c988d1453a",
          "commitAuthor": "nicholas.j.santos@gmail.com",
          "commitDateOld": "11/3/09, 3:51 PM",
          "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 14.02,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "actualSource": "private void tryRemoveAssignment(NodeTraversal t, Node n, FlowState\u003cLiveVariableLattice\u003e state) {\n    tryRemoveAssignment(t, n, n, state);\n}",
          "path": "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
          "functionStartLine": 133,
          "functionName": "tryRemoveAssignment",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,36 +1,3 @@\n-private void tryRemoveAssignment(NodeTraversal t, Node n, Node parent, FlowState\u003cLiveVariableLattice\u003e state) {\n-    if (NodeUtil.isAssign(n)) {\n-        Node lhs \u003d n.getFirstChild();\n-        Scope scope \u003d t.getScope();\n-        if (!NodeUtil.isName(lhs)) {\n-            return;\n-        }\n-        String name \u003d lhs.getString();\n-        if (!scope.isDeclared(name, false)) {\n-            return;\n-        }\n-        Var var \u003d scope.getVar(name);\n-        if (liveness.getEscapedLocals().contains(var)) {\n-            return;\n-        }\n-        if (state.getOut().isLive(var)) {\n-            return;\n-        }\n-        if (state.getIn().isLive(var)) {\n-            return;\n-        }\n-        Node rhs \u003d n.getLastChild();\n-        logger.info(\"Removing dead assignemnt to \" + name + \" in \" + t.getSourceName() + \" line \" + n.getLineno());\n-        n.removeChild(rhs);\n-        parent.replaceChild(n, rhs);\n-        compiler.reportCodeChange();\n-        return;\n-    } else {\n-        for (Node c \u003d n.getFirstChild(); c !\u003d null; ) {\n-            Node next \u003d c.getNext();\n-            tryRemoveAssignment(t, c, n, state);\n-            c \u003d next;\n-        }\n-        return;\n-    }\n+private void tryRemoveAssignment(NodeTraversal t, Node n, FlowState\u003cLiveVariableLattice\u003e state) {\n+    tryRemoveAssignment(t, n, n, state);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Determines if any local variables are dead after the instruction {@code n}\nand are assigned within the subtree of {@code n}. Removes those assignments\nif there are any.\n\n@param n Target instruction.\n@param parent Parent of {@code n}.\n@param state The liveness information at {@code n}.\n",
            "newValue": ""
          }
        }
      ]
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,36 @@\n+private void tryRemoveAssignment(NodeTraversal t, Node n, Node parent, FlowState\u003cLiveVariableLattice\u003e state) {\n+    if (NodeUtil.isAssign(n)) {\n+        Node lhs \u003d n.getFirstChild();\n+        Scope scope \u003d t.getScope();\n+        if (!NodeUtil.isName(lhs)) {\n+            return;\n+        }\n+        String name \u003d lhs.getString();\n+        if (!scope.isDeclared(name, false)) {\n+            return;\n+        }\n+        Var var \u003d scope.getVar(name);\n+        if (liveness.getEscapedLocals().contains(var)) {\n+            return;\n+        }\n+        if (state.getOut().isLive(var)) {\n+            return;\n+        }\n+        if (state.getIn().isLive(var)) {\n+            return;\n+        }\n+        Node rhs \u003d n.getLastChild();\n+        logger.info(\"Removing dead assignemnt to \" + name + \" in \" + t.getSourceName() + \" line \" + n.getLineno());\n+        n.removeChild(rhs);\n+        parent.replaceChild(n, rhs);\n+        compiler.reportCodeChange();\n+        return;\n+    } else {\n+        for (Node c \u003d n.getFirstChild(); c !\u003d null; ) {\n+            Node next \u003d c.getNext();\n+            tryRemoveAssignment(t, c, n, state);\n+            c \u003d next;\n+        }\n+        return;\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void tryRemoveAssignment(NodeTraversal t, Node n, Node parent, FlowState\u003cLiveVariableLattice\u003e state) {\n    if (NodeUtil.isAssign(n)) {\n        Node lhs \u003d n.getFirstChild();\n        Scope scope \u003d t.getScope();\n        if (!NodeUtil.isName(lhs)) {\n            return;\n        }\n        String name \u003d lhs.getString();\n        if (!scope.isDeclared(name, false)) {\n            return;\n        }\n        Var var \u003d scope.getVar(name);\n        if (liveness.getEscapedLocals().contains(var)) {\n            return;\n        }\n        if (state.getOut().isLive(var)) {\n            return;\n        }\n        if (state.getIn().isLive(var)) {\n            return;\n        }\n        Node rhs \u003d n.getLastChild();\n        logger.info(\"Removing dead assignemnt to \" + name + \" in \" + t.getSourceName() + \" line \" + n.getLineno());\n        n.removeChild(rhs);\n        parent.replaceChild(n, rhs);\n        compiler.reportCodeChange();\n        return;\n    } else {\n        for (Node c \u003d n.getFirstChild(); c !\u003d null; ) {\n            Node next \u003d c.getNext();\n            tryRemoveAssignment(t, c, n, state);\n            c \u003d next;\n        }\n        return;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
      "functionStartLine": 149,
      "functionName": "tryRemoveAssignment",
      "functionAnnotation": "",
      "functionDoc": "Determines if any local variables are dead after the instruction {@code n}\nand are assigned within the subtree of {@code n}. Removes those assignments\nif there are any.\n\n@param n Target instruction.\n@param parent Parent of {@code n}.\n@param state The liveness information at {@code n}.\n"
    }
  }
}