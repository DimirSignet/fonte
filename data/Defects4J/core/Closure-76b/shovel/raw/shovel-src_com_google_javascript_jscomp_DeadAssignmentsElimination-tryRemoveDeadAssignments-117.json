{
  "origin": "codeshovel",
  "repositoryName": "Closure-76b",
  "repositoryPath": "/tmp/Closure-76b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DeadAssignmentsElimination.java",
  "functionName": "tryRemoveDeadAssignments",
  "functionId": "tryRemoveDeadAssignments___t-NodeTraversal__cfg-ControlFlowGraph__Node__",
  "sourceFilePath": "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
  "functionAnnotation": "",
  "functionDoc": "Try to remove useless assignments from a control flow graph that has been\nannotated with liveness information.\n\n@param t The node traversal.\n@param cfg The control flow graph of the program annotated with liveness\n       information.\n",
  "functionStartLine": 117,
  "functionEndLine": 152,
  "numCommitsSeen": 16,
  "timeTaken": 680,
  "changeHistory": [
    "97bbbffb65eda01aa9b38a5cec43a598afb39070",
    "f8229e74701c28f001e5b4954c1f1f7a2b764c11",
    "3bee5d740c96572faea4b9fb8b632e0e07b13cbb",
    "fe64e87cccd2c38524c0b36c49beb4c988d1453a",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "97bbbffb65eda01aa9b38a5cec43a598afb39070": "Ybodychange",
    "f8229e74701c28f001e5b4954c1f1f7a2b764c11": "Yformatchange",
    "3bee5d740c96572faea4b9fb8b632e0e07b13cbb": "Ybodychange",
    "fe64e87cccd2c38524c0b36c49beb4c988d1453a": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "97bbbffb65eda01aa9b38a5cec43a598afb39070": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/05/12 by nick\n\n        simplify how we build source map paths.\n\n        R\u003djoey\n        DELTA\u003d111  (76 added, 4 deleted, 31 changed)\n\nChange on 2010/05/12 by nick\n\n        Use generics magic to clean up the graph code a bit.\n        These changes don\u0027t give the performance improvements that I hoped,\n        but i think they\u0027re good changes anyway.\n\n        R\u003dalan\n        DELTA\u003d253  (69 added, 121 deleted, 63 changed)\n\nChange on 2010/05/12 by nick\n\n        API clean-up: don\u0027t store null return types or parameter-list types.\n\n        R\u003drobert\n        DELTA\u003d195  (89 added, 54 deleted, 52 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003ddzaoho\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@209 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/13/10, 10:46 AM",
      "commitName": "97bbbffb65eda01aa9b38a5cec43a598afb39070",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/15/10, 4:45 PM",
      "commitNameOld": "e3bcc1c6e7ce7e9bfc3098cd5bf57774049f5baa",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 27.75,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "actualSource": "private void tryRemoveDeadAssignments(NodeTraversal t, ControlFlowGraph\u003cNode\u003e cfg) {\n    Iterable\u003cDiGraphNode\u003cNode, Branch\u003e\u003e nodes \u003d cfg.getDirectedGraphNodes();\n    for (DiGraphNode\u003cNode, Branch\u003e cfgNode : nodes) {\n        FlowState\u003cLiveVariableLattice\u003e state \u003d cfgNode.getAnnotation();\n        Node n \u003d cfgNode.getValue();\n        if (n \u003d\u003d null) {\n            continue;\n        }\n        switch(n.getType()) {\n            case Token.IF:\n            case Token.WHILE:\n            case Token.DO:\n                tryRemoveAssignment(t, NodeUtil.getConditionExpression(n), state);\n                continue;\n            case Token.FOR:\n                if (!NodeUtil.isForIn(n)) {\n                    tryRemoveAssignment(t, NodeUtil.getConditionExpression(n), state);\n                }\n                continue;\n            case Token.SWITCH:\n            case Token.CASE:\n            case Token.RETURN:\n                if (n.hasChildren()) {\n                    tryRemoveAssignment(t, n.getFirstChild(), state);\n                }\n                continue;\n        }\n        tryRemoveAssignment(t, n, state);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
      "functionStartLine": 95,
      "functionName": "tryRemoveDeadAssignments",
      "functionAnnotation": "",
      "functionDoc": "Try to remove useless assignments from a control flow graph that has been\nannotated with liveness information.\n\n@param t The node traversal.\n@param cfg The control flow graph of the program annotated with liveness\n       information.\n",
      "diff": "@@ -1,30 +1,30 @@\n private void tryRemoveDeadAssignments(NodeTraversal t, ControlFlowGraph\u003cNode\u003e cfg) {\n-    List\u003cDiGraphNode\u003cNode, Branch\u003e\u003e nodes \u003d cfg.getDirectedGraphNodes();\n+    Iterable\u003cDiGraphNode\u003cNode, Branch\u003e\u003e nodes \u003d cfg.getDirectedGraphNodes();\n     for (DiGraphNode\u003cNode, Branch\u003e cfgNode : nodes) {\n         FlowState\u003cLiveVariableLattice\u003e state \u003d cfgNode.getAnnotation();\n         Node n \u003d cfgNode.getValue();\n         if (n \u003d\u003d null) {\n             continue;\n         }\n         switch(n.getType()) {\n             case Token.IF:\n             case Token.WHILE:\n             case Token.DO:\n                 tryRemoveAssignment(t, NodeUtil.getConditionExpression(n), state);\n                 continue;\n             case Token.FOR:\n                 if (!NodeUtil.isForIn(n)) {\n                     tryRemoveAssignment(t, NodeUtil.getConditionExpression(n), state);\n                 }\n                 continue;\n             case Token.SWITCH:\n             case Token.CASE:\n             case Token.RETURN:\n                 if (n.hasChildren()) {\n                     tryRemoveAssignment(t, n.getFirstChild(), state);\n                 }\n                 continue;\n         }\n         tryRemoveAssignment(t, n, state);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f8229e74701c28f001e5b4954c1f1f7a2b764c11": {
      "type": "Yformatchange",
      "commitMessage": "\nsome whitespace-only changes\n\nFix up a type annotation on jquery externs.\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dweleuk\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@174 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/7/10, 5:51 PM",
      "commitName": "f8229e74701c28f001e5b4954c1f1f7a2b764c11",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "12/9/09, 1:32 PM",
      "commitNameOld": "13fa93d548673546ea7b13471858cf3febbd1f40",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 119.14,
      "commitsBetweenForRepo": 127,
      "commitsBetweenForFile": 1,
      "actualSource": "private void tryRemoveDeadAssignments(NodeTraversal t, ControlFlowGraph\u003cNode\u003e cfg) {\n    List\u003cDiGraphNode\u003cNode, Branch\u003e\u003e nodes \u003d cfg.getDirectedGraphNodes();\n    for (DiGraphNode\u003cNode, Branch\u003e cfgNode : nodes) {\n        FlowState\u003cLiveVariableLattice\u003e state \u003d cfgNode.getAnnotation();\n        Node n \u003d cfgNode.getValue();\n        if (n \u003d\u003d null) {\n            continue;\n        }\n        switch(n.getType()) {\n            case Token.IF:\n            case Token.WHILE:\n            case Token.DO:\n                tryRemoveAssignment(t, NodeUtil.getConditionExpression(n), state);\n                continue;\n            case Token.FOR:\n                if (!NodeUtil.isForIn(n)) {\n                    tryRemoveAssignment(t, NodeUtil.getConditionExpression(n), state);\n                }\n                continue;\n            case Token.SWITCH:\n            case Token.CASE:\n            case Token.RETURN:\n                if (n.hasChildren()) {\n                    tryRemoveAssignment(t, n.getFirstChild(), state);\n                }\n                continue;\n        }\n        tryRemoveAssignment(t, n, state);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
      "functionStartLine": 96,
      "functionName": "tryRemoveDeadAssignments",
      "functionAnnotation": "",
      "functionDoc": "Try to remove useless assignments from a control flow graph that has been\nannotated with liveness information.\n\n@param t The node traversal.\n@param cfg The control flow graph of the program annotated with liveness\n       information.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "3bee5d740c96572faea4b9fb8b632e0e07b13cbb": {
      "type": "Ybodychange",
      "commitMessage": "Add a mechanism for inlining local vars, and turn it on by default.\nWarnings for \"ambiguous\" function definitions.\nRefactoring and renaming of some method names.\nUse \"\u003d\" optionality annotation in externs.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@15 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/25/09, 6:53 AM",
      "commitName": "3bee5d740c96572faea4b9fb8b632e0e07b13cbb",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/17/09, 4:21 PM",
      "commitNameOld": "fe64e87cccd2c38524c0b36c49beb4c988d1453a",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 7.61,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private void tryRemoveDeadAssignments(NodeTraversal t, ControlFlowGraph\u003cNode\u003e cfg) {\n    List\u003cDiGraphNode\u003cNode, Branch\u003e\u003e nodes \u003d cfg.getDirectedGraphNodes();\n    for (DiGraphNode\u003cNode, Branch\u003e cfgNode : nodes) {\n        FlowState\u003cLiveVariableLattice\u003e state \u003d cfgNode.getAnnotation();\n        Node n \u003d cfgNode.getValue();\n        if (n \u003d\u003d null) {\n            continue;\n        }\n        switch(n.getType()) {\n            case Token.IF:\n            case Token.WHILE:\n            case Token.DO:\n                tryRemoveAssignment(t, NodeUtil.getConditionExpression(n), state);\n                continue;\n            case Token.FOR:\n                if (!NodeUtil.isForIn(n)) {\n                    tryRemoveAssignment(t, NodeUtil.getConditionExpression(n), state);\n                }\n                continue;\n            case Token.SWITCH:\n            case Token.CASE:\n            case Token.RETURN:\n                if (n.hasChildren()) {\n                    tryRemoveAssignment(t, n.getFirstChild(), state);\n                }\n                continue;\n        }\n        tryRemoveAssignment(t, n, state);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
      "functionStartLine": 96,
      "functionName": "tryRemoveDeadAssignments",
      "functionAnnotation": "",
      "functionDoc": "Try to remove useless assignments from a control flow graph that has been\nannotated with liveness information.\n\n@param t The node traversal.\n@param cfg The control flow graph of the program annotated with liveness\n       information.\n",
      "diff": "@@ -1,30 +1,30 @@\n private void tryRemoveDeadAssignments(NodeTraversal t, ControlFlowGraph\u003cNode\u003e cfg) {\n     List\u003cDiGraphNode\u003cNode, Branch\u003e\u003e nodes \u003d cfg.getDirectedGraphNodes();\n     for (DiGraphNode\u003cNode, Branch\u003e cfgNode : nodes) {\n         FlowState\u003cLiveVariableLattice\u003e state \u003d cfgNode.getAnnotation();\n         Node n \u003d cfgNode.getValue();\n         if (n \u003d\u003d null) {\n             continue;\n         }\n         switch(n.getType()) {\n             case Token.IF:\n             case Token.WHILE:\n             case Token.DO:\n                 tryRemoveAssignment(t, NodeUtil.getConditionExpression(n), state);\n                 continue;\n             case Token.FOR:\n-                if (n.getChildCount() \u003d\u003d 4) {\n+                if (!NodeUtil.isForIn(n)) {\n                     tryRemoveAssignment(t, NodeUtil.getConditionExpression(n), state);\n                 }\n                 continue;\n             case Token.SWITCH:\n             case Token.CASE:\n             case Token.RETURN:\n                 if (n.hasChildren()) {\n                     tryRemoveAssignment(t, n.getFirstChild(), state);\n                 }\n                 continue;\n         }\n         tryRemoveAssignment(t, n, state);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "fe64e87cccd2c38524c0b36c49beb4c988d1453a": {
      "type": "Ybodychange",
      "commitMessage": "Never rename a variable named \"$super\", because the Prototype library\nuses this to do magic.\n\nBetter dead assignment elimination.\n\nEmit an error if you declare a parameter twice.\n\nDon\u0027t do anonymous function collapsing by default.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@12 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/17/09, 4:21 PM",
      "commitName": "fe64e87cccd2c38524c0b36c49beb4c988d1453a",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/3/09, 3:51 PM",
      "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 14.02,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "private void tryRemoveDeadAssignments(NodeTraversal t, ControlFlowGraph\u003cNode\u003e cfg) {\n    List\u003cDiGraphNode\u003cNode, Branch\u003e\u003e nodes \u003d cfg.getDirectedGraphNodes();\n    for (DiGraphNode\u003cNode, Branch\u003e cfgNode : nodes) {\n        FlowState\u003cLiveVariableLattice\u003e state \u003d cfgNode.getAnnotation();\n        Node n \u003d cfgNode.getValue();\n        if (n \u003d\u003d null) {\n            continue;\n        }\n        switch(n.getType()) {\n            case Token.IF:\n            case Token.WHILE:\n            case Token.DO:\n                tryRemoveAssignment(t, NodeUtil.getConditionExpression(n), state);\n                continue;\n            case Token.FOR:\n                if (n.getChildCount() \u003d\u003d 4) {\n                    tryRemoveAssignment(t, NodeUtil.getConditionExpression(n), state);\n                }\n                continue;\n            case Token.SWITCH:\n            case Token.CASE:\n            case Token.RETURN:\n                if (n.hasChildren()) {\n                    tryRemoveAssignment(t, n.getFirstChild(), state);\n                }\n                continue;\n        }\n        tryRemoveAssignment(t, n, state);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
      "functionStartLine": 96,
      "functionName": "tryRemoveDeadAssignments",
      "functionAnnotation": "",
      "functionDoc": "Try to remove useless assignments from a control flow graph that has been\nannotated with liveness information.\n\n@param t The node traversal.\n@param cfg The control flow graph of the program annotated with liveness\n       information.\n",
      "diff": "@@ -1,33 +1,30 @@\n private void tryRemoveDeadAssignments(NodeTraversal t, ControlFlowGraph\u003cNode\u003e cfg) {\n     List\u003cDiGraphNode\u003cNode, Branch\u003e\u003e nodes \u003d cfg.getDirectedGraphNodes();\n     for (DiGraphNode\u003cNode, Branch\u003e cfgNode : nodes) {\n         FlowState\u003cLiveVariableLattice\u003e state \u003d cfgNode.getAnnotation();\n         Node n \u003d cfgNode.getValue();\n         if (n \u003d\u003d null) {\n             continue;\n         }\n         switch(n.getType()) {\n             case Token.IF:\n             case Token.WHILE:\n             case Token.DO:\n-                tryRemoveAssignment(t, NodeUtil.getConditionExpression(n), n, state);\n+                tryRemoveAssignment(t, NodeUtil.getConditionExpression(n), state);\n                 continue;\n             case Token.FOR:\n                 if (n.getChildCount() \u003d\u003d 4) {\n-                    tryRemoveAssignment(t, NodeUtil.getConditionExpression(n), n, state);\n-                    tryRemoveAssignment(t, n.getFirstChild().getNext().getNext(), n, state);\n+                    tryRemoveAssignment(t, NodeUtil.getConditionExpression(n), state);\n                 }\n                 continue;\n             case Token.SWITCH:\n             case Token.CASE:\n             case Token.RETURN:\n                 if (n.hasChildren()) {\n-                    tryRemoveAssignment(t, n.getFirstChild(), n, state);\n+                    tryRemoveAssignment(t, n.getFirstChild(), state);\n                 }\n                 continue;\n         }\n-        if (NodeUtil.isExpressionNode(n)) {\n-            tryRemoveAssignment(t, n.getFirstChild(), n, state);\n-        }\n+        tryRemoveAssignment(t, n, state);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,33 @@\n+private void tryRemoveDeadAssignments(NodeTraversal t, ControlFlowGraph\u003cNode\u003e cfg) {\n+    List\u003cDiGraphNode\u003cNode, Branch\u003e\u003e nodes \u003d cfg.getDirectedGraphNodes();\n+    for (DiGraphNode\u003cNode, Branch\u003e cfgNode : nodes) {\n+        FlowState\u003cLiveVariableLattice\u003e state \u003d cfgNode.getAnnotation();\n+        Node n \u003d cfgNode.getValue();\n+        if (n \u003d\u003d null) {\n+            continue;\n+        }\n+        switch(n.getType()) {\n+            case Token.IF:\n+            case Token.WHILE:\n+            case Token.DO:\n+                tryRemoveAssignment(t, NodeUtil.getConditionExpression(n), n, state);\n+                continue;\n+            case Token.FOR:\n+                if (n.getChildCount() \u003d\u003d 4) {\n+                    tryRemoveAssignment(t, NodeUtil.getConditionExpression(n), n, state);\n+                    tryRemoveAssignment(t, n.getFirstChild().getNext().getNext(), n, state);\n+                }\n+                continue;\n+            case Token.SWITCH:\n+            case Token.CASE:\n+            case Token.RETURN:\n+                if (n.hasChildren()) {\n+                    tryRemoveAssignment(t, n.getFirstChild(), n, state);\n+                }\n+                continue;\n+        }\n+        if (NodeUtil.isExpressionNode(n)) {\n+            tryRemoveAssignment(t, n.getFirstChild(), n, state);\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void tryRemoveDeadAssignments(NodeTraversal t, ControlFlowGraph\u003cNode\u003e cfg) {\n    List\u003cDiGraphNode\u003cNode, Branch\u003e\u003e nodes \u003d cfg.getDirectedGraphNodes();\n    for (DiGraphNode\u003cNode, Branch\u003e cfgNode : nodes) {\n        FlowState\u003cLiveVariableLattice\u003e state \u003d cfgNode.getAnnotation();\n        Node n \u003d cfgNode.getValue();\n        if (n \u003d\u003d null) {\n            continue;\n        }\n        switch(n.getType()) {\n            case Token.IF:\n            case Token.WHILE:\n            case Token.DO:\n                tryRemoveAssignment(t, NodeUtil.getConditionExpression(n), n, state);\n                continue;\n            case Token.FOR:\n                if (n.getChildCount() \u003d\u003d 4) {\n                    tryRemoveAssignment(t, NodeUtil.getConditionExpression(n), n, state);\n                    tryRemoveAssignment(t, n.getFirstChild().getNext().getNext(), n, state);\n                }\n                continue;\n            case Token.SWITCH:\n            case Token.CASE:\n            case Token.RETURN:\n                if (n.hasChildren()) {\n                    tryRemoveAssignment(t, n.getFirstChild(), n, state);\n                }\n                continue;\n        }\n        if (NodeUtil.isExpressionNode(n)) {\n            tryRemoveAssignment(t, n.getFirstChild(), n, state);\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
      "functionStartLine": 99,
      "functionName": "tryRemoveDeadAssignments",
      "functionAnnotation": "",
      "functionDoc": "Try to remove useless assignments from a control flow graph that has been\nannotated with liveness information.\n\n@param t The node traversal.\n@param cfg The control flow graph of the program annotated with liveness\n       information.\n"
    }
  }
}