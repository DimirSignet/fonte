{
  "origin": "codeshovel",
  "repositoryName": "Closure-76b",
  "repositoryPath": "/tmp/Closure-76b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ControlFlowAnalysis.java",
  "functionName": "getOptionalNodeComparator",
  "functionId": "$getOptionalNodeComparator___isForward-boolean",
  "sourceFilePath": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 1010,
  "functionEndLine": 1029,
  "numCommitsSeen": 13,
  "timeTaken": 957,
  "changeHistory": [
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,20 @@\n+@Override\n+public Comparator\u003cDiGraphNode\u003cNode, Branch\u003e\u003e getOptionalNodeComparator(boolean isForward) {\n+    if (isForward) {\n+        return new Comparator\u003cDiGraphNode\u003cNode, Branch\u003e\u003e() {\n+\n+            @Override\n+            public int compare(DiGraphNode\u003cNode, Branch\u003e n1, DiGraphNode\u003cNode, Branch\u003e n2) {\n+                return getPosition(n1) - getPosition(n2);\n+            }\n+        };\n+    } else {\n+        return new Comparator\u003cDiGraphNode\u003cNode, Branch\u003e\u003e() {\n+\n+            @Override\n+            public int compare(DiGraphNode\u003cNode, Branch\u003e n1, DiGraphNode\u003cNode, Branch\u003e n2) {\n+                return getPosition(n2) - getPosition(n1);\n+            }\n+        };\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic Comparator\u003cDiGraphNode\u003cNode, Branch\u003e\u003e getOptionalNodeComparator(boolean isForward) {\n    if (isForward) {\n        return new Comparator\u003cDiGraphNode\u003cNode, Branch\u003e\u003e() {\n\n            @Override\n            public int compare(DiGraphNode\u003cNode, Branch\u003e n1, DiGraphNode\u003cNode, Branch\u003e n2) {\n                return getPosition(n1) - getPosition(n2);\n            }\n        };\n    } else {\n        return new Comparator\u003cDiGraphNode\u003cNode, Branch\u003e\u003e() {\n\n            @Override\n            public int compare(DiGraphNode\u003cNode, Branch\u003e n1, DiGraphNode\u003cNode, Branch\u003e n2) {\n                return getPosition(n2) - getPosition(n1);\n            }\n        };\n    }\n}",
      "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
      "functionStartLine": 965,
      "functionName": "getOptionalNodeComparator",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}