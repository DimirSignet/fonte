{
  "origin": "codeshovel",
  "repositoryName": "Closure-76b",
  "repositoryPath": "/tmp/Closure-76b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LiveVariablesAnalysis.java",
  "functionName": "computeGenKill",
  "functionId": "computeGenKill___n-Node__gen-BitSet__kill-BitSet__conditional-boolean",
  "sourceFilePath": "src/com/google/javascript/jscomp/LiveVariablesAnalysis.java",
  "functionAnnotation": "",
  "functionDoc": "Computes the GEN and KILL set.\n\n@param n Root node.\n@param gen Local variables that are live because of the instruction at\n       {@code n} will be added to this set.\n@param kill Local variables that are killed because of the instruction at\n       {@code n} will be added to this set.\n@param conditional @code true} if any assignments encountered are\n       conditionally executed. These assignments might not kill a variable.\n",
  "functionStartLine": 178,
  "functionEndLine": 263,
  "numCommitsSeen": 9,
  "timeTaken": 475,
  "changeHistory": [
    "3bee5d740c96572faea4b9fb8b632e0e07b13cbb",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "3bee5d740c96572faea4b9fb8b632e0e07b13cbb": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3bee5d740c96572faea4b9fb8b632e0e07b13cbb": {
      "type": "Ybodychange",
      "commitMessage": "Add a mechanism for inlining local vars, and turn it on by default.\nWarnings for \"ambiguous\" function definitions.\nRefactoring and renaming of some method names.\nUse \"\u003d\" optionality annotation in externs.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@15 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/25/09, 6:53 AM",
      "commitName": "3bee5d740c96572faea4b9fb8b632e0e07b13cbb",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/3/09, 3:51 PM",
      "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 21.63,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "actualSource": "private void computeGenKill(Node n, BitSet gen, BitSet kill, boolean conditional) {\n    switch(n.getType()) {\n        case Token.SCRIPT:\n        case Token.BLOCK:\n        case Token.FUNCTION:\n            return;\n        case Token.WHILE:\n        case Token.DO:\n        case Token.IF:\n            computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional);\n            return;\n        case Token.FOR:\n            if (!NodeUtil.isForIn(n)) {\n                computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional);\n            } else {\n                Node lhs \u003d n.getFirstChild();\n                Node rhs \u003d lhs.getNext();\n                if (NodeUtil.isVar(lhs)) {\n                    lhs \u003d lhs.getLastChild();\n                }\n                addToSetIfLocal(lhs, kill);\n                addToSetIfLocal(lhs, gen);\n                computeGenKill(rhs, gen, kill, conditional);\n            }\n            return;\n        case Token.VAR:\n            for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n                if (c.hasChildren()) {\n                    computeGenKill(c.getFirstChild(), gen, kill, conditional);\n                    if (!conditional) {\n                        addToSetIfLocal(c, kill);\n                    }\n                }\n            }\n            return;\n        case Token.AND:\n        case Token.OR:\n            computeGenKill(n.getFirstChild(), gen, kill, conditional);\n            computeGenKill(n.getLastChild(), gen, kill, true);\n            return;\n        case Token.HOOK:\n            computeGenKill(n.getFirstChild(), gen, kill, conditional);\n            computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n            computeGenKill(n.getLastChild(), gen, kill, true);\n            return;\n        case Token.NAME:\n            if (isArgumentsName(n)) {\n                markAllParametersEscaped();\n            } else {\n                addToSetIfLocal(n, gen);\n            }\n            return;\n        default:\n            if (NodeUtil.isAssignmentOp(n) \u0026\u0026 NodeUtil.isName(n.getFirstChild())) {\n                Node lhs \u003d n.getFirstChild();\n                if (!conditional) {\n                    addToSetIfLocal(lhs, kill);\n                }\n                if (!NodeUtil.isAssign(n)) {\n                    addToSetIfLocal(lhs, gen);\n                }\n                computeGenKill(lhs.getNext(), gen, kill, conditional);\n            } else {\n                for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n                    computeGenKill(c, gen, kill, conditional);\n                }\n            }\n            return;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/LiveVariablesAnalysis.java",
      "functionStartLine": 179,
      "functionName": "computeGenKill",
      "functionAnnotation": "",
      "functionDoc": "Computes the GEN and KILL set.\n\n@param n Root node.\n@param gen Local variables that are live because of the instruction at\n       {@code n} will be added to this set.\n@param kill Local variables that are killed because of the instruction at\n       {@code n} will be added to this set.\n@param conditional @code true} if any assignments encountered are\n       conditionally executed. These assignments might not kill a variable.\n",
      "diff": "@@ -1,70 +1,70 @@\n private void computeGenKill(Node n, BitSet gen, BitSet kill, boolean conditional) {\n     switch(n.getType()) {\n         case Token.SCRIPT:\n         case Token.BLOCK:\n         case Token.FUNCTION:\n             return;\n         case Token.WHILE:\n         case Token.DO:\n         case Token.IF:\n             computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional);\n             return;\n         case Token.FOR:\n-            if (n.getChildCount() \u003d\u003d 4) {\n+            if (!NodeUtil.isForIn(n)) {\n                 computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional);\n             } else {\n                 Node lhs \u003d n.getFirstChild();\n                 Node rhs \u003d lhs.getNext();\n                 if (NodeUtil.isVar(lhs)) {\n                     lhs \u003d lhs.getLastChild();\n                 }\n                 addToSetIfLocal(lhs, kill);\n                 addToSetIfLocal(lhs, gen);\n                 computeGenKill(rhs, gen, kill, conditional);\n             }\n             return;\n         case Token.VAR:\n             for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n                 if (c.hasChildren()) {\n                     computeGenKill(c.getFirstChild(), gen, kill, conditional);\n                     if (!conditional) {\n                         addToSetIfLocal(c, kill);\n                     }\n                 }\n             }\n             return;\n         case Token.AND:\n         case Token.OR:\n             computeGenKill(n.getFirstChild(), gen, kill, conditional);\n             computeGenKill(n.getLastChild(), gen, kill, true);\n             return;\n         case Token.HOOK:\n             computeGenKill(n.getFirstChild(), gen, kill, conditional);\n             computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n             computeGenKill(n.getLastChild(), gen, kill, true);\n             return;\n         case Token.NAME:\n             if (isArgumentsName(n)) {\n                 markAllParametersEscaped();\n             } else {\n                 addToSetIfLocal(n, gen);\n             }\n             return;\n         default:\n             if (NodeUtil.isAssignmentOp(n) \u0026\u0026 NodeUtil.isName(n.getFirstChild())) {\n                 Node lhs \u003d n.getFirstChild();\n                 if (!conditional) {\n                     addToSetIfLocal(lhs, kill);\n                 }\n                 if (!NodeUtil.isAssign(n)) {\n                     addToSetIfLocal(lhs, gen);\n                 }\n                 computeGenKill(lhs.getNext(), gen, kill, conditional);\n             } else {\n                 for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n                     computeGenKill(c, gen, kill, conditional);\n                 }\n             }\n             return;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,70 @@\n+private void computeGenKill(Node n, BitSet gen, BitSet kill, boolean conditional) {\n+    switch(n.getType()) {\n+        case Token.SCRIPT:\n+        case Token.BLOCK:\n+        case Token.FUNCTION:\n+            return;\n+        case Token.WHILE:\n+        case Token.DO:\n+        case Token.IF:\n+            computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional);\n+            return;\n+        case Token.FOR:\n+            if (n.getChildCount() \u003d\u003d 4) {\n+                computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional);\n+            } else {\n+                Node lhs \u003d n.getFirstChild();\n+                Node rhs \u003d lhs.getNext();\n+                if (NodeUtil.isVar(lhs)) {\n+                    lhs \u003d lhs.getLastChild();\n+                }\n+                addToSetIfLocal(lhs, kill);\n+                addToSetIfLocal(lhs, gen);\n+                computeGenKill(rhs, gen, kill, conditional);\n+            }\n+            return;\n+        case Token.VAR:\n+            for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n+                if (c.hasChildren()) {\n+                    computeGenKill(c.getFirstChild(), gen, kill, conditional);\n+                    if (!conditional) {\n+                        addToSetIfLocal(c, kill);\n+                    }\n+                }\n+            }\n+            return;\n+        case Token.AND:\n+        case Token.OR:\n+            computeGenKill(n.getFirstChild(), gen, kill, conditional);\n+            computeGenKill(n.getLastChild(), gen, kill, true);\n+            return;\n+        case Token.HOOK:\n+            computeGenKill(n.getFirstChild(), gen, kill, conditional);\n+            computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n+            computeGenKill(n.getLastChild(), gen, kill, true);\n+            return;\n+        case Token.NAME:\n+            if (isArgumentsName(n)) {\n+                markAllParametersEscaped();\n+            } else {\n+                addToSetIfLocal(n, gen);\n+            }\n+            return;\n+        default:\n+            if (NodeUtil.isAssignmentOp(n) \u0026\u0026 NodeUtil.isName(n.getFirstChild())) {\n+                Node lhs \u003d n.getFirstChild();\n+                if (!conditional) {\n+                    addToSetIfLocal(lhs, kill);\n+                }\n+                if (!NodeUtil.isAssign(n)) {\n+                    addToSetIfLocal(lhs, gen);\n+                }\n+                computeGenKill(lhs.getNext(), gen, kill, conditional);\n+            } else {\n+                for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n+                    computeGenKill(c, gen, kill, conditional);\n+                }\n+            }\n+            return;\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void computeGenKill(Node n, BitSet gen, BitSet kill, boolean conditional) {\n    switch(n.getType()) {\n        case Token.SCRIPT:\n        case Token.BLOCK:\n        case Token.FUNCTION:\n            return;\n        case Token.WHILE:\n        case Token.DO:\n        case Token.IF:\n            computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional);\n            return;\n        case Token.FOR:\n            if (n.getChildCount() \u003d\u003d 4) {\n                computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional);\n            } else {\n                Node lhs \u003d n.getFirstChild();\n                Node rhs \u003d lhs.getNext();\n                if (NodeUtil.isVar(lhs)) {\n                    lhs \u003d lhs.getLastChild();\n                }\n                addToSetIfLocal(lhs, kill);\n                addToSetIfLocal(lhs, gen);\n                computeGenKill(rhs, gen, kill, conditional);\n            }\n            return;\n        case Token.VAR:\n            for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n                if (c.hasChildren()) {\n                    computeGenKill(c.getFirstChild(), gen, kill, conditional);\n                    if (!conditional) {\n                        addToSetIfLocal(c, kill);\n                    }\n                }\n            }\n            return;\n        case Token.AND:\n        case Token.OR:\n            computeGenKill(n.getFirstChild(), gen, kill, conditional);\n            computeGenKill(n.getLastChild(), gen, kill, true);\n            return;\n        case Token.HOOK:\n            computeGenKill(n.getFirstChild(), gen, kill, conditional);\n            computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n            computeGenKill(n.getLastChild(), gen, kill, true);\n            return;\n        case Token.NAME:\n            if (isArgumentsName(n)) {\n                markAllParametersEscaped();\n            } else {\n                addToSetIfLocal(n, gen);\n            }\n            return;\n        default:\n            if (NodeUtil.isAssignmentOp(n) \u0026\u0026 NodeUtil.isName(n.getFirstChild())) {\n                Node lhs \u003d n.getFirstChild();\n                if (!conditional) {\n                    addToSetIfLocal(lhs, kill);\n                }\n                if (!NodeUtil.isAssign(n)) {\n                    addToSetIfLocal(lhs, gen);\n                }\n                computeGenKill(lhs.getNext(), gen, kill, conditional);\n            } else {\n                for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n                    computeGenKill(c, gen, kill, conditional);\n                }\n            }\n            return;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/LiveVariablesAnalysis.java",
      "functionStartLine": 179,
      "functionName": "computeGenKill",
      "functionAnnotation": "",
      "functionDoc": "Computes the GEN and KILL set.\n\n@param n Root node.\n@param gen Local variables that are live because of the instruction at\n       {@code n} will be added to this set.\n@param kill Local variables that are killed because of the instruction at\n       {@code n} will be added to this set.\n@param conditional @code true} if any assignments encountered are\n       conditionally executed. These assignments might not kill a variable.\n"
    }
  }
}