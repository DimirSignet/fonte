{
  "origin": "codeshovel",
  "repositoryName": "Closure-30b",
  "repositoryPath": "/tmp/Closure-30b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NodeUtil.java",
  "functionName": "functionCallHasSideEffects",
  "functionId": "functionCallHasSideEffects___callNode-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/NodeUtil.java",
  "functionAnnotation": "",
  "functionDoc": "Returns true if calls to this function have side effects.\n\n@param callNode - function call node\n",
  "functionStartLine": 976,
  "functionEndLine": 978,
  "numCommitsSeen": 120,
  "timeTaken": 10039,
  "changeHistory": [
    "80fe41fd0173c3eaa56f4abb783031966ea89cef",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "80fe41fd0173c3eaa56f4abb783031966ea89cef": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "80fe41fd0173c3eaa56f4abb783031966ea89cef": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/04/09 by john\n\n        Part II: Use global RegExp reference information to optimize references when possible.\n\n        R\u003dalan\n        DELTA\u003d231  (173 added, 17 deleted, 41 changed)\n\nChange on 2010/04/09 by nicksantos\n\n        Make JsFileLineParser much more efficient for large files\n        (we were running into problems with it running out of memory.)\n\n        R\u003dandrew\n        DELTA\u003d192  (157 added, 1 deleted, 34 changed)\n\nChange on 2010/04/09 by alan\n\n        Fix typed code gen crash when generating typed code.\n\n        R\u003dnicksantos\n        DELTA\u003d35  (24 added, 2 deleted, 9 changed)\n\nChange on 2010/04/09 by alan\n\n        Disable method motion on functions that reads closure variables.\n\n        R\u003dnicksantos\n        DELTA\u003d171  (162 added, 1 deleted, 8 changed)\n\nChange on 2010/04/12 by nada\n\n        In AmbiguateProperties, invert the related type relationship, by\n        considering subclasses and implementors (down) instead of superclasses\n        and implemented interfaces (up). This has two advantages:\n\n        - The \u0027independent of\u0027 relationship is simplified, because we only\n          need to consider whether the related types intersect.\n\n        - We can account for \u0027multiple inheritance\u0027, which is a practical\n          issue because of interfaces.\n\n        Note that the \u0027up\u0027 relationship allows us to easily find common\n        ancestors while the \u0027down\u0027 relationship allows us to easily find\n        common descendants -- and this is what we care about for ambiguation.\n\n\n        R\u003dmoedinger\n        DELTA\u003d173  (124 added, 15 deleted, 34 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dmwgnge\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@180 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/12/10, 7:59 AM",
      "commitName": "80fe41fd0173c3eaa56f4abb783031966ea89cef",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/7/10, 11:34 AM",
      "commitNameOld": "7eaa0d8eca2549742649af34671eaf3da83b5c08",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 4.85,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "static boolean functionCallHasSideEffects(Node callNode) {\n    return functionCallHasSideEffects(callNode, null);\n}",
      "path": "src/com/google/javascript/jscomp/NodeUtil.java",
      "functionStartLine": 508,
      "functionName": "functionCallHasSideEffects",
      "functionAnnotation": "",
      "functionDoc": "Returns true if calls to this function have side effects.\n\n@param callNode - function call node\n",
      "diff": "@@ -1,20 +1,3 @@\n static boolean functionCallHasSideEffects(Node callNode) {\n-    Preconditions.checkArgument(callNode.getType() \u003d\u003d Token.CALL, \"Expected CALL node, got \" + Token.name(callNode.getType()));\n-    if (callNode.isNoSideEffectsCall()) {\n-        return false;\n-    }\n-    Node nameNode \u003d callNode.getFirstChild();\n-    if (nameNode.getType() \u003d\u003d Token.NAME) {\n-        String name \u003d nameNode.getString();\n-        if (name.equals(\"String\")) {\n-            return false;\n-        }\n-    }\n-    if (nameNode.getType() \u003d\u003d Token.GETPROP \u0026\u0026 nameNode.getFirstChild().getType() \u003d\u003d Token.NAME) {\n-        String namespaceName \u003d nameNode.getFirstChild().getString();\n-        if (namespaceName.equals(\"Math\")) {\n-            return false;\n-        }\n-    }\n-    return true;\n+    return functionCallHasSideEffects(callNode, null);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,20 @@\n+static boolean functionCallHasSideEffects(Node callNode) {\n+    Preconditions.checkArgument(callNode.getType() \u003d\u003d Token.CALL, \"Expected CALL node, got \" + Token.name(callNode.getType()));\n+    if (callNode.isNoSideEffectsCall()) {\n+        return false;\n+    }\n+    Node nameNode \u003d callNode.getFirstChild();\n+    if (nameNode.getType() \u003d\u003d Token.NAME) {\n+        String name \u003d nameNode.getString();\n+        if (name.equals(\"String\")) {\n+            return false;\n+        }\n+    }\n+    if (nameNode.getType() \u003d\u003d Token.GETPROP \u0026\u0026 nameNode.getFirstChild().getType() \u003d\u003d Token.NAME) {\n+        String namespaceName \u003d nameNode.getFirstChild().getString();\n+        if (namespaceName.equals(\"Math\")) {\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n\\ No newline at end of file\n",
      "actualSource": "static boolean functionCallHasSideEffects(Node callNode) {\n    Preconditions.checkArgument(callNode.getType() \u003d\u003d Token.CALL, \"Expected CALL node, got \" + Token.name(callNode.getType()));\n    if (callNode.isNoSideEffectsCall()) {\n        return false;\n    }\n    Node nameNode \u003d callNode.getFirstChild();\n    if (nameNode.getType() \u003d\u003d Token.NAME) {\n        String name \u003d nameNode.getString();\n        if (name.equals(\"String\")) {\n            return false;\n        }\n    }\n    if (nameNode.getType() \u003d\u003d Token.GETPROP \u0026\u0026 nameNode.getFirstChild().getType() \u003d\u003d Token.NAME) {\n        String namespaceName \u003d nameNode.getFirstChild().getString();\n        if (namespaceName.equals(\"Math\")) {\n            return false;\n        }\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/jscomp/NodeUtil.java",
      "functionStartLine": 485,
      "functionName": "functionCallHasSideEffects",
      "functionAnnotation": "",
      "functionDoc": "Returns true if calls to this function have side effects.\n\n@param callNode - function call node\n"
    }
  }
}