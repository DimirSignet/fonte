{
  "origin": "codeshovel",
  "repositoryName": "Closure-30b",
  "repositoryPath": "/tmp/Closure-30b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FlowSensitiveInlineVariables.java",
  "functionName": "canInline",
  "functionId": "$canInline",
  "sourceFilePath": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 248,
  "functionEndLine": 368,
  "numCommitsSeen": 21,
  "timeTaken": 1160,
  "changeHistory": [
    "3d80e1ed8fffbcb5f41b63f64726d9a4c76f209f",
    "4553519e4f2e27200fca0610893a169356d5ce0f",
    "5b55e9faab08e7d9292d9b1bfe24da8631d08416",
    "793a50095cb8e289cbe3e3446f7432e33e2d102a",
    "74a817bbf5256d671036356c58096f612535e4a2",
    "f8229e74701c28f001e5b4954c1f1f7a2b764c11",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "3d80e1ed8fffbcb5f41b63f64726d9a4c76f209f": "Ybodychange",
    "4553519e4f2e27200fca0610893a169356d5ce0f": "Ybodychange",
    "5b55e9faab08e7d9292d9b1bfe24da8631d08416": "Ybodychange",
    "793a50095cb8e289cbe3e3446f7432e33e2d102a": "Ybodychange",
    "74a817bbf5256d671036356c58096f612535e4a2": "Ybodychange",
    "f8229e74701c28f001e5b4954c1f1f7a2b764c11": "Yformatchange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3d80e1ed8fffbcb5f41b63f64726d9a4c76f209f": {
      "type": "Ybodychange",
      "commitMessage": "\nInline NodeUtil.isXXX functions and call the Node.isXXX functions\ndirectly.\n\nR\u003dnicksantos\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3673\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1578 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/9/11, 1:51 PM",
      "commitName": "3d80e1ed8fffbcb5f41b63f64726d9a4c76f209f",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "8/22/11, 4:35 PM",
      "commitNameOld": "6c2efacb7315e03b25d0b23a6c881df9955b210a",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 78.93,
      "commitsBetweenForRepo": 187,
      "commitsBetweenForFile": 1,
      "actualSource": "private boolean canInline() {\n    if (defCfgNode.isFunction()) {\n        return false;\n    }\n    getDefinition(defCfgNode, null);\n    getNumUseInUseCfgNode(useCfgNode, null);\n    if (def \u003d\u003d null) {\n        return false;\n    }\n    if (def.isAssign() \u0026\u0026 !NodeUtil.isExprAssign(def.getParent())) {\n        return false;\n    }\n    if (checkRightOf(def, defCfgNode, SIDE_EFFECT_PREDICATE)) {\n        return false;\n    }\n    if (checkLeftOf(use, useCfgNode, SIDE_EFFECT_PREDICATE)) {\n        return false;\n    }\n    if (NodeUtil.mayHaveSideEffects(def.getLastChild())) {\n        return false;\n    }\n    if (numUseWithinUseCfgNode !\u003d 1) {\n        return false;\n    }\n    if (NodeUtil.isWithinLoop(use)) {\n        return false;\n    }\n    Collection\u003cNode\u003e uses \u003d reachingUses.getUses(varName, defCfgNode);\n    if (uses.size() !\u003d 1) {\n        return false;\n    }\n    if (NodeUtil.has(def.getLastChild(), new Predicate\u003cNode\u003e() {\n\n        @Override\n        public boolean apply(Node input) {\n            switch(input.getType()) {\n                case Token.GETELEM:\n                case Token.GETPROP:\n                case Token.ARRAYLIT:\n                case Token.OBJECTLIT:\n                case Token.REGEXP:\n                case Token.NEW:\n                    return true;\n            }\n            return false;\n        }\n    }, new Predicate\u003cNode\u003e() {\n\n        @Override\n        public boolean apply(Node input) {\n            return !input.isFunction();\n        }\n    })) {\n        return false;\n    }\n    if (NodeUtil.isStatementBlock(defCfgNode.getParent()) \u0026\u0026 defCfgNode.getNext() !\u003d useCfgNode) {\n        CheckPathsBetweenNodes\u003cNode, ControlFlowGraph.Branch\u003e pathCheck \u003d new CheckPathsBetweenNodes\u003cNode, ControlFlowGraph.Branch\u003e(cfg, cfg.getDirectedGraphNode(defCfgNode), cfg.getDirectedGraphNode(useCfgNode), SIDE_EFFECT_PREDICATE, Predicates.\u003cDiGraphEdge\u003cNode, ControlFlowGraph.Branch\u003e\u003ealwaysTrue(), false);\n        if (pathCheck.somePathsSatisfyPredicate()) {\n            return false;\n        }\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
      "functionStartLine": 248,
      "functionName": "canInline",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,63 +1,63 @@\n private boolean canInline() {\n-    if (NodeUtil.isFunction(defCfgNode)) {\n+    if (defCfgNode.isFunction()) {\n         return false;\n     }\n     getDefinition(defCfgNode, null);\n     getNumUseInUseCfgNode(useCfgNode, null);\n     if (def \u003d\u003d null) {\n         return false;\n     }\n-    if (NodeUtil.isAssign(def) \u0026\u0026 !NodeUtil.isExprAssign(def.getParent())) {\n+    if (def.isAssign() \u0026\u0026 !NodeUtil.isExprAssign(def.getParent())) {\n         return false;\n     }\n     if (checkRightOf(def, defCfgNode, SIDE_EFFECT_PREDICATE)) {\n         return false;\n     }\n     if (checkLeftOf(use, useCfgNode, SIDE_EFFECT_PREDICATE)) {\n         return false;\n     }\n     if (NodeUtil.mayHaveSideEffects(def.getLastChild())) {\n         return false;\n     }\n     if (numUseWithinUseCfgNode !\u003d 1) {\n         return false;\n     }\n     if (NodeUtil.isWithinLoop(use)) {\n         return false;\n     }\n     Collection\u003cNode\u003e uses \u003d reachingUses.getUses(varName, defCfgNode);\n     if (uses.size() !\u003d 1) {\n         return false;\n     }\n     if (NodeUtil.has(def.getLastChild(), new Predicate\u003cNode\u003e() {\n \n         @Override\n         public boolean apply(Node input) {\n             switch(input.getType()) {\n                 case Token.GETELEM:\n                 case Token.GETPROP:\n                 case Token.ARRAYLIT:\n                 case Token.OBJECTLIT:\n                 case Token.REGEXP:\n                 case Token.NEW:\n                     return true;\n             }\n             return false;\n         }\n     }, new Predicate\u003cNode\u003e() {\n \n         @Override\n         public boolean apply(Node input) {\n-            return !NodeUtil.isFunction(input);\n+            return !input.isFunction();\n         }\n     })) {\n         return false;\n     }\n     if (NodeUtil.isStatementBlock(defCfgNode.getParent()) \u0026\u0026 defCfgNode.getNext() !\u003d useCfgNode) {\n         CheckPathsBetweenNodes\u003cNode, ControlFlowGraph.Branch\u003e pathCheck \u003d new CheckPathsBetweenNodes\u003cNode, ControlFlowGraph.Branch\u003e(cfg, cfg.getDirectedGraphNode(defCfgNode), cfg.getDirectedGraphNode(useCfgNode), SIDE_EFFECT_PREDICATE, Predicates.\u003cDiGraphEdge\u003cNode, ControlFlowGraph.Branch\u003e\u003ealwaysTrue(), false);\n         if (pathCheck.somePathsSatisfyPredicate()) {\n             return false;\n         }\n     }\n     return true;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4553519e4f2e27200fca0610893a169356d5ce0f": {
      "type": "Ybodychange",
      "commitMessage": "\nSort some of the checks by computation complexity so it bails out earlier. (30s -\u003e 27.5s in bullet.js)\n\nR\u003djohnlenz\nDELTA\u003d46  (22 added, 20 deleted, 4 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1921\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1109 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/16/11, 3:03 PM",
      "commitName": "4553519e4f2e27200fca0610893a169356d5ce0f",
      "commitAuthor": "acleung@google.com",
      "commitDateOld": "5/13/11, 4:40 PM",
      "commitNameOld": "5b55e9faab08e7d9292d9b1bfe24da8631d08416",
      "commitAuthorOld": "acleung@google.com",
      "daysBetweenCommits": 2.93,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "private boolean canInline() {\n    if (NodeUtil.isFunction(defCfgNode)) {\n        return false;\n    }\n    getDefinition(defCfgNode, null);\n    getNumUseInUseCfgNode(useCfgNode, null);\n    if (def \u003d\u003d null) {\n        return false;\n    }\n    if (NodeUtil.isAssign(def) \u0026\u0026 !NodeUtil.isExprAssign(def.getParent())) {\n        return false;\n    }\n    if (checkRightOf(def, defCfgNode, SIDE_EFFECT_PREDICATE)) {\n        return false;\n    }\n    if (checkLeftOf(use, useCfgNode, SIDE_EFFECT_PREDICATE)) {\n        return false;\n    }\n    if (NodeUtil.mayHaveSideEffects(def.getLastChild())) {\n        return false;\n    }\n    if (numUseWithinUseCfgNode !\u003d 1) {\n        return false;\n    }\n    if (NodeUtil.isWithinLoop(use)) {\n        return false;\n    }\n    Collection\u003cNode\u003e uses \u003d reachingUses.getUses(varName, defCfgNode);\n    if (uses.size() !\u003d 1) {\n        return false;\n    }\n    if (NodeUtil.has(def.getLastChild(), new Predicate\u003cNode\u003e() {\n\n        @Override\n        public boolean apply(Node input) {\n            switch(input.getType()) {\n                case Token.GETELEM:\n                case Token.GETPROP:\n                case Token.ARRAYLIT:\n                case Token.OBJECTLIT:\n                case Token.REGEXP:\n                case Token.NEW:\n                    return true;\n            }\n            return false;\n        }\n    }, new Predicate\u003cNode\u003e() {\n\n        @Override\n        public boolean apply(Node input) {\n            return !NodeUtil.isFunction(input);\n        }\n    })) {\n        return false;\n    }\n    if (NodeUtil.isStatementBlock(defCfgNode.getParent()) \u0026\u0026 defCfgNode.getNext() !\u003d useCfgNode) {\n        CheckPathsBetweenNodes\u003cNode, ControlFlowGraph.Branch\u003e pathCheck \u003d new CheckPathsBetweenNodes\u003cNode, ControlFlowGraph.Branch\u003e(cfg, cfg.getDirectedGraphNode(defCfgNode), cfg.getDirectedGraphNode(useCfgNode), SIDE_EFFECT_PREDICATE, Predicates.\u003cDiGraphEdge\u003cNode, ControlFlowGraph.Branch\u003e\u003ealwaysTrue(), false);\n        if (pathCheck.somePathsSatisfyPredicate()) {\n            return false;\n        }\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
      "functionStartLine": 243,
      "functionName": "canInline",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,63 +1,63 @@\n private boolean canInline() {\n     if (NodeUtil.isFunction(defCfgNode)) {\n         return false;\n     }\n     getDefinition(defCfgNode, null);\n     getNumUseInUseCfgNode(useCfgNode, null);\n     if (def \u003d\u003d null) {\n         return false;\n     }\n     if (NodeUtil.isAssign(def) \u0026\u0026 !NodeUtil.isExprAssign(def.getParent())) {\n         return false;\n     }\n     if (checkRightOf(def, defCfgNode, SIDE_EFFECT_PREDICATE)) {\n         return false;\n     }\n     if (checkLeftOf(use, useCfgNode, SIDE_EFFECT_PREDICATE)) {\n         return false;\n     }\n-    if (NodeUtil.isStatementBlock(defCfgNode.getParent()) \u0026\u0026 defCfgNode.getNext() !\u003d useCfgNode) {\n-        CheckPathsBetweenNodes\u003cNode, ControlFlowGraph.Branch\u003e pathCheck \u003d new CheckPathsBetweenNodes\u003cNode, ControlFlowGraph.Branch\u003e(cfg, cfg.getDirectedGraphNode(defCfgNode), cfg.getDirectedGraphNode(useCfgNode), SIDE_EFFECT_PREDICATE, Predicates.\u003cDiGraphEdge\u003cNode, ControlFlowGraph.Branch\u003e\u003ealwaysTrue(), false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-            return false;\n-        }\n-    }\n     if (NodeUtil.mayHaveSideEffects(def.getLastChild())) {\n         return false;\n     }\n     if (numUseWithinUseCfgNode !\u003d 1) {\n         return false;\n     }\n     if (NodeUtil.isWithinLoop(use)) {\n         return false;\n     }\n+    Collection\u003cNode\u003e uses \u003d reachingUses.getUses(varName, defCfgNode);\n+    if (uses.size() !\u003d 1) {\n+        return false;\n+    }\n     if (NodeUtil.has(def.getLastChild(), new Predicate\u003cNode\u003e() {\n \n         @Override\n         public boolean apply(Node input) {\n             switch(input.getType()) {\n                 case Token.GETELEM:\n                 case Token.GETPROP:\n                 case Token.ARRAYLIT:\n                 case Token.OBJECTLIT:\n                 case Token.REGEXP:\n                 case Token.NEW:\n                     return true;\n             }\n             return false;\n         }\n     }, new Predicate\u003cNode\u003e() {\n \n         @Override\n         public boolean apply(Node input) {\n             return !NodeUtil.isFunction(input);\n         }\n     })) {\n         return false;\n     }\n-    Collection\u003cNode\u003e uses \u003d reachingUses.getUses(varName, defCfgNode);\n-    if (uses.size() !\u003d 1) {\n-        return false;\n+    if (NodeUtil.isStatementBlock(defCfgNode.getParent()) \u0026\u0026 defCfgNode.getNext() !\u003d useCfgNode) {\n+        CheckPathsBetweenNodes\u003cNode, ControlFlowGraph.Branch\u003e pathCheck \u003d new CheckPathsBetweenNodes\u003cNode, ControlFlowGraph.Branch\u003e(cfg, cfg.getDirectedGraphNode(defCfgNode), cfg.getDirectedGraphNode(useCfgNode), SIDE_EFFECT_PREDICATE, Predicates.\u003cDiGraphEdge\u003cNode, ControlFlowGraph.Branch\u003e\u003ealwaysTrue(), false);\n+        if (pathCheck.somePathsSatisfyPredicate()) {\n+            return false;\n+        }\n     }\n     return true;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5b55e9faab08e7d9292d9b1bfe24da8631d08416": {
      "type": "Ybodychange",
      "commitMessage": "\nSkips checkPathbetweenNodes if nodes are next to each other.\n\nR\u003djohnlenz\nDELTA\u003d24  (10 added, 0 deleted, 14 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1911\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1099 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/13/11, 4:40 PM",
      "commitName": "5b55e9faab08e7d9292d9b1bfe24da8631d08416",
      "commitAuthor": "acleung@google.com",
      "commitDateOld": "4/12/11, 12:15 PM",
      "commitNameOld": "f322be0e576d5e2114cb59c0a6537197997b9c59",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 31.18,
      "commitsBetweenForRepo": 96,
      "commitsBetweenForFile": 1,
      "actualSource": "private boolean canInline() {\n    if (NodeUtil.isFunction(defCfgNode)) {\n        return false;\n    }\n    getDefinition(defCfgNode, null);\n    getNumUseInUseCfgNode(useCfgNode, null);\n    if (def \u003d\u003d null) {\n        return false;\n    }\n    if (NodeUtil.isAssign(def) \u0026\u0026 !NodeUtil.isExprAssign(def.getParent())) {\n        return false;\n    }\n    if (checkRightOf(def, defCfgNode, SIDE_EFFECT_PREDICATE)) {\n        return false;\n    }\n    if (checkLeftOf(use, useCfgNode, SIDE_EFFECT_PREDICATE)) {\n        return false;\n    }\n    if (NodeUtil.isStatementBlock(defCfgNode.getParent()) \u0026\u0026 defCfgNode.getNext() !\u003d useCfgNode) {\n        CheckPathsBetweenNodes\u003cNode, ControlFlowGraph.Branch\u003e pathCheck \u003d new CheckPathsBetweenNodes\u003cNode, ControlFlowGraph.Branch\u003e(cfg, cfg.getDirectedGraphNode(defCfgNode), cfg.getDirectedGraphNode(useCfgNode), SIDE_EFFECT_PREDICATE, Predicates.\u003cDiGraphEdge\u003cNode, ControlFlowGraph.Branch\u003e\u003ealwaysTrue(), false);\n        if (pathCheck.somePathsSatisfyPredicate()) {\n            return false;\n        }\n    }\n    if (NodeUtil.mayHaveSideEffects(def.getLastChild())) {\n        return false;\n    }\n    if (numUseWithinUseCfgNode !\u003d 1) {\n        return false;\n    }\n    if (NodeUtil.isWithinLoop(use)) {\n        return false;\n    }\n    if (NodeUtil.has(def.getLastChild(), new Predicate\u003cNode\u003e() {\n\n        @Override\n        public boolean apply(Node input) {\n            switch(input.getType()) {\n                case Token.GETELEM:\n                case Token.GETPROP:\n                case Token.ARRAYLIT:\n                case Token.OBJECTLIT:\n                case Token.REGEXP:\n                case Token.NEW:\n                    return true;\n            }\n            return false;\n        }\n    }, new Predicate\u003cNode\u003e() {\n\n        @Override\n        public boolean apply(Node input) {\n            return !NodeUtil.isFunction(input);\n        }\n    })) {\n        return false;\n    }\n    Collection\u003cNode\u003e uses \u003d reachingUses.getUses(varName, defCfgNode);\n    if (uses.size() !\u003d 1) {\n        return false;\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
      "functionStartLine": 243,
      "functionName": "canInline",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,61 +1,63 @@\n private boolean canInline() {\n     if (NodeUtil.isFunction(defCfgNode)) {\n         return false;\n     }\n     getDefinition(defCfgNode, null);\n     getNumUseInUseCfgNode(useCfgNode, null);\n     if (def \u003d\u003d null) {\n         return false;\n     }\n     if (NodeUtil.isAssign(def) \u0026\u0026 !NodeUtil.isExprAssign(def.getParent())) {\n         return false;\n     }\n     if (checkRightOf(def, defCfgNode, SIDE_EFFECT_PREDICATE)) {\n         return false;\n     }\n     if (checkLeftOf(use, useCfgNode, SIDE_EFFECT_PREDICATE)) {\n         return false;\n     }\n-    CheckPathsBetweenNodes\u003cNode, ControlFlowGraph.Branch\u003e pathCheck \u003d new CheckPathsBetweenNodes\u003cNode, ControlFlowGraph.Branch\u003e(cfg, cfg.getDirectedGraphNode(defCfgNode), cfg.getDirectedGraphNode(useCfgNode), SIDE_EFFECT_PREDICATE, Predicates.\u003cDiGraphEdge\u003cNode, ControlFlowGraph.Branch\u003e\u003ealwaysTrue(), false);\n-    if (pathCheck.somePathsSatisfyPredicate()) {\n-        return false;\n+    if (NodeUtil.isStatementBlock(defCfgNode.getParent()) \u0026\u0026 defCfgNode.getNext() !\u003d useCfgNode) {\n+        CheckPathsBetweenNodes\u003cNode, ControlFlowGraph.Branch\u003e pathCheck \u003d new CheckPathsBetweenNodes\u003cNode, ControlFlowGraph.Branch\u003e(cfg, cfg.getDirectedGraphNode(defCfgNode), cfg.getDirectedGraphNode(useCfgNode), SIDE_EFFECT_PREDICATE, Predicates.\u003cDiGraphEdge\u003cNode, ControlFlowGraph.Branch\u003e\u003ealwaysTrue(), false);\n+        if (pathCheck.somePathsSatisfyPredicate()) {\n+            return false;\n+        }\n     }\n     if (NodeUtil.mayHaveSideEffects(def.getLastChild())) {\n         return false;\n     }\n     if (numUseWithinUseCfgNode !\u003d 1) {\n         return false;\n     }\n     if (NodeUtil.isWithinLoop(use)) {\n         return false;\n     }\n     if (NodeUtil.has(def.getLastChild(), new Predicate\u003cNode\u003e() {\n \n         @Override\n         public boolean apply(Node input) {\n             switch(input.getType()) {\n                 case Token.GETELEM:\n                 case Token.GETPROP:\n                 case Token.ARRAYLIT:\n                 case Token.OBJECTLIT:\n                 case Token.REGEXP:\n                 case Token.NEW:\n                     return true;\n             }\n             return false;\n         }\n     }, new Predicate\u003cNode\u003e() {\n \n         @Override\n         public boolean apply(Node input) {\n             return !NodeUtil.isFunction(input);\n         }\n     })) {\n         return false;\n     }\n     Collection\u003cNode\u003e uses \u003d reachingUses.getUses(varName, defCfgNode);\n     if (uses.size() !\u003d 1) {\n         return false;\n     }\n     return true;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "793a50095cb8e289cbe3e3446f7432e33e2d102a": {
      "type": "Ybodychange",
      "commitMessage": "\nFlowSensitiveInlineVariable pass does not try to inline variables within loops.\n\nR\u003dacleung\nDELTA\u003d46  (27 added, 18 deleted, 1 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d196210\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@393 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/27/10, 7:35 PM",
      "commitName": "793a50095cb8e289cbe3e3446f7432e33e2d102a",
      "commitAuthor": "dhans@google.com",
      "commitDateOld": "8/12/10, 6:02 PM",
      "commitNameOld": "15acafb00636f99295b394145b9b60a5e624ddfa",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 15.06,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "actualSource": "private boolean canInline() {\n    if (NodeUtil.isFunction(defCfgNode)) {\n        return false;\n    }\n    getDefinition(defCfgNode, null);\n    getNumUseInUseCfgNode(useCfgNode, null);\n    if (def \u003d\u003d null) {\n        return false;\n    }\n    if (NodeUtil.isAssign(def) \u0026\u0026 !NodeUtil.isExprAssign(def.getParent())) {\n        return false;\n    }\n    if (checkRightOf(def, defCfgNode, SIDE_EFFECT_PREDICATE)) {\n        return false;\n    }\n    if (checkLeftOf(use, useCfgNode, SIDE_EFFECT_PREDICATE)) {\n        return false;\n    }\n    CheckPathsBetweenNodes\u003cNode, ControlFlowGraph.Branch\u003e pathCheck \u003d new CheckPathsBetweenNodes\u003cNode, ControlFlowGraph.Branch\u003e(cfg, cfg.getDirectedGraphNode(defCfgNode), cfg.getDirectedGraphNode(useCfgNode), SIDE_EFFECT_PREDICATE, Predicates.\u003cDiGraphEdge\u003cNode, ControlFlowGraph.Branch\u003e\u003ealwaysTrue(), false);\n    if (pathCheck.somePathsSatisfyPredicate()) {\n        return false;\n    }\n    if (NodeUtil.mayHaveSideEffects(def.getLastChild())) {\n        return false;\n    }\n    if (numUseWithinUseCfgNode !\u003d 1) {\n        return false;\n    }\n    if (NodeUtil.isWithinLoop(use)) {\n        return false;\n    }\n    if (NodeUtil.has(def.getLastChild(), new Predicate\u003cNode\u003e() {\n\n        @Override\n        public boolean apply(Node input) {\n            switch(input.getType()) {\n                case Token.GETELEM:\n                case Token.GETPROP:\n                case Token.ARRAYLIT:\n                case Token.OBJECTLIT:\n                case Token.REGEXP:\n                case Token.NEW:\n                    return true;\n            }\n            return false;\n        }\n    }, new Predicate\u003cNode\u003e() {\n\n        @Override\n        public boolean apply(Node input) {\n            return !NodeUtil.isFunction(input);\n        }\n    })) {\n        return false;\n    }\n    Collection\u003cNode\u003e uses \u003d reachingUses.getUses(varName, defCfgNode);\n    if (uses.size() !\u003d 1) {\n        return false;\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
      "functionStartLine": 244,
      "functionName": "canInline",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,58 +1,61 @@\n private boolean canInline() {\n     if (NodeUtil.isFunction(defCfgNode)) {\n         return false;\n     }\n     getDefinition(defCfgNode, null);\n     getNumUseInUseCfgNode(useCfgNode, null);\n     if (def \u003d\u003d null) {\n         return false;\n     }\n     if (NodeUtil.isAssign(def) \u0026\u0026 !NodeUtil.isExprAssign(def.getParent())) {\n         return false;\n     }\n     if (checkRightOf(def, defCfgNode, SIDE_EFFECT_PREDICATE)) {\n         return false;\n     }\n     if (checkLeftOf(use, useCfgNode, SIDE_EFFECT_PREDICATE)) {\n         return false;\n     }\n     CheckPathsBetweenNodes\u003cNode, ControlFlowGraph.Branch\u003e pathCheck \u003d new CheckPathsBetweenNodes\u003cNode, ControlFlowGraph.Branch\u003e(cfg, cfg.getDirectedGraphNode(defCfgNode), cfg.getDirectedGraphNode(useCfgNode), SIDE_EFFECT_PREDICATE, Predicates.\u003cDiGraphEdge\u003cNode, ControlFlowGraph.Branch\u003e\u003ealwaysTrue(), false);\n     if (pathCheck.somePathsSatisfyPredicate()) {\n         return false;\n     }\n     if (NodeUtil.mayHaveSideEffects(def.getLastChild())) {\n         return false;\n     }\n     if (numUseWithinUseCfgNode !\u003d 1) {\n         return false;\n     }\n+    if (NodeUtil.isWithinLoop(use)) {\n+        return false;\n+    }\n     if (NodeUtil.has(def.getLastChild(), new Predicate\u003cNode\u003e() {\n \n         @Override\n         public boolean apply(Node input) {\n             switch(input.getType()) {\n                 case Token.GETELEM:\n                 case Token.GETPROP:\n                 case Token.ARRAYLIT:\n                 case Token.OBJECTLIT:\n                 case Token.REGEXP:\n                 case Token.NEW:\n                     return true;\n             }\n             return false;\n         }\n     }, new Predicate\u003cNode\u003e() {\n \n         @Override\n         public boolean apply(Node input) {\n             return !NodeUtil.isFunction(input);\n         }\n     })) {\n         return false;\n     }\n     Collection\u003cNode\u003e uses \u003d reachingUses.getUses(varName, defCfgNode);\n     if (uses.size() !\u003d 1) {\n         return false;\n     }\n     return true;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "74a817bbf5256d671036356c58096f612535e4a2": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/04/08 by john\n\n        Part I: Add a pass that checks for references to the global RegExp object.\n\n        R\u003dalan\n        DELTA\u003d192  (185 added, 1 deleted, 6 changed)\n\nChange on 2010/04/08 by nick\n\n        type annotation fixit. Fixes issue 140.\n\n        R\u003dalan\n        DELTA\u003d69  (41 added, 0 deleted, 28 changed)\n\nChange on 2010/04/08 by alan\n\n        Fix the flow sensitive inlining case that breaks code.\n\n        R\u003djohn\n        DELTA\u003d163  (158 added, 0 deleted, 5 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003djfazwv\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@178 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/9/10, 7:21 AM",
      "commitName": "74a817bbf5256d671036356c58096f612535e4a2",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/7/10, 5:51 PM",
      "commitNameOld": "f8229e74701c28f001e5b4954c1f1f7a2b764c11",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 1.56,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "private boolean canInline() {\n    if (NodeUtil.isFunction(defCfgNode)) {\n        return false;\n    }\n    getDefinition(defCfgNode, null);\n    getNumUseInUseCfgNode(useCfgNode, null);\n    if (def \u003d\u003d null) {\n        return false;\n    }\n    if (NodeUtil.isAssign(def) \u0026\u0026 !NodeUtil.isExprAssign(def.getParent())) {\n        return false;\n    }\n    if (checkRightOf(def, defCfgNode, SIDE_EFFECT_PREDICATE)) {\n        return false;\n    }\n    if (checkLeftOf(use, useCfgNode, SIDE_EFFECT_PREDICATE)) {\n        return false;\n    }\n    CheckPathsBetweenNodes\u003cNode, ControlFlowGraph.Branch\u003e pathCheck \u003d new CheckPathsBetweenNodes\u003cNode, ControlFlowGraph.Branch\u003e(cfg, cfg.getDirectedGraphNode(defCfgNode), cfg.getDirectedGraphNode(useCfgNode), SIDE_EFFECT_PREDICATE, Predicates.\u003cDiGraphEdge\u003cNode, ControlFlowGraph.Branch\u003e\u003ealwaysTrue(), false);\n    if (pathCheck.somePathsSatisfyPredicate()) {\n        return false;\n    }\n    if (NodeUtil.mayHaveSideEffects(def.getLastChild())) {\n        return false;\n    }\n    if (numUseWithinUseCfgNode !\u003d 1) {\n        return false;\n    }\n    if (NodeUtil.has(def.getLastChild(), new Predicate\u003cNode\u003e() {\n\n        @Override\n        public boolean apply(Node input) {\n            switch(input.getType()) {\n                case Token.GETELEM:\n                case Token.GETPROP:\n                case Token.ARRAYLIT:\n                case Token.OBJECTLIT:\n                case Token.REGEXP:\n                case Token.NEW:\n                    return true;\n            }\n            return false;\n        }\n    }, new Predicate\u003cNode\u003e() {\n\n        @Override\n        public boolean apply(Node input) {\n            return !NodeUtil.isFunction(input);\n        }\n    })) {\n        return false;\n    }\n    Collection\u003cNode\u003e uses \u003d reachingUses.getUses(varName, defCfgNode);\n    if (uses.size() !\u003d 1) {\n        return false;\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
      "functionStartLine": 243,
      "functionName": "canInline",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,48 +1,58 @@\n private boolean canInline() {\n     if (NodeUtil.isFunction(defCfgNode)) {\n         return false;\n     }\n     getDefinition(defCfgNode, null);\n     getNumUseInUseCfgNode(useCfgNode, null);\n     if (def \u003d\u003d null) {\n         return false;\n     }\n     if (NodeUtil.isAssign(def) \u0026\u0026 !NodeUtil.isExprAssign(def.getParent())) {\n         return false;\n     }\n+    if (checkRightOf(def, defCfgNode, SIDE_EFFECT_PREDICATE)) {\n+        return false;\n+    }\n+    if (checkLeftOf(use, useCfgNode, SIDE_EFFECT_PREDICATE)) {\n+        return false;\n+    }\n+    CheckPathsBetweenNodes\u003cNode, ControlFlowGraph.Branch\u003e pathCheck \u003d new CheckPathsBetweenNodes\u003cNode, ControlFlowGraph.Branch\u003e(cfg, cfg.getDirectedGraphNode(defCfgNode), cfg.getDirectedGraphNode(useCfgNode), SIDE_EFFECT_PREDICATE, Predicates.\u003cDiGraphEdge\u003cNode, ControlFlowGraph.Branch\u003e\u003ealwaysTrue(), false);\n+    if (pathCheck.somePathsSatisfyPredicate()) {\n+        return false;\n+    }\n     if (NodeUtil.mayHaveSideEffects(def.getLastChild())) {\n         return false;\n     }\n     if (numUseWithinUseCfgNode !\u003d 1) {\n         return false;\n     }\n     if (NodeUtil.has(def.getLastChild(), new Predicate\u003cNode\u003e() {\n \n         @Override\n         public boolean apply(Node input) {\n             switch(input.getType()) {\n                 case Token.GETELEM:\n                 case Token.GETPROP:\n                 case Token.ARRAYLIT:\n                 case Token.OBJECTLIT:\n                 case Token.REGEXP:\n                 case Token.NEW:\n                     return true;\n             }\n             return false;\n         }\n     }, new Predicate\u003cNode\u003e() {\n \n         @Override\n         public boolean apply(Node input) {\n             return !NodeUtil.isFunction(input);\n         }\n     })) {\n         return false;\n     }\n     Collection\u003cNode\u003e uses \u003d reachingUses.getUses(varName, defCfgNode);\n     if (uses.size() !\u003d 1) {\n         return false;\n     }\n     return true;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f8229e74701c28f001e5b4954c1f1f7a2b764c11": {
      "type": "Yformatchange",
      "commitMessage": "\nsome whitespace-only changes\n\nFix up a type annotation on jquery externs.\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dweleuk\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@174 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/7/10, 5:51 PM",
      "commitName": "f8229e74701c28f001e5b4954c1f1f7a2b764c11",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "11/3/09, 3:51 PM",
      "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 155.04,
      "commitsBetweenForRepo": 147,
      "commitsBetweenForFile": 1,
      "actualSource": "private boolean canInline() {\n    if (NodeUtil.isFunction(defCfgNode)) {\n        return false;\n    }\n    getDefinition(defCfgNode, null);\n    getNumUseInUseCfgNode(useCfgNode, null);\n    if (def \u003d\u003d null) {\n        return false;\n    }\n    if (NodeUtil.isAssign(def) \u0026\u0026 !NodeUtil.isExprAssign(def.getParent())) {\n        return false;\n    }\n    if (NodeUtil.mayHaveSideEffects(def.getLastChild())) {\n        return false;\n    }\n    if (numUseWithinUseCfgNode !\u003d 1) {\n        return false;\n    }\n    if (NodeUtil.has(def.getLastChild(), new Predicate\u003cNode\u003e() {\n\n        @Override\n        public boolean apply(Node input) {\n            switch(input.getType()) {\n                case Token.GETELEM:\n                case Token.GETPROP:\n                case Token.ARRAYLIT:\n                case Token.OBJECTLIT:\n                case Token.REGEXP:\n                case Token.NEW:\n                    return true;\n            }\n            return false;\n        }\n    }, new Predicate\u003cNode\u003e() {\n\n        @Override\n        public boolean apply(Node input) {\n            return !NodeUtil.isFunction(input);\n        }\n    })) {\n        return false;\n    }\n    Collection\u003cNode\u003e uses \u003d reachingUses.getUses(varName, defCfgNode);\n    if (uses.size() !\u003d 1) {\n        return false;\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
      "functionStartLine": 211,
      "functionName": "canInline",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,48 @@\n+private boolean canInline() {\n+    if (NodeUtil.isFunction(defCfgNode)) {\n+        return false;\n+    }\n+    getDefinition(defCfgNode, null);\n+    getNumUseInUseCfgNode(useCfgNode, null);\n+    if (def \u003d\u003d null) {\n+        return false;\n+    }\n+    if (NodeUtil.isAssign(def) \u0026\u0026 !NodeUtil.isExprAssign(def.getParent())) {\n+        return false;\n+    }\n+    if (NodeUtil.mayHaveSideEffects(def.getLastChild())) {\n+        return false;\n+    }\n+    if (numUseWithinUseCfgNode !\u003d 1) {\n+        return false;\n+    }\n+    if (NodeUtil.has(def.getLastChild(), new Predicate\u003cNode\u003e() {\n+\n+        @Override\n+        public boolean apply(Node input) {\n+            switch(input.getType()) {\n+                case Token.GETELEM:\n+                case Token.GETPROP:\n+                case Token.ARRAYLIT:\n+                case Token.OBJECTLIT:\n+                case Token.REGEXP:\n+                case Token.NEW:\n+                    return true;\n+            }\n+            return false;\n+        }\n+    }, new Predicate\u003cNode\u003e() {\n+\n+        @Override\n+        public boolean apply(Node input) {\n+            return !NodeUtil.isFunction(input);\n+        }\n+    })) {\n+        return false;\n+    }\n+    Collection\u003cNode\u003e uses \u003d reachingUses.getUses(varName, defCfgNode);\n+    if (uses.size() !\u003d 1) {\n+        return false;\n+    }\n+    return true;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private boolean canInline() {\n    if (NodeUtil.isFunction(defCfgNode)) {\n        return false;\n    }\n    getDefinition(defCfgNode, null);\n    getNumUseInUseCfgNode(useCfgNode, null);\n    if (def \u003d\u003d null) {\n        return false;\n    }\n    if (NodeUtil.isAssign(def) \u0026\u0026 !NodeUtil.isExprAssign(def.getParent())) {\n        return false;\n    }\n    if (NodeUtil.mayHaveSideEffects(def.getLastChild())) {\n        return false;\n    }\n    if (numUseWithinUseCfgNode !\u003d 1) {\n        return false;\n    }\n    if (NodeUtil.has(def.getLastChild(), new Predicate\u003cNode\u003e() {\n\n        @Override\n        public boolean apply(Node input) {\n            switch(input.getType()) {\n                case Token.GETELEM:\n                case Token.GETPROP:\n                case Token.ARRAYLIT:\n                case Token.OBJECTLIT:\n                case Token.REGEXP:\n                case Token.NEW:\n                    return true;\n            }\n            return false;\n        }\n    }, new Predicate\u003cNode\u003e() {\n\n        @Override\n        public boolean apply(Node input) {\n            return !NodeUtil.isFunction(input);\n        }\n    })) {\n        return false;\n    }\n    Collection\u003cNode\u003e uses \u003d reachingUses.getUses(varName, defCfgNode);\n    if (uses.size() !\u003d 1) {\n        return false;\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
      "functionStartLine": 211,
      "functionName": "canInline",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}