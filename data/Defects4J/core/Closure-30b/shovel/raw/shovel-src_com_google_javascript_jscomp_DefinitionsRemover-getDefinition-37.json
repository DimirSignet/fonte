{
  "origin": "codeshovel",
  "repositoryName": "Closure-30b",
  "repositoryPath": "/tmp/Closure-30b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DefinitionsRemover.java",
  "functionName": "getDefinition",
  "functionId": "getDefinition___n-Node__isExtern-boolean",
  "sourceFilePath": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
  "functionAnnotation": "",
  "functionDoc": "\n@return an {@link Definition} object if the node contains a definition or\n    {@code null} otherwise.\n",
  "functionStartLine": 37,
  "functionEndLine": 65,
  "numCommitsSeen": 25,
  "timeTaken": 1257,
  "changeHistory": [
    "5524adbda991632656059566b69cc2771ba42b7d",
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
    "3d80e1ed8fffbcb5f41b63f64726d9a4c76f209f",
    "73f98ee988dad825ba8320bf4d8df0413fde531c",
    "34fd5f8275ae69fc772c2283a3c5fd13b93a7c42",
    "8e0ba4ed8fa6d97f698d59d24a26a1ac96b888ff",
    "e33e925eea3a8e4de958864e531e1adc4da62e18",
    "ebb59a97610015bc41bda7f458dd1428a3a3e335",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "5524adbda991632656059566b69cc2771ba42b7d": "Ybodychange",
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c": "Ybodychange",
    "3d80e1ed8fffbcb5f41b63f64726d9a4c76f209f": "Ybodychange",
    "73f98ee988dad825ba8320bf4d8df0413fde531c": "Ybodychange",
    "34fd5f8275ae69fc772c2283a3c5fd13b93a7c42": "Ybodychange",
    "8e0ba4ed8fa6d97f698d59d24a26a1ac96b888ff": "Ymultichange(Yparameterchange,Ybodychange)",
    "e33e925eea3a8e4de958864e531e1adc4da62e18": "Yformatchange",
    "ebb59a97610015bc41bda7f458dd1428a3a3e335": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5524adbda991632656059566b69cc2771ba42b7d": {
      "type": "Ybodychange",
      "commitMessage": "\nRename a couple of AST nodes:\nDEFAULT becomes DEFAULT_CASE\nLP becomes PARAM_LIST\nGET becomes GETTER_DEF\nSET becomes SETTER_DEF\n\nR\u003dnicksantos\nDELTA\u003d215  (40 added, 5 deleted, 170 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3695\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1590 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/11/11, 4:42 PM",
      "commitName": "5524adbda991632656059566b69cc2771ba42b7d",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/10/11, 8:36 AM",
      "commitNameOld": "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 1.34,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "static Definition getDefinition(Node n, boolean isExtern) {\n    Node parent \u003d n.getParent();\n    if (parent \u003d\u003d null) {\n        return null;\n    }\n    if (NodeUtil.isVarDeclaration(n) \u0026\u0026 n.hasChildren()) {\n        return new VarDefinition(n, isExtern);\n    } else if (parent.isFunction() \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n        if (!NodeUtil.isFunctionExpression(parent)) {\n            return new NamedFunctionDefinition(parent, isExtern);\n        } else if (!n.getString().equals(\"\")) {\n            return new FunctionExpressionDefinition(parent, isExtern);\n        }\n    } else if (parent.isAssign() \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n        return new AssignmentDefinition(parent, isExtern);\n    } else if (NodeUtil.isObjectLitKey(n, parent)) {\n        return new ObjectLiteralPropertyDefinition(parent, n, n.getFirstChild(), isExtern);\n    } else if (parent.isParamList()) {\n        Node function \u003d parent.getParent();\n        return new FunctionArgumentDefinition(function, n, isExtern);\n    }\n    return null;\n}",
      "path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
      "functionStartLine": 36,
      "functionName": "getDefinition",
      "functionAnnotation": "",
      "functionDoc": "\n@return an {@link Definition} object if the node contains a definition or\n    {@code null} otherwise.\n",
      "diff": "@@ -1,23 +1,23 @@\n static Definition getDefinition(Node n, boolean isExtern) {\n     Node parent \u003d n.getParent();\n     if (parent \u003d\u003d null) {\n         return null;\n     }\n     if (NodeUtil.isVarDeclaration(n) \u0026\u0026 n.hasChildren()) {\n         return new VarDefinition(n, isExtern);\n     } else if (parent.isFunction() \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n         if (!NodeUtil.isFunctionExpression(parent)) {\n             return new NamedFunctionDefinition(parent, isExtern);\n         } else if (!n.getString().equals(\"\")) {\n             return new FunctionExpressionDefinition(parent, isExtern);\n         }\n     } else if (parent.isAssign() \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n         return new AssignmentDefinition(parent, isExtern);\n     } else if (NodeUtil.isObjectLitKey(n, parent)) {\n         return new ObjectLiteralPropertyDefinition(parent, n, n.getFirstChild(), isExtern);\n-    } else if (parent.isLP()) {\n+    } else if (parent.isParamList()) {\n         Node function \u003d parent.getParent();\n         return new FunctionArgumentDefinition(function, n, isExtern);\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c": {
      "type": "Ybodychange",
      "commitMessage": "\nReplace the bulk of the Node.getType() \u003d\u003d Token.XXX calls with\nNode.isXXX calls.\n\nR\u003dnicksantos\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3677\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1582 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/10/11, 8:36 AM",
      "commitName": "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/9/11, 1:51 PM",
      "commitNameOld": "3d80e1ed8fffbcb5f41b63f64726d9a4c76f209f",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 0.78,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "static Definition getDefinition(Node n, boolean isExtern) {\n    Node parent \u003d n.getParent();\n    if (parent \u003d\u003d null) {\n        return null;\n    }\n    if (NodeUtil.isVarDeclaration(n) \u0026\u0026 n.hasChildren()) {\n        return new VarDefinition(n, isExtern);\n    } else if (parent.isFunction() \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n        if (!NodeUtil.isFunctionExpression(parent)) {\n            return new NamedFunctionDefinition(parent, isExtern);\n        } else if (!n.getString().equals(\"\")) {\n            return new FunctionExpressionDefinition(parent, isExtern);\n        }\n    } else if (parent.isAssign() \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n        return new AssignmentDefinition(parent, isExtern);\n    } else if (NodeUtil.isObjectLitKey(n, parent)) {\n        return new ObjectLiteralPropertyDefinition(parent, n, n.getFirstChild(), isExtern);\n    } else if (parent.isLP()) {\n        Node function \u003d parent.getParent();\n        return new FunctionArgumentDefinition(function, n, isExtern);\n    }\n    return null;\n}",
      "path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
      "functionStartLine": 36,
      "functionName": "getDefinition",
      "functionAnnotation": "",
      "functionDoc": "\n@return an {@link Definition} object if the node contains a definition or\n    {@code null} otherwise.\n",
      "diff": "@@ -1,23 +1,23 @@\n static Definition getDefinition(Node n, boolean isExtern) {\n     Node parent \u003d n.getParent();\n     if (parent \u003d\u003d null) {\n         return null;\n     }\n     if (NodeUtil.isVarDeclaration(n) \u0026\u0026 n.hasChildren()) {\n         return new VarDefinition(n, isExtern);\n     } else if (parent.isFunction() \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n         if (!NodeUtil.isFunctionExpression(parent)) {\n             return new NamedFunctionDefinition(parent, isExtern);\n         } else if (!n.getString().equals(\"\")) {\n             return new FunctionExpressionDefinition(parent, isExtern);\n         }\n     } else if (parent.isAssign() \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n         return new AssignmentDefinition(parent, isExtern);\n     } else if (NodeUtil.isObjectLitKey(n, parent)) {\n         return new ObjectLiteralPropertyDefinition(parent, n, n.getFirstChild(), isExtern);\n-    } else if (parent.getType() \u003d\u003d Token.LP) {\n+    } else if (parent.isLP()) {\n         Node function \u003d parent.getParent();\n         return new FunctionArgumentDefinition(function, n, isExtern);\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3d80e1ed8fffbcb5f41b63f64726d9a4c76f209f": {
      "type": "Ybodychange",
      "commitMessage": "\nInline NodeUtil.isXXX functions and call the Node.isXXX functions\ndirectly.\n\nR\u003dnicksantos\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3673\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1578 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/9/11, 1:51 PM",
      "commitName": "3d80e1ed8fffbcb5f41b63f64726d9a4c76f209f",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "10/31/11, 4:59 AM",
      "commitNameOld": "b4bf1efe7524c85fd931c9a2b49ec1aab90261a8",
      "commitAuthorOld": "sjnickerson@google.com",
      "daysBetweenCommits": 9.41,
      "commitsBetweenForRepo": 35,
      "commitsBetweenForFile": 1,
      "actualSource": "static Definition getDefinition(Node n, boolean isExtern) {\n    Node parent \u003d n.getParent();\n    if (parent \u003d\u003d null) {\n        return null;\n    }\n    if (NodeUtil.isVarDeclaration(n) \u0026\u0026 n.hasChildren()) {\n        return new VarDefinition(n, isExtern);\n    } else if (parent.isFunction() \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n        if (!NodeUtil.isFunctionExpression(parent)) {\n            return new NamedFunctionDefinition(parent, isExtern);\n        } else if (!n.getString().equals(\"\")) {\n            return new FunctionExpressionDefinition(parent, isExtern);\n        }\n    } else if (parent.isAssign() \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n        return new AssignmentDefinition(parent, isExtern);\n    } else if (NodeUtil.isObjectLitKey(n, parent)) {\n        return new ObjectLiteralPropertyDefinition(parent, n, n.getFirstChild(), isExtern);\n    } else if (parent.getType() \u003d\u003d Token.LP) {\n        Node function \u003d parent.getParent();\n        return new FunctionArgumentDefinition(function, n, isExtern);\n    }\n    return null;\n}",
      "path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
      "functionStartLine": 36,
      "functionName": "getDefinition",
      "functionAnnotation": "",
      "functionDoc": "\n@return an {@link Definition} object if the node contains a definition or\n    {@code null} otherwise.\n",
      "diff": "@@ -1,23 +1,23 @@\n static Definition getDefinition(Node n, boolean isExtern) {\n     Node parent \u003d n.getParent();\n     if (parent \u003d\u003d null) {\n         return null;\n     }\n     if (NodeUtil.isVarDeclaration(n) \u0026\u0026 n.hasChildren()) {\n         return new VarDefinition(n, isExtern);\n-    } else if (NodeUtil.isFunction(parent) \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n+    } else if (parent.isFunction() \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n         if (!NodeUtil.isFunctionExpression(parent)) {\n             return new NamedFunctionDefinition(parent, isExtern);\n         } else if (!n.getString().equals(\"\")) {\n             return new FunctionExpressionDefinition(parent, isExtern);\n         }\n-    } else if (NodeUtil.isAssign(parent) \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n+    } else if (parent.isAssign() \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n         return new AssignmentDefinition(parent, isExtern);\n     } else if (NodeUtil.isObjectLitKey(n, parent)) {\n         return new ObjectLiteralPropertyDefinition(parent, n, n.getFirstChild(), isExtern);\n     } else if (parent.getType() \u003d\u003d Token.LP) {\n         Node function \u003d parent.getParent();\n         return new FunctionArgumentDefinition(function, n, isExtern);\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "73f98ee988dad825ba8320bf4d8df0413fde531c": {
      "type": "Ybodychange",
      "commitMessage": "\nLay the groundwork for the my next call optimization.\n\nR\u003dacleung\nDELTA\u003d428  (267 added, 117 deleted, 44 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d6\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@570 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/29/10, 10:09 AM",
      "commitName": "73f98ee988dad825ba8320bf4d8df0413fde531c",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/11/10, 9:42 PM",
      "commitNameOld": "df223efd38c514d584f00d076488ab9a02011492",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 17.52,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "actualSource": "static Definition getDefinition(Node n, boolean isExtern) {\n    Node parent \u003d n.getParent();\n    if (parent \u003d\u003d null) {\n        return null;\n    }\n    if (NodeUtil.isVarDeclaration(n) \u0026\u0026 n.hasChildren()) {\n        return new VarDefinition(n, isExtern);\n    } else if (NodeUtil.isFunction(parent) \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n        if (!NodeUtil.isFunctionExpression(parent)) {\n            return new NamedFunctionDefinition(parent, isExtern);\n        } else if (!n.getString().equals(\"\")) {\n            return new FunctionExpressionDefinition(parent, isExtern);\n        }\n    } else if (NodeUtil.isAssign(parent) \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n        return new AssignmentDefinition(parent, isExtern);\n    } else if (NodeUtil.isObjectLitKey(n, parent)) {\n        return new ObjectLiteralPropertyDefinition(parent, n, n.getFirstChild(), isExtern);\n    } else if (parent.getType() \u003d\u003d Token.LP) {\n        Node function \u003d parent.getParent();\n        return new FunctionArgumentDefinition(function, n, isExtern);\n    }\n    return null;\n}",
      "path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
      "functionStartLine": 36,
      "functionName": "getDefinition",
      "functionAnnotation": "",
      "functionDoc": "\n@return an {@link Definition} object if the node contains a definition or\n    {@code null} otherwise.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "34fd5f8275ae69fc772c2283a3c5fd13b93a7c42": {
      "type": "Ybodychange",
      "commitMessage": "\nChange the OBJECTLIT AST structure from:\n\nOBJECTLIT\n  KEY1\n  VALUE1\n\nto\n\nOBJECTLIT\n  KEY1\n    VALUE1\n\nFixes issue 241\n\nR\u003dacleung,johnlenz,stevey\nDELTA\u003d268  (101 added, 51 deleted, 116 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d356416\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@494 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/18/10, 2:55 PM",
      "commitName": "34fd5f8275ae69fc772c2283a3c5fd13b93a7c42",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "9/13/10, 11:12 AM",
      "commitNameOld": "4c6e1039b80859f17de5f3cbcfeba61ed8ea0485",
      "commitAuthorOld": "elbaum@google.com",
      "daysBetweenCommits": 35.15,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "actualSource": "static Definition getDefinition(Node n, boolean isExtern) {\n    Node parent \u003d n.getParent();\n    if (parent \u003d\u003d null) {\n        return null;\n    }\n    if (NodeUtil.isVarDeclaration(n) \u0026\u0026 n.hasChildren()) {\n        return new VarDefinition(n, isExtern);\n    } else if (NodeUtil.isFunction(parent) \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n        if (!NodeUtil.isFunctionExpression(parent)) {\n            return new NamedFunctionDefinition(parent, isExtern);\n        } else if (!n.getString().equals(\"\")) {\n            return new FunctionExpressionDefinition(parent, isExtern);\n        }\n    } else if (NodeUtil.isAssign(parent) \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n        return new AssignmentDefinition(parent, isExtern);\n    } else if (NodeUtil.isObjectLitKey(n, parent)) {\n        return new ObjectLiteralPropertyDefinition(parent, n, n.getFirstChild(), isExtern);\n    } else if (parent.getType() \u003d\u003d Token.LP) {\n        Node function \u003d parent.getParent();\n        return new FunctionArgumentDefinition(function, n, isExtern);\n    }\n    return null;\n}",
      "path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
      "functionStartLine": 36,
      "functionName": "getDefinition",
      "functionAnnotation": "",
      "functionDoc": "\n@return an {@link Definition} object if the node contains a definition or\n    {@code null} otherwise.\n",
      "diff": "@@ -1,23 +1,23 @@\n static Definition getDefinition(Node n, boolean isExtern) {\n     Node parent \u003d n.getParent();\n     if (parent \u003d\u003d null) {\n         return null;\n     }\n     if (NodeUtil.isVarDeclaration(n) \u0026\u0026 n.hasChildren()) {\n         return new VarDefinition(n, isExtern);\n     } else if (NodeUtil.isFunction(parent) \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n         if (!NodeUtil.isFunctionExpression(parent)) {\n             return new NamedFunctionDefinition(parent, isExtern);\n         } else if (!n.getString().equals(\"\")) {\n             return new FunctionExpressionDefinition(parent, isExtern);\n         }\n     } else if (NodeUtil.isAssign(parent) \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n         return new AssignmentDefinition(parent, isExtern);\n     } else if (NodeUtil.isObjectLitKey(n, parent)) {\n-        return new ObjectLiteralPropertyDefinition(parent, n, n.getNext(), isExtern);\n+        return new ObjectLiteralPropertyDefinition(parent, n, n.getFirstChild(), isExtern);\n     } else if (parent.getType() \u003d\u003d Token.LP) {\n         Node function \u003d parent.getParent();\n         return new FunctionArgumentDefinition(function, n, isExtern);\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "8e0ba4ed8fa6d97f698d59d24a26a1ac96b888ff": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "\nAdd Definition#isInExterns().\n\nChanged the Definition interface to indicate whether a definition comes from the exports or not.\n\nChanged NameReferenceGraph and SimpleDefinitionFinder to provide this information (which they are\nalready calculating for internal use) when creating Definitions.\n\nPureFunctionIdentifier also creates definitions in PureFunctionIdentifier#getCallableDefinitions(). I had\nto change this from a static method to an instance method to be able to access the instance variable\nmap that stores whether a function was defined in externs or not. Nothing seems to rely on that\nmethod being static, but it probably needs some scrutiny.\n\nR\u003dacleung,avd\nDELTA\u003d199  (109 added, 2 deleted, 88 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d54007\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@295 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/20/10, 8:22 AM",
      "commitName": "8e0ba4ed8fa6d97f698d59d24a26a1ac96b888ff",
      "commitAuthor": "dcc@google.com",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "\nAdd Definition#isInExterns().\n\nChanged the Definition interface to indicate whether a definition comes from the exports or not.\n\nChanged NameReferenceGraph and SimpleDefinitionFinder to provide this information (which they are\nalready calculating for internal use) when creating Definitions.\n\nPureFunctionIdentifier also creates definitions in PureFunctionIdentifier#getCallableDefinitions(). I had\nto change this from a static method to an instance method to be able to access the instance variable\nmap that stores whether a function was defined in externs or not. Nothing seems to rely on that\nmethod being static, but it probably needs some scrutiny.\n\nR\u003dacleung,avd\nDELTA\u003d199  (109 added, 2 deleted, 88 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d54007\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@295 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "7/20/10, 8:22 AM",
          "commitName": "8e0ba4ed8fa6d97f698d59d24a26a1ac96b888ff",
          "commitAuthor": "dcc@google.com",
          "commitDateOld": "6/16/10, 12:33 PM",
          "commitNameOld": "e33e925eea3a8e4de958864e531e1adc4da62e18",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 33.83,
          "commitsBetweenForRepo": 51,
          "commitsBetweenForFile": 1,
          "actualSource": "static Definition getDefinition(Node n, boolean isExtern) {\n    Node parent \u003d n.getParent();\n    if (parent \u003d\u003d null) {\n        return null;\n    }\n    if (NodeUtil.isVarDeclaration(n) \u0026\u0026 n.hasChildren()) {\n        return new VarDefinition(n, isExtern);\n    } else if (NodeUtil.isFunction(parent) \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n        if (!NodeUtil.isFunctionExpression(parent)) {\n            return new NamedFunctionDefinition(parent, isExtern);\n        } else if (!n.getString().equals(\"\")) {\n            return new FunctionExpressionDefinition(parent, isExtern);\n        }\n    } else if (NodeUtil.isAssign(parent) \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n        return new AssignmentDefinition(parent, isExtern);\n    } else if (NodeUtil.isObjectLitKey(n, parent)) {\n        return new ObjectLiteralPropertyDefinition(parent, n, n.getNext(), isExtern);\n    } else if (parent.getType() \u003d\u003d Token.LP) {\n        Node function \u003d parent.getParent();\n        return new FunctionArgumentDefinition(function, n, isExtern);\n    }\n    return null;\n}",
          "path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
          "functionStartLine": 37,
          "functionName": "getDefinition",
          "functionAnnotation": "",
          "functionDoc": "\n@return an {@link Definition} object if the node contains a definition or\n    {@code null} otherwise.\n",
          "diff": "@@ -1,22 +1,23 @@\n-static Definition getDefinition(Node n, Node parent) {\n+static Definition getDefinition(Node n, boolean isExtern) {\n+    Node parent \u003d n.getParent();\n     if (parent \u003d\u003d null) {\n         return null;\n     }\n     if (NodeUtil.isVarDeclaration(n) \u0026\u0026 n.hasChildren()) {\n-        return new VarDefinition(n);\n+        return new VarDefinition(n, isExtern);\n     } else if (NodeUtil.isFunction(parent) \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n         if (!NodeUtil.isFunctionExpression(parent)) {\n-            return new NamedFunctionDefinition(parent);\n+            return new NamedFunctionDefinition(parent, isExtern);\n         } else if (!n.getString().equals(\"\")) {\n-            return new FunctionExpressionDefinition(parent);\n+            return new FunctionExpressionDefinition(parent, isExtern);\n         }\n     } else if (NodeUtil.isAssign(parent) \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n-        return new AssignmentDefinition(parent);\n+        return new AssignmentDefinition(parent, isExtern);\n     } else if (NodeUtil.isObjectLitKey(n, parent)) {\n-        return new ObjectLiteralPropertyDefinition(parent, n, n.getNext());\n+        return new ObjectLiteralPropertyDefinition(parent, n, n.getNext(), isExtern);\n     } else if (parent.getType() \u003d\u003d Token.LP) {\n         Node function \u003d parent.getParent();\n-        return new FunctionArgumentDefinition(function, n);\n+        return new FunctionArgumentDefinition(function, n, isExtern);\n     }\n     return null;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[n-Node, parent-Node]",
            "newValue": "[n-Node, isExtern-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nAdd Definition#isInExterns().\n\nChanged the Definition interface to indicate whether a definition comes from the exports or not.\n\nChanged NameReferenceGraph and SimpleDefinitionFinder to provide this information (which they are\nalready calculating for internal use) when creating Definitions.\n\nPureFunctionIdentifier also creates definitions in PureFunctionIdentifier#getCallableDefinitions(). I had\nto change this from a static method to an instance method to be able to access the instance variable\nmap that stores whether a function was defined in externs or not. Nothing seems to rely on that\nmethod being static, but it probably needs some scrutiny.\n\nR\u003dacleung,avd\nDELTA\u003d199  (109 added, 2 deleted, 88 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d54007\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@295 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "7/20/10, 8:22 AM",
          "commitName": "8e0ba4ed8fa6d97f698d59d24a26a1ac96b888ff",
          "commitAuthor": "dcc@google.com",
          "commitDateOld": "6/16/10, 12:33 PM",
          "commitNameOld": "e33e925eea3a8e4de958864e531e1adc4da62e18",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 33.83,
          "commitsBetweenForRepo": 51,
          "commitsBetweenForFile": 1,
          "actualSource": "static Definition getDefinition(Node n, boolean isExtern) {\n    Node parent \u003d n.getParent();\n    if (parent \u003d\u003d null) {\n        return null;\n    }\n    if (NodeUtil.isVarDeclaration(n) \u0026\u0026 n.hasChildren()) {\n        return new VarDefinition(n, isExtern);\n    } else if (NodeUtil.isFunction(parent) \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n        if (!NodeUtil.isFunctionExpression(parent)) {\n            return new NamedFunctionDefinition(parent, isExtern);\n        } else if (!n.getString().equals(\"\")) {\n            return new FunctionExpressionDefinition(parent, isExtern);\n        }\n    } else if (NodeUtil.isAssign(parent) \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n        return new AssignmentDefinition(parent, isExtern);\n    } else if (NodeUtil.isObjectLitKey(n, parent)) {\n        return new ObjectLiteralPropertyDefinition(parent, n, n.getNext(), isExtern);\n    } else if (parent.getType() \u003d\u003d Token.LP) {\n        Node function \u003d parent.getParent();\n        return new FunctionArgumentDefinition(function, n, isExtern);\n    }\n    return null;\n}",
          "path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
          "functionStartLine": 37,
          "functionName": "getDefinition",
          "functionAnnotation": "",
          "functionDoc": "\n@return an {@link Definition} object if the node contains a definition or\n    {@code null} otherwise.\n",
          "diff": "@@ -1,22 +1,23 @@\n-static Definition getDefinition(Node n, Node parent) {\n+static Definition getDefinition(Node n, boolean isExtern) {\n+    Node parent \u003d n.getParent();\n     if (parent \u003d\u003d null) {\n         return null;\n     }\n     if (NodeUtil.isVarDeclaration(n) \u0026\u0026 n.hasChildren()) {\n-        return new VarDefinition(n);\n+        return new VarDefinition(n, isExtern);\n     } else if (NodeUtil.isFunction(parent) \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n         if (!NodeUtil.isFunctionExpression(parent)) {\n-            return new NamedFunctionDefinition(parent);\n+            return new NamedFunctionDefinition(parent, isExtern);\n         } else if (!n.getString().equals(\"\")) {\n-            return new FunctionExpressionDefinition(parent);\n+            return new FunctionExpressionDefinition(parent, isExtern);\n         }\n     } else if (NodeUtil.isAssign(parent) \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n-        return new AssignmentDefinition(parent);\n+        return new AssignmentDefinition(parent, isExtern);\n     } else if (NodeUtil.isObjectLitKey(n, parent)) {\n-        return new ObjectLiteralPropertyDefinition(parent, n, n.getNext());\n+        return new ObjectLiteralPropertyDefinition(parent, n, n.getNext(), isExtern);\n     } else if (parent.getType() \u003d\u003d Token.LP) {\n         Node function \u003d parent.getParent();\n-        return new FunctionArgumentDefinition(function, n);\n+        return new FunctionArgumentDefinition(function, n, isExtern);\n     }\n     return null;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "e33e925eea3a8e4de958864e531e1adc4da62e18": {
      "type": "Yformatchange",
      "commitMessage": "\nChange on 2010/06/14 by johnlenz\n\n        Remove unneed parenthese from hook expressions.\n\n        R\u003dacleung\n        DELTA\u003d76  (20 added, 4 deleted, 52 changed)\n\nChange on 2010/06/14 by johnlenz\n\n        Fix non-determinisim.\n\n        R\u003djschorr\n        DELTA\u003d5  (3 added, 0 deleted, 2 changed)\n\nChange on 2010/06/15 by nicksantos\n\n        fix a regression caused by a change in the ordering in which\n        constant folding is done.\n        parts of PeepholeSubstituteAlternateSyntax will crash if they\n        see a NEG node with a NUMBER child.\n        They were assuming that FoldConstants would fold these into one node.\n\n        R\u003ddcc,acleung\n        DELTA\u003d153  (70 added, 6 deleted, 77 changed)\n\nChange on 2010/06/15 by johnlenz\n\n        More debug diffing improvements: convert unique globally unique names\n        to locally unique names for reproduciblity.\n\n        R\u003dacleung\n        DELTA\u003d222  (44 added, 7 deleted, 171 changed)\n\nChange on 2010/06/15 by nicksantos\n\n        Add the @nocompile annotation as a signal that this file should\n        be dropped silently if it gets pulled into a --manage_closure_dependencies\n        build.\n\n        R\u003dbowdidge,gboyer\n        DELTA\u003d82  (60 added, 1 deleted, 21 changed)\n\nChange on 2010/06/15 by dcc\n\n        Refactor FoldConstants dead code removal into PeepholeRemoveDeadCode.\n\n        R\u003dacleung\n        DELTA\u003d744  (403 added, 307 deleted, 34 changed)\n\nChange on 2010/06/15 by dcc\n\n        ExternExports test now emits type annotation for exported externs.\n                - Changed ExternExportsPass to generate the externs as an AST and then print\n        to a String rather than ad hoc with a StringBuilder.\n                - Changed TypedCodeGenerator to generate \u0027*\u0027 (AllType) for parameters with unknown types rather than \u0027?\u0027 (UnknownType) since \u0027?\u0027 is not valid JSDoc.\n\n        R\u003dacleung\n        DELTA\u003d643  (496 added, 66 deleted, 81 changed)\n\nChange on 2010/06/16 by johnlenz\n\n        Tweak to PureFunctionIndentifier to propagate the side-effects for\n        anonymous function expressions like: (Date.now||function(){return\n        +new Date})()\n\n        R\u003davd\n        DELTA\u003d42  (39 added, 0 deleted, 3 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d29010\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@243 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/16/10, 12:33 PM",
      "commitName": "e33e925eea3a8e4de958864e531e1adc4da62e18",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/23/10, 11:31 AM",
      "commitNameOld": "ebb59a97610015bc41bda7f458dd1428a3a3e335",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 54.04,
      "commitsBetweenForRepo": 35,
      "commitsBetweenForFile": 1,
      "actualSource": "static Definition getDefinition(Node n, Node parent) {\n    if (parent \u003d\u003d null) {\n        return null;\n    }\n    if (NodeUtil.isVarDeclaration(n) \u0026\u0026 n.hasChildren()) {\n        return new VarDefinition(n);\n    } else if (NodeUtil.isFunction(parent) \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n        if (!NodeUtil.isFunctionExpression(parent)) {\n            return new NamedFunctionDefinition(parent);\n        } else if (!n.getString().equals(\"\")) {\n            return new FunctionExpressionDefinition(parent);\n        }\n    } else if (NodeUtil.isAssign(parent) \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n        return new AssignmentDefinition(parent);\n    } else if (NodeUtil.isObjectLitKey(n, parent)) {\n        return new ObjectLiteralPropertyDefinition(parent, n, n.getNext());\n    } else if (parent.getType() \u003d\u003d Token.LP) {\n        Node function \u003d parent.getParent();\n        return new FunctionArgumentDefinition(function, n);\n    }\n    return null;\n}",
      "path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
      "functionStartLine": 37,
      "functionName": "getDefinition",
      "functionAnnotation": "",
      "functionDoc": "\n@return an {@link Definition} object if the node contains a definition or\n    {@code null} otherwise.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "ebb59a97610015bc41bda7f458dd1428a3a3e335": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/04/22 by nick\n\n        fix the extern definition of Window.prototype.stop\n\n        R\u003dsiggy\n        DELTA\u003d1  (0 added, 0 deleted, 1 changed)\n\nChange on 2010/04/22 by john\n\n        \"Anonymous function\" is a confusing term for functions with names.\n        Properly we are usually distinguishing between functions statements\n        (function declarations) and function expressions.\n\n        R\u003dalan\n        DELTA\u003d172  (7 added, 14 deleted, 151 changed)\n\nChange on 2010/04/22 by john\n\n        Standardize the definition of setTimeout/setInterval.\n        Fix for Issue 137\n\n        R\u003dnick\n        DELTA\u003d6  (2 added, 2 deleted, 2 changed)\n\nChange on 2010/04/22 by mark\n\n        Various delegate fixes.\n\n        Give the delegate proxy a name unique from the delegate base so that\n        InstanceObjectType#equals distinguishes them. This is necessary for\n        AmbiguateProperties to work.\n\n        Fix the prototype of the delegate proxy. This makes\n        DisambiguateProperties continue to work.\n\n        Add superclass methods of the delegate base to the delegate proxy.\n\n\n        R\u003dandrew,nada\n        DELTA\u003d526  (383 added, 104 deleted, 39 changed)\n\nChange on 2010/04/23 by john\n\n        Allow variable inlining of function statements. For simplicity  limited to functions defined before first use.\n\n        R\u003dnick\n        DELTA\u003d79  (49 added, 3 deleted, 27 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dhakjvx\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@197 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/23/10, 11:31 AM",
      "commitName": "ebb59a97610015bc41bda7f458dd1428a3a3e335",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "11/3/09, 3:51 PM",
      "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 170.78,
      "commitsBetweenForRepo": 167,
      "commitsBetweenForFile": 1,
      "actualSource": "static Definition getDefinition(Node n, Node parent) {\n    if (parent \u003d\u003d null) {\n        return null;\n    }\n    if (NodeUtil.isVarDeclaration(n) \u0026\u0026 n.hasChildren()) {\n        return new VarDefinition(n);\n    } else if (NodeUtil.isFunction(parent) \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n        if (!NodeUtil.isFunctionExpression(parent)) {\n            return new NamedFunctionDefinition(parent);\n        } else if (!n.getString().equals(\"\")) {\n            return new FunctionExpressionDefinition(parent);\n        }\n    } else if (NodeUtil.isAssign(parent) \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n        return new AssignmentDefinition(parent);\n    } else if (NodeUtil.isObjectLitKey(n, parent)) {\n        return new ObjectLiteralPropertyDefinition(parent, n, n.getNext());\n    } else if (parent.getType() \u003d\u003d Token.LP) {\n        Node function \u003d parent.getParent();\n        return new FunctionArgumentDefinition(function, n);\n    }\n    return null;\n}",
      "path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
      "functionStartLine": 37,
      "functionName": "getDefinition",
      "functionAnnotation": "",
      "functionDoc": "\n@return an {@link Definition} object if the node contains a definition or\n    {@code null} otherwise.\n",
      "diff": "@@ -1,22 +1,22 @@\n static Definition getDefinition(Node n, Node parent) {\n     if (parent \u003d\u003d null) {\n         return null;\n     }\n     if (NodeUtil.isVarDeclaration(n) \u0026\u0026 n.hasChildren()) {\n         return new VarDefinition(n);\n     } else if (NodeUtil.isFunction(parent) \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n-        if (!NodeUtil.isAnonymousFunction(parent)) {\n+        if (!NodeUtil.isFunctionExpression(parent)) {\n             return new NamedFunctionDefinition(parent);\n         } else if (!n.getString().equals(\"\")) {\n-            return new AnonymousFunctionDefinition(parent);\n+            return new FunctionExpressionDefinition(parent);\n         }\n     } else if (NodeUtil.isAssign(parent) \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n         return new AssignmentDefinition(parent);\n     } else if (NodeUtil.isObjectLitKey(n, parent)) {\n         return new ObjectLiteralPropertyDefinition(parent, n, n.getNext());\n     } else if (parent.getType() \u003d\u003d Token.LP) {\n         Node function \u003d parent.getParent();\n         return new FunctionArgumentDefinition(function, n);\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,22 @@\n+static Definition getDefinition(Node n, Node parent) {\n+    if (parent \u003d\u003d null) {\n+        return null;\n+    }\n+    if (NodeUtil.isVarDeclaration(n) \u0026\u0026 n.hasChildren()) {\n+        return new VarDefinition(n);\n+    } else if (NodeUtil.isFunction(parent) \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n+        if (!NodeUtil.isAnonymousFunction(parent)) {\n+            return new NamedFunctionDefinition(parent);\n+        } else if (!n.getString().equals(\"\")) {\n+            return new AnonymousFunctionDefinition(parent);\n+        }\n+    } else if (NodeUtil.isAssign(parent) \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n+        return new AssignmentDefinition(parent);\n+    } else if (NodeUtil.isObjectLitKey(n, parent)) {\n+        return new ObjectLiteralPropertyDefinition(parent, n, n.getNext());\n+    } else if (parent.getType() \u003d\u003d Token.LP) {\n+        Node function \u003d parent.getParent();\n+        return new FunctionArgumentDefinition(function, n);\n+    }\n+    return null;\n+}\n\\ No newline at end of file\n",
      "actualSource": "static Definition getDefinition(Node n, Node parent) {\n    if (parent \u003d\u003d null) {\n        return null;\n    }\n    if (NodeUtil.isVarDeclaration(n) \u0026\u0026 n.hasChildren()) {\n        return new VarDefinition(n);\n    } else if (NodeUtil.isFunction(parent) \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n        if (!NodeUtil.isAnonymousFunction(parent)) {\n            return new NamedFunctionDefinition(parent);\n        } else if (!n.getString().equals(\"\")) {\n            return new AnonymousFunctionDefinition(parent);\n        }\n    } else if (NodeUtil.isAssign(parent) \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n        return new AssignmentDefinition(parent);\n    } else if (NodeUtil.isObjectLitKey(n, parent)) {\n        return new ObjectLiteralPropertyDefinition(parent, n, n.getNext());\n    } else if (parent.getType() \u003d\u003d Token.LP) {\n        Node function \u003d parent.getParent();\n        return new FunctionArgumentDefinition(function, n);\n    }\n    return null;\n}",
      "path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
      "functionStartLine": 37,
      "functionName": "getDefinition",
      "functionAnnotation": "",
      "functionDoc": "\n@return an {@link Definition} object if the node contains a definition or\n    {@code null} otherwise.\n"
    }
  }
}