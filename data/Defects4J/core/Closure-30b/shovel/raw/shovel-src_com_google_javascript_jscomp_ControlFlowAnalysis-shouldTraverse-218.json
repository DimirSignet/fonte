{
  "origin": "codeshovel",
  "repositoryName": "Closure-30b",
  "repositoryPath": "/tmp/Closure-30b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ControlFlowAnalysis.java",
  "functionName": "shouldTraverse",
  "functionId": "shouldTraverse___nodeTraversal-NodeTraversal__n-Node__parent-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 218,
  "functionEndLine": 292,
  "numCommitsSeen": 21,
  "timeTaken": 1425,
  "changeHistory": [
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,47 @@\n+@Override\n+public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) {\n+    astPosition.put(n, astPositionCounter++);\n+    switch(n.getType()) {\n+        case Token.FUNCTION:\n+            if (shouldTraverseFunctions || n \u003d\u003d cfg.getEntry().getValue()) {\n+                exceptionHandler.push(n);\n+                return true;\n+            }\n+            return false;\n+        case Token.TRY:\n+            exceptionHandler.push(n);\n+            return true;\n+    }\n+    if (parent !\u003d null) {\n+        switch(parent.getType()) {\n+            case Token.FOR:\n+                return n \u003d\u003d parent.getLastChild();\n+            case Token.IF:\n+            case Token.WHILE:\n+            case Token.WITH:\n+                return n !\u003d parent.getFirstChild();\n+            case Token.DO:\n+                return n !\u003d parent.getFirstChild().getNext();\n+            case Token.SWITCH:\n+            case Token.CASE:\n+            case Token.CATCH:\n+            case Token.LABEL:\n+                return n !\u003d parent.getFirstChild();\n+            case Token.FUNCTION:\n+                return n \u003d\u003d parent.getFirstChild().getNext().getNext();\n+            case Token.CONTINUE:\n+            case Token.BREAK:\n+            case Token.EXPR_RESULT:\n+            case Token.VAR:\n+            case Token.RETURN:\n+            case Token.THROW:\n+                return false;\n+            case Token.TRY:\n+                if (n \u003d\u003d parent.getFirstChild().getNext()) {\n+                    Preconditions.checkState(exceptionHandler.peek() \u003d\u003d parent);\n+                    exceptionHandler.pop();\n+                }\n+        }\n+    }\n+    return true;\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) {\n    astPosition.put(n, astPositionCounter++);\n    switch(n.getType()) {\n        case Token.FUNCTION:\n            if (shouldTraverseFunctions || n \u003d\u003d cfg.getEntry().getValue()) {\n                exceptionHandler.push(n);\n                return true;\n            }\n            return false;\n        case Token.TRY:\n            exceptionHandler.push(n);\n            return true;\n    }\n    if (parent !\u003d null) {\n        switch(parent.getType()) {\n            case Token.FOR:\n                return n \u003d\u003d parent.getLastChild();\n            case Token.IF:\n            case Token.WHILE:\n            case Token.WITH:\n                return n !\u003d parent.getFirstChild();\n            case Token.DO:\n                return n !\u003d parent.getFirstChild().getNext();\n            case Token.SWITCH:\n            case Token.CASE:\n            case Token.CATCH:\n            case Token.LABEL:\n                return n !\u003d parent.getFirstChild();\n            case Token.FUNCTION:\n                return n \u003d\u003d parent.getFirstChild().getNext().getNext();\n            case Token.CONTINUE:\n            case Token.BREAK:\n            case Token.EXPR_RESULT:\n            case Token.VAR:\n            case Token.RETURN:\n            case Token.THROW:\n                return false;\n            case Token.TRY:\n                if (n \u003d\u003d parent.getFirstChild().getNext()) {\n                    Preconditions.checkState(exceptionHandler.peek() \u003d\u003d parent);\n                    exceptionHandler.pop();\n                }\n        }\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
      "functionStartLine": 215,
      "functionName": "shouldTraverse",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}