{
  "origin": "codeshovel",
  "repositoryName": "Closure-30b",
  "repositoryPath": "/tmp/Closure-30b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DataFlowAnalysis.java",
  "functionName": "computeEscaped",
  "functionId": "computeEscaped___jsScope-Scope(modifiers-final)__escaped-Set__Var__(modifiers-final)__compiler-AbstractCompiler",
  "sourceFilePath": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
  "functionAnnotation": "",
  "functionDoc": "Compute set of escaped variables. When a variable is escaped in a\ndataflow analysis, it can be reference outside of the code that we are\nanalyzing. A variable is escaped if any of the following is true:\n\n\u003cp\u003e\u003col\u003e\n\u003cli\u003eIt is defined as the exception name in CATCH clause so it became a\nvariable local not to our definition of scope.\u003c/li\u003e\n\u003cli\u003eExported variables as they can be needed after the script terminates.\n\u003c/li\u003e\n\u003cli\u003eNames of named functions because in javascript, \u003ci\u003efunction foo(){}\u003c/i\u003e\ndoes not kill \u003ci\u003efoo\u003c/i\u003e in the dataflow.\u003c/li\u003e\n",
  "functionStartLine": 548,
  "functionEndLine": 578,
  "numCommitsSeen": 18,
  "timeTaken": 997,
  "changeHistory": [
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
    "3d80e1ed8fffbcb5f41b63f64726d9a4c76f209f",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c": "Ybodychange",
    "3d80e1ed8fffbcb5f41b63f64726d9a4c76f209f": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c": {
      "type": "Ybodychange",
      "commitMessage": "\nReplace the bulk of the Node.getType() \u003d\u003d Token.XXX calls with\nNode.isXXX calls.\n\nR\u003dnicksantos\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3677\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1582 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/10/11, 8:36 AM",
      "commitName": "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/9/11, 1:51 PM",
      "commitNameOld": "3d80e1ed8fffbcb5f41b63f64726d9a4c76f209f",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 0.78,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "static void computeEscaped(final Scope jsScope, final Set\u003cVar\u003e escaped, AbstractCompiler compiler) {\n    AbstractPostOrderCallback finder \u003d new AbstractPostOrderCallback() {\n\n        @Override\n        public void visit(NodeTraversal t, Node n, Node parent) {\n            if (jsScope \u003d\u003d t.getScope() || !n.isName() || parent.isFunction()) {\n                return;\n            }\n            String name \u003d n.getString();\n            Var var \u003d t.getScope().getVar(name);\n            if (var !\u003d null \u0026\u0026 var.scope \u003d\u003d jsScope) {\n                escaped.add(jsScope.getVar(name));\n            }\n        }\n    };\n    NodeTraversal t \u003d new NodeTraversal(compiler, finder);\n    t.traverseAtScope(jsScope);\n    for (Iterator\u003cVar\u003e i \u003d jsScope.getVars(); i.hasNext(); ) {\n        Var var \u003d i.next();\n        if (var.getParentNode().isCatch() || compiler.getCodingConvention().isExported(var.getName())) {\n            escaped.add(var);\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
      "functionStartLine": 546,
      "functionName": "computeEscaped",
      "functionAnnotation": "",
      "functionDoc": "Compute set of escaped variables. When a variable is escaped in a\ndataflow analysis, it can be reference outside of the code that we are\nanalyzing. A variable is escaped if any of the following is true:\n\n\u003cp\u003e\u003col\u003e\n\u003cli\u003eIt is defined as the exception name in CATCH clause so it became a\nvariable local not to our definition of scope.\u003c/li\u003e\n\u003cli\u003eExported variables as they can be needed after the script terminates.\n\u003c/li\u003e\n\u003cli\u003eNames of named functions because in javascript, \u003ci\u003efunction foo(){}\u003c/i\u003e\ndoes not kill \u003ci\u003efoo\u003c/i\u003e in the dataflow.\u003c/li\u003e\n",
      "diff": "@@ -1,24 +1,24 @@\n static void computeEscaped(final Scope jsScope, final Set\u003cVar\u003e escaped, AbstractCompiler compiler) {\n     AbstractPostOrderCallback finder \u003d new AbstractPostOrderCallback() {\n \n         @Override\n         public void visit(NodeTraversal t, Node n, Node parent) {\n             if (jsScope \u003d\u003d t.getScope() || !n.isName() || parent.isFunction()) {\n                 return;\n             }\n             String name \u003d n.getString();\n             Var var \u003d t.getScope().getVar(name);\n             if (var !\u003d null \u0026\u0026 var.scope \u003d\u003d jsScope) {\n                 escaped.add(jsScope.getVar(name));\n             }\n         }\n     };\n     NodeTraversal t \u003d new NodeTraversal(compiler, finder);\n     t.traverseAtScope(jsScope);\n     for (Iterator\u003cVar\u003e i \u003d jsScope.getVars(); i.hasNext(); ) {\n         Var var \u003d i.next();\n-        if (var.getParentNode().getType() \u003d\u003d Token.CATCH || compiler.getCodingConvention().isExported(var.getName())) {\n+        if (var.getParentNode().isCatch() || compiler.getCodingConvention().isExported(var.getName())) {\n             escaped.add(var);\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3d80e1ed8fffbcb5f41b63f64726d9a4c76f209f": {
      "type": "Ybodychange",
      "commitMessage": "\nInline NodeUtil.isXXX functions and call the Node.isXXX functions\ndirectly.\n\nR\u003dnicksantos\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3673\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1578 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/9/11, 1:51 PM",
      "commitName": "3d80e1ed8fffbcb5f41b63f64726d9a4c76f209f",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "5/10/11, 8:34 AM",
      "commitNameOld": "091577d5000b2260452cdc79eacf54925de894a3",
      "commitAuthorOld": "bashir@google.com",
      "daysBetweenCommits": 183.26,
      "commitsBetweenForRepo": 465,
      "commitsBetweenForFile": 1,
      "actualSource": "static void computeEscaped(final Scope jsScope, final Set\u003cVar\u003e escaped, AbstractCompiler compiler) {\n    AbstractPostOrderCallback finder \u003d new AbstractPostOrderCallback() {\n\n        @Override\n        public void visit(NodeTraversal t, Node n, Node parent) {\n            if (jsScope \u003d\u003d t.getScope() || !n.isName() || parent.isFunction()) {\n                return;\n            }\n            String name \u003d n.getString();\n            Var var \u003d t.getScope().getVar(name);\n            if (var !\u003d null \u0026\u0026 var.scope \u003d\u003d jsScope) {\n                escaped.add(jsScope.getVar(name));\n            }\n        }\n    };\n    NodeTraversal t \u003d new NodeTraversal(compiler, finder);\n    t.traverseAtScope(jsScope);\n    for (Iterator\u003cVar\u003e i \u003d jsScope.getVars(); i.hasNext(); ) {\n        Var var \u003d i.next();\n        if (var.getParentNode().getType() \u003d\u003d Token.CATCH || compiler.getCodingConvention().isExported(var.getName())) {\n            escaped.add(var);\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
      "functionStartLine": 548,
      "functionName": "computeEscaped",
      "functionAnnotation": "",
      "functionDoc": "Compute set of escaped variables. When a variable is escaped in a\ndataflow analysis, it can be reference outside of the code that we are\nanalyzing. A variable is escaped if any of the following is true:\n\n\u003cp\u003e\u003col\u003e\n\u003cli\u003eIt is defined as the exception name in CATCH clause so it became a\nvariable local not to our definition of scope.\u003c/li\u003e\n\u003cli\u003eExported variables as they can be needed after the script terminates.\n\u003c/li\u003e\n\u003cli\u003eNames of named functions because in javascript, \u003ci\u003efunction foo(){}\u003c/i\u003e\ndoes not kill \u003ci\u003efoo\u003c/i\u003e in the dataflow.\u003c/li\u003e\n",
      "diff": "@@ -1,24 +1,24 @@\n static void computeEscaped(final Scope jsScope, final Set\u003cVar\u003e escaped, AbstractCompiler compiler) {\n     AbstractPostOrderCallback finder \u003d new AbstractPostOrderCallback() {\n \n         @Override\n         public void visit(NodeTraversal t, Node n, Node parent) {\n-            if (jsScope \u003d\u003d t.getScope() || !NodeUtil.isName(n) || NodeUtil.isFunction(parent)) {\n+            if (jsScope \u003d\u003d t.getScope() || !n.isName() || parent.isFunction()) {\n                 return;\n             }\n             String name \u003d n.getString();\n             Var var \u003d t.getScope().getVar(name);\n             if (var !\u003d null \u0026\u0026 var.scope \u003d\u003d jsScope) {\n                 escaped.add(jsScope.getVar(name));\n             }\n         }\n     };\n     NodeTraversal t \u003d new NodeTraversal(compiler, finder);\n     t.traverseAtScope(jsScope);\n     for (Iterator\u003cVar\u003e i \u003d jsScope.getVars(); i.hasNext(); ) {\n         Var var \u003d i.next();\n         if (var.getParentNode().getType() \u003d\u003d Token.CATCH || compiler.getCodingConvention().isExported(var.getName())) {\n             escaped.add(var);\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,24 @@\n+static void computeEscaped(final Scope jsScope, final Set\u003cVar\u003e escaped, AbstractCompiler compiler) {\n+    AbstractPostOrderCallback finder \u003d new AbstractPostOrderCallback() {\n+\n+        @Override\n+        public void visit(NodeTraversal t, Node n, Node parent) {\n+            if (jsScope \u003d\u003d t.getScope() || !NodeUtil.isName(n) || NodeUtil.isFunction(parent)) {\n+                return;\n+            }\n+            String name \u003d n.getString();\n+            Var var \u003d t.getScope().getVar(name);\n+            if (var !\u003d null \u0026\u0026 var.scope \u003d\u003d jsScope) {\n+                escaped.add(jsScope.getVar(name));\n+            }\n+        }\n+    };\n+    NodeTraversal t \u003d new NodeTraversal(compiler, finder);\n+    t.traverseAtScope(jsScope);\n+    for (Iterator\u003cVar\u003e i \u003d jsScope.getVars(); i.hasNext(); ) {\n+        Var var \u003d i.next();\n+        if (var.getParentNode().getType() \u003d\u003d Token.CATCH || compiler.getCodingConvention().isExported(var.getName())) {\n+            escaped.add(var);\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "static void computeEscaped(final Scope jsScope, final Set\u003cVar\u003e escaped, AbstractCompiler compiler) {\n    AbstractPostOrderCallback finder \u003d new AbstractPostOrderCallback() {\n\n        @Override\n        public void visit(NodeTraversal t, Node n, Node parent) {\n            if (jsScope \u003d\u003d t.getScope() || !NodeUtil.isName(n) || NodeUtil.isFunction(parent)) {\n                return;\n            }\n            String name \u003d n.getString();\n            Var var \u003d t.getScope().getVar(name);\n            if (var !\u003d null \u0026\u0026 var.scope \u003d\u003d jsScope) {\n                escaped.add(jsScope.getVar(name));\n            }\n        }\n    };\n    NodeTraversal t \u003d new NodeTraversal(compiler, finder);\n    t.traverseAtScope(jsScope);\n    for (Iterator\u003cVar\u003e i \u003d jsScope.getVars(); i.hasNext(); ) {\n        Var var \u003d i.next();\n        if (var.getParentNode().getType() \u003d\u003d Token.CATCH || compiler.getCodingConvention().isExported(var.getName())) {\n            escaped.add(var);\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
      "functionStartLine": 607,
      "functionName": "computeEscaped",
      "functionAnnotation": "",
      "functionDoc": "Compute set of escaped variables. When a variable is escaped in a\ndataflow analysis, it can be reference outside of the code that we are\nanalyzing. A variable is escaped if any of the following is true:\n\n\u003cp\u003e\u003col\u003e\n\u003cli\u003eIt is defined as the exception name in CATCH clause so it became a\nvariable local not to our definition of scope.\u003c/li\u003e\n\u003cli\u003eExported variables as they can be needed after the script terminates.\n\u003c/li\u003e\n\u003cli\u003eNames of named functions because in javascript, \u003ci\u003efunction foo(){}\u003c/i\u003e\ndoes not kill \u003ci\u003efoo\u003c/i\u003e in the dataflow.\u003c/li\u003e\n"
    }
  }
}