{
  "origin": "codeshovel",
  "repositoryName": "Closure-91b",
  "repositoryPath": "/tmp/Closure-91b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "IRFactory.java",
  "functionName": "processFunctionNode",
  "functionId": "$processFunctionNode___functionNode-FunctionNode",
  "sourceFilePath": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 503,
  "functionEndLine": 552,
  "numCommitsSeen": 22,
  "timeTaken": 2043,
  "changeHistory": [
    "c1c31ef4cad0af0c8f3524ff85a48053d00f97fb",
    "35d56dd1fadec0ed50797d222de4e05f78bbf1c9",
    "d7a094a288f86ca58bf05c9867320096e468c45e",
    "43859717972907dd1ecebd8dca6e05036386e28b",
    "847b296c23a63aa0a0b38cc3e63883e1688288e3",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "c1c31ef4cad0af0c8f3524ff85a48053d00f97fb": "Ybodychange",
    "35d56dd1fadec0ed50797d222de4e05f78bbf1c9": "Ybodychange",
    "d7a094a288f86ca58bf05c9867320096e468c45e": "Ybodychange",
    "43859717972907dd1ecebd8dca6e05036386e28b": "Ybodychange",
    "847b296c23a63aa0a0b38cc3e63883e1688288e3": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c1c31ef4cad0af0c8f3524ff85a48053d00f97fb": {
      "type": "Ybodychange",
      "commitMessage": "\nAs agreed, remove the redundant SOURCEFILE_PROP with the original\nSOURCENAME_PROP.\n\nR\u003dbowdidge\nDELTA\u003d30  (0 added, 7 deleted, 23 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d162003\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@366 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/17/10, 5:25 PM",
      "commitName": "c1c31ef4cad0af0c8f3524ff85a48053d00f97fb",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "8/12/10, 6:02 PM",
      "commitNameOld": "15acafb00636f99295b394145b9b60a5e624ddfa",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 4.97,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nNode processFunctionNode(FunctionNode functionNode) {\n    Name name \u003d functionNode.getFunctionName();\n    Boolean isUnnamedFunction \u003d false;\n    if (name \u003d\u003d null) {\n        name \u003d new Name();\n        name.setIdentifier(\"\");\n        isUnnamedFunction \u003d true;\n    }\n    Node node \u003d newNode(Token.FUNCTION);\n    Node newName \u003d transform(name);\n    if (isUnnamedFunction) {\n        newName.setLineno(functionNode.getLineno());\n        int lpColumn \u003d functionNode.getAbsolutePosition() + functionNode.getLp();\n        newName.setCharno(position2charno(lpColumn));\n    }\n    node.addChildToBack(newName);\n    Node lp \u003d newNode(Token.LP);\n    Name fnName \u003d functionNode.getFunctionName();\n    if (fnName !\u003d null) {\n        lp.setLineno(fnName.getLineno());\n    } else {\n        lp.setLineno(functionNode.getLineno());\n    }\n    int lparenCharno \u003d functionNode.getLp() + functionNode.getAbsolutePosition();\n    lp.setCharno(position2charno(lparenCharno));\n    for (AstNode param : functionNode.getParams()) {\n        lp.addChildToBack(transform(param));\n    }\n    node.addChildToBack(lp);\n    Node bodyNode \u003d transform(functionNode.getBody());\n    parseDirectives(bodyNode);\n    node.addChildToBack(bodyNode);\n    return node;\n}",
      "path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
      "functionStartLine": 531,
      "functionName": "processFunctionNode",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,36 +1,35 @@\n @Override\n Node processFunctionNode(FunctionNode functionNode) {\n     Name name \u003d functionNode.getFunctionName();\n     Boolean isUnnamedFunction \u003d false;\n     if (name \u003d\u003d null) {\n         name \u003d new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction \u003d true;\n     }\n     Node node \u003d newNode(Token.FUNCTION);\n-    node.putProp(Node.SOURCENAME_PROP, functionNode.getSourceName());\n     Node newName \u003d transform(name);\n     if (isUnnamedFunction) {\n         newName.setLineno(functionNode.getLineno());\n         int lpColumn \u003d functionNode.getAbsolutePosition() + functionNode.getLp();\n         newName.setCharno(position2charno(lpColumn));\n     }\n     node.addChildToBack(newName);\n     Node lp \u003d newNode(Token.LP);\n     Name fnName \u003d functionNode.getFunctionName();\n     if (fnName !\u003d null) {\n         lp.setLineno(fnName.getLineno());\n     } else {\n         lp.setLineno(functionNode.getLineno());\n     }\n     int lparenCharno \u003d functionNode.getLp() + functionNode.getAbsolutePosition();\n     lp.setCharno(position2charno(lparenCharno));\n     for (AstNode param : functionNode.getParams()) {\n         lp.addChildToBack(transform(param));\n     }\n     node.addChildToBack(lp);\n     Node bodyNode \u003d transform(functionNode.getBody());\n     parseDirectives(bodyNode);\n     node.addChildToBack(bodyNode);\n     return node;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "35d56dd1fadec0ed50797d222de4e05f78bbf1c9": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/07/02 17:44:46 by nicksantos\n\n        fix RAI when comparing two types that are always equal.\n        Fixes issue 172\n\n        R\u003dacleung\n        DELTA\u003d20  (19 added, 0 deleted, 1 changed)\n\nChange on 2010/07/03 08:52:08 by johnlenz\n\n        Prefer the use of the unsyncronized StringBuilder over StringBuffer. This is just a code style change, this are no uses that should have any performance impact.\n\n        R\u003dacleung\n        DELTA\u003d30  (0 added, 2 deleted, 28 changed)\n\nChange on 2010/07/07 11:56:02 by johnlenz\n\n        Reduce the memory cost of generating source maps by reducing the number\n        of property structure objects that are created.  We do this by taking\n        advantage of the fact the property list objects are immutable and can be\n        shared between Nodes.  The source file prop is then shared between\n        every Node in the AST for a given source file, reducing the the number\n        of property nodes used to store this information from O(ast-nodes) to\n        O(source-files).\n\n        R\u003dbowdidge\n        DELTA\u003d122  (68 added, 1 deleted, 53 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d49002\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@265 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/7/10, 3:14 PM",
      "commitName": "35d56dd1fadec0ed50797d222de4e05f78bbf1c9",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "6/29/10, 2:10 PM",
      "commitNameOld": "541402929a600a95bf099513908b4efd8b0e1c5b",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 8.04,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nNode processFunctionNode(FunctionNode functionNode) {\n    Name name \u003d functionNode.getFunctionName();\n    Boolean isUnnamedFunction \u003d false;\n    if (name \u003d\u003d null) {\n        name \u003d new Name();\n        name.setIdentifier(\"\");\n        isUnnamedFunction \u003d true;\n    }\n    Node node \u003d newNode(Token.FUNCTION);\n    node.putProp(Node.SOURCENAME_PROP, functionNode.getSourceName());\n    Node newName \u003d transform(name);\n    if (isUnnamedFunction) {\n        newName.setLineno(functionNode.getLineno());\n        int lpColumn \u003d functionNode.getAbsolutePosition() + functionNode.getLp();\n        newName.setCharno(position2charno(lpColumn));\n    }\n    node.addChildToBack(newName);\n    Node lp \u003d newNode(Token.LP);\n    Name fnName \u003d functionNode.getFunctionName();\n    if (fnName !\u003d null) {\n        lp.setLineno(fnName.getLineno());\n    } else {\n        lp.setLineno(functionNode.getLineno());\n    }\n    int lparenCharno \u003d functionNode.getLp() + functionNode.getAbsolutePosition();\n    lp.setCharno(position2charno(lparenCharno));\n    for (AstNode param : functionNode.getParams()) {\n        lp.addChildToBack(transform(param));\n    }\n    node.addChildToBack(lp);\n    Node bodyNode \u003d transform(functionNode.getBody());\n    parseDirectives(bodyNode);\n    node.addChildToBack(bodyNode);\n    return node;\n}",
      "path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
      "functionStartLine": 531,
      "functionName": "processFunctionNode",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,36 +1,36 @@\n @Override\n Node processFunctionNode(FunctionNode functionNode) {\n     Name name \u003d functionNode.getFunctionName();\n     Boolean isUnnamedFunction \u003d false;\n     if (name \u003d\u003d null) {\n         name \u003d new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction \u003d true;\n     }\n-    Node node \u003d new Node(Token.FUNCTION);\n+    Node node \u003d newNode(Token.FUNCTION);\n     node.putProp(Node.SOURCENAME_PROP, functionNode.getSourceName());\n     Node newName \u003d transform(name);\n     if (isUnnamedFunction) {\n         newName.setLineno(functionNode.getLineno());\n         int lpColumn \u003d functionNode.getAbsolutePosition() + functionNode.getLp();\n         newName.setCharno(position2charno(lpColumn));\n     }\n     node.addChildToBack(newName);\n-    Node lp \u003d new Node(Token.LP);\n+    Node lp \u003d newNode(Token.LP);\n     Name fnName \u003d functionNode.getFunctionName();\n     if (fnName !\u003d null) {\n         lp.setLineno(fnName.getLineno());\n     } else {\n         lp.setLineno(functionNode.getLineno());\n     }\n     int lparenCharno \u003d functionNode.getLp() + functionNode.getAbsolutePosition();\n     lp.setCharno(position2charno(lparenCharno));\n     for (AstNode param : functionNode.getParams()) {\n         lp.addChildToBack(transform(param));\n     }\n     node.addChildToBack(lp);\n     Node bodyNode \u003d transform(functionNode.getBody());\n     parseDirectives(bodyNode);\n     node.addChildToBack(bodyNode);\n     return node;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d7a094a288f86ca58bf05c9867320096e468c45e": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/05/26 by nicksantos\n\n\topen up JsMessageExtractor\n\n\tR\u003djohnlenz\n\tDELTA\u003d33  (29 added, 2 deleted, 2 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d14001\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@232 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/26/10, 11:16 AM",
      "commitName": "d7a094a288f86ca58bf05c9867320096e468c45e",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/27/10, 12:02 PM",
      "commitNameOld": "eb5eae4438f49ffddd3c8be1413eeb9e7ecfb311",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 28.97,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nNode processFunctionNode(FunctionNode functionNode) {\n    Name name \u003d functionNode.getFunctionName();\n    Boolean isUnnamedFunction \u003d false;\n    if (name \u003d\u003d null) {\n        name \u003d new Name();\n        name.setIdentifier(\"\");\n        isUnnamedFunction \u003d true;\n    }\n    Node node \u003d new Node(Token.FUNCTION);\n    node.putProp(Node.SOURCENAME_PROP, functionNode.getSourceName());\n    Node newName \u003d transform(name);\n    if (isUnnamedFunction) {\n        newName.setLineno(functionNode.getLineno());\n        int lpColumn \u003d functionNode.getAbsolutePosition() + functionNode.getLp();\n        newName.setCharno(position2charno(lpColumn));\n    }\n    node.addChildToBack(newName);\n    Node lp \u003d new Node(Token.LP);\n    Name fnName \u003d functionNode.getFunctionName();\n    if (fnName !\u003d null) {\n        lp.setLineno(fnName.getLineno());\n    } else {\n        lp.setLineno(functionNode.getLineno());\n    }\n    int lparenCharno \u003d functionNode.getLp() + functionNode.getAbsolutePosition();\n    lp.setCharno(position2charno(lparenCharno));\n    for (AstNode param : functionNode.getParams()) {\n        lp.addChildToBack(transform(param));\n    }\n    node.addChildToBack(lp);\n    Node bodyNode \u003d transform(functionNode.getBody());\n    parseDirectives(bodyNode);\n    node.addChildToBack(bodyNode);\n    return node;\n}",
      "path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
      "functionStartLine": 512,
      "functionName": "processFunctionNode",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "43859717972907dd1ecebd8dca6e05036386e28b": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/04/14 by john\n\n        Stop creating specialized Node types for FUNCTION and SCRIPT as the added functionality isn\u0027t used anywhere.\n\n        Also correct some formatting issue with Node (as it won\u0027t need to be merged with anything else anymore).\n\n        R\u003dsteve,robert\n        DELTA\u003d3969  (1913 added, 1925 deleted, 131 changed)\n\nChange on 2010/04/14 by john\n\n        Fix source information in MinimizeExitPoints.\n\n        R\u003drobert\n        DELTA\u003d10  (5 added, 2 deleted, 3 changed)\n\nChange on 2010/04/14 by john\n\n        Maintain source information.\n\n        R\u003dantonio\n        DELTA\u003d17  (11 added, 0 deleted, 6 changed)\n\nChange on 2010/04/14 by john\n\n        Maintain source information through FoldConstants.\n\n        R\u003drobert\n        DELTA\u003d42  (22 added, 0 deleted, 20 changed)\n\nChange on 2010/04/14 by nick\n\n        lock down function type construction\n\n        R\u003djohn\n        DELTA\u003d111  (83 added, 9 deleted, 19 changed)\n\nChange on 2010/04/14 by john\n\n        Fix source info in CollapseProperties.\n\n        R\u003dnick\n        DELTA\u003d17  (8 added, 3 deleted, 6 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dmbevwz\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@184 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/14/10, 4:53 PM",
      "commitName": "43859717972907dd1ecebd8dca6e05036386e28b",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/14/10, 9:15 AM",
      "commitNameOld": "c764a46abf211d4677fadc33f7d466e5b14fa088",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 0.32,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nNode processFunctionNode(FunctionNode functionNode) {\n    Name name \u003d functionNode.getFunctionName();\n    Boolean isUnnamedFunction \u003d false;\n    if (name \u003d\u003d null) {\n        name \u003d new Name();\n        name.setIdentifier(\"\");\n        isUnnamedFunction \u003d true;\n    }\n    Node node \u003d new Node(Token.FUNCTION);\n    node.putProp(Node.SOURCENAME_PROP, functionNode.getSourceName());\n    Node newName \u003d transform(name);\n    if (isUnnamedFunction) {\n        newName.setLineno(functionNode.getLineno());\n        int lpColumn \u003d functionNode.getAbsolutePosition() + functionNode.getLp();\n        newName.setCharno(position2charno(lpColumn));\n    }\n    node.addChildToBack(newName);\n    Node lp \u003d new Node(Token.LP);\n    Name fnName \u003d functionNode.getFunctionName();\n    if (fnName !\u003d null) {\n        lp.setLineno(fnName.getLineno());\n    } else {\n        lp.setLineno(functionNode.getLineno());\n    }\n    int lparenCharno \u003d functionNode.getLp() + functionNode.getAbsolutePosition();\n    lp.setCharno(position2charno(lparenCharno));\n    for (AstNode param : functionNode.getParams()) {\n        lp.addChildToBack(transform(param));\n    }\n    node.addChildToBack(lp);\n    Node bodyNode \u003d transform(functionNode.getBody());\n    parseDirectives(bodyNode);\n    node.addChildToBack(bodyNode);\n    return node;\n}",
      "path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
      "functionStartLine": 512,
      "functionName": "processFunctionNode",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,36 +1,36 @@\n @Override\n Node processFunctionNode(FunctionNode functionNode) {\n     Name name \u003d functionNode.getFunctionName();\n     Boolean isUnnamedFunction \u003d false;\n     if (name \u003d\u003d null) {\n         name \u003d new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction \u003d true;\n     }\n-    Node node \u003d new com.google.javascript.rhino.FunctionNode(name.getIdentifier());\n+    Node node \u003d new Node(Token.FUNCTION);\n     node.putProp(Node.SOURCENAME_PROP, functionNode.getSourceName());\n     Node newName \u003d transform(name);\n     if (isUnnamedFunction) {\n         newName.setLineno(functionNode.getLineno());\n         int lpColumn \u003d functionNode.getAbsolutePosition() + functionNode.getLp();\n         newName.setCharno(position2charno(lpColumn));\n     }\n     node.addChildToBack(newName);\n     Node lp \u003d new Node(Token.LP);\n     Name fnName \u003d functionNode.getFunctionName();\n     if (fnName !\u003d null) {\n         lp.setLineno(fnName.getLineno());\n     } else {\n         lp.setLineno(functionNode.getLineno());\n     }\n     int lparenCharno \u003d functionNode.getLp() + functionNode.getAbsolutePosition();\n     lp.setCharno(position2charno(lparenCharno));\n     for (AstNode param : functionNode.getParams()) {\n         lp.addChildToBack(transform(param));\n     }\n     node.addChildToBack(lp);\n     Node bodyNode \u003d transform(functionNode.getBody());\n     parseDirectives(bodyNode);\n     node.addChildToBack(bodyNode);\n     return node;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "847b296c23a63aa0a0b38cc3e63883e1688288e3": {
      "type": "Ybodychange",
      "commitMessage": "Add support for other charset types.\n\nAdd support for ES5 directives.\n\nFork unit tests, so that they run more hermetically.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@21 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/8/09, 3:50 PM",
      "commitName": "847b296c23a63aa0a0b38cc3e63883e1688288e3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/3/09, 3:51 PM",
      "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 35.0,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nNode processFunctionNode(FunctionNode functionNode) {\n    Name name \u003d functionNode.getFunctionName();\n    Boolean isUnnamedFunction \u003d false;\n    if (name \u003d\u003d null) {\n        name \u003d new Name();\n        name.setIdentifier(\"\");\n        isUnnamedFunction \u003d true;\n    }\n    Node node \u003d new com.google.javascript.rhino.FunctionNode(name.getIdentifier());\n    node.putProp(Node.SOURCENAME_PROP, functionNode.getSourceName());\n    Node newName \u003d transform(name);\n    if (isUnnamedFunction) {\n        newName.setLineno(functionNode.getLineno());\n        int lpColumn \u003d functionNode.getAbsolutePosition() + functionNode.getLp();\n        newName.setCharno(position2charno(lpColumn));\n    }\n    node.addChildToBack(newName);\n    Node lp \u003d new Node(Token.LP);\n    Name fnName \u003d functionNode.getFunctionName();\n    if (fnName !\u003d null) {\n        lp.setLineno(fnName.getLineno());\n    } else {\n        lp.setLineno(functionNode.getLineno());\n    }\n    int lparenCharno \u003d functionNode.getLp() + functionNode.getAbsolutePosition();\n    lp.setCharno(position2charno(lparenCharno));\n    for (AstNode param : functionNode.getParams()) {\n        lp.addChildToBack(transform(param));\n    }\n    node.addChildToBack(lp);\n    Node bodyNode \u003d transform(functionNode.getBody());\n    parseDirectives(bodyNode);\n    node.addChildToBack(bodyNode);\n    return node;\n}",
      "path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
      "functionStartLine": 524,
      "functionName": "processFunctionNode",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,34 +1,36 @@\n @Override\n Node processFunctionNode(FunctionNode functionNode) {\n     Name name \u003d functionNode.getFunctionName();\n     Boolean isUnnamedFunction \u003d false;\n     if (name \u003d\u003d null) {\n         name \u003d new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction \u003d true;\n     }\n     Node node \u003d new com.google.javascript.rhino.FunctionNode(name.getIdentifier());\n     node.putProp(Node.SOURCENAME_PROP, functionNode.getSourceName());\n     Node newName \u003d transform(name);\n     if (isUnnamedFunction) {\n         newName.setLineno(functionNode.getLineno());\n         int lpColumn \u003d functionNode.getAbsolutePosition() + functionNode.getLp();\n         newName.setCharno(position2charno(lpColumn));\n     }\n     node.addChildToBack(newName);\n     Node lp \u003d new Node(Token.LP);\n     Name fnName \u003d functionNode.getFunctionName();\n     if (fnName !\u003d null) {\n         lp.setLineno(fnName.getLineno());\n     } else {\n         lp.setLineno(functionNode.getLineno());\n     }\n     int lparenCharno \u003d functionNode.getLp() + functionNode.getAbsolutePosition();\n     lp.setCharno(position2charno(lparenCharno));\n     for (AstNode param : functionNode.getParams()) {\n         lp.addChildToBack(transform(param));\n     }\n     node.addChildToBack(lp);\n-    node.addChildToBack(transform(functionNode.getBody()));\n+    Node bodyNode \u003d transform(functionNode.getBody());\n+    parseDirectives(bodyNode);\n+    node.addChildToBack(bodyNode);\n     return node;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,34 @@\n+@Override\n+Node processFunctionNode(FunctionNode functionNode) {\n+    Name name \u003d functionNode.getFunctionName();\n+    Boolean isUnnamedFunction \u003d false;\n+    if (name \u003d\u003d null) {\n+        name \u003d new Name();\n+        name.setIdentifier(\"\");\n+        isUnnamedFunction \u003d true;\n+    }\n+    Node node \u003d new com.google.javascript.rhino.FunctionNode(name.getIdentifier());\n+    node.putProp(Node.SOURCENAME_PROP, functionNode.getSourceName());\n+    Node newName \u003d transform(name);\n+    if (isUnnamedFunction) {\n+        newName.setLineno(functionNode.getLineno());\n+        int lpColumn \u003d functionNode.getAbsolutePosition() + functionNode.getLp();\n+        newName.setCharno(position2charno(lpColumn));\n+    }\n+    node.addChildToBack(newName);\n+    Node lp \u003d new Node(Token.LP);\n+    Name fnName \u003d functionNode.getFunctionName();\n+    if (fnName !\u003d null) {\n+        lp.setLineno(fnName.getLineno());\n+    } else {\n+        lp.setLineno(functionNode.getLineno());\n+    }\n+    int lparenCharno \u003d functionNode.getLp() + functionNode.getAbsolutePosition();\n+    lp.setCharno(position2charno(lparenCharno));\n+    for (AstNode param : functionNode.getParams()) {\n+        lp.addChildToBack(transform(param));\n+    }\n+    node.addChildToBack(lp);\n+    node.addChildToBack(transform(functionNode.getBody()));\n+    return node;\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\nNode processFunctionNode(FunctionNode functionNode) {\n    Name name \u003d functionNode.getFunctionName();\n    Boolean isUnnamedFunction \u003d false;\n    if (name \u003d\u003d null) {\n        name \u003d new Name();\n        name.setIdentifier(\"\");\n        isUnnamedFunction \u003d true;\n    }\n    Node node \u003d new com.google.javascript.rhino.FunctionNode(name.getIdentifier());\n    node.putProp(Node.SOURCENAME_PROP, functionNode.getSourceName());\n    Node newName \u003d transform(name);\n    if (isUnnamedFunction) {\n        newName.setLineno(functionNode.getLineno());\n        int lpColumn \u003d functionNode.getAbsolutePosition() + functionNode.getLp();\n        newName.setCharno(position2charno(lpColumn));\n    }\n    node.addChildToBack(newName);\n    Node lp \u003d new Node(Token.LP);\n    Name fnName \u003d functionNode.getFunctionName();\n    if (fnName !\u003d null) {\n        lp.setLineno(fnName.getLineno());\n    } else {\n        lp.setLineno(functionNode.getLineno());\n    }\n    int lparenCharno \u003d functionNode.getLp() + functionNode.getAbsolutePosition();\n    lp.setCharno(position2charno(lparenCharno));\n    for (AstNode param : functionNode.getParams()) {\n        lp.addChildToBack(transform(param));\n    }\n    node.addChildToBack(lp);\n    node.addChildToBack(transform(functionNode.getBody()));\n    return node;\n}",
      "path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
      "functionStartLine": 485,
      "functionName": "processFunctionNode",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}