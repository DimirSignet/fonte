{
  "origin": "codeshovel",
  "repositoryName": "Closure-91b",
  "repositoryPath": "/tmp/Closure-91b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CheckGlobalThis.java",
  "functionName": "shouldTraverse",
  "functionId": "shouldTraverse___t-NodeTraversal__n-Node__parent-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/CheckGlobalThis.java",
  "functionAnnotation": "",
  "functionDoc": "Since this pass reports errors only when a global {@code this} keyword\nis encountered, there is no reason to traverse non global contexts.\n",
  "functionStartLine": 82,
  "functionEndLine": 144,
  "numCommitsSeen": 12,
  "timeTaken": 404,
  "changeHistory": [
    "34fd5f8275ae69fc772c2283a3c5fd13b93a7c42",
    "82a9956c6337d2f5d4a94ebe624d64faa54d9182",
    "9de5e9b4671773bb3f2d5932e57c1b4186b9b777",
    "8aa879a4eeb18cfc8d13e6c843a32b7f41ccd516",
    "ccbbcbf71b1cb8771c9cdad1d28b367ce6ea0da2",
    "6d00ac1a68612aade8a19d7ecc9b180f00ae5234",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "34fd5f8275ae69fc772c2283a3c5fd13b93a7c42": "Ybodychange",
    "82a9956c6337d2f5d4a94ebe624d64faa54d9182": "Ybodychange",
    "9de5e9b4671773bb3f2d5932e57c1b4186b9b777": "Yformatchange",
    "8aa879a4eeb18cfc8d13e6c843a32b7f41ccd516": "Ybodychange",
    "ccbbcbf71b1cb8771c9cdad1d28b367ce6ea0da2": "Ybodychange",
    "6d00ac1a68612aade8a19d7ecc9b180f00ae5234": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "34fd5f8275ae69fc772c2283a3c5fd13b93a7c42": {
      "type": "Ybodychange",
      "commitMessage": "\nChange the OBJECTLIT AST structure from:\n\nOBJECTLIT\n  KEY1\n  VALUE1\n\nto\n\nOBJECTLIT\n  KEY1\n    VALUE1\n\nFixes issue 241\n\nR\u003dacleung,johnlenz,stevey\nDELTA\u003d268  (101 added, 51 deleted, 116 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d356416\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@494 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/18/10, 2:55 PM",
      "commitName": "34fd5f8275ae69fc772c2283a3c5fd13b93a7c42",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "9/13/10, 11:12 AM",
      "commitNameOld": "4c6e1039b80859f17de5f3cbcfeba61ed8ea0485",
      "commitAuthorOld": "elbaum@google.com",
      "daysBetweenCommits": 35.15,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "actualSource": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() \u003d\u003d Token.FUNCTION) {\n        JSDocInfo jsDoc \u003d getFunctionJsDocInfo(n);\n        if (jsDoc !\u003d null \u0026\u0026 (jsDoc.isConstructor() || jsDoc.isInterface() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n            return false;\n        }\n        int pType \u003d parent.getType();\n        if (!(pType \u003d\u003d Token.BLOCK || pType \u003d\u003d Token.SCRIPT || pType \u003d\u003d Token.NAME || pType \u003d\u003d Token.ASSIGN || pType \u003d\u003d Token.STRING || pType \u003d\u003d Token.NUMBER)) {\n            return false;\n        }\n    }\n    if (parent !\u003d null \u0026\u0026 parent.getType() \u003d\u003d Token.ASSIGN) {\n        Node lhs \u003d parent.getFirstChild();\n        Node rhs \u003d lhs.getNext();\n        if (n \u003d\u003d lhs) {\n            if (assignLhsChild \u003d\u003d null) {\n                assignLhsChild \u003d lhs;\n            }\n        } else {\n            if (NodeUtil.isGet(lhs)) {\n                if (lhs.getType() \u003d\u003d Token.GETPROP \u0026\u0026 lhs.getLastChild().getString().equals(\"prototype\")) {\n                    return false;\n                }\n                Node llhs \u003d lhs.getFirstChild();\n                if (llhs.getType() \u003d\u003d Token.GETPROP \u0026\u0026 llhs.getLastChild().getString().equals(\"prototype\")) {\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/jscomp/CheckGlobalThis.java",
      "functionStartLine": 82,
      "functionName": "shouldTraverse",
      "functionAnnotation": "",
      "functionDoc": "Since this pass reports errors only when a global {@code this} keyword\nis encountered, there is no reason to traverse non global contexts.\n",
      "diff": "@@ -1,32 +1,32 @@\n public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() \u003d\u003d Token.FUNCTION) {\n         JSDocInfo jsDoc \u003d getFunctionJsDocInfo(n);\n         if (jsDoc !\u003d null \u0026\u0026 (jsDoc.isConstructor() || jsDoc.isInterface() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n             return false;\n         }\n         int pType \u003d parent.getType();\n-        if (!(pType \u003d\u003d Token.BLOCK || pType \u003d\u003d Token.SCRIPT || pType \u003d\u003d Token.NAME || pType \u003d\u003d Token.ASSIGN || pType \u003d\u003d Token.OBJECTLIT)) {\n+        if (!(pType \u003d\u003d Token.BLOCK || pType \u003d\u003d Token.SCRIPT || pType \u003d\u003d Token.NAME || pType \u003d\u003d Token.ASSIGN || pType \u003d\u003d Token.STRING || pType \u003d\u003d Token.NUMBER)) {\n             return false;\n         }\n     }\n     if (parent !\u003d null \u0026\u0026 parent.getType() \u003d\u003d Token.ASSIGN) {\n         Node lhs \u003d parent.getFirstChild();\n         Node rhs \u003d lhs.getNext();\n         if (n \u003d\u003d lhs) {\n             if (assignLhsChild \u003d\u003d null) {\n                 assignLhsChild \u003d lhs;\n             }\n         } else {\n             if (NodeUtil.isGet(lhs)) {\n                 if (lhs.getType() \u003d\u003d Token.GETPROP \u0026\u0026 lhs.getLastChild().getString().equals(\"prototype\")) {\n                     return false;\n                 }\n                 Node llhs \u003d lhs.getFirstChild();\n                 if (llhs.getType() \u003d\u003d Token.GETPROP \u0026\u0026 llhs.getLastChild().getString().equals(\"prototype\")) {\n                     return false;\n                 }\n             }\n         }\n     }\n     return true;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "82a9956c6337d2f5d4a94ebe624d64faa54d9182": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/07/09 08:36:29 by nicksantos\n\n        when injecting param checks, do not inject them before any function\n        declarations, because that will break normalization constraints.\n\n        R\u003djohnlenz\n        DELTA\u003d22  (18 added, 0 deleted, 4 changed)\n\nChange on 2010/07/09 09:36:54 by johnlenz\n\n        Prefer FileWriter to PrintStream when charset translation isn\u0027t needed.\n\n        R\u003dacleung\n        DELTA\u003d68  (13 added, 2 deleted, 53 changed)\n\nChange on 2010/07/09 10:54:42 by nicksantos\n\n        our mechanism for injecting boilerplate does not work\n        for code that uses @const externs. So just don\u0027t use\n        any @const externs.\n\n        R\u003djohnlenz\n        DELTA\u003d3  (1 added, 0 deleted, 2 changed)\n\nChange on 2010/07/09 11:30:29 by nicksantos\n\n        Scan functional properties of object literals for invalid use\n        of \"this\".\n        Fixes issue 182.\n\n        R\u003dacleung\n        DELTA\u003d21  (19 added, 0 deleted, 2 changed)\n\nChange on 2010/07/09 12:40:16 by dcc\n\n        Separate pass instance for peephole preprocessing.\n        Now that I\u0027m writing instructions for how people can add their own\n        peephole passes, I want to make sure that the preprocessing\n        peephole optimizations that relies on don\u0027t get disturbed.\n\n        R\u003djohnlenz\n        DELTA\u003d18  (15 added, 0 deleted, 3 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d49008\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@270 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/9/10, 4:02 PM",
      "commitName": "82a9956c6337d2f5d4a94ebe624d64faa54d9182",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "7/1/10, 7:38 AM",
      "commitNameOld": "9de5e9b4671773bb3f2d5932e57c1b4186b9b777",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 8.35,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() \u003d\u003d Token.FUNCTION) {\n        JSDocInfo jsDoc \u003d getFunctionJsDocInfo(n);\n        if (jsDoc !\u003d null \u0026\u0026 (jsDoc.isConstructor() || jsDoc.isInterface() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n            return false;\n        }\n        int pType \u003d parent.getType();\n        if (!(pType \u003d\u003d Token.BLOCK || pType \u003d\u003d Token.SCRIPT || pType \u003d\u003d Token.NAME || pType \u003d\u003d Token.ASSIGN || pType \u003d\u003d Token.OBJECTLIT)) {\n            return false;\n        }\n    }\n    if (parent !\u003d null \u0026\u0026 parent.getType() \u003d\u003d Token.ASSIGN) {\n        Node lhs \u003d parent.getFirstChild();\n        Node rhs \u003d lhs.getNext();\n        if (n \u003d\u003d lhs) {\n            if (assignLhsChild \u003d\u003d null) {\n                assignLhsChild \u003d lhs;\n            }\n        } else {\n            if (NodeUtil.isGet(lhs)) {\n                if (lhs.getType() \u003d\u003d Token.GETPROP \u0026\u0026 lhs.getLastChild().getString().equals(\"prototype\")) {\n                    return false;\n                }\n                Node llhs \u003d lhs.getFirstChild();\n                if (llhs.getType() \u003d\u003d Token.GETPROP \u0026\u0026 llhs.getLastChild().getString().equals(\"prototype\")) {\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/jscomp/CheckGlobalThis.java",
      "functionStartLine": 84,
      "functionName": "shouldTraverse",
      "functionAnnotation": "",
      "functionDoc": "Since this pass reports errors only when a global {@code this} keyword\nis encountered, there is no reason to traverse non global contexts.\n",
      "diff": "@@ -1,32 +1,32 @@\n public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() \u003d\u003d Token.FUNCTION) {\n         JSDocInfo jsDoc \u003d getFunctionJsDocInfo(n);\n         if (jsDoc !\u003d null \u0026\u0026 (jsDoc.isConstructor() || jsDoc.isInterface() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n             return false;\n         }\n         int pType \u003d parent.getType();\n-        if (!(pType \u003d\u003d Token.BLOCK || pType \u003d\u003d Token.SCRIPT || pType \u003d\u003d Token.NAME || pType \u003d\u003d Token.ASSIGN)) {\n+        if (!(pType \u003d\u003d Token.BLOCK || pType \u003d\u003d Token.SCRIPT || pType \u003d\u003d Token.NAME || pType \u003d\u003d Token.ASSIGN || pType \u003d\u003d Token.OBJECTLIT)) {\n             return false;\n         }\n     }\n     if (parent !\u003d null \u0026\u0026 parent.getType() \u003d\u003d Token.ASSIGN) {\n         Node lhs \u003d parent.getFirstChild();\n         Node rhs \u003d lhs.getNext();\n         if (n \u003d\u003d lhs) {\n             if (assignLhsChild \u003d\u003d null) {\n                 assignLhsChild \u003d lhs;\n             }\n         } else {\n             if (NodeUtil.isGet(lhs)) {\n                 if (lhs.getType() \u003d\u003d Token.GETPROP \u0026\u0026 lhs.getLastChild().getString().equals(\"prototype\")) {\n                     return false;\n                 }\n                 Node llhs \u003d lhs.getFirstChild();\n                 if (llhs.getType() \u003d\u003d Token.GETPROP \u0026\u0026 llhs.getLastChild().getString().equals(\"prototype\")) {\n                     return false;\n                 }\n             }\n         }\n     }\n     return true;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9de5e9b4671773bb3f2d5932e57c1b4186b9b777": {
      "type": "Yformatchange",
      "commitMessage": "\nChange on 2010/06/30 15:06:33 by johnlenz\n\n\tAdd a diagnostic group so that projects with weird externs can opt-out of the stricter extern checks.\n\n\tR\u003dnicksantos\n\tDELTA\u003d54  (52 added, 0 deleted, 2 changed)\n\nChange on 2010/06/30 17:56:51 by johnlenz\n\n\tRevert warning levels until after a release is put out to control them.\n\n\tR\u003dnicksantos\n\tDELTA\u003d4  (2 added, 0 deleted, 2 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d47002\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@260 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/1/10, 7:38 AM",
      "commitName": "9de5e9b4671773bb3f2d5932e57c1b4186b9b777",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "6/4/10, 11:47 AM",
      "commitNameOld": "8aa879a4eeb18cfc8d13e6c843a32b7f41ccd516",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 26.83,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "actualSource": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() \u003d\u003d Token.FUNCTION) {\n        JSDocInfo jsDoc \u003d getFunctionJsDocInfo(n);\n        if (jsDoc !\u003d null \u0026\u0026 (jsDoc.isConstructor() || jsDoc.isInterface() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n            return false;\n        }\n        int pType \u003d parent.getType();\n        if (!(pType \u003d\u003d Token.BLOCK || pType \u003d\u003d Token.SCRIPT || pType \u003d\u003d Token.NAME || pType \u003d\u003d Token.ASSIGN)) {\n            return false;\n        }\n    }\n    if (parent !\u003d null \u0026\u0026 parent.getType() \u003d\u003d Token.ASSIGN) {\n        Node lhs \u003d parent.getFirstChild();\n        Node rhs \u003d lhs.getNext();\n        if (n \u003d\u003d lhs) {\n            if (assignLhsChild \u003d\u003d null) {\n                assignLhsChild \u003d lhs;\n            }\n        } else {\n            if (NodeUtil.isGet(lhs)) {\n                if (lhs.getType() \u003d\u003d Token.GETPROP \u0026\u0026 lhs.getLastChild().getString().equals(\"prototype\")) {\n                    return false;\n                }\n                Node llhs \u003d lhs.getFirstChild();\n                if (llhs.getType() \u003d\u003d Token.GETPROP \u0026\u0026 llhs.getLastChild().getString().equals(\"prototype\")) {\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/jscomp/CheckGlobalThis.java",
      "functionStartLine": 84,
      "functionName": "shouldTraverse",
      "functionAnnotation": "",
      "functionDoc": "Since this pass reports errors only when a global {@code this} keyword\nis encountered, there is no reason to traverse non global contexts.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "8aa879a4eeb18cfc8d13e6c843a32b7f41ccd516": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/06/03 by nicksantos\n\n\tFor dangerous \u0027this\u0027 checking, allow prototype methods declared\n\twith GETELEM.\n\tFixes issue 125.\n\n\tR\u003dacleung\n\tDELTA\u003d15  (11 added, 0 deleted, 4 changed)\n\nChange on 2010/06/04 by nicksantos\n\n\tallow global this in interfaces.\n\n\tR\u003djohnlenz\n\tDELTA\u003d6  (6 added, 0 deleted, 0 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d19001\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@239 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/4/10, 11:47 AM",
      "commitName": "8aa879a4eeb18cfc8d13e6c843a32b7f41ccd516",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "6/3/10, 5:31 PM",
      "commitNameOld": "ccbbcbf71b1cb8771c9cdad1d28b367ce6ea0da2",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 0.76,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() \u003d\u003d Token.FUNCTION) {\n        JSDocInfo jsDoc \u003d getFunctionJsDocInfo(n);\n        if (jsDoc !\u003d null \u0026\u0026 (jsDoc.isConstructor() || jsDoc.isInterface() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n            return false;\n        }\n        int pType \u003d parent.getType();\n        if (!(pType \u003d\u003d Token.BLOCK || pType \u003d\u003d Token.SCRIPT || pType \u003d\u003d Token.NAME || pType \u003d\u003d Token.ASSIGN)) {\n            return false;\n        }\n    }\n    if (parent !\u003d null \u0026\u0026 parent.getType() \u003d\u003d Token.ASSIGN) {\n        Node lhs \u003d parent.getFirstChild();\n        Node rhs \u003d lhs.getNext();\n        if (n \u003d\u003d lhs) {\n            if (assignLhsChild \u003d\u003d null) {\n                assignLhsChild \u003d lhs;\n            }\n        } else {\n            if (NodeUtil.isGet(lhs)) {\n                if (lhs.getType() \u003d\u003d Token.GETPROP \u0026\u0026 lhs.getLastChild().getString().equals(\"prototype\")) {\n                    return false;\n                }\n                Node llhs \u003d lhs.getFirstChild();\n                if (llhs.getType() \u003d\u003d Token.GETPROP \u0026\u0026 llhs.getLastChild().getString().equals(\"prototype\")) {\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/jscomp/CheckGlobalThis.java",
      "functionStartLine": 84,
      "functionName": "shouldTraverse",
      "functionAnnotation": "",
      "functionDoc": "Since this pass reports errors only when a global {@code this} keyword\nis encountered, there is no reason to traverse non global contexts.\n",
      "diff": "@@ -1,32 +1,32 @@\n public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() \u003d\u003d Token.FUNCTION) {\n         JSDocInfo jsDoc \u003d getFunctionJsDocInfo(n);\n-        if (jsDoc !\u003d null \u0026\u0026 (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n+        if (jsDoc !\u003d null \u0026\u0026 (jsDoc.isConstructor() || jsDoc.isInterface() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n             return false;\n         }\n         int pType \u003d parent.getType();\n         if (!(pType \u003d\u003d Token.BLOCK || pType \u003d\u003d Token.SCRIPT || pType \u003d\u003d Token.NAME || pType \u003d\u003d Token.ASSIGN)) {\n             return false;\n         }\n     }\n     if (parent !\u003d null \u0026\u0026 parent.getType() \u003d\u003d Token.ASSIGN) {\n         Node lhs \u003d parent.getFirstChild();\n         Node rhs \u003d lhs.getNext();\n         if (n \u003d\u003d lhs) {\n             if (assignLhsChild \u003d\u003d null) {\n                 assignLhsChild \u003d lhs;\n             }\n         } else {\n-            if (lhs.getType() \u003d\u003d Token.GETPROP) {\n-                if (lhs.getLastChild().getString().equals(\"prototype\")) {\n+            if (NodeUtil.isGet(lhs)) {\n+                if (lhs.getType() \u003d\u003d Token.GETPROP \u0026\u0026 lhs.getLastChild().getString().equals(\"prototype\")) {\n                     return false;\n                 }\n-                String leftName \u003d lhs.getQualifiedName();\n-                if (leftName !\u003d null \u0026\u0026 leftName.contains(\".prototype.\")) {\n+                Node llhs \u003d lhs.getFirstChild();\n+                if (llhs.getType() \u003d\u003d Token.GETPROP \u0026\u0026 llhs.getLastChild().getString().equals(\"prototype\")) {\n                     return false;\n                 }\n             }\n         }\n     }\n     return true;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ccbbcbf71b1cb8771c9cdad1d28b367ce6ea0da2": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/06/03 by nicksantos\n\n        Also use the @override tag as a signal that a global this is safe.\n        see the test case for an example.\n\n        R\u003dacleung\n        DELTA\u003d10  (8 added, 0 deleted, 2 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d18001\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@238 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/3/10, 5:31 PM",
      "commitName": "ccbbcbf71b1cb8771c9cdad1d28b367ce6ea0da2",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "5/27/10, 10:18 PM",
      "commitNameOld": "6d00ac1a68612aade8a19d7ecc9b180f00ae5234",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 6.8,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() \u003d\u003d Token.FUNCTION) {\n        JSDocInfo jsDoc \u003d getFunctionJsDocInfo(n);\n        if (jsDoc !\u003d null \u0026\u0026 (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n            return false;\n        }\n        int pType \u003d parent.getType();\n        if (!(pType \u003d\u003d Token.BLOCK || pType \u003d\u003d Token.SCRIPT || pType \u003d\u003d Token.NAME || pType \u003d\u003d Token.ASSIGN)) {\n            return false;\n        }\n    }\n    if (parent !\u003d null \u0026\u0026 parent.getType() \u003d\u003d Token.ASSIGN) {\n        Node lhs \u003d parent.getFirstChild();\n        Node rhs \u003d lhs.getNext();\n        if (n \u003d\u003d lhs) {\n            if (assignLhsChild \u003d\u003d null) {\n                assignLhsChild \u003d lhs;\n            }\n        } else {\n            if (lhs.getType() \u003d\u003d Token.GETPROP) {\n                if (lhs.getLastChild().getString().equals(\"prototype\")) {\n                    return false;\n                }\n                String leftName \u003d lhs.getQualifiedName();\n                if (leftName !\u003d null \u0026\u0026 leftName.contains(\".prototype.\")) {\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/jscomp/CheckGlobalThis.java",
      "functionStartLine": 84,
      "functionName": "shouldTraverse",
      "functionAnnotation": "",
      "functionDoc": "Since this pass reports errors only when a global {@code this} keyword\nis encountered, there is no reason to traverse non global contexts.\n",
      "diff": "@@ -1,32 +1,32 @@\n public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() \u003d\u003d Token.FUNCTION) {\n         JSDocInfo jsDoc \u003d getFunctionJsDocInfo(n);\n-        if (jsDoc !\u003d null \u0026\u0026 (jsDoc.isConstructor() || jsDoc.hasThisType())) {\n+        if (jsDoc !\u003d null \u0026\u0026 (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n             return false;\n         }\n         int pType \u003d parent.getType();\n         if (!(pType \u003d\u003d Token.BLOCK || pType \u003d\u003d Token.SCRIPT || pType \u003d\u003d Token.NAME || pType \u003d\u003d Token.ASSIGN)) {\n             return false;\n         }\n     }\n     if (parent !\u003d null \u0026\u0026 parent.getType() \u003d\u003d Token.ASSIGN) {\n         Node lhs \u003d parent.getFirstChild();\n         Node rhs \u003d lhs.getNext();\n         if (n \u003d\u003d lhs) {\n             if (assignLhsChild \u003d\u003d null) {\n                 assignLhsChild \u003d lhs;\n             }\n         } else {\n             if (lhs.getType() \u003d\u003d Token.GETPROP) {\n                 if (lhs.getLastChild().getString().equals(\"prototype\")) {\n                     return false;\n                 }\n                 String leftName \u003d lhs.getQualifiedName();\n                 if (leftName !\u003d null \u0026\u0026 leftName.contains(\".prototype.\")) {\n                     return false;\n                 }\n             }\n         }\n     }\n     return true;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6d00ac1a68612aade8a19d7ecc9b180f00ae5234": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/05/27 by johnlenz\n\n        Cleanup some import, unused code, and javadoc warnings.\n\n        R\u003dacleung\n        DELTA\u003d167  (3 added, 119 deleted, 45 changed)\n\nChange on 2010/05/27 by nicksantos\n\n        Use a new heuristic for CheckGlobalThis.\n        Fixes closure-compiler issue 144.\n        i *think* this is the right behavior, because it more closely\n        maps to how we infer \"this\" types in type-checking, but there\n        may be cases i haven\u0027t thought of.\n\n        R\u003djohnlenz,acleung\n        DELTA\u003d57  (51 added, 0 deleted, 6 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d14003\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@234 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/27/10, 10:18 PM",
      "commitName": "6d00ac1a68612aade8a19d7ecc9b180f00ae5234",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "3/29/10, 7:04 AM",
      "commitNameOld": "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 59.63,
      "commitsBetweenForRepo": 61,
      "commitsBetweenForFile": 1,
      "actualSource": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() \u003d\u003d Token.FUNCTION) {\n        JSDocInfo jsDoc \u003d getFunctionJsDocInfo(n);\n        if (jsDoc !\u003d null \u0026\u0026 (jsDoc.isConstructor() || jsDoc.hasThisType())) {\n            return false;\n        }\n        int pType \u003d parent.getType();\n        if (!(pType \u003d\u003d Token.BLOCK || pType \u003d\u003d Token.SCRIPT || pType \u003d\u003d Token.NAME || pType \u003d\u003d Token.ASSIGN)) {\n            return false;\n        }\n    }\n    if (parent !\u003d null \u0026\u0026 parent.getType() \u003d\u003d Token.ASSIGN) {\n        Node lhs \u003d parent.getFirstChild();\n        Node rhs \u003d lhs.getNext();\n        if (n \u003d\u003d lhs) {\n            if (assignLhsChild \u003d\u003d null) {\n                assignLhsChild \u003d lhs;\n            }\n        } else {\n            if (lhs.getType() \u003d\u003d Token.GETPROP) {\n                if (lhs.getLastChild().getString().equals(\"prototype\")) {\n                    return false;\n                }\n                String leftName \u003d lhs.getQualifiedName();\n                if (leftName !\u003d null \u0026\u0026 leftName.contains(\".prototype.\")) {\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/jscomp/CheckGlobalThis.java",
      "functionStartLine": 84,
      "functionName": "shouldTraverse",
      "functionAnnotation": "",
      "functionDoc": "Since this pass reports errors only when a global {@code this} keyword\nis encountered, there is no reason to traverse non global contexts.\n",
      "diff": "@@ -1,28 +1,32 @@\n public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() \u003d\u003d Token.FUNCTION) {\n         JSDocInfo jsDoc \u003d getFunctionJsDocInfo(n);\n         if (jsDoc !\u003d null \u0026\u0026 (jsDoc.isConstructor() || jsDoc.hasThisType())) {\n             return false;\n         }\n+        int pType \u003d parent.getType();\n+        if (!(pType \u003d\u003d Token.BLOCK || pType \u003d\u003d Token.SCRIPT || pType \u003d\u003d Token.NAME || pType \u003d\u003d Token.ASSIGN)) {\n+            return false;\n+        }\n     }\n     if (parent !\u003d null \u0026\u0026 parent.getType() \u003d\u003d Token.ASSIGN) {\n         Node lhs \u003d parent.getFirstChild();\n         Node rhs \u003d lhs.getNext();\n         if (n \u003d\u003d lhs) {\n             if (assignLhsChild \u003d\u003d null) {\n                 assignLhsChild \u003d lhs;\n             }\n         } else {\n             if (lhs.getType() \u003d\u003d Token.GETPROP) {\n                 if (lhs.getLastChild().getString().equals(\"prototype\")) {\n                     return false;\n                 }\n                 String leftName \u003d lhs.getQualifiedName();\n                 if (leftName !\u003d null \u0026\u0026 leftName.contains(\".prototype.\")) {\n                     return false;\n                 }\n             }\n         }\n     }\n     return true;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,28 @@\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+    if (n.getType() \u003d\u003d Token.FUNCTION) {\n+        JSDocInfo jsDoc \u003d getFunctionJsDocInfo(n);\n+        if (jsDoc !\u003d null \u0026\u0026 (jsDoc.isConstructor() || jsDoc.hasThisType())) {\n+            return false;\n+        }\n+    }\n+    if (parent !\u003d null \u0026\u0026 parent.getType() \u003d\u003d Token.ASSIGN) {\n+        Node lhs \u003d parent.getFirstChild();\n+        Node rhs \u003d lhs.getNext();\n+        if (n \u003d\u003d lhs) {\n+            if (assignLhsChild \u003d\u003d null) {\n+                assignLhsChild \u003d lhs;\n+            }\n+        } else {\n+            if (lhs.getType() \u003d\u003d Token.GETPROP) {\n+                if (lhs.getLastChild().getString().equals(\"prototype\")) {\n+                    return false;\n+                }\n+                String leftName \u003d lhs.getQualifiedName();\n+                if (leftName !\u003d null \u0026\u0026 leftName.contains(\".prototype.\")) {\n+                    return false;\n+                }\n+            }\n+        }\n+    }\n+    return true;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() \u003d\u003d Token.FUNCTION) {\n        JSDocInfo jsDoc \u003d getFunctionJsDocInfo(n);\n        if (jsDoc !\u003d null \u0026\u0026 (jsDoc.isConstructor() || jsDoc.hasThisType())) {\n            return false;\n        }\n    }\n    if (parent !\u003d null \u0026\u0026 parent.getType() \u003d\u003d Token.ASSIGN) {\n        Node lhs \u003d parent.getFirstChild();\n        Node rhs \u003d lhs.getNext();\n        if (n \u003d\u003d lhs) {\n            if (assignLhsChild \u003d\u003d null) {\n                assignLhsChild \u003d lhs;\n            }\n        } else {\n            if (lhs.getType() \u003d\u003d Token.GETPROP) {\n                if (lhs.getLastChild().getString().equals(\"prototype\")) {\n                    return false;\n                }\n                String leftName \u003d lhs.getQualifiedName();\n                if (leftName !\u003d null \u0026\u0026 leftName.contains(\".prototype.\")) {\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/jscomp/CheckGlobalThis.java",
      "functionStartLine": 82,
      "functionName": "shouldTraverse",
      "functionAnnotation": "",
      "functionDoc": "Since this pass reports errors only when a global {@code this} keyword\nis encountered, there is no reason to traverse non global contexts.\n"
    }
  }
}