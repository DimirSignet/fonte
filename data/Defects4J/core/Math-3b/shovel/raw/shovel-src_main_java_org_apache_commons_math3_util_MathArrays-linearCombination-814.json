{
  "origin": "codeshovel",
  "repositoryName": "Math-3b",
  "repositoryPath": "/tmp/Math-3b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MathArrays.java",
  "functionName": "linearCombination",
  "functionId": "linearCombination___a-double[](modifiers-final)__b-double[](modifiers-final)",
  "sourceFilePath": "src/main/java/org/apache/commons/math3/util/MathArrays.java",
  "functionAnnotation": "",
  "functionDoc": "Compute a linear combination accurately.\nThis method computes the sum of the products\n\u003ccode\u003ea\u003csub\u003ei\u003c/sub\u003e b\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e to high accuracy.\nIt does so by using specific multiplication and addition algorithms to\npreserve accuracy and reduce cancellation effects.\n\u003cbr/\u003e\nIt is based on the 2005 paper\n\u003ca href\u003d\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi\u003d10.1.1.2.1547\"\u003e\nAccurate Sum and Dot Product\u003c/a\u003e by Takeshi Ogita, Siegfried M. Rump,\nand Shin\u0027ichi Oishi published in SIAM J. Sci. Comput.\n\n@param a Factors.\n@param b Factors.\n@return \u003ccode\u003e\u0026Sigma;\u003csub\u003ei\u003c/sub\u003e a\u003csub\u003ei\u003c/sub\u003e b\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e.\n@throws DimensionMismatchException if arrays dimensions don\u0027t match\n",
  "functionStartLine": 814,
  "functionEndLine": 870,
  "numCommitsSeen": 105,
  "timeTaken": 16319,
  "changeHistory": [
    "4fdc478a4274a3408afc995c505e7e804cb0da69",
    "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd",
    "dd4efa43349e74832b092ba33a92275b68cab9d3",
    "d4f113c5573262a1995e05d65a3b0a0da4d434af",
    "8afbbb7af8f4e174419afa42cee2f9e5a055b769",
    "b66083340fd113292568df2edadd5bff6a49ebd5"
  ],
  "changeHistoryShort": {
    "4fdc478a4274a3408afc995c505e7e804cb0da69": "Ymultichange(Yexceptionschange,Ydocchange)",
    "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd": "Ymovefromfile",
    "dd4efa43349e74832b092ba33a92275b68cab9d3": "Ymultichange(Ymovefromfile,Yformatchange)",
    "d4f113c5573262a1995e05d65a3b0a0da4d434af": "Ybodychange",
    "8afbbb7af8f4e174419afa42cee2f9e5a055b769": "Ybodychange",
    "b66083340fd113292568df2edadd5bff6a49ebd5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4fdc478a4274a3408afc995c505e7e804cb0da69": {
      "type": "Ymultichange(Yexceptionschange,Ydocchange)",
      "commitMessage": "Added throw declarations for package util.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1381283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/5/12, 11:29 AM",
      "commitName": "4fdc478a4274a3408afc995c505e7e804cb0da69",
      "commitAuthor": "Luc Maisonobe",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "Added throw declarations for package util.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1381283 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "9/5/12, 11:29 AM",
          "commitName": "4fdc478a4274a3408afc995c505e7e804cb0da69",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "4/30/12, 4:26 AM",
          "commitNameOld": "6b67f82c40bee7bb3e69258923110bec88057717",
          "commitAuthorOld": "Sebastien Brisard",
          "daysBetweenCommits": 128.29,
          "commitsBetweenForRepo": 341,
          "commitsBetweenForFile": 1,
          "actualSource": "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException {\n    final int len \u003d a.length;\n    if (len !\u003d b.length) {\n        throw new DimensionMismatchException(len, b.length);\n    }\n    final double[] prodHigh \u003d new double[len];\n    double prodLowSum \u003d 0;\n    for (int i \u003d 0; i \u003c len; i++) {\n        final double ai \u003d a[i];\n        final double ca \u003d SPLIT_FACTOR * ai;\n        final double aHigh \u003d ca - (ca - ai);\n        final double aLow \u003d ai - aHigh;\n        final double bi \u003d b[i];\n        final double cb \u003d SPLIT_FACTOR * bi;\n        final double bHigh \u003d cb - (cb - bi);\n        final double bLow \u003d bi - bHigh;\n        prodHigh[i] \u003d ai * bi;\n        final double prodLow \u003d aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);\n        prodLowSum +\u003d prodLow;\n    }\n    final double prodHighCur \u003d prodHigh[0];\n    double prodHighNext \u003d prodHigh[1];\n    double sHighPrev \u003d prodHighCur + prodHighNext;\n    double sPrime \u003d sHighPrev - prodHighNext;\n    double sLowSum \u003d (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);\n    final int lenMinusOne \u003d len - 1;\n    for (int i \u003d 1; i \u003c lenMinusOne; i++) {\n        prodHighNext \u003d prodHigh[i + 1];\n        final double sHighCur \u003d sHighPrev + prodHighNext;\n        sPrime \u003d sHighCur - prodHighNext;\n        sLowSum +\u003d (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);\n        sHighPrev \u003d sHighCur;\n    }\n    double result \u003d sHighPrev + (prodLowSum + sLowSum);\n    if (Double.isNaN(result)) {\n        result \u003d 0;\n        for (int i \u003d 0; i \u003c len; ++i) {\n            result +\u003d a[i] * b[i];\n        }\n    }\n    return result;\n}",
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java",
          "functionStartLine": 589,
          "functionName": "linearCombination",
          "functionAnnotation": "",
          "functionDoc": "Compute a linear combination accurately.\nThis method computes the sum of the products\n\u003ccode\u003ea\u003csub\u003ei\u003c/sub\u003e b\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e to high accuracy.\nIt does so by using specific multiplication and addition algorithms to\npreserve accuracy and reduce cancellation effects.\n\u003cbr/\u003e\nIt is based on the 2005 paper\n\u003ca href\u003d\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi\u003d10.1.1.2.1547\"\u003e\nAccurate Sum and Dot Product\u003c/a\u003e by Takeshi Ogita, Siegfried M. Rump,\nand Shin\u0027ichi Oishi published in SIAM J. Sci. Comput.\n\n@param a Factors.\n@param b Factors.\n@return \u003ccode\u003e\u0026Sigma;\u003csub\u003ei\u003c/sub\u003e a\u003csub\u003ei\u003c/sub\u003e b\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e.\n@throws DimensionMismatchException if arrays dimensions don\u0027t match\n",
          "diff": "@@ -1,42 +1,42 @@\n-public static double linearCombination(final double[] a, final double[] b) {\n+public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException {\n     final int len \u003d a.length;\n     if (len !\u003d b.length) {\n         throw new DimensionMismatchException(len, b.length);\n     }\n     final double[] prodHigh \u003d new double[len];\n     double prodLowSum \u003d 0;\n     for (int i \u003d 0; i \u003c len; i++) {\n         final double ai \u003d a[i];\n         final double ca \u003d SPLIT_FACTOR * ai;\n         final double aHigh \u003d ca - (ca - ai);\n         final double aLow \u003d ai - aHigh;\n         final double bi \u003d b[i];\n         final double cb \u003d SPLIT_FACTOR * bi;\n         final double bHigh \u003d cb - (cb - bi);\n         final double bLow \u003d bi - bHigh;\n         prodHigh[i] \u003d ai * bi;\n         final double prodLow \u003d aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);\n         prodLowSum +\u003d prodLow;\n     }\n     final double prodHighCur \u003d prodHigh[0];\n     double prodHighNext \u003d prodHigh[1];\n     double sHighPrev \u003d prodHighCur + prodHighNext;\n     double sPrime \u003d sHighPrev - prodHighNext;\n     double sLowSum \u003d (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);\n     final int lenMinusOne \u003d len - 1;\n     for (int i \u003d 1; i \u003c lenMinusOne; i++) {\n         prodHighNext \u003d prodHigh[i + 1];\n         final double sHighCur \u003d sHighPrev + prodHighNext;\n         sPrime \u003d sHighCur - prodHighNext;\n         sLowSum +\u003d (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);\n         sHighPrev \u003d sHighCur;\n     }\n     double result \u003d sHighPrev + (prodLowSum + sLowSum);\n     if (Double.isNaN(result)) {\n         result \u003d 0;\n         for (int i \u003d 0; i \u003c len; ++i) {\n             result +\u003d a[i] * b[i];\n         }\n     }\n     return result;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[DimensionMismatchException]"
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Added throw declarations for package util.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1381283 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "9/5/12, 11:29 AM",
          "commitName": "4fdc478a4274a3408afc995c505e7e804cb0da69",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "4/30/12, 4:26 AM",
          "commitNameOld": "6b67f82c40bee7bb3e69258923110bec88057717",
          "commitAuthorOld": "Sebastien Brisard",
          "daysBetweenCommits": 128.29,
          "commitsBetweenForRepo": 341,
          "commitsBetweenForFile": 1,
          "actualSource": "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException {\n    final int len \u003d a.length;\n    if (len !\u003d b.length) {\n        throw new DimensionMismatchException(len, b.length);\n    }\n    final double[] prodHigh \u003d new double[len];\n    double prodLowSum \u003d 0;\n    for (int i \u003d 0; i \u003c len; i++) {\n        final double ai \u003d a[i];\n        final double ca \u003d SPLIT_FACTOR * ai;\n        final double aHigh \u003d ca - (ca - ai);\n        final double aLow \u003d ai - aHigh;\n        final double bi \u003d b[i];\n        final double cb \u003d SPLIT_FACTOR * bi;\n        final double bHigh \u003d cb - (cb - bi);\n        final double bLow \u003d bi - bHigh;\n        prodHigh[i] \u003d ai * bi;\n        final double prodLow \u003d aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);\n        prodLowSum +\u003d prodLow;\n    }\n    final double prodHighCur \u003d prodHigh[0];\n    double prodHighNext \u003d prodHigh[1];\n    double sHighPrev \u003d prodHighCur + prodHighNext;\n    double sPrime \u003d sHighPrev - prodHighNext;\n    double sLowSum \u003d (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);\n    final int lenMinusOne \u003d len - 1;\n    for (int i \u003d 1; i \u003c lenMinusOne; i++) {\n        prodHighNext \u003d prodHigh[i + 1];\n        final double sHighCur \u003d sHighPrev + prodHighNext;\n        sPrime \u003d sHighCur - prodHighNext;\n        sLowSum +\u003d (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);\n        sHighPrev \u003d sHighCur;\n    }\n    double result \u003d sHighPrev + (prodLowSum + sLowSum);\n    if (Double.isNaN(result)) {\n        result \u003d 0;\n        for (int i \u003d 0; i \u003c len; ++i) {\n            result +\u003d a[i] * b[i];\n        }\n    }\n    return result;\n}",
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java",
          "functionStartLine": 589,
          "functionName": "linearCombination",
          "functionAnnotation": "",
          "functionDoc": "Compute a linear combination accurately.\nThis method computes the sum of the products\n\u003ccode\u003ea\u003csub\u003ei\u003c/sub\u003e b\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e to high accuracy.\nIt does so by using specific multiplication and addition algorithms to\npreserve accuracy and reduce cancellation effects.\n\u003cbr/\u003e\nIt is based on the 2005 paper\n\u003ca href\u003d\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi\u003d10.1.1.2.1547\"\u003e\nAccurate Sum and Dot Product\u003c/a\u003e by Takeshi Ogita, Siegfried M. Rump,\nand Shin\u0027ichi Oishi published in SIAM J. Sci. Comput.\n\n@param a Factors.\n@param b Factors.\n@return \u003ccode\u003e\u0026Sigma;\u003csub\u003ei\u003c/sub\u003e a\u003csub\u003ei\u003c/sub\u003e b\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e.\n@throws DimensionMismatchException if arrays dimensions don\u0027t match\n",
          "diff": "@@ -1,42 +1,42 @@\n-public static double linearCombination(final double[] a, final double[] b) {\n+public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException {\n     final int len \u003d a.length;\n     if (len !\u003d b.length) {\n         throw new DimensionMismatchException(len, b.length);\n     }\n     final double[] prodHigh \u003d new double[len];\n     double prodLowSum \u003d 0;\n     for (int i \u003d 0; i \u003c len; i++) {\n         final double ai \u003d a[i];\n         final double ca \u003d SPLIT_FACTOR * ai;\n         final double aHigh \u003d ca - (ca - ai);\n         final double aLow \u003d ai - aHigh;\n         final double bi \u003d b[i];\n         final double cb \u003d SPLIT_FACTOR * bi;\n         final double bHigh \u003d cb - (cb - bi);\n         final double bLow \u003d bi - bHigh;\n         prodHigh[i] \u003d ai * bi;\n         final double prodLow \u003d aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);\n         prodLowSum +\u003d prodLow;\n     }\n     final double prodHighCur \u003d prodHigh[0];\n     double prodHighNext \u003d prodHigh[1];\n     double sHighPrev \u003d prodHighCur + prodHighNext;\n     double sPrime \u003d sHighPrev - prodHighNext;\n     double sLowSum \u003d (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);\n     final int lenMinusOne \u003d len - 1;\n     for (int i \u003d 1; i \u003c lenMinusOne; i++) {\n         prodHighNext \u003d prodHigh[i + 1];\n         final double sHighCur \u003d sHighPrev + prodHighNext;\n         sPrime \u003d sHighCur - prodHighNext;\n         sLowSum +\u003d (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);\n         sHighPrev \u003d sHighCur;\n     }\n     double result \u003d sHighPrev + (prodLowSum + sLowSum);\n     if (Double.isNaN(result)) {\n         result \u003d 0;\n         for (int i \u003d 0; i \u003c len; ++i) {\n             result +\u003d a[i] * b[i];\n         }\n     }\n     return result;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Compute a linear combination accurately.\nThis method computes the sum of the products\n\u003ccode\u003ea\u003csub\u003ei\u003c/sub\u003e b\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e to high accuracy.\nIt does so by using specific multiplication and addition algorithms to\npreserve accuracy and reduce cancellation effects.\n\u003cbr/\u003e\nIt is based on the 2005 paper\n\u003ca href\u003d\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi\u003d10.1.1.2.1547\"\u003e\nAccurate Sum and Dot Product\u003c/a\u003e by Takeshi Ogita, Siegfried M. Rump,\nand Shin\u0027ichi Oishi published in SIAM J. Sci. Comput.\n\n@param a Factors.\n@param b Factors.\n@return \u003ccode\u003e\u0026Sigma;\u003csub\u003ei\u003c/sub\u003e a\u003csub\u003ei\u003c/sub\u003e b\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e.\n",
            "newValue": "Compute a linear combination accurately.\nThis method computes the sum of the products\n\u003ccode\u003ea\u003csub\u003ei\u003c/sub\u003e b\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e to high accuracy.\nIt does so by using specific multiplication and addition algorithms to\npreserve accuracy and reduce cancellation effects.\n\u003cbr/\u003e\nIt is based on the 2005 paper\n\u003ca href\u003d\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi\u003d10.1.1.2.1547\"\u003e\nAccurate Sum and Dot Product\u003c/a\u003e by Takeshi Ogita, Siegfried M. Rump,\nand Shin\u0027ichi Oishi published in SIAM J. Sci. Comput.\n\n@param a Factors.\n@param b Factors.\n@return \u003ccode\u003e\u0026Sigma;\u003csub\u003ei\u003c/sub\u003e a\u003csub\u003ei\u003c/sub\u003e b\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e.\n@throws DimensionMismatchException if arrays dimensions don\u0027t match\n"
          }
        }
      ]
    },
    "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd": {
      "type": "Ymovefromfile",
      "commitMessage": "MATH-444\nBase package name change: \"o.a.c.math\" -\u003e \"o.a.c.math3\"\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1244107 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/14/12, 8:17 AM",
      "commitName": "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd",
      "commitAuthor": "Gilles Sadowski",
      "commitDateOld": "2/14/12, 6:34 AM",
      "commitNameOld": "53257329dd394be1333b38bae787bf0cf19dc900",
      "commitAuthorOld": "Gilles Sadowski",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static double linearCombination(final double[] a, final double[] b) {\n    final int len \u003d a.length;\n    if (len !\u003d b.length) {\n        throw new DimensionMismatchException(len, b.length);\n    }\n    final double[] prodHigh \u003d new double[len];\n    double prodLowSum \u003d 0;\n    for (int i \u003d 0; i \u003c len; i++) {\n        final double ai \u003d a[i];\n        final double ca \u003d SPLIT_FACTOR * ai;\n        final double aHigh \u003d ca - (ca - ai);\n        final double aLow \u003d ai - aHigh;\n        final double bi \u003d b[i];\n        final double cb \u003d SPLIT_FACTOR * bi;\n        final double bHigh \u003d cb - (cb - bi);\n        final double bLow \u003d bi - bHigh;\n        prodHigh[i] \u003d ai * bi;\n        final double prodLow \u003d aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);\n        prodLowSum +\u003d prodLow;\n    }\n    final double prodHighCur \u003d prodHigh[0];\n    double prodHighNext \u003d prodHigh[1];\n    double sHighPrev \u003d prodHighCur + prodHighNext;\n    double sPrime \u003d sHighPrev - prodHighNext;\n    double sLowSum \u003d (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);\n    final int lenMinusOne \u003d len - 1;\n    for (int i \u003d 1; i \u003c lenMinusOne; i++) {\n        prodHighNext \u003d prodHigh[i + 1];\n        final double sHighCur \u003d sHighPrev + prodHighNext;\n        sPrime \u003d sHighCur - prodHighNext;\n        sLowSum +\u003d (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);\n        sHighPrev \u003d sHighCur;\n    }\n    double result \u003d sHighPrev + (prodLowSum + sLowSum);\n    if (Double.isNaN(result)) {\n        result \u003d 0;\n        for (int i \u003d 0; i \u003c len; ++i) {\n            result +\u003d a[i] * b[i];\n        }\n    }\n    return result;\n}",
      "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java",
      "functionStartLine": 580,
      "functionName": "linearCombination",
      "functionAnnotation": "",
      "functionDoc": "Compute a linear combination accurately.\nThis method computes the sum of the products\n\u003ccode\u003ea\u003csub\u003ei\u003c/sub\u003e b\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e to high accuracy.\nIt does so by using specific multiplication and addition algorithms to\npreserve accuracy and reduce cancellation effects.\n\u003cbr/\u003e\nIt is based on the 2005 paper\n\u003ca href\u003d\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi\u003d10.1.1.2.1547\"\u003e\nAccurate Sum and Dot Product\u003c/a\u003e by Takeshi Ogita, Siegfried M. Rump,\nand Shin\u0027ichi Oishi published in SIAM J. Sci. Comput.\n\n@param a Factors.\n@param b Factors.\n@return \u003ccode\u003e\u0026Sigma;\u003csub\u003ei\u003c/sub\u003e a\u003csub\u003ei\u003c/sub\u003e b\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/main/java/org/apache/commons/math/util/MathArrays.java",
        "newPath": "src/main/java/org/apache/commons/math3/util/MathArrays.java",
        "oldMethodName": "linearCombination",
        "newMethodName": "linearCombination"
      }
    },
    "dd4efa43349e74832b092ba33a92275b68cab9d3": {
      "type": "Ymultichange(Ymovefromfile,Yformatchange)",
      "commitMessage": "MATH-689\nMoved arrays utilities from \"MathUtils\" to \"MathArrays\".\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1182134 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/11/11, 3:55 PM",
      "commitName": "dd4efa43349e74832b092ba33a92275b68cab9d3",
      "commitAuthor": "Gilles Sadowski",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "MATH-689\nMoved arrays utilities from \"MathUtils\" to \"MathArrays\".\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1182134 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/11/11, 3:55 PM",
          "commitName": "dd4efa43349e74832b092ba33a92275b68cab9d3",
          "commitAuthor": "Gilles Sadowski",
          "commitDateOld": "10/10/11, 3:35 PM",
          "commitNameOld": "b59e97464fc8d910c06b90c06598d7176ce1924a",
          "commitAuthorOld": "Gilles Sadowski",
          "daysBetweenCommits": 1.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static double linearCombination(final double[] a, final double[] b) {\n    final int len \u003d a.length;\n    if (len !\u003d b.length) {\n        throw new DimensionMismatchException(len, b.length);\n    }\n    final double[] prodHigh \u003d new double[len];\n    double prodLowSum \u003d 0;\n    for (int i \u003d 0; i \u003c len; i++) {\n        final double ai \u003d a[i];\n        final double ca \u003d SPLIT_FACTOR * ai;\n        final double aHigh \u003d ca - (ca - ai);\n        final double aLow \u003d ai - aHigh;\n        final double bi \u003d b[i];\n        final double cb \u003d SPLIT_FACTOR * bi;\n        final double bHigh \u003d cb - (cb - bi);\n        final double bLow \u003d bi - bHigh;\n        prodHigh[i] \u003d ai * bi;\n        final double prodLow \u003d aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);\n        prodLowSum +\u003d prodLow;\n    }\n    final double prodHighCur \u003d prodHigh[0];\n    double prodHighNext \u003d prodHigh[1];\n    double sHighPrev \u003d prodHighCur + prodHighNext;\n    double sPrime \u003d sHighPrev - prodHighNext;\n    double sLowSum \u003d (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);\n    final int lenMinusOne \u003d len - 1;\n    for (int i \u003d 1; i \u003c lenMinusOne; i++) {\n        prodHighNext \u003d prodHigh[i + 1];\n        final double sHighCur \u003d sHighPrev + prodHighNext;\n        sPrime \u003d sHighCur - prodHighNext;\n        sLowSum +\u003d (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);\n        sHighPrev \u003d sHighCur;\n    }\n    double result \u003d sHighPrev + (prodLowSum + sLowSum);\n    if (Double.isNaN(result)) {\n        result \u003d 0;\n        for (int i \u003d 0; i \u003c len; ++i) {\n            result +\u003d a[i] * b[i];\n        }\n    }\n    return result;\n}",
          "path": "src/main/java/org/apache/commons/math/util/MathArrays.java",
          "functionStartLine": 576,
          "functionName": "linearCombination",
          "functionAnnotation": "",
          "functionDoc": "Compute a linear combination accurately.\nThis method computes the sum of the products\n\u003ccode\u003ea\u003csub\u003ei\u003c/sub\u003e b\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e to high accuracy.\nIt does so by using specific multiplication and addition algorithms to\npreserve accuracy and reduce cancellation effects.\n\u003cbr/\u003e\nIt is based on the 2005 paper\n\u003ca href\u003d\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi\u003d10.1.1.2.1547\"\u003e\nAccurate Sum and Dot Product\u003c/a\u003e by Takeshi Ogita, Siegfried M. Rump,\nand Shin\u0027ichi Oishi published in SIAM J. Sci. Comput.\n\n@param a Factors.\n@param b Factors.\n@return \u003ccode\u003e\u0026Sigma;\u003csub\u003ei\u003c/sub\u003e a\u003csub\u003ei\u003c/sub\u003e b\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e.\n",
          "diff": "",
          "extendedDetails": {
            "oldPath": "src/main/java/org/apache/commons/math/util/MathUtils.java",
            "newPath": "src/main/java/org/apache/commons/math/util/MathArrays.java",
            "oldMethodName": "linearCombination",
            "newMethodName": "linearCombination"
          }
        },
        {
          "type": "Yformatchange",
          "commitMessage": "MATH-689\nMoved arrays utilities from \"MathUtils\" to \"MathArrays\".\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1182134 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/11/11, 3:55 PM",
          "commitName": "dd4efa43349e74832b092ba33a92275b68cab9d3",
          "commitAuthor": "Gilles Sadowski",
          "commitDateOld": "10/10/11, 3:35 PM",
          "commitNameOld": "b59e97464fc8d910c06b90c06598d7176ce1924a",
          "commitAuthorOld": "Gilles Sadowski",
          "daysBetweenCommits": 1.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static double linearCombination(final double[] a, final double[] b) {\n    final int len \u003d a.length;\n    if (len !\u003d b.length) {\n        throw new DimensionMismatchException(len, b.length);\n    }\n    final double[] prodHigh \u003d new double[len];\n    double prodLowSum \u003d 0;\n    for (int i \u003d 0; i \u003c len; i++) {\n        final double ai \u003d a[i];\n        final double ca \u003d SPLIT_FACTOR * ai;\n        final double aHigh \u003d ca - (ca - ai);\n        final double aLow \u003d ai - aHigh;\n        final double bi \u003d b[i];\n        final double cb \u003d SPLIT_FACTOR * bi;\n        final double bHigh \u003d cb - (cb - bi);\n        final double bLow \u003d bi - bHigh;\n        prodHigh[i] \u003d ai * bi;\n        final double prodLow \u003d aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);\n        prodLowSum +\u003d prodLow;\n    }\n    final double prodHighCur \u003d prodHigh[0];\n    double prodHighNext \u003d prodHigh[1];\n    double sHighPrev \u003d prodHighCur + prodHighNext;\n    double sPrime \u003d sHighPrev - prodHighNext;\n    double sLowSum \u003d (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);\n    final int lenMinusOne \u003d len - 1;\n    for (int i \u003d 1; i \u003c lenMinusOne; i++) {\n        prodHighNext \u003d prodHigh[i + 1];\n        final double sHighCur \u003d sHighPrev + prodHighNext;\n        sPrime \u003d sHighCur - prodHighNext;\n        sLowSum +\u003d (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);\n        sHighPrev \u003d sHighCur;\n    }\n    double result \u003d sHighPrev + (prodLowSum + sLowSum);\n    if (Double.isNaN(result)) {\n        result \u003d 0;\n        for (int i \u003d 0; i \u003c len; ++i) {\n            result +\u003d a[i] * b[i];\n        }\n    }\n    return result;\n}",
          "path": "src/main/java/org/apache/commons/math/util/MathArrays.java",
          "functionStartLine": 576,
          "functionName": "linearCombination",
          "functionAnnotation": "",
          "functionDoc": "Compute a linear combination accurately.\nThis method computes the sum of the products\n\u003ccode\u003ea\u003csub\u003ei\u003c/sub\u003e b\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e to high accuracy.\nIt does so by using specific multiplication and addition algorithms to\npreserve accuracy and reduce cancellation effects.\n\u003cbr/\u003e\nIt is based on the 2005 paper\n\u003ca href\u003d\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi\u003d10.1.1.2.1547\"\u003e\nAccurate Sum and Dot Product\u003c/a\u003e by Takeshi Ogita, Siegfried M. Rump,\nand Shin\u0027ichi Oishi published in SIAM J. Sci. Comput.\n\n@param a Factors.\n@param b Factors.\n@return \u003ccode\u003e\u0026Sigma;\u003csub\u003ei\u003c/sub\u003e a\u003csub\u003ei\u003c/sub\u003e b\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e.\n",
          "diff": "",
          "extendedDetails": {}
        }
      ]
    },
    "d4f113c5573262a1995e05d65a3b0a0da4d434af": {
      "type": "Ybodychange",
      "commitMessage": "Fixed handling of Infinite and NaN coefficients in linearCombination\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1157994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/15/11, 1:31 PM",
      "commitName": "d4f113c5573262a1995e05d65a3b0a0da4d434af",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "8/6/11, 4:02 AM",
      "commitNameOld": "8afbbb7af8f4e174419afa42cee2f9e5a055b769",
      "commitAuthorOld": "Gilles Sadowski",
      "daysBetweenCommits": 9.4,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "actualSource": "public static double linearCombination(final double[] a, final double[] b) {\n    final int len \u003d a.length;\n    if (len !\u003d b.length) {\n        throw new DimensionMismatchException(len, b.length);\n    }\n    final double[] prodHigh \u003d new double[len];\n    double prodLowSum \u003d 0;\n    for (int i \u003d 0; i \u003c len; i++) {\n        final double ai \u003d a[i];\n        final double ca \u003d SPLIT_FACTOR * ai;\n        final double aHigh \u003d ca - (ca - ai);\n        final double aLow \u003d ai - aHigh;\n        final double bi \u003d b[i];\n        final double cb \u003d SPLIT_FACTOR * bi;\n        final double bHigh \u003d cb - (cb - bi);\n        final double bLow \u003d bi - bHigh;\n        prodHigh[i] \u003d ai * bi;\n        final double prodLow \u003d aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);\n        prodLowSum +\u003d prodLow;\n    }\n    final double prodHighCur \u003d prodHigh[0];\n    double prodHighNext \u003d prodHigh[1];\n    double sHighPrev \u003d prodHighCur + prodHighNext;\n    double sPrime \u003d sHighPrev - prodHighNext;\n    double sLowSum \u003d (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);\n    final int lenMinusOne \u003d len - 1;\n    for (int i \u003d 1; i \u003c lenMinusOne; i++) {\n        prodHighNext \u003d prodHigh[i + 1];\n        final double sHighCur \u003d sHighPrev + prodHighNext;\n        sPrime \u003d sHighCur - prodHighNext;\n        sLowSum +\u003d (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);\n        sHighPrev \u003d sHighCur;\n    }\n    double result \u003d sHighPrev + (prodLowSum + sLowSum);\n    if (Double.isNaN(result)) {\n        result \u003d 0;\n        for (int i \u003d 0; i \u003c len; ++i) {\n            result +\u003d a[i] * b[i];\n        }\n    }\n    return result;\n}",
      "path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
      "functionStartLine": 2651,
      "functionName": "linearCombination",
      "functionAnnotation": "",
      "functionDoc": "Compute a linear combination accurately.\nThis method computes the sum of the products\n\u003ccode\u003ea\u003csub\u003ei\u003c/sub\u003e b\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e to high accuracy.\nIt does so by using specific multiplication and addition algorithms to\npreserve accuracy and reduce cancellation effects.\n\u003cbr/\u003e\nIt is based on the 2005 paper\n\u003ca href\u003d\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi\u003d10.1.1.2.1547\"\u003e\nAccurate Sum and Dot Product\u003c/a\u003e by Takeshi Ogita, Siegfried M. Rump,\nand Shin\u0027ichi Oishi published in SIAM J. Sci. Comput.\n\n@param a Factors.\n@param b Factors.\n@return \u003ccode\u003e\u0026Sigma;\u003csub\u003ei\u003c/sub\u003e a\u003csub\u003ei\u003c/sub\u003e b\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e.\n",
      "diff": "@@ -1,35 +1,42 @@\n public static double linearCombination(final double[] a, final double[] b) {\n     final int len \u003d a.length;\n     if (len !\u003d b.length) {\n         throw new DimensionMismatchException(len, b.length);\n     }\n     final double[] prodHigh \u003d new double[len];\n     double prodLowSum \u003d 0;\n     for (int i \u003d 0; i \u003c len; i++) {\n         final double ai \u003d a[i];\n         final double ca \u003d SPLIT_FACTOR * ai;\n         final double aHigh \u003d ca - (ca - ai);\n         final double aLow \u003d ai - aHigh;\n         final double bi \u003d b[i];\n         final double cb \u003d SPLIT_FACTOR * bi;\n         final double bHigh \u003d cb - (cb - bi);\n         final double bLow \u003d bi - bHigh;\n         prodHigh[i] \u003d ai * bi;\n         final double prodLow \u003d aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);\n         prodLowSum +\u003d prodLow;\n     }\n     final double prodHighCur \u003d prodHigh[0];\n     double prodHighNext \u003d prodHigh[1];\n     double sHighPrev \u003d prodHighCur + prodHighNext;\n     double sPrime \u003d sHighPrev - prodHighNext;\n     double sLowSum \u003d (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);\n     final int lenMinusOne \u003d len - 1;\n     for (int i \u003d 1; i \u003c lenMinusOne; i++) {\n         prodHighNext \u003d prodHigh[i + 1];\n         final double sHighCur \u003d sHighPrev + prodHighNext;\n         sPrime \u003d sHighCur - prodHighNext;\n         sLowSum +\u003d (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);\n         sHighPrev \u003d sHighCur;\n     }\n-    return sHighPrev + (prodLowSum + sLowSum);\n+    double result \u003d sHighPrev + (prodLowSum + sLowSum);\n+    if (Double.isNaN(result)) {\n+        result \u003d 0;\n+        for (int i \u003d 0; i \u003c len; ++i) {\n+            result +\u003d a[i] * b[i];\n+        }\n+    }\n+    return result;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "8afbbb7af8f4e174419afa42cee2f9e5a055b769": {
      "type": "Ybodychange",
      "commitMessage": "More efficient implementation: Removed unnecessary arrays.\nAdded another test.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1154485 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/6/11, 4:02 AM",
      "commitName": "8afbbb7af8f4e174419afa42cee2f9e5a055b769",
      "commitAuthor": "Gilles Sadowski",
      "commitDateOld": "8/5/11, 5:13 PM",
      "commitNameOld": "b66083340fd113292568df2edadd5bff6a49ebd5",
      "commitAuthorOld": "Gilles Sadowski",
      "daysBetweenCommits": 0.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static double linearCombination(final double[] a, final double[] b) {\n    final int len \u003d a.length;\n    if (len !\u003d b.length) {\n        throw new DimensionMismatchException(len, b.length);\n    }\n    final double[] prodHigh \u003d new double[len];\n    double prodLowSum \u003d 0;\n    for (int i \u003d 0; i \u003c len; i++) {\n        final double ai \u003d a[i];\n        final double ca \u003d SPLIT_FACTOR * ai;\n        final double aHigh \u003d ca - (ca - ai);\n        final double aLow \u003d ai - aHigh;\n        final double bi \u003d b[i];\n        final double cb \u003d SPLIT_FACTOR * bi;\n        final double bHigh \u003d cb - (cb - bi);\n        final double bLow \u003d bi - bHigh;\n        prodHigh[i] \u003d ai * bi;\n        final double prodLow \u003d aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);\n        prodLowSum +\u003d prodLow;\n    }\n    final double prodHighCur \u003d prodHigh[0];\n    double prodHighNext \u003d prodHigh[1];\n    double sHighPrev \u003d prodHighCur + prodHighNext;\n    double sPrime \u003d sHighPrev - prodHighNext;\n    double sLowSum \u003d (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);\n    final int lenMinusOne \u003d len - 1;\n    for (int i \u003d 1; i \u003c lenMinusOne; i++) {\n        prodHighNext \u003d prodHigh[i + 1];\n        final double sHighCur \u003d sHighPrev + prodHighNext;\n        sPrime \u003d sHighCur - prodHighNext;\n        sLowSum +\u003d (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);\n        sHighPrev \u003d sHighCur;\n    }\n    return sHighPrev + (prodLowSum + sLowSum);\n}",
      "path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
      "functionStartLine": 2627,
      "functionName": "linearCombination",
      "functionAnnotation": "",
      "functionDoc": "Compute a linear combination accurately.\nThis method computes the sum of the products\n\u003ccode\u003ea\u003csub\u003ei\u003c/sub\u003e b\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e to high accuracy.\nIt does so by using specific multiplication and addition algorithms to\npreserve accuracy and reduce cancellation effects.\n\u003cbr/\u003e\nIt is based on the 2005 paper\n\u003ca href\u003d\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi\u003d10.1.1.2.1547\"\u003e\nAccurate Sum and Dot Product\u003c/a\u003e by Takeshi Ogita, Siegfried M. Rump,\nand Shin\u0027ichi Oishi published in SIAM J. Sci. Comput.\n\n@param a Factors.\n@param b Factors.\n@return \u003ccode\u003e\u0026Sigma;\u003csub\u003ei\u003c/sub\u003e a\u003csub\u003ei\u003c/sub\u003e b\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e.\n",
      "diff": "@@ -1,34 +1,35 @@\n public static double linearCombination(final double[] a, final double[] b) {\n     final int len \u003d a.length;\n     if (len !\u003d b.length) {\n         throw new DimensionMismatchException(len, b.length);\n     }\n     final double[] prodHigh \u003d new double[len];\n     double prodLowSum \u003d 0;\n     for (int i \u003d 0; i \u003c len; i++) {\n         final double ai \u003d a[i];\n         final double ca \u003d SPLIT_FACTOR * ai;\n         final double aHigh \u003d ca - (ca - ai);\n         final double aLow \u003d ai - aHigh;\n         final double bi \u003d b[i];\n         final double cb \u003d SPLIT_FACTOR * bi;\n         final double bHigh \u003d cb - (cb - bi);\n         final double bLow \u003d bi - bHigh;\n         prodHigh[i] \u003d ai * bi;\n         final double prodLow \u003d aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);\n         prodLowSum +\u003d prodLow;\n     }\n+    final double prodHighCur \u003d prodHigh[0];\n+    double prodHighNext \u003d prodHigh[1];\n+    double sHighPrev \u003d prodHighCur + prodHighNext;\n+    double sPrime \u003d sHighPrev - prodHighNext;\n+    double sLowSum \u003d (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);\n     final int lenMinusOne \u003d len - 1;\n-    final double[] sHigh \u003d new double[lenMinusOne];\n-    sHigh[0] \u003d prodHigh[0] + prodHigh[1];\n-    double sPrime \u003d sHigh[0] - prodHigh[1];\n-    double sLowSum \u003d (prodHigh[1] - (sHigh[0] - sPrime)) + (prodHigh[0] - sPrime);\n     for (int i \u003d 1; i \u003c lenMinusOne; i++) {\n-        final int prev \u003d i - 1;\n-        final int next \u003d i + 1;\n-        sHigh[i] \u003d sHigh[prev] + prodHigh[next];\n-        sPrime \u003d sHigh[i] - prodHigh[next];\n-        sLowSum +\u003d (prodHigh[next] - (sHigh[i] - sPrime)) + (sHigh[prev] - sPrime);\n+        prodHighNext \u003d prodHigh[i + 1];\n+        final double sHighCur \u003d sHighPrev + prodHighNext;\n+        sPrime \u003d sHighCur - prodHighNext;\n+        sLowSum +\u003d (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);\n+        sHighPrev \u003d sHighCur;\n     }\n-    return sHigh[lenMinusOne - 1] + (prodLowSum + sLowSum);\n+    return sHighPrev + (prodLowSum + sLowSum);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b66083340fd113292568df2edadd5bff6a49ebd5": {
      "type": "Yintroduced",
      "commitMessage": "Array version of \"linearCombination\".\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1154416 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/5/11, 5:13 PM",
      "commitName": "b66083340fd113292568df2edadd5bff6a49ebd5",
      "commitAuthor": "Gilles Sadowski",
      "diff": "@@ -0,0 +1,34 @@\n+public static double linearCombination(final double[] a, final double[] b) {\n+    final int len \u003d a.length;\n+    if (len !\u003d b.length) {\n+        throw new DimensionMismatchException(len, b.length);\n+    }\n+    final double[] prodHigh \u003d new double[len];\n+    double prodLowSum \u003d 0;\n+    for (int i \u003d 0; i \u003c len; i++) {\n+        final double ai \u003d a[i];\n+        final double ca \u003d SPLIT_FACTOR * ai;\n+        final double aHigh \u003d ca - (ca - ai);\n+        final double aLow \u003d ai - aHigh;\n+        final double bi \u003d b[i];\n+        final double cb \u003d SPLIT_FACTOR * bi;\n+        final double bHigh \u003d cb - (cb - bi);\n+        final double bLow \u003d bi - bHigh;\n+        prodHigh[i] \u003d ai * bi;\n+        final double prodLow \u003d aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);\n+        prodLowSum +\u003d prodLow;\n+    }\n+    final int lenMinusOne \u003d len - 1;\n+    final double[] sHigh \u003d new double[lenMinusOne];\n+    sHigh[0] \u003d prodHigh[0] + prodHigh[1];\n+    double sPrime \u003d sHigh[0] - prodHigh[1];\n+    double sLowSum \u003d (prodHigh[1] - (sHigh[0] - sPrime)) + (prodHigh[0] - sPrime);\n+    for (int i \u003d 1; i \u003c lenMinusOne; i++) {\n+        final int prev \u003d i - 1;\n+        final int next \u003d i + 1;\n+        sHigh[i] \u003d sHigh[prev] + prodHigh[next];\n+        sPrime \u003d sHigh[i] - prodHigh[next];\n+        sLowSum +\u003d (prodHigh[next] - (sHigh[i] - sPrime)) + (sHigh[prev] - sPrime);\n+    }\n+    return sHigh[lenMinusOne - 1] + (prodLowSum + sLowSum);\n+}\n\\ No newline at end of file\n",
      "actualSource": "public static double linearCombination(final double[] a, final double[] b) {\n    final int len \u003d a.length;\n    if (len !\u003d b.length) {\n        throw new DimensionMismatchException(len, b.length);\n    }\n    final double[] prodHigh \u003d new double[len];\n    double prodLowSum \u003d 0;\n    for (int i \u003d 0; i \u003c len; i++) {\n        final double ai \u003d a[i];\n        final double ca \u003d SPLIT_FACTOR * ai;\n        final double aHigh \u003d ca - (ca - ai);\n        final double aLow \u003d ai - aHigh;\n        final double bi \u003d b[i];\n        final double cb \u003d SPLIT_FACTOR * bi;\n        final double bHigh \u003d cb - (cb - bi);\n        final double bLow \u003d bi - bHigh;\n        prodHigh[i] \u003d ai * bi;\n        final double prodLow \u003d aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);\n        prodLowSum +\u003d prodLow;\n    }\n    final int lenMinusOne \u003d len - 1;\n    final double[] sHigh \u003d new double[lenMinusOne];\n    sHigh[0] \u003d prodHigh[0] + prodHigh[1];\n    double sPrime \u003d sHigh[0] - prodHigh[1];\n    double sLowSum \u003d (prodHigh[1] - (sHigh[0] - sPrime)) + (prodHigh[0] - sPrime);\n    for (int i \u003d 1; i \u003c lenMinusOne; i++) {\n        final int prev \u003d i - 1;\n        final int next \u003d i + 1;\n        sHigh[i] \u003d sHigh[prev] + prodHigh[next];\n        sPrime \u003d sHigh[i] - prodHigh[next];\n        sLowSum +\u003d (prodHigh[next] - (sHigh[i] - sPrime)) + (sHigh[prev] - sPrime);\n    }\n    return sHigh[lenMinusOne - 1] + (prodLowSum + sLowSum);\n}",
      "path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
      "functionStartLine": 2627,
      "functionName": "linearCombination",
      "functionAnnotation": "",
      "functionDoc": "Compute a linear combination accurately.\nThis method computes the sum of the products\n\u003ccode\u003ea\u003csub\u003ei\u003c/sub\u003e b\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e to high accuracy.\nIt does so by using specific multiplication and addition algorithms to\npreserve accuracy and reduce cancellation effects.\n\u003cbr/\u003e\nIt is based on the 2005 paper\n\u003ca href\u003d\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi\u003d10.1.1.2.1547\"\u003e\nAccurate Sum and Dot Product\u003c/a\u003e by Takeshi Ogita, Siegfried M. Rump,\nand Shin\u0027ichi Oishi published in SIAM J. Sci. Comput.\n\n@param a Factors.\n@param b Factors.\n@return \u003ccode\u003e\u0026Sigma;\u003csub\u003ei\u003c/sub\u003e a\u003csub\u003ei\u003c/sub\u003e b\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e.\n"
    }
  }
}