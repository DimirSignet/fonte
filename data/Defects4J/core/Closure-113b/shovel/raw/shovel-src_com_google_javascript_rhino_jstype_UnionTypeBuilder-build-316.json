{
  "origin": "codeshovel",
  "repositoryName": "Closure-113b",
  "repositoryPath": "/tmp/Closure-113b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "UnionTypeBuilder.java",
  "functionName": "build",
  "functionId": "build",
  "sourceFilePath": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
  "functionAnnotation": "",
  "functionDoc": "Creates a union.\n\n@return A UnionType if it has two or more alternates, the\n   only alternate if it has one and otherwise {@code NO_TYPE}.\n",
  "functionStartLine": 316,
  "functionEndLine": 324,
  "numCommitsSeen": 28,
  "timeTaken": 867,
  "changeHistory": [
    "1c75a5484b515bd593295fbf0c8491e2dd1f1c45",
    "e829dafb9b3365bda6b6bb80f5fa97783752d143",
    "7eaa0d8eca2549742649af34671eaf3da83b5c08",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "1c75a5484b515bd593295fbf0c8491e2dd1f1c45": "Ybodychange",
    "e829dafb9b3365bda6b6bb80f5fa97783752d143": "Ybodychange",
    "7eaa0d8eca2549742649af34671eaf3da83b5c08": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1c75a5484b515bd593295fbf0c8491e2dd1f1c45": {
      "type": "Ybodychange",
      "commitMessage": "\nremove all uses of Sets of types.\nequality can change over time, so this is not safe.\nThis means we need to be much more explicit in how\nwe collapse type duplicates in unions and in type tightening\n\nR\u003djohnlenz\nDELTA\u003d319  (210 added, 52 deleted, 57 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d121\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@623 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/13/10, 8:10 AM",
      "commitName": "1c75a5484b515bd593295fbf0c8491e2dd1f1c45",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "6/18/10, 5:18 PM",
      "commitNameOld": "e829dafb9b3365bda6b6bb80f5fa97783752d143",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 177.66,
      "commitsBetweenForRepo": 366,
      "commitsBetweenForFile": 1,
      "actualSource": "JSType build() {\n    if (result \u003d\u003d null) {\n        result \u003d reduceAlternatesWithoutUnion();\n        if (result \u003d\u003d null) {\n            result \u003d new UnionType(registry, getAlternateListCopy());\n        }\n    }\n    return result;\n}",
      "path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
      "functionStartLine": 185,
      "functionName": "build",
      "functionAnnotation": "",
      "functionDoc": "Creates a union.\n\n@return A UnionType if it has two or more alternates, the\n   only alternate if it has one and otherwise {@code NO_TYPE}.\n",
      "diff": "@@ -1,27 +1,9 @@\n JSType build() {\n     if (result \u003d\u003d null) {\n-        if (isAllType) {\n-            result \u003d registry.getNativeType(ALL_TYPE);\n-        } else if (isNativeUnknownType) {\n-            if (areAllUnknownsChecked) {\n-                result \u003d registry.getNativeType(CHECKED_UNKNOWN_TYPE);\n-            } else {\n-                result \u003d registry.getNativeType(UNKNOWN_TYPE);\n-            }\n-        } else {\n-            int size \u003d alternates.size();\n-            if (size \u003e MAX_UNION_SIZE) {\n-                result \u003d registry.getNativeType(UNKNOWN_TYPE);\n-            } else {\n-                if (size \u003e 1) {\n-                    result \u003d new UnionType(registry, getAlternateListCopy());\n-                } else if (size \u003d\u003d 1) {\n-                    result \u003d alternates.iterator().next();\n-                } else {\n-                    result \u003d registry.getNativeType(NO_TYPE);\n-                }\n-            }\n+        result \u003d reduceAlternatesWithoutUnion();\n+        if (result \u003d\u003d null) {\n+            result \u003d new UnionType(registry, getAlternateListCopy());\n         }\n     }\n     return result;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e829dafb9b3365bda6b6bb80f5fa97783752d143": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/06/17 by nicksantos\n\n        don\u0027t use Sets to build union types.\n\n        R\u003djohnlenz\n        DELTA\u003d76  (52 added, 6 deleted, 18 changed)\n\nChange on 2010/06/17 by nicksantos\n\n        fix a couple bugs in goog.scope processing\n\n        R\u003drobbyw\n        DELTA\u003d54  (42 added, 11 deleted, 1 changed)\n\n\nChange on 2010/06/17 by acleung\n\n        Disables function argument check with @notypecheck is on for the whole file.\n\n        R\u003djohnlenz\n        DELTA\u003d8  (5 added, 1 deleted, 2 changed)\n\nChange on 2010/06/17 by dcc\n\n        Fix NPE in ExportExternsPass with --check_types\u003dfalse.\n\n        R\u003dacleung\n        DELTA\u003d72  (66 added, 4 deleted, 2 changed)\n\nChange on 2010/06/17 by johnlenz\n\n        Change stub method parameters to allow sanity checks to pass with\n        CrossModuleMethodMotion.\n\n        R\u003dnicksantos\n        DELTA\u003d7  (3 added, 0 deleted, 4 changed)\n\nChange on 2010/06/18 by johnlenz\n\n        Modify AliasKeywords so passes the sanity checks: don\u0027t create coding\n        convention constants without annotation them so that the tests pass\n        when the sanity checks are on.\n\n        R\u003dnicksantos\n        DELTA\u003d18  (5 added, 0 deleted, 13 changed)\n\nChange on 2010/06/18 by johnlenz\n\n        Fix source maps when run with sanity checks.\n\n        R\u003dnicksantos\n        DELTA\u003d10  (7 added, 0 deleted, 3 changed)\n\nChange on 2010/06/18 by johnlenz\n\n        Changes to PrepareAst to make it valid to run during SanityChecks.\n\n        R\u003dnicksantos\n        DELTA\u003d18  (5 added, 0 deleted, 13 changed)\n\nChange on 2010/06/18 by nicksantos\n\n        fix constant annotations in CollapseProperties.\n\n        R\u003djohnlenz\n        DELTA\u003d61  (49 added, 1 deleted, 11 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d30002\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@246 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/18/10, 5:18 PM",
      "commitName": "e829dafb9b3365bda6b6bb80f5fa97783752d143",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/7/10, 11:34 AM",
      "commitNameOld": "7eaa0d8eca2549742649af34671eaf3da83b5c08",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 72.24,
      "commitsBetweenForRepo": 58,
      "commitsBetweenForFile": 1,
      "actualSource": "JSType build() {\n    if (result \u003d\u003d null) {\n        if (isAllType) {\n            result \u003d registry.getNativeType(ALL_TYPE);\n        } else if (isNativeUnknownType) {\n            if (areAllUnknownsChecked) {\n                result \u003d registry.getNativeType(CHECKED_UNKNOWN_TYPE);\n            } else {\n                result \u003d registry.getNativeType(UNKNOWN_TYPE);\n            }\n        } else {\n            int size \u003d alternates.size();\n            if (size \u003e MAX_UNION_SIZE) {\n                result \u003d registry.getNativeType(UNKNOWN_TYPE);\n            } else {\n                if (size \u003e 1) {\n                    result \u003d new UnionType(registry, getAlternateListCopy());\n                } else if (size \u003d\u003d 1) {\n                    result \u003d alternates.iterator().next();\n                } else {\n                    result \u003d registry.getNativeType(NO_TYPE);\n                }\n            }\n        }\n    }\n    return result;\n}",
      "path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
      "functionStartLine": 149,
      "functionName": "build",
      "functionAnnotation": "",
      "functionDoc": "Creates a union.\n\n@return A UnionType if it has two or more alternates, the\n   only alternate if it has one and otherwise {@code NO_TYPE}.\n",
      "diff": "@@ -1,28 +1,27 @@\n JSType build() {\n     if (result \u003d\u003d null) {\n         if (isAllType) {\n             result \u003d registry.getNativeType(ALL_TYPE);\n         } else if (isNativeUnknownType) {\n             if (areAllUnknownsChecked) {\n                 result \u003d registry.getNativeType(CHECKED_UNKNOWN_TYPE);\n             } else {\n                 result \u003d registry.getNativeType(UNKNOWN_TYPE);\n             }\n         } else {\n-            Set\u003cJSType\u003e alternateSet \u003d ImmutableSet.copyOf(alternates);\n-            int size \u003d alternateSet.size();\n+            int size \u003d alternates.size();\n             if (size \u003e MAX_UNION_SIZE) {\n                 result \u003d registry.getNativeType(UNKNOWN_TYPE);\n             } else {\n                 if (size \u003e 1) {\n-                    result \u003d new UnionType(registry, alternateSet);\n+                    result \u003d new UnionType(registry, getAlternateListCopy());\n                 } else if (size \u003d\u003d 1) {\n                     result \u003d alternates.iterator().next();\n                 } else {\n                     result \u003d registry.getNativeType(NO_TYPE);\n                 }\n             }\n         }\n     }\n     return result;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7eaa0d8eca2549742649af34671eaf3da83b5c08": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/04/06 by john\n\n        Update RemoveConstantExpressions to handle removing expressions whose\n        roots are calls to functions without side-effects.\n\n        R\u003dantonio\n        DELTA\u003d19  (18 added, 0 deleted, 1 changed)\n\nChange on 2010/04/06 by john\n\n        Cleanup NodeUtil self references.\n\n        R\u003drobert\n        DELTA\u003d12  (0 added, 0 deleted, 12 changed)\n\nChange on 2010/04/07 by john\n\n        Make things easier for shell escaping, accept both single and double\n        quotes for strings in --define flags.\n        Fixes issue 139.\n\n        R\u003drobert\n        DELTA\u003d18  (14 added, 0 deleted, 4 changed)\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dwdwbvk\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@173 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/7/10, 11:34 AM",
      "commitName": "7eaa0d8eca2549742649af34671eaf3da83b5c08",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "3/11/10, 9:31 PM",
      "commitNameOld": "7bfdbd9164601af44d17edd51be829fde2cc51aa",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 26.54,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "actualSource": "JSType build() {\n    if (result \u003d\u003d null) {\n        if (isAllType) {\n            result \u003d registry.getNativeType(ALL_TYPE);\n        } else if (isNativeUnknownType) {\n            if (areAllUnknownsChecked) {\n                result \u003d registry.getNativeType(CHECKED_UNKNOWN_TYPE);\n            } else {\n                result \u003d registry.getNativeType(UNKNOWN_TYPE);\n            }\n        } else {\n            Set\u003cJSType\u003e alternateSet \u003d ImmutableSet.copyOf(alternates);\n            int size \u003d alternateSet.size();\n            if (size \u003e MAX_UNION_SIZE) {\n                result \u003d registry.getNativeType(UNKNOWN_TYPE);\n            } else {\n                if (size \u003e 1) {\n                    result \u003d new UnionType(registry, alternateSet);\n                } else if (size \u003d\u003d 1) {\n                    result \u003d alternates.iterator().next();\n                } else {\n                    result \u003d registry.getNativeType(NO_TYPE);\n                }\n            }\n        }\n    }\n    return result;\n}",
      "path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
      "functionStartLine": 136,
      "functionName": "build",
      "functionAnnotation": "",
      "functionDoc": "Creates a union.\n\n@return A UnionType if it has two or more alternates, the\n   only alternate if it has one and otherwise {@code NO_TYPE}.\n",
      "diff": "@@ -1,28 +1,28 @@\n JSType build() {\n     if (result \u003d\u003d null) {\n         if (isAllType) {\n             result \u003d registry.getNativeType(ALL_TYPE);\n         } else if (isNativeUnknownType) {\n             if (areAllUnknownsChecked) {\n                 result \u003d registry.getNativeType(CHECKED_UNKNOWN_TYPE);\n             } else {\n                 result \u003d registry.getNativeType(UNKNOWN_TYPE);\n             }\n         } else {\n-            Set\u003cJSType\u003e alternateSet \u003d Sets.newUnmodifiableHashSet(alternates);\n+            Set\u003cJSType\u003e alternateSet \u003d ImmutableSet.copyOf(alternates);\n             int size \u003d alternateSet.size();\n             if (size \u003e MAX_UNION_SIZE) {\n                 result \u003d registry.getNativeType(UNKNOWN_TYPE);\n             } else {\n                 if (size \u003e 1) {\n                     result \u003d new UnionType(registry, alternateSet);\n                 } else if (size \u003d\u003d 1) {\n                     result \u003d alternates.iterator().next();\n                 } else {\n                     result \u003d registry.getNativeType(NO_TYPE);\n                 }\n             }\n         }\n     }\n     return result;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,28 @@\n+JSType build() {\n+    if (result \u003d\u003d null) {\n+        if (isAllType) {\n+            result \u003d registry.getNativeType(ALL_TYPE);\n+        } else if (isNativeUnknownType) {\n+            if (areAllUnknownsChecked) {\n+                result \u003d registry.getNativeType(CHECKED_UNKNOWN_TYPE);\n+            } else {\n+                result \u003d registry.getNativeType(UNKNOWN_TYPE);\n+            }\n+        } else {\n+            Set\u003cJSType\u003e alternateSet \u003d Sets.newUnmodifiableHashSet(alternates);\n+            int size \u003d alternateSet.size();\n+            if (size \u003e MAX_UNION_SIZE) {\n+                result \u003d registry.getNativeType(UNKNOWN_TYPE);\n+            } else {\n+                if (size \u003e 1) {\n+                    result \u003d new UnionType(registry, alternateSet);\n+                } else if (size \u003d\u003d 1) {\n+                    result \u003d alternates.iterator().next();\n+                } else {\n+                    result \u003d registry.getNativeType(NO_TYPE);\n+                }\n+            }\n+        }\n+    }\n+    return result;\n+}\n\\ No newline at end of file\n",
      "actualSource": "JSType build() {\n    if (result \u003d\u003d null) {\n        if (isAllType) {\n            result \u003d registry.getNativeType(ALL_TYPE);\n        } else if (isNativeUnknownType) {\n            if (areAllUnknownsChecked) {\n                result \u003d registry.getNativeType(CHECKED_UNKNOWN_TYPE);\n            } else {\n                result \u003d registry.getNativeType(UNKNOWN_TYPE);\n            }\n        } else {\n            Set\u003cJSType\u003e alternateSet \u003d Sets.newUnmodifiableHashSet(alternates);\n            int size \u003d alternateSet.size();\n            if (size \u003e MAX_UNION_SIZE) {\n                result \u003d registry.getNativeType(UNKNOWN_TYPE);\n            } else {\n                if (size \u003e 1) {\n                    result \u003d new UnionType(registry, alternateSet);\n                } else if (size \u003d\u003d 1) {\n                    result \u003d alternates.iterator().next();\n                } else {\n                    result \u003d registry.getNativeType(NO_TYPE);\n                }\n            }\n        }\n    }\n    return result;\n}",
      "path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
      "functionStartLine": 136,
      "functionName": "build",
      "functionAnnotation": "",
      "functionDoc": "Creates a union.\n\n@return A UnionType if it has two or more alternates, the\n   only alternate if it has one and otherwise {@code NO_TYPE}.\n"
    }
  }
}