{
  "origin": "codeshovel",
  "repositoryName": "Closure-113b",
  "repositoryPath": "/tmp/Closure-113b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ProcessClosurePrimitives.java",
  "functionName": "maybeAddStringNodeToSymbolTable",
  "functionId": "maybeAddStringNodeToSymbolTable___n-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
  "functionAnnotation": "",
  "functionDoc": "The string in {@code n} is a reference name. Create a synthetic\nnode for it with all the proper source info, and add it to the symbol\ntable.\n",
  "functionStartLine": 1171,
  "functionEndLine": 1206,
  "numCommitsSeen": 62,
  "timeTaken": 3340,
  "changeHistory": [
    "f423b0e9d4b2c0f3f74b3850dd5a35fd89ebc8a5",
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
    "9a66dcbece400f60c7b2f71bf7b3125331cd4164"
  ],
  "changeHistoryShort": {
    "f423b0e9d4b2c0f3f74b3850dd5a35fd89ebc8a5": "Ybodychange",
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c": "Ybodychange",
    "9a66dcbece400f60c7b2f71bf7b3125331cd4164": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f423b0e9d4b2c0f3f74b3850dd5a35fd89ebc8a5": {
      "type": "Ybodychange",
      "commitMessage": "Remove lint warnings\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID\u003d44164469\n",
      "commitDate": "3/20/13, 9:48 AM",
      "commitName": "f423b0e9d4b2c0f3f74b3850dd5a35fd89ebc8a5",
      "commitAuthor": "Ben Lickly",
      "commitDateOld": "3/14/13, 1:18 PM",
      "commitNameOld": "cf8d2a915893d370e3f883c185dec7ef3b3015e8",
      "commitAuthorOld": "Ben Lickly",
      "daysBetweenCommits": 5.85,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "actualSource": "private void maybeAddStringNodeToSymbolTable(Node n) {\n    if (preprocessorSymbolTable \u003d\u003d null) {\n        return;\n    }\n    String name \u003d n.getString();\n    Node syntheticRef \u003d NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(), name, n, name);\n    final int forQuote \u003d 1;\n    final int forDot \u003d 1;\n    Node current \u003d null;\n    for (current \u003d syntheticRef; current.isGetProp(); current \u003d current.getFirstChild()) {\n        int fullLen \u003d current.getQualifiedName().length();\n        int namespaceLen \u003d current.getFirstChild().getQualifiedName().length();\n        current.setSourceEncodedPosition(n.getSourcePosition() + forQuote);\n        current.setLength(fullLen);\n        current.getLastChild().setSourceEncodedPosition(n.getSourcePosition() + namespaceLen + forQuote + forDot);\n        current.getLastChild().setLength(current.getLastChild().getString().length());\n    }\n    current.setSourceEncodedPosition(n.getSourcePosition() + forQuote);\n    current.setLength(current.getString().length());\n    maybeAddToSymbolTable(syntheticRef);\n}",
      "path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
      "functionStartLine": 1172,
      "functionName": "maybeAddStringNodeToSymbolTable",
      "functionAnnotation": "",
      "functionDoc": "The string in {@code n} is a reference name. Create a synthetic\nnode for it with all the proper source info, and add it to the symbol\ntable.\n",
      "diff": "@@ -1,21 +1,21 @@\n private void maybeAddStringNodeToSymbolTable(Node n) {\n     if (preprocessorSymbolTable \u003d\u003d null) {\n         return;\n     }\n     String name \u003d n.getString();\n     Node syntheticRef \u003d NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(), name, n, name);\n-    final int FOR_QUOTE \u003d 1;\n-    final int FOR_DOT \u003d 1;\n+    final int forQuote \u003d 1;\n+    final int forDot \u003d 1;\n     Node current \u003d null;\n     for (current \u003d syntheticRef; current.isGetProp(); current \u003d current.getFirstChild()) {\n         int fullLen \u003d current.getQualifiedName().length();\n         int namespaceLen \u003d current.getFirstChild().getQualifiedName().length();\n-        current.setSourceEncodedPosition(n.getSourcePosition() + FOR_QUOTE);\n+        current.setSourceEncodedPosition(n.getSourcePosition() + forQuote);\n         current.setLength(fullLen);\n-        current.getLastChild().setSourceEncodedPosition(n.getSourcePosition() + namespaceLen + FOR_QUOTE + FOR_DOT);\n+        current.getLastChild().setSourceEncodedPosition(n.getSourcePosition() + namespaceLen + forQuote + forDot);\n         current.getLastChild().setLength(current.getLastChild().getString().length());\n     }\n-    current.setSourceEncodedPosition(n.getSourcePosition() + FOR_QUOTE);\n+    current.setSourceEncodedPosition(n.getSourcePosition() + forQuote);\n     current.setLength(current.getString().length());\n     maybeAddToSymbolTable(syntheticRef);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c": {
      "type": "Ybodychange",
      "commitMessage": "\nReplace the bulk of the Node.getType() \u003d\u003d Token.XXX calls with\nNode.isXXX calls.\n\nR\u003dnicksantos\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3677\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1582 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/10/11, 8:36 AM",
      "commitName": "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/9/11, 1:51 PM",
      "commitNameOld": "3d80e1ed8fffbcb5f41b63f64726d9a4c76f209f",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 0.78,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "private void maybeAddStringNodeToSymbolTable(Node n) {\n    if (preprocessorSymbolTable \u003d\u003d null) {\n        return;\n    }\n    String name \u003d n.getString();\n    Node syntheticRef \u003d NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(), name, n, name);\n    final int FOR_QUOTE \u003d 1;\n    final int FOR_DOT \u003d 1;\n    Node current \u003d null;\n    for (current \u003d syntheticRef; current.isGetProp(); current \u003d current.getFirstChild()) {\n        int fullLen \u003d current.getQualifiedName().length();\n        int namespaceLen \u003d current.getFirstChild().getQualifiedName().length();\n        current.setSourceEncodedPosition(n.getSourcePosition() + FOR_QUOTE);\n        current.setLength(fullLen);\n        current.getLastChild().setSourceEncodedPosition(n.getSourcePosition() + namespaceLen + FOR_QUOTE + FOR_DOT);\n        current.getLastChild().setLength(current.getLastChild().getString().length());\n    }\n    current.setSourceEncodedPosition(n.getSourcePosition() + FOR_QUOTE);\n    current.setLength(current.getString().length());\n    maybeAddToSymbolTable(syntheticRef);\n}",
      "path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
      "functionStartLine": 1095,
      "functionName": "maybeAddStringNodeToSymbolTable",
      "functionAnnotation": "",
      "functionDoc": "The string in {@code n} is a reference name. Create a synthetic\nnode for it with all the proper source info, and add it to the symbol\ntable.\n",
      "diff": "@@ -1,21 +1,21 @@\n private void maybeAddStringNodeToSymbolTable(Node n) {\n     if (preprocessorSymbolTable \u003d\u003d null) {\n         return;\n     }\n     String name \u003d n.getString();\n     Node syntheticRef \u003d NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(), name, n, name);\n     final int FOR_QUOTE \u003d 1;\n     final int FOR_DOT \u003d 1;\n     Node current \u003d null;\n-    for (current \u003d syntheticRef; current.getType() \u003d\u003d Token.GETPROP; current \u003d current.getFirstChild()) {\n+    for (current \u003d syntheticRef; current.isGetProp(); current \u003d current.getFirstChild()) {\n         int fullLen \u003d current.getQualifiedName().length();\n         int namespaceLen \u003d current.getFirstChild().getQualifiedName().length();\n         current.setSourceEncodedPosition(n.getSourcePosition() + FOR_QUOTE);\n         current.setLength(fullLen);\n         current.getLastChild().setSourceEncodedPosition(n.getSourcePosition() + namespaceLen + FOR_QUOTE + FOR_DOT);\n         current.getLastChild().setLength(current.getLastChild().getString().length());\n     }\n     current.setSourceEncodedPosition(n.getSourcePosition() + FOR_QUOTE);\n     current.setLength(current.getString().length());\n     maybeAddToSymbolTable(syntheticRef);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9a66dcbece400f60c7b2f71bf7b3125331cd4164": {
      "type": "Yintroduced",
      "commitMessage": "\nAdd symbol table references for closure primitives\n\nR\u003dacleung\nDELTA\u003d136  (106 added, 8 deleted, 22 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2928\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1337 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/8/11, 1:44 PM",
      "commitName": "9a66dcbece400f60c7b2f71bf7b3125331cd4164",
      "commitAuthor": "nicksantos@google.com",
      "diff": "@@ -0,0 +1,21 @@\n+private void maybeAddStringNodeToSymbolTable(Node n) {\n+    if (preprocessorSymbolTable \u003d\u003d null) {\n+        return;\n+    }\n+    String name \u003d n.getString();\n+    Node syntheticRef \u003d NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(), name, n, name);\n+    final int FOR_QUOTE \u003d 1;\n+    final int FOR_DOT \u003d 1;\n+    Node current \u003d null;\n+    for (current \u003d syntheticRef; current.getType() \u003d\u003d Token.GETPROP; current \u003d current.getFirstChild()) {\n+        int fullLen \u003d current.getQualifiedName().length();\n+        int namespaceLen \u003d current.getFirstChild().getQualifiedName().length();\n+        current.setSourceEncodedPosition(n.getSourcePosition() + FOR_QUOTE);\n+        current.setLength(fullLen);\n+        current.getLastChild().setSourceEncodedPosition(n.getSourcePosition() + namespaceLen + FOR_QUOTE + FOR_DOT);\n+        current.getLastChild().setLength(current.getLastChild().getString().length());\n+    }\n+    current.setSourceEncodedPosition(n.getSourcePosition() + FOR_QUOTE);\n+    current.setLength(current.getString().length());\n+    maybeAddToSymbolTable(syntheticRef);\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void maybeAddStringNodeToSymbolTable(Node n) {\n    if (preprocessorSymbolTable \u003d\u003d null) {\n        return;\n    }\n    String name \u003d n.getString();\n    Node syntheticRef \u003d NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(), name, n, name);\n    final int FOR_QUOTE \u003d 1;\n    final int FOR_DOT \u003d 1;\n    Node current \u003d null;\n    for (current \u003d syntheticRef; current.getType() \u003d\u003d Token.GETPROP; current \u003d current.getFirstChild()) {\n        int fullLen \u003d current.getQualifiedName().length();\n        int namespaceLen \u003d current.getFirstChild().getQualifiedName().length();\n        current.setSourceEncodedPosition(n.getSourcePosition() + FOR_QUOTE);\n        current.setLength(fullLen);\n        current.getLastChild().setSourceEncodedPosition(n.getSourcePosition() + namespaceLen + FOR_QUOTE + FOR_DOT);\n        current.getLastChild().setLength(current.getLastChild().getString().length());\n    }\n    current.setSourceEncodedPosition(n.getSourcePosition() + FOR_QUOTE);\n    current.setLength(current.getString().length());\n    maybeAddToSymbolTable(syntheticRef);\n}",
      "path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
      "functionStartLine": 1095,
      "functionName": "maybeAddStringNodeToSymbolTable",
      "functionAnnotation": "",
      "functionDoc": "The string in {@code n} is a reference name. Create a synthetic\nnode for it with all the proper source info, and add it to the symbol\ntable.\n"
    }
  }
}