{
  "origin": "codeshovel",
  "repositoryName": "Closure-113b",
  "repositoryPath": "/tmp/Closure-113b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JSType.java",
  "functionName": "isSubtypeHelper",
  "functionId": "isSubtypeHelper___thisType-JSType__thatType-JSType",
  "sourceFilePath": "src/com/google/javascript/rhino/jstype/JSType.java",
  "functionAnnotation": "",
  "functionDoc": "A generic implementation meant to be used as a helper for common subtyping\ncases.\n",
  "functionStartLine": 1240,
  "functionEndLine": 1300,
  "numCommitsSeen": 138,
  "timeTaken": 3520,
  "changeHistory": [
    "65b54396fb95cdee741f45b9f53b967452e2274c",
    "bfb5624c47149e1216899f28b06e1fdb187478f4",
    "44ebf6062655dc55d0569c80ce7806100435fba0",
    "4cac8c1e896e04418f57f9a6208311444aa3d5f3",
    "1c95684b4a6add525b3070cbd27c234981520676",
    "bbf1b138e20a36ca79b2a012ae145c943929a6dd",
    "00241aa722c2245784e63dba9d444fce88134aed",
    "63e875373844bdb6cedc7be3f537baa32cbd2ec0",
    "3c1c9eabcde278439f21bcda1468425f92d7c052",
    "5ac633a4e4471847da5aa22bb1fcf28727eb7fe9",
    "d6227f739b8380f74663b2f536ed4a9649fd0841",
    "cf5fd88f13f0b11625ac407f85cb58b36862e173",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "65b54396fb95cdee741f45b9f53b967452e2274c": "Ybodychange",
    "bfb5624c47149e1216899f28b06e1fdb187478f4": "Ybodychange",
    "44ebf6062655dc55d0569c80ce7806100435fba0": "Ybodychange",
    "4cac8c1e896e04418f57f9a6208311444aa3d5f3": "Ybodychange",
    "1c95684b4a6add525b3070cbd27c234981520676": "Ybodychange",
    "bbf1b138e20a36ca79b2a012ae145c943929a6dd": "Ybodychange",
    "00241aa722c2245784e63dba9d444fce88134aed": "Ybodychange",
    "63e875373844bdb6cedc7be3f537baa32cbd2ec0": "Ybodychange",
    "3c1c9eabcde278439f21bcda1468425f92d7c052": "Ymultichange(Yrename,Ybodychange)",
    "5ac633a4e4471847da5aa22bb1fcf28727eb7fe9": "Ybodychange",
    "d6227f739b8380f74663b2f536ed4a9649fd0841": "Ybodychange",
    "cf5fd88f13f0b11625ac407f85cb58b36862e173": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "65b54396fb95cdee741f45b9f53b967452e2274c": {
      "type": "Ybodychange",
      "commitMessage": "Makes subtype relations work with @implemented templatized types.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID\u003d45106345\n",
      "commitDate": "4/10/13, 4:18 PM",
      "commitName": "65b54396fb95cdee741f45b9f53b967452e2274c",
      "commitAuthor": "Ben Lickly",
      "commitDateOld": "3/20/13, 4:08 PM",
      "commitNameOld": "75aeb38f6a718778023d3d7f10dc491003161eff",
      "commitAuthorOld": "Ben Lickly",
      "daysBetweenCommits": 21.01,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "actualSource": "static boolean isSubtypeHelper(JSType thisType, JSType thatType) {\n    if (thatType.isUnknownType()) {\n        return true;\n    }\n    if (thatType.isAllType()) {\n        return true;\n    }\n    if (thisType.isEquivalentTo(thatType)) {\n        return true;\n    }\n    if (thatType.isUnionType()) {\n        UnionType union \u003d thatType.toMaybeUnionType();\n        for (JSType element : union.alternates) {\n            if (thisType.isSubtype(element)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    TemplateTypeMap thisTypeParams \u003d thisType.getTemplateTypeMap();\n    TemplateTypeMap thatTypeParams \u003d thatType.getTemplateTypeMap();\n    boolean templateMatch \u003d true;\n    if (isExemptFromTemplateTypeInvariance(thatType)) {\n        TemplateType key \u003d thisType.registry.getObjectElementKey();\n        JSType thisElement \u003d thisTypeParams.getTemplateType(key);\n        JSType thatElement \u003d thatTypeParams.getTemplateType(key);\n        templateMatch \u003d thisElement.isSubtype(thatElement) || thatElement.isSubtype(thisElement);\n    } else {\n        templateMatch \u003d thisTypeParams.checkEquivalenceHelper(thatTypeParams, EquivalenceMethod.INVARIANT);\n    }\n    if (!templateMatch) {\n        return false;\n    }\n    if (thisType.isTemplatizedType()) {\n        return thisType.toMaybeTemplatizedType().getReferencedType().isSubtype(thatType);\n    }\n    if (thatType instanceof ProxyObjectType) {\n        return thisType.isSubtype(((ProxyObjectType) thatType).getReferencedTypeInternal());\n    }\n    return false;\n}",
      "path": "src/com/google/javascript/rhino/jstype/JSType.java",
      "functionStartLine": 1237,
      "functionName": "isSubtypeHelper",
      "functionAnnotation": "",
      "functionDoc": "A generic implementation meant to be used as a helper for common subtyping\ncases.\n",
      "diff": "@@ -1,46 +1,41 @@\n static boolean isSubtypeHelper(JSType thisType, JSType thatType) {\n     if (thatType.isUnknownType()) {\n         return true;\n     }\n     if (thatType.isAllType()) {\n         return true;\n     }\n     if (thisType.isEquivalentTo(thatType)) {\n         return true;\n     }\n     if (thatType.isUnionType()) {\n         UnionType union \u003d thatType.toMaybeUnionType();\n         for (JSType element : union.alternates) {\n             if (thisType.isSubtype(element)) {\n                 return true;\n             }\n         }\n         return false;\n     }\n-    if (thisType.isTemplatizedType() \u0026\u0026 thatType.isTemplatizedType()) {\n-        JSType rawThisType \u003d thisType.toMaybeTemplatizedType().getReferencedType();\n-        JSType rawThatType \u003d thatType.toMaybeTemplatizedType().getReferencedType();\n-        if (!rawThisType.isSubtype(rawThatType)) {\n-            return false;\n-        }\n-        TemplateTypeMap thisTypeParams \u003d thisType.getTemplateTypeMap();\n-        TemplateTypeMap thatTypeParams \u003d thatType.getTemplateTypeMap();\n-        if (thisTypeParams.checkEquivalenceHelper(thatTypeParams, EquivalenceMethod.INVARIANT)) {\n-            return true;\n-        } else if (isExemptFromTemplateTypeInvariance(thatType)) {\n-            TemplateType key \u003d thisType.registry.getObjectElementKey();\n-            JSType thisElement \u003d thisTypeParams.getTemplateType(key);\n-            JSType thatElement \u003d thatTypeParams.getTemplateType(key);\n-            return thisElement.isSubtype(thatElement) || thatElement.isSubtype(thisElement);\n-        } else {\n-            return false;\n-        }\n+    TemplateTypeMap thisTypeParams \u003d thisType.getTemplateTypeMap();\n+    TemplateTypeMap thatTypeParams \u003d thatType.getTemplateTypeMap();\n+    boolean templateMatch \u003d true;\n+    if (isExemptFromTemplateTypeInvariance(thatType)) {\n+        TemplateType key \u003d thisType.registry.getObjectElementKey();\n+        JSType thisElement \u003d thisTypeParams.getTemplateType(key);\n+        JSType thatElement \u003d thatTypeParams.getTemplateType(key);\n+        templateMatch \u003d thisElement.isSubtype(thatElement) || thatElement.isSubtype(thisElement);\n+    } else {\n+        templateMatch \u003d thisTypeParams.checkEquivalenceHelper(thatTypeParams, EquivalenceMethod.INVARIANT);\n+    }\n+    if (!templateMatch) {\n+        return false;\n     }\n     if (thisType.isTemplatizedType()) {\n         return thisType.toMaybeTemplatizedType().getReferencedType().isSubtype(thatType);\n     }\n     if (thatType instanceof ProxyObjectType) {\n         return thisType.isSubtype(((ProxyObjectType) thatType).getReferencedTypeInternal());\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bfb5624c47149e1216899f28b06e1fdb187478f4": {
      "type": "Ybodychange",
      "commitMessage": "Allow assignment of Foo.\u003c?\u003e to Foo.\u003cx\u003e and vise versa.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID\u003d44152340\n",
      "commitDate": "3/20/13, 9:48 AM",
      "commitName": "bfb5624c47149e1216899f28b06e1fdb187478f4",
      "commitAuthor": "Ben Lickly",
      "commitDateOld": "2/26/13, 4:59 PM",
      "commitNameOld": "bd60dbdf9330efe540c20f4d6910442b6f6e1f10",
      "commitAuthorOld": "Ben Lickly",
      "daysBetweenCommits": 21.66,
      "commitsBetweenForRepo": 43,
      "commitsBetweenForFile": 1,
      "actualSource": "static boolean isSubtypeHelper(JSType thisType, JSType thatType) {\n    if (thatType.isUnknownType()) {\n        return true;\n    }\n    if (thatType.isAllType()) {\n        return true;\n    }\n    if (thisType.isEquivalentTo(thatType)) {\n        return true;\n    }\n    if (thatType.isUnionType()) {\n        UnionType union \u003d thatType.toMaybeUnionType();\n        for (JSType element : union.alternates) {\n            if (thisType.isSubtype(element)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (thisType.isTemplatizedType() \u0026\u0026 thatType.isTemplatizedType()) {\n        JSType rawThisType \u003d thisType.toMaybeTemplatizedType().getReferencedType();\n        JSType rawThatType \u003d thatType.toMaybeTemplatizedType().getReferencedType();\n        if (!rawThisType.isSubtype(rawThatType)) {\n            return false;\n        }\n        TemplateTypeMap thisTypeParams \u003d thisType.getTemplateTypeMap();\n        TemplateTypeMap thatTypeParams \u003d thatType.getTemplateTypeMap();\n        if (thisTypeParams.checkEquivalenceHelper(thatTypeParams, EquivalenceMethod.INVARIANT)) {\n            return true;\n        } else if (isExemptFromTemplateTypeInvariance(thatType)) {\n            TemplateType key \u003d thisType.registry.getObjectElementKey();\n            JSType thisElement \u003d thisTypeParams.getTemplateType(key);\n            JSType thatElement \u003d thatTypeParams.getTemplateType(key);\n            return thisElement.isSubtype(thatElement) || thatElement.isSubtype(thisElement);\n        } else {\n            return false;\n        }\n    }\n    if (thisType.isTemplatizedType()) {\n        return thisType.toMaybeTemplatizedType().getReferencedType().isSubtype(thatType);\n    }\n    if (thatType instanceof ProxyObjectType) {\n        return thisType.isSubtype(((ProxyObjectType) thatType).getReferencedTypeInternal());\n    }\n    return false;\n}",
      "path": "src/com/google/javascript/rhino/jstype/JSType.java",
      "functionStartLine": 1229,
      "functionName": "isSubtypeHelper",
      "functionAnnotation": "",
      "functionDoc": "A generic implementation meant to be used as a helper for common subtyping\ncases.\n",
      "diff": "@@ -1,32 +1,46 @@\n static boolean isSubtypeHelper(JSType thisType, JSType thatType) {\n     if (thatType.isUnknownType()) {\n         return true;\n     }\n     if (thatType.isAllType()) {\n         return true;\n     }\n     if (thisType.isEquivalentTo(thatType)) {\n         return true;\n     }\n     if (thatType.isUnionType()) {\n         UnionType union \u003d thatType.toMaybeUnionType();\n         for (JSType element : union.alternates) {\n             if (thisType.isSubtype(element)) {\n                 return true;\n             }\n         }\n         return false;\n     }\n-    if (thisType.isTemplatizedType()) {\n-        return !areIncompatibleArrays(thisType, thatType) \u0026\u0026 thisType.toMaybeTemplatizedType().getReferencedType().isSubtype(thatType);\n-    }\n-    if (thatType.isTemplatizedType()) {\n-        if (!isExemptFromTemplateTypeInvariance(thatType) \u0026\u0026 !thisType.getTemplateTypeMap().checkEquivalenceHelper(thatType.getTemplateTypeMap(), EquivalenceMethod.IDENTITY)) {\n+    if (thisType.isTemplatizedType() \u0026\u0026 thatType.isTemplatizedType()) {\n+        JSType rawThisType \u003d thisType.toMaybeTemplatizedType().getReferencedType();\n+        JSType rawThatType \u003d thatType.toMaybeTemplatizedType().getReferencedType();\n+        if (!rawThisType.isSubtype(rawThatType)) {\n             return false;\n         }\n+        TemplateTypeMap thisTypeParams \u003d thisType.getTemplateTypeMap();\n+        TemplateTypeMap thatTypeParams \u003d thatType.getTemplateTypeMap();\n+        if (thisTypeParams.checkEquivalenceHelper(thatTypeParams, EquivalenceMethod.INVARIANT)) {\n+            return true;\n+        } else if (isExemptFromTemplateTypeInvariance(thatType)) {\n+            TemplateType key \u003d thisType.registry.getObjectElementKey();\n+            JSType thisElement \u003d thisTypeParams.getTemplateType(key);\n+            JSType thatElement \u003d thatTypeParams.getTemplateType(key);\n+            return thisElement.isSubtype(thatElement) || thatElement.isSubtype(thisElement);\n+        } else {\n+            return false;\n+        }\n+    }\n+    if (thisType.isTemplatizedType()) {\n+        return thisType.toMaybeTemplatizedType().getReferencedType().isSubtype(thatType);\n     }\n     if (thatType instanceof ProxyObjectType) {\n         return thisType.isSubtype(((ProxyObjectType) thatType).getReferencedTypeInternal());\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "44ebf6062655dc55d0569c80ce7806100435fba0": {
      "type": "Ybodychange",
      "commitMessage": "\nExtends TemplatizedType to handle any number of template types, and removes IndexedType. Converts Array and Object to the new generic templatized type system.\n\nR\u003ddimvar,nicksantos,johnlenz,tylerg\nDELTA\u003d544 (273 added, 143 deleted, 128 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d6255\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2504 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/4/13, 1:10 PM",
      "commitName": "44ebf6062655dc55d0569c80ce7806100435fba0",
      "commitAuthor": "izaakr@google.com",
      "commitDateOld": "1/29/13, 11:03 AM",
      "commitNameOld": "2065172121162371081ca134f05d0da599ca0ba4",
      "commitAuthorOld": "izaakr@google.com",
      "daysBetweenCommits": 6.09,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "static boolean isSubtypeHelper(JSType thisType, JSType thatType) {\n    if (thatType.isUnknownType()) {\n        return true;\n    }\n    if (thatType.isAllType()) {\n        return true;\n    }\n    if (thisType.isEquivalentTo(thatType)) {\n        return true;\n    }\n    if (thatType.isUnionType()) {\n        UnionType union \u003d thatType.toMaybeUnionType();\n        for (JSType element : union.alternates) {\n            if (thisType.isSubtype(element)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (thisType.isTemplatizedType()) {\n        return !areIncompatibleArrays(thisType, thatType) \u0026\u0026 thisType.toMaybeTemplatizedType().getReferencedType().isSubtype(thatType);\n    }\n    if (thatType.isTemplatizedType()) {\n        if (!isExemptFromTemplateTypeInvariance(thatType) \u0026\u0026 !thisType.getTemplateTypeMap().checkEquivalenceHelper(thatType.getTemplateTypeMap(), EquivalenceMethod.IDENTITY)) {\n            return false;\n        }\n    }\n    if (thatType instanceof ProxyObjectType) {\n        return thisType.isSubtype(((ProxyObjectType) thatType).getReferencedTypeInternal());\n    }\n    return false;\n}",
      "path": "src/com/google/javascript/rhino/jstype/JSType.java",
      "functionStartLine": 1229,
      "functionName": "isSubtypeHelper",
      "functionAnnotation": "",
      "functionDoc": "A generic implementation meant to be used as a helper for common subtyping\ncases.\n",
      "diff": "@@ -1,27 +1,32 @@\n static boolean isSubtypeHelper(JSType thisType, JSType thatType) {\n     if (thatType.isUnknownType()) {\n         return true;\n     }\n     if (thatType.isAllType()) {\n         return true;\n     }\n     if (thisType.isEquivalentTo(thatType)) {\n         return true;\n     }\n     if (thatType.isUnionType()) {\n         UnionType union \u003d thatType.toMaybeUnionType();\n         for (JSType element : union.alternates) {\n             if (thisType.isSubtype(element)) {\n                 return true;\n             }\n         }\n         return false;\n     }\n     if (thisType.isTemplatizedType()) {\n-        return thisType.toMaybeTemplatizedType().isTemplatizedSubtypeOf(thatType);\n+        return !areIncompatibleArrays(thisType, thatType) \u0026\u0026 thisType.toMaybeTemplatizedType().getReferencedType().isSubtype(thatType);\n+    }\n+    if (thatType.isTemplatizedType()) {\n+        if (!isExemptFromTemplateTypeInvariance(thatType) \u0026\u0026 !thisType.getTemplateTypeMap().checkEquivalenceHelper(thatType.getTemplateTypeMap(), EquivalenceMethod.IDENTITY)) {\n+            return false;\n+        }\n     }\n     if (thatType instanceof ProxyObjectType) {\n         return thisType.isSubtype(((ProxyObjectType) thatType).getReferencedTypeInternal());\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4cac8c1e896e04418f57f9a6208311444aa3d5f3": {
      "type": "Ybodychange",
      "commitMessage": "\nRenames ParameterizedType to TemplatizedType.\n\nR\u003ddimvar,nicksantos,johnlenz\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d6186\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2486 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/23/13, 5:45 PM",
      "commitName": "4cac8c1e896e04418f57f9a6208311444aa3d5f3",
      "commitAuthor": "izaakr@google.com",
      "commitDateOld": "1/10/13, 4:31 PM",
      "commitNameOld": "9bf6d8db973a4691ad1551bdcbc559a86ba60532",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 13.05,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "actualSource": "static boolean isSubtypeHelper(JSType thisType, JSType thatType) {\n    if (thatType.isUnknownType()) {\n        return true;\n    }\n    if (thatType.isAllType()) {\n        return true;\n    }\n    if (thisType.isEquivalentTo(thatType)) {\n        return true;\n    }\n    if (thatType.isUnionType()) {\n        UnionType union \u003d thatType.toMaybeUnionType();\n        for (JSType element : union.alternates) {\n            if (thisType.isSubtype(element)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (thisType.isTemplatizedType()) {\n        return thisType.toMaybeTemplatizedType().isTemplatizedSubtypeOf(thatType);\n    }\n    if (thatType instanceof ProxyObjectType) {\n        return thisType.isSubtype(((ProxyObjectType) thatType).getReferencedTypeInternal());\n    }\n    return false;\n}",
      "path": "src/com/google/javascript/rhino/jstype/JSType.java",
      "functionStartLine": 1343,
      "functionName": "isSubtypeHelper",
      "functionAnnotation": "",
      "functionDoc": "A generic implementation meant to be used as a helper for common subtyping\ncases.\n",
      "diff": "@@ -1,27 +1,27 @@\n static boolean isSubtypeHelper(JSType thisType, JSType thatType) {\n     if (thatType.isUnknownType()) {\n         return true;\n     }\n     if (thatType.isAllType()) {\n         return true;\n     }\n     if (thisType.isEquivalentTo(thatType)) {\n         return true;\n     }\n     if (thatType.isUnionType()) {\n         UnionType union \u003d thatType.toMaybeUnionType();\n         for (JSType element : union.alternates) {\n             if (thisType.isSubtype(element)) {\n                 return true;\n             }\n         }\n         return false;\n     }\n-    if (thisType.isParameterizedType()) {\n-        return thisType.toMaybeParameterizedType().isParameterizeSubtypeOf(thatType);\n+    if (thisType.isTemplatizedType()) {\n+        return thisType.toMaybeTemplatizedType().isTemplatizedSubtypeOf(thatType);\n     }\n     if (thatType instanceof ProxyObjectType) {\n         return thisType.isSubtype(((ProxyObjectType) thatType).getReferencedTypeInternal());\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1c95684b4a6add525b3070cbd27c234981520676": {
      "type": "Ybodychange",
      "commitMessage": "\nHave parameterized types particpate in the subtype relationships.\n\nR\u003dnicksantos\nDELTA\u003d1945  (1761 added, 137 deleted, 47 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5973\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2397 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/13/12, 11:38 AM",
      "commitName": "1c95684b4a6add525b3070cbd27c234981520676",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "12/12/12, 11:54 AM",
      "commitNameOld": "e14000ea47087087d79dd4e5b7425439c7e5c12a",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 0.99,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "static boolean isSubtypeHelper(JSType thisType, JSType thatType) {\n    if (thatType.isUnknownType()) {\n        return true;\n    }\n    if (thatType.isAllType()) {\n        return true;\n    }\n    if (thisType.isEquivalentTo(thatType)) {\n        return true;\n    }\n    if (thatType.isUnionType()) {\n        UnionType union \u003d thatType.toMaybeUnionType();\n        for (JSType element : union.alternates) {\n            if (thisType.isSubtype(element)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (thisType.isParameterizedType()) {\n        return thisType.toMaybeParameterizedType().isParameterizeSubtypeOf(thatType);\n    }\n    if (thatType instanceof ProxyObjectType) {\n        return thisType.isSubtype(((ProxyObjectType) thatType).getReferencedTypeInternal());\n    }\n    return false;\n}",
      "path": "src/com/google/javascript/rhino/jstype/JSType.java",
      "functionStartLine": 1340,
      "functionName": "isSubtypeHelper",
      "functionAnnotation": "",
      "functionDoc": "A generic implementation meant to be used as a helper for common subtyping\ncases.\n",
      "diff": "@@ -1,23 +1,27 @@\n static boolean isSubtypeHelper(JSType thisType, JSType thatType) {\n     if (thatType.isUnknownType()) {\n         return true;\n     }\n     if (thatType.isAllType()) {\n         return true;\n     }\n     if (thisType.isEquivalentTo(thatType)) {\n         return true;\n     }\n     if (thatType.isUnionType()) {\n         UnionType union \u003d thatType.toMaybeUnionType();\n         for (JSType element : union.alternates) {\n             if (thisType.isSubtype(element)) {\n                 return true;\n             }\n         }\n+        return false;\n+    }\n+    if (thisType.isParameterizedType()) {\n+        return thisType.toMaybeParameterizedType().isParameterizeSubtypeOf(thatType);\n     }\n     if (thatType instanceof ProxyObjectType) {\n         return thisType.isSubtype(((ProxyObjectType) thatType).getReferencedTypeInternal());\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bbf1b138e20a36ca79b2a012ae145c943929a6dd": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback\n\n*** Reason for rollback ***\n\nFailures don\u0027t seem related to jscompiler. Resubmitting for now.\n\n*** Original change description ***\n\nAutomated g4 rollback\n\n*** Reason for rollback ***\n\nChange caused tests to stop building.\n\n*** Original change description ***\n\nNew @struct and @dict annotations for constructors.\nWith these annotations, one can enforce only dot or only bracket access on object properties.\n\nR\u003dnicksantos\nDELTA\u003d476  (391 added, 34 deleted, 51 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5491\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2184 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/11/12, 4:17 PM",
      "commitName": "bbf1b138e20a36ca79b2a012ae145c943929a6dd",
      "commitAuthor": "dimvar@google.com",
      "commitDateOld": "9/11/12, 11:52 AM",
      "commitNameOld": "00241aa722c2245784e63dba9d444fce88134aed",
      "commitAuthorOld": "dimvar@google.com",
      "daysBetweenCommits": 0.18,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "static boolean isSubtypeHelper(JSType thisType, JSType thatType) {\n    if (thatType.isUnknownType()) {\n        return true;\n    }\n    if (thatType.isAllType()) {\n        return true;\n    }\n    if (thisType.isEquivalentTo(thatType)) {\n        return true;\n    }\n    if (thatType.isUnionType()) {\n        UnionType union \u003d thatType.toMaybeUnionType();\n        for (JSType element : union.alternates) {\n            if (thisType.isSubtype(element)) {\n                return true;\n            }\n        }\n    }\n    if (thatType instanceof ProxyObjectType) {\n        return thisType.isSubtype(((ProxyObjectType) thatType).getReferencedTypeInternal());\n    }\n    return false;\n}",
      "path": "src/com/google/javascript/rhino/jstype/JSType.java",
      "functionStartLine": 1106,
      "functionName": "isSubtypeHelper",
      "functionAnnotation": "",
      "functionDoc": "A generic implementation meant to be used as a helper for common subtyping\ncases.\n",
      "diff": "@@ -1,23 +1,23 @@\n static boolean isSubtypeHelper(JSType thisType, JSType thatType) {\n     if (thatType.isUnknownType()) {\n         return true;\n     }\n-    if (thisType.isEquivalentTo(thatType)) {\n+    if (thatType.isAllType()) {\n         return true;\n     }\n-    if (thatType.isAllType()) {\n+    if (thisType.isEquivalentTo(thatType)) {\n         return true;\n     }\n     if (thatType.isUnionType()) {\n         UnionType union \u003d thatType.toMaybeUnionType();\n         for (JSType element : union.alternates) {\n             if (thisType.isSubtype(element)) {\n                 return true;\n             }\n         }\n     }\n     if (thatType instanceof ProxyObjectType) {\n         return thisType.isSubtype(((ProxyObjectType) thatType).getReferencedTypeInternal());\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "00241aa722c2245784e63dba9d444fce88134aed": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback\n\n*** Reason for rollback ***\n\nChange caused tests to stop building.\n\n*** Original change description ***\n\nNew @struct and @dict annotations for constructors.\nWith these annotations, one can enforce only dot or only bracket access on object properties.\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5489\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2182 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/11/12, 11:52 AM",
      "commitName": "00241aa722c2245784e63dba9d444fce88134aed",
      "commitAuthor": "dimvar@google.com",
      "commitDateOld": "9/11/12, 11:10 AM",
      "commitNameOld": "63e875373844bdb6cedc7be3f537baa32cbd2ec0",
      "commitAuthorOld": "dimvar@google.com",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "static boolean isSubtypeHelper(JSType thisType, JSType thatType) {\n    if (thatType.isUnknownType()) {\n        return true;\n    }\n    if (thisType.isEquivalentTo(thatType)) {\n        return true;\n    }\n    if (thatType.isAllType()) {\n        return true;\n    }\n    if (thatType.isUnionType()) {\n        UnionType union \u003d thatType.toMaybeUnionType();\n        for (JSType element : union.alternates) {\n            if (thisType.isSubtype(element)) {\n                return true;\n            }\n        }\n    }\n    if (thatType instanceof ProxyObjectType) {\n        return thisType.isSubtype(((ProxyObjectType) thatType).getReferencedTypeInternal());\n    }\n    return false;\n}",
      "path": "src/com/google/javascript/rhino/jstype/JSType.java",
      "functionStartLine": 1080,
      "functionName": "isSubtypeHelper",
      "functionAnnotation": "",
      "functionDoc": "A generic implementation meant to be used as a helper for common subtyping\ncases.\n",
      "diff": "@@ -1,23 +1,23 @@\n static boolean isSubtypeHelper(JSType thisType, JSType thatType) {\n     if (thatType.isUnknownType()) {\n         return true;\n     }\n-    if (thatType.isAllType()) {\n+    if (thisType.isEquivalentTo(thatType)) {\n         return true;\n     }\n-    if (thisType.isEquivalentTo(thatType)) {\n+    if (thatType.isAllType()) {\n         return true;\n     }\n     if (thatType.isUnionType()) {\n         UnionType union \u003d thatType.toMaybeUnionType();\n         for (JSType element : union.alternates) {\n             if (thisType.isSubtype(element)) {\n                 return true;\n             }\n         }\n     }\n     if (thatType instanceof ProxyObjectType) {\n         return thisType.isSubtype(((ProxyObjectType) thatType).getReferencedTypeInternal());\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "63e875373844bdb6cedc7be3f537baa32cbd2ec0": {
      "type": "Ybodychange",
      "commitMessage": "\nNew @struct and @dict annotations for constructors.\nWith these annotations, one can enforce only dot or only bracket access on object properties.\n\nR\u003dnicksantos\nDELTA\u003d476  (391 added, 34 deleted, 51 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5488\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2181 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/11/12, 11:10 AM",
      "commitName": "63e875373844bdb6cedc7be3f537baa32cbd2ec0",
      "commitAuthor": "dimvar@google.com",
      "commitDateOld": "8/2/12, 3:05 PM",
      "commitNameOld": "d58006a939b740ea78dc61128065a6fdb8f303ca",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 39.84,
      "commitsBetweenForRepo": 56,
      "commitsBetweenForFile": 1,
      "actualSource": "static boolean isSubtypeHelper(JSType thisType, JSType thatType) {\n    if (thatType.isUnknownType()) {\n        return true;\n    }\n    if (thatType.isAllType()) {\n        return true;\n    }\n    if (thisType.isEquivalentTo(thatType)) {\n        return true;\n    }\n    if (thatType.isUnionType()) {\n        UnionType union \u003d thatType.toMaybeUnionType();\n        for (JSType element : union.alternates) {\n            if (thisType.isSubtype(element)) {\n                return true;\n            }\n        }\n    }\n    if (thatType instanceof ProxyObjectType) {\n        return thisType.isSubtype(((ProxyObjectType) thatType).getReferencedTypeInternal());\n    }\n    return false;\n}",
      "path": "src/com/google/javascript/rhino/jstype/JSType.java",
      "functionStartLine": 1106,
      "functionName": "isSubtypeHelper",
      "functionAnnotation": "",
      "functionDoc": "A generic implementation meant to be used as a helper for common subtyping\ncases.\n",
      "diff": "@@ -1,23 +1,23 @@\n static boolean isSubtypeHelper(JSType thisType, JSType thatType) {\n     if (thatType.isUnknownType()) {\n         return true;\n     }\n-    if (thisType.isEquivalentTo(thatType)) {\n+    if (thatType.isAllType()) {\n         return true;\n     }\n-    if (thatType.isAllType()) {\n+    if (thisType.isEquivalentTo(thatType)) {\n         return true;\n     }\n     if (thatType.isUnionType()) {\n         UnionType union \u003d thatType.toMaybeUnionType();\n         for (JSType element : union.alternates) {\n             if (thisType.isSubtype(element)) {\n                 return true;\n             }\n         }\n     }\n     if (thatType instanceof ProxyObjectType) {\n         return thisType.isSubtype(((ProxyObjectType) thatType).getReferencedTypeInternal());\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3c1c9eabcde278439f21bcda1468425f92d7c052": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "\nfix up some subtype tests\n\nR\u003dtylerg\nDELTA\u003d43  (8 added, 17 deleted, 18 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3402\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1488 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/4/11, 1:56 PM",
      "commitName": "3c1c9eabcde278439f21bcda1468425f92d7c052",
      "commitAuthor": "nicksantos@google.com",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "\nfix up some subtype tests\n\nR\u003dtylerg\nDELTA\u003d43  (8 added, 17 deleted, 18 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3402\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1488 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "10/4/11, 1:56 PM",
          "commitName": "3c1c9eabcde278439f21bcda1468425f92d7c052",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "9/13/11, 12:26 PM",
          "commitNameOld": "7dc66e4ee2b0a306b71b1fd7f95602209671bc83",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 21.06,
          "commitsBetweenForRepo": 43,
          "commitsBetweenForFile": 1,
          "actualSource": "static boolean isSubtypeHelper(JSType thisType, JSType thatType) {\n    if (thatType.isUnknownType()) {\n        return true;\n    }\n    if (thisType.isEquivalentTo(thatType)) {\n        return true;\n    }\n    if (thatType.isAllType()) {\n        return true;\n    }\n    if (thatType.isUnionType()) {\n        UnionType union \u003d thatType.toMaybeUnionType();\n        for (JSType element : union.alternates) {\n            if (thisType.isSubtype(element)) {\n                return true;\n            }\n        }\n    }\n    if (thatType instanceof ProxyObjectType) {\n        return thisType.isSubtype(((ProxyObjectType) thatType).getReferencedTypeInternal());\n    }\n    return false;\n}",
          "path": "src/com/google/javascript/rhino/jstype/JSType.java",
          "functionStartLine": 984,
          "functionName": "isSubtypeHelper",
          "functionAnnotation": "",
          "functionDoc": "A generic implementation meant to be used as a helper for common subtyping\ncases.\n",
          "diff": "@@ -1,23 +1,23 @@\n-static boolean isSubtype(JSType thisType, JSType thatType) {\n+static boolean isSubtypeHelper(JSType thisType, JSType thatType) {\n     if (thatType.isUnknownType()) {\n         return true;\n     }\n     if (thisType.isEquivalentTo(thatType)) {\n         return true;\n     }\n     if (thatType.isAllType()) {\n         return true;\n     }\n     if (thatType.isUnionType()) {\n         UnionType union \u003d thatType.toMaybeUnionType();\n         for (JSType element : union.alternates) {\n             if (thisType.isSubtype(element)) {\n                 return true;\n             }\n         }\n     }\n-    if (thatType instanceof NamedType) {\n-        return thisType.isSubtype(((NamedType) thatType).getReferencedType());\n+    if (thatType instanceof ProxyObjectType) {\n+        return thisType.isSubtype(((ProxyObjectType) thatType).getReferencedTypeInternal());\n     }\n     return false;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "isSubtype",
            "newValue": "isSubtypeHelper"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nfix up some subtype tests\n\nR\u003dtylerg\nDELTA\u003d43  (8 added, 17 deleted, 18 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3402\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1488 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "10/4/11, 1:56 PM",
          "commitName": "3c1c9eabcde278439f21bcda1468425f92d7c052",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "9/13/11, 12:26 PM",
          "commitNameOld": "7dc66e4ee2b0a306b71b1fd7f95602209671bc83",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 21.06,
          "commitsBetweenForRepo": 43,
          "commitsBetweenForFile": 1,
          "actualSource": "static boolean isSubtypeHelper(JSType thisType, JSType thatType) {\n    if (thatType.isUnknownType()) {\n        return true;\n    }\n    if (thisType.isEquivalentTo(thatType)) {\n        return true;\n    }\n    if (thatType.isAllType()) {\n        return true;\n    }\n    if (thatType.isUnionType()) {\n        UnionType union \u003d thatType.toMaybeUnionType();\n        for (JSType element : union.alternates) {\n            if (thisType.isSubtype(element)) {\n                return true;\n            }\n        }\n    }\n    if (thatType instanceof ProxyObjectType) {\n        return thisType.isSubtype(((ProxyObjectType) thatType).getReferencedTypeInternal());\n    }\n    return false;\n}",
          "path": "src/com/google/javascript/rhino/jstype/JSType.java",
          "functionStartLine": 984,
          "functionName": "isSubtypeHelper",
          "functionAnnotation": "",
          "functionDoc": "A generic implementation meant to be used as a helper for common subtyping\ncases.\n",
          "diff": "@@ -1,23 +1,23 @@\n-static boolean isSubtype(JSType thisType, JSType thatType) {\n+static boolean isSubtypeHelper(JSType thisType, JSType thatType) {\n     if (thatType.isUnknownType()) {\n         return true;\n     }\n     if (thisType.isEquivalentTo(thatType)) {\n         return true;\n     }\n     if (thatType.isAllType()) {\n         return true;\n     }\n     if (thatType.isUnionType()) {\n         UnionType union \u003d thatType.toMaybeUnionType();\n         for (JSType element : union.alternates) {\n             if (thisType.isSubtype(element)) {\n                 return true;\n             }\n         }\n     }\n-    if (thatType instanceof NamedType) {\n-        return thisType.isSubtype(((NamedType) thatType).getReferencedType());\n+    if (thatType instanceof ProxyObjectType) {\n+        return thisType.isSubtype(((ProxyObjectType) thatType).getReferencedTypeInternal());\n     }\n     return false;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "5ac633a4e4471847da5aa22bb1fcf28727eb7fe9": {
      "type": "Ybodychange",
      "commitMessage": "\nAdd a toUnionType method.\nI think this should be a lot more correct and easier for clients\nto use, because it will resolve typedefs of UnionTypes better.\nI will probably do this for all other instanceof checks if we\nagree that this is the way we want to go.\n\nR\u003djohnlenz\nDELTA\u003d79  (14 added, 7 deleted, 58 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3047\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1362 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/17/11, 11:43 AM",
      "commitName": "5ac633a4e4471847da5aa22bb1fcf28727eb7fe9",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "7/28/11, 2:24 PM",
      "commitNameOld": "5200a1c2404a424425ab2b04a7a64e08e0ee4925",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 19.89,
      "commitsBetweenForRepo": 49,
      "commitsBetweenForFile": 1,
      "actualSource": "static boolean isSubtype(JSType thisType, JSType thatType) {\n    if (thatType.isUnknownType()) {\n        return true;\n    }\n    if (thisType.isEquivalentTo(thatType)) {\n        return true;\n    }\n    if (thatType.isAllType()) {\n        return true;\n    }\n    if (thatType.isUnionType()) {\n        UnionType union \u003d thatType.toMaybeUnionType();\n        for (JSType element : union.alternates) {\n            if (thisType.isSubtype(element)) {\n                return true;\n            }\n        }\n    }\n    if (thatType instanceof NamedType) {\n        return thisType.isSubtype(((NamedType) thatType).getReferencedType());\n    }\n    return false;\n}",
      "path": "src/com/google/javascript/rhino/jstype/JSType.java",
      "functionStartLine": 912,
      "functionName": "isSubtype",
      "functionAnnotation": "",
      "functionDoc": "A generic implementation meant to be used as a helper for common subtyping\ncases.\n",
      "diff": "@@ -1,23 +1,23 @@\n static boolean isSubtype(JSType thisType, JSType thatType) {\n     if (thatType.isUnknownType()) {\n         return true;\n     }\n     if (thisType.isEquivalentTo(thatType)) {\n         return true;\n     }\n     if (thatType.isAllType()) {\n         return true;\n     }\n-    if (thatType instanceof UnionType) {\n-        UnionType union \u003d (UnionType) thatType;\n+    if (thatType.isUnionType()) {\n+        UnionType union \u003d thatType.toMaybeUnionType();\n         for (JSType element : union.alternates) {\n             if (thisType.isSubtype(element)) {\n                 return true;\n             }\n         }\n     }\n     if (thatType instanceof NamedType) {\n         return thisType.isSubtype(((NamedType) thatType).getReferencedType());\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d6227f739b8380f74663b2f536ed4a9649fd0841": {
      "type": "Ybodychange",
      "commitMessage": "\nAdd half-assed support for late-resolved typedefs of union types.\nThe fundamental issue is that NamedType is a proxy wrapper around\nObjectTypes, but has always been used for non-object types (like\ntypedef\u0027d unions.\nI eventually want to move towards the using UnresolvedTypes for type\nresolution. Under that system, the proxy wrapper gets thrown away.\nUnresolveTypes would also solve this issue. But that system breaks\na whole bunch of assumptions about hash codes and referential\ntransparency, so we\u0027re not ready for it yet.\n\nR\u003djohnlenz\nDELTA\u003d116  (75 added, 0 deleted, 41 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d304858\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@482 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/8/10, 1:19 PM",
      "commitName": "d6227f739b8380f74663b2f536ed4a9649fd0841",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "9/13/10, 11:12 AM",
      "commitNameOld": "4c6e1039b80859f17de5f3cbcfeba61ed8ea0485",
      "commitAuthorOld": "elbaum@google.com",
      "daysBetweenCommits": 25.09,
      "commitsBetweenForRepo": 57,
      "commitsBetweenForFile": 1,
      "actualSource": "static boolean isSubtype(JSType thisType, JSType thatType) {\n    if (thatType.isUnknownType()) {\n        return true;\n    }\n    if (thisType.isEquivalentTo(thatType)) {\n        return true;\n    }\n    if (thatType.isAllType()) {\n        return true;\n    }\n    if (thatType instanceof UnionType) {\n        UnionType union \u003d (UnionType) thatType;\n        for (JSType element : union.alternates) {\n            if (thisType.isSubtype(element)) {\n                return true;\n            }\n        }\n    }\n    if (thatType instanceof NamedType) {\n        return thisType.isSubtype(((NamedType) thatType).getReferencedType());\n    }\n    return false;\n}",
      "path": "src/com/google/javascript/rhino/jstype/JSType.java",
      "functionStartLine": 820,
      "functionName": "isSubtype",
      "functionAnnotation": "",
      "functionDoc": "A generic implementation meant to be used as a helper for common subtyping\ncases.\n",
      "diff": "@@ -1,23 +1,23 @@\n static boolean isSubtype(JSType thisType, JSType thatType) {\n     if (thatType.isUnknownType()) {\n         return true;\n     }\n     if (thisType.isEquivalentTo(thatType)) {\n         return true;\n     }\n     if (thatType.isAllType()) {\n         return true;\n     }\n     if (thatType instanceof UnionType) {\n         UnionType union \u003d (UnionType) thatType;\n         for (JSType element : union.alternates) {\n             if (thisType.isSubtype(element)) {\n                 return true;\n             }\n         }\n     }\n     if (thatType instanceof NamedType) {\n-        return thisType.isSubtype(((NamedType) thatType).referencedType);\n+        return thisType.isSubtype(((NamedType) thatType).getReferencedType());\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "cf5fd88f13f0b11625ac407f85cb58b36862e173": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/05/25 by nicksantos\n\n        start moving away from using Object#equals for type equality.\n\n        R\u003djohnlenz\n        DELTA\u003d445  (98 added, 3 deleted, 344 changed)\n\nChange on 2010/05/25 by acleung\n\n        Fix bug with resolving a member function of a resolved constructor.\n\n        R\u003djohnlenz\n        DELTA\u003d48  (48 added, 0 deleted, 0 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d12002\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@231 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/26/10, 8:26 AM",
      "commitName": "cf5fd88f13f0b11625ac407f85cb58b36862e173",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "5/4/10, 7:39 AM",
      "commitNameOld": "58c3e4ce1d17ec619bcc4964bdeebc676f93567d",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 22.03,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "actualSource": "static boolean isSubtype(JSType thisType, JSType thatType) {\n    if (thatType.isUnknownType()) {\n        return true;\n    }\n    if (thisType.isEquivalentTo(thatType)) {\n        return true;\n    }\n    if (thatType.isAllType()) {\n        return true;\n    }\n    if (thatType instanceof UnionType) {\n        UnionType union \u003d (UnionType) thatType;\n        for (JSType element : union.alternates) {\n            if (thisType.isSubtype(element)) {\n                return true;\n            }\n        }\n    }\n    if (thatType instanceof NamedType) {\n        return thisType.isSubtype(((NamedType) thatType).referencedType);\n    }\n    return false;\n}",
      "path": "src/com/google/javascript/rhino/jstype/JSType.java",
      "functionStartLine": 815,
      "functionName": "isSubtype",
      "functionAnnotation": "",
      "functionDoc": "A generic implementation meant to be used as a helper for common subtyping\ncases.\n",
      "diff": "@@ -1,23 +1,23 @@\n static boolean isSubtype(JSType thisType, JSType thatType) {\n     if (thatType.isUnknownType()) {\n         return true;\n     }\n-    if (thisType.equals(thatType)) {\n+    if (thisType.isEquivalentTo(thatType)) {\n         return true;\n     }\n     if (thatType.isAllType()) {\n         return true;\n     }\n     if (thatType instanceof UnionType) {\n         UnionType union \u003d (UnionType) thatType;\n         for (JSType element : union.alternates) {\n             if (thisType.isSubtype(element)) {\n                 return true;\n             }\n         }\n     }\n     if (thatType instanceof NamedType) {\n         return thisType.isSubtype(((NamedType) thatType).referencedType);\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,23 @@\n+static boolean isSubtype(JSType thisType, JSType thatType) {\n+    if (thatType.isUnknownType()) {\n+        return true;\n+    }\n+    if (thisType.equals(thatType)) {\n+        return true;\n+    }\n+    if (thatType.isAllType()) {\n+        return true;\n+    }\n+    if (thatType instanceof UnionType) {\n+        UnionType union \u003d (UnionType) thatType;\n+        for (JSType element : union.alternates) {\n+            if (thisType.isSubtype(element)) {\n+                return true;\n+            }\n+        }\n+    }\n+    if (thatType instanceof NamedType) {\n+        return thisType.isSubtype(((NamedType) thatType).referencedType);\n+    }\n+    return false;\n+}\n\\ No newline at end of file\n",
      "actualSource": "static boolean isSubtype(JSType thisType, JSType thatType) {\n    if (thatType.isUnknownType()) {\n        return true;\n    }\n    if (thisType.equals(thatType)) {\n        return true;\n    }\n    if (thatType.isAllType()) {\n        return true;\n    }\n    if (thatType instanceof UnionType) {\n        UnionType union \u003d (UnionType) thatType;\n        for (JSType element : union.alternates) {\n            if (thisType.isSubtype(element)) {\n                return true;\n            }\n        }\n    }\n    if (thatType instanceof NamedType) {\n        return thisType.isSubtype(((NamedType) thatType).referencedType);\n    }\n    return false;\n}",
      "path": "src/com/google/javascript/rhino/jstype/JSType.java",
      "functionStartLine": 796,
      "functionName": "isSubtype",
      "functionAnnotation": "",
      "functionDoc": "A generic implementation meant to be used as a helper for common subtyping\ncases.\n"
    }
  }
}