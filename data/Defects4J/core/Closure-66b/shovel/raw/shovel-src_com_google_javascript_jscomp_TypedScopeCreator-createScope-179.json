{
  "origin": "codeshovel",
  "repositoryName": "Closure-66b",
  "repositoryPath": "/tmp/Closure-66b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TypedScopeCreator.java",
  "functionName": "createScope",
  "functionId": "createScope___root-Node__parent-Scope",
  "sourceFilePath": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
  "functionAnnotation": "@Override",
  "functionDoc": "Creates a scope with all types declared. Declares newly discovered types\nand type properties in the type registry.\n",
  "functionStartLine": 179,
  "functionEndLine": 222,
  "numCommitsSeen": 57,
  "timeTaken": 4207,
  "changeHistory": [
    "e2da3b80158f6df8377e95ba54da85eb286e63d4",
    "bf8fc4533884f914182f861576808e71c18410cc",
    "07dd3707c1a61ff21de3f7a7f15585bbb5f70573",
    "41abf3b75893403d9e21c33d06e8dc233b5cf657",
    "eb5eae4438f49ffddd3c8be1413eeb9e7ecfb311",
    "5da32cba7b68d69acfc535f57f21d652475d256f",
    "efd3c178e471df6a689c1a50fbd7c404e778bfaa",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "e2da3b80158f6df8377e95ba54da85eb286e63d4": "Yannotationchange",
    "bf8fc4533884f914182f861576808e71c18410cc": "Ybodychange",
    "07dd3707c1a61ff21de3f7a7f15585bbb5f70573": "Ybodychange",
    "41abf3b75893403d9e21c33d06e8dc233b5cf657": "Ybodychange",
    "eb5eae4438f49ffddd3c8be1413eeb9e7ecfb311": "Ybodychange",
    "5da32cba7b68d69acfc535f57f21d652475d256f": "Ybodychange",
    "efd3c178e471df6a689c1a50fbd7c404e778bfaa": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e2da3b80158f6df8377e95ba54da85eb286e63d4": {
      "type": "Yannotationchange",
      "commitMessage": "\nMaking global typed scope regeneration, hot-swappable.\n\nR\u003dnicksantos\nDELTA\u003d163  (130 added, 16 deleted, 17 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2142\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1154 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/2/11, 9:10 AM",
      "commitName": "e2da3b80158f6df8377e95ba54da85eb286e63d4",
      "commitAuthor": "bashir@google.com",
      "commitDateOld": "6/1/11, 1:41 PM",
      "commitNameOld": "32c0f8b8b23713431c3866ab5769e735abe3a429",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.81,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic Scope createScope(Node root, Scope parent) {\n    Scope newScope \u003d null;\n    AbstractScopeBuilder scopeBuilder \u003d null;\n    if (parent \u003d\u003d null) {\n        newScope \u003d createInitialScope(root);\n        GlobalScopeBuilder globalScopeBuilder \u003d new GlobalScopeBuilder(newScope);\n        scopeBuilder \u003d globalScopeBuilder;\n        NodeTraversal.traverse(compiler, root, scopeBuilder);\n    } else {\n        newScope \u003d new Scope(parent, root);\n        LocalScopeBuilder localScopeBuilder \u003d new LocalScopeBuilder(newScope);\n        scopeBuilder \u003d localScopeBuilder;\n        localScopeBuilder.build();\n    }\n    scopeBuilder.resolveStubDeclarations();\n    scopeBuilder.resolveTypes();\n    for (Node functionNode : scopeBuilder.nonExternFunctions) {\n        JSType type \u003d functionNode.getJSType();\n        if (type !\u003d null \u0026\u0026 type instanceof FunctionType) {\n            FunctionType fnType \u003d (FunctionType) type;\n            ObjectType fnThisType \u003d fnType.getTypeOfThis();\n            if (!fnThisType.isUnknownType()) {\n                NodeTraversal.traverse(compiler, functionNode.getLastChild(), scopeBuilder.new CollectProperties(fnThisType));\n            }\n        }\n    }\n    if (parent \u003d\u003d null) {\n        codingConvention.defineDelegateProxyPrototypeProperties(typeRegistry, newScope, delegateProxyPrototypes);\n    }\n    return newScope;\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 179,
      "functionName": "createScope",
      "functionAnnotation": "@Override",
      "functionDoc": "Creates a scope with all types declared. Declares newly discovered types\nand type properties in the type registry.\n",
      "diff": "@@ -1,31 +1,32 @@\n+@Override\n public Scope createScope(Node root, Scope parent) {\n     Scope newScope \u003d null;\n     AbstractScopeBuilder scopeBuilder \u003d null;\n     if (parent \u003d\u003d null) {\n         newScope \u003d createInitialScope(root);\n         GlobalScopeBuilder globalScopeBuilder \u003d new GlobalScopeBuilder(newScope);\n         scopeBuilder \u003d globalScopeBuilder;\n         NodeTraversal.traverse(compiler, root, scopeBuilder);\n     } else {\n         newScope \u003d new Scope(parent, root);\n         LocalScopeBuilder localScopeBuilder \u003d new LocalScopeBuilder(newScope);\n         scopeBuilder \u003d localScopeBuilder;\n         localScopeBuilder.build();\n     }\n     scopeBuilder.resolveStubDeclarations();\n     scopeBuilder.resolveTypes();\n     for (Node functionNode : scopeBuilder.nonExternFunctions) {\n         JSType type \u003d functionNode.getJSType();\n         if (type !\u003d null \u0026\u0026 type instanceof FunctionType) {\n             FunctionType fnType \u003d (FunctionType) type;\n             ObjectType fnThisType \u003d fnType.getTypeOfThis();\n             if (!fnThisType.isUnknownType()) {\n                 NodeTraversal.traverse(compiler, functionNode.getLastChild(), scopeBuilder.new CollectProperties(fnThisType));\n             }\n         }\n     }\n     if (parent \u003d\u003d null) {\n         codingConvention.defineDelegateProxyPrototypeProperties(typeRegistry, newScope, delegateProxyPrototypes);\n     }\n     return newScope;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "",
        "newValue": "@Override"
      }
    },
    "bf8fc4533884f914182f861576808e71c18410cc": {
      "type": "Ybodychange",
      "commitMessage": "\nUnify global scope building and local scope building.\nThis goes a long way towards fixing issue 61.\nTry #2\n\nR\u003djohnlenz\nDELTA\u003d492  (242 added, 203 deleted, 47 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d215716\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@424 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/13/10, 5:41 PM",
      "commitName": "bf8fc4533884f914182f861576808e71c18410cc",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "9/13/10, 1:29 PM",
      "commitNameOld": "07dd3707c1a61ff21de3f7a7f15585bbb5f70573",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.17,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public Scope createScope(Node root, Scope parent) {\n    Scope newScope \u003d null;\n    AbstractScopeBuilder scopeBuilder \u003d null;\n    if (parent \u003d\u003d null) {\n        newScope \u003d createInitialScope(root);\n        GlobalScopeBuilder globalScopeBuilder \u003d new GlobalScopeBuilder(newScope);\n        scopeBuilder \u003d globalScopeBuilder;\n        NodeTraversal.traverse(compiler, root, scopeBuilder);\n    } else {\n        newScope \u003d new Scope(parent, root);\n        LocalScopeBuilder localScopeBuilder \u003d new LocalScopeBuilder(newScope);\n        scopeBuilder \u003d localScopeBuilder;\n        localScopeBuilder.build();\n    }\n    scopeBuilder.resolveStubDeclarations();\n    scopeBuilder.resolveTypes();\n    for (Node functionNode : scopeBuilder.nonExternFunctions) {\n        JSType type \u003d functionNode.getJSType();\n        if (type !\u003d null \u0026\u0026 type instanceof FunctionType) {\n            FunctionType fnType \u003d (FunctionType) type;\n            ObjectType fnThisType \u003d fnType.getTypeOfThis();\n            if (!fnThisType.isUnknownType()) {\n                NodeTraversal.traverse(compiler, functionNode.getLastChild(), scopeBuilder.new CollectProperties(fnThisType));\n            }\n        }\n    }\n    if (parent \u003d\u003d null) {\n        codingConvention.defineDelegateProxyPrototypeProperties(typeRegistry, newScope, delegateProxyPrototypes);\n    }\n    return newScope;\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 156,
      "functionName": "createScope",
      "functionAnnotation": "",
      "functionDoc": "Creates a scope with all types declared. Declares newly discovered types\nand type properties in the type registry.\n",
      "diff": "@@ -1,27 +1,31 @@\n public Scope createScope(Node root, Scope parent) {\n     Scope newScope \u003d null;\n+    AbstractScopeBuilder scopeBuilder \u003d null;\n     if (parent \u003d\u003d null) {\n         newScope \u003d createInitialScope(root);\n-        GlobalScopeBuilder scopeBuilder \u003d new GlobalScopeBuilder(newScope);\n+        GlobalScopeBuilder globalScopeBuilder \u003d new GlobalScopeBuilder(newScope);\n+        scopeBuilder \u003d globalScopeBuilder;\n         NodeTraversal.traverse(compiler, root, scopeBuilder);\n-        scopeBuilder.resolveStubDeclarations();\n-        scopeBuilder.resolveTypes();\n-        for (Node functionNode : scopeBuilder.nonExternFunctions) {\n-            JSType type \u003d functionNode.getJSType();\n-            if (type !\u003d null \u0026\u0026 type instanceof FunctionType) {\n-                FunctionType fnType \u003d (FunctionType) type;\n-                ObjectType fnThisType \u003d fnType.getTypeOfThis();\n-                if (!fnThisType.isUnknownType()) {\n-                    NodeTraversal.traverse(compiler, functionNode.getLastChild(), scopeBuilder.new CollectProperties(fnThisType));\n-                }\n-            }\n-        }\n-        codingConvention.defineDelegateProxyPrototypeProperties(typeRegistry, newScope, delegateProxyPrototypes);\n     } else {\n         newScope \u003d new Scope(parent, root);\n-        LocalScopeBuilder scopeBuilder \u003d new LocalScopeBuilder(newScope);\n-        scopeBuilder.build();\n-        scopeBuilder.resolveTypes();\n+        LocalScopeBuilder localScopeBuilder \u003d new LocalScopeBuilder(newScope);\n+        scopeBuilder \u003d localScopeBuilder;\n+        localScopeBuilder.build();\n+    }\n+    scopeBuilder.resolveStubDeclarations();\n+    scopeBuilder.resolveTypes();\n+    for (Node functionNode : scopeBuilder.nonExternFunctions) {\n+        JSType type \u003d functionNode.getJSType();\n+        if (type !\u003d null \u0026\u0026 type instanceof FunctionType) {\n+            FunctionType fnType \u003d (FunctionType) type;\n+            ObjectType fnThisType \u003d fnType.getTypeOfThis();\n+            if (!fnThisType.isUnknownType()) {\n+                NodeTraversal.traverse(compiler, functionNode.getLastChild(), scopeBuilder.new CollectProperties(fnThisType));\n+            }\n+        }\n+    }\n+    if (parent \u003d\u003d null) {\n+        codingConvention.defineDelegateProxyPrototypeProperties(typeRegistry, newScope, delegateProxyPrototypes);\n     }\n     return newScope;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "07dd3707c1a61ff21de3f7a7f15585bbb5f70573": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nmay be causing gmail issue, but not sure. rolling back to be safe.\n\n*** Original change description ***\n\nUnify global scope building and local scope building.\nThis goes a long way towards fixing issue 61\n\nDELTA\u003d507  (218 added, 257 deleted, 32 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d214753\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@423 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/13/10, 1:29 PM",
      "commitName": "07dd3707c1a61ff21de3f7a7f15585bbb5f70573",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "9/13/10, 12:20 PM",
      "commitNameOld": "41abf3b75893403d9e21c33d06e8dc233b5cf657",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.05,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public Scope createScope(Node root, Scope parent) {\n    Scope newScope \u003d null;\n    if (parent \u003d\u003d null) {\n        newScope \u003d createInitialScope(root);\n        GlobalScopeBuilder scopeBuilder \u003d new GlobalScopeBuilder(newScope);\n        NodeTraversal.traverse(compiler, root, scopeBuilder);\n        scopeBuilder.resolveStubDeclarations();\n        scopeBuilder.resolveTypes();\n        for (Node functionNode : scopeBuilder.nonExternFunctions) {\n            JSType type \u003d functionNode.getJSType();\n            if (type !\u003d null \u0026\u0026 type instanceof FunctionType) {\n                FunctionType fnType \u003d (FunctionType) type;\n                ObjectType fnThisType \u003d fnType.getTypeOfThis();\n                if (!fnThisType.isUnknownType()) {\n                    NodeTraversal.traverse(compiler, functionNode.getLastChild(), scopeBuilder.new CollectProperties(fnThisType));\n                }\n            }\n        }\n        codingConvention.defineDelegateProxyPrototypeProperties(typeRegistry, newScope, delegateProxyPrototypes);\n    } else {\n        newScope \u003d new Scope(parent, root);\n        LocalScopeBuilder scopeBuilder \u003d new LocalScopeBuilder(newScope);\n        scopeBuilder.build();\n        scopeBuilder.resolveTypes();\n    }\n    return newScope;\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 156,
      "functionName": "createScope",
      "functionAnnotation": "",
      "functionDoc": "Creates a scope with all types declared. Declares newly discovered types\nand type properties in the type registry.\n",
      "diff": "@@ -1,31 +1,27 @@\n public Scope createScope(Node root, Scope parent) {\n     Scope newScope \u003d null;\n-    AbstractScopeBuilder scopeBuilder \u003d null;\n     if (parent \u003d\u003d null) {\n         newScope \u003d createInitialScope(root);\n-        GlobalScopeBuilder globalScopeBuilder \u003d new GlobalScopeBuilder(newScope);\n-        scopeBuilder \u003d globalScopeBuilder;\n+        GlobalScopeBuilder scopeBuilder \u003d new GlobalScopeBuilder(newScope);\n         NodeTraversal.traverse(compiler, root, scopeBuilder);\n-    } else {\n-        newScope \u003d new Scope(parent, root);\n-        LocalScopeBuilder localScopeBuilder \u003d new LocalScopeBuilder(newScope);\n-        scopeBuilder \u003d localScopeBuilder;\n-        localScopeBuilder.build();\n-    }\n-    scopeBuilder.resolveStubDeclarations();\n-    scopeBuilder.resolveTypes();\n-    for (Node functionNode : scopeBuilder.nonExternFunctions) {\n-        JSType type \u003d functionNode.getJSType();\n-        if (type !\u003d null \u0026\u0026 type instanceof FunctionType) {\n-            FunctionType fnType \u003d (FunctionType) type;\n-            ObjectType fnThisType \u003d fnType.getTypeOfThis();\n-            if (!fnThisType.isUnknownType()) {\n-                NodeTraversal.traverse(compiler, functionNode.getLastChild(), scopeBuilder.new CollectProperties(fnThisType));\n+        scopeBuilder.resolveStubDeclarations();\n+        scopeBuilder.resolveTypes();\n+        for (Node functionNode : scopeBuilder.nonExternFunctions) {\n+            JSType type \u003d functionNode.getJSType();\n+            if (type !\u003d null \u0026\u0026 type instanceof FunctionType) {\n+                FunctionType fnType \u003d (FunctionType) type;\n+                ObjectType fnThisType \u003d fnType.getTypeOfThis();\n+                if (!fnThisType.isUnknownType()) {\n+                    NodeTraversal.traverse(compiler, functionNode.getLastChild(), scopeBuilder.new CollectProperties(fnThisType));\n+                }\n             }\n         }\n-    }\n-    if (parent \u003d\u003d null) {\n         codingConvention.defineDelegateProxyPrototypeProperties(typeRegistry, newScope, delegateProxyPrototypes);\n+    } else {\n+        newScope \u003d new Scope(parent, root);\n+        LocalScopeBuilder scopeBuilder \u003d new LocalScopeBuilder(newScope);\n+        scopeBuilder.build();\n+        scopeBuilder.resolveTypes();\n     }\n     return newScope;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "41abf3b75893403d9e21c33d06e8dc233b5cf657": {
      "type": "Ybodychange",
      "commitMessage": "\nUnify global scope building and local scope building.\nThis goes a long way towards fixing issue 61\n\nR\u003djohnlenz\nDELTA\u003d492  (242 added, 203 deleted, 47 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d215715\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@422 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/13/10, 12:20 PM",
      "commitName": "41abf3b75893403d9e21c33d06e8dc233b5cf657",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "9/13/10, 7:29 AM",
      "commitNameOld": "0a40e6661cd197e1cd0d3a3bccaa4c5313df8514",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.2,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "public Scope createScope(Node root, Scope parent) {\n    Scope newScope \u003d null;\n    AbstractScopeBuilder scopeBuilder \u003d null;\n    if (parent \u003d\u003d null) {\n        newScope \u003d createInitialScope(root);\n        GlobalScopeBuilder globalScopeBuilder \u003d new GlobalScopeBuilder(newScope);\n        scopeBuilder \u003d globalScopeBuilder;\n        NodeTraversal.traverse(compiler, root, scopeBuilder);\n    } else {\n        newScope \u003d new Scope(parent, root);\n        LocalScopeBuilder localScopeBuilder \u003d new LocalScopeBuilder(newScope);\n        scopeBuilder \u003d localScopeBuilder;\n        localScopeBuilder.build();\n    }\n    scopeBuilder.resolveStubDeclarations();\n    scopeBuilder.resolveTypes();\n    for (Node functionNode : scopeBuilder.nonExternFunctions) {\n        JSType type \u003d functionNode.getJSType();\n        if (type !\u003d null \u0026\u0026 type instanceof FunctionType) {\n            FunctionType fnType \u003d (FunctionType) type;\n            ObjectType fnThisType \u003d fnType.getTypeOfThis();\n            if (!fnThisType.isUnknownType()) {\n                NodeTraversal.traverse(compiler, functionNode.getLastChild(), scopeBuilder.new CollectProperties(fnThisType));\n            }\n        }\n    }\n    if (parent \u003d\u003d null) {\n        codingConvention.defineDelegateProxyPrototypeProperties(typeRegistry, newScope, delegateProxyPrototypes);\n    }\n    return newScope;\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 156,
      "functionName": "createScope",
      "functionAnnotation": "",
      "functionDoc": "Creates a scope with all types declared. Declares newly discovered types\nand type properties in the type registry.\n",
      "diff": "@@ -1,27 +1,31 @@\n public Scope createScope(Node root, Scope parent) {\n     Scope newScope \u003d null;\n+    AbstractScopeBuilder scopeBuilder \u003d null;\n     if (parent \u003d\u003d null) {\n         newScope \u003d createInitialScope(root);\n-        GlobalScopeBuilder scopeBuilder \u003d new GlobalScopeBuilder(newScope);\n+        GlobalScopeBuilder globalScopeBuilder \u003d new GlobalScopeBuilder(newScope);\n+        scopeBuilder \u003d globalScopeBuilder;\n         NodeTraversal.traverse(compiler, root, scopeBuilder);\n-        scopeBuilder.resolveStubDeclarations();\n-        scopeBuilder.resolveTypes();\n-        for (Node functionNode : scopeBuilder.nonExternFunctions) {\n-            JSType type \u003d functionNode.getJSType();\n-            if (type !\u003d null \u0026\u0026 type instanceof FunctionType) {\n-                FunctionType fnType \u003d (FunctionType) type;\n-                ObjectType fnThisType \u003d fnType.getTypeOfThis();\n-                if (!fnThisType.isUnknownType()) {\n-                    NodeTraversal.traverse(compiler, functionNode.getLastChild(), scopeBuilder.new CollectProperties(fnThisType));\n-                }\n-            }\n-        }\n-        codingConvention.defineDelegateProxyPrototypeProperties(typeRegistry, newScope, delegateProxyPrototypes);\n     } else {\n         newScope \u003d new Scope(parent, root);\n-        LocalScopeBuilder scopeBuilder \u003d new LocalScopeBuilder(newScope);\n-        scopeBuilder.build();\n-        scopeBuilder.resolveTypes();\n+        LocalScopeBuilder localScopeBuilder \u003d new LocalScopeBuilder(newScope);\n+        scopeBuilder \u003d localScopeBuilder;\n+        localScopeBuilder.build();\n+    }\n+    scopeBuilder.resolveStubDeclarations();\n+    scopeBuilder.resolveTypes();\n+    for (Node functionNode : scopeBuilder.nonExternFunctions) {\n+        JSType type \u003d functionNode.getJSType();\n+        if (type !\u003d null \u0026\u0026 type instanceof FunctionType) {\n+            FunctionType fnType \u003d (FunctionType) type;\n+            ObjectType fnThisType \u003d fnType.getTypeOfThis();\n+            if (!fnThisType.isUnknownType()) {\n+                NodeTraversal.traverse(compiler, functionNode.getLastChild(), scopeBuilder.new CollectProperties(fnThisType));\n+            }\n+        }\n+    }\n+    if (parent \u003d\u003d null) {\n+        codingConvention.defineDelegateProxyPrototypeProperties(typeRegistry, newScope, delegateProxyPrototypes);\n     }\n     return newScope;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "eb5eae4438f49ffddd3c8be1413eeb9e7ecfb311": {
      "type": "Ybodychange",
      "commitMessage": "Change on 2010/04/26 by nick\n\n        forbid getters and setters. fixes closure-compiler issue 154.\n\n        R\u003drobert\n        DELTA\u003d57  (55 added, 0 deleted, 2 changed)\n\nChange on 2010/04/26 by nick\n\n        create a helper method for getting the transitive closure of a\n        number of roots.\n\n        R\u003dalan\n        DELTA\u003d172  (168 added, 2 deleted, 2 changed)\n\nChange on 2010/04/26 by nick\n\n        create a new mechanism for type name resolution.\n\n        R\u003djohn\n        DELTA\u003d222  (210 added, 5 deleted, 7 changed)\n\nChange on 2010/04/27 by john\n\n        Remove unused variables in uncalled global functions when not removing\n        unused global names. Fixes issue 155.\n\n        R\u003dnick\n        DELTA\u003d42  (34 added, 3 deleted, 5 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003daepekd\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@199 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/27/10, 12:02 PM",
      "commitName": "eb5eae4438f49ffddd3c8be1413eeb9e7ecfb311",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/23/10, 11:31 AM",
      "commitNameOld": "ebb59a97610015bc41bda7f458dd1428a3a3e335",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 4.02,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public Scope createScope(Node root, Scope parent) {\n    Scope newScope \u003d null;\n    if (parent \u003d\u003d null) {\n        newScope \u003d createInitialScope(root);\n        GlobalScopeBuilder scopeBuilder \u003d new GlobalScopeBuilder(newScope);\n        NodeTraversal.traverse(compiler, root, scopeBuilder);\n        scopeBuilder.resolveStubDeclarations();\n        scopeBuilder.resolveTypes();\n        for (Node functionNode : scopeBuilder.nonExternFunctions) {\n            JSType type \u003d functionNode.getJSType();\n            if (type !\u003d null \u0026\u0026 type instanceof FunctionType) {\n                FunctionType fnType \u003d (FunctionType) type;\n                ObjectType fnThisType \u003d fnType.getTypeOfThis();\n                if (!fnThisType.isUnknownType()) {\n                    NodeTraversal.traverse(compiler, functionNode.getLastChild(), scopeBuilder.new CollectProperties(fnThisType));\n                }\n            }\n        }\n        codingConvention.defineDelegateProxyPrototypeProperties(typeRegistry, newScope, delegateProxyPrototypes);\n    } else {\n        newScope \u003d new Scope(parent, root);\n        LocalScopeBuilder scopeBuilder \u003d new LocalScopeBuilder(newScope);\n        scopeBuilder.build();\n        scopeBuilder.resolveTypes();\n    }\n    return newScope;\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 148,
      "functionName": "createScope",
      "functionAnnotation": "",
      "functionDoc": "Creates a scope with all types declared. Declares newly discovered types\nand type properties in the type registry.\n",
      "diff": "@@ -1,27 +1,27 @@\n public Scope createScope(Node root, Scope parent) {\n     Scope newScope \u003d null;\n     if (parent \u003d\u003d null) {\n         newScope \u003d createInitialScope(root);\n         GlobalScopeBuilder scopeBuilder \u003d new GlobalScopeBuilder(newScope);\n         NodeTraversal.traverse(compiler, root, scopeBuilder);\n         scopeBuilder.resolveStubDeclarations();\n         scopeBuilder.resolveTypes();\n         for (Node functionNode : scopeBuilder.nonExternFunctions) {\n             JSType type \u003d functionNode.getJSType();\n             if (type !\u003d null \u0026\u0026 type instanceof FunctionType) {\n                 FunctionType fnType \u003d (FunctionType) type;\n                 ObjectType fnThisType \u003d fnType.getTypeOfThis();\n                 if (!fnThisType.isUnknownType()) {\n                     NodeTraversal.traverse(compiler, functionNode.getLastChild(), scopeBuilder.new CollectProperties(fnThisType));\n                 }\n             }\n         }\n-        codingConvention.defineDelegateProxyProperties(typeRegistry, newScope, delegateProxyMap);\n+        codingConvention.defineDelegateProxyPrototypeProperties(typeRegistry, newScope, delegateProxyPrototypes);\n     } else {\n         newScope \u003d new Scope(parent, root);\n         LocalScopeBuilder scopeBuilder \u003d new LocalScopeBuilder(newScope);\n         scopeBuilder.build();\n         scopeBuilder.resolveTypes();\n     }\n     return newScope;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5da32cba7b68d69acfc535f57f21d652475d256f": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/04/19 by anatol\n\n        Replace {@inheritDoc} javadoc annotation with @Override.\n        @Override is better as it implies documentation inheritance plus checks\n        that the parent method exists at the compile-time.\n\n        R\u003dnick\n        DELTA\u003d137  (0 added, 70 deleted, 67 changed)\n\nChange on 2010/04/19 by nick\n\n        Change how we resolve types.\n        Instead of leaving shell proxy types around, unbox the proxy types.\n\n        R\u003dandrew,john\n        DELTA\u003d103  (84 added, 5 deleted, 14 changed)\n\nChange on 2010/04/19 by acleung\n\n        Enable Flow Sensitive Inlining by default.\n\n        R\u003djohn\n        DELTA\u003d1  (0 added, 0 deleted, 1 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dpqvliw\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@191 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/19/10, 4:28 PM",
      "commitName": "5da32cba7b68d69acfc535f57f21d652475d256f",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/14/10, 4:53 PM",
      "commitNameOld": "43859717972907dd1ecebd8dca6e05036386e28b",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 4.98,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "public Scope createScope(Node root, Scope parent) {\n    Scope newScope \u003d null;\n    if (parent \u003d\u003d null) {\n        newScope \u003d createInitialScope(root);\n        GlobalScopeBuilder scopeBuilder \u003d new GlobalScopeBuilder(newScope);\n        NodeTraversal.traverse(compiler, root, scopeBuilder);\n        scopeBuilder.resolveStubDeclarations();\n        scopeBuilder.resolveTypes();\n        for (Node functionNode : scopeBuilder.nonExternFunctions) {\n            JSType type \u003d functionNode.getJSType();\n            if (type !\u003d null \u0026\u0026 type instanceof FunctionType) {\n                FunctionType fnType \u003d (FunctionType) type;\n                ObjectType fnThisType \u003d fnType.getTypeOfThis();\n                if (!fnThisType.isUnknownType()) {\n                    NodeTraversal.traverse(compiler, functionNode.getLastChild(), scopeBuilder.new CollectProperties(fnThisType));\n                }\n            }\n        }\n        codingConvention.defineDelegateProxyProperties(typeRegistry, newScope, delegateProxyMap);\n    } else {\n        newScope \u003d new Scope(parent, root);\n        LocalScopeBuilder scopeBuilder \u003d new LocalScopeBuilder(newScope);\n        scopeBuilder.build();\n        scopeBuilder.resolveTypes();\n    }\n    return newScope;\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 150,
      "functionName": "createScope",
      "functionAnnotation": "",
      "functionDoc": "Creates a scope with all types declared. Declares newly discovered types\nand type properties in the type registry.\n",
      "diff": "@@ -1,25 +1,27 @@\n public Scope createScope(Node root, Scope parent) {\n     Scope newScope \u003d null;\n     if (parent \u003d\u003d null) {\n         newScope \u003d createInitialScope(root);\n         GlobalScopeBuilder scopeBuilder \u003d new GlobalScopeBuilder(newScope);\n         NodeTraversal.traverse(compiler, root, scopeBuilder);\n         scopeBuilder.resolveStubDeclarations();\n+        scopeBuilder.resolveTypes();\n         for (Node functionNode : scopeBuilder.nonExternFunctions) {\n             JSType type \u003d functionNode.getJSType();\n             if (type !\u003d null \u0026\u0026 type instanceof FunctionType) {\n                 FunctionType fnType \u003d (FunctionType) type;\n                 ObjectType fnThisType \u003d fnType.getTypeOfThis();\n                 if (!fnThisType.isUnknownType()) {\n                     NodeTraversal.traverse(compiler, functionNode.getLastChild(), scopeBuilder.new CollectProperties(fnThisType));\n                 }\n             }\n         }\n         codingConvention.defineDelegateProxyProperties(typeRegistry, newScope, delegateProxyMap);\n     } else {\n         newScope \u003d new Scope(parent, root);\n-        (new LocalScopeBuilder(newScope)).build();\n+        LocalScopeBuilder scopeBuilder \u003d new LocalScopeBuilder(newScope);\n+        scopeBuilder.build();\n+        scopeBuilder.resolveTypes();\n     }\n-    typeRegistry.resolveTypesInScope(newScope);\n     return newScope;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "efd3c178e471df6a689c1a50fbd7c404e778bfaa": {
      "type": "Ybodychange",
      "commitMessage": "Better number printing.\nAdd flags for fine-grained warning controls.\nBetter type-declaration finding.\nAdded some missing externs.\nMarked externs that don\u0027t have side effects.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@10 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/13/09, 11:38 AM",
      "commitName": "efd3c178e471df6a689c1a50fbd7c404e778bfaa",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/6/09, 5:24 PM",
      "commitNameOld": "0b7eccf2fd3a9293d7b513fbb766d7bc06abd7e0",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 6.76,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "public Scope createScope(Node root, Scope parent) {\n    Scope newScope \u003d null;\n    if (parent \u003d\u003d null) {\n        newScope \u003d createInitialScope(root);\n        GlobalScopeBuilder scopeBuilder \u003d new GlobalScopeBuilder(newScope);\n        NodeTraversal.traverse(compiler, root, scopeBuilder);\n        scopeBuilder.resolveStubDeclarations();\n        for (Node functionNode : scopeBuilder.nonExternFunctions) {\n            JSType type \u003d functionNode.getJSType();\n            if (type !\u003d null \u0026\u0026 type instanceof FunctionType) {\n                FunctionType fnType \u003d (FunctionType) type;\n                ObjectType fnThisType \u003d fnType.getTypeOfThis();\n                if (!fnThisType.isUnknownType()) {\n                    NodeTraversal.traverse(compiler, functionNode.getLastChild(), scopeBuilder.new CollectProperties(fnThisType));\n                }\n            }\n        }\n        codingConvention.defineDelegateProxyProperties(typeRegistry, newScope, delegateProxyMap);\n    } else {\n        newScope \u003d new Scope(parent, root);\n        (new LocalScopeBuilder(newScope)).build();\n    }\n    typeRegistry.resolveTypesInScope(newScope);\n    return newScope;\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 121,
      "functionName": "createScope",
      "functionAnnotation": "",
      "functionDoc": "Creates a scope with all types declared. Declares newly discovered types\nand type properties in the type registry.\n",
      "diff": "@@ -1,24 +1,25 @@\n public Scope createScope(Node root, Scope parent) {\n     Scope newScope \u003d null;\n     if (parent \u003d\u003d null) {\n         newScope \u003d createInitialScope(root);\n         GlobalScopeBuilder scopeBuilder \u003d new GlobalScopeBuilder(newScope);\n         NodeTraversal.traverse(compiler, root, scopeBuilder);\n+        scopeBuilder.resolveStubDeclarations();\n         for (Node functionNode : scopeBuilder.nonExternFunctions) {\n             JSType type \u003d functionNode.getJSType();\n             if (type !\u003d null \u0026\u0026 type instanceof FunctionType) {\n                 FunctionType fnType \u003d (FunctionType) type;\n                 ObjectType fnThisType \u003d fnType.getTypeOfThis();\n                 if (!fnThisType.isUnknownType()) {\n                     NodeTraversal.traverse(compiler, functionNode.getLastChild(), scopeBuilder.new CollectProperties(fnThisType));\n                 }\n             }\n         }\n         codingConvention.defineDelegateProxyProperties(typeRegistry, newScope, delegateProxyMap);\n     } else {\n         newScope \u003d new Scope(parent, root);\n         (new LocalScopeBuilder(newScope)).build();\n     }\n     typeRegistry.resolveTypesInScope(newScope);\n     return newScope;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,24 @@\n+public Scope createScope(Node root, Scope parent) {\n+    Scope newScope \u003d null;\n+    if (parent \u003d\u003d null) {\n+        newScope \u003d createInitialScope(root);\n+        GlobalScopeBuilder scopeBuilder \u003d new GlobalScopeBuilder(newScope);\n+        NodeTraversal.traverse(compiler, root, scopeBuilder);\n+        for (Node functionNode : scopeBuilder.nonExternFunctions) {\n+            JSType type \u003d functionNode.getJSType();\n+            if (type !\u003d null \u0026\u0026 type instanceof FunctionType) {\n+                FunctionType fnType \u003d (FunctionType) type;\n+                ObjectType fnThisType \u003d fnType.getTypeOfThis();\n+                if (!fnThisType.isUnknownType()) {\n+                    NodeTraversal.traverse(compiler, functionNode.getLastChild(), scopeBuilder.new CollectProperties(fnThisType));\n+                }\n+            }\n+        }\n+        codingConvention.defineDelegateProxyProperties(typeRegistry, newScope, delegateProxyMap);\n+    } else {\n+        newScope \u003d new Scope(parent, root);\n+        (new LocalScopeBuilder(newScope)).build();\n+    }\n+    typeRegistry.resolveTypesInScope(newScope);\n+    return newScope;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public Scope createScope(Node root, Scope parent) {\n    Scope newScope \u003d null;\n    if (parent \u003d\u003d null) {\n        newScope \u003d createInitialScope(root);\n        GlobalScopeBuilder scopeBuilder \u003d new GlobalScopeBuilder(newScope);\n        NodeTraversal.traverse(compiler, root, scopeBuilder);\n        for (Node functionNode : scopeBuilder.nonExternFunctions) {\n            JSType type \u003d functionNode.getJSType();\n            if (type !\u003d null \u0026\u0026 type instanceof FunctionType) {\n                FunctionType fnType \u003d (FunctionType) type;\n                ObjectType fnThisType \u003d fnType.getTypeOfThis();\n                if (!fnThisType.isUnknownType()) {\n                    NodeTraversal.traverse(compiler, functionNode.getLastChild(), scopeBuilder.new CollectProperties(fnThisType));\n                }\n            }\n        }\n        codingConvention.defineDelegateProxyProperties(typeRegistry, newScope, delegateProxyMap);\n    } else {\n        newScope \u003d new Scope(parent, root);\n        (new LocalScopeBuilder(newScope)).build();\n    }\n    typeRegistry.resolveTypesInScope(newScope);\n    return newScope;\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 121,
      "functionName": "createScope",
      "functionAnnotation": "",
      "functionDoc": "Creates a scope with all types declared. Declares newly discovered types\nand type properties in the type registry.\n"
    }
  }
}