{
  "origin": "codeshovel",
  "repositoryName": "Closure-66b",
  "repositoryPath": "/tmp/Closure-66b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NodeUtil.java",
  "functionName": "getStringValue",
  "functionId": "getStringValue___n-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/NodeUtil.java",
  "functionAnnotation": "",
  "functionDoc": "Gets the value of a node as a String, or null if it cannot be converted.\nWhen it returns a non-null String, this method effectively emulates the\n\u003ccode\u003eString()\u003c/code\u003e JavaScript cast function.\n",
  "functionStartLine": 166,
  "functionEndLine": 206,
  "numCommitsSeen": 87,
  "timeTaken": 6905,
  "changeHistory": [
    "41acde3e8e5e8d37ade765b41d9fd29861f03e5e",
    "86a7d25f3cc1177f35dc6480260fb807912c03fa",
    "db7e51f90e44be275b568d0b512e9778d6d6b253",
    "e7ce7f710e1bf297f1a4258b53f22f550fc1f2e3",
    "269cfb2caf348e877171c80254c238525b269631",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "41acde3e8e5e8d37ade765b41d9fd29861f03e5e": "Ybodychange",
    "86a7d25f3cc1177f35dc6480260fb807912c03fa": "Ybodychange",
    "db7e51f90e44be275b568d0b512e9778d6d6b253": "Ybodychange",
    "e7ce7f710e1bf297f1a4258b53f22f550fc1f2e3": "Ybodychange",
    "269cfb2caf348e877171c80254c238525b269631": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "41acde3e8e5e8d37ade765b41d9fd29861f03e5e": {
      "type": "Ybodychange",
      "commitMessage": "\nDefine number keys in object literals to be quoted string nodes. Tagged with NUMBER_PROP\nFixes issue 347\n\nR\u003dnicksantos\nDELTA\u003d229  (157 added, 19 deleted, 53 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1252\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@966 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/4/11, 2:26 PM",
      "commitName": "41acde3e8e5e8d37ade765b41d9fd29861f03e5e",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "4/4/11, 10:02 AM",
      "commitNameOld": "c6cc58a9bc617483366141386e047b085b4e83ff",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 0.18,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "static String getStringValue(Node n) {\n    switch(n.getType()) {\n        case Token.STRING:\n            return n.getString();\n        case Token.NAME:\n            String name \u003d n.getString();\n            if (\"undefined\".equals(name) || \"Infinity\".equals(name) || \"NaN\".equals(name)) {\n                return name;\n            }\n            break;\n        case Token.NUMBER:\n            return getStringValue(n.getDouble());\n        case Token.FALSE:\n        case Token.TRUE:\n        case Token.NULL:\n            return Node.tokenToName(n.getType());\n        case Token.VOID:\n            return \"undefined\";\n        case Token.NOT:\n            TernaryValue child \u003d getPureBooleanValue(n.getFirstChild());\n            if (child !\u003d TernaryValue.UNKNOWN) {\n                return child.toBoolean(true) ? \"false\" : \"true\";\n            }\n            break;\n        case Token.ARRAYLIT:\n            return arrayToString(n);\n        case Token.OBJECTLIT:\n            return \"[object Object]\";\n    }\n    return null;\n}",
      "path": "src/com/google/javascript/jscomp/NodeUtil.java",
      "functionStartLine": 166,
      "functionName": "getStringValue",
      "functionAnnotation": "",
      "functionDoc": "Gets the value of a node as a String, or null if it cannot be converted.\nWhen it returns a non-null String, this method effectively emulates the\n\u003ccode\u003eString()\u003c/code\u003e JavaScript cast function.\n",
      "diff": "@@ -1,37 +1,31 @@\n static String getStringValue(Node n) {\n     switch(n.getType()) {\n         case Token.STRING:\n             return n.getString();\n         case Token.NAME:\n             String name \u003d n.getString();\n             if (\"undefined\".equals(name) || \"Infinity\".equals(name) || \"NaN\".equals(name)) {\n                 return name;\n             }\n             break;\n         case Token.NUMBER:\n-            double value \u003d n.getDouble();\n-            long longValue \u003d (long) value;\n-            if (longValue \u003d\u003d value) {\n-                return Long.toString(longValue);\n-            } else {\n-                return Double.toString(n.getDouble());\n-            }\n+            return getStringValue(n.getDouble());\n         case Token.FALSE:\n         case Token.TRUE:\n         case Token.NULL:\n             return Node.tokenToName(n.getType());\n         case Token.VOID:\n             return \"undefined\";\n         case Token.NOT:\n             TernaryValue child \u003d getPureBooleanValue(n.getFirstChild());\n             if (child !\u003d TernaryValue.UNKNOWN) {\n                 return child.toBoolean(true) ? \"false\" : \"true\";\n             }\n             break;\n         case Token.ARRAYLIT:\n             return arrayToString(n);\n         case Token.OBJECTLIT:\n             return \"[object Object]\";\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "86a7d25f3cc1177f35dc6480260fb807912c03fa": {
      "type": "Ybodychange",
      "commitMessage": "\nFix bad folding of expressions containing object and array literals with side-effects.\n\nR\u003dnicksantos\nDELTA\u003d144  (94 added, 0 deleted, 50 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1088\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@941 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/25/11, 4:27 PM",
      "commitName": "86a7d25f3cc1177f35dc6480260fb807912c03fa",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "3/21/11, 2:54 PM",
      "commitNameOld": "b41c7bd823a9d7df8b9ec276ff3ce4286ab1e890",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 4.07,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "actualSource": "static String getStringValue(Node n) {\n    switch(n.getType()) {\n        case Token.STRING:\n            return n.getString();\n        case Token.NAME:\n            String name \u003d n.getString();\n            if (\"undefined\".equals(name) || \"Infinity\".equals(name) || \"NaN\".equals(name)) {\n                return name;\n            }\n            break;\n        case Token.NUMBER:\n            double value \u003d n.getDouble();\n            long longValue \u003d (long) value;\n            if (longValue \u003d\u003d value) {\n                return Long.toString(longValue);\n            } else {\n                return Double.toString(n.getDouble());\n            }\n        case Token.FALSE:\n        case Token.TRUE:\n        case Token.NULL:\n            return Node.tokenToName(n.getType());\n        case Token.VOID:\n            return \"undefined\";\n        case Token.NOT:\n            TernaryValue child \u003d getPureBooleanValue(n.getFirstChild());\n            if (child !\u003d TernaryValue.UNKNOWN) {\n                return child.toBoolean(true) ? \"false\" : \"true\";\n            }\n            break;\n        case Token.ARRAYLIT:\n            return arrayToString(n);\n        case Token.OBJECTLIT:\n            return \"[object Object]\";\n    }\n    return null;\n}",
      "path": "src/com/google/javascript/jscomp/NodeUtil.java",
      "functionStartLine": 165,
      "functionName": "getStringValue",
      "functionAnnotation": "",
      "functionDoc": "Gets the value of a node as a String, or null if it cannot be converted.\nWhen it returns a non-null String, this method effectively emulates the\n\u003ccode\u003eString()\u003c/code\u003e JavaScript cast function.\n",
      "diff": "@@ -1,37 +1,37 @@\n static String getStringValue(Node n) {\n     switch(n.getType()) {\n         case Token.STRING:\n             return n.getString();\n         case Token.NAME:\n             String name \u003d n.getString();\n             if (\"undefined\".equals(name) || \"Infinity\".equals(name) || \"NaN\".equals(name)) {\n                 return name;\n             }\n             break;\n         case Token.NUMBER:\n             double value \u003d n.getDouble();\n             long longValue \u003d (long) value;\n             if (longValue \u003d\u003d value) {\n                 return Long.toString(longValue);\n             } else {\n                 return Double.toString(n.getDouble());\n             }\n         case Token.FALSE:\n         case Token.TRUE:\n         case Token.NULL:\n             return Node.tokenToName(n.getType());\n         case Token.VOID:\n             return \"undefined\";\n         case Token.NOT:\n-            TernaryValue child \u003d getBooleanValue(n.getFirstChild());\n+            TernaryValue child \u003d getPureBooleanValue(n.getFirstChild());\n             if (child !\u003d TernaryValue.UNKNOWN) {\n                 return child.toBoolean(true) ? \"false\" : \"true\";\n             }\n             break;\n         case Token.ARRAYLIT:\n             return arrayToString(n);\n         case Token.OBJECTLIT:\n             return \"[object Object]\";\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "db7e51f90e44be275b568d0b512e9778d6d6b253": {
      "type": "Ybodychange",
      "commitMessage": "\nFix issue with improper join of strings containing null and undefined.\nDefine a method for converting array literals to strings.\n\nR\u003dacleung\nDELTA\u003d174  (122 added, 38 deleted, 14 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d522\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@783 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/15/11, 10:52 AM",
      "commitName": "db7e51f90e44be275b568d0b512e9778d6d6b253",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "2/10/11, 4:32 PM",
      "commitNameOld": "e7ce7f710e1bf297f1a4258b53f22f550fc1f2e3",
      "commitAuthorOld": "acleung@google.com",
      "daysBetweenCommits": 4.76,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "static String getStringValue(Node n) {\n    switch(n.getType()) {\n        case Token.STRING:\n            return n.getString();\n        case Token.NAME:\n            String name \u003d n.getString();\n            if (\"undefined\".equals(name) || \"Infinity\".equals(name) || \"NaN\".equals(name)) {\n                return name;\n            }\n            break;\n        case Token.NUMBER:\n            double value \u003d n.getDouble();\n            long longValue \u003d (long) value;\n            if (longValue \u003d\u003d value) {\n                return Long.toString(longValue);\n            } else {\n                return Double.toString(n.getDouble());\n            }\n        case Token.FALSE:\n        case Token.TRUE:\n        case Token.NULL:\n            return Node.tokenToName(n.getType());\n        case Token.VOID:\n            return \"undefined\";\n        case Token.NOT:\n            TernaryValue child \u003d getBooleanValue(n.getFirstChild());\n            if (child !\u003d TernaryValue.UNKNOWN) {\n                return child.toBoolean(true) ? \"false\" : \"true\";\n            }\n            break;\n        case Token.ARRAYLIT:\n            return arrayToString(n);\n        case Token.OBJECTLIT:\n            return \"[object Object]\";\n    }\n    return null;\n}",
      "path": "src/com/google/javascript/jscomp/NodeUtil.java",
      "functionStartLine": 154,
      "functionName": "getStringValue",
      "functionAnnotation": "",
      "functionDoc": "Gets the value of a node as a String, or null if it cannot be converted.\nWhen it returns a non-null String, this method effectively emulates the\n\u003ccode\u003eString()\u003c/code\u003e JavaScript cast function.\n",
      "diff": "@@ -1,33 +1,37 @@\n static String getStringValue(Node n) {\n     switch(n.getType()) {\n         case Token.STRING:\n             return n.getString();\n         case Token.NAME:\n             String name \u003d n.getString();\n             if (\"undefined\".equals(name) || \"Infinity\".equals(name) || \"NaN\".equals(name)) {\n                 return name;\n             }\n             break;\n         case Token.NUMBER:\n             double value \u003d n.getDouble();\n             long longValue \u003d (long) value;\n             if (longValue \u003d\u003d value) {\n                 return Long.toString(longValue);\n             } else {\n                 return Double.toString(n.getDouble());\n             }\n         case Token.FALSE:\n         case Token.TRUE:\n         case Token.NULL:\n             return Node.tokenToName(n.getType());\n         case Token.VOID:\n             return \"undefined\";\n         case Token.NOT:\n             TernaryValue child \u003d getBooleanValue(n.getFirstChild());\n             if (child !\u003d TernaryValue.UNKNOWN) {\n                 return child.toBoolean(true) ? \"false\" : \"true\";\n             }\n             break;\n+        case Token.ARRAYLIT:\n+            return arrayToString(n);\n+        case Token.OBJECTLIT:\n+            return \"[object Object]\";\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e7ce7f710e1bf297f1a4258b53f22f550fc1f2e3": {
      "type": "Ybodychange",
      "commitMessage": "\nUse !0 and !1 for true and false.\n\nR\u003djohnlenz\nDELTA\u003d97  (81 added, 0 deleted, 16 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d500\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@775 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/10/11, 4:32 PM",
      "commitName": "e7ce7f710e1bf297f1a4258b53f22f550fc1f2e3",
      "commitAuthor": "acleung@google.com",
      "commitDateOld": "2/7/11, 2:59 PM",
      "commitNameOld": "1a7fbd18b47c102152869c3b046b65ff0f12fc43",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 3.06,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "static String getStringValue(Node n) {\n    switch(n.getType()) {\n        case Token.STRING:\n            return n.getString();\n        case Token.NAME:\n            String name \u003d n.getString();\n            if (\"undefined\".equals(name) || \"Infinity\".equals(name) || \"NaN\".equals(name)) {\n                return name;\n            }\n            break;\n        case Token.NUMBER:\n            double value \u003d n.getDouble();\n            long longValue \u003d (long) value;\n            if (longValue \u003d\u003d value) {\n                return Long.toString(longValue);\n            } else {\n                return Double.toString(n.getDouble());\n            }\n        case Token.FALSE:\n        case Token.TRUE:\n        case Token.NULL:\n            return Node.tokenToName(n.getType());\n        case Token.VOID:\n            return \"undefined\";\n        case Token.NOT:\n            TernaryValue child \u003d getBooleanValue(n.getFirstChild());\n            if (child !\u003d TernaryValue.UNKNOWN) {\n                return child.toBoolean(true) ? \"false\" : \"true\";\n            }\n            break;\n    }\n    return null;\n}",
      "path": "src/com/google/javascript/jscomp/NodeUtil.java",
      "functionStartLine": 154,
      "functionName": "getStringValue",
      "functionAnnotation": "",
      "functionDoc": "Gets the value of a node as a String, or null if it cannot be converted.\nWhen it returns a non-null String, this method effectively emulates the\n\u003ccode\u003eString()\u003c/code\u003e JavaScript cast function.\n",
      "diff": "@@ -1,27 +1,33 @@\n static String getStringValue(Node n) {\n     switch(n.getType()) {\n         case Token.STRING:\n             return n.getString();\n         case Token.NAME:\n             String name \u003d n.getString();\n             if (\"undefined\".equals(name) || \"Infinity\".equals(name) || \"NaN\".equals(name)) {\n                 return name;\n             }\n             break;\n         case Token.NUMBER:\n             double value \u003d n.getDouble();\n             long longValue \u003d (long) value;\n             if (longValue \u003d\u003d value) {\n                 return Long.toString(longValue);\n             } else {\n                 return Double.toString(n.getDouble());\n             }\n         case Token.FALSE:\n         case Token.TRUE:\n         case Token.NULL:\n             return Node.tokenToName(n.getType());\n         case Token.VOID:\n             return \"undefined\";\n+        case Token.NOT:\n+            TernaryValue child \u003d getBooleanValue(n.getFirstChild());\n+            if (child !\u003d TernaryValue.UNKNOWN) {\n+                return child.toBoolean(true) ? \"false\" : \"true\";\n+            }\n+            break;\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "269cfb2caf348e877171c80254c238525b269631": {
      "type": "Ybodychange",
      "commitMessage": "\nAdd a little santity to NodeUtil.getStringValue.\n\nR\u003dnicksantos\nDELTA\u003d14  (13 added, 1 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d96\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@608 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/8/10, 12:04 PM",
      "commitName": "269cfb2caf348e877171c80254c238525b269631",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "12/6/10, 12:43 PM",
      "commitNameOld": "f42e3e4ac6273bf9f25392b34de24672e5d56883",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 1.97,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "static String getStringValue(Node n) {\n    switch(n.getType()) {\n        case Token.STRING:\n            return n.getString();\n        case Token.NAME:\n            String name \u003d n.getString();\n            if (\"undefined\".equals(name) || \"Infinity\".equals(name) || \"NaN\".equals(name)) {\n                return name;\n            }\n            break;\n        case Token.NUMBER:\n            double value \u003d n.getDouble();\n            long longValue \u003d (long) value;\n            if (longValue \u003d\u003d value) {\n                return Long.toString(longValue);\n            } else {\n                return Double.toString(n.getDouble());\n            }\n        case Token.FALSE:\n        case Token.TRUE:\n        case Token.NULL:\n            return Node.tokenToName(n.getType());\n        case Token.VOID:\n            return \"undefined\";\n    }\n    return null;\n}",
      "path": "src/com/google/javascript/jscomp/NodeUtil.java",
      "functionStartLine": 149,
      "functionName": "getStringValue",
      "functionAnnotation": "",
      "functionDoc": "Gets the value of a node as a String, or null if it cannot be converted.\nWhen it returns a non-null String, this method effectively emulates the\n\u003ccode\u003eString()\u003c/code\u003e JavaScript cast function.\n",
      "diff": "@@ -1,22 +1,27 @@\n static String getStringValue(Node n) {\n     switch(n.getType()) {\n-        case Token.NAME:\n         case Token.STRING:\n             return n.getString();\n+        case Token.NAME:\n+            String name \u003d n.getString();\n+            if (\"undefined\".equals(name) || \"Infinity\".equals(name) || \"NaN\".equals(name)) {\n+                return name;\n+            }\n+            break;\n         case Token.NUMBER:\n             double value \u003d n.getDouble();\n             long longValue \u003d (long) value;\n             if (longValue \u003d\u003d value) {\n                 return Long.toString(longValue);\n             } else {\n                 return Double.toString(n.getDouble());\n             }\n         case Token.FALSE:\n         case Token.TRUE:\n         case Token.NULL:\n             return Node.tokenToName(n.getType());\n         case Token.VOID:\n             return \"undefined\";\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,22 @@\n+static String getStringValue(Node n) {\n+    switch(n.getType()) {\n+        case Token.NAME:\n+        case Token.STRING:\n+            return n.getString();\n+        case Token.NUMBER:\n+            double value \u003d n.getDouble();\n+            long longValue \u003d (long) value;\n+            if (longValue \u003d\u003d value) {\n+                return Long.toString(longValue);\n+            } else {\n+                return Double.toString(n.getDouble());\n+            }\n+        case Token.FALSE:\n+        case Token.TRUE:\n+        case Token.NULL:\n+            return Node.tokenToName(n.getType());\n+        case Token.VOID:\n+            return \"undefined\";\n+    }\n+    return null;\n+}\n\\ No newline at end of file\n",
      "actualSource": "static String getStringValue(Node n) {\n    switch(n.getType()) {\n        case Token.NAME:\n        case Token.STRING:\n            return n.getString();\n        case Token.NUMBER:\n            double value \u003d n.getDouble();\n            long longValue \u003d (long) value;\n            if (longValue \u003d\u003d value) {\n                return Long.toString(longValue);\n            } else {\n                return Double.toString(n.getDouble());\n            }\n        case Token.FALSE:\n        case Token.TRUE:\n        case Token.NULL:\n            return Node.tokenToName(n.getType());\n        case Token.VOID:\n            return \"undefined\";\n    }\n    return null;\n}",
      "path": "src/com/google/javascript/jscomp/NodeUtil.java",
      "functionStartLine": 108,
      "functionName": "getStringValue",
      "functionAnnotation": "",
      "functionDoc": "Gets the value of a node as a String, or null if it cannot be converted.\nWhen it returns a non-null String, this method effectively emulates the\n\u003ccode\u003eString()\u003c/code\u003e JavaScript cast function.\n"
    }
  }
}