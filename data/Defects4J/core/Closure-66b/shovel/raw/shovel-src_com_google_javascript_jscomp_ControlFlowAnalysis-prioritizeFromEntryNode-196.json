{
  "origin": "codeshovel",
  "repositoryName": "Closure-66b",
  "repositoryPath": "/tmp/Closure-66b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ControlFlowAnalysis.java",
  "functionName": "prioritizeFromEntryNode",
  "functionId": "prioritizeFromEntryNode___entry-DiGraphNode__Node,Branch__",
  "sourceFilePath": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
  "functionAnnotation": "",
  "functionDoc": "Given an entry node, find all the nodes reachable from that node\nand prioritize them.\n",
  "functionStartLine": 196,
  "functionEndLine": 215,
  "numCommitsSeen": 16,
  "timeTaken": 1063,
  "changeHistory": [
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,15 @@\n+private void prioritizeFromEntryNode(DiGraphNode\u003cNode, Branch\u003e entry) {\n+    PriorityQueue\u003cDiGraphNode\u003cNode, Branch\u003e\u003e worklist \u003d new PriorityQueue\u003cDiGraphNode\u003cNode, Branch\u003e\u003e(10, priorityComparator);\n+    worklist.add(entry);\n+    while (!worklist.isEmpty()) {\n+        DiGraphNode\u003cNode, Branch\u003e current \u003d worklist.remove();\n+        if (nodePriorities.containsKey(current)) {\n+            continue;\n+        }\n+        nodePriorities.put(current, ++priorityCounter);\n+        List\u003cDiGraphNode\u003cNode, Branch\u003e\u003e successors \u003d cfg.getDirectedSuccNodes(current);\n+        for (DiGraphNode\u003cNode, Branch\u003e candidate : successors) {\n+            worklist.add(candidate);\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void prioritizeFromEntryNode(DiGraphNode\u003cNode, Branch\u003e entry) {\n    PriorityQueue\u003cDiGraphNode\u003cNode, Branch\u003e\u003e worklist \u003d new PriorityQueue\u003cDiGraphNode\u003cNode, Branch\u003e\u003e(10, priorityComparator);\n    worklist.add(entry);\n    while (!worklist.isEmpty()) {\n        DiGraphNode\u003cNode, Branch\u003e current \u003d worklist.remove();\n        if (nodePriorities.containsKey(current)) {\n            continue;\n        }\n        nodePriorities.put(current, ++priorityCounter);\n        List\u003cDiGraphNode\u003cNode, Branch\u003e\u003e successors \u003d cfg.getDirectedSuccNodes(current);\n        for (DiGraphNode\u003cNode, Branch\u003e candidate : successors) {\n            worklist.add(candidate);\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
      "functionStartLine": 193,
      "functionName": "prioritizeFromEntryNode",
      "functionAnnotation": "",
      "functionDoc": "Given an entry node, find all the nodes reachable from that node\nand prioritize them.\n"
    }
  }
}