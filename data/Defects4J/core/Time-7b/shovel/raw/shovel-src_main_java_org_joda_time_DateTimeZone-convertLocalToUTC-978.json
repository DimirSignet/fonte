{
  "origin": "codeshovel",
  "repositoryName": "Time-7b",
  "repositoryPath": "/tmp/Time-7b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DateTimeZone.java",
  "functionName": "convertLocalToUTC",
  "functionId": "convertLocalToUTC___instantLocal-long__strict-boolean__originalInstantUTC-long",
  "sourceFilePath": "src/main/java/org/joda/time/DateTimeZone.java",
  "functionAnnotation": "",
  "functionDoc": "Converts a local instant to a standard UTC instant with the same\nlocal time attempting to use the same offset as the original.\n\u003cp\u003e\nThis conversion is used after performing a calculation\nwhere the calculation was done using a simple local zone.\nWhenever possible, the same offset as the original offset will be used.\nThis is most significant during a daylight savings overlap.\n\n@param instantLocal the local instant to convert to UTC\n@param strict whether the conversion should reject non-existent local times\n@param originalInstantUTC the original instant that the calculation is based on\n@return the UTC instant with the same local time,\n@throws ArithmeticException if the result overflows a long\n@throws IllegalArgumentException if the zone has no equivalent local time\n@since 2.0\n",
  "functionStartLine": 978,
  "functionEndLine": 986,
  "numCommitsSeen": 17,
  "timeTaken": 1500,
  "changeHistory": [
    "df4a82f4fb46cc2248280c462e18f08d55a3d112",
    "c7a581e55fc988bd90fa4bb1b0acece5181b7c5f"
  ],
  "changeHistoryShort": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": "Yfilerename",
    "c7a581e55fc988bd90fa4bb1b0acece5181b7c5f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": {
      "type": "Yfilerename",
      "commitMessage": "Remove JodaTime folder moving files to top level\n",
      "commitDate": "5/16/11, 10:02 AM",
      "commitName": "df4a82f4fb46cc2248280c462e18f08d55a3d112",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "5/16/11, 9:58 AM",
      "commitNameOld": "72b22654962284bac59c2777131b42a2d1f53228",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {\n    int offsetOriginal \u003d getOffset(originalInstantUTC);\n    long instantUTC \u003d instantLocal - offsetOriginal;\n    int offsetLocalFromOriginal \u003d getOffset(instantUTC);\n    if (offsetLocalFromOriginal \u003d\u003d offsetOriginal) {\n        return instantUTC;\n    }\n    return convertLocalToUTC(instantLocal, strict);\n}",
      "path": "src/main/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 950,
      "functionName": "convertLocalToUTC",
      "functionAnnotation": "",
      "functionDoc": "Converts a local instant to a standard UTC instant with the same\nlocal time attempting to use the same offset as the original.\n\u003cp\u003e\nThis conversion is used after performing a calculation\nwhere the calculation was done using a simple local zone.\nWhenever possible, the same offset as the original offset will be used.\nThis is most significant during a daylight savings overlap.\n\n@param instantLocal the local instant to convert to UTC\n@param strict whether the conversion should reject non-existent local times\n@param originalInstantUTC the original instant that the calculation is based on\n@return the UTC instant with the same local time,\n@throws ArithmeticException if the result overflows a long\n@throws IllegalArgumentException if the zone has no equivalent local time\n@since 2.0\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/main/java/org/joda/time/DateTimeZone.java",
        "newPath": "src/main/java/org/joda/time/DateTimeZone.java"
      }
    },
    "c7a581e55fc988bd90fa4bb1b0acece5181b7c5f": {
      "type": "Yintroduced",
      "commitMessage": "DateTimeZone.convertLocalToUTC [bugs 3102760,2182444,2553453]\nNew method now retains the offset wherever possible during calculations\nThis affects higher methods like withHourOfDay/withMinuteOfHour/withSecondOfMinute/withMillisOfSecond which now do not change offset when called within a DST overlap\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1595 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "12/5/10, 1:27 PM",
      "commitName": "c7a581e55fc988bd90fa4bb1b0acece5181b7c5f",
      "commitAuthor": "Stephen Colebourne",
      "diff": "@@ -0,0 +1,9 @@\n+public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {\n+    int offsetOriginal \u003d getOffset(originalInstantUTC);\n+    long instantUTC \u003d instantLocal - offsetOriginal;\n+    int offsetLocalFromOriginal \u003d getOffset(instantUTC);\n+    if (offsetLocalFromOriginal \u003d\u003d offsetOriginal) {\n+        return instantUTC;\n+    }\n+    return convertLocalToUTC(instantLocal, strict);\n+}\n\\ No newline at end of file\n",
      "actualSource": "public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {\n    int offsetOriginal \u003d getOffset(originalInstantUTC);\n    long instantUTC \u003d instantLocal - offsetOriginal;\n    int offsetLocalFromOriginal \u003d getOffset(instantUTC);\n    if (offsetLocalFromOriginal \u003d\u003d offsetOriginal) {\n        return instantUTC;\n    }\n    return convertLocalToUTC(instantLocal, strict);\n}",
      "path": "JodaTime/src/main/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 936,
      "functionName": "convertLocalToUTC",
      "functionAnnotation": "",
      "functionDoc": "Converts a local instant to a standard UTC instant with the same\nlocal time attempting to use the same offset as the original.\n\u003cp\u003e\nThis conversion is used after performing a calculation\nwhere the calculation was done using a simple local zone.\nWhenever possible, the same offset as the original offset will be used.\nThis is most significant during a daylight savings overlap.\n\n@param instantLocal the local instant to convert to UTC\n@param strict whether the conversion should reject non-existent local times\n@param originalInstantUTC the original instant that the calculation is based on\n@return the UTC instant with the same local time,\n@throws ArithmeticException if the result overflows a long\n@throws IllegalArgumentException if the zone has no equivalent local time\n@since 2.0\n"
    }
  }
}