{
  "origin": "codeshovel",
  "repositoryName": "Time-7b",
  "repositoryPath": "/tmp/Time-7b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BasicGJChronology.java",
  "functionName": "getMonthOfYear",
  "functionId": "getMonthOfYear___millis-long__year-int",
  "sourceFilePath": "src/main/java/org/joda/time/chrono/BasicGJChronology.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 79,
  "functionEndLine": 109,
  "numCommitsSeen": 32,
  "timeTaken": 4286,
  "changeHistory": [
    "df4a82f4fb46cc2248280c462e18f08d55a3d112",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1",
    "b501bed838191e3fb64fca2eb3e62d0407861dc3",
    "7b7cb44562d5942add1f093111e84a5836780de4",
    "6bdd176eed470329a73d7ee08498183e579cea60",
    "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7",
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb"
  ],
  "changeHistoryShort": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": "Yfilerename",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": "Yfilerename",
    "b501bed838191e3fb64fca2eb3e62d0407861dc3": "Yfilerename",
    "7b7cb44562d5942add1f093111e84a5836780de4": "Ymultichange(Ymovefromfile,Ymodifierchange,Ydocchange)",
    "6bdd176eed470329a73d7ee08498183e579cea60": "Yfilerename",
    "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7": "Ymultichange(Ymovefromfile,Ymodifierchange)",
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb": "Yintroduced"
  },
  "changeHistoryDetails": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": {
      "type": "Yfilerename",
      "commitMessage": "Remove JodaTime folder moving files to top level\n",
      "commitDate": "5/16/11, 10:02 AM",
      "commitName": "df4a82f4fb46cc2248280c462e18f08d55a3d112",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "5/16/11, 9:58 AM",
      "commitNameOld": "72b22654962284bac59c2777131b42a2d1f53228",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "int getMonthOfYear(long millis, int year) {\n    int i \u003d (int) ((millis - getYearMillis(year)) \u003e\u003e 10);\n    return (isLeapYear(year)) ? ((i \u003c 182 * 84375) ? ((i \u003c 91 * 84375) ? ((i \u003c 31 * 84375) ? 1 : (i \u003c 60 * 84375) ? 2 : 3) : ((i \u003c 121 * 84375) ? 4 : (i \u003c 152 * 84375) ? 5 : 6)) : ((i \u003c 274 * 84375) ? ((i \u003c 213 * 84375) ? 7 : (i \u003c 244 * 84375) ? 8 : 9) : ((i \u003c 305 * 84375) ? 10 : (i \u003c 335 * 84375) ? 11 : 12))) : ((i \u003c 181 * 84375) ? ((i \u003c 90 * 84375) ? ((i \u003c 31 * 84375) ? 1 : (i \u003c 59 * 84375) ? 2 : 3) : ((i \u003c 120 * 84375) ? 4 : (i \u003c 151 * 84375) ? 5 : 6)) : ((i \u003c 273 * 84375) ? ((i \u003c 212 * 84375) ? 7 : (i \u003c 243 * 84375) ? 8 : 9) : ((i \u003c 304 * 84375) ? 10 : (i \u003c 334 * 84375) ? 11 : 12)));\n}",
      "path": "src/main/java/org/joda/time/chrono/BasicGJChronology.java",
      "functionStartLine": 79,
      "functionName": "getMonthOfYear",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java",
        "newPath": "src/main/java/org/joda/time/chrono/BasicGJChronology.java"
      }
    },
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": {
      "type": "Yfilerename",
      "commitMessage": "Convert to maven 2\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1540 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/8/10, 5:17 PM",
      "commitName": "53feb3fa56af7260e607844524b7e5a9be49ecc1",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/8/10, 5:02 PM",
      "commitNameOld": "7fa2ceaf5d95d050095432aa646ea803aa35e122",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "int getMonthOfYear(long millis, int year) {\n    int i \u003d (int) ((millis - getYearMillis(year)) \u003e\u003e 10);\n    return (isLeapYear(year)) ? ((i \u003c 182 * 84375) ? ((i \u003c 91 * 84375) ? ((i \u003c 31 * 84375) ? 1 : (i \u003c 60 * 84375) ? 2 : 3) : ((i \u003c 121 * 84375) ? 4 : (i \u003c 152 * 84375) ? 5 : 6)) : ((i \u003c 274 * 84375) ? ((i \u003c 213 * 84375) ? 7 : (i \u003c 244 * 84375) ? 8 : 9) : ((i \u003c 305 * 84375) ? 10 : (i \u003c 335 * 84375) ? 11 : 12))) : ((i \u003c 181 * 84375) ? ((i \u003c 90 * 84375) ? ((i \u003c 31 * 84375) ? 1 : (i \u003c 59 * 84375) ? 2 : 3) : ((i \u003c 120 * 84375) ? 4 : (i \u003c 151 * 84375) ? 5 : 6)) : ((i \u003c 273 * 84375) ? ((i \u003c 212 * 84375) ? 7 : (i \u003c 243 * 84375) ? 8 : 9) : ((i \u003c 304 * 84375) ? 10 : (i \u003c 334 * 84375) ? 11 : 12)));\n}",
      "path": "JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java",
      "functionStartLine": 79,
      "functionName": "getMonthOfYear",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/java/org/joda/time/chrono/BasicGJChronology.java",
        "newPath": "JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java"
      }
    },
    "b501bed838191e3fb64fca2eb3e62d0407861dc3": {
      "type": "Yfilerename",
      "commitMessage": "Refactor abstract chronology classes to be package scoped and better named\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@928 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "11/2/05, 1:52 PM",
      "commitName": "b501bed838191e3fb64fca2eb3e62d0407861dc3",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "11/2/05, 9:26 AM",
      "commitNameOld": "beec594614e14f83c57ca24414179de8f9b564ea",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.18,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "int getMonthOfYear(long millis, int year) {\n    int i \u003d (int) ((millis - getYearMillis(year)) \u003e\u003e 10);\n    return (isLeapYear(year)) ? ((i \u003c 182 * 84375) ? ((i \u003c 91 * 84375) ? ((i \u003c 31 * 84375) ? 1 : (i \u003c 60 * 84375) ? 2 : 3) : ((i \u003c 121 * 84375) ? 4 : (i \u003c 152 * 84375) ? 5 : 6)) : ((i \u003c 274 * 84375) ? ((i \u003c 213 * 84375) ? 7 : (i \u003c 244 * 84375) ? 8 : 9) : ((i \u003c 305 * 84375) ? 10 : (i \u003c 335 * 84375) ? 11 : 12))) : ((i \u003c 181 * 84375) ? ((i \u003c 90 * 84375) ? ((i \u003c 31 * 84375) ? 1 : (i \u003c 59 * 84375) ? 2 : 3) : ((i \u003c 120 * 84375) ? 4 : (i \u003c 151 * 84375) ? 5 : 6)) : ((i \u003c 273 * 84375) ? ((i \u003c 212 * 84375) ? 7 : (i \u003c 243 * 84375) ? 8 : 9) : ((i \u003c 304 * 84375) ? 10 : (i \u003c 334 * 84375) ? 11 : 12)));\n}",
      "path": "JodaTime/src/java/org/joda/time/chrono/BasicGJChronology.java",
      "functionStartLine": 81,
      "functionName": "getMonthOfYear",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java",
        "newPath": "JodaTime/src/java/org/joda/time/chrono/BasicGJChronology.java"
      }
    },
    "7b7cb44562d5942add1f093111e84a5836780de4": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ydocchange)",
      "commitMessage": "Refactor chronology classes to avoid dupication in code\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@779 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "6/8/05, 3:57 PM",
      "commitName": "7b7cb44562d5942add1f093111e84a5836780de4",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "Refactor chronology classes to avoid dupication in code\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@779 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "6/8/05, 3:57 PM",
          "commitName": "7b7cb44562d5942add1f093111e84a5836780de4",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "6/8/05, 9:15 AM",
          "commitNameOld": "84617fb61cc9a81b10aa0918740325ae6c0a3765",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 0.28,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "int getMonthOfYear(long millis, int year) {\n    int i \u003d (int) ((millis - getYearMillis(year)) \u003e\u003e 10);\n    return (isLeapYear(year)) ? ((i \u003c 182 * 84375) ? ((i \u003c 91 * 84375) ? ((i \u003c 31 * 84375) ? 1 : (i \u003c 60 * 84375) ? 2 : 3) : ((i \u003c 121 * 84375) ? 4 : (i \u003c 152 * 84375) ? 5 : 6)) : ((i \u003c 274 * 84375) ? ((i \u003c 213 * 84375) ? 7 : (i \u003c 244 * 84375) ? 8 : 9) : ((i \u003c 305 * 84375) ? 10 : (i \u003c 335 * 84375) ? 11 : 12))) : ((i \u003c 181 * 84375) ? ((i \u003c 90 * 84375) ? ((i \u003c 31 * 84375) ? 1 : (i \u003c 59 * 84375) ? 2 : 3) : ((i \u003c 120 * 84375) ? 4 : (i \u003c 151 * 84375) ? 5 : 6)) : ((i \u003c 273 * 84375) ? ((i \u003c 212 * 84375) ? 7 : (i \u003c 243 * 84375) ? 8 : 9) : ((i \u003c 304 * 84375) ? 10 : (i \u003c 334 * 84375) ? 11 : 12)));\n}",
          "path": "JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java",
          "functionStartLine": 81,
          "functionName": "getMonthOfYear",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,4 +1,4 @@\n-final int getMonthOfYear(long millis, int year) {\n+int getMonthOfYear(long millis, int year) {\n     int i \u003d (int) ((millis - getYearMillis(year)) \u003e\u003e 10);\n     return (isLeapYear(year)) ? ((i \u003c 182 * 84375) ? ((i \u003c 91 * 84375) ? ((i \u003c 31 * 84375) ? 1 : (i \u003c 60 * 84375) ? 2 : 3) : ((i \u003c 121 * 84375) ? 4 : (i \u003c 152 * 84375) ? 5 : 6)) : ((i \u003c 274 * 84375) ? ((i \u003c 213 * 84375) ? 7 : (i \u003c 244 * 84375) ? 8 : 9) : ((i \u003c 305 * 84375) ? 10 : (i \u003c 335 * 84375) ? 11 : 12))) : ((i \u003c 181 * 84375) ? ((i \u003c 90 * 84375) ? ((i \u003c 31 * 84375) ? 1 : (i \u003c 59 * 84375) ? 2 : 3) : ((i \u003c 120 * 84375) ? 4 : (i \u003c 151 * 84375) ? 5 : 6)) : ((i \u003c 273 * 84375) ? ((i \u003c 212 * 84375) ? 7 : (i \u003c 243 * 84375) ? 8 : 9) : ((i \u003c 304 * 84375) ? 10 : (i \u003c 334 * 84375) ? 11 : 12)));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java",
            "newPath": "JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java",
            "oldMethodName": "getMonthOfYear",
            "newMethodName": "getMonthOfYear"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Refactor chronology classes to avoid dupication in code\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@779 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "6/8/05, 3:57 PM",
          "commitName": "7b7cb44562d5942add1f093111e84a5836780de4",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "6/8/05, 9:15 AM",
          "commitNameOld": "84617fb61cc9a81b10aa0918740325ae6c0a3765",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 0.28,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "int getMonthOfYear(long millis, int year) {\n    int i \u003d (int) ((millis - getYearMillis(year)) \u003e\u003e 10);\n    return (isLeapYear(year)) ? ((i \u003c 182 * 84375) ? ((i \u003c 91 * 84375) ? ((i \u003c 31 * 84375) ? 1 : (i \u003c 60 * 84375) ? 2 : 3) : ((i \u003c 121 * 84375) ? 4 : (i \u003c 152 * 84375) ? 5 : 6)) : ((i \u003c 274 * 84375) ? ((i \u003c 213 * 84375) ? 7 : (i \u003c 244 * 84375) ? 8 : 9) : ((i \u003c 305 * 84375) ? 10 : (i \u003c 335 * 84375) ? 11 : 12))) : ((i \u003c 181 * 84375) ? ((i \u003c 90 * 84375) ? ((i \u003c 31 * 84375) ? 1 : (i \u003c 59 * 84375) ? 2 : 3) : ((i \u003c 120 * 84375) ? 4 : (i \u003c 151 * 84375) ? 5 : 6)) : ((i \u003c 273 * 84375) ? ((i \u003c 212 * 84375) ? 7 : (i \u003c 243 * 84375) ? 8 : 9) : ((i \u003c 304 * 84375) ? 10 : (i \u003c 334 * 84375) ? 11 : 12)));\n}",
          "path": "JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java",
          "functionStartLine": 81,
          "functionName": "getMonthOfYear",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,4 +1,4 @@\n-final int getMonthOfYear(long millis, int year) {\n+int getMonthOfYear(long millis, int year) {\n     int i \u003d (int) ((millis - getYearMillis(year)) \u003e\u003e 10);\n     return (isLeapYear(year)) ? ((i \u003c 182 * 84375) ? ((i \u003c 91 * 84375) ? ((i \u003c 31 * 84375) ? 1 : (i \u003c 60 * 84375) ? 2 : 3) : ((i \u003c 121 * 84375) ? 4 : (i \u003c 152 * 84375) ? 5 : 6)) : ((i \u003c 274 * 84375) ? ((i \u003c 213 * 84375) ? 7 : (i \u003c 244 * 84375) ? 8 : 9) : ((i \u003c 305 * 84375) ? 10 : (i \u003c 335 * 84375) ? 11 : 12))) : ((i \u003c 181 * 84375) ? ((i \u003c 90 * 84375) ? ((i \u003c 31 * 84375) ? 1 : (i \u003c 59 * 84375) ? 2 : 3) : ((i \u003c 120 * 84375) ? 4 : (i \u003c 151 * 84375) ? 5 : 6)) : ((i \u003c 273 * 84375) ? ((i \u003c 212 * 84375) ? 7 : (i \u003c 243 * 84375) ? 8 : 9) : ((i \u003c 304 * 84375) ? 10 : (i \u003c 334 * 84375) ? 11 : 12)));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[final]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Refactor chronology classes to avoid dupication in code\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@779 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "6/8/05, 3:57 PM",
          "commitName": "7b7cb44562d5942add1f093111e84a5836780de4",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "6/8/05, 9:15 AM",
          "commitNameOld": "84617fb61cc9a81b10aa0918740325ae6c0a3765",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 0.28,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "int getMonthOfYear(long millis, int year) {\n    int i \u003d (int) ((millis - getYearMillis(year)) \u003e\u003e 10);\n    return (isLeapYear(year)) ? ((i \u003c 182 * 84375) ? ((i \u003c 91 * 84375) ? ((i \u003c 31 * 84375) ? 1 : (i \u003c 60 * 84375) ? 2 : 3) : ((i \u003c 121 * 84375) ? 4 : (i \u003c 152 * 84375) ? 5 : 6)) : ((i \u003c 274 * 84375) ? ((i \u003c 213 * 84375) ? 7 : (i \u003c 244 * 84375) ? 8 : 9) : ((i \u003c 305 * 84375) ? 10 : (i \u003c 335 * 84375) ? 11 : 12))) : ((i \u003c 181 * 84375) ? ((i \u003c 90 * 84375) ? ((i \u003c 31 * 84375) ? 1 : (i \u003c 59 * 84375) ? 2 : 3) : ((i \u003c 120 * 84375) ? 4 : (i \u003c 151 * 84375) ? 5 : 6)) : ((i \u003c 273 * 84375) ? ((i \u003c 212 * 84375) ? 7 : (i \u003c 243 * 84375) ? 8 : 9) : ((i \u003c 304 * 84375) ? 10 : (i \u003c 334 * 84375) ? 11 : 12)));\n}",
          "path": "JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java",
          "functionStartLine": 81,
          "functionName": "getMonthOfYear",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,4 +1,4 @@\n-final int getMonthOfYear(long millis, int year) {\n+int getMonthOfYear(long millis, int year) {\n     int i \u003d (int) ((millis - getYearMillis(year)) \u003e\u003e 10);\n     return (isLeapYear(year)) ? ((i \u003c 182 * 84375) ? ((i \u003c 91 * 84375) ? ((i \u003c 31 * 84375) ? 1 : (i \u003c 60 * 84375) ? 2 : 3) : ((i \u003c 121 * 84375) ? 4 : (i \u003c 152 * 84375) ? 5 : 6)) : ((i \u003c 274 * 84375) ? ((i \u003c 213 * 84375) ? 7 : (i \u003c 244 * 84375) ? 8 : 9) : ((i \u003c 305 * 84375) ? 10 : (i \u003c 335 * 84375) ? 11 : 12))) : ((i \u003c 181 * 84375) ? ((i \u003c 90 * 84375) ? ((i \u003c 31 * 84375) ? 1 : (i \u003c 59 * 84375) ? 2 : 3) : ((i \u003c 120 * 84375) ? 4 : (i \u003c 151 * 84375) ? 5 : 6)) : ((i \u003c 273 * 84375) ? ((i \u003c 212 * 84375) ? 7 : (i \u003c 243 * 84375) ? 8 : 9) : ((i \u003c 304 * 84375) ? 10 : (i \u003c 334 * 84375) ? 11 : 12)));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "\n@param millis from 1970-01-01T00:00:00Z\n@param year precalculated year of millis\n",
            "newValue": ""
          }
        }
      ]
    },
    "6bdd176eed470329a73d7ee08498183e579cea60": {
      "type": "Yfilerename",
      "commitMessage": "Change Chronology to abstract class\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@432 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/22/04, 8:15 AM",
      "commitName": "6bdd176eed470329a73d7ee08498183e579cea60",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/22/04, 7:44 AM",
      "commitNameOld": "5f9b9b675631bda3568df0d47ca305126d426011",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "final int getMonthOfYear(long millis, int year) {\n    int i \u003d (int) ((millis - getYearMillis(year)) \u003e\u003e 10);\n    return (isLeapYear(year)) ? ((i \u003c 182 * 84375) ? ((i \u003c 91 * 84375) ? ((i \u003c 31 * 84375) ? 1 : (i \u003c 60 * 84375) ? 2 : 3) : ((i \u003c 121 * 84375) ? 4 : (i \u003c 152 * 84375) ? 5 : 6)) : ((i \u003c 274 * 84375) ? ((i \u003c 213 * 84375) ? 7 : (i \u003c 244 * 84375) ? 8 : 9) : ((i \u003c 305 * 84375) ? 10 : (i \u003c 335 * 84375) ? 11 : 12))) : ((i \u003c 181 * 84375) ? ((i \u003c 90 * 84375) ? ((i \u003c 31 * 84375) ? 1 : (i \u003c 59 * 84375) ? 2 : 3) : ((i \u003c 120 * 84375) ? 4 : (i \u003c 151 * 84375) ? 5 : 6)) : ((i \u003c 273 * 84375) ? ((i \u003c 212 * 84375) ? 7 : (i \u003c 243 * 84375) ? 8 : 9) : ((i \u003c 304 * 84375) ? 10 : (i \u003c 334 * 84375) ? 11 : 12)));\n}",
      "path": "JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java",
      "functionStartLine": 606,
      "functionName": "getMonthOfYear",
      "functionAnnotation": "",
      "functionDoc": "\n@param millis from 1970-01-01T00:00:00Z\n@param year precalculated year of millis\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java",
        "newPath": "JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java"
      }
    },
    "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange)",
      "commitMessage": "Re-organized chronology package and created new field package.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@125 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "1/27/04, 11:12 PM",
      "commitName": "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7",
      "commitAuthor": "Brian S O\u0027Neill",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "Re-organized chronology package and created new field package.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@125 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "1/27/04, 11:12 PM",
          "commitName": "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7",
          "commitAuthor": "Brian S O\u0027Neill",
          "commitDateOld": "1/11/04, 9:39 AM",
          "commitNameOld": "6f5522f58c1d2abdec37b5d22e5981716d4ec731",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 16.56,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "final int getMonthOfYear(long millis, int year) {\n    int i \u003d (int) ((millis - getYearMillis(year)) \u003e\u003e 10);\n    return (isLeapYear(year)) ? ((i \u003c 182 * 84375) ? ((i \u003c 91 * 84375) ? ((i \u003c 31 * 84375) ? 1 : (i \u003c 60 * 84375) ? 2 : 3) : ((i \u003c 121 * 84375) ? 4 : (i \u003c 152 * 84375) ? 5 : 6)) : ((i \u003c 274 * 84375) ? ((i \u003c 213 * 84375) ? 7 : (i \u003c 244 * 84375) ? 8 : 9) : ((i \u003c 305 * 84375) ? 10 : (i \u003c 335 * 84375) ? 11 : 12))) : ((i \u003c 181 * 84375) ? ((i \u003c 90 * 84375) ? ((i \u003c 31 * 84375) ? 1 : (i \u003c 59 * 84375) ? 2 : 3) : ((i \u003c 120 * 84375) ? 4 : (i \u003c 151 * 84375) ? 5 : 6)) : ((i \u003c 273 * 84375) ? ((i \u003c 212 * 84375) ? 7 : (i \u003c 243 * 84375) ? 8 : 9) : ((i \u003c 304 * 84375) ? 10 : (i \u003c 334 * 84375) ? 11 : 12)));\n}",
          "path": "JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java",
          "functionStartLine": 644,
          "functionName": "getMonthOfYear",
          "functionAnnotation": "",
          "functionDoc": "\n@param millis from 1970-01-01T00:00:00Z\n@param year precalculated year of millis\n",
          "diff": "@@ -1,4 +1,4 @@\n-public final int getMonthOfYear(long millis, int year) {\n+final int getMonthOfYear(long millis, int year) {\n     int i \u003d (int) ((millis - getYearMillis(year)) \u003e\u003e 10);\n     return (isLeapYear(year)) ? ((i \u003c 182 * 84375) ? ((i \u003c 91 * 84375) ? ((i \u003c 31 * 84375) ? 1 : (i \u003c 60 * 84375) ? 2 : 3) : ((i \u003c 121 * 84375) ? 4 : (i \u003c 152 * 84375) ? 5 : 6)) : ((i \u003c 274 * 84375) ? ((i \u003c 213 * 84375) ? 7 : (i \u003c 244 * 84375) ? 8 : 9) : ((i \u003c 305 * 84375) ? 10 : (i \u003c 335 * 84375) ? 11 : 12))) : ((i \u003c 181 * 84375) ? ((i \u003c 90 * 84375) ? ((i \u003c 31 * 84375) ? 1 : (i \u003c 59 * 84375) ? 2 : 3) : ((i \u003c 120 * 84375) ? 4 : (i \u003c 151 * 84375) ? 5 : 6)) : ((i \u003c 273 * 84375) ? ((i \u003c 212 * 84375) ? 7 : (i \u003c 243 * 84375) ? 8 : 9) : ((i \u003c 304 * 84375) ? 10 : (i \u003c 334 * 84375) ? 11 : 12)));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java",
            "newPath": "JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java",
            "oldMethodName": "getMonthOfYear",
            "newMethodName": "getMonthOfYear"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Re-organized chronology package and created new field package.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@125 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "1/27/04, 11:12 PM",
          "commitName": "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7",
          "commitAuthor": "Brian S O\u0027Neill",
          "commitDateOld": "1/11/04, 9:39 AM",
          "commitNameOld": "6f5522f58c1d2abdec37b5d22e5981716d4ec731",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 16.56,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "final int getMonthOfYear(long millis, int year) {\n    int i \u003d (int) ((millis - getYearMillis(year)) \u003e\u003e 10);\n    return (isLeapYear(year)) ? ((i \u003c 182 * 84375) ? ((i \u003c 91 * 84375) ? ((i \u003c 31 * 84375) ? 1 : (i \u003c 60 * 84375) ? 2 : 3) : ((i \u003c 121 * 84375) ? 4 : (i \u003c 152 * 84375) ? 5 : 6)) : ((i \u003c 274 * 84375) ? ((i \u003c 213 * 84375) ? 7 : (i \u003c 244 * 84375) ? 8 : 9) : ((i \u003c 305 * 84375) ? 10 : (i \u003c 335 * 84375) ? 11 : 12))) : ((i \u003c 181 * 84375) ? ((i \u003c 90 * 84375) ? ((i \u003c 31 * 84375) ? 1 : (i \u003c 59 * 84375) ? 2 : 3) : ((i \u003c 120 * 84375) ? 4 : (i \u003c 151 * 84375) ? 5 : 6)) : ((i \u003c 273 * 84375) ? ((i \u003c 212 * 84375) ? 7 : (i \u003c 243 * 84375) ? 8 : 9) : ((i \u003c 304 * 84375) ? 10 : (i \u003c 334 * 84375) ? 11 : 12)));\n}",
          "path": "JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java",
          "functionStartLine": 644,
          "functionName": "getMonthOfYear",
          "functionAnnotation": "",
          "functionDoc": "\n@param millis from 1970-01-01T00:00:00Z\n@param year precalculated year of millis\n",
          "diff": "@@ -1,4 +1,4 @@\n-public final int getMonthOfYear(long millis, int year) {\n+final int getMonthOfYear(long millis, int year) {\n     int i \u003d (int) ((millis - getYearMillis(year)) \u003e\u003e 10);\n     return (isLeapYear(year)) ? ((i \u003c 182 * 84375) ? ((i \u003c 91 * 84375) ? ((i \u003c 31 * 84375) ? 1 : (i \u003c 60 * 84375) ? 2 : 3) : ((i \u003c 121 * 84375) ? 4 : (i \u003c 152 * 84375) ? 5 : 6)) : ((i \u003c 274 * 84375) ? ((i \u003c 213 * 84375) ? 7 : (i \u003c 244 * 84375) ? 8 : 9) : ((i \u003c 305 * 84375) ? 10 : (i \u003c 335 * 84375) ? 11 : 12))) : ((i \u003c 181 * 84375) ? ((i \u003c 90 * 84375) ? ((i \u003c 31 * 84375) ? 1 : (i \u003c 59 * 84375) ? 2 : 3) : ((i \u003c 120 * 84375) ? 4 : (i \u003c 151 * 84375) ? 5 : 6)) : ((i \u003c 273 * 84375) ? ((i \u003c 212 * 84375) ? 7 : (i \u003c 243 * 84375) ? 8 : 9) : ((i \u003c 304 * 84375) ? 10 : (i \u003c 334 * 84375) ? 11 : 12)));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[public, final]",
            "newValue": "[final]"
          }
        }
      ]
    },
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb": {
      "type": "Yintroduced",
      "commitMessage": "Move version 0.9 to joda-time repository\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@4 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "12/16/03, 1:39 PM",
      "commitName": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
      "commitAuthor": "Stephen Colebourne",
      "diff": "@@ -0,0 +1,4 @@\n+public final int getMonthOfYear(long millis, int year) {\n+    int i \u003d (int) ((millis - getYearMillis(year)) \u003e\u003e 10);\n+    return (isLeapYear(year)) ? ((i \u003c 182 * 84375) ? ((i \u003c 91 * 84375) ? ((i \u003c 31 * 84375) ? 1 : (i \u003c 60 * 84375) ? 2 : 3) : ((i \u003c 121 * 84375) ? 4 : (i \u003c 152 * 84375) ? 5 : 6)) : ((i \u003c 274 * 84375) ? ((i \u003c 213 * 84375) ? 7 : (i \u003c 244 * 84375) ? 8 : 9) : ((i \u003c 305 * 84375) ? 10 : (i \u003c 335 * 84375) ? 11 : 12))) : ((i \u003c 181 * 84375) ? ((i \u003c 90 * 84375) ? ((i \u003c 31 * 84375) ? 1 : (i \u003c 59 * 84375) ? 2 : 3) : ((i \u003c 120 * 84375) ? 4 : (i \u003c 151 * 84375) ? 5 : 6)) : ((i \u003c 273 * 84375) ? ((i \u003c 212 * 84375) ? 7 : (i \u003c 243 * 84375) ? 8 : 9) : ((i \u003c 304 * 84375) ? 10 : (i \u003c 334 * 84375) ? 11 : 12)));\n+}\n\\ No newline at end of file\n",
      "actualSource": "public final int getMonthOfYear(long millis, int year) {\n    int i \u003d (int) ((millis - getYearMillis(year)) \u003e\u003e 10);\n    return (isLeapYear(year)) ? ((i \u003c 182 * 84375) ? ((i \u003c 91 * 84375) ? ((i \u003c 31 * 84375) ? 1 : (i \u003c 60 * 84375) ? 2 : 3) : ((i \u003c 121 * 84375) ? 4 : (i \u003c 152 * 84375) ? 5 : 6)) : ((i \u003c 274 * 84375) ? ((i \u003c 213 * 84375) ? 7 : (i \u003c 244 * 84375) ? 8 : 9) : ((i \u003c 305 * 84375) ? 10 : (i \u003c 335 * 84375) ? 11 : 12))) : ((i \u003c 181 * 84375) ? ((i \u003c 90 * 84375) ? ((i \u003c 31 * 84375) ? 1 : (i \u003c 59 * 84375) ? 2 : 3) : ((i \u003c 120 * 84375) ? 4 : (i \u003c 151 * 84375) ? 5 : 6)) : ((i \u003c 273 * 84375) ? ((i \u003c 212 * 84375) ? 7 : (i \u003c 243 * 84375) ? 8 : 9) : ((i \u003c 304 * 84375) ? 10 : (i \u003c 334 * 84375) ? 11 : 12)));\n}",
      "path": "JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java",
      "functionStartLine": 349,
      "functionName": "getMonthOfYear",
      "functionAnnotation": "",
      "functionDoc": "\n@param millis from 1970-01-01T00:00:00Z\n@param year precalculated year of millis\n"
    }
  }
}