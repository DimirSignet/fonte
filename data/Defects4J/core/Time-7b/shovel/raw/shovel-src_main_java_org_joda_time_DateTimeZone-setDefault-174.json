{
  "origin": "codeshovel",
  "repositoryName": "Time-7b",
  "repositoryPath": "/tmp/Time-7b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DateTimeZone.java",
  "functionName": "setDefault",
  "functionId": "setDefault___zone-DateTimeZone",
  "sourceFilePath": "src/main/java/org/joda/time/DateTimeZone.java",
  "functionAnnotation": "",
  "functionDoc": "Sets the default time zone.\n\u003cp\u003e\nNOTE: Calling this method does \u003ci\u003enot\u003c/i\u003e set the {@code java.util.TimeZone} default.\n\n@param zone the default datetime zone object, must not be null\n@throws IllegalArgumentException if the zone is null\n@throws SecurityException if the application has insufficient security rights\n",
  "functionStartLine": 174,
  "functionEndLine": 185,
  "numCommitsSeen": 57,
  "timeTaken": 2410,
  "changeHistory": [
    "df4a82f4fb46cc2248280c462e18f08d55a3d112",
    "d090b642dc04259286d3478cfa49f1da2f0755e6",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1",
    "bc49e14e17ce686934b9a87a632f5b3ee6f80761",
    "6892714b99ed388c1f9f8f55f114fcb602186fa6",
    "c6391f360db0b1e047e153298bd1d175bfb8a5be",
    "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb"
  ],
  "changeHistoryShort": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": "Yfilerename",
    "d090b642dc04259286d3478cfa49f1da2f0755e6": "Ydocchange",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": "Yfilerename",
    "bc49e14e17ce686934b9a87a632f5b3ee6f80761": "Ybodychange",
    "6892714b99ed388c1f9f8f55f114fcb602186fa6": "Ydocchange",
    "c6391f360db0b1e047e153298bd1d175bfb8a5be": "Ybodychange",
    "0e07ac6b2cff63550d7df336355ca63cc05aa40b": "Ybodychange",
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb": "Yintroduced"
  },
  "changeHistoryDetails": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": {
      "type": "Yfilerename",
      "commitMessage": "Remove JodaTime folder moving files to top level\n",
      "commitDate": "5/16/11, 10:02 AM",
      "commitName": "df4a82f4fb46cc2248280c462e18f08d55a3d112",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "5/16/11, 9:58 AM",
      "commitNameOld": "72b22654962284bac59c2777131b42a2d1f53228",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static void setDefault(DateTimeZone zone) throws SecurityException {\n    SecurityManager sm \u003d System.getSecurityManager();\n    if (sm !\u003d null) {\n        sm.checkPermission(new JodaTimePermission(\"DateTimeZone.setDefault\"));\n    }\n    if (zone \u003d\u003d null) {\n        throw new IllegalArgumentException(\"The datetime zone must not be null\");\n    }\n    synchronized (DateTimeZone.class) {\n        cDefault \u003d zone;\n    }\n}",
      "path": "src/main/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 173,
      "functionName": "setDefault",
      "functionAnnotation": "",
      "functionDoc": "Sets the default time zone.\n\u003cp\u003e\nNOTE: Calling this method does \u003ci\u003enot\u003c/i\u003e set the {@code java.util.TimeZone} default.\n\n@param zone the default datetime zone object, must not be null\n@throws IllegalArgumentException if the zone is null\n@throws SecurityException if the application has insufficient security rights\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/main/java/org/joda/time/DateTimeZone.java",
        "newPath": "src/main/java/org/joda/time/DateTimeZone.java"
      }
    },
    "d090b642dc04259286d3478cfa49f1da2f0755e6": {
      "type": "Ydocchange",
      "commitMessage": "Better Javadoc of DateTimeZone.default behaviour\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1580 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "10/27/10, 3:26 PM",
      "commitName": "d090b642dc04259286d3478cfa49f1da2f0755e6",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "9/5/10, 9:55 AM",
      "commitNameOld": "b835259ecb3d91234a5ff36e57bb928cadc4aa36",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 52.23,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "public static void setDefault(DateTimeZone zone) throws SecurityException {\n    SecurityManager sm \u003d System.getSecurityManager();\n    if (sm !\u003d null) {\n        sm.checkPermission(new JodaTimePermission(\"DateTimeZone.setDefault\"));\n    }\n    if (zone \u003d\u003d null) {\n        throw new IllegalArgumentException(\"The datetime zone must not be null\");\n    }\n    synchronized (DateTimeZone.class) {\n        cDefault \u003d zone;\n    }\n}",
      "path": "JodaTime/src/main/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 171,
      "functionName": "setDefault",
      "functionAnnotation": "",
      "functionDoc": "Sets the default time zone.\n\u003cp\u003e\nNOTE: Calling this method does \u003ci\u003enot\u003c/i\u003e set the {@code java.util.TimeZone} default.\n\n@param zone the default datetime zone object, must not be null\n@throws IllegalArgumentException if the zone is null\n@throws SecurityException if the application has insufficient security rights\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Sets the default time zone.\n\n@param zone the default datetime zone object, must not be null\n@throws IllegalArgumentException if the zone is null\n@throws SecurityException if the application has insufficient security rights\n",
        "newValue": "Sets the default time zone.\n\u003cp\u003e\nNOTE: Calling this method does \u003ci\u003enot\u003c/i\u003e set the {@code java.util.TimeZone} default.\n\n@param zone the default datetime zone object, must not be null\n@throws IllegalArgumentException if the zone is null\n@throws SecurityException if the application has insufficient security rights\n"
      }
    },
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": {
      "type": "Yfilerename",
      "commitMessage": "Convert to maven 2\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1540 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/8/10, 5:17 PM",
      "commitName": "53feb3fa56af7260e607844524b7e5a9be49ecc1",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/8/10, 5:02 PM",
      "commitNameOld": "7fa2ceaf5d95d050095432aa646ea803aa35e122",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static void setDefault(DateTimeZone zone) throws SecurityException {\n    SecurityManager sm \u003d System.getSecurityManager();\n    if (sm !\u003d null) {\n        sm.checkPermission(new JodaTimePermission(\"DateTimeZone.setDefault\"));\n    }\n    if (zone \u003d\u003d null) {\n        throw new IllegalArgumentException(\"The datetime zone must not be null\");\n    }\n    synchronized (DateTimeZone.class) {\n        cDefault \u003d zone;\n    }\n}",
      "path": "JodaTime/src/main/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 159,
      "functionName": "setDefault",
      "functionAnnotation": "",
      "functionDoc": "Sets the default time zone.\n\n@param zone the default datetime zone object, must not be null\n@throws IllegalArgumentException if the zone is null\n@throws SecurityException if the application has insufficient security rights\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
        "newPath": "JodaTime/src/main/java/org/joda/time/DateTimeZone.java"
      }
    },
    "bc49e14e17ce686934b9a87a632f5b3ee6f80761": {
      "type": "Ybodychange",
      "commitMessage": "Classloading CachedDateTimeZone could invalidate state [2935625]\nReported by Michael Barker\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1476 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "2/14/10, 9:19 AM",
      "commitName": "bc49e14e17ce686934b9a87a632f5b3ee6f80761",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "11/4/09, 3:55 PM",
      "commitNameOld": "3f1e047c898c9c925e1faac33bb07e1cb05d88cb",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 101.73,
      "commitsBetweenForRepo": 68,
      "commitsBetweenForFile": 1,
      "actualSource": "public static void setDefault(DateTimeZone zone) throws SecurityException {\n    SecurityManager sm \u003d System.getSecurityManager();\n    if (sm !\u003d null) {\n        sm.checkPermission(new JodaTimePermission(\"DateTimeZone.setDefault\"));\n    }\n    if (zone \u003d\u003d null) {\n        throw new IllegalArgumentException(\"The datetime zone must not be null\");\n    }\n    synchronized (DateTimeZone.class) {\n        cDefault \u003d zone;\n    }\n}",
      "path": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 159,
      "functionName": "setDefault",
      "functionAnnotation": "",
      "functionDoc": "Sets the default time zone.\n\n@param zone the default datetime zone object, must not be null\n@throws IllegalArgumentException if the zone is null\n@throws SecurityException if the application has insufficient security rights\n",
      "diff": "@@ -1,10 +1,12 @@\n public static void setDefault(DateTimeZone zone) throws SecurityException {\n     SecurityManager sm \u003d System.getSecurityManager();\n     if (sm !\u003d null) {\n         sm.checkPermission(new JodaTimePermission(\"DateTimeZone.setDefault\"));\n     }\n     if (zone \u003d\u003d null) {\n         throw new IllegalArgumentException(\"The datetime zone must not be null\");\n     }\n-    cDefault \u003d zone;\n+    synchronized (DateTimeZone.class) {\n+        cDefault \u003d zone;\n+    }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6892714b99ed388c1f9f8f55f114fcb602186fa6": {
      "type": "Ydocchange",
      "commitMessage": "Checkstyle fixes\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@561 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "11/5/04, 4:16 PM",
      "commitName": "6892714b99ed388c1f9f8f55f114fcb602186fa6",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "10/28/04, 3:56 PM",
      "commitNameOld": "6cad802018b6b82ea4df53aaf91a0bbc98b2f9a3",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 8.06,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "actualSource": "public static void setDefault(DateTimeZone zone) throws SecurityException {\n    SecurityManager sm \u003d System.getSecurityManager();\n    if (sm !\u003d null) {\n        sm.checkPermission(new JodaTimePermission(\"DateTimeZone.setDefault\"));\n    }\n    if (zone \u003d\u003d null) {\n        throw new IllegalArgumentException(\"The datetime zone must not be null\");\n    }\n    cDefault \u003d zone;\n}",
      "path": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 196,
      "functionName": "setDefault",
      "functionAnnotation": "",
      "functionDoc": "Sets the default time zone.\n\n@param zone the default datetime zone object, must not be null\n@throws IllegalArgumentException if the zone is null\n@throws SecurityException if the application has insufficient security rights\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Sets the default time zone.\n\n@param zone the default datetime zone object, must not be null\n@throws IllegalArgumentException if the zone is null\n",
        "newValue": "Sets the default time zone.\n\n@param zone the default datetime zone object, must not be null\n@throws IllegalArgumentException if the zone is null\n@throws SecurityException if the application has insufficient security rights\n"
      }
    },
    "c6391f360db0b1e047e153298bd1d175bfb8a5be": {
      "type": "Ybodychange",
      "commitMessage": "Uses generic JodaTimePermission class.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@181 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "4/17/04, 10:17 AM",
      "commitName": "c6391f360db0b1e047e153298bd1d175bfb8a5be",
      "commitAuthor": "Brian S O\u0027Neill",
      "commitDateOld": "4/14/04, 4:43 PM",
      "commitNameOld": "a26563f0cd1fbdd5587a0f9d3c0c77864553d737",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 2.73,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "public static void setDefault(DateTimeZone zone) throws SecurityException {\n    SecurityManager sm \u003d System.getSecurityManager();\n    if (sm !\u003d null) {\n        sm.checkPermission(new JodaTimePermission(\"DateTimeZone.setDefault\"));\n    }\n    if (zone \u003d\u003d null) {\n        throw new IllegalArgumentException(\"The datetime zone must not be null\");\n    }\n    cDefault \u003d zone;\n}",
      "path": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 173,
      "functionName": "setDefault",
      "functionAnnotation": "",
      "functionDoc": "Sets the default time zone.\n\n@param zone the default datetime zone object, must not be null\n@throws IllegalArgumentException if the zone is null\n",
      "diff": "@@ -1,10 +1,10 @@\n public static void setDefault(DateTimeZone zone) throws SecurityException {\n     SecurityManager sm \u003d System.getSecurityManager();\n     if (sm !\u003d null) {\n-        sm.checkPermission(new DateTimeZonePermission(\"setDefault\"));\n+        sm.checkPermission(new JodaTimePermission(\"DateTimeZone.setDefault\"));\n     }\n     if (zone \u003d\u003d null) {\n         throw new IllegalArgumentException(\"The datetime zone must not be null\");\n     }\n     cDefault \u003d zone;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0e07ac6b2cff63550d7df336355ca63cc05aa40b": {
      "type": "Ybodychange",
      "commitMessage": "Move from Joda CVS\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@10 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "12/18/03, 6:07 PM",
      "commitName": "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "12/16/03, 1:39 PM",
      "commitNameOld": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 2.19,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "public static void setDefault(DateTimeZone zone) throws SecurityException {\n    SecurityManager sm \u003d System.getSecurityManager();\n    if (sm !\u003d null) {\n        sm.checkPermission(new DateTimeZonePermission(\"setDefault\"));\n    }\n    if (zone \u003d\u003d null) {\n        throw new IllegalArgumentException(\"The datetime zone must not be null\");\n    }\n    cDefault \u003d zone;\n}",
      "path": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 173,
      "functionName": "setDefault",
      "functionAnnotation": "",
      "functionDoc": "Sets the default time zone.\n\n@param zone the default datetime zone object, must not be null\n@throws IllegalArgumentException if the zone is null\n",
      "diff": "@@ -1,6 +1,10 @@\n public static void setDefault(DateTimeZone zone) throws SecurityException {\n+    SecurityManager sm \u003d System.getSecurityManager();\n+    if (sm !\u003d null) {\n+        sm.checkPermission(new DateTimeZonePermission(\"setDefault\"));\n+    }\n     if (zone \u003d\u003d null) {\n         throw new IllegalArgumentException(\"The datetime zone must not be null\");\n     }\n     cDefault \u003d zone;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb": {
      "type": "Yintroduced",
      "commitMessage": "Move version 0.9 to joda-time repository\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@4 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "12/16/03, 1:39 PM",
      "commitName": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
      "commitAuthor": "Stephen Colebourne",
      "diff": "@@ -0,0 +1,6 @@\n+public static void setDefault(DateTimeZone zone) throws SecurityException {\n+    if (zone \u003d\u003d null) {\n+        throw new IllegalArgumentException(\"The datetime zone must not be null\");\n+    }\n+    cDefault \u003d zone;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public static void setDefault(DateTimeZone zone) throws SecurityException {\n    if (zone \u003d\u003d null) {\n        throw new IllegalArgumentException(\"The datetime zone must not be null\");\n    }\n    cDefault \u003d zone;\n}",
      "path": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 213,
      "functionName": "setDefault",
      "functionAnnotation": "",
      "functionDoc": "Sets the default time zone.\n\n@param zone the default datetime zone object, must not be null\n@throws IllegalArgumentException if the zone is null\n"
    }
  }
}