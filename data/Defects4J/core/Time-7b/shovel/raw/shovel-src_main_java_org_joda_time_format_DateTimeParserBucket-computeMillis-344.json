{
  "origin": "codeshovel",
  "repositoryName": "Time-7b",
  "repositoryPath": "/tmp/Time-7b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DateTimeParserBucket.java",
  "functionName": "computeMillis",
  "functionId": "computeMillis___resetFields-boolean__text-String",
  "sourceFilePath": "src/main/java/org/joda/time/format/DateTimeParserBucket.java",
  "functionAnnotation": "",
  "functionDoc": "Computes the parsed datetime by setting the saved fields.\nThis method is idempotent, but it is not thread-safe.\n\n@param resetFields false by default, but when true, unsaved field values are cleared\n@param text optional text being parsed, to be included in any error message\n@return milliseconds since 1970-01-01T00:00:00Z\n@throws IllegalArgumentException if any field is out of range\n@since 1.3\n",
  "functionStartLine": 344,
  "functionEndLine": 395,
  "numCommitsSeen": 65,
  "timeTaken": 2526,
  "changeHistory": [
    "2fcc704a0e7d863f19b5b14fb412c14f3c063dd4",
    "53eadfbd0ec9d6b4a02dae38730b77b14000c1f3",
    "df4a82f4fb46cc2248280c462e18f08d55a3d112",
    "d50efdf75a8daeced88d79b168f68d189fb87e13",
    "843d7b8f07f4899ad153ffabc25e09a6c0e897c7",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1",
    "ce6991c2cfb3b666b53c5ad8b5b1f18d0eca9b21",
    "83df500ae8c247c268e4505054aad99ed7df8999",
    "1707517294d44202e104305e7b0c6fb12dd1a6dd",
    "c6a69cc40dcb388b5ddc3e616064f130ef3608e2",
    "6cad802018b6b82ea4df53aaf91a0bbc98b2f9a3",
    "88649c3f306907e85ff8bf18bd6ac986a6a54005",
    "ee1c58b83ee157b446d8a8218ea6c5e864094d1d",
    "4d08164b8dcd0fd8cd02e6c6a64cfedf56636aee",
    "fa85e52f102ba75426ebf3bb49533009235ee3e0",
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb"
  ],
  "changeHistoryShort": {
    "2fcc704a0e7d863f19b5b14fb412c14f3c063dd4": "Ybodychange",
    "53eadfbd0ec9d6b4a02dae38730b77b14000c1f3": "Ybodychange",
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": "Yfilerename",
    "d50efdf75a8daeced88d79b168f68d189fb87e13": "Ybodychange",
    "843d7b8f07f4899ad153ffabc25e09a6c0e897c7": "Ybodychange",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": "Yfilerename",
    "ce6991c2cfb3b666b53c5ad8b5b1f18d0eca9b21": "Ydocchange",
    "83df500ae8c247c268e4505054aad99ed7df8999": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "1707517294d44202e104305e7b0c6fb12dd1a6dd": "Ymultichange(Ymovefromfile,Yformatchange)",
    "c6a69cc40dcb388b5ddc3e616064f130ef3608e2": "Ymultichange(Ymovefromfile,Yformatchange)",
    "6cad802018b6b82ea4df53aaf91a0bbc98b2f9a3": "Ydocchange",
    "88649c3f306907e85ff8bf18bd6ac986a6a54005": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "ee1c58b83ee157b446d8a8218ea6c5e864094d1d": "Ybodychange",
    "4d08164b8dcd0fd8cd02e6c6a64cfedf56636aee": "Ybodychange",
    "fa85e52f102ba75426ebf3bb49533009235ee3e0": "Ymultichange(Ybodychange,Ydocchange)",
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2fcc704a0e7d863f19b5b14fb412c14f3c063dd4": {
      "type": "Ybodychange",
      "commitMessage": "Add IllegalInstantException\n\nBetter handle DST gaps\n",
      "commitDate": "1/7/13, 5:04 AM",
      "commitName": "2fcc704a0e7d863f19b5b14fb412c14f3c063dd4",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "7/31/11, 3:11 AM",
      "commitNameOld": "1ec3c2f0962d41db0d83e01ac5df26d7b954aa34",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 526.12,
      "commitsBetweenForRepo": 73,
      "commitsBetweenForFile": 1,
      "actualSource": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields \u003d iSavedFields;\n    int count \u003d iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields \u003d savedFields \u003d (SavedField[]) iSavedFields.clone();\n        iSavedFieldsShared \u003d false;\n    }\n    sort(savedFields, count);\n    if (count \u003e 0) {\n        DurationField months \u003d DurationFieldType.months().getField(iChrono);\n        DurationField days \u003d DurationFieldType.days().getField(iChrono);\n        DurationField first \u003d savedFields[0].iField.getDurationField();\n        if (compareReverse(first, months) \u003e\u003d 0 \u0026\u0026 compareReverse(first, days) \u003c\u003d 0) {\n            saveField(DateTimeFieldType.year(), iDefaultYear);\n            return computeMillis(resetFields, text);\n        }\n    }\n    long millis \u003d iMillis;\n    try {\n        for (int i \u003d 0; i \u003c count; i++) {\n            millis \u003d savedFields[i].set(millis, resetFields);\n        }\n        if (resetFields) {\n            for (int i \u003d 0; i \u003c count; i++) {\n                millis \u003d savedFields[i].set(millis, i \u003d\u003d (count - 1));\n            }\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text !\u003d null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + \u0027\"\u0027);\n        }\n        throw e;\n    }\n    if (iOffset !\u003d null) {\n        millis -\u003d iOffset;\n    } else if (iZone !\u003d null) {\n        int offset \u003d iZone.getOffsetFromLocal(millis);\n        millis -\u003d offset;\n        if (offset !\u003d iZone.getOffset(millis)) {\n            String message \u003d \"Illegal instant due to time zone offset transition (\" + iZone + \u0027)\u0027;\n            if (text !\u003d null) {\n                message \u003d \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalInstantException(message);\n        }\n    }\n    return millis;\n}",
      "path": "src/main/java/org/joda/time/format/DateTimeParserBucket.java",
      "functionStartLine": 344,
      "functionName": "computeMillis",
      "functionAnnotation": "",
      "functionDoc": "Computes the parsed datetime by setting the saved fields.\nThis method is idempotent, but it is not thread-safe.\n\n@param resetFields false by default, but when true, unsaved field values are cleared\n@param text optional text being parsed, to be included in any error message\n@return milliseconds since 1970-01-01T00:00:00Z\n@throws IllegalArgumentException if any field is out of range\n@since 1.3\n",
      "diff": "@@ -1,48 +1,48 @@\n public long computeMillis(boolean resetFields, String text) {\n     SavedField[] savedFields \u003d iSavedFields;\n     int count \u003d iSavedFieldsCount;\n     if (iSavedFieldsShared) {\n         iSavedFields \u003d savedFields \u003d (SavedField[]) iSavedFields.clone();\n         iSavedFieldsShared \u003d false;\n     }\n     sort(savedFields, count);\n     if (count \u003e 0) {\n         DurationField months \u003d DurationFieldType.months().getField(iChrono);\n         DurationField days \u003d DurationFieldType.days().getField(iChrono);\n         DurationField first \u003d savedFields[0].iField.getDurationField();\n         if (compareReverse(first, months) \u003e\u003d 0 \u0026\u0026 compareReverse(first, days) \u003c\u003d 0) {\n             saveField(DateTimeFieldType.year(), iDefaultYear);\n             return computeMillis(resetFields, text);\n         }\n     }\n     long millis \u003d iMillis;\n     try {\n         for (int i \u003d 0; i \u003c count; i++) {\n             millis \u003d savedFields[i].set(millis, resetFields);\n         }\n         if (resetFields) {\n             for (int i \u003d 0; i \u003c count; i++) {\n                 millis \u003d savedFields[i].set(millis, i \u003d\u003d (count - 1));\n             }\n         }\n     } catch (IllegalFieldValueException e) {\n         if (text !\u003d null) {\n             e.prependMessage(\"Cannot parse \\\"\" + text + \u0027\"\u0027);\n         }\n         throw e;\n     }\n     if (iOffset !\u003d null) {\n         millis -\u003d iOffset;\n     } else if (iZone !\u003d null) {\n         int offset \u003d iZone.getOffsetFromLocal(millis);\n         millis -\u003d offset;\n         if (offset !\u003d iZone.getOffset(millis)) {\n             String message \u003d \"Illegal instant due to time zone offset transition (\" + iZone + \u0027)\u0027;\n             if (text !\u003d null) {\n                 message \u003d \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n             }\n-            throw new IllegalArgumentException(message);\n+            throw new IllegalInstantException(message);\n         }\n     }\n     return millis;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "53eadfbd0ec9d6b4a02dae38730b77b14000c1f3": {
      "type": "Ybodychange",
      "commitMessage": "Support parsing of date-time zone IDs like Europe/London\n",
      "commitDate": "7/30/11, 4:48 AM",
      "commitName": "53eadfbd0ec9d6b4a02dae38730b77b14000c1f3",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "5/16/11, 10:02 AM",
      "commitNameOld": "df4a82f4fb46cc2248280c462e18f08d55a3d112",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 74.78,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "actualSource": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields \u003d iSavedFields;\n    int count \u003d iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields \u003d savedFields \u003d (SavedField[]) iSavedFields.clone();\n        iSavedFieldsShared \u003d false;\n    }\n    sort(savedFields, count);\n    if (count \u003e 0) {\n        DurationField months \u003d DurationFieldType.months().getField(iChrono);\n        DurationField days \u003d DurationFieldType.days().getField(iChrono);\n        DurationField first \u003d savedFields[0].iField.getDurationField();\n        if (compareReverse(first, months) \u003e\u003d 0 \u0026\u0026 compareReverse(first, days) \u003c\u003d 0) {\n            saveField(DateTimeFieldType.year(), iDefaultYear);\n            return computeMillis(resetFields, text);\n        }\n    }\n    long millis \u003d iMillis;\n    try {\n        for (int i \u003d 0; i \u003c count; i++) {\n            millis \u003d savedFields[i].set(millis, resetFields);\n        }\n        if (resetFields) {\n            for (int i \u003d 0; i \u003c count; i++) {\n                millis \u003d savedFields[i].set(millis, i \u003d\u003d (count - 1));\n            }\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text !\u003d null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + \u0027\"\u0027);\n        }\n        throw e;\n    }\n    if (iOffset !\u003d null) {\n        millis -\u003d iOffset;\n    } else if (iZone !\u003d null) {\n        int offset \u003d iZone.getOffsetFromLocal(millis);\n        millis -\u003d offset;\n        if (offset !\u003d iZone.getOffset(millis)) {\n            String message \u003d \"Illegal instant due to time zone offset transition (\" + iZone + \u0027)\u0027;\n            if (text !\u003d null) {\n                message \u003d \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n    return millis;\n}",
      "path": "src/main/java/org/joda/time/format/DateTimeParserBucket.java",
      "functionStartLine": 325,
      "functionName": "computeMillis",
      "functionAnnotation": "",
      "functionDoc": "Computes the parsed datetime by setting the saved fields.\nThis method is idempotent, but it is not thread-safe.\n\n@param resetFields false by default, but when true, unsaved field values are cleared\n@param text optional text being parsed, to be included in any error message\n@return milliseconds since 1970-01-01T00:00:00Z\n@throws IllegalArgumentException if any field is out of range\n@since 1.3\n",
      "diff": "@@ -1,48 +1,48 @@\n public long computeMillis(boolean resetFields, String text) {\n     SavedField[] savedFields \u003d iSavedFields;\n     int count \u003d iSavedFieldsCount;\n     if (iSavedFieldsShared) {\n         iSavedFields \u003d savedFields \u003d (SavedField[]) iSavedFields.clone();\n         iSavedFieldsShared \u003d false;\n     }\n     sort(savedFields, count);\n     if (count \u003e 0) {\n         DurationField months \u003d DurationFieldType.months().getField(iChrono);\n         DurationField days \u003d DurationFieldType.days().getField(iChrono);\n         DurationField first \u003d savedFields[0].iField.getDurationField();\n         if (compareReverse(first, months) \u003e\u003d 0 \u0026\u0026 compareReverse(first, days) \u003c\u003d 0) {\n             saveField(DateTimeFieldType.year(), iDefaultYear);\n             return computeMillis(resetFields, text);\n         }\n     }\n     long millis \u003d iMillis;\n     try {\n         for (int i \u003d 0; i \u003c count; i++) {\n             millis \u003d savedFields[i].set(millis, resetFields);\n         }\n         if (resetFields) {\n             for (int i \u003d 0; i \u003c count; i++) {\n                 millis \u003d savedFields[i].set(millis, i \u003d\u003d (count - 1));\n             }\n         }\n     } catch (IllegalFieldValueException e) {\n         if (text !\u003d null) {\n             e.prependMessage(\"Cannot parse \\\"\" + text + \u0027\"\u0027);\n         }\n         throw e;\n     }\n-    if (iZone \u003d\u003d null) {\n+    if (iOffset !\u003d null) {\n         millis -\u003d iOffset;\n-    } else {\n+    } else if (iZone !\u003d null) {\n         int offset \u003d iZone.getOffsetFromLocal(millis);\n         millis -\u003d offset;\n         if (offset !\u003d iZone.getOffset(millis)) {\n             String message \u003d \"Illegal instant due to time zone offset transition (\" + iZone + \u0027)\u0027;\n             if (text !\u003d null) {\n                 message \u003d \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n             }\n             throw new IllegalArgumentException(message);\n         }\n     }\n     return millis;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": {
      "type": "Yfilerename",
      "commitMessage": "Remove JodaTime folder moving files to top level\n",
      "commitDate": "5/16/11, 10:02 AM",
      "commitName": "df4a82f4fb46cc2248280c462e18f08d55a3d112",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "5/16/11, 9:58 AM",
      "commitNameOld": "72b22654962284bac59c2777131b42a2d1f53228",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields \u003d iSavedFields;\n    int count \u003d iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields \u003d savedFields \u003d (SavedField[]) iSavedFields.clone();\n        iSavedFieldsShared \u003d false;\n    }\n    sort(savedFields, count);\n    if (count \u003e 0) {\n        DurationField months \u003d DurationFieldType.months().getField(iChrono);\n        DurationField days \u003d DurationFieldType.days().getField(iChrono);\n        DurationField first \u003d savedFields[0].iField.getDurationField();\n        if (compareReverse(first, months) \u003e\u003d 0 \u0026\u0026 compareReverse(first, days) \u003c\u003d 0) {\n            saveField(DateTimeFieldType.year(), iDefaultYear);\n            return computeMillis(resetFields, text);\n        }\n    }\n    long millis \u003d iMillis;\n    try {\n        for (int i \u003d 0; i \u003c count; i++) {\n            millis \u003d savedFields[i].set(millis, resetFields);\n        }\n        if (resetFields) {\n            for (int i \u003d 0; i \u003c count; i++) {\n                millis \u003d savedFields[i].set(millis, i \u003d\u003d (count - 1));\n            }\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text !\u003d null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + \u0027\"\u0027);\n        }\n        throw e;\n    }\n    if (iZone \u003d\u003d null) {\n        millis -\u003d iOffset;\n    } else {\n        int offset \u003d iZone.getOffsetFromLocal(millis);\n        millis -\u003d offset;\n        if (offset !\u003d iZone.getOffset(millis)) {\n            String message \u003d \"Illegal instant due to time zone offset transition (\" + iZone + \u0027)\u0027;\n            if (text !\u003d null) {\n                message \u003d \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n    return millis;\n}",
      "path": "src/main/java/org/joda/time/format/DateTimeParserBucket.java",
      "functionStartLine": 331,
      "functionName": "computeMillis",
      "functionAnnotation": "",
      "functionDoc": "Computes the parsed datetime by setting the saved fields.\nThis method is idempotent, but it is not thread-safe.\n\n@param resetFields false by default, but when true, unsaved field values are cleared\n@param text optional text being parsed, to be included in any error message\n@return milliseconds since 1970-01-01T00:00:00Z\n@throws IllegalArgumentException if any field is out of range\n@since 1.3\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java",
        "newPath": "src/main/java/org/joda/time/format/DateTimeParserBucket.java"
      }
    },
    "d50efdf75a8daeced88d79b168f68d189fb87e13": {
      "type": "Ybodychange",
      "commitMessage": "Conversion from parsed values to a date-time handles weird sets of fields better [3161586]\nThis change is mostly for combinations like weekyear-month-week\nThe new code doesn\u0027t handle all combinations perfectly, but its better than it was\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1606 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "2/15/11, 6:53 AM",
      "commitName": "d50efdf75a8daeced88d79b168f68d189fb87e13",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "11/18/10, 11:26 AM",
      "commitNameOld": "843d7b8f07f4899ad153ffabc25e09a6c0e897c7",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 88.81,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "actualSource": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields \u003d iSavedFields;\n    int count \u003d iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields \u003d savedFields \u003d (SavedField[]) iSavedFields.clone();\n        iSavedFieldsShared \u003d false;\n    }\n    sort(savedFields, count);\n    if (count \u003e 0) {\n        DurationField months \u003d DurationFieldType.months().getField(iChrono);\n        DurationField days \u003d DurationFieldType.days().getField(iChrono);\n        DurationField first \u003d savedFields[0].iField.getDurationField();\n        if (compareReverse(first, months) \u003e\u003d 0 \u0026\u0026 compareReverse(first, days) \u003c\u003d 0) {\n            saveField(DateTimeFieldType.year(), iDefaultYear);\n            return computeMillis(resetFields, text);\n        }\n    }\n    long millis \u003d iMillis;\n    try {\n        for (int i \u003d 0; i \u003c count; i++) {\n            millis \u003d savedFields[i].set(millis, resetFields);\n        }\n        if (resetFields) {\n            for (int i \u003d 0; i \u003c count; i++) {\n                millis \u003d savedFields[i].set(millis, i \u003d\u003d (count - 1));\n            }\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text !\u003d null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + \u0027\"\u0027);\n        }\n        throw e;\n    }\n    if (iZone \u003d\u003d null) {\n        millis -\u003d iOffset;\n    } else {\n        int offset \u003d iZone.getOffsetFromLocal(millis);\n        millis -\u003d offset;\n        if (offset !\u003d iZone.getOffset(millis)) {\n            String message \u003d \"Illegal instant due to time zone offset transition (\" + iZone + \u0027)\u0027;\n            if (text !\u003d null) {\n                message \u003d \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n    return millis;\n}",
      "path": "JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java",
      "functionStartLine": 331,
      "functionName": "computeMillis",
      "functionAnnotation": "",
      "functionDoc": "Computes the parsed datetime by setting the saved fields.\nThis method is idempotent, but it is not thread-safe.\n\n@param resetFields false by default, but when true, unsaved field values are cleared\n@param text optional text being parsed, to be included in any error message\n@return milliseconds since 1970-01-01T00:00:00Z\n@throws IllegalArgumentException if any field is out of range\n@since 1.3\n",
      "diff": "@@ -1,43 +1,48 @@\n public long computeMillis(boolean resetFields, String text) {\n     SavedField[] savedFields \u003d iSavedFields;\n     int count \u003d iSavedFieldsCount;\n     if (iSavedFieldsShared) {\n         iSavedFields \u003d savedFields \u003d (SavedField[]) iSavedFields.clone();\n         iSavedFieldsShared \u003d false;\n     }\n     sort(savedFields, count);\n     if (count \u003e 0) {\n         DurationField months \u003d DurationFieldType.months().getField(iChrono);\n         DurationField days \u003d DurationFieldType.days().getField(iChrono);\n         DurationField first \u003d savedFields[0].iField.getDurationField();\n         if (compareReverse(first, months) \u003e\u003d 0 \u0026\u0026 compareReverse(first, days) \u003c\u003d 0) {\n             saveField(DateTimeFieldType.year(), iDefaultYear);\n             return computeMillis(resetFields, text);\n         }\n     }\n     long millis \u003d iMillis;\n     try {\n         for (int i \u003d 0; i \u003c count; i++) {\n             millis \u003d savedFields[i].set(millis, resetFields);\n         }\n+        if (resetFields) {\n+            for (int i \u003d 0; i \u003c count; i++) {\n+                millis \u003d savedFields[i].set(millis, i \u003d\u003d (count - 1));\n+            }\n+        }\n     } catch (IllegalFieldValueException e) {\n         if (text !\u003d null) {\n             e.prependMessage(\"Cannot parse \\\"\" + text + \u0027\"\u0027);\n         }\n         throw e;\n     }\n     if (iZone \u003d\u003d null) {\n         millis -\u003d iOffset;\n     } else {\n         int offset \u003d iZone.getOffsetFromLocal(millis);\n         millis -\u003d offset;\n         if (offset !\u003d iZone.getOffset(millis)) {\n             String message \u003d \"Illegal instant due to time zone offset transition (\" + iZone + \u0027)\u0027;\n             if (text !\u003d null) {\n                 message \u003d \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n             }\n             throw new IllegalArgumentException(message);\n         }\n     }\n     return millis;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "843d7b8f07f4899ad153ffabc25e09a6c0e897c7": {
      "type": "Ybodychange",
      "commitMessage": "Parse month-day in year 2000 instead of 1970 to parse Feb 29\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1591 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "11/18/10, 11:26 AM",
      "commitName": "843d7b8f07f4899ad153ffabc25e09a6c0e897c7",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/8/10, 5:17 PM",
      "commitNameOld": "53feb3fa56af7260e607844524b7e5a9be49ecc1",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 101.8,
      "commitsBetweenForRepo": 44,
      "commitsBetweenForFile": 1,
      "actualSource": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields \u003d iSavedFields;\n    int count \u003d iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields \u003d savedFields \u003d (SavedField[]) iSavedFields.clone();\n        iSavedFieldsShared \u003d false;\n    }\n    sort(savedFields, count);\n    if (count \u003e 0) {\n        DurationField months \u003d DurationFieldType.months().getField(iChrono);\n        DurationField days \u003d DurationFieldType.days().getField(iChrono);\n        DurationField first \u003d savedFields[0].iField.getDurationField();\n        if (compareReverse(first, months) \u003e\u003d 0 \u0026\u0026 compareReverse(first, days) \u003c\u003d 0) {\n            saveField(DateTimeFieldType.year(), iDefaultYear);\n            return computeMillis(resetFields, text);\n        }\n    }\n    long millis \u003d iMillis;\n    try {\n        for (int i \u003d 0; i \u003c count; i++) {\n            millis \u003d savedFields[i].set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text !\u003d null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + \u0027\"\u0027);\n        }\n        throw e;\n    }\n    if (iZone \u003d\u003d null) {\n        millis -\u003d iOffset;\n    } else {\n        int offset \u003d iZone.getOffsetFromLocal(millis);\n        millis -\u003d offset;\n        if (offset !\u003d iZone.getOffset(millis)) {\n            String message \u003d \"Illegal instant due to time zone offset transition (\" + iZone + \u0027)\u0027;\n            if (text !\u003d null) {\n                message \u003d \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n    return millis;\n}",
      "path": "JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java",
      "functionStartLine": 331,
      "functionName": "computeMillis",
      "functionAnnotation": "",
      "functionDoc": "Computes the parsed datetime by setting the saved fields.\nThis method is idempotent, but it is not thread-safe.\n\n@param resetFields false by default, but when true, unsaved field values are cleared\n@param text optional text being parsed, to be included in any error message\n@return milliseconds since 1970-01-01T00:00:00Z\n@throws IllegalArgumentException if any field is out of range\n@since 1.3\n",
      "diff": "@@ -1,34 +1,43 @@\n public long computeMillis(boolean resetFields, String text) {\n     SavedField[] savedFields \u003d iSavedFields;\n     int count \u003d iSavedFieldsCount;\n     if (iSavedFieldsShared) {\n         iSavedFields \u003d savedFields \u003d (SavedField[]) iSavedFields.clone();\n         iSavedFieldsShared \u003d false;\n     }\n     sort(savedFields, count);\n+    if (count \u003e 0) {\n+        DurationField months \u003d DurationFieldType.months().getField(iChrono);\n+        DurationField days \u003d DurationFieldType.days().getField(iChrono);\n+        DurationField first \u003d savedFields[0].iField.getDurationField();\n+        if (compareReverse(first, months) \u003e\u003d 0 \u0026\u0026 compareReverse(first, days) \u003c\u003d 0) {\n+            saveField(DateTimeFieldType.year(), iDefaultYear);\n+            return computeMillis(resetFields, text);\n+        }\n+    }\n     long millis \u003d iMillis;\n     try {\n         for (int i \u003d 0; i \u003c count; i++) {\n             millis \u003d savedFields[i].set(millis, resetFields);\n         }\n     } catch (IllegalFieldValueException e) {\n         if (text !\u003d null) {\n             e.prependMessage(\"Cannot parse \\\"\" + text + \u0027\"\u0027);\n         }\n         throw e;\n     }\n     if (iZone \u003d\u003d null) {\n         millis -\u003d iOffset;\n     } else {\n         int offset \u003d iZone.getOffsetFromLocal(millis);\n         millis -\u003d offset;\n         if (offset !\u003d iZone.getOffset(millis)) {\n             String message \u003d \"Illegal instant due to time zone offset transition (\" + iZone + \u0027)\u0027;\n             if (text !\u003d null) {\n                 message \u003d \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n             }\n             throw new IllegalArgumentException(message);\n         }\n     }\n     return millis;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": {
      "type": "Yfilerename",
      "commitMessage": "Convert to maven 2\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1540 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/8/10, 5:17 PM",
      "commitName": "53feb3fa56af7260e607844524b7e5a9be49ecc1",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/8/10, 5:02 PM",
      "commitNameOld": "7fa2ceaf5d95d050095432aa646ea803aa35e122",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields \u003d iSavedFields;\n    int count \u003d iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields \u003d savedFields \u003d (SavedField[]) iSavedFields.clone();\n        iSavedFieldsShared \u003d false;\n    }\n    sort(savedFields, count);\n    long millis \u003d iMillis;\n    try {\n        for (int i \u003d 0; i \u003c count; i++) {\n            millis \u003d savedFields[i].set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text !\u003d null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + \u0027\"\u0027);\n        }\n        throw e;\n    }\n    if (iZone \u003d\u003d null) {\n        millis -\u003d iOffset;\n    } else {\n        int offset \u003d iZone.getOffsetFromLocal(millis);\n        millis -\u003d offset;\n        if (offset !\u003d iZone.getOffset(millis)) {\n            String message \u003d \"Illegal instant due to time zone offset transition (\" + iZone + \u0027)\u0027;\n            if (text !\u003d null) {\n                message \u003d \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n    return millis;\n}",
      "path": "JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java",
      "functionStartLine": 304,
      "functionName": "computeMillis",
      "functionAnnotation": "",
      "functionDoc": "Computes the parsed datetime by setting the saved fields.\nThis method is idempotent, but it is not thread-safe.\n\n@param resetFields false by default, but when true, unsaved field values are cleared\n@param text optional text being parsed, to be included in any error message\n@return milliseconds since 1970-01-01T00:00:00Z\n@throws IllegalArgumentException if any field is out of range\n@since 1.3\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java",
        "newPath": "JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java"
      }
    },
    "ce6991c2cfb3b666b53c5ad8b5b1f18d0eca9b21": {
      "type": "Ydocchange",
      "commitMessage": "Add missing since tags for 1.3\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1110 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "7/31/06, 3:10 PM",
      "commitName": "ce6991c2cfb3b666b53c5ad8b5b1f18d0eca9b21",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "3/26/06, 3:41 PM",
      "commitNameOld": "83df500ae8c247c268e4505054aad99ed7df8999",
      "commitAuthorOld": "Brian S O\u0027Neill",
      "daysBetweenCommits": 126.94,
      "commitsBetweenForRepo": 58,
      "commitsBetweenForFile": 1,
      "actualSource": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields \u003d iSavedFields;\n    int count \u003d iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields \u003d savedFields \u003d (SavedField[]) iSavedFields.clone();\n        iSavedFieldsShared \u003d false;\n    }\n    sort(savedFields, count);\n    long millis \u003d iMillis;\n    try {\n        for (int i \u003d 0; i \u003c count; i++) {\n            millis \u003d savedFields[i].set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text !\u003d null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + \u0027\"\u0027);\n        }\n        throw e;\n    }\n    if (iZone \u003d\u003d null) {\n        millis -\u003d iOffset;\n    } else {\n        int offset \u003d iZone.getOffsetFromLocal(millis);\n        millis -\u003d offset;\n        if (offset !\u003d iZone.getOffset(millis)) {\n            String message \u003d \"Illegal instant due to time zone offset transition (\" + iZone + \u0027)\u0027;\n            if (text !\u003d null) {\n                message \u003d \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n    return millis;\n}",
      "path": "JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java",
      "functionStartLine": 304,
      "functionName": "computeMillis",
      "functionAnnotation": "",
      "functionDoc": "Computes the parsed datetime by setting the saved fields.\nThis method is idempotent, but it is not thread-safe.\n\n@param resetFields false by default, but when true, unsaved field values are cleared\n@param text optional text being parsed, to be included in any error message\n@return milliseconds since 1970-01-01T00:00:00Z\n@throws IllegalArgumentException if any field is out of range\n@since 1.3\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Computes the parsed datetime by setting the saved fields.\nThis method is idempotent, but it is not thread-safe.\n\n@param resetFields false by default, but when true, unsaved field values are cleared\n@param text optional text being parsed, to be included in any error message\n@return milliseconds since 1970-01-01T00:00:00Z\n@throws IllegalArgumentException if any field is out of range\n",
        "newValue": "Computes the parsed datetime by setting the saved fields.\nThis method is idempotent, but it is not thread-safe.\n\n@param resetFields false by default, but when true, unsaved field values are cleared\n@param text optional text being parsed, to be included in any error message\n@return milliseconds since 1970-01-01T00:00:00Z\n@throws IllegalArgumentException if any field is out of range\n@since 1.3\n"
      }
    },
    "83df500ae8c247c268e4505054aad99ed7df8999": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "If a parsed datetime is illegal due to field range or time zone offset transition, thrown exception includes text of datetime being parsed.\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1052 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "3/26/06, 3:41 PM",
      "commitName": "83df500ae8c247c268e4505054aad99ed7df8999",
      "commitAuthor": "Brian S O\u0027Neill",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "If a parsed datetime is illegal due to field range or time zone offset transition, thrown exception includes text of datetime being parsed.\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1052 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "3/26/06, 3:41 PM",
          "commitName": "83df500ae8c247c268e4505054aad99ed7df8999",
          "commitAuthor": "Brian S O\u0027Neill",
          "commitDateOld": "6/1/05, 10:43 PM",
          "commitNameOld": "bfe653adbe565b4e21b27d2bf5f1003c235bd60f",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 297.75,
          "commitsBetweenForRepo": 273,
          "commitsBetweenForFile": 1,
          "actualSource": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields \u003d iSavedFields;\n    int count \u003d iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields \u003d savedFields \u003d (SavedField[]) iSavedFields.clone();\n        iSavedFieldsShared \u003d false;\n    }\n    sort(savedFields, count);\n    long millis \u003d iMillis;\n    try {\n        for (int i \u003d 0; i \u003c count; i++) {\n            millis \u003d savedFields[i].set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text !\u003d null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + \u0027\"\u0027);\n        }\n        throw e;\n    }\n    if (iZone \u003d\u003d null) {\n        millis -\u003d iOffset;\n    } else {\n        int offset \u003d iZone.getOffsetFromLocal(millis);\n        millis -\u003d offset;\n        if (offset !\u003d iZone.getOffset(millis)) {\n            String message \u003d \"Illegal instant due to time zone offset transition (\" + iZone + \u0027)\u0027;\n            if (text !\u003d null) {\n                message \u003d \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n    return millis;\n}",
          "path": "JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java",
          "functionStartLine": 303,
          "functionName": "computeMillis",
          "functionAnnotation": "",
          "functionDoc": "Computes the parsed datetime by setting the saved fields.\nThis method is idempotent, but it is not thread-safe.\n\n@param resetFields false by default, but when true, unsaved field values are cleared\n@param text optional text being parsed, to be included in any error message\n@return milliseconds since 1970-01-01T00:00:00Z\n@throws IllegalArgumentException if any field is out of range\n",
          "diff": "@@ -1,23 +1,34 @@\n-public long computeMillis(boolean resetFields) {\n+public long computeMillis(boolean resetFields, String text) {\n     SavedField[] savedFields \u003d iSavedFields;\n     int count \u003d iSavedFieldsCount;\n     if (iSavedFieldsShared) {\n         iSavedFields \u003d savedFields \u003d (SavedField[]) iSavedFields.clone();\n         iSavedFieldsShared \u003d false;\n     }\n     sort(savedFields, count);\n     long millis \u003d iMillis;\n-    for (int i \u003d 0; i \u003c count; i++) {\n-        millis \u003d savedFields[i].set(millis, resetFields);\n+    try {\n+        for (int i \u003d 0; i \u003c count; i++) {\n+            millis \u003d savedFields[i].set(millis, resetFields);\n+        }\n+    } catch (IllegalFieldValueException e) {\n+        if (text !\u003d null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + \u0027\"\u0027);\n+        }\n+        throw e;\n     }\n     if (iZone \u003d\u003d null) {\n         millis -\u003d iOffset;\n     } else {\n         int offset \u003d iZone.getOffsetFromLocal(millis);\n         millis -\u003d offset;\n         if (offset !\u003d iZone.getOffset(millis)) {\n-            throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition\");\n+            String message \u003d \"Illegal instant due to time zone offset transition (\" + iZone + \u0027)\u0027;\n+            if (text !\u003d null) {\n+                message \u003d \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n+            }\n+            throw new IllegalArgumentException(message);\n         }\n     }\n     return millis;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[resetFields-boolean]",
            "newValue": "[resetFields-boolean, text-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "If a parsed datetime is illegal due to field range or time zone offset transition, thrown exception includes text of datetime being parsed.\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1052 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "3/26/06, 3:41 PM",
          "commitName": "83df500ae8c247c268e4505054aad99ed7df8999",
          "commitAuthor": "Brian S O\u0027Neill",
          "commitDateOld": "6/1/05, 10:43 PM",
          "commitNameOld": "bfe653adbe565b4e21b27d2bf5f1003c235bd60f",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 297.75,
          "commitsBetweenForRepo": 273,
          "commitsBetweenForFile": 1,
          "actualSource": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields \u003d iSavedFields;\n    int count \u003d iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields \u003d savedFields \u003d (SavedField[]) iSavedFields.clone();\n        iSavedFieldsShared \u003d false;\n    }\n    sort(savedFields, count);\n    long millis \u003d iMillis;\n    try {\n        for (int i \u003d 0; i \u003c count; i++) {\n            millis \u003d savedFields[i].set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text !\u003d null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + \u0027\"\u0027);\n        }\n        throw e;\n    }\n    if (iZone \u003d\u003d null) {\n        millis -\u003d iOffset;\n    } else {\n        int offset \u003d iZone.getOffsetFromLocal(millis);\n        millis -\u003d offset;\n        if (offset !\u003d iZone.getOffset(millis)) {\n            String message \u003d \"Illegal instant due to time zone offset transition (\" + iZone + \u0027)\u0027;\n            if (text !\u003d null) {\n                message \u003d \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n    return millis;\n}",
          "path": "JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java",
          "functionStartLine": 303,
          "functionName": "computeMillis",
          "functionAnnotation": "",
          "functionDoc": "Computes the parsed datetime by setting the saved fields.\nThis method is idempotent, but it is not thread-safe.\n\n@param resetFields false by default, but when true, unsaved field values are cleared\n@param text optional text being parsed, to be included in any error message\n@return milliseconds since 1970-01-01T00:00:00Z\n@throws IllegalArgumentException if any field is out of range\n",
          "diff": "@@ -1,23 +1,34 @@\n-public long computeMillis(boolean resetFields) {\n+public long computeMillis(boolean resetFields, String text) {\n     SavedField[] savedFields \u003d iSavedFields;\n     int count \u003d iSavedFieldsCount;\n     if (iSavedFieldsShared) {\n         iSavedFields \u003d savedFields \u003d (SavedField[]) iSavedFields.clone();\n         iSavedFieldsShared \u003d false;\n     }\n     sort(savedFields, count);\n     long millis \u003d iMillis;\n-    for (int i \u003d 0; i \u003c count; i++) {\n-        millis \u003d savedFields[i].set(millis, resetFields);\n+    try {\n+        for (int i \u003d 0; i \u003c count; i++) {\n+            millis \u003d savedFields[i].set(millis, resetFields);\n+        }\n+    } catch (IllegalFieldValueException e) {\n+        if (text !\u003d null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + \u0027\"\u0027);\n+        }\n+        throw e;\n     }\n     if (iZone \u003d\u003d null) {\n         millis -\u003d iOffset;\n     } else {\n         int offset \u003d iZone.getOffsetFromLocal(millis);\n         millis -\u003d offset;\n         if (offset !\u003d iZone.getOffset(millis)) {\n-            throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition\");\n+            String message \u003d \"Illegal instant due to time zone offset transition (\" + iZone + \u0027)\u0027;\n+            if (text !\u003d null) {\n+                message \u003d \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n+            }\n+            throw new IllegalArgumentException(message);\n         }\n     }\n     return millis;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "If a parsed datetime is illegal due to field range or time zone offset transition, thrown exception includes text of datetime being parsed.\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1052 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "3/26/06, 3:41 PM",
          "commitName": "83df500ae8c247c268e4505054aad99ed7df8999",
          "commitAuthor": "Brian S O\u0027Neill",
          "commitDateOld": "6/1/05, 10:43 PM",
          "commitNameOld": "bfe653adbe565b4e21b27d2bf5f1003c235bd60f",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 297.75,
          "commitsBetweenForRepo": 273,
          "commitsBetweenForFile": 1,
          "actualSource": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields \u003d iSavedFields;\n    int count \u003d iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields \u003d savedFields \u003d (SavedField[]) iSavedFields.clone();\n        iSavedFieldsShared \u003d false;\n    }\n    sort(savedFields, count);\n    long millis \u003d iMillis;\n    try {\n        for (int i \u003d 0; i \u003c count; i++) {\n            millis \u003d savedFields[i].set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text !\u003d null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + \u0027\"\u0027);\n        }\n        throw e;\n    }\n    if (iZone \u003d\u003d null) {\n        millis -\u003d iOffset;\n    } else {\n        int offset \u003d iZone.getOffsetFromLocal(millis);\n        millis -\u003d offset;\n        if (offset !\u003d iZone.getOffset(millis)) {\n            String message \u003d \"Illegal instant due to time zone offset transition (\" + iZone + \u0027)\u0027;\n            if (text !\u003d null) {\n                message \u003d \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n    return millis;\n}",
          "path": "JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java",
          "functionStartLine": 303,
          "functionName": "computeMillis",
          "functionAnnotation": "",
          "functionDoc": "Computes the parsed datetime by setting the saved fields.\nThis method is idempotent, but it is not thread-safe.\n\n@param resetFields false by default, but when true, unsaved field values are cleared\n@param text optional text being parsed, to be included in any error message\n@return milliseconds since 1970-01-01T00:00:00Z\n@throws IllegalArgumentException if any field is out of range\n",
          "diff": "@@ -1,23 +1,34 @@\n-public long computeMillis(boolean resetFields) {\n+public long computeMillis(boolean resetFields, String text) {\n     SavedField[] savedFields \u003d iSavedFields;\n     int count \u003d iSavedFieldsCount;\n     if (iSavedFieldsShared) {\n         iSavedFields \u003d savedFields \u003d (SavedField[]) iSavedFields.clone();\n         iSavedFieldsShared \u003d false;\n     }\n     sort(savedFields, count);\n     long millis \u003d iMillis;\n-    for (int i \u003d 0; i \u003c count; i++) {\n-        millis \u003d savedFields[i].set(millis, resetFields);\n+    try {\n+        for (int i \u003d 0; i \u003c count; i++) {\n+            millis \u003d savedFields[i].set(millis, resetFields);\n+        }\n+    } catch (IllegalFieldValueException e) {\n+        if (text !\u003d null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + \u0027\"\u0027);\n+        }\n+        throw e;\n     }\n     if (iZone \u003d\u003d null) {\n         millis -\u003d iOffset;\n     } else {\n         int offset \u003d iZone.getOffsetFromLocal(millis);\n         millis -\u003d offset;\n         if (offset !\u003d iZone.getOffset(millis)) {\n-            throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition\");\n+            String message \u003d \"Illegal instant due to time zone offset transition (\" + iZone + \u0027)\u0027;\n+            if (text !\u003d null) {\n+                message \u003d \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n+            }\n+            throw new IllegalArgumentException(message);\n         }\n     }\n     return millis;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Computes the parsed datetime by setting the saved fields.\nThis method is idempotent, but it is not thread-safe.\n\n@param resetFields false by default, but when true, unsaved field values are cleared\n@return milliseconds since 1970-01-01T00:00:00Z\n@throws IllegalArgumentException if any field is out of range\n",
            "newValue": "Computes the parsed datetime by setting the saved fields.\nThis method is idempotent, but it is not thread-safe.\n\n@param resetFields false by default, but when true, unsaved field values are cleared\n@param text optional text being parsed, to be included in any error message\n@return milliseconds since 1970-01-01T00:00:00Z\n@throws IllegalArgumentException if any field is out of range\n"
          }
        }
      ]
    },
    "1707517294d44202e104305e7b0c6fb12dd1a6dd": {
      "type": "Ymultichange(Ymovefromfile,Yformatchange)",
      "commitMessage": "Restored formatting interfaces to provide same functionality as v0.95.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@604 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "12/12/04, 8:21 PM",
      "commitName": "1707517294d44202e104305e7b0c6fb12dd1a6dd",
      "commitAuthor": "Brian S O\u0027Neill",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "Restored formatting interfaces to provide same functionality as v0.95.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@604 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "12/12/04, 8:21 PM",
          "commitName": "1707517294d44202e104305e7b0c6fb12dd1a6dd",
          "commitAuthor": "Brian S O\u0027Neill",
          "commitDateOld": "12/12/04, 12:59 PM",
          "commitNameOld": "d1284b53b2a0d06a81cdd9e0ea1205d0e5c20631",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 0.31,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public long computeMillis(boolean resetFields) {\n    SavedField[] savedFields \u003d iSavedFields;\n    int count \u003d iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields \u003d savedFields \u003d (SavedField[]) iSavedFields.clone();\n        iSavedFieldsShared \u003d false;\n    }\n    sort(savedFields, count);\n    long millis \u003d iMillis;\n    for (int i \u003d 0; i \u003c count; i++) {\n        millis \u003d savedFields[i].set(millis, resetFields);\n    }\n    if (iZone \u003d\u003d null) {\n        millis -\u003d iOffset;\n    } else {\n        int offset \u003d iZone.getOffsetFromLocal(millis);\n        millis -\u003d offset;\n        if (offset !\u003d iZone.getOffset(millis)) {\n            throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition\");\n        }\n    }\n    return millis;\n}",
          "path": "JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java",
          "functionStartLine": 267,
          "functionName": "computeMillis",
          "functionAnnotation": "",
          "functionDoc": "Computes the parsed datetime by setting the saved fields.\nThis method is idempotent, but it is not thread-safe.\n\n@param resetFields false by default, but when true, unsaved field values are cleared\n@return milliseconds since 1970-01-01T00:00:00Z\n@throws IllegalArgumentException if any field is out of range\n",
          "diff": "",
          "extendedDetails": {
            "oldPath": "JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java",
            "newPath": "JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java",
            "oldMethodName": "computeMillis",
            "newMethodName": "computeMillis"
          }
        },
        {
          "type": "Yformatchange",
          "commitMessage": "Restored formatting interfaces to provide same functionality as v0.95.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@604 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "12/12/04, 8:21 PM",
          "commitName": "1707517294d44202e104305e7b0c6fb12dd1a6dd",
          "commitAuthor": "Brian S O\u0027Neill",
          "commitDateOld": "12/12/04, 12:59 PM",
          "commitNameOld": "d1284b53b2a0d06a81cdd9e0ea1205d0e5c20631",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 0.31,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public long computeMillis(boolean resetFields) {\n    SavedField[] savedFields \u003d iSavedFields;\n    int count \u003d iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields \u003d savedFields \u003d (SavedField[]) iSavedFields.clone();\n        iSavedFieldsShared \u003d false;\n    }\n    sort(savedFields, count);\n    long millis \u003d iMillis;\n    for (int i \u003d 0; i \u003c count; i++) {\n        millis \u003d savedFields[i].set(millis, resetFields);\n    }\n    if (iZone \u003d\u003d null) {\n        millis -\u003d iOffset;\n    } else {\n        int offset \u003d iZone.getOffsetFromLocal(millis);\n        millis -\u003d offset;\n        if (offset !\u003d iZone.getOffset(millis)) {\n            throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition\");\n        }\n    }\n    return millis;\n}",
          "path": "JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java",
          "functionStartLine": 267,
          "functionName": "computeMillis",
          "functionAnnotation": "",
          "functionDoc": "Computes the parsed datetime by setting the saved fields.\nThis method is idempotent, but it is not thread-safe.\n\n@param resetFields false by default, but when true, unsaved field values are cleared\n@return milliseconds since 1970-01-01T00:00:00Z\n@throws IllegalArgumentException if any field is out of range\n",
          "diff": "",
          "extendedDetails": {}
        }
      ]
    },
    "c6a69cc40dcb388b5ddc3e616064f130ef3608e2": {
      "type": "Ymultichange(Ymovefromfile,Yformatchange)",
      "commitMessage": "Refactor DateTimeParserBucket to inner class to aid package comprehension\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@544 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "10/28/04, 4:19 PM",
      "commitName": "c6a69cc40dcb388b5ddc3e616064f130ef3608e2",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "Refactor DateTimeParserBucket to inner class to aid package comprehension\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@544 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "10/28/04, 4:19 PM",
          "commitName": "c6a69cc40dcb388b5ddc3e616064f130ef3608e2",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "10/28/04, 3:56 PM",
          "commitNameOld": "6cad802018b6b82ea4df53aaf91a0bbc98b2f9a3",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public long computeMillis(boolean resetFields) {\n    SavedField[] savedFields \u003d iSavedFields;\n    int count \u003d iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields \u003d savedFields \u003d (SavedField[]) iSavedFields.clone();\n        iSavedFieldsShared \u003d false;\n    }\n    sort(savedFields, count);\n    long millis \u003d iMillis;\n    for (int i \u003d 0; i \u003c count; i++) {\n        millis \u003d savedFields[i].set(millis, resetFields);\n    }\n    if (iZone \u003d\u003d null) {\n        millis -\u003d iOffset;\n    } else {\n        int offset \u003d iZone.getOffsetFromLocal(millis);\n        millis -\u003d offset;\n        if (offset !\u003d iZone.getOffset(millis)) {\n            throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition\");\n        }\n    }\n    return millis;\n}",
          "path": "JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java",
          "functionStartLine": 498,
          "functionName": "computeMillis",
          "functionAnnotation": "",
          "functionDoc": "Computes the parsed datetime by setting the saved fields.\nThis method is idempotent, but it is not thread-safe.\n\n@param resetFields false by default, but when true, unsaved field values are cleared\n@return milliseconds since 1970-01-01T00:00:00Z\n@throws IllegalArgumentException if any field is out of range\n",
          "diff": "",
          "extendedDetails": {
            "oldPath": "JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java",
            "newPath": "JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java",
            "oldMethodName": "computeMillis",
            "newMethodName": "computeMillis"
          }
        },
        {
          "type": "Yformatchange",
          "commitMessage": "Refactor DateTimeParserBucket to inner class to aid package comprehension\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@544 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "10/28/04, 4:19 PM",
          "commitName": "c6a69cc40dcb388b5ddc3e616064f130ef3608e2",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "10/28/04, 3:56 PM",
          "commitNameOld": "6cad802018b6b82ea4df53aaf91a0bbc98b2f9a3",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public long computeMillis(boolean resetFields) {\n    SavedField[] savedFields \u003d iSavedFields;\n    int count \u003d iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields \u003d savedFields \u003d (SavedField[]) iSavedFields.clone();\n        iSavedFieldsShared \u003d false;\n    }\n    sort(savedFields, count);\n    long millis \u003d iMillis;\n    for (int i \u003d 0; i \u003c count; i++) {\n        millis \u003d savedFields[i].set(millis, resetFields);\n    }\n    if (iZone \u003d\u003d null) {\n        millis -\u003d iOffset;\n    } else {\n        int offset \u003d iZone.getOffsetFromLocal(millis);\n        millis -\u003d offset;\n        if (offset !\u003d iZone.getOffset(millis)) {\n            throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition\");\n        }\n    }\n    return millis;\n}",
          "path": "JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java",
          "functionStartLine": 498,
          "functionName": "computeMillis",
          "functionAnnotation": "",
          "functionDoc": "Computes the parsed datetime by setting the saved fields.\nThis method is idempotent, but it is not thread-safe.\n\n@param resetFields false by default, but when true, unsaved field values are cleared\n@return milliseconds since 1970-01-01T00:00:00Z\n@throws IllegalArgumentException if any field is out of range\n",
          "diff": "",
          "extendedDetails": {}
        }
      ]
    },
    "6cad802018b6b82ea4df53aaf91a0bbc98b2f9a3": {
      "type": "Ydocchange",
      "commitMessage": "Refactor format package to use late binding of chronology\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@543 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "10/28/04, 3:56 PM",
      "commitName": "6cad802018b6b82ea4df53aaf91a0bbc98b2f9a3",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/14/04, 9:29 AM",
      "commitNameOld": "88649c3f306907e85ff8bf18bd6ac986a6a54005",
      "commitAuthorOld": "Brian S O\u0027Neill",
      "daysBetweenCommits": 75.27,
      "commitsBetweenForRepo": 159,
      "commitsBetweenForFile": 1,
      "actualSource": "public long computeMillis(boolean resetFields) {\n    SavedField[] savedFields \u003d iSavedFields;\n    int count \u003d iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields \u003d savedFields \u003d (SavedField[]) iSavedFields.clone();\n        iSavedFieldsShared \u003d false;\n    }\n    sort(savedFields, count);\n    long millis \u003d iMillis;\n    for (int i \u003d 0; i \u003c count; i++) {\n        millis \u003d savedFields[i].set(millis, resetFields);\n    }\n    if (iZone \u003d\u003d null) {\n        millis -\u003d iOffset;\n    } else {\n        int offset \u003d iZone.getOffsetFromLocal(millis);\n        millis -\u003d offset;\n        if (offset !\u003d iZone.getOffset(millis)) {\n            throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition\");\n        }\n    }\n    return millis;\n}",
      "path": "JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java",
      "functionStartLine": 265,
      "functionName": "computeMillis",
      "functionAnnotation": "",
      "functionDoc": "Computes the parsed datetime by setting the saved fields.\nThis method is idempotent, but it is not thread-safe.\n\n@param resetFields false by default, but when true, unsaved field values are cleared\n@return milliseconds since 1970-01-01T00:00:00Z\n@throws IllegalArgumentException if any field is out of range\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Computes the parsed datetime by setting the saved fields. This method is\nidempotent, but it is not thread-safe.\n\n@param resetFields false by default, but when true, unsaved field values are cleared\n@return milliseconds since 1970-01-01T00:00:00Z\n@throws IllegalArgumentException if any field is out of range\n",
        "newValue": "Computes the parsed datetime by setting the saved fields.\nThis method is idempotent, but it is not thread-safe.\n\n@param resetFields false by default, but when true, unsaved field values are cleared\n@return milliseconds since 1970-01-01T00:00:00Z\n@throws IllegalArgumentException if any field is out of range\n"
      }
    },
    "88649c3f306907e85ff8bf18bd6ac986a6a54005": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "Fixed bug in parsing dates with an incomplete set of fields. They were defaulting to whatever they were on 1970-01-01.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@382 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/14/04, 9:29 AM",
      "commitName": "88649c3f306907e85ff8bf18bd6ac986a6a54005",
      "commitAuthor": "Brian S O\u0027Neill",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Fixed bug in parsing dates with an incomplete set of fields. They were defaulting to whatever they were on 1970-01-01.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@382 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "8/14/04, 9:29 AM",
          "commitName": "88649c3f306907e85ff8bf18bd6ac986a6a54005",
          "commitAuthor": "Brian S O\u0027Neill",
          "commitDateOld": "4/14/04, 4:43 PM",
          "commitNameOld": "a26563f0cd1fbdd5587a0f9d3c0c77864553d737",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 121.7,
          "commitsBetweenForRepo": 203,
          "commitsBetweenForFile": 1,
          "actualSource": "public long computeMillis(boolean resetFields) {\n    SavedField[] savedFields \u003d iSavedFields;\n    int count \u003d iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields \u003d savedFields \u003d (SavedField[]) iSavedFields.clone();\n        iSavedFieldsShared \u003d false;\n    }\n    sort(savedFields, count);\n    long millis \u003d iMillis;\n    for (int i \u003d 0; i \u003c count; i++) {\n        millis \u003d savedFields[i].set(millis, resetFields);\n    }\n    if (iZone \u003d\u003d null) {\n        millis -\u003d iOffset;\n    } else {\n        int offset \u003d iZone.getOffsetFromLocal(millis);\n        millis -\u003d offset;\n        if (offset !\u003d iZone.getOffset(millis)) {\n            throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition\");\n        }\n    }\n    return millis;\n}",
          "path": "JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java",
          "functionStartLine": 223,
          "functionName": "computeMillis",
          "functionAnnotation": "",
          "functionDoc": "Computes the parsed datetime by setting the saved fields. This method is\nidempotent, but it is not thread-safe.\n\n@param resetFields false by default, but when true, unsaved field values are cleared\n@return milliseconds since 1970-01-01T00:00:00Z\n@throws IllegalArgumentException if any field is out of range\n",
          "diff": "@@ -1,23 +1,23 @@\n-public long computeMillis() {\n+public long computeMillis(boolean resetFields) {\n     SavedField[] savedFields \u003d iSavedFields;\n     int count \u003d iSavedFieldsCount;\n     if (iSavedFieldsShared) {\n         iSavedFields \u003d savedFields \u003d (SavedField[]) iSavedFields.clone();\n         iSavedFieldsShared \u003d false;\n     }\n     sort(savedFields, count);\n     long millis \u003d iMillis;\n     for (int i \u003d 0; i \u003c count; i++) {\n-        millis \u003d savedFields[i].set(millis);\n+        millis \u003d savedFields[i].set(millis, resetFields);\n     }\n     if (iZone \u003d\u003d null) {\n         millis -\u003d iOffset;\n     } else {\n         int offset \u003d iZone.getOffsetFromLocal(millis);\n         millis -\u003d offset;\n         if (offset !\u003d iZone.getOffset(millis)) {\n             throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition\");\n         }\n     }\n     return millis;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[resetFields-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Fixed bug in parsing dates with an incomplete set of fields. They were defaulting to whatever they were on 1970-01-01.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@382 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "8/14/04, 9:29 AM",
          "commitName": "88649c3f306907e85ff8bf18bd6ac986a6a54005",
          "commitAuthor": "Brian S O\u0027Neill",
          "commitDateOld": "4/14/04, 4:43 PM",
          "commitNameOld": "a26563f0cd1fbdd5587a0f9d3c0c77864553d737",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 121.7,
          "commitsBetweenForRepo": 203,
          "commitsBetweenForFile": 1,
          "actualSource": "public long computeMillis(boolean resetFields) {\n    SavedField[] savedFields \u003d iSavedFields;\n    int count \u003d iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields \u003d savedFields \u003d (SavedField[]) iSavedFields.clone();\n        iSavedFieldsShared \u003d false;\n    }\n    sort(savedFields, count);\n    long millis \u003d iMillis;\n    for (int i \u003d 0; i \u003c count; i++) {\n        millis \u003d savedFields[i].set(millis, resetFields);\n    }\n    if (iZone \u003d\u003d null) {\n        millis -\u003d iOffset;\n    } else {\n        int offset \u003d iZone.getOffsetFromLocal(millis);\n        millis -\u003d offset;\n        if (offset !\u003d iZone.getOffset(millis)) {\n            throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition\");\n        }\n    }\n    return millis;\n}",
          "path": "JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java",
          "functionStartLine": 223,
          "functionName": "computeMillis",
          "functionAnnotation": "",
          "functionDoc": "Computes the parsed datetime by setting the saved fields. This method is\nidempotent, but it is not thread-safe.\n\n@param resetFields false by default, but when true, unsaved field values are cleared\n@return milliseconds since 1970-01-01T00:00:00Z\n@throws IllegalArgumentException if any field is out of range\n",
          "diff": "@@ -1,23 +1,23 @@\n-public long computeMillis() {\n+public long computeMillis(boolean resetFields) {\n     SavedField[] savedFields \u003d iSavedFields;\n     int count \u003d iSavedFieldsCount;\n     if (iSavedFieldsShared) {\n         iSavedFields \u003d savedFields \u003d (SavedField[]) iSavedFields.clone();\n         iSavedFieldsShared \u003d false;\n     }\n     sort(savedFields, count);\n     long millis \u003d iMillis;\n     for (int i \u003d 0; i \u003c count; i++) {\n-        millis \u003d savedFields[i].set(millis);\n+        millis \u003d savedFields[i].set(millis, resetFields);\n     }\n     if (iZone \u003d\u003d null) {\n         millis -\u003d iOffset;\n     } else {\n         int offset \u003d iZone.getOffsetFromLocal(millis);\n         millis -\u003d offset;\n         if (offset !\u003d iZone.getOffset(millis)) {\n             throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition\");\n         }\n     }\n     return millis;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Fixed bug in parsing dates with an incomplete set of fields. They were defaulting to whatever they were on 1970-01-01.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@382 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "8/14/04, 9:29 AM",
          "commitName": "88649c3f306907e85ff8bf18bd6ac986a6a54005",
          "commitAuthor": "Brian S O\u0027Neill",
          "commitDateOld": "4/14/04, 4:43 PM",
          "commitNameOld": "a26563f0cd1fbdd5587a0f9d3c0c77864553d737",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 121.7,
          "commitsBetweenForRepo": 203,
          "commitsBetweenForFile": 1,
          "actualSource": "public long computeMillis(boolean resetFields) {\n    SavedField[] savedFields \u003d iSavedFields;\n    int count \u003d iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields \u003d savedFields \u003d (SavedField[]) iSavedFields.clone();\n        iSavedFieldsShared \u003d false;\n    }\n    sort(savedFields, count);\n    long millis \u003d iMillis;\n    for (int i \u003d 0; i \u003c count; i++) {\n        millis \u003d savedFields[i].set(millis, resetFields);\n    }\n    if (iZone \u003d\u003d null) {\n        millis -\u003d iOffset;\n    } else {\n        int offset \u003d iZone.getOffsetFromLocal(millis);\n        millis -\u003d offset;\n        if (offset !\u003d iZone.getOffset(millis)) {\n            throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition\");\n        }\n    }\n    return millis;\n}",
          "path": "JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java",
          "functionStartLine": 223,
          "functionName": "computeMillis",
          "functionAnnotation": "",
          "functionDoc": "Computes the parsed datetime by setting the saved fields. This method is\nidempotent, but it is not thread-safe.\n\n@param resetFields false by default, but when true, unsaved field values are cleared\n@return milliseconds since 1970-01-01T00:00:00Z\n@throws IllegalArgumentException if any field is out of range\n",
          "diff": "@@ -1,23 +1,23 @@\n-public long computeMillis() {\n+public long computeMillis(boolean resetFields) {\n     SavedField[] savedFields \u003d iSavedFields;\n     int count \u003d iSavedFieldsCount;\n     if (iSavedFieldsShared) {\n         iSavedFields \u003d savedFields \u003d (SavedField[]) iSavedFields.clone();\n         iSavedFieldsShared \u003d false;\n     }\n     sort(savedFields, count);\n     long millis \u003d iMillis;\n     for (int i \u003d 0; i \u003c count; i++) {\n-        millis \u003d savedFields[i].set(millis);\n+        millis \u003d savedFields[i].set(millis, resetFields);\n     }\n     if (iZone \u003d\u003d null) {\n         millis -\u003d iOffset;\n     } else {\n         int offset \u003d iZone.getOffsetFromLocal(millis);\n         millis -\u003d offset;\n         if (offset !\u003d iZone.getOffset(millis)) {\n             throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition\");\n         }\n     }\n     return millis;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Computes the parsed datetime by setting the saved fields. This method is\nidempotent, but it is not thread-safe.\n\n@return milliseconds since 1970-01-01T00:00:00Z\n@throws IllegalArgumentException if any field is out of range\n",
            "newValue": "Computes the parsed datetime by setting the saved fields. This method is\nidempotent, but it is not thread-safe.\n\n@param resetFields false by default, but when true, unsaved field values are cleared\n@return milliseconds since 1970-01-01T00:00:00Z\n@throws IllegalArgumentException if any field is out of range\n"
          }
        }
      ]
    },
    "ee1c58b83ee157b446d8a8218ea6c5e864094d1d": {
      "type": "Ybodychange",
      "commitMessage": "Renamed undoChanges to restoreState; added safety code to computeMillis.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@122 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "1/10/04, 4:03 PM",
      "commitName": "ee1c58b83ee157b446d8a8218ea6c5e864094d1d",
      "commitAuthor": "Brian S O\u0027Neill",
      "commitDateOld": "1/6/04, 10:10 AM",
      "commitNameOld": "3a68a02d6b0359e623858ab9391f84afdb17052a",
      "commitAuthorOld": "Brian S O\u0027Neill",
      "daysBetweenCommits": 4.24,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "public long computeMillis() {\n    SavedField[] savedFields \u003d iSavedFields;\n    int count \u003d iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields \u003d savedFields \u003d (SavedField[]) iSavedFields.clone();\n        iSavedFieldsShared \u003d false;\n    }\n    sort(savedFields, count);\n    long millis \u003d iMillis;\n    for (int i \u003d 0; i \u003c count; i++) {\n        millis \u003d savedFields[i].set(millis);\n    }\n    if (iZone \u003d\u003d null) {\n        millis -\u003d iOffset;\n    } else {\n        int offset \u003d iZone.getOffsetFromLocal(millis);\n        millis -\u003d offset;\n        if (offset !\u003d iZone.getOffset(millis)) {\n            throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition\");\n        }\n    }\n    return millis;\n}",
      "path": "JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java",
      "functionStartLine": 211,
      "functionName": "computeMillis",
      "functionAnnotation": "",
      "functionDoc": "Computes the parsed datetime by setting the saved fields. This method is\nidempotent, but it is not thread-safe.\n\n@return milliseconds since 1970-01-01T00:00:00Z\n@throws IllegalArgumentException if any field is out of range\n",
      "diff": "@@ -1,19 +1,23 @@\n public long computeMillis() {\n     SavedField[] savedFields \u003d iSavedFields;\n     int count \u003d iSavedFieldsCount;\n+    if (iSavedFieldsShared) {\n+        iSavedFields \u003d savedFields \u003d (SavedField[]) iSavedFields.clone();\n+        iSavedFieldsShared \u003d false;\n+    }\n     sort(savedFields, count);\n     long millis \u003d iMillis;\n     for (int i \u003d 0; i \u003c count; i++) {\n         millis \u003d savedFields[i].set(millis);\n     }\n     if (iZone \u003d\u003d null) {\n         millis -\u003d iOffset;\n     } else {\n         int offset \u003d iZone.getOffsetFromLocal(millis);\n         millis -\u003d offset;\n         if (offset !\u003d iZone.getOffset(millis)) {\n             throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition\");\n         }\n     }\n     return millis;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4d08164b8dcd0fd8cd02e6c6a64cfedf56636aee": {
      "type": "Ybodychange",
      "commitMessage": "More performance improvements due to less object allocation.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@106 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "1/4/04, 10:51 PM",
      "commitName": "4d08164b8dcd0fd8cd02e6c6a64cfedf56636aee",
      "commitAuthor": "Brian S O\u0027Neill",
      "commitDateOld": "1/4/04, 7:36 PM",
      "commitNameOld": "fa85e52f102ba75426ebf3bb49533009235ee3e0",
      "commitAuthorOld": "Brian S O\u0027Neill",
      "daysBetweenCommits": 0.14,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public long computeMillis() {\n    SavedField[] savedFields \u003d iSavedFields;\n    int count \u003d iSavedFieldsCount;\n    sort(savedFields, count);\n    long millis \u003d iMillis;\n    for (int i \u003d 0; i \u003c count; i++) {\n        millis \u003d savedFields[i].set(millis);\n    }\n    if (iZone \u003d\u003d null) {\n        millis -\u003d iOffset;\n    } else {\n        int offset \u003d iZone.getOffsetFromLocal(millis);\n        millis -\u003d offset;\n        if (offset !\u003d iZone.getOffset(millis)) {\n            throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition\");\n        }\n    }\n    return millis;\n}",
      "path": "JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java",
      "functionStartLine": 203,
      "functionName": "computeMillis",
      "functionAnnotation": "",
      "functionDoc": "Computes the parsed datetime by setting the saved fields. This method is\nidempotent, but it is not thread-safe.\n\n@return milliseconds since 1970-01-01T00:00:00Z\n@throws IllegalArgumentException if any field is out of range\n",
      "diff": "@@ -1,19 +1,19 @@\n public long computeMillis() {\n     SavedField[] savedFields \u003d iSavedFields;\n     int count \u003d iSavedFieldsCount;\n-    Arrays.sort(savedFields, 0, count);\n+    sort(savedFields, count);\n     long millis \u003d iMillis;\n     for (int i \u003d 0; i \u003c count; i++) {\n         millis \u003d savedFields[i].set(millis);\n     }\n     if (iZone \u003d\u003d null) {\n         millis -\u003d iOffset;\n     } else {\n         int offset \u003d iZone.getOffsetFromLocal(millis);\n         millis -\u003d offset;\n         if (offset !\u003d iZone.getOffset(millis)) {\n             throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition\");\n         }\n     }\n     return millis;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "fa85e52f102ba75426ebf3bb49533009235ee3e0": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Reduced temporary object allocations during parse.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@105 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "1/4/04, 7:36 PM",
      "commitName": "fa85e52f102ba75426ebf3bb49533009235ee3e0",
      "commitAuthor": "Brian S O\u0027Neill",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Reduced temporary object allocations during parse.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@105 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "1/4/04, 7:36 PM",
          "commitName": "fa85e52f102ba75426ebf3bb49533009235ee3e0",
          "commitAuthor": "Brian S O\u0027Neill",
          "commitDateOld": "1/3/04, 4:24 AM",
          "commitNameOld": "35aca9c2020c7c426b67fbe19e57ddcb9f1b389d",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 1.63,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "actualSource": "public long computeMillis() {\n    SavedField[] savedFields \u003d iSavedFields;\n    int count \u003d iSavedFieldsCount;\n    Arrays.sort(savedFields, 0, count);\n    long millis \u003d iMillis;\n    for (int i \u003d 0; i \u003c count; i++) {\n        millis \u003d savedFields[i].set(millis);\n    }\n    if (iZone \u003d\u003d null) {\n        millis -\u003d iOffset;\n    } else {\n        int offset \u003d iZone.getOffsetFromLocal(millis);\n        millis -\u003d offset;\n        if (offset !\u003d iZone.getOffset(millis)) {\n            throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition\");\n        }\n    }\n    return millis;\n}",
          "path": "JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java",
          "functionStartLine": 204,
          "functionName": "computeMillis",
          "functionAnnotation": "",
          "functionDoc": "Computes the parsed datetime by setting the saved fields. This method is\nidempotent, but it is not thread-safe.\n\n@return milliseconds since 1970-01-01T00:00:00Z\n@throws IllegalArgumentException if any field is out of range\n",
          "diff": "@@ -1,20 +1,19 @@\n public long computeMillis() {\n-    int length \u003d iSavedFields.size();\n-    SavedField[] savedFields \u003d new SavedField[length];\n-    iSavedFields.toArray(savedFields);\n-    Arrays.sort(savedFields);\n+    SavedField[] savedFields \u003d iSavedFields;\n+    int count \u003d iSavedFieldsCount;\n+    Arrays.sort(savedFields, 0, count);\n     long millis \u003d iMillis;\n-    for (int i \u003d 0; i \u003c length; i++) {\n+    for (int i \u003d 0; i \u003c count; i++) {\n         millis \u003d savedFields[i].set(millis);\n     }\n     if (iZone \u003d\u003d null) {\n         millis -\u003d iOffset;\n     } else {\n         int offset \u003d iZone.getOffsetFromLocal(millis);\n         millis -\u003d offset;\n         if (offset !\u003d iZone.getOffset(millis)) {\n             throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition\");\n         }\n     }\n     return millis;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Reduced temporary object allocations during parse.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@105 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "1/4/04, 7:36 PM",
          "commitName": "fa85e52f102ba75426ebf3bb49533009235ee3e0",
          "commitAuthor": "Brian S O\u0027Neill",
          "commitDateOld": "1/3/04, 4:24 AM",
          "commitNameOld": "35aca9c2020c7c426b67fbe19e57ddcb9f1b389d",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 1.63,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "actualSource": "public long computeMillis() {\n    SavedField[] savedFields \u003d iSavedFields;\n    int count \u003d iSavedFieldsCount;\n    Arrays.sort(savedFields, 0, count);\n    long millis \u003d iMillis;\n    for (int i \u003d 0; i \u003c count; i++) {\n        millis \u003d savedFields[i].set(millis);\n    }\n    if (iZone \u003d\u003d null) {\n        millis -\u003d iOffset;\n    } else {\n        int offset \u003d iZone.getOffsetFromLocal(millis);\n        millis -\u003d offset;\n        if (offset !\u003d iZone.getOffset(millis)) {\n            throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition\");\n        }\n    }\n    return millis;\n}",
          "path": "JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java",
          "functionStartLine": 204,
          "functionName": "computeMillis",
          "functionAnnotation": "",
          "functionDoc": "Computes the parsed datetime by setting the saved fields. This method is\nidempotent, but it is not thread-safe.\n\n@return milliseconds since 1970-01-01T00:00:00Z\n@throws IllegalArgumentException if any field is out of range\n",
          "diff": "@@ -1,20 +1,19 @@\n public long computeMillis() {\n-    int length \u003d iSavedFields.size();\n-    SavedField[] savedFields \u003d new SavedField[length];\n-    iSavedFields.toArray(savedFields);\n-    Arrays.sort(savedFields);\n+    SavedField[] savedFields \u003d iSavedFields;\n+    int count \u003d iSavedFieldsCount;\n+    Arrays.sort(savedFields, 0, count);\n     long millis \u003d iMillis;\n-    for (int i \u003d 0; i \u003c length; i++) {\n+    for (int i \u003d 0; i \u003c count; i++) {\n         millis \u003d savedFields[i].set(millis);\n     }\n     if (iZone \u003d\u003d null) {\n         millis -\u003d iOffset;\n     } else {\n         int offset \u003d iZone.getOffsetFromLocal(millis);\n         millis -\u003d offset;\n         if (offset !\u003d iZone.getOffset(millis)) {\n             throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition\");\n         }\n     }\n     return millis;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Computes the parsed datetime by setting the saved fields.\nCalling this method does not affect the state of this object.\n\n@return milliseconds since 1970-01-01T00:00:00Z\n@throws IllegalArgumentException if any field is out of range\n",
            "newValue": "Computes the parsed datetime by setting the saved fields. This method is\nidempotent, but it is not thread-safe.\n\n@return milliseconds since 1970-01-01T00:00:00Z\n@throws IllegalArgumentException if any field is out of range\n"
          }
        }
      ]
    },
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb": {
      "type": "Yintroduced",
      "commitMessage": "Move version 0.9 to joda-time repository\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@4 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "12/16/03, 1:39 PM",
      "commitName": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
      "commitAuthor": "Stephen Colebourne",
      "diff": "@@ -0,0 +1,20 @@\n+public long computeMillis() {\n+    int length \u003d iSavedFields.size();\n+    SavedField[] savedFields \u003d new SavedField[length];\n+    iSavedFields.toArray(savedFields);\n+    Arrays.sort(savedFields);\n+    long millis \u003d iMillis;\n+    for (int i \u003d 0; i \u003c length; i++) {\n+        millis \u003d savedFields[i].set(millis);\n+    }\n+    if (iZone \u003d\u003d null) {\n+        millis -\u003d iOffset;\n+    } else {\n+        int offset \u003d iZone.getOffsetFromLocal(millis);\n+        millis -\u003d offset;\n+        if (offset !\u003d iZone.getOffset(millis)) {\n+            throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition\");\n+        }\n+    }\n+    return millis;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public long computeMillis() {\n    int length \u003d iSavedFields.size();\n    SavedField[] savedFields \u003d new SavedField[length];\n    iSavedFields.toArray(savedFields);\n    Arrays.sort(savedFields);\n    long millis \u003d iMillis;\n    for (int i \u003d 0; i \u003c length; i++) {\n        millis \u003d savedFields[i].set(millis);\n    }\n    if (iZone \u003d\u003d null) {\n        millis -\u003d iOffset;\n    } else {\n        int offset \u003d iZone.getOffsetFromLocal(millis);\n        millis -\u003d offset;\n        if (offset !\u003d iZone.getOffset(millis)) {\n            throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition\");\n        }\n    }\n    return millis;\n}",
      "path": "JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java",
      "functionStartLine": 174,
      "functionName": "computeMillis",
      "functionAnnotation": "",
      "functionDoc": "Computes the parsed datetime by setting the saved fields.\nCalling this method does not affect the state of this object.\n\n@return milliseconds since 1970-01-01T00:00:00Z\n@throws IllegalArgumentException if any field is out of range\n"
    }
  }
}