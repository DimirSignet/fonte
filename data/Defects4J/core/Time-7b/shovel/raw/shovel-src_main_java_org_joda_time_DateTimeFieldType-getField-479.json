{
  "origin": "codeshovel",
  "repositoryName": "Time-7b",
  "repositoryPath": "/tmp/Time-7b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DateTimeFieldType.java",
  "functionName": "getField",
  "functionId": "$getField___chronology-Chronology",
  "sourceFilePath": "src/main/java/org/joda/time/DateTimeFieldType.java",
  "functionAnnotation": "",
  "functionDoc": "\n@inheritdoc\n",
  "functionStartLine": 479,
  "functionEndLine": 533,
  "numCommitsSeen": 22,
  "timeTaken": 1854,
  "changeHistory": [
    "df4a82f4fb46cc2248280c462e18f08d55a3d112",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1",
    "6892714b99ed388c1f9f8f55f114fcb602186fa6",
    "b9e9ad74618b8922a061c3dcea2569891404eacd",
    "c5a0687412741edbf6e78fb779a24153b8a5d189",
    "1a5b0ef6e985dd63e51eba610222650a4b2a41f4",
    "de0a35397489a3d8ae2664b6b6d48604f9a6900f"
  ],
  "changeHistoryShort": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": "Yfilerename",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": "Yfilerename",
    "6892714b99ed388c1f9f8f55f114fcb602186fa6": "Ymultichange(Ydocchange,Yformatchange)",
    "b9e9ad74618b8922a061c3dcea2569891404eacd": "Ybodychange",
    "c5a0687412741edbf6e78fb779a24153b8a5d189": "Ybodychange",
    "1a5b0ef6e985dd63e51eba610222650a4b2a41f4": "Ymultichange(Ymovefromfile,Ybodychange,Ydocchange,Yparameterchange)",
    "de0a35397489a3d8ae2664b6b6d48604f9a6900f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": {
      "type": "Yfilerename",
      "commitMessage": "Remove JodaTime folder moving files to top level\n",
      "commitDate": "5/16/11, 10:02 AM",
      "commitName": "df4a82f4fb46cc2248280c462e18f08d55a3d112",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "5/16/11, 9:58 AM",
      "commitNameOld": "72b22654962284bac59c2777131b42a2d1f53228",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public DateTimeField getField(Chronology chronology) {\n    chronology \u003d DateTimeUtils.getChronology(chronology);\n    switch(iOrdinal) {\n        case ERA:\n            return chronology.era();\n        case YEAR_OF_ERA:\n            return chronology.yearOfEra();\n        case CENTURY_OF_ERA:\n            return chronology.centuryOfEra();\n        case YEAR_OF_CENTURY:\n            return chronology.yearOfCentury();\n        case YEAR:\n            return chronology.year();\n        case DAY_OF_YEAR:\n            return chronology.dayOfYear();\n        case MONTH_OF_YEAR:\n            return chronology.monthOfYear();\n        case DAY_OF_MONTH:\n            return chronology.dayOfMonth();\n        case WEEKYEAR_OF_CENTURY:\n            return chronology.weekyearOfCentury();\n        case WEEKYEAR:\n            return chronology.weekyear();\n        case WEEK_OF_WEEKYEAR:\n            return chronology.weekOfWeekyear();\n        case DAY_OF_WEEK:\n            return chronology.dayOfWeek();\n        case HALFDAY_OF_DAY:\n            return chronology.halfdayOfDay();\n        case HOUR_OF_HALFDAY:\n            return chronology.hourOfHalfday();\n        case CLOCKHOUR_OF_HALFDAY:\n            return chronology.clockhourOfHalfday();\n        case CLOCKHOUR_OF_DAY:\n            return chronology.clockhourOfDay();\n        case HOUR_OF_DAY:\n            return chronology.hourOfDay();\n        case MINUTE_OF_DAY:\n            return chronology.minuteOfDay();\n        case MINUTE_OF_HOUR:\n            return chronology.minuteOfHour();\n        case SECOND_OF_DAY:\n            return chronology.secondOfDay();\n        case SECOND_OF_MINUTE:\n            return chronology.secondOfMinute();\n        case MILLIS_OF_DAY:\n            return chronology.millisOfDay();\n        case MILLIS_OF_SECOND:\n            return chronology.millisOfSecond();\n        default:\n            throw new InternalError();\n    }\n}",
      "path": "src/main/java/org/joda/time/DateTimeFieldType.java",
      "functionStartLine": 479,
      "functionName": "getField",
      "functionAnnotation": "",
      "functionDoc": "\n@inheritdoc\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java",
        "newPath": "src/main/java/org/joda/time/DateTimeFieldType.java"
      }
    },
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": {
      "type": "Yfilerename",
      "commitMessage": "Convert to maven 2\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1540 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/8/10, 5:17 PM",
      "commitName": "53feb3fa56af7260e607844524b7e5a9be49ecc1",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/8/10, 5:02 PM",
      "commitNameOld": "7fa2ceaf5d95d050095432aa646ea803aa35e122",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public DateTimeField getField(Chronology chronology) {\n    chronology \u003d DateTimeUtils.getChronology(chronology);\n    switch(iOrdinal) {\n        case ERA:\n            return chronology.era();\n        case YEAR_OF_ERA:\n            return chronology.yearOfEra();\n        case CENTURY_OF_ERA:\n            return chronology.centuryOfEra();\n        case YEAR_OF_CENTURY:\n            return chronology.yearOfCentury();\n        case YEAR:\n            return chronology.year();\n        case DAY_OF_YEAR:\n            return chronology.dayOfYear();\n        case MONTH_OF_YEAR:\n            return chronology.monthOfYear();\n        case DAY_OF_MONTH:\n            return chronology.dayOfMonth();\n        case WEEKYEAR_OF_CENTURY:\n            return chronology.weekyearOfCentury();\n        case WEEKYEAR:\n            return chronology.weekyear();\n        case WEEK_OF_WEEKYEAR:\n            return chronology.weekOfWeekyear();\n        case DAY_OF_WEEK:\n            return chronology.dayOfWeek();\n        case HALFDAY_OF_DAY:\n            return chronology.halfdayOfDay();\n        case HOUR_OF_HALFDAY:\n            return chronology.hourOfHalfday();\n        case CLOCKHOUR_OF_HALFDAY:\n            return chronology.clockhourOfHalfday();\n        case CLOCKHOUR_OF_DAY:\n            return chronology.clockhourOfDay();\n        case HOUR_OF_DAY:\n            return chronology.hourOfDay();\n        case MINUTE_OF_DAY:\n            return chronology.minuteOfDay();\n        case MINUTE_OF_HOUR:\n            return chronology.minuteOfHour();\n        case SECOND_OF_DAY:\n            return chronology.secondOfDay();\n        case SECOND_OF_MINUTE:\n            return chronology.secondOfMinute();\n        case MILLIS_OF_DAY:\n            return chronology.millisOfDay();\n        case MILLIS_OF_SECOND:\n            return chronology.millisOfSecond();\n        default:\n            throw new InternalError();\n    }\n}",
      "path": "JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java",
      "functionStartLine": 460,
      "functionName": "getField",
      "functionAnnotation": "",
      "functionDoc": "\n@inheritdoc\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/java/org/joda/time/DateTimeFieldType.java",
        "newPath": "JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java"
      }
    },
    "6892714b99ed388c1f9f8f55f114fcb602186fa6": {
      "type": "Ymultichange(Ydocchange,Yformatchange)",
      "commitMessage": "Checkstyle fixes\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@561 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "11/5/04, 4:16 PM",
      "commitName": "6892714b99ed388c1f9f8f55f114fcb602186fa6",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Ydocchange",
          "commitMessage": "Checkstyle fixes\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@561 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "11/5/04, 4:16 PM",
          "commitName": "6892714b99ed388c1f9f8f55f114fcb602186fa6",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "9/14/04, 3:59 PM",
          "commitNameOld": "b9e9ad74618b8922a061c3dcea2569891404eacd",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 52.05,
          "commitsBetweenForRepo": 50,
          "commitsBetweenForFile": 1,
          "actualSource": "public DateTimeField getField(Chronology chronology) {\n    chronology \u003d DateTimeUtils.getChronology(chronology);\n    switch(iOrdinal) {\n        case ERA:\n            return chronology.era();\n        case YEAR_OF_ERA:\n            return chronology.yearOfEra();\n        case CENTURY_OF_ERA:\n            return chronology.centuryOfEra();\n        case YEAR_OF_CENTURY:\n            return chronology.yearOfCentury();\n        case YEAR:\n            return chronology.year();\n        case DAY_OF_YEAR:\n            return chronology.dayOfYear();\n        case MONTH_OF_YEAR:\n            return chronology.monthOfYear();\n        case DAY_OF_MONTH:\n            return chronology.dayOfMonth();\n        case WEEKYEAR_OF_CENTURY:\n            return chronology.weekyearOfCentury();\n        case WEEKYEAR:\n            return chronology.weekyear();\n        case WEEK_OF_WEEKYEAR:\n            return chronology.weekOfWeekyear();\n        case DAY_OF_WEEK:\n            return chronology.dayOfWeek();\n        case HALFDAY_OF_DAY:\n            return chronology.halfdayOfDay();\n        case HOUR_OF_HALFDAY:\n            return chronology.hourOfHalfday();\n        case CLOCKHOUR_OF_HALFDAY:\n            return chronology.clockhourOfHalfday();\n        case CLOCKHOUR_OF_DAY:\n            return chronology.clockhourOfDay();\n        case HOUR_OF_DAY:\n            return chronology.hourOfDay();\n        case MINUTE_OF_DAY:\n            return chronology.minuteOfDay();\n        case MINUTE_OF_HOUR:\n            return chronology.minuteOfHour();\n        case SECOND_OF_DAY:\n            return chronology.secondOfDay();\n        case SECOND_OF_MINUTE:\n            return chronology.secondOfMinute();\n        case MILLIS_OF_DAY:\n            return chronology.millisOfDay();\n        case MILLIS_OF_SECOND:\n            return chronology.millisOfSecond();\n        default:\n            throw new InternalError();\n    }\n}",
          "path": "JodaTime/src/java/org/joda/time/DateTimeFieldType.java",
          "functionStartLine": 498,
          "functionName": "getField",
          "functionAnnotation": "",
          "functionDoc": "\n@inheritdoc\n",
          "diff": "",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "\n@inheritdoc\n"
          }
        },
        {
          "type": "Yformatchange",
          "commitMessage": "Checkstyle fixes\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@561 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "11/5/04, 4:16 PM",
          "commitName": "6892714b99ed388c1f9f8f55f114fcb602186fa6",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "9/14/04, 3:59 PM",
          "commitNameOld": "b9e9ad74618b8922a061c3dcea2569891404eacd",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 52.05,
          "commitsBetweenForRepo": 50,
          "commitsBetweenForFile": 1,
          "actualSource": "public DateTimeField getField(Chronology chronology) {\n    chronology \u003d DateTimeUtils.getChronology(chronology);\n    switch(iOrdinal) {\n        case ERA:\n            return chronology.era();\n        case YEAR_OF_ERA:\n            return chronology.yearOfEra();\n        case CENTURY_OF_ERA:\n            return chronology.centuryOfEra();\n        case YEAR_OF_CENTURY:\n            return chronology.yearOfCentury();\n        case YEAR:\n            return chronology.year();\n        case DAY_OF_YEAR:\n            return chronology.dayOfYear();\n        case MONTH_OF_YEAR:\n            return chronology.monthOfYear();\n        case DAY_OF_MONTH:\n            return chronology.dayOfMonth();\n        case WEEKYEAR_OF_CENTURY:\n            return chronology.weekyearOfCentury();\n        case WEEKYEAR:\n            return chronology.weekyear();\n        case WEEK_OF_WEEKYEAR:\n            return chronology.weekOfWeekyear();\n        case DAY_OF_WEEK:\n            return chronology.dayOfWeek();\n        case HALFDAY_OF_DAY:\n            return chronology.halfdayOfDay();\n        case HOUR_OF_HALFDAY:\n            return chronology.hourOfHalfday();\n        case CLOCKHOUR_OF_HALFDAY:\n            return chronology.clockhourOfHalfday();\n        case CLOCKHOUR_OF_DAY:\n            return chronology.clockhourOfDay();\n        case HOUR_OF_DAY:\n            return chronology.hourOfDay();\n        case MINUTE_OF_DAY:\n            return chronology.minuteOfDay();\n        case MINUTE_OF_HOUR:\n            return chronology.minuteOfHour();\n        case SECOND_OF_DAY:\n            return chronology.secondOfDay();\n        case SECOND_OF_MINUTE:\n            return chronology.secondOfMinute();\n        case MILLIS_OF_DAY:\n            return chronology.millisOfDay();\n        case MILLIS_OF_SECOND:\n            return chronology.millisOfSecond();\n        default:\n            throw new InternalError();\n    }\n}",
          "path": "JodaTime/src/java/org/joda/time/DateTimeFieldType.java",
          "functionStartLine": 498,
          "functionName": "getField",
          "functionAnnotation": "",
          "functionDoc": "\n@inheritdoc\n",
          "diff": "",
          "extendedDetails": {}
        }
      ]
    },
    "b9e9ad74618b8922a061c3dcea2569891404eacd": {
      "type": "Ybodychange",
      "commitMessage": "Increase test coverage\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@510 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "9/14/04, 3:59 PM",
      "commitName": "b9e9ad74618b8922a061c3dcea2569891404eacd",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "9/5/04, 5:25 AM",
      "commitNameOld": "c4712e0e30d931ebe6cd47c299bce339c39e10a2",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 9.44,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "actualSource": "public DateTimeField getField(Chronology chronology) {\n    chronology \u003d DateTimeUtils.getChronology(chronology);\n    switch(iOrdinal) {\n        case ERA:\n            return chronology.era();\n        case YEAR_OF_ERA:\n            return chronology.yearOfEra();\n        case CENTURY_OF_ERA:\n            return chronology.centuryOfEra();\n        case YEAR_OF_CENTURY:\n            return chronology.yearOfCentury();\n        case YEAR:\n            return chronology.year();\n        case DAY_OF_YEAR:\n            return chronology.dayOfYear();\n        case MONTH_OF_YEAR:\n            return chronology.monthOfYear();\n        case DAY_OF_MONTH:\n            return chronology.dayOfMonth();\n        case WEEKYEAR_OF_CENTURY:\n            return chronology.weekyearOfCentury();\n        case WEEKYEAR:\n            return chronology.weekyear();\n        case WEEK_OF_WEEKYEAR:\n            return chronology.weekOfWeekyear();\n        case DAY_OF_WEEK:\n            return chronology.dayOfWeek();\n        case HALFDAY_OF_DAY:\n            return chronology.halfdayOfDay();\n        case HOUR_OF_HALFDAY:\n            return chronology.hourOfHalfday();\n        case CLOCKHOUR_OF_HALFDAY:\n            return chronology.clockhourOfHalfday();\n        case CLOCKHOUR_OF_DAY:\n            return chronology.clockhourOfDay();\n        case HOUR_OF_DAY:\n            return chronology.hourOfDay();\n        case MINUTE_OF_DAY:\n            return chronology.minuteOfDay();\n        case MINUTE_OF_HOUR:\n            return chronology.minuteOfHour();\n        case SECOND_OF_DAY:\n            return chronology.secondOfDay();\n        case SECOND_OF_MINUTE:\n            return chronology.secondOfMinute();\n        case MILLIS_OF_DAY:\n            return chronology.millisOfDay();\n        case MILLIS_OF_SECOND:\n            return chronology.millisOfSecond();\n        default:\n            throw new InternalError();\n    }\n}",
      "path": "JodaTime/src/java/org/joda/time/DateTimeFieldType.java",
      "functionStartLine": 492,
      "functionName": "getField",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,53 +1,53 @@\n public DateTimeField getField(Chronology chronology) {\n     chronology \u003d DateTimeUtils.getChronology(chronology);\n     switch(iOrdinal) {\n         case ERA:\n             return chronology.era();\n         case YEAR_OF_ERA:\n             return chronology.yearOfEra();\n         case CENTURY_OF_ERA:\n             return chronology.centuryOfEra();\n         case YEAR_OF_CENTURY:\n             return chronology.yearOfCentury();\n         case YEAR:\n             return chronology.year();\n         case DAY_OF_YEAR:\n             return chronology.dayOfYear();\n         case MONTH_OF_YEAR:\n             return chronology.monthOfYear();\n         case DAY_OF_MONTH:\n             return chronology.dayOfMonth();\n         case WEEKYEAR_OF_CENTURY:\n             return chronology.weekyearOfCentury();\n         case WEEKYEAR:\n             return chronology.weekyear();\n         case WEEK_OF_WEEKYEAR:\n             return chronology.weekOfWeekyear();\n         case DAY_OF_WEEK:\n             return chronology.dayOfWeek();\n         case HALFDAY_OF_DAY:\n             return chronology.halfdayOfDay();\n         case HOUR_OF_HALFDAY:\n             return chronology.hourOfHalfday();\n         case CLOCKHOUR_OF_HALFDAY:\n             return chronology.clockhourOfHalfday();\n         case CLOCKHOUR_OF_DAY:\n             return chronology.clockhourOfDay();\n         case HOUR_OF_DAY:\n             return chronology.hourOfDay();\n         case MINUTE_OF_DAY:\n             return chronology.minuteOfDay();\n         case MINUTE_OF_HOUR:\n             return chronology.minuteOfHour();\n         case SECOND_OF_DAY:\n             return chronology.secondOfDay();\n         case SECOND_OF_MINUTE:\n             return chronology.secondOfMinute();\n         case MILLIS_OF_DAY:\n             return chronology.millisOfDay();\n         case MILLIS_OF_SECOND:\n             return chronology.millisOfSecond();\n         default:\n-            throw new IllegalStateException();\n+            throw new InternalError();\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c5a0687412741edbf6e78fb779a24153b8a5d189": {
      "type": "Ybodychange",
      "commitMessage": "Add halfdays and weekyearOfCentury fields\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@471 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "9/3/04, 1:48 PM",
      "commitName": "c5a0687412741edbf6e78fb779a24153b8a5d189",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "9/2/04, 11:52 PM",
      "commitNameOld": "1a5b0ef6e985dd63e51eba610222650a4b2a41f4",
      "commitAuthorOld": "Brian S O\u0027Neill",
      "daysBetweenCommits": 0.58,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public DateTimeField getField(Chronology chronology) {\n    chronology \u003d DateTimeUtils.getChronology(chronology);\n    switch(iOrdinal) {\n        case ERA:\n            return chronology.era();\n        case YEAR_OF_ERA:\n            return chronology.yearOfEra();\n        case CENTURY_OF_ERA:\n            return chronology.centuryOfEra();\n        case YEAR_OF_CENTURY:\n            return chronology.yearOfCentury();\n        case YEAR:\n            return chronology.year();\n        case DAY_OF_YEAR:\n            return chronology.dayOfYear();\n        case MONTH_OF_YEAR:\n            return chronology.monthOfYear();\n        case DAY_OF_MONTH:\n            return chronology.dayOfMonth();\n        case WEEKYEAR_OF_CENTURY:\n            return chronology.weekyearOfCentury();\n        case WEEKYEAR:\n            return chronology.weekyear();\n        case WEEK_OF_WEEKYEAR:\n            return chronology.weekOfWeekyear();\n        case DAY_OF_WEEK:\n            return chronology.dayOfWeek();\n        case HALFDAY_OF_DAY:\n            return chronology.halfdayOfDay();\n        case HOUR_OF_HALFDAY:\n            return chronology.hourOfHalfday();\n        case CLOCKHOUR_OF_HALFDAY:\n            return chronology.clockhourOfHalfday();\n        case CLOCKHOUR_OF_DAY:\n            return chronology.clockhourOfDay();\n        case HOUR_OF_DAY:\n            return chronology.hourOfDay();\n        case MINUTE_OF_DAY:\n            return chronology.minuteOfDay();\n        case MINUTE_OF_HOUR:\n            return chronology.minuteOfHour();\n        case SECOND_OF_DAY:\n            return chronology.secondOfDay();\n        case SECOND_OF_MINUTE:\n            return chronology.secondOfMinute();\n        case MILLIS_OF_DAY:\n            return chronology.millisOfDay();\n        case MILLIS_OF_SECOND:\n            return chronology.millisOfSecond();\n        default:\n            throw new IllegalStateException();\n    }\n}",
      "path": "JodaTime/src/java/org/joda/time/DateTimeFieldType.java",
      "functionStartLine": 470,
      "functionName": "getField",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,51 +1,53 @@\n public DateTimeField getField(Chronology chronology) {\n     chronology \u003d DateTimeUtils.getChronology(chronology);\n     switch(iOrdinal) {\n         case ERA:\n             return chronology.era();\n         case YEAR_OF_ERA:\n             return chronology.yearOfEra();\n         case CENTURY_OF_ERA:\n             return chronology.centuryOfEra();\n         case YEAR_OF_CENTURY:\n             return chronology.yearOfCentury();\n         case YEAR:\n             return chronology.year();\n         case DAY_OF_YEAR:\n             return chronology.dayOfYear();\n         case MONTH_OF_YEAR:\n             return chronology.monthOfYear();\n         case DAY_OF_MONTH:\n             return chronology.dayOfMonth();\n+        case WEEKYEAR_OF_CENTURY:\n+            return chronology.weekyearOfCentury();\n         case WEEKYEAR:\n             return chronology.weekyear();\n         case WEEK_OF_WEEKYEAR:\n             return chronology.weekOfWeekyear();\n         case DAY_OF_WEEK:\n             return chronology.dayOfWeek();\n         case HALFDAY_OF_DAY:\n             return chronology.halfdayOfDay();\n         case HOUR_OF_HALFDAY:\n             return chronology.hourOfHalfday();\n         case CLOCKHOUR_OF_HALFDAY:\n             return chronology.clockhourOfHalfday();\n         case CLOCKHOUR_OF_DAY:\n             return chronology.clockhourOfDay();\n         case HOUR_OF_DAY:\n             return chronology.hourOfDay();\n         case MINUTE_OF_DAY:\n             return chronology.minuteOfDay();\n         case MINUTE_OF_HOUR:\n             return chronology.minuteOfHour();\n         case SECOND_OF_DAY:\n             return chronology.secondOfDay();\n         case SECOND_OF_MINUTE:\n             return chronology.secondOfMinute();\n         case MILLIS_OF_DAY:\n             return chronology.millisOfDay();\n         case MILLIS_OF_SECOND:\n             return chronology.millisOfSecond();\n         default:\n             throw new IllegalStateException();\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1a5b0ef6e985dd63e51eba610222650a4b2a41f4": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange,Ydocchange,Yparameterchange)",
      "commitMessage": "Moved field selector methods to field type classes\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@470 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "9/2/04, 11:52 PM",
      "commitName": "1a5b0ef6e985dd63e51eba610222650a4b2a41f4",
      "commitAuthor": "Brian S O\u0027Neill",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "Moved field selector methods to field type classes\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@470 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "9/2/04, 11:52 PM",
          "commitName": "1a5b0ef6e985dd63e51eba610222650a4b2a41f4",
          "commitAuthor": "Brian S O\u0027Neill",
          "commitDateOld": "9/2/04, 6:13 PM",
          "commitNameOld": "24481f10ccfe00f1e0e1566c63db861e33085862",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 0.24,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public DateTimeField getField(Chronology chronology) {\n    chronology \u003d DateTimeUtils.getChronology(chronology);\n    switch(iOrdinal) {\n        case ERA:\n            return chronology.era();\n        case YEAR_OF_ERA:\n            return chronology.yearOfEra();\n        case CENTURY_OF_ERA:\n            return chronology.centuryOfEra();\n        case YEAR_OF_CENTURY:\n            return chronology.yearOfCentury();\n        case YEAR:\n            return chronology.year();\n        case DAY_OF_YEAR:\n            return chronology.dayOfYear();\n        case MONTH_OF_YEAR:\n            return chronology.monthOfYear();\n        case DAY_OF_MONTH:\n            return chronology.dayOfMonth();\n        case WEEKYEAR:\n            return chronology.weekyear();\n        case WEEK_OF_WEEKYEAR:\n            return chronology.weekOfWeekyear();\n        case DAY_OF_WEEK:\n            return chronology.dayOfWeek();\n        case HALFDAY_OF_DAY:\n            return chronology.halfdayOfDay();\n        case HOUR_OF_HALFDAY:\n            return chronology.hourOfHalfday();\n        case CLOCKHOUR_OF_HALFDAY:\n            return chronology.clockhourOfHalfday();\n        case CLOCKHOUR_OF_DAY:\n            return chronology.clockhourOfDay();\n        case HOUR_OF_DAY:\n            return chronology.hourOfDay();\n        case MINUTE_OF_DAY:\n            return chronology.minuteOfDay();\n        case MINUTE_OF_HOUR:\n            return chronology.minuteOfHour();\n        case SECOND_OF_DAY:\n            return chronology.secondOfDay();\n        case SECOND_OF_MINUTE:\n            return chronology.secondOfMinute();\n        case MILLIS_OF_DAY:\n            return chronology.millisOfDay();\n        case MILLIS_OF_SECOND:\n            return chronology.millisOfSecond();\n        default:\n            throw new IllegalStateException();\n    }\n}",
          "path": "JodaTime/src/java/org/joda/time/DateTimeFieldType.java",
          "functionStartLine": 470,
          "functionName": "getField",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,49 +1,51 @@\n-public DateTimeField getField(DateTimeFieldType type) {\n-    if (type \u003d\u003d DateTimeFieldType.millisOfSecond()) {\n-        return millisOfSecond();\n-    } else if (type \u003d\u003d DateTimeFieldType.millisOfDay()) {\n-        return millisOfDay();\n-    } else if (type \u003d\u003d DateTimeFieldType.secondOfMinute()) {\n-        return secondOfMinute();\n-    } else if (type \u003d\u003d DateTimeFieldType.secondOfDay()) {\n-        return secondOfDay();\n-    } else if (type \u003d\u003d DateTimeFieldType.minuteOfHour()) {\n-        return minuteOfHour();\n-    } else if (type \u003d\u003d DateTimeFieldType.minuteOfDay()) {\n-        return minuteOfDay();\n-    } else if (type \u003d\u003d DateTimeFieldType.hourOfDay()) {\n-        return hourOfDay();\n-    } else if (type \u003d\u003d DateTimeFieldType.hourOfHalfday()) {\n-        return hourOfHalfday();\n-    } else if (type \u003d\u003d DateTimeFieldType.clockhourOfDay()) {\n-        return clockhourOfDay();\n-    } else if (type \u003d\u003d DateTimeFieldType.halfdayOfDay()) {\n-        return halfdayOfDay();\n-    } else if (type \u003d\u003d DateTimeFieldType.clockhourOfHalfday()) {\n-        return clockhourOfHalfday();\n-    } else if (type \u003d\u003d DateTimeFieldType.dayOfWeek()) {\n-        return dayOfWeek();\n-    } else if (type \u003d\u003d DateTimeFieldType.dayOfMonth()) {\n-        return dayOfMonth();\n-    } else if (type \u003d\u003d DateTimeFieldType.dayOfYear()) {\n-        return dayOfYear();\n-    } else if (type \u003d\u003d DateTimeFieldType.weekOfWeekyear()) {\n-        return weekOfWeekyear();\n-    } else if (type \u003d\u003d DateTimeFieldType.weekyear()) {\n-        return weekyear();\n-    } else if (type \u003d\u003d DateTimeFieldType.monthOfYear()) {\n-        return monthOfYear();\n-    } else if (type \u003d\u003d DateTimeFieldType.year()) {\n-        return year();\n-    } else if (type \u003d\u003d DateTimeFieldType.yearOfEra()) {\n-        return yearOfEra();\n-    } else if (type \u003d\u003d DateTimeFieldType.yearOfCentury()) {\n-        return yearOfCentury();\n-    } else if (type \u003d\u003d DateTimeFieldType.centuryOfEra()) {\n-        return centuryOfEra();\n-    } else if (type \u003d\u003d DateTimeFieldType.era()) {\n-        return era();\n-    } else {\n-        throw new IllegalArgumentException(\"Unrecognised field: \" + type);\n+public DateTimeField getField(Chronology chronology) {\n+    chronology \u003d DateTimeUtils.getChronology(chronology);\n+    switch(iOrdinal) {\n+        case ERA:\n+            return chronology.era();\n+        case YEAR_OF_ERA:\n+            return chronology.yearOfEra();\n+        case CENTURY_OF_ERA:\n+            return chronology.centuryOfEra();\n+        case YEAR_OF_CENTURY:\n+            return chronology.yearOfCentury();\n+        case YEAR:\n+            return chronology.year();\n+        case DAY_OF_YEAR:\n+            return chronology.dayOfYear();\n+        case MONTH_OF_YEAR:\n+            return chronology.monthOfYear();\n+        case DAY_OF_MONTH:\n+            return chronology.dayOfMonth();\n+        case WEEKYEAR:\n+            return chronology.weekyear();\n+        case WEEK_OF_WEEKYEAR:\n+            return chronology.weekOfWeekyear();\n+        case DAY_OF_WEEK:\n+            return chronology.dayOfWeek();\n+        case HALFDAY_OF_DAY:\n+            return chronology.halfdayOfDay();\n+        case HOUR_OF_HALFDAY:\n+            return chronology.hourOfHalfday();\n+        case CLOCKHOUR_OF_HALFDAY:\n+            return chronology.clockhourOfHalfday();\n+        case CLOCKHOUR_OF_DAY:\n+            return chronology.clockhourOfDay();\n+        case HOUR_OF_DAY:\n+            return chronology.hourOfDay();\n+        case MINUTE_OF_DAY:\n+            return chronology.minuteOfDay();\n+        case MINUTE_OF_HOUR:\n+            return chronology.minuteOfHour();\n+        case SECOND_OF_DAY:\n+            return chronology.secondOfDay();\n+        case SECOND_OF_MINUTE:\n+            return chronology.secondOfMinute();\n+        case MILLIS_OF_DAY:\n+            return chronology.millisOfDay();\n+        case MILLIS_OF_SECOND:\n+            return chronology.millisOfSecond();\n+        default:\n+            throw new IllegalStateException();\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "JodaTime/src/java/org/joda/time/chrono/BaseChronology.java",
            "newPath": "JodaTime/src/java/org/joda/time/DateTimeFieldType.java",
            "oldMethodName": "getField",
            "newMethodName": "getField"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Moved field selector methods to field type classes\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@470 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "9/2/04, 11:52 PM",
          "commitName": "1a5b0ef6e985dd63e51eba610222650a4b2a41f4",
          "commitAuthor": "Brian S O\u0027Neill",
          "commitDateOld": "9/2/04, 6:13 PM",
          "commitNameOld": "24481f10ccfe00f1e0e1566c63db861e33085862",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 0.24,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public DateTimeField getField(Chronology chronology) {\n    chronology \u003d DateTimeUtils.getChronology(chronology);\n    switch(iOrdinal) {\n        case ERA:\n            return chronology.era();\n        case YEAR_OF_ERA:\n            return chronology.yearOfEra();\n        case CENTURY_OF_ERA:\n            return chronology.centuryOfEra();\n        case YEAR_OF_CENTURY:\n            return chronology.yearOfCentury();\n        case YEAR:\n            return chronology.year();\n        case DAY_OF_YEAR:\n            return chronology.dayOfYear();\n        case MONTH_OF_YEAR:\n            return chronology.monthOfYear();\n        case DAY_OF_MONTH:\n            return chronology.dayOfMonth();\n        case WEEKYEAR:\n            return chronology.weekyear();\n        case WEEK_OF_WEEKYEAR:\n            return chronology.weekOfWeekyear();\n        case DAY_OF_WEEK:\n            return chronology.dayOfWeek();\n        case HALFDAY_OF_DAY:\n            return chronology.halfdayOfDay();\n        case HOUR_OF_HALFDAY:\n            return chronology.hourOfHalfday();\n        case CLOCKHOUR_OF_HALFDAY:\n            return chronology.clockhourOfHalfday();\n        case CLOCKHOUR_OF_DAY:\n            return chronology.clockhourOfDay();\n        case HOUR_OF_DAY:\n            return chronology.hourOfDay();\n        case MINUTE_OF_DAY:\n            return chronology.minuteOfDay();\n        case MINUTE_OF_HOUR:\n            return chronology.minuteOfHour();\n        case SECOND_OF_DAY:\n            return chronology.secondOfDay();\n        case SECOND_OF_MINUTE:\n            return chronology.secondOfMinute();\n        case MILLIS_OF_DAY:\n            return chronology.millisOfDay();\n        case MILLIS_OF_SECOND:\n            return chronology.millisOfSecond();\n        default:\n            throw new IllegalStateException();\n    }\n}",
          "path": "JodaTime/src/java/org/joda/time/DateTimeFieldType.java",
          "functionStartLine": 470,
          "functionName": "getField",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,49 +1,51 @@\n-public DateTimeField getField(DateTimeFieldType type) {\n-    if (type \u003d\u003d DateTimeFieldType.millisOfSecond()) {\n-        return millisOfSecond();\n-    } else if (type \u003d\u003d DateTimeFieldType.millisOfDay()) {\n-        return millisOfDay();\n-    } else if (type \u003d\u003d DateTimeFieldType.secondOfMinute()) {\n-        return secondOfMinute();\n-    } else if (type \u003d\u003d DateTimeFieldType.secondOfDay()) {\n-        return secondOfDay();\n-    } else if (type \u003d\u003d DateTimeFieldType.minuteOfHour()) {\n-        return minuteOfHour();\n-    } else if (type \u003d\u003d DateTimeFieldType.minuteOfDay()) {\n-        return minuteOfDay();\n-    } else if (type \u003d\u003d DateTimeFieldType.hourOfDay()) {\n-        return hourOfDay();\n-    } else if (type \u003d\u003d DateTimeFieldType.hourOfHalfday()) {\n-        return hourOfHalfday();\n-    } else if (type \u003d\u003d DateTimeFieldType.clockhourOfDay()) {\n-        return clockhourOfDay();\n-    } else if (type \u003d\u003d DateTimeFieldType.halfdayOfDay()) {\n-        return halfdayOfDay();\n-    } else if (type \u003d\u003d DateTimeFieldType.clockhourOfHalfday()) {\n-        return clockhourOfHalfday();\n-    } else if (type \u003d\u003d DateTimeFieldType.dayOfWeek()) {\n-        return dayOfWeek();\n-    } else if (type \u003d\u003d DateTimeFieldType.dayOfMonth()) {\n-        return dayOfMonth();\n-    } else if (type \u003d\u003d DateTimeFieldType.dayOfYear()) {\n-        return dayOfYear();\n-    } else if (type \u003d\u003d DateTimeFieldType.weekOfWeekyear()) {\n-        return weekOfWeekyear();\n-    } else if (type \u003d\u003d DateTimeFieldType.weekyear()) {\n-        return weekyear();\n-    } else if (type \u003d\u003d DateTimeFieldType.monthOfYear()) {\n-        return monthOfYear();\n-    } else if (type \u003d\u003d DateTimeFieldType.year()) {\n-        return year();\n-    } else if (type \u003d\u003d DateTimeFieldType.yearOfEra()) {\n-        return yearOfEra();\n-    } else if (type \u003d\u003d DateTimeFieldType.yearOfCentury()) {\n-        return yearOfCentury();\n-    } else if (type \u003d\u003d DateTimeFieldType.centuryOfEra()) {\n-        return centuryOfEra();\n-    } else if (type \u003d\u003d DateTimeFieldType.era()) {\n-        return era();\n-    } else {\n-        throw new IllegalArgumentException(\"Unrecognised field: \" + type);\n+public DateTimeField getField(Chronology chronology) {\n+    chronology \u003d DateTimeUtils.getChronology(chronology);\n+    switch(iOrdinal) {\n+        case ERA:\n+            return chronology.era();\n+        case YEAR_OF_ERA:\n+            return chronology.yearOfEra();\n+        case CENTURY_OF_ERA:\n+            return chronology.centuryOfEra();\n+        case YEAR_OF_CENTURY:\n+            return chronology.yearOfCentury();\n+        case YEAR:\n+            return chronology.year();\n+        case DAY_OF_YEAR:\n+            return chronology.dayOfYear();\n+        case MONTH_OF_YEAR:\n+            return chronology.monthOfYear();\n+        case DAY_OF_MONTH:\n+            return chronology.dayOfMonth();\n+        case WEEKYEAR:\n+            return chronology.weekyear();\n+        case WEEK_OF_WEEKYEAR:\n+            return chronology.weekOfWeekyear();\n+        case DAY_OF_WEEK:\n+            return chronology.dayOfWeek();\n+        case HALFDAY_OF_DAY:\n+            return chronology.halfdayOfDay();\n+        case HOUR_OF_HALFDAY:\n+            return chronology.hourOfHalfday();\n+        case CLOCKHOUR_OF_HALFDAY:\n+            return chronology.clockhourOfHalfday();\n+        case CLOCKHOUR_OF_DAY:\n+            return chronology.clockhourOfDay();\n+        case HOUR_OF_DAY:\n+            return chronology.hourOfDay();\n+        case MINUTE_OF_DAY:\n+            return chronology.minuteOfDay();\n+        case MINUTE_OF_HOUR:\n+            return chronology.minuteOfHour();\n+        case SECOND_OF_DAY:\n+            return chronology.secondOfDay();\n+        case SECOND_OF_MINUTE:\n+            return chronology.secondOfMinute();\n+        case MILLIS_OF_DAY:\n+            return chronology.millisOfDay();\n+        case MILLIS_OF_SECOND:\n+            return chronology.millisOfSecond();\n+        default:\n+            throw new IllegalStateException();\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Moved field selector methods to field type classes\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@470 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "9/2/04, 11:52 PM",
          "commitName": "1a5b0ef6e985dd63e51eba610222650a4b2a41f4",
          "commitAuthor": "Brian S O\u0027Neill",
          "commitDateOld": "9/2/04, 6:13 PM",
          "commitNameOld": "24481f10ccfe00f1e0e1566c63db861e33085862",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 0.24,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public DateTimeField getField(Chronology chronology) {\n    chronology \u003d DateTimeUtils.getChronology(chronology);\n    switch(iOrdinal) {\n        case ERA:\n            return chronology.era();\n        case YEAR_OF_ERA:\n            return chronology.yearOfEra();\n        case CENTURY_OF_ERA:\n            return chronology.centuryOfEra();\n        case YEAR_OF_CENTURY:\n            return chronology.yearOfCentury();\n        case YEAR:\n            return chronology.year();\n        case DAY_OF_YEAR:\n            return chronology.dayOfYear();\n        case MONTH_OF_YEAR:\n            return chronology.monthOfYear();\n        case DAY_OF_MONTH:\n            return chronology.dayOfMonth();\n        case WEEKYEAR:\n            return chronology.weekyear();\n        case WEEK_OF_WEEKYEAR:\n            return chronology.weekOfWeekyear();\n        case DAY_OF_WEEK:\n            return chronology.dayOfWeek();\n        case HALFDAY_OF_DAY:\n            return chronology.halfdayOfDay();\n        case HOUR_OF_HALFDAY:\n            return chronology.hourOfHalfday();\n        case CLOCKHOUR_OF_HALFDAY:\n            return chronology.clockhourOfHalfday();\n        case CLOCKHOUR_OF_DAY:\n            return chronology.clockhourOfDay();\n        case HOUR_OF_DAY:\n            return chronology.hourOfDay();\n        case MINUTE_OF_DAY:\n            return chronology.minuteOfDay();\n        case MINUTE_OF_HOUR:\n            return chronology.minuteOfHour();\n        case SECOND_OF_DAY:\n            return chronology.secondOfDay();\n        case SECOND_OF_MINUTE:\n            return chronology.secondOfMinute();\n        case MILLIS_OF_DAY:\n            return chronology.millisOfDay();\n        case MILLIS_OF_SECOND:\n            return chronology.millisOfSecond();\n        default:\n            throw new IllegalStateException();\n    }\n}",
          "path": "JodaTime/src/java/org/joda/time/DateTimeFieldType.java",
          "functionStartLine": 470,
          "functionName": "getField",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,49 +1,51 @@\n-public DateTimeField getField(DateTimeFieldType type) {\n-    if (type \u003d\u003d DateTimeFieldType.millisOfSecond()) {\n-        return millisOfSecond();\n-    } else if (type \u003d\u003d DateTimeFieldType.millisOfDay()) {\n-        return millisOfDay();\n-    } else if (type \u003d\u003d DateTimeFieldType.secondOfMinute()) {\n-        return secondOfMinute();\n-    } else if (type \u003d\u003d DateTimeFieldType.secondOfDay()) {\n-        return secondOfDay();\n-    } else if (type \u003d\u003d DateTimeFieldType.minuteOfHour()) {\n-        return minuteOfHour();\n-    } else if (type \u003d\u003d DateTimeFieldType.minuteOfDay()) {\n-        return minuteOfDay();\n-    } else if (type \u003d\u003d DateTimeFieldType.hourOfDay()) {\n-        return hourOfDay();\n-    } else if (type \u003d\u003d DateTimeFieldType.hourOfHalfday()) {\n-        return hourOfHalfday();\n-    } else if (type \u003d\u003d DateTimeFieldType.clockhourOfDay()) {\n-        return clockhourOfDay();\n-    } else if (type \u003d\u003d DateTimeFieldType.halfdayOfDay()) {\n-        return halfdayOfDay();\n-    } else if (type \u003d\u003d DateTimeFieldType.clockhourOfHalfday()) {\n-        return clockhourOfHalfday();\n-    } else if (type \u003d\u003d DateTimeFieldType.dayOfWeek()) {\n-        return dayOfWeek();\n-    } else if (type \u003d\u003d DateTimeFieldType.dayOfMonth()) {\n-        return dayOfMonth();\n-    } else if (type \u003d\u003d DateTimeFieldType.dayOfYear()) {\n-        return dayOfYear();\n-    } else if (type \u003d\u003d DateTimeFieldType.weekOfWeekyear()) {\n-        return weekOfWeekyear();\n-    } else if (type \u003d\u003d DateTimeFieldType.weekyear()) {\n-        return weekyear();\n-    } else if (type \u003d\u003d DateTimeFieldType.monthOfYear()) {\n-        return monthOfYear();\n-    } else if (type \u003d\u003d DateTimeFieldType.year()) {\n-        return year();\n-    } else if (type \u003d\u003d DateTimeFieldType.yearOfEra()) {\n-        return yearOfEra();\n-    } else if (type \u003d\u003d DateTimeFieldType.yearOfCentury()) {\n-        return yearOfCentury();\n-    } else if (type \u003d\u003d DateTimeFieldType.centuryOfEra()) {\n-        return centuryOfEra();\n-    } else if (type \u003d\u003d DateTimeFieldType.era()) {\n-        return era();\n-    } else {\n-        throw new IllegalArgumentException(\"Unrecognised field: \" + type);\n+public DateTimeField getField(Chronology chronology) {\n+    chronology \u003d DateTimeUtils.getChronology(chronology);\n+    switch(iOrdinal) {\n+        case ERA:\n+            return chronology.era();\n+        case YEAR_OF_ERA:\n+            return chronology.yearOfEra();\n+        case CENTURY_OF_ERA:\n+            return chronology.centuryOfEra();\n+        case YEAR_OF_CENTURY:\n+            return chronology.yearOfCentury();\n+        case YEAR:\n+            return chronology.year();\n+        case DAY_OF_YEAR:\n+            return chronology.dayOfYear();\n+        case MONTH_OF_YEAR:\n+            return chronology.monthOfYear();\n+        case DAY_OF_MONTH:\n+            return chronology.dayOfMonth();\n+        case WEEKYEAR:\n+            return chronology.weekyear();\n+        case WEEK_OF_WEEKYEAR:\n+            return chronology.weekOfWeekyear();\n+        case DAY_OF_WEEK:\n+            return chronology.dayOfWeek();\n+        case HALFDAY_OF_DAY:\n+            return chronology.halfdayOfDay();\n+        case HOUR_OF_HALFDAY:\n+            return chronology.hourOfHalfday();\n+        case CLOCKHOUR_OF_HALFDAY:\n+            return chronology.clockhourOfHalfday();\n+        case CLOCKHOUR_OF_DAY:\n+            return chronology.clockhourOfDay();\n+        case HOUR_OF_DAY:\n+            return chronology.hourOfDay();\n+        case MINUTE_OF_DAY:\n+            return chronology.minuteOfDay();\n+        case MINUTE_OF_HOUR:\n+            return chronology.minuteOfHour();\n+        case SECOND_OF_DAY:\n+            return chronology.secondOfDay();\n+        case SECOND_OF_MINUTE:\n+            return chronology.secondOfMinute();\n+        case MILLIS_OF_DAY:\n+            return chronology.millisOfDay();\n+        case MILLIS_OF_SECOND:\n+            return chronology.millisOfSecond();\n+        default:\n+            throw new IllegalStateException();\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Get the field from the type.\n\u003cp\u003e\nThis method obtains the \u003ccode\u003eDateTimeField\u003c/code\u003e for the \u003ccode\u003eDateTimeFieldType\u003c/code\u003e.\nIt is essentially a generic way of calling one of the field methods.\n\n@param type a field type, usually obtained from DateTimeFieldType\n@return the chronology field\n@throws IllegalArgumentException if the field is null\n",
            "newValue": ""
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "Moved field selector methods to field type classes\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@470 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "9/2/04, 11:52 PM",
          "commitName": "1a5b0ef6e985dd63e51eba610222650a4b2a41f4",
          "commitAuthor": "Brian S O\u0027Neill",
          "commitDateOld": "9/2/04, 6:13 PM",
          "commitNameOld": "24481f10ccfe00f1e0e1566c63db861e33085862",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 0.24,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public DateTimeField getField(Chronology chronology) {\n    chronology \u003d DateTimeUtils.getChronology(chronology);\n    switch(iOrdinal) {\n        case ERA:\n            return chronology.era();\n        case YEAR_OF_ERA:\n            return chronology.yearOfEra();\n        case CENTURY_OF_ERA:\n            return chronology.centuryOfEra();\n        case YEAR_OF_CENTURY:\n            return chronology.yearOfCentury();\n        case YEAR:\n            return chronology.year();\n        case DAY_OF_YEAR:\n            return chronology.dayOfYear();\n        case MONTH_OF_YEAR:\n            return chronology.monthOfYear();\n        case DAY_OF_MONTH:\n            return chronology.dayOfMonth();\n        case WEEKYEAR:\n            return chronology.weekyear();\n        case WEEK_OF_WEEKYEAR:\n            return chronology.weekOfWeekyear();\n        case DAY_OF_WEEK:\n            return chronology.dayOfWeek();\n        case HALFDAY_OF_DAY:\n            return chronology.halfdayOfDay();\n        case HOUR_OF_HALFDAY:\n            return chronology.hourOfHalfday();\n        case CLOCKHOUR_OF_HALFDAY:\n            return chronology.clockhourOfHalfday();\n        case CLOCKHOUR_OF_DAY:\n            return chronology.clockhourOfDay();\n        case HOUR_OF_DAY:\n            return chronology.hourOfDay();\n        case MINUTE_OF_DAY:\n            return chronology.minuteOfDay();\n        case MINUTE_OF_HOUR:\n            return chronology.minuteOfHour();\n        case SECOND_OF_DAY:\n            return chronology.secondOfDay();\n        case SECOND_OF_MINUTE:\n            return chronology.secondOfMinute();\n        case MILLIS_OF_DAY:\n            return chronology.millisOfDay();\n        case MILLIS_OF_SECOND:\n            return chronology.millisOfSecond();\n        default:\n            throw new IllegalStateException();\n    }\n}",
          "path": "JodaTime/src/java/org/joda/time/DateTimeFieldType.java",
          "functionStartLine": 470,
          "functionName": "getField",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,49 +1,51 @@\n-public DateTimeField getField(DateTimeFieldType type) {\n-    if (type \u003d\u003d DateTimeFieldType.millisOfSecond()) {\n-        return millisOfSecond();\n-    } else if (type \u003d\u003d DateTimeFieldType.millisOfDay()) {\n-        return millisOfDay();\n-    } else if (type \u003d\u003d DateTimeFieldType.secondOfMinute()) {\n-        return secondOfMinute();\n-    } else if (type \u003d\u003d DateTimeFieldType.secondOfDay()) {\n-        return secondOfDay();\n-    } else if (type \u003d\u003d DateTimeFieldType.minuteOfHour()) {\n-        return minuteOfHour();\n-    } else if (type \u003d\u003d DateTimeFieldType.minuteOfDay()) {\n-        return minuteOfDay();\n-    } else if (type \u003d\u003d DateTimeFieldType.hourOfDay()) {\n-        return hourOfDay();\n-    } else if (type \u003d\u003d DateTimeFieldType.hourOfHalfday()) {\n-        return hourOfHalfday();\n-    } else if (type \u003d\u003d DateTimeFieldType.clockhourOfDay()) {\n-        return clockhourOfDay();\n-    } else if (type \u003d\u003d DateTimeFieldType.halfdayOfDay()) {\n-        return halfdayOfDay();\n-    } else if (type \u003d\u003d DateTimeFieldType.clockhourOfHalfday()) {\n-        return clockhourOfHalfday();\n-    } else if (type \u003d\u003d DateTimeFieldType.dayOfWeek()) {\n-        return dayOfWeek();\n-    } else if (type \u003d\u003d DateTimeFieldType.dayOfMonth()) {\n-        return dayOfMonth();\n-    } else if (type \u003d\u003d DateTimeFieldType.dayOfYear()) {\n-        return dayOfYear();\n-    } else if (type \u003d\u003d DateTimeFieldType.weekOfWeekyear()) {\n-        return weekOfWeekyear();\n-    } else if (type \u003d\u003d DateTimeFieldType.weekyear()) {\n-        return weekyear();\n-    } else if (type \u003d\u003d DateTimeFieldType.monthOfYear()) {\n-        return monthOfYear();\n-    } else if (type \u003d\u003d DateTimeFieldType.year()) {\n-        return year();\n-    } else if (type \u003d\u003d DateTimeFieldType.yearOfEra()) {\n-        return yearOfEra();\n-    } else if (type \u003d\u003d DateTimeFieldType.yearOfCentury()) {\n-        return yearOfCentury();\n-    } else if (type \u003d\u003d DateTimeFieldType.centuryOfEra()) {\n-        return centuryOfEra();\n-    } else if (type \u003d\u003d DateTimeFieldType.era()) {\n-        return era();\n-    } else {\n-        throw new IllegalArgumentException(\"Unrecognised field: \" + type);\n+public DateTimeField getField(Chronology chronology) {\n+    chronology \u003d DateTimeUtils.getChronology(chronology);\n+    switch(iOrdinal) {\n+        case ERA:\n+            return chronology.era();\n+        case YEAR_OF_ERA:\n+            return chronology.yearOfEra();\n+        case CENTURY_OF_ERA:\n+            return chronology.centuryOfEra();\n+        case YEAR_OF_CENTURY:\n+            return chronology.yearOfCentury();\n+        case YEAR:\n+            return chronology.year();\n+        case DAY_OF_YEAR:\n+            return chronology.dayOfYear();\n+        case MONTH_OF_YEAR:\n+            return chronology.monthOfYear();\n+        case DAY_OF_MONTH:\n+            return chronology.dayOfMonth();\n+        case WEEKYEAR:\n+            return chronology.weekyear();\n+        case WEEK_OF_WEEKYEAR:\n+            return chronology.weekOfWeekyear();\n+        case DAY_OF_WEEK:\n+            return chronology.dayOfWeek();\n+        case HALFDAY_OF_DAY:\n+            return chronology.halfdayOfDay();\n+        case HOUR_OF_HALFDAY:\n+            return chronology.hourOfHalfday();\n+        case CLOCKHOUR_OF_HALFDAY:\n+            return chronology.clockhourOfHalfday();\n+        case CLOCKHOUR_OF_DAY:\n+            return chronology.clockhourOfDay();\n+        case HOUR_OF_DAY:\n+            return chronology.hourOfDay();\n+        case MINUTE_OF_DAY:\n+            return chronology.minuteOfDay();\n+        case MINUTE_OF_HOUR:\n+            return chronology.minuteOfHour();\n+        case SECOND_OF_DAY:\n+            return chronology.secondOfDay();\n+        case SECOND_OF_MINUTE:\n+            return chronology.secondOfMinute();\n+        case MILLIS_OF_DAY:\n+            return chronology.millisOfDay();\n+        case MILLIS_OF_SECOND:\n+            return chronology.millisOfSecond();\n+        default:\n+            throw new IllegalStateException();\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[type-DateTimeFieldType]",
            "newValue": "[chronology-Chronology]"
          }
        }
      ]
    },
    "de0a35397489a3d8ae2664b6b6d48604f9a6900f": {
      "type": "Yintroduced",
      "commitMessage": "Add DateTimeFieldType and DurationFieldType\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@465 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "9/2/04, 1:41 PM",
      "commitName": "de0a35397489a3d8ae2664b6b6d48604f9a6900f",
      "commitAuthor": "Stephen Colebourne",
      "diff": "@@ -0,0 +1,49 @@\n+public DateTimeField getField(DateTimeFieldType type) {\n+    if (type \u003d\u003d DateTimeFieldType.millisOfSecond()) {\n+        return millisOfSecond();\n+    } else if (type \u003d\u003d DateTimeFieldType.millisOfDay()) {\n+        return millisOfDay();\n+    } else if (type \u003d\u003d DateTimeFieldType.secondOfMinute()) {\n+        return secondOfMinute();\n+    } else if (type \u003d\u003d DateTimeFieldType.secondOfDay()) {\n+        return secondOfDay();\n+    } else if (type \u003d\u003d DateTimeFieldType.minuteOfHour()) {\n+        return minuteOfHour();\n+    } else if (type \u003d\u003d DateTimeFieldType.minuteOfDay()) {\n+        return minuteOfDay();\n+    } else if (type \u003d\u003d DateTimeFieldType.hourOfDay()) {\n+        return hourOfDay();\n+    } else if (type \u003d\u003d DateTimeFieldType.hourOfHalfday()) {\n+        return hourOfHalfday();\n+    } else if (type \u003d\u003d DateTimeFieldType.clockhourOfDay()) {\n+        return clockhourOfDay();\n+    } else if (type \u003d\u003d DateTimeFieldType.halfdayOfDay()) {\n+        return halfdayOfDay();\n+    } else if (type \u003d\u003d DateTimeFieldType.clockhourOfHalfday()) {\n+        return clockhourOfHalfday();\n+    } else if (type \u003d\u003d DateTimeFieldType.dayOfWeek()) {\n+        return dayOfWeek();\n+    } else if (type \u003d\u003d DateTimeFieldType.dayOfMonth()) {\n+        return dayOfMonth();\n+    } else if (type \u003d\u003d DateTimeFieldType.dayOfYear()) {\n+        return dayOfYear();\n+    } else if (type \u003d\u003d DateTimeFieldType.weekOfWeekyear()) {\n+        return weekOfWeekyear();\n+    } else if (type \u003d\u003d DateTimeFieldType.weekyear()) {\n+        return weekyear();\n+    } else if (type \u003d\u003d DateTimeFieldType.monthOfYear()) {\n+        return monthOfYear();\n+    } else if (type \u003d\u003d DateTimeFieldType.year()) {\n+        return year();\n+    } else if (type \u003d\u003d DateTimeFieldType.yearOfEra()) {\n+        return yearOfEra();\n+    } else if (type \u003d\u003d DateTimeFieldType.yearOfCentury()) {\n+        return yearOfCentury();\n+    } else if (type \u003d\u003d DateTimeFieldType.centuryOfEra()) {\n+        return centuryOfEra();\n+    } else if (type \u003d\u003d DateTimeFieldType.era()) {\n+        return era();\n+    } else {\n+        throw new IllegalArgumentException(\"Unrecognised field: \" + type);\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "public DateTimeField getField(DateTimeFieldType type) {\n    if (type \u003d\u003d DateTimeFieldType.millisOfSecond()) {\n        return millisOfSecond();\n    } else if (type \u003d\u003d DateTimeFieldType.millisOfDay()) {\n        return millisOfDay();\n    } else if (type \u003d\u003d DateTimeFieldType.secondOfMinute()) {\n        return secondOfMinute();\n    } else if (type \u003d\u003d DateTimeFieldType.secondOfDay()) {\n        return secondOfDay();\n    } else if (type \u003d\u003d DateTimeFieldType.minuteOfHour()) {\n        return minuteOfHour();\n    } else if (type \u003d\u003d DateTimeFieldType.minuteOfDay()) {\n        return minuteOfDay();\n    } else if (type \u003d\u003d DateTimeFieldType.hourOfDay()) {\n        return hourOfDay();\n    } else if (type \u003d\u003d DateTimeFieldType.hourOfHalfday()) {\n        return hourOfHalfday();\n    } else if (type \u003d\u003d DateTimeFieldType.clockhourOfDay()) {\n        return clockhourOfDay();\n    } else if (type \u003d\u003d DateTimeFieldType.halfdayOfDay()) {\n        return halfdayOfDay();\n    } else if (type \u003d\u003d DateTimeFieldType.clockhourOfHalfday()) {\n        return clockhourOfHalfday();\n    } else if (type \u003d\u003d DateTimeFieldType.dayOfWeek()) {\n        return dayOfWeek();\n    } else if (type \u003d\u003d DateTimeFieldType.dayOfMonth()) {\n        return dayOfMonth();\n    } else if (type \u003d\u003d DateTimeFieldType.dayOfYear()) {\n        return dayOfYear();\n    } else if (type \u003d\u003d DateTimeFieldType.weekOfWeekyear()) {\n        return weekOfWeekyear();\n    } else if (type \u003d\u003d DateTimeFieldType.weekyear()) {\n        return weekyear();\n    } else if (type \u003d\u003d DateTimeFieldType.monthOfYear()) {\n        return monthOfYear();\n    } else if (type \u003d\u003d DateTimeFieldType.year()) {\n        return year();\n    } else if (type \u003d\u003d DateTimeFieldType.yearOfEra()) {\n        return yearOfEra();\n    } else if (type \u003d\u003d DateTimeFieldType.yearOfCentury()) {\n        return yearOfCentury();\n    } else if (type \u003d\u003d DateTimeFieldType.centuryOfEra()) {\n        return centuryOfEra();\n    } else if (type \u003d\u003d DateTimeFieldType.era()) {\n        return era();\n    } else {\n        throw new IllegalArgumentException(\"Unrecognised field: \" + type);\n    }\n}",
      "path": "JodaTime/src/java/org/joda/time/chrono/BaseChronology.java",
      "functionStartLine": 251,
      "functionName": "getField",
      "functionAnnotation": "",
      "functionDoc": "Get the field from the type.\n\u003cp\u003e\nThis method obtains the \u003ccode\u003eDateTimeField\u003c/code\u003e for the \u003ccode\u003eDateTimeFieldType\u003c/code\u003e.\nIt is essentially a generic way of calling one of the field methods.\n\n@param type a field type, usually obtained from DateTimeFieldType\n@return the chronology field\n@throws IllegalArgumentException if the field is null\n"
    }
  }
}