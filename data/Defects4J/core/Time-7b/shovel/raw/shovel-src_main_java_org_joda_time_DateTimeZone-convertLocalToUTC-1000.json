{
  "origin": "codeshovel",
  "repositoryName": "Time-7b",
  "repositoryPath": "/tmp/Time-7b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DateTimeZone.java",
  "functionName": "convertLocalToUTC",
  "functionId": "convertLocalToUTC___instantLocal-long__strict-boolean",
  "sourceFilePath": "src/main/java/org/joda/time/DateTimeZone.java",
  "functionAnnotation": "",
  "functionDoc": "Converts a local instant to a standard UTC instant with the same\nlocal time. This conversion is used after performing a calculation\nwhere the calculation was done using a simple local zone.\n\n@param instantLocal the local instant to convert to UTC\n@param strict whether the conversion should reject non-existent local times\n@return the UTC instant with the same local time,\n@throws ArithmeticException if the result overflows a long\n@throws IllegalInstantException if the zone has no equivalent local time\n@since 1.5\n",
  "functionStartLine": 1000,
  "functionEndLine": 1041,
  "numCommitsSeen": 57,
  "timeTaken": 2118,
  "changeHistory": [
    "2fcc704a0e7d863f19b5b14fb412c14f3c063dd4",
    "df4a82f4fb46cc2248280c462e18f08d55a3d112",
    "c7a581e55fc988bd90fa4bb1b0acece5181b7c5f",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1",
    "51bec123e23441880268ed696e6014515165071f",
    "5ccd1def534f2e37637d0311fb8bcfba62f1c74d",
    "c41eff1e6026a6e0b88ea45edda3e41eecc6ac7b"
  ],
  "changeHistoryShort": {
    "2fcc704a0e7d863f19b5b14fb412c14f3c063dd4": "Ymultichange(Ybodychange,Ydocchange)",
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": "Yfilerename",
    "c7a581e55fc988bd90fa4bb1b0acece5181b7c5f": "Ydocchange",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": "Yfilerename",
    "51bec123e23441880268ed696e6014515165071f": "Ybodychange",
    "5ccd1def534f2e37637d0311fb8bcfba62f1c74d": "Ydocchange",
    "c41eff1e6026a6e0b88ea45edda3e41eecc6ac7b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2fcc704a0e7d863f19b5b14fb412c14f3c063dd4": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Add IllegalInstantException\n\nBetter handle DST gaps\n",
      "commitDate": "1/7/13, 5:04 AM",
      "commitName": "2fcc704a0e7d863f19b5b14fb412c14f3c063dd4",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Add IllegalInstantException\n\nBetter handle DST gaps\n",
          "commitDate": "1/7/13, 5:04 AM",
          "commitName": "2fcc704a0e7d863f19b5b14fb412c14f3c063dd4",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "2/11/12, 4:24 AM",
          "commitNameOld": "12fce67142744ed4f8fa78b6a5561434987195dd",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 331.03,
          "commitsBetweenForRepo": 47,
          "commitsBetweenForFile": 1,
          "actualSource": "public long convertLocalToUTC(long instantLocal, boolean strict) {\n    int offsetLocal \u003d getOffset(instantLocal);\n    int offset \u003d getOffset(instantLocal - offsetLocal);\n    if (offsetLocal !\u003d offset) {\n        if (strict || offsetLocal \u003c 0) {\n            long nextLocal \u003d nextTransition(instantLocal - offsetLocal);\n            if (nextLocal \u003d\u003d (instantLocal - offsetLocal)) {\n                nextLocal \u003d Long.MAX_VALUE;\n            }\n            long nextAdjusted \u003d nextTransition(instantLocal - offset);\n            if (nextAdjusted \u003d\u003d (instantLocal - offset)) {\n                nextAdjusted \u003d Long.MAX_VALUE;\n            }\n            if (nextLocal !\u003d nextAdjusted) {\n                if (strict) {\n                    throw new IllegalInstantException(instantLocal, getID());\n                } else {\n                    offset \u003d offsetLocal;\n                }\n            }\n        }\n    }\n    long instantUTC \u003d instantLocal - offset;\n    if ((instantLocal ^ instantUTC) \u003c 0 \u0026\u0026 (instantLocal ^ offset) \u003c 0) {\n        throw new ArithmeticException(\"Subtracting time zone offset caused overflow\");\n    }\n    return instantUTC;\n}",
          "path": "src/main/java/org/joda/time/DateTimeZone.java",
          "functionStartLine": 972,
          "functionName": "convertLocalToUTC",
          "functionAnnotation": "",
          "functionDoc": "Converts a local instant to a standard UTC instant with the same\nlocal time. This conversion is used after performing a calculation\nwhere the calculation was done using a simple local zone.\n\n@param instantLocal the local instant to convert to UTC\n@param strict whether the conversion should reject non-existent local times\n@return the UTC instant with the same local time,\n@throws ArithmeticException if the result overflows a long\n@throws IllegalInstantException if the zone has no equivalent local time\n@since 1.5\n",
          "diff": "@@ -1,28 +1,28 @@\n public long convertLocalToUTC(long instantLocal, boolean strict) {\n     int offsetLocal \u003d getOffset(instantLocal);\n     int offset \u003d getOffset(instantLocal - offsetLocal);\n     if (offsetLocal !\u003d offset) {\n         if (strict || offsetLocal \u003c 0) {\n             long nextLocal \u003d nextTransition(instantLocal - offsetLocal);\n             if (nextLocal \u003d\u003d (instantLocal - offsetLocal)) {\n                 nextLocal \u003d Long.MAX_VALUE;\n             }\n             long nextAdjusted \u003d nextTransition(instantLocal - offset);\n             if (nextAdjusted \u003d\u003d (instantLocal - offset)) {\n                 nextAdjusted \u003d Long.MAX_VALUE;\n             }\n             if (nextLocal !\u003d nextAdjusted) {\n                 if (strict) {\n-                    throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition: \" + DateTimeFormat.forPattern(\"yyyy-MM-dd\u0027T\u0027HH:mm:ss.SSS\").print(new Instant(instantLocal)) + \" (\" + getID() + \")\");\n+                    throw new IllegalInstantException(instantLocal, getID());\n                 } else {\n                     offset \u003d offsetLocal;\n                 }\n             }\n         }\n     }\n     long instantUTC \u003d instantLocal - offset;\n     if ((instantLocal ^ instantUTC) \u003c 0 \u0026\u0026 (instantLocal ^ offset) \u003c 0) {\n         throw new ArithmeticException(\"Subtracting time zone offset caused overflow\");\n     }\n     return instantUTC;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Add IllegalInstantException\n\nBetter handle DST gaps\n",
          "commitDate": "1/7/13, 5:04 AM",
          "commitName": "2fcc704a0e7d863f19b5b14fb412c14f3c063dd4",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "2/11/12, 4:24 AM",
          "commitNameOld": "12fce67142744ed4f8fa78b6a5561434987195dd",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 331.03,
          "commitsBetweenForRepo": 47,
          "commitsBetweenForFile": 1,
          "actualSource": "public long convertLocalToUTC(long instantLocal, boolean strict) {\n    int offsetLocal \u003d getOffset(instantLocal);\n    int offset \u003d getOffset(instantLocal - offsetLocal);\n    if (offsetLocal !\u003d offset) {\n        if (strict || offsetLocal \u003c 0) {\n            long nextLocal \u003d nextTransition(instantLocal - offsetLocal);\n            if (nextLocal \u003d\u003d (instantLocal - offsetLocal)) {\n                nextLocal \u003d Long.MAX_VALUE;\n            }\n            long nextAdjusted \u003d nextTransition(instantLocal - offset);\n            if (nextAdjusted \u003d\u003d (instantLocal - offset)) {\n                nextAdjusted \u003d Long.MAX_VALUE;\n            }\n            if (nextLocal !\u003d nextAdjusted) {\n                if (strict) {\n                    throw new IllegalInstantException(instantLocal, getID());\n                } else {\n                    offset \u003d offsetLocal;\n                }\n            }\n        }\n    }\n    long instantUTC \u003d instantLocal - offset;\n    if ((instantLocal ^ instantUTC) \u003c 0 \u0026\u0026 (instantLocal ^ offset) \u003c 0) {\n        throw new ArithmeticException(\"Subtracting time zone offset caused overflow\");\n    }\n    return instantUTC;\n}",
          "path": "src/main/java/org/joda/time/DateTimeZone.java",
          "functionStartLine": 972,
          "functionName": "convertLocalToUTC",
          "functionAnnotation": "",
          "functionDoc": "Converts a local instant to a standard UTC instant with the same\nlocal time. This conversion is used after performing a calculation\nwhere the calculation was done using a simple local zone.\n\n@param instantLocal the local instant to convert to UTC\n@param strict whether the conversion should reject non-existent local times\n@return the UTC instant with the same local time,\n@throws ArithmeticException if the result overflows a long\n@throws IllegalInstantException if the zone has no equivalent local time\n@since 1.5\n",
          "diff": "@@ -1,28 +1,28 @@\n public long convertLocalToUTC(long instantLocal, boolean strict) {\n     int offsetLocal \u003d getOffset(instantLocal);\n     int offset \u003d getOffset(instantLocal - offsetLocal);\n     if (offsetLocal !\u003d offset) {\n         if (strict || offsetLocal \u003c 0) {\n             long nextLocal \u003d nextTransition(instantLocal - offsetLocal);\n             if (nextLocal \u003d\u003d (instantLocal - offsetLocal)) {\n                 nextLocal \u003d Long.MAX_VALUE;\n             }\n             long nextAdjusted \u003d nextTransition(instantLocal - offset);\n             if (nextAdjusted \u003d\u003d (instantLocal - offset)) {\n                 nextAdjusted \u003d Long.MAX_VALUE;\n             }\n             if (nextLocal !\u003d nextAdjusted) {\n                 if (strict) {\n-                    throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition: \" + DateTimeFormat.forPattern(\"yyyy-MM-dd\u0027T\u0027HH:mm:ss.SSS\").print(new Instant(instantLocal)) + \" (\" + getID() + \")\");\n+                    throw new IllegalInstantException(instantLocal, getID());\n                 } else {\n                     offset \u003d offsetLocal;\n                 }\n             }\n         }\n     }\n     long instantUTC \u003d instantLocal - offset;\n     if ((instantLocal ^ instantUTC) \u003c 0 \u0026\u0026 (instantLocal ^ offset) \u003c 0) {\n         throw new ArithmeticException(\"Subtracting time zone offset caused overflow\");\n     }\n     return instantUTC;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Converts a local instant to a standard UTC instant with the same\nlocal time. This conversion is used after performing a calculation\nwhere the calculation was done using a simple local zone.\n\n@param instantLocal the local instant to convert to UTC\n@param strict whether the conversion should reject non-existent local times\n@return the UTC instant with the same local time,\n@throws ArithmeticException if the result overflows a long\n@throws IllegalArgumentException if the zone has no equivalent local time\n@since 1.5\n",
            "newValue": "Converts a local instant to a standard UTC instant with the same\nlocal time. This conversion is used after performing a calculation\nwhere the calculation was done using a simple local zone.\n\n@param instantLocal the local instant to convert to UTC\n@param strict whether the conversion should reject non-existent local times\n@return the UTC instant with the same local time,\n@throws ArithmeticException if the result overflows a long\n@throws IllegalInstantException if the zone has no equivalent local time\n@since 1.5\n"
          }
        }
      ]
    },
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": {
      "type": "Yfilerename",
      "commitMessage": "Remove JodaTime folder moving files to top level\n",
      "commitDate": "5/16/11, 10:02 AM",
      "commitName": "df4a82f4fb46cc2248280c462e18f08d55a3d112",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "5/16/11, 9:58 AM",
      "commitNameOld": "72b22654962284bac59c2777131b42a2d1f53228",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public long convertLocalToUTC(long instantLocal, boolean strict) {\n    int offsetLocal \u003d getOffset(instantLocal);\n    int offset \u003d getOffset(instantLocal - offsetLocal);\n    if (offsetLocal !\u003d offset) {\n        if (strict || offsetLocal \u003c 0) {\n            long nextLocal \u003d nextTransition(instantLocal - offsetLocal);\n            if (nextLocal \u003d\u003d (instantLocal - offsetLocal)) {\n                nextLocal \u003d Long.MAX_VALUE;\n            }\n            long nextAdjusted \u003d nextTransition(instantLocal - offset);\n            if (nextAdjusted \u003d\u003d (instantLocal - offset)) {\n                nextAdjusted \u003d Long.MAX_VALUE;\n            }\n            if (nextLocal !\u003d nextAdjusted) {\n                if (strict) {\n                    throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition: \" + DateTimeFormat.forPattern(\"yyyy-MM-dd\u0027T\u0027HH:mm:ss.SSS\").print(new Instant(instantLocal)) + \" (\" + getID() + \")\");\n                } else {\n                    offset \u003d offsetLocal;\n                }\n            }\n        }\n    }\n    long instantUTC \u003d instantLocal - offset;\n    if ((instantLocal ^ instantUTC) \u003c 0 \u0026\u0026 (instantLocal ^ offset) \u003c 0) {\n        throw new ArithmeticException(\"Subtracting time zone offset caused overflow\");\n    }\n    return instantUTC;\n}",
      "path": "src/main/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 972,
      "functionName": "convertLocalToUTC",
      "functionAnnotation": "",
      "functionDoc": "Converts a local instant to a standard UTC instant with the same\nlocal time. This conversion is used after performing a calculation\nwhere the calculation was done using a simple local zone.\n\n@param instantLocal the local instant to convert to UTC\n@param strict whether the conversion should reject non-existent local times\n@return the UTC instant with the same local time,\n@throws ArithmeticException if the result overflows a long\n@throws IllegalArgumentException if the zone has no equivalent local time\n@since 1.5\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/main/java/org/joda/time/DateTimeZone.java",
        "newPath": "src/main/java/org/joda/time/DateTimeZone.java"
      }
    },
    "c7a581e55fc988bd90fa4bb1b0acece5181b7c5f": {
      "type": "Ydocchange",
      "commitMessage": "DateTimeZone.convertLocalToUTC [bugs 3102760,2182444,2553453]\nNew method now retains the offset wherever possible during calculations\nThis affects higher methods like withHourOfDay/withMinuteOfHour/withSecondOfMinute/withMillisOfSecond which now do not change offset when called within a DST overlap\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1595 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "12/5/10, 1:27 PM",
      "commitName": "c7a581e55fc988bd90fa4bb1b0acece5181b7c5f",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "12/4/10, 4:19 PM",
      "commitNameOld": "218a7fe91a685e089ab8fd7700806f7a6083f18d",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.88,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public long convertLocalToUTC(long instantLocal, boolean strict) {\n    int offsetLocal \u003d getOffset(instantLocal);\n    int offset \u003d getOffset(instantLocal - offsetLocal);\n    if (offsetLocal !\u003d offset) {\n        if (strict || offsetLocal \u003c 0) {\n            long nextLocal \u003d nextTransition(instantLocal - offsetLocal);\n            if (nextLocal \u003d\u003d (instantLocal - offsetLocal)) {\n                nextLocal \u003d Long.MAX_VALUE;\n            }\n            long nextAdjusted \u003d nextTransition(instantLocal - offset);\n            if (nextAdjusted \u003d\u003d (instantLocal - offset)) {\n                nextAdjusted \u003d Long.MAX_VALUE;\n            }\n            if (nextLocal !\u003d nextAdjusted) {\n                if (strict) {\n                    throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition: \" + DateTimeFormat.forPattern(\"yyyy-MM-dd\u0027T\u0027HH:mm:ss.SSS\").print(new Instant(instantLocal)) + \" (\" + getID() + \")\");\n                } else {\n                    offset \u003d offsetLocal;\n                }\n            }\n        }\n    }\n    long instantUTC \u003d instantLocal - offset;\n    if ((instantLocal ^ instantUTC) \u003c 0 \u0026\u0026 (instantLocal ^ offset) \u003c 0) {\n        throw new ArithmeticException(\"Subtracting time zone offset caused overflow\");\n    }\n    return instantUTC;\n}",
      "path": "JodaTime/src/main/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 958,
      "functionName": "convertLocalToUTC",
      "functionAnnotation": "",
      "functionDoc": "Converts a local instant to a standard UTC instant with the same\nlocal time. This conversion is used after performing a calculation\nwhere the calculation was done using a simple local zone.\n\n@param instantLocal the local instant to convert to UTC\n@param strict whether the conversion should reject non-existent local times\n@return the UTC instant with the same local time,\n@throws ArithmeticException if the result overflows a long\n@throws IllegalArgumentException if the zone has no equivalent local time\n@since 1.5\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Converts a local instant to a standard UTC instant with the same\nlocal time. This conversion is used after performing a calculation\nwhere the calculation was done using a simple local zone.\n\n@param instantLocal the local instant to convert to UTC\n@param strict whether the conversion should reject non-existent local times\n@return the UTC instant with the same local time,\n@throws ArithmeticException if the result overflows a long\n@throws IllegalArgumentException if the zone has no eqivalent local time\n@since 1.5\n",
        "newValue": "Converts a local instant to a standard UTC instant with the same\nlocal time. This conversion is used after performing a calculation\nwhere the calculation was done using a simple local zone.\n\n@param instantLocal the local instant to convert to UTC\n@param strict whether the conversion should reject non-existent local times\n@return the UTC instant with the same local time,\n@throws ArithmeticException if the result overflows a long\n@throws IllegalArgumentException if the zone has no equivalent local time\n@since 1.5\n"
      }
    },
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": {
      "type": "Yfilerename",
      "commitMessage": "Convert to maven 2\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1540 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/8/10, 5:17 PM",
      "commitName": "53feb3fa56af7260e607844524b7e5a9be49ecc1",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/8/10, 5:02 PM",
      "commitNameOld": "7fa2ceaf5d95d050095432aa646ea803aa35e122",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public long convertLocalToUTC(long instantLocal, boolean strict) {\n    int offsetLocal \u003d getOffset(instantLocal);\n    int offset \u003d getOffset(instantLocal - offsetLocal);\n    if (offsetLocal !\u003d offset) {\n        if (strict || offsetLocal \u003c 0) {\n            long nextLocal \u003d nextTransition(instantLocal - offsetLocal);\n            if (nextLocal \u003d\u003d (instantLocal - offsetLocal)) {\n                nextLocal \u003d Long.MAX_VALUE;\n            }\n            long nextAdjusted \u003d nextTransition(instantLocal - offset);\n            if (nextAdjusted \u003d\u003d (instantLocal - offset)) {\n                nextAdjusted \u003d Long.MAX_VALUE;\n            }\n            if (nextLocal !\u003d nextAdjusted) {\n                if (strict) {\n                    throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition: \" + DateTimeFormat.forPattern(\"yyyy-MM-dd\u0027T\u0027HH:mm:ss.SSS\").print(new Instant(instantLocal)) + \" (\" + getID() + \")\");\n                } else {\n                    offset \u003d offsetLocal;\n                }\n            }\n        }\n    }\n    long instantUTC \u003d instantLocal - offset;\n    if ((instantLocal ^ instantUTC) \u003c 0 \u0026\u0026 (instantLocal ^ offset) \u003c 0) {\n        throw new ArithmeticException(\"Subtracting time zone offset caused overflow\");\n    }\n    return instantUTC;\n}",
      "path": "JodaTime/src/main/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 915,
      "functionName": "convertLocalToUTC",
      "functionAnnotation": "",
      "functionDoc": "Converts a local instant to a standard UTC instant with the same\nlocal time. This conversion is used after performing a calculation\nwhere the calculation was done using a simple local zone.\n\n@param instantLocal the local instant to convert to UTC\n@param strict whether the conversion should reject non-existent local times\n@return the UTC instant with the same local time,\n@throws ArithmeticException if the result overflows a long\n@throws IllegalArgumentException if the zone has no eqivalent local time\n@since 1.5\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
        "newPath": "JodaTime/src/main/java/org/joda/time/DateTimeZone.java"
      }
    },
    "51bec123e23441880268ed696e6014515165071f": {
      "type": "Ybodychange",
      "commitMessage": "DateTimeZone.convertLocalToUTC [2903029]\nNow handles date after last ever DST change\nreported by Christoph Goldner\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1477 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "2/16/10, 5:02 PM",
      "commitName": "51bec123e23441880268ed696e6014515165071f",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "2/14/10, 9:19 AM",
      "commitNameOld": "bc49e14e17ce686934b9a87a632f5b3ee6f80761",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 2.32,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public long convertLocalToUTC(long instantLocal, boolean strict) {\n    int offsetLocal \u003d getOffset(instantLocal);\n    int offset \u003d getOffset(instantLocal - offsetLocal);\n    if (offsetLocal !\u003d offset) {\n        if (strict || offsetLocal \u003c 0) {\n            long nextLocal \u003d nextTransition(instantLocal - offsetLocal);\n            if (nextLocal \u003d\u003d (instantLocal - offsetLocal)) {\n                nextLocal \u003d Long.MAX_VALUE;\n            }\n            long nextAdjusted \u003d nextTransition(instantLocal - offset);\n            if (nextAdjusted \u003d\u003d (instantLocal - offset)) {\n                nextAdjusted \u003d Long.MAX_VALUE;\n            }\n            if (nextLocal !\u003d nextAdjusted) {\n                if (strict) {\n                    throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition: \" + DateTimeFormat.forPattern(\"yyyy-MM-dd\u0027T\u0027HH:mm:ss.SSS\").print(new Instant(instantLocal)) + \" (\" + getID() + \")\");\n                } else {\n                    offset \u003d offsetLocal;\n                }\n            }\n        }\n    }\n    long instantUTC \u003d instantLocal - offset;\n    if ((instantLocal ^ instantUTC) \u003c 0 \u0026\u0026 (instantLocal ^ offset) \u003c 0) {\n        throw new ArithmeticException(\"Subtracting time zone offset caused overflow\");\n    }\n    return instantUTC;\n}",
      "path": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 915,
      "functionName": "convertLocalToUTC",
      "functionAnnotation": "",
      "functionDoc": "Converts a local instant to a standard UTC instant with the same\nlocal time. This conversion is used after performing a calculation\nwhere the calculation was done using a simple local zone.\n\n@param instantLocal the local instant to convert to UTC\n@param strict whether the conversion should reject non-existent local times\n@return the UTC instant with the same local time,\n@throws ArithmeticException if the result overflows a long\n@throws IllegalArgumentException if the zone has no eqivalent local time\n@since 1.5\n",
      "diff": "@@ -1,22 +1,28 @@\n public long convertLocalToUTC(long instantLocal, boolean strict) {\n     int offsetLocal \u003d getOffset(instantLocal);\n     int offset \u003d getOffset(instantLocal - offsetLocal);\n     if (offsetLocal !\u003d offset) {\n         if (strict || offsetLocal \u003c 0) {\n             long nextLocal \u003d nextTransition(instantLocal - offsetLocal);\n+            if (nextLocal \u003d\u003d (instantLocal - offsetLocal)) {\n+                nextLocal \u003d Long.MAX_VALUE;\n+            }\n             long nextAdjusted \u003d nextTransition(instantLocal - offset);\n+            if (nextAdjusted \u003d\u003d (instantLocal - offset)) {\n+                nextAdjusted \u003d Long.MAX_VALUE;\n+            }\n             if (nextLocal !\u003d nextAdjusted) {\n                 if (strict) {\n                     throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition: \" + DateTimeFormat.forPattern(\"yyyy-MM-dd\u0027T\u0027HH:mm:ss.SSS\").print(new Instant(instantLocal)) + \" (\" + getID() + \")\");\n                 } else {\n                     offset \u003d offsetLocal;\n                 }\n             }\n         }\n     }\n     long instantUTC \u003d instantLocal - offset;\n     if ((instantLocal ^ instantUTC) \u003c 0 \u0026\u0026 (instantLocal ^ offset) \u003c 0) {\n         throw new ArithmeticException(\"Subtracting time zone offset caused overflow\");\n     }\n     return instantUTC;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5ccd1def534f2e37637d0311fb8bcfba62f1c74d": {
      "type": "Ydocchange",
      "commitMessage": "Add missing since tags for 1.5\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1279 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "10/29/07, 2:28 AM",
      "commitName": "5ccd1def534f2e37637d0311fb8bcfba62f1c74d",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/4/07, 10:46 AM",
      "commitNameOld": "3f5e2fafb4f17632d783a1f6977b42588c7b1414",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 85.65,
      "commitsBetweenForRepo": 46,
      "commitsBetweenForFile": 1,
      "actualSource": "public long convertLocalToUTC(long instantLocal, boolean strict) {\n    int offsetLocal \u003d getOffset(instantLocal);\n    int offset \u003d getOffset(instantLocal - offsetLocal);\n    if (offsetLocal !\u003d offset) {\n        if (strict || offsetLocal \u003c 0) {\n            long nextLocal \u003d nextTransition(instantLocal - offsetLocal);\n            long nextAdjusted \u003d nextTransition(instantLocal - offset);\n            if (nextLocal !\u003d nextAdjusted) {\n                if (strict) {\n                    throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition: \" + DateTimeFormat.forPattern(\"yyyy-MM-dd\u0027T\u0027HH:mm:ss.SSS\").print(new Instant(instantLocal)) + \" (\" + getID() + \")\");\n                } else {\n                    offset \u003d offsetLocal;\n                }\n            }\n        }\n    }\n    long instantUTC \u003d instantLocal - offset;\n    if ((instantLocal ^ instantUTC) \u003c 0 \u0026\u0026 (instantLocal ^ offset) \u003c 0) {\n        throw new ArithmeticException(\"Subtracting time zone offset caused overflow\");\n    }\n    return instantUTC;\n}",
      "path": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 913,
      "functionName": "convertLocalToUTC",
      "functionAnnotation": "",
      "functionDoc": "Converts a local instant to a standard UTC instant with the same\nlocal time. This conversion is used after performing a calculation\nwhere the calculation was done using a simple local zone.\n\n@param instantLocal the local instant to convert to UTC\n@param strict whether the conversion should reject non-existent local times\n@return the UTC instant with the same local time,\n@throws ArithmeticException if the result overflows a long\n@throws IllegalArgumentException if the zone has no eqivalent local time\n@since 1.5\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Converts a local instant to a standard UTC instant with the same\nlocal time. This conversion is used after performing a calculation\nwhere the calculation was done using a simple local zone.\n\n@param instantLocal the local instant to convert to UTC\n@param strict whether the conversion should reject non-existent local times\n@return the UTC instant with the same local time,\n@throws ArithmeticException if the result overflows a long\n@throws IllegalArgumentException if the zone has no eqivalent local time\n",
        "newValue": "Converts a local instant to a standard UTC instant with the same\nlocal time. This conversion is used after performing a calculation\nwhere the calculation was done using a simple local zone.\n\n@param instantLocal the local instant to convert to UTC\n@param strict whether the conversion should reject non-existent local times\n@return the UTC instant with the same local time,\n@throws ArithmeticException if the result overflows a long\n@throws IllegalArgumentException if the zone has no eqivalent local time\n@since 1.5\n"
      }
    },
    "c41eff1e6026a6e0b88ea45edda3e41eecc6ac7b": {
      "type": "Yintroduced",
      "commitMessage": "Fix DateTimeZone to better handle spring DST cutover\nbugs 1710316, 1747219, 1755158\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1232 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/4/07, 10:23 AM",
      "commitName": "c41eff1e6026a6e0b88ea45edda3e41eecc6ac7b",
      "commitAuthor": "Stephen Colebourne",
      "diff": "@@ -0,0 +1,22 @@\n+public long convertLocalToUTC(long instantLocal, boolean strict) {\n+    int offsetLocal \u003d getOffset(instantLocal);\n+    int offset \u003d getOffset(instantLocal - offsetLocal);\n+    if (offsetLocal !\u003d offset) {\n+        if (strict || offsetLocal \u003c 0) {\n+            long nextLocal \u003d nextTransition(instantLocal - offsetLocal);\n+            long nextAdjusted \u003d nextTransition(instantLocal - offset);\n+            if (nextLocal !\u003d nextAdjusted) {\n+                if (strict) {\n+                    throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition: \" + DateTimeFormat.forPattern(\"yyyy-MM-dd\u0027T\u0027HH:mm:ss.SSS\").print(new Instant(instantLocal)) + \" (\" + getID() + \")\");\n+                } else {\n+                    offset \u003d offsetLocal;\n+                }\n+            }\n+        }\n+    }\n+    long instantUTC \u003d instantLocal - offset;\n+    if ((instantLocal ^ instantUTC) \u003c 0 \u0026\u0026 (instantLocal ^ offset) \u003c 0) {\n+        throw new ArithmeticException(\"Subtracting time zone offset caused overflow\");\n+    }\n+    return instantUTC;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public long convertLocalToUTC(long instantLocal, boolean strict) {\n    int offsetLocal \u003d getOffset(instantLocal);\n    int offset \u003d getOffset(instantLocal - offsetLocal);\n    if (offsetLocal !\u003d offset) {\n        if (strict || offsetLocal \u003c 0) {\n            long nextLocal \u003d nextTransition(instantLocal - offsetLocal);\n            long nextAdjusted \u003d nextTransition(instantLocal - offset);\n            if (nextLocal !\u003d nextAdjusted) {\n                if (strict) {\n                    throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition: \" + DateTimeFormat.forPattern(\"yyyy-MM-dd\u0027T\u0027HH:mm:ss.SSS\").print(new Instant(instantLocal)) + \" (\" + getID() + \")\");\n                } else {\n                    offset \u003d offsetLocal;\n                }\n            }\n        }\n    }\n    long instantUTC \u003d instantLocal - offset;\n    if ((instantLocal ^ instantUTC) \u003c 0 \u0026\u0026 (instantLocal ^ offset) \u003c 0) {\n        throw new ArithmeticException(\"Subtracting time zone offset caused overflow\");\n    }\n    return instantUTC;\n}",
      "path": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 908,
      "functionName": "convertLocalToUTC",
      "functionAnnotation": "",
      "functionDoc": "Converts a local instant to a standard UTC instant with the same\nlocal time. This conversion is used after performing a calculation\nwhere the calculation was done using a simple local zone.\n\n@param instantLocal the local instant to convert to UTC\n@param strict whether the conversion should reject non-existent local times\n@return the UTC instant with the same local time,\n@throws ArithmeticException if the result overflows a long\n@throws IllegalArgumentException if the zone has no eqivalent local time\n"
    }
  }
}