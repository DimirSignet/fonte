{
  "origin": "codeshovel",
  "repositoryName": "Time-7b",
  "repositoryPath": "/tmp/Time-7b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DateTimeFormat.java",
  "functionName": "parseToken",
  "functionId": "parseToken___pattern-String__indexRef-int[]",
  "sourceFilePath": "src/main/java/org/joda/time/format/DateTimeFormat.java",
  "functionAnnotation": "",
  "functionDoc": "Parses an individual token.\n\n@param pattern the pattern string\n@param indexRef a single element array, where the input is the start\n location and the output is the location after parsing the token\n@return the parsed token\n",
  "functionStartLine": 573,
  "functionEndLine": 623,
  "numCommitsSeen": 39,
  "timeTaken": 4188,
  "changeHistory": [
    "66c4a1c10d33243fb0a6f850d350226ab4d55a6c",
    "df4a82f4fb46cc2248280c462e18f08d55a3d112",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1",
    "5082337a4152e04ebd8077fd0b7fa28113a4d79e",
    "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb"
  ],
  "changeHistoryShort": {
    "66c4a1c10d33243fb0a6f850d350226ab4d55a6c": "Ybodychange",
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": "Yfilerename",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": "Yfilerename",
    "5082337a4152e04ebd8077fd0b7fa28113a4d79e": "Ymultichange(Yparametermetachange,Ydocchange)",
    "0e07ac6b2cff63550d7df336355ca63cc05aa40b": "Ymultichange(Ymovefromfile,Yparametermetachange)",
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb": "Yintroduced"
  },
  "changeHistoryDetails": {
    "66c4a1c10d33243fb0a6f850d350226ab4d55a6c": {
      "type": "Ybodychange",
      "commitMessage": "Change some StringBuffer uses to StringBuilder [3532330]\n",
      "commitDate": "6/6/12, 3:35 AM",
      "commitName": "66c4a1c10d33243fb0a6f850d350226ab4d55a6c",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "5/16/11, 10:02 AM",
      "commitNameOld": "df4a82f4fb46cc2248280c462e18f08d55a3d112",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 386.73,
      "commitsBetweenForRepo": 79,
      "commitsBetweenForFile": 1,
      "actualSource": "private static String parseToken(String pattern, int[] indexRef) {\n    StringBuilder buf \u003d new StringBuilder();\n    int i \u003d indexRef[0];\n    int length \u003d pattern.length();\n    char c \u003d pattern.charAt(i);\n    if (c \u003e\u003d \u0027A\u0027 \u0026\u0026 c \u003c\u003d \u0027Z\u0027 || c \u003e\u003d \u0027a\u0027 \u0026\u0026 c \u003c\u003d \u0027z\u0027) {\n        buf.append(c);\n        while (i + 1 \u003c length) {\n            char peek \u003d pattern.charAt(i + 1);\n            if (peek \u003d\u003d c) {\n                buf.append(c);\n                i++;\n            } else {\n                break;\n            }\n        }\n    } else {\n        buf.append(\u0027\\\u0027\u0027);\n        boolean inLiteral \u003d false;\n        for (; i \u003c length; i++) {\n            c \u003d pattern.charAt(i);\n            if (c \u003d\u003d \u0027\\\u0027\u0027) {\n                if (i + 1 \u003c length \u0026\u0026 pattern.charAt(i + 1) \u003d\u003d \u0027\\\u0027\u0027) {\n                    i++;\n                    buf.append(c);\n                } else {\n                    inLiteral \u003d !inLiteral;\n                }\n            } else if (!inLiteral \u0026\u0026 (c \u003e\u003d \u0027A\u0027 \u0026\u0026 c \u003c\u003d \u0027Z\u0027 || c \u003e\u003d \u0027a\u0027 \u0026\u0026 c \u003c\u003d \u0027z\u0027)) {\n                i--;\n                break;\n            } else {\n                buf.append(c);\n            }\n        }\n    }\n    indexRef[0] \u003d i;\n    return buf.toString();\n}",
      "path": "src/main/java/org/joda/time/format/DateTimeFormat.java",
      "functionStartLine": 573,
      "functionName": "parseToken",
      "functionAnnotation": "",
      "functionDoc": "Parses an individual token.\n\n@param pattern the pattern string\n@param indexRef a single element array, where the input is the start\n location and the output is the location after parsing the token\n@return the parsed token\n",
      "diff": "@@ -1,39 +1,39 @@\n private static String parseToken(String pattern, int[] indexRef) {\n-    StringBuffer buf \u003d new StringBuffer();\n+    StringBuilder buf \u003d new StringBuilder();\n     int i \u003d indexRef[0];\n     int length \u003d pattern.length();\n     char c \u003d pattern.charAt(i);\n     if (c \u003e\u003d \u0027A\u0027 \u0026\u0026 c \u003c\u003d \u0027Z\u0027 || c \u003e\u003d \u0027a\u0027 \u0026\u0026 c \u003c\u003d \u0027z\u0027) {\n         buf.append(c);\n         while (i + 1 \u003c length) {\n             char peek \u003d pattern.charAt(i + 1);\n             if (peek \u003d\u003d c) {\n                 buf.append(c);\n                 i++;\n             } else {\n                 break;\n             }\n         }\n     } else {\n         buf.append(\u0027\\\u0027\u0027);\n         boolean inLiteral \u003d false;\n         for (; i \u003c length; i++) {\n             c \u003d pattern.charAt(i);\n             if (c \u003d\u003d \u0027\\\u0027\u0027) {\n                 if (i + 1 \u003c length \u0026\u0026 pattern.charAt(i + 1) \u003d\u003d \u0027\\\u0027\u0027) {\n                     i++;\n                     buf.append(c);\n                 } else {\n                     inLiteral \u003d !inLiteral;\n                 }\n             } else if (!inLiteral \u0026\u0026 (c \u003e\u003d \u0027A\u0027 \u0026\u0026 c \u003c\u003d \u0027Z\u0027 || c \u003e\u003d \u0027a\u0027 \u0026\u0026 c \u003c\u003d \u0027z\u0027)) {\n                 i--;\n                 break;\n             } else {\n                 buf.append(c);\n             }\n         }\n     }\n     indexRef[0] \u003d i;\n     return buf.toString();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": {
      "type": "Yfilerename",
      "commitMessage": "Remove JodaTime folder moving files to top level\n",
      "commitDate": "5/16/11, 10:02 AM",
      "commitName": "df4a82f4fb46cc2248280c462e18f08d55a3d112",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "5/16/11, 9:58 AM",
      "commitNameOld": "72b22654962284bac59c2777131b42a2d1f53228",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private static String parseToken(String pattern, int[] indexRef) {\n    StringBuffer buf \u003d new StringBuffer();\n    int i \u003d indexRef[0];\n    int length \u003d pattern.length();\n    char c \u003d pattern.charAt(i);\n    if (c \u003e\u003d \u0027A\u0027 \u0026\u0026 c \u003c\u003d \u0027Z\u0027 || c \u003e\u003d \u0027a\u0027 \u0026\u0026 c \u003c\u003d \u0027z\u0027) {\n        buf.append(c);\n        while (i + 1 \u003c length) {\n            char peek \u003d pattern.charAt(i + 1);\n            if (peek \u003d\u003d c) {\n                buf.append(c);\n                i++;\n            } else {\n                break;\n            }\n        }\n    } else {\n        buf.append(\u0027\\\u0027\u0027);\n        boolean inLiteral \u003d false;\n        for (; i \u003c length; i++) {\n            c \u003d pattern.charAt(i);\n            if (c \u003d\u003d \u0027\\\u0027\u0027) {\n                if (i + 1 \u003c length \u0026\u0026 pattern.charAt(i + 1) \u003d\u003d \u0027\\\u0027\u0027) {\n                    i++;\n                    buf.append(c);\n                } else {\n                    inLiteral \u003d !inLiteral;\n                }\n            } else if (!inLiteral \u0026\u0026 (c \u003e\u003d \u0027A\u0027 \u0026\u0026 c \u003c\u003d \u0027Z\u0027 || c \u003e\u003d \u0027a\u0027 \u0026\u0026 c \u003c\u003d \u0027z\u0027)) {\n                i--;\n                break;\n            } else {\n                buf.append(c);\n            }\n        }\n    }\n    indexRef[0] \u003d i;\n    return buf.toString();\n}",
      "path": "src/main/java/org/joda/time/format/DateTimeFormat.java",
      "functionStartLine": 573,
      "functionName": "parseToken",
      "functionAnnotation": "",
      "functionDoc": "Parses an individual token.\n\n@param pattern the pattern string\n@param indexRef a single element array, where the input is the start\n location and the output is the location after parsing the token\n@return the parsed token\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/main/java/org/joda/time/format/DateTimeFormat.java",
        "newPath": "src/main/java/org/joda/time/format/DateTimeFormat.java"
      }
    },
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": {
      "type": "Yfilerename",
      "commitMessage": "Convert to maven 2\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1540 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/8/10, 5:17 PM",
      "commitName": "53feb3fa56af7260e607844524b7e5a9be49ecc1",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/8/10, 5:02 PM",
      "commitNameOld": "7fa2ceaf5d95d050095432aa646ea803aa35e122",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private static String parseToken(String pattern, int[] indexRef) {\n    StringBuffer buf \u003d new StringBuffer();\n    int i \u003d indexRef[0];\n    int length \u003d pattern.length();\n    char c \u003d pattern.charAt(i);\n    if (c \u003e\u003d \u0027A\u0027 \u0026\u0026 c \u003c\u003d \u0027Z\u0027 || c \u003e\u003d \u0027a\u0027 \u0026\u0026 c \u003c\u003d \u0027z\u0027) {\n        buf.append(c);\n        while (i + 1 \u003c length) {\n            char peek \u003d pattern.charAt(i + 1);\n            if (peek \u003d\u003d c) {\n                buf.append(c);\n                i++;\n            } else {\n                break;\n            }\n        }\n    } else {\n        buf.append(\u0027\\\u0027\u0027);\n        boolean inLiteral \u003d false;\n        for (; i \u003c length; i++) {\n            c \u003d pattern.charAt(i);\n            if (c \u003d\u003d \u0027\\\u0027\u0027) {\n                if (i + 1 \u003c length \u0026\u0026 pattern.charAt(i + 1) \u003d\u003d \u0027\\\u0027\u0027) {\n                    i++;\n                    buf.append(c);\n                } else {\n                    inLiteral \u003d !inLiteral;\n                }\n            } else if (!inLiteral \u0026\u0026 (c \u003e\u003d \u0027A\u0027 \u0026\u0026 c \u003c\u003d \u0027Z\u0027 || c \u003e\u003d \u0027a\u0027 \u0026\u0026 c \u003c\u003d \u0027z\u0027)) {\n                i--;\n                break;\n            } else {\n                buf.append(c);\n            }\n        }\n    }\n    indexRef[0] \u003d i;\n    return buf.toString();\n}",
      "path": "JodaTime/src/main/java/org/joda/time/format/DateTimeFormat.java",
      "functionStartLine": 573,
      "functionName": "parseToken",
      "functionAnnotation": "",
      "functionDoc": "Parses an individual token.\n\n@param pattern the pattern string\n@param indexRef a single element array, where the input is the start\n location and the output is the location after parsing the token\n@return the parsed token\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/java/org/joda/time/format/DateTimeFormat.java",
        "newPath": "JodaTime/src/main/java/org/joda/time/format/DateTimeFormat.java"
      }
    },
    "5082337a4152e04ebd8077fd0b7fa28113a4d79e": {
      "type": "Ymultichange(Yparametermetachange,Ydocchange)",
      "commitMessage": "Refactor DateTime formatting to use decoration pattern\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@687 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "2/12/05, 6:39 PM",
      "commitName": "5082337a4152e04ebd8077fd0b7fa28113a4d79e",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Yparametermetachange",
          "commitMessage": "Refactor DateTime formatting to use decoration pattern\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@687 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "2/12/05, 6:39 PM",
          "commitName": "5082337a4152e04ebd8077fd0b7fa28113a4d79e",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "2/12/05, 3:28 PM",
          "commitNameOld": "28108d2dd6ba602f2b3d328045e74a3d2bf2d0a9",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 0.13,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "private static String parseToken(String pattern, int[] indexRef) {\n    StringBuffer buf \u003d new StringBuffer();\n    int i \u003d indexRef[0];\n    int length \u003d pattern.length();\n    char c \u003d pattern.charAt(i);\n    if (c \u003e\u003d \u0027A\u0027 \u0026\u0026 c \u003c\u003d \u0027Z\u0027 || c \u003e\u003d \u0027a\u0027 \u0026\u0026 c \u003c\u003d \u0027z\u0027) {\n        buf.append(c);\n        while (i + 1 \u003c length) {\n            char peek \u003d pattern.charAt(i + 1);\n            if (peek \u003d\u003d c) {\n                buf.append(c);\n                i++;\n            } else {\n                break;\n            }\n        }\n    } else {\n        buf.append(\u0027\\\u0027\u0027);\n        boolean inLiteral \u003d false;\n        for (; i \u003c length; i++) {\n            c \u003d pattern.charAt(i);\n            if (c \u003d\u003d \u0027\\\u0027\u0027) {\n                if (i + 1 \u003c length \u0026\u0026 pattern.charAt(i + 1) \u003d\u003d \u0027\\\u0027\u0027) {\n                    i++;\n                    buf.append(c);\n                } else {\n                    inLiteral \u003d !inLiteral;\n                }\n            } else if (!inLiteral \u0026\u0026 (c \u003e\u003d \u0027A\u0027 \u0026\u0026 c \u003c\u003d \u0027Z\u0027 || c \u003e\u003d \u0027a\u0027 \u0026\u0026 c \u003c\u003d \u0027z\u0027)) {\n                i--;\n                break;\n            } else {\n                buf.append(c);\n            }\n        }\n    }\n    indexRef[0] \u003d i;\n    return buf.toString();\n}",
          "path": "JodaTime/src/java/org/joda/time/format/DateTimeFormat.java",
          "functionStartLine": 532,
          "functionName": "parseToken",
          "functionAnnotation": "",
          "functionDoc": "Parses an individual token.\n\n@param pattern the pattern string\n@param indexRef a single element array, where the input is the start\n location and the output is the location after parsing the token\n@return the parsed token\n",
          "diff": "@@ -1,39 +1,39 @@\n-private static String parseToken(final String pattern, final int[] indexRef) {\n+private static String parseToken(String pattern, int[] indexRef) {\n     StringBuffer buf \u003d new StringBuffer();\n     int i \u003d indexRef[0];\n     int length \u003d pattern.length();\n     char c \u003d pattern.charAt(i);\n     if (c \u003e\u003d \u0027A\u0027 \u0026\u0026 c \u003c\u003d \u0027Z\u0027 || c \u003e\u003d \u0027a\u0027 \u0026\u0026 c \u003c\u003d \u0027z\u0027) {\n         buf.append(c);\n         while (i + 1 \u003c length) {\n             char peek \u003d pattern.charAt(i + 1);\n             if (peek \u003d\u003d c) {\n                 buf.append(c);\n                 i++;\n             } else {\n                 break;\n             }\n         }\n     } else {\n         buf.append(\u0027\\\u0027\u0027);\n         boolean inLiteral \u003d false;\n         for (; i \u003c length; i++) {\n             c \u003d pattern.charAt(i);\n             if (c \u003d\u003d \u0027\\\u0027\u0027) {\n                 if (i + 1 \u003c length \u0026\u0026 pattern.charAt(i + 1) \u003d\u003d \u0027\\\u0027\u0027) {\n                     i++;\n                     buf.append(c);\n                 } else {\n                     inLiteral \u003d !inLiteral;\n                 }\n             } else if (!inLiteral \u0026\u0026 (c \u003e\u003d \u0027A\u0027 \u0026\u0026 c \u003c\u003d \u0027Z\u0027 || c \u003e\u003d \u0027a\u0027 \u0026\u0026 c \u003c\u003d \u0027z\u0027)) {\n                 i--;\n                 break;\n             } else {\n                 buf.append(c);\n             }\n         }\n     }\n     indexRef[0] \u003d i;\n     return buf.toString();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[pattern-String(modifiers-final), indexRef-int[](modifiers-final)]",
            "newValue": "[pattern-String, indexRef-int[]]"
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Refactor DateTime formatting to use decoration pattern\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@687 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "2/12/05, 6:39 PM",
          "commitName": "5082337a4152e04ebd8077fd0b7fa28113a4d79e",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "2/12/05, 3:28 PM",
          "commitNameOld": "28108d2dd6ba602f2b3d328045e74a3d2bf2d0a9",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 0.13,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "private static String parseToken(String pattern, int[] indexRef) {\n    StringBuffer buf \u003d new StringBuffer();\n    int i \u003d indexRef[0];\n    int length \u003d pattern.length();\n    char c \u003d pattern.charAt(i);\n    if (c \u003e\u003d \u0027A\u0027 \u0026\u0026 c \u003c\u003d \u0027Z\u0027 || c \u003e\u003d \u0027a\u0027 \u0026\u0026 c \u003c\u003d \u0027z\u0027) {\n        buf.append(c);\n        while (i + 1 \u003c length) {\n            char peek \u003d pattern.charAt(i + 1);\n            if (peek \u003d\u003d c) {\n                buf.append(c);\n                i++;\n            } else {\n                break;\n            }\n        }\n    } else {\n        buf.append(\u0027\\\u0027\u0027);\n        boolean inLiteral \u003d false;\n        for (; i \u003c length; i++) {\n            c \u003d pattern.charAt(i);\n            if (c \u003d\u003d \u0027\\\u0027\u0027) {\n                if (i + 1 \u003c length \u0026\u0026 pattern.charAt(i + 1) \u003d\u003d \u0027\\\u0027\u0027) {\n                    i++;\n                    buf.append(c);\n                } else {\n                    inLiteral \u003d !inLiteral;\n                }\n            } else if (!inLiteral \u0026\u0026 (c \u003e\u003d \u0027A\u0027 \u0026\u0026 c \u003c\u003d \u0027Z\u0027 || c \u003e\u003d \u0027a\u0027 \u0026\u0026 c \u003c\u003d \u0027z\u0027)) {\n                i--;\n                break;\n            } else {\n                buf.append(c);\n            }\n        }\n    }\n    indexRef[0] \u003d i;\n    return buf.toString();\n}",
          "path": "JodaTime/src/java/org/joda/time/format/DateTimeFormat.java",
          "functionStartLine": 532,
          "functionName": "parseToken",
          "functionAnnotation": "",
          "functionDoc": "Parses an individual token.\n\n@param pattern the pattern string\n@param indexRef a single element array, where the input is the start\n location and the output is the location after parsing the token\n@return the parsed token\n",
          "diff": "@@ -1,39 +1,39 @@\n-private static String parseToken(final String pattern, final int[] indexRef) {\n+private static String parseToken(String pattern, int[] indexRef) {\n     StringBuffer buf \u003d new StringBuffer();\n     int i \u003d indexRef[0];\n     int length \u003d pattern.length();\n     char c \u003d pattern.charAt(i);\n     if (c \u003e\u003d \u0027A\u0027 \u0026\u0026 c \u003c\u003d \u0027Z\u0027 || c \u003e\u003d \u0027a\u0027 \u0026\u0026 c \u003c\u003d \u0027z\u0027) {\n         buf.append(c);\n         while (i + 1 \u003c length) {\n             char peek \u003d pattern.charAt(i + 1);\n             if (peek \u003d\u003d c) {\n                 buf.append(c);\n                 i++;\n             } else {\n                 break;\n             }\n         }\n     } else {\n         buf.append(\u0027\\\u0027\u0027);\n         boolean inLiteral \u003d false;\n         for (; i \u003c length; i++) {\n             c \u003d pattern.charAt(i);\n             if (c \u003d\u003d \u0027\\\u0027\u0027) {\n                 if (i + 1 \u003c length \u0026\u0026 pattern.charAt(i + 1) \u003d\u003d \u0027\\\u0027\u0027) {\n                     i++;\n                     buf.append(c);\n                 } else {\n                     inLiteral \u003d !inLiteral;\n                 }\n             } else if (!inLiteral \u0026\u0026 (c \u003e\u003d \u0027A\u0027 \u0026\u0026 c \u003c\u003d \u0027Z\u0027 || c \u003e\u003d \u0027a\u0027 \u0026\u0026 c \u003c\u003d \u0027z\u0027)) {\n                 i--;\n                 break;\n             } else {\n                 buf.append(c);\n             }\n         }\n     }\n     indexRef[0] \u003d i;\n     return buf.toString();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "Parses an individual token.\n\n@param pattern the pattern string\n@param indexRef a single element array, where the input is the start\n location and the output is the location after parsing the token\n@return the parsed token\n"
          }
        }
      ]
    },
    "0e07ac6b2cff63550d7df336355ca63cc05aa40b": {
      "type": "Ymultichange(Ymovefromfile,Yparametermetachange)",
      "commitMessage": "Move from Joda CVS\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@10 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "12/18/03, 6:07 PM",
      "commitName": "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "Move from Joda CVS\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@10 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "12/18/03, 6:07 PM",
          "commitName": "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "12/18/03, 2:04 PM",
          "commitNameOld": "1ba4f9861a0cfbc32c56efced3619874a43ec5dd",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 0.17,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private static String parseToken(final String pattern, final int[] indexRef) {\n    StringBuffer buf \u003d new StringBuffer();\n    int i \u003d indexRef[0];\n    int length \u003d pattern.length();\n    char c \u003d pattern.charAt(i);\n    if (c \u003e\u003d \u0027A\u0027 \u0026\u0026 c \u003c\u003d \u0027Z\u0027 || c \u003e\u003d \u0027a\u0027 \u0026\u0026 c \u003c\u003d \u0027z\u0027) {\n        buf.append(c);\n        while (i + 1 \u003c length) {\n            char peek \u003d pattern.charAt(i + 1);\n            if (peek \u003d\u003d c) {\n                buf.append(c);\n                i++;\n            } else {\n                break;\n            }\n        }\n    } else {\n        buf.append(\u0027\\\u0027\u0027);\n        boolean inLiteral \u003d false;\n        for (; i \u003c length; i++) {\n            c \u003d pattern.charAt(i);\n            if (c \u003d\u003d \u0027\\\u0027\u0027) {\n                if (i + 1 \u003c length \u0026\u0026 pattern.charAt(i + 1) \u003d\u003d \u0027\\\u0027\u0027) {\n                    i++;\n                    buf.append(c);\n                } else {\n                    inLiteral \u003d !inLiteral;\n                }\n            } else if (!inLiteral \u0026\u0026 (c \u003e\u003d \u0027A\u0027 \u0026\u0026 c \u003c\u003d \u0027Z\u0027 || c \u003e\u003d \u0027a\u0027 \u0026\u0026 c \u003c\u003d \u0027z\u0027)) {\n                i--;\n                break;\n            } else {\n                buf.append(c);\n            }\n        }\n    }\n    indexRef[0] \u003d i;\n    return buf.toString();\n}",
          "path": "JodaTime/src/java/org/joda/time/format/DateTimeFormat.java",
          "functionStartLine": 415,
          "functionName": "parseToken",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,39 +1,39 @@\n-private static String parseToken(String pattern, int[] indexRef) {\n+private static String parseToken(final String pattern, final int[] indexRef) {\n     StringBuffer buf \u003d new StringBuffer();\n     int i \u003d indexRef[0];\n     int length \u003d pattern.length();\n     char c \u003d pattern.charAt(i);\n     if (c \u003e\u003d \u0027A\u0027 \u0026\u0026 c \u003c\u003d \u0027Z\u0027 || c \u003e\u003d \u0027a\u0027 \u0026\u0026 c \u003c\u003d \u0027z\u0027) {\n         buf.append(c);\n         while (i + 1 \u003c length) {\n             char peek \u003d pattern.charAt(i + 1);\n             if (peek \u003d\u003d c) {\n                 buf.append(c);\n                 i++;\n             } else {\n                 break;\n             }\n         }\n     } else {\n         buf.append(\u0027\\\u0027\u0027);\n         boolean inLiteral \u003d false;\n         for (; i \u003c length; i++) {\n             c \u003d pattern.charAt(i);\n             if (c \u003d\u003d \u0027\\\u0027\u0027) {\n                 if (i + 1 \u003c length \u0026\u0026 pattern.charAt(i + 1) \u003d\u003d \u0027\\\u0027\u0027) {\n                     i++;\n                     buf.append(c);\n                 } else {\n                     inLiteral \u003d !inLiteral;\n                 }\n             } else if (!inLiteral \u0026\u0026 (c \u003e\u003d \u0027A\u0027 \u0026\u0026 c \u003c\u003d \u0027Z\u0027 || c \u003e\u003d \u0027a\u0027 \u0026\u0026 c \u003c\u003d \u0027z\u0027)) {\n                 i--;\n                 break;\n             } else {\n                 buf.append(c);\n             }\n         }\n     }\n     indexRef[0] \u003d i;\n     return buf.toString();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java",
            "newPath": "JodaTime/src/java/org/joda/time/format/DateTimeFormat.java",
            "oldMethodName": "parseToken",
            "newMethodName": "parseToken"
          }
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "Move from Joda CVS\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@10 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "12/18/03, 6:07 PM",
          "commitName": "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "12/18/03, 2:04 PM",
          "commitNameOld": "1ba4f9861a0cfbc32c56efced3619874a43ec5dd",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 0.17,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private static String parseToken(final String pattern, final int[] indexRef) {\n    StringBuffer buf \u003d new StringBuffer();\n    int i \u003d indexRef[0];\n    int length \u003d pattern.length();\n    char c \u003d pattern.charAt(i);\n    if (c \u003e\u003d \u0027A\u0027 \u0026\u0026 c \u003c\u003d \u0027Z\u0027 || c \u003e\u003d \u0027a\u0027 \u0026\u0026 c \u003c\u003d \u0027z\u0027) {\n        buf.append(c);\n        while (i + 1 \u003c length) {\n            char peek \u003d pattern.charAt(i + 1);\n            if (peek \u003d\u003d c) {\n                buf.append(c);\n                i++;\n            } else {\n                break;\n            }\n        }\n    } else {\n        buf.append(\u0027\\\u0027\u0027);\n        boolean inLiteral \u003d false;\n        for (; i \u003c length; i++) {\n            c \u003d pattern.charAt(i);\n            if (c \u003d\u003d \u0027\\\u0027\u0027) {\n                if (i + 1 \u003c length \u0026\u0026 pattern.charAt(i + 1) \u003d\u003d \u0027\\\u0027\u0027) {\n                    i++;\n                    buf.append(c);\n                } else {\n                    inLiteral \u003d !inLiteral;\n                }\n            } else if (!inLiteral \u0026\u0026 (c \u003e\u003d \u0027A\u0027 \u0026\u0026 c \u003c\u003d \u0027Z\u0027 || c \u003e\u003d \u0027a\u0027 \u0026\u0026 c \u003c\u003d \u0027z\u0027)) {\n                i--;\n                break;\n            } else {\n                buf.append(c);\n            }\n        }\n    }\n    indexRef[0] \u003d i;\n    return buf.toString();\n}",
          "path": "JodaTime/src/java/org/joda/time/format/DateTimeFormat.java",
          "functionStartLine": 415,
          "functionName": "parseToken",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,39 +1,39 @@\n-private static String parseToken(String pattern, int[] indexRef) {\n+private static String parseToken(final String pattern, final int[] indexRef) {\n     StringBuffer buf \u003d new StringBuffer();\n     int i \u003d indexRef[0];\n     int length \u003d pattern.length();\n     char c \u003d pattern.charAt(i);\n     if (c \u003e\u003d \u0027A\u0027 \u0026\u0026 c \u003c\u003d \u0027Z\u0027 || c \u003e\u003d \u0027a\u0027 \u0026\u0026 c \u003c\u003d \u0027z\u0027) {\n         buf.append(c);\n         while (i + 1 \u003c length) {\n             char peek \u003d pattern.charAt(i + 1);\n             if (peek \u003d\u003d c) {\n                 buf.append(c);\n                 i++;\n             } else {\n                 break;\n             }\n         }\n     } else {\n         buf.append(\u0027\\\u0027\u0027);\n         boolean inLiteral \u003d false;\n         for (; i \u003c length; i++) {\n             c \u003d pattern.charAt(i);\n             if (c \u003d\u003d \u0027\\\u0027\u0027) {\n                 if (i + 1 \u003c length \u0026\u0026 pattern.charAt(i + 1) \u003d\u003d \u0027\\\u0027\u0027) {\n                     i++;\n                     buf.append(c);\n                 } else {\n                     inLiteral \u003d !inLiteral;\n                 }\n             } else if (!inLiteral \u0026\u0026 (c \u003e\u003d \u0027A\u0027 \u0026\u0026 c \u003c\u003d \u0027Z\u0027 || c \u003e\u003d \u0027a\u0027 \u0026\u0026 c \u003c\u003d \u0027z\u0027)) {\n                 i--;\n                 break;\n             } else {\n                 buf.append(c);\n             }\n         }\n     }\n     indexRef[0] \u003d i;\n     return buf.toString();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[pattern-String, indexRef-int[]]",
            "newValue": "[pattern-String(modifiers-final), indexRef-int[](modifiers-final)]"
          }
        }
      ]
    },
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb": {
      "type": "Yintroduced",
      "commitMessage": "Move version 0.9 to joda-time repository\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@4 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "12/16/03, 1:39 PM",
      "commitName": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
      "commitAuthor": "Stephen Colebourne",
      "diff": "@@ -0,0 +1,39 @@\n+private static String parseToken(String pattern, int[] indexRef) {\n+    StringBuffer buf \u003d new StringBuffer();\n+    int i \u003d indexRef[0];\n+    int length \u003d pattern.length();\n+    char c \u003d pattern.charAt(i);\n+    if (c \u003e\u003d \u0027A\u0027 \u0026\u0026 c \u003c\u003d \u0027Z\u0027 || c \u003e\u003d \u0027a\u0027 \u0026\u0026 c \u003c\u003d \u0027z\u0027) {\n+        buf.append(c);\n+        while (i + 1 \u003c length) {\n+            char peek \u003d pattern.charAt(i + 1);\n+            if (peek \u003d\u003d c) {\n+                buf.append(c);\n+                i++;\n+            } else {\n+                break;\n+            }\n+        }\n+    } else {\n+        buf.append(\u0027\\\u0027\u0027);\n+        boolean inLiteral \u003d false;\n+        for (; i \u003c length; i++) {\n+            c \u003d pattern.charAt(i);\n+            if (c \u003d\u003d \u0027\\\u0027\u0027) {\n+                if (i + 1 \u003c length \u0026\u0026 pattern.charAt(i + 1) \u003d\u003d \u0027\\\u0027\u0027) {\n+                    i++;\n+                    buf.append(c);\n+                } else {\n+                    inLiteral \u003d !inLiteral;\n+                }\n+            } else if (!inLiteral \u0026\u0026 (c \u003e\u003d \u0027A\u0027 \u0026\u0026 c \u003c\u003d \u0027Z\u0027 || c \u003e\u003d \u0027a\u0027 \u0026\u0026 c \u003c\u003d \u0027z\u0027)) {\n+                i--;\n+                break;\n+            } else {\n+                buf.append(c);\n+            }\n+        }\n+    }\n+    indexRef[0] \u003d i;\n+    return buf.toString();\n+}\n\\ No newline at end of file\n",
      "actualSource": "private static String parseToken(String pattern, int[] indexRef) {\n    StringBuffer buf \u003d new StringBuffer();\n    int i \u003d indexRef[0];\n    int length \u003d pattern.length();\n    char c \u003d pattern.charAt(i);\n    if (c \u003e\u003d \u0027A\u0027 \u0026\u0026 c \u003c\u003d \u0027Z\u0027 || c \u003e\u003d \u0027a\u0027 \u0026\u0026 c \u003c\u003d \u0027z\u0027) {\n        buf.append(c);\n        while (i + 1 \u003c length) {\n            char peek \u003d pattern.charAt(i + 1);\n            if (peek \u003d\u003d c) {\n                buf.append(c);\n                i++;\n            } else {\n                break;\n            }\n        }\n    } else {\n        buf.append(\u0027\\\u0027\u0027);\n        boolean inLiteral \u003d false;\n        for (; i \u003c length; i++) {\n            c \u003d pattern.charAt(i);\n            if (c \u003d\u003d \u0027\\\u0027\u0027) {\n                if (i + 1 \u003c length \u0026\u0026 pattern.charAt(i + 1) \u003d\u003d \u0027\\\u0027\u0027) {\n                    i++;\n                    buf.append(c);\n                } else {\n                    inLiteral \u003d !inLiteral;\n                }\n            } else if (!inLiteral \u0026\u0026 (c \u003e\u003d \u0027A\u0027 \u0026\u0026 c \u003c\u003d \u0027Z\u0027 || c \u003e\u003d \u0027a\u0027 \u0026\u0026 c \u003c\u003d \u0027z\u0027)) {\n                i--;\n                break;\n            } else {\n                buf.append(c);\n            }\n        }\n    }\n    indexRef[0] \u003d i;\n    return buf.toString();\n}",
      "path": "JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java",
      "functionStartLine": 92,
      "functionName": "parseToken",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}