{
  "origin": "codeshovel",
  "repositoryName": "Time-7b",
  "repositoryPath": "/tmp/Time-7b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LimitChronology.java",
  "functionName": "getInstance",
  "functionId": "getInstance___base-Chronology__lowerLimit-ReadableDateTime__upperLimit-ReadableDateTime",
  "sourceFilePath": "src/main/java/org/joda/time/chrono/LimitChronology.java",
  "functionAnnotation": "",
  "functionDoc": "Wraps another chronology, with datetime limits. When withUTC or\nwithZone is called, the returned LimitChronology instance has\nthe same limits, except they are time zone adjusted.\n\n@param base base chronology to wrap\n@param lowerLimit inclusive lower limit, or null if none\n@param upperLimit exclusive upper limit, or null if none\n@throws IllegalArgumentException if chronology is null or limits are invalid\n",
  "functionStartLine": 64,
  "functionEndLine": 82,
  "numCommitsSeen": 22,
  "timeTaken": 3617,
  "changeHistory": [
    "df4a82f4fb46cc2248280c462e18f08d55a3d112",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1",
    "a26563f0cd1fbdd5587a0f9d3c0c77864553d737",
    "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7",
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb"
  ],
  "changeHistoryShort": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": "Yfilerename",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": "Yfilerename",
    "a26563f0cd1fbdd5587a0f9d3c0c77864553d737": "Ydocchange",
    "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7": "Ymultichange(Ymovefromfile,Yreturntypechange,Ymodifierchange,Ybodychange,Ydocchange,Yparameterchange)",
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb": "Yintroduced"
  },
  "changeHistoryDetails": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": {
      "type": "Yfilerename",
      "commitMessage": "Remove JodaTime folder moving files to top level\n",
      "commitDate": "5/16/11, 10:02 AM",
      "commitName": "df4a82f4fb46cc2248280c462e18f08d55a3d112",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "5/16/11, 9:58 AM",
      "commitNameOld": "72b22654962284bac59c2777131b42a2d1f53228",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static LimitChronology getInstance(Chronology base, ReadableDateTime lowerLimit, ReadableDateTime upperLimit) {\n    if (base \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Must supply a chronology\");\n    }\n    lowerLimit \u003d lowerLimit \u003d\u003d null ? null : lowerLimit.toDateTime();\n    upperLimit \u003d upperLimit \u003d\u003d null ? null : upperLimit.toDateTime();\n    if (lowerLimit !\u003d null \u0026\u0026 upperLimit !\u003d null) {\n        if (!lowerLimit.isBefore(upperLimit)) {\n            throw new IllegalArgumentException(\"The lower limit must be come before than the upper limit\");\n        }\n    }\n    return new LimitChronology(base, (DateTime) lowerLimit, (DateTime) upperLimit);\n}",
      "path": "src/main/java/org/joda/time/chrono/LimitChronology.java",
      "functionStartLine": 64,
      "functionName": "getInstance",
      "functionAnnotation": "",
      "functionDoc": "Wraps another chronology, with datetime limits. When withUTC or\nwithZone is called, the returned LimitChronology instance has\nthe same limits, except they are time zone adjusted.\n\n@param base base chronology to wrap\n@param lowerLimit inclusive lower limit, or null if none\n@param upperLimit exclusive upper limit, or null if none\n@throws IllegalArgumentException if chronology is null or limits are invalid\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/main/java/org/joda/time/chrono/LimitChronology.java",
        "newPath": "src/main/java/org/joda/time/chrono/LimitChronology.java"
      }
    },
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": {
      "type": "Yfilerename",
      "commitMessage": "Convert to maven 2\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1540 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/8/10, 5:17 PM",
      "commitName": "53feb3fa56af7260e607844524b7e5a9be49ecc1",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/8/10, 5:02 PM",
      "commitNameOld": "7fa2ceaf5d95d050095432aa646ea803aa35e122",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static LimitChronology getInstance(Chronology base, ReadableDateTime lowerLimit, ReadableDateTime upperLimit) {\n    if (base \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Must supply a chronology\");\n    }\n    lowerLimit \u003d lowerLimit \u003d\u003d null ? null : lowerLimit.toDateTime();\n    upperLimit \u003d upperLimit \u003d\u003d null ? null : upperLimit.toDateTime();\n    if (lowerLimit !\u003d null \u0026\u0026 upperLimit !\u003d null) {\n        if (!lowerLimit.isBefore(upperLimit)) {\n            throw new IllegalArgumentException(\"The lower limit must be come before than the upper limit\");\n        }\n    }\n    return new LimitChronology(base, (DateTime) lowerLimit, (DateTime) upperLimit);\n}",
      "path": "JodaTime/src/main/java/org/joda/time/chrono/LimitChronology.java",
      "functionStartLine": 64,
      "functionName": "getInstance",
      "functionAnnotation": "",
      "functionDoc": "Wraps another chronology, with datetime limits. When withUTC or\nwithZone is called, the returned LimitChronology instance has\nthe same limits, except they are time zone adjusted.\n\n@param base base chronology to wrap\n@param lowerLimit inclusive lower limit, or null if none\n@param upperLimit exclusive upper limit, or null if none\n@throws IllegalArgumentException if chronology is null or limits are invalid\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/java/org/joda/time/chrono/LimitChronology.java",
        "newPath": "JodaTime/src/main/java/org/joda/time/chrono/LimitChronology.java"
      }
    },
    "a26563f0cd1fbdd5587a0f9d3c0c77864553d737": {
      "type": "Ydocchange",
      "commitMessage": "Rename getDateTimeZone methods to getZone etc\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@177 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "4/14/04, 4:43 PM",
      "commitName": "a26563f0cd1fbdd5587a0f9d3c0c77864553d737",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "4/12/04, 10:45 AM",
      "commitNameOld": "d73d392cb525bf58e73a3c14856b3c9ed8ab4e60",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 2.25,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "public static LimitChronology getInstance(Chronology base, ReadableDateTime lowerLimit, ReadableDateTime upperLimit) {\n    if (base \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Must supply a chronology\");\n    }\n    lowerLimit \u003d lowerLimit \u003d\u003d null ? null : lowerLimit.toDateTime();\n    upperLimit \u003d upperLimit \u003d\u003d null ? null : upperLimit.toDateTime();\n    if (lowerLimit !\u003d null \u0026\u0026 upperLimit !\u003d null) {\n        if (!lowerLimit.isBefore(upperLimit)) {\n            throw new IllegalArgumentException(\"The lower limit must be come before than the upper limit\");\n        }\n    }\n    return new LimitChronology(base, (DateTime) lowerLimit, (DateTime) upperLimit);\n}",
      "path": "JodaTime/src/java/org/joda/time/chrono/LimitChronology.java",
      "functionStartLine": 101,
      "functionName": "getInstance",
      "functionAnnotation": "",
      "functionDoc": "Wraps another chronology, with datetime limits. When withUTC or\nwithZone is called, the returned LimitChronology instance has\nthe same limits, except they are time zone adjusted.\n\n@param base base chronology to wrap\n@param lowerLimit inclusive lower limit, or null if none\n@param upperLimit exclusive upper limit, or null if none\n@throws IllegalArgumentException if chronology is null or limits are invalid\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Wraps another chronology, with datetime limits. When withUTC or\nwithDateTimeZone is called, the returned LimitChronology instance has\nthe same limits, except they are time zone adjusted.\n\n@param base base chronology to wrap\n@param lowerLimit inclusive lower limit, or null if none\n@param upperLimit exclusive upper limit, or null if none\n@throws IllegalArgumentException if chronology is null or limits are invalid\n",
        "newValue": "Wraps another chronology, with datetime limits. When withUTC or\nwithZone is called, the returned LimitChronology instance has\nthe same limits, except they are time zone adjusted.\n\n@param base base chronology to wrap\n@param lowerLimit inclusive lower limit, or null if none\n@param upperLimit exclusive upper limit, or null if none\n@throws IllegalArgumentException if chronology is null or limits are invalid\n"
      }
    },
    "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7": {
      "type": "Ymultichange(Ymovefromfile,Yreturntypechange,Ymodifierchange,Ybodychange,Ydocchange,Yparameterchange)",
      "commitMessage": "Re-organized chronology package and created new field package.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@125 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "1/27/04, 11:12 PM",
      "commitName": "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7",
      "commitAuthor": "Brian S O\u0027Neill",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "Re-organized chronology package and created new field package.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@125 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "1/27/04, 11:12 PM",
          "commitName": "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7",
          "commitAuthor": "Brian S O\u0027Neill",
          "commitDateOld": "1/11/04, 9:39 AM",
          "commitNameOld": "6f5522f58c1d2abdec37b5d22e5981716d4ec731",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 16.56,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static LimitChronology getInstance(Chronology base, ReadableDateTime lowerLimit, ReadableDateTime upperLimit) {\n    if (base \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Must supply a chronology\");\n    }\n    lowerLimit \u003d lowerLimit \u003d\u003d null ? null : lowerLimit.toDateTime();\n    upperLimit \u003d upperLimit \u003d\u003d null ? null : upperLimit.toDateTime();\n    if (lowerLimit !\u003d null \u0026\u0026 upperLimit !\u003d null) {\n        if (!lowerLimit.isBefore(upperLimit)) {\n            throw new IllegalArgumentException(\"The lower limit must be come before than the upper limit\");\n        }\n    }\n    return new LimitChronology(base, (DateTime) lowerLimit, (DateTime) upperLimit);\n}",
          "path": "JodaTime/src/java/org/joda/time/chrono/LimitChronology.java",
          "functionStartLine": 104,
          "functionName": "getInstance",
          "functionAnnotation": "",
          "functionDoc": "Wraps another chronology, with datetime limits. When withUTC or\nwithDateTimeZone is called, the returned LimitChronology instance has\nthe same limits, except they are time zone adjusted.\n\n@param base base chronology to wrap\n@param lowerLimit inclusive lower limit, or null if none\n@param upperLimit exclusive upper limit, or null if none\n@throws IllegalArgumentException if chronology is null or limits are invalid\n",
          "diff": "@@ -1,21 +1,13 @@\n-public static synchronized GJChronology getInstance(DateTimeZone zone, long gregorianCutover, boolean centuryISO, int minDaysInFirstWeek) {\n-    if (zone \u003d\u003d null) {\n-        zone \u003d DateTimeZone.getDefault();\n+public static LimitChronology getInstance(Chronology base, ReadableDateTime lowerLimit, ReadableDateTime upperLimit) {\n+    if (base \u003d\u003d null) {\n+        throw new IllegalArgumentException(\"Must supply a chronology\");\n     }\n-    if (minDaysInFirstWeek \u003c 1 || minDaysInFirstWeek \u003e 7) {\n-        throw new IllegalArgumentException(\"Invalid min days in first week: \" + minDaysInFirstWeek);\n-    }\n-    Factory factory;\n-    getFactory: {\n-        SoftReference ref \u003d (SoftReference) cZonesToFactories.get(zone);\n-        if (ref !\u003d null) {\n-            factory \u003d (Factory) ref.get();\n-            if (factory !\u003d null) {\n-                break getFactory;\n-            }\n+    lowerLimit \u003d lowerLimit \u003d\u003d null ? null : lowerLimit.toDateTime();\n+    upperLimit \u003d upperLimit \u003d\u003d null ? null : upperLimit.toDateTime();\n+    if (lowerLimit !\u003d null \u0026\u0026 upperLimit !\u003d null) {\n+        if (!lowerLimit.isBefore(upperLimit)) {\n+            throw new IllegalArgumentException(\"The lower limit must be come before than the upper limit\");\n         }\n-        factory \u003d new Factory(zone);\n-        cZonesToFactories.put(zone, new SoftReference(factory));\n     }\n-    return factory.getInstance(gregorianCutover, centuryISO, minDaysInFirstWeek);\n+    return new LimitChronology(base, (DateTime) lowerLimit, (DateTime) upperLimit);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java",
            "newPath": "JodaTime/src/java/org/joda/time/chrono/LimitChronology.java",
            "oldMethodName": "getInstance",
            "newMethodName": "getInstance"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "Re-organized chronology package and created new field package.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@125 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "1/27/04, 11:12 PM",
          "commitName": "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7",
          "commitAuthor": "Brian S O\u0027Neill",
          "commitDateOld": "1/11/04, 9:39 AM",
          "commitNameOld": "6f5522f58c1d2abdec37b5d22e5981716d4ec731",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 16.56,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static LimitChronology getInstance(Chronology base, ReadableDateTime lowerLimit, ReadableDateTime upperLimit) {\n    if (base \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Must supply a chronology\");\n    }\n    lowerLimit \u003d lowerLimit \u003d\u003d null ? null : lowerLimit.toDateTime();\n    upperLimit \u003d upperLimit \u003d\u003d null ? null : upperLimit.toDateTime();\n    if (lowerLimit !\u003d null \u0026\u0026 upperLimit !\u003d null) {\n        if (!lowerLimit.isBefore(upperLimit)) {\n            throw new IllegalArgumentException(\"The lower limit must be come before than the upper limit\");\n        }\n    }\n    return new LimitChronology(base, (DateTime) lowerLimit, (DateTime) upperLimit);\n}",
          "path": "JodaTime/src/java/org/joda/time/chrono/LimitChronology.java",
          "functionStartLine": 104,
          "functionName": "getInstance",
          "functionAnnotation": "",
          "functionDoc": "Wraps another chronology, with datetime limits. When withUTC or\nwithDateTimeZone is called, the returned LimitChronology instance has\nthe same limits, except they are time zone adjusted.\n\n@param base base chronology to wrap\n@param lowerLimit inclusive lower limit, or null if none\n@param upperLimit exclusive upper limit, or null if none\n@throws IllegalArgumentException if chronology is null or limits are invalid\n",
          "diff": "@@ -1,21 +1,13 @@\n-public static synchronized GJChronology getInstance(DateTimeZone zone, long gregorianCutover, boolean centuryISO, int minDaysInFirstWeek) {\n-    if (zone \u003d\u003d null) {\n-        zone \u003d DateTimeZone.getDefault();\n+public static LimitChronology getInstance(Chronology base, ReadableDateTime lowerLimit, ReadableDateTime upperLimit) {\n+    if (base \u003d\u003d null) {\n+        throw new IllegalArgumentException(\"Must supply a chronology\");\n     }\n-    if (minDaysInFirstWeek \u003c 1 || minDaysInFirstWeek \u003e 7) {\n-        throw new IllegalArgumentException(\"Invalid min days in first week: \" + minDaysInFirstWeek);\n-    }\n-    Factory factory;\n-    getFactory: {\n-        SoftReference ref \u003d (SoftReference) cZonesToFactories.get(zone);\n-        if (ref !\u003d null) {\n-            factory \u003d (Factory) ref.get();\n-            if (factory !\u003d null) {\n-                break getFactory;\n-            }\n+    lowerLimit \u003d lowerLimit \u003d\u003d null ? null : lowerLimit.toDateTime();\n+    upperLimit \u003d upperLimit \u003d\u003d null ? null : upperLimit.toDateTime();\n+    if (lowerLimit !\u003d null \u0026\u0026 upperLimit !\u003d null) {\n+        if (!lowerLimit.isBefore(upperLimit)) {\n+            throw new IllegalArgumentException(\"The lower limit must be come before than the upper limit\");\n         }\n-        factory \u003d new Factory(zone);\n-        cZonesToFactories.put(zone, new SoftReference(factory));\n     }\n-    return factory.getInstance(gregorianCutover, centuryISO, minDaysInFirstWeek);\n+    return new LimitChronology(base, (DateTime) lowerLimit, (DateTime) upperLimit);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "GJChronology",
            "newValue": "LimitChronology"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Re-organized chronology package and created new field package.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@125 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "1/27/04, 11:12 PM",
          "commitName": "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7",
          "commitAuthor": "Brian S O\u0027Neill",
          "commitDateOld": "1/11/04, 9:39 AM",
          "commitNameOld": "6f5522f58c1d2abdec37b5d22e5981716d4ec731",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 16.56,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static LimitChronology getInstance(Chronology base, ReadableDateTime lowerLimit, ReadableDateTime upperLimit) {\n    if (base \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Must supply a chronology\");\n    }\n    lowerLimit \u003d lowerLimit \u003d\u003d null ? null : lowerLimit.toDateTime();\n    upperLimit \u003d upperLimit \u003d\u003d null ? null : upperLimit.toDateTime();\n    if (lowerLimit !\u003d null \u0026\u0026 upperLimit !\u003d null) {\n        if (!lowerLimit.isBefore(upperLimit)) {\n            throw new IllegalArgumentException(\"The lower limit must be come before than the upper limit\");\n        }\n    }\n    return new LimitChronology(base, (DateTime) lowerLimit, (DateTime) upperLimit);\n}",
          "path": "JodaTime/src/java/org/joda/time/chrono/LimitChronology.java",
          "functionStartLine": 104,
          "functionName": "getInstance",
          "functionAnnotation": "",
          "functionDoc": "Wraps another chronology, with datetime limits. When withUTC or\nwithDateTimeZone is called, the returned LimitChronology instance has\nthe same limits, except they are time zone adjusted.\n\n@param base base chronology to wrap\n@param lowerLimit inclusive lower limit, or null if none\n@param upperLimit exclusive upper limit, or null if none\n@throws IllegalArgumentException if chronology is null or limits are invalid\n",
          "diff": "@@ -1,21 +1,13 @@\n-public static synchronized GJChronology getInstance(DateTimeZone zone, long gregorianCutover, boolean centuryISO, int minDaysInFirstWeek) {\n-    if (zone \u003d\u003d null) {\n-        zone \u003d DateTimeZone.getDefault();\n+public static LimitChronology getInstance(Chronology base, ReadableDateTime lowerLimit, ReadableDateTime upperLimit) {\n+    if (base \u003d\u003d null) {\n+        throw new IllegalArgumentException(\"Must supply a chronology\");\n     }\n-    if (minDaysInFirstWeek \u003c 1 || minDaysInFirstWeek \u003e 7) {\n-        throw new IllegalArgumentException(\"Invalid min days in first week: \" + minDaysInFirstWeek);\n-    }\n-    Factory factory;\n-    getFactory: {\n-        SoftReference ref \u003d (SoftReference) cZonesToFactories.get(zone);\n-        if (ref !\u003d null) {\n-            factory \u003d (Factory) ref.get();\n-            if (factory !\u003d null) {\n-                break getFactory;\n-            }\n+    lowerLimit \u003d lowerLimit \u003d\u003d null ? null : lowerLimit.toDateTime();\n+    upperLimit \u003d upperLimit \u003d\u003d null ? null : upperLimit.toDateTime();\n+    if (lowerLimit !\u003d null \u0026\u0026 upperLimit !\u003d null) {\n+        if (!lowerLimit.isBefore(upperLimit)) {\n+            throw new IllegalArgumentException(\"The lower limit must be come before than the upper limit\");\n         }\n-        factory \u003d new Factory(zone);\n-        cZonesToFactories.put(zone, new SoftReference(factory));\n     }\n-    return factory.getInstance(gregorianCutover, centuryISO, minDaysInFirstWeek);\n+    return new LimitChronology(base, (DateTime) lowerLimit, (DateTime) upperLimit);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[public, static, synchronized]",
            "newValue": "[public, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Re-organized chronology package and created new field package.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@125 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "1/27/04, 11:12 PM",
          "commitName": "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7",
          "commitAuthor": "Brian S O\u0027Neill",
          "commitDateOld": "1/11/04, 9:39 AM",
          "commitNameOld": "6f5522f58c1d2abdec37b5d22e5981716d4ec731",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 16.56,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static LimitChronology getInstance(Chronology base, ReadableDateTime lowerLimit, ReadableDateTime upperLimit) {\n    if (base \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Must supply a chronology\");\n    }\n    lowerLimit \u003d lowerLimit \u003d\u003d null ? null : lowerLimit.toDateTime();\n    upperLimit \u003d upperLimit \u003d\u003d null ? null : upperLimit.toDateTime();\n    if (lowerLimit !\u003d null \u0026\u0026 upperLimit !\u003d null) {\n        if (!lowerLimit.isBefore(upperLimit)) {\n            throw new IllegalArgumentException(\"The lower limit must be come before than the upper limit\");\n        }\n    }\n    return new LimitChronology(base, (DateTime) lowerLimit, (DateTime) upperLimit);\n}",
          "path": "JodaTime/src/java/org/joda/time/chrono/LimitChronology.java",
          "functionStartLine": 104,
          "functionName": "getInstance",
          "functionAnnotation": "",
          "functionDoc": "Wraps another chronology, with datetime limits. When withUTC or\nwithDateTimeZone is called, the returned LimitChronology instance has\nthe same limits, except they are time zone adjusted.\n\n@param base base chronology to wrap\n@param lowerLimit inclusive lower limit, or null if none\n@param upperLimit exclusive upper limit, or null if none\n@throws IllegalArgumentException if chronology is null or limits are invalid\n",
          "diff": "@@ -1,21 +1,13 @@\n-public static synchronized GJChronology getInstance(DateTimeZone zone, long gregorianCutover, boolean centuryISO, int minDaysInFirstWeek) {\n-    if (zone \u003d\u003d null) {\n-        zone \u003d DateTimeZone.getDefault();\n+public static LimitChronology getInstance(Chronology base, ReadableDateTime lowerLimit, ReadableDateTime upperLimit) {\n+    if (base \u003d\u003d null) {\n+        throw new IllegalArgumentException(\"Must supply a chronology\");\n     }\n-    if (minDaysInFirstWeek \u003c 1 || minDaysInFirstWeek \u003e 7) {\n-        throw new IllegalArgumentException(\"Invalid min days in first week: \" + minDaysInFirstWeek);\n-    }\n-    Factory factory;\n-    getFactory: {\n-        SoftReference ref \u003d (SoftReference) cZonesToFactories.get(zone);\n-        if (ref !\u003d null) {\n-            factory \u003d (Factory) ref.get();\n-            if (factory !\u003d null) {\n-                break getFactory;\n-            }\n+    lowerLimit \u003d lowerLimit \u003d\u003d null ? null : lowerLimit.toDateTime();\n+    upperLimit \u003d upperLimit \u003d\u003d null ? null : upperLimit.toDateTime();\n+    if (lowerLimit !\u003d null \u0026\u0026 upperLimit !\u003d null) {\n+        if (!lowerLimit.isBefore(upperLimit)) {\n+            throw new IllegalArgumentException(\"The lower limit must be come before than the upper limit\");\n         }\n-        factory \u003d new Factory(zone);\n-        cZonesToFactories.put(zone, new SoftReference(factory));\n     }\n-    return factory.getInstance(gregorianCutover, centuryISO, minDaysInFirstWeek);\n+    return new LimitChronology(base, (DateTime) lowerLimit, (DateTime) upperLimit);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Re-organized chronology package and created new field package.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@125 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "1/27/04, 11:12 PM",
          "commitName": "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7",
          "commitAuthor": "Brian S O\u0027Neill",
          "commitDateOld": "1/11/04, 9:39 AM",
          "commitNameOld": "6f5522f58c1d2abdec37b5d22e5981716d4ec731",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 16.56,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static LimitChronology getInstance(Chronology base, ReadableDateTime lowerLimit, ReadableDateTime upperLimit) {\n    if (base \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Must supply a chronology\");\n    }\n    lowerLimit \u003d lowerLimit \u003d\u003d null ? null : lowerLimit.toDateTime();\n    upperLimit \u003d upperLimit \u003d\u003d null ? null : upperLimit.toDateTime();\n    if (lowerLimit !\u003d null \u0026\u0026 upperLimit !\u003d null) {\n        if (!lowerLimit.isBefore(upperLimit)) {\n            throw new IllegalArgumentException(\"The lower limit must be come before than the upper limit\");\n        }\n    }\n    return new LimitChronology(base, (DateTime) lowerLimit, (DateTime) upperLimit);\n}",
          "path": "JodaTime/src/java/org/joda/time/chrono/LimitChronology.java",
          "functionStartLine": 104,
          "functionName": "getInstance",
          "functionAnnotation": "",
          "functionDoc": "Wraps another chronology, with datetime limits. When withUTC or\nwithDateTimeZone is called, the returned LimitChronology instance has\nthe same limits, except they are time zone adjusted.\n\n@param base base chronology to wrap\n@param lowerLimit inclusive lower limit, or null if none\n@param upperLimit exclusive upper limit, or null if none\n@throws IllegalArgumentException if chronology is null or limits are invalid\n",
          "diff": "@@ -1,21 +1,13 @@\n-public static synchronized GJChronology getInstance(DateTimeZone zone, long gregorianCutover, boolean centuryISO, int minDaysInFirstWeek) {\n-    if (zone \u003d\u003d null) {\n-        zone \u003d DateTimeZone.getDefault();\n+public static LimitChronology getInstance(Chronology base, ReadableDateTime lowerLimit, ReadableDateTime upperLimit) {\n+    if (base \u003d\u003d null) {\n+        throw new IllegalArgumentException(\"Must supply a chronology\");\n     }\n-    if (minDaysInFirstWeek \u003c 1 || minDaysInFirstWeek \u003e 7) {\n-        throw new IllegalArgumentException(\"Invalid min days in first week: \" + minDaysInFirstWeek);\n-    }\n-    Factory factory;\n-    getFactory: {\n-        SoftReference ref \u003d (SoftReference) cZonesToFactories.get(zone);\n-        if (ref !\u003d null) {\n-            factory \u003d (Factory) ref.get();\n-            if (factory !\u003d null) {\n-                break getFactory;\n-            }\n+    lowerLimit \u003d lowerLimit \u003d\u003d null ? null : lowerLimit.toDateTime();\n+    upperLimit \u003d upperLimit \u003d\u003d null ? null : upperLimit.toDateTime();\n+    if (lowerLimit !\u003d null \u0026\u0026 upperLimit !\u003d null) {\n+        if (!lowerLimit.isBefore(upperLimit)) {\n+            throw new IllegalArgumentException(\"The lower limit must be come before than the upper limit\");\n         }\n-        factory \u003d new Factory(zone);\n-        cZonesToFactories.put(zone, new SoftReference(factory));\n     }\n-    return factory.getInstance(gregorianCutover, centuryISO, minDaysInFirstWeek);\n+    return new LimitChronology(base, (DateTime) lowerLimit, (DateTime) upperLimit);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Factory method allowing the Gregorian cutover point and year zero\nhandling to be set.  If the cutover is Long.MIN_VALUE, a proleptic\nGregorian calendar is returned. If the cutover is Long.MAX_VALUE, a\nproleptic Julian calendar is returned.\n\n@param zone the time zone to use, null is default\n@param gregorianCutover the cutover as milliseconds from 1970-01-01T00:00:00Z\n@param centuryISO when true, century related fields follow ISO rules\n@param minDaysInFirstWeek minimum number of days in first week of the year; ISO is 4\n",
            "newValue": "Wraps another chronology, with datetime limits. When withUTC or\nwithDateTimeZone is called, the returned LimitChronology instance has\nthe same limits, except they are time zone adjusted.\n\n@param base base chronology to wrap\n@param lowerLimit inclusive lower limit, or null if none\n@param upperLimit exclusive upper limit, or null if none\n@throws IllegalArgumentException if chronology is null or limits are invalid\n"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "Re-organized chronology package and created new field package.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@125 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "1/27/04, 11:12 PM",
          "commitName": "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7",
          "commitAuthor": "Brian S O\u0027Neill",
          "commitDateOld": "1/11/04, 9:39 AM",
          "commitNameOld": "6f5522f58c1d2abdec37b5d22e5981716d4ec731",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 16.56,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static LimitChronology getInstance(Chronology base, ReadableDateTime lowerLimit, ReadableDateTime upperLimit) {\n    if (base \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Must supply a chronology\");\n    }\n    lowerLimit \u003d lowerLimit \u003d\u003d null ? null : lowerLimit.toDateTime();\n    upperLimit \u003d upperLimit \u003d\u003d null ? null : upperLimit.toDateTime();\n    if (lowerLimit !\u003d null \u0026\u0026 upperLimit !\u003d null) {\n        if (!lowerLimit.isBefore(upperLimit)) {\n            throw new IllegalArgumentException(\"The lower limit must be come before than the upper limit\");\n        }\n    }\n    return new LimitChronology(base, (DateTime) lowerLimit, (DateTime) upperLimit);\n}",
          "path": "JodaTime/src/java/org/joda/time/chrono/LimitChronology.java",
          "functionStartLine": 104,
          "functionName": "getInstance",
          "functionAnnotation": "",
          "functionDoc": "Wraps another chronology, with datetime limits. When withUTC or\nwithDateTimeZone is called, the returned LimitChronology instance has\nthe same limits, except they are time zone adjusted.\n\n@param base base chronology to wrap\n@param lowerLimit inclusive lower limit, or null if none\n@param upperLimit exclusive upper limit, or null if none\n@throws IllegalArgumentException if chronology is null or limits are invalid\n",
          "diff": "@@ -1,21 +1,13 @@\n-public static synchronized GJChronology getInstance(DateTimeZone zone, long gregorianCutover, boolean centuryISO, int minDaysInFirstWeek) {\n-    if (zone \u003d\u003d null) {\n-        zone \u003d DateTimeZone.getDefault();\n+public static LimitChronology getInstance(Chronology base, ReadableDateTime lowerLimit, ReadableDateTime upperLimit) {\n+    if (base \u003d\u003d null) {\n+        throw new IllegalArgumentException(\"Must supply a chronology\");\n     }\n-    if (minDaysInFirstWeek \u003c 1 || minDaysInFirstWeek \u003e 7) {\n-        throw new IllegalArgumentException(\"Invalid min days in first week: \" + minDaysInFirstWeek);\n-    }\n-    Factory factory;\n-    getFactory: {\n-        SoftReference ref \u003d (SoftReference) cZonesToFactories.get(zone);\n-        if (ref !\u003d null) {\n-            factory \u003d (Factory) ref.get();\n-            if (factory !\u003d null) {\n-                break getFactory;\n-            }\n+    lowerLimit \u003d lowerLimit \u003d\u003d null ? null : lowerLimit.toDateTime();\n+    upperLimit \u003d upperLimit \u003d\u003d null ? null : upperLimit.toDateTime();\n+    if (lowerLimit !\u003d null \u0026\u0026 upperLimit !\u003d null) {\n+        if (!lowerLimit.isBefore(upperLimit)) {\n+            throw new IllegalArgumentException(\"The lower limit must be come before than the upper limit\");\n         }\n-        factory \u003d new Factory(zone);\n-        cZonesToFactories.put(zone, new SoftReference(factory));\n     }\n-    return factory.getInstance(gregorianCutover, centuryISO, minDaysInFirstWeek);\n+    return new LimitChronology(base, (DateTime) lowerLimit, (DateTime) upperLimit);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[zone-DateTimeZone, gregorianCutover-long, centuryISO-boolean, minDaysInFirstWeek-int]",
            "newValue": "[base-Chronology, lowerLimit-ReadableDateTime, upperLimit-ReadableDateTime]"
          }
        }
      ]
    },
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb": {
      "type": "Yintroduced",
      "commitMessage": "Move version 0.9 to joda-time repository\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@4 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "12/16/03, 1:39 PM",
      "commitName": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
      "commitAuthor": "Stephen Colebourne",
      "diff": "@@ -0,0 +1,21 @@\n+public static synchronized GJChronology getInstance(DateTimeZone zone, long gregorianCutover, boolean centuryISO, int minDaysInFirstWeek) {\n+    if (zone \u003d\u003d null) {\n+        zone \u003d DateTimeZone.getDefault();\n+    }\n+    if (minDaysInFirstWeek \u003c 1 || minDaysInFirstWeek \u003e 7) {\n+        throw new IllegalArgumentException(\"Invalid min days in first week: \" + minDaysInFirstWeek);\n+    }\n+    Factory factory;\n+    getFactory: {\n+        SoftReference ref \u003d (SoftReference) cZonesToFactories.get(zone);\n+        if (ref !\u003d null) {\n+            factory \u003d (Factory) ref.get();\n+            if (factory !\u003d null) {\n+                break getFactory;\n+            }\n+        }\n+        factory \u003d new Factory(zone);\n+        cZonesToFactories.put(zone, new SoftReference(factory));\n+    }\n+    return factory.getInstance(gregorianCutover, centuryISO, minDaysInFirstWeek);\n+}\n\\ No newline at end of file\n",
      "actualSource": "public static synchronized GJChronology getInstance(DateTimeZone zone, long gregorianCutover, boolean centuryISO, int minDaysInFirstWeek) {\n    if (zone \u003d\u003d null) {\n        zone \u003d DateTimeZone.getDefault();\n    }\n    if (minDaysInFirstWeek \u003c 1 || minDaysInFirstWeek \u003e 7) {\n        throw new IllegalArgumentException(\"Invalid min days in first week: \" + minDaysInFirstWeek);\n    }\n    Factory factory;\n    getFactory: {\n        SoftReference ref \u003d (SoftReference) cZonesToFactories.get(zone);\n        if (ref !\u003d null) {\n            factory \u003d (Factory) ref.get();\n            if (factory !\u003d null) {\n                break getFactory;\n            }\n        }\n        factory \u003d new Factory(zone);\n        cZonesToFactories.put(zone, new SoftReference(factory));\n    }\n    return factory.getInstance(gregorianCutover, centuryISO, minDaysInFirstWeek);\n}",
      "path": "JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java",
      "functionStartLine": 263,
      "functionName": "getInstance",
      "functionAnnotation": "",
      "functionDoc": "Factory method allowing the Gregorian cutover point and year zero\nhandling to be set.  If the cutover is Long.MIN_VALUE, a proleptic\nGregorian calendar is returned. If the cutover is Long.MAX_VALUE, a\nproleptic Julian calendar is returned.\n\n@param zone the time zone to use, null is default\n@param gregorianCutover the cutover as milliseconds from 1970-01-01T00:00:00Z\n@param centuryISO when true, century related fields follow ISO rules\n@param minDaysInFirstWeek minimum number of days in first week of the year; ISO is 4\n"
    }
  }
}