{
  "origin": "codeshovel",
  "repositoryName": "Time-7b",
  "repositoryPath": "/tmp/Time-7b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DateTimeFormatterBuilder.java",
  "functionName": "parseInto",
  "functionId": "$parseInto___bucket-DateTimeParserBucket__text-String__position-int",
  "sourceFilePath": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 1329,
  "functionEndLine": 1392,
  "numCommitsSeen": 118,
  "timeTaken": 6603,
  "changeHistory": [
    "df4a82f4fb46cc2248280c462e18f08d55a3d112",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1",
    "1707517294d44202e104305e7b0c6fb12dd1a6dd",
    "c6a69cc40dcb388b5ddc3e616064f130ef3608e2",
    "6cad802018b6b82ea4df53aaf91a0bbc98b2f9a3",
    "9316fce1b432caa8b56ff6056d916f0a0aaefc1a",
    "7f40c2c885cc3258933223397cc03d8704290120",
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb"
  ],
  "changeHistoryShort": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": "Yfilerename",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": "Yfilerename",
    "1707517294d44202e104305e7b0c6fb12dd1a6dd": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "c6a69cc40dcb388b5ddc3e616064f130ef3608e2": "Yparameterchange",
    "6cad802018b6b82ea4df53aaf91a0bbc98b2f9a3": "Ymultichange(Ymodifierchange,Ybodychange)",
    "9316fce1b432caa8b56ff6056d916f0a0aaefc1a": "Ybodychange",
    "7f40c2c885cc3258933223397cc03d8704290120": "Ybodychange",
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb": "Yintroduced"
  },
  "changeHistoryDetails": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": {
      "type": "Yfilerename",
      "commitMessage": "Remove JodaTime folder moving files to top level\n",
      "commitDate": "5/16/11, 10:02 AM",
      "commitName": "df4a82f4fb46cc2248280c462e18f08d55a3d112",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "5/16/11, 9:58 AM",
      "commitNameOld": "72b22654962284bac59c2777131b42a2d1f53228",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n    DateTimeParser[] parsers \u003d iParsers;\n    int length \u003d parsers.length;\n    final Object originalState \u003d bucket.saveState();\n    boolean isOptional \u003d false;\n    int bestValidPos \u003d position;\n    Object bestValidState \u003d null;\n    int bestInvalidPos \u003d position;\n    for (int i \u003d 0; i \u003c length; i++) {\n        DateTimeParser parser \u003d parsers[i];\n        if (parser \u003d\u003d null) {\n            if (bestValidPos \u003c\u003d position) {\n                return position;\n            }\n            isOptional \u003d true;\n            break;\n        }\n        int parsePos \u003d parser.parseInto(bucket, text, position);\n        if (parsePos \u003e\u003d position) {\n            if (parsePos \u003e bestValidPos) {\n                if (parsePos \u003e\u003d text.length() || (i + 1) \u003e\u003d length || parsers[i + 1] \u003d\u003d null) {\n                    return parsePos;\n                }\n                bestValidPos \u003d parsePos;\n                bestValidState \u003d bucket.saveState();\n            }\n        } else {\n            if (parsePos \u003c 0) {\n                parsePos \u003d ~parsePos;\n                if (parsePos \u003e bestInvalidPos) {\n                    bestInvalidPos \u003d parsePos;\n                }\n            }\n        }\n        bucket.restoreState(originalState);\n    }\n    if (bestValidPos \u003e position || (bestValidPos \u003d\u003d position \u0026\u0026 isOptional)) {\n        if (bestValidState !\u003d null) {\n            bucket.restoreState(bestValidState);\n        }\n        return bestValidPos;\n    }\n    return ~bestInvalidPos;\n}",
      "path": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
      "functionStartLine": 2667,
      "functionName": "parseInto",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
        "newPath": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java"
      }
    },
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": {
      "type": "Yfilerename",
      "commitMessage": "Convert to maven 2\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1540 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/8/10, 5:17 PM",
      "commitName": "53feb3fa56af7260e607844524b7e5a9be49ecc1",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/8/10, 5:02 PM",
      "commitNameOld": "7fa2ceaf5d95d050095432aa646ea803aa35e122",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n    DateTimeParser[] parsers \u003d iParsers;\n    int length \u003d parsers.length;\n    final Object originalState \u003d bucket.saveState();\n    boolean isOptional \u003d false;\n    int bestValidPos \u003d position;\n    Object bestValidState \u003d null;\n    int bestInvalidPos \u003d position;\n    for (int i \u003d 0; i \u003c length; i++) {\n        DateTimeParser parser \u003d parsers[i];\n        if (parser \u003d\u003d null) {\n            if (bestValidPos \u003c\u003d position) {\n                return position;\n            }\n            isOptional \u003d true;\n            break;\n        }\n        int parsePos \u003d parser.parseInto(bucket, text, position);\n        if (parsePos \u003e\u003d position) {\n            if (parsePos \u003e bestValidPos) {\n                if (parsePos \u003e\u003d text.length() || (i + 1) \u003e\u003d length || parsers[i + 1] \u003d\u003d null) {\n                    return parsePos;\n                }\n                bestValidPos \u003d parsePos;\n                bestValidState \u003d bucket.saveState();\n            }\n        } else {\n            if (parsePos \u003c 0) {\n                parsePos \u003d ~parsePos;\n                if (parsePos \u003e bestInvalidPos) {\n                    bestInvalidPos \u003d parsePos;\n                }\n            }\n        }\n        bucket.restoreState(originalState);\n    }\n    if (bestValidPos \u003e position || (bestValidPos \u003d\u003d position \u0026\u0026 isOptional)) {\n        if (bestValidState !\u003d null) {\n            bucket.restoreState(bestValidState);\n        }\n        return bestValidPos;\n    }\n    return ~bestInvalidPos;\n}",
      "path": "JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
      "functionStartLine": 2667,
      "functionName": "parseInto",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java",
        "newPath": "JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java"
      }
    },
    "1707517294d44202e104305e7b0c6fb12dd1a6dd": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "Restored formatting interfaces to provide same functionality as v0.95.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@604 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "12/12/04, 8:21 PM",
      "commitName": "1707517294d44202e104305e7b0c6fb12dd1a6dd",
      "commitAuthor": "Brian S O\u0027Neill",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Restored formatting interfaces to provide same functionality as v0.95.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@604 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "12/12/04, 8:21 PM",
          "commitName": "1707517294d44202e104305e7b0c6fb12dd1a6dd",
          "commitAuthor": "Brian S O\u0027Neill",
          "commitDateOld": "12/11/04, 11:10 AM",
          "commitNameOld": "7d2cfa167873f8f58a65f358623c1738e6332069",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 1.38,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "actualSource": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n    DateTimeParser[] parsers \u003d iParsers;\n    int length \u003d parsers.length;\n    final Object originalState \u003d bucket.saveState();\n    boolean isOptional \u003d false;\n    int bestValidPos \u003d position;\n    Object bestValidState \u003d null;\n    int bestInvalidPos \u003d position;\n    for (int i \u003d 0; i \u003c length; i++) {\n        DateTimeParser parser \u003d parsers[i];\n        if (parser \u003d\u003d null) {\n            if (bestValidPos \u003c\u003d position) {\n                return position;\n            }\n            isOptional \u003d true;\n            break;\n        }\n        int parsePos \u003d parser.parseInto(bucket, text, position);\n        if (parsePos \u003e\u003d position) {\n            if (parsePos \u003e bestValidPos) {\n                if (parsePos \u003e\u003d text.length() || (i + 1) \u003e\u003d length || parsers[i + 1] \u003d\u003d null) {\n                    return parsePos;\n                }\n                bestValidPos \u003d parsePos;\n                bestValidState \u003d bucket.saveState();\n            }\n        } else {\n            if (parsePos \u003c 0) {\n                parsePos \u003d ~parsePos;\n                if (parsePos \u003e bestInvalidPos) {\n                    bestInvalidPos \u003d parsePos;\n                }\n            }\n        }\n        bucket.restoreState(originalState);\n    }\n    if (bestValidPos \u003e position || (bestValidPos \u003d\u003d position \u0026\u0026 isOptional)) {\n        if (bestValidState !\u003d null) {\n            bucket.restoreState(bestValidState);\n        }\n        return bestValidPos;\n    }\n    return ~bestInvalidPos;\n}",
          "path": "JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java",
          "functionStartLine": 2362,
          "functionName": "parseInto",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,44 +1,44 @@\n-protected int parseInto(ParseBucket bucket, String text, int position) {\n-    BaseDateTimeFormatter[] parsers \u003d iParsers;\n+public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n+    DateTimeParser[] parsers \u003d iParsers;\n     int length \u003d parsers.length;\n     final Object originalState \u003d bucket.saveState();\n     boolean isOptional \u003d false;\n     int bestValidPos \u003d position;\n     Object bestValidState \u003d null;\n     int bestInvalidPos \u003d position;\n     for (int i \u003d 0; i \u003c length; i++) {\n-        BaseDateTimeFormatter parser \u003d parsers[i];\n+        DateTimeParser parser \u003d parsers[i];\n         if (parser \u003d\u003d null) {\n             if (bestValidPos \u003c\u003d position) {\n                 return position;\n             }\n             isOptional \u003d true;\n             break;\n         }\n         int parsePos \u003d parser.parseInto(bucket, text, position);\n         if (parsePos \u003e\u003d position) {\n             if (parsePos \u003e bestValidPos) {\n                 if (parsePos \u003e\u003d text.length() || (i + 1) \u003e\u003d length || parsers[i + 1] \u003d\u003d null) {\n                     return parsePos;\n                 }\n                 bestValidPos \u003d parsePos;\n                 bestValidState \u003d bucket.saveState();\n             }\n         } else {\n             if (parsePos \u003c 0) {\n                 parsePos \u003d ~parsePos;\n                 if (parsePos \u003e bestInvalidPos) {\n                     bestInvalidPos \u003d parsePos;\n                 }\n             }\n         }\n         bucket.restoreState(originalState);\n     }\n     if (bestValidPos \u003e position || (bestValidPos \u003d\u003d position \u0026\u0026 isOptional)) {\n         if (bestValidState !\u003d null) {\n             bucket.restoreState(bestValidState);\n         }\n         return bestValidPos;\n     }\n     return ~bestInvalidPos;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[bucket-ParseBucket, text-String, position-int]",
            "newValue": "[bucket-DateTimeParserBucket, text-String, position-int]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Restored formatting interfaces to provide same functionality as v0.95.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@604 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "12/12/04, 8:21 PM",
          "commitName": "1707517294d44202e104305e7b0c6fb12dd1a6dd",
          "commitAuthor": "Brian S O\u0027Neill",
          "commitDateOld": "12/11/04, 11:10 AM",
          "commitNameOld": "7d2cfa167873f8f58a65f358623c1738e6332069",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 1.38,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "actualSource": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n    DateTimeParser[] parsers \u003d iParsers;\n    int length \u003d parsers.length;\n    final Object originalState \u003d bucket.saveState();\n    boolean isOptional \u003d false;\n    int bestValidPos \u003d position;\n    Object bestValidState \u003d null;\n    int bestInvalidPos \u003d position;\n    for (int i \u003d 0; i \u003c length; i++) {\n        DateTimeParser parser \u003d parsers[i];\n        if (parser \u003d\u003d null) {\n            if (bestValidPos \u003c\u003d position) {\n                return position;\n            }\n            isOptional \u003d true;\n            break;\n        }\n        int parsePos \u003d parser.parseInto(bucket, text, position);\n        if (parsePos \u003e\u003d position) {\n            if (parsePos \u003e bestValidPos) {\n                if (parsePos \u003e\u003d text.length() || (i + 1) \u003e\u003d length || parsers[i + 1] \u003d\u003d null) {\n                    return parsePos;\n                }\n                bestValidPos \u003d parsePos;\n                bestValidState \u003d bucket.saveState();\n            }\n        } else {\n            if (parsePos \u003c 0) {\n                parsePos \u003d ~parsePos;\n                if (parsePos \u003e bestInvalidPos) {\n                    bestInvalidPos \u003d parsePos;\n                }\n            }\n        }\n        bucket.restoreState(originalState);\n    }\n    if (bestValidPos \u003e position || (bestValidPos \u003d\u003d position \u0026\u0026 isOptional)) {\n        if (bestValidState !\u003d null) {\n            bucket.restoreState(bestValidState);\n        }\n        return bestValidPos;\n    }\n    return ~bestInvalidPos;\n}",
          "path": "JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java",
          "functionStartLine": 2362,
          "functionName": "parseInto",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,44 +1,44 @@\n-protected int parseInto(ParseBucket bucket, String text, int position) {\n-    BaseDateTimeFormatter[] parsers \u003d iParsers;\n+public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n+    DateTimeParser[] parsers \u003d iParsers;\n     int length \u003d parsers.length;\n     final Object originalState \u003d bucket.saveState();\n     boolean isOptional \u003d false;\n     int bestValidPos \u003d position;\n     Object bestValidState \u003d null;\n     int bestInvalidPos \u003d position;\n     for (int i \u003d 0; i \u003c length; i++) {\n-        BaseDateTimeFormatter parser \u003d parsers[i];\n+        DateTimeParser parser \u003d parsers[i];\n         if (parser \u003d\u003d null) {\n             if (bestValidPos \u003c\u003d position) {\n                 return position;\n             }\n             isOptional \u003d true;\n             break;\n         }\n         int parsePos \u003d parser.parseInto(bucket, text, position);\n         if (parsePos \u003e\u003d position) {\n             if (parsePos \u003e bestValidPos) {\n                 if (parsePos \u003e\u003d text.length() || (i + 1) \u003e\u003d length || parsers[i + 1] \u003d\u003d null) {\n                     return parsePos;\n                 }\n                 bestValidPos \u003d parsePos;\n                 bestValidState \u003d bucket.saveState();\n             }\n         } else {\n             if (parsePos \u003c 0) {\n                 parsePos \u003d ~parsePos;\n                 if (parsePos \u003e bestInvalidPos) {\n                     bestInvalidPos \u003d parsePos;\n                 }\n             }\n         }\n         bucket.restoreState(originalState);\n     }\n     if (bestValidPos \u003e position || (bestValidPos \u003d\u003d position \u0026\u0026 isOptional)) {\n         if (bestValidState !\u003d null) {\n             bucket.restoreState(bestValidState);\n         }\n         return bestValidPos;\n     }\n     return ~bestInvalidPos;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[protected]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Restored formatting interfaces to provide same functionality as v0.95.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@604 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "12/12/04, 8:21 PM",
          "commitName": "1707517294d44202e104305e7b0c6fb12dd1a6dd",
          "commitAuthor": "Brian S O\u0027Neill",
          "commitDateOld": "12/11/04, 11:10 AM",
          "commitNameOld": "7d2cfa167873f8f58a65f358623c1738e6332069",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 1.38,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "actualSource": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n    DateTimeParser[] parsers \u003d iParsers;\n    int length \u003d parsers.length;\n    final Object originalState \u003d bucket.saveState();\n    boolean isOptional \u003d false;\n    int bestValidPos \u003d position;\n    Object bestValidState \u003d null;\n    int bestInvalidPos \u003d position;\n    for (int i \u003d 0; i \u003c length; i++) {\n        DateTimeParser parser \u003d parsers[i];\n        if (parser \u003d\u003d null) {\n            if (bestValidPos \u003c\u003d position) {\n                return position;\n            }\n            isOptional \u003d true;\n            break;\n        }\n        int parsePos \u003d parser.parseInto(bucket, text, position);\n        if (parsePos \u003e\u003d position) {\n            if (parsePos \u003e bestValidPos) {\n                if (parsePos \u003e\u003d text.length() || (i + 1) \u003e\u003d length || parsers[i + 1] \u003d\u003d null) {\n                    return parsePos;\n                }\n                bestValidPos \u003d parsePos;\n                bestValidState \u003d bucket.saveState();\n            }\n        } else {\n            if (parsePos \u003c 0) {\n                parsePos \u003d ~parsePos;\n                if (parsePos \u003e bestInvalidPos) {\n                    bestInvalidPos \u003d parsePos;\n                }\n            }\n        }\n        bucket.restoreState(originalState);\n    }\n    if (bestValidPos \u003e position || (bestValidPos \u003d\u003d position \u0026\u0026 isOptional)) {\n        if (bestValidState !\u003d null) {\n            bucket.restoreState(bestValidState);\n        }\n        return bestValidPos;\n    }\n    return ~bestInvalidPos;\n}",
          "path": "JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java",
          "functionStartLine": 2362,
          "functionName": "parseInto",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,44 +1,44 @@\n-protected int parseInto(ParseBucket bucket, String text, int position) {\n-    BaseDateTimeFormatter[] parsers \u003d iParsers;\n+public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n+    DateTimeParser[] parsers \u003d iParsers;\n     int length \u003d parsers.length;\n     final Object originalState \u003d bucket.saveState();\n     boolean isOptional \u003d false;\n     int bestValidPos \u003d position;\n     Object bestValidState \u003d null;\n     int bestInvalidPos \u003d position;\n     for (int i \u003d 0; i \u003c length; i++) {\n-        BaseDateTimeFormatter parser \u003d parsers[i];\n+        DateTimeParser parser \u003d parsers[i];\n         if (parser \u003d\u003d null) {\n             if (bestValidPos \u003c\u003d position) {\n                 return position;\n             }\n             isOptional \u003d true;\n             break;\n         }\n         int parsePos \u003d parser.parseInto(bucket, text, position);\n         if (parsePos \u003e\u003d position) {\n             if (parsePos \u003e bestValidPos) {\n                 if (parsePos \u003e\u003d text.length() || (i + 1) \u003e\u003d length || parsers[i + 1] \u003d\u003d null) {\n                     return parsePos;\n                 }\n                 bestValidPos \u003d parsePos;\n                 bestValidState \u003d bucket.saveState();\n             }\n         } else {\n             if (parsePos \u003c 0) {\n                 parsePos \u003d ~parsePos;\n                 if (parsePos \u003e bestInvalidPos) {\n                     bestInvalidPos \u003d parsePos;\n                 }\n             }\n         }\n         bucket.restoreState(originalState);\n     }\n     if (bestValidPos \u003e position || (bestValidPos \u003d\u003d position \u0026\u0026 isOptional)) {\n         if (bestValidState !\u003d null) {\n             bucket.restoreState(bestValidState);\n         }\n         return bestValidPos;\n     }\n     return ~bestInvalidPos;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "c6a69cc40dcb388b5ddc3e616064f130ef3608e2": {
      "type": "Yparameterchange",
      "commitMessage": "Refactor DateTimeParserBucket to inner class to aid package comprehension\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@544 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "10/28/04, 4:19 PM",
      "commitName": "c6a69cc40dcb388b5ddc3e616064f130ef3608e2",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "10/28/04, 3:56 PM",
      "commitNameOld": "6cad802018b6b82ea4df53aaf91a0bbc98b2f9a3",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected int parseInto(ParseBucket bucket, String text, int position) {\n    BaseDateTimeFormatter[] parsers \u003d iParsers;\n    int length \u003d parsers.length;\n    final Object originalState \u003d bucket.saveState();\n    boolean isOptional \u003d false;\n    int bestValidPos \u003d position;\n    Object bestValidState \u003d null;\n    int bestInvalidPos \u003d position;\n    for (int i \u003d 0; i \u003c length; i++) {\n        BaseDateTimeFormatter parser \u003d parsers[i];\n        if (parser \u003d\u003d null) {\n            if (bestValidPos \u003c\u003d position) {\n                return position;\n            }\n            isOptional \u003d true;\n            break;\n        }\n        int parsePos \u003d parser.parseInto(bucket, text, position);\n        if (parsePos \u003e\u003d position) {\n            if (parsePos \u003e bestValidPos) {\n                if (parsePos \u003e\u003d text.length() || (i + 1) \u003e\u003d length || parsers[i + 1] \u003d\u003d null) {\n                    return parsePos;\n                }\n                bestValidPos \u003d parsePos;\n                bestValidState \u003d bucket.saveState();\n            }\n        } else {\n            if (parsePos \u003c 0) {\n                parsePos \u003d ~parsePos;\n                if (parsePos \u003e bestInvalidPos) {\n                    bestInvalidPos \u003d parsePos;\n                }\n            }\n        }\n        bucket.restoreState(originalState);\n    }\n    if (bestValidPos \u003e position || (bestValidPos \u003d\u003d position \u0026\u0026 isOptional)) {\n        if (bestValidState !\u003d null) {\n            bucket.restoreState(bestValidState);\n        }\n        return bestValidPos;\n    }\n    return ~bestInvalidPos;\n}",
      "path": "JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java",
      "functionStartLine": 2627,
      "functionName": "parseInto",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,44 +1,44 @@\n-protected int parseInto(DateTimeParserBucket bucket, String text, int position) {\n+protected int parseInto(ParseBucket bucket, String text, int position) {\n     BaseDateTimeFormatter[] parsers \u003d iParsers;\n     int length \u003d parsers.length;\n     final Object originalState \u003d bucket.saveState();\n     boolean isOptional \u003d false;\n     int bestValidPos \u003d position;\n     Object bestValidState \u003d null;\n     int bestInvalidPos \u003d position;\n     for (int i \u003d 0; i \u003c length; i++) {\n         BaseDateTimeFormatter parser \u003d parsers[i];\n         if (parser \u003d\u003d null) {\n             if (bestValidPos \u003c\u003d position) {\n                 return position;\n             }\n             isOptional \u003d true;\n             break;\n         }\n         int parsePos \u003d parser.parseInto(bucket, text, position);\n         if (parsePos \u003e\u003d position) {\n             if (parsePos \u003e bestValidPos) {\n                 if (parsePos \u003e\u003d text.length() || (i + 1) \u003e\u003d length || parsers[i + 1] \u003d\u003d null) {\n                     return parsePos;\n                 }\n                 bestValidPos \u003d parsePos;\n                 bestValidState \u003d bucket.saveState();\n             }\n         } else {\n             if (parsePos \u003c 0) {\n                 parsePos \u003d ~parsePos;\n                 if (parsePos \u003e bestInvalidPos) {\n                     bestInvalidPos \u003d parsePos;\n                 }\n             }\n         }\n         bucket.restoreState(originalState);\n     }\n     if (bestValidPos \u003e position || (bestValidPos \u003d\u003d position \u0026\u0026 isOptional)) {\n         if (bestValidState !\u003d null) {\n             bucket.restoreState(bestValidState);\n         }\n         return bestValidPos;\n     }\n     return ~bestInvalidPos;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[bucket-DateTimeParserBucket, text-String, position-int]",
        "newValue": "[bucket-ParseBucket, text-String, position-int]"
      }
    },
    "6cad802018b6b82ea4df53aaf91a0bbc98b2f9a3": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "Refactor format package to use late binding of chronology\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@543 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "10/28/04, 3:56 PM",
      "commitName": "6cad802018b6b82ea4df53aaf91a0bbc98b2f9a3",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "Refactor format package to use late binding of chronology\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@543 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "10/28/04, 3:56 PM",
          "commitName": "6cad802018b6b82ea4df53aaf91a0bbc98b2f9a3",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "9/11/04, 4:30 PM",
          "commitNameOld": "9316fce1b432caa8b56ff6056d916f0a0aaefc1a",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 46.98,
          "commitsBetweenForRepo": 38,
          "commitsBetweenForFile": 1,
          "actualSource": "protected int parseInto(DateTimeParserBucket bucket, String text, int position) {\n    BaseDateTimeFormatter[] parsers \u003d iParsers;\n    int length \u003d parsers.length;\n    final Object originalState \u003d bucket.saveState();\n    boolean isOptional \u003d false;\n    int bestValidPos \u003d position;\n    Object bestValidState \u003d null;\n    int bestInvalidPos \u003d position;\n    for (int i \u003d 0; i \u003c length; i++) {\n        BaseDateTimeFormatter parser \u003d parsers[i];\n        if (parser \u003d\u003d null) {\n            if (bestValidPos \u003c\u003d position) {\n                return position;\n            }\n            isOptional \u003d true;\n            break;\n        }\n        int parsePos \u003d parser.parseInto(bucket, text, position);\n        if (parsePos \u003e\u003d position) {\n            if (parsePos \u003e bestValidPos) {\n                if (parsePos \u003e\u003d text.length() || (i + 1) \u003e\u003d length || parsers[i + 1] \u003d\u003d null) {\n                    return parsePos;\n                }\n                bestValidPos \u003d parsePos;\n                bestValidState \u003d bucket.saveState();\n            }\n        } else {\n            if (parsePos \u003c 0) {\n                parsePos \u003d ~parsePos;\n                if (parsePos \u003e bestInvalidPos) {\n                    bestInvalidPos \u003d parsePos;\n                }\n            }\n        }\n        bucket.restoreState(originalState);\n    }\n    if (bestValidPos \u003e position || (bestValidPos \u003d\u003d position \u0026\u0026 isOptional)) {\n        if (bestValidState !\u003d null) {\n            bucket.restoreState(bestValidState);\n        }\n        return bestValidPos;\n    }\n    return ~bestInvalidPos;\n}",
          "path": "JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java",
          "functionStartLine": 2627,
          "functionName": "parseInto",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,44 +1,44 @@\n-public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n-    DateTimeParser[] parsers \u003d iParsers;\n+protected int parseInto(DateTimeParserBucket bucket, String text, int position) {\n+    BaseDateTimeFormatter[] parsers \u003d iParsers;\n     int length \u003d parsers.length;\n     final Object originalState \u003d bucket.saveState();\n     boolean isOptional \u003d false;\n     int bestValidPos \u003d position;\n     Object bestValidState \u003d null;\n     int bestInvalidPos \u003d position;\n     for (int i \u003d 0; i \u003c length; i++) {\n-        DateTimeParser parser \u003d parsers[i];\n+        BaseDateTimeFormatter parser \u003d parsers[i];\n         if (parser \u003d\u003d null) {\n             if (bestValidPos \u003c\u003d position) {\n                 return position;\n             }\n             isOptional \u003d true;\n             break;\n         }\n         int parsePos \u003d parser.parseInto(bucket, text, position);\n         if (parsePos \u003e\u003d position) {\n             if (parsePos \u003e bestValidPos) {\n                 if (parsePos \u003e\u003d text.length() || (i + 1) \u003e\u003d length || parsers[i + 1] \u003d\u003d null) {\n                     return parsePos;\n                 }\n                 bestValidPos \u003d parsePos;\n                 bestValidState \u003d bucket.saveState();\n             }\n         } else {\n             if (parsePos \u003c 0) {\n                 parsePos \u003d ~parsePos;\n                 if (parsePos \u003e bestInvalidPos) {\n                     bestInvalidPos \u003d parsePos;\n                 }\n             }\n         }\n         bucket.restoreState(originalState);\n     }\n     if (bestValidPos \u003e position || (bestValidPos \u003d\u003d position \u0026\u0026 isOptional)) {\n         if (bestValidState !\u003d null) {\n             bucket.restoreState(bestValidState);\n         }\n         return bestValidPos;\n     }\n     return ~bestInvalidPos;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Refactor format package to use late binding of chronology\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@543 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "10/28/04, 3:56 PM",
          "commitName": "6cad802018b6b82ea4df53aaf91a0bbc98b2f9a3",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "9/11/04, 4:30 PM",
          "commitNameOld": "9316fce1b432caa8b56ff6056d916f0a0aaefc1a",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 46.98,
          "commitsBetweenForRepo": 38,
          "commitsBetweenForFile": 1,
          "actualSource": "protected int parseInto(DateTimeParserBucket bucket, String text, int position) {\n    BaseDateTimeFormatter[] parsers \u003d iParsers;\n    int length \u003d parsers.length;\n    final Object originalState \u003d bucket.saveState();\n    boolean isOptional \u003d false;\n    int bestValidPos \u003d position;\n    Object bestValidState \u003d null;\n    int bestInvalidPos \u003d position;\n    for (int i \u003d 0; i \u003c length; i++) {\n        BaseDateTimeFormatter parser \u003d parsers[i];\n        if (parser \u003d\u003d null) {\n            if (bestValidPos \u003c\u003d position) {\n                return position;\n            }\n            isOptional \u003d true;\n            break;\n        }\n        int parsePos \u003d parser.parseInto(bucket, text, position);\n        if (parsePos \u003e\u003d position) {\n            if (parsePos \u003e bestValidPos) {\n                if (parsePos \u003e\u003d text.length() || (i + 1) \u003e\u003d length || parsers[i + 1] \u003d\u003d null) {\n                    return parsePos;\n                }\n                bestValidPos \u003d parsePos;\n                bestValidState \u003d bucket.saveState();\n            }\n        } else {\n            if (parsePos \u003c 0) {\n                parsePos \u003d ~parsePos;\n                if (parsePos \u003e bestInvalidPos) {\n                    bestInvalidPos \u003d parsePos;\n                }\n            }\n        }\n        bucket.restoreState(originalState);\n    }\n    if (bestValidPos \u003e position || (bestValidPos \u003d\u003d position \u0026\u0026 isOptional)) {\n        if (bestValidState !\u003d null) {\n            bucket.restoreState(bestValidState);\n        }\n        return bestValidPos;\n    }\n    return ~bestInvalidPos;\n}",
          "path": "JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java",
          "functionStartLine": 2627,
          "functionName": "parseInto",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,44 +1,44 @@\n-public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n-    DateTimeParser[] parsers \u003d iParsers;\n+protected int parseInto(DateTimeParserBucket bucket, String text, int position) {\n+    BaseDateTimeFormatter[] parsers \u003d iParsers;\n     int length \u003d parsers.length;\n     final Object originalState \u003d bucket.saveState();\n     boolean isOptional \u003d false;\n     int bestValidPos \u003d position;\n     Object bestValidState \u003d null;\n     int bestInvalidPos \u003d position;\n     for (int i \u003d 0; i \u003c length; i++) {\n-        DateTimeParser parser \u003d parsers[i];\n+        BaseDateTimeFormatter parser \u003d parsers[i];\n         if (parser \u003d\u003d null) {\n             if (bestValidPos \u003c\u003d position) {\n                 return position;\n             }\n             isOptional \u003d true;\n             break;\n         }\n         int parsePos \u003d parser.parseInto(bucket, text, position);\n         if (parsePos \u003e\u003d position) {\n             if (parsePos \u003e bestValidPos) {\n                 if (parsePos \u003e\u003d text.length() || (i + 1) \u003e\u003d length || parsers[i + 1] \u003d\u003d null) {\n                     return parsePos;\n                 }\n                 bestValidPos \u003d parsePos;\n                 bestValidState \u003d bucket.saveState();\n             }\n         } else {\n             if (parsePos \u003c 0) {\n                 parsePos \u003d ~parsePos;\n                 if (parsePos \u003e bestInvalidPos) {\n                     bestInvalidPos \u003d parsePos;\n                 }\n             }\n         }\n         bucket.restoreState(originalState);\n     }\n     if (bestValidPos \u003e position || (bestValidPos \u003d\u003d position \u0026\u0026 isOptional)) {\n         if (bestValidState !\u003d null) {\n             bucket.restoreState(bestValidState);\n         }\n         return bestValidPos;\n     }\n     return ~bestInvalidPos;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "9316fce1b432caa8b56ff6056d916f0a0aaefc1a": {
      "type": "Ybodychange",
      "commitMessage": "Use DateTimeFieldType for custom fields\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@504 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "9/11/04, 4:30 PM",
      "commitName": "9316fce1b432caa8b56ff6056d916f0a0aaefc1a",
      "commitAuthor": "Brian S O\u0027Neill",
      "commitDateOld": "9/9/04, 3:45 PM",
      "commitNameOld": "8ef60672c1dd5407b0761b81408857be44562ecf",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 2.03,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n    DateTimeParser[] parsers \u003d iParsers;\n    int length \u003d parsers.length;\n    final Object originalState \u003d bucket.saveState();\n    boolean isOptional \u003d false;\n    int bestValidPos \u003d position;\n    Object bestValidState \u003d null;\n    int bestInvalidPos \u003d position;\n    for (int i \u003d 0; i \u003c length; i++) {\n        DateTimeParser parser \u003d parsers[i];\n        if (parser \u003d\u003d null) {\n            if (bestValidPos \u003c\u003d position) {\n                return position;\n            }\n            isOptional \u003d true;\n            break;\n        }\n        int parsePos \u003d parser.parseInto(bucket, text, position);\n        if (parsePos \u003e\u003d position) {\n            if (parsePos \u003e bestValidPos) {\n                if (parsePos \u003e\u003d text.length() || (i + 1) \u003e\u003d length || parsers[i + 1] \u003d\u003d null) {\n                    return parsePos;\n                }\n                bestValidPos \u003d parsePos;\n                bestValidState \u003d bucket.saveState();\n            }\n        } else {\n            if (parsePos \u003c 0) {\n                parsePos \u003d ~parsePos;\n                if (parsePos \u003e bestInvalidPos) {\n                    bestInvalidPos \u003d parsePos;\n                }\n            }\n        }\n        bucket.restoreState(originalState);\n    }\n    if (bestValidPos \u003e position || (bestValidPos \u003d\u003d position \u0026\u0026 isOptional)) {\n        if (bestValidState !\u003d null) {\n            bucket.restoreState(bestValidState);\n        }\n        return bestValidPos;\n    }\n    return ~bestInvalidPos;\n}",
      "path": "JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java",
      "functionStartLine": 2375,
      "functionName": "parseInto",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,11 +1,44 @@\n public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n-    DateTimeParser[] elements \u003d iParsers;\n-    if (elements \u003d\u003d null) {\n-        throw new UnsupportedOperationException();\n+    DateTimeParser[] parsers \u003d iParsers;\n+    int length \u003d parsers.length;\n+    final Object originalState \u003d bucket.saveState();\n+    boolean isOptional \u003d false;\n+    int bestValidPos \u003d position;\n+    Object bestValidState \u003d null;\n+    int bestInvalidPos \u003d position;\n+    for (int i \u003d 0; i \u003c length; i++) {\n+        DateTimeParser parser \u003d parsers[i];\n+        if (parser \u003d\u003d null) {\n+            if (bestValidPos \u003c\u003d position) {\n+                return position;\n+            }\n+            isOptional \u003d true;\n+            break;\n+        }\n+        int parsePos \u003d parser.parseInto(bucket, text, position);\n+        if (parsePos \u003e\u003d position) {\n+            if (parsePos \u003e bestValidPos) {\n+                if (parsePos \u003e\u003d text.length() || (i + 1) \u003e\u003d length || parsers[i + 1] \u003d\u003d null) {\n+                    return parsePos;\n+                }\n+                bestValidPos \u003d parsePos;\n+                bestValidState \u003d bucket.saveState();\n+            }\n+        } else {\n+            if (parsePos \u003c 0) {\n+                parsePos \u003d ~parsePos;\n+                if (parsePos \u003e bestInvalidPos) {\n+                    bestInvalidPos \u003d parsePos;\n+                }\n+            }\n+        }\n+        bucket.restoreState(originalState);\n     }\n-    int len \u003d elements.length;\n-    for (int i \u003d 0; i \u003c len \u0026\u0026 position \u003e\u003d 0; i++) {\n-        position \u003d elements[i].parseInto(bucket, text, position);\n+    if (bestValidPos \u003e position || (bestValidPos \u003d\u003d position \u0026\u0026 isOptional)) {\n+        if (bestValidState !\u003d null) {\n+            bucket.restoreState(bestValidState);\n+        }\n+        return bestValidPos;\n     }\n-    return position;\n+    return ~bestInvalidPos;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7f40c2c885cc3258933223397cc03d8704290120": {
      "type": "Ybodychange",
      "commitMessage": "Bug fixes in set matching parse.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@103 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "1/4/04, 1:22 PM",
      "commitName": "7f40c2c885cc3258933223397cc03d8704290120",
      "commitAuthor": "Brian S O\u0027Neill",
      "commitDateOld": "1/3/04, 11:29 PM",
      "commitNameOld": "d7a7fcd6e2d7d8210bb37830857e110f7cdee6eb",
      "commitAuthorOld": "Brian S O\u0027Neill",
      "daysBetweenCommits": 0.58,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n    DateTimeParser[] elements \u003d iParsers;\n    if (elements \u003d\u003d null) {\n        throw new UnsupportedOperationException();\n    }\n    int len \u003d elements.length;\n    for (int i \u003d 0; i \u003c len \u0026\u0026 position \u003e\u003d 0; i++) {\n        position \u003d elements[i].parseInto(bucket, text, position);\n    }\n    return position;\n}",
      "path": "JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java",
      "functionStartLine": 1955,
      "functionName": "parseInto",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,49 +1,11 @@\n public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n-    DateTimeParser[] parsers \u003d iParsers;\n-    int length \u003d parsers.length;\n-    Object state \u003d bucket.saveState();\n-    int bestInvalidPos \u003d position;\n-    int bestInvalidParser \u003d 0;\n-    int bestValidPos \u003d position;\n-    int bestValidParser \u003d 0;\n-    for (int i \u003d 0; i \u003c length; i++) {\n-        if (i !\u003d 0) {\n-            bucket.undoChanges(state);\n-        }\n-        DateTimeParser parser \u003d parsers[i];\n-        if (parser \u003d\u003d null) {\n-            if (bestValidPos \u003e position) {\n-                break;\n-            }\n-            return position;\n-        }\n-        int parsePos \u003d parser.parseInto(bucket, text, position);\n-        if (parsePos \u003e\u003d position) {\n-            if (parsePos \u003e\u003d text.length()) {\n-                return parsePos;\n-            }\n-            if (parsePos \u003e bestValidPos) {\n-                bestValidPos \u003d parsePos;\n-                bestValidParser \u003d i;\n-            }\n-        } else {\n-            parsePos \u003d ~parsePos;\n-            if (parsePos \u003e bestInvalidPos) {\n-                bestInvalidPos \u003d parsePos;\n-                bestInvalidParser \u003d i;\n-            }\n-        }\n+    DateTimeParser[] elements \u003d iParsers;\n+    if (elements \u003d\u003d null) {\n+        throw new UnsupportedOperationException();\n     }\n-    if (bestValidPos \u003e position) {\n-        if (bestValidParser \u003d\u003d length - 1) {\n-            return bestValidPos;\n-        }\n-        bucket.undoChanges(state);\n-        return parsers[bestValidParser].parseInto(bucket, text, position);\n+    int len \u003d elements.length;\n+    for (int i \u003d 0; i \u003c len \u0026\u0026 position \u003e\u003d 0; i++) {\n+        position \u003d elements[i].parseInto(bucket, text, position);\n     }\n-    if (bestInvalidParser \u003d\u003d length - 1) {\n-        return ~bestInvalidPos;\n-    }\n-    bucket.undoChanges(state);\n-    return parsers[bestInvalidParser].parseInto(bucket, text, position);\n+    return position;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb": {
      "type": "Yintroduced",
      "commitMessage": "Move version 0.9 to joda-time repository\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@4 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "12/16/03, 1:39 PM",
      "commitName": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
      "commitAuthor": "Stephen Colebourne",
      "diff": "@@ -0,0 +1,49 @@\n+public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n+    DateTimeParser[] parsers \u003d iParsers;\n+    int length \u003d parsers.length;\n+    Object state \u003d bucket.saveState();\n+    int bestInvalidPos \u003d position;\n+    int bestInvalidParser \u003d 0;\n+    int bestValidPos \u003d position;\n+    int bestValidParser \u003d 0;\n+    for (int i \u003d 0; i \u003c length; i++) {\n+        if (i !\u003d 0) {\n+            bucket.undoChanges(state);\n+        }\n+        DateTimeParser parser \u003d parsers[i];\n+        if (parser \u003d\u003d null) {\n+            if (bestValidPos \u003e position) {\n+                break;\n+            }\n+            return position;\n+        }\n+        int parsePos \u003d parser.parseInto(bucket, text, position);\n+        if (parsePos \u003e\u003d position) {\n+            if (parsePos \u003e\u003d text.length()) {\n+                return parsePos;\n+            }\n+            if (parsePos \u003e bestValidPos) {\n+                bestValidPos \u003d parsePos;\n+                bestValidParser \u003d i;\n+            }\n+        } else {\n+            parsePos \u003d ~parsePos;\n+            if (parsePos \u003e bestInvalidPos) {\n+                bestInvalidPos \u003d parsePos;\n+                bestInvalidParser \u003d i;\n+            }\n+        }\n+    }\n+    if (bestValidPos \u003e position) {\n+        if (bestValidParser \u003d\u003d length - 1) {\n+            return bestValidPos;\n+        }\n+        bucket.undoChanges(state);\n+        return parsers[bestValidParser].parseInto(bucket, text, position);\n+    }\n+    if (bestInvalidParser \u003d\u003d length - 1) {\n+        return ~bestInvalidPos;\n+    }\n+    bucket.undoChanges(state);\n+    return parsers[bestInvalidParser].parseInto(bucket, text, position);\n+}\n\\ No newline at end of file\n",
      "actualSource": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n    DateTimeParser[] parsers \u003d iParsers;\n    int length \u003d parsers.length;\n    Object state \u003d bucket.saveState();\n    int bestInvalidPos \u003d position;\n    int bestInvalidParser \u003d 0;\n    int bestValidPos \u003d position;\n    int bestValidParser \u003d 0;\n    for (int i \u003d 0; i \u003c length; i++) {\n        if (i !\u003d 0) {\n            bucket.undoChanges(state);\n        }\n        DateTimeParser parser \u003d parsers[i];\n        if (parser \u003d\u003d null) {\n            if (bestValidPos \u003e position) {\n                break;\n            }\n            return position;\n        }\n        int parsePos \u003d parser.parseInto(bucket, text, position);\n        if (parsePos \u003e\u003d position) {\n            if (parsePos \u003e\u003d text.length()) {\n                return parsePos;\n            }\n            if (parsePos \u003e bestValidPos) {\n                bestValidPos \u003d parsePos;\n                bestValidParser \u003d i;\n            }\n        } else {\n            parsePos \u003d ~parsePos;\n            if (parsePos \u003e bestInvalidPos) {\n                bestInvalidPos \u003d parsePos;\n                bestInvalidParser \u003d i;\n            }\n        }\n    }\n    if (bestValidPos \u003e position) {\n        if (bestValidParser \u003d\u003d length - 1) {\n            return bestValidPos;\n        }\n        bucket.undoChanges(state);\n        return parsers[bestValidParser].parseInto(bucket, text, position);\n    }\n    if (bestInvalidParser \u003d\u003d length - 1) {\n        return ~bestInvalidPos;\n    }\n    bucket.undoChanges(state);\n    return parsers[bestInvalidParser].parseInto(bucket, text, position);\n}",
      "path": "JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java",
      "functionStartLine": 2189,
      "functionName": "parseInto",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}