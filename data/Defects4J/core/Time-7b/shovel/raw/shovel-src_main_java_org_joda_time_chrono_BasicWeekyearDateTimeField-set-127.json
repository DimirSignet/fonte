{
  "origin": "codeshovel",
  "repositoryName": "Time-7b",
  "repositoryPath": "/tmp/Time-7b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BasicWeekyearDateTimeField.java",
  "functionName": "set",
  "functionId": "set___instant-long__year-int",
  "sourceFilePath": "src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java",
  "functionAnnotation": "",
  "functionDoc": "Set the Year of a week based year component of the specified time instant.\n\n@see org.joda.time.DateTimeField#set\n@param instant the time instant in millis to update.\n@param year the year (-9999,9999) to set the date to.\n@return the updated DateTime.\n@throws IllegalArgumentException  if year is invalid.\n",
  "functionStartLine": 127,
  "functionEndLine": 205,
  "numCommitsSeen": 17,
  "timeTaken": 1015,
  "changeHistory": [
    "df4a82f4fb46cc2248280c462e18f08d55a3d112",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1",
    "86d15ea163e5731450a4da7d3fcfa49e29f8c16c",
    "f3f3e3f1a2306e67c6d02a46fe3b6b38b8f5e224",
    "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7",
    "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb"
  ],
  "changeHistoryShort": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": "Yfilerename",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": "Yfilerename",
    "86d15ea163e5731450a4da7d3fcfa49e29f8c16c": "Yfilerename",
    "f3f3e3f1a2306e67c6d02a46fe3b6b38b8f5e224": "Ybodychange",
    "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7": "Ymultichange(Yfilerename,Ybodychange)",
    "0e07ac6b2cff63550d7df336355ca63cc05aa40b": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb": "Yintroduced"
  },
  "changeHistoryDetails": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": {
      "type": "Yfilerename",
      "commitMessage": "Remove JodaTime folder moving files to top level\n",
      "commitDate": "5/16/11, 10:02 AM",
      "commitName": "df4a82f4fb46cc2248280c462e18f08d55a3d112",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "5/16/11, 9:58 AM",
      "commitNameOld": "72b22654962284bac59c2777131b42a2d1f53228",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public long set(long instant, int year) {\n    FieldUtils.verifyValueBounds(this, Math.abs(year), iChronology.getMinYear(), iChronology.getMaxYear());\n    int thisWeekyear \u003d get(instant);\n    if (thisWeekyear \u003d\u003d year) {\n        return instant;\n    }\n    int thisDow \u003d iChronology.getDayOfWeek(instant);\n    int weeksInFromYear \u003d iChronology.getWeeksInYear(thisWeekyear);\n    int weeksInToYear \u003d iChronology.getWeeksInYear(year);\n    int maxOutWeeks \u003d (weeksInToYear \u003c weeksInFromYear) ? weeksInToYear : weeksInFromYear;\n    int setToWeek \u003d iChronology.getWeekOfWeekyear(instant);\n    if (setToWeek \u003e maxOutWeeks) {\n        setToWeek \u003d maxOutWeeks;\n    }\n    long workInstant \u003d instant;\n    workInstant \u003d iChronology.setYear(workInstant, year);\n    int workWoyYear \u003d get(workInstant);\n    if (workWoyYear \u003c year) {\n        workInstant +\u003d DateTimeConstants.MILLIS_PER_WEEK;\n    } else if (workWoyYear \u003e year) {\n        workInstant -\u003d DateTimeConstants.MILLIS_PER_WEEK;\n    }\n    int currentWoyWeek \u003d iChronology.getWeekOfWeekyear(workInstant);\n    workInstant \u003d workInstant + (setToWeek - currentWoyWeek) * (long) DateTimeConstants.MILLIS_PER_WEEK;\n    workInstant \u003d iChronology.dayOfWeek().set(workInstant, thisDow);\n    return workInstant;\n}",
      "path": "src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java",
      "functionStartLine": 127,
      "functionName": "set",
      "functionAnnotation": "",
      "functionDoc": "Set the Year of a week based year component of the specified time instant.\n\n@see org.joda.time.DateTimeField#set\n@param instant the time instant in millis to update.\n@param year the year (-9999,9999) to set the date to.\n@return the updated DateTime.\n@throws IllegalArgumentException  if year is invalid.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java",
        "newPath": "src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java"
      }
    },
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": {
      "type": "Yfilerename",
      "commitMessage": "Convert to maven 2\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1540 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/8/10, 5:17 PM",
      "commitName": "53feb3fa56af7260e607844524b7e5a9be49ecc1",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/8/10, 5:02 PM",
      "commitNameOld": "7fa2ceaf5d95d050095432aa646ea803aa35e122",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public long set(long instant, int year) {\n    FieldUtils.verifyValueBounds(this, Math.abs(year), iChronology.getMinYear(), iChronology.getMaxYear());\n    int thisWeekyear \u003d get(instant);\n    if (thisWeekyear \u003d\u003d year) {\n        return instant;\n    }\n    int thisDow \u003d iChronology.getDayOfWeek(instant);\n    int weeksInFromYear \u003d iChronology.getWeeksInYear(thisWeekyear);\n    int weeksInToYear \u003d iChronology.getWeeksInYear(year);\n    int maxOutWeeks \u003d (weeksInToYear \u003c weeksInFromYear) ? weeksInToYear : weeksInFromYear;\n    int setToWeek \u003d iChronology.getWeekOfWeekyear(instant);\n    if (setToWeek \u003e maxOutWeeks) {\n        setToWeek \u003d maxOutWeeks;\n    }\n    long workInstant \u003d instant;\n    workInstant \u003d iChronology.setYear(workInstant, year);\n    int workWoyYear \u003d get(workInstant);\n    if (workWoyYear \u003c year) {\n        workInstant +\u003d DateTimeConstants.MILLIS_PER_WEEK;\n    } else if (workWoyYear \u003e year) {\n        workInstant -\u003d DateTimeConstants.MILLIS_PER_WEEK;\n    }\n    int currentWoyWeek \u003d iChronology.getWeekOfWeekyear(workInstant);\n    workInstant \u003d workInstant + (setToWeek - currentWoyWeek) * (long) DateTimeConstants.MILLIS_PER_WEEK;\n    workInstant \u003d iChronology.dayOfWeek().set(workInstant, thisDow);\n    return workInstant;\n}",
      "path": "JodaTime/src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java",
      "functionStartLine": 127,
      "functionName": "set",
      "functionAnnotation": "",
      "functionDoc": "Set the Year of a week based year component of the specified time instant.\n\n@see org.joda.time.DateTimeField#set\n@param instant the time instant in millis to update.\n@param year the year (-9999,9999) to set the date to.\n@return the updated DateTime.\n@throws IllegalArgumentException  if year is invalid.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java",
        "newPath": "JodaTime/src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java"
      }
    },
    "86d15ea163e5731450a4da7d3fcfa49e29f8c16c": {
      "type": "Yfilerename",
      "commitMessage": "Refactor GJ named classes to less specific Basic named classes\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@821 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "7/19/05, 1:26 PM",
      "commitName": "86d15ea163e5731450a4da7d3fcfa49e29f8c16c",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "7/19/05, 1:26 PM",
      "commitNameOld": "6c7032e613b5be8d6dbc19811f2e11221bf65c6c",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public long set(long instant, int year) {\n    FieldUtils.verifyValueBounds(this, Math.abs(year), iChronology.getMinYear(), iChronology.getMaxYear());\n    int thisWeekyear \u003d get(instant);\n    if (thisWeekyear \u003d\u003d year) {\n        return instant;\n    }\n    int thisDow \u003d iChronology.getDayOfWeek(instant);\n    int weeksInFromYear \u003d iChronology.getWeeksInYear(thisWeekyear);\n    int weeksInToYear \u003d iChronology.getWeeksInYear(year);\n    int maxOutWeeks \u003d (weeksInToYear \u003c weeksInFromYear) ? weeksInToYear : weeksInFromYear;\n    int setToWeek \u003d iChronology.getWeekOfWeekyear(instant);\n    if (setToWeek \u003e maxOutWeeks) {\n        setToWeek \u003d maxOutWeeks;\n    }\n    long workInstant \u003d instant;\n    workInstant \u003d iChronology.setYear(workInstant, year);\n    int workWoyYear \u003d get(workInstant);\n    if (workWoyYear \u003c year) {\n        workInstant +\u003d DateTimeConstants.MILLIS_PER_WEEK;\n    } else if (workWoyYear \u003e year) {\n        workInstant -\u003d DateTimeConstants.MILLIS_PER_WEEK;\n    }\n    int currentWoyWeek \u003d iChronology.getWeekOfWeekyear(workInstant);\n    workInstant \u003d workInstant + (setToWeek - currentWoyWeek) * (long) DateTimeConstants.MILLIS_PER_WEEK;\n    workInstant \u003d iChronology.dayOfWeek().set(workInstant, thisDow);\n    return workInstant;\n}",
      "path": "JodaTime/src/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java",
      "functionStartLine": 127,
      "functionName": "set",
      "functionAnnotation": "",
      "functionDoc": "Set the Year of a week based year component of the specified time instant.\n\n@see org.joda.time.DateTimeField#set\n@param instant the time instant in millis to update.\n@param year the year (-9999,9999) to set the date to.\n@return the updated DateTime.\n@throws IllegalArgumentException  if year is invalid.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java",
        "newPath": "JodaTime/src/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java"
      }
    },
    "f3f3e3f1a2306e67c6d02a46fe3b6b38b8f5e224": {
      "type": "Ybodychange",
      "commitMessage": "Remove TODO comments.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@554 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "11/3/04, 9:50 PM",
      "commitName": "f3f3e3f1a2306e67c6d02a46fe3b6b38b8f5e224",
      "commitAuthor": "Brian S O\u0027Neill",
      "commitDateOld": "9/2/04, 3:47 PM",
      "commitNameOld": "0d18055d0b3c2e687197a8651b3a06e097fe5c48",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 62.29,
      "commitsBetweenForRepo": 85,
      "commitsBetweenForFile": 1,
      "actualSource": "public long set(long instant, int year) {\n    FieldUtils.verifyValueBounds(this, Math.abs(year), iChronology.getMinYear(), iChronology.getMaxYear());\n    int thisWeekyear \u003d get(instant);\n    if (thisWeekyear \u003d\u003d year) {\n        return instant;\n    }\n    int thisDow \u003d iChronology.getDayOfWeek(instant);\n    int weeksInFromYear \u003d iChronology.getWeeksInYear(thisWeekyear);\n    int weeksInToYear \u003d iChronology.getWeeksInYear(year);\n    int maxOutWeeks \u003d (weeksInToYear \u003c weeksInFromYear) ? weeksInToYear : weeksInFromYear;\n    int setToWeek \u003d iChronology.getWeekOfWeekyear(instant);\n    if (setToWeek \u003e maxOutWeeks) {\n        setToWeek \u003d maxOutWeeks;\n    }\n    long workInstant \u003d instant;\n    workInstant \u003d iChronology.setYear(workInstant, year);\n    int workWoyYear \u003d get(workInstant);\n    if (workWoyYear \u003c year) {\n        workInstant +\u003d DateTimeConstants.MILLIS_PER_WEEK;\n    } else if (workWoyYear \u003e year) {\n        workInstant -\u003d DateTimeConstants.MILLIS_PER_WEEK;\n    }\n    int currentWoyWeek \u003d iChronology.getWeekOfWeekyear(workInstant);\n    workInstant \u003d workInstant + (setToWeek - currentWoyWeek) * (long) DateTimeConstants.MILLIS_PER_WEEK;\n    workInstant \u003d iChronology.dayOfWeek().set(workInstant, thisDow);\n    return workInstant;\n}",
      "path": "JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java",
      "functionStartLine": 167,
      "functionName": "set",
      "functionAnnotation": "",
      "functionDoc": "Set the Year of a week based year component of the specified time instant.\n\n@see org.joda.time.DateTimeField#set\n@param instant the time instant in millis to update.\n@param year the year (-9999,9999) to set the date to.\n@return the updated DateTime.\n@throws IllegalArgumentException  if year is invalid.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "Re-organized chronology package and created new field package.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@125 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "1/27/04, 11:12 PM",
      "commitName": "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7",
      "commitAuthor": "Brian S O\u0027Neill",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "Re-organized chronology package and created new field package.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@125 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "1/27/04, 11:12 PM",
          "commitName": "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7",
          "commitAuthor": "Brian S O\u0027Neill",
          "commitDateOld": "1/11/04, 9:39 AM",
          "commitNameOld": "6f5522f58c1d2abdec37b5d22e5981716d4ec731",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 16.56,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public long set(long instant, int year) {\n    FieldUtils.verifyValueBounds(this, Math.abs(year), iChronology.getMinYear(), iChronology.getMaxYear());\n    int thisWeekyear \u003d get(instant);\n    if (thisWeekyear \u003d\u003d year) {\n        return instant;\n    }\n    int thisDow \u003d iChronology.getDayOfWeek(instant);\n    int weeksInFromYear \u003d iChronology.getWeeksInYear(thisWeekyear);\n    int weeksInToYear \u003d iChronology.getWeeksInYear(year);\n    int maxOutWeeks \u003d (weeksInToYear \u003c weeksInFromYear) ? weeksInToYear : weeksInFromYear;\n    int setToWeek \u003d iChronology.getWeekOfWeekyear(instant);\n    if (setToWeek \u003e maxOutWeeks) {\n        setToWeek \u003d maxOutWeeks;\n    }\n    long workInstant \u003d instant;\n    workInstant \u003d iChronology.setYear(workInstant, year);\n    int workWoyYear \u003d get(workInstant);\n    if (workWoyYear \u003c year) {\n        workInstant +\u003d DateTimeConstants.MILLIS_PER_WEEK;\n    } else if (workWoyYear \u003e year) {\n        workInstant -\u003d DateTimeConstants.MILLIS_PER_WEEK;\n    }\n    int currentWoyWeek \u003d iChronology.getWeekOfWeekyear(workInstant);\n    workInstant \u003d workInstant + (setToWeek - currentWoyWeek) * (long) DateTimeConstants.MILLIS_PER_WEEK;\n    workInstant \u003d iChronology.dayOfWeek().set(workInstant, thisDow);\n    return workInstant;\n}",
          "path": "JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java",
          "functionStartLine": 167,
          "functionName": "set",
          "functionAnnotation": "",
          "functionDoc": "Set the Year of a week based year component of the specified time instant.\n\n@see org.joda.time.DateTimeField#set\n@param instant the time instant in millis to update.\n@param year the year (-9999,9999) to set the date to.\n@return the updated DateTime.\n@throws IllegalArgumentException  if year is invalid.\n",
          "diff": "@@ -1,27 +1,27 @@\n public long set(long instant, int year) {\n-    Utils.verifyValueBounds(this, Math.abs(year), iChronology.getMinYear(), iChronology.getMaxYear());\n+    FieldUtils.verifyValueBounds(this, Math.abs(year), iChronology.getMinYear(), iChronology.getMaxYear());\n     int thisWeekyear \u003d get(instant);\n     if (thisWeekyear \u003d\u003d year) {\n         return instant;\n     }\n-    int thisDow \u003d iChronology.dayOfWeek().get(instant);\n+    int thisDow \u003d iChronology.getDayOfWeek(instant);\n     int weeksInFromYear \u003d iChronology.getWeeksInYear(thisWeekyear);\n     int weeksInToYear \u003d iChronology.getWeeksInYear(year);\n     int maxOutWeeks \u003d (weeksInToYear \u003c weeksInFromYear) ? weeksInToYear : weeksInFromYear;\n-    int setToWeek \u003d iChronology.weekOfWeekyear().get(instant);\n+    int setToWeek \u003d iChronology.getWeekOfWeekyear(instant);\n     if (setToWeek \u003e maxOutWeeks) {\n         setToWeek \u003d maxOutWeeks;\n     }\n     long workInstant \u003d instant;\n-    workInstant \u003d iChronology.year().set(workInstant, year);\n-    int workWoyYear \u003d iChronology.weekyear().get(workInstant);\n+    workInstant \u003d iChronology.setYear(workInstant, year);\n+    int workWoyYear \u003d get(workInstant);\n     if (workWoyYear \u003c year) {\n         workInstant +\u003d DateTimeConstants.MILLIS_PER_WEEK;\n     } else if (workWoyYear \u003e year) {\n         workInstant -\u003d DateTimeConstants.MILLIS_PER_WEEK;\n     }\n-    int currentWoyWeek \u003d iChronology.weekOfWeekyear().get(workInstant);\n+    int currentWoyWeek \u003d iChronology.getWeekOfWeekyear(workInstant);\n     workInstant \u003d workInstant + (setToWeek - currentWoyWeek) * (long) DateTimeConstants.MILLIS_PER_WEEK;\n     workInstant \u003d iChronology.dayOfWeek().set(workInstant, thisDow);\n     return workInstant;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java",
            "newPath": "JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Re-organized chronology package and created new field package.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@125 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "1/27/04, 11:12 PM",
          "commitName": "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7",
          "commitAuthor": "Brian S O\u0027Neill",
          "commitDateOld": "1/11/04, 9:39 AM",
          "commitNameOld": "6f5522f58c1d2abdec37b5d22e5981716d4ec731",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 16.56,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public long set(long instant, int year) {\n    FieldUtils.verifyValueBounds(this, Math.abs(year), iChronology.getMinYear(), iChronology.getMaxYear());\n    int thisWeekyear \u003d get(instant);\n    if (thisWeekyear \u003d\u003d year) {\n        return instant;\n    }\n    int thisDow \u003d iChronology.getDayOfWeek(instant);\n    int weeksInFromYear \u003d iChronology.getWeeksInYear(thisWeekyear);\n    int weeksInToYear \u003d iChronology.getWeeksInYear(year);\n    int maxOutWeeks \u003d (weeksInToYear \u003c weeksInFromYear) ? weeksInToYear : weeksInFromYear;\n    int setToWeek \u003d iChronology.getWeekOfWeekyear(instant);\n    if (setToWeek \u003e maxOutWeeks) {\n        setToWeek \u003d maxOutWeeks;\n    }\n    long workInstant \u003d instant;\n    workInstant \u003d iChronology.setYear(workInstant, year);\n    int workWoyYear \u003d get(workInstant);\n    if (workWoyYear \u003c year) {\n        workInstant +\u003d DateTimeConstants.MILLIS_PER_WEEK;\n    } else if (workWoyYear \u003e year) {\n        workInstant -\u003d DateTimeConstants.MILLIS_PER_WEEK;\n    }\n    int currentWoyWeek \u003d iChronology.getWeekOfWeekyear(workInstant);\n    workInstant \u003d workInstant + (setToWeek - currentWoyWeek) * (long) DateTimeConstants.MILLIS_PER_WEEK;\n    workInstant \u003d iChronology.dayOfWeek().set(workInstant, thisDow);\n    return workInstant;\n}",
          "path": "JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java",
          "functionStartLine": 167,
          "functionName": "set",
          "functionAnnotation": "",
          "functionDoc": "Set the Year of a week based year component of the specified time instant.\n\n@see org.joda.time.DateTimeField#set\n@param instant the time instant in millis to update.\n@param year the year (-9999,9999) to set the date to.\n@return the updated DateTime.\n@throws IllegalArgumentException  if year is invalid.\n",
          "diff": "@@ -1,27 +1,27 @@\n public long set(long instant, int year) {\n-    Utils.verifyValueBounds(this, Math.abs(year), iChronology.getMinYear(), iChronology.getMaxYear());\n+    FieldUtils.verifyValueBounds(this, Math.abs(year), iChronology.getMinYear(), iChronology.getMaxYear());\n     int thisWeekyear \u003d get(instant);\n     if (thisWeekyear \u003d\u003d year) {\n         return instant;\n     }\n-    int thisDow \u003d iChronology.dayOfWeek().get(instant);\n+    int thisDow \u003d iChronology.getDayOfWeek(instant);\n     int weeksInFromYear \u003d iChronology.getWeeksInYear(thisWeekyear);\n     int weeksInToYear \u003d iChronology.getWeeksInYear(year);\n     int maxOutWeeks \u003d (weeksInToYear \u003c weeksInFromYear) ? weeksInToYear : weeksInFromYear;\n-    int setToWeek \u003d iChronology.weekOfWeekyear().get(instant);\n+    int setToWeek \u003d iChronology.getWeekOfWeekyear(instant);\n     if (setToWeek \u003e maxOutWeeks) {\n         setToWeek \u003d maxOutWeeks;\n     }\n     long workInstant \u003d instant;\n-    workInstant \u003d iChronology.year().set(workInstant, year);\n-    int workWoyYear \u003d iChronology.weekyear().get(workInstant);\n+    workInstant \u003d iChronology.setYear(workInstant, year);\n+    int workWoyYear \u003d get(workInstant);\n     if (workWoyYear \u003c year) {\n         workInstant +\u003d DateTimeConstants.MILLIS_PER_WEEK;\n     } else if (workWoyYear \u003e year) {\n         workInstant -\u003d DateTimeConstants.MILLIS_PER_WEEK;\n     }\n-    int currentWoyWeek \u003d iChronology.weekOfWeekyear().get(workInstant);\n+    int currentWoyWeek \u003d iChronology.getWeekOfWeekyear(workInstant);\n     workInstant \u003d workInstant + (setToWeek - currentWoyWeek) * (long) DateTimeConstants.MILLIS_PER_WEEK;\n     workInstant \u003d iChronology.dayOfWeek().set(workInstant, thisDow);\n     return workInstant;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "0e07ac6b2cff63550d7df336355ca63cc05aa40b": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "Move from Joda CVS\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@10 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "12/18/03, 6:07 PM",
      "commitName": "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Move from Joda CVS\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@10 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "12/18/03, 6:07 PM",
          "commitName": "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "12/16/03, 1:39 PM",
          "commitNameOld": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 2.19,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "public long set(long instant, int year) {\n    Utils.verifyValueBounds(this, Math.abs(year), iChronology.getMinYear(), iChronology.getMaxYear());\n    int thisWeekyear \u003d get(instant);\n    if (thisWeekyear \u003d\u003d year) {\n        return instant;\n    }\n    int thisDow \u003d iChronology.dayOfWeek().get(instant);\n    int weeksInFromYear \u003d iChronology.getWeeksInYear(thisWeekyear);\n    int weeksInToYear \u003d iChronology.getWeeksInYear(year);\n    int maxOutWeeks \u003d (weeksInToYear \u003c weeksInFromYear) ? weeksInToYear : weeksInFromYear;\n    int setToWeek \u003d iChronology.weekOfWeekyear().get(instant);\n    if (setToWeek \u003e maxOutWeeks) {\n        setToWeek \u003d maxOutWeeks;\n    }\n    long workInstant \u003d instant;\n    workInstant \u003d iChronology.year().set(workInstant, year);\n    int workWoyYear \u003d iChronology.weekyear().get(workInstant);\n    if (workWoyYear \u003c year) {\n        workInstant +\u003d DateTimeConstants.MILLIS_PER_WEEK;\n    } else if (workWoyYear \u003e year) {\n        workInstant -\u003d DateTimeConstants.MILLIS_PER_WEEK;\n    }\n    int currentWoyWeek \u003d iChronology.weekOfWeekyear().get(workInstant);\n    workInstant \u003d workInstant + (setToWeek - currentWoyWeek) * (long) DateTimeConstants.MILLIS_PER_WEEK;\n    workInstant \u003d iChronology.dayOfWeek().set(workInstant, thisDow);\n    return workInstant;\n}",
          "path": "JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java",
          "functionStartLine": 174,
          "functionName": "set",
          "functionAnnotation": "",
          "functionDoc": "Set the Year of a week based year component of the specified time instant.\n\n@see org.joda.time.DateTimeField#set\n@param instant the time instant in millis to update.\n@param year the year (-9999,9999) to set the date to.\n@return the updated DateTime.\n@throws IllegalArgumentException  if year is invalid.\n",
          "diff": "@@ -1,27 +1,27 @@\n-public long set(long millis, int year) {\n-    super.verifyValueBounds(Math.abs(year), iChronology.getMinYear(), iChronology.getMaxYear());\n-    int thisWeekyear \u003d get(millis);\n+public long set(long instant, int year) {\n+    Utils.verifyValueBounds(this, Math.abs(year), iChronology.getMinYear(), iChronology.getMaxYear());\n+    int thisWeekyear \u003d get(instant);\n     if (thisWeekyear \u003d\u003d year) {\n-        return millis;\n+        return instant;\n     }\n-    int thisDow \u003d iChronology.dayOfWeek().get(millis);\n+    int thisDow \u003d iChronology.dayOfWeek().get(instant);\n     int weeksInFromYear \u003d iChronology.getWeeksInYear(thisWeekyear);\n     int weeksInToYear \u003d iChronology.getWeeksInYear(year);\n     int maxOutWeeks \u003d (weeksInToYear \u003c weeksInFromYear) ? weeksInToYear : weeksInFromYear;\n-    int setToWeek \u003d iChronology.weekOfWeekyear().get(millis);\n+    int setToWeek \u003d iChronology.weekOfWeekyear().get(instant);\n     if (setToWeek \u003e maxOutWeeks) {\n         setToWeek \u003d maxOutWeeks;\n     }\n-    long workMillis \u003d millis;\n-    workMillis \u003d iChronology.year().set(workMillis, year);\n-    int workWoyYear \u003d iChronology.weekyear().get(workMillis);\n+    long workInstant \u003d instant;\n+    workInstant \u003d iChronology.year().set(workInstant, year);\n+    int workWoyYear \u003d iChronology.weekyear().get(workInstant);\n     if (workWoyYear \u003c year) {\n-        workMillis +\u003d DateTimeConstants.MILLIS_PER_WEEK;\n+        workInstant +\u003d DateTimeConstants.MILLIS_PER_WEEK;\n     } else if (workWoyYear \u003e year) {\n-        workMillis -\u003d DateTimeConstants.MILLIS_PER_WEEK;\n+        workInstant -\u003d DateTimeConstants.MILLIS_PER_WEEK;\n     }\n-    int currentWoyWeek \u003d iChronology.weekOfWeekyear().get(workMillis);\n-    workMillis \u003d workMillis + (setToWeek - currentWoyWeek) * (long) DateTimeConstants.MILLIS_PER_WEEK;\n-    workMillis \u003d iChronology.dayOfWeek().set(workMillis, thisDow);\n-    return workMillis;\n+    int currentWoyWeek \u003d iChronology.weekOfWeekyear().get(workInstant);\n+    workInstant \u003d workInstant + (setToWeek - currentWoyWeek) * (long) DateTimeConstants.MILLIS_PER_WEEK;\n+    workInstant \u003d iChronology.dayOfWeek().set(workInstant, thisDow);\n+    return workInstant;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[millis-long, year-int]",
            "newValue": "[instant-long, year-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Move from Joda CVS\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@10 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "12/18/03, 6:07 PM",
          "commitName": "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "12/16/03, 1:39 PM",
          "commitNameOld": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 2.19,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "public long set(long instant, int year) {\n    Utils.verifyValueBounds(this, Math.abs(year), iChronology.getMinYear(), iChronology.getMaxYear());\n    int thisWeekyear \u003d get(instant);\n    if (thisWeekyear \u003d\u003d year) {\n        return instant;\n    }\n    int thisDow \u003d iChronology.dayOfWeek().get(instant);\n    int weeksInFromYear \u003d iChronology.getWeeksInYear(thisWeekyear);\n    int weeksInToYear \u003d iChronology.getWeeksInYear(year);\n    int maxOutWeeks \u003d (weeksInToYear \u003c weeksInFromYear) ? weeksInToYear : weeksInFromYear;\n    int setToWeek \u003d iChronology.weekOfWeekyear().get(instant);\n    if (setToWeek \u003e maxOutWeeks) {\n        setToWeek \u003d maxOutWeeks;\n    }\n    long workInstant \u003d instant;\n    workInstant \u003d iChronology.year().set(workInstant, year);\n    int workWoyYear \u003d iChronology.weekyear().get(workInstant);\n    if (workWoyYear \u003c year) {\n        workInstant +\u003d DateTimeConstants.MILLIS_PER_WEEK;\n    } else if (workWoyYear \u003e year) {\n        workInstant -\u003d DateTimeConstants.MILLIS_PER_WEEK;\n    }\n    int currentWoyWeek \u003d iChronology.weekOfWeekyear().get(workInstant);\n    workInstant \u003d workInstant + (setToWeek - currentWoyWeek) * (long) DateTimeConstants.MILLIS_PER_WEEK;\n    workInstant \u003d iChronology.dayOfWeek().set(workInstant, thisDow);\n    return workInstant;\n}",
          "path": "JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java",
          "functionStartLine": 174,
          "functionName": "set",
          "functionAnnotation": "",
          "functionDoc": "Set the Year of a week based year component of the specified time instant.\n\n@see org.joda.time.DateTimeField#set\n@param instant the time instant in millis to update.\n@param year the year (-9999,9999) to set the date to.\n@return the updated DateTime.\n@throws IllegalArgumentException  if year is invalid.\n",
          "diff": "@@ -1,27 +1,27 @@\n-public long set(long millis, int year) {\n-    super.verifyValueBounds(Math.abs(year), iChronology.getMinYear(), iChronology.getMaxYear());\n-    int thisWeekyear \u003d get(millis);\n+public long set(long instant, int year) {\n+    Utils.verifyValueBounds(this, Math.abs(year), iChronology.getMinYear(), iChronology.getMaxYear());\n+    int thisWeekyear \u003d get(instant);\n     if (thisWeekyear \u003d\u003d year) {\n-        return millis;\n+        return instant;\n     }\n-    int thisDow \u003d iChronology.dayOfWeek().get(millis);\n+    int thisDow \u003d iChronology.dayOfWeek().get(instant);\n     int weeksInFromYear \u003d iChronology.getWeeksInYear(thisWeekyear);\n     int weeksInToYear \u003d iChronology.getWeeksInYear(year);\n     int maxOutWeeks \u003d (weeksInToYear \u003c weeksInFromYear) ? weeksInToYear : weeksInFromYear;\n-    int setToWeek \u003d iChronology.weekOfWeekyear().get(millis);\n+    int setToWeek \u003d iChronology.weekOfWeekyear().get(instant);\n     if (setToWeek \u003e maxOutWeeks) {\n         setToWeek \u003d maxOutWeeks;\n     }\n-    long workMillis \u003d millis;\n-    workMillis \u003d iChronology.year().set(workMillis, year);\n-    int workWoyYear \u003d iChronology.weekyear().get(workMillis);\n+    long workInstant \u003d instant;\n+    workInstant \u003d iChronology.year().set(workInstant, year);\n+    int workWoyYear \u003d iChronology.weekyear().get(workInstant);\n     if (workWoyYear \u003c year) {\n-        workMillis +\u003d DateTimeConstants.MILLIS_PER_WEEK;\n+        workInstant +\u003d DateTimeConstants.MILLIS_PER_WEEK;\n     } else if (workWoyYear \u003e year) {\n-        workMillis -\u003d DateTimeConstants.MILLIS_PER_WEEK;\n+        workInstant -\u003d DateTimeConstants.MILLIS_PER_WEEK;\n     }\n-    int currentWoyWeek \u003d iChronology.weekOfWeekyear().get(workMillis);\n-    workMillis \u003d workMillis + (setToWeek - currentWoyWeek) * (long) DateTimeConstants.MILLIS_PER_WEEK;\n-    workMillis \u003d iChronology.dayOfWeek().set(workMillis, thisDow);\n-    return workMillis;\n+    int currentWoyWeek \u003d iChronology.weekOfWeekyear().get(workInstant);\n+    workInstant \u003d workInstant + (setToWeek - currentWoyWeek) * (long) DateTimeConstants.MILLIS_PER_WEEK;\n+    workInstant \u003d iChronology.dayOfWeek().set(workInstant, thisDow);\n+    return workInstant;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Move from Joda CVS\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@10 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "12/18/03, 6:07 PM",
          "commitName": "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "12/16/03, 1:39 PM",
          "commitNameOld": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 2.19,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "public long set(long instant, int year) {\n    Utils.verifyValueBounds(this, Math.abs(year), iChronology.getMinYear(), iChronology.getMaxYear());\n    int thisWeekyear \u003d get(instant);\n    if (thisWeekyear \u003d\u003d year) {\n        return instant;\n    }\n    int thisDow \u003d iChronology.dayOfWeek().get(instant);\n    int weeksInFromYear \u003d iChronology.getWeeksInYear(thisWeekyear);\n    int weeksInToYear \u003d iChronology.getWeeksInYear(year);\n    int maxOutWeeks \u003d (weeksInToYear \u003c weeksInFromYear) ? weeksInToYear : weeksInFromYear;\n    int setToWeek \u003d iChronology.weekOfWeekyear().get(instant);\n    if (setToWeek \u003e maxOutWeeks) {\n        setToWeek \u003d maxOutWeeks;\n    }\n    long workInstant \u003d instant;\n    workInstant \u003d iChronology.year().set(workInstant, year);\n    int workWoyYear \u003d iChronology.weekyear().get(workInstant);\n    if (workWoyYear \u003c year) {\n        workInstant +\u003d DateTimeConstants.MILLIS_PER_WEEK;\n    } else if (workWoyYear \u003e year) {\n        workInstant -\u003d DateTimeConstants.MILLIS_PER_WEEK;\n    }\n    int currentWoyWeek \u003d iChronology.weekOfWeekyear().get(workInstant);\n    workInstant \u003d workInstant + (setToWeek - currentWoyWeek) * (long) DateTimeConstants.MILLIS_PER_WEEK;\n    workInstant \u003d iChronology.dayOfWeek().set(workInstant, thisDow);\n    return workInstant;\n}",
          "path": "JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java",
          "functionStartLine": 174,
          "functionName": "set",
          "functionAnnotation": "",
          "functionDoc": "Set the Year of a week based year component of the specified time instant.\n\n@see org.joda.time.DateTimeField#set\n@param instant the time instant in millis to update.\n@param year the year (-9999,9999) to set the date to.\n@return the updated DateTime.\n@throws IllegalArgumentException  if year is invalid.\n",
          "diff": "@@ -1,27 +1,27 @@\n-public long set(long millis, int year) {\n-    super.verifyValueBounds(Math.abs(year), iChronology.getMinYear(), iChronology.getMaxYear());\n-    int thisWeekyear \u003d get(millis);\n+public long set(long instant, int year) {\n+    Utils.verifyValueBounds(this, Math.abs(year), iChronology.getMinYear(), iChronology.getMaxYear());\n+    int thisWeekyear \u003d get(instant);\n     if (thisWeekyear \u003d\u003d year) {\n-        return millis;\n+        return instant;\n     }\n-    int thisDow \u003d iChronology.dayOfWeek().get(millis);\n+    int thisDow \u003d iChronology.dayOfWeek().get(instant);\n     int weeksInFromYear \u003d iChronology.getWeeksInYear(thisWeekyear);\n     int weeksInToYear \u003d iChronology.getWeeksInYear(year);\n     int maxOutWeeks \u003d (weeksInToYear \u003c weeksInFromYear) ? weeksInToYear : weeksInFromYear;\n-    int setToWeek \u003d iChronology.weekOfWeekyear().get(millis);\n+    int setToWeek \u003d iChronology.weekOfWeekyear().get(instant);\n     if (setToWeek \u003e maxOutWeeks) {\n         setToWeek \u003d maxOutWeeks;\n     }\n-    long workMillis \u003d millis;\n-    workMillis \u003d iChronology.year().set(workMillis, year);\n-    int workWoyYear \u003d iChronology.weekyear().get(workMillis);\n+    long workInstant \u003d instant;\n+    workInstant \u003d iChronology.year().set(workInstant, year);\n+    int workWoyYear \u003d iChronology.weekyear().get(workInstant);\n     if (workWoyYear \u003c year) {\n-        workMillis +\u003d DateTimeConstants.MILLIS_PER_WEEK;\n+        workInstant +\u003d DateTimeConstants.MILLIS_PER_WEEK;\n     } else if (workWoyYear \u003e year) {\n-        workMillis -\u003d DateTimeConstants.MILLIS_PER_WEEK;\n+        workInstant -\u003d DateTimeConstants.MILLIS_PER_WEEK;\n     }\n-    int currentWoyWeek \u003d iChronology.weekOfWeekyear().get(workMillis);\n-    workMillis \u003d workMillis + (setToWeek - currentWoyWeek) * (long) DateTimeConstants.MILLIS_PER_WEEK;\n-    workMillis \u003d iChronology.dayOfWeek().set(workMillis, thisDow);\n-    return workMillis;\n+    int currentWoyWeek \u003d iChronology.weekOfWeekyear().get(workInstant);\n+    workInstant \u003d workInstant + (setToWeek - currentWoyWeek) * (long) DateTimeConstants.MILLIS_PER_WEEK;\n+    workInstant \u003d iChronology.dayOfWeek().set(workInstant, thisDow);\n+    return workInstant;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Set the Year of a week based year component of the specified time instant.\n\n@see org.joda.time.DateTimeField#set\n@param millis the time instant in millis to update.\n@param year the year (-9999,9999) to set the date to.\n@return the updated DateTime.\n@throws IllegalArgumentException  if year is invalid.\n",
            "newValue": "Set the Year of a week based year component of the specified time instant.\n\n@see org.joda.time.DateTimeField#set\n@param instant the time instant in millis to update.\n@param year the year (-9999,9999) to set the date to.\n@return the updated DateTime.\n@throws IllegalArgumentException  if year is invalid.\n"
          }
        }
      ]
    },
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb": {
      "type": "Yintroduced",
      "commitMessage": "Move version 0.9 to joda-time repository\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@4 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "12/16/03, 1:39 PM",
      "commitName": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
      "commitAuthor": "Stephen Colebourne",
      "diff": "@@ -0,0 +1,27 @@\n+public long set(long millis, int year) {\n+    super.verifyValueBounds(Math.abs(year), iChronology.getMinYear(), iChronology.getMaxYear());\n+    int thisWeekyear \u003d get(millis);\n+    if (thisWeekyear \u003d\u003d year) {\n+        return millis;\n+    }\n+    int thisDow \u003d iChronology.dayOfWeek().get(millis);\n+    int weeksInFromYear \u003d iChronology.getWeeksInYear(thisWeekyear);\n+    int weeksInToYear \u003d iChronology.getWeeksInYear(year);\n+    int maxOutWeeks \u003d (weeksInToYear \u003c weeksInFromYear) ? weeksInToYear : weeksInFromYear;\n+    int setToWeek \u003d iChronology.weekOfWeekyear().get(millis);\n+    if (setToWeek \u003e maxOutWeeks) {\n+        setToWeek \u003d maxOutWeeks;\n+    }\n+    long workMillis \u003d millis;\n+    workMillis \u003d iChronology.year().set(workMillis, year);\n+    int workWoyYear \u003d iChronology.weekyear().get(workMillis);\n+    if (workWoyYear \u003c year) {\n+        workMillis +\u003d DateTimeConstants.MILLIS_PER_WEEK;\n+    } else if (workWoyYear \u003e year) {\n+        workMillis -\u003d DateTimeConstants.MILLIS_PER_WEEK;\n+    }\n+    int currentWoyWeek \u003d iChronology.weekOfWeekyear().get(workMillis);\n+    workMillis \u003d workMillis + (setToWeek - currentWoyWeek) * (long) DateTimeConstants.MILLIS_PER_WEEK;\n+    workMillis \u003d iChronology.dayOfWeek().set(workMillis, thisDow);\n+    return workMillis;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public long set(long millis, int year) {\n    super.verifyValueBounds(Math.abs(year), iChronology.getMinYear(), iChronology.getMaxYear());\n    int thisWeekyear \u003d get(millis);\n    if (thisWeekyear \u003d\u003d year) {\n        return millis;\n    }\n    int thisDow \u003d iChronology.dayOfWeek().get(millis);\n    int weeksInFromYear \u003d iChronology.getWeeksInYear(thisWeekyear);\n    int weeksInToYear \u003d iChronology.getWeeksInYear(year);\n    int maxOutWeeks \u003d (weeksInToYear \u003c weeksInFromYear) ? weeksInToYear : weeksInFromYear;\n    int setToWeek \u003d iChronology.weekOfWeekyear().get(millis);\n    if (setToWeek \u003e maxOutWeeks) {\n        setToWeek \u003d maxOutWeeks;\n    }\n    long workMillis \u003d millis;\n    workMillis \u003d iChronology.year().set(workMillis, year);\n    int workWoyYear \u003d iChronology.weekyear().get(workMillis);\n    if (workWoyYear \u003c year) {\n        workMillis +\u003d DateTimeConstants.MILLIS_PER_WEEK;\n    } else if (workWoyYear \u003e year) {\n        workMillis -\u003d DateTimeConstants.MILLIS_PER_WEEK;\n    }\n    int currentWoyWeek \u003d iChronology.weekOfWeekyear().get(workMillis);\n    workMillis \u003d workMillis + (setToWeek - currentWoyWeek) * (long) DateTimeConstants.MILLIS_PER_WEEK;\n    workMillis \u003d iChronology.dayOfWeek().set(workMillis, thisDow);\n    return workMillis;\n}",
      "path": "JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java",
      "functionStartLine": 165,
      "functionName": "set",
      "functionAnnotation": "",
      "functionDoc": "Set the Year of a week based year component of the specified time instant.\n\n@see org.joda.time.DateTimeField#set\n@param millis the time instant in millis to update.\n@param year the year (-9999,9999) to set the date to.\n@return the updated DateTime.\n@throws IllegalArgumentException  if year is invalid.\n"
    }
  }
}