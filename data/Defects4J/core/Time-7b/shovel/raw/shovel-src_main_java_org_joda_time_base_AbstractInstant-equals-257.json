{
  "origin": "codeshovel",
  "repositoryName": "Time-7b",
  "repositoryPath": "/tmp/Time-7b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractInstant.java",
  "functionName": "equals",
  "functionId": "equals___readableInstant-Object",
  "sourceFilePath": "src/main/java/org/joda/time/base/AbstractInstant.java",
  "functionAnnotation": "",
  "functionDoc": "Compares this object with the specified object for equality based\non the millisecond instant, chronology and time zone.\n\u003cp\u003e\nTwo objects which represent the same instant in time, but are in\ndifferent time zones (based on time zone id), will be considered to\nbe different. Only two objects with the same {@link DateTimeZone},\n{@link Chronology} and instant are equal.\n\u003cp\u003e\nSee {@link #isEqual(ReadableInstant)} for an equals method that\nignores the Chronology and time zone.\n\u003cp\u003e\nAll ReadableInstant instances are accepted.\n\n@param readableInstant a readable instant to check against\n@return true if millisecond and chronology are equal, false if\n not or the instant is null or of an incorrect type\n",
  "functionStartLine": 257,
  "functionEndLine": 269,
  "numCommitsSeen": 38,
  "timeTaken": 1266,
  "changeHistory": [
    "df4a82f4fb46cc2248280c462e18f08d55a3d112",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1",
    "496a7466a870a0849b4e59856bd3a34ea599bf1d",
    "9d1583cdfe52999c071b4151455e8c53e2468abb",
    "99af0da006022513fbb260c2c3a8648eb3059406",
    "61017942cfd898a76d0531d3f247ecddbb452730",
    "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb"
  ],
  "changeHistoryShort": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": "Yfilerename",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": "Yfilerename",
    "496a7466a870a0849b4e59856bd3a34ea599bf1d": "Ydocchange",
    "9d1583cdfe52999c071b4151455e8c53e2468abb": "Ybodychange",
    "99af0da006022513fbb260c2c3a8648eb3059406": "Ymultichange(Yfilerename,Ymodifierchange,Ybodychange)",
    "61017942cfd898a76d0531d3f247ecddbb452730": "Ymultichange(Ymodifierchange,Ybodychange)",
    "0e07ac6b2cff63550d7df336355ca63cc05aa40b": "Ymultichange(Ymodifierchange,Ybodychange)",
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb": "Yintroduced"
  },
  "changeHistoryDetails": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": {
      "type": "Yfilerename",
      "commitMessage": "Remove JodaTime folder moving files to top level\n",
      "commitDate": "5/16/11, 10:02 AM",
      "commitName": "df4a82f4fb46cc2248280c462e18f08d55a3d112",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "5/16/11, 9:58 AM",
      "commitNameOld": "72b22654962284bac59c2777131b42a2d1f53228",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public boolean equals(Object readableInstant) {\n    if (this \u003d\u003d readableInstant) {\n        return true;\n    }\n    if (readableInstant instanceof ReadableInstant \u003d\u003d false) {\n        return false;\n    }\n    ReadableInstant otherInstant \u003d (ReadableInstant) readableInstant;\n    return getMillis() \u003d\u003d otherInstant.getMillis() \u0026\u0026 FieldUtils.equals(getChronology(), otherInstant.getChronology());\n}",
      "path": "src/main/java/org/joda/time/base/AbstractInstant.java",
      "functionStartLine": 257,
      "functionName": "equals",
      "functionAnnotation": "",
      "functionDoc": "Compares this object with the specified object for equality based\non the millisecond instant, chronology and time zone.\n\u003cp\u003e\nTwo objects which represent the same instant in time, but are in\ndifferent time zones (based on time zone id), will be considered to\nbe different. Only two objects with the same {@link DateTimeZone},\n{@link Chronology} and instant are equal.\n\u003cp\u003e\nSee {@link #isEqual(ReadableInstant)} for an equals method that\nignores the Chronology and time zone.\n\u003cp\u003e\nAll ReadableInstant instances are accepted.\n\n@param readableInstant a readable instant to check against\n@return true if millisecond and chronology are equal, false if\n not or the instant is null or of an incorrect type\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/main/java/org/joda/time/base/AbstractInstant.java",
        "newPath": "src/main/java/org/joda/time/base/AbstractInstant.java"
      }
    },
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": {
      "type": "Yfilerename",
      "commitMessage": "Convert to maven 2\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1540 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/8/10, 5:17 PM",
      "commitName": "53feb3fa56af7260e607844524b7e5a9be49ecc1",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/8/10, 5:02 PM",
      "commitNameOld": "7fa2ceaf5d95d050095432aa646ea803aa35e122",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public boolean equals(Object readableInstant) {\n    if (this \u003d\u003d readableInstant) {\n        return true;\n    }\n    if (readableInstant instanceof ReadableInstant \u003d\u003d false) {\n        return false;\n    }\n    ReadableInstant otherInstant \u003d (ReadableInstant) readableInstant;\n    return getMillis() \u003d\u003d otherInstant.getMillis() \u0026\u0026 FieldUtils.equals(getChronology(), otherInstant.getChronology());\n}",
      "path": "JodaTime/src/main/java/org/joda/time/base/AbstractInstant.java",
      "functionStartLine": 256,
      "functionName": "equals",
      "functionAnnotation": "",
      "functionDoc": "Compares this object with the specified object for equality based\non the millisecond instant, chronology and time zone.\n\u003cp\u003e\nTwo objects which represent the same instant in time, but are in\ndifferent time zones (based on time zone id), will be considered to\nbe different. Only two objects with the same {@link DateTimeZone},\n{@link Chronology} and instant are equal.\n\u003cp\u003e\nSee {@link #isEqual(ReadableInstant)} for an equals method that\nignores the Chronology and time zone.\n\u003cp\u003e\nAll ReadableInstant instances are accepted.\n\n@param readableInstant a readable instant to check against\n@return true if millisecond and chronology are equal, false if\n not or the instant is null or of an incorrect type\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/java/org/joda/time/base/AbstractInstant.java",
        "newPath": "JodaTime/src/main/java/org/joda/time/base/AbstractInstant.java"
      }
    },
    "496a7466a870a0849b4e59856bd3a34ea599bf1d": {
      "type": "Ydocchange",
      "commitMessage": "Clarify javadoc, suggested by Neil Martin\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1229 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/4/07, 4:47 AM",
      "commitName": "496a7466a870a0849b4e59856bd3a34ea599bf1d",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "10/21/06, 10:00 AM",
      "commitNameOld": "9d1583cdfe52999c071b4151455e8c53e2468abb",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 286.78,
      "commitsBetweenForRepo": 88,
      "commitsBetweenForFile": 1,
      "actualSource": "public boolean equals(Object readableInstant) {\n    if (this \u003d\u003d readableInstant) {\n        return true;\n    }\n    if (readableInstant instanceof ReadableInstant \u003d\u003d false) {\n        return false;\n    }\n    ReadableInstant otherInstant \u003d (ReadableInstant) readableInstant;\n    return getMillis() \u003d\u003d otherInstant.getMillis() \u0026\u0026 FieldUtils.equals(getChronology(), otherInstant.getChronology());\n}",
      "path": "JodaTime/src/java/org/joda/time/base/AbstractInstant.java",
      "functionStartLine": 256,
      "functionName": "equals",
      "functionAnnotation": "",
      "functionDoc": "Compares this object with the specified object for equality based\non the millisecond instant, chronology and time zone.\n\u003cp\u003e\nTwo objects which represent the same instant in time, but are in\ndifferent time zones (based on time zone id), will be considered to\nbe different. Only two objects with the same {@link DateTimeZone},\n{@link Chronology} and instant are equal.\n\u003cp\u003e\nSee {@link #isEqual(ReadableInstant)} for an equals method that\nignores the Chronology and time zone.\n\u003cp\u003e\nAll ReadableInstant instances are accepted.\n\n@param readableInstant a readable instant to check against\n@return true if millisecond and chronology are equal, false if\n not or the instant is null or of an incorrect type\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Compares this object with the specified object for equality based\non the millisecond instant and the Chronology.\n\u003cp\u003e\nAll ReadableInstant instances are accepted.\n\u003cp\u003e\nSee {@link #isEqual(ReadableInstant)} for an equals method that\nignores the Chronology.\n\n@param readableInstant a readable instant to check against\n@return true if millisecond and chronology are equal, false if\n not or the instant is null or of an incorrect type\n",
        "newValue": "Compares this object with the specified object for equality based\non the millisecond instant, chronology and time zone.\n\u003cp\u003e\nTwo objects which represent the same instant in time, but are in\ndifferent time zones (based on time zone id), will be considered to\nbe different. Only two objects with the same {@link DateTimeZone},\n{@link Chronology} and instant are equal.\n\u003cp\u003e\nSee {@link #isEqual(ReadableInstant)} for an equals method that\nignores the Chronology and time zone.\n\u003cp\u003e\nAll ReadableInstant instances are accepted.\n\n@param readableInstant a readable instant to check against\n@return true if millisecond and chronology are equal, false if\n not or the instant is null or of an incorrect type\n"
      }
    },
    "9d1583cdfe52999c071b4151455e8c53e2468abb": {
      "type": "Ybodychange",
      "commitMessage": "Fix bug where Chronology instances were compared by identity instead of equals()\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1139 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "10/21/06, 10:00 AM",
      "commitName": "9d1583cdfe52999c071b4151455e8c53e2468abb",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "2/10/06, 4:17 PM",
      "commitNameOld": "6744d06e1d8bedcd2a501f0a058bdc8d67c35371",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 252.7,
      "commitsBetweenForRepo": 108,
      "commitsBetweenForFile": 1,
      "actualSource": "public boolean equals(Object readableInstant) {\n    if (this \u003d\u003d readableInstant) {\n        return true;\n    }\n    if (readableInstant instanceof ReadableInstant \u003d\u003d false) {\n        return false;\n    }\n    ReadableInstant otherInstant \u003d (ReadableInstant) readableInstant;\n    return getMillis() \u003d\u003d otherInstant.getMillis() \u0026\u0026 FieldUtils.equals(getChronology(), otherInstant.getChronology());\n}",
      "path": "JodaTime/src/java/org/joda/time/base/AbstractInstant.java",
      "functionStartLine": 251,
      "functionName": "equals",
      "functionAnnotation": "",
      "functionDoc": "Compares this object with the specified object for equality based\non the millisecond instant and the Chronology.\n\u003cp\u003e\nAll ReadableInstant instances are accepted.\n\u003cp\u003e\nSee {@link #isEqual(ReadableInstant)} for an equals method that\nignores the Chronology.\n\n@param readableInstant a readable instant to check against\n@return true if millisecond and chronology are equal, false if\n not or the instant is null or of an incorrect type\n",
      "diff": "@@ -1,18 +1,10 @@\n public boolean equals(Object readableInstant) {\n     if (this \u003d\u003d readableInstant) {\n         return true;\n     }\n-    if (readableInstant instanceof ReadableInstant) {\n-        ReadableInstant otherInstant \u003d (ReadableInstant) readableInstant;\n-        if (getMillis() \u003d\u003d otherInstant.getMillis()) {\n-            Chronology chrono \u003d getChronology();\n-            if (chrono \u003d\u003d otherInstant.getChronology()) {\n-                return true;\n-            }\n-            if (chrono !\u003d null \u0026\u0026 chrono.equals(otherInstant.getChronology())) {\n-                return true;\n-            }\n-        }\n+    if (readableInstant instanceof ReadableInstant \u003d\u003d false) {\n+        return false;\n     }\n-    return false;\n+    ReadableInstant otherInstant \u003d (ReadableInstant) readableInstant;\n+    return getMillis() \u003d\u003d otherInstant.getMillis() \u0026\u0026 FieldUtils.equals(getChronology(), otherInstant.getChronology());\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "99af0da006022513fbb260c2c3a8648eb3059406": {
      "type": "Ymultichange(Yfilerename,Ymodifierchange,Ybodychange)",
      "commitMessage": "Create base subpackage\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@402 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/20/04, 2:20 PM",
      "commitName": "99af0da006022513fbb260c2c3a8648eb3059406",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "Create base subpackage\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@402 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "8/20/04, 2:20 PM",
          "commitName": "99af0da006022513fbb260c2c3a8648eb3059406",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "8/17/04, 1:00 PM",
          "commitNameOld": "1a3e1f54707620cb60a0fdb950c8c84f59f30fc2",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 3.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public boolean equals(Object readableInstant) {\n    if (this \u003d\u003d readableInstant) {\n        return true;\n    }\n    if (readableInstant instanceof ReadableInstant) {\n        ReadableInstant otherInstant \u003d (ReadableInstant) readableInstant;\n        if (getMillis() \u003d\u003d otherInstant.getMillis()) {\n            Chronology chrono \u003d getChronology();\n            if (chrono \u003d\u003d otherInstant.getChronology()) {\n                return true;\n            }\n            if (chrono !\u003d null \u0026\u0026 chrono.equals(otherInstant.getChronology())) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
          "path": "JodaTime/src/java/org/joda/time/base/AbstractInstant.java",
          "functionStartLine": 327,
          "functionName": "equals",
          "functionAnnotation": "",
          "functionDoc": "Compares this object with the specified object for equality based\non the millisecond instant and the Chronology.\n\u003cp\u003e\nAll ReadableInstant instances are accepted.\n\u003cp\u003e\nSee {@link #isEqual(ReadableInstant)} for an equals method that\nignores the Chronology.\n\n@param readableInstant a readable instant to check against\n@return true if millisecond and chronology are equal, false if\n not or the instant is null or of an incorrect type\n",
          "diff": "@@ -1,18 +1,18 @@\n-public final boolean equals(Object readableInstant) {\n+public boolean equals(Object readableInstant) {\n     if (this \u003d\u003d readableInstant) {\n         return true;\n     }\n     if (readableInstant instanceof ReadableInstant) {\n         ReadableInstant otherInstant \u003d (ReadableInstant) readableInstant;\n         if (getMillis() \u003d\u003d otherInstant.getMillis()) {\n             Chronology chrono \u003d getChronology();\n             if (chrono \u003d\u003d otherInstant.getChronology()) {\n                 return true;\n             }\n             if (chrono !\u003d null \u0026\u0026 chrono.equals(otherInstant.getChronology())) {\n                 return true;\n             }\n         }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "JodaTime/src/java/org/joda/time/AbstractInstant.java",
            "newPath": "JodaTime/src/java/org/joda/time/base/AbstractInstant.java"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Create base subpackage\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@402 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "8/20/04, 2:20 PM",
          "commitName": "99af0da006022513fbb260c2c3a8648eb3059406",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "8/17/04, 1:00 PM",
          "commitNameOld": "1a3e1f54707620cb60a0fdb950c8c84f59f30fc2",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 3.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public boolean equals(Object readableInstant) {\n    if (this \u003d\u003d readableInstant) {\n        return true;\n    }\n    if (readableInstant instanceof ReadableInstant) {\n        ReadableInstant otherInstant \u003d (ReadableInstant) readableInstant;\n        if (getMillis() \u003d\u003d otherInstant.getMillis()) {\n            Chronology chrono \u003d getChronology();\n            if (chrono \u003d\u003d otherInstant.getChronology()) {\n                return true;\n            }\n            if (chrono !\u003d null \u0026\u0026 chrono.equals(otherInstant.getChronology())) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
          "path": "JodaTime/src/java/org/joda/time/base/AbstractInstant.java",
          "functionStartLine": 327,
          "functionName": "equals",
          "functionAnnotation": "",
          "functionDoc": "Compares this object with the specified object for equality based\non the millisecond instant and the Chronology.\n\u003cp\u003e\nAll ReadableInstant instances are accepted.\n\u003cp\u003e\nSee {@link #isEqual(ReadableInstant)} for an equals method that\nignores the Chronology.\n\n@param readableInstant a readable instant to check against\n@return true if millisecond and chronology are equal, false if\n not or the instant is null or of an incorrect type\n",
          "diff": "@@ -1,18 +1,18 @@\n-public final boolean equals(Object readableInstant) {\n+public boolean equals(Object readableInstant) {\n     if (this \u003d\u003d readableInstant) {\n         return true;\n     }\n     if (readableInstant instanceof ReadableInstant) {\n         ReadableInstant otherInstant \u003d (ReadableInstant) readableInstant;\n         if (getMillis() \u003d\u003d otherInstant.getMillis()) {\n             Chronology chrono \u003d getChronology();\n             if (chrono \u003d\u003d otherInstant.getChronology()) {\n                 return true;\n             }\n             if (chrono !\u003d null \u0026\u0026 chrono.equals(otherInstant.getChronology())) {\n                 return true;\n             }\n         }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[public, final]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Create base subpackage\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@402 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "8/20/04, 2:20 PM",
          "commitName": "99af0da006022513fbb260c2c3a8648eb3059406",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "8/17/04, 1:00 PM",
          "commitNameOld": "1a3e1f54707620cb60a0fdb950c8c84f59f30fc2",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 3.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public boolean equals(Object readableInstant) {\n    if (this \u003d\u003d readableInstant) {\n        return true;\n    }\n    if (readableInstant instanceof ReadableInstant) {\n        ReadableInstant otherInstant \u003d (ReadableInstant) readableInstant;\n        if (getMillis() \u003d\u003d otherInstant.getMillis()) {\n            Chronology chrono \u003d getChronology();\n            if (chrono \u003d\u003d otherInstant.getChronology()) {\n                return true;\n            }\n            if (chrono !\u003d null \u0026\u0026 chrono.equals(otherInstant.getChronology())) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
          "path": "JodaTime/src/java/org/joda/time/base/AbstractInstant.java",
          "functionStartLine": 327,
          "functionName": "equals",
          "functionAnnotation": "",
          "functionDoc": "Compares this object with the specified object for equality based\non the millisecond instant and the Chronology.\n\u003cp\u003e\nAll ReadableInstant instances are accepted.\n\u003cp\u003e\nSee {@link #isEqual(ReadableInstant)} for an equals method that\nignores the Chronology.\n\n@param readableInstant a readable instant to check against\n@return true if millisecond and chronology are equal, false if\n not or the instant is null or of an incorrect type\n",
          "diff": "@@ -1,18 +1,18 @@\n-public final boolean equals(Object readableInstant) {\n+public boolean equals(Object readableInstant) {\n     if (this \u003d\u003d readableInstant) {\n         return true;\n     }\n     if (readableInstant instanceof ReadableInstant) {\n         ReadableInstant otherInstant \u003d (ReadableInstant) readableInstant;\n         if (getMillis() \u003d\u003d otherInstant.getMillis()) {\n             Chronology chrono \u003d getChronology();\n             if (chrono \u003d\u003d otherInstant.getChronology()) {\n                 return true;\n             }\n             if (chrono !\u003d null \u0026\u0026 chrono.equals(otherInstant.getChronology())) {\n                 return true;\n             }\n         }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "61017942cfd898a76d0531d3f247ecddbb452730": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "Fix equals hashcode contract\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@310 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "7/17/04, 5:21 PM",
      "commitName": "61017942cfd898a76d0531d3f247ecddbb452730",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "Fix equals hashcode contract\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@310 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "7/17/04, 5:21 PM",
          "commitName": "61017942cfd898a76d0531d3f247ecddbb452730",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "7/3/04, 3:38 PM",
          "commitNameOld": "8acb3651b1e903438a4a98811b7422c0f4c00ff3",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 14.07,
          "commitsBetweenForRepo": 58,
          "commitsBetweenForFile": 1,
          "actualSource": "public final boolean equals(Object readableInstant) {\n    if (this \u003d\u003d readableInstant) {\n        return true;\n    }\n    if (readableInstant instanceof ReadableInstant) {\n        ReadableInstant otherInstant \u003d (ReadableInstant) readableInstant;\n        if (getMillis() \u003d\u003d otherInstant.getMillis()) {\n            Chronology chrono \u003d getChronology();\n            if (chrono \u003d\u003d otherInstant.getChronology()) {\n                return true;\n            }\n            if (chrono !\u003d null \u0026\u0026 chrono.equals(otherInstant.getChronology())) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
          "path": "JodaTime/src/java/org/joda/time/AbstractInstant.java",
          "functionStartLine": 315,
          "functionName": "equals",
          "functionAnnotation": "",
          "functionDoc": "Compares this object with the specified object for equality based\non the millisecond instant and the Chronology.\n\u003cp\u003e\nAll ReadableInstant instances are accepted.\n\u003cp\u003e\nSee {@link #isEqual(ReadableInstant)} for an equals method that\nignores the Chronology.\n\n@param readableInstant a readable instant to check against\n@return true if millisecond and chronology are equal, false if\n not or the instant is null or of an incorrect type\n",
          "diff": "@@ -1,18 +1,18 @@\n-public boolean equals(Object readableInstant) {\n+public final boolean equals(Object readableInstant) {\n     if (this \u003d\u003d readableInstant) {\n         return true;\n     }\n     if (readableInstant instanceof ReadableInstant) {\n         ReadableInstant otherInstant \u003d (ReadableInstant) readableInstant;\n         if (getMillis() \u003d\u003d otherInstant.getMillis()) {\n             Chronology chrono \u003d getChronology();\n             if (chrono \u003d\u003d otherInstant.getChronology()) {\n                 return true;\n             }\n             if (chrono !\u003d null \u0026\u0026 chrono.equals(otherInstant.getChronology())) {\n                 return true;\n             }\n         }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[public, final]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Fix equals hashcode contract\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@310 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "7/17/04, 5:21 PM",
          "commitName": "61017942cfd898a76d0531d3f247ecddbb452730",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "7/3/04, 3:38 PM",
          "commitNameOld": "8acb3651b1e903438a4a98811b7422c0f4c00ff3",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 14.07,
          "commitsBetweenForRepo": 58,
          "commitsBetweenForFile": 1,
          "actualSource": "public final boolean equals(Object readableInstant) {\n    if (this \u003d\u003d readableInstant) {\n        return true;\n    }\n    if (readableInstant instanceof ReadableInstant) {\n        ReadableInstant otherInstant \u003d (ReadableInstant) readableInstant;\n        if (getMillis() \u003d\u003d otherInstant.getMillis()) {\n            Chronology chrono \u003d getChronology();\n            if (chrono \u003d\u003d otherInstant.getChronology()) {\n                return true;\n            }\n            if (chrono !\u003d null \u0026\u0026 chrono.equals(otherInstant.getChronology())) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
          "path": "JodaTime/src/java/org/joda/time/AbstractInstant.java",
          "functionStartLine": 315,
          "functionName": "equals",
          "functionAnnotation": "",
          "functionDoc": "Compares this object with the specified object for equality based\non the millisecond instant and the Chronology.\n\u003cp\u003e\nAll ReadableInstant instances are accepted.\n\u003cp\u003e\nSee {@link #isEqual(ReadableInstant)} for an equals method that\nignores the Chronology.\n\n@param readableInstant a readable instant to check against\n@return true if millisecond and chronology are equal, false if\n not or the instant is null or of an incorrect type\n",
          "diff": "@@ -1,18 +1,18 @@\n-public boolean equals(Object readableInstant) {\n+public final boolean equals(Object readableInstant) {\n     if (this \u003d\u003d readableInstant) {\n         return true;\n     }\n     if (readableInstant instanceof ReadableInstant) {\n         ReadableInstant otherInstant \u003d (ReadableInstant) readableInstant;\n         if (getMillis() \u003d\u003d otherInstant.getMillis()) {\n             Chronology chrono \u003d getChronology();\n             if (chrono \u003d\u003d otherInstant.getChronology()) {\n                 return true;\n             }\n             if (chrono !\u003d null \u0026\u0026 chrono.equals(otherInstant.getChronology())) {\n                 return true;\n             }\n         }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "0e07ac6b2cff63550d7df336355ca63cc05aa40b": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "Move from Joda CVS\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@10 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "12/18/03, 6:07 PM",
      "commitName": "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "Move from Joda CVS\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@10 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "12/18/03, 6:07 PM",
          "commitName": "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "12/16/03, 1:39 PM",
          "commitNameOld": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 2.19,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "public boolean equals(Object readableInstant) {\n    if (this \u003d\u003d readableInstant) {\n        return true;\n    }\n    if (readableInstant instanceof ReadableInstant) {\n        ReadableInstant otherInstant \u003d (ReadableInstant) readableInstant;\n        if (getMillis() \u003d\u003d otherInstant.getMillis()) {\n            Chronology chrono \u003d getChronology();\n            if (chrono \u003d\u003d otherInstant.getChronology()) {\n                return true;\n            }\n            if (chrono !\u003d null \u0026\u0026 chrono.equals(otherInstant.getChronology())) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
          "path": "JodaTime/src/java/org/joda/time/AbstractInstant.java",
          "functionStartLine": 524,
          "functionName": "equals",
          "functionAnnotation": "",
          "functionDoc": "Compares this object with the specified object for equality based\non the millisecond instant and the Chronology.\n\u003cp\u003e\nAll ReadableInstant instances are accepted.\n\u003cp\u003e\nSee {@link #isEqual(ReadableInstant)} for an equals method that\nignores the Chronology.\n\n@param readableInstant a readable instant to check against\n@return true if millisecond and chronology are equal, false if\n not or the instant is null or of an incorrect type\n",
          "diff": "@@ -1,15 +1,18 @@\n-public final boolean equals(Object readableInstant) {\n+public boolean equals(Object readableInstant) {\n+    if (this \u003d\u003d readableInstant) {\n+        return true;\n+    }\n     if (readableInstant instanceof ReadableInstant) {\n         ReadableInstant otherInstant \u003d (ReadableInstant) readableInstant;\n         if (getMillis() \u003d\u003d otherInstant.getMillis()) {\n             Chronology chrono \u003d getChronology();\n             if (chrono \u003d\u003d otherInstant.getChronology()) {\n                 return true;\n             }\n             if (chrono !\u003d null \u0026\u0026 chrono.equals(otherInstant.getChronology())) {\n                 return true;\n             }\n         }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[public, final]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Move from Joda CVS\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@10 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "12/18/03, 6:07 PM",
          "commitName": "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "12/16/03, 1:39 PM",
          "commitNameOld": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 2.19,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "public boolean equals(Object readableInstant) {\n    if (this \u003d\u003d readableInstant) {\n        return true;\n    }\n    if (readableInstant instanceof ReadableInstant) {\n        ReadableInstant otherInstant \u003d (ReadableInstant) readableInstant;\n        if (getMillis() \u003d\u003d otherInstant.getMillis()) {\n            Chronology chrono \u003d getChronology();\n            if (chrono \u003d\u003d otherInstant.getChronology()) {\n                return true;\n            }\n            if (chrono !\u003d null \u0026\u0026 chrono.equals(otherInstant.getChronology())) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
          "path": "JodaTime/src/java/org/joda/time/AbstractInstant.java",
          "functionStartLine": 524,
          "functionName": "equals",
          "functionAnnotation": "",
          "functionDoc": "Compares this object with the specified object for equality based\non the millisecond instant and the Chronology.\n\u003cp\u003e\nAll ReadableInstant instances are accepted.\n\u003cp\u003e\nSee {@link #isEqual(ReadableInstant)} for an equals method that\nignores the Chronology.\n\n@param readableInstant a readable instant to check against\n@return true if millisecond and chronology are equal, false if\n not or the instant is null or of an incorrect type\n",
          "diff": "@@ -1,15 +1,18 @@\n-public final boolean equals(Object readableInstant) {\n+public boolean equals(Object readableInstant) {\n+    if (this \u003d\u003d readableInstant) {\n+        return true;\n+    }\n     if (readableInstant instanceof ReadableInstant) {\n         ReadableInstant otherInstant \u003d (ReadableInstant) readableInstant;\n         if (getMillis() \u003d\u003d otherInstant.getMillis()) {\n             Chronology chrono \u003d getChronology();\n             if (chrono \u003d\u003d otherInstant.getChronology()) {\n                 return true;\n             }\n             if (chrono !\u003d null \u0026\u0026 chrono.equals(otherInstant.getChronology())) {\n                 return true;\n             }\n         }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb": {
      "type": "Yintroduced",
      "commitMessage": "Move version 0.9 to joda-time repository\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@4 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "12/16/03, 1:39 PM",
      "commitName": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
      "commitAuthor": "Stephen Colebourne",
      "diff": "@@ -0,0 +1,15 @@\n+public final boolean equals(Object readableInstant) {\n+    if (readableInstant instanceof ReadableInstant) {\n+        ReadableInstant otherInstant \u003d (ReadableInstant) readableInstant;\n+        if (getMillis() \u003d\u003d otherInstant.getMillis()) {\n+            Chronology chrono \u003d getChronology();\n+            if (chrono \u003d\u003d otherInstant.getChronology()) {\n+                return true;\n+            }\n+            if (chrono !\u003d null \u0026\u0026 chrono.equals(otherInstant.getChronology())) {\n+                return true;\n+            }\n+        }\n+    }\n+    return false;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public final boolean equals(Object readableInstant) {\n    if (readableInstant instanceof ReadableInstant) {\n        ReadableInstant otherInstant \u003d (ReadableInstant) readableInstant;\n        if (getMillis() \u003d\u003d otherInstant.getMillis()) {\n            Chronology chrono \u003d getChronology();\n            if (chrono \u003d\u003d otherInstant.getChronology()) {\n                return true;\n            }\n            if (chrono !\u003d null \u0026\u0026 chrono.equals(otherInstant.getChronology())) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
      "path": "JodaTime/src/java/org/joda/time/AbstractInstant.java",
      "functionStartLine": 230,
      "functionName": "equals",
      "functionAnnotation": "",
      "functionDoc": "Compares this object with the specified object for equality based\non the millisecond instant and the Chronology.\n\u003cp\u003e\nAll ReadableInstant instances are accepted.\n\u003cp\u003e\nSee {@link #isEqual(ReadableInstant)} for an equals method that\nignores the Chronology.\n\n@param readableInstant a readable instant to check against\n@return true if millisecond and chronology are equal, false if\n not or the instant is null or of an incorrect type\n"
    }
  }
}