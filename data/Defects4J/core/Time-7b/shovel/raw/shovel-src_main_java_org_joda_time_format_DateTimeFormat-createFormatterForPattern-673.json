{
  "origin": "codeshovel",
  "repositoryName": "Time-7b",
  "repositoryPath": "/tmp/Time-7b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DateTimeFormat.java",
  "functionName": "createFormatterForPattern",
  "functionId": "createFormatterForPattern___pattern-String",
  "sourceFilePath": "src/main/java/org/joda/time/format/DateTimeFormat.java",
  "functionAnnotation": "",
  "functionDoc": "Select a format from a custom pattern.\n\n@param pattern pattern specification\n@throws IllegalArgumentException if the pattern is invalid\n@see #appendPatternTo\n",
  "functionStartLine": 673,
  "functionEndLine": 689,
  "numCommitsSeen": 38,
  "timeTaken": 2872,
  "changeHistory": [
    "df4a82f4fb46cc2248280c462e18f08d55a3d112",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1",
    "3f1e047c898c9c925e1faac33bb07e1cb05d88cb",
    "eac6e8608dc93816b685f96a43b27cbd351e77c6",
    "5082337a4152e04ebd8077fd0b7fa28113a4d79e"
  ],
  "changeHistoryShort": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": "Yfilerename",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": "Yfilerename",
    "3f1e047c898c9c925e1faac33bb07e1cb05d88cb": "Ybodychange",
    "eac6e8608dc93816b685f96a43b27cbd351e77c6": "Ybodychange",
    "5082337a4152e04ebd8077fd0b7fa28113a4d79e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": {
      "type": "Yfilerename",
      "commitMessage": "Remove JodaTime folder moving files to top level\n",
      "commitDate": "5/16/11, 10:02 AM",
      "commitName": "df4a82f4fb46cc2248280c462e18f08d55a3d112",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "5/16/11, 9:58 AM",
      "commitNameOld": "72b22654962284bac59c2777131b42a2d1f53228",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private static DateTimeFormatter createFormatterForPattern(String pattern) {\n    if (pattern \u003d\u003d null || pattern.length() \u003d\u003d 0) {\n        throw new IllegalArgumentException(\"Invalid pattern specification\");\n    }\n    DateTimeFormatter formatter \u003d null;\n    synchronized (cPatternedCache) {\n        formatter \u003d cPatternedCache.get(pattern);\n        if (formatter \u003d\u003d null) {\n            DateTimeFormatterBuilder builder \u003d new DateTimeFormatterBuilder();\n            parsePatternTo(builder, pattern);\n            formatter \u003d builder.toFormatter();\n            cPatternedCache.put(pattern, formatter);\n        }\n    }\n    return formatter;\n}",
      "path": "src/main/java/org/joda/time/format/DateTimeFormat.java",
      "functionStartLine": 673,
      "functionName": "createFormatterForPattern",
      "functionAnnotation": "",
      "functionDoc": "Select a format from a custom pattern.\n\n@param pattern pattern specification\n@throws IllegalArgumentException if the pattern is invalid\n@see #appendPatternTo\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/main/java/org/joda/time/format/DateTimeFormat.java",
        "newPath": "src/main/java/org/joda/time/format/DateTimeFormat.java"
      }
    },
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": {
      "type": "Yfilerename",
      "commitMessage": "Convert to maven 2\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1540 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/8/10, 5:17 PM",
      "commitName": "53feb3fa56af7260e607844524b7e5a9be49ecc1",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/8/10, 5:02 PM",
      "commitNameOld": "7fa2ceaf5d95d050095432aa646ea803aa35e122",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private static DateTimeFormatter createFormatterForPattern(String pattern) {\n    if (pattern \u003d\u003d null || pattern.length() \u003d\u003d 0) {\n        throw new IllegalArgumentException(\"Invalid pattern specification\");\n    }\n    DateTimeFormatter formatter \u003d null;\n    synchronized (cPatternedCache) {\n        formatter \u003d cPatternedCache.get(pattern);\n        if (formatter \u003d\u003d null) {\n            DateTimeFormatterBuilder builder \u003d new DateTimeFormatterBuilder();\n            parsePatternTo(builder, pattern);\n            formatter \u003d builder.toFormatter();\n            cPatternedCache.put(pattern, formatter);\n        }\n    }\n    return formatter;\n}",
      "path": "JodaTime/src/main/java/org/joda/time/format/DateTimeFormat.java",
      "functionStartLine": 673,
      "functionName": "createFormatterForPattern",
      "functionAnnotation": "",
      "functionDoc": "Select a format from a custom pattern.\n\n@param pattern pattern specification\n@throws IllegalArgumentException if the pattern is invalid\n@see #appendPatternTo\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/java/org/joda/time/format/DateTimeFormat.java",
        "newPath": "JodaTime/src/main/java/org/joda/time/format/DateTimeFormat.java"
      }
    },
    "3f1e047c898c9c925e1faac33bb07e1cb05d88cb": {
      "type": "Ybodychange",
      "commitMessage": "Move to Java 5 with generics\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1406 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "11/4/09, 3:55 PM",
      "commitName": "3f1e047c898c9c925e1faac33bb07e1cb05d88cb",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "11/4/09, 2:27 PM",
      "commitNameOld": "9bad997820d36741944e86ba28f6999e074a0a95",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private static DateTimeFormatter createFormatterForPattern(String pattern) {\n    if (pattern \u003d\u003d null || pattern.length() \u003d\u003d 0) {\n        throw new IllegalArgumentException(\"Invalid pattern specification\");\n    }\n    DateTimeFormatter formatter \u003d null;\n    synchronized (cPatternedCache) {\n        formatter \u003d cPatternedCache.get(pattern);\n        if (formatter \u003d\u003d null) {\n            DateTimeFormatterBuilder builder \u003d new DateTimeFormatterBuilder();\n            parsePatternTo(builder, pattern);\n            formatter \u003d builder.toFormatter();\n            cPatternedCache.put(pattern, formatter);\n        }\n    }\n    return formatter;\n}",
      "path": "JodaTime/src/java/org/joda/time/format/DateTimeFormat.java",
      "functionStartLine": 673,
      "functionName": "createFormatterForPattern",
      "functionAnnotation": "",
      "functionDoc": "Select a format from a custom pattern.\n\n@param pattern pattern specification\n@throws IllegalArgumentException if the pattern is invalid\n@see #appendPatternTo\n",
      "diff": "@@ -1,16 +1,16 @@\n private static DateTimeFormatter createFormatterForPattern(String pattern) {\n     if (pattern \u003d\u003d null || pattern.length() \u003d\u003d 0) {\n         throw new IllegalArgumentException(\"Invalid pattern specification\");\n     }\n     DateTimeFormatter formatter \u003d null;\n     synchronized (cPatternedCache) {\n-        formatter \u003d (DateTimeFormatter) cPatternedCache.get(pattern);\n+        formatter \u003d cPatternedCache.get(pattern);\n         if (formatter \u003d\u003d null) {\n             DateTimeFormatterBuilder builder \u003d new DateTimeFormatterBuilder();\n             parsePatternTo(builder, pattern);\n             formatter \u003d builder.toFormatter();\n             cPatternedCache.put(pattern, formatter);\n         }\n     }\n     return formatter;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "eac6e8608dc93816b685f96a43b27cbd351e77c6": {
      "type": "Ybodychange",
      "commitMessage": "Test DateTimeFormat styles and patterns\nAdd ability to print time zone ids\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@690 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "2/13/05, 9:12 AM",
      "commitName": "eac6e8608dc93816b685f96a43b27cbd351e77c6",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "2/12/05, 6:39 PM",
      "commitNameOld": "5082337a4152e04ebd8077fd0b7fa28113a4d79e",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.61,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private static DateTimeFormatter createFormatterForPattern(String pattern) {\n    if (pattern \u003d\u003d null || pattern.length() \u003d\u003d 0) {\n        throw new IllegalArgumentException(\"Invalid pattern specification\");\n    }\n    DateTimeFormatter formatter \u003d null;\n    synchronized (cPatternedCache) {\n        formatter \u003d (DateTimeFormatter) cPatternedCache.get(pattern);\n        if (formatter \u003d\u003d null) {\n            DateTimeFormatterBuilder builder \u003d new DateTimeFormatterBuilder();\n            parsePatternTo(builder, pattern);\n            formatter \u003d builder.toFormatter();\n            cPatternedCache.put(pattern, formatter);\n        }\n    }\n    return formatter;\n}",
      "path": "JodaTime/src/java/org/joda/time/format/DateTimeFormat.java",
      "functionStartLine": 642,
      "functionName": "createFormatterForPattern",
      "functionAnnotation": "",
      "functionDoc": "Select a format from a custom pattern.\n\n@param pattern pattern specification\n@throws IllegalArgumentException if the pattern is invalid\n@see #appendPatternTo\n",
      "diff": "@@ -1,16 +1,16 @@\n private static DateTimeFormatter createFormatterForPattern(String pattern) {\n-    if (pattern \u003d\u003d null) {\n+    if (pattern \u003d\u003d null || pattern.length() \u003d\u003d 0) {\n         throw new IllegalArgumentException(\"Invalid pattern specification\");\n     }\n     DateTimeFormatter formatter \u003d null;\n     synchronized (cPatternedCache) {\n         formatter \u003d (DateTimeFormatter) cPatternedCache.get(pattern);\n         if (formatter \u003d\u003d null) {\n             DateTimeFormatterBuilder builder \u003d new DateTimeFormatterBuilder();\n             parsePatternTo(builder, pattern);\n             formatter \u003d builder.toFormatter();\n             cPatternedCache.put(pattern, formatter);\n         }\n     }\n     return formatter;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5082337a4152e04ebd8077fd0b7fa28113a4d79e": {
      "type": "Yintroduced",
      "commitMessage": "Refactor DateTime formatting to use decoration pattern\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@687 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "2/12/05, 6:39 PM",
      "commitName": "5082337a4152e04ebd8077fd0b7fa28113a4d79e",
      "commitAuthor": "Stephen Colebourne",
      "diff": "@@ -0,0 +1,16 @@\n+private static DateTimeFormatter createFormatterForPattern(String pattern) {\n+    if (pattern \u003d\u003d null) {\n+        throw new IllegalArgumentException(\"Invalid pattern specification\");\n+    }\n+    DateTimeFormatter formatter \u003d null;\n+    synchronized (cPatternedCache) {\n+        formatter \u003d (DateTimeFormatter) cPatternedCache.get(pattern);\n+        if (formatter \u003d\u003d null) {\n+            DateTimeFormatterBuilder builder \u003d new DateTimeFormatterBuilder();\n+            parsePatternTo(builder, pattern);\n+            formatter \u003d builder.toFormatter();\n+            cPatternedCache.put(pattern, formatter);\n+        }\n+    }\n+    return formatter;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private static DateTimeFormatter createFormatterForPattern(String pattern) {\n    if (pattern \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Invalid pattern specification\");\n    }\n    DateTimeFormatter formatter \u003d null;\n    synchronized (cPatternedCache) {\n        formatter \u003d (DateTimeFormatter) cPatternedCache.get(pattern);\n        if (formatter \u003d\u003d null) {\n            DateTimeFormatterBuilder builder \u003d new DateTimeFormatterBuilder();\n            parsePatternTo(builder, pattern);\n            formatter \u003d builder.toFormatter();\n            cPatternedCache.put(pattern, formatter);\n        }\n    }\n    return formatter;\n}",
      "path": "JodaTime/src/java/org/joda/time/format/DateTimeFormat.java",
      "functionStartLine": 632,
      "functionName": "createFormatterForPattern",
      "functionAnnotation": "",
      "functionDoc": "Select a format from a custom pattern.\n\n@param pattern pattern specification\n@throws IllegalArgumentException if the pattern is invalid\n@see #appendPatternTo\n"
    }
  }
}