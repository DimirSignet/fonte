{
  "origin": "codeshovel",
  "repositoryName": "Closure-21b",
  "repositoryPath": "/tmp/Closure-21b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FunctionType.java",
  "functionName": "setPrototype",
  "functionId": "setPrototype___prototype-ObjectType__propertyNode-Node",
  "sourceFilePath": "src/com/google/javascript/rhino/jstype/FunctionType.java",
  "functionAnnotation": "",
  "functionDoc": "Sets the prototype.\n\n@param prototype the prototype. If this value is {@code null} it will\n       silently be discarded.\n",
  "functionStartLine": 378,
  "functionEndLine": 387,
  "numCommitsSeen": 245,
  "timeTaken": 3911,
  "changeHistory": [
    "4a77f08d4f57f1dab960c3464baa9bcb3326c6a4",
    "f1be9f1d6bad1a138a4db2ca50036737a370095d",
    "5c695ce6ca5095ba764d34e634c20f65d8a558e2",
    "7e9b8336568ea7f05c33e1b58eb67fa6d4eee756",
    "5fa514bee8f76534232e4653eaf16cd416e08012",
    "1aaaaa9fe982beb4cd34edb0f7452a3c6da199d9",
    "c438dfd06013f82daa648d23b864842ff1881695",
    "2851a41947bed8b8e100c7dac7d1edbc1c909d24",
    "a36a61a9027c5bca5752b0ecca7c609c07e568bb",
    "840ddca5b28cea7563a5be20d2624478af67bc02",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "4a77f08d4f57f1dab960c3464baa9bcb3326c6a4": "Ybodychange",
    "f1be9f1d6bad1a138a4db2ca50036737a370095d": "Ymultichange(Yparameterchange,Ybodychange)",
    "5c695ce6ca5095ba764d34e634c20f65d8a558e2": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "7e9b8336568ea7f05c33e1b58eb67fa6d4eee756": "Ybodychange",
    "5fa514bee8f76534232e4653eaf16cd416e08012": "Ymultichange(Yparameterchange,Ybodychange)",
    "1aaaaa9fe982beb4cd34edb0f7452a3c6da199d9": "Ybodychange",
    "c438dfd06013f82daa648d23b864842ff1881695": "Ybodychange",
    "2851a41947bed8b8e100c7dac7d1edbc1c909d24": "Ybodychange",
    "a36a61a9027c5bca5752b0ecca7c609c07e568bb": "Ybodychange",
    "840ddca5b28cea7563a5be20d2624478af67bc02": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4a77f08d4f57f1dab960c3464baa9bcb3326c6a4": {
      "type": "Ybodychange",
      "commitMessage": "\nProper handling of structural constructors\n\nR\u003djohnlenz\nDELTA\u003d161  (138 added, 20 deleted, 3 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d4936\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2017 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/4/12, 9:43 AM",
      "commitName": "4a77f08d4f57f1dab960c3464baa9bcb3326c6a4",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "6/2/12, 3:48 PM",
      "commitNameOld": "4606edd925f6057709e2fe35cd02155fdd457339",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 1.75,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "boolean setPrototype(ObjectType prototype, Node propertyNode) {\n    if (prototype \u003d\u003d null) {\n        return false;\n    }\n    if (isConstructor() \u0026\u0026 prototype \u003d\u003d getInstanceType()) {\n        return false;\n    }\n    return setPrototypeNoCheck(prototype, propertyNode);\n}",
      "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
      "functionStartLine": 378,
      "functionName": "setPrototype",
      "functionAnnotation": "",
      "functionDoc": "Sets the prototype.\n\n@param prototype the prototype. If this value is {@code null} it will\n       silently be discarded.\n",
      "diff": "@@ -1,32 +1,9 @@\n boolean setPrototype(ObjectType prototype, Node propertyNode) {\n     if (prototype \u003d\u003d null) {\n         return false;\n     }\n     if (isConstructor() \u0026\u0026 prototype \u003d\u003d getInstanceType()) {\n         return false;\n     }\n-    ObjectType oldPrototype \u003d prototypeSlot \u003d\u003d null ? null : (ObjectType) prototypeSlot.getType();\n-    boolean replacedPrototype \u003d oldPrototype !\u003d null;\n-    this.prototypeSlot \u003d new Property(\"prototype\", prototype, true, propertyNode \u003d\u003d null ? source : propertyNode);\n-    prototype.setOwnerFunction(this);\n-    if (oldPrototype !\u003d null) {\n-        oldPrototype.setOwnerFunction(null);\n-    }\n-    if (isConstructor() || isInterface()) {\n-        FunctionType superClass \u003d getSuperClassConstructor();\n-        if (superClass !\u003d null) {\n-            superClass.addSubType(this);\n-        }\n-        if (isInterface()) {\n-            for (ObjectType interfaceType : getExtendedInterfaces()) {\n-                if (interfaceType.getConstructor() !\u003d null) {\n-                    interfaceType.getConstructor().addSubType(this);\n-                }\n-            }\n-        }\n-    }\n-    if (replacedPrototype) {\n-        clearCachedValues();\n-    }\n-    return true;\n+    return setPrototypeNoCheck(prototype, propertyNode);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f1be9f1d6bad1a138a4db2ca50036737a370095d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "\nFix a nasty bug where properties on one prototype were leaking onto\nunrelated prototypes\n\nR\u003dacleung\nDELTA\u003d84  (65 added, 1 deleted, 18 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d4450\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1855 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/29/12, 7:42 PM",
      "commitName": "f1be9f1d6bad1a138a4db2ca50036737a370095d",
      "commitAuthor": "nicksantos@google.com",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "\nFix a nasty bug where properties on one prototype were leaking onto\nunrelated prototypes\n\nR\u003dacleung\nDELTA\u003d84  (65 added, 1 deleted, 18 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d4450\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1855 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "3/29/12, 7:42 PM",
          "commitName": "f1be9f1d6bad1a138a4db2ca50036737a370095d",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "3/12/12, 1:45 PM",
          "commitNameOld": "b742849cc99956b4b2d89eda4d9bf2eac5429e95",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 17.25,
          "commitsBetweenForRepo": 22,
          "commitsBetweenForFile": 1,
          "actualSource": "boolean setPrototype(ObjectType prototype, Node propertyNode) {\n    if (prototype \u003d\u003d null) {\n        return false;\n    }\n    if (isConstructor() \u0026\u0026 prototype \u003d\u003d getInstanceType()) {\n        return false;\n    }\n    ObjectType oldPrototype \u003d prototypeSlot \u003d\u003d null ? null : (ObjectType) prototypeSlot.getType();\n    boolean replacedPrototype \u003d oldPrototype !\u003d null;\n    this.prototypeSlot \u003d new Property(\"prototype\", prototype, true, propertyNode \u003d\u003d null ? source : propertyNode);\n    prototype.setOwnerFunction(this);\n    if (oldPrototype !\u003d null) {\n        oldPrototype.setOwnerFunction(null);\n    }\n    if (isConstructor() || isInterface()) {\n        FunctionType superClass \u003d getSuperClassConstructor();\n        if (superClass !\u003d null) {\n            superClass.addSubType(this);\n        }\n        if (isInterface()) {\n            for (ObjectType interfaceType : getExtendedInterfaces()) {\n                if (interfaceType.getConstructor() !\u003d null) {\n                    interfaceType.getConstructor().addSubType(this);\n                }\n            }\n        }\n    }\n    if (replacedPrototype) {\n        clearCachedValues();\n    }\n    return true;\n}",
          "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
          "functionStartLine": 374,
          "functionName": "setPrototype",
          "functionAnnotation": "",
          "functionDoc": "Sets the prototype.\n\n@param prototype the prototype. If this value is {@code null} it will\n       silently be discarded.\n",
          "diff": "@@ -1,32 +1,32 @@\n-boolean setPrototype(PrototypeObjectType prototype, Node propertyNode) {\n+boolean setPrototype(ObjectType prototype, Node propertyNode) {\n     if (prototype \u003d\u003d null) {\n         return false;\n     }\n     if (isConstructor() \u0026\u0026 prototype \u003d\u003d getInstanceType()) {\n         return false;\n     }\n-    PrototypeObjectType oldPrototype \u003d prototypeSlot \u003d\u003d null ? null : (PrototypeObjectType) prototypeSlot.getType();\n+    ObjectType oldPrototype \u003d prototypeSlot \u003d\u003d null ? null : (ObjectType) prototypeSlot.getType();\n     boolean replacedPrototype \u003d oldPrototype !\u003d null;\n     this.prototypeSlot \u003d new Property(\"prototype\", prototype, true, propertyNode \u003d\u003d null ? source : propertyNode);\n     prototype.setOwnerFunction(this);\n     if (oldPrototype !\u003d null) {\n         oldPrototype.setOwnerFunction(null);\n     }\n     if (isConstructor() || isInterface()) {\n         FunctionType superClass \u003d getSuperClassConstructor();\n         if (superClass !\u003d null) {\n             superClass.addSubType(this);\n         }\n         if (isInterface()) {\n             for (ObjectType interfaceType : getExtendedInterfaces()) {\n                 if (interfaceType.getConstructor() !\u003d null) {\n                     interfaceType.getConstructor().addSubType(this);\n                 }\n             }\n         }\n     }\n     if (replacedPrototype) {\n         clearCachedValues();\n     }\n     return true;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[prototype-PrototypeObjectType, propertyNode-Node]",
            "newValue": "[prototype-ObjectType, propertyNode-Node]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nFix a nasty bug where properties on one prototype were leaking onto\nunrelated prototypes\n\nR\u003dacleung\nDELTA\u003d84  (65 added, 1 deleted, 18 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d4450\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1855 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "3/29/12, 7:42 PM",
          "commitName": "f1be9f1d6bad1a138a4db2ca50036737a370095d",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "3/12/12, 1:45 PM",
          "commitNameOld": "b742849cc99956b4b2d89eda4d9bf2eac5429e95",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 17.25,
          "commitsBetweenForRepo": 22,
          "commitsBetweenForFile": 1,
          "actualSource": "boolean setPrototype(ObjectType prototype, Node propertyNode) {\n    if (prototype \u003d\u003d null) {\n        return false;\n    }\n    if (isConstructor() \u0026\u0026 prototype \u003d\u003d getInstanceType()) {\n        return false;\n    }\n    ObjectType oldPrototype \u003d prototypeSlot \u003d\u003d null ? null : (ObjectType) prototypeSlot.getType();\n    boolean replacedPrototype \u003d oldPrototype !\u003d null;\n    this.prototypeSlot \u003d new Property(\"prototype\", prototype, true, propertyNode \u003d\u003d null ? source : propertyNode);\n    prototype.setOwnerFunction(this);\n    if (oldPrototype !\u003d null) {\n        oldPrototype.setOwnerFunction(null);\n    }\n    if (isConstructor() || isInterface()) {\n        FunctionType superClass \u003d getSuperClassConstructor();\n        if (superClass !\u003d null) {\n            superClass.addSubType(this);\n        }\n        if (isInterface()) {\n            for (ObjectType interfaceType : getExtendedInterfaces()) {\n                if (interfaceType.getConstructor() !\u003d null) {\n                    interfaceType.getConstructor().addSubType(this);\n                }\n            }\n        }\n    }\n    if (replacedPrototype) {\n        clearCachedValues();\n    }\n    return true;\n}",
          "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
          "functionStartLine": 374,
          "functionName": "setPrototype",
          "functionAnnotation": "",
          "functionDoc": "Sets the prototype.\n\n@param prototype the prototype. If this value is {@code null} it will\n       silently be discarded.\n",
          "diff": "@@ -1,32 +1,32 @@\n-boolean setPrototype(PrototypeObjectType prototype, Node propertyNode) {\n+boolean setPrototype(ObjectType prototype, Node propertyNode) {\n     if (prototype \u003d\u003d null) {\n         return false;\n     }\n     if (isConstructor() \u0026\u0026 prototype \u003d\u003d getInstanceType()) {\n         return false;\n     }\n-    PrototypeObjectType oldPrototype \u003d prototypeSlot \u003d\u003d null ? null : (PrototypeObjectType) prototypeSlot.getType();\n+    ObjectType oldPrototype \u003d prototypeSlot \u003d\u003d null ? null : (ObjectType) prototypeSlot.getType();\n     boolean replacedPrototype \u003d oldPrototype !\u003d null;\n     this.prototypeSlot \u003d new Property(\"prototype\", prototype, true, propertyNode \u003d\u003d null ? source : propertyNode);\n     prototype.setOwnerFunction(this);\n     if (oldPrototype !\u003d null) {\n         oldPrototype.setOwnerFunction(null);\n     }\n     if (isConstructor() || isInterface()) {\n         FunctionType superClass \u003d getSuperClassConstructor();\n         if (superClass !\u003d null) {\n             superClass.addSubType(this);\n         }\n         if (isInterface()) {\n             for (ObjectType interfaceType : getExtendedInterfaces()) {\n                 if (interfaceType.getConstructor() !\u003d null) {\n                     interfaceType.getConstructor().addSubType(this);\n                 }\n             }\n         }\n     }\n     if (replacedPrototype) {\n         clearCachedValues();\n     }\n     return true;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "5c695ce6ca5095ba764d34e634c20f65d8a558e2": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "\nProper source information for function prototypes\n\nR\u003dacleung\nDELTA\u003d343  (190 added, 106 deleted, 47 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3216\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1424 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/8/11, 7:15 AM",
      "commitName": "5c695ce6ca5095ba764d34e634c20f65d8a558e2",
      "commitAuthor": "nicksantos@google.com",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "\nProper source information for function prototypes\n\nR\u003dacleung\nDELTA\u003d343  (190 added, 106 deleted, 47 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3216\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1424 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "9/8/11, 7:15 AM",
          "commitName": "5c695ce6ca5095ba764d34e634c20f65d8a558e2",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "8/31/11, 7:30 PM",
          "commitNameOld": "7e9b8336568ea7f05c33e1b58eb67fa6d4eee756",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 7.49,
          "commitsBetweenForRepo": 23,
          "commitsBetweenForFile": 1,
          "actualSource": "boolean setPrototype(PrototypeObjectType prototype, Node propertyNode) {\n    if (prototype \u003d\u003d null) {\n        return false;\n    }\n    if (isConstructor() \u0026\u0026 prototype \u003d\u003d getInstanceType()) {\n        return false;\n    }\n    PrototypeObjectType oldPrototype \u003d prototypeSlot \u003d\u003d null ? null : (PrototypeObjectType) prototypeSlot.getType();\n    boolean replacedPrototype \u003d oldPrototype !\u003d null;\n    this.prototypeSlot \u003d new Property(\"prototype\", prototype, true, propertyNode \u003d\u003d null ? source : propertyNode);\n    prototype.setOwnerFunction(this);\n    if (oldPrototype !\u003d null) {\n        oldPrototype.setOwnerFunction(null);\n    }\n    if (isConstructor() || isInterface()) {\n        FunctionType superClass \u003d getSuperClassConstructor();\n        if (superClass !\u003d null) {\n            superClass.addSubType(this);\n        }\n        if (isInterface()) {\n            for (ObjectType interfaceType : getExtendedInterfaces()) {\n                if (interfaceType.getConstructor() !\u003d null) {\n                    interfaceType.getConstructor().addSubType(this);\n                }\n            }\n        }\n    }\n    if (replacedPrototype) {\n        clearCachedValues();\n    }\n    return true;\n}",
          "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
          "functionStartLine": 362,
          "functionName": "setPrototype",
          "functionAnnotation": "",
          "functionDoc": "Sets the prototype.\n\n@param prototype the prototype. If this value is {@code null} it will\n       silently be discarded.\n",
          "diff": "@@ -1,33 +1,32 @@\n-public boolean setPrototype(PrototypeObjectType prototype) {\n+boolean setPrototype(PrototypeObjectType prototype, Node propertyNode) {\n     if (prototype \u003d\u003d null) {\n         return false;\n     }\n     if (isConstructor() \u0026\u0026 prototype \u003d\u003d getInstanceType()) {\n         return false;\n     }\n-    PrototypeObjectType oldPrototype \u003d this.prototype;\n+    PrototypeObjectType oldPrototype \u003d prototypeSlot \u003d\u003d null ? null : (PrototypeObjectType) prototypeSlot.getType();\n     boolean replacedPrototype \u003d oldPrototype !\u003d null;\n-    this.prototype \u003d prototype;\n-    this.prototypeSlot \u003d new SimpleSlot(\"prototype\", prototype, true);\n-    this.prototype.setOwnerFunction(this);\n+    this.prototypeSlot \u003d new Property(\"prototype\", prototype, true, propertyNode \u003d\u003d null ? source : propertyNode);\n+    prototype.setOwnerFunction(this);\n     if (oldPrototype !\u003d null) {\n         oldPrototype.setOwnerFunction(null);\n     }\n     if (isConstructor() || isInterface()) {\n         FunctionType superClass \u003d getSuperClassConstructor();\n         if (superClass !\u003d null) {\n             superClass.addSubType(this);\n         }\n         if (isInterface()) {\n             for (ObjectType interfaceType : getExtendedInterfaces()) {\n                 if (interfaceType.getConstructor() !\u003d null) {\n                     interfaceType.getConstructor().addSubType(this);\n                 }\n             }\n         }\n     }\n     if (replacedPrototype) {\n         clearCachedValues();\n     }\n     return true;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[prototype-PrototypeObjectType]",
            "newValue": "[prototype-PrototypeObjectType, propertyNode-Node]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "\nProper source information for function prototypes\n\nR\u003dacleung\nDELTA\u003d343  (190 added, 106 deleted, 47 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3216\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1424 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "9/8/11, 7:15 AM",
          "commitName": "5c695ce6ca5095ba764d34e634c20f65d8a558e2",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "8/31/11, 7:30 PM",
          "commitNameOld": "7e9b8336568ea7f05c33e1b58eb67fa6d4eee756",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 7.49,
          "commitsBetweenForRepo": 23,
          "commitsBetweenForFile": 1,
          "actualSource": "boolean setPrototype(PrototypeObjectType prototype, Node propertyNode) {\n    if (prototype \u003d\u003d null) {\n        return false;\n    }\n    if (isConstructor() \u0026\u0026 prototype \u003d\u003d getInstanceType()) {\n        return false;\n    }\n    PrototypeObjectType oldPrototype \u003d prototypeSlot \u003d\u003d null ? null : (PrototypeObjectType) prototypeSlot.getType();\n    boolean replacedPrototype \u003d oldPrototype !\u003d null;\n    this.prototypeSlot \u003d new Property(\"prototype\", prototype, true, propertyNode \u003d\u003d null ? source : propertyNode);\n    prototype.setOwnerFunction(this);\n    if (oldPrototype !\u003d null) {\n        oldPrototype.setOwnerFunction(null);\n    }\n    if (isConstructor() || isInterface()) {\n        FunctionType superClass \u003d getSuperClassConstructor();\n        if (superClass !\u003d null) {\n            superClass.addSubType(this);\n        }\n        if (isInterface()) {\n            for (ObjectType interfaceType : getExtendedInterfaces()) {\n                if (interfaceType.getConstructor() !\u003d null) {\n                    interfaceType.getConstructor().addSubType(this);\n                }\n            }\n        }\n    }\n    if (replacedPrototype) {\n        clearCachedValues();\n    }\n    return true;\n}",
          "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
          "functionStartLine": 362,
          "functionName": "setPrototype",
          "functionAnnotation": "",
          "functionDoc": "Sets the prototype.\n\n@param prototype the prototype. If this value is {@code null} it will\n       silently be discarded.\n",
          "diff": "@@ -1,33 +1,32 @@\n-public boolean setPrototype(PrototypeObjectType prototype) {\n+boolean setPrototype(PrototypeObjectType prototype, Node propertyNode) {\n     if (prototype \u003d\u003d null) {\n         return false;\n     }\n     if (isConstructor() \u0026\u0026 prototype \u003d\u003d getInstanceType()) {\n         return false;\n     }\n-    PrototypeObjectType oldPrototype \u003d this.prototype;\n+    PrototypeObjectType oldPrototype \u003d prototypeSlot \u003d\u003d null ? null : (PrototypeObjectType) prototypeSlot.getType();\n     boolean replacedPrototype \u003d oldPrototype !\u003d null;\n-    this.prototype \u003d prototype;\n-    this.prototypeSlot \u003d new SimpleSlot(\"prototype\", prototype, true);\n-    this.prototype.setOwnerFunction(this);\n+    this.prototypeSlot \u003d new Property(\"prototype\", prototype, true, propertyNode \u003d\u003d null ? source : propertyNode);\n+    prototype.setOwnerFunction(this);\n     if (oldPrototype !\u003d null) {\n         oldPrototype.setOwnerFunction(null);\n     }\n     if (isConstructor() || isInterface()) {\n         FunctionType superClass \u003d getSuperClassConstructor();\n         if (superClass !\u003d null) {\n             superClass.addSubType(this);\n         }\n         if (isInterface()) {\n             for (ObjectType interfaceType : getExtendedInterfaces()) {\n                 if (interfaceType.getConstructor() !\u003d null) {\n                     interfaceType.getConstructor().addSubType(this);\n                 }\n             }\n         }\n     }\n     if (replacedPrototype) {\n         clearCachedValues();\n     }\n     return true;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nProper source information for function prototypes\n\nR\u003dacleung\nDELTA\u003d343  (190 added, 106 deleted, 47 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3216\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1424 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "9/8/11, 7:15 AM",
          "commitName": "5c695ce6ca5095ba764d34e634c20f65d8a558e2",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "8/31/11, 7:30 PM",
          "commitNameOld": "7e9b8336568ea7f05c33e1b58eb67fa6d4eee756",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 7.49,
          "commitsBetweenForRepo": 23,
          "commitsBetweenForFile": 1,
          "actualSource": "boolean setPrototype(PrototypeObjectType prototype, Node propertyNode) {\n    if (prototype \u003d\u003d null) {\n        return false;\n    }\n    if (isConstructor() \u0026\u0026 prototype \u003d\u003d getInstanceType()) {\n        return false;\n    }\n    PrototypeObjectType oldPrototype \u003d prototypeSlot \u003d\u003d null ? null : (PrototypeObjectType) prototypeSlot.getType();\n    boolean replacedPrototype \u003d oldPrototype !\u003d null;\n    this.prototypeSlot \u003d new Property(\"prototype\", prototype, true, propertyNode \u003d\u003d null ? source : propertyNode);\n    prototype.setOwnerFunction(this);\n    if (oldPrototype !\u003d null) {\n        oldPrototype.setOwnerFunction(null);\n    }\n    if (isConstructor() || isInterface()) {\n        FunctionType superClass \u003d getSuperClassConstructor();\n        if (superClass !\u003d null) {\n            superClass.addSubType(this);\n        }\n        if (isInterface()) {\n            for (ObjectType interfaceType : getExtendedInterfaces()) {\n                if (interfaceType.getConstructor() !\u003d null) {\n                    interfaceType.getConstructor().addSubType(this);\n                }\n            }\n        }\n    }\n    if (replacedPrototype) {\n        clearCachedValues();\n    }\n    return true;\n}",
          "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
          "functionStartLine": 362,
          "functionName": "setPrototype",
          "functionAnnotation": "",
          "functionDoc": "Sets the prototype.\n\n@param prototype the prototype. If this value is {@code null} it will\n       silently be discarded.\n",
          "diff": "@@ -1,33 +1,32 @@\n-public boolean setPrototype(PrototypeObjectType prototype) {\n+boolean setPrototype(PrototypeObjectType prototype, Node propertyNode) {\n     if (prototype \u003d\u003d null) {\n         return false;\n     }\n     if (isConstructor() \u0026\u0026 prototype \u003d\u003d getInstanceType()) {\n         return false;\n     }\n-    PrototypeObjectType oldPrototype \u003d this.prototype;\n+    PrototypeObjectType oldPrototype \u003d prototypeSlot \u003d\u003d null ? null : (PrototypeObjectType) prototypeSlot.getType();\n     boolean replacedPrototype \u003d oldPrototype !\u003d null;\n-    this.prototype \u003d prototype;\n-    this.prototypeSlot \u003d new SimpleSlot(\"prototype\", prototype, true);\n-    this.prototype.setOwnerFunction(this);\n+    this.prototypeSlot \u003d new Property(\"prototype\", prototype, true, propertyNode \u003d\u003d null ? source : propertyNode);\n+    prototype.setOwnerFunction(this);\n     if (oldPrototype !\u003d null) {\n         oldPrototype.setOwnerFunction(null);\n     }\n     if (isConstructor() || isInterface()) {\n         FunctionType superClass \u003d getSuperClassConstructor();\n         if (superClass !\u003d null) {\n             superClass.addSubType(this);\n         }\n         if (isInterface()) {\n             for (ObjectType interfaceType : getExtendedInterfaces()) {\n                 if (interfaceType.getConstructor() !\u003d null) {\n                     interfaceType.getConstructor().addSubType(this);\n                 }\n             }\n         }\n     }\n     if (replacedPrototype) {\n         clearCachedValues();\n     }\n     return true;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "7e9b8336568ea7f05c33e1b58eb67fa6d4eee756": {
      "type": "Ybodychange",
      "commitMessage": "\nSupport chrome-team\u0027s style of defining prototypes.\nFixes issue 537\n\nR\u003dacleung\nDELTA\u003d149  (127 added, 19 deleted, 3 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3173\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1401 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/31/11, 7:30 PM",
      "commitName": "7e9b8336568ea7f05c33e1b58eb67fa6d4eee756",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "8/25/11, 3:00 PM",
      "commitNameOld": "2e48f3ae25431bfa204db0bba2eeb47191659cdb",
      "commitAuthorOld": "bashir@google.com",
      "daysBetweenCommits": 6.19,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "public boolean setPrototype(PrototypeObjectType prototype) {\n    if (prototype \u003d\u003d null) {\n        return false;\n    }\n    if (isConstructor() \u0026\u0026 prototype \u003d\u003d getInstanceType()) {\n        return false;\n    }\n    PrototypeObjectType oldPrototype \u003d this.prototype;\n    boolean replacedPrototype \u003d oldPrototype !\u003d null;\n    this.prototype \u003d prototype;\n    this.prototypeSlot \u003d new SimpleSlot(\"prototype\", prototype, true);\n    this.prototype.setOwnerFunction(this);\n    if (oldPrototype !\u003d null) {\n        oldPrototype.setOwnerFunction(null);\n    }\n    if (isConstructor() || isInterface()) {\n        FunctionType superClass \u003d getSuperClassConstructor();\n        if (superClass !\u003d null) {\n            superClass.addSubType(this);\n        }\n        if (isInterface()) {\n            for (ObjectType interfaceType : getExtendedInterfaces()) {\n                if (interfaceType.getConstructor() !\u003d null) {\n                    interfaceType.getConstructor().addSubType(this);\n                }\n            }\n        }\n    }\n    if (replacedPrototype) {\n        clearCachedValues();\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
      "functionStartLine": 356,
      "functionName": "setPrototype",
      "functionAnnotation": "",
      "functionDoc": "Sets the prototype.\n\n@param prototype the prototype. If this value is {@code null} it will\n       silently be discarded.\n",
      "diff": "@@ -1,29 +1,33 @@\n public boolean setPrototype(PrototypeObjectType prototype) {\n     if (prototype \u003d\u003d null) {\n         return false;\n     }\n     if (isConstructor() \u0026\u0026 prototype \u003d\u003d getInstanceType()) {\n         return false;\n     }\n-    boolean replacedPrototype \u003d prototype !\u003d null;\n+    PrototypeObjectType oldPrototype \u003d this.prototype;\n+    boolean replacedPrototype \u003d oldPrototype !\u003d null;\n     this.prototype \u003d prototype;\n     this.prototypeSlot \u003d new SimpleSlot(\"prototype\", prototype, true);\n     this.prototype.setOwnerFunction(this);\n+    if (oldPrototype !\u003d null) {\n+        oldPrototype.setOwnerFunction(null);\n+    }\n     if (isConstructor() || isInterface()) {\n         FunctionType superClass \u003d getSuperClassConstructor();\n         if (superClass !\u003d null) {\n             superClass.addSubType(this);\n         }\n         if (isInterface()) {\n             for (ObjectType interfaceType : getExtendedInterfaces()) {\n                 if (interfaceType.getConstructor() !\u003d null) {\n                     interfaceType.getConstructor().addSubType(this);\n                 }\n             }\n         }\n     }\n     if (replacedPrototype) {\n         clearCachedValues();\n     }\n     return true;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5fa514bee8f76534232e4653eaf16cd416e08012": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "\nChange how Function prototypes are represented in the type\nsystem.  This fixes lots of bugs when an anonymous object is\nthe prototype, and will make life a lot easier for IDEs.\n\nR\u003djohnlenz\nDELTA\u003d370  (129 added, 177 deleted, 64 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3135\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1389 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/25/11, 8:10 AM",
      "commitName": "5fa514bee8f76534232e4653eaf16cd416e08012",
      "commitAuthor": "nicksantos@google.com",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "\nChange how Function prototypes are represented in the type\nsystem.  This fixes lots of bugs when an anonymous object is\nthe prototype, and will make life a lot easier for IDEs.\n\nR\u003djohnlenz\nDELTA\u003d370  (129 added, 177 deleted, 64 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3135\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1389 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "8/25/11, 8:10 AM",
          "commitName": "5fa514bee8f76534232e4653eaf16cd416e08012",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "8/22/11, 11:38 AM",
          "commitNameOld": "1aaaaa9fe982beb4cd34edb0f7452a3c6da199d9",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 2.86,
          "commitsBetweenForRepo": 17,
          "commitsBetweenForFile": 1,
          "actualSource": "public boolean setPrototype(PrototypeObjectType prototype) {\n    if (prototype \u003d\u003d null) {\n        return false;\n    }\n    if (isConstructor() \u0026\u0026 prototype \u003d\u003d getInstanceType()) {\n        return false;\n    }\n    boolean replacedPrototype \u003d prototype !\u003d null;\n    this.prototype \u003d prototype;\n    this.prototypeSlot \u003d new SimpleSlot(\"prototype\", prototype, true);\n    this.prototype.setOwnerFunction(this);\n    if (isConstructor() || isInterface()) {\n        FunctionType superClass \u003d getSuperClassConstructor();\n        if (superClass !\u003d null) {\n            superClass.addSubType(this);\n        }\n        if (isInterface()) {\n            for (ObjectType interfaceType : getExtendedInterfaces()) {\n                if (interfaceType.getConstructor() !\u003d null) {\n                    interfaceType.getConstructor().addSubType(this);\n                }\n            }\n        }\n    }\n    if (replacedPrototype) {\n        clearCachedValues();\n    }\n    return true;\n}",
          "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
          "functionStartLine": 357,
          "functionName": "setPrototype",
          "functionAnnotation": "",
          "functionDoc": "Sets the prototype.\n\n@param prototype the prototype. If this value is {@code null} it will\n       silently be discarded.\n",
          "diff": "@@ -1,28 +1,29 @@\n-public boolean setPrototype(FunctionPrototypeType prototype) {\n+public boolean setPrototype(PrototypeObjectType prototype) {\n     if (prototype \u003d\u003d null) {\n         return false;\n     }\n     if (isConstructor() \u0026\u0026 prototype \u003d\u003d getInstanceType()) {\n         return false;\n     }\n     boolean replacedPrototype \u003d prototype !\u003d null;\n     this.prototype \u003d prototype;\n     this.prototypeSlot \u003d new SimpleSlot(\"prototype\", prototype, true);\n+    this.prototype.setOwnerFunction(this);\n     if (isConstructor() || isInterface()) {\n         FunctionType superClass \u003d getSuperClassConstructor();\n         if (superClass !\u003d null) {\n             superClass.addSubType(this);\n         }\n         if (isInterface()) {\n             for (ObjectType interfaceType : getExtendedInterfaces()) {\n                 if (interfaceType.getConstructor() !\u003d null) {\n                     interfaceType.getConstructor().addSubType(this);\n                 }\n             }\n         }\n     }\n     if (replacedPrototype) {\n         clearCachedValues();\n     }\n     return true;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[prototype-FunctionPrototypeType]",
            "newValue": "[prototype-PrototypeObjectType]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nChange how Function prototypes are represented in the type\nsystem.  This fixes lots of bugs when an anonymous object is\nthe prototype, and will make life a lot easier for IDEs.\n\nR\u003djohnlenz\nDELTA\u003d370  (129 added, 177 deleted, 64 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3135\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1389 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "8/25/11, 8:10 AM",
          "commitName": "5fa514bee8f76534232e4653eaf16cd416e08012",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "8/22/11, 11:38 AM",
          "commitNameOld": "1aaaaa9fe982beb4cd34edb0f7452a3c6da199d9",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 2.86,
          "commitsBetweenForRepo": 17,
          "commitsBetweenForFile": 1,
          "actualSource": "public boolean setPrototype(PrototypeObjectType prototype) {\n    if (prototype \u003d\u003d null) {\n        return false;\n    }\n    if (isConstructor() \u0026\u0026 prototype \u003d\u003d getInstanceType()) {\n        return false;\n    }\n    boolean replacedPrototype \u003d prototype !\u003d null;\n    this.prototype \u003d prototype;\n    this.prototypeSlot \u003d new SimpleSlot(\"prototype\", prototype, true);\n    this.prototype.setOwnerFunction(this);\n    if (isConstructor() || isInterface()) {\n        FunctionType superClass \u003d getSuperClassConstructor();\n        if (superClass !\u003d null) {\n            superClass.addSubType(this);\n        }\n        if (isInterface()) {\n            for (ObjectType interfaceType : getExtendedInterfaces()) {\n                if (interfaceType.getConstructor() !\u003d null) {\n                    interfaceType.getConstructor().addSubType(this);\n                }\n            }\n        }\n    }\n    if (replacedPrototype) {\n        clearCachedValues();\n    }\n    return true;\n}",
          "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
          "functionStartLine": 357,
          "functionName": "setPrototype",
          "functionAnnotation": "",
          "functionDoc": "Sets the prototype.\n\n@param prototype the prototype. If this value is {@code null} it will\n       silently be discarded.\n",
          "diff": "@@ -1,28 +1,29 @@\n-public boolean setPrototype(FunctionPrototypeType prototype) {\n+public boolean setPrototype(PrototypeObjectType prototype) {\n     if (prototype \u003d\u003d null) {\n         return false;\n     }\n     if (isConstructor() \u0026\u0026 prototype \u003d\u003d getInstanceType()) {\n         return false;\n     }\n     boolean replacedPrototype \u003d prototype !\u003d null;\n     this.prototype \u003d prototype;\n     this.prototypeSlot \u003d new SimpleSlot(\"prototype\", prototype, true);\n+    this.prototype.setOwnerFunction(this);\n     if (isConstructor() || isInterface()) {\n         FunctionType superClass \u003d getSuperClassConstructor();\n         if (superClass !\u003d null) {\n             superClass.addSubType(this);\n         }\n         if (isInterface()) {\n             for (ObjectType interfaceType : getExtendedInterfaces()) {\n                 if (interfaceType.getConstructor() !\u003d null) {\n                     interfaceType.getConstructor().addSubType(this);\n                 }\n             }\n         }\n     }\n     if (replacedPrototype) {\n         clearCachedValues();\n     }\n     return true;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "1aaaaa9fe982beb4cd34edb0f7452a3c6da199d9": {
      "type": "Ybodychange",
      "commitMessage": "\nSimplify how the prototype prop is stored\n\nR\u003djohnlenz\nDELTA\u003d157  (87 added, 53 deleted, 17 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3082\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1371 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/22/11, 11:38 AM",
      "commitName": "1aaaaa9fe982beb4cd34edb0f7452a3c6da199d9",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "8/18/11, 3:46 PM",
      "commitNameOld": "bd9c7b620384fe5a98772729001ed56304459bc6",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 3.83,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "public boolean setPrototype(FunctionPrototypeType prototype) {\n    if (prototype \u003d\u003d null) {\n        return false;\n    }\n    if (isConstructor() \u0026\u0026 prototype \u003d\u003d getInstanceType()) {\n        return false;\n    }\n    boolean replacedPrototype \u003d prototype !\u003d null;\n    this.prototype \u003d prototype;\n    this.prototypeSlot \u003d new SimpleSlot(\"prototype\", prototype, true);\n    if (isConstructor() || isInterface()) {\n        FunctionType superClass \u003d getSuperClassConstructor();\n        if (superClass !\u003d null) {\n            superClass.addSubType(this);\n        }\n        if (isInterface()) {\n            for (ObjectType interfaceType : getExtendedInterfaces()) {\n                if (interfaceType.getConstructor() !\u003d null) {\n                    interfaceType.getConstructor().addSubType(this);\n                }\n            }\n        }\n    }\n    if (replacedPrototype) {\n        clearCachedValues();\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
      "functionStartLine": 331,
      "functionName": "setPrototype",
      "functionAnnotation": "",
      "functionDoc": "Sets the prototype.\n\n@param prototype the prototype. If this value is {@code null} it will\n       silently be discarded.\n",
      "diff": "@@ -1,27 +1,28 @@\n public boolean setPrototype(FunctionPrototypeType prototype) {\n     if (prototype \u003d\u003d null) {\n         return false;\n     }\n     if (isConstructor() \u0026\u0026 prototype \u003d\u003d getInstanceType()) {\n         return false;\n     }\n     boolean replacedPrototype \u003d prototype !\u003d null;\n     this.prototype \u003d prototype;\n+    this.prototypeSlot \u003d new SimpleSlot(\"prototype\", prototype, true);\n     if (isConstructor() || isInterface()) {\n         FunctionType superClass \u003d getSuperClassConstructor();\n         if (superClass !\u003d null) {\n             superClass.addSubType(this);\n         }\n         if (isInterface()) {\n             for (ObjectType interfaceType : getExtendedInterfaces()) {\n                 if (interfaceType.getConstructor() !\u003d null) {\n                     interfaceType.getConstructor().addSubType(this);\n                 }\n             }\n         }\n     }\n     if (replacedPrototype) {\n         clearCachedValues();\n     }\n     return true;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c438dfd06013f82daa648d23b864842ff1881695": {
      "type": "Ybodychange",
      "commitMessage": "\nImplement multiple extends for interfaces\n\nR\u003dnicksantos\nDELTA\u003d711  (635 added, 41 deleted, 35 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1917\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1105 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/16/11, 12:57 PM",
      "commitName": "c438dfd06013f82daa648d23b864842ff1881695",
      "commitAuthor": "zhuyi@google.com",
      "commitDateOld": "5/10/11, 2:34 PM",
      "commitNameOld": "2851a41947bed8b8e100c7dac7d1edbc1c909d24",
      "commitAuthorOld": "zhuyi@google.com",
      "daysBetweenCommits": 5.93,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "actualSource": "public boolean setPrototype(FunctionPrototypeType prototype) {\n    if (prototype \u003d\u003d null) {\n        return false;\n    }\n    if (isConstructor() \u0026\u0026 prototype \u003d\u003d getInstanceType()) {\n        return false;\n    }\n    boolean replacedPrototype \u003d prototype !\u003d null;\n    this.prototype \u003d prototype;\n    if (isConstructor() || isInterface()) {\n        FunctionType superClass \u003d getSuperClassConstructor();\n        if (superClass !\u003d null) {\n            superClass.addSubType(this);\n        }\n        if (isInterface()) {\n            for (ObjectType interfaceType : getExtendedInterfaces()) {\n                if (interfaceType.getConstructor() !\u003d null) {\n                    interfaceType.getConstructor().addSubType(this);\n                }\n            }\n        }\n    }\n    if (replacedPrototype) {\n        clearCachedValues();\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
      "functionStartLine": 304,
      "functionName": "setPrototype",
      "functionAnnotation": "",
      "functionDoc": "Sets the prototype.\n\n@param prototype the prototype. If this value is {@code null} it will\n       silently be discarded.\n",
      "diff": "@@ -1,20 +1,27 @@\n public boolean setPrototype(FunctionPrototypeType prototype) {\n     if (prototype \u003d\u003d null) {\n         return false;\n     }\n     if (isConstructor() \u0026\u0026 prototype \u003d\u003d getInstanceType()) {\n         return false;\n     }\n     boolean replacedPrototype \u003d prototype !\u003d null;\n     this.prototype \u003d prototype;\n     if (isConstructor() || isInterface()) {\n         FunctionType superClass \u003d getSuperClassConstructor();\n         if (superClass !\u003d null) {\n             superClass.addSubType(this);\n         }\n+        if (isInterface()) {\n+            for (ObjectType interfaceType : getExtendedInterfaces()) {\n+                if (interfaceType.getConstructor() !\u003d null) {\n+                    interfaceType.getConstructor().addSubType(this);\n+                }\n+            }\n+        }\n     }\n     if (replacedPrototype) {\n         clearCachedValues();\n     }\n     return true;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2851a41947bed8b8e100c7dac7d1edbc1c909d24": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nGot multiple cases broken from different teams.\n\n*** Original change description ***\n\nImplement multi extends for interfaces\n\nR\u003dnicksantos\nDELTA\u003d635  (41 added, 560 deleted, 34 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1813\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1077 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/10/11, 2:34 PM",
      "commitName": "2851a41947bed8b8e100c7dac7d1edbc1c909d24",
      "commitAuthor": "zhuyi@google.com",
      "commitDateOld": "5/10/11, 1:26 PM",
      "commitNameOld": "a36a61a9027c5bca5752b0ecca7c609c07e568bb",
      "commitAuthorOld": "zhuyi@google.com",
      "daysBetweenCommits": 0.05,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "public boolean setPrototype(FunctionPrototypeType prototype) {\n    if (prototype \u003d\u003d null) {\n        return false;\n    }\n    if (isConstructor() \u0026\u0026 prototype \u003d\u003d getInstanceType()) {\n        return false;\n    }\n    boolean replacedPrototype \u003d prototype !\u003d null;\n    this.prototype \u003d prototype;\n    if (isConstructor() || isInterface()) {\n        FunctionType superClass \u003d getSuperClassConstructor();\n        if (superClass !\u003d null) {\n            superClass.addSubType(this);\n        }\n    }\n    if (replacedPrototype) {\n        clearCachedValues();\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
      "functionStartLine": 298,
      "functionName": "setPrototype",
      "functionAnnotation": "",
      "functionDoc": "Sets the prototype.\n\n@param prototype the prototype. If this value is {@code null} it will\n       silently be discarded.\n",
      "diff": "@@ -1,27 +1,20 @@\n public boolean setPrototype(FunctionPrototypeType prototype) {\n     if (prototype \u003d\u003d null) {\n         return false;\n     }\n     if (isConstructor() \u0026\u0026 prototype \u003d\u003d getInstanceType()) {\n         return false;\n     }\n     boolean replacedPrototype \u003d prototype !\u003d null;\n     this.prototype \u003d prototype;\n     if (isConstructor() || isInterface()) {\n         FunctionType superClass \u003d getSuperClassConstructor();\n         if (superClass !\u003d null) {\n             superClass.addSubType(this);\n         }\n-        if (isInterface()) {\n-            for (ObjectType interfaceType : getExtendedInterfaces()) {\n-                if (interfaceType.getConstructor() !\u003d null) {\n-                    interfaceType.getConstructor().addSubType(this);\n-                }\n-            }\n-        }\n     }\n     if (replacedPrototype) {\n         clearCachedValues();\n     }\n     return true;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a36a61a9027c5bca5752b0ecca7c609c07e568bb": {
      "type": "Ybodychange",
      "commitMessage": "\nImplement multi extends for interfaces\n\nR\u003dnicksantos\nDELTA\u003d635  (560 added, 41 deleted, 34 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1810\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1074 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/10/11, 1:26 PM",
      "commitName": "a36a61a9027c5bca5752b0ecca7c609c07e568bb",
      "commitAuthor": "zhuyi@google.com",
      "commitDateOld": "4/19/11, 5:06 PM",
      "commitNameOld": "e82290302eaf2757281651588ee43441ed6d57d6",
      "commitAuthorOld": "zhuyi@google.com",
      "daysBetweenCommits": 20.85,
      "commitsBetweenForRepo": 50,
      "commitsBetweenForFile": 1,
      "actualSource": "public boolean setPrototype(FunctionPrototypeType prototype) {\n    if (prototype \u003d\u003d null) {\n        return false;\n    }\n    if (isConstructor() \u0026\u0026 prototype \u003d\u003d getInstanceType()) {\n        return false;\n    }\n    boolean replacedPrototype \u003d prototype !\u003d null;\n    this.prototype \u003d prototype;\n    if (isConstructor() || isInterface()) {\n        FunctionType superClass \u003d getSuperClassConstructor();\n        if (superClass !\u003d null) {\n            superClass.addSubType(this);\n        }\n        if (isInterface()) {\n            for (ObjectType interfaceType : getExtendedInterfaces()) {\n                if (interfaceType.getConstructor() !\u003d null) {\n                    interfaceType.getConstructor().addSubType(this);\n                }\n            }\n        }\n    }\n    if (replacedPrototype) {\n        clearCachedValues();\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
      "functionStartLine": 304,
      "functionName": "setPrototype",
      "functionAnnotation": "",
      "functionDoc": "Sets the prototype.\n\n@param prototype the prototype. If this value is {@code null} it will\n       silently be discarded.\n",
      "diff": "@@ -1,20 +1,27 @@\n public boolean setPrototype(FunctionPrototypeType prototype) {\n     if (prototype \u003d\u003d null) {\n         return false;\n     }\n     if (isConstructor() \u0026\u0026 prototype \u003d\u003d getInstanceType()) {\n         return false;\n     }\n     boolean replacedPrototype \u003d prototype !\u003d null;\n     this.prototype \u003d prototype;\n     if (isConstructor() || isInterface()) {\n         FunctionType superClass \u003d getSuperClassConstructor();\n         if (superClass !\u003d null) {\n             superClass.addSubType(this);\n         }\n+        if (isInterface()) {\n+            for (ObjectType interfaceType : getExtendedInterfaces()) {\n+                if (interfaceType.getConstructor() !\u003d null) {\n+                    interfaceType.getConstructor().addSubType(this);\n+                }\n+            }\n+        }\n     }\n     if (replacedPrototype) {\n         clearCachedValues();\n     }\n     return true;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "840ddca5b28cea7563a5be20d2624478af67bc02": {
      "type": "Ybodychange",
      "commitMessage": "\nFix a regression for when the user assigns an unknown\nvalue to a prototype. We don\u0027t need to handle this case well,\nas long as we handle it consistently.\n\nR\u003djohnlenz\nDELTA\u003d73  (73 added, 0 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d298\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@699 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/18/11, 9:27 AM",
      "commitName": "840ddca5b28cea7563a5be20d2624478af67bc02",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "1/7/11, 9:19 AM",
      "commitNameOld": "6bbac115c9a7928a7053b2da3a78df9569df8570",
      "commitAuthorOld": "bashir@google.com",
      "daysBetweenCommits": 11.01,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "actualSource": "public boolean setPrototype(FunctionPrototypeType prototype) {\n    if (prototype \u003d\u003d null) {\n        return false;\n    }\n    if (isConstructor() \u0026\u0026 prototype \u003d\u003d getInstanceType()) {\n        return false;\n    }\n    boolean replacedPrototype \u003d prototype !\u003d null;\n    this.prototype \u003d prototype;\n    if (isConstructor() || isInterface()) {\n        FunctionType superClass \u003d getSuperClassConstructor();\n        if (superClass !\u003d null) {\n            superClass.addSubType(this);\n        }\n    }\n    if (replacedPrototype) {\n        clearCachedValues();\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
      "functionStartLine": 286,
      "functionName": "setPrototype",
      "functionAnnotation": "",
      "functionDoc": "Sets the prototype.\n\n@param prototype the prototype. If this value is {@code null} it will\n       silently be discarded.\n",
      "diff": "@@ -1,16 +1,20 @@\n public boolean setPrototype(FunctionPrototypeType prototype) {\n     if (prototype \u003d\u003d null) {\n         return false;\n     }\n     if (isConstructor() \u0026\u0026 prototype \u003d\u003d getInstanceType()) {\n         return false;\n     }\n+    boolean replacedPrototype \u003d prototype !\u003d null;\n     this.prototype \u003d prototype;\n     if (isConstructor() || isInterface()) {\n         FunctionType superClass \u003d getSuperClassConstructor();\n         if (superClass !\u003d null) {\n             superClass.addSubType(this);\n         }\n     }\n+    if (replacedPrototype) {\n+        clearCachedValues();\n+    }\n     return true;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,16 @@\n+public boolean setPrototype(FunctionPrototypeType prototype) {\n+    if (prototype \u003d\u003d null) {\n+        return false;\n+    }\n+    if (isConstructor() \u0026\u0026 prototype \u003d\u003d getInstanceType()) {\n+        return false;\n+    }\n+    this.prototype \u003d prototype;\n+    if (isConstructor() || isInterface()) {\n+        FunctionType superClass \u003d getSuperClassConstructor();\n+        if (superClass !\u003d null) {\n+            superClass.addSubType(this);\n+        }\n+    }\n+    return true;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public boolean setPrototype(FunctionPrototypeType prototype) {\n    if (prototype \u003d\u003d null) {\n        return false;\n    }\n    if (isConstructor() \u0026\u0026 prototype \u003d\u003d getInstanceType()) {\n        return false;\n    }\n    this.prototype \u003d prototype;\n    if (isConstructor() || isInterface()) {\n        FunctionType superClass \u003d getSuperClassConstructor();\n        if (superClass !\u003d null) {\n            superClass.addSubType(this);\n        }\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
      "functionStartLine": 335,
      "functionName": "setPrototype",
      "functionAnnotation": "",
      "functionDoc": "Sets the prototype.\n\n@param prototype the prototype. If this value is {@code null} it will\n       silently be discarded.\n"
    }
  }
}