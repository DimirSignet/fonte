{
  "origin": "codeshovel",
  "repositoryName": "Closure-21b",
  "repositoryPath": "/tmp/Closure-21b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Compiler.java",
  "functionName": "initInputsByIdMap",
  "functionId": "initInputsByIdMap",
  "sourceFilePath": "src/com/google/javascript/jscomp/Compiler.java",
  "functionAnnotation": "",
  "functionDoc": "Creates a map to make looking up an input by name fast. Also checks for\nduplicate inputs.\n",
  "functionStartLine": 486,
  "functionEndLine": 502,
  "numCommitsSeen": 246,
  "timeTaken": 10077,
  "changeHistory": [
    "a4c526dae1537f027f429145656ffb849699c1fc",
    "1b8156d41fe441ab03999f1e2c5ac4537e79fc75",
    "a70a7c599e53a7752cf4b9e6e82b4408c3c4c04b",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "a4c526dae1537f027f429145656ffb849699c1fc": "Ybodychange",
    "1b8156d41fe441ab03999f1e2c5ac4537e79fc75": "Ymultichange(Yrename,Ybodychange)",
    "a70a7c599e53a7752cf4b9e6e82b4408c3c4c04b": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a4c526dae1537f027f429145656ffb849699c1fc": {
      "type": "Ybodychange",
      "commitMessage": "\nsort dependencies by default\n\nR\u003dacleung\nDELTA\u003d86  (44 added, 16 deleted, 26 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d4348\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1824 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/9/12, 3:05 PM",
      "commitName": "a4c526dae1537f027f429145656ffb849699c1fc",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "3/8/12, 8:16 PM",
      "commitNameOld": "45780d8a222f8da8106c18afee3c975933af195c",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.78,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "void initInputsByIdMap() {\n    inputsById \u003d new HashMap\u003cInputId, CompilerInput\u003e();\n    for (CompilerInput input : externs) {\n        InputId id \u003d input.getInputId();\n        CompilerInput previous \u003d putCompilerInput(id, input);\n        if (previous !\u003d null) {\n            report(JSError.make(DUPLICATE_EXTERN_INPUT, input.getName()));\n        }\n    }\n    for (CompilerInput input : inputs) {\n        InputId id \u003d input.getInputId();\n        CompilerInput previous \u003d putCompilerInput(id, input);\n        if (previous !\u003d null) {\n            report(JSError.make(DUPLICATE_INPUT, input.getName()));\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/Compiler.java",
      "functionStartLine": 478,
      "functionName": "initInputsByIdMap",
      "functionAnnotation": "",
      "functionDoc": "Creates a map to make looking up an input by name fast. Also checks for\nduplicate inputs.\n",
      "diff": "@@ -1,17 +1,17 @@\n void initInputsByIdMap() {\n     inputsById \u003d new HashMap\u003cInputId, CompilerInput\u003e();\n     for (CompilerInput input : externs) {\n         InputId id \u003d input.getInputId();\n-        CompilerInput previous \u003d inputsById.put(id, input);\n+        CompilerInput previous \u003d putCompilerInput(id, input);\n         if (previous !\u003d null) {\n             report(JSError.make(DUPLICATE_EXTERN_INPUT, input.getName()));\n         }\n     }\n     for (CompilerInput input : inputs) {\n         InputId id \u003d input.getInputId();\n-        CompilerInput previous \u003d inputsById.put(id, input);\n+        CompilerInput previous \u003d putCompilerInput(id, input);\n         if (previous !\u003d null) {\n             report(JSError.make(DUPLICATE_INPUT, input.getName()));\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1b8156d41fe441ab03999f1e2c5ac4537e79fc75": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "\nPart 4, source name/input id split: Require an InputId to lookup a CompilerInput.\n\nR\u003dnicksantos\nDELTA\u003d266  (106 added, 20 deleted, 140 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2899\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1328 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/4/11, 11:43 AM",
      "commitName": "1b8156d41fe441ab03999f1e2c5ac4537e79fc75",
      "commitAuthor": "johnlenz@google.com",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "\nPart 4, source name/input id split: Require an InputId to lookup a CompilerInput.\n\nR\u003dnicksantos\nDELTA\u003d266  (106 added, 20 deleted, 140 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2899\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1328 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "8/4/11, 11:43 AM",
          "commitName": "1b8156d41fe441ab03999f1e2c5ac4537e79fc75",
          "commitAuthor": "johnlenz@google.com",
          "commitDateOld": "8/2/11, 7:38 AM",
          "commitNameOld": "a552292e3b4f37b367a8b554a6e708506ad3781f",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 2.17,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "actualSource": "void initInputsByIdMap() {\n    inputsById \u003d new HashMap\u003cInputId, CompilerInput\u003e();\n    for (CompilerInput input : externs) {\n        InputId id \u003d input.getInputId();\n        CompilerInput previous \u003d inputsById.put(id, input);\n        if (previous !\u003d null) {\n            report(JSError.make(DUPLICATE_EXTERN_INPUT, input.getName()));\n        }\n    }\n    for (CompilerInput input : inputs) {\n        InputId id \u003d input.getInputId();\n        CompilerInput previous \u003d inputsById.put(id, input);\n        if (previous !\u003d null) {\n            report(JSError.make(DUPLICATE_INPUT, input.getName()));\n        }\n    }\n}",
          "path": "src/com/google/javascript/jscomp/Compiler.java",
          "functionStartLine": 457,
          "functionName": "initInputsByIdMap",
          "functionAnnotation": "",
          "functionDoc": "Creates a map to make looking up an input by name fast. Also checks for\nduplicate inputs.\n",
          "diff": "@@ -1,19 +1,17 @@\n-void initInputsByNameMap() {\n-    inputsByName \u003d new HashMap\u003cString, CompilerInput\u003e();\n+void initInputsByIdMap() {\n+    inputsById \u003d new HashMap\u003cInputId, CompilerInput\u003e();\n     for (CompilerInput input : externs) {\n-        String name \u003d input.getName();\n-        if (!inputsByName.containsKey(name)) {\n-            inputsByName.put(name, input);\n-        } else {\n-            report(JSError.make(DUPLICATE_EXTERN_INPUT, name));\n+        InputId id \u003d input.getInputId();\n+        CompilerInput previous \u003d inputsById.put(id, input);\n+        if (previous !\u003d null) {\n+            report(JSError.make(DUPLICATE_EXTERN_INPUT, input.getName()));\n         }\n     }\n     for (CompilerInput input : inputs) {\n-        String name \u003d input.getName();\n-        if (!inputsByName.containsKey(name)) {\n-            inputsByName.put(name, input);\n-        } else {\n-            report(JSError.make(DUPLICATE_INPUT, name));\n+        InputId id \u003d input.getInputId();\n+        CompilerInput previous \u003d inputsById.put(id, input);\n+        if (previous !\u003d null) {\n+            report(JSError.make(DUPLICATE_INPUT, input.getName()));\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "initInputsByNameMap",
            "newValue": "initInputsByIdMap"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nPart 4, source name/input id split: Require an InputId to lookup a CompilerInput.\n\nR\u003dnicksantos\nDELTA\u003d266  (106 added, 20 deleted, 140 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2899\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1328 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "8/4/11, 11:43 AM",
          "commitName": "1b8156d41fe441ab03999f1e2c5ac4537e79fc75",
          "commitAuthor": "johnlenz@google.com",
          "commitDateOld": "8/2/11, 7:38 AM",
          "commitNameOld": "a552292e3b4f37b367a8b554a6e708506ad3781f",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 2.17,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "actualSource": "void initInputsByIdMap() {\n    inputsById \u003d new HashMap\u003cInputId, CompilerInput\u003e();\n    for (CompilerInput input : externs) {\n        InputId id \u003d input.getInputId();\n        CompilerInput previous \u003d inputsById.put(id, input);\n        if (previous !\u003d null) {\n            report(JSError.make(DUPLICATE_EXTERN_INPUT, input.getName()));\n        }\n    }\n    for (CompilerInput input : inputs) {\n        InputId id \u003d input.getInputId();\n        CompilerInput previous \u003d inputsById.put(id, input);\n        if (previous !\u003d null) {\n            report(JSError.make(DUPLICATE_INPUT, input.getName()));\n        }\n    }\n}",
          "path": "src/com/google/javascript/jscomp/Compiler.java",
          "functionStartLine": 457,
          "functionName": "initInputsByIdMap",
          "functionAnnotation": "",
          "functionDoc": "Creates a map to make looking up an input by name fast. Also checks for\nduplicate inputs.\n",
          "diff": "@@ -1,19 +1,17 @@\n-void initInputsByNameMap() {\n-    inputsByName \u003d new HashMap\u003cString, CompilerInput\u003e();\n+void initInputsByIdMap() {\n+    inputsById \u003d new HashMap\u003cInputId, CompilerInput\u003e();\n     for (CompilerInput input : externs) {\n-        String name \u003d input.getName();\n-        if (!inputsByName.containsKey(name)) {\n-            inputsByName.put(name, input);\n-        } else {\n-            report(JSError.make(DUPLICATE_EXTERN_INPUT, name));\n+        InputId id \u003d input.getInputId();\n+        CompilerInput previous \u003d inputsById.put(id, input);\n+        if (previous !\u003d null) {\n+            report(JSError.make(DUPLICATE_EXTERN_INPUT, input.getName()));\n         }\n     }\n     for (CompilerInput input : inputs) {\n-        String name \u003d input.getName();\n-        if (!inputsByName.containsKey(name)) {\n-            inputsByName.put(name, input);\n-        } else {\n-            report(JSError.make(DUPLICATE_INPUT, name));\n+        InputId id \u003d input.getInputId();\n+        CompilerInput previous \u003d inputsById.put(id, input);\n+        if (previous !\u003d null) {\n+            report(JSError.make(DUPLICATE_INPUT, input.getName()));\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "a70a7c599e53a7752cf4b9e6e82b4408c3c4c04b": {
      "type": "Ybodychange",
      "commitMessage": "fix silly 2004-era naming conventions (Nick)\nR\u003djohn\nDELTA\u003d134  (0 added, 0 deleted, 134 changed)\n\nInsert a place holder file for any empty modules. (Alan)\nR\u003dnick\nDELTA\u003d53  (46 added, 6 deleted, 1 changed)\n\nMaps API extern update.\n(Contributed by Chad Killingsworth)\nFixes issue 121\nDELTA\u003d86  (48 added, 16 deleted, 22 changed)\n\n\nGoogle Loader API externs.\n(Contributed by Chad Killingsworth)\nFixes issue 126\nDELTA\u003d54  (54 added, 0 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@149 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/22/10, 10:51 PM",
      "commitName": "a70a7c599e53a7752cf4b9e6e82b4408c3c4c04b",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "3/22/10, 3:55 PM",
      "commitNameOld": "b347ce3a71e23a4ab92dc0a6c07d43e2f497c953",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 0.29,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "void initInputsByNameMap() {\n    inputsByName \u003d new HashMap\u003cString, CompilerInput\u003e();\n    for (CompilerInput input : externs) {\n        String name \u003d input.getName();\n        if (!inputsByName.containsKey(name)) {\n            inputsByName.put(name, input);\n        } else {\n            report(JSError.make(DUPLICATE_EXTERN_INPUT, name));\n        }\n    }\n    for (CompilerInput input : inputs) {\n        String name \u003d input.getName();\n        if (!inputsByName.containsKey(name)) {\n            inputsByName.put(name, input);\n        } else {\n            report(JSError.make(DUPLICATE_INPUT, name));\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/Compiler.java",
      "functionStartLine": 392,
      "functionName": "initInputsByNameMap",
      "functionAnnotation": "",
      "functionDoc": "Creates a map to make looking up an input by name fast. Also checks for\nduplicate inputs.\n",
      "diff": "@@ -1,19 +1,19 @@\n void initInputsByNameMap() {\n-    inputsByName_ \u003d new HashMap\u003cString, CompilerInput\u003e();\n-    for (CompilerInput input : externs_) {\n+    inputsByName \u003d new HashMap\u003cString, CompilerInput\u003e();\n+    for (CompilerInput input : externs) {\n         String name \u003d input.getName();\n-        if (!inputsByName_.containsKey(name)) {\n-            inputsByName_.put(name, input);\n+        if (!inputsByName.containsKey(name)) {\n+            inputsByName.put(name, input);\n         } else {\n             report(JSError.make(DUPLICATE_EXTERN_INPUT, name));\n         }\n     }\n-    for (CompilerInput input : inputs_) {\n+    for (CompilerInput input : inputs) {\n         String name \u003d input.getName();\n-        if (!inputsByName_.containsKey(name)) {\n-            inputsByName_.put(name, input);\n+        if (!inputsByName.containsKey(name)) {\n+            inputsByName.put(name, input);\n         } else {\n             report(JSError.make(DUPLICATE_INPUT, name));\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,19 @@\n+void initInputsByNameMap() {\n+    inputsByName_ \u003d new HashMap\u003cString, CompilerInput\u003e();\n+    for (CompilerInput input : externs_) {\n+        String name \u003d input.getName();\n+        if (!inputsByName_.containsKey(name)) {\n+            inputsByName_.put(name, input);\n+        } else {\n+            report(JSError.make(DUPLICATE_EXTERN_INPUT, name));\n+        }\n+    }\n+    for (CompilerInput input : inputs_) {\n+        String name \u003d input.getName();\n+        if (!inputsByName_.containsKey(name)) {\n+            inputsByName_.put(name, input);\n+        } else {\n+            report(JSError.make(DUPLICATE_INPUT, name));\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "void initInputsByNameMap() {\n    inputsByName_ \u003d new HashMap\u003cString, CompilerInput\u003e();\n    for (CompilerInput input : externs_) {\n        String name \u003d input.getName();\n        if (!inputsByName_.containsKey(name)) {\n            inputsByName_.put(name, input);\n        } else {\n            report(JSError.make(DUPLICATE_EXTERN_INPUT, name));\n        }\n    }\n    for (CompilerInput input : inputs_) {\n        String name \u003d input.getName();\n        if (!inputsByName_.containsKey(name)) {\n            inputsByName_.put(name, input);\n        } else {\n            report(JSError.make(DUPLICATE_INPUT, name));\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/Compiler.java",
      "functionStartLine": 379,
      "functionName": "initInputsByNameMap",
      "functionAnnotation": "",
      "functionDoc": "Creates a map to make looking up an input by name fast. Also checks for\nduplicate inputs.\n"
    }
  }
}