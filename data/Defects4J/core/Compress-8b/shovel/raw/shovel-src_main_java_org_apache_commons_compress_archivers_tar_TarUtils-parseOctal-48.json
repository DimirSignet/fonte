{
  "origin": "codeshovel",
  "repositoryName": "Compress-8b",
  "repositoryPath": "/tmp/Compress-8b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TarUtils.java",
  "functionName": "parseOctal",
  "functionId": "parseOctal___buffer-byte[]__offset-int(modifiers-final)__length-int(modifiers-final)",
  "sourceFilePath": "src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java",
  "functionAnnotation": "",
  "functionDoc": "Parse an octal string from a buffer.\nLeading spaces are ignored.\nParsing stops when a NUL is found, or a trailing space,\nor the buffer length is reached.\n\nBehaviour with non-octal input is currently undefined.\n\n@param buffer The buffer from which to parse.\n@param offset The offset into the buffer from which to parse.\n@param length The maximum number of bytes to parse.\n@return The long value of the octal string.\n",
  "functionStartLine": 48,
  "functionEndLine": 81,
  "numCommitsSeen": 16,
  "timeTaken": 457,
  "changeHistory": [
    "1d5567004306b3c6019b4e828f811220fc3fe990",
    "11349c5f52e0355a11ced6234ae424da73c9503b",
    "ae3c158e05af20843fb5ea72deb5b7fb1fefbd54",
    "46ad24db76c6f65480736006c2da8b8e5bf8ee25",
    "ca16539029cd63e0ab5c9e3cba354a539f94e316"
  ],
  "changeHistoryShort": {
    "1d5567004306b3c6019b4e828f811220fc3fe990": "Ymultichange(Ybodychange,Yparametermetachange)",
    "11349c5f52e0355a11ced6234ae424da73c9503b": "Ydocchange",
    "ae3c158e05af20843fb5ea72deb5b7fb1fefbd54": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "46ad24db76c6f65480736006c2da8b8e5bf8ee25": "Ymultichange(Ybodychange,Yparametermetachange,Ydocchange)",
    "ca16539029cd63e0ab5c9e3cba354a539f94e316": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1d5567004306b3c6019b4e828f811220fc3fe990": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange)",
      "commitMessage": "Rename TarUtils.getXXX methods as formatXXX\nUpdate Javadoc\nThrow IllegalArgumentException if value won\u0027t fit in buffer\nTreat long values as unsigned\nUse String instead of StringBuffer for names etc\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@761372 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/2/09, 11:45 AM",
      "commitName": "1d5567004306b3c6019b4e828f811220fc3fe990",
      "commitAuthor": "Sebastian Bazley",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Rename TarUtils.getXXX methods as formatXXX\nUpdate Javadoc\nThrow IllegalArgumentException if value won\u0027t fit in buffer\nTreat long values as unsigned\nUse String instead of StringBuffer for names etc\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@761372 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "4/2/09, 11:45 AM",
          "commitName": "1d5567004306b3c6019b4e828f811220fc3fe990",
          "commitAuthor": "Sebastian Bazley",
          "commitDateOld": "3/31/09, 5:00 PM",
          "commitNameOld": "91401bff7493957e0b7f5a91151d005a1d3b7a27",
          "commitAuthorOld": "Sebastian Bazley",
          "daysBetweenCommits": 1.78,
          "commitsBetweenForRepo": 18,
          "commitsBetweenForFile": 1,
          "actualSource": "public static long parseOctal(byte[] buffer, final int offset, final int length) {\n    long result \u003d 0;\n    boolean stillPadding \u003d true;\n    int end \u003d offset + length;\n    for (int i \u003d offset; i \u003c end; ++i) {\n        final byte currentByte \u003d buffer[i];\n        if (currentByte \u003d\u003d 0) {\n            break;\n        }\n        if (currentByte \u003d\u003d (byte) \u0027 \u0027 || currentByte \u003d\u003d \u00270\u0027) {\n            if (stillPadding) {\n                continue;\n            }\n            if (currentByte \u003d\u003d (byte) \u0027 \u0027) {\n                break;\n            }\n        }\n        stillPadding \u003d false;\n        if (currentByte \u003c \u00270\u0027 || currentByte \u003e \u00277\u0027) {\n            throw new IllegalArgumentException(\"Invalid octal digit at position \" + i + \" in \u0027\" + new String(buffer, offset, length) + \"\u0027\");\n        }\n        result \u003d (result \u003c\u003c 3) + (currentByte - \u00270\u0027);\n    }\n    return result;\n}",
          "path": "src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java",
          "functionStartLine": 44,
          "functionName": "parseOctal",
          "functionAnnotation": "",
          "functionDoc": "Parse an octal string from a buffer.\nLeading spaces are ignored.\nParsing stops when a NUL is found, or a trailing space,\nor the buffer length is reached.\n\nBehaviour with non-octal input is currently undefined.\n\n@param buffer The buffer from which to parse.\n@param offset The offset into the buffer from which to parse.\n@param length The maximum number of bytes to parse.\n@return The long value of the octal string.\n",
          "diff": "@@ -1,21 +1,25 @@\n-public static long parseOctal(byte[] buffer, int offset, int length) {\n+public static long parseOctal(byte[] buffer, final int offset, final int length) {\n     long result \u003d 0;\n     boolean stillPadding \u003d true;\n     int end \u003d offset + length;\n     for (int i \u003d offset; i \u003c end; ++i) {\n-        if (buffer[i] \u003d\u003d 0) {\n+        final byte currentByte \u003d buffer[i];\n+        if (currentByte \u003d\u003d 0) {\n             break;\n         }\n-        if (buffer[i] \u003d\u003d (byte) \u0027 \u0027 || buffer[i] \u003d\u003d \u00270\u0027) {\n+        if (currentByte \u003d\u003d (byte) \u0027 \u0027 || currentByte \u003d\u003d \u00270\u0027) {\n             if (stillPadding) {\n                 continue;\n             }\n-            if (buffer[i] \u003d\u003d (byte) \u0027 \u0027) {\n+            if (currentByte \u003d\u003d (byte) \u0027 \u0027) {\n                 break;\n             }\n         }\n         stillPadding \u003d false;\n-        result \u003d (result \u003c\u003c 3) + (buffer[i] - \u00270\u0027);\n+        if (currentByte \u003c \u00270\u0027 || currentByte \u003e \u00277\u0027) {\n+            throw new IllegalArgumentException(\"Invalid octal digit at position \" + i + \" in \u0027\" + new String(buffer, offset, length) + \"\u0027\");\n+        }\n+        result \u003d (result \u003c\u003c 3) + (currentByte - \u00270\u0027);\n     }\n     return result;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "Rename TarUtils.getXXX methods as formatXXX\nUpdate Javadoc\nThrow IllegalArgumentException if value won\u0027t fit in buffer\nTreat long values as unsigned\nUse String instead of StringBuffer for names etc\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@761372 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "4/2/09, 11:45 AM",
          "commitName": "1d5567004306b3c6019b4e828f811220fc3fe990",
          "commitAuthor": "Sebastian Bazley",
          "commitDateOld": "3/31/09, 5:00 PM",
          "commitNameOld": "91401bff7493957e0b7f5a91151d005a1d3b7a27",
          "commitAuthorOld": "Sebastian Bazley",
          "daysBetweenCommits": 1.78,
          "commitsBetweenForRepo": 18,
          "commitsBetweenForFile": 1,
          "actualSource": "public static long parseOctal(byte[] buffer, final int offset, final int length) {\n    long result \u003d 0;\n    boolean stillPadding \u003d true;\n    int end \u003d offset + length;\n    for (int i \u003d offset; i \u003c end; ++i) {\n        final byte currentByte \u003d buffer[i];\n        if (currentByte \u003d\u003d 0) {\n            break;\n        }\n        if (currentByte \u003d\u003d (byte) \u0027 \u0027 || currentByte \u003d\u003d \u00270\u0027) {\n            if (stillPadding) {\n                continue;\n            }\n            if (currentByte \u003d\u003d (byte) \u0027 \u0027) {\n                break;\n            }\n        }\n        stillPadding \u003d false;\n        if (currentByte \u003c \u00270\u0027 || currentByte \u003e \u00277\u0027) {\n            throw new IllegalArgumentException(\"Invalid octal digit at position \" + i + \" in \u0027\" + new String(buffer, offset, length) + \"\u0027\");\n        }\n        result \u003d (result \u003c\u003c 3) + (currentByte - \u00270\u0027);\n    }\n    return result;\n}",
          "path": "src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java",
          "functionStartLine": 44,
          "functionName": "parseOctal",
          "functionAnnotation": "",
          "functionDoc": "Parse an octal string from a buffer.\nLeading spaces are ignored.\nParsing stops when a NUL is found, or a trailing space,\nor the buffer length is reached.\n\nBehaviour with non-octal input is currently undefined.\n\n@param buffer The buffer from which to parse.\n@param offset The offset into the buffer from which to parse.\n@param length The maximum number of bytes to parse.\n@return The long value of the octal string.\n",
          "diff": "@@ -1,21 +1,25 @@\n-public static long parseOctal(byte[] buffer, int offset, int length) {\n+public static long parseOctal(byte[] buffer, final int offset, final int length) {\n     long result \u003d 0;\n     boolean stillPadding \u003d true;\n     int end \u003d offset + length;\n     for (int i \u003d offset; i \u003c end; ++i) {\n-        if (buffer[i] \u003d\u003d 0) {\n+        final byte currentByte \u003d buffer[i];\n+        if (currentByte \u003d\u003d 0) {\n             break;\n         }\n-        if (buffer[i] \u003d\u003d (byte) \u0027 \u0027 || buffer[i] \u003d\u003d \u00270\u0027) {\n+        if (currentByte \u003d\u003d (byte) \u0027 \u0027 || currentByte \u003d\u003d \u00270\u0027) {\n             if (stillPadding) {\n                 continue;\n             }\n-            if (buffer[i] \u003d\u003d (byte) \u0027 \u0027) {\n+            if (currentByte \u003d\u003d (byte) \u0027 \u0027) {\n                 break;\n             }\n         }\n         stillPadding \u003d false;\n-        result \u003d (result \u003c\u003c 3) + (buffer[i] - \u00270\u0027);\n+        if (currentByte \u003c \u00270\u0027 || currentByte \u003e \u00277\u0027) {\n+            throw new IllegalArgumentException(\"Invalid octal digit at position \" + i + \" in \u0027\" + new String(buffer, offset, length) + \"\u0027\");\n+        }\n+        result \u003d (result \u003c\u003c 3) + (currentByte - \u00270\u0027);\n     }\n     return result;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[buffer-byte[], offset-int, length-int]",
            "newValue": "[buffer-byte[], offset-int(modifiers-final), length-int(modifiers-final)]"
          }
        }
      ]
    },
    "11349c5f52e0355a11ced6234ae424da73c9503b": {
      "type": "Ydocchange",
      "commitMessage": "Extract generic octal formatting method to simplify code and eliminate array copies\nChange leading padding to zeroes as that is more compatible (and required for Posix)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@760737 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/31/09, 4:49 PM",
      "commitName": "11349c5f52e0355a11ced6234ae424da73c9503b",
      "commitAuthor": "Sebastian Bazley",
      "commitDateOld": "3/31/09, 9:24 AM",
      "commitNameOld": "ae3c158e05af20843fb5ea72deb5b7fb1fefbd54",
      "commitAuthorOld": "Sebastian Bazley",
      "daysBetweenCommits": 0.31,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "public static long parseOctal(byte[] buffer, int offset, int length) {\n    long result \u003d 0;\n    boolean stillPadding \u003d true;\n    int end \u003d offset + length;\n    for (int i \u003d offset; i \u003c end; ++i) {\n        if (buffer[i] \u003d\u003d 0) {\n            break;\n        }\n        if (buffer[i] \u003d\u003d (byte) \u0027 \u0027 || buffer[i] \u003d\u003d \u00270\u0027) {\n            if (stillPadding) {\n                continue;\n            }\n            if (buffer[i] \u003d\u003d (byte) \u0027 \u0027) {\n                break;\n            }\n        }\n        stillPadding \u003d false;\n        result \u003d (result \u003c\u003c 3) + (buffer[i] - \u00270\u0027);\n    }\n    return result;\n}",
      "path": "src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java",
      "functionStartLine": 44,
      "functionName": "parseOctal",
      "functionAnnotation": "",
      "functionDoc": "Parse an octal string from a buffer.\nLeading spaces are ignored.\nParsing stops when a NUL is found, or a trailing space,\nor the buffer length is reached.\n\nBehaviour with non-octal input is currently undefined.\n\n@param buffer The buffer from which to parse.\n@param offset The offset into the buffer from which to parse.\n@param length The maximum number of bytes to parse.\n@return The long value of the octal string.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Parse an octal string from a buffer.\nLeading spaces are ignored.\nParsing stops when a NUL is found, or a trailing space,\nor the buffer length is reached.\n\n@param buffer The buffer from which to parse.\n@param offset The offset into the buffer from which to parse.\n@param length The maximum number of bytes to parse.\n@return The long value of the octal string.\n",
        "newValue": "Parse an octal string from a buffer.\nLeading spaces are ignored.\nParsing stops when a NUL is found, or a trailing space,\nor the buffer length is reached.\n\nBehaviour with non-octal input is currently undefined.\n\n@param buffer The buffer from which to parse.\n@param offset The offset into the buffer from which to parse.\n@param length The maximum number of bytes to parse.\n@return The long value of the octal string.\n"
      }
    },
    "ae3c158e05af20843fb5ea72deb5b7fb1fefbd54": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "Attempt at Javadoc - needs refining...\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@760507 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/31/09, 9:24 AM",
      "commitName": "ae3c158e05af20843fb5ea72deb5b7fb1fefbd54",
      "commitAuthor": "Sebastian Bazley",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Attempt at Javadoc - needs refining...\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@760507 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "3/31/09, 9:24 AM",
          "commitName": "ae3c158e05af20843fb5ea72deb5b7fb1fefbd54",
          "commitAuthor": "Sebastian Bazley",
          "commitDateOld": "3/27/09, 5:03 PM",
          "commitNameOld": "44dbd93bc551ba4158024a3fa4f2defcf94b2b33",
          "commitAuthorOld": "Sebastian Bazley",
          "daysBetweenCommits": 3.68,
          "commitsBetweenForRepo": 65,
          "commitsBetweenForFile": 1,
          "actualSource": "public static long parseOctal(byte[] buffer, int offset, int length) {\n    long result \u003d 0;\n    boolean stillPadding \u003d true;\n    int end \u003d offset + length;\n    for (int i \u003d offset; i \u003c end; ++i) {\n        if (buffer[i] \u003d\u003d 0) {\n            break;\n        }\n        if (buffer[i] \u003d\u003d (byte) \u0027 \u0027 || buffer[i] \u003d\u003d \u00270\u0027) {\n            if (stillPadding) {\n                continue;\n            }\n            if (buffer[i] \u003d\u003d (byte) \u0027 \u0027) {\n                break;\n            }\n        }\n        stillPadding \u003d false;\n        result \u003d (result \u003c\u003c 3) + (buffer[i] - \u00270\u0027);\n    }\n    return result;\n}",
          "path": "src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java",
          "functionStartLine": 42,
          "functionName": "parseOctal",
          "functionAnnotation": "",
          "functionDoc": "Parse an octal string from a buffer.\nLeading spaces are ignored.\nParsing stops when a NUL is found, or a trailing space,\nor the buffer length is reached.\n\n@param buffer The buffer from which to parse.\n@param offset The offset into the buffer from which to parse.\n@param length The maximum number of bytes to parse.\n@return The long value of the octal string.\n",
          "diff": "@@ -1,21 +1,21 @@\n-public static long parseOctal(byte[] header, int offset, int length) {\n+public static long parseOctal(byte[] buffer, int offset, int length) {\n     long result \u003d 0;\n     boolean stillPadding \u003d true;\n     int end \u003d offset + length;\n     for (int i \u003d offset; i \u003c end; ++i) {\n-        if (header[i] \u003d\u003d 0) {\n+        if (buffer[i] \u003d\u003d 0) {\n             break;\n         }\n-        if (header[i] \u003d\u003d (byte) \u0027 \u0027 || header[i] \u003d\u003d \u00270\u0027) {\n+        if (buffer[i] \u003d\u003d (byte) \u0027 \u0027 || buffer[i] \u003d\u003d \u00270\u0027) {\n             if (stillPadding) {\n                 continue;\n             }\n-            if (header[i] \u003d\u003d (byte) \u0027 \u0027) {\n+            if (buffer[i] \u003d\u003d (byte) \u0027 \u0027) {\n                 break;\n             }\n         }\n         stillPadding \u003d false;\n-        result \u003d (result \u003c\u003c 3) + (header[i] - \u00270\u0027);\n+        result \u003d (result \u003c\u003c 3) + (buffer[i] - \u00270\u0027);\n     }\n     return result;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[header-byte[], offset-int, length-int]",
            "newValue": "[buffer-byte[], offset-int, length-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Attempt at Javadoc - needs refining...\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@760507 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "3/31/09, 9:24 AM",
          "commitName": "ae3c158e05af20843fb5ea72deb5b7fb1fefbd54",
          "commitAuthor": "Sebastian Bazley",
          "commitDateOld": "3/27/09, 5:03 PM",
          "commitNameOld": "44dbd93bc551ba4158024a3fa4f2defcf94b2b33",
          "commitAuthorOld": "Sebastian Bazley",
          "daysBetweenCommits": 3.68,
          "commitsBetweenForRepo": 65,
          "commitsBetweenForFile": 1,
          "actualSource": "public static long parseOctal(byte[] buffer, int offset, int length) {\n    long result \u003d 0;\n    boolean stillPadding \u003d true;\n    int end \u003d offset + length;\n    for (int i \u003d offset; i \u003c end; ++i) {\n        if (buffer[i] \u003d\u003d 0) {\n            break;\n        }\n        if (buffer[i] \u003d\u003d (byte) \u0027 \u0027 || buffer[i] \u003d\u003d \u00270\u0027) {\n            if (stillPadding) {\n                continue;\n            }\n            if (buffer[i] \u003d\u003d (byte) \u0027 \u0027) {\n                break;\n            }\n        }\n        stillPadding \u003d false;\n        result \u003d (result \u003c\u003c 3) + (buffer[i] - \u00270\u0027);\n    }\n    return result;\n}",
          "path": "src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java",
          "functionStartLine": 42,
          "functionName": "parseOctal",
          "functionAnnotation": "",
          "functionDoc": "Parse an octal string from a buffer.\nLeading spaces are ignored.\nParsing stops when a NUL is found, or a trailing space,\nor the buffer length is reached.\n\n@param buffer The buffer from which to parse.\n@param offset The offset into the buffer from which to parse.\n@param length The maximum number of bytes to parse.\n@return The long value of the octal string.\n",
          "diff": "@@ -1,21 +1,21 @@\n-public static long parseOctal(byte[] header, int offset, int length) {\n+public static long parseOctal(byte[] buffer, int offset, int length) {\n     long result \u003d 0;\n     boolean stillPadding \u003d true;\n     int end \u003d offset + length;\n     for (int i \u003d offset; i \u003c end; ++i) {\n-        if (header[i] \u003d\u003d 0) {\n+        if (buffer[i] \u003d\u003d 0) {\n             break;\n         }\n-        if (header[i] \u003d\u003d (byte) \u0027 \u0027 || header[i] \u003d\u003d \u00270\u0027) {\n+        if (buffer[i] \u003d\u003d (byte) \u0027 \u0027 || buffer[i] \u003d\u003d \u00270\u0027) {\n             if (stillPadding) {\n                 continue;\n             }\n-            if (header[i] \u003d\u003d (byte) \u0027 \u0027) {\n+            if (buffer[i] \u003d\u003d (byte) \u0027 \u0027) {\n                 break;\n             }\n         }\n         stillPadding \u003d false;\n-        result \u003d (result \u003c\u003c 3) + (header[i] - \u00270\u0027);\n+        result \u003d (result \u003c\u003c 3) + (buffer[i] - \u00270\u0027);\n     }\n     return result;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Attempt at Javadoc - needs refining...\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@760507 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "3/31/09, 9:24 AM",
          "commitName": "ae3c158e05af20843fb5ea72deb5b7fb1fefbd54",
          "commitAuthor": "Sebastian Bazley",
          "commitDateOld": "3/27/09, 5:03 PM",
          "commitNameOld": "44dbd93bc551ba4158024a3fa4f2defcf94b2b33",
          "commitAuthorOld": "Sebastian Bazley",
          "daysBetweenCommits": 3.68,
          "commitsBetweenForRepo": 65,
          "commitsBetweenForFile": 1,
          "actualSource": "public static long parseOctal(byte[] buffer, int offset, int length) {\n    long result \u003d 0;\n    boolean stillPadding \u003d true;\n    int end \u003d offset + length;\n    for (int i \u003d offset; i \u003c end; ++i) {\n        if (buffer[i] \u003d\u003d 0) {\n            break;\n        }\n        if (buffer[i] \u003d\u003d (byte) \u0027 \u0027 || buffer[i] \u003d\u003d \u00270\u0027) {\n            if (stillPadding) {\n                continue;\n            }\n            if (buffer[i] \u003d\u003d (byte) \u0027 \u0027) {\n                break;\n            }\n        }\n        stillPadding \u003d false;\n        result \u003d (result \u003c\u003c 3) + (buffer[i] - \u00270\u0027);\n    }\n    return result;\n}",
          "path": "src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java",
          "functionStartLine": 42,
          "functionName": "parseOctal",
          "functionAnnotation": "",
          "functionDoc": "Parse an octal string from a buffer.\nLeading spaces are ignored.\nParsing stops when a NUL is found, or a trailing space,\nor the buffer length is reached.\n\n@param buffer The buffer from which to parse.\n@param offset The offset into the buffer from which to parse.\n@param length The maximum number of bytes to parse.\n@return The long value of the octal string.\n",
          "diff": "@@ -1,21 +1,21 @@\n-public static long parseOctal(byte[] header, int offset, int length) {\n+public static long parseOctal(byte[] buffer, int offset, int length) {\n     long result \u003d 0;\n     boolean stillPadding \u003d true;\n     int end \u003d offset + length;\n     for (int i \u003d offset; i \u003c end; ++i) {\n-        if (header[i] \u003d\u003d 0) {\n+        if (buffer[i] \u003d\u003d 0) {\n             break;\n         }\n-        if (header[i] \u003d\u003d (byte) \u0027 \u0027 || header[i] \u003d\u003d \u00270\u0027) {\n+        if (buffer[i] \u003d\u003d (byte) \u0027 \u0027 || buffer[i] \u003d\u003d \u00270\u0027) {\n             if (stillPadding) {\n                 continue;\n             }\n-            if (header[i] \u003d\u003d (byte) \u0027 \u0027) {\n+            if (buffer[i] \u003d\u003d (byte) \u0027 \u0027) {\n                 break;\n             }\n         }\n         stillPadding \u003d false;\n-        result \u003d (result \u003c\u003c 3) + (header[i] - \u00270\u0027);\n+        result \u003d (result \u003c\u003c 3) + (buffer[i] - \u00270\u0027);\n     }\n     return result;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Parse an octal string from a header buffer. This is used for the\nfile permission mode value.\n\n@param header The header buffer from which to parse.\n@param offset The offset into the buffer from which to parse.\n@param length The number of header bytes to parse.\n@return The long value of the octal string.\n",
            "newValue": "Parse an octal string from a buffer.\nLeading spaces are ignored.\nParsing stops when a NUL is found, or a trailing space,\nor the buffer length is reached.\n\n@param buffer The buffer from which to parse.\n@param offset The offset into the buffer from which to parse.\n@param length The maximum number of bytes to parse.\n@return The long value of the octal string.\n"
          }
        }
      ]
    },
    "46ad24db76c6f65480736006c2da8b8e5bf8ee25": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange,Ydocchange)",
      "commitMessage": "applied patch from Christian Grobmeier\n\nupdated tar implementation from ant\nhttps://issues.apache.org/jira/browse/SANDBOX-273\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/compress/trunk@732682 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/8/09, 3:09 AM",
      "commitName": "46ad24db76c6f65480736006c2da8b8e5bf8ee25",
      "commitAuthor": "Torsten Curdt",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "applied patch from Christian Grobmeier\n\nupdated tar implementation from ant\nhttps://issues.apache.org/jira/browse/SANDBOX-273\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/compress/trunk@732682 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "1/8/09, 3:09 AM",
          "commitName": "46ad24db76c6f65480736006c2da8b8e5bf8ee25",
          "commitAuthor": "Torsten Curdt",
          "commitDateOld": "7/19/08, 3:18 PM",
          "commitNameOld": "a8a9e645e7c5ac3d5354580b9eb22df67acba520",
          "commitAuthorOld": "Torsten Curdt",
          "daysBetweenCommits": 172.54,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "actualSource": "public static long parseOctal(byte[] header, int offset, int length) {\n    long result \u003d 0;\n    boolean stillPadding \u003d true;\n    int end \u003d offset + length;\n    for (int i \u003d offset; i \u003c end; ++i) {\n        if (header[i] \u003d\u003d 0) {\n            break;\n        }\n        if (header[i] \u003d\u003d (byte) \u0027 \u0027 || header[i] \u003d\u003d \u00270\u0027) {\n            if (stillPadding) {\n                continue;\n            }\n            if (header[i] \u003d\u003d (byte) \u0027 \u0027) {\n                break;\n            }\n        }\n        stillPadding \u003d false;\n        result \u003d (result \u003c\u003c 3) + (header[i] - \u00270\u0027);\n    }\n    return result;\n}",
          "path": "src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java",
          "functionStartLine": 39,
          "functionName": "parseOctal",
          "functionAnnotation": "",
          "functionDoc": "Parse an octal string from a header buffer. This is used for the\nfile permission mode value.\n\n@param header The header buffer from which to parse.\n@param offset The offset into the buffer from which to parse.\n@param length The number of header bytes to parse.\n@return The long value of the octal string.\n",
          "diff": "@@ -1,21 +1,21 @@\n-public static long parseOctal(final byte[] header, final int offset, final int length) {\n+public static long parseOctal(byte[] header, int offset, int length) {\n     long result \u003d 0;\n     boolean stillPadding \u003d true;\n     int end \u003d offset + length;\n     for (int i \u003d offset; i \u003c end; ++i) {\n         if (header[i] \u003d\u003d 0) {\n             break;\n         }\n         if (header[i] \u003d\u003d (byte) \u0027 \u0027 || header[i] \u003d\u003d \u00270\u0027) {\n             if (stillPadding) {\n                 continue;\n             }\n             if (header[i] \u003d\u003d (byte) \u0027 \u0027) {\n                 break;\n             }\n         }\n         stillPadding \u003d false;\n         result \u003d (result \u003c\u003c 3) + (header[i] - \u00270\u0027);\n     }\n     return result;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "applied patch from Christian Grobmeier\n\nupdated tar implementation from ant\nhttps://issues.apache.org/jira/browse/SANDBOX-273\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/compress/trunk@732682 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "1/8/09, 3:09 AM",
          "commitName": "46ad24db76c6f65480736006c2da8b8e5bf8ee25",
          "commitAuthor": "Torsten Curdt",
          "commitDateOld": "7/19/08, 3:18 PM",
          "commitNameOld": "a8a9e645e7c5ac3d5354580b9eb22df67acba520",
          "commitAuthorOld": "Torsten Curdt",
          "daysBetweenCommits": 172.54,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "actualSource": "public static long parseOctal(byte[] header, int offset, int length) {\n    long result \u003d 0;\n    boolean stillPadding \u003d true;\n    int end \u003d offset + length;\n    for (int i \u003d offset; i \u003c end; ++i) {\n        if (header[i] \u003d\u003d 0) {\n            break;\n        }\n        if (header[i] \u003d\u003d (byte) \u0027 \u0027 || header[i] \u003d\u003d \u00270\u0027) {\n            if (stillPadding) {\n                continue;\n            }\n            if (header[i] \u003d\u003d (byte) \u0027 \u0027) {\n                break;\n            }\n        }\n        stillPadding \u003d false;\n        result \u003d (result \u003c\u003c 3) + (header[i] - \u00270\u0027);\n    }\n    return result;\n}",
          "path": "src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java",
          "functionStartLine": 39,
          "functionName": "parseOctal",
          "functionAnnotation": "",
          "functionDoc": "Parse an octal string from a header buffer. This is used for the\nfile permission mode value.\n\n@param header The header buffer from which to parse.\n@param offset The offset into the buffer from which to parse.\n@param length The number of header bytes to parse.\n@return The long value of the octal string.\n",
          "diff": "@@ -1,21 +1,21 @@\n-public static long parseOctal(final byte[] header, final int offset, final int length) {\n+public static long parseOctal(byte[] header, int offset, int length) {\n     long result \u003d 0;\n     boolean stillPadding \u003d true;\n     int end \u003d offset + length;\n     for (int i \u003d offset; i \u003c end; ++i) {\n         if (header[i] \u003d\u003d 0) {\n             break;\n         }\n         if (header[i] \u003d\u003d (byte) \u0027 \u0027 || header[i] \u003d\u003d \u00270\u0027) {\n             if (stillPadding) {\n                 continue;\n             }\n             if (header[i] \u003d\u003d (byte) \u0027 \u0027) {\n                 break;\n             }\n         }\n         stillPadding \u003d false;\n         result \u003d (result \u003c\u003c 3) + (header[i] - \u00270\u0027);\n     }\n     return result;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[header-byte[](modifiers-final), offset-int(modifiers-final), length-int(modifiers-final)]",
            "newValue": "[header-byte[], offset-int, length-int]"
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "applied patch from Christian Grobmeier\n\nupdated tar implementation from ant\nhttps://issues.apache.org/jira/browse/SANDBOX-273\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/compress/trunk@732682 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "1/8/09, 3:09 AM",
          "commitName": "46ad24db76c6f65480736006c2da8b8e5bf8ee25",
          "commitAuthor": "Torsten Curdt",
          "commitDateOld": "7/19/08, 3:18 PM",
          "commitNameOld": "a8a9e645e7c5ac3d5354580b9eb22df67acba520",
          "commitAuthorOld": "Torsten Curdt",
          "daysBetweenCommits": 172.54,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "actualSource": "public static long parseOctal(byte[] header, int offset, int length) {\n    long result \u003d 0;\n    boolean stillPadding \u003d true;\n    int end \u003d offset + length;\n    for (int i \u003d offset; i \u003c end; ++i) {\n        if (header[i] \u003d\u003d 0) {\n            break;\n        }\n        if (header[i] \u003d\u003d (byte) \u0027 \u0027 || header[i] \u003d\u003d \u00270\u0027) {\n            if (stillPadding) {\n                continue;\n            }\n            if (header[i] \u003d\u003d (byte) \u0027 \u0027) {\n                break;\n            }\n        }\n        stillPadding \u003d false;\n        result \u003d (result \u003c\u003c 3) + (header[i] - \u00270\u0027);\n    }\n    return result;\n}",
          "path": "src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java",
          "functionStartLine": 39,
          "functionName": "parseOctal",
          "functionAnnotation": "",
          "functionDoc": "Parse an octal string from a header buffer. This is used for the\nfile permission mode value.\n\n@param header The header buffer from which to parse.\n@param offset The offset into the buffer from which to parse.\n@param length The number of header bytes to parse.\n@return The long value of the octal string.\n",
          "diff": "@@ -1,21 +1,21 @@\n-public static long parseOctal(final byte[] header, final int offset, final int length) {\n+public static long parseOctal(byte[] header, int offset, int length) {\n     long result \u003d 0;\n     boolean stillPadding \u003d true;\n     int end \u003d offset + length;\n     for (int i \u003d offset; i \u003c end; ++i) {\n         if (header[i] \u003d\u003d 0) {\n             break;\n         }\n         if (header[i] \u003d\u003d (byte) \u0027 \u0027 || header[i] \u003d\u003d \u00270\u0027) {\n             if (stillPadding) {\n                 continue;\n             }\n             if (header[i] \u003d\u003d (byte) \u0027 \u0027) {\n                 break;\n             }\n         }\n         stillPadding \u003d false;\n         result \u003d (result \u003c\u003c 3) + (header[i] - \u00270\u0027);\n     }\n     return result;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Parse an octal string from a header buffer. This is used for the file\npermission mode value.\n\n@param header The header buffer from which to parse.\n@param offset The offset into the buffer from which to parse.\n@param length The number of header bytes to parse.\n@return The long value of the octal string.\n",
            "newValue": "Parse an octal string from a header buffer. This is used for the\nfile permission mode value.\n\n@param header The header buffer from which to parse.\n@param offset The offset into the buffer from which to parse.\n@param length The number of header bytes to parse.\n@return The long value of the octal string.\n"
          }
        }
      ]
    },
    "ca16539029cd63e0ab5c9e3cba354a539f94e316": {
      "type": "Yintroduced",
      "commitMessage": "import of new redesign branch\n\nhttps://issues.apache.org/jira/browse/SANDBOX-247\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/compress/branches/redesign@675498 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/10/08, 3:17 AM",
      "commitName": "ca16539029cd63e0ab5c9e3cba354a539f94e316",
      "commitAuthor": "Torsten Curdt",
      "diff": "@@ -0,0 +1,21 @@\n+public static long parseOctal(final byte[] header, final int offset, final int length) {\n+    long result \u003d 0;\n+    boolean stillPadding \u003d true;\n+    int end \u003d offset + length;\n+    for (int i \u003d offset; i \u003c end; ++i) {\n+        if (header[i] \u003d\u003d 0) {\n+            break;\n+        }\n+        if (header[i] \u003d\u003d (byte) \u0027 \u0027 || header[i] \u003d\u003d \u00270\u0027) {\n+            if (stillPadding) {\n+                continue;\n+            }\n+            if (header[i] \u003d\u003d (byte) \u0027 \u0027) {\n+                break;\n+            }\n+        }\n+        stillPadding \u003d false;\n+        result \u003d (result \u003c\u003c 3) + (header[i] - \u00270\u0027);\n+    }\n+    return result;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public static long parseOctal(final byte[] header, final int offset, final int length) {\n    long result \u003d 0;\n    boolean stillPadding \u003d true;\n    int end \u003d offset + length;\n    for (int i \u003d offset; i \u003c end; ++i) {\n        if (header[i] \u003d\u003d 0) {\n            break;\n        }\n        if (header[i] \u003d\u003d (byte) \u0027 \u0027 || header[i] \u003d\u003d \u00270\u0027) {\n            if (stillPadding) {\n                continue;\n            }\n            if (header[i] \u003d\u003d (byte) \u0027 \u0027) {\n                break;\n            }\n        }\n        stillPadding \u003d false;\n        result \u003d (result \u003c\u003c 3) + (header[i] - \u00270\u0027);\n    }\n    return result;\n}",
      "path": "src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java",
      "functionStartLine": 202,
      "functionName": "parseOctal",
      "functionAnnotation": "",
      "functionDoc": "Parse an octal string from a header buffer. This is used for the file\npermission mode value.\n\n@param header The header buffer from which to parse.\n@param offset The offset into the buffer from which to parse.\n@param length The number of header bytes to parse.\n@return The long value of the octal string.\n"
    }
  }
}