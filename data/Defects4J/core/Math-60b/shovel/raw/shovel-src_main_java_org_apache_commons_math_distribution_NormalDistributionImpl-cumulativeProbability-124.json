{
  "origin": "codeshovel",
  "repositoryName": "Math-60b",
  "repositoryPath": "/tmp/Math-60b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NormalDistributionImpl.java",
  "functionName": "cumulativeProbability",
  "functionId": "cumulativeProbability___x-double",
  "sourceFilePath": "src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java",
  "functionAnnotation": "",
  "functionDoc": "For this distribution, {@code X}, this method returns {@code P(X \u003c x)}.\n\n@param x Value at which the CDF is evaluated.\n@return CDF evaluated at {@code x}.\n@throws MathException if the algorithm fails to converge; unless\n{@code x} is more than 20 standard deviations from the mean, in which\ncase the convergence exception is caught and 0 or 1 is returned.\n",
  "functionStartLine": 124,
  "functionEndLine": 137,
  "numCommitsSeen": 39,
  "timeTaken": 1192,
  "changeHistory": [
    "68611cca590cb0522d6b2687f916443cb70a8855",
    "38844d12e3c59b3c39acc8c00d7e1dbc52d84e25",
    "80b1e90b42a34856b61cec628fcea6633d1000cd",
    "d6a438e931412713e99624cf9ed74470f1040184",
    "1a57efb852d7b2236182140ed5a902f6d8d472a2",
    "4ce05bcd51ec956d789d20b59c743603d24a8ab7",
    "bd4c0682a71ff99179cc6ab2b0c1f23339267945",
    "ac9e22b1d5abce5909d5ae2b2dde33166dddeae8"
  ],
  "changeHistoryShort": {
    "68611cca590cb0522d6b2687f916443cb70a8855": "Ydocchange",
    "38844d12e3c59b3c39acc8c00d7e1dbc52d84e25": "Ymultichange(Ybodychange,Ydocchange)",
    "80b1e90b42a34856b61cec628fcea6633d1000cd": "Ybodychange",
    "d6a438e931412713e99624cf9ed74470f1040184": "Yfilerename",
    "1a57efb852d7b2236182140ed5a902f6d8d472a2": "Ydocchange",
    "4ce05bcd51ec956d789d20b59c743603d24a8ab7": "Ymultichange(Ybodychange,Ydocchange)",
    "bd4c0682a71ff99179cc6ab2b0c1f23339267945": "Yformatchange",
    "ac9e22b1d5abce5909d5ae2b2dde33166dddeae8": "Yintroduced"
  },
  "changeHistoryDetails": {
    "68611cca590cb0522d6b2687f916443cb70a8855": {
      "type": "Ydocchange",
      "commitMessage": "Fixed javadoc typo.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1039982 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/28/10, 3:52 PM",
      "commitName": "68611cca590cb0522d6b2687f916443cb70a8855",
      "commitAuthor": "Phil Steitz",
      "commitDateOld": "10/1/10, 5:46 AM",
      "commitNameOld": "120e9f5229c0e1f27788603fe95dc8a43f686ac9",
      "commitAuthorOld": "Gilles Sadowski",
      "daysBetweenCommits": 58.46,
      "commitsBetweenForRepo": 91,
      "commitsBetweenForFile": 1,
      "actualSource": "public double cumulativeProbability(double x) throws MathException {\n    try {\n        return 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * FastMath.sqrt(2.0))));\n    } catch (MaxIterationsExceededException ex) {\n        if (x \u003c (mean - 20 * standardDeviation)) {\n            return 0;\n        } else if (x \u003e (mean + 20 * standardDeviation)) {\n            return 1;\n        } else {\n            throw ex;\n        }\n    }\n}",
      "path": "src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java",
      "functionStartLine": 124,
      "functionName": "cumulativeProbability",
      "functionAnnotation": "",
      "functionDoc": "For this distribution, {@code X}, this method returns {@code P(X \u003c x)}.\n\n@param x Value at which the CDF is evaluated.\n@return CDF evaluated at {@code x}.\n@throws MathException if the algorithm fails to converge; unless\n{@code x} is more than 20 standard deviations from the mean, in which\ncase the convergence exception is caught and 0 or 1 is returned.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "For this distribution, {@code X}, this method returns {@code P(X \u003c x)}.\n\n@param x Value at which the CDF is evaluated.\n@return CDF evaluted at {@code x}.\n@throws MathException if the algorithm fails to converge; unless\n{@code x} is more than 20 standard deviations from the mean, in which\ncase the convergence exception is caught and 0 or 1 is returned.\n",
        "newValue": "For this distribution, {@code X}, this method returns {@code P(X \u003c x)}.\n\n@param x Value at which the CDF is evaluated.\n@return CDF evaluated at {@code x}.\n@throws MathException if the algorithm fails to converge; unless\n{@code x} is more than 20 standard deviations from the mean, in which\ncase the convergence exception is caught and 0 or 1 is returned.\n"
      }
    },
    "38844d12e3c59b3c39acc8c00d7e1dbc52d84e25": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Removed deprecated code.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1002145 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/28/10, 5:38 AM",
      "commitName": "38844d12e3c59b3c39acc8c00d7e1dbc52d84e25",
      "commitAuthor": "Gilles Sadowski",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Removed deprecated code.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1002145 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "9/28/10, 5:38 AM",
          "commitName": "38844d12e3c59b3c39acc8c00d7e1dbc52d84e25",
          "commitAuthor": "Gilles Sadowski",
          "commitDateOld": "8/29/10, 3:04 PM",
          "commitNameOld": "80b1e90b42a34856b61cec628fcea6633d1000cd",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 29.61,
          "commitsBetweenForRepo": 49,
          "commitsBetweenForFile": 1,
          "actualSource": "public double cumulativeProbability(double x) throws MathException {\n    try {\n        return 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * FastMath.sqrt(2.0))));\n    } catch (MaxIterationsExceededException ex) {\n        if (x \u003c (mean - 20 * standardDeviation)) {\n            return 0;\n        } else if (x \u003e (mean + 20 * standardDeviation)) {\n            return 1;\n        } else {\n            throw ex;\n        }\n    }\n}",
          "path": "src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java",
          "functionStartLine": 122,
          "functionName": "cumulativeProbability",
          "functionAnnotation": "",
          "functionDoc": "For this distribution, {@code X}, this method returns {@code P(X \u003c x)}.\n\n@param x Value at which the CDF is evaluated.\n@return CDF evaluted at {@code x}.\n@throws MathException if the algorithm fails to converge; unless\n{@code x} is more than 20 standard deviations from the mean, in which\ncase the convergence exception is caught and 0 or 1 is returned.\n",
          "diff": "@@ -1,13 +1,13 @@\n public double cumulativeProbability(double x) throws MathException {\n     try {\n         return 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * FastMath.sqrt(2.0))));\n     } catch (MaxIterationsExceededException ex) {\n         if (x \u003c (mean - 20 * standardDeviation)) {\n-            return 0.0d;\n+            return 0;\n         } else if (x \u003e (mean + 20 * standardDeviation)) {\n-            return 1.0d;\n+            return 1;\n         } else {\n             throw ex;\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Removed deprecated code.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1002145 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "9/28/10, 5:38 AM",
          "commitName": "38844d12e3c59b3c39acc8c00d7e1dbc52d84e25",
          "commitAuthor": "Gilles Sadowski",
          "commitDateOld": "8/29/10, 3:04 PM",
          "commitNameOld": "80b1e90b42a34856b61cec628fcea6633d1000cd",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 29.61,
          "commitsBetweenForRepo": 49,
          "commitsBetweenForFile": 1,
          "actualSource": "public double cumulativeProbability(double x) throws MathException {\n    try {\n        return 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * FastMath.sqrt(2.0))));\n    } catch (MaxIterationsExceededException ex) {\n        if (x \u003c (mean - 20 * standardDeviation)) {\n            return 0;\n        } else if (x \u003e (mean + 20 * standardDeviation)) {\n            return 1;\n        } else {\n            throw ex;\n        }\n    }\n}",
          "path": "src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java",
          "functionStartLine": 122,
          "functionName": "cumulativeProbability",
          "functionAnnotation": "",
          "functionDoc": "For this distribution, {@code X}, this method returns {@code P(X \u003c x)}.\n\n@param x Value at which the CDF is evaluated.\n@return CDF evaluted at {@code x}.\n@throws MathException if the algorithm fails to converge; unless\n{@code x} is more than 20 standard deviations from the mean, in which\ncase the convergence exception is caught and 0 or 1 is returned.\n",
          "diff": "@@ -1,13 +1,13 @@\n public double cumulativeProbability(double x) throws MathException {\n     try {\n         return 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * FastMath.sqrt(2.0))));\n     } catch (MaxIterationsExceededException ex) {\n         if (x \u003c (mean - 20 * standardDeviation)) {\n-            return 0.0d;\n+            return 0;\n         } else if (x \u003e (mean + 20 * standardDeviation)) {\n-            return 1.0d;\n+            return 1;\n         } else {\n             throw ex;\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "For this distribution, X, this method returns P(X \u0026lt; \u003ccode\u003ex\u003c/code\u003e).\n\n@param x the value at which the CDF is evaluated.\n@return CDF evaluted at \u003ccode\u003ex\u003c/code\u003e.\n@throws MathException if the algorithm fails to converge; unless\nx is more than 20 standard deviations from the mean, in which case the\nconvergence exception is caught and 0 or 1 is returned.\n",
            "newValue": "For this distribution, {@code X}, this method returns {@code P(X \u003c x)}.\n\n@param x Value at which the CDF is evaluated.\n@return CDF evaluted at {@code x}.\n@throws MathException if the algorithm fails to converge; unless\n{@code x} is more than 20 standard deviations from the mean, in which\ncase the convergence exception is caught and 0 or 1 is returned.\n"
          }
        }
      ]
    },
    "80b1e90b42a34856b61cec628fcea6633d1000cd": {
      "type": "Ybodychange",
      "commitMessage": "added FastMath and used it everywhere in replacement of java.util.Math\nthe unit tests have not been added yet (waiting for dfp library addition)\nJIRA: MATH-375\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@990658 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/29/10, 3:04 PM",
      "commitName": "80b1e90b42a34856b61cec628fcea6633d1000cd",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "8/10/10, 3:46 AM",
      "commitNameOld": "986597f52ce9c6c1ff13fb134b91696de6ec2796",
      "commitAuthorOld": "Gilles Sadowski",
      "daysBetweenCommits": 19.47,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "public double cumulativeProbability(double x) throws MathException {\n    try {\n        return 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * FastMath.sqrt(2.0))));\n    } catch (MaxIterationsExceededException ex) {\n        if (x \u003c (mean - 20 * standardDeviation)) {\n            return 0.0d;\n        } else if (x \u003e (mean + 20 * standardDeviation)) {\n            return 1.0d;\n        } else {\n            throw ex;\n        }\n    }\n}",
      "path": "src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java",
      "functionStartLine": 180,
      "functionName": "cumulativeProbability",
      "functionAnnotation": "",
      "functionDoc": "For this distribution, X, this method returns P(X \u0026lt; \u003ccode\u003ex\u003c/code\u003e).\n\n@param x the value at which the CDF is evaluated.\n@return CDF evaluted at \u003ccode\u003ex\u003c/code\u003e.\n@throws MathException if the algorithm fails to converge; unless\nx is more than 20 standard deviations from the mean, in which case the\nconvergence exception is caught and 0 or 1 is returned.\n",
      "diff": "@@ -1,13 +1,13 @@\n public double cumulativeProbability(double x) throws MathException {\n     try {\n-        return 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0))));\n+        return 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * FastMath.sqrt(2.0))));\n     } catch (MaxIterationsExceededException ex) {\n         if (x \u003c (mean - 20 * standardDeviation)) {\n             return 0.0d;\n         } else if (x \u003e (mean + 20 * standardDeviation)) {\n             return 1.0d;\n         } else {\n             throw ex;\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d6a438e931412713e99624cf9ed74470f1040184": {
      "type": "Yfilerename",
      "commitMessage": "moved main java directory for compliance with maven standard directory layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@799870 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/1/09, 7:30 AM",
      "commitName": "d6a438e931412713e99624cf9ed74470f1040184",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "8/1/09, 7:23 AM",
      "commitNameOld": "2ad5ef61630be627f46ae1c266cf796f044bd4a8",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public double cumulativeProbability(double x) throws MathException {\n    try {\n        return 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0))));\n    } catch (MaxIterationsExceededException ex) {\n        if (x \u003c (mean - 20 * standardDeviation)) {\n            return 0.0d;\n        } else if (x \u003e (mean + 20 * standardDeviation)) {\n            return 1.0d;\n        } else {\n            throw ex;\n        }\n    }\n}",
      "path": "src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java",
      "functionStartLine": 124,
      "functionName": "cumulativeProbability",
      "functionAnnotation": "",
      "functionDoc": "For this distribution, X, this method returns P(X \u0026lt; \u003ccode\u003ex\u003c/code\u003e).\n\n@param x the value at which the CDF is evaluated.\n@return CDF evaluted at \u003ccode\u003ex\u003c/code\u003e.\n@throws MathException if the algorithm fails to converge; unless\nx is more than 20 standard deviations from the mean, in which case the\nconvergence exception is caught and 0 or 1 is returned.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java",
        "newPath": "src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java"
      }
    },
    "1a57efb852d7b2236182140ed5a902f6d8d472a2": {
      "type": "Ydocchange",
      "commitMessage": "fixed javadoc typos\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@633991 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/5/08, 11:29 AM",
      "commitName": "1a57efb852d7b2236182140ed5a902f6d8d472a2",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "2/2/08, 9:54 PM",
      "commitNameOld": "479f7773075c136b43a9cf120704c77c0a4880ab",
      "commitAuthorOld": "Phil Steitz",
      "daysBetweenCommits": 31.57,
      "commitsBetweenForRepo": 68,
      "commitsBetweenForFile": 1,
      "actualSource": "public double cumulativeProbability(double x) throws MathException {\n    try {\n        return 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0))));\n    } catch (MaxIterationsExceededException ex) {\n        if (x \u003c (mean - 20 * standardDeviation)) {\n            return 0.0d;\n        } else if (x \u003e (mean + 20 * standardDeviation)) {\n            return 1.0d;\n        } else {\n            throw ex;\n        }\n    }\n}",
      "path": "src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java",
      "functionStartLine": 108,
      "functionName": "cumulativeProbability",
      "functionAnnotation": "",
      "functionDoc": "For this distribution, X, this method returns P(X \u0026lt; \u003ccode\u003ex\u003c/code\u003e).\n\n@param x the value at which the CDF is evaluated.\n@return CDF evaluted at \u003ccode\u003ex\u003c/code\u003e.\n@throws MathException if the algorithm fails to converge; unless\nx is more than 20 standard deviations from the mean, in which case the\nconvergence exception is caught and 0 or 1 is returned.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "For this disbution, X, this method returns P(X \u0026lt; \u003ccode\u003ex\u003c/code\u003e).\n\n@param x the value at which the CDF is evaluated.\n@return CDF evaluted at \u003ccode\u003ex\u003c/code\u003e.\n@throws MathException if the algorithm fails to converge; unless\nx is more than 20 standard deviations from the mean, in which case the\nconvergence exception is caught and 0 or 1 is returned.\n",
        "newValue": "For this distribution, X, this method returns P(X \u0026lt; \u003ccode\u003ex\u003c/code\u003e).\n\n@param x the value at which the CDF is evaluated.\n@return CDF evaluted at \u003ccode\u003ex\u003c/code\u003e.\n@throws MathException if the algorithm fails to converge; unless\nx is more than 20 standard deviations from the mean, in which case the\nconvergence exception is caught and 0 or 1 is returned.\n"
      }
    },
    "4ce05bcd51ec956d789d20b59c743603d24a8ab7": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Modified NormalDistributionImpl.cumulativeProbablity to catch\nMaxIterationsExceededException and return 0 or 1, resp. if the argument\nis more than 20 standard deviations from the mean.\n\nJIRA: MATH-167\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@558450 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/21/07, 7:33 PM",
      "commitName": "4ce05bcd51ec956d789d20b59c743603d24a8ab7",
      "commitAuthor": "Phil Steitz",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Modified NormalDistributionImpl.cumulativeProbablity to catch\nMaxIterationsExceededException and return 0 or 1, resp. if the argument\nis more than 20 standard deviations from the mean.\n\nJIRA: MATH-167\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@558450 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/21/07, 7:33 PM",
          "commitName": "4ce05bcd51ec956d789d20b59c743603d24a8ab7",
          "commitAuthor": "Phil Steitz",
          "commitDateOld": "11/28/06, 11:14 PM",
          "commitNameOld": "05f7f6059bd0cbb69b5dd49c061f1f3520e0ee1e",
          "commitAuthorOld": "Henri Yandell",
          "daysBetweenCommits": 234.8,
          "commitsBetweenForRepo": 97,
          "commitsBetweenForFile": 1,
          "actualSource": "public double cumulativeProbability(double x) throws MathException {\n    try {\n        return 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0))));\n    } catch (MaxIterationsExceededException ex) {\n        if (x \u003c (mean - 20 * standardDeviation)) {\n            return 0.0d;\n        } else if (x \u003e (mean + 20 * standardDeviation)) {\n            return 1.0d;\n        } else {\n            throw ex;\n        }\n    }\n}",
          "path": "src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java",
          "functionStartLine": 108,
          "functionName": "cumulativeProbability",
          "functionAnnotation": "",
          "functionDoc": "For this disbution, X, this method returns P(X \u0026lt; \u003ccode\u003ex\u003c/code\u003e).\n\n@param x the value at which the CDF is evaluated.\n@return CDF evaluted at \u003ccode\u003ex\u003c/code\u003e.\n@throws MathException if the algorithm fails to converge; unless\nx is more than 20 standard deviations from the mean, in which case the\nconvergence exception is caught and 0 or 1 is returned.\n",
          "diff": "@@ -1,3 +1,13 @@\n public double cumulativeProbability(double x) throws MathException {\n-    return 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0))));\n+    try {\n+        return 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0))));\n+    } catch (MaxIterationsExceededException ex) {\n+        if (x \u003c (mean - 20 * standardDeviation)) {\n+            return 0.0d;\n+        } else if (x \u003e (mean + 20 * standardDeviation)) {\n+            return 1.0d;\n+        } else {\n+            throw ex;\n+        }\n+    }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Modified NormalDistributionImpl.cumulativeProbablity to catch\nMaxIterationsExceededException and return 0 or 1, resp. if the argument\nis more than 20 standard deviations from the mean.\n\nJIRA: MATH-167\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@558450 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/21/07, 7:33 PM",
          "commitName": "4ce05bcd51ec956d789d20b59c743603d24a8ab7",
          "commitAuthor": "Phil Steitz",
          "commitDateOld": "11/28/06, 11:14 PM",
          "commitNameOld": "05f7f6059bd0cbb69b5dd49c061f1f3520e0ee1e",
          "commitAuthorOld": "Henri Yandell",
          "daysBetweenCommits": 234.8,
          "commitsBetweenForRepo": 97,
          "commitsBetweenForFile": 1,
          "actualSource": "public double cumulativeProbability(double x) throws MathException {\n    try {\n        return 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0))));\n    } catch (MaxIterationsExceededException ex) {\n        if (x \u003c (mean - 20 * standardDeviation)) {\n            return 0.0d;\n        } else if (x \u003e (mean + 20 * standardDeviation)) {\n            return 1.0d;\n        } else {\n            throw ex;\n        }\n    }\n}",
          "path": "src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java",
          "functionStartLine": 108,
          "functionName": "cumulativeProbability",
          "functionAnnotation": "",
          "functionDoc": "For this disbution, X, this method returns P(X \u0026lt; \u003ccode\u003ex\u003c/code\u003e).\n\n@param x the value at which the CDF is evaluated.\n@return CDF evaluted at \u003ccode\u003ex\u003c/code\u003e.\n@throws MathException if the algorithm fails to converge; unless\nx is more than 20 standard deviations from the mean, in which case the\nconvergence exception is caught and 0 or 1 is returned.\n",
          "diff": "@@ -1,3 +1,13 @@\n public double cumulativeProbability(double x) throws MathException {\n-    return 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0))));\n+    try {\n+        return 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0))));\n+    } catch (MaxIterationsExceededException ex) {\n+        if (x \u003c (mean - 20 * standardDeviation)) {\n+            return 0.0d;\n+        } else if (x \u003e (mean + 20 * standardDeviation)) {\n+            return 1.0d;\n+        } else {\n+            throw ex;\n+        }\n+    }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "For this disbution, X, this method returns P(X \u0026lt; \u003ccode\u003ex\u003c/code\u003e).\n\n@param x the value at which the CDF is evaluated.\n@return CDF evaluted at \u003ccode\u003ex\u003c/code\u003e.\n@throws MathException if the algorithm fails to converge.\n",
            "newValue": "For this disbution, X, this method returns P(X \u0026lt; \u003ccode\u003ex\u003c/code\u003e).\n\n@param x the value at which the CDF is evaluated.\n@return CDF evaluted at \u003ccode\u003ex\u003c/code\u003e.\n@throws MathException if the algorithm fails to converge; unless\nx is more than 20 standard deviations from the mean, in which case the\nconvergence exception is caught and 0 or 1 is returned.\n"
          }
        }
      ]
    },
    "bd4c0682a71ff99179cc6ab2b0c1f23339267945": {
      "type": "Yformatchange",
      "commitMessage": "Eliminated tabs.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@201915 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/26/05, 3:20 PM",
      "commitName": "bd4c0682a71ff99179cc6ab2b0c1f23339267945",
      "commitAuthor": "Phil Steitz",
      "commitDateOld": "2/26/05, 5:11 AM",
      "commitNameOld": "65b65f88b74de6b3462b04b2cf2a69f064a77557",
      "commitAuthorOld": "Dirk Verbeeck",
      "daysBetweenCommits": 120.38,
      "commitsBetweenForRepo": 47,
      "commitsBetweenForFile": 1,
      "actualSource": "public double cumulativeProbability(double x) throws MathException {\n    return 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0))));\n}",
      "path": "src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java",
      "functionStartLine": 104,
      "functionName": "cumulativeProbability",
      "functionAnnotation": "",
      "functionDoc": "For this disbution, X, this method returns P(X \u0026lt; \u003ccode\u003ex\u003c/code\u003e).\n\n@param x the value at which the CDF is evaluated.\n@return CDF evaluted at \u003ccode\u003ex\u003c/code\u003e.\n@throws MathException if the algorithm fails to converge.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "ac9e22b1d5abce5909d5ae2b2dde33166dddeae8": {
      "type": "Yintroduced",
      "commitMessage": "Replaced normal CDF routine with one based on the error function.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141214 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/5/04, 12:59 PM",
      "commitName": "ac9e22b1d5abce5909d5ae2b2dde33166dddeae8",
      "commitAuthor": "Brent Worden",
      "diff": "@@ -0,0 +1,3 @@\n+public double cumulativeProbability(double x) throws MathException {\n+    return 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0))));\n+}\n\\ No newline at end of file\n",
      "actualSource": "public double cumulativeProbability(double x) throws MathException {\n    return 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0))));\n}",
      "path": "src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java",
      "functionStartLine": 100,
      "functionName": "cumulativeProbability",
      "functionAnnotation": "",
      "functionDoc": "For this disbution, X, this method returns P(X \u0026lt; \u003ccode\u003ex\u003c/code\u003e).\n\n@param x the value at which the CDF is evaluated.\n@return CDF evaluted at \u003ccode\u003ex\u003c/code\u003e.\n@throws MathException if the algorithm fails to converge.\n"
    }
  }
}