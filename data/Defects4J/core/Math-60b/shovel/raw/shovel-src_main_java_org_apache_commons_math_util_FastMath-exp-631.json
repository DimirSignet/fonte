{
  "origin": "codeshovel",
  "repositoryName": "Math-60b",
  "repositoryPath": "/tmp/Math-60b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FastMath.java",
  "functionName": "exp",
  "functionId": "exp___x-double__extra-double__hiPrec-double[]",
  "sourceFilePath": "src/main/java/org/apache/commons/math/util/FastMath.java",
  "functionAnnotation": "",
  "functionDoc": "Internal helper method for exponential function.\n\n@param x original argument of the exponential function\n@param extra extra bits of precision on input (To Be Confirmed)\n@param hiPrec extra bits of precision on output (To Be Confirmed)\n@return exp(x)\n",
  "functionStartLine": 631,
  "functionEndLine": 746,
  "numCommitsSeen": 6,
  "timeTaken": 9830,
  "changeHistory": [
    "90279e83d82389db2ba88898ec985a1827849e6e",
    "80b1e90b42a34856b61cec628fcea6633d1000cd"
  ],
  "changeHistoryShort": {
    "90279e83d82389db2ba88898ec985a1827849e6e": "Ybodychange",
    "80b1e90b42a34856b61cec628fcea6633d1000cd": "Yintroduced"
  },
  "changeHistoryDetails": {
    "90279e83d82389db2ba88898ec985a1827849e6e": {
      "type": "Ybodychange",
      "commitMessage": "fixed errors with infinities\nadded asin/acos\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@992870 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/5/10, 12:27 PM",
      "commitName": "90279e83d82389db2ba88898ec985a1827849e6e",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "8/29/10, 3:04 PM",
      "commitNameOld": "80b1e90b42a34856b61cec628fcea6633d1000cd",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 6.89,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "actualSource": "private static double exp(double x, double extra, double[] hiPrec) {\n    double intPartA;\n    double intPartB;\n    int intVal;\n    if (x \u003c 0.0) {\n        intVal \u003d (int) -x;\n        if (intVal \u003e 746) {\n            if (hiPrec !\u003d null) {\n                hiPrec[0] \u003d 0.0;\n                hiPrec[1] \u003d 0.0;\n            }\n            return 0.0;\n        }\n        if (intVal \u003e 709) {\n            final double result \u003d exp(x + 40.19140625, extra, hiPrec) / 285040095144011776.0;\n            if (hiPrec !\u003d null) {\n                hiPrec[0] /\u003d 285040095144011776.0;\n                hiPrec[1] /\u003d 285040095144011776.0;\n            }\n            return result;\n        }\n        if (intVal \u003d\u003d 709) {\n            final double result \u003d exp(x + 1.494140625, extra, hiPrec) / 4.455505956692756620;\n            if (hiPrec !\u003d null) {\n                hiPrec[0] /\u003d 4.455505956692756620;\n                hiPrec[1] /\u003d 4.455505956692756620;\n            }\n            return result;\n        }\n        intVal++;\n        intPartA \u003d EXP_INT_TABLE_A[750 - intVal];\n        intPartB \u003d EXP_INT_TABLE_B[750 - intVal];\n        intVal \u003d -intVal;\n    } else {\n        intVal \u003d (int) x;\n        if (intVal \u003e 709) {\n            if (hiPrec !\u003d null) {\n                hiPrec[0] \u003d Double.POSITIVE_INFINITY;\n                hiPrec[1] \u003d 0.0;\n            }\n            return Double.POSITIVE_INFINITY;\n        }\n        intPartA \u003d EXP_INT_TABLE_A[750 + intVal];\n        intPartB \u003d EXP_INT_TABLE_B[750 + intVal];\n    }\n    final int intFrac \u003d (int) ((x - intVal) * 1024.0);\n    final double fracPartA \u003d EXP_FRAC_TABLE_A[intFrac];\n    final double fracPartB \u003d EXP_FRAC_TABLE_B[intFrac];\n    final double epsilon \u003d x - (intVal + intFrac / 1024.0);\n    double z \u003d 0.04168701738764507;\n    z \u003d z * epsilon + 0.1666666505023083;\n    z \u003d z * epsilon + 0.5000000000042687;\n    z \u003d z * epsilon + 1.0;\n    z \u003d z * epsilon + -3.940510424527919E-20;\n    double tempA \u003d intPartA * fracPartA;\n    double tempB \u003d intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;\n    final double tempC \u003d tempB + tempA;\n    final double result;\n    if (extra !\u003d 0.0) {\n        result \u003d tempC * extra * z + tempC * extra + tempC * z + tempB + tempA;\n    } else {\n        result \u003d tempC * z + tempB + tempA;\n    }\n    if (hiPrec !\u003d null) {\n        hiPrec[0] \u003d tempA;\n        hiPrec[1] \u003d tempC * extra * z + tempC * extra + tempC * z + tempB;\n    }\n    return result;\n}",
      "path": "src/main/java/org/apache/commons/math/util/FastMath.java",
      "functionStartLine": 415,
      "functionName": "exp",
      "functionAnnotation": "",
      "functionDoc": "Internal helper method for exponential function.\n\n@param x original argument of the exponential function\n@param extra extra bits of precision on input (To Be Confirmed)\n@param hiPrec extra bits of precision on output (To Be Confirmed)\n@return exp(x)\n",
      "diff": "@@ -1,61 +1,69 @@\n private static double exp(double x, double extra, double[] hiPrec) {\n     double intPartA;\n     double intPartB;\n     int intVal;\n     if (x \u003c 0.0) {\n         intVal \u003d (int) -x;\n         if (intVal \u003e 746) {\n+            if (hiPrec !\u003d null) {\n+                hiPrec[0] \u003d 0.0;\n+                hiPrec[1] \u003d 0.0;\n+            }\n             return 0.0;\n         }\n         if (intVal \u003e 709) {\n             final double result \u003d exp(x + 40.19140625, extra, hiPrec) / 285040095144011776.0;\n             if (hiPrec !\u003d null) {\n                 hiPrec[0] /\u003d 285040095144011776.0;\n                 hiPrec[1] /\u003d 285040095144011776.0;\n             }\n             return result;\n         }\n         if (intVal \u003d\u003d 709) {\n             final double result \u003d exp(x + 1.494140625, extra, hiPrec) / 4.455505956692756620;\n             if (hiPrec !\u003d null) {\n                 hiPrec[0] /\u003d 4.455505956692756620;\n                 hiPrec[1] /\u003d 4.455505956692756620;\n             }\n             return result;\n         }\n         intVal++;\n         intPartA \u003d EXP_INT_TABLE_A[750 - intVal];\n         intPartB \u003d EXP_INT_TABLE_B[750 - intVal];\n         intVal \u003d -intVal;\n     } else {\n         intVal \u003d (int) x;\n         if (intVal \u003e 709) {\n+            if (hiPrec !\u003d null) {\n+                hiPrec[0] \u003d Double.POSITIVE_INFINITY;\n+                hiPrec[1] \u003d 0.0;\n+            }\n             return Double.POSITIVE_INFINITY;\n         }\n         intPartA \u003d EXP_INT_TABLE_A[750 + intVal];\n         intPartB \u003d EXP_INT_TABLE_B[750 + intVal];\n     }\n     final int intFrac \u003d (int) ((x - intVal) * 1024.0);\n     final double fracPartA \u003d EXP_FRAC_TABLE_A[intFrac];\n     final double fracPartB \u003d EXP_FRAC_TABLE_B[intFrac];\n     final double epsilon \u003d x - (intVal + intFrac / 1024.0);\n     double z \u003d 0.04168701738764507;\n     z \u003d z * epsilon + 0.1666666505023083;\n     z \u003d z * epsilon + 0.5000000000042687;\n     z \u003d z * epsilon + 1.0;\n     z \u003d z * epsilon + -3.940510424527919E-20;\n     double tempA \u003d intPartA * fracPartA;\n     double tempB \u003d intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;\n     final double tempC \u003d tempB + tempA;\n     final double result;\n     if (extra !\u003d 0.0) {\n         result \u003d tempC * extra * z + tempC * extra + tempC * z + tempB + tempA;\n     } else {\n         result \u003d tempC * z + tempB + tempA;\n     }\n     if (hiPrec !\u003d null) {\n         hiPrec[0] \u003d tempA;\n         hiPrec[1] \u003d tempC * extra * z + tempC * extra + tempC * z + tempB;\n     }\n     return result;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "80b1e90b42a34856b61cec628fcea6633d1000cd": {
      "type": "Yintroduced",
      "commitMessage": "added FastMath and used it everywhere in replacement of java.util.Math\nthe unit tests have not been added yet (waiting for dfp library addition)\nJIRA: MATH-375\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@990658 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/29/10, 3:04 PM",
      "commitName": "80b1e90b42a34856b61cec628fcea6633d1000cd",
      "commitAuthor": "Luc Maisonobe",
      "diff": "@@ -0,0 +1,61 @@\n+private static double exp(double x, double extra, double[] hiPrec) {\n+    double intPartA;\n+    double intPartB;\n+    int intVal;\n+    if (x \u003c 0.0) {\n+        intVal \u003d (int) -x;\n+        if (intVal \u003e 746) {\n+            return 0.0;\n+        }\n+        if (intVal \u003e 709) {\n+            final double result \u003d exp(x + 40.19140625, extra, hiPrec) / 285040095144011776.0;\n+            if (hiPrec !\u003d null) {\n+                hiPrec[0] /\u003d 285040095144011776.0;\n+                hiPrec[1] /\u003d 285040095144011776.0;\n+            }\n+            return result;\n+        }\n+        if (intVal \u003d\u003d 709) {\n+            final double result \u003d exp(x + 1.494140625, extra, hiPrec) / 4.455505956692756620;\n+            if (hiPrec !\u003d null) {\n+                hiPrec[0] /\u003d 4.455505956692756620;\n+                hiPrec[1] /\u003d 4.455505956692756620;\n+            }\n+            return result;\n+        }\n+        intVal++;\n+        intPartA \u003d EXP_INT_TABLE_A[750 - intVal];\n+        intPartB \u003d EXP_INT_TABLE_B[750 - intVal];\n+        intVal \u003d -intVal;\n+    } else {\n+        intVal \u003d (int) x;\n+        if (intVal \u003e 709) {\n+            return Double.POSITIVE_INFINITY;\n+        }\n+        intPartA \u003d EXP_INT_TABLE_A[750 + intVal];\n+        intPartB \u003d EXP_INT_TABLE_B[750 + intVal];\n+    }\n+    final int intFrac \u003d (int) ((x - intVal) * 1024.0);\n+    final double fracPartA \u003d EXP_FRAC_TABLE_A[intFrac];\n+    final double fracPartB \u003d EXP_FRAC_TABLE_B[intFrac];\n+    final double epsilon \u003d x - (intVal + intFrac / 1024.0);\n+    double z \u003d 0.04168701738764507;\n+    z \u003d z * epsilon + 0.1666666505023083;\n+    z \u003d z * epsilon + 0.5000000000042687;\n+    z \u003d z * epsilon + 1.0;\n+    z \u003d z * epsilon + -3.940510424527919E-20;\n+    double tempA \u003d intPartA * fracPartA;\n+    double tempB \u003d intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;\n+    final double tempC \u003d tempB + tempA;\n+    final double result;\n+    if (extra !\u003d 0.0) {\n+        result \u003d tempC * extra * z + tempC * extra + tempC * z + tempB + tempA;\n+    } else {\n+        result \u003d tempC * z + tempB + tempA;\n+    }\n+    if (hiPrec !\u003d null) {\n+        hiPrec[0] \u003d tempA;\n+        hiPrec[1] \u003d tempC * extra * z + tempC * extra + tempC * z + tempB;\n+    }\n+    return result;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private static double exp(double x, double extra, double[] hiPrec) {\n    double intPartA;\n    double intPartB;\n    int intVal;\n    if (x \u003c 0.0) {\n        intVal \u003d (int) -x;\n        if (intVal \u003e 746) {\n            return 0.0;\n        }\n        if (intVal \u003e 709) {\n            final double result \u003d exp(x + 40.19140625, extra, hiPrec) / 285040095144011776.0;\n            if (hiPrec !\u003d null) {\n                hiPrec[0] /\u003d 285040095144011776.0;\n                hiPrec[1] /\u003d 285040095144011776.0;\n            }\n            return result;\n        }\n        if (intVal \u003d\u003d 709) {\n            final double result \u003d exp(x + 1.494140625, extra, hiPrec) / 4.455505956692756620;\n            if (hiPrec !\u003d null) {\n                hiPrec[0] /\u003d 4.455505956692756620;\n                hiPrec[1] /\u003d 4.455505956692756620;\n            }\n            return result;\n        }\n        intVal++;\n        intPartA \u003d EXP_INT_TABLE_A[750 - intVal];\n        intPartB \u003d EXP_INT_TABLE_B[750 - intVal];\n        intVal \u003d -intVal;\n    } else {\n        intVal \u003d (int) x;\n        if (intVal \u003e 709) {\n            return Double.POSITIVE_INFINITY;\n        }\n        intPartA \u003d EXP_INT_TABLE_A[750 + intVal];\n        intPartB \u003d EXP_INT_TABLE_B[750 + intVal];\n    }\n    final int intFrac \u003d (int) ((x - intVal) * 1024.0);\n    final double fracPartA \u003d EXP_FRAC_TABLE_A[intFrac];\n    final double fracPartB \u003d EXP_FRAC_TABLE_B[intFrac];\n    final double epsilon \u003d x - (intVal + intFrac / 1024.0);\n    double z \u003d 0.04168701738764507;\n    z \u003d z * epsilon + 0.1666666505023083;\n    z \u003d z * epsilon + 0.5000000000042687;\n    z \u003d z * epsilon + 1.0;\n    z \u003d z * epsilon + -3.940510424527919E-20;\n    double tempA \u003d intPartA * fracPartA;\n    double tempB \u003d intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;\n    final double tempC \u003d tempB + tempA;\n    final double result;\n    if (extra !\u003d 0.0) {\n        result \u003d tempC * extra * z + tempC * extra + tempC * z + tempB + tempA;\n    } else {\n        result \u003d tempC * z + tempB + tempA;\n    }\n    if (hiPrec !\u003d null) {\n        hiPrec[0] \u003d tempA;\n        hiPrec[1] \u003d tempC * extra * z + tempC * extra + tempC * z + tempB;\n    }\n    return result;\n}",
      "path": "src/main/java/org/apache/commons/math/util/FastMath.java",
      "functionStartLine": 431,
      "functionName": "exp",
      "functionAnnotation": "",
      "functionDoc": "Internal helper method for exponential function.\n\n@param x original argument of the exponential function\n@param extra extra bits of precision on input (To Be Confirmed)\n@param hiPrec extra bits of precision on output (To Be Confirmed)\n@return exp(x)\n"
    }
  }
}