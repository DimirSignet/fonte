{
  "origin": "codeshovel",
  "repositoryName": "Closure-121b",
  "repositoryPath": "/tmp/Closure-121b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NodeUtil.java",
  "functionName": "isLiteralValue",
  "functionId": "isLiteralValue___n-Node__includeFunctions-boolean",
  "sourceFilePath": "src/com/google/javascript/jscomp/NodeUtil.java",
  "functionAnnotation": "",
  "functionDoc": "Returns true if this is a literal value. We define a literal value\nas any node that evaluates to the same thing regardless of when or\nwhere it is evaluated. So /xyz/ and [3, 5] are literals, but\nthe name a is not.\n\nFunction literals do not meet this definition, because they\nlexically capture variables. For example, if you have\n\u003ccode\u003e\nfunction() { return a; }\n\u003c/code\u003e\nIf it is evaluated in a different scope, then it\ncaptures a different variable. Even if the function did not read\nany captured variables directly, it would still fail this definition,\nbecause it affects the lifecycle of variables in the enclosing scope.\n\nHowever, a function literal with respect to a particular scope is\na literal.\n\n@param includeFunctions If true, all function expressions will be\n    treated as literals.\n",
  "functionStartLine": 588,
  "functionEndLine": 628,
  "numCommitsSeen": 184,
  "timeTaken": 14374,
  "changeHistory": [
    "0b054d7d1b185b02c595c646bc0f11a6d809c934",
    "24fd842a5380a350bcde0bed60287053bc9b37f0",
    "5428589fcac11bb899a44ef827e12a253e29d323",
    "70a5626922ea7e8c98747e22b6986638ba38fadc",
    "4d98fc9034031ee146c7e5534a150e2700d89f8e",
    "653599e7c3922059a78958ea32b216ff9c42800e",
    "34fd5f8275ae69fc772c2283a3c5fd13b93a7c42",
    "f0362b1ab1ae1339e017b1d04f016980e3fa6cb6",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "0b054d7d1b185b02c595c646bc0f11a6d809c934": "Ybodychange",
    "24fd842a5380a350bcde0bed60287053bc9b37f0": "Ybodychange",
    "5428589fcac11bb899a44ef827e12a253e29d323": "Ybodychange",
    "70a5626922ea7e8c98747e22b6986638ba38fadc": "Ydocchange",
    "4d98fc9034031ee146c7e5534a150e2700d89f8e": "Ybodychange",
    "653599e7c3922059a78958ea32b216ff9c42800e": "Ybodychange",
    "34fd5f8275ae69fc772c2283a3c5fd13b93a7c42": "Ybodychange",
    "f0362b1ab1ae1339e017b1d04f016980e3fa6cb6": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0b054d7d1b185b02c595c646bc0f11a6d809c934": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback\n\n*** Reason for rollback ***\n\nDisable cast warnings by default. Most projects however have\nit turn up to ERROR.\n\n*** Original change description ***\n\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nbreaks various projects without whitelists\n\n*** Original change description ***\n\nIntroduced a CAST ast node\n\nR\u003dnicksantos\nDELTA\u003d1968  (1746 added, 44 deleted, 178 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5970\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2394 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/12/12, 5:18 PM",
      "commitName": "0b054d7d1b185b02c595c646bc0f11a6d809c934",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/20/12, 3:32 PM",
      "commitNameOld": "73b63857ecdbb70f1bc90544362cff4439b8493e",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 22.07,
      "commitsBetweenForRepo": 43,
      "commitsBetweenForFile": 1,
      "actualSource": "static boolean isLiteralValue(Node n, boolean includeFunctions) {\n    switch(n.getType()) {\n        case Token.CAST:\n            return isLiteralValue(n.getFirstChild(), includeFunctions);\n        case Token.ARRAYLIT:\n            for (Node child \u003d n.getFirstChild(); child !\u003d null; child \u003d child.getNext()) {\n                if ((!child.isEmpty()) \u0026\u0026 !isLiteralValue(child, includeFunctions)) {\n                    return false;\n                }\n            }\n            return true;\n        case Token.REGEXP:\n            for (Node child \u003d n.getFirstChild(); child !\u003d null; child \u003d child.getNext()) {\n                if (!isLiteralValue(child, includeFunctions)) {\n                    return false;\n                }\n            }\n            return true;\n        case Token.OBJECTLIT:\n            for (Node child \u003d n.getFirstChild(); child !\u003d null; child \u003d child.getNext()) {\n                if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {\n                    return false;\n                }\n            }\n            return true;\n        case Token.FUNCTION:\n            return includeFunctions \u0026\u0026 !NodeUtil.isFunctionDeclaration(n);\n        default:\n            return isImmutableValue(n);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/NodeUtil.java",
      "functionStartLine": 591,
      "functionName": "isLiteralValue",
      "functionAnnotation": "",
      "functionDoc": "Returns true if this is a literal value. We define a literal value\nas any node that evaluates to the same thing regardless of when or\nwhere it is evaluated. So /xyz/ and [3, 5] are literals, but\nthe name a is not.\n\nFunction literals do not meet this definition, because they\nlexically capture variables. For example, if you have\n\u003ccode\u003e\nfunction() { return a; }\n\u003c/code\u003e\nIf it is evaluated in a different scope, then it\ncaptures a different variable. Even if the function did not read\nany captured variables directly, it would still fail this definition,\nbecause it affects the lifecycle of variables in the enclosing scope.\n\nHowever, a function literal with respect to a particular scope is\na literal.\n\n@param includeFunctions If true, all function expressions will be\n    treated as literals.\n",
      "diff": "@@ -1,29 +1,31 @@\n static boolean isLiteralValue(Node n, boolean includeFunctions) {\n     switch(n.getType()) {\n+        case Token.CAST:\n+            return isLiteralValue(n.getFirstChild(), includeFunctions);\n         case Token.ARRAYLIT:\n             for (Node child \u003d n.getFirstChild(); child !\u003d null; child \u003d child.getNext()) {\n                 if ((!child.isEmpty()) \u0026\u0026 !isLiteralValue(child, includeFunctions)) {\n                     return false;\n                 }\n             }\n             return true;\n         case Token.REGEXP:\n             for (Node child \u003d n.getFirstChild(); child !\u003d null; child \u003d child.getNext()) {\n                 if (!isLiteralValue(child, includeFunctions)) {\n                     return false;\n                 }\n             }\n             return true;\n         case Token.OBJECTLIT:\n             for (Node child \u003d n.getFirstChild(); child !\u003d null; child \u003d child.getNext()) {\n                 if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {\n                     return false;\n                 }\n             }\n             return true;\n         case Token.FUNCTION:\n             return includeFunctions \u0026\u0026 !NodeUtil.isFunctionDeclaration(n);\n         default:\n             return isImmutableValue(n);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "24fd842a5380a350bcde0bed60287053bc9b37f0": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback \n\n*** Reason for rollback ***\n\nbreaks various projects without whitelists\n\n*** Original change description ***\n\nIntroduced a CAST ast node\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5848\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2334 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/19/12, 3:19 PM",
      "commitName": "24fd842a5380a350bcde0bed60287053bc9b37f0",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/19/12, 1:47 PM",
      "commitNameOld": "5428589fcac11bb899a44ef827e12a253e29d323",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "static boolean isLiteralValue(Node n, boolean includeFunctions) {\n    switch(n.getType()) {\n        case Token.ARRAYLIT:\n            for (Node child \u003d n.getFirstChild(); child !\u003d null; child \u003d child.getNext()) {\n                if ((!child.isEmpty()) \u0026\u0026 !isLiteralValue(child, includeFunctions)) {\n                    return false;\n                }\n            }\n            return true;\n        case Token.REGEXP:\n            for (Node child \u003d n.getFirstChild(); child !\u003d null; child \u003d child.getNext()) {\n                if (!isLiteralValue(child, includeFunctions)) {\n                    return false;\n                }\n            }\n            return true;\n        case Token.OBJECTLIT:\n            for (Node child \u003d n.getFirstChild(); child !\u003d null; child \u003d child.getNext()) {\n                if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {\n                    return false;\n                }\n            }\n            return true;\n        case Token.FUNCTION:\n            return includeFunctions \u0026\u0026 !NodeUtil.isFunctionDeclaration(n);\n        default:\n            return isImmutableValue(n);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/NodeUtil.java",
      "functionStartLine": 590,
      "functionName": "isLiteralValue",
      "functionAnnotation": "",
      "functionDoc": "Returns true if this is a literal value. We define a literal value\nas any node that evaluates to the same thing regardless of when or\nwhere it is evaluated. So /xyz/ and [3, 5] are literals, but\nthe name a is not.\n\nFunction literals do not meet this definition, because they\nlexically capture variables. For example, if you have\n\u003ccode\u003e\nfunction() { return a; }\n\u003c/code\u003e\nIf it is evaluated in a different scope, then it\ncaptures a different variable. Even if the function did not read\nany captured variables directly, it would still fail this definition,\nbecause it affects the lifecycle of variables in the enclosing scope.\n\nHowever, a function literal with respect to a particular scope is\na literal.\n\n@param includeFunctions If true, all function expressions will be\n    treated as literals.\n",
      "diff": "@@ -1,31 +1,29 @@\n static boolean isLiteralValue(Node n, boolean includeFunctions) {\n     switch(n.getType()) {\n-        case Token.CAST:\n-            return isLiteralValue(n.getFirstChild(), includeFunctions);\n         case Token.ARRAYLIT:\n             for (Node child \u003d n.getFirstChild(); child !\u003d null; child \u003d child.getNext()) {\n                 if ((!child.isEmpty()) \u0026\u0026 !isLiteralValue(child, includeFunctions)) {\n                     return false;\n                 }\n             }\n             return true;\n         case Token.REGEXP:\n             for (Node child \u003d n.getFirstChild(); child !\u003d null; child \u003d child.getNext()) {\n                 if (!isLiteralValue(child, includeFunctions)) {\n                     return false;\n                 }\n             }\n             return true;\n         case Token.OBJECTLIT:\n             for (Node child \u003d n.getFirstChild(); child !\u003d null; child \u003d child.getNext()) {\n                 if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {\n                     return false;\n                 }\n             }\n             return true;\n         case Token.FUNCTION:\n             return includeFunctions \u0026\u0026 !NodeUtil.isFunctionDeclaration(n);\n         default:\n             return isImmutableValue(n);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5428589fcac11bb899a44ef827e12a253e29d323": {
      "type": "Ybodychange",
      "commitMessage": "\nIntroduced a CAST ast node\n\nR\u003dnicksantos,dimvar\nDELTA\u003d2832  (2746 added, 13 deleted, 73 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5846\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2332 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/19/12, 1:47 PM",
      "commitName": "5428589fcac11bb899a44ef827e12a253e29d323",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "10/8/12, 2:31 PM",
      "commitNameOld": "a35b095af0ccbd568784976af1ce240007040688",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 42.01,
      "commitsBetweenForRepo": 74,
      "commitsBetweenForFile": 1,
      "actualSource": "static boolean isLiteralValue(Node n, boolean includeFunctions) {\n    switch(n.getType()) {\n        case Token.CAST:\n            return isLiteralValue(n.getFirstChild(), includeFunctions);\n        case Token.ARRAYLIT:\n            for (Node child \u003d n.getFirstChild(); child !\u003d null; child \u003d child.getNext()) {\n                if ((!child.isEmpty()) \u0026\u0026 !isLiteralValue(child, includeFunctions)) {\n                    return false;\n                }\n            }\n            return true;\n        case Token.REGEXP:\n            for (Node child \u003d n.getFirstChild(); child !\u003d null; child \u003d child.getNext()) {\n                if (!isLiteralValue(child, includeFunctions)) {\n                    return false;\n                }\n            }\n            return true;\n        case Token.OBJECTLIT:\n            for (Node child \u003d n.getFirstChild(); child !\u003d null; child \u003d child.getNext()) {\n                if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {\n                    return false;\n                }\n            }\n            return true;\n        case Token.FUNCTION:\n            return includeFunctions \u0026\u0026 !NodeUtil.isFunctionDeclaration(n);\n        default:\n            return isImmutableValue(n);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/NodeUtil.java",
      "functionStartLine": 591,
      "functionName": "isLiteralValue",
      "functionAnnotation": "",
      "functionDoc": "Returns true if this is a literal value. We define a literal value\nas any node that evaluates to the same thing regardless of when or\nwhere it is evaluated. So /xyz/ and [3, 5] are literals, but\nthe name a is not.\n\nFunction literals do not meet this definition, because they\nlexically capture variables. For example, if you have\n\u003ccode\u003e\nfunction() { return a; }\n\u003c/code\u003e\nIf it is evaluated in a different scope, then it\ncaptures a different variable. Even if the function did not read\nany captured variables directly, it would still fail this definition,\nbecause it affects the lifecycle of variables in the enclosing scope.\n\nHowever, a function literal with respect to a particular scope is\na literal.\n\n@param includeFunctions If true, all function expressions will be\n    treated as literals.\n",
      "diff": "@@ -1,29 +1,31 @@\n static boolean isLiteralValue(Node n, boolean includeFunctions) {\n     switch(n.getType()) {\n+        case Token.CAST:\n+            return isLiteralValue(n.getFirstChild(), includeFunctions);\n         case Token.ARRAYLIT:\n             for (Node child \u003d n.getFirstChild(); child !\u003d null; child \u003d child.getNext()) {\n                 if ((!child.isEmpty()) \u0026\u0026 !isLiteralValue(child, includeFunctions)) {\n                     return false;\n                 }\n             }\n             return true;\n         case Token.REGEXP:\n             for (Node child \u003d n.getFirstChild(); child !\u003d null; child \u003d child.getNext()) {\n                 if (!isLiteralValue(child, includeFunctions)) {\n                     return false;\n                 }\n             }\n             return true;\n         case Token.OBJECTLIT:\n             for (Node child \u003d n.getFirstChild(); child !\u003d null; child \u003d child.getNext()) {\n                 if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {\n                     return false;\n                 }\n             }\n             return true;\n         case Token.FUNCTION:\n             return includeFunctions \u0026\u0026 !NodeUtil.isFunctionDeclaration(n);\n         default:\n             return isImmutableValue(n);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "70a5626922ea7e8c98747e22b6986638ba38fadc": {
      "type": "Ydocchange",
      "commitMessage": "\nFix various typos, spelling and grammar errors.\nFixes issue 734. \nContributed by Robert Gust Bardon\n\nR\u003dnicksantos\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d4827\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1979 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/18/12, 11:09 AM",
      "commitName": "70a5626922ea7e8c98747e22b6986638ba38fadc",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "5/8/12, 2:28 PM",
      "commitNameOld": "3dcdbe4e8ca1488fa4d79f09e507da6d4b613bd3",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 9.86,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "actualSource": "static boolean isLiteralValue(Node n, boolean includeFunctions) {\n    switch(n.getType()) {\n        case Token.ARRAYLIT:\n            for (Node child \u003d n.getFirstChild(); child !\u003d null; child \u003d child.getNext()) {\n                if ((!child.isEmpty()) \u0026\u0026 !isLiteralValue(child, includeFunctions)) {\n                    return false;\n                }\n            }\n            return true;\n        case Token.REGEXP:\n            for (Node child \u003d n.getFirstChild(); child !\u003d null; child \u003d child.getNext()) {\n                if (!isLiteralValue(child, includeFunctions)) {\n                    return false;\n                }\n            }\n            return true;\n        case Token.OBJECTLIT:\n            for (Node child \u003d n.getFirstChild(); child !\u003d null; child \u003d child.getNext()) {\n                if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {\n                    return false;\n                }\n            }\n            return true;\n        case Token.FUNCTION:\n            return includeFunctions \u0026\u0026 !NodeUtil.isFunctionDeclaration(n);\n        default:\n            return isImmutableValue(n);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/NodeUtil.java",
      "functionStartLine": 586,
      "functionName": "isLiteralValue",
      "functionAnnotation": "",
      "functionDoc": "Returns true if this is a literal value. We define a literal value\nas any node that evaluates to the same thing regardless of when or\nwhere it is evaluated. So /xyz/ and [3, 5] are literals, but\nthe name a is not.\n\nFunction literals do not meet this definition, because they\nlexically capture variables. For example, if you have\n\u003ccode\u003e\nfunction() { return a; }\n\u003c/code\u003e\nIf it is evaluated in a different scope, then it\ncaptures a different variable. Even if the function did not read\nany captured variables directly, it would still fail this definition,\nbecause it affects the lifecycle of variables in the enclosing scope.\n\nHowever, a function literal with respect to a particular scope is\na literal.\n\n@param includeFunctions If true, all function expressions will be\n    treated as literals.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Returns true if this is a literal value. We define a literal value\nas any node that evaluates to the same thing regardless of when or\nwhere it is evaluated. So /xyz/ and [3, 5] are literals, but\nthe name a is not.\n\nFunction literals do not meet this definition, because they\nlexically capture variables. For example, if you have\n\u003ccode\u003e\nfunction() { return a; }\n\u003c/code\u003e\nIf it is evaluated in a different scope, then it\ncaptures a different variable. Even if the function did not read\nany captured vairables directly, it would still fail this definition,\nbecause it affects the lifecycle of variables in the enclosing scope.\n\nHowever, a function literal with respect to a particular scope is\na literal.\n\n@param includeFunctions If true, all function expressions will be\n    treated as literals.\n",
        "newValue": "Returns true if this is a literal value. We define a literal value\nas any node that evaluates to the same thing regardless of when or\nwhere it is evaluated. So /xyz/ and [3, 5] are literals, but\nthe name a is not.\n\nFunction literals do not meet this definition, because they\nlexically capture variables. For example, if you have\n\u003ccode\u003e\nfunction() { return a; }\n\u003c/code\u003e\nIf it is evaluated in a different scope, then it\ncaptures a different variable. Even if the function did not read\nany captured variables directly, it would still fail this definition,\nbecause it affects the lifecycle of variables in the enclosing scope.\n\nHowever, a function literal with respect to a particular scope is\na literal.\n\n@param includeFunctions If true, all function expressions will be\n    treated as literals.\n"
      }
    },
    "4d98fc9034031ee146c7e5534a150e2700d89f8e": {
      "type": "Ybodychange",
      "commitMessage": "\nAdd basic Node type helpers to Node\n\nR\u003dnicksantos\nDELTA\u003d241  (135 added, 9 deleted, 97 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3672\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1577 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/9/11, 12:32 PM",
      "commitName": "4d98fc9034031ee146c7e5534a150e2700d89f8e",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/9/11, 10:08 AM",
      "commitNameOld": "ca41f5d443aad22b11b2b6d514fdf20101f33276",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "static boolean isLiteralValue(Node n, boolean includeFunctions) {\n    switch(n.getType()) {\n        case Token.ARRAYLIT:\n            for (Node child \u003d n.getFirstChild(); child !\u003d null; child \u003d child.getNext()) {\n                if ((!child.isEmpty()) \u0026\u0026 !isLiteralValue(child, includeFunctions)) {\n                    return false;\n                }\n            }\n            return true;\n        case Token.REGEXP:\n            for (Node child \u003d n.getFirstChild(); child !\u003d null; child \u003d child.getNext()) {\n                if (!isLiteralValue(child, includeFunctions)) {\n                    return false;\n                }\n            }\n            return true;\n        case Token.OBJECTLIT:\n            for (Node child \u003d n.getFirstChild(); child !\u003d null; child \u003d child.getNext()) {\n                if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {\n                    return false;\n                }\n            }\n            return true;\n        case Token.FUNCTION:\n            return includeFunctions \u0026\u0026 !NodeUtil.isFunctionDeclaration(n);\n        default:\n            return isImmutableValue(n);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/NodeUtil.java",
      "functionStartLine": 581,
      "functionName": "isLiteralValue",
      "functionAnnotation": "",
      "functionDoc": "Returns true if this is a literal value. We define a literal value\nas any node that evaluates to the same thing regardless of when or\nwhere it is evaluated. So /xyz/ and [3, 5] are literals, but\nthe name a is not.\n\nFunction literals do not meet this definition, because they\nlexically capture variables. For example, if you have\n\u003ccode\u003e\nfunction() { return a; }\n\u003c/code\u003e\nIf it is evaluated in a different scope, then it\ncaptures a different variable. Even if the function did not read\nany captured vairables directly, it would still fail this definition,\nbecause it affects the lifecycle of variables in the enclosing scope.\n\nHowever, a function literal with respect to a particular scope is\na literal.\n\n@param includeFunctions If true, all function expressions will be\n    treated as literals.\n",
      "diff": "@@ -1,29 +1,29 @@\n static boolean isLiteralValue(Node n, boolean includeFunctions) {\n     switch(n.getType()) {\n         case Token.ARRAYLIT:\n             for (Node child \u003d n.getFirstChild(); child !\u003d null; child \u003d child.getNext()) {\n-                if (child.getType() !\u003d Token.EMPTY \u0026\u0026 !isLiteralValue(child, includeFunctions)) {\n+                if ((!child.isEmpty()) \u0026\u0026 !isLiteralValue(child, includeFunctions)) {\n                     return false;\n                 }\n             }\n             return true;\n         case Token.REGEXP:\n             for (Node child \u003d n.getFirstChild(); child !\u003d null; child \u003d child.getNext()) {\n                 if (!isLiteralValue(child, includeFunctions)) {\n                     return false;\n                 }\n             }\n             return true;\n         case Token.OBJECTLIT:\n             for (Node child \u003d n.getFirstChild(); child !\u003d null; child \u003d child.getNext()) {\n                 if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {\n                     return false;\n                 }\n             }\n             return true;\n         case Token.FUNCTION:\n             return includeFunctions \u0026\u0026 !NodeUtil.isFunctionDeclaration(n);\n         default:\n             return isImmutableValue(n);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "653599e7c3922059a78958ea32b216ff9c42800e": {
      "type": "Ybodychange",
      "commitMessage": "\nFixup sparse array handling.\n- Replace sparse array annotation with EMPTY nodes.\n- Fix handling of arrays ending with an EMPTY node\n- Fix handling of arrays that are completely empty\n- Support PeepFoldConstant folding of arrays containing EMPTY nodes.\n\nR\u003dacleung\nDELTA\u003d163  (53 added, 92 deleted, 18 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d879\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@887 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/15/11, 12:33 PM",
      "commitName": "653599e7c3922059a78958ea32b216ff9c42800e",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "3/9/11, 11:46 AM",
      "commitNameOld": "04f380716cd2403ae87e2b0880a56369aa0c6c33",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 5.99,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "actualSource": "static boolean isLiteralValue(Node n, boolean includeFunctions) {\n    switch(n.getType()) {\n        case Token.ARRAYLIT:\n            for (Node child \u003d n.getFirstChild(); child !\u003d null; child \u003d child.getNext()) {\n                if (child.getType() !\u003d Token.EMPTY \u0026\u0026 !isLiteralValue(child, includeFunctions)) {\n                    return false;\n                }\n            }\n            return true;\n        case Token.REGEXP:\n            for (Node child \u003d n.getFirstChild(); child !\u003d null; child \u003d child.getNext()) {\n                if (!isLiteralValue(child, includeFunctions)) {\n                    return false;\n                }\n            }\n            return true;\n        case Token.OBJECTLIT:\n            for (Node child \u003d n.getFirstChild(); child !\u003d null; child \u003d child.getNext()) {\n                if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {\n                    return false;\n                }\n            }\n            return true;\n        case Token.FUNCTION:\n            return includeFunctions \u0026\u0026 !NodeUtil.isFunctionDeclaration(n);\n        default:\n            return isImmutableValue(n);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/NodeUtil.java",
      "functionStartLine": 497,
      "functionName": "isLiteralValue",
      "functionAnnotation": "",
      "functionDoc": "Returns true if this is a literal value. We define a literal value\nas any node that evaluates to the same thing regardless of when or\nwhere it is evaluated. So /xyz/ and [3, 5] are literals, but\nthe name a is not.\n\nFunction literals do not meet this definition, because they\nlexically capture variables. For example, if you have\n\u003ccode\u003e\nfunction() { return a; }\n\u003c/code\u003e\nIf it is evaluated in a different scope, then it\ncaptures a different variable. Even if the function did not read\nany captured vairables directly, it would still fail this definition,\nbecause it affects the lifecycle of variables in the enclosing scope.\n\nHowever, a function literal with respect to a particular scope is\na literal.\n\n@param includeFunctions If true, all function expressions will be\n    treated as literals.\n",
      "diff": "@@ -1,23 +1,29 @@\n static boolean isLiteralValue(Node n, boolean includeFunctions) {\n     switch(n.getType()) {\n         case Token.ARRAYLIT:\n+            for (Node child \u003d n.getFirstChild(); child !\u003d null; child \u003d child.getNext()) {\n+                if (child.getType() !\u003d Token.EMPTY \u0026\u0026 !isLiteralValue(child, includeFunctions)) {\n+                    return false;\n+                }\n+            }\n+            return true;\n         case Token.REGEXP:\n             for (Node child \u003d n.getFirstChild(); child !\u003d null; child \u003d child.getNext()) {\n                 if (!isLiteralValue(child, includeFunctions)) {\n                     return false;\n                 }\n             }\n             return true;\n         case Token.OBJECTLIT:\n             for (Node child \u003d n.getFirstChild(); child !\u003d null; child \u003d child.getNext()) {\n                 if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {\n                     return false;\n                 }\n             }\n             return true;\n         case Token.FUNCTION:\n             return includeFunctions \u0026\u0026 !NodeUtil.isFunctionDeclaration(n);\n         default:\n             return isImmutableValue(n);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "34fd5f8275ae69fc772c2283a3c5fd13b93a7c42": {
      "type": "Ybodychange",
      "commitMessage": "\nChange the OBJECTLIT AST structure from:\n\nOBJECTLIT\n  KEY1\n  VALUE1\n\nto\n\nOBJECTLIT\n  KEY1\n    VALUE1\n\nFixes issue 241\n\nR\u003dacleung,johnlenz,stevey\nDELTA\u003d268  (101 added, 51 deleted, 116 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d356416\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@494 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/18/10, 2:55 PM",
      "commitName": "34fd5f8275ae69fc772c2283a3c5fd13b93a7c42",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "10/1/10, 4:37 PM",
      "commitNameOld": "7cc748592670105f9d783b1b85f0f27e938db4ff",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 16.93,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "actualSource": "static boolean isLiteralValue(Node n, boolean includeFunctions) {\n    switch(n.getType()) {\n        case Token.ARRAYLIT:\n        case Token.REGEXP:\n            for (Node child \u003d n.getFirstChild(); child !\u003d null; child \u003d child.getNext()) {\n                if (!isLiteralValue(child, includeFunctions)) {\n                    return false;\n                }\n            }\n            return true;\n        case Token.OBJECTLIT:\n            for (Node child \u003d n.getFirstChild(); child !\u003d null; child \u003d child.getNext()) {\n                if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {\n                    return false;\n                }\n            }\n            return true;\n        case Token.FUNCTION:\n            return includeFunctions \u0026\u0026 !NodeUtil.isFunctionDeclaration(n);\n        default:\n            return isImmutableValue(n);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/NodeUtil.java",
      "functionStartLine": 292,
      "functionName": "isLiteralValue",
      "functionAnnotation": "",
      "functionDoc": "Returns true if this is a literal value. We define a literal value\nas any node that evaluates to the same thing regardless of when or\nwhere it is evaluated. So /xyz/ and [3, 5] are literals, but\nthe name a is not.\n\nFunction literals do not meet this definition, because they\nlexically capture variables. For example, if you have\n\u003ccode\u003e\nfunction() { return a; }\n\u003c/code\u003e\nIf it is evaluated in a different scope, then it\ncaptures a different variable. Even if the function did not read\nany captured vairables directly, it would still fail this definition,\nbecause it affects the lifecycle of variables in the enclosing scope.\n\nHowever, a function literal with respect to a particular scope is\na literal.\n\n@param includeFunctions If true, all function expressions will be\n    treated as literals.\n",
      "diff": "@@ -1,17 +1,23 @@\n static boolean isLiteralValue(Node n, boolean includeFunctions) {\n     switch(n.getType()) {\n         case Token.ARRAYLIT:\n-        case Token.OBJECTLIT:\n         case Token.REGEXP:\n             for (Node child \u003d n.getFirstChild(); child !\u003d null; child \u003d child.getNext()) {\n                 if (!isLiteralValue(child, includeFunctions)) {\n                     return false;\n                 }\n             }\n             return true;\n+        case Token.OBJECTLIT:\n+            for (Node child \u003d n.getFirstChild(); child !\u003d null; child \u003d child.getNext()) {\n+                if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {\n+                    return false;\n+                }\n+            }\n+            return true;\n         case Token.FUNCTION:\n             return includeFunctions \u0026\u0026 !NodeUtil.isFunctionDeclaration(n);\n         default:\n             return isImmutableValue(n);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f0362b1ab1ae1339e017b1d04f016980e3fa6cb6": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "\nfix a bug where NodeUtil was reporting function literals\nas immutable. functions are mutable.\nMake isLiteralValue a bit more flexible, so that it can\nidentify function literals.\ndo some additional folding on function literals.\n\nR\u003dacleung\nDELTA\u003d68  (35 added, 1 deleted, 32 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d64001\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@308 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/23/10, 2:49 PM",
      "commitName": "f0362b1ab1ae1339e017b1d04f016980e3fa6cb6",
      "commitAuthor": "nicksantos@google.com",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "\nfix a bug where NodeUtil was reporting function literals\nas immutable. functions are mutable.\nMake isLiteralValue a bit more flexible, so that it can\nidentify function literals.\ndo some additional folding on function literals.\n\nR\u003dacleung\nDELTA\u003d68  (35 added, 1 deleted, 32 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d64001\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@308 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "7/23/10, 2:49 PM",
          "commitName": "f0362b1ab1ae1339e017b1d04f016980e3fa6cb6",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "7/20/10, 11:11 AM",
          "commitNameOld": "9b4ae3ac4b39ed3267d23e12d99e1fd6d86400c5",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 3.15,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "actualSource": "static boolean isLiteralValue(Node n, boolean includeFunctions) {\n    switch(n.getType()) {\n        case Token.ARRAYLIT:\n        case Token.OBJECTLIT:\n        case Token.REGEXP:\n            for (Node child \u003d n.getFirstChild(); child !\u003d null; child \u003d child.getNext()) {\n                if (!isLiteralValue(child, includeFunctions)) {\n                    return false;\n                }\n            }\n            return true;\n        case Token.FUNCTION:\n            return includeFunctions \u0026\u0026 !NodeUtil.isFunctionDeclaration(n);\n        default:\n            return isImmutableValue(n);\n    }\n}",
          "path": "src/com/google/javascript/jscomp/NodeUtil.java",
          "functionStartLine": 223,
          "functionName": "isLiteralValue",
          "functionAnnotation": "",
          "functionDoc": "Returns true if this is a literal value. We define a literal value\nas any node that evaluates to the same thing regardless of when or\nwhere it is evaluated. So /xyz/ and [3, 5] are literals, but\nthe name a is not.\n\nFunction literals do not meet this definition, because they\nlexically capture variables. For example, if you have\n\u003ccode\u003e\nfunction() { return a; }\n\u003c/code\u003e\nIf it is evaluated in a different scope, then it\ncaptures a different variable. Even if the function did not read\nany captured vairables directly, it would still fail this definition,\nbecause it affects the lifecycle of variables in the enclosing scope.\n\nHowever, a function literal with respect to a particular scope is\na literal.\n\n@param includeFunctions If true, all function expressions will be\n    treated as literals.\n",
          "diff": "@@ -1,15 +1,17 @@\n-static boolean isLiteralValue(Node n) {\n+static boolean isLiteralValue(Node n, boolean includeFunctions) {\n     switch(n.getType()) {\n         case Token.ARRAYLIT:\n         case Token.OBJECTLIT:\n         case Token.REGEXP:\n             for (Node child \u003d n.getFirstChild(); child !\u003d null; child \u003d child.getNext()) {\n-                if (!isLiteralValue(child)) {\n+                if (!isLiteralValue(child, includeFunctions)) {\n                     return false;\n                 }\n             }\n             return true;\n+        case Token.FUNCTION:\n+            return includeFunctions \u0026\u0026 !NodeUtil.isFunctionDeclaration(n);\n         default:\n             return isImmutableValue(n);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[n-Node]",
            "newValue": "[n-Node, includeFunctions-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nfix a bug where NodeUtil was reporting function literals\nas immutable. functions are mutable.\nMake isLiteralValue a bit more flexible, so that it can\nidentify function literals.\ndo some additional folding on function literals.\n\nR\u003dacleung\nDELTA\u003d68  (35 added, 1 deleted, 32 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d64001\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@308 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "7/23/10, 2:49 PM",
          "commitName": "f0362b1ab1ae1339e017b1d04f016980e3fa6cb6",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "7/20/10, 11:11 AM",
          "commitNameOld": "9b4ae3ac4b39ed3267d23e12d99e1fd6d86400c5",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 3.15,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "actualSource": "static boolean isLiteralValue(Node n, boolean includeFunctions) {\n    switch(n.getType()) {\n        case Token.ARRAYLIT:\n        case Token.OBJECTLIT:\n        case Token.REGEXP:\n            for (Node child \u003d n.getFirstChild(); child !\u003d null; child \u003d child.getNext()) {\n                if (!isLiteralValue(child, includeFunctions)) {\n                    return false;\n                }\n            }\n            return true;\n        case Token.FUNCTION:\n            return includeFunctions \u0026\u0026 !NodeUtil.isFunctionDeclaration(n);\n        default:\n            return isImmutableValue(n);\n    }\n}",
          "path": "src/com/google/javascript/jscomp/NodeUtil.java",
          "functionStartLine": 223,
          "functionName": "isLiteralValue",
          "functionAnnotation": "",
          "functionDoc": "Returns true if this is a literal value. We define a literal value\nas any node that evaluates to the same thing regardless of when or\nwhere it is evaluated. So /xyz/ and [3, 5] are literals, but\nthe name a is not.\n\nFunction literals do not meet this definition, because they\nlexically capture variables. For example, if you have\n\u003ccode\u003e\nfunction() { return a; }\n\u003c/code\u003e\nIf it is evaluated in a different scope, then it\ncaptures a different variable. Even if the function did not read\nany captured vairables directly, it would still fail this definition,\nbecause it affects the lifecycle of variables in the enclosing scope.\n\nHowever, a function literal with respect to a particular scope is\na literal.\n\n@param includeFunctions If true, all function expressions will be\n    treated as literals.\n",
          "diff": "@@ -1,15 +1,17 @@\n-static boolean isLiteralValue(Node n) {\n+static boolean isLiteralValue(Node n, boolean includeFunctions) {\n     switch(n.getType()) {\n         case Token.ARRAYLIT:\n         case Token.OBJECTLIT:\n         case Token.REGEXP:\n             for (Node child \u003d n.getFirstChild(); child !\u003d null; child \u003d child.getNext()) {\n-                if (!isLiteralValue(child)) {\n+                if (!isLiteralValue(child, includeFunctions)) {\n                     return false;\n                 }\n             }\n             return true;\n+        case Token.FUNCTION:\n+            return includeFunctions \u0026\u0026 !NodeUtil.isFunctionDeclaration(n);\n         default:\n             return isImmutableValue(n);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "\nfix a bug where NodeUtil was reporting function literals\nas immutable. functions are mutable.\nMake isLiteralValue a bit more flexible, so that it can\nidentify function literals.\ndo some additional folding on function literals.\n\nR\u003dacleung\nDELTA\u003d68  (35 added, 1 deleted, 32 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d64001\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@308 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "7/23/10, 2:49 PM",
          "commitName": "f0362b1ab1ae1339e017b1d04f016980e3fa6cb6",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "7/20/10, 11:11 AM",
          "commitNameOld": "9b4ae3ac4b39ed3267d23e12d99e1fd6d86400c5",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 3.15,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "actualSource": "static boolean isLiteralValue(Node n, boolean includeFunctions) {\n    switch(n.getType()) {\n        case Token.ARRAYLIT:\n        case Token.OBJECTLIT:\n        case Token.REGEXP:\n            for (Node child \u003d n.getFirstChild(); child !\u003d null; child \u003d child.getNext()) {\n                if (!isLiteralValue(child, includeFunctions)) {\n                    return false;\n                }\n            }\n            return true;\n        case Token.FUNCTION:\n            return includeFunctions \u0026\u0026 !NodeUtil.isFunctionDeclaration(n);\n        default:\n            return isImmutableValue(n);\n    }\n}",
          "path": "src/com/google/javascript/jscomp/NodeUtil.java",
          "functionStartLine": 223,
          "functionName": "isLiteralValue",
          "functionAnnotation": "",
          "functionDoc": "Returns true if this is a literal value. We define a literal value\nas any node that evaluates to the same thing regardless of when or\nwhere it is evaluated. So /xyz/ and [3, 5] are literals, but\nthe name a is not.\n\nFunction literals do not meet this definition, because they\nlexically capture variables. For example, if you have\n\u003ccode\u003e\nfunction() { return a; }\n\u003c/code\u003e\nIf it is evaluated in a different scope, then it\ncaptures a different variable. Even if the function did not read\nany captured vairables directly, it would still fail this definition,\nbecause it affects the lifecycle of variables in the enclosing scope.\n\nHowever, a function literal with respect to a particular scope is\na literal.\n\n@param includeFunctions If true, all function expressions will be\n    treated as literals.\n",
          "diff": "@@ -1,15 +1,17 @@\n-static boolean isLiteralValue(Node n) {\n+static boolean isLiteralValue(Node n, boolean includeFunctions) {\n     switch(n.getType()) {\n         case Token.ARRAYLIT:\n         case Token.OBJECTLIT:\n         case Token.REGEXP:\n             for (Node child \u003d n.getFirstChild(); child !\u003d null; child \u003d child.getNext()) {\n-                if (!isLiteralValue(child)) {\n+                if (!isLiteralValue(child, includeFunctions)) {\n                     return false;\n                 }\n             }\n             return true;\n+        case Token.FUNCTION:\n+            return includeFunctions \u0026\u0026 !NodeUtil.isFunctionDeclaration(n);\n         default:\n             return isImmutableValue(n);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Returns true if this is a literal value. We define a literal value\nas any node that evaluates to the same thing regardless of when or\nwhere it is evaluated. So /xyz/ and [3, 5] are literals, but\nfunction() { return a; } is not.\n",
            "newValue": "Returns true if this is a literal value. We define a literal value\nas any node that evaluates to the same thing regardless of when or\nwhere it is evaluated. So /xyz/ and [3, 5] are literals, but\nthe name a is not.\n\nFunction literals do not meet this definition, because they\nlexically capture variables. For example, if you have\n\u003ccode\u003e\nfunction() { return a; }\n\u003c/code\u003e\nIf it is evaluated in a different scope, then it\ncaptures a different variable. Even if the function did not read\nany captured vairables directly, it would still fail this definition,\nbecause it affects the lifecycle of variables in the enclosing scope.\n\nHowever, a function literal with respect to a particular scope is\na literal.\n\n@param includeFunctions If true, all function expressions will be\n    treated as literals.\n"
          }
        }
      ]
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,15 @@\n+static boolean isLiteralValue(Node n) {\n+    switch(n.getType()) {\n+        case Token.ARRAYLIT:\n+        case Token.OBJECTLIT:\n+        case Token.REGEXP:\n+            for (Node child \u003d n.getFirstChild(); child !\u003d null; child \u003d child.getNext()) {\n+                if (!isLiteralValue(child)) {\n+                    return false;\n+                }\n+            }\n+            return true;\n+        default:\n+            return isImmutableValue(n);\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "static boolean isLiteralValue(Node n) {\n    switch(n.getType()) {\n        case Token.ARRAYLIT:\n        case Token.OBJECTLIT:\n        case Token.REGEXP:\n            for (Node child \u003d n.getFirstChild(); child !\u003d null; child \u003d child.getNext()) {\n                if (!isLiteralValue(child)) {\n                    return false;\n                }\n            }\n            return true;\n        default:\n            return isImmutableValue(n);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/NodeUtil.java",
      "functionStartLine": 204,
      "functionName": "isLiteralValue",
      "functionAnnotation": "",
      "functionDoc": "Returns true if this is a literal value. We define a literal value\nas any node that evaluates to the same thing regardless of when or\nwhere it is evaluated. So /xyz/ and [3, 5] are literals, but\nfunction() { return a; } is not.\n"
    }
  }
}