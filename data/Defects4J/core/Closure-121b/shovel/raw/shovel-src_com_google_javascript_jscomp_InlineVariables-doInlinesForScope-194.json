{
  "origin": "codeshovel",
  "repositoryName": "Closure-121b",
  "repositoryPath": "/tmp/Closure-121b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "InlineVariables.java",
  "functionName": "doInlinesForScope",
  "functionId": "$doInlinesForScope___t-NodeTraversal__referenceMap-ReferenceMap",
  "sourceFilePath": "src/com/google/javascript/jscomp/InlineVariables.java",
  "functionAnnotation": "",
  "functionDoc": "For all variables in this scope, see if they are only used once.\nIf it looks safe to do so, inline them.\n",
  "functionStartLine": 194,
  "functionEndLine": 222,
  "numCommitsSeen": 52,
  "timeTaken": 1759,
  "changeHistory": [
    "75a9013e3907e5db97f10578227497d7b018caf5",
    "ba0119710233a1be87c10c5e71424dc5922cc627",
    "026a1083635e5564b6c18264372ee884f410490f",
    "3bee5d740c96572faea4b9fb8b632e0e07b13cbb",
    "78995bf9e88599055a8c4165d89c09dc92a44b30",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "75a9013e3907e5db97f10578227497d7b018caf5": "Ymultichange(Yparameterchange,Ybodychange)",
    "ba0119710233a1be87c10c5e71424dc5922cc627": "Ybodychange",
    "026a1083635e5564b6c18264372ee884f410490f": "Ybodychange",
    "3bee5d740c96572faea4b9fb8b632e0e07b13cbb": "Ybodychange",
    "78995bf9e88599055a8c4165d89c09dc92a44b30": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "75a9013e3907e5db97f10578227497d7b018caf5": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "\nmade checkVariableReferences hot-swappable and to do this added the\nfunctionality to keep lists of all global var references in Compiler\n\nR\u003dnicksantos\nDELTA\u003d478  (417 added, 8 deleted, 53 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1999\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1128 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/24/11, 10:36 AM",
      "commitName": "75a9013e3907e5db97f10578227497d7b018caf5",
      "commitAuthor": "bashir@google.com",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "\nmade checkVariableReferences hot-swappable and to do this added the\nfunctionality to keep lists of all global var references in Compiler\n\nR\u003dnicksantos\nDELTA\u003d478  (417 added, 8 deleted, 53 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1999\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1128 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "5/24/11, 10:36 AM",
          "commitName": "75a9013e3907e5db97f10578227497d7b018caf5",
          "commitAuthor": "bashir@google.com",
          "commitDateOld": "4/12/11, 12:15 PM",
          "commitNameOld": "f322be0e576d5e2114cb59c0a6537197997b9c59",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 41.93,
          "commitsBetweenForRepo": 125,
          "commitsBetweenForFile": 1,
          "actualSource": "private void doInlinesForScope(NodeTraversal t, ReferenceMap referenceMap) {\n    boolean maybeModifiedArguments \u003d maybeEscapedOrModifiedArguments(t.getScope(), referenceMap);\n    for (Iterator\u003cVar\u003e it \u003d t.getScope().getVars(); it.hasNext(); ) {\n        Var v \u003d it.next();\n        ReferenceCollection referenceInfo \u003d referenceMap.getReferences(v);\n        if (referenceInfo \u003d\u003d null || isVarInlineForbidden(v)) {\n            continue;\n        } else if (isInlineableDeclaredConstant(v, referenceInfo)) {\n            Reference init \u003d referenceInfo.getInitializingReferenceForConstants();\n            Node value \u003d init.getAssignedValue();\n            inlineDeclaredConstant(v, value, referenceInfo.references);\n            staleVars.add(v);\n        } else if (mode \u003d\u003d Mode.CONSTANTS_ONLY) {\n            continue;\n        } else {\n            inlineNonConstants(v, referenceInfo, maybeModifiedArguments);\n        }\n    }\n}",
          "path": "src/com/google/javascript/jscomp/InlineVariables.java",
          "functionStartLine": 196,
          "functionName": "doInlinesForScope",
          "functionAnnotation": "",
          "functionDoc": "For all variables in this scope, see if they are only used once.\nIf it looks safe to do so, inline them.\n",
          "diff": "@@ -1,19 +1,19 @@\n-private void doInlinesForScope(NodeTraversal t, Map\u003cVar, ReferenceCollection\u003e referenceMap) {\n+private void doInlinesForScope(NodeTraversal t, ReferenceMap referenceMap) {\n     boolean maybeModifiedArguments \u003d maybeEscapedOrModifiedArguments(t.getScope(), referenceMap);\n     for (Iterator\u003cVar\u003e it \u003d t.getScope().getVars(); it.hasNext(); ) {\n         Var v \u003d it.next();\n-        ReferenceCollection referenceInfo \u003d referenceMap.get(v);\n+        ReferenceCollection referenceInfo \u003d referenceMap.getReferences(v);\n         if (referenceInfo \u003d\u003d null || isVarInlineForbidden(v)) {\n             continue;\n         } else if (isInlineableDeclaredConstant(v, referenceInfo)) {\n             Reference init \u003d referenceInfo.getInitializingReferenceForConstants();\n             Node value \u003d init.getAssignedValue();\n             inlineDeclaredConstant(v, value, referenceInfo.references);\n             staleVars.add(v);\n         } else if (mode \u003d\u003d Mode.CONSTANTS_ONLY) {\n             continue;\n         } else {\n             inlineNonConstants(v, referenceInfo, maybeModifiedArguments);\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[t-NodeTraversal, referenceMap-Map\u003cVar,ReferenceCollection\u003e]",
            "newValue": "[t-NodeTraversal, referenceMap-ReferenceMap]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nmade checkVariableReferences hot-swappable and to do this added the\nfunctionality to keep lists of all global var references in Compiler\n\nR\u003dnicksantos\nDELTA\u003d478  (417 added, 8 deleted, 53 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1999\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1128 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "5/24/11, 10:36 AM",
          "commitName": "75a9013e3907e5db97f10578227497d7b018caf5",
          "commitAuthor": "bashir@google.com",
          "commitDateOld": "4/12/11, 12:15 PM",
          "commitNameOld": "f322be0e576d5e2114cb59c0a6537197997b9c59",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 41.93,
          "commitsBetweenForRepo": 125,
          "commitsBetweenForFile": 1,
          "actualSource": "private void doInlinesForScope(NodeTraversal t, ReferenceMap referenceMap) {\n    boolean maybeModifiedArguments \u003d maybeEscapedOrModifiedArguments(t.getScope(), referenceMap);\n    for (Iterator\u003cVar\u003e it \u003d t.getScope().getVars(); it.hasNext(); ) {\n        Var v \u003d it.next();\n        ReferenceCollection referenceInfo \u003d referenceMap.getReferences(v);\n        if (referenceInfo \u003d\u003d null || isVarInlineForbidden(v)) {\n            continue;\n        } else if (isInlineableDeclaredConstant(v, referenceInfo)) {\n            Reference init \u003d referenceInfo.getInitializingReferenceForConstants();\n            Node value \u003d init.getAssignedValue();\n            inlineDeclaredConstant(v, value, referenceInfo.references);\n            staleVars.add(v);\n        } else if (mode \u003d\u003d Mode.CONSTANTS_ONLY) {\n            continue;\n        } else {\n            inlineNonConstants(v, referenceInfo, maybeModifiedArguments);\n        }\n    }\n}",
          "path": "src/com/google/javascript/jscomp/InlineVariables.java",
          "functionStartLine": 196,
          "functionName": "doInlinesForScope",
          "functionAnnotation": "",
          "functionDoc": "For all variables in this scope, see if they are only used once.\nIf it looks safe to do so, inline them.\n",
          "diff": "@@ -1,19 +1,19 @@\n-private void doInlinesForScope(NodeTraversal t, Map\u003cVar, ReferenceCollection\u003e referenceMap) {\n+private void doInlinesForScope(NodeTraversal t, ReferenceMap referenceMap) {\n     boolean maybeModifiedArguments \u003d maybeEscapedOrModifiedArguments(t.getScope(), referenceMap);\n     for (Iterator\u003cVar\u003e it \u003d t.getScope().getVars(); it.hasNext(); ) {\n         Var v \u003d it.next();\n-        ReferenceCollection referenceInfo \u003d referenceMap.get(v);\n+        ReferenceCollection referenceInfo \u003d referenceMap.getReferences(v);\n         if (referenceInfo \u003d\u003d null || isVarInlineForbidden(v)) {\n             continue;\n         } else if (isInlineableDeclaredConstant(v, referenceInfo)) {\n             Reference init \u003d referenceInfo.getInitializingReferenceForConstants();\n             Node value \u003d init.getAssignedValue();\n             inlineDeclaredConstant(v, value, referenceInfo.references);\n             staleVars.add(v);\n         } else if (mode \u003d\u003d Mode.CONSTANTS_ONLY) {\n             continue;\n         } else {\n             inlineNonConstants(v, referenceInfo, maybeModifiedArguments);\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "ba0119710233a1be87c10c5e71424dc5922cc627": {
      "type": "Ybodychange",
      "commitMessage": "\nDon\u0027t inline alias if \"arguments\" are modified or escaped.\nFixes issue 378\n\nR\u003dacleung\nDELTA\u003d235  (228 added, 0 deleted, 7 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1089\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@942 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/25/11, 5:16 PM",
      "commitName": "ba0119710233a1be87c10c5e71424dc5922cc627",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "3/10/11, 5:33 PM",
      "commitNameOld": "00c6b6e0f0798db704b3e5fc4a0547bd90e55289",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 14.95,
      "commitsBetweenForRepo": 57,
      "commitsBetweenForFile": 1,
      "actualSource": "private void doInlinesForScope(NodeTraversal t, Map\u003cVar, ReferenceCollection\u003e referenceMap) {\n    boolean maybeModifiedArguments \u003d maybeEscapedOrModifiedArguments(t.getScope(), referenceMap);\n    for (Iterator\u003cVar\u003e it \u003d t.getScope().getVars(); it.hasNext(); ) {\n        Var v \u003d it.next();\n        ReferenceCollection referenceInfo \u003d referenceMap.get(v);\n        if (referenceInfo \u003d\u003d null || isVarInlineForbidden(v)) {\n            continue;\n        } else if (isInlineableDeclaredConstant(v, referenceInfo)) {\n            Reference init \u003d referenceInfo.getInitializingReferenceForConstants();\n            Node value \u003d init.getAssignedValue();\n            inlineDeclaredConstant(v, value, referenceInfo.references);\n            staleVars.add(v);\n        } else if (mode \u003d\u003d Mode.CONSTANTS_ONLY) {\n            continue;\n        } else {\n            inlineNonConstants(v, referenceInfo, maybeModifiedArguments);\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/InlineVariables.java",
      "functionStartLine": 196,
      "functionName": "doInlinesForScope",
      "functionAnnotation": "",
      "functionDoc": "For all variables in this scope, see if they are only used once.\nIf it looks safe to do so, inline them.\n",
      "diff": "@@ -1,18 +1,19 @@\n private void doInlinesForScope(NodeTraversal t, Map\u003cVar, ReferenceCollection\u003e referenceMap) {\n+    boolean maybeModifiedArguments \u003d maybeEscapedOrModifiedArguments(t.getScope(), referenceMap);\n     for (Iterator\u003cVar\u003e it \u003d t.getScope().getVars(); it.hasNext(); ) {\n         Var v \u003d it.next();\n         ReferenceCollection referenceInfo \u003d referenceMap.get(v);\n         if (referenceInfo \u003d\u003d null || isVarInlineForbidden(v)) {\n             continue;\n         } else if (isInlineableDeclaredConstant(v, referenceInfo)) {\n             Reference init \u003d referenceInfo.getInitializingReferenceForConstants();\n             Node value \u003d init.getAssignedValue();\n             inlineDeclaredConstant(v, value, referenceInfo.references);\n             staleVars.add(v);\n         } else if (mode \u003d\u003d Mode.CONSTANTS_ONLY) {\n             continue;\n         } else {\n-            inlineNonConstants(v, referenceInfo);\n+            inlineNonConstants(v, referenceInfo, maybeModifiedArguments);\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "026a1083635e5564b6c18264372ee884f410490f": {
      "type": "Ybodychange",
      "commitMessage": "\nDuplicate check if a varibale is in staleVars set removed.\n\nR\u003djohnlenz\nDELTA\u003d2  (0 added, 1 deleted, 1 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d94001\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@347 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/9/10, 6:34 PM",
      "commitName": "026a1083635e5564b6c18264372ee884f410490f",
      "commitAuthor": "dhans@google.com",
      "commitDateOld": "7/23/10, 2:49 PM",
      "commitNameOld": "f0362b1ab1ae1339e017b1d04f016980e3fa6cb6",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 17.16,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "actualSource": "private void doInlinesForScope(NodeTraversal t, Map\u003cVar, ReferenceCollection\u003e referenceMap) {\n    for (Iterator\u003cVar\u003e it \u003d t.getScope().getVars(); it.hasNext(); ) {\n        Var v \u003d it.next();\n        ReferenceCollection referenceInfo \u003d referenceMap.get(v);\n        if (referenceInfo \u003d\u003d null || isVarInlineForbidden(v)) {\n            continue;\n        } else if (isInlineableDeclaredConstant(v, referenceInfo)) {\n            Reference init \u003d referenceInfo.getInitializingReferenceForConstants();\n            Node value \u003d init.getAssignedValue();\n            inlineDeclaredConstant(v, value, referenceInfo.references);\n            staleVars.add(v);\n        } else if (mode \u003d\u003d Mode.CONSTANTS_ONLY) {\n            continue;\n        } else {\n            inlineNonConstants(v, referenceInfo);\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/InlineVariables.java",
      "functionStartLine": 196,
      "functionName": "doInlinesForScope",
      "functionAnnotation": "",
      "functionDoc": "For all variables in this scope, see if they are only used once.\nIf it looks safe to do so, inline them.\n",
      "diff": "@@ -1,18 +1,18 @@\n private void doInlinesForScope(NodeTraversal t, Map\u003cVar, ReferenceCollection\u003e referenceMap) {\n     for (Iterator\u003cVar\u003e it \u003d t.getScope().getVars(); it.hasNext(); ) {\n         Var v \u003d it.next();\n         ReferenceCollection referenceInfo \u003d referenceMap.get(v);\n-        if (referenceInfo \u003d\u003d null || isVarInlineForbidden(v) || staleVars.contains(v)) {\n+        if (referenceInfo \u003d\u003d null || isVarInlineForbidden(v)) {\n             continue;\n         } else if (isInlineableDeclaredConstant(v, referenceInfo)) {\n             Reference init \u003d referenceInfo.getInitializingReferenceForConstants();\n             Node value \u003d init.getAssignedValue();\n             inlineDeclaredConstant(v, value, referenceInfo.references);\n             staleVars.add(v);\n         } else if (mode \u003d\u003d Mode.CONSTANTS_ONLY) {\n             continue;\n         } else {\n             inlineNonConstants(v, referenceInfo);\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3bee5d740c96572faea4b9fb8b632e0e07b13cbb": {
      "type": "Ybodychange",
      "commitMessage": "Add a mechanism for inlining local vars, and turn it on by default.\nWarnings for \"ambiguous\" function definitions.\nRefactoring and renaming of some method names.\nUse \"\u003d\" optionality annotation in externs.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@15 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/25/09, 6:53 AM",
      "commitName": "3bee5d740c96572faea4b9fb8b632e0e07b13cbb",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/10/09, 11:16 AM",
      "commitNameOld": "78995bf9e88599055a8c4165d89c09dc92a44b30",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 14.82,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "private void doInlinesForScope(NodeTraversal t, Map\u003cVar, ReferenceCollection\u003e referenceMap) {\n    for (Iterator\u003cVar\u003e it \u003d t.getScope().getVars(); it.hasNext(); ) {\n        Var v \u003d it.next();\n        ReferenceCollection referenceInfo \u003d referenceMap.get(v);\n        if (referenceInfo \u003d\u003d null || isVarInlineForbidden(v) || staleVars.contains(v)) {\n            continue;\n        } else if (isInlineableDeclaredConstant(v, referenceInfo)) {\n            Reference init \u003d referenceInfo.getInitializingReferenceForConstants();\n            Node value \u003d init.getAssignedValue();\n            inlineDeclaredConstant(v, value, referenceInfo.references);\n            staleVars.add(v);\n        } else if (mode \u003d\u003d Mode.CONSTANTS_ONLY) {\n            continue;\n        } else {\n            inlineNonConstants(v, referenceInfo);\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/InlineVariables.java",
      "functionStartLine": 195,
      "functionName": "doInlinesForScope",
      "functionAnnotation": "",
      "functionDoc": "For all variables in this scope, see if they are only used once.\nIf it looks safe to do so, inline them.\n",
      "diff": "@@ -1,18 +1,18 @@\n private void doInlinesForScope(NodeTraversal t, Map\u003cVar, ReferenceCollection\u003e referenceMap) {\n     for (Iterator\u003cVar\u003e it \u003d t.getScope().getVars(); it.hasNext(); ) {\n         Var v \u003d it.next();\n         ReferenceCollection referenceInfo \u003d referenceMap.get(v);\n         if (referenceInfo \u003d\u003d null || isVarInlineForbidden(v) || staleVars.contains(v)) {\n             continue;\n         } else if (isInlineableDeclaredConstant(v, referenceInfo)) {\n             Reference init \u003d referenceInfo.getInitializingReferenceForConstants();\n             Node value \u003d init.getAssignedValue();\n             inlineDeclaredConstant(v, value, referenceInfo.references);\n             staleVars.add(v);\n-        } else if (onlyConstants) {\n+        } else if (mode \u003d\u003d Mode.CONSTANTS_ONLY) {\n             continue;\n         } else {\n             inlineNonConstants(v, referenceInfo);\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "78995bf9e88599055a8c4165d89c09dc92a44b30": {
      "type": "Ybodychange",
      "commitMessage": "Fix synthesis of vars in DEFAULT mode.\nBetter variable inlining\nBetter function inlining\nAssorted bug fixes\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@6 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/10/09, 11:16 AM",
      "commitName": "78995bf9e88599055a8c4165d89c09dc92a44b30",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/6/09, 5:24 PM",
      "commitNameOld": "0b7eccf2fd3a9293d7b513fbb766d7bc06abd7e0",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 3.74,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private void doInlinesForScope(NodeTraversal t, Map\u003cVar, ReferenceCollection\u003e referenceMap) {\n    for (Iterator\u003cVar\u003e it \u003d t.getScope().getVars(); it.hasNext(); ) {\n        Var v \u003d it.next();\n        ReferenceCollection referenceInfo \u003d referenceMap.get(v);\n        if (referenceInfo \u003d\u003d null || isVarInlineForbidden(v) || staleVars.contains(v)) {\n            continue;\n        } else if (isInlineableDeclaredConstant(v, referenceInfo)) {\n            Reference init \u003d referenceInfo.getInitializingReferenceForConstants();\n            Node value \u003d init.getAssignedValue();\n            inlineDeclaredConstant(v, value, referenceInfo.references);\n            staleVars.add(v);\n        } else if (onlyConstants) {\n            continue;\n        } else {\n            inlineNonConstants(v, referenceInfo);\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/InlineVariables.java",
      "functionStartLine": 166,
      "functionName": "doInlinesForScope",
      "functionAnnotation": "",
      "functionDoc": "For all variables in this scope, see if they are only used once.\nIf it looks safe to do so, inline them.\n",
      "diff": "@@ -1,16 +1,18 @@\n private void doInlinesForScope(NodeTraversal t, Map\u003cVar, ReferenceCollection\u003e referenceMap) {\n     for (Iterator\u003cVar\u003e it \u003d t.getScope().getVars(); it.hasNext(); ) {\n         Var v \u003d it.next();\n         ReferenceCollection referenceInfo \u003d referenceMap.get(v);\n         if (referenceInfo \u003d\u003d null || isVarInlineForbidden(v) || staleVars.contains(v)) {\n             continue;\n-        } else if (isInlineableDeclaredConstant(v, referenceInfo.references)) {\n-            inlineDeclaredConstant(v, referenceInfo.references);\n+        } else if (isInlineableDeclaredConstant(v, referenceInfo)) {\n+            Reference init \u003d referenceInfo.getInitializingReferenceForConstants();\n+            Node value \u003d init.getAssignedValue();\n+            inlineDeclaredConstant(v, value, referenceInfo.references);\n             staleVars.add(v);\n         } else if (onlyConstants) {\n             continue;\n         } else {\n-            inlineNonConstants(t.getScope(), v, referenceInfo);\n+            inlineNonConstants(v, referenceInfo);\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,16 @@\n+private void doInlinesForScope(NodeTraversal t, Map\u003cVar, ReferenceCollection\u003e referenceMap) {\n+    for (Iterator\u003cVar\u003e it \u003d t.getScope().getVars(); it.hasNext(); ) {\n+        Var v \u003d it.next();\n+        ReferenceCollection referenceInfo \u003d referenceMap.get(v);\n+        if (referenceInfo \u003d\u003d null || isVarInlineForbidden(v) || staleVars.contains(v)) {\n+            continue;\n+        } else if (isInlineableDeclaredConstant(v, referenceInfo.references)) {\n+            inlineDeclaredConstant(v, referenceInfo.references);\n+            staleVars.add(v);\n+        } else if (onlyConstants) {\n+            continue;\n+        } else {\n+            inlineNonConstants(t.getScope(), v, referenceInfo);\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void doInlinesForScope(NodeTraversal t, Map\u003cVar, ReferenceCollection\u003e referenceMap) {\n    for (Iterator\u003cVar\u003e it \u003d t.getScope().getVars(); it.hasNext(); ) {\n        Var v \u003d it.next();\n        ReferenceCollection referenceInfo \u003d referenceMap.get(v);\n        if (referenceInfo \u003d\u003d null || isVarInlineForbidden(v) || staleVars.contains(v)) {\n            continue;\n        } else if (isInlineableDeclaredConstant(v, referenceInfo.references)) {\n            inlineDeclaredConstant(v, referenceInfo.references);\n            staleVars.add(v);\n        } else if (onlyConstants) {\n            continue;\n        } else {\n            inlineNonConstants(t.getScope(), v, referenceInfo);\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/InlineVariables.java",
      "functionStartLine": 197,
      "functionName": "doInlinesForScope",
      "functionAnnotation": "",
      "functionDoc": "For all variables in this scope, see if they are only used once.\nIf it looks safe to do so, inline them.\n"
    }
  }
}