{
  "origin": "codeshovel",
  "repositoryName": "Closure-121b",
  "repositoryPath": "/tmp/Closure-121b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CodePrinter.java",
  "functionName": "toSource",
  "functionId": "toSource___root-Node__outputFormat-Format__options-CompilerOptions__registry-JSTypeRegistry__sourceMap-SourceMap__tagAsStrict-boolean",
  "sourceFilePath": "src/com/google/javascript/jscomp/CodePrinter.java",
  "functionAnnotation": "",
  "functionDoc": "Converts a tree to JS code\n",
  "functionStartLine": 654,
  "functionEndLine": 691,
  "numCommitsSeen": 157,
  "timeTaken": 3211,
  "changeHistory": [
    "e97b7c780615e11ebe76e034b44ef0ef28a5520a",
    "6c51485e898eee8140bf05cbda29427cdc8bcc24",
    "81ecaa689f9e33d3d0130d5991cbb4ed18ba6739",
    "70a5626922ea7e8c98747e22b6986638ba38fadc",
    "04ba01ff0c7a9a9c64205303a9dcca346da501a5",
    "524c758183be741ff1519acfa8a4bf714dd2c4cd",
    "cd40201a2437da125ac492b21f13c8ad200b96bd",
    "3137ff7d3272b649aebf80c101274dc3c18af5b8",
    "55e1258ec9f491ad2f7e4d47c7e581c687c82d0c",
    "114620510958121ebec3dd8d037d70571fb7da20",
    "4d09ce45270187fa65a891e56081960a0ae449e5",
    "de13c3313c05f4449c50c560324389d6905a214d",
    "168bc14ff5e9e664863c3b1146f2a5b7a30ffb42",
    "847b296c23a63aa0a0b38cc3e63883e1688288e3",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "e97b7c780615e11ebe76e034b44ef0ef28a5520a": "Ymultichange(Yparameterchange,Ybodychange)",
    "6c51485e898eee8140bf05cbda29427cdc8bcc24": "Ybodychange",
    "81ecaa689f9e33d3d0130d5991cbb4ed18ba6739": "Ymultichange(Yparameterchange,Ybodychange)",
    "70a5626922ea7e8c98747e22b6986638ba38fadc": "Ydocchange",
    "04ba01ff0c7a9a9c64205303a9dcca346da501a5": "Ymultichange(Yparameterchange,Ybodychange)",
    "524c758183be741ff1519acfa8a4bf714dd2c4cd": "Ymultichange(Yparameterchange,Ybodychange)",
    "cd40201a2437da125ac492b21f13c8ad200b96bd": "Ybodychange",
    "3137ff7d3272b649aebf80c101274dc3c18af5b8": "Ybodychange",
    "55e1258ec9f491ad2f7e4d47c7e581c687c82d0c": "Ybodychange",
    "114620510958121ebec3dd8d037d70571fb7da20": "Ymultichange(Yparameterchange,Ybodychange)",
    "4d09ce45270187fa65a891e56081960a0ae449e5": "Ybodychange",
    "de13c3313c05f4449c50c560324389d6905a214d": "Ymultichange(Yparameterchange,Ybodychange)",
    "168bc14ff5e9e664863c3b1146f2a5b7a30ffb42": "Ymultichange(Yparameterchange,Ybodychange)",
    "847b296c23a63aa0a0b38cc3e63883e1688288e3": "Ymultichange(Yparameterchange,Ybodychange)",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e97b7c780615e11ebe76e034b44ef0ef28a5520a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "\nAllow generated externs to use \u0027?\u0027.\n\nR\u003dnicksantos\nDELTA\u003d219 (112 added, 49 deleted, 58 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d6144\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2468 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/15/13, 5:09 PM",
      "commitName": "e97b7c780615e11ebe76e034b44ef0ef28a5520a",
      "commitAuthor": "johnlenz@google.com",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "\nAllow generated externs to use \u0027?\u0027.\n\nR\u003dnicksantos\nDELTA\u003d219 (112 added, 49 deleted, 58 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d6144\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2468 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/15/13, 5:09 PM",
          "commitName": "e97b7c780615e11ebe76e034b44ef0ef28a5520a",
          "commitAuthor": "johnlenz@google.com",
          "commitDateOld": "12/7/12, 11:39 AM",
          "commitNameOld": "6c51485e898eee8140bf05cbda29427cdc8bcc24",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 39.23,
          "commitsBetweenForRepo": 91,
          "commitsBetweenForFile": 1,
          "actualSource": "private static String toSource(Node root, Format outputFormat, CompilerOptions options, JSTypeRegistry registry, SourceMap sourceMap, boolean tagAsStrict) {\n    Preconditions.checkState(options.sourceMapDetailLevel !\u003d null);\n    boolean createSourceMap \u003d (sourceMap !\u003d null);\n    MappedCodePrinter mcp \u003d outputFormat \u003d\u003d Format.COMPACT ? new CompactCodePrinter(options.lineBreak, options.preferLineBreakAtEndOfFile, options.lineLengthThreshold, createSourceMap, options.sourceMapDetailLevel) : new PrettyCodePrinter(options.lineLengthThreshold, createSourceMap, options.sourceMapDetailLevel);\n    CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(mcp, options, registry) : new CodeGenerator(mcp, options);\n    if (tagAsStrict) {\n        cg.tagAsStrict();\n    }\n    cg.add(root);\n    mcp.endFile();\n    String code \u003d mcp.getCode();\n    if (createSourceMap) {\n        mcp.generateSourceMap(sourceMap);\n    }\n    return code;\n}",
          "path": "src/com/google/javascript/jscomp/CodePrinter.java",
          "functionStartLine": 654,
          "functionName": "toSource",
          "functionAnnotation": "",
          "functionDoc": "Converts a tree to JS code\n",
          "diff": "@@ -1,16 +1,16 @@\n-private static String toSource(Node root, Format outputFormat, CompilerOptions options, SourceMap sourceMap, boolean tagAsStrict) {\n+private static String toSource(Node root, Format outputFormat, CompilerOptions options, JSTypeRegistry registry, SourceMap sourceMap, boolean tagAsStrict) {\n     Preconditions.checkState(options.sourceMapDetailLevel !\u003d null);\n     boolean createSourceMap \u003d (sourceMap !\u003d null);\n     MappedCodePrinter mcp \u003d outputFormat \u003d\u003d Format.COMPACT ? new CompactCodePrinter(options.lineBreak, options.preferLineBreakAtEndOfFile, options.lineLengthThreshold, createSourceMap, options.sourceMapDetailLevel) : new PrettyCodePrinter(options.lineLengthThreshold, createSourceMap, options.sourceMapDetailLevel);\n-    CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(mcp, options) : new CodeGenerator(mcp, options);\n+    CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(mcp, options, registry) : new CodeGenerator(mcp, options);\n     if (tagAsStrict) {\n         cg.tagAsStrict();\n     }\n     cg.add(root);\n     mcp.endFile();\n     String code \u003d mcp.getCode();\n     if (createSourceMap) {\n         mcp.generateSourceMap(sourceMap);\n     }\n     return code;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[root-Node, outputFormat-Format, options-CompilerOptions, sourceMap-SourceMap, tagAsStrict-boolean]",
            "newValue": "[root-Node, outputFormat-Format, options-CompilerOptions, registry-JSTypeRegistry, sourceMap-SourceMap, tagAsStrict-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nAllow generated externs to use \u0027?\u0027.\n\nR\u003dnicksantos\nDELTA\u003d219 (112 added, 49 deleted, 58 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d6144\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2468 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/15/13, 5:09 PM",
          "commitName": "e97b7c780615e11ebe76e034b44ef0ef28a5520a",
          "commitAuthor": "johnlenz@google.com",
          "commitDateOld": "12/7/12, 11:39 AM",
          "commitNameOld": "6c51485e898eee8140bf05cbda29427cdc8bcc24",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 39.23,
          "commitsBetweenForRepo": 91,
          "commitsBetweenForFile": 1,
          "actualSource": "private static String toSource(Node root, Format outputFormat, CompilerOptions options, JSTypeRegistry registry, SourceMap sourceMap, boolean tagAsStrict) {\n    Preconditions.checkState(options.sourceMapDetailLevel !\u003d null);\n    boolean createSourceMap \u003d (sourceMap !\u003d null);\n    MappedCodePrinter mcp \u003d outputFormat \u003d\u003d Format.COMPACT ? new CompactCodePrinter(options.lineBreak, options.preferLineBreakAtEndOfFile, options.lineLengthThreshold, createSourceMap, options.sourceMapDetailLevel) : new PrettyCodePrinter(options.lineLengthThreshold, createSourceMap, options.sourceMapDetailLevel);\n    CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(mcp, options, registry) : new CodeGenerator(mcp, options);\n    if (tagAsStrict) {\n        cg.tagAsStrict();\n    }\n    cg.add(root);\n    mcp.endFile();\n    String code \u003d mcp.getCode();\n    if (createSourceMap) {\n        mcp.generateSourceMap(sourceMap);\n    }\n    return code;\n}",
          "path": "src/com/google/javascript/jscomp/CodePrinter.java",
          "functionStartLine": 654,
          "functionName": "toSource",
          "functionAnnotation": "",
          "functionDoc": "Converts a tree to JS code\n",
          "diff": "@@ -1,16 +1,16 @@\n-private static String toSource(Node root, Format outputFormat, CompilerOptions options, SourceMap sourceMap, boolean tagAsStrict) {\n+private static String toSource(Node root, Format outputFormat, CompilerOptions options, JSTypeRegistry registry, SourceMap sourceMap, boolean tagAsStrict) {\n     Preconditions.checkState(options.sourceMapDetailLevel !\u003d null);\n     boolean createSourceMap \u003d (sourceMap !\u003d null);\n     MappedCodePrinter mcp \u003d outputFormat \u003d\u003d Format.COMPACT ? new CompactCodePrinter(options.lineBreak, options.preferLineBreakAtEndOfFile, options.lineLengthThreshold, createSourceMap, options.sourceMapDetailLevel) : new PrettyCodePrinter(options.lineLengthThreshold, createSourceMap, options.sourceMapDetailLevel);\n-    CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(mcp, options) : new CodeGenerator(mcp, options);\n+    CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(mcp, options, registry) : new CodeGenerator(mcp, options);\n     if (tagAsStrict) {\n         cg.tagAsStrict();\n     }\n     cg.add(root);\n     mcp.endFile();\n     String code \u003d mcp.getCode();\n     if (createSourceMap) {\n         mcp.generateSourceMap(sourceMap);\n     }\n     return code;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "6c51485e898eee8140bf05cbda29427cdc8bcc24": {
      "type": "Ybodychange",
      "commitMessage": "\nAdd an explicit \"trusted strings\" mode.\n\nR\u003djohnlenz\nDELTA\u003d188  (143 added, 19 deleted, 26 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5931\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2372 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/7/12, 11:39 AM",
      "commitName": "6c51485e898eee8140bf05cbda29427cdc8bcc24",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "10/24/12, 1:44 PM",
      "commitNameOld": "81ecaa689f9e33d3d0130d5991cbb4ed18ba6739",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 43.95,
      "commitsBetweenForRepo": 85,
      "commitsBetweenForFile": 1,
      "actualSource": "private static String toSource(Node root, Format outputFormat, CompilerOptions options, SourceMap sourceMap, boolean tagAsStrict) {\n    Preconditions.checkState(options.sourceMapDetailLevel !\u003d null);\n    boolean createSourceMap \u003d (sourceMap !\u003d null);\n    MappedCodePrinter mcp \u003d outputFormat \u003d\u003d Format.COMPACT ? new CompactCodePrinter(options.lineBreak, options.preferLineBreakAtEndOfFile, options.lineLengthThreshold, createSourceMap, options.sourceMapDetailLevel) : new PrettyCodePrinter(options.lineLengthThreshold, createSourceMap, options.sourceMapDetailLevel);\n    CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(mcp, options) : new CodeGenerator(mcp, options);\n    if (tagAsStrict) {\n        cg.tagAsStrict();\n    }\n    cg.add(root);\n    mcp.endFile();\n    String code \u003d mcp.getCode();\n    if (createSourceMap) {\n        mcp.generateSourceMap(sourceMap);\n    }\n    return code;\n}",
      "path": "src/com/google/javascript/jscomp/CodePrinter.java",
      "functionStartLine": 646,
      "functionName": "toSource",
      "functionAnnotation": "",
      "functionDoc": "Converts a tree to JS code\n",
      "diff": "@@ -1,17 +1,16 @@\n private static String toSource(Node root, Format outputFormat, CompilerOptions options, SourceMap sourceMap, boolean tagAsStrict) {\n     Preconditions.checkState(options.sourceMapDetailLevel !\u003d null);\n     boolean createSourceMap \u003d (sourceMap !\u003d null);\n-    Charset outputCharset \u003d options.outputCharset \u003d\u003d null ? null : Charset.forName(options.outputCharset);\n     MappedCodePrinter mcp \u003d outputFormat \u003d\u003d Format.COMPACT ? new CompactCodePrinter(options.lineBreak, options.preferLineBreakAtEndOfFile, options.lineLengthThreshold, createSourceMap, options.sourceMapDetailLevel) : new PrettyCodePrinter(options.lineLengthThreshold, createSourceMap, options.sourceMapDetailLevel);\n-    CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(mcp, outputCharset) : new CodeGenerator(mcp, outputCharset, options.preferSingleQuotes);\n+    CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(mcp, options) : new CodeGenerator(mcp, options);\n     if (tagAsStrict) {\n         cg.tagAsStrict();\n     }\n     cg.add(root);\n     mcp.endFile();\n     String code \u003d mcp.getCode();\n     if (createSourceMap) {\n         mcp.generateSourceMap(sourceMap);\n     }\n     return code;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "81ecaa689f9e33d3d0130d5991cbb4ed18ba6739": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "\nMake single quotes a formatting option\nI also took this opportunity to clean up the code printer\noptions, because they were getting to be unmaintainable.\n\nR\u003djohnlenz\nDELTA\u003d174  (69 added, 71 deleted, 34 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5697\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2277 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/24/12, 1:44 PM",
      "commitName": "81ecaa689f9e33d3d0130d5991cbb4ed18ba6739",
      "commitAuthor": "nicksantos@google.com",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "\nMake single quotes a formatting option\nI also took this opportunity to clean up the code printer\noptions, because they were getting to be unmaintainable.\n\nR\u003djohnlenz\nDELTA\u003d174  (69 added, 71 deleted, 34 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5697\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2277 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "10/24/12, 1:44 PM",
          "commitName": "81ecaa689f9e33d3d0130d5991cbb4ed18ba6739",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "5/18/12, 11:09 AM",
          "commitNameOld": "70a5626922ea7e8c98747e22b6986638ba38fadc",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 159.11,
          "commitsBetweenForRepo": 281,
          "commitsBetweenForFile": 1,
          "actualSource": "private static String toSource(Node root, Format outputFormat, CompilerOptions options, SourceMap sourceMap, boolean tagAsStrict) {\n    Preconditions.checkState(options.sourceMapDetailLevel !\u003d null);\n    boolean createSourceMap \u003d (sourceMap !\u003d null);\n    Charset outputCharset \u003d options.outputCharset \u003d\u003d null ? null : Charset.forName(options.outputCharset);\n    MappedCodePrinter mcp \u003d outputFormat \u003d\u003d Format.COMPACT ? new CompactCodePrinter(options.lineBreak, options.preferLineBreakAtEndOfFile, options.lineLengthThreshold, createSourceMap, options.sourceMapDetailLevel) : new PrettyCodePrinter(options.lineLengthThreshold, createSourceMap, options.sourceMapDetailLevel);\n    CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(mcp, outputCharset) : new CodeGenerator(mcp, outputCharset, options.preferSingleQuotes);\n    if (tagAsStrict) {\n        cg.tagAsStrict();\n    }\n    cg.add(root);\n    mcp.endFile();\n    String code \u003d mcp.getCode();\n    if (createSourceMap) {\n        mcp.generateSourceMap(sourceMap);\n    }\n    return code;\n}",
          "path": "src/com/google/javascript/jscomp/CodePrinter.java",
          "functionStartLine": 647,
          "functionName": "toSource",
          "functionAnnotation": "",
          "functionDoc": "Converts a tree to JS code\n",
          "diff": "@@ -1,16 +1,17 @@\n-private static String toSource(Node root, Format outputFormat, boolean lineBreak, boolean preferEndOfFileBreak, int lineLengthThreshold, SourceMap sourceMap, SourceMap.DetailLevel sourceMapDetailLevel, Charset outputCharset, boolean tagAsStrict) {\n-    Preconditions.checkState(sourceMapDetailLevel !\u003d null);\n+private static String toSource(Node root, Format outputFormat, CompilerOptions options, SourceMap sourceMap, boolean tagAsStrict) {\n+    Preconditions.checkState(options.sourceMapDetailLevel !\u003d null);\n     boolean createSourceMap \u003d (sourceMap !\u003d null);\n-    MappedCodePrinter mcp \u003d outputFormat \u003d\u003d Format.COMPACT ? new CompactCodePrinter(lineBreak, preferEndOfFileBreak, lineLengthThreshold, createSourceMap, sourceMapDetailLevel) : new PrettyCodePrinter(lineLengthThreshold, createSourceMap, sourceMapDetailLevel);\n-    CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(mcp, outputCharset) : new CodeGenerator(mcp, outputCharset);\n+    Charset outputCharset \u003d options.outputCharset \u003d\u003d null ? null : Charset.forName(options.outputCharset);\n+    MappedCodePrinter mcp \u003d outputFormat \u003d\u003d Format.COMPACT ? new CompactCodePrinter(options.lineBreak, options.preferLineBreakAtEndOfFile, options.lineLengthThreshold, createSourceMap, options.sourceMapDetailLevel) : new PrettyCodePrinter(options.lineLengthThreshold, createSourceMap, options.sourceMapDetailLevel);\n+    CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(mcp, outputCharset) : new CodeGenerator(mcp, outputCharset, options.preferSingleQuotes);\n     if (tagAsStrict) {\n         cg.tagAsStrict();\n     }\n     cg.add(root);\n     mcp.endFile();\n     String code \u003d mcp.getCode();\n     if (createSourceMap) {\n         mcp.generateSourceMap(sourceMap);\n     }\n     return code;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[root-Node, outputFormat-Format, lineBreak-boolean, preferEndOfFileBreak-boolean, lineLengthThreshold-int, sourceMap-SourceMap, sourceMapDetailLevel-SourceMap.DetailLevel, outputCharset-Charset, tagAsStrict-boolean]",
            "newValue": "[root-Node, outputFormat-Format, options-CompilerOptions, sourceMap-SourceMap, tagAsStrict-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nMake single quotes a formatting option\nI also took this opportunity to clean up the code printer\noptions, because they were getting to be unmaintainable.\n\nR\u003djohnlenz\nDELTA\u003d174  (69 added, 71 deleted, 34 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5697\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2277 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "10/24/12, 1:44 PM",
          "commitName": "81ecaa689f9e33d3d0130d5991cbb4ed18ba6739",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "5/18/12, 11:09 AM",
          "commitNameOld": "70a5626922ea7e8c98747e22b6986638ba38fadc",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 159.11,
          "commitsBetweenForRepo": 281,
          "commitsBetweenForFile": 1,
          "actualSource": "private static String toSource(Node root, Format outputFormat, CompilerOptions options, SourceMap sourceMap, boolean tagAsStrict) {\n    Preconditions.checkState(options.sourceMapDetailLevel !\u003d null);\n    boolean createSourceMap \u003d (sourceMap !\u003d null);\n    Charset outputCharset \u003d options.outputCharset \u003d\u003d null ? null : Charset.forName(options.outputCharset);\n    MappedCodePrinter mcp \u003d outputFormat \u003d\u003d Format.COMPACT ? new CompactCodePrinter(options.lineBreak, options.preferLineBreakAtEndOfFile, options.lineLengthThreshold, createSourceMap, options.sourceMapDetailLevel) : new PrettyCodePrinter(options.lineLengthThreshold, createSourceMap, options.sourceMapDetailLevel);\n    CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(mcp, outputCharset) : new CodeGenerator(mcp, outputCharset, options.preferSingleQuotes);\n    if (tagAsStrict) {\n        cg.tagAsStrict();\n    }\n    cg.add(root);\n    mcp.endFile();\n    String code \u003d mcp.getCode();\n    if (createSourceMap) {\n        mcp.generateSourceMap(sourceMap);\n    }\n    return code;\n}",
          "path": "src/com/google/javascript/jscomp/CodePrinter.java",
          "functionStartLine": 647,
          "functionName": "toSource",
          "functionAnnotation": "",
          "functionDoc": "Converts a tree to JS code\n",
          "diff": "@@ -1,16 +1,17 @@\n-private static String toSource(Node root, Format outputFormat, boolean lineBreak, boolean preferEndOfFileBreak, int lineLengthThreshold, SourceMap sourceMap, SourceMap.DetailLevel sourceMapDetailLevel, Charset outputCharset, boolean tagAsStrict) {\n-    Preconditions.checkState(sourceMapDetailLevel !\u003d null);\n+private static String toSource(Node root, Format outputFormat, CompilerOptions options, SourceMap sourceMap, boolean tagAsStrict) {\n+    Preconditions.checkState(options.sourceMapDetailLevel !\u003d null);\n     boolean createSourceMap \u003d (sourceMap !\u003d null);\n-    MappedCodePrinter mcp \u003d outputFormat \u003d\u003d Format.COMPACT ? new CompactCodePrinter(lineBreak, preferEndOfFileBreak, lineLengthThreshold, createSourceMap, sourceMapDetailLevel) : new PrettyCodePrinter(lineLengthThreshold, createSourceMap, sourceMapDetailLevel);\n-    CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(mcp, outputCharset) : new CodeGenerator(mcp, outputCharset);\n+    Charset outputCharset \u003d options.outputCharset \u003d\u003d null ? null : Charset.forName(options.outputCharset);\n+    MappedCodePrinter mcp \u003d outputFormat \u003d\u003d Format.COMPACT ? new CompactCodePrinter(options.lineBreak, options.preferLineBreakAtEndOfFile, options.lineLengthThreshold, createSourceMap, options.sourceMapDetailLevel) : new PrettyCodePrinter(options.lineLengthThreshold, createSourceMap, options.sourceMapDetailLevel);\n+    CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(mcp, outputCharset) : new CodeGenerator(mcp, outputCharset, options.preferSingleQuotes);\n     if (tagAsStrict) {\n         cg.tagAsStrict();\n     }\n     cg.add(root);\n     mcp.endFile();\n     String code \u003d mcp.getCode();\n     if (createSourceMap) {\n         mcp.generateSourceMap(sourceMap);\n     }\n     return code;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "70a5626922ea7e8c98747e22b6986638ba38fadc": {
      "type": "Ydocchange",
      "commitMessage": "\nFix various typos, spelling and grammar errors.\nFixes issue 734. \nContributed by Robert Gust Bardon\n\nR\u003dnicksantos\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d4827\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1979 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/18/12, 11:09 AM",
      "commitName": "70a5626922ea7e8c98747e22b6986638ba38fadc",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "3/27/12, 8:38 AM",
      "commitNameOld": "87b154f89cba3c67045cd7a783b79231d0630a4c",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 52.1,
      "commitsBetweenForRepo": 114,
      "commitsBetweenForFile": 1,
      "actualSource": "private static String toSource(Node root, Format outputFormat, boolean lineBreak, boolean preferEndOfFileBreak, int lineLengthThreshold, SourceMap sourceMap, SourceMap.DetailLevel sourceMapDetailLevel, Charset outputCharset, boolean tagAsStrict) {\n    Preconditions.checkState(sourceMapDetailLevel !\u003d null);\n    boolean createSourceMap \u003d (sourceMap !\u003d null);\n    MappedCodePrinter mcp \u003d outputFormat \u003d\u003d Format.COMPACT ? new CompactCodePrinter(lineBreak, preferEndOfFileBreak, lineLengthThreshold, createSourceMap, sourceMapDetailLevel) : new PrettyCodePrinter(lineLengthThreshold, createSourceMap, sourceMapDetailLevel);\n    CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(mcp, outputCharset) : new CodeGenerator(mcp, outputCharset);\n    if (tagAsStrict) {\n        cg.tagAsStrict();\n    }\n    cg.add(root);\n    mcp.endFile();\n    String code \u003d mcp.getCode();\n    if (createSourceMap) {\n        mcp.generateSourceMap(sourceMap);\n    }\n    return code;\n}",
      "path": "src/com/google/javascript/jscomp/CodePrinter.java",
      "functionStartLine": 684,
      "functionName": "toSource",
      "functionAnnotation": "",
      "functionDoc": "Converts a tree to JS code\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Converts a tree to js code\n",
        "newValue": "Converts a tree to JS code\n"
      }
    },
    "04ba01ff0c7a9a9c64205303a9dcca346da501a5": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "\nAdd support for prefer line break at end of file. This allows us to insert code\nbetween files without affecting the source maps or deobfuscation.\n\nThis solution shifts an existing line break if it is near eof, which may result\nin a line longer than the normal line length advisory limit. The only\nalternative to that is to miss many eofs, which can impact the ability to place\ninterstitial code, or to place a break at the end of every file, which leads to\na hugely excessive number of breaks.\n\nWe could probably do better if we tracked line length across file boundaries\nwhich we currently do not.\n\nR\u003dacleung,johnlenz\nDELTA\u003d149  (128 added, 0 deleted, 21 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d4172\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1762 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/6/12, 4:13 PM",
      "commitName": "04ba01ff0c7a9a9c64205303a9dcca346da501a5",
      "commitAuthor": "mwr@google.com",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "\nAdd support for prefer line break at end of file. This allows us to insert code\nbetween files without affecting the source maps or deobfuscation.\n\nThis solution shifts an existing line break if it is near eof, which may result\nin a line longer than the normal line length advisory limit. The only\nalternative to that is to miss many eofs, which can impact the ability to place\ninterstitial code, or to place a break at the end of every file, which leads to\na hugely excessive number of breaks.\n\nWe could probably do better if we tracked line length across file boundaries\nwhich we currently do not.\n\nR\u003dacleung,johnlenz\nDELTA\u003d149  (128 added, 0 deleted, 21 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d4172\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1762 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "2/6/12, 4:13 PM",
          "commitName": "04ba01ff0c7a9a9c64205303a9dcca346da501a5",
          "commitAuthor": "mwr@google.com",
          "commitDateOld": "11/10/11, 8:36 AM",
          "commitNameOld": "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 88.32,
          "commitsBetweenForRepo": 153,
          "commitsBetweenForFile": 1,
          "actualSource": "private static String toSource(Node root, Format outputFormat, boolean lineBreak, boolean preferEndOfFileBreak, int lineLengthThreshold, SourceMap sourceMap, SourceMap.DetailLevel sourceMapDetailLevel, Charset outputCharset, boolean tagAsStrict) {\n    Preconditions.checkState(sourceMapDetailLevel !\u003d null);\n    boolean createSourceMap \u003d (sourceMap !\u003d null);\n    MappedCodePrinter mcp \u003d outputFormat \u003d\u003d Format.COMPACT ? new CompactCodePrinter(lineBreak, preferEndOfFileBreak, lineLengthThreshold, createSourceMap, sourceMapDetailLevel) : new PrettyCodePrinter(lineLengthThreshold, createSourceMap, sourceMapDetailLevel);\n    CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(mcp, outputCharset) : new CodeGenerator(mcp, outputCharset);\n    if (tagAsStrict) {\n        cg.tagAsStrict();\n    }\n    cg.add(root);\n    mcp.endFile();\n    String code \u003d mcp.getCode();\n    if (createSourceMap) {\n        mcp.generateSourceMap(sourceMap);\n    }\n    return code;\n}",
          "path": "src/com/google/javascript/jscomp/CodePrinter.java",
          "functionStartLine": 685,
          "functionName": "toSource",
          "functionAnnotation": "",
          "functionDoc": "Converts a tree to js code\n",
          "diff": "@@ -1,16 +1,16 @@\n-private static String toSource(Node root, Format outputFormat, boolean lineBreak, int lineLengthThreshold, SourceMap sourceMap, SourceMap.DetailLevel sourceMapDetailLevel, Charset outputCharset, boolean tagAsStrict) {\n+private static String toSource(Node root, Format outputFormat, boolean lineBreak, boolean preferEndOfFileBreak, int lineLengthThreshold, SourceMap sourceMap, SourceMap.DetailLevel sourceMapDetailLevel, Charset outputCharset, boolean tagAsStrict) {\n     Preconditions.checkState(sourceMapDetailLevel !\u003d null);\n     boolean createSourceMap \u003d (sourceMap !\u003d null);\n-    MappedCodePrinter mcp \u003d outputFormat \u003d\u003d Format.COMPACT ? new CompactCodePrinter(lineBreak, lineLengthThreshold, createSourceMap, sourceMapDetailLevel) : new PrettyCodePrinter(lineLengthThreshold, createSourceMap, sourceMapDetailLevel);\n+    MappedCodePrinter mcp \u003d outputFormat \u003d\u003d Format.COMPACT ? new CompactCodePrinter(lineBreak, preferEndOfFileBreak, lineLengthThreshold, createSourceMap, sourceMapDetailLevel) : new PrettyCodePrinter(lineLengthThreshold, createSourceMap, sourceMapDetailLevel);\n     CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(mcp, outputCharset) : new CodeGenerator(mcp, outputCharset);\n     if (tagAsStrict) {\n         cg.tagAsStrict();\n     }\n     cg.add(root);\n     mcp.endFile();\n     String code \u003d mcp.getCode();\n     if (createSourceMap) {\n         mcp.generateSourceMap(sourceMap);\n     }\n     return code;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[root-Node, outputFormat-Format, lineBreak-boolean, lineLengthThreshold-int, sourceMap-SourceMap, sourceMapDetailLevel-SourceMap.DetailLevel, outputCharset-Charset, tagAsStrict-boolean]",
            "newValue": "[root-Node, outputFormat-Format, lineBreak-boolean, preferEndOfFileBreak-boolean, lineLengthThreshold-int, sourceMap-SourceMap, sourceMapDetailLevel-SourceMap.DetailLevel, outputCharset-Charset, tagAsStrict-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nAdd support for prefer line break at end of file. This allows us to insert code\nbetween files without affecting the source maps or deobfuscation.\n\nThis solution shifts an existing line break if it is near eof, which may result\nin a line longer than the normal line length advisory limit. The only\nalternative to that is to miss many eofs, which can impact the ability to place\ninterstitial code, or to place a break at the end of every file, which leads to\na hugely excessive number of breaks.\n\nWe could probably do better if we tracked line length across file boundaries\nwhich we currently do not.\n\nR\u003dacleung,johnlenz\nDELTA\u003d149  (128 added, 0 deleted, 21 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d4172\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1762 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "2/6/12, 4:13 PM",
          "commitName": "04ba01ff0c7a9a9c64205303a9dcca346da501a5",
          "commitAuthor": "mwr@google.com",
          "commitDateOld": "11/10/11, 8:36 AM",
          "commitNameOld": "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 88.32,
          "commitsBetweenForRepo": 153,
          "commitsBetweenForFile": 1,
          "actualSource": "private static String toSource(Node root, Format outputFormat, boolean lineBreak, boolean preferEndOfFileBreak, int lineLengthThreshold, SourceMap sourceMap, SourceMap.DetailLevel sourceMapDetailLevel, Charset outputCharset, boolean tagAsStrict) {\n    Preconditions.checkState(sourceMapDetailLevel !\u003d null);\n    boolean createSourceMap \u003d (sourceMap !\u003d null);\n    MappedCodePrinter mcp \u003d outputFormat \u003d\u003d Format.COMPACT ? new CompactCodePrinter(lineBreak, preferEndOfFileBreak, lineLengthThreshold, createSourceMap, sourceMapDetailLevel) : new PrettyCodePrinter(lineLengthThreshold, createSourceMap, sourceMapDetailLevel);\n    CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(mcp, outputCharset) : new CodeGenerator(mcp, outputCharset);\n    if (tagAsStrict) {\n        cg.tagAsStrict();\n    }\n    cg.add(root);\n    mcp.endFile();\n    String code \u003d mcp.getCode();\n    if (createSourceMap) {\n        mcp.generateSourceMap(sourceMap);\n    }\n    return code;\n}",
          "path": "src/com/google/javascript/jscomp/CodePrinter.java",
          "functionStartLine": 685,
          "functionName": "toSource",
          "functionAnnotation": "",
          "functionDoc": "Converts a tree to js code\n",
          "diff": "@@ -1,16 +1,16 @@\n-private static String toSource(Node root, Format outputFormat, boolean lineBreak, int lineLengthThreshold, SourceMap sourceMap, SourceMap.DetailLevel sourceMapDetailLevel, Charset outputCharset, boolean tagAsStrict) {\n+private static String toSource(Node root, Format outputFormat, boolean lineBreak, boolean preferEndOfFileBreak, int lineLengthThreshold, SourceMap sourceMap, SourceMap.DetailLevel sourceMapDetailLevel, Charset outputCharset, boolean tagAsStrict) {\n     Preconditions.checkState(sourceMapDetailLevel !\u003d null);\n     boolean createSourceMap \u003d (sourceMap !\u003d null);\n-    MappedCodePrinter mcp \u003d outputFormat \u003d\u003d Format.COMPACT ? new CompactCodePrinter(lineBreak, lineLengthThreshold, createSourceMap, sourceMapDetailLevel) : new PrettyCodePrinter(lineLengthThreshold, createSourceMap, sourceMapDetailLevel);\n+    MappedCodePrinter mcp \u003d outputFormat \u003d\u003d Format.COMPACT ? new CompactCodePrinter(lineBreak, preferEndOfFileBreak, lineLengthThreshold, createSourceMap, sourceMapDetailLevel) : new PrettyCodePrinter(lineLengthThreshold, createSourceMap, sourceMapDetailLevel);\n     CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(mcp, outputCharset) : new CodeGenerator(mcp, outputCharset);\n     if (tagAsStrict) {\n         cg.tagAsStrict();\n     }\n     cg.add(root);\n     mcp.endFile();\n     String code \u003d mcp.getCode();\n     if (createSourceMap) {\n         mcp.generateSourceMap(sourceMap);\n     }\n     return code;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "524c758183be741ff1519acfa8a4bf714dd2c4cd": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "\nIntroduce EcmaScript 5 Strict mode output\n\nR\u003dacleung\nDELTA\u003d98  (60 added, 0 deleted, 38 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d820\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@873 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/10/11, 11:48 AM",
      "commitName": "524c758183be741ff1519acfa8a4bf714dd2c4cd",
      "commitAuthor": "johnlenz@google.com",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "\nIntroduce EcmaScript 5 Strict mode output\n\nR\u003dacleung\nDELTA\u003d98  (60 added, 0 deleted, 38 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d820\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@873 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "3/10/11, 11:48 AM",
          "commitName": "524c758183be741ff1519acfa8a4bf714dd2c4cd",
          "commitAuthor": "johnlenz@google.com",
          "commitDateOld": "3/3/11, 4:39 PM",
          "commitNameOld": "063558234d35b8c29b4bfcab475277c8e6360e51",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 6.8,
          "commitsBetweenForRepo": 25,
          "commitsBetweenForFile": 1,
          "actualSource": "private static String toSource(Node root, Format outputFormat, boolean lineBreak, int lineLengthThreshold, SourceMap sourceMap, SourceMap.DetailLevel sourceMapDetailLevel, Charset outputCharset, boolean tagAsStrict) {\n    Preconditions.checkState(sourceMapDetailLevel !\u003d null);\n    boolean createSourceMap \u003d (sourceMap !\u003d null);\n    MappedCodePrinter mcp \u003d outputFormat \u003d\u003d Format.COMPACT ? new CompactCodePrinter(lineBreak, lineLengthThreshold, createSourceMap, sourceMapDetailLevel) : new PrettyCodePrinter(lineLengthThreshold, createSourceMap, sourceMapDetailLevel);\n    CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(mcp, outputCharset) : new CodeGenerator(mcp, outputCharset);\n    if (tagAsStrict) {\n        cg.tagAsStrict();\n    }\n    cg.add(root);\n    mcp.endFile();\n    String code \u003d mcp.getCode();\n    if (createSourceMap) {\n        mcp.generateSourceMap(sourceMap);\n    }\n    return code;\n}",
          "path": "src/com/google/javascript/jscomp/CodePrinter.java",
          "functionStartLine": 608,
          "functionName": "toSource",
          "functionAnnotation": "",
          "functionDoc": "Converts a tree to js code\n",
          "diff": "@@ -1,13 +1,16 @@\n-private static String toSource(Node root, Format outputFormat, boolean lineBreak, int lineLengthThreshold, SourceMap sourceMap, SourceMap.DetailLevel sourceMapDetailLevel, Charset outputCharset) {\n+private static String toSource(Node root, Format outputFormat, boolean lineBreak, int lineLengthThreshold, SourceMap sourceMap, SourceMap.DetailLevel sourceMapDetailLevel, Charset outputCharset, boolean tagAsStrict) {\n     Preconditions.checkState(sourceMapDetailLevel !\u003d null);\n     boolean createSourceMap \u003d (sourceMap !\u003d null);\n     MappedCodePrinter mcp \u003d outputFormat \u003d\u003d Format.COMPACT ? new CompactCodePrinter(lineBreak, lineLengthThreshold, createSourceMap, sourceMapDetailLevel) : new PrettyCodePrinter(lineLengthThreshold, createSourceMap, sourceMapDetailLevel);\n     CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(mcp, outputCharset) : new CodeGenerator(mcp, outputCharset);\n+    if (tagAsStrict) {\n+        cg.tagAsStrict();\n+    }\n     cg.add(root);\n     mcp.endFile();\n     String code \u003d mcp.getCode();\n     if (createSourceMap) {\n         mcp.generateSourceMap(sourceMap);\n     }\n     return code;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[root-Node, outputFormat-Format, lineBreak-boolean, lineLengthThreshold-int, sourceMap-SourceMap, sourceMapDetailLevel-SourceMap.DetailLevel, outputCharset-Charset]",
            "newValue": "[root-Node, outputFormat-Format, lineBreak-boolean, lineLengthThreshold-int, sourceMap-SourceMap, sourceMapDetailLevel-SourceMap.DetailLevel, outputCharset-Charset, tagAsStrict-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nIntroduce EcmaScript 5 Strict mode output\n\nR\u003dacleung\nDELTA\u003d98  (60 added, 0 deleted, 38 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d820\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@873 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "3/10/11, 11:48 AM",
          "commitName": "524c758183be741ff1519acfa8a4bf714dd2c4cd",
          "commitAuthor": "johnlenz@google.com",
          "commitDateOld": "3/3/11, 4:39 PM",
          "commitNameOld": "063558234d35b8c29b4bfcab475277c8e6360e51",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 6.8,
          "commitsBetweenForRepo": 25,
          "commitsBetweenForFile": 1,
          "actualSource": "private static String toSource(Node root, Format outputFormat, boolean lineBreak, int lineLengthThreshold, SourceMap sourceMap, SourceMap.DetailLevel sourceMapDetailLevel, Charset outputCharset, boolean tagAsStrict) {\n    Preconditions.checkState(sourceMapDetailLevel !\u003d null);\n    boolean createSourceMap \u003d (sourceMap !\u003d null);\n    MappedCodePrinter mcp \u003d outputFormat \u003d\u003d Format.COMPACT ? new CompactCodePrinter(lineBreak, lineLengthThreshold, createSourceMap, sourceMapDetailLevel) : new PrettyCodePrinter(lineLengthThreshold, createSourceMap, sourceMapDetailLevel);\n    CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(mcp, outputCharset) : new CodeGenerator(mcp, outputCharset);\n    if (tagAsStrict) {\n        cg.tagAsStrict();\n    }\n    cg.add(root);\n    mcp.endFile();\n    String code \u003d mcp.getCode();\n    if (createSourceMap) {\n        mcp.generateSourceMap(sourceMap);\n    }\n    return code;\n}",
          "path": "src/com/google/javascript/jscomp/CodePrinter.java",
          "functionStartLine": 608,
          "functionName": "toSource",
          "functionAnnotation": "",
          "functionDoc": "Converts a tree to js code\n",
          "diff": "@@ -1,13 +1,16 @@\n-private static String toSource(Node root, Format outputFormat, boolean lineBreak, int lineLengthThreshold, SourceMap sourceMap, SourceMap.DetailLevel sourceMapDetailLevel, Charset outputCharset) {\n+private static String toSource(Node root, Format outputFormat, boolean lineBreak, int lineLengthThreshold, SourceMap sourceMap, SourceMap.DetailLevel sourceMapDetailLevel, Charset outputCharset, boolean tagAsStrict) {\n     Preconditions.checkState(sourceMapDetailLevel !\u003d null);\n     boolean createSourceMap \u003d (sourceMap !\u003d null);\n     MappedCodePrinter mcp \u003d outputFormat \u003d\u003d Format.COMPACT ? new CompactCodePrinter(lineBreak, lineLengthThreshold, createSourceMap, sourceMapDetailLevel) : new PrettyCodePrinter(lineLengthThreshold, createSourceMap, sourceMapDetailLevel);\n     CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(mcp, outputCharset) : new CodeGenerator(mcp, outputCharset);\n+    if (tagAsStrict) {\n+        cg.tagAsStrict();\n+    }\n     cg.add(root);\n     mcp.endFile();\n     String code \u003d mcp.getCode();\n     if (createSourceMap) {\n         mcp.generateSourceMap(sourceMap);\n     }\n     return code;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "cd40201a2437da125ac492b21f13c8ad200b96bd": {
      "type": "Ybodychange",
      "commitMessage": "\npretty print in the ExternExportsPass, try #2\nMake sure the source file ends with a semi-colon and newline\nwhen pretty printed.\nChanges some of the printing that\u0027s\ndone in Compiler.jar (new since try #1)\nFixes issue 309\n\nR\u003djschorr\nDELTA\u003d87  (24 added, 12 deleted, 51 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d220\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@671 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/6/11, 5:42 PM",
      "commitName": "cd40201a2437da125ac492b21f13c8ad200b96bd",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "1/4/11, 1:31 PM",
      "commitNameOld": "3137ff7d3272b649aebf80c101274dc3c18af5b8",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 2.17,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "private static String toSource(Node root, Format outputFormat, boolean lineBreak, int lineLengthThreshold, SourceMap sourceMap, SourceMap.DetailLevel sourceMapDetailLevel, Charset outputCharset) {\n    Preconditions.checkState(sourceMapDetailLevel !\u003d null);\n    boolean createSourceMap \u003d (sourceMap !\u003d null);\n    MappedCodePrinter mcp \u003d outputFormat \u003d\u003d Format.COMPACT ? new CompactCodePrinter(lineBreak, lineLengthThreshold, createSourceMap, sourceMapDetailLevel) : new PrettyCodePrinter(lineLengthThreshold, createSourceMap, sourceMapDetailLevel);\n    CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(mcp, outputCharset) : new CodeGenerator(mcp, outputCharset);\n    cg.add(root);\n    mcp.endFile();\n    String code \u003d mcp.getCode();\n    if (createSourceMap) {\n        mcp.generateSourceMap(sourceMap);\n    }\n    return code;\n}",
      "path": "src/com/google/javascript/jscomp/CodePrinter.java",
      "functionStartLine": 596,
      "functionName": "toSource",
      "functionAnnotation": "",
      "functionDoc": "Converts a tree to js code\n",
      "diff": "@@ -1,12 +1,13 @@\n private static String toSource(Node root, Format outputFormat, boolean lineBreak, int lineLengthThreshold, SourceMap sourceMap, SourceMap.DetailLevel sourceMapDetailLevel, Charset outputCharset) {\n     Preconditions.checkState(sourceMapDetailLevel !\u003d null);\n     boolean createSourceMap \u003d (sourceMap !\u003d null);\n     MappedCodePrinter mcp \u003d outputFormat \u003d\u003d Format.COMPACT ? new CompactCodePrinter(lineBreak, lineLengthThreshold, createSourceMap, sourceMapDetailLevel) : new PrettyCodePrinter(lineLengthThreshold, createSourceMap, sourceMapDetailLevel);\n     CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(mcp, outputCharset) : new CodeGenerator(mcp, outputCharset);\n     cg.add(root);\n+    mcp.endFile();\n     String code \u003d mcp.getCode();\n     if (createSourceMap) {\n         mcp.generateSourceMap(sourceMap);\n     }\n     return code;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3137ff7d3272b649aebf80c101274dc3c18af5b8": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nbreaks gmail tests for some unknown reason.\n\n*** Original change description ***\n\npretty print in the ExternExportsPass.\nMake sure the source file ends with a semi-colon and newline\nwhen pretty printed.\n\nDELTA\u003d70  (12 added, 14 deleted, 44 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d200\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@663 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/4/11, 1:31 PM",
      "commitName": "3137ff7d3272b649aebf80c101274dc3c18af5b8",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "1/4/11, 1:04 PM",
      "commitNameOld": "55e1258ec9f491ad2f7e4d47c7e581c687c82d0c",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "private static String toSource(Node root, Format outputFormat, boolean lineBreak, int lineLengthThreshold, SourceMap sourceMap, SourceMap.DetailLevel sourceMapDetailLevel, Charset outputCharset) {\n    Preconditions.checkState(sourceMapDetailLevel !\u003d null);\n    boolean createSourceMap \u003d (sourceMap !\u003d null);\n    MappedCodePrinter mcp \u003d outputFormat \u003d\u003d Format.COMPACT ? new CompactCodePrinter(lineBreak, lineLengthThreshold, createSourceMap, sourceMapDetailLevel) : new PrettyCodePrinter(lineLengthThreshold, createSourceMap, sourceMapDetailLevel);\n    CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(mcp, outputCharset) : new CodeGenerator(mcp, outputCharset);\n    cg.add(root);\n    String code \u003d mcp.getCode();\n    if (createSourceMap) {\n        mcp.generateSourceMap(sourceMap);\n    }\n    return code;\n}",
      "path": "src/com/google/javascript/jscomp/CodePrinter.java",
      "functionStartLine": 591,
      "functionName": "toSource",
      "functionAnnotation": "",
      "functionDoc": "Converts a tree to js code\n",
      "diff": "@@ -1,13 +1,12 @@\n private static String toSource(Node root, Format outputFormat, boolean lineBreak, int lineLengthThreshold, SourceMap sourceMap, SourceMap.DetailLevel sourceMapDetailLevel, Charset outputCharset) {\n     Preconditions.checkState(sourceMapDetailLevel !\u003d null);\n     boolean createSourceMap \u003d (sourceMap !\u003d null);\n     MappedCodePrinter mcp \u003d outputFormat \u003d\u003d Format.COMPACT ? new CompactCodePrinter(lineBreak, lineLengthThreshold, createSourceMap, sourceMapDetailLevel) : new PrettyCodePrinter(lineLengthThreshold, createSourceMap, sourceMapDetailLevel);\n     CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(mcp, outputCharset) : new CodeGenerator(mcp, outputCharset);\n     cg.add(root);\n-    mcp.endFile();\n     String code \u003d mcp.getCode();\n     if (createSourceMap) {\n         mcp.generateSourceMap(sourceMap);\n     }\n     return code;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "55e1258ec9f491ad2f7e4d47c7e581c687c82d0c": {
      "type": "Ybodychange",
      "commitMessage": "\npretty print in the ExternExportsPass.\nMake sure the source file ends with a semi-colon and newline\nwhen pretty printed.\n\nR\u003djschorr\nDELTA\u003d70  (14 added, 12 deleted, 44 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d198\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@661 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/4/11, 1:04 PM",
      "commitName": "55e1258ec9f491ad2f7e4d47c7e581c687c82d0c",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "11/11/10, 9:42 PM",
      "commitNameOld": "df223efd38c514d584f00d076488ab9a02011492",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 53.64,
      "commitsBetweenForRepo": 113,
      "commitsBetweenForFile": 1,
      "actualSource": "private static String toSource(Node root, Format outputFormat, boolean lineBreak, int lineLengthThreshold, SourceMap sourceMap, SourceMap.DetailLevel sourceMapDetailLevel, Charset outputCharset) {\n    Preconditions.checkState(sourceMapDetailLevel !\u003d null);\n    boolean createSourceMap \u003d (sourceMap !\u003d null);\n    MappedCodePrinter mcp \u003d outputFormat \u003d\u003d Format.COMPACT ? new CompactCodePrinter(lineBreak, lineLengthThreshold, createSourceMap, sourceMapDetailLevel) : new PrettyCodePrinter(lineLengthThreshold, createSourceMap, sourceMapDetailLevel);\n    CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(mcp, outputCharset) : new CodeGenerator(mcp, outputCharset);\n    cg.add(root);\n    mcp.endFile();\n    String code \u003d mcp.getCode();\n    if (createSourceMap) {\n        mcp.generateSourceMap(sourceMap);\n    }\n    return code;\n}",
      "path": "src/com/google/javascript/jscomp/CodePrinter.java",
      "functionStartLine": 596,
      "functionName": "toSource",
      "functionAnnotation": "",
      "functionDoc": "Converts a tree to js code\n",
      "diff": "@@ -1,12 +1,13 @@\n private static String toSource(Node root, Format outputFormat, boolean lineBreak, int lineLengthThreshold, SourceMap sourceMap, SourceMap.DetailLevel sourceMapDetailLevel, Charset outputCharset) {\n     Preconditions.checkState(sourceMapDetailLevel !\u003d null);\n     boolean createSourceMap \u003d (sourceMap !\u003d null);\n     MappedCodePrinter mcp \u003d outputFormat \u003d\u003d Format.COMPACT ? new CompactCodePrinter(lineBreak, lineLengthThreshold, createSourceMap, sourceMapDetailLevel) : new PrettyCodePrinter(lineLengthThreshold, createSourceMap, sourceMapDetailLevel);\n     CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(mcp, outputCharset) : new CodeGenerator(mcp, outputCharset);\n     cg.add(root);\n+    mcp.endFile();\n     String code \u003d mcp.getCode();\n     if (createSourceMap) {\n         mcp.generateSourceMap(sourceMap);\n     }\n     return code;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "114620510958121ebec3dd8d037d70571fb7da20": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "\nFiltering what is presented in the source map is independent of the\nsource map format so lets default to a more limited set of nodes by\ndefault now.\n\nR\u003djschorr\nDELTA\u003d200  (170 added, 11 deleted, 19 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d85017\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@340 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/5/10, 4:13 PM",
      "commitName": "114620510958121ebec3dd8d037d70571fb7da20",
      "commitAuthor": "johnlenz@google.com",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "\nFiltering what is presented in the source map is independent of the\nsource map format so lets default to a more limited set of nodes by\ndefault now.\n\nR\u003djschorr\nDELTA\u003d200  (170 added, 11 deleted, 19 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d85017\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@340 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "8/5/10, 4:13 PM",
          "commitName": "114620510958121ebec3dd8d037d70571fb7da20",
          "commitAuthor": "johnlenz@google.com",
          "commitDateOld": "7/15/10, 1:03 PM",
          "commitNameOld": "4d09ce45270187fa65a891e56081960a0ae449e5",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 21.13,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "actualSource": "private static String toSource(Node root, Format outputFormat, boolean lineBreak, int lineLengthThreshold, SourceMap sourceMap, SourceMap.DetailLevel sourceMapDetailLevel, Charset outputCharset) {\n    Preconditions.checkState(sourceMapDetailLevel !\u003d null);\n    boolean createSourceMap \u003d (sourceMap !\u003d null);\n    MappedCodePrinter mcp \u003d outputFormat \u003d\u003d Format.COMPACT ? new CompactCodePrinter(lineBreak, lineLengthThreshold, createSourceMap, sourceMapDetailLevel) : new PrettyCodePrinter(lineLengthThreshold, createSourceMap, sourceMapDetailLevel);\n    CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(mcp, outputCharset) : new CodeGenerator(mcp, outputCharset);\n    cg.add(root);\n    String code \u003d mcp.getCode();\n    if (createSourceMap) {\n        mcp.generateSourceMap(sourceMap);\n    }\n    return code;\n}",
          "path": "src/com/google/javascript/jscomp/CodePrinter.java",
          "functionStartLine": 593,
          "functionName": "toSource",
          "functionAnnotation": "",
          "functionDoc": "Converts a tree to js code\n",
          "diff": "@@ -1,11 +1,12 @@\n-private static String toSource(Node root, Format outputFormat, boolean lineBreak, int lineLengthThreshold, SourceMap sourceMap, Charset outputCharset) {\n+private static String toSource(Node root, Format outputFormat, boolean lineBreak, int lineLengthThreshold, SourceMap sourceMap, SourceMap.DetailLevel sourceMapDetailLevel, Charset outputCharset) {\n+    Preconditions.checkState(sourceMapDetailLevel !\u003d null);\n     boolean createSourceMap \u003d (sourceMap !\u003d null);\n-    MappedCodePrinter mcp \u003d outputFormat \u003d\u003d Format.COMPACT ? new CompactCodePrinter(lineBreak, lineLengthThreshold, createSourceMap) : new PrettyCodePrinter(lineLengthThreshold, createSourceMap);\n+    MappedCodePrinter mcp \u003d outputFormat \u003d\u003d Format.COMPACT ? new CompactCodePrinter(lineBreak, lineLengthThreshold, createSourceMap, sourceMapDetailLevel) : new PrettyCodePrinter(lineLengthThreshold, createSourceMap, sourceMapDetailLevel);\n     CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(mcp, outputCharset) : new CodeGenerator(mcp, outputCharset);\n     cg.add(root);\n     String code \u003d mcp.getCode();\n     if (createSourceMap) {\n         mcp.generateSourceMap(sourceMap);\n     }\n     return code;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[root-Node, outputFormat-Format, lineBreak-boolean, lineLengthThreshold-int, sourceMap-SourceMap, outputCharset-Charset]",
            "newValue": "[root-Node, outputFormat-Format, lineBreak-boolean, lineLengthThreshold-int, sourceMap-SourceMap, sourceMapDetailLevel-SourceMap.DetailLevel, outputCharset-Charset]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nFiltering what is presented in the source map is independent of the\nsource map format so lets default to a more limited set of nodes by\ndefault now.\n\nR\u003djschorr\nDELTA\u003d200  (170 added, 11 deleted, 19 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d85017\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@340 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "8/5/10, 4:13 PM",
          "commitName": "114620510958121ebec3dd8d037d70571fb7da20",
          "commitAuthor": "johnlenz@google.com",
          "commitDateOld": "7/15/10, 1:03 PM",
          "commitNameOld": "4d09ce45270187fa65a891e56081960a0ae449e5",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 21.13,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "actualSource": "private static String toSource(Node root, Format outputFormat, boolean lineBreak, int lineLengthThreshold, SourceMap sourceMap, SourceMap.DetailLevel sourceMapDetailLevel, Charset outputCharset) {\n    Preconditions.checkState(sourceMapDetailLevel !\u003d null);\n    boolean createSourceMap \u003d (sourceMap !\u003d null);\n    MappedCodePrinter mcp \u003d outputFormat \u003d\u003d Format.COMPACT ? new CompactCodePrinter(lineBreak, lineLengthThreshold, createSourceMap, sourceMapDetailLevel) : new PrettyCodePrinter(lineLengthThreshold, createSourceMap, sourceMapDetailLevel);\n    CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(mcp, outputCharset) : new CodeGenerator(mcp, outputCharset);\n    cg.add(root);\n    String code \u003d mcp.getCode();\n    if (createSourceMap) {\n        mcp.generateSourceMap(sourceMap);\n    }\n    return code;\n}",
          "path": "src/com/google/javascript/jscomp/CodePrinter.java",
          "functionStartLine": 593,
          "functionName": "toSource",
          "functionAnnotation": "",
          "functionDoc": "Converts a tree to js code\n",
          "diff": "@@ -1,11 +1,12 @@\n-private static String toSource(Node root, Format outputFormat, boolean lineBreak, int lineLengthThreshold, SourceMap sourceMap, Charset outputCharset) {\n+private static String toSource(Node root, Format outputFormat, boolean lineBreak, int lineLengthThreshold, SourceMap sourceMap, SourceMap.DetailLevel sourceMapDetailLevel, Charset outputCharset) {\n+    Preconditions.checkState(sourceMapDetailLevel !\u003d null);\n     boolean createSourceMap \u003d (sourceMap !\u003d null);\n-    MappedCodePrinter mcp \u003d outputFormat \u003d\u003d Format.COMPACT ? new CompactCodePrinter(lineBreak, lineLengthThreshold, createSourceMap) : new PrettyCodePrinter(lineLengthThreshold, createSourceMap);\n+    MappedCodePrinter mcp \u003d outputFormat \u003d\u003d Format.COMPACT ? new CompactCodePrinter(lineBreak, lineLengthThreshold, createSourceMap, sourceMapDetailLevel) : new PrettyCodePrinter(lineLengthThreshold, createSourceMap, sourceMapDetailLevel);\n     CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(mcp, outputCharset) : new CodeGenerator(mcp, outputCharset);\n     cg.add(root);\n     String code \u003d mcp.getCode();\n     if (createSourceMap) {\n         mcp.generateSourceMap(sourceMap);\n     }\n     return code;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "4d09ce45270187fa65a891e56081960a0ae449e5": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/07/14 14:52:38 by nicksantos\n\n        Automated g4 rollback.\n\n        *** Reason for rollback ***\n\n        breaks contentads\n\n        *** Original change description ***\n\n        Replace direct references to stripped types with \u0027void 0\u0027.\n\n        R\u003ddcc\n        DELTA\u003d107  (0 added, 100 deleted, 7 changed)\n\nChange on 2010/07/14 17:36:48 by acleung\n\n        Fix GraphColoringTest for future JDK changes.\n\n        R\u003dnicksantos\n        DELTA\u003d7  (0 added, 6 deleted, 1 changed)\n\nChange on 2010/07/14 18:11:13 by johnlenz\n\n        Minor cleanup of the CodeConsumer interface.\n\n        R\u003dacleung\n        DELTA\u003d180  (14 added, 128 deleted, 38 changed)\n\nChange on 2010/07/14 18:13:53 by johnlenz\n\n        Minor performance improvement for quoted strings that may need to be\n        escaped.\n\n        R\u003dnicksantos\n        DELTA\u003d1  (0 added, 0 deleted, 1 changed)\n\nChange on 2010/07/14 18:34:27 by pkeslin\n\n        Move the Image constructor from deprecated.js to html5 since it seems that\n        it has been formalized as a part of that spec and is the constructor for\n        the HTMLImageElement.\n\n        R\u003dacleung\n        DELTA\u003d27  (7 added, 18 deleted, 2 changed)\n\nChange on 2010/07/14 19:11:18 by pkeslin\n\n        Automated g4 rollback of changelist 16438831.\n\n        *** Reason for rollback ***\n\n          Original change breaks the closure build.\n\n        *** Original change description ***\n\n        Move the Image constructor from deprecated.js to html5 since it seems that\n        it has been formalized as a part of that spec and is the constructor for\n        the HTMLImageElement.\n\n        R\u003dacleung\n        DELTA\u003d27  (18 added, 7 deleted, 2 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d52001\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@278 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/15/10, 1:03 PM",
      "commitName": "4d09ce45270187fa65a891e56081960a0ae449e5",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/13/10, 2:39 PM",
      "commitNameOld": "de13c3313c05f4449c50c560324389d6905a214d",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 92.93,
      "commitsBetweenForRepo": 83,
      "commitsBetweenForFile": 1,
      "actualSource": "private static String toSource(Node root, Format outputFormat, boolean lineBreak, int lineLengthThreshold, SourceMap sourceMap, Charset outputCharset) {\n    boolean createSourceMap \u003d (sourceMap !\u003d null);\n    MappedCodePrinter mcp \u003d outputFormat \u003d\u003d Format.COMPACT ? new CompactCodePrinter(lineBreak, lineLengthThreshold, createSourceMap) : new PrettyCodePrinter(lineLengthThreshold, createSourceMap);\n    CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(mcp, outputCharset) : new CodeGenerator(mcp, outputCharset);\n    cg.add(root);\n    String code \u003d mcp.getCode();\n    if (createSourceMap) {\n        mcp.generateSourceMap(sourceMap);\n    }\n    return code;\n}",
      "path": "src/com/google/javascript/jscomp/CodePrinter.java",
      "functionStartLine": 578,
      "functionName": "toSource",
      "functionAnnotation": "",
      "functionDoc": "Converts a tree to js code\n",
      "diff": "@@ -1,11 +1,11 @@\n private static String toSource(Node root, Format outputFormat, boolean lineBreak, int lineLengthThreshold, SourceMap sourceMap, Charset outputCharset) {\n     boolean createSourceMap \u003d (sourceMap !\u003d null);\n-    CodeConsumer cp \u003d outputFormat \u003d\u003d Format.COMPACT ? new CompactCodePrinter(lineBreak, lineLengthThreshold, createSourceMap) : new PrettyCodePrinter(lineLengthThreshold, createSourceMap);\n-    CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(cp, outputCharset) : new CodeGenerator(cp, outputCharset);\n+    MappedCodePrinter mcp \u003d outputFormat \u003d\u003d Format.COMPACT ? new CompactCodePrinter(lineBreak, lineLengthThreshold, createSourceMap) : new PrettyCodePrinter(lineLengthThreshold, createSourceMap);\n+    CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(mcp, outputCharset) : new CodeGenerator(mcp, outputCharset);\n     cg.add(root);\n-    String code \u003d ((HasGetCode) cp).getCode();\n+    String code \u003d mcp.getCode();\n     if (createSourceMap) {\n-        cp.generateSourceMap(sourceMap);\n+        mcp.generateSourceMap(sourceMap);\n     }\n     return code;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "de13c3313c05f4449c50c560324389d6905a214d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "\nChange on 2010/04/13 by john\n\n        Experimental option: Flag to change named object references from \"Object|null\" to \"Object|null|undefined\".\n\n        R\u003dalan,nick\n        DELTA\u003d7144  (7131 added, 5 deleted, 8 changed)\n\nChange on 2010/04/13 by nicksantos\n\n        get rid of some backdoor gmail apis.\n\n        R\u003djohn\n        DELTA\u003d44  (0 added, 33 deleted, 11 changed)\n\nChange on 2010/04/13 by nicksantos\n\n        fix TypeCheckTest to parse externs files properly.\n        i still need to merge the TypeCheckTest-forking cl into this one.\n\n        R\u003djohn\n        DELTA\u003d42  (12 added, 0 deleted, 30 changed)\n\nChange on 2010/04/13 by john\n\n        Enable expression decomposition for function inlining by default.\n\n        R\u003dnick\n        DELTA\u003d1  (0 added, 0 deleted, 1 changed)\n\nChange on 2010/04/13 by john\n\n        Move ReplaceCssNames to allow type checking of goog.getCssName.\n\n        R\u003dmark\n        DELTA\u003d39  (35 added, 4 deleted, 0 changed)\n\nChange on 2010/04/13 by john\n\n        Maintain source and type information during ReplaceCssNames.\n\n        R\u003dmark\n        DELTA\u003d31  (30 added, 0 deleted, 1 changed)\n\nChange on 2010/04/13 by nick\n\n        fix up type information on event listener functions.\n\n        R\u003dalan\n        DELTA\u003d2  (0 added, 0 deleted, 2 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dwescxy\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@182 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/13/10, 2:39 PM",
      "commitName": "de13c3313c05f4449c50c560324389d6905a214d",
      "commitAuthor": "Nicholas.J.Santos",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "\nChange on 2010/04/13 by john\n\n        Experimental option: Flag to change named object references from \"Object|null\" to \"Object|null|undefined\".\n\n        R\u003dalan,nick\n        DELTA\u003d7144  (7131 added, 5 deleted, 8 changed)\n\nChange on 2010/04/13 by nicksantos\n\n        get rid of some backdoor gmail apis.\n\n        R\u003djohn\n        DELTA\u003d44  (0 added, 33 deleted, 11 changed)\n\nChange on 2010/04/13 by nicksantos\n\n        fix TypeCheckTest to parse externs files properly.\n        i still need to merge the TypeCheckTest-forking cl into this one.\n\n        R\u003djohn\n        DELTA\u003d42  (12 added, 0 deleted, 30 changed)\n\nChange on 2010/04/13 by john\n\n        Enable expression decomposition for function inlining by default.\n\n        R\u003dnick\n        DELTA\u003d1  (0 added, 0 deleted, 1 changed)\n\nChange on 2010/04/13 by john\n\n        Move ReplaceCssNames to allow type checking of goog.getCssName.\n\n        R\u003dmark\n        DELTA\u003d39  (35 added, 4 deleted, 0 changed)\n\nChange on 2010/04/13 by john\n\n        Maintain source and type information during ReplaceCssNames.\n\n        R\u003dmark\n        DELTA\u003d31  (30 added, 0 deleted, 1 changed)\n\nChange on 2010/04/13 by nick\n\n        fix up type information on event listener functions.\n\n        R\u003dalan\n        DELTA\u003d2  (0 added, 0 deleted, 2 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dwescxy\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@182 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "4/13/10, 2:39 PM",
          "commitName": "de13c3313c05f4449c50c560324389d6905a214d",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "4/5/10, 12:30 PM",
          "commitNameOld": "222eafd303155b3eac5cd244584b2cb3c4c11975",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 8.09,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "actualSource": "private static String toSource(Node root, Format outputFormat, boolean lineBreak, int lineLengthThreshold, SourceMap sourceMap, Charset outputCharset) {\n    boolean createSourceMap \u003d (sourceMap !\u003d null);\n    CodeConsumer cp \u003d outputFormat \u003d\u003d Format.COMPACT ? new CompactCodePrinter(lineBreak, lineLengthThreshold, createSourceMap) : new PrettyCodePrinter(lineLengthThreshold, createSourceMap);\n    CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(cp, outputCharset) : new CodeGenerator(cp, outputCharset);\n    cg.add(root);\n    String code \u003d ((HasGetCode) cp).getCode();\n    if (createSourceMap) {\n        cp.generateSourceMap(sourceMap);\n    }\n    return code;\n}",
          "path": "src/com/google/javascript/jscomp/CodePrinter.java",
          "functionStartLine": 636,
          "functionName": "toSource",
          "functionAnnotation": "",
          "functionDoc": "Converts a tree to js code\n",
          "diff": "@@ -1,11 +1,11 @@\n-private static String toSource(Node root, Format outputFormat, boolean lineBreak, int lineLengthThreshold, SourceMap sourceMap, Charset outputCharset, boolean validation) {\n+private static String toSource(Node root, Format outputFormat, boolean lineBreak, int lineLengthThreshold, SourceMap sourceMap, Charset outputCharset) {\n     boolean createSourceMap \u003d (sourceMap !\u003d null);\n     CodeConsumer cp \u003d outputFormat \u003d\u003d Format.COMPACT ? new CompactCodePrinter(lineBreak, lineLengthThreshold, createSourceMap) : new PrettyCodePrinter(lineLengthThreshold, createSourceMap);\n-    CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(cp, outputCharset) : new CodeGenerator(cp, outputCharset, validation);\n+    CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(cp, outputCharset) : new CodeGenerator(cp, outputCharset);\n     cg.add(root);\n     String code \u003d ((HasGetCode) cp).getCode();\n     if (createSourceMap) {\n         cp.generateSourceMap(sourceMap);\n     }\n     return code;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[root-Node, outputFormat-Format, lineBreak-boolean, lineLengthThreshold-int, sourceMap-SourceMap, outputCharset-Charset, validation-boolean]",
            "newValue": "[root-Node, outputFormat-Format, lineBreak-boolean, lineLengthThreshold-int, sourceMap-SourceMap, outputCharset-Charset]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nChange on 2010/04/13 by john\n\n        Experimental option: Flag to change named object references from \"Object|null\" to \"Object|null|undefined\".\n\n        R\u003dalan,nick\n        DELTA\u003d7144  (7131 added, 5 deleted, 8 changed)\n\nChange on 2010/04/13 by nicksantos\n\n        get rid of some backdoor gmail apis.\n\n        R\u003djohn\n        DELTA\u003d44  (0 added, 33 deleted, 11 changed)\n\nChange on 2010/04/13 by nicksantos\n\n        fix TypeCheckTest to parse externs files properly.\n        i still need to merge the TypeCheckTest-forking cl into this one.\n\n        R\u003djohn\n        DELTA\u003d42  (12 added, 0 deleted, 30 changed)\n\nChange on 2010/04/13 by john\n\n        Enable expression decomposition for function inlining by default.\n\n        R\u003dnick\n        DELTA\u003d1  (0 added, 0 deleted, 1 changed)\n\nChange on 2010/04/13 by john\n\n        Move ReplaceCssNames to allow type checking of goog.getCssName.\n\n        R\u003dmark\n        DELTA\u003d39  (35 added, 4 deleted, 0 changed)\n\nChange on 2010/04/13 by john\n\n        Maintain source and type information during ReplaceCssNames.\n\n        R\u003dmark\n        DELTA\u003d31  (30 added, 0 deleted, 1 changed)\n\nChange on 2010/04/13 by nick\n\n        fix up type information on event listener functions.\n\n        R\u003dalan\n        DELTA\u003d2  (0 added, 0 deleted, 2 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dwescxy\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@182 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "4/13/10, 2:39 PM",
          "commitName": "de13c3313c05f4449c50c560324389d6905a214d",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "4/5/10, 12:30 PM",
          "commitNameOld": "222eafd303155b3eac5cd244584b2cb3c4c11975",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 8.09,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "actualSource": "private static String toSource(Node root, Format outputFormat, boolean lineBreak, int lineLengthThreshold, SourceMap sourceMap, Charset outputCharset) {\n    boolean createSourceMap \u003d (sourceMap !\u003d null);\n    CodeConsumer cp \u003d outputFormat \u003d\u003d Format.COMPACT ? new CompactCodePrinter(lineBreak, lineLengthThreshold, createSourceMap) : new PrettyCodePrinter(lineLengthThreshold, createSourceMap);\n    CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(cp, outputCharset) : new CodeGenerator(cp, outputCharset);\n    cg.add(root);\n    String code \u003d ((HasGetCode) cp).getCode();\n    if (createSourceMap) {\n        cp.generateSourceMap(sourceMap);\n    }\n    return code;\n}",
          "path": "src/com/google/javascript/jscomp/CodePrinter.java",
          "functionStartLine": 636,
          "functionName": "toSource",
          "functionAnnotation": "",
          "functionDoc": "Converts a tree to js code\n",
          "diff": "@@ -1,11 +1,11 @@\n-private static String toSource(Node root, Format outputFormat, boolean lineBreak, int lineLengthThreshold, SourceMap sourceMap, Charset outputCharset, boolean validation) {\n+private static String toSource(Node root, Format outputFormat, boolean lineBreak, int lineLengthThreshold, SourceMap sourceMap, Charset outputCharset) {\n     boolean createSourceMap \u003d (sourceMap !\u003d null);\n     CodeConsumer cp \u003d outputFormat \u003d\u003d Format.COMPACT ? new CompactCodePrinter(lineBreak, lineLengthThreshold, createSourceMap) : new PrettyCodePrinter(lineLengthThreshold, createSourceMap);\n-    CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(cp, outputCharset) : new CodeGenerator(cp, outputCharset, validation);\n+    CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(cp, outputCharset) : new CodeGenerator(cp, outputCharset);\n     cg.add(root);\n     String code \u003d ((HasGetCode) cp).getCode();\n     if (createSourceMap) {\n         cp.generateSourceMap(sourceMap);\n     }\n     return code;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "168bc14ff5e9e664863c3b1146f2a5b7a30ffb42": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Add a pass for collecting symbols exported like window[\u0027x\u0027] \u003d ...\n\nFix for issue #70.\n\nAssorted minor bug fixes.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@31 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/11/09, 3:29 PM",
      "commitName": "168bc14ff5e9e664863c3b1146f2a5b7a30ffb42",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Add a pass for collecting symbols exported like window[\u0027x\u0027] \u003d ...\n\nFix for issue #70.\n\nAssorted minor bug fixes.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@31 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "12/11/09, 3:29 PM",
          "commitName": "168bc14ff5e9e664863c3b1146f2a5b7a30ffb42",
          "commitAuthor": "nicholas.j.santos@gmail.com",
          "commitDateOld": "12/8/09, 3:50 PM",
          "commitNameOld": "847b296c23a63aa0a0b38cc3e63883e1688288e3",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 2.99,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "private static String toSource(Node root, Format outputFormat, boolean lineBreak, int lineLengthThreshold, SourceMap sourceMap, Charset outputCharset, boolean validation) {\n    boolean createSourceMap \u003d (sourceMap !\u003d null);\n    CodeConsumer cp \u003d outputFormat \u003d\u003d Format.COMPACT ? new CompactCodePrinter(lineBreak, lineLengthThreshold, createSourceMap) : new PrettyCodePrinter(lineLengthThreshold, createSourceMap);\n    CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(cp, outputCharset) : new CodeGenerator(cp, outputCharset, validation);\n    cg.add(root);\n    String code \u003d ((HasGetCode) cp).getCode();\n    if (createSourceMap) {\n        cp.generateSourceMap(sourceMap);\n    }\n    return code;\n}",
          "path": "src/com/google/javascript/jscomp/CodePrinter.java",
          "functionStartLine": 593,
          "functionName": "toSource",
          "functionAnnotation": "",
          "functionDoc": "Converts a tree to js code\n",
          "diff": "@@ -1,11 +1,11 @@\n-private static String toSource(Node root, Format outputFormat, boolean lineBreak, int lineLengthThreshold, SourceMap sourceMap, Charset outputCharset) {\n+private static String toSource(Node root, Format outputFormat, boolean lineBreak, int lineLengthThreshold, SourceMap sourceMap, Charset outputCharset, boolean validation) {\n     boolean createSourceMap \u003d (sourceMap !\u003d null);\n     CodeConsumer cp \u003d outputFormat \u003d\u003d Format.COMPACT ? new CompactCodePrinter(lineBreak, lineLengthThreshold, createSourceMap) : new PrettyCodePrinter(lineLengthThreshold, createSourceMap);\n-    CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(cp, outputCharset) : new CodeGenerator(cp, outputCharset);\n+    CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(cp, outputCharset) : new CodeGenerator(cp, outputCharset, validation);\n     cg.add(root);\n     String code \u003d ((HasGetCode) cp).getCode();\n     if (createSourceMap) {\n         cp.generateSourceMap(sourceMap);\n     }\n     return code;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[root-Node, outputFormat-Format, lineBreak-boolean, lineLengthThreshold-int, sourceMap-SourceMap, outputCharset-Charset]",
            "newValue": "[root-Node, outputFormat-Format, lineBreak-boolean, lineLengthThreshold-int, sourceMap-SourceMap, outputCharset-Charset, validation-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Add a pass for collecting symbols exported like window[\u0027x\u0027] \u003d ...\n\nFix for issue #70.\n\nAssorted minor bug fixes.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@31 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "12/11/09, 3:29 PM",
          "commitName": "168bc14ff5e9e664863c3b1146f2a5b7a30ffb42",
          "commitAuthor": "nicholas.j.santos@gmail.com",
          "commitDateOld": "12/8/09, 3:50 PM",
          "commitNameOld": "847b296c23a63aa0a0b38cc3e63883e1688288e3",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 2.99,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "private static String toSource(Node root, Format outputFormat, boolean lineBreak, int lineLengthThreshold, SourceMap sourceMap, Charset outputCharset, boolean validation) {\n    boolean createSourceMap \u003d (sourceMap !\u003d null);\n    CodeConsumer cp \u003d outputFormat \u003d\u003d Format.COMPACT ? new CompactCodePrinter(lineBreak, lineLengthThreshold, createSourceMap) : new PrettyCodePrinter(lineLengthThreshold, createSourceMap);\n    CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(cp, outputCharset) : new CodeGenerator(cp, outputCharset, validation);\n    cg.add(root);\n    String code \u003d ((HasGetCode) cp).getCode();\n    if (createSourceMap) {\n        cp.generateSourceMap(sourceMap);\n    }\n    return code;\n}",
          "path": "src/com/google/javascript/jscomp/CodePrinter.java",
          "functionStartLine": 593,
          "functionName": "toSource",
          "functionAnnotation": "",
          "functionDoc": "Converts a tree to js code\n",
          "diff": "@@ -1,11 +1,11 @@\n-private static String toSource(Node root, Format outputFormat, boolean lineBreak, int lineLengthThreshold, SourceMap sourceMap, Charset outputCharset) {\n+private static String toSource(Node root, Format outputFormat, boolean lineBreak, int lineLengthThreshold, SourceMap sourceMap, Charset outputCharset, boolean validation) {\n     boolean createSourceMap \u003d (sourceMap !\u003d null);\n     CodeConsumer cp \u003d outputFormat \u003d\u003d Format.COMPACT ? new CompactCodePrinter(lineBreak, lineLengthThreshold, createSourceMap) : new PrettyCodePrinter(lineLengthThreshold, createSourceMap);\n-    CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(cp, outputCharset) : new CodeGenerator(cp, outputCharset);\n+    CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(cp, outputCharset) : new CodeGenerator(cp, outputCharset, validation);\n     cg.add(root);\n     String code \u003d ((HasGetCode) cp).getCode();\n     if (createSourceMap) {\n         cp.generateSourceMap(sourceMap);\n     }\n     return code;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "847b296c23a63aa0a0b38cc3e63883e1688288e3": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Add support for other charset types.\n\nAdd support for ES5 directives.\n\nFork unit tests, so that they run more hermetically.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@21 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/8/09, 3:50 PM",
      "commitName": "847b296c23a63aa0a0b38cc3e63883e1688288e3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Add support for other charset types.\n\nAdd support for ES5 directives.\n\nFork unit tests, so that they run more hermetically.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@21 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "12/8/09, 3:50 PM",
          "commitName": "847b296c23a63aa0a0b38cc3e63883e1688288e3",
          "commitAuthor": "nicholas.j.santos@gmail.com",
          "commitDateOld": "11/3/09, 3:51 PM",
          "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 35.0,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "actualSource": "private static String toSource(Node root, Format outputFormat, boolean lineBreak, int lineLengthThreshold, SourceMap sourceMap, Charset outputCharset) {\n    boolean createSourceMap \u003d (sourceMap !\u003d null);\n    CodeConsumer cp \u003d outputFormat \u003d\u003d Format.COMPACT ? new CompactCodePrinter(lineBreak, lineLengthThreshold, createSourceMap) : new PrettyCodePrinter(lineLengthThreshold, createSourceMap);\n    CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(cp, outputCharset) : new CodeGenerator(cp, outputCharset);\n    cg.add(root);\n    String code \u003d ((HasGetCode) cp).getCode();\n    if (createSourceMap) {\n        cp.generateSourceMap(sourceMap);\n    }\n    return code;\n}",
          "path": "src/com/google/javascript/jscomp/CodePrinter.java",
          "functionStartLine": 580,
          "functionName": "toSource",
          "functionAnnotation": "",
          "functionDoc": "Converts a tree to js code\n",
          "diff": "@@ -1,11 +1,11 @@\n-private static String toSource(Node root, Format outputFormat, boolean lineBreak, int lineLengthThreshold, SourceMap sourceMap) {\n+private static String toSource(Node root, Format outputFormat, boolean lineBreak, int lineLengthThreshold, SourceMap sourceMap, Charset outputCharset) {\n     boolean createSourceMap \u003d (sourceMap !\u003d null);\n     CodeConsumer cp \u003d outputFormat \u003d\u003d Format.COMPACT ? new CompactCodePrinter(lineBreak, lineLengthThreshold, createSourceMap) : new PrettyCodePrinter(lineLengthThreshold, createSourceMap);\n-    CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(cp) : new CodeGenerator(cp);\n+    CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(cp, outputCharset) : new CodeGenerator(cp, outputCharset);\n     cg.add(root);\n     String code \u003d ((HasGetCode) cp).getCode();\n     if (createSourceMap) {\n         cp.generateSourceMap(sourceMap);\n     }\n     return code;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[root-Node, outputFormat-Format, lineBreak-boolean, lineLengthThreshold-int, sourceMap-SourceMap]",
            "newValue": "[root-Node, outputFormat-Format, lineBreak-boolean, lineLengthThreshold-int, sourceMap-SourceMap, outputCharset-Charset]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Add support for other charset types.\n\nAdd support for ES5 directives.\n\nFork unit tests, so that they run more hermetically.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@21 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "12/8/09, 3:50 PM",
          "commitName": "847b296c23a63aa0a0b38cc3e63883e1688288e3",
          "commitAuthor": "nicholas.j.santos@gmail.com",
          "commitDateOld": "11/3/09, 3:51 PM",
          "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 35.0,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "actualSource": "private static String toSource(Node root, Format outputFormat, boolean lineBreak, int lineLengthThreshold, SourceMap sourceMap, Charset outputCharset) {\n    boolean createSourceMap \u003d (sourceMap !\u003d null);\n    CodeConsumer cp \u003d outputFormat \u003d\u003d Format.COMPACT ? new CompactCodePrinter(lineBreak, lineLengthThreshold, createSourceMap) : new PrettyCodePrinter(lineLengthThreshold, createSourceMap);\n    CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(cp, outputCharset) : new CodeGenerator(cp, outputCharset);\n    cg.add(root);\n    String code \u003d ((HasGetCode) cp).getCode();\n    if (createSourceMap) {\n        cp.generateSourceMap(sourceMap);\n    }\n    return code;\n}",
          "path": "src/com/google/javascript/jscomp/CodePrinter.java",
          "functionStartLine": 580,
          "functionName": "toSource",
          "functionAnnotation": "",
          "functionDoc": "Converts a tree to js code\n",
          "diff": "@@ -1,11 +1,11 @@\n-private static String toSource(Node root, Format outputFormat, boolean lineBreak, int lineLengthThreshold, SourceMap sourceMap) {\n+private static String toSource(Node root, Format outputFormat, boolean lineBreak, int lineLengthThreshold, SourceMap sourceMap, Charset outputCharset) {\n     boolean createSourceMap \u003d (sourceMap !\u003d null);\n     CodeConsumer cp \u003d outputFormat \u003d\u003d Format.COMPACT ? new CompactCodePrinter(lineBreak, lineLengthThreshold, createSourceMap) : new PrettyCodePrinter(lineLengthThreshold, createSourceMap);\n-    CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(cp) : new CodeGenerator(cp);\n+    CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(cp, outputCharset) : new CodeGenerator(cp, outputCharset);\n     cg.add(root);\n     String code \u003d ((HasGetCode) cp).getCode();\n     if (createSourceMap) {\n         cp.generateSourceMap(sourceMap);\n     }\n     return code;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,11 @@\n+private static String toSource(Node root, Format outputFormat, boolean lineBreak, int lineLengthThreshold, SourceMap sourceMap) {\n+    boolean createSourceMap \u003d (sourceMap !\u003d null);\n+    CodeConsumer cp \u003d outputFormat \u003d\u003d Format.COMPACT ? new CompactCodePrinter(lineBreak, lineLengthThreshold, createSourceMap) : new PrettyCodePrinter(lineLengthThreshold, createSourceMap);\n+    CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(cp) : new CodeGenerator(cp);\n+    cg.add(root);\n+    String code \u003d ((HasGetCode) cp).getCode();\n+    if (createSourceMap) {\n+        cp.generateSourceMap(sourceMap);\n+    }\n+    return code;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private static String toSource(Node root, Format outputFormat, boolean lineBreak, int lineLengthThreshold, SourceMap sourceMap) {\n    boolean createSourceMap \u003d (sourceMap !\u003d null);\n    CodeConsumer cp \u003d outputFormat \u003d\u003d Format.COMPACT ? new CompactCodePrinter(lineBreak, lineLengthThreshold, createSourceMap) : new PrettyCodePrinter(lineLengthThreshold, createSourceMap);\n    CodeGenerator cg \u003d outputFormat \u003d\u003d Format.TYPED ? new TypedCodeGenerator(cp) : new CodeGenerator(cp);\n    cg.add(root);\n    String code \u003d ((HasGetCode) cp).getCode();\n    if (createSourceMap) {\n        cp.generateSourceMap(sourceMap);\n    }\n    return code;\n}",
      "path": "src/com/google/javascript/jscomp/CodePrinter.java",
      "functionStartLine": 571,
      "functionName": "toSource",
      "functionAnnotation": "",
      "functionDoc": "Converts a tree to js code\n"
    }
  }
}