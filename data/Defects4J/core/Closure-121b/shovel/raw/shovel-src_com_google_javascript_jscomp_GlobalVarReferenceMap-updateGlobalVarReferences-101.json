{
  "origin": "codeshovel",
  "repositoryName": "Closure-121b",
  "repositoryPath": "/tmp/Closure-121b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "GlobalVarReferenceMap.java",
  "functionName": "updateGlobalVarReferences",
  "functionId": "updateGlobalVarReferences___refMapPatch-Map__Var,ReferenceCollection____root-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/GlobalVarReferenceMap.java",
  "functionAnnotation": "",
  "functionDoc": "Updates the internal reference map based on the provided parameters. If\n{@code scriptRoot} is not SCRIPT, it basically replaces the internal map\nwith the new one, otherwise it replaces all the information associated to\nthe given script.\n\n@param refMapPatch The reference map result of a\n    {@link ReferenceCollectingCallback} pass which might be collected from\n    the whole AST or just a sub-tree associated to a SCRIPT node.\n@param root AST sub-tree root on which reference collection was done.\n",
  "functionStartLine": 101,
  "functionEndLine": 120,
  "numCommitsSeen": 8,
  "timeTaken": 1352,
  "changeHistory": [
    "39f629a8cfaab37da55288010640d7e516000b1f",
    "1b8156d41fe441ab03999f1e2c5ac4537e79fc75",
    "75a9013e3907e5db97f10578227497d7b018caf5"
  ],
  "changeHistoryShort": {
    "39f629a8cfaab37da55288010640d7e516000b1f": "Ybodychange",
    "1b8156d41fe441ab03999f1e2c5ac4537e79fc75": "Ybodychange",
    "75a9013e3907e5db97f10578227497d7b018caf5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "39f629a8cfaab37da55288010640d7e516000b1f": {
      "type": "Ybodychange",
      "commitMessage": "\nReplace calls of the form \"Node.getType() !\u003d Token.XX\" with\n\"!Node.isXX()\" calls.\n\nR\u003dnicksantos\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3706\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1598 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/14/11, 6:13 PM",
      "commitName": "39f629a8cfaab37da55288010640d7e516000b1f",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "9/21/11, 10:24 AM",
      "commitNameOld": "b375f9440f76066c562ecdd883a9b2588516bcf5",
      "commitAuthorOld": "tylerg@google.com",
      "daysBetweenCommits": 54.37,
      "commitsBetweenForRepo": 124,
      "commitsBetweenForFile": 1,
      "actualSource": "void updateGlobalVarReferences(Map\u003cVar, ReferenceCollection\u003e refMapPatch, Node root) {\n    if (refMap \u003d\u003d null || !root.isScript()) {\n        resetGlobalVarReferences(refMapPatch);\n        return;\n    }\n    InputId inputId \u003d root.getInputId();\n    Preconditions.checkNotNull(inputId);\n    removeScriptReferences(inputId);\n    for (Entry\u003cVar, ReferenceCollection\u003e entry : refMapPatch.entrySet()) {\n        Var var \u003d entry.getKey();\n        if (var.isGlobal()) {\n            replaceReferences(var.getName(), inputId, entry.getValue());\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/GlobalVarReferenceMap.java",
      "functionStartLine": 100,
      "functionName": "updateGlobalVarReferences",
      "functionAnnotation": "",
      "functionDoc": "Updates the internal reference map based on the provided parameters. If\n{@code scriptRoot} is not SCRIPT, it basically replaces the internal map\nwith the new one, otherwise it replaces all the information associated to\nthe given script.\n\n@param refMapPatch The reference map result of a\n    {@link ReferenceCollectingCallback} pass which might be collected from\n    the whole AST or just a sub-tree associated to a SCRIPT node.\n@param root AST sub-tree root on which reference collection was done.\n",
      "diff": "@@ -1,15 +1,15 @@\n void updateGlobalVarReferences(Map\u003cVar, ReferenceCollection\u003e refMapPatch, Node root) {\n-    if (refMap \u003d\u003d null || root.getType() !\u003d Token.SCRIPT) {\n+    if (refMap \u003d\u003d null || !root.isScript()) {\n         resetGlobalVarReferences(refMapPatch);\n         return;\n     }\n     InputId inputId \u003d root.getInputId();\n     Preconditions.checkNotNull(inputId);\n     removeScriptReferences(inputId);\n     for (Entry\u003cVar, ReferenceCollection\u003e entry : refMapPatch.entrySet()) {\n         Var var \u003d entry.getKey();\n         if (var.isGlobal()) {\n             replaceReferences(var.getName(), inputId, entry.getValue());\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1b8156d41fe441ab03999f1e2c5ac4537e79fc75": {
      "type": "Ybodychange",
      "commitMessage": "\nPart 4, source name/input id split: Require an InputId to lookup a CompilerInput.\n\nR\u003dnicksantos\nDELTA\u003d266  (106 added, 20 deleted, 140 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2899\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1328 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/4/11, 11:43 AM",
      "commitName": "1b8156d41fe441ab03999f1e2c5ac4537e79fc75",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "7/22/11, 12:38 PM",
      "commitNameOld": "841090b66ef01a81101d8a6917f274b6cdaf1de7",
      "commitAuthorOld": "tylerg@google.com",
      "daysBetweenCommits": 12.96,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "actualSource": "void updateGlobalVarReferences(Map\u003cVar, ReferenceCollection\u003e refMapPatch, Node root) {\n    if (refMap \u003d\u003d null || root.getType() !\u003d Token.SCRIPT) {\n        resetGlobalVarReferences(refMapPatch);\n        return;\n    }\n    InputId inputId \u003d root.getInputId();\n    Preconditions.checkNotNull(inputId);\n    removeScriptReferences(inputId);\n    for (Entry\u003cVar, ReferenceCollection\u003e entry : refMapPatch.entrySet()) {\n        Var var \u003d entry.getKey();\n        if (var.isGlobal()) {\n            replaceReferences(var.getName(), inputId, entry.getValue());\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/GlobalVarReferenceMap.java",
      "functionStartLine": 102,
      "functionName": "updateGlobalVarReferences",
      "functionAnnotation": "",
      "functionDoc": "Updates the internal reference map based on the provided parameters. If\n{@code scriptRoot} is not SCRIPT, it basically replaces the internal map\nwith the new one, otherwise it replaces all the information associated to\nthe given script.\n\n@param refMapPatch The reference map result of a\n    {@link ReferenceCollectingCallback} pass which might be collected from\n    the whole AST or just a sub-tree associated to a SCRIPT node.\n@param root AST sub-tree root on which reference collection was done.\n",
      "diff": "@@ -1,15 +1,15 @@\n void updateGlobalVarReferences(Map\u003cVar, ReferenceCollection\u003e refMapPatch, Node root) {\n     if (refMap \u003d\u003d null || root.getType() !\u003d Token.SCRIPT) {\n         resetGlobalVarReferences(refMapPatch);\n         return;\n     }\n-    String sourceName \u003d NodeUtil.getSourceName(root);\n-    Preconditions.checkNotNull(sourceName);\n-    removeScriptReferences(sourceName);\n+    InputId inputId \u003d root.getInputId();\n+    Preconditions.checkNotNull(inputId);\n+    removeScriptReferences(inputId);\n     for (Entry\u003cVar, ReferenceCollection\u003e entry : refMapPatch.entrySet()) {\n         Var var \u003d entry.getKey();\n         if (var.isGlobal()) {\n-            replaceReferences(var.getName(), sourceName, entry.getValue());\n+            replaceReferences(var.getName(), inputId, entry.getValue());\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "75a9013e3907e5db97f10578227497d7b018caf5": {
      "type": "Yintroduced",
      "commitMessage": "\nmade checkVariableReferences hot-swappable and to do this added the\nfunctionality to keep lists of all global var references in Compiler\n\nR\u003dnicksantos\nDELTA\u003d478  (417 added, 8 deleted, 53 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1999\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1128 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/24/11, 10:36 AM",
      "commitName": "75a9013e3907e5db97f10578227497d7b018caf5",
      "commitAuthor": "bashir@google.com",
      "diff": "@@ -0,0 +1,15 @@\n+void updateGlobalVarReferences(Map\u003cVar, ReferenceCollection\u003e refMapPatch, Node root) {\n+    if (refMap \u003d\u003d null || root.getType() !\u003d Token.SCRIPT) {\n+        resetGlobalVarReferences(refMapPatch);\n+        return;\n+    }\n+    String sourceName \u003d NodeUtil.getSourceName(root);\n+    Preconditions.checkNotNull(sourceName);\n+    removeScriptReferences(sourceName);\n+    for (Entry\u003cVar, ReferenceCollection\u003e entry : refMapPatch.entrySet()) {\n+        Var var \u003d entry.getKey();\n+        if (var.isGlobal()) {\n+            replaceReferences(var.getName(), sourceName, entry.getValue());\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "void updateGlobalVarReferences(Map\u003cVar, ReferenceCollection\u003e refMapPatch, Node root) {\n    if (refMap \u003d\u003d null || root.getType() !\u003d Token.SCRIPT) {\n        resetGlobalVarReferences(refMapPatch);\n        return;\n    }\n    String sourceName \u003d NodeUtil.getSourceName(root);\n    Preconditions.checkNotNull(sourceName);\n    removeScriptReferences(sourceName);\n    for (Entry\u003cVar, ReferenceCollection\u003e entry : refMapPatch.entrySet()) {\n        Var var \u003d entry.getKey();\n        if (var.isGlobal()) {\n            replaceReferences(var.getName(), sourceName, entry.getValue());\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/GlobalVarReferenceMap.java",
      "functionStartLine": 97,
      "functionName": "updateGlobalVarReferences",
      "functionAnnotation": "",
      "functionDoc": "Updates the internal reference map based on the provided parameters. If\n{@code scriptRoot} is not SCRIPT, it basically replaces the internal map\nwith the new one, otherwise it replaces all the information associated to\nthe given script.\n\n@param refMapPatch The reference map result of a\n    {@link ReferenceCollectingCallback} pass which might be collected from\n    the whole AST or just a sub-tree associated to a SCRIPT node.\n@param root AST sub-tree root on which reference collection was done.\n"
    }
  }
}