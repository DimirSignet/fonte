{
  "origin": "codeshovel",
  "repositoryName": "Closure-121b",
  "repositoryPath": "/tmp/Closure-121b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Normalize.java",
  "functionName": "annotateConstantsByConvention",
  "functionId": "$annotateConstantsByConvention___n-Node__parent-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/Normalize.java",
  "functionAnnotation": "",
  "functionDoc": "Mark names and properties that are constants by convention.\n",
  "functionStartLine": 422,
  "functionEndLine": 452,
  "numCommitsSeen": 46,
  "timeTaken": 2362,
  "changeHistory": [
    "f0ff2971eca336e950929b3ee0d80155338bb1dd",
    "f412f0c0efd54842b30207c845d65cb826217fd6",
    "5524adbda991632656059566b69cc2771ba42b7d",
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
    "5d397618f3c86d9c444a4c4c6441267b8a89a21d",
    "2e68acb05c7a37396c9efc449e14226b6d3fb7eb",
    "853cb5d209e39fdf1944fbd48e1fab349c24b76d",
    "24b7eb9a4a8850f2d0988eb81245b4b9a977d53a"
  ],
  "changeHistoryShort": {
    "f0ff2971eca336e950929b3ee0d80155338bb1dd": "Ybodychange",
    "f412f0c0efd54842b30207c845d65cb826217fd6": "Ybodychange",
    "5524adbda991632656059566b69cc2771ba42b7d": "Ybodychange",
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c": "Ybodychange",
    "5d397618f3c86d9c444a4c4c6441267b8a89a21d": "Yformatchange",
    "2e68acb05c7a37396c9efc449e14226b6d3fb7eb": "Ybodychange",
    "853cb5d209e39fdf1944fbd48e1fab349c24b76d": "Ybodychange",
    "24b7eb9a4a8850f2d0988eb81245b4b9a977d53a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f0ff2971eca336e950929b3ee0d80155338bb1dd": {
      "type": "Ybodychange",
      "commitMessage": "\nCruft removal: remove some unused locals and parameters.\n\nR\u003ddimvar\nDELTA\u003d336 (6 added, 108 deleted, 222 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d6092\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2447 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/8/13, 12:15 PM",
      "commitName": "f0ff2971eca336e950929b3ee0d80155338bb1dd",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "12/12/12, 5:18 PM",
      "commitNameOld": "0b054d7d1b185b02c595c646bc0f11a6d809c934",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 26.79,
      "commitsBetweenForRepo": 51,
      "commitsBetweenForFile": 1,
      "actualSource": "private void annotateConstantsByConvention(Node n, Node parent) {\n    Preconditions.checkState(n.isName() || n.isString() || n.isStringKey() || n.isGetterDef() || n.isSetterDef());\n    boolean isObjLitKey \u003d NodeUtil.isObjectLitKey(n);\n    boolean isProperty \u003d isObjLitKey || (parent.isGetProp() \u0026\u0026 parent.getLastChild() \u003d\u003d n);\n    if (n.isName() || isProperty) {\n        boolean isMarkedConstant \u003d n.getBooleanProp(Node.IS_CONSTANT_NAME);\n        if (!isMarkedConstant \u0026\u0026 NodeUtil.isConstantByConvention(compiler.getCodingConvention(), n, parent)) {\n            if (assertOnChange) {\n                String name \u003d n.getString();\n                throw new IllegalStateException(\"Unexpected const change.\\n\" + \"  name: \" + name + \"\\n\" + \"  parent:\" + n.getParent().toStringTree());\n            }\n            n.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/Normalize.java",
      "functionStartLine": 418,
      "functionName": "annotateConstantsByConvention",
      "functionAnnotation": "",
      "functionDoc": "Mark names and properties that are constants by convention.\n",
      "diff": "@@ -1,15 +1,15 @@\n private void annotateConstantsByConvention(Node n, Node parent) {\n     Preconditions.checkState(n.isName() || n.isString() || n.isStringKey() || n.isGetterDef() || n.isSetterDef());\n-    boolean isObjLitKey \u003d NodeUtil.isObjectLitKey(n, parent);\n+    boolean isObjLitKey \u003d NodeUtil.isObjectLitKey(n);\n     boolean isProperty \u003d isObjLitKey || (parent.isGetProp() \u0026\u0026 parent.getLastChild() \u003d\u003d n);\n     if (n.isName() || isProperty) {\n         boolean isMarkedConstant \u003d n.getBooleanProp(Node.IS_CONSTANT_NAME);\n         if (!isMarkedConstant \u0026\u0026 NodeUtil.isConstantByConvention(compiler.getCodingConvention(), n, parent)) {\n             if (assertOnChange) {\n                 String name \u003d n.getString();\n                 throw new IllegalStateException(\"Unexpected const change.\\n\" + \"  name: \" + name + \"\\n\" + \"  parent:\" + n.getParent().toStringTree());\n             }\n             n.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f412f0c0efd54842b30207c845d65cb826217fd6": {
      "type": "Ybodychange",
      "commitMessage": "\nCreate a separate token for object literal keys.\ni was surprised how easy this was\n\nR\u003dacleung,johnlenz\nDELTA\u003d139  (52 added, 26 deleted, 61 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d4618\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1922 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/25/12, 1:34 PM",
      "commitName": "f412f0c0efd54842b30207c845d65cb826217fd6",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "3/12/12, 6:38 PM",
      "commitNameOld": "3844341918881b526ec4fa9c522df7c39d63eb9f",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 43.79,
      "commitsBetweenForRepo": 78,
      "commitsBetweenForFile": 1,
      "actualSource": "private void annotateConstantsByConvention(Node n, Node parent) {\n    Preconditions.checkState(n.isName() || n.isString() || n.isStringKey() || n.isGetterDef() || n.isSetterDef());\n    boolean isObjLitKey \u003d NodeUtil.isObjectLitKey(n, parent);\n    boolean isProperty \u003d isObjLitKey || (parent.isGetProp() \u0026\u0026 parent.getLastChild() \u003d\u003d n);\n    if (n.isName() || isProperty) {\n        boolean isMarkedConstant \u003d n.getBooleanProp(Node.IS_CONSTANT_NAME);\n        if (!isMarkedConstant \u0026\u0026 NodeUtil.isConstantByConvention(compiler.getCodingConvention(), n, parent)) {\n            if (assertOnChange) {\n                String name \u003d n.getString();\n                throw new IllegalStateException(\"Unexpected const change.\\n\" + \"  name: \" + name + \"\\n\" + \"  parent:\" + n.getParent().toStringTree());\n            }\n            n.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/Normalize.java",
      "functionStartLine": 414,
      "functionName": "annotateConstantsByConvention",
      "functionAnnotation": "",
      "functionDoc": "Mark names and properties that are constants by convention.\n",
      "diff": "@@ -1,15 +1,15 @@\n private void annotateConstantsByConvention(Node n, Node parent) {\n-    Preconditions.checkState(n.isName() || n.isString() || n.isGetterDef() || n.isSetterDef());\n+    Preconditions.checkState(n.isName() || n.isString() || n.isStringKey() || n.isGetterDef() || n.isSetterDef());\n     boolean isObjLitKey \u003d NodeUtil.isObjectLitKey(n, parent);\n     boolean isProperty \u003d isObjLitKey || (parent.isGetProp() \u0026\u0026 parent.getLastChild() \u003d\u003d n);\n     if (n.isName() || isProperty) {\n         boolean isMarkedConstant \u003d n.getBooleanProp(Node.IS_CONSTANT_NAME);\n         if (!isMarkedConstant \u0026\u0026 NodeUtil.isConstantByConvention(compiler.getCodingConvention(), n, parent)) {\n             if (assertOnChange) {\n                 String name \u003d n.getString();\n                 throw new IllegalStateException(\"Unexpected const change.\\n\" + \"  name: \" + name + \"\\n\" + \"  parent:\" + n.getParent().toStringTree());\n             }\n             n.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5524adbda991632656059566b69cc2771ba42b7d": {
      "type": "Ybodychange",
      "commitMessage": "\nRename a couple of AST nodes:\nDEFAULT becomes DEFAULT_CASE\nLP becomes PARAM_LIST\nGET becomes GETTER_DEF\nSET becomes SETTER_DEF\n\nR\u003dnicksantos\nDELTA\u003d215  (40 added, 5 deleted, 170 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3695\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1590 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/11/11, 4:42 PM",
      "commitName": "5524adbda991632656059566b69cc2771ba42b7d",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/10/11, 8:36 AM",
      "commitNameOld": "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 1.34,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "private void annotateConstantsByConvention(Node n, Node parent) {\n    Preconditions.checkState(n.isName() || n.isString() || n.isGetterDef() || n.isSetterDef());\n    boolean isObjLitKey \u003d NodeUtil.isObjectLitKey(n, parent);\n    boolean isProperty \u003d isObjLitKey || (parent.isGetProp() \u0026\u0026 parent.getLastChild() \u003d\u003d n);\n    if (n.isName() || isProperty) {\n        boolean isMarkedConstant \u003d n.getBooleanProp(Node.IS_CONSTANT_NAME);\n        if (!isMarkedConstant \u0026\u0026 NodeUtil.isConstantByConvention(compiler.getCodingConvention(), n, parent)) {\n            if (assertOnChange) {\n                String name \u003d n.getString();\n                throw new IllegalStateException(\"Unexpected const change.\\n\" + \"  name: \" + name + \"\\n\" + \"  parent:\" + n.getParent().toStringTree());\n            }\n            n.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/Normalize.java",
      "functionStartLine": 349,
      "functionName": "annotateConstantsByConvention",
      "functionAnnotation": "",
      "functionDoc": "Mark names and properties that are constants by convention.\n",
      "diff": "@@ -1,15 +1,15 @@\n private void annotateConstantsByConvention(Node n, Node parent) {\n-    Preconditions.checkState(n.isName() || n.isString() || n.isGet() || n.isSet());\n+    Preconditions.checkState(n.isName() || n.isString() || n.isGetterDef() || n.isSetterDef());\n     boolean isObjLitKey \u003d NodeUtil.isObjectLitKey(n, parent);\n     boolean isProperty \u003d isObjLitKey || (parent.isGetProp() \u0026\u0026 parent.getLastChild() \u003d\u003d n);\n     if (n.isName() || isProperty) {\n         boolean isMarkedConstant \u003d n.getBooleanProp(Node.IS_CONSTANT_NAME);\n         if (!isMarkedConstant \u0026\u0026 NodeUtil.isConstantByConvention(compiler.getCodingConvention(), n, parent)) {\n             if (assertOnChange) {\n                 String name \u003d n.getString();\n                 throw new IllegalStateException(\"Unexpected const change.\\n\" + \"  name: \" + name + \"\\n\" + \"  parent:\" + n.getParent().toStringTree());\n             }\n             n.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c": {
      "type": "Ybodychange",
      "commitMessage": "\nReplace the bulk of the Node.getType() \u003d\u003d Token.XXX calls with\nNode.isXXX calls.\n\nR\u003dnicksantos\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3677\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1582 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/10/11, 8:36 AM",
      "commitName": "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "10/31/11, 4:59 AM",
      "commitNameOld": "b4bf1efe7524c85fd931c9a2b49ec1aab90261a8",
      "commitAuthorOld": "sjnickerson@google.com",
      "daysBetweenCommits": 10.19,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "actualSource": "private void annotateConstantsByConvention(Node n, Node parent) {\n    Preconditions.checkState(n.isName() || n.isString() || n.isGet() || n.isSet());\n    boolean isObjLitKey \u003d NodeUtil.isObjectLitKey(n, parent);\n    boolean isProperty \u003d isObjLitKey || (parent.isGetProp() \u0026\u0026 parent.getLastChild() \u003d\u003d n);\n    if (n.isName() || isProperty) {\n        boolean isMarkedConstant \u003d n.getBooleanProp(Node.IS_CONSTANT_NAME);\n        if (!isMarkedConstant \u0026\u0026 NodeUtil.isConstantByConvention(compiler.getCodingConvention(), n, parent)) {\n            if (assertOnChange) {\n                String name \u003d n.getString();\n                throw new IllegalStateException(\"Unexpected const change.\\n\" + \"  name: \" + name + \"\\n\" + \"  parent:\" + n.getParent().toStringTree());\n            }\n            n.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/Normalize.java",
      "functionStartLine": 349,
      "functionName": "annotateConstantsByConvention",
      "functionAnnotation": "",
      "functionDoc": "Mark names and properties that are constants by convention.\n",
      "diff": "@@ -1,15 +1,15 @@\n private void annotateConstantsByConvention(Node n, Node parent) {\n-    Preconditions.checkState(n.getType() \u003d\u003d Token.NAME || n.getType() \u003d\u003d Token.STRING || n.getType() \u003d\u003d Token.GET || n.getType() \u003d\u003d Token.SET);\n+    Preconditions.checkState(n.isName() || n.isString() || n.isGet() || n.isSet());\n     boolean isObjLitKey \u003d NodeUtil.isObjectLitKey(n, parent);\n-    boolean isProperty \u003d isObjLitKey || (parent.getType() \u003d\u003d Token.GETPROP \u0026\u0026 parent.getLastChild() \u003d\u003d n);\n-    if (n.getType() \u003d\u003d Token.NAME || isProperty) {\n+    boolean isProperty \u003d isObjLitKey || (parent.isGetProp() \u0026\u0026 parent.getLastChild() \u003d\u003d n);\n+    if (n.isName() || isProperty) {\n         boolean isMarkedConstant \u003d n.getBooleanProp(Node.IS_CONSTANT_NAME);\n         if (!isMarkedConstant \u0026\u0026 NodeUtil.isConstantByConvention(compiler.getCodingConvention(), n, parent)) {\n             if (assertOnChange) {\n                 String name \u003d n.getString();\n                 throw new IllegalStateException(\"Unexpected const change.\\n\" + \"  name: \" + name + \"\\n\" + \"  parent:\" + n.getParent().toStringTree());\n             }\n             n.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5d397618f3c86d9c444a4c4c6441267b8a89a21d": {
      "type": "Yformatchange",
      "commitMessage": "\nNormalize extern VAR declarations\nFixes issue 367.\n\nR\u003dacleung\nDELTA\u003d44  (39 added, 0 deleted, 5 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d750\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@844 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/2/11, 3:30 PM",
      "commitName": "5d397618f3c86d9c444a4c4c6441267b8a89a21d",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "12/17/10, 7:55 AM",
      "commitNameOld": "5cd9c1efe90dc7c1be33cd7f8c1dcbaa9225909e",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 75.32,
      "commitsBetweenForRepo": 189,
      "commitsBetweenForFile": 1,
      "actualSource": "private void annotateConstantsByConvention(Node n, Node parent) {\n    Preconditions.checkState(n.getType() \u003d\u003d Token.NAME || n.getType() \u003d\u003d Token.STRING || n.getType() \u003d\u003d Token.GET || n.getType() \u003d\u003d Token.SET);\n    boolean isObjLitKey \u003d NodeUtil.isObjectLitKey(n, parent);\n    boolean isProperty \u003d isObjLitKey || (parent.getType() \u003d\u003d Token.GETPROP \u0026\u0026 parent.getLastChild() \u003d\u003d n);\n    if (n.getType() \u003d\u003d Token.NAME || isProperty) {\n        boolean isMarkedConstant \u003d n.getBooleanProp(Node.IS_CONSTANT_NAME);\n        if (!isMarkedConstant \u0026\u0026 NodeUtil.isConstantByConvention(compiler.getCodingConvention(), n, parent)) {\n            if (assertOnChange) {\n                String name \u003d n.getString();\n                throw new IllegalStateException(\"Unexpected const change.\\n\" + \"  name: \" + name + \"\\n\" + \"  parent:\" + n.getParent().toStringTree());\n            }\n            n.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/Normalize.java",
      "functionStartLine": 350,
      "functionName": "annotateConstantsByConvention",
      "functionAnnotation": "",
      "functionDoc": "Mark names and properties that are constants by convention.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "2e68acb05c7a37396c9efc449e14226b6d3fb7eb": {
      "type": "Ybodychange",
      "commitMessage": "\nChanges needed to support getters and setters in simple mode.\n\nR\u003dnicksantos\nDELTA\u003d166  (146 added, 2 deleted, 18 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d110\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@617 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/10/10, 9:14 AM",
      "commitName": "2e68acb05c7a37396c9efc449e14226b6d3fb7eb",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "12/9/10, 12:58 PM",
      "commitNameOld": "86caf52b53f53d8b83e9c1092f4b15ddeb6ca5bb",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.84,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private void annotateConstantsByConvention(Node n, Node parent) {\n    Preconditions.checkState(n.getType() \u003d\u003d Token.NAME || n.getType() \u003d\u003d Token.STRING || n.getType() \u003d\u003d Token.GET || n.getType() \u003d\u003d Token.SET);\n    boolean isObjLitKey \u003d NodeUtil.isObjectLitKey(n, parent);\n    boolean isProperty \u003d isObjLitKey || (parent.getType() \u003d\u003d Token.GETPROP \u0026\u0026 parent.getLastChild() \u003d\u003d n);\n    if (n.getType() \u003d\u003d Token.NAME || isProperty) {\n        boolean isMarkedConstant \u003d n.getBooleanProp(Node.IS_CONSTANT_NAME);\n        if (!isMarkedConstant \u0026\u0026 NodeUtil.isConstantByConvention(compiler.getCodingConvention(), n, parent)) {\n            if (assertOnChange) {\n                String name \u003d n.getString();\n                throw new IllegalStateException(\"Unexpected const change.\\n\" + \"  name: \" + name + \"\\n\" + \"  parent:\" + n.getParent().toStringTree());\n            }\n            n.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/Normalize.java",
      "functionStartLine": 344,
      "functionName": "annotateConstantsByConvention",
      "functionAnnotation": "",
      "functionDoc": "Mark names and properties that are constants by convention.\n",
      "diff": "@@ -1,15 +1,15 @@\n private void annotateConstantsByConvention(Node n, Node parent) {\n-    Preconditions.checkState(n.getType() \u003d\u003d Token.NAME || n.getType() \u003d\u003d Token.STRING);\n+    Preconditions.checkState(n.getType() \u003d\u003d Token.NAME || n.getType() \u003d\u003d Token.STRING || n.getType() \u003d\u003d Token.GET || n.getType() \u003d\u003d Token.SET);\n     boolean isObjLitKey \u003d NodeUtil.isObjectLitKey(n, parent);\n     boolean isProperty \u003d isObjLitKey || (parent.getType() \u003d\u003d Token.GETPROP \u0026\u0026 parent.getLastChild() \u003d\u003d n);\n     if (n.getType() \u003d\u003d Token.NAME || isProperty) {\n         boolean isMarkedConstant \u003d n.getBooleanProp(Node.IS_CONSTANT_NAME);\n         if (!isMarkedConstant \u0026\u0026 NodeUtil.isConstantByConvention(compiler.getCodingConvention(), n, parent)) {\n             if (assertOnChange) {\n                 String name \u003d n.getString();\n                 throw new IllegalStateException(\"Unexpected const change.\\n\" + \"  name: \" + name + \"\\n\" + \"  parent:\" + n.getParent().toStringTree());\n             }\n             n.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "853cb5d209e39fdf1944fbd48e1fab349c24b76d": {
      "type": "Ybodychange",
      "commitMessage": "\nfix up const-annotation tracking.\n\nR\u003djohnlenz\nDELTA\u003d192  (89 added, 21 deleted, 82 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1203470\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@554 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/15/10, 10:48 AM",
      "commitName": "853cb5d209e39fdf1944fbd48e1fab349c24b76d",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "11/12/10, 2:28 PM",
      "commitNameOld": "24b7eb9a4a8850f2d0988eb81245b4b9a977d53a",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 2.85,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private void annotateConstantsByConvention(Node n, Node parent) {\n    Preconditions.checkState(n.getType() \u003d\u003d Token.NAME || n.getType() \u003d\u003d Token.STRING);\n    boolean isObjLitKey \u003d NodeUtil.isObjectLitKey(n, parent);\n    boolean isProperty \u003d isObjLitKey || (parent.getType() \u003d\u003d Token.GETPROP \u0026\u0026 parent.getLastChild() \u003d\u003d n);\n    if (n.getType() \u003d\u003d Token.NAME || isProperty) {\n        boolean isMarkedConstant \u003d n.getBooleanProp(Node.IS_CONSTANT_NAME);\n        if (!isMarkedConstant \u0026\u0026 NodeUtil.isConstantByConvention(compiler.getCodingConvention(), n, parent)) {\n            if (assertOnChange) {\n                String name \u003d n.getString();\n                throw new IllegalStateException(\"Unexpected const change.\\n\" + \"  name: \" + name + \"\\n\" + \"  parent:\" + n.getParent().toStringTree());\n            }\n            n.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/Normalize.java",
      "functionStartLine": 340,
      "functionName": "annotateConstantsByConvention",
      "functionAnnotation": "",
      "functionDoc": "Mark names and properties that are constants by convention.\n",
      "diff": "@@ -1,10 +1,15 @@\n private void annotateConstantsByConvention(Node n, Node parent) {\n     Preconditions.checkState(n.getType() \u003d\u003d Token.NAME || n.getType() \u003d\u003d Token.STRING);\n     boolean isObjLitKey \u003d NodeUtil.isObjectLitKey(n, parent);\n     boolean isProperty \u003d isObjLitKey || (parent.getType() \u003d\u003d Token.GETPROP \u0026\u0026 parent.getLastChild() \u003d\u003d n);\n     if (n.getType() \u003d\u003d Token.NAME || isProperty) {\n-        if (NodeUtil.isConstantByConvention(compiler.getCodingConvention(), n, parent)) {\n+        boolean isMarkedConstant \u003d n.getBooleanProp(Node.IS_CONSTANT_NAME);\n+        if (!isMarkedConstant \u0026\u0026 NodeUtil.isConstantByConvention(compiler.getCodingConvention(), n, parent)) {\n+            if (assertOnChange) {\n+                String name \u003d n.getString();\n+                throw new IllegalStateException(\"Unexpected const change.\\n\" + \"  name: \" + name + \"\\n\" + \"  parent:\" + n.getParent().toStringTree());\n+            }\n             n.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "24b7eb9a4a8850f2d0988eb81245b4b9a977d53a": {
      "type": "Yintroduced",
      "commitMessage": "\nClean up constant annotations so that all constant annotations\nare added during the normalize() phase.\nThis was really confusing to me, because certain kinds\nof constant annotations would work pre-normalize, and certain kinds\nwould work post-normalize.\n\nR\u003djohnlenz\nDELTA\u003d204  (114 added, 75 deleted, 15 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1188239\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@551 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/12/10, 2:28 PM",
      "commitName": "24b7eb9a4a8850f2d0988eb81245b4b9a977d53a",
      "commitAuthor": "nicksantos@google.com",
      "diff": "@@ -0,0 +1,10 @@\n+private void annotateConstantsByConvention(Node n, Node parent) {\n+    Preconditions.checkState(n.getType() \u003d\u003d Token.NAME || n.getType() \u003d\u003d Token.STRING);\n+    boolean isObjLitKey \u003d NodeUtil.isObjectLitKey(n, parent);\n+    boolean isProperty \u003d isObjLitKey || (parent.getType() \u003d\u003d Token.GETPROP \u0026\u0026 parent.getLastChild() \u003d\u003d n);\n+    if (n.getType() \u003d\u003d Token.NAME || isProperty) {\n+        if (NodeUtil.isConstantByConvention(compiler.getCodingConvention(), n, parent)) {\n+            n.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void annotateConstantsByConvention(Node n, Node parent) {\n    Preconditions.checkState(n.getType() \u003d\u003d Token.NAME || n.getType() \u003d\u003d Token.STRING);\n    boolean isObjLitKey \u003d NodeUtil.isObjectLitKey(n, parent);\n    boolean isProperty \u003d isObjLitKey || (parent.getType() \u003d\u003d Token.GETPROP \u0026\u0026 parent.getLastChild() \u003d\u003d n);\n    if (n.getType() \u003d\u003d Token.NAME || isProperty) {\n        if (NodeUtil.isConstantByConvention(compiler.getCodingConvention(), n, parent)) {\n            n.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/Normalize.java",
      "functionStartLine": 340,
      "functionName": "annotateConstantsByConvention",
      "functionAnnotation": "",
      "functionDoc": "Mark names and properties that are constants by convention.\n"
    }
  }
}