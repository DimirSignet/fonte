{
  "origin": "codeshovel",
  "repositoryName": "Closure-121b",
  "repositoryPath": "/tmp/Closure-121b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ParserRunner.java",
  "functionName": "parse",
  "functionId": "parse___sourceFile-StaticSourceFile__sourceString-String__config-Config__errorReporter-ErrorReporter__logger-Logger",
  "sourceFilePath": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
  "functionAnnotation": "",
  "functionDoc": "Parses the JavaScript text given by a reader.\n\n@param sourceString Source code from the file.\n@param errorReporter An error.\n@param logger A logger.\n@return The AST of the given text.\n@throws IOException\n",
  "functionStartLine": 107,
  "functionEndLine": 147,
  "numCommitsSeen": 46,
  "timeTaken": 3047,
  "changeHistory": [
    "8e80f7108073f1ecd04a9a5ff26c2876617a0b9a",
    "07d6ec66d8061f22a28ed9425b1e4fdc31a32eab",
    "7f82eef2363bde8940aa2abfc5658ed164a49c36",
    "ba8491b49dc1f369d40d3a4e1e614d0637a8a490",
    "3587cc3bb550dadee3c9aeac44041aa29087e74e",
    "51242114ce184fe97fe8f9572c76a41878326062",
    "5f09c4d523e715607f7f74854c4916e279b5b562",
    "6b825fb7dbe65d4523f2af9c850ed7e7f43862c2",
    "76abdf11394c0e7515ae63335676ea3657badb45",
    "9320feca198878ca9464aae089399a8891c314d7",
    "e4d80a3331cf7a9c1b7bdc9e2082d330381c3719",
    "82d3c01785f8b25113ca3fd7cc8b37da5d8a44a4",
    "7fbff508f8590793108aa192a1898dc617e7b040",
    "295c978bfbf070d28214b27239cd26aaea58b6d4",
    "b8c52bf5e76948ee8d561fa55a36cc6c9f5d0c68",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "8e80f7108073f1ecd04a9a5ff26c2876617a0b9a": "Ybodychange",
    "07d6ec66d8061f22a28ed9425b1e4fdc31a32eab": "Ymultichange(Yreturntypechange,Ybodychange)",
    "7f82eef2363bde8940aa2abfc5658ed164a49c36": "Ymultichange(Yreturntypechange,Ybodychange)",
    "ba8491b49dc1f369d40d3a4e1e614d0637a8a490": "Ymultichange(Yreturntypechange,Ybodychange)",
    "3587cc3bb550dadee3c9aeac44041aa29087e74e": "Ybodychange",
    "51242114ce184fe97fe8f9572c76a41878326062": "Ybodychange",
    "5f09c4d523e715607f7f74854c4916e279b5b562": "Ybodychange",
    "6b825fb7dbe65d4523f2af9c850ed7e7f43862c2": "Ybodychange",
    "76abdf11394c0e7515ae63335676ea3657badb45": "Ydocchange",
    "9320feca198878ca9464aae089399a8891c314d7": "Ymultichange(Yparameterchange,Ybodychange)",
    "e4d80a3331cf7a9c1b7bdc9e2082d330381c3719": "Ybodychange",
    "82d3c01785f8b25113ca3fd7cc8b37da5d8a44a4": "Ybodychange",
    "7fbff508f8590793108aa192a1898dc617e7b040": "Ybodychange",
    "295c978bfbf070d28214b27239cd26aaea58b6d4": "Ydocchange",
    "b8c52bf5e76948ee8d561fa55a36cc6c9f5d0c68": "Ymultichange(Yparameterchange,Ybodychange)",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8e80f7108073f1ecd04a9a5ff26c2876617a0b9a": {
      "type": "Ybodychange",
      "commitMessage": "This does three things:\n1) It makes using es3 keywords and reserved words non fatal by default, it rewrites it to be a quoted property access.\n2) It improves the error message displayed when a property like this is seen.\n3) It introduces an ES3 diagnostic group that can be used to make these warnings errors again.\n\nFixes issue 1030\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID\u003d48372507\n",
      "commitDate": "6/21/13, 4:44 PM",
      "commitName": "8e80f7108073f1ecd04a9a5ff26c2876617a0b9a",
      "commitAuthor": "Ben Lickly",
      "commitDateOld": "3/20/13, 9:50 AM",
      "commitNameOld": "a1637bfdf32282f81ef6c71adec0b5bfed597119",
      "commitAuthorOld": "Ben Lickly",
      "daysBetweenCommits": 93.29,
      "commitsBetweenForRepo": 172,
      "commitsBetweenForFile": 1,
      "actualSource": "public static ParseResult parse(StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n    Context cx \u003d Context.enter();\n    cx.setErrorReporter(errorReporter);\n    cx.setLanguageVersion(Context.VERSION_1_5);\n    CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n    compilerEnv.initFromContext(cx);\n    compilerEnv.setRecordingComments(true);\n    compilerEnv.setRecordingLocalJsDocComments(true);\n    compilerEnv.setWarnTrailingComma(config.languageMode \u003d\u003d LanguageMode.ECMASCRIPT3);\n    compilerEnv.setReservedKeywordAsIdentifier(true);\n    compilerEnv.setAllowMemberExprAsFunctionName(false);\n    compilerEnv.setIdeMode(config.isIdeMode);\n    compilerEnv.setRecoverFromErrors(config.isIdeMode);\n    Parser p \u003d new Parser(compilerEnv, errorReporter);\n    AstRoot astRoot \u003d null;\n    try {\n        astRoot \u003d p.parse(sourceString, sourceFile.getName(), 1);\n    } catch (EvaluatorException e) {\n        logger.info(\"Error parsing \" + sourceFile.getName() + \": \" + e.getMessage());\n    } finally {\n        Context.exit();\n    }\n    Node root \u003d null;\n    if (astRoot !\u003d null) {\n        root \u003d IRFactory.transformTree(astRoot, sourceFile, sourceString, config, errorReporter);\n        root.setIsSyntheticBlock(true);\n    }\n    return new ParseResult(root, astRoot);\n}",
      "path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
      "functionStartLine": 107,
      "functionName": "parse",
      "functionAnnotation": "",
      "functionDoc": "Parses the JavaScript text given by a reader.\n\n@param sourceString Source code from the file.\n@param errorReporter An error.\n@param logger A logger.\n@return The AST of the given text.\n@throws IOException\n",
      "diff": "@@ -1,30 +1,29 @@\n public static ParseResult parse(StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n     Context cx \u003d Context.enter();\n     cx.setErrorReporter(errorReporter);\n     cx.setLanguageVersion(Context.VERSION_1_5);\n     CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n     compilerEnv.initFromContext(cx);\n     compilerEnv.setRecordingComments(true);\n     compilerEnv.setRecordingLocalJsDocComments(true);\n     compilerEnv.setWarnTrailingComma(config.languageMode \u003d\u003d LanguageMode.ECMASCRIPT3);\n-    boolean acceptEs5 \u003d config.isIdeMode || config.languageMode !\u003d LanguageMode.ECMASCRIPT3;\n-    compilerEnv.setReservedKeywordAsIdentifier(acceptEs5);\n+    compilerEnv.setReservedKeywordAsIdentifier(true);\n     compilerEnv.setAllowMemberExprAsFunctionName(false);\n     compilerEnv.setIdeMode(config.isIdeMode);\n     compilerEnv.setRecoverFromErrors(config.isIdeMode);\n     Parser p \u003d new Parser(compilerEnv, errorReporter);\n     AstRoot astRoot \u003d null;\n     try {\n         astRoot \u003d p.parse(sourceString, sourceFile.getName(), 1);\n     } catch (EvaluatorException e) {\n         logger.info(\"Error parsing \" + sourceFile.getName() + \": \" + e.getMessage());\n     } finally {\n         Context.exit();\n     }\n     Node root \u003d null;\n     if (astRoot !\u003d null) {\n         root \u003d IRFactory.transformTree(astRoot, sourceFile, sourceString, config, errorReporter);\n         root.setIsSyntheticBlock(true);\n     }\n     return new ParseResult(root, astRoot);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "07d6ec66d8061f22a28ed9425b1e4fdc31a32eab": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "\nEnable preserving old Asts when compiling for clients which can use the extra position info.\n\nR\u003djohnlenz,dimvar,nicksantos\nDELTA\u003d94 (85 added, 0 deleted, 9 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5964\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2389 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/11/12, 4:38 PM",
      "commitName": "07d6ec66d8061f22a28ed9425b1e4fdc31a32eab",
      "commitAuthor": "peterhal@google.com",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "\nEnable preserving old Asts when compiling for clients which can use the extra position info.\n\nR\u003djohnlenz,dimvar,nicksantos\nDELTA\u003d94 (85 added, 0 deleted, 9 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5964\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2389 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "12/11/12, 4:38 PM",
          "commitName": "07d6ec66d8061f22a28ed9425b1e4fdc31a32eab",
          "commitAuthor": "peterhal@google.com",
          "commitDateOld": "12/10/12, 4:51 PM",
          "commitNameOld": "7f82eef2363bde8940aa2abfc5658ed164a49c36",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 0.99,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "public static ParseResult parse(StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n    Context cx \u003d Context.enter();\n    cx.setErrorReporter(errorReporter);\n    cx.setLanguageVersion(Context.VERSION_1_5);\n    CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n    compilerEnv.initFromContext(cx);\n    compilerEnv.setRecordingComments(true);\n    compilerEnv.setRecordingLocalJsDocComments(true);\n    compilerEnv.setWarnTrailingComma(config.languageMode \u003d\u003d LanguageMode.ECMASCRIPT3);\n    boolean acceptEs5 \u003d config.isIdeMode || config.languageMode !\u003d LanguageMode.ECMASCRIPT3;\n    compilerEnv.setReservedKeywordAsIdentifier(acceptEs5);\n    compilerEnv.setAllowMemberExprAsFunctionName(false);\n    compilerEnv.setIdeMode(config.isIdeMode);\n    compilerEnv.setRecoverFromErrors(config.isIdeMode);\n    Parser p \u003d new Parser(compilerEnv, errorReporter);\n    AstRoot astRoot \u003d null;\n    try {\n        astRoot \u003d p.parse(sourceString, sourceFile.getName(), 1);\n    } catch (EvaluatorException e) {\n        logger.info(\"Error parsing \" + sourceFile.getName() + \": \" + e.getMessage());\n    } finally {\n        Context.exit();\n    }\n    Node root \u003d null;\n    if (astRoot !\u003d null) {\n        root \u003d IRFactory.transformTree(astRoot, sourceFile, sourceString, config, errorReporter);\n        root.setIsSyntheticBlock(true);\n    }\n    return new ParseResult(root, astRoot);\n}",
          "path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
          "functionStartLine": 104,
          "functionName": "parse",
          "functionAnnotation": "",
          "functionDoc": "Parses the JavaScript text given by a reader.\n\n@param sourceString Source code from the file.\n@param errorReporter An error.\n@param logger A logger.\n@return The AST of the given text.\n@throws IOException\n",
          "diff": "@@ -1,30 +1,30 @@\n-public static Node parse(StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n+public static ParseResult parse(StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n     Context cx \u003d Context.enter();\n     cx.setErrorReporter(errorReporter);\n     cx.setLanguageVersion(Context.VERSION_1_5);\n     CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n     compilerEnv.initFromContext(cx);\n     compilerEnv.setRecordingComments(true);\n     compilerEnv.setRecordingLocalJsDocComments(true);\n     compilerEnv.setWarnTrailingComma(config.languageMode \u003d\u003d LanguageMode.ECMASCRIPT3);\n     boolean acceptEs5 \u003d config.isIdeMode || config.languageMode !\u003d LanguageMode.ECMASCRIPT3;\n     compilerEnv.setReservedKeywordAsIdentifier(acceptEs5);\n     compilerEnv.setAllowMemberExprAsFunctionName(false);\n     compilerEnv.setIdeMode(config.isIdeMode);\n     compilerEnv.setRecoverFromErrors(config.isIdeMode);\n     Parser p \u003d new Parser(compilerEnv, errorReporter);\n     AstRoot astRoot \u003d null;\n     try {\n         astRoot \u003d p.parse(sourceString, sourceFile.getName(), 1);\n     } catch (EvaluatorException e) {\n         logger.info(\"Error parsing \" + sourceFile.getName() + \": \" + e.getMessage());\n     } finally {\n         Context.exit();\n     }\n     Node root \u003d null;\n     if (astRoot !\u003d null) {\n         root \u003d IRFactory.transformTree(astRoot, sourceFile, sourceString, config, errorReporter);\n         root.setIsSyntheticBlock(true);\n     }\n-    return root;\n+    return new ParseResult(root, astRoot);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Node",
            "newValue": "ParseResult"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nEnable preserving old Asts when compiling for clients which can use the extra position info.\n\nR\u003djohnlenz,dimvar,nicksantos\nDELTA\u003d94 (85 added, 0 deleted, 9 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5964\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2389 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "12/11/12, 4:38 PM",
          "commitName": "07d6ec66d8061f22a28ed9425b1e4fdc31a32eab",
          "commitAuthor": "peterhal@google.com",
          "commitDateOld": "12/10/12, 4:51 PM",
          "commitNameOld": "7f82eef2363bde8940aa2abfc5658ed164a49c36",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 0.99,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "public static ParseResult parse(StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n    Context cx \u003d Context.enter();\n    cx.setErrorReporter(errorReporter);\n    cx.setLanguageVersion(Context.VERSION_1_5);\n    CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n    compilerEnv.initFromContext(cx);\n    compilerEnv.setRecordingComments(true);\n    compilerEnv.setRecordingLocalJsDocComments(true);\n    compilerEnv.setWarnTrailingComma(config.languageMode \u003d\u003d LanguageMode.ECMASCRIPT3);\n    boolean acceptEs5 \u003d config.isIdeMode || config.languageMode !\u003d LanguageMode.ECMASCRIPT3;\n    compilerEnv.setReservedKeywordAsIdentifier(acceptEs5);\n    compilerEnv.setAllowMemberExprAsFunctionName(false);\n    compilerEnv.setIdeMode(config.isIdeMode);\n    compilerEnv.setRecoverFromErrors(config.isIdeMode);\n    Parser p \u003d new Parser(compilerEnv, errorReporter);\n    AstRoot astRoot \u003d null;\n    try {\n        astRoot \u003d p.parse(sourceString, sourceFile.getName(), 1);\n    } catch (EvaluatorException e) {\n        logger.info(\"Error parsing \" + sourceFile.getName() + \": \" + e.getMessage());\n    } finally {\n        Context.exit();\n    }\n    Node root \u003d null;\n    if (astRoot !\u003d null) {\n        root \u003d IRFactory.transformTree(astRoot, sourceFile, sourceString, config, errorReporter);\n        root.setIsSyntheticBlock(true);\n    }\n    return new ParseResult(root, astRoot);\n}",
          "path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
          "functionStartLine": 104,
          "functionName": "parse",
          "functionAnnotation": "",
          "functionDoc": "Parses the JavaScript text given by a reader.\n\n@param sourceString Source code from the file.\n@param errorReporter An error.\n@param logger A logger.\n@return The AST of the given text.\n@throws IOException\n",
          "diff": "@@ -1,30 +1,30 @@\n-public static Node parse(StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n+public static ParseResult parse(StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n     Context cx \u003d Context.enter();\n     cx.setErrorReporter(errorReporter);\n     cx.setLanguageVersion(Context.VERSION_1_5);\n     CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n     compilerEnv.initFromContext(cx);\n     compilerEnv.setRecordingComments(true);\n     compilerEnv.setRecordingLocalJsDocComments(true);\n     compilerEnv.setWarnTrailingComma(config.languageMode \u003d\u003d LanguageMode.ECMASCRIPT3);\n     boolean acceptEs5 \u003d config.isIdeMode || config.languageMode !\u003d LanguageMode.ECMASCRIPT3;\n     compilerEnv.setReservedKeywordAsIdentifier(acceptEs5);\n     compilerEnv.setAllowMemberExprAsFunctionName(false);\n     compilerEnv.setIdeMode(config.isIdeMode);\n     compilerEnv.setRecoverFromErrors(config.isIdeMode);\n     Parser p \u003d new Parser(compilerEnv, errorReporter);\n     AstRoot astRoot \u003d null;\n     try {\n         astRoot \u003d p.parse(sourceString, sourceFile.getName(), 1);\n     } catch (EvaluatorException e) {\n         logger.info(\"Error parsing \" + sourceFile.getName() + \": \" + e.getMessage());\n     } finally {\n         Context.exit();\n     }\n     Node root \u003d null;\n     if (astRoot !\u003d null) {\n         root \u003d IRFactory.transformTree(astRoot, sourceFile, sourceString, config, errorReporter);\n         root.setIsSyntheticBlock(true);\n     }\n-    return root;\n+    return new ParseResult(root, astRoot);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "7f82eef2363bde8940aa2abfc5658ed164a49c36": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "\nAutomated g4 rollback \n\n*** Reason for rollback ***\n\nbroke tests\n\n*** Original change description ***\n\nEnable preserving old Asts when compiling for clients which can use the extra position info.\n\nDELTA\u003d92  (0 added, 85 deleted, 7 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5956\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2383 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/10/12, 4:51 PM",
      "commitName": "7f82eef2363bde8940aa2abfc5658ed164a49c36",
      "commitAuthor": "nicksantos@google.com",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "\nAutomated g4 rollback \n\n*** Reason for rollback ***\n\nbroke tests\n\n*** Original change description ***\n\nEnable preserving old Asts when compiling for clients which can use the extra position info.\n\nDELTA\u003d92  (0 added, 85 deleted, 7 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5956\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2383 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "12/10/12, 4:51 PM",
          "commitName": "7f82eef2363bde8940aa2abfc5658ed164a49c36",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "12/10/12, 3:14 PM",
          "commitNameOld": "ba8491b49dc1f369d40d3a4e1e614d0637a8a490",
          "commitAuthorOld": "peterhal@google.com",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static Node parse(StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n    Context cx \u003d Context.enter();\n    cx.setErrorReporter(errorReporter);\n    cx.setLanguageVersion(Context.VERSION_1_5);\n    CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n    compilerEnv.initFromContext(cx);\n    compilerEnv.setRecordingComments(true);\n    compilerEnv.setRecordingLocalJsDocComments(true);\n    compilerEnv.setWarnTrailingComma(config.languageMode \u003d\u003d LanguageMode.ECMASCRIPT3);\n    boolean acceptEs5 \u003d config.isIdeMode || config.languageMode !\u003d LanguageMode.ECMASCRIPT3;\n    compilerEnv.setReservedKeywordAsIdentifier(acceptEs5);\n    compilerEnv.setAllowMemberExprAsFunctionName(false);\n    compilerEnv.setIdeMode(config.isIdeMode);\n    compilerEnv.setRecoverFromErrors(config.isIdeMode);\n    Parser p \u003d new Parser(compilerEnv, errorReporter);\n    AstRoot astRoot \u003d null;\n    try {\n        astRoot \u003d p.parse(sourceString, sourceFile.getName(), 1);\n    } catch (EvaluatorException e) {\n        logger.info(\"Error parsing \" + sourceFile.getName() + \": \" + e.getMessage());\n    } finally {\n        Context.exit();\n    }\n    Node root \u003d null;\n    if (astRoot !\u003d null) {\n        root \u003d IRFactory.transformTree(astRoot, sourceFile, sourceString, config, errorReporter);\n        root.setIsSyntheticBlock(true);\n    }\n    return root;\n}",
          "path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
          "functionStartLine": 104,
          "functionName": "parse",
          "functionAnnotation": "",
          "functionDoc": "Parses the JavaScript text given by a reader.\n\n@param sourceString Source code from the file.\n@param errorReporter An error.\n@param logger A logger.\n@return The AST of the given text.\n@throws IOException\n",
          "diff": "@@ -1,30 +1,30 @@\n-public static ParseResult parse(StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n+public static Node parse(StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n     Context cx \u003d Context.enter();\n     cx.setErrorReporter(errorReporter);\n     cx.setLanguageVersion(Context.VERSION_1_5);\n     CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n     compilerEnv.initFromContext(cx);\n     compilerEnv.setRecordingComments(true);\n     compilerEnv.setRecordingLocalJsDocComments(true);\n     compilerEnv.setWarnTrailingComma(config.languageMode \u003d\u003d LanguageMode.ECMASCRIPT3);\n     boolean acceptEs5 \u003d config.isIdeMode || config.languageMode !\u003d LanguageMode.ECMASCRIPT3;\n     compilerEnv.setReservedKeywordAsIdentifier(acceptEs5);\n     compilerEnv.setAllowMemberExprAsFunctionName(false);\n     compilerEnv.setIdeMode(config.isIdeMode);\n     compilerEnv.setRecoverFromErrors(config.isIdeMode);\n     Parser p \u003d new Parser(compilerEnv, errorReporter);\n     AstRoot astRoot \u003d null;\n     try {\n         astRoot \u003d p.parse(sourceString, sourceFile.getName(), 1);\n     } catch (EvaluatorException e) {\n         logger.info(\"Error parsing \" + sourceFile.getName() + \": \" + e.getMessage());\n     } finally {\n         Context.exit();\n     }\n     Node root \u003d null;\n     if (astRoot !\u003d null) {\n         root \u003d IRFactory.transformTree(astRoot, sourceFile, sourceString, config, errorReporter);\n         root.setIsSyntheticBlock(true);\n     }\n-    return new ParseResult(root, astRoot);\n+    return root;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "ParseResult",
            "newValue": "Node"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nAutomated g4 rollback \n\n*** Reason for rollback ***\n\nbroke tests\n\n*** Original change description ***\n\nEnable preserving old Asts when compiling for clients which can use the extra position info.\n\nDELTA\u003d92  (0 added, 85 deleted, 7 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5956\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2383 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "12/10/12, 4:51 PM",
          "commitName": "7f82eef2363bde8940aa2abfc5658ed164a49c36",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "12/10/12, 3:14 PM",
          "commitNameOld": "ba8491b49dc1f369d40d3a4e1e614d0637a8a490",
          "commitAuthorOld": "peterhal@google.com",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static Node parse(StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n    Context cx \u003d Context.enter();\n    cx.setErrorReporter(errorReporter);\n    cx.setLanguageVersion(Context.VERSION_1_5);\n    CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n    compilerEnv.initFromContext(cx);\n    compilerEnv.setRecordingComments(true);\n    compilerEnv.setRecordingLocalJsDocComments(true);\n    compilerEnv.setWarnTrailingComma(config.languageMode \u003d\u003d LanguageMode.ECMASCRIPT3);\n    boolean acceptEs5 \u003d config.isIdeMode || config.languageMode !\u003d LanguageMode.ECMASCRIPT3;\n    compilerEnv.setReservedKeywordAsIdentifier(acceptEs5);\n    compilerEnv.setAllowMemberExprAsFunctionName(false);\n    compilerEnv.setIdeMode(config.isIdeMode);\n    compilerEnv.setRecoverFromErrors(config.isIdeMode);\n    Parser p \u003d new Parser(compilerEnv, errorReporter);\n    AstRoot astRoot \u003d null;\n    try {\n        astRoot \u003d p.parse(sourceString, sourceFile.getName(), 1);\n    } catch (EvaluatorException e) {\n        logger.info(\"Error parsing \" + sourceFile.getName() + \": \" + e.getMessage());\n    } finally {\n        Context.exit();\n    }\n    Node root \u003d null;\n    if (astRoot !\u003d null) {\n        root \u003d IRFactory.transformTree(astRoot, sourceFile, sourceString, config, errorReporter);\n        root.setIsSyntheticBlock(true);\n    }\n    return root;\n}",
          "path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
          "functionStartLine": 104,
          "functionName": "parse",
          "functionAnnotation": "",
          "functionDoc": "Parses the JavaScript text given by a reader.\n\n@param sourceString Source code from the file.\n@param errorReporter An error.\n@param logger A logger.\n@return The AST of the given text.\n@throws IOException\n",
          "diff": "@@ -1,30 +1,30 @@\n-public static ParseResult parse(StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n+public static Node parse(StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n     Context cx \u003d Context.enter();\n     cx.setErrorReporter(errorReporter);\n     cx.setLanguageVersion(Context.VERSION_1_5);\n     CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n     compilerEnv.initFromContext(cx);\n     compilerEnv.setRecordingComments(true);\n     compilerEnv.setRecordingLocalJsDocComments(true);\n     compilerEnv.setWarnTrailingComma(config.languageMode \u003d\u003d LanguageMode.ECMASCRIPT3);\n     boolean acceptEs5 \u003d config.isIdeMode || config.languageMode !\u003d LanguageMode.ECMASCRIPT3;\n     compilerEnv.setReservedKeywordAsIdentifier(acceptEs5);\n     compilerEnv.setAllowMemberExprAsFunctionName(false);\n     compilerEnv.setIdeMode(config.isIdeMode);\n     compilerEnv.setRecoverFromErrors(config.isIdeMode);\n     Parser p \u003d new Parser(compilerEnv, errorReporter);\n     AstRoot astRoot \u003d null;\n     try {\n         astRoot \u003d p.parse(sourceString, sourceFile.getName(), 1);\n     } catch (EvaluatorException e) {\n         logger.info(\"Error parsing \" + sourceFile.getName() + \": \" + e.getMessage());\n     } finally {\n         Context.exit();\n     }\n     Node root \u003d null;\n     if (astRoot !\u003d null) {\n         root \u003d IRFactory.transformTree(astRoot, sourceFile, sourceString, config, errorReporter);\n         root.setIsSyntheticBlock(true);\n     }\n-    return new ParseResult(root, astRoot);\n+    return root;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "ba8491b49dc1f369d40d3a4e1e614d0637a8a490": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "\nEnable preserving old Asts when compiling for clients which can use the extra position info.\n\nR\u003djohnlenz,dimvar\nDELTA\u003d92  (85 added, 0 deleted, 7 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5955\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2382 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/10/12, 3:14 PM",
      "commitName": "ba8491b49dc1f369d40d3a4e1e614d0637a8a490",
      "commitAuthor": "peterhal@google.com",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "\nEnable preserving old Asts when compiling for clients which can use the extra position info.\n\nR\u003djohnlenz,dimvar\nDELTA\u003d92  (85 added, 0 deleted, 7 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5955\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2382 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "12/10/12, 3:14 PM",
          "commitName": "ba8491b49dc1f369d40d3a4e1e614d0637a8a490",
          "commitAuthor": "peterhal@google.com",
          "commitDateOld": "5/10/12, 2:05 PM",
          "commitNameOld": "3587cc3bb550dadee3c9aeac44041aa29087e74e",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 214.09,
          "commitsBetweenForRepo": 389,
          "commitsBetweenForFile": 1,
          "actualSource": "public static ParseResult parse(StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n    Context cx \u003d Context.enter();\n    cx.setErrorReporter(errorReporter);\n    cx.setLanguageVersion(Context.VERSION_1_5);\n    CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n    compilerEnv.initFromContext(cx);\n    compilerEnv.setRecordingComments(true);\n    compilerEnv.setRecordingLocalJsDocComments(true);\n    compilerEnv.setWarnTrailingComma(config.languageMode \u003d\u003d LanguageMode.ECMASCRIPT3);\n    boolean acceptEs5 \u003d config.isIdeMode || config.languageMode !\u003d LanguageMode.ECMASCRIPT3;\n    compilerEnv.setReservedKeywordAsIdentifier(acceptEs5);\n    compilerEnv.setAllowMemberExprAsFunctionName(false);\n    compilerEnv.setIdeMode(config.isIdeMode);\n    compilerEnv.setRecoverFromErrors(config.isIdeMode);\n    Parser p \u003d new Parser(compilerEnv, errorReporter);\n    AstRoot astRoot \u003d null;\n    try {\n        astRoot \u003d p.parse(sourceString, sourceFile.getName(), 1);\n    } catch (EvaluatorException e) {\n        logger.info(\"Error parsing \" + sourceFile.getName() + \": \" + e.getMessage());\n    } finally {\n        Context.exit();\n    }\n    Node root \u003d null;\n    if (astRoot !\u003d null) {\n        root \u003d IRFactory.transformTree(astRoot, sourceFile, sourceString, config, errorReporter);\n        root.setIsSyntheticBlock(true);\n    }\n    return new ParseResult(root, astRoot);\n}",
          "path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
          "functionStartLine": 104,
          "functionName": "parse",
          "functionAnnotation": "",
          "functionDoc": "Parses the JavaScript text given by a reader.\n\n@param sourceString Source code from the file.\n@param errorReporter An error.\n@param logger A logger.\n@return The AST of the given text.\n@throws IOException\n",
          "diff": "@@ -1,30 +1,30 @@\n-public static Node parse(StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n+public static ParseResult parse(StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n     Context cx \u003d Context.enter();\n     cx.setErrorReporter(errorReporter);\n     cx.setLanguageVersion(Context.VERSION_1_5);\n     CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n     compilerEnv.initFromContext(cx);\n     compilerEnv.setRecordingComments(true);\n     compilerEnv.setRecordingLocalJsDocComments(true);\n     compilerEnv.setWarnTrailingComma(config.languageMode \u003d\u003d LanguageMode.ECMASCRIPT3);\n     boolean acceptEs5 \u003d config.isIdeMode || config.languageMode !\u003d LanguageMode.ECMASCRIPT3;\n     compilerEnv.setReservedKeywordAsIdentifier(acceptEs5);\n     compilerEnv.setAllowMemberExprAsFunctionName(false);\n     compilerEnv.setIdeMode(config.isIdeMode);\n     compilerEnv.setRecoverFromErrors(config.isIdeMode);\n     Parser p \u003d new Parser(compilerEnv, errorReporter);\n     AstRoot astRoot \u003d null;\n     try {\n         astRoot \u003d p.parse(sourceString, sourceFile.getName(), 1);\n     } catch (EvaluatorException e) {\n         logger.info(\"Error parsing \" + sourceFile.getName() + \": \" + e.getMessage());\n     } finally {\n         Context.exit();\n     }\n     Node root \u003d null;\n     if (astRoot !\u003d null) {\n         root \u003d IRFactory.transformTree(astRoot, sourceFile, sourceString, config, errorReporter);\n         root.setIsSyntheticBlock(true);\n     }\n-    return root;\n+    return new ParseResult(root, astRoot);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Node",
            "newValue": "ParseResult"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nEnable preserving old Asts when compiling for clients which can use the extra position info.\n\nR\u003djohnlenz,dimvar\nDELTA\u003d92  (85 added, 0 deleted, 7 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5955\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2382 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "12/10/12, 3:14 PM",
          "commitName": "ba8491b49dc1f369d40d3a4e1e614d0637a8a490",
          "commitAuthor": "peterhal@google.com",
          "commitDateOld": "5/10/12, 2:05 PM",
          "commitNameOld": "3587cc3bb550dadee3c9aeac44041aa29087e74e",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 214.09,
          "commitsBetweenForRepo": 389,
          "commitsBetweenForFile": 1,
          "actualSource": "public static ParseResult parse(StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n    Context cx \u003d Context.enter();\n    cx.setErrorReporter(errorReporter);\n    cx.setLanguageVersion(Context.VERSION_1_5);\n    CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n    compilerEnv.initFromContext(cx);\n    compilerEnv.setRecordingComments(true);\n    compilerEnv.setRecordingLocalJsDocComments(true);\n    compilerEnv.setWarnTrailingComma(config.languageMode \u003d\u003d LanguageMode.ECMASCRIPT3);\n    boolean acceptEs5 \u003d config.isIdeMode || config.languageMode !\u003d LanguageMode.ECMASCRIPT3;\n    compilerEnv.setReservedKeywordAsIdentifier(acceptEs5);\n    compilerEnv.setAllowMemberExprAsFunctionName(false);\n    compilerEnv.setIdeMode(config.isIdeMode);\n    compilerEnv.setRecoverFromErrors(config.isIdeMode);\n    Parser p \u003d new Parser(compilerEnv, errorReporter);\n    AstRoot astRoot \u003d null;\n    try {\n        astRoot \u003d p.parse(sourceString, sourceFile.getName(), 1);\n    } catch (EvaluatorException e) {\n        logger.info(\"Error parsing \" + sourceFile.getName() + \": \" + e.getMessage());\n    } finally {\n        Context.exit();\n    }\n    Node root \u003d null;\n    if (astRoot !\u003d null) {\n        root \u003d IRFactory.transformTree(astRoot, sourceFile, sourceString, config, errorReporter);\n        root.setIsSyntheticBlock(true);\n    }\n    return new ParseResult(root, astRoot);\n}",
          "path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
          "functionStartLine": 104,
          "functionName": "parse",
          "functionAnnotation": "",
          "functionDoc": "Parses the JavaScript text given by a reader.\n\n@param sourceString Source code from the file.\n@param errorReporter An error.\n@param logger A logger.\n@return The AST of the given text.\n@throws IOException\n",
          "diff": "@@ -1,30 +1,30 @@\n-public static Node parse(StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n+public static ParseResult parse(StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n     Context cx \u003d Context.enter();\n     cx.setErrorReporter(errorReporter);\n     cx.setLanguageVersion(Context.VERSION_1_5);\n     CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n     compilerEnv.initFromContext(cx);\n     compilerEnv.setRecordingComments(true);\n     compilerEnv.setRecordingLocalJsDocComments(true);\n     compilerEnv.setWarnTrailingComma(config.languageMode \u003d\u003d LanguageMode.ECMASCRIPT3);\n     boolean acceptEs5 \u003d config.isIdeMode || config.languageMode !\u003d LanguageMode.ECMASCRIPT3;\n     compilerEnv.setReservedKeywordAsIdentifier(acceptEs5);\n     compilerEnv.setAllowMemberExprAsFunctionName(false);\n     compilerEnv.setIdeMode(config.isIdeMode);\n     compilerEnv.setRecoverFromErrors(config.isIdeMode);\n     Parser p \u003d new Parser(compilerEnv, errorReporter);\n     AstRoot astRoot \u003d null;\n     try {\n         astRoot \u003d p.parse(sourceString, sourceFile.getName(), 1);\n     } catch (EvaluatorException e) {\n         logger.info(\"Error parsing \" + sourceFile.getName() + \": \" + e.getMessage());\n     } finally {\n         Context.exit();\n     }\n     Node root \u003d null;\n     if (astRoot !\u003d null) {\n         root \u003d IRFactory.transformTree(astRoot, sourceFile, sourceString, config, errorReporter);\n         root.setIsSyntheticBlock(true);\n     }\n-    return root;\n+    return new ParseResult(root, astRoot);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "3587cc3bb550dadee3c9aeac44041aa29087e74e": {
      "type": "Ybodychange",
      "commitMessage": "\nFix some bugs where our object literal parsing fixes\nbroke destructuring assignments.\nRequested by Hannes in https://github.com/mozilla/rhino/pull/30\n\nR\u003djohnlenz\nDELTA\u003d53  (24 added, 20 deleted, 9 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d4740\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1966 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/10/12, 2:05 PM",
      "commitName": "3587cc3bb550dadee3c9aeac44041aa29087e74e",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "1/13/12, 9:31 AM",
      "commitNameOld": "51242114ce184fe97fe8f9572c76a41878326062",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 118.15,
      "commitsBetweenForRepo": 201,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Node parse(StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n    Context cx \u003d Context.enter();\n    cx.setErrorReporter(errorReporter);\n    cx.setLanguageVersion(Context.VERSION_1_5);\n    CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n    compilerEnv.initFromContext(cx);\n    compilerEnv.setRecordingComments(true);\n    compilerEnv.setRecordingLocalJsDocComments(true);\n    compilerEnv.setWarnTrailingComma(config.languageMode \u003d\u003d LanguageMode.ECMASCRIPT3);\n    boolean acceptEs5 \u003d config.isIdeMode || config.languageMode !\u003d LanguageMode.ECMASCRIPT3;\n    compilerEnv.setReservedKeywordAsIdentifier(acceptEs5);\n    compilerEnv.setAllowMemberExprAsFunctionName(false);\n    compilerEnv.setIdeMode(config.isIdeMode);\n    compilerEnv.setRecoverFromErrors(config.isIdeMode);\n    Parser p \u003d new Parser(compilerEnv, errorReporter);\n    AstRoot astRoot \u003d null;\n    try {\n        astRoot \u003d p.parse(sourceString, sourceFile.getName(), 1);\n    } catch (EvaluatorException e) {\n        logger.info(\"Error parsing \" + sourceFile.getName() + \": \" + e.getMessage());\n    } finally {\n        Context.exit();\n    }\n    Node root \u003d null;\n    if (astRoot !\u003d null) {\n        root \u003d IRFactory.transformTree(astRoot, sourceFile, sourceString, config, errorReporter);\n        root.setIsSyntheticBlock(true);\n    }\n    return root;\n}",
      "path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
      "functionStartLine": 104,
      "functionName": "parse",
      "functionAnnotation": "",
      "functionDoc": "Parses the JavaScript text given by a reader.\n\n@param sourceString Source code from the file.\n@param errorReporter An error.\n@param logger A logger.\n@return The AST of the given text.\n@throws IOException\n",
      "diff": "@@ -1,31 +1,30 @@\n public static Node parse(StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n     Context cx \u003d Context.enter();\n     cx.setErrorReporter(errorReporter);\n     cx.setLanguageVersion(Context.VERSION_1_5);\n     CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n     compilerEnv.initFromContext(cx);\n     compilerEnv.setRecordingComments(true);\n     compilerEnv.setRecordingLocalJsDocComments(true);\n     compilerEnv.setWarnTrailingComma(config.languageMode \u003d\u003d LanguageMode.ECMASCRIPT3);\n     boolean acceptEs5 \u003d config.isIdeMode || config.languageMode !\u003d LanguageMode.ECMASCRIPT3;\n     compilerEnv.setReservedKeywordAsIdentifier(acceptEs5);\n-    compilerEnv.setAllowKeywordAsObjectPropertyName(acceptEs5);\n     compilerEnv.setAllowMemberExprAsFunctionName(false);\n     compilerEnv.setIdeMode(config.isIdeMode);\n     compilerEnv.setRecoverFromErrors(config.isIdeMode);\n     Parser p \u003d new Parser(compilerEnv, errorReporter);\n     AstRoot astRoot \u003d null;\n     try {\n         astRoot \u003d p.parse(sourceString, sourceFile.getName(), 1);\n     } catch (EvaluatorException e) {\n         logger.info(\"Error parsing \" + sourceFile.getName() + \": \" + e.getMessage());\n     } finally {\n         Context.exit();\n     }\n     Node root \u003d null;\n     if (astRoot !\u003d null) {\n         root \u003d IRFactory.transformTree(astRoot, sourceFile, sourceString, config, errorReporter);\n         root.setIsSyntheticBlock(true);\n     }\n     return root;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "51242114ce184fe97fe8f9572c76a41878326062": {
      "type": "Ybodychange",
      "commitMessage": "\nTurn off the option to understand qualified function names\ne.g.,\nfunction a.b() {}\nThis Rhino option doesn\u0027t actually work\n(in fact, there are still TODOs in there to finish the feature)\n\nR\u003djohnlenz\nDELTA\u003d33  (32 added, 0 deleted, 1 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d4090\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1724 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/13/12, 9:31 AM",
      "commitName": "51242114ce184fe97fe8f9572c76a41878326062",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "1/10/12, 11:06 AM",
      "commitNameOld": "5f09c4d523e715607f7f74854c4916e279b5b562",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 2.93,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Node parse(StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n    Context cx \u003d Context.enter();\n    cx.setErrorReporter(errorReporter);\n    cx.setLanguageVersion(Context.VERSION_1_5);\n    CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n    compilerEnv.initFromContext(cx);\n    compilerEnv.setRecordingComments(true);\n    compilerEnv.setRecordingLocalJsDocComments(true);\n    compilerEnv.setWarnTrailingComma(config.languageMode \u003d\u003d LanguageMode.ECMASCRIPT3);\n    boolean acceptEs5 \u003d config.isIdeMode || config.languageMode !\u003d LanguageMode.ECMASCRIPT3;\n    compilerEnv.setReservedKeywordAsIdentifier(acceptEs5);\n    compilerEnv.setAllowKeywordAsObjectPropertyName(acceptEs5);\n    compilerEnv.setAllowMemberExprAsFunctionName(false);\n    compilerEnv.setIdeMode(config.isIdeMode);\n    compilerEnv.setRecoverFromErrors(config.isIdeMode);\n    Parser p \u003d new Parser(compilerEnv, errorReporter);\n    AstRoot astRoot \u003d null;\n    try {\n        astRoot \u003d p.parse(sourceString, sourceFile.getName(), 1);\n    } catch (EvaluatorException e) {\n        logger.info(\"Error parsing \" + sourceFile.getName() + \": \" + e.getMessage());\n    } finally {\n        Context.exit();\n    }\n    Node root \u003d null;\n    if (astRoot !\u003d null) {\n        root \u003d IRFactory.transformTree(astRoot, sourceFile, sourceString, config, errorReporter);\n        root.setIsSyntheticBlock(true);\n    }\n    return root;\n}",
      "path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
      "functionStartLine": 104,
      "functionName": "parse",
      "functionAnnotation": "",
      "functionDoc": "Parses the JavaScript text given by a reader.\n\n@param sourceString Source code from the file.\n@param errorReporter An error.\n@param logger A logger.\n@return The AST of the given text.\n@throws IOException\n",
      "diff": "@@ -1,31 +1,31 @@\n public static Node parse(StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n     Context cx \u003d Context.enter();\n     cx.setErrorReporter(errorReporter);\n     cx.setLanguageVersion(Context.VERSION_1_5);\n     CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n     compilerEnv.initFromContext(cx);\n     compilerEnv.setRecordingComments(true);\n     compilerEnv.setRecordingLocalJsDocComments(true);\n     compilerEnv.setWarnTrailingComma(config.languageMode \u003d\u003d LanguageMode.ECMASCRIPT3);\n     boolean acceptEs5 \u003d config.isIdeMode || config.languageMode !\u003d LanguageMode.ECMASCRIPT3;\n     compilerEnv.setReservedKeywordAsIdentifier(acceptEs5);\n     compilerEnv.setAllowKeywordAsObjectPropertyName(acceptEs5);\n-    compilerEnv.setAllowMemberExprAsFunctionName(config.isIdeMode);\n+    compilerEnv.setAllowMemberExprAsFunctionName(false);\n     compilerEnv.setIdeMode(config.isIdeMode);\n     compilerEnv.setRecoverFromErrors(config.isIdeMode);\n     Parser p \u003d new Parser(compilerEnv, errorReporter);\n     AstRoot astRoot \u003d null;\n     try {\n         astRoot \u003d p.parse(sourceString, sourceFile.getName(), 1);\n     } catch (EvaluatorException e) {\n         logger.info(\"Error parsing \" + sourceFile.getName() + \": \" + e.getMessage());\n     } finally {\n         Context.exit();\n     }\n     Node root \u003d null;\n     if (astRoot !\u003d null) {\n         root \u003d IRFactory.transformTree(astRoot, sourceFile, sourceString, config, errorReporter);\n         root.setIsSyntheticBlock(true);\n     }\n     return root;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5f09c4d523e715607f7f74854c4916e279b5b562": {
      "type": "Ybodychange",
      "commitMessage": "\nUpdate to Rhino@head\nhttp://code.google.com/p/closure-compiler-rhino/\n\nR\u003djohnlenz\nDELTA\u003d324  (84 added, 74 deleted, 166 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d4057\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1718 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/10/12, 11:06 AM",
      "commitName": "5f09c4d523e715607f7f74854c4916e279b5b562",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "9/6/11, 1:36 PM",
      "commitNameOld": "6b825fb7dbe65d4523f2af9c850ed7e7f43862c2",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 125.94,
      "commitsBetweenForRepo": 274,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Node parse(StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n    Context cx \u003d Context.enter();\n    cx.setErrorReporter(errorReporter);\n    cx.setLanguageVersion(Context.VERSION_1_5);\n    CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n    compilerEnv.initFromContext(cx);\n    compilerEnv.setRecordingComments(true);\n    compilerEnv.setRecordingLocalJsDocComments(true);\n    compilerEnv.setWarnTrailingComma(config.languageMode \u003d\u003d LanguageMode.ECMASCRIPT3);\n    boolean acceptEs5 \u003d config.isIdeMode || config.languageMode !\u003d LanguageMode.ECMASCRIPT3;\n    compilerEnv.setReservedKeywordAsIdentifier(acceptEs5);\n    compilerEnv.setAllowKeywordAsObjectPropertyName(acceptEs5);\n    compilerEnv.setAllowMemberExprAsFunctionName(config.isIdeMode);\n    compilerEnv.setIdeMode(config.isIdeMode);\n    compilerEnv.setRecoverFromErrors(config.isIdeMode);\n    Parser p \u003d new Parser(compilerEnv, errorReporter);\n    AstRoot astRoot \u003d null;\n    try {\n        astRoot \u003d p.parse(sourceString, sourceFile.getName(), 1);\n    } catch (EvaluatorException e) {\n        logger.info(\"Error parsing \" + sourceFile.getName() + \": \" + e.getMessage());\n    } finally {\n        Context.exit();\n    }\n    Node root \u003d null;\n    if (astRoot !\u003d null) {\n        root \u003d IRFactory.transformTree(astRoot, sourceFile, sourceString, config, errorReporter);\n        root.setIsSyntheticBlock(true);\n    }\n    return root;\n}",
      "path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
      "functionStartLine": 104,
      "functionName": "parse",
      "functionAnnotation": "",
      "functionDoc": "Parses the JavaScript text given by a reader.\n\n@param sourceString Source code from the file.\n@param errorReporter An error.\n@param logger A logger.\n@return The AST of the given text.\n@throws IOException\n",
      "diff": "@@ -1,33 +1,31 @@\n public static Node parse(StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n     Context cx \u003d Context.enter();\n     cx.setErrorReporter(errorReporter);\n     cx.setLanguageVersion(Context.VERSION_1_5);\n     CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n     compilerEnv.initFromContext(cx);\n     compilerEnv.setRecordingComments(true);\n     compilerEnv.setRecordingLocalJsDocComments(true);\n     compilerEnv.setWarnTrailingComma(config.languageMode \u003d\u003d LanguageMode.ECMASCRIPT3);\n-    if (config.isIdeMode || config.languageMode !\u003d LanguageMode.ECMASCRIPT3) {\n-        compilerEnv.setReservedKeywordAsIdentifier(true);\n-        compilerEnv.setAllowKeywordAsObjectPropertyName(true);\n-    }\n-    if (config.isIdeMode) {\n-        compilerEnv.setAllowMemberExprAsFunctionName(true);\n-    }\n+    boolean acceptEs5 \u003d config.isIdeMode || config.languageMode !\u003d LanguageMode.ECMASCRIPT3;\n+    compilerEnv.setReservedKeywordAsIdentifier(acceptEs5);\n+    compilerEnv.setAllowKeywordAsObjectPropertyName(acceptEs5);\n+    compilerEnv.setAllowMemberExprAsFunctionName(config.isIdeMode);\n     compilerEnv.setIdeMode(config.isIdeMode);\n+    compilerEnv.setRecoverFromErrors(config.isIdeMode);\n     Parser p \u003d new Parser(compilerEnv, errorReporter);\n     AstRoot astRoot \u003d null;\n     try {\n         astRoot \u003d p.parse(sourceString, sourceFile.getName(), 1);\n     } catch (EvaluatorException e) {\n         logger.info(\"Error parsing \" + sourceFile.getName() + \": \" + e.getMessage());\n     } finally {\n         Context.exit();\n     }\n     Node root \u003d null;\n     if (astRoot !\u003d null) {\n         root \u003d IRFactory.transformTree(astRoot, sourceFile, sourceString, config, errorReporter);\n         root.setIsSyntheticBlock(true);\n     }\n     return root;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b825fb7dbe65d4523f2af9c850ed7e7f43862c2": {
      "type": "Ybodychange",
      "commitMessage": "\nIn IDE mode, allow partial parsing\n\nR\u003djohnlenz\nDELTA\u003d19  (18 added, 0 deleted, 1 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3187\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1411 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/6/11, 1:36 PM",
      "commitName": "6b825fb7dbe65d4523f2af9c850ed7e7f43862c2",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "7/28/11, 4:19 PM",
      "commitNameOld": "76abdf11394c0e7515ae63335676ea3657badb45",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 39.89,
      "commitsBetweenForRepo": 95,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Node parse(StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n    Context cx \u003d Context.enter();\n    cx.setErrorReporter(errorReporter);\n    cx.setLanguageVersion(Context.VERSION_1_5);\n    CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n    compilerEnv.initFromContext(cx);\n    compilerEnv.setRecordingComments(true);\n    compilerEnv.setRecordingLocalJsDocComments(true);\n    compilerEnv.setWarnTrailingComma(config.languageMode \u003d\u003d LanguageMode.ECMASCRIPT3);\n    if (config.isIdeMode || config.languageMode !\u003d LanguageMode.ECMASCRIPT3) {\n        compilerEnv.setReservedKeywordAsIdentifier(true);\n        compilerEnv.setAllowKeywordAsObjectPropertyName(true);\n    }\n    if (config.isIdeMode) {\n        compilerEnv.setAllowMemberExprAsFunctionName(true);\n    }\n    compilerEnv.setIdeMode(config.isIdeMode);\n    Parser p \u003d new Parser(compilerEnv, errorReporter);\n    AstRoot astRoot \u003d null;\n    try {\n        astRoot \u003d p.parse(sourceString, sourceFile.getName(), 1);\n    } catch (EvaluatorException e) {\n        logger.info(\"Error parsing \" + sourceFile.getName() + \": \" + e.getMessage());\n    } finally {\n        Context.exit();\n    }\n    Node root \u003d null;\n    if (astRoot !\u003d null) {\n        root \u003d IRFactory.transformTree(astRoot, sourceFile, sourceString, config, errorReporter);\n        root.setIsSyntheticBlock(true);\n    }\n    return root;\n}",
      "path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
      "functionStartLine": 104,
      "functionName": "parse",
      "functionAnnotation": "",
      "functionDoc": "Parses the JavaScript text given by a reader.\n\n@param sourceString Source code from the file.\n@param errorReporter An error.\n@param logger A logger.\n@return The AST of the given text.\n@throws IOException\n",
      "diff": "@@ -1,32 +1,33 @@\n public static Node parse(StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n     Context cx \u003d Context.enter();\n     cx.setErrorReporter(errorReporter);\n     cx.setLanguageVersion(Context.VERSION_1_5);\n     CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n     compilerEnv.initFromContext(cx);\n     compilerEnv.setRecordingComments(true);\n     compilerEnv.setRecordingLocalJsDocComments(true);\n     compilerEnv.setWarnTrailingComma(config.languageMode \u003d\u003d LanguageMode.ECMASCRIPT3);\n     if (config.isIdeMode || config.languageMode !\u003d LanguageMode.ECMASCRIPT3) {\n         compilerEnv.setReservedKeywordAsIdentifier(true);\n         compilerEnv.setAllowKeywordAsObjectPropertyName(true);\n     }\n     if (config.isIdeMode) {\n         compilerEnv.setAllowMemberExprAsFunctionName(true);\n     }\n+    compilerEnv.setIdeMode(config.isIdeMode);\n     Parser p \u003d new Parser(compilerEnv, errorReporter);\n     AstRoot astRoot \u003d null;\n     try {\n         astRoot \u003d p.parse(sourceString, sourceFile.getName(), 1);\n     } catch (EvaluatorException e) {\n         logger.info(\"Error parsing \" + sourceFile.getName() + \": \" + e.getMessage());\n     } finally {\n         Context.exit();\n     }\n     Node root \u003d null;\n     if (astRoot !\u003d null) {\n         root \u003d IRFactory.transformTree(astRoot, sourceFile, sourceString, config, errorReporter);\n         root.setIsSyntheticBlock(true);\n     }\n     return root;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "76abdf11394c0e7515ae63335676ea3657badb45": {
      "type": "Ydocchange",
      "commitMessage": "\nMake our build warnings free.\n\nR\u003dacleung\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2830\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1301 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/28/11, 4:19 PM",
      "commitName": "76abdf11394c0e7515ae63335676ea3657badb45",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "7/19/11, 4:09 PM",
      "commitNameOld": "b3f276d6736aee24a5a847ba87a44ffdf078221d",
      "commitAuthorOld": "zhuyi@google.com",
      "daysBetweenCommits": 9.01,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Node parse(StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n    Context cx \u003d Context.enter();\n    cx.setErrorReporter(errorReporter);\n    cx.setLanguageVersion(Context.VERSION_1_5);\n    CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n    compilerEnv.initFromContext(cx);\n    compilerEnv.setRecordingComments(true);\n    compilerEnv.setRecordingLocalJsDocComments(true);\n    compilerEnv.setWarnTrailingComma(config.languageMode \u003d\u003d LanguageMode.ECMASCRIPT3);\n    if (config.isIdeMode || config.languageMode !\u003d LanguageMode.ECMASCRIPT3) {\n        compilerEnv.setReservedKeywordAsIdentifier(true);\n        compilerEnv.setAllowKeywordAsObjectPropertyName(true);\n    }\n    if (config.isIdeMode) {\n        compilerEnv.setAllowMemberExprAsFunctionName(true);\n    }\n    Parser p \u003d new Parser(compilerEnv, errorReporter);\n    AstRoot astRoot \u003d null;\n    try {\n        astRoot \u003d p.parse(sourceString, sourceFile.getName(), 1);\n    } catch (EvaluatorException e) {\n        logger.info(\"Error parsing \" + sourceFile.getName() + \": \" + e.getMessage());\n    } finally {\n        Context.exit();\n    }\n    Node root \u003d null;\n    if (astRoot !\u003d null) {\n        root \u003d IRFactory.transformTree(astRoot, sourceFile, sourceString, config, errorReporter);\n        root.setIsSyntheticBlock(true);\n    }\n    return root;\n}",
      "path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
      "functionStartLine": 104,
      "functionName": "parse",
      "functionAnnotation": "",
      "functionDoc": "Parses the JavaScript text given by a reader.\n\n@param sourceString Source code from the file.\n@param errorReporter An error.\n@param logger A logger.\n@return The AST of the given text.\n@throws IOException\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Parses the JavaScript text given by a reader.\n\n@param sourceName The filename.\n@param sourceString Source code from the file.\n@param errorReporter An error.\n@param logger A logger.\n@return The AST of the given text.\n@throws IOException\n",
        "newValue": "Parses the JavaScript text given by a reader.\n\n@param sourceString Source code from the file.\n@param errorReporter An error.\n@param logger A logger.\n@return The AST of the given text.\n@throws IOException\n"
      }
    },
    "9320feca198878ca9464aae089399a8891c314d7": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "\nMake StaticSourceFile a property of Node\n\nR\u003djohnlenz\nDELTA\u003d183  (102 added, 25 deleted, 56 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2496\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1236 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/30/11, 1:25 PM",
      "commitName": "9320feca198878ca9464aae089399a8891c314d7",
      "commitAuthor": "nicksantos@google.com",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "\nMake StaticSourceFile a property of Node\n\nR\u003djohnlenz\nDELTA\u003d183  (102 added, 25 deleted, 56 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2496\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1236 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "6/30/11, 1:25 PM",
          "commitName": "9320feca198878ca9464aae089399a8891c314d7",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "4/12/11, 12:15 PM",
          "commitNameOld": "f322be0e576d5e2114cb59c0a6537197997b9c59",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 79.05,
          "commitsBetweenForRepo": 230,
          "commitsBetweenForFile": 1,
          "actualSource": "public static Node parse(StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n    Context cx \u003d Context.enter();\n    cx.setErrorReporter(errorReporter);\n    cx.setLanguageVersion(Context.VERSION_1_5);\n    CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n    compilerEnv.initFromContext(cx);\n    compilerEnv.setRecordingComments(true);\n    compilerEnv.setRecordingLocalJsDocComments(true);\n    compilerEnv.setWarnTrailingComma(config.languageMode \u003d\u003d LanguageMode.ECMASCRIPT3);\n    if (config.isIdeMode || config.languageMode !\u003d LanguageMode.ECMASCRIPT3) {\n        compilerEnv.setReservedKeywordAsIdentifier(true);\n        compilerEnv.setAllowKeywordAsObjectPropertyName(true);\n    }\n    if (config.isIdeMode) {\n        compilerEnv.setAllowMemberExprAsFunctionName(true);\n    }\n    Parser p \u003d new Parser(compilerEnv, errorReporter);\n    AstRoot astRoot \u003d null;\n    try {\n        astRoot \u003d p.parse(sourceString, sourceFile.getName(), 1);\n    } catch (EvaluatorException e) {\n        logger.info(\"Error parsing \" + sourceFile.getName() + \": \" + e.getMessage());\n    } finally {\n        Context.exit();\n    }\n    Node root \u003d null;\n    if (astRoot !\u003d null) {\n        root \u003d IRFactory.transformTree(astRoot, sourceFile, sourceString, config, errorReporter);\n        root.setIsSyntheticBlock(true);\n    }\n    return root;\n}",
          "path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
          "functionStartLine": 91,
          "functionName": "parse",
          "functionAnnotation": "",
          "functionDoc": "Parses the JavaScript text given by a reader.\n\n@param sourceName The filename.\n@param sourceString Source code from the file.\n@param errorReporter An error.\n@param logger A logger.\n@return The AST of the given text.\n@throws IOException\n",
          "diff": "@@ -1,32 +1,32 @@\n-public static Node parse(String sourceName, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n+public static Node parse(StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n     Context cx \u003d Context.enter();\n     cx.setErrorReporter(errorReporter);\n     cx.setLanguageVersion(Context.VERSION_1_5);\n     CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n     compilerEnv.initFromContext(cx);\n     compilerEnv.setRecordingComments(true);\n     compilerEnv.setRecordingLocalJsDocComments(true);\n     compilerEnv.setWarnTrailingComma(config.languageMode \u003d\u003d LanguageMode.ECMASCRIPT3);\n     if (config.isIdeMode || config.languageMode !\u003d LanguageMode.ECMASCRIPT3) {\n         compilerEnv.setReservedKeywordAsIdentifier(true);\n         compilerEnv.setAllowKeywordAsObjectPropertyName(true);\n     }\n     if (config.isIdeMode) {\n         compilerEnv.setAllowMemberExprAsFunctionName(true);\n     }\n     Parser p \u003d new Parser(compilerEnv, errorReporter);\n     AstRoot astRoot \u003d null;\n     try {\n-        astRoot \u003d p.parse(sourceString, sourceName, 1);\n+        astRoot \u003d p.parse(sourceString, sourceFile.getName(), 1);\n     } catch (EvaluatorException e) {\n-        logger.info(\"Error parsing \" + sourceName + \": \" + e.getMessage());\n+        logger.info(\"Error parsing \" + sourceFile.getName() + \": \" + e.getMessage());\n     } finally {\n         Context.exit();\n     }\n     Node root \u003d null;\n     if (astRoot !\u003d null) {\n-        root \u003d IRFactory.transformTree(astRoot, sourceString, config, errorReporter);\n+        root \u003d IRFactory.transformTree(astRoot, sourceFile, sourceString, config, errorReporter);\n         root.setIsSyntheticBlock(true);\n     }\n     return root;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[sourceName-String, sourceString-String, config-Config, errorReporter-ErrorReporter, logger-Logger]",
            "newValue": "[sourceFile-StaticSourceFile, sourceString-String, config-Config, errorReporter-ErrorReporter, logger-Logger]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nMake StaticSourceFile a property of Node\n\nR\u003djohnlenz\nDELTA\u003d183  (102 added, 25 deleted, 56 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2496\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1236 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "6/30/11, 1:25 PM",
          "commitName": "9320feca198878ca9464aae089399a8891c314d7",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "4/12/11, 12:15 PM",
          "commitNameOld": "f322be0e576d5e2114cb59c0a6537197997b9c59",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 79.05,
          "commitsBetweenForRepo": 230,
          "commitsBetweenForFile": 1,
          "actualSource": "public static Node parse(StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n    Context cx \u003d Context.enter();\n    cx.setErrorReporter(errorReporter);\n    cx.setLanguageVersion(Context.VERSION_1_5);\n    CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n    compilerEnv.initFromContext(cx);\n    compilerEnv.setRecordingComments(true);\n    compilerEnv.setRecordingLocalJsDocComments(true);\n    compilerEnv.setWarnTrailingComma(config.languageMode \u003d\u003d LanguageMode.ECMASCRIPT3);\n    if (config.isIdeMode || config.languageMode !\u003d LanguageMode.ECMASCRIPT3) {\n        compilerEnv.setReservedKeywordAsIdentifier(true);\n        compilerEnv.setAllowKeywordAsObjectPropertyName(true);\n    }\n    if (config.isIdeMode) {\n        compilerEnv.setAllowMemberExprAsFunctionName(true);\n    }\n    Parser p \u003d new Parser(compilerEnv, errorReporter);\n    AstRoot astRoot \u003d null;\n    try {\n        astRoot \u003d p.parse(sourceString, sourceFile.getName(), 1);\n    } catch (EvaluatorException e) {\n        logger.info(\"Error parsing \" + sourceFile.getName() + \": \" + e.getMessage());\n    } finally {\n        Context.exit();\n    }\n    Node root \u003d null;\n    if (astRoot !\u003d null) {\n        root \u003d IRFactory.transformTree(astRoot, sourceFile, sourceString, config, errorReporter);\n        root.setIsSyntheticBlock(true);\n    }\n    return root;\n}",
          "path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
          "functionStartLine": 91,
          "functionName": "parse",
          "functionAnnotation": "",
          "functionDoc": "Parses the JavaScript text given by a reader.\n\n@param sourceName The filename.\n@param sourceString Source code from the file.\n@param errorReporter An error.\n@param logger A logger.\n@return The AST of the given text.\n@throws IOException\n",
          "diff": "@@ -1,32 +1,32 @@\n-public static Node parse(String sourceName, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n+public static Node parse(StaticSourceFile sourceFile, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n     Context cx \u003d Context.enter();\n     cx.setErrorReporter(errorReporter);\n     cx.setLanguageVersion(Context.VERSION_1_5);\n     CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n     compilerEnv.initFromContext(cx);\n     compilerEnv.setRecordingComments(true);\n     compilerEnv.setRecordingLocalJsDocComments(true);\n     compilerEnv.setWarnTrailingComma(config.languageMode \u003d\u003d LanguageMode.ECMASCRIPT3);\n     if (config.isIdeMode || config.languageMode !\u003d LanguageMode.ECMASCRIPT3) {\n         compilerEnv.setReservedKeywordAsIdentifier(true);\n         compilerEnv.setAllowKeywordAsObjectPropertyName(true);\n     }\n     if (config.isIdeMode) {\n         compilerEnv.setAllowMemberExprAsFunctionName(true);\n     }\n     Parser p \u003d new Parser(compilerEnv, errorReporter);\n     AstRoot astRoot \u003d null;\n     try {\n-        astRoot \u003d p.parse(sourceString, sourceName, 1);\n+        astRoot \u003d p.parse(sourceString, sourceFile.getName(), 1);\n     } catch (EvaluatorException e) {\n-        logger.info(\"Error parsing \" + sourceName + \": \" + e.getMessage());\n+        logger.info(\"Error parsing \" + sourceFile.getName() + \": \" + e.getMessage());\n     } finally {\n         Context.exit();\n     }\n     Node root \u003d null;\n     if (astRoot !\u003d null) {\n-        root \u003d IRFactory.transformTree(astRoot, sourceString, config, errorReporter);\n+        root \u003d IRFactory.transformTree(astRoot, sourceFile, sourceString, config, errorReporter);\n         root.setIsSyntheticBlock(true);\n     }\n     return root;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "e4d80a3331cf7a9c1b7bdc9e2082d330381c3719": {
      "type": "Ybodychange",
      "commitMessage": "\nEnable keywords as property names for ECMASCRIPT5\n\nR\u003dacleung\nDELTA\u003d106  (91 added, 1 deleted, 14 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d884\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@892 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/15/11, 3:57 PM",
      "commitName": "e4d80a3331cf7a9c1b7bdc9e2082d330381c3719",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "3/4/11, 4:48 PM",
      "commitNameOld": "82d3c01785f8b25113ca3fd7cc8b37da5d8a44a4",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 10.92,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Node parse(String sourceName, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n    Context cx \u003d Context.enter();\n    cx.setErrorReporter(errorReporter);\n    cx.setLanguageVersion(Context.VERSION_1_5);\n    CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n    compilerEnv.initFromContext(cx);\n    compilerEnv.setRecordingComments(true);\n    compilerEnv.setRecordingLocalJsDocComments(true);\n    compilerEnv.setWarnTrailingComma(config.languageMode \u003d\u003d LanguageMode.ECMASCRIPT3);\n    if (config.isIdeMode || config.languageMode !\u003d LanguageMode.ECMASCRIPT3) {\n        compilerEnv.setReservedKeywordAsIdentifier(true);\n        compilerEnv.setAllowKeywordAsObjectPropertyName(true);\n    }\n    if (config.isIdeMode) {\n        compilerEnv.setAllowMemberExprAsFunctionName(true);\n    }\n    Parser p \u003d new Parser(compilerEnv, errorReporter);\n    AstRoot astRoot \u003d null;\n    try {\n        astRoot \u003d p.parse(sourceString, sourceName, 1);\n    } catch (EvaluatorException e) {\n        logger.info(\"Error parsing \" + sourceName + \": \" + e.getMessage());\n    } finally {\n        Context.exit();\n    }\n    Node root \u003d null;\n    if (astRoot !\u003d null) {\n        root \u003d IRFactory.transformTree(astRoot, sourceString, config, errorReporter);\n        root.setIsSyntheticBlock(true);\n    }\n    return root;\n}",
      "path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
      "functionStartLine": 90,
      "functionName": "parse",
      "functionAnnotation": "",
      "functionDoc": "Parses the JavaScript text given by a reader.\n\n@param sourceName The filename.\n@param sourceString Source code from the file.\n@param errorReporter An error.\n@param logger A logger.\n@return The AST of the given text.\n@throws IOException\n",
      "diff": "@@ -1,31 +1,32 @@\n public static Node parse(String sourceName, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n     Context cx \u003d Context.enter();\n     cx.setErrorReporter(errorReporter);\n     cx.setLanguageVersion(Context.VERSION_1_5);\n     CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n     compilerEnv.initFromContext(cx);\n     compilerEnv.setRecordingComments(true);\n     compilerEnv.setRecordingLocalJsDocComments(true);\n     compilerEnv.setWarnTrailingComma(config.languageMode \u003d\u003d LanguageMode.ECMASCRIPT3);\n     if (config.isIdeMode || config.languageMode !\u003d LanguageMode.ECMASCRIPT3) {\n         compilerEnv.setReservedKeywordAsIdentifier(true);\n+        compilerEnv.setAllowKeywordAsObjectPropertyName(true);\n     }\n     if (config.isIdeMode) {\n         compilerEnv.setAllowMemberExprAsFunctionName(true);\n     }\n     Parser p \u003d new Parser(compilerEnv, errorReporter);\n     AstRoot astRoot \u003d null;\n     try {\n         astRoot \u003d p.parse(sourceString, sourceName, 1);\n     } catch (EvaluatorException e) {\n         logger.info(\"Error parsing \" + sourceName + \": \" + e.getMessage());\n     } finally {\n         Context.exit();\n     }\n     Node root \u003d null;\n     if (astRoot !\u003d null) {\n         root \u003d IRFactory.transformTree(astRoot, sourceString, config, errorReporter);\n         root.setIsSyntheticBlock(true);\n     }\n     return root;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "82d3c01785f8b25113ca3fd7cc8b37da5d8a44a4": {
      "type": "Ybodychange",
      "commitMessage": "\nTweak the parser to handle the restrict ES5 keyword set.\n\nR\u003dacleung\nDELTA\u003d145  (107 added, 7 deleted, 31 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d765\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@852 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/4/11, 4:48 PM",
      "commitName": "82d3c01785f8b25113ca3fd7cc8b37da5d8a44a4",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "3/4/11, 11:41 AM",
      "commitNameOld": "7fbff508f8590793108aa192a1898dc617e7b040",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 0.21,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Node parse(String sourceName, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n    Context cx \u003d Context.enter();\n    cx.setErrorReporter(errorReporter);\n    cx.setLanguageVersion(Context.VERSION_1_5);\n    CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n    compilerEnv.initFromContext(cx);\n    compilerEnv.setRecordingComments(true);\n    compilerEnv.setRecordingLocalJsDocComments(true);\n    compilerEnv.setWarnTrailingComma(config.languageMode \u003d\u003d LanguageMode.ECMASCRIPT3);\n    if (config.isIdeMode || config.languageMode !\u003d LanguageMode.ECMASCRIPT3) {\n        compilerEnv.setReservedKeywordAsIdentifier(true);\n    }\n    if (config.isIdeMode) {\n        compilerEnv.setAllowMemberExprAsFunctionName(true);\n    }\n    Parser p \u003d new Parser(compilerEnv, errorReporter);\n    AstRoot astRoot \u003d null;\n    try {\n        astRoot \u003d p.parse(sourceString, sourceName, 1);\n    } catch (EvaluatorException e) {\n        logger.info(\"Error parsing \" + sourceName + \": \" + e.getMessage());\n    } finally {\n        Context.exit();\n    }\n    Node root \u003d null;\n    if (astRoot !\u003d null) {\n        root \u003d IRFactory.transformTree(astRoot, sourceString, config, errorReporter);\n        root.setIsSyntheticBlock(true);\n    }\n    return root;\n}",
      "path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
      "functionStartLine": 90,
      "functionName": "parse",
      "functionAnnotation": "",
      "functionDoc": "Parses the JavaScript text given by a reader.\n\n@param sourceName The filename.\n@param sourceString Source code from the file.\n@param errorReporter An error.\n@param logger A logger.\n@return The AST of the given text.\n@throws IOException\n",
      "diff": "@@ -1,29 +1,31 @@\n public static Node parse(String sourceName, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n     Context cx \u003d Context.enter();\n     cx.setErrorReporter(errorReporter);\n     cx.setLanguageVersion(Context.VERSION_1_5);\n     CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n     compilerEnv.initFromContext(cx);\n     compilerEnv.setRecordingComments(true);\n     compilerEnv.setRecordingLocalJsDocComments(true);\n-    compilerEnv.setWarnTrailingComma(!config.acceptES5);\n-    if (config.isIdeMode) {\n+    compilerEnv.setWarnTrailingComma(config.languageMode \u003d\u003d LanguageMode.ECMASCRIPT3);\n+    if (config.isIdeMode || config.languageMode !\u003d LanguageMode.ECMASCRIPT3) {\n         compilerEnv.setReservedKeywordAsIdentifier(true);\n+    }\n+    if (config.isIdeMode) {\n         compilerEnv.setAllowMemberExprAsFunctionName(true);\n     }\n     Parser p \u003d new Parser(compilerEnv, errorReporter);\n     AstRoot astRoot \u003d null;\n     try {\n         astRoot \u003d p.parse(sourceString, sourceName, 1);\n     } catch (EvaluatorException e) {\n         logger.info(\"Error parsing \" + sourceName + \": \" + e.getMessage());\n     } finally {\n         Context.exit();\n     }\n     Node root \u003d null;\n     if (astRoot !\u003d null) {\n         root \u003d IRFactory.transformTree(astRoot, sourceString, config, errorReporter);\n         root.setIsSyntheticBlock(true);\n     }\n     return root;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7fbff508f8590793108aa192a1898dc617e7b040": {
      "type": "Ybodychange",
      "commitMessage": "\nDon\u0027t warn about trailing commas in ES5 mode.  ES5 allows it and IE9 handles it propertly.\n\nR\u003dnicksantos\nDELTA\u003d9  (8 added, 0 deleted, 1 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d764\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@851 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/4/11, 11:41 AM",
      "commitName": "7fbff508f8590793108aa192a1898dc617e7b040",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "2/8/11, 9:38 PM",
      "commitNameOld": "d38121222cc7c1d5e8dd2c34dcea4c2dc7468450",
      "commitAuthorOld": "kochi@google.com",
      "daysBetweenCommits": 23.59,
      "commitsBetweenForRepo": 78,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Node parse(String sourceName, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n    Context cx \u003d Context.enter();\n    cx.setErrorReporter(errorReporter);\n    cx.setLanguageVersion(Context.VERSION_1_5);\n    CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n    compilerEnv.initFromContext(cx);\n    compilerEnv.setRecordingComments(true);\n    compilerEnv.setRecordingLocalJsDocComments(true);\n    compilerEnv.setWarnTrailingComma(!config.acceptES5);\n    if (config.isIdeMode) {\n        compilerEnv.setReservedKeywordAsIdentifier(true);\n        compilerEnv.setAllowMemberExprAsFunctionName(true);\n    }\n    Parser p \u003d new Parser(compilerEnv, errorReporter);\n    AstRoot astRoot \u003d null;\n    try {\n        astRoot \u003d p.parse(sourceString, sourceName, 1);\n    } catch (EvaluatorException e) {\n        logger.info(\"Error parsing \" + sourceName + \": \" + e.getMessage());\n    } finally {\n        Context.exit();\n    }\n    Node root \u003d null;\n    if (astRoot !\u003d null) {\n        root \u003d IRFactory.transformTree(astRoot, sourceString, config, errorReporter);\n        root.setIsSyntheticBlock(true);\n    }\n    return root;\n}",
      "path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
      "functionStartLine": 93,
      "functionName": "parse",
      "functionAnnotation": "",
      "functionDoc": "Parses the JavaScript text given by a reader.\n\n@param sourceName The filename.\n@param sourceString Source code from the file.\n@param errorReporter An error.\n@param logger A logger.\n@return The AST of the given text.\n@throws IOException\n",
      "diff": "@@ -1,29 +1,29 @@\n public static Node parse(String sourceName, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n     Context cx \u003d Context.enter();\n     cx.setErrorReporter(errorReporter);\n     cx.setLanguageVersion(Context.VERSION_1_5);\n     CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n     compilerEnv.initFromContext(cx);\n     compilerEnv.setRecordingComments(true);\n     compilerEnv.setRecordingLocalJsDocComments(true);\n-    compilerEnv.setWarnTrailingComma(true);\n+    compilerEnv.setWarnTrailingComma(!config.acceptES5);\n     if (config.isIdeMode) {\n         compilerEnv.setReservedKeywordAsIdentifier(true);\n         compilerEnv.setAllowMemberExprAsFunctionName(true);\n     }\n     Parser p \u003d new Parser(compilerEnv, errorReporter);\n     AstRoot astRoot \u003d null;\n     try {\n         astRoot \u003d p.parse(sourceString, sourceName, 1);\n     } catch (EvaluatorException e) {\n         logger.info(\"Error parsing \" + sourceName + \": \" + e.getMessage());\n     } finally {\n         Context.exit();\n     }\n     Node root \u003d null;\n     if (astRoot !\u003d null) {\n         root \u003d IRFactory.transformTree(astRoot, sourceString, config, errorReporter);\n         root.setIsSyntheticBlock(true);\n     }\n     return root;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "295c978bfbf070d28214b27239cd26aaea58b6d4": {
      "type": "Ydocchange",
      "commitMessage": "Minor cleanup. (John)\nR\u003drobert\nDELTA\u003d5  (1 added, 4 deleted, 0 changed)\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@140 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/17/10, 1:06 PM",
      "commitName": "295c978bfbf070d28214b27239cd26aaea58b6d4",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "2/12/10, 11:40 AM",
      "commitNameOld": "b8c52bf5e76948ee8d561fa55a36cc6c9f5d0c68",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 33.02,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Node parse(String sourceName, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n    Context cx \u003d Context.enter();\n    cx.setErrorReporter(errorReporter);\n    cx.setLanguageVersion(Context.VERSION_1_5);\n    CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n    compilerEnv.initFromContext(cx);\n    compilerEnv.setRecordingComments(true);\n    compilerEnv.setRecordingLocalJsDocComments(true);\n    compilerEnv.setWarnTrailingComma(true);\n    if (config.isIdeMode) {\n        compilerEnv.setReservedKeywordAsIdentifier(true);\n        compilerEnv.setAllowMemberExprAsFunctionName(true);\n    }\n    Parser p \u003d new Parser(compilerEnv, errorReporter);\n    AstRoot astRoot \u003d null;\n    try {\n        astRoot \u003d p.parse(sourceString, sourceName, 1);\n    } catch (EvaluatorException e) {\n        logger.info(\"Error parsing \" + sourceName + \": \" + e.getMessage());\n    } finally {\n        Context.exit();\n    }\n    Node root \u003d null;\n    if (astRoot !\u003d null) {\n        root \u003d IRFactory.transformTree(astRoot, sourceString, config, errorReporter);\n        root.setIsSyntheticBlock(true);\n    }\n    return root;\n}",
      "path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
      "functionStartLine": 84,
      "functionName": "parse",
      "functionAnnotation": "",
      "functionDoc": "Parses the JavaScript text given by a reader.\n\n@param sourceName The filename.\n@param sourceString Source code from the file.\n@param errorReporter An error.\n@param logger A logger.\n@return The AST of the given text.\n@throws IOException\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Parses the JavaScript text given by a reader.\n\n@param sourceName The filename.\n@param sourceString Source code from the file.\n@param isIdeMode Whether in IDE mode, which affects the environment.\n@param typeRegistry The type registry.\n@param errorReporter An error.\n@param logger A logger.\n@return The AST of the given text.\n@throws IOException\n",
        "newValue": "Parses the JavaScript text given by a reader.\n\n@param sourceName The filename.\n@param sourceString Source code from the file.\n@param errorReporter An error.\n@param logger A logger.\n@return The AST of the given text.\n@throws IOException\n"
      }
    },
    "b8c52bf5e76948ee8d561fa55a36cc6c9f5d0c68": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Fix a null pointer exception in FunctionType.\n\nFix a bug in @export generation.\n\nRemove references to StringUtil.\n\nOnly create one ParserConfig per compilation process.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@104 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/12/10, 11:40 AM",
      "commitName": "b8c52bf5e76948ee8d561fa55a36cc6c9f5d0c68",
      "commitAuthor": "Nicholas.J.Santos",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Fix a null pointer exception in FunctionType.\n\nFix a bug in @export generation.\n\nRemove references to StringUtil.\n\nOnly create one ParserConfig per compilation process.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@104 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "2/12/10, 11:40 AM",
          "commitName": "b8c52bf5e76948ee8d561fa55a36cc6c9f5d0c68",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "11/3/09, 3:51 PM",
          "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 100.83,
          "commitsBetweenForRepo": 77,
          "commitsBetweenForFile": 1,
          "actualSource": "public static Node parse(String sourceName, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n    Context cx \u003d Context.enter();\n    cx.setErrorReporter(errorReporter);\n    cx.setLanguageVersion(Context.VERSION_1_5);\n    CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n    compilerEnv.initFromContext(cx);\n    compilerEnv.setRecordingComments(true);\n    compilerEnv.setRecordingLocalJsDocComments(true);\n    compilerEnv.setWarnTrailingComma(true);\n    if (config.isIdeMode) {\n        compilerEnv.setReservedKeywordAsIdentifier(true);\n        compilerEnv.setAllowMemberExprAsFunctionName(true);\n    }\n    Parser p \u003d new Parser(compilerEnv, errorReporter);\n    AstRoot astRoot \u003d null;\n    try {\n        astRoot \u003d p.parse(sourceString, sourceName, 1);\n    } catch (EvaluatorException e) {\n        logger.info(\"Error parsing \" + sourceName + \": \" + e.getMessage());\n    } finally {\n        Context.exit();\n    }\n    Node root \u003d null;\n    if (astRoot !\u003d null) {\n        root \u003d IRFactory.transformTree(astRoot, sourceString, config, errorReporter);\n        root.setIsSyntheticBlock(true);\n    }\n    return root;\n}",
          "path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
          "functionStartLine": 86,
          "functionName": "parse",
          "functionAnnotation": "",
          "functionDoc": "Parses the JavaScript text given by a reader.\n\n@param sourceName The filename.\n@param sourceString Source code from the file.\n@param isIdeMode Whether in IDE mode, which affects the environment.\n@param typeRegistry The type registry.\n@param errorReporter An error.\n@param logger A logger.\n@return The AST of the given text.\n@throws IOException\n",
          "diff": "@@ -1,31 +1,29 @@\n-public static Node parse(String sourceName, String sourceString, boolean isIdeMode, JSTypeRegistry typeRegistry, ErrorReporter errorReporter, Logger logger) throws IOException {\n-    initAnnotationNames();\n+public static Node parse(String sourceName, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n     Context cx \u003d Context.enter();\n     cx.setErrorReporter(errorReporter);\n     cx.setLanguageVersion(Context.VERSION_1_5);\n     CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n     compilerEnv.initFromContext(cx);\n     compilerEnv.setRecordingComments(true);\n     compilerEnv.setRecordingLocalJsDocComments(true);\n     compilerEnv.setWarnTrailingComma(true);\n-    if (isIdeMode) {\n+    if (config.isIdeMode) {\n         compilerEnv.setReservedKeywordAsIdentifier(true);\n         compilerEnv.setAllowMemberExprAsFunctionName(true);\n     }\n     Parser p \u003d new Parser(compilerEnv, errorReporter);\n     AstRoot astRoot \u003d null;\n     try {\n         astRoot \u003d p.parse(sourceString, sourceName, 1);\n     } catch (EvaluatorException e) {\n         logger.info(\"Error parsing \" + sourceName + \": \" + e.getMessage());\n     } finally {\n         Context.exit();\n     }\n     Node root \u003d null;\n     if (astRoot !\u003d null) {\n-        Config config \u003d new Config(typeRegistry, annotationNames, isIdeMode);\n         root \u003d IRFactory.transformTree(astRoot, sourceString, config, errorReporter);\n         root.setIsSyntheticBlock(true);\n     }\n     return root;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[sourceName-String, sourceString-String, isIdeMode-boolean, typeRegistry-JSTypeRegistry, errorReporter-ErrorReporter, logger-Logger]",
            "newValue": "[sourceName-String, sourceString-String, config-Config, errorReporter-ErrorReporter, logger-Logger]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Fix a null pointer exception in FunctionType.\n\nFix a bug in @export generation.\n\nRemove references to StringUtil.\n\nOnly create one ParserConfig per compilation process.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@104 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "2/12/10, 11:40 AM",
          "commitName": "b8c52bf5e76948ee8d561fa55a36cc6c9f5d0c68",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "11/3/09, 3:51 PM",
          "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 100.83,
          "commitsBetweenForRepo": 77,
          "commitsBetweenForFile": 1,
          "actualSource": "public static Node parse(String sourceName, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n    Context cx \u003d Context.enter();\n    cx.setErrorReporter(errorReporter);\n    cx.setLanguageVersion(Context.VERSION_1_5);\n    CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n    compilerEnv.initFromContext(cx);\n    compilerEnv.setRecordingComments(true);\n    compilerEnv.setRecordingLocalJsDocComments(true);\n    compilerEnv.setWarnTrailingComma(true);\n    if (config.isIdeMode) {\n        compilerEnv.setReservedKeywordAsIdentifier(true);\n        compilerEnv.setAllowMemberExprAsFunctionName(true);\n    }\n    Parser p \u003d new Parser(compilerEnv, errorReporter);\n    AstRoot astRoot \u003d null;\n    try {\n        astRoot \u003d p.parse(sourceString, sourceName, 1);\n    } catch (EvaluatorException e) {\n        logger.info(\"Error parsing \" + sourceName + \": \" + e.getMessage());\n    } finally {\n        Context.exit();\n    }\n    Node root \u003d null;\n    if (astRoot !\u003d null) {\n        root \u003d IRFactory.transformTree(astRoot, sourceString, config, errorReporter);\n        root.setIsSyntheticBlock(true);\n    }\n    return root;\n}",
          "path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
          "functionStartLine": 86,
          "functionName": "parse",
          "functionAnnotation": "",
          "functionDoc": "Parses the JavaScript text given by a reader.\n\n@param sourceName The filename.\n@param sourceString Source code from the file.\n@param isIdeMode Whether in IDE mode, which affects the environment.\n@param typeRegistry The type registry.\n@param errorReporter An error.\n@param logger A logger.\n@return The AST of the given text.\n@throws IOException\n",
          "diff": "@@ -1,31 +1,29 @@\n-public static Node parse(String sourceName, String sourceString, boolean isIdeMode, JSTypeRegistry typeRegistry, ErrorReporter errorReporter, Logger logger) throws IOException {\n-    initAnnotationNames();\n+public static Node parse(String sourceName, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n     Context cx \u003d Context.enter();\n     cx.setErrorReporter(errorReporter);\n     cx.setLanguageVersion(Context.VERSION_1_5);\n     CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n     compilerEnv.initFromContext(cx);\n     compilerEnv.setRecordingComments(true);\n     compilerEnv.setRecordingLocalJsDocComments(true);\n     compilerEnv.setWarnTrailingComma(true);\n-    if (isIdeMode) {\n+    if (config.isIdeMode) {\n         compilerEnv.setReservedKeywordAsIdentifier(true);\n         compilerEnv.setAllowMemberExprAsFunctionName(true);\n     }\n     Parser p \u003d new Parser(compilerEnv, errorReporter);\n     AstRoot astRoot \u003d null;\n     try {\n         astRoot \u003d p.parse(sourceString, sourceName, 1);\n     } catch (EvaluatorException e) {\n         logger.info(\"Error parsing \" + sourceName + \": \" + e.getMessage());\n     } finally {\n         Context.exit();\n     }\n     Node root \u003d null;\n     if (astRoot !\u003d null) {\n-        Config config \u003d new Config(typeRegistry, annotationNames, isIdeMode);\n         root \u003d IRFactory.transformTree(astRoot, sourceString, config, errorReporter);\n         root.setIsSyntheticBlock(true);\n     }\n     return root;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,31 @@\n+public static Node parse(String sourceName, String sourceString, boolean isIdeMode, JSTypeRegistry typeRegistry, ErrorReporter errorReporter, Logger logger) throws IOException {\n+    initAnnotationNames();\n+    Context cx \u003d Context.enter();\n+    cx.setErrorReporter(errorReporter);\n+    cx.setLanguageVersion(Context.VERSION_1_5);\n+    CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n+    compilerEnv.initFromContext(cx);\n+    compilerEnv.setRecordingComments(true);\n+    compilerEnv.setRecordingLocalJsDocComments(true);\n+    compilerEnv.setWarnTrailingComma(true);\n+    if (isIdeMode) {\n+        compilerEnv.setReservedKeywordAsIdentifier(true);\n+        compilerEnv.setAllowMemberExprAsFunctionName(true);\n+    }\n+    Parser p \u003d new Parser(compilerEnv, errorReporter);\n+    AstRoot astRoot \u003d null;\n+    try {\n+        astRoot \u003d p.parse(sourceString, sourceName, 1);\n+    } catch (EvaluatorException e) {\n+        logger.info(\"Error parsing \" + sourceName + \": \" + e.getMessage());\n+    } finally {\n+        Context.exit();\n+    }\n+    Node root \u003d null;\n+    if (astRoot !\u003d null) {\n+        Config config \u003d new Config(typeRegistry, annotationNames, isIdeMode);\n+        root \u003d IRFactory.transformTree(astRoot, sourceString, config, errorReporter);\n+        root.setIsSyntheticBlock(true);\n+    }\n+    return root;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public static Node parse(String sourceName, String sourceString, boolean isIdeMode, JSTypeRegistry typeRegistry, ErrorReporter errorReporter, Logger logger) throws IOException {\n    initAnnotationNames();\n    Context cx \u003d Context.enter();\n    cx.setErrorReporter(errorReporter);\n    cx.setLanguageVersion(Context.VERSION_1_5);\n    CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n    compilerEnv.initFromContext(cx);\n    compilerEnv.setRecordingComments(true);\n    compilerEnv.setRecordingLocalJsDocComments(true);\n    compilerEnv.setWarnTrailingComma(true);\n    if (isIdeMode) {\n        compilerEnv.setReservedKeywordAsIdentifier(true);\n        compilerEnv.setAllowMemberExprAsFunctionName(true);\n    }\n    Parser p \u003d new Parser(compilerEnv, errorReporter);\n    AstRoot astRoot \u003d null;\n    try {\n        astRoot \u003d p.parse(sourceString, sourceName, 1);\n    } catch (EvaluatorException e) {\n        logger.info(\"Error parsing \" + sourceName + \": \" + e.getMessage());\n    } finally {\n        Context.exit();\n    }\n    Node root \u003d null;\n    if (astRoot !\u003d null) {\n        Config config \u003d new Config(typeRegistry, annotationNames, isIdeMode);\n        root \u003d IRFactory.transformTree(astRoot, sourceString, config, errorReporter);\n        root.setIsSyntheticBlock(true);\n    }\n    return root;\n}",
      "path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
      "functionStartLine": 80,
      "functionName": "parse",
      "functionAnnotation": "",
      "functionDoc": "Parses the JavaScript text given by a reader.\n\n@param sourceName The filename.\n@param sourceString Source code from the file.\n@param isIdeMode Whether in IDE mode, which affects the environment.\n@param typeRegistry The type registry.\n@param errorReporter An error.\n@param logger A logger.\n@return The AST of the given text.\n@throws IOException\n"
    }
  }
}