{
  "origin": "codeshovel",
  "repositoryName": "Closure-121b",
  "repositoryPath": "/tmp/Closure-121b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "InlineVariables.java",
  "functionName": "isInlineableDeclaredConstant",
  "functionId": "$isInlineableDeclaredConstant___var-Var__refInfo-ReferenceCollection",
  "sourceFilePath": "src/com/google/javascript/jscomp/InlineVariables.java",
  "functionAnnotation": "",
  "functionDoc": "Determines whether the given variable is declared as a constant\nand may be inlined.\n",
  "functionStartLine": 448,
  "functionEndLine": 479,
  "numCommitsSeen": 34,
  "timeTaken": 2087,
  "changeHistory": [
    "39f629a8cfaab37da55288010640d7e516000b1f",
    "d1df970451b5a18956448097b3afb43f3a82263d",
    "ebb59a97610015bc41bda7f458dd1428a3a3e335",
    "78995bf9e88599055a8c4165d89c09dc92a44b30",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "39f629a8cfaab37da55288010640d7e516000b1f": "Ybodychange",
    "d1df970451b5a18956448097b3afb43f3a82263d": "Ybodychange",
    "ebb59a97610015bc41bda7f458dd1428a3a3e335": "Yformatchange",
    "78995bf9e88599055a8c4165d89c09dc92a44b30": "Ymultichange(Yparameterchange,Ybodychange)",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "39f629a8cfaab37da55288010640d7e516000b1f": {
      "type": "Ybodychange",
      "commitMessage": "\nReplace calls of the form \"Node.getType() !\u003d Token.XX\" with\n\"!Node.isXX()\" calls.\n\nR\u003dnicksantos\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3706\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1598 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/14/11, 6:13 PM",
      "commitName": "39f629a8cfaab37da55288010640d7e516000b1f",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/10/11, 8:36 AM",
      "commitNameOld": "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 4.4,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "actualSource": "private boolean isInlineableDeclaredConstant(Var var, ReferenceCollection refInfo) {\n    if (!identifyConstants.apply(var)) {\n        return false;\n    }\n    if (!refInfo.isAssignedOnceInLifetime()) {\n        return false;\n    }\n    Reference init \u003d refInfo.getInitializingReferenceForConstants();\n    if (init \u003d\u003d null) {\n        return false;\n    }\n    Node value \u003d init.getAssignedValue();\n    if (value \u003d\u003d null) {\n        return false;\n    }\n    if (!NodeUtil.isImmutableValue(value)) {\n        return false;\n    }\n    return !value.isString() || isStringWorthInlining(var, refInfo.references);\n}",
      "path": "src/com/google/javascript/jscomp/InlineVariables.java",
      "functionStartLine": 454,
      "functionName": "isInlineableDeclaredConstant",
      "functionAnnotation": "",
      "functionDoc": "Determines whether the given variable is declared as a constant\nand may be inlined.\n",
      "diff": "@@ -1,20 +1,20 @@\n private boolean isInlineableDeclaredConstant(Var var, ReferenceCollection refInfo) {\n     if (!identifyConstants.apply(var)) {\n         return false;\n     }\n     if (!refInfo.isAssignedOnceInLifetime()) {\n         return false;\n     }\n     Reference init \u003d refInfo.getInitializingReferenceForConstants();\n     if (init \u003d\u003d null) {\n         return false;\n     }\n     Node value \u003d init.getAssignedValue();\n     if (value \u003d\u003d null) {\n         return false;\n     }\n     if (!NodeUtil.isImmutableValue(value)) {\n         return false;\n     }\n-    return value.getType() !\u003d Token.STRING || isStringWorthInlining(var, refInfo.references);\n+    return !value.isString() || isStringWorthInlining(var, refInfo.references);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d1df970451b5a18956448097b3afb43f3a82263d": {
      "type": "Ybodychange",
      "commitMessage": "\n\nChange on 2010/06/09 by nicksantos\n\n        be clear that \"assigned once\" means \"assigned once in lifetime\"\n        fixes issue 174.\n\n        R\u003djohnlenz\n        DELTA\u003d125  (113 added, 0 deleted, 12 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d26002\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@241 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/10/10, 1:12 PM",
      "commitName": "d1df970451b5a18956448097b3afb43f3a82263d",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/23/10, 11:31 AM",
      "commitNameOld": "ebb59a97610015bc41bda7f458dd1428a3a3e335",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 48.07,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "actualSource": "private boolean isInlineableDeclaredConstant(Var var, ReferenceCollection refInfo) {\n    if (!identifyConstants.apply(var)) {\n        return false;\n    }\n    if (!refInfo.isAssignedOnceInLifetime()) {\n        return false;\n    }\n    Reference init \u003d refInfo.getInitializingReferenceForConstants();\n    if (init \u003d\u003d null) {\n        return false;\n    }\n    Node value \u003d init.getAssignedValue();\n    if (value \u003d\u003d null) {\n        return false;\n    }\n    if (!NodeUtil.isImmutableValue(value)) {\n        return false;\n    }\n    return value.getType() !\u003d Token.STRING || isStringWorthInlining(var, refInfo.references);\n}",
      "path": "src/com/google/javascript/jscomp/InlineVariables.java",
      "functionStartLine": 422,
      "functionName": "isInlineableDeclaredConstant",
      "functionAnnotation": "",
      "functionDoc": "Determines whether the given variable is declared as a constant\nand may be inlined.\n",
      "diff": "@@ -1,20 +1,20 @@\n private boolean isInlineableDeclaredConstant(Var var, ReferenceCollection refInfo) {\n     if (!identifyConstants.apply(var)) {\n         return false;\n     }\n-    if (!refInfo.isAssignedOnce()) {\n+    if (!refInfo.isAssignedOnceInLifetime()) {\n         return false;\n     }\n     Reference init \u003d refInfo.getInitializingReferenceForConstants();\n     if (init \u003d\u003d null) {\n         return false;\n     }\n     Node value \u003d init.getAssignedValue();\n     if (value \u003d\u003d null) {\n         return false;\n     }\n     if (!NodeUtil.isImmutableValue(value)) {\n         return false;\n     }\n     return value.getType() !\u003d Token.STRING || isStringWorthInlining(var, refInfo.references);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ebb59a97610015bc41bda7f458dd1428a3a3e335": {
      "type": "Yformatchange",
      "commitMessage": "\nChange on 2010/04/22 by nick\n\n        fix the extern definition of Window.prototype.stop\n\n        R\u003dsiggy\n        DELTA\u003d1  (0 added, 0 deleted, 1 changed)\n\nChange on 2010/04/22 by john\n\n        \"Anonymous function\" is a confusing term for functions with names.\n        Properly we are usually distinguishing between functions statements\n        (function declarations) and function expressions.\n\n        R\u003dalan\n        DELTA\u003d172  (7 added, 14 deleted, 151 changed)\n\nChange on 2010/04/22 by john\n\n        Standardize the definition of setTimeout/setInterval.\n        Fix for Issue 137\n\n        R\u003dnick\n        DELTA\u003d6  (2 added, 2 deleted, 2 changed)\n\nChange on 2010/04/22 by mark\n\n        Various delegate fixes.\n\n        Give the delegate proxy a name unique from the delegate base so that\n        InstanceObjectType#equals distinguishes them. This is necessary for\n        AmbiguateProperties to work.\n\n        Fix the prototype of the delegate proxy. This makes\n        DisambiguateProperties continue to work.\n\n        Add superclass methods of the delegate base to the delegate proxy.\n\n\n        R\u003dandrew,nada\n        DELTA\u003d526  (383 added, 104 deleted, 39 changed)\n\nChange on 2010/04/23 by john\n\n        Allow variable inlining of function statements. For simplicity  limited to functions defined before first use.\n\n        R\u003dnick\n        DELTA\u003d79  (49 added, 3 deleted, 27 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dhakjvx\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@197 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/23/10, 11:31 AM",
      "commitName": "ebb59a97610015bc41bda7f458dd1428a3a3e335",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/16/10, 10:20 AM",
      "commitNameOld": "6e3eb4f7619179ba6c23db2af7549ef02f588c35",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 7.05,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "private boolean isInlineableDeclaredConstant(Var var, ReferenceCollection refInfo) {\n    if (!identifyConstants.apply(var)) {\n        return false;\n    }\n    if (!refInfo.isAssignedOnce()) {\n        return false;\n    }\n    Reference init \u003d refInfo.getInitializingReferenceForConstants();\n    if (init \u003d\u003d null) {\n        return false;\n    }\n    Node value \u003d init.getAssignedValue();\n    if (value \u003d\u003d null) {\n        return false;\n    }\n    if (!NodeUtil.isImmutableValue(value)) {\n        return false;\n    }\n    return value.getType() !\u003d Token.STRING || isStringWorthInlining(var, refInfo.references);\n}",
      "path": "src/com/google/javascript/jscomp/InlineVariables.java",
      "functionStartLine": 422,
      "functionName": "isInlineableDeclaredConstant",
      "functionAnnotation": "",
      "functionDoc": "Determines whether the given variable is declared as a constant\nand may be inlined.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "78995bf9e88599055a8c4165d89c09dc92a44b30": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Fix synthesis of vars in DEFAULT mode.\nBetter variable inlining\nBetter function inlining\nAssorted bug fixes\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@6 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/10/09, 11:16 AM",
      "commitName": "78995bf9e88599055a8c4165d89c09dc92a44b30",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Fix synthesis of vars in DEFAULT mode.\nBetter variable inlining\nBetter function inlining\nAssorted bug fixes\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@6 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "11/10/09, 11:16 AM",
          "commitName": "78995bf9e88599055a8c4165d89c09dc92a44b30",
          "commitAuthor": "nicholas.j.santos@gmail.com",
          "commitDateOld": "11/6/09, 5:24 PM",
          "commitNameOld": "0b7eccf2fd3a9293d7b513fbb766d7bc06abd7e0",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 3.74,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "private boolean isInlineableDeclaredConstant(Var var, ReferenceCollection refInfo) {\n    if (!identifyConstants.apply(var)) {\n        return false;\n    }\n    if (!refInfo.isAssignedOnce()) {\n        return false;\n    }\n    Reference init \u003d refInfo.getInitializingReferenceForConstants();\n    if (init \u003d\u003d null) {\n        return false;\n    }\n    Node value \u003d init.getAssignedValue();\n    if (value \u003d\u003d null) {\n        return false;\n    }\n    if (!NodeUtil.isImmutableValue(value)) {\n        return false;\n    }\n    return value.getType() !\u003d Token.STRING || isStringWorthInlining(var, refInfo.references);\n}",
          "path": "src/com/google/javascript/jscomp/InlineVariables.java",
          "functionStartLine": 375,
          "functionName": "isInlineableDeclaredConstant",
          "functionAnnotation": "",
          "functionDoc": "Determines whether the given variable is declared as a constant\nand may be inlined.\n",
          "diff": "@@ -1,6 +1,20 @@\n-private boolean isInlineableDeclaredConstant(Var var, List\u003cReference\u003e refs) {\n+private boolean isInlineableDeclaredConstant(Var var, ReferenceCollection refInfo) {\n     if (!identifyConstants.apply(var)) {\n         return false;\n     }\n-    return var.getInitialValue().getType() !\u003d Token.STRING || isStringWorthInlining(var, refs);\n+    if (!refInfo.isAssignedOnce()) {\n+        return false;\n+    }\n+    Reference init \u003d refInfo.getInitializingReferenceForConstants();\n+    if (init \u003d\u003d null) {\n+        return false;\n+    }\n+    Node value \u003d init.getAssignedValue();\n+    if (value \u003d\u003d null) {\n+        return false;\n+    }\n+    if (!NodeUtil.isImmutableValue(value)) {\n+        return false;\n+    }\n+    return value.getType() !\u003d Token.STRING || isStringWorthInlining(var, refInfo.references);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[var-Var, refs-List\u003cReference\u003e]",
            "newValue": "[var-Var, refInfo-ReferenceCollection]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Fix synthesis of vars in DEFAULT mode.\nBetter variable inlining\nBetter function inlining\nAssorted bug fixes\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@6 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "11/10/09, 11:16 AM",
          "commitName": "78995bf9e88599055a8c4165d89c09dc92a44b30",
          "commitAuthor": "nicholas.j.santos@gmail.com",
          "commitDateOld": "11/6/09, 5:24 PM",
          "commitNameOld": "0b7eccf2fd3a9293d7b513fbb766d7bc06abd7e0",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 3.74,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "private boolean isInlineableDeclaredConstant(Var var, ReferenceCollection refInfo) {\n    if (!identifyConstants.apply(var)) {\n        return false;\n    }\n    if (!refInfo.isAssignedOnce()) {\n        return false;\n    }\n    Reference init \u003d refInfo.getInitializingReferenceForConstants();\n    if (init \u003d\u003d null) {\n        return false;\n    }\n    Node value \u003d init.getAssignedValue();\n    if (value \u003d\u003d null) {\n        return false;\n    }\n    if (!NodeUtil.isImmutableValue(value)) {\n        return false;\n    }\n    return value.getType() !\u003d Token.STRING || isStringWorthInlining(var, refInfo.references);\n}",
          "path": "src/com/google/javascript/jscomp/InlineVariables.java",
          "functionStartLine": 375,
          "functionName": "isInlineableDeclaredConstant",
          "functionAnnotation": "",
          "functionDoc": "Determines whether the given variable is declared as a constant\nand may be inlined.\n",
          "diff": "@@ -1,6 +1,20 @@\n-private boolean isInlineableDeclaredConstant(Var var, List\u003cReference\u003e refs) {\n+private boolean isInlineableDeclaredConstant(Var var, ReferenceCollection refInfo) {\n     if (!identifyConstants.apply(var)) {\n         return false;\n     }\n-    return var.getInitialValue().getType() !\u003d Token.STRING || isStringWorthInlining(var, refs);\n+    if (!refInfo.isAssignedOnce()) {\n+        return false;\n+    }\n+    Reference init \u003d refInfo.getInitializingReferenceForConstants();\n+    if (init \u003d\u003d null) {\n+        return false;\n+    }\n+    Node value \u003d init.getAssignedValue();\n+    if (value \u003d\u003d null) {\n+        return false;\n+    }\n+    if (!NodeUtil.isImmutableValue(value)) {\n+        return false;\n+    }\n+    return value.getType() !\u003d Token.STRING || isStringWorthInlining(var, refInfo.references);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,6 @@\n+private boolean isInlineableDeclaredConstant(Var var, List\u003cReference\u003e refs) {\n+    if (!identifyConstants.apply(var)) {\n+        return false;\n+    }\n+    return var.getInitialValue().getType() !\u003d Token.STRING || isStringWorthInlining(var, refs);\n+}\n\\ No newline at end of file\n",
      "actualSource": "private boolean isInlineableDeclaredConstant(Var var, List\u003cReference\u003e refs) {\n    if (!identifyConstants.apply(var)) {\n        return false;\n    }\n    return var.getInitialValue().getType() !\u003d Token.STRING || isStringWorthInlining(var, refs);\n}",
      "path": "src/com/google/javascript/jscomp/InlineVariables.java",
      "functionStartLine": 381,
      "functionName": "isInlineableDeclaredConstant",
      "functionAnnotation": "",
      "functionDoc": "Determines whether the given variable is declared as a constant\nand may be inlined.\n"
    }
  }
}