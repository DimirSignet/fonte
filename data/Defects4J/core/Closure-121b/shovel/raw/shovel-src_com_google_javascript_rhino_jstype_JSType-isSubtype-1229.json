{
  "origin": "codeshovel",
  "repositoryName": "Closure-121b",
  "repositoryPath": "/tmp/Closure-121b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JSType.java",
  "functionName": "isSubtype",
  "functionId": "isSubtype___that-JSType",
  "sourceFilePath": "src/com/google/javascript/rhino/jstype/JSType.java",
  "functionAnnotation": "",
  "functionDoc": "Checks whether {@code this} is a subtype of {@code that}.\u003cp\u003e\n\nSubtyping rules:\n\u003cul\u003e\n\u003cli\u003e(unknown) \u0026mdash; every type is a subtype of the Unknown type.\u003c/li\u003e\n\u003cli\u003e(no) \u0026mdash; the No type is a subtype of every type.\u003c/li\u003e\n\u003cli\u003e(no-object) \u0026mdash; the NoObject type is a subtype of every object\ntype (i.e. subtypes of the Object type).\u003c/li\u003e\n\u003cli\u003e(ref) \u0026mdash; a type is a subtype of itself.\u003c/li\u003e\n\u003cli\u003e(union-l) \u0026mdash; A union type is a subtype of a type U if all the\nunion type\u0027s constituents are a subtype of U. Formally\u003cbr\u003e\n{@code (T\u003csub\u003e1\u003c/sub\u003e, \u0026hellip;, T\u003csub\u003en\u003c/sub\u003e) \u0026lt;: U} if and only\n{@code T\u003csub\u003ek\u003c/sub\u003e \u0026lt;: U} for all {@code k \u0026isin; 1..n}.\u003c/li\u003e\n\u003cli\u003e(union-r) \u0026mdash; A type U is a subtype of a union type if it is a\nsubtype of one of the union type\u0027s constituents. Formally\u003cbr\u003e\n{@code U \u0026lt;: (T\u003csub\u003e1\u003c/sub\u003e, \u0026hellip;, T\u003csub\u003en\u003c/sub\u003e)} if and only\nif {@code U \u0026lt;: T\u003csub\u003ek\u003c/sub\u003e} for some index {@code k}.\u003c/li\u003e\n\u003cli\u003e(objects) \u0026mdash; an Object {@code O\u003csub\u003e1\u003c/sub\u003e} is a subtype\nof an object {@code O\u003csub\u003e2\u003c/sub\u003e} if it has more properties\nthan {@code O\u003csub\u003e2\u003c/sub\u003e} and all common properties are\npairwise subtypes.\u003c/li\u003e\n\u003c/ul\u003e\n\n@return @code this \u0026lt;: that}\n",
  "functionStartLine": 1229,
  "functionEndLine": 1231,
  "numCommitsSeen": 134,
  "timeTaken": 3111,
  "changeHistory": [
    "3c1c9eabcde278439f21bcda1468425f92d7c052",
    "5ac633a4e4471847da5aa22bb1fcf28727eb7fe9",
    "d6227f739b8380f74663b2f536ed4a9649fd0841",
    "cf5fd88f13f0b11625ac407f85cb58b36862e173",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "3c1c9eabcde278439f21bcda1468425f92d7c052": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange,Ydocchange)",
    "5ac633a4e4471847da5aa22bb1fcf28727eb7fe9": "Ybodychange",
    "d6227f739b8380f74663b2f536ed4a9649fd0841": "Ybodychange",
    "cf5fd88f13f0b11625ac407f85cb58b36862e173": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3c1c9eabcde278439f21bcda1468425f92d7c052": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange,Ydocchange)",
      "commitMessage": "\nfix up some subtype tests\n\nR\u003dtylerg\nDELTA\u003d43  (8 added, 17 deleted, 18 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3402\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1488 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/4/11, 1:56 PM",
      "commitName": "3c1c9eabcde278439f21bcda1468425f92d7c052",
      "commitAuthor": "nicksantos@google.com",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "\nfix up some subtype tests\n\nR\u003dtylerg\nDELTA\u003d43  (8 added, 17 deleted, 18 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3402\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1488 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "10/4/11, 1:56 PM",
          "commitName": "3c1c9eabcde278439f21bcda1468425f92d7c052",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "9/13/11, 12:26 PM",
          "commitNameOld": "7dc66e4ee2b0a306b71b1fd7f95602209671bc83",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 21.06,
          "commitsBetweenForRepo": 43,
          "commitsBetweenForFile": 1,
          "actualSource": "public boolean isSubtype(JSType that) {\n    return isSubtypeHelper(this, that);\n}",
          "path": "src/com/google/javascript/rhino/jstype/JSType.java",
          "functionStartLine": 959,
          "functionName": "isSubtype",
          "functionAnnotation": "",
          "functionDoc": "Checks whether {@code this} is a subtype of {@code that}.\u003cp\u003e\n\nSubtyping rules:\n\u003cul\u003e\n\u003cli\u003e(unknown) \u0026mdash; every type is a subtype of the Unknown type.\u003c/li\u003e\n\u003cli\u003e(no) \u0026mdash; the No type is a subtype of every type.\u003c/li\u003e\n\u003cli\u003e(no-object) \u0026mdash; the NoObject type is a subtype of every object\ntype (i.e. subtypes of the Object type).\u003c/li\u003e\n\u003cli\u003e(ref) \u0026mdash; a type is a subtype of itself.\u003c/li\u003e\n\u003cli\u003e(union-l) \u0026mdash; A union type is a subtype of a type U if all the\nunion type\u0027s constituents are a subtype of U. Formally\u003cbr\u003e\n{@code (T\u003csub\u003e1\u003c/sub\u003e, \u0026hellip;, T\u003csub\u003en\u003c/sub\u003e) \u0026lt;: U} if and only\n{@code T\u003csub\u003ek\u003c/sub\u003e \u0026lt;: U} for all {@code k \u0026isin; 1..n}.\u003c/li\u003e\n\u003cli\u003e(union-r) \u0026mdash; A type U is a subtype of a union type if it is a\nsubtype of one of the union type\u0027s constituents. Formally\u003cbr\u003e\n{@code U \u0026lt;: (T\u003csub\u003e1\u003c/sub\u003e, \u0026hellip;, T\u003csub\u003en\u003c/sub\u003e)} if and only\nif {@code U \u0026lt;: T\u003csub\u003ek\u003c/sub\u003e} for some index {@code k}.\u003c/li\u003e\n\u003cli\u003e(objects) \u0026mdash; an Object {@code O\u003csub\u003e1\u003c/sub\u003e} is a subtype\nof an object {@code O\u003csub\u003e2\u003c/sub\u003e} if it has more properties\nthan {@code O\u003csub\u003e2\u003c/sub\u003e} and all common properties are\npairwise subtypes.\u003c/li\u003e\n\u003c/ul\u003e\n\n@return @code this \u0026lt;: that}\n",
          "diff": "@@ -1,23 +1,3 @@\n-static boolean isSubtype(JSType thisType, JSType thatType) {\n-    if (thatType.isUnknownType()) {\n-        return true;\n-    }\n-    if (thisType.isEquivalentTo(thatType)) {\n-        return true;\n-    }\n-    if (thatType.isAllType()) {\n-        return true;\n-    }\n-    if (thatType.isUnionType()) {\n-        UnionType union \u003d thatType.toMaybeUnionType();\n-        for (JSType element : union.alternates) {\n-            if (thisType.isSubtype(element)) {\n-                return true;\n-            }\n-        }\n-    }\n-    if (thatType instanceof NamedType) {\n-        return thisType.isSubtype(((NamedType) thatType).getReferencedType());\n-    }\n-    return false;\n+public boolean isSubtype(JSType that) {\n+    return isSubtypeHelper(this, that);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[thisType-JSType, thatType-JSType]",
            "newValue": "[that-JSType]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "\nfix up some subtype tests\n\nR\u003dtylerg\nDELTA\u003d43  (8 added, 17 deleted, 18 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3402\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1488 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "10/4/11, 1:56 PM",
          "commitName": "3c1c9eabcde278439f21bcda1468425f92d7c052",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "9/13/11, 12:26 PM",
          "commitNameOld": "7dc66e4ee2b0a306b71b1fd7f95602209671bc83",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 21.06,
          "commitsBetweenForRepo": 43,
          "commitsBetweenForFile": 1,
          "actualSource": "public boolean isSubtype(JSType that) {\n    return isSubtypeHelper(this, that);\n}",
          "path": "src/com/google/javascript/rhino/jstype/JSType.java",
          "functionStartLine": 959,
          "functionName": "isSubtype",
          "functionAnnotation": "",
          "functionDoc": "Checks whether {@code this} is a subtype of {@code that}.\u003cp\u003e\n\nSubtyping rules:\n\u003cul\u003e\n\u003cli\u003e(unknown) \u0026mdash; every type is a subtype of the Unknown type.\u003c/li\u003e\n\u003cli\u003e(no) \u0026mdash; the No type is a subtype of every type.\u003c/li\u003e\n\u003cli\u003e(no-object) \u0026mdash; the NoObject type is a subtype of every object\ntype (i.e. subtypes of the Object type).\u003c/li\u003e\n\u003cli\u003e(ref) \u0026mdash; a type is a subtype of itself.\u003c/li\u003e\n\u003cli\u003e(union-l) \u0026mdash; A union type is a subtype of a type U if all the\nunion type\u0027s constituents are a subtype of U. Formally\u003cbr\u003e\n{@code (T\u003csub\u003e1\u003c/sub\u003e, \u0026hellip;, T\u003csub\u003en\u003c/sub\u003e) \u0026lt;: U} if and only\n{@code T\u003csub\u003ek\u003c/sub\u003e \u0026lt;: U} for all {@code k \u0026isin; 1..n}.\u003c/li\u003e\n\u003cli\u003e(union-r) \u0026mdash; A type U is a subtype of a union type if it is a\nsubtype of one of the union type\u0027s constituents. Formally\u003cbr\u003e\n{@code U \u0026lt;: (T\u003csub\u003e1\u003c/sub\u003e, \u0026hellip;, T\u003csub\u003en\u003c/sub\u003e)} if and only\nif {@code U \u0026lt;: T\u003csub\u003ek\u003c/sub\u003e} for some index {@code k}.\u003c/li\u003e\n\u003cli\u003e(objects) \u0026mdash; an Object {@code O\u003csub\u003e1\u003c/sub\u003e} is a subtype\nof an object {@code O\u003csub\u003e2\u003c/sub\u003e} if it has more properties\nthan {@code O\u003csub\u003e2\u003c/sub\u003e} and all common properties are\npairwise subtypes.\u003c/li\u003e\n\u003c/ul\u003e\n\n@return @code this \u0026lt;: that}\n",
          "diff": "@@ -1,23 +1,3 @@\n-static boolean isSubtype(JSType thisType, JSType thatType) {\n-    if (thatType.isUnknownType()) {\n-        return true;\n-    }\n-    if (thisType.isEquivalentTo(thatType)) {\n-        return true;\n-    }\n-    if (thatType.isAllType()) {\n-        return true;\n-    }\n-    if (thatType.isUnionType()) {\n-        UnionType union \u003d thatType.toMaybeUnionType();\n-        for (JSType element : union.alternates) {\n-            if (thisType.isSubtype(element)) {\n-                return true;\n-            }\n-        }\n-    }\n-    if (thatType instanceof NamedType) {\n-        return thisType.isSubtype(((NamedType) thatType).getReferencedType());\n-    }\n-    return false;\n+public boolean isSubtype(JSType that) {\n+    return isSubtypeHelper(this, that);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[static]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nfix up some subtype tests\n\nR\u003dtylerg\nDELTA\u003d43  (8 added, 17 deleted, 18 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3402\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1488 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "10/4/11, 1:56 PM",
          "commitName": "3c1c9eabcde278439f21bcda1468425f92d7c052",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "9/13/11, 12:26 PM",
          "commitNameOld": "7dc66e4ee2b0a306b71b1fd7f95602209671bc83",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 21.06,
          "commitsBetweenForRepo": 43,
          "commitsBetweenForFile": 1,
          "actualSource": "public boolean isSubtype(JSType that) {\n    return isSubtypeHelper(this, that);\n}",
          "path": "src/com/google/javascript/rhino/jstype/JSType.java",
          "functionStartLine": 959,
          "functionName": "isSubtype",
          "functionAnnotation": "",
          "functionDoc": "Checks whether {@code this} is a subtype of {@code that}.\u003cp\u003e\n\nSubtyping rules:\n\u003cul\u003e\n\u003cli\u003e(unknown) \u0026mdash; every type is a subtype of the Unknown type.\u003c/li\u003e\n\u003cli\u003e(no) \u0026mdash; the No type is a subtype of every type.\u003c/li\u003e\n\u003cli\u003e(no-object) \u0026mdash; the NoObject type is a subtype of every object\ntype (i.e. subtypes of the Object type).\u003c/li\u003e\n\u003cli\u003e(ref) \u0026mdash; a type is a subtype of itself.\u003c/li\u003e\n\u003cli\u003e(union-l) \u0026mdash; A union type is a subtype of a type U if all the\nunion type\u0027s constituents are a subtype of U. Formally\u003cbr\u003e\n{@code (T\u003csub\u003e1\u003c/sub\u003e, \u0026hellip;, T\u003csub\u003en\u003c/sub\u003e) \u0026lt;: U} if and only\n{@code T\u003csub\u003ek\u003c/sub\u003e \u0026lt;: U} for all {@code k \u0026isin; 1..n}.\u003c/li\u003e\n\u003cli\u003e(union-r) \u0026mdash; A type U is a subtype of a union type if it is a\nsubtype of one of the union type\u0027s constituents. Formally\u003cbr\u003e\n{@code U \u0026lt;: (T\u003csub\u003e1\u003c/sub\u003e, \u0026hellip;, T\u003csub\u003en\u003c/sub\u003e)} if and only\nif {@code U \u0026lt;: T\u003csub\u003ek\u003c/sub\u003e} for some index {@code k}.\u003c/li\u003e\n\u003cli\u003e(objects) \u0026mdash; an Object {@code O\u003csub\u003e1\u003c/sub\u003e} is a subtype\nof an object {@code O\u003csub\u003e2\u003c/sub\u003e} if it has more properties\nthan {@code O\u003csub\u003e2\u003c/sub\u003e} and all common properties are\npairwise subtypes.\u003c/li\u003e\n\u003c/ul\u003e\n\n@return @code this \u0026lt;: that}\n",
          "diff": "@@ -1,23 +1,3 @@\n-static boolean isSubtype(JSType thisType, JSType thatType) {\n-    if (thatType.isUnknownType()) {\n-        return true;\n-    }\n-    if (thisType.isEquivalentTo(thatType)) {\n-        return true;\n-    }\n-    if (thatType.isAllType()) {\n-        return true;\n-    }\n-    if (thatType.isUnionType()) {\n-        UnionType union \u003d thatType.toMaybeUnionType();\n-        for (JSType element : union.alternates) {\n-            if (thisType.isSubtype(element)) {\n-                return true;\n-            }\n-        }\n-    }\n-    if (thatType instanceof NamedType) {\n-        return thisType.isSubtype(((NamedType) thatType).getReferencedType());\n-    }\n-    return false;\n+public boolean isSubtype(JSType that) {\n+    return isSubtypeHelper(this, that);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "\nfix up some subtype tests\n\nR\u003dtylerg\nDELTA\u003d43  (8 added, 17 deleted, 18 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3402\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1488 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "10/4/11, 1:56 PM",
          "commitName": "3c1c9eabcde278439f21bcda1468425f92d7c052",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "9/13/11, 12:26 PM",
          "commitNameOld": "7dc66e4ee2b0a306b71b1fd7f95602209671bc83",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 21.06,
          "commitsBetweenForRepo": 43,
          "commitsBetweenForFile": 1,
          "actualSource": "public boolean isSubtype(JSType that) {\n    return isSubtypeHelper(this, that);\n}",
          "path": "src/com/google/javascript/rhino/jstype/JSType.java",
          "functionStartLine": 959,
          "functionName": "isSubtype",
          "functionAnnotation": "",
          "functionDoc": "Checks whether {@code this} is a subtype of {@code that}.\u003cp\u003e\n\nSubtyping rules:\n\u003cul\u003e\n\u003cli\u003e(unknown) \u0026mdash; every type is a subtype of the Unknown type.\u003c/li\u003e\n\u003cli\u003e(no) \u0026mdash; the No type is a subtype of every type.\u003c/li\u003e\n\u003cli\u003e(no-object) \u0026mdash; the NoObject type is a subtype of every object\ntype (i.e. subtypes of the Object type).\u003c/li\u003e\n\u003cli\u003e(ref) \u0026mdash; a type is a subtype of itself.\u003c/li\u003e\n\u003cli\u003e(union-l) \u0026mdash; A union type is a subtype of a type U if all the\nunion type\u0027s constituents are a subtype of U. Formally\u003cbr\u003e\n{@code (T\u003csub\u003e1\u003c/sub\u003e, \u0026hellip;, T\u003csub\u003en\u003c/sub\u003e) \u0026lt;: U} if and only\n{@code T\u003csub\u003ek\u003c/sub\u003e \u0026lt;: U} for all {@code k \u0026isin; 1..n}.\u003c/li\u003e\n\u003cli\u003e(union-r) \u0026mdash; A type U is a subtype of a union type if it is a\nsubtype of one of the union type\u0027s constituents. Formally\u003cbr\u003e\n{@code U \u0026lt;: (T\u003csub\u003e1\u003c/sub\u003e, \u0026hellip;, T\u003csub\u003en\u003c/sub\u003e)} if and only\nif {@code U \u0026lt;: T\u003csub\u003ek\u003c/sub\u003e} for some index {@code k}.\u003c/li\u003e\n\u003cli\u003e(objects) \u0026mdash; an Object {@code O\u003csub\u003e1\u003c/sub\u003e} is a subtype\nof an object {@code O\u003csub\u003e2\u003c/sub\u003e} if it has more properties\nthan {@code O\u003csub\u003e2\u003c/sub\u003e} and all common properties are\npairwise subtypes.\u003c/li\u003e\n\u003c/ul\u003e\n\n@return @code this \u0026lt;: that}\n",
          "diff": "@@ -1,23 +1,3 @@\n-static boolean isSubtype(JSType thisType, JSType thatType) {\n-    if (thatType.isUnknownType()) {\n-        return true;\n-    }\n-    if (thisType.isEquivalentTo(thatType)) {\n-        return true;\n-    }\n-    if (thatType.isAllType()) {\n-        return true;\n-    }\n-    if (thatType.isUnionType()) {\n-        UnionType union \u003d thatType.toMaybeUnionType();\n-        for (JSType element : union.alternates) {\n-            if (thisType.isSubtype(element)) {\n-                return true;\n-            }\n-        }\n-    }\n-    if (thatType instanceof NamedType) {\n-        return thisType.isSubtype(((NamedType) thatType).getReferencedType());\n-    }\n-    return false;\n+public boolean isSubtype(JSType that) {\n+    return isSubtypeHelper(this, that);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "A generic implementation meant to be used as a helper for common subtyping\ncases.\n",
            "newValue": "Checks whether {@code this} is a subtype of {@code that}.\u003cp\u003e\n\nSubtyping rules:\n\u003cul\u003e\n\u003cli\u003e(unknown) \u0026mdash; every type is a subtype of the Unknown type.\u003c/li\u003e\n\u003cli\u003e(no) \u0026mdash; the No type is a subtype of every type.\u003c/li\u003e\n\u003cli\u003e(no-object) \u0026mdash; the NoObject type is a subtype of every object\ntype (i.e. subtypes of the Object type).\u003c/li\u003e\n\u003cli\u003e(ref) \u0026mdash; a type is a subtype of itself.\u003c/li\u003e\n\u003cli\u003e(union-l) \u0026mdash; A union type is a subtype of a type U if all the\nunion type\u0027s constituents are a subtype of U. Formally\u003cbr\u003e\n{@code (T\u003csub\u003e1\u003c/sub\u003e, \u0026hellip;, T\u003csub\u003en\u003c/sub\u003e) \u0026lt;: U} if and only\n{@code T\u003csub\u003ek\u003c/sub\u003e \u0026lt;: U} for all {@code k \u0026isin; 1..n}.\u003c/li\u003e\n\u003cli\u003e(union-r) \u0026mdash; A type U is a subtype of a union type if it is a\nsubtype of one of the union type\u0027s constituents. Formally\u003cbr\u003e\n{@code U \u0026lt;: (T\u003csub\u003e1\u003c/sub\u003e, \u0026hellip;, T\u003csub\u003en\u003c/sub\u003e)} if and only\nif {@code U \u0026lt;: T\u003csub\u003ek\u003c/sub\u003e} for some index {@code k}.\u003c/li\u003e\n\u003cli\u003e(objects) \u0026mdash; an Object {@code O\u003csub\u003e1\u003c/sub\u003e} is a subtype\nof an object {@code O\u003csub\u003e2\u003c/sub\u003e} if it has more properties\nthan {@code O\u003csub\u003e2\u003c/sub\u003e} and all common properties are\npairwise subtypes.\u003c/li\u003e\n\u003c/ul\u003e\n\n@return @code this \u0026lt;: that}\n"
          }
        }
      ]
    },
    "5ac633a4e4471847da5aa22bb1fcf28727eb7fe9": {
      "type": "Ybodychange",
      "commitMessage": "\nAdd a toUnionType method.\nI think this should be a lot more correct and easier for clients\nto use, because it will resolve typedefs of UnionTypes better.\nI will probably do this for all other instanceof checks if we\nagree that this is the way we want to go.\n\nR\u003djohnlenz\nDELTA\u003d79  (14 added, 7 deleted, 58 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3047\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1362 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/17/11, 11:43 AM",
      "commitName": "5ac633a4e4471847da5aa22bb1fcf28727eb7fe9",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "7/28/11, 2:24 PM",
      "commitNameOld": "5200a1c2404a424425ab2b04a7a64e08e0ee4925",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 19.89,
      "commitsBetweenForRepo": 49,
      "commitsBetweenForFile": 1,
      "actualSource": "static boolean isSubtype(JSType thisType, JSType thatType) {\n    if (thatType.isUnknownType()) {\n        return true;\n    }\n    if (thisType.isEquivalentTo(thatType)) {\n        return true;\n    }\n    if (thatType.isAllType()) {\n        return true;\n    }\n    if (thatType.isUnionType()) {\n        UnionType union \u003d thatType.toMaybeUnionType();\n        for (JSType element : union.alternates) {\n            if (thisType.isSubtype(element)) {\n                return true;\n            }\n        }\n    }\n    if (thatType instanceof NamedType) {\n        return thisType.isSubtype(((NamedType) thatType).getReferencedType());\n    }\n    return false;\n}",
      "path": "src/com/google/javascript/rhino/jstype/JSType.java",
      "functionStartLine": 912,
      "functionName": "isSubtype",
      "functionAnnotation": "",
      "functionDoc": "A generic implementation meant to be used as a helper for common subtyping\ncases.\n",
      "diff": "@@ -1,23 +1,23 @@\n static boolean isSubtype(JSType thisType, JSType thatType) {\n     if (thatType.isUnknownType()) {\n         return true;\n     }\n     if (thisType.isEquivalentTo(thatType)) {\n         return true;\n     }\n     if (thatType.isAllType()) {\n         return true;\n     }\n-    if (thatType instanceof UnionType) {\n-        UnionType union \u003d (UnionType) thatType;\n+    if (thatType.isUnionType()) {\n+        UnionType union \u003d thatType.toMaybeUnionType();\n         for (JSType element : union.alternates) {\n             if (thisType.isSubtype(element)) {\n                 return true;\n             }\n         }\n     }\n     if (thatType instanceof NamedType) {\n         return thisType.isSubtype(((NamedType) thatType).getReferencedType());\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d6227f739b8380f74663b2f536ed4a9649fd0841": {
      "type": "Ybodychange",
      "commitMessage": "\nAdd half-assed support for late-resolved typedefs of union types.\nThe fundamental issue is that NamedType is a proxy wrapper around\nObjectTypes, but has always been used for non-object types (like\ntypedef\u0027d unions.\nI eventually want to move towards the using UnresolvedTypes for type\nresolution. Under that system, the proxy wrapper gets thrown away.\nUnresolveTypes would also solve this issue. But that system breaks\na whole bunch of assumptions about hash codes and referential\ntransparency, so we\u0027re not ready for it yet.\n\nR\u003djohnlenz\nDELTA\u003d116  (75 added, 0 deleted, 41 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d304858\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@482 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/8/10, 1:19 PM",
      "commitName": "d6227f739b8380f74663b2f536ed4a9649fd0841",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "9/13/10, 11:12 AM",
      "commitNameOld": "4c6e1039b80859f17de5f3cbcfeba61ed8ea0485",
      "commitAuthorOld": "elbaum@google.com",
      "daysBetweenCommits": 25.09,
      "commitsBetweenForRepo": 57,
      "commitsBetweenForFile": 1,
      "actualSource": "static boolean isSubtype(JSType thisType, JSType thatType) {\n    if (thatType.isUnknownType()) {\n        return true;\n    }\n    if (thisType.isEquivalentTo(thatType)) {\n        return true;\n    }\n    if (thatType.isAllType()) {\n        return true;\n    }\n    if (thatType instanceof UnionType) {\n        UnionType union \u003d (UnionType) thatType;\n        for (JSType element : union.alternates) {\n            if (thisType.isSubtype(element)) {\n                return true;\n            }\n        }\n    }\n    if (thatType instanceof NamedType) {\n        return thisType.isSubtype(((NamedType) thatType).getReferencedType());\n    }\n    return false;\n}",
      "path": "src/com/google/javascript/rhino/jstype/JSType.java",
      "functionStartLine": 820,
      "functionName": "isSubtype",
      "functionAnnotation": "",
      "functionDoc": "A generic implementation meant to be used as a helper for common subtyping\ncases.\n",
      "diff": "@@ -1,23 +1,23 @@\n static boolean isSubtype(JSType thisType, JSType thatType) {\n     if (thatType.isUnknownType()) {\n         return true;\n     }\n     if (thisType.isEquivalentTo(thatType)) {\n         return true;\n     }\n     if (thatType.isAllType()) {\n         return true;\n     }\n     if (thatType instanceof UnionType) {\n         UnionType union \u003d (UnionType) thatType;\n         for (JSType element : union.alternates) {\n             if (thisType.isSubtype(element)) {\n                 return true;\n             }\n         }\n     }\n     if (thatType instanceof NamedType) {\n-        return thisType.isSubtype(((NamedType) thatType).referencedType);\n+        return thisType.isSubtype(((NamedType) thatType).getReferencedType());\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "cf5fd88f13f0b11625ac407f85cb58b36862e173": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/05/25 by nicksantos\n\n        start moving away from using Object#equals for type equality.\n\n        R\u003djohnlenz\n        DELTA\u003d445  (98 added, 3 deleted, 344 changed)\n\nChange on 2010/05/25 by acleung\n\n        Fix bug with resolving a member function of a resolved constructor.\n\n        R\u003djohnlenz\n        DELTA\u003d48  (48 added, 0 deleted, 0 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d12002\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@231 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/26/10, 8:26 AM",
      "commitName": "cf5fd88f13f0b11625ac407f85cb58b36862e173",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "5/4/10, 7:39 AM",
      "commitNameOld": "58c3e4ce1d17ec619bcc4964bdeebc676f93567d",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 22.03,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "actualSource": "static boolean isSubtype(JSType thisType, JSType thatType) {\n    if (thatType.isUnknownType()) {\n        return true;\n    }\n    if (thisType.isEquivalentTo(thatType)) {\n        return true;\n    }\n    if (thatType.isAllType()) {\n        return true;\n    }\n    if (thatType instanceof UnionType) {\n        UnionType union \u003d (UnionType) thatType;\n        for (JSType element : union.alternates) {\n            if (thisType.isSubtype(element)) {\n                return true;\n            }\n        }\n    }\n    if (thatType instanceof NamedType) {\n        return thisType.isSubtype(((NamedType) thatType).referencedType);\n    }\n    return false;\n}",
      "path": "src/com/google/javascript/rhino/jstype/JSType.java",
      "functionStartLine": 815,
      "functionName": "isSubtype",
      "functionAnnotation": "",
      "functionDoc": "A generic implementation meant to be used as a helper for common subtyping\ncases.\n",
      "diff": "@@ -1,23 +1,23 @@\n static boolean isSubtype(JSType thisType, JSType thatType) {\n     if (thatType.isUnknownType()) {\n         return true;\n     }\n-    if (thisType.equals(thatType)) {\n+    if (thisType.isEquivalentTo(thatType)) {\n         return true;\n     }\n     if (thatType.isAllType()) {\n         return true;\n     }\n     if (thatType instanceof UnionType) {\n         UnionType union \u003d (UnionType) thatType;\n         for (JSType element : union.alternates) {\n             if (thisType.isSubtype(element)) {\n                 return true;\n             }\n         }\n     }\n     if (thatType instanceof NamedType) {\n         return thisType.isSubtype(((NamedType) thatType).referencedType);\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,23 @@\n+static boolean isSubtype(JSType thisType, JSType thatType) {\n+    if (thatType.isUnknownType()) {\n+        return true;\n+    }\n+    if (thisType.equals(thatType)) {\n+        return true;\n+    }\n+    if (thatType.isAllType()) {\n+        return true;\n+    }\n+    if (thatType instanceof UnionType) {\n+        UnionType union \u003d (UnionType) thatType;\n+        for (JSType element : union.alternates) {\n+            if (thisType.isSubtype(element)) {\n+                return true;\n+            }\n+        }\n+    }\n+    if (thatType instanceof NamedType) {\n+        return thisType.isSubtype(((NamedType) thatType).referencedType);\n+    }\n+    return false;\n+}\n\\ No newline at end of file\n",
      "actualSource": "static boolean isSubtype(JSType thisType, JSType thatType) {\n    if (thatType.isUnknownType()) {\n        return true;\n    }\n    if (thisType.equals(thatType)) {\n        return true;\n    }\n    if (thatType.isAllType()) {\n        return true;\n    }\n    if (thatType instanceof UnionType) {\n        UnionType union \u003d (UnionType) thatType;\n        for (JSType element : union.alternates) {\n            if (thisType.isSubtype(element)) {\n                return true;\n            }\n        }\n    }\n    if (thatType instanceof NamedType) {\n        return thisType.isSubtype(((NamedType) thatType).referencedType);\n    }\n    return false;\n}",
      "path": "src/com/google/javascript/rhino/jstype/JSType.java",
      "functionStartLine": 796,
      "functionName": "isSubtype",
      "functionAnnotation": "",
      "functionDoc": "A generic implementation meant to be used as a helper for common subtyping\ncases.\n"
    }
  }
}