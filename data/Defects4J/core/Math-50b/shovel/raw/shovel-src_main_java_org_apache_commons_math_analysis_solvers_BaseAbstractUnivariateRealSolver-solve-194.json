{
  "origin": "codeshovel",
  "repositoryName": "Math-50b",
  "repositoryPath": "/tmp/Math-50b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BaseAbstractUnivariateRealSolver.java",
  "functionName": "solve",
  "functionId": "solve___maxEval-int__f-FUNC__min-double__max-double",
  "sourceFilePath": "src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java",
  "functionAnnotation": "",
  "functionDoc": "@inheritDoc}\n",
  "functionStartLine": 194,
  "functionEndLine": 196,
  "numCommitsSeen": 68,
  "timeTaken": 3026,
  "changeHistory": [
    "6cca072b5c9c5e2e2e0c6f208ce874e03993ed1f",
    "74ff198bd249a56d1349b963bd265f8899743b9b",
    "8302dd02498495277ec0db9301edb2158bb0e314",
    "f41fcd85ca62a2109a6e550be0353d292d351213",
    "d6a438e931412713e99624cf9ed74470f1040184",
    "1d1436557bcb21887d9b352dd0f5f3d3acb71e11",
    "583dffc0ee383e9b5e1e08c574de10db8270fdb7",
    "d2d4c5fd63f279be0797468277593ef72506c696",
    "545e47a273803b1d080b186c8cf139492f82c4fb",
    "6a978ea29f680a87dfc380c760adf2e17b2e7c9c",
    "402160b94a9ffd5f400d8e5717badcaa2fd3c5af",
    "2d69367fab142b626ce36d418272f99ad8fc3dc1",
    "0a904461932f2c0455611e77ec6a8d8aced2980b"
  ],
  "changeHistoryShort": {
    "6cca072b5c9c5e2e2e0c6f208ce874e03993ed1f": "Ymultichange(Yparameterchange,Ybodychange)",
    "74ff198bd249a56d1349b963bd265f8899743b9b": "Ymultichange(Ymovefromfile,Yexceptionschange,Ybodychange,Yparameterchange)",
    "8302dd02498495277ec0db9301edb2158bb0e314": "Yexceptionschange",
    "f41fcd85ca62a2109a6e550be0353d292d351213": "Ybodychange",
    "d6a438e931412713e99624cf9ed74470f1040184": "Yfilerename",
    "1d1436557bcb21887d9b352dd0f5f3d3acb71e11": "Yfilerename",
    "583dffc0ee383e9b5e1e08c574de10db8270fdb7": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "d2d4c5fd63f279be0797468277593ef72506c696": "Ymultichange(Yexceptionschange,Ybodychange,Ydocchange)",
    "545e47a273803b1d080b186c8cf139492f82c4fb": "Ybodychange",
    "6a978ea29f680a87dfc380c760adf2e17b2e7c9c": "Ymultichange(Yexceptionschange,Ybodychange,Ydocchange)",
    "402160b94a9ffd5f400d8e5717badcaa2fd3c5af": "Ybodychange",
    "2d69367fab142b626ce36d418272f99ad8fc3dc1": "Ymultichange(Ybodychange,Ydocchange)",
    "0a904461932f2c0455611e77ec6a8d8aced2980b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6cca072b5c9c5e2e2e0c6f208ce874e03993ed1f": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "MATH-451\nIn solvers, the maximum number of evaluations is passed as a parameter to the\nmethod \"solve\". The \"setMaxEvaluations\" accessor is removed.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1042151 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/4/10, 3:31 AM",
      "commitName": "6cca072b5c9c5e2e2e0c6f208ce874e03993ed1f",
      "commitAuthor": "Gilles Sadowski",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MATH-451\nIn solvers, the maximum number of evaluations is passed as a parameter to the\nmethod \"solve\". The \"setMaxEvaluations\" accessor is removed.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1042151 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/4/10, 3:31 AM",
          "commitName": "6cca072b5c9c5e2e2e0c6f208ce874e03993ed1f",
          "commitAuthor": "Gilles Sadowski",
          "commitDateOld": "11/25/10, 8:22 AM",
          "commitNameOld": "74ff198bd249a56d1349b963bd265f8899743b9b",
          "commitAuthorOld": "Gilles Sadowski",
          "daysBetweenCommits": 8.8,
          "commitsBetweenForRepo": 17,
          "commitsBetweenForFile": 1,
          "actualSource": "public double solve(int maxEval, FUNC f, double min, double max) {\n    return solve(maxEval, f, min, max, min + 0.5 * (max - min));\n}",
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java",
          "functionStartLine": 213,
          "functionName": "solve",
          "functionAnnotation": "",
          "functionDoc": "@inheritDoc}\n",
          "diff": "@@ -1,3 +1,3 @@\n-public double solve(FUNC f, double min, double max) {\n-    return solve(f, min, max, min + 0.5 * (max - min));\n+public double solve(int maxEval, FUNC f, double min, double max) {\n+    return solve(maxEval, f, min, max, min + 0.5 * (max - min));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[f-FUNC, min-double, max-double]",
            "newValue": "[maxEval-int, f-FUNC, min-double, max-double]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MATH-451\nIn solvers, the maximum number of evaluations is passed as a parameter to the\nmethod \"solve\". The \"setMaxEvaluations\" accessor is removed.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1042151 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/4/10, 3:31 AM",
          "commitName": "6cca072b5c9c5e2e2e0c6f208ce874e03993ed1f",
          "commitAuthor": "Gilles Sadowski",
          "commitDateOld": "11/25/10, 8:22 AM",
          "commitNameOld": "74ff198bd249a56d1349b963bd265f8899743b9b",
          "commitAuthorOld": "Gilles Sadowski",
          "daysBetweenCommits": 8.8,
          "commitsBetweenForRepo": 17,
          "commitsBetweenForFile": 1,
          "actualSource": "public double solve(int maxEval, FUNC f, double min, double max) {\n    return solve(maxEval, f, min, max, min + 0.5 * (max - min));\n}",
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java",
          "functionStartLine": 213,
          "functionName": "solve",
          "functionAnnotation": "",
          "functionDoc": "@inheritDoc}\n",
          "diff": "@@ -1,3 +1,3 @@\n-public double solve(FUNC f, double min, double max) {\n-    return solve(f, min, max, min + 0.5 * (max - min));\n+public double solve(int maxEval, FUNC f, double min, double max) {\n+    return solve(maxEval, f, min, max, min + 0.5 * (max - min));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "74ff198bd249a56d1349b963bd265f8899743b9b": {
      "type": "Ymultichange(Ymovefromfile,Yexceptionschange,Ybodychange,Yparameterchange)",
      "commitMessage": "MATH-439\nRefactored the \"solvers\" package. Implementations refer to number of\nevaluation of the objective function (instead of the number of iterations).\nNew interfaces and base classes.\n\"NewtonSolver\" fits in the design without resorting to a cast.\nCreated class \"MullerSolver2\" to contain the code of the method named \"solve2\"\nin class \"MullerSolver\".\nRemoved \"UnivariateRealSolverFactory\" and \"UnivariateRealSolverFactoryImpl\".\nDefault solver in \"UnivariateRealSolverUtils\" is explicitely instantiated.\n\"AbstractContinuousDistribution\": Type of exception thrown changed in\n\"UnivariateRealSolverUtils\".\nFactored out duplicate code (in \"GaussNewtonOptimizerTest\" and\n\"LevenbergMarquardtOptimizerTest\"): class \"Circle\" is now called\n\"CircleVectorial\". Also factored out the \"Circle\" class from\n\"NonLinearConjugateGradientOptimizerTest\": class is named \"CircleScalar\".\nCreated \"SecantSolverTest\", moving there all the tests for the class\n\"SecantSolver\" that were located in class \"BrentSolverTest\".\nCreated new interface and base class for polynomial functions solvers\n(\"LaguerreSolver\") so that the function type is now checked at compile time.\nRemoved deprecated exceptions (MATH-441).\nJavadoc clean-up.\nLowered tolerance values in some unit tests.\nTests upgraded to Junit 4 (MATH-423).\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1039083 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/25/10, 8:22 AM",
      "commitName": "74ff198bd249a56d1349b963bd265f8899743b9b",
      "commitAuthor": "Gilles Sadowski",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "MATH-439\nRefactored the \"solvers\" package. Implementations refer to number of\nevaluation of the objective function (instead of the number of iterations).\nNew interfaces and base classes.\n\"NewtonSolver\" fits in the design without resorting to a cast.\nCreated class \"MullerSolver2\" to contain the code of the method named \"solve2\"\nin class \"MullerSolver\".\nRemoved \"UnivariateRealSolverFactory\" and \"UnivariateRealSolverFactoryImpl\".\nDefault solver in \"UnivariateRealSolverUtils\" is explicitely instantiated.\n\"AbstractContinuousDistribution\": Type of exception thrown changed in\n\"UnivariateRealSolverUtils\".\nFactored out duplicate code (in \"GaussNewtonOptimizerTest\" and\n\"LevenbergMarquardtOptimizerTest\"): class \"Circle\" is now called\n\"CircleVectorial\". Also factored out the \"Circle\" class from\n\"NonLinearConjugateGradientOptimizerTest\": class is named \"CircleScalar\".\nCreated \"SecantSolverTest\", moving there all the tests for the class\n\"SecantSolver\" that were located in class \"BrentSolverTest\".\nCreated new interface and base class for polynomial functions solvers\n(\"LaguerreSolver\") so that the function type is now checked at compile time.\nRemoved deprecated exceptions (MATH-441).\nJavadoc clean-up.\nLowered tolerance values in some unit tests.\nTests upgraded to Junit 4 (MATH-423).\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1039083 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/25/10, 8:22 AM",
          "commitName": "74ff198bd249a56d1349b963bd265f8899743b9b",
          "commitAuthor": "Gilles Sadowski",
          "commitDateOld": "11/24/10, 3:35 PM",
          "commitNameOld": "a1b027b903b4ce36e97d85a1eeeafbc5cd5530b7",
          "commitAuthorOld": "Phil Steitz",
          "daysBetweenCommits": 0.7,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public double solve(FUNC f, double min, double max) {\n    return solve(f, min, max, min + 0.5 * (max - min));\n}",
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java",
          "functionStartLine": 197,
          "functionName": "solve",
          "functionAnnotation": "",
          "functionDoc": "@inheritDoc}\n",
          "diff": "@@ -1,3 +1,3 @@\n-public double solve(final UnivariateRealFunction f, double min, double max, double initial) throws MaxIterationsExceededException, MathUserException {\n-    return solve(f, min, max);\n+public double solve(FUNC f, double min, double max) {\n+    return solve(f, min, max, min + 0.5 * (max - min));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java",
            "newPath": "src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java",
            "oldMethodName": "solve",
            "newMethodName": "solve"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "MATH-439\nRefactored the \"solvers\" package. Implementations refer to number of\nevaluation of the objective function (instead of the number of iterations).\nNew interfaces and base classes.\n\"NewtonSolver\" fits in the design without resorting to a cast.\nCreated class \"MullerSolver2\" to contain the code of the method named \"solve2\"\nin class \"MullerSolver\".\nRemoved \"UnivariateRealSolverFactory\" and \"UnivariateRealSolverFactoryImpl\".\nDefault solver in \"UnivariateRealSolverUtils\" is explicitely instantiated.\n\"AbstractContinuousDistribution\": Type of exception thrown changed in\n\"UnivariateRealSolverUtils\".\nFactored out duplicate code (in \"GaussNewtonOptimizerTest\" and\n\"LevenbergMarquardtOptimizerTest\"): class \"Circle\" is now called\n\"CircleVectorial\". Also factored out the \"Circle\" class from\n\"NonLinearConjugateGradientOptimizerTest\": class is named \"CircleScalar\".\nCreated \"SecantSolverTest\", moving there all the tests for the class\n\"SecantSolver\" that were located in class \"BrentSolverTest\".\nCreated new interface and base class for polynomial functions solvers\n(\"LaguerreSolver\") so that the function type is now checked at compile time.\nRemoved deprecated exceptions (MATH-441).\nJavadoc clean-up.\nLowered tolerance values in some unit tests.\nTests upgraded to Junit 4 (MATH-423).\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1039083 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/25/10, 8:22 AM",
          "commitName": "74ff198bd249a56d1349b963bd265f8899743b9b",
          "commitAuthor": "Gilles Sadowski",
          "commitDateOld": "11/24/10, 3:35 PM",
          "commitNameOld": "a1b027b903b4ce36e97d85a1eeeafbc5cd5530b7",
          "commitAuthorOld": "Phil Steitz",
          "daysBetweenCommits": 0.7,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public double solve(FUNC f, double min, double max) {\n    return solve(f, min, max, min + 0.5 * (max - min));\n}",
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java",
          "functionStartLine": 197,
          "functionName": "solve",
          "functionAnnotation": "",
          "functionDoc": "@inheritDoc}\n",
          "diff": "@@ -1,3 +1,3 @@\n-public double solve(final UnivariateRealFunction f, double min, double max, double initial) throws MaxIterationsExceededException, MathUserException {\n-    return solve(f, min, max);\n+public double solve(FUNC f, double min, double max) {\n+    return solve(f, min, max, min + 0.5 * (max - min));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[MaxIterationsExceededException, MathUserException]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MATH-439\nRefactored the \"solvers\" package. Implementations refer to number of\nevaluation of the objective function (instead of the number of iterations).\nNew interfaces and base classes.\n\"NewtonSolver\" fits in the design without resorting to a cast.\nCreated class \"MullerSolver2\" to contain the code of the method named \"solve2\"\nin class \"MullerSolver\".\nRemoved \"UnivariateRealSolverFactory\" and \"UnivariateRealSolverFactoryImpl\".\nDefault solver in \"UnivariateRealSolverUtils\" is explicitely instantiated.\n\"AbstractContinuousDistribution\": Type of exception thrown changed in\n\"UnivariateRealSolverUtils\".\nFactored out duplicate code (in \"GaussNewtonOptimizerTest\" and\n\"LevenbergMarquardtOptimizerTest\"): class \"Circle\" is now called\n\"CircleVectorial\". Also factored out the \"Circle\" class from\n\"NonLinearConjugateGradientOptimizerTest\": class is named \"CircleScalar\".\nCreated \"SecantSolverTest\", moving there all the tests for the class\n\"SecantSolver\" that were located in class \"BrentSolverTest\".\nCreated new interface and base class for polynomial functions solvers\n(\"LaguerreSolver\") so that the function type is now checked at compile time.\nRemoved deprecated exceptions (MATH-441).\nJavadoc clean-up.\nLowered tolerance values in some unit tests.\nTests upgraded to Junit 4 (MATH-423).\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1039083 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/25/10, 8:22 AM",
          "commitName": "74ff198bd249a56d1349b963bd265f8899743b9b",
          "commitAuthor": "Gilles Sadowski",
          "commitDateOld": "11/24/10, 3:35 PM",
          "commitNameOld": "a1b027b903b4ce36e97d85a1eeeafbc5cd5530b7",
          "commitAuthorOld": "Phil Steitz",
          "daysBetweenCommits": 0.7,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public double solve(FUNC f, double min, double max) {\n    return solve(f, min, max, min + 0.5 * (max - min));\n}",
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java",
          "functionStartLine": 197,
          "functionName": "solve",
          "functionAnnotation": "",
          "functionDoc": "@inheritDoc}\n",
          "diff": "@@ -1,3 +1,3 @@\n-public double solve(final UnivariateRealFunction f, double min, double max, double initial) throws MaxIterationsExceededException, MathUserException {\n-    return solve(f, min, max);\n+public double solve(FUNC f, double min, double max) {\n+    return solve(f, min, max, min + 0.5 * (max - min));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "MATH-439\nRefactored the \"solvers\" package. Implementations refer to number of\nevaluation of the objective function (instead of the number of iterations).\nNew interfaces and base classes.\n\"NewtonSolver\" fits in the design without resorting to a cast.\nCreated class \"MullerSolver2\" to contain the code of the method named \"solve2\"\nin class \"MullerSolver\".\nRemoved \"UnivariateRealSolverFactory\" and \"UnivariateRealSolverFactoryImpl\".\nDefault solver in \"UnivariateRealSolverUtils\" is explicitely instantiated.\n\"AbstractContinuousDistribution\": Type of exception thrown changed in\n\"UnivariateRealSolverUtils\".\nFactored out duplicate code (in \"GaussNewtonOptimizerTest\" and\n\"LevenbergMarquardtOptimizerTest\"): class \"Circle\" is now called\n\"CircleVectorial\". Also factored out the \"Circle\" class from\n\"NonLinearConjugateGradientOptimizerTest\": class is named \"CircleScalar\".\nCreated \"SecantSolverTest\", moving there all the tests for the class\n\"SecantSolver\" that were located in class \"BrentSolverTest\".\nCreated new interface and base class for polynomial functions solvers\n(\"LaguerreSolver\") so that the function type is now checked at compile time.\nRemoved deprecated exceptions (MATH-441).\nJavadoc clean-up.\nLowered tolerance values in some unit tests.\nTests upgraded to Junit 4 (MATH-423).\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1039083 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/25/10, 8:22 AM",
          "commitName": "74ff198bd249a56d1349b963bd265f8899743b9b",
          "commitAuthor": "Gilles Sadowski",
          "commitDateOld": "11/24/10, 3:35 PM",
          "commitNameOld": "a1b027b903b4ce36e97d85a1eeeafbc5cd5530b7",
          "commitAuthorOld": "Phil Steitz",
          "daysBetweenCommits": 0.7,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public double solve(FUNC f, double min, double max) {\n    return solve(f, min, max, min + 0.5 * (max - min));\n}",
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java",
          "functionStartLine": 197,
          "functionName": "solve",
          "functionAnnotation": "",
          "functionDoc": "@inheritDoc}\n",
          "diff": "@@ -1,3 +1,3 @@\n-public double solve(final UnivariateRealFunction f, double min, double max, double initial) throws MaxIterationsExceededException, MathUserException {\n-    return solve(f, min, max);\n+public double solve(FUNC f, double min, double max) {\n+    return solve(f, min, max, min + 0.5 * (max - min));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[f-UnivariateRealFunction(modifiers-final), min-double, max-double, initial-double]",
            "newValue": "[f-FUNC, min-double, max-double]"
          }
        }
      ]
    },
    "8302dd02498495277ec0db9301edb2158bb0e314": {
      "type": "Yexceptionschange",
      "commitMessage": "removed FunctionEvaluationException, DerivativeException and MatrixVisitorException\nthese exception were  deprecated in 2.2 and a smooth transition path was set up to help users, now all user functions should use the new unchecked MathUserException\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1037328 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/20/10, 1:01 PM",
      "commitName": "8302dd02498495277ec0db9301edb2158bb0e314",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "11/13/10, 2:27 PM",
      "commitNameOld": "255364ac1f6434c1a429433931980145adc181ce",
      "commitAuthorOld": "Gilles Sadowski",
      "daysBetweenCommits": 6.94,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "public double solve(final UnivariateRealFunction f, double min, double max, double initial) throws MaxIterationsExceededException, MathUserException {\n    return solve(f, min, max);\n}",
      "path": "src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java",
      "functionStartLine": 43,
      "functionName": "solve",
      "functionAnnotation": "",
      "functionDoc": "@inheritDoc}\n",
      "diff": "@@ -1,3 +1,3 @@\n-public double solve(final UnivariateRealFunction f, double min, double max, double initial) throws MaxIterationsExceededException, FunctionEvaluationException {\n+public double solve(final UnivariateRealFunction f, double min, double max, double initial) throws MaxIterationsExceededException, MathUserException {\n     return solve(f, min, max);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[MaxIterationsExceededException, FunctionEvaluationException]",
        "newValue": "[MaxIterationsExceededException, MathUserException]"
      }
    },
    "f41fcd85ca62a2109a6e550be0353d292d351213": {
      "type": "Ybodychange",
      "commitMessage": "Fix NullPointerException in BisectionSolver.solve(f, min, max, initial)\nJIRA: MATH-369\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@940565 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/3/10, 11:42 AM",
      "commitName": "f41fcd85ca62a2109a6e550be0353d292d351213",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "9/5/09, 10:36 AM",
      "commitNameOld": "26dac5a0e7fc9c6be9571b3e71a15d8502480d96",
      "commitAuthorOld": "Phil Steitz",
      "daysBetweenCommits": 240.05,
      "commitsBetweenForRepo": 244,
      "commitsBetweenForFile": 1,
      "actualSource": "public double solve(final UnivariateRealFunction f, double min, double max, double initial) throws MaxIterationsExceededException, FunctionEvaluationException {\n    return solve(f, min, max);\n}",
      "path": "src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java",
      "functionStartLine": 70,
      "functionName": "solve",
      "functionAnnotation": "",
      "functionDoc": "@inheritDoc}\n",
      "diff": "@@ -1,3 +1,3 @@\n public double solve(final UnivariateRealFunction f, double min, double max, double initial) throws MaxIterationsExceededException, FunctionEvaluationException {\n-    return solve(min, max);\n+    return solve(f, min, max);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d6a438e931412713e99624cf9ed74470f1040184": {
      "type": "Yfilerename",
      "commitMessage": "moved main java directory for compliance with maven standard directory layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@799870 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/1/09, 7:30 AM",
      "commitName": "d6a438e931412713e99624cf9ed74470f1040184",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "8/1/09, 7:23 AM",
      "commitNameOld": "2ad5ef61630be627f46ae1c266cf796f044bd4a8",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public double solve(final UnivariateRealFunction f, double min, double max, double initial) throws MaxIterationsExceededException, FunctionEvaluationException {\n    return solve(min, max);\n}",
      "path": "src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java",
      "functionStartLine": 70,
      "functionName": "solve",
      "functionAnnotation": "",
      "functionDoc": "@inheritDoc}\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java",
        "newPath": "src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java"
      }
    },
    "1d1436557bcb21887d9b352dd0f5f3d3acb71e11": {
      "type": "Yfilerename",
      "commitMessage": "split the analysis package into several sub-packages\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@735449 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/18/09, 5:07 AM",
      "commitName": "1d1436557bcb21887d9b352dd0f5f3d3acb71e11",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "1/17/09, 9:08 AM",
      "commitNameOld": "3a8a9685ec252116dce375ae9ca61f4cd41fa70f",
      "commitAuthorOld": "Phil Steitz",
      "daysBetweenCommits": 0.83,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public double solve(final UnivariateRealFunction f, double min, double max, double initial) throws MaxIterationsExceededException, FunctionEvaluationException {\n    return solve(min, max);\n}",
      "path": "src/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java",
      "functionStartLine": 73,
      "functionName": "solve",
      "functionAnnotation": "",
      "functionDoc": "@inheritDoc}\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/math/analysis/BisectionSolver.java",
        "newPath": "src/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java"
      }
    },
    "583dffc0ee383e9b5e1e08c574de10db8270fdb7": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "The root solvers now take the function to solve as a parameter to\nthe solve methods, thus allowing to reuse the same solver for different\nfunctions.\n\nJIRA:MATH-218\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@724191 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/7/08, 12:24 PM",
      "commitName": "583dffc0ee383e9b5e1e08c574de10db8270fdb7",
      "commitAuthor": "Luc Maisonobe",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "The root solvers now take the function to solve as a parameter to\nthe solve methods, thus allowing to reuse the same solver for different\nfunctions.\n\nJIRA:MATH-218\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@724191 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/7/08, 12:24 PM",
          "commitName": "583dffc0ee383e9b5e1e08c574de10db8270fdb7",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "1/27/08, 10:10 PM",
          "commitNameOld": "932ebf87acd81162cc7b1751c18b0e0ca760c8bf",
          "commitAuthorOld": "Phil Steitz",
          "daysBetweenCommits": 314.59,
          "commitsBetweenForRepo": 296,
          "commitsBetweenForFile": 1,
          "actualSource": "public double solve(final UnivariateRealFunction f, double min, double max, double initial) throws MaxIterationsExceededException, FunctionEvaluationException {\n    return solve(min, max);\n}",
          "path": "src/java/org/apache/commons/math/analysis/BisectionSolver.java",
          "functionStartLine": 72,
          "functionName": "solve",
          "functionAnnotation": "",
          "functionDoc": "@inheritDoc}\n",
          "diff": "@@ -1,25 +1,3 @@\n-public double solve(double min, double max) throws MaxIterationsExceededException, FunctionEvaluationException {\n-    clearResult();\n-    verifyInterval(min, max);\n-    double m;\n-    double fm;\n-    double fmin;\n-    int i \u003d 0;\n-    while (i \u003c maximalIterationCount) {\n-        m \u003d UnivariateRealSolverUtils.midpoint(min, max);\n-        fmin \u003d f.value(min);\n-        fm \u003d f.value(m);\n-        if (fm * fmin \u003e 0.0) {\n-            min \u003d m;\n-        } else {\n-            max \u003d m;\n-        }\n-        if (Math.abs(max - min) \u003c\u003d absoluteAccuracy) {\n-            m \u003d UnivariateRealSolverUtils.midpoint(min, max);\n-            setResult(m, i);\n-            return m;\n-        }\n-        ++i;\n-    }\n-    throw new MaxIterationsExceededException(maximalIterationCount);\n+public double solve(final UnivariateRealFunction f, double min, double max, double initial) throws MaxIterationsExceededException, FunctionEvaluationException {\n+    return solve(min, max);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[min-double, max-double]",
            "newValue": "[f-UnivariateRealFunction(modifiers-final), min-double, max-double, initial-double]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "The root solvers now take the function to solve as a parameter to\nthe solve methods, thus allowing to reuse the same solver for different\nfunctions.\n\nJIRA:MATH-218\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@724191 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/7/08, 12:24 PM",
          "commitName": "583dffc0ee383e9b5e1e08c574de10db8270fdb7",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "1/27/08, 10:10 PM",
          "commitNameOld": "932ebf87acd81162cc7b1751c18b0e0ca760c8bf",
          "commitAuthorOld": "Phil Steitz",
          "daysBetweenCommits": 314.59,
          "commitsBetweenForRepo": 296,
          "commitsBetweenForFile": 1,
          "actualSource": "public double solve(final UnivariateRealFunction f, double min, double max, double initial) throws MaxIterationsExceededException, FunctionEvaluationException {\n    return solve(min, max);\n}",
          "path": "src/java/org/apache/commons/math/analysis/BisectionSolver.java",
          "functionStartLine": 72,
          "functionName": "solve",
          "functionAnnotation": "",
          "functionDoc": "@inheritDoc}\n",
          "diff": "@@ -1,25 +1,3 @@\n-public double solve(double min, double max) throws MaxIterationsExceededException, FunctionEvaluationException {\n-    clearResult();\n-    verifyInterval(min, max);\n-    double m;\n-    double fm;\n-    double fmin;\n-    int i \u003d 0;\n-    while (i \u003c maximalIterationCount) {\n-        m \u003d UnivariateRealSolverUtils.midpoint(min, max);\n-        fmin \u003d f.value(min);\n-        fm \u003d f.value(m);\n-        if (fm * fmin \u003e 0.0) {\n-            min \u003d m;\n-        } else {\n-            max \u003d m;\n-        }\n-        if (Math.abs(max - min) \u003c\u003d absoluteAccuracy) {\n-            m \u003d UnivariateRealSolverUtils.midpoint(min, max);\n-            setResult(m, i);\n-            return m;\n-        }\n-        ++i;\n-    }\n-    throw new MaxIterationsExceededException(maximalIterationCount);\n+public double solve(final UnivariateRealFunction f, double min, double max, double initial) throws MaxIterationsExceededException, FunctionEvaluationException {\n+    return solve(min, max);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "The root solvers now take the function to solve as a parameter to\nthe solve methods, thus allowing to reuse the same solver for different\nfunctions.\n\nJIRA:MATH-218\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@724191 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/7/08, 12:24 PM",
          "commitName": "583dffc0ee383e9b5e1e08c574de10db8270fdb7",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "1/27/08, 10:10 PM",
          "commitNameOld": "932ebf87acd81162cc7b1751c18b0e0ca760c8bf",
          "commitAuthorOld": "Phil Steitz",
          "daysBetweenCommits": 314.59,
          "commitsBetweenForRepo": 296,
          "commitsBetweenForFile": 1,
          "actualSource": "public double solve(final UnivariateRealFunction f, double min, double max, double initial) throws MaxIterationsExceededException, FunctionEvaluationException {\n    return solve(min, max);\n}",
          "path": "src/java/org/apache/commons/math/analysis/BisectionSolver.java",
          "functionStartLine": 72,
          "functionName": "solve",
          "functionAnnotation": "",
          "functionDoc": "@inheritDoc}\n",
          "diff": "@@ -1,25 +1,3 @@\n-public double solve(double min, double max) throws MaxIterationsExceededException, FunctionEvaluationException {\n-    clearResult();\n-    verifyInterval(min, max);\n-    double m;\n-    double fm;\n-    double fmin;\n-    int i \u003d 0;\n-    while (i \u003c maximalIterationCount) {\n-        m \u003d UnivariateRealSolverUtils.midpoint(min, max);\n-        fmin \u003d f.value(min);\n-        fm \u003d f.value(m);\n-        if (fm * fmin \u003e 0.0) {\n-            min \u003d m;\n-        } else {\n-            max \u003d m;\n-        }\n-        if (Math.abs(max - min) \u003c\u003d absoluteAccuracy) {\n-            m \u003d UnivariateRealSolverUtils.midpoint(min, max);\n-            setResult(m, i);\n-            return m;\n-        }\n-        ++i;\n-    }\n-    throw new MaxIterationsExceededException(maximalIterationCount);\n+public double solve(final UnivariateRealFunction f, double min, double max, double initial) throws MaxIterationsExceededException, FunctionEvaluationException {\n+    return solve(min, max);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Find a zero root in the given interval.\n\n@param min the lower bound for the interval\n@param max the upper bound for the interval\n@return the value where the function is zero\n@throws MaxIterationsExceededException if the maximum iteration count is exceeded.\n@throws FunctionEvaluationException if an error occurs evaluating the\nfunction\n@throws IllegalArgumentException if min is not less than max\n",
            "newValue": "@inheritDoc}\n"
          }
        }
      ]
    },
    "d2d4c5fd63f279be0797468277593ef72506c696": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange,Ydocchange)",
      "commitMessage": "Added and used a specialized convergence exception for exceeded iteration counts\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@506585 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/12/07, 11:17 AM",
      "commitName": "d2d4c5fd63f279be0797468277593ef72506c696",
      "commitAuthor": "Luc Maisonobe",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "Added and used a specialized convergence exception for exceeded iteration counts\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@506585 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2/12/07, 11:17 AM",
          "commitName": "d2d4c5fd63f279be0797468277593ef72506c696",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "11/28/06, 11:14 PM",
          "commitNameOld": "05f7f6059bd0cbb69b5dd49c061f1f3520e0ee1e",
          "commitAuthorOld": "Henri Yandell",
          "daysBetweenCommits": 75.5,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "actualSource": "public double solve(double min, double max) throws MaxIterationsExceededException, FunctionEvaluationException {\n    clearResult();\n    verifyInterval(min, max);\n    double m;\n    double fm;\n    double fmin;\n    int i \u003d 0;\n    while (i \u003c maximalIterationCount) {\n        m \u003d UnivariateRealSolverUtils.midpoint(min, max);\n        fmin \u003d f.value(min);\n        fm \u003d f.value(m);\n        if (fm * fmin \u003e 0.0) {\n            min \u003d m;\n        } else {\n            max \u003d m;\n        }\n        if (Math.abs(max - min) \u003c\u003d absoluteAccuracy) {\n            m \u003d UnivariateRealSolverUtils.midpoint(min, max);\n            setResult(m, i);\n            return m;\n        }\n        ++i;\n    }\n    throw new MaxIterationsExceededException(maximalIterationCount);\n}",
          "path": "src/java/org/apache/commons/math/analysis/BisectionSolver.java",
          "functionStartLine": 73,
          "functionName": "solve",
          "functionAnnotation": "",
          "functionDoc": "Find a zero root in the given interval.\n\n@param min the lower bound for the interval\n@param max the upper bound for the interval\n@return the value where the function is zero\n@throws MaxIterationsExceededException if the maximum iteration count is exceeded.\n@throws FunctionEvaluationException if an error occurs evaluating the\nfunction\n@throws IllegalArgumentException if min is not less than max\n",
          "diff": "@@ -1,25 +1,25 @@\n-public double solve(double min, double max) throws ConvergenceException, FunctionEvaluationException {\n+public double solve(double min, double max) throws MaxIterationsExceededException, FunctionEvaluationException {\n     clearResult();\n     verifyInterval(min, max);\n     double m;\n     double fm;\n     double fmin;\n     int i \u003d 0;\n     while (i \u003c maximalIterationCount) {\n         m \u003d UnivariateRealSolverUtils.midpoint(min, max);\n         fmin \u003d f.value(min);\n         fm \u003d f.value(m);\n         if (fm * fmin \u003e 0.0) {\n             min \u003d m;\n         } else {\n             max \u003d m;\n         }\n         if (Math.abs(max - min) \u003c\u003d absoluteAccuracy) {\n             m \u003d UnivariateRealSolverUtils.midpoint(min, max);\n             setResult(m, i);\n             return m;\n         }\n         ++i;\n     }\n-    throw new ConvergenceException(\"Maximum number of iterations exceeded: \" + maximalIterationCount);\n+    throw new MaxIterationsExceededException(maximalIterationCount);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[ConvergenceException, FunctionEvaluationException]",
            "newValue": "[MaxIterationsExceededException, FunctionEvaluationException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Added and used a specialized convergence exception for exceeded iteration counts\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@506585 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2/12/07, 11:17 AM",
          "commitName": "d2d4c5fd63f279be0797468277593ef72506c696",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "11/28/06, 11:14 PM",
          "commitNameOld": "05f7f6059bd0cbb69b5dd49c061f1f3520e0ee1e",
          "commitAuthorOld": "Henri Yandell",
          "daysBetweenCommits": 75.5,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "actualSource": "public double solve(double min, double max) throws MaxIterationsExceededException, FunctionEvaluationException {\n    clearResult();\n    verifyInterval(min, max);\n    double m;\n    double fm;\n    double fmin;\n    int i \u003d 0;\n    while (i \u003c maximalIterationCount) {\n        m \u003d UnivariateRealSolverUtils.midpoint(min, max);\n        fmin \u003d f.value(min);\n        fm \u003d f.value(m);\n        if (fm * fmin \u003e 0.0) {\n            min \u003d m;\n        } else {\n            max \u003d m;\n        }\n        if (Math.abs(max - min) \u003c\u003d absoluteAccuracy) {\n            m \u003d UnivariateRealSolverUtils.midpoint(min, max);\n            setResult(m, i);\n            return m;\n        }\n        ++i;\n    }\n    throw new MaxIterationsExceededException(maximalIterationCount);\n}",
          "path": "src/java/org/apache/commons/math/analysis/BisectionSolver.java",
          "functionStartLine": 73,
          "functionName": "solve",
          "functionAnnotation": "",
          "functionDoc": "Find a zero root in the given interval.\n\n@param min the lower bound for the interval\n@param max the upper bound for the interval\n@return the value where the function is zero\n@throws MaxIterationsExceededException if the maximum iteration count is exceeded.\n@throws FunctionEvaluationException if an error occurs evaluating the\nfunction\n@throws IllegalArgumentException if min is not less than max\n",
          "diff": "@@ -1,25 +1,25 @@\n-public double solve(double min, double max) throws ConvergenceException, FunctionEvaluationException {\n+public double solve(double min, double max) throws MaxIterationsExceededException, FunctionEvaluationException {\n     clearResult();\n     verifyInterval(min, max);\n     double m;\n     double fm;\n     double fmin;\n     int i \u003d 0;\n     while (i \u003c maximalIterationCount) {\n         m \u003d UnivariateRealSolverUtils.midpoint(min, max);\n         fmin \u003d f.value(min);\n         fm \u003d f.value(m);\n         if (fm * fmin \u003e 0.0) {\n             min \u003d m;\n         } else {\n             max \u003d m;\n         }\n         if (Math.abs(max - min) \u003c\u003d absoluteAccuracy) {\n             m \u003d UnivariateRealSolverUtils.midpoint(min, max);\n             setResult(m, i);\n             return m;\n         }\n         ++i;\n     }\n-    throw new ConvergenceException(\"Maximum number of iterations exceeded: \" + maximalIterationCount);\n+    throw new MaxIterationsExceededException(maximalIterationCount);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Added and used a specialized convergence exception for exceeded iteration counts\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@506585 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2/12/07, 11:17 AM",
          "commitName": "d2d4c5fd63f279be0797468277593ef72506c696",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "11/28/06, 11:14 PM",
          "commitNameOld": "05f7f6059bd0cbb69b5dd49c061f1f3520e0ee1e",
          "commitAuthorOld": "Henri Yandell",
          "daysBetweenCommits": 75.5,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "actualSource": "public double solve(double min, double max) throws MaxIterationsExceededException, FunctionEvaluationException {\n    clearResult();\n    verifyInterval(min, max);\n    double m;\n    double fm;\n    double fmin;\n    int i \u003d 0;\n    while (i \u003c maximalIterationCount) {\n        m \u003d UnivariateRealSolverUtils.midpoint(min, max);\n        fmin \u003d f.value(min);\n        fm \u003d f.value(m);\n        if (fm * fmin \u003e 0.0) {\n            min \u003d m;\n        } else {\n            max \u003d m;\n        }\n        if (Math.abs(max - min) \u003c\u003d absoluteAccuracy) {\n            m \u003d UnivariateRealSolverUtils.midpoint(min, max);\n            setResult(m, i);\n            return m;\n        }\n        ++i;\n    }\n    throw new MaxIterationsExceededException(maximalIterationCount);\n}",
          "path": "src/java/org/apache/commons/math/analysis/BisectionSolver.java",
          "functionStartLine": 73,
          "functionName": "solve",
          "functionAnnotation": "",
          "functionDoc": "Find a zero root in the given interval.\n\n@param min the lower bound for the interval\n@param max the upper bound for the interval\n@return the value where the function is zero\n@throws MaxIterationsExceededException if the maximum iteration count is exceeded.\n@throws FunctionEvaluationException if an error occurs evaluating the\nfunction\n@throws IllegalArgumentException if min is not less than max\n",
          "diff": "@@ -1,25 +1,25 @@\n-public double solve(double min, double max) throws ConvergenceException, FunctionEvaluationException {\n+public double solve(double min, double max) throws MaxIterationsExceededException, FunctionEvaluationException {\n     clearResult();\n     verifyInterval(min, max);\n     double m;\n     double fm;\n     double fmin;\n     int i \u003d 0;\n     while (i \u003c maximalIterationCount) {\n         m \u003d UnivariateRealSolverUtils.midpoint(min, max);\n         fmin \u003d f.value(min);\n         fm \u003d f.value(m);\n         if (fm * fmin \u003e 0.0) {\n             min \u003d m;\n         } else {\n             max \u003d m;\n         }\n         if (Math.abs(max - min) \u003c\u003d absoluteAccuracy) {\n             m \u003d UnivariateRealSolverUtils.midpoint(min, max);\n             setResult(m, i);\n             return m;\n         }\n         ++i;\n     }\n-    throw new ConvergenceException(\"Maximum number of iterations exceeded: \" + maximalIterationCount);\n+    throw new MaxIterationsExceededException(maximalIterationCount);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Find a zero root in the given interval.\n\n@param min the lower bound for the interval\n@param max the upper bound for the interval\n@return the value where the function is zero\n@throws ConvergenceException if the maximum iteration count is exceeded.\n@throws FunctionEvaluationException if an error occurs evaluating the\nfunction\n@throws IllegalArgumentException if min is not less than max\n",
            "newValue": "Find a zero root in the given interval.\n\n@param min the lower bound for the interval\n@param max the upper bound for the interval\n@return the value where the function is zero\n@throws MaxIterationsExceededException if the maximum iteration count is exceeded.\n@throws FunctionEvaluationException if an error occurs evaluating the\nfunction\n@throws IllegalArgumentException if min is not less than max\n"
          }
        }
      ]
    },
    "545e47a273803b1d080b186c8cf139492f82c4fb": {
      "type": "Ybodychange",
      "commitMessage": "Merging bug fixes in r267517:r321515 from MATH_1_1 branch.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@322442 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/15/05, 8:29 PM",
      "commitName": "545e47a273803b1d080b186c8cf139492f82c4fb",
      "commitAuthor": "Phil Steitz",
      "commitDateOld": "2/26/05, 5:11 AM",
      "commitNameOld": "65b65f88b74de6b3462b04b2cf2a69f064a77557",
      "commitAuthorOld": "Dirk Verbeeck",
      "daysBetweenCommits": 231.6,
      "commitsBetweenForRepo": 88,
      "commitsBetweenForFile": 1,
      "actualSource": "public double solve(double min, double max) throws ConvergenceException, FunctionEvaluationException {\n    clearResult();\n    verifyInterval(min, max);\n    double m;\n    double fm;\n    double fmin;\n    int i \u003d 0;\n    while (i \u003c maximalIterationCount) {\n        m \u003d UnivariateRealSolverUtils.midpoint(min, max);\n        fmin \u003d f.value(min);\n        fm \u003d f.value(m);\n        if (fm * fmin \u003e 0.0) {\n            min \u003d m;\n        } else {\n            max \u003d m;\n        }\n        if (Math.abs(max - min) \u003c\u003d absoluteAccuracy) {\n            m \u003d UnivariateRealSolverUtils.midpoint(min, max);\n            setResult(m, i);\n            return m;\n        }\n        ++i;\n    }\n    throw new ConvergenceException(\"Maximum number of iterations exceeded: \" + maximalIterationCount);\n}",
      "path": "src/java/org/apache/commons/math/analysis/BisectionSolver.java",
      "functionStartLine": 72,
      "functionName": "solve",
      "functionAnnotation": "",
      "functionDoc": "Find a zero root in the given interval.\n\n@param min the lower bound for the interval\n@param max the upper bound for the interval\n@return the value where the function is zero\n@throws ConvergenceException if the maximum iteration count is exceeded.\n@throws FunctionEvaluationException if an error occurs evaluating the\nfunction\n@throws IllegalArgumentException if min is not less than max\n",
      "diff": "@@ -1,26 +1,25 @@\n public double solve(double min, double max) throws ConvergenceException, FunctionEvaluationException {\n     clearResult();\n     verifyInterval(min, max);\n     double m;\n     double fm;\n     double fmin;\n     int i \u003d 0;\n     while (i \u003c maximalIterationCount) {\n         m \u003d UnivariateRealSolverUtils.midpoint(min, max);\n         fmin \u003d f.value(min);\n         fm \u003d f.value(m);\n         if (fm * fmin \u003e 0.0) {\n             min \u003d m;\n-            fmin \u003d fm;\n         } else {\n             max \u003d m;\n         }\n         if (Math.abs(max - min) \u003c\u003d absoluteAccuracy) {\n             m \u003d UnivariateRealSolverUtils.midpoint(min, max);\n             setResult(m, i);\n             return m;\n         }\n         ++i;\n     }\n     throw new ConvergenceException(\"Maximum number of iterations exceeded: \" + maximalIterationCount);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6a978ea29f680a87dfc380c760adf2e17b2e7c9c": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange,Ydocchange)",
      "commitMessage": "-Changed UnivariateRealFunction.solve() to throw FunctionEvaluationException.\n-Changed UnivariateRealSolver.solve() to throw more specific exceptions:\n  ConvergenceException if max iterations is exceeded\n  IllegalArgumentException if endpoints do not (appear to) bracket a root\n  FunctionEvaluationException if an error occurs evaluating the function\n-Changed UnivariateRealSolver setters to throw IllegalArgumentException\n instead of MathException when input property values are out of range.\n-Changed AbstractContinuousDistribution.inverseCumulativeProbability to handle\n corner cases where solution equals domain lower or upper bound.\n-Improved javadoc.\n-Improved test coverage.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141391 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/17/04, 2:19 PM",
      "commitName": "6a978ea29f680a87dfc380c760adf2e17b2e7c9c",
      "commitAuthor": "Phil Steitz",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "-Changed UnivariateRealFunction.solve() to throw FunctionEvaluationException.\n-Changed UnivariateRealSolver.solve() to throw more specific exceptions:\n  ConvergenceException if max iterations is exceeded\n  IllegalArgumentException if endpoints do not (appear to) bracket a root\n  FunctionEvaluationException if an error occurs evaluating the function\n-Changed UnivariateRealSolver setters to throw IllegalArgumentException\n instead of MathException when input property values are out of range.\n-Changed AbstractContinuousDistribution.inverseCumulativeProbability to handle\n corner cases where solution equals domain lower or upper bound.\n-Improved javadoc.\n-Improved test coverage.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141391 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/17/04, 2:19 PM",
          "commitName": "6a978ea29f680a87dfc380c760adf2e17b2e7c9c",
          "commitAuthor": "Phil Steitz",
          "commitDateOld": "6/23/04, 9:26 AM",
          "commitNameOld": "7b22aec5529fb3bad1e8098938271398d13c92ba",
          "commitAuthorOld": "Brent Worden",
          "daysBetweenCommits": 24.2,
          "commitsBetweenForRepo": 60,
          "commitsBetweenForFile": 1,
          "actualSource": "public double solve(double min, double max) throws ConvergenceException, FunctionEvaluationException {\n    clearResult();\n    verifyInterval(min, max);\n    double m;\n    double fm;\n    double fmin;\n    int i \u003d 0;\n    while (i \u003c maximalIterationCount) {\n        m \u003d UnivariateRealSolverUtils.midpoint(min, max);\n        fmin \u003d f.value(min);\n        fm \u003d f.value(m);\n        if (fm * fmin \u003e 0.0) {\n            min \u003d m;\n            fmin \u003d fm;\n        } else {\n            max \u003d m;\n        }\n        if (Math.abs(max - min) \u003c\u003d absoluteAccuracy) {\n            m \u003d UnivariateRealSolverUtils.midpoint(min, max);\n            setResult(m, i);\n            return m;\n        }\n        ++i;\n    }\n    throw new ConvergenceException(\"Maximum number of iterations exceeded: \" + maximalIterationCount);\n}",
          "path": "src/java/org/apache/commons/math/analysis/BisectionSolver.java",
          "functionStartLine": 72,
          "functionName": "solve",
          "functionAnnotation": "",
          "functionDoc": "Find a zero root in the given interval.\n\n@param min the lower bound for the interval\n@param max the upper bound for the interval\n@return the value where the function is zero\n@throws ConvergenceException if the maximum iteration count is exceeded.\n@throws FunctionEvaluationException if an error occurs evaluating the\nfunction\n@throws IllegalArgumentException if min is not less than max\n",
          "diff": "@@ -1,25 +1,26 @@\n-public double solve(double min, double max) throws MathException {\n+public double solve(double min, double max) throws ConvergenceException, FunctionEvaluationException {\n     clearResult();\n+    verifyInterval(min, max);\n     double m;\n     double fm;\n     double fmin;\n     int i \u003d 0;\n     while (i \u003c maximalIterationCount) {\n         m \u003d UnivariateRealSolverUtils.midpoint(min, max);\n         fmin \u003d f.value(min);\n         fm \u003d f.value(m);\n         if (fm * fmin \u003e 0.0) {\n             min \u003d m;\n             fmin \u003d fm;\n         } else {\n             max \u003d m;\n         }\n         if (Math.abs(max - min) \u003c\u003d absoluteAccuracy) {\n             m \u003d UnivariateRealSolverUtils.midpoint(min, max);\n             setResult(m, i);\n             return m;\n         }\n         ++i;\n     }\n-    throw new MathException(\"Maximum number of iterations exceeded\");\n+    throw new ConvergenceException(\"Maximum number of iterations exceeded: \" + maximalIterationCount);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[MathException]",
            "newValue": "[ConvergenceException, FunctionEvaluationException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "-Changed UnivariateRealFunction.solve() to throw FunctionEvaluationException.\n-Changed UnivariateRealSolver.solve() to throw more specific exceptions:\n  ConvergenceException if max iterations is exceeded\n  IllegalArgumentException if endpoints do not (appear to) bracket a root\n  FunctionEvaluationException if an error occurs evaluating the function\n-Changed UnivariateRealSolver setters to throw IllegalArgumentException\n instead of MathException when input property values are out of range.\n-Changed AbstractContinuousDistribution.inverseCumulativeProbability to handle\n corner cases where solution equals domain lower or upper bound.\n-Improved javadoc.\n-Improved test coverage.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141391 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/17/04, 2:19 PM",
          "commitName": "6a978ea29f680a87dfc380c760adf2e17b2e7c9c",
          "commitAuthor": "Phil Steitz",
          "commitDateOld": "6/23/04, 9:26 AM",
          "commitNameOld": "7b22aec5529fb3bad1e8098938271398d13c92ba",
          "commitAuthorOld": "Brent Worden",
          "daysBetweenCommits": 24.2,
          "commitsBetweenForRepo": 60,
          "commitsBetweenForFile": 1,
          "actualSource": "public double solve(double min, double max) throws ConvergenceException, FunctionEvaluationException {\n    clearResult();\n    verifyInterval(min, max);\n    double m;\n    double fm;\n    double fmin;\n    int i \u003d 0;\n    while (i \u003c maximalIterationCount) {\n        m \u003d UnivariateRealSolverUtils.midpoint(min, max);\n        fmin \u003d f.value(min);\n        fm \u003d f.value(m);\n        if (fm * fmin \u003e 0.0) {\n            min \u003d m;\n            fmin \u003d fm;\n        } else {\n            max \u003d m;\n        }\n        if (Math.abs(max - min) \u003c\u003d absoluteAccuracy) {\n            m \u003d UnivariateRealSolverUtils.midpoint(min, max);\n            setResult(m, i);\n            return m;\n        }\n        ++i;\n    }\n    throw new ConvergenceException(\"Maximum number of iterations exceeded: \" + maximalIterationCount);\n}",
          "path": "src/java/org/apache/commons/math/analysis/BisectionSolver.java",
          "functionStartLine": 72,
          "functionName": "solve",
          "functionAnnotation": "",
          "functionDoc": "Find a zero root in the given interval.\n\n@param min the lower bound for the interval\n@param max the upper bound for the interval\n@return the value where the function is zero\n@throws ConvergenceException if the maximum iteration count is exceeded.\n@throws FunctionEvaluationException if an error occurs evaluating the\nfunction\n@throws IllegalArgumentException if min is not less than max\n",
          "diff": "@@ -1,25 +1,26 @@\n-public double solve(double min, double max) throws MathException {\n+public double solve(double min, double max) throws ConvergenceException, FunctionEvaluationException {\n     clearResult();\n+    verifyInterval(min, max);\n     double m;\n     double fm;\n     double fmin;\n     int i \u003d 0;\n     while (i \u003c maximalIterationCount) {\n         m \u003d UnivariateRealSolverUtils.midpoint(min, max);\n         fmin \u003d f.value(min);\n         fm \u003d f.value(m);\n         if (fm * fmin \u003e 0.0) {\n             min \u003d m;\n             fmin \u003d fm;\n         } else {\n             max \u003d m;\n         }\n         if (Math.abs(max - min) \u003c\u003d absoluteAccuracy) {\n             m \u003d UnivariateRealSolverUtils.midpoint(min, max);\n             setResult(m, i);\n             return m;\n         }\n         ++i;\n     }\n-    throw new MathException(\"Maximum number of iterations exceeded\");\n+    throw new ConvergenceException(\"Maximum number of iterations exceeded: \" + maximalIterationCount);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "-Changed UnivariateRealFunction.solve() to throw FunctionEvaluationException.\n-Changed UnivariateRealSolver.solve() to throw more specific exceptions:\n  ConvergenceException if max iterations is exceeded\n  IllegalArgumentException if endpoints do not (appear to) bracket a root\n  FunctionEvaluationException if an error occurs evaluating the function\n-Changed UnivariateRealSolver setters to throw IllegalArgumentException\n instead of MathException when input property values are out of range.\n-Changed AbstractContinuousDistribution.inverseCumulativeProbability to handle\n corner cases where solution equals domain lower or upper bound.\n-Improved javadoc.\n-Improved test coverage.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141391 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/17/04, 2:19 PM",
          "commitName": "6a978ea29f680a87dfc380c760adf2e17b2e7c9c",
          "commitAuthor": "Phil Steitz",
          "commitDateOld": "6/23/04, 9:26 AM",
          "commitNameOld": "7b22aec5529fb3bad1e8098938271398d13c92ba",
          "commitAuthorOld": "Brent Worden",
          "daysBetweenCommits": 24.2,
          "commitsBetweenForRepo": 60,
          "commitsBetweenForFile": 1,
          "actualSource": "public double solve(double min, double max) throws ConvergenceException, FunctionEvaluationException {\n    clearResult();\n    verifyInterval(min, max);\n    double m;\n    double fm;\n    double fmin;\n    int i \u003d 0;\n    while (i \u003c maximalIterationCount) {\n        m \u003d UnivariateRealSolverUtils.midpoint(min, max);\n        fmin \u003d f.value(min);\n        fm \u003d f.value(m);\n        if (fm * fmin \u003e 0.0) {\n            min \u003d m;\n            fmin \u003d fm;\n        } else {\n            max \u003d m;\n        }\n        if (Math.abs(max - min) \u003c\u003d absoluteAccuracy) {\n            m \u003d UnivariateRealSolverUtils.midpoint(min, max);\n            setResult(m, i);\n            return m;\n        }\n        ++i;\n    }\n    throw new ConvergenceException(\"Maximum number of iterations exceeded: \" + maximalIterationCount);\n}",
          "path": "src/java/org/apache/commons/math/analysis/BisectionSolver.java",
          "functionStartLine": 72,
          "functionName": "solve",
          "functionAnnotation": "",
          "functionDoc": "Find a zero root in the given interval.\n\n@param min the lower bound for the interval\n@param max the upper bound for the interval\n@return the value where the function is zero\n@throws ConvergenceException if the maximum iteration count is exceeded.\n@throws FunctionEvaluationException if an error occurs evaluating the\nfunction\n@throws IllegalArgumentException if min is not less than max\n",
          "diff": "@@ -1,25 +1,26 @@\n-public double solve(double min, double max) throws MathException {\n+public double solve(double min, double max) throws ConvergenceException, FunctionEvaluationException {\n     clearResult();\n+    verifyInterval(min, max);\n     double m;\n     double fm;\n     double fmin;\n     int i \u003d 0;\n     while (i \u003c maximalIterationCount) {\n         m \u003d UnivariateRealSolverUtils.midpoint(min, max);\n         fmin \u003d f.value(min);\n         fm \u003d f.value(m);\n         if (fm * fmin \u003e 0.0) {\n             min \u003d m;\n             fmin \u003d fm;\n         } else {\n             max \u003d m;\n         }\n         if (Math.abs(max - min) \u003c\u003d absoluteAccuracy) {\n             m \u003d UnivariateRealSolverUtils.midpoint(min, max);\n             setResult(m, i);\n             return m;\n         }\n         ++i;\n     }\n-    throw new MathException(\"Maximum number of iterations exceeded\");\n+    throw new ConvergenceException(\"Maximum number of iterations exceeded: \" + maximalIterationCount);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Find a zero root in the given interval.\n\n@param min the lower bound for the interval.\n@param max the upper bound for the interval.\n@return the value where the function is zero\n@throws MathException if the iteration count was exceeded or the\n solver detects convergence problems otherwise.\n",
            "newValue": "Find a zero root in the given interval.\n\n@param min the lower bound for the interval\n@param max the upper bound for the interval\n@return the value where the function is zero\n@throws ConvergenceException if the maximum iteration count is exceeded.\n@throws FunctionEvaluationException if an error occurs evaluating the\nfunction\n@throws IllegalArgumentException if min is not less than max\n"
          }
        }
      ]
    },
    "402160b94a9ffd5f400d8e5717badcaa2fd3c5af": {
      "type": "Ybodychange",
      "commitMessage": "Newton\u0027s method using the new differentiable interface.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141161 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/8/04, 2:19 PM",
      "commitName": "402160b94a9ffd5f400d8e5717badcaa2fd3c5af",
      "commitAuthor": "Brent Worden",
      "commitDateOld": "2/19/04, 10:22 PM",
      "commitNameOld": "2d69367fab142b626ce36d418272f99ad8fc3dc1",
      "commitAuthorOld": "Phil Steitz",
      "daysBetweenCommits": 48.62,
      "commitsBetweenForRepo": 58,
      "commitsBetweenForFile": 1,
      "actualSource": "public double solve(double min, double max) throws MathException {\n    clearResult();\n    double m;\n    double fm;\n    double fmin;\n    int i \u003d 0;\n    while (i \u003c maximalIterationCount) {\n        m \u003d UnivariateRealSolverUtils.midpoint(min, max);\n        fmin \u003d f.value(min);\n        fm \u003d f.value(m);\n        if (fm * fmin \u003e 0.0) {\n            min \u003d m;\n            fmin \u003d fm;\n        } else {\n            max \u003d m;\n        }\n        if (Math.abs(max - min) \u003c\u003d absoluteAccuracy) {\n            m \u003d UnivariateRealSolverUtils.midpoint(min, max);\n            setResult(m, i);\n            return m;\n        }\n        ++i;\n    }\n    throw new MathException(\"Maximum number of iterations exceeded\");\n}",
      "path": "src/java/org/apache/commons/math/analysis/BisectionSolver.java",
      "functionStartLine": 62,
      "functionName": "solve",
      "functionAnnotation": "",
      "functionDoc": "Find a zero root in the given interval.\n\n@param min the lower bound for the interval.\n@param max the upper bound for the interval.\n@return the value where the function is zero\n@throws MathException if the iteration count was exceeded or the\n solver detects convergence problems otherwise.\n",
      "diff": "@@ -1,25 +1,25 @@\n public double solve(double min, double max) throws MathException {\n     clearResult();\n     double m;\n     double fm;\n     double fmin;\n     int i \u003d 0;\n     while (i \u003c maximalIterationCount) {\n-        m \u003d midpoint(min, max);\n+        m \u003d UnivariateRealSolverUtils.midpoint(min, max);\n         fmin \u003d f.value(min);\n         fm \u003d f.value(m);\n         if (fm * fmin \u003e 0.0) {\n             min \u003d m;\n             fmin \u003d fm;\n         } else {\n             max \u003d m;\n         }\n         if (Math.abs(max - min) \u003c\u003d absoluteAccuracy) {\n-            m \u003d midpoint(min, max);\n+            m \u003d UnivariateRealSolverUtils.midpoint(min, max);\n             setResult(m, i);\n             return m;\n         }\n         ++i;\n     }\n     throw new MathException(\"Maximum number of iterations exceeded\");\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2d69367fab142b626ce36d418272f99ad8fc3dc1": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "javadoc, error message cleanup.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141103 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/19/04, 10:22 PM",
      "commitName": "2d69367fab142b626ce36d418272f99ad8fc3dc1",
      "commitAuthor": "Phil Steitz",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "javadoc, error message cleanup.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141103 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2/19/04, 10:22 PM",
          "commitName": "2d69367fab142b626ce36d418272f99ad8fc3dc1",
          "commitAuthor": "Phil Steitz",
          "commitDateOld": "2/17/04, 7:24 PM",
          "commitNameOld": "4dae458d8dd9dd4dfc09302a8d4f6a914420da54",
          "commitAuthorOld": "Phil Steitz",
          "daysBetweenCommits": 2.12,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "public double solve(double min, double max) throws MathException {\n    clearResult();\n    double m;\n    double fm;\n    double fmin;\n    int i \u003d 0;\n    while (i \u003c maximalIterationCount) {\n        m \u003d midpoint(min, max);\n        fmin \u003d f.value(min);\n        fm \u003d f.value(m);\n        if (fm * fmin \u003e 0.0) {\n            min \u003d m;\n            fmin \u003d fm;\n        } else {\n            max \u003d m;\n        }\n        if (Math.abs(max - min) \u003c\u003d absoluteAccuracy) {\n            m \u003d midpoint(min, max);\n            setResult(m, i);\n            return m;\n        }\n        ++i;\n    }\n    throw new MathException(\"Maximum number of iterations exceeded\");\n}",
          "path": "src/java/org/apache/commons/math/analysis/BisectionSolver.java",
          "functionStartLine": 62,
          "functionName": "solve",
          "functionAnnotation": "",
          "functionDoc": "Find a zero root in the given interval.\n\n@param min the lower bound for the interval.\n@param max the upper bound for the interval.\n@return the value where the function is zero\n@throws MathException if the iteration count was exceeded or the\n solver detects convergence problems otherwise.\n",
          "diff": "@@ -1,25 +1,25 @@\n public double solve(double min, double max) throws MathException {\n     clearResult();\n     double m;\n     double fm;\n     double fmin;\n     int i \u003d 0;\n     while (i \u003c maximalIterationCount) {\n         m \u003d midpoint(min, max);\n         fmin \u003d f.value(min);\n         fm \u003d f.value(m);\n         if (fm * fmin \u003e 0.0) {\n             min \u003d m;\n             fmin \u003d fm;\n         } else {\n             max \u003d m;\n         }\n         if (Math.abs(max - min) \u003c\u003d absoluteAccuracy) {\n             m \u003d midpoint(min, max);\n             setResult(m, i);\n             return m;\n         }\n         ++i;\n     }\n-    throw new MathException(\"Maximal iteration number exceeded\");\n+    throw new MathException(\"Maximum number of iterations exceeded\");\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "javadoc, error message cleanup.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141103 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2/19/04, 10:22 PM",
          "commitName": "2d69367fab142b626ce36d418272f99ad8fc3dc1",
          "commitAuthor": "Phil Steitz",
          "commitDateOld": "2/17/04, 7:24 PM",
          "commitNameOld": "4dae458d8dd9dd4dfc09302a8d4f6a914420da54",
          "commitAuthorOld": "Phil Steitz",
          "daysBetweenCommits": 2.12,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "public double solve(double min, double max) throws MathException {\n    clearResult();\n    double m;\n    double fm;\n    double fmin;\n    int i \u003d 0;\n    while (i \u003c maximalIterationCount) {\n        m \u003d midpoint(min, max);\n        fmin \u003d f.value(min);\n        fm \u003d f.value(m);\n        if (fm * fmin \u003e 0.0) {\n            min \u003d m;\n            fmin \u003d fm;\n        } else {\n            max \u003d m;\n        }\n        if (Math.abs(max - min) \u003c\u003d absoluteAccuracy) {\n            m \u003d midpoint(min, max);\n            setResult(m, i);\n            return m;\n        }\n        ++i;\n    }\n    throw new MathException(\"Maximum number of iterations exceeded\");\n}",
          "path": "src/java/org/apache/commons/math/analysis/BisectionSolver.java",
          "functionStartLine": 62,
          "functionName": "solve",
          "functionAnnotation": "",
          "functionDoc": "Find a zero root in the given interval.\n\n@param min the lower bound for the interval.\n@param max the upper bound for the interval.\n@return the value where the function is zero\n@throws MathException if the iteration count was exceeded or the\n solver detects convergence problems otherwise.\n",
          "diff": "@@ -1,25 +1,25 @@\n public double solve(double min, double max) throws MathException {\n     clearResult();\n     double m;\n     double fm;\n     double fmin;\n     int i \u003d 0;\n     while (i \u003c maximalIterationCount) {\n         m \u003d midpoint(min, max);\n         fmin \u003d f.value(min);\n         fm \u003d f.value(m);\n         if (fm * fmin \u003e 0.0) {\n             min \u003d m;\n             fmin \u003d fm;\n         } else {\n             max \u003d m;\n         }\n         if (Math.abs(max - min) \u003c\u003d absoluteAccuracy) {\n             m \u003d midpoint(min, max);\n             setResult(m, i);\n             return m;\n         }\n         ++i;\n     }\n-    throw new MathException(\"Maximal iteration number exceeded\");\n+    throw new MathException(\"Maximum number of iterations exceeded\");\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Solve for a zero root in the given interval.\n\n@param min the lower bound for the interval.\n@param max the upper bound for the interval.\n@return the value where the function is zero\n@throws MathException if the iteration count was exceeded or the\n solver detects convergence problems otherwise.\n",
            "newValue": "Find a zero root in the given interval.\n\n@param min the lower bound for the interval.\n@param max the upper bound for the interval.\n@return the value where the function is zero\n@throws MathException if the iteration count was exceeded or the\n solver detects convergence problems otherwise.\n"
          }
        }
      ]
    },
    "0a904461932f2c0455611e77ec6a8d8aced2980b": {
      "type": "Yintroduced",
      "commitMessage": "Attempting to recover last revision.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141013 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/14/03, 2:25 PM",
      "commitName": "0a904461932f2c0455611e77ec6a8d8aced2980b",
      "commitAuthor": "Mark R. Diggory",
      "diff": "@@ -0,0 +1,25 @@\n+public double solve(double min, double max) throws MathException {\n+    clearResult();\n+    double m;\n+    double fm;\n+    double fmin;\n+    int i \u003d 0;\n+    while (i \u003c maximalIterationCount) {\n+        m \u003d midpoint(min, max);\n+        fmin \u003d f.value(min);\n+        fm \u003d f.value(m);\n+        if (fm * fmin \u003e 0.0) {\n+            min \u003d m;\n+            fmin \u003d fm;\n+        } else {\n+            max \u003d m;\n+        }\n+        if (Math.abs(max - min) \u003c\u003d absoluteAccuracy) {\n+            m \u003d midpoint(min, max);\n+            setResult(m, i);\n+            return m;\n+        }\n+        ++i;\n+    }\n+    throw new MathException(\"Maximal iteration number exceeded\");\n+}\n\\ No newline at end of file\n",
      "actualSource": "public double solve(double min, double max) throws MathException {\n    clearResult();\n    double m;\n    double fm;\n    double fmin;\n    int i \u003d 0;\n    while (i \u003c maximalIterationCount) {\n        m \u003d midpoint(min, max);\n        fmin \u003d f.value(min);\n        fm \u003d f.value(m);\n        if (fm * fmin \u003e 0.0) {\n            min \u003d m;\n            fmin \u003d fm;\n        } else {\n            max \u003d m;\n        }\n        if (Math.abs(max - min) \u003c\u003d absoluteAccuracy) {\n            m \u003d midpoint(min, max);\n            setResult(m, i);\n            return m;\n        }\n        ++i;\n    }\n    throw new MathException(\"Maximal iteration number exceeded\");\n}",
      "path": "src/java/org/apache/commons/math/analysis/BisectionSolver.java",
      "functionStartLine": 96,
      "functionName": "solve",
      "functionAnnotation": "",
      "functionDoc": "Solve for a zero root in the given interval.\n\n@param min the lower bound for the interval.\n@param max the upper bound for the interval.\n@return the value where the function is zero\n@throws MathException if the iteration count was exceeded or the\n solver detects convergence problems otherwise.\n"
    }
  }
}