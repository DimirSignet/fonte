{
  "origin": "codeshovel",
  "repositoryName": "Math-10b",
  "repositoryPath": "/tmp/Math-10b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DSCompiler.java",
  "functionName": "pow",
  "functionId": "pow___operand-double[](modifiers-final)__operandOffset-int(modifiers-final)__n-int(modifiers-final)__result-double[](modifiers-final)__resultOffset-int(modifiers-final)",
  "sourceFilePath": "src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java",
  "functionAnnotation": "",
  "functionDoc": "Compute integer power of a derivative structure.\n\n@param operand array holding the operand\n@param operandOffset offset of the operand in its array\n@param n power to apply\n@param result array where result must be stored (for\npower the result array \u003cem\u003ecannot\u003c/em\u003e be the input\narray)\n@param resultOffset offset of the result in its array\n",
  "functionStartLine": 869,
  "functionEndLine": 911,
  "numCommitsSeen": 17,
  "timeTaken": 2160,
  "changeHistory": [
    "96dfe1afa1c06fb243e312d3366daf99b88ca7b5"
  ],
  "changeHistoryShort": {
    "96dfe1afa1c06fb243e312d3366daf99b88ca7b5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "96dfe1afa1c06fb243e312d3366daf99b88ca7b5": {
      "type": "Yintroduced",
      "commitMessage": "Added a new package dealing with differentials.\n\nThe package is intended to deals with one or more free parameters and\nderivation order 1 or higher.\n\nThe core elements are based on Dan Kalman paper \"Recursive Multivariate\nAutomatic Differentiation\", Mathematics Magazine, vol. 75, no. 3, June\n2002. For efficiency, the recursive structure is compiled as simple\nloops once for each pair (number of free parameters, derivation order).\n\nThis is work in progress, there are still some features missing even in\nthe most basic blocks (typically the asin, acos, atan, atant2 and taylor\nmethods in DSCompiler). There are also still no high level\ndifferentiator implementation.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1370951 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/8/12, 1:33 PM",
      "commitName": "96dfe1afa1c06fb243e312d3366daf99b88ca7b5",
      "commitAuthor": "Luc Maisonobe",
      "diff": "@@ -0,0 +1,30 @@\n+public void pow(final double[] operand, final int operandOffset, final int n, final double[] result, final int resultOffset) {\n+    if (n \u003d\u003d 0) {\n+        result[resultOffset] \u003d 1.0;\n+        Arrays.fill(result, resultOffset + 1, resultOffset + getSize(), 0);\n+        return;\n+    }\n+    double[] function \u003d new double[1 + order];\n+    if (n \u003e 0) {\n+        final int maxOrder \u003d FastMath.min(order, n);\n+        double xk \u003d FastMath.pow(operand[operandOffset], n - maxOrder);\n+        for (int i \u003d maxOrder; i \u003e 0; --i) {\n+            function[i] \u003d xk;\n+            xk *\u003d operand[operandOffset];\n+        }\n+        function[0] \u003d xk;\n+    } else {\n+        final double inv \u003d 1.0 / operand[operandOffset];\n+        double xk \u003d FastMath.pow(inv, -n);\n+        for (int i \u003d 0; i \u003c\u003d order; ++i) {\n+            function[i] \u003d xk;\n+            xk *\u003d inv;\n+        }\n+    }\n+    double coefficient \u003d n;\n+    for (int i \u003d 1; i \u003c\u003d order; ++i) {\n+        function[i] *\u003d coefficient;\n+        coefficient *\u003d n - i;\n+    }\n+    compose(operand, operandOffset, function, result, resultOffset);\n+}\n\\ No newline at end of file\n",
      "actualSource": "public void pow(final double[] operand, final int operandOffset, final int n, final double[] result, final int resultOffset) {\n    if (n \u003d\u003d 0) {\n        result[resultOffset] \u003d 1.0;\n        Arrays.fill(result, resultOffset + 1, resultOffset + getSize(), 0);\n        return;\n    }\n    double[] function \u003d new double[1 + order];\n    if (n \u003e 0) {\n        final int maxOrder \u003d FastMath.min(order, n);\n        double xk \u003d FastMath.pow(operand[operandOffset], n - maxOrder);\n        for (int i \u003d maxOrder; i \u003e 0; --i) {\n            function[i] \u003d xk;\n            xk *\u003d operand[operandOffset];\n        }\n        function[0] \u003d xk;\n    } else {\n        final double inv \u003d 1.0 / operand[operandOffset];\n        double xk \u003d FastMath.pow(inv, -n);\n        for (int i \u003d 0; i \u003c\u003d order; ++i) {\n            function[i] \u003d xk;\n            xk *\u003d inv;\n        }\n    }\n    double coefficient \u003d n;\n    for (int i \u003d 1; i \u003c\u003d order; ++i) {\n        function[i] *\u003d coefficient;\n        coefficient *\u003d n - i;\n    }\n    compose(operand, operandOffset, function, result, resultOffset);\n}",
      "path": "src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java",
      "functionStartLine": 858,
      "functionName": "pow",
      "functionAnnotation": "",
      "functionDoc": "Compute integer power of a derivative structure.\n\n@param operand array holding the operand\n@param operandOffset offset of the operand in its array\n@param n power to apply\n@param result array where result must be stored (for\npower the result array \u003cem\u003ecannot\u003c/em\u003e be the input\narray)\n@param resultOffset offset of the result in its array\n"
    }
  }
}