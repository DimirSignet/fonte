{
  "origin": "codeshovel",
  "repositoryName": "Math-23b",
  "repositoryPath": "/tmp/Math-23b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MathArrays.java",
  "functionName": "checkOrder",
  "functionId": "checkOrder___val-double[]__dir-OrderDirection__strict-boolean__abort-boolean",
  "sourceFilePath": "src/main/java/org/apache/commons/math3/util/MathArrays.java",
  "functionAnnotation": "",
  "functionDoc": "Check that the given array is sorted.\n\n@param val Values.\n@param dir Ordering direction.\n@param strict Whether the order should be strict.\n@param abort Whether to throw an exception if the check fails.\n@return @code true} if the array is sorted.\n@throws NonMonotonicSequenceException if the array is not sorted\nand {@code abort} is {@code true}.\n",
  "functionStartLine": 231,
  "functionEndLine": 282,
  "numCommitsSeen": 148,
  "timeTaken": 19599,
  "changeHistory": [
    "4fdc478a4274a3408afc995c505e7e804cb0da69",
    "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd",
    "dd4efa43349e74832b092ba33a92275b68cab9d3",
    "d5d62a5da7bf34166cd02ce09fc5f7e620146ac0",
    "87c292b149279fed81c31cfd03549a738175adff",
    "45c0929b228f6e218300a9ae8af90dc9742307ef",
    "1186b56f09c2e899f16dcebc7619183f0e9ca41e",
    "2a4cac1922a656283ba6eecda46f125ec0a41c22",
    "59ed630e834e030da4ff2685d0ac74ca8250960a",
    "0102842f60b79faf82d4176c537c1a3c5d15c607",
    "51ec76cc5685566569af3f312efee2aaccadddfc",
    "70f29147ed9f8fe3b3d37c742ef126f046325d92",
    "8c131082913e0edc1ae248d36407f88991d7aa53"
  ],
  "changeHistoryShort": {
    "4fdc478a4274a3408afc995c505e7e804cb0da69": "Yexceptionschange",
    "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd": "Ymovefromfile",
    "dd4efa43349e74832b092ba33a92275b68cab9d3": "Ymultichange(Ymovefromfile,Yformatchange)",
    "d5d62a5da7bf34166cd02ce09fc5f7e620146ac0": "Ymultichange(Ybodychange,Ydocchange)",
    "87c292b149279fed81c31cfd03549a738175adff": "Ybodychange",
    "45c0929b228f6e218300a9ae8af90dc9742307ef": "Ybodychange",
    "1186b56f09c2e899f16dcebc7619183f0e9ca41e": "Ybodychange",
    "2a4cac1922a656283ba6eecda46f125ec0a41c22": "Ybodychange",
    "59ed630e834e030da4ff2685d0ac74ca8250960a": "Ybodychange",
    "0102842f60b79faf82d4176c537c1a3c5d15c607": "Ydocchange",
    "51ec76cc5685566569af3f312efee2aaccadddfc": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange,Ydocchange)",
    "70f29147ed9f8fe3b3d37c742ef126f046325d92": "Ymultichange(Yparameterchange,Ydocchange)",
    "8c131082913e0edc1ae248d36407f88991d7aa53": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4fdc478a4274a3408afc995c505e7e804cb0da69": {
      "type": "Yexceptionschange",
      "commitMessage": "Added throw declarations for package util.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1381283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/5/12, 11:29 AM",
      "commitName": "4fdc478a4274a3408afc995c505e7e804cb0da69",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "4/30/12, 4:26 AM",
      "commitNameOld": "6b67f82c40bee7bb3e69258923110bec88057717",
      "commitAuthorOld": "Sebastien Brisard",
      "daysBetweenCommits": 128.29,
      "commitsBetweenForRepo": 341,
      "commitsBetweenForFile": 1,
      "actualSource": "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException {\n    double previous \u003d val[0];\n    final int max \u003d val.length;\n    int index;\n    ITEM: for (index \u003d 1; index \u003c max; index++) {\n        switch(dir) {\n            case INCREASING:\n                if (strict) {\n                    if (val[index] \u003c\u003d previous) {\n                        break ITEM;\n                    }\n                } else {\n                    if (val[index] \u003c previous) {\n                        break ITEM;\n                    }\n                }\n                break;\n            case DECREASING:\n                if (strict) {\n                    if (val[index] \u003e\u003d previous) {\n                        break ITEM;\n                    }\n                } else {\n                    if (val[index] \u003e previous) {\n                        break ITEM;\n                    }\n                }\n                break;\n            default:\n                throw new MathInternalError();\n        }\n        previous \u003d val[index];\n    }\n    if (index \u003d\u003d max) {\n        return true;\n    }\n    if (abort) {\n        throw new NonMonotonicSequenceException(val[index], previous, index, dir, strict);\n    } else {\n        return false;\n    }\n}",
      "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java",
      "functionStartLine": 231,
      "functionName": "checkOrder",
      "functionAnnotation": "",
      "functionDoc": "Check that the given array is sorted.\n\n@param val Values.\n@param dir Ordering direction.\n@param strict Whether the order should be strict.\n@param abort Whether to throw an exception if the check fails.\n@return @code true} if the array is sorted.\n@throws NonMonotonicSequenceException if the array is not sorted\nand {@code abort} is {@code true}.\n",
      "diff": "@@ -1,42 +1,42 @@\n-public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) {\n+public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException {\n     double previous \u003d val[0];\n     final int max \u003d val.length;\n     int index;\n     ITEM: for (index \u003d 1; index \u003c max; index++) {\n         switch(dir) {\n             case INCREASING:\n                 if (strict) {\n                     if (val[index] \u003c\u003d previous) {\n                         break ITEM;\n                     }\n                 } else {\n                     if (val[index] \u003c previous) {\n                         break ITEM;\n                     }\n                 }\n                 break;\n             case DECREASING:\n                 if (strict) {\n                     if (val[index] \u003e\u003d previous) {\n                         break ITEM;\n                     }\n                 } else {\n                     if (val[index] \u003e previous) {\n                         break ITEM;\n                     }\n                 }\n                 break;\n             default:\n                 throw new MathInternalError();\n         }\n         previous \u003d val[index];\n     }\n     if (index \u003d\u003d max) {\n         return true;\n     }\n     if (abort) {\n         throw new NonMonotonicSequenceException(val[index], previous, index, dir, strict);\n     } else {\n         return false;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[]",
        "newValue": "[NonMonotonicSequenceException]"
      }
    },
    "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd": {
      "type": "Ymovefromfile",
      "commitMessage": "MATH-444\nBase package name change: \"o.a.c.math\" -\u003e \"o.a.c.math3\"\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1244107 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/14/12, 8:17 AM",
      "commitName": "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd",
      "commitAuthor": "Gilles Sadowski",
      "commitDateOld": "2/14/12, 6:34 AM",
      "commitNameOld": "53257329dd394be1333b38bae787bf0cf19dc900",
      "commitAuthorOld": "Gilles Sadowski",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) {\n    double previous \u003d val[0];\n    final int max \u003d val.length;\n    int index;\n    ITEM: for (index \u003d 1; index \u003c max; index++) {\n        switch(dir) {\n            case INCREASING:\n                if (strict) {\n                    if (val[index] \u003c\u003d previous) {\n                        break ITEM;\n                    }\n                } else {\n                    if (val[index] \u003c previous) {\n                        break ITEM;\n                    }\n                }\n                break;\n            case DECREASING:\n                if (strict) {\n                    if (val[index] \u003e\u003d previous) {\n                        break ITEM;\n                    }\n                } else {\n                    if (val[index] \u003e previous) {\n                        break ITEM;\n                    }\n                }\n                break;\n            default:\n                throw new MathInternalError();\n        }\n        previous \u003d val[index];\n    }\n    if (index \u003d\u003d max) {\n        return true;\n    }\n    if (abort) {\n        throw new NonMonotonicSequenceException(val[index], previous, index, dir, strict);\n    } else {\n        return false;\n    }\n}",
      "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java",
      "functionStartLine": 225,
      "functionName": "checkOrder",
      "functionAnnotation": "",
      "functionDoc": "Check that the given array is sorted.\n\n@param val Values.\n@param dir Ordering direction.\n@param strict Whether the order should be strict.\n@param abort Whether to throw an exception if the check fails.\n@return @code true} if the array is sorted.\n@throws NonMonotonicSequenceException if the array is not sorted\nand {@code abort} is {@code true}.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/main/java/org/apache/commons/math/util/MathArrays.java",
        "newPath": "src/main/java/org/apache/commons/math3/util/MathArrays.java",
        "oldMethodName": "checkOrder",
        "newMethodName": "checkOrder"
      }
    },
    "dd4efa43349e74832b092ba33a92275b68cab9d3": {
      "type": "Ymultichange(Ymovefromfile,Yformatchange)",
      "commitMessage": "MATH-689\nMoved arrays utilities from \"MathUtils\" to \"MathArrays\".\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1182134 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/11/11, 3:55 PM",
      "commitName": "dd4efa43349e74832b092ba33a92275b68cab9d3",
      "commitAuthor": "Gilles Sadowski",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "MATH-689\nMoved arrays utilities from \"MathUtils\" to \"MathArrays\".\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1182134 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/11/11, 3:55 PM",
          "commitName": "dd4efa43349e74832b092ba33a92275b68cab9d3",
          "commitAuthor": "Gilles Sadowski",
          "commitDateOld": "10/10/11, 3:35 PM",
          "commitNameOld": "b59e97464fc8d910c06b90c06598d7176ce1924a",
          "commitAuthorOld": "Gilles Sadowski",
          "daysBetweenCommits": 1.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) {\n    double previous \u003d val[0];\n    final int max \u003d val.length;\n    int index;\n    ITEM: for (index \u003d 1; index \u003c max; index++) {\n        switch(dir) {\n            case INCREASING:\n                if (strict) {\n                    if (val[index] \u003c\u003d previous) {\n                        break ITEM;\n                    }\n                } else {\n                    if (val[index] \u003c previous) {\n                        break ITEM;\n                    }\n                }\n                break;\n            case DECREASING:\n                if (strict) {\n                    if (val[index] \u003e\u003d previous) {\n                        break ITEM;\n                    }\n                } else {\n                    if (val[index] \u003e previous) {\n                        break ITEM;\n                    }\n                }\n                break;\n            default:\n                throw new MathInternalError();\n        }\n        previous \u003d val[index];\n    }\n    if (index \u003d\u003d max) {\n        return true;\n    }\n    if (abort) {\n        throw new NonMonotonicSequenceException(val[index], previous, index, dir, strict);\n    } else {\n        return false;\n    }\n}",
          "path": "src/main/java/org/apache/commons/math/util/MathArrays.java",
          "functionStartLine": 222,
          "functionName": "checkOrder",
          "functionAnnotation": "",
          "functionDoc": "Check that the given array is sorted.\n\n@param val Values.\n@param dir Ordering direction.\n@param strict Whether the order should be strict.\n@param abort Whether to throw an exception if the check fails.\n@return @code true} if the array is sorted.\n@throws NonMonotonicSequenceException if the array is not sorted\nand {@code abort} is {@code true}.\n",
          "diff": "",
          "extendedDetails": {
            "oldPath": "src/main/java/org/apache/commons/math/util/MathUtils.java",
            "newPath": "src/main/java/org/apache/commons/math/util/MathArrays.java",
            "oldMethodName": "checkOrder",
            "newMethodName": "checkOrder"
          }
        },
        {
          "type": "Yformatchange",
          "commitMessage": "MATH-689\nMoved arrays utilities from \"MathUtils\" to \"MathArrays\".\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1182134 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/11/11, 3:55 PM",
          "commitName": "dd4efa43349e74832b092ba33a92275b68cab9d3",
          "commitAuthor": "Gilles Sadowski",
          "commitDateOld": "10/10/11, 3:35 PM",
          "commitNameOld": "b59e97464fc8d910c06b90c06598d7176ce1924a",
          "commitAuthorOld": "Gilles Sadowski",
          "daysBetweenCommits": 1.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) {\n    double previous \u003d val[0];\n    final int max \u003d val.length;\n    int index;\n    ITEM: for (index \u003d 1; index \u003c max; index++) {\n        switch(dir) {\n            case INCREASING:\n                if (strict) {\n                    if (val[index] \u003c\u003d previous) {\n                        break ITEM;\n                    }\n                } else {\n                    if (val[index] \u003c previous) {\n                        break ITEM;\n                    }\n                }\n                break;\n            case DECREASING:\n                if (strict) {\n                    if (val[index] \u003e\u003d previous) {\n                        break ITEM;\n                    }\n                } else {\n                    if (val[index] \u003e previous) {\n                        break ITEM;\n                    }\n                }\n                break;\n            default:\n                throw new MathInternalError();\n        }\n        previous \u003d val[index];\n    }\n    if (index \u003d\u003d max) {\n        return true;\n    }\n    if (abort) {\n        throw new NonMonotonicSequenceException(val[index], previous, index, dir, strict);\n    } else {\n        return false;\n    }\n}",
          "path": "src/main/java/org/apache/commons/math/util/MathArrays.java",
          "functionStartLine": 222,
          "functionName": "checkOrder",
          "functionAnnotation": "",
          "functionDoc": "Check that the given array is sorted.\n\n@param val Values.\n@param dir Ordering direction.\n@param strict Whether the order should be strict.\n@param abort Whether to throw an exception if the check fails.\n@return @code true} if the array is sorted.\n@throws NonMonotonicSequenceException if the array is not sorted\nand {@code abort} is {@code true}.\n",
          "diff": "",
          "extendedDetails": {}
        }
      ]
    },
    "d5d62a5da7bf34166cd02ce09fc5f7e620146ac0": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Name change: \"NonMonotonousSequenceException\" to \"NonMonotonicSequenceException\".\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1174731 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/23/11, 6:08 AM",
      "commitName": "d5d62a5da7bf34166cd02ce09fc5f7e620146ac0",
      "commitAuthor": "Gilles Sadowski",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Name change: \"NonMonotonousSequenceException\" to \"NonMonotonicSequenceException\".\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1174731 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "9/23/11, 6:08 AM",
          "commitName": "d5d62a5da7bf34166cd02ce09fc5f7e620146ac0",
          "commitAuthor": "Gilles Sadowski",
          "commitDateOld": "9/22/11, 7:16 AM",
          "commitNameOld": "87c292b149279fed81c31cfd03549a738175adff",
          "commitAuthorOld": "Gilles Sadowski",
          "daysBetweenCommits": 0.95,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) {\n    double previous \u003d val[0];\n    final int max \u003d val.length;\n    int index;\n    ITEM: for (index \u003d 1; index \u003c max; index++) {\n        switch(dir) {\n            case INCREASING:\n                if (strict) {\n                    if (val[index] \u003c\u003d previous) {\n                        break ITEM;\n                    }\n                } else {\n                    if (val[index] \u003c previous) {\n                        break ITEM;\n                    }\n                }\n                break;\n            case DECREASING:\n                if (strict) {\n                    if (val[index] \u003e\u003d previous) {\n                        break ITEM;\n                    }\n                } else {\n                    if (val[index] \u003e previous) {\n                        break ITEM;\n                    }\n                }\n                break;\n            default:\n                throw new MathInternalError();\n        }\n        previous \u003d val[index];\n    }\n    if (index \u003d\u003d max) {\n        return true;\n    }\n    if (abort) {\n        throw new NonMonotonicSequenceException(val[index], previous, index, dir, strict);\n    } else {\n        return false;\n    }\n}",
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
          "functionStartLine": 2062,
          "functionName": "checkOrder",
          "functionAnnotation": "",
          "functionDoc": "Check that the given array is sorted.\n\n@param val Values.\n@param dir Ordering direction.\n@param strict Whether the order should be strict.\n@param abort Whether to throw an exception if the check fails.\n@return @code true} if the array is sorted.\n@throws NonMonotonicSequenceException if the array is not sorted\nand {@code abort} is {@code true}.\n",
          "diff": "@@ -1,42 +1,42 @@\n public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) {\n     double previous \u003d val[0];\n     final int max \u003d val.length;\n     int index;\n     ITEM: for (index \u003d 1; index \u003c max; index++) {\n         switch(dir) {\n             case INCREASING:\n                 if (strict) {\n                     if (val[index] \u003c\u003d previous) {\n                         break ITEM;\n                     }\n                 } else {\n                     if (val[index] \u003c previous) {\n                         break ITEM;\n                     }\n                 }\n                 break;\n             case DECREASING:\n                 if (strict) {\n                     if (val[index] \u003e\u003d previous) {\n                         break ITEM;\n                     }\n                 } else {\n                     if (val[index] \u003e previous) {\n                         break ITEM;\n                     }\n                 }\n                 break;\n             default:\n                 throw new MathInternalError();\n         }\n         previous \u003d val[index];\n     }\n     if (index \u003d\u003d max) {\n         return true;\n     }\n     if (abort) {\n-        throw new NonMonotonousSequenceException(val[index], previous, index, dir, strict);\n+        throw new NonMonotonicSequenceException(val[index], previous, index, dir, strict);\n     } else {\n         return false;\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Name change: \"NonMonotonousSequenceException\" to \"NonMonotonicSequenceException\".\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1174731 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "9/23/11, 6:08 AM",
          "commitName": "d5d62a5da7bf34166cd02ce09fc5f7e620146ac0",
          "commitAuthor": "Gilles Sadowski",
          "commitDateOld": "9/22/11, 7:16 AM",
          "commitNameOld": "87c292b149279fed81c31cfd03549a738175adff",
          "commitAuthorOld": "Gilles Sadowski",
          "daysBetweenCommits": 0.95,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) {\n    double previous \u003d val[0];\n    final int max \u003d val.length;\n    int index;\n    ITEM: for (index \u003d 1; index \u003c max; index++) {\n        switch(dir) {\n            case INCREASING:\n                if (strict) {\n                    if (val[index] \u003c\u003d previous) {\n                        break ITEM;\n                    }\n                } else {\n                    if (val[index] \u003c previous) {\n                        break ITEM;\n                    }\n                }\n                break;\n            case DECREASING:\n                if (strict) {\n                    if (val[index] \u003e\u003d previous) {\n                        break ITEM;\n                    }\n                } else {\n                    if (val[index] \u003e previous) {\n                        break ITEM;\n                    }\n                }\n                break;\n            default:\n                throw new MathInternalError();\n        }\n        previous \u003d val[index];\n    }\n    if (index \u003d\u003d max) {\n        return true;\n    }\n    if (abort) {\n        throw new NonMonotonicSequenceException(val[index], previous, index, dir, strict);\n    } else {\n        return false;\n    }\n}",
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
          "functionStartLine": 2062,
          "functionName": "checkOrder",
          "functionAnnotation": "",
          "functionDoc": "Check that the given array is sorted.\n\n@param val Values.\n@param dir Ordering direction.\n@param strict Whether the order should be strict.\n@param abort Whether to throw an exception if the check fails.\n@return @code true} if the array is sorted.\n@throws NonMonotonicSequenceException if the array is not sorted\nand {@code abort} is {@code true}.\n",
          "diff": "@@ -1,42 +1,42 @@\n public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) {\n     double previous \u003d val[0];\n     final int max \u003d val.length;\n     int index;\n     ITEM: for (index \u003d 1; index \u003c max; index++) {\n         switch(dir) {\n             case INCREASING:\n                 if (strict) {\n                     if (val[index] \u003c\u003d previous) {\n                         break ITEM;\n                     }\n                 } else {\n                     if (val[index] \u003c previous) {\n                         break ITEM;\n                     }\n                 }\n                 break;\n             case DECREASING:\n                 if (strict) {\n                     if (val[index] \u003e\u003d previous) {\n                         break ITEM;\n                     }\n                 } else {\n                     if (val[index] \u003e previous) {\n                         break ITEM;\n                     }\n                 }\n                 break;\n             default:\n                 throw new MathInternalError();\n         }\n         previous \u003d val[index];\n     }\n     if (index \u003d\u003d max) {\n         return true;\n     }\n     if (abort) {\n-        throw new NonMonotonousSequenceException(val[index], previous, index, dir, strict);\n+        throw new NonMonotonicSequenceException(val[index], previous, index, dir, strict);\n     } else {\n         return false;\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Check that the given array is sorted.\n\n@param val Values.\n@param dir Ordering direction.\n@param strict Whether the order should be strict.\n@param abort Whether to throw an exception if the check fails.\n@return @code true} if the array is sorted.\n@throws NonMonotonousSequenceException if the array is not sorted\nand {@code abort} is {@code true}.\n",
            "newValue": "Check that the given array is sorted.\n\n@param val Values.\n@param dir Ordering direction.\n@param strict Whether the order should be strict.\n@param abort Whether to throw an exception if the check fails.\n@return @code true} if the array is sorted.\n@throws NonMonotonicSequenceException if the array is not sorted\nand {@code abort} is {@code true}.\n"
          }
        }
      ]
    },
    "87c292b149279fed81c31cfd03549a738175adff": {
      "type": "Ybodychange",
      "commitMessage": "Use \"MathInternalError\" in an impossible \"default\" case of a \"switch\".\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1174154 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/22/11, 7:16 AM",
      "commitName": "87c292b149279fed81c31cfd03549a738175adff",
      "commitAuthor": "Gilles Sadowski",
      "commitDateOld": "9/22/11, 7:13 AM",
      "commitNameOld": "45c0929b228f6e218300a9ae8af90dc9742307ef",
      "commitAuthorOld": "Gilles Sadowski",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) {\n    double previous \u003d val[0];\n    final int max \u003d val.length;\n    int index;\n    ITEM: for (index \u003d 1; index \u003c max; index++) {\n        switch(dir) {\n            case INCREASING:\n                if (strict) {\n                    if (val[index] \u003c\u003d previous) {\n                        break ITEM;\n                    }\n                } else {\n                    if (val[index] \u003c previous) {\n                        break ITEM;\n                    }\n                }\n                break;\n            case DECREASING:\n                if (strict) {\n                    if (val[index] \u003e\u003d previous) {\n                        break ITEM;\n                    }\n                } else {\n                    if (val[index] \u003e previous) {\n                        break ITEM;\n                    }\n                }\n                break;\n            default:\n                throw new MathInternalError();\n        }\n        previous \u003d val[index];\n    }\n    if (index \u003d\u003d max) {\n        return true;\n    }\n    if (abort) {\n        throw new NonMonotonousSequenceException(val[index], previous, index, dir, strict);\n    } else {\n        return false;\n    }\n}",
      "path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
      "functionStartLine": 2062,
      "functionName": "checkOrder",
      "functionAnnotation": "",
      "functionDoc": "Check that the given array is sorted.\n\n@param val Values.\n@param dir Ordering direction.\n@param strict Whether the order should be strict.\n@param abort Whether to throw an exception if the check fails.\n@return @code true} if the array is sorted.\n@throws NonMonotonousSequenceException if the array is not sorted\nand {@code abort} is {@code true}.\n",
      "diff": "@@ -1,42 +1,42 @@\n public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) {\n     double previous \u003d val[0];\n     final int max \u003d val.length;\n     int index;\n     ITEM: for (index \u003d 1; index \u003c max; index++) {\n         switch(dir) {\n             case INCREASING:\n                 if (strict) {\n                     if (val[index] \u003c\u003d previous) {\n                         break ITEM;\n                     }\n                 } else {\n                     if (val[index] \u003c previous) {\n                         break ITEM;\n                     }\n                 }\n                 break;\n             case DECREASING:\n                 if (strict) {\n                     if (val[index] \u003e\u003d previous) {\n                         break ITEM;\n                     }\n                 } else {\n                     if (val[index] \u003e previous) {\n                         break ITEM;\n                     }\n                 }\n                 break;\n             default:\n-                throw new IllegalArgumentException();\n+                throw new MathInternalError();\n         }\n         previous \u003d val[index];\n     }\n     if (index \u003d\u003d max) {\n         return true;\n     }\n     if (abort) {\n         throw new NonMonotonousSequenceException(val[index], previous, index, dir, strict);\n     } else {\n         return false;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "45c0929b228f6e218300a9ae8af90dc9742307ef": {
      "type": "Ybodychange",
      "commitMessage": "Using labeled loop to avoid code duplication.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1174153 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/22/11, 7:13 AM",
      "commitName": "45c0929b228f6e218300a9ae8af90dc9742307ef",
      "commitAuthor": "Gilles Sadowski",
      "commitDateOld": "9/22/11, 5:35 AM",
      "commitNameOld": "82047896ae7f157858dd0978d57e15d84e22c0bf",
      "commitAuthorOld": "Gilles Sadowski",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) {\n    double previous \u003d val[0];\n    final int max \u003d val.length;\n    int index;\n    ITEM: for (index \u003d 1; index \u003c max; index++) {\n        switch(dir) {\n            case INCREASING:\n                if (strict) {\n                    if (val[index] \u003c\u003d previous) {\n                        break ITEM;\n                    }\n                } else {\n                    if (val[index] \u003c previous) {\n                        break ITEM;\n                    }\n                }\n                break;\n            case DECREASING:\n                if (strict) {\n                    if (val[index] \u003e\u003d previous) {\n                        break ITEM;\n                    }\n                } else {\n                    if (val[index] \u003e previous) {\n                        break ITEM;\n                    }\n                }\n                break;\n            default:\n                throw new IllegalArgumentException();\n        }\n        previous \u003d val[index];\n    }\n    if (index \u003d\u003d max) {\n        return true;\n    }\n    if (abort) {\n        throw new NonMonotonousSequenceException(val[index], previous, index, dir, strict);\n    } else {\n        return false;\n    }\n}",
      "path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
      "functionStartLine": 2061,
      "functionName": "checkOrder",
      "functionAnnotation": "",
      "functionDoc": "Check that the given array is sorted.\n\n@param val Values.\n@param dir Ordering direction.\n@param strict Whether the order should be strict.\n@param abort Whether to throw an exception if the check fails.\n@return @code true} if the array is sorted.\n@throws NonMonotonousSequenceException if the array is not sorted\nand {@code abort} is {@code true}.\n",
      "diff": "@@ -1,46 +1,42 @@\n public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) {\n     double previous \u003d val[0];\n     final int max \u003d val.length;\n-    for (int i \u003d 1; i \u003c max; i++) {\n+    int index;\n+    ITEM: for (index \u003d 1; index \u003c max; index++) {\n         switch(dir) {\n             case INCREASING:\n                 if (strict) {\n-                    if (val[i] \u003c\u003d previous) {\n-                        if (abort) {\n-                            throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);\n-                        }\n-                        return false;\n+                    if (val[index] \u003c\u003d previous) {\n+                        break ITEM;\n                     }\n                 } else {\n-                    if (val[i] \u003c previous) {\n-                        if (abort) {\n-                            throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);\n-                        }\n-                        return false;\n+                    if (val[index] \u003c previous) {\n+                        break ITEM;\n                     }\n                 }\n                 break;\n             case DECREASING:\n                 if (strict) {\n-                    if (val[i] \u003e\u003d previous) {\n-                        if (abort) {\n-                            throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);\n-                        }\n-                        return false;\n+                    if (val[index] \u003e\u003d previous) {\n+                        break ITEM;\n                     }\n                 } else {\n-                    if (val[i] \u003e previous) {\n-                        if (abort) {\n-                            throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);\n-                        }\n-                        return false;\n+                    if (val[index] \u003e previous) {\n+                        break ITEM;\n                     }\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException();\n         }\n-        previous \u003d val[i];\n+        previous \u003d val[index];\n     }\n-    return true;\n+    if (index \u003d\u003d max) {\n+        return true;\n+    }\n+    if (abort) {\n+        throw new NonMonotonousSequenceException(val[index], previous, index, dir, strict);\n+    } else {\n+        return false;\n+    }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1186b56f09c2e899f16dcebc7619183f0e9ca41e": {
      "type": "Ybodychange",
      "commitMessage": "Added \"final\".\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1174032 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/22/11, 2:55 AM",
      "commitName": "1186b56f09c2e899f16dcebc7619183f0e9ca41e",
      "commitAuthor": "Gilles Sadowski",
      "commitDateOld": "9/22/11, 2:18 AM",
      "commitNameOld": "2a4cac1922a656283ba6eecda46f125ec0a41c22",
      "commitAuthorOld": "Gilles Sadowski",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) {\n    double previous \u003d val[0];\n    final int max \u003d val.length;\n    for (int i \u003d 1; i \u003c max; i++) {\n        switch(dir) {\n            case INCREASING:\n                if (strict) {\n                    if (val[i] \u003c\u003d previous) {\n                        if (abort) {\n                            throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);\n                        }\n                        return false;\n                    }\n                } else {\n                    if (val[i] \u003c previous) {\n                        if (abort) {\n                            throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);\n                        }\n                        return false;\n                    }\n                }\n                break;\n            case DECREASING:\n                if (strict) {\n                    if (val[i] \u003e\u003d previous) {\n                        if (abort) {\n                            throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);\n                        }\n                        return false;\n                    }\n                } else {\n                    if (val[i] \u003e previous) {\n                        if (abort) {\n                            throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);\n                        }\n                        return false;\n                    }\n                }\n                break;\n            default:\n                throw new IllegalArgumentException();\n        }\n        previous \u003d val[i];\n    }\n    return true;\n}",
      "path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
      "functionStartLine": 2060,
      "functionName": "checkOrder",
      "functionAnnotation": "",
      "functionDoc": "Check that the given array is sorted.\n\n@param val Values.\n@param dir Ordering direction.\n@param strict Whether the order should be strict.\n@param abort Whether to throw an exception if the check fails.\n@return @code true} if the array is sorted.\n@throws NonMonotonousSequenceException if the array is not sorted\nand {@code abort} is {@code true}.\n",
      "diff": "@@ -1,46 +1,46 @@\n public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) {\n     double previous \u003d val[0];\n-    int max \u003d val.length;\n+    final int max \u003d val.length;\n     for (int i \u003d 1; i \u003c max; i++) {\n         switch(dir) {\n             case INCREASING:\n                 if (strict) {\n                     if (val[i] \u003c\u003d previous) {\n                         if (abort) {\n                             throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);\n                         }\n                         return false;\n                     }\n                 } else {\n                     if (val[i] \u003c previous) {\n                         if (abort) {\n                             throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);\n                         }\n                         return false;\n                     }\n                 }\n                 break;\n             case DECREASING:\n                 if (strict) {\n                     if (val[i] \u003e\u003d previous) {\n                         if (abort) {\n                             throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);\n                         }\n                         return false;\n                     }\n                 } else {\n                     if (val[i] \u003e previous) {\n                         if (abort) {\n                             throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);\n                         }\n                         return false;\n                     }\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException();\n         }\n         previous \u003d val[i];\n     }\n     return true;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2a4cac1922a656283ba6eecda46f125ec0a41c22": {
      "type": "Ybodychange",
      "commitMessage": "Spurious space character.\nUnnecessary cast.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1174009 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/22/11, 2:18 AM",
      "commitName": "2a4cac1922a656283ba6eecda46f125ec0a41c22",
      "commitAuthor": "Gilles Sadowski",
      "commitDateOld": "9/22/11, 12:34 AM",
      "commitNameOld": "59ed630e834e030da4ff2685d0ac74ca8250960a",
      "commitAuthorOld": "Greg Sterijevski",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) {\n    double previous \u003d val[0];\n    int max \u003d val.length;\n    for (int i \u003d 1; i \u003c max; i++) {\n        switch(dir) {\n            case INCREASING:\n                if (strict) {\n                    if (val[i] \u003c\u003d previous) {\n                        if (abort) {\n                            throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);\n                        }\n                        return false;\n                    }\n                } else {\n                    if (val[i] \u003c previous) {\n                        if (abort) {\n                            throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);\n                        }\n                        return false;\n                    }\n                }\n                break;\n            case DECREASING:\n                if (strict) {\n                    if (val[i] \u003e\u003d previous) {\n                        if (abort) {\n                            throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);\n                        }\n                        return false;\n                    }\n                } else {\n                    if (val[i] \u003e previous) {\n                        if (abort) {\n                            throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);\n                        }\n                        return false;\n                    }\n                }\n                break;\n            default:\n                throw new IllegalArgumentException();\n        }\n        previous \u003d val[i];\n    }\n    return true;\n}",
      "path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
      "functionStartLine": 2058,
      "functionName": "checkOrder",
      "functionAnnotation": "",
      "functionDoc": "Check that the given array is sorted.\n\n@param val Values.\n@param dir Ordering direction.\n@param strict Whether the order should be strict.\n@param abort Whether to throw an exception if the check fails.\n@return @code true} if the array is sorted.\n@throws NonMonotonousSequenceException if the array is not sorted\nand {@code abort} is {@code true}.\n",
      "diff": "@@ -1,46 +1,46 @@\n public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) {\n     double previous \u003d val[0];\n     int max \u003d val.length;\n     for (int i \u003d 1; i \u003c max; i++) {\n         switch(dir) {\n             case INCREASING:\n                 if (strict) {\n                     if (val[i] \u003c\u003d previous) {\n                         if (abort) {\n-                            throw new NonMonotonousSequenceException((Number) val[i], (Number) previous, i, dir, strict);\n+                            throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);\n                         }\n                         return false;\n                     }\n                 } else {\n                     if (val[i] \u003c previous) {\n                         if (abort) {\n-                            throw new NonMonotonousSequenceException((Number) val[i], (Number) previous, i, dir, strict);\n+                            throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);\n                         }\n                         return false;\n                     }\n                 }\n                 break;\n             case DECREASING:\n                 if (strict) {\n                     if (val[i] \u003e\u003d previous) {\n                         if (abort) {\n-                            throw new NonMonotonousSequenceException((Number) val[i], (Number) previous, i, dir, strict);\n+                            throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);\n                         }\n                         return false;\n                     }\n                 } else {\n                     if (val[i] \u003e previous) {\n                         if (abort) {\n-                            throw new NonMonotonousSequenceException((Number) val[i], (Number) previous, i, dir, strict);\n+                            throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);\n                         }\n                         return false;\n                     }\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException();\n         }\n         previous \u003d val[i];\n     }\n     return true;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "59ed630e834e030da4ff2685d0ac74ca8250960a": {
      "type": "Ybodychange",
      "commitMessage": "JIRA: MATH-675 Added isMonotone methods to MathUtils and cleaned up checkOrder.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1173974 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/22/11, 12:34 AM",
      "commitName": "59ed630e834e030da4ff2685d0ac74ca8250960a",
      "commitAuthor": "Greg Sterijevski",
      "commitDateOld": "8/15/11, 1:31 PM",
      "commitNameOld": "d4f113c5573262a1995e05d65a3b0a0da4d434af",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 37.46,
      "commitsBetweenForRepo": 150,
      "commitsBetweenForFile": 1,
      "actualSource": "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) {\n    double previous \u003d val[0];\n    int max \u003d val.length;\n    for (int i \u003d 1; i \u003c max; i++) {\n        switch(dir) {\n            case INCREASING:\n                if (strict) {\n                    if (val[i] \u003c\u003d previous) {\n                        if (abort) {\n                            throw new NonMonotonousSequenceException((Number) val[i], (Number) previous, i, dir, strict);\n                        }\n                        return false;\n                    }\n                } else {\n                    if (val[i] \u003c previous) {\n                        if (abort) {\n                            throw new NonMonotonousSequenceException((Number) val[i], (Number) previous, i, dir, strict);\n                        }\n                        return false;\n                    }\n                }\n                break;\n            case DECREASING:\n                if (strict) {\n                    if (val[i] \u003e\u003d previous) {\n                        if (abort) {\n                            throw new NonMonotonousSequenceException((Number) val[i], (Number) previous, i, dir, strict);\n                        }\n                        return false;\n                    }\n                } else {\n                    if (val[i] \u003e previous) {\n                        if (abort) {\n                            throw new NonMonotonousSequenceException((Number) val[i], (Number) previous, i, dir, strict);\n                        }\n                        return false;\n                    }\n                }\n                break;\n            default:\n                throw new IllegalArgumentException();\n        }\n        previous \u003d val[i];\n    }\n    return true;\n}",
      "path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
      "functionStartLine": 2058,
      "functionName": "checkOrder",
      "functionAnnotation": "",
      "functionDoc": "Check that the given array is sorted.\n\n@param val Values.\n@param dir Ordering direction.\n@param strict Whether the order should be strict.\n@param abort Whether to throw an exception if the check fails.\n@return @code true} if the array is sorted.\n@throws NonMonotonousSequenceException if the array is not sorted\nand {@code abort} is {@code true}.\n",
      "diff": "@@ -1,38 +1,46 @@\n public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) {\n     double previous \u003d val[0];\n-    boolean ok \u003d true;\n     int max \u003d val.length;\n     for (int i \u003d 1; i \u003c max; i++) {\n         switch(dir) {\n             case INCREASING:\n                 if (strict) {\n                     if (val[i] \u003c\u003d previous) {\n-                        ok \u003d false;\n+                        if (abort) {\n+                            throw new NonMonotonousSequenceException((Number) val[i], (Number) previous, i, dir, strict);\n+                        }\n+                        return false;\n                     }\n                 } else {\n                     if (val[i] \u003c previous) {\n-                        ok \u003d false;\n+                        if (abort) {\n+                            throw new NonMonotonousSequenceException((Number) val[i], (Number) previous, i, dir, strict);\n+                        }\n+                        return false;\n                     }\n                 }\n                 break;\n             case DECREASING:\n                 if (strict) {\n                     if (val[i] \u003e\u003d previous) {\n-                        ok \u003d false;\n+                        if (abort) {\n+                            throw new NonMonotonousSequenceException((Number) val[i], (Number) previous, i, dir, strict);\n+                        }\n+                        return false;\n                     }\n                 } else {\n                     if (val[i] \u003e previous) {\n-                        ok \u003d false;\n+                        if (abort) {\n+                            throw new NonMonotonousSequenceException((Number) val[i], (Number) previous, i, dir, strict);\n+                        }\n+                        return false;\n                     }\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException();\n         }\n-        if (!ok \u0026\u0026 abort) {\n-            throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);\n-        }\n         previous \u003d val[i];\n     }\n-    return ok;\n+    return true;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0102842f60b79faf82d4176c537c1a3c5d15c607": {
      "type": "Ydocchange",
      "commitMessage": "Unnecessary \"return\".\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1055864 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/6/11, 5:21 AM",
      "commitName": "0102842f60b79faf82d4176c537c1a3c5d15c607",
      "commitAuthor": "Gilles Sadowski",
      "commitDateOld": "12/9/10, 4:50 PM",
      "commitNameOld": "622f5b537a2126a7f6ae1047c7e3753b5f23d56b",
      "commitAuthorOld": "Gilles Sadowski",
      "daysBetweenCommits": 27.52,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "actualSource": "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) {\n    double previous \u003d val[0];\n    boolean ok \u003d true;\n    int max \u003d val.length;\n    for (int i \u003d 1; i \u003c max; i++) {\n        switch(dir) {\n            case INCREASING:\n                if (strict) {\n                    if (val[i] \u003c\u003d previous) {\n                        ok \u003d false;\n                    }\n                } else {\n                    if (val[i] \u003c previous) {\n                        ok \u003d false;\n                    }\n                }\n                break;\n            case DECREASING:\n                if (strict) {\n                    if (val[i] \u003e\u003d previous) {\n                        ok \u003d false;\n                    }\n                } else {\n                    if (val[i] \u003e previous) {\n                        ok \u003d false;\n                    }\n                }\n                break;\n            default:\n                throw new IllegalArgumentException();\n        }\n        if (!ok \u0026\u0026 abort) {\n            throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);\n        }\n        previous \u003d val[i];\n    }\n    return ok;\n}",
      "path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
      "functionStartLine": 1775,
      "functionName": "checkOrder",
      "functionAnnotation": "",
      "functionDoc": "Check that the given array is sorted.\n\n@param val Values.\n@param dir Ordering direction.\n@param strict Whether the order should be strict.\n@param abort Whether to throw an exception if the check fails.\n@return @code true} if the array is sorted.\n@throws NonMonotonousSequenceException if the array is not sorted\nand {@code abort} is {@code true}.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Checks that the given array is sorted.\n\n@param val Values.\n@param dir Ordering direction.\n@param strict Whether the order should be strict.\n@param abort Whether to throw an exception if the check fails.\n@return @code true} if the array is sorted.\n@throws NonMonotonousSequenceException if the array is not sorted\nand {@code abort} is {@code true}.\n",
        "newValue": "Check that the given array is sorted.\n\n@param val Values.\n@param dir Ordering direction.\n@param strict Whether the order should be strict.\n@param abort Whether to throw an exception if the check fails.\n@return @code true} if the array is sorted.\n@throws NonMonotonousSequenceException if the array is not sorted\nand {@code abort} is {@code true}.\n"
      }
    },
    "51ec76cc5685566569af3f312efee2aaccadddfc": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange,Ydocchange)",
      "commitMessage": "MATH-195\nCreated an unchecked \"FunctionEvaluationException\" in package \"exception\".\nRemoved \"throws\" clause from interface \"UnivariateRealFunction\".\n\"PolynomialFunctionLagrangeForm\": Added early check on the interpolating\narray having distinct points; removed redundant test in methods \"evaluate\"\nand \"computeCoefficients\".\n\"DividedDifferenceInerpolator\": Removed redundant check.\n\"Mathutils\": Added method \"sortInPlace\". Removed (most) references to the\ndeprecated \"MathRuntimeException\" class.\n\"optimization.direct\": Removed deprecated classes.\nJavadoc clean up.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1030464 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/3/10, 6:46 AM",
      "commitName": "51ec76cc5685566569af3f312efee2aaccadddfc",
      "commitAuthor": "Gilles Sadowski",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MATH-195\nCreated an unchecked \"FunctionEvaluationException\" in package \"exception\".\nRemoved \"throws\" clause from interface \"UnivariateRealFunction\".\n\"PolynomialFunctionLagrangeForm\": Added early check on the interpolating\narray having distinct points; removed redundant test in methods \"evaluate\"\nand \"computeCoefficients\".\n\"DividedDifferenceInerpolator\": Removed redundant check.\n\"Mathutils\": Added method \"sortInPlace\". Removed (most) references to the\ndeprecated \"MathRuntimeException\" class.\n\"optimization.direct\": Removed deprecated classes.\nJavadoc clean up.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1030464 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/3/10, 6:46 AM",
          "commitName": "51ec76cc5685566569af3f312efee2aaccadddfc",
          "commitAuthor": "Gilles Sadowski",
          "commitDateOld": "9/1/10, 6:45 AM",
          "commitNameOld": "d2a5bc02c002acfa220ce8bad23b9e8af137f47d",
          "commitAuthorOld": "Gilles Sadowski",
          "daysBetweenCommits": 63.0,
          "commitsBetweenForRepo": 86,
          "commitsBetweenForFile": 1,
          "actualSource": "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) {\n    double previous \u003d val[0];\n    boolean ok \u003d true;\n    int max \u003d val.length;\n    for (int i \u003d 1; i \u003c max; i++) {\n        switch(dir) {\n            case INCREASING:\n                if (strict) {\n                    if (val[i] \u003c\u003d previous) {\n                        ok \u003d false;\n                    }\n                } else {\n                    if (val[i] \u003c previous) {\n                        ok \u003d false;\n                    }\n                }\n                break;\n            case DECREASING:\n                if (strict) {\n                    if (val[i] \u003e\u003d previous) {\n                        ok \u003d false;\n                    }\n                } else {\n                    if (val[i] \u003e previous) {\n                        ok \u003d false;\n                    }\n                }\n                break;\n            default:\n                throw new IllegalArgumentException();\n        }\n        if (!ok \u0026\u0026 abort) {\n            throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);\n        }\n        previous \u003d val[i];\n    }\n    return ok;\n}",
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
          "functionStartLine": 1778,
          "functionName": "checkOrder",
          "functionAnnotation": "",
          "functionDoc": "Checks that the given array is sorted.\n\n@param val Values.\n@param dir Ordering direction.\n@param strict Whether the order should be strict.\n@param abort Whether to throw an exception if the check fails.\n@return @code true} if the array is sorted.\n@throws NonMonotonousSequenceException if the array is not sorted\nand {@code abort} is {@code true}.\n",
          "diff": "@@ -1,37 +1,38 @@\n-public static void checkOrder(double[] val, OrderDirection dir, boolean strict) {\n+public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) {\n     double previous \u003d val[0];\n     boolean ok \u003d true;\n     int max \u003d val.length;\n     for (int i \u003d 1; i \u003c max; i++) {\n         switch(dir) {\n             case INCREASING:\n                 if (strict) {\n                     if (val[i] \u003c\u003d previous) {\n                         ok \u003d false;\n                     }\n                 } else {\n                     if (val[i] \u003c previous) {\n                         ok \u003d false;\n                     }\n                 }\n                 break;\n             case DECREASING:\n                 if (strict) {\n                     if (val[i] \u003e\u003d previous) {\n                         ok \u003d false;\n                     }\n                 } else {\n                     if (val[i] \u003e previous) {\n                         ok \u003d false;\n                     }\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException();\n         }\n-        if (!ok) {\n+        if (!ok \u0026\u0026 abort) {\n             throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);\n         }\n         previous \u003d val[i];\n     }\n+    return ok;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[val-double[], dir-OrderDirection, strict-boolean]",
            "newValue": "[val-double[], dir-OrderDirection, strict-boolean, abort-boolean]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "MATH-195\nCreated an unchecked \"FunctionEvaluationException\" in package \"exception\".\nRemoved \"throws\" clause from interface \"UnivariateRealFunction\".\n\"PolynomialFunctionLagrangeForm\": Added early check on the interpolating\narray having distinct points; removed redundant test in methods \"evaluate\"\nand \"computeCoefficients\".\n\"DividedDifferenceInerpolator\": Removed redundant check.\n\"Mathutils\": Added method \"sortInPlace\". Removed (most) references to the\ndeprecated \"MathRuntimeException\" class.\n\"optimization.direct\": Removed deprecated classes.\nJavadoc clean up.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1030464 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/3/10, 6:46 AM",
          "commitName": "51ec76cc5685566569af3f312efee2aaccadddfc",
          "commitAuthor": "Gilles Sadowski",
          "commitDateOld": "9/1/10, 6:45 AM",
          "commitNameOld": "d2a5bc02c002acfa220ce8bad23b9e8af137f47d",
          "commitAuthorOld": "Gilles Sadowski",
          "daysBetweenCommits": 63.0,
          "commitsBetweenForRepo": 86,
          "commitsBetweenForFile": 1,
          "actualSource": "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) {\n    double previous \u003d val[0];\n    boolean ok \u003d true;\n    int max \u003d val.length;\n    for (int i \u003d 1; i \u003c max; i++) {\n        switch(dir) {\n            case INCREASING:\n                if (strict) {\n                    if (val[i] \u003c\u003d previous) {\n                        ok \u003d false;\n                    }\n                } else {\n                    if (val[i] \u003c previous) {\n                        ok \u003d false;\n                    }\n                }\n                break;\n            case DECREASING:\n                if (strict) {\n                    if (val[i] \u003e\u003d previous) {\n                        ok \u003d false;\n                    }\n                } else {\n                    if (val[i] \u003e previous) {\n                        ok \u003d false;\n                    }\n                }\n                break;\n            default:\n                throw new IllegalArgumentException();\n        }\n        if (!ok \u0026\u0026 abort) {\n            throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);\n        }\n        previous \u003d val[i];\n    }\n    return ok;\n}",
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
          "functionStartLine": 1778,
          "functionName": "checkOrder",
          "functionAnnotation": "",
          "functionDoc": "Checks that the given array is sorted.\n\n@param val Values.\n@param dir Ordering direction.\n@param strict Whether the order should be strict.\n@param abort Whether to throw an exception if the check fails.\n@return @code true} if the array is sorted.\n@throws NonMonotonousSequenceException if the array is not sorted\nand {@code abort} is {@code true}.\n",
          "diff": "@@ -1,37 +1,38 @@\n-public static void checkOrder(double[] val, OrderDirection dir, boolean strict) {\n+public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) {\n     double previous \u003d val[0];\n     boolean ok \u003d true;\n     int max \u003d val.length;\n     for (int i \u003d 1; i \u003c max; i++) {\n         switch(dir) {\n             case INCREASING:\n                 if (strict) {\n                     if (val[i] \u003c\u003d previous) {\n                         ok \u003d false;\n                     }\n                 } else {\n                     if (val[i] \u003c previous) {\n                         ok \u003d false;\n                     }\n                 }\n                 break;\n             case DECREASING:\n                 if (strict) {\n                     if (val[i] \u003e\u003d previous) {\n                         ok \u003d false;\n                     }\n                 } else {\n                     if (val[i] \u003e previous) {\n                         ok \u003d false;\n                     }\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException();\n         }\n-        if (!ok) {\n+        if (!ok \u0026\u0026 abort) {\n             throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);\n         }\n         previous \u003d val[i];\n     }\n+    return ok;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "boolean"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MATH-195\nCreated an unchecked \"FunctionEvaluationException\" in package \"exception\".\nRemoved \"throws\" clause from interface \"UnivariateRealFunction\".\n\"PolynomialFunctionLagrangeForm\": Added early check on the interpolating\narray having distinct points; removed redundant test in methods \"evaluate\"\nand \"computeCoefficients\".\n\"DividedDifferenceInerpolator\": Removed redundant check.\n\"Mathutils\": Added method \"sortInPlace\". Removed (most) references to the\ndeprecated \"MathRuntimeException\" class.\n\"optimization.direct\": Removed deprecated classes.\nJavadoc clean up.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1030464 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/3/10, 6:46 AM",
          "commitName": "51ec76cc5685566569af3f312efee2aaccadddfc",
          "commitAuthor": "Gilles Sadowski",
          "commitDateOld": "9/1/10, 6:45 AM",
          "commitNameOld": "d2a5bc02c002acfa220ce8bad23b9e8af137f47d",
          "commitAuthorOld": "Gilles Sadowski",
          "daysBetweenCommits": 63.0,
          "commitsBetweenForRepo": 86,
          "commitsBetweenForFile": 1,
          "actualSource": "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) {\n    double previous \u003d val[0];\n    boolean ok \u003d true;\n    int max \u003d val.length;\n    for (int i \u003d 1; i \u003c max; i++) {\n        switch(dir) {\n            case INCREASING:\n                if (strict) {\n                    if (val[i] \u003c\u003d previous) {\n                        ok \u003d false;\n                    }\n                } else {\n                    if (val[i] \u003c previous) {\n                        ok \u003d false;\n                    }\n                }\n                break;\n            case DECREASING:\n                if (strict) {\n                    if (val[i] \u003e\u003d previous) {\n                        ok \u003d false;\n                    }\n                } else {\n                    if (val[i] \u003e previous) {\n                        ok \u003d false;\n                    }\n                }\n                break;\n            default:\n                throw new IllegalArgumentException();\n        }\n        if (!ok \u0026\u0026 abort) {\n            throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);\n        }\n        previous \u003d val[i];\n    }\n    return ok;\n}",
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
          "functionStartLine": 1778,
          "functionName": "checkOrder",
          "functionAnnotation": "",
          "functionDoc": "Checks that the given array is sorted.\n\n@param val Values.\n@param dir Ordering direction.\n@param strict Whether the order should be strict.\n@param abort Whether to throw an exception if the check fails.\n@return @code true} if the array is sorted.\n@throws NonMonotonousSequenceException if the array is not sorted\nand {@code abort} is {@code true}.\n",
          "diff": "@@ -1,37 +1,38 @@\n-public static void checkOrder(double[] val, OrderDirection dir, boolean strict) {\n+public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) {\n     double previous \u003d val[0];\n     boolean ok \u003d true;\n     int max \u003d val.length;\n     for (int i \u003d 1; i \u003c max; i++) {\n         switch(dir) {\n             case INCREASING:\n                 if (strict) {\n                     if (val[i] \u003c\u003d previous) {\n                         ok \u003d false;\n                     }\n                 } else {\n                     if (val[i] \u003c previous) {\n                         ok \u003d false;\n                     }\n                 }\n                 break;\n             case DECREASING:\n                 if (strict) {\n                     if (val[i] \u003e\u003d previous) {\n                         ok \u003d false;\n                     }\n                 } else {\n                     if (val[i] \u003e previous) {\n                         ok \u003d false;\n                     }\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException();\n         }\n-        if (!ok) {\n+        if (!ok \u0026\u0026 abort) {\n             throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);\n         }\n         previous \u003d val[i];\n     }\n+    return ok;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "MATH-195\nCreated an unchecked \"FunctionEvaluationException\" in package \"exception\".\nRemoved \"throws\" clause from interface \"UnivariateRealFunction\".\n\"PolynomialFunctionLagrangeForm\": Added early check on the interpolating\narray having distinct points; removed redundant test in methods \"evaluate\"\nand \"computeCoefficients\".\n\"DividedDifferenceInerpolator\": Removed redundant check.\n\"Mathutils\": Added method \"sortInPlace\". Removed (most) references to the\ndeprecated \"MathRuntimeException\" class.\n\"optimization.direct\": Removed deprecated classes.\nJavadoc clean up.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1030464 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/3/10, 6:46 AM",
          "commitName": "51ec76cc5685566569af3f312efee2aaccadddfc",
          "commitAuthor": "Gilles Sadowski",
          "commitDateOld": "9/1/10, 6:45 AM",
          "commitNameOld": "d2a5bc02c002acfa220ce8bad23b9e8af137f47d",
          "commitAuthorOld": "Gilles Sadowski",
          "daysBetweenCommits": 63.0,
          "commitsBetweenForRepo": 86,
          "commitsBetweenForFile": 1,
          "actualSource": "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) {\n    double previous \u003d val[0];\n    boolean ok \u003d true;\n    int max \u003d val.length;\n    for (int i \u003d 1; i \u003c max; i++) {\n        switch(dir) {\n            case INCREASING:\n                if (strict) {\n                    if (val[i] \u003c\u003d previous) {\n                        ok \u003d false;\n                    }\n                } else {\n                    if (val[i] \u003c previous) {\n                        ok \u003d false;\n                    }\n                }\n                break;\n            case DECREASING:\n                if (strict) {\n                    if (val[i] \u003e\u003d previous) {\n                        ok \u003d false;\n                    }\n                } else {\n                    if (val[i] \u003e previous) {\n                        ok \u003d false;\n                    }\n                }\n                break;\n            default:\n                throw new IllegalArgumentException();\n        }\n        if (!ok \u0026\u0026 abort) {\n            throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);\n        }\n        previous \u003d val[i];\n    }\n    return ok;\n}",
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
          "functionStartLine": 1778,
          "functionName": "checkOrder",
          "functionAnnotation": "",
          "functionDoc": "Checks that the given array is sorted.\n\n@param val Values.\n@param dir Ordering direction.\n@param strict Whether the order should be strict.\n@param abort Whether to throw an exception if the check fails.\n@return @code true} if the array is sorted.\n@throws NonMonotonousSequenceException if the array is not sorted\nand {@code abort} is {@code true}.\n",
          "diff": "@@ -1,37 +1,38 @@\n-public static void checkOrder(double[] val, OrderDirection dir, boolean strict) {\n+public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) {\n     double previous \u003d val[0];\n     boolean ok \u003d true;\n     int max \u003d val.length;\n     for (int i \u003d 1; i \u003c max; i++) {\n         switch(dir) {\n             case INCREASING:\n                 if (strict) {\n                     if (val[i] \u003c\u003d previous) {\n                         ok \u003d false;\n                     }\n                 } else {\n                     if (val[i] \u003c previous) {\n                         ok \u003d false;\n                     }\n                 }\n                 break;\n             case DECREASING:\n                 if (strict) {\n                     if (val[i] \u003e\u003d previous) {\n                         ok \u003d false;\n                     }\n                 } else {\n                     if (val[i] \u003e previous) {\n                         ok \u003d false;\n                     }\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException();\n         }\n-        if (!ok) {\n+        if (!ok \u0026\u0026 abort) {\n             throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);\n         }\n         previous \u003d val[i];\n     }\n+    return ok;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Checks that the given array is sorted.\n\n@param val Values.\n@param dir Ordering direction.\n@param strict Whether the order should be strict.\n@throws NonMonotonousSequenceException if the array is not sorted.\n",
            "newValue": "Checks that the given array is sorted.\n\n@param val Values.\n@param dir Ordering direction.\n@param strict Whether the order should be strict.\n@param abort Whether to throw an exception if the check fails.\n@return @code true} if the array is sorted.\n@throws NonMonotonousSequenceException if the array is not sorted\nand {@code abort} is {@code true}.\n"
          }
        }
      ]
    },
    "70f29147ed9f8fe3b3d37c742ef126f046325d92": {
      "type": "Ymultichange(Yparameterchange,Ydocchange)",
      "commitMessage": "Created enum \"OrderDirection\" in \"MathUtils\" (instead of the existing\n\"Direction\" enum enclosed in an \"Order\" class). Changed affected files.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@981347 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/1/10, 4:38 PM",
      "commitName": "70f29147ed9f8fe3b3d37c742ef126f046325d92",
      "commitAuthor": "Gilles Sadowski",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Created enum \"OrderDirection\" in \"MathUtils\" (instead of the existing\n\"Direction\" enum enclosed in an \"Order\" class). Changed affected files.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@981347 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "8/1/10, 4:38 PM",
          "commitName": "70f29147ed9f8fe3b3d37c742ef126f046325d92",
          "commitAuthor": "Gilles Sadowski",
          "commitDateOld": "8/1/10, 9:09 AM",
          "commitNameOld": "d64c1768c3fc4898ea80fd6fdce73666eb275b0d",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 0.31,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "actualSource": "public static void checkOrder(double[] val, OrderDirection dir, boolean strict) {\n    double previous \u003d val[0];\n    boolean ok \u003d true;\n    int max \u003d val.length;\n    for (int i \u003d 1; i \u003c max; i++) {\n        switch(dir) {\n            case INCREASING:\n                if (strict) {\n                    if (val[i] \u003c\u003d previous) {\n                        ok \u003d false;\n                    }\n                } else {\n                    if (val[i] \u003c previous) {\n                        ok \u003d false;\n                    }\n                }\n                break;\n            case DECREASING:\n                if (strict) {\n                    if (val[i] \u003e\u003d previous) {\n                        ok \u003d false;\n                    }\n                } else {\n                    if (val[i] \u003e previous) {\n                        ok \u003d false;\n                    }\n                }\n                break;\n            default:\n                throw new IllegalArgumentException();\n        }\n        if (!ok) {\n            throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);\n        }\n        previous \u003d val[i];\n    }\n}",
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
          "functionStartLine": 1888,
          "functionName": "checkOrder",
          "functionAnnotation": "",
          "functionDoc": "Checks that the given array is sorted.\n\n@param val Values.\n@param dir Ordering direction.\n@param strict Whether the order should be strict.\n@throws NonMonotonousSequenceException if the array is not sorted.\n",
          "diff": "@@ -1,37 +1,37 @@\n-public static void checkOrder(double[] val, Order.Direction dir, boolean strict) {\n+public static void checkOrder(double[] val, OrderDirection dir, boolean strict) {\n     double previous \u003d val[0];\n     boolean ok \u003d true;\n     int max \u003d val.length;\n     for (int i \u003d 1; i \u003c max; i++) {\n         switch(dir) {\n             case INCREASING:\n                 if (strict) {\n                     if (val[i] \u003c\u003d previous) {\n                         ok \u003d false;\n                     }\n                 } else {\n                     if (val[i] \u003c previous) {\n                         ok \u003d false;\n                     }\n                 }\n                 break;\n             case DECREASING:\n                 if (strict) {\n                     if (val[i] \u003e\u003d previous) {\n                         ok \u003d false;\n                     }\n                 } else {\n                     if (val[i] \u003e previous) {\n                         ok \u003d false;\n                     }\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException();\n         }\n         if (!ok) {\n             throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);\n         }\n         previous \u003d val[i];\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[val-double[], dir-Order.Direction, strict-boolean]",
            "newValue": "[val-double[], dir-OrderDirection, strict-boolean]"
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Created enum \"OrderDirection\" in \"MathUtils\" (instead of the existing\n\"Direction\" enum enclosed in an \"Order\" class). Changed affected files.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@981347 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "8/1/10, 4:38 PM",
          "commitName": "70f29147ed9f8fe3b3d37c742ef126f046325d92",
          "commitAuthor": "Gilles Sadowski",
          "commitDateOld": "8/1/10, 9:09 AM",
          "commitNameOld": "d64c1768c3fc4898ea80fd6fdce73666eb275b0d",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 0.31,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "actualSource": "public static void checkOrder(double[] val, OrderDirection dir, boolean strict) {\n    double previous \u003d val[0];\n    boolean ok \u003d true;\n    int max \u003d val.length;\n    for (int i \u003d 1; i \u003c max; i++) {\n        switch(dir) {\n            case INCREASING:\n                if (strict) {\n                    if (val[i] \u003c\u003d previous) {\n                        ok \u003d false;\n                    }\n                } else {\n                    if (val[i] \u003c previous) {\n                        ok \u003d false;\n                    }\n                }\n                break;\n            case DECREASING:\n                if (strict) {\n                    if (val[i] \u003e\u003d previous) {\n                        ok \u003d false;\n                    }\n                } else {\n                    if (val[i] \u003e previous) {\n                        ok \u003d false;\n                    }\n                }\n                break;\n            default:\n                throw new IllegalArgumentException();\n        }\n        if (!ok) {\n            throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);\n        }\n        previous \u003d val[i];\n    }\n}",
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
          "functionStartLine": 1888,
          "functionName": "checkOrder",
          "functionAnnotation": "",
          "functionDoc": "Checks that the given array is sorted.\n\n@param val Values.\n@param dir Ordering direction.\n@param strict Whether the order should be strict.\n@throws NonMonotonousSequenceException if the array is not sorted.\n",
          "diff": "@@ -1,37 +1,37 @@\n-public static void checkOrder(double[] val, Order.Direction dir, boolean strict) {\n+public static void checkOrder(double[] val, OrderDirection dir, boolean strict) {\n     double previous \u003d val[0];\n     boolean ok \u003d true;\n     int max \u003d val.length;\n     for (int i \u003d 1; i \u003c max; i++) {\n         switch(dir) {\n             case INCREASING:\n                 if (strict) {\n                     if (val[i] \u003c\u003d previous) {\n                         ok \u003d false;\n                     }\n                 } else {\n                     if (val[i] \u003c previous) {\n                         ok \u003d false;\n                     }\n                 }\n                 break;\n             case DECREASING:\n                 if (strict) {\n                     if (val[i] \u003e\u003d previous) {\n                         ok \u003d false;\n                     }\n                 } else {\n                     if (val[i] \u003e previous) {\n                         ok \u003d false;\n                     }\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException();\n         }\n         if (!ok) {\n             throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);\n         }\n         previous \u003d val[i];\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Checks that the given array is sorted.\n\n@param val Values.\n@param dir Order direction.\n@param strict Whether the order should be strict.\n@throws NonMonotonousSequenceException if the array is not sorted.\n",
            "newValue": "Checks that the given array is sorted.\n\n@param val Values.\n@param dir Ordering direction.\n@param strict Whether the order should be strict.\n@throws NonMonotonousSequenceException if the array is not sorted.\n"
          }
        }
      ]
    },
    "8c131082913e0edc1ae248d36407f88991d7aa53": {
      "type": "Yintroduced",
      "commitMessage": "MATH-361\nAdded new exceptions. Replaced several instances of \"IllegalArgumentException\"\nwith a more specific exception.\nFor not yet released code, removed the checked \"DimensionMismatchException\"\nfrom the method signature and replaced its instances with the new (unchecked)\nversion of the exception.\nCorrected typos in Javadoc comments.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@959634 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/1/10, 5:30 AM",
      "commitName": "8c131082913e0edc1ae248d36407f88991d7aa53",
      "commitAuthor": "Gilles Sadowski",
      "diff": "@@ -0,0 +1,37 @@\n+public static void checkOrder(double[] val, Order.Direction dir, boolean strict) {\n+    double previous \u003d val[0];\n+    boolean ok \u003d true;\n+    int max \u003d val.length;\n+    for (int i \u003d 1; i \u003c max; i++) {\n+        switch(dir) {\n+            case INCREASING:\n+                if (strict) {\n+                    if (val[i] \u003c\u003d previous) {\n+                        ok \u003d false;\n+                    }\n+                } else {\n+                    if (val[i] \u003c previous) {\n+                        ok \u003d false;\n+                    }\n+                }\n+                break;\n+            case DECREASING:\n+                if (strict) {\n+                    if (val[i] \u003e\u003d previous) {\n+                        ok \u003d false;\n+                    }\n+                } else {\n+                    if (val[i] \u003e previous) {\n+                        ok \u003d false;\n+                    }\n+                }\n+                break;\n+            default:\n+                throw new IllegalArgumentException();\n+        }\n+        if (!ok) {\n+            throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);\n+        }\n+        previous \u003d val[i];\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "public static void checkOrder(double[] val, Order.Direction dir, boolean strict) {\n    double previous \u003d val[0];\n    boolean ok \u003d true;\n    int max \u003d val.length;\n    for (int i \u003d 1; i \u003c max; i++) {\n        switch(dir) {\n            case INCREASING:\n                if (strict) {\n                    if (val[i] \u003c\u003d previous) {\n                        ok \u003d false;\n                    }\n                } else {\n                    if (val[i] \u003c previous) {\n                        ok \u003d false;\n                    }\n                }\n                break;\n            case DECREASING:\n                if (strict) {\n                    if (val[i] \u003e\u003d previous) {\n                        ok \u003d false;\n                    }\n                } else {\n                    if (val[i] \u003e previous) {\n                        ok \u003d false;\n                    }\n                }\n                break;\n            default:\n                throw new IllegalArgumentException();\n        }\n        if (!ok) {\n            throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);\n        }\n        previous \u003d val[i];\n    }\n}",
      "path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
      "functionStartLine": 1885,
      "functionName": "checkOrder",
      "functionAnnotation": "",
      "functionDoc": "Checks that the given array is sorted.\n\n@param val Values.\n@param dir Order direction.\n@param strict Whether the order should be strict.\n@throws NonMonotonousSequenceException if the array is not sorted.\n"
    }
  }
}