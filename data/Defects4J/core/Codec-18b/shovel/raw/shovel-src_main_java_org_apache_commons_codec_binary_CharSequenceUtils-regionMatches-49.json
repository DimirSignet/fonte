{
  "origin": "codeshovel",
  "repositoryName": "Codec-18b",
  "repositoryPath": "/tmp/Codec-18b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CharSequenceUtils.java",
  "functionName": "regionMatches",
  "functionId": "regionMatches___cs-CharSequence(modifiers-final)__ignoreCase-boolean(modifiers-final)__thisStart-int(modifiers-final)__substring-CharSequence(modifiers-final)__start-int(modifiers-final)__length-int(modifiers-final)",
  "sourceFilePath": "src/main/java/org/apache/commons/codec/binary/CharSequenceUtils.java",
  "functionAnnotation": "",
  "functionDoc": "Green implementation of regionMatches.\n\n@param cs the \u003ccode\u003eCharSequence\u003c/code\u003e to be processed\n@param ignoreCase whether or not to be case insensitive\n@param thisStart the index to start on the \u003ccode\u003ecs\u003c/code\u003e CharSequence\n@param substring the \u003ccode\u003eCharSequence\u003c/code\u003e to be looked for\n@param start the index to start on the \u003ccode\u003esubstring\u003c/code\u003e CharSequence\n@param length character length of the region\n@return whether the region matched\n",
  "functionStartLine": 49,
  "functionEndLine": 78,
  "numCommitsSeen": 6,
  "timeTaken": 789,
  "changeHistory": [
    "91901434bd199b104bac6eb89769f78d97f18f3e",
    "a600bbfd622e4d225ad3b8e6cf3334df3cd6e19e",
    "7bf48eefb3dc9fa049f2f0411ebffdd46cea84c8",
    "37ba197e62d6b60037d18afc33801e6221f1b8c6"
  ],
  "changeHistoryShort": {
    "91901434bd199b104bac6eb89769f78d97f18f3e": "Ybodychange",
    "a600bbfd622e4d225ad3b8e6cf3334df3cd6e19e": "Yformatchange",
    "7bf48eefb3dc9fa049f2f0411ebffdd46cea84c8": "Ydocchange",
    "37ba197e62d6b60037d18afc33801e6221f1b8c6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "91901434bd199b104bac6eb89769f78d97f18f3e": {
      "type": "Ybodychange",
      "commitMessage": "Use final.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/codec/trunk@1694610 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/6/15, 8:47 PM",
      "commitName": "91901434bd199b104bac6eb89769f78d97f18f3e",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "10/26/14, 10:24 PM",
      "commitNameOld": "a600bbfd622e4d225ad3b8e6cf3334df3cd6e19e",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 283.93,
      "commitsBetweenForRepo": 75,
      "commitsBetweenForFile": 1,
      "actualSource": "static boolean regionMatches(final CharSequence cs, final boolean ignoreCase, final int thisStart, final CharSequence substring, final int start, final int length) {\n    if (cs instanceof String \u0026\u0026 substring instanceof String) {\n        return ((String) cs).regionMatches(ignoreCase, thisStart, (String) substring, start, length);\n    }\n    int index1 \u003d thisStart;\n    int index2 \u003d start;\n    int tmpLen \u003d length;\n    while (tmpLen-- \u003e 0) {\n        final char c1 \u003d cs.charAt(index1++);\n        final char c2 \u003d substring.charAt(index2++);\n        if (c1 \u003d\u003d c2) {\n            continue;\n        }\n        if (!ignoreCase) {\n            return false;\n        }\n        if (Character.toUpperCase(c1) !\u003d Character.toUpperCase(c2) \u0026\u0026 Character.toLowerCase(c1) !\u003d Character.toLowerCase(c2)) {\n            return false;\n        }\n    }\n    return true;\n}",
      "path": "src/main/java/org/apache/commons/codec/binary/CharSequenceUtils.java",
      "functionStartLine": 49,
      "functionName": "regionMatches",
      "functionAnnotation": "",
      "functionDoc": "Green implementation of regionMatches.\n\n@param cs the \u003ccode\u003eCharSequence\u003c/code\u003e to be processed\n@param ignoreCase whether or not to be case insensitive\n@param thisStart the index to start on the \u003ccode\u003ecs\u003c/code\u003e CharSequence\n@param substring the \u003ccode\u003eCharSequence\u003c/code\u003e to be looked for\n@param start the index to start on the \u003ccode\u003esubstring\u003c/code\u003e CharSequence\n@param length character length of the region\n@return whether the region matched\n",
      "diff": "@@ -1,22 +1,22 @@\n static boolean regionMatches(final CharSequence cs, final boolean ignoreCase, final int thisStart, final CharSequence substring, final int start, final int length) {\n     if (cs instanceof String \u0026\u0026 substring instanceof String) {\n         return ((String) cs).regionMatches(ignoreCase, thisStart, (String) substring, start, length);\n     }\n     int index1 \u003d thisStart;\n     int index2 \u003d start;\n     int tmpLen \u003d length;\n     while (tmpLen-- \u003e 0) {\n-        char c1 \u003d cs.charAt(index1++);\n-        char c2 \u003d substring.charAt(index2++);\n+        final char c1 \u003d cs.charAt(index1++);\n+        final char c2 \u003d substring.charAt(index2++);\n         if (c1 \u003d\u003d c2) {\n             continue;\n         }\n         if (!ignoreCase) {\n             return false;\n         }\n         if (Character.toUpperCase(c1) !\u003d Character.toUpperCase(c2) \u0026\u0026 Character.toLowerCase(c1) !\u003d Character.toLowerCase(c2)) {\n             return false;\n         }\n     }\n     return true;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a600bbfd622e4d225ad3b8e6cf3334df3cd6e19e": {
      "type": "Yformatchange",
      "commitMessage": "Checkstyle.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/codec/trunk@1634455 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/26/14, 10:24 PM",
      "commitName": "a600bbfd622e4d225ad3b8e6cf3334df3cd6e19e",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "10/26/14, 6:09 PM",
      "commitNameOld": "a169746c427ab8d31ee38457dcbf52c33fe920b0",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 0.18,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "static boolean regionMatches(final CharSequence cs, final boolean ignoreCase, final int thisStart, final CharSequence substring, final int start, final int length) {\n    if (cs instanceof String \u0026\u0026 substring instanceof String) {\n        return ((String) cs).regionMatches(ignoreCase, thisStart, (String) substring, start, length);\n    }\n    int index1 \u003d thisStart;\n    int index2 \u003d start;\n    int tmpLen \u003d length;\n    while (tmpLen-- \u003e 0) {\n        char c1 \u003d cs.charAt(index1++);\n        char c2 \u003d substring.charAt(index2++);\n        if (c1 \u003d\u003d c2) {\n            continue;\n        }\n        if (!ignoreCase) {\n            return false;\n        }\n        if (Character.toUpperCase(c1) !\u003d Character.toUpperCase(c2) \u0026\u0026 Character.toLowerCase(c1) !\u003d Character.toLowerCase(c2)) {\n            return false;\n        }\n    }\n    return true;\n}",
      "path": "src/main/java/org/apache/commons/codec/binary/CharSequenceUtils.java",
      "functionStartLine": 49,
      "functionName": "regionMatches",
      "functionAnnotation": "",
      "functionDoc": "Green implementation of regionMatches.\n\n@param cs the \u003ccode\u003eCharSequence\u003c/code\u003e to be processed\n@param ignoreCase whether or not to be case insensitive\n@param thisStart the index to start on the \u003ccode\u003ecs\u003c/code\u003e CharSequence\n@param substring the \u003ccode\u003eCharSequence\u003c/code\u003e to be looked for\n@param start the index to start on the \u003ccode\u003esubstring\u003c/code\u003e CharSequence\n@param length character length of the region\n@return whether the region matched\n",
      "diff": "",
      "extendedDetails": {}
    },
    "7bf48eefb3dc9fa049f2f0411ebffdd46cea84c8": {
      "type": "Ydocchange",
      "commitMessage": "Javadoc 8.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/codec/trunk@1619948 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/22/14, 3:53 PM",
      "commitName": "7bf48eefb3dc9fa049f2f0411ebffdd46cea84c8",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "4/10/14, 8:31 AM",
      "commitNameOld": "ab77a5e565f978d81d098c5a0ea59483201f4d74",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 134.31,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "actualSource": "static boolean regionMatches(final CharSequence cs, final boolean ignoreCase, final int thisStart, final CharSequence substring, final int start, final int length) {\n    if (cs instanceof String \u0026\u0026 substring instanceof String) {\n        return ((String) cs).regionMatches(ignoreCase, thisStart, (String) substring, start, length);\n    }\n    int index1 \u003d thisStart;\n    int index2 \u003d start;\n    int tmpLen \u003d length;\n    while (tmpLen-- \u003e 0) {\n        char c1 \u003d cs.charAt(index1++);\n        char c2 \u003d substring.charAt(index2++);\n        if (c1 \u003d\u003d c2) {\n            continue;\n        }\n        if (!ignoreCase) {\n            return false;\n        }\n        if (Character.toUpperCase(c1) !\u003d Character.toUpperCase(c2) \u0026\u0026 Character.toLowerCase(c1) !\u003d Character.toLowerCase(c2)) {\n            return false;\n        }\n    }\n    return true;\n}",
      "path": "src/main/java/org/apache/commons/codec/binary/CharSequenceUtils.java",
      "functionStartLine": 49,
      "functionName": "regionMatches",
      "functionAnnotation": "",
      "functionDoc": "Green implementation of regionMatches.\n\n@param cs the \u003ccode\u003eCharSequence\u003c/code\u003e to be processed\n@param ignoreCase whether or not to be case insensitive\n@param thisStart the index to start on the \u003ccode\u003ecs\u003c/code\u003e CharSequence\n@param substring the \u003ccode\u003eCharSequence\u003c/code\u003e to be looked for\n@param start the index to start on the \u003ccode\u003esubstring\u003c/code\u003e CharSequence\n@param length character length of the region\n@return whether the region matched\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Green implementation of regionMatches.\n\n@param cs the {@code CharSequence} to be processed\n@param ignoreCase whether or not to be case insensitive\n@param thisStart the index to start on the {@code cs} CharSequence\n@param substring the {@code CharSequence} to be looked for\n@param start the index to start on the {@code substring} CharSequence\n@param length character length of the region\n@return whether the region matched\n",
        "newValue": "Green implementation of regionMatches.\n\n@param cs the \u003ccode\u003eCharSequence\u003c/code\u003e to be processed\n@param ignoreCase whether or not to be case insensitive\n@param thisStart the index to start on the \u003ccode\u003ecs\u003c/code\u003e CharSequence\n@param substring the \u003ccode\u003eCharSequence\u003c/code\u003e to be looked for\n@param start the index to start on the \u003ccode\u003esubstring\u003c/code\u003e CharSequence\n@param length character length of the region\n@return whether the region matched\n"
      }
    },
    "37ba197e62d6b60037d18afc33801e6221f1b8c6": {
      "type": "Yintroduced",
      "commitMessage": "\u003caction dev\u003d\"ggregory\" type\u003d\"add\" issue\u003d\"CODEC-184\" due-to\u003d\"Cyrille Artho\"\u003eNullPointerException in DoubleMetaPhone.isDoubleMetaphoneEqual when using empty strings\u003c/action\u003e\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/codec/trunk@1586300 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/10/14, 6:51 AM",
      "commitName": "37ba197e62d6b60037d18afc33801e6221f1b8c6",
      "commitAuthor": "Gary D. Gregory",
      "diff": "@@ -0,0 +1,22 @@\n+static boolean regionMatches(final CharSequence cs, final boolean ignoreCase, final int thisStart, final CharSequence substring, final int start, final int length) {\n+    if (cs instanceof String \u0026\u0026 substring instanceof String) {\n+        return ((String) cs).regionMatches(ignoreCase, thisStart, (String) substring, start, length);\n+    }\n+    int index1 \u003d thisStart;\n+    int index2 \u003d start;\n+    int tmpLen \u003d length;\n+    while (tmpLen-- \u003e 0) {\n+        char c1 \u003d cs.charAt(index1++);\n+        char c2 \u003d substring.charAt(index2++);\n+        if (c1 \u003d\u003d c2) {\n+            continue;\n+        }\n+        if (!ignoreCase) {\n+            return false;\n+        }\n+        if (Character.toUpperCase(c1) !\u003d Character.toUpperCase(c2) \u0026\u0026 Character.toLowerCase(c1) !\u003d Character.toLowerCase(c2)) {\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n\\ No newline at end of file\n",
      "actualSource": "static boolean regionMatches(final CharSequence cs, final boolean ignoreCase, final int thisStart, final CharSequence substring, final int start, final int length) {\n    if (cs instanceof String \u0026\u0026 substring instanceof String) {\n        return ((String) cs).regionMatches(ignoreCase, thisStart, (String) substring, start, length);\n    }\n    int index1 \u003d thisStart;\n    int index2 \u003d start;\n    int tmpLen \u003d length;\n    while (tmpLen-- \u003e 0) {\n        char c1 \u003d cs.charAt(index1++);\n        char c2 \u003d substring.charAt(index2++);\n        if (c1 \u003d\u003d c2) {\n            continue;\n        }\n        if (!ignoreCase) {\n            return false;\n        }\n        if (Character.toUpperCase(c1) !\u003d Character.toUpperCase(c2) \u0026\u0026 Character.toLowerCase(c1) !\u003d Character.toLowerCase(c2)) {\n            return false;\n        }\n    }\n    return true;\n}",
      "path": "src/main/java/org/apache/commons/codec/binary/CharSequenceUtils.java",
      "functionStartLine": 33,
      "functionName": "regionMatches",
      "functionAnnotation": "",
      "functionDoc": "Green implementation of regionMatches.\n\n@param cs the {@code CharSequence} to be processed\n@param ignoreCase whether or not to be case insensitive\n@param thisStart the index to start on the {@code cs} CharSequence\n@param substring the {@code CharSequence} to be looked for\n@param start the index to start on the {@code substring} CharSequence\n@param length character length of the region\n@return whether the region matched\n"
    }
  }
}