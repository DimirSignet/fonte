{
  "origin": "codeshovel",
  "repositoryName": "Closure-99b",
  "repositoryPath": "/tmp/Closure-99b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Compiler.java",
  "functionName": "parseInputs",
  "functionId": "parseInputs",
  "sourceFilePath": "src/com/google/javascript/jscomp/Compiler.java",
  "functionAnnotation": "",
  "functionDoc": "Parses the externs and main inputs.\n\n@return A synthetic root node whose two children are the externs root\n    and the main root\n",
  "functionStartLine": 995,
  "functionEndLine": 1122,
  "numCommitsSeen": 32,
  "timeTaken": 2317,
  "changeHistory": [
    "c2d3c87f726630f66cbae09614853f660616eb16",
    "301ed5b03eb52debdc9b87929a45880eb2faf1fe",
    "475548341c38755063c8475379745ba31caffe41",
    "279196b617c5de1ade21110979b6b13d8eda6342",
    "9147da9979fb00599efd700fa5e0cccfa93d25a5",
    "b29d4a8bc7138f9216930edfebed29d42f0dca89",
    "e3bcc1c6e7ce7e9bfc3098cd5bf57774049f5baa",
    "a70a7c599e53a7752cf4b9e6e82b4408c3c4c04b",
    "847b296c23a63aa0a0b38cc3e63883e1688288e3",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "c2d3c87f726630f66cbae09614853f660616eb16": "Ybodychange",
    "301ed5b03eb52debdc9b87929a45880eb2faf1fe": "Ybodychange",
    "475548341c38755063c8475379745ba31caffe41": "Ybodychange",
    "279196b617c5de1ade21110979b6b13d8eda6342": "Ybodychange",
    "9147da9979fb00599efd700fa5e0cccfa93d25a5": "Ybodychange",
    "b29d4a8bc7138f9216930edfebed29d42f0dca89": "Ybodychange",
    "e3bcc1c6e7ce7e9bfc3098cd5bf57774049f5baa": "Ybodychange",
    "a70a7c599e53a7752cf4b9e6e82b4408c3c4c04b": "Ybodychange",
    "847b296c23a63aa0a0b38cc3e63883e1688288e3": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c2d3c87f726630f66cbae09614853f660616eb16": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/05/18 by nick\n\n        handle circular dependencies properly.\n\n        R\u003dalan\n        DELTA\u003d216  (182 added, 0 deleted, 34 changed)\n\nChange on 2010/05/18 by nick\n\n        open-source i18n plugin for translating goog.getMsg.\n        Slaps an apache license on everything and removes dependencies\n        on non-open-source code.\n\n        R\u003drobert\n        DELTA\u003d96  (78 added, 7 deleted, 11 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d7001\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@223 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/18/10, 5:37 PM",
      "commitName": "c2d3c87f726630f66cbae09614853f660616eb16",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "5/13/10, 5:34 PM",
      "commitNameOld": "260f0ffc9243ef15bd17e324c9cf7e2dfac9cc6a",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 5.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "Node parseInputs() {\n    boolean devMode \u003d options.devMode !\u003d DevMode.OFF;\n    if (externsRoot !\u003d null) {\n        externsRoot.detachChildren();\n    }\n    if (jsRoot !\u003d null) {\n        jsRoot.detachChildren();\n    }\n    jsRoot \u003d new Node(Token.BLOCK);\n    jsRoot.setIsSyntheticBlock(true);\n    if (options.tracer.isOn()) {\n        tracker \u003d new PerformanceTracker(jsRoot, options.tracer \u003d\u003d TracerMode.ALL);\n        addChangeHandler(tracker.getCodeChangeHandler());\n    }\n    Tracer tracer \u003d newTracer(\"parseInputs\");\n    try {\n        externsRoot \u003d new Node(Token.BLOCK);\n        externsRoot.setIsSyntheticBlock(true);\n        for (CompilerInput input : externs) {\n            Node n \u003d input.getAstRoot(this);\n            if (hasErrors()) {\n                return null;\n            }\n            externsRoot.addChildToBack(n);\n        }\n        if (options.manageClosureDependencies) {\n            for (CompilerInput input : inputs) {\n                input.setCompiler(this);\n                for (String provide : input.getProvides()) {\n                    getTypeRegistry().forwardDeclareType(provide);\n                }\n            }\n            try {\n                inputs \u003d (moduleGraph \u003d\u003d null ? new JSModuleGraph(modules) : moduleGraph).manageDependencies(inputs);\n            } catch (CircularDependencyException e) {\n                report(JSError.make(JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));\n                return null;\n            }\n        }\n        boolean liftedExterns \u003d false;\n        for (CompilerInput input : inputs) {\n            Node n \u003d input.getAstRoot(this);\n            if (hasErrors()) {\n                return null;\n            }\n            if (n \u003d\u003d null) {\n                continue;\n            }\n            if (n.getJSDocInfo() !\u003d null \u0026\u0026 n.getJSDocInfo().isExterns()) {\n                externsRoot.addChildToBack(n);\n                input.setIsExtern(true);\n                input.getModule().remove(input);\n                externs.add(input);\n                liftedExterns \u003d true;\n            }\n        }\n        if (liftedExterns) {\n            fillEmptyModules(modules);\n            rebuildInputsFromModules();\n        }\n        for (CompilerInput input : inputs) {\n            Node n \u003d input.getAstRoot(this);\n            if (n \u003d\u003d null) {\n                continue;\n            }\n            if (devMode) {\n                runSanityCheck();\n                if (hasErrors()) {\n                    return null;\n                }\n            }\n            if (options.sourceMapOutputPath !\u003d null || options.nameReferenceReportPath !\u003d null) {\n                SourceInformationAnnotator sia \u003d new SourceInformationAnnotator(input.getName());\n                NodeTraversal.traverse(this, n, sia);\n            }\n            jsRoot.addChildToBack(n);\n        }\n        externAndJsRoot \u003d new Node(Token.BLOCK, externsRoot, jsRoot);\n        externAndJsRoot.setIsSyntheticBlock(true);\n        return externAndJsRoot;\n    } finally {\n        stopTracer(tracer, \"parseInputs\");\n    }\n}",
      "path": "src/com/google/javascript/jscomp/Compiler.java",
      "functionStartLine": 1010,
      "functionName": "parseInputs",
      "functionAnnotation": "",
      "functionDoc": "Parses the externs and main inputs.\n\n@return A synthetic root node whose two children are the externs root\n    and the main root\n",
      "diff": "@@ -1,79 +1,84 @@\n Node parseInputs() {\n     boolean devMode \u003d options.devMode !\u003d DevMode.OFF;\n     if (externsRoot !\u003d null) {\n         externsRoot.detachChildren();\n     }\n     if (jsRoot !\u003d null) {\n         jsRoot.detachChildren();\n     }\n     jsRoot \u003d new Node(Token.BLOCK);\n     jsRoot.setIsSyntheticBlock(true);\n     if (options.tracer.isOn()) {\n         tracker \u003d new PerformanceTracker(jsRoot, options.tracer \u003d\u003d TracerMode.ALL);\n         addChangeHandler(tracker.getCodeChangeHandler());\n     }\n     Tracer tracer \u003d newTracer(\"parseInputs\");\n     try {\n         externsRoot \u003d new Node(Token.BLOCK);\n         externsRoot.setIsSyntheticBlock(true);\n         for (CompilerInput input : externs) {\n             Node n \u003d input.getAstRoot(this);\n             if (hasErrors()) {\n                 return null;\n             }\n             externsRoot.addChildToBack(n);\n         }\n         if (options.manageClosureDependencies) {\n             for (CompilerInput input : inputs) {\n                 input.setCompiler(this);\n                 for (String provide : input.getProvides()) {\n                     getTypeRegistry().forwardDeclareType(provide);\n                 }\n             }\n-            inputs \u003d (moduleGraph \u003d\u003d null ? new JSModuleGraph(modules) : moduleGraph).manageDependencies(inputs);\n+            try {\n+                inputs \u003d (moduleGraph \u003d\u003d null ? new JSModuleGraph(modules) : moduleGraph).manageDependencies(inputs);\n+            } catch (CircularDependencyException e) {\n+                report(JSError.make(JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));\n+                return null;\n+            }\n         }\n         boolean liftedExterns \u003d false;\n         for (CompilerInput input : inputs) {\n             Node n \u003d input.getAstRoot(this);\n             if (hasErrors()) {\n                 return null;\n             }\n             if (n \u003d\u003d null) {\n                 continue;\n             }\n             if (n.getJSDocInfo() !\u003d null \u0026\u0026 n.getJSDocInfo().isExterns()) {\n                 externsRoot.addChildToBack(n);\n                 input.setIsExtern(true);\n                 input.getModule().remove(input);\n                 externs.add(input);\n                 liftedExterns \u003d true;\n             }\n         }\n         if (liftedExterns) {\n             fillEmptyModules(modules);\n             rebuildInputsFromModules();\n         }\n         for (CompilerInput input : inputs) {\n             Node n \u003d input.getAstRoot(this);\n             if (n \u003d\u003d null) {\n                 continue;\n             }\n             if (devMode) {\n                 runSanityCheck();\n                 if (hasErrors()) {\n                     return null;\n                 }\n             }\n             if (options.sourceMapOutputPath !\u003d null || options.nameReferenceReportPath !\u003d null) {\n                 SourceInformationAnnotator sia \u003d new SourceInformationAnnotator(input.getName());\n                 NodeTraversal.traverse(this, n, sia);\n             }\n             jsRoot.addChildToBack(n);\n         }\n         externAndJsRoot \u003d new Node(Token.BLOCK, externsRoot, jsRoot);\n         externAndJsRoot.setIsSyntheticBlock(true);\n         return externAndJsRoot;\n     } finally {\n         stopTracer(tracer, \"parseInputs\");\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "301ed5b03eb52debdc9b87929a45880eb2faf1fe": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/05/11 by robby\n\n        Support aliases in JsDoc + some additional tests.\n\n        R\u003dnick\n        DELTA\u003d311  (294 added, 2 deleted, 15 changed)\n\nChange on 2010/05/11 by nick\n\n        forward-declare type names that are dropped from the input.\n\n        R\u003dalan\n        DELTA\u003d31  (31 added, 0 deleted, 0 changed)\n\nChange on 2010/05/11 by nick\n\n        Verify that closure-compiler issue 157 is invalid.\n\n        R\u003drobert\n        DELTA\u003d4  (4 added, 0 deleted, 0 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dvflmak\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@208 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/11/10, 6:45 PM",
      "commitName": "301ed5b03eb52debdc9b87929a45880eb2faf1fe",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "5/7/10, 2:59 PM",
      "commitNameOld": "475548341c38755063c8475379745ba31caffe41",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 4.16,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "Node parseInputs() {\n    boolean devMode \u003d options.devMode !\u003d DevMode.OFF;\n    if (externsRoot !\u003d null) {\n        externsRoot.detachChildren();\n    }\n    if (jsRoot !\u003d null) {\n        jsRoot.detachChildren();\n    }\n    jsRoot \u003d new Node(Token.BLOCK);\n    jsRoot.setIsSyntheticBlock(true);\n    if (options.tracer.isOn()) {\n        tracker \u003d new PerformanceTracker(jsRoot, options.tracer \u003d\u003d TracerMode.ALL);\n        addChangeHandler(tracker.getCodeChangeHandler());\n    }\n    Tracer tracer \u003d newTracer(\"parseInputs\");\n    try {\n        externsRoot \u003d new Node(Token.BLOCK);\n        externsRoot.setIsSyntheticBlock(true);\n        for (CompilerInput input : externs) {\n            Node n \u003d input.getAstRoot(this);\n            if (hasErrors()) {\n                return null;\n            }\n            externsRoot.addChildToBack(n);\n        }\n        if (options.manageClosureDependencies) {\n            for (CompilerInput input : inputs) {\n                input.setCompiler(this);\n                for (String provide : input.getProvides()) {\n                    getTypeRegistry().forwardDeclareType(provide);\n                }\n            }\n            inputs \u003d (moduleGraph \u003d\u003d null ? new JSModuleGraph(modules) : moduleGraph).manageDependencies(inputs);\n        }\n        boolean liftedExterns \u003d false;\n        for (CompilerInput input : inputs) {\n            Node n \u003d input.getAstRoot(this);\n            if (hasErrors()) {\n                return null;\n            }\n            if (n \u003d\u003d null) {\n                continue;\n            }\n            if (n.getJSDocInfo() !\u003d null \u0026\u0026 n.getJSDocInfo().isExterns()) {\n                externsRoot.addChildToBack(n);\n                input.setIsExtern(true);\n                input.getModule().remove(input);\n                externs.add(input);\n                liftedExterns \u003d true;\n            }\n        }\n        if (liftedExterns) {\n            fillEmptyModules(modules);\n            rebuildInputsFromModules();\n        }\n        for (CompilerInput input : inputs) {\n            Node n \u003d input.getAstRoot(this);\n            if (n \u003d\u003d null) {\n                continue;\n            }\n            if (devMode) {\n                runSanityCheck();\n                if (hasErrors()) {\n                    return null;\n                }\n            }\n            if (options.sourceMapOutputPath !\u003d null || options.nameReferenceReportPath !\u003d null) {\n                SourceInformationAnnotator sia \u003d new SourceInformationAnnotator(input.getName());\n                NodeTraversal.traverse(this, n, sia);\n            }\n            jsRoot.addChildToBack(n);\n        }\n        externAndJsRoot \u003d new Node(Token.BLOCK, externsRoot, jsRoot);\n        externAndJsRoot.setIsSyntheticBlock(true);\n        return externAndJsRoot;\n    } finally {\n        stopTracer(tracer, \"parseInputs\");\n    }\n}",
      "path": "src/com/google/javascript/jscomp/Compiler.java",
      "functionStartLine": 1008,
      "functionName": "parseInputs",
      "functionAnnotation": "",
      "functionDoc": "Parses the externs and main inputs.\n\n@return A synthetic root node whose two children are the externs root\n    and the main root\n",
      "diff": "@@ -1,76 +1,79 @@\n Node parseInputs() {\n     boolean devMode \u003d options.devMode !\u003d DevMode.OFF;\n     if (externsRoot !\u003d null) {\n         externsRoot.detachChildren();\n     }\n     if (jsRoot !\u003d null) {\n         jsRoot.detachChildren();\n     }\n     jsRoot \u003d new Node(Token.BLOCK);\n     jsRoot.setIsSyntheticBlock(true);\n     if (options.tracer.isOn()) {\n         tracker \u003d new PerformanceTracker(jsRoot, options.tracer \u003d\u003d TracerMode.ALL);\n         addChangeHandler(tracker.getCodeChangeHandler());\n     }\n     Tracer tracer \u003d newTracer(\"parseInputs\");\n     try {\n         externsRoot \u003d new Node(Token.BLOCK);\n         externsRoot.setIsSyntheticBlock(true);\n         for (CompilerInput input : externs) {\n             Node n \u003d input.getAstRoot(this);\n             if (hasErrors()) {\n                 return null;\n             }\n             externsRoot.addChildToBack(n);\n         }\n         if (options.manageClosureDependencies) {\n             for (CompilerInput input : inputs) {\n                 input.setCompiler(this);\n+                for (String provide : input.getProvides()) {\n+                    getTypeRegistry().forwardDeclareType(provide);\n+                }\n             }\n             inputs \u003d (moduleGraph \u003d\u003d null ? new JSModuleGraph(modules) : moduleGraph).manageDependencies(inputs);\n         }\n         boolean liftedExterns \u003d false;\n         for (CompilerInput input : inputs) {\n             Node n \u003d input.getAstRoot(this);\n             if (hasErrors()) {\n                 return null;\n             }\n             if (n \u003d\u003d null) {\n                 continue;\n             }\n             if (n.getJSDocInfo() !\u003d null \u0026\u0026 n.getJSDocInfo().isExterns()) {\n                 externsRoot.addChildToBack(n);\n                 input.setIsExtern(true);\n                 input.getModule().remove(input);\n                 externs.add(input);\n                 liftedExterns \u003d true;\n             }\n         }\n         if (liftedExterns) {\n             fillEmptyModules(modules);\n             rebuildInputsFromModules();\n         }\n         for (CompilerInput input : inputs) {\n             Node n \u003d input.getAstRoot(this);\n             if (n \u003d\u003d null) {\n                 continue;\n             }\n             if (devMode) {\n                 runSanityCheck();\n                 if (hasErrors()) {\n                     return null;\n                 }\n             }\n             if (options.sourceMapOutputPath !\u003d null || options.nameReferenceReportPath !\u003d null) {\n                 SourceInformationAnnotator sia \u003d new SourceInformationAnnotator(input.getName());\n                 NodeTraversal.traverse(this, n, sia);\n             }\n             jsRoot.addChildToBack(n);\n         }\n         externAndJsRoot \u003d new Node(Token.BLOCK, externsRoot, jsRoot);\n         externAndJsRoot.setIsSyntheticBlock(true);\n         return externAndJsRoot;\n     } finally {\n         stopTracer(tracer, \"parseInputs\");\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "475548341c38755063c8475379745ba31caffe41": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/05/06 by nick\n\n        Automatic source sorting--now with modules!\n\n        R\u003dalan\n        DELTA\u003d194  (176 added, 7 deleted, 11 changed)\n\nChange on 2010/05/06 by nick\n\n        Identify unknown @suppress parameters.\n\n        R\u003dalan\n        DELTA\u003d109  (83 added, 12 deleted, 14 changed)\n\nChange on 2010/05/06 by alan\n\n        Enable flow sensitive inlining in open source world.\n\n        R\u003dnick\n        DELTA\u003d2  (2 added, 0 deleted, 0 changed)\n\nChange on 2010/05/06 by alan\n\n        Factor out JoinOp\n\n        R\u003dnick\n        DELTA\u003d137  (77 added, 54 deleted, 6 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dewwtfu\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@204 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/7/10, 2:59 PM",
      "commitName": "475548341c38755063c8475379745ba31caffe41",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "5/5/10, 4:36 PM",
      "commitNameOld": "279196b617c5de1ade21110979b6b13d8eda6342",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 1.93,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "Node parseInputs() {\n    boolean devMode \u003d options.devMode !\u003d DevMode.OFF;\n    if (externsRoot !\u003d null) {\n        externsRoot.detachChildren();\n    }\n    if (jsRoot !\u003d null) {\n        jsRoot.detachChildren();\n    }\n    jsRoot \u003d new Node(Token.BLOCK);\n    jsRoot.setIsSyntheticBlock(true);\n    if (options.tracer.isOn()) {\n        tracker \u003d new PerformanceTracker(jsRoot, options.tracer \u003d\u003d TracerMode.ALL);\n        addChangeHandler(tracker.getCodeChangeHandler());\n    }\n    Tracer tracer \u003d newTracer(\"parseInputs\");\n    try {\n        externsRoot \u003d new Node(Token.BLOCK);\n        externsRoot.setIsSyntheticBlock(true);\n        for (CompilerInput input : externs) {\n            Node n \u003d input.getAstRoot(this);\n            if (hasErrors()) {\n                return null;\n            }\n            externsRoot.addChildToBack(n);\n        }\n        if (options.manageClosureDependencies) {\n            for (CompilerInput input : inputs) {\n                input.setCompiler(this);\n            }\n            inputs \u003d (moduleGraph \u003d\u003d null ? new JSModuleGraph(modules) : moduleGraph).manageDependencies(inputs);\n        }\n        boolean liftedExterns \u003d false;\n        for (CompilerInput input : inputs) {\n            Node n \u003d input.getAstRoot(this);\n            if (hasErrors()) {\n                return null;\n            }\n            if (n \u003d\u003d null) {\n                continue;\n            }\n            if (n.getJSDocInfo() !\u003d null \u0026\u0026 n.getJSDocInfo().isExterns()) {\n                externsRoot.addChildToBack(n);\n                input.setIsExtern(true);\n                input.getModule().remove(input);\n                externs.add(input);\n                liftedExterns \u003d true;\n            }\n        }\n        if (liftedExterns) {\n            fillEmptyModules(modules);\n            rebuildInputsFromModules();\n        }\n        for (CompilerInput input : inputs) {\n            Node n \u003d input.getAstRoot(this);\n            if (n \u003d\u003d null) {\n                continue;\n            }\n            if (devMode) {\n                runSanityCheck();\n                if (hasErrors()) {\n                    return null;\n                }\n            }\n            if (options.sourceMapOutputPath !\u003d null || options.nameReferenceReportPath !\u003d null) {\n                SourceInformationAnnotator sia \u003d new SourceInformationAnnotator(input.getName());\n                NodeTraversal.traverse(this, n, sia);\n            }\n            jsRoot.addChildToBack(n);\n        }\n        externAndJsRoot \u003d new Node(Token.BLOCK, externsRoot, jsRoot);\n        externAndJsRoot.setIsSyntheticBlock(true);\n        return externAndJsRoot;\n    } finally {\n        stopTracer(tracer, \"parseInputs\");\n    }\n}",
      "path": "src/com/google/javascript/jscomp/Compiler.java",
      "functionStartLine": 1008,
      "functionName": "parseInputs",
      "functionAnnotation": "",
      "functionDoc": "Parses the externs and main inputs.\n\n@return A synthetic root node whose two children are the externs root\n    and the main root\n",
      "diff": "@@ -1,77 +1,76 @@\n Node parseInputs() {\n     boolean devMode \u003d options.devMode !\u003d DevMode.OFF;\n     if (externsRoot !\u003d null) {\n         externsRoot.detachChildren();\n     }\n     if (jsRoot !\u003d null) {\n         jsRoot.detachChildren();\n     }\n     jsRoot \u003d new Node(Token.BLOCK);\n     jsRoot.setIsSyntheticBlock(true);\n     if (options.tracer.isOn()) {\n         tracker \u003d new PerformanceTracker(jsRoot, options.tracer \u003d\u003d TracerMode.ALL);\n         addChangeHandler(tracker.getCodeChangeHandler());\n     }\n     Tracer tracer \u003d newTracer(\"parseInputs\");\n     try {\n         externsRoot \u003d new Node(Token.BLOCK);\n         externsRoot.setIsSyntheticBlock(true);\n         for (CompilerInput input : externs) {\n             Node n \u003d input.getAstRoot(this);\n             if (hasErrors()) {\n                 return null;\n             }\n             externsRoot.addChildToBack(n);\n         }\n         if (options.manageClosureDependencies) {\n             for (CompilerInput input : inputs) {\n                 input.setCompiler(this);\n             }\n-            SortedDependencies\u003cCompilerInput\u003e sorter \u003d new SortedDependencies\u003cCompilerInput\u003e(inputs);\n-            inputs \u003d Lists.newArrayList(sorter.getSortedDependenciesOf(sorter.getInputsWithoutProvides()));\n+            inputs \u003d (moduleGraph \u003d\u003d null ? new JSModuleGraph(modules) : moduleGraph).manageDependencies(inputs);\n         }\n         boolean liftedExterns \u003d false;\n         for (CompilerInput input : inputs) {\n             Node n \u003d input.getAstRoot(this);\n             if (hasErrors()) {\n                 return null;\n             }\n             if (n \u003d\u003d null) {\n                 continue;\n             }\n             if (n.getJSDocInfo() !\u003d null \u0026\u0026 n.getJSDocInfo().isExterns()) {\n                 externsRoot.addChildToBack(n);\n                 input.setIsExtern(true);\n                 input.getModule().remove(input);\n                 externs.add(input);\n                 liftedExterns \u003d true;\n             }\n         }\n         if (liftedExterns) {\n             fillEmptyModules(modules);\n             rebuildInputsFromModules();\n         }\n         for (CompilerInput input : inputs) {\n             Node n \u003d input.getAstRoot(this);\n             if (n \u003d\u003d null) {\n                 continue;\n             }\n             if (devMode) {\n                 runSanityCheck();\n                 if (hasErrors()) {\n                     return null;\n                 }\n             }\n             if (options.sourceMapOutputPath !\u003d null || options.nameReferenceReportPath !\u003d null) {\n                 SourceInformationAnnotator sia \u003d new SourceInformationAnnotator(input.getName());\n                 NodeTraversal.traverse(this, n, sia);\n             }\n             jsRoot.addChildToBack(n);\n         }\n         externAndJsRoot \u003d new Node(Token.BLOCK, externsRoot, jsRoot);\n         externAndJsRoot.setIsSyntheticBlock(true);\n         return externAndJsRoot;\n     } finally {\n         stopTracer(tracer, \"parseInputs\");\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "279196b617c5de1ade21110979b6b13d8eda6342": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/05/04 by nick\n\n        Pipe everything through the module code path.\n        This teases out a bunch of edge-case bugs that worked in the non-module\n        code path, but not the module code path (and vice-versa)\n\n        R\u003dalan\n        DELTA\u003d136  (67 added, 19 deleted, 50 changed)\n\nChange on 2010/05/04 by nick\n\n        fiddle with the check_global_this_level decision tree\n        This should be off by default if collapse_properties is off,\n        and on by default if collapse_properties is on.\n\n        R\u003dalan\n        DELTA\u003d47  (32 added, 4 deleted, 11 changed)\n\nChange on 2010/05/04 by andrew\n\n        -Infer that arguments to goog.asserts.assert() are non-nullable after the\n        call.\n        -Infer the types of arguments to goog.asserts.assert{String,Number,...} after\n        the call.\n\n        Tested:\n          -Added new unit tests.\n\n        R\u003dnick\n        DELTA\u003d277  (266 added, 4 deleted, 7 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dqdhuno\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@203 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/5/10, 4:36 PM",
      "commitName": "279196b617c5de1ade21110979b6b13d8eda6342",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "5/3/10, 7:03 AM",
      "commitNameOld": "9147da9979fb00599efd700fa5e0cccfa93d25a5",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 2.4,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "Node parseInputs() {\n    boolean devMode \u003d options.devMode !\u003d DevMode.OFF;\n    if (externsRoot !\u003d null) {\n        externsRoot.detachChildren();\n    }\n    if (jsRoot !\u003d null) {\n        jsRoot.detachChildren();\n    }\n    jsRoot \u003d new Node(Token.BLOCK);\n    jsRoot.setIsSyntheticBlock(true);\n    if (options.tracer.isOn()) {\n        tracker \u003d new PerformanceTracker(jsRoot, options.tracer \u003d\u003d TracerMode.ALL);\n        addChangeHandler(tracker.getCodeChangeHandler());\n    }\n    Tracer tracer \u003d newTracer(\"parseInputs\");\n    try {\n        externsRoot \u003d new Node(Token.BLOCK);\n        externsRoot.setIsSyntheticBlock(true);\n        for (CompilerInput input : externs) {\n            Node n \u003d input.getAstRoot(this);\n            if (hasErrors()) {\n                return null;\n            }\n            externsRoot.addChildToBack(n);\n        }\n        if (options.manageClosureDependencies) {\n            for (CompilerInput input : inputs) {\n                input.setCompiler(this);\n            }\n            SortedDependencies\u003cCompilerInput\u003e sorter \u003d new SortedDependencies\u003cCompilerInput\u003e(inputs);\n            inputs \u003d Lists.newArrayList(sorter.getSortedDependenciesOf(sorter.getInputsWithoutProvides()));\n        }\n        boolean liftedExterns \u003d false;\n        for (CompilerInput input : inputs) {\n            Node n \u003d input.getAstRoot(this);\n            if (hasErrors()) {\n                return null;\n            }\n            if (n \u003d\u003d null) {\n                continue;\n            }\n            if (n.getJSDocInfo() !\u003d null \u0026\u0026 n.getJSDocInfo().isExterns()) {\n                externsRoot.addChildToBack(n);\n                input.setIsExtern(true);\n                input.getModule().remove(input);\n                externs.add(input);\n                liftedExterns \u003d true;\n            }\n        }\n        if (liftedExterns) {\n            fillEmptyModules(modules);\n            rebuildInputsFromModules();\n        }\n        for (CompilerInput input : inputs) {\n            Node n \u003d input.getAstRoot(this);\n            if (n \u003d\u003d null) {\n                continue;\n            }\n            if (devMode) {\n                runSanityCheck();\n                if (hasErrors()) {\n                    return null;\n                }\n            }\n            if (options.sourceMapOutputPath !\u003d null || options.nameReferenceReportPath !\u003d null) {\n                SourceInformationAnnotator sia \u003d new SourceInformationAnnotator(input.getName());\n                NodeTraversal.traverse(this, n, sia);\n            }\n            jsRoot.addChildToBack(n);\n        }\n        externAndJsRoot \u003d new Node(Token.BLOCK, externsRoot, jsRoot);\n        externAndJsRoot.setIsSyntheticBlock(true);\n        return externAndJsRoot;\n    } finally {\n        stopTracer(tracer, \"parseInputs\");\n    }\n}",
      "path": "src/com/google/javascript/jscomp/Compiler.java",
      "functionStartLine": 1011,
      "functionName": "parseInputs",
      "functionAnnotation": "",
      "functionDoc": "Parses the externs and main inputs.\n\n@return A synthetic root node whose two children are the externs root\n    and the main root\n",
      "diff": "@@ -1,69 +1,77 @@\n Node parseInputs() {\n     boolean devMode \u003d options.devMode !\u003d DevMode.OFF;\n     if (externsRoot !\u003d null) {\n         externsRoot.detachChildren();\n     }\n     if (jsRoot !\u003d null) {\n         jsRoot.detachChildren();\n     }\n     jsRoot \u003d new Node(Token.BLOCK);\n     jsRoot.setIsSyntheticBlock(true);\n     if (options.tracer.isOn()) {\n         tracker \u003d new PerformanceTracker(jsRoot, options.tracer \u003d\u003d TracerMode.ALL);\n         addChangeHandler(tracker.getCodeChangeHandler());\n     }\n     Tracer tracer \u003d newTracer(\"parseInputs\");\n     try {\n         externsRoot \u003d new Node(Token.BLOCK);\n         externsRoot.setIsSyntheticBlock(true);\n         for (CompilerInput input : externs) {\n             Node n \u003d input.getAstRoot(this);\n             if (hasErrors()) {\n                 return null;\n             }\n             externsRoot.addChildToBack(n);\n         }\n         if (options.manageClosureDependencies) {\n             for (CompilerInput input : inputs) {\n                 input.setCompiler(this);\n             }\n             SortedDependencies\u003cCompilerInput\u003e sorter \u003d new SortedDependencies\u003cCompilerInput\u003e(inputs);\n             inputs \u003d Lists.newArrayList(sorter.getSortedDependenciesOf(sorter.getInputsWithoutProvides()));\n         }\n-        List\u003cCompilerInput\u003e annotatedExterns \u003d Lists.newArrayList();\n-        Iterator\u003cCompilerInput\u003e inputIterator \u003d inputs.iterator();\n-        while (inputIterator.hasNext()) {\n-            CompilerInput input \u003d inputIterator.next();\n+        boolean liftedExterns \u003d false;\n+        for (CompilerInput input : inputs) {\n             Node n \u003d input.getAstRoot(this);\n             if (hasErrors()) {\n                 return null;\n             }\n             if (n \u003d\u003d null) {\n                 continue;\n             }\n             if (n.getJSDocInfo() !\u003d null \u0026\u0026 n.getJSDocInfo().isExterns()) {\n                 externsRoot.addChildToBack(n);\n                 input.setIsExtern(true);\n-                inputIterator.remove();\n+                input.getModule().remove(input);\n                 externs.add(input);\n+                liftedExterns \u003d true;\n+            }\n+        }\n+        if (liftedExterns) {\n+            fillEmptyModules(modules);\n+            rebuildInputsFromModules();\n+        }\n+        for (CompilerInput input : inputs) {\n+            Node n \u003d input.getAstRoot(this);\n+            if (n \u003d\u003d null) {\n                 continue;\n             }\n             if (devMode) {\n                 runSanityCheck();\n                 if (hasErrors()) {\n                     return null;\n                 }\n             }\n             if (options.sourceMapOutputPath !\u003d null || options.nameReferenceReportPath !\u003d null) {\n                 SourceInformationAnnotator sia \u003d new SourceInformationAnnotator(input.getName());\n                 NodeTraversal.traverse(this, n, sia);\n             }\n             jsRoot.addChildToBack(n);\n         }\n         externAndJsRoot \u003d new Node(Token.BLOCK, externsRoot, jsRoot);\n         externAndJsRoot.setIsSyntheticBlock(true);\n         return externAndJsRoot;\n     } finally {\n         stopTracer(tracer, \"parseInputs\");\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9147da9979fb00599efd700fa5e0cccfa93d25a5": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/04/29 by alan\n\n        Don\u0027t inline a variable that has dependence on outer scoped variables.\n\n        R\u003dnick\n        DELTA\u003d44  (41 added, 0 deleted, 3 changed)\n\nChange on 2010/04/29 by nick\n\n        Remove some dead code.\n\n        R\u003dalan\n        DELTA\u003d113  (0 added, 113 deleted, 0 changed)\n\nChange on 2010/04/30 by andrew\n\n        -Fix up a copy/paste error in a comment.\n\n        R\u003djohn\n        DELTA\u003d1  (0 added, 0 deleted, 1 changed)\n\nChange on 2010/04/30 by nick\n\n        Prune sources that are not required when --manage_closure_dependencies\n        is on.\n\n        R\u003dalan\n        DELTA\u003d45  (22 added, 0 deleted, 23 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dlwqqkv\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@201 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/3/10, 7:03 AM",
      "commitName": "9147da9979fb00599efd700fa5e0cccfa93d25a5",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/28/10, 11:13 AM",
      "commitNameOld": "3c2047d4ed1b14fc5e5269d08ee17bfc19bb5374",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 4.83,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "Node parseInputs() {\n    boolean devMode \u003d options.devMode !\u003d DevMode.OFF;\n    if (externsRoot !\u003d null) {\n        externsRoot.detachChildren();\n    }\n    if (jsRoot !\u003d null) {\n        jsRoot.detachChildren();\n    }\n    jsRoot \u003d new Node(Token.BLOCK);\n    jsRoot.setIsSyntheticBlock(true);\n    if (options.tracer.isOn()) {\n        tracker \u003d new PerformanceTracker(jsRoot, options.tracer \u003d\u003d TracerMode.ALL);\n        addChangeHandler(tracker.getCodeChangeHandler());\n    }\n    Tracer tracer \u003d newTracer(\"parseInputs\");\n    try {\n        externsRoot \u003d new Node(Token.BLOCK);\n        externsRoot.setIsSyntheticBlock(true);\n        for (CompilerInput input : externs) {\n            Node n \u003d input.getAstRoot(this);\n            if (hasErrors()) {\n                return null;\n            }\n            externsRoot.addChildToBack(n);\n        }\n        if (options.manageClosureDependencies) {\n            for (CompilerInput input : inputs) {\n                input.setCompiler(this);\n            }\n            SortedDependencies\u003cCompilerInput\u003e sorter \u003d new SortedDependencies\u003cCompilerInput\u003e(inputs);\n            inputs \u003d Lists.newArrayList(sorter.getSortedDependenciesOf(sorter.getInputsWithoutProvides()));\n        }\n        List\u003cCompilerInput\u003e annotatedExterns \u003d Lists.newArrayList();\n        Iterator\u003cCompilerInput\u003e inputIterator \u003d inputs.iterator();\n        while (inputIterator.hasNext()) {\n            CompilerInput input \u003d inputIterator.next();\n            Node n \u003d input.getAstRoot(this);\n            if (hasErrors()) {\n                return null;\n            }\n            if (n \u003d\u003d null) {\n                continue;\n            }\n            if (n.getJSDocInfo() !\u003d null \u0026\u0026 n.getJSDocInfo().isExterns()) {\n                externsRoot.addChildToBack(n);\n                input.setIsExtern(true);\n                inputIterator.remove();\n                externs.add(input);\n                continue;\n            }\n            if (devMode) {\n                runSanityCheck();\n                if (hasErrors()) {\n                    return null;\n                }\n            }\n            if (options.sourceMapOutputPath !\u003d null || options.nameReferenceReportPath !\u003d null) {\n                SourceInformationAnnotator sia \u003d new SourceInformationAnnotator(input.getName());\n                NodeTraversal.traverse(this, n, sia);\n            }\n            jsRoot.addChildToBack(n);\n        }\n        externAndJsRoot \u003d new Node(Token.BLOCK, externsRoot, jsRoot);\n        externAndJsRoot.setIsSyntheticBlock(true);\n        return externAndJsRoot;\n    } finally {\n        stopTracer(tracer, \"parseInputs\");\n    }\n}",
      "path": "src/com/google/javascript/jscomp/Compiler.java",
      "functionStartLine": 1019,
      "functionName": "parseInputs",
      "functionAnnotation": "",
      "functionDoc": "Parses the externs and main inputs.\n\n@return A synthetic root node whose two children are the externs root\n    and the main root\n",
      "diff": "@@ -1,69 +1,69 @@\n Node parseInputs() {\n     boolean devMode \u003d options.devMode !\u003d DevMode.OFF;\n     if (externsRoot !\u003d null) {\n         externsRoot.detachChildren();\n     }\n     if (jsRoot !\u003d null) {\n         jsRoot.detachChildren();\n     }\n     jsRoot \u003d new Node(Token.BLOCK);\n     jsRoot.setIsSyntheticBlock(true);\n     if (options.tracer.isOn()) {\n         tracker \u003d new PerformanceTracker(jsRoot, options.tracer \u003d\u003d TracerMode.ALL);\n         addChangeHandler(tracker.getCodeChangeHandler());\n     }\n     Tracer tracer \u003d newTracer(\"parseInputs\");\n     try {\n         externsRoot \u003d new Node(Token.BLOCK);\n         externsRoot.setIsSyntheticBlock(true);\n         for (CompilerInput input : externs) {\n             Node n \u003d input.getAstRoot(this);\n             if (hasErrors()) {\n                 return null;\n             }\n             externsRoot.addChildToBack(n);\n         }\n-        if (options.sortClosureDependencies) {\n+        if (options.manageClosureDependencies) {\n             for (CompilerInput input : inputs) {\n                 input.setCompiler(this);\n             }\n             SortedDependencies\u003cCompilerInput\u003e sorter \u003d new SortedDependencies\u003cCompilerInput\u003e(inputs);\n-            inputs \u003d Lists.newArrayList(sorter.getSortedList());\n+            inputs \u003d Lists.newArrayList(sorter.getSortedDependenciesOf(sorter.getInputsWithoutProvides()));\n         }\n         List\u003cCompilerInput\u003e annotatedExterns \u003d Lists.newArrayList();\n         Iterator\u003cCompilerInput\u003e inputIterator \u003d inputs.iterator();\n         while (inputIterator.hasNext()) {\n             CompilerInput input \u003d inputIterator.next();\n             Node n \u003d input.getAstRoot(this);\n             if (hasErrors()) {\n                 return null;\n             }\n             if (n \u003d\u003d null) {\n                 continue;\n             }\n             if (n.getJSDocInfo() !\u003d null \u0026\u0026 n.getJSDocInfo().isExterns()) {\n                 externsRoot.addChildToBack(n);\n                 input.setIsExtern(true);\n                 inputIterator.remove();\n                 externs.add(input);\n                 continue;\n             }\n             if (devMode) {\n                 runSanityCheck();\n                 if (hasErrors()) {\n                     return null;\n                 }\n             }\n             if (options.sourceMapOutputPath !\u003d null || options.nameReferenceReportPath !\u003d null) {\n                 SourceInformationAnnotator sia \u003d new SourceInformationAnnotator(input.getName());\n                 NodeTraversal.traverse(this, n, sia);\n             }\n             jsRoot.addChildToBack(n);\n         }\n         externAndJsRoot \u003d new Node(Token.BLOCK, externsRoot, jsRoot);\n         externAndJsRoot.setIsSyntheticBlock(true);\n         return externAndJsRoot;\n     } finally {\n         stopTracer(tracer, \"parseInputs\");\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b29d4a8bc7138f9216930edfebed29d42f0dca89": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/04/19 by nick\n\n        automatic source-sorting based on closure dependencies.\n\n        R\u003dalan\n        DELTA\u003d98  (89 added, 5 deleted, 4 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dohwxnh\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@192 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/20/10, 9:00 AM",
      "commitName": "b29d4a8bc7138f9216930edfebed29d42f0dca89",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/15/10, 4:45 PM",
      "commitNameOld": "e3bcc1c6e7ce7e9bfc3098cd5bf57774049f5baa",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 4.68,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "Node parseInputs() {\n    boolean devMode \u003d options.devMode !\u003d DevMode.OFF;\n    if (externsRoot !\u003d null) {\n        externsRoot.detachChildren();\n    }\n    if (jsRoot !\u003d null) {\n        jsRoot.detachChildren();\n    }\n    jsRoot \u003d new Node(Token.BLOCK);\n    jsRoot.setIsSyntheticBlock(true);\n    if (options.tracer.isOn()) {\n        tracker \u003d new PerformanceTracker(jsRoot, options.tracer \u003d\u003d TracerMode.ALL);\n        addChangeHandler(tracker.getCodeChangeHandler());\n    }\n    Tracer tracer \u003d newTracer(\"parseInputs\");\n    try {\n        externsRoot \u003d new Node(Token.BLOCK);\n        externsRoot.setIsSyntheticBlock(true);\n        for (CompilerInput input : externs) {\n            Node n \u003d input.getAstRoot(this);\n            if (hasErrors()) {\n                return null;\n            }\n            externsRoot.addChildToBack(n);\n        }\n        if (options.sortClosureDependencies) {\n            for (CompilerInput input : inputs) {\n                input.setCompiler(this);\n            }\n            SortedDependencies\u003cCompilerInput\u003e sorter \u003d new SortedDependencies\u003cCompilerInput\u003e(inputs);\n            inputs \u003d Lists.newArrayList(sorter.getSortedList());\n        }\n        List\u003cCompilerInput\u003e annotatedExterns \u003d Lists.newArrayList();\n        Iterator\u003cCompilerInput\u003e inputIterator \u003d inputs.iterator();\n        while (inputIterator.hasNext()) {\n            CompilerInput input \u003d inputIterator.next();\n            Node n \u003d input.getAstRoot(this);\n            if (hasErrors()) {\n                return null;\n            }\n            if (n \u003d\u003d null) {\n                continue;\n            }\n            if (n.getJSDocInfo() !\u003d null \u0026\u0026 n.getJSDocInfo().isExterns()) {\n                externsRoot.addChildToBack(n);\n                input.setIsExtern(true);\n                inputIterator.remove();\n                externs.add(input);\n                continue;\n            }\n            if (devMode) {\n                runSanityCheck();\n                if (hasErrors()) {\n                    return null;\n                }\n            }\n            if (options.sourceMapOutputPath !\u003d null || options.nameReferenceReportPath !\u003d null) {\n                SourceInformationAnnotator sia \u003d new SourceInformationAnnotator(input.getName());\n                NodeTraversal.traverse(this, n, sia);\n            }\n            jsRoot.addChildToBack(n);\n        }\n        externAndJsRoot \u003d new Node(Token.BLOCK, externsRoot, jsRoot);\n        externAndJsRoot.setIsSyntheticBlock(true);\n        return externAndJsRoot;\n    } finally {\n        stopTracer(tracer, \"parseInputs\");\n    }\n}",
      "path": "src/com/google/javascript/jscomp/Compiler.java",
      "functionStartLine": 1026,
      "functionName": "parseInputs",
      "functionAnnotation": "",
      "functionDoc": "Parses the externs and main inputs.\n\n@return A synthetic root node whose two children are the externs root\n    and the main root\n",
      "diff": "@@ -1,62 +1,69 @@\n Node parseInputs() {\n     boolean devMode \u003d options.devMode !\u003d DevMode.OFF;\n     if (externsRoot !\u003d null) {\n         externsRoot.detachChildren();\n     }\n     if (jsRoot !\u003d null) {\n         jsRoot.detachChildren();\n     }\n     jsRoot \u003d new Node(Token.BLOCK);\n     jsRoot.setIsSyntheticBlock(true);\n     if (options.tracer.isOn()) {\n         tracker \u003d new PerformanceTracker(jsRoot, options.tracer \u003d\u003d TracerMode.ALL);\n         addChangeHandler(tracker.getCodeChangeHandler());\n     }\n     Tracer tracer \u003d newTracer(\"parseInputs\");\n     try {\n         externsRoot \u003d new Node(Token.BLOCK);\n         externsRoot.setIsSyntheticBlock(true);\n         for (CompilerInput input : externs) {\n             Node n \u003d input.getAstRoot(this);\n             if (hasErrors()) {\n                 return null;\n             }\n             externsRoot.addChildToBack(n);\n         }\n+        if (options.sortClosureDependencies) {\n+            for (CompilerInput input : inputs) {\n+                input.setCompiler(this);\n+            }\n+            SortedDependencies\u003cCompilerInput\u003e sorter \u003d new SortedDependencies\u003cCompilerInput\u003e(inputs);\n+            inputs \u003d Lists.newArrayList(sorter.getSortedList());\n+        }\n         List\u003cCompilerInput\u003e annotatedExterns \u003d Lists.newArrayList();\n         Iterator\u003cCompilerInput\u003e inputIterator \u003d inputs.iterator();\n         while (inputIterator.hasNext()) {\n             CompilerInput input \u003d inputIterator.next();\n             Node n \u003d input.getAstRoot(this);\n             if (hasErrors()) {\n                 return null;\n             }\n             if (n \u003d\u003d null) {\n                 continue;\n             }\n             if (n.getJSDocInfo() !\u003d null \u0026\u0026 n.getJSDocInfo().isExterns()) {\n                 externsRoot.addChildToBack(n);\n                 input.setIsExtern(true);\n                 inputIterator.remove();\n                 externs.add(input);\n                 continue;\n             }\n             if (devMode) {\n                 runSanityCheck();\n                 if (hasErrors()) {\n                     return null;\n                 }\n             }\n             if (options.sourceMapOutputPath !\u003d null || options.nameReferenceReportPath !\u003d null) {\n                 SourceInformationAnnotator sia \u003d new SourceInformationAnnotator(input.getName());\n                 NodeTraversal.traverse(this, n, sia);\n             }\n             jsRoot.addChildToBack(n);\n         }\n         externAndJsRoot \u003d new Node(Token.BLOCK, externsRoot, jsRoot);\n         externAndJsRoot.setIsSyntheticBlock(true);\n         return externAndJsRoot;\n     } finally {\n         stopTracer(tracer, \"parseInputs\");\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e3bcc1c6e7ce7e9bfc3098cd5bf57774049f5baa": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/04/15 by nick\n\n        Move the construction of ArrowTypes out of FunctionType.\n\n        R\u003djohn\n        DELTA\u003d197  (79 added, 27 deleted, 91 changed)\n\nChange on 2010/04/15 by nick\n\n        if a file is marked as an @extern, then make it an extern.\n\n        R\u003drobert\n        DELTA\u003d51  (46 added, 0 deleted, 5 changed)\n\nChange on 2010/04/15 by john\n\n        Maintain source information.\n\n        R\u003dalan\n        DELTA\u003d60  (28 added, 7 deleted, 25 changed)\n\nChange on 2010/04/15 by john\n\n        Fix overly aggressive RegExp check.\n\n        R\u003dalan\n        DELTA\u003d15  (12 added, 0 deleted, 3 changed)\n\nChange on 2010/04/15 by nick\n\n        more fun with function-type building.\n\n        R\u003djohn\n        DELTA\u003d432  (206 added, 142 deleted, 84 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003doqlcyn\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@186 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/15/10, 4:45 PM",
      "commitName": "e3bcc1c6e7ce7e9bfc3098cd5bf57774049f5baa",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/13/10, 2:39 PM",
      "commitNameOld": "de13c3313c05f4449c50c560324389d6905a214d",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 2.09,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "Node parseInputs() {\n    boolean devMode \u003d options.devMode !\u003d DevMode.OFF;\n    if (externsRoot !\u003d null) {\n        externsRoot.detachChildren();\n    }\n    if (jsRoot !\u003d null) {\n        jsRoot.detachChildren();\n    }\n    jsRoot \u003d new Node(Token.BLOCK);\n    jsRoot.setIsSyntheticBlock(true);\n    if (options.tracer.isOn()) {\n        tracker \u003d new PerformanceTracker(jsRoot, options.tracer \u003d\u003d TracerMode.ALL);\n        addChangeHandler(tracker.getCodeChangeHandler());\n    }\n    Tracer tracer \u003d newTracer(\"parseInputs\");\n    try {\n        externsRoot \u003d new Node(Token.BLOCK);\n        externsRoot.setIsSyntheticBlock(true);\n        for (CompilerInput input : externs) {\n            Node n \u003d input.getAstRoot(this);\n            if (hasErrors()) {\n                return null;\n            }\n            externsRoot.addChildToBack(n);\n        }\n        List\u003cCompilerInput\u003e annotatedExterns \u003d Lists.newArrayList();\n        Iterator\u003cCompilerInput\u003e inputIterator \u003d inputs.iterator();\n        while (inputIterator.hasNext()) {\n            CompilerInput input \u003d inputIterator.next();\n            Node n \u003d input.getAstRoot(this);\n            if (hasErrors()) {\n                return null;\n            }\n            if (n \u003d\u003d null) {\n                continue;\n            }\n            if (n.getJSDocInfo() !\u003d null \u0026\u0026 n.getJSDocInfo().isExterns()) {\n                externsRoot.addChildToBack(n);\n                input.setIsExtern(true);\n                inputIterator.remove();\n                externs.add(input);\n                continue;\n            }\n            if (devMode) {\n                runSanityCheck();\n                if (hasErrors()) {\n                    return null;\n                }\n            }\n            if (options.sourceMapOutputPath !\u003d null || options.nameReferenceReportPath !\u003d null) {\n                SourceInformationAnnotator sia \u003d new SourceInformationAnnotator(input.getName());\n                NodeTraversal.traverse(this, n, sia);\n            }\n            jsRoot.addChildToBack(n);\n        }\n        externAndJsRoot \u003d new Node(Token.BLOCK, externsRoot, jsRoot);\n        externAndJsRoot.setIsSyntheticBlock(true);\n        return externAndJsRoot;\n    } finally {\n        stopTracer(tracer, \"parseInputs\");\n    }\n}",
      "path": "src/com/google/javascript/jscomp/Compiler.java",
      "functionStartLine": 1025,
      "functionName": "parseInputs",
      "functionAnnotation": "",
      "functionDoc": "Parses the externs and main inputs.\n\n@return A synthetic root node whose two children are the externs root\n    and the main root\n",
      "diff": "@@ -1,52 +1,62 @@\n Node parseInputs() {\n     boolean devMode \u003d options.devMode !\u003d DevMode.OFF;\n     if (externsRoot !\u003d null) {\n         externsRoot.detachChildren();\n     }\n     if (jsRoot !\u003d null) {\n         jsRoot.detachChildren();\n     }\n     jsRoot \u003d new Node(Token.BLOCK);\n     jsRoot.setIsSyntheticBlock(true);\n     if (options.tracer.isOn()) {\n         tracker \u003d new PerformanceTracker(jsRoot, options.tracer \u003d\u003d TracerMode.ALL);\n         addChangeHandler(tracker.getCodeChangeHandler());\n     }\n     Tracer tracer \u003d newTracer(\"parseInputs\");\n     try {\n         externsRoot \u003d new Node(Token.BLOCK);\n         externsRoot.setIsSyntheticBlock(true);\n         for (CompilerInput input : externs) {\n             Node n \u003d input.getAstRoot(this);\n             if (hasErrors()) {\n                 return null;\n             }\n             externsRoot.addChildToBack(n);\n         }\n-        for (CompilerInput input : inputs) {\n+        List\u003cCompilerInput\u003e annotatedExterns \u003d Lists.newArrayList();\n+        Iterator\u003cCompilerInput\u003e inputIterator \u003d inputs.iterator();\n+        while (inputIterator.hasNext()) {\n+            CompilerInput input \u003d inputIterator.next();\n             Node n \u003d input.getAstRoot(this);\n             if (hasErrors()) {\n                 return null;\n             }\n             if (n \u003d\u003d null) {\n                 continue;\n             }\n+            if (n.getJSDocInfo() !\u003d null \u0026\u0026 n.getJSDocInfo().isExterns()) {\n+                externsRoot.addChildToBack(n);\n+                input.setIsExtern(true);\n+                inputIterator.remove();\n+                externs.add(input);\n+                continue;\n+            }\n             if (devMode) {\n                 runSanityCheck();\n                 if (hasErrors()) {\n                     return null;\n                 }\n             }\n             if (options.sourceMapOutputPath !\u003d null || options.nameReferenceReportPath !\u003d null) {\n                 SourceInformationAnnotator sia \u003d new SourceInformationAnnotator(input.getName());\n                 NodeTraversal.traverse(this, n, sia);\n             }\n             jsRoot.addChildToBack(n);\n         }\n         externAndJsRoot \u003d new Node(Token.BLOCK, externsRoot, jsRoot);\n         externAndJsRoot.setIsSyntheticBlock(true);\n         return externAndJsRoot;\n     } finally {\n         stopTracer(tracer, \"parseInputs\");\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a70a7c599e53a7752cf4b9e6e82b4408c3c4c04b": {
      "type": "Ybodychange",
      "commitMessage": "fix silly 2004-era naming conventions (Nick)\nR\u003djohn\nDELTA\u003d134  (0 added, 0 deleted, 134 changed)\n\nInsert a place holder file for any empty modules. (Alan)\nR\u003dnick\nDELTA\u003d53  (46 added, 6 deleted, 1 changed)\n\nMaps API extern update.\n(Contributed by Chad Killingsworth)\nFixes issue 121\nDELTA\u003d86  (48 added, 16 deleted, 22 changed)\n\n\nGoogle Loader API externs.\n(Contributed by Chad Killingsworth)\nFixes issue 126\nDELTA\u003d54  (54 added, 0 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@149 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/22/10, 10:51 PM",
      "commitName": "a70a7c599e53a7752cf4b9e6e82b4408c3c4c04b",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "3/22/10, 3:55 PM",
      "commitNameOld": "b347ce3a71e23a4ab92dc0a6c07d43e2f497c953",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 0.29,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "Node parseInputs() {\n    boolean devMode \u003d options.devMode !\u003d DevMode.OFF;\n    if (externsRoot !\u003d null) {\n        externsRoot.detachChildren();\n    }\n    if (jsRoot !\u003d null) {\n        jsRoot.detachChildren();\n    }\n    jsRoot \u003d new Node(Token.BLOCK);\n    jsRoot.setIsSyntheticBlock(true);\n    if (options.tracer.isOn()) {\n        tracker \u003d new PerformanceTracker(jsRoot, options.tracer \u003d\u003d TracerMode.ALL);\n        addChangeHandler(tracker.getCodeChangeHandler());\n    }\n    Tracer tracer \u003d newTracer(\"parseInputs\");\n    try {\n        externsRoot \u003d new Node(Token.BLOCK);\n        externsRoot.setIsSyntheticBlock(true);\n        for (CompilerInput input : externs) {\n            Node n \u003d input.getAstRoot(this);\n            if (hasErrors()) {\n                return null;\n            }\n            externsRoot.addChildToBack(n);\n        }\n        for (CompilerInput input : inputs) {\n            Node n \u003d input.getAstRoot(this);\n            if (hasErrors()) {\n                return null;\n            }\n            if (n \u003d\u003d null) {\n                continue;\n            }\n            if (devMode) {\n                runSanityCheck();\n                if (hasErrors()) {\n                    return null;\n                }\n            }\n            if (options.sourceMapOutputPath !\u003d null || options.nameReferenceReportPath !\u003d null) {\n                SourceInformationAnnotator sia \u003d new SourceInformationAnnotator(input.getName());\n                NodeTraversal.traverse(this, n, sia);\n            }\n            jsRoot.addChildToBack(n);\n        }\n        externAndJsRoot \u003d new Node(Token.BLOCK, externsRoot, jsRoot);\n        externAndJsRoot.setIsSyntheticBlock(true);\n        return externAndJsRoot;\n    } finally {\n        stopTracer(tracer, \"parseInputs\");\n    }\n}",
      "path": "src/com/google/javascript/jscomp/Compiler.java",
      "functionStartLine": 976,
      "functionName": "parseInputs",
      "functionAnnotation": "",
      "functionDoc": "Parses the externs and main inputs.\n\n@return A synthetic root node whose two children are the externs root\n    and the main root\n",
      "diff": "@@ -1,52 +1,52 @@\n Node parseInputs() {\n-    boolean devMode \u003d options_.devMode !\u003d DevMode.OFF;\n+    boolean devMode \u003d options.devMode !\u003d DevMode.OFF;\n     if (externsRoot !\u003d null) {\n         externsRoot.detachChildren();\n     }\n     if (jsRoot !\u003d null) {\n         jsRoot.detachChildren();\n     }\n     jsRoot \u003d new Node(Token.BLOCK);\n     jsRoot.setIsSyntheticBlock(true);\n-    if (options_.tracer.isOn()) {\n-        tracker \u003d new PerformanceTracker(jsRoot, options_.tracer \u003d\u003d TracerMode.ALL);\n+    if (options.tracer.isOn()) {\n+        tracker \u003d new PerformanceTracker(jsRoot, options.tracer \u003d\u003d TracerMode.ALL);\n         addChangeHandler(tracker.getCodeChangeHandler());\n     }\n     Tracer tracer \u003d newTracer(\"parseInputs\");\n     try {\n         externsRoot \u003d new Node(Token.BLOCK);\n         externsRoot.setIsSyntheticBlock(true);\n-        for (CompilerInput input : externs_) {\n+        for (CompilerInput input : externs) {\n             Node n \u003d input.getAstRoot(this);\n             if (hasErrors()) {\n                 return null;\n             }\n             externsRoot.addChildToBack(n);\n         }\n-        for (CompilerInput input : inputs_) {\n+        for (CompilerInput input : inputs) {\n             Node n \u003d input.getAstRoot(this);\n             if (hasErrors()) {\n                 return null;\n             }\n             if (n \u003d\u003d null) {\n                 continue;\n             }\n             if (devMode) {\n                 runSanityCheck();\n                 if (hasErrors()) {\n                     return null;\n                 }\n             }\n-            if (options_.sourceMapOutputPath !\u003d null || options_.nameReferenceReportPath !\u003d null) {\n+            if (options.sourceMapOutputPath !\u003d null || options.nameReferenceReportPath !\u003d null) {\n                 SourceInformationAnnotator sia \u003d new SourceInformationAnnotator(input.getName());\n                 NodeTraversal.traverse(this, n, sia);\n             }\n             jsRoot.addChildToBack(n);\n         }\n         externAndJsRoot \u003d new Node(Token.BLOCK, externsRoot, jsRoot);\n         externAndJsRoot.setIsSyntheticBlock(true);\n         return externAndJsRoot;\n     } finally {\n         stopTracer(tracer, \"parseInputs\");\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "847b296c23a63aa0a0b38cc3e63883e1688288e3": {
      "type": "Ybodychange",
      "commitMessage": "Add support for other charset types.\n\nAdd support for ES5 directives.\n\nFork unit tests, so that they run more hermetically.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@21 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/8/09, 3:50 PM",
      "commitName": "847b296c23a63aa0a0b38cc3e63883e1688288e3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "12/7/09, 1:53 PM",
      "commitNameOld": "845f5ff65858fd0d1829f3d2f16f758725e8028f",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 1.08,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "Node parseInputs() {\n    boolean devMode \u003d options_.devMode !\u003d DevMode.OFF;\n    if (externsRoot !\u003d null) {\n        externsRoot.detachChildren();\n    }\n    if (jsRoot !\u003d null) {\n        jsRoot.detachChildren();\n    }\n    jsRoot \u003d new Node(Token.BLOCK);\n    jsRoot.setIsSyntheticBlock(true);\n    if (options_.tracer.isOn()) {\n        tracker \u003d new PerformanceTracker(jsRoot, options_.tracer \u003d\u003d TracerMode.ALL);\n        addChangeHandler(tracker.getCodeChangeHandler());\n    }\n    Tracer tracer \u003d newTracer(\"parseInputs\");\n    try {\n        externsRoot \u003d new Node(Token.BLOCK);\n        externsRoot.setIsSyntheticBlock(true);\n        for (CompilerInput input : externs_) {\n            Node n \u003d input.getAstRoot(this);\n            if (hasErrors()) {\n                return null;\n            }\n            externsRoot.addChildToBack(n);\n        }\n        for (CompilerInput input : inputs_) {\n            Node n \u003d input.getAstRoot(this);\n            if (hasErrors()) {\n                return null;\n            }\n            if (n \u003d\u003d null) {\n                continue;\n            }\n            if (devMode) {\n                runSanityCheck();\n                if (hasErrors()) {\n                    return null;\n                }\n            }\n            if (options_.sourceMapOutputPath !\u003d null || options_.nameReferenceReportPath !\u003d null) {\n                SourceInformationAnnotator sia \u003d new SourceInformationAnnotator(input.getName());\n                NodeTraversal.traverse(this, n, sia);\n            }\n            jsRoot.addChildToBack(n);\n        }\n        externAndJsRoot \u003d new Node(Token.BLOCK, externsRoot, jsRoot);\n        externAndJsRoot.setIsSyntheticBlock(true);\n        return externAndJsRoot;\n    } finally {\n        stopTracer(tracer, \"parseInputs\");\n    }\n}",
      "path": "src/com/google/javascript/jscomp/Compiler.java",
      "functionStartLine": 932,
      "functionName": "parseInputs",
      "functionAnnotation": "",
      "functionDoc": "Parses the externs and main inputs.\n\n@return A synthetic root node whose two children are the externs root\n    and the main root\n",
      "diff": "@@ -1,52 +1,52 @@\n Node parseInputs() {\n     boolean devMode \u003d options_.devMode !\u003d DevMode.OFF;\n     if (externsRoot !\u003d null) {\n         externsRoot.detachChildren();\n     }\n     if (jsRoot !\u003d null) {\n         jsRoot.detachChildren();\n     }\n     jsRoot \u003d new Node(Token.BLOCK);\n     jsRoot.setIsSyntheticBlock(true);\n     if (options_.tracer.isOn()) {\n         tracker \u003d new PerformanceTracker(jsRoot, options_.tracer \u003d\u003d TracerMode.ALL);\n         addChangeHandler(tracker.getCodeChangeHandler());\n     }\n     Tracer tracer \u003d newTracer(\"parseInputs\");\n     try {\n         externsRoot \u003d new Node(Token.BLOCK);\n         externsRoot.setIsSyntheticBlock(true);\n         for (CompilerInput input : externs_) {\n             Node n \u003d input.getAstRoot(this);\n             if (hasErrors()) {\n                 return null;\n             }\n             externsRoot.addChildToBack(n);\n         }\n         for (CompilerInput input : inputs_) {\n             Node n \u003d input.getAstRoot(this);\n             if (hasErrors()) {\n                 return null;\n             }\n             if (n \u003d\u003d null) {\n                 continue;\n             }\n             if (devMode) {\n-                sanityCheck.create(this).process(null, n);\n+                runSanityCheck();\n                 if (hasErrors()) {\n                     return null;\n                 }\n             }\n             if (options_.sourceMapOutputPath !\u003d null || options_.nameReferenceReportPath !\u003d null) {\n                 SourceInformationAnnotator sia \u003d new SourceInformationAnnotator(input.getName());\n                 NodeTraversal.traverse(this, n, sia);\n             }\n             jsRoot.addChildToBack(n);\n         }\n         externAndJsRoot \u003d new Node(Token.BLOCK, externsRoot, jsRoot);\n         externAndJsRoot.setIsSyntheticBlock(true);\n         return externAndJsRoot;\n     } finally {\n         stopTracer(tracer, \"parseInputs\");\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,52 @@\n+Node parseInputs() {\n+    boolean devMode \u003d options_.devMode !\u003d DevMode.OFF;\n+    if (externsRoot !\u003d null) {\n+        externsRoot.detachChildren();\n+    }\n+    if (jsRoot !\u003d null) {\n+        jsRoot.detachChildren();\n+    }\n+    jsRoot \u003d new Node(Token.BLOCK);\n+    jsRoot.setIsSyntheticBlock(true);\n+    if (options_.tracer.isOn()) {\n+        tracker \u003d new PerformanceTracker(jsRoot, options_.tracer \u003d\u003d TracerMode.ALL);\n+        addChangeHandler(tracker.getCodeChangeHandler());\n+    }\n+    Tracer tracer \u003d newTracer(\"parseInputs\");\n+    try {\n+        externsRoot \u003d new Node(Token.BLOCK);\n+        externsRoot.setIsSyntheticBlock(true);\n+        for (CompilerInput input : externs_) {\n+            Node n \u003d input.getAstRoot(this);\n+            if (hasErrors()) {\n+                return null;\n+            }\n+            externsRoot.addChildToBack(n);\n+        }\n+        for (CompilerInput input : inputs_) {\n+            Node n \u003d input.getAstRoot(this);\n+            if (hasErrors()) {\n+                return null;\n+            }\n+            if (n \u003d\u003d null) {\n+                continue;\n+            }\n+            if (devMode) {\n+                sanityCheck.create(this).process(null, n);\n+                if (hasErrors()) {\n+                    return null;\n+                }\n+            }\n+            if (options_.sourceMapOutputPath !\u003d null || options_.nameReferenceReportPath !\u003d null) {\n+                SourceInformationAnnotator sia \u003d new SourceInformationAnnotator(input.getName());\n+                NodeTraversal.traverse(this, n, sia);\n+            }\n+            jsRoot.addChildToBack(n);\n+        }\n+        externAndJsRoot \u003d new Node(Token.BLOCK, externsRoot, jsRoot);\n+        externAndJsRoot.setIsSyntheticBlock(true);\n+        return externAndJsRoot;\n+    } finally {\n+        stopTracer(tracer, \"parseInputs\");\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "Node parseInputs() {\n    boolean devMode \u003d options_.devMode !\u003d DevMode.OFF;\n    if (externsRoot !\u003d null) {\n        externsRoot.detachChildren();\n    }\n    if (jsRoot !\u003d null) {\n        jsRoot.detachChildren();\n    }\n    jsRoot \u003d new Node(Token.BLOCK);\n    jsRoot.setIsSyntheticBlock(true);\n    if (options_.tracer.isOn()) {\n        tracker \u003d new PerformanceTracker(jsRoot, options_.tracer \u003d\u003d TracerMode.ALL);\n        addChangeHandler(tracker.getCodeChangeHandler());\n    }\n    Tracer tracer \u003d newTracer(\"parseInputs\");\n    try {\n        externsRoot \u003d new Node(Token.BLOCK);\n        externsRoot.setIsSyntheticBlock(true);\n        for (CompilerInput input : externs_) {\n            Node n \u003d input.getAstRoot(this);\n            if (hasErrors()) {\n                return null;\n            }\n            externsRoot.addChildToBack(n);\n        }\n        for (CompilerInput input : inputs_) {\n            Node n \u003d input.getAstRoot(this);\n            if (hasErrors()) {\n                return null;\n            }\n            if (n \u003d\u003d null) {\n                continue;\n            }\n            if (devMode) {\n                sanityCheck.create(this).process(null, n);\n                if (hasErrors()) {\n                    return null;\n                }\n            }\n            if (options_.sourceMapOutputPath !\u003d null || options_.nameReferenceReportPath !\u003d null) {\n                SourceInformationAnnotator sia \u003d new SourceInformationAnnotator(input.getName());\n                NodeTraversal.traverse(this, n, sia);\n            }\n            jsRoot.addChildToBack(n);\n        }\n        externAndJsRoot \u003d new Node(Token.BLOCK, externsRoot, jsRoot);\n        externAndJsRoot.setIsSyntheticBlock(true);\n        return externAndJsRoot;\n    } finally {\n        stopTracer(tracer, \"parseInputs\");\n    }\n}",
      "path": "src/com/google/javascript/jscomp/Compiler.java",
      "functionStartLine": 972,
      "functionName": "parseInputs",
      "functionAnnotation": "",
      "functionDoc": "Parses the externs and main inputs.\n\n@return A synthetic root node whose two children are the externs root\n    and the main root\n"
    }
  }
}