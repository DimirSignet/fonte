{
  "origin": "codeshovel",
  "repositoryName": "Closure-99b",
  "repositoryPath": "/tmp/Closure-99b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CheckGlobalThis.java",
  "functionName": "shouldTraverse",
  "functionId": "shouldTraverse___t-NodeTraversal__n-Node__parent-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/CheckGlobalThis.java",
  "functionAnnotation": "",
  "functionDoc": "Since this pass reports errors only when a global {@code this} keyword\nis encountered, there is no reason to traverse non global contexts.\n",
  "functionStartLine": 84,
  "functionEndLine": 138,
  "numCommitsSeen": 4,
  "timeTaken": 165,
  "changeHistory": [
    "ccbbcbf71b1cb8771c9cdad1d28b367ce6ea0da2",
    "6d00ac1a68612aade8a19d7ecc9b180f00ae5234",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "ccbbcbf71b1cb8771c9cdad1d28b367ce6ea0da2": "Ybodychange",
    "6d00ac1a68612aade8a19d7ecc9b180f00ae5234": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ccbbcbf71b1cb8771c9cdad1d28b367ce6ea0da2": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/06/03 by nicksantos\n\n        Also use the @override tag as a signal that a global this is safe.\n        see the test case for an example.\n\n        R\u003dacleung\n        DELTA\u003d10  (8 added, 0 deleted, 2 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d18001\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@238 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/3/10, 5:31 PM",
      "commitName": "ccbbcbf71b1cb8771c9cdad1d28b367ce6ea0da2",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "5/27/10, 10:18 PM",
      "commitNameOld": "6d00ac1a68612aade8a19d7ecc9b180f00ae5234",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 6.8,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() \u003d\u003d Token.FUNCTION) {\n        JSDocInfo jsDoc \u003d getFunctionJsDocInfo(n);\n        if (jsDoc !\u003d null \u0026\u0026 (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n            return false;\n        }\n        int pType \u003d parent.getType();\n        if (!(pType \u003d\u003d Token.BLOCK || pType \u003d\u003d Token.SCRIPT || pType \u003d\u003d Token.NAME || pType \u003d\u003d Token.ASSIGN)) {\n            return false;\n        }\n    }\n    if (parent !\u003d null \u0026\u0026 parent.getType() \u003d\u003d Token.ASSIGN) {\n        Node lhs \u003d parent.getFirstChild();\n        Node rhs \u003d lhs.getNext();\n        if (n \u003d\u003d lhs) {\n            if (assignLhsChild \u003d\u003d null) {\n                assignLhsChild \u003d lhs;\n            }\n        } else {\n            if (lhs.getType() \u003d\u003d Token.GETPROP) {\n                if (lhs.getLastChild().getString().equals(\"prototype\")) {\n                    return false;\n                }\n                String leftName \u003d lhs.getQualifiedName();\n                if (leftName !\u003d null \u0026\u0026 leftName.contains(\".prototype.\")) {\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/jscomp/CheckGlobalThis.java",
      "functionStartLine": 84,
      "functionName": "shouldTraverse",
      "functionAnnotation": "",
      "functionDoc": "Since this pass reports errors only when a global {@code this} keyword\nis encountered, there is no reason to traverse non global contexts.\n",
      "diff": "@@ -1,32 +1,32 @@\n public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() \u003d\u003d Token.FUNCTION) {\n         JSDocInfo jsDoc \u003d getFunctionJsDocInfo(n);\n-        if (jsDoc !\u003d null \u0026\u0026 (jsDoc.isConstructor() || jsDoc.hasThisType())) {\n+        if (jsDoc !\u003d null \u0026\u0026 (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n             return false;\n         }\n         int pType \u003d parent.getType();\n         if (!(pType \u003d\u003d Token.BLOCK || pType \u003d\u003d Token.SCRIPT || pType \u003d\u003d Token.NAME || pType \u003d\u003d Token.ASSIGN)) {\n             return false;\n         }\n     }\n     if (parent !\u003d null \u0026\u0026 parent.getType() \u003d\u003d Token.ASSIGN) {\n         Node lhs \u003d parent.getFirstChild();\n         Node rhs \u003d lhs.getNext();\n         if (n \u003d\u003d lhs) {\n             if (assignLhsChild \u003d\u003d null) {\n                 assignLhsChild \u003d lhs;\n             }\n         } else {\n             if (lhs.getType() \u003d\u003d Token.GETPROP) {\n                 if (lhs.getLastChild().getString().equals(\"prototype\")) {\n                     return false;\n                 }\n                 String leftName \u003d lhs.getQualifiedName();\n                 if (leftName !\u003d null \u0026\u0026 leftName.contains(\".prototype.\")) {\n                     return false;\n                 }\n             }\n         }\n     }\n     return true;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6d00ac1a68612aade8a19d7ecc9b180f00ae5234": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/05/27 by johnlenz\n\n        Cleanup some import, unused code, and javadoc warnings.\n\n        R\u003dacleung\n        DELTA\u003d167  (3 added, 119 deleted, 45 changed)\n\nChange on 2010/05/27 by nicksantos\n\n        Use a new heuristic for CheckGlobalThis.\n        Fixes closure-compiler issue 144.\n        i *think* this is the right behavior, because it more closely\n        maps to how we infer \"this\" types in type-checking, but there\n        may be cases i haven\u0027t thought of.\n\n        R\u003djohnlenz,acleung\n        DELTA\u003d57  (51 added, 0 deleted, 6 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d14003\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@234 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/27/10, 10:18 PM",
      "commitName": "6d00ac1a68612aade8a19d7ecc9b180f00ae5234",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "3/29/10, 7:04 AM",
      "commitNameOld": "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 59.63,
      "commitsBetweenForRepo": 61,
      "commitsBetweenForFile": 1,
      "actualSource": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() \u003d\u003d Token.FUNCTION) {\n        JSDocInfo jsDoc \u003d getFunctionJsDocInfo(n);\n        if (jsDoc !\u003d null \u0026\u0026 (jsDoc.isConstructor() || jsDoc.hasThisType())) {\n            return false;\n        }\n        int pType \u003d parent.getType();\n        if (!(pType \u003d\u003d Token.BLOCK || pType \u003d\u003d Token.SCRIPT || pType \u003d\u003d Token.NAME || pType \u003d\u003d Token.ASSIGN)) {\n            return false;\n        }\n    }\n    if (parent !\u003d null \u0026\u0026 parent.getType() \u003d\u003d Token.ASSIGN) {\n        Node lhs \u003d parent.getFirstChild();\n        Node rhs \u003d lhs.getNext();\n        if (n \u003d\u003d lhs) {\n            if (assignLhsChild \u003d\u003d null) {\n                assignLhsChild \u003d lhs;\n            }\n        } else {\n            if (lhs.getType() \u003d\u003d Token.GETPROP) {\n                if (lhs.getLastChild().getString().equals(\"prototype\")) {\n                    return false;\n                }\n                String leftName \u003d lhs.getQualifiedName();\n                if (leftName !\u003d null \u0026\u0026 leftName.contains(\".prototype.\")) {\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/jscomp/CheckGlobalThis.java",
      "functionStartLine": 84,
      "functionName": "shouldTraverse",
      "functionAnnotation": "",
      "functionDoc": "Since this pass reports errors only when a global {@code this} keyword\nis encountered, there is no reason to traverse non global contexts.\n",
      "diff": "@@ -1,28 +1,32 @@\n public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() \u003d\u003d Token.FUNCTION) {\n         JSDocInfo jsDoc \u003d getFunctionJsDocInfo(n);\n         if (jsDoc !\u003d null \u0026\u0026 (jsDoc.isConstructor() || jsDoc.hasThisType())) {\n             return false;\n         }\n+        int pType \u003d parent.getType();\n+        if (!(pType \u003d\u003d Token.BLOCK || pType \u003d\u003d Token.SCRIPT || pType \u003d\u003d Token.NAME || pType \u003d\u003d Token.ASSIGN)) {\n+            return false;\n+        }\n     }\n     if (parent !\u003d null \u0026\u0026 parent.getType() \u003d\u003d Token.ASSIGN) {\n         Node lhs \u003d parent.getFirstChild();\n         Node rhs \u003d lhs.getNext();\n         if (n \u003d\u003d lhs) {\n             if (assignLhsChild \u003d\u003d null) {\n                 assignLhsChild \u003d lhs;\n             }\n         } else {\n             if (lhs.getType() \u003d\u003d Token.GETPROP) {\n                 if (lhs.getLastChild().getString().equals(\"prototype\")) {\n                     return false;\n                 }\n                 String leftName \u003d lhs.getQualifiedName();\n                 if (leftName !\u003d null \u0026\u0026 leftName.contains(\".prototype.\")) {\n                     return false;\n                 }\n             }\n         }\n     }\n     return true;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,28 @@\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+    if (n.getType() \u003d\u003d Token.FUNCTION) {\n+        JSDocInfo jsDoc \u003d getFunctionJsDocInfo(n);\n+        if (jsDoc !\u003d null \u0026\u0026 (jsDoc.isConstructor() || jsDoc.hasThisType())) {\n+            return false;\n+        }\n+    }\n+    if (parent !\u003d null \u0026\u0026 parent.getType() \u003d\u003d Token.ASSIGN) {\n+        Node lhs \u003d parent.getFirstChild();\n+        Node rhs \u003d lhs.getNext();\n+        if (n \u003d\u003d lhs) {\n+            if (assignLhsChild \u003d\u003d null) {\n+                assignLhsChild \u003d lhs;\n+            }\n+        } else {\n+            if (lhs.getType() \u003d\u003d Token.GETPROP) {\n+                if (lhs.getLastChild().getString().equals(\"prototype\")) {\n+                    return false;\n+                }\n+                String leftName \u003d lhs.getQualifiedName();\n+                if (leftName !\u003d null \u0026\u0026 leftName.contains(\".prototype.\")) {\n+                    return false;\n+                }\n+            }\n+        }\n+    }\n+    return true;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() \u003d\u003d Token.FUNCTION) {\n        JSDocInfo jsDoc \u003d getFunctionJsDocInfo(n);\n        if (jsDoc !\u003d null \u0026\u0026 (jsDoc.isConstructor() || jsDoc.hasThisType())) {\n            return false;\n        }\n    }\n    if (parent !\u003d null \u0026\u0026 parent.getType() \u003d\u003d Token.ASSIGN) {\n        Node lhs \u003d parent.getFirstChild();\n        Node rhs \u003d lhs.getNext();\n        if (n \u003d\u003d lhs) {\n            if (assignLhsChild \u003d\u003d null) {\n                assignLhsChild \u003d lhs;\n            }\n        } else {\n            if (lhs.getType() \u003d\u003d Token.GETPROP) {\n                if (lhs.getLastChild().getString().equals(\"prototype\")) {\n                    return false;\n                }\n                String leftName \u003d lhs.getQualifiedName();\n                if (leftName !\u003d null \u0026\u0026 leftName.contains(\".prototype.\")) {\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/jscomp/CheckGlobalThis.java",
      "functionStartLine": 82,
      "functionName": "shouldTraverse",
      "functionAnnotation": "",
      "functionDoc": "Since this pass reports errors only when a global {@code this} keyword\nis encountered, there is no reason to traverse non global contexts.\n"
    }
  }
}