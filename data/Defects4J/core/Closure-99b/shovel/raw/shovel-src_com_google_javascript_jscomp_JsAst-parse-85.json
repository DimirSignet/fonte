{
  "origin": "codeshovel",
  "repositoryName": "Closure-99b",
  "repositoryPath": "/tmp/Closure-99b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JsAst.java",
  "functionName": "parse",
  "functionId": "parse___compiler-AbstractCompiler__sourceName-String__sourceStr-String",
  "sourceFilePath": "src/com/google/javascript/jscomp/JsAst.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 85,
  "functionEndLine": 107,
  "numCommitsSeen": 5,
  "timeTaken": 216,
  "changeHistory": [
    "9a1ddf5f982e54ecbc3e028dfa84ef9bd07a8044",
    "b8c52bf5e76948ee8d561fa55a36cc6c9f5d0c68",
    "168bc14ff5e9e664863c3b1146f2a5b7a30ffb42",
    "3924ff1e4a236d68a0b5448d185537d90ca04419",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "9a1ddf5f982e54ecbc3e028dfa84ef9bd07a8044": "Ybodychange",
    "b8c52bf5e76948ee8d561fa55a36cc6c9f5d0c68": "Ybodychange",
    "168bc14ff5e9e664863c3b1146f2a5b7a30ffb42": "Ybodychange",
    "3924ff1e4a236d68a0b5448d185537d90ca04419": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9a1ddf5f982e54ecbc3e028dfa84ef9bd07a8044": {
      "type": "Ybodychange",
      "commitMessage": "Merge NodeTypeNormalizer and CodingConventionAnnotator into\na single pass. (Nick)\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@116 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/24/10, 8:37 PM",
      "commitName": "9a1ddf5f982e54ecbc3e028dfa84ef9bd07a8044",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "2/12/10, 11:40 AM",
      "commitNameOld": "b8c52bf5e76948ee8d561fa55a36cc6c9f5d0c68",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 12.37,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "actualSource": "private void parse(AbstractCompiler compiler, String sourceName, String sourceStr) {\n    try {\n        logger_.fine(\"Parsing: \" + sourceName);\n        root \u003d ParserRunner.parse(sourceName, sourceStr, compiler.getParserConfig(), compiler.getDefaultErrorReporter(), logger_);\n    } catch (IOException e) {\n        compiler.report(JSError.make(AbstractCompiler.READ_ERROR, sourceName));\n    }\n    if (root \u003d\u003d null || compiler.hasHaltingErrors()) {\n        root \u003d new Node(Token.BLOCK);\n    } else {\n        compiler.prepareAst(root);\n    }\n    root.putProp(Node.SOURCENAME_PROP, sourceName);\n}",
      "path": "src/com/google/javascript/jscomp/JsAst.java",
      "functionStartLine": 85,
      "functionName": "parse",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,15 +1,14 @@\n private void parse(AbstractCompiler compiler, String sourceName, String sourceStr) {\n     try {\n         logger_.fine(\"Parsing: \" + sourceName);\n         root \u003d ParserRunner.parse(sourceName, sourceStr, compiler.getParserConfig(), compiler.getDefaultErrorReporter(), logger_);\n     } catch (IOException e) {\n         compiler.report(JSError.make(AbstractCompiler.READ_ERROR, sourceName));\n     }\n     if (root \u003d\u003d null || compiler.hasHaltingErrors()) {\n         root \u003d new Node(Token.BLOCK);\n     } else {\n-        compiler.normalizeNodeTypes(root);\n-        compiler.annotateCodingConvention(root);\n+        compiler.prepareAst(root);\n     }\n     root.putProp(Node.SOURCENAME_PROP, sourceName);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b8c52bf5e76948ee8d561fa55a36cc6c9f5d0c68": {
      "type": "Ybodychange",
      "commitMessage": "Fix a null pointer exception in FunctionType.\n\nFix a bug in @export generation.\n\nRemove references to StringUtil.\n\nOnly create one ParserConfig per compilation process.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@104 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/12/10, 11:40 AM",
      "commitName": "b8c52bf5e76948ee8d561fa55a36cc6c9f5d0c68",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "12/11/09, 3:29 PM",
      "commitNameOld": "168bc14ff5e9e664863c3b1146f2a5b7a30ffb42",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 62.84,
      "commitsBetweenForRepo": 56,
      "commitsBetweenForFile": 1,
      "actualSource": "private void parse(AbstractCompiler compiler, String sourceName, String sourceStr) {\n    try {\n        logger_.fine(\"Parsing: \" + sourceName);\n        root \u003d ParserRunner.parse(sourceName, sourceStr, compiler.getParserConfig(), compiler.getDefaultErrorReporter(), logger_);\n    } catch (IOException e) {\n        compiler.report(JSError.make(AbstractCompiler.READ_ERROR, sourceName));\n    }\n    if (root \u003d\u003d null || compiler.hasHaltingErrors()) {\n        root \u003d new Node(Token.BLOCK);\n    } else {\n        compiler.normalizeNodeTypes(root);\n        compiler.annotateCodingConvention(root);\n    }\n    root.putProp(Node.SOURCENAME_PROP, sourceName);\n}",
      "path": "src/com/google/javascript/jscomp/JsAst.java",
      "functionStartLine": 85,
      "functionName": "parse",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,15 +1,15 @@\n private void parse(AbstractCompiler compiler, String sourceName, String sourceStr) {\n     try {\n         logger_.fine(\"Parsing: \" + sourceName);\n-        root \u003d ParserRunner.parse(sourceName, sourceStr, compiler.isIdeMode(), compiler.getTypeRegistry(), compiler.getDefaultErrorReporter(), logger_);\n+        root \u003d ParserRunner.parse(sourceName, sourceStr, compiler.getParserConfig(), compiler.getDefaultErrorReporter(), logger_);\n     } catch (IOException e) {\n         compiler.report(JSError.make(AbstractCompiler.READ_ERROR, sourceName));\n     }\n     if (root \u003d\u003d null || compiler.hasHaltingErrors()) {\n         root \u003d new Node(Token.BLOCK);\n     } else {\n         compiler.normalizeNodeTypes(root);\n         compiler.annotateCodingConvention(root);\n     }\n     root.putProp(Node.SOURCENAME_PROP, sourceName);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "168bc14ff5e9e664863c3b1146f2a5b7a30ffb42": {
      "type": "Ybodychange",
      "commitMessage": "Add a pass for collecting symbols exported like window[\u0027x\u0027] \u003d ...\n\nFix for issue #70.\n\nAssorted minor bug fixes.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@31 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/11/09, 3:29 PM",
      "commitName": "168bc14ff5e9e664863c3b1146f2a5b7a30ffb42",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "12/2/09, 5:12 PM",
      "commitNameOld": "3924ff1e4a236d68a0b5448d185537d90ca04419",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 8.93,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "private void parse(AbstractCompiler compiler, String sourceName, String sourceStr) {\n    try {\n        logger_.fine(\"Parsing: \" + sourceName);\n        root \u003d ParserRunner.parse(sourceName, sourceStr, compiler.isIdeMode(), compiler.getTypeRegistry(), compiler.getDefaultErrorReporter(), logger_);\n    } catch (IOException e) {\n        compiler.report(JSError.make(AbstractCompiler.READ_ERROR, sourceName));\n    }\n    if (root \u003d\u003d null || compiler.hasHaltingErrors()) {\n        root \u003d new Node(Token.BLOCK);\n    } else {\n        compiler.normalizeNodeTypes(root);\n        compiler.annotateCodingConvention(root);\n    }\n    root.putProp(Node.SOURCENAME_PROP, sourceName);\n}",
      "path": "src/com/google/javascript/jscomp/JsAst.java",
      "functionStartLine": 85,
      "functionName": "parse",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,15 +1,15 @@\n private void parse(AbstractCompiler compiler, String sourceName, String sourceStr) {\n     try {\n         logger_.fine(\"Parsing: \" + sourceName);\n         root \u003d ParserRunner.parse(sourceName, sourceStr, compiler.isIdeMode(), compiler.getTypeRegistry(), compiler.getDefaultErrorReporter(), logger_);\n     } catch (IOException e) {\n         compiler.report(JSError.make(AbstractCompiler.READ_ERROR, sourceName));\n     }\n-    if (root \u003d\u003d null) {\n+    if (root \u003d\u003d null || compiler.hasHaltingErrors()) {\n         root \u003d new Node(Token.BLOCK);\n     } else {\n         compiler.normalizeNodeTypes(root);\n         compiler.annotateCodingConvention(root);\n     }\n     root.putProp(Node.SOURCENAME_PROP, sourceName);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3924ff1e4a236d68a0b5448d185537d90ca04419": {
      "type": "Ybodychange",
      "commitMessage": "Warn about all with statements, unless there\u0027s an explicit\n/** @suppress {with} */ tag\n\nRefactor a bunch of stuff into PassConfigs\n\nAdd a bunch of parser tests.\n\nUp-integrate John and Norris\u0027 latest changes to Rhino at trunk\n\nMinor type-tightening bug fixes.\n\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@18 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/2/09, 5:12 PM",
      "commitName": "3924ff1e4a236d68a0b5448d185537d90ca04419",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/3/09, 3:51 PM",
      "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 29.06,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "actualSource": "private void parse(AbstractCompiler compiler, String sourceName, String sourceStr) {\n    try {\n        logger_.fine(\"Parsing: \" + sourceName);\n        root \u003d ParserRunner.parse(sourceName, sourceStr, compiler.isIdeMode(), compiler.getTypeRegistry(), compiler.getDefaultErrorReporter(), logger_);\n    } catch (IOException e) {\n        compiler.report(JSError.make(AbstractCompiler.READ_ERROR, sourceName));\n    }\n    if (root \u003d\u003d null) {\n        root \u003d new Node(Token.BLOCK);\n    } else {\n        compiler.normalizeNodeTypes(root);\n        compiler.annotateCodingConvention(root);\n    }\n    root.putProp(Node.SOURCENAME_PROP, sourceName);\n}",
      "path": "src/com/google/javascript/jscomp/JsAst.java",
      "functionStartLine": 85,
      "functionName": "parse",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,15 +1,15 @@\n private void parse(AbstractCompiler compiler, String sourceName, String sourceStr) {\n     try {\n         logger_.fine(\"Parsing: \" + sourceName);\n         root \u003d ParserRunner.parse(sourceName, sourceStr, compiler.isIdeMode(), compiler.getTypeRegistry(), compiler.getDefaultErrorReporter(), logger_);\n     } catch (IOException e) {\n-        compiler.report(JSError.make(Compiler.READ_ERROR, sourceName));\n+        compiler.report(JSError.make(AbstractCompiler.READ_ERROR, sourceName));\n     }\n     if (root \u003d\u003d null) {\n         root \u003d new Node(Token.BLOCK);\n     } else {\n         compiler.normalizeNodeTypes(root);\n         compiler.annotateCodingConvention(root);\n     }\n     root.putProp(Node.SOURCENAME_PROP, sourceName);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,15 @@\n+private void parse(AbstractCompiler compiler, String sourceName, String sourceStr) {\n+    try {\n+        logger_.fine(\"Parsing: \" + sourceName);\n+        root \u003d ParserRunner.parse(sourceName, sourceStr, compiler.isIdeMode(), compiler.getTypeRegistry(), compiler.getDefaultErrorReporter(), logger_);\n+    } catch (IOException e) {\n+        compiler.report(JSError.make(Compiler.READ_ERROR, sourceName));\n+    }\n+    if (root \u003d\u003d null) {\n+        root \u003d new Node(Token.BLOCK);\n+    } else {\n+        compiler.normalizeNodeTypes(root);\n+        compiler.annotateCodingConvention(root);\n+    }\n+    root.putProp(Node.SOURCENAME_PROP, sourceName);\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void parse(AbstractCompiler compiler, String sourceName, String sourceStr) {\n    try {\n        logger_.fine(\"Parsing: \" + sourceName);\n        root \u003d ParserRunner.parse(sourceName, sourceStr, compiler.isIdeMode(), compiler.getTypeRegistry(), compiler.getDefaultErrorReporter(), logger_);\n    } catch (IOException e) {\n        compiler.report(JSError.make(Compiler.READ_ERROR, sourceName));\n    }\n    if (root \u003d\u003d null) {\n        root \u003d new Node(Token.BLOCK);\n    } else {\n        compiler.normalizeNodeTypes(root);\n        compiler.annotateCodingConvention(root);\n    }\n    root.putProp(Node.SOURCENAME_PROP, sourceName);\n}",
      "path": "src/com/google/javascript/jscomp/JsAst.java",
      "functionStartLine": 85,
      "functionName": "parse",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}