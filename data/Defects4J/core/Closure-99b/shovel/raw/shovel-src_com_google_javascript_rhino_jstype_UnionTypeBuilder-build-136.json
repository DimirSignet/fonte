{
  "origin": "codeshovel",
  "repositoryName": "Closure-99b",
  "repositoryPath": "/tmp/Closure-99b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "UnionTypeBuilder.java",
  "functionName": "build",
  "functionId": "build",
  "sourceFilePath": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
  "functionAnnotation": "",
  "functionDoc": "Creates a union.\n\n@return A UnionType if it has two or more alternates, the\n   only alternate if it has one and otherwise {@code NO_TYPE}.\n",
  "functionStartLine": 136,
  "functionEndLine": 163,
  "numCommitsSeen": 3,
  "timeTaken": 186,
  "changeHistory": [
    "7eaa0d8eca2549742649af34671eaf3da83b5c08",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "7eaa0d8eca2549742649af34671eaf3da83b5c08": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7eaa0d8eca2549742649af34671eaf3da83b5c08": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/04/06 by john\n\n        Update RemoveConstantExpressions to handle removing expressions whose\n        roots are calls to functions without side-effects.\n\n        R\u003dantonio\n        DELTA\u003d19  (18 added, 0 deleted, 1 changed)\n\nChange on 2010/04/06 by john\n\n        Cleanup NodeUtil self references.\n\n        R\u003drobert\n        DELTA\u003d12  (0 added, 0 deleted, 12 changed)\n\nChange on 2010/04/07 by john\n\n        Make things easier for shell escaping, accept both single and double\n        quotes for strings in --define flags.\n        Fixes issue 139.\n\n        R\u003drobert\n        DELTA\u003d18  (14 added, 0 deleted, 4 changed)\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dwdwbvk\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@173 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/7/10, 11:34 AM",
      "commitName": "7eaa0d8eca2549742649af34671eaf3da83b5c08",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "3/11/10, 9:31 PM",
      "commitNameOld": "7bfdbd9164601af44d17edd51be829fde2cc51aa",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 26.54,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "actualSource": "JSType build() {\n    if (result \u003d\u003d null) {\n        if (isAllType) {\n            result \u003d registry.getNativeType(ALL_TYPE);\n        } else if (isNativeUnknownType) {\n            if (areAllUnknownsChecked) {\n                result \u003d registry.getNativeType(CHECKED_UNKNOWN_TYPE);\n            } else {\n                result \u003d registry.getNativeType(UNKNOWN_TYPE);\n            }\n        } else {\n            Set\u003cJSType\u003e alternateSet \u003d ImmutableSet.copyOf(alternates);\n            int size \u003d alternateSet.size();\n            if (size \u003e MAX_UNION_SIZE) {\n                result \u003d registry.getNativeType(UNKNOWN_TYPE);\n            } else {\n                if (size \u003e 1) {\n                    result \u003d new UnionType(registry, alternateSet);\n                } else if (size \u003d\u003d 1) {\n                    result \u003d alternates.iterator().next();\n                } else {\n                    result \u003d registry.getNativeType(NO_TYPE);\n                }\n            }\n        }\n    }\n    return result;\n}",
      "path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
      "functionStartLine": 136,
      "functionName": "build",
      "functionAnnotation": "",
      "functionDoc": "Creates a union.\n\n@return A UnionType if it has two or more alternates, the\n   only alternate if it has one and otherwise {@code NO_TYPE}.\n",
      "diff": "@@ -1,28 +1,28 @@\n JSType build() {\n     if (result \u003d\u003d null) {\n         if (isAllType) {\n             result \u003d registry.getNativeType(ALL_TYPE);\n         } else if (isNativeUnknownType) {\n             if (areAllUnknownsChecked) {\n                 result \u003d registry.getNativeType(CHECKED_UNKNOWN_TYPE);\n             } else {\n                 result \u003d registry.getNativeType(UNKNOWN_TYPE);\n             }\n         } else {\n-            Set\u003cJSType\u003e alternateSet \u003d Sets.newUnmodifiableHashSet(alternates);\n+            Set\u003cJSType\u003e alternateSet \u003d ImmutableSet.copyOf(alternates);\n             int size \u003d alternateSet.size();\n             if (size \u003e MAX_UNION_SIZE) {\n                 result \u003d registry.getNativeType(UNKNOWN_TYPE);\n             } else {\n                 if (size \u003e 1) {\n                     result \u003d new UnionType(registry, alternateSet);\n                 } else if (size \u003d\u003d 1) {\n                     result \u003d alternates.iterator().next();\n                 } else {\n                     result \u003d registry.getNativeType(NO_TYPE);\n                 }\n             }\n         }\n     }\n     return result;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,28 @@\n+JSType build() {\n+    if (result \u003d\u003d null) {\n+        if (isAllType) {\n+            result \u003d registry.getNativeType(ALL_TYPE);\n+        } else if (isNativeUnknownType) {\n+            if (areAllUnknownsChecked) {\n+                result \u003d registry.getNativeType(CHECKED_UNKNOWN_TYPE);\n+            } else {\n+                result \u003d registry.getNativeType(UNKNOWN_TYPE);\n+            }\n+        } else {\n+            Set\u003cJSType\u003e alternateSet \u003d Sets.newUnmodifiableHashSet(alternates);\n+            int size \u003d alternateSet.size();\n+            if (size \u003e MAX_UNION_SIZE) {\n+                result \u003d registry.getNativeType(UNKNOWN_TYPE);\n+            } else {\n+                if (size \u003e 1) {\n+                    result \u003d new UnionType(registry, alternateSet);\n+                } else if (size \u003d\u003d 1) {\n+                    result \u003d alternates.iterator().next();\n+                } else {\n+                    result \u003d registry.getNativeType(NO_TYPE);\n+                }\n+            }\n+        }\n+    }\n+    return result;\n+}\n\\ No newline at end of file\n",
      "actualSource": "JSType build() {\n    if (result \u003d\u003d null) {\n        if (isAllType) {\n            result \u003d registry.getNativeType(ALL_TYPE);\n        } else if (isNativeUnknownType) {\n            if (areAllUnknownsChecked) {\n                result \u003d registry.getNativeType(CHECKED_UNKNOWN_TYPE);\n            } else {\n                result \u003d registry.getNativeType(UNKNOWN_TYPE);\n            }\n        } else {\n            Set\u003cJSType\u003e alternateSet \u003d Sets.newUnmodifiableHashSet(alternates);\n            int size \u003d alternateSet.size();\n            if (size \u003e MAX_UNION_SIZE) {\n                result \u003d registry.getNativeType(UNKNOWN_TYPE);\n            } else {\n                if (size \u003e 1) {\n                    result \u003d new UnionType(registry, alternateSet);\n                } else if (size \u003d\u003d 1) {\n                    result \u003d alternates.iterator().next();\n                } else {\n                    result \u003d registry.getNativeType(NO_TYPE);\n                }\n            }\n        }\n    }\n    return result;\n}",
      "path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
      "functionStartLine": 136,
      "functionName": "build",
      "functionAnnotation": "",
      "functionDoc": "Creates a union.\n\n@return A UnionType if it has two or more alternates, the\n   only alternate if it has one and otherwise {@code NO_TYPE}.\n"
    }
  }
}