{
  "origin": "codeshovel",
  "repositoryName": "Closure-99b",
  "repositoryPath": "/tmp/Closure-99b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "IRFactory.java",
  "functionName": "transformTree",
  "functionId": "transformTree___node-AstRoot__sourceString-String__config-Config__errorReporter-ErrorReporter",
  "sourceFilePath": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 121,
  "functionEndLine": 167,
  "numCommitsSeen": 12,
  "timeTaken": 1290,
  "changeHistory": [
    "7287c0ac1d7fb09e5b52a0bf68caf79bfcb09d87",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "7287c0ac1d7fb09e5b52a0bf68caf79bfcb09d87": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7287c0ac1d7fb09e5b52a0bf68caf79bfcb09d87": {
      "type": "Ybodychange",
      "commitMessage": "Speed up parsing a bit by refactoring how we pull jsdoc comments into\nthe AST.\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@101 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/10/10, 3:02 PM",
      "commitName": "7287c0ac1d7fb09e5b52a0bf68caf79bfcb09d87",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "12/8/09, 3:50 PM",
      "commitNameOld": "847b296c23a63aa0a0b38cc3e63883e1688288e3",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 63.97,
      "commitsBetweenForRepo": 56,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Node transformTree(AstRoot node, String sourceString, Config config, ErrorReporter errorReporter) {\n    IRFactory irFactory \u003d new IRFactory(sourceString, node.getSourceName(), config, errorReporter);\n    Node irNode \u003d irFactory.transform(node);\n    Node.FileLevelJsDocBuilder fileLevelJsDocBuilder \u003d irNode.getJsDocBuilderForNode();\n    JSDocInfo fileOverviewInfo \u003d null;\n    if (node.getComments() !\u003d null) {\n        for (Comment comment : node.getComments()) {\n            if (comment.getCommentType() \u003d\u003d JSDOC) {\n                JsDocInfoParser jsDocParser \u003d irFactory.createJsDocInfoParser(comment.getValue(), comment.getLineno(), comment.getAbsolutePosition(), fileLevelJsDocBuilder, fileOverviewInfo);\n                if (jsDocParser.getFileOverviewJSDocInfo() !\u003d fileOverviewInfo) {\n                    fileOverviewInfo \u003d jsDocParser.getFileOverviewJSDocInfo();\n                } else {\n                    JSDocInfo info \u003d jsDocParser.retrieveAndResetParsedJSDocInfo();\n                    if (info !\u003d null) {\n                        irFactory.attachJsDoc(comment, info);\n                    }\n                }\n            }\n        }\n        if (fileOverviewInfo !\u003d null) {\n            if ((irNode.getJSDocInfo() !\u003d null) \u0026\u0026 (irNode.getJSDocInfo().getLicense() !\u003d null)) {\n                fileOverviewInfo.setLicense(irNode.getJSDocInfo().getLicense());\n            }\n            irNode.setJSDocInfo(fileOverviewInfo);\n        }\n    }\n    return irNode;\n}",
      "path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
      "functionStartLine": 129,
      "functionName": "transformTree",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,26 +1,28 @@\n public static Node transformTree(AstRoot node, String sourceString, Config config, ErrorReporter errorReporter) {\n     IRFactory irFactory \u003d new IRFactory(sourceString, node.getSourceName(), config, errorReporter);\n     Node irNode \u003d irFactory.transform(node);\n     Node.FileLevelJsDocBuilder fileLevelJsDocBuilder \u003d irNode.getJsDocBuilderForNode();\n     JSDocInfo fileOverviewInfo \u003d null;\n     if (node.getComments() !\u003d null) {\n         for (Comment comment : node.getComments()) {\n-            if (comment.getCommentType() \u003d\u003d JSDOC \u0026\u0026 (comment.getValue().contains(\"@fileoverview\") || comment.getValue().contains(\"@preserve\") || comment.getValue().contains(\"@license\"))) {\n-                JSDocInfo info \u003d irFactory.parseJSDocInfo(comment.getValue(), comment.getLineno(), comment.getAbsolutePosition(), fileLevelJsDocBuilder, fileOverviewInfo);\n-                if (info !\u003d null \u0026\u0026 fileOverviewInfo \u003d\u003d null) {\n-                    fileOverviewInfo \u003d info;\n+            if (comment.getCommentType() \u003d\u003d JSDOC) {\n+                JsDocInfoParser jsDocParser \u003d irFactory.createJsDocInfoParser(comment.getValue(), comment.getLineno(), comment.getAbsolutePosition(), fileLevelJsDocBuilder, fileOverviewInfo);\n+                if (jsDocParser.getFileOverviewJSDocInfo() !\u003d fileOverviewInfo) {\n+                    fileOverviewInfo \u003d jsDocParser.getFileOverviewJSDocInfo();\n+                } else {\n+                    JSDocInfo info \u003d jsDocParser.retrieveAndResetParsedJSDocInfo();\n+                    if (info !\u003d null) {\n+                        irFactory.attachJsDoc(comment, info);\n+                    }\n                 }\n             }\n         }\n         if (fileOverviewInfo !\u003d null) {\n             if ((irNode.getJSDocInfo() !\u003d null) \u0026\u0026 (irNode.getJSDocInfo().getLicense() !\u003d null)) {\n                 fileOverviewInfo.setLicense(irNode.getJSDocInfo().getLicense());\n             }\n             irNode.setJSDocInfo(fileOverviewInfo);\n         }\n-        Comment[] comments \u003d new Comment[node.getComments().size()];\n-        comments \u003d node.getComments().toArray(comments);\n-        irFactory.parseAllJsDocInfo(irNode, comments, 0);\n     }\n     return irNode;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,26 @@\n+public static Node transformTree(AstRoot node, String sourceString, Config config, ErrorReporter errorReporter) {\n+    IRFactory irFactory \u003d new IRFactory(sourceString, node.getSourceName(), config, errorReporter);\n+    Node irNode \u003d irFactory.transform(node);\n+    Node.FileLevelJsDocBuilder fileLevelJsDocBuilder \u003d irNode.getJsDocBuilderForNode();\n+    JSDocInfo fileOverviewInfo \u003d null;\n+    if (node.getComments() !\u003d null) {\n+        for (Comment comment : node.getComments()) {\n+            if (comment.getCommentType() \u003d\u003d JSDOC \u0026\u0026 (comment.getValue().contains(\"@fileoverview\") || comment.getValue().contains(\"@preserve\") || comment.getValue().contains(\"@license\"))) {\n+                JSDocInfo info \u003d irFactory.parseJSDocInfo(comment.getValue(), comment.getLineno(), comment.getAbsolutePosition(), fileLevelJsDocBuilder, fileOverviewInfo);\n+                if (info !\u003d null \u0026\u0026 fileOverviewInfo \u003d\u003d null) {\n+                    fileOverviewInfo \u003d info;\n+                }\n+            }\n+        }\n+        if (fileOverviewInfo !\u003d null) {\n+            if ((irNode.getJSDocInfo() !\u003d null) \u0026\u0026 (irNode.getJSDocInfo().getLicense() !\u003d null)) {\n+                fileOverviewInfo.setLicense(irNode.getJSDocInfo().getLicense());\n+            }\n+            irNode.setJSDocInfo(fileOverviewInfo);\n+        }\n+        Comment[] comments \u003d new Comment[node.getComments().size()];\n+        comments \u003d node.getComments().toArray(comments);\n+        irFactory.parseAllJsDocInfo(irNode, comments, 0);\n+    }\n+    return irNode;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public static Node transformTree(AstRoot node, String sourceString, Config config, ErrorReporter errorReporter) {\n    IRFactory irFactory \u003d new IRFactory(sourceString, node.getSourceName(), config, errorReporter);\n    Node irNode \u003d irFactory.transform(node);\n    Node.FileLevelJsDocBuilder fileLevelJsDocBuilder \u003d irNode.getJsDocBuilderForNode();\n    JSDocInfo fileOverviewInfo \u003d null;\n    if (node.getComments() !\u003d null) {\n        for (Comment comment : node.getComments()) {\n            if (comment.getCommentType() \u003d\u003d JSDOC \u0026\u0026 (comment.getValue().contains(\"@fileoverview\") || comment.getValue().contains(\"@preserve\") || comment.getValue().contains(\"@license\"))) {\n                JSDocInfo info \u003d irFactory.parseJSDocInfo(comment.getValue(), comment.getLineno(), comment.getAbsolutePosition(), fileLevelJsDocBuilder, fileOverviewInfo);\n                if (info !\u003d null \u0026\u0026 fileOverviewInfo \u003d\u003d null) {\n                    fileOverviewInfo \u003d info;\n                }\n            }\n        }\n        if (fileOverviewInfo !\u003d null) {\n            if ((irNode.getJSDocInfo() !\u003d null) \u0026\u0026 (irNode.getJSDocInfo().getLicense() !\u003d null)) {\n                fileOverviewInfo.setLicense(irNode.getJSDocInfo().getLicense());\n            }\n            irNode.setJSDocInfo(fileOverviewInfo);\n        }\n        Comment[] comments \u003d new Comment[node.getComments().size()];\n        comments \u003d node.getComments().toArray(comments);\n        irFactory.parseAllJsDocInfo(irNode, comments, 0);\n    }\n    return irNode;\n}",
      "path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
      "functionStartLine": 106,
      "functionName": "transformTree",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}