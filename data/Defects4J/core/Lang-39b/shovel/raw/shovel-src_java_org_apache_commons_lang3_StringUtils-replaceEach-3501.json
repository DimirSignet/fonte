{
  "origin": "codeshovel",
  "repositoryName": "Lang-39b",
  "repositoryPath": "/tmp/Lang-39b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "StringUtils.java",
  "functionName": "replaceEach",
  "functionId": "replaceEach___text-String__searchList-String[]__replacementList-String[]",
  "sourceFilePath": "src/java/org/apache/commons/lang3/StringUtils.java",
  "functionAnnotation": "",
  "functionDoc": "\u003cp\u003e\nReplaces all occurrences of Strings within another String.\n\u003c/p\u003e\n\n\u003cp\u003e\nA \u003ccode\u003enull\u003c/code\u003e reference passed to this method is a no-op, or if\nany \"search string\" or \"string to replace\" is null, that replace will be\nignored. This will not repeat. For repeating replaces, call the\noverloaded method.\n\u003c/p\u003e\n\n\u003cpre\u003e\n StringUtils.replaceEach(null, *, *)        \u003d null\n StringUtils.replaceEach(\"\", *, *)          \u003d \"\"\n StringUtils.replaceEach(\"aba\", null, null) \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", new String[0], null) \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", null, new String[0]) \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, null)  \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, new String[]{\"\"})  \u003d \"b\"\n StringUtils.replaceEach(\"aba\", new String[]{null}, new String[]{\"a\"})  \u003d \"aba\"\n StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"w\", \"t\"})  \u003d \"wcte\"\n (example of how it does not repeat)\n StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"t\"})  \u003d \"dcte\"\n\u003c/pre\u003e\n\n@param text text to search and replace in, no-op if null\n@param searchList the Strings to search for, no-op if null\n@param replacementList the Strings to replace them with, no-op if null\n@return the text with any replacements processed, \u003ccode\u003enull\u003c/code\u003e if\n        null String input\n@throws IndexOutOfBoundsException\n            if the lengths of the arrays are not the same (null is ok,\n            and/or size 0)\n@since 2.4\n",
  "functionStartLine": 3501,
  "functionEndLine": 3503,
  "numCommitsSeen": 395,
  "timeTaken": 4970,
  "changeHistory": [
    "586080851f6bca4d7aa84a7d307203ad8222407e",
    "5310e78952ca17521b7d5e83bfcefafa227187a5",
    "19f33e4e0d824e732d07f06a08567c27b3c808f3",
    "2a6b4afd3463243e17ff0af1d423b8dad0c46e69",
    "e8600d357d98cbf727b573732052aba0fd7a1f69"
  ],
  "changeHistoryShort": {
    "586080851f6bca4d7aa84a7d307203ad8222407e": "Yfilerename",
    "5310e78952ca17521b7d5e83bfcefafa227187a5": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "19f33e4e0d824e732d07f06a08567c27b3c808f3": "Ydocchange",
    "2a6b4afd3463243e17ff0af1d423b8dad0c46e69": "Ydocchange",
    "e8600d357d98cbf727b573732052aba0fd7a1f69": "Yintroduced"
  },
  "changeHistoryDetails": {
    "586080851f6bca4d7aa84a7d307203ad8222407e": {
      "type": "Yfilerename",
      "commitMessage": "Changing directory name from lang to lang3. Build will fail (probably) until Java code is changed in subsequent commit. LANG-563\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@889202 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/10/09, 3:33 AM",
      "commitName": "586080851f6bca4d7aa84a7d307203ad8222407e",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "12/10/09, 3:31 AM",
      "commitNameOld": "da479d635f66c1f82a1f858591cfb1b9941457ae",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static String replaceEach(String text, String[] searchList, String[] replacementList) {\n    return replaceEach(text, searchList, replacementList, false, 0);\n}",
      "path": "src/java/org/apache/commons/lang3/StringUtils.java",
      "functionStartLine": 3437,
      "functionName": "replaceEach",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003e\nReplaces all occurrences of Strings within another String.\n\u003c/p\u003e\n\n\u003cp\u003e\nA \u003ccode\u003enull\u003c/code\u003e reference passed to this method is a no-op, or if\nany \"search string\" or \"string to replace\" is null, that replace will be\nignored. This will not repeat. For repeating replaces, call the\noverloaded method.\n\u003c/p\u003e\n\n\u003cpre\u003e\n StringUtils.replaceEach(null, *, *)        \u003d null\n StringUtils.replaceEach(\"\", *, *)          \u003d \"\"\n StringUtils.replaceEach(\"aba\", null, null) \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", new String[0], null) \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", null, new String[0]) \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, null)  \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, new String[]{\"\"})  \u003d \"b\"\n StringUtils.replaceEach(\"aba\", new String[]{null}, new String[]{\"a\"})  \u003d \"aba\"\n StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"w\", \"t\"})  \u003d \"wcte\"\n (example of how it does not repeat)\n StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"t\"})  \u003d \"dcte\"\n\u003c/pre\u003e\n\n@param text text to search and replace in, no-op if null\n@param searchList the Strings to search for, no-op if null\n@param replacementList the Strings to replace them with, no-op if null\n@return the text with any replacements processed, \u003ccode\u003enull\u003c/code\u003e if\n        null String input\n@throws IndexOutOfBoundsException\n            if the lengths of the arrays are not the same (null is ok,\n            and/or size 0)\n@since 2.4\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/lang/StringUtils.java",
        "newPath": "src/java/org/apache/commons/lang3/StringUtils.java"
      }
    },
    "5310e78952ca17521b7d5e83bfcefafa227187a5": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "LANG-410 - Ambiguous / confusing names in StringUtils replace* methods\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@627588 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/13/08, 12:41 PM",
      "commitName": "5310e78952ca17521b7d5e83bfcefafa227187a5",
      "commitAuthor": "Sebastian Bazley",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "LANG-410 - Ambiguous / confusing names in StringUtils replace* methods\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@627588 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2/13/08, 12:41 PM",
          "commitName": "5310e78952ca17521b7d5e83bfcefafa227187a5",
          "commitAuthor": "Sebastian Bazley",
          "commitDateOld": "2/6/08, 1:24 PM",
          "commitNameOld": "19f33e4e0d824e732d07f06a08567c27b3c808f3",
          "commitAuthorOld": "Matthew Jason Benson",
          "daysBetweenCommits": 6.97,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public static String replaceEach(String text, String[] searchList, String[] replacementList) {\n    return replaceEach(text, searchList, replacementList, false, 0);\n}",
          "path": "src/java/org/apache/commons/lang/StringUtils.java",
          "functionStartLine": 3554,
          "functionName": "replaceEach",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003e\nReplaces all occurrences of Strings within another String.\n\u003c/p\u003e\n\n\u003cp\u003e\nA \u003ccode\u003enull\u003c/code\u003e reference passed to this method is a no-op, or if\nany \"search string\" or \"string to replace\" is null, that replace will be\nignored. This will not repeat. For repeating replaces, call the\noverloaded method.\n\u003c/p\u003e\n\n\u003cpre\u003e\n StringUtils.replaceEach(null, *, *)        \u003d null\n StringUtils.replaceEach(\"\", *, *)          \u003d \"\"\n StringUtils.replaceEach(\"aba\", null, null) \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", new String[0], null) \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", null, new String[0]) \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, null)  \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, new String[]{\"\"})  \u003d \"b\"\n StringUtils.replaceEach(\"aba\", new String[]{null}, new String[]{\"a\"})  \u003d \"aba\"\n StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"w\", \"t\"})  \u003d \"wcte\"\n (example of how it does not repeat)\n StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"t\"})  \u003d \"dcte\"\n\u003c/pre\u003e\n\n@param text text to search and replace in, no-op if null\n@param searchList the Strings to search for, no-op if null\n@param replacementList the Strings to replace them with, no-op if null\n@return the text with any replacements processed, \u003ccode\u003enull\u003c/code\u003e if\n        null String input\n@throws IndexOutOfBoundsException\n            if the lengths of the arrays are not the same (null is ok,\n            and/or size 0)\n@since 2.4\n",
          "diff": "@@ -1,3 +1,3 @@\n-public static String replaceEach(String text, String[] repl, String[] with) {\n-    return replaceEach(text, repl, with, false, 0);\n+public static String replaceEach(String text, String[] searchList, String[] replacementList) {\n+    return replaceEach(text, searchList, replacementList, false, 0);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[text-String, repl-String[], with-String[]]",
            "newValue": "[text-String, searchList-String[], replacementList-String[]]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "LANG-410 - Ambiguous / confusing names in StringUtils replace* methods\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@627588 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2/13/08, 12:41 PM",
          "commitName": "5310e78952ca17521b7d5e83bfcefafa227187a5",
          "commitAuthor": "Sebastian Bazley",
          "commitDateOld": "2/6/08, 1:24 PM",
          "commitNameOld": "19f33e4e0d824e732d07f06a08567c27b3c808f3",
          "commitAuthorOld": "Matthew Jason Benson",
          "daysBetweenCommits": 6.97,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public static String replaceEach(String text, String[] searchList, String[] replacementList) {\n    return replaceEach(text, searchList, replacementList, false, 0);\n}",
          "path": "src/java/org/apache/commons/lang/StringUtils.java",
          "functionStartLine": 3554,
          "functionName": "replaceEach",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003e\nReplaces all occurrences of Strings within another String.\n\u003c/p\u003e\n\n\u003cp\u003e\nA \u003ccode\u003enull\u003c/code\u003e reference passed to this method is a no-op, or if\nany \"search string\" or \"string to replace\" is null, that replace will be\nignored. This will not repeat. For repeating replaces, call the\noverloaded method.\n\u003c/p\u003e\n\n\u003cpre\u003e\n StringUtils.replaceEach(null, *, *)        \u003d null\n StringUtils.replaceEach(\"\", *, *)          \u003d \"\"\n StringUtils.replaceEach(\"aba\", null, null) \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", new String[0], null) \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", null, new String[0]) \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, null)  \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, new String[]{\"\"})  \u003d \"b\"\n StringUtils.replaceEach(\"aba\", new String[]{null}, new String[]{\"a\"})  \u003d \"aba\"\n StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"w\", \"t\"})  \u003d \"wcte\"\n (example of how it does not repeat)\n StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"t\"})  \u003d \"dcte\"\n\u003c/pre\u003e\n\n@param text text to search and replace in, no-op if null\n@param searchList the Strings to search for, no-op if null\n@param replacementList the Strings to replace them with, no-op if null\n@return the text with any replacements processed, \u003ccode\u003enull\u003c/code\u003e if\n        null String input\n@throws IndexOutOfBoundsException\n            if the lengths of the arrays are not the same (null is ok,\n            and/or size 0)\n@since 2.4\n",
          "diff": "@@ -1,3 +1,3 @@\n-public static String replaceEach(String text, String[] repl, String[] with) {\n-    return replaceEach(text, repl, with, false, 0);\n+public static String replaceEach(String text, String[] searchList, String[] replacementList) {\n+    return replaceEach(text, searchList, replacementList, false, 0);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "LANG-410 - Ambiguous / confusing names in StringUtils replace* methods\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@627588 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2/13/08, 12:41 PM",
          "commitName": "5310e78952ca17521b7d5e83bfcefafa227187a5",
          "commitAuthor": "Sebastian Bazley",
          "commitDateOld": "2/6/08, 1:24 PM",
          "commitNameOld": "19f33e4e0d824e732d07f06a08567c27b3c808f3",
          "commitAuthorOld": "Matthew Jason Benson",
          "daysBetweenCommits": 6.97,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public static String replaceEach(String text, String[] searchList, String[] replacementList) {\n    return replaceEach(text, searchList, replacementList, false, 0);\n}",
          "path": "src/java/org/apache/commons/lang/StringUtils.java",
          "functionStartLine": 3554,
          "functionName": "replaceEach",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003e\nReplaces all occurrences of Strings within another String.\n\u003c/p\u003e\n\n\u003cp\u003e\nA \u003ccode\u003enull\u003c/code\u003e reference passed to this method is a no-op, or if\nany \"search string\" or \"string to replace\" is null, that replace will be\nignored. This will not repeat. For repeating replaces, call the\noverloaded method.\n\u003c/p\u003e\n\n\u003cpre\u003e\n StringUtils.replaceEach(null, *, *)        \u003d null\n StringUtils.replaceEach(\"\", *, *)          \u003d \"\"\n StringUtils.replaceEach(\"aba\", null, null) \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", new String[0], null) \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", null, new String[0]) \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, null)  \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, new String[]{\"\"})  \u003d \"b\"\n StringUtils.replaceEach(\"aba\", new String[]{null}, new String[]{\"a\"})  \u003d \"aba\"\n StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"w\", \"t\"})  \u003d \"wcte\"\n (example of how it does not repeat)\n StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"t\"})  \u003d \"dcte\"\n\u003c/pre\u003e\n\n@param text text to search and replace in, no-op if null\n@param searchList the Strings to search for, no-op if null\n@param replacementList the Strings to replace them with, no-op if null\n@return the text with any replacements processed, \u003ccode\u003enull\u003c/code\u003e if\n        null String input\n@throws IndexOutOfBoundsException\n            if the lengths of the arrays are not the same (null is ok,\n            and/or size 0)\n@since 2.4\n",
          "diff": "@@ -1,3 +1,3 @@\n-public static String replaceEach(String text, String[] repl, String[] with) {\n-    return replaceEach(text, repl, with, false, 0);\n+public static String replaceEach(String text, String[] searchList, String[] replacementList) {\n+    return replaceEach(text, searchList, replacementList, false, 0);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "\u003cp\u003e\nReplaces all occurrences of Strings within another String.\n\u003c/p\u003e\n\n\u003cp\u003e\nA \u003ccode\u003enull\u003c/code\u003e reference passed to this method is a no-op, or if\nany \"search string\" or \"string to replace\" is null, that replace will be\nignored. This will not repeat. For repeating replaces, call the\noverloaded method.\n\u003c/p\u003e\n\n\u003cpre\u003e\n StringUtils.replaceEach(null, *, *)        \u003d null\n StringUtils.replaceEach(\"\", *, *)          \u003d \"\"\n StringUtils.replaceEach(\"aba\", null, null) \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", new String[0], null) \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", null, new String[0]) \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, null)  \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, new String[]{\"\"})  \u003d \"b\"\n StringUtils.replaceEach(\"aba\", new String[]{null}, new String[]{\"a\"})  \u003d \"aba\"\n StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"w\", \"t\"})  \u003d \"wcte\"\n (example of how it does not repeat)\n StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"t\"})  \u003d \"dcte\"\n\u003c/pre\u003e\n\n@param text text to search and replace in, no-op if null\n@param repl the Strings to search for, no-op if null\n@param with the Strings to replace with, no-op if null\n@return the text with any replacements processed, \u003ccode\u003enull\u003c/code\u003e if\n        null String input\n@throws IndexOutOfBoundsException\n            if the lengths of the arrays are not the same (null is ok,\n            and/or size 0)\n@since 2.4\n",
            "newValue": "\u003cp\u003e\nReplaces all occurrences of Strings within another String.\n\u003c/p\u003e\n\n\u003cp\u003e\nA \u003ccode\u003enull\u003c/code\u003e reference passed to this method is a no-op, or if\nany \"search string\" or \"string to replace\" is null, that replace will be\nignored. This will not repeat. For repeating replaces, call the\noverloaded method.\n\u003c/p\u003e\n\n\u003cpre\u003e\n StringUtils.replaceEach(null, *, *)        \u003d null\n StringUtils.replaceEach(\"\", *, *)          \u003d \"\"\n StringUtils.replaceEach(\"aba\", null, null) \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", new String[0], null) \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", null, new String[0]) \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, null)  \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, new String[]{\"\"})  \u003d \"b\"\n StringUtils.replaceEach(\"aba\", new String[]{null}, new String[]{\"a\"})  \u003d \"aba\"\n StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"w\", \"t\"})  \u003d \"wcte\"\n (example of how it does not repeat)\n StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"t\"})  \u003d \"dcte\"\n\u003c/pre\u003e\n\n@param text text to search and replace in, no-op if null\n@param searchList the Strings to search for, no-op if null\n@param replacementList the Strings to replace them with, no-op if null\n@return the text with any replacements processed, \u003ccode\u003enull\u003c/code\u003e if\n        null String input\n@throws IndexOutOfBoundsException\n            if the lengths of the arrays are not the same (null is ok,\n            and/or size 0)\n@since 2.4\n"
          }
        }
      ]
    },
    "19f33e4e0d824e732d07f06a08567c27b3c808f3": {
      "type": "Ydocchange",
      "commitMessage": "sp again\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@619157 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/6/08, 1:24 PM",
      "commitName": "19f33e4e0d824e732d07f06a08567c27b3c808f3",
      "commitAuthor": "Matthew Jason Benson",
      "commitDateOld": "2/6/08, 12:21 PM",
      "commitNameOld": "4aefe9f0b1d8e5f9649eceaf0e232eff71b3d034",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static String replaceEach(String text, String[] repl, String[] with) {\n    return replaceEach(text, repl, with, false, 0);\n}",
      "path": "src/java/org/apache/commons/lang/StringUtils.java",
      "functionStartLine": 3554,
      "functionName": "replaceEach",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003e\nReplaces all occurrences of Strings within another String.\n\u003c/p\u003e\n\n\u003cp\u003e\nA \u003ccode\u003enull\u003c/code\u003e reference passed to this method is a no-op, or if\nany \"search string\" or \"string to replace\" is null, that replace will be\nignored. This will not repeat. For repeating replaces, call the\noverloaded method.\n\u003c/p\u003e\n\n\u003cpre\u003e\n StringUtils.replaceEach(null, *, *)        \u003d null\n StringUtils.replaceEach(\"\", *, *)          \u003d \"\"\n StringUtils.replaceEach(\"aba\", null, null) \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", new String[0], null) \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", null, new String[0]) \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, null)  \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, new String[]{\"\"})  \u003d \"b\"\n StringUtils.replaceEach(\"aba\", new String[]{null}, new String[]{\"a\"})  \u003d \"aba\"\n StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"w\", \"t\"})  \u003d \"wcte\"\n (example of how it does not repeat)\n StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"t\"})  \u003d \"dcte\"\n\u003c/pre\u003e\n\n@param text text to search and replace in, no-op if null\n@param repl the Strings to search for, no-op if null\n@param with the Strings to replace with, no-op if null\n@return the text with any replacements processed, \u003ccode\u003enull\u003c/code\u003e if\n        null String input\n@throws IndexOutOfBoundsException\n            if the lengths of the arrays are not the same (null is ok,\n            and/or size 0)\n@since 2.4\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "\u003cp\u003e\nReplaces all occurences of Strings within another String.\n\u003c/p\u003e\n\n\u003cp\u003e\nA \u003ccode\u003enull\u003c/code\u003e reference passed to this method is a no-op, or if\nany \"search string\" or \"string to replace\" is null, that replace will be\nignored. This will not repeat. For repeating replaces, call the\noverloaded method.\n\u003c/p\u003e\n\n\u003cpre\u003e\n StringUtils.replaceEach(null, *, *)        \u003d null\n StringUtils.replaceEach(\"\", *, *)          \u003d \"\"\n StringUtils.replaceEach(\"aba\", null, null) \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", new String[0], null) \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", null, new String[0]) \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, null)  \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, new String[]{\"\"})  \u003d \"b\"\n StringUtils.replaceEach(\"aba\", new String[]{null}, new String[]{\"a\"})  \u003d \"aba\"\n StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"w\", \"t\"})  \u003d \"wcte\"\n (example of how it does not repeat)\n StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"t\"})  \u003d \"dcte\"\n\u003c/pre\u003e\n\n@param text text to search and replace in, no-op if null\n@param repl the Strings to search for, no-op if null\n@param with the Strings to replace with, no-op if null\n@return the text with any replacements processed, \u003ccode\u003enull\u003c/code\u003e if\n        null String input\n@throws IndexOutOfBoundsException\n            if the lengths of the arrays are not the same (null is ok,\n            and/or size 0)\n@since 2.4\n",
        "newValue": "\u003cp\u003e\nReplaces all occurrences of Strings within another String.\n\u003c/p\u003e\n\n\u003cp\u003e\nA \u003ccode\u003enull\u003c/code\u003e reference passed to this method is a no-op, or if\nany \"search string\" or \"string to replace\" is null, that replace will be\nignored. This will not repeat. For repeating replaces, call the\noverloaded method.\n\u003c/p\u003e\n\n\u003cpre\u003e\n StringUtils.replaceEach(null, *, *)        \u003d null\n StringUtils.replaceEach(\"\", *, *)          \u003d \"\"\n StringUtils.replaceEach(\"aba\", null, null) \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", new String[0], null) \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", null, new String[0]) \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, null)  \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, new String[]{\"\"})  \u003d \"b\"\n StringUtils.replaceEach(\"aba\", new String[]{null}, new String[]{\"a\"})  \u003d \"aba\"\n StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"w\", \"t\"})  \u003d \"wcte\"\n (example of how it does not repeat)\n StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"t\"})  \u003d \"dcte\"\n\u003c/pre\u003e\n\n@param text text to search and replace in, no-op if null\n@param repl the Strings to search for, no-op if null\n@param with the Strings to replace with, no-op if null\n@return the text with any replacements processed, \u003ccode\u003enull\u003c/code\u003e if\n        null String input\n@throws IndexOutOfBoundsException\n            if the lengths of the arrays are not the same (null is ok,\n            and/or size 0)\n@since 2.4\n"
      }
    },
    "2a6b4afd3463243e17ff0af1d423b8dad0c46e69": {
      "type": "Ydocchange",
      "commitMessage": "Correct spelling and punctuation in Javadoc. \n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@619091 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/6/08, 10:24 AM",
      "commitName": "2a6b4afd3463243e17ff0af1d423b8dad0c46e69",
      "commitAuthor": "Sebastian Bazley",
      "commitDateOld": "2/5/08, 8:32 PM",
      "commitNameOld": "56d9bb88e5dc419921fe2ae84e11288f05d1e26a",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 0.58,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "public static String replaceEach(String text, String[] repl, String[] with) {\n    return replaceEach(text, repl, with, false, 0);\n}",
      "path": "src/java/org/apache/commons/lang/StringUtils.java",
      "functionStartLine": 3565,
      "functionName": "replaceEach",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003e\nReplaces all occurences of Strings within another String.\n\u003c/p\u003e\n\n\u003cp\u003e\nA \u003ccode\u003enull\u003c/code\u003e reference passed to this method is a no-op, or if\nany \"search string\" or \"string to replace\" is null, that replace will be\nignored. This will not repeat. For repeating replaces, call the\noverloaded method.\n\u003c/p\u003e\n\n\u003cpre\u003e\n StringUtils.replaceEach(null, *, *)        \u003d null\n StringUtils.replaceEach(\"\", *, *)          \u003d \"\"\n StringUtils.replaceEach(\"aba\", null, null) \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", new String[0], null) \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", null, new String[0]) \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, null)  \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, new String[]{\"\"})  \u003d \"b\"\n StringUtils.replaceEach(\"aba\", new String[]{null}, new String[]{\"a\"})  \u003d \"aba\"\n StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"w\", \"t\"})  \u003d \"wcte\"\n (example of how it does not repeat)\n StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"t\"})  \u003d \"dcte\"\n\u003c/pre\u003e\n\n@param text text to search and replace in, no-op if null\n@param repl the Strings to search for, no-op if null\n@param with the Strings to replace with, no-op if null\n@return the text with any replacements processed, \u003ccode\u003enull\u003c/code\u003e if\n        null String input\n@throws IndexOutOfBoundsException\n            if the lengths of the arrays are not the same (null is ok,\n            and/or size 0)\n@since 2.4\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "\u003cp\u003e\nReplaces all occurances of Strings within another String.\n\u003c/p\u003e\n\n\u003cp\u003e\nA \u003ccode\u003enull\u003c/code\u003e reference passed to this method is a no-op, or if\nany \"search string\" or \"string to replace\" is null, that replace will be\nignored. This will not repeat, for repeating replaces, call the\noverloaded method.\n\u003c/p\u003e\n\n\u003cpre\u003e\n StringUtils.replaceEach(null, *, *)        \u003d null\n StringUtils.replaceEach(\"\", *, *)          \u003d \"\"\n StringUtils.replaceEach(\"aba\", null, null) \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", new String[0], null) \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", null, new String[0]) \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, null)  \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, new String[]{\"\"})  \u003d \"b\"\n StringUtils.replaceEach(\"aba\", new String[]{null}, new String[]{\"a\"})  \u003d \"aba\"\n StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"w\", \"t\"})  \u003d \"wcte\"\n (example of how it does not repeat)\n StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"t\"})  \u003d \"dcte\"\n\u003c/pre\u003e\n\n@param text text to search and replace in, no-op if null\n@param repl the Strings to search for, no-op if null\n@param with the Strings to replace with, no-op if null\n@return the text with any replacements processed, \u003ccode\u003enull\u003c/code\u003e if\n        null String input\n@throws IndexOutOfBoundsException\n            if the lengths of the arrays are not the same (null is ok,\n            and/or size 0)\n@since 2.4\n",
        "newValue": "\u003cp\u003e\nReplaces all occurences of Strings within another String.\n\u003c/p\u003e\n\n\u003cp\u003e\nA \u003ccode\u003enull\u003c/code\u003e reference passed to this method is a no-op, or if\nany \"search string\" or \"string to replace\" is null, that replace will be\nignored. This will not repeat. For repeating replaces, call the\noverloaded method.\n\u003c/p\u003e\n\n\u003cpre\u003e\n StringUtils.replaceEach(null, *, *)        \u003d null\n StringUtils.replaceEach(\"\", *, *)          \u003d \"\"\n StringUtils.replaceEach(\"aba\", null, null) \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", new String[0], null) \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", null, new String[0]) \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, null)  \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, new String[]{\"\"})  \u003d \"b\"\n StringUtils.replaceEach(\"aba\", new String[]{null}, new String[]{\"a\"})  \u003d \"aba\"\n StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"w\", \"t\"})  \u003d \"wcte\"\n (example of how it does not repeat)\n StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"t\"})  \u003d \"dcte\"\n\u003c/pre\u003e\n\n@param text text to search and replace in, no-op if null\n@param repl the Strings to search for, no-op if null\n@param with the Strings to replace with, no-op if null\n@return the text with any replacements processed, \u003ccode\u003enull\u003c/code\u003e if\n        null String input\n@throws IndexOutOfBoundsException\n            if the lengths of the arrays are not the same (null is ok,\n            and/or size 0)\n@since 2.4\n"
      }
    },
    "e8600d357d98cbf727b573732052aba0fd7a1f69": {
      "type": "Yintroduced",
      "commitMessage": "Applying my modified version of Chris Hyzer\u0027s patch from LANG-180 - adding a replaceEach(String, String[], String[]) and replaceRepeatedly(String, String[], String[]) pair of methods. The internal code to the private replaceEach method has not been fully reviewed yet - I wanted to get more eyes focused on the algorithm\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@616170 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/28/08, 9:33 PM",
      "commitName": "e8600d357d98cbf727b573732052aba0fd7a1f69",
      "commitAuthor": "Henri Yandell",
      "diff": "@@ -0,0 +1,3 @@\n+public static String replaceEach(String text, String[] repl, String[] with) {\n+    return replaceEach(text, repl, with, false, 0);\n+}\n\\ No newline at end of file\n",
      "actualSource": "public static String replaceEach(String text, String[] repl, String[] with) {\n    return replaceEach(text, repl, with, false, 0);\n}",
      "path": "src/java/org/apache/commons/lang/StringUtils.java",
      "functionStartLine": 3565,
      "functionName": "replaceEach",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003e\nReplaces all occurances of Strings within another String.\n\u003c/p\u003e\n\n\u003cp\u003e\nA \u003ccode\u003enull\u003c/code\u003e reference passed to this method is a no-op, or if\nany \"search string\" or \"string to replace\" is null, that replace will be\nignored. This will not repeat, for repeating replaces, call the\noverloaded method.\n\u003c/p\u003e\n\n\u003cpre\u003e\n StringUtils.replaceEach(null, *, *)        \u003d null\n StringUtils.replaceEach(\"\", *, *)          \u003d \"\"\n StringUtils.replaceEach(\"aba\", null, null) \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", new String[0], null) \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", null, new String[0]) \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, null)  \u003d \"aba\"\n StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, new String[]{\"\"})  \u003d \"b\"\n StringUtils.replaceEach(\"aba\", new String[]{null}, new String[]{\"a\"})  \u003d \"aba\"\n StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"w\", \"t\"})  \u003d \"wcte\"\n (example of how it does not repeat)\n StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"t\"})  \u003d \"dcte\"\n\u003c/pre\u003e\n\n@param text text to search and replace in, no-op if null\n@param repl the Strings to search for, no-op if null\n@param with the Strings to replace with, no-op if null\n@return the text with any replacements processed, \u003ccode\u003enull\u003c/code\u003e if\n        null String input\n@throws IndexOutOfBoundsException\n            if the lengths of the arrays are not the same (null is ok,\n            and/or size 0)\n@since 2.4\n"
    }
  }
}