{
  "origin": "codeshovel",
  "repositoryName": "Time-2b",
  "repositoryPath": "/tmp/Time-2b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DateTimeZoneBuilder.java",
  "functionName": "readFrom",
  "functionId": "$readFrom___in-DataInput__id-String",
  "sourceFilePath": "src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 1168,
  "functionEndLine": 1171,
  "numCommitsSeen": 26,
  "timeTaken": 2598,
  "changeHistory": [
    "df4a82f4fb46cc2248280c462e18f08d55a3d112",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1",
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb"
  ],
  "changeHistoryShort": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": "Yfilerename",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": "Yfilerename",
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb": "Yintroduced"
  },
  "changeHistoryDetails": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": {
      "type": "Yfilerename",
      "commitMessage": "Remove JodaTime folder moving files to top level\n",
      "commitDate": "5/16/11, 10:02 AM",
      "commitName": "df4a82f4fb46cc2248280c462e18f08d55a3d112",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "5/16/11, 9:58 AM",
      "commitNameOld": "72b22654962284bac59c2777131b42a2d1f53228",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "static PrecalculatedZone readFrom(DataInput in, String id) throws IOException {\n    int poolSize \u003d in.readUnsignedShort();\n    String[] pool \u003d new String[poolSize];\n    for (int i \u003d 0; i \u003c poolSize; i++) {\n        pool[i] \u003d in.readUTF();\n    }\n    int size \u003d in.readInt();\n    long[] transitions \u003d new long[size];\n    int[] wallOffsets \u003d new int[size];\n    int[] standardOffsets \u003d new int[size];\n    String[] nameKeys \u003d new String[size];\n    for (int i \u003d 0; i \u003c size; i++) {\n        transitions[i] \u003d readMillis(in);\n        wallOffsets[i] \u003d (int) readMillis(in);\n        standardOffsets[i] \u003d (int) readMillis(in);\n        try {\n            int index;\n            if (poolSize \u003c 256) {\n                index \u003d in.readUnsignedByte();\n            } else {\n                index \u003d in.readUnsignedShort();\n            }\n            nameKeys[i] \u003d pool[index];\n        } catch (ArrayIndexOutOfBoundsException e) {\n            throw new IOException(\"Invalid encoding\");\n        }\n    }\n    DSTZone tailZone \u003d null;\n    if (in.readBoolean()) {\n        tailZone \u003d DSTZone.readFrom(in, id);\n    }\n    return new PrecalculatedZone(id, transitions, wallOffsets, standardOffsets, nameKeys, tailZone);\n}",
      "path": "src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java",
      "functionStartLine": 1339,
      "functionName": "readFrom",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java",
        "newPath": "src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java"
      }
    },
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": {
      "type": "Yfilerename",
      "commitMessage": "Convert to maven 2\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1540 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/8/10, 5:17 PM",
      "commitName": "53feb3fa56af7260e607844524b7e5a9be49ecc1",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/8/10, 5:02 PM",
      "commitNameOld": "7fa2ceaf5d95d050095432aa646ea803aa35e122",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "static PrecalculatedZone readFrom(DataInput in, String id) throws IOException {\n    int poolSize \u003d in.readUnsignedShort();\n    String[] pool \u003d new String[poolSize];\n    for (int i \u003d 0; i \u003c poolSize; i++) {\n        pool[i] \u003d in.readUTF();\n    }\n    int size \u003d in.readInt();\n    long[] transitions \u003d new long[size];\n    int[] wallOffsets \u003d new int[size];\n    int[] standardOffsets \u003d new int[size];\n    String[] nameKeys \u003d new String[size];\n    for (int i \u003d 0; i \u003c size; i++) {\n        transitions[i] \u003d readMillis(in);\n        wallOffsets[i] \u003d (int) readMillis(in);\n        standardOffsets[i] \u003d (int) readMillis(in);\n        try {\n            int index;\n            if (poolSize \u003c 256) {\n                index \u003d in.readUnsignedByte();\n            } else {\n                index \u003d in.readUnsignedShort();\n            }\n            nameKeys[i] \u003d pool[index];\n        } catch (ArrayIndexOutOfBoundsException e) {\n            throw new IOException(\"Invalid encoding\");\n        }\n    }\n    DSTZone tailZone \u003d null;\n    if (in.readBoolean()) {\n        tailZone \u003d DSTZone.readFrom(in, id);\n    }\n    return new PrecalculatedZone(id, transitions, wallOffsets, standardOffsets, nameKeys, tailZone);\n}",
      "path": "JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java",
      "functionStartLine": 1339,
      "functionName": "readFrom",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java",
        "newPath": "JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java"
      }
    },
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb": {
      "type": "Yintroduced",
      "commitMessage": "Move version 0.9 to joda-time repository\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@4 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "12/16/03, 1:39 PM",
      "commitName": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
      "commitAuthor": "Stephen Colebourne",
      "diff": "@@ -0,0 +1,33 @@\n+static PrecalculatedZone readFrom(DataInput in, String id) throws IOException {\n+    int poolSize \u003d in.readUnsignedShort();\n+    String[] pool \u003d new String[poolSize];\n+    for (int i \u003d 0; i \u003c poolSize; i++) {\n+        pool[i] \u003d in.readUTF();\n+    }\n+    int size \u003d in.readInt();\n+    long[] transitions \u003d new long[size];\n+    int[] wallOffsets \u003d new int[size];\n+    int[] standardOffsets \u003d new int[size];\n+    String[] nameKeys \u003d new String[size];\n+    for (int i \u003d 0; i \u003c size; i++) {\n+        transitions[i] \u003d readMillis(in);\n+        wallOffsets[i] \u003d (int) readMillis(in);\n+        standardOffsets[i] \u003d (int) readMillis(in);\n+        try {\n+            int index;\n+            if (poolSize \u003c 256) {\n+                index \u003d in.readUnsignedByte();\n+            } else {\n+                index \u003d in.readUnsignedShort();\n+            }\n+            nameKeys[i] \u003d pool[index];\n+        } catch (ArrayIndexOutOfBoundsException e) {\n+            throw new IOException(\"Invalid encoding\");\n+        }\n+    }\n+    DSTZone tailZone \u003d null;\n+    if (in.readBoolean()) {\n+        tailZone \u003d DSTZone.readFrom(in, id);\n+    }\n+    return new PrecalculatedZone(id, transitions, wallOffsets, standardOffsets, nameKeys, tailZone);\n+}\n\\ No newline at end of file\n",
      "actualSource": "static PrecalculatedZone readFrom(DataInput in, String id) throws IOException {\n    int poolSize \u003d in.readUnsignedShort();\n    String[] pool \u003d new String[poolSize];\n    for (int i \u003d 0; i \u003c poolSize; i++) {\n        pool[i] \u003d in.readUTF();\n    }\n    int size \u003d in.readInt();\n    long[] transitions \u003d new long[size];\n    int[] wallOffsets \u003d new int[size];\n    int[] standardOffsets \u003d new int[size];\n    String[] nameKeys \u003d new String[size];\n    for (int i \u003d 0; i \u003c size; i++) {\n        transitions[i] \u003d readMillis(in);\n        wallOffsets[i] \u003d (int) readMillis(in);\n        standardOffsets[i] \u003d (int) readMillis(in);\n        try {\n            int index;\n            if (poolSize \u003c 256) {\n                index \u003d in.readUnsignedByte();\n            } else {\n                index \u003d in.readUnsignedShort();\n            }\n            nameKeys[i] \u003d pool[index];\n        } catch (ArrayIndexOutOfBoundsException e) {\n            throw new IOException(\"Invalid encoding\");\n        }\n    }\n    DSTZone tailZone \u003d null;\n    if (in.readBoolean()) {\n        tailZone \u003d DSTZone.readFrom(in, id);\n    }\n    return new PrecalculatedZone(id, transitions, wallOffsets, standardOffsets, nameKeys, tailZone);\n}",
      "path": "JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java",
      "functionStartLine": 1242,
      "functionName": "readFrom",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}