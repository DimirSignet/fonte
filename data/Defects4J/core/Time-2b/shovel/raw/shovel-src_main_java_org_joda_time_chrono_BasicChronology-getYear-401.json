{
  "origin": "codeshovel",
  "repositoryName": "Time-2b",
  "repositoryPath": "/tmp/Time-2b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BasicChronology.java",
  "functionName": "getYear",
  "functionId": "getYear___instant-long",
  "sourceFilePath": "src/main/java/org/joda/time/chrono/BasicChronology.java",
  "functionAnnotation": "",
  "functionDoc": "\n@param instant millis from 1970-01-01T00:00:00Z\n",
  "functionStartLine": 401,
  "functionEndLine": 437,
  "numCommitsSeen": 41,
  "timeTaken": 4375,
  "changeHistory": [
    "df4a82f4fb46cc2248280c462e18f08d55a3d112",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1",
    "35808a6d6e33fdeb3c6e0472286dfb1215dde09e",
    "9c0781d414b9eee98f78d168b5db6c2cdda5147d",
    "a498adb4a3d6b355cd7e653e55b179acfbf3f4f9",
    "7b7cb44562d5942add1f093111e84a5836780de4",
    "6bdd176eed470329a73d7ee08498183e579cea60",
    "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7"
  ],
  "changeHistoryShort": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": "Yfilerename",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": "Yfilerename",
    "35808a6d6e33fdeb3c6e0472286dfb1215dde09e": "Ybodychange",
    "9c0781d414b9eee98f78d168b5db6c2cdda5147d": "Yfilerename",
    "a498adb4a3d6b355cd7e653e55b179acfbf3f4f9": "Ybodychange",
    "7b7cb44562d5942add1f093111e84a5836780de4": "Ymodifierchange",
    "6bdd176eed470329a73d7ee08498183e579cea60": "Yfilerename",
    "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": {
      "type": "Yfilerename",
      "commitMessage": "Remove JodaTime folder moving files to top level\n",
      "commitDate": "5/16/11, 10:02 AM",
      "commitName": "df4a82f4fb46cc2248280c462e18f08d55a3d112",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "5/16/11, 9:58 AM",
      "commitNameOld": "72b22654962284bac59c2777131b42a2d1f53228",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "int getYear(long instant) {\n    long unitMillis \u003d getAverageMillisPerYearDividedByTwo();\n    long i2 \u003d (instant \u003e\u003e 1) + getApproxMillisAtEpochDividedByTwo();\n    if (i2 \u003c 0) {\n        i2 \u003d i2 - unitMillis + 1;\n    }\n    int year \u003d (int) (i2 / unitMillis);\n    long yearStart \u003d getYearMillis(year);\n    long diff \u003d instant - yearStart;\n    if (diff \u003c 0) {\n        year--;\n    } else if (diff \u003e\u003d DateTimeConstants.MILLIS_PER_DAY * 365L) {\n        long oneYear;\n        if (isLeapYear(year)) {\n            oneYear \u003d DateTimeConstants.MILLIS_PER_DAY * 366L;\n        } else {\n            oneYear \u003d DateTimeConstants.MILLIS_PER_DAY * 365L;\n        }\n        yearStart +\u003d oneYear;\n        if (yearStart \u003c\u003d instant) {\n            year++;\n        }\n    }\n    return year;\n}",
      "path": "src/main/java/org/joda/time/chrono/BasicChronology.java",
      "functionStartLine": 393,
      "functionName": "getYear",
      "functionAnnotation": "",
      "functionDoc": "\n@param instant millis from 1970-01-01T00:00:00Z\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java",
        "newPath": "src/main/java/org/joda/time/chrono/BasicChronology.java"
      }
    },
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": {
      "type": "Yfilerename",
      "commitMessage": "Convert to maven 2\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1540 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/8/10, 5:17 PM",
      "commitName": "53feb3fa56af7260e607844524b7e5a9be49ecc1",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/8/10, 5:02 PM",
      "commitNameOld": "7fa2ceaf5d95d050095432aa646ea803aa35e122",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "int getYear(long instant) {\n    long unitMillis \u003d getAverageMillisPerYearDividedByTwo();\n    long i2 \u003d (instant \u003e\u003e 1) + getApproxMillisAtEpochDividedByTwo();\n    if (i2 \u003c 0) {\n        i2 \u003d i2 - unitMillis + 1;\n    }\n    int year \u003d (int) (i2 / unitMillis);\n    long yearStart \u003d getYearMillis(year);\n    long diff \u003d instant - yearStart;\n    if (diff \u003c 0) {\n        year--;\n    } else if (diff \u003e\u003d DateTimeConstants.MILLIS_PER_DAY * 365L) {\n        long oneYear;\n        if (isLeapYear(year)) {\n            oneYear \u003d DateTimeConstants.MILLIS_PER_DAY * 366L;\n        } else {\n            oneYear \u003d DateTimeConstants.MILLIS_PER_DAY * 365L;\n        }\n        yearStart +\u003d oneYear;\n        if (yearStart \u003c\u003d instant) {\n            year++;\n        }\n    }\n    return year;\n}",
      "path": "JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java",
      "functionStartLine": 393,
      "functionName": "getYear",
      "functionAnnotation": "",
      "functionDoc": "\n@param instant millis from 1970-01-01T00:00:00Z\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/java/org/joda/time/chrono/BasicChronology.java",
        "newPath": "JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java"
      }
    },
    "35808a6d6e33fdeb3c6e0472286dfb1215dde09e": {
      "type": "Ybodychange",
      "commitMessage": "Fixed overflow when getting year field from instants at Long.MAX_VALUE and LONG.MIN_VALUE.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1051 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "3/19/06, 1:46 PM",
      "commitName": "35808a6d6e33fdeb3c6e0472286dfb1215dde09e",
      "commitAuthor": "Brian S O\u0027Neill",
      "commitDateOld": "3/2/06, 8:32 AM",
      "commitNameOld": "721585d047b4cb31d0da2eadcdcc1e8d10f31578",
      "commitAuthorOld": "Brian S O\u0027Neill",
      "daysBetweenCommits": 17.22,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "actualSource": "int getYear(long instant) {\n    long unitMillis \u003d getAverageMillisPerYearDividedByTwo();\n    long i2 \u003d (instant \u003e\u003e 1) + getApproxMillisAtEpochDividedByTwo();\n    if (i2 \u003c 0) {\n        i2 \u003d i2 - unitMillis + 1;\n    }\n    int year \u003d (int) (i2 / unitMillis);\n    long yearStart \u003d getYearMillis(year);\n    long diff \u003d instant - yearStart;\n    if (diff \u003c 0) {\n        year--;\n    } else if (diff \u003e\u003d DateTimeConstants.MILLIS_PER_DAY * 365L) {\n        long oneYear;\n        if (isLeapYear(year)) {\n            oneYear \u003d DateTimeConstants.MILLIS_PER_DAY * 366L;\n        } else {\n            oneYear \u003d DateTimeConstants.MILLIS_PER_DAY * 365L;\n        }\n        yearStart +\u003d oneYear;\n        if (yearStart \u003c\u003d instant) {\n            year++;\n        }\n    }\n    return year;\n}",
      "path": "JodaTime/src/java/org/joda/time/chrono/BasicChronology.java",
      "functionStartLine": 372,
      "functionName": "getYear",
      "functionAnnotation": "",
      "functionDoc": "\n@param instant millis from 1970-01-01T00:00:00Z\n",
      "diff": "@@ -1,34 +1,25 @@\n int getYear(long instant) {\n-    long unitMillis \u003d getAverageMillisPerYear();\n-    long i2 \u003d instant + getApproxMillisAtEpoch();\n+    long unitMillis \u003d getAverageMillisPerYearDividedByTwo();\n+    long i2 \u003d (instant \u003e\u003e 1) + getApproxMillisAtEpochDividedByTwo();\n     if (i2 \u003c 0) {\n         i2 \u003d i2 - unitMillis + 1;\n     }\n     int year \u003d (int) (i2 / unitMillis);\n-    long yearStart;\n-    try {\n-        yearStart \u003d getYearMillis(year);\n-    } catch (ArithmeticException e) {\n-        if (instant \u003e 0) {\n-            throw new ArithmeticException(\"Instant too large: \" + instant);\n-        } else {\n-            throw new ArithmeticException(\"Instant too small: \" + instant);\n-        }\n-    }\n+    long yearStart \u003d getYearMillis(year);\n     long diff \u003d instant - yearStart;\n     if (diff \u003c 0) {\n         year--;\n     } else if (diff \u003e\u003d DateTimeConstants.MILLIS_PER_DAY * 365L) {\n         long oneYear;\n         if (isLeapYear(year)) {\n             oneYear \u003d DateTimeConstants.MILLIS_PER_DAY * 366L;\n         } else {\n             oneYear \u003d DateTimeConstants.MILLIS_PER_DAY * 365L;\n         }\n         yearStart +\u003d oneYear;\n         if (yearStart \u003c\u003d instant) {\n             year++;\n         }\n     }\n     return year;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9c0781d414b9eee98f78d168b5db6c2cdda5147d": {
      "type": "Yfilerename",
      "commitMessage": "Rename BaseGJChronology to BasicChronology, ensuring serialization OK\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@960 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "12/5/05, 2:46 PM",
      "commitName": "9c0781d414b9eee98f78d168b5db6c2cdda5147d",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "12/5/05, 2:37 PM",
      "commitNameOld": "b947d2de15ad63651dbc40e496187ac7743a69f8",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "int getYear(long instant) {\n    long unitMillis \u003d getAverageMillisPerYear();\n    long i2 \u003d instant + getApproxMillisAtEpoch();\n    if (i2 \u003c 0) {\n        i2 \u003d i2 - unitMillis + 1;\n    }\n    int year \u003d (int) (i2 / unitMillis);\n    long yearStart;\n    try {\n        yearStart \u003d getYearMillis(year);\n    } catch (ArithmeticException e) {\n        if (instant \u003e 0) {\n            throw new ArithmeticException(\"Instant too large: \" + instant);\n        } else {\n            throw new ArithmeticException(\"Instant too small: \" + instant);\n        }\n    }\n    long diff \u003d instant - yearStart;\n    if (diff \u003c 0) {\n        year--;\n    } else if (diff \u003e\u003d DateTimeConstants.MILLIS_PER_DAY * 365L) {\n        long oneYear;\n        if (isLeapYear(year)) {\n            oneYear \u003d DateTimeConstants.MILLIS_PER_DAY * 366L;\n        } else {\n            oneYear \u003d DateTimeConstants.MILLIS_PER_DAY * 365L;\n        }\n        yearStart +\u003d oneYear;\n        if (yearStart \u003c\u003d instant) {\n            year++;\n        }\n    }\n    return year;\n}",
      "path": "JodaTime/src/java/org/joda/time/chrono/BasicChronology.java",
      "functionStartLine": 372,
      "functionName": "getYear",
      "functionAnnotation": "",
      "functionDoc": "\n@param instant millis from 1970-01-01T00:00:00Z\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java",
        "newPath": "JodaTime/src/java/org/joda/time/chrono/BasicChronology.java"
      }
    },
    "a498adb4a3d6b355cd7e653e55b179acfbf3f4f9": {
      "type": "Ybodychange",
      "commitMessage": "Overflowed calculations involving year throw ArithmeticException rather than produce a bogus result.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@791 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "6/19/05, 9:48 PM",
      "commitName": "a498adb4a3d6b355cd7e653e55b179acfbf3f4f9",
      "commitAuthor": "Brian S O\u0027Neill",
      "commitDateOld": "6/8/05, 3:57 PM",
      "commitNameOld": "7b7cb44562d5942add1f093111e84a5836780de4",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 11.24,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "actualSource": "int getYear(long instant) {\n    long unitMillis \u003d getAverageMillisPerYear();\n    long i2 \u003d instant + getApproxMillisAtEpoch();\n    if (i2 \u003c 0) {\n        i2 \u003d i2 - unitMillis + 1;\n    }\n    int year \u003d (int) (i2 / unitMillis);\n    long yearStart;\n    try {\n        yearStart \u003d getYearMillis(year);\n    } catch (ArithmeticException e) {\n        if (instant \u003e 0) {\n            throw new ArithmeticException(\"Instant too large: \" + instant);\n        } else {\n            throw new ArithmeticException(\"Instant too small: \" + instant);\n        }\n    }\n    long diff \u003d instant - yearStart;\n    if (diff \u003c 0) {\n        year--;\n    } else if (diff \u003e\u003d DateTimeConstants.MILLIS_PER_DAY * 365L) {\n        long oneYear;\n        if (isLeapYear(year)) {\n            oneYear \u003d DateTimeConstants.MILLIS_PER_DAY * 366L;\n        } else {\n            oneYear \u003d DateTimeConstants.MILLIS_PER_DAY * 365L;\n        }\n        yearStart +\u003d oneYear;\n        if (yearStart \u003c\u003d instant) {\n            year++;\n        }\n    }\n    return year;\n}",
      "path": "JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java",
      "functionStartLine": 388,
      "functionName": "getYear",
      "functionAnnotation": "",
      "functionDoc": "\n@param instant millis from 1970-01-01T00:00:00Z\n",
      "diff": "@@ -1,36 +1,34 @@\n int getYear(long instant) {\n     long unitMillis \u003d getAverageMillisPerYear();\n     long i2 \u003d instant + getApproxMillisAtEpoch();\n     if (i2 \u003c 0) {\n         i2 \u003d i2 - unitMillis + 1;\n     }\n     int year \u003d (int) (i2 / unitMillis);\n-    long yearStart \u003d getYearMillis(year);\n+    long yearStart;\n+    try {\n+        yearStart \u003d getYearMillis(year);\n+    } catch (ArithmeticException e) {\n+        if (instant \u003e 0) {\n+            throw new ArithmeticException(\"Instant too large: \" + instant);\n+        } else {\n+            throw new ArithmeticException(\"Instant too small: \" + instant);\n+        }\n+    }\n     long diff \u003d instant - yearStart;\n     if (diff \u003c 0) {\n-        if (diff \u003c -DateTimeConstants.MILLIS_PER_DAY * 2L) {\n-            return getYearOverflow(instant);\n-        }\n         year--;\n     } else if (diff \u003e\u003d DateTimeConstants.MILLIS_PER_DAY * 365L) {\n-        if (diff \u003e\u003d DateTimeConstants.MILLIS_PER_DAY * 367L) {\n-            return getYearOverflow(instant);\n-        }\n         long oneYear;\n         if (isLeapYear(year)) {\n             oneYear \u003d DateTimeConstants.MILLIS_PER_DAY * 366L;\n         } else {\n             oneYear \u003d DateTimeConstants.MILLIS_PER_DAY * 365L;\n         }\n         yearStart +\u003d oneYear;\n-        if ((yearStart ^ instant) \u003c 0) {\n-            if ((yearStart \u003c 0 \u0026\u0026 (yearStart - oneYear) \u003e\u003d 0) || (yearStart \u003e\u003d 0 \u0026\u0026 (yearStart - oneYear) \u003c 0)) {\n-                return getYearOverflow(instant);\n-            }\n-        }\n         if (yearStart \u003c\u003d instant) {\n             year++;\n         }\n     }\n     return year;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7b7cb44562d5942add1f093111e84a5836780de4": {
      "type": "Ymodifierchange",
      "commitMessage": "Refactor chronology classes to avoid dupication in code\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@779 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "6/8/05, 3:57 PM",
      "commitName": "7b7cb44562d5942add1f093111e84a5836780de4",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "5/30/05, 11:20 AM",
      "commitNameOld": "e9a0d0df22a9b3d06940daa76f6accb5e63b2df9",
      "commitAuthorOld": "Brian S O\u0027Neill",
      "daysBetweenCommits": 9.19,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "actualSource": "int getYear(long instant) {\n    long unitMillis \u003d getAverageMillisPerYear();\n    long i2 \u003d instant + getApproxMillisAtEpoch();\n    if (i2 \u003c 0) {\n        i2 \u003d i2 - unitMillis + 1;\n    }\n    int year \u003d (int) (i2 / unitMillis);\n    long yearStart \u003d getYearMillis(year);\n    long diff \u003d instant - yearStart;\n    if (diff \u003c 0) {\n        if (diff \u003c -DateTimeConstants.MILLIS_PER_DAY * 2L) {\n            return getYearOverflow(instant);\n        }\n        year--;\n    } else if (diff \u003e\u003d DateTimeConstants.MILLIS_PER_DAY * 365L) {\n        if (diff \u003e\u003d DateTimeConstants.MILLIS_PER_DAY * 367L) {\n            return getYearOverflow(instant);\n        }\n        long oneYear;\n        if (isLeapYear(year)) {\n            oneYear \u003d DateTimeConstants.MILLIS_PER_DAY * 366L;\n        } else {\n            oneYear \u003d DateTimeConstants.MILLIS_PER_DAY * 365L;\n        }\n        yearStart +\u003d oneYear;\n        if ((yearStart ^ instant) \u003c 0) {\n            if ((yearStart \u003c 0 \u0026\u0026 (yearStart - oneYear) \u003e\u003d 0) || (yearStart \u003e\u003d 0 \u0026\u0026 (yearStart - oneYear) \u003c 0)) {\n                return getYearOverflow(instant);\n            }\n        }\n        if (yearStart \u003c\u003d instant) {\n            year++;\n        }\n    }\n    return year;\n}",
      "path": "JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java",
      "functionStartLine": 390,
      "functionName": "getYear",
      "functionAnnotation": "",
      "functionDoc": "\n@param instant millis from 1970-01-01T00:00:00Z\n",
      "diff": "@@ -1,36 +1,36 @@\n-final int getYear(long instant) {\n+int getYear(long instant) {\n     long unitMillis \u003d getAverageMillisPerYear();\n     long i2 \u003d instant + getApproxMillisAtEpoch();\n     if (i2 \u003c 0) {\n         i2 \u003d i2 - unitMillis + 1;\n     }\n     int year \u003d (int) (i2 / unitMillis);\n     long yearStart \u003d getYearMillis(year);\n     long diff \u003d instant - yearStart;\n     if (diff \u003c 0) {\n         if (diff \u003c -DateTimeConstants.MILLIS_PER_DAY * 2L) {\n             return getYearOverflow(instant);\n         }\n         year--;\n     } else if (diff \u003e\u003d DateTimeConstants.MILLIS_PER_DAY * 365L) {\n         if (diff \u003e\u003d DateTimeConstants.MILLIS_PER_DAY * 367L) {\n             return getYearOverflow(instant);\n         }\n         long oneYear;\n         if (isLeapYear(year)) {\n             oneYear \u003d DateTimeConstants.MILLIS_PER_DAY * 366L;\n         } else {\n             oneYear \u003d DateTimeConstants.MILLIS_PER_DAY * 365L;\n         }\n         yearStart +\u003d oneYear;\n         if ((yearStart ^ instant) \u003c 0) {\n             if ((yearStart \u003c 0 \u0026\u0026 (yearStart - oneYear) \u003e\u003d 0) || (yearStart \u003e\u003d 0 \u0026\u0026 (yearStart - oneYear) \u003c 0)) {\n                 return getYearOverflow(instant);\n             }\n         }\n         if (yearStart \u003c\u003d instant) {\n             year++;\n         }\n     }\n     return year;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[final]",
        "newValue": "[]"
      }
    },
    "6bdd176eed470329a73d7ee08498183e579cea60": {
      "type": "Yfilerename",
      "commitMessage": "Change Chronology to abstract class\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@432 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/22/04, 8:15 AM",
      "commitName": "6bdd176eed470329a73d7ee08498183e579cea60",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/22/04, 7:44 AM",
      "commitNameOld": "5f9b9b675631bda3568df0d47ca305126d426011",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "final int getYear(long instant) {\n    long unitMillis \u003d getAverageMillisPerYear();\n    long i2 \u003d instant + getApproxMillisAtEpoch();\n    if (i2 \u003c 0) {\n        i2 \u003d i2 - unitMillis + 1;\n    }\n    int year \u003d (int) (i2 / unitMillis);\n    long yearStart \u003d getYearMillis(year);\n    long diff \u003d instant - yearStart;\n    if (diff \u003c 0) {\n        if (diff \u003c -DateTimeConstants.MILLIS_PER_DAY * 2L) {\n            return getYearOverflow(instant);\n        }\n        year--;\n    } else if (diff \u003e\u003d DateTimeConstants.MILLIS_PER_DAY * 365L) {\n        if (diff \u003e\u003d DateTimeConstants.MILLIS_PER_DAY * 367L) {\n            return getYearOverflow(instant);\n        }\n        long oneYear;\n        if (isLeapYear(year)) {\n            oneYear \u003d DateTimeConstants.MILLIS_PER_DAY * 366L;\n        } else {\n            oneYear \u003d DateTimeConstants.MILLIS_PER_DAY * 365L;\n        }\n        yearStart +\u003d oneYear;\n        if ((yearStart ^ instant) \u003c 0) {\n            if ((yearStart \u003c 0 \u0026\u0026 (yearStart - oneYear) \u003e\u003d 0) || (yearStart \u003e\u003d 0 \u0026\u0026 (yearStart - oneYear) \u003c 0)) {\n                return getYearOverflow(instant);\n            }\n        }\n        if (yearStart \u003c\u003d instant) {\n            year++;\n        }\n    }\n    return year;\n}",
      "path": "JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java",
      "functionStartLine": 482,
      "functionName": "getYear",
      "functionAnnotation": "",
      "functionDoc": "\n@param instant millis from 1970-01-01T00:00:00Z\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java",
        "newPath": "JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java"
      }
    },
    "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7": {
      "type": "Yintroduced",
      "commitMessage": "Re-organized chronology package and created new field package.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@125 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "1/27/04, 11:12 PM",
      "commitName": "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7",
      "commitAuthor": "Brian S O\u0027Neill",
      "diff": "@@ -0,0 +1,36 @@\n+final int getYear(long instant) {\n+    long unitMillis \u003d getAverageMillisPerYear();\n+    long i2 \u003d instant + getApproxMillisAtEpoch();\n+    if (i2 \u003c 0) {\n+        i2 \u003d i2 - unitMillis + 1;\n+    }\n+    int year \u003d (int) (i2 / unitMillis);\n+    long yearStart \u003d getYearMillis(year);\n+    long diff \u003d instant - yearStart;\n+    if (diff \u003c 0) {\n+        if (diff \u003c -DateTimeConstants.MILLIS_PER_DAY * 2L) {\n+            return getYearOverflow(instant);\n+        }\n+        year--;\n+    } else if (diff \u003e\u003d DateTimeConstants.MILLIS_PER_DAY * 365L) {\n+        if (diff \u003e\u003d DateTimeConstants.MILLIS_PER_DAY * 367L) {\n+            return getYearOverflow(instant);\n+        }\n+        long oneYear;\n+        if (isLeapYear(year)) {\n+            oneYear \u003d DateTimeConstants.MILLIS_PER_DAY * 366L;\n+        } else {\n+            oneYear \u003d DateTimeConstants.MILLIS_PER_DAY * 365L;\n+        }\n+        yearStart +\u003d oneYear;\n+        if ((yearStart ^ instant) \u003c 0) {\n+            if ((yearStart \u003c 0 \u0026\u0026 (yearStart - oneYear) \u003e\u003d 0) || (yearStart \u003e\u003d 0 \u0026\u0026 (yearStart - oneYear) \u003c 0)) {\n+                return getYearOverflow(instant);\n+            }\n+        }\n+        if (yearStart \u003c\u003d instant) {\n+            year++;\n+        }\n+    }\n+    return year;\n+}\n\\ No newline at end of file\n",
      "actualSource": "final int getYear(long instant) {\n    long unitMillis \u003d getAverageMillisPerYear();\n    long i2 \u003d instant + getApproxMillisAtEpoch();\n    if (i2 \u003c 0) {\n        i2 \u003d i2 - unitMillis + 1;\n    }\n    int year \u003d (int) (i2 / unitMillis);\n    long yearStart \u003d getYearMillis(year);\n    long diff \u003d instant - yearStart;\n    if (diff \u003c 0) {\n        if (diff \u003c -DateTimeConstants.MILLIS_PER_DAY * 2L) {\n            return getYearOverflow(instant);\n        }\n        year--;\n    } else if (diff \u003e\u003d DateTimeConstants.MILLIS_PER_DAY * 365L) {\n        if (diff \u003e\u003d DateTimeConstants.MILLIS_PER_DAY * 367L) {\n            return getYearOverflow(instant);\n        }\n        long oneYear;\n        if (isLeapYear(year)) {\n            oneYear \u003d DateTimeConstants.MILLIS_PER_DAY * 366L;\n        } else {\n            oneYear \u003d DateTimeConstants.MILLIS_PER_DAY * 365L;\n        }\n        yearStart +\u003d oneYear;\n        if ((yearStart ^ instant) \u003c 0) {\n            if ((yearStart \u003c 0 \u0026\u0026 (yearStart - oneYear) \u003e\u003d 0) || (yearStart \u003e\u003d 0 \u0026\u0026 (yearStart - oneYear) \u003c 0)) {\n                return getYearOverflow(instant);\n            }\n        }\n        if (yearStart \u003c\u003d instant) {\n            year++;\n        }\n    }\n    return year;\n}",
      "path": "JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java",
      "functionStartLine": 520,
      "functionName": "getYear",
      "functionAnnotation": "",
      "functionDoc": "\n@param instant millis from 1970-01-01T00:00:00Z\n"
    }
  }
}