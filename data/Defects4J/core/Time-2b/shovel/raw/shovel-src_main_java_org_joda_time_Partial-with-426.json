{
  "origin": "codeshovel",
  "repositoryName": "Time-2b",
  "repositoryPath": "/tmp/Time-2b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Partial.java",
  "functionName": "with",
  "functionId": "with___fieldType-DateTimeFieldType__value-int",
  "sourceFilePath": "src/main/java/org/joda/time/Partial.java",
  "functionAnnotation": "",
  "functionDoc": "Gets a copy of this date with the specified field set to a new value.\n\u003cp\u003e\nIf this partial did not previously support the field, the new one will.\nContrast this behaviour with {@link #withField(DateTimeFieldType, int)}.\n\u003cp\u003e\nFor example, if the field type is \u003ccode\u003edayOfMonth\u003c/code\u003e then the day\nwould be changed/added in the returned instance.\n\n@param fieldType the field type to set, not null\n@param value the value to set\n@return a copy of this instance with the field set\n@throws IllegalArgumentException if the value is null or invalid\n",
  "functionStartLine": 426,
  "functionEndLine": 474,
  "numCommitsSeen": 18,
  "timeTaken": 1178,
  "changeHistory": [
    "3ba9ba799b3261b7332a467a88be142c83b298fd",
    "df4a82f4fb46cc2248280c462e18f08d55a3d112",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1",
    "b86efe73e72ece8e5ceeed48d05228aa1725c9ad"
  ],
  "changeHistoryShort": {
    "3ba9ba799b3261b7332a467a88be142c83b298fd": "Ybodychange",
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": "Yfilerename",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": "Yfilerename",
    "b86efe73e72ece8e5ceeed48d05228aa1725c9ad": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3ba9ba799b3261b7332a467a88be142c83b298fd": {
      "type": "Ybodychange",
      "commitMessage": "Prevent creation of invalid partials via Partial.with(DateTimeFieldType,int)\n\nValidation in this method was not as thorough as that in the constructor\nThis allowed invalid partials to be created\nFixes #88\n",
      "commitDate": "11/27/13, 4:36 AM",
      "commitName": "3ba9ba799b3261b7332a467a88be142c83b298fd",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "6/6/12, 3:35 AM",
      "commitNameOld": "66c4a1c10d33243fb0a6f850d350226ab4d55a6c",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 539.08,
      "commitsBetweenForRepo": 124,
      "commitsBetweenForFile": 1,
      "actualSource": "public Partial with(DateTimeFieldType fieldType, int value) {\n    if (fieldType \u003d\u003d null) {\n        throw new IllegalArgumentException(\"The field type must not be null\");\n    }\n    int index \u003d indexOf(fieldType);\n    if (index \u003d\u003d -1) {\n        DateTimeFieldType[] newTypes \u003d new DateTimeFieldType[iTypes.length + 1];\n        int[] newValues \u003d new int[newTypes.length];\n        int i \u003d 0;\n        DurationField unitField \u003d fieldType.getDurationType().getField(iChronology);\n        if (unitField.isSupported()) {\n            for (; i \u003c iTypes.length; i++) {\n                DateTimeFieldType loopType \u003d iTypes[i];\n                DurationField loopUnitField \u003d loopType.getDurationType().getField(iChronology);\n                if (loopUnitField.isSupported()) {\n                    int compare \u003d unitField.compareTo(loopUnitField);\n                    if (compare \u003e 0) {\n                        break;\n                    } else if (compare \u003d\u003d 0) {\n                        DurationField rangeField \u003d fieldType.getRangeDurationType().getField(iChronology);\n                        DurationField loopRangeField \u003d loopType.getRangeDurationType().getField(iChronology);\n                        if (rangeField.compareTo(loopRangeField) \u003e 0) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        System.arraycopy(iTypes, 0, newTypes, 0, i);\n        System.arraycopy(iValues, 0, newValues, 0, i);\n        newTypes[i] \u003d fieldType;\n        newValues[i] \u003d value;\n        System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n        System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n        Partial newPartial \u003d new Partial(newTypes, newValues, iChronology);\n        iChronology.validate(newPartial, newValues);\n        return newPartial;\n    }\n    if (value \u003d\u003d getValue(index)) {\n        return this;\n    }\n    int[] newValues \u003d getValues();\n    newValues \u003d getField(index).set(this, index, newValues, value);\n    return new Partial(this, newValues);\n}",
      "path": "src/main/java/org/joda/time/Partial.java",
      "functionStartLine": 426,
      "functionName": "with",
      "functionAnnotation": "",
      "functionDoc": "Gets a copy of this date with the specified field set to a new value.\n\u003cp\u003e\nIf this partial did not previously support the field, the new one will.\nContrast this behaviour with {@link #withField(DateTimeFieldType, int)}.\n\u003cp\u003e\nFor example, if the field type is \u003ccode\u003edayOfMonth\u003c/code\u003e then the day\nwould be changed/added in the returned instance.\n\n@param fieldType the field type to set, not null\n@param value the value to set\n@return a copy of this instance with the field set\n@throws IllegalArgumentException if the value is null or invalid\n",
      "diff": "@@ -1,45 +1,45 @@\n public Partial with(DateTimeFieldType fieldType, int value) {\n     if (fieldType \u003d\u003d null) {\n         throw new IllegalArgumentException(\"The field type must not be null\");\n     }\n     int index \u003d indexOf(fieldType);\n     if (index \u003d\u003d -1) {\n         DateTimeFieldType[] newTypes \u003d new DateTimeFieldType[iTypes.length + 1];\n         int[] newValues \u003d new int[newTypes.length];\n         int i \u003d 0;\n         DurationField unitField \u003d fieldType.getDurationType().getField(iChronology);\n         if (unitField.isSupported()) {\n             for (; i \u003c iTypes.length; i++) {\n                 DateTimeFieldType loopType \u003d iTypes[i];\n                 DurationField loopUnitField \u003d loopType.getDurationType().getField(iChronology);\n                 if (loopUnitField.isSupported()) {\n                     int compare \u003d unitField.compareTo(loopUnitField);\n                     if (compare \u003e 0) {\n                         break;\n                     } else if (compare \u003d\u003d 0) {\n                         DurationField rangeField \u003d fieldType.getRangeDurationType().getField(iChronology);\n                         DurationField loopRangeField \u003d loopType.getRangeDurationType().getField(iChronology);\n                         if (rangeField.compareTo(loopRangeField) \u003e 0) {\n                             break;\n                         }\n                     }\n                 }\n             }\n         }\n         System.arraycopy(iTypes, 0, newTypes, 0, i);\n         System.arraycopy(iValues, 0, newValues, 0, i);\n         newTypes[i] \u003d fieldType;\n         newValues[i] \u003d value;\n         System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n         System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n-        Partial newPartial \u003d new Partial(iChronology, newTypes, newValues);\n+        Partial newPartial \u003d new Partial(newTypes, newValues, iChronology);\n         iChronology.validate(newPartial, newValues);\n         return newPartial;\n     }\n     if (value \u003d\u003d getValue(index)) {\n         return this;\n     }\n     int[] newValues \u003d getValues();\n     newValues \u003d getField(index).set(this, index, newValues, value);\n     return new Partial(this, newValues);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": {
      "type": "Yfilerename",
      "commitMessage": "Remove JodaTime folder moving files to top level\n",
      "commitDate": "5/16/11, 10:02 AM",
      "commitName": "df4a82f4fb46cc2248280c462e18f08d55a3d112",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "5/16/11, 9:58 AM",
      "commitNameOld": "72b22654962284bac59c2777131b42a2d1f53228",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public Partial with(DateTimeFieldType fieldType, int value) {\n    if (fieldType \u003d\u003d null) {\n        throw new IllegalArgumentException(\"The field type must not be null\");\n    }\n    int index \u003d indexOf(fieldType);\n    if (index \u003d\u003d -1) {\n        DateTimeFieldType[] newTypes \u003d new DateTimeFieldType[iTypes.length + 1];\n        int[] newValues \u003d new int[newTypes.length];\n        int i \u003d 0;\n        DurationField unitField \u003d fieldType.getDurationType().getField(iChronology);\n        if (unitField.isSupported()) {\n            for (; i \u003c iTypes.length; i++) {\n                DateTimeFieldType loopType \u003d iTypes[i];\n                DurationField loopUnitField \u003d loopType.getDurationType().getField(iChronology);\n                if (loopUnitField.isSupported()) {\n                    int compare \u003d unitField.compareTo(loopUnitField);\n                    if (compare \u003e 0) {\n                        break;\n                    } else if (compare \u003d\u003d 0) {\n                        DurationField rangeField \u003d fieldType.getRangeDurationType().getField(iChronology);\n                        DurationField loopRangeField \u003d loopType.getRangeDurationType().getField(iChronology);\n                        if (rangeField.compareTo(loopRangeField) \u003e 0) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        System.arraycopy(iTypes, 0, newTypes, 0, i);\n        System.arraycopy(iValues, 0, newValues, 0, i);\n        newTypes[i] \u003d fieldType;\n        newValues[i] \u003d value;\n        System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n        System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n        Partial newPartial \u003d new Partial(iChronology, newTypes, newValues);\n        iChronology.validate(newPartial, newValues);\n        return newPartial;\n    }\n    if (value \u003d\u003d getValue(index)) {\n        return this;\n    }\n    int[] newValues \u003d getValues();\n    newValues \u003d getField(index).set(this, index, newValues, value);\n    return new Partial(this, newValues);\n}",
      "path": "src/main/java/org/joda/time/Partial.java",
      "functionStartLine": 426,
      "functionName": "with",
      "functionAnnotation": "",
      "functionDoc": "Gets a copy of this date with the specified field set to a new value.\n\u003cp\u003e\nIf this partial did not previously support the field, the new one will.\nContrast this behaviour with {@link #withField(DateTimeFieldType, int)}.\n\u003cp\u003e\nFor example, if the field type is \u003ccode\u003edayOfMonth\u003c/code\u003e then the day\nwould be changed/added in the returned instance.\n\n@param fieldType the field type to set, not null\n@param value the value to set\n@return a copy of this instance with the field set\n@throws IllegalArgumentException if the value is null or invalid\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/main/java/org/joda/time/Partial.java",
        "newPath": "src/main/java/org/joda/time/Partial.java"
      }
    },
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": {
      "type": "Yfilerename",
      "commitMessage": "Convert to maven 2\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1540 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/8/10, 5:17 PM",
      "commitName": "53feb3fa56af7260e607844524b7e5a9be49ecc1",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/8/10, 5:02 PM",
      "commitNameOld": "7fa2ceaf5d95d050095432aa646ea803aa35e122",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public Partial with(DateTimeFieldType fieldType, int value) {\n    if (fieldType \u003d\u003d null) {\n        throw new IllegalArgumentException(\"The field type must not be null\");\n    }\n    int index \u003d indexOf(fieldType);\n    if (index \u003d\u003d -1) {\n        DateTimeFieldType[] newTypes \u003d new DateTimeFieldType[iTypes.length + 1];\n        int[] newValues \u003d new int[newTypes.length];\n        int i \u003d 0;\n        DurationField unitField \u003d fieldType.getDurationType().getField(iChronology);\n        if (unitField.isSupported()) {\n            for (; i \u003c iTypes.length; i++) {\n                DateTimeFieldType loopType \u003d iTypes[i];\n                DurationField loopUnitField \u003d loopType.getDurationType().getField(iChronology);\n                if (loopUnitField.isSupported()) {\n                    int compare \u003d unitField.compareTo(loopUnitField);\n                    if (compare \u003e 0) {\n                        break;\n                    } else if (compare \u003d\u003d 0) {\n                        DurationField rangeField \u003d fieldType.getRangeDurationType().getField(iChronology);\n                        DurationField loopRangeField \u003d loopType.getRangeDurationType().getField(iChronology);\n                        if (rangeField.compareTo(loopRangeField) \u003e 0) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        System.arraycopy(iTypes, 0, newTypes, 0, i);\n        System.arraycopy(iValues, 0, newValues, 0, i);\n        newTypes[i] \u003d fieldType;\n        newValues[i] \u003d value;\n        System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n        System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n        Partial newPartial \u003d new Partial(iChronology, newTypes, newValues);\n        iChronology.validate(newPartial, newValues);\n        return newPartial;\n    }\n    if (value \u003d\u003d getValue(index)) {\n        return this;\n    }\n    int[] newValues \u003d getValues();\n    newValues \u003d getField(index).set(this, index, newValues, value);\n    return new Partial(this, newValues);\n}",
      "path": "JodaTime/src/main/java/org/joda/time/Partial.java",
      "functionStartLine": 426,
      "functionName": "with",
      "functionAnnotation": "",
      "functionDoc": "Gets a copy of this date with the specified field set to a new value.\n\u003cp\u003e\nIf this partial did not previously support the field, the new one will.\nContrast this behaviour with {@link #withField(DateTimeFieldType, int)}.\n\u003cp\u003e\nFor example, if the field type is \u003ccode\u003edayOfMonth\u003c/code\u003e then the day\nwould be changed/added in the returned instance.\n\n@param fieldType the field type to set, not null\n@param value the value to set\n@return a copy of this instance with the field set\n@throws IllegalArgumentException if the value is null or invalid\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/java/org/joda/time/Partial.java",
        "newPath": "JodaTime/src/main/java/org/joda/time/Partial.java"
      }
    },
    "b86efe73e72ece8e5ceeed48d05228aa1725c9ad": {
      "type": "Yintroduced",
      "commitMessage": "Add Partial, new immutable implementation of ReadablePartial\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@796 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "6/26/05, 4:29 PM",
      "commitName": "b86efe73e72ece8e5ceeed48d05228aa1725c9ad",
      "commitAuthor": "Stephen Colebourne",
      "diff": "@@ -0,0 +1,45 @@\n+public Partial with(DateTimeFieldType fieldType, int value) {\n+    if (fieldType \u003d\u003d null) {\n+        throw new IllegalArgumentException(\"The field type must not be null\");\n+    }\n+    int index \u003d indexOf(fieldType);\n+    if (index \u003d\u003d -1) {\n+        DateTimeFieldType[] newTypes \u003d new DateTimeFieldType[iTypes.length + 1];\n+        int[] newValues \u003d new int[newTypes.length];\n+        int i \u003d 0;\n+        DurationField unitField \u003d fieldType.getDurationType().getField(iChronology);\n+        if (unitField.isSupported()) {\n+            for (; i \u003c iTypes.length; i++) {\n+                DateTimeFieldType loopType \u003d iTypes[i];\n+                DurationField loopUnitField \u003d loopType.getDurationType().getField(iChronology);\n+                if (loopUnitField.isSupported()) {\n+                    int compare \u003d unitField.compareTo(loopUnitField);\n+                    if (compare \u003e 0) {\n+                        break;\n+                    } else if (compare \u003d\u003d 0) {\n+                        DurationField rangeField \u003d fieldType.getRangeDurationType().getField(iChronology);\n+                        DurationField loopRangeField \u003d loopType.getRangeDurationType().getField(iChronology);\n+                        if (rangeField.compareTo(loopRangeField) \u003e 0) {\n+                            break;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        System.arraycopy(iTypes, 0, newTypes, 0, i);\n+        System.arraycopy(iValues, 0, newValues, 0, i);\n+        newTypes[i] \u003d fieldType;\n+        newValues[i] \u003d value;\n+        System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n+        System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n+        Partial newPartial \u003d new Partial(iChronology, newTypes, newValues);\n+        iChronology.validate(newPartial, newValues);\n+        return newPartial;\n+    }\n+    if (value \u003d\u003d getValue(index)) {\n+        return this;\n+    }\n+    int[] newValues \u003d getValues();\n+    newValues \u003d getField(index).set(this, index, newValues, value);\n+    return new Partial(this, newValues);\n+}\n\\ No newline at end of file\n",
      "actualSource": "public Partial with(DateTimeFieldType fieldType, int value) {\n    if (fieldType \u003d\u003d null) {\n        throw new IllegalArgumentException(\"The field type must not be null\");\n    }\n    int index \u003d indexOf(fieldType);\n    if (index \u003d\u003d -1) {\n        DateTimeFieldType[] newTypes \u003d new DateTimeFieldType[iTypes.length + 1];\n        int[] newValues \u003d new int[newTypes.length];\n        int i \u003d 0;\n        DurationField unitField \u003d fieldType.getDurationType().getField(iChronology);\n        if (unitField.isSupported()) {\n            for (; i \u003c iTypes.length; i++) {\n                DateTimeFieldType loopType \u003d iTypes[i];\n                DurationField loopUnitField \u003d loopType.getDurationType().getField(iChronology);\n                if (loopUnitField.isSupported()) {\n                    int compare \u003d unitField.compareTo(loopUnitField);\n                    if (compare \u003e 0) {\n                        break;\n                    } else if (compare \u003d\u003d 0) {\n                        DurationField rangeField \u003d fieldType.getRangeDurationType().getField(iChronology);\n                        DurationField loopRangeField \u003d loopType.getRangeDurationType().getField(iChronology);\n                        if (rangeField.compareTo(loopRangeField) \u003e 0) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        System.arraycopy(iTypes, 0, newTypes, 0, i);\n        System.arraycopy(iValues, 0, newValues, 0, i);\n        newTypes[i] \u003d fieldType;\n        newValues[i] \u003d value;\n        System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n        System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n        Partial newPartial \u003d new Partial(iChronology, newTypes, newValues);\n        iChronology.validate(newPartial, newValues);\n        return newPartial;\n    }\n    if (value \u003d\u003d getValue(index)) {\n        return this;\n    }\n    int[] newValues \u003d getValues();\n    newValues \u003d getField(index).set(this, index, newValues, value);\n    return new Partial(this, newValues);\n}",
      "path": "JodaTime/src/java/org/joda/time/Partial.java",
      "functionStartLine": 418,
      "functionName": "with",
      "functionAnnotation": "",
      "functionDoc": "Gets a copy of this date with the specified field set to a new value.\n\u003cp\u003e\nIf this partial did not previously support the field, the new one will.\nContrast this behaviour with {@link #withField(DateTimeFieldType, int)}.\n\u003cp\u003e\nFor example, if the field type is \u003ccode\u003edayOfMonth\u003c/code\u003e then the day\nwould be changed/added in the returned instance.\n\n@param fieldType the field type to set, not null\n@param value the value to set\n@return a copy of this instance with the field set\n@throws IllegalArgumentException if the value is null or invalid\n"
    }
  }
}