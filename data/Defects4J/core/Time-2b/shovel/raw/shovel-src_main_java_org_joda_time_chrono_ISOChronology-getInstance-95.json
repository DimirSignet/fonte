{
  "origin": "codeshovel",
  "repositoryName": "Time-2b",
  "repositoryPath": "/tmp/Time-2b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ISOChronology.java",
  "functionName": "getInstance",
  "functionId": "getInstance___zone-DateTimeZone",
  "sourceFilePath": "src/main/java/org/joda/time/chrono/ISOChronology.java",
  "functionAnnotation": "",
  "functionDoc": "Gets an instance of the ISOChronology in the given time zone.\n\n@param zone the time zone to get the chronology in, null is default\n@return a chronology in the specified time zone\n",
  "functionStartLine": 95,
  "functionEndLine": 113,
  "numCommitsSeen": 22,
  "timeTaken": 880,
  "changeHistory": [
    "df4a82f4fb46cc2248280c462e18f08d55a3d112",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1",
    "3f1e047c898c9c925e1faac33bb07e1cb05d88cb",
    "a26563f0cd1fbdd5587a0f9d3c0c77864553d737",
    "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7",
    "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb"
  ],
  "changeHistoryShort": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": "Yfilerename",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": "Yfilerename",
    "3f1e047c898c9c925e1faac33bb07e1cb05d88cb": "Ybodychange",
    "a26563f0cd1fbdd5587a0f9d3c0c77864553d737": "Ybodychange",
    "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7": "Ymultichange(Yfilerename,Ybodychange)",
    "0e07ac6b2cff63550d7df336355ca63cc05aa40b": "Ymultichange(Ymodifierchange,Ybodychange)",
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb": "Yintroduced"
  },
  "changeHistoryDetails": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": {
      "type": "Yfilerename",
      "commitMessage": "Remove JodaTime folder moving files to top level\n",
      "commitDate": "5/16/11, 10:02 AM",
      "commitName": "df4a82f4fb46cc2248280c462e18f08d55a3d112",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "5/16/11, 9:58 AM",
      "commitNameOld": "72b22654962284bac59c2777131b42a2d1f53228",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static ISOChronology getInstance(DateTimeZone zone) {\n    if (zone \u003d\u003d null) {\n        zone \u003d DateTimeZone.getDefault();\n    }\n    int index \u003d System.identityHashCode(zone) \u0026 (FAST_CACHE_SIZE - 1);\n    ISOChronology chrono \u003d cFastCache[index];\n    if (chrono !\u003d null \u0026\u0026 chrono.getZone() \u003d\u003d zone) {\n        return chrono;\n    }\n    synchronized (cCache) {\n        chrono \u003d cCache.get(zone);\n        if (chrono \u003d\u003d null) {\n            chrono \u003d new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));\n            cCache.put(zone, chrono);\n        }\n    }\n    cFastCache[index] \u003d chrono;\n    return chrono;\n}",
      "path": "src/main/java/org/joda/time/chrono/ISOChronology.java",
      "functionStartLine": 95,
      "functionName": "getInstance",
      "functionAnnotation": "",
      "functionDoc": "Gets an instance of the ISOChronology in the given time zone.\n\n@param zone the time zone to get the chronology in, null is default\n@return a chronology in the specified time zone\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/main/java/org/joda/time/chrono/ISOChronology.java",
        "newPath": "src/main/java/org/joda/time/chrono/ISOChronology.java"
      }
    },
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": {
      "type": "Yfilerename",
      "commitMessage": "Convert to maven 2\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1540 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/8/10, 5:17 PM",
      "commitName": "53feb3fa56af7260e607844524b7e5a9be49ecc1",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/8/10, 5:02 PM",
      "commitNameOld": "7fa2ceaf5d95d050095432aa646ea803aa35e122",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static ISOChronology getInstance(DateTimeZone zone) {\n    if (zone \u003d\u003d null) {\n        zone \u003d DateTimeZone.getDefault();\n    }\n    int index \u003d System.identityHashCode(zone) \u0026 (FAST_CACHE_SIZE - 1);\n    ISOChronology chrono \u003d cFastCache[index];\n    if (chrono !\u003d null \u0026\u0026 chrono.getZone() \u003d\u003d zone) {\n        return chrono;\n    }\n    synchronized (cCache) {\n        chrono \u003d cCache.get(zone);\n        if (chrono \u003d\u003d null) {\n            chrono \u003d new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));\n            cCache.put(zone, chrono);\n        }\n    }\n    cFastCache[index] \u003d chrono;\n    return chrono;\n}",
      "path": "JodaTime/src/main/java/org/joda/time/chrono/ISOChronology.java",
      "functionStartLine": 95,
      "functionName": "getInstance",
      "functionAnnotation": "",
      "functionDoc": "Gets an instance of the ISOChronology in the given time zone.\n\n@param zone the time zone to get the chronology in, null is default\n@return a chronology in the specified time zone\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/java/org/joda/time/chrono/ISOChronology.java",
        "newPath": "JodaTime/src/main/java/org/joda/time/chrono/ISOChronology.java"
      }
    },
    "3f1e047c898c9c925e1faac33bb07e1cb05d88cb": {
      "type": "Ybodychange",
      "commitMessage": "Move to Java 5 with generics\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1406 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "11/4/09, 3:55 PM",
      "commitName": "3f1e047c898c9c925e1faac33bb07e1cb05d88cb",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/12/08, 2:41 PM",
      "commitNameOld": "2490507fb702a44b888984ec0df4e067953b6af2",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 449.09,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "actualSource": "public static ISOChronology getInstance(DateTimeZone zone) {\n    if (zone \u003d\u003d null) {\n        zone \u003d DateTimeZone.getDefault();\n    }\n    int index \u003d System.identityHashCode(zone) \u0026 (FAST_CACHE_SIZE - 1);\n    ISOChronology chrono \u003d cFastCache[index];\n    if (chrono !\u003d null \u0026\u0026 chrono.getZone() \u003d\u003d zone) {\n        return chrono;\n    }\n    synchronized (cCache) {\n        chrono \u003d cCache.get(zone);\n        if (chrono \u003d\u003d null) {\n            chrono \u003d new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));\n            cCache.put(zone, chrono);\n        }\n    }\n    cFastCache[index] \u003d chrono;\n    return chrono;\n}",
      "path": "JodaTime/src/java/org/joda/time/chrono/ISOChronology.java",
      "functionStartLine": 95,
      "functionName": "getInstance",
      "functionAnnotation": "",
      "functionDoc": "Gets an instance of the ISOChronology in the given time zone.\n\n@param zone the time zone to get the chronology in, null is default\n@return a chronology in the specified time zone\n",
      "diff": "@@ -1,19 +1,19 @@\n public static ISOChronology getInstance(DateTimeZone zone) {\n     if (zone \u003d\u003d null) {\n         zone \u003d DateTimeZone.getDefault();\n     }\n     int index \u003d System.identityHashCode(zone) \u0026 (FAST_CACHE_SIZE - 1);\n     ISOChronology chrono \u003d cFastCache[index];\n     if (chrono !\u003d null \u0026\u0026 chrono.getZone() \u003d\u003d zone) {\n         return chrono;\n     }\n     synchronized (cCache) {\n-        chrono \u003d (ISOChronology) cCache.get(zone);\n+        chrono \u003d cCache.get(zone);\n         if (chrono \u003d\u003d null) {\n             chrono \u003d new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));\n             cCache.put(zone, chrono);\n         }\n     }\n     cFastCache[index] \u003d chrono;\n     return chrono;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a26563f0cd1fbdd5587a0f9d3c0c77864553d737": {
      "type": "Ybodychange",
      "commitMessage": "Rename getDateTimeZone methods to getZone etc\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@177 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "4/14/04, 4:43 PM",
      "commitName": "a26563f0cd1fbdd5587a0f9d3c0c77864553d737",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "2/15/04, 10:45 AM",
      "commitNameOld": "93e4ec9fdb473f51636508c051800360865c6198",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 59.21,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "actualSource": "public static ISOChronology getInstance(DateTimeZone zone) {\n    if (zone \u003d\u003d null) {\n        zone \u003d DateTimeZone.getDefault();\n    }\n    int index \u003d System.identityHashCode(zone) \u0026 (FAST_CACHE_SIZE - 1);\n    ISOChronology chrono \u003d cFastCache[index];\n    if (chrono !\u003d null \u0026\u0026 chrono.getZone() \u003d\u003d zone) {\n        return chrono;\n    }\n    synchronized (cCache) {\n        chrono \u003d (ISOChronology) cCache.get(zone);\n        if (chrono \u003d\u003d null) {\n            chrono \u003d new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));\n            cCache.put(zone, chrono);\n        }\n    }\n    cFastCache[index] \u003d chrono;\n    return chrono;\n}",
      "path": "JodaTime/src/java/org/joda/time/chrono/ISOChronology.java",
      "functionStartLine": 131,
      "functionName": "getInstance",
      "functionAnnotation": "",
      "functionDoc": "Gets an instance of the ISOChronology in the given time zone.\n\n@param zone the time zone to get the chronology in, null is default\n@return a chronology in the specified time zone\n",
      "diff": "@@ -1,19 +1,19 @@\n public static ISOChronology getInstance(DateTimeZone zone) {\n     if (zone \u003d\u003d null) {\n         zone \u003d DateTimeZone.getDefault();\n     }\n     int index \u003d System.identityHashCode(zone) \u0026 (FAST_CACHE_SIZE - 1);\n     ISOChronology chrono \u003d cFastCache[index];\n-    if (chrono !\u003d null \u0026\u0026 chrono.getDateTimeZone() \u003d\u003d zone) {\n+    if (chrono !\u003d null \u0026\u0026 chrono.getZone() \u003d\u003d zone) {\n         return chrono;\n     }\n     synchronized (cCache) {\n         chrono \u003d (ISOChronology) cCache.get(zone);\n         if (chrono \u003d\u003d null) {\n             chrono \u003d new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));\n             cCache.put(zone, chrono);\n         }\n     }\n     cFastCache[index] \u003d chrono;\n     return chrono;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "Re-organized chronology package and created new field package.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@125 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "1/27/04, 11:12 PM",
      "commitName": "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7",
      "commitAuthor": "Brian S O\u0027Neill",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "Re-organized chronology package and created new field package.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@125 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "1/27/04, 11:12 PM",
          "commitName": "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7",
          "commitAuthor": "Brian S O\u0027Neill",
          "commitDateOld": "1/11/04, 9:39 AM",
          "commitNameOld": "6f5522f58c1d2abdec37b5d22e5981716d4ec731",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 16.56,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static ISOChronology getInstance(DateTimeZone zone) {\n    if (zone \u003d\u003d null) {\n        zone \u003d DateTimeZone.getDefault();\n    }\n    int index \u003d System.identityHashCode(zone) \u0026 (FAST_CACHE_SIZE - 1);\n    ISOChronology chrono \u003d cFastCache[index];\n    if (chrono !\u003d null \u0026\u0026 chrono.getDateTimeZone() \u003d\u003d zone) {\n        return chrono;\n    }\n    synchronized (cCache) {\n        chrono \u003d (ISOChronology) cCache.get(zone);\n        if (chrono \u003d\u003d null) {\n            chrono \u003d new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));\n            cCache.put(zone, chrono);\n        }\n    }\n    cFastCache[index] \u003d chrono;\n    return chrono;\n}",
          "path": "JodaTime/src/java/org/joda/time/chrono/ISOChronology.java",
          "functionStartLine": 124,
          "functionName": "getInstance",
          "functionAnnotation": "",
          "functionDoc": "Gets an instance of the ISOChronology in the given time zone.\n\n@param zone the time zone to get the chronology in, null is default\n@return a chronology in the specified time zone\n",
          "diff": "@@ -1,19 +1,19 @@\n public static ISOChronology getInstance(DateTimeZone zone) {\n     if (zone \u003d\u003d null) {\n         zone \u003d DateTimeZone.getDefault();\n     }\n     int index \u003d System.identityHashCode(zone) \u0026 (FAST_CACHE_SIZE - 1);\n     ISOChronology chrono \u003d cFastCache[index];\n     if (chrono !\u003d null \u0026\u0026 chrono.getDateTimeZone() \u003d\u003d zone) {\n         return chrono;\n     }\n     synchronized (cCache) {\n         chrono \u003d (ISOChronology) cCache.get(zone);\n         if (chrono \u003d\u003d null) {\n-            chrono \u003d new ISOChronology(GJChronology.getInstance(zone, Long.MIN_VALUE, true));\n+            chrono \u003d new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));\n             cCache.put(zone, chrono);\n         }\n     }\n     cFastCache[index] \u003d chrono;\n     return chrono;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java",
            "newPath": "JodaTime/src/java/org/joda/time/chrono/ISOChronology.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Re-organized chronology package and created new field package.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@125 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "1/27/04, 11:12 PM",
          "commitName": "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7",
          "commitAuthor": "Brian S O\u0027Neill",
          "commitDateOld": "1/11/04, 9:39 AM",
          "commitNameOld": "6f5522f58c1d2abdec37b5d22e5981716d4ec731",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 16.56,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static ISOChronology getInstance(DateTimeZone zone) {\n    if (zone \u003d\u003d null) {\n        zone \u003d DateTimeZone.getDefault();\n    }\n    int index \u003d System.identityHashCode(zone) \u0026 (FAST_CACHE_SIZE - 1);\n    ISOChronology chrono \u003d cFastCache[index];\n    if (chrono !\u003d null \u0026\u0026 chrono.getDateTimeZone() \u003d\u003d zone) {\n        return chrono;\n    }\n    synchronized (cCache) {\n        chrono \u003d (ISOChronology) cCache.get(zone);\n        if (chrono \u003d\u003d null) {\n            chrono \u003d new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));\n            cCache.put(zone, chrono);\n        }\n    }\n    cFastCache[index] \u003d chrono;\n    return chrono;\n}",
          "path": "JodaTime/src/java/org/joda/time/chrono/ISOChronology.java",
          "functionStartLine": 124,
          "functionName": "getInstance",
          "functionAnnotation": "",
          "functionDoc": "Gets an instance of the ISOChronology in the given time zone.\n\n@param zone the time zone to get the chronology in, null is default\n@return a chronology in the specified time zone\n",
          "diff": "@@ -1,19 +1,19 @@\n public static ISOChronology getInstance(DateTimeZone zone) {\n     if (zone \u003d\u003d null) {\n         zone \u003d DateTimeZone.getDefault();\n     }\n     int index \u003d System.identityHashCode(zone) \u0026 (FAST_CACHE_SIZE - 1);\n     ISOChronology chrono \u003d cFastCache[index];\n     if (chrono !\u003d null \u0026\u0026 chrono.getDateTimeZone() \u003d\u003d zone) {\n         return chrono;\n     }\n     synchronized (cCache) {\n         chrono \u003d (ISOChronology) cCache.get(zone);\n         if (chrono \u003d\u003d null) {\n-            chrono \u003d new ISOChronology(GJChronology.getInstance(zone, Long.MIN_VALUE, true));\n+            chrono \u003d new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));\n             cCache.put(zone, chrono);\n         }\n     }\n     cFastCache[index] \u003d chrono;\n     return chrono;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "0e07ac6b2cff63550d7df336355ca63cc05aa40b": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "Move from Joda CVS\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@10 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "12/18/03, 6:07 PM",
      "commitName": "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "Move from Joda CVS\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@10 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "12/18/03, 6:07 PM",
          "commitName": "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "12/16/03, 1:39 PM",
          "commitNameOld": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 2.19,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "public static ISOChronology getInstance(DateTimeZone zone) {\n    if (zone \u003d\u003d null) {\n        zone \u003d DateTimeZone.getDefault();\n    }\n    int index \u003d System.identityHashCode(zone) \u0026 (FAST_CACHE_SIZE - 1);\n    ISOChronology chrono \u003d cFastCache[index];\n    if (chrono !\u003d null \u0026\u0026 chrono.getDateTimeZone() \u003d\u003d zone) {\n        return chrono;\n    }\n    synchronized (cCache) {\n        chrono \u003d (ISOChronology) cCache.get(zone);\n        if (chrono \u003d\u003d null) {\n            chrono \u003d new ISOChronology(GJChronology.getInstance(zone, Long.MIN_VALUE, true));\n            cCache.put(zone, chrono);\n        }\n    }\n    cFastCache[index] \u003d chrono;\n    return chrono;\n}",
          "path": "JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java",
          "functionStartLine": 124,
          "functionName": "getInstance",
          "functionAnnotation": "",
          "functionDoc": "Gets an instance of the ISOChronology in the given time zone.\n\n@param zone the time zone to get the chronology in, null is default\n@return a chronology in the specified time zone\n",
          "diff": "@@ -1,11 +1,19 @@\n-public static synchronized ISOChronology getInstance(DateTimeZone zone) {\n+public static ISOChronology getInstance(DateTimeZone zone) {\n     if (zone \u003d\u003d null) {\n         zone \u003d DateTimeZone.getDefault();\n     }\n-    ISOChronology chrono \u003d (ISOChronology) cCache.get(zone);\n-    if (chrono \u003d\u003d null) {\n-        chrono \u003d new ISOChronology(GJChronology.getInstance(zone, Long.MIN_VALUE, true));\n-        cCache.put(zone, chrono);\n+    int index \u003d System.identityHashCode(zone) \u0026 (FAST_CACHE_SIZE - 1);\n+    ISOChronology chrono \u003d cFastCache[index];\n+    if (chrono !\u003d null \u0026\u0026 chrono.getDateTimeZone() \u003d\u003d zone) {\n+        return chrono;\n     }\n+    synchronized (cCache) {\n+        chrono \u003d (ISOChronology) cCache.get(zone);\n+        if (chrono \u003d\u003d null) {\n+            chrono \u003d new ISOChronology(GJChronology.getInstance(zone, Long.MIN_VALUE, true));\n+            cCache.put(zone, chrono);\n+        }\n+    }\n+    cFastCache[index] \u003d chrono;\n     return chrono;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[public, static, synchronized]",
            "newValue": "[public, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Move from Joda CVS\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@10 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "12/18/03, 6:07 PM",
          "commitName": "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "12/16/03, 1:39 PM",
          "commitNameOld": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 2.19,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "public static ISOChronology getInstance(DateTimeZone zone) {\n    if (zone \u003d\u003d null) {\n        zone \u003d DateTimeZone.getDefault();\n    }\n    int index \u003d System.identityHashCode(zone) \u0026 (FAST_CACHE_SIZE - 1);\n    ISOChronology chrono \u003d cFastCache[index];\n    if (chrono !\u003d null \u0026\u0026 chrono.getDateTimeZone() \u003d\u003d zone) {\n        return chrono;\n    }\n    synchronized (cCache) {\n        chrono \u003d (ISOChronology) cCache.get(zone);\n        if (chrono \u003d\u003d null) {\n            chrono \u003d new ISOChronology(GJChronology.getInstance(zone, Long.MIN_VALUE, true));\n            cCache.put(zone, chrono);\n        }\n    }\n    cFastCache[index] \u003d chrono;\n    return chrono;\n}",
          "path": "JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java",
          "functionStartLine": 124,
          "functionName": "getInstance",
          "functionAnnotation": "",
          "functionDoc": "Gets an instance of the ISOChronology in the given time zone.\n\n@param zone the time zone to get the chronology in, null is default\n@return a chronology in the specified time zone\n",
          "diff": "@@ -1,11 +1,19 @@\n-public static synchronized ISOChronology getInstance(DateTimeZone zone) {\n+public static ISOChronology getInstance(DateTimeZone zone) {\n     if (zone \u003d\u003d null) {\n         zone \u003d DateTimeZone.getDefault();\n     }\n-    ISOChronology chrono \u003d (ISOChronology) cCache.get(zone);\n-    if (chrono \u003d\u003d null) {\n-        chrono \u003d new ISOChronology(GJChronology.getInstance(zone, Long.MIN_VALUE, true));\n-        cCache.put(zone, chrono);\n+    int index \u003d System.identityHashCode(zone) \u0026 (FAST_CACHE_SIZE - 1);\n+    ISOChronology chrono \u003d cFastCache[index];\n+    if (chrono !\u003d null \u0026\u0026 chrono.getDateTimeZone() \u003d\u003d zone) {\n+        return chrono;\n     }\n+    synchronized (cCache) {\n+        chrono \u003d (ISOChronology) cCache.get(zone);\n+        if (chrono \u003d\u003d null) {\n+            chrono \u003d new ISOChronology(GJChronology.getInstance(zone, Long.MIN_VALUE, true));\n+            cCache.put(zone, chrono);\n+        }\n+    }\n+    cFastCache[index] \u003d chrono;\n     return chrono;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb": {
      "type": "Yintroduced",
      "commitMessage": "Move version 0.9 to joda-time repository\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@4 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "12/16/03, 1:39 PM",
      "commitName": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
      "commitAuthor": "Stephen Colebourne",
      "diff": "@@ -0,0 +1,11 @@\n+public static synchronized ISOChronology getInstance(DateTimeZone zone) {\n+    if (zone \u003d\u003d null) {\n+        zone \u003d DateTimeZone.getDefault();\n+    }\n+    ISOChronology chrono \u003d (ISOChronology) cCache.get(zone);\n+    if (chrono \u003d\u003d null) {\n+        chrono \u003d new ISOChronology(GJChronology.getInstance(zone, Long.MIN_VALUE, true));\n+        cCache.put(zone, chrono);\n+    }\n+    return chrono;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public static synchronized ISOChronology getInstance(DateTimeZone zone) {\n    if (zone \u003d\u003d null) {\n        zone \u003d DateTimeZone.getDefault();\n    }\n    ISOChronology chrono \u003d (ISOChronology) cCache.get(zone);\n    if (chrono \u003d\u003d null) {\n        chrono \u003d new ISOChronology(GJChronology.getInstance(zone, Long.MIN_VALUE, true));\n        cCache.put(zone, chrono);\n    }\n    return chrono;\n}",
      "path": "JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java",
      "functionStartLine": 111,
      "functionName": "getInstance",
      "functionAnnotation": "",
      "functionDoc": "Gets an instance of the ISOChronology in the given time zone.\n\n@param zone the time zone to get the chronology in, null is default\n@return a chronology in the specified time zone\n"
    }
  }
}