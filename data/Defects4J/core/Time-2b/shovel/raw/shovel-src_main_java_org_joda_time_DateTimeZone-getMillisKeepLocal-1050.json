{
  "origin": "codeshovel",
  "repositoryName": "Time-2b",
  "repositoryPath": "/tmp/Time-2b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DateTimeZone.java",
  "functionName": "getMillisKeepLocal",
  "functionId": "getMillisKeepLocal___newZone-DateTimeZone__oldInstant-long",
  "sourceFilePath": "src/main/java/org/joda/time/DateTimeZone.java",
  "functionAnnotation": "",
  "functionDoc": "Gets the millisecond instant in another zone keeping the same local time.\n\u003cp\u003e\nThe conversion is performed by converting the specified UTC millis to local\nmillis in this zone, then converting back to UTC millis in the new zone.\n\n@param newZone the new zone, null means default\n@param oldInstant the UTC millisecond instant to convert\n@return the UTC millisecond instant with the same local time in the new zone\n",
  "functionStartLine": 1050,
  "functionEndLine": 1059,
  "numCommitsSeen": 59,
  "timeTaken": 2579,
  "changeHistory": [
    "df4a82f4fb46cc2248280c462e18f08d55a3d112",
    "5bb92d135b5ff9bf696af6fa92d406912af78c5d",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1",
    "5bc953f3cf3629a86991eac7703608603d303b7d",
    "a5b05944d52519cc70d86d1f59fe1c0e8d2e8956"
  ],
  "changeHistoryShort": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": "Yfilerename",
    "5bb92d135b5ff9bf696af6fa92d406912af78c5d": "Ybodychange",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": "Yfilerename",
    "5bc953f3cf3629a86991eac7703608603d303b7d": "Ybodychange",
    "a5b05944d52519cc70d86d1f59fe1c0e8d2e8956": "Yintroduced"
  },
  "changeHistoryDetails": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": {
      "type": "Yfilerename",
      "commitMessage": "Remove JodaTime folder moving files to top level\n",
      "commitDate": "5/16/11, 10:02 AM",
      "commitName": "df4a82f4fb46cc2248280c462e18f08d55a3d112",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "5/16/11, 9:58 AM",
      "commitNameOld": "72b22654962284bac59c2777131b42a2d1f53228",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant) {\n    if (newZone \u003d\u003d null) {\n        newZone \u003d DateTimeZone.getDefault();\n    }\n    if (newZone \u003d\u003d this) {\n        return oldInstant;\n    }\n    long instantLocal \u003d convertUTCToLocal(oldInstant);\n    return newZone.convertLocalToUTC(instantLocal, false, oldInstant);\n}",
      "path": "src/main/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 1027,
      "functionName": "getMillisKeepLocal",
      "functionAnnotation": "",
      "functionDoc": "Gets the millisecond instant in another zone keeping the same local time.\n\u003cp\u003e\nThe conversion is performed by converting the specified UTC millis to local\nmillis in this zone, then converting back to UTC millis in the new zone.\n\n@param newZone the new zone, null means default\n@param oldInstant the UTC millisecond instant to convert\n@return the UTC millisecond instant with the same local time in the new zone\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/main/java/org/joda/time/DateTimeZone.java",
        "newPath": "src/main/java/org/joda/time/DateTimeZone.java"
      }
    },
    "5bb92d135b5ff9bf696af6fa92d406912af78c5d": {
      "type": "Ybodychange",
      "commitMessage": "DateTimeZone.getMillisKeepLocal\nThe behaviour now retains the offset when changing zones where possible\nThis affects DateTime.withZoneRetainFields and MutableDateTime.setZoneRetainFields\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1604 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "2/4/11, 5:52 PM",
      "commitName": "5bb92d135b5ff9bf696af6fa92d406912af78c5d",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "12/5/10, 3:43 PM",
      "commitNameOld": "552be4b677ec30a34d04d234395ba1a8c7beaacf",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 61.09,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant) {\n    if (newZone \u003d\u003d null) {\n        newZone \u003d DateTimeZone.getDefault();\n    }\n    if (newZone \u003d\u003d this) {\n        return oldInstant;\n    }\n    long instantLocal \u003d convertUTCToLocal(oldInstant);\n    return newZone.convertLocalToUTC(instantLocal, false, oldInstant);\n}",
      "path": "JodaTime/src/main/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 1026,
      "functionName": "getMillisKeepLocal",
      "functionAnnotation": "",
      "functionDoc": "Gets the millisecond instant in another zone keeping the same local time.\n\u003cp\u003e\nThe conversion is performed by converting the specified UTC millis to local\nmillis in this zone, then converting back to UTC millis in the new zone.\n\n@param newZone the new zone, null means default\n@param oldInstant the UTC millisecond instant to convert\n@return the UTC millisecond instant with the same local time in the new zone\n",
      "diff": "@@ -1,10 +1,10 @@\n public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant) {\n     if (newZone \u003d\u003d null) {\n         newZone \u003d DateTimeZone.getDefault();\n     }\n     if (newZone \u003d\u003d this) {\n         return oldInstant;\n     }\n-    long instantLocal \u003d oldInstant + getOffset(oldInstant);\n-    return instantLocal - newZone.getOffsetFromLocal(instantLocal);\n+    long instantLocal \u003d convertUTCToLocal(oldInstant);\n+    return newZone.convertLocalToUTC(instantLocal, false, oldInstant);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": {
      "type": "Yfilerename",
      "commitMessage": "Convert to maven 2\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1540 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/8/10, 5:17 PM",
      "commitName": "53feb3fa56af7260e607844524b7e5a9be49ecc1",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/8/10, 5:02 PM",
      "commitNameOld": "7fa2ceaf5d95d050095432aa646ea803aa35e122",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant) {\n    if (newZone \u003d\u003d null) {\n        newZone \u003d DateTimeZone.getDefault();\n    }\n    if (newZone \u003d\u003d this) {\n        return oldInstant;\n    }\n    long instantLocal \u003d oldInstant + getOffset(oldInstant);\n    return instantLocal - newZone.getOffsetFromLocal(instantLocal);\n}",
      "path": "JodaTime/src/main/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 970,
      "functionName": "getMillisKeepLocal",
      "functionAnnotation": "",
      "functionDoc": "Gets the millisecond instant in another zone keeping the same local time.\n\u003cp\u003e\nThe conversion is performed by converting the specified UTC millis to local\nmillis in this zone, then converting back to UTC millis in the new zone.\n\n@param newZone the new zone, null means default\n@param oldInstant the UTC millisecond instant to convert\n@return the UTC millisecond instant with the same local time in the new zone\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
        "newPath": "JodaTime/src/main/java/org/joda/time/DateTimeZone.java"
      }
    },
    "5bc953f3cf3629a86991eac7703608603d303b7d": {
      "type": "Ybodychange",
      "commitMessage": "Optimise when converting local milliseconds to the same zone\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1064 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "4/8/06, 3:42 AM",
      "commitName": "5bc953f3cf3629a86991eac7703608603d303b7d",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "12/4/05, 2:02 PM",
      "commitNameOld": "8c5d6902ca81488fc8c9ffce33bfc0774afc2194",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 124.53,
      "commitsBetweenForRepo": 100,
      "commitsBetweenForFile": 1,
      "actualSource": "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant) {\n    if (newZone \u003d\u003d null) {\n        newZone \u003d DateTimeZone.getDefault();\n    }\n    if (newZone \u003d\u003d this) {\n        return oldInstant;\n    }\n    long instantLocal \u003d oldInstant + getOffset(oldInstant);\n    return instantLocal - newZone.getOffsetFromLocal(instantLocal);\n}",
      "path": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 836,
      "functionName": "getMillisKeepLocal",
      "functionAnnotation": "",
      "functionDoc": "Gets the millisecond instant in another zone keeping the same local time.\n\u003cp\u003e\nThe conversion is performed by converting the specified UTC millis to local\nmillis in this zone, then converting back to UTC millis in the new zone.\n\n@param newZone the new zone, null means default\n@param oldInstant the UTC millisecond instant to convert\n@return the UTC millisecond instant with the same local time in the new zone\n",
      "diff": "@@ -1,7 +1,10 @@\n public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant) {\n     if (newZone \u003d\u003d null) {\n         newZone \u003d DateTimeZone.getDefault();\n     }\n+    if (newZone \u003d\u003d this) {\n+        return oldInstant;\n+    }\n     long instantLocal \u003d oldInstant + getOffset(oldInstant);\n     return instantLocal - newZone.getOffsetFromLocal(instantLocal);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a5b05944d52519cc70d86d1f59fe1c0e8d2e8956": {
      "type": "Yintroduced",
      "commitMessage": "Add getMillisKeepLocal to DateTimeZone\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@303 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "7/17/04, 9:49 AM",
      "commitName": "a5b05944d52519cc70d86d1f59fe1c0e8d2e8956",
      "commitAuthor": "Stephen Colebourne",
      "diff": "@@ -0,0 +1,7 @@\n+public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant) {\n+    if (newZone \u003d\u003d null) {\n+        newZone \u003d DateTimeZone.getDefault();\n+    }\n+    long instantLocal \u003d oldInstant + getOffset(oldInstant);\n+    return instantLocal - newZone.getOffsetFromLocal(instantLocal);\n+}\n\\ No newline at end of file\n",
      "actualSource": "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant) {\n    if (newZone \u003d\u003d null) {\n        newZone \u003d DateTimeZone.getDefault();\n    }\n    long instantLocal \u003d oldInstant + getOffset(oldInstant);\n    return instantLocal - newZone.getOffsetFromLocal(instantLocal);\n}",
      "path": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 732,
      "functionName": "getMillisKeepLocal",
      "functionAnnotation": "",
      "functionDoc": "Gets the millisecond instant in another zone keeping the same local time.\n\u003cp\u003e\nThe conversion is performed by converting the specified UTC millis to local\nmillis in this zone, then converting back to UTC millis in the new zone.\n\n@param newZone the new zone, null means default\n@param oldInstant the UTC millisecond instant to convert\n@return the UTC millisecond instant with the same local time in the new zone\n"
    }
  }
}