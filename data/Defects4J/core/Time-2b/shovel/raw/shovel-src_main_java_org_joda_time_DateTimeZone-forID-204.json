{
  "origin": "codeshovel",
  "repositoryName": "Time-2b",
  "repositoryPath": "/tmp/Time-2b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DateTimeZone.java",
  "functionName": "forID",
  "functionId": "forID___id-String",
  "sourceFilePath": "src/main/java/org/joda/time/DateTimeZone.java",
  "functionAnnotation": "@FromString",
  "functionDoc": "Gets a time zone instance for the specified time zone id.\n\u003cp\u003e\nThe time zone id may be one of those returned by getAvailableIDs.\nShort ids, as accepted by {@link java.util.TimeZone}, are not accepted.\nAll IDs must be specified in the long format.\nThe exception is UTC, which is an acceptable id.\n\u003cp\u003e\nAlternatively a locale independent, fixed offset, datetime zone can\nbe specified. The form \u003ccode\u003e[+-]hh:mm\u003c/code\u003e can be used.\n\n@param id the ID of the datetime zone, null means default\n@return the DateTimeZone object for the ID\n@throws IllegalArgumentException if the ID is not recognised\n",
  "functionStartLine": 204,
  "functionEndLine": 225,
  "numCommitsSeen": 78,
  "timeTaken": 2604,
  "changeHistory": [
    "df4a82f4fb46cc2248280c462e18f08d55a3d112",
    "218a7fe91a685e089ab8fd7700806f7a6083f18d",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1",
    "51ed4026310a311e21eba19fee9df3c66c67c4cc",
    "0531e3dc4fe73eacc1742644a8847c2dd9dc9466",
    "8a58750637798ab015fa79019e935c89acdf00fa",
    "b9978566282eb4278d4c4018e2030c14372965d9",
    "efd27481a9b4c84bf9a05be83c6048ac4956e02b",
    "6cad802018b6b82ea4df53aaf91a0bbc98b2f9a3",
    "7f03615bbb526d5030926e0446ebca21ad6931e6",
    "6682ab2abccb5819ec2e62a1f3f9018945bed9cd",
    "a26563f0cd1fbdd5587a0f9d3c0c77864553d737",
    "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb"
  ],
  "changeHistoryShort": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": "Yfilerename",
    "218a7fe91a685e089ab8fd7700806f7a6083f18d": "Yannotationchange",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": "Yfilerename",
    "51ed4026310a311e21eba19fee9df3c66c67c4cc": "Ybodychange",
    "0531e3dc4fe73eacc1742644a8847c2dd9dc9466": "Ybodychange",
    "8a58750637798ab015fa79019e935c89acdf00fa": "Ymultichange(Yrename,Yexceptionschange,Ydocchange)",
    "b9978566282eb4278d4c4018e2030c14372965d9": "Ybodychange",
    "efd27481a9b4c84bf9a05be83c6048ac4956e02b": "Ybodychange",
    "6cad802018b6b82ea4df53aaf91a0bbc98b2f9a3": "Ybodychange",
    "7f03615bbb526d5030926e0446ebca21ad6931e6": "Ybodychange",
    "6682ab2abccb5819ec2e62a1f3f9018945bed9cd": "Ymultichange(Ybodychange,Ydocchange)",
    "a26563f0cd1fbdd5587a0f9d3c0c77864553d737": "Ybodychange",
    "0e07ac6b2cff63550d7df336355ca63cc05aa40b": "Ybodychange",
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb": "Yintroduced"
  },
  "changeHistoryDetails": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": {
      "type": "Yfilerename",
      "commitMessage": "Remove JodaTime folder moving files to top level\n",
      "commitDate": "5/16/11, 10:02 AM",
      "commitName": "df4a82f4fb46cc2248280c462e18f08d55a3d112",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "5/16/11, 9:58 AM",
      "commitNameOld": "72b22654962284bac59c2777131b42a2d1f53228",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@FromString\npublic static DateTimeZone forID(String id) {\n    if (id \u003d\u003d null) {\n        return getDefault();\n    }\n    if (id.equals(\"UTC\")) {\n        return DateTimeZone.UTC;\n    }\n    DateTimeZone zone \u003d cProvider.getZone(id);\n    if (zone !\u003d null) {\n        return zone;\n    }\n    if (id.startsWith(\"+\") || id.startsWith(\"-\")) {\n        int offset \u003d parseOffset(id);\n        if (offset \u003d\u003d 0L) {\n            return DateTimeZone.UTC;\n        } else {\n            id \u003d printOffset(offset);\n            return fixedOffsetZone(id, offset);\n        }\n    }\n    throw new IllegalArgumentException(\"The datetime zone id \u0027\" + id + \"\u0027 is not recognised\");\n}",
      "path": "src/main/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 203,
      "functionName": "forID",
      "functionAnnotation": "@FromString",
      "functionDoc": "Gets a time zone instance for the specified time zone id.\n\u003cp\u003e\nThe time zone id may be one of those returned by getAvailableIDs.\nShort ids, as accepted by {@link java.util.TimeZone}, are not accepted.\nAll IDs must be specified in the long format.\nThe exception is UTC, which is an acceptable id.\n\u003cp\u003e\nAlternatively a locale independent, fixed offset, datetime zone can\nbe specified. The form \u003ccode\u003e[+-]hh:mm\u003c/code\u003e can be used.\n\n@param id the ID of the datetime zone, null means default\n@return the DateTimeZone object for the ID\n@throws IllegalArgumentException if the ID is not recognised\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/main/java/org/joda/time/DateTimeZone.java",
        "newPath": "src/main/java/org/joda/time/DateTimeZone.java"
      }
    },
    "218a7fe91a685e089ab8fd7700806f7a6083f18d": {
      "type": "Yannotationchange",
      "commitMessage": "Add FromString and ToString to DateTimeZone\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1594 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "12/4/10, 4:19 PM",
      "commitName": "218a7fe91a685e089ab8fd7700806f7a6083f18d",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "10/27/10, 3:26 PM",
      "commitNameOld": "d090b642dc04259286d3478cfa49f1da2f0755e6",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 38.08,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "@FromString\npublic static DateTimeZone forID(String id) {\n    if (id \u003d\u003d null) {\n        return getDefault();\n    }\n    if (id.equals(\"UTC\")) {\n        return DateTimeZone.UTC;\n    }\n    DateTimeZone zone \u003d cProvider.getZone(id);\n    if (zone !\u003d null) {\n        return zone;\n    }\n    if (id.startsWith(\"+\") || id.startsWith(\"-\")) {\n        int offset \u003d parseOffset(id);\n        if (offset \u003d\u003d 0L) {\n            return DateTimeZone.UTC;\n        } else {\n            id \u003d printOffset(offset);\n            return fixedOffsetZone(id, offset);\n        }\n    }\n    throw new IllegalArgumentException(\"The datetime zone id \u0027\" + id + \"\u0027 is not recognised\");\n}",
      "path": "JodaTime/src/main/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 203,
      "functionName": "forID",
      "functionAnnotation": "@FromString",
      "functionDoc": "Gets a time zone instance for the specified time zone id.\n\u003cp\u003e\nThe time zone id may be one of those returned by getAvailableIDs.\nShort ids, as accepted by {@link java.util.TimeZone}, are not accepted.\nAll IDs must be specified in the long format.\nThe exception is UTC, which is an acceptable id.\n\u003cp\u003e\nAlternatively a locale independent, fixed offset, datetime zone can\nbe specified. The form \u003ccode\u003e[+-]hh:mm\u003c/code\u003e can be used.\n\n@param id the ID of the datetime zone, null means default\n@return the DateTimeZone object for the ID\n@throws IllegalArgumentException if the ID is not recognised\n",
      "diff": "@@ -1,22 +1,23 @@\n+@FromString\n public static DateTimeZone forID(String id) {\n     if (id \u003d\u003d null) {\n         return getDefault();\n     }\n     if (id.equals(\"UTC\")) {\n         return DateTimeZone.UTC;\n     }\n     DateTimeZone zone \u003d cProvider.getZone(id);\n     if (zone !\u003d null) {\n         return zone;\n     }\n     if (id.startsWith(\"+\") || id.startsWith(\"-\")) {\n         int offset \u003d parseOffset(id);\n         if (offset \u003d\u003d 0L) {\n             return DateTimeZone.UTC;\n         } else {\n             id \u003d printOffset(offset);\n             return fixedOffsetZone(id, offset);\n         }\n     }\n     throw new IllegalArgumentException(\"The datetime zone id \u0027\" + id + \"\u0027 is not recognised\");\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "",
        "newValue": "@FromString"
      }
    },
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": {
      "type": "Yfilerename",
      "commitMessage": "Convert to maven 2\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1540 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/8/10, 5:17 PM",
      "commitName": "53feb3fa56af7260e607844524b7e5a9be49ecc1",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/8/10, 5:02 PM",
      "commitNameOld": "7fa2ceaf5d95d050095432aa646ea803aa35e122",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static DateTimeZone forID(String id) {\n    if (id \u003d\u003d null) {\n        return getDefault();\n    }\n    if (id.equals(\"UTC\")) {\n        return DateTimeZone.UTC;\n    }\n    DateTimeZone zone \u003d cProvider.getZone(id);\n    if (zone !\u003d null) {\n        return zone;\n    }\n    if (id.startsWith(\"+\") || id.startsWith(\"-\")) {\n        int offset \u003d parseOffset(id);\n        if (offset \u003d\u003d 0L) {\n            return DateTimeZone.UTC;\n        } else {\n            id \u003d printOffset(offset);\n            return fixedOffsetZone(id, offset);\n        }\n    }\n    throw new IllegalArgumentException(\"The datetime zone id \u0027\" + id + \"\u0027 is not recognised\");\n}",
      "path": "JodaTime/src/main/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 188,
      "functionName": "forID",
      "functionAnnotation": "",
      "functionDoc": "Gets a time zone instance for the specified time zone id.\n\u003cp\u003e\nThe time zone id may be one of those returned by getAvailableIDs.\nShort ids, as accepted by {@link java.util.TimeZone}, are not accepted.\nAll IDs must be specified in the long format.\nThe exception is UTC, which is an acceptable id.\n\u003cp\u003e\nAlternatively a locale independent, fixed offset, datetime zone can\nbe specified. The form \u003ccode\u003e[+-]hh:mm\u003c/code\u003e can be used.\n\n@param id the ID of the datetime zone, null means default\n@return the DateTimeZone object for the ID\n@throws IllegalArgumentException if the ID is not recognised\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
        "newPath": "JodaTime/src/main/java/org/joda/time/DateTimeZone.java"
      }
    },
    "51ed4026310a311e21eba19fee9df3c66c67c4cc": {
      "type": "Ybodychange",
      "commitMessage": "Better error messages for invalid time zone ids [2781835]\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1388 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "5/2/09, 4:22 PM",
      "commitName": "51ed4026310a311e21eba19fee9df3c66c67c4cc",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "10/27/08, 4:30 PM",
      "commitNameOld": "330377634b073f7e5ba36ccbb123f921426d2542",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 187.0,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "actualSource": "public static DateTimeZone forID(String id) {\n    if (id \u003d\u003d null) {\n        return getDefault();\n    }\n    if (id.equals(\"UTC\")) {\n        return DateTimeZone.UTC;\n    }\n    DateTimeZone zone \u003d cProvider.getZone(id);\n    if (zone !\u003d null) {\n        return zone;\n    }\n    if (id.startsWith(\"+\") || id.startsWith(\"-\")) {\n        int offset \u003d parseOffset(id);\n        if (offset \u003d\u003d 0L) {\n            return DateTimeZone.UTC;\n        } else {\n            id \u003d printOffset(offset);\n            return fixedOffsetZone(id, offset);\n        }\n    }\n    throw new IllegalArgumentException(\"The datetime zone id \u0027\" + id + \"\u0027 is not recognised\");\n}",
      "path": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 179,
      "functionName": "forID",
      "functionAnnotation": "",
      "functionDoc": "Gets a time zone instance for the specified time zone id.\n\u003cp\u003e\nThe time zone id may be one of those returned by getAvailableIDs.\nShort ids, as accepted by {@link java.util.TimeZone}, are not accepted.\nAll IDs must be specified in the long format.\nThe exception is UTC, which is an acceptable id.\n\u003cp\u003e\nAlternatively a locale independent, fixed offset, datetime zone can\nbe specified. The form \u003ccode\u003e[+-]hh:mm\u003c/code\u003e can be used.\n\n@param id the ID of the datetime zone, null means default\n@return the DateTimeZone object for the ID\n@throws IllegalArgumentException if the ID is not recognised\n",
      "diff": "@@ -1,22 +1,22 @@\n public static DateTimeZone forID(String id) {\n     if (id \u003d\u003d null) {\n         return getDefault();\n     }\n     if (id.equals(\"UTC\")) {\n         return DateTimeZone.UTC;\n     }\n     DateTimeZone zone \u003d cProvider.getZone(id);\n     if (zone !\u003d null) {\n         return zone;\n     }\n     if (id.startsWith(\"+\") || id.startsWith(\"-\")) {\n         int offset \u003d parseOffset(id);\n         if (offset \u003d\u003d 0L) {\n             return DateTimeZone.UTC;\n         } else {\n             id \u003d printOffset(offset);\n             return fixedOffsetZone(id, offset);\n         }\n     }\n-    throw new IllegalArgumentException(\"The datetime zone id is not recognised: \" + id);\n+    throw new IllegalArgumentException(\"The datetime zone id \u0027\" + id + \"\u0027 is not recognised\");\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0531e3dc4fe73eacc1742644a8847c2dd9dc9466": {
      "type": "Ybodychange",
      "commitMessage": "Remove unused code\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@846 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/3/05, 3:07 PM",
      "commitName": "0531e3dc4fe73eacc1742644a8847c2dd9dc9466",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "2/17/05, 4:08 PM",
      "commitNameOld": "ad1be7578f5822b29a3b14149f462298d6b5553d",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 166.92,
      "commitsBetweenForRepo": 125,
      "commitsBetweenForFile": 1,
      "actualSource": "public static DateTimeZone forID(String id) {\n    if (id \u003d\u003d null) {\n        return getDefault();\n    }\n    if (id.equals(\"UTC\")) {\n        return DateTimeZone.UTC;\n    }\n    DateTimeZone zone \u003d cProvider.getZone(id);\n    if (zone !\u003d null) {\n        return zone;\n    }\n    if (id.startsWith(\"+\") || id.startsWith(\"-\")) {\n        int offset \u003d parseOffset(id);\n        if (offset \u003d\u003d 0L) {\n            return DateTimeZone.UTC;\n        } else {\n            id \u003d printOffset(offset);\n            return fixedOffsetZone(id, offset);\n        }\n    }\n    throw new IllegalArgumentException(\"The datetime zone id is not recognised: \" + id);\n}",
      "path": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 178,
      "functionName": "forID",
      "functionAnnotation": "",
      "functionDoc": "Gets a time zone instance for the specified time zone id.\n\u003cp\u003e\nThe time zone id may be one of those returned by getAvailableIDs.\nShort ids, as accepted by {@link java.util.TimeZone}, are not accepted.\nAll IDs must be specified in the long format.\nThe exception is UTC, which is an acceptable id.\n\u003cp\u003e\nAlternatively a locale independent, fixed offset, datetime zone can\nbe specified. The form \u003ccode\u003e[+-]hh:mm\u003c/code\u003e can be used.\n\n@param id the ID of the datetime zone, null means default\n@return the DateTimeZone object for the ID\n@throws IllegalArgumentException if the ID is not recognised\n",
      "diff": "@@ -1,23 +1,22 @@\n public static DateTimeZone forID(String id) {\n     if (id \u003d\u003d null) {\n         return getDefault();\n     }\n     if (id.equals(\"UTC\")) {\n         return DateTimeZone.UTC;\n     }\n     DateTimeZone zone \u003d cProvider.getZone(id);\n     if (zone !\u003d null) {\n         return zone;\n     }\n     if (id.startsWith(\"+\") || id.startsWith(\"-\")) {\n         int offset \u003d parseOffset(id);\n         if (offset \u003d\u003d 0L) {\n             return DateTimeZone.UTC;\n         } else {\n-            StringBuffer buf \u003d new StringBuffer();\n             id \u003d printOffset(offset);\n             return fixedOffsetZone(id, offset);\n         }\n     }\n     throw new IllegalArgumentException(\"The datetime zone id is not recognised: \" + id);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "8a58750637798ab015fa79019e935c89acdf00fa": {
      "type": "Ymultichange(Yrename,Yexceptionschange,Ydocchange)",
      "commitMessage": "Change DateTimeZone to use forXxx factory methods\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@680 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "2/12/05, 3:23 PM",
      "commitName": "8a58750637798ab015fa79019e935c89acdf00fa",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "Change DateTimeZone to use forXxx factory methods\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@680 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "2/12/05, 3:23 PM",
          "commitName": "8a58750637798ab015fa79019e935c89acdf00fa",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "2/7/05, 3:51 PM",
          "commitNameOld": "bf9c0997431172e5d0c4d52b218fd92a225ed5ac",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 4.98,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "actualSource": "public static DateTimeZone forID(String id) {\n    if (id \u003d\u003d null) {\n        return getDefault();\n    }\n    if (id.equals(\"UTC\")) {\n        return DateTimeZone.UTC;\n    }\n    DateTimeZone zone \u003d cProvider.getZone(id);\n    if (zone !\u003d null) {\n        return zone;\n    }\n    if (id.startsWith(\"+\") || id.startsWith(\"-\")) {\n        int offset \u003d parseOffset(id);\n        if (offset \u003d\u003d 0L) {\n            return DateTimeZone.UTC;\n        } else {\n            StringBuffer buf \u003d new StringBuffer();\n            id \u003d printOffset(offset);\n            return fixedOffsetZone(id, offset);\n        }\n    }\n    throw new IllegalArgumentException(\"The datetime zone id is not recognised: \" + id);\n}",
          "path": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
          "functionStartLine": 178,
          "functionName": "forID",
          "functionAnnotation": "",
          "functionDoc": "Gets a time zone instance for the specified time zone id.\n\u003cp\u003e\nThe time zone id may be one of those returned by getAvailableIDs.\nShort ids, as accepted by {@link java.util.TimeZone}, are not accepted.\nAll IDs must be specified in the long format.\nThe exception is UTC, which is an acceptable id.\n\u003cp\u003e\nAlternatively a locale independent, fixed offset, datetime zone can\nbe specified. The form \u003ccode\u003e[+-]hh:mm\u003c/code\u003e can be used.\n\n@param id the ID of the datetime zone, null means default\n@return the DateTimeZone object for the ID\n@throws IllegalArgumentException if the ID is not recognised\n",
          "diff": "@@ -1,23 +1,23 @@\n-public static DateTimeZone getInstance(String id) throws IllegalArgumentException {\n+public static DateTimeZone forID(String id) {\n     if (id \u003d\u003d null) {\n         return getDefault();\n     }\n     if (id.equals(\"UTC\")) {\n         return DateTimeZone.UTC;\n     }\n     DateTimeZone zone \u003d cProvider.getZone(id);\n     if (zone !\u003d null) {\n         return zone;\n     }\n     if (id.startsWith(\"+\") || id.startsWith(\"-\")) {\n         int offset \u003d parseOffset(id);\n         if (offset \u003d\u003d 0L) {\n             return DateTimeZone.UTC;\n         } else {\n             StringBuffer buf \u003d new StringBuffer();\n             id \u003d printOffset(offset);\n             return fixedOffsetZone(id, offset);\n         }\n     }\n     throw new IllegalArgumentException(\"The datetime zone id is not recognised: \" + id);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "getInstance",
            "newValue": "forID"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "Change DateTimeZone to use forXxx factory methods\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@680 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "2/12/05, 3:23 PM",
          "commitName": "8a58750637798ab015fa79019e935c89acdf00fa",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "2/7/05, 3:51 PM",
          "commitNameOld": "bf9c0997431172e5d0c4d52b218fd92a225ed5ac",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 4.98,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "actualSource": "public static DateTimeZone forID(String id) {\n    if (id \u003d\u003d null) {\n        return getDefault();\n    }\n    if (id.equals(\"UTC\")) {\n        return DateTimeZone.UTC;\n    }\n    DateTimeZone zone \u003d cProvider.getZone(id);\n    if (zone !\u003d null) {\n        return zone;\n    }\n    if (id.startsWith(\"+\") || id.startsWith(\"-\")) {\n        int offset \u003d parseOffset(id);\n        if (offset \u003d\u003d 0L) {\n            return DateTimeZone.UTC;\n        } else {\n            StringBuffer buf \u003d new StringBuffer();\n            id \u003d printOffset(offset);\n            return fixedOffsetZone(id, offset);\n        }\n    }\n    throw new IllegalArgumentException(\"The datetime zone id is not recognised: \" + id);\n}",
          "path": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
          "functionStartLine": 178,
          "functionName": "forID",
          "functionAnnotation": "",
          "functionDoc": "Gets a time zone instance for the specified time zone id.\n\u003cp\u003e\nThe time zone id may be one of those returned by getAvailableIDs.\nShort ids, as accepted by {@link java.util.TimeZone}, are not accepted.\nAll IDs must be specified in the long format.\nThe exception is UTC, which is an acceptable id.\n\u003cp\u003e\nAlternatively a locale independent, fixed offset, datetime zone can\nbe specified. The form \u003ccode\u003e[+-]hh:mm\u003c/code\u003e can be used.\n\n@param id the ID of the datetime zone, null means default\n@return the DateTimeZone object for the ID\n@throws IllegalArgumentException if the ID is not recognised\n",
          "diff": "@@ -1,23 +1,23 @@\n-public static DateTimeZone getInstance(String id) throws IllegalArgumentException {\n+public static DateTimeZone forID(String id) {\n     if (id \u003d\u003d null) {\n         return getDefault();\n     }\n     if (id.equals(\"UTC\")) {\n         return DateTimeZone.UTC;\n     }\n     DateTimeZone zone \u003d cProvider.getZone(id);\n     if (zone !\u003d null) {\n         return zone;\n     }\n     if (id.startsWith(\"+\") || id.startsWith(\"-\")) {\n         int offset \u003d parseOffset(id);\n         if (offset \u003d\u003d 0L) {\n             return DateTimeZone.UTC;\n         } else {\n             StringBuffer buf \u003d new StringBuffer();\n             id \u003d printOffset(offset);\n             return fixedOffsetZone(id, offset);\n         }\n     }\n     throw new IllegalArgumentException(\"The datetime zone id is not recognised: \" + id);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[IllegalArgumentException]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Change DateTimeZone to use forXxx factory methods\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@680 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "2/12/05, 3:23 PM",
          "commitName": "8a58750637798ab015fa79019e935c89acdf00fa",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "2/7/05, 3:51 PM",
          "commitNameOld": "bf9c0997431172e5d0c4d52b218fd92a225ed5ac",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 4.98,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "actualSource": "public static DateTimeZone forID(String id) {\n    if (id \u003d\u003d null) {\n        return getDefault();\n    }\n    if (id.equals(\"UTC\")) {\n        return DateTimeZone.UTC;\n    }\n    DateTimeZone zone \u003d cProvider.getZone(id);\n    if (zone !\u003d null) {\n        return zone;\n    }\n    if (id.startsWith(\"+\") || id.startsWith(\"-\")) {\n        int offset \u003d parseOffset(id);\n        if (offset \u003d\u003d 0L) {\n            return DateTimeZone.UTC;\n        } else {\n            StringBuffer buf \u003d new StringBuffer();\n            id \u003d printOffset(offset);\n            return fixedOffsetZone(id, offset);\n        }\n    }\n    throw new IllegalArgumentException(\"The datetime zone id is not recognised: \" + id);\n}",
          "path": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
          "functionStartLine": 178,
          "functionName": "forID",
          "functionAnnotation": "",
          "functionDoc": "Gets a time zone instance for the specified time zone id.\n\u003cp\u003e\nThe time zone id may be one of those returned by getAvailableIDs.\nShort ids, as accepted by {@link java.util.TimeZone}, are not accepted.\nAll IDs must be specified in the long format.\nThe exception is UTC, which is an acceptable id.\n\u003cp\u003e\nAlternatively a locale independent, fixed offset, datetime zone can\nbe specified. The form \u003ccode\u003e[+-]hh:mm\u003c/code\u003e can be used.\n\n@param id the ID of the datetime zone, null means default\n@return the DateTimeZone object for the ID\n@throws IllegalArgumentException if the ID is not recognised\n",
          "diff": "@@ -1,23 +1,23 @@\n-public static DateTimeZone getInstance(String id) throws IllegalArgumentException {\n+public static DateTimeZone forID(String id) {\n     if (id \u003d\u003d null) {\n         return getDefault();\n     }\n     if (id.equals(\"UTC\")) {\n         return DateTimeZone.UTC;\n     }\n     DateTimeZone zone \u003d cProvider.getZone(id);\n     if (zone !\u003d null) {\n         return zone;\n     }\n     if (id.startsWith(\"+\") || id.startsWith(\"-\")) {\n         int offset \u003d parseOffset(id);\n         if (offset \u003d\u003d 0L) {\n             return DateTimeZone.UTC;\n         } else {\n             StringBuffer buf \u003d new StringBuffer();\n             id \u003d printOffset(offset);\n             return fixedOffsetZone(id, offset);\n         }\n     }\n     throw new IllegalArgumentException(\"The datetime zone id is not recognised: \" + id);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Get the time zone by id.\n\u003cp\u003e\nThe time zone id may be one of those returned by getAvailableIDs.\nShort ids, as accepted by {@link java.util.TimeZone}, are not accepted.\nAll IDs must be specified in the long format.\nThe exception is UTC, which is an acceptable id.\n\u003cp\u003e\nAlternatively a locale independent, fixed offset, datetime zone can\nbe specified. The form \u003ccode\u003e[+-]hh:mm\u003c/code\u003e can be used.\n\n@param id the ID of the datetime zone, null means default\n@return the DateTimeZone object for the ID\n@throws IllegalArgumentException if the ID is not recognised\n",
            "newValue": "Gets a time zone instance for the specified time zone id.\n\u003cp\u003e\nThe time zone id may be one of those returned by getAvailableIDs.\nShort ids, as accepted by {@link java.util.TimeZone}, are not accepted.\nAll IDs must be specified in the long format.\nThe exception is UTC, which is an acceptable id.\n\u003cp\u003e\nAlternatively a locale independent, fixed offset, datetime zone can\nbe specified. The form \u003ccode\u003e[+-]hh:mm\u003c/code\u003e can be used.\n\n@param id the ID of the datetime zone, null means default\n@return the DateTimeZone object for the ID\n@throws IllegalArgumentException if the ID is not recognised\n"
          }
        }
      ]
    },
    "b9978566282eb4278d4c4018e2030c14372965d9": {
      "type": "Ybodychange",
      "commitMessage": "Bug fix setting default zone if DST is off.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@601 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "12/11/04, 1:53 PM",
      "commitName": "b9978566282eb4278d4c4018e2030c14372965d9",
      "commitAuthor": "Brian S O\u0027Neill",
      "commitDateOld": "12/1/04, 8:37 AM",
      "commitNameOld": "efd27481a9b4c84bf9a05be83c6048ac4956e02b",
      "commitAuthorOld": "Brian S O\u0027Neill",
      "daysBetweenCommits": 10.22,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "public static DateTimeZone getInstance(String id) throws IllegalArgumentException {\n    if (id \u003d\u003d null) {\n        return getDefault();\n    }\n    if (id.equals(\"UTC\")) {\n        return DateTimeZone.UTC;\n    }\n    DateTimeZone zone \u003d cProvider.getZone(id);\n    if (zone !\u003d null) {\n        return zone;\n    }\n    if (id.startsWith(\"+\") || id.startsWith(\"-\")) {\n        int offset \u003d parseOffset(id);\n        if (offset \u003d\u003d 0L) {\n            return DateTimeZone.UTC;\n        } else {\n            StringBuffer buf \u003d new StringBuffer();\n            id \u003d printOffset(offset);\n            return fixedOffsetZone(id, offset);\n        }\n    }\n    throw new IllegalArgumentException(\"The datetime zone id is not recognised: \" + id);\n}",
      "path": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 213,
      "functionName": "getInstance",
      "functionAnnotation": "",
      "functionDoc": "Get the time zone by id.\n\u003cp\u003e\nThe time zone id may be one of those returned by getAvailableIDs.\nShort ids, as accepted by {@link java.util.TimeZone}, are not accepted.\nAll IDs must be specified in the long format.\nThe exception is UTC, which is an acceptable id.\n\u003cp\u003e\nAlternatively a locale independent, fixed offset, datetime zone can\nbe specified. The form \u003ccode\u003e[+-]hh:mm\u003c/code\u003e can be used.\n\n@param id the ID of the datetime zone, null means default\n@return the DateTimeZone object for the ID\n@throws IllegalArgumentException if the ID is not recognised\n",
      "diff": "@@ -1,23 +1,23 @@\n public static DateTimeZone getInstance(String id) throws IllegalArgumentException {\n     if (id \u003d\u003d null) {\n         return getDefault();\n     }\n     if (id.equals(\"UTC\")) {\n         return DateTimeZone.UTC;\n     }\n     DateTimeZone zone \u003d cProvider.getZone(id);\n     if (zone !\u003d null) {\n         return zone;\n     }\n     if (id.startsWith(\"+\") || id.startsWith(\"-\")) {\n-        int offset \u003d -(int) offsetFormatter().parseMillis(id, ISOChronology.getInstance(UTC));\n+        int offset \u003d parseOffset(id);\n         if (offset \u003d\u003d 0L) {\n             return DateTimeZone.UTC;\n         } else {\n             StringBuffer buf \u003d new StringBuffer();\n-            id \u003d printTimeZone(offset);\n+            id \u003d printOffset(offset);\n             return fixedOffsetZone(id, offset);\n         }\n     }\n     throw new IllegalArgumentException(\"The datetime zone id is not recognised: \" + id);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "efd27481a9b4c84bf9a05be83c6048ac4956e02b": {
      "type": "Ybodychange",
      "commitMessage": "Bux fix handing offset based default time zones\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@592 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "12/1/04, 8:37 AM",
      "commitName": "efd27481a9b4c84bf9a05be83c6048ac4956e02b",
      "commitAuthor": "Brian S O\u0027Neill",
      "commitDateOld": "11/5/04, 4:16 PM",
      "commitNameOld": "6892714b99ed388c1f9f8f55f114fcb602186fa6",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 25.68,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "actualSource": "public static DateTimeZone getInstance(String id) throws IllegalArgumentException {\n    if (id \u003d\u003d null) {\n        return getDefault();\n    }\n    if (id.equals(\"UTC\")) {\n        return DateTimeZone.UTC;\n    }\n    DateTimeZone zone \u003d cProvider.getZone(id);\n    if (zone !\u003d null) {\n        return zone;\n    }\n    if (id.startsWith(\"+\") || id.startsWith(\"-\")) {\n        int offset \u003d -(int) offsetFormatter().parseMillis(id, ISOChronology.getInstance(UTC));\n        if (offset \u003d\u003d 0L) {\n            return DateTimeZone.UTC;\n        } else {\n            StringBuffer buf \u003d new StringBuffer();\n            id \u003d printTimeZone(offset);\n            return fixedOffsetZone(id, offset);\n        }\n    }\n    throw new IllegalArgumentException(\"The datetime zone id is not recognised: \" + id);\n}",
      "path": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 223,
      "functionName": "getInstance",
      "functionAnnotation": "",
      "functionDoc": "Get the time zone by id.\n\u003cp\u003e\nThe time zone id may be one of those returned by getAvailableIDs.\nShort ids, as accepted by {@link java.util.TimeZone}, are not accepted.\nAll IDs must be specified in the long format.\nThe exception is UTC, which is an acceptable id.\n\u003cp\u003e\nAlternatively a locale independent, fixed offset, datetime zone can\nbe specified. The form \u003ccode\u003e[+-]hh:mm\u003c/code\u003e can be used.\n\n@param id the ID of the datetime zone, null means default\n@return the DateTimeZone object for the ID\n@throws IllegalArgumentException if the ID is not recognised\n",
      "diff": "@@ -1,23 +1,23 @@\n public static DateTimeZone getInstance(String id) throws IllegalArgumentException {\n     if (id \u003d\u003d null) {\n         return getDefault();\n     }\n     if (id.equals(\"UTC\")) {\n         return DateTimeZone.UTC;\n     }\n     DateTimeZone zone \u003d cProvider.getZone(id);\n     if (zone !\u003d null) {\n         return zone;\n     }\n     if (id.startsWith(\"+\") || id.startsWith(\"-\")) {\n-        int offset \u003d -(int) offsetFormatter().parseMillis(id);\n+        int offset \u003d -(int) offsetFormatter().parseMillis(id, ISOChronology.getInstance(UTC));\n         if (offset \u003d\u003d 0L) {\n             return DateTimeZone.UTC;\n         } else {\n             StringBuffer buf \u003d new StringBuffer();\n             id \u003d printTimeZone(offset);\n             return fixedOffsetZone(id, offset);\n         }\n     }\n     throw new IllegalArgumentException(\"The datetime zone id is not recognised: \" + id);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6cad802018b6b82ea4df53aaf91a0bbc98b2f9a3": {
      "type": "Ybodychange",
      "commitMessage": "Refactor format package to use late binding of chronology\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@543 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "10/28/04, 3:56 PM",
      "commitName": "6cad802018b6b82ea4df53aaf91a0bbc98b2f9a3",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/22/04, 7:38 AM",
      "commitNameOld": "4062cef5ffd76dff4fca40236eb15c79820e86c6",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 67.35,
      "commitsBetweenForRepo": 115,
      "commitsBetweenForFile": 1,
      "actualSource": "public static DateTimeZone getInstance(String id) throws IllegalArgumentException {\n    if (id \u003d\u003d null) {\n        return getDefault();\n    }\n    if (id.equals(\"UTC\")) {\n        return DateTimeZone.UTC;\n    }\n    DateTimeZone zone \u003d cProvider.getZone(id);\n    if (zone !\u003d null) {\n        return zone;\n    }\n    if (id.startsWith(\"+\") || id.startsWith(\"-\")) {\n        int offset \u003d -(int) offsetFormatter().parseMillis(id);\n        if (offset \u003d\u003d 0L) {\n            return DateTimeZone.UTC;\n        } else {\n            StringBuffer buf \u003d new StringBuffer();\n            id \u003d printTimeZone(offset);\n            return fixedOffsetZone(id, offset);\n        }\n    }\n    throw new IllegalArgumentException(\"The datetime zone id is not recognised: \" + id);\n}",
      "path": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 216,
      "functionName": "getInstance",
      "functionAnnotation": "",
      "functionDoc": "Get the time zone by id.\n\u003cp\u003e\nThe time zone id may be one of those returned by getAvailableIDs.\nShort ids, as accepted by {@link java.util.TimeZone}, are not accepted.\nAll IDs must be specified in the long format.\nThe exception is UTC, which is an acceptable id.\n\u003cp\u003e\nAlternatively a locale independent, fixed offset, datetime zone can\nbe specified. The form \u003ccode\u003e[+-]hh:mm\u003c/code\u003e can be used.\n\n@param id the ID of the datetime zone, null means default\n@return the DateTimeZone object for the ID\n@throws IllegalArgumentException if the ID is not recognised\n",
      "diff": "@@ -1,22 +1,23 @@\n public static DateTimeZone getInstance(String id) throws IllegalArgumentException {\n     if (id \u003d\u003d null) {\n         return getDefault();\n     }\n     if (id.equals(\"UTC\")) {\n         return DateTimeZone.UTC;\n     }\n     DateTimeZone zone \u003d cProvider.getZone(id);\n     if (zone !\u003d null) {\n         return zone;\n     }\n     if (id.startsWith(\"+\") || id.startsWith(\"-\")) {\n         int offset \u003d -(int) offsetFormatter().parseMillis(id);\n         if (offset \u003d\u003d 0L) {\n             return DateTimeZone.UTC;\n         } else {\n-            id \u003d offsetFormatter().print(0, UTC, offset);\n+            StringBuffer buf \u003d new StringBuffer();\n+            id \u003d printTimeZone(offset);\n             return fixedOffsetZone(id, offset);\n         }\n     }\n     throw new IllegalArgumentException(\"The datetime zone id is not recognised: \" + id);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7f03615bbb526d5030926e0446ebca21ad6931e6": {
      "type": "Ybodychange",
      "commitMessage": "Cache time zones looked up by fixed offset.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@354 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/1/04, 2:03 PM",
      "commitName": "7f03615bbb526d5030926e0446ebca21ad6931e6",
      "commitAuthor": "Brian S O\u0027Neill",
      "commitDateOld": "7/17/04, 9:49 AM",
      "commitNameOld": "a5b05944d52519cc70d86d1f59fe1c0e8d2e8956",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 15.18,
      "commitsBetweenForRepo": 51,
      "commitsBetweenForFile": 1,
      "actualSource": "public static DateTimeZone getInstance(String id) throws IllegalArgumentException {\n    if (id \u003d\u003d null) {\n        return getDefault();\n    }\n    if (id.equals(\"UTC\")) {\n        return DateTimeZone.UTC;\n    }\n    DateTimeZone zone \u003d cProvider.getZone(id);\n    if (zone !\u003d null) {\n        return zone;\n    }\n    if (id.startsWith(\"+\") || id.startsWith(\"-\")) {\n        int offset \u003d -(int) offsetFormatter().parseMillis(id);\n        if (offset \u003d\u003d 0L) {\n            return DateTimeZone.UTC;\n        } else {\n            id \u003d offsetFormatter().print(0, UTC, offset);\n            return fixedOffsetZone(id, offset);\n        }\n    }\n    throw new IllegalArgumentException(\"The datetime zone id is not recognised: \" + id);\n}",
      "path": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 213,
      "functionName": "getInstance",
      "functionAnnotation": "",
      "functionDoc": "Get the time zone by id.\n\u003cp\u003e\nThe time zone id may be one of those returned by getAvailableIDs.\nShort ids, as accepted by {@link java.util.TimeZone}, are not accepted.\nAll IDs must be specified in the long format.\nThe exception is UTC, which is an acceptable id.\n\u003cp\u003e\nAlternatively a locale independent, fixed offset, datetime zone can\nbe specified. The form \u003ccode\u003e[+-]hh:mm\u003c/code\u003e can be used.\n\n@param id the ID of the datetime zone, null means default\n@return the DateTimeZone object for the ID\n@throws IllegalArgumentException if the ID is not recognised\n",
      "diff": "@@ -1,22 +1,22 @@\n public static DateTimeZone getInstance(String id) throws IllegalArgumentException {\n     if (id \u003d\u003d null) {\n         return getDefault();\n     }\n     if (id.equals(\"UTC\")) {\n         return DateTimeZone.UTC;\n     }\n     DateTimeZone zone \u003d cProvider.getZone(id);\n     if (zone !\u003d null) {\n         return zone;\n     }\n     if (id.startsWith(\"+\") || id.startsWith(\"-\")) {\n         int offset \u003d -(int) offsetFormatter().parseMillis(id);\n         if (offset \u003d\u003d 0L) {\n             return DateTimeZone.UTC;\n         } else {\n             id \u003d offsetFormatter().print(0, UTC, offset);\n-            return new FixedDateTimeZone(id, null, offset, offset);\n+            return fixedOffsetZone(id, offset);\n         }\n     }\n     throw new IllegalArgumentException(\"The datetime zone id is not recognised: \" + id);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6682ab2abccb5819ec2e62a1f3f9018945bed9cd": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Test DateTimeZone\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@279 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "7/14/04, 4:23 PM",
      "commitName": "6682ab2abccb5819ec2e62a1f3f9018945bed9cd",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Test DateTimeZone\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@279 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "7/14/04, 4:23 PM",
          "commitName": "6682ab2abccb5819ec2e62a1f3f9018945bed9cd",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "5/14/04, 11:08 PM",
          "commitNameOld": "eb0cac2be7678d8c6b3c2bde3aff15eb4ca982f1",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 60.72,
          "commitsBetweenForRepo": 79,
          "commitsBetweenForFile": 1,
          "actualSource": "public static DateTimeZone getInstance(String id) throws IllegalArgumentException {\n    if (id \u003d\u003d null) {\n        return getDefault();\n    }\n    if (id.equals(\"UTC\")) {\n        return DateTimeZone.UTC;\n    }\n    DateTimeZone zone \u003d cProvider.getZone(id);\n    if (zone !\u003d null) {\n        return zone;\n    }\n    if (id.startsWith(\"+\") || id.startsWith(\"-\")) {\n        int offset \u003d -(int) offsetFormatter().parseMillis(id);\n        if (offset \u003d\u003d 0L) {\n            return DateTimeZone.UTC;\n        } else {\n            id \u003d offsetFormatter().print(0, UTC, offset);\n            return new FixedDateTimeZone(id, null, offset, offset);\n        }\n    }\n    throw new IllegalArgumentException(\"The datetime zone id is not recognised: \" + id);\n}",
          "path": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
          "functionStartLine": 210,
          "functionName": "getInstance",
          "functionAnnotation": "",
          "functionDoc": "Get the time zone by id.\n\u003cp\u003e\nThe time zone id may be one of those returned by getAvailableIDs.\nShort ids, as accepted by {@link java.util.TimeZone}, are not accepted.\nAll IDs must be specified in the long format.\nThe exception is UTC, which is an acceptable id.\n\u003cp\u003e\nAlternatively a locale independent, fixed offset, datetime zone can\nbe specified. The form \u003ccode\u003e[+-]hh:mm\u003c/code\u003e can be used.\n\n@param id the ID of the datetime zone, null means default\n@return the DateTimeZone object for the ID\n@throws IllegalArgumentException if the ID is not recognised\n",
          "diff": "@@ -1,18 +1,22 @@\n public static DateTimeZone getInstance(String id) throws IllegalArgumentException {\n     if (id \u003d\u003d null) {\n-        throw new IllegalArgumentException(\"The datetime zone id must not be null\");\n+        return getDefault();\n     }\n     if (id.equals(\"UTC\")) {\n         return DateTimeZone.UTC;\n     }\n     DateTimeZone zone \u003d cProvider.getZone(id);\n     if (zone !\u003d null) {\n         return zone;\n     }\n     if (id.startsWith(\"+\") || id.startsWith(\"-\")) {\n         int offset \u003d -(int) offsetFormatter().parseMillis(id);\n-        id \u003d offsetFormatter().print(0, UTC, offset);\n-        return new FixedDateTimeZone(id, null, offset, offset);\n+        if (offset \u003d\u003d 0L) {\n+            return DateTimeZone.UTC;\n+        } else {\n+            id \u003d offsetFormatter().print(0, UTC, offset);\n+            return new FixedDateTimeZone(id, null, offset, offset);\n+        }\n     }\n     throw new IllegalArgumentException(\"The datetime zone id is not recognised: \" + id);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Test DateTimeZone\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@279 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "7/14/04, 4:23 PM",
          "commitName": "6682ab2abccb5819ec2e62a1f3f9018945bed9cd",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "5/14/04, 11:08 PM",
          "commitNameOld": "eb0cac2be7678d8c6b3c2bde3aff15eb4ca982f1",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 60.72,
          "commitsBetweenForRepo": 79,
          "commitsBetweenForFile": 1,
          "actualSource": "public static DateTimeZone getInstance(String id) throws IllegalArgumentException {\n    if (id \u003d\u003d null) {\n        return getDefault();\n    }\n    if (id.equals(\"UTC\")) {\n        return DateTimeZone.UTC;\n    }\n    DateTimeZone zone \u003d cProvider.getZone(id);\n    if (zone !\u003d null) {\n        return zone;\n    }\n    if (id.startsWith(\"+\") || id.startsWith(\"-\")) {\n        int offset \u003d -(int) offsetFormatter().parseMillis(id);\n        if (offset \u003d\u003d 0L) {\n            return DateTimeZone.UTC;\n        } else {\n            id \u003d offsetFormatter().print(0, UTC, offset);\n            return new FixedDateTimeZone(id, null, offset, offset);\n        }\n    }\n    throw new IllegalArgumentException(\"The datetime zone id is not recognised: \" + id);\n}",
          "path": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
          "functionStartLine": 210,
          "functionName": "getInstance",
          "functionAnnotation": "",
          "functionDoc": "Get the time zone by id.\n\u003cp\u003e\nThe time zone id may be one of those returned by getAvailableIDs.\nShort ids, as accepted by {@link java.util.TimeZone}, are not accepted.\nAll IDs must be specified in the long format.\nThe exception is UTC, which is an acceptable id.\n\u003cp\u003e\nAlternatively a locale independent, fixed offset, datetime zone can\nbe specified. The form \u003ccode\u003e[+-]hh:mm\u003c/code\u003e can be used.\n\n@param id the ID of the datetime zone, null means default\n@return the DateTimeZone object for the ID\n@throws IllegalArgumentException if the ID is not recognised\n",
          "diff": "@@ -1,18 +1,22 @@\n public static DateTimeZone getInstance(String id) throws IllegalArgumentException {\n     if (id \u003d\u003d null) {\n-        throw new IllegalArgumentException(\"The datetime zone id must not be null\");\n+        return getDefault();\n     }\n     if (id.equals(\"UTC\")) {\n         return DateTimeZone.UTC;\n     }\n     DateTimeZone zone \u003d cProvider.getZone(id);\n     if (zone !\u003d null) {\n         return zone;\n     }\n     if (id.startsWith(\"+\") || id.startsWith(\"-\")) {\n         int offset \u003d -(int) offsetFormatter().parseMillis(id);\n-        id \u003d offsetFormatter().print(0, UTC, offset);\n-        return new FixedDateTimeZone(id, null, offset, offset);\n+        if (offset \u003d\u003d 0L) {\n+            return DateTimeZone.UTC;\n+        } else {\n+            id \u003d offsetFormatter().print(0, UTC, offset);\n+            return new FixedDateTimeZone(id, null, offset, offset);\n+        }\n     }\n     throw new IllegalArgumentException(\"The datetime zone id is not recognised: \" + id);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Get the time zone by id.\n\u003cp\u003e\nThe time zone id may be one of those returned by getAvailableIDs. Short\nids, as accepted by {@link java.util.TimeZone}, are not accepted. All\nIDs must be specified in the long format. The exception is UTC, which is\nan acceptable id.\n\u003cp\u003e\nAlternatively a locale independent, fixed offset, datetime zone can\nbe specified. The form \u003ccode\u003e[+-]hh:mm\u003c/code\u003e can be used.\n\n@param id the ID of the datetime zone\n@return the DateTimeZone object for the ID\n@throws IllegalArgumentException if the ID is null or not recognised\n",
            "newValue": "Get the time zone by id.\n\u003cp\u003e\nThe time zone id may be one of those returned by getAvailableIDs.\nShort ids, as accepted by {@link java.util.TimeZone}, are not accepted.\nAll IDs must be specified in the long format.\nThe exception is UTC, which is an acceptable id.\n\u003cp\u003e\nAlternatively a locale independent, fixed offset, datetime zone can\nbe specified. The form \u003ccode\u003e[+-]hh:mm\u003c/code\u003e can be used.\n\n@param id the ID of the datetime zone, null means default\n@return the DateTimeZone object for the ID\n@throws IllegalArgumentException if the ID is not recognised\n"
          }
        }
      ]
    },
    "a26563f0cd1fbdd5587a0f9d3c0c77864553d737": {
      "type": "Ybodychange",
      "commitMessage": "Rename getDateTimeZone methods to getZone etc\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@177 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "4/14/04, 4:43 PM",
      "commitName": "a26563f0cd1fbdd5587a0f9d3c0c77864553d737",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "1/3/04, 3:20 PM",
      "commitNameOld": "fd68de5eed8630dec3635a0fb6d7d82d960efa1b",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 102.02,
      "commitsBetweenForRepo": 80,
      "commitsBetweenForFile": 1,
      "actualSource": "public static DateTimeZone getInstance(String id) throws IllegalArgumentException {\n    if (id \u003d\u003d null) {\n        throw new IllegalArgumentException(\"The datetime zone id must not be null\");\n    }\n    if (id.equals(\"UTC\")) {\n        return DateTimeZone.UTC;\n    }\n    DateTimeZone zone \u003d cProvider.getZone(id);\n    if (zone !\u003d null) {\n        return zone;\n    }\n    if (id.startsWith(\"+\") || id.startsWith(\"-\")) {\n        int offset \u003d -(int) offsetFormatter().parseMillis(id);\n        id \u003d offsetFormatter().print(0, UTC, offset);\n        return new FixedDateTimeZone(id, null, offset, offset);\n    }\n    throw new IllegalArgumentException(\"The datetime zone id is not recognised: \" + id);\n}",
      "path": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 200,
      "functionName": "getInstance",
      "functionAnnotation": "",
      "functionDoc": "Get the time zone by id.\n\u003cp\u003e\nThe time zone id may be one of those returned by getAvailableIDs. Short\nids, as accepted by {@link java.util.TimeZone}, are not accepted. All\nIDs must be specified in the long format. The exception is UTC, which is\nan acceptable id.\n\u003cp\u003e\nAlternatively a locale independent, fixed offset, datetime zone can\nbe specified. The form \u003ccode\u003e[+-]hh:mm\u003c/code\u003e can be used.\n\n@param id the ID of the datetime zone\n@return the DateTimeZone object for the ID\n@throws IllegalArgumentException if the ID is null or not recognised\n",
      "diff": "@@ -1,18 +1,18 @@\n public static DateTimeZone getInstance(String id) throws IllegalArgumentException {\n     if (id \u003d\u003d null) {\n         throw new IllegalArgumentException(\"The datetime zone id must not be null\");\n     }\n     if (id.equals(\"UTC\")) {\n         return DateTimeZone.UTC;\n     }\n-    DateTimeZone zone \u003d cProvider.getDateTimeZone(id);\n+    DateTimeZone zone \u003d cProvider.getZone(id);\n     if (zone !\u003d null) {\n         return zone;\n     }\n     if (id.startsWith(\"+\") || id.startsWith(\"-\")) {\n         int offset \u003d -(int) offsetFormatter().parseMillis(id);\n         id \u003d offsetFormatter().print(0, UTC, offset);\n         return new FixedDateTimeZone(id, null, offset, offset);\n     }\n     throw new IllegalArgumentException(\"The datetime zone id is not recognised: \" + id);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0e07ac6b2cff63550d7df336355ca63cc05aa40b": {
      "type": "Ybodychange",
      "commitMessage": "Move from Joda CVS\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@10 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "12/18/03, 6:07 PM",
      "commitName": "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "12/16/03, 1:39 PM",
      "commitNameOld": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 2.19,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "public static DateTimeZone getInstance(String id) throws IllegalArgumentException {\n    if (id \u003d\u003d null) {\n        throw new IllegalArgumentException(\"The datetime zone id must not be null\");\n    }\n    if (id.equals(\"UTC\")) {\n        return DateTimeZone.UTC;\n    }\n    DateTimeZone zone \u003d cProvider.getDateTimeZone(id);\n    if (zone !\u003d null) {\n        return zone;\n    }\n    if (id.startsWith(\"+\") || id.startsWith(\"-\")) {\n        int offset \u003d -(int) offsetFormatter().parseMillis(id);\n        id \u003d offsetFormatter().print(0, UTC, offset);\n        return new FixedDateTimeZone(id, null, offset, offset);\n    }\n    throw new IllegalArgumentException(\"The datetime zone id is not recognised: \" + id);\n}",
      "path": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 199,
      "functionName": "getInstance",
      "functionAnnotation": "",
      "functionDoc": "Get the time zone by id.\n\u003cp\u003e\nThe time zone id may be one of those returned by getAvailableIDs. Short\nids, as accepted by {@link java.util.TimeZone}, are not accepted. All\nIDs must be specified in the long format. The exception is UTC, which is\nan acceptable id.\n\u003cp\u003e\nAlternatively a locale independent, fixed offset, datetime zone can\nbe specified. The form \u003ccode\u003e[+-]hh:mm\u003c/code\u003e can be used.\n\n@param id the ID of the datetime zone\n@return the DateTimeZone object for the ID\n@throws IllegalArgumentException if the ID is null or not recognised\n",
      "diff": "@@ -1,22 +1,18 @@\n public static DateTimeZone getInstance(String id) throws IllegalArgumentException {\n     if (id \u003d\u003d null) {\n         throw new IllegalArgumentException(\"The datetime zone id must not be null\");\n     }\n     if (id.equals(\"UTC\")) {\n         return DateTimeZone.UTC;\n     }\n     DateTimeZone zone \u003d cProvider.getDateTimeZone(id);\n     if (zone !\u003d null) {\n         return zone;\n     }\n     if (id.startsWith(\"+\") || id.startsWith(\"-\")) {\n-        try {\n-            int offset \u003d -(int) offsetFormatter().parseMillis(id);\n-            id \u003d offsetFormatter().print(0, UTC, offset);\n-            return new FixedDateTimeZone(id, null, offset, offset);\n-        } catch (ParseException e) {\n-            throw new IllegalArgumentException(e.getMessage());\n-        }\n+        int offset \u003d -(int) offsetFormatter().parseMillis(id);\n+        id \u003d offsetFormatter().print(0, UTC, offset);\n+        return new FixedDateTimeZone(id, null, offset, offset);\n     }\n     throw new IllegalArgumentException(\"The datetime zone id is not recognised: \" + id);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb": {
      "type": "Yintroduced",
      "commitMessage": "Move version 0.9 to joda-time repository\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@4 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "12/16/03, 1:39 PM",
      "commitName": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
      "commitAuthor": "Stephen Colebourne",
      "diff": "@@ -0,0 +1,22 @@\n+public static DateTimeZone getInstance(String id) throws IllegalArgumentException {\n+    if (id \u003d\u003d null) {\n+        throw new IllegalArgumentException(\"The datetime zone id must not be null\");\n+    }\n+    if (id.equals(\"UTC\")) {\n+        return DateTimeZone.UTC;\n+    }\n+    DateTimeZone zone \u003d cProvider.getDateTimeZone(id);\n+    if (zone !\u003d null) {\n+        return zone;\n+    }\n+    if (id.startsWith(\"+\") || id.startsWith(\"-\")) {\n+        try {\n+            int offset \u003d -(int) offsetFormatter().parseMillis(id);\n+            id \u003d offsetFormatter().print(0, UTC, offset);\n+            return new FixedDateTimeZone(id, null, offset, offset);\n+        } catch (ParseException e) {\n+            throw new IllegalArgumentException(e.getMessage());\n+        }\n+    }\n+    throw new IllegalArgumentException(\"The datetime zone id is not recognised: \" + id);\n+}\n\\ No newline at end of file\n",
      "actualSource": "public static DateTimeZone getInstance(String id) throws IllegalArgumentException {\n    if (id \u003d\u003d null) {\n        throw new IllegalArgumentException(\"The datetime zone id must not be null\");\n    }\n    if (id.equals(\"UTC\")) {\n        return DateTimeZone.UTC;\n    }\n    DateTimeZone zone \u003d cProvider.getDateTimeZone(id);\n    if (zone !\u003d null) {\n        return zone;\n    }\n    if (id.startsWith(\"+\") || id.startsWith(\"-\")) {\n        try {\n            int offset \u003d -(int) offsetFormatter().parseMillis(id);\n            id \u003d offsetFormatter().print(0, UTC, offset);\n            return new FixedDateTimeZone(id, null, offset, offset);\n        } catch (ParseException e) {\n            throw new IllegalArgumentException(e.getMessage());\n        }\n    }\n    throw new IllegalArgumentException(\"The datetime zone id is not recognised: \" + id);\n}",
      "path": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 236,
      "functionName": "getInstance",
      "functionAnnotation": "",
      "functionDoc": "Get the time zone by id.\n\u003cp\u003e\nThe time zone id may be one of those returned by getAvailableIDs. Short\nids, as accepted by {@link java.util.TimeZone}, are not accepted. All\nIDs must be specified in the long format. The exception is UTC, which is\nan acceptable id.\n\u003cp\u003e\nAlternatively a locale independent, fixed offset, datetime zone can\nbe specified. The form \u003ccode\u003e[+-]hh:mm\u003c/code\u003e can be used.\n\n@param id the ID of the datetime zone\n@return the DateTimeZone object for the ID\n@throws IllegalArgumentException if the ID is null or not recognised\n"
    }
  }
}