{
  "origin": "codeshovel",
  "repositoryName": "Time-2b",
  "repositoryPath": "/tmp/Time-2b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BuddhistChronology.java",
  "functionName": "getInstance",
  "functionId": "getInstance___zone-DateTimeZone",
  "sourceFilePath": "src/main/java/org/joda/time/chrono/BuddhistChronology.java",
  "functionAnnotation": "",
  "functionDoc": "Standard instance of a Buddhist Chronology, that matches\nSun\u0027s BuddhistCalendar class. This means that it follows the\nGregorianJulian calendar rules with a cutover date.\n\n@param zone the time zone to use, null is default\n",
  "functionStartLine": 105,
  "functionEndLine": 122,
  "numCommitsSeen": 25,
  "timeTaken": 3664,
  "changeHistory": [
    "0f274a6e0450cfd23bae02f80d283dd0e66432a2",
    "df4a82f4fb46cc2248280c462e18f08d55a3d112",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1",
    "3f1e047c898c9c925e1faac33bb07e1cb05d88cb",
    "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7",
    "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb"
  ],
  "changeHistoryShort": {
    "0f274a6e0450cfd23bae02f80d283dd0e66432a2": "Ybodychange",
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": "Yfilerename",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": "Yfilerename",
    "3f1e047c898c9c925e1faac33bb07e1cb05d88cb": "Ybodychange",
    "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7": "Ymultichange(Ymovefromfile,Ybodychange)",
    "0e07ac6b2cff63550d7df336355ca63cc05aa40b": "Ydocchange",
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0f274a6e0450cfd23bae02f80d283dd0e66432a2": {
      "type": "Ybodychange",
      "commitMessage": "Fix chronology cache synchronization\n\nFixes #44\n",
      "commitDate": "7/20/13, 4:59 AM",
      "commitName": "0f274a6e0450cfd23bae02f80d283dd0e66432a2",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "5/16/11, 10:02 AM",
      "commitNameOld": "df4a82f4fb46cc2248280c462e18f08d55a3d112",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 795.79,
      "commitsBetweenForRepo": 148,
      "commitsBetweenForFile": 1,
      "actualSource": "public static synchronized BuddhistChronology getInstance(DateTimeZone zone) {\n    if (zone \u003d\u003d null) {\n        zone \u003d DateTimeZone.getDefault();\n    }\n    BuddhistChronology chrono;\n    synchronized (cCache) {\n        chrono \u003d cCache.get(zone);\n        if (chrono \u003d\u003d null) {\n            chrono \u003d new BuddhistChronology(GJChronology.getInstance(zone, null), null);\n            DateTime lowerLimit \u003d new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);\n            chrono \u003d new BuddhistChronology(LimitChronology.getInstance(chrono, lowerLimit, null), \"\");\n            cCache.put(zone, chrono);\n        }\n    }\n    return chrono;\n}",
      "path": "src/main/java/org/joda/time/chrono/BuddhistChronology.java",
      "functionStartLine": 103,
      "functionName": "getInstance",
      "functionAnnotation": "",
      "functionDoc": "Standard instance of a Buddhist Chronology, that matches\nSun\u0027s BuddhistCalendar class. This means that it follows the\nGregorianJulian calendar rules with a cutover date.\n\n@param zone the time zone to use, null is default\n",
      "diff": "@@ -1,13 +1,16 @@\n public static synchronized BuddhistChronology getInstance(DateTimeZone zone) {\n     if (zone \u003d\u003d null) {\n         zone \u003d DateTimeZone.getDefault();\n     }\n-    BuddhistChronology chrono \u003d cCache.get(zone);\n-    if (chrono \u003d\u003d null) {\n-        chrono \u003d new BuddhistChronology(GJChronology.getInstance(zone, null), null);\n-        DateTime lowerLimit \u003d new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);\n-        chrono \u003d new BuddhistChronology(LimitChronology.getInstance(chrono, lowerLimit, null), \"\");\n-        cCache.put(zone, chrono);\n+    BuddhistChronology chrono;\n+    synchronized (cCache) {\n+        chrono \u003d cCache.get(zone);\n+        if (chrono \u003d\u003d null) {\n+            chrono \u003d new BuddhistChronology(GJChronology.getInstance(zone, null), null);\n+            DateTime lowerLimit \u003d new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);\n+            chrono \u003d new BuddhistChronology(LimitChronology.getInstance(chrono, lowerLimit, null), \"\");\n+            cCache.put(zone, chrono);\n+        }\n     }\n     return chrono;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": {
      "type": "Yfilerename",
      "commitMessage": "Remove JodaTime folder moving files to top level\n",
      "commitDate": "5/16/11, 10:02 AM",
      "commitName": "df4a82f4fb46cc2248280c462e18f08d55a3d112",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "5/16/11, 9:58 AM",
      "commitNameOld": "72b22654962284bac59c2777131b42a2d1f53228",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static synchronized BuddhistChronology getInstance(DateTimeZone zone) {\n    if (zone \u003d\u003d null) {\n        zone \u003d DateTimeZone.getDefault();\n    }\n    BuddhistChronology chrono \u003d cCache.get(zone);\n    if (chrono \u003d\u003d null) {\n        chrono \u003d new BuddhistChronology(GJChronology.getInstance(zone, null), null);\n        DateTime lowerLimit \u003d new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);\n        chrono \u003d new BuddhistChronology(LimitChronology.getInstance(chrono, lowerLimit, null), \"\");\n        cCache.put(zone, chrono);\n    }\n    return chrono;\n}",
      "path": "src/main/java/org/joda/time/chrono/BuddhistChronology.java",
      "functionStartLine": 103,
      "functionName": "getInstance",
      "functionAnnotation": "",
      "functionDoc": "Standard instance of a Buddhist Chronology, that matches\nSun\u0027s BuddhistCalendar class. This means that it follows the\nGregorianJulian calendar rules with a cutover date.\n\n@param zone the time zone to use, null is default\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/main/java/org/joda/time/chrono/BuddhistChronology.java",
        "newPath": "src/main/java/org/joda/time/chrono/BuddhistChronology.java"
      }
    },
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": {
      "type": "Yfilerename",
      "commitMessage": "Convert to maven 2\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1540 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/8/10, 5:17 PM",
      "commitName": "53feb3fa56af7260e607844524b7e5a9be49ecc1",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/8/10, 5:02 PM",
      "commitNameOld": "7fa2ceaf5d95d050095432aa646ea803aa35e122",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static synchronized BuddhistChronology getInstance(DateTimeZone zone) {\n    if (zone \u003d\u003d null) {\n        zone \u003d DateTimeZone.getDefault();\n    }\n    BuddhistChronology chrono \u003d cCache.get(zone);\n    if (chrono \u003d\u003d null) {\n        chrono \u003d new BuddhistChronology(GJChronology.getInstance(zone, null), null);\n        DateTime lowerLimit \u003d new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);\n        chrono \u003d new BuddhistChronology(LimitChronology.getInstance(chrono, lowerLimit, null), \"\");\n        cCache.put(zone, chrono);\n    }\n    return chrono;\n}",
      "path": "JodaTime/src/main/java/org/joda/time/chrono/BuddhistChronology.java",
      "functionStartLine": 103,
      "functionName": "getInstance",
      "functionAnnotation": "",
      "functionDoc": "Standard instance of a Buddhist Chronology, that matches\nSun\u0027s BuddhistCalendar class. This means that it follows the\nGregorianJulian calendar rules with a cutover date.\n\n@param zone the time zone to use, null is default\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java",
        "newPath": "JodaTime/src/main/java/org/joda/time/chrono/BuddhistChronology.java"
      }
    },
    "3f1e047c898c9c925e1faac33bb07e1cb05d88cb": {
      "type": "Ybodychange",
      "commitMessage": "Move to Java 5 with generics\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1406 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "11/4/09, 3:55 PM",
      "commitName": "3f1e047c898c9c925e1faac33bb07e1cb05d88cb",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/12/08, 2:41 PM",
      "commitNameOld": "2490507fb702a44b888984ec0df4e067953b6af2",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 449.09,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "actualSource": "public static synchronized BuddhistChronology getInstance(DateTimeZone zone) {\n    if (zone \u003d\u003d null) {\n        zone \u003d DateTimeZone.getDefault();\n    }\n    BuddhistChronology chrono \u003d cCache.get(zone);\n    if (chrono \u003d\u003d null) {\n        chrono \u003d new BuddhistChronology(GJChronology.getInstance(zone, null), null);\n        DateTime lowerLimit \u003d new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);\n        chrono \u003d new BuddhistChronology(LimitChronology.getInstance(chrono, lowerLimit, null), \"\");\n        cCache.put(zone, chrono);\n    }\n    return chrono;\n}",
      "path": "JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java",
      "functionStartLine": 103,
      "functionName": "getInstance",
      "functionAnnotation": "",
      "functionDoc": "Standard instance of a Buddhist Chronology, that matches\nSun\u0027s BuddhistCalendar class. This means that it follows the\nGregorianJulian calendar rules with a cutover date.\n\n@param zone the time zone to use, null is default\n",
      "diff": "@@ -1,13 +1,13 @@\n public static synchronized BuddhistChronology getInstance(DateTimeZone zone) {\n     if (zone \u003d\u003d null) {\n         zone \u003d DateTimeZone.getDefault();\n     }\n-    BuddhistChronology chrono \u003d (BuddhistChronology) cCache.get(zone);\n+    BuddhistChronology chrono \u003d cCache.get(zone);\n     if (chrono \u003d\u003d null) {\n         chrono \u003d new BuddhistChronology(GJChronology.getInstance(zone, null), null);\n         DateTime lowerLimit \u003d new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);\n         chrono \u003d new BuddhistChronology(LimitChronology.getInstance(chrono, lowerLimit, null), \"\");\n         cCache.put(zone, chrono);\n     }\n     return chrono;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "Re-organized chronology package and created new field package.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@125 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "1/27/04, 11:12 PM",
      "commitName": "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7",
      "commitAuthor": "Brian S O\u0027Neill",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "Re-organized chronology package and created new field package.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@125 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "1/27/04, 11:12 PM",
          "commitName": "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7",
          "commitAuthor": "Brian S O\u0027Neill",
          "commitDateOld": "1/11/04, 9:39 AM",
          "commitNameOld": "6f5522f58c1d2abdec37b5d22e5981716d4ec731",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 16.56,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static synchronized BuddhistChronology getInstance(DateTimeZone zone) {\n    if (zone \u003d\u003d null) {\n        zone \u003d DateTimeZone.getDefault();\n    }\n    BuddhistChronology chrono \u003d (BuddhistChronology) cCache.get(zone);\n    if (chrono \u003d\u003d null) {\n        chrono \u003d new BuddhistChronology(GJChronology.getInstance(zone, null), null);\n        DateTime lowerLimit \u003d new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);\n        chrono \u003d new BuddhistChronology(LimitChronology.getInstance(chrono, lowerLimit, null), \"\");\n        cCache.put(zone, chrono);\n    }\n    return chrono;\n}",
          "path": "JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java",
          "functionStartLine": 129,
          "functionName": "getInstance",
          "functionAnnotation": "",
          "functionDoc": "Standard instance of a Buddhist Chronology, that matches\nSun\u0027s BuddhistCalendar class. This means that it follows the\nGregorianJulian calendar rules with a cutover date.\n\n@param zone the time zone to use, null is default\n",
          "diff": "@@ -1,11 +1,13 @@\n public static synchronized BuddhistChronology getInstance(DateTimeZone zone) {\n     if (zone \u003d\u003d null) {\n         zone \u003d DateTimeZone.getDefault();\n     }\n     BuddhistChronology chrono \u003d (BuddhistChronology) cCache.get(zone);\n     if (chrono \u003d\u003d null) {\n-        chrono \u003d new BuddhistChronology(GJChronology.getInstance(zone, null, false));\n+        chrono \u003d new BuddhistChronology(GJChronology.getInstance(zone, null), null);\n+        DateTime lowerLimit \u003d new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);\n+        chrono \u003d new BuddhistChronology(LimitChronology.getInstance(chrono, lowerLimit, null), \"\");\n         cCache.put(zone, chrono);\n     }\n     return chrono;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java",
            "newPath": "JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java",
            "oldMethodName": "getInstance",
            "newMethodName": "getInstance"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Re-organized chronology package and created new field package.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@125 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "1/27/04, 11:12 PM",
          "commitName": "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7",
          "commitAuthor": "Brian S O\u0027Neill",
          "commitDateOld": "1/11/04, 9:39 AM",
          "commitNameOld": "6f5522f58c1d2abdec37b5d22e5981716d4ec731",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 16.56,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static synchronized BuddhistChronology getInstance(DateTimeZone zone) {\n    if (zone \u003d\u003d null) {\n        zone \u003d DateTimeZone.getDefault();\n    }\n    BuddhistChronology chrono \u003d (BuddhistChronology) cCache.get(zone);\n    if (chrono \u003d\u003d null) {\n        chrono \u003d new BuddhistChronology(GJChronology.getInstance(zone, null), null);\n        DateTime lowerLimit \u003d new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);\n        chrono \u003d new BuddhistChronology(LimitChronology.getInstance(chrono, lowerLimit, null), \"\");\n        cCache.put(zone, chrono);\n    }\n    return chrono;\n}",
          "path": "JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java",
          "functionStartLine": 129,
          "functionName": "getInstance",
          "functionAnnotation": "",
          "functionDoc": "Standard instance of a Buddhist Chronology, that matches\nSun\u0027s BuddhistCalendar class. This means that it follows the\nGregorianJulian calendar rules with a cutover date.\n\n@param zone the time zone to use, null is default\n",
          "diff": "@@ -1,11 +1,13 @@\n public static synchronized BuddhistChronology getInstance(DateTimeZone zone) {\n     if (zone \u003d\u003d null) {\n         zone \u003d DateTimeZone.getDefault();\n     }\n     BuddhistChronology chrono \u003d (BuddhistChronology) cCache.get(zone);\n     if (chrono \u003d\u003d null) {\n-        chrono \u003d new BuddhistChronology(GJChronology.getInstance(zone, null, false));\n+        chrono \u003d new BuddhistChronology(GJChronology.getInstance(zone, null), null);\n+        DateTime lowerLimit \u003d new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);\n+        chrono \u003d new BuddhistChronology(LimitChronology.getInstance(chrono, lowerLimit, null), \"\");\n         cCache.put(zone, chrono);\n     }\n     return chrono;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "0e07ac6b2cff63550d7df336355ca63cc05aa40b": {
      "type": "Ydocchange",
      "commitMessage": "Move from Joda CVS\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@10 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "12/18/03, 6:07 PM",
      "commitName": "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "12/16/03, 1:39 PM",
      "commitNameOld": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 2.19,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "public static synchronized BuddhistChronology getInstance(DateTimeZone zone) {\n    if (zone \u003d\u003d null) {\n        zone \u003d DateTimeZone.getDefault();\n    }\n    BuddhistChronology chrono \u003d (BuddhistChronology) cCache.get(zone);\n    if (chrono \u003d\u003d null) {\n        chrono \u003d new BuddhistChronology(GJChronology.getInstance(zone, null, false));\n        cCache.put(zone, chrono);\n    }\n    return chrono;\n}",
      "path": "JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java",
      "functionStartLine": 132,
      "functionName": "getInstance",
      "functionAnnotation": "",
      "functionDoc": "Standard instance of a Buddhist Chronology, that matches\nSun\u0027s BuddhistCalendar class. This means that it follows the\nGregorianJulian calendar rules with a cutover date.\n\n@param zone the time zone to use, null is default\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Standard instance of a Buddhist Chronology, that matches\nSun\u0027s BuddhistCalendar class. This means that it follows the\nGregorianJulian calendar rules with a cutover date.\n\n@param zone the time zone to use, null is default\n@throws IllegalArgumentException if the zone is null\n",
        "newValue": "Standard instance of a Buddhist Chronology, that matches\nSun\u0027s BuddhistCalendar class. This means that it follows the\nGregorianJulian calendar rules with a cutover date.\n\n@param zone the time zone to use, null is default\n"
      }
    },
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb": {
      "type": "Yintroduced",
      "commitMessage": "Move version 0.9 to joda-time repository\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@4 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "12/16/03, 1:39 PM",
      "commitName": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
      "commitAuthor": "Stephen Colebourne",
      "diff": "@@ -0,0 +1,11 @@\n+public static synchronized BuddhistChronology getInstance(DateTimeZone zone) {\n+    if (zone \u003d\u003d null) {\n+        zone \u003d DateTimeZone.getDefault();\n+    }\n+    BuddhistChronology chrono \u003d (BuddhistChronology) cCache.get(zone);\n+    if (chrono \u003d\u003d null) {\n+        chrono \u003d new BuddhistChronology(GJChronology.getInstance(zone, null, false));\n+        cCache.put(zone, chrono);\n+    }\n+    return chrono;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public static synchronized BuddhistChronology getInstance(DateTimeZone zone) {\n    if (zone \u003d\u003d null) {\n        zone \u003d DateTimeZone.getDefault();\n    }\n    BuddhistChronology chrono \u003d (BuddhistChronology) cCache.get(zone);\n    if (chrono \u003d\u003d null) {\n        chrono \u003d new BuddhistChronology(GJChronology.getInstance(zone, null, false));\n        cCache.put(zone, chrono);\n    }\n    return chrono;\n}",
      "path": "JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java",
      "functionStartLine": 130,
      "functionName": "getInstance",
      "functionAnnotation": "",
      "functionDoc": "Standard instance of a Buddhist Chronology, that matches\nSun\u0027s BuddhistCalendar class. This means that it follows the\nGregorianJulian calendar rules with a cutover date.\n\n@param zone the time zone to use, null is default\n@throws IllegalArgumentException if the zone is null\n"
    }
  }
}