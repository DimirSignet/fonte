{
  "origin": "codeshovel",
  "repositoryName": "Time-2b",
  "repositoryPath": "/tmp/Time-2b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CopticChronology.java",
  "functionName": "getInstance",
  "functionId": "getInstance___zone-DateTimeZone__minDaysInFirstWeek-int",
  "sourceFilePath": "src/main/java/org/joda/time/chrono/CopticChronology.java",
  "functionAnnotation": "",
  "functionDoc": "Gets an instance of the CopticChronology in the given time zone.\n\n@param zone the time zone to get the chronology in, null is default\n@param minDaysInFirstWeek minimum number of days in first week of the year; default is 4\n@return a chronology in the specified time zone\n",
  "functionStartLine": 118,
  "functionEndLine": 153,
  "numCommitsSeen": 34,
  "timeTaken": 3466,
  "changeHistory": [
    "df4a82f4fb46cc2248280c462e18f08d55a3d112",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1",
    "3f1e047c898c9c925e1faac33bb07e1cb05d88cb",
    "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7",
    "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb"
  ],
  "changeHistoryShort": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": "Yfilerename",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": "Yfilerename",
    "3f1e047c898c9c925e1faac33bb07e1cb05d88cb": "Ybodychange",
    "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7": "Ymultichange(Ymovefromfile,Yreturntypechange,Ymodifierchange,Ybodychange,Ydocchange,Yparameterchange)",
    "0e07ac6b2cff63550d7df336355ca63cc05aa40b": "Ybodychange",
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb": "Yintroduced"
  },
  "changeHistoryDetails": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": {
      "type": "Yfilerename",
      "commitMessage": "Remove JodaTime folder moving files to top level\n",
      "commitDate": "5/16/11, 10:02 AM",
      "commitName": "df4a82f4fb46cc2248280c462e18f08d55a3d112",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "5/16/11, 9:58 AM",
      "commitNameOld": "72b22654962284bac59c2777131b42a2d1f53228",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static CopticChronology getInstance(DateTimeZone zone, int minDaysInFirstWeek) {\n    if (zone \u003d\u003d null) {\n        zone \u003d DateTimeZone.getDefault();\n    }\n    CopticChronology chrono;\n    synchronized (cCache) {\n        CopticChronology[] chronos \u003d cCache.get(zone);\n        if (chronos \u003d\u003d null) {\n            chronos \u003d new CopticChronology[7];\n            cCache.put(zone, chronos);\n        }\n        try {\n            chrono \u003d chronos[minDaysInFirstWeek - 1];\n        } catch (ArrayIndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Invalid min days in first week: \" + minDaysInFirstWeek);\n        }\n        if (chrono \u003d\u003d null) {\n            if (zone \u003d\u003d DateTimeZone.UTC) {\n                chrono \u003d new CopticChronology(null, null, minDaysInFirstWeek);\n                DateTime lowerLimit \u003d new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);\n                chrono \u003d new CopticChronology(LimitChronology.getInstance(chrono, lowerLimit, null), null, minDaysInFirstWeek);\n            } else {\n                chrono \u003d getInstance(DateTimeZone.UTC, minDaysInFirstWeek);\n                chrono \u003d new CopticChronology(ZonedChronology.getInstance(chrono, zone), null, minDaysInFirstWeek);\n            }\n            chronos[minDaysInFirstWeek - 1] \u003d chrono;\n        }\n    }\n    return chrono;\n}",
      "path": "src/main/java/org/joda/time/chrono/CopticChronology.java",
      "functionStartLine": 118,
      "functionName": "getInstance",
      "functionAnnotation": "",
      "functionDoc": "Gets an instance of the CopticChronology in the given time zone.\n\n@param zone the time zone to get the chronology in, null is default\n@param minDaysInFirstWeek minimum number of days in first week of the year; default is 4\n@return a chronology in the specified time zone\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/main/java/org/joda/time/chrono/CopticChronology.java",
        "newPath": "src/main/java/org/joda/time/chrono/CopticChronology.java"
      }
    },
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": {
      "type": "Yfilerename",
      "commitMessage": "Convert to maven 2\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1540 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/8/10, 5:17 PM",
      "commitName": "53feb3fa56af7260e607844524b7e5a9be49ecc1",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/8/10, 5:02 PM",
      "commitNameOld": "7fa2ceaf5d95d050095432aa646ea803aa35e122",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static CopticChronology getInstance(DateTimeZone zone, int minDaysInFirstWeek) {\n    if (zone \u003d\u003d null) {\n        zone \u003d DateTimeZone.getDefault();\n    }\n    CopticChronology chrono;\n    synchronized (cCache) {\n        CopticChronology[] chronos \u003d cCache.get(zone);\n        if (chronos \u003d\u003d null) {\n            chronos \u003d new CopticChronology[7];\n            cCache.put(zone, chronos);\n        }\n        try {\n            chrono \u003d chronos[minDaysInFirstWeek - 1];\n        } catch (ArrayIndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Invalid min days in first week: \" + minDaysInFirstWeek);\n        }\n        if (chrono \u003d\u003d null) {\n            if (zone \u003d\u003d DateTimeZone.UTC) {\n                chrono \u003d new CopticChronology(null, null, minDaysInFirstWeek);\n                DateTime lowerLimit \u003d new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);\n                chrono \u003d new CopticChronology(LimitChronology.getInstance(chrono, lowerLimit, null), null, minDaysInFirstWeek);\n            } else {\n                chrono \u003d getInstance(DateTimeZone.UTC, minDaysInFirstWeek);\n                chrono \u003d new CopticChronology(ZonedChronology.getInstance(chrono, zone), null, minDaysInFirstWeek);\n            }\n            chronos[minDaysInFirstWeek - 1] \u003d chrono;\n        }\n    }\n    return chrono;\n}",
      "path": "JodaTime/src/main/java/org/joda/time/chrono/CopticChronology.java",
      "functionStartLine": 118,
      "functionName": "getInstance",
      "functionAnnotation": "",
      "functionDoc": "Gets an instance of the CopticChronology in the given time zone.\n\n@param zone the time zone to get the chronology in, null is default\n@param minDaysInFirstWeek minimum number of days in first week of the year; default is 4\n@return a chronology in the specified time zone\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/java/org/joda/time/chrono/CopticChronology.java",
        "newPath": "JodaTime/src/main/java/org/joda/time/chrono/CopticChronology.java"
      }
    },
    "3f1e047c898c9c925e1faac33bb07e1cb05d88cb": {
      "type": "Ybodychange",
      "commitMessage": "Move to Java 5 with generics\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1406 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "11/4/09, 3:55 PM",
      "commitName": "3f1e047c898c9c925e1faac33bb07e1cb05d88cb",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "3/19/06, 1:46 PM",
      "commitNameOld": "35808a6d6e33fdeb3c6e0472286dfb1215dde09e",
      "commitAuthorOld": "Brian S O\u0027Neill",
      "daysBetweenCommits": 1326.09,
      "commitsBetweenForRepo": 326,
      "commitsBetweenForFile": 1,
      "actualSource": "public static CopticChronology getInstance(DateTimeZone zone, int minDaysInFirstWeek) {\n    if (zone \u003d\u003d null) {\n        zone \u003d DateTimeZone.getDefault();\n    }\n    CopticChronology chrono;\n    synchronized (cCache) {\n        CopticChronology[] chronos \u003d cCache.get(zone);\n        if (chronos \u003d\u003d null) {\n            chronos \u003d new CopticChronology[7];\n            cCache.put(zone, chronos);\n        }\n        try {\n            chrono \u003d chronos[minDaysInFirstWeek - 1];\n        } catch (ArrayIndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Invalid min days in first week: \" + minDaysInFirstWeek);\n        }\n        if (chrono \u003d\u003d null) {\n            if (zone \u003d\u003d DateTimeZone.UTC) {\n                chrono \u003d new CopticChronology(null, null, minDaysInFirstWeek);\n                DateTime lowerLimit \u003d new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);\n                chrono \u003d new CopticChronology(LimitChronology.getInstance(chrono, lowerLimit, null), null, minDaysInFirstWeek);\n            } else {\n                chrono \u003d getInstance(DateTimeZone.UTC, minDaysInFirstWeek);\n                chrono \u003d new CopticChronology(ZonedChronology.getInstance(chrono, zone), null, minDaysInFirstWeek);\n            }\n            chronos[minDaysInFirstWeek - 1] \u003d chrono;\n        }\n    }\n    return chrono;\n}",
      "path": "JodaTime/src/java/org/joda/time/chrono/CopticChronology.java",
      "functionStartLine": 118,
      "functionName": "getInstance",
      "functionAnnotation": "",
      "functionDoc": "Gets an instance of the CopticChronology in the given time zone.\n\n@param zone the time zone to get the chronology in, null is default\n@param minDaysInFirstWeek minimum number of days in first week of the year; default is 4\n@return a chronology in the specified time zone\n",
      "diff": "@@ -1,30 +1,30 @@\n public static CopticChronology getInstance(DateTimeZone zone, int minDaysInFirstWeek) {\n     if (zone \u003d\u003d null) {\n         zone \u003d DateTimeZone.getDefault();\n     }\n     CopticChronology chrono;\n     synchronized (cCache) {\n-        CopticChronology[] chronos \u003d (CopticChronology[]) cCache.get(zone);\n+        CopticChronology[] chronos \u003d cCache.get(zone);\n         if (chronos \u003d\u003d null) {\n             chronos \u003d new CopticChronology[7];\n             cCache.put(zone, chronos);\n         }\n         try {\n             chrono \u003d chronos[minDaysInFirstWeek - 1];\n         } catch (ArrayIndexOutOfBoundsException e) {\n             throw new IllegalArgumentException(\"Invalid min days in first week: \" + minDaysInFirstWeek);\n         }\n         if (chrono \u003d\u003d null) {\n             if (zone \u003d\u003d DateTimeZone.UTC) {\n                 chrono \u003d new CopticChronology(null, null, minDaysInFirstWeek);\n                 DateTime lowerLimit \u003d new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);\n                 chrono \u003d new CopticChronology(LimitChronology.getInstance(chrono, lowerLimit, null), null, minDaysInFirstWeek);\n             } else {\n                 chrono \u003d getInstance(DateTimeZone.UTC, minDaysInFirstWeek);\n                 chrono \u003d new CopticChronology(ZonedChronology.getInstance(chrono, zone), null, minDaysInFirstWeek);\n             }\n             chronos[minDaysInFirstWeek - 1] \u003d chrono;\n         }\n     }\n     return chrono;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7": {
      "type": "Ymultichange(Ymovefromfile,Yreturntypechange,Ymodifierchange,Ybodychange,Ydocchange,Yparameterchange)",
      "commitMessage": "Re-organized chronology package and created new field package.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@125 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "1/27/04, 11:12 PM",
      "commitName": "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7",
      "commitAuthor": "Brian S O\u0027Neill",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "Re-organized chronology package and created new field package.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@125 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "1/27/04, 11:12 PM",
          "commitName": "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7",
          "commitAuthor": "Brian S O\u0027Neill",
          "commitDateOld": "1/11/04, 9:39 AM",
          "commitNameOld": "6f5522f58c1d2abdec37b5d22e5981716d4ec731",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 16.56,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static CopticChronology getInstance(DateTimeZone zone, int minDaysInFirstWeek) {\n    if (zone \u003d\u003d null) {\n        zone \u003d DateTimeZone.getDefault();\n    }\n    CopticChronology chrono;\n    synchronized (cCache) {\n        CopticChronology[] chronos \u003d (CopticChronology[]) cCache.get(zone);\n        if (chronos \u003d\u003d null) {\n            chronos \u003d new CopticChronology[7];\n            cCache.put(zone, chronos);\n        }\n        try {\n            chrono \u003d chronos[minDaysInFirstWeek - 1];\n        } catch (ArrayIndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Invalid min days in first week: \" + minDaysInFirstWeek);\n        }\n        if (chrono \u003d\u003d null) {\n            if (zone \u003d\u003d DateTimeZone.UTC) {\n                chrono \u003d new CopticChronology(null, null, minDaysInFirstWeek);\n                DateTime lowerLimit \u003d new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);\n                chrono \u003d new CopticChronology(LimitChronology.getInstance(chrono, lowerLimit, null), null, minDaysInFirstWeek);\n            } else {\n                chrono \u003d getInstance(DateTimeZone.UTC, minDaysInFirstWeek);\n                chrono \u003d new CopticChronology(ZonedChronology.getInstance(chrono, zone), null, minDaysInFirstWeek);\n            }\n            chronos[minDaysInFirstWeek - 1] \u003d chrono;\n        }\n    }\n    return chrono;\n}",
          "path": "JodaTime/src/java/org/joda/time/chrono/CopticChronology.java",
          "functionStartLine": 137,
          "functionName": "getInstance",
          "functionAnnotation": "",
          "functionDoc": "Gets an instance of the CopticChronology in the given time zone.\n\n@param zone the time zone to get the chronology in, null is default\n@param minDaysInFirstWeek minimum number of days in first week of the year; default is 4\n@return a chronology in the specified time zone\n",
          "diff": "@@ -1,33 +1,30 @@\n-public synchronized GJChronology getInstance(long gregorianCutover, boolean centuryISO, int minDaysInFirstWeek) {\n-    GJChronology chrono;\n-    ArrayList cache \u003d iCache;\n-    for (int i \u003d cache.size(); --i \u003e\u003d 0; ) {\n-        chrono \u003d (GJChronology) ((SoftReference) cache.get(i)).get();\n+public static CopticChronology getInstance(DateTimeZone zone, int minDaysInFirstWeek) {\n+    if (zone \u003d\u003d null) {\n+        zone \u003d DateTimeZone.getDefault();\n+    }\n+    CopticChronology chrono;\n+    synchronized (cCache) {\n+        CopticChronology[] chronos \u003d (CopticChronology[]) cCache.get(zone);\n+        if (chronos \u003d\u003d null) {\n+            chronos \u003d new CopticChronology[7];\n+            cCache.put(zone, chronos);\n+        }\n+        try {\n+            chrono \u003d chronos[minDaysInFirstWeek - 1];\n+        } catch (ArrayIndexOutOfBoundsException e) {\n+            throw new IllegalArgumentException(\"Invalid min days in first week: \" + minDaysInFirstWeek);\n+        }\n         if (chrono \u003d\u003d null) {\n-            cache.remove(i);\n-            continue;\n-        }\n-        if (chrono.getGregorianJulianCutoverMillis() \u003d\u003d gregorianCutover \u0026\u0026 chrono.isCenturyISO() \u003d\u003d centuryISO \u0026\u0026 chrono.getMinimumDaysInFirstWeek() \u003d\u003d minDaysInFirstWeek) {\n-            return chrono;\n+            if (zone \u003d\u003d DateTimeZone.UTC) {\n+                chrono \u003d new CopticChronology(null, null, minDaysInFirstWeek);\n+                DateTime lowerLimit \u003d new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);\n+                chrono \u003d new CopticChronology(LimitChronology.getInstance(chrono, lowerLimit, null), null, minDaysInFirstWeek);\n+            } else {\n+                chrono \u003d getInstance(DateTimeZone.UTC, minDaysInFirstWeek);\n+                chrono \u003d new CopticChronology(ZonedChronology.getInstance(chrono, zone), null, minDaysInFirstWeek);\n+            }\n+            chronos[minDaysInFirstWeek - 1] \u003d chrono;\n         }\n     }\n-    if (iZone !\u003d DateTimeZone.UTC) {\n-        chrono \u003d GJChronology.getInstance(DateTimeZone.UTC, gregorianCutover, centuryISO, minDaysInFirstWeek);\n-        chrono \u003d new GJZonedChronology(chrono, iZone);\n-    } else {\n-        if (gregorianCutover \u003d\u003d Long.MAX_VALUE) {\n-            chrono \u003d new JulianChronology(minDaysInFirstWeek);\n-        } else if (gregorianCutover \u003d\u003d Long.MIN_VALUE) {\n-            chrono \u003d new GregorianChronology(minDaysInFirstWeek);\n-        } else {\n-            JulianChronology julian_utc \u003d (JulianChronology) GJChronology.getInstance(DateTimeZone.UTC, Long.MAX_VALUE, true, minDaysInFirstWeek);\n-            GregorianChronology gregorian_utc \u003d (GregorianChronology) GJChronology.getInstance(DateTimeZone.UTC, Long.MIN_VALUE, true, minDaysInFirstWeek);\n-            chrono \u003d new CutoverChronology(julian_utc, gregorian_utc, gregorianCutover);\n-        }\n-        if (!centuryISO) {\n-            chrono \u003d new GJCenturyChronology(chrono);\n-        }\n-    }\n-    cache.add(new SoftReference(chrono));\n     return chrono;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java",
            "newPath": "JodaTime/src/java/org/joda/time/chrono/CopticChronology.java",
            "oldMethodName": "getInstance",
            "newMethodName": "getInstance"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "Re-organized chronology package and created new field package.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@125 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "1/27/04, 11:12 PM",
          "commitName": "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7",
          "commitAuthor": "Brian S O\u0027Neill",
          "commitDateOld": "1/11/04, 9:39 AM",
          "commitNameOld": "6f5522f58c1d2abdec37b5d22e5981716d4ec731",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 16.56,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static CopticChronology getInstance(DateTimeZone zone, int minDaysInFirstWeek) {\n    if (zone \u003d\u003d null) {\n        zone \u003d DateTimeZone.getDefault();\n    }\n    CopticChronology chrono;\n    synchronized (cCache) {\n        CopticChronology[] chronos \u003d (CopticChronology[]) cCache.get(zone);\n        if (chronos \u003d\u003d null) {\n            chronos \u003d new CopticChronology[7];\n            cCache.put(zone, chronos);\n        }\n        try {\n            chrono \u003d chronos[minDaysInFirstWeek - 1];\n        } catch (ArrayIndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Invalid min days in first week: \" + minDaysInFirstWeek);\n        }\n        if (chrono \u003d\u003d null) {\n            if (zone \u003d\u003d DateTimeZone.UTC) {\n                chrono \u003d new CopticChronology(null, null, minDaysInFirstWeek);\n                DateTime lowerLimit \u003d new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);\n                chrono \u003d new CopticChronology(LimitChronology.getInstance(chrono, lowerLimit, null), null, minDaysInFirstWeek);\n            } else {\n                chrono \u003d getInstance(DateTimeZone.UTC, minDaysInFirstWeek);\n                chrono \u003d new CopticChronology(ZonedChronology.getInstance(chrono, zone), null, minDaysInFirstWeek);\n            }\n            chronos[minDaysInFirstWeek - 1] \u003d chrono;\n        }\n    }\n    return chrono;\n}",
          "path": "JodaTime/src/java/org/joda/time/chrono/CopticChronology.java",
          "functionStartLine": 137,
          "functionName": "getInstance",
          "functionAnnotation": "",
          "functionDoc": "Gets an instance of the CopticChronology in the given time zone.\n\n@param zone the time zone to get the chronology in, null is default\n@param minDaysInFirstWeek minimum number of days in first week of the year; default is 4\n@return a chronology in the specified time zone\n",
          "diff": "@@ -1,33 +1,30 @@\n-public synchronized GJChronology getInstance(long gregorianCutover, boolean centuryISO, int minDaysInFirstWeek) {\n-    GJChronology chrono;\n-    ArrayList cache \u003d iCache;\n-    for (int i \u003d cache.size(); --i \u003e\u003d 0; ) {\n-        chrono \u003d (GJChronology) ((SoftReference) cache.get(i)).get();\n+public static CopticChronology getInstance(DateTimeZone zone, int minDaysInFirstWeek) {\n+    if (zone \u003d\u003d null) {\n+        zone \u003d DateTimeZone.getDefault();\n+    }\n+    CopticChronology chrono;\n+    synchronized (cCache) {\n+        CopticChronology[] chronos \u003d (CopticChronology[]) cCache.get(zone);\n+        if (chronos \u003d\u003d null) {\n+            chronos \u003d new CopticChronology[7];\n+            cCache.put(zone, chronos);\n+        }\n+        try {\n+            chrono \u003d chronos[minDaysInFirstWeek - 1];\n+        } catch (ArrayIndexOutOfBoundsException e) {\n+            throw new IllegalArgumentException(\"Invalid min days in first week: \" + minDaysInFirstWeek);\n+        }\n         if (chrono \u003d\u003d null) {\n-            cache.remove(i);\n-            continue;\n-        }\n-        if (chrono.getGregorianJulianCutoverMillis() \u003d\u003d gregorianCutover \u0026\u0026 chrono.isCenturyISO() \u003d\u003d centuryISO \u0026\u0026 chrono.getMinimumDaysInFirstWeek() \u003d\u003d minDaysInFirstWeek) {\n-            return chrono;\n+            if (zone \u003d\u003d DateTimeZone.UTC) {\n+                chrono \u003d new CopticChronology(null, null, minDaysInFirstWeek);\n+                DateTime lowerLimit \u003d new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);\n+                chrono \u003d new CopticChronology(LimitChronology.getInstance(chrono, lowerLimit, null), null, minDaysInFirstWeek);\n+            } else {\n+                chrono \u003d getInstance(DateTimeZone.UTC, minDaysInFirstWeek);\n+                chrono \u003d new CopticChronology(ZonedChronology.getInstance(chrono, zone), null, minDaysInFirstWeek);\n+            }\n+            chronos[minDaysInFirstWeek - 1] \u003d chrono;\n         }\n     }\n-    if (iZone !\u003d DateTimeZone.UTC) {\n-        chrono \u003d GJChronology.getInstance(DateTimeZone.UTC, gregorianCutover, centuryISO, minDaysInFirstWeek);\n-        chrono \u003d new GJZonedChronology(chrono, iZone);\n-    } else {\n-        if (gregorianCutover \u003d\u003d Long.MAX_VALUE) {\n-            chrono \u003d new JulianChronology(minDaysInFirstWeek);\n-        } else if (gregorianCutover \u003d\u003d Long.MIN_VALUE) {\n-            chrono \u003d new GregorianChronology(minDaysInFirstWeek);\n-        } else {\n-            JulianChronology julian_utc \u003d (JulianChronology) GJChronology.getInstance(DateTimeZone.UTC, Long.MAX_VALUE, true, minDaysInFirstWeek);\n-            GregorianChronology gregorian_utc \u003d (GregorianChronology) GJChronology.getInstance(DateTimeZone.UTC, Long.MIN_VALUE, true, minDaysInFirstWeek);\n-            chrono \u003d new CutoverChronology(julian_utc, gregorian_utc, gregorianCutover);\n-        }\n-        if (!centuryISO) {\n-            chrono \u003d new GJCenturyChronology(chrono);\n-        }\n-    }\n-    cache.add(new SoftReference(chrono));\n     return chrono;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "GJChronology",
            "newValue": "CopticChronology"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Re-organized chronology package and created new field package.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@125 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "1/27/04, 11:12 PM",
          "commitName": "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7",
          "commitAuthor": "Brian S O\u0027Neill",
          "commitDateOld": "1/11/04, 9:39 AM",
          "commitNameOld": "6f5522f58c1d2abdec37b5d22e5981716d4ec731",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 16.56,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static CopticChronology getInstance(DateTimeZone zone, int minDaysInFirstWeek) {\n    if (zone \u003d\u003d null) {\n        zone \u003d DateTimeZone.getDefault();\n    }\n    CopticChronology chrono;\n    synchronized (cCache) {\n        CopticChronology[] chronos \u003d (CopticChronology[]) cCache.get(zone);\n        if (chronos \u003d\u003d null) {\n            chronos \u003d new CopticChronology[7];\n            cCache.put(zone, chronos);\n        }\n        try {\n            chrono \u003d chronos[minDaysInFirstWeek - 1];\n        } catch (ArrayIndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Invalid min days in first week: \" + minDaysInFirstWeek);\n        }\n        if (chrono \u003d\u003d null) {\n            if (zone \u003d\u003d DateTimeZone.UTC) {\n                chrono \u003d new CopticChronology(null, null, minDaysInFirstWeek);\n                DateTime lowerLimit \u003d new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);\n                chrono \u003d new CopticChronology(LimitChronology.getInstance(chrono, lowerLimit, null), null, minDaysInFirstWeek);\n            } else {\n                chrono \u003d getInstance(DateTimeZone.UTC, minDaysInFirstWeek);\n                chrono \u003d new CopticChronology(ZonedChronology.getInstance(chrono, zone), null, minDaysInFirstWeek);\n            }\n            chronos[minDaysInFirstWeek - 1] \u003d chrono;\n        }\n    }\n    return chrono;\n}",
          "path": "JodaTime/src/java/org/joda/time/chrono/CopticChronology.java",
          "functionStartLine": 137,
          "functionName": "getInstance",
          "functionAnnotation": "",
          "functionDoc": "Gets an instance of the CopticChronology in the given time zone.\n\n@param zone the time zone to get the chronology in, null is default\n@param minDaysInFirstWeek minimum number of days in first week of the year; default is 4\n@return a chronology in the specified time zone\n",
          "diff": "@@ -1,33 +1,30 @@\n-public synchronized GJChronology getInstance(long gregorianCutover, boolean centuryISO, int minDaysInFirstWeek) {\n-    GJChronology chrono;\n-    ArrayList cache \u003d iCache;\n-    for (int i \u003d cache.size(); --i \u003e\u003d 0; ) {\n-        chrono \u003d (GJChronology) ((SoftReference) cache.get(i)).get();\n+public static CopticChronology getInstance(DateTimeZone zone, int minDaysInFirstWeek) {\n+    if (zone \u003d\u003d null) {\n+        zone \u003d DateTimeZone.getDefault();\n+    }\n+    CopticChronology chrono;\n+    synchronized (cCache) {\n+        CopticChronology[] chronos \u003d (CopticChronology[]) cCache.get(zone);\n+        if (chronos \u003d\u003d null) {\n+            chronos \u003d new CopticChronology[7];\n+            cCache.put(zone, chronos);\n+        }\n+        try {\n+            chrono \u003d chronos[minDaysInFirstWeek - 1];\n+        } catch (ArrayIndexOutOfBoundsException e) {\n+            throw new IllegalArgumentException(\"Invalid min days in first week: \" + minDaysInFirstWeek);\n+        }\n         if (chrono \u003d\u003d null) {\n-            cache.remove(i);\n-            continue;\n-        }\n-        if (chrono.getGregorianJulianCutoverMillis() \u003d\u003d gregorianCutover \u0026\u0026 chrono.isCenturyISO() \u003d\u003d centuryISO \u0026\u0026 chrono.getMinimumDaysInFirstWeek() \u003d\u003d minDaysInFirstWeek) {\n-            return chrono;\n+            if (zone \u003d\u003d DateTimeZone.UTC) {\n+                chrono \u003d new CopticChronology(null, null, minDaysInFirstWeek);\n+                DateTime lowerLimit \u003d new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);\n+                chrono \u003d new CopticChronology(LimitChronology.getInstance(chrono, lowerLimit, null), null, minDaysInFirstWeek);\n+            } else {\n+                chrono \u003d getInstance(DateTimeZone.UTC, minDaysInFirstWeek);\n+                chrono \u003d new CopticChronology(ZonedChronology.getInstance(chrono, zone), null, minDaysInFirstWeek);\n+            }\n+            chronos[minDaysInFirstWeek - 1] \u003d chrono;\n         }\n     }\n-    if (iZone !\u003d DateTimeZone.UTC) {\n-        chrono \u003d GJChronology.getInstance(DateTimeZone.UTC, gregorianCutover, centuryISO, minDaysInFirstWeek);\n-        chrono \u003d new GJZonedChronology(chrono, iZone);\n-    } else {\n-        if (gregorianCutover \u003d\u003d Long.MAX_VALUE) {\n-            chrono \u003d new JulianChronology(minDaysInFirstWeek);\n-        } else if (gregorianCutover \u003d\u003d Long.MIN_VALUE) {\n-            chrono \u003d new GregorianChronology(minDaysInFirstWeek);\n-        } else {\n-            JulianChronology julian_utc \u003d (JulianChronology) GJChronology.getInstance(DateTimeZone.UTC, Long.MAX_VALUE, true, minDaysInFirstWeek);\n-            GregorianChronology gregorian_utc \u003d (GregorianChronology) GJChronology.getInstance(DateTimeZone.UTC, Long.MIN_VALUE, true, minDaysInFirstWeek);\n-            chrono \u003d new CutoverChronology(julian_utc, gregorian_utc, gregorianCutover);\n-        }\n-        if (!centuryISO) {\n-            chrono \u003d new GJCenturyChronology(chrono);\n-        }\n-    }\n-    cache.add(new SoftReference(chrono));\n     return chrono;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[public, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Re-organized chronology package and created new field package.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@125 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "1/27/04, 11:12 PM",
          "commitName": "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7",
          "commitAuthor": "Brian S O\u0027Neill",
          "commitDateOld": "1/11/04, 9:39 AM",
          "commitNameOld": "6f5522f58c1d2abdec37b5d22e5981716d4ec731",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 16.56,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static CopticChronology getInstance(DateTimeZone zone, int minDaysInFirstWeek) {\n    if (zone \u003d\u003d null) {\n        zone \u003d DateTimeZone.getDefault();\n    }\n    CopticChronology chrono;\n    synchronized (cCache) {\n        CopticChronology[] chronos \u003d (CopticChronology[]) cCache.get(zone);\n        if (chronos \u003d\u003d null) {\n            chronos \u003d new CopticChronology[7];\n            cCache.put(zone, chronos);\n        }\n        try {\n            chrono \u003d chronos[minDaysInFirstWeek - 1];\n        } catch (ArrayIndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Invalid min days in first week: \" + minDaysInFirstWeek);\n        }\n        if (chrono \u003d\u003d null) {\n            if (zone \u003d\u003d DateTimeZone.UTC) {\n                chrono \u003d new CopticChronology(null, null, minDaysInFirstWeek);\n                DateTime lowerLimit \u003d new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);\n                chrono \u003d new CopticChronology(LimitChronology.getInstance(chrono, lowerLimit, null), null, minDaysInFirstWeek);\n            } else {\n                chrono \u003d getInstance(DateTimeZone.UTC, minDaysInFirstWeek);\n                chrono \u003d new CopticChronology(ZonedChronology.getInstance(chrono, zone), null, minDaysInFirstWeek);\n            }\n            chronos[minDaysInFirstWeek - 1] \u003d chrono;\n        }\n    }\n    return chrono;\n}",
          "path": "JodaTime/src/java/org/joda/time/chrono/CopticChronology.java",
          "functionStartLine": 137,
          "functionName": "getInstance",
          "functionAnnotation": "",
          "functionDoc": "Gets an instance of the CopticChronology in the given time zone.\n\n@param zone the time zone to get the chronology in, null is default\n@param minDaysInFirstWeek minimum number of days in first week of the year; default is 4\n@return a chronology in the specified time zone\n",
          "diff": "@@ -1,33 +1,30 @@\n-public synchronized GJChronology getInstance(long gregorianCutover, boolean centuryISO, int minDaysInFirstWeek) {\n-    GJChronology chrono;\n-    ArrayList cache \u003d iCache;\n-    for (int i \u003d cache.size(); --i \u003e\u003d 0; ) {\n-        chrono \u003d (GJChronology) ((SoftReference) cache.get(i)).get();\n+public static CopticChronology getInstance(DateTimeZone zone, int minDaysInFirstWeek) {\n+    if (zone \u003d\u003d null) {\n+        zone \u003d DateTimeZone.getDefault();\n+    }\n+    CopticChronology chrono;\n+    synchronized (cCache) {\n+        CopticChronology[] chronos \u003d (CopticChronology[]) cCache.get(zone);\n+        if (chronos \u003d\u003d null) {\n+            chronos \u003d new CopticChronology[7];\n+            cCache.put(zone, chronos);\n+        }\n+        try {\n+            chrono \u003d chronos[minDaysInFirstWeek - 1];\n+        } catch (ArrayIndexOutOfBoundsException e) {\n+            throw new IllegalArgumentException(\"Invalid min days in first week: \" + minDaysInFirstWeek);\n+        }\n         if (chrono \u003d\u003d null) {\n-            cache.remove(i);\n-            continue;\n-        }\n-        if (chrono.getGregorianJulianCutoverMillis() \u003d\u003d gregorianCutover \u0026\u0026 chrono.isCenturyISO() \u003d\u003d centuryISO \u0026\u0026 chrono.getMinimumDaysInFirstWeek() \u003d\u003d minDaysInFirstWeek) {\n-            return chrono;\n+            if (zone \u003d\u003d DateTimeZone.UTC) {\n+                chrono \u003d new CopticChronology(null, null, minDaysInFirstWeek);\n+                DateTime lowerLimit \u003d new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);\n+                chrono \u003d new CopticChronology(LimitChronology.getInstance(chrono, lowerLimit, null), null, minDaysInFirstWeek);\n+            } else {\n+                chrono \u003d getInstance(DateTimeZone.UTC, minDaysInFirstWeek);\n+                chrono \u003d new CopticChronology(ZonedChronology.getInstance(chrono, zone), null, minDaysInFirstWeek);\n+            }\n+            chronos[minDaysInFirstWeek - 1] \u003d chrono;\n         }\n     }\n-    if (iZone !\u003d DateTimeZone.UTC) {\n-        chrono \u003d GJChronology.getInstance(DateTimeZone.UTC, gregorianCutover, centuryISO, minDaysInFirstWeek);\n-        chrono \u003d new GJZonedChronology(chrono, iZone);\n-    } else {\n-        if (gregorianCutover \u003d\u003d Long.MAX_VALUE) {\n-            chrono \u003d new JulianChronology(minDaysInFirstWeek);\n-        } else if (gregorianCutover \u003d\u003d Long.MIN_VALUE) {\n-            chrono \u003d new GregorianChronology(minDaysInFirstWeek);\n-        } else {\n-            JulianChronology julian_utc \u003d (JulianChronology) GJChronology.getInstance(DateTimeZone.UTC, Long.MAX_VALUE, true, minDaysInFirstWeek);\n-            GregorianChronology gregorian_utc \u003d (GregorianChronology) GJChronology.getInstance(DateTimeZone.UTC, Long.MIN_VALUE, true, minDaysInFirstWeek);\n-            chrono \u003d new CutoverChronology(julian_utc, gregorian_utc, gregorianCutover);\n-        }\n-        if (!centuryISO) {\n-            chrono \u003d new GJCenturyChronology(chrono);\n-        }\n-    }\n-    cache.add(new SoftReference(chrono));\n     return chrono;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Re-organized chronology package and created new field package.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@125 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "1/27/04, 11:12 PM",
          "commitName": "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7",
          "commitAuthor": "Brian S O\u0027Neill",
          "commitDateOld": "1/11/04, 9:39 AM",
          "commitNameOld": "6f5522f58c1d2abdec37b5d22e5981716d4ec731",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 16.56,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static CopticChronology getInstance(DateTimeZone zone, int minDaysInFirstWeek) {\n    if (zone \u003d\u003d null) {\n        zone \u003d DateTimeZone.getDefault();\n    }\n    CopticChronology chrono;\n    synchronized (cCache) {\n        CopticChronology[] chronos \u003d (CopticChronology[]) cCache.get(zone);\n        if (chronos \u003d\u003d null) {\n            chronos \u003d new CopticChronology[7];\n            cCache.put(zone, chronos);\n        }\n        try {\n            chrono \u003d chronos[minDaysInFirstWeek - 1];\n        } catch (ArrayIndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Invalid min days in first week: \" + minDaysInFirstWeek);\n        }\n        if (chrono \u003d\u003d null) {\n            if (zone \u003d\u003d DateTimeZone.UTC) {\n                chrono \u003d new CopticChronology(null, null, minDaysInFirstWeek);\n                DateTime lowerLimit \u003d new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);\n                chrono \u003d new CopticChronology(LimitChronology.getInstance(chrono, lowerLimit, null), null, minDaysInFirstWeek);\n            } else {\n                chrono \u003d getInstance(DateTimeZone.UTC, minDaysInFirstWeek);\n                chrono \u003d new CopticChronology(ZonedChronology.getInstance(chrono, zone), null, minDaysInFirstWeek);\n            }\n            chronos[minDaysInFirstWeek - 1] \u003d chrono;\n        }\n    }\n    return chrono;\n}",
          "path": "JodaTime/src/java/org/joda/time/chrono/CopticChronology.java",
          "functionStartLine": 137,
          "functionName": "getInstance",
          "functionAnnotation": "",
          "functionDoc": "Gets an instance of the CopticChronology in the given time zone.\n\n@param zone the time zone to get the chronology in, null is default\n@param minDaysInFirstWeek minimum number of days in first week of the year; default is 4\n@return a chronology in the specified time zone\n",
          "diff": "@@ -1,33 +1,30 @@\n-public synchronized GJChronology getInstance(long gregorianCutover, boolean centuryISO, int minDaysInFirstWeek) {\n-    GJChronology chrono;\n-    ArrayList cache \u003d iCache;\n-    for (int i \u003d cache.size(); --i \u003e\u003d 0; ) {\n-        chrono \u003d (GJChronology) ((SoftReference) cache.get(i)).get();\n+public static CopticChronology getInstance(DateTimeZone zone, int minDaysInFirstWeek) {\n+    if (zone \u003d\u003d null) {\n+        zone \u003d DateTimeZone.getDefault();\n+    }\n+    CopticChronology chrono;\n+    synchronized (cCache) {\n+        CopticChronology[] chronos \u003d (CopticChronology[]) cCache.get(zone);\n+        if (chronos \u003d\u003d null) {\n+            chronos \u003d new CopticChronology[7];\n+            cCache.put(zone, chronos);\n+        }\n+        try {\n+            chrono \u003d chronos[minDaysInFirstWeek - 1];\n+        } catch (ArrayIndexOutOfBoundsException e) {\n+            throw new IllegalArgumentException(\"Invalid min days in first week: \" + minDaysInFirstWeek);\n+        }\n         if (chrono \u003d\u003d null) {\n-            cache.remove(i);\n-            continue;\n-        }\n-        if (chrono.getGregorianJulianCutoverMillis() \u003d\u003d gregorianCutover \u0026\u0026 chrono.isCenturyISO() \u003d\u003d centuryISO \u0026\u0026 chrono.getMinimumDaysInFirstWeek() \u003d\u003d minDaysInFirstWeek) {\n-            return chrono;\n+            if (zone \u003d\u003d DateTimeZone.UTC) {\n+                chrono \u003d new CopticChronology(null, null, minDaysInFirstWeek);\n+                DateTime lowerLimit \u003d new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);\n+                chrono \u003d new CopticChronology(LimitChronology.getInstance(chrono, lowerLimit, null), null, minDaysInFirstWeek);\n+            } else {\n+                chrono \u003d getInstance(DateTimeZone.UTC, minDaysInFirstWeek);\n+                chrono \u003d new CopticChronology(ZonedChronology.getInstance(chrono, zone), null, minDaysInFirstWeek);\n+            }\n+            chronos[minDaysInFirstWeek - 1] \u003d chrono;\n         }\n     }\n-    if (iZone !\u003d DateTimeZone.UTC) {\n-        chrono \u003d GJChronology.getInstance(DateTimeZone.UTC, gregorianCutover, centuryISO, minDaysInFirstWeek);\n-        chrono \u003d new GJZonedChronology(chrono, iZone);\n-    } else {\n-        if (gregorianCutover \u003d\u003d Long.MAX_VALUE) {\n-            chrono \u003d new JulianChronology(minDaysInFirstWeek);\n-        } else if (gregorianCutover \u003d\u003d Long.MIN_VALUE) {\n-            chrono \u003d new GregorianChronology(minDaysInFirstWeek);\n-        } else {\n-            JulianChronology julian_utc \u003d (JulianChronology) GJChronology.getInstance(DateTimeZone.UTC, Long.MAX_VALUE, true, minDaysInFirstWeek);\n-            GregorianChronology gregorian_utc \u003d (GregorianChronology) GJChronology.getInstance(DateTimeZone.UTC, Long.MIN_VALUE, true, minDaysInFirstWeek);\n-            chrono \u003d new CutoverChronology(julian_utc, gregorian_utc, gregorianCutover);\n-        }\n-        if (!centuryISO) {\n-            chrono \u003d new GJCenturyChronology(chrono);\n-        }\n-    }\n-    cache.add(new SoftReference(chrono));\n     return chrono;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "Gets an instance of the CopticChronology in the given time zone.\n\n@param zone the time zone to get the chronology in, null is default\n@param minDaysInFirstWeek minimum number of days in first week of the year; default is 4\n@return a chronology in the specified time zone\n"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "Re-organized chronology package and created new field package.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@125 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "1/27/04, 11:12 PM",
          "commitName": "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7",
          "commitAuthor": "Brian S O\u0027Neill",
          "commitDateOld": "1/11/04, 9:39 AM",
          "commitNameOld": "6f5522f58c1d2abdec37b5d22e5981716d4ec731",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 16.56,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static CopticChronology getInstance(DateTimeZone zone, int minDaysInFirstWeek) {\n    if (zone \u003d\u003d null) {\n        zone \u003d DateTimeZone.getDefault();\n    }\n    CopticChronology chrono;\n    synchronized (cCache) {\n        CopticChronology[] chronos \u003d (CopticChronology[]) cCache.get(zone);\n        if (chronos \u003d\u003d null) {\n            chronos \u003d new CopticChronology[7];\n            cCache.put(zone, chronos);\n        }\n        try {\n            chrono \u003d chronos[minDaysInFirstWeek - 1];\n        } catch (ArrayIndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\"Invalid min days in first week: \" + minDaysInFirstWeek);\n        }\n        if (chrono \u003d\u003d null) {\n            if (zone \u003d\u003d DateTimeZone.UTC) {\n                chrono \u003d new CopticChronology(null, null, minDaysInFirstWeek);\n                DateTime lowerLimit \u003d new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);\n                chrono \u003d new CopticChronology(LimitChronology.getInstance(chrono, lowerLimit, null), null, minDaysInFirstWeek);\n            } else {\n                chrono \u003d getInstance(DateTimeZone.UTC, minDaysInFirstWeek);\n                chrono \u003d new CopticChronology(ZonedChronology.getInstance(chrono, zone), null, minDaysInFirstWeek);\n            }\n            chronos[minDaysInFirstWeek - 1] \u003d chrono;\n        }\n    }\n    return chrono;\n}",
          "path": "JodaTime/src/java/org/joda/time/chrono/CopticChronology.java",
          "functionStartLine": 137,
          "functionName": "getInstance",
          "functionAnnotation": "",
          "functionDoc": "Gets an instance of the CopticChronology in the given time zone.\n\n@param zone the time zone to get the chronology in, null is default\n@param minDaysInFirstWeek minimum number of days in first week of the year; default is 4\n@return a chronology in the specified time zone\n",
          "diff": "@@ -1,33 +1,30 @@\n-public synchronized GJChronology getInstance(long gregorianCutover, boolean centuryISO, int minDaysInFirstWeek) {\n-    GJChronology chrono;\n-    ArrayList cache \u003d iCache;\n-    for (int i \u003d cache.size(); --i \u003e\u003d 0; ) {\n-        chrono \u003d (GJChronology) ((SoftReference) cache.get(i)).get();\n+public static CopticChronology getInstance(DateTimeZone zone, int minDaysInFirstWeek) {\n+    if (zone \u003d\u003d null) {\n+        zone \u003d DateTimeZone.getDefault();\n+    }\n+    CopticChronology chrono;\n+    synchronized (cCache) {\n+        CopticChronology[] chronos \u003d (CopticChronology[]) cCache.get(zone);\n+        if (chronos \u003d\u003d null) {\n+            chronos \u003d new CopticChronology[7];\n+            cCache.put(zone, chronos);\n+        }\n+        try {\n+            chrono \u003d chronos[minDaysInFirstWeek - 1];\n+        } catch (ArrayIndexOutOfBoundsException e) {\n+            throw new IllegalArgumentException(\"Invalid min days in first week: \" + minDaysInFirstWeek);\n+        }\n         if (chrono \u003d\u003d null) {\n-            cache.remove(i);\n-            continue;\n-        }\n-        if (chrono.getGregorianJulianCutoverMillis() \u003d\u003d gregorianCutover \u0026\u0026 chrono.isCenturyISO() \u003d\u003d centuryISO \u0026\u0026 chrono.getMinimumDaysInFirstWeek() \u003d\u003d minDaysInFirstWeek) {\n-            return chrono;\n+            if (zone \u003d\u003d DateTimeZone.UTC) {\n+                chrono \u003d new CopticChronology(null, null, minDaysInFirstWeek);\n+                DateTime lowerLimit \u003d new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);\n+                chrono \u003d new CopticChronology(LimitChronology.getInstance(chrono, lowerLimit, null), null, minDaysInFirstWeek);\n+            } else {\n+                chrono \u003d getInstance(DateTimeZone.UTC, minDaysInFirstWeek);\n+                chrono \u003d new CopticChronology(ZonedChronology.getInstance(chrono, zone), null, minDaysInFirstWeek);\n+            }\n+            chronos[minDaysInFirstWeek - 1] \u003d chrono;\n         }\n     }\n-    if (iZone !\u003d DateTimeZone.UTC) {\n-        chrono \u003d GJChronology.getInstance(DateTimeZone.UTC, gregorianCutover, centuryISO, minDaysInFirstWeek);\n-        chrono \u003d new GJZonedChronology(chrono, iZone);\n-    } else {\n-        if (gregorianCutover \u003d\u003d Long.MAX_VALUE) {\n-            chrono \u003d new JulianChronology(minDaysInFirstWeek);\n-        } else if (gregorianCutover \u003d\u003d Long.MIN_VALUE) {\n-            chrono \u003d new GregorianChronology(minDaysInFirstWeek);\n-        } else {\n-            JulianChronology julian_utc \u003d (JulianChronology) GJChronology.getInstance(DateTimeZone.UTC, Long.MAX_VALUE, true, minDaysInFirstWeek);\n-            GregorianChronology gregorian_utc \u003d (GregorianChronology) GJChronology.getInstance(DateTimeZone.UTC, Long.MIN_VALUE, true, minDaysInFirstWeek);\n-            chrono \u003d new CutoverChronology(julian_utc, gregorian_utc, gregorianCutover);\n-        }\n-        if (!centuryISO) {\n-            chrono \u003d new GJCenturyChronology(chrono);\n-        }\n-    }\n-    cache.add(new SoftReference(chrono));\n     return chrono;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[gregorianCutover-long, centuryISO-boolean, minDaysInFirstWeek-int]",
            "newValue": "[zone-DateTimeZone, minDaysInFirstWeek-int]"
          }
        }
      ]
    },
    "0e07ac6b2cff63550d7df336355ca63cc05aa40b": {
      "type": "Ybodychange",
      "commitMessage": "Move from Joda CVS\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@10 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "12/18/03, 6:07 PM",
      "commitName": "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "12/16/03, 1:39 PM",
      "commitNameOld": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 2.19,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "public synchronized GJChronology getInstance(long gregorianCutover, boolean centuryISO, int minDaysInFirstWeek) {\n    GJChronology chrono;\n    ArrayList cache \u003d iCache;\n    for (int i \u003d cache.size(); --i \u003e\u003d 0; ) {\n        chrono \u003d (GJChronology) ((SoftReference) cache.get(i)).get();\n        if (chrono \u003d\u003d null) {\n            cache.remove(i);\n            continue;\n        }\n        if (chrono.getGregorianJulianCutoverMillis() \u003d\u003d gregorianCutover \u0026\u0026 chrono.isCenturyISO() \u003d\u003d centuryISO \u0026\u0026 chrono.getMinimumDaysInFirstWeek() \u003d\u003d minDaysInFirstWeek) {\n            return chrono;\n        }\n    }\n    if (iZone !\u003d DateTimeZone.UTC) {\n        chrono \u003d GJChronology.getInstance(DateTimeZone.UTC, gregorianCutover, centuryISO, minDaysInFirstWeek);\n        chrono \u003d new GJZonedChronology(chrono, iZone);\n    } else {\n        if (gregorianCutover \u003d\u003d Long.MAX_VALUE) {\n            chrono \u003d new JulianChronology(minDaysInFirstWeek);\n        } else if (gregorianCutover \u003d\u003d Long.MIN_VALUE) {\n            chrono \u003d new GregorianChronology(minDaysInFirstWeek);\n        } else {\n            JulianChronology julian_utc \u003d (JulianChronology) GJChronology.getInstance(DateTimeZone.UTC, Long.MAX_VALUE, true, minDaysInFirstWeek);\n            GregorianChronology gregorian_utc \u003d (GregorianChronology) GJChronology.getInstance(DateTimeZone.UTC, Long.MIN_VALUE, true, minDaysInFirstWeek);\n            chrono \u003d new CutoverChronology(julian_utc, gregorian_utc, gregorianCutover);\n        }\n        if (!centuryISO) {\n            chrono \u003d new GJCenturyChronology(chrono);\n        }\n    }\n    cache.add(new SoftReference(chrono));\n    return chrono;\n}",
      "path": "JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java",
      "functionStartLine": 665,
      "functionName": "getInstance",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,31 +1,33 @@\n public synchronized GJChronology getInstance(long gregorianCutover, boolean centuryISO, int minDaysInFirstWeek) {\n     GJChronology chrono;\n     ArrayList cache \u003d iCache;\n     for (int i \u003d cache.size(); --i \u003e\u003d 0; ) {\n         chrono \u003d (GJChronology) ((SoftReference) cache.get(i)).get();\n         if (chrono \u003d\u003d null) {\n             cache.remove(i);\n             continue;\n         }\n         if (chrono.getGregorianJulianCutoverMillis() \u003d\u003d gregorianCutover \u0026\u0026 chrono.isCenturyISO() \u003d\u003d centuryISO \u0026\u0026 chrono.getMinimumDaysInFirstWeek() \u003d\u003d minDaysInFirstWeek) {\n             return chrono;\n         }\n     }\n-    if (gregorianCutover \u003d\u003d Long.MAX_VALUE) {\n-        chrono \u003d new JulianChronology(minDaysInFirstWeek);\n-    } else if (gregorianCutover \u003d\u003d Long.MIN_VALUE) {\n-        chrono \u003d new GregorianChronology(minDaysInFirstWeek);\n-    } else {\n-        JulianChronology julian_utc \u003d (JulianChronology) GJChronology.getInstance(DateTimeZone.UTC, Long.MAX_VALUE, true, minDaysInFirstWeek);\n-        GregorianChronology gregorian_utc \u003d (GregorianChronology) GJChronology.getInstance(DateTimeZone.UTC, Long.MIN_VALUE, true, minDaysInFirstWeek);\n-        chrono \u003d new CutoverChronology(julian_utc, gregorian_utc, gregorianCutover);\n-    }\n-    if (!centuryISO) {\n-        chrono \u003d new GJCenturyChronology(chrono);\n-    }\n     if (iZone !\u003d DateTimeZone.UTC) {\n+        chrono \u003d GJChronology.getInstance(DateTimeZone.UTC, gregorianCutover, centuryISO, minDaysInFirstWeek);\n         chrono \u003d new GJZonedChronology(chrono, iZone);\n+    } else {\n+        if (gregorianCutover \u003d\u003d Long.MAX_VALUE) {\n+            chrono \u003d new JulianChronology(minDaysInFirstWeek);\n+        } else if (gregorianCutover \u003d\u003d Long.MIN_VALUE) {\n+            chrono \u003d new GregorianChronology(minDaysInFirstWeek);\n+        } else {\n+            JulianChronology julian_utc \u003d (JulianChronology) GJChronology.getInstance(DateTimeZone.UTC, Long.MAX_VALUE, true, minDaysInFirstWeek);\n+            GregorianChronology gregorian_utc \u003d (GregorianChronology) GJChronology.getInstance(DateTimeZone.UTC, Long.MIN_VALUE, true, minDaysInFirstWeek);\n+            chrono \u003d new CutoverChronology(julian_utc, gregorian_utc, gregorianCutover);\n+        }\n+        if (!centuryISO) {\n+            chrono \u003d new GJCenturyChronology(chrono);\n+        }\n     }\n     cache.add(new SoftReference(chrono));\n     return chrono;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb": {
      "type": "Yintroduced",
      "commitMessage": "Move version 0.9 to joda-time repository\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@4 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "12/16/03, 1:39 PM",
      "commitName": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
      "commitAuthor": "Stephen Colebourne",
      "diff": "@@ -0,0 +1,31 @@\n+public synchronized GJChronology getInstance(long gregorianCutover, boolean centuryISO, int minDaysInFirstWeek) {\n+    GJChronology chrono;\n+    ArrayList cache \u003d iCache;\n+    for (int i \u003d cache.size(); --i \u003e\u003d 0; ) {\n+        chrono \u003d (GJChronology) ((SoftReference) cache.get(i)).get();\n+        if (chrono \u003d\u003d null) {\n+            cache.remove(i);\n+            continue;\n+        }\n+        if (chrono.getGregorianJulianCutoverMillis() \u003d\u003d gregorianCutover \u0026\u0026 chrono.isCenturyISO() \u003d\u003d centuryISO \u0026\u0026 chrono.getMinimumDaysInFirstWeek() \u003d\u003d minDaysInFirstWeek) {\n+            return chrono;\n+        }\n+    }\n+    if (gregorianCutover \u003d\u003d Long.MAX_VALUE) {\n+        chrono \u003d new JulianChronology(minDaysInFirstWeek);\n+    } else if (gregorianCutover \u003d\u003d Long.MIN_VALUE) {\n+        chrono \u003d new GregorianChronology(minDaysInFirstWeek);\n+    } else {\n+        JulianChronology julian_utc \u003d (JulianChronology) GJChronology.getInstance(DateTimeZone.UTC, Long.MAX_VALUE, true, minDaysInFirstWeek);\n+        GregorianChronology gregorian_utc \u003d (GregorianChronology) GJChronology.getInstance(DateTimeZone.UTC, Long.MIN_VALUE, true, minDaysInFirstWeek);\n+        chrono \u003d new CutoverChronology(julian_utc, gregorian_utc, gregorianCutover);\n+    }\n+    if (!centuryISO) {\n+        chrono \u003d new GJCenturyChronology(chrono);\n+    }\n+    if (iZone !\u003d DateTimeZone.UTC) {\n+        chrono \u003d new GJZonedChronology(chrono, iZone);\n+    }\n+    cache.add(new SoftReference(chrono));\n+    return chrono;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public synchronized GJChronology getInstance(long gregorianCutover, boolean centuryISO, int minDaysInFirstWeek) {\n    GJChronology chrono;\n    ArrayList cache \u003d iCache;\n    for (int i \u003d cache.size(); --i \u003e\u003d 0; ) {\n        chrono \u003d (GJChronology) ((SoftReference) cache.get(i)).get();\n        if (chrono \u003d\u003d null) {\n            cache.remove(i);\n            continue;\n        }\n        if (chrono.getGregorianJulianCutoverMillis() \u003d\u003d gregorianCutover \u0026\u0026 chrono.isCenturyISO() \u003d\u003d centuryISO \u0026\u0026 chrono.getMinimumDaysInFirstWeek() \u003d\u003d minDaysInFirstWeek) {\n            return chrono;\n        }\n    }\n    if (gregorianCutover \u003d\u003d Long.MAX_VALUE) {\n        chrono \u003d new JulianChronology(minDaysInFirstWeek);\n    } else if (gregorianCutover \u003d\u003d Long.MIN_VALUE) {\n        chrono \u003d new GregorianChronology(minDaysInFirstWeek);\n    } else {\n        JulianChronology julian_utc \u003d (JulianChronology) GJChronology.getInstance(DateTimeZone.UTC, Long.MAX_VALUE, true, minDaysInFirstWeek);\n        GregorianChronology gregorian_utc \u003d (GregorianChronology) GJChronology.getInstance(DateTimeZone.UTC, Long.MIN_VALUE, true, minDaysInFirstWeek);\n        chrono \u003d new CutoverChronology(julian_utc, gregorian_utc, gregorianCutover);\n    }\n    if (!centuryISO) {\n        chrono \u003d new GJCenturyChronology(chrono);\n    }\n    if (iZone !\u003d DateTimeZone.UTC) {\n        chrono \u003d new GJZonedChronology(chrono, iZone);\n    }\n    cache.add(new SoftReference(chrono));\n    return chrono;\n}",
      "path": "JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java",
      "functionStartLine": 515,
      "functionName": "getInstance",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}