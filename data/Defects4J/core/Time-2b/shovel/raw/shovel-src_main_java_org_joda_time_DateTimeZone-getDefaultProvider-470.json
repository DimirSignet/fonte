{
  "origin": "codeshovel",
  "repositoryName": "Time-2b",
  "repositoryPath": "/tmp/Time-2b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DateTimeZone.java",
  "functionName": "getDefaultProvider",
  "functionId": "getDefaultProvider",
  "sourceFilePath": "src/main/java/org/joda/time/DateTimeZone.java",
  "functionAnnotation": "",
  "functionDoc": "Gets the default zone provider.\n\u003cp\u003e\nTries the system property \u003ccode\u003eorg.joda.time.DateTimeZone.Provider\u003c/code\u003e.\nThen tries a \u003ccode\u003eZoneInfoProvider\u003c/code\u003e using the data in \u003ccode\u003eorg/joda/time/tz/data\u003c/code\u003e.\nThen uses \u003ccode\u003eUTCProvider\u003c/code\u003e.\n\n@return the default name provider\n",
  "functionStartLine": 470,
  "functionEndLine": 499,
  "numCommitsSeen": 59,
  "timeTaken": 4460,
  "changeHistory": [
    "55876b98250c1afaf23be12fb5fc4bd3677abbce",
    "df4a82f4fb46cc2248280c462e18f08d55a3d112",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1",
    "6892714b99ed388c1f9f8f55f114fcb602186fa6",
    "6682ab2abccb5819ec2e62a1f3f9018945bed9cd",
    "0e07ac6b2cff63550d7df336355ca63cc05aa40b"
  ],
  "changeHistoryShort": {
    "55876b98250c1afaf23be12fb5fc4bd3677abbce": "Ybodychange",
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": "Yfilerename",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": "Yfilerename",
    "6892714b99ed388c1f9f8f55f114fcb602186fa6": "Ybodychange",
    "6682ab2abccb5819ec2e62a1f3f9018945bed9cd": "Ymultichange(Ybodychange,Ydocchange)",
    "0e07ac6b2cff63550d7df336355ca63cc05aa40b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "55876b98250c1afaf23be12fb5fc4bd3677abbce": {
      "type": "Ybodychange",
      "commitMessage": "Remove uncaughtException calls\n\nPreviously the code called ThreadGroup.uncaughtException() which was invalid\nNow it throws a RuntimeException or logs to System.err\nFixes #59\n",
      "commitDate": "9/12/13, 7:59 AM",
      "commitName": "55876b98250c1afaf23be12fb5fc4bd3677abbce",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/16/13, 7:46 AM",
      "commitNameOld": "a6d5c6b54095e93a27e989670f11549395c4c8ce",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 27.01,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "private static Provider getDefaultProvider() {\n    Provider provider \u003d null;\n    try {\n        String providerClass \u003d System.getProperty(\"org.joda.time.DateTimeZone.Provider\");\n        if (providerClass !\u003d null) {\n            try {\n                provider \u003d (Provider) Class.forName(providerClass).newInstance();\n            } catch (Exception ex) {\n                throw new RuntimeException(ex);\n            }\n        }\n    } catch (SecurityException ex) {\n    }\n    if (provider \u003d\u003d null) {\n        try {\n            provider \u003d new ZoneInfoProvider(\"org/joda/time/tz/data\");\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n    }\n    if (provider \u003d\u003d null) {\n        provider \u003d new UTCProvider();\n    }\n    return provider;\n}",
      "path": "src/main/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 470,
      "functionName": "getDefaultProvider",
      "functionAnnotation": "",
      "functionDoc": "Gets the default zone provider.\n\u003cp\u003e\nTries the system property \u003ccode\u003eorg.joda.time.DateTimeZone.Provider\u003c/code\u003e.\nThen tries a \u003ccode\u003eZoneInfoProvider\u003c/code\u003e using the data in \u003ccode\u003eorg/joda/time/tz/data\u003c/code\u003e.\nThen uses \u003ccode\u003eUTCProvider\u003c/code\u003e.\n\n@return the default name provider\n",
      "diff": "@@ -1,27 +1,25 @@\n private static Provider getDefaultProvider() {\n     Provider provider \u003d null;\n     try {\n         String providerClass \u003d System.getProperty(\"org.joda.time.DateTimeZone.Provider\");\n         if (providerClass !\u003d null) {\n             try {\n                 provider \u003d (Provider) Class.forName(providerClass).newInstance();\n             } catch (Exception ex) {\n-                Thread thread \u003d Thread.currentThread();\n-                thread.getThreadGroup().uncaughtException(thread, ex);\n+                throw new RuntimeException(ex);\n             }\n         }\n     } catch (SecurityException ex) {\n     }\n     if (provider \u003d\u003d null) {\n         try {\n             provider \u003d new ZoneInfoProvider(\"org/joda/time/tz/data\");\n         } catch (Exception ex) {\n-            Thread thread \u003d Thread.currentThread();\n-            thread.getThreadGroup().uncaughtException(thread, ex);\n+            ex.printStackTrace();\n         }\n     }\n     if (provider \u003d\u003d null) {\n         provider \u003d new UTCProvider();\n     }\n     return provider;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": {
      "type": "Yfilerename",
      "commitMessage": "Remove JodaTime folder moving files to top level\n",
      "commitDate": "5/16/11, 10:02 AM",
      "commitName": "df4a82f4fb46cc2248280c462e18f08d55a3d112",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "5/16/11, 9:58 AM",
      "commitNameOld": "72b22654962284bac59c2777131b42a2d1f53228",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private static Provider getDefaultProvider() {\n    Provider provider \u003d null;\n    try {\n        String providerClass \u003d System.getProperty(\"org.joda.time.DateTimeZone.Provider\");\n        if (providerClass !\u003d null) {\n            try {\n                provider \u003d (Provider) Class.forName(providerClass).newInstance();\n            } catch (Exception ex) {\n                Thread thread \u003d Thread.currentThread();\n                thread.getThreadGroup().uncaughtException(thread, ex);\n            }\n        }\n    } catch (SecurityException ex) {\n    }\n    if (provider \u003d\u003d null) {\n        try {\n            provider \u003d new ZoneInfoProvider(\"org/joda/time/tz/data\");\n        } catch (Exception ex) {\n            Thread thread \u003d Thread.currentThread();\n            thread.getThreadGroup().uncaughtException(thread, ex);\n        }\n    }\n    if (provider \u003d\u003d null) {\n        provider \u003d new UTCProvider();\n    }\n    return provider;\n}",
      "path": "src/main/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 442,
      "functionName": "getDefaultProvider",
      "functionAnnotation": "",
      "functionDoc": "Gets the default zone provider.\n\u003cp\u003e\nTries the system property \u003ccode\u003eorg.joda.time.DateTimeZone.Provider\u003c/code\u003e.\nThen tries a \u003ccode\u003eZoneInfoProvider\u003c/code\u003e using the data in \u003ccode\u003eorg/joda/time/tz/data\u003c/code\u003e.\nThen uses \u003ccode\u003eUTCProvider\u003c/code\u003e.\n\n@return the default name provider\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/main/java/org/joda/time/DateTimeZone.java",
        "newPath": "src/main/java/org/joda/time/DateTimeZone.java"
      }
    },
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": {
      "type": "Yfilerename",
      "commitMessage": "Convert to maven 2\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1540 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/8/10, 5:17 PM",
      "commitName": "53feb3fa56af7260e607844524b7e5a9be49ecc1",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/8/10, 5:02 PM",
      "commitNameOld": "7fa2ceaf5d95d050095432aa646ea803aa35e122",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private static Provider getDefaultProvider() {\n    Provider provider \u003d null;\n    try {\n        String providerClass \u003d System.getProperty(\"org.joda.time.DateTimeZone.Provider\");\n        if (providerClass !\u003d null) {\n            try {\n                provider \u003d (Provider) Class.forName(providerClass).newInstance();\n            } catch (Exception ex) {\n                Thread thread \u003d Thread.currentThread();\n                thread.getThreadGroup().uncaughtException(thread, ex);\n            }\n        }\n    } catch (SecurityException ex) {\n    }\n    if (provider \u003d\u003d null) {\n        try {\n            provider \u003d new ZoneInfoProvider(\"org/joda/time/tz/data\");\n        } catch (Exception ex) {\n            Thread thread \u003d Thread.currentThread();\n            thread.getThreadGroup().uncaughtException(thread, ex);\n        }\n    }\n    if (provider \u003d\u003d null) {\n        provider \u003d new UTCProvider();\n    }\n    return provider;\n}",
      "path": "JodaTime/src/main/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 427,
      "functionName": "getDefaultProvider",
      "functionAnnotation": "",
      "functionDoc": "Gets the default zone provider.\n\u003cp\u003e\nTries the system property \u003ccode\u003eorg.joda.time.DateTimeZone.Provider\u003c/code\u003e.\nThen tries a \u003ccode\u003eZoneInfoProvider\u003c/code\u003e using the data in \u003ccode\u003eorg/joda/time/tz/data\u003c/code\u003e.\nThen uses \u003ccode\u003eUTCProvider\u003c/code\u003e.\n\n@return the default name provider\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
        "newPath": "JodaTime/src/main/java/org/joda/time/DateTimeZone.java"
      }
    },
    "6892714b99ed388c1f9f8f55f114fcb602186fa6": {
      "type": "Ybodychange",
      "commitMessage": "Checkstyle fixes\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@561 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "11/5/04, 4:16 PM",
      "commitName": "6892714b99ed388c1f9f8f55f114fcb602186fa6",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "10/28/04, 3:56 PM",
      "commitNameOld": "6cad802018b6b82ea4df53aaf91a0bbc98b2f9a3",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 8.06,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "actualSource": "private static Provider getDefaultProvider() {\n    Provider provider \u003d null;\n    try {\n        String providerClass \u003d System.getProperty(\"org.joda.time.DateTimeZone.Provider\");\n        if (providerClass !\u003d null) {\n            try {\n                provider \u003d (Provider) Class.forName(providerClass).newInstance();\n            } catch (Exception ex) {\n                Thread thread \u003d Thread.currentThread();\n                thread.getThreadGroup().uncaughtException(thread, ex);\n            }\n        }\n    } catch (SecurityException ex) {\n    }\n    if (provider \u003d\u003d null) {\n        try {\n            provider \u003d new ZoneInfoProvider(\"org/joda/time/tz/data\");\n        } catch (Exception ex) {\n            Thread thread \u003d Thread.currentThread();\n            thread.getThreadGroup().uncaughtException(thread, ex);\n        }\n    }\n    if (provider \u003d\u003d null) {\n        provider \u003d new UTCProvider();\n    }\n    return provider;\n}",
      "path": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 446,
      "functionName": "getDefaultProvider",
      "functionAnnotation": "",
      "functionDoc": "Gets the default zone provider.\n\u003cp\u003e\nTries the system property \u003ccode\u003eorg.joda.time.DateTimeZone.Provider\u003c/code\u003e.\nThen tries a \u003ccode\u003eZoneInfoProvider\u003c/code\u003e using the data in \u003ccode\u003eorg/joda/time/tz/data\u003c/code\u003e.\nThen uses \u003ccode\u003eUTCProvider\u003c/code\u003e.\n\n@return the default name provider\n",
      "diff": "",
      "extendedDetails": {}
    },
    "6682ab2abccb5819ec2e62a1f3f9018945bed9cd": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Test DateTimeZone\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@279 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "7/14/04, 4:23 PM",
      "commitName": "6682ab2abccb5819ec2e62a1f3f9018945bed9cd",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Test DateTimeZone\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@279 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "7/14/04, 4:23 PM",
          "commitName": "6682ab2abccb5819ec2e62a1f3f9018945bed9cd",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "5/14/04, 11:08 PM",
          "commitNameOld": "eb0cac2be7678d8c6b3c2bde3aff15eb4ca982f1",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 60.72,
          "commitsBetweenForRepo": 79,
          "commitsBetweenForFile": 1,
          "actualSource": "private static Provider getDefaultProvider() {\n    Provider provider \u003d null;\n    try {\n        String providerClass \u003d System.getProperty(\"org.joda.time.DateTimeZone.Provider\");\n        if (providerClass !\u003d null) {\n            try {\n                provider \u003d (Provider) Class.forName(providerClass).newInstance();\n            } catch (Exception ex) {\n                Thread thread \u003d Thread.currentThread();\n                thread.getThreadGroup().uncaughtException(thread, ex);\n            }\n        }\n    } catch (SecurityException ex) {\n    }\n    if (provider \u003d\u003d null) {\n        try {\n            provider \u003d new ZoneInfoProvider(\"org/joda/time/tz/data\");\n        } catch (Exception ex) {\n            Thread thread \u003d Thread.currentThread();\n            thread.getThreadGroup().uncaughtException(thread, ex);\n        }\n    }\n    if (provider \u003d\u003d null) {\n        provider \u003d new UTCProvider();\n    }\n    return provider;\n}",
          "path": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
          "functionStartLine": 382,
          "functionName": "getDefaultProvider",
          "functionAnnotation": "",
          "functionDoc": "Gets the default zone provider.\n\u003cp\u003e\nTries the system property \u003ccode\u003eorg.joda.time.DateTimeZone.Provider\u003c/code\u003e.\nThen tries a \u003ccode\u003eZoneInfoProvider\u003c/code\u003e using the data in \u003ccode\u003eorg/joda/time/tz/data\u003c/code\u003e.\nThen uses \u003ccode\u003eUTCProvider\u003c/code\u003e.\n\n@return the default name provider\n",
          "diff": "@@ -1,27 +1,27 @@\n private static Provider getDefaultProvider() {\n     Provider provider \u003d null;\n     try {\n         String providerClass \u003d System.getProperty(\"org.joda.time.DateTimeZone.Provider\");\n         if (providerClass !\u003d null) {\n             try {\n                 provider \u003d (Provider) Class.forName(providerClass).newInstance();\n-            } catch (Exception e) {\n-                Thread t \u003d Thread.currentThread();\n-                t.getThreadGroup().uncaughtException(t, e);\n+            } catch (Exception ex) {\n+                Thread thread \u003d Thread.currentThread();\n+                thread.getThreadGroup().uncaughtException(thread, ex);\n             }\n         }\n-    } catch (SecurityException e) {\n+    } catch (SecurityException ex) {\n     }\n     if (provider \u003d\u003d null) {\n         try {\n             provider \u003d new ZoneInfoProvider(\"org/joda/time/tz/data\");\n-        } catch (Exception e) {\n-            Thread t \u003d Thread.currentThread();\n-            t.getThreadGroup().uncaughtException(t, e);\n+        } catch (Exception ex) {\n+            Thread thread \u003d Thread.currentThread();\n+            thread.getThreadGroup().uncaughtException(thread, ex);\n         }\n     }\n     if (provider \u003d\u003d null) {\n         provider \u003d new UTCProvider();\n     }\n     return provider;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Test DateTimeZone\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@279 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "7/14/04, 4:23 PM",
          "commitName": "6682ab2abccb5819ec2e62a1f3f9018945bed9cd",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "5/14/04, 11:08 PM",
          "commitNameOld": "eb0cac2be7678d8c6b3c2bde3aff15eb4ca982f1",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 60.72,
          "commitsBetweenForRepo": 79,
          "commitsBetweenForFile": 1,
          "actualSource": "private static Provider getDefaultProvider() {\n    Provider provider \u003d null;\n    try {\n        String providerClass \u003d System.getProperty(\"org.joda.time.DateTimeZone.Provider\");\n        if (providerClass !\u003d null) {\n            try {\n                provider \u003d (Provider) Class.forName(providerClass).newInstance();\n            } catch (Exception ex) {\n                Thread thread \u003d Thread.currentThread();\n                thread.getThreadGroup().uncaughtException(thread, ex);\n            }\n        }\n    } catch (SecurityException ex) {\n    }\n    if (provider \u003d\u003d null) {\n        try {\n            provider \u003d new ZoneInfoProvider(\"org/joda/time/tz/data\");\n        } catch (Exception ex) {\n            Thread thread \u003d Thread.currentThread();\n            thread.getThreadGroup().uncaughtException(thread, ex);\n        }\n    }\n    if (provider \u003d\u003d null) {\n        provider \u003d new UTCProvider();\n    }\n    return provider;\n}",
          "path": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
          "functionStartLine": 382,
          "functionName": "getDefaultProvider",
          "functionAnnotation": "",
          "functionDoc": "Gets the default zone provider.\n\u003cp\u003e\nTries the system property \u003ccode\u003eorg.joda.time.DateTimeZone.Provider\u003c/code\u003e.\nThen tries a \u003ccode\u003eZoneInfoProvider\u003c/code\u003e using the data in \u003ccode\u003eorg/joda/time/tz/data\u003c/code\u003e.\nThen uses \u003ccode\u003eUTCProvider\u003c/code\u003e.\n\n@return the default name provider\n",
          "diff": "@@ -1,27 +1,27 @@\n private static Provider getDefaultProvider() {\n     Provider provider \u003d null;\n     try {\n         String providerClass \u003d System.getProperty(\"org.joda.time.DateTimeZone.Provider\");\n         if (providerClass !\u003d null) {\n             try {\n                 provider \u003d (Provider) Class.forName(providerClass).newInstance();\n-            } catch (Exception e) {\n-                Thread t \u003d Thread.currentThread();\n-                t.getThreadGroup().uncaughtException(t, e);\n+            } catch (Exception ex) {\n+                Thread thread \u003d Thread.currentThread();\n+                thread.getThreadGroup().uncaughtException(thread, ex);\n             }\n         }\n-    } catch (SecurityException e) {\n+    } catch (SecurityException ex) {\n     }\n     if (provider \u003d\u003d null) {\n         try {\n             provider \u003d new ZoneInfoProvider(\"org/joda/time/tz/data\");\n-        } catch (Exception e) {\n-            Thread t \u003d Thread.currentThread();\n-            t.getThreadGroup().uncaughtException(t, e);\n+        } catch (Exception ex) {\n+            Thread thread \u003d Thread.currentThread();\n+            thread.getThreadGroup().uncaughtException(thread, ex);\n         }\n     }\n     if (provider \u003d\u003d null) {\n         provider \u003d new UTCProvider();\n     }\n     return provider;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "Gets the default zone provider.\n\u003cp\u003e\nTries the system property \u003ccode\u003eorg.joda.time.DateTimeZone.Provider\u003c/code\u003e.\nThen tries a \u003ccode\u003eZoneInfoProvider\u003c/code\u003e using the data in \u003ccode\u003eorg/joda/time/tz/data\u003c/code\u003e.\nThen uses \u003ccode\u003eUTCProvider\u003c/code\u003e.\n\n@return the default name provider\n"
          }
        }
      ]
    },
    "0e07ac6b2cff63550d7df336355ca63cc05aa40b": {
      "type": "Yintroduced",
      "commitMessage": "Move from Joda CVS\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@10 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "12/18/03, 6:07 PM",
      "commitName": "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
      "commitAuthor": "Stephen Colebourne",
      "diff": "@@ -0,0 +1,27 @@\n+private static Provider getDefaultProvider() {\n+    Provider provider \u003d null;\n+    try {\n+        String providerClass \u003d System.getProperty(\"org.joda.time.DateTimeZone.Provider\");\n+        if (providerClass !\u003d null) {\n+            try {\n+                provider \u003d (Provider) Class.forName(providerClass).newInstance();\n+            } catch (Exception e) {\n+                Thread t \u003d Thread.currentThread();\n+                t.getThreadGroup().uncaughtException(t, e);\n+            }\n+        }\n+    } catch (SecurityException e) {\n+    }\n+    if (provider \u003d\u003d null) {\n+        try {\n+            provider \u003d new ZoneInfoProvider(\"org/joda/time/tz/data\");\n+        } catch (Exception e) {\n+            Thread t \u003d Thread.currentThread();\n+            t.getThreadGroup().uncaughtException(t, e);\n+        }\n+    }\n+    if (provider \u003d\u003d null) {\n+        provider \u003d new UTCProvider();\n+    }\n+    return provider;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private static Provider getDefaultProvider() {\n    Provider provider \u003d null;\n    try {\n        String providerClass \u003d System.getProperty(\"org.joda.time.DateTimeZone.Provider\");\n        if (providerClass !\u003d null) {\n            try {\n                provider \u003d (Provider) Class.forName(providerClass).newInstance();\n            } catch (Exception e) {\n                Thread t \u003d Thread.currentThread();\n                t.getThreadGroup().uncaughtException(t, e);\n            }\n        }\n    } catch (SecurityException e) {\n    }\n    if (provider \u003d\u003d null) {\n        try {\n            provider \u003d new ZoneInfoProvider(\"org/joda/time/tz/data\");\n        } catch (Exception e) {\n            Thread t \u003d Thread.currentThread();\n            t.getThreadGroup().uncaughtException(t, e);\n        }\n    }\n    if (provider \u003d\u003d null) {\n        provider \u003d new UTCProvider();\n    }\n    return provider;\n}",
      "path": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 410,
      "functionName": "getDefaultProvider",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}