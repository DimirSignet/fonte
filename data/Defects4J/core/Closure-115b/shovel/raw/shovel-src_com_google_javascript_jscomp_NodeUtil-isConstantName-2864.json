{
  "origin": "codeshovel",
  "repositoryName": "Closure-115b",
  "repositoryPath": "/tmp/Closure-115b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NodeUtil.java",
  "functionName": "isConstantName",
  "functionId": "isConstantName___node-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/NodeUtil.java",
  "functionAnnotation": "",
  "functionDoc": "\u003cp\u003eDetermines whether a variable is constant:\n\u003col\u003e\n\u003cli\u003eIn Normalize, any name that matches the\n    {@link CodingConvention#isConstant(String)} is annotated with an\n    IS_CONSTANT_NAME property.\n\u003c/ol\u003e\n\n@param node A NAME or STRING node\n@return True if a name node represents a constant variable\n",
  "functionStartLine": 2864,
  "functionEndLine": 2866,
  "numCommitsSeen": 156,
  "timeTaken": 14078,
  "changeHistory": [
    "32fe250577d2408212e8f2dc9895b3db7f1a6c37",
    "70a5626922ea7e8c98747e22b6986638ba38fadc",
    "14ddcfdc0b8d1cece3c79221b1870b84f055d419",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "32fe250577d2408212e8f2dc9895b3db7f1a6c37": "Ydocchange",
    "70a5626922ea7e8c98747e22b6986638ba38fadc": "Ydocchange",
    "14ddcfdc0b8d1cece3c79221b1870b84f055d419": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "32fe250577d2408212e8f2dc9895b3db7f1a6c37": {
      "type": "Ydocchange",
      "commitMessage": "\nRespect coding convention constants as well as @const annotations when\ninferring types.\n\nR\u003dnicksantos\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d6089\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2446 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/7/13, 3:51 PM",
      "commitName": "32fe250577d2408212e8f2dc9895b3db7f1a6c37",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "1/2/13, 1:51 PM",
      "commitNameOld": "5a0efdcf1e7b3ba0b999c5575bd54baf4b7ae37e",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 5.08,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "actualSource": "static boolean isConstantName(Node node) {\n    return node.getBooleanProp(Node.IS_CONSTANT_NAME);\n}",
      "path": "src/com/google/javascript/jscomp/NodeUtil.java",
      "functionStartLine": 2816,
      "functionName": "isConstantName",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eDetermines whether a variable is constant:\n\u003col\u003e\n\u003cli\u003eIn Normalize, any name that matches the\n    {@link CodingConvention#isConstant(String)} is annotated with an\n    IS_CONSTANT_NAME property.\n\u003c/ol\u003e\n\n@param node A NAME or STRING node\n@return True if a name node represents a constant variable\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Returns true if a name node represents a constant variable.\n\n\u003cp\u003eDetermining whether a variable is constant has three steps:\n\u003col\u003e\n\u003cli\u003eIn CodingConventionAnnotator, any name that matches the\n    {@link CodingConvention#isConstant(String)} is annotated with an\n    IS_CONSTANT_NAME property.\n\u003cli\u003eThe normalize pass renames any variable with the IS_CONSTANT_NAME\n    annotation and that is initialized to a constant value with\n    a variable name including $$constant.\n\u003cli\u003eReturn true here if the variable includes $$constant in its name.\n\u003c/ol\u003e\n\n@param node A NAME or STRING node\n@return True if the variable is constant\n",
        "newValue": "\u003cp\u003eDetermines whether a variable is constant:\n\u003col\u003e\n\u003cli\u003eIn Normalize, any name that matches the\n    {@link CodingConvention#isConstant(String)} is annotated with an\n    IS_CONSTANT_NAME property.\n\u003c/ol\u003e\n\n@param node A NAME or STRING node\n@return True if a name node represents a constant variable\n"
      }
    },
    "70a5626922ea7e8c98747e22b6986638ba38fadc": {
      "type": "Ydocchange",
      "commitMessage": "\nFix various typos, spelling and grammar errors.\nFixes issue 734. \nContributed by Robert Gust Bardon\n\nR\u003dnicksantos\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d4827\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1979 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/18/12, 11:09 AM",
      "commitName": "70a5626922ea7e8c98747e22b6986638ba38fadc",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "5/8/12, 2:28 PM",
      "commitNameOld": "3dcdbe4e8ca1488fa4d79f09e507da6d4b613bd3",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 9.86,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "actualSource": "static boolean isConstantName(Node node) {\n    return node.getBooleanProp(Node.IS_CONSTANT_NAME);\n}",
      "path": "src/com/google/javascript/jscomp/NodeUtil.java",
      "functionStartLine": 2793,
      "functionName": "isConstantName",
      "functionAnnotation": "",
      "functionDoc": "Returns true if a name node represents a constant variable.\n\n\u003cp\u003eDetermining whether a variable is constant has three steps:\n\u003col\u003e\n\u003cli\u003eIn CodingConventionAnnotator, any name that matches the\n    {@link CodingConvention#isConstant(String)} is annotated with an\n    IS_CONSTANT_NAME property.\n\u003cli\u003eThe normalize pass renames any variable with the IS_CONSTANT_NAME\n    annotation and that is initialized to a constant value with\n    a variable name including $$constant.\n\u003cli\u003eReturn true here if the variable includes $$constant in its name.\n\u003c/ol\u003e\n\n@param node A NAME or STRING node\n@return True if the variable is constant\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Returns true if a name node represents a constant variable.\n\n\u003cp\u003eDetermining whether a variable is constant has three steps:\n\u003col\u003e\n\u003cli\u003eIn CodingConventionAnnotator, any name that matches the\n    {@link CodingConvention#isConstant(String)} is annotated with an\n    IS_CONSTANT_NAME property.\n\u003cli\u003eThe normalize pass renames any variable with the IS_CONSTANT_NAME\n    annotation and that is initialized to a constant value with\n    a variable name inlucding $$constant.\n\u003cli\u003eReturn true here if the variable includes $$constant in its name.\n\u003c/ol\u003e\n\n@param node A NAME or STRING node\n@return True if the variable is constant\n",
        "newValue": "Returns true if a name node represents a constant variable.\n\n\u003cp\u003eDetermining whether a variable is constant has three steps:\n\u003col\u003e\n\u003cli\u003eIn CodingConventionAnnotator, any name that matches the\n    {@link CodingConvention#isConstant(String)} is annotated with an\n    IS_CONSTANT_NAME property.\n\u003cli\u003eThe normalize pass renames any variable with the IS_CONSTANT_NAME\n    annotation and that is initialized to a constant value with\n    a variable name including $$constant.\n\u003cli\u003eReturn true here if the variable includes $$constant in its name.\n\u003c/ol\u003e\n\n@param node A NAME or STRING node\n@return True if the variable is constant\n"
      }
    },
    "14ddcfdc0b8d1cece3c79221b1870b84f055d419": {
      "type": "Ybodychange",
      "commitMessage": "Change the internal representation of constant variables.\n\nRun inline-variables before smart-name-removal.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@37 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/17/09, 4:20 PM",
      "commitName": "14ddcfdc0b8d1cece3c79221b1870b84f055d419",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "12/15/09, 1:52 PM",
      "commitNameOld": "a2d8936fae3eb0e3873c7f7c0233344c81436404",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 2.1,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "static boolean isConstantName(Node node) {\n    return node.getBooleanProp(Node.IS_CONSTANT_NAME);\n}",
      "path": "src/com/google/javascript/jscomp/NodeUtil.java",
      "functionStartLine": 1906,
      "functionName": "isConstantName",
      "functionAnnotation": "",
      "functionDoc": "Returns true if a name node represents a constant variable.\n\n\u003cp\u003eDetermining whether a variable is constant has three steps:\n\u003col\u003e\n\u003cli\u003eIn CodingConventionAnnotator, any name that matches the\n    {@link CodingConvention#isConstant(String)} is annotated with an\n    IS_CONSTANT_NAME property.\n\u003cli\u003eThe normalize pass renames any variable with the IS_CONSTANT_NAME\n    annotation and that is initialized to a constant value with\n    a variable name inlucding $$constant.\n\u003cli\u003eReturn true here if the variable includes $$constant in its name.\n\u003c/ol\u003e\n\n@param node A NAME or STRING node\n@return True if the variable is constant\n",
      "diff": "@@ -1,3 +1,3 @@\n static boolean isConstantName(Node node) {\n-    return node.getString().contains(CONSTANT_MARKER);\n+    return node.getBooleanProp(Node.IS_CONSTANT_NAME);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,3 @@\n+static boolean isConstantName(Node node) {\n+    return node.getString().contains(CONSTANT_MARKER);\n+}\n\\ No newline at end of file\n",
      "actualSource": "static boolean isConstantName(Node node) {\n    return node.getString().contains(CONSTANT_MARKER);\n}",
      "path": "src/com/google/javascript/jscomp/NodeUtil.java",
      "functionStartLine": 1907,
      "functionName": "isConstantName",
      "functionAnnotation": "",
      "functionDoc": "Returns true if a name node represents a constant variable.\n\n\u003cp\u003eDetermining whether a variable is constant has three steps:\n\u003col\u003e\n\u003cli\u003eIn CodingConventionAnnotator, any name that matches the\n    {@link CodingConvention#isConstant(String)} is annotated with an\n    IS_CONSTANT_NAME property.\n\u003cli\u003eThe normalize pass renames any variable with the IS_CONSTANT_NAME\n    annotation and that is initialized to a constant value with\n    a variable name inlucding $$constant.\n\u003cli\u003eReturn true here if the variable includes $$constant in its name.\n\u003c/ol\u003e\n\n@param node A NAME or STRING node\n@return True if the variable is constant\n"
    }
  }
}