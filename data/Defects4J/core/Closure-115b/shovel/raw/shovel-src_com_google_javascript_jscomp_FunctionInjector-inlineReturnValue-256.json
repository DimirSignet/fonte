{
  "origin": "codeshovel",
  "repositoryName": "Closure-115b",
  "repositoryPath": "/tmp/Closure-115b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FunctionInjector.java",
  "functionName": "inlineReturnValue",
  "functionId": "inlineReturnValue___callNode-Node__fnNode-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/FunctionInjector.java",
  "functionAnnotation": "",
  "functionDoc": "Inline a function that fulfills the requirements of\ncanInlineReferenceDirectly into the call site, replacing only the CALL\nnode.\n",
  "functionStartLine": 256,
  "functionEndLine": 287,
  "numCommitsSeen": 36,
  "timeTaken": 2028,
  "changeHistory": [
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
    "cc4ec1a70e6fa02bda751582c3902b3c19f85bbb",
    "dd5a73fdb8740d4753a2c08efaa9eb56932943a0",
    "51e81d0fd794bee6d8765513f853a312f176dcd7",
    "6e3eb4f7619179ba6c23db2af7549ef02f588c35",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c": "Ybodychange",
    "cc4ec1a70e6fa02bda751582c3902b3c19f85bbb": "Ybodychange",
    "dd5a73fdb8740d4753a2c08efaa9eb56932943a0": "Ybodychange",
    "51e81d0fd794bee6d8765513f853a312f176dcd7": "Ybodychange",
    "6e3eb4f7619179ba6c23db2af7549ef02f588c35": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c": {
      "type": "Ybodychange",
      "commitMessage": "\nReplace the bulk of the Node.getType() \u003d\u003d Token.XXX calls with\nNode.isXXX calls.\n\nR\u003dnicksantos\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3677\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1582 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/10/11, 8:36 AM",
      "commitName": "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "8/22/11, 5:34 PM",
      "commitNameOld": "de20cf30dfdf0f885c9b97dfb75f8425df0280b9",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 79.67,
      "commitsBetweenForRepo": 187,
      "commitsBetweenForFile": 1,
      "actualSource": "private Node inlineReturnValue(Node callNode, Node fnNode) {\n    Node block \u003d fnNode.getLastChild();\n    Node callParentNode \u003d callNode.getParent();\n    Map\u003cString, Node\u003e argMap \u003d FunctionArgumentInjector.getFunctionCallParameterMap(fnNode, callNode, this.safeNameIdSupplier);\n    Node newExpression;\n    if (!block.hasChildren()) {\n        Node srcLocation \u003d block;\n        newExpression \u003d NodeUtil.newUndefinedNode(srcLocation);\n    } else {\n        Node returnNode \u003d block.getFirstChild();\n        Preconditions.checkArgument(returnNode.isReturn());\n        Node safeReturnNode \u003d returnNode.cloneTree();\n        Node inlineResult \u003d FunctionArgumentInjector.inject(null, safeReturnNode, null, argMap);\n        Preconditions.checkArgument(safeReturnNode \u003d\u003d inlineResult);\n        newExpression \u003d safeReturnNode.removeFirstChild();\n    }\n    callParentNode.replaceChild(callNode, newExpression);\n    return newExpression;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionInjector.java",
      "functionStartLine": 253,
      "functionName": "inlineReturnValue",
      "functionAnnotation": "",
      "functionDoc": "Inline a function that fulfills the requirements of\ncanInlineReferenceDirectly into the call site, replacing only the CALL\nnode.\n",
      "diff": "@@ -1,19 +1,19 @@\n private Node inlineReturnValue(Node callNode, Node fnNode) {\n     Node block \u003d fnNode.getLastChild();\n     Node callParentNode \u003d callNode.getParent();\n     Map\u003cString, Node\u003e argMap \u003d FunctionArgumentInjector.getFunctionCallParameterMap(fnNode, callNode, this.safeNameIdSupplier);\n     Node newExpression;\n     if (!block.hasChildren()) {\n         Node srcLocation \u003d block;\n         newExpression \u003d NodeUtil.newUndefinedNode(srcLocation);\n     } else {\n         Node returnNode \u003d block.getFirstChild();\n-        Preconditions.checkArgument(returnNode.getType() \u003d\u003d Token.RETURN);\n+        Preconditions.checkArgument(returnNode.isReturn());\n         Node safeReturnNode \u003d returnNode.cloneTree();\n         Node inlineResult \u003d FunctionArgumentInjector.inject(null, safeReturnNode, null, argMap);\n         Preconditions.checkArgument(safeReturnNode \u003d\u003d inlineResult);\n         newExpression \u003d safeReturnNode.removeFirstChild();\n     }\n     callParentNode.replaceChild(callNode, newExpression);\n     return newExpression;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "cc4ec1a70e6fa02bda751582c3902b3c19f85bbb": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nFixed invalid \"this\" replacement within inner functions.\n\n*** Original change description ***\n\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nBreaks things\n\n*** Original change description ***\n\nWhen it is possible to make the ES5 Strict mode assumptions about a\nfunction\u0027s \"this\" it is easier to inline a function referencing \"this\".\nAdd \"CompilerOption.assumeStrictThis\" and take advantage of it during\nfunction inlining.\n\nR\u003dmoedinger\nDELTA\u003d263  (223 added, 4 deleted, 36 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2320\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1188 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/16/11, 5:29 PM",
      "commitName": "cc4ec1a70e6fa02bda751582c3902b3c19f85bbb",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "6/7/11, 10:32 AM",
      "commitNameOld": "dd5a73fdb8740d4753a2c08efaa9eb56932943a0",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 9.29,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "actualSource": "private Node inlineReturnValue(Node callNode, Node fnNode) {\n    Node block \u003d fnNode.getLastChild();\n    Node callParentNode \u003d callNode.getParent();\n    Map\u003cString, Node\u003e argMap \u003d FunctionArgumentInjector.getFunctionCallParameterMap(fnNode, callNode, this.safeNameIdSupplier);\n    Node newExpression;\n    if (!block.hasChildren()) {\n        Node srcLocation \u003d block;\n        newExpression \u003d NodeUtil.newUndefinedNode(srcLocation);\n    } else {\n        Node returnNode \u003d block.getFirstChild();\n        Preconditions.checkArgument(returnNode.getType() \u003d\u003d Token.RETURN);\n        Node safeReturnNode \u003d returnNode.cloneTree();\n        Node inlineResult \u003d FunctionArgumentInjector.inject(null, safeReturnNode, null, argMap);\n        Preconditions.checkArgument(safeReturnNode \u003d\u003d inlineResult);\n        newExpression \u003d safeReturnNode.removeFirstChild();\n    }\n    callParentNode.replaceChild(callNode, newExpression);\n    return newExpression;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionInjector.java",
      "functionStartLine": 237,
      "functionName": "inlineReturnValue",
      "functionAnnotation": "",
      "functionDoc": "Inline a function that fulfills the requirements of\ncanInlineReferenceDirectly into the call site, replacing only the CALL\nnode.\n",
      "diff": "@@ -1,19 +1,19 @@\n private Node inlineReturnValue(Node callNode, Node fnNode) {\n     Node block \u003d fnNode.getLastChild();\n     Node callParentNode \u003d callNode.getParent();\n     Map\u003cString, Node\u003e argMap \u003d FunctionArgumentInjector.getFunctionCallParameterMap(fnNode, callNode, this.safeNameIdSupplier);\n     Node newExpression;\n     if (!block.hasChildren()) {\n         Node srcLocation \u003d block;\n         newExpression \u003d NodeUtil.newUndefinedNode(srcLocation);\n     } else {\n         Node returnNode \u003d block.getFirstChild();\n         Preconditions.checkArgument(returnNode.getType() \u003d\u003d Token.RETURN);\n         Node safeReturnNode \u003d returnNode.cloneTree();\n-        Node inlineResult \u003d FunctionArgumentInjector.inject(safeReturnNode, null, argMap);\n+        Node inlineResult \u003d FunctionArgumentInjector.inject(null, safeReturnNode, null, argMap);\n         Preconditions.checkArgument(safeReturnNode \u003d\u003d inlineResult);\n         newExpression \u003d safeReturnNode.removeFirstChild();\n     }\n     callParentNode.replaceChild(callNode, newExpression);\n     return newExpression;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "dd5a73fdb8740d4753a2c08efaa9eb56932943a0": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nBreaks gmail\n\n*** Original change description ***\n\nWhen it is possible to make the ES5 Strict mode assumptions about a\nfunction\u0027s \"this\" it is easier to inline a function referencing \"this\".\nAdd \"CompilerOption.assumeStrictThis\" and take advantage of it during\nfunction inlining.\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2200\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1165 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/7/11, 10:32 AM",
      "commitName": "dd5a73fdb8740d4753a2c08efaa9eb56932943a0",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "6/7/11, 9:49 AM",
      "commitNameOld": "51e81d0fd794bee6d8765513f853a312f176dcd7",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private Node inlineReturnValue(Node callNode, Node fnNode) {\n    Node block \u003d fnNode.getLastChild();\n    Node callParentNode \u003d callNode.getParent();\n    Map\u003cString, Node\u003e argMap \u003d FunctionArgumentInjector.getFunctionCallParameterMap(fnNode, callNode, this.safeNameIdSupplier);\n    Node newExpression;\n    if (!block.hasChildren()) {\n        Node srcLocation \u003d block;\n        newExpression \u003d NodeUtil.newUndefinedNode(srcLocation);\n    } else {\n        Node returnNode \u003d block.getFirstChild();\n        Preconditions.checkArgument(returnNode.getType() \u003d\u003d Token.RETURN);\n        Node safeReturnNode \u003d returnNode.cloneTree();\n        Node inlineResult \u003d FunctionArgumentInjector.inject(safeReturnNode, null, argMap);\n        Preconditions.checkArgument(safeReturnNode \u003d\u003d inlineResult);\n        newExpression \u003d safeReturnNode.removeFirstChild();\n    }\n    callParentNode.replaceChild(callNode, newExpression);\n    return newExpression;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionInjector.java",
      "functionStartLine": 232,
      "functionName": "inlineReturnValue",
      "functionAnnotation": "",
      "functionDoc": "Inline a function that fulfills the requirements of\ncanInlineReferenceDirectly into the call site, replacing only the CALL\nnode.\n",
      "diff": "@@ -1,19 +1,19 @@\n private Node inlineReturnValue(Node callNode, Node fnNode) {\n     Node block \u003d fnNode.getLastChild();\n     Node callParentNode \u003d callNode.getParent();\n     Map\u003cString, Node\u003e argMap \u003d FunctionArgumentInjector.getFunctionCallParameterMap(fnNode, callNode, this.safeNameIdSupplier);\n     Node newExpression;\n     if (!block.hasChildren()) {\n         Node srcLocation \u003d block;\n         newExpression \u003d NodeUtil.newUndefinedNode(srcLocation);\n     } else {\n         Node returnNode \u003d block.getFirstChild();\n         Preconditions.checkArgument(returnNode.getType() \u003d\u003d Token.RETURN);\n         Node safeReturnNode \u003d returnNode.cloneTree();\n-        Node inlineResult \u003d FunctionArgumentInjector.inject(null, safeReturnNode, null, argMap);\n+        Node inlineResult \u003d FunctionArgumentInjector.inject(safeReturnNode, null, argMap);\n         Preconditions.checkArgument(safeReturnNode \u003d\u003d inlineResult);\n         newExpression \u003d safeReturnNode.removeFirstChild();\n     }\n     callParentNode.replaceChild(callNode, newExpression);\n     return newExpression;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "51e81d0fd794bee6d8765513f853a312f176dcd7": {
      "type": "Ybodychange",
      "commitMessage": "\nWhen it is possible to make the ES5 Strict mode assumptions about a\nfunction\u0027s \"this\" it is easier to inline a function referencing \"this\".\nAdd \"CompilerOption.assumeStrictThis\" and take advantage of it during\nfunction inlining.\n\nR\u003dacleung\nDELTA\u003d243  (204 added, 4 deleted, 35 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2199\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1164 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/7/11, 9:49 AM",
      "commitName": "51e81d0fd794bee6d8765513f853a312f176dcd7",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "5/16/11, 3:01 PM",
      "commitNameOld": "828828472848b88b6d3b1e847fa8be5dde78e2da",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 21.78,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "actualSource": "private Node inlineReturnValue(Node callNode, Node fnNode) {\n    Node block \u003d fnNode.getLastChild();\n    Node callParentNode \u003d callNode.getParent();\n    Map\u003cString, Node\u003e argMap \u003d FunctionArgumentInjector.getFunctionCallParameterMap(fnNode, callNode, this.safeNameIdSupplier);\n    Node newExpression;\n    if (!block.hasChildren()) {\n        Node srcLocation \u003d block;\n        newExpression \u003d NodeUtil.newUndefinedNode(srcLocation);\n    } else {\n        Node returnNode \u003d block.getFirstChild();\n        Preconditions.checkArgument(returnNode.getType() \u003d\u003d Token.RETURN);\n        Node safeReturnNode \u003d returnNode.cloneTree();\n        Node inlineResult \u003d FunctionArgumentInjector.inject(null, safeReturnNode, null, argMap);\n        Preconditions.checkArgument(safeReturnNode \u003d\u003d inlineResult);\n        newExpression \u003d safeReturnNode.removeFirstChild();\n    }\n    callParentNode.replaceChild(callNode, newExpression);\n    return newExpression;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionInjector.java",
      "functionStartLine": 237,
      "functionName": "inlineReturnValue",
      "functionAnnotation": "",
      "functionDoc": "Inline a function that fulfills the requirements of\ncanInlineReferenceDirectly into the call site, replacing only the CALL\nnode.\n",
      "diff": "@@ -1,19 +1,19 @@\n private Node inlineReturnValue(Node callNode, Node fnNode) {\n     Node block \u003d fnNode.getLastChild();\n     Node callParentNode \u003d callNode.getParent();\n     Map\u003cString, Node\u003e argMap \u003d FunctionArgumentInjector.getFunctionCallParameterMap(fnNode, callNode, this.safeNameIdSupplier);\n     Node newExpression;\n     if (!block.hasChildren()) {\n         Node srcLocation \u003d block;\n         newExpression \u003d NodeUtil.newUndefinedNode(srcLocation);\n     } else {\n         Node returnNode \u003d block.getFirstChild();\n         Preconditions.checkArgument(returnNode.getType() \u003d\u003d Token.RETURN);\n         Node safeReturnNode \u003d returnNode.cloneTree();\n-        Node inlineResult \u003d FunctionArgumentInjector.inject(safeReturnNode, null, argMap);\n+        Node inlineResult \u003d FunctionArgumentInjector.inject(null, safeReturnNode, null, argMap);\n         Preconditions.checkArgument(safeReturnNode \u003d\u003d inlineResult);\n         newExpression \u003d safeReturnNode.removeFirstChild();\n     }\n     callParentNode.replaceChild(callNode, newExpression);\n     return newExpression;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6e3eb4f7619179ba6c23db2af7549ef02f588c35": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/04/15 by john\n\n        Maintain source information in OverloadedMethodResolution.\n\n        R\u003dandrew\n        DELTA\u003d8  (5 added, 1 deleted, 2 changed)\n\nChange on 2010/04/15 by john\n\n        Maintain source information during function inlining.\n\n        R\u003dalan\n        DELTA\u003d104  (73 added, 2 deleted, 29 changed)\n\nChange on 2010/04/15 by john\n\n        Improve LineNumberCheck error message.\n\n        R\u003dnick\n        DELTA\u003d4  (3 added, 0 deleted, 1 changed)\n\nChange on 2010/04/15 by john\n\n        Maintain source information in smart name removal.\n        Enabled Normalize during tests, simplified VAR handling.\n\n        R\u003dantonio\n        DELTA\u003d71  (12 added, 48 deleted, 11 changed)\n\nChange on 2010/04/15 by john\n\n        Maintain source information in InlineGetters.\n\n        R\u003dalan\n        DELTA\u003d8  (7 added, 0 deleted, 1 changed)\n\nChange on 2010/04/15 by alan\n\n        Stops the post data from printing multiple times.\n\n        R\u003djohn\n        DELTA\u003d4  (1 added, 0 deleted, 3 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dhuwaud\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@188 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/16/10, 10:20 AM",
      "commitName": "6e3eb4f7619179ba6c23db2af7549ef02f588c35",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "3/11/10, 9:31 PM",
      "commitNameOld": "7bfdbd9164601af44d17edd51be829fde2cc51aa",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 35.49,
      "commitsBetweenForRepo": 51,
      "commitsBetweenForFile": 1,
      "actualSource": "private Node inlineReturnValue(Node callNode, Node fnNode) {\n    Node block \u003d fnNode.getLastChild();\n    Node callParentNode \u003d callNode.getParent();\n    Map\u003cString, Node\u003e argMap \u003d FunctionArgumentInjector.getFunctionCallParameterMap(fnNode, callNode, this.safeNameIdSupplier);\n    Node newExpression;\n    if (!block.hasChildren()) {\n        Node srcLocation \u003d block;\n        newExpression \u003d NodeUtil.newUndefinedNode(srcLocation);\n    } else {\n        Node returnNode \u003d block.getFirstChild();\n        Preconditions.checkArgument(returnNode.getType() \u003d\u003d Token.RETURN);\n        Node safeReturnNode \u003d returnNode.cloneTree();\n        Node inlineResult \u003d FunctionArgumentInjector.inject(safeReturnNode, null, argMap);\n        Preconditions.checkArgument(safeReturnNode \u003d\u003d inlineResult);\n        newExpression \u003d safeReturnNode.removeFirstChild();\n    }\n    callParentNode.replaceChild(callNode, newExpression);\n    return newExpression;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionInjector.java",
      "functionStartLine": 216,
      "functionName": "inlineReturnValue",
      "functionAnnotation": "",
      "functionDoc": "Inline a function that fulfills the requirements of\ncanInlineReferenceDirectly into the call site, replacing only the CALL\nnode.\n",
      "diff": "@@ -1,18 +1,19 @@\n private Node inlineReturnValue(Node callNode, Node fnNode) {\n     Node block \u003d fnNode.getLastChild();\n     Node callParentNode \u003d callNode.getParent();\n     Map\u003cString, Node\u003e argMap \u003d FunctionArgumentInjector.getFunctionCallParameterMap(fnNode, callNode, this.safeNameIdSupplier);\n     Node newExpression;\n     if (!block.hasChildren()) {\n-        newExpression \u003d NodeUtil.newUndefinedNode();\n+        Node srcLocation \u003d block;\n+        newExpression \u003d NodeUtil.newUndefinedNode(srcLocation);\n     } else {\n         Node returnNode \u003d block.getFirstChild();\n         Preconditions.checkArgument(returnNode.getType() \u003d\u003d Token.RETURN);\n         Node safeReturnNode \u003d returnNode.cloneTree();\n         Node inlineResult \u003d FunctionArgumentInjector.inject(safeReturnNode, null, argMap);\n         Preconditions.checkArgument(safeReturnNode \u003d\u003d inlineResult);\n         newExpression \u003d safeReturnNode.removeFirstChild();\n     }\n     callParentNode.replaceChild(callNode, newExpression);\n     return newExpression;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,18 @@\n+private Node inlineReturnValue(Node callNode, Node fnNode) {\n+    Node block \u003d fnNode.getLastChild();\n+    Node callParentNode \u003d callNode.getParent();\n+    Map\u003cString, Node\u003e argMap \u003d FunctionArgumentInjector.getFunctionCallParameterMap(fnNode, callNode, this.safeNameIdSupplier);\n+    Node newExpression;\n+    if (!block.hasChildren()) {\n+        newExpression \u003d NodeUtil.newUndefinedNode();\n+    } else {\n+        Node returnNode \u003d block.getFirstChild();\n+        Preconditions.checkArgument(returnNode.getType() \u003d\u003d Token.RETURN);\n+        Node safeReturnNode \u003d returnNode.cloneTree();\n+        Node inlineResult \u003d FunctionArgumentInjector.inject(safeReturnNode, null, argMap);\n+        Preconditions.checkArgument(safeReturnNode \u003d\u003d inlineResult);\n+        newExpression \u003d safeReturnNode.removeFirstChild();\n+    }\n+    callParentNode.replaceChild(callNode, newExpression);\n+    return newExpression;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private Node inlineReturnValue(Node callNode, Node fnNode) {\n    Node block \u003d fnNode.getLastChild();\n    Node callParentNode \u003d callNode.getParent();\n    Map\u003cString, Node\u003e argMap \u003d FunctionArgumentInjector.getFunctionCallParameterMap(fnNode, callNode, this.safeNameIdSupplier);\n    Node newExpression;\n    if (!block.hasChildren()) {\n        newExpression \u003d NodeUtil.newUndefinedNode();\n    } else {\n        Node returnNode \u003d block.getFirstChild();\n        Preconditions.checkArgument(returnNode.getType() \u003d\u003d Token.RETURN);\n        Node safeReturnNode \u003d returnNode.cloneTree();\n        Node inlineResult \u003d FunctionArgumentInjector.inject(safeReturnNode, null, argMap);\n        Preconditions.checkArgument(safeReturnNode \u003d\u003d inlineResult);\n        newExpression \u003d safeReturnNode.removeFirstChild();\n    }\n    callParentNode.replaceChild(callNode, newExpression);\n    return newExpression;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionInjector.java",
      "functionStartLine": 216,
      "functionName": "inlineReturnValue",
      "functionAnnotation": "",
      "functionDoc": "Inline a function that fulfills the requirements of\ncanInlineReferenceDirectly into the call site, replacing only the CALL\nnode.\n"
    }
  }
}