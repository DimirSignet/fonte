{
  "origin": "codeshovel",
  "repositoryName": "Closure-115b",
  "repositoryPath": "/tmp/Closure-115b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "InlineFunctions.java",
  "functionName": "checkNameUsage",
  "functionId": "$checkNameUsage___n-Node__parent-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/InlineFunctions.java",
  "functionAnnotation": "",
  "functionDoc": "Find functions that can be inlined.\n",
  "functionStartLine": 547,
  "functionEndLine": 586,
  "numCommitsSeen": 81,
  "timeTaken": 2643,
  "changeHistory": [
    "9bf6d8db973a4691ad1551bdcbc559a86ba60532",
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
    "a4f32ed8acef2880288fe9559f8c60fba444bbe3",
    "31baadd1293c5ae7af05b3a06a1ba3a06403e4ed",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "9bf6d8db973a4691ad1551bdcbc559a86ba60532": "Yparameterchange",
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c": "Ybodychange",
    "a4f32ed8acef2880288fe9559f8c60fba444bbe3": "Ybodychange",
    "31baadd1293c5ae7af05b3a06a1ba3a06403e4ed": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9bf6d8db973a4691ad1551bdcbc559a86ba60532": {
      "type": "Yparameterchange",
      "commitMessage": "\nMore unused locals and parameter removal and unused parameter warning suppression.\n\nR\u003ddimvar\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d6122\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2457 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/10/13, 4:31 PM",
      "commitName": "9bf6d8db973a4691ad1551bdcbc559a86ba60532",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "1/9/13, 4:16 PM",
      "commitNameOld": "71177c420b28a12c4eba72093e3115c516667010",
      "commitAuthorOld": "blickly@google.com",
      "daysBetweenCommits": 1.01,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "private void checkNameUsage(Node n, Node parent) {\n    Preconditions.checkState(n.isName());\n    if (isCandidateUsage(n)) {\n        return;\n    }\n    String name \u003d n.getString();\n    FunctionState fs \u003d fns.get(name);\n    if (fs \u003d\u003d null) {\n        return;\n    }\n    if (parent.isNew()) {\n        Node target \u003d parent.getFirstChild();\n        if (target.isName() \u0026\u0026 target.getString().equals(ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING)) {\n            fs.setInline(false);\n        }\n    }\n    if (parent.isAssign() \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n        fs.setInline(false);\n    } else {\n        fs.setRemove(false);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/InlineFunctions.java",
      "functionStartLine": 549,
      "functionName": "checkNameUsage",
      "functionAnnotation": "",
      "functionDoc": "Find functions that can be inlined.\n",
      "diff": "@@ -1,22 +1,22 @@\n-private void checkNameUsage(NodeTraversal t, Node n, Node parent) {\n+private void checkNameUsage(Node n, Node parent) {\n     Preconditions.checkState(n.isName());\n     if (isCandidateUsage(n)) {\n         return;\n     }\n     String name \u003d n.getString();\n     FunctionState fs \u003d fns.get(name);\n     if (fs \u003d\u003d null) {\n         return;\n     }\n     if (parent.isNew()) {\n         Node target \u003d parent.getFirstChild();\n         if (target.isName() \u0026\u0026 target.getString().equals(ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING)) {\n             fs.setInline(false);\n         }\n     }\n     if (parent.isAssign() \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n         fs.setInline(false);\n     } else {\n         fs.setRemove(false);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[t-NodeTraversal, n-Node, parent-Node]",
        "newValue": "[n-Node, parent-Node]"
      }
    },
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c": {
      "type": "Ybodychange",
      "commitMessage": "\nReplace the bulk of the Node.getType() \u003d\u003d Token.XXX calls with\nNode.isXXX calls.\n\nR\u003dnicksantos\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3677\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1582 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/10/11, 8:36 AM",
      "commitName": "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "8/22/11, 5:34 PM",
      "commitNameOld": "de20cf30dfdf0f885c9b97dfb75f8425df0280b9",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 79.67,
      "commitsBetweenForRepo": 187,
      "commitsBetweenForFile": 1,
      "actualSource": "private void checkNameUsage(NodeTraversal t, Node n, Node parent) {\n    Preconditions.checkState(n.isName());\n    if (isCandidateUsage(n)) {\n        return;\n    }\n    String name \u003d n.getString();\n    FunctionState fs \u003d fns.get(name);\n    if (fs \u003d\u003d null) {\n        return;\n    }\n    if (parent.isNew()) {\n        Node target \u003d parent.getFirstChild();\n        if (target.isName() \u0026\u0026 target.getString().equals(ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING)) {\n            fs.setInline(false);\n        }\n    }\n    if (parent.isAssign() \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n        fs.setInline(false);\n    } else {\n        fs.setRemove(false);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/InlineFunctions.java",
      "functionStartLine": 549,
      "functionName": "checkNameUsage",
      "functionAnnotation": "",
      "functionDoc": "Find functions that can be inlined.\n",
      "diff": "@@ -1,22 +1,22 @@\n private void checkNameUsage(NodeTraversal t, Node n, Node parent) {\n-    Preconditions.checkState(n.getType() \u003d\u003d Token.NAME);\n+    Preconditions.checkState(n.isName());\n     if (isCandidateUsage(n)) {\n         return;\n     }\n     String name \u003d n.getString();\n     FunctionState fs \u003d fns.get(name);\n     if (fs \u003d\u003d null) {\n         return;\n     }\n-    if (parent.getType() \u003d\u003d Token.NEW) {\n+    if (parent.isNew()) {\n         Node target \u003d parent.getFirstChild();\n-        if (target.getType() \u003d\u003d Token.NAME \u0026\u0026 target.getString().equals(ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING)) {\n+        if (target.isName() \u0026\u0026 target.getString().equals(ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING)) {\n             fs.setInline(false);\n         }\n     }\n-    if (parent.getType() \u003d\u003d Token.ASSIGN \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n+    if (parent.isAssign() \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n         fs.setInline(false);\n     } else {\n         fs.setRemove(false);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a4f32ed8acef2880288fe9559f8c60fba444bbe3": {
      "type": "Ybodychange",
      "commitMessage": "\nFix mismatch between the definition of candidate references used when\ninitially gathering references and when checking for inlining conflicts.\nFixes issue 423\n\nR\u003dnicksantos\nDELTA\u003d100  (66 added, 29 deleted, 5 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1486\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1011 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/14/11, 10:48 AM",
      "commitName": "a4f32ed8acef2880288fe9559f8c60fba444bbe3",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "4/12/11, 12:15 PM",
      "commitNameOld": "f322be0e576d5e2114cb59c0a6537197997b9c59",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 1.94,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "private void checkNameUsage(NodeTraversal t, Node n, Node parent) {\n    Preconditions.checkState(n.getType() \u003d\u003d Token.NAME);\n    if (isCandidateUsage(n)) {\n        return;\n    }\n    String name \u003d n.getString();\n    FunctionState fs \u003d fns.get(name);\n    if (fs \u003d\u003d null) {\n        return;\n    }\n    if (parent.getType() \u003d\u003d Token.NEW) {\n        Node target \u003d parent.getFirstChild();\n        if (target.getType() \u003d\u003d Token.NAME \u0026\u0026 target.getString().equals(ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING)) {\n            fs.setInline(false);\n        }\n    }\n    if (parent.getType() \u003d\u003d Token.ASSIGN \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n        fs.setInline(false);\n    } else {\n        fs.setRemove(false);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/InlineFunctions.java",
      "functionStartLine": 539,
      "functionName": "checkNameUsage",
      "functionAnnotation": "",
      "functionDoc": "Find functions that can be inlined.\n",
      "diff": "@@ -1,31 +1,22 @@\n private void checkNameUsage(NodeTraversal t, Node n, Node parent) {\n     Preconditions.checkState(n.getType() \u003d\u003d Token.NAME);\n-    if (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.FUNCTION) {\n+    if (isCandidateUsage(n)) {\n         return;\n     }\n-    if (parent.getType() \u003d\u003d Token.CALL \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n-        return;\n-    }\n-    if (NodeUtil.isGet(parent) \u0026\u0026 n \u003d\u003d parent.getFirstChild() \u0026\u0026 n.getNext().getType() \u003d\u003d Token.STRING \u0026\u0026 n.getNext().getString().equals(\"call\")) {\n-        Node gramps \u003d n.getAncestor(2);\n-        if (gramps.getType() \u003d\u003d Token.CALL \u0026\u0026 gramps.getFirstChild() \u003d\u003d parent) {\n-            return;\n-        }\n-    }\n     String name \u003d n.getString();\n     FunctionState fs \u003d fns.get(name);\n     if (fs \u003d\u003d null) {\n         return;\n     }\n     if (parent.getType() \u003d\u003d Token.NEW) {\n         Node target \u003d parent.getFirstChild();\n         if (target.getType() \u003d\u003d Token.NAME \u0026\u0026 target.getString().equals(ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING)) {\n             fs.setInline(false);\n         }\n     }\n     if (parent.getType() \u003d\u003d Token.ASSIGN \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n         fs.setInline(false);\n     } else {\n         fs.setRemove(false);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "31baadd1293c5ae7af05b3a06a1ba3a06403e4ed": {
      "type": "Ybodychange",
      "commitMessage": "\nUnlike a normal call, a reference passed to JSCompiler_ObjectPropertyString must be considered a possible modification to the name itself, not a possible modification to an alias.\n\nThis fix unblocks the optimize parameters improvement.\n\nR\u003dnicksantos\nDELTA\u003d27  (27 added, 0 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1245\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@962 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/4/11, 8:49 AM",
      "commitName": "31baadd1293c5ae7af05b3a06a1ba3a06403e4ed",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "12/16/10, 1:20 PM",
      "commitNameOld": "8936be78f9ecad965b20fbf9ea78eda49514454e",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 108.77,
      "commitsBetweenForRepo": 300,
      "commitsBetweenForFile": 1,
      "actualSource": "private void checkNameUsage(NodeTraversal t, Node n, Node parent) {\n    Preconditions.checkState(n.getType() \u003d\u003d Token.NAME);\n    if (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.FUNCTION) {\n        return;\n    }\n    if (parent.getType() \u003d\u003d Token.CALL \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n        return;\n    }\n    if (NodeUtil.isGet(parent) \u0026\u0026 n \u003d\u003d parent.getFirstChild() \u0026\u0026 n.getNext().getType() \u003d\u003d Token.STRING \u0026\u0026 n.getNext().getString().equals(\"call\")) {\n        Node gramps \u003d n.getAncestor(2);\n        if (gramps.getType() \u003d\u003d Token.CALL \u0026\u0026 gramps.getFirstChild() \u003d\u003d parent) {\n            return;\n        }\n    }\n    String name \u003d n.getString();\n    FunctionState fs \u003d fns.get(name);\n    if (fs \u003d\u003d null) {\n        return;\n    }\n    if (parent.getType() \u003d\u003d Token.NEW) {\n        Node target \u003d parent.getFirstChild();\n        if (target.getType() \u003d\u003d Token.NAME \u0026\u0026 target.getString().equals(ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING)) {\n            fs.setInline(false);\n        }\n    }\n    if (parent.getType() \u003d\u003d Token.ASSIGN \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n        fs.setInline(false);\n    } else {\n        fs.setRemove(false);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/InlineFunctions.java",
      "functionStartLine": 500,
      "functionName": "checkNameUsage",
      "functionAnnotation": "",
      "functionDoc": "Find functions that can be inlined.\n",
      "diff": "@@ -1,25 +1,31 @@\n private void checkNameUsage(NodeTraversal t, Node n, Node parent) {\n     Preconditions.checkState(n.getType() \u003d\u003d Token.NAME);\n     if (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.FUNCTION) {\n         return;\n     }\n     if (parent.getType() \u003d\u003d Token.CALL \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n         return;\n     }\n     if (NodeUtil.isGet(parent) \u0026\u0026 n \u003d\u003d parent.getFirstChild() \u0026\u0026 n.getNext().getType() \u003d\u003d Token.STRING \u0026\u0026 n.getNext().getString().equals(\"call\")) {\n         Node gramps \u003d n.getAncestor(2);\n         if (gramps.getType() \u003d\u003d Token.CALL \u0026\u0026 gramps.getFirstChild() \u003d\u003d parent) {\n             return;\n         }\n     }\n     String name \u003d n.getString();\n     FunctionState fs \u003d fns.get(name);\n     if (fs \u003d\u003d null) {\n         return;\n     }\n+    if (parent.getType() \u003d\u003d Token.NEW) {\n+        Node target \u003d parent.getFirstChild();\n+        if (target.getType() \u003d\u003d Token.NAME \u0026\u0026 target.getString().equals(ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING)) {\n+            fs.setInline(false);\n+        }\n+    }\n     if (parent.getType() \u003d\u003d Token.ASSIGN \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n         fs.setInline(false);\n     } else {\n         fs.setRemove(false);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,25 @@\n+private void checkNameUsage(NodeTraversal t, Node n, Node parent) {\n+    Preconditions.checkState(n.getType() \u003d\u003d Token.NAME);\n+    if (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.FUNCTION) {\n+        return;\n+    }\n+    if (parent.getType() \u003d\u003d Token.CALL \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n+        return;\n+    }\n+    if (NodeUtil.isGet(parent) \u0026\u0026 n \u003d\u003d parent.getFirstChild() \u0026\u0026 n.getNext().getType() \u003d\u003d Token.STRING \u0026\u0026 n.getNext().getString().equals(\"call\")) {\n+        Node gramps \u003d n.getAncestor(2);\n+        if (gramps.getType() \u003d\u003d Token.CALL \u0026\u0026 gramps.getFirstChild() \u003d\u003d parent) {\n+            return;\n+        }\n+    }\n+    String name \u003d n.getString();\n+    FunctionState fs \u003d fns.get(name);\n+    if (fs \u003d\u003d null) {\n+        return;\n+    }\n+    if (parent.getType() \u003d\u003d Token.ASSIGN \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n+        fs.setInline(false);\n+    } else {\n+        fs.setRemove(false);\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void checkNameUsage(NodeTraversal t, Node n, Node parent) {\n    Preconditions.checkState(n.getType() \u003d\u003d Token.NAME);\n    if (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.FUNCTION) {\n        return;\n    }\n    if (parent.getType() \u003d\u003d Token.CALL \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n        return;\n    }\n    if (NodeUtil.isGet(parent) \u0026\u0026 n \u003d\u003d parent.getFirstChild() \u0026\u0026 n.getNext().getType() \u003d\u003d Token.STRING \u0026\u0026 n.getNext().getString().equals(\"call\")) {\n        Node gramps \u003d n.getAncestor(2);\n        if (gramps.getType() \u003d\u003d Token.CALL \u0026\u0026 gramps.getFirstChild() \u003d\u003d parent) {\n            return;\n        }\n    }\n    String name \u003d n.getString();\n    FunctionState fs \u003d fns.get(name);\n    if (fs \u003d\u003d null) {\n        return;\n    }\n    if (parent.getType() \u003d\u003d Token.ASSIGN \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n        fs.setInline(false);\n    } else {\n        fs.setRemove(false);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/InlineFunctions.java",
      "functionStartLine": 430,
      "functionName": "checkNameUsage",
      "functionAnnotation": "",
      "functionDoc": "Find functions that can be inlined.\n"
    }
  }
}