{
  "origin": "codeshovel",
  "repositoryName": "Closure-115b",
  "repositoryPath": "/tmp/Closure-115b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SyntacticScopeCreator.java",
  "functionName": "scanRoot",
  "functionId": "scanRoot___n-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 72,
  "functionEndLine": 107,
  "numCommitsSeen": 55,
  "timeTaken": 2030,
  "changeHistory": [
    "f0ff2971eca336e950929b3ee0d80155338bb1dd",
    "5524adbda991632656059566b69cc2771ba42b7d",
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
    "a6a7e4007c2b411ff182bcc931470a95a19430e3",
    "1b8156d41fe441ab03999f1e2c5ac4537e79fc75",
    "9320feca198878ca9464aae089399a8891c314d7",
    "86caf52b53f53d8b83e9c1092f4b15ddeb6ca5bb",
    "ebb59a97610015bc41bda7f458dd1428a3a3e335",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "f0ff2971eca336e950929b3ee0d80155338bb1dd": "Ymultichange(Yparameterchange,Ybodychange)",
    "5524adbda991632656059566b69cc2771ba42b7d": "Ybodychange",
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c": "Ybodychange",
    "a6a7e4007c2b411ff182bcc931470a95a19430e3": "Ybodychange",
    "1b8156d41fe441ab03999f1e2c5ac4537e79fc75": "Ybodychange",
    "9320feca198878ca9464aae089399a8891c314d7": "Ybodychange",
    "86caf52b53f53d8b83e9c1092f4b15ddeb6ca5bb": "Ybodychange",
    "ebb59a97610015bc41bda7f458dd1428a3a3e335": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f0ff2971eca336e950929b3ee0d80155338bb1dd": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "\nCruft removal: remove some unused locals and parameters.\n\nR\u003ddimvar\nDELTA\u003d336 (6 added, 108 deleted, 222 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d6092\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2447 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/8/13, 12:15 PM",
      "commitName": "f0ff2971eca336e950929b3ee0d80155338bb1dd",
      "commitAuthor": "johnlenz@google.com",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "\nCruft removal: remove some unused locals and parameters.\n\nR\u003ddimvar\nDELTA\u003d336 (6 added, 108 deleted, 222 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d6092\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2447 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/8/13, 12:15 PM",
          "commitName": "f0ff2971eca336e950929b3ee0d80155338bb1dd",
          "commitAuthor": "johnlenz@google.com",
          "commitDateOld": "10/4/12, 11:18 AM",
          "commitNameOld": "a7f99cbb3ba646de8e19f0248099dad9cf0432a6",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 96.08,
          "commitsBetweenForRepo": 190,
          "commitsBetweenForFile": 1,
          "actualSource": "private void scanRoot(Node n) {\n    if (n.isFunction()) {\n        if (inputId \u003d\u003d null) {\n            inputId \u003d NodeUtil.getInputId(n);\n        }\n        final Node fnNameNode \u003d n.getFirstChild();\n        final Node args \u003d fnNameNode.getNext();\n        final Node body \u003d args.getNext();\n        String fnName \u003d fnNameNode.getString();\n        if (!fnName.isEmpty() \u0026\u0026 NodeUtil.isFunctionExpression(n)) {\n            declareVar(fnNameNode);\n        }\n        Preconditions.checkState(args.isParamList());\n        for (Node a \u003d args.getFirstChild(); a !\u003d null; a \u003d a.getNext()) {\n            Preconditions.checkState(a.isName());\n            declareVar(a);\n        }\n        scanVars(body);\n    } else {\n        Preconditions.checkState(scope.getParent() \u003d\u003d null);\n        scanVars(n);\n    }\n}",
          "path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
          "functionStartLine": 84,
          "functionName": "scanRoot",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,23 +1,23 @@\n-private void scanRoot(Node n, Scope parent) {\n+private void scanRoot(Node n) {\n     if (n.isFunction()) {\n         if (inputId \u003d\u003d null) {\n             inputId \u003d NodeUtil.getInputId(n);\n         }\n         final Node fnNameNode \u003d n.getFirstChild();\n         final Node args \u003d fnNameNode.getNext();\n         final Node body \u003d args.getNext();\n         String fnName \u003d fnNameNode.getString();\n         if (!fnName.isEmpty() \u0026\u0026 NodeUtil.isFunctionExpression(n)) {\n             declareVar(fnNameNode);\n         }\n         Preconditions.checkState(args.isParamList());\n         for (Node a \u003d args.getFirstChild(); a !\u003d null; a \u003d a.getNext()) {\n             Preconditions.checkState(a.isName());\n             declareVar(a);\n         }\n-        scanVars(body, n);\n+        scanVars(body);\n     } else {\n         Preconditions.checkState(scope.getParent() \u003d\u003d null);\n-        scanVars(n, null);\n+        scanVars(n);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[n-Node, parent-Scope]",
            "newValue": "[n-Node]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nCruft removal: remove some unused locals and parameters.\n\nR\u003ddimvar\nDELTA\u003d336 (6 added, 108 deleted, 222 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d6092\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2447 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/8/13, 12:15 PM",
          "commitName": "f0ff2971eca336e950929b3ee0d80155338bb1dd",
          "commitAuthor": "johnlenz@google.com",
          "commitDateOld": "10/4/12, 11:18 AM",
          "commitNameOld": "a7f99cbb3ba646de8e19f0248099dad9cf0432a6",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 96.08,
          "commitsBetweenForRepo": 190,
          "commitsBetweenForFile": 1,
          "actualSource": "private void scanRoot(Node n) {\n    if (n.isFunction()) {\n        if (inputId \u003d\u003d null) {\n            inputId \u003d NodeUtil.getInputId(n);\n        }\n        final Node fnNameNode \u003d n.getFirstChild();\n        final Node args \u003d fnNameNode.getNext();\n        final Node body \u003d args.getNext();\n        String fnName \u003d fnNameNode.getString();\n        if (!fnName.isEmpty() \u0026\u0026 NodeUtil.isFunctionExpression(n)) {\n            declareVar(fnNameNode);\n        }\n        Preconditions.checkState(args.isParamList());\n        for (Node a \u003d args.getFirstChild(); a !\u003d null; a \u003d a.getNext()) {\n            Preconditions.checkState(a.isName());\n            declareVar(a);\n        }\n        scanVars(body);\n    } else {\n        Preconditions.checkState(scope.getParent() \u003d\u003d null);\n        scanVars(n);\n    }\n}",
          "path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
          "functionStartLine": 84,
          "functionName": "scanRoot",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,23 +1,23 @@\n-private void scanRoot(Node n, Scope parent) {\n+private void scanRoot(Node n) {\n     if (n.isFunction()) {\n         if (inputId \u003d\u003d null) {\n             inputId \u003d NodeUtil.getInputId(n);\n         }\n         final Node fnNameNode \u003d n.getFirstChild();\n         final Node args \u003d fnNameNode.getNext();\n         final Node body \u003d args.getNext();\n         String fnName \u003d fnNameNode.getString();\n         if (!fnName.isEmpty() \u0026\u0026 NodeUtil.isFunctionExpression(n)) {\n             declareVar(fnNameNode);\n         }\n         Preconditions.checkState(args.isParamList());\n         for (Node a \u003d args.getFirstChild(); a !\u003d null; a \u003d a.getNext()) {\n             Preconditions.checkState(a.isName());\n             declareVar(a);\n         }\n-        scanVars(body, n);\n+        scanVars(body);\n     } else {\n         Preconditions.checkState(scope.getParent() \u003d\u003d null);\n-        scanVars(n, null);\n+        scanVars(n);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "5524adbda991632656059566b69cc2771ba42b7d": {
      "type": "Ybodychange",
      "commitMessage": "\nRename a couple of AST nodes:\nDEFAULT becomes DEFAULT_CASE\nLP becomes PARAM_LIST\nGET becomes GETTER_DEF\nSET becomes SETTER_DEF\n\nR\u003dnicksantos\nDELTA\u003d215  (40 added, 5 deleted, 170 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3695\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1590 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/11/11, 4:42 PM",
      "commitName": "5524adbda991632656059566b69cc2771ba42b7d",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/10/11, 8:36 AM",
      "commitNameOld": "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 1.34,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "private void scanRoot(Node n, Scope parent) {\n    if (n.isFunction()) {\n        if (inputId \u003d\u003d null) {\n            inputId \u003d NodeUtil.getInputId(n);\n        }\n        final Node fnNameNode \u003d n.getFirstChild();\n        final Node args \u003d fnNameNode.getNext();\n        final Node body \u003d args.getNext();\n        String fnName \u003d fnNameNode.getString();\n        if (!fnName.isEmpty() \u0026\u0026 NodeUtil.isFunctionExpression(n)) {\n            declareVar(fnNameNode);\n        }\n        Preconditions.checkState(args.isParamList());\n        for (Node a \u003d args.getFirstChild(); a !\u003d null; a \u003d a.getNext()) {\n            Preconditions.checkState(a.isName());\n            declareVar(a);\n        }\n        scanVars(body, n);\n    } else {\n        Preconditions.checkState(scope.getParent() \u003d\u003d null);\n        scanVars(n, null);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
      "functionStartLine": 84,
      "functionName": "scanRoot",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,23 +1,23 @@\n private void scanRoot(Node n, Scope parent) {\n     if (n.isFunction()) {\n         if (inputId \u003d\u003d null) {\n             inputId \u003d NodeUtil.getInputId(n);\n         }\n         final Node fnNameNode \u003d n.getFirstChild();\n         final Node args \u003d fnNameNode.getNext();\n         final Node body \u003d args.getNext();\n         String fnName \u003d fnNameNode.getString();\n         if (!fnName.isEmpty() \u0026\u0026 NodeUtil.isFunctionExpression(n)) {\n             declareVar(fnNameNode);\n         }\n-        Preconditions.checkState(args.isLP());\n+        Preconditions.checkState(args.isParamList());\n         for (Node a \u003d args.getFirstChild(); a !\u003d null; a \u003d a.getNext()) {\n             Preconditions.checkState(a.isName());\n             declareVar(a);\n         }\n         scanVars(body, n);\n     } else {\n         Preconditions.checkState(scope.getParent() \u003d\u003d null);\n         scanVars(n, null);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c": {
      "type": "Ybodychange",
      "commitMessage": "\nReplace the bulk of the Node.getType() \u003d\u003d Token.XXX calls with\nNode.isXXX calls.\n\nR\u003dnicksantos\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3677\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1582 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/10/11, 8:36 AM",
      "commitName": "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "8/4/11, 1:52 PM",
      "commitNameOld": "a6a7e4007c2b411ff182bcc931470a95a19430e3",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 97.82,
      "commitsBetweenForRepo": 228,
      "commitsBetweenForFile": 1,
      "actualSource": "private void scanRoot(Node n, Scope parent) {\n    if (n.isFunction()) {\n        if (inputId \u003d\u003d null) {\n            inputId \u003d NodeUtil.getInputId(n);\n        }\n        final Node fnNameNode \u003d n.getFirstChild();\n        final Node args \u003d fnNameNode.getNext();\n        final Node body \u003d args.getNext();\n        String fnName \u003d fnNameNode.getString();\n        if (!fnName.isEmpty() \u0026\u0026 NodeUtil.isFunctionExpression(n)) {\n            declareVar(fnNameNode);\n        }\n        Preconditions.checkState(args.isLP());\n        for (Node a \u003d args.getFirstChild(); a !\u003d null; a \u003d a.getNext()) {\n            Preconditions.checkState(a.isName());\n            declareVar(a);\n        }\n        scanVars(body, n);\n    } else {\n        Preconditions.checkState(scope.getParent() \u003d\u003d null);\n        scanVars(n, null);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
      "functionStartLine": 84,
      "functionName": "scanRoot",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,23 +1,23 @@\n private void scanRoot(Node n, Scope parent) {\n-    if (n.getType() \u003d\u003d Token.FUNCTION) {\n+    if (n.isFunction()) {\n         if (inputId \u003d\u003d null) {\n             inputId \u003d NodeUtil.getInputId(n);\n         }\n         final Node fnNameNode \u003d n.getFirstChild();\n         final Node args \u003d fnNameNode.getNext();\n         final Node body \u003d args.getNext();\n         String fnName \u003d fnNameNode.getString();\n         if (!fnName.isEmpty() \u0026\u0026 NodeUtil.isFunctionExpression(n)) {\n             declareVar(fnNameNode);\n         }\n-        Preconditions.checkState(args.getType() \u003d\u003d Token.LP);\n+        Preconditions.checkState(args.isLP());\n         for (Node a \u003d args.getFirstChild(); a !\u003d null; a \u003d a.getNext()) {\n-            Preconditions.checkState(a.getType() \u003d\u003d Token.NAME);\n+            Preconditions.checkState(a.isName());\n             declareVar(a);\n         }\n         scanVars(body, n);\n     } else {\n         Preconditions.checkState(scope.getParent() \u003d\u003d null);\n         scanVars(n, null);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a6a7e4007c2b411ff182bcc931470a95a19430e3": {
      "type": "Ybodychange",
      "commitMessage": "\nWorkaround for StripCode breakage\n\nR\u003dnicksantos\nDELTA\u003d3  (2 added, 0 deleted, 1 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2915\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1331 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/4/11, 1:52 PM",
      "commitName": "a6a7e4007c2b411ff182bcc931470a95a19430e3",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "8/4/11, 11:43 AM",
      "commitNameOld": "1b8156d41fe441ab03999f1e2c5ac4537e79fc75",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 0.09,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void scanRoot(Node n, Scope parent) {\n    if (n.getType() \u003d\u003d Token.FUNCTION) {\n        if (inputId \u003d\u003d null) {\n            inputId \u003d NodeUtil.getInputId(n);\n        }\n        final Node fnNameNode \u003d n.getFirstChild();\n        final Node args \u003d fnNameNode.getNext();\n        final Node body \u003d args.getNext();\n        String fnName \u003d fnNameNode.getString();\n        if (!fnName.isEmpty() \u0026\u0026 NodeUtil.isFunctionExpression(n)) {\n            declareVar(fnNameNode);\n        }\n        Preconditions.checkState(args.getType() \u003d\u003d Token.LP);\n        for (Node a \u003d args.getFirstChild(); a !\u003d null; a \u003d a.getNext()) {\n            Preconditions.checkState(a.getType() \u003d\u003d Token.NAME);\n            declareVar(a);\n        }\n        scanVars(body, n);\n    } else {\n        Preconditions.checkState(scope.getParent() \u003d\u003d null);\n        scanVars(n, null);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
      "functionStartLine": 84,
      "functionName": "scanRoot",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,24 +1,23 @@\n private void scanRoot(Node n, Scope parent) {\n     if (n.getType() \u003d\u003d Token.FUNCTION) {\n         if (inputId \u003d\u003d null) {\n             inputId \u003d NodeUtil.getInputId(n);\n-            Preconditions.checkNotNull(inputId);\n         }\n         final Node fnNameNode \u003d n.getFirstChild();\n         final Node args \u003d fnNameNode.getNext();\n         final Node body \u003d args.getNext();\n         String fnName \u003d fnNameNode.getString();\n         if (!fnName.isEmpty() \u0026\u0026 NodeUtil.isFunctionExpression(n)) {\n             declareVar(fnNameNode);\n         }\n         Preconditions.checkState(args.getType() \u003d\u003d Token.LP);\n         for (Node a \u003d args.getFirstChild(); a !\u003d null; a \u003d a.getNext()) {\n             Preconditions.checkState(a.getType() \u003d\u003d Token.NAME);\n             declareVar(a);\n         }\n         scanVars(body, n);\n     } else {\n         Preconditions.checkState(scope.getParent() \u003d\u003d null);\n         scanVars(n, null);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1b8156d41fe441ab03999f1e2c5ac4537e79fc75": {
      "type": "Ybodychange",
      "commitMessage": "\nPart 4, source name/input id split: Require an InputId to lookup a CompilerInput.\n\nR\u003dnicksantos\nDELTA\u003d266  (106 added, 20 deleted, 140 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2899\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1328 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/4/11, 11:43 AM",
      "commitName": "1b8156d41fe441ab03999f1e2c5ac4537e79fc75",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "7/28/11, 4:19 PM",
      "commitNameOld": "76abdf11394c0e7515ae63335676ea3657badb45",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 6.81,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "actualSource": "private void scanRoot(Node n, Scope parent) {\n    if (n.getType() \u003d\u003d Token.FUNCTION) {\n        if (inputId \u003d\u003d null) {\n            inputId \u003d NodeUtil.getInputId(n);\n            Preconditions.checkNotNull(inputId);\n        }\n        final Node fnNameNode \u003d n.getFirstChild();\n        final Node args \u003d fnNameNode.getNext();\n        final Node body \u003d args.getNext();\n        String fnName \u003d fnNameNode.getString();\n        if (!fnName.isEmpty() \u0026\u0026 NodeUtil.isFunctionExpression(n)) {\n            declareVar(fnNameNode);\n        }\n        Preconditions.checkState(args.getType() \u003d\u003d Token.LP);\n        for (Node a \u003d args.getFirstChild(); a !\u003d null; a \u003d a.getNext()) {\n            Preconditions.checkState(a.getType() \u003d\u003d Token.NAME);\n            declareVar(a);\n        }\n        scanVars(body, n);\n    } else {\n        Preconditions.checkState(scope.getParent() \u003d\u003d null);\n        scanVars(n, null);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
      "functionStartLine": 84,
      "functionName": "scanRoot",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,21 +1,24 @@\n private void scanRoot(Node n, Scope parent) {\n     if (n.getType() \u003d\u003d Token.FUNCTION) {\n-        sourceName \u003d n.getSourceFileName();\n+        if (inputId \u003d\u003d null) {\n+            inputId \u003d NodeUtil.getInputId(n);\n+            Preconditions.checkNotNull(inputId);\n+        }\n         final Node fnNameNode \u003d n.getFirstChild();\n         final Node args \u003d fnNameNode.getNext();\n         final Node body \u003d args.getNext();\n         String fnName \u003d fnNameNode.getString();\n         if (!fnName.isEmpty() \u0026\u0026 NodeUtil.isFunctionExpression(n)) {\n             declareVar(fnNameNode);\n         }\n         Preconditions.checkState(args.getType() \u003d\u003d Token.LP);\n         for (Node a \u003d args.getFirstChild(); a !\u003d null; a \u003d a.getNext()) {\n             Preconditions.checkState(a.getType() \u003d\u003d Token.NAME);\n             declareVar(a);\n         }\n         scanVars(body, n);\n     } else {\n         Preconditions.checkState(scope.getParent() \u003d\u003d null);\n         scanVars(n, null);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9320feca198878ca9464aae089399a8891c314d7": {
      "type": "Ybodychange",
      "commitMessage": "\nMake StaticSourceFile a property of Node\n\nR\u003djohnlenz\nDELTA\u003d183  (102 added, 25 deleted, 56 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2496\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1236 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/30/11, 1:25 PM",
      "commitName": "9320feca198878ca9464aae089399a8891c314d7",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "6/23/11, 1:45 PM",
      "commitNameOld": "03db3415761aa9d8ba2fafa0ed64116a8331b1a9",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 6.99,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "actualSource": "private void scanRoot(Node n, Scope parent) {\n    if (n.getType() \u003d\u003d Token.FUNCTION) {\n        sourceName \u003d n.getSourceFileName();\n        final Node fnNameNode \u003d n.getFirstChild();\n        final Node args \u003d fnNameNode.getNext();\n        final Node body \u003d args.getNext();\n        String fnName \u003d fnNameNode.getString();\n        if (!fnName.isEmpty() \u0026\u0026 NodeUtil.isFunctionExpression(n)) {\n            declareVar(fnNameNode);\n        }\n        Preconditions.checkState(args.getType() \u003d\u003d Token.LP);\n        for (Node a \u003d args.getFirstChild(); a !\u003d null; a \u003d a.getNext()) {\n            Preconditions.checkState(a.getType() \u003d\u003d Token.NAME);\n            declareVar(a);\n        }\n        scanVars(body, n);\n    } else {\n        Preconditions.checkState(scope.getParent() \u003d\u003d null);\n        scanVars(n, null);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
      "functionStartLine": 82,
      "functionName": "scanRoot",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,21 +1,21 @@\n private void scanRoot(Node n, Scope parent) {\n     if (n.getType() \u003d\u003d Token.FUNCTION) {\n-        sourceName \u003d (String) n.getProp(Node.SOURCENAME_PROP);\n+        sourceName \u003d n.getSourceFileName();\n         final Node fnNameNode \u003d n.getFirstChild();\n         final Node args \u003d fnNameNode.getNext();\n         final Node body \u003d args.getNext();\n         String fnName \u003d fnNameNode.getString();\n         if (!fnName.isEmpty() \u0026\u0026 NodeUtil.isFunctionExpression(n)) {\n             declareVar(fnNameNode);\n         }\n         Preconditions.checkState(args.getType() \u003d\u003d Token.LP);\n         for (Node a \u003d args.getFirstChild(); a !\u003d null; a \u003d a.getNext()) {\n             Preconditions.checkState(a.getType() \u003d\u003d Token.NAME);\n             declareVar(a);\n         }\n         scanVars(body, n);\n     } else {\n         Preconditions.checkState(scope.getParent() \u003d\u003d null);\n         scanVars(n, null);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "86caf52b53f53d8b83e9c1092f4b15ddeb6ca5bb": {
      "type": "Ybodychange",
      "commitMessage": "\nIf a variable is doubly declared in externs and sources,\nwe should keep around both VAR keywords.\nFixes issue 290\n\nR\u003djohnlenz\nDELTA\u003d93  (45 added, 19 deleted, 29 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d107\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@614 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/9/10, 12:58 PM",
      "commitName": "86caf52b53f53d8b83e9c1092f4b15ddeb6ca5bb",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "11/11/10, 9:42 PM",
      "commitNameOld": "df223efd38c514d584f00d076488ab9a02011492",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 27.64,
      "commitsBetweenForRepo": 67,
      "commitsBetweenForFile": 1,
      "actualSource": "private void scanRoot(Node n, Scope parent) {\n    if (n.getType() \u003d\u003d Token.FUNCTION) {\n        sourceName \u003d (String) n.getProp(Node.SOURCENAME_PROP);\n        final Node fnNameNode \u003d n.getFirstChild();\n        final Node args \u003d fnNameNode.getNext();\n        final Node body \u003d args.getNext();\n        String fnName \u003d fnNameNode.getString();\n        if (!fnName.isEmpty() \u0026\u0026 NodeUtil.isFunctionExpression(n)) {\n            declareVar(fnNameNode);\n        }\n        Preconditions.checkState(args.getType() \u003d\u003d Token.LP);\n        for (Node a \u003d args.getFirstChild(); a !\u003d null; a \u003d a.getNext()) {\n            Preconditions.checkState(a.getType() \u003d\u003d Token.NAME);\n            declareVar(a);\n        }\n        scanVars(body, n);\n    } else {\n        Preconditions.checkState(scope.getParent() \u003d\u003d null);\n        scanVars(n, null);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
      "functionStartLine": 82,
      "functionName": "scanRoot",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,21 +1,21 @@\n private void scanRoot(Node n, Scope parent) {\n     if (n.getType() \u003d\u003d Token.FUNCTION) {\n         sourceName \u003d (String) n.getProp(Node.SOURCENAME_PROP);\n         final Node fnNameNode \u003d n.getFirstChild();\n         final Node args \u003d fnNameNode.getNext();\n         final Node body \u003d args.getNext();\n         String fnName \u003d fnNameNode.getString();\n         if (!fnName.isEmpty() \u0026\u0026 NodeUtil.isFunctionExpression(n)) {\n-            declareVar(fnName, fnNameNode, n, null, null, n);\n+            declareVar(fnNameNode);\n         }\n         Preconditions.checkState(args.getType() \u003d\u003d Token.LP);\n         for (Node a \u003d args.getFirstChild(); a !\u003d null; a \u003d a.getNext()) {\n             Preconditions.checkState(a.getType() \u003d\u003d Token.NAME);\n-            declareVar(a.getString(), a, args, n, null, n);\n+            declareVar(a);\n         }\n         scanVars(body, n);\n     } else {\n         Preconditions.checkState(scope.getParent() \u003d\u003d null);\n         scanVars(n, null);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ebb59a97610015bc41bda7f458dd1428a3a3e335": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/04/22 by nick\n\n        fix the extern definition of Window.prototype.stop\n\n        R\u003dsiggy\n        DELTA\u003d1  (0 added, 0 deleted, 1 changed)\n\nChange on 2010/04/22 by john\n\n        \"Anonymous function\" is a confusing term for functions with names.\n        Properly we are usually distinguishing between functions statements\n        (function declarations) and function expressions.\n\n        R\u003dalan\n        DELTA\u003d172  (7 added, 14 deleted, 151 changed)\n\nChange on 2010/04/22 by john\n\n        Standardize the definition of setTimeout/setInterval.\n        Fix for Issue 137\n\n        R\u003dnick\n        DELTA\u003d6  (2 added, 2 deleted, 2 changed)\n\nChange on 2010/04/22 by mark\n\n        Various delegate fixes.\n\n        Give the delegate proxy a name unique from the delegate base so that\n        InstanceObjectType#equals distinguishes them. This is necessary for\n        AmbiguateProperties to work.\n\n        Fix the prototype of the delegate proxy. This makes\n        DisambiguateProperties continue to work.\n\n        Add superclass methods of the delegate base to the delegate proxy.\n\n\n        R\u003dandrew,nada\n        DELTA\u003d526  (383 added, 104 deleted, 39 changed)\n\nChange on 2010/04/23 by john\n\n        Allow variable inlining of function statements. For simplicity  limited to functions defined before first use.\n\n        R\u003dnick\n        DELTA\u003d79  (49 added, 3 deleted, 27 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dhakjvx\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@197 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/23/10, 11:31 AM",
      "commitName": "ebb59a97610015bc41bda7f458dd1428a3a3e335",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/6/10, 5:31 PM",
      "commitNameOld": "45fd54a488cfbf27978fc4811a722f1fedb8ddaa",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 16.75,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "actualSource": "private void scanRoot(Node n, Scope parent) {\n    if (n.getType() \u003d\u003d Token.FUNCTION) {\n        sourceName \u003d (String) n.getProp(Node.SOURCENAME_PROP);\n        final Node fnNameNode \u003d n.getFirstChild();\n        final Node args \u003d fnNameNode.getNext();\n        final Node body \u003d args.getNext();\n        String fnName \u003d fnNameNode.getString();\n        if (!fnName.isEmpty() \u0026\u0026 NodeUtil.isFunctionExpression(n)) {\n            declareVar(fnName, fnNameNode, n, null, null, n);\n        }\n        Preconditions.checkState(args.getType() \u003d\u003d Token.LP);\n        for (Node a \u003d args.getFirstChild(); a !\u003d null; a \u003d a.getNext()) {\n            Preconditions.checkState(a.getType() \u003d\u003d Token.NAME);\n            declareVar(a.getString(), a, args, n, null, n);\n        }\n        scanVars(body, n);\n    } else {\n        Preconditions.checkState(scope.getParent() \u003d\u003d null);\n        scanVars(n, null);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
      "functionStartLine": 84,
      "functionName": "scanRoot",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,21 +1,21 @@\n private void scanRoot(Node n, Scope parent) {\n     if (n.getType() \u003d\u003d Token.FUNCTION) {\n         sourceName \u003d (String) n.getProp(Node.SOURCENAME_PROP);\n         final Node fnNameNode \u003d n.getFirstChild();\n         final Node args \u003d fnNameNode.getNext();\n         final Node body \u003d args.getNext();\n         String fnName \u003d fnNameNode.getString();\n-        if (!fnName.isEmpty() \u0026\u0026 NodeUtil.isFunctionAnonymous(n)) {\n+        if (!fnName.isEmpty() \u0026\u0026 NodeUtil.isFunctionExpression(n)) {\n             declareVar(fnName, fnNameNode, n, null, null, n);\n         }\n         Preconditions.checkState(args.getType() \u003d\u003d Token.LP);\n         for (Node a \u003d args.getFirstChild(); a !\u003d null; a \u003d a.getNext()) {\n             Preconditions.checkState(a.getType() \u003d\u003d Token.NAME);\n             declareVar(a.getString(), a, args, n, null, n);\n         }\n         scanVars(body, n);\n     } else {\n         Preconditions.checkState(scope.getParent() \u003d\u003d null);\n         scanVars(n, null);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,21 @@\n+private void scanRoot(Node n, Scope parent) {\n+    if (n.getType() \u003d\u003d Token.FUNCTION) {\n+        sourceName \u003d (String) n.getProp(Node.SOURCENAME_PROP);\n+        final Node fnNameNode \u003d n.getFirstChild();\n+        final Node args \u003d fnNameNode.getNext();\n+        final Node body \u003d args.getNext();\n+        String fnName \u003d fnNameNode.getString();\n+        if (!fnName.isEmpty() \u0026\u0026 NodeUtil.isFunctionAnonymous(n)) {\n+            declareVar(fnName, fnNameNode, n, null, null, n);\n+        }\n+        Preconditions.checkState(args.getType() \u003d\u003d Token.LP);\n+        for (Node a \u003d args.getFirstChild(); a !\u003d null; a \u003d a.getNext()) {\n+            Preconditions.checkState(a.getType() \u003d\u003d Token.NAME);\n+            declareVar(a.getString(), a, args, n, null, n);\n+        }\n+        scanVars(body, n);\n+    } else {\n+        Preconditions.checkState(scope.getParent() \u003d\u003d null);\n+        scanVars(n, null);\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void scanRoot(Node n, Scope parent) {\n    if (n.getType() \u003d\u003d Token.FUNCTION) {\n        sourceName \u003d (String) n.getProp(Node.SOURCENAME_PROP);\n        final Node fnNameNode \u003d n.getFirstChild();\n        final Node args \u003d fnNameNode.getNext();\n        final Node body \u003d args.getNext();\n        String fnName \u003d fnNameNode.getString();\n        if (!fnName.isEmpty() \u0026\u0026 NodeUtil.isFunctionAnonymous(n)) {\n            declareVar(fnName, fnNameNode, n, null, null, n);\n        }\n        Preconditions.checkState(args.getType() \u003d\u003d Token.LP);\n        for (Node a \u003d args.getFirstChild(); a !\u003d null; a \u003d a.getNext()) {\n            Preconditions.checkState(a.getType() \u003d\u003d Token.NAME);\n            declareVar(a.getString(), a, args, n, null, n);\n        }\n        scanVars(body, n);\n    } else {\n        Preconditions.checkState(scope.getParent() \u003d\u003d null);\n        scanVars(n, null);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
      "functionStartLine": 75,
      "functionName": "scanRoot",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}