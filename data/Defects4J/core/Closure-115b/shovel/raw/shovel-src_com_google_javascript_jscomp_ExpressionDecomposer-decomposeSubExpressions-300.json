{
  "origin": "codeshovel",
  "repositoryName": "Closure-115b",
  "repositoryPath": "/tmp/Closure-115b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ExpressionDecomposer.java",
  "functionName": "decomposeSubExpressions",
  "functionId": "decomposeSubExpressions___n-Node__stopNode-Node__state-DecompositionState",
  "sourceFilePath": "src/com/google/javascript/jscomp/ExpressionDecomposer.java",
  "functionAnnotation": "",
  "functionDoc": "\n@param n The node with which to start iterating.\n@param stopNode A node after which to stop iterating.\n",
  "functionStartLine": 300,
  "functionEndLine": 325,
  "numCommitsSeen": 25,
  "timeTaken": 1616,
  "changeHistory": [
    "f0ff2971eca336e950929b3ee0d80155338bb1dd",
    "2e68acb05c7a37396c9efc449e14226b6d3fb7eb",
    "34fd5f8275ae69fc772c2283a3c5fd13b93a7c42",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "f0ff2971eca336e950929b3ee0d80155338bb1dd": "Ybodychange",
    "2e68acb05c7a37396c9efc449e14226b6d3fb7eb": "Ybodychange",
    "34fd5f8275ae69fc772c2283a3c5fd13b93a7c42": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f0ff2971eca336e950929b3ee0d80155338bb1dd": {
      "type": "Ybodychange",
      "commitMessage": "\nCruft removal: remove some unused locals and parameters.\n\nR\u003ddimvar\nDELTA\u003d336 (6 added, 108 deleted, 222 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d6092\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2447 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/8/13, 12:15 PM",
      "commitName": "f0ff2971eca336e950929b3ee0d80155338bb1dd",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "9/20/12, 11:55 AM",
      "commitNameOld": "58fdad08ba7f8e24ac48a006f1e2989bda46b9a9",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 110.06,
      "commitsBetweenForRepo": 226,
      "commitsBetweenForFile": 1,
      "actualSource": "private void decomposeSubExpressions(Node n, Node stopNode, DecompositionState state) {\n    if (n \u003d\u003d null || n \u003d\u003d stopNode) {\n        return;\n    }\n    Preconditions.checkState(!NodeUtil.isObjectLitKey(n));\n    decomposeSubExpressions(n.getNext(), stopNode, state);\n    if (isExpressionTreeUnsafe(n, state.sideEffects)) {\n        state.sideEffects \u003d true;\n        state.extractBeforeStatement \u003d extractExpression(n, state.extractBeforeStatement);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java",
      "functionStartLine": 300,
      "functionName": "decomposeSubExpressions",
      "functionAnnotation": "",
      "functionDoc": "\n@param n The node with which to start iterating.\n@param stopNode A node after which to stop iterating.\n",
      "diff": "@@ -1,11 +1,11 @@\n private void decomposeSubExpressions(Node n, Node stopNode, DecompositionState state) {\n     if (n \u003d\u003d null || n \u003d\u003d stopNode) {\n         return;\n     }\n-    Preconditions.checkState(!NodeUtil.isObjectLitKey(n, n.getParent()));\n+    Preconditions.checkState(!NodeUtil.isObjectLitKey(n));\n     decomposeSubExpressions(n.getNext(), stopNode, state);\n     if (isExpressionTreeUnsafe(n, state.sideEffects)) {\n         state.sideEffects \u003d true;\n         state.extractBeforeStatement \u003d extractExpression(n, state.extractBeforeStatement);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2e68acb05c7a37396c9efc449e14226b6d3fb7eb": {
      "type": "Ybodychange",
      "commitMessage": "\nChanges needed to support getters and setters in simple mode.\n\nR\u003dnicksantos\nDELTA\u003d166  (146 added, 2 deleted, 18 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d110\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@617 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/10/10, 9:14 AM",
      "commitName": "2e68acb05c7a37396c9efc449e14226b6d3fb7eb",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/11/10, 9:42 PM",
      "commitNameOld": "df223efd38c514d584f00d076488ab9a02011492",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 28.48,
      "commitsBetweenForRepo": 70,
      "commitsBetweenForFile": 1,
      "actualSource": "private void decomposeSubExpressions(Node n, Node stopNode, DecompositionState state) {\n    if (n \u003d\u003d null || n \u003d\u003d stopNode) {\n        return;\n    }\n    Preconditions.checkState(!NodeUtil.isObjectLitKey(n, n.getParent()));\n    decomposeSubExpressions(n.getNext(), stopNode, state);\n    if (isExpressionTreeUnsafe(n, state.sideEffects)) {\n        state.sideEffects \u003d true;\n        state.extractBeforeStatement \u003d extractExpression(n, state.extractBeforeStatement);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java",
      "functionStartLine": 297,
      "functionName": "decomposeSubExpressions",
      "functionAnnotation": "",
      "functionDoc": "\n@param n The node with which to start iterating.\n@param stopNode A node after which to stop iterating.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "34fd5f8275ae69fc772c2283a3c5fd13b93a7c42": {
      "type": "Ybodychange",
      "commitMessage": "\nChange the OBJECTLIT AST structure from:\n\nOBJECTLIT\n  KEY1\n  VALUE1\n\nto\n\nOBJECTLIT\n  KEY1\n    VALUE1\n\nFixes issue 241\n\nR\u003dacleung,johnlenz,stevey\nDELTA\u003d268  (101 added, 51 deleted, 116 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d356416\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@494 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/18/10, 2:55 PM",
      "commitName": "34fd5f8275ae69fc772c2283a3c5fd13b93a7c42",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "10/14/10, 8:43 AM",
      "commitNameOld": "725ecc108d6c4e02730ed79f471437f240fbc107",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 4.26,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "private void decomposeSubExpressions(Node n, Node stopNode, DecompositionState state) {\n    if (n \u003d\u003d null || n \u003d\u003d stopNode) {\n        return;\n    }\n    Preconditions.checkState(!NodeUtil.isObjectLitKey(n, n.getParent()));\n    decomposeSubExpressions(n.getNext(), stopNode, state);\n    if (isExpressionTreeUnsafe(n, state.sideEffects)) {\n        state.sideEffects \u003d true;\n        state.extractBeforeStatement \u003d extractExpression(n, state.extractBeforeStatement);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java",
      "functionStartLine": 297,
      "functionName": "decomposeSubExpressions",
      "functionAnnotation": "",
      "functionDoc": "\n@param n The node with which to start iterating.\n@param stopNode A node after which to stop iterating.\n",
      "diff": "@@ -1,10 +1,11 @@\n private void decomposeSubExpressions(Node n, Node stopNode, DecompositionState state) {\n     if (n \u003d\u003d null || n \u003d\u003d stopNode) {\n         return;\n     }\n+    Preconditions.checkState(!NodeUtil.isObjectLitKey(n, n.getParent()));\n     decomposeSubExpressions(n.getNext(), stopNode, state);\n     if (isExpressionTreeUnsafe(n, state.sideEffects)) {\n         state.sideEffects \u003d true;\n         state.extractBeforeStatement \u003d extractExpression(n, state.extractBeforeStatement);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,10 @@\n+private void decomposeSubExpressions(Node n, Node stopNode, DecompositionState state) {\n+    if (n \u003d\u003d null || n \u003d\u003d stopNode) {\n+        return;\n+    }\n+    decomposeSubExpressions(n.getNext(), stopNode, state);\n+    if (isExpressionTreeUnsafe(n, state.sideEffects)) {\n+        state.sideEffects \u003d true;\n+        state.extractBeforeStatement \u003d extractExpression(n, state.extractBeforeStatement);\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void decomposeSubExpressions(Node n, Node stopNode, DecompositionState state) {\n    if (n \u003d\u003d null || n \u003d\u003d stopNode) {\n        return;\n    }\n    decomposeSubExpressions(n.getNext(), stopNode, state);\n    if (isExpressionTreeUnsafe(n, state.sideEffects)) {\n        state.sideEffects \u003d true;\n        state.extractBeforeStatement \u003d extractExpression(n, state.extractBeforeStatement);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java",
      "functionStartLine": 256,
      "functionName": "decomposeSubExpressions",
      "functionAnnotation": "",
      "functionDoc": "\n@param n The node with which to start iterating.\n@param stopNode A node after which to stop iterating.\n"
    }
  }
}