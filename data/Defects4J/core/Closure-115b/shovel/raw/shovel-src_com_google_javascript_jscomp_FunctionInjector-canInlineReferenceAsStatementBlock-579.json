{
  "origin": "codeshovel",
  "repositoryName": "Closure-115b",
  "repositoryPath": "/tmp/Closure-115b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FunctionInjector.java",
  "functionName": "canInlineReferenceAsStatementBlock",
  "functionId": "canInlineReferenceAsStatementBlock___t-NodeTraversal__callNode-Node__fnNode-Node__namesToAlias-Set__String__",
  "sourceFilePath": "src/com/google/javascript/jscomp/FunctionInjector.java",
  "functionAnnotation": "",
  "functionDoc": "Determines whether a function can be inlined at a particular call site.\nThere are several criteria that the function and reference must hold in\norder for the functions to be inlined:\n- It must be a simple call, or assignment, or var initialization.\n\u003cpre\u003e\n   f();\n   a \u003d foo();\n   var a \u003d foo();\n\u003c/pre\u003e\n",
  "functionStartLine": 579,
  "functionEndLine": 603,
  "numCommitsSeen": 75,
  "timeTaken": 2532,
  "changeHistory": [
    "98a487531ce3d6555851398daead0471b5932774",
    "43cece8ccf72521faa04fc79fddfc5f7d661a787",
    "0b05c26eefae171f9b4d0e1f8eba4249088207fa",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "98a487531ce3d6555851398daead0471b5932774": "Ybodychange",
    "43cece8ccf72521faa04fc79fddfc5f7d661a787": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "0b05c26eefae171f9b4d0e1f8eba4249088207fa": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "98a487531ce3d6555851398daead0471b5932774": {
      "type": "Ybodychange",
      "commitMessage": "\nFix incosistent internal state caused by when multiple functions are\ninlined into the same expression.\n\nR\u003dnicksantos\nDELTA\u003d300  (131 added, 51 deleted, 118 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5029\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2052 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/18/12, 9:58 AM",
      "commitName": "98a487531ce3d6555851398daead0471b5932774",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "5/18/12, 11:09 AM",
      "commitNameOld": "70a5626922ea7e8c98747e22b6986638ba38fadc",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 30.95,
      "commitsBetweenForRepo": 73,
      "commitsBetweenForFile": 1,
      "actualSource": "private CanInlineResult canInlineReferenceAsStatementBlock(NodeTraversal t, Node callNode, Node fnNode, Set\u003cString\u003e namesToAlias) {\n    CallSiteType callSiteType \u003d classifyCallSite(callNode);\n    if (callSiteType \u003d\u003d CallSiteType.UNSUPPORTED) {\n        return CanInlineResult.NO;\n    }\n    if (!allowDecomposition \u0026\u0026 (callSiteType \u003d\u003d CallSiteType.DECOMPOSABLE_EXPRESSION || callSiteType \u003d\u003d CallSiteType.EXPRESSION)) {\n        return CanInlineResult.NO;\n    }\n    if (!callMeetsBlockInliningRequirements(t, callNode, fnNode, namesToAlias)) {\n        return CanInlineResult.NO;\n    }\n    if (callSiteType \u003d\u003d CallSiteType.DECOMPOSABLE_EXPRESSION || callSiteType \u003d\u003d CallSiteType.EXPRESSION) {\n        return CanInlineResult.AFTER_PREPARATION;\n    } else {\n        return CanInlineResult.YES;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/FunctionInjector.java",
      "functionStartLine": 580,
      "functionName": "canInlineReferenceAsStatementBlock",
      "functionAnnotation": "",
      "functionDoc": "Determines whether a function can be inlined at a particular call site.\nThere are several criteria that the function and reference must hold in\norder for the functions to be inlined:\n- It must be a simple call, or assignment, or var initialization.\n\u003cpre\u003e\n   f();\n   a \u003d foo();\n   var a \u003d foo();\n\u003c/pre\u003e\n",
      "diff": "@@ -1,17 +1,17 @@\n private CanInlineResult canInlineReferenceAsStatementBlock(NodeTraversal t, Node callNode, Node fnNode, Set\u003cString\u003e namesToAlias) {\n     CallSiteType callSiteType \u003d classifyCallSite(callNode);\n     if (callSiteType \u003d\u003d CallSiteType.UNSUPPORTED) {\n         return CanInlineResult.NO;\n     }\n-    if (!allowDecomposition \u0026\u0026 callSiteType \u003d\u003d CallSiteType.DECOMPOSABLE_EXPRESSION) {\n+    if (!allowDecomposition \u0026\u0026 (callSiteType \u003d\u003d CallSiteType.DECOMPOSABLE_EXPRESSION || callSiteType \u003d\u003d CallSiteType.EXPRESSION)) {\n         return CanInlineResult.NO;\n     }\n     if (!callMeetsBlockInliningRequirements(t, callNode, fnNode, namesToAlias)) {\n         return CanInlineResult.NO;\n     }\n-    if (callSiteType \u003d\u003d CallSiteType.DECOMPOSABLE_EXPRESSION) {\n-        return CanInlineResult.AFTER_DECOMPOSITION;\n+    if (callSiteType \u003d\u003d CallSiteType.DECOMPOSABLE_EXPRESSION || callSiteType \u003d\u003d CallSiteType.EXPRESSION) {\n+        return CanInlineResult.AFTER_PREPARATION;\n     } else {\n         return CanInlineResult.YES;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "43cece8ccf72521faa04fc79fddfc5f7d661a787": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nBreaks tests\n\n*** Original change description ***\n\nTweaks to function inlining:\n- an unnamed function expression containing a inner unnamed function\nexpression should not be disallow because the names are the same.\n- a caller that only contains the function definition to be inlined should\nnot consider the candidate to be a capturing function.\n- allow inlining a function containing an inner function that\nreferences arguments.\n- disallow inlining a function into a function containing eval.\n- when inlining a function containing a function dec\n\n... description truncated by g4 rollback ...\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2930\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1339 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/8/11, 2:51 PM",
      "commitName": "43cece8ccf72521faa04fc79fddfc5f7d661a787",
      "commitAuthor": "johnlenz@google.com",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nBreaks tests\n\n*** Original change description ***\n\nTweaks to function inlining:\n- an unnamed function expression containing a inner unnamed function\nexpression should not be disallow because the names are the same.\n- a caller that only contains the function definition to be inlined should\nnot consider the candidate to be a capturing function.\n- allow inlining a function containing an inner function that\nreferences arguments.\n- disallow inlining a function into a function containing eval.\n- when inlining a function containing a function dec\n\n... description truncated by g4 rollback ...\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2930\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1339 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "8/8/11, 2:51 PM",
          "commitName": "43cece8ccf72521faa04fc79fddfc5f7d661a787",
          "commitAuthor": "johnlenz@google.com",
          "commitDateOld": "8/8/11, 2:03 PM",
          "commitNameOld": "0b05c26eefae171f9b4d0e1f8eba4249088207fa",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private CanInlineResult canInlineReferenceAsStatementBlock(NodeTraversal t, Node callNode, Node fnNode, Set\u003cString\u003e namesToAlias) {\n    CallSiteType callSiteType \u003d classifyCallSite(callNode);\n    if (callSiteType \u003d\u003d CallSiteType.UNSUPPORTED) {\n        return CanInlineResult.NO;\n    }\n    if (!allowDecomposition \u0026\u0026 callSiteType \u003d\u003d CallSiteType.DECOMPOSABLE_EXPRESSION) {\n        return CanInlineResult.NO;\n    }\n    if (!callMeetsBlockInliningRequirements(t, callNode, fnNode, namesToAlias)) {\n        return CanInlineResult.NO;\n    }\n    if (callSiteType \u003d\u003d CallSiteType.DECOMPOSABLE_EXPRESSION) {\n        return CanInlineResult.AFTER_DECOMPOSITION;\n    } else {\n        return CanInlineResult.YES;\n    }\n}",
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java",
          "functionStartLine": 533,
          "functionName": "canInlineReferenceAsStatementBlock",
          "functionAnnotation": "",
          "functionDoc": "Determines whether a function can be inlined at a particular call site.\nThere are several criteria that the function and reference must hold in\norder for the functions to be inlined:\n- It must be a simple call, or assignment, or var initialization.\n\u003cpre\u003e\n   f();\n   a \u003d foo();\n   var a \u003d foo();\n\u003c/pre\u003e\n",
          "diff": "@@ -1,17 +1,17 @@\n-private CanInlineResult canInlineReferenceAsStatementBlock(NodeTraversal t, Node callNode, Node fnNode, Set\u003cString\u003e namesToAlias, boolean containsFunctions) {\n+private CanInlineResult canInlineReferenceAsStatementBlock(NodeTraversal t, Node callNode, Node fnNode, Set\u003cString\u003e namesToAlias) {\n     CallSiteType callSiteType \u003d classifyCallSite(callNode);\n     if (callSiteType \u003d\u003d CallSiteType.UNSUPPORTED) {\n         return CanInlineResult.NO;\n     }\n     if (!allowDecomposition \u0026\u0026 callSiteType \u003d\u003d CallSiteType.DECOMPOSABLE_EXPRESSION) {\n         return CanInlineResult.NO;\n     }\n-    if (!callMeetsBlockInliningRequirements(t, callNode, fnNode, namesToAlias, containsFunctions)) {\n+    if (!callMeetsBlockInliningRequirements(t, callNode, fnNode, namesToAlias)) {\n         return CanInlineResult.NO;\n     }\n     if (callSiteType \u003d\u003d CallSiteType.DECOMPOSABLE_EXPRESSION) {\n         return CanInlineResult.AFTER_DECOMPOSITION;\n     } else {\n         return CanInlineResult.YES;\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[t-NodeTraversal, callNode-Node, fnNode-Node, namesToAlias-Set\u003cString\u003e, containsFunctions-boolean]",
            "newValue": "[t-NodeTraversal, callNode-Node, fnNode-Node, namesToAlias-Set\u003cString\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nBreaks tests\n\n*** Original change description ***\n\nTweaks to function inlining:\n- an unnamed function expression containing a inner unnamed function\nexpression should not be disallow because the names are the same.\n- a caller that only contains the function definition to be inlined should\nnot consider the candidate to be a capturing function.\n- allow inlining a function containing an inner function that\nreferences arguments.\n- disallow inlining a function into a function containing eval.\n- when inlining a function containing a function dec\n\n... description truncated by g4 rollback ...\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2930\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1339 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "8/8/11, 2:51 PM",
          "commitName": "43cece8ccf72521faa04fc79fddfc5f7d661a787",
          "commitAuthor": "johnlenz@google.com",
          "commitDateOld": "8/8/11, 2:03 PM",
          "commitNameOld": "0b05c26eefae171f9b4d0e1f8eba4249088207fa",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private CanInlineResult canInlineReferenceAsStatementBlock(NodeTraversal t, Node callNode, Node fnNode, Set\u003cString\u003e namesToAlias) {\n    CallSiteType callSiteType \u003d classifyCallSite(callNode);\n    if (callSiteType \u003d\u003d CallSiteType.UNSUPPORTED) {\n        return CanInlineResult.NO;\n    }\n    if (!allowDecomposition \u0026\u0026 callSiteType \u003d\u003d CallSiteType.DECOMPOSABLE_EXPRESSION) {\n        return CanInlineResult.NO;\n    }\n    if (!callMeetsBlockInliningRequirements(t, callNode, fnNode, namesToAlias)) {\n        return CanInlineResult.NO;\n    }\n    if (callSiteType \u003d\u003d CallSiteType.DECOMPOSABLE_EXPRESSION) {\n        return CanInlineResult.AFTER_DECOMPOSITION;\n    } else {\n        return CanInlineResult.YES;\n    }\n}",
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java",
          "functionStartLine": 533,
          "functionName": "canInlineReferenceAsStatementBlock",
          "functionAnnotation": "",
          "functionDoc": "Determines whether a function can be inlined at a particular call site.\nThere are several criteria that the function and reference must hold in\norder for the functions to be inlined:\n- It must be a simple call, or assignment, or var initialization.\n\u003cpre\u003e\n   f();\n   a \u003d foo();\n   var a \u003d foo();\n\u003c/pre\u003e\n",
          "diff": "@@ -1,17 +1,17 @@\n-private CanInlineResult canInlineReferenceAsStatementBlock(NodeTraversal t, Node callNode, Node fnNode, Set\u003cString\u003e namesToAlias, boolean containsFunctions) {\n+private CanInlineResult canInlineReferenceAsStatementBlock(NodeTraversal t, Node callNode, Node fnNode, Set\u003cString\u003e namesToAlias) {\n     CallSiteType callSiteType \u003d classifyCallSite(callNode);\n     if (callSiteType \u003d\u003d CallSiteType.UNSUPPORTED) {\n         return CanInlineResult.NO;\n     }\n     if (!allowDecomposition \u0026\u0026 callSiteType \u003d\u003d CallSiteType.DECOMPOSABLE_EXPRESSION) {\n         return CanInlineResult.NO;\n     }\n-    if (!callMeetsBlockInliningRequirements(t, callNode, fnNode, namesToAlias, containsFunctions)) {\n+    if (!callMeetsBlockInliningRequirements(t, callNode, fnNode, namesToAlias)) {\n         return CanInlineResult.NO;\n     }\n     if (callSiteType \u003d\u003d CallSiteType.DECOMPOSABLE_EXPRESSION) {\n         return CanInlineResult.AFTER_DECOMPOSITION;\n     } else {\n         return CanInlineResult.YES;\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nBreaks tests\n\n*** Original change description ***\n\nTweaks to function inlining:\n- an unnamed function expression containing a inner unnamed function\nexpression should not be disallow because the names are the same.\n- a caller that only contains the function definition to be inlined should\nnot consider the candidate to be a capturing function.\n- allow inlining a function containing an inner function that\nreferences arguments.\n- disallow inlining a function into a function containing eval.\n- when inlining a function containing a function dec\n\n... description truncated by g4 rollback ...\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2930\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1339 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "8/8/11, 2:51 PM",
          "commitName": "43cece8ccf72521faa04fc79fddfc5f7d661a787",
          "commitAuthor": "johnlenz@google.com",
          "commitDateOld": "8/8/11, 2:03 PM",
          "commitNameOld": "0b05c26eefae171f9b4d0e1f8eba4249088207fa",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private CanInlineResult canInlineReferenceAsStatementBlock(NodeTraversal t, Node callNode, Node fnNode, Set\u003cString\u003e namesToAlias) {\n    CallSiteType callSiteType \u003d classifyCallSite(callNode);\n    if (callSiteType \u003d\u003d CallSiteType.UNSUPPORTED) {\n        return CanInlineResult.NO;\n    }\n    if (!allowDecomposition \u0026\u0026 callSiteType \u003d\u003d CallSiteType.DECOMPOSABLE_EXPRESSION) {\n        return CanInlineResult.NO;\n    }\n    if (!callMeetsBlockInliningRequirements(t, callNode, fnNode, namesToAlias)) {\n        return CanInlineResult.NO;\n    }\n    if (callSiteType \u003d\u003d CallSiteType.DECOMPOSABLE_EXPRESSION) {\n        return CanInlineResult.AFTER_DECOMPOSITION;\n    } else {\n        return CanInlineResult.YES;\n    }\n}",
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java",
          "functionStartLine": 533,
          "functionName": "canInlineReferenceAsStatementBlock",
          "functionAnnotation": "",
          "functionDoc": "Determines whether a function can be inlined at a particular call site.\nThere are several criteria that the function and reference must hold in\norder for the functions to be inlined:\n- It must be a simple call, or assignment, or var initialization.\n\u003cpre\u003e\n   f();\n   a \u003d foo();\n   var a \u003d foo();\n\u003c/pre\u003e\n",
          "diff": "@@ -1,17 +1,17 @@\n-private CanInlineResult canInlineReferenceAsStatementBlock(NodeTraversal t, Node callNode, Node fnNode, Set\u003cString\u003e namesToAlias, boolean containsFunctions) {\n+private CanInlineResult canInlineReferenceAsStatementBlock(NodeTraversal t, Node callNode, Node fnNode, Set\u003cString\u003e namesToAlias) {\n     CallSiteType callSiteType \u003d classifyCallSite(callNode);\n     if (callSiteType \u003d\u003d CallSiteType.UNSUPPORTED) {\n         return CanInlineResult.NO;\n     }\n     if (!allowDecomposition \u0026\u0026 callSiteType \u003d\u003d CallSiteType.DECOMPOSABLE_EXPRESSION) {\n         return CanInlineResult.NO;\n     }\n-    if (!callMeetsBlockInliningRequirements(t, callNode, fnNode, namesToAlias, containsFunctions)) {\n+    if (!callMeetsBlockInliningRequirements(t, callNode, fnNode, namesToAlias)) {\n         return CanInlineResult.NO;\n     }\n     if (callSiteType \u003d\u003d CallSiteType.DECOMPOSABLE_EXPRESSION) {\n         return CanInlineResult.AFTER_DECOMPOSITION;\n     } else {\n         return CanInlineResult.YES;\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Determines whether a function can be inlined at a particular call site.\nThere are several criteria that the function and reference must hold in\norder for the functions to be inlined:\n- It must be a simple call, or assignment, or var initialization.\n\u003cpre\u003e\n   f();\n   a \u003d foo();\n   var a \u003d foo();\n\u003c/pre\u003e\n\n@param containsFunctions Whether the fnNode contains inner functions.\n",
            "newValue": "Determines whether a function can be inlined at a particular call site.\nThere are several criteria that the function and reference must hold in\norder for the functions to be inlined:\n- It must be a simple call, or assignment, or var initialization.\n\u003cpre\u003e\n   f();\n   a \u003d foo();\n   var a \u003d foo();\n\u003c/pre\u003e\n"
          }
        }
      ]
    },
    "0b05c26eefae171f9b4d0e1f8eba4249088207fa": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "\nTweaks to function inlining:\n- an unnamed function expression containing a inner unnamed function\nexpression should not be disallow because the names are the same.\n- a caller that only contains the function definition to be inlined should\nnot consider the candidate to be a capturing function.\n- allow inlining a function containing an inner function that\nreferences arguments.\n- disallow inlining a function into a function containing eval.\n- when inlining a function containing a function declaration, rewrite\nit a var declarations and function expressions to avoid introducing\nfunction declaraions into contexts disallowed by ES5 strict.\n\nR\u003dacleung\nDELTA\u003d228  (182 added, 14 deleted, 32 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2929\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1338 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/8/11, 2:03 PM",
      "commitName": "0b05c26eefae171f9b4d0e1f8eba4249088207fa",
      "commitAuthor": "johnlenz@google.com",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "\nTweaks to function inlining:\n- an unnamed function expression containing a inner unnamed function\nexpression should not be disallow because the names are the same.\n- a caller that only contains the function definition to be inlined should\nnot consider the candidate to be a capturing function.\n- allow inlining a function containing an inner function that\nreferences arguments.\n- disallow inlining a function into a function containing eval.\n- when inlining a function containing a function declaration, rewrite\nit a var declarations and function expressions to avoid introducing\nfunction declaraions into contexts disallowed by ES5 strict.\n\nR\u003dacleung\nDELTA\u003d228  (182 added, 14 deleted, 32 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2929\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1338 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "8/8/11, 2:03 PM",
          "commitName": "0b05c26eefae171f9b4d0e1f8eba4249088207fa",
          "commitAuthor": "johnlenz@google.com",
          "commitDateOld": "7/28/11, 4:19 PM",
          "commitNameOld": "76abdf11394c0e7515ae63335676ea3657badb45",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 10.91,
          "commitsBetweenForRepo": 29,
          "commitsBetweenForFile": 1,
          "actualSource": "private CanInlineResult canInlineReferenceAsStatementBlock(NodeTraversal t, Node callNode, Node fnNode, Set\u003cString\u003e namesToAlias, boolean containsFunctions) {\n    CallSiteType callSiteType \u003d classifyCallSite(callNode);\n    if (callSiteType \u003d\u003d CallSiteType.UNSUPPORTED) {\n        return CanInlineResult.NO;\n    }\n    if (!allowDecomposition \u0026\u0026 callSiteType \u003d\u003d CallSiteType.DECOMPOSABLE_EXPRESSION) {\n        return CanInlineResult.NO;\n    }\n    if (!callMeetsBlockInliningRequirements(t, callNode, fnNode, namesToAlias, containsFunctions)) {\n        return CanInlineResult.NO;\n    }\n    if (callSiteType \u003d\u003d CallSiteType.DECOMPOSABLE_EXPRESSION) {\n        return CanInlineResult.AFTER_DECOMPOSITION;\n    } else {\n        return CanInlineResult.YES;\n    }\n}",
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java",
          "functionStartLine": 530,
          "functionName": "canInlineReferenceAsStatementBlock",
          "functionAnnotation": "",
          "functionDoc": "Determines whether a function can be inlined at a particular call site.\nThere are several criteria that the function and reference must hold in\norder for the functions to be inlined:\n- It must be a simple call, or assignment, or var initialization.\n\u003cpre\u003e\n   f();\n   a \u003d foo();\n   var a \u003d foo();\n\u003c/pre\u003e\n\n@param containsFunctions Whether the fnNode contains inner functions.\n",
          "diff": "@@ -1,17 +1,17 @@\n-private CanInlineResult canInlineReferenceAsStatementBlock(NodeTraversal t, Node callNode, Node fnNode, Set\u003cString\u003e namesToAlias) {\n+private CanInlineResult canInlineReferenceAsStatementBlock(NodeTraversal t, Node callNode, Node fnNode, Set\u003cString\u003e namesToAlias, boolean containsFunctions) {\n     CallSiteType callSiteType \u003d classifyCallSite(callNode);\n     if (callSiteType \u003d\u003d CallSiteType.UNSUPPORTED) {\n         return CanInlineResult.NO;\n     }\n     if (!allowDecomposition \u0026\u0026 callSiteType \u003d\u003d CallSiteType.DECOMPOSABLE_EXPRESSION) {\n         return CanInlineResult.NO;\n     }\n-    if (!callMeetsBlockInliningRequirements(t, callNode, fnNode, namesToAlias)) {\n+    if (!callMeetsBlockInliningRequirements(t, callNode, fnNode, namesToAlias, containsFunctions)) {\n         return CanInlineResult.NO;\n     }\n     if (callSiteType \u003d\u003d CallSiteType.DECOMPOSABLE_EXPRESSION) {\n         return CanInlineResult.AFTER_DECOMPOSITION;\n     } else {\n         return CanInlineResult.YES;\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[t-NodeTraversal, callNode-Node, fnNode-Node, namesToAlias-Set\u003cString\u003e]",
            "newValue": "[t-NodeTraversal, callNode-Node, fnNode-Node, namesToAlias-Set\u003cString\u003e, containsFunctions-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nTweaks to function inlining:\n- an unnamed function expression containing a inner unnamed function\nexpression should not be disallow because the names are the same.\n- a caller that only contains the function definition to be inlined should\nnot consider the candidate to be a capturing function.\n- allow inlining a function containing an inner function that\nreferences arguments.\n- disallow inlining a function into a function containing eval.\n- when inlining a function containing a function declaration, rewrite\nit a var declarations and function expressions to avoid introducing\nfunction declaraions into contexts disallowed by ES5 strict.\n\nR\u003dacleung\nDELTA\u003d228  (182 added, 14 deleted, 32 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2929\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1338 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "8/8/11, 2:03 PM",
          "commitName": "0b05c26eefae171f9b4d0e1f8eba4249088207fa",
          "commitAuthor": "johnlenz@google.com",
          "commitDateOld": "7/28/11, 4:19 PM",
          "commitNameOld": "76abdf11394c0e7515ae63335676ea3657badb45",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 10.91,
          "commitsBetweenForRepo": 29,
          "commitsBetweenForFile": 1,
          "actualSource": "private CanInlineResult canInlineReferenceAsStatementBlock(NodeTraversal t, Node callNode, Node fnNode, Set\u003cString\u003e namesToAlias, boolean containsFunctions) {\n    CallSiteType callSiteType \u003d classifyCallSite(callNode);\n    if (callSiteType \u003d\u003d CallSiteType.UNSUPPORTED) {\n        return CanInlineResult.NO;\n    }\n    if (!allowDecomposition \u0026\u0026 callSiteType \u003d\u003d CallSiteType.DECOMPOSABLE_EXPRESSION) {\n        return CanInlineResult.NO;\n    }\n    if (!callMeetsBlockInliningRequirements(t, callNode, fnNode, namesToAlias, containsFunctions)) {\n        return CanInlineResult.NO;\n    }\n    if (callSiteType \u003d\u003d CallSiteType.DECOMPOSABLE_EXPRESSION) {\n        return CanInlineResult.AFTER_DECOMPOSITION;\n    } else {\n        return CanInlineResult.YES;\n    }\n}",
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java",
          "functionStartLine": 530,
          "functionName": "canInlineReferenceAsStatementBlock",
          "functionAnnotation": "",
          "functionDoc": "Determines whether a function can be inlined at a particular call site.\nThere are several criteria that the function and reference must hold in\norder for the functions to be inlined:\n- It must be a simple call, or assignment, or var initialization.\n\u003cpre\u003e\n   f();\n   a \u003d foo();\n   var a \u003d foo();\n\u003c/pre\u003e\n\n@param containsFunctions Whether the fnNode contains inner functions.\n",
          "diff": "@@ -1,17 +1,17 @@\n-private CanInlineResult canInlineReferenceAsStatementBlock(NodeTraversal t, Node callNode, Node fnNode, Set\u003cString\u003e namesToAlias) {\n+private CanInlineResult canInlineReferenceAsStatementBlock(NodeTraversal t, Node callNode, Node fnNode, Set\u003cString\u003e namesToAlias, boolean containsFunctions) {\n     CallSiteType callSiteType \u003d classifyCallSite(callNode);\n     if (callSiteType \u003d\u003d CallSiteType.UNSUPPORTED) {\n         return CanInlineResult.NO;\n     }\n     if (!allowDecomposition \u0026\u0026 callSiteType \u003d\u003d CallSiteType.DECOMPOSABLE_EXPRESSION) {\n         return CanInlineResult.NO;\n     }\n-    if (!callMeetsBlockInliningRequirements(t, callNode, fnNode, namesToAlias)) {\n+    if (!callMeetsBlockInliningRequirements(t, callNode, fnNode, namesToAlias, containsFunctions)) {\n         return CanInlineResult.NO;\n     }\n     if (callSiteType \u003d\u003d CallSiteType.DECOMPOSABLE_EXPRESSION) {\n         return CanInlineResult.AFTER_DECOMPOSITION;\n     } else {\n         return CanInlineResult.YES;\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "\nTweaks to function inlining:\n- an unnamed function expression containing a inner unnamed function\nexpression should not be disallow because the names are the same.\n- a caller that only contains the function definition to be inlined should\nnot consider the candidate to be a capturing function.\n- allow inlining a function containing an inner function that\nreferences arguments.\n- disallow inlining a function into a function containing eval.\n- when inlining a function containing a function declaration, rewrite\nit a var declarations and function expressions to avoid introducing\nfunction declaraions into contexts disallowed by ES5 strict.\n\nR\u003dacleung\nDELTA\u003d228  (182 added, 14 deleted, 32 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2929\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1338 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "8/8/11, 2:03 PM",
          "commitName": "0b05c26eefae171f9b4d0e1f8eba4249088207fa",
          "commitAuthor": "johnlenz@google.com",
          "commitDateOld": "7/28/11, 4:19 PM",
          "commitNameOld": "76abdf11394c0e7515ae63335676ea3657badb45",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 10.91,
          "commitsBetweenForRepo": 29,
          "commitsBetweenForFile": 1,
          "actualSource": "private CanInlineResult canInlineReferenceAsStatementBlock(NodeTraversal t, Node callNode, Node fnNode, Set\u003cString\u003e namesToAlias, boolean containsFunctions) {\n    CallSiteType callSiteType \u003d classifyCallSite(callNode);\n    if (callSiteType \u003d\u003d CallSiteType.UNSUPPORTED) {\n        return CanInlineResult.NO;\n    }\n    if (!allowDecomposition \u0026\u0026 callSiteType \u003d\u003d CallSiteType.DECOMPOSABLE_EXPRESSION) {\n        return CanInlineResult.NO;\n    }\n    if (!callMeetsBlockInliningRequirements(t, callNode, fnNode, namesToAlias, containsFunctions)) {\n        return CanInlineResult.NO;\n    }\n    if (callSiteType \u003d\u003d CallSiteType.DECOMPOSABLE_EXPRESSION) {\n        return CanInlineResult.AFTER_DECOMPOSITION;\n    } else {\n        return CanInlineResult.YES;\n    }\n}",
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java",
          "functionStartLine": 530,
          "functionName": "canInlineReferenceAsStatementBlock",
          "functionAnnotation": "",
          "functionDoc": "Determines whether a function can be inlined at a particular call site.\nThere are several criteria that the function and reference must hold in\norder for the functions to be inlined:\n- It must be a simple call, or assignment, or var initialization.\n\u003cpre\u003e\n   f();\n   a \u003d foo();\n   var a \u003d foo();\n\u003c/pre\u003e\n\n@param containsFunctions Whether the fnNode contains inner functions.\n",
          "diff": "@@ -1,17 +1,17 @@\n-private CanInlineResult canInlineReferenceAsStatementBlock(NodeTraversal t, Node callNode, Node fnNode, Set\u003cString\u003e namesToAlias) {\n+private CanInlineResult canInlineReferenceAsStatementBlock(NodeTraversal t, Node callNode, Node fnNode, Set\u003cString\u003e namesToAlias, boolean containsFunctions) {\n     CallSiteType callSiteType \u003d classifyCallSite(callNode);\n     if (callSiteType \u003d\u003d CallSiteType.UNSUPPORTED) {\n         return CanInlineResult.NO;\n     }\n     if (!allowDecomposition \u0026\u0026 callSiteType \u003d\u003d CallSiteType.DECOMPOSABLE_EXPRESSION) {\n         return CanInlineResult.NO;\n     }\n-    if (!callMeetsBlockInliningRequirements(t, callNode, fnNode, namesToAlias)) {\n+    if (!callMeetsBlockInliningRequirements(t, callNode, fnNode, namesToAlias, containsFunctions)) {\n         return CanInlineResult.NO;\n     }\n     if (callSiteType \u003d\u003d CallSiteType.DECOMPOSABLE_EXPRESSION) {\n         return CanInlineResult.AFTER_DECOMPOSITION;\n     } else {\n         return CanInlineResult.YES;\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Determines whether a function can be inlined at a particular call site.\nThere are several criteria that the function and reference must hold in\norder for the functions to be inlined:\n- It must be a simple call, or assignment, or var initialization.\n\u003cpre\u003e\n   f();\n   a \u003d foo();\n   var a \u003d foo();\n\u003c/pre\u003e\n",
            "newValue": "Determines whether a function can be inlined at a particular call site.\nThere are several criteria that the function and reference must hold in\norder for the functions to be inlined:\n- It must be a simple call, or assignment, or var initialization.\n\u003cpre\u003e\n   f();\n   a \u003d foo();\n   var a \u003d foo();\n\u003c/pre\u003e\n\n@param containsFunctions Whether the fnNode contains inner functions.\n"
          }
        }
      ]
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,17 @@\n+private CanInlineResult canInlineReferenceAsStatementBlock(NodeTraversal t, Node callNode, Node fnNode, Set\u003cString\u003e namesToAlias) {\n+    CallSiteType callSiteType \u003d classifyCallSite(callNode);\n+    if (callSiteType \u003d\u003d CallSiteType.UNSUPPORTED) {\n+        return CanInlineResult.NO;\n+    }\n+    if (!allowDecomposition \u0026\u0026 callSiteType \u003d\u003d CallSiteType.DECOMPOSABLE_EXPRESSION) {\n+        return CanInlineResult.NO;\n+    }\n+    if (!callMeetsBlockInliningRequirements(t, callNode, fnNode, namesToAlias)) {\n+        return CanInlineResult.NO;\n+    }\n+    if (callSiteType \u003d\u003d CallSiteType.DECOMPOSABLE_EXPRESSION) {\n+        return CanInlineResult.AFTER_DECOMPOSITION;\n+    } else {\n+        return CanInlineResult.YES;\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private CanInlineResult canInlineReferenceAsStatementBlock(NodeTraversal t, Node callNode, Node fnNode, Set\u003cString\u003e namesToAlias) {\n    CallSiteType callSiteType \u003d classifyCallSite(callNode);\n    if (callSiteType \u003d\u003d CallSiteType.UNSUPPORTED) {\n        return CanInlineResult.NO;\n    }\n    if (!allowDecomposition \u0026\u0026 callSiteType \u003d\u003d CallSiteType.DECOMPOSABLE_EXPRESSION) {\n        return CanInlineResult.NO;\n    }\n    if (!callMeetsBlockInliningRequirements(t, callNode, fnNode, namesToAlias)) {\n        return CanInlineResult.NO;\n    }\n    if (callSiteType \u003d\u003d CallSiteType.DECOMPOSABLE_EXPRESSION) {\n        return CanInlineResult.AFTER_DECOMPOSITION;\n    } else {\n        return CanInlineResult.YES;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/FunctionInjector.java",
      "functionStartLine": 529,
      "functionName": "canInlineReferenceAsStatementBlock",
      "functionAnnotation": "",
      "functionDoc": "Determines whether a function can be inlined at a particular call site.\nThere are several criteria that the function and reference must hold in\norder for the functions to be inlined:\n- It must be a simple call, or assignment, or var initialization.\n\u003cpre\u003e\n   f();\n   a \u003d foo();\n   var a \u003d foo();\n\u003c/pre\u003e\n"
    }
  }
}