{
  "origin": "codeshovel",
  "repositoryName": "Closure-115b",
  "repositoryPath": "/tmp/Closure-115b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "InlineFunctions.java",
  "functionName": "decomposeExpressions",
  "functionId": "decomposeExpressions",
  "sourceFilePath": "src/com/google/javascript/jscomp/InlineFunctions.java",
  "functionAnnotation": "",
  "functionDoc": "For any call-site that needs it, prepare the call-site for inlining\nby rewriting the containing expression.\n",
  "functionStartLine": 801,
  "functionEndLine": 811,
  "numCommitsSeen": 79,
  "timeTaken": 2806,
  "changeHistory": [
    "f0ff2971eca336e950929b3ee0d80155338bb1dd",
    "98a487531ce3d6555851398daead0471b5932774",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "f0ff2971eca336e950929b3ee0d80155338bb1dd": "Ymultichange(Yparameterchange,Ybodychange)",
    "98a487531ce3d6555851398daead0471b5932774": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f0ff2971eca336e950929b3ee0d80155338bb1dd": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "\nCruft removal: remove some unused locals and parameters.\n\nR\u003ddimvar\nDELTA\u003d336 (6 added, 108 deleted, 222 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d6092\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2447 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/8/13, 12:15 PM",
      "commitName": "f0ff2971eca336e950929b3ee0d80155338bb1dd",
      "commitAuthor": "johnlenz@google.com",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "\nCruft removal: remove some unused locals and parameters.\n\nR\u003ddimvar\nDELTA\u003d336 (6 added, 108 deleted, 222 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d6092\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2447 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/8/13, 12:15 PM",
          "commitName": "f0ff2971eca336e950929b3ee0d80155338bb1dd",
          "commitAuthor": "johnlenz@google.com",
          "commitDateOld": "6/18/12, 9:58 AM",
          "commitNameOld": "98a487531ce3d6555851398daead0471b5932774",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 204.14,
          "commitsBetweenForRepo": 363,
          "commitsBetweenForFile": 1,
          "actualSource": "private void decomposeExpressions() {\n    for (FunctionState fs : fns.values()) {\n        if (fs.canInline()) {\n            for (Reference ref : fs.getReferences()) {\n                if (ref.requiresDecomposition) {\n                    injector.maybePrepareCall(ref.callNode);\n                }\n            }\n        }\n    }\n}",
          "path": "src/com/google/javascript/jscomp/InlineFunctions.java",
          "functionStartLine": 803,
          "functionName": "decomposeExpressions",
          "functionAnnotation": "",
          "functionDoc": "For any call-site that needs it, prepare the call-site for inlining\nby rewriting the containing expression.\n",
          "diff": "@@ -1,12 +1,11 @@\n-private void decomposeExpressions(Set\u003cString\u003e fnNames) {\n-    ExpressionDecomposer decomposer \u003d new ExpressionDecomposer(compiler, compiler.getUniqueNameIdSupplier(), fnNames);\n+private void decomposeExpressions() {\n     for (FunctionState fs : fns.values()) {\n         if (fs.canInline()) {\n             for (Reference ref : fs.getReferences()) {\n                 if (ref.requiresDecomposition) {\n                     injector.maybePrepareCall(ref.callNode);\n                 }\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[fnNames-Set\u003cString\u003e]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nCruft removal: remove some unused locals and parameters.\n\nR\u003ddimvar\nDELTA\u003d336 (6 added, 108 deleted, 222 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d6092\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2447 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/8/13, 12:15 PM",
          "commitName": "f0ff2971eca336e950929b3ee0d80155338bb1dd",
          "commitAuthor": "johnlenz@google.com",
          "commitDateOld": "6/18/12, 9:58 AM",
          "commitNameOld": "98a487531ce3d6555851398daead0471b5932774",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 204.14,
          "commitsBetweenForRepo": 363,
          "commitsBetweenForFile": 1,
          "actualSource": "private void decomposeExpressions() {\n    for (FunctionState fs : fns.values()) {\n        if (fs.canInline()) {\n            for (Reference ref : fs.getReferences()) {\n                if (ref.requiresDecomposition) {\n                    injector.maybePrepareCall(ref.callNode);\n                }\n            }\n        }\n    }\n}",
          "path": "src/com/google/javascript/jscomp/InlineFunctions.java",
          "functionStartLine": 803,
          "functionName": "decomposeExpressions",
          "functionAnnotation": "",
          "functionDoc": "For any call-site that needs it, prepare the call-site for inlining\nby rewriting the containing expression.\n",
          "diff": "@@ -1,12 +1,11 @@\n-private void decomposeExpressions(Set\u003cString\u003e fnNames) {\n-    ExpressionDecomposer decomposer \u003d new ExpressionDecomposer(compiler, compiler.getUniqueNameIdSupplier(), fnNames);\n+private void decomposeExpressions() {\n     for (FunctionState fs : fns.values()) {\n         if (fs.canInline()) {\n             for (Reference ref : fs.getReferences()) {\n                 if (ref.requiresDecomposition) {\n                     injector.maybePrepareCall(ref.callNode);\n                 }\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "98a487531ce3d6555851398daead0471b5932774": {
      "type": "Ybodychange",
      "commitMessage": "\nFix incosistent internal state caused by when multiple functions are\ninlined into the same expression.\n\nR\u003dnicksantos\nDELTA\u003d300  (131 added, 51 deleted, 118 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5029\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2052 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/18/12, 9:58 AM",
      "commitName": "98a487531ce3d6555851398daead0471b5932774",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "5/18/12, 11:09 AM",
      "commitNameOld": "70a5626922ea7e8c98747e22b6986638ba38fadc",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 30.95,
      "commitsBetweenForRepo": 73,
      "commitsBetweenForFile": 1,
      "actualSource": "private void decomposeExpressions(Set\u003cString\u003e fnNames) {\n    ExpressionDecomposer decomposer \u003d new ExpressionDecomposer(compiler, compiler.getUniqueNameIdSupplier(), fnNames);\n    for (FunctionState fs : fns.values()) {\n        if (fs.canInline()) {\n            for (Reference ref : fs.getReferences()) {\n                if (ref.requiresDecomposition) {\n                    injector.maybePrepareCall(ref.callNode);\n                }\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/InlineFunctions.java",
      "functionStartLine": 803,
      "functionName": "decomposeExpressions",
      "functionAnnotation": "",
      "functionDoc": "For any call-site that needs it, prepare the call-site for inlining\nby rewriting the containing expression.\n",
      "diff": "@@ -1,12 +1,12 @@\n private void decomposeExpressions(Set\u003cString\u003e fnNames) {\n     ExpressionDecomposer decomposer \u003d new ExpressionDecomposer(compiler, compiler.getUniqueNameIdSupplier(), fnNames);\n     for (FunctionState fs : fns.values()) {\n         if (fs.canInline()) {\n             for (Reference ref : fs.getReferences()) {\n                 if (ref.requiresDecomposition) {\n-                    decomposer.maybeDecomposeExpression(ref.callNode);\n+                    injector.maybePrepareCall(ref.callNode);\n                 }\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,12 @@\n+private void decomposeExpressions(Set\u003cString\u003e fnNames) {\n+    ExpressionDecomposer decomposer \u003d new ExpressionDecomposer(compiler, compiler.getUniqueNameIdSupplier(), fnNames);\n+    for (FunctionState fs : fns.values()) {\n+        if (fs.canInline()) {\n+            for (Reference ref : fs.getReferences()) {\n+                if (ref.requiresDecomposition) {\n+                    decomposer.maybeDecomposeExpression(ref.callNode);\n+                }\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void decomposeExpressions(Set\u003cString\u003e fnNames) {\n    ExpressionDecomposer decomposer \u003d new ExpressionDecomposer(compiler, compiler.getUniqueNameIdSupplier(), fnNames);\n    for (FunctionState fs : fns.values()) {\n        if (fs.canInline()) {\n            for (Reference ref : fs.getReferences()) {\n                if (ref.requiresDecomposition) {\n                    decomposer.maybeDecomposeExpression(ref.callNode);\n                }\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/InlineFunctions.java",
      "functionStartLine": 686,
      "functionName": "decomposeExpressions",
      "functionAnnotation": "",
      "functionDoc": "For any call-site that needs it, prepare the call-site for inlining\nby rewriting the containing expression.\n"
    }
  }
}