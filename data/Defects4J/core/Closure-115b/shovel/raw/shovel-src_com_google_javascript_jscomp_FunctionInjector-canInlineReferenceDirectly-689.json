{
  "origin": "codeshovel",
  "repositoryName": "Closure-115b",
  "repositoryPath": "/tmp/Closure-115b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FunctionInjector.java",
  "functionName": "canInlineReferenceDirectly",
  "functionId": "canInlineReferenceDirectly___callNode-Node__fnNode-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/FunctionInjector.java",
  "functionAnnotation": "",
  "functionDoc": "Determines whether a function can be inlined at a particular call site.\nThere are several criteria that the function and reference must hold in\norder for the functions to be inlined:\n1) If a call\u0027s arguments have side effects,\nthe corresponding argument in the function must only be referenced once.\nFor instance, this will not be inlined:\n\u003cpre\u003e\n    function foo(a) { return a + a }\n    x \u003d foo(i++);\n\u003c/pre\u003e\n",
  "functionStartLine": 689,
  "functionEndLine": 761,
  "numCommitsSeen": 36,
  "timeTaken": 2298,
  "changeHistory": [
    "b80dfd3b0e5e4b490b7afb469320d18bac4520b4",
    "58fdad08ba7f8e24ac48a006f1e2989bda46b9a9",
    "39f629a8cfaab37da55288010640d7e516000b1f",
    "cc4ec1a70e6fa02bda751582c3902b3c19f85bbb",
    "dd5a73fdb8740d4753a2c08efaa9eb56932943a0",
    "51e81d0fd794bee6d8765513f853a312f176dcd7",
    "b783533aac33c06fc34ed4c3f284aa8411ea0c54",
    "6e3eb4f7619179ba6c23db2af7549ef02f588c35",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "b80dfd3b0e5e4b490b7afb469320d18bac4520b4": "Ybodychange",
    "58fdad08ba7f8e24ac48a006f1e2989bda46b9a9": "Ybodychange",
    "39f629a8cfaab37da55288010640d7e516000b1f": "Ybodychange",
    "cc4ec1a70e6fa02bda751582c3902b3c19f85bbb": "Ybodychange",
    "dd5a73fdb8740d4753a2c08efaa9eb56932943a0": "Ybodychange",
    "51e81d0fd794bee6d8765513f853a312f176dcd7": "Ybodychange",
    "b783533aac33c06fc34ed4c3f284aa8411ea0c54": "Ybodychange",
    "6e3eb4f7619179ba6c23db2af7549ef02f588c35": "Yformatchange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b80dfd3b0e5e4b490b7afb469320d18bac4520b4": {
      "type": "Ybodychange",
      "commitMessage": "Nerf direct function inlining when the function be inlined has side-effects and the call arguments can be effected.\nFixes issue 1101\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID\u003d53511956\n",
      "commitDate": "10/1/13, 4:59 PM",
      "commitName": "b80dfd3b0e5e4b490b7afb469320d18bac4520b4",
      "commitAuthor": "Ben Lickly",
      "commitDateOld": "3/20/13, 9:48 AM",
      "commitNameOld": "f423b0e9d4b2c0f3f74b3850dd5a35fd89ebc8a5",
      "commitAuthorOld": "Ben Lickly",
      "daysBetweenCommits": 195.3,
      "commitsBetweenForRepo": 315,
      "commitsBetweenForFile": 1,
      "actualSource": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n        return CanInlineResult.NO;\n    }\n    Node block \u003d fnNode.getLastChild();\n    boolean hasSideEffects \u003d false;\n    if (block.hasChildren()) {\n        Preconditions.checkState(block.hasOneChild());\n        Node stmt \u003d block.getFirstChild();\n        if (stmt.isReturn()) {\n            hasSideEffects \u003d NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n        }\n    }\n    Node cArg \u003d callNode.getFirstChild().getNext();\n    if (!callNode.getFirstChild().isName()) {\n        if (NodeUtil.isFunctionObjectCall(callNode)) {\n            if (cArg \u003d\u003d null || !cArg.isThis()) {\n                return CanInlineResult.NO;\n            }\n            cArg \u003d cArg.getNext();\n        } else {\n            Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n        }\n    }\n    Node fnParam \u003d NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (cArg !\u003d null || fnParam !\u003d null) {\n        if (fnParam !\u003d null) {\n            if (cArg !\u003d null) {\n                if (hasSideEffects \u0026\u0026 NodeUtil.canBeSideEffected(cArg)) {\n                    return CanInlineResult.NO;\n                }\n                if (NodeUtil.mayEffectMutableState(cArg, compiler) \u0026\u0026 NodeUtil.getNameReferenceCount(block, fnParam.getString()) \u003e 1) {\n                    return CanInlineResult.NO;\n                }\n            }\n            fnParam \u003d fnParam.getNext();\n        }\n        if (cArg !\u003d null) {\n            if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n                return CanInlineResult.NO;\n            }\n            cArg \u003d cArg.getNext();\n        }\n    }\n    return CanInlineResult.YES;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionInjector.java",
      "functionStartLine": 689,
      "functionName": "canInlineReferenceDirectly",
      "functionAnnotation": "",
      "functionDoc": "Determines whether a function can be inlined at a particular call site.\nThere are several criteria that the function and reference must hold in\norder for the functions to be inlined:\n1) If a call\u0027s arguments have side effects,\nthe corresponding argument in the function must only be referenced once.\nFor instance, this will not be inlined:\n\u003cpre\u003e\n    function foo(a) { return a + a }\n    x \u003d foo(i++);\n\u003c/pre\u003e\n",
      "diff": "@@ -1,35 +1,46 @@\n private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n     if (!isDirectCallNodeReplacementPossible(fnNode)) {\n         return CanInlineResult.NO;\n     }\n     Node block \u003d fnNode.getLastChild();\n+    boolean hasSideEffects \u003d false;\n+    if (block.hasChildren()) {\n+        Preconditions.checkState(block.hasOneChild());\n+        Node stmt \u003d block.getFirstChild();\n+        if (stmt.isReturn()) {\n+            hasSideEffects \u003d NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n+        }\n+    }\n     Node cArg \u003d callNode.getFirstChild().getNext();\n     if (!callNode.getFirstChild().isName()) {\n         if (NodeUtil.isFunctionObjectCall(callNode)) {\n             if (cArg \u003d\u003d null || !cArg.isThis()) {\n                 return CanInlineResult.NO;\n             }\n             cArg \u003d cArg.getNext();\n         } else {\n             Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n         }\n     }\n     Node fnParam \u003d NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n     while (cArg !\u003d null || fnParam !\u003d null) {\n         if (fnParam !\u003d null) {\n             if (cArg !\u003d null) {\n+                if (hasSideEffects \u0026\u0026 NodeUtil.canBeSideEffected(cArg)) {\n+                    return CanInlineResult.NO;\n+                }\n                 if (NodeUtil.mayEffectMutableState(cArg, compiler) \u0026\u0026 NodeUtil.getNameReferenceCount(block, fnParam.getString()) \u003e 1) {\n                     return CanInlineResult.NO;\n                 }\n             }\n             fnParam \u003d fnParam.getNext();\n         }\n         if (cArg !\u003d null) {\n             if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n                 return CanInlineResult.NO;\n             }\n             cArg \u003d cArg.getNext();\n         }\n     }\n     return CanInlineResult.YES;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "58fdad08ba7f8e24ac48a006f1e2989bda46b9a9": {
      "type": "Ybodychange",
      "commitMessage": "\nSome NodeUtil cleanup, narrow the public interface, remove some unused\nfunctions, and some other cleanup.\n\nR\u003dnicksantos\nDELTA\u003d130  (40 added, 50 deleted, 40 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5519\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2202 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/20/12, 11:55 AM",
      "commitName": "58fdad08ba7f8e24ac48a006f1e2989bda46b9a9",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "6/18/12, 9:58 AM",
      "commitNameOld": "98a487531ce3d6555851398daead0471b5932774",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 94.08,
      "commitsBetweenForRepo": 137,
      "commitsBetweenForFile": 1,
      "actualSource": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n        return CanInlineResult.NO;\n    }\n    Node block \u003d fnNode.getLastChild();\n    Node cArg \u003d callNode.getFirstChild().getNext();\n    if (!callNode.getFirstChild().isName()) {\n        if (NodeUtil.isFunctionObjectCall(callNode)) {\n            if (cArg \u003d\u003d null || !cArg.isThis()) {\n                return CanInlineResult.NO;\n            }\n            cArg \u003d cArg.getNext();\n        } else {\n            Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n        }\n    }\n    Node fnParam \u003d NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (cArg !\u003d null || fnParam !\u003d null) {\n        if (fnParam !\u003d null) {\n            if (cArg !\u003d null) {\n                if (NodeUtil.mayEffectMutableState(cArg, compiler) \u0026\u0026 NodeUtil.getNameReferenceCount(block, fnParam.getString()) \u003e 1) {\n                    return CanInlineResult.NO;\n                }\n            }\n            fnParam \u003d fnParam.getNext();\n        }\n        if (cArg !\u003d null) {\n            if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n                return CanInlineResult.NO;\n            }\n            cArg \u003d cArg.getNext();\n        }\n    }\n    return CanInlineResult.YES;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionInjector.java",
      "functionStartLine": 690,
      "functionName": "canInlineReferenceDirectly",
      "functionAnnotation": "",
      "functionDoc": "Determines whether a function can be inlined at a particular call site.\nThere are several criteria that the function and reference must hold in\norder for the functions to be inlined:\n1) If a call\u0027s arguments have side effects,\nthe corresponding argument in the function must only be referenced once.\nFor instance, this will not be inlined:\n\u003cpre\u003e\n    function foo(a) { return a + a }\n    x \u003d foo(i++);\n\u003c/pre\u003e\n",
      "diff": "@@ -1,35 +1,35 @@\n private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n     if (!isDirectCallNodeReplacementPossible(fnNode)) {\n         return CanInlineResult.NO;\n     }\n     Node block \u003d fnNode.getLastChild();\n     Node cArg \u003d callNode.getFirstChild().getNext();\n     if (!callNode.getFirstChild().isName()) {\n         if (NodeUtil.isFunctionObjectCall(callNode)) {\n             if (cArg \u003d\u003d null || !cArg.isThis()) {\n                 return CanInlineResult.NO;\n             }\n             cArg \u003d cArg.getNext();\n         } else {\n             Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n         }\n     }\n     Node fnParam \u003d NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n     while (cArg !\u003d null || fnParam !\u003d null) {\n         if (fnParam !\u003d null) {\n             if (cArg !\u003d null) {\n-                if (NodeUtil.mayEffectMutableState(cArg) \u0026\u0026 NodeUtil.getNameReferenceCount(block, fnParam.getString()) \u003e 1) {\n+                if (NodeUtil.mayEffectMutableState(cArg, compiler) \u0026\u0026 NodeUtil.getNameReferenceCount(block, fnParam.getString()) \u003e 1) {\n                     return CanInlineResult.NO;\n                 }\n             }\n             fnParam \u003d fnParam.getNext();\n         }\n         if (cArg !\u003d null) {\n-            if (NodeUtil.mayHaveSideEffects(cArg)) {\n+            if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n                 return CanInlineResult.NO;\n             }\n             cArg \u003d cArg.getNext();\n         }\n     }\n     return CanInlineResult.YES;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "39f629a8cfaab37da55288010640d7e516000b1f": {
      "type": "Ybodychange",
      "commitMessage": "\nReplace calls of the form \"Node.getType() !\u003d Token.XX\" with\n\"!Node.isXX()\" calls.\n\nR\u003dnicksantos\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3706\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1598 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/14/11, 6:13 PM",
      "commitName": "39f629a8cfaab37da55288010640d7e516000b1f",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/10/11, 8:36 AM",
      "commitNameOld": "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 4.4,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "actualSource": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n        return CanInlineResult.NO;\n    }\n    Node block \u003d fnNode.getLastChild();\n    Node cArg \u003d callNode.getFirstChild().getNext();\n    if (!callNode.getFirstChild().isName()) {\n        if (NodeUtil.isFunctionObjectCall(callNode)) {\n            if (cArg \u003d\u003d null || !cArg.isThis()) {\n                return CanInlineResult.NO;\n            }\n            cArg \u003d cArg.getNext();\n        } else {\n            Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n        }\n    }\n    Node fnParam \u003d NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (cArg !\u003d null || fnParam !\u003d null) {\n        if (fnParam !\u003d null) {\n            if (cArg !\u003d null) {\n                if (NodeUtil.mayEffectMutableState(cArg) \u0026\u0026 NodeUtil.getNameReferenceCount(block, fnParam.getString()) \u003e 1) {\n                    return CanInlineResult.NO;\n                }\n            }\n            fnParam \u003d fnParam.getNext();\n        }\n        if (cArg !\u003d null) {\n            if (NodeUtil.mayHaveSideEffects(cArg)) {\n                return CanInlineResult.NO;\n            }\n            cArg \u003d cArg.getNext();\n        }\n    }\n    return CanInlineResult.YES;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionInjector.java",
      "functionStartLine": 658,
      "functionName": "canInlineReferenceDirectly",
      "functionAnnotation": "",
      "functionDoc": "Determines whether a function can be inlined at a particular call site.\nThere are several criteria that the function and reference must hold in\norder for the functions to be inlined:\n1) If a call\u0027s arguments have side effects,\nthe corresponding argument in the function must only be referenced once.\nFor instance, this will not be inlined:\n\u003cpre\u003e\n    function foo(a) { return a + a }\n    x \u003d foo(i++);\n\u003c/pre\u003e\n",
      "diff": "@@ -1,35 +1,35 @@\n private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n     if (!isDirectCallNodeReplacementPossible(fnNode)) {\n         return CanInlineResult.NO;\n     }\n     Node block \u003d fnNode.getLastChild();\n     Node cArg \u003d callNode.getFirstChild().getNext();\n-    if (callNode.getFirstChild().getType() !\u003d Token.NAME) {\n+    if (!callNode.getFirstChild().isName()) {\n         if (NodeUtil.isFunctionObjectCall(callNode)) {\n-            if (cArg \u003d\u003d null || cArg.getType() !\u003d Token.THIS) {\n+            if (cArg \u003d\u003d null || !cArg.isThis()) {\n                 return CanInlineResult.NO;\n             }\n             cArg \u003d cArg.getNext();\n         } else {\n             Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n         }\n     }\n     Node fnParam \u003d NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n     while (cArg !\u003d null || fnParam !\u003d null) {\n         if (fnParam !\u003d null) {\n             if (cArg !\u003d null) {\n                 if (NodeUtil.mayEffectMutableState(cArg) \u0026\u0026 NodeUtil.getNameReferenceCount(block, fnParam.getString()) \u003e 1) {\n                     return CanInlineResult.NO;\n                 }\n             }\n             fnParam \u003d fnParam.getNext();\n         }\n         if (cArg !\u003d null) {\n             if (NodeUtil.mayHaveSideEffects(cArg)) {\n                 return CanInlineResult.NO;\n             }\n             cArg \u003d cArg.getNext();\n         }\n     }\n     return CanInlineResult.YES;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "cc4ec1a70e6fa02bda751582c3902b3c19f85bbb": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nFixed invalid \"this\" replacement within inner functions.\n\n*** Original change description ***\n\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nBreaks things\n\n*** Original change description ***\n\nWhen it is possible to make the ES5 Strict mode assumptions about a\nfunction\u0027s \"this\" it is easier to inline a function referencing \"this\".\nAdd \"CompilerOption.assumeStrictThis\" and take advantage of it during\nfunction inlining.\n\nR\u003dmoedinger\nDELTA\u003d263  (223 added, 4 deleted, 36 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2320\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1188 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/16/11, 5:29 PM",
      "commitName": "cc4ec1a70e6fa02bda751582c3902b3c19f85bbb",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "6/7/11, 10:32 AM",
      "commitNameOld": "dd5a73fdb8740d4753a2c08efaa9eb56932943a0",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 9.29,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "actualSource": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n        return CanInlineResult.NO;\n    }\n    Node block \u003d fnNode.getLastChild();\n    Node cArg \u003d callNode.getFirstChild().getNext();\n    if (callNode.getFirstChild().getType() !\u003d Token.NAME) {\n        if (NodeUtil.isFunctionObjectCall(callNode)) {\n            if (cArg \u003d\u003d null || cArg.getType() !\u003d Token.THIS) {\n                return CanInlineResult.NO;\n            }\n            cArg \u003d cArg.getNext();\n        } else {\n            Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n        }\n    }\n    Node fnParam \u003d NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (cArg !\u003d null || fnParam !\u003d null) {\n        if (fnParam !\u003d null) {\n            if (cArg !\u003d null) {\n                if (NodeUtil.mayEffectMutableState(cArg) \u0026\u0026 NodeUtil.getNameReferenceCount(block, fnParam.getString()) \u003e 1) {\n                    return CanInlineResult.NO;\n                }\n            }\n            fnParam \u003d fnParam.getNext();\n        }\n        if (cArg !\u003d null) {\n            if (NodeUtil.mayHaveSideEffects(cArg)) {\n                return CanInlineResult.NO;\n            }\n            cArg \u003d cArg.getNext();\n        }\n    }\n    return CanInlineResult.YES;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionInjector.java",
      "functionStartLine": 622,
      "functionName": "canInlineReferenceDirectly",
      "functionAnnotation": "",
      "functionDoc": "Determines whether a function can be inlined at a particular call site.\nThere are several criteria that the function and reference must hold in\norder for the functions to be inlined:\n1) If a call\u0027s arguments have side effects,\nthe corresponding argument in the function must only be referenced once.\nFor instance, this will not be inlined:\n\u003cpre\u003e\n    function foo(a) { return a + a }\n    x \u003d foo(i++);\n\u003c/pre\u003e\n",
      "diff": "@@ -1,34 +1,35 @@\n private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n     if (!isDirectCallNodeReplacementPossible(fnNode)) {\n         return CanInlineResult.NO;\n     }\n     Node block \u003d fnNode.getLastChild();\n     Node cArg \u003d callNode.getFirstChild().getNext();\n     if (callNode.getFirstChild().getType() !\u003d Token.NAME) {\n         if (NodeUtil.isFunctionObjectCall(callNode)) {\n-            Preconditions.checkNotNull(cArg);\n-            Preconditions.checkState(cArg.getType() \u003d\u003d Token.THIS);\n+            if (cArg \u003d\u003d null || cArg.getType() !\u003d Token.THIS) {\n+                return CanInlineResult.NO;\n+            }\n             cArg \u003d cArg.getNext();\n         } else {\n             Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n         }\n     }\n     Node fnParam \u003d NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n     while (cArg !\u003d null || fnParam !\u003d null) {\n         if (fnParam !\u003d null) {\n             if (cArg !\u003d null) {\n                 if (NodeUtil.mayEffectMutableState(cArg) \u0026\u0026 NodeUtil.getNameReferenceCount(block, fnParam.getString()) \u003e 1) {\n                     return CanInlineResult.NO;\n                 }\n             }\n             fnParam \u003d fnParam.getNext();\n         }\n         if (cArg !\u003d null) {\n             if (NodeUtil.mayHaveSideEffects(cArg)) {\n                 return CanInlineResult.NO;\n             }\n             cArg \u003d cArg.getNext();\n         }\n     }\n     return CanInlineResult.YES;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "dd5a73fdb8740d4753a2c08efaa9eb56932943a0": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nBreaks gmail\n\n*** Original change description ***\n\nWhen it is possible to make the ES5 Strict mode assumptions about a\nfunction\u0027s \"this\" it is easier to inline a function referencing \"this\".\nAdd \"CompilerOption.assumeStrictThis\" and take advantage of it during\nfunction inlining.\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2200\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1165 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/7/11, 10:32 AM",
      "commitName": "dd5a73fdb8740d4753a2c08efaa9eb56932943a0",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "6/7/11, 9:49 AM",
      "commitNameOld": "51e81d0fd794bee6d8765513f853a312f176dcd7",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n        return CanInlineResult.NO;\n    }\n    Node block \u003d fnNode.getLastChild();\n    Node cArg \u003d callNode.getFirstChild().getNext();\n    if (callNode.getFirstChild().getType() !\u003d Token.NAME) {\n        if (NodeUtil.isFunctionObjectCall(callNode)) {\n            Preconditions.checkNotNull(cArg);\n            Preconditions.checkState(cArg.getType() \u003d\u003d Token.THIS);\n            cArg \u003d cArg.getNext();\n        } else {\n            Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n        }\n    }\n    Node fnParam \u003d NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (cArg !\u003d null || fnParam !\u003d null) {\n        if (fnParam !\u003d null) {\n            if (cArg !\u003d null) {\n                if (NodeUtil.mayEffectMutableState(cArg) \u0026\u0026 NodeUtil.getNameReferenceCount(block, fnParam.getString()) \u003e 1) {\n                    return CanInlineResult.NO;\n                }\n            }\n            fnParam \u003d fnParam.getNext();\n        }\n        if (cArg !\u003d null) {\n            if (NodeUtil.mayHaveSideEffects(cArg)) {\n                return CanInlineResult.NO;\n            }\n            cArg \u003d cArg.getNext();\n        }\n    }\n    return CanInlineResult.YES;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionInjector.java",
      "functionStartLine": 617,
      "functionName": "canInlineReferenceDirectly",
      "functionAnnotation": "",
      "functionDoc": "Determines whether a function can be inlined at a particular call site.\nThere are several criteria that the function and reference must hold in\norder for the functions to be inlined:\n1) If a call\u0027s arguments have side effects,\nthe corresponding argument in the function must only be referenced once.\nFor instance, this will not be inlined:\n\u003cpre\u003e\n    function foo(a) { return a + a }\n    x \u003d foo(i++);\n\u003c/pre\u003e\n",
      "diff": "@@ -1,35 +1,34 @@\n private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n     if (!isDirectCallNodeReplacementPossible(fnNode)) {\n         return CanInlineResult.NO;\n     }\n     Node block \u003d fnNode.getLastChild();\n     Node cArg \u003d callNode.getFirstChild().getNext();\n     if (callNode.getFirstChild().getType() !\u003d Token.NAME) {\n         if (NodeUtil.isFunctionObjectCall(callNode)) {\n-            if (cArg \u003d\u003d null || cArg.getType() !\u003d Token.THIS) {\n-                return CanInlineResult.NO;\n-            }\n+            Preconditions.checkNotNull(cArg);\n+            Preconditions.checkState(cArg.getType() \u003d\u003d Token.THIS);\n             cArg \u003d cArg.getNext();\n         } else {\n             Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n         }\n     }\n     Node fnParam \u003d NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n     while (cArg !\u003d null || fnParam !\u003d null) {\n         if (fnParam !\u003d null) {\n             if (cArg !\u003d null) {\n                 if (NodeUtil.mayEffectMutableState(cArg) \u0026\u0026 NodeUtil.getNameReferenceCount(block, fnParam.getString()) \u003e 1) {\n                     return CanInlineResult.NO;\n                 }\n             }\n             fnParam \u003d fnParam.getNext();\n         }\n         if (cArg !\u003d null) {\n             if (NodeUtil.mayHaveSideEffects(cArg)) {\n                 return CanInlineResult.NO;\n             }\n             cArg \u003d cArg.getNext();\n         }\n     }\n     return CanInlineResult.YES;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "51e81d0fd794bee6d8765513f853a312f176dcd7": {
      "type": "Ybodychange",
      "commitMessage": "\nWhen it is possible to make the ES5 Strict mode assumptions about a\nfunction\u0027s \"this\" it is easier to inline a function referencing \"this\".\nAdd \"CompilerOption.assumeStrictThis\" and take advantage of it during\nfunction inlining.\n\nR\u003dacleung\nDELTA\u003d243  (204 added, 4 deleted, 35 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2199\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1164 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/7/11, 9:49 AM",
      "commitName": "51e81d0fd794bee6d8765513f853a312f176dcd7",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "5/16/11, 3:01 PM",
      "commitNameOld": "828828472848b88b6d3b1e847fa8be5dde78e2da",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 21.78,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "actualSource": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n        return CanInlineResult.NO;\n    }\n    Node block \u003d fnNode.getLastChild();\n    Node cArg \u003d callNode.getFirstChild().getNext();\n    if (callNode.getFirstChild().getType() !\u003d Token.NAME) {\n        if (NodeUtil.isFunctionObjectCall(callNode)) {\n            if (cArg \u003d\u003d null || cArg.getType() !\u003d Token.THIS) {\n                return CanInlineResult.NO;\n            }\n            cArg \u003d cArg.getNext();\n        } else {\n            Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n        }\n    }\n    Node fnParam \u003d NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (cArg !\u003d null || fnParam !\u003d null) {\n        if (fnParam !\u003d null) {\n            if (cArg !\u003d null) {\n                if (NodeUtil.mayEffectMutableState(cArg) \u0026\u0026 NodeUtil.getNameReferenceCount(block, fnParam.getString()) \u003e 1) {\n                    return CanInlineResult.NO;\n                }\n            }\n            fnParam \u003d fnParam.getNext();\n        }\n        if (cArg !\u003d null) {\n            if (NodeUtil.mayHaveSideEffects(cArg)) {\n                return CanInlineResult.NO;\n            }\n            cArg \u003d cArg.getNext();\n        }\n    }\n    return CanInlineResult.YES;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionInjector.java",
      "functionStartLine": 622,
      "functionName": "canInlineReferenceDirectly",
      "functionAnnotation": "",
      "functionDoc": "Determines whether a function can be inlined at a particular call site.\nThere are several criteria that the function and reference must hold in\norder for the functions to be inlined:\n1) If a call\u0027s arguments have side effects,\nthe corresponding argument in the function must only be referenced once.\nFor instance, this will not be inlined:\n\u003cpre\u003e\n    function foo(a) { return a + a }\n    x \u003d foo(i++);\n\u003c/pre\u003e\n",
      "diff": "@@ -1,34 +1,35 @@\n private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n     if (!isDirectCallNodeReplacementPossible(fnNode)) {\n         return CanInlineResult.NO;\n     }\n     Node block \u003d fnNode.getLastChild();\n     Node cArg \u003d callNode.getFirstChild().getNext();\n     if (callNode.getFirstChild().getType() !\u003d Token.NAME) {\n         if (NodeUtil.isFunctionObjectCall(callNode)) {\n-            Preconditions.checkNotNull(cArg);\n-            Preconditions.checkState(cArg.getType() \u003d\u003d Token.THIS);\n+            if (cArg \u003d\u003d null || cArg.getType() !\u003d Token.THIS) {\n+                return CanInlineResult.NO;\n+            }\n             cArg \u003d cArg.getNext();\n         } else {\n             Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n         }\n     }\n     Node fnParam \u003d NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n     while (cArg !\u003d null || fnParam !\u003d null) {\n         if (fnParam !\u003d null) {\n             if (cArg !\u003d null) {\n                 if (NodeUtil.mayEffectMutableState(cArg) \u0026\u0026 NodeUtil.getNameReferenceCount(block, fnParam.getString()) \u003e 1) {\n                     return CanInlineResult.NO;\n                 }\n             }\n             fnParam \u003d fnParam.getNext();\n         }\n         if (cArg !\u003d null) {\n             if (NodeUtil.mayHaveSideEffects(cArg)) {\n                 return CanInlineResult.NO;\n             }\n             cArg \u003d cArg.getNext();\n         }\n     }\n     return CanInlineResult.YES;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b783533aac33c06fc34ed4c3f284aa8411ea0c54": {
      "type": "Ybodychange",
      "commitMessage": "\nRename NodeUtil.getFunctionInfo to NodeUtil.getFunctionJSDocInfo\nRename NodeUtil.getFnParameters to NodeUtil.getFunctionParameters.\nNOTE: this is a pure Eclipse refactor:rename CL\n\nR\u003djohnlenz\nDELTA\u003d18  (1 added, 0 deleted, 17 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1913\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1101 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/16/11, 8:14 AM",
      "commitName": "b783533aac33c06fc34ed4c3f284aa8411ea0c54",
      "commitAuthor": "tylerg@google.com",
      "commitDateOld": "4/12/11, 12:15 PM",
      "commitNameOld": "f322be0e576d5e2114cb59c0a6537197997b9c59",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 33.83,
      "commitsBetweenForRepo": 98,
      "commitsBetweenForFile": 1,
      "actualSource": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n        return CanInlineResult.NO;\n    }\n    Node block \u003d fnNode.getLastChild();\n    Node cArg \u003d callNode.getFirstChild().getNext();\n    if (callNode.getFirstChild().getType() !\u003d Token.NAME) {\n        if (NodeUtil.isFunctionObjectCall(callNode)) {\n            Preconditions.checkNotNull(cArg);\n            Preconditions.checkState(cArg.getType() \u003d\u003d Token.THIS);\n            cArg \u003d cArg.getNext();\n        } else {\n            Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n        }\n    }\n    Node fnParam \u003d NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (cArg !\u003d null || fnParam !\u003d null) {\n        if (fnParam !\u003d null) {\n            if (cArg !\u003d null) {\n                if (NodeUtil.mayEffectMutableState(cArg) \u0026\u0026 NodeUtil.getNameReferenceCount(block, fnParam.getString()) \u003e 1) {\n                    return CanInlineResult.NO;\n                }\n            }\n            fnParam \u003d fnParam.getNext();\n        }\n        if (cArg !\u003d null) {\n            if (NodeUtil.mayHaveSideEffects(cArg)) {\n                return CanInlineResult.NO;\n            }\n            cArg \u003d cArg.getNext();\n        }\n    }\n    return CanInlineResult.YES;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionInjector.java",
      "functionStartLine": 617,
      "functionName": "canInlineReferenceDirectly",
      "functionAnnotation": "",
      "functionDoc": "Determines whether a function can be inlined at a particular call site.\nThere are several criteria that the function and reference must hold in\norder for the functions to be inlined:\n1) If a call\u0027s arguments have side effects,\nthe corresponding argument in the function must only be referenced once.\nFor instance, this will not be inlined:\n\u003cpre\u003e\n    function foo(a) { return a + a }\n    x \u003d foo(i++);\n\u003c/pre\u003e\n",
      "diff": "@@ -1,34 +1,34 @@\n private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n     if (!isDirectCallNodeReplacementPossible(fnNode)) {\n         return CanInlineResult.NO;\n     }\n     Node block \u003d fnNode.getLastChild();\n     Node cArg \u003d callNode.getFirstChild().getNext();\n     if (callNode.getFirstChild().getType() !\u003d Token.NAME) {\n         if (NodeUtil.isFunctionObjectCall(callNode)) {\n             Preconditions.checkNotNull(cArg);\n             Preconditions.checkState(cArg.getType() \u003d\u003d Token.THIS);\n             cArg \u003d cArg.getNext();\n         } else {\n             Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n         }\n     }\n-    Node fnParam \u003d NodeUtil.getFnParameters(fnNode).getFirstChild();\n+    Node fnParam \u003d NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n     while (cArg !\u003d null || fnParam !\u003d null) {\n         if (fnParam !\u003d null) {\n             if (cArg !\u003d null) {\n                 if (NodeUtil.mayEffectMutableState(cArg) \u0026\u0026 NodeUtil.getNameReferenceCount(block, fnParam.getString()) \u003e 1) {\n                     return CanInlineResult.NO;\n                 }\n             }\n             fnParam \u003d fnParam.getNext();\n         }\n         if (cArg !\u003d null) {\n             if (NodeUtil.mayHaveSideEffects(cArg)) {\n                 return CanInlineResult.NO;\n             }\n             cArg \u003d cArg.getNext();\n         }\n     }\n     return CanInlineResult.YES;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6e3eb4f7619179ba6c23db2af7549ef02f588c35": {
      "type": "Yformatchange",
      "commitMessage": "\nChange on 2010/04/15 by john\n\n        Maintain source information in OverloadedMethodResolution.\n\n        R\u003dandrew\n        DELTA\u003d8  (5 added, 1 deleted, 2 changed)\n\nChange on 2010/04/15 by john\n\n        Maintain source information during function inlining.\n\n        R\u003dalan\n        DELTA\u003d104  (73 added, 2 deleted, 29 changed)\n\nChange on 2010/04/15 by john\n\n        Improve LineNumberCheck error message.\n\n        R\u003dnick\n        DELTA\u003d4  (3 added, 0 deleted, 1 changed)\n\nChange on 2010/04/15 by john\n\n        Maintain source information in smart name removal.\n        Enabled Normalize during tests, simplified VAR handling.\n\n        R\u003dantonio\n        DELTA\u003d71  (12 added, 48 deleted, 11 changed)\n\nChange on 2010/04/15 by john\n\n        Maintain source information in InlineGetters.\n\n        R\u003dalan\n        DELTA\u003d8  (7 added, 0 deleted, 1 changed)\n\nChange on 2010/04/15 by alan\n\n        Stops the post data from printing multiple times.\n\n        R\u003djohn\n        DELTA\u003d4  (1 added, 0 deleted, 3 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dhuwaud\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@188 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/16/10, 10:20 AM",
      "commitName": "6e3eb4f7619179ba6c23db2af7549ef02f588c35",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "3/11/10, 9:31 PM",
      "commitNameOld": "7bfdbd9164601af44d17edd51be829fde2cc51aa",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 35.49,
      "commitsBetweenForRepo": 51,
      "commitsBetweenForFile": 1,
      "actualSource": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n        return CanInlineResult.NO;\n    }\n    Node block \u003d fnNode.getLastChild();\n    Node cArg \u003d callNode.getFirstChild().getNext();\n    if (callNode.getFirstChild().getType() !\u003d Token.NAME) {\n        if (NodeUtil.isFunctionObjectCall(callNode)) {\n            Preconditions.checkNotNull(cArg);\n            Preconditions.checkState(cArg.getType() \u003d\u003d Token.THIS);\n            cArg \u003d cArg.getNext();\n        } else {\n            Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n        }\n    }\n    Node fnParam \u003d NodeUtil.getFnParameters(fnNode).getFirstChild();\n    while (cArg !\u003d null || fnParam !\u003d null) {\n        if (fnParam !\u003d null) {\n            if (cArg !\u003d null) {\n                if (NodeUtil.mayEffectMutableState(cArg) \u0026\u0026 NodeUtil.getNameReferenceCount(block, fnParam.getString()) \u003e 1) {\n                    return CanInlineResult.NO;\n                }\n            }\n            fnParam \u003d fnParam.getNext();\n        }\n        if (cArg !\u003d null) {\n            if (NodeUtil.mayHaveSideEffects(cArg)) {\n                return CanInlineResult.NO;\n            }\n            cArg \u003d cArg.getNext();\n        }\n    }\n    return CanInlineResult.YES;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionInjector.java",
      "functionStartLine": 618,
      "functionName": "canInlineReferenceDirectly",
      "functionAnnotation": "",
      "functionDoc": "Determines whether a function can be inlined at a particular call site.\nThere are several criteria that the function and reference must hold in\norder for the functions to be inlined:\n1) If a call\u0027s arguments have side effects,\nthe corresponding argument in the function must only be referenced once.\nFor instance, this will not be inlined:\n\u003cpre\u003e\n    function foo(a) { return a + a }\n    x \u003d foo(i++);\n\u003c/pre\u003e\n",
      "diff": "",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,34 @@\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n+    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n+        return CanInlineResult.NO;\n+    }\n+    Node block \u003d fnNode.getLastChild();\n+    Node cArg \u003d callNode.getFirstChild().getNext();\n+    if (callNode.getFirstChild().getType() !\u003d Token.NAME) {\n+        if (NodeUtil.isFunctionObjectCall(callNode)) {\n+            Preconditions.checkNotNull(cArg);\n+            Preconditions.checkState(cArg.getType() \u003d\u003d Token.THIS);\n+            cArg \u003d cArg.getNext();\n+        } else {\n+            Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n+        }\n+    }\n+    Node fnParam \u003d NodeUtil.getFnParameters(fnNode).getFirstChild();\n+    while (cArg !\u003d null || fnParam !\u003d null) {\n+        if (fnParam !\u003d null) {\n+            if (cArg !\u003d null) {\n+                if (NodeUtil.mayEffectMutableState(cArg) \u0026\u0026 NodeUtil.getNameReferenceCount(block, fnParam.getString()) \u003e 1) {\n+                    return CanInlineResult.NO;\n+                }\n+            }\n+            fnParam \u003d fnParam.getNext();\n+        }\n+        if (cArg !\u003d null) {\n+            if (NodeUtil.mayHaveSideEffects(cArg)) {\n+                return CanInlineResult.NO;\n+            }\n+            cArg \u003d cArg.getNext();\n+        }\n+    }\n+    return CanInlineResult.YES;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n        return CanInlineResult.NO;\n    }\n    Node block \u003d fnNode.getLastChild();\n    Node cArg \u003d callNode.getFirstChild().getNext();\n    if (callNode.getFirstChild().getType() !\u003d Token.NAME) {\n        if (NodeUtil.isFunctionObjectCall(callNode)) {\n            Preconditions.checkNotNull(cArg);\n            Preconditions.checkState(cArg.getType() \u003d\u003d Token.THIS);\n            cArg \u003d cArg.getNext();\n        } else {\n            Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n        }\n    }\n    Node fnParam \u003d NodeUtil.getFnParameters(fnNode).getFirstChild();\n    while (cArg !\u003d null || fnParam !\u003d null) {\n        if (fnParam !\u003d null) {\n            if (cArg !\u003d null) {\n                if (NodeUtil.mayEffectMutableState(cArg) \u0026\u0026 NodeUtil.getNameReferenceCount(block, fnParam.getString()) \u003e 1) {\n                    return CanInlineResult.NO;\n                }\n            }\n            fnParam \u003d fnParam.getNext();\n        }\n        if (cArg !\u003d null) {\n            if (NodeUtil.mayHaveSideEffects(cArg)) {\n                return CanInlineResult.NO;\n            }\n            cArg \u003d cArg.getNext();\n        }\n    }\n    return CanInlineResult.YES;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionInjector.java",
      "functionStartLine": 618,
      "functionName": "canInlineReferenceDirectly",
      "functionAnnotation": "",
      "functionDoc": "Determines whether a function can be inlined at a particular call site.\nThere are several criteria that the function and reference must hold in\norder for the functions to be inlined:\n1) If a call\u0027s arguments have side effects,\nthe corresponding argument in the function must only be referenced once.\nFor instance, this will not be inlined:\n\u003cpre\u003e\n    function foo(a) { return a + a }\n    x \u003d foo(i++);\n\u003c/pre\u003e\n"
    }
  }
}