{
  "origin": "codeshovel",
  "repositoryName": "Closure-115b",
  "repositoryPath": "/tmp/Closure-115b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ExpressionDecomposer.java",
  "functionName": "maybeExposeExpression",
  "functionId": "maybeExposeExpression___expression-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/ExpressionDecomposer.java",
  "functionAnnotation": "",
  "functionDoc": "If required, rewrite the statement containing the expression.\n\n@param expression The expression to be exposed.\n@see #canExposeExpression\n",
  "functionStartLine": 78,
  "functionEndLine": 90,
  "numCommitsSeen": 47,
  "timeTaken": 1659,
  "changeHistory": [
    "98a487531ce3d6555851398daead0471b5932774",
    "725ecc108d6c4e02730ed79f471437f240fbc107",
    "3ce4716848eb71b6e78a4545a2cc0c27e74a29b3",
    "78995bf9e88599055a8c4165d89c09dc92a44b30",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "98a487531ce3d6555851398daead0471b5932774": "Yrename",
    "725ecc108d6c4e02730ed79f471437f240fbc107": "Ybodychange",
    "3ce4716848eb71b6e78a4545a2cc0c27e74a29b3": "Yformatchange",
    "78995bf9e88599055a8c4165d89c09dc92a44b30": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "98a487531ce3d6555851398daead0471b5932774": {
      "type": "Yrename",
      "commitMessage": "\nFix incosistent internal state caused by when multiple functions are\ninlined into the same expression.\n\nR\u003dnicksantos\nDELTA\u003d300  (131 added, 51 deleted, 118 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5029\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2052 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/18/12, 9:58 AM",
      "commitName": "98a487531ce3d6555851398daead0471b5932774",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "5/18/12, 11:09 AM",
      "commitNameOld": "70a5626922ea7e8c98747e22b6986638ba38fadc",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 30.95,
      "commitsBetweenForRepo": 73,
      "commitsBetweenForFile": 1,
      "actualSource": "void maybeExposeExpression(Node expression) {\n    int i \u003d 0;\n    while (DecompositionType.DECOMPOSABLE \u003d\u003d canExposeExpression(expression)) {\n        exposeExpression(expression);\n        i++;\n        if (i \u003e MAX_INTERATIONS) {\n            throw new IllegalStateException(\"DecomposeExpression depth exceeded on :\\n\" + expression.toStringTree());\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java",
      "functionStartLine": 78,
      "functionName": "maybeExposeExpression",
      "functionAnnotation": "",
      "functionDoc": "If required, rewrite the statement containing the expression.\n\n@param expression The expression to be exposed.\n@see #canExposeExpression\n",
      "diff": "@@ -1,10 +1,10 @@\n-void maybeDecomposeExpression(Node expression) {\n+void maybeExposeExpression(Node expression) {\n     int i \u003d 0;\n     while (DecompositionType.DECOMPOSABLE \u003d\u003d canExposeExpression(expression)) {\n         exposeExpression(expression);\n         i++;\n         if (i \u003e MAX_INTERATIONS) {\n             throw new IllegalStateException(\"DecomposeExpression depth exceeded on :\\n\" + expression.toStringTree());\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "maybeDecomposeExpression",
        "newValue": "maybeExposeExpression"
      }
    },
    "725ecc108d6c4e02730ed79f471437f240fbc107": {
      "type": "Ybodychange",
      "commitMessage": "\nadd a test for inlining into an object literal.\nalso, fix an infinite loop guard.\n\nR\u003djohnlenz\nDELTA\u003d15  (13 added, 0 deleted, 2 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d338511\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@489 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/14/10, 8:43 AM",
      "commitName": "725ecc108d6c4e02730ed79f471437f240fbc107",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "6/16/10, 12:33 PM",
      "commitNameOld": "e33e925eea3a8e4de958864e531e1adc4da62e18",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 119.84,
      "commitsBetweenForRepo": 237,
      "commitsBetweenForFile": 1,
      "actualSource": "void maybeDecomposeExpression(Node expression) {\n    int i \u003d 0;\n    while (DecompositionType.DECOMPOSABLE \u003d\u003d canExposeExpression(expression)) {\n        exposeExpression(expression);\n        i++;\n        if (i \u003e MAX_INTERATIONS) {\n            throw new IllegalStateException(\"DecomposeExpression depth exceeded on :\\n\" + expression.toStringTree());\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java",
      "functionStartLine": 77,
      "functionName": "maybeDecomposeExpression",
      "functionAnnotation": "",
      "functionDoc": "If required, rewrite the statement containing the expression.\n\n@param expression The expression to be exposed.\n@see #canExposeExpression\n",
      "diff": "@@ -1,9 +1,10 @@\n void maybeDecomposeExpression(Node expression) {\n     int i \u003d 0;\n     while (DecompositionType.DECOMPOSABLE \u003d\u003d canExposeExpression(expression)) {\n         exposeExpression(expression);\n+        i++;\n         if (i \u003e MAX_INTERATIONS) {\n             throw new IllegalStateException(\"DecomposeExpression depth exceeded on :\\n\" + expression.toStringTree());\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3ce4716848eb71b6e78a4545a2cc0c27e74a29b3": {
      "type": "Yformatchange",
      "commitMessage": "Tweak to allow chained initialization:\nnew Node(Token.EXPR_RESULT, a).copyInformationFrom(a); (John)\nR\u003dalan\nDELTA\u003d10  (6 added, 0 deleted, 4 changed)\n\n\nTeach PureFunctionnIdentifier about (f || g)() calls (antonio)\nFixes issue 116\nR\u003djohn\nDELTA\u003d105  (84 added, 0 deleted, 21 changed)\n\nFix decomposition issue \nAnonymous function declaration can not be side-effected and are\nside-effect free. (John)\nR\u003dalan\nDELTA\u003d115  (101 added, 8 deleted, 6 changed)\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@154 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/25/10, 8:58 AM",
      "commitName": "3ce4716848eb71b6e78a4545a2cc0c27e74a29b3",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "3/11/10, 9:31 PM",
      "commitNameOld": "7bfdbd9164601af44d17edd51be829fde2cc51aa",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 13.44,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "actualSource": "void maybeDecomposeExpression(Node expression) {\n    int i \u003d 0;\n    while (DecompositionType.DECOMPOSABLE \u003d\u003d canExposeExpression(expression)) {\n        exposeExpression(expression);\n        if (i \u003e MAX_INTERATIONS) {\n            throw new IllegalStateException(\"DecomposeExpression depth exceeded on :\\n\" + expression.toStringTree());\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java",
      "functionStartLine": 76,
      "functionName": "maybeDecomposeExpression",
      "functionAnnotation": "",
      "functionDoc": "If required, rewrite the statement containing the expression.\n\n@param expression The expression to be exposed.\n@see #canExposeExpression\n",
      "diff": "",
      "extendedDetails": {}
    },
    "78995bf9e88599055a8c4165d89c09dc92a44b30": {
      "type": "Ybodychange",
      "commitMessage": "Fix synthesis of vars in DEFAULT mode.\nBetter variable inlining\nBetter function inlining\nAssorted bug fixes\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@6 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/10/09, 11:16 AM",
      "commitName": "78995bf9e88599055a8c4165d89c09dc92a44b30",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/3/09, 3:51 PM",
      "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 6.81,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "void maybeDecomposeExpression(Node expression) {\n    int i \u003d 0;\n    while (DecompositionType.DECOMPOSABLE \u003d\u003d canExposeExpression(expression)) {\n        exposeExpression(expression);\n        if (i \u003e MAX_INTERATIONS) {\n            throw new IllegalStateException(\"DecomposeExpression depth exceeded on :\\n\" + expression.toStringTree());\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java",
      "functionStartLine": 75,
      "functionName": "maybeDecomposeExpression",
      "functionAnnotation": "",
      "functionDoc": "If required, rewrite the statement containing the expression.\n\n@param expression The expression to be exposed.\n@see #canExposeExpression\n",
      "diff": "@@ -1,5 +1,9 @@\n void maybeDecomposeExpression(Node expression) {\n+    int i \u003d 0;\n     while (DecompositionType.DECOMPOSABLE \u003d\u003d canExposeExpression(expression)) {\n         exposeExpression(expression);\n+        if (i \u003e MAX_INTERATIONS) {\n+            throw new IllegalStateException(\"DecomposeExpression depth exceeded on :\\n\" + expression.toStringTree());\n+        }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,5 @@\n+void maybeDecomposeExpression(Node expression) {\n+    while (DecompositionType.DECOMPOSABLE \u003d\u003d canExposeExpression(expression)) {\n+        exposeExpression(expression);\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "void maybeDecomposeExpression(Node expression) {\n    while (DecompositionType.DECOMPOSABLE \u003d\u003d canExposeExpression(expression)) {\n        exposeExpression(expression);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java",
      "functionStartLine": 75,
      "functionName": "maybeDecomposeExpression",
      "functionAnnotation": "",
      "functionDoc": "If required, rewrite the statement containing the expression.\n\n@param expression The expression to be exposed.\n@see #canExposeExpression\n"
    }
  }
}