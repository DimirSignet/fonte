{
  "origin": "codeshovel",
  "repositoryName": "Closure-115b",
  "repositoryPath": "/tmp/Closure-115b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NodeUtil.java",
  "functionName": "canBeSideEffected",
  "functionId": "canBeSideEffected___n-Node__knownConstants-Set__String__",
  "sourceFilePath": "src/com/google/javascript/jscomp/NodeUtil.java",
  "functionAnnotation": "",
  "functionDoc": "\n@param knownConstants A set of names known to be constant value at\nnode \u0027n\u0027 (such as locals that are last written before n can execute).\n@return Whether the tree can be affected by side-effects or\nhas side-effects.\n",
  "functionStartLine": 1139,
  "functionEndLine": 1171,
  "numCommitsSeen": 157,
  "timeTaken": 16388,
  "changeHistory": [
    "ebb59a97610015bc41bda7f458dd1428a3a3e335",
    "7eaa0d8eca2549742649af34671eaf3da83b5c08",
    "3ce4716848eb71b6e78a4545a2cc0c27e74a29b3",
    "3bee5d740c96572faea4b9fb8b632e0e07b13cbb",
    "78995bf9e88599055a8c4165d89c09dc92a44b30",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "ebb59a97610015bc41bda7f458dd1428a3a3e335": "Ybodychange",
    "7eaa0d8eca2549742649af34671eaf3da83b5c08": "Ybodychange",
    "3ce4716848eb71b6e78a4545a2cc0c27e74a29b3": "Ybodychange",
    "3bee5d740c96572faea4b9fb8b632e0e07b13cbb": "Yformatchange",
    "78995bf9e88599055a8c4165d89c09dc92a44b30": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Ydocchange,Yparameterchange)",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ebb59a97610015bc41bda7f458dd1428a3a3e335": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/04/22 by nick\n\n        fix the extern definition of Window.prototype.stop\n\n        R\u003dsiggy\n        DELTA\u003d1  (0 added, 0 deleted, 1 changed)\n\nChange on 2010/04/22 by john\n\n        \"Anonymous function\" is a confusing term for functions with names.\n        Properly we are usually distinguishing between functions statements\n        (function declarations) and function expressions.\n\n        R\u003dalan\n        DELTA\u003d172  (7 added, 14 deleted, 151 changed)\n\nChange on 2010/04/22 by john\n\n        Standardize the definition of setTimeout/setInterval.\n        Fix for Issue 137\n\n        R\u003dnick\n        DELTA\u003d6  (2 added, 2 deleted, 2 changed)\n\nChange on 2010/04/22 by mark\n\n        Various delegate fixes.\n\n        Give the delegate proxy a name unique from the delegate base so that\n        InstanceObjectType#equals distinguishes them. This is necessary for\n        AmbiguateProperties to work.\n\n        Fix the prototype of the delegate proxy. This makes\n        DisambiguateProperties continue to work.\n\n        Add superclass methods of the delegate base to the delegate proxy.\n\n\n        R\u003dandrew,nada\n        DELTA\u003d526  (383 added, 104 deleted, 39 changed)\n\nChange on 2010/04/23 by john\n\n        Allow variable inlining of function statements. For simplicity  limited to functions defined before first use.\n\n        R\u003dnick\n        DELTA\u003d79  (49 added, 3 deleted, 27 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dhakjvx\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@197 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/23/10, 11:31 AM",
      "commitName": "ebb59a97610015bc41bda7f458dd1428a3a3e335",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/16/10, 10:20 AM",
      "commitNameOld": "6e3eb4f7619179ba6c23db2af7549ef02f588c35",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 7.05,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "static boolean canBeSideEffected(Node n, Set\u003cString\u003e knownConstants) {\n    switch(n.getType()) {\n        case Token.CALL:\n        case Token.NEW:\n            return true;\n        case Token.NAME:\n            return !isConstantName(n) \u0026\u0026 !knownConstants.contains(n.getString());\n        case Token.GETPROP:\n        case Token.GETELEM:\n            return true;\n        case Token.FUNCTION:\n            Preconditions.checkState(isFunctionExpression(n));\n            return false;\n    }\n    for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n        if (canBeSideEffected(c, knownConstants)) {\n            return true;\n        }\n    }\n    return false;\n}",
      "path": "src/com/google/javascript/jscomp/NodeUtil.java",
      "functionStartLine": 606,
      "functionName": "canBeSideEffected",
      "functionAnnotation": "",
      "functionDoc": "\n@param knownConstants A set of names known to be constant value at\nnode \u0027n\u0027 (such as locals that are last written before n can execute).\n@return Whether the tree can be affected by side-effects or\nhas side-effects.\n",
      "diff": "@@ -1,21 +1,21 @@\n static boolean canBeSideEffected(Node n, Set\u003cString\u003e knownConstants) {\n     switch(n.getType()) {\n         case Token.CALL:\n         case Token.NEW:\n             return true;\n         case Token.NAME:\n             return !isConstantName(n) \u0026\u0026 !knownConstants.contains(n.getString());\n         case Token.GETPROP:\n         case Token.GETELEM:\n             return true;\n         case Token.FUNCTION:\n-            Preconditions.checkState(isAnonymousFunction(n));\n+            Preconditions.checkState(isFunctionExpression(n));\n             return false;\n     }\n     for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n         if (canBeSideEffected(c, knownConstants)) {\n             return true;\n         }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7eaa0d8eca2549742649af34671eaf3da83b5c08": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/04/06 by john\n\n        Update RemoveConstantExpressions to handle removing expressions whose\n        roots are calls to functions without side-effects.\n\n        R\u003dantonio\n        DELTA\u003d19  (18 added, 0 deleted, 1 changed)\n\nChange on 2010/04/06 by john\n\n        Cleanup NodeUtil self references.\n\n        R\u003drobert\n        DELTA\u003d12  (0 added, 0 deleted, 12 changed)\n\nChange on 2010/04/07 by john\n\n        Make things easier for shell escaping, accept both single and double\n        quotes for strings in --define flags.\n        Fixes issue 139.\n\n        R\u003drobert\n        DELTA\u003d18  (14 added, 0 deleted, 4 changed)\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dwdwbvk\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@173 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/7/10, 11:34 AM",
      "commitName": "7eaa0d8eca2549742649af34671eaf3da83b5c08",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/5/10, 12:30 PM",
      "commitNameOld": "222eafd303155b3eac5cd244584b2cb3c4c11975",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 1.96,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "static boolean canBeSideEffected(Node n, Set\u003cString\u003e knownConstants) {\n    switch(n.getType()) {\n        case Token.CALL:\n        case Token.NEW:\n            return true;\n        case Token.NAME:\n            return !isConstantName(n) \u0026\u0026 !knownConstants.contains(n.getString());\n        case Token.GETPROP:\n        case Token.GETELEM:\n            return true;\n        case Token.FUNCTION:\n            Preconditions.checkState(isAnonymousFunction(n));\n            return false;\n    }\n    for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n        if (canBeSideEffected(c, knownConstants)) {\n            return true;\n        }\n    }\n    return false;\n}",
      "path": "src/com/google/javascript/jscomp/NodeUtil.java",
      "functionStartLine": 582,
      "functionName": "canBeSideEffected",
      "functionAnnotation": "",
      "functionDoc": "\n@param knownConstants A set of names known to be constant value at\nnode \u0027n\u0027 (such as locals that are last written before n can execute).\n@return Whether the tree can be affected by side-effects or\nhas side-effects.\n",
      "diff": "@@ -1,21 +1,21 @@\n static boolean canBeSideEffected(Node n, Set\u003cString\u003e knownConstants) {\n     switch(n.getType()) {\n         case Token.CALL:\n         case Token.NEW:\n             return true;\n         case Token.NAME:\n-            return !NodeUtil.isConstantName(n) \u0026\u0026 !knownConstants.contains(n.getString());\n+            return !isConstantName(n) \u0026\u0026 !knownConstants.contains(n.getString());\n         case Token.GETPROP:\n         case Token.GETELEM:\n             return true;\n         case Token.FUNCTION:\n-            Preconditions.checkState(NodeUtil.isAnonymousFunction(n));\n+            Preconditions.checkState(isAnonymousFunction(n));\n             return false;\n     }\n     for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n         if (canBeSideEffected(c, knownConstants)) {\n             return true;\n         }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3ce4716848eb71b6e78a4545a2cc0c27e74a29b3": {
      "type": "Ybodychange",
      "commitMessage": "Tweak to allow chained initialization:\nnew Node(Token.EXPR_RESULT, a).copyInformationFrom(a); (John)\nR\u003dalan\nDELTA\u003d10  (6 added, 0 deleted, 4 changed)\n\n\nTeach PureFunctionnIdentifier about (f || g)() calls (antonio)\nFixes issue 116\nR\u003djohn\nDELTA\u003d105  (84 added, 0 deleted, 21 changed)\n\nFix decomposition issue \nAnonymous function declaration can not be side-effected and are\nside-effect free. (John)\nR\u003dalan\nDELTA\u003d115  (101 added, 8 deleted, 6 changed)\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@154 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/25/10, 8:58 AM",
      "commitName": "3ce4716848eb71b6e78a4545a2cc0c27e74a29b3",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "3/23/10, 2:27 PM",
      "commitNameOld": "2dc356a34ace77d20b27fa90fb6467d303bd09a8",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 1.77,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "static boolean canBeSideEffected(Node n, Set\u003cString\u003e knownConstants) {\n    switch(n.getType()) {\n        case Token.CALL:\n        case Token.NEW:\n            return true;\n        case Token.NAME:\n            return !NodeUtil.isConstantName(n) \u0026\u0026 !knownConstants.contains(n.getString());\n        case Token.GETPROP:\n        case Token.GETELEM:\n            return true;\n        case Token.FUNCTION:\n            Preconditions.checkState(NodeUtil.isAnonymousFunction(n));\n            return false;\n    }\n    for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n        if (canBeSideEffected(c, knownConstants)) {\n            return true;\n        }\n    }\n    return false;\n}",
      "path": "src/com/google/javascript/jscomp/NodeUtil.java",
      "functionStartLine": 584,
      "functionName": "canBeSideEffected",
      "functionAnnotation": "",
      "functionDoc": "\n@param knownConstants A set of names known to be constant value at\nnode \u0027n\u0027 (such as locals that are last written before n can execute).\n@return Whether the tree can be affected by side-effects or\nhas side-effects.\n",
      "diff": "@@ -1,18 +1,21 @@\n static boolean canBeSideEffected(Node n, Set\u003cString\u003e knownConstants) {\n     switch(n.getType()) {\n         case Token.CALL:\n         case Token.NEW:\n             return true;\n         case Token.NAME:\n             return !NodeUtil.isConstantName(n) \u0026\u0026 !knownConstants.contains(n.getString());\n         case Token.GETPROP:\n         case Token.GETELEM:\n             return true;\n+        case Token.FUNCTION:\n+            Preconditions.checkState(NodeUtil.isAnonymousFunction(n));\n+            return false;\n     }\n     for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n         if (canBeSideEffected(c, knownConstants)) {\n             return true;\n         }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3bee5d740c96572faea4b9fb8b632e0e07b13cbb": {
      "type": "Yformatchange",
      "commitMessage": "Add a mechanism for inlining local vars, and turn it on by default.\nWarnings for \"ambiguous\" function definitions.\nRefactoring and renaming of some method names.\nUse \"\u003d\" optionality annotation in externs.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@15 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/25/09, 6:53 AM",
      "commitName": "3bee5d740c96572faea4b9fb8b632e0e07b13cbb",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/17/09, 4:21 PM",
      "commitNameOld": "fe64e87cccd2c38524c0b36c49beb4c988d1453a",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 7.61,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "static boolean canBeSideEffected(Node n, Set\u003cString\u003e knownConstants) {\n    switch(n.getType()) {\n        case Token.CALL:\n        case Token.NEW:\n            return true;\n        case Token.NAME:\n            return !NodeUtil.isConstantName(n) \u0026\u0026 !knownConstants.contains(n.getString());\n        case Token.GETPROP:\n        case Token.GETELEM:\n            return true;\n    }\n    for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n        if (canBeSideEffected(c, knownConstants)) {\n            return true;\n        }\n    }\n    return false;\n}",
      "path": "src/com/google/javascript/jscomp/NodeUtil.java",
      "functionStartLine": 560,
      "functionName": "canBeSideEffected",
      "functionAnnotation": "",
      "functionDoc": "\n@param knownConstants A set of names known to be constant value at\nnode \u0027n\u0027 (such as locals that are last written before n can execute).\n@return Whether the tree can be affected by side-effects or\nhas side-effects.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "78995bf9e88599055a8c4165d89c09dc92a44b30": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Ydocchange,Yparameterchange)",
      "commitMessage": "Fix synthesis of vars in DEFAULT mode.\nBetter variable inlining\nBetter function inlining\nAssorted bug fixes\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@6 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/10/09, 11:16 AM",
      "commitName": "78995bf9e88599055a8c4165d89c09dc92a44b30",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "Fix synthesis of vars in DEFAULT mode.\nBetter variable inlining\nBetter function inlining\nAssorted bug fixes\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@6 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "11/10/09, 11:16 AM",
          "commitName": "78995bf9e88599055a8c4165d89c09dc92a44b30",
          "commitAuthor": "nicholas.j.santos@gmail.com",
          "commitDateOld": "11/9/09, 12:46 PM",
          "commitNameOld": "7efb21a25bb44dcfc513d584c6b191aeacfba367",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 0.94,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "static boolean canBeSideEffected(Node n, Set\u003cString\u003e knownConstants) {\n    switch(n.getType()) {\n        case Token.CALL:\n        case Token.NEW:\n            return true;\n        case Token.NAME:\n            return !NodeUtil.isConstantName(n) \u0026\u0026 !knownConstants.contains(n.getString());\n        case Token.GETPROP:\n        case Token.GETELEM:\n            return true;\n    }\n    for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n        if (canBeSideEffected(c, knownConstants)) {\n            return true;\n        }\n    }\n    return false;\n}",
          "path": "src/com/google/javascript/jscomp/NodeUtil.java",
          "functionStartLine": 560,
          "functionName": "canBeSideEffected",
          "functionAnnotation": "",
          "functionDoc": "\n@param knownConstants A set of names known to be constant value at\nnode \u0027n\u0027 (such as locals that are last written before n can execute).\n@return Whether the tree can be affected by side-effects or\nhas side-effects.\n",
          "diff": "@@ -1,22 +1,18 @@\n-private static boolean canBeSideEffected(Node n) {\n+static boolean canBeSideEffected(Node n, Set\u003cString\u003e knownConstants) {\n     switch(n.getType()) {\n         case Token.CALL:\n-            if (!n.isNoSideEffectsCall()) {\n-                return true;\n-            }\n-            break;\n         case Token.NEW:\n             return true;\n         case Token.NAME:\n-            if (!NodeUtil.isConstantName(n)) {\n-                return true;\n-            }\n-            break;\n+            return !NodeUtil.isConstantName(n) \u0026\u0026 !knownConstants.contains(n.getString());\n+        case Token.GETPROP:\n+        case Token.GETELEM:\n+            return true;\n     }\n     for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n-        if (canBeSideEffected(c)) {\n+        if (canBeSideEffected(c, knownConstants)) {\n             return true;\n         }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java",
            "newPath": "src/com/google/javascript/jscomp/NodeUtil.java",
            "oldMethodName": "canBeSideEffected",
            "newMethodName": "canBeSideEffected"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Fix synthesis of vars in DEFAULT mode.\nBetter variable inlining\nBetter function inlining\nAssorted bug fixes\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@6 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "11/10/09, 11:16 AM",
          "commitName": "78995bf9e88599055a8c4165d89c09dc92a44b30",
          "commitAuthor": "nicholas.j.santos@gmail.com",
          "commitDateOld": "11/9/09, 12:46 PM",
          "commitNameOld": "7efb21a25bb44dcfc513d584c6b191aeacfba367",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 0.94,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "static boolean canBeSideEffected(Node n, Set\u003cString\u003e knownConstants) {\n    switch(n.getType()) {\n        case Token.CALL:\n        case Token.NEW:\n            return true;\n        case Token.NAME:\n            return !NodeUtil.isConstantName(n) \u0026\u0026 !knownConstants.contains(n.getString());\n        case Token.GETPROP:\n        case Token.GETELEM:\n            return true;\n    }\n    for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n        if (canBeSideEffected(c, knownConstants)) {\n            return true;\n        }\n    }\n    return false;\n}",
          "path": "src/com/google/javascript/jscomp/NodeUtil.java",
          "functionStartLine": 560,
          "functionName": "canBeSideEffected",
          "functionAnnotation": "",
          "functionDoc": "\n@param knownConstants A set of names known to be constant value at\nnode \u0027n\u0027 (such as locals that are last written before n can execute).\n@return Whether the tree can be affected by side-effects or\nhas side-effects.\n",
          "diff": "@@ -1,22 +1,18 @@\n-private static boolean canBeSideEffected(Node n) {\n+static boolean canBeSideEffected(Node n, Set\u003cString\u003e knownConstants) {\n     switch(n.getType()) {\n         case Token.CALL:\n-            if (!n.isNoSideEffectsCall()) {\n-                return true;\n-            }\n-            break;\n         case Token.NEW:\n             return true;\n         case Token.NAME:\n-            if (!NodeUtil.isConstantName(n)) {\n-                return true;\n-            }\n-            break;\n+            return !NodeUtil.isConstantName(n) \u0026\u0026 !knownConstants.contains(n.getString());\n+        case Token.GETPROP:\n+        case Token.GETELEM:\n+            return true;\n     }\n     for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n-        if (canBeSideEffected(c)) {\n+        if (canBeSideEffected(c, knownConstants)) {\n             return true;\n         }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[private, static]",
            "newValue": "[static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Fix synthesis of vars in DEFAULT mode.\nBetter variable inlining\nBetter function inlining\nAssorted bug fixes\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@6 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "11/10/09, 11:16 AM",
          "commitName": "78995bf9e88599055a8c4165d89c09dc92a44b30",
          "commitAuthor": "nicholas.j.santos@gmail.com",
          "commitDateOld": "11/9/09, 12:46 PM",
          "commitNameOld": "7efb21a25bb44dcfc513d584c6b191aeacfba367",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 0.94,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "static boolean canBeSideEffected(Node n, Set\u003cString\u003e knownConstants) {\n    switch(n.getType()) {\n        case Token.CALL:\n        case Token.NEW:\n            return true;\n        case Token.NAME:\n            return !NodeUtil.isConstantName(n) \u0026\u0026 !knownConstants.contains(n.getString());\n        case Token.GETPROP:\n        case Token.GETELEM:\n            return true;\n    }\n    for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n        if (canBeSideEffected(c, knownConstants)) {\n            return true;\n        }\n    }\n    return false;\n}",
          "path": "src/com/google/javascript/jscomp/NodeUtil.java",
          "functionStartLine": 560,
          "functionName": "canBeSideEffected",
          "functionAnnotation": "",
          "functionDoc": "\n@param knownConstants A set of names known to be constant value at\nnode \u0027n\u0027 (such as locals that are last written before n can execute).\n@return Whether the tree can be affected by side-effects or\nhas side-effects.\n",
          "diff": "@@ -1,22 +1,18 @@\n-private static boolean canBeSideEffected(Node n) {\n+static boolean canBeSideEffected(Node n, Set\u003cString\u003e knownConstants) {\n     switch(n.getType()) {\n         case Token.CALL:\n-            if (!n.isNoSideEffectsCall()) {\n-                return true;\n-            }\n-            break;\n         case Token.NEW:\n             return true;\n         case Token.NAME:\n-            if (!NodeUtil.isConstantName(n)) {\n-                return true;\n-            }\n-            break;\n+            return !NodeUtil.isConstantName(n) \u0026\u0026 !knownConstants.contains(n.getString());\n+        case Token.GETPROP:\n+        case Token.GETELEM:\n+            return true;\n     }\n     for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n-        if (canBeSideEffected(c)) {\n+        if (canBeSideEffected(c, knownConstants)) {\n             return true;\n         }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Fix synthesis of vars in DEFAULT mode.\nBetter variable inlining\nBetter function inlining\nAssorted bug fixes\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@6 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "11/10/09, 11:16 AM",
          "commitName": "78995bf9e88599055a8c4165d89c09dc92a44b30",
          "commitAuthor": "nicholas.j.santos@gmail.com",
          "commitDateOld": "11/9/09, 12:46 PM",
          "commitNameOld": "7efb21a25bb44dcfc513d584c6b191aeacfba367",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 0.94,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "static boolean canBeSideEffected(Node n, Set\u003cString\u003e knownConstants) {\n    switch(n.getType()) {\n        case Token.CALL:\n        case Token.NEW:\n            return true;\n        case Token.NAME:\n            return !NodeUtil.isConstantName(n) \u0026\u0026 !knownConstants.contains(n.getString());\n        case Token.GETPROP:\n        case Token.GETELEM:\n            return true;\n    }\n    for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n        if (canBeSideEffected(c, knownConstants)) {\n            return true;\n        }\n    }\n    return false;\n}",
          "path": "src/com/google/javascript/jscomp/NodeUtil.java",
          "functionStartLine": 560,
          "functionName": "canBeSideEffected",
          "functionAnnotation": "",
          "functionDoc": "\n@param knownConstants A set of names known to be constant value at\nnode \u0027n\u0027 (such as locals that are last written before n can execute).\n@return Whether the tree can be affected by side-effects or\nhas side-effects.\n",
          "diff": "@@ -1,22 +1,18 @@\n-private static boolean canBeSideEffected(Node n) {\n+static boolean canBeSideEffected(Node n, Set\u003cString\u003e knownConstants) {\n     switch(n.getType()) {\n         case Token.CALL:\n-            if (!n.isNoSideEffectsCall()) {\n-                return true;\n-            }\n-            break;\n         case Token.NEW:\n             return true;\n         case Token.NAME:\n-            if (!NodeUtil.isConstantName(n)) {\n-                return true;\n-            }\n-            break;\n+            return !NodeUtil.isConstantName(n) \u0026\u0026 !knownConstants.contains(n.getString());\n+        case Token.GETPROP:\n+        case Token.GETELEM:\n+            return true;\n     }\n     for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n-        if (canBeSideEffected(c)) {\n+        if (canBeSideEffected(c, knownConstants)) {\n             return true;\n         }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "\n@return Whether the tree can be affect by side-effects occuring elsewhere.\n",
            "newValue": "\n@param knownConstants A set of names known to be constant value at\nnode \u0027n\u0027 (such as locals that are last written before n can execute).\n@return Whether the tree can be affected by side-effects or\nhas side-effects.\n"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "Fix synthesis of vars in DEFAULT mode.\nBetter variable inlining\nBetter function inlining\nAssorted bug fixes\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@6 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "11/10/09, 11:16 AM",
          "commitName": "78995bf9e88599055a8c4165d89c09dc92a44b30",
          "commitAuthor": "nicholas.j.santos@gmail.com",
          "commitDateOld": "11/9/09, 12:46 PM",
          "commitNameOld": "7efb21a25bb44dcfc513d584c6b191aeacfba367",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 0.94,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "static boolean canBeSideEffected(Node n, Set\u003cString\u003e knownConstants) {\n    switch(n.getType()) {\n        case Token.CALL:\n        case Token.NEW:\n            return true;\n        case Token.NAME:\n            return !NodeUtil.isConstantName(n) \u0026\u0026 !knownConstants.contains(n.getString());\n        case Token.GETPROP:\n        case Token.GETELEM:\n            return true;\n    }\n    for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n        if (canBeSideEffected(c, knownConstants)) {\n            return true;\n        }\n    }\n    return false;\n}",
          "path": "src/com/google/javascript/jscomp/NodeUtil.java",
          "functionStartLine": 560,
          "functionName": "canBeSideEffected",
          "functionAnnotation": "",
          "functionDoc": "\n@param knownConstants A set of names known to be constant value at\nnode \u0027n\u0027 (such as locals that are last written before n can execute).\n@return Whether the tree can be affected by side-effects or\nhas side-effects.\n",
          "diff": "@@ -1,22 +1,18 @@\n-private static boolean canBeSideEffected(Node n) {\n+static boolean canBeSideEffected(Node n, Set\u003cString\u003e knownConstants) {\n     switch(n.getType()) {\n         case Token.CALL:\n-            if (!n.isNoSideEffectsCall()) {\n-                return true;\n-            }\n-            break;\n         case Token.NEW:\n             return true;\n         case Token.NAME:\n-            if (!NodeUtil.isConstantName(n)) {\n-                return true;\n-            }\n-            break;\n+            return !NodeUtil.isConstantName(n) \u0026\u0026 !knownConstants.contains(n.getString());\n+        case Token.GETPROP:\n+        case Token.GETELEM:\n+            return true;\n     }\n     for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n-        if (canBeSideEffected(c)) {\n+        if (canBeSideEffected(c, knownConstants)) {\n             return true;\n         }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[n-Node]",
            "newValue": "[n-Node, knownConstants-Set\u003cString\u003e]"
          }
        }
      ]
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,22 @@\n+private static boolean canBeSideEffected(Node n) {\n+    switch(n.getType()) {\n+        case Token.CALL:\n+            if (!n.isNoSideEffectsCall()) {\n+                return true;\n+            }\n+            break;\n+        case Token.NEW:\n+            return true;\n+        case Token.NAME:\n+            if (!NodeUtil.isConstantName(n)) {\n+                return true;\n+            }\n+            break;\n+    }\n+    for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n+        if (canBeSideEffected(c)) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private static boolean canBeSideEffected(Node n) {\n    switch(n.getType()) {\n        case Token.CALL:\n            if (!n.isNoSideEffectsCall()) {\n                return true;\n            }\n            break;\n        case Token.NEW:\n            return true;\n        case Token.NAME:\n            if (!NodeUtil.isConstantName(n)) {\n                return true;\n            }\n            break;\n    }\n    for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n        if (canBeSideEffected(c)) {\n            return true;\n        }\n    }\n    return false;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java",
      "functionStartLine": 452,
      "functionName": "canBeSideEffected",
      "functionAnnotation": "",
      "functionDoc": "\n@return Whether the tree can be affect by side-effects occuring elsewhere.\n"
    }
  }
}