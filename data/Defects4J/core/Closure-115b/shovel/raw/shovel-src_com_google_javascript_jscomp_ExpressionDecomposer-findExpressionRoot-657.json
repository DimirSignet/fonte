{
  "origin": "codeshovel",
  "repositoryName": "Closure-115b",
  "repositoryPath": "/tmp/Closure-115b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ExpressionDecomposer.java",
  "functionName": "findExpressionRoot",
  "functionId": "findExpressionRoot___subExpression-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/ExpressionDecomposer.java",
  "functionAnnotation": "",
  "functionDoc": "\n@return The statement containing the expression. null if subExpression\n    is not contain by in by a Node where inlining is known to be possible.\n    For example, a WHILE node condition expression.\n",
  "functionStartLine": 657,
  "functionEndLine": 685,
  "numCommitsSeen": 25,
  "timeTaken": 1506,
  "changeHistory": [
    "5524adbda991632656059566b69cc2771ba42b7d",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "5524adbda991632656059566b69cc2771ba42b7d": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5524adbda991632656059566b69cc2771ba42b7d": {
      "type": "Ybodychange",
      "commitMessage": "\nRename a couple of AST nodes:\nDEFAULT becomes DEFAULT_CASE\nLP becomes PARAM_LIST\nGET becomes GETTER_DEF\nSET becomes SETTER_DEF\n\nR\u003dnicksantos\nDELTA\u003d215  (40 added, 5 deleted, 170 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3695\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1590 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/11/11, 4:42 PM",
      "commitName": "5524adbda991632656059566b69cc2771ba42b7d",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/10/11, 8:36 AM",
      "commitNameOld": "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 1.34,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "static Node findExpressionRoot(Node subExpression) {\n    Node child \u003d subExpression;\n    for (Node parent : child.getAncestors()) {\n        int parentType \u003d parent.getType();\n        switch(parentType) {\n            case Token.EXPR_RESULT:\n            case Token.IF:\n            case Token.SWITCH:\n            case Token.RETURN:\n            case Token.VAR:\n                Preconditions.checkState(child \u003d\u003d parent.getFirstChild());\n                return parent;\n            case Token.SCRIPT:\n            case Token.BLOCK:\n            case Token.LABEL:\n            case Token.CASE:\n            case Token.DEFAULT_CASE:\n                return null;\n        }\n        child \u003d parent;\n    }\n    throw new IllegalStateException(\"Unexpected AST structure.\");\n}",
      "path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java",
      "functionStartLine": 641,
      "functionName": "findExpressionRoot",
      "functionAnnotation": "",
      "functionDoc": "\n@return The statement containing the expression. null if subExpression\n    is not contain by in by a Node where inlining is known to be possible.\n    For example, a WHILE node condition expression.\n",
      "diff": "@@ -1,23 +1,23 @@\n static Node findExpressionRoot(Node subExpression) {\n     Node child \u003d subExpression;\n     for (Node parent : child.getAncestors()) {\n         int parentType \u003d parent.getType();\n         switch(parentType) {\n             case Token.EXPR_RESULT:\n             case Token.IF:\n             case Token.SWITCH:\n             case Token.RETURN:\n             case Token.VAR:\n                 Preconditions.checkState(child \u003d\u003d parent.getFirstChild());\n                 return parent;\n             case Token.SCRIPT:\n             case Token.BLOCK:\n             case Token.LABEL:\n             case Token.CASE:\n-            case Token.DEFAULT:\n+            case Token.DEFAULT_CASE:\n                 return null;\n         }\n         child \u003d parent;\n     }\n     throw new IllegalStateException(\"Unexpected AST structure.\");\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,23 @@\n+static Node findExpressionRoot(Node subExpression) {\n+    Node child \u003d subExpression;\n+    for (Node parent : child.getAncestors()) {\n+        int parentType \u003d parent.getType();\n+        switch(parentType) {\n+            case Token.EXPR_RESULT:\n+            case Token.IF:\n+            case Token.SWITCH:\n+            case Token.RETURN:\n+            case Token.VAR:\n+                Preconditions.checkState(child \u003d\u003d parent.getFirstChild());\n+                return parent;\n+            case Token.SCRIPT:\n+            case Token.BLOCK:\n+            case Token.LABEL:\n+            case Token.CASE:\n+            case Token.DEFAULT:\n+                return null;\n+        }\n+        child \u003d parent;\n+    }\n+    throw new IllegalStateException(\"Unexpected AST structure.\");\n+}\n\\ No newline at end of file\n",
      "actualSource": "static Node findExpressionRoot(Node subExpression) {\n    Node child \u003d subExpression;\n    for (Node parent : child.getAncestors()) {\n        int parentType \u003d parent.getType();\n        switch(parentType) {\n            case Token.EXPR_RESULT:\n            case Token.IF:\n            case Token.SWITCH:\n            case Token.RETURN:\n            case Token.VAR:\n                Preconditions.checkState(child \u003d\u003d parent.getFirstChild());\n                return parent;\n            case Token.SCRIPT:\n            case Token.BLOCK:\n            case Token.LABEL:\n            case Token.CASE:\n            case Token.DEFAULT:\n                return null;\n        }\n        child \u003d parent;\n    }\n    throw new IllegalStateException(\"Unexpected AST structure.\");\n}",
      "path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java",
      "functionStartLine": 534,
      "functionName": "findExpressionRoot",
      "functionAnnotation": "",
      "functionDoc": "\n@return The statement containing the expression. null if subExpression\n    is not contain by in by a Node where inlining is known to be possible.\n    For example, a WHILE node condition expression.\n"
    }
  }
}