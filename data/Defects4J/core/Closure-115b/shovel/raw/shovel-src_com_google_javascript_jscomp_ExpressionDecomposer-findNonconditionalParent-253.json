{
  "origin": "codeshovel",
  "repositoryName": "Closure-115b",
  "repositoryPath": "/tmp/Closure-115b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ExpressionDecomposer.java",
  "functionName": "findNonconditionalParent",
  "functionId": "findNonconditionalParent___subExpression-Node__expressionRoot-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/ExpressionDecomposer.java",
  "functionAnnotation": "",
  "functionDoc": "\n@return \"expression\" or the node closest to \"expression\", that does not\nhave a conditional ancestor.\n",
  "functionStartLine": 253,
  "functionEndLine": 270,
  "numCommitsSeen": 25,
  "timeTaken": 1417,
  "changeHistory": [
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,11 @@\n+private static Node findNonconditionalParent(Node subExpression, Node expressionRoot) {\n+    Node result \u003d subExpression;\n+    for (Node child \u003d subExpression, parent \u003d child.getParent(); parent !\u003d expressionRoot; child \u003d parent, parent \u003d child.getParent()) {\n+        if (isConditionalOp(parent)) {\n+            if (child !\u003d parent.getFirstChild()) {\n+                result \u003d parent;\n+            }\n+        }\n+    }\n+    return result;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private static Node findNonconditionalParent(Node subExpression, Node expressionRoot) {\n    Node result \u003d subExpression;\n    for (Node child \u003d subExpression, parent \u003d child.getParent(); parent !\u003d expressionRoot; child \u003d parent, parent \u003d child.getParent()) {\n        if (isConditionalOp(parent)) {\n            if (child !\u003d parent.getFirstChild()) {\n                result \u003d parent;\n            }\n        }\n    }\n    return result;\n}",
      "path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java",
      "functionStartLine": 223,
      "functionName": "findNonconditionalParent",
      "functionAnnotation": "",
      "functionDoc": "\n@return \"expression\" or the node closest to \"expression\", that does not\nhave a conditional ancestor.\n"
    }
  }
}