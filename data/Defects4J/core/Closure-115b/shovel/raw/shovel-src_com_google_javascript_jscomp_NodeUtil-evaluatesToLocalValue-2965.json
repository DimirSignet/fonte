{
  "origin": "codeshovel",
  "repositoryName": "Closure-115b",
  "repositoryPath": "/tmp/Closure-115b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NodeUtil.java",
  "functionName": "evaluatesToLocalValue",
  "functionId": "evaluatesToLocalValue___value-Node__locals-Predicate__Node__",
  "sourceFilePath": "src/com/google/javascript/jscomp/NodeUtil.java",
  "functionAnnotation": "",
  "functionDoc": "\n@param locals A predicate to apply to unknown local values.\n@return Whether the node is known to be a value that is not a reference\n    outside the expression scope.\n",
  "functionStartLine": 2965,
  "functionEndLine": 3031,
  "numCommitsSeen": 156,
  "timeTaken": 12748,
  "changeHistory": [
    "0b054d7d1b185b02c595c646bc0f11a6d809c934",
    "24fd842a5380a350bcde0bed60287053bc9b37f0",
    "5428589fcac11bb899a44ef827e12a253e29d323",
    "58786c3f717fa506280127265cd68fedf17de0a9",
    "2e158bdc1a74af6453d3087a7377ace75e2bcd45",
    "0907b6618a60b2de23c8f7ec2217a37dc5e9a091",
    "ef332935817a940ca10d1ce431d8a2037fe59ac9",
    "6a2378d43d1f06344f6418388d45c66fe3466a07"
  ],
  "changeHistoryShort": {
    "0b054d7d1b185b02c595c646bc0f11a6d809c934": "Ybodychange",
    "24fd842a5380a350bcde0bed60287053bc9b37f0": "Ybodychange",
    "5428589fcac11bb899a44ef827e12a253e29d323": "Ybodychange",
    "58786c3f717fa506280127265cd68fedf17de0a9": "Ybodychange",
    "2e158bdc1a74af6453d3087a7377ace75e2bcd45": "Ybodychange",
    "0907b6618a60b2de23c8f7ec2217a37dc5e9a091": "Ybodychange",
    "ef332935817a940ca10d1ce431d8a2037fe59ac9": "Ybodychange",
    "6a2378d43d1f06344f6418388d45c66fe3466a07": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0b054d7d1b185b02c595c646bc0f11a6d809c934": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback\n\n*** Reason for rollback ***\n\nDisable cast warnings by default. Most projects however have\nit turn up to ERROR.\n\n*** Original change description ***\n\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nbreaks various projects without whitelists\n\n*** Original change description ***\n\nIntroduced a CAST ast node\n\nR\u003dnicksantos\nDELTA\u003d1968  (1746 added, 44 deleted, 178 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5970\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2394 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/12/12, 5:18 PM",
      "commitName": "0b054d7d1b185b02c595c646bc0f11a6d809c934",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/20/12, 3:32 PM",
      "commitNameOld": "73b63857ecdbb70f1bc90544362cff4439b8493e",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 22.07,
      "commitsBetweenForRepo": 43,
      "commitsBetweenForFile": 1,
      "actualSource": "static boolean evaluatesToLocalValue(Node value, Predicate\u003cNode\u003e locals) {\n    switch(value.getType()) {\n        case Token.CAST:\n            return evaluatesToLocalValue(value.getFirstChild(), locals);\n        case Token.ASSIGN:\n            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) \u0026\u0026 evaluatesToLocalValue(value.getLastChild(), locals));\n        case Token.COMMA:\n            return evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.AND:\n        case Token.OR:\n            return evaluatesToLocalValue(value.getFirstChild(), locals) \u0026\u0026 evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.HOOK:\n            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) \u0026\u0026 evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.INC:\n        case Token.DEC:\n            if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n                return evaluatesToLocalValue(value.getFirstChild(), locals);\n            } else {\n                return true;\n            }\n        case Token.THIS:\n            return locals.apply(value);\n        case Token.NAME:\n            return isImmutableValue(value) || locals.apply(value);\n        case Token.GETELEM:\n        case Token.GETPROP:\n            return locals.apply(value);\n        case Token.CALL:\n            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);\n        case Token.NEW:\n            return newHasLocalResult(value) || locals.apply(value);\n        case Token.FUNCTION:\n        case Token.REGEXP:\n        case Token.ARRAYLIT:\n        case Token.OBJECTLIT:\n            return true;\n        case Token.DELPROP:\n        case Token.IN:\n            return true;\n        default:\n            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {\n                return true;\n            }\n            throw new IllegalStateException(\"Unexpected expression node\" + value + \"\\n parent:\" + value.getParent());\n    }\n}",
      "path": "src/com/google/javascript/jscomp/NodeUtil.java",
      "functionStartLine": 2913,
      "functionName": "evaluatesToLocalValue",
      "functionAnnotation": "",
      "functionDoc": "\n@param locals A predicate to apply to unknown local values.\n@return Whether the node is known to be a value that is not a reference\n    outside the expression scope.\n",
      "diff": "@@ -1,44 +1,46 @@\n static boolean evaluatesToLocalValue(Node value, Predicate\u003cNode\u003e locals) {\n     switch(value.getType()) {\n+        case Token.CAST:\n+            return evaluatesToLocalValue(value.getFirstChild(), locals);\n         case Token.ASSIGN:\n             return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) \u0026\u0026 evaluatesToLocalValue(value.getLastChild(), locals));\n         case Token.COMMA:\n             return evaluatesToLocalValue(value.getLastChild(), locals);\n         case Token.AND:\n         case Token.OR:\n             return evaluatesToLocalValue(value.getFirstChild(), locals) \u0026\u0026 evaluatesToLocalValue(value.getLastChild(), locals);\n         case Token.HOOK:\n             return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) \u0026\u0026 evaluatesToLocalValue(value.getLastChild(), locals);\n         case Token.INC:\n         case Token.DEC:\n             if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n                 return evaluatesToLocalValue(value.getFirstChild(), locals);\n             } else {\n                 return true;\n             }\n         case Token.THIS:\n             return locals.apply(value);\n         case Token.NAME:\n             return isImmutableValue(value) || locals.apply(value);\n         case Token.GETELEM:\n         case Token.GETPROP:\n             return locals.apply(value);\n         case Token.CALL:\n             return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);\n         case Token.NEW:\n             return newHasLocalResult(value) || locals.apply(value);\n         case Token.FUNCTION:\n         case Token.REGEXP:\n         case Token.ARRAYLIT:\n         case Token.OBJECTLIT:\n             return true;\n         case Token.DELPROP:\n         case Token.IN:\n             return true;\n         default:\n             if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {\n                 return true;\n             }\n             throw new IllegalStateException(\"Unexpected expression node\" + value + \"\\n parent:\" + value.getParent());\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "24fd842a5380a350bcde0bed60287053bc9b37f0": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback \n\n*** Reason for rollback ***\n\nbreaks various projects without whitelists\n\n*** Original change description ***\n\nIntroduced a CAST ast node\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5848\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2334 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/19/12, 3:19 PM",
      "commitName": "24fd842a5380a350bcde0bed60287053bc9b37f0",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/19/12, 1:47 PM",
      "commitNameOld": "5428589fcac11bb899a44ef827e12a253e29d323",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "static boolean evaluatesToLocalValue(Node value, Predicate\u003cNode\u003e locals) {\n    switch(value.getType()) {\n        case Token.ASSIGN:\n            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) \u0026\u0026 evaluatesToLocalValue(value.getLastChild(), locals));\n        case Token.COMMA:\n            return evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.AND:\n        case Token.OR:\n            return evaluatesToLocalValue(value.getFirstChild(), locals) \u0026\u0026 evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.HOOK:\n            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) \u0026\u0026 evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.INC:\n        case Token.DEC:\n            if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n                return evaluatesToLocalValue(value.getFirstChild(), locals);\n            } else {\n                return true;\n            }\n        case Token.THIS:\n            return locals.apply(value);\n        case Token.NAME:\n            return isImmutableValue(value) || locals.apply(value);\n        case Token.GETELEM:\n        case Token.GETPROP:\n            return locals.apply(value);\n        case Token.CALL:\n            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);\n        case Token.NEW:\n            return newHasLocalResult(value) || locals.apply(value);\n        case Token.FUNCTION:\n        case Token.REGEXP:\n        case Token.ARRAYLIT:\n        case Token.OBJECTLIT:\n            return true;\n        case Token.DELPROP:\n        case Token.IN:\n            return true;\n        default:\n            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {\n                return true;\n            }\n            throw new IllegalStateException(\"Unexpected expression node\" + value + \"\\n parent:\" + value.getParent());\n    }\n}",
      "path": "src/com/google/javascript/jscomp/NodeUtil.java",
      "functionStartLine": 2902,
      "functionName": "evaluatesToLocalValue",
      "functionAnnotation": "",
      "functionDoc": "\n@param locals A predicate to apply to unknown local values.\n@return Whether the node is known to be a value that is not a reference\n    outside the expression scope.\n",
      "diff": "@@ -1,46 +1,44 @@\n static boolean evaluatesToLocalValue(Node value, Predicate\u003cNode\u003e locals) {\n     switch(value.getType()) {\n-        case Token.CAST:\n-            return evaluatesToLocalValue(value.getFirstChild(), locals);\n         case Token.ASSIGN:\n             return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) \u0026\u0026 evaluatesToLocalValue(value.getLastChild(), locals));\n         case Token.COMMA:\n             return evaluatesToLocalValue(value.getLastChild(), locals);\n         case Token.AND:\n         case Token.OR:\n             return evaluatesToLocalValue(value.getFirstChild(), locals) \u0026\u0026 evaluatesToLocalValue(value.getLastChild(), locals);\n         case Token.HOOK:\n             return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) \u0026\u0026 evaluatesToLocalValue(value.getLastChild(), locals);\n         case Token.INC:\n         case Token.DEC:\n             if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n                 return evaluatesToLocalValue(value.getFirstChild(), locals);\n             } else {\n                 return true;\n             }\n         case Token.THIS:\n             return locals.apply(value);\n         case Token.NAME:\n             return isImmutableValue(value) || locals.apply(value);\n         case Token.GETELEM:\n         case Token.GETPROP:\n             return locals.apply(value);\n         case Token.CALL:\n             return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);\n         case Token.NEW:\n             return newHasLocalResult(value) || locals.apply(value);\n         case Token.FUNCTION:\n         case Token.REGEXP:\n         case Token.ARRAYLIT:\n         case Token.OBJECTLIT:\n             return true;\n         case Token.DELPROP:\n         case Token.IN:\n             return true;\n         default:\n             if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {\n                 return true;\n             }\n             throw new IllegalStateException(\"Unexpected expression node\" + value + \"\\n parent:\" + value.getParent());\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5428589fcac11bb899a44ef827e12a253e29d323": {
      "type": "Ybodychange",
      "commitMessage": "\nIntroduced a CAST ast node\n\nR\u003dnicksantos,dimvar\nDELTA\u003d2832  (2746 added, 13 deleted, 73 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5846\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2332 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/19/12, 1:47 PM",
      "commitName": "5428589fcac11bb899a44ef827e12a253e29d323",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "10/8/12, 2:31 PM",
      "commitNameOld": "a35b095af0ccbd568784976af1ce240007040688",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 42.01,
      "commitsBetweenForRepo": 74,
      "commitsBetweenForFile": 1,
      "actualSource": "static boolean evaluatesToLocalValue(Node value, Predicate\u003cNode\u003e locals) {\n    switch(value.getType()) {\n        case Token.CAST:\n            return evaluatesToLocalValue(value.getFirstChild(), locals);\n        case Token.ASSIGN:\n            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) \u0026\u0026 evaluatesToLocalValue(value.getLastChild(), locals));\n        case Token.COMMA:\n            return evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.AND:\n        case Token.OR:\n            return evaluatesToLocalValue(value.getFirstChild(), locals) \u0026\u0026 evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.HOOK:\n            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) \u0026\u0026 evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.INC:\n        case Token.DEC:\n            if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n                return evaluatesToLocalValue(value.getFirstChild(), locals);\n            } else {\n                return true;\n            }\n        case Token.THIS:\n            return locals.apply(value);\n        case Token.NAME:\n            return isImmutableValue(value) || locals.apply(value);\n        case Token.GETELEM:\n        case Token.GETPROP:\n            return locals.apply(value);\n        case Token.CALL:\n            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);\n        case Token.NEW:\n            return newHasLocalResult(value) || locals.apply(value);\n        case Token.FUNCTION:\n        case Token.REGEXP:\n        case Token.ARRAYLIT:\n        case Token.OBJECTLIT:\n            return true;\n        case Token.DELPROP:\n        case Token.IN:\n            return true;\n        default:\n            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {\n                return true;\n            }\n            throw new IllegalStateException(\"Unexpected expression node\" + value + \"\\n parent:\" + value.getParent());\n    }\n}",
      "path": "src/com/google/javascript/jscomp/NodeUtil.java",
      "functionStartLine": 2913,
      "functionName": "evaluatesToLocalValue",
      "functionAnnotation": "",
      "functionDoc": "\n@param locals A predicate to apply to unknown local values.\n@return Whether the node is known to be a value that is not a reference\n    outside the expression scope.\n",
      "diff": "@@ -1,44 +1,46 @@\n static boolean evaluatesToLocalValue(Node value, Predicate\u003cNode\u003e locals) {\n     switch(value.getType()) {\n+        case Token.CAST:\n+            return evaluatesToLocalValue(value.getFirstChild(), locals);\n         case Token.ASSIGN:\n             return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) \u0026\u0026 evaluatesToLocalValue(value.getLastChild(), locals));\n         case Token.COMMA:\n             return evaluatesToLocalValue(value.getLastChild(), locals);\n         case Token.AND:\n         case Token.OR:\n             return evaluatesToLocalValue(value.getFirstChild(), locals) \u0026\u0026 evaluatesToLocalValue(value.getLastChild(), locals);\n         case Token.HOOK:\n             return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) \u0026\u0026 evaluatesToLocalValue(value.getLastChild(), locals);\n         case Token.INC:\n         case Token.DEC:\n             if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n                 return evaluatesToLocalValue(value.getFirstChild(), locals);\n             } else {\n                 return true;\n             }\n         case Token.THIS:\n             return locals.apply(value);\n         case Token.NAME:\n             return isImmutableValue(value) || locals.apply(value);\n         case Token.GETELEM:\n         case Token.GETPROP:\n             return locals.apply(value);\n         case Token.CALL:\n             return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);\n         case Token.NEW:\n             return newHasLocalResult(value) || locals.apply(value);\n         case Token.FUNCTION:\n         case Token.REGEXP:\n         case Token.ARRAYLIT:\n         case Token.OBJECTLIT:\n             return true;\n         case Token.DELPROP:\n         case Token.IN:\n             return true;\n         default:\n             if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {\n                 return true;\n             }\n             throw new IllegalStateException(\"Unexpected expression node\" + value + \"\\n parent:\" + value.getParent());\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "58786c3f717fa506280127265cd68fedf17de0a9": {
      "type": "Ybodychange",
      "commitMessage": "\n\"delete\" operator with a boolean result.\nFixes issue 364\n\nR\u003dmgoodman\nDELTA\u003d6  (6 added, 0 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d697\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@834 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/1/11, 10:30 AM",
      "commitName": "58786c3f717fa506280127265cd68fedf17de0a9",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "2/15/11, 1:06 PM",
      "commitNameOld": "cf3fcbbc124d5b8948d7bef5215c45d80dbeae8e",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 13.89,
      "commitsBetweenForRepo": 47,
      "commitsBetweenForFile": 1,
      "actualSource": "static boolean evaluatesToLocalValue(Node value, Predicate\u003cNode\u003e locals) {\n    switch(value.getType()) {\n        case Token.ASSIGN:\n            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) \u0026\u0026 evaluatesToLocalValue(value.getLastChild(), locals));\n        case Token.COMMA:\n            return evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.AND:\n        case Token.OR:\n            return evaluatesToLocalValue(value.getFirstChild(), locals) \u0026\u0026 evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.HOOK:\n            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) \u0026\u0026 evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.INC:\n        case Token.DEC:\n            if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n                return evaluatesToLocalValue(value.getFirstChild(), locals);\n            } else {\n                return true;\n            }\n        case Token.THIS:\n            return locals.apply(value);\n        case Token.NAME:\n            return isImmutableValue(value) || locals.apply(value);\n        case Token.GETELEM:\n        case Token.GETPROP:\n            return locals.apply(value);\n        case Token.CALL:\n            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);\n        case Token.NEW:\n            return newHasLocalResult(value) || locals.apply(value);\n        case Token.FUNCTION:\n        case Token.REGEXP:\n        case Token.ARRAYLIT:\n        case Token.OBJECTLIT:\n            return true;\n        case Token.DELPROP:\n        case Token.IN:\n            return true;\n        default:\n            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {\n                return true;\n            }\n            throw new IllegalStateException(\"Unexpected expression node\" + value + \"\\n parent:\" + value.getParent());\n    }\n}",
      "path": "src/com/google/javascript/jscomp/NodeUtil.java",
      "functionStartLine": 2865,
      "functionName": "evaluatesToLocalValue",
      "functionAnnotation": "",
      "functionDoc": "\n@param locals A predicate to apply to unknown local values.\n@return Whether the node is known to be a value that is not a reference\n    outside the expression scope.\n",
      "diff": "@@ -1,43 +1,44 @@\n static boolean evaluatesToLocalValue(Node value, Predicate\u003cNode\u003e locals) {\n     switch(value.getType()) {\n         case Token.ASSIGN:\n             return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) \u0026\u0026 evaluatesToLocalValue(value.getLastChild(), locals));\n         case Token.COMMA:\n             return evaluatesToLocalValue(value.getLastChild(), locals);\n         case Token.AND:\n         case Token.OR:\n             return evaluatesToLocalValue(value.getFirstChild(), locals) \u0026\u0026 evaluatesToLocalValue(value.getLastChild(), locals);\n         case Token.HOOK:\n             return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) \u0026\u0026 evaluatesToLocalValue(value.getLastChild(), locals);\n         case Token.INC:\n         case Token.DEC:\n             if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n                 return evaluatesToLocalValue(value.getFirstChild(), locals);\n             } else {\n                 return true;\n             }\n         case Token.THIS:\n             return locals.apply(value);\n         case Token.NAME:\n             return isImmutableValue(value) || locals.apply(value);\n         case Token.GETELEM:\n         case Token.GETPROP:\n             return locals.apply(value);\n         case Token.CALL:\n             return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);\n         case Token.NEW:\n             return newHasLocalResult(value) || locals.apply(value);\n         case Token.FUNCTION:\n         case Token.REGEXP:\n         case Token.ARRAYLIT:\n         case Token.OBJECTLIT:\n             return true;\n+        case Token.DELPROP:\n         case Token.IN:\n             return true;\n         default:\n             if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {\n                 return true;\n             }\n             throw new IllegalStateException(\"Unexpected expression node\" + value + \"\\n parent:\" + value.getParent());\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2e158bdc1a74af6453d3087a7377ace75e2bcd45": {
      "type": "Ybodychange",
      "commitMessage": "\nFixup local value evaluation.\n\nR\u003dnicksantos\nDELTA\u003d163  (122 added, 29 deleted, 12 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d178\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@655 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/21/10, 11:22 AM",
      "commitName": "2e158bdc1a74af6453d3087a7377ace75e2bcd45",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "12/17/10, 4:47 PM",
      "commitNameOld": "0907b6618a60b2de23c8f7ec2217a37dc5e9a091",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 3.77,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "static boolean evaluatesToLocalValue(Node value, Predicate\u003cNode\u003e locals) {\n    switch(value.getType()) {\n        case Token.ASSIGN:\n            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) \u0026\u0026 evaluatesToLocalValue(value.getLastChild(), locals));\n        case Token.COMMA:\n            return evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.AND:\n        case Token.OR:\n            return evaluatesToLocalValue(value.getFirstChild(), locals) \u0026\u0026 evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.HOOK:\n            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) \u0026\u0026 evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.INC:\n        case Token.DEC:\n            if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n                return evaluatesToLocalValue(value.getFirstChild(), locals);\n            } else {\n                return true;\n            }\n        case Token.THIS:\n            return locals.apply(value);\n        case Token.NAME:\n            return isImmutableValue(value) || locals.apply(value);\n        case Token.GETELEM:\n        case Token.GETPROP:\n            return locals.apply(value);\n        case Token.CALL:\n            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);\n        case Token.NEW:\n            return newHasLocalResult(value) || locals.apply(value);\n        case Token.FUNCTION:\n        case Token.REGEXP:\n        case Token.ARRAYLIT:\n        case Token.OBJECTLIT:\n            return true;\n        case Token.IN:\n            return true;\n        default:\n            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {\n                return true;\n            }\n            throw new IllegalStateException(\"Unexpected expression node\" + value + \"\\n parent:\" + value.getParent());\n    }\n}",
      "path": "src/com/google/javascript/jscomp/NodeUtil.java",
      "functionStartLine": 2431,
      "functionName": "evaluatesToLocalValue",
      "functionAnnotation": "",
      "functionDoc": "\n@param locals A predicate to apply to unknown local values.\n@return Whether the node is known to be a value that is not a reference\n    outside the expression scope.\n",
      "diff": "@@ -1,43 +1,43 @@\n static boolean evaluatesToLocalValue(Node value, Predicate\u003cNode\u003e locals) {\n     switch(value.getType()) {\n         case Token.ASSIGN:\n             return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) \u0026\u0026 evaluatesToLocalValue(value.getLastChild(), locals));\n         case Token.COMMA:\n             return evaluatesToLocalValue(value.getLastChild(), locals);\n         case Token.AND:\n         case Token.OR:\n             return evaluatesToLocalValue(value.getFirstChild(), locals) \u0026\u0026 evaluatesToLocalValue(value.getLastChild(), locals);\n         case Token.HOOK:\n             return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) \u0026\u0026 evaluatesToLocalValue(value.getLastChild(), locals);\n         case Token.INC:\n         case Token.DEC:\n             if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n                 return evaluatesToLocalValue(value.getFirstChild(), locals);\n             } else {\n                 return true;\n             }\n         case Token.THIS:\n             return locals.apply(value);\n         case Token.NAME:\n             return isImmutableValue(value) || locals.apply(value);\n         case Token.GETELEM:\n         case Token.GETPROP:\n             return locals.apply(value);\n         case Token.CALL:\n             return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);\n         case Token.NEW:\n-            return false;\n+            return newHasLocalResult(value) || locals.apply(value);\n         case Token.FUNCTION:\n         case Token.REGEXP:\n         case Token.ARRAYLIT:\n         case Token.OBJECTLIT:\n             return true;\n         case Token.IN:\n             return true;\n         default:\n             if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {\n                 return true;\n             }\n             throw new IllegalStateException(\"Unexpected expression node\" + value + \"\\n parent:\" + value.getParent());\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0907b6618a60b2de23c8f7ec2217a37dc5e9a091": {
      "type": "Ybodychange",
      "commitMessage": "\nFix improper analysis of NEW, the bad way:\nby assuming NEW always returns a non-local result.\nFixes issue 303.\n\nR\u003djohnlenz\nDELTA\u003d68  (56 added, 0 deleted, 12 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d161\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@647 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/17/10, 4:47 PM",
      "commitName": "0907b6618a60b2de23c8f7ec2217a37dc5e9a091",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "12/16/10, 12:17 PM",
      "commitNameOld": "81a77a269d5a9cd6b9baf34812b17fd22933b46e",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 1.19,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "static boolean evaluatesToLocalValue(Node value, Predicate\u003cNode\u003e locals) {\n    switch(value.getType()) {\n        case Token.ASSIGN:\n            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) \u0026\u0026 evaluatesToLocalValue(value.getLastChild(), locals));\n        case Token.COMMA:\n            return evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.AND:\n        case Token.OR:\n            return evaluatesToLocalValue(value.getFirstChild(), locals) \u0026\u0026 evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.HOOK:\n            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) \u0026\u0026 evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.INC:\n        case Token.DEC:\n            if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n                return evaluatesToLocalValue(value.getFirstChild(), locals);\n            } else {\n                return true;\n            }\n        case Token.THIS:\n            return locals.apply(value);\n        case Token.NAME:\n            return isImmutableValue(value) || locals.apply(value);\n        case Token.GETELEM:\n        case Token.GETPROP:\n            return locals.apply(value);\n        case Token.CALL:\n            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);\n        case Token.NEW:\n            return false;\n        case Token.FUNCTION:\n        case Token.REGEXP:\n        case Token.ARRAYLIT:\n        case Token.OBJECTLIT:\n            return true;\n        case Token.IN:\n            return true;\n        default:\n            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {\n                return true;\n            }\n            throw new IllegalStateException(\"Unexpected expression node\" + value + \"\\n parent:\" + value.getParent());\n    }\n}",
      "path": "src/com/google/javascript/jscomp/NodeUtil.java",
      "functionStartLine": 2424,
      "functionName": "evaluatesToLocalValue",
      "functionAnnotation": "",
      "functionDoc": "\n@param locals A predicate to apply to unknown local values.\n@return Whether the node is known to be a value that is not a reference\n    outside the expression scope.\n",
      "diff": "@@ -1,43 +1,43 @@\n static boolean evaluatesToLocalValue(Node value, Predicate\u003cNode\u003e locals) {\n     switch(value.getType()) {\n         case Token.ASSIGN:\n             return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) \u0026\u0026 evaluatesToLocalValue(value.getLastChild(), locals));\n         case Token.COMMA:\n             return evaluatesToLocalValue(value.getLastChild(), locals);\n         case Token.AND:\n         case Token.OR:\n             return evaluatesToLocalValue(value.getFirstChild(), locals) \u0026\u0026 evaluatesToLocalValue(value.getLastChild(), locals);\n         case Token.HOOK:\n             return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) \u0026\u0026 evaluatesToLocalValue(value.getLastChild(), locals);\n         case Token.INC:\n         case Token.DEC:\n             if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n                 return evaluatesToLocalValue(value.getFirstChild(), locals);\n             } else {\n                 return true;\n             }\n         case Token.THIS:\n             return locals.apply(value);\n         case Token.NAME:\n             return isImmutableValue(value) || locals.apply(value);\n         case Token.GETELEM:\n         case Token.GETPROP:\n             return locals.apply(value);\n         case Token.CALL:\n             return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);\n         case Token.NEW:\n-            return true;\n+            return false;\n         case Token.FUNCTION:\n         case Token.REGEXP:\n         case Token.ARRAYLIT:\n         case Token.OBJECTLIT:\n             return true;\n         case Token.IN:\n             return true;\n         default:\n             if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {\n                 return true;\n             }\n             throw new IllegalStateException(\"Unexpected expression node\" + value + \"\\n parent:\" + value.getParent());\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ef332935817a940ca10d1ce431d8a2037fe59ac9": {
      "type": "Ybodychange",
      "commitMessage": "\nAssume \"toString\" and \"valueOf\" are side-effect free and \"toString\"\nreturns a string.\n\nR\u003dnicksantos\nDELTA\u003d39  (36 added, 0 deleted, 3 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d17\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@571 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/29/10, 1:42 PM",
      "commitName": "ef332935817a940ca10d1ce431d8a2037fe59ac9",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/29/10, 10:09 AM",
      "commitNameOld": "73f98ee988dad825ba8320bf4d8df0413fde531c",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 0.15,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "static boolean evaluatesToLocalValue(Node value, Predicate\u003cNode\u003e locals) {\n    switch(value.getType()) {\n        case Token.ASSIGN:\n            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) \u0026\u0026 evaluatesToLocalValue(value.getLastChild(), locals));\n        case Token.COMMA:\n            return evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.AND:\n        case Token.OR:\n            return evaluatesToLocalValue(value.getFirstChild(), locals) \u0026\u0026 evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.HOOK:\n            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) \u0026\u0026 evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.INC:\n        case Token.DEC:\n            if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n                return evaluatesToLocalValue(value.getFirstChild(), locals);\n            } else {\n                return true;\n            }\n        case Token.THIS:\n            return locals.apply(value);\n        case Token.NAME:\n            return isImmutableValue(value) || locals.apply(value);\n        case Token.GETELEM:\n        case Token.GETPROP:\n            return locals.apply(value);\n        case Token.CALL:\n            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);\n        case Token.NEW:\n            return true;\n        case Token.FUNCTION:\n        case Token.REGEXP:\n        case Token.ARRAYLIT:\n        case Token.OBJECTLIT:\n            return true;\n        case Token.IN:\n            return true;\n        default:\n            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {\n                return true;\n            }\n            throw new IllegalStateException(\"Unexpected expression node\" + value + \"\\n parent:\" + value.getParent());\n    }\n}",
      "path": "src/com/google/javascript/jscomp/NodeUtil.java",
      "functionStartLine": 2348,
      "functionName": "evaluatesToLocalValue",
      "functionAnnotation": "",
      "functionDoc": "\n@param locals A predicate to apply to unknown local values.\n@return Whether the node is known to be a value that is not a reference\n    outside the expression scope.\n",
      "diff": "@@ -1,43 +1,43 @@\n static boolean evaluatesToLocalValue(Node value, Predicate\u003cNode\u003e locals) {\n     switch(value.getType()) {\n         case Token.ASSIGN:\n             return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) \u0026\u0026 evaluatesToLocalValue(value.getLastChild(), locals));\n         case Token.COMMA:\n             return evaluatesToLocalValue(value.getLastChild(), locals);\n         case Token.AND:\n         case Token.OR:\n             return evaluatesToLocalValue(value.getFirstChild(), locals) \u0026\u0026 evaluatesToLocalValue(value.getLastChild(), locals);\n         case Token.HOOK:\n             return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) \u0026\u0026 evaluatesToLocalValue(value.getLastChild(), locals);\n         case Token.INC:\n         case Token.DEC:\n             if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n                 return evaluatesToLocalValue(value.getFirstChild(), locals);\n             } else {\n                 return true;\n             }\n         case Token.THIS:\n             return locals.apply(value);\n         case Token.NAME:\n             return isImmutableValue(value) || locals.apply(value);\n         case Token.GETELEM:\n         case Token.GETPROP:\n             return locals.apply(value);\n         case Token.CALL:\n-            return callHasLocalResult(value) || locals.apply(value);\n+            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);\n         case Token.NEW:\n             return true;\n         case Token.FUNCTION:\n         case Token.REGEXP:\n         case Token.ARRAYLIT:\n         case Token.OBJECTLIT:\n             return true;\n         case Token.IN:\n             return true;\n         default:\n             if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {\n                 return true;\n             }\n             throw new IllegalStateException(\"Unexpected expression node\" + value + \"\\n parent:\" + value.getParent());\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6a2378d43d1f06344f6418388d45c66fe3466a07": {
      "type": "Yintroduced",
      "commitMessage": "\nTake advantage of the finer grain side-effect information when\ndetermining side-effects.\nThe bulk of the changes here are the move of the \"isKnownLocalValue\"\nfunction and its tests from to NodeUtil/NodeUtilTest.\n\nR\u003dnicksantos\nDELTA\u003d664  (419 added, 201 deleted, 44 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d260873\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@466 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/27/10, 4:16 PM",
      "commitName": "6a2378d43d1f06344f6418388d45c66fe3466a07",
      "commitAuthor": "johnlenz@google.com",
      "diff": "@@ -0,0 +1,43 @@\n+static boolean evaluatesToLocalValue(Node value, Predicate\u003cNode\u003e locals) {\n+    switch(value.getType()) {\n+        case Token.ASSIGN:\n+            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) \u0026\u0026 evaluatesToLocalValue(value.getLastChild(), locals));\n+        case Token.COMMA:\n+            return evaluatesToLocalValue(value.getLastChild(), locals);\n+        case Token.AND:\n+        case Token.OR:\n+            return evaluatesToLocalValue(value.getFirstChild(), locals) \u0026\u0026 evaluatesToLocalValue(value.getLastChild(), locals);\n+        case Token.HOOK:\n+            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) \u0026\u0026 evaluatesToLocalValue(value.getLastChild(), locals);\n+        case Token.INC:\n+        case Token.DEC:\n+            if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n+                return evaluatesToLocalValue(value.getFirstChild(), locals);\n+            } else {\n+                return true;\n+            }\n+        case Token.THIS:\n+            return locals.apply(value);\n+        case Token.NAME:\n+            return isImmutableValue(value) || locals.apply(value);\n+        case Token.GETELEM:\n+        case Token.GETPROP:\n+            return locals.apply(value);\n+        case Token.CALL:\n+            return callHasLocalResult(value) || locals.apply(value);\n+        case Token.NEW:\n+            return true;\n+        case Token.FUNCTION:\n+        case Token.REGEXP:\n+        case Token.ARRAYLIT:\n+        case Token.OBJECTLIT:\n+            return true;\n+        case Token.IN:\n+            return true;\n+        default:\n+            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {\n+                return true;\n+            }\n+            throw new IllegalStateException(\"Unexpected expression node\" + value + \"\\n parent:\" + value.getParent());\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "static boolean evaluatesToLocalValue(Node value, Predicate\u003cNode\u003e locals) {\n    switch(value.getType()) {\n        case Token.ASSIGN:\n            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) \u0026\u0026 evaluatesToLocalValue(value.getLastChild(), locals));\n        case Token.COMMA:\n            return evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.AND:\n        case Token.OR:\n            return evaluatesToLocalValue(value.getFirstChild(), locals) \u0026\u0026 evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.HOOK:\n            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) \u0026\u0026 evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.INC:\n        case Token.DEC:\n            if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n                return evaluatesToLocalValue(value.getFirstChild(), locals);\n            } else {\n                return true;\n            }\n        case Token.THIS:\n            return locals.apply(value);\n        case Token.NAME:\n            return isImmutableValue(value) || locals.apply(value);\n        case Token.GETELEM:\n        case Token.GETPROP:\n            return locals.apply(value);\n        case Token.CALL:\n            return callHasLocalResult(value) || locals.apply(value);\n        case Token.NEW:\n            return true;\n        case Token.FUNCTION:\n        case Token.REGEXP:\n        case Token.ARRAYLIT:\n        case Token.OBJECTLIT:\n            return true;\n        case Token.IN:\n            return true;\n        default:\n            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {\n                return true;\n            }\n            throw new IllegalStateException(\"Unexpected expression node\" + value + \"\\n parent:\" + value.getParent());\n    }\n}",
      "path": "src/com/google/javascript/jscomp/NodeUtil.java",
      "functionStartLine": 2259,
      "functionName": "evaluatesToLocalValue",
      "functionAnnotation": "",
      "functionDoc": "\n@param locals A predicate to apply to unknown local values.\n@return Whether the node is known to be a value that is not a reference\n    outside the expression scope.\n"
    }
  }
}