{
  "origin": "codeshovel",
  "repositoryName": "Closure-115b",
  "repositoryPath": "/tmp/Closure-115b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FunctionInjector.java",
  "functionName": "classifyCallSite",
  "functionId": "classifyCallSite___callNode-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/FunctionInjector.java",
  "functionAnnotation": "",
  "functionDoc": "Determine which, if any, of the supported types the call site is.\n",
  "functionStartLine": 394,
  "functionEndLine": 434,
  "numCommitsSeen": 36,
  "timeTaken": 2128,
  "changeHistory": [
    "98a487531ce3d6555851398daead0471b5932774",
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
    "828828472848b88b6d3b1e847fa8be5dde78e2da",
    "0b7eccf2fd3a9293d7b513fbb766d7bc06abd7e0",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "98a487531ce3d6555851398daead0471b5932774": "Ybodychange",
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c": "Ybodychange",
    "828828472848b88b6d3b1e847fa8be5dde78e2da": "Ybodychange",
    "0b7eccf2fd3a9293d7b513fbb766d7bc06abd7e0": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "98a487531ce3d6555851398daead0471b5932774": {
      "type": "Ybodychange",
      "commitMessage": "\nFix incosistent internal state caused by when multiple functions are\ninlined into the same expression.\n\nR\u003dnicksantos\nDELTA\u003d300  (131 added, 51 deleted, 118 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5029\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2052 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/18/12, 9:58 AM",
      "commitName": "98a487531ce3d6555851398daead0471b5932774",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "5/18/12, 11:09 AM",
      "commitNameOld": "70a5626922ea7e8c98747e22b6986638ba38fadc",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 30.95,
      "commitsBetweenForRepo": 73,
      "commitsBetweenForFile": 1,
      "actualSource": "private CallSiteType classifyCallSite(Node callNode) {\n    Node parent \u003d callNode.getParent();\n    Node grandParent \u003d parent.getParent();\n    if (NodeUtil.isExprCall(parent)) {\n        return CallSiteType.SIMPLE_CALL;\n    } else if (NodeUtil.isExprAssign(grandParent) \u0026\u0026 !NodeUtil.isVarOrSimpleAssignLhs(callNode, parent) \u0026\u0026 parent.getFirstChild().isName() \u0026\u0026 !NodeUtil.isConstantName(parent.getFirstChild())) {\n        return CallSiteType.SIMPLE_ASSIGNMENT;\n    } else if (parent.isName() \u0026\u0026 !NodeUtil.isConstantName(parent) \u0026\u0026 grandParent.isVar() \u0026\u0026 grandParent.hasOneChild()) {\n        return CallSiteType.VAR_DECL_SIMPLE_ASSIGNMENT;\n    } else {\n        Node expressionRoot \u003d ExpressionDecomposer.findExpressionRoot(callNode);\n        if (expressionRoot !\u003d null) {\n            ExpressionDecomposer decomposer \u003d new ExpressionDecomposer(compiler, safeNameIdSupplier, knownConstants);\n            DecompositionType type \u003d decomposer.canExposeExpression(callNode);\n            if (type \u003d\u003d DecompositionType.MOVABLE) {\n                return CallSiteType.EXPRESSION;\n            } else if (type \u003d\u003d DecompositionType.DECOMPOSABLE) {\n                return CallSiteType.DECOMPOSABLE_EXPRESSION;\n            } else {\n                Preconditions.checkState(type \u003d\u003d DecompositionType.UNDECOMPOSABLE);\n            }\n        }\n    }\n    return CallSiteType.UNSUPPORTED;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionInjector.java",
      "functionStartLine": 395,
      "functionName": "classifyCallSite",
      "functionAnnotation": "",
      "functionDoc": "Determine which, if any, of the supported types the call site is.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c": {
      "type": "Ybodychange",
      "commitMessage": "\nReplace the bulk of the Node.getType() \u003d\u003d Token.XXX calls with\nNode.isXXX calls.\n\nR\u003dnicksantos\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3677\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1582 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/10/11, 8:36 AM",
      "commitName": "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "8/22/11, 5:34 PM",
      "commitNameOld": "de20cf30dfdf0f885c9b97dfb75f8425df0280b9",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 79.67,
      "commitsBetweenForRepo": 187,
      "commitsBetweenForFile": 1,
      "actualSource": "private CallSiteType classifyCallSite(Node callNode) {\n    Node parent \u003d callNode.getParent();\n    Node grandParent \u003d parent.getParent();\n    if (NodeUtil.isExprCall(parent)) {\n        return CallSiteType.SIMPLE_CALL;\n    } else if (NodeUtil.isExprAssign(grandParent) \u0026\u0026 !NodeUtil.isVarOrSimpleAssignLhs(callNode, parent) \u0026\u0026 parent.getFirstChild().isName() \u0026\u0026 !NodeUtil.isConstantName(parent.getFirstChild())) {\n        return CallSiteType.SIMPLE_ASSIGNMENT;\n    } else if (parent.isName() \u0026\u0026 !NodeUtil.isConstantName(parent) \u0026\u0026 grandParent.isVar() \u0026\u0026 grandParent.hasOneChild()) {\n        return CallSiteType.VAR_DECL_SIMPLE_ASSIGNMENT;\n    } else {\n        Node expressionRoot \u003d ExpressionDecomposer.findExpressionRoot(callNode);\n        if (expressionRoot !\u003d null) {\n            ExpressionDecomposer decomposer \u003d new ExpressionDecomposer(compiler, safeNameIdSupplier, knownConstants);\n            DecompositionType type \u003d decomposer.canExposeExpression(callNode);\n            if (type \u003d\u003d DecompositionType.MOVABLE) {\n                return CallSiteType.EXPRESSION;\n            } else if (type \u003d\u003d DecompositionType.DECOMPOSABLE) {\n                return CallSiteType.DECOMPOSABLE_EXPRESSION;\n            } else {\n                Preconditions.checkState(type \u003d\u003d DecompositionType.UNDECOMPOSABLE);\n            }\n        }\n    }\n    return CallSiteType.UNSUPPORTED;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionInjector.java",
      "functionStartLine": 351,
      "functionName": "classifyCallSite",
      "functionAnnotation": "",
      "functionDoc": "Determine which, if any, of the supported types the call site is.\n",
      "diff": "@@ -1,25 +1,25 @@\n private CallSiteType classifyCallSite(Node callNode) {\n     Node parent \u003d callNode.getParent();\n     Node grandParent \u003d parent.getParent();\n     if (NodeUtil.isExprCall(parent)) {\n         return CallSiteType.SIMPLE_CALL;\n-    } else if (NodeUtil.isExprAssign(grandParent) \u0026\u0026 !NodeUtil.isVarOrSimpleAssignLhs(callNode, parent) \u0026\u0026 parent.getFirstChild().getType() \u003d\u003d Token.NAME \u0026\u0026 !NodeUtil.isConstantName(parent.getFirstChild())) {\n+    } else if (NodeUtil.isExprAssign(grandParent) \u0026\u0026 !NodeUtil.isVarOrSimpleAssignLhs(callNode, parent) \u0026\u0026 parent.getFirstChild().isName() \u0026\u0026 !NodeUtil.isConstantName(parent.getFirstChild())) {\n         return CallSiteType.SIMPLE_ASSIGNMENT;\n-    } else if (parent.getType() \u003d\u003d Token.NAME \u0026\u0026 !NodeUtil.isConstantName(parent) \u0026\u0026 grandParent.getType() \u003d\u003d Token.VAR \u0026\u0026 grandParent.hasOneChild()) {\n+    } else if (parent.isName() \u0026\u0026 !NodeUtil.isConstantName(parent) \u0026\u0026 grandParent.isVar() \u0026\u0026 grandParent.hasOneChild()) {\n         return CallSiteType.VAR_DECL_SIMPLE_ASSIGNMENT;\n     } else {\n         Node expressionRoot \u003d ExpressionDecomposer.findExpressionRoot(callNode);\n         if (expressionRoot !\u003d null) {\n             ExpressionDecomposer decomposer \u003d new ExpressionDecomposer(compiler, safeNameIdSupplier, knownConstants);\n             DecompositionType type \u003d decomposer.canExposeExpression(callNode);\n             if (type \u003d\u003d DecompositionType.MOVABLE) {\n                 return CallSiteType.EXPRESSION;\n             } else if (type \u003d\u003d DecompositionType.DECOMPOSABLE) {\n                 return CallSiteType.DECOMPOSABLE_EXPRESSION;\n             } else {\n                 Preconditions.checkState(type \u003d\u003d DecompositionType.UNDECOMPOSABLE);\n             }\n         }\n     }\n     return CallSiteType.UNSUPPORTED;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "828828472848b88b6d3b1e847fa8be5dde78e2da": {
      "type": "Ybodychange",
      "commitMessage": "\nMake sure that the compiler doesn\u0027t crash when you have\nfunction f(undefined) {}\nand you left out the default externs.\nI blame this on a poorly-named function\n\nR\u003djohnlenz\nDELTA\u003d70  (53 added, 7 deleted, 10 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1920\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1108 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/16/11, 3:01 PM",
      "commitName": "828828472848b88b6d3b1e847fa8be5dde78e2da",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "5/16/11, 8:14 AM",
      "commitNameOld": "b783533aac33c06fc34ed4c3f284aa8411ea0c54",
      "commitAuthorOld": "tylerg@google.com",
      "daysBetweenCommits": 0.28,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "private CallSiteType classifyCallSite(Node callNode) {\n    Node parent \u003d callNode.getParent();\n    Node grandParent \u003d parent.getParent();\n    if (NodeUtil.isExprCall(parent)) {\n        return CallSiteType.SIMPLE_CALL;\n    } else if (NodeUtil.isExprAssign(grandParent) \u0026\u0026 !NodeUtil.isVarOrSimpleAssignLhs(callNode, parent) \u0026\u0026 parent.getFirstChild().getType() \u003d\u003d Token.NAME \u0026\u0026 !NodeUtil.isConstantName(parent.getFirstChild())) {\n        return CallSiteType.SIMPLE_ASSIGNMENT;\n    } else if (parent.getType() \u003d\u003d Token.NAME \u0026\u0026 !NodeUtil.isConstantName(parent) \u0026\u0026 grandParent.getType() \u003d\u003d Token.VAR \u0026\u0026 grandParent.hasOneChild()) {\n        return CallSiteType.VAR_DECL_SIMPLE_ASSIGNMENT;\n    } else {\n        Node expressionRoot \u003d ExpressionDecomposer.findExpressionRoot(callNode);\n        if (expressionRoot !\u003d null) {\n            ExpressionDecomposer decomposer \u003d new ExpressionDecomposer(compiler, safeNameIdSupplier, knownConstants);\n            DecompositionType type \u003d decomposer.canExposeExpression(callNode);\n            if (type \u003d\u003d DecompositionType.MOVABLE) {\n                return CallSiteType.EXPRESSION;\n            } else if (type \u003d\u003d DecompositionType.DECOMPOSABLE) {\n                return CallSiteType.DECOMPOSABLE_EXPRESSION;\n            } else {\n                Preconditions.checkState(type \u003d\u003d DecompositionType.UNDECOMPOSABLE);\n            }\n        }\n    }\n    return CallSiteType.UNSUPPORTED;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionInjector.java",
      "functionStartLine": 330,
      "functionName": "classifyCallSite",
      "functionAnnotation": "",
      "functionDoc": "Determine which, if any, of the supported types the call site is.\n",
      "diff": "@@ -1,25 +1,25 @@\n private CallSiteType classifyCallSite(Node callNode) {\n     Node parent \u003d callNode.getParent();\n     Node grandParent \u003d parent.getParent();\n     if (NodeUtil.isExprCall(parent)) {\n         return CallSiteType.SIMPLE_CALL;\n-    } else if (NodeUtil.isExprAssign(grandParent) \u0026\u0026 !NodeUtil.isLhs(callNode, parent) \u0026\u0026 parent.getFirstChild().getType() \u003d\u003d Token.NAME \u0026\u0026 !NodeUtil.isConstantName(parent.getFirstChild())) {\n+    } else if (NodeUtil.isExprAssign(grandParent) \u0026\u0026 !NodeUtil.isVarOrSimpleAssignLhs(callNode, parent) \u0026\u0026 parent.getFirstChild().getType() \u003d\u003d Token.NAME \u0026\u0026 !NodeUtil.isConstantName(parent.getFirstChild())) {\n         return CallSiteType.SIMPLE_ASSIGNMENT;\n     } else if (parent.getType() \u003d\u003d Token.NAME \u0026\u0026 !NodeUtil.isConstantName(parent) \u0026\u0026 grandParent.getType() \u003d\u003d Token.VAR \u0026\u0026 grandParent.hasOneChild()) {\n         return CallSiteType.VAR_DECL_SIMPLE_ASSIGNMENT;\n     } else {\n         Node expressionRoot \u003d ExpressionDecomposer.findExpressionRoot(callNode);\n         if (expressionRoot !\u003d null) {\n             ExpressionDecomposer decomposer \u003d new ExpressionDecomposer(compiler, safeNameIdSupplier, knownConstants);\n             DecompositionType type \u003d decomposer.canExposeExpression(callNode);\n             if (type \u003d\u003d DecompositionType.MOVABLE) {\n                 return CallSiteType.EXPRESSION;\n             } else if (type \u003d\u003d DecompositionType.DECOMPOSABLE) {\n                 return CallSiteType.DECOMPOSABLE_EXPRESSION;\n             } else {\n                 Preconditions.checkState(type \u003d\u003d DecompositionType.UNDECOMPOSABLE);\n             }\n         }\n     }\n     return CallSiteType.UNSUPPORTED;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0b7eccf2fd3a9293d7b513fbb766d7bc06abd7e0": {
      "type": "Ybodychange",
      "commitMessage": "A bunch of bug fixes\nAdded the --warning_level\u003d{QUIET|DEFAULT|VERBOSE} flag,\nto match the webservice API\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@3 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/6/09, 5:24 PM",
      "commitName": "0b7eccf2fd3a9293d7b513fbb766d7bc06abd7e0",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/3/09, 3:51 PM",
      "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 3.06,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private CallSiteType classifyCallSite(Node callNode) {\n    Node parent \u003d callNode.getParent();\n    Node grandParent \u003d parent.getParent();\n    if (NodeUtil.isExprCall(parent)) {\n        return CallSiteType.SIMPLE_CALL;\n    } else if (NodeUtil.isExprAssign(grandParent) \u0026\u0026 !NodeUtil.isLhs(callNode, parent) \u0026\u0026 parent.getFirstChild().getType() \u003d\u003d Token.NAME \u0026\u0026 !NodeUtil.isConstantName(parent.getFirstChild())) {\n        return CallSiteType.SIMPLE_ASSIGNMENT;\n    } else if (parent.getType() \u003d\u003d Token.NAME \u0026\u0026 !NodeUtil.isConstantName(parent) \u0026\u0026 grandParent.getType() \u003d\u003d Token.VAR \u0026\u0026 grandParent.hasOneChild()) {\n        return CallSiteType.VAR_DECL_SIMPLE_ASSIGNMENT;\n    } else {\n        Node expressionRoot \u003d ExpressionDecomposer.findExpressionRoot(callNode);\n        if (expressionRoot !\u003d null) {\n            ExpressionDecomposer decomposer \u003d new ExpressionDecomposer(compiler, safeNameIdSupplier, knownConstants);\n            DecompositionType type \u003d decomposer.canExposeExpression(callNode);\n            if (type \u003d\u003d DecompositionType.MOVABLE) {\n                return CallSiteType.EXPRESSION;\n            } else if (type \u003d\u003d DecompositionType.DECOMPOSABLE) {\n                return CallSiteType.DECOMPOSABLE_EXPRESSION;\n            } else {\n                Preconditions.checkState(type \u003d\u003d DecompositionType.UNDECOMPOSABLE);\n            }\n        }\n    }\n    return CallSiteType.UNSUPPORTED;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionInjector.java",
      "functionStartLine": 313,
      "functionName": "classifyCallSite",
      "functionAnnotation": "",
      "functionDoc": "Determine which, if any, of the supported types the call site is.\n",
      "diff": "@@ -1,25 +1,25 @@\n private CallSiteType classifyCallSite(Node callNode) {\n     Node parent \u003d callNode.getParent();\n     Node grandParent \u003d parent.getParent();\n     if (NodeUtil.isExprCall(parent)) {\n         return CallSiteType.SIMPLE_CALL;\n-    } else if (NodeUtil.isExprAssign(grandParent) \u0026\u0026 NodeUtil.isRValue(callNode) \u0026\u0026 parent.getFirstChild().getType() \u003d\u003d Token.NAME \u0026\u0026 !NodeUtil.isConstantName(parent.getFirstChild())) {\n+    } else if (NodeUtil.isExprAssign(grandParent) \u0026\u0026 !NodeUtil.isLhs(callNode, parent) \u0026\u0026 parent.getFirstChild().getType() \u003d\u003d Token.NAME \u0026\u0026 !NodeUtil.isConstantName(parent.getFirstChild())) {\n         return CallSiteType.SIMPLE_ASSIGNMENT;\n     } else if (parent.getType() \u003d\u003d Token.NAME \u0026\u0026 !NodeUtil.isConstantName(parent) \u0026\u0026 grandParent.getType() \u003d\u003d Token.VAR \u0026\u0026 grandParent.hasOneChild()) {\n         return CallSiteType.VAR_DECL_SIMPLE_ASSIGNMENT;\n     } else {\n         Node expressionRoot \u003d ExpressionDecomposer.findExpressionRoot(callNode);\n         if (expressionRoot !\u003d null) {\n             ExpressionDecomposer decomposer \u003d new ExpressionDecomposer(compiler, safeNameIdSupplier, knownConstants);\n             DecompositionType type \u003d decomposer.canExposeExpression(callNode);\n             if (type \u003d\u003d DecompositionType.MOVABLE) {\n                 return CallSiteType.EXPRESSION;\n             } else if (type \u003d\u003d DecompositionType.DECOMPOSABLE) {\n                 return CallSiteType.DECOMPOSABLE_EXPRESSION;\n             } else {\n                 Preconditions.checkState(type \u003d\u003d DecompositionType.UNDECOMPOSABLE);\n             }\n         }\n     }\n     return CallSiteType.UNSUPPORTED;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,25 @@\n+private CallSiteType classifyCallSite(Node callNode) {\n+    Node parent \u003d callNode.getParent();\n+    Node grandParent \u003d parent.getParent();\n+    if (NodeUtil.isExprCall(parent)) {\n+        return CallSiteType.SIMPLE_CALL;\n+    } else if (NodeUtil.isExprAssign(grandParent) \u0026\u0026 NodeUtil.isRValue(callNode) \u0026\u0026 parent.getFirstChild().getType() \u003d\u003d Token.NAME \u0026\u0026 !NodeUtil.isConstantName(parent.getFirstChild())) {\n+        return CallSiteType.SIMPLE_ASSIGNMENT;\n+    } else if (parent.getType() \u003d\u003d Token.NAME \u0026\u0026 !NodeUtil.isConstantName(parent) \u0026\u0026 grandParent.getType() \u003d\u003d Token.VAR \u0026\u0026 grandParent.hasOneChild()) {\n+        return CallSiteType.VAR_DECL_SIMPLE_ASSIGNMENT;\n+    } else {\n+        Node expressionRoot \u003d ExpressionDecomposer.findExpressionRoot(callNode);\n+        if (expressionRoot !\u003d null) {\n+            ExpressionDecomposer decomposer \u003d new ExpressionDecomposer(compiler, safeNameIdSupplier, knownConstants);\n+            DecompositionType type \u003d decomposer.canExposeExpression(callNode);\n+            if (type \u003d\u003d DecompositionType.MOVABLE) {\n+                return CallSiteType.EXPRESSION;\n+            } else if (type \u003d\u003d DecompositionType.DECOMPOSABLE) {\n+                return CallSiteType.DECOMPOSABLE_EXPRESSION;\n+            } else {\n+                Preconditions.checkState(type \u003d\u003d DecompositionType.UNDECOMPOSABLE);\n+            }\n+        }\n+    }\n+    return CallSiteType.UNSUPPORTED;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private CallSiteType classifyCallSite(Node callNode) {\n    Node parent \u003d callNode.getParent();\n    Node grandParent \u003d parent.getParent();\n    if (NodeUtil.isExprCall(parent)) {\n        return CallSiteType.SIMPLE_CALL;\n    } else if (NodeUtil.isExprAssign(grandParent) \u0026\u0026 NodeUtil.isRValue(callNode) \u0026\u0026 parent.getFirstChild().getType() \u003d\u003d Token.NAME \u0026\u0026 !NodeUtil.isConstantName(parent.getFirstChild())) {\n        return CallSiteType.SIMPLE_ASSIGNMENT;\n    } else if (parent.getType() \u003d\u003d Token.NAME \u0026\u0026 !NodeUtil.isConstantName(parent) \u0026\u0026 grandParent.getType() \u003d\u003d Token.VAR \u0026\u0026 grandParent.hasOneChild()) {\n        return CallSiteType.VAR_DECL_SIMPLE_ASSIGNMENT;\n    } else {\n        Node expressionRoot \u003d ExpressionDecomposer.findExpressionRoot(callNode);\n        if (expressionRoot !\u003d null) {\n            ExpressionDecomposer decomposer \u003d new ExpressionDecomposer(compiler, safeNameIdSupplier, knownConstants);\n            DecompositionType type \u003d decomposer.canExposeExpression(callNode);\n            if (type \u003d\u003d DecompositionType.MOVABLE) {\n                return CallSiteType.EXPRESSION;\n            } else if (type \u003d\u003d DecompositionType.DECOMPOSABLE) {\n                return CallSiteType.DECOMPOSABLE_EXPRESSION;\n            } else {\n                Preconditions.checkState(type \u003d\u003d DecompositionType.UNDECOMPOSABLE);\n            }\n        }\n    }\n    return CallSiteType.UNSUPPORTED;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionInjector.java",
      "functionStartLine": 313,
      "functionName": "classifyCallSite",
      "functionAnnotation": "",
      "functionDoc": "Determine which, if any, of the supported types the call site is.\n"
    }
  }
}