{
  "origin": "codeshovel",
  "repositoryName": "Closure-115b",
  "repositoryPath": "/tmp/Closure-115b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "InlineFunctions.java",
  "functionName": "isCandidateFunction",
  "functionId": "isCandidateFunction___fn-Function",
  "sourceFilePath": "src/com/google/javascript/jscomp/InlineFunctions.java",
  "functionAnnotation": "",
  "functionDoc": "Checks if the given function matches the criteria for an inlinable\nfunction.\n",
  "functionStartLine": 333,
  "functionEndLine": 359,
  "numCommitsSeen": 43,
  "timeTaken": 2104,
  "changeHistory": [
    "44e59948342527c9d8ffc6f2b01d86af72aaef54",
    "cb7f2a3260cdd2341721fe3ed0db910ad96b0763",
    "bca9abb0e3062d373fe52c0e8340337588c05708",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "44e59948342527c9d8ffc6f2b01d86af72aaef54": "Ybodychange",
    "cb7f2a3260cdd2341721fe3ed0db910ad96b0763": "Yformatchange",
    "bca9abb0e3062d373fe52c0e8340337588c05708": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "44e59948342527c9d8ffc6f2b01d86af72aaef54": {
      "type": "Ybodychange",
      "commitMessage": "\nExperimental initial module specialization.\n\nThis optimization replaces functions in the initial module with specialized\nversions that are only safe in the initial module.\nThe original, general, versions of the functions are \"fixed up\" in later\nmodules.\nThis optimization can shrink the initial module significantly but the fixup code\nin later modules increases overall code size.\n\nSee SpecializeModule.java for more details.\n\nThis change modifies three existing passes: DevirtualizePrototyMethods, InlineFunctions, and\nRemoveUnusedPrototypeProperties, to be specialization-aware.\nWhen running under specialization, these modules now ask before modifying or\nremoving a function and report\nwhat functions they have modified or removed.\n\nFiles meriting extra scrutiny:\n- DevirtualizePrototypeMethods.java\n- RemoveUnusedPrototypeProperties.java\n- InlineFunctions.java\n- DefaultPassConfig.java\n\nR\u003dacleung\nDELTA\u003d1820  (1810 added, 0 deleted, 10 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d103003\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@353 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/12/10, 11:58 AM",
      "commitName": "44e59948342527c9d8ffc6f2b01d86af72aaef54",
      "commitAuthor": "dcc@google.com",
      "commitDateOld": "8/12/10, 6:02 PM",
      "commitNameOld": "15acafb00636f99295b394145b9b60a5e624ddfa",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": -0.25,
      "commitsBetweenForRepo": 0,
      "commitsBetweenForFile": 0,
      "actualSource": "private boolean isCandidateFunction(Function fn) {\n    String fnName \u003d fn.getName();\n    if (compiler.getCodingConvention().isExported(fnName)) {\n        return false;\n    }\n    if (RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(fnName)) {\n        return false;\n    }\n    if (specializationState !\u003d null \u0026\u0026 !specializationState.canFixupFunction(fn.getFunctionNode())) {\n        return false;\n    }\n    Node fnNode \u003d fn.getFunctionNode();\n    return injector.doesFunctionMeetMinimumRequirements(fnName, fnNode);\n}",
      "path": "src/com/google/javascript/jscomp/InlineFunctions.java",
      "functionStartLine": 328,
      "functionName": "isCandidateFunction",
      "functionAnnotation": "",
      "functionDoc": "Checks if the given function matches the criteria for an inlinable\nfunction.\n",
      "diff": "@@ -1,11 +1,14 @@\n private boolean isCandidateFunction(Function fn) {\n     String fnName \u003d fn.getName();\n     if (compiler.getCodingConvention().isExported(fnName)) {\n         return false;\n     }\n     if (RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(fnName)) {\n         return false;\n     }\n+    if (specializationState !\u003d null \u0026\u0026 !specializationState.canFixupFunction(fn.getFunctionNode())) {\n+        return false;\n+    }\n     Node fnNode \u003d fn.getFunctionNode();\n     return injector.doesFunctionMeetMinimumRequirements(fnName, fnNode);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "cb7f2a3260cdd2341721fe3ed0db910ad96b0763": {
      "type": "Yformatchange",
      "commitMessage": "\n\nChange on 2010/04/16 by john\n\n        Enable cross module code motion in advanced mode.\n\n        R\u003dnick\n        DELTA\u003d4  (4 added, 0 deleted, 0 changed)\n\nChange on 2010/04/16 by john\n\n        Allow global anonymous function inlining to be turned off so we can use\n        it in simple mode.\n\n        R\u003drobert\n        DELTA\u003d39  (32 added, 0 deleted, 7 changed)\n\nChange on 2010/04/16 by john\n\n        Turn on RegExp reference warning by default.\n\n        R\u003dalan\n        DELTA\u003d5  (4 added, 0 deleted, 1 changed)\n\nChange on 2010/04/16 by john\n\n        Enable local function inlining in simple mode.\n\n        R\u003drobert\n        DELTA\u003d2  (2 added, 0 deleted, 0 changed)\n\nChange on 2010/04/16 by john\n\n        Enable LineNumberCheck by default in unit tests.\n\n\n        R\u003danatol,mark,nick\n        DELTA\u003d67  (66 added, 0 deleted, 1 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003djqeuwc\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@189 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/16/10, 4:11 PM",
      "commitName": "cb7f2a3260cdd2341721fe3ed0db910ad96b0763",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/5/10, 8:30 AM",
      "commitNameOld": "2a43cf22f1e5e4ee4ddb99aceb5a566c05b0c6d4",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 11.32,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "actualSource": "private boolean isCandidateFunction(Function fn) {\n    String fnName \u003d fn.getName();\n    if (compiler.getCodingConvention().isExported(fnName)) {\n        return false;\n    }\n    if (RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(fnName)) {\n        return false;\n    }\n    Node fnNode \u003d fn.getFunctionNode();\n    return injector.doesFunctionMeetMinimumRequirements(fnName, fnNode);\n}",
      "path": "src/com/google/javascript/jscomp/InlineFunctions.java",
      "functionStartLine": 304,
      "functionName": "isCandidateFunction",
      "functionAnnotation": "",
      "functionDoc": "Checks if the given function matches the criteria for an inlinable\nfunction.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "bca9abb0e3062d373fe52c0e8340337588c05708": {
      "type": "Ybodychange",
      "commitMessage": "Make sure that InlineVariables can inline variables that are never defined.\n\nCreate a function-inlining blacklist.\n\nSome minor type inference fixes.\n\nStart re-architecting type resolution to happen differently.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@77 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/26/10, 1:59 PM",
      "commitName": "bca9abb0e3062d373fe52c0e8340337588c05708",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "11/16/09, 4:04 PM",
      "commitNameOld": "2acd6c1986e36bfdbae85c09eb83ac1940b86c73",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 70.91,
      "commitsBetweenForRepo": 45,
      "commitsBetweenForFile": 1,
      "actualSource": "private boolean isCandidateFunction(Function fn) {\n    String fnName \u003d fn.getName();\n    if (compiler.getCodingConvention().isExported(fnName)) {\n        return false;\n    }\n    if (RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(fnName)) {\n        return false;\n    }\n    Node fnNode \u003d fn.getFunctionNode();\n    return injector.doesFunctionMeetMinimumRequirements(fnName, fnNode);\n}",
      "path": "src/com/google/javascript/jscomp/InlineFunctions.java",
      "functionStartLine": 305,
      "functionName": "isCandidateFunction",
      "functionAnnotation": "",
      "functionDoc": "Checks if the given function matches the criteria for an inlinable\nfunction.\n",
      "diff": "@@ -1,8 +1,11 @@\n private boolean isCandidateFunction(Function fn) {\n     String fnName \u003d fn.getName();\n     if (compiler.getCodingConvention().isExported(fnName)) {\n         return false;\n     }\n+    if (RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(fnName)) {\n+        return false;\n+    }\n     Node fnNode \u003d fn.getFunctionNode();\n     return injector.doesFunctionMeetMinimumRequirements(fnName, fnNode);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,8 @@\n+private boolean isCandidateFunction(Function fn) {\n+    String fnName \u003d fn.getName();\n+    if (compiler.getCodingConvention().isExported(fnName)) {\n+        return false;\n+    }\n+    Node fnNode \u003d fn.getFunctionNode();\n+    return injector.doesFunctionMeetMinimumRequirements(fnName, fnNode);\n+}\n\\ No newline at end of file\n",
      "actualSource": "private boolean isCandidateFunction(Function fn) {\n    String fnName \u003d fn.getName();\n    if (compiler.getCodingConvention().isExported(fnName)) {\n        return false;\n    }\n    Node fnNode \u003d fn.getFunctionNode();\n    return injector.doesFunctionMeetMinimumRequirements(fnName, fnNode);\n}",
      "path": "src/com/google/javascript/jscomp/InlineFunctions.java",
      "functionStartLine": 280,
      "functionName": "isCandidateFunction",
      "functionAnnotation": "",
      "functionDoc": "Checks if the given function matches the criteria for an inlinable\nfunction.\n"
    }
  }
}