{
  "origin": "codeshovel",
  "repositoryName": "Closure-115b",
  "repositoryPath": "/tmp/Closure-115b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ExpressionDecomposer.java",
  "functionName": "moveExpression",
  "functionId": "moveExpression___expression-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/ExpressionDecomposer.java",
  "functionAnnotation": "",
  "functionDoc": "Extract the specified expression from its parent expression.\n\n@see #canExposeExpression\n",
  "functionStartLine": 112,
  "functionEndLine": 129,
  "numCommitsSeen": 25,
  "timeTaken": 1574,
  "changeHistory": [
    "98a487531ce3d6555851398daead0471b5932774",
    "9dfbc803407e714f9744555a1c9e7c4230f1816d",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "98a487531ce3d6555851398daead0471b5932774": "Ybodychange",
    "9dfbc803407e714f9744555a1c9e7c4230f1816d": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "98a487531ce3d6555851398daead0471b5932774": {
      "type": "Ybodychange",
      "commitMessage": "\nFix incosistent internal state caused by when multiple functions are\ninlined into the same expression.\n\nR\u003dnicksantos\nDELTA\u003d300  (131 added, 51 deleted, 118 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5029\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2052 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/18/12, 9:58 AM",
      "commitName": "98a487531ce3d6555851398daead0471b5932774",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "5/18/12, 11:09 AM",
      "commitNameOld": "70a5626922ea7e8c98747e22b6986638ba38fadc",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 30.95,
      "commitsBetweenForRepo": 73,
      "commitsBetweenForFile": 1,
      "actualSource": "void moveExpression(Node expression) {\n    String resultName \u003d getResultValueName();\n    Node injectionPoint \u003d findInjectionPoint(expression);\n    Preconditions.checkNotNull(injectionPoint);\n    Node injectionPointParent \u003d injectionPoint.getParent();\n    Preconditions.checkNotNull(injectionPointParent);\n    Preconditions.checkState(NodeUtil.isStatementBlock(injectionPointParent));\n    Node expressionParent \u003d expression.getParent();\n    expressionParent.replaceChild(expression, IR.name(resultName));\n    Node newExpressionRoot \u003d NodeUtil.newVarNode(resultName, expression);\n    injectionPointParent.addChildBefore(newExpressionRoot, injectionPoint);\n    compiler.reportCodeChange();\n}",
      "path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java",
      "functionStartLine": 112,
      "functionName": "moveExpression",
      "functionAnnotation": "",
      "functionDoc": "Extract the specified expression from its parent expression.\n\n@see #canExposeExpression\n",
      "diff": "@@ -1,13 +1,13 @@\n void moveExpression(Node expression) {\n-    String resultName \u003d getTempValueName();\n+    String resultName \u003d getResultValueName();\n     Node injectionPoint \u003d findInjectionPoint(expression);\n     Preconditions.checkNotNull(injectionPoint);\n     Node injectionPointParent \u003d injectionPoint.getParent();\n     Preconditions.checkNotNull(injectionPointParent);\n     Preconditions.checkState(NodeUtil.isStatementBlock(injectionPointParent));\n     Node expressionParent \u003d expression.getParent();\n     expressionParent.replaceChild(expression, IR.name(resultName));\n     Node newExpressionRoot \u003d NodeUtil.newVarNode(resultName, expression);\n     injectionPointParent.addChildBefore(newExpressionRoot, injectionPoint);\n     compiler.reportCodeChange();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9dfbc803407e714f9744555a1c9e7c4230f1816d": {
      "type": "Ybodychange",
      "commitMessage": "\nUse the new IR interface where possible.\n\nR\u003dnicksantos\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3799\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1641 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/22/11, 2:28 PM",
      "commitName": "9dfbc803407e714f9744555a1c9e7c4230f1816d",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/14/11, 6:13 PM",
      "commitNameOld": "39f629a8cfaab37da55288010640d7e516000b1f",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 7.84,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "actualSource": "void moveExpression(Node expression) {\n    String resultName \u003d getTempValueName();\n    Node injectionPoint \u003d findInjectionPoint(expression);\n    Preconditions.checkNotNull(injectionPoint);\n    Node injectionPointParent \u003d injectionPoint.getParent();\n    Preconditions.checkNotNull(injectionPointParent);\n    Preconditions.checkState(NodeUtil.isStatementBlock(injectionPointParent));\n    Node expressionParent \u003d expression.getParent();\n    expressionParent.replaceChild(expression, IR.name(resultName));\n    Node newExpressionRoot \u003d NodeUtil.newVarNode(resultName, expression);\n    injectionPointParent.addChildBefore(newExpressionRoot, injectionPoint);\n    compiler.reportCodeChange();\n}",
      "path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java",
      "functionStartLine": 112,
      "functionName": "moveExpression",
      "functionAnnotation": "",
      "functionDoc": "Extract the specified expression from its parent expression.\n\n@see #canExposeExpression\n",
      "diff": "@@ -1,13 +1,13 @@\n void moveExpression(Node expression) {\n     String resultName \u003d getTempValueName();\n     Node injectionPoint \u003d findInjectionPoint(expression);\n     Preconditions.checkNotNull(injectionPoint);\n     Node injectionPointParent \u003d injectionPoint.getParent();\n     Preconditions.checkNotNull(injectionPointParent);\n     Preconditions.checkState(NodeUtil.isStatementBlock(injectionPointParent));\n     Node expressionParent \u003d expression.getParent();\n-    expressionParent.replaceChild(expression, Node.newString(Token.NAME, resultName));\n+    expressionParent.replaceChild(expression, IR.name(resultName));\n     Node newExpressionRoot \u003d NodeUtil.newVarNode(resultName, expression);\n     injectionPointParent.addChildBefore(newExpressionRoot, injectionPoint);\n     compiler.reportCodeChange();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,13 @@\n+void moveExpression(Node expression) {\n+    String resultName \u003d getTempValueName();\n+    Node injectionPoint \u003d findInjectionPoint(expression);\n+    Preconditions.checkNotNull(injectionPoint);\n+    Node injectionPointParent \u003d injectionPoint.getParent();\n+    Preconditions.checkNotNull(injectionPointParent);\n+    Preconditions.checkState(NodeUtil.isStatementBlock(injectionPointParent));\n+    Node expressionParent \u003d expression.getParent();\n+    expressionParent.replaceChild(expression, Node.newString(Token.NAME, resultName));\n+    Node newExpressionRoot \u003d NodeUtil.newVarNode(resultName, expression);\n+    injectionPointParent.addChildBefore(newExpressionRoot, injectionPoint);\n+    compiler.reportCodeChange();\n+}\n\\ No newline at end of file\n",
      "actualSource": "void moveExpression(Node expression) {\n    String resultName \u003d getTempValueName();\n    Node injectionPoint \u003d findInjectionPoint(expression);\n    Preconditions.checkNotNull(injectionPoint);\n    Node injectionPointParent \u003d injectionPoint.getParent();\n    Preconditions.checkNotNull(injectionPointParent);\n    Preconditions.checkState(NodeUtil.isStatementBlock(injectionPointParent));\n    Node expressionParent \u003d expression.getParent();\n    expressionParent.replaceChild(expression, Node.newString(Token.NAME, resultName));\n    Node newExpressionRoot \u003d NodeUtil.newVarNode(resultName, expression);\n    injectionPointParent.addChildBefore(newExpressionRoot, injectionPoint);\n    compiler.reportCodeChange();\n}",
      "path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java",
      "functionStartLine": 102,
      "functionName": "moveExpression",
      "functionAnnotation": "",
      "functionDoc": "Extract the specified expression from its parent expression.\n\n@see #canExposeExpression\n"
    }
  }
}