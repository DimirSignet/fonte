{
  "origin": "codeshovel",
  "repositoryName": "Closure-115b",
  "repositoryPath": "/tmp/Closure-115b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FunctionInjector.java",
  "functionName": "doesLowerCost",
  "functionId": "doesLowerCost___fnNode-Node__callCost-int__directInlines-int__costDeltaDirect-int__blockInlines-int__costDeltaBlock-int__removable-boolean",
  "sourceFilePath": "src/com/google/javascript/jscomp/FunctionInjector.java",
  "functionAnnotation": "",
  "functionDoc": "\n@return Whether inlining will lower cost.\n",
  "functionStartLine": 828,
  "functionEndLine": 856,
  "numCommitsSeen": 36,
  "timeTaken": 1750,
  "changeHistory": [
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,12 @@\n+private boolean doesLowerCost(Node fnNode, int callCost, int directInlines, int costDeltaDirect, int blockInlines, int costDeltaBlock, boolean removable) {\n+    int fnInstanceCount \u003d directInlines + blockInlines - (removable ? 1 : 0);\n+    if (fnInstanceCount \u003d\u003d 0) {\n+        if (blockInlines \u003e 0 \u0026\u0026 costDeltaBlock \u003e 0) {\n+            return false;\n+        }\n+        return true;\n+    }\n+    int costDelta \u003d (directInlines * costDeltaDirect) + (blockInlines * costDeltaBlock);\n+    int threshold \u003d (callCost - costDelta) / fnInstanceCount;\n+    return InlineCostEstimator.getCost(fnNode, threshold + 1) \u003c\u003d threshold;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private boolean doesLowerCost(Node fnNode, int callCost, int directInlines, int costDeltaDirect, int blockInlines, int costDeltaBlock, boolean removable) {\n    int fnInstanceCount \u003d directInlines + blockInlines - (removable ? 1 : 0);\n    if (fnInstanceCount \u003d\u003d 0) {\n        if (blockInlines \u003e 0 \u0026\u0026 costDeltaBlock \u003e 0) {\n            return false;\n        }\n        return true;\n    }\n    int costDelta \u003d (directInlines * costDeltaDirect) + (blockInlines * costDeltaBlock);\n    int threshold \u003d (callCost - costDelta) / fnInstanceCount;\n    return InlineCostEstimator.getCost(fnNode, threshold + 1) \u003c\u003d threshold;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionInjector.java",
      "functionStartLine": 749,
      "functionName": "doesLowerCost",
      "functionAnnotation": "",
      "functionDoc": "\n@return Whether inlining will lower cost.\n"
    }
  }
}