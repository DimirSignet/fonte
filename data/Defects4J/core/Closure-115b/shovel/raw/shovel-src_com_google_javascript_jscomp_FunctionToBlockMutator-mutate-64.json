{
  "origin": "codeshovel",
  "repositoryName": "Closure-115b",
  "repositoryPath": "/tmp/Closure-115b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FunctionToBlockMutator.java",
  "functionName": "mutate",
  "functionId": "mutate___fnName-String__fnNode-Node__callNode-Node__resultName-String__needsDefaultResult-boolean__isCallInLoop-boolean",
  "sourceFilePath": "src/com/google/javascript/jscomp/FunctionToBlockMutator.java",
  "functionAnnotation": "",
  "functionDoc": "\n@param fnName The name to use when preparing human readable names.\n@param fnNode The function to prepare.\n@param callNode The call node that will be replaced.\n@param resultName Function results should be assigned to this name.\n@param needsDefaultResult Whether the result value must be set.\n@param isCallInLoop Whether the function body must be prepared to be\n  injected into the body of a loop.\n@return A clone of the function body mutated to be suitable for injection\n  as a statement into another code block.\n",
  "functionStartLine": 64,
  "functionEndLine": 115,
  "numCommitsSeen": 26,
  "timeTaken": 1331,
  "changeHistory": [
    "869c65d5c43d96526d90c7ea9a186df9edd67eb0",
    "43cece8ccf72521faa04fc79fddfc5f7d661a787",
    "0b05c26eefae171f9b4d0e1f8eba4249088207fa",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "869c65d5c43d96526d90c7ea9a186df9edd67eb0": "Ybodychange",
    "43cece8ccf72521faa04fc79fddfc5f7d661a787": "Ybodychange",
    "0b05c26eefae171f9b4d0e1f8eba4249088207fa": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "869c65d5c43d96526d90c7ea9a186df9edd67eb0": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nBe less aggressive about inlining functions contains inner function\n(go back to limiting this to global scope).\nFrom the the original change:\n\nTweaks to function inlining:\n- an unnamed function expression containing a inner unnamed function\nexpression should not be disallow because the names are the same.\n- a caller that contains the function definition to be inlined\nshould not consider the candidate to be a capturing function.\n- allow inlining a function containing an inner function that\nreferences arguments.\n- disallow inlining a function into a function containing\neval if intoducing names.\n- when inlining a function containing a function declaration, rewrite\nit a var declarations and function expressions to avoid introducing\nfunction declaraions into contexts disallowed by ES5 strict.\n\n*** Original change description ***\n\nAutomated g4 rollback of changelist 23059472.\n\n*** Reason for rollback ***\n\nBreaks things\n\nR\u003dacleung\nDELTA\u003d149  (127 added, 0 deleted, 22 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3079\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1368 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/19/11, 11:37 AM",
      "commitName": "869c65d5c43d96526d90c7ea9a186df9edd67eb0",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "8/8/11, 2:51 PM",
      "commitNameOld": "43cece8ccf72521faa04fc79fddfc5f7d661a787",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 10.87,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "actualSource": "Node mutate(String fnName, Node fnNode, Node callNode, String resultName, boolean needsDefaultResult, boolean isCallInLoop) {\n    Node newFnNode \u003d fnNode.cloneTree();\n    makeLocalNamesUnique(newFnNode, isCallInLoop);\n    rewriteFunctionDeclarations(newFnNode.getLastChild());\n    Set\u003cString\u003e namesToAlias \u003d FunctionArgumentInjector.findModifiedParameters(newFnNode);\n    LinkedHashMap\u003cString, Node\u003e args \u003d FunctionArgumentInjector.getFunctionCallParameterMap(newFnNode, callNode, this.safeNameIdSupplier);\n    boolean hasArgs \u003d !args.isEmpty();\n    if (hasArgs) {\n        FunctionArgumentInjector.maybeAddTempsForCallArguments(newFnNode, args, namesToAlias, compiler.getCodingConvention());\n    }\n    Node newBlock \u003d NodeUtil.getFunctionBody(newFnNode);\n    newBlock.detachFromParent();\n    if (hasArgs) {\n        Node inlineResult \u003d aliasAndInlineArguments(newBlock, args, namesToAlias);\n        Preconditions.checkState(newBlock \u003d\u003d inlineResult);\n    }\n    if (isCallInLoop) {\n        fixUnitializedVarDeclarations(newBlock);\n    }\n    String labelName \u003d getLabelNameForFunction(fnName);\n    Node injectableBlock \u003d replaceReturns(newBlock, resultName, labelName, needsDefaultResult);\n    Preconditions.checkState(injectableBlock !\u003d null);\n    return injectableBlock;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionToBlockMutator.java",
      "functionStartLine": 63,
      "functionName": "mutate",
      "functionAnnotation": "",
      "functionDoc": "\n@param fnName The name to use when preparing human readable names.\n@param fnNode The function to prepare.\n@param callNode The call node that will be replaced.\n@param resultName Function results should be assigned to this name.\n@param needsDefaultResult Whether the result value must be set.\n@param isCallInLoop Whether the function body must be prepared to be\n  injected into the body of a loop.\n@return A clone of the function body mutated to be suitable for injection\n  as a statement into another code block.\n",
      "diff": "@@ -1,23 +1,24 @@\n Node mutate(String fnName, Node fnNode, Node callNode, String resultName, boolean needsDefaultResult, boolean isCallInLoop) {\n     Node newFnNode \u003d fnNode.cloneTree();\n     makeLocalNamesUnique(newFnNode, isCallInLoop);\n+    rewriteFunctionDeclarations(newFnNode.getLastChild());\n     Set\u003cString\u003e namesToAlias \u003d FunctionArgumentInjector.findModifiedParameters(newFnNode);\n     LinkedHashMap\u003cString, Node\u003e args \u003d FunctionArgumentInjector.getFunctionCallParameterMap(newFnNode, callNode, this.safeNameIdSupplier);\n     boolean hasArgs \u003d !args.isEmpty();\n     if (hasArgs) {\n         FunctionArgumentInjector.maybeAddTempsForCallArguments(newFnNode, args, namesToAlias, compiler.getCodingConvention());\n     }\n     Node newBlock \u003d NodeUtil.getFunctionBody(newFnNode);\n     newBlock.detachFromParent();\n     if (hasArgs) {\n         Node inlineResult \u003d aliasAndInlineArguments(newBlock, args, namesToAlias);\n         Preconditions.checkState(newBlock \u003d\u003d inlineResult);\n     }\n     if (isCallInLoop) {\n         fixUnitializedVarDeclarations(newBlock);\n     }\n     String labelName \u003d getLabelNameForFunction(fnName);\n     Node injectableBlock \u003d replaceReturns(newBlock, resultName, labelName, needsDefaultResult);\n     Preconditions.checkState(injectableBlock !\u003d null);\n     return injectableBlock;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "43cece8ccf72521faa04fc79fddfc5f7d661a787": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nBreaks tests\n\n*** Original change description ***\n\nTweaks to function inlining:\n- an unnamed function expression containing a inner unnamed function\nexpression should not be disallow because the names are the same.\n- a caller that only contains the function definition to be inlined should\nnot consider the candidate to be a capturing function.\n- allow inlining a function containing an inner function that\nreferences arguments.\n- disallow inlining a function into a function containing eval.\n- when inlining a function containing a function dec\n\n... description truncated by g4 rollback ...\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2930\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1339 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/8/11, 2:51 PM",
      "commitName": "43cece8ccf72521faa04fc79fddfc5f7d661a787",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "8/8/11, 2:03 PM",
      "commitNameOld": "0b05c26eefae171f9b4d0e1f8eba4249088207fa",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "Node mutate(String fnName, Node fnNode, Node callNode, String resultName, boolean needsDefaultResult, boolean isCallInLoop) {\n    Node newFnNode \u003d fnNode.cloneTree();\n    makeLocalNamesUnique(newFnNode, isCallInLoop);\n    Set\u003cString\u003e namesToAlias \u003d FunctionArgumentInjector.findModifiedParameters(newFnNode);\n    LinkedHashMap\u003cString, Node\u003e args \u003d FunctionArgumentInjector.getFunctionCallParameterMap(newFnNode, callNode, this.safeNameIdSupplier);\n    boolean hasArgs \u003d !args.isEmpty();\n    if (hasArgs) {\n        FunctionArgumentInjector.maybeAddTempsForCallArguments(newFnNode, args, namesToAlias, compiler.getCodingConvention());\n    }\n    Node newBlock \u003d NodeUtil.getFunctionBody(newFnNode);\n    newBlock.detachFromParent();\n    if (hasArgs) {\n        Node inlineResult \u003d aliasAndInlineArguments(newBlock, args, namesToAlias);\n        Preconditions.checkState(newBlock \u003d\u003d inlineResult);\n    }\n    if (isCallInLoop) {\n        fixUnitializedVarDeclarations(newBlock);\n    }\n    String labelName \u003d getLabelNameForFunction(fnName);\n    Node injectableBlock \u003d replaceReturns(newBlock, resultName, labelName, needsDefaultResult);\n    Preconditions.checkState(injectableBlock !\u003d null);\n    return injectableBlock;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionToBlockMutator.java",
      "functionStartLine": 63,
      "functionName": "mutate",
      "functionAnnotation": "",
      "functionDoc": "\n@param fnName The name to use when preparing human readable names.\n@param fnNode The function to prepare.\n@param callNode The call node that will be replaced.\n@param resultName Function results should be assigned to this name.\n@param needsDefaultResult Whether the result value must be set.\n@param isCallInLoop Whether the function body must be prepared to be\n  injected into the body of a loop.\n@return A clone of the function body mutated to be suitable for injection\n  as a statement into another code block.\n",
      "diff": "@@ -1,24 +1,23 @@\n Node mutate(String fnName, Node fnNode, Node callNode, String resultName, boolean needsDefaultResult, boolean isCallInLoop) {\n     Node newFnNode \u003d fnNode.cloneTree();\n     makeLocalNamesUnique(newFnNode, isCallInLoop);\n-    rewriteFunctionDeclarations(newFnNode.getLastChild());\n     Set\u003cString\u003e namesToAlias \u003d FunctionArgumentInjector.findModifiedParameters(newFnNode);\n     LinkedHashMap\u003cString, Node\u003e args \u003d FunctionArgumentInjector.getFunctionCallParameterMap(newFnNode, callNode, this.safeNameIdSupplier);\n     boolean hasArgs \u003d !args.isEmpty();\n     if (hasArgs) {\n         FunctionArgumentInjector.maybeAddTempsForCallArguments(newFnNode, args, namesToAlias, compiler.getCodingConvention());\n     }\n     Node newBlock \u003d NodeUtil.getFunctionBody(newFnNode);\n     newBlock.detachFromParent();\n     if (hasArgs) {\n         Node inlineResult \u003d aliasAndInlineArguments(newBlock, args, namesToAlias);\n         Preconditions.checkState(newBlock \u003d\u003d inlineResult);\n     }\n     if (isCallInLoop) {\n         fixUnitializedVarDeclarations(newBlock);\n     }\n     String labelName \u003d getLabelNameForFunction(fnName);\n     Node injectableBlock \u003d replaceReturns(newBlock, resultName, labelName, needsDefaultResult);\n     Preconditions.checkState(injectableBlock !\u003d null);\n     return injectableBlock;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0b05c26eefae171f9b4d0e1f8eba4249088207fa": {
      "type": "Ybodychange",
      "commitMessage": "\nTweaks to function inlining:\n- an unnamed function expression containing a inner unnamed function\nexpression should not be disallow because the names are the same.\n- a caller that only contains the function definition to be inlined should\nnot consider the candidate to be a capturing function.\n- allow inlining a function containing an inner function that\nreferences arguments.\n- disallow inlining a function into a function containing eval.\n- when inlining a function containing a function declaration, rewrite\nit a var declarations and function expressions to avoid introducing\nfunction declaraions into contexts disallowed by ES5 strict.\n\nR\u003dacleung\nDELTA\u003d228  (182 added, 14 deleted, 32 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2929\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1338 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/8/11, 2:03 PM",
      "commitName": "0b05c26eefae171f9b4d0e1f8eba4249088207fa",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "6/16/11, 5:29 PM",
      "commitNameOld": "cc4ec1a70e6fa02bda751582c3902b3c19f85bbb",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 52.86,
      "commitsBetweenForRepo": 135,
      "commitsBetweenForFile": 1,
      "actualSource": "Node mutate(String fnName, Node fnNode, Node callNode, String resultName, boolean needsDefaultResult, boolean isCallInLoop) {\n    Node newFnNode \u003d fnNode.cloneTree();\n    makeLocalNamesUnique(newFnNode, isCallInLoop);\n    rewriteFunctionDeclarations(newFnNode.getLastChild());\n    Set\u003cString\u003e namesToAlias \u003d FunctionArgumentInjector.findModifiedParameters(newFnNode);\n    LinkedHashMap\u003cString, Node\u003e args \u003d FunctionArgumentInjector.getFunctionCallParameterMap(newFnNode, callNode, this.safeNameIdSupplier);\n    boolean hasArgs \u003d !args.isEmpty();\n    if (hasArgs) {\n        FunctionArgumentInjector.maybeAddTempsForCallArguments(newFnNode, args, namesToAlias, compiler.getCodingConvention());\n    }\n    Node newBlock \u003d NodeUtil.getFunctionBody(newFnNode);\n    newBlock.detachFromParent();\n    if (hasArgs) {\n        Node inlineResult \u003d aliasAndInlineArguments(newBlock, args, namesToAlias);\n        Preconditions.checkState(newBlock \u003d\u003d inlineResult);\n    }\n    if (isCallInLoop) {\n        fixUnitializedVarDeclarations(newBlock);\n    }\n    String labelName \u003d getLabelNameForFunction(fnName);\n    Node injectableBlock \u003d replaceReturns(newBlock, resultName, labelName, needsDefaultResult);\n    Preconditions.checkState(injectableBlock !\u003d null);\n    return injectableBlock;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionToBlockMutator.java",
      "functionStartLine": 63,
      "functionName": "mutate",
      "functionAnnotation": "",
      "functionDoc": "\n@param fnName The name to use when preparing human readable names.\n@param fnNode The function to prepare.\n@param callNode The call node that will be replaced.\n@param resultName Function results should be assigned to this name.\n@param needsDefaultResult Whether the result value must be set.\n@param isCallInLoop Whether the function body must be prepared to be\n  injected into the body of a loop.\n@return A clone of the function body mutated to be suitable for injection\n  as a statement into another code block.\n",
      "diff": "@@ -1,23 +1,24 @@\n Node mutate(String fnName, Node fnNode, Node callNode, String resultName, boolean needsDefaultResult, boolean isCallInLoop) {\n     Node newFnNode \u003d fnNode.cloneTree();\n     makeLocalNamesUnique(newFnNode, isCallInLoop);\n+    rewriteFunctionDeclarations(newFnNode.getLastChild());\n     Set\u003cString\u003e namesToAlias \u003d FunctionArgumentInjector.findModifiedParameters(newFnNode);\n     LinkedHashMap\u003cString, Node\u003e args \u003d FunctionArgumentInjector.getFunctionCallParameterMap(newFnNode, callNode, this.safeNameIdSupplier);\n     boolean hasArgs \u003d !args.isEmpty();\n     if (hasArgs) {\n         FunctionArgumentInjector.maybeAddTempsForCallArguments(newFnNode, args, namesToAlias, compiler.getCodingConvention());\n     }\n     Node newBlock \u003d NodeUtil.getFunctionBody(newFnNode);\n     newBlock.detachFromParent();\n     if (hasArgs) {\n         Node inlineResult \u003d aliasAndInlineArguments(newBlock, args, namesToAlias);\n         Preconditions.checkState(newBlock \u003d\u003d inlineResult);\n     }\n     if (isCallInLoop) {\n         fixUnitializedVarDeclarations(newBlock);\n     }\n     String labelName \u003d getLabelNameForFunction(fnName);\n     Node injectableBlock \u003d replaceReturns(newBlock, resultName, labelName, needsDefaultResult);\n     Preconditions.checkState(injectableBlock !\u003d null);\n     return injectableBlock;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,23 @@\n+Node mutate(String fnName, Node fnNode, Node callNode, String resultName, boolean needsDefaultResult, boolean isCallInLoop) {\n+    Node newFnNode \u003d fnNode.cloneTree();\n+    makeLocalNamesUnique(newFnNode, isCallInLoop);\n+    Set\u003cString\u003e namesToAlias \u003d FunctionArgumentInjector.findModifiedParameters(newFnNode);\n+    LinkedHashMap\u003cString, Node\u003e args \u003d FunctionArgumentInjector.getFunctionCallParameterMap(newFnNode, callNode, this.safeNameIdSupplier);\n+    boolean hasArgs \u003d !args.isEmpty();\n+    if (hasArgs) {\n+        FunctionArgumentInjector.maybeAddTempsForCallArguments(newFnNode, args, namesToAlias, compiler.getCodingConvention());\n+    }\n+    Node newBlock \u003d NodeUtil.getFunctionBody(newFnNode);\n+    newBlock.detachFromParent();\n+    if (hasArgs) {\n+        Node inlineResult \u003d aliasAndInlineArguments(newBlock, args, namesToAlias);\n+        Preconditions.checkState(newBlock \u003d\u003d inlineResult);\n+    }\n+    if (isCallInLoop) {\n+        fixUnitializedVarDeclarations(newBlock);\n+    }\n+    String labelName \u003d getLabelNameForFunction(fnName);\n+    Node injectableBlock \u003d replaceReturns(newBlock, resultName, labelName, needsDefaultResult);\n+    Preconditions.checkState(injectableBlock !\u003d null);\n+    return injectableBlock;\n+}\n\\ No newline at end of file\n",
      "actualSource": "Node mutate(String fnName, Node fnNode, Node callNode, String resultName, boolean needsDefaultResult, boolean isCallInLoop) {\n    Node newFnNode \u003d fnNode.cloneTree();\n    makeLocalNamesUnique(newFnNode, isCallInLoop);\n    Set\u003cString\u003e namesToAlias \u003d FunctionArgumentInjector.findModifiedParameters(newFnNode);\n    LinkedHashMap\u003cString, Node\u003e args \u003d FunctionArgumentInjector.getFunctionCallParameterMap(newFnNode, callNode, this.safeNameIdSupplier);\n    boolean hasArgs \u003d !args.isEmpty();\n    if (hasArgs) {\n        FunctionArgumentInjector.maybeAddTempsForCallArguments(newFnNode, args, namesToAlias, compiler.getCodingConvention());\n    }\n    Node newBlock \u003d NodeUtil.getFunctionBody(newFnNode);\n    newBlock.detachFromParent();\n    if (hasArgs) {\n        Node inlineResult \u003d aliasAndInlineArguments(newBlock, args, namesToAlias);\n        Preconditions.checkState(newBlock \u003d\u003d inlineResult);\n    }\n    if (isCallInLoop) {\n        fixUnitializedVarDeclarations(newBlock);\n    }\n    String labelName \u003d getLabelNameForFunction(fnName);\n    Node injectableBlock \u003d replaceReturns(newBlock, resultName, labelName, needsDefaultResult);\n    Preconditions.checkState(injectableBlock !\u003d null);\n    return injectableBlock;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionToBlockMutator.java",
      "functionStartLine": 61,
      "functionName": "mutate",
      "functionAnnotation": "",
      "functionDoc": "\n@param fnName The name to use when preparing human readable names.\n@param fnNode The function to prepare.\n@param callNode The call node that will be replaced.\n@param resultName Function results should be assigned to this name.\n@param needsDefaultResult Whether the result value must be set.\n@param isCallInLoop Whether the function body must be prepared to be\n  injected into the body of a loop.\n@return A clone of the function body mutated to be suitable for injection\n  as a statement into another code block.\n"
    }
  }
}