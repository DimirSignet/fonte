{
  "origin": "codeshovel",
  "repositoryName": "Closure-115b",
  "repositoryPath": "/tmp/Closure-115b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "InlineFunctions.java",
  "functionName": "resolveInlineConflictsForFunction",
  "functionId": "resolveInlineConflictsForFunction___fs-FunctionState",
  "sourceFilePath": "src/com/google/javascript/jscomp/InlineFunctions.java",
  "functionAnnotation": "",
  "functionDoc": "\n@see #resolveInlineConflicts\n",
  "functionStartLine": 742,
  "functionEndLine": 768,
  "numCommitsSeen": 43,
  "timeTaken": 2359,
  "changeHistory": [
    "98a487531ce3d6555851398daead0471b5932774",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "98a487531ce3d6555851398daead0471b5932774": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "98a487531ce3d6555851398daead0471b5932774": {
      "type": "Ybodychange",
      "commitMessage": "\nFix incosistent internal state caused by when multiple functions are\ninlined into the same expression.\n\nR\u003dnicksantos\nDELTA\u003d300  (131 added, 51 deleted, 118 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5029\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2052 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/18/12, 9:58 AM",
      "commitName": "98a487531ce3d6555851398daead0471b5932774",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "5/18/12, 11:09 AM",
      "commitNameOld": "70a5626922ea7e8c98747e22b6986638ba38fadc",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 30.95,
      "commitsBetweenForRepo": 73,
      "commitsBetweenForFile": 1,
      "actualSource": "private void resolveInlineConflictsForFunction(FunctionState fs) {\n    if (!fs.hasReferences() || !fs.canInline()) {\n        return;\n    }\n    Node fnNode \u003d fs.getFn().getFunctionNode();\n    Set\u003cString\u003e names \u003d findCalledFunctions(fnNode);\n    if (!names.isEmpty()) {\n        for (String name : names) {\n            FunctionState fsCalled \u003d fns.get(name);\n            if (fsCalled !\u003d null \u0026\u0026 fsCalled.canRemove()) {\n                fsCalled.setRemove(false);\n                if (!mimimizeCost(fsCalled)) {\n                    fsCalled.setInline(false);\n                }\n            }\n        }\n        fs.setSafeFnNode(fs.getFn().getFunctionNode().cloneTree());\n    }\n}",
      "path": "src/com/google/javascript/jscomp/InlineFunctions.java",
      "functionStartLine": 744,
      "functionName": "resolveInlineConflictsForFunction",
      "functionAnnotation": "",
      "functionDoc": "\n@see #resolveInlineConflicts\n",
      "diff": "@@ -1,19 +1,19 @@\n private void resolveInlineConflictsForFunction(FunctionState fs) {\n-    if (!fs.hasReferences()) {\n+    if (!fs.hasReferences() || !fs.canInline()) {\n         return;\n     }\n     Node fnNode \u003d fs.getFn().getFunctionNode();\n     Set\u003cString\u003e names \u003d findCalledFunctions(fnNode);\n     if (!names.isEmpty()) {\n         for (String name : names) {\n             FunctionState fsCalled \u003d fns.get(name);\n             if (fsCalled !\u003d null \u0026\u0026 fsCalled.canRemove()) {\n                 fsCalled.setRemove(false);\n                 if (!mimimizeCost(fsCalled)) {\n                     fsCalled.setInline(false);\n                 }\n             }\n         }\n         fs.setSafeFnNode(fs.getFn().getFunctionNode().cloneTree());\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,19 @@\n+private void resolveInlineConflictsForFunction(FunctionState fs) {\n+    if (!fs.hasReferences()) {\n+        return;\n+    }\n+    Node fnNode \u003d fs.getFn().getFunctionNode();\n+    Set\u003cString\u003e names \u003d findCalledFunctions(fnNode);\n+    if (!names.isEmpty()) {\n+        for (String name : names) {\n+            FunctionState fsCalled \u003d fns.get(name);\n+            if (fsCalled !\u003d null \u0026\u0026 fsCalled.canRemove()) {\n+                fsCalled.setRemove(false);\n+                if (!mimimizeCost(fsCalled)) {\n+                    fsCalled.setInline(false);\n+                }\n+            }\n+        }\n+        fs.setSafeFnNode(fs.getFn().getFunctionNode().cloneTree());\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void resolveInlineConflictsForFunction(FunctionState fs) {\n    if (!fs.hasReferences()) {\n        return;\n    }\n    Node fnNode \u003d fs.getFn().getFunctionNode();\n    Set\u003cString\u003e names \u003d findCalledFunctions(fnNode);\n    if (!names.isEmpty()) {\n        for (String name : names) {\n            FunctionState fsCalled \u003d fns.get(name);\n            if (fsCalled !\u003d null \u0026\u0026 fsCalled.canRemove()) {\n                fsCalled.setRemove(false);\n                if (!mimimizeCost(fsCalled)) {\n                    fsCalled.setInline(false);\n                }\n            }\n        }\n        fs.setSafeFnNode(fs.getFn().getFunctionNode().cloneTree());\n    }\n}",
      "path": "src/com/google/javascript/jscomp/InlineFunctions.java",
      "functionStartLine": 625,
      "functionName": "resolveInlineConflictsForFunction",
      "functionAnnotation": "",
      "functionDoc": "\n@see #resolveInlineConflicts\n"
    }
  }
}