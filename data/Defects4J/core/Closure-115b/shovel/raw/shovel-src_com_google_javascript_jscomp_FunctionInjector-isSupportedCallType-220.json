{
  "origin": "codeshovel",
  "repositoryName": "Closure-115b",
  "repositoryPath": "/tmp/Closure-115b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FunctionInjector.java",
  "functionName": "isSupportedCallType",
  "functionId": "isSupportedCallType___callNode-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/FunctionInjector.java",
  "functionAnnotation": "",
  "functionDoc": "Only \".call\" calls and direct calls to functions are supported.\n\n@param callNode The call evaluate.\n@return Whether the call is of a type that is supported.\n",
  "functionStartLine": 220,
  "functionEndLine": 235,
  "numCommitsSeen": 36,
  "timeTaken": 2120,
  "changeHistory": [
    "39f629a8cfaab37da55288010640d7e516000b1f",
    "cc4ec1a70e6fa02bda751582c3902b3c19f85bbb",
    "dd5a73fdb8740d4753a2c08efaa9eb56932943a0",
    "51e81d0fd794bee6d8765513f853a312f176dcd7",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "39f629a8cfaab37da55288010640d7e516000b1f": "Ybodychange",
    "cc4ec1a70e6fa02bda751582c3902b3c19f85bbb": "Ybodychange",
    "dd5a73fdb8740d4753a2c08efaa9eb56932943a0": "Ybodychange",
    "51e81d0fd794bee6d8765513f853a312f176dcd7": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "39f629a8cfaab37da55288010640d7e516000b1f": {
      "type": "Ybodychange",
      "commitMessage": "\nReplace calls of the form \"Node.getType() !\u003d Token.XX\" with\n\"!Node.isXX()\" calls.\n\nR\u003dnicksantos\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3706\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1598 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/14/11, 6:13 PM",
      "commitName": "39f629a8cfaab37da55288010640d7e516000b1f",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/10/11, 8:36 AM",
      "commitNameOld": "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 4.4,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "actualSource": "private boolean isSupportedCallType(Node callNode) {\n    if (!callNode.getFirstChild().isName()) {\n        if (NodeUtil.isFunctionObjectCall(callNode)) {\n            if (!assumeStrictThis) {\n                Node thisValue \u003d callNode.getFirstChild().getNext();\n                if (thisValue \u003d\u003d null || !thisValue.isThis()) {\n                    return false;\n                }\n            }\n        } else if (NodeUtil.isFunctionObjectApply(callNode)) {\n            return false;\n        }\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionInjector.java",
      "functionStartLine": 216,
      "functionName": "isSupportedCallType",
      "functionAnnotation": "",
      "functionDoc": "Only \".call\" calls and direct calls to functions are supported.\n\n@param callNode The call evaluate.\n@return Whether the call is of a type that is supported.\n",
      "diff": "@@ -1,15 +1,15 @@\n private boolean isSupportedCallType(Node callNode) {\n-    if (callNode.getFirstChild().getType() !\u003d Token.NAME) {\n+    if (!callNode.getFirstChild().isName()) {\n         if (NodeUtil.isFunctionObjectCall(callNode)) {\n             if (!assumeStrictThis) {\n                 Node thisValue \u003d callNode.getFirstChild().getNext();\n-                if (thisValue \u003d\u003d null || thisValue.getType() !\u003d Token.THIS) {\n+                if (thisValue \u003d\u003d null || !thisValue.isThis()) {\n                     return false;\n                 }\n             }\n         } else if (NodeUtil.isFunctionObjectApply(callNode)) {\n             return false;\n         }\n     }\n     return true;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "cc4ec1a70e6fa02bda751582c3902b3c19f85bbb": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nFixed invalid \"this\" replacement within inner functions.\n\n*** Original change description ***\n\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nBreaks things\n\n*** Original change description ***\n\nWhen it is possible to make the ES5 Strict mode assumptions about a\nfunction\u0027s \"this\" it is easier to inline a function referencing \"this\".\nAdd \"CompilerOption.assumeStrictThis\" and take advantage of it during\nfunction inlining.\n\nR\u003dmoedinger\nDELTA\u003d263  (223 added, 4 deleted, 36 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2320\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1188 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/16/11, 5:29 PM",
      "commitName": "cc4ec1a70e6fa02bda751582c3902b3c19f85bbb",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "6/7/11, 10:32 AM",
      "commitNameOld": "dd5a73fdb8740d4753a2c08efaa9eb56932943a0",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 9.29,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "actualSource": "private boolean isSupportedCallType(Node callNode) {\n    if (callNode.getFirstChild().getType() !\u003d Token.NAME) {\n        if (NodeUtil.isFunctionObjectCall(callNode)) {\n            if (!assumeStrictThis) {\n                Node thisValue \u003d callNode.getFirstChild().getNext();\n                if (thisValue \u003d\u003d null || thisValue.getType() !\u003d Token.THIS) {\n                    return false;\n                }\n            }\n        } else if (NodeUtil.isFunctionObjectApply(callNode)) {\n            return false;\n        }\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionInjector.java",
      "functionStartLine": 200,
      "functionName": "isSupportedCallType",
      "functionAnnotation": "",
      "functionDoc": "Only \".call\" calls and direct calls to functions are supported.\n\n@param callNode The call evaluate.\n@return Whether the call is of a type that is supported.\n",
      "diff": "@@ -1,13 +1,15 @@\n private boolean isSupportedCallType(Node callNode) {\n     if (callNode.getFirstChild().getType() !\u003d Token.NAME) {\n         if (NodeUtil.isFunctionObjectCall(callNode)) {\n-            Node thisValue \u003d callNode.getFirstChild().getNext();\n-            if (thisValue \u003d\u003d null || thisValue.getType() !\u003d Token.THIS) {\n-                return false;\n+            if (!assumeStrictThis) {\n+                Node thisValue \u003d callNode.getFirstChild().getNext();\n+                if (thisValue \u003d\u003d null || thisValue.getType() !\u003d Token.THIS) {\n+                    return false;\n+                }\n             }\n         } else if (NodeUtil.isFunctionObjectApply(callNode)) {\n             return false;\n         }\n     }\n     return true;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "dd5a73fdb8740d4753a2c08efaa9eb56932943a0": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nBreaks gmail\n\n*** Original change description ***\n\nWhen it is possible to make the ES5 Strict mode assumptions about a\nfunction\u0027s \"this\" it is easier to inline a function referencing \"this\".\nAdd \"CompilerOption.assumeStrictThis\" and take advantage of it during\nfunction inlining.\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2200\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1165 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/7/11, 10:32 AM",
      "commitName": "dd5a73fdb8740d4753a2c08efaa9eb56932943a0",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "6/7/11, 9:49 AM",
      "commitNameOld": "51e81d0fd794bee6d8765513f853a312f176dcd7",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private boolean isSupportedCallType(Node callNode) {\n    if (callNode.getFirstChild().getType() !\u003d Token.NAME) {\n        if (NodeUtil.isFunctionObjectCall(callNode)) {\n            Node thisValue \u003d callNode.getFirstChild().getNext();\n            if (thisValue \u003d\u003d null || thisValue.getType() !\u003d Token.THIS) {\n                return false;\n            }\n        } else if (NodeUtil.isFunctionObjectApply(callNode)) {\n            return false;\n        }\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionInjector.java",
      "functionStartLine": 197,
      "functionName": "isSupportedCallType",
      "functionAnnotation": "",
      "functionDoc": "Only \".call\" calls and direct calls to functions are supported.\n\n@param callNode The call evaluate.\n@return Whether the call is of a type that is supported.\n",
      "diff": "@@ -1,15 +1,13 @@\n private boolean isSupportedCallType(Node callNode) {\n     if (callNode.getFirstChild().getType() !\u003d Token.NAME) {\n         if (NodeUtil.isFunctionObjectCall(callNode)) {\n-            if (!assumeStrictThis) {\n-                Node thisValue \u003d callNode.getFirstChild().getNext();\n-                if (thisValue \u003d\u003d null || thisValue.getType() !\u003d Token.THIS) {\n-                    return false;\n-                }\n+            Node thisValue \u003d callNode.getFirstChild().getNext();\n+            if (thisValue \u003d\u003d null || thisValue.getType() !\u003d Token.THIS) {\n+                return false;\n             }\n         } else if (NodeUtil.isFunctionObjectApply(callNode)) {\n             return false;\n         }\n     }\n     return true;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "51e81d0fd794bee6d8765513f853a312f176dcd7": {
      "type": "Ybodychange",
      "commitMessage": "\nWhen it is possible to make the ES5 Strict mode assumptions about a\nfunction\u0027s \"this\" it is easier to inline a function referencing \"this\".\nAdd \"CompilerOption.assumeStrictThis\" and take advantage of it during\nfunction inlining.\n\nR\u003dacleung\nDELTA\u003d243  (204 added, 4 deleted, 35 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2199\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1164 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/7/11, 9:49 AM",
      "commitName": "51e81d0fd794bee6d8765513f853a312f176dcd7",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "5/16/11, 3:01 PM",
      "commitNameOld": "828828472848b88b6d3b1e847fa8be5dde78e2da",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 21.78,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "actualSource": "private boolean isSupportedCallType(Node callNode) {\n    if (callNode.getFirstChild().getType() !\u003d Token.NAME) {\n        if (NodeUtil.isFunctionObjectCall(callNode)) {\n            if (!assumeStrictThis) {\n                Node thisValue \u003d callNode.getFirstChild().getNext();\n                if (thisValue \u003d\u003d null || thisValue.getType() !\u003d Token.THIS) {\n                    return false;\n                }\n            }\n        } else if (NodeUtil.isFunctionObjectApply(callNode)) {\n            return false;\n        }\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionInjector.java",
      "functionStartLine": 200,
      "functionName": "isSupportedCallType",
      "functionAnnotation": "",
      "functionDoc": "Only \".call\" calls and direct calls to functions are supported.\n\n@param callNode The call evaluate.\n@return Whether the call is of a type that is supported.\n",
      "diff": "@@ -1,13 +1,15 @@\n private boolean isSupportedCallType(Node callNode) {\n     if (callNode.getFirstChild().getType() !\u003d Token.NAME) {\n         if (NodeUtil.isFunctionObjectCall(callNode)) {\n-            Node thisValue \u003d callNode.getFirstChild().getNext();\n-            if (thisValue \u003d\u003d null || thisValue.getType() !\u003d Token.THIS) {\n-                return false;\n+            if (!assumeStrictThis) {\n+                Node thisValue \u003d callNode.getFirstChild().getNext();\n+                if (thisValue \u003d\u003d null || thisValue.getType() !\u003d Token.THIS) {\n+                    return false;\n+                }\n             }\n         } else if (NodeUtil.isFunctionObjectApply(callNode)) {\n             return false;\n         }\n     }\n     return true;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,13 @@\n+private boolean isSupportedCallType(Node callNode) {\n+    if (callNode.getFirstChild().getType() !\u003d Token.NAME) {\n+        if (NodeUtil.isFunctionObjectCall(callNode)) {\n+            Node thisValue \u003d callNode.getFirstChild().getNext();\n+            if (thisValue \u003d\u003d null || thisValue.getType() !\u003d Token.THIS) {\n+                return false;\n+            }\n+        } else if (NodeUtil.isFunctionObjectApply(callNode)) {\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private boolean isSupportedCallType(Node callNode) {\n    if (callNode.getFirstChild().getType() !\u003d Token.NAME) {\n        if (NodeUtil.isFunctionObjectCall(callNode)) {\n            Node thisValue \u003d callNode.getFirstChild().getNext();\n            if (thisValue \u003d\u003d null || thisValue.getType() !\u003d Token.THIS) {\n                return false;\n            }\n        } else if (NodeUtil.isFunctionObjectApply(callNode)) {\n            return false;\n        }\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionInjector.java",
      "functionStartLine": 181,
      "functionName": "isSupportedCallType",
      "functionAnnotation": "",
      "functionDoc": "Only \".call\" calls and direct calls to functions are supported.\n\n@param callNode The call evaluate.\n@return Whether the call is of a type that is supported.\n"
    }
  }
}