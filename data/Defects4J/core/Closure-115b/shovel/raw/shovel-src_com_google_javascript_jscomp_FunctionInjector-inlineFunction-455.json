{
  "origin": "codeshovel",
  "repositoryName": "Closure-115b",
  "repositoryPath": "/tmp/Closure-115b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FunctionInjector.java",
  "functionName": "inlineFunction",
  "functionId": "inlineFunction___callNode-Node__fnNode-Node__fnName-String",
  "sourceFilePath": "src/com/google/javascript/jscomp/FunctionInjector.java",
  "functionAnnotation": "",
  "functionDoc": "Inline a function which fulfills the requirements of\ncanInlineReferenceAsStatementBlock into the call site, replacing the\nparent expression.\n",
  "functionStartLine": 455,
  "functionEndLine": 536,
  "numCommitsSeen": 36,
  "timeTaken": 2196,
  "changeHistory": [
    "98a487531ce3d6555851398daead0471b5932774",
    "5f8b6f54294ce8b454f78165f5230b3759d11e37",
    "9dfbc803407e714f9744555a1c9e7c4230f1816d",
    "4d05d82cb3f7f4f0a06852927798c6039fb4f50d",
    "793a50095cb8e289cbe3e3446f7432e33e2d102a",
    "6e3eb4f7619179ba6c23db2af7549ef02f588c35",
    "14ddcfdc0b8d1cece3c79221b1870b84f055d419",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "98a487531ce3d6555851398daead0471b5932774": "Ybodychange",
    "5f8b6f54294ce8b454f78165f5230b3759d11e37": "Ybodychange",
    "9dfbc803407e714f9744555a1c9e7c4230f1816d": "Ybodychange",
    "4d05d82cb3f7f4f0a06852927798c6039fb4f50d": "Ybodychange",
    "793a50095cb8e289cbe3e3446f7432e33e2d102a": "Ybodychange",
    "6e3eb4f7619179ba6c23db2af7549ef02f588c35": "Ybodychange",
    "14ddcfdc0b8d1cece3c79221b1870b84f055d419": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "98a487531ce3d6555851398daead0471b5932774": {
      "type": "Ybodychange",
      "commitMessage": "\nFix incosistent internal state caused by when multiple functions are\ninlined into the same expression.\n\nR\u003dnicksantos\nDELTA\u003d300  (131 added, 51 deleted, 118 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5029\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2052 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/18/12, 9:58 AM",
      "commitName": "98a487531ce3d6555851398daead0471b5932774",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "5/18/12, 11:09 AM",
      "commitNameOld": "70a5626922ea7e8c98747e22b6986638ba38fadc",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 30.95,
      "commitsBetweenForRepo": 73,
      "commitsBetweenForFile": 1,
      "actualSource": "private Node inlineFunction(Node callNode, Node fnNode, String fnName) {\n    Node parent \u003d callNode.getParent();\n    Node grandParent \u003d parent.getParent();\n    CallSiteType callSiteType \u003d classifyCallSite(callNode);\n    Preconditions.checkArgument(callSiteType !\u003d CallSiteType.UNSUPPORTED);\n    boolean isCallInLoop \u003d NodeUtil.isWithinLoop(callNode);\n    String resultName \u003d null;\n    boolean needsDefaultReturnResult \u003d true;\n    switch(callSiteType) {\n        case SIMPLE_ASSIGNMENT:\n            resultName \u003d parent.getFirstChild().getString();\n            break;\n        case VAR_DECL_SIMPLE_ASSIGNMENT:\n            resultName \u003d parent.getString();\n            break;\n        case SIMPLE_CALL:\n            resultName \u003d null;\n            needsDefaultReturnResult \u003d false;\n            break;\n        case EXPRESSION:\n            throw new IllegalStateException(\"Movable expressions must be moved before inlining.\");\n        case DECOMPOSABLE_EXPRESSION:\n            throw new IllegalStateException(\"Decomposable expressions must be decomposed before inlining.\");\n        default:\n            throw new IllegalStateException(\"Unexpected call site type.\");\n    }\n    FunctionToBlockMutator mutator \u003d new FunctionToBlockMutator(compiler, this.safeNameIdSupplier);\n    Node newBlock \u003d mutator.mutate(fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop);\n    Node greatGrandParent \u003d grandParent.getParent();\n    switch(callSiteType) {\n        case VAR_DECL_SIMPLE_ASSIGNMENT:\n            parent.removeChild(parent.getFirstChild());\n            Preconditions.checkState(parent.getFirstChild() \u003d\u003d null);\n            greatGrandParent.addChildAfter(newBlock, grandParent);\n            break;\n        case SIMPLE_ASSIGNMENT:\n            Preconditions.checkState(grandParent.isExprResult());\n            greatGrandParent.replaceChild(grandParent, newBlock);\n            break;\n        case SIMPLE_CALL:\n            Preconditions.checkState(parent.isExprResult());\n            grandParent.replaceChild(parent, newBlock);\n            break;\n        default:\n            throw new IllegalStateException(\"Unexpected call site type.\");\n    }\n    return newBlock;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionInjector.java",
      "functionStartLine": 456,
      "functionName": "inlineFunction",
      "functionAnnotation": "",
      "functionDoc": "Inline a function which fulfills the requirements of\ncanInlineReferenceAsStatementBlock into the call site, replacing the\nparent expression.\n",
      "diff": "@@ -1,60 +1,48 @@\n private Node inlineFunction(Node callNode, Node fnNode, String fnName) {\n     Node parent \u003d callNode.getParent();\n     Node grandParent \u003d parent.getParent();\n     CallSiteType callSiteType \u003d classifyCallSite(callNode);\n     Preconditions.checkArgument(callSiteType !\u003d CallSiteType.UNSUPPORTED);\n     boolean isCallInLoop \u003d NodeUtil.isWithinLoop(callNode);\n     String resultName \u003d null;\n     boolean needsDefaultReturnResult \u003d true;\n     switch(callSiteType) {\n         case SIMPLE_ASSIGNMENT:\n             resultName \u003d parent.getFirstChild().getString();\n             break;\n         case VAR_DECL_SIMPLE_ASSIGNMENT:\n             resultName \u003d parent.getString();\n             break;\n         case SIMPLE_CALL:\n             resultName \u003d null;\n             needsDefaultReturnResult \u003d false;\n             break;\n         case EXPRESSION:\n-            resultName \u003d getUniqueResultName();\n-            needsDefaultReturnResult \u003d isCallInLoop;\n-            break;\n+            throw new IllegalStateException(\"Movable expressions must be moved before inlining.\");\n         case DECOMPOSABLE_EXPRESSION:\n-            throw new IllegalStateException(\"Decomposable expressions must decomposed before inlining.\");\n+            throw new IllegalStateException(\"Decomposable expressions must be decomposed before inlining.\");\n         default:\n             throw new IllegalStateException(\"Unexpected call site type.\");\n     }\n     FunctionToBlockMutator mutator \u003d new FunctionToBlockMutator(compiler, this.safeNameIdSupplier);\n     Node newBlock \u003d mutator.mutate(fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop);\n     Node greatGrandParent \u003d grandParent.getParent();\n     switch(callSiteType) {\n         case VAR_DECL_SIMPLE_ASSIGNMENT:\n             parent.removeChild(parent.getFirstChild());\n             Preconditions.checkState(parent.getFirstChild() \u003d\u003d null);\n             greatGrandParent.addChildAfter(newBlock, grandParent);\n             break;\n         case SIMPLE_ASSIGNMENT:\n             Preconditions.checkState(grandParent.isExprResult());\n             greatGrandParent.replaceChild(grandParent, newBlock);\n             break;\n         case SIMPLE_CALL:\n             Preconditions.checkState(parent.isExprResult());\n             grandParent.replaceChild(parent, newBlock);\n             break;\n-        case EXPRESSION:\n-            Node injectionPoint \u003d ExpressionDecomposer.findInjectionPoint(callNode);\n-            Preconditions.checkNotNull(injectionPoint);\n-            Node injectionPointParent \u003d injectionPoint.getParent();\n-            Preconditions.checkNotNull(injectionPointParent);\n-            Preconditions.checkState(NodeUtil.isStatementBlock(injectionPointParent));\n-            newBlock.addChildrenToFront(NodeUtil.newVarNode(resultName, null).copyInformationFromForTree(callNode));\n-            injectionPointParent.addChildBefore(newBlock, injectionPoint);\n-            parent.replaceChild(callNode, IR.name(resultName));\n-            break;\n         default:\n             throw new IllegalStateException(\"Unexpected call site type.\");\n     }\n     return newBlock;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5f8b6f54294ce8b454f78165f5230b3759d11e37": {
      "type": "Ybodychange",
      "commitMessage": "\nInline NodeUtil.isExpressionNode\n\nR\u003dnicksantos\nDELTA\u003d37  (0 added, 4 deleted, 33 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d4037\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1702 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/4/12, 11:53 AM",
      "commitName": "5f8b6f54294ce8b454f78165f5230b3759d11e37",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/22/11, 2:28 PM",
      "commitNameOld": "9dfbc803407e714f9744555a1c9e7c4230f1816d",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 42.89,
      "commitsBetweenForRepo": 60,
      "commitsBetweenForFile": 1,
      "actualSource": "private Node inlineFunction(Node callNode, Node fnNode, String fnName) {\n    Node parent \u003d callNode.getParent();\n    Node grandParent \u003d parent.getParent();\n    CallSiteType callSiteType \u003d classifyCallSite(callNode);\n    Preconditions.checkArgument(callSiteType !\u003d CallSiteType.UNSUPPORTED);\n    boolean isCallInLoop \u003d NodeUtil.isWithinLoop(callNode);\n    String resultName \u003d null;\n    boolean needsDefaultReturnResult \u003d true;\n    switch(callSiteType) {\n        case SIMPLE_ASSIGNMENT:\n            resultName \u003d parent.getFirstChild().getString();\n            break;\n        case VAR_DECL_SIMPLE_ASSIGNMENT:\n            resultName \u003d parent.getString();\n            break;\n        case SIMPLE_CALL:\n            resultName \u003d null;\n            needsDefaultReturnResult \u003d false;\n            break;\n        case EXPRESSION:\n            resultName \u003d getUniqueResultName();\n            needsDefaultReturnResult \u003d isCallInLoop;\n            break;\n        case DECOMPOSABLE_EXPRESSION:\n            throw new IllegalStateException(\"Decomposable expressions must decomposed before inlining.\");\n        default:\n            throw new IllegalStateException(\"Unexpected call site type.\");\n    }\n    FunctionToBlockMutator mutator \u003d new FunctionToBlockMutator(compiler, this.safeNameIdSupplier);\n    Node newBlock \u003d mutator.mutate(fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop);\n    Node greatGrandParent \u003d grandParent.getParent();\n    switch(callSiteType) {\n        case VAR_DECL_SIMPLE_ASSIGNMENT:\n            parent.removeChild(parent.getFirstChild());\n            Preconditions.checkState(parent.getFirstChild() \u003d\u003d null);\n            greatGrandParent.addChildAfter(newBlock, grandParent);\n            break;\n        case SIMPLE_ASSIGNMENT:\n            Preconditions.checkState(grandParent.isExprResult());\n            greatGrandParent.replaceChild(grandParent, newBlock);\n            break;\n        case SIMPLE_CALL:\n            Preconditions.checkState(parent.isExprResult());\n            grandParent.replaceChild(parent, newBlock);\n            break;\n        case EXPRESSION:\n            Node injectionPoint \u003d ExpressionDecomposer.findInjectionPoint(callNode);\n            Preconditions.checkNotNull(injectionPoint);\n            Node injectionPointParent \u003d injectionPoint.getParent();\n            Preconditions.checkNotNull(injectionPointParent);\n            Preconditions.checkState(NodeUtil.isStatementBlock(injectionPointParent));\n            newBlock.addChildrenToFront(NodeUtil.newVarNode(resultName, null).copyInformationFromForTree(callNode));\n            injectionPointParent.addChildBefore(newBlock, injectionPoint);\n            parent.replaceChild(callNode, IR.name(resultName));\n            break;\n        default:\n            throw new IllegalStateException(\"Unexpected call site type.\");\n    }\n    return newBlock;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionInjector.java",
      "functionStartLine": 399,
      "functionName": "inlineFunction",
      "functionAnnotation": "",
      "functionDoc": "Inline a function which fulfills the requirements of\ncanInlineReferenceAsStatementBlock into the call site, replacing the\nparent expression.\n",
      "diff": "@@ -1,60 +1,60 @@\n private Node inlineFunction(Node callNode, Node fnNode, String fnName) {\n     Node parent \u003d callNode.getParent();\n     Node grandParent \u003d parent.getParent();\n     CallSiteType callSiteType \u003d classifyCallSite(callNode);\n     Preconditions.checkArgument(callSiteType !\u003d CallSiteType.UNSUPPORTED);\n     boolean isCallInLoop \u003d NodeUtil.isWithinLoop(callNode);\n     String resultName \u003d null;\n     boolean needsDefaultReturnResult \u003d true;\n     switch(callSiteType) {\n         case SIMPLE_ASSIGNMENT:\n             resultName \u003d parent.getFirstChild().getString();\n             break;\n         case VAR_DECL_SIMPLE_ASSIGNMENT:\n             resultName \u003d parent.getString();\n             break;\n         case SIMPLE_CALL:\n             resultName \u003d null;\n             needsDefaultReturnResult \u003d false;\n             break;\n         case EXPRESSION:\n             resultName \u003d getUniqueResultName();\n             needsDefaultReturnResult \u003d isCallInLoop;\n             break;\n         case DECOMPOSABLE_EXPRESSION:\n             throw new IllegalStateException(\"Decomposable expressions must decomposed before inlining.\");\n         default:\n             throw new IllegalStateException(\"Unexpected call site type.\");\n     }\n     FunctionToBlockMutator mutator \u003d new FunctionToBlockMutator(compiler, this.safeNameIdSupplier);\n     Node newBlock \u003d mutator.mutate(fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop);\n     Node greatGrandParent \u003d grandParent.getParent();\n     switch(callSiteType) {\n         case VAR_DECL_SIMPLE_ASSIGNMENT:\n             parent.removeChild(parent.getFirstChild());\n             Preconditions.checkState(parent.getFirstChild() \u003d\u003d null);\n             greatGrandParent.addChildAfter(newBlock, grandParent);\n             break;\n         case SIMPLE_ASSIGNMENT:\n-            Preconditions.checkState(NodeUtil.isExpressionNode(grandParent));\n+            Preconditions.checkState(grandParent.isExprResult());\n             greatGrandParent.replaceChild(grandParent, newBlock);\n             break;\n         case SIMPLE_CALL:\n-            Preconditions.checkState(NodeUtil.isExpressionNode(parent));\n+            Preconditions.checkState(parent.isExprResult());\n             grandParent.replaceChild(parent, newBlock);\n             break;\n         case EXPRESSION:\n             Node injectionPoint \u003d ExpressionDecomposer.findInjectionPoint(callNode);\n             Preconditions.checkNotNull(injectionPoint);\n             Node injectionPointParent \u003d injectionPoint.getParent();\n             Preconditions.checkNotNull(injectionPointParent);\n             Preconditions.checkState(NodeUtil.isStatementBlock(injectionPointParent));\n             newBlock.addChildrenToFront(NodeUtil.newVarNode(resultName, null).copyInformationFromForTree(callNode));\n             injectionPointParent.addChildBefore(newBlock, injectionPoint);\n             parent.replaceChild(callNode, IR.name(resultName));\n             break;\n         default:\n             throw new IllegalStateException(\"Unexpected call site type.\");\n     }\n     return newBlock;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9dfbc803407e714f9744555a1c9e7c4230f1816d": {
      "type": "Ybodychange",
      "commitMessage": "\nUse the new IR interface where possible.\n\nR\u003dnicksantos\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3799\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1641 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/22/11, 2:28 PM",
      "commitName": "9dfbc803407e714f9744555a1c9e7c4230f1816d",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/14/11, 6:13 PM",
      "commitNameOld": "39f629a8cfaab37da55288010640d7e516000b1f",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 7.84,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "actualSource": "private Node inlineFunction(Node callNode, Node fnNode, String fnName) {\n    Node parent \u003d callNode.getParent();\n    Node grandParent \u003d parent.getParent();\n    CallSiteType callSiteType \u003d classifyCallSite(callNode);\n    Preconditions.checkArgument(callSiteType !\u003d CallSiteType.UNSUPPORTED);\n    boolean isCallInLoop \u003d NodeUtil.isWithinLoop(callNode);\n    String resultName \u003d null;\n    boolean needsDefaultReturnResult \u003d true;\n    switch(callSiteType) {\n        case SIMPLE_ASSIGNMENT:\n            resultName \u003d parent.getFirstChild().getString();\n            break;\n        case VAR_DECL_SIMPLE_ASSIGNMENT:\n            resultName \u003d parent.getString();\n            break;\n        case SIMPLE_CALL:\n            resultName \u003d null;\n            needsDefaultReturnResult \u003d false;\n            break;\n        case EXPRESSION:\n            resultName \u003d getUniqueResultName();\n            needsDefaultReturnResult \u003d isCallInLoop;\n            break;\n        case DECOMPOSABLE_EXPRESSION:\n            throw new IllegalStateException(\"Decomposable expressions must decomposed before inlining.\");\n        default:\n            throw new IllegalStateException(\"Unexpected call site type.\");\n    }\n    FunctionToBlockMutator mutator \u003d new FunctionToBlockMutator(compiler, this.safeNameIdSupplier);\n    Node newBlock \u003d mutator.mutate(fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop);\n    Node greatGrandParent \u003d grandParent.getParent();\n    switch(callSiteType) {\n        case VAR_DECL_SIMPLE_ASSIGNMENT:\n            parent.removeChild(parent.getFirstChild());\n            Preconditions.checkState(parent.getFirstChild() \u003d\u003d null);\n            greatGrandParent.addChildAfter(newBlock, grandParent);\n            break;\n        case SIMPLE_ASSIGNMENT:\n            Preconditions.checkState(NodeUtil.isExpressionNode(grandParent));\n            greatGrandParent.replaceChild(grandParent, newBlock);\n            break;\n        case SIMPLE_CALL:\n            Preconditions.checkState(NodeUtil.isExpressionNode(parent));\n            grandParent.replaceChild(parent, newBlock);\n            break;\n        case EXPRESSION:\n            Node injectionPoint \u003d ExpressionDecomposer.findInjectionPoint(callNode);\n            Preconditions.checkNotNull(injectionPoint);\n            Node injectionPointParent \u003d injectionPoint.getParent();\n            Preconditions.checkNotNull(injectionPointParent);\n            Preconditions.checkState(NodeUtil.isStatementBlock(injectionPointParent));\n            newBlock.addChildrenToFront(NodeUtil.newVarNode(resultName, null).copyInformationFromForTree(callNode));\n            injectionPointParent.addChildBefore(newBlock, injectionPoint);\n            parent.replaceChild(callNode, IR.name(resultName));\n            break;\n        default:\n            throw new IllegalStateException(\"Unexpected call site type.\");\n    }\n    return newBlock;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionInjector.java",
      "functionStartLine": 399,
      "functionName": "inlineFunction",
      "functionAnnotation": "",
      "functionDoc": "Inline a function which fulfills the requirements of\ncanInlineReferenceAsStatementBlock into the call site, replacing the\nparent expression.\n",
      "diff": "@@ -1,60 +1,60 @@\n private Node inlineFunction(Node callNode, Node fnNode, String fnName) {\n     Node parent \u003d callNode.getParent();\n     Node grandParent \u003d parent.getParent();\n     CallSiteType callSiteType \u003d classifyCallSite(callNode);\n     Preconditions.checkArgument(callSiteType !\u003d CallSiteType.UNSUPPORTED);\n     boolean isCallInLoop \u003d NodeUtil.isWithinLoop(callNode);\n     String resultName \u003d null;\n     boolean needsDefaultReturnResult \u003d true;\n     switch(callSiteType) {\n         case SIMPLE_ASSIGNMENT:\n             resultName \u003d parent.getFirstChild().getString();\n             break;\n         case VAR_DECL_SIMPLE_ASSIGNMENT:\n             resultName \u003d parent.getString();\n             break;\n         case SIMPLE_CALL:\n             resultName \u003d null;\n             needsDefaultReturnResult \u003d false;\n             break;\n         case EXPRESSION:\n             resultName \u003d getUniqueResultName();\n             needsDefaultReturnResult \u003d isCallInLoop;\n             break;\n         case DECOMPOSABLE_EXPRESSION:\n             throw new IllegalStateException(\"Decomposable expressions must decomposed before inlining.\");\n         default:\n             throw new IllegalStateException(\"Unexpected call site type.\");\n     }\n     FunctionToBlockMutator mutator \u003d new FunctionToBlockMutator(compiler, this.safeNameIdSupplier);\n     Node newBlock \u003d mutator.mutate(fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop);\n     Node greatGrandParent \u003d grandParent.getParent();\n     switch(callSiteType) {\n         case VAR_DECL_SIMPLE_ASSIGNMENT:\n             parent.removeChild(parent.getFirstChild());\n             Preconditions.checkState(parent.getFirstChild() \u003d\u003d null);\n             greatGrandParent.addChildAfter(newBlock, grandParent);\n             break;\n         case SIMPLE_ASSIGNMENT:\n             Preconditions.checkState(NodeUtil.isExpressionNode(grandParent));\n             greatGrandParent.replaceChild(grandParent, newBlock);\n             break;\n         case SIMPLE_CALL:\n             Preconditions.checkState(NodeUtil.isExpressionNode(parent));\n             grandParent.replaceChild(parent, newBlock);\n             break;\n         case EXPRESSION:\n             Node injectionPoint \u003d ExpressionDecomposer.findInjectionPoint(callNode);\n             Preconditions.checkNotNull(injectionPoint);\n             Node injectionPointParent \u003d injectionPoint.getParent();\n             Preconditions.checkNotNull(injectionPointParent);\n             Preconditions.checkState(NodeUtil.isStatementBlock(injectionPointParent));\n             newBlock.addChildrenToFront(NodeUtil.newVarNode(resultName, null).copyInformationFromForTree(callNode));\n             injectionPointParent.addChildBefore(newBlock, injectionPoint);\n-            parent.replaceChild(callNode, Node.newString(Token.NAME, resultName));\n+            parent.replaceChild(callNode, IR.name(resultName));\n             break;\n         default:\n             throw new IllegalStateException(\"Unexpected call site type.\");\n     }\n     return newBlock;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4d05d82cb3f7f4f0a06852927798c6039fb4f50d": {
      "type": "Ybodychange",
      "commitMessage": "\nProperly inline functions with implicit returns when the call site\nis within a loop and embedded it is within an \"complex\" expression.\n\nR\u003dacleung\nDELTA\u003d43  (39 added, 2 deleted, 2 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3046\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1361 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/17/11, 10:46 AM",
      "commitName": "4d05d82cb3f7f4f0a06852927798c6039fb4f50d",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "8/8/11, 2:51 PM",
      "commitNameOld": "43cece8ccf72521faa04fc79fddfc5f7d661a787",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 8.83,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "actualSource": "private Node inlineFunction(Node callNode, Node fnNode, String fnName) {\n    Node parent \u003d callNode.getParent();\n    Node grandParent \u003d parent.getParent();\n    CallSiteType callSiteType \u003d classifyCallSite(callNode);\n    Preconditions.checkArgument(callSiteType !\u003d CallSiteType.UNSUPPORTED);\n    boolean isCallInLoop \u003d NodeUtil.isWithinLoop(callNode);\n    String resultName \u003d null;\n    boolean needsDefaultReturnResult \u003d true;\n    switch(callSiteType) {\n        case SIMPLE_ASSIGNMENT:\n            resultName \u003d parent.getFirstChild().getString();\n            break;\n        case VAR_DECL_SIMPLE_ASSIGNMENT:\n            resultName \u003d parent.getString();\n            break;\n        case SIMPLE_CALL:\n            resultName \u003d null;\n            needsDefaultReturnResult \u003d false;\n            break;\n        case EXPRESSION:\n            resultName \u003d getUniqueResultName();\n            needsDefaultReturnResult \u003d isCallInLoop;\n            break;\n        case DECOMPOSABLE_EXPRESSION:\n            throw new IllegalStateException(\"Decomposable expressions must decomposed before inlining.\");\n        default:\n            throw new IllegalStateException(\"Unexpected call site type.\");\n    }\n    FunctionToBlockMutator mutator \u003d new FunctionToBlockMutator(compiler, this.safeNameIdSupplier);\n    Node newBlock \u003d mutator.mutate(fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop);\n    Node greatGrandParent \u003d grandParent.getParent();\n    switch(callSiteType) {\n        case VAR_DECL_SIMPLE_ASSIGNMENT:\n            parent.removeChild(parent.getFirstChild());\n            Preconditions.checkState(parent.getFirstChild() \u003d\u003d null);\n            greatGrandParent.addChildAfter(newBlock, grandParent);\n            break;\n        case SIMPLE_ASSIGNMENT:\n            Preconditions.checkState(NodeUtil.isExpressionNode(grandParent));\n            greatGrandParent.replaceChild(grandParent, newBlock);\n            break;\n        case SIMPLE_CALL:\n            Preconditions.checkState(NodeUtil.isExpressionNode(parent));\n            grandParent.replaceChild(parent, newBlock);\n            break;\n        case EXPRESSION:\n            Node injectionPoint \u003d ExpressionDecomposer.findInjectionPoint(callNode);\n            Preconditions.checkNotNull(injectionPoint);\n            Node injectionPointParent \u003d injectionPoint.getParent();\n            Preconditions.checkNotNull(injectionPointParent);\n            Preconditions.checkState(NodeUtil.isStatementBlock(injectionPointParent));\n            newBlock.addChildrenToFront(NodeUtil.newVarNode(resultName, null).copyInformationFromForTree(callNode));\n            injectionPointParent.addChildBefore(newBlock, injectionPoint);\n            parent.replaceChild(callNode, Node.newString(Token.NAME, resultName));\n            break;\n        default:\n            throw new IllegalStateException(\"Unexpected call site type.\");\n    }\n    return newBlock;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionInjector.java",
      "functionStartLine": 383,
      "functionName": "inlineFunction",
      "functionAnnotation": "",
      "functionDoc": "Inline a function which fulfills the requirements of\ncanInlineReferenceAsStatementBlock into the call site, replacing the\nparent expression.\n",
      "diff": "@@ -1,60 +1,60 @@\n private Node inlineFunction(Node callNode, Node fnNode, String fnName) {\n     Node parent \u003d callNode.getParent();\n     Node grandParent \u003d parent.getParent();\n     CallSiteType callSiteType \u003d classifyCallSite(callNode);\n     Preconditions.checkArgument(callSiteType !\u003d CallSiteType.UNSUPPORTED);\n+    boolean isCallInLoop \u003d NodeUtil.isWithinLoop(callNode);\n     String resultName \u003d null;\n     boolean needsDefaultReturnResult \u003d true;\n     switch(callSiteType) {\n         case SIMPLE_ASSIGNMENT:\n             resultName \u003d parent.getFirstChild().getString();\n             break;\n         case VAR_DECL_SIMPLE_ASSIGNMENT:\n             resultName \u003d parent.getString();\n             break;\n         case SIMPLE_CALL:\n             resultName \u003d null;\n             needsDefaultReturnResult \u003d false;\n             break;\n         case EXPRESSION:\n             resultName \u003d getUniqueResultName();\n-            needsDefaultReturnResult \u003d false;\n+            needsDefaultReturnResult \u003d isCallInLoop;\n             break;\n         case DECOMPOSABLE_EXPRESSION:\n             throw new IllegalStateException(\"Decomposable expressions must decomposed before inlining.\");\n         default:\n             throw new IllegalStateException(\"Unexpected call site type.\");\n     }\n-    boolean isCallInLoop \u003d NodeUtil.isWithinLoop(callNode);\n     FunctionToBlockMutator mutator \u003d new FunctionToBlockMutator(compiler, this.safeNameIdSupplier);\n     Node newBlock \u003d mutator.mutate(fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop);\n     Node greatGrandParent \u003d grandParent.getParent();\n     switch(callSiteType) {\n         case VAR_DECL_SIMPLE_ASSIGNMENT:\n             parent.removeChild(parent.getFirstChild());\n             Preconditions.checkState(parent.getFirstChild() \u003d\u003d null);\n             greatGrandParent.addChildAfter(newBlock, grandParent);\n             break;\n         case SIMPLE_ASSIGNMENT:\n             Preconditions.checkState(NodeUtil.isExpressionNode(grandParent));\n             greatGrandParent.replaceChild(grandParent, newBlock);\n             break;\n         case SIMPLE_CALL:\n             Preconditions.checkState(NodeUtil.isExpressionNode(parent));\n             grandParent.replaceChild(parent, newBlock);\n             break;\n         case EXPRESSION:\n             Node injectionPoint \u003d ExpressionDecomposer.findInjectionPoint(callNode);\n             Preconditions.checkNotNull(injectionPoint);\n             Node injectionPointParent \u003d injectionPoint.getParent();\n             Preconditions.checkNotNull(injectionPointParent);\n             Preconditions.checkState(NodeUtil.isStatementBlock(injectionPointParent));\n             newBlock.addChildrenToFront(NodeUtil.newVarNode(resultName, null).copyInformationFromForTree(callNode));\n             injectionPointParent.addChildBefore(newBlock, injectionPoint);\n             parent.replaceChild(callNode, Node.newString(Token.NAME, resultName));\n             break;\n         default:\n             throw new IllegalStateException(\"Unexpected call site type.\");\n     }\n     return newBlock;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "793a50095cb8e289cbe3e3446f7432e33e2d102a": {
      "type": "Ybodychange",
      "commitMessage": "\nFlowSensitiveInlineVariable pass does not try to inline variables within loops.\n\nR\u003dacleung\nDELTA\u003d46  (27 added, 18 deleted, 1 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d196210\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@393 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/27/10, 7:35 PM",
      "commitName": "793a50095cb8e289cbe3e3446f7432e33e2d102a",
      "commitAuthor": "dhans@google.com",
      "commitDateOld": "6/16/10, 12:33 PM",
      "commitNameOld": "e33e925eea3a8e4de958864e531e1adc4da62e18",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 72.29,
      "commitsBetweenForRepo": 148,
      "commitsBetweenForFile": 1,
      "actualSource": "private Node inlineFunction(Node callNode, Node fnNode, String fnName) {\n    Node parent \u003d callNode.getParent();\n    Node grandParent \u003d parent.getParent();\n    CallSiteType callSiteType \u003d classifyCallSite(callNode);\n    Preconditions.checkArgument(callSiteType !\u003d CallSiteType.UNSUPPORTED);\n    String resultName \u003d null;\n    boolean needsDefaultReturnResult \u003d true;\n    switch(callSiteType) {\n        case SIMPLE_ASSIGNMENT:\n            resultName \u003d parent.getFirstChild().getString();\n            break;\n        case VAR_DECL_SIMPLE_ASSIGNMENT:\n            resultName \u003d parent.getString();\n            break;\n        case SIMPLE_CALL:\n            resultName \u003d null;\n            needsDefaultReturnResult \u003d false;\n            break;\n        case EXPRESSION:\n            resultName \u003d getUniqueResultName();\n            needsDefaultReturnResult \u003d false;\n            break;\n        case DECOMPOSABLE_EXPRESSION:\n            throw new IllegalStateException(\"Decomposable expressions must decomposed before inlining.\");\n        default:\n            throw new IllegalStateException(\"Unexpected call site type.\");\n    }\n    boolean isCallInLoop \u003d NodeUtil.isWithinLoop(callNode);\n    FunctionToBlockMutator mutator \u003d new FunctionToBlockMutator(compiler, this.safeNameIdSupplier);\n    Node newBlock \u003d mutator.mutate(fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop);\n    Node greatGrandParent \u003d grandParent.getParent();\n    switch(callSiteType) {\n        case VAR_DECL_SIMPLE_ASSIGNMENT:\n            parent.removeChild(parent.getFirstChild());\n            Preconditions.checkState(parent.getFirstChild() \u003d\u003d null);\n            greatGrandParent.addChildAfter(newBlock, grandParent);\n            break;\n        case SIMPLE_ASSIGNMENT:\n            Preconditions.checkState(NodeUtil.isExpressionNode(grandParent));\n            greatGrandParent.replaceChild(grandParent, newBlock);\n            break;\n        case SIMPLE_CALL:\n            Preconditions.checkState(NodeUtil.isExpressionNode(parent));\n            grandParent.replaceChild(parent, newBlock);\n            break;\n        case EXPRESSION:\n            Node injectionPoint \u003d ExpressionDecomposer.findInjectionPoint(callNode);\n            Preconditions.checkNotNull(injectionPoint);\n            Node injectionPointParent \u003d injectionPoint.getParent();\n            Preconditions.checkNotNull(injectionPointParent);\n            Preconditions.checkState(NodeUtil.isStatementBlock(injectionPointParent));\n            newBlock.addChildrenToFront(NodeUtil.newVarNode(resultName, null).copyInformationFromForTree(callNode));\n            injectionPointParent.addChildBefore(newBlock, injectionPoint);\n            parent.replaceChild(callNode, Node.newString(Token.NAME, resultName));\n            break;\n        default:\n            throw new IllegalStateException(\"Unexpected call site type.\");\n    }\n    return newBlock;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionInjector.java",
      "functionStartLine": 371,
      "functionName": "inlineFunction",
      "functionAnnotation": "",
      "functionDoc": "Inline a function which fulfills the requirements of\ncanInlineReferenceAsStatementBlock into the call site, replacing the\nparent expression.\n",
      "diff": "@@ -1,60 +1,60 @@\n private Node inlineFunction(Node callNode, Node fnNode, String fnName) {\n     Node parent \u003d callNode.getParent();\n     Node grandParent \u003d parent.getParent();\n     CallSiteType callSiteType \u003d classifyCallSite(callNode);\n     Preconditions.checkArgument(callSiteType !\u003d CallSiteType.UNSUPPORTED);\n     String resultName \u003d null;\n     boolean needsDefaultReturnResult \u003d true;\n     switch(callSiteType) {\n         case SIMPLE_ASSIGNMENT:\n             resultName \u003d parent.getFirstChild().getString();\n             break;\n         case VAR_DECL_SIMPLE_ASSIGNMENT:\n             resultName \u003d parent.getString();\n             break;\n         case SIMPLE_CALL:\n             resultName \u003d null;\n             needsDefaultReturnResult \u003d false;\n             break;\n         case EXPRESSION:\n             resultName \u003d getUniqueResultName();\n             needsDefaultReturnResult \u003d false;\n             break;\n         case DECOMPOSABLE_EXPRESSION:\n             throw new IllegalStateException(\"Decomposable expressions must decomposed before inlining.\");\n         default:\n             throw new IllegalStateException(\"Unexpected call site type.\");\n     }\n-    boolean isCallInLoop \u003d isCallWithinLoop(callNode);\n+    boolean isCallInLoop \u003d NodeUtil.isWithinLoop(callNode);\n     FunctionToBlockMutator mutator \u003d new FunctionToBlockMutator(compiler, this.safeNameIdSupplier);\n     Node newBlock \u003d mutator.mutate(fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop);\n     Node greatGrandParent \u003d grandParent.getParent();\n     switch(callSiteType) {\n         case VAR_DECL_SIMPLE_ASSIGNMENT:\n             parent.removeChild(parent.getFirstChild());\n             Preconditions.checkState(parent.getFirstChild() \u003d\u003d null);\n             greatGrandParent.addChildAfter(newBlock, grandParent);\n             break;\n         case SIMPLE_ASSIGNMENT:\n             Preconditions.checkState(NodeUtil.isExpressionNode(grandParent));\n             greatGrandParent.replaceChild(grandParent, newBlock);\n             break;\n         case SIMPLE_CALL:\n             Preconditions.checkState(NodeUtil.isExpressionNode(parent));\n             grandParent.replaceChild(parent, newBlock);\n             break;\n         case EXPRESSION:\n             Node injectionPoint \u003d ExpressionDecomposer.findInjectionPoint(callNode);\n             Preconditions.checkNotNull(injectionPoint);\n             Node injectionPointParent \u003d injectionPoint.getParent();\n             Preconditions.checkNotNull(injectionPointParent);\n             Preconditions.checkState(NodeUtil.isStatementBlock(injectionPointParent));\n             newBlock.addChildrenToFront(NodeUtil.newVarNode(resultName, null).copyInformationFromForTree(callNode));\n             injectionPointParent.addChildBefore(newBlock, injectionPoint);\n             parent.replaceChild(callNode, Node.newString(Token.NAME, resultName));\n             break;\n         default:\n             throw new IllegalStateException(\"Unexpected call site type.\");\n     }\n     return newBlock;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6e3eb4f7619179ba6c23db2af7549ef02f588c35": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/04/15 by john\n\n        Maintain source information in OverloadedMethodResolution.\n\n        R\u003dandrew\n        DELTA\u003d8  (5 added, 1 deleted, 2 changed)\n\nChange on 2010/04/15 by john\n\n        Maintain source information during function inlining.\n\n        R\u003dalan\n        DELTA\u003d104  (73 added, 2 deleted, 29 changed)\n\nChange on 2010/04/15 by john\n\n        Improve LineNumberCheck error message.\n\n        R\u003dnick\n        DELTA\u003d4  (3 added, 0 deleted, 1 changed)\n\nChange on 2010/04/15 by john\n\n        Maintain source information in smart name removal.\n        Enabled Normalize during tests, simplified VAR handling.\n\n        R\u003dantonio\n        DELTA\u003d71  (12 added, 48 deleted, 11 changed)\n\nChange on 2010/04/15 by john\n\n        Maintain source information in InlineGetters.\n\n        R\u003dalan\n        DELTA\u003d8  (7 added, 0 deleted, 1 changed)\n\nChange on 2010/04/15 by alan\n\n        Stops the post data from printing multiple times.\n\n        R\u003djohn\n        DELTA\u003d4  (1 added, 0 deleted, 3 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dhuwaud\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@188 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/16/10, 10:20 AM",
      "commitName": "6e3eb4f7619179ba6c23db2af7549ef02f588c35",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "3/11/10, 9:31 PM",
      "commitNameOld": "7bfdbd9164601af44d17edd51be829fde2cc51aa",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 35.49,
      "commitsBetweenForRepo": 51,
      "commitsBetweenForFile": 1,
      "actualSource": "private Node inlineFunction(Node callNode, Node fnNode, String fnName) {\n    Node parent \u003d callNode.getParent();\n    Node grandParent \u003d parent.getParent();\n    CallSiteType callSiteType \u003d classifyCallSite(callNode);\n    Preconditions.checkArgument(callSiteType !\u003d CallSiteType.UNSUPPORTED);\n    String resultName \u003d null;\n    boolean needsDefaultReturnResult \u003d true;\n    switch(callSiteType) {\n        case SIMPLE_ASSIGNMENT:\n            resultName \u003d parent.getFirstChild().getString();\n            break;\n        case VAR_DECL_SIMPLE_ASSIGNMENT:\n            resultName \u003d parent.getString();\n            break;\n        case SIMPLE_CALL:\n            resultName \u003d null;\n            needsDefaultReturnResult \u003d false;\n            break;\n        case EXPRESSION:\n            resultName \u003d getUniqueResultName();\n            needsDefaultReturnResult \u003d false;\n            break;\n        case DECOMPOSABLE_EXPRESSION:\n            throw new IllegalStateException(\"Decomposable expressions must decomposed before inlining.\");\n        default:\n            throw new IllegalStateException(\"Unexpected call site type.\");\n    }\n    boolean isCallInLoop \u003d isCallWithinLoop(callNode);\n    FunctionToBlockMutator mutator \u003d new FunctionToBlockMutator(compiler, this.safeNameIdSupplier);\n    Node newBlock \u003d mutator.mutate(fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop);\n    Node greatGrandParent \u003d grandParent.getParent();\n    switch(callSiteType) {\n        case VAR_DECL_SIMPLE_ASSIGNMENT:\n            parent.removeChild(parent.getFirstChild());\n            Preconditions.checkState(parent.getFirstChild() \u003d\u003d null);\n            greatGrandParent.addChildAfter(newBlock, grandParent);\n            break;\n        case SIMPLE_ASSIGNMENT:\n            Preconditions.checkState(NodeUtil.isExpressionNode(grandParent));\n            greatGrandParent.replaceChild(grandParent, newBlock);\n            break;\n        case SIMPLE_CALL:\n            Preconditions.checkState(NodeUtil.isExpressionNode(parent));\n            grandParent.replaceChild(parent, newBlock);\n            break;\n        case EXPRESSION:\n            Node injectionPoint \u003d ExpressionDecomposer.findInjectionPoint(callNode);\n            Preconditions.checkNotNull(injectionPoint);\n            Node injectionPointParent \u003d injectionPoint.getParent();\n            Preconditions.checkNotNull(injectionPointParent);\n            Preconditions.checkState(NodeUtil.isStatementBlock(injectionPointParent));\n            newBlock.addChildrenToFront(NodeUtil.newVarNode(resultName, null).copyInformationFromForTree(callNode));\n            injectionPointParent.addChildBefore(newBlock, injectionPoint);\n            parent.replaceChild(callNode, Node.newString(Token.NAME, resultName));\n            break;\n        default:\n            throw new IllegalStateException(\"Unexpected call site type.\");\n    }\n    return newBlock;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionInjector.java",
      "functionStartLine": 361,
      "functionName": "inlineFunction",
      "functionAnnotation": "",
      "functionDoc": "Inline a function which fulfills the requirements of\ncanInlineReferenceAsStatementBlock into the call site, replacing the\nparent expression.\n",
      "diff": "@@ -1,60 +1,60 @@\n private Node inlineFunction(Node callNode, Node fnNode, String fnName) {\n     Node parent \u003d callNode.getParent();\n     Node grandParent \u003d parent.getParent();\n     CallSiteType callSiteType \u003d classifyCallSite(callNode);\n     Preconditions.checkArgument(callSiteType !\u003d CallSiteType.UNSUPPORTED);\n     String resultName \u003d null;\n     boolean needsDefaultReturnResult \u003d true;\n     switch(callSiteType) {\n         case SIMPLE_ASSIGNMENT:\n             resultName \u003d parent.getFirstChild().getString();\n             break;\n         case VAR_DECL_SIMPLE_ASSIGNMENT:\n             resultName \u003d parent.getString();\n             break;\n         case SIMPLE_CALL:\n             resultName \u003d null;\n             needsDefaultReturnResult \u003d false;\n             break;\n         case EXPRESSION:\n             resultName \u003d getUniqueResultName();\n             needsDefaultReturnResult \u003d false;\n             break;\n         case DECOMPOSABLE_EXPRESSION:\n             throw new IllegalStateException(\"Decomposable expressions must decomposed before inlining.\");\n         default:\n             throw new IllegalStateException(\"Unexpected call site type.\");\n     }\n     boolean isCallInLoop \u003d isCallWithinLoop(callNode);\n     FunctionToBlockMutator mutator \u003d new FunctionToBlockMutator(compiler, this.safeNameIdSupplier);\n     Node newBlock \u003d mutator.mutate(fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop);\n     Node greatGrandParent \u003d grandParent.getParent();\n     switch(callSiteType) {\n         case VAR_DECL_SIMPLE_ASSIGNMENT:\n             parent.removeChild(parent.getFirstChild());\n             Preconditions.checkState(parent.getFirstChild() \u003d\u003d null);\n             greatGrandParent.addChildAfter(newBlock, grandParent);\n             break;\n         case SIMPLE_ASSIGNMENT:\n             Preconditions.checkState(NodeUtil.isExpressionNode(grandParent));\n             greatGrandParent.replaceChild(grandParent, newBlock);\n             break;\n         case SIMPLE_CALL:\n             Preconditions.checkState(NodeUtil.isExpressionNode(parent));\n             grandParent.replaceChild(parent, newBlock);\n             break;\n         case EXPRESSION:\n             Node injectionPoint \u003d ExpressionDecomposer.findInjectionPoint(callNode);\n             Preconditions.checkNotNull(injectionPoint);\n             Node injectionPointParent \u003d injectionPoint.getParent();\n             Preconditions.checkNotNull(injectionPointParent);\n             Preconditions.checkState(NodeUtil.isStatementBlock(injectionPointParent));\n-            newBlock.addChildrenToFront(NodeUtil.newVarNode(resultName, null));\n+            newBlock.addChildrenToFront(NodeUtil.newVarNode(resultName, null).copyInformationFromForTree(callNode));\n             injectionPointParent.addChildBefore(newBlock, injectionPoint);\n             parent.replaceChild(callNode, Node.newString(Token.NAME, resultName));\n             break;\n         default:\n             throw new IllegalStateException(\"Unexpected call site type.\");\n     }\n     return newBlock;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "14ddcfdc0b8d1cece3c79221b1870b84f055d419": {
      "type": "Ybodychange",
      "commitMessage": "Change the internal representation of constant variables.\n\nRun inline-variables before smart-name-removal.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@37 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/17/09, 4:20 PM",
      "commitName": "14ddcfdc0b8d1cece3c79221b1870b84f055d419",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/6/09, 5:24 PM",
      "commitNameOld": "0b7eccf2fd3a9293d7b513fbb766d7bc06abd7e0",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 40.96,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "actualSource": "private Node inlineFunction(Node callNode, Node fnNode, String fnName) {\n    Node parent \u003d callNode.getParent();\n    Node grandParent \u003d parent.getParent();\n    CallSiteType callSiteType \u003d classifyCallSite(callNode);\n    Preconditions.checkArgument(callSiteType !\u003d CallSiteType.UNSUPPORTED);\n    String resultName \u003d null;\n    boolean needsDefaultReturnResult \u003d true;\n    switch(callSiteType) {\n        case SIMPLE_ASSIGNMENT:\n            resultName \u003d parent.getFirstChild().getString();\n            break;\n        case VAR_DECL_SIMPLE_ASSIGNMENT:\n            resultName \u003d parent.getString();\n            break;\n        case SIMPLE_CALL:\n            resultName \u003d null;\n            needsDefaultReturnResult \u003d false;\n            break;\n        case EXPRESSION:\n            resultName \u003d getUniqueResultName();\n            needsDefaultReturnResult \u003d false;\n            break;\n        case DECOMPOSABLE_EXPRESSION:\n            throw new IllegalStateException(\"Decomposable expressions must decomposed before inlining.\");\n        default:\n            throw new IllegalStateException(\"Unexpected call site type.\");\n    }\n    boolean isCallInLoop \u003d isCallWithinLoop(callNode);\n    FunctionToBlockMutator mutator \u003d new FunctionToBlockMutator(compiler, this.safeNameIdSupplier);\n    Node newBlock \u003d mutator.mutate(fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop);\n    Node greatGrandParent \u003d grandParent.getParent();\n    switch(callSiteType) {\n        case VAR_DECL_SIMPLE_ASSIGNMENT:\n            parent.removeChild(parent.getFirstChild());\n            Preconditions.checkState(parent.getFirstChild() \u003d\u003d null);\n            greatGrandParent.addChildAfter(newBlock, grandParent);\n            break;\n        case SIMPLE_ASSIGNMENT:\n            Preconditions.checkState(NodeUtil.isExpressionNode(grandParent));\n            greatGrandParent.replaceChild(grandParent, newBlock);\n            break;\n        case SIMPLE_CALL:\n            Preconditions.checkState(NodeUtil.isExpressionNode(parent));\n            grandParent.replaceChild(parent, newBlock);\n            break;\n        case EXPRESSION:\n            Node injectionPoint \u003d ExpressionDecomposer.findInjectionPoint(callNode);\n            Preconditions.checkNotNull(injectionPoint);\n            Node injectionPointParent \u003d injectionPoint.getParent();\n            Preconditions.checkNotNull(injectionPointParent);\n            Preconditions.checkState(NodeUtil.isStatementBlock(injectionPointParent));\n            newBlock.addChildrenToFront(NodeUtil.newVarNode(resultName, null));\n            injectionPointParent.addChildBefore(newBlock, injectionPoint);\n            parent.replaceChild(callNode, Node.newString(Token.NAME, resultName));\n            break;\n        default:\n            throw new IllegalStateException(\"Unexpected call site type.\");\n    }\n    return newBlock;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionInjector.java",
      "functionStartLine": 360,
      "functionName": "inlineFunction",
      "functionAnnotation": "",
      "functionDoc": "Inline a function which fulfills the requirements of\ncanInlineReferenceAsStatementBlock into the call site, replacing the\nparent expression.\n",
      "diff": "@@ -1,61 +1,60 @@\n private Node inlineFunction(Node callNode, Node fnNode, String fnName) {\n     Node parent \u003d callNode.getParent();\n     Node grandParent \u003d parent.getParent();\n     CallSiteType callSiteType \u003d classifyCallSite(callNode);\n     Preconditions.checkArgument(callSiteType !\u003d CallSiteType.UNSUPPORTED);\n     String resultName \u003d null;\n     boolean needsDefaultReturnResult \u003d true;\n     switch(callSiteType) {\n         case SIMPLE_ASSIGNMENT:\n             resultName \u003d parent.getFirstChild().getString();\n             break;\n         case VAR_DECL_SIMPLE_ASSIGNMENT:\n             resultName \u003d parent.getString();\n             break;\n         case SIMPLE_CALL:\n             resultName \u003d null;\n             needsDefaultReturnResult \u003d false;\n             break;\n         case EXPRESSION:\n             resultName \u003d getUniqueResultName();\n             needsDefaultReturnResult \u003d false;\n             break;\n         case DECOMPOSABLE_EXPRESSION:\n             throw new IllegalStateException(\"Decomposable expressions must decomposed before inlining.\");\n         default:\n             throw new IllegalStateException(\"Unexpected call site type.\");\n     }\n     boolean isCallInLoop \u003d isCallWithinLoop(callNode);\n     FunctionToBlockMutator mutator \u003d new FunctionToBlockMutator(compiler, this.safeNameIdSupplier);\n-    String fnNameClean \u003d Normalize.removeConstantMarkerFromName(fnName);\n-    Node newBlock \u003d mutator.mutate(fnNameClean, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop);\n+    Node newBlock \u003d mutator.mutate(fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop);\n     Node greatGrandParent \u003d grandParent.getParent();\n     switch(callSiteType) {\n         case VAR_DECL_SIMPLE_ASSIGNMENT:\n             parent.removeChild(parent.getFirstChild());\n             Preconditions.checkState(parent.getFirstChild() \u003d\u003d null);\n             greatGrandParent.addChildAfter(newBlock, grandParent);\n             break;\n         case SIMPLE_ASSIGNMENT:\n             Preconditions.checkState(NodeUtil.isExpressionNode(grandParent));\n             greatGrandParent.replaceChild(grandParent, newBlock);\n             break;\n         case SIMPLE_CALL:\n             Preconditions.checkState(NodeUtil.isExpressionNode(parent));\n             grandParent.replaceChild(parent, newBlock);\n             break;\n         case EXPRESSION:\n             Node injectionPoint \u003d ExpressionDecomposer.findInjectionPoint(callNode);\n             Preconditions.checkNotNull(injectionPoint);\n             Node injectionPointParent \u003d injectionPoint.getParent();\n             Preconditions.checkNotNull(injectionPointParent);\n             Preconditions.checkState(NodeUtil.isStatementBlock(injectionPointParent));\n             newBlock.addChildrenToFront(NodeUtil.newVarNode(resultName, null));\n             injectionPointParent.addChildBefore(newBlock, injectionPoint);\n             parent.replaceChild(callNode, Node.newString(Token.NAME, resultName));\n             break;\n         default:\n             throw new IllegalStateException(\"Unexpected call site type.\");\n     }\n     return newBlock;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,61 @@\n+private Node inlineFunction(Node callNode, Node fnNode, String fnName) {\n+    Node parent \u003d callNode.getParent();\n+    Node grandParent \u003d parent.getParent();\n+    CallSiteType callSiteType \u003d classifyCallSite(callNode);\n+    Preconditions.checkArgument(callSiteType !\u003d CallSiteType.UNSUPPORTED);\n+    String resultName \u003d null;\n+    boolean needsDefaultReturnResult \u003d true;\n+    switch(callSiteType) {\n+        case SIMPLE_ASSIGNMENT:\n+            resultName \u003d parent.getFirstChild().getString();\n+            break;\n+        case VAR_DECL_SIMPLE_ASSIGNMENT:\n+            resultName \u003d parent.getString();\n+            break;\n+        case SIMPLE_CALL:\n+            resultName \u003d null;\n+            needsDefaultReturnResult \u003d false;\n+            break;\n+        case EXPRESSION:\n+            resultName \u003d getUniqueResultName();\n+            needsDefaultReturnResult \u003d false;\n+            break;\n+        case DECOMPOSABLE_EXPRESSION:\n+            throw new IllegalStateException(\"Decomposable expressions must decomposed before inlining.\");\n+        default:\n+            throw new IllegalStateException(\"Unexpected call site type.\");\n+    }\n+    boolean isCallInLoop \u003d isCallWithinLoop(callNode);\n+    FunctionToBlockMutator mutator \u003d new FunctionToBlockMutator(compiler, this.safeNameIdSupplier);\n+    String fnNameClean \u003d Normalize.removeConstantMarkerFromName(fnName);\n+    Node newBlock \u003d mutator.mutate(fnNameClean, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop);\n+    Node greatGrandParent \u003d grandParent.getParent();\n+    switch(callSiteType) {\n+        case VAR_DECL_SIMPLE_ASSIGNMENT:\n+            parent.removeChild(parent.getFirstChild());\n+            Preconditions.checkState(parent.getFirstChild() \u003d\u003d null);\n+            greatGrandParent.addChildAfter(newBlock, grandParent);\n+            break;\n+        case SIMPLE_ASSIGNMENT:\n+            Preconditions.checkState(NodeUtil.isExpressionNode(grandParent));\n+            greatGrandParent.replaceChild(grandParent, newBlock);\n+            break;\n+        case SIMPLE_CALL:\n+            Preconditions.checkState(NodeUtil.isExpressionNode(parent));\n+            grandParent.replaceChild(parent, newBlock);\n+            break;\n+        case EXPRESSION:\n+            Node injectionPoint \u003d ExpressionDecomposer.findInjectionPoint(callNode);\n+            Preconditions.checkNotNull(injectionPoint);\n+            Node injectionPointParent \u003d injectionPoint.getParent();\n+            Preconditions.checkNotNull(injectionPointParent);\n+            Preconditions.checkState(NodeUtil.isStatementBlock(injectionPointParent));\n+            newBlock.addChildrenToFront(NodeUtil.newVarNode(resultName, null));\n+            injectionPointParent.addChildBefore(newBlock, injectionPoint);\n+            parent.replaceChild(callNode, Node.newString(Token.NAME, resultName));\n+            break;\n+        default:\n+            throw new IllegalStateException(\"Unexpected call site type.\");\n+    }\n+    return newBlock;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private Node inlineFunction(Node callNode, Node fnNode, String fnName) {\n    Node parent \u003d callNode.getParent();\n    Node grandParent \u003d parent.getParent();\n    CallSiteType callSiteType \u003d classifyCallSite(callNode);\n    Preconditions.checkArgument(callSiteType !\u003d CallSiteType.UNSUPPORTED);\n    String resultName \u003d null;\n    boolean needsDefaultReturnResult \u003d true;\n    switch(callSiteType) {\n        case SIMPLE_ASSIGNMENT:\n            resultName \u003d parent.getFirstChild().getString();\n            break;\n        case VAR_DECL_SIMPLE_ASSIGNMENT:\n            resultName \u003d parent.getString();\n            break;\n        case SIMPLE_CALL:\n            resultName \u003d null;\n            needsDefaultReturnResult \u003d false;\n            break;\n        case EXPRESSION:\n            resultName \u003d getUniqueResultName();\n            needsDefaultReturnResult \u003d false;\n            break;\n        case DECOMPOSABLE_EXPRESSION:\n            throw new IllegalStateException(\"Decomposable expressions must decomposed before inlining.\");\n        default:\n            throw new IllegalStateException(\"Unexpected call site type.\");\n    }\n    boolean isCallInLoop \u003d isCallWithinLoop(callNode);\n    FunctionToBlockMutator mutator \u003d new FunctionToBlockMutator(compiler, this.safeNameIdSupplier);\n    String fnNameClean \u003d Normalize.removeConstantMarkerFromName(fnName);\n    Node newBlock \u003d mutator.mutate(fnNameClean, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop);\n    Node greatGrandParent \u003d grandParent.getParent();\n    switch(callSiteType) {\n        case VAR_DECL_SIMPLE_ASSIGNMENT:\n            parent.removeChild(parent.getFirstChild());\n            Preconditions.checkState(parent.getFirstChild() \u003d\u003d null);\n            greatGrandParent.addChildAfter(newBlock, grandParent);\n            break;\n        case SIMPLE_ASSIGNMENT:\n            Preconditions.checkState(NodeUtil.isExpressionNode(grandParent));\n            greatGrandParent.replaceChild(grandParent, newBlock);\n            break;\n        case SIMPLE_CALL:\n            Preconditions.checkState(NodeUtil.isExpressionNode(parent));\n            grandParent.replaceChild(parent, newBlock);\n            break;\n        case EXPRESSION:\n            Node injectionPoint \u003d ExpressionDecomposer.findInjectionPoint(callNode);\n            Preconditions.checkNotNull(injectionPoint);\n            Node injectionPointParent \u003d injectionPoint.getParent();\n            Preconditions.checkNotNull(injectionPointParent);\n            Preconditions.checkState(NodeUtil.isStatementBlock(injectionPointParent));\n            newBlock.addChildrenToFront(NodeUtil.newVarNode(resultName, null));\n            injectionPointParent.addChildBefore(newBlock, injectionPoint);\n            parent.replaceChild(callNode, Node.newString(Token.NAME, resultName));\n            break;\n        default:\n            throw new IllegalStateException(\"Unexpected call site type.\");\n    }\n    return newBlock;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionInjector.java",
      "functionStartLine": 360,
      "functionName": "inlineFunction",
      "functionAnnotation": "",
      "functionDoc": "Inline a function which fulfills the requirements of\ncanInlineReferenceAsStatementBlock into the call site, replacing the\nparent expression.\n"
    }
  }
}