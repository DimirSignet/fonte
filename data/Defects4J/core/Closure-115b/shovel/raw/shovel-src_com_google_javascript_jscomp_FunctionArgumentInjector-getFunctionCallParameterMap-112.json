{
  "origin": "codeshovel",
  "repositoryName": "Closure-115b",
  "repositoryPath": "/tmp/Closure-115b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FunctionArgumentInjector.java",
  "functionName": "getFunctionCallParameterMap",
  "functionId": "getFunctionCallParameterMap___fnNode-Node__callNode-Node__safeNameIdSupplier-Supplier__String__",
  "sourceFilePath": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java",
  "functionAnnotation": "",
  "functionDoc": "Get a mapping for function parameter names to call arguments.\n",
  "functionStartLine": 112,
  "functionEndLine": 149,
  "numCommitsSeen": 24,
  "timeTaken": 1491,
  "changeHistory": [
    "f0ff2971eca336e950929b3ee0d80155338bb1dd",
    "cc4ec1a70e6fa02bda751582c3902b3c19f85bbb",
    "dd5a73fdb8740d4753a2c08efaa9eb56932943a0",
    "51e81d0fd794bee6d8765513f853a312f176dcd7",
    "b783533aac33c06fc34ed4c3f284aa8411ea0c54",
    "6e3eb4f7619179ba6c23db2af7549ef02f588c35",
    "14ddcfdc0b8d1cece3c79221b1870b84f055d419",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "f0ff2971eca336e950929b3ee0d80155338bb1dd": "Ybodychange",
    "cc4ec1a70e6fa02bda751582c3902b3c19f85bbb": "Ybodychange",
    "dd5a73fdb8740d4753a2c08efaa9eb56932943a0": "Ybodychange",
    "51e81d0fd794bee6d8765513f853a312f176dcd7": "Ybodychange",
    "b783533aac33c06fc34ed4c3f284aa8411ea0c54": "Ybodychange",
    "6e3eb4f7619179ba6c23db2af7549ef02f588c35": "Ybodychange",
    "14ddcfdc0b8d1cece3c79221b1870b84f055d419": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f0ff2971eca336e950929b3ee0d80155338bb1dd": {
      "type": "Ybodychange",
      "commitMessage": "\nCruft removal: remove some unused locals and parameters.\n\nR\u003ddimvar\nDELTA\u003d336 (6 added, 108 deleted, 222 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d6092\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2447 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/8/13, 12:15 PM",
      "commitName": "f0ff2971eca336e950929b3ee0d80155338bb1dd",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "5/18/12, 11:09 AM",
      "commitNameOld": "70a5626922ea7e8c98747e22b6986638ba38fadc",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 235.09,
      "commitsBetweenForRepo": 436,
      "commitsBetweenForFile": 1,
      "actualSource": "static LinkedHashMap\u003cString, Node\u003e getFunctionCallParameterMap(Node fnNode, Node callNode, Supplier\u003cString\u003e safeNameIdSupplier) {\n    LinkedHashMap\u003cString, Node\u003e argMap \u003d Maps.newLinkedHashMap();\n    Node cArg \u003d callNode.getFirstChild().getNext();\n    if (cArg !\u003d null \u0026\u0026 NodeUtil.isFunctionObjectCall(callNode)) {\n        argMap.put(THIS_MARKER, cArg);\n        cArg \u003d cArg.getNext();\n    } else {\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n        argMap.put(THIS_MARKER, NodeUtil.newUndefinedNode(callNode));\n    }\n    for (Node fnArg : NodeUtil.getFunctionParameters(fnNode).children()) {\n        if (cArg !\u003d null) {\n            argMap.put(fnArg.getString(), cArg);\n            cArg \u003d cArg.getNext();\n        } else {\n            Node srcLocation \u003d callNode;\n            argMap.put(fnArg.getString(), NodeUtil.newUndefinedNode(srcLocation));\n        }\n    }\n    while (cArg !\u003d null) {\n        String uniquePlaceholder \u003d getUniqueAnonymousParameterName(safeNameIdSupplier);\n        argMap.put(uniquePlaceholder, cArg);\n        cArg \u003d cArg.getNext();\n    }\n    return argMap;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java",
      "functionStartLine": 112,
      "functionName": "getFunctionCallParameterMap",
      "functionAnnotation": "",
      "functionDoc": "Get a mapping for function parameter names to call arguments.\n",
      "diff": "@@ -1,27 +1,26 @@\n static LinkedHashMap\u003cString, Node\u003e getFunctionCallParameterMap(Node fnNode, Node callNode, Supplier\u003cString\u003e safeNameIdSupplier) {\n     LinkedHashMap\u003cString, Node\u003e argMap \u003d Maps.newLinkedHashMap();\n     Node cArg \u003d callNode.getFirstChild().getNext();\n     if (cArg !\u003d null \u0026\u0026 NodeUtil.isFunctionObjectCall(callNode)) {\n         argMap.put(THIS_MARKER, cArg);\n         cArg \u003d cArg.getNext();\n     } else {\n         Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n         argMap.put(THIS_MARKER, NodeUtil.newUndefinedNode(callNode));\n     }\n     for (Node fnArg : NodeUtil.getFunctionParameters(fnNode).children()) {\n         if (cArg !\u003d null) {\n             argMap.put(fnArg.getString(), cArg);\n             cArg \u003d cArg.getNext();\n         } else {\n             Node srcLocation \u003d callNode;\n             argMap.put(fnArg.getString(), NodeUtil.newUndefinedNode(srcLocation));\n         }\n     }\n-    int anonArg \u003d 0;\n     while (cArg !\u003d null) {\n         String uniquePlaceholder \u003d getUniqueAnonymousParameterName(safeNameIdSupplier);\n         argMap.put(uniquePlaceholder, cArg);\n         cArg \u003d cArg.getNext();\n     }\n     return argMap;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "cc4ec1a70e6fa02bda751582c3902b3c19f85bbb": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nFixed invalid \"this\" replacement within inner functions.\n\n*** Original change description ***\n\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nBreaks things\n\n*** Original change description ***\n\nWhen it is possible to make the ES5 Strict mode assumptions about a\nfunction\u0027s \"this\" it is easier to inline a function referencing \"this\".\nAdd \"CompilerOption.assumeStrictThis\" and take advantage of it during\nfunction inlining.\n\nR\u003dmoedinger\nDELTA\u003d263  (223 added, 4 deleted, 36 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2320\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1188 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/16/11, 5:29 PM",
      "commitName": "cc4ec1a70e6fa02bda751582c3902b3c19f85bbb",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "6/7/11, 10:32 AM",
      "commitNameOld": "dd5a73fdb8740d4753a2c08efaa9eb56932943a0",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 9.29,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "actualSource": "static LinkedHashMap\u003cString, Node\u003e getFunctionCallParameterMap(Node fnNode, Node callNode, Supplier\u003cString\u003e safeNameIdSupplier) {\n    LinkedHashMap\u003cString, Node\u003e argMap \u003d Maps.newLinkedHashMap();\n    Node cArg \u003d callNode.getFirstChild().getNext();\n    if (cArg !\u003d null \u0026\u0026 NodeUtil.isFunctionObjectCall(callNode)) {\n        argMap.put(THIS_MARKER, cArg);\n        cArg \u003d cArg.getNext();\n    } else {\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n        argMap.put(THIS_MARKER, NodeUtil.newUndefinedNode(callNode));\n    }\n    for (Node fnArg : NodeUtil.getFunctionParameters(fnNode).children()) {\n        if (cArg !\u003d null) {\n            argMap.put(fnArg.getString(), cArg);\n            cArg \u003d cArg.getNext();\n        } else {\n            Node srcLocation \u003d callNode;\n            argMap.put(fnArg.getString(), NodeUtil.newUndefinedNode(srcLocation));\n        }\n    }\n    int anonArg \u003d 0;\n    while (cArg !\u003d null) {\n        String uniquePlaceholder \u003d getUniqueAnonymousParameterName(safeNameIdSupplier);\n        argMap.put(uniquePlaceholder, cArg);\n        cArg \u003d cArg.getNext();\n    }\n    return argMap;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java",
      "functionStartLine": 112,
      "functionName": "getFunctionCallParameterMap",
      "functionAnnotation": "",
      "functionDoc": "Get a mapping for function parameter names to call arguments.\n",
      "diff": "@@ -1,29 +1,27 @@\n static LinkedHashMap\u003cString, Node\u003e getFunctionCallParameterMap(Node fnNode, Node callNode, Supplier\u003cString\u003e safeNameIdSupplier) {\n     LinkedHashMap\u003cString, Node\u003e argMap \u003d Maps.newLinkedHashMap();\n     Node cArg \u003d callNode.getFirstChild().getNext();\n-    if (callNode.getFirstChild().getType() !\u003d Token.NAME) {\n-        if (NodeUtil.isFunctionObjectCall(callNode)) {\n-            Preconditions.checkNotNull(cArg);\n-            Preconditions.checkState(cArg.getType() \u003d\u003d Token.THIS);\n-            cArg \u003d cArg.getNext();\n-        } else {\n-            Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-        }\n+    if (cArg !\u003d null \u0026\u0026 NodeUtil.isFunctionObjectCall(callNode)) {\n+        argMap.put(THIS_MARKER, cArg);\n+        cArg \u003d cArg.getNext();\n+    } else {\n+        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n+        argMap.put(THIS_MARKER, NodeUtil.newUndefinedNode(callNode));\n     }\n     for (Node fnArg : NodeUtil.getFunctionParameters(fnNode).children()) {\n         if (cArg !\u003d null) {\n             argMap.put(fnArg.getString(), cArg);\n             cArg \u003d cArg.getNext();\n         } else {\n             Node srcLocation \u003d callNode;\n             argMap.put(fnArg.getString(), NodeUtil.newUndefinedNode(srcLocation));\n         }\n     }\n     int anonArg \u003d 0;\n     while (cArg !\u003d null) {\n         String uniquePlaceholder \u003d getUniqueAnonymousParameterName(safeNameIdSupplier);\n         argMap.put(uniquePlaceholder, cArg);\n         cArg \u003d cArg.getNext();\n     }\n     return argMap;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "dd5a73fdb8740d4753a2c08efaa9eb56932943a0": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nBreaks gmail\n\n*** Original change description ***\n\nWhen it is possible to make the ES5 Strict mode assumptions about a\nfunction\u0027s \"this\" it is easier to inline a function referencing \"this\".\nAdd \"CompilerOption.assumeStrictThis\" and take advantage of it during\nfunction inlining.\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2200\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1165 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/7/11, 10:32 AM",
      "commitName": "dd5a73fdb8740d4753a2c08efaa9eb56932943a0",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "6/7/11, 9:49 AM",
      "commitNameOld": "51e81d0fd794bee6d8765513f853a312f176dcd7",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "static LinkedHashMap\u003cString, Node\u003e getFunctionCallParameterMap(Node fnNode, Node callNode, Supplier\u003cString\u003e safeNameIdSupplier) {\n    LinkedHashMap\u003cString, Node\u003e argMap \u003d Maps.newLinkedHashMap();\n    Node cArg \u003d callNode.getFirstChild().getNext();\n    if (callNode.getFirstChild().getType() !\u003d Token.NAME) {\n        if (NodeUtil.isFunctionObjectCall(callNode)) {\n            Preconditions.checkNotNull(cArg);\n            Preconditions.checkState(cArg.getType() \u003d\u003d Token.THIS);\n            cArg \u003d cArg.getNext();\n        } else {\n            Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n        }\n    }\n    for (Node fnArg : NodeUtil.getFunctionParameters(fnNode).children()) {\n        if (cArg !\u003d null) {\n            argMap.put(fnArg.getString(), cArg);\n            cArg \u003d cArg.getNext();\n        } else {\n            Node srcLocation \u003d callNode;\n            argMap.put(fnArg.getString(), NodeUtil.newUndefinedNode(srcLocation));\n        }\n    }\n    int anonArg \u003d 0;\n    while (cArg !\u003d null) {\n        String uniquePlaceholder \u003d getUniqueAnonymousParameterName(safeNameIdSupplier);\n        argMap.put(uniquePlaceholder, cArg);\n        cArg \u003d cArg.getNext();\n    }\n    return argMap;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java",
      "functionStartLine": 81,
      "functionName": "getFunctionCallParameterMap",
      "functionAnnotation": "",
      "functionDoc": "Get a mapping for function parameter names to call arguments.\n",
      "diff": "@@ -1,27 +1,29 @@\n static LinkedHashMap\u003cString, Node\u003e getFunctionCallParameterMap(Node fnNode, Node callNode, Supplier\u003cString\u003e safeNameIdSupplier) {\n     LinkedHashMap\u003cString, Node\u003e argMap \u003d Maps.newLinkedHashMap();\n     Node cArg \u003d callNode.getFirstChild().getNext();\n-    if (cArg !\u003d null \u0026\u0026 NodeUtil.isFunctionObjectCall(callNode)) {\n-        argMap.put(THIS_MARKER, cArg);\n-        cArg \u003d cArg.getNext();\n-    } else {\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-        argMap.put(THIS_MARKER, NodeUtil.newUndefinedNode(callNode));\n+    if (callNode.getFirstChild().getType() !\u003d Token.NAME) {\n+        if (NodeUtil.isFunctionObjectCall(callNode)) {\n+            Preconditions.checkNotNull(cArg);\n+            Preconditions.checkState(cArg.getType() \u003d\u003d Token.THIS);\n+            cArg \u003d cArg.getNext();\n+        } else {\n+            Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n+        }\n     }\n     for (Node fnArg : NodeUtil.getFunctionParameters(fnNode).children()) {\n         if (cArg !\u003d null) {\n             argMap.put(fnArg.getString(), cArg);\n             cArg \u003d cArg.getNext();\n         } else {\n             Node srcLocation \u003d callNode;\n             argMap.put(fnArg.getString(), NodeUtil.newUndefinedNode(srcLocation));\n         }\n     }\n     int anonArg \u003d 0;\n     while (cArg !\u003d null) {\n         String uniquePlaceholder \u003d getUniqueAnonymousParameterName(safeNameIdSupplier);\n         argMap.put(uniquePlaceholder, cArg);\n         cArg \u003d cArg.getNext();\n     }\n     return argMap;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "51e81d0fd794bee6d8765513f853a312f176dcd7": {
      "type": "Ybodychange",
      "commitMessage": "\nWhen it is possible to make the ES5 Strict mode assumptions about a\nfunction\u0027s \"this\" it is easier to inline a function referencing \"this\".\nAdd \"CompilerOption.assumeStrictThis\" and take advantage of it during\nfunction inlining.\n\nR\u003dacleung\nDELTA\u003d243  (204 added, 4 deleted, 35 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2199\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1164 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/7/11, 9:49 AM",
      "commitName": "51e81d0fd794bee6d8765513f853a312f176dcd7",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "5/16/11, 8:14 AM",
      "commitNameOld": "b783533aac33c06fc34ed4c3f284aa8411ea0c54",
      "commitAuthorOld": "tylerg@google.com",
      "daysBetweenCommits": 22.07,
      "commitsBetweenForRepo": 62,
      "commitsBetweenForFile": 1,
      "actualSource": "static LinkedHashMap\u003cString, Node\u003e getFunctionCallParameterMap(Node fnNode, Node callNode, Supplier\u003cString\u003e safeNameIdSupplier) {\n    LinkedHashMap\u003cString, Node\u003e argMap \u003d Maps.newLinkedHashMap();\n    Node cArg \u003d callNode.getFirstChild().getNext();\n    if (cArg !\u003d null \u0026\u0026 NodeUtil.isFunctionObjectCall(callNode)) {\n        argMap.put(THIS_MARKER, cArg);\n        cArg \u003d cArg.getNext();\n    } else {\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n        argMap.put(THIS_MARKER, NodeUtil.newUndefinedNode(callNode));\n    }\n    for (Node fnArg : NodeUtil.getFunctionParameters(fnNode).children()) {\n        if (cArg !\u003d null) {\n            argMap.put(fnArg.getString(), cArg);\n            cArg \u003d cArg.getNext();\n        } else {\n            Node srcLocation \u003d callNode;\n            argMap.put(fnArg.getString(), NodeUtil.newUndefinedNode(srcLocation));\n        }\n    }\n    int anonArg \u003d 0;\n    while (cArg !\u003d null) {\n        String uniquePlaceholder \u003d getUniqueAnonymousParameterName(safeNameIdSupplier);\n        argMap.put(uniquePlaceholder, cArg);\n        cArg \u003d cArg.getNext();\n    }\n    return argMap;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java",
      "functionStartLine": 103,
      "functionName": "getFunctionCallParameterMap",
      "functionAnnotation": "",
      "functionDoc": "Get a mapping for function parameter names to call arguments.\n",
      "diff": "@@ -1,29 +1,27 @@\n static LinkedHashMap\u003cString, Node\u003e getFunctionCallParameterMap(Node fnNode, Node callNode, Supplier\u003cString\u003e safeNameIdSupplier) {\n     LinkedHashMap\u003cString, Node\u003e argMap \u003d Maps.newLinkedHashMap();\n     Node cArg \u003d callNode.getFirstChild().getNext();\n-    if (callNode.getFirstChild().getType() !\u003d Token.NAME) {\n-        if (NodeUtil.isFunctionObjectCall(callNode)) {\n-            Preconditions.checkNotNull(cArg);\n-            Preconditions.checkState(cArg.getType() \u003d\u003d Token.THIS);\n-            cArg \u003d cArg.getNext();\n-        } else {\n-            Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-        }\n+    if (cArg !\u003d null \u0026\u0026 NodeUtil.isFunctionObjectCall(callNode)) {\n+        argMap.put(THIS_MARKER, cArg);\n+        cArg \u003d cArg.getNext();\n+    } else {\n+        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n+        argMap.put(THIS_MARKER, NodeUtil.newUndefinedNode(callNode));\n     }\n     for (Node fnArg : NodeUtil.getFunctionParameters(fnNode).children()) {\n         if (cArg !\u003d null) {\n             argMap.put(fnArg.getString(), cArg);\n             cArg \u003d cArg.getNext();\n         } else {\n             Node srcLocation \u003d callNode;\n             argMap.put(fnArg.getString(), NodeUtil.newUndefinedNode(srcLocation));\n         }\n     }\n     int anonArg \u003d 0;\n     while (cArg !\u003d null) {\n         String uniquePlaceholder \u003d getUniqueAnonymousParameterName(safeNameIdSupplier);\n         argMap.put(uniquePlaceholder, cArg);\n         cArg \u003d cArg.getNext();\n     }\n     return argMap;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b783533aac33c06fc34ed4c3f284aa8411ea0c54": {
      "type": "Ybodychange",
      "commitMessage": "\nRename NodeUtil.getFunctionInfo to NodeUtil.getFunctionJSDocInfo\nRename NodeUtil.getFnParameters to NodeUtil.getFunctionParameters.\nNOTE: this is a pure Eclipse refactor:rename CL\n\nR\u003djohnlenz\nDELTA\u003d18  (1 added, 0 deleted, 17 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1913\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1101 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/16/11, 8:14 AM",
      "commitName": "b783533aac33c06fc34ed4c3f284aa8411ea0c54",
      "commitAuthor": "tylerg@google.com",
      "commitDateOld": "4/12/11, 12:15 PM",
      "commitNameOld": "f322be0e576d5e2114cb59c0a6537197997b9c59",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 33.83,
      "commitsBetweenForRepo": 98,
      "commitsBetweenForFile": 1,
      "actualSource": "static LinkedHashMap\u003cString, Node\u003e getFunctionCallParameterMap(Node fnNode, Node callNode, Supplier\u003cString\u003e safeNameIdSupplier) {\n    LinkedHashMap\u003cString, Node\u003e argMap \u003d Maps.newLinkedHashMap();\n    Node cArg \u003d callNode.getFirstChild().getNext();\n    if (callNode.getFirstChild().getType() !\u003d Token.NAME) {\n        if (NodeUtil.isFunctionObjectCall(callNode)) {\n            Preconditions.checkNotNull(cArg);\n            Preconditions.checkState(cArg.getType() \u003d\u003d Token.THIS);\n            cArg \u003d cArg.getNext();\n        } else {\n            Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n        }\n    }\n    for (Node fnArg : NodeUtil.getFunctionParameters(fnNode).children()) {\n        if (cArg !\u003d null) {\n            argMap.put(fnArg.getString(), cArg);\n            cArg \u003d cArg.getNext();\n        } else {\n            Node srcLocation \u003d callNode;\n            argMap.put(fnArg.getString(), NodeUtil.newUndefinedNode(srcLocation));\n        }\n    }\n    int anonArg \u003d 0;\n    while (cArg !\u003d null) {\n        String uniquePlaceholder \u003d getUniqueAnonymousParameterName(safeNameIdSupplier);\n        argMap.put(uniquePlaceholder, cArg);\n        cArg \u003d cArg.getNext();\n    }\n    return argMap;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java",
      "functionStartLine": 81,
      "functionName": "getFunctionCallParameterMap",
      "functionAnnotation": "",
      "functionDoc": "Get a mapping for function parameter names to call arguments.\n",
      "diff": "@@ -1,29 +1,29 @@\n static LinkedHashMap\u003cString, Node\u003e getFunctionCallParameterMap(Node fnNode, Node callNode, Supplier\u003cString\u003e safeNameIdSupplier) {\n     LinkedHashMap\u003cString, Node\u003e argMap \u003d Maps.newLinkedHashMap();\n     Node cArg \u003d callNode.getFirstChild().getNext();\n     if (callNode.getFirstChild().getType() !\u003d Token.NAME) {\n         if (NodeUtil.isFunctionObjectCall(callNode)) {\n             Preconditions.checkNotNull(cArg);\n             Preconditions.checkState(cArg.getType() \u003d\u003d Token.THIS);\n             cArg \u003d cArg.getNext();\n         } else {\n             Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n         }\n     }\n-    for (Node fnArg : NodeUtil.getFnParameters(fnNode).children()) {\n+    for (Node fnArg : NodeUtil.getFunctionParameters(fnNode).children()) {\n         if (cArg !\u003d null) {\n             argMap.put(fnArg.getString(), cArg);\n             cArg \u003d cArg.getNext();\n         } else {\n             Node srcLocation \u003d callNode;\n             argMap.put(fnArg.getString(), NodeUtil.newUndefinedNode(srcLocation));\n         }\n     }\n     int anonArg \u003d 0;\n     while (cArg !\u003d null) {\n         String uniquePlaceholder \u003d getUniqueAnonymousParameterName(safeNameIdSupplier);\n         argMap.put(uniquePlaceholder, cArg);\n         cArg \u003d cArg.getNext();\n     }\n     return argMap;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6e3eb4f7619179ba6c23db2af7549ef02f588c35": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/04/15 by john\n\n        Maintain source information in OverloadedMethodResolution.\n\n        R\u003dandrew\n        DELTA\u003d8  (5 added, 1 deleted, 2 changed)\n\nChange on 2010/04/15 by john\n\n        Maintain source information during function inlining.\n\n        R\u003dalan\n        DELTA\u003d104  (73 added, 2 deleted, 29 changed)\n\nChange on 2010/04/15 by john\n\n        Improve LineNumberCheck error message.\n\n        R\u003dnick\n        DELTA\u003d4  (3 added, 0 deleted, 1 changed)\n\nChange on 2010/04/15 by john\n\n        Maintain source information in smart name removal.\n        Enabled Normalize during tests, simplified VAR handling.\n\n        R\u003dantonio\n        DELTA\u003d71  (12 added, 48 deleted, 11 changed)\n\nChange on 2010/04/15 by john\n\n        Maintain source information in InlineGetters.\n\n        R\u003dalan\n        DELTA\u003d8  (7 added, 0 deleted, 1 changed)\n\nChange on 2010/04/15 by alan\n\n        Stops the post data from printing multiple times.\n\n        R\u003djohn\n        DELTA\u003d4  (1 added, 0 deleted, 3 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dhuwaud\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@188 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/16/10, 10:20 AM",
      "commitName": "6e3eb4f7619179ba6c23db2af7549ef02f588c35",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "3/11/10, 9:31 PM",
      "commitNameOld": "7bfdbd9164601af44d17edd51be829fde2cc51aa",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 35.49,
      "commitsBetweenForRepo": 51,
      "commitsBetweenForFile": 1,
      "actualSource": "static LinkedHashMap\u003cString, Node\u003e getFunctionCallParameterMap(Node fnNode, Node callNode, Supplier\u003cString\u003e safeNameIdSupplier) {\n    LinkedHashMap\u003cString, Node\u003e argMap \u003d Maps.newLinkedHashMap();\n    Node cArg \u003d callNode.getFirstChild().getNext();\n    if (callNode.getFirstChild().getType() !\u003d Token.NAME) {\n        if (NodeUtil.isFunctionObjectCall(callNode)) {\n            Preconditions.checkNotNull(cArg);\n            Preconditions.checkState(cArg.getType() \u003d\u003d Token.THIS);\n            cArg \u003d cArg.getNext();\n        } else {\n            Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n        }\n    }\n    for (Node fnArg : NodeUtil.getFnParameters(fnNode).children()) {\n        if (cArg !\u003d null) {\n            argMap.put(fnArg.getString(), cArg);\n            cArg \u003d cArg.getNext();\n        } else {\n            Node srcLocation \u003d callNode;\n            argMap.put(fnArg.getString(), NodeUtil.newUndefinedNode(srcLocation));\n        }\n    }\n    int anonArg \u003d 0;\n    while (cArg !\u003d null) {\n        String uniquePlaceholder \u003d getUniqueAnonymousParameterName(safeNameIdSupplier);\n        argMap.put(uniquePlaceholder, cArg);\n        cArg \u003d cArg.getNext();\n    }\n    return argMap;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java",
      "functionStartLine": 81,
      "functionName": "getFunctionCallParameterMap",
      "functionAnnotation": "",
      "functionDoc": "Get a mapping for function parameter names to call arguments.\n",
      "diff": "@@ -1,28 +1,29 @@\n static LinkedHashMap\u003cString, Node\u003e getFunctionCallParameterMap(Node fnNode, Node callNode, Supplier\u003cString\u003e safeNameIdSupplier) {\n     LinkedHashMap\u003cString, Node\u003e argMap \u003d Maps.newLinkedHashMap();\n     Node cArg \u003d callNode.getFirstChild().getNext();\n     if (callNode.getFirstChild().getType() !\u003d Token.NAME) {\n         if (NodeUtil.isFunctionObjectCall(callNode)) {\n             Preconditions.checkNotNull(cArg);\n             Preconditions.checkState(cArg.getType() \u003d\u003d Token.THIS);\n             cArg \u003d cArg.getNext();\n         } else {\n             Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n         }\n     }\n     for (Node fnArg : NodeUtil.getFnParameters(fnNode).children()) {\n         if (cArg !\u003d null) {\n             argMap.put(fnArg.getString(), cArg);\n             cArg \u003d cArg.getNext();\n         } else {\n-            argMap.put(fnArg.getString(), NodeUtil.newUndefinedNode());\n+            Node srcLocation \u003d callNode;\n+            argMap.put(fnArg.getString(), NodeUtil.newUndefinedNode(srcLocation));\n         }\n     }\n     int anonArg \u003d 0;\n     while (cArg !\u003d null) {\n         String uniquePlaceholder \u003d getUniqueAnonymousParameterName(safeNameIdSupplier);\n         argMap.put(uniquePlaceholder, cArg);\n         cArg \u003d cArg.getNext();\n     }\n     return argMap;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "14ddcfdc0b8d1cece3c79221b1870b84f055d419": {
      "type": "Ybodychange",
      "commitMessage": "Change the internal representation of constant variables.\n\nRun inline-variables before smart-name-removal.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@37 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/17/09, 4:20 PM",
      "commitName": "14ddcfdc0b8d1cece3c79221b1870b84f055d419",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/10/09, 11:16 AM",
      "commitNameOld": "78995bf9e88599055a8c4165d89c09dc92a44b30",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 37.21,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "actualSource": "static LinkedHashMap\u003cString, Node\u003e getFunctionCallParameterMap(Node fnNode, Node callNode, Supplier\u003cString\u003e safeNameIdSupplier) {\n    LinkedHashMap\u003cString, Node\u003e argMap \u003d Maps.newLinkedHashMap();\n    Node cArg \u003d callNode.getFirstChild().getNext();\n    if (callNode.getFirstChild().getType() !\u003d Token.NAME) {\n        if (NodeUtil.isFunctionObjectCall(callNode)) {\n            Preconditions.checkNotNull(cArg);\n            Preconditions.checkState(cArg.getType() \u003d\u003d Token.THIS);\n            cArg \u003d cArg.getNext();\n        } else {\n            Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n        }\n    }\n    for (Node fnArg : NodeUtil.getFnParameters(fnNode).children()) {\n        if (cArg !\u003d null) {\n            argMap.put(fnArg.getString(), cArg);\n            cArg \u003d cArg.getNext();\n        } else {\n            argMap.put(fnArg.getString(), NodeUtil.newUndefinedNode());\n        }\n    }\n    int anonArg \u003d 0;\n    while (cArg !\u003d null) {\n        String uniquePlaceholder \u003d getUniqueAnonymousParameterName(safeNameIdSupplier);\n        argMap.put(uniquePlaceholder, cArg);\n        cArg \u003d cArg.getNext();\n    }\n    return argMap;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java",
      "functionStartLine": 81,
      "functionName": "getFunctionCallParameterMap",
      "functionAnnotation": "",
      "functionDoc": "Get a mapping for function parameter names to call arguments.\n",
      "diff": "@@ -1,28 +1,28 @@\n static LinkedHashMap\u003cString, Node\u003e getFunctionCallParameterMap(Node fnNode, Node callNode, Supplier\u003cString\u003e safeNameIdSupplier) {\n     LinkedHashMap\u003cString, Node\u003e argMap \u003d Maps.newLinkedHashMap();\n     Node cArg \u003d callNode.getFirstChild().getNext();\n     if (callNode.getFirstChild().getType() !\u003d Token.NAME) {\n         if (NodeUtil.isFunctionObjectCall(callNode)) {\n             Preconditions.checkNotNull(cArg);\n             Preconditions.checkState(cArg.getType() \u003d\u003d Token.THIS);\n             cArg \u003d cArg.getNext();\n         } else {\n             Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n         }\n     }\n     for (Node fnArg : NodeUtil.getFnParameters(fnNode).children()) {\n         if (cArg !\u003d null) {\n             argMap.put(fnArg.getString(), cArg);\n             cArg \u003d cArg.getNext();\n         } else {\n-            argMap.put(fnArg.getString(), Node.newString(Token.NAME, \"undefined\"));\n+            argMap.put(fnArg.getString(), NodeUtil.newUndefinedNode());\n         }\n     }\n     int anonArg \u003d 0;\n     while (cArg !\u003d null) {\n         String uniquePlaceholder \u003d getUniqueAnonymousParameterName(safeNameIdSupplier);\n         argMap.put(uniquePlaceholder, cArg);\n         cArg \u003d cArg.getNext();\n     }\n     return argMap;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,28 @@\n+static LinkedHashMap\u003cString, Node\u003e getFunctionCallParameterMap(Node fnNode, Node callNode, Supplier\u003cString\u003e safeNameIdSupplier) {\n+    LinkedHashMap\u003cString, Node\u003e argMap \u003d Maps.newLinkedHashMap();\n+    Node cArg \u003d callNode.getFirstChild().getNext();\n+    if (callNode.getFirstChild().getType() !\u003d Token.NAME) {\n+        if (NodeUtil.isFunctionObjectCall(callNode)) {\n+            Preconditions.checkNotNull(cArg);\n+            Preconditions.checkState(cArg.getType() \u003d\u003d Token.THIS);\n+            cArg \u003d cArg.getNext();\n+        } else {\n+            Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n+        }\n+    }\n+    for (Node fnArg : NodeUtil.getFnParameters(fnNode).children()) {\n+        if (cArg !\u003d null) {\n+            argMap.put(fnArg.getString(), cArg);\n+            cArg \u003d cArg.getNext();\n+        } else {\n+            argMap.put(fnArg.getString(), Node.newString(Token.NAME, \"undefined\"));\n+        }\n+    }\n+    int anonArg \u003d 0;\n+    while (cArg !\u003d null) {\n+        String uniquePlaceholder \u003d getUniqueAnonymousParameterName(safeNameIdSupplier);\n+        argMap.put(uniquePlaceholder, cArg);\n+        cArg \u003d cArg.getNext();\n+    }\n+    return argMap;\n+}\n\\ No newline at end of file\n",
      "actualSource": "static LinkedHashMap\u003cString, Node\u003e getFunctionCallParameterMap(Node fnNode, Node callNode, Supplier\u003cString\u003e safeNameIdSupplier) {\n    LinkedHashMap\u003cString, Node\u003e argMap \u003d Maps.newLinkedHashMap();\n    Node cArg \u003d callNode.getFirstChild().getNext();\n    if (callNode.getFirstChild().getType() !\u003d Token.NAME) {\n        if (NodeUtil.isFunctionObjectCall(callNode)) {\n            Preconditions.checkNotNull(cArg);\n            Preconditions.checkState(cArg.getType() \u003d\u003d Token.THIS);\n            cArg \u003d cArg.getNext();\n        } else {\n            Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n        }\n    }\n    for (Node fnArg : NodeUtil.getFnParameters(fnNode).children()) {\n        if (cArg !\u003d null) {\n            argMap.put(fnArg.getString(), cArg);\n            cArg \u003d cArg.getNext();\n        } else {\n            argMap.put(fnArg.getString(), Node.newString(Token.NAME, \"undefined\"));\n        }\n    }\n    int anonArg \u003d 0;\n    while (cArg !\u003d null) {\n        String uniquePlaceholder \u003d getUniqueAnonymousParameterName(safeNameIdSupplier);\n        argMap.put(uniquePlaceholder, cArg);\n        cArg \u003d cArg.getNext();\n    }\n    return argMap;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java",
      "functionStartLine": 81,
      "functionName": "getFunctionCallParameterMap",
      "functionAnnotation": "",
      "functionDoc": "Get a mapping for function parameter names to call arguments.\n"
    }
  }
}