{
  "origin": "codeshovel",
  "repositoryName": "Closure-115b",
  "repositoryPath": "/tmp/Closure-115b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ExpressionDecomposer.java",
  "functionName": "canExposeExpression",
  "functionId": "canExposeExpression___subExpression-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/ExpressionDecomposer.java",
  "functionAnnotation": "",
  "functionDoc": "Determine whether a expression is movable, or can be be made movable be\ndecomposing the containing expression.\n\nAn subExpression is MOVABLE if it can be replaced with a temporary holding\nits results and moved to immediately before the root of the expression.\nThere are three conditions that must be met for this to occur:\n1) There must be a location to inject a statement for the expression.  For\nexample, this condition can not be met if the expression is a loop\ncondition or CASE condition.\n2) If the expression can be affect by side-effects, there can not be a\nside-effect between original location and the expression root.\n3) If the expression has side-effects, there can not be any other\nexpression that can be effected between the original location and the\nexpression root.\n\nAn expression is DECOMPOSABLE if it can be rewritten so that an\nsubExpression is MOVABLE.\n\nAn expression is decomposed by moving any other sub-expressions that\npreventing an subExpression from being MOVABLE.\n\n@return Whether This is a call that can be moved to an new point in the\nAST to allow it to be inlined.\n",
  "functionStartLine": 712,
  "functionEndLine": 718,
  "numCommitsSeen": 25,
  "timeTaken": 1428,
  "changeHistory": [
    "78995bf9e88599055a8c4165d89c09dc92a44b30",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "78995bf9e88599055a8c4165d89c09dc92a44b30": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "78995bf9e88599055a8c4165d89c09dc92a44b30": {
      "type": "Ybodychange",
      "commitMessage": "Fix synthesis of vars in DEFAULT mode.\nBetter variable inlining\nBetter function inlining\nAssorted bug fixes\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@6 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/10/09, 11:16 AM",
      "commitName": "78995bf9e88599055a8c4165d89c09dc92a44b30",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/3/09, 3:51 PM",
      "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 6.81,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "DecompositionType canExposeExpression(Node subExpression) {\n    Node expressionRoot \u003d findExpressionRoot(subExpression);\n    if (expressionRoot !\u003d null) {\n        return isSubexpressionMovable(expressionRoot, subExpression);\n    }\n    return DecompositionType.UNDECOMPOSABLE;\n}",
      "path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java",
      "functionStartLine": 610,
      "functionName": "canExposeExpression",
      "functionAnnotation": "",
      "functionDoc": "Determine whether a expression is movable, or can be be made movable be\ndecomposing the containing expression.\n\nAn subExpression is MOVABLE if it can be replaced with a temporary holding\nits results and moved to immediately before the root of the expression.\nThere are three conditions that must be met for this to occur:\n1) There must be a location to inject a statement for the expression.  For\nexample, this condition can not be met if the expression is a loop\ncondition or CASE condition.\n2) If the expression can be affect by side-effects, there can not be a\nside-effect between original location and the expression root.\n3) If the expression has side-effects, there can not be any other\nexpression that can be effected between the original location and the\nexpression root.\n\nAn expression is DECOMPOSABLE if it can be rewritten so that an\nsubExpression is MOVABLE.\n\nAn expression is decomposed by moving any other sub-expressions that\npreventing an subExpression from being MOVABLE.\n\n@return Whether This is a call that can be moved to an new point in the\nAST to allow it to be inlined.\n",
      "diff": "@@ -1,11 +1,7 @@\n DecompositionType canExposeExpression(Node subExpression) {\n     Node expressionRoot \u003d findExpressionRoot(subExpression);\n     if (expressionRoot !\u003d null) {\n-        if (isSubexpressionMovable(expressionRoot, subExpression)) {\n-            return DecompositionType.MOVABLE;\n-        } else {\n-            return DecompositionType.DECOMPOSABLE;\n-        }\n+        return isSubexpressionMovable(expressionRoot, subExpression);\n     }\n     return DecompositionType.UNDECOMPOSABLE;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,11 @@\n+DecompositionType canExposeExpression(Node subExpression) {\n+    Node expressionRoot \u003d findExpressionRoot(subExpression);\n+    if (expressionRoot !\u003d null) {\n+        if (isSubexpressionMovable(expressionRoot, subExpression)) {\n+            return DecompositionType.MOVABLE;\n+        } else {\n+            return DecompositionType.DECOMPOSABLE;\n+        }\n+    }\n+    return DecompositionType.UNDECOMPOSABLE;\n+}\n\\ No newline at end of file\n",
      "actualSource": "DecompositionType canExposeExpression(Node subExpression) {\n    Node expressionRoot \u003d findExpressionRoot(subExpression);\n    if (expressionRoot !\u003d null) {\n        if (isSubexpressionMovable(expressionRoot, subExpression)) {\n            return DecompositionType.MOVABLE;\n        } else {\n            return DecompositionType.DECOMPOSABLE;\n        }\n    }\n    return DecompositionType.UNDECOMPOSABLE;\n}",
      "path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java",
      "functionStartLine": 589,
      "functionName": "canExposeExpression",
      "functionAnnotation": "",
      "functionDoc": "Determine whether a expression is movable, or can be be made movable be\ndecomposing the containing expression.\n\nAn subExpression is MOVABLE if it can be replaced with a temporary holding\nits results and moved to immediately before the root of the expression.\nThere are three conditions that must be met for this to occur:\n1) There must be a location to inject a statement for the expression.  For\nexample, this condition can not be met if the expression is a loop\ncondition or CASE condition.\n2) If the expression can be affect by side-effects, there can not be a\nside-effect between original location and the expression root.\n3) If the expression has side-effects, there can not be any other\nexpression that can be effected between the original location and the\nexpression root.\n\nAn expression is DECOMPOSABLE if it can be rewritten so that an\nsubExpression is MOVABLE.\n\nAn expression is decomposed by moving any other sub-expressions that\npreventing an subExpression from being MOVABLE.\n\n@return Whether This is a call that can be moved to an new point in the\nAST to allow it to be inlined.\n"
    }
  }
}