{
  "origin": "codeshovel",
  "repositoryName": "Closure-115b",
  "repositoryPath": "/tmp/Closure-115b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FunctionInjector.java",
  "functionName": "inlineCostDelta",
  "functionId": "inlineCostDelta___fnNode-Node__namesToAlias-Set__String____mode-InliningMode",
  "sourceFilePath": "src/com/google/javascript/jscomp/FunctionInjector.java",
  "functionAnnotation": "",
  "functionDoc": "\n@return The difference between the function definition cost and\n    inline cost.\n",
  "functionStartLine": 887,
  "functionEndLine": 938,
  "numCommitsSeen": 36,
  "timeTaken": 2013,
  "changeHistory": [
    "f423b0e9d4b2c0f3f74b3850dd5a35fd89ebc8a5",
    "b783533aac33c06fc34ed4c3f284aa8411ea0c54",
    "b4801b28ceea8db0f63da7440d6769cb9b7cce8a",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "f423b0e9d4b2c0f3f74b3850dd5a35fd89ebc8a5": "Ybodychange",
    "b783533aac33c06fc34ed4c3f284aa8411ea0c54": "Ybodychange",
    "b4801b28ceea8db0f63da7440d6769cb9b7cce8a": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f423b0e9d4b2c0f3f74b3850dd5a35fd89ebc8a5": {
      "type": "Ybodychange",
      "commitMessage": "Remove lint warnings\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID\u003d44164469\n",
      "commitDate": "3/20/13, 9:48 AM",
      "commitName": "f423b0e9d4b2c0f3f74b3850dd5a35fd89ebc8a5",
      "commitAuthor": "Ben Lickly",
      "commitDateOld": "1/10/13, 4:31 PM",
      "commitNameOld": "9bf6d8db973a4691ad1551bdcbc559a86ba60532",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 68.68,
      "commitsBetweenForRepo": 149,
      "commitsBetweenForFile": 1,
      "actualSource": "private static int inlineCostDelta(Node fnNode, Set\u003cString\u003e namesToAlias, InliningMode mode) {\n    int paramCount \u003d NodeUtil.getFunctionParameters(fnNode).getChildCount();\n    int commaCount \u003d (paramCount \u003e 1) ? paramCount - 1 : 0;\n    int costDeltaFunctionOverhead \u003d 15 + commaCount + (paramCount * InlineCostEstimator.ESTIMATED_IDENTIFIER_COST);\n    Node block \u003d fnNode.getLastChild();\n    if (!block.hasChildren()) {\n        return -costDeltaFunctionOverhead;\n    }\n    if (mode \u003d\u003d InliningMode.DIRECT) {\n        return -(costDeltaFunctionOverhead + 7);\n    } else {\n        int aliasCount \u003d namesToAlias.size();\n        final int inlineBlockOverhead \u003d 4;\n        final int perReturnOverhead \u003d 2;\n        final int perReturnResultOverhead \u003d 3;\n        final int perAliasOverhead \u003d 3;\n        int returnCount \u003d NodeUtil.getNodeTypeReferenceCount(block, Token.RETURN, new NodeUtil.MatchShallowStatement());\n        int resultCount \u003d (returnCount \u003e 0) ? returnCount - 1 : 0;\n        int baseOverhead \u003d (returnCount \u003e 0) ? inlineBlockOverhead : 0;\n        int overhead \u003d baseOverhead + returnCount * perReturnOverhead + resultCount * perReturnResultOverhead + aliasCount * perAliasOverhead;\n        return (overhead - costDeltaFunctionOverhead);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/FunctionInjector.java",
      "functionStartLine": 873,
      "functionName": "inlineCostDelta",
      "functionAnnotation": "",
      "functionDoc": "\n@return The difference between the function definition cost and\n    inline cost.\n",
      "diff": "@@ -1,23 +1,23 @@\n private static int inlineCostDelta(Node fnNode, Set\u003cString\u003e namesToAlias, InliningMode mode) {\n     int paramCount \u003d NodeUtil.getFunctionParameters(fnNode).getChildCount();\n     int commaCount \u003d (paramCount \u003e 1) ? paramCount - 1 : 0;\n     int costDeltaFunctionOverhead \u003d 15 + commaCount + (paramCount * InlineCostEstimator.ESTIMATED_IDENTIFIER_COST);\n     Node block \u003d fnNode.getLastChild();\n     if (!block.hasChildren()) {\n         return -costDeltaFunctionOverhead;\n     }\n     if (mode \u003d\u003d InliningMode.DIRECT) {\n         return -(costDeltaFunctionOverhead + 7);\n     } else {\n         int aliasCount \u003d namesToAlias.size();\n-        final int INLINE_BLOCK_OVERHEAD \u003d 4;\n-        final int PER_RETURN_OVERHEAD \u003d 2;\n-        final int PER_RETURN_RESULT_OVERHEAD \u003d 3;\n-        final int PER_ALIAS_OVERHEAD \u003d 3;\n+        final int inlineBlockOverhead \u003d 4;\n+        final int perReturnOverhead \u003d 2;\n+        final int perReturnResultOverhead \u003d 3;\n+        final int perAliasOverhead \u003d 3;\n         int returnCount \u003d NodeUtil.getNodeTypeReferenceCount(block, Token.RETURN, new NodeUtil.MatchShallowStatement());\n         int resultCount \u003d (returnCount \u003e 0) ? returnCount - 1 : 0;\n-        int baseOverhead \u003d (returnCount \u003e 0) ? INLINE_BLOCK_OVERHEAD : 0;\n-        int overhead \u003d baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;\n+        int baseOverhead \u003d (returnCount \u003e 0) ? inlineBlockOverhead : 0;\n+        int overhead \u003d baseOverhead + returnCount * perReturnOverhead + resultCount * perReturnResultOverhead + aliasCount * perAliasOverhead;\n         return (overhead - costDeltaFunctionOverhead);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b783533aac33c06fc34ed4c3f284aa8411ea0c54": {
      "type": "Ybodychange",
      "commitMessage": "\nRename NodeUtil.getFunctionInfo to NodeUtil.getFunctionJSDocInfo\nRename NodeUtil.getFnParameters to NodeUtil.getFunctionParameters.\nNOTE: this is a pure Eclipse refactor:rename CL\n\nR\u003djohnlenz\nDELTA\u003d18  (1 added, 0 deleted, 17 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1913\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1101 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/16/11, 8:14 AM",
      "commitName": "b783533aac33c06fc34ed4c3f284aa8411ea0c54",
      "commitAuthor": "tylerg@google.com",
      "commitDateOld": "4/12/11, 12:15 PM",
      "commitNameOld": "f322be0e576d5e2114cb59c0a6537197997b9c59",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 33.83,
      "commitsBetweenForRepo": 98,
      "commitsBetweenForFile": 1,
      "actualSource": "private static int inlineCostDelta(Node fnNode, Set\u003cString\u003e namesToAlias, InliningMode mode) {\n    int paramCount \u003d NodeUtil.getFunctionParameters(fnNode).getChildCount();\n    int commaCount \u003d (paramCount \u003e 1) ? paramCount - 1 : 0;\n    int costDeltaFunctionOverhead \u003d 15 + commaCount + (paramCount * InlineCostEstimator.ESTIMATED_IDENTIFIER_COST);\n    Node block \u003d fnNode.getLastChild();\n    if (!block.hasChildren()) {\n        return -costDeltaFunctionOverhead;\n    }\n    if (mode \u003d\u003d InliningMode.DIRECT) {\n        return -(costDeltaFunctionOverhead + 7);\n    } else {\n        int aliasCount \u003d namesToAlias.size();\n        final int INLINE_BLOCK_OVERHEAD \u003d 4;\n        final int PER_RETURN_OVERHEAD \u003d 2;\n        final int PER_RETURN_RESULT_OVERHEAD \u003d 3;\n        final int PER_ALIAS_OVERHEAD \u003d 3;\n        int returnCount \u003d NodeUtil.getNodeTypeReferenceCount(block, Token.RETURN, new NodeUtil.MatchShallowStatement());\n        int resultCount \u003d (returnCount \u003e 0) ? returnCount - 1 : 0;\n        int baseOverhead \u003d (returnCount \u003e 0) ? INLINE_BLOCK_OVERHEAD : 0;\n        int overhead \u003d baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;\n        return (overhead - costDeltaFunctionOverhead);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/FunctionInjector.java",
      "functionStartLine": 808,
      "functionName": "inlineCostDelta",
      "functionAnnotation": "",
      "functionDoc": "\n@return The difference between the function definition cost and\n    inline cost.\n",
      "diff": "@@ -1,23 +1,23 @@\n private static int inlineCostDelta(Node fnNode, Set\u003cString\u003e namesToAlias, InliningMode mode) {\n-    int paramCount \u003d NodeUtil.getFnParameters(fnNode).getChildCount();\n+    int paramCount \u003d NodeUtil.getFunctionParameters(fnNode).getChildCount();\n     int commaCount \u003d (paramCount \u003e 1) ? paramCount - 1 : 0;\n     int costDeltaFunctionOverhead \u003d 15 + commaCount + (paramCount * InlineCostEstimator.ESTIMATED_IDENTIFIER_COST);\n     Node block \u003d fnNode.getLastChild();\n     if (!block.hasChildren()) {\n         return -costDeltaFunctionOverhead;\n     }\n     if (mode \u003d\u003d InliningMode.DIRECT) {\n         return -(costDeltaFunctionOverhead + 7);\n     } else {\n         int aliasCount \u003d namesToAlias.size();\n         final int INLINE_BLOCK_OVERHEAD \u003d 4;\n         final int PER_RETURN_OVERHEAD \u003d 2;\n         final int PER_RETURN_RESULT_OVERHEAD \u003d 3;\n         final int PER_ALIAS_OVERHEAD \u003d 3;\n         int returnCount \u003d NodeUtil.getNodeTypeReferenceCount(block, Token.RETURN, new NodeUtil.MatchShallowStatement());\n         int resultCount \u003d (returnCount \u003e 0) ? returnCount - 1 : 0;\n         int baseOverhead \u003d (returnCount \u003e 0) ? INLINE_BLOCK_OVERHEAD : 0;\n         int overhead \u003d baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;\n         return (overhead - costDeltaFunctionOverhead);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b4801b28ceea8db0f63da7440d6769cb9b7cce8a": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/05/28 by johnlenz\n\n        Inline functions with inner functions into global scope if they don\u0027t\n        declare any names.\n\n        R\u003dacleung\n        DELTA\u003d329  (244 added, 27 deleted, 58 changed)\n\nChange on 2010/05/28 by dcc\n\n        First pass on refactoring FoldConstants into separate peephole optimizations. This changelist adds the notion of an AbstractPeepholeOptimization and adds a PeepholeOptimizationsPass that runs them. In this go around the minimization aspects of FoldConstants have been factored out into PeepholeMinimize. A future change will factor out the other components of FoldConstants into their own PeepholeOptimizations. DefaultPassConfig has also been updated to run the new PeepholeOptimizationPass.\n\n        This change does not move the minimization-related unit tests from FoldConstantsTest to PeepholeMinimizeTest -- a future, separate, change will do so. Hopefully this will make it easier to review.\n\n        R\u003dacleung\n        DELTA\u003d1966  (1271 added, 675 deleted, 20 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d13010\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@235 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/29/10, 1:07 PM",
      "commitName": "b4801b28ceea8db0f63da7440d6769cb9b7cce8a",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/16/10, 10:20 AM",
      "commitNameOld": "6e3eb4f7619179ba6c23db2af7549ef02f588c35",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 43.12,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "actualSource": "private static int inlineCostDelta(Node fnNode, Set\u003cString\u003e namesToAlias, InliningMode mode) {\n    int paramCount \u003d NodeUtil.getFnParameters(fnNode).getChildCount();\n    int commaCount \u003d (paramCount \u003e 1) ? paramCount - 1 : 0;\n    int costDeltaFunctionOverhead \u003d 15 + commaCount + (paramCount * InlineCostEstimator.ESTIMATED_IDENTIFIER_COST);\n    Node block \u003d fnNode.getLastChild();\n    if (!block.hasChildren()) {\n        return -costDeltaFunctionOverhead;\n    }\n    if (mode \u003d\u003d InliningMode.DIRECT) {\n        return -(costDeltaFunctionOverhead + 7);\n    } else {\n        int aliasCount \u003d namesToAlias.size();\n        final int INLINE_BLOCK_OVERHEAD \u003d 4;\n        final int PER_RETURN_OVERHEAD \u003d 2;\n        final int PER_RETURN_RESULT_OVERHEAD \u003d 3;\n        final int PER_ALIAS_OVERHEAD \u003d 3;\n        int returnCount \u003d NodeUtil.getNodeTypeReferenceCount(block, Token.RETURN, new NodeUtil.MatchShallowStatement());\n        int resultCount \u003d (returnCount \u003e 0) ? returnCount - 1 : 0;\n        int baseOverhead \u003d (returnCount \u003e 0) ? INLINE_BLOCK_OVERHEAD : 0;\n        int overhead \u003d baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;\n        return (overhead - costDeltaFunctionOverhead);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/FunctionInjector.java",
      "functionStartLine": 818,
      "functionName": "inlineCostDelta",
      "functionAnnotation": "",
      "functionDoc": "\n@return The difference between the function definition cost and\n    inline cost.\n",
      "diff": "@@ -1,23 +1,23 @@\n private static int inlineCostDelta(Node fnNode, Set\u003cString\u003e namesToAlias, InliningMode mode) {\n     int paramCount \u003d NodeUtil.getFnParameters(fnNode).getChildCount();\n     int commaCount \u003d (paramCount \u003e 1) ? paramCount - 1 : 0;\n     int costDeltaFunctionOverhead \u003d 15 + commaCount + (paramCount * InlineCostEstimator.ESTIMATED_IDENTIFIER_COST);\n     Node block \u003d fnNode.getLastChild();\n     if (!block.hasChildren()) {\n         return -costDeltaFunctionOverhead;\n     }\n     if (mode \u003d\u003d InliningMode.DIRECT) {\n         return -(costDeltaFunctionOverhead + 7);\n     } else {\n         int aliasCount \u003d namesToAlias.size();\n         final int INLINE_BLOCK_OVERHEAD \u003d 4;\n         final int PER_RETURN_OVERHEAD \u003d 2;\n         final int PER_RETURN_RESULT_OVERHEAD \u003d 3;\n         final int PER_ALIAS_OVERHEAD \u003d 3;\n-        int returnCount \u003d NodeUtil.getNodeTypeReferenceCount(block, Token.RETURN);\n+        int returnCount \u003d NodeUtil.getNodeTypeReferenceCount(block, Token.RETURN, new NodeUtil.MatchShallowStatement());\n         int resultCount \u003d (returnCount \u003e 0) ? returnCount - 1 : 0;\n         int baseOverhead \u003d (returnCount \u003e 0) ? INLINE_BLOCK_OVERHEAD : 0;\n         int overhead \u003d baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;\n         return (overhead - costDeltaFunctionOverhead);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,23 @@\n+private static int inlineCostDelta(Node fnNode, Set\u003cString\u003e namesToAlias, InliningMode mode) {\n+    int paramCount \u003d NodeUtil.getFnParameters(fnNode).getChildCount();\n+    int commaCount \u003d (paramCount \u003e 1) ? paramCount - 1 : 0;\n+    int costDeltaFunctionOverhead \u003d 15 + commaCount + (paramCount * InlineCostEstimator.ESTIMATED_IDENTIFIER_COST);\n+    Node block \u003d fnNode.getLastChild();\n+    if (!block.hasChildren()) {\n+        return -costDeltaFunctionOverhead;\n+    }\n+    if (mode \u003d\u003d InliningMode.DIRECT) {\n+        return -(costDeltaFunctionOverhead + 7);\n+    } else {\n+        int aliasCount \u003d namesToAlias.size();\n+        final int INLINE_BLOCK_OVERHEAD \u003d 4;\n+        final int PER_RETURN_OVERHEAD \u003d 2;\n+        final int PER_RETURN_RESULT_OVERHEAD \u003d 3;\n+        final int PER_ALIAS_OVERHEAD \u003d 3;\n+        int returnCount \u003d NodeUtil.getNodeTypeReferenceCount(block, Token.RETURN);\n+        int resultCount \u003d (returnCount \u003e 0) ? returnCount - 1 : 0;\n+        int baseOverhead \u003d (returnCount \u003e 0) ? INLINE_BLOCK_OVERHEAD : 0;\n+        int overhead \u003d baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;\n+        return (overhead - costDeltaFunctionOverhead);\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private static int inlineCostDelta(Node fnNode, Set\u003cString\u003e namesToAlias, InliningMode mode) {\n    int paramCount \u003d NodeUtil.getFnParameters(fnNode).getChildCount();\n    int commaCount \u003d (paramCount \u003e 1) ? paramCount - 1 : 0;\n    int costDeltaFunctionOverhead \u003d 15 + commaCount + (paramCount * InlineCostEstimator.ESTIMATED_IDENTIFIER_COST);\n    Node block \u003d fnNode.getLastChild();\n    if (!block.hasChildren()) {\n        return -costDeltaFunctionOverhead;\n    }\n    if (mode \u003d\u003d InliningMode.DIRECT) {\n        return -(costDeltaFunctionOverhead + 7);\n    } else {\n        int aliasCount \u003d namesToAlias.size();\n        final int INLINE_BLOCK_OVERHEAD \u003d 4;\n        final int PER_RETURN_OVERHEAD \u003d 2;\n        final int PER_RETURN_RESULT_OVERHEAD \u003d 3;\n        final int PER_ALIAS_OVERHEAD \u003d 3;\n        int returnCount \u003d NodeUtil.getNodeTypeReferenceCount(block, Token.RETURN);\n        int resultCount \u003d (returnCount \u003e 0) ? returnCount - 1 : 0;\n        int baseOverhead \u003d (returnCount \u003e 0) ? INLINE_BLOCK_OVERHEAD : 0;\n        int overhead \u003d baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;\n        return (overhead - costDeltaFunctionOverhead);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/FunctionInjector.java",
      "functionStartLine": 808,
      "functionName": "inlineCostDelta",
      "functionAnnotation": "",
      "functionDoc": "\n@return The difference between the function definition cost and\n    inline cost.\n"
    }
  }
}