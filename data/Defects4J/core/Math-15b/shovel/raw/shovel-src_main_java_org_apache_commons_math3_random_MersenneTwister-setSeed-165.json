{
  "origin": "codeshovel",
  "repositoryName": "Math-15b",
  "repositoryPath": "/tmp/Math-15b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MersenneTwister.java",
  "functionName": "setSeed",
  "functionId": "setSeed___seed-int[]",
  "sourceFilePath": "src/main/java/org/apache/commons/math3/random/MersenneTwister.java",
  "functionAnnotation": "@Override",
  "functionDoc": "Reinitialize the generator as if just built with the given int array seed.\n\u003cp\u003eThe state of the generator is exactly the same as a new\ngenerator built with the same seed.\u003c/p\u003e\n\n@param seed the initial seed (32 bits integers array), if null\nthe seed of the generator will be the current system time plus the\nsystem identity hash code of this instance\n",
  "functionStartLine": 165,
  "functionEndLine": 207,
  "numCommitsSeen": 14,
  "timeTaken": 11952,
  "changeHistory": [
    "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd",
    "b39e2d0fe3da5429c555ea1423ff41dc6a12d61a",
    "1e75292c0bd314860a543a1d7a7154e056ed107c",
    "80b1e90b42a34856b61cec628fcea6633d1000cd",
    "3081ee1490074bb3ecf276137c6dc8836da8775e",
    "d6a438e931412713e99624cf9ed74470f1040184",
    "2283b0914121a6806607c96f505da2e1266a820d"
  ],
  "changeHistoryShort": {
    "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd": "Ymovefromfile",
    "b39e2d0fe3da5429c555ea1423ff41dc6a12d61a": "Ybodychange",
    "1e75292c0bd314860a543a1d7a7154e056ed107c": "Ymultichange(Ybodychange,Ydocchange)",
    "80b1e90b42a34856b61cec628fcea6633d1000cd": "Ybodychange",
    "3081ee1490074bb3ecf276137c6dc8836da8775e": "Yannotationchange",
    "d6a438e931412713e99624cf9ed74470f1040184": "Yfilerename",
    "2283b0914121a6806607c96f505da2e1266a820d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd": {
      "type": "Ymovefromfile",
      "commitMessage": "MATH-444\nBase package name change: \"o.a.c.math\" -\u003e \"o.a.c.math3\"\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1244107 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/14/12, 8:17 AM",
      "commitName": "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd",
      "commitAuthor": "Gilles Sadowski",
      "commitDateOld": "2/14/12, 6:34 AM",
      "commitNameOld": "53257329dd394be1333b38bae787bf0cf19dc900",
      "commitAuthorOld": "Gilles Sadowski",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void setSeed(int[] seed) {\n    if (seed \u003d\u003d null) {\n        setSeed(System.currentTimeMillis() + System.identityHashCode(this));\n        return;\n    }\n    setSeed(19650218);\n    int i \u003d 1;\n    int j \u003d 0;\n    for (int k \u003d FastMath.max(N, seed.length); k !\u003d 0; k--) {\n        long l0 \u003d (mt[i] \u0026 0x7fffffffl) | ((mt[i] \u003c 0) ? 0x80000000l : 0x0l);\n        long l1 \u003d (mt[i - 1] \u0026 0x7fffffffl) | ((mt[i - 1] \u003c 0) ? 0x80000000l : 0x0l);\n        long l \u003d (l0 ^ ((l1 ^ (l1 \u003e\u003e 30)) * 1664525l)) + seed[j] + j;\n        mt[i] \u003d (int) (l \u0026 0xffffffffl);\n        i++;\n        j++;\n        if (i \u003e\u003d N) {\n            mt[0] \u003d mt[N - 1];\n            i \u003d 1;\n        }\n        if (j \u003e\u003d seed.length) {\n            j \u003d 0;\n        }\n    }\n    for (int k \u003d N - 1; k !\u003d 0; k--) {\n        long l0 \u003d (mt[i] \u0026 0x7fffffffl) | ((mt[i] \u003c 0) ? 0x80000000l : 0x0l);\n        long l1 \u003d (mt[i - 1] \u0026 0x7fffffffl) | ((mt[i - 1] \u003c 0) ? 0x80000000l : 0x0l);\n        long l \u003d (l0 ^ ((l1 ^ (l1 \u003e\u003e 30)) * 1566083941l)) - i;\n        mt[i] \u003d (int) (l \u0026 0xffffffffL);\n        i++;\n        if (i \u003e\u003d N) {\n            mt[0] \u003d mt[N - 1];\n            i \u003d 1;\n        }\n    }\n    mt[0] \u003d 0x80000000;\n    clear();\n}",
      "path": "src/main/java/org/apache/commons/math3/random/MersenneTwister.java",
      "functionStartLine": 165,
      "functionName": "setSeed",
      "functionAnnotation": "@Override",
      "functionDoc": "Reinitialize the generator as if just built with the given int array seed.\n\u003cp\u003eThe state of the generator is exactly the same as a new\ngenerator built with the same seed.\u003c/p\u003e\n\n@param seed the initial seed (32 bits integers array), if null\nthe seed of the generator will be the current system time plus the\nsystem identity hash code of this instance\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/main/java/org/apache/commons/math/random/MersenneTwister.java",
        "newPath": "src/main/java/org/apache/commons/math3/random/MersenneTwister.java",
        "oldMethodName": "setSeed",
        "newMethodName": "setSeed"
      }
    },
    "b39e2d0fe3da5429c555ea1423ff41dc6a12d61a": {
      "type": "Ybodychange",
      "commitMessage": "Modified setSeed methods in Bitstream generators (MersenneTwister and Well\ngenerators) to clear the cache of normal deviates used by nextGaussian.\n\nJIRA: MATH-723\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1213081 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/11/11, 1:33 PM",
      "commitName": "b39e2d0fe3da5429c555ea1423ff41dc6a12d61a",
      "commitAuthor": "Phil Steitz",
      "commitDateOld": "11/4/11, 11:48 PM",
      "commitNameOld": "1e75292c0bd314860a543a1d7a7154e056ed107c",
      "commitAuthorOld": "Phil Steitz",
      "daysBetweenCommits": 36.61,
      "commitsBetweenForRepo": 119,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void setSeed(int[] seed) {\n    if (seed \u003d\u003d null) {\n        setSeed(System.currentTimeMillis() + System.identityHashCode(this));\n        return;\n    }\n    setSeed(19650218);\n    int i \u003d 1;\n    int j \u003d 0;\n    for (int k \u003d FastMath.max(N, seed.length); k !\u003d 0; k--) {\n        long l0 \u003d (mt[i] \u0026 0x7fffffffl) | ((mt[i] \u003c 0) ? 0x80000000l : 0x0l);\n        long l1 \u003d (mt[i - 1] \u0026 0x7fffffffl) | ((mt[i - 1] \u003c 0) ? 0x80000000l : 0x0l);\n        long l \u003d (l0 ^ ((l1 ^ (l1 \u003e\u003e 30)) * 1664525l)) + seed[j] + j;\n        mt[i] \u003d (int) (l \u0026 0xffffffffl);\n        i++;\n        j++;\n        if (i \u003e\u003d N) {\n            mt[0] \u003d mt[N - 1];\n            i \u003d 1;\n        }\n        if (j \u003e\u003d seed.length) {\n            j \u003d 0;\n        }\n    }\n    for (int k \u003d N - 1; k !\u003d 0; k--) {\n        long l0 \u003d (mt[i] \u0026 0x7fffffffl) | ((mt[i] \u003c 0) ? 0x80000000l : 0x0l);\n        long l1 \u003d (mt[i - 1] \u0026 0x7fffffffl) | ((mt[i - 1] \u003c 0) ? 0x80000000l : 0x0l);\n        long l \u003d (l0 ^ ((l1 ^ (l1 \u003e\u003e 30)) * 1566083941l)) - i;\n        mt[i] \u003d (int) (l \u0026 0xffffffffL);\n        i++;\n        if (i \u003e\u003d N) {\n            mt[0] \u003d mt[N - 1];\n            i \u003d 1;\n        }\n    }\n    mt[0] \u003d 0x80000000;\n    clear();\n}",
      "path": "src/main/java/org/apache/commons/math/random/MersenneTwister.java",
      "functionStartLine": 165,
      "functionName": "setSeed",
      "functionAnnotation": "@Override",
      "functionDoc": "Reinitialize the generator as if just built with the given int array seed.\n\u003cp\u003eThe state of the generator is exactly the same as a new\ngenerator built with the same seed.\u003c/p\u003e\n\n@param seed the initial seed (32 bits integers array), if null\nthe seed of the generator will be the current system time plus the\nsystem identity hash code of this instance\n",
      "diff": "@@ -1,37 +1,38 @@\n @Override\n public void setSeed(int[] seed) {\n     if (seed \u003d\u003d null) {\n         setSeed(System.currentTimeMillis() + System.identityHashCode(this));\n         return;\n     }\n     setSeed(19650218);\n     int i \u003d 1;\n     int j \u003d 0;\n     for (int k \u003d FastMath.max(N, seed.length); k !\u003d 0; k--) {\n         long l0 \u003d (mt[i] \u0026 0x7fffffffl) | ((mt[i] \u003c 0) ? 0x80000000l : 0x0l);\n         long l1 \u003d (mt[i - 1] \u0026 0x7fffffffl) | ((mt[i - 1] \u003c 0) ? 0x80000000l : 0x0l);\n         long l \u003d (l0 ^ ((l1 ^ (l1 \u003e\u003e 30)) * 1664525l)) + seed[j] + j;\n         mt[i] \u003d (int) (l \u0026 0xffffffffl);\n         i++;\n         j++;\n         if (i \u003e\u003d N) {\n             mt[0] \u003d mt[N - 1];\n             i \u003d 1;\n         }\n         if (j \u003e\u003d seed.length) {\n             j \u003d 0;\n         }\n     }\n     for (int k \u003d N - 1; k !\u003d 0; k--) {\n         long l0 \u003d (mt[i] \u0026 0x7fffffffl) | ((mt[i] \u003c 0) ? 0x80000000l : 0x0l);\n         long l1 \u003d (mt[i - 1] \u0026 0x7fffffffl) | ((mt[i - 1] \u003c 0) ? 0x80000000l : 0x0l);\n         long l \u003d (l0 ^ ((l1 ^ (l1 \u003e\u003e 30)) * 1566083941l)) - i;\n         mt[i] \u003d (int) (l \u0026 0xffffffffL);\n         i++;\n         if (i \u003e\u003d N) {\n             mt[0] \u003d mt[N - 1];\n             i \u003d 1;\n         }\n     }\n     mt[0] \u003d 0x80000000;\n+    clear();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1e75292c0bd314860a543a1d7a7154e056ed107c": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Changed default seeding for MersenneTwister, WELL generators to add system identity hash code.  JIRA: MATH-701.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1197896 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/4/11, 11:48 PM",
      "commitName": "1e75292c0bd314860a543a1d7a7154e056ed107c",
      "commitAuthor": "Phil Steitz",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Changed default seeding for MersenneTwister, WELL generators to add system identity hash code.  JIRA: MATH-701.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1197896 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/4/11, 11:48 PM",
          "commitName": "1e75292c0bd314860a543a1d7a7154e056ed107c",
          "commitAuthor": "Phil Steitz",
          "commitDateOld": "9/9/11, 9:43 PM",
          "commitNameOld": "e9fdfdc124a7ebee6b875ea225fef556f085326f",
          "commitAuthorOld": "Greg Sterijevski",
          "daysBetweenCommits": 56.09,
          "commitsBetweenForRepo": 206,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void setSeed(int[] seed) {\n    if (seed \u003d\u003d null) {\n        setSeed(System.currentTimeMillis() + System.identityHashCode(this));\n        return;\n    }\n    setSeed(19650218);\n    int i \u003d 1;\n    int j \u003d 0;\n    for (int k \u003d FastMath.max(N, seed.length); k !\u003d 0; k--) {\n        long l0 \u003d (mt[i] \u0026 0x7fffffffl) | ((mt[i] \u003c 0) ? 0x80000000l : 0x0l);\n        long l1 \u003d (mt[i - 1] \u0026 0x7fffffffl) | ((mt[i - 1] \u003c 0) ? 0x80000000l : 0x0l);\n        long l \u003d (l0 ^ ((l1 ^ (l1 \u003e\u003e 30)) * 1664525l)) + seed[j] + j;\n        mt[i] \u003d (int) (l \u0026 0xffffffffl);\n        i++;\n        j++;\n        if (i \u003e\u003d N) {\n            mt[0] \u003d mt[N - 1];\n            i \u003d 1;\n        }\n        if (j \u003e\u003d seed.length) {\n            j \u003d 0;\n        }\n    }\n    for (int k \u003d N - 1; k !\u003d 0; k--) {\n        long l0 \u003d (mt[i] \u0026 0x7fffffffl) | ((mt[i] \u003c 0) ? 0x80000000l : 0x0l);\n        long l1 \u003d (mt[i - 1] \u0026 0x7fffffffl) | ((mt[i - 1] \u003c 0) ? 0x80000000l : 0x0l);\n        long l \u003d (l0 ^ ((l1 ^ (l1 \u003e\u003e 30)) * 1566083941l)) - i;\n        mt[i] \u003d (int) (l \u0026 0xffffffffL);\n        i++;\n        if (i \u003e\u003d N) {\n            mt[0] \u003d mt[N - 1];\n            i \u003d 1;\n        }\n    }\n    mt[0] \u003d 0x80000000;\n}",
          "path": "src/main/java/org/apache/commons/math/random/MersenneTwister.java",
          "functionStartLine": 163,
          "functionName": "setSeed",
          "functionAnnotation": "@Override",
          "functionDoc": "Reinitialize the generator as if just built with the given int array seed.\n\u003cp\u003eThe state of the generator is exactly the same as a new\ngenerator built with the same seed.\u003c/p\u003e\n\n@param seed the initial seed (32 bits integers array), if null\nthe seed of the generator will be the current system time plus the\nsystem identity hash code of this instance\n",
          "diff": "@@ -1,37 +1,37 @@\n @Override\n public void setSeed(int[] seed) {\n     if (seed \u003d\u003d null) {\n-        setSeed(System.currentTimeMillis());\n+        setSeed(System.currentTimeMillis() + System.identityHashCode(this));\n         return;\n     }\n     setSeed(19650218);\n     int i \u003d 1;\n     int j \u003d 0;\n     for (int k \u003d FastMath.max(N, seed.length); k !\u003d 0; k--) {\n         long l0 \u003d (mt[i] \u0026 0x7fffffffl) | ((mt[i] \u003c 0) ? 0x80000000l : 0x0l);\n         long l1 \u003d (mt[i - 1] \u0026 0x7fffffffl) | ((mt[i - 1] \u003c 0) ? 0x80000000l : 0x0l);\n         long l \u003d (l0 ^ ((l1 ^ (l1 \u003e\u003e 30)) * 1664525l)) + seed[j] + j;\n         mt[i] \u003d (int) (l \u0026 0xffffffffl);\n         i++;\n         j++;\n         if (i \u003e\u003d N) {\n             mt[0] \u003d mt[N - 1];\n             i \u003d 1;\n         }\n         if (j \u003e\u003d seed.length) {\n             j \u003d 0;\n         }\n     }\n     for (int k \u003d N - 1; k !\u003d 0; k--) {\n         long l0 \u003d (mt[i] \u0026 0x7fffffffl) | ((mt[i] \u003c 0) ? 0x80000000l : 0x0l);\n         long l1 \u003d (mt[i - 1] \u0026 0x7fffffffl) | ((mt[i - 1] \u003c 0) ? 0x80000000l : 0x0l);\n         long l \u003d (l0 ^ ((l1 ^ (l1 \u003e\u003e 30)) * 1566083941l)) - i;\n         mt[i] \u003d (int) (l \u0026 0xffffffffL);\n         i++;\n         if (i \u003e\u003d N) {\n             mt[0] \u003d mt[N - 1];\n             i \u003d 1;\n         }\n     }\n     mt[0] \u003d 0x80000000;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Changed default seeding for MersenneTwister, WELL generators to add system identity hash code.  JIRA: MATH-701.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1197896 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/4/11, 11:48 PM",
          "commitName": "1e75292c0bd314860a543a1d7a7154e056ed107c",
          "commitAuthor": "Phil Steitz",
          "commitDateOld": "9/9/11, 9:43 PM",
          "commitNameOld": "e9fdfdc124a7ebee6b875ea225fef556f085326f",
          "commitAuthorOld": "Greg Sterijevski",
          "daysBetweenCommits": 56.09,
          "commitsBetweenForRepo": 206,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void setSeed(int[] seed) {\n    if (seed \u003d\u003d null) {\n        setSeed(System.currentTimeMillis() + System.identityHashCode(this));\n        return;\n    }\n    setSeed(19650218);\n    int i \u003d 1;\n    int j \u003d 0;\n    for (int k \u003d FastMath.max(N, seed.length); k !\u003d 0; k--) {\n        long l0 \u003d (mt[i] \u0026 0x7fffffffl) | ((mt[i] \u003c 0) ? 0x80000000l : 0x0l);\n        long l1 \u003d (mt[i - 1] \u0026 0x7fffffffl) | ((mt[i - 1] \u003c 0) ? 0x80000000l : 0x0l);\n        long l \u003d (l0 ^ ((l1 ^ (l1 \u003e\u003e 30)) * 1664525l)) + seed[j] + j;\n        mt[i] \u003d (int) (l \u0026 0xffffffffl);\n        i++;\n        j++;\n        if (i \u003e\u003d N) {\n            mt[0] \u003d mt[N - 1];\n            i \u003d 1;\n        }\n        if (j \u003e\u003d seed.length) {\n            j \u003d 0;\n        }\n    }\n    for (int k \u003d N - 1; k !\u003d 0; k--) {\n        long l0 \u003d (mt[i] \u0026 0x7fffffffl) | ((mt[i] \u003c 0) ? 0x80000000l : 0x0l);\n        long l1 \u003d (mt[i - 1] \u0026 0x7fffffffl) | ((mt[i - 1] \u003c 0) ? 0x80000000l : 0x0l);\n        long l \u003d (l0 ^ ((l1 ^ (l1 \u003e\u003e 30)) * 1566083941l)) - i;\n        mt[i] \u003d (int) (l \u0026 0xffffffffL);\n        i++;\n        if (i \u003e\u003d N) {\n            mt[0] \u003d mt[N - 1];\n            i \u003d 1;\n        }\n    }\n    mt[0] \u003d 0x80000000;\n}",
          "path": "src/main/java/org/apache/commons/math/random/MersenneTwister.java",
          "functionStartLine": 163,
          "functionName": "setSeed",
          "functionAnnotation": "@Override",
          "functionDoc": "Reinitialize the generator as if just built with the given int array seed.\n\u003cp\u003eThe state of the generator is exactly the same as a new\ngenerator built with the same seed.\u003c/p\u003e\n\n@param seed the initial seed (32 bits integers array), if null\nthe seed of the generator will be the current system time plus the\nsystem identity hash code of this instance\n",
          "diff": "@@ -1,37 +1,37 @@\n @Override\n public void setSeed(int[] seed) {\n     if (seed \u003d\u003d null) {\n-        setSeed(System.currentTimeMillis());\n+        setSeed(System.currentTimeMillis() + System.identityHashCode(this));\n         return;\n     }\n     setSeed(19650218);\n     int i \u003d 1;\n     int j \u003d 0;\n     for (int k \u003d FastMath.max(N, seed.length); k !\u003d 0; k--) {\n         long l0 \u003d (mt[i] \u0026 0x7fffffffl) | ((mt[i] \u003c 0) ? 0x80000000l : 0x0l);\n         long l1 \u003d (mt[i - 1] \u0026 0x7fffffffl) | ((mt[i - 1] \u003c 0) ? 0x80000000l : 0x0l);\n         long l \u003d (l0 ^ ((l1 ^ (l1 \u003e\u003e 30)) * 1664525l)) + seed[j] + j;\n         mt[i] \u003d (int) (l \u0026 0xffffffffl);\n         i++;\n         j++;\n         if (i \u003e\u003d N) {\n             mt[0] \u003d mt[N - 1];\n             i \u003d 1;\n         }\n         if (j \u003e\u003d seed.length) {\n             j \u003d 0;\n         }\n     }\n     for (int k \u003d N - 1; k !\u003d 0; k--) {\n         long l0 \u003d (mt[i] \u0026 0x7fffffffl) | ((mt[i] \u003c 0) ? 0x80000000l : 0x0l);\n         long l1 \u003d (mt[i - 1] \u0026 0x7fffffffl) | ((mt[i - 1] \u003c 0) ? 0x80000000l : 0x0l);\n         long l \u003d (l0 ^ ((l1 ^ (l1 \u003e\u003e 30)) * 1566083941l)) - i;\n         mt[i] \u003d (int) (l \u0026 0xffffffffL);\n         i++;\n         if (i \u003e\u003d N) {\n             mt[0] \u003d mt[N - 1];\n             i \u003d 1;\n         }\n     }\n     mt[0] \u003d 0x80000000;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Reinitialize the generator as if just built with the given int array seed.\n\u003cp\u003eThe state of the generator is exactly the same as a new\ngenerator built with the same seed.\u003c/p\u003e\n\n@param seed the initial seed (32 bits integers array), if null\nthe seed of the generator will be related to the current time\n",
            "newValue": "Reinitialize the generator as if just built with the given int array seed.\n\u003cp\u003eThe state of the generator is exactly the same as a new\ngenerator built with the same seed.\u003c/p\u003e\n\n@param seed the initial seed (32 bits integers array), if null\nthe seed of the generator will be the current system time plus the\nsystem identity hash code of this instance\n"
          }
        }
      ]
    },
    "80b1e90b42a34856b61cec628fcea6633d1000cd": {
      "type": "Ybodychange",
      "commitMessage": "added FastMath and used it everywhere in replacement of java.util.Math\nthe unit tests have not been added yet (waiting for dfp library addition)\nJIRA: MATH-375\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@990658 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/29/10, 3:04 PM",
      "commitName": "80b1e90b42a34856b61cec628fcea6633d1000cd",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "1/22/10, 10:27 AM",
      "commitNameOld": "3081ee1490074bb3ecf276137c6dc8836da8775e",
      "commitAuthorOld": "Sebastian Bazley",
      "daysBetweenCommits": 219.15,
      "commitsBetweenForRepo": 240,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void setSeed(int[] seed) {\n    if (seed \u003d\u003d null) {\n        setSeed(System.currentTimeMillis());\n        return;\n    }\n    setSeed(19650218);\n    int i \u003d 1;\n    int j \u003d 0;\n    for (int k \u003d FastMath.max(N, seed.length); k !\u003d 0; k--) {\n        long l0 \u003d (mt[i] \u0026 0x7fffffffl) | ((mt[i] \u003c 0) ? 0x80000000l : 0x0l);\n        long l1 \u003d (mt[i - 1] \u0026 0x7fffffffl) | ((mt[i - 1] \u003c 0) ? 0x80000000l : 0x0l);\n        long l \u003d (l0 ^ ((l1 ^ (l1 \u003e\u003e 30)) * 1664525l)) + seed[j] + j;\n        mt[i] \u003d (int) (l \u0026 0xffffffffl);\n        i++;\n        j++;\n        if (i \u003e\u003d N) {\n            mt[0] \u003d mt[N - 1];\n            i \u003d 1;\n        }\n        if (j \u003e\u003d seed.length) {\n            j \u003d 0;\n        }\n    }\n    for (int k \u003d N - 1; k !\u003d 0; k--) {\n        long l0 \u003d (mt[i] \u0026 0x7fffffffl) | ((mt[i] \u003c 0) ? 0x80000000l : 0x0l);\n        long l1 \u003d (mt[i - 1] \u0026 0x7fffffffl) | ((mt[i - 1] \u003c 0) ? 0x80000000l : 0x0l);\n        long l \u003d (l0 ^ ((l1 ^ (l1 \u003e\u003e 30)) * 1566083941l)) - i;\n        mt[i] \u003d (int) (l \u0026 0xffffffffL);\n        i++;\n        if (i \u003e\u003d N) {\n            mt[0] \u003d mt[N - 1];\n            i \u003d 1;\n        }\n    }\n    mt[0] \u003d 0x80000000;\n}",
      "path": "src/main/java/org/apache/commons/math/random/MersenneTwister.java",
      "functionStartLine": 161,
      "functionName": "setSeed",
      "functionAnnotation": "@Override",
      "functionDoc": "Reinitialize the generator as if just built with the given int array seed.\n\u003cp\u003eThe state of the generator is exactly the same as a new\ngenerator built with the same seed.\u003c/p\u003e\n\n@param seed the initial seed (32 bits integers array), if null\nthe seed of the generator will be related to the current time\n",
      "diff": "@@ -1,37 +1,37 @@\n @Override\n public void setSeed(int[] seed) {\n     if (seed \u003d\u003d null) {\n         setSeed(System.currentTimeMillis());\n         return;\n     }\n     setSeed(19650218);\n     int i \u003d 1;\n     int j \u003d 0;\n-    for (int k \u003d Math.max(N, seed.length); k !\u003d 0; k--) {\n+    for (int k \u003d FastMath.max(N, seed.length); k !\u003d 0; k--) {\n         long l0 \u003d (mt[i] \u0026 0x7fffffffl) | ((mt[i] \u003c 0) ? 0x80000000l : 0x0l);\n         long l1 \u003d (mt[i - 1] \u0026 0x7fffffffl) | ((mt[i - 1] \u003c 0) ? 0x80000000l : 0x0l);\n         long l \u003d (l0 ^ ((l1 ^ (l1 \u003e\u003e 30)) * 1664525l)) + seed[j] + j;\n         mt[i] \u003d (int) (l \u0026 0xffffffffl);\n         i++;\n         j++;\n         if (i \u003e\u003d N) {\n             mt[0] \u003d mt[N - 1];\n             i \u003d 1;\n         }\n         if (j \u003e\u003d seed.length) {\n             j \u003d 0;\n         }\n     }\n     for (int k \u003d N - 1; k !\u003d 0; k--) {\n         long l0 \u003d (mt[i] \u0026 0x7fffffffl) | ((mt[i] \u003c 0) ? 0x80000000l : 0x0l);\n         long l1 \u003d (mt[i - 1] \u0026 0x7fffffffl) | ((mt[i - 1] \u003c 0) ? 0x80000000l : 0x0l);\n         long l \u003d (l0 ^ ((l1 ^ (l1 \u003e\u003e 30)) * 1566083941l)) - i;\n         mt[i] \u003d (int) (l \u0026 0xffffffffL);\n         i++;\n         if (i \u003e\u003d N) {\n             mt[0] \u003d mt[N - 1];\n             i \u003d 1;\n         }\n     }\n     mt[0] \u003d 0x80000000;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3081ee1490074bb3ecf276137c6dc8836da8775e": {
      "type": "Yannotationchange",
      "commitMessage": "Fix missing @Override and @Deprecated annotations\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@902203 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/22/10, 10:27 AM",
      "commitName": "3081ee1490074bb3ecf276137c6dc8836da8775e",
      "commitAuthor": "Sebastian Bazley",
      "commitDateOld": "9/6/09, 9:27 AM",
      "commitNameOld": "b631eb68a8aa659e0760de672edfbfb9f9ac246d",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 138.08,
      "commitsBetweenForRepo": 93,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void setSeed(int[] seed) {\n    if (seed \u003d\u003d null) {\n        setSeed(System.currentTimeMillis());\n        return;\n    }\n    setSeed(19650218);\n    int i \u003d 1;\n    int j \u003d 0;\n    for (int k \u003d Math.max(N, seed.length); k !\u003d 0; k--) {\n        long l0 \u003d (mt[i] \u0026 0x7fffffffl) | ((mt[i] \u003c 0) ? 0x80000000l : 0x0l);\n        long l1 \u003d (mt[i - 1] \u0026 0x7fffffffl) | ((mt[i - 1] \u003c 0) ? 0x80000000l : 0x0l);\n        long l \u003d (l0 ^ ((l1 ^ (l1 \u003e\u003e 30)) * 1664525l)) + seed[j] + j;\n        mt[i] \u003d (int) (l \u0026 0xffffffffl);\n        i++;\n        j++;\n        if (i \u003e\u003d N) {\n            mt[0] \u003d mt[N - 1];\n            i \u003d 1;\n        }\n        if (j \u003e\u003d seed.length) {\n            j \u003d 0;\n        }\n    }\n    for (int k \u003d N - 1; k !\u003d 0; k--) {\n        long l0 \u003d (mt[i] \u0026 0x7fffffffl) | ((mt[i] \u003c 0) ? 0x80000000l : 0x0l);\n        long l1 \u003d (mt[i - 1] \u0026 0x7fffffffl) | ((mt[i - 1] \u003c 0) ? 0x80000000l : 0x0l);\n        long l \u003d (l0 ^ ((l1 ^ (l1 \u003e\u003e 30)) * 1566083941l)) - i;\n        mt[i] \u003d (int) (l \u0026 0xffffffffL);\n        i++;\n        if (i \u003e\u003d N) {\n            mt[0] \u003d mt[N - 1];\n            i \u003d 1;\n        }\n    }\n    mt[0] \u003d 0x80000000;\n}",
      "path": "src/main/java/org/apache/commons/math/random/MersenneTwister.java",
      "functionStartLine": 159,
      "functionName": "setSeed",
      "functionAnnotation": "@Override",
      "functionDoc": "Reinitialize the generator as if just built with the given int array seed.\n\u003cp\u003eThe state of the generator is exactly the same as a new\ngenerator built with the same seed.\u003c/p\u003e\n\n@param seed the initial seed (32 bits integers array), if null\nthe seed of the generator will be related to the current time\n",
      "diff": "@@ -1,36 +1,37 @@\n+@Override\n public void setSeed(int[] seed) {\n     if (seed \u003d\u003d null) {\n         setSeed(System.currentTimeMillis());\n         return;\n     }\n     setSeed(19650218);\n     int i \u003d 1;\n     int j \u003d 0;\n     for (int k \u003d Math.max(N, seed.length); k !\u003d 0; k--) {\n         long l0 \u003d (mt[i] \u0026 0x7fffffffl) | ((mt[i] \u003c 0) ? 0x80000000l : 0x0l);\n         long l1 \u003d (mt[i - 1] \u0026 0x7fffffffl) | ((mt[i - 1] \u003c 0) ? 0x80000000l : 0x0l);\n         long l \u003d (l0 ^ ((l1 ^ (l1 \u003e\u003e 30)) * 1664525l)) + seed[j] + j;\n         mt[i] \u003d (int) (l \u0026 0xffffffffl);\n         i++;\n         j++;\n         if (i \u003e\u003d N) {\n             mt[0] \u003d mt[N - 1];\n             i \u003d 1;\n         }\n         if (j \u003e\u003d seed.length) {\n             j \u003d 0;\n         }\n     }\n     for (int k \u003d N - 1; k !\u003d 0; k--) {\n         long l0 \u003d (mt[i] \u0026 0x7fffffffl) | ((mt[i] \u003c 0) ? 0x80000000l : 0x0l);\n         long l1 \u003d (mt[i - 1] \u0026 0x7fffffffl) | ((mt[i - 1] \u003c 0) ? 0x80000000l : 0x0l);\n         long l \u003d (l0 ^ ((l1 ^ (l1 \u003e\u003e 30)) * 1566083941l)) - i;\n         mt[i] \u003d (int) (l \u0026 0xffffffffL);\n         i++;\n         if (i \u003e\u003d N) {\n             mt[0] \u003d mt[N - 1];\n             i \u003d 1;\n         }\n     }\n     mt[0] \u003d 0x80000000;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "",
        "newValue": "@Override"
      }
    },
    "d6a438e931412713e99624cf9ed74470f1040184": {
      "type": "Yfilerename",
      "commitMessage": "moved main java directory for compliance with maven standard directory layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@799870 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/1/09, 7:30 AM",
      "commitName": "d6a438e931412713e99624cf9ed74470f1040184",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "8/1/09, 7:23 AM",
      "commitNameOld": "2ad5ef61630be627f46ae1c266cf796f044bd4a8",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public void setSeed(int[] seed) {\n    if (seed \u003d\u003d null) {\n        setSeed(System.currentTimeMillis());\n        return;\n    }\n    setSeed(19650218);\n    int i \u003d 1;\n    int j \u003d 0;\n    for (int k \u003d Math.max(N, seed.length); k !\u003d 0; k--) {\n        long l0 \u003d (mt[i] \u0026 0x7fffffffl) | ((mt[i] \u003c 0) ? 0x80000000l : 0x0l);\n        long l1 \u003d (mt[i - 1] \u0026 0x7fffffffl) | ((mt[i - 1] \u003c 0) ? 0x80000000l : 0x0l);\n        long l \u003d (l0 ^ ((l1 ^ (l1 \u003e\u003e 30)) * 1664525l)) + seed[j] + j;\n        mt[i] \u003d (int) (l \u0026 0xffffffffl);\n        i++;\n        j++;\n        if (i \u003e\u003d N) {\n            mt[0] \u003d mt[N - 1];\n            i \u003d 1;\n        }\n        if (j \u003e\u003d seed.length) {\n            j \u003d 0;\n        }\n    }\n    for (int k \u003d N - 1; k !\u003d 0; k--) {\n        long l0 \u003d (mt[i] \u0026 0x7fffffffl) | ((mt[i] \u003c 0) ? 0x80000000l : 0x0l);\n        long l1 \u003d (mt[i - 1] \u0026 0x7fffffffl) | ((mt[i - 1] \u003c 0) ? 0x80000000l : 0x0l);\n        long l \u003d (l0 ^ ((l1 ^ (l1 \u003e\u003e 30)) * 1566083941l)) - i;\n        mt[i] \u003d (int) (l \u0026 0xffffffffL);\n        i++;\n        if (i \u003e\u003d N) {\n            mt[0] \u003d mt[N - 1];\n            i \u003d 1;\n        }\n    }\n    mt[0] \u003d 0x80000000;\n}",
      "path": "src/main/java/org/apache/commons/math/random/MersenneTwister.java",
      "functionStartLine": 157,
      "functionName": "setSeed",
      "functionAnnotation": "",
      "functionDoc": "Reinitialize the generator as if just built with the given int array seed.\n\u003cp\u003eThe state of the generator is exactly the same as a new\ngenerator built with the same seed.\u003c/p\u003e\n\n@param seed the initial seed (32 bits integers array), if null\nthe seed of the generator will be related to the current time\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/math/random/MersenneTwister.java",
        "newPath": "src/main/java/org/apache/commons/math/random/MersenneTwister.java"
      }
    },
    "2283b0914121a6806607c96f505da2e1266a820d": {
      "type": "Yintroduced",
      "commitMessage": "added an implementation of the Mersenne twister pseudo random number generator\nthe implementation comes from Mantissa and was a translation of the 2002 version\nin C by the algorithm authors, which was published under a BSD license\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@796546 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/21/09, 2:38 PM",
      "commitName": "2283b0914121a6806607c96f505da2e1266a820d",
      "commitAuthor": "Luc Maisonobe",
      "diff": "@@ -0,0 +1,36 @@\n+public void setSeed(int[] seed) {\n+    if (seed \u003d\u003d null) {\n+        setSeed(System.currentTimeMillis());\n+        return;\n+    }\n+    setSeed(19650218);\n+    int i \u003d 1;\n+    int j \u003d 0;\n+    for (int k \u003d Math.max(N, seed.length); k !\u003d 0; k--) {\n+        long l0 \u003d (mt[i] \u0026 0x7fffffffl) | ((mt[i] \u003c 0) ? 0x80000000l : 0x0l);\n+        long l1 \u003d (mt[i - 1] \u0026 0x7fffffffl) | ((mt[i - 1] \u003c 0) ? 0x80000000l : 0x0l);\n+        long l \u003d (l0 ^ ((l1 ^ (l1 \u003e\u003e 30)) * 1664525l)) + seed[j] + j;\n+        mt[i] \u003d (int) (l \u0026 0xffffffffl);\n+        i++;\n+        j++;\n+        if (i \u003e\u003d N) {\n+            mt[0] \u003d mt[N - 1];\n+            i \u003d 1;\n+        }\n+        if (j \u003e\u003d seed.length) {\n+            j \u003d 0;\n+        }\n+    }\n+    for (int k \u003d N - 1; k !\u003d 0; k--) {\n+        long l0 \u003d (mt[i] \u0026 0x7fffffffl) | ((mt[i] \u003c 0) ? 0x80000000l : 0x0l);\n+        long l1 \u003d (mt[i - 1] \u0026 0x7fffffffl) | ((mt[i - 1] \u003c 0) ? 0x80000000l : 0x0l);\n+        long l \u003d (l0 ^ ((l1 ^ (l1 \u003e\u003e 30)) * 1566083941l)) - i;\n+        mt[i] \u003d (int) (l \u0026 0xffffffffL);\n+        i++;\n+        if (i \u003e\u003d N) {\n+            mt[0] \u003d mt[N - 1];\n+            i \u003d 1;\n+        }\n+    }\n+    mt[0] \u003d 0x80000000;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public void setSeed(int[] seed) {\n    if (seed \u003d\u003d null) {\n        setSeed(System.currentTimeMillis());\n        return;\n    }\n    setSeed(19650218);\n    int i \u003d 1;\n    int j \u003d 0;\n    for (int k \u003d Math.max(N, seed.length); k !\u003d 0; k--) {\n        long l0 \u003d (mt[i] \u0026 0x7fffffffl) | ((mt[i] \u003c 0) ? 0x80000000l : 0x0l);\n        long l1 \u003d (mt[i - 1] \u0026 0x7fffffffl) | ((mt[i - 1] \u003c 0) ? 0x80000000l : 0x0l);\n        long l \u003d (l0 ^ ((l1 ^ (l1 \u003e\u003e 30)) * 1664525l)) + seed[j] + j;\n        mt[i] \u003d (int) (l \u0026 0xffffffffl);\n        i++;\n        j++;\n        if (i \u003e\u003d N) {\n            mt[0] \u003d mt[N - 1];\n            i \u003d 1;\n        }\n        if (j \u003e\u003d seed.length) {\n            j \u003d 0;\n        }\n    }\n    for (int k \u003d N - 1; k !\u003d 0; k--) {\n        long l0 \u003d (mt[i] \u0026 0x7fffffffl) | ((mt[i] \u003c 0) ? 0x80000000l : 0x0l);\n        long l1 \u003d (mt[i - 1] \u0026 0x7fffffffl) | ((mt[i - 1] \u003c 0) ? 0x80000000l : 0x0l);\n        long l \u003d (l0 ^ ((l1 ^ (l1 \u003e\u003e 30)) * 1566083941l)) - i;\n        mt[i] \u003d (int) (l \u0026 0xffffffffL);\n        i++;\n        if (i \u003e\u003d N) {\n            mt[0] \u003d mt[N - 1];\n            i \u003d 1;\n        }\n    }\n    mt[0] \u003d 0x80000000;\n}",
      "path": "src/java/org/apache/commons/math/random/MersenneTwister.java",
      "functionStartLine": 162,
      "functionName": "setSeed",
      "functionAnnotation": "",
      "functionDoc": "Reinitialize the generator as if just built with the given int array seed.\n\u003cp\u003eThe state of the generator is exactly the same as a new\ngenerator built with the same seed.\u003c/p\u003e\n\n@param seed the initial seed (32 bits integers array), if null\nthe seed of the generator will be related to the current time\n"
    }
  }
}