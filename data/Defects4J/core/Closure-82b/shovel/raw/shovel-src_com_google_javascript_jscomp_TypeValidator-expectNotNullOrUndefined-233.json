{
  "origin": "codeshovel",
  "repositoryName": "Closure-82b",
  "repositoryPath": "/tmp/Closure-82b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TypeValidator.java",
  "functionName": "expectNotNullOrUndefined",
  "functionId": "expectNotNullOrUndefined___t-NodeTraversal__n-Node__type-JSType__msg-String__expectedType-JSType",
  "sourceFilePath": "src/com/google/javascript/jscomp/TypeValidator.java",
  "functionAnnotation": "",
  "functionDoc": "Expect the type to be anything but the null or void type. If the\nexpectation is not met, issue a warning at the provided node\u0027s\nsource code position. Note that a union type that includes the\nvoid type and at least one other type meets the expectation.\n\n@return Whether the expectation was met.\n",
  "functionStartLine": 233,
  "functionEndLine": 259,
  "numCommitsSeen": 22,
  "timeTaken": 1224,
  "changeHistory": [
    "043a352c2e85815a90a1926d112902d924bab6c1",
    "11bd742011d67590031dba6e9d1f7186393b38a0",
    "6dbca87c463d8a1e229a0d92d5cdf92247fdefde",
    "9d9957fdd23ff13d187d4b8832d580bf8622baf6",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "043a352c2e85815a90a1926d112902d924bab6c1": "Ybodychange",
    "11bd742011d67590031dba6e9d1f7186393b38a0": "Ybodychange",
    "6dbca87c463d8a1e229a0d92d5cdf92247fdefde": "Ybodychange",
    "9d9957fdd23ff13d187d4b8832d580bf8622baf6": "Ymultichange(Yrename,Ybodychange,Ydocchange)",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "043a352c2e85815a90a1926d112902d924bab6c1": {
      "type": "Ybodychange",
      "commitMessage": "\nWhen we can\u0027t find a forward-declared type,\nthat type should resolve to an empty type.\nThis ensures that if someone tries to pass a param or return\nvalue to it, they get a type warning.\nTry #3\n!!!\n\nR\u003djohnlenz\nDELTA\u003d534  (451 added, 37 deleted, 46 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d362\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@731 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/26/11, 8:30 AM",
      "commitName": "043a352c2e85815a90a1926d112902d924bab6c1",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "1/18/11, 5:02 PM",
      "commitNameOld": "11bd742011d67590031dba6e9d1f7186393b38a0",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 7.64,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "actualSource": "boolean expectNotNullOrUndefined(NodeTraversal t, Node n, JSType type, String msg, JSType expectedType) {\n    if (!type.isNoType() \u0026\u0026 !type.isUnknownType() \u0026\u0026 type.isSubtype(nullOrUndefined) \u0026\u0026 !containsForwardDeclaredUnresolvedName(type)) {\n        if (n.getType() \u003d\u003d Token.GETPROP \u0026\u0026 !t.inGlobalScope() \u0026\u0026 type.isNullType()) {\n            return true;\n        }\n        mismatch(t, n, msg, type, expectedType);\n        return false;\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/jscomp/TypeValidator.java",
      "functionStartLine": 233,
      "functionName": "expectNotNullOrUndefined",
      "functionAnnotation": "",
      "functionDoc": "Expect the type to be anything but the null or void type. If the\nexpectation is not met, issue a warning at the provided node\u0027s\nsource code position. Note that a union type that includes the\nvoid type and at least one other type meets the expectation.\n\n@return Whether the expectation was met.\n",
      "diff": "@@ -1,10 +1,10 @@\n boolean expectNotNullOrUndefined(NodeTraversal t, Node n, JSType type, String msg, JSType expectedType) {\n-    if (!type.isNoType() \u0026\u0026 !type.isUnknownType() \u0026\u0026 type.isSubtype(nullOrUndefined)) {\n+    if (!type.isNoType() \u0026\u0026 !type.isUnknownType() \u0026\u0026 type.isSubtype(nullOrUndefined) \u0026\u0026 !containsForwardDeclaredUnresolvedName(type)) {\n         if (n.getType() \u003d\u003d Token.GETPROP \u0026\u0026 !t.inGlobalScope() \u0026\u0026 type.isNullType()) {\n             return true;\n         }\n         mismatch(t, n, msg, type, expectedType);\n         return false;\n     }\n     return true;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "11bd742011d67590031dba6e9d1f7186393b38a0": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nbreaks contacts\n\n*** Original change description ***\n\nWhen we can\u0027t find a forward-declared type,\nthat type should resolve to an empty type.\nThis ensures that if someone tries to pass a param or return\nvalue to it, they get a type warning.\n\nDELTA\u003d461  (37 added, 385 deleted, 39 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d302\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@703 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/18/11, 5:02 PM",
      "commitName": "11bd742011d67590031dba6e9d1f7186393b38a0",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "1/18/11, 3:28 PM",
      "commitNameOld": "6dbca87c463d8a1e229a0d92d5cdf92247fdefde",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "boolean expectNotNullOrUndefined(NodeTraversal t, Node n, JSType type, String msg, JSType expectedType) {\n    if (!type.isNoType() \u0026\u0026 !type.isUnknownType() \u0026\u0026 type.isSubtype(nullOrUndefined)) {\n        if (n.getType() \u003d\u003d Token.GETPROP \u0026\u0026 !t.inGlobalScope() \u0026\u0026 type.isNullType()) {\n            return true;\n        }\n        mismatch(t, n, msg, type, expectedType);\n        return false;\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/jscomp/TypeValidator.java",
      "functionStartLine": 232,
      "functionName": "expectNotNullOrUndefined",
      "functionAnnotation": "",
      "functionDoc": "Expect the type to be anything but the null or void type. If the\nexpectation is not met, issue a warning at the provided node\u0027s\nsource code position. Note that a union type that includes the\nvoid type and at least one other type meets the expectation.\n\n@return Whether the expectation was met.\n",
      "diff": "@@ -1,10 +1,10 @@\n boolean expectNotNullOrUndefined(NodeTraversal t, Node n, JSType type, String msg, JSType expectedType) {\n-    if (!type.isNoType() \u0026\u0026 !type.isUnknownType() \u0026\u0026 type.isSubtype(nullOrUndefined) \u0026\u0026 !containsForwardDeclaredUnresolvedName(type)) {\n+    if (!type.isNoType() \u0026\u0026 !type.isUnknownType() \u0026\u0026 type.isSubtype(nullOrUndefined)) {\n         if (n.getType() \u003d\u003d Token.GETPROP \u0026\u0026 !t.inGlobalScope() \u0026\u0026 type.isNullType()) {\n             return true;\n         }\n         mismatch(t, n, msg, type, expectedType);\n         return false;\n     }\n     return true;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6dbca87c463d8a1e229a0d92d5cdf92247fdefde": {
      "type": "Ybodychange",
      "commitMessage": "\nWhen we can\u0027t find a forward-declared type,\nthat type should resolve to an empty type.\nThis ensures that if someone tries to pass a param or return\nvalue to it, they get a type warning.\n\nR\u003djohnlenz\nDELTA\u003d461  (385 added, 37 deleted, 39 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d301\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@702 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/18/11, 3:28 PM",
      "commitName": "6dbca87c463d8a1e229a0d92d5cdf92247fdefde",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "1/10/11, 12:54 PM",
      "commitNameOld": "9d9957fdd23ff13d187d4b8832d580bf8622baf6",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 8.11,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "actualSource": "boolean expectNotNullOrUndefined(NodeTraversal t, Node n, JSType type, String msg, JSType expectedType) {\n    if (!type.isNoType() \u0026\u0026 !type.isUnknownType() \u0026\u0026 type.isSubtype(nullOrUndefined) \u0026\u0026 !containsForwardDeclaredUnresolvedName(type)) {\n        if (n.getType() \u003d\u003d Token.GETPROP \u0026\u0026 !t.inGlobalScope() \u0026\u0026 type.isNullType()) {\n            return true;\n        }\n        mismatch(t, n, msg, type, expectedType);\n        return false;\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/jscomp/TypeValidator.java",
      "functionStartLine": 233,
      "functionName": "expectNotNullOrUndefined",
      "functionAnnotation": "",
      "functionDoc": "Expect the type to be anything but the null or void type. If the\nexpectation is not met, issue a warning at the provided node\u0027s\nsource code position. Note that a union type that includes the\nvoid type and at least one other type meets the expectation.\n\n@return Whether the expectation was met.\n",
      "diff": "@@ -1,10 +1,10 @@\n boolean expectNotNullOrUndefined(NodeTraversal t, Node n, JSType type, String msg, JSType expectedType) {\n-    if (!type.isNoType() \u0026\u0026 !type.isUnknownType() \u0026\u0026 type.isSubtype(nullOrUndefined)) {\n+    if (!type.isNoType() \u0026\u0026 !type.isUnknownType() \u0026\u0026 type.isSubtype(nullOrUndefined) \u0026\u0026 !containsForwardDeclaredUnresolvedName(type)) {\n         if (n.getType() \u003d\u003d Token.GETPROP \u0026\u0026 !t.inGlobalScope() \u0026\u0026 type.isNullType()) {\n             return true;\n         }\n         mismatch(t, n, msg, type, expectedType);\n         return false;\n     }\n     return true;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9d9957fdd23ff13d187d4b8832d580bf8622baf6": {
      "type": "Ymultichange(Yrename,Ybodychange,Ydocchange)",
      "commitMessage": "\nFlag null pointer exceptions that are provable at compile time.\n\nR\u003djohnlenz\nDELTA\u003d48  (38 added, 0 deleted, 10 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d236\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@682 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/10/11, 12:54 PM",
      "commitName": "9d9957fdd23ff13d187d4b8832d580bf8622baf6",
      "commitAuthor": "nicksantos@google.com",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "\nFlag null pointer exceptions that are provable at compile time.\n\nR\u003djohnlenz\nDELTA\u003d48  (38 added, 0 deleted, 10 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d236\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@682 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/10/11, 12:54 PM",
          "commitName": "9d9957fdd23ff13d187d4b8832d580bf8622baf6",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "11/11/10, 9:42 PM",
          "commitNameOld": "df223efd38c514d584f00d076488ab9a02011492",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 59.63,
          "commitsBetweenForRepo": 132,
          "commitsBetweenForFile": 1,
          "actualSource": "boolean expectNotNullOrUndefined(NodeTraversal t, Node n, JSType type, String msg, JSType expectedType) {\n    if (!type.isNoType() \u0026\u0026 !type.isUnknownType() \u0026\u0026 type.isSubtype(nullOrUndefined)) {\n        if (n.getType() \u003d\u003d Token.GETPROP \u0026\u0026 !t.inGlobalScope() \u0026\u0026 type.isNullType()) {\n            return true;\n        }\n        mismatch(t, n, msg, type, expectedType);\n        return false;\n    }\n    return true;\n}",
          "path": "src/com/google/javascript/jscomp/TypeValidator.java",
          "functionStartLine": 232,
          "functionName": "expectNotNullOrUndefined",
          "functionAnnotation": "",
          "functionDoc": "Expect the type to be anything but the null or void type. If the\nexpectation is not met, issue a warning at the provided node\u0027s\nsource code position. Note that a union type that includes the\nvoid type and at least one other type meets the expectation.\n\n@return Whether the expectation was met.\n",
          "diff": "@@ -1,7 +1,10 @@\n-boolean expectNotVoid(NodeTraversal t, Node n, JSType type, String msg, JSType expectedType) {\n-    if (type.isVoidType()) {\n+boolean expectNotNullOrUndefined(NodeTraversal t, Node n, JSType type, String msg, JSType expectedType) {\n+    if (!type.isNoType() \u0026\u0026 !type.isUnknownType() \u0026\u0026 type.isSubtype(nullOrUndefined)) {\n+        if (n.getType() \u003d\u003d Token.GETPROP \u0026\u0026 !t.inGlobalScope() \u0026\u0026 type.isNullType()) {\n+            return true;\n+        }\n         mismatch(t, n, msg, type, expectedType);\n         return false;\n     }\n     return true;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "expectNotVoid",
            "newValue": "expectNotNullOrUndefined"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nFlag null pointer exceptions that are provable at compile time.\n\nR\u003djohnlenz\nDELTA\u003d48  (38 added, 0 deleted, 10 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d236\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@682 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/10/11, 12:54 PM",
          "commitName": "9d9957fdd23ff13d187d4b8832d580bf8622baf6",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "11/11/10, 9:42 PM",
          "commitNameOld": "df223efd38c514d584f00d076488ab9a02011492",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 59.63,
          "commitsBetweenForRepo": 132,
          "commitsBetweenForFile": 1,
          "actualSource": "boolean expectNotNullOrUndefined(NodeTraversal t, Node n, JSType type, String msg, JSType expectedType) {\n    if (!type.isNoType() \u0026\u0026 !type.isUnknownType() \u0026\u0026 type.isSubtype(nullOrUndefined)) {\n        if (n.getType() \u003d\u003d Token.GETPROP \u0026\u0026 !t.inGlobalScope() \u0026\u0026 type.isNullType()) {\n            return true;\n        }\n        mismatch(t, n, msg, type, expectedType);\n        return false;\n    }\n    return true;\n}",
          "path": "src/com/google/javascript/jscomp/TypeValidator.java",
          "functionStartLine": 232,
          "functionName": "expectNotNullOrUndefined",
          "functionAnnotation": "",
          "functionDoc": "Expect the type to be anything but the null or void type. If the\nexpectation is not met, issue a warning at the provided node\u0027s\nsource code position. Note that a union type that includes the\nvoid type and at least one other type meets the expectation.\n\n@return Whether the expectation was met.\n",
          "diff": "@@ -1,7 +1,10 @@\n-boolean expectNotVoid(NodeTraversal t, Node n, JSType type, String msg, JSType expectedType) {\n-    if (type.isVoidType()) {\n+boolean expectNotNullOrUndefined(NodeTraversal t, Node n, JSType type, String msg, JSType expectedType) {\n+    if (!type.isNoType() \u0026\u0026 !type.isUnknownType() \u0026\u0026 type.isSubtype(nullOrUndefined)) {\n+        if (n.getType() \u003d\u003d Token.GETPROP \u0026\u0026 !t.inGlobalScope() \u0026\u0026 type.isNullType()) {\n+            return true;\n+        }\n         mismatch(t, n, msg, type, expectedType);\n         return false;\n     }\n     return true;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "\nFlag null pointer exceptions that are provable at compile time.\n\nR\u003djohnlenz\nDELTA\u003d48  (38 added, 0 deleted, 10 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d236\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@682 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/10/11, 12:54 PM",
          "commitName": "9d9957fdd23ff13d187d4b8832d580bf8622baf6",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "11/11/10, 9:42 PM",
          "commitNameOld": "df223efd38c514d584f00d076488ab9a02011492",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 59.63,
          "commitsBetweenForRepo": 132,
          "commitsBetweenForFile": 1,
          "actualSource": "boolean expectNotNullOrUndefined(NodeTraversal t, Node n, JSType type, String msg, JSType expectedType) {\n    if (!type.isNoType() \u0026\u0026 !type.isUnknownType() \u0026\u0026 type.isSubtype(nullOrUndefined)) {\n        if (n.getType() \u003d\u003d Token.GETPROP \u0026\u0026 !t.inGlobalScope() \u0026\u0026 type.isNullType()) {\n            return true;\n        }\n        mismatch(t, n, msg, type, expectedType);\n        return false;\n    }\n    return true;\n}",
          "path": "src/com/google/javascript/jscomp/TypeValidator.java",
          "functionStartLine": 232,
          "functionName": "expectNotNullOrUndefined",
          "functionAnnotation": "",
          "functionDoc": "Expect the type to be anything but the null or void type. If the\nexpectation is not met, issue a warning at the provided node\u0027s\nsource code position. Note that a union type that includes the\nvoid type and at least one other type meets the expectation.\n\n@return Whether the expectation was met.\n",
          "diff": "@@ -1,7 +1,10 @@\n-boolean expectNotVoid(NodeTraversal t, Node n, JSType type, String msg, JSType expectedType) {\n-    if (type.isVoidType()) {\n+boolean expectNotNullOrUndefined(NodeTraversal t, Node n, JSType type, String msg, JSType expectedType) {\n+    if (!type.isNoType() \u0026\u0026 !type.isUnknownType() \u0026\u0026 type.isSubtype(nullOrUndefined)) {\n+        if (n.getType() \u003d\u003d Token.GETPROP \u0026\u0026 !t.inGlobalScope() \u0026\u0026 type.isNullType()) {\n+            return true;\n+        }\n         mismatch(t, n, msg, type, expectedType);\n         return false;\n     }\n     return true;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Expect the type to be anything but the void type. If the expectation is not\nmet, issue a warning at the provided node\u0027s source code position. Note that\na union type that includes the void type and at least one other type meets\nthe expectation.\n\n@return Whether the expectation was met.\n",
            "newValue": "Expect the type to be anything but the null or void type. If the\nexpectation is not met, issue a warning at the provided node\u0027s\nsource code position. Note that a union type that includes the\nvoid type and at least one other type meets the expectation.\n\n@return Whether the expectation was met.\n"
          }
        }
      ]
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,7 @@\n+boolean expectNotVoid(NodeTraversal t, Node n, JSType type, String msg, JSType expectedType) {\n+    if (type.isVoidType()) {\n+        mismatch(t, n, msg, type, expectedType);\n+        return false;\n+    }\n+    return true;\n+}\n\\ No newline at end of file\n",
      "actualSource": "boolean expectNotVoid(NodeTraversal t, Node n, JSType type, String msg, JSType expectedType) {\n    if (type.isVoidType()) {\n        mismatch(t, n, msg, type, expectedType);\n        return false;\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/jscomp/TypeValidator.java",
      "functionStartLine": 217,
      "functionName": "expectNotVoid",
      "functionAnnotation": "",
      "functionDoc": "Expect the type to be anything but the void type. If the expectation is not\nmet, issue a warning at the provided node\u0027s source code position. Note that\na union type that includes the void type and at least one other type meets\nthe expectation.\n\n@return Whether the expectation was met.\n"
    }
  }
}