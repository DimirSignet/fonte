{
  "origin": "codeshovel",
  "repositoryName": "Closure-82b",
  "repositoryPath": "/tmp/Closure-82b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FunctionType.java",
  "functionName": "supAndInfHelper",
  "functionId": "supAndInfHelper___that-JSType__leastSuper-boolean",
  "sourceFilePath": "src/com/google/javascript/rhino/jstype/FunctionType.java",
  "functionAnnotation": "",
  "functionDoc": "Computes the supremum or infimum of functions with other types.\nBecause sup() and inf() share a lot of logic for functions, we use\na single helper.\n\n@param leastSuper If true, compute the supremum of {@code this} with\n    {@code that}. Otherwise compute the infimum.\n@return The least supertype or greatest subtype.\n",
  "functionStartLine": 475,
  "functionEndLine": 551,
  "numCommitsSeen": 33,
  "timeTaken": 2346,
  "changeHistory": [
    "baa06eb5d4fa96fc674484130f093e83dacf7bef",
    "83026babd3b768f508780b0c38c3cef2bb9242a5",
    "465282f1ca28a208b06c47b55fd292d4631c55da",
    "cf5fd88f13f0b11625ac407f85cb58b36862e173",
    "a9757e8c7d85f9ee9622b3e5352955ba3429733d"
  ],
  "changeHistoryShort": {
    "baa06eb5d4fa96fc674484130f093e83dacf7bef": "Ymultichange(Ybodychange,Ydocchange)",
    "83026babd3b768f508780b0c38c3cef2bb9242a5": "Ybodychange",
    "465282f1ca28a208b06c47b55fd292d4631c55da": "Ybodychange",
    "cf5fd88f13f0b11625ac407f85cb58b36862e173": "Ybodychange",
    "a9757e8c7d85f9ee9622b3e5352955ba3429733d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "baa06eb5d4fa96fc674484130f093e83dacf7bef": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "\nfix another weird bug in the function type lattice.\n\nR\u003djohnlenz\nDELTA\u003d28  (25 added, 0 deleted, 3 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d715053\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@509 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/25/10, 12:45 PM",
      "commitName": "baa06eb5d4fa96fc674484130f093e83dacf7bef",
      "commitAuthor": "nicksantos@google.com",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "\nfix another weird bug in the function type lattice.\n\nR\u003djohnlenz\nDELTA\u003d28  (25 added, 0 deleted, 3 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d715053\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@509 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "10/25/10, 12:45 PM",
          "commitName": "baa06eb5d4fa96fc674484130f093e83dacf7bef",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "10/22/10, 6:29 AM",
          "commitNameOld": "83026babd3b768f508780b0c38c3cef2bb9242a5",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 3.26,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "actualSource": "private JSType supAndInfHelper(JSType that, boolean leastSuper) {\n    if (isFunctionType() \u0026\u0026 that.isFunctionType()) {\n        if (isEquivalentTo(that)) {\n            return this;\n        }\n        FunctionType other \u003d null;\n        if (that instanceof FunctionType) {\n            other \u003d (FunctionType) that;\n        }\n        if (other !\u003d null \u0026\u0026 isOrdinaryFunction() \u0026\u0026 that.isOrdinaryFunction() \u0026\u0026 !this.call.hasUnknownParamsOrReturn() \u0026\u0026 !other.call.hasUnknownParamsOrReturn()) {\n            boolean isSubtypeOfThat \u003d this.isSubtype(that);\n            boolean isSubtypeOfThis \u003d that.isSubtype(this);\n            if (isSubtypeOfThat \u0026\u0026 !isSubtypeOfThis) {\n                return leastSuper ? that : this;\n            } else if (isSubtypeOfThis \u0026\u0026 !isSubtypeOfThat) {\n                return leastSuper ? this : that;\n            }\n            FunctionType merged \u003d tryMergeFunctionPiecewise(other, leastSuper);\n            if (merged !\u003d null) {\n                return merged;\n            }\n        }\n        JSType functionInstance \u003d registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE);\n        if (functionInstance.isEquivalentTo(that)) {\n            return leastSuper ? that : this;\n        } else if (functionInstance.isEquivalentTo(this)) {\n            return leastSuper ? this : that;\n        }\n        FunctionType greatestFn \u003d registry.getNativeFunctionType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);\n        FunctionType leastFn \u003d registry.getNativeFunctionType(JSTypeNative.LEAST_FUNCTION_TYPE);\n        return leastSuper ? greatestFn : leastFn;\n    }\n    return leastSuper ? super.getLeastSupertype(that) : super.getGreatestSubtype(that);\n}",
          "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
          "functionStartLine": 469,
          "functionName": "supAndInfHelper",
          "functionAnnotation": "",
          "functionDoc": "Computes the supremum or infimum of functions with other types.\nBecause sup() and inf() share a lot of logic for functions, we use\na single helper.\n\n@param leastSuper If true, compute the supremum of {@code this} with\n    {@code that}. Otherwise compute the infimum.\n@return The least supertype or greatest subtype.\n",
          "diff": "@@ -1,32 +1,34 @@\n private JSType supAndInfHelper(JSType that, boolean leastSuper) {\n     if (isFunctionType() \u0026\u0026 that.isFunctionType()) {\n         if (isEquivalentTo(that)) {\n             return this;\n         }\n         FunctionType other \u003d null;\n         if (that instanceof FunctionType) {\n             other \u003d (FunctionType) that;\n         }\n         if (other !\u003d null \u0026\u0026 isOrdinaryFunction() \u0026\u0026 that.isOrdinaryFunction() \u0026\u0026 !this.call.hasUnknownParamsOrReturn() \u0026\u0026 !other.call.hasUnknownParamsOrReturn()) {\n-            if (this.isSubtype(that)) {\n+            boolean isSubtypeOfThat \u003d this.isSubtype(that);\n+            boolean isSubtypeOfThis \u003d that.isSubtype(this);\n+            if (isSubtypeOfThat \u0026\u0026 !isSubtypeOfThis) {\n                 return leastSuper ? that : this;\n-            } else if (that.isSubtype(this)) {\n+            } else if (isSubtypeOfThis \u0026\u0026 !isSubtypeOfThat) {\n                 return leastSuper ? this : that;\n             }\n             FunctionType merged \u003d tryMergeFunctionPiecewise(other, leastSuper);\n             if (merged !\u003d null) {\n                 return merged;\n             }\n         }\n         JSType functionInstance \u003d registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE);\n         if (functionInstance.isEquivalentTo(that)) {\n             return leastSuper ? that : this;\n         } else if (functionInstance.isEquivalentTo(this)) {\n             return leastSuper ? this : that;\n         }\n         FunctionType greatestFn \u003d registry.getNativeFunctionType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);\n         FunctionType leastFn \u003d registry.getNativeFunctionType(JSTypeNative.LEAST_FUNCTION_TYPE);\n         return leastSuper ? greatestFn : leastFn;\n     }\n     return leastSuper ? super.getLeastSupertype(that) : super.getGreatestSubtype(that);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "\nfix another weird bug in the function type lattice.\n\nR\u003djohnlenz\nDELTA\u003d28  (25 added, 0 deleted, 3 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d715053\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@509 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "10/25/10, 12:45 PM",
          "commitName": "baa06eb5d4fa96fc674484130f093e83dacf7bef",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "10/22/10, 6:29 AM",
          "commitNameOld": "83026babd3b768f508780b0c38c3cef2bb9242a5",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 3.26,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "actualSource": "private JSType supAndInfHelper(JSType that, boolean leastSuper) {\n    if (isFunctionType() \u0026\u0026 that.isFunctionType()) {\n        if (isEquivalentTo(that)) {\n            return this;\n        }\n        FunctionType other \u003d null;\n        if (that instanceof FunctionType) {\n            other \u003d (FunctionType) that;\n        }\n        if (other !\u003d null \u0026\u0026 isOrdinaryFunction() \u0026\u0026 that.isOrdinaryFunction() \u0026\u0026 !this.call.hasUnknownParamsOrReturn() \u0026\u0026 !other.call.hasUnknownParamsOrReturn()) {\n            boolean isSubtypeOfThat \u003d this.isSubtype(that);\n            boolean isSubtypeOfThis \u003d that.isSubtype(this);\n            if (isSubtypeOfThat \u0026\u0026 !isSubtypeOfThis) {\n                return leastSuper ? that : this;\n            } else if (isSubtypeOfThis \u0026\u0026 !isSubtypeOfThat) {\n                return leastSuper ? this : that;\n            }\n            FunctionType merged \u003d tryMergeFunctionPiecewise(other, leastSuper);\n            if (merged !\u003d null) {\n                return merged;\n            }\n        }\n        JSType functionInstance \u003d registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE);\n        if (functionInstance.isEquivalentTo(that)) {\n            return leastSuper ? that : this;\n        } else if (functionInstance.isEquivalentTo(this)) {\n            return leastSuper ? this : that;\n        }\n        FunctionType greatestFn \u003d registry.getNativeFunctionType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);\n        FunctionType leastFn \u003d registry.getNativeFunctionType(JSTypeNative.LEAST_FUNCTION_TYPE);\n        return leastSuper ? greatestFn : leastFn;\n    }\n    return leastSuper ? super.getLeastSupertype(that) : super.getGreatestSubtype(that);\n}",
          "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
          "functionStartLine": 469,
          "functionName": "supAndInfHelper",
          "functionAnnotation": "",
          "functionDoc": "Computes the supremum or infimum of functions with other types.\nBecause sup() and inf() share a lot of logic for functions, we use\na single helper.\n\n@param leastSuper If true, compute the supremum of {@code this} with\n    {@code that}. Otherwise compute the infimum.\n@return The least supertype or greatest subtype.\n",
          "diff": "@@ -1,32 +1,34 @@\n private JSType supAndInfHelper(JSType that, boolean leastSuper) {\n     if (isFunctionType() \u0026\u0026 that.isFunctionType()) {\n         if (isEquivalentTo(that)) {\n             return this;\n         }\n         FunctionType other \u003d null;\n         if (that instanceof FunctionType) {\n             other \u003d (FunctionType) that;\n         }\n         if (other !\u003d null \u0026\u0026 isOrdinaryFunction() \u0026\u0026 that.isOrdinaryFunction() \u0026\u0026 !this.call.hasUnknownParamsOrReturn() \u0026\u0026 !other.call.hasUnknownParamsOrReturn()) {\n-            if (this.isSubtype(that)) {\n+            boolean isSubtypeOfThat \u003d this.isSubtype(that);\n+            boolean isSubtypeOfThis \u003d that.isSubtype(this);\n+            if (isSubtypeOfThat \u0026\u0026 !isSubtypeOfThis) {\n                 return leastSuper ? that : this;\n-            } else if (that.isSubtype(this)) {\n+            } else if (isSubtypeOfThis \u0026\u0026 !isSubtypeOfThat) {\n                 return leastSuper ? this : that;\n             }\n             FunctionType merged \u003d tryMergeFunctionPiecewise(other, leastSuper);\n             if (merged !\u003d null) {\n                 return merged;\n             }\n         }\n         JSType functionInstance \u003d registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE);\n         if (functionInstance.isEquivalentTo(that)) {\n             return leastSuper ? that : this;\n         } else if (functionInstance.isEquivalentTo(this)) {\n             return leastSuper ? this : that;\n         }\n         FunctionType greatestFn \u003d registry.getNativeFunctionType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);\n         FunctionType leastFn \u003d registry.getNativeFunctionType(JSTypeNative.LEAST_FUNCTION_TYPE);\n         return leastSuper ? greatestFn : leastFn;\n     }\n     return leastSuper ? super.getLeastSupertype(that) : super.getGreatestSubtype(that);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "Computes the supremum or infimum of functions with other types.\nBecause sup() and inf() share a lot of logic for functions, we use\na single helper.\n\n@param leastSuper If true, compute the supremum of {@code this} with\n    {@code that}. Otherwise compute the infimum.\n@return The least supertype or greatest subtype.\n"
          }
        }
      ]
    },
    "83026babd3b768f508780b0c38c3cef2bb9242a5": {
      "type": "Ybodychange",
      "commitMessage": "\nclean up a long-standing TODO and fix up the function type lattice\n\nR\u003dmoedinger,awiner\nDELTA\u003d168  (108 added, 21 deleted, 39 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d469041\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@504 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/22/10, 6:29 AM",
      "commitName": "83026babd3b768f508780b0c38c3cef2bb9242a5",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "10/21/10, 9:23 AM",
      "commitNameOld": "599e40891b9e5cb55af2dd3bb8027cee846087c1",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 0.88,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private JSType supAndInfHelper(JSType that, boolean leastSuper) {\n    if (isFunctionType() \u0026\u0026 that.isFunctionType()) {\n        if (isEquivalentTo(that)) {\n            return this;\n        }\n        FunctionType other \u003d null;\n        if (that instanceof FunctionType) {\n            other \u003d (FunctionType) that;\n        }\n        if (other !\u003d null \u0026\u0026 isOrdinaryFunction() \u0026\u0026 that.isOrdinaryFunction() \u0026\u0026 !this.call.hasUnknownParamsOrReturn() \u0026\u0026 !other.call.hasUnknownParamsOrReturn()) {\n            if (this.isSubtype(that)) {\n                return leastSuper ? that : this;\n            } else if (that.isSubtype(this)) {\n                return leastSuper ? this : that;\n            }\n            FunctionType merged \u003d tryMergeFunctionPiecewise(other, leastSuper);\n            if (merged !\u003d null) {\n                return merged;\n            }\n        }\n        JSType functionInstance \u003d registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE);\n        if (functionInstance.isEquivalentTo(that)) {\n            return leastSuper ? that : this;\n        } else if (functionInstance.isEquivalentTo(this)) {\n            return leastSuper ? this : that;\n        }\n        FunctionType greatestFn \u003d registry.getNativeFunctionType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);\n        FunctionType leastFn \u003d registry.getNativeFunctionType(JSTypeNative.LEAST_FUNCTION_TYPE);\n        return leastSuper ? greatestFn : leastFn;\n    }\n    return leastSuper ? super.getLeastSupertype(that) : super.getGreatestSubtype(that);\n}",
      "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
      "functionStartLine": 461,
      "functionName": "supAndInfHelper",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,22 +1,32 @@\n private JSType supAndInfHelper(JSType that, boolean leastSuper) {\n     if (isFunctionType() \u0026\u0026 that.isFunctionType()) {\n         if (isEquivalentTo(that)) {\n             return this;\n         }\n-        if (isOrdinaryFunction() \u0026\u0026 that.isOrdinaryFunction() \u0026\u0026 that instanceof FunctionType) {\n-            FunctionType other \u003d (FunctionType) that;\n-            if (call.hasEqualParameters(other.call) \u0026\u0026 isEquivalent(typeOfThis, other.typeOfThis)) {\n-                JSType newReturnType \u003d leastSuper ? call.returnType.getLeastSupertype(other.call.returnType) : call.returnType.getGreatestSubtype(other.call.returnType);\n-                return cloneWithNewReturnType(newReturnType, call.returnTypeInferred || other.call.returnTypeInferred);\n+        FunctionType other \u003d null;\n+        if (that instanceof FunctionType) {\n+            other \u003d (FunctionType) that;\n+        }\n+        if (other !\u003d null \u0026\u0026 isOrdinaryFunction() \u0026\u0026 that.isOrdinaryFunction() \u0026\u0026 !this.call.hasUnknownParamsOrReturn() \u0026\u0026 !other.call.hasUnknownParamsOrReturn()) {\n+            if (this.isSubtype(that)) {\n+                return leastSuper ? that : this;\n+            } else if (that.isSubtype(this)) {\n+                return leastSuper ? this : that;\n+            }\n+            FunctionType merged \u003d tryMergeFunctionPiecewise(other, leastSuper);\n+            if (merged !\u003d null) {\n+                return merged;\n             }\n         }\n         JSType functionInstance \u003d registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE);\n         if (functionInstance.isEquivalentTo(that)) {\n             return leastSuper ? that : this;\n         } else if (functionInstance.isEquivalentTo(this)) {\n             return leastSuper ? this : that;\n         }\n-        return leastSuper ? registry.getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE) : registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n+        FunctionType greatestFn \u003d registry.getNativeFunctionType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);\n+        FunctionType leastFn \u003d registry.getNativeFunctionType(JSTypeNative.LEAST_FUNCTION_TYPE);\n+        return leastSuper ? greatestFn : leastFn;\n     }\n     return leastSuper ? super.getLeastSupertype(that) : super.getGreatestSubtype(that);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "465282f1ca28a208b06c47b55fd292d4631c55da": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/06/22 by nicksantos\n\n        Inferred return types. \n        Fixes issue 143.\n        I eventually decided that it was wrong for the subtype\u0027s method\n        to affect the supertype\u0027s method, since this will make incremental\n        compilation a lot harder in the long run.\n\n        R\u003dmoedinger\n        DELTA\u003d481  (313 added, 38 deleted, 130 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d34007\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@249 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/22/10, 5:19 PM",
      "commitName": "465282f1ca28a208b06c47b55fd292d4631c55da",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "5/27/10, 10:18 PM",
      "commitNameOld": "6d00ac1a68612aade8a19d7ecc9b180f00ae5234",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 25.79,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "private JSType supAndInfHelper(JSType that, boolean leastSuper) {\n    if (isFunctionType() \u0026\u0026 that.isFunctionType()) {\n        if (isEquivalentTo(that)) {\n            return this;\n        }\n        if (isOrdinaryFunction() \u0026\u0026 that.isOrdinaryFunction() \u0026\u0026 that instanceof FunctionType) {\n            FunctionType other \u003d (FunctionType) that;\n            if (call.hasEqualParameters(other.call) \u0026\u0026 isEquivalent(typeOfThis, other.typeOfThis)) {\n                JSType newReturnType \u003d leastSuper ? call.returnType.getLeastSupertype(other.call.returnType) : call.returnType.getGreatestSubtype(other.call.returnType);\n                return cloneWithNewReturnType(newReturnType, call.returnTypeInferred || other.call.returnTypeInferred);\n            }\n        }\n        JSType functionInstance \u003d registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE);\n        if (functionInstance.isEquivalentTo(that)) {\n            return leastSuper ? that : this;\n        } else if (functionInstance.isEquivalentTo(this)) {\n            return leastSuper ? this : that;\n        }\n        return leastSuper ? registry.getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE) : registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n    }\n    return leastSuper ? super.getLeastSupertype(that) : super.getGreatestSubtype(that);\n}",
      "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
      "functionStartLine": 461,
      "functionName": "supAndInfHelper",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,22 +1,22 @@\n private JSType supAndInfHelper(JSType that, boolean leastSuper) {\n     if (isFunctionType() \u0026\u0026 that.isFunctionType()) {\n         if (isEquivalentTo(that)) {\n             return this;\n         }\n         if (isOrdinaryFunction() \u0026\u0026 that.isOrdinaryFunction() \u0026\u0026 that instanceof FunctionType) {\n             FunctionType other \u003d (FunctionType) that;\n             if (call.hasEqualParameters(other.call) \u0026\u0026 isEquivalent(typeOfThis, other.typeOfThis)) {\n                 JSType newReturnType \u003d leastSuper ? call.returnType.getLeastSupertype(other.call.returnType) : call.returnType.getGreatestSubtype(other.call.returnType);\n-                return new FunctionType(registry, null, null, new ArrowType(registry, call.parameters, newReturnType, call.returnTypeInferred || other.call.returnTypeInferred), typeOfThis, null, false, false);\n+                return cloneWithNewReturnType(newReturnType, call.returnTypeInferred || other.call.returnTypeInferred);\n             }\n         }\n         JSType functionInstance \u003d registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE);\n         if (functionInstance.isEquivalentTo(that)) {\n             return leastSuper ? that : this;\n         } else if (functionInstance.isEquivalentTo(this)) {\n             return leastSuper ? this : that;\n         }\n         return leastSuper ? registry.getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE) : registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n     }\n     return leastSuper ? super.getLeastSupertype(that) : super.getGreatestSubtype(that);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "cf5fd88f13f0b11625ac407f85cb58b36862e173": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/05/25 by nicksantos\n\n        start moving away from using Object#equals for type equality.\n\n        R\u003djohnlenz\n        DELTA\u003d445  (98 added, 3 deleted, 344 changed)\n\nChange on 2010/05/25 by acleung\n\n        Fix bug with resolving a member function of a resolved constructor.\n\n        R\u003djohnlenz\n        DELTA\u003d48  (48 added, 0 deleted, 0 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d12002\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@231 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/26/10, 8:26 AM",
      "commitName": "cf5fd88f13f0b11625ac407f85cb58b36862e173",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "5/18/10, 10:06 AM",
      "commitNameOld": "a9757e8c7d85f9ee9622b3e5352955ba3429733d",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 7.93,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "private JSType supAndInfHelper(JSType that, boolean leastSuper) {\n    if (isFunctionType() \u0026\u0026 that.isFunctionType()) {\n        if (isEquivalentTo(that)) {\n            return this;\n        }\n        if (isOrdinaryFunction() \u0026\u0026 that.isOrdinaryFunction() \u0026\u0026 that instanceof FunctionType) {\n            FunctionType other \u003d (FunctionType) that;\n            if (call.hasEqualParameters(other.call) \u0026\u0026 isEquivalent(typeOfThis, other.typeOfThis)) {\n                JSType newReturnType \u003d leastSuper ? call.returnType.getLeastSupertype(other.call.returnType) : call.returnType.getGreatestSubtype(other.call.returnType);\n                return new FunctionType(registry, null, null, new ArrowType(registry, call.parameters, newReturnType, call.returnTypeInferred || other.call.returnTypeInferred), typeOfThis, null, false, false);\n            }\n        }\n        JSType functionInstance \u003d registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE);\n        if (functionInstance.isEquivalentTo(that)) {\n            return leastSuper ? that : this;\n        } else if (functionInstance.isEquivalentTo(this)) {\n            return leastSuper ? this : that;\n        }\n        return leastSuper ? registry.getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE) : registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n    }\n    return leastSuper ? super.getLeastSupertype(that) : super.getGreatestSubtype(that);\n}",
      "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
      "functionStartLine": 463,
      "functionName": "supAndInfHelper",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,22 +1,22 @@\n private JSType supAndInfHelper(JSType that, boolean leastSuper) {\n     if (isFunctionType() \u0026\u0026 that.isFunctionType()) {\n-        if (equals(that)) {\n+        if (isEquivalentTo(that)) {\n             return this;\n         }\n         if (isOrdinaryFunction() \u0026\u0026 that.isOrdinaryFunction() \u0026\u0026 that instanceof FunctionType) {\n             FunctionType other \u003d (FunctionType) that;\n-            if (call.hasEqualParameters(other.call) \u0026\u0026 Objects.equal(typeOfThis, other.typeOfThis)) {\n+            if (call.hasEqualParameters(other.call) \u0026\u0026 isEquivalent(typeOfThis, other.typeOfThis)) {\n                 JSType newReturnType \u003d leastSuper ? call.returnType.getLeastSupertype(other.call.returnType) : call.returnType.getGreatestSubtype(other.call.returnType);\n                 return new FunctionType(registry, null, null, new ArrowType(registry, call.parameters, newReturnType, call.returnTypeInferred || other.call.returnTypeInferred), typeOfThis, null, false, false);\n             }\n         }\n         JSType functionInstance \u003d registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE);\n-        if (functionInstance.equals(that)) {\n+        if (functionInstance.isEquivalentTo(that)) {\n             return leastSuper ? that : this;\n-        } else if (functionInstance.equals(this)) {\n+        } else if (functionInstance.isEquivalentTo(this)) {\n             return leastSuper ? this : that;\n         }\n         return leastSuper ? registry.getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE) : registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n     }\n     return leastSuper ? super.getLeastSupertype(that) : super.getGreatestSubtype(that);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a9757e8c7d85f9ee9622b3e5352955ba3429733d": {
      "type": "Yintroduced",
      "commitMessage": "\nChange on 2010/05/17 by robby\n\n        Check for non-alias locals in ScopedAliases.\n\n        R\u003dnick\n        DELTA\u003d26  (22 added, 3 deleted, 1 changed)\n\nChange on 2010/05/18 by nick\n\n        Add inferred return types.\n        Make the inf/sup relationship for function types a bit richer.\n        Make sure that the [call] pointer can never be null.\n\n        R\u003dandrew\n        DELTA\u003d192  (134 added, 30 deleted, 28 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d4001\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@216 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/18/10, 10:06 AM",
      "commitName": "a9757e8c7d85f9ee9622b3e5352955ba3429733d",
      "commitAuthor": "Nicholas.J.Santos",
      "diff": "@@ -0,0 +1,22 @@\n+private JSType supAndInfHelper(JSType that, boolean leastSuper) {\n+    if (isFunctionType() \u0026\u0026 that.isFunctionType()) {\n+        if (equals(that)) {\n+            return this;\n+        }\n+        if (isOrdinaryFunction() \u0026\u0026 that.isOrdinaryFunction() \u0026\u0026 that instanceof FunctionType) {\n+            FunctionType other \u003d (FunctionType) that;\n+            if (call.hasEqualParameters(other.call) \u0026\u0026 Objects.equal(typeOfThis, other.typeOfThis)) {\n+                JSType newReturnType \u003d leastSuper ? call.returnType.getLeastSupertype(other.call.returnType) : call.returnType.getGreatestSubtype(other.call.returnType);\n+                return new FunctionType(registry, null, null, new ArrowType(registry, call.parameters, newReturnType, call.returnTypeInferred || other.call.returnTypeInferred), typeOfThis, null, false, false);\n+            }\n+        }\n+        JSType functionInstance \u003d registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE);\n+        if (functionInstance.equals(that)) {\n+            return leastSuper ? that : this;\n+        } else if (functionInstance.equals(this)) {\n+            return leastSuper ? this : that;\n+        }\n+        return leastSuper ? registry.getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE) : registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n+    }\n+    return leastSuper ? super.getLeastSupertype(that) : super.getGreatestSubtype(that);\n+}\n\\ No newline at end of file\n",
      "actualSource": "private JSType supAndInfHelper(JSType that, boolean leastSuper) {\n    if (isFunctionType() \u0026\u0026 that.isFunctionType()) {\n        if (equals(that)) {\n            return this;\n        }\n        if (isOrdinaryFunction() \u0026\u0026 that.isOrdinaryFunction() \u0026\u0026 that instanceof FunctionType) {\n            FunctionType other \u003d (FunctionType) that;\n            if (call.hasEqualParameters(other.call) \u0026\u0026 Objects.equal(typeOfThis, other.typeOfThis)) {\n                JSType newReturnType \u003d leastSuper ? call.returnType.getLeastSupertype(other.call.returnType) : call.returnType.getGreatestSubtype(other.call.returnType);\n                return new FunctionType(registry, null, null, new ArrowType(registry, call.parameters, newReturnType, call.returnTypeInferred || other.call.returnTypeInferred), typeOfThis, null, false, false);\n            }\n        }\n        JSType functionInstance \u003d registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE);\n        if (functionInstance.equals(that)) {\n            return leastSuper ? that : this;\n        } else if (functionInstance.equals(this)) {\n            return leastSuper ? this : that;\n        }\n        return leastSuper ? registry.getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE) : registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n    }\n    return leastSuper ? super.getLeastSupertype(that) : super.getGreatestSubtype(that);\n}",
      "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
      "functionStartLine": 463,
      "functionName": "supAndInfHelper",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}