{
  "origin": "codeshovel",
  "repositoryName": "Closure-82b",
  "repositoryPath": "/tmp/Closure-82b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JSType.java",
  "functionName": "getGreatestSubtype",
  "functionId": "getGreatestSubtype___thisType-JSType__thatType-JSType",
  "sourceFilePath": "src/com/google/javascript/rhino/jstype/JSType.java",
  "functionAnnotation": "",
  "functionDoc": "A generic implementation meant to be used as a helper for common\ngetGreatestSubtype implementations.\n",
  "functionStartLine": 629,
  "functionEndLine": 649,
  "numCommitsSeen": 30,
  "timeTaken": 1136,
  "changeHistory": [
    "043a352c2e85815a90a1926d112902d924bab6c1",
    "2bc4e294e28b2cd78e92feafa497261d524bae23",
    "69d9533d7d152a8aa8e401d567131fe7da25013d",
    "0bc5bc535ebb3afbe081961db35302a670b07781",
    "cf5fd88f13f0b11625ac407f85cb58b36862e173",
    "1be1c2636ef14071afa7da5cb8988972bd90149f",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "043a352c2e85815a90a1926d112902d924bab6c1": "Ybodychange",
    "2bc4e294e28b2cd78e92feafa497261d524bae23": "Ybodychange",
    "69d9533d7d152a8aa8e401d567131fe7da25013d": "Ybodychange",
    "0bc5bc535ebb3afbe081961db35302a670b07781": "Ybodychange",
    "cf5fd88f13f0b11625ac407f85cb58b36862e173": "Ybodychange",
    "1be1c2636ef14071afa7da5cb8988972bd90149f": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "043a352c2e85815a90a1926d112902d924bab6c1": {
      "type": "Ybodychange",
      "commitMessage": "\nWhen we can\u0027t find a forward-declared type,\nthat type should resolve to an empty type.\nThis ensures that if someone tries to pass a param or return\nvalue to it, they get a type warning.\nTry #3\n!!!\n\nR\u003djohnlenz\nDELTA\u003d534  (451 added, 37 deleted, 46 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d362\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@731 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/26/11, 8:30 AM",
      "commitName": "043a352c2e85815a90a1926d112902d924bab6c1",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "1/20/11, 7:44 PM",
      "commitNameOld": "2bc4e294e28b2cd78e92feafa497261d524bae23",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 5.53,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "static JSType getGreatestSubtype(JSType thisType, JSType thatType) {\n    if (thisType.isEquivalentTo(thatType)) {\n        return thisType;\n    } else if (thisType.isUnknownType() || thatType.isUnknownType()) {\n        return thisType.isEquivalentTo(thatType) ? thisType : thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);\n    } else if (thisType.isSubtype(thatType)) {\n        return filterNoResolvedType(thisType);\n    } else if (thatType.isSubtype(thisType)) {\n        return filterNoResolvedType(thatType);\n    } else if (thisType.isUnionType()) {\n        return ((UnionType) thisType).meet(thatType);\n    } else if (thatType.isUnionType()) {\n        return ((UnionType) thatType).meet(thisType);\n    } else if (thisType.isObject() \u0026\u0026 thatType.isObject()) {\n        return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n    }\n    return thisType.getNativeType(JSTypeNative.NO_TYPE);\n}",
      "path": "src/com/google/javascript/rhino/jstype/JSType.java",
      "functionStartLine": 629,
      "functionName": "getGreatestSubtype",
      "functionAnnotation": "",
      "functionDoc": "A generic implementation meant to be used as a helper for common\ngetGreatestSubtype implementations.\n",
      "diff": "@@ -1,16 +1,18 @@\n static JSType getGreatestSubtype(JSType thisType, JSType thatType) {\n-    if (thisType.isUnknownType() || thatType.isUnknownType()) {\n+    if (thisType.isEquivalentTo(thatType)) {\n+        return thisType;\n+    } else if (thisType.isUnknownType() || thatType.isUnknownType()) {\n         return thisType.isEquivalentTo(thatType) ? thisType : thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);\n     } else if (thisType.isSubtype(thatType)) {\n-        return thisType;\n+        return filterNoResolvedType(thisType);\n     } else if (thatType.isSubtype(thisType)) {\n-        return thatType;\n+        return filterNoResolvedType(thatType);\n     } else if (thisType.isUnionType()) {\n         return ((UnionType) thisType).meet(thatType);\n     } else if (thatType.isUnionType()) {\n         return ((UnionType) thatType).meet(thisType);\n     } else if (thisType.isObject() \u0026\u0026 thatType.isObject()) {\n         return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n     }\n     return thisType.getNativeType(JSTypeNative.NO_TYPE);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2bc4e294e28b2cd78e92feafa497261d524bae23": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nFixes regression\n\n*** Original change description ***\n\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\n\u003center reason for rollback\u003e\n\n*** Original change description ***\n\nSimplify the lattice operations a lot by collapsing\nthem into the base JSType implementation.\nThese were becoming really hard to reason about because of\nall the virtual method dispatch.\n\nR\u003djohnlenz\nDELTA\u003d208  (5 added, 201 deleted, 2 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d327\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@721 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/20/11, 7:44 PM",
      "commitName": "2bc4e294e28b2cd78e92feafa497261d524bae23",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "1/20/11, 2:40 PM",
      "commitNameOld": "69d9533d7d152a8aa8e401d567131fe7da25013d",
      "commitAuthorOld": "carlanton@google.com",
      "daysBetweenCommits": 0.21,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "static JSType getGreatestSubtype(JSType thisType, JSType thatType) {\n    if (thisType.isUnknownType() || thatType.isUnknownType()) {\n        return thisType.isEquivalentTo(thatType) ? thisType : thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);\n    } else if (thisType.isSubtype(thatType)) {\n        return thisType;\n    } else if (thatType.isSubtype(thisType)) {\n        return thatType;\n    } else if (thisType.isUnionType()) {\n        return ((UnionType) thisType).meet(thatType);\n    } else if (thatType.isUnionType()) {\n        return ((UnionType) thatType).meet(thisType);\n    } else if (thisType.isObject() \u0026\u0026 thatType.isObject()) {\n        return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n    }\n    return thisType.getNativeType(JSTypeNative.NO_TYPE);\n}",
      "path": "src/com/google/javascript/rhino/jstype/JSType.java",
      "functionStartLine": 608,
      "functionName": "getGreatestSubtype",
      "functionAnnotation": "",
      "functionDoc": "A generic implementation meant to be used as a helper for common\ngetGreatestSubtype implementations.\n",
      "diff": "@@ -1,18 +1,16 @@\n static JSType getGreatestSubtype(JSType thisType, JSType thatType) {\n-    if (thatType.isEmptyType() || thatType.isAllType()) {\n-        return thatType.getGreatestSubtype(thisType);\n-    } else if (thisType.isUnknownType() || thatType.isUnknownType()) {\n+    if (thisType.isUnknownType() || thatType.isUnknownType()) {\n         return thisType.isEquivalentTo(thatType) ? thisType : thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);\n     } else if (thisType.isSubtype(thatType)) {\n         return thisType;\n     } else if (thatType.isSubtype(thisType)) {\n         return thatType;\n     } else if (thisType.isUnionType()) {\n         return ((UnionType) thisType).meet(thatType);\n     } else if (thatType.isUnionType()) {\n         return ((UnionType) thatType).meet(thisType);\n     } else if (thisType.isObject() \u0026\u0026 thatType.isObject()) {\n         return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n     }\n     return thisType.getNativeType(JSTypeNative.NO_TYPE);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "69d9533d7d152a8aa8e401d567131fe7da25013d": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\n\u003center reason for rollback\u003e\n\n*** Original change description ***\n\nSimplify the lattice operations a lot by collapsing\nthem into the base JSType implementation.\nThese were becoming really hard to reason about because of\nall the virtual method dispatch.\n\nR\u003dankit\nDELTA\u003d200  (199 added, 0 deleted, 1 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d323\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@716 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/20/11, 2:40 PM",
      "commitName": "69d9533d7d152a8aa8e401d567131fe7da25013d",
      "commitAuthor": "carlanton@google.com",
      "commitDateOld": "1/20/11, 12:59 PM",
      "commitNameOld": "0bc5bc535ebb3afbe081961db35302a670b07781",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "static JSType getGreatestSubtype(JSType thisType, JSType thatType) {\n    if (thatType.isEmptyType() || thatType.isAllType()) {\n        return thatType.getGreatestSubtype(thisType);\n    } else if (thisType.isUnknownType() || thatType.isUnknownType()) {\n        return thisType.isEquivalentTo(thatType) ? thisType : thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);\n    } else if (thisType.isSubtype(thatType)) {\n        return thisType;\n    } else if (thatType.isSubtype(thisType)) {\n        return thatType;\n    } else if (thisType.isUnionType()) {\n        return ((UnionType) thisType).meet(thatType);\n    } else if (thatType.isUnionType()) {\n        return ((UnionType) thatType).meet(thisType);\n    } else if (thisType.isObject() \u0026\u0026 thatType.isObject()) {\n        return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n    }\n    return thisType.getNativeType(JSTypeNative.NO_TYPE);\n}",
      "path": "src/com/google/javascript/rhino/jstype/JSType.java",
      "functionStartLine": 614,
      "functionName": "getGreatestSubtype",
      "functionAnnotation": "",
      "functionDoc": "A generic implementation meant to be used as a helper for common\ngetGreatestSubtype implementations.\n",
      "diff": "@@ -1,16 +1,18 @@\n static JSType getGreatestSubtype(JSType thisType, JSType thatType) {\n-    if (thisType.isUnknownType() || thatType.isUnknownType()) {\n+    if (thatType.isEmptyType() || thatType.isAllType()) {\n+        return thatType.getGreatestSubtype(thisType);\n+    } else if (thisType.isUnknownType() || thatType.isUnknownType()) {\n         return thisType.isEquivalentTo(thatType) ? thisType : thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);\n     } else if (thisType.isSubtype(thatType)) {\n         return thisType;\n     } else if (thatType.isSubtype(thisType)) {\n         return thatType;\n     } else if (thisType.isUnionType()) {\n         return ((UnionType) thisType).meet(thatType);\n     } else if (thatType.isUnionType()) {\n         return ((UnionType) thatType).meet(thisType);\n     } else if (thisType.isObject() \u0026\u0026 thatType.isObject()) {\n         return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n     }\n     return thisType.getNativeType(JSTypeNative.NO_TYPE);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0bc5bc535ebb3afbe081961db35302a670b07781": {
      "type": "Ybodychange",
      "commitMessage": "\nSimplify the lattice operations a lot by collapsing\nthem into the base JSType implementation.\nThese were becoming really hard to reason about because of\nall the virtual method dispatch.\n\nR\u003djohnlenz\nDELTA\u003d200  (0 added, 199 deleted, 1 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d322\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@715 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/20/11, 12:59 PM",
      "commitName": "0bc5bc535ebb3afbe081961db35302a670b07781",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "1/18/11, 5:02 PM",
      "commitNameOld": "11bd742011d67590031dba6e9d1f7186393b38a0",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 1.83,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "static JSType getGreatestSubtype(JSType thisType, JSType thatType) {\n    if (thisType.isUnknownType() || thatType.isUnknownType()) {\n        return thisType.isEquivalentTo(thatType) ? thisType : thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);\n    } else if (thisType.isSubtype(thatType)) {\n        return thisType;\n    } else if (thatType.isSubtype(thisType)) {\n        return thatType;\n    } else if (thisType.isUnionType()) {\n        return ((UnionType) thisType).meet(thatType);\n    } else if (thatType.isUnionType()) {\n        return ((UnionType) thatType).meet(thisType);\n    } else if (thisType.isObject() \u0026\u0026 thatType.isObject()) {\n        return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n    }\n    return thisType.getNativeType(JSTypeNative.NO_TYPE);\n}",
      "path": "src/com/google/javascript/rhino/jstype/JSType.java",
      "functionStartLine": 608,
      "functionName": "getGreatestSubtype",
      "functionAnnotation": "",
      "functionDoc": "A generic implementation meant to be used as a helper for common\ngetGreatestSubtype implementations.\n",
      "diff": "@@ -1,18 +1,16 @@\n static JSType getGreatestSubtype(JSType thisType, JSType thatType) {\n-    if (thatType.isEmptyType() || thatType.isAllType()) {\n-        return thatType.getGreatestSubtype(thisType);\n-    } else if (thisType.isUnknownType() || thatType.isUnknownType()) {\n+    if (thisType.isUnknownType() || thatType.isUnknownType()) {\n         return thisType.isEquivalentTo(thatType) ? thisType : thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);\n     } else if (thisType.isSubtype(thatType)) {\n         return thisType;\n     } else if (thatType.isSubtype(thisType)) {\n         return thatType;\n     } else if (thisType.isUnionType()) {\n         return ((UnionType) thisType).meet(thatType);\n     } else if (thatType.isUnionType()) {\n         return ((UnionType) thatType).meet(thisType);\n     } else if (thisType.isObject() \u0026\u0026 thatType.isObject()) {\n         return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n     }\n     return thisType.getNativeType(JSTypeNative.NO_TYPE);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "cf5fd88f13f0b11625ac407f85cb58b36862e173": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/05/25 by nicksantos\n\n        start moving away from using Object#equals for type equality.\n\n        R\u003djohnlenz\n        DELTA\u003d445  (98 added, 3 deleted, 344 changed)\n\nChange on 2010/05/25 by acleung\n\n        Fix bug with resolving a member function of a resolved constructor.\n\n        R\u003djohnlenz\n        DELTA\u003d48  (48 added, 0 deleted, 0 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d12002\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@231 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/26/10, 8:26 AM",
      "commitName": "cf5fd88f13f0b11625ac407f85cb58b36862e173",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "5/4/10, 7:39 AM",
      "commitNameOld": "58c3e4ce1d17ec619bcc4964bdeebc676f93567d",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 22.03,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "actualSource": "static JSType getGreatestSubtype(JSType thisType, JSType thatType) {\n    if (thatType.isEmptyType() || thatType.isAllType()) {\n        return thatType.getGreatestSubtype(thisType);\n    } else if (thisType.isUnknownType() || thatType.isUnknownType()) {\n        return thisType.isEquivalentTo(thatType) ? thisType : thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);\n    } else if (thisType.isSubtype(thatType)) {\n        return thisType;\n    } else if (thatType.isSubtype(thisType)) {\n        return thatType;\n    } else if (thisType.isUnionType()) {\n        return ((UnionType) thisType).meet(thatType);\n    } else if (thatType.isUnionType()) {\n        return ((UnionType) thatType).meet(thisType);\n    } else if (thisType.isObject() \u0026\u0026 thatType.isObject()) {\n        return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n    }\n    return thisType.getNativeType(JSTypeNative.NO_TYPE);\n}",
      "path": "src/com/google/javascript/rhino/jstype/JSType.java",
      "functionStartLine": 586,
      "functionName": "getGreatestSubtype",
      "functionAnnotation": "",
      "functionDoc": "A generic implementation meant to be used as a helper for common\ngetGreatestSubtype implementations.\n",
      "diff": "@@ -1,18 +1,18 @@\n static JSType getGreatestSubtype(JSType thisType, JSType thatType) {\n     if (thatType.isEmptyType() || thatType.isAllType()) {\n         return thatType.getGreatestSubtype(thisType);\n     } else if (thisType.isUnknownType() || thatType.isUnknownType()) {\n-        return thisType.equals(thatType) ? thisType : thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);\n+        return thisType.isEquivalentTo(thatType) ? thisType : thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);\n     } else if (thisType.isSubtype(thatType)) {\n         return thisType;\n     } else if (thatType.isSubtype(thisType)) {\n         return thatType;\n     } else if (thisType.isUnionType()) {\n         return ((UnionType) thisType).meet(thatType);\n     } else if (thatType.isUnionType()) {\n         return ((UnionType) thatType).meet(thisType);\n     } else if (thisType.isObject() \u0026\u0026 thatType.isObject()) {\n         return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n     }\n     return thisType.getNativeType(JSTypeNative.NO_TYPE);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1be1c2636ef14071afa7da5cb8988972bd90149f": {
      "type": "Ybodychange",
      "commitMessage": "Fix getGreatestSubtype for UnionTypes by always returning the meet of\nthe two types. (Andrew)\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@112 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/22/10, 11:05 AM",
      "commitName": "1be1c2636ef14071afa7da5cb8988972bd90149f",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "1/26/10, 1:59 PM",
      "commitNameOld": "bca9abb0e3062d373fe52c0e8340337588c05708",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 26.88,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "actualSource": "static JSType getGreatestSubtype(JSType thisType, JSType thatType) {\n    if (thatType.isEmptyType() || thatType.isAllType()) {\n        return thatType.getGreatestSubtype(thisType);\n    } else if (thisType.isUnknownType() || thatType.isUnknownType()) {\n        return thisType.equals(thatType) ? thisType : thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);\n    } else if (thisType.isSubtype(thatType)) {\n        return thisType;\n    } else if (thatType.isSubtype(thisType)) {\n        return thatType;\n    } else if (thisType.isUnionType()) {\n        return ((UnionType) thisType).meet(thatType);\n    } else if (thatType.isUnionType()) {\n        return ((UnionType) thatType).meet(thisType);\n    } else if (thisType.isObject() \u0026\u0026 thatType.isObject()) {\n        return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n    }\n    return thisType.getNativeType(JSTypeNative.NO_TYPE);\n}",
      "path": "src/com/google/javascript/rhino/jstype/JSType.java",
      "functionStartLine": 577,
      "functionName": "getGreatestSubtype",
      "functionAnnotation": "",
      "functionDoc": "A generic implementation meant to be used as a helper for common\ngetGreatestSubtype implementations.\n",
      "diff": "@@ -1,14 +1,18 @@\n static JSType getGreatestSubtype(JSType thisType, JSType thatType) {\n     if (thatType.isEmptyType() || thatType.isAllType()) {\n         return thatType.getGreatestSubtype(thisType);\n     } else if (thisType.isUnknownType() || thatType.isUnknownType()) {\n         return thisType.equals(thatType) ? thisType : thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);\n     } else if (thisType.isSubtype(thatType)) {\n         return thisType;\n     } else if (thatType.isSubtype(thisType)) {\n         return thatType;\n+    } else if (thisType.isUnionType()) {\n+        return ((UnionType) thisType).meet(thatType);\n+    } else if (thatType.isUnionType()) {\n+        return ((UnionType) thatType).meet(thisType);\n     } else if (thisType.isObject() \u0026\u0026 thatType.isObject()) {\n         return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n     }\n     return thisType.getNativeType(JSTypeNative.NO_TYPE);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,14 @@\n+static JSType getGreatestSubtype(JSType thisType, JSType thatType) {\n+    if (thatType.isEmptyType() || thatType.isAllType()) {\n+        return thatType.getGreatestSubtype(thisType);\n+    } else if (thisType.isUnknownType() || thatType.isUnknownType()) {\n+        return thisType.equals(thatType) ? thisType : thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);\n+    } else if (thisType.isSubtype(thatType)) {\n+        return thisType;\n+    } else if (thatType.isSubtype(thisType)) {\n+        return thatType;\n+    } else if (thisType.isObject() \u0026\u0026 thatType.isObject()) {\n+        return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n+    }\n+    return thisType.getNativeType(JSTypeNative.NO_TYPE);\n+}\n\\ No newline at end of file\n",
      "actualSource": "static JSType getGreatestSubtype(JSType thisType, JSType thatType) {\n    if (thatType.isEmptyType() || thatType.isAllType()) {\n        return thatType.getGreatestSubtype(thisType);\n    } else if (thisType.isUnknownType() || thatType.isUnknownType()) {\n        return thisType.equals(thatType) ? thisType : thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);\n    } else if (thisType.isSubtype(thatType)) {\n        return thisType;\n    } else if (thatType.isSubtype(thisType)) {\n        return thatType;\n    } else if (thisType.isObject() \u0026\u0026 thatType.isObject()) {\n        return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n    }\n    return thisType.getNativeType(JSTypeNative.NO_TYPE);\n}",
      "path": "src/com/google/javascript/rhino/jstype/JSType.java",
      "functionStartLine": 571,
      "functionName": "getGreatestSubtype",
      "functionAnnotation": "",
      "functionDoc": "A generic implementation meant to be used as a helper for common\ngetGreatestSubtype implementations.\n"
    }
  }
}