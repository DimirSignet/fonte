{
  "origin": "codeshovel",
  "repositoryName": "Closure-82b",
  "repositoryPath": "/tmp/Closure-82b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TypeCheck.java",
  "functionName": "shouldTraverse",
  "functionId": "shouldTraverse___t-NodeTraversal__n-Node__parent-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/TypeCheck.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 409,
  "functionEndLine": 435,
  "numCommitsSeen": 32,
  "timeTaken": 2639,
  "changeHistory": [
    "0895c28861ee4a1969acc858f1a703ab11ddc64c",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "0895c28861ee4a1969acc858f1a703ab11ddc64c": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0895c28861ee4a1969acc858f1a703ab11ddc64c": {
      "type": "Ybodychange",
      "commitMessage": "\n\nChange on 2010/06/16 by johnlenz\n\n        Remove unused member variable.\n\n        R\u003dacleung\n        DELTA\u003d17  (0 added, 12 deleted, 5 changed)\n\nChange on 2010/06/16 by acleung\n\n        Make @notypecheck behaves like it is doing typechecking except for reporting errors.\n\n        R\u003djohnlenz\n        DELTA\u003d144  (89 added, 17 deleted, 38 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d28012\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@245 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/17/10, 10:16 AM",
      "commitName": "0895c28861ee4a1969acc858f1a703ab11ddc64c",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "5/3/10, 7:03 AM",
      "commitNameOld": "9147da9979fb00599efd700fa5e0cccfa93d25a5",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 45.13,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "actualSource": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    checkNoTypeCheckSection(n, true);\n    switch(n.getType()) {\n        case Token.FUNCTION:\n            final TypeCheck outerThis \u003d this;\n            final Scope outerScope \u003d t.getScope();\n            final FunctionType functionType \u003d (FunctionType) n.getJSType();\n            final String functionPrivateName \u003d n.getFirstChild().getString();\n            if (functionPrivateName !\u003d null \u0026\u0026 functionPrivateName.length() \u003e 0 \u0026\u0026 outerScope.isDeclared(functionPrivateName, false) \u0026\u0026 !(outerScope.getVar(functionPrivateName).getType() instanceof FunctionType)) {\n                report(t, n, FUNCTION_MASKS_VARIABLE, functionPrivateName);\n            }\n            break;\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 406,
      "functionName": "shouldTraverse",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,27 +1,15 @@\n public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-    JSDocInfo info;\n+    checkNoTypeCheckSection(n, true);\n     switch(n.getType()) {\n-        case Token.SCRIPT:\n-        case Token.VAR:\n-            info \u003d n.getJSDocInfo();\n-            if (info !\u003d null \u0026\u0026 info.isNoTypeCheck()) {\n-                return false;\n-            }\n-            break;\n         case Token.FUNCTION:\n-            info \u003d n.getJSDocInfo();\n-            info \u003d (info \u003d\u003d null) ? parent.getJSDocInfo() : info;\n-            if (info !\u003d null \u0026\u0026 info.isNoTypeCheck()) {\n-                return false;\n-            }\n             final TypeCheck outerThis \u003d this;\n             final Scope outerScope \u003d t.getScope();\n             final FunctionType functionType \u003d (FunctionType) n.getJSType();\n             final String functionPrivateName \u003d n.getFirstChild().getString();\n             if (functionPrivateName !\u003d null \u0026\u0026 functionPrivateName.length() \u003e 0 \u0026\u0026 outerScope.isDeclared(functionPrivateName, false) \u0026\u0026 !(outerScope.getVar(functionPrivateName).getType() instanceof FunctionType)) {\n-                t.report(n, FUNCTION_MASKS_VARIABLE, functionPrivateName);\n+                report(t, n, FUNCTION_MASKS_VARIABLE, functionPrivateName);\n             }\n             break;\n     }\n     return true;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,27 @@\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+    JSDocInfo info;\n+    switch(n.getType()) {\n+        case Token.SCRIPT:\n+        case Token.VAR:\n+            info \u003d n.getJSDocInfo();\n+            if (info !\u003d null \u0026\u0026 info.isNoTypeCheck()) {\n+                return false;\n+            }\n+            break;\n+        case Token.FUNCTION:\n+            info \u003d n.getJSDocInfo();\n+            info \u003d (info \u003d\u003d null) ? parent.getJSDocInfo() : info;\n+            if (info !\u003d null \u0026\u0026 info.isNoTypeCheck()) {\n+                return false;\n+            }\n+            final TypeCheck outerThis \u003d this;\n+            final Scope outerScope \u003d t.getScope();\n+            final FunctionType functionType \u003d (FunctionType) n.getJSType();\n+            final String functionPrivateName \u003d n.getFirstChild().getString();\n+            if (functionPrivateName !\u003d null \u0026\u0026 functionPrivateName.length() \u003e 0 \u0026\u0026 outerScope.isDeclared(functionPrivateName, false) \u0026\u0026 !(outerScope.getVar(functionPrivateName).getType() instanceof FunctionType)) {\n+                t.report(n, FUNCTION_MASKS_VARIABLE, functionPrivateName);\n+            }\n+            break;\n+    }\n+    return true;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    JSDocInfo info;\n    switch(n.getType()) {\n        case Token.SCRIPT:\n        case Token.VAR:\n            info \u003d n.getJSDocInfo();\n            if (info !\u003d null \u0026\u0026 info.isNoTypeCheck()) {\n                return false;\n            }\n            break;\n        case Token.FUNCTION:\n            info \u003d n.getJSDocInfo();\n            info \u003d (info \u003d\u003d null) ? parent.getJSDocInfo() : info;\n            if (info !\u003d null \u0026\u0026 info.isNoTypeCheck()) {\n                return false;\n            }\n            final TypeCheck outerThis \u003d this;\n            final Scope outerScope \u003d t.getScope();\n            final FunctionType functionType \u003d (FunctionType) n.getJSType();\n            final String functionPrivateName \u003d n.getFirstChild().getString();\n            if (functionPrivateName !\u003d null \u0026\u0026 functionPrivateName.length() \u003e 0 \u0026\u0026 outerScope.isDeclared(functionPrivateName, false) \u0026\u0026 !(outerScope.getVar(functionPrivateName).getType() instanceof FunctionType)) {\n                t.report(n, FUNCTION_MASKS_VARIABLE, functionPrivateName);\n            }\n            break;\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 354,
      "functionName": "shouldTraverse",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}