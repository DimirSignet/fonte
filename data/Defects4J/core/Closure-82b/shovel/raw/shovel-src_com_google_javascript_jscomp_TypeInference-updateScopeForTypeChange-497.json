{
  "origin": "codeshovel",
  "repositoryName": "Closure-82b",
  "repositoryPath": "/tmp/Closure-82b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TypeInference.java",
  "functionName": "updateScopeForTypeChange",
  "functionId": "updateScopeForTypeChange___scope-FlowScope__left-Node__leftType-JSType__resultType-JSType",
  "sourceFilePath": "src/com/google/javascript/jscomp/TypeInference.java",
  "functionAnnotation": "",
  "functionDoc": "Updates the scope according to the result of a type change, like\nan assignment or a type cast.\n",
  "functionStartLine": 497,
  "functionEndLine": 543,
  "numCommitsSeen": 42,
  "timeTaken": 2655,
  "changeHistory": [
    "f78e933dbc678936ed5fcf453ab3c80b87d1e59d",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "f78e933dbc678936ed5fcf453ab3c80b87d1e59d": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f78e933dbc678936ed5fcf453ab3c80b87d1e59d": {
      "type": "Ybodychange",
      "commitMessage": "Don\u0027t do local type inference on local vars that are assigned in inner\nscopes, because it\u0027s pretty close to impossible to do it right.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@84 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/1/10, 4:09 PM",
      "commitName": "f78e933dbc678936ed5fcf453ab3c80b87d1e59d",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "1/28/10, 1:52 PM",
      "commitNameOld": "52ecbc65e981b9f169466f8898155bc5f8bfad7a",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 4.1,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private void updateScopeForTypeChange(FlowScope scope, Node left, JSType leftType, JSType resultType) {\n    Preconditions.checkNotNull(resultType);\n    switch(left.getType()) {\n        case Token.NAME:\n            String varName \u003d left.getString();\n            Var var \u003d syntacticScope.getVar(varName);\n            if (var !\u003d null \u0026\u0026 var.isLocal() \u0026\u0026 var.getScope() !\u003d syntacticScope) {\n                assignedOuterLocalVars.put(var.getScope(), var);\n            }\n            boolean isVarDeclaration \u003d left.hasChildren();\n            if (!isVarDeclaration || var \u003d\u003d null || var.isTypeInferred()) {\n                redeclare(scope, varName, resultType);\n            }\n            left.setJSType(isVarDeclaration || leftType \u003d\u003d null ? resultType : null);\n            if (var !\u003d null \u0026\u0026 var.isTypeInferred()) {\n                JSType oldType \u003d var.getType();\n                var.setType(oldType \u003d\u003d null ? resultType : oldType.getLeastSupertype(resultType));\n            }\n            break;\n        case Token.GETPROP:\n            String qualifiedName \u003d left.getQualifiedName();\n            if (qualifiedName !\u003d null) {\n                scope.inferQualifiedSlot(qualifiedName, leftType \u003d\u003d null ? getNativeType(UNKNOWN_TYPE) : leftType, resultType);\n            }\n            left.setJSType(resultType);\n            ensurePropertyDefined(left, resultType);\n            break;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 487,
      "functionName": "updateScopeForTypeChange",
      "functionAnnotation": "",
      "functionDoc": "Updates the scope according to the result of a type change, like\nan assignment or a type cast.\n",
      "diff": "@@ -1,26 +1,29 @@\n private void updateScopeForTypeChange(FlowScope scope, Node left, JSType leftType, JSType resultType) {\n     Preconditions.checkNotNull(resultType);\n     switch(left.getType()) {\n         case Token.NAME:\n             String varName \u003d left.getString();\n             Var var \u003d syntacticScope.getVar(varName);\n+            if (var !\u003d null \u0026\u0026 var.isLocal() \u0026\u0026 var.getScope() !\u003d syntacticScope) {\n+                assignedOuterLocalVars.put(var.getScope(), var);\n+            }\n             boolean isVarDeclaration \u003d left.hasChildren();\n             if (!isVarDeclaration || var \u003d\u003d null || var.isTypeInferred()) {\n                 redeclare(scope, varName, resultType);\n             }\n             left.setJSType(isVarDeclaration || leftType \u003d\u003d null ? resultType : null);\n             if (var !\u003d null \u0026\u0026 var.isTypeInferred()) {\n                 JSType oldType \u003d var.getType();\n                 var.setType(oldType \u003d\u003d null ? resultType : oldType.getLeastSupertype(resultType));\n             }\n             break;\n         case Token.GETPROP:\n             String qualifiedName \u003d left.getQualifiedName();\n             if (qualifiedName !\u003d null) {\n                 scope.inferQualifiedSlot(qualifiedName, leftType \u003d\u003d null ? getNativeType(UNKNOWN_TYPE) : leftType, resultType);\n             }\n             left.setJSType(resultType);\n             ensurePropertyDefined(left, resultType);\n             break;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,26 @@\n+private void updateScopeForTypeChange(FlowScope scope, Node left, JSType leftType, JSType resultType) {\n+    Preconditions.checkNotNull(resultType);\n+    switch(left.getType()) {\n+        case Token.NAME:\n+            String varName \u003d left.getString();\n+            Var var \u003d syntacticScope.getVar(varName);\n+            boolean isVarDeclaration \u003d left.hasChildren();\n+            if (!isVarDeclaration || var \u003d\u003d null || var.isTypeInferred()) {\n+                redeclare(scope, varName, resultType);\n+            }\n+            left.setJSType(isVarDeclaration || leftType \u003d\u003d null ? resultType : null);\n+            if (var !\u003d null \u0026\u0026 var.isTypeInferred()) {\n+                JSType oldType \u003d var.getType();\n+                var.setType(oldType \u003d\u003d null ? resultType : oldType.getLeastSupertype(resultType));\n+            }\n+            break;\n+        case Token.GETPROP:\n+            String qualifiedName \u003d left.getQualifiedName();\n+            if (qualifiedName !\u003d null) {\n+                scope.inferQualifiedSlot(qualifiedName, leftType \u003d\u003d null ? getNativeType(UNKNOWN_TYPE) : leftType, resultType);\n+            }\n+            left.setJSType(resultType);\n+            ensurePropertyDefined(left, resultType);\n+            break;\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void updateScopeForTypeChange(FlowScope scope, Node left, JSType leftType, JSType resultType) {\n    Preconditions.checkNotNull(resultType);\n    switch(left.getType()) {\n        case Token.NAME:\n            String varName \u003d left.getString();\n            Var var \u003d syntacticScope.getVar(varName);\n            boolean isVarDeclaration \u003d left.hasChildren();\n            if (!isVarDeclaration || var \u003d\u003d null || var.isTypeInferred()) {\n                redeclare(scope, varName, resultType);\n            }\n            left.setJSType(isVarDeclaration || leftType \u003d\u003d null ? resultType : null);\n            if (var !\u003d null \u0026\u0026 var.isTypeInferred()) {\n                JSType oldType \u003d var.getType();\n                var.setType(oldType \u003d\u003d null ? resultType : oldType.getLeastSupertype(resultType));\n            }\n            break;\n        case Token.GETPROP:\n            String qualifiedName \u003d left.getQualifiedName();\n            if (qualifiedName !\u003d null) {\n                scope.inferQualifiedSlot(qualifiedName, leftType \u003d\u003d null ? getNativeType(UNKNOWN_TYPE) : leftType, resultType);\n            }\n            left.setJSType(resultType);\n            ensurePropertyDefined(left, resultType);\n            break;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 461,
      "functionName": "updateScopeForTypeChange",
      "functionAnnotation": "",
      "functionDoc": "Updates the scope according to the result of a type change, like\nan assignment or a type cast.\n"
    }
  }
}