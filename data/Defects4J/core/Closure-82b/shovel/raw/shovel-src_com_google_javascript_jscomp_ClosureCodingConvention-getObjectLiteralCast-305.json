{
  "origin": "codeshovel",
  "repositoryName": "Closure-82b",
  "repositoryPath": "/tmp/Closure-82b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ClosureCodingConvention.java",
  "functionName": "getObjectLiteralCast",
  "functionId": "getObjectLiteralCast___t-NodeTraversal__callNode-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 305,
  "functionEndLine": 328,
  "numCommitsSeen": 15,
  "timeTaken": 454,
  "changeHistory": [
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,18 @@\n+@Override\n+public ObjectLiteralCast getObjectLiteralCast(NodeTraversal t, Node callNode) {\n+    Preconditions.checkArgument(callNode.getType() \u003d\u003d Token.CALL);\n+    Node callName \u003d callNode.getFirstChild();\n+    if (!\"goog.reflect.object\".equals(callName.getQualifiedName()) || callName.getChildCount() !\u003d 2) {\n+        return null;\n+    }\n+    Node typeNode \u003d callName.getNext();\n+    if (!typeNode.isQualifiedName()) {\n+        return null;\n+    }\n+    Node objectNode \u003d typeNode.getNext();\n+    if (objectNode.getType() !\u003d Token.OBJECTLIT) {\n+        t.getCompiler().report(JSError.make(t.getSourceName(), callNode, OBJECTLIT_EXPECTED));\n+        return null;\n+    }\n+    return new ObjectLiteralCast(typeNode.getQualifiedName(), typeNode.getNext());\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic ObjectLiteralCast getObjectLiteralCast(NodeTraversal t, Node callNode) {\n    Preconditions.checkArgument(callNode.getType() \u003d\u003d Token.CALL);\n    Node callName \u003d callNode.getFirstChild();\n    if (!\"goog.reflect.object\".equals(callName.getQualifiedName()) || callName.getChildCount() !\u003d 2) {\n        return null;\n    }\n    Node typeNode \u003d callName.getNext();\n    if (!typeNode.isQualifiedName()) {\n        return null;\n    }\n    Node objectNode \u003d typeNode.getNext();\n    if (objectNode.getType() !\u003d Token.OBJECTLIT) {\n        t.getCompiler().report(JSError.make(t.getSourceName(), callNode, OBJECTLIT_EXPECTED));\n        return null;\n    }\n    return new ObjectLiteralCast(typeNode.getQualifiedName(), typeNode.getNext());\n}",
      "path": "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
      "functionStartLine": 306,
      "functionName": "getObjectLiteralCast",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}