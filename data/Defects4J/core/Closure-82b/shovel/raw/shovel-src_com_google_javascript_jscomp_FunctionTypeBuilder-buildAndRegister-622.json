{
  "origin": "codeshovel",
  "repositoryName": "Closure-82b",
  "repositoryPath": "/tmp/Closure-82b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FunctionTypeBuilder.java",
  "functionName": "buildAndRegister",
  "functionId": "buildAndRegister",
  "sourceFilePath": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
  "functionAnnotation": "",
  "functionDoc": "Builds the function type, and puts it in the registry.\n",
  "functionStartLine": 622,
  "functionEndLine": 660,
  "numCommitsSeen": 27,
  "timeTaken": 1109,
  "changeHistory": [
    "e7ad2425c384dcb18a34bec8e147a91c658d5118",
    "465282f1ca28a208b06c47b55fd292d4631c55da",
    "e3bcc1c6e7ce7e9bfc3098cd5bf57774049f5baa",
    "43859717972907dd1ecebd8dca6e05036386e28b",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "e7ad2425c384dcb18a34bec8e147a91c658d5118": "Ybodychange",
    "465282f1ca28a208b06c47b55fd292d4631c55da": "Ybodychange",
    "e3bcc1c6e7ce7e9bfc3098cd5bf57774049f5baa": "Ybodychange",
    "43859717972907dd1ecebd8dca6e05036386e28b": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e7ad2425c384dcb18a34bec8e147a91c658d5118": {
      "type": "Ybodychange",
      "commitMessage": "\nBe a bit better about constructors defined in local scopes on\nglobal objects.\n\nR\u003djohnlenz\nDELTA\u003d74  (72 added, 0 deleted, 2 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d29\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@579 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/30/10, 5:12 PM",
      "commitName": "e7ad2425c384dcb18a34bec8e147a91c658d5118",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "11/12/10, 1:38 PM",
      "commitNameOld": "25904fa3b61c1d6ef494dd7839eae1d1f49ff38d",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 18.15,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "actualSource": "FunctionType buildAndRegister() {\n    if (returnType \u003d\u003d null) {\n        returnType \u003d typeRegistry.getNativeType(UNKNOWN_TYPE);\n    }\n    if (parametersNode \u003d\u003d null) {\n        throw new IllegalStateException(\"All Function types must have params and a return type\");\n    }\n    FunctionType fnType;\n    if (isConstructor) {\n        fnType \u003d getOrCreateConstructor();\n    } else if (isInterface) {\n        fnType \u003d typeRegistry.createInterfaceType(fnName, sourceNode);\n        if (getScopeDeclaredIn().isGlobal() \u0026\u0026 !fnName.isEmpty()) {\n            typeRegistry.declareType(fnName, fnType.getInstanceType());\n        }\n        maybeSetBaseType(fnType);\n    } else {\n        fnType \u003d new FunctionBuilder(typeRegistry).withName(fnName).withSourceNode(sourceNode).withParamsNode(parametersNode).withReturnType(returnType, returnTypeInferred).withTypeOfThis(thisType).withTemplateName(templateTypeName).build();\n        maybeSetBaseType(fnType);\n    }\n    if (implementedInterfaces !\u003d null) {\n        fnType.setImplementedInterfaces(implementedInterfaces);\n    }\n    typeRegistry.clearTemplateTypeName();\n    return fnType;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
      "functionStartLine": 613,
      "functionName": "buildAndRegister",
      "functionAnnotation": "",
      "functionDoc": "Builds the function type, and puts it in the registry.\n",
      "diff": "@@ -1,26 +1,26 @@\n FunctionType buildAndRegister() {\n     if (returnType \u003d\u003d null) {\n         returnType \u003d typeRegistry.getNativeType(UNKNOWN_TYPE);\n     }\n     if (parametersNode \u003d\u003d null) {\n         throw new IllegalStateException(\"All Function types must have params and a return type\");\n     }\n     FunctionType fnType;\n     if (isConstructor) {\n         fnType \u003d getOrCreateConstructor();\n     } else if (isInterface) {\n         fnType \u003d typeRegistry.createInterfaceType(fnName, sourceNode);\n-        if (scope.isGlobal() \u0026\u0026 !fnName.isEmpty()) {\n+        if (getScopeDeclaredIn().isGlobal() \u0026\u0026 !fnName.isEmpty()) {\n             typeRegistry.declareType(fnName, fnType.getInstanceType());\n         }\n         maybeSetBaseType(fnType);\n     } else {\n         fnType \u003d new FunctionBuilder(typeRegistry).withName(fnName).withSourceNode(sourceNode).withParamsNode(parametersNode).withReturnType(returnType, returnTypeInferred).withTypeOfThis(thisType).withTemplateName(templateTypeName).build();\n         maybeSetBaseType(fnType);\n     }\n     if (implementedInterfaces !\u003d null) {\n         fnType.setImplementedInterfaces(implementedInterfaces);\n     }\n     typeRegistry.clearTemplateTypeName();\n     return fnType;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "465282f1ca28a208b06c47b55fd292d4631c55da": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/06/22 by nicksantos\n\n        Inferred return types. \n        Fixes issue 143.\n        I eventually decided that it was wrong for the subtype\u0027s method\n        to affect the supertype\u0027s method, since this will make incremental\n        compilation a lot harder in the long run.\n\n        R\u003dmoedinger\n        DELTA\u003d481  (313 added, 38 deleted, 130 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d34007\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@249 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/22/10, 5:19 PM",
      "commitName": "465282f1ca28a208b06c47b55fd292d4631c55da",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/15/10, 4:45 PM",
      "commitNameOld": "e3bcc1c6e7ce7e9bfc3098cd5bf57774049f5baa",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 68.02,
      "commitsBetweenForRepo": 50,
      "commitsBetweenForFile": 1,
      "actualSource": "FunctionType buildAndRegister() {\n    if (returnType \u003d\u003d null) {\n        returnType \u003d typeRegistry.getNativeType(UNKNOWN_TYPE);\n    }\n    if (parametersNode \u003d\u003d null) {\n        throw new IllegalStateException(\"All Function types must have params and a return type\");\n    }\n    FunctionType fnType;\n    if (isConstructor) {\n        fnType \u003d getOrCreateConstructor();\n    } else if (isInterface) {\n        fnType \u003d typeRegistry.createInterfaceType(fnName, sourceNode);\n        if (scope.isGlobal() \u0026\u0026 !fnName.isEmpty()) {\n            typeRegistry.declareType(fnName, fnType.getInstanceType());\n        }\n        maybeSetBaseType(fnType);\n    } else {\n        fnType \u003d new FunctionBuilder(typeRegistry).withName(fnName).withSourceNode(sourceNode).withParamsNode(parametersNode).withReturnType(returnType, returnTypeInferred).withTypeOfThis(thisType).withTemplateName(templateTypeName).build();\n        maybeSetBaseType(fnType);\n    }\n    if (implementedInterfaces !\u003d null) {\n        fnType.setImplementedInterfaces(implementedInterfaces);\n    }\n    typeRegistry.clearTemplateTypeName();\n    return fnType;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
      "functionStartLine": 503,
      "functionName": "buildAndRegister",
      "functionAnnotation": "",
      "functionDoc": "Builds the function type, and puts it in the registry.\n",
      "diff": "@@ -1,23 +1,26 @@\n FunctionType buildAndRegister() {\n-    if (returnType \u003d\u003d null || parametersNode \u003d\u003d null) {\n+    if (returnType \u003d\u003d null) {\n+        returnType \u003d typeRegistry.getNativeType(UNKNOWN_TYPE);\n+    }\n+    if (parametersNode \u003d\u003d null) {\n         throw new IllegalStateException(\"All Function types must have params and a return type\");\n     }\n     FunctionType fnType;\n     if (isConstructor) {\n         fnType \u003d getOrCreateConstructor();\n     } else if (isInterface) {\n         fnType \u003d typeRegistry.createInterfaceType(fnName, sourceNode);\n         if (scope.isGlobal() \u0026\u0026 !fnName.isEmpty()) {\n             typeRegistry.declareType(fnName, fnType.getInstanceType());\n         }\n         maybeSetBaseType(fnType);\n     } else {\n-        fnType \u003d new FunctionBuilder(typeRegistry).withName(fnName).withSourceNode(sourceNode).withParamsNode(parametersNode).withReturnType(returnType).withTypeOfThis(thisType).withTemplateName(templateTypeName).build();\n+        fnType \u003d new FunctionBuilder(typeRegistry).withName(fnName).withSourceNode(sourceNode).withParamsNode(parametersNode).withReturnType(returnType, returnTypeInferred).withTypeOfThis(thisType).withTemplateName(templateTypeName).build();\n         maybeSetBaseType(fnType);\n     }\n     if (implementedInterfaces !\u003d null) {\n         fnType.setImplementedInterfaces(implementedInterfaces);\n     }\n     typeRegistry.clearTemplateTypeName();\n     return fnType;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e3bcc1c6e7ce7e9bfc3098cd5bf57774049f5baa": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/04/15 by nick\n\n        Move the construction of ArrowTypes out of FunctionType.\n\n        R\u003djohn\n        DELTA\u003d197  (79 added, 27 deleted, 91 changed)\n\nChange on 2010/04/15 by nick\n\n        if a file is marked as an @extern, then make it an extern.\n\n        R\u003drobert\n        DELTA\u003d51  (46 added, 0 deleted, 5 changed)\n\nChange on 2010/04/15 by john\n\n        Maintain source information.\n\n        R\u003dalan\n        DELTA\u003d60  (28 added, 7 deleted, 25 changed)\n\nChange on 2010/04/15 by john\n\n        Fix overly aggressive RegExp check.\n\n        R\u003dalan\n        DELTA\u003d15  (12 added, 0 deleted, 3 changed)\n\nChange on 2010/04/15 by nick\n\n        more fun with function-type building.\n\n        R\u003djohn\n        DELTA\u003d432  (206 added, 142 deleted, 84 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003doqlcyn\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@186 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/15/10, 4:45 PM",
      "commitName": "e3bcc1c6e7ce7e9bfc3098cd5bf57774049f5baa",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/14/10, 4:53 PM",
      "commitNameOld": "43859717972907dd1ecebd8dca6e05036386e28b",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 0.99,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "FunctionType buildAndRegister() {\n    if (returnType \u003d\u003d null || parametersNode \u003d\u003d null) {\n        throw new IllegalStateException(\"All Function types must have params and a return type\");\n    }\n    FunctionType fnType;\n    if (isConstructor) {\n        fnType \u003d getOrCreateConstructor();\n    } else if (isInterface) {\n        fnType \u003d typeRegistry.createInterfaceType(fnName, sourceNode);\n        if (scope.isGlobal() \u0026\u0026 !fnName.isEmpty()) {\n            typeRegistry.declareType(fnName, fnType.getInstanceType());\n        }\n        maybeSetBaseType(fnType);\n    } else {\n        fnType \u003d new FunctionBuilder(typeRegistry).withName(fnName).withSourceNode(sourceNode).withParamsNode(parametersNode).withReturnType(returnType).withTypeOfThis(thisType).withTemplateName(templateTypeName).build();\n        maybeSetBaseType(fnType);\n    }\n    if (implementedInterfaces !\u003d null) {\n        fnType.setImplementedInterfaces(implementedInterfaces);\n    }\n    typeRegistry.clearTemplateTypeName();\n    return fnType;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
      "functionStartLine": 465,
      "functionName": "buildAndRegister",
      "functionAnnotation": "",
      "functionDoc": "Builds the function type, and puts it in the registry.\n",
      "diff": "@@ -1,23 +1,23 @@\n FunctionType buildAndRegister() {\n     if (returnType \u003d\u003d null || parametersNode \u003d\u003d null) {\n         throw new IllegalStateException(\"All Function types must have params and a return type\");\n     }\n     FunctionType fnType;\n     if (isConstructor) {\n         fnType \u003d getOrCreateConstructor();\n     } else if (isInterface) {\n         fnType \u003d typeRegistry.createInterfaceType(fnName, sourceNode);\n         if (scope.isGlobal() \u0026\u0026 !fnName.isEmpty()) {\n             typeRegistry.declareType(fnName, fnType.getInstanceType());\n         }\n         maybeSetBaseType(fnType);\n     } else {\n-        fnType \u003d typeRegistry.createMethodTypeWithTypeTemplate(fnName, sourceNode, parametersNode, returnType, thisType, templateTypeName);\n+        fnType \u003d new FunctionBuilder(typeRegistry).withName(fnName).withSourceNode(sourceNode).withParamsNode(parametersNode).withReturnType(returnType).withTypeOfThis(thisType).withTemplateName(templateTypeName).build();\n         maybeSetBaseType(fnType);\n     }\n     if (implementedInterfaces !\u003d null) {\n         fnType.setImplementedInterfaces(implementedInterfaces);\n     }\n     typeRegistry.clearTemplateTypeName();\n     return fnType;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "43859717972907dd1ecebd8dca6e05036386e28b": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/04/14 by john\n\n        Stop creating specialized Node types for FUNCTION and SCRIPT as the added functionality isn\u0027t used anywhere.\n\n        Also correct some formatting issue with Node (as it won\u0027t need to be merged with anything else anymore).\n\n        R\u003dsteve,robert\n        DELTA\u003d3969  (1913 added, 1925 deleted, 131 changed)\n\nChange on 2010/04/14 by john\n\n        Fix source information in MinimizeExitPoints.\n\n        R\u003drobert\n        DELTA\u003d10  (5 added, 2 deleted, 3 changed)\n\nChange on 2010/04/14 by john\n\n        Maintain source information.\n\n        R\u003dantonio\n        DELTA\u003d17  (11 added, 0 deleted, 6 changed)\n\nChange on 2010/04/14 by john\n\n        Maintain source information through FoldConstants.\n\n        R\u003drobert\n        DELTA\u003d42  (22 added, 0 deleted, 20 changed)\n\nChange on 2010/04/14 by nick\n\n        lock down function type construction\n\n        R\u003djohn\n        DELTA\u003d111  (83 added, 9 deleted, 19 changed)\n\nChange on 2010/04/14 by john\n\n        Fix source info in CollapseProperties.\n\n        R\u003dnick\n        DELTA\u003d17  (8 added, 3 deleted, 6 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dmbevwz\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@184 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/14/10, 4:53 PM",
      "commitName": "43859717972907dd1ecebd8dca6e05036386e28b",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/14/10, 9:15 AM",
      "commitNameOld": "c764a46abf211d4677fadc33f7d466e5b14fa088",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 0.32,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "FunctionType buildAndRegister() {\n    if (returnType \u003d\u003d null || parametersNode \u003d\u003d null) {\n        throw new IllegalStateException(\"All Function types must have params and a return type\");\n    }\n    FunctionType fnType;\n    if (isConstructor) {\n        fnType \u003d getOrCreateConstructor();\n    } else if (isInterface) {\n        fnType \u003d typeRegistry.createInterfaceType(fnName, sourceNode);\n        if (scope.isGlobal() \u0026\u0026 !fnName.isEmpty()) {\n            typeRegistry.declareType(fnName, fnType.getInstanceType());\n        }\n        maybeSetBaseType(fnType);\n    } else {\n        fnType \u003d typeRegistry.createMethodTypeWithTypeTemplate(fnName, sourceNode, parametersNode, returnType, thisType, templateTypeName);\n        maybeSetBaseType(fnType);\n    }\n    if (implementedInterfaces !\u003d null) {\n        fnType.setImplementedInterfaces(implementedInterfaces);\n    }\n    typeRegistry.clearTemplateTypeName();\n    return fnType;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
      "functionStartLine": 464,
      "functionName": "buildAndRegister",
      "functionAnnotation": "",
      "functionDoc": "Builds the function type, and puts it in the registry.\n",
      "diff": "@@ -1,23 +1,23 @@\n FunctionType buildAndRegister() {\n     if (returnType \u003d\u003d null || parametersNode \u003d\u003d null) {\n         throw new IllegalStateException(\"All Function types must have params and a return type\");\n     }\n     FunctionType fnType;\n     if (isConstructor) {\n         fnType \u003d getOrCreateConstructor();\n     } else if (isInterface) {\n         fnType \u003d typeRegistry.createInterfaceType(fnName, sourceNode);\n         if (scope.isGlobal() \u0026\u0026 !fnName.isEmpty()) {\n             typeRegistry.declareType(fnName, fnType.getInstanceType());\n         }\n         maybeSetBaseType(fnType);\n     } else {\n-        fnType \u003d new FunctionType(typeRegistry, fnName, sourceNode, parametersNode, returnType, thisType, templateTypeName);\n+        fnType \u003d typeRegistry.createMethodTypeWithTypeTemplate(fnName, sourceNode, parametersNode, returnType, thisType, templateTypeName);\n         maybeSetBaseType(fnType);\n     }\n     if (implementedInterfaces !\u003d null) {\n         fnType.setImplementedInterfaces(implementedInterfaces);\n     }\n     typeRegistry.clearTemplateTypeName();\n     return fnType;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,23 @@\n+FunctionType buildAndRegister() {\n+    if (returnType \u003d\u003d null || parametersNode \u003d\u003d null) {\n+        throw new IllegalStateException(\"All Function types must have params and a return type\");\n+    }\n+    FunctionType fnType;\n+    if (isConstructor) {\n+        fnType \u003d getOrCreateConstructor();\n+    } else if (isInterface) {\n+        fnType \u003d typeRegistry.createInterfaceType(fnName, sourceNode);\n+        if (scope.isGlobal() \u0026\u0026 !fnName.isEmpty()) {\n+            typeRegistry.declareType(fnName, fnType.getInstanceType());\n+        }\n+        maybeSetBaseType(fnType);\n+    } else {\n+        fnType \u003d new FunctionType(typeRegistry, fnName, sourceNode, parametersNode, returnType, thisType, templateTypeName);\n+        maybeSetBaseType(fnType);\n+    }\n+    if (implementedInterfaces !\u003d null) {\n+        fnType.setImplementedInterfaces(implementedInterfaces);\n+    }\n+    typeRegistry.clearTemplateTypeName();\n+    return fnType;\n+}\n\\ No newline at end of file\n",
      "actualSource": "FunctionType buildAndRegister() {\n    if (returnType \u003d\u003d null || parametersNode \u003d\u003d null) {\n        throw new IllegalStateException(\"All Function types must have params and a return type\");\n    }\n    FunctionType fnType;\n    if (isConstructor) {\n        fnType \u003d getOrCreateConstructor();\n    } else if (isInterface) {\n        fnType \u003d typeRegistry.createInterfaceType(fnName, sourceNode);\n        if (scope.isGlobal() \u0026\u0026 !fnName.isEmpty()) {\n            typeRegistry.declareType(fnName, fnType.getInstanceType());\n        }\n        maybeSetBaseType(fnType);\n    } else {\n        fnType \u003d new FunctionType(typeRegistry, fnName, sourceNode, parametersNode, returnType, thisType, templateTypeName);\n        maybeSetBaseType(fnType);\n    }\n    if (implementedInterfaces !\u003d null) {\n        fnType.setImplementedInterfaces(implementedInterfaces);\n    }\n    typeRegistry.clearTemplateTypeName();\n    return fnType;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
      "functionStartLine": 471,
      "functionName": "buildAndRegister",
      "functionAnnotation": "",
      "functionDoc": "Builds the function type, and puts it in the registry.\n"
    }
  }
}