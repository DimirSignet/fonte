{
  "origin": "codeshovel",
  "repositoryName": "Closure-82b",
  "repositoryPath": "/tmp/Closure-82b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Scope.java",
  "functionName": "declare",
  "functionId": "declare___name-String__nameNode-Node__type-JSType__input-CompilerInput__inferred-boolean",
  "sourceFilePath": "src/com/google/javascript/jscomp/Scope.java",
  "functionAnnotation": "",
  "functionDoc": "Declares a variable.\n\n@param name name of the variable\n@param nameNode the NAME node declaring the variable\n@param type the variable\u0027s type\n@param input the input in which this variable is defined.\n@param inferred Whether this variable\u0027s type is inferred (as opposed\n    to declared).\n",
  "functionStartLine": 386,
  "functionEndLine": 410,
  "numCommitsSeen": 11,
  "timeTaken": 412,
  "changeHistory": [
    "14ddcfdc0b8d1cece3c79221b1870b84f055d419",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "14ddcfdc0b8d1cece3c79221b1870b84f055d419": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "14ddcfdc0b8d1cece3c79221b1870b84f055d419": {
      "type": "Ybodychange",
      "commitMessage": "Change the internal representation of constant variables.\n\nRun inline-variables before smart-name-removal.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@37 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/17/09, 4:20 PM",
      "commitName": "14ddcfdc0b8d1cece3c79221b1870b84f055d419",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/10/09, 11:16 AM",
      "commitNameOld": "78995bf9e88599055a8c4165d89c09dc92a44b30",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 37.21,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "actualSource": "Var declare(String name, Node nameNode, JSType type, CompilerInput input, boolean inferred) {\n    Preconditions.checkState(name !\u003d null \u0026\u0026 name.length() \u003e 0);\n    Preconditions.checkState(vars.get(name) \u003d\u003d null);\n    Var var \u003d new Var(inferred);\n    var.name \u003d name;\n    var.nameNode \u003d nameNode;\n    var.type \u003d type;\n    var.scope \u003d this;\n    var.index \u003d vars.size();\n    var.input \u003d input;\n    JSDocInfo info \u003d NodeUtil.getInfoForNameNode(nameNode);\n    var.isDefine \u003d info !\u003d null \u0026\u0026 info.isDefine();\n    var.info \u003d info;\n    vars.put(name, var);\n    return var;\n}",
      "path": "src/com/google/javascript/jscomp/Scope.java",
      "functionStartLine": 364,
      "functionName": "declare",
      "functionAnnotation": "",
      "functionDoc": "Declares a variable.\n\n@param name name of the variable\n@param nameNode the NAME node declaring the variable\n@param type the variable\u0027s type\n@param input the input in which this variable is defined.\n@param inferred Whether this variable\u0027s type is inferred (as opposed\n    to declared).\n",
      "diff": "@@ -1,17 +1,16 @@\n Var declare(String name, Node nameNode, JSType type, CompilerInput input, boolean inferred) {\n     Preconditions.checkState(name !\u003d null \u0026\u0026 name.length() \u003e 0);\n     Preconditions.checkState(vars.get(name) \u003d\u003d null);\n     Var var \u003d new Var(inferred);\n     var.name \u003d name;\n     var.nameNode \u003d nameNode;\n     var.type \u003d type;\n-    var.referenced \u003d false;\n     var.scope \u003d this;\n     var.index \u003d vars.size();\n     var.input \u003d input;\n     JSDocInfo info \u003d NodeUtil.getInfoForNameNode(nameNode);\n     var.isDefine \u003d info !\u003d null \u0026\u0026 info.isDefine();\n     var.info \u003d info;\n     vars.put(name, var);\n     return var;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,17 @@\n+Var declare(String name, Node nameNode, JSType type, CompilerInput input, boolean inferred) {\n+    Preconditions.checkState(name !\u003d null \u0026\u0026 name.length() \u003e 0);\n+    Preconditions.checkState(vars.get(name) \u003d\u003d null);\n+    Var var \u003d new Var(inferred);\n+    var.name \u003d name;\n+    var.nameNode \u003d nameNode;\n+    var.type \u003d type;\n+    var.referenced \u003d false;\n+    var.scope \u003d this;\n+    var.index \u003d vars.size();\n+    var.input \u003d input;\n+    JSDocInfo info \u003d NodeUtil.getInfoForNameNode(nameNode);\n+    var.isDefine \u003d info !\u003d null \u0026\u0026 info.isDefine();\n+    var.info \u003d info;\n+    vars.put(name, var);\n+    return var;\n+}\n\\ No newline at end of file\n",
      "actualSource": "Var declare(String name, Node nameNode, JSType type, CompilerInput input, boolean inferred) {\n    Preconditions.checkState(name !\u003d null \u0026\u0026 name.length() \u003e 0);\n    Preconditions.checkState(vars.get(name) \u003d\u003d null);\n    Var var \u003d new Var(inferred);\n    var.name \u003d name;\n    var.nameNode \u003d nameNode;\n    var.type \u003d type;\n    var.referenced \u003d false;\n    var.scope \u003d this;\n    var.index \u003d vars.size();\n    var.input \u003d input;\n    JSDocInfo info \u003d NodeUtil.getInfoForNameNode(nameNode);\n    var.isDefine \u003d info !\u003d null \u0026\u0026 info.isDefine();\n    var.info \u003d info;\n    vars.put(name, var);\n    return var;\n}",
      "path": "src/com/google/javascript/jscomp/Scope.java",
      "functionStartLine": 359,
      "functionName": "declare",
      "functionAnnotation": "",
      "functionDoc": "Declares a variable.\n\n@param name name of the variable\n@param nameNode the NAME node declaring the variable\n@param type the variable\u0027s type\n@param input the input in which this variable is defined.\n@param inferred Whether this variable\u0027s type is inferred (as opposed\n    to declared).\n"
    }
  }
}