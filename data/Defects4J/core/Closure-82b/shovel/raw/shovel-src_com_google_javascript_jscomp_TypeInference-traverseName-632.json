{
  "origin": "codeshovel",
  "repositoryName": "Closure-82b",
  "repositoryPath": "/tmp/Closure-82b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TypeInference.java",
  "functionName": "traverseName",
  "functionId": "traverseName___n-Node__scope-FlowScope",
  "sourceFilePath": "src/com/google/javascript/jscomp/TypeInference.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 632,
  "functionEndLine": 671,
  "numCommitsSeen": 42,
  "timeTaken": 2612,
  "changeHistory": [
    "1f5edbcd2b5b09ec59151137e643d9ce75ef1055",
    "c0face2a48665e46f4829f54ee24cfa4cf8d4589",
    "37bc6d41f17d17a822bbcd9aed9f17649a3384fd",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "1f5edbcd2b5b09ec59151137e643d9ce75ef1055": "Ybodychange",
    "c0face2a48665e46f4829f54ee24cfa4cf8d4589": "Ybodychange",
    "37bc6d41f17d17a822bbcd9aed9f17649a3384fd": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1f5edbcd2b5b09ec59151137e643d9ce75ef1055": {
      "type": "Ybodychange",
      "commitMessage": "Fix assorted type system bugs and crashes.\nFixes issue 124 for reals. (nick)\nR\u003dandrew\nDELTA\u003d161  (122 added, 9 deleted, 30 changed)\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@143 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/18/10, 4:07 PM",
      "commitName": "1f5edbcd2b5b09ec59151137e643d9ce75ef1055",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "2/11/10, 1:02 PM",
      "commitNameOld": "1771d2005a441cb87df2a488069f265bd71ed9ee",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 35.09,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "actualSource": "private FlowScope traverseName(Node n, FlowScope scope) {\n    String varName \u003d n.getString();\n    Node value \u003d n.getFirstChild();\n    JSType type \u003d n.getJSType();\n    if (value !\u003d null) {\n        scope \u003d traverse(value, scope);\n        updateScopeForTypeChange(scope, n, n.getJSType(), getJSType(value));\n        return scope;\n    } else {\n        StaticSlot\u003cJSType\u003e var \u003d scope.getSlot(varName);\n        if (var !\u003d null) {\n            boolean isInferred \u003d var.isTypeInferred();\n            boolean unflowable \u003d isInferred \u0026\u0026 unflowableVarNames.contains(varName);\n            boolean nonLocalInferredSlot \u003d isInferred \u0026\u0026 syntacticScope.getParent() !\u003d null \u0026\u0026 var \u003d\u003d syntacticScope.getParent().getSlot(varName);\n            if (!unflowable \u0026\u0026 !nonLocalInferredSlot) {\n                type \u003d var.getType();\n                if (type \u003d\u003d null) {\n                    type \u003d getNativeType(UNKNOWN_TYPE);\n                }\n            }\n        }\n    }\n    n.setJSType(type);\n    return scope;\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 621,
      "functionName": "traverseName",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,20 +1,25 @@\n private FlowScope traverseName(Node n, FlowScope scope) {\n     String varName \u003d n.getString();\n     Node value \u003d n.getFirstChild();\n     JSType type \u003d n.getJSType();\n     if (value !\u003d null) {\n         scope \u003d traverse(value, scope);\n         updateScopeForTypeChange(scope, n, n.getJSType(), getJSType(value));\n         return scope;\n     } else {\n         StaticSlot\u003cJSType\u003e var \u003d scope.getSlot(varName);\n-        if (var !\u003d null \u0026\u0026 !(var.isTypeInferred() \u0026\u0026 unflowableVarNames.contains(varName))) {\n-            type \u003d var.getType();\n-            if (type \u003d\u003d null) {\n-                type \u003d getNativeType(UNKNOWN_TYPE);\n+        if (var !\u003d null) {\n+            boolean isInferred \u003d var.isTypeInferred();\n+            boolean unflowable \u003d isInferred \u0026\u0026 unflowableVarNames.contains(varName);\n+            boolean nonLocalInferredSlot \u003d isInferred \u0026\u0026 syntacticScope.getParent() !\u003d null \u0026\u0026 var \u003d\u003d syntacticScope.getParent().getSlot(varName);\n+            if (!unflowable \u0026\u0026 !nonLocalInferredSlot) {\n+                type \u003d var.getType();\n+                if (type \u003d\u003d null) {\n+                    type \u003d getNativeType(UNKNOWN_TYPE);\n+                }\n             }\n         }\n     }\n     n.setJSType(type);\n     return scope;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c0face2a48665e46f4829f54ee24cfa4cf8d4589": {
      "type": "Ybodychange",
      "commitMessage": "Fix a bug in type inference when there are more than two inner\nfunctions in a local scope.\n\nAdd a --print_pass_graph flag that prints the passes run as a DOT file.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@96 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/8/10, 3:25 PM",
      "commitName": "c0face2a48665e46f4829f54ee24cfa4cf8d4589",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "2/5/10, 10:31 AM",
      "commitNameOld": "d1f25380b5d74c5303533491e36ae4b33a50e2da",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 3.2,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private FlowScope traverseName(Node n, FlowScope scope) {\n    String varName \u003d n.getString();\n    Node value \u003d n.getFirstChild();\n    JSType type \u003d n.getJSType();\n    if (value !\u003d null) {\n        scope \u003d traverse(value, scope);\n        updateScopeForTypeChange(scope, n, n.getJSType(), getJSType(value));\n        return scope;\n    } else {\n        StaticSlot\u003cJSType\u003e var \u003d scope.getSlot(varName);\n        if (var !\u003d null \u0026\u0026 !(var.isTypeInferred() \u0026\u0026 unflowableVarNames.contains(varName))) {\n            type \u003d var.getType();\n            if (type \u003d\u003d null) {\n                type \u003d getNativeType(UNKNOWN_TYPE);\n            }\n        }\n    }\n    n.setJSType(type);\n    return scope;\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 622,
      "functionName": "traverseName",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,20 +1,20 @@\n private FlowScope traverseName(Node n, FlowScope scope) {\n     String varName \u003d n.getString();\n     Node value \u003d n.getFirstChild();\n     JSType type \u003d n.getJSType();\n     if (value !\u003d null) {\n         scope \u003d traverse(value, scope);\n         updateScopeForTypeChange(scope, n, n.getJSType(), getJSType(value));\n         return scope;\n     } else {\n         StaticSlot\u003cJSType\u003e var \u003d scope.getSlot(varName);\n-        if (var !\u003d null) {\n+        if (var !\u003d null \u0026\u0026 !(var.isTypeInferred() \u0026\u0026 unflowableVarNames.contains(varName))) {\n             type \u003d var.getType();\n             if (type \u003d\u003d null) {\n                 type \u003d getNativeType(UNKNOWN_TYPE);\n             }\n         }\n     }\n     n.setJSType(type);\n     return scope;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "37bc6d41f17d17a822bbcd9aed9f17649a3384fd": {
      "type": "Ybodychange",
      "commitMessage": "fix up some more inference-on-inner-functions edge cases.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@92 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/4/10, 1:06 PM",
      "commitName": "37bc6d41f17d17a822bbcd9aed9f17649a3384fd",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "2/1/10, 4:09 PM",
      "commitNameOld": "f78e933dbc678936ed5fcf453ab3c80b87d1e59d",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 2.87,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "private FlowScope traverseName(Node n, FlowScope scope) {\n    String varName \u003d n.getString();\n    Node value \u003d n.getFirstChild();\n    JSType type \u003d n.getJSType();\n    if (value !\u003d null) {\n        scope \u003d traverse(value, scope);\n        updateScopeForTypeChange(scope, n, n.getJSType(), getJSType(value));\n        return scope;\n    } else {\n        StaticSlot\u003cJSType\u003e var \u003d scope.getSlot(varName);\n        if (var !\u003d null) {\n            type \u003d var.getType();\n            if (type \u003d\u003d null) {\n                type \u003d getNativeType(UNKNOWN_TYPE);\n            }\n        }\n    }\n    n.setJSType(type);\n    return scope;\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 617,
      "functionName": "traverseName",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,17 +1,20 @@\n private FlowScope traverseName(Node n, FlowScope scope) {\n     String varName \u003d n.getString();\n     Node value \u003d n.getFirstChild();\n     JSType type \u003d n.getJSType();\n     if (value !\u003d null) {\n         scope \u003d traverse(value, scope);\n         updateScopeForTypeChange(scope, n, n.getJSType(), getJSType(value));\n         return scope;\n     } else {\n         StaticSlot\u003cJSType\u003e var \u003d scope.getSlot(varName);\n         if (var !\u003d null) {\n             type \u003d var.getType();\n+            if (type \u003d\u003d null) {\n+                type \u003d getNativeType(UNKNOWN_TYPE);\n+            }\n         }\n     }\n     n.setJSType(type);\n     return scope;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,17 @@\n+private FlowScope traverseName(Node n, FlowScope scope) {\n+    String varName \u003d n.getString();\n+    Node value \u003d n.getFirstChild();\n+    JSType type \u003d n.getJSType();\n+    if (value !\u003d null) {\n+        scope \u003d traverse(value, scope);\n+        updateScopeForTypeChange(scope, n, n.getJSType(), getJSType(value));\n+        return scope;\n+    } else {\n+        StaticSlot\u003cJSType\u003e var \u003d scope.getSlot(varName);\n+        if (var !\u003d null) {\n+            type \u003d var.getType();\n+        }\n+    }\n+    n.setJSType(type);\n+    return scope;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private FlowScope traverseName(Node n, FlowScope scope) {\n    String varName \u003d n.getString();\n    Node value \u003d n.getFirstChild();\n    JSType type \u003d n.getJSType();\n    if (value !\u003d null) {\n        scope \u003d traverse(value, scope);\n        updateScopeForTypeChange(scope, n, n.getJSType(), getJSType(value));\n        return scope;\n    } else {\n        StaticSlot\u003cJSType\u003e var \u003d scope.getSlot(varName);\n        if (var !\u003d null) {\n            type \u003d var.getType();\n        }\n    }\n    n.setJSType(type);\n    return scope;\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 588,
      "functionName": "traverseName",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}