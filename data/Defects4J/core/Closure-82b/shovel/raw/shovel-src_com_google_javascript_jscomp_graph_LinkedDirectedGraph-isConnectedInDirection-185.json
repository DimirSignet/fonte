{
  "origin": "codeshovel",
  "repositoryName": "Closure-82b",
  "repositoryPath": "/tmp/Closure-82b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LinkedDirectedGraph.java",
  "functionName": "isConnectedInDirection",
  "functionId": "isConnectedInDirection___n1-N__edgeMatcher-Predicate__E____n2-N",
  "sourceFilePath": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 185,
  "functionEndLine": 197,
  "numCommitsSeen": 12,
  "timeTaken": 908,
  "changeHistory": [
    "97bbbffb65eda01aa9b38a5cec43a598afb39070",
    "0d98b3ca84c0b6179b71a9de75b0a2fe42d7343f",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "97bbbffb65eda01aa9b38a5cec43a598afb39070": "Ybodychange",
    "0d98b3ca84c0b6179b71a9de75b0a2fe42d7343f": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange,Yannotationchange)",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "97bbbffb65eda01aa9b38a5cec43a598afb39070": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/05/12 by nick\n\n        simplify how we build source map paths.\n\n        R\u003djoey\n        DELTA\u003d111  (76 added, 4 deleted, 31 changed)\n\nChange on 2010/05/12 by nick\n\n        Use generics magic to clean up the graph code a bit.\n        These changes don\u0027t give the performance improvements that I hoped,\n        but i think they\u0027re good changes anyway.\n\n        R\u003dalan\n        DELTA\u003d253  (69 added, 121 deleted, 63 changed)\n\nChange on 2010/05/12 by nick\n\n        API clean-up: don\u0027t store null return types or parameter-list types.\n\n        R\u003drobert\n        DELTA\u003d195  (89 added, 54 deleted, 52 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003ddzaoho\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@209 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/13/10, 10:46 AM",
      "commitName": "97bbbffb65eda01aa9b38a5cec43a598afb39070",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/2/10, 3:08 PM",
      "commitNameOld": "0d98b3ca84c0b6179b71a9de75b0a2fe42d7343f",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 40.82,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "actualSource": "private boolean isConnectedInDirection(N n1, Predicate\u003cE\u003e edgeMatcher, N n2) {\n    DiGraphNode\u003cN, E\u003e dNode1 \u003d getNodeOrFail(n1);\n    DiGraphNode\u003cN, E\u003e dNode2 \u003d getNodeOrFail(n2);\n    for (DiGraphEdge\u003cN, E\u003e outEdge : dNode1.getOutEdges()) {\n        if (outEdge.getDestination() \u003d\u003d dNode2 \u0026\u0026 edgeMatcher.apply(outEdge.getValue())) {\n            return true;\n        }\n    }\n    return false;\n}",
      "path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
      "functionStartLine": 161,
      "functionName": "isConnectedInDirection",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,16 +1,10 @@\n private boolean isConnectedInDirection(N n1, Predicate\u003cE\u003e edgeMatcher, N n2) {\n-    DiGraphNode\u003cN, E\u003e dNode1 \u003d nodes.get(n1);\n-    if (dNode1 \u003d\u003d null) {\n-        throw new IllegalArgumentException(n1 + \" does not exist in graph\");\n-    }\n-    DiGraphNode\u003cN, E\u003e dNode2 \u003d nodes.get(n2);\n-    if (dNode2 \u003d\u003d null) {\n-        throw new IllegalArgumentException(n1 + \" does not exist in graph\");\n-    }\n+    DiGraphNode\u003cN, E\u003e dNode1 \u003d getNodeOrFail(n1);\n+    DiGraphNode\u003cN, E\u003e dNode2 \u003d getNodeOrFail(n2);\n     for (DiGraphEdge\u003cN, E\u003e outEdge : dNode1.getOutEdges()) {\n         if (outEdge.getDestination() \u003d\u003d dNode2 \u0026\u0026 edgeMatcher.apply(outEdge.getValue())) {\n             return true;\n         }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0d98b3ca84c0b6179b71a9de75b0a2fe42d7343f": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange,Yannotationchange)",
      "commitMessage": "Make sure that NameAnalyzer does not\nremove property assignments done via aliases. (Nick)\nR\u003dantonio\nDELTA\u003d417  (399 added, 9 deleted, 9 changed)\n\nput the graph tests in the graph package. (Nick)\nR\u003dalan\nDELTA\u003d1422  (753 added, 660 deleted, 9 changed)\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dqlondb\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@168 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/2/10, 3:08 PM",
      "commitName": "0d98b3ca84c0b6179b71a9de75b0a2fe42d7343f",
      "commitAuthor": "Nicholas.J.Santos",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Make sure that NameAnalyzer does not\nremove property assignments done via aliases. (Nick)\nR\u003dantonio\nDELTA\u003d417  (399 added, 9 deleted, 9 changed)\n\nput the graph tests in the graph package. (Nick)\nR\u003dalan\nDELTA\u003d1422  (753 added, 660 deleted, 9 changed)\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dqlondb\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@168 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "4/2/10, 3:08 PM",
          "commitName": "0d98b3ca84c0b6179b71a9de75b0a2fe42d7343f",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "2/8/10, 3:25 PM",
          "commitNameOld": "c0face2a48665e46f4829f54ee24cfa4cf8d4589",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 52.95,
          "commitsBetweenForRepo": 71,
          "commitsBetweenForFile": 1,
          "actualSource": "private boolean isConnectedInDirection(N n1, Predicate\u003cE\u003e edgeMatcher, N n2) {\n    DiGraphNode\u003cN, E\u003e dNode1 \u003d nodes.get(n1);\n    if (dNode1 \u003d\u003d null) {\n        throw new IllegalArgumentException(n1 + \" does not exist in graph\");\n    }\n    DiGraphNode\u003cN, E\u003e dNode2 \u003d nodes.get(n2);\n    if (dNode2 \u003d\u003d null) {\n        throw new IllegalArgumentException(n1 + \" does not exist in graph\");\n    }\n    for (DiGraphEdge\u003cN, E\u003e outEdge : dNode1.getOutEdges()) {\n        if (outEdge.getDestination() \u003d\u003d dNode2 \u0026\u0026 edgeMatcher.apply(outEdge.getValue())) {\n            return true;\n        }\n    }\n    return false;\n}",
          "path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
          "functionStartLine": 204,
          "functionName": "isConnectedInDirection",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,17 +1,16 @@\n-@Override\n-public boolean isConnectedInDirection(N n1, N n2) {\n+private boolean isConnectedInDirection(N n1, Predicate\u003cE\u003e edgeMatcher, N n2) {\n     DiGraphNode\u003cN, E\u003e dNode1 \u003d nodes.get(n1);\n     if (dNode1 \u003d\u003d null) {\n         throw new IllegalArgumentException(n1 + \" does not exist in graph\");\n     }\n     DiGraphNode\u003cN, E\u003e dNode2 \u003d nodes.get(n2);\n     if (dNode2 \u003d\u003d null) {\n         throw new IllegalArgumentException(n1 + \" does not exist in graph\");\n     }\n     for (DiGraphEdge\u003cN, E\u003e outEdge : dNode1.getOutEdges()) {\n-        if (outEdge.getDestination() \u003d\u003d dNode2) {\n+        if (outEdge.getDestination() \u003d\u003d dNode2 \u0026\u0026 edgeMatcher.apply(outEdge.getValue())) {\n             return true;\n         }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[n1-N, n2-N]",
            "newValue": "[n1-N, edgeMatcher-Predicate\u003cE\u003e, n2-N]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Make sure that NameAnalyzer does not\nremove property assignments done via aliases. (Nick)\nR\u003dantonio\nDELTA\u003d417  (399 added, 9 deleted, 9 changed)\n\nput the graph tests in the graph package. (Nick)\nR\u003dalan\nDELTA\u003d1422  (753 added, 660 deleted, 9 changed)\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dqlondb\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@168 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "4/2/10, 3:08 PM",
          "commitName": "0d98b3ca84c0b6179b71a9de75b0a2fe42d7343f",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "2/8/10, 3:25 PM",
          "commitNameOld": "c0face2a48665e46f4829f54ee24cfa4cf8d4589",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 52.95,
          "commitsBetweenForRepo": 71,
          "commitsBetweenForFile": 1,
          "actualSource": "private boolean isConnectedInDirection(N n1, Predicate\u003cE\u003e edgeMatcher, N n2) {\n    DiGraphNode\u003cN, E\u003e dNode1 \u003d nodes.get(n1);\n    if (dNode1 \u003d\u003d null) {\n        throw new IllegalArgumentException(n1 + \" does not exist in graph\");\n    }\n    DiGraphNode\u003cN, E\u003e dNode2 \u003d nodes.get(n2);\n    if (dNode2 \u003d\u003d null) {\n        throw new IllegalArgumentException(n1 + \" does not exist in graph\");\n    }\n    for (DiGraphEdge\u003cN, E\u003e outEdge : dNode1.getOutEdges()) {\n        if (outEdge.getDestination() \u003d\u003d dNode2 \u0026\u0026 edgeMatcher.apply(outEdge.getValue())) {\n            return true;\n        }\n    }\n    return false;\n}",
          "path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
          "functionStartLine": 204,
          "functionName": "isConnectedInDirection",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,17 +1,16 @@\n-@Override\n-public boolean isConnectedInDirection(N n1, N n2) {\n+private boolean isConnectedInDirection(N n1, Predicate\u003cE\u003e edgeMatcher, N n2) {\n     DiGraphNode\u003cN, E\u003e dNode1 \u003d nodes.get(n1);\n     if (dNode1 \u003d\u003d null) {\n         throw new IllegalArgumentException(n1 + \" does not exist in graph\");\n     }\n     DiGraphNode\u003cN, E\u003e dNode2 \u003d nodes.get(n2);\n     if (dNode2 \u003d\u003d null) {\n         throw new IllegalArgumentException(n1 + \" does not exist in graph\");\n     }\n     for (DiGraphEdge\u003cN, E\u003e outEdge : dNode1.getOutEdges()) {\n-        if (outEdge.getDestination() \u003d\u003d dNode2) {\n+        if (outEdge.getDestination() \u003d\u003d dNode2 \u0026\u0026 edgeMatcher.apply(outEdge.getValue())) {\n             return true;\n         }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Make sure that NameAnalyzer does not\nremove property assignments done via aliases. (Nick)\nR\u003dantonio\nDELTA\u003d417  (399 added, 9 deleted, 9 changed)\n\nput the graph tests in the graph package. (Nick)\nR\u003dalan\nDELTA\u003d1422  (753 added, 660 deleted, 9 changed)\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dqlondb\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@168 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "4/2/10, 3:08 PM",
          "commitName": "0d98b3ca84c0b6179b71a9de75b0a2fe42d7343f",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "2/8/10, 3:25 PM",
          "commitNameOld": "c0face2a48665e46f4829f54ee24cfa4cf8d4589",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 52.95,
          "commitsBetweenForRepo": 71,
          "commitsBetweenForFile": 1,
          "actualSource": "private boolean isConnectedInDirection(N n1, Predicate\u003cE\u003e edgeMatcher, N n2) {\n    DiGraphNode\u003cN, E\u003e dNode1 \u003d nodes.get(n1);\n    if (dNode1 \u003d\u003d null) {\n        throw new IllegalArgumentException(n1 + \" does not exist in graph\");\n    }\n    DiGraphNode\u003cN, E\u003e dNode2 \u003d nodes.get(n2);\n    if (dNode2 \u003d\u003d null) {\n        throw new IllegalArgumentException(n1 + \" does not exist in graph\");\n    }\n    for (DiGraphEdge\u003cN, E\u003e outEdge : dNode1.getOutEdges()) {\n        if (outEdge.getDestination() \u003d\u003d dNode2 \u0026\u0026 edgeMatcher.apply(outEdge.getValue())) {\n            return true;\n        }\n    }\n    return false;\n}",
          "path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
          "functionStartLine": 204,
          "functionName": "isConnectedInDirection",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,17 +1,16 @@\n-@Override\n-public boolean isConnectedInDirection(N n1, N n2) {\n+private boolean isConnectedInDirection(N n1, Predicate\u003cE\u003e edgeMatcher, N n2) {\n     DiGraphNode\u003cN, E\u003e dNode1 \u003d nodes.get(n1);\n     if (dNode1 \u003d\u003d null) {\n         throw new IllegalArgumentException(n1 + \" does not exist in graph\");\n     }\n     DiGraphNode\u003cN, E\u003e dNode2 \u003d nodes.get(n2);\n     if (dNode2 \u003d\u003d null) {\n         throw new IllegalArgumentException(n1 + \" does not exist in graph\");\n     }\n     for (DiGraphEdge\u003cN, E\u003e outEdge : dNode1.getOutEdges()) {\n-        if (outEdge.getDestination() \u003d\u003d dNode2) {\n+        if (outEdge.getDestination() \u003d\u003d dNode2 \u0026\u0026 edgeMatcher.apply(outEdge.getValue())) {\n             return true;\n         }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yannotationchange",
          "commitMessage": "Make sure that NameAnalyzer does not\nremove property assignments done via aliases. (Nick)\nR\u003dantonio\nDELTA\u003d417  (399 added, 9 deleted, 9 changed)\n\nput the graph tests in the graph package. (Nick)\nR\u003dalan\nDELTA\u003d1422  (753 added, 660 deleted, 9 changed)\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dqlondb\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@168 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "4/2/10, 3:08 PM",
          "commitName": "0d98b3ca84c0b6179b71a9de75b0a2fe42d7343f",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "2/8/10, 3:25 PM",
          "commitNameOld": "c0face2a48665e46f4829f54ee24cfa4cf8d4589",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 52.95,
          "commitsBetweenForRepo": 71,
          "commitsBetweenForFile": 1,
          "actualSource": "private boolean isConnectedInDirection(N n1, Predicate\u003cE\u003e edgeMatcher, N n2) {\n    DiGraphNode\u003cN, E\u003e dNode1 \u003d nodes.get(n1);\n    if (dNode1 \u003d\u003d null) {\n        throw new IllegalArgumentException(n1 + \" does not exist in graph\");\n    }\n    DiGraphNode\u003cN, E\u003e dNode2 \u003d nodes.get(n2);\n    if (dNode2 \u003d\u003d null) {\n        throw new IllegalArgumentException(n1 + \" does not exist in graph\");\n    }\n    for (DiGraphEdge\u003cN, E\u003e outEdge : dNode1.getOutEdges()) {\n        if (outEdge.getDestination() \u003d\u003d dNode2 \u0026\u0026 edgeMatcher.apply(outEdge.getValue())) {\n            return true;\n        }\n    }\n    return false;\n}",
          "path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
          "functionStartLine": 204,
          "functionName": "isConnectedInDirection",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,17 +1,16 @@\n-@Override\n-public boolean isConnectedInDirection(N n1, N n2) {\n+private boolean isConnectedInDirection(N n1, Predicate\u003cE\u003e edgeMatcher, N n2) {\n     DiGraphNode\u003cN, E\u003e dNode1 \u003d nodes.get(n1);\n     if (dNode1 \u003d\u003d null) {\n         throw new IllegalArgumentException(n1 + \" does not exist in graph\");\n     }\n     DiGraphNode\u003cN, E\u003e dNode2 \u003d nodes.get(n2);\n     if (dNode2 \u003d\u003d null) {\n         throw new IllegalArgumentException(n1 + \" does not exist in graph\");\n     }\n     for (DiGraphEdge\u003cN, E\u003e outEdge : dNode1.getOutEdges()) {\n-        if (outEdge.getDestination() \u003d\u003d dNode2) {\n+        if (outEdge.getDestination() \u003d\u003d dNode2 \u0026\u0026 edgeMatcher.apply(outEdge.getValue())) {\n             return true;\n         }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "@Override",
            "newValue": ""
          }
        }
      ]
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,17 @@\n+@Override\n+public boolean isConnectedInDirection(N n1, N n2) {\n+    DiGraphNode\u003cN, E\u003e dNode1 \u003d nodes.get(n1);\n+    if (dNode1 \u003d\u003d null) {\n+        throw new IllegalArgumentException(n1 + \" does not exist in graph\");\n+    }\n+    DiGraphNode\u003cN, E\u003e dNode2 \u003d nodes.get(n2);\n+    if (dNode2 \u003d\u003d null) {\n+        throw new IllegalArgumentException(n1 + \" does not exist in graph\");\n+    }\n+    for (DiGraphEdge\u003cN, E\u003e outEdge : dNode1.getOutEdges()) {\n+        if (outEdge.getDestination() \u003d\u003d dNode2) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic boolean isConnectedInDirection(N n1, N n2) {\n    DiGraphNode\u003cN, E\u003e dNode1 \u003d nodes.get(n1);\n    if (dNode1 \u003d\u003d null) {\n        throw new IllegalArgumentException(n1 + \" does not exist in graph\");\n    }\n    DiGraphNode\u003cN, E\u003e dNode2 \u003d nodes.get(n2);\n    if (dNode2 \u003d\u003d null) {\n        throw new IllegalArgumentException(n1 + \" does not exist in graph\");\n    }\n    for (DiGraphEdge\u003cN, E\u003e outEdge : dNode1.getOutEdges()) {\n        if (outEdge.getDestination() \u003d\u003d dNode2) {\n            return true;\n        }\n    }\n    return false;\n}",
      "path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
      "functionStartLine": 189,
      "functionName": "isConnectedInDirection",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}