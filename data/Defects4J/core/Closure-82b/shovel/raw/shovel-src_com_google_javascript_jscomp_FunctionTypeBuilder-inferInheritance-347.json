{
  "origin": "codeshovel",
  "repositoryName": "Closure-82b",
  "repositoryPath": "/tmp/Closure-82b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FunctionTypeBuilder.java",
  "functionName": "inferInheritance",
  "functionId": "inferInheritance___info-JSDocInfo(annotations-@Nullable)",
  "sourceFilePath": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
  "functionAnnotation": "",
  "functionDoc": "Infer the role of the function (whether it\u0027s a constructor or interface)\nand what it inherits from in JSDocInfo.\n",
  "functionStartLine": 347,
  "functionEndLine": 391,
  "numCommitsSeen": 27,
  "timeTaken": 1095,
  "changeHistory": [
    "5a3b4cb6b7e816aacd0ffd4c71e23da949fe360d",
    "c764a46abf211d4677fadc33f7d466e5b14fa088",
    "4014ddc89c5aa969f6eb3a5445f7b42998c5128d",
    "a2d8936fae3eb0e3873c7f7c0233344c81436404",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "5a3b4cb6b7e816aacd0ffd4c71e23da949fe360d": "Ybodychange",
    "c764a46abf211d4677fadc33f7d466e5b14fa088": "Ybodychange",
    "4014ddc89c5aa969f6eb3a5445f7b42998c5128d": "Ybodychange",
    "a2d8936fae3eb0e3873c7f7c0233344c81436404": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5a3b4cb6b7e816aacd0ffd4c71e23da949fe360d": {
      "type": "Ybodychange",
      "commitMessage": "\nimprove validation for types that are resolved later.\n\nR\u003djohnlenz\nDELTA\u003d192  (166 added, 1 deleted, 25 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d337976\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@486 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/13/10, 2:23 PM",
      "commitName": "5a3b4cb6b7e816aacd0ffd4c71e23da949fe360d",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "9/15/10, 6:25 PM",
      "commitNameOld": "b2202accb3307ad0cd1d1af88fb7ad9463f4b3e3",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 27.83,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "actualSource": "FunctionTypeBuilder inferInheritance(@Nullable JSDocInfo info) {\n    if (info !\u003d null) {\n        isConstructor \u003d info.isConstructor();\n        isInterface \u003d info.isInterface();\n        if (info.hasBaseType()) {\n            if (isConstructor || isInterface) {\n                JSType maybeBaseType \u003d info.getBaseType().evaluate(scope, typeRegistry);\n                if (maybeBaseType !\u003d null \u0026\u0026 maybeBaseType.setValidator(new ExtendedTypeValidator())) {\n                    baseType \u003d (ObjectType) maybeBaseType;\n                }\n            } else {\n                reportWarning(EXTENDS_WITHOUT_TYPEDEF, fnName);\n            }\n        }\n        if (isConstructor || isInterface) {\n            implementedInterfaces \u003d Lists.newArrayList();\n            for (JSTypeExpression t : info.getImplementedInterfaces()) {\n                JSType maybeInterType \u003d t.evaluate(scope, typeRegistry);\n                if (maybeInterType !\u003d null \u0026\u0026 maybeInterType.setValidator(new ImplementedTypeValidator())) {\n                    implementedInterfaces.add((ObjectType) maybeInterType);\n                }\n            }\n            if (baseType !\u003d null) {\n                JSType maybeFunctionType \u003d baseType.getConstructor();\n                if (maybeFunctionType instanceof FunctionType) {\n                    FunctionType functionType \u003d baseType.getConstructor();\n                    Iterables.addAll(implementedInterfaces, functionType.getImplementedInterfaces());\n                }\n            }\n        } else if (info.getImplementedInterfaceCount() \u003e 0) {\n            reportWarning(IMPLEMENTS_WITHOUT_CONSTRUCTOR, fnName);\n        }\n    }\n    return this;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
      "functionStartLine": 318,
      "functionName": "inferInheritance",
      "functionAnnotation": "",
      "functionDoc": "Infer the role of the function (whether it\u0027s a constructor or interface)\nand what it inherits from in JSDocInfo.\n",
      "diff": "@@ -1,37 +1,35 @@\n FunctionTypeBuilder inferInheritance(@Nullable JSDocInfo info) {\n     if (info !\u003d null) {\n         isConstructor \u003d info.isConstructor();\n         isInterface \u003d info.isInterface();\n         if (info.hasBaseType()) {\n             if (isConstructor || isInterface) {\n-                baseType \u003d ObjectType.cast(info.getBaseType().evaluate(scope, typeRegistry));\n-                if (baseType \u003d\u003d null) {\n-                    reportWarning(EXTENDS_NON_OBJECT, fnName, baseType.toString());\n+                JSType maybeBaseType \u003d info.getBaseType().evaluate(scope, typeRegistry);\n+                if (maybeBaseType !\u003d null \u0026\u0026 maybeBaseType.setValidator(new ExtendedTypeValidator())) {\n+                    baseType \u003d (ObjectType) maybeBaseType;\n                 }\n             } else {\n                 reportWarning(EXTENDS_WITHOUT_TYPEDEF, fnName);\n             }\n         }\n         if (isConstructor || isInterface) {\n             implementedInterfaces \u003d Lists.newArrayList();\n             for (JSTypeExpression t : info.getImplementedInterfaces()) {\n-                ObjectType interType \u003d ObjectType.cast(t.evaluate(scope, typeRegistry));\n-                if (interType !\u003d null) {\n-                    implementedInterfaces.add(interType);\n-                } else {\n-                    reportError(BAD_IMPLEMENTED_TYPE, fnName);\n+                JSType maybeInterType \u003d t.evaluate(scope, typeRegistry);\n+                if (maybeInterType !\u003d null \u0026\u0026 maybeInterType.setValidator(new ImplementedTypeValidator())) {\n+                    implementedInterfaces.add((ObjectType) maybeInterType);\n                 }\n             }\n             if (baseType !\u003d null) {\n                 JSType maybeFunctionType \u003d baseType.getConstructor();\n                 if (maybeFunctionType instanceof FunctionType) {\n                     FunctionType functionType \u003d baseType.getConstructor();\n                     Iterables.addAll(implementedInterfaces, functionType.getImplementedInterfaces());\n                 }\n             }\n         } else if (info.getImplementedInterfaceCount() \u003e 0) {\n             reportWarning(IMPLEMENTS_WITHOUT_CONSTRUCTOR, fnName);\n         }\n     }\n     return this;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c764a46abf211d4677fadc33f7d466e5b14fa088": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/04/13 by john\n\n        Here is a crazy thought, let\u0027s not require the JSTypeRegistry during\n        parsing.\n\n        There are basically two changes here:\n        1) The IRFactory was looking for enums to seed the JSTypeRegistry, so\n        we do that when we setup for type interence.\n        2) The JSDocParser was checking the types of @defines objects, now do\n        that during ProcessDefines.\n\n        R\u003drobert,mark\n        DELTA\u003d207  (82 added, 89 deleted, 36 changed)\n\nChange on 2010/04/14 by nick\n\n        Add a debugging function for JSType hashcodes.\n        i found this useful, and thought others might too.\n\n        R\u003djohn\n        DELTA\u003d69  (69 added, 0 deleted, 0 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dfqsoxx\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@183 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/14/10, 9:15 AM",
      "commitName": "c764a46abf211d4677fadc33f7d466e5b14fa088",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "3/11/10, 9:31 PM",
      "commitNameOld": "7bfdbd9164601af44d17edd51be829fde2cc51aa",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 33.45,
      "commitsBetweenForRepo": 47,
      "commitsBetweenForFile": 1,
      "actualSource": "FunctionTypeBuilder inferInheritance(@Nullable JSDocInfo info) {\n    if (info !\u003d null) {\n        isConstructor \u003d info.isConstructor();\n        isInterface \u003d info.isInterface();\n        if (info.hasBaseType()) {\n            if (isConstructor || isInterface) {\n                baseType \u003d ObjectType.cast(info.getBaseType().evaluate(scope, typeRegistry));\n                if (baseType \u003d\u003d null) {\n                    reportWarning(EXTENDS_NON_OBJECT, fnName, baseType.toString());\n                }\n            } else {\n                reportWarning(EXTENDS_WITHOUT_TYPEDEF, fnName);\n            }\n        }\n        if (isConstructor || isInterface) {\n            implementedInterfaces \u003d Lists.newArrayList();\n            for (JSTypeExpression t : info.getImplementedInterfaces()) {\n                ObjectType interType \u003d ObjectType.cast(t.evaluate(scope, typeRegistry));\n                if (interType !\u003d null) {\n                    implementedInterfaces.add(interType);\n                } else {\n                    reportError(BAD_IMPLEMENTED_TYPE, fnName);\n                }\n            }\n            if (baseType !\u003d null) {\n                JSType maybeFunctionType \u003d baseType.getConstructor();\n                if (maybeFunctionType instanceof FunctionType) {\n                    FunctionType functionType \u003d baseType.getConstructor();\n                    Iterables.addAll(implementedInterfaces, functionType.getImplementedInterfaces());\n                }\n            }\n        } else if (info.getImplementedInterfaceCount() \u003e 0) {\n            reportWarning(IMPLEMENTS_WITHOUT_CONSTRUCTOR, fnName);\n        }\n    }\n    return this;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
      "functionStartLine": 211,
      "functionName": "inferInheritance",
      "functionAnnotation": "",
      "functionDoc": "Infer the role of the function (whether it\u0027s a constructor or interface)\nand what it inherits from in JSDocInfo.\n",
      "diff": "@@ -1,37 +1,37 @@\n FunctionTypeBuilder inferInheritance(@Nullable JSDocInfo info) {\n     if (info !\u003d null) {\n         isConstructor \u003d info.isConstructor();\n         isInterface \u003d info.isInterface();\n         if (info.hasBaseType()) {\n             if (isConstructor || isInterface) {\n-                baseType \u003d ObjectType.cast(info.getBaseType().evaluate(scope));\n+                baseType \u003d ObjectType.cast(info.getBaseType().evaluate(scope, typeRegistry));\n                 if (baseType \u003d\u003d null) {\n                     reportWarning(EXTENDS_NON_OBJECT, fnName, baseType.toString());\n                 }\n             } else {\n                 reportWarning(EXTENDS_WITHOUT_TYPEDEF, fnName);\n             }\n         }\n         if (isConstructor || isInterface) {\n             implementedInterfaces \u003d Lists.newArrayList();\n             for (JSTypeExpression t : info.getImplementedInterfaces()) {\n-                ObjectType interType \u003d ObjectType.cast(t.evaluate(scope));\n+                ObjectType interType \u003d ObjectType.cast(t.evaluate(scope, typeRegistry));\n                 if (interType !\u003d null) {\n                     implementedInterfaces.add(interType);\n                 } else {\n                     reportError(BAD_IMPLEMENTED_TYPE, fnName);\n                 }\n             }\n             if (baseType !\u003d null) {\n                 JSType maybeFunctionType \u003d baseType.getConstructor();\n                 if (maybeFunctionType instanceof FunctionType) {\n                     FunctionType functionType \u003d baseType.getConstructor();\n                     Iterables.addAll(implementedInterfaces, functionType.getImplementedInterfaces());\n                 }\n             }\n         } else if (info.getImplementedInterfaceCount() \u003e 0) {\n             reportWarning(IMPLEMENTS_WITHOUT_CONSTRUCTOR, fnName);\n         }\n     }\n     return this;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4014ddc89c5aa969f6eb3a5445f7b42998c5128d": {
      "type": "Ybodychange",
      "commitMessage": "Make the interfaces API a bit less specific.\n\nRemove a bad type annotation from Math.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@56 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/4/10, 2:42 PM",
      "commitName": "4014ddc89c5aa969f6eb3a5445f7b42998c5128d",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "12/15/09, 1:52 PM",
      "commitNameOld": "a2d8936fae3eb0e3873c7f7c0233344c81436404",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 20.03,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "actualSource": "FunctionTypeBuilder inferInheritance(@Nullable JSDocInfo info) {\n    if (info !\u003d null) {\n        isConstructor \u003d info.isConstructor();\n        isInterface \u003d info.isInterface();\n        if (info.hasBaseType()) {\n            if (isConstructor || isInterface) {\n                baseType \u003d ObjectType.cast(info.getBaseType().evaluate(scope));\n                if (baseType \u003d\u003d null) {\n                    reportWarning(EXTENDS_NON_OBJECT, fnName, baseType.toString());\n                }\n            } else {\n                reportWarning(EXTENDS_WITHOUT_TYPEDEF, fnName);\n            }\n        }\n        if (isConstructor || isInterface) {\n            implementedInterfaces \u003d Lists.newArrayList();\n            for (JSTypeExpression t : info.getImplementedInterfaces()) {\n                ObjectType interType \u003d ObjectType.cast(t.evaluate(scope));\n                if (interType !\u003d null) {\n                    implementedInterfaces.add(interType);\n                } else {\n                    reportError(BAD_IMPLEMENTED_TYPE, fnName);\n                }\n            }\n            if (baseType !\u003d null) {\n                JSType maybeFunctionType \u003d baseType.getConstructor();\n                if (maybeFunctionType instanceof FunctionType) {\n                    FunctionType functionType \u003d baseType.getConstructor();\n                    Iterables.addAll(implementedInterfaces, functionType.getImplementedInterfaces());\n                }\n            }\n        } else if (info.getImplementedInterfaceCount() \u003e 0) {\n            reportWarning(IMPLEMENTS_WITHOUT_CONSTRUCTOR, fnName);\n        }\n    }\n    return this;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
      "functionStartLine": 211,
      "functionName": "inferInheritance",
      "functionAnnotation": "",
      "functionDoc": "Infer the role of the function (whether it\u0027s a constructor or interface)\nand what it inherits from in JSDocInfo.\n",
      "diff": "@@ -1,37 +1,37 @@\n FunctionTypeBuilder inferInheritance(@Nullable JSDocInfo info) {\n     if (info !\u003d null) {\n         isConstructor \u003d info.isConstructor();\n         isInterface \u003d info.isInterface();\n         if (info.hasBaseType()) {\n             if (isConstructor || isInterface) {\n                 baseType \u003d ObjectType.cast(info.getBaseType().evaluate(scope));\n                 if (baseType \u003d\u003d null) {\n                     reportWarning(EXTENDS_NON_OBJECT, fnName, baseType.toString());\n                 }\n             } else {\n                 reportWarning(EXTENDS_WITHOUT_TYPEDEF, fnName);\n             }\n         }\n         if (isConstructor || isInterface) {\n             implementedInterfaces \u003d Lists.newArrayList();\n             for (JSTypeExpression t : info.getImplementedInterfaces()) {\n                 ObjectType interType \u003d ObjectType.cast(t.evaluate(scope));\n                 if (interType !\u003d null) {\n                     implementedInterfaces.add(interType);\n                 } else {\n                     reportError(BAD_IMPLEMENTED_TYPE, fnName);\n                 }\n             }\n             if (baseType !\u003d null) {\n                 JSType maybeFunctionType \u003d baseType.getConstructor();\n                 if (maybeFunctionType instanceof FunctionType) {\n                     FunctionType functionType \u003d baseType.getConstructor();\n-                    implementedInterfaces.addAll(functionType.getImplementedInterfaces());\n+                    Iterables.addAll(implementedInterfaces, functionType.getImplementedInterfaces());\n                 }\n             }\n         } else if (info.getImplementedInterfaceCount() \u003e 0) {\n             reportWarning(IMPLEMENTS_WITHOUT_CONSTRUCTOR, fnName);\n         }\n     }\n     return this;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a2d8936fae3eb0e3873c7f7c0233344c81436404": {
      "type": "Ybodychange",
      "commitMessage": "Add warnings for functions that are ambiguously defined on different\nbrowsers.\n\nAdd better support for Caja.\n\nRollback the change to CoalesceVariableNames, because it had problems.\n\nInternal type system refactoring.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@33 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/15/09, 1:52 PM",
      "commitName": "a2d8936fae3eb0e3873c7f7c0233344c81436404",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/11/09, 11:05 AM",
      "commitNameOld": "6a36f04485599820ff86441accee002b4deec2eb",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 34.12,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "actualSource": "FunctionTypeBuilder inferInheritance(@Nullable JSDocInfo info) {\n    if (info !\u003d null) {\n        isConstructor \u003d info.isConstructor();\n        isInterface \u003d info.isInterface();\n        if (info.hasBaseType()) {\n            if (isConstructor || isInterface) {\n                baseType \u003d ObjectType.cast(info.getBaseType().evaluate(scope));\n                if (baseType \u003d\u003d null) {\n                    reportWarning(EXTENDS_NON_OBJECT, fnName, baseType.toString());\n                }\n            } else {\n                reportWarning(EXTENDS_WITHOUT_TYPEDEF, fnName);\n            }\n        }\n        if (isConstructor || isInterface) {\n            implementedInterfaces \u003d Lists.newArrayList();\n            for (JSTypeExpression t : info.getImplementedInterfaces()) {\n                ObjectType interType \u003d ObjectType.cast(t.evaluate(scope));\n                if (interType !\u003d null) {\n                    implementedInterfaces.add(interType);\n                } else {\n                    reportError(BAD_IMPLEMENTED_TYPE, fnName);\n                }\n            }\n            if (baseType !\u003d null) {\n                JSType maybeFunctionType \u003d baseType.getConstructor();\n                if (maybeFunctionType instanceof FunctionType) {\n                    FunctionType functionType \u003d baseType.getConstructor();\n                    implementedInterfaces.addAll(functionType.getImplementedInterfaces());\n                }\n            }\n        } else if (info.getImplementedInterfaceCount() \u003e 0) {\n            reportWarning(IMPLEMENTS_WITHOUT_CONSTRUCTOR, fnName);\n        }\n    }\n    return this;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
      "functionStartLine": 210,
      "functionName": "inferInheritance",
      "functionAnnotation": "",
      "functionDoc": "Infer the role of the function (whether it\u0027s a constructor or interface)\nand what it inherits from in JSDocInfo.\n",
      "diff": "@@ -1,39 +1,37 @@\n FunctionTypeBuilder inferInheritance(@Nullable JSDocInfo info) {\n     if (info !\u003d null) {\n         isConstructor \u003d info.isConstructor();\n         isInterface \u003d info.isInterface();\n         if (info.hasBaseType()) {\n             if (isConstructor || isInterface) {\n-                JSType maybeBaseType \u003d info.getBaseType().evaluate(scope);\n-                if (maybeBaseType instanceof ObjectType) {\n-                    baseType \u003d (ObjectType) maybeBaseType;\n-                } else {\n-                    reportWarning(EXTENDS_NON_OBJECT, fnName, maybeBaseType.toString());\n+                baseType \u003d ObjectType.cast(info.getBaseType().evaluate(scope));\n+                if (baseType \u003d\u003d null) {\n+                    reportWarning(EXTENDS_NON_OBJECT, fnName, baseType.toString());\n                 }\n             } else {\n                 reportWarning(EXTENDS_WITHOUT_TYPEDEF, fnName);\n             }\n         }\n         if (isConstructor || isInterface) {\n             implementedInterfaces \u003d Lists.newArrayList();\n             for (JSTypeExpression t : info.getImplementedInterfaces()) {\n-                JSType interType \u003d t.evaluate(scope);\n-                if (interType instanceof ObjectType) {\n-                    implementedInterfaces.add((ObjectType) interType);\n+                ObjectType interType \u003d ObjectType.cast(t.evaluate(scope));\n+                if (interType !\u003d null) {\n+                    implementedInterfaces.add(interType);\n                 } else {\n                     reportError(BAD_IMPLEMENTED_TYPE, fnName);\n                 }\n             }\n             if (baseType !\u003d null) {\n                 JSType maybeFunctionType \u003d baseType.getConstructor();\n                 if (maybeFunctionType instanceof FunctionType) {\n                     FunctionType functionType \u003d baseType.getConstructor();\n                     implementedInterfaces.addAll(functionType.getImplementedInterfaces());\n                 }\n             }\n         } else if (info.getImplementedInterfaceCount() \u003e 0) {\n             reportWarning(IMPLEMENTS_WITHOUT_CONSTRUCTOR, fnName);\n         }\n     }\n     return this;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,39 @@\n+FunctionTypeBuilder inferInheritance(@Nullable JSDocInfo info) {\n+    if (info !\u003d null) {\n+        isConstructor \u003d info.isConstructor();\n+        isInterface \u003d info.isInterface();\n+        if (info.hasBaseType()) {\n+            if (isConstructor || isInterface) {\n+                JSType maybeBaseType \u003d info.getBaseType().evaluate(scope);\n+                if (maybeBaseType instanceof ObjectType) {\n+                    baseType \u003d (ObjectType) maybeBaseType;\n+                } else {\n+                    reportWarning(EXTENDS_NON_OBJECT, fnName, maybeBaseType.toString());\n+                }\n+            } else {\n+                reportWarning(EXTENDS_WITHOUT_TYPEDEF, fnName);\n+            }\n+        }\n+        if (isConstructor || isInterface) {\n+            implementedInterfaces \u003d Lists.newArrayList();\n+            for (JSTypeExpression t : info.getImplementedInterfaces()) {\n+                JSType interType \u003d t.evaluate(scope);\n+                if (interType instanceof ObjectType) {\n+                    implementedInterfaces.add((ObjectType) interType);\n+                } else {\n+                    reportError(BAD_IMPLEMENTED_TYPE, fnName);\n+                }\n+            }\n+            if (baseType !\u003d null) {\n+                JSType maybeFunctionType \u003d baseType.getConstructor();\n+                if (maybeFunctionType instanceof FunctionType) {\n+                    FunctionType functionType \u003d baseType.getConstructor();\n+                    implementedInterfaces.addAll(functionType.getImplementedInterfaces());\n+                }\n+            }\n+        } else if (info.getImplementedInterfaceCount() \u003e 0) {\n+            reportWarning(IMPLEMENTS_WITHOUT_CONSTRUCTOR, fnName);\n+        }\n+    }\n+    return this;\n+}\n\\ No newline at end of file\n",
      "actualSource": "FunctionTypeBuilder inferInheritance(@Nullable JSDocInfo info) {\n    if (info !\u003d null) {\n        isConstructor \u003d info.isConstructor();\n        isInterface \u003d info.isInterface();\n        if (info.hasBaseType()) {\n            if (isConstructor || isInterface) {\n                JSType maybeBaseType \u003d info.getBaseType().evaluate(scope);\n                if (maybeBaseType instanceof ObjectType) {\n                    baseType \u003d (ObjectType) maybeBaseType;\n                } else {\n                    reportWarning(EXTENDS_NON_OBJECT, fnName, maybeBaseType.toString());\n                }\n            } else {\n                reportWarning(EXTENDS_WITHOUT_TYPEDEF, fnName);\n            }\n        }\n        if (isConstructor || isInterface) {\n            implementedInterfaces \u003d Lists.newArrayList();\n            for (JSTypeExpression t : info.getImplementedInterfaces()) {\n                JSType interType \u003d t.evaluate(scope);\n                if (interType instanceof ObjectType) {\n                    implementedInterfaces.add((ObjectType) interType);\n                } else {\n                    reportError(BAD_IMPLEMENTED_TYPE, fnName);\n                }\n            }\n            if (baseType !\u003d null) {\n                JSType maybeFunctionType \u003d baseType.getConstructor();\n                if (maybeFunctionType instanceof FunctionType) {\n                    FunctionType functionType \u003d baseType.getConstructor();\n                    implementedInterfaces.addAll(functionType.getImplementedInterfaces());\n                }\n            }\n        } else if (info.getImplementedInterfaceCount() \u003e 0) {\n            reportWarning(IMPLEMENTS_WITHOUT_CONSTRUCTOR, fnName);\n        }\n    }\n    return this;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
      "functionStartLine": 211,
      "functionName": "inferInheritance",
      "functionAnnotation": "",
      "functionDoc": "Infer the role of the function (whether it\u0027s a constructor or interface)\nand what it inherits from in JSDocInfo.\n"
    }
  }
}