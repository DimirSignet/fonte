{
  "origin": "codeshovel",
  "repositoryName": "Closure-82b",
  "repositoryPath": "/tmp/Closure-82b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TypeCheck.java",
  "functionName": "visitFunction",
  "functionId": "visitFunction___t-NodeTraversal__n-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/TypeCheck.java",
  "functionAnnotation": "",
  "functionDoc": "Visits a {@link Token#FUNCTION} node.\n\n@param t The node traversal object that supplies context, such as the\nscope chain to use in name lookups as well as error reporting.\n@param n The node being visited.\n",
  "functionStartLine": 1410,
  "functionEndLine": 1447,
  "numCommitsSeen": 32,
  "timeTaken": 2800,
  "changeHistory": [
    "0895c28861ee4a1969acc858f1a703ab11ddc64c",
    "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4",
    "a2d8936fae3eb0e3873c7f7c0233344c81436404",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "0895c28861ee4a1969acc858f1a703ab11ddc64c": "Ybodychange",
    "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4": "Ybodychange",
    "a2d8936fae3eb0e3873c7f7c0233344c81436404": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0895c28861ee4a1969acc858f1a703ab11ddc64c": {
      "type": "Ybodychange",
      "commitMessage": "\n\nChange on 2010/06/16 by johnlenz\n\n        Remove unused member variable.\n\n        R\u003dacleung\n        DELTA\u003d17  (0 added, 12 deleted, 5 changed)\n\nChange on 2010/06/16 by acleung\n\n        Make @notypecheck behaves like it is doing typechecking except for reporting errors.\n\n        R\u003djohnlenz\n        DELTA\u003d144  (89 added, 17 deleted, 38 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d28012\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@245 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/17/10, 10:16 AM",
      "commitName": "0895c28861ee4a1969acc858f1a703ab11ddc64c",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "5/3/10, 7:03 AM",
      "commitNameOld": "9147da9979fb00599efd700fa5e0cccfa93d25a5",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 45.13,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "actualSource": "private void visitFunction(NodeTraversal t, Node n) {\n    JSDocInfo info \u003d n.getJSDocInfo();\n    FunctionType functionType \u003d (FunctionType) n.getJSType();\n    String functionPrivateName \u003d n.getFirstChild().getString();\n    if (functionType.isInterface() || functionType.isConstructor()) {\n        FunctionType baseConstructor \u003d functionType.getPrototype().getImplicitPrototype().getConstructor();\n        if (baseConstructor !\u003d null \u0026\u0026 baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 (baseConstructor.isConstructor() \u0026\u0026 functionType.isInterface() || baseConstructor.isInterface() \u0026\u0026 functionType.isConstructor())) {\n            compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n        }\n        for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n            boolean badImplementedType \u003d false;\n            ObjectType baseInterfaceObj \u003d ObjectType.cast(baseInterface);\n            if (baseInterfaceObj !\u003d null) {\n                FunctionType interfaceConstructor \u003d baseInterfaceObj.getConstructor();\n                if (interfaceConstructor !\u003d null \u0026\u0026 !interfaceConstructor.isInterface()) {\n                    badImplementedType \u003d true;\n                }\n            } else {\n                badImplementedType \u003d true;\n            }\n            if (badImplementedType) {\n                report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n            }\n        }\n        if (functionType.isConstructor()) {\n            validator.expectAllInterfacePropertiesImplemented(functionType);\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1302,
      "functionName": "visitFunction",
      "functionAnnotation": "",
      "functionDoc": "Visits a {@link Token#FUNCTION} node.\n\n@param t The node traversal object that supplies context, such as the\nscope chain to use in name lookups as well as error reporting.\n@param n The node being visited.\n",
      "diff": "@@ -1,29 +1,29 @@\n private void visitFunction(NodeTraversal t, Node n) {\n     JSDocInfo info \u003d n.getJSDocInfo();\n     FunctionType functionType \u003d (FunctionType) n.getJSType();\n     String functionPrivateName \u003d n.getFirstChild().getString();\n     if (functionType.isInterface() || functionType.isConstructor()) {\n         FunctionType baseConstructor \u003d functionType.getPrototype().getImplicitPrototype().getConstructor();\n         if (baseConstructor !\u003d null \u0026\u0026 baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 (baseConstructor.isConstructor() \u0026\u0026 functionType.isInterface() || baseConstructor.isInterface() \u0026\u0026 functionType.isConstructor())) {\n             compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n         }\n         for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n             boolean badImplementedType \u003d false;\n             ObjectType baseInterfaceObj \u003d ObjectType.cast(baseInterface);\n             if (baseInterfaceObj !\u003d null) {\n                 FunctionType interfaceConstructor \u003d baseInterfaceObj.getConstructor();\n                 if (interfaceConstructor !\u003d null \u0026\u0026 !interfaceConstructor.isInterface()) {\n                     badImplementedType \u003d true;\n                 }\n             } else {\n                 badImplementedType \u003d true;\n             }\n             if (badImplementedType) {\n-                t.report(n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n+                report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n             }\n         }\n         if (functionType.isConstructor()) {\n             validator.expectAllInterfacePropertiesImplemented(functionType);\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4": {
      "type": "Ybodychange",
      "commitMessage": "Remove circular dependency between error-reporting and the rest\nof the compiler. (Nick)\nR\u003dalan\nDELTA\u003d152  (27 added, 28 deleted, 97 changed)\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@159 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/29/10, 7:04 AM",
      "commitName": "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "3/11/10, 9:31 PM",
      "commitNameOld": "7bfdbd9164601af44d17edd51be829fde2cc51aa",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 17.36,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "actualSource": "private void visitFunction(NodeTraversal t, Node n) {\n    JSDocInfo info \u003d n.getJSDocInfo();\n    FunctionType functionType \u003d (FunctionType) n.getJSType();\n    String functionPrivateName \u003d n.getFirstChild().getString();\n    if (functionType.isInterface() || functionType.isConstructor()) {\n        FunctionType baseConstructor \u003d functionType.getPrototype().getImplicitPrototype().getConstructor();\n        if (baseConstructor !\u003d null \u0026\u0026 baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 (baseConstructor.isConstructor() \u0026\u0026 functionType.isInterface() || baseConstructor.isInterface() \u0026\u0026 functionType.isConstructor())) {\n            compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n        }\n        for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n            boolean badImplementedType \u003d false;\n            ObjectType baseInterfaceObj \u003d ObjectType.cast(baseInterface);\n            if (baseInterfaceObj !\u003d null) {\n                FunctionType interfaceConstructor \u003d baseInterfaceObj.getConstructor();\n                if (interfaceConstructor !\u003d null \u0026\u0026 !interfaceConstructor.isInterface()) {\n                    badImplementedType \u003d true;\n                }\n            } else {\n                badImplementedType \u003d true;\n            }\n            if (badImplementedType) {\n                t.report(n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n            }\n        }\n        if (functionType.isConstructor()) {\n            validator.expectAllInterfacePropertiesImplemented(functionType);\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1320,
      "functionName": "visitFunction",
      "functionAnnotation": "",
      "functionDoc": "Visits a {@link Token#FUNCTION} node.\n\n@param t The node traversal object that supplies context, such as the\nscope chain to use in name lookups as well as error reporting.\n@param n The node being visited.\n",
      "diff": "@@ -1,29 +1,29 @@\n private void visitFunction(NodeTraversal t, Node n) {\n     JSDocInfo info \u003d n.getJSDocInfo();\n     FunctionType functionType \u003d (FunctionType) n.getJSType();\n     String functionPrivateName \u003d n.getFirstChild().getString();\n     if (functionType.isInterface() || functionType.isConstructor()) {\n         FunctionType baseConstructor \u003d functionType.getPrototype().getImplicitPrototype().getConstructor();\n         if (baseConstructor !\u003d null \u0026\u0026 baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 (baseConstructor.isConstructor() \u0026\u0026 functionType.isInterface() || baseConstructor.isInterface() \u0026\u0026 functionType.isConstructor())) {\n-            compiler.report(JSError.make(t, n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n+            compiler.report(t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n         }\n         for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n             boolean badImplementedType \u003d false;\n             ObjectType baseInterfaceObj \u003d ObjectType.cast(baseInterface);\n             if (baseInterfaceObj !\u003d null) {\n                 FunctionType interfaceConstructor \u003d baseInterfaceObj.getConstructor();\n                 if (interfaceConstructor !\u003d null \u0026\u0026 !interfaceConstructor.isInterface()) {\n                     badImplementedType \u003d true;\n                 }\n             } else {\n                 badImplementedType \u003d true;\n             }\n             if (badImplementedType) {\n                 t.report(n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n             }\n         }\n         if (functionType.isConstructor()) {\n             validator.expectAllInterfacePropertiesImplemented(functionType);\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a2d8936fae3eb0e3873c7f7c0233344c81436404": {
      "type": "Ybodychange",
      "commitMessage": "Add warnings for functions that are ambiguously defined on different\nbrowsers.\n\nAdd better support for Caja.\n\nRollback the change to CoalesceVariableNames, because it had problems.\n\nInternal type system refactoring.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@33 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/15/09, 1:52 PM",
      "commitName": "a2d8936fae3eb0e3873c7f7c0233344c81436404",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/25/09, 6:53 AM",
      "commitNameOld": "3bee5d740c96572faea4b9fb8b632e0e07b13cbb",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 20.29,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "private void visitFunction(NodeTraversal t, Node n) {\n    JSDocInfo info \u003d n.getJSDocInfo();\n    FunctionType functionType \u003d (FunctionType) n.getJSType();\n    String functionPrivateName \u003d n.getFirstChild().getString();\n    if (functionType.isInterface() || functionType.isConstructor()) {\n        FunctionType baseConstructor \u003d functionType.getPrototype().getImplicitPrototype().getConstructor();\n        if (baseConstructor !\u003d null \u0026\u0026 baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 (baseConstructor.isConstructor() \u0026\u0026 functionType.isInterface() || baseConstructor.isInterface() \u0026\u0026 functionType.isConstructor())) {\n            compiler.report(JSError.make(t, n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n        }\n        for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n            boolean badImplementedType \u003d false;\n            ObjectType baseInterfaceObj \u003d ObjectType.cast(baseInterface);\n            if (baseInterfaceObj !\u003d null) {\n                FunctionType interfaceConstructor \u003d baseInterfaceObj.getConstructor();\n                if (interfaceConstructor !\u003d null \u0026\u0026 !interfaceConstructor.isInterface()) {\n                    badImplementedType \u003d true;\n                }\n            } else {\n                badImplementedType \u003d true;\n            }\n            if (badImplementedType) {\n                t.report(n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n            }\n        }\n        if (functionType.isConstructor()) {\n            validator.expectAllInterfacePropertiesImplemented(functionType);\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1289,
      "functionName": "visitFunction",
      "functionAnnotation": "",
      "functionDoc": "Visits a {@link Token#FUNCTION} node.\n\n@param t The node traversal object that supplies context, such as the\nscope chain to use in name lookups as well as error reporting.\n@param n The node being visited.\n",
      "diff": "@@ -1,28 +1,29 @@\n private void visitFunction(NodeTraversal t, Node n) {\n     JSDocInfo info \u003d n.getJSDocInfo();\n     FunctionType functionType \u003d (FunctionType) n.getJSType();\n     String functionPrivateName \u003d n.getFirstChild().getString();\n     if (functionType.isInterface() || functionType.isConstructor()) {\n         FunctionType baseConstructor \u003d functionType.getPrototype().getImplicitPrototype().getConstructor();\n         if (baseConstructor !\u003d null \u0026\u0026 baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 (baseConstructor.isConstructor() \u0026\u0026 functionType.isInterface() || baseConstructor.isInterface() \u0026\u0026 functionType.isConstructor())) {\n             compiler.report(JSError.make(t, n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n         }\n         for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n             boolean badImplementedType \u003d false;\n-            if (baseInterface instanceof ObjectType) {\n-                FunctionType interfaceConstructor \u003d ((ObjectType) baseInterface).getConstructor();\n+            ObjectType baseInterfaceObj \u003d ObjectType.cast(baseInterface);\n+            if (baseInterfaceObj !\u003d null) {\n+                FunctionType interfaceConstructor \u003d baseInterfaceObj.getConstructor();\n                 if (interfaceConstructor !\u003d null \u0026\u0026 !interfaceConstructor.isInterface()) {\n                     badImplementedType \u003d true;\n                 }\n             } else {\n                 badImplementedType \u003d true;\n             }\n             if (badImplementedType) {\n                 t.report(n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n             }\n         }\n         if (functionType.isConstructor()) {\n             validator.expectAllInterfacePropertiesImplemented(functionType);\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,28 @@\n+private void visitFunction(NodeTraversal t, Node n) {\n+    JSDocInfo info \u003d n.getJSDocInfo();\n+    FunctionType functionType \u003d (FunctionType) n.getJSType();\n+    String functionPrivateName \u003d n.getFirstChild().getString();\n+    if (functionType.isInterface() || functionType.isConstructor()) {\n+        FunctionType baseConstructor \u003d functionType.getPrototype().getImplicitPrototype().getConstructor();\n+        if (baseConstructor !\u003d null \u0026\u0026 baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 (baseConstructor.isConstructor() \u0026\u0026 functionType.isInterface() || baseConstructor.isInterface() \u0026\u0026 functionType.isConstructor())) {\n+            compiler.report(JSError.make(t, n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n+        }\n+        for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n+            boolean badImplementedType \u003d false;\n+            if (baseInterface instanceof ObjectType) {\n+                FunctionType interfaceConstructor \u003d ((ObjectType) baseInterface).getConstructor();\n+                if (interfaceConstructor !\u003d null \u0026\u0026 !interfaceConstructor.isInterface()) {\n+                    badImplementedType \u003d true;\n+                }\n+            } else {\n+                badImplementedType \u003d true;\n+            }\n+            if (badImplementedType) {\n+                t.report(n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n+            }\n+        }\n+        if (functionType.isConstructor()) {\n+            validator.expectAllInterfacePropertiesImplemented(functionType);\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void visitFunction(NodeTraversal t, Node n) {\n    JSDocInfo info \u003d n.getJSDocInfo();\n    FunctionType functionType \u003d (FunctionType) n.getJSType();\n    String functionPrivateName \u003d n.getFirstChild().getString();\n    if (functionType.isInterface() || functionType.isConstructor()) {\n        FunctionType baseConstructor \u003d functionType.getPrototype().getImplicitPrototype().getConstructor();\n        if (baseConstructor !\u003d null \u0026\u0026 baseConstructor !\u003d getNativeType(OBJECT_FUNCTION_TYPE) \u0026\u0026 (baseConstructor.isConstructor() \u0026\u0026 functionType.isInterface() || baseConstructor.isInterface() \u0026\u0026 functionType.isConstructor())) {\n            compiler.report(JSError.make(t, n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n        }\n        for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n            boolean badImplementedType \u003d false;\n            if (baseInterface instanceof ObjectType) {\n                FunctionType interfaceConstructor \u003d ((ObjectType) baseInterface).getConstructor();\n                if (interfaceConstructor !\u003d null \u0026\u0026 !interfaceConstructor.isInterface()) {\n                    badImplementedType \u003d true;\n                }\n            } else {\n                badImplementedType \u003d true;\n            }\n            if (badImplementedType) {\n                t.report(n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n            }\n        }\n        if (functionType.isConstructor()) {\n            validator.expectAllInterfacePropertiesImplemented(functionType);\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1290,
      "functionName": "visitFunction",
      "functionAnnotation": "",
      "functionDoc": "Visits a {@link Token#FUNCTION} node.\n\n@param t The node traversal object that supplies context, such as the\nscope chain to use in name lookups as well as error reporting.\n@param n The node being visited.\n"
    }
  }
}