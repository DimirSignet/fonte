{
  "origin": "codeshovel",
  "repositoryName": "Closure-82b",
  "repositoryPath": "/tmp/Closure-82b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FunctionType.java",
  "functionName": "isEquivalentTo",
  "functionId": "isEquivalentTo___otherType-JSType",
  "sourceFilePath": "src/com/google/javascript/rhino/jstype/FunctionType.java",
  "functionAnnotation": "@Override",
  "functionDoc": "Two function types are equal if their signatures match. Since they don\u0027t\nhave signatures, two interfaces are equal if their names match.\n",
  "functionStartLine": 633,
  "functionEndLine": 658,
  "numCommitsSeen": 46,
  "timeTaken": 1590,
  "changeHistory": [
    "cf5fd88f13f0b11625ac407f85cb58b36862e173",
    "3bee5d740c96572faea4b9fb8b632e0e07b13cbb",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "cf5fd88f13f0b11625ac407f85cb58b36862e173": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
    "3bee5d740c96572faea4b9fb8b632e0e07b13cbb": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cf5fd88f13f0b11625ac407f85cb58b36862e173": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
      "commitMessage": "\nChange on 2010/05/25 by nicksantos\n\n        start moving away from using Object#equals for type equality.\n\n        R\u003djohnlenz\n        DELTA\u003d445  (98 added, 3 deleted, 344 changed)\n\nChange on 2010/05/25 by acleung\n\n        Fix bug with resolving a member function of a resolved constructor.\n\n        R\u003djohnlenz\n        DELTA\u003d48  (48 added, 0 deleted, 0 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d12002\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@231 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/26/10, 8:26 AM",
      "commitName": "cf5fd88f13f0b11625ac407f85cb58b36862e173",
      "commitAuthor": "Nicholas.J.Santos",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "\nChange on 2010/05/25 by nicksantos\n\n        start moving away from using Object#equals for type equality.\n\n        R\u003djohnlenz\n        DELTA\u003d445  (98 added, 3 deleted, 344 changed)\n\nChange on 2010/05/25 by acleung\n\n        Fix bug with resolving a member function of a resolved constructor.\n\n        R\u003djohnlenz\n        DELTA\u003d48  (48 added, 0 deleted, 0 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d12002\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@231 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "5/26/10, 8:26 AM",
          "commitName": "cf5fd88f13f0b11625ac407f85cb58b36862e173",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "5/18/10, 10:06 AM",
          "commitNameOld": "a9757e8c7d85f9ee9622b3e5352955ba3429733d",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 7.93,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic boolean isEquivalentTo(JSType otherType) {\n    if (!(otherType instanceof FunctionType)) {\n        return false;\n    }\n    FunctionType that \u003d (FunctionType) otherType;\n    if (!that.isFunctionType()) {\n        return false;\n    }\n    if (this.isConstructor()) {\n        if (that.isConstructor()) {\n            return this \u003d\u003d that;\n        }\n        return false;\n    }\n    if (this.isInterface()) {\n        if (that.isInterface()) {\n            return this.getReferenceName().equals(that.getReferenceName());\n        }\n        return false;\n    }\n    if (that.isInterface()) {\n        return false;\n    }\n    return this.typeOfThis.isEquivalentTo(that.typeOfThis) \u0026\u0026 this.call.isEquivalentTo(that.call);\n}",
          "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
          "functionStartLine": 583,
          "functionName": "isEquivalentTo",
          "functionAnnotation": "@Override",
          "functionDoc": "Two function types are equal if their signatures match. Since they don\u0027t\nhave signatures, two interfaces are equal if their names match.\n",
          "diff": "@@ -1,26 +1,26 @@\n @Override\n-public boolean equals(Object otherType) {\n+public boolean isEquivalentTo(JSType otherType) {\n     if (!(otherType instanceof FunctionType)) {\n         return false;\n     }\n     FunctionType that \u003d (FunctionType) otherType;\n     if (!that.isFunctionType()) {\n         return false;\n     }\n     if (this.isConstructor()) {\n         if (that.isConstructor()) {\n             return this \u003d\u003d that;\n         }\n         return false;\n     }\n     if (this.isInterface()) {\n         if (that.isInterface()) {\n             return this.getReferenceName().equals(that.getReferenceName());\n         }\n         return false;\n     }\n     if (that.isInterface()) {\n         return false;\n     }\n-    return this.typeOfThis.equals(that.typeOfThis) \u0026\u0026 this.call.equals(that.call);\n+    return this.typeOfThis.isEquivalentTo(that.typeOfThis) \u0026\u0026 this.call.isEquivalentTo(that.call);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "equals",
            "newValue": "isEquivalentTo"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "\nChange on 2010/05/25 by nicksantos\n\n        start moving away from using Object#equals for type equality.\n\n        R\u003djohnlenz\n        DELTA\u003d445  (98 added, 3 deleted, 344 changed)\n\nChange on 2010/05/25 by acleung\n\n        Fix bug with resolving a member function of a resolved constructor.\n\n        R\u003djohnlenz\n        DELTA\u003d48  (48 added, 0 deleted, 0 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d12002\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@231 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "5/26/10, 8:26 AM",
          "commitName": "cf5fd88f13f0b11625ac407f85cb58b36862e173",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "5/18/10, 10:06 AM",
          "commitNameOld": "a9757e8c7d85f9ee9622b3e5352955ba3429733d",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 7.93,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic boolean isEquivalentTo(JSType otherType) {\n    if (!(otherType instanceof FunctionType)) {\n        return false;\n    }\n    FunctionType that \u003d (FunctionType) otherType;\n    if (!that.isFunctionType()) {\n        return false;\n    }\n    if (this.isConstructor()) {\n        if (that.isConstructor()) {\n            return this \u003d\u003d that;\n        }\n        return false;\n    }\n    if (this.isInterface()) {\n        if (that.isInterface()) {\n            return this.getReferenceName().equals(that.getReferenceName());\n        }\n        return false;\n    }\n    if (that.isInterface()) {\n        return false;\n    }\n    return this.typeOfThis.isEquivalentTo(that.typeOfThis) \u0026\u0026 this.call.isEquivalentTo(that.call);\n}",
          "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
          "functionStartLine": 583,
          "functionName": "isEquivalentTo",
          "functionAnnotation": "@Override",
          "functionDoc": "Two function types are equal if their signatures match. Since they don\u0027t\nhave signatures, two interfaces are equal if their names match.\n",
          "diff": "@@ -1,26 +1,26 @@\n @Override\n-public boolean equals(Object otherType) {\n+public boolean isEquivalentTo(JSType otherType) {\n     if (!(otherType instanceof FunctionType)) {\n         return false;\n     }\n     FunctionType that \u003d (FunctionType) otherType;\n     if (!that.isFunctionType()) {\n         return false;\n     }\n     if (this.isConstructor()) {\n         if (that.isConstructor()) {\n             return this \u003d\u003d that;\n         }\n         return false;\n     }\n     if (this.isInterface()) {\n         if (that.isInterface()) {\n             return this.getReferenceName().equals(that.getReferenceName());\n         }\n         return false;\n     }\n     if (that.isInterface()) {\n         return false;\n     }\n-    return this.typeOfThis.equals(that.typeOfThis) \u0026\u0026 this.call.equals(that.call);\n+    return this.typeOfThis.isEquivalentTo(that.typeOfThis) \u0026\u0026 this.call.isEquivalentTo(that.call);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[otherType-Object]",
            "newValue": "[otherType-JSType]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nChange on 2010/05/25 by nicksantos\n\n        start moving away from using Object#equals for type equality.\n\n        R\u003djohnlenz\n        DELTA\u003d445  (98 added, 3 deleted, 344 changed)\n\nChange on 2010/05/25 by acleung\n\n        Fix bug with resolving a member function of a resolved constructor.\n\n        R\u003djohnlenz\n        DELTA\u003d48  (48 added, 0 deleted, 0 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d12002\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@231 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "5/26/10, 8:26 AM",
          "commitName": "cf5fd88f13f0b11625ac407f85cb58b36862e173",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "5/18/10, 10:06 AM",
          "commitNameOld": "a9757e8c7d85f9ee9622b3e5352955ba3429733d",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 7.93,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic boolean isEquivalentTo(JSType otherType) {\n    if (!(otherType instanceof FunctionType)) {\n        return false;\n    }\n    FunctionType that \u003d (FunctionType) otherType;\n    if (!that.isFunctionType()) {\n        return false;\n    }\n    if (this.isConstructor()) {\n        if (that.isConstructor()) {\n            return this \u003d\u003d that;\n        }\n        return false;\n    }\n    if (this.isInterface()) {\n        if (that.isInterface()) {\n            return this.getReferenceName().equals(that.getReferenceName());\n        }\n        return false;\n    }\n    if (that.isInterface()) {\n        return false;\n    }\n    return this.typeOfThis.isEquivalentTo(that.typeOfThis) \u0026\u0026 this.call.isEquivalentTo(that.call);\n}",
          "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
          "functionStartLine": 583,
          "functionName": "isEquivalentTo",
          "functionAnnotation": "@Override",
          "functionDoc": "Two function types are equal if their signatures match. Since they don\u0027t\nhave signatures, two interfaces are equal if their names match.\n",
          "diff": "@@ -1,26 +1,26 @@\n @Override\n-public boolean equals(Object otherType) {\n+public boolean isEquivalentTo(JSType otherType) {\n     if (!(otherType instanceof FunctionType)) {\n         return false;\n     }\n     FunctionType that \u003d (FunctionType) otherType;\n     if (!that.isFunctionType()) {\n         return false;\n     }\n     if (this.isConstructor()) {\n         if (that.isConstructor()) {\n             return this \u003d\u003d that;\n         }\n         return false;\n     }\n     if (this.isInterface()) {\n         if (that.isInterface()) {\n             return this.getReferenceName().equals(that.getReferenceName());\n         }\n         return false;\n     }\n     if (that.isInterface()) {\n         return false;\n     }\n-    return this.typeOfThis.equals(that.typeOfThis) \u0026\u0026 this.call.equals(that.call);\n+    return this.typeOfThis.isEquivalentTo(that.typeOfThis) \u0026\u0026 this.call.isEquivalentTo(that.call);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "3bee5d740c96572faea4b9fb8b632e0e07b13cbb": {
      "type": "Ybodychange",
      "commitMessage": "Add a mechanism for inlining local vars, and turn it on by default.\nWarnings for \"ambiguous\" function definitions.\nRefactoring and renaming of some method names.\nUse \"\u003d\" optionality annotation in externs.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@15 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/25/09, 6:53 AM",
      "commitName": "3bee5d740c96572faea4b9fb8b632e0e07b13cbb",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/3/09, 3:51 PM",
      "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 21.63,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic boolean equals(Object otherType) {\n    if (!(otherType instanceof FunctionType)) {\n        return false;\n    }\n    FunctionType that \u003d (FunctionType) otherType;\n    if (!that.isFunctionType()) {\n        return false;\n    }\n    if (this.isConstructor()) {\n        if (that.isConstructor()) {\n            return this \u003d\u003d that;\n        }\n        return false;\n    }\n    if (this.isInterface()) {\n        if (that.isInterface()) {\n            return this.getReferenceName().equals(that.getReferenceName());\n        }\n        return false;\n    }\n    if (that.isInterface()) {\n        return false;\n    }\n    return this.typeOfThis.equals(that.typeOfThis) \u0026\u0026 this.call.equals(that.call);\n}",
      "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
      "functionStartLine": 599,
      "functionName": "equals",
      "functionAnnotation": "@Override",
      "functionDoc": "Two function types are equal if their signatures match. Since they don\u0027t\nhave signatures, two interfaces are equal if their names match.\n",
      "diff": "@@ -1,26 +1,26 @@\n @Override\n public boolean equals(Object otherType) {\n     if (!(otherType instanceof FunctionType)) {\n         return false;\n     }\n     FunctionType that \u003d (FunctionType) otherType;\n     if (!that.isFunctionType()) {\n         return false;\n     }\n     if (this.isConstructor()) {\n         if (that.isConstructor()) {\n             return this \u003d\u003d that;\n         }\n         return false;\n     }\n     if (this.isInterface()) {\n         if (that.isInterface()) {\n-            return this.getName().equals(that.getName());\n+            return this.getReferenceName().equals(that.getReferenceName());\n         }\n         return false;\n     }\n     if (that.isInterface()) {\n         return false;\n     }\n     return this.typeOfThis.equals(that.typeOfThis) \u0026\u0026 this.call.equals(that.call);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,26 @@\n+@Override\n+public boolean equals(Object otherType) {\n+    if (!(otherType instanceof FunctionType)) {\n+        return false;\n+    }\n+    FunctionType that \u003d (FunctionType) otherType;\n+    if (!that.isFunctionType()) {\n+        return false;\n+    }\n+    if (this.isConstructor()) {\n+        if (that.isConstructor()) {\n+            return this \u003d\u003d that;\n+        }\n+        return false;\n+    }\n+    if (this.isInterface()) {\n+        if (that.isInterface()) {\n+            return this.getName().equals(that.getName());\n+        }\n+        return false;\n+    }\n+    if (that.isInterface()) {\n+        return false;\n+    }\n+    return this.typeOfThis.equals(that.typeOfThis) \u0026\u0026 this.call.equals(that.call);\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic boolean equals(Object otherType) {\n    if (!(otherType instanceof FunctionType)) {\n        return false;\n    }\n    FunctionType that \u003d (FunctionType) otherType;\n    if (!that.isFunctionType()) {\n        return false;\n    }\n    if (this.isConstructor()) {\n        if (that.isConstructor()) {\n            return this \u003d\u003d that;\n        }\n        return false;\n    }\n    if (this.isInterface()) {\n        if (that.isInterface()) {\n            return this.getName().equals(that.getName());\n        }\n        return false;\n    }\n    if (that.isInterface()) {\n        return false;\n    }\n    return this.typeOfThis.equals(that.typeOfThis) \u0026\u0026 this.call.equals(that.call);\n}",
      "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
      "functionStartLine": 599,
      "functionName": "equals",
      "functionAnnotation": "@Override",
      "functionDoc": "Two function types are equal if their signatures match. Since they don\u0027t\nhave signatures, two interfaces are equal if their names match.\n"
    }
  }
}