{
  "origin": "codeshovel",
  "repositoryName": "Closure-82b",
  "repositoryPath": "/tmp/Closure-82b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TypeSafeDispatcher.java",
  "functionName": "process",
  "functionId": "process___node-AstNode",
  "sourceFilePath": "src/com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 118,
  "functionEndLine": 281,
  "numCommitsSeen": 6,
  "timeTaken": 335,
  "changeHistory": [
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,152 @@\n+public T process(AstNode node) {\n+    switch(node.getType()) {\n+        case Token.ADD:\n+        case Token.AND:\n+        case Token.BITAND:\n+        case Token.BITOR:\n+        case Token.BITXOR:\n+        case Token.COMMA:\n+        case Token.DIV:\n+        case Token.EQ:\n+        case Token.GE:\n+        case Token.GT:\n+        case Token.IN:\n+        case Token.INSTANCEOF:\n+        case Token.LE:\n+        case Token.LSH:\n+        case Token.LT:\n+        case Token.MOD:\n+        case Token.MUL:\n+        case Token.NE:\n+        case Token.OR:\n+        case Token.RSH:\n+        case Token.SHEQ:\n+        case Token.SHNE:\n+        case Token.SUB:\n+        case Token.URSH:\n+            return processInfixExpression((InfixExpression) node);\n+        case Token.ARRAYLIT:\n+            return processArrayLiteral((ArrayLiteral) node);\n+        case Token.ASSIGN:\n+        case Token.ASSIGN_ADD:\n+        case Token.ASSIGN_BITAND:\n+        case Token.ASSIGN_BITOR:\n+        case Token.ASSIGN_BITXOR:\n+        case Token.ASSIGN_DIV:\n+        case Token.ASSIGN_LSH:\n+        case Token.ASSIGN_MOD:\n+        case Token.ASSIGN_MUL:\n+        case Token.ASSIGN_RSH:\n+        case Token.ASSIGN_SUB:\n+        case Token.ASSIGN_URSH:\n+            return processAssignment((Assignment) node);\n+        case Token.BITNOT:\n+        case Token.DEC:\n+        case Token.DELPROP:\n+        case Token.INC:\n+        case Token.NEG:\n+        case Token.NOT:\n+        case Token.POS:\n+        case Token.TYPEOF:\n+        case Token.VOID:\n+            return processUnaryExpression((UnaryExpression) node);\n+        case Token.BLOCK:\n+            if (node instanceof Block) {\n+                return processBlock((Block) node);\n+            } else if (node instanceof Scope) {\n+                return processScope((Scope) node);\n+            } else {\n+                throw new IllegalStateException(\"Unexpected node type.  class: \" + node.getClass() + \" type: \" + Token.typeToName(node.getType()));\n+            }\n+        case Token.BREAK:\n+            return processBreakStatement((BreakStatement) node);\n+        case Token.CALL:\n+            return processFunctionCall((FunctionCall) node);\n+        case Token.CASE:\n+        case Token.DEFAULT:\n+            return processSwitchCase((SwitchCase) node);\n+        case Token.CATCH:\n+        case Token.FINALLY:\n+            return processCatchClause((CatchClause) node);\n+        case Token.COLON:\n+            return processObjectProperty((ObjectProperty) node);\n+        case Token.CONTINUE:\n+            return processContinueStatement((ContinueStatement) node);\n+        case Token.DO:\n+            return processDoLoop((DoLoop) node);\n+        case Token.EMPTY:\n+            return processEmptyExpression((EmptyExpression) node);\n+        case Token.EXPR_RESULT:\n+        case Token.EXPR_VOID:\n+            if (node instanceof ExpressionStatement) {\n+                return processExpressionStatement((ExpressionStatement) node);\n+            } else if (node instanceof LabeledStatement) {\n+                return processLabeledStatement((LabeledStatement) node);\n+            } else {\n+                throw new IllegalStateException(\"Unexpected node type.  class: \" + node.getClass() + \" type: \" + Token.typeToName(node.getType()));\n+            }\n+        case Token.DEBUGGER:\n+        case Token.FALSE:\n+        case Token.NULL:\n+        case Token.THIS:\n+        case Token.TRUE:\n+            return processKeywordLiteral((KeywordLiteral) node);\n+        case Token.FOR:\n+            if (node instanceof ForInLoop) {\n+                return processForInLoop((ForInLoop) node);\n+            } else if (node instanceof ForLoop) {\n+                return processForLoop((ForLoop) node);\n+            } else {\n+                throw new IllegalStateException(\"Unexpected node type.  class: \" + node.getClass() + \" type: \" + Token.typeToName(node.getType()));\n+            }\n+        case Token.FUNCTION:\n+            return processFunctionNode((FunctionNode) node);\n+        case Token.GETELEM:\n+            return processElementGet((ElementGet) node);\n+        case Token.GETPROP:\n+            return processPropertyGet((PropertyGet) node);\n+        case Token.HOOK:\n+            return processConditionalExpression((ConditionalExpression) node);\n+        case Token.IF:\n+            return processIfStatement((IfStatement) node);\n+        case Token.LABEL:\n+            return processLabel((Label) node);\n+        case Token.LP:\n+            return processParenthesizedExpression((ParenthesizedExpression) node);\n+        case Token.NAME:\n+            return processName((Name) node);\n+        case Token.NEW:\n+            return processNewExpression((NewExpression) node);\n+        case Token.NUMBER:\n+            return processNumberLiteral((NumberLiteral) node);\n+        case Token.OBJECTLIT:\n+            return processObjectLiteral((ObjectLiteral) node);\n+        case Token.REGEXP:\n+            return processRegExpLiteral((RegExpLiteral) node);\n+        case Token.RETURN:\n+            return processReturnStatement((ReturnStatement) node);\n+        case Token.SCRIPT:\n+            return processAstRoot((AstRoot) node);\n+        case Token.STRING:\n+            return processStringLiteral((StringLiteral) node);\n+        case Token.SWITCH:\n+            return processSwitchStatement((SwitchStatement) node);\n+        case Token.THROW:\n+            return processThrowStatement((ThrowStatement) node);\n+        case Token.TRY:\n+            return processTryStatement((TryStatement) node);\n+        case Token.VAR:\n+            if (node instanceof VariableDeclaration) {\n+                return processVariableDeclaration((VariableDeclaration) node);\n+            } else if (node instanceof VariableInitializer) {\n+                return processVariableInitializer((VariableInitializer) node);\n+            } else {\n+                throw new IllegalStateException(\"Unexpected node type.  class: \" + node.getClass() + \" type: \" + Token.typeToName(node.getType()));\n+            }\n+        case Token.WHILE:\n+            return processWhileLoop((WhileLoop) node);\n+        case Token.WITH:\n+            return processWithStatement((WithStatement) node);\n+    }\n+    return processIllegalToken(node);\n+}\n\\ No newline at end of file\n",
      "actualSource": "public T process(AstNode node) {\n    switch(node.getType()) {\n        case Token.ADD:\n        case Token.AND:\n        case Token.BITAND:\n        case Token.BITOR:\n        case Token.BITXOR:\n        case Token.COMMA:\n        case Token.DIV:\n        case Token.EQ:\n        case Token.GE:\n        case Token.GT:\n        case Token.IN:\n        case Token.INSTANCEOF:\n        case Token.LE:\n        case Token.LSH:\n        case Token.LT:\n        case Token.MOD:\n        case Token.MUL:\n        case Token.NE:\n        case Token.OR:\n        case Token.RSH:\n        case Token.SHEQ:\n        case Token.SHNE:\n        case Token.SUB:\n        case Token.URSH:\n            return processInfixExpression((InfixExpression) node);\n        case Token.ARRAYLIT:\n            return processArrayLiteral((ArrayLiteral) node);\n        case Token.ASSIGN:\n        case Token.ASSIGN_ADD:\n        case Token.ASSIGN_BITAND:\n        case Token.ASSIGN_BITOR:\n        case Token.ASSIGN_BITXOR:\n        case Token.ASSIGN_DIV:\n        case Token.ASSIGN_LSH:\n        case Token.ASSIGN_MOD:\n        case Token.ASSIGN_MUL:\n        case Token.ASSIGN_RSH:\n        case Token.ASSIGN_SUB:\n        case Token.ASSIGN_URSH:\n            return processAssignment((Assignment) node);\n        case Token.BITNOT:\n        case Token.DEC:\n        case Token.DELPROP:\n        case Token.INC:\n        case Token.NEG:\n        case Token.NOT:\n        case Token.POS:\n        case Token.TYPEOF:\n        case Token.VOID:\n            return processUnaryExpression((UnaryExpression) node);\n        case Token.BLOCK:\n            if (node instanceof Block) {\n                return processBlock((Block) node);\n            } else if (node instanceof Scope) {\n                return processScope((Scope) node);\n            } else {\n                throw new IllegalStateException(\"Unexpected node type.  class: \" + node.getClass() + \" type: \" + Token.typeToName(node.getType()));\n            }\n        case Token.BREAK:\n            return processBreakStatement((BreakStatement) node);\n        case Token.CALL:\n            return processFunctionCall((FunctionCall) node);\n        case Token.CASE:\n        case Token.DEFAULT:\n            return processSwitchCase((SwitchCase) node);\n        case Token.CATCH:\n        case Token.FINALLY:\n            return processCatchClause((CatchClause) node);\n        case Token.COLON:\n            return processObjectProperty((ObjectProperty) node);\n        case Token.CONTINUE:\n            return processContinueStatement((ContinueStatement) node);\n        case Token.DO:\n            return processDoLoop((DoLoop) node);\n        case Token.EMPTY:\n            return processEmptyExpression((EmptyExpression) node);\n        case Token.EXPR_RESULT:\n        case Token.EXPR_VOID:\n            if (node instanceof ExpressionStatement) {\n                return processExpressionStatement((ExpressionStatement) node);\n            } else if (node instanceof LabeledStatement) {\n                return processLabeledStatement((LabeledStatement) node);\n            } else {\n                throw new IllegalStateException(\"Unexpected node type.  class: \" + node.getClass() + \" type: \" + Token.typeToName(node.getType()));\n            }\n        case Token.DEBUGGER:\n        case Token.FALSE:\n        case Token.NULL:\n        case Token.THIS:\n        case Token.TRUE:\n            return processKeywordLiteral((KeywordLiteral) node);\n        case Token.FOR:\n            if (node instanceof ForInLoop) {\n                return processForInLoop((ForInLoop) node);\n            } else if (node instanceof ForLoop) {\n                return processForLoop((ForLoop) node);\n            } else {\n                throw new IllegalStateException(\"Unexpected node type.  class: \" + node.getClass() + \" type: \" + Token.typeToName(node.getType()));\n            }\n        case Token.FUNCTION:\n            return processFunctionNode((FunctionNode) node);\n        case Token.GETELEM:\n            return processElementGet((ElementGet) node);\n        case Token.GETPROP:\n            return processPropertyGet((PropertyGet) node);\n        case Token.HOOK:\n            return processConditionalExpression((ConditionalExpression) node);\n        case Token.IF:\n            return processIfStatement((IfStatement) node);\n        case Token.LABEL:\n            return processLabel((Label) node);\n        case Token.LP:\n            return processParenthesizedExpression((ParenthesizedExpression) node);\n        case Token.NAME:\n            return processName((Name) node);\n        case Token.NEW:\n            return processNewExpression((NewExpression) node);\n        case Token.NUMBER:\n            return processNumberLiteral((NumberLiteral) node);\n        case Token.OBJECTLIT:\n            return processObjectLiteral((ObjectLiteral) node);\n        case Token.REGEXP:\n            return processRegExpLiteral((RegExpLiteral) node);\n        case Token.RETURN:\n            return processReturnStatement((ReturnStatement) node);\n        case Token.SCRIPT:\n            return processAstRoot((AstRoot) node);\n        case Token.STRING:\n            return processStringLiteral((StringLiteral) node);\n        case Token.SWITCH:\n            return processSwitchStatement((SwitchStatement) node);\n        case Token.THROW:\n            return processThrowStatement((ThrowStatement) node);\n        case Token.TRY:\n            return processTryStatement((TryStatement) node);\n        case Token.VAR:\n            if (node instanceof VariableDeclaration) {\n                return processVariableDeclaration((VariableDeclaration) node);\n            } else if (node instanceof VariableInitializer) {\n                return processVariableInitializer((VariableInitializer) node);\n            } else {\n                throw new IllegalStateException(\"Unexpected node type.  class: \" + node.getClass() + \" type: \" + Token.typeToName(node.getType()));\n            }\n        case Token.WHILE:\n            return processWhileLoop((WhileLoop) node);\n        case Token.WITH:\n            return processWithStatement((WithStatement) node);\n    }\n    return processIllegalToken(node);\n}",
      "path": "src/com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
      "functionStartLine": 119,
      "functionName": "process",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}