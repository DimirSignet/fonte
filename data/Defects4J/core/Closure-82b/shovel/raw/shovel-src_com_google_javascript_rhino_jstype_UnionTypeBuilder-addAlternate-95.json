{
  "origin": "codeshovel",
  "repositoryName": "Closure-82b",
  "repositoryPath": "/tmp/Closure-82b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "UnionTypeBuilder.java",
  "functionName": "addAlternate",
  "functionId": "addAlternate___alternate-JSType",
  "sourceFilePath": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
  "functionAnnotation": "",
  "functionDoc": "Adds an alternate to the union type under construction. Returns this\nfor easy chaining.\n",
  "functionStartLine": 95,
  "functionEndLine": 156,
  "numCommitsSeen": 10,
  "timeTaken": 467,
  "changeHistory": [
    "043a352c2e85815a90a1926d112902d924bab6c1",
    "11bd742011d67590031dba6e9d1f7186393b38a0",
    "6dbca87c463d8a1e229a0d92d5cdf92247fdefde",
    "e829dafb9b3365bda6b6bb80f5fa97783752d143",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "043a352c2e85815a90a1926d112902d924bab6c1": "Ybodychange",
    "11bd742011d67590031dba6e9d1f7186393b38a0": "Ybodychange",
    "6dbca87c463d8a1e229a0d92d5cdf92247fdefde": "Ybodychange",
    "e829dafb9b3365bda6b6bb80f5fa97783752d143": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "043a352c2e85815a90a1926d112902d924bab6c1": {
      "type": "Ybodychange",
      "commitMessage": "\nWhen we can\u0027t find a forward-declared type,\nthat type should resolve to an empty type.\nThis ensures that if someone tries to pass a param or return\nvalue to it, they get a type warning.\nTry #3\n!!!\n\nR\u003djohnlenz\nDELTA\u003d534  (451 added, 37 deleted, 46 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d362\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@731 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/26/11, 8:30 AM",
      "commitName": "043a352c2e85815a90a1926d112902d924bab6c1",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "1/21/11, 1:01 PM",
      "commitNameOld": "5bebea634889ca79649889eaa21205880eb3ad33",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 4.81,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "UnionTypeBuilder addAlternate(JSType alternate) {\n    if (alternate.isNoType()) {\n        return this;\n    }\n    isAllType \u003d isAllType || alternate.isAllType();\n    boolean isAlternateUnknown \u003d alternate instanceof UnknownType;\n    isNativeUnknownType \u003d isNativeUnknownType || isAlternateUnknown;\n    if (isAlternateUnknown) {\n        areAllUnknownsChecked \u003d areAllUnknownsChecked \u0026\u0026 alternate.isCheckedUnknownType();\n    }\n    if (!isAllType \u0026\u0026 !isNativeUnknownType) {\n        if (alternate instanceof UnionType) {\n            UnionType union \u003d (UnionType) alternate;\n            for (JSType unionAlt : union.getAlternates()) {\n                addAlternate(unionAlt);\n            }\n        } else {\n            if (alternates.size() \u003e MAX_UNION_SIZE) {\n                return this;\n            }\n            Iterator\u003cJSType\u003e it \u003d alternates.iterator();\n            while (it.hasNext()) {\n                JSType current \u003d it.next();\n                if (alternate.isUnknownType() || current.isUnknownType() || alternate.isNoResolvedType() || current.isNoResolvedType()) {\n                    if (alternate.isEquivalentTo(current)) {\n                        return this;\n                    }\n                } else {\n                    if (alternate.isSubtype(current)) {\n                        return this;\n                    } else if (current.isSubtype(alternate)) {\n                        it.remove();\n                    }\n                }\n            }\n            alternates.add(alternate);\n            result \u003d null;\n        }\n    } else {\n        result \u003d null;\n    }\n    return this;\n}",
      "path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
      "functionStartLine": 95,
      "functionName": "addAlternate",
      "functionAnnotation": "",
      "functionDoc": "Adds an alternate to the union type under construction. Returns this\nfor easy chaining.\n",
      "diff": "@@ -1,43 +1,43 @@\n UnionTypeBuilder addAlternate(JSType alternate) {\n     if (alternate.isNoType()) {\n         return this;\n     }\n     isAllType \u003d isAllType || alternate.isAllType();\n     boolean isAlternateUnknown \u003d alternate instanceof UnknownType;\n     isNativeUnknownType \u003d isNativeUnknownType || isAlternateUnknown;\n     if (isAlternateUnknown) {\n         areAllUnknownsChecked \u003d areAllUnknownsChecked \u0026\u0026 alternate.isCheckedUnknownType();\n     }\n     if (!isAllType \u0026\u0026 !isNativeUnknownType) {\n         if (alternate instanceof UnionType) {\n             UnionType union \u003d (UnionType) alternate;\n             for (JSType unionAlt : union.getAlternates()) {\n                 addAlternate(unionAlt);\n             }\n         } else {\n             if (alternates.size() \u003e MAX_UNION_SIZE) {\n                 return this;\n             }\n             Iterator\u003cJSType\u003e it \u003d alternates.iterator();\n             while (it.hasNext()) {\n                 JSType current \u003d it.next();\n-                if (alternate.isUnknownType() || current.isUnknownType()) {\n+                if (alternate.isUnknownType() || current.isUnknownType() || alternate.isNoResolvedType() || current.isNoResolvedType()) {\n                     if (alternate.isEquivalentTo(current)) {\n                         return this;\n                     }\n                 } else {\n                     if (alternate.isSubtype(current)) {\n                         return this;\n                     } else if (current.isSubtype(alternate)) {\n                         it.remove();\n                     }\n                 }\n             }\n             alternates.add(alternate);\n             result \u003d null;\n         }\n     } else {\n         result \u003d null;\n     }\n     return this;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "11bd742011d67590031dba6e9d1f7186393b38a0": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nbreaks contacts\n\n*** Original change description ***\n\nWhen we can\u0027t find a forward-declared type,\nthat type should resolve to an empty type.\nThis ensures that if someone tries to pass a param or return\nvalue to it, they get a type warning.\n\nDELTA\u003d461  (37 added, 385 deleted, 39 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d302\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@703 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/18/11, 5:02 PM",
      "commitName": "11bd742011d67590031dba6e9d1f7186393b38a0",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "1/18/11, 3:28 PM",
      "commitNameOld": "6dbca87c463d8a1e229a0d92d5cdf92247fdefde",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "UnionTypeBuilder addAlternate(JSType alternate) {\n    if (alternate.isNoType()) {\n        return this;\n    }\n    isAllType \u003d isAllType || alternate.isAllType();\n    boolean isAlternateUnknown \u003d alternate instanceof UnknownType;\n    isNativeUnknownType \u003d isNativeUnknownType || isAlternateUnknown;\n    if (isAlternateUnknown) {\n        areAllUnknownsChecked \u003d areAllUnknownsChecked \u0026\u0026 alternate.isCheckedUnknownType();\n    }\n    if (!isAllType \u0026\u0026 !isNativeUnknownType) {\n        if (alternate instanceof UnionType) {\n            UnionType union \u003d (UnionType) alternate;\n            for (JSType unionAlt : union.getAlternates()) {\n                addAlternate(unionAlt);\n            }\n        } else {\n            if (alternates.size() \u003e MAX_UNION_SIZE) {\n                return this;\n            }\n            Iterator\u003cJSType\u003e it \u003d alternates.iterator();\n            while (it.hasNext()) {\n                JSType current \u003d it.next();\n                if (alternate.isUnknownType() || current.isUnknownType()) {\n                    if (alternate.isEquivalentTo(current)) {\n                        return this;\n                    }\n                } else {\n                    if (alternate.isSubtype(current)) {\n                        return this;\n                    } else if (current.isSubtype(alternate)) {\n                        it.remove();\n                    }\n                }\n            }\n            alternates.add(alternate);\n            result \u003d null;\n        }\n    } else {\n        result \u003d null;\n    }\n    return this;\n}",
      "path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
      "functionStartLine": 95,
      "functionName": "addAlternate",
      "functionAnnotation": "",
      "functionDoc": "Adds an alternate to the union type under construction. Returns this\nfor easy chaining.\n",
      "diff": "@@ -1,43 +1,43 @@\n UnionTypeBuilder addAlternate(JSType alternate) {\n     if (alternate.isNoType()) {\n         return this;\n     }\n     isAllType \u003d isAllType || alternate.isAllType();\n     boolean isAlternateUnknown \u003d alternate instanceof UnknownType;\n     isNativeUnknownType \u003d isNativeUnknownType || isAlternateUnknown;\n     if (isAlternateUnknown) {\n         areAllUnknownsChecked \u003d areAllUnknownsChecked \u0026\u0026 alternate.isCheckedUnknownType();\n     }\n     if (!isAllType \u0026\u0026 !isNativeUnknownType) {\n         if (alternate instanceof UnionType) {\n             UnionType union \u003d (UnionType) alternate;\n             for (JSType unionAlt : union.getAlternates()) {\n                 addAlternate(unionAlt);\n             }\n         } else {\n             if (alternates.size() \u003e MAX_UNION_SIZE) {\n                 return this;\n             }\n             Iterator\u003cJSType\u003e it \u003d alternates.iterator();\n             while (it.hasNext()) {\n                 JSType current \u003d it.next();\n-                if (alternate.isUnknownType() || current.isUnknownType() || alternate.isNoResolvedType() || current.isNoResolvedType()) {\n+                if (alternate.isUnknownType() || current.isUnknownType()) {\n                     if (alternate.isEquivalentTo(current)) {\n                         return this;\n                     }\n                 } else {\n                     if (alternate.isSubtype(current)) {\n                         return this;\n                     } else if (current.isSubtype(alternate)) {\n                         it.remove();\n                     }\n                 }\n             }\n             alternates.add(alternate);\n             result \u003d null;\n         }\n     } else {\n         result \u003d null;\n     }\n     return this;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6dbca87c463d8a1e229a0d92d5cdf92247fdefde": {
      "type": "Ybodychange",
      "commitMessage": "\nWhen we can\u0027t find a forward-declared type,\nthat type should resolve to an empty type.\nThis ensures that if someone tries to pass a param or return\nvalue to it, they get a type warning.\n\nR\u003djohnlenz\nDELTA\u003d461  (385 added, 37 deleted, 39 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d301\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@702 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/18/11, 3:28 PM",
      "commitName": "6dbca87c463d8a1e229a0d92d5cdf92247fdefde",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "12/13/10, 8:10 AM",
      "commitNameOld": "1c75a5484b515bd593295fbf0c8491e2dd1f1c45",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 36.3,
      "commitsBetweenForRepo": 76,
      "commitsBetweenForFile": 1,
      "actualSource": "UnionTypeBuilder addAlternate(JSType alternate) {\n    if (alternate.isNoType()) {\n        return this;\n    }\n    isAllType \u003d isAllType || alternate.isAllType();\n    boolean isAlternateUnknown \u003d alternate instanceof UnknownType;\n    isNativeUnknownType \u003d isNativeUnknownType || isAlternateUnknown;\n    if (isAlternateUnknown) {\n        areAllUnknownsChecked \u003d areAllUnknownsChecked \u0026\u0026 alternate.isCheckedUnknownType();\n    }\n    if (!isAllType \u0026\u0026 !isNativeUnknownType) {\n        if (alternate instanceof UnionType) {\n            UnionType union \u003d (UnionType) alternate;\n            for (JSType unionAlt : union.getAlternates()) {\n                addAlternate(unionAlt);\n            }\n        } else {\n            if (alternates.size() \u003e MAX_UNION_SIZE) {\n                return this;\n            }\n            Iterator\u003cJSType\u003e it \u003d alternates.iterator();\n            while (it.hasNext()) {\n                JSType current \u003d it.next();\n                if (alternate.isUnknownType() || current.isUnknownType() || alternate.isNoResolvedType() || current.isNoResolvedType()) {\n                    if (alternate.isEquivalentTo(current)) {\n                        return this;\n                    }\n                } else {\n                    if (alternate.isSubtype(current)) {\n                        return this;\n                    } else if (current.isSubtype(alternate)) {\n                        it.remove();\n                    }\n                }\n            }\n            alternates.add(alternate);\n            result \u003d null;\n        }\n    } else {\n        result \u003d null;\n    }\n    return this;\n}",
      "path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
      "functionStartLine": 95,
      "functionName": "addAlternate",
      "functionAnnotation": "",
      "functionDoc": "Adds an alternate to the union type under construction. Returns this\nfor easy chaining.\n",
      "diff": "@@ -1,43 +1,43 @@\n UnionTypeBuilder addAlternate(JSType alternate) {\n     if (alternate.isNoType()) {\n         return this;\n     }\n     isAllType \u003d isAllType || alternate.isAllType();\n     boolean isAlternateUnknown \u003d alternate instanceof UnknownType;\n     isNativeUnknownType \u003d isNativeUnknownType || isAlternateUnknown;\n     if (isAlternateUnknown) {\n         areAllUnknownsChecked \u003d areAllUnknownsChecked \u0026\u0026 alternate.isCheckedUnknownType();\n     }\n     if (!isAllType \u0026\u0026 !isNativeUnknownType) {\n         if (alternate instanceof UnionType) {\n             UnionType union \u003d (UnionType) alternate;\n             for (JSType unionAlt : union.getAlternates()) {\n                 addAlternate(unionAlt);\n             }\n         } else {\n             if (alternates.size() \u003e MAX_UNION_SIZE) {\n                 return this;\n             }\n             Iterator\u003cJSType\u003e it \u003d alternates.iterator();\n             while (it.hasNext()) {\n                 JSType current \u003d it.next();\n-                if (alternate.isUnknownType() || current.isUnknownType()) {\n+                if (alternate.isUnknownType() || current.isUnknownType() || alternate.isNoResolvedType() || current.isNoResolvedType()) {\n                     if (alternate.isEquivalentTo(current)) {\n                         return this;\n                     }\n                 } else {\n                     if (alternate.isSubtype(current)) {\n                         return this;\n                     } else if (current.isSubtype(alternate)) {\n                         it.remove();\n                     }\n                 }\n             }\n             alternates.add(alternate);\n             result \u003d null;\n         }\n     } else {\n         result \u003d null;\n     }\n     return this;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e829dafb9b3365bda6b6bb80f5fa97783752d143": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/06/17 by nicksantos\n\n        don\u0027t use Sets to build union types.\n\n        R\u003djohnlenz\n        DELTA\u003d76  (52 added, 6 deleted, 18 changed)\n\nChange on 2010/06/17 by nicksantos\n\n        fix a couple bugs in goog.scope processing\n\n        R\u003drobbyw\n        DELTA\u003d54  (42 added, 11 deleted, 1 changed)\n\n\nChange on 2010/06/17 by acleung\n\n        Disables function argument check with @notypecheck is on for the whole file.\n\n        R\u003djohnlenz\n        DELTA\u003d8  (5 added, 1 deleted, 2 changed)\n\nChange on 2010/06/17 by dcc\n\n        Fix NPE in ExportExternsPass with --check_types\u003dfalse.\n\n        R\u003dacleung\n        DELTA\u003d72  (66 added, 4 deleted, 2 changed)\n\nChange on 2010/06/17 by johnlenz\n\n        Change stub method parameters to allow sanity checks to pass with\n        CrossModuleMethodMotion.\n\n        R\u003dnicksantos\n        DELTA\u003d7  (3 added, 0 deleted, 4 changed)\n\nChange on 2010/06/18 by johnlenz\n\n        Modify AliasKeywords so passes the sanity checks: don\u0027t create coding\n        convention constants without annotation them so that the tests pass\n        when the sanity checks are on.\n\n        R\u003dnicksantos\n        DELTA\u003d18  (5 added, 0 deleted, 13 changed)\n\nChange on 2010/06/18 by johnlenz\n\n        Fix source maps when run with sanity checks.\n\n        R\u003dnicksantos\n        DELTA\u003d10  (7 added, 0 deleted, 3 changed)\n\nChange on 2010/06/18 by johnlenz\n\n        Changes to PrepareAst to make it valid to run during SanityChecks.\n\n        R\u003dnicksantos\n        DELTA\u003d18  (5 added, 0 deleted, 13 changed)\n\nChange on 2010/06/18 by nicksantos\n\n        fix constant annotations in CollapseProperties.\n\n        R\u003djohnlenz\n        DELTA\u003d61  (49 added, 1 deleted, 11 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d30002\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@246 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/18/10, 5:18 PM",
      "commitName": "e829dafb9b3365bda6b6bb80f5fa97783752d143",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/7/10, 11:34 AM",
      "commitNameOld": "7eaa0d8eca2549742649af34671eaf3da83b5c08",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 72.24,
      "commitsBetweenForRepo": 58,
      "commitsBetweenForFile": 1,
      "actualSource": "UnionTypeBuilder addAlternate(JSType alternate) {\n    if (alternate.isNoType()) {\n        return this;\n    }\n    isAllType \u003d isAllType || alternate.isAllType();\n    boolean isAlternateUnknown \u003d alternate instanceof UnknownType;\n    isNativeUnknownType \u003d isNativeUnknownType || isAlternateUnknown;\n    if (isAlternateUnknown) {\n        areAllUnknownsChecked \u003d areAllUnknownsChecked \u0026\u0026 alternate.isCheckedUnknownType();\n    }\n    if (!isAllType \u0026\u0026 !isNativeUnknownType) {\n        if (alternate instanceof UnionType) {\n            UnionType union \u003d (UnionType) alternate;\n            for (JSType unionAlt : union.getAlternates()) {\n                addAlternate(unionAlt);\n            }\n        } else {\n            if (alternates.size() \u003e MAX_UNION_SIZE) {\n                return this;\n            }\n            Iterator\u003cJSType\u003e it \u003d alternates.iterator();\n            while (it.hasNext()) {\n                JSType current \u003d it.next();\n                if (alternate.isUnknownType() || current.isUnknownType()) {\n                    if (alternate.isEquivalentTo(current)) {\n                        return this;\n                    }\n                } else {\n                    if (alternate.isSubtype(current)) {\n                        return this;\n                    } else if (current.isSubtype(alternate)) {\n                        it.remove();\n                    }\n                }\n            }\n            alternates.add(alternate);\n            result \u003d null;\n        }\n    } else {\n        result \u003d null;\n    }\n    return this;\n}",
      "path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
      "functionStartLine": 87,
      "functionName": "addAlternate",
      "functionAnnotation": "",
      "functionDoc": "Adds an alternate to the union type under construction. Returns this\nfor easy chaining.\n",
      "diff": "@@ -1,38 +1,43 @@\n UnionTypeBuilder addAlternate(JSType alternate) {\n     if (alternate.isNoType()) {\n         return this;\n     }\n     isAllType \u003d isAllType || alternate.isAllType();\n     boolean isAlternateUnknown \u003d alternate instanceof UnknownType;\n     isNativeUnknownType \u003d isNativeUnknownType || isAlternateUnknown;\n     if (isAlternateUnknown) {\n         areAllUnknownsChecked \u003d areAllUnknownsChecked \u0026\u0026 alternate.isCheckedUnknownType();\n     }\n     if (!isAllType \u0026\u0026 !isNativeUnknownType) {\n         if (alternate instanceof UnionType) {\n             UnionType union \u003d (UnionType) alternate;\n             for (JSType unionAlt : union.getAlternates()) {\n                 addAlternate(unionAlt);\n             }\n         } else {\n-            if (!alternate.isUnknownType()) {\n-                Iterator\u003cJSType\u003e it \u003d alternates.iterator();\n-                while (it.hasNext()) {\n-                    JSType current \u003d it.next();\n-                    if (!current.isUnknownType()) {\n-                        if (alternate.isSubtype(current)) {\n-                            return this;\n-                        } else if (current.isSubtype(alternate)) {\n-                            it.remove();\n-                        }\n+            if (alternates.size() \u003e MAX_UNION_SIZE) {\n+                return this;\n+            }\n+            Iterator\u003cJSType\u003e it \u003d alternates.iterator();\n+            while (it.hasNext()) {\n+                JSType current \u003d it.next();\n+                if (alternate.isUnknownType() || current.isUnknownType()) {\n+                    if (alternate.isEquivalentTo(current)) {\n+                        return this;\n+                    }\n+                } else {\n+                    if (alternate.isSubtype(current)) {\n+                        return this;\n+                    } else if (current.isSubtype(alternate)) {\n+                        it.remove();\n                     }\n                 }\n             }\n             alternates.add(alternate);\n             result \u003d null;\n         }\n     } else {\n         result \u003d null;\n     }\n     return this;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,38 @@\n+UnionTypeBuilder addAlternate(JSType alternate) {\n+    if (alternate.isNoType()) {\n+        return this;\n+    }\n+    isAllType \u003d isAllType || alternate.isAllType();\n+    boolean isAlternateUnknown \u003d alternate instanceof UnknownType;\n+    isNativeUnknownType \u003d isNativeUnknownType || isAlternateUnknown;\n+    if (isAlternateUnknown) {\n+        areAllUnknownsChecked \u003d areAllUnknownsChecked \u0026\u0026 alternate.isCheckedUnknownType();\n+    }\n+    if (!isAllType \u0026\u0026 !isNativeUnknownType) {\n+        if (alternate instanceof UnionType) {\n+            UnionType union \u003d (UnionType) alternate;\n+            for (JSType unionAlt : union.getAlternates()) {\n+                addAlternate(unionAlt);\n+            }\n+        } else {\n+            if (!alternate.isUnknownType()) {\n+                Iterator\u003cJSType\u003e it \u003d alternates.iterator();\n+                while (it.hasNext()) {\n+                    JSType current \u003d it.next();\n+                    if (!current.isUnknownType()) {\n+                        if (alternate.isSubtype(current)) {\n+                            return this;\n+                        } else if (current.isSubtype(alternate)) {\n+                            it.remove();\n+                        }\n+                    }\n+                }\n+            }\n+            alternates.add(alternate);\n+            result \u003d null;\n+        }\n+    } else {\n+        result \u003d null;\n+    }\n+    return this;\n+}\n\\ No newline at end of file\n",
      "actualSource": "UnionTypeBuilder addAlternate(JSType alternate) {\n    if (alternate.isNoType()) {\n        return this;\n    }\n    isAllType \u003d isAllType || alternate.isAllType();\n    boolean isAlternateUnknown \u003d alternate instanceof UnknownType;\n    isNativeUnknownType \u003d isNativeUnknownType || isAlternateUnknown;\n    if (isAlternateUnknown) {\n        areAllUnknownsChecked \u003d areAllUnknownsChecked \u0026\u0026 alternate.isCheckedUnknownType();\n    }\n    if (!isAllType \u0026\u0026 !isNativeUnknownType) {\n        if (alternate instanceof UnionType) {\n            UnionType union \u003d (UnionType) alternate;\n            for (JSType unionAlt : union.getAlternates()) {\n                addAlternate(unionAlt);\n            }\n        } else {\n            if (!alternate.isUnknownType()) {\n                Iterator\u003cJSType\u003e it \u003d alternates.iterator();\n                while (it.hasNext()) {\n                    JSType current \u003d it.next();\n                    if (!current.isUnknownType()) {\n                        if (alternate.isSubtype(current)) {\n                            return this;\n                        } else if (current.isSubtype(alternate)) {\n                            it.remove();\n                        }\n                    }\n                }\n            }\n            alternates.add(alternate);\n            result \u003d null;\n        }\n    } else {\n        result \u003d null;\n    }\n    return this;\n}",
      "path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
      "functionStartLine": 85,
      "functionName": "addAlternate",
      "functionAnnotation": "",
      "functionDoc": "Adds an alternate to the union type under construction. Returns this\nfor easy chaining.\n"
    }
  }
}