{
  "origin": "codeshovel",
  "repositoryName": "Closure-82b",
  "repositoryPath": "/tmp/Closure-82b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FunctionTypeBuilder.java",
  "functionName": "inferThisType",
  "functionId": "inferThisType___info-JSDocInfo__owner-Node(annotations-@Nullable)",
  "sourceFilePath": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
  "functionAnnotation": "",
  "functionDoc": "Infers the type of {@code this}.\n\n@param info The JSDocInfo for this function.\n@param owner The node for the object whose prototype \"owns\" this function.\n    For example, {@code A} in the expression {@code A.prototype.foo}. May\n    be null to indicate that this is not a prototype property.\n",
  "functionStartLine": 418,
  "functionEndLine": 447,
  "numCommitsSeen": 27,
  "timeTaken": 1156,
  "changeHistory": [
    "de491e70b971caca03f07531c2caf97b878cd1ff",
    "b2202accb3307ad0cd1d1af88fb7ad9463f4b3e3",
    "c764a46abf211d4677fadc33f7d466e5b14fa088",
    "a2d8936fae3eb0e3873c7f7c0233344c81436404",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "de491e70b971caca03f07531c2caf97b878cd1ff": "Ybodychange",
    "b2202accb3307ad0cd1d1af88fb7ad9463f4b3e3": "Ybodychange",
    "c764a46abf211d4677fadc33f7d466e5b14fa088": "Ybodychange",
    "a2d8936fae3eb0e3873c7f7c0233344c81436404": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "de491e70b971caca03f07531c2caf97b878cd1ff": {
      "type": "Ybodychange",
      "commitMessage": "\nvalidation for @this annotation. looks about the same\nas the @extends validation.\nFixes issue 268\n\nR\u003djohnlenz\nDELTA\u003d63  (55 added, 6 deleted, 2 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d804007\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@519 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/27/10, 7:03 PM",
      "commitName": "de491e70b971caca03f07531c2caf97b878cd1ff",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "10/13/10, 2:23 PM",
      "commitNameOld": "5a3b4cb6b7e816aacd0ffd4c71e23da949fe360d",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 14.19,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "actualSource": "FunctionTypeBuilder inferThisType(JSDocInfo info, @Nullable Node owner) {\n    ObjectType maybeThisType \u003d null;\n    if (info !\u003d null \u0026\u0026 info.hasThisType()) {\n        maybeThisType \u003d ObjectType.cast(info.getThisType().evaluate(scope, typeRegistry));\n    }\n    if (maybeThisType !\u003d null) {\n        thisType \u003d maybeThisType;\n        thisType.setValidator(new ThisTypeValidator());\n    } else if (owner !\u003d null \u0026\u0026 (info \u003d\u003d null || !info.hasType())) {\n        String ownerTypeName \u003d owner.getQualifiedName();\n        ObjectType ownerType \u003d ObjectType.cast(typeRegistry.getForgivingType(scope, ownerTypeName, sourceName, owner.getLineno(), owner.getCharno()));\n        if (ownerType !\u003d null) {\n            thisType \u003d ownerType;\n        }\n    }\n    return this;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
      "functionStartLine": 407,
      "functionName": "inferThisType",
      "functionAnnotation": "",
      "functionDoc": "Infers the type of {@code this}.\n\n@param info The JSDocInfo for this function.\n@param owner The node for the object whose prototype \"owns\" this function.\n    For example, {@code A} in the expression {@code A.prototype.foo}. May\n    be null to indicate that this is not a prototype property.\n",
      "diff": "@@ -1,16 +1,17 @@\n FunctionTypeBuilder inferThisType(JSDocInfo info, @Nullable Node owner) {\n     ObjectType maybeThisType \u003d null;\n     if (info !\u003d null \u0026\u0026 info.hasThisType()) {\n         maybeThisType \u003d ObjectType.cast(info.getThisType().evaluate(scope, typeRegistry));\n     }\n     if (maybeThisType !\u003d null) {\n         thisType \u003d maybeThisType;\n+        thisType.setValidator(new ThisTypeValidator());\n     } else if (owner !\u003d null \u0026\u0026 (info \u003d\u003d null || !info.hasType())) {\n         String ownerTypeName \u003d owner.getQualifiedName();\n         ObjectType ownerType \u003d ObjectType.cast(typeRegistry.getForgivingType(scope, ownerTypeName, sourceName, owner.getLineno(), owner.getCharno()));\n         if (ownerType !\u003d null) {\n             thisType \u003d ownerType;\n         }\n     }\n     return this;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b2202accb3307ad0cd1d1af88fb7ad9463f4b3e3": {
      "type": "Ybodychange",
      "commitMessage": "\ndon\u0027t emit a warning if \u0027x\u0027 doesn\u0027t resolve to a type in\nthe expression \u0027x.prototype.bar\u0027.\n\nR\u003djohnlenz\nDELTA\u003d23  (21 added, 0 deleted, 2 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d221401\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@433 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/15/10, 6:25 PM",
      "commitName": "b2202accb3307ad0cd1d1af88fb7ad9463f4b3e3",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "9/13/10, 11:12 AM",
      "commitNameOld": "4c6e1039b80859f17de5f3cbcfeba61ed8ea0485",
      "commitAuthorOld": "elbaum@google.com",
      "daysBetweenCommits": 2.3,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "actualSource": "FunctionTypeBuilder inferThisType(JSDocInfo info, @Nullable Node owner) {\n    ObjectType maybeThisType \u003d null;\n    if (info !\u003d null \u0026\u0026 info.hasThisType()) {\n        maybeThisType \u003d ObjectType.cast(info.getThisType().evaluate(scope, typeRegistry));\n    }\n    if (maybeThisType !\u003d null) {\n        thisType \u003d maybeThisType;\n    } else if (owner !\u003d null \u0026\u0026 (info \u003d\u003d null || !info.hasType())) {\n        String ownerTypeName \u003d owner.getQualifiedName();\n        ObjectType ownerType \u003d ObjectType.cast(typeRegistry.getForgivingType(scope, ownerTypeName, sourceName, owner.getLineno(), owner.getCharno()));\n        if (ownerType !\u003d null) {\n            thisType \u003d ownerType;\n        }\n    }\n    return this;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
      "functionStartLine": 337,
      "functionName": "inferThisType",
      "functionAnnotation": "",
      "functionDoc": "Infers the type of {@code this}.\n\n@param info The JSDocInfo for this function.\n@param owner The node for the object whose prototype \"owns\" this function.\n    For example, {@code A} in the expression {@code A.prototype.foo}. May\n    be null to indicate that this is not a prototype property.\n",
      "diff": "@@ -1,16 +1,16 @@\n FunctionTypeBuilder inferThisType(JSDocInfo info, @Nullable Node owner) {\n     ObjectType maybeThisType \u003d null;\n     if (info !\u003d null \u0026\u0026 info.hasThisType()) {\n         maybeThisType \u003d ObjectType.cast(info.getThisType().evaluate(scope, typeRegistry));\n     }\n     if (maybeThisType !\u003d null) {\n         thisType \u003d maybeThisType;\n     } else if (owner !\u003d null \u0026\u0026 (info \u003d\u003d null || !info.hasType())) {\n         String ownerTypeName \u003d owner.getQualifiedName();\n-        ObjectType ownerType \u003d ObjectType.cast(typeRegistry.getType(scope, ownerTypeName, sourceName, owner.getLineno(), owner.getCharno()));\n+        ObjectType ownerType \u003d ObjectType.cast(typeRegistry.getForgivingType(scope, ownerTypeName, sourceName, owner.getLineno(), owner.getCharno()));\n         if (ownerType !\u003d null) {\n             thisType \u003d ownerType;\n         }\n     }\n     return this;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c764a46abf211d4677fadc33f7d466e5b14fa088": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/04/13 by john\n\n        Here is a crazy thought, let\u0027s not require the JSTypeRegistry during\n        parsing.\n\n        There are basically two changes here:\n        1) The IRFactory was looking for enums to seed the JSTypeRegistry, so\n        we do that when we setup for type interence.\n        2) The JSDocParser was checking the types of @defines objects, now do\n        that during ProcessDefines.\n\n        R\u003drobert,mark\n        DELTA\u003d207  (82 added, 89 deleted, 36 changed)\n\nChange on 2010/04/14 by nick\n\n        Add a debugging function for JSType hashcodes.\n        i found this useful, and thought others might too.\n\n        R\u003djohn\n        DELTA\u003d69  (69 added, 0 deleted, 0 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dfqsoxx\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@183 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/14/10, 9:15 AM",
      "commitName": "c764a46abf211d4677fadc33f7d466e5b14fa088",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "3/11/10, 9:31 PM",
      "commitNameOld": "7bfdbd9164601af44d17edd51be829fde2cc51aa",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 33.45,
      "commitsBetweenForRepo": 47,
      "commitsBetweenForFile": 1,
      "actualSource": "FunctionTypeBuilder inferThisType(JSDocInfo info, @Nullable Node owner) {\n    ObjectType maybeThisType \u003d null;\n    if (info !\u003d null \u0026\u0026 info.hasThisType()) {\n        maybeThisType \u003d ObjectType.cast(info.getThisType().evaluate(scope, typeRegistry));\n    }\n    if (maybeThisType !\u003d null) {\n        thisType \u003d maybeThisType;\n    } else if (owner !\u003d null \u0026\u0026 (info \u003d\u003d null || !info.hasType())) {\n        String ownerTypeName \u003d owner.getQualifiedName();\n        ObjectType ownerType \u003d ObjectType.cast(typeRegistry.getType(scope, ownerTypeName, sourceName, owner.getLineno(), owner.getCharno()));\n        if (ownerType !\u003d null) {\n            thisType \u003d ownerType;\n        }\n    }\n    return this;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
      "functionStartLine": 275,
      "functionName": "inferThisType",
      "functionAnnotation": "",
      "functionDoc": "Infers the type of {@code this}.\n\n@param info The JSDocInfo for this function.\n@param owner The node for the object whose prototype \"owns\" this function.\n    For example, {@code A} in the expression {@code A.prototype.foo}. May\n    be null to indicate that this is not a prototype property.\n",
      "diff": "@@ -1,16 +1,16 @@\n FunctionTypeBuilder inferThisType(JSDocInfo info, @Nullable Node owner) {\n     ObjectType maybeThisType \u003d null;\n     if (info !\u003d null \u0026\u0026 info.hasThisType()) {\n-        maybeThisType \u003d ObjectType.cast(info.getThisType().evaluate(scope));\n+        maybeThisType \u003d ObjectType.cast(info.getThisType().evaluate(scope, typeRegistry));\n     }\n     if (maybeThisType !\u003d null) {\n         thisType \u003d maybeThisType;\n     } else if (owner !\u003d null \u0026\u0026 (info \u003d\u003d null || !info.hasType())) {\n         String ownerTypeName \u003d owner.getQualifiedName();\n         ObjectType ownerType \u003d ObjectType.cast(typeRegistry.getType(scope, ownerTypeName, sourceName, owner.getLineno(), owner.getCharno()));\n         if (ownerType !\u003d null) {\n             thisType \u003d ownerType;\n         }\n     }\n     return this;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a2d8936fae3eb0e3873c7f7c0233344c81436404": {
      "type": "Ybodychange",
      "commitMessage": "Add warnings for functions that are ambiguously defined on different\nbrowsers.\n\nAdd better support for Caja.\n\nRollback the change to CoalesceVariableNames, because it had problems.\n\nInternal type system refactoring.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@33 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/15/09, 1:52 PM",
      "commitName": "a2d8936fae3eb0e3873c7f7c0233344c81436404",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/11/09, 11:05 AM",
      "commitNameOld": "6a36f04485599820ff86441accee002b4deec2eb",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 34.12,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "actualSource": "FunctionTypeBuilder inferThisType(JSDocInfo info, @Nullable Node owner) {\n    ObjectType maybeThisType \u003d null;\n    if (info !\u003d null \u0026\u0026 info.hasThisType()) {\n        maybeThisType \u003d ObjectType.cast(info.getThisType().evaluate(scope));\n    }\n    if (maybeThisType !\u003d null) {\n        thisType \u003d maybeThisType;\n    } else if (owner !\u003d null \u0026\u0026 (info \u003d\u003d null || !info.hasType())) {\n        String ownerTypeName \u003d owner.getQualifiedName();\n        ObjectType ownerType \u003d ObjectType.cast(typeRegistry.getType(scope, ownerTypeName, sourceName, owner.getLineno(), owner.getCharno()));\n        if (ownerType !\u003d null) {\n            thisType \u003d ownerType;\n        }\n    }\n    return this;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
      "functionStartLine": 273,
      "functionName": "inferThisType",
      "functionAnnotation": "",
      "functionDoc": "Infers the type of {@code this}.\n\n@param info The JSDocInfo for this function.\n@param owner The node for the object whose prototype \"owns\" this function.\n    For example, {@code A} in the expression {@code A.prototype.foo}. May\n    be null to indicate that this is not a prototype property.\n",
      "diff": "@@ -1,16 +1,16 @@\n FunctionTypeBuilder inferThisType(JSDocInfo info, @Nullable Node owner) {\n-    JSType maybeThisType \u003d null;\n+    ObjectType maybeThisType \u003d null;\n     if (info !\u003d null \u0026\u0026 info.hasThisType()) {\n-        maybeThisType \u003d info.getThisType().evaluate(scope);\n+        maybeThisType \u003d ObjectType.cast(info.getThisType().evaluate(scope));\n     }\n-    if (maybeThisType !\u003d null \u0026\u0026 maybeThisType instanceof ObjectType) {\n-        thisType \u003d (ObjectType) maybeThisType;\n+    if (maybeThisType !\u003d null) {\n+        thisType \u003d maybeThisType;\n     } else if (owner !\u003d null \u0026\u0026 (info \u003d\u003d null || !info.hasType())) {\n         String ownerTypeName \u003d owner.getQualifiedName();\n-        JSType ownerType \u003d typeRegistry.getType(scope, ownerTypeName, sourceName, owner.getLineno(), owner.getCharno());\n-        if (ownerType instanceof ObjectType) {\n-            thisType \u003d (ObjectType) ownerType;\n+        ObjectType ownerType \u003d ObjectType.cast(typeRegistry.getType(scope, ownerTypeName, sourceName, owner.getLineno(), owner.getCharno()));\n+        if (ownerType !\u003d null) {\n+            thisType \u003d ownerType;\n         }\n     }\n     return this;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,16 @@\n+FunctionTypeBuilder inferThisType(JSDocInfo info, @Nullable Node owner) {\n+    JSType maybeThisType \u003d null;\n+    if (info !\u003d null \u0026\u0026 info.hasThisType()) {\n+        maybeThisType \u003d info.getThisType().evaluate(scope);\n+    }\n+    if (maybeThisType !\u003d null \u0026\u0026 maybeThisType instanceof ObjectType) {\n+        thisType \u003d (ObjectType) maybeThisType;\n+    } else if (owner !\u003d null \u0026\u0026 (info \u003d\u003d null || !info.hasType())) {\n+        String ownerTypeName \u003d owner.getQualifiedName();\n+        JSType ownerType \u003d typeRegistry.getType(scope, ownerTypeName, sourceName, owner.getLineno(), owner.getCharno());\n+        if (ownerType instanceof ObjectType) {\n+            thisType \u003d (ObjectType) ownerType;\n+        }\n+    }\n+    return this;\n+}\n\\ No newline at end of file\n",
      "actualSource": "FunctionTypeBuilder inferThisType(JSDocInfo info, @Nullable Node owner) {\n    JSType maybeThisType \u003d null;\n    if (info !\u003d null \u0026\u0026 info.hasThisType()) {\n        maybeThisType \u003d info.getThisType().evaluate(scope);\n    }\n    if (maybeThisType !\u003d null \u0026\u0026 maybeThisType instanceof ObjectType) {\n        thisType \u003d (ObjectType) maybeThisType;\n    } else if (owner !\u003d null \u0026\u0026 (info \u003d\u003d null || !info.hasType())) {\n        String ownerTypeName \u003d owner.getQualifiedName();\n        JSType ownerType \u003d typeRegistry.getType(scope, ownerTypeName, sourceName, owner.getLineno(), owner.getCharno());\n        if (ownerType instanceof ObjectType) {\n            thisType \u003d (ObjectType) ownerType;\n        }\n    }\n    return this;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
      "functionStartLine": 277,
      "functionName": "inferThisType",
      "functionAnnotation": "",
      "functionDoc": "Infers the type of {@code this}.\n\n@param info The JSDocInfo for this function.\n@param owner The node for the object whose prototype \"owns\" this function.\n    For example, {@code A} in the expression {@code A.prototype.foo}. May\n    be null to indicate that this is not a prototype property.\n"
    }
  }
}