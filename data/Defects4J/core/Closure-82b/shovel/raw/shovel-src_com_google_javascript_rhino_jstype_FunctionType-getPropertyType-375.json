{
  "origin": "codeshovel",
  "repositoryName": "Closure-82b",
  "repositoryPath": "/tmp/Closure-82b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FunctionType.java",
  "functionName": "getPropertyType",
  "functionId": "getPropertyType___name-String",
  "sourceFilePath": "src/com/google/javascript/rhino/jstype/FunctionType.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 375,
  "functionEndLine": 430,
  "numCommitsSeen": 33,
  "timeTaken": 1418,
  "changeHistory": [
    "6bbac115c9a7928a7053b2da3a78df9569df8570",
    "e3bcc1c6e7ce7e9bfc3098cd5bf57774049f5baa",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "6bbac115c9a7928a7053b2da3a78df9569df8570": "Ybodychange",
    "e3bcc1c6e7ce7e9bfc3098cd5bf57774049f5baa": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6bbac115c9a7928a7053b2da3a78df9569df8570": {
      "type": "Ybodychange",
      "commitMessage": "\nAdding getPropertyNode functionality to ObjectType. This needs\nassociating nodes to properties in defineProperty.\n\nR\u003dnicksantos\nDELTA\u003d307  (127 added, 0 deleted, 180 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d223\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@674 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/7/11, 9:19 AM",
      "commitName": "6bbac115c9a7928a7053b2da3a78df9569df8570",
      "commitAuthor": "bashir@google.com",
      "commitDateOld": "12/14/10, 1:49 PM",
      "commitNameOld": "e9f7e6114414f68deb90f4116861d7a054365404",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 23.81,
      "commitsBetweenForRepo": 43,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JSType getPropertyType(String name) {\n    if (\"prototype\".equals(name)) {\n        return getPrototype();\n    } else {\n        if (!hasOwnProperty(name)) {\n            if (\"call\".equals(name)) {\n                Node params \u003d getParametersNode();\n                if (params \u003d\u003d null) {\n                    defineDeclaredProperty(name, new FunctionBuilder(registry).withReturnType(getReturnType()).build(), false, source);\n                } else {\n                    params \u003d params.cloneTree();\n                    Node thisTypeNode \u003d Node.newString(Token.NAME, \"thisType\");\n                    thisTypeNode.setJSType(registry.createOptionalNullableType(getTypeOfThis()));\n                    params.addChildToFront(thisTypeNode);\n                    thisTypeNode.setOptionalArg(true);\n                    defineDeclaredProperty(name, new FunctionBuilder(registry).withParamsNode(params).withReturnType(getReturnType()).build(), false, source);\n                }\n            } else if (\"apply\".equals(name)) {\n                FunctionParamBuilder builder \u003d new FunctionParamBuilder(registry);\n                builder.addOptionalParams(registry.createNullableType(getTypeOfThis()), registry.createNullableType(registry.getNativeType(JSTypeNative.OBJECT_TYPE)));\n                defineDeclaredProperty(name, new FunctionBuilder(registry).withParams(builder).withReturnType(getReturnType()).build(), false, source);\n            }\n        }\n        return super.getPropertyType(name);\n    }\n}",
      "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
      "functionStartLine": 369,
      "functionName": "getPropertyType",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,27 +1,27 @@\n @Override\n public JSType getPropertyType(String name) {\n     if (\"prototype\".equals(name)) {\n         return getPrototype();\n     } else {\n         if (!hasOwnProperty(name)) {\n             if (\"call\".equals(name)) {\n                 Node params \u003d getParametersNode();\n                 if (params \u003d\u003d null) {\n-                    defineDeclaredProperty(name, new FunctionBuilder(registry).withReturnType(getReturnType()).build(), false);\n+                    defineDeclaredProperty(name, new FunctionBuilder(registry).withReturnType(getReturnType()).build(), false, source);\n                 } else {\n                     params \u003d params.cloneTree();\n                     Node thisTypeNode \u003d Node.newString(Token.NAME, \"thisType\");\n                     thisTypeNode.setJSType(registry.createOptionalNullableType(getTypeOfThis()));\n                     params.addChildToFront(thisTypeNode);\n                     thisTypeNode.setOptionalArg(true);\n-                    defineDeclaredProperty(name, new FunctionBuilder(registry).withParamsNode(params).withReturnType(getReturnType()).build(), false);\n+                    defineDeclaredProperty(name, new FunctionBuilder(registry).withParamsNode(params).withReturnType(getReturnType()).build(), false, source);\n                 }\n             } else if (\"apply\".equals(name)) {\n                 FunctionParamBuilder builder \u003d new FunctionParamBuilder(registry);\n                 builder.addOptionalParams(registry.createNullableType(getTypeOfThis()), registry.createNullableType(registry.getNativeType(JSTypeNative.OBJECT_TYPE)));\n-                defineDeclaredProperty(name, new FunctionBuilder(registry).withParams(builder).withReturnType(getReturnType()).build(), false);\n+                defineDeclaredProperty(name, new FunctionBuilder(registry).withParams(builder).withReturnType(getReturnType()).build(), false, source);\n             }\n         }\n         return super.getPropertyType(name);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e3bcc1c6e7ce7e9bfc3098cd5bf57774049f5baa": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/04/15 by nick\n\n        Move the construction of ArrowTypes out of FunctionType.\n\n        R\u003djohn\n        DELTA\u003d197  (79 added, 27 deleted, 91 changed)\n\nChange on 2010/04/15 by nick\n\n        if a file is marked as an @extern, then make it an extern.\n\n        R\u003drobert\n        DELTA\u003d51  (46 added, 0 deleted, 5 changed)\n\nChange on 2010/04/15 by john\n\n        Maintain source information.\n\n        R\u003dalan\n        DELTA\u003d60  (28 added, 7 deleted, 25 changed)\n\nChange on 2010/04/15 by john\n\n        Fix overly aggressive RegExp check.\n\n        R\u003dalan\n        DELTA\u003d15  (12 added, 0 deleted, 3 changed)\n\nChange on 2010/04/15 by nick\n\n        more fun with function-type building.\n\n        R\u003djohn\n        DELTA\u003d432  (206 added, 142 deleted, 84 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003doqlcyn\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@186 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/15/10, 4:45 PM",
      "commitName": "e3bcc1c6e7ce7e9bfc3098cd5bf57774049f5baa",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/14/10, 4:53 PM",
      "commitNameOld": "43859717972907dd1ecebd8dca6e05036386e28b",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 0.99,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JSType getPropertyType(String name) {\n    if (\"prototype\".equals(name)) {\n        return getPrototype();\n    } else {\n        if (!hasOwnProperty(name)) {\n            if (\"call\".equals(name)) {\n                Node params \u003d getParametersNode();\n                if (params \u003d\u003d null) {\n                    defineDeclaredProperty(name, new FunctionBuilder(registry).withReturnType(getReturnType()).build(), false);\n                } else {\n                    params \u003d params.cloneTree();\n                    Node thisTypeNode \u003d Node.newString(Token.NAME, \"thisType\");\n                    thisTypeNode.setJSType(registry.createOptionalNullableType(getTypeOfThis()));\n                    params.addChildToFront(thisTypeNode);\n                    thisTypeNode.setOptionalArg(true);\n                    defineDeclaredProperty(name, new FunctionBuilder(registry).withParamsNode(params).withReturnType(getReturnType()).build(), false);\n                }\n            } else if (\"apply\".equals(name)) {\n                FunctionParamBuilder builder \u003d new FunctionParamBuilder(registry);\n                builder.addOptionalParams(registry.createNullableType(getTypeOfThis()), registry.createNullableType(registry.getNativeType(JSTypeNative.OBJECT_TYPE)));\n                defineDeclaredProperty(name, new FunctionBuilder(registry).withParams(builder).withReturnType(getReturnType()).build(), false);\n            }\n        }\n        return super.getPropertyType(name);\n    }\n}",
      "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
      "functionStartLine": 365,
      "functionName": "getPropertyType",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,27 +1,27 @@\n @Override\n public JSType getPropertyType(String name) {\n     if (\"prototype\".equals(name)) {\n         return getPrototype();\n     } else {\n         if (!hasOwnProperty(name)) {\n             if (\"call\".equals(name)) {\n                 Node params \u003d getParametersNode();\n                 if (params \u003d\u003d null) {\n-                    defineDeclaredProperty(name, new FunctionType(registry, null, null, null, getReturnType()), false);\n+                    defineDeclaredProperty(name, new FunctionBuilder(registry).withReturnType(getReturnType()).build(), false);\n                 } else {\n                     params \u003d params.cloneTree();\n                     Node thisTypeNode \u003d Node.newString(Token.NAME, \"thisType\");\n                     thisTypeNode.setJSType(registry.createOptionalNullableType(getTypeOfThis()));\n                     params.addChildToFront(thisTypeNode);\n                     thisTypeNode.setOptionalArg(true);\n-                    defineDeclaredProperty(name, new FunctionType(registry, null, null, params, getReturnType()), false);\n+                    defineDeclaredProperty(name, new FunctionBuilder(registry).withParamsNode(params).withReturnType(getReturnType()).build(), false);\n                 }\n             } else if (\"apply\".equals(name)) {\n                 FunctionParamBuilder builder \u003d new FunctionParamBuilder(registry);\n                 builder.addOptionalParams(registry.createNullableType(getTypeOfThis()), registry.createNullableType(registry.getNativeType(JSTypeNative.OBJECT_TYPE)));\n-                defineDeclaredProperty(name, new FunctionType(registry, null, null, builder.build(), getReturnType()), false);\n+                defineDeclaredProperty(name, new FunctionBuilder(registry).withParams(builder).withReturnType(getReturnType()).build(), false);\n             }\n         }\n         return super.getPropertyType(name);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,27 @@\n+@Override\n+public JSType getPropertyType(String name) {\n+    if (\"prototype\".equals(name)) {\n+        return getPrototype();\n+    } else {\n+        if (!hasOwnProperty(name)) {\n+            if (\"call\".equals(name)) {\n+                Node params \u003d getParametersNode();\n+                if (params \u003d\u003d null) {\n+                    defineDeclaredProperty(name, new FunctionType(registry, null, null, null, getReturnType()), false);\n+                } else {\n+                    params \u003d params.cloneTree();\n+                    Node thisTypeNode \u003d Node.newString(Token.NAME, \"thisType\");\n+                    thisTypeNode.setJSType(registry.createOptionalNullableType(getTypeOfThis()));\n+                    params.addChildToFront(thisTypeNode);\n+                    thisTypeNode.setOptionalArg(true);\n+                    defineDeclaredProperty(name, new FunctionType(registry, null, null, params, getReturnType()), false);\n+                }\n+            } else if (\"apply\".equals(name)) {\n+                FunctionParamBuilder builder \u003d new FunctionParamBuilder(registry);\n+                builder.addOptionalParams(registry.createNullableType(getTypeOfThis()), registry.createNullableType(registry.getNativeType(JSTypeNative.OBJECT_TYPE)));\n+                defineDeclaredProperty(name, new FunctionType(registry, null, null, builder.build(), getReturnType()), false);\n+            }\n+        }\n+        return super.getPropertyType(name);\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic JSType getPropertyType(String name) {\n    if (\"prototype\".equals(name)) {\n        return getPrototype();\n    } else {\n        if (!hasOwnProperty(name)) {\n            if (\"call\".equals(name)) {\n                Node params \u003d getParametersNode();\n                if (params \u003d\u003d null) {\n                    defineDeclaredProperty(name, new FunctionType(registry, null, null, null, getReturnType()), false);\n                } else {\n                    params \u003d params.cloneTree();\n                    Node thisTypeNode \u003d Node.newString(Token.NAME, \"thisType\");\n                    thisTypeNode.setJSType(registry.createOptionalNullableType(getTypeOfThis()));\n                    params.addChildToFront(thisTypeNode);\n                    thisTypeNode.setOptionalArg(true);\n                    defineDeclaredProperty(name, new FunctionType(registry, null, null, params, getReturnType()), false);\n                }\n            } else if (\"apply\".equals(name)) {\n                FunctionParamBuilder builder \u003d new FunctionParamBuilder(registry);\n                builder.addOptionalParams(registry.createNullableType(getTypeOfThis()), registry.createNullableType(registry.getNativeType(JSTypeNative.OBJECT_TYPE)));\n                defineDeclaredProperty(name, new FunctionType(registry, null, null, builder.build(), getReturnType()), false);\n            }\n        }\n        return super.getPropertyType(name);\n    }\n}",
      "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
      "functionStartLine": 408,
      "functionName": "getPropertyType",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}