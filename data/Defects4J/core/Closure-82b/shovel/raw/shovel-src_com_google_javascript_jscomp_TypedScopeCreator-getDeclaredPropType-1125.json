{
  "origin": "codeshovel",
  "repositoryName": "Closure-82b",
  "repositoryPath": "/tmp/Closure-82b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TypedScopeCreator.java",
  "functionName": "getDeclaredPropType",
  "functionId": "$getDeclaredPropType___t-NodeTraversal__info-JSDocInfo__lValue-Node__rValue-Node(annotations-@Nullable)",
  "sourceFilePath": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
  "functionAnnotation": "",
  "functionDoc": "Look for a type declaration on a property assignment\n(in an ASSIGN or an object literal key).\n\n@param info The doc info for this property.\n@param lValue The l-value node.\n@param rValue The node that {@code n} is being initialized to,\n    or {@code null} if this is a stub declaration.\n",
  "functionStartLine": 1125,
  "functionEndLine": 1147,
  "numCommitsSeen": 115,
  "timeTaken": 3572,
  "changeHistory": [
    "7675b68dbd7cfc37b1359fd40be9fdf0b618bc95",
    "2ea78e73e6ace693e18d535560606dfd49c3f9bc",
    "c64b9350aa206a4ec8deedaca08d6e4f1d84f4e8",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "7675b68dbd7cfc37b1359fd40be9fdf0b618bc95": "Ymultichange(Yrename,Yparameterchange,Ybodychange,Ydocchange)",
    "2ea78e73e6ace693e18d535560606dfd49c3f9bc": "Ybodychange",
    "c64b9350aa206a4ec8deedaca08d6e4f1d84f4e8": "Yparametermetachange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7675b68dbd7cfc37b1359fd40be9fdf0b618bc95": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "\nfix a todo that\u0027s really easy now\n\nR\u003djohnlenz\nDELTA\u003d67  (28 added, 12 deleted, 27 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d417\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@743 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/1/11, 11:22 AM",
      "commitName": "7675b68dbd7cfc37b1359fd40be9fdf0b618bc95",
      "commitAuthor": "nicksantos@google.com",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "\nfix a todo that\u0027s really easy now\n\nR\u003djohnlenz\nDELTA\u003d67  (28 added, 12 deleted, 27 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d417\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@743 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "2/1/11, 11:22 AM",
          "commitName": "7675b68dbd7cfc37b1359fd40be9fdf0b618bc95",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "1/31/11, 8:08 AM",
          "commitNameOld": "2ea78e73e6ace693e18d535560606dfd49c3f9bc",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 1.13,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "private JSType getDeclaredPropType(NodeTraversal t, JSDocInfo info, Node lValue, @Nullable Node rValue) {\n    if (info !\u003d null \u0026\u0026 info.hasType()) {\n        return getDeclaredTypeInAnnotation(t, lValue, info);\n    } else if (rValue !\u003d null \u0026\u0026 rValue.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 shouldUseFunctionLiteralType((FunctionType) rValue.getJSType(), info, lValue)) {\n        return rValue.getJSType();\n    } else if (info !\u003d null \u0026\u0026 info.hasEnumParameterType()) {\n        if (rValue !\u003d null \u0026\u0026 rValue.getType() \u003d\u003d Token.OBJECTLIT) {\n            return rValue.getJSType();\n        } else {\n            return createEnumTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n        }\n    } else if (info !\u003d null \u0026\u0026 (info.isConstructor() || info.isInterface())) {\n        return createFunctionTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n    } else {\n        return getDeclaredTypeInAnnotation(t, lValue, info);\n    }\n}",
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
          "functionStartLine": 1125,
          "functionName": "getDeclaredPropType",
          "functionAnnotation": "",
          "functionDoc": "Look for a type declaration on a property assignment\n(in an ASSIGN or an object literal key).\n\n@param info The doc info for this property.\n@param lValue The l-value node.\n@param rValue The node that {@code n} is being initialized to,\n    or {@code null} if this is a stub declaration.\n",
          "diff": "@@ -1,17 +1,17 @@\n-private JSType getDeclaredGetPropType(NodeTraversal t, JSDocInfo info, Node n, @Nullable Node rhsValue) {\n+private JSType getDeclaredPropType(NodeTraversal t, JSDocInfo info, Node lValue, @Nullable Node rValue) {\n     if (info !\u003d null \u0026\u0026 info.hasType()) {\n-        return getDeclaredTypeInAnnotation(t, n, info);\n-    } else if (rhsValue !\u003d null \u0026\u0026 rhsValue.getType() \u003d\u003d Token.FUNCTION) {\n-        return rhsValue.getJSType();\n+        return getDeclaredTypeInAnnotation(t, lValue, info);\n+    } else if (rValue !\u003d null \u0026\u0026 rValue.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 shouldUseFunctionLiteralType((FunctionType) rValue.getJSType(), info, lValue)) {\n+        return rValue.getJSType();\n     } else if (info !\u003d null \u0026\u0026 info.hasEnumParameterType()) {\n-        if (rhsValue !\u003d null \u0026\u0026 rhsValue.getType() \u003d\u003d Token.OBJECTLIT) {\n-            return rhsValue.getJSType();\n+        if (rValue !\u003d null \u0026\u0026 rValue.getType() \u003d\u003d Token.OBJECTLIT) {\n+            return rValue.getJSType();\n         } else {\n-            return createEnumTypeFromNodes(rhsValue, n.getQualifiedName(), info, n);\n+            return createEnumTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n         }\n     } else if (info !\u003d null \u0026\u0026 (info.isConstructor() || info.isInterface())) {\n-        return createFunctionTypeFromNodes(rhsValue, n.getQualifiedName(), info, n);\n+        return createFunctionTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n     } else {\n-        return getDeclaredTypeInAnnotation(t, n, info);\n+        return getDeclaredTypeInAnnotation(t, lValue, info);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "getDeclaredGetPropType",
            "newValue": "getDeclaredPropType"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "\nfix a todo that\u0027s really easy now\n\nR\u003djohnlenz\nDELTA\u003d67  (28 added, 12 deleted, 27 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d417\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@743 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "2/1/11, 11:22 AM",
          "commitName": "7675b68dbd7cfc37b1359fd40be9fdf0b618bc95",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "1/31/11, 8:08 AM",
          "commitNameOld": "2ea78e73e6ace693e18d535560606dfd49c3f9bc",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 1.13,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "private JSType getDeclaredPropType(NodeTraversal t, JSDocInfo info, Node lValue, @Nullable Node rValue) {\n    if (info !\u003d null \u0026\u0026 info.hasType()) {\n        return getDeclaredTypeInAnnotation(t, lValue, info);\n    } else if (rValue !\u003d null \u0026\u0026 rValue.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 shouldUseFunctionLiteralType((FunctionType) rValue.getJSType(), info, lValue)) {\n        return rValue.getJSType();\n    } else if (info !\u003d null \u0026\u0026 info.hasEnumParameterType()) {\n        if (rValue !\u003d null \u0026\u0026 rValue.getType() \u003d\u003d Token.OBJECTLIT) {\n            return rValue.getJSType();\n        } else {\n            return createEnumTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n        }\n    } else if (info !\u003d null \u0026\u0026 (info.isConstructor() || info.isInterface())) {\n        return createFunctionTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n    } else {\n        return getDeclaredTypeInAnnotation(t, lValue, info);\n    }\n}",
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
          "functionStartLine": 1125,
          "functionName": "getDeclaredPropType",
          "functionAnnotation": "",
          "functionDoc": "Look for a type declaration on a property assignment\n(in an ASSIGN or an object literal key).\n\n@param info The doc info for this property.\n@param lValue The l-value node.\n@param rValue The node that {@code n} is being initialized to,\n    or {@code null} if this is a stub declaration.\n",
          "diff": "@@ -1,17 +1,17 @@\n-private JSType getDeclaredGetPropType(NodeTraversal t, JSDocInfo info, Node n, @Nullable Node rhsValue) {\n+private JSType getDeclaredPropType(NodeTraversal t, JSDocInfo info, Node lValue, @Nullable Node rValue) {\n     if (info !\u003d null \u0026\u0026 info.hasType()) {\n-        return getDeclaredTypeInAnnotation(t, n, info);\n-    } else if (rhsValue !\u003d null \u0026\u0026 rhsValue.getType() \u003d\u003d Token.FUNCTION) {\n-        return rhsValue.getJSType();\n+        return getDeclaredTypeInAnnotation(t, lValue, info);\n+    } else if (rValue !\u003d null \u0026\u0026 rValue.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 shouldUseFunctionLiteralType((FunctionType) rValue.getJSType(), info, lValue)) {\n+        return rValue.getJSType();\n     } else if (info !\u003d null \u0026\u0026 info.hasEnumParameterType()) {\n-        if (rhsValue !\u003d null \u0026\u0026 rhsValue.getType() \u003d\u003d Token.OBJECTLIT) {\n-            return rhsValue.getJSType();\n+        if (rValue !\u003d null \u0026\u0026 rValue.getType() \u003d\u003d Token.OBJECTLIT) {\n+            return rValue.getJSType();\n         } else {\n-            return createEnumTypeFromNodes(rhsValue, n.getQualifiedName(), info, n);\n+            return createEnumTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n         }\n     } else if (info !\u003d null \u0026\u0026 (info.isConstructor() || info.isInterface())) {\n-        return createFunctionTypeFromNodes(rhsValue, n.getQualifiedName(), info, n);\n+        return createFunctionTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n     } else {\n-        return getDeclaredTypeInAnnotation(t, n, info);\n+        return getDeclaredTypeInAnnotation(t, lValue, info);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[t-NodeTraversal, info-JSDocInfo, n-Node, rhsValue-Node(annotations-@Nullable)]",
            "newValue": "[t-NodeTraversal, info-JSDocInfo, lValue-Node, rValue-Node(annotations-@Nullable)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nfix a todo that\u0027s really easy now\n\nR\u003djohnlenz\nDELTA\u003d67  (28 added, 12 deleted, 27 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d417\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@743 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "2/1/11, 11:22 AM",
          "commitName": "7675b68dbd7cfc37b1359fd40be9fdf0b618bc95",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "1/31/11, 8:08 AM",
          "commitNameOld": "2ea78e73e6ace693e18d535560606dfd49c3f9bc",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 1.13,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "private JSType getDeclaredPropType(NodeTraversal t, JSDocInfo info, Node lValue, @Nullable Node rValue) {\n    if (info !\u003d null \u0026\u0026 info.hasType()) {\n        return getDeclaredTypeInAnnotation(t, lValue, info);\n    } else if (rValue !\u003d null \u0026\u0026 rValue.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 shouldUseFunctionLiteralType((FunctionType) rValue.getJSType(), info, lValue)) {\n        return rValue.getJSType();\n    } else if (info !\u003d null \u0026\u0026 info.hasEnumParameterType()) {\n        if (rValue !\u003d null \u0026\u0026 rValue.getType() \u003d\u003d Token.OBJECTLIT) {\n            return rValue.getJSType();\n        } else {\n            return createEnumTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n        }\n    } else if (info !\u003d null \u0026\u0026 (info.isConstructor() || info.isInterface())) {\n        return createFunctionTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n    } else {\n        return getDeclaredTypeInAnnotation(t, lValue, info);\n    }\n}",
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
          "functionStartLine": 1125,
          "functionName": "getDeclaredPropType",
          "functionAnnotation": "",
          "functionDoc": "Look for a type declaration on a property assignment\n(in an ASSIGN or an object literal key).\n\n@param info The doc info for this property.\n@param lValue The l-value node.\n@param rValue The node that {@code n} is being initialized to,\n    or {@code null} if this is a stub declaration.\n",
          "diff": "@@ -1,17 +1,17 @@\n-private JSType getDeclaredGetPropType(NodeTraversal t, JSDocInfo info, Node n, @Nullable Node rhsValue) {\n+private JSType getDeclaredPropType(NodeTraversal t, JSDocInfo info, Node lValue, @Nullable Node rValue) {\n     if (info !\u003d null \u0026\u0026 info.hasType()) {\n-        return getDeclaredTypeInAnnotation(t, n, info);\n-    } else if (rhsValue !\u003d null \u0026\u0026 rhsValue.getType() \u003d\u003d Token.FUNCTION) {\n-        return rhsValue.getJSType();\n+        return getDeclaredTypeInAnnotation(t, lValue, info);\n+    } else if (rValue !\u003d null \u0026\u0026 rValue.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 shouldUseFunctionLiteralType((FunctionType) rValue.getJSType(), info, lValue)) {\n+        return rValue.getJSType();\n     } else if (info !\u003d null \u0026\u0026 info.hasEnumParameterType()) {\n-        if (rhsValue !\u003d null \u0026\u0026 rhsValue.getType() \u003d\u003d Token.OBJECTLIT) {\n-            return rhsValue.getJSType();\n+        if (rValue !\u003d null \u0026\u0026 rValue.getType() \u003d\u003d Token.OBJECTLIT) {\n+            return rValue.getJSType();\n         } else {\n-            return createEnumTypeFromNodes(rhsValue, n.getQualifiedName(), info, n);\n+            return createEnumTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n         }\n     } else if (info !\u003d null \u0026\u0026 (info.isConstructor() || info.isInterface())) {\n-        return createFunctionTypeFromNodes(rhsValue, n.getQualifiedName(), info, n);\n+        return createFunctionTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n     } else {\n-        return getDeclaredTypeInAnnotation(t, n, info);\n+        return getDeclaredTypeInAnnotation(t, lValue, info);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "\nfix a todo that\u0027s really easy now\n\nR\u003djohnlenz\nDELTA\u003d67  (28 added, 12 deleted, 27 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d417\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@743 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "2/1/11, 11:22 AM",
          "commitName": "7675b68dbd7cfc37b1359fd40be9fdf0b618bc95",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "1/31/11, 8:08 AM",
          "commitNameOld": "2ea78e73e6ace693e18d535560606dfd49c3f9bc",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 1.13,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "private JSType getDeclaredPropType(NodeTraversal t, JSDocInfo info, Node lValue, @Nullable Node rValue) {\n    if (info !\u003d null \u0026\u0026 info.hasType()) {\n        return getDeclaredTypeInAnnotation(t, lValue, info);\n    } else if (rValue !\u003d null \u0026\u0026 rValue.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 shouldUseFunctionLiteralType((FunctionType) rValue.getJSType(), info, lValue)) {\n        return rValue.getJSType();\n    } else if (info !\u003d null \u0026\u0026 info.hasEnumParameterType()) {\n        if (rValue !\u003d null \u0026\u0026 rValue.getType() \u003d\u003d Token.OBJECTLIT) {\n            return rValue.getJSType();\n        } else {\n            return createEnumTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n        }\n    } else if (info !\u003d null \u0026\u0026 (info.isConstructor() || info.isInterface())) {\n        return createFunctionTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n    } else {\n        return getDeclaredTypeInAnnotation(t, lValue, info);\n    }\n}",
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
          "functionStartLine": 1125,
          "functionName": "getDeclaredPropType",
          "functionAnnotation": "",
          "functionDoc": "Look for a type declaration on a property assignment\n(in an ASSIGN or an object literal key).\n\n@param info The doc info for this property.\n@param lValue The l-value node.\n@param rValue The node that {@code n} is being initialized to,\n    or {@code null} if this is a stub declaration.\n",
          "diff": "@@ -1,17 +1,17 @@\n-private JSType getDeclaredGetPropType(NodeTraversal t, JSDocInfo info, Node n, @Nullable Node rhsValue) {\n+private JSType getDeclaredPropType(NodeTraversal t, JSDocInfo info, Node lValue, @Nullable Node rValue) {\n     if (info !\u003d null \u0026\u0026 info.hasType()) {\n-        return getDeclaredTypeInAnnotation(t, n, info);\n-    } else if (rhsValue !\u003d null \u0026\u0026 rhsValue.getType() \u003d\u003d Token.FUNCTION) {\n-        return rhsValue.getJSType();\n+        return getDeclaredTypeInAnnotation(t, lValue, info);\n+    } else if (rValue !\u003d null \u0026\u0026 rValue.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 shouldUseFunctionLiteralType((FunctionType) rValue.getJSType(), info, lValue)) {\n+        return rValue.getJSType();\n     } else if (info !\u003d null \u0026\u0026 info.hasEnumParameterType()) {\n-        if (rhsValue !\u003d null \u0026\u0026 rhsValue.getType() \u003d\u003d Token.OBJECTLIT) {\n-            return rhsValue.getJSType();\n+        if (rValue !\u003d null \u0026\u0026 rValue.getType() \u003d\u003d Token.OBJECTLIT) {\n+            return rValue.getJSType();\n         } else {\n-            return createEnumTypeFromNodes(rhsValue, n.getQualifiedName(), info, n);\n+            return createEnumTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n         }\n     } else if (info !\u003d null \u0026\u0026 (info.isConstructor() || info.isInterface())) {\n-        return createFunctionTypeFromNodes(rhsValue, n.getQualifiedName(), info, n);\n+        return createFunctionTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n     } else {\n-        return getDeclaredTypeInAnnotation(t, n, info);\n+        return getDeclaredTypeInAnnotation(t, lValue, info);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Look for a type declaration on a GETPROP node.\n\n@param info The doc info for this property.\n@param n A top-level GETPROP node (it should not be contained inside\n    another GETPROP).\n@param rhsValue The node that {@code n} is being initialized to,\n    or {@code null} if this is a stub declaration.\n",
            "newValue": "Look for a type declaration on a property assignment\n(in an ASSIGN or an object literal key).\n\n@param info The doc info for this property.\n@param lValue The l-value node.\n@param rValue The node that {@code n} is being initialized to,\n    or {@code null} if this is a stub declaration.\n"
          }
        }
      ]
    },
    "2ea78e73e6ace693e18d535560606dfd49c3f9bc": {
      "type": "Ybodychange",
      "commitMessage": "\nClean up type discovery by refactoring to the following algorithm.\n1) When we see a function literal, create the authoritative\ntype for it.\n2) When we see an object literal, create the authoritative\ntype for it.\n3) When we declare a symbol, check to see if it\u0027s assigned to\nan object or function literal, and use that type if it\nmake sense to do so. Otherwise, fall back on the JSDoc info.\nThis should make it a lot easier to give accurate types to object\nliteral properties.\nI didn\u0027t intend to create any functional changes in this CL,\nbut some minor ones were inevitable.\n\nR\u003djohnlenz\nDELTA\u003d618  (320 added, 249 deleted, 49 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d392\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@739 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/31/11, 8:08 AM",
      "commitName": "2ea78e73e6ace693e18d535560606dfd49c3f9bc",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "1/27/11, 10:33 AM",
      "commitNameOld": "70f817ae4f80ac11dd2dfe97babf5896c690fb48",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 3.9,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "private JSType getDeclaredGetPropType(NodeTraversal t, JSDocInfo info, Node n, @Nullable Node rhsValue) {\n    if (info !\u003d null \u0026\u0026 info.hasType()) {\n        return getDeclaredTypeInAnnotation(t, n, info);\n    } else if (rhsValue !\u003d null \u0026\u0026 rhsValue.getType() \u003d\u003d Token.FUNCTION) {\n        return rhsValue.getJSType();\n    } else if (info !\u003d null \u0026\u0026 info.hasEnumParameterType()) {\n        if (rhsValue !\u003d null \u0026\u0026 rhsValue.getType() \u003d\u003d Token.OBJECTLIT) {\n            return rhsValue.getJSType();\n        } else {\n            return createEnumTypeFromNodes(rhsValue, n.getQualifiedName(), info, n);\n        }\n    } else if (info !\u003d null \u0026\u0026 (info.isConstructor() || info.isInterface())) {\n        return createFunctionTypeFromNodes(rhsValue, n.getQualifiedName(), info, n);\n    } else {\n        return getDeclaredTypeInAnnotation(t, n, info);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 1113,
      "functionName": "getDeclaredGetPropType",
      "functionAnnotation": "",
      "functionDoc": "Look for a type declaration on a GETPROP node.\n\n@param info The doc info for this property.\n@param n A top-level GETPROP node (it should not be contained inside\n    another GETPROP).\n@param rhsValue The node that {@code n} is being initialized to,\n    or {@code null} if this is a stub declaration.\n",
      "diff": "@@ -1,11 +1,17 @@\n private JSType getDeclaredGetPropType(NodeTraversal t, JSDocInfo info, Node n, @Nullable Node rhsValue) {\n     if (info !\u003d null \u0026\u0026 info.hasType()) {\n         return getDeclaredTypeInAnnotation(t, n, info);\n-    } else if (info !\u003d null \u0026\u0026 info.hasEnumParameterType()) {\n-        return n.getJSType();\n     } else if (rhsValue !\u003d null \u0026\u0026 rhsValue.getType() \u003d\u003d Token.FUNCTION) {\n         return rhsValue.getJSType();\n+    } else if (info !\u003d null \u0026\u0026 info.hasEnumParameterType()) {\n+        if (rhsValue !\u003d null \u0026\u0026 rhsValue.getType() \u003d\u003d Token.OBJECTLIT) {\n+            return rhsValue.getJSType();\n+        } else {\n+            return createEnumTypeFromNodes(rhsValue, n.getQualifiedName(), info, n);\n+        }\n+    } else if (info !\u003d null \u0026\u0026 (info.isConstructor() || info.isInterface())) {\n+        return createFunctionTypeFromNodes(rhsValue, n.getQualifiedName(), info, n);\n     } else {\n         return getDeclaredTypeInAnnotation(t, n, info);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c64b9350aa206a4ec8deedaca08d6e4f1d84f4e8": {
      "type": "Yparametermetachange",
      "commitMessage": "\nfix bad inference of function member properties declared in\nthe constructor.\n\nR\u003djohnlenz\nDELTA\u003d20  (15 added, 0 deleted, 5 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1169981\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@538 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/9/10, 5:43 PM",
      "commitName": "c64b9350aa206a4ec8deedaca08d6e4f1d84f4e8",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "10/28/10, 8:31 AM",
      "commitNameOld": "3698fee71e3671171c587f932795a8ab8e852cd8",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 12.42,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "actualSource": "private JSType getDeclaredGetPropType(NodeTraversal t, JSDocInfo info, Node n, @Nullable Node rhsValue) {\n    if (info !\u003d null \u0026\u0026 info.hasType()) {\n        return getDeclaredTypeInAnnotation(t, n, info);\n    } else if (info !\u003d null \u0026\u0026 info.hasEnumParameterType()) {\n        return n.getJSType();\n    } else if (rhsValue !\u003d null \u0026\u0026 rhsValue.getType() \u003d\u003d Token.FUNCTION) {\n        return rhsValue.getJSType();\n    } else {\n        return getDeclaredTypeInAnnotation(t, n, info);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 1035,
      "functionName": "getDeclaredGetPropType",
      "functionAnnotation": "",
      "functionDoc": "Look for a type declaration on a GETPROP node.\n\n@param info The doc info for this property.\n@param n A top-level GETPROP node (it should not be contained inside\n    another GETPROP).\n@param rhsValue The node that {@code n} is being initialized to,\n    or {@code null} if this is a stub declaration.\n",
      "diff": "@@ -1,11 +1,11 @@\n-private JSType getDeclaredGetPropType(NodeTraversal t, JSDocInfo info, Node n, Node rhsValue) {\n+private JSType getDeclaredGetPropType(NodeTraversal t, JSDocInfo info, Node n, @Nullable Node rhsValue) {\n     if (info !\u003d null \u0026\u0026 info.hasType()) {\n         return getDeclaredTypeInAnnotation(t, n, info);\n     } else if (info !\u003d null \u0026\u0026 info.hasEnumParameterType()) {\n         return n.getJSType();\n     } else if (rhsValue !\u003d null \u0026\u0026 rhsValue.getType() \u003d\u003d Token.FUNCTION) {\n         return rhsValue.getJSType();\n     } else {\n         return getDeclaredTypeInAnnotation(t, n, info);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[t-NodeTraversal, info-JSDocInfo, n-Node, rhsValue-Node]",
        "newValue": "[t-NodeTraversal, info-JSDocInfo, n-Node, rhsValue-Node(annotations-@Nullable)]"
      }
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,11 @@\n+private JSType getDeclaredGetPropType(NodeTraversal t, JSDocInfo info, Node n, Node rhsValue) {\n+    if (info !\u003d null \u0026\u0026 info.hasType()) {\n+        return getDeclaredTypeInAnnotation(t, n, info);\n+    } else if (info !\u003d null \u0026\u0026 info.hasEnumParameterType()) {\n+        return n.getJSType();\n+    } else if (rhsValue !\u003d null \u0026\u0026 rhsValue.getType() \u003d\u003d Token.FUNCTION) {\n+        return rhsValue.getJSType();\n+    } else {\n+        return getDeclaredTypeInAnnotation(t, n, info);\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private JSType getDeclaredGetPropType(NodeTraversal t, JSDocInfo info, Node n, Node rhsValue) {\n    if (info !\u003d null \u0026\u0026 info.hasType()) {\n        return getDeclaredTypeInAnnotation(t, n, info);\n    } else if (info !\u003d null \u0026\u0026 info.hasEnumParameterType()) {\n        return n.getJSType();\n    } else if (rhsValue !\u003d null \u0026\u0026 rhsValue.getType() \u003d\u003d Token.FUNCTION) {\n        return rhsValue.getJSType();\n    } else {\n        return getDeclaredTypeInAnnotation(t, n, info);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 1104,
      "functionName": "getDeclaredGetPropType",
      "functionAnnotation": "",
      "functionDoc": "Look for a type declaration on a GETPROP node.\n\n@param info The doc info for this property.\n@param n A top-level GETPROP node (it should not be contained inside\n    another GETPROP).\n@param rhsValue The node that {@code n} is being initialized to,\n    or {@code null} if this is a stub declaration.\n"
    }
  }
}