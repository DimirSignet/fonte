{
  "origin": "codeshovel",
  "repositoryName": "Codec-3b",
  "repositoryPath": "/tmp/Codec-3b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DoubleMetaphone.java",
  "functionName": "doubleMetaphone",
  "functionId": "doubleMetaphone___value-String__alternate-boolean",
  "sourceFilePath": "src/java/org/apache/commons/codec/language/DoubleMetaphone.java",
  "functionAnnotation": "",
  "functionDoc": "Encode a value with Double Metaphone, optionally using the alternate\nencoding.\n\n@param value String to encode\n@param alternate use alternate encode\n@return an encoded string\n",
  "functionStartLine": 86,
  "functionEndLine": 191,
  "numCommitsSeen": 32,
  "timeTaken": 2011,
  "changeHistory": [
    "9a0aebb8790cfa3dc6bd236d6e25b78f7eb87425",
    "124b73fed7492b3118c4ea43c28dc0b1bceda032",
    "e5afc85e67e21f11f7c5240f3b762ed661910b3d",
    "f0ff6ed771ce1a795ec84897254ceb008f0e98a1"
  ],
  "changeHistoryShort": {
    "9a0aebb8790cfa3dc6bd236d6e25b78f7eb87425": "Ybodychange",
    "124b73fed7492b3118c4ea43c28dc0b1bceda032": "Ybodychange",
    "e5afc85e67e21f11f7c5240f3b762ed661910b3d": "Ymultichange(Ydocchange,Yformatchange)",
    "f0ff6ed771ce1a795ec84897254ceb008f0e98a1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9a0aebb8790cfa3dc6bd236d6e25b78f7eb87425": {
      "type": "Ybodychange",
      "commitMessage": "Clean ups along with improving code coverge as reported by clover from ~45% to ~85% with more test data.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/codec/trunk@130237 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/7/03, 1:32 PM",
      "commitName": "9a0aebb8790cfa3dc6bd236d6e25b78f7eb87425",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "10/12/03, 12:56 PM",
      "commitNameOld": "124b73fed7492b3118c4ea43c28dc0b1bceda032",
      "commitAuthorOld": "Timothy O\u0027Brien",
      "daysBetweenCommits": 26.07,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "actualSource": "public String doubleMetaphone(String value, boolean alternate) {\n    value \u003d cleanInput(value);\n    if (value \u003d\u003d null) {\n        return null;\n    }\n    boolean slavoGermanic \u003d isSlavoGermanic(value);\n    int index \u003d isSilentStart(value) ? 1 : 0;\n    DoubleMetaphoneResult result \u003d new DoubleMetaphoneResult(this.getMaxCodeLen());\n    while (!result.isComplete() \u0026\u0026 index \u003c\u003d value.length() - 1) {\n        switch(value.charAt(index)) {\n            case \u0027A\u0027:\n            case \u0027E\u0027:\n            case \u0027I\u0027:\n            case \u0027O\u0027:\n            case \u0027U\u0027:\n            case \u0027Y\u0027:\n                index \u003d handleAEIOUY(value, result, index);\n                break;\n            case \u0027B\u0027:\n                result.append(\u0027P\u0027);\n                index \u003d charAt(value, index + 1) \u003d\u003d \u0027B\u0027 ? index + 2 : index + 1;\n                break;\n            case \u0027\\u00C7\u0027:\n                result.append(\u0027S\u0027);\n                index++;\n                break;\n            case \u0027C\u0027:\n                index \u003d handleC(value, result, index);\n                break;\n            case \u0027D\u0027:\n                index \u003d handleD(value, result, index);\n                break;\n            case \u0027F\u0027:\n                result.append(\u0027F\u0027);\n                index \u003d charAt(value, index + 1) \u003d\u003d \u0027F\u0027 ? index + 2 : index + 1;\n                break;\n            case \u0027G\u0027:\n                index \u003d handleG(value, result, index, slavoGermanic);\n                break;\n            case \u0027H\u0027:\n                index \u003d handleH(value, result, index);\n                break;\n            case \u0027J\u0027:\n                index \u003d handleJ(value, result, index, slavoGermanic);\n                break;\n            case \u0027K\u0027:\n                result.append(\u0027K\u0027);\n                index \u003d charAt(value, index + 1) \u003d\u003d \u0027K\u0027 ? index + 2 : index + 1;\n                break;\n            case \u0027L\u0027:\n                index \u003d handleL(value, result, index);\n                break;\n            case \u0027M\u0027:\n                result.append(\u0027M\u0027);\n                index \u003d conditionM0(value, index) ? index + 2 : index + 1;\n                break;\n            case \u0027N\u0027:\n                result.append(\u0027N\u0027);\n                index \u003d charAt(value, index + 1) \u003d\u003d \u0027N\u0027 ? index + 2 : index + 1;\n                break;\n            case \u0027\\u00D1\u0027:\n                result.append(\u0027N\u0027);\n                index++;\n                break;\n            case \u0027P\u0027:\n                index \u003d handleP(value, result, index);\n                break;\n            case \u0027Q\u0027:\n                result.append(\u0027K\u0027);\n                index \u003d charAt(value, index + 1) \u003d\u003d \u0027Q\u0027 ? index + 2 : index + 1;\n                break;\n            case \u0027R\u0027:\n                index \u003d handleR(value, result, index, slavoGermanic);\n                break;\n            case \u0027S\u0027:\n                index \u003d handleS(value, result, index, slavoGermanic);\n                break;\n            case \u0027T\u0027:\n                index \u003d handleT(value, result, index);\n                break;\n            case \u0027V\u0027:\n                result.append(\u0027F\u0027);\n                index \u003d charAt(value, index + 1) \u003d\u003d \u0027V\u0027 ? index + 2 : index + 1;\n                break;\n            case \u0027W\u0027:\n                index \u003d handleW(value, result, index);\n                break;\n            case \u0027X\u0027:\n                index \u003d handleX(value, result, index);\n                break;\n            case \u0027Z\u0027:\n                index \u003d handleZ(value, result, index, slavoGermanic);\n                break;\n            default:\n                index++;\n                break;\n        }\n    }\n    return alternate ? result.getAlternate() : result.getPrimary();\n}",
      "path": "src/java/org/apache/commons/codec/language/DoubleMetaphone.java",
      "functionStartLine": 127,
      "functionName": "doubleMetaphone",
      "functionAnnotation": "",
      "functionDoc": "Encode a value with Double Metaphone, optionally using the alternate\nencoding.\n\n@param value String to encode\n@param alternate use alternate encode\n@return an encoded string\n",
      "diff": "@@ -1,100 +1,100 @@\n public String doubleMetaphone(String value, boolean alternate) {\n     value \u003d cleanInput(value);\n     if (value \u003d\u003d null) {\n         return null;\n     }\n     boolean slavoGermanic \u003d isSlavoGermanic(value);\n     int index \u003d isSilentStart(value) ? 1 : 0;\n-    DoubleMetaphoneResult result \u003d new DoubleMetaphoneResult(maxCodeLen);\n+    DoubleMetaphoneResult result \u003d new DoubleMetaphoneResult(this.getMaxCodeLen());\n     while (!result.isComplete() \u0026\u0026 index \u003c\u003d value.length() - 1) {\n         switch(value.charAt(index)) {\n             case \u0027A\u0027:\n             case \u0027E\u0027:\n             case \u0027I\u0027:\n             case \u0027O\u0027:\n             case \u0027U\u0027:\n             case \u0027Y\u0027:\n                 index \u003d handleAEIOUY(value, result, index);\n                 break;\n             case \u0027B\u0027:\n                 result.append(\u0027P\u0027);\n                 index \u003d charAt(value, index + 1) \u003d\u003d \u0027B\u0027 ? index + 2 : index + 1;\n                 break;\n             case \u0027\\u00C7\u0027:\n                 result.append(\u0027S\u0027);\n                 index++;\n                 break;\n             case \u0027C\u0027:\n                 index \u003d handleC(value, result, index);\n                 break;\n             case \u0027D\u0027:\n                 index \u003d handleD(value, result, index);\n                 break;\n             case \u0027F\u0027:\n                 result.append(\u0027F\u0027);\n                 index \u003d charAt(value, index + 1) \u003d\u003d \u0027F\u0027 ? index + 2 : index + 1;\n                 break;\n             case \u0027G\u0027:\n                 index \u003d handleG(value, result, index, slavoGermanic);\n                 break;\n             case \u0027H\u0027:\n                 index \u003d handleH(value, result, index);\n                 break;\n             case \u0027J\u0027:\n                 index \u003d handleJ(value, result, index, slavoGermanic);\n                 break;\n             case \u0027K\u0027:\n                 result.append(\u0027K\u0027);\n                 index \u003d charAt(value, index + 1) \u003d\u003d \u0027K\u0027 ? index + 2 : index + 1;\n                 break;\n             case \u0027L\u0027:\n                 index \u003d handleL(value, result, index);\n                 break;\n             case \u0027M\u0027:\n                 result.append(\u0027M\u0027);\n                 index \u003d conditionM0(value, index) ? index + 2 : index + 1;\n                 break;\n             case \u0027N\u0027:\n                 result.append(\u0027N\u0027);\n                 index \u003d charAt(value, index + 1) \u003d\u003d \u0027N\u0027 ? index + 2 : index + 1;\n                 break;\n             case \u0027\\u00D1\u0027:\n                 result.append(\u0027N\u0027);\n                 index++;\n                 break;\n             case \u0027P\u0027:\n                 index \u003d handleP(value, result, index);\n                 break;\n             case \u0027Q\u0027:\n                 result.append(\u0027K\u0027);\n                 index \u003d charAt(value, index + 1) \u003d\u003d \u0027Q\u0027 ? index + 2 : index + 1;\n                 break;\n             case \u0027R\u0027:\n                 index \u003d handleR(value, result, index, slavoGermanic);\n                 break;\n             case \u0027S\u0027:\n                 index \u003d handleS(value, result, index, slavoGermanic);\n                 break;\n             case \u0027T\u0027:\n                 index \u003d handleT(value, result, index);\n                 break;\n             case \u0027V\u0027:\n                 result.append(\u0027F\u0027);\n                 index \u003d charAt(value, index + 1) \u003d\u003d \u0027V\u0027 ? index + 2 : index + 1;\n                 break;\n             case \u0027W\u0027:\n                 index \u003d handleW(value, result, index);\n                 break;\n             case \u0027X\u0027:\n                 index \u003d handleX(value, result, index);\n                 break;\n             case \u0027Z\u0027:\n                 index \u003d handleZ(value, result, index, slavoGermanic);\n                 break;\n             default:\n                 index++;\n                 break;\n         }\n     }\n     return alternate ? result.getAlternate() : result.getPrimary();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "124b73fed7492b3118c4ea43c28dc0b1bceda032": {
      "type": "Ybodychange",
      "commitMessage": "Removed all checkstyle violations from Base64, and the\nlanguage encoders.  Most of the checkstyle violations fixed\nwere violations dealing with the placement of operators\non a newline instead of on the end of the previous line.\n\nIn addition to the checkstyle fixes, DoubleMetaphone now\nhandles two cases C with a Cedilla and N with a tilde (ene).\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/codec/trunk@130214 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/12/03, 12:56 PM",
      "commitName": "124b73fed7492b3118c4ea43c28dc0b1bceda032",
      "commitAuthor": "Timothy O\u0027Brien",
      "commitDateOld": "10/5/03, 2:45 PM",
      "commitNameOld": "c76ca5ec26d4b1fd434bc47271ef54fc58fb35d2",
      "commitAuthorOld": "Timothy O\u0027Brien",
      "daysBetweenCommits": 6.92,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "public String doubleMetaphone(String value, boolean alternate) {\n    value \u003d cleanInput(value);\n    if (value \u003d\u003d null) {\n        return null;\n    }\n    boolean slavoGermanic \u003d isSlavoGermanic(value);\n    int index \u003d isSilentStart(value) ? 1 : 0;\n    DoubleMetaphoneResult result \u003d new DoubleMetaphoneResult(maxCodeLen);\n    while (!result.isComplete() \u0026\u0026 index \u003c\u003d value.length() - 1) {\n        switch(value.charAt(index)) {\n            case \u0027A\u0027:\n            case \u0027E\u0027:\n            case \u0027I\u0027:\n            case \u0027O\u0027:\n            case \u0027U\u0027:\n            case \u0027Y\u0027:\n                index \u003d handleAEIOUY(value, result, index);\n                break;\n            case \u0027B\u0027:\n                result.append(\u0027P\u0027);\n                index \u003d charAt(value, index + 1) \u003d\u003d \u0027B\u0027 ? index + 2 : index + 1;\n                break;\n            case \u0027\\u00C7\u0027:\n                result.append(\u0027S\u0027);\n                index++;\n                break;\n            case \u0027C\u0027:\n                index \u003d handleC(value, result, index);\n                break;\n            case \u0027D\u0027:\n                index \u003d handleD(value, result, index);\n                break;\n            case \u0027F\u0027:\n                result.append(\u0027F\u0027);\n                index \u003d charAt(value, index + 1) \u003d\u003d \u0027F\u0027 ? index + 2 : index + 1;\n                break;\n            case \u0027G\u0027:\n                index \u003d handleG(value, result, index, slavoGermanic);\n                break;\n            case \u0027H\u0027:\n                index \u003d handleH(value, result, index);\n                break;\n            case \u0027J\u0027:\n                index \u003d handleJ(value, result, index, slavoGermanic);\n                break;\n            case \u0027K\u0027:\n                result.append(\u0027K\u0027);\n                index \u003d charAt(value, index + 1) \u003d\u003d \u0027K\u0027 ? index + 2 : index + 1;\n                break;\n            case \u0027L\u0027:\n                index \u003d handleL(value, result, index);\n                break;\n            case \u0027M\u0027:\n                result.append(\u0027M\u0027);\n                index \u003d conditionM0(value, index) ? index + 2 : index + 1;\n                break;\n            case \u0027N\u0027:\n                result.append(\u0027N\u0027);\n                index \u003d charAt(value, index + 1) \u003d\u003d \u0027N\u0027 ? index + 2 : index + 1;\n                break;\n            case \u0027\\u00D1\u0027:\n                result.append(\u0027N\u0027);\n                index++;\n                break;\n            case \u0027P\u0027:\n                index \u003d handleP(value, result, index);\n                break;\n            case \u0027Q\u0027:\n                result.append(\u0027K\u0027);\n                index \u003d charAt(value, index + 1) \u003d\u003d \u0027Q\u0027 ? index + 2 : index + 1;\n                break;\n            case \u0027R\u0027:\n                index \u003d handleR(value, result, index, slavoGermanic);\n                break;\n            case \u0027S\u0027:\n                index \u003d handleS(value, result, index, slavoGermanic);\n                break;\n            case \u0027T\u0027:\n                index \u003d handleT(value, result, index);\n                break;\n            case \u0027V\u0027:\n                result.append(\u0027F\u0027);\n                index \u003d charAt(value, index + 1) \u003d\u003d \u0027V\u0027 ? index + 2 : index + 1;\n                break;\n            case \u0027W\u0027:\n                index \u003d handleW(value, result, index);\n                break;\n            case \u0027X\u0027:\n                index \u003d handleX(value, result, index);\n                break;\n            case \u0027Z\u0027:\n                index \u003d handleZ(value, result, index, slavoGermanic);\n                break;\n            default:\n                index++;\n                break;\n        }\n    }\n    return alternate ? result.getAlternate() : result.getPrimary();\n}",
      "path": "src/java/org/apache/commons/codec/language/DoubleMetaphone.java",
      "functionStartLine": 126,
      "functionName": "doubleMetaphone",
      "functionAnnotation": "",
      "functionDoc": "Encode a value with Double Metaphone, optionally using the alternate\nencoding.\n\n@param value String to encode\n@param alternate use alternate encode\n@return an encoded string\n",
      "diff": "@@ -1,92 +1,100 @@\n public String doubleMetaphone(String value, boolean alternate) {\n     value \u003d cleanInput(value);\n     if (value \u003d\u003d null) {\n         return null;\n     }\n     boolean slavoGermanic \u003d isSlavoGermanic(value);\n     int index \u003d isSilentStart(value) ? 1 : 0;\n     DoubleMetaphoneResult result \u003d new DoubleMetaphoneResult(maxCodeLen);\n     while (!result.isComplete() \u0026\u0026 index \u003c\u003d value.length() - 1) {\n         switch(value.charAt(index)) {\n             case \u0027A\u0027:\n             case \u0027E\u0027:\n             case \u0027I\u0027:\n             case \u0027O\u0027:\n             case \u0027U\u0027:\n             case \u0027Y\u0027:\n                 index \u003d handleAEIOUY(value, result, index);\n                 break;\n             case \u0027B\u0027:\n                 result.append(\u0027P\u0027);\n                 index \u003d charAt(value, index + 1) \u003d\u003d \u0027B\u0027 ? index + 2 : index + 1;\n                 break;\n+            case \u0027\\u00C7\u0027:\n+                result.append(\u0027S\u0027);\n+                index++;\n+                break;\n             case \u0027C\u0027:\n                 index \u003d handleC(value, result, index);\n                 break;\n             case \u0027D\u0027:\n                 index \u003d handleD(value, result, index);\n                 break;\n             case \u0027F\u0027:\n                 result.append(\u0027F\u0027);\n                 index \u003d charAt(value, index + 1) \u003d\u003d \u0027F\u0027 ? index + 2 : index + 1;\n                 break;\n             case \u0027G\u0027:\n                 index \u003d handleG(value, result, index, slavoGermanic);\n                 break;\n             case \u0027H\u0027:\n                 index \u003d handleH(value, result, index);\n                 break;\n             case \u0027J\u0027:\n                 index \u003d handleJ(value, result, index, slavoGermanic);\n                 break;\n             case \u0027K\u0027:\n                 result.append(\u0027K\u0027);\n                 index \u003d charAt(value, index + 1) \u003d\u003d \u0027K\u0027 ? index + 2 : index + 1;\n                 break;\n             case \u0027L\u0027:\n                 index \u003d handleL(value, result, index);\n                 break;\n             case \u0027M\u0027:\n                 result.append(\u0027M\u0027);\n                 index \u003d conditionM0(value, index) ? index + 2 : index + 1;\n                 break;\n             case \u0027N\u0027:\n                 result.append(\u0027N\u0027);\n                 index \u003d charAt(value, index + 1) \u003d\u003d \u0027N\u0027 ? index + 2 : index + 1;\n                 break;\n+            case \u0027\\u00D1\u0027:\n+                result.append(\u0027N\u0027);\n+                index++;\n+                break;\n             case \u0027P\u0027:\n                 index \u003d handleP(value, result, index);\n                 break;\n             case \u0027Q\u0027:\n                 result.append(\u0027K\u0027);\n                 index \u003d charAt(value, index + 1) \u003d\u003d \u0027Q\u0027 ? index + 2 : index + 1;\n                 break;\n             case \u0027R\u0027:\n                 index \u003d handleR(value, result, index, slavoGermanic);\n                 break;\n             case \u0027S\u0027:\n                 index \u003d handleS(value, result, index, slavoGermanic);\n                 break;\n             case \u0027T\u0027:\n                 index \u003d handleT(value, result, index);\n                 break;\n             case \u0027V\u0027:\n                 result.append(\u0027F\u0027);\n                 index \u003d charAt(value, index + 1) \u003d\u003d \u0027V\u0027 ? index + 2 : index + 1;\n                 break;\n             case \u0027W\u0027:\n                 index \u003d handleW(value, result, index);\n                 break;\n             case \u0027X\u0027:\n                 index \u003d handleX(value, result, index);\n                 break;\n             case \u0027Z\u0027:\n                 index \u003d handleZ(value, result, index, slavoGermanic);\n                 break;\n             default:\n                 index++;\n                 break;\n         }\n     }\n     return alternate ? result.getAlternate() : result.getPrimary();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e5afc85e67e21f11f7c5240f3b762ed661910b3d": {
      "type": "Ymultichange(Ydocchange,Yformatchange)",
      "commitMessage": "Checkstyle improvements\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/codec/trunk@130156 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/18/03, 11:43 AM",
      "commitName": "e5afc85e67e21f11f7c5240f3b762ed661910b3d",
      "commitAuthor": "Timothy O\u0027Brien",
      "subchanges": [
        {
          "type": "Ydocchange",
          "commitMessage": "Checkstyle improvements\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/codec/trunk@130156 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "6/18/03, 11:43 AM",
          "commitName": "e5afc85e67e21f11f7c5240f3b762ed661910b3d",
          "commitAuthor": "Timothy O\u0027Brien",
          "commitDateOld": "6/18/03, 10:46 AM",
          "commitNameOld": "f0ff6ed771ce1a795ec84897254ceb008f0e98a1",
          "commitAuthorOld": "Timothy O\u0027Brien",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public String doubleMetaphone(String value, boolean alternate) {\n    value \u003d cleanInput(value);\n    if (value \u003d\u003d null) {\n        return null;\n    }\n    boolean slavoGermanic \u003d isSlavoGermanic(value);\n    int index \u003d isSilentStart(value) ? 1 : 0;\n    DoubleMetaphoneResult result \u003d new DoubleMetaphoneResult(maxCodeLen);\n    while (!result.isComplete() \u0026\u0026 index \u003c\u003d value.length() - 1) {\n        switch(value.charAt(index)) {\n            case \u0027A\u0027:\n            case \u0027E\u0027:\n            case \u0027I\u0027:\n            case \u0027O\u0027:\n            case \u0027U\u0027:\n            case \u0027Y\u0027:\n                index \u003d handleAEIOUY(value, result, index);\n                break;\n            case \u0027B\u0027:\n                result.append(\u0027P\u0027);\n                index \u003d charAt(value, index + 1) \u003d\u003d \u0027B\u0027 ? index + 2 : index + 1;\n                break;\n            case \u0027C\u0027:\n                index \u003d handleC(value, result, index);\n                break;\n            case \u0027D\u0027:\n                index \u003d handleD(value, result, index);\n                break;\n            case \u0027F\u0027:\n                result.append(\u0027F\u0027);\n                index \u003d charAt(value, index + 1) \u003d\u003d \u0027F\u0027 ? index + 2 : index + 1;\n                break;\n            case \u0027G\u0027:\n                index \u003d handleG(value, result, index, slavoGermanic);\n                break;\n            case \u0027H\u0027:\n                index \u003d handleH(value, result, index);\n                break;\n            case \u0027J\u0027:\n                index \u003d handleJ(value, result, index, slavoGermanic);\n                break;\n            case \u0027K\u0027:\n                result.append(\u0027K\u0027);\n                index \u003d charAt(value, index + 1) \u003d\u003d \u0027K\u0027 ? index + 2 : index + 1;\n                break;\n            case \u0027L\u0027:\n                index \u003d handleL(value, result, index);\n                break;\n            case \u0027M\u0027:\n                result.append(\u0027M\u0027);\n                index \u003d conditionM0(value, index) ? index + 2 : index + 1;\n                break;\n            case \u0027N\u0027:\n                result.append(\u0027N\u0027);\n                index \u003d charAt(value, index + 1) \u003d\u003d \u0027N\u0027 ? index + 2 : index + 1;\n                break;\n            case \u0027P\u0027:\n                index \u003d handleP(value, result, index);\n                break;\n            case \u0027Q\u0027:\n                result.append(\u0027K\u0027);\n                index \u003d charAt(value, index + 1) \u003d\u003d \u0027Q\u0027 ? index + 2 : index + 1;\n                break;\n            case \u0027R\u0027:\n                index \u003d handleR(value, result, index, slavoGermanic);\n                break;\n            case \u0027S\u0027:\n                index \u003d handleS(value, result, index, slavoGermanic);\n                break;\n            case \u0027T\u0027:\n                index \u003d handleT(value, result, index);\n                break;\n            case \u0027V\u0027:\n                result.append(\u0027F\u0027);\n                index \u003d charAt(value, index + 1) \u003d\u003d \u0027V\u0027 ? index + 2 : index + 1;\n                break;\n            case \u0027W\u0027:\n                index \u003d handleW(value, result, index);\n                break;\n            case \u0027X\u0027:\n                index \u003d handleX(value, result, index);\n                break;\n            case \u0027Z\u0027:\n                index \u003d handleZ(value, result, index, slavoGermanic);\n                break;\n            default:\n                index++;\n                break;\n        }\n    }\n    return alternate ? result.getAlternate() : result.getPrimary();\n}",
          "path": "src/java/org/apache/commons/codec/language/DoubleMetaphone.java",
          "functionStartLine": 123,
          "functionName": "doubleMetaphone",
          "functionAnnotation": "",
          "functionDoc": "Encode a value with Double Metaphone, optionally using the alternate\nencoding.\n\n@param value String to encode\n@param alternate use alternate encode\n@return an encoded string\n",
          "diff": "",
          "extendedDetails": {
            "oldValue": "Encode a value with Double Metaphone, optionally using the alternate\nencoding.\n",
            "newValue": "Encode a value with Double Metaphone, optionally using the alternate\nencoding.\n\n@param value String to encode\n@param alternate use alternate encode\n@return an encoded string\n"
          }
        },
        {
          "type": "Yformatchange",
          "commitMessage": "Checkstyle improvements\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/codec/trunk@130156 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "6/18/03, 11:43 AM",
          "commitName": "e5afc85e67e21f11f7c5240f3b762ed661910b3d",
          "commitAuthor": "Timothy O\u0027Brien",
          "commitDateOld": "6/18/03, 10:46 AM",
          "commitNameOld": "f0ff6ed771ce1a795ec84897254ceb008f0e98a1",
          "commitAuthorOld": "Timothy O\u0027Brien",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public String doubleMetaphone(String value, boolean alternate) {\n    value \u003d cleanInput(value);\n    if (value \u003d\u003d null) {\n        return null;\n    }\n    boolean slavoGermanic \u003d isSlavoGermanic(value);\n    int index \u003d isSilentStart(value) ? 1 : 0;\n    DoubleMetaphoneResult result \u003d new DoubleMetaphoneResult(maxCodeLen);\n    while (!result.isComplete() \u0026\u0026 index \u003c\u003d value.length() - 1) {\n        switch(value.charAt(index)) {\n            case \u0027A\u0027:\n            case \u0027E\u0027:\n            case \u0027I\u0027:\n            case \u0027O\u0027:\n            case \u0027U\u0027:\n            case \u0027Y\u0027:\n                index \u003d handleAEIOUY(value, result, index);\n                break;\n            case \u0027B\u0027:\n                result.append(\u0027P\u0027);\n                index \u003d charAt(value, index + 1) \u003d\u003d \u0027B\u0027 ? index + 2 : index + 1;\n                break;\n            case \u0027C\u0027:\n                index \u003d handleC(value, result, index);\n                break;\n            case \u0027D\u0027:\n                index \u003d handleD(value, result, index);\n                break;\n            case \u0027F\u0027:\n                result.append(\u0027F\u0027);\n                index \u003d charAt(value, index + 1) \u003d\u003d \u0027F\u0027 ? index + 2 : index + 1;\n                break;\n            case \u0027G\u0027:\n                index \u003d handleG(value, result, index, slavoGermanic);\n                break;\n            case \u0027H\u0027:\n                index \u003d handleH(value, result, index);\n                break;\n            case \u0027J\u0027:\n                index \u003d handleJ(value, result, index, slavoGermanic);\n                break;\n            case \u0027K\u0027:\n                result.append(\u0027K\u0027);\n                index \u003d charAt(value, index + 1) \u003d\u003d \u0027K\u0027 ? index + 2 : index + 1;\n                break;\n            case \u0027L\u0027:\n                index \u003d handleL(value, result, index);\n                break;\n            case \u0027M\u0027:\n                result.append(\u0027M\u0027);\n                index \u003d conditionM0(value, index) ? index + 2 : index + 1;\n                break;\n            case \u0027N\u0027:\n                result.append(\u0027N\u0027);\n                index \u003d charAt(value, index + 1) \u003d\u003d \u0027N\u0027 ? index + 2 : index + 1;\n                break;\n            case \u0027P\u0027:\n                index \u003d handleP(value, result, index);\n                break;\n            case \u0027Q\u0027:\n                result.append(\u0027K\u0027);\n                index \u003d charAt(value, index + 1) \u003d\u003d \u0027Q\u0027 ? index + 2 : index + 1;\n                break;\n            case \u0027R\u0027:\n                index \u003d handleR(value, result, index, slavoGermanic);\n                break;\n            case \u0027S\u0027:\n                index \u003d handleS(value, result, index, slavoGermanic);\n                break;\n            case \u0027T\u0027:\n                index \u003d handleT(value, result, index);\n                break;\n            case \u0027V\u0027:\n                result.append(\u0027F\u0027);\n                index \u003d charAt(value, index + 1) \u003d\u003d \u0027V\u0027 ? index + 2 : index + 1;\n                break;\n            case \u0027W\u0027:\n                index \u003d handleW(value, result, index);\n                break;\n            case \u0027X\u0027:\n                index \u003d handleX(value, result, index);\n                break;\n            case \u0027Z\u0027:\n                index \u003d handleZ(value, result, index, slavoGermanic);\n                break;\n            default:\n                index++;\n                break;\n        }\n    }\n    return alternate ? result.getAlternate() : result.getPrimary();\n}",
          "path": "src/java/org/apache/commons/codec/language/DoubleMetaphone.java",
          "functionStartLine": 123,
          "functionName": "doubleMetaphone",
          "functionAnnotation": "",
          "functionDoc": "Encode a value with Double Metaphone, optionally using the alternate\nencoding.\n\n@param value String to encode\n@param alternate use alternate encode\n@return an encoded string\n",
          "diff": "",
          "extendedDetails": {}
        }
      ]
    },
    "f0ff6ed771ce1a795ec84897254ceb008f0e98a1": {
      "type": "Yintroduced",
      "commitMessage": "Removed characters which were breaking GUMP build.  Need to replace character literals with Unicode codes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/codec/trunk@130155 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/18/03, 10:46 AM",
      "commitName": "f0ff6ed771ce1a795ec84897254ceb008f0e98a1",
      "commitAuthor": "Timothy O\u0027Brien",
      "diff": "@@ -0,0 +1,92 @@\n+public String doubleMetaphone(String value, boolean alternate) {\n+    value \u003d cleanInput(value);\n+    if (value \u003d\u003d null) {\n+        return null;\n+    }\n+    boolean slavoGermanic \u003d isSlavoGermanic(value);\n+    int index \u003d isSilentStart(value) ? 1 : 0;\n+    DoubleMetaphoneResult result \u003d new DoubleMetaphoneResult(maxCodeLen);\n+    while (!result.isComplete() \u0026\u0026 index \u003c\u003d value.length() - 1) {\n+        switch(value.charAt(index)) {\n+            case \u0027A\u0027:\n+            case \u0027E\u0027:\n+            case \u0027I\u0027:\n+            case \u0027O\u0027:\n+            case \u0027U\u0027:\n+            case \u0027Y\u0027:\n+                index \u003d handleAEIOUY(value, result, index);\n+                break;\n+            case \u0027B\u0027:\n+                result.append(\u0027P\u0027);\n+                index \u003d charAt(value, index + 1) \u003d\u003d \u0027B\u0027 ? index + 2 : index + 1;\n+                break;\n+            case \u0027C\u0027:\n+                index \u003d handleC(value, result, index);\n+                break;\n+            case \u0027D\u0027:\n+                index \u003d handleD(value, result, index);\n+                break;\n+            case \u0027F\u0027:\n+                result.append(\u0027F\u0027);\n+                index \u003d charAt(value, index + 1) \u003d\u003d \u0027F\u0027 ? index + 2 : index + 1;\n+                break;\n+            case \u0027G\u0027:\n+                index \u003d handleG(value, result, index, slavoGermanic);\n+                break;\n+            case \u0027H\u0027:\n+                index \u003d handleH(value, result, index);\n+                break;\n+            case \u0027J\u0027:\n+                index \u003d handleJ(value, result, index, slavoGermanic);\n+                break;\n+            case \u0027K\u0027:\n+                result.append(\u0027K\u0027);\n+                index \u003d charAt(value, index + 1) \u003d\u003d \u0027K\u0027 ? index + 2 : index + 1;\n+                break;\n+            case \u0027L\u0027:\n+                index \u003d handleL(value, result, index);\n+                break;\n+            case \u0027M\u0027:\n+                result.append(\u0027M\u0027);\n+                index \u003d conditionM0(value, index) ? index + 2 : index + 1;\n+                break;\n+            case \u0027N\u0027:\n+                result.append(\u0027N\u0027);\n+                index \u003d charAt(value, index + 1) \u003d\u003d \u0027N\u0027 ? index + 2 : index + 1;\n+                break;\n+            case \u0027P\u0027:\n+                index \u003d handleP(value, result, index);\n+                break;\n+            case \u0027Q\u0027:\n+                result.append(\u0027K\u0027);\n+                index \u003d charAt(value, index + 1) \u003d\u003d \u0027Q\u0027 ? index + 2 : index + 1;\n+                break;\n+            case \u0027R\u0027:\n+                index \u003d handleR(value, result, index, slavoGermanic);\n+                break;\n+            case \u0027S\u0027:\n+                index \u003d handleS(value, result, index, slavoGermanic);\n+                break;\n+            case \u0027T\u0027:\n+                index \u003d handleT(value, result, index);\n+                break;\n+            case \u0027V\u0027:\n+                result.append(\u0027F\u0027);\n+                index \u003d charAt(value, index + 1) \u003d\u003d \u0027V\u0027 ? index + 2 : index + 1;\n+                break;\n+            case \u0027W\u0027:\n+                index \u003d handleW(value, result, index);\n+                break;\n+            case \u0027X\u0027:\n+                index \u003d handleX(value, result, index);\n+                break;\n+            case \u0027Z\u0027:\n+                index \u003d handleZ(value, result, index, slavoGermanic);\n+                break;\n+            default:\n+                index++;\n+                break;\n+        }\n+    }\n+    return alternate ? result.getAlternate() : result.getPrimary();\n+}\n\\ No newline at end of file\n",
      "actualSource": "public String doubleMetaphone(String value, boolean alternate) {\n    value \u003d cleanInput(value);\n    if (value \u003d\u003d null) {\n        return null;\n    }\n    boolean slavoGermanic \u003d isSlavoGermanic(value);\n    int index \u003d isSilentStart(value) ? 1 : 0;\n    DoubleMetaphoneResult result \u003d new DoubleMetaphoneResult(maxCodeLen);\n    while (!result.isComplete() \u0026\u0026 index \u003c\u003d value.length() - 1) {\n        switch(value.charAt(index)) {\n            case \u0027A\u0027:\n            case \u0027E\u0027:\n            case \u0027I\u0027:\n            case \u0027O\u0027:\n            case \u0027U\u0027:\n            case \u0027Y\u0027:\n                index \u003d handleAEIOUY(value, result, index);\n                break;\n            case \u0027B\u0027:\n                result.append(\u0027P\u0027);\n                index \u003d charAt(value, index + 1) \u003d\u003d \u0027B\u0027 ? index + 2 : index + 1;\n                break;\n            case \u0027C\u0027:\n                index \u003d handleC(value, result, index);\n                break;\n            case \u0027D\u0027:\n                index \u003d handleD(value, result, index);\n                break;\n            case \u0027F\u0027:\n                result.append(\u0027F\u0027);\n                index \u003d charAt(value, index + 1) \u003d\u003d \u0027F\u0027 ? index + 2 : index + 1;\n                break;\n            case \u0027G\u0027:\n                index \u003d handleG(value, result, index, slavoGermanic);\n                break;\n            case \u0027H\u0027:\n                index \u003d handleH(value, result, index);\n                break;\n            case \u0027J\u0027:\n                index \u003d handleJ(value, result, index, slavoGermanic);\n                break;\n            case \u0027K\u0027:\n                result.append(\u0027K\u0027);\n                index \u003d charAt(value, index + 1) \u003d\u003d \u0027K\u0027 ? index + 2 : index + 1;\n                break;\n            case \u0027L\u0027:\n                index \u003d handleL(value, result, index);\n                break;\n            case \u0027M\u0027:\n                result.append(\u0027M\u0027);\n                index \u003d conditionM0(value, index) ? index + 2 : index + 1;\n                break;\n            case \u0027N\u0027:\n                result.append(\u0027N\u0027);\n                index \u003d charAt(value, index + 1) \u003d\u003d \u0027N\u0027 ? index + 2 : index + 1;\n                break;\n            case \u0027P\u0027:\n                index \u003d handleP(value, result, index);\n                break;\n            case \u0027Q\u0027:\n                result.append(\u0027K\u0027);\n                index \u003d charAt(value, index + 1) \u003d\u003d \u0027Q\u0027 ? index + 2 : index + 1;\n                break;\n            case \u0027R\u0027:\n                index \u003d handleR(value, result, index, slavoGermanic);\n                break;\n            case \u0027S\u0027:\n                index \u003d handleS(value, result, index, slavoGermanic);\n                break;\n            case \u0027T\u0027:\n                index \u003d handleT(value, result, index);\n                break;\n            case \u0027V\u0027:\n                result.append(\u0027F\u0027);\n                index \u003d charAt(value, index + 1) \u003d\u003d \u0027V\u0027 ? index + 2 : index + 1;\n                break;\n            case \u0027W\u0027:\n                index \u003d handleW(value, result, index);\n                break;\n            case \u0027X\u0027:\n                index \u003d handleX(value, result, index);\n                break;\n            case \u0027Z\u0027:\n                index \u003d handleZ(value, result, index, slavoGermanic);\n                break;\n            default:\n                index++;\n                break;\n        }\n    }\n    return alternate ? result.getAlternate() : result.getPrimary();\n}",
      "path": "src/java/org/apache/commons/codec/language/DoubleMetaphone.java",
      "functionStartLine": 107,
      "functionName": "doubleMetaphone",
      "functionAnnotation": "",
      "functionDoc": "Encode a value with Double Metaphone, optionally using the alternate\nencoding.\n"
    }
  }
}