{
  "origin": "codeshovel",
  "repositoryName": "Time-16b",
  "repositoryPath": "/tmp/Time-16b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DateTimeFormatterBuilder.java",
  "functionName": "appendFraction",
  "functionId": "appendFraction___fieldType-DateTimeFieldType__minDigits-int__maxDigits-int",
  "sourceFilePath": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
  "functionAnnotation": "",
  "functionDoc": "Instructs the printer to emit a remainder of time as a decimal fraction,\nwithout decimal point. For example, if the field is specified as\nminuteOfHour and the time is 12:30:45, the value printed is 75. A\ndecimal point is implied, so the fraction is 0.75, or three-quarters of\na minute.\n\n@param fieldType type of field to append\n@param minDigits minimum number of digits to print.\n@param maxDigits maximum number of digits to print or parse.\n@return this DateTimeFormatterBuilder, for chaining\n@throws IllegalArgumentException if field type is null\n",
  "functionStartLine": 530,
  "functionEndLine": 542,
  "numCommitsSeen": 86,
  "timeTaken": 7109,
  "changeHistory": [
    "df4a82f4fb46cc2248280c462e18f08d55a3d112",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1",
    "ce94280c73fbc6ce9331792e3003e75356ab6ba6",
    "6cad802018b6b82ea4df53aaf91a0bbc98b2f9a3",
    "9316fce1b432caa8b56ff6056d916f0a0aaefc1a",
    "b6272b13444f16bd60245a5ff8f339e8fee1c64d",
    "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb"
  ],
  "changeHistoryShort": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": "Yfilerename",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": "Yfilerename",
    "ce94280c73fbc6ce9331792e3003e75356ab6ba6": "Ydocchange",
    "6cad802018b6b82ea4df53aaf91a0bbc98b2f9a3": "Ybodychange",
    "9316fce1b432caa8b56ff6056d916f0a0aaefc1a": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "b6272b13444f16bd60245a5ff8f339e8fee1c64d": "Ydocchange",
    "0e07ac6b2cff63550d7df336355ca63cc05aa40b": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb": "Yintroduced"
  },
  "changeHistoryDetails": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": {
      "type": "Yfilerename",
      "commitMessage": "Remove JodaTime folder moving files to top level\n",
      "commitDate": "5/16/11, 10:02 AM",
      "commitName": "df4a82f4fb46cc2248280c462e18f08d55a3d112",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "5/16/11, 9:58 AM",
      "commitNameOld": "72b22654962284bac59c2777131b42a2d1f53228",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public DateTimeFormatterBuilder appendFraction(DateTimeFieldType fieldType, int minDigits, int maxDigits) {\n    if (fieldType \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Field type must not be null\");\n    }\n    if (maxDigits \u003c minDigits) {\n        maxDigits \u003d minDigits;\n    }\n    if (minDigits \u003c 0 || maxDigits \u003c\u003d 0) {\n        throw new IllegalArgumentException();\n    }\n    return append0(new Fraction(fieldType, minDigits, maxDigits));\n}",
      "path": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
      "functionStartLine": 530,
      "functionName": "appendFraction",
      "functionAnnotation": "",
      "functionDoc": "Instructs the printer to emit a remainder of time as a decimal fraction,\nwithout decimal point. For example, if the field is specified as\nminuteOfHour and the time is 12:30:45, the value printed is 75. A\ndecimal point is implied, so the fraction is 0.75, or three-quarters of\na minute.\n\n@param fieldType type of field to append\n@param minDigits minimum number of digits to print.\n@param maxDigits maximum number of digits to print or parse.\n@return this DateTimeFormatterBuilder, for chaining\n@throws IllegalArgumentException if field type is null\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
        "newPath": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java"
      }
    },
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": {
      "type": "Yfilerename",
      "commitMessage": "Convert to maven 2\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1540 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/8/10, 5:17 PM",
      "commitName": "53feb3fa56af7260e607844524b7e5a9be49ecc1",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/8/10, 5:02 PM",
      "commitNameOld": "7fa2ceaf5d95d050095432aa646ea803aa35e122",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public DateTimeFormatterBuilder appendFraction(DateTimeFieldType fieldType, int minDigits, int maxDigits) {\n    if (fieldType \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Field type must not be null\");\n    }\n    if (maxDigits \u003c minDigits) {\n        maxDigits \u003d minDigits;\n    }\n    if (minDigits \u003c 0 || maxDigits \u003c\u003d 0) {\n        throw new IllegalArgumentException();\n    }\n    return append0(new Fraction(fieldType, minDigits, maxDigits));\n}",
      "path": "JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
      "functionStartLine": 530,
      "functionName": "appendFraction",
      "functionAnnotation": "",
      "functionDoc": "Instructs the printer to emit a remainder of time as a decimal fraction,\nwithout decimal point. For example, if the field is specified as\nminuteOfHour and the time is 12:30:45, the value printed is 75. A\ndecimal point is implied, so the fraction is 0.75, or three-quarters of\na minute.\n\n@param fieldType type of field to append\n@param minDigits minimum number of digits to print.\n@param maxDigits maximum number of digits to print or parse.\n@return this DateTimeFormatterBuilder, for chaining\n@throws IllegalArgumentException if field type is null\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java",
        "newPath": "JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java"
      }
    },
    "ce94280c73fbc6ce9331792e3003e75356ab6ba6": {
      "type": "Ydocchange",
      "commitMessage": "Enhance javadoc\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1427 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "11/7/09, 12:07 PM",
      "commitName": "ce94280c73fbc6ce9331792e3003e75356ab6ba6",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "11/4/09, 3:55 PM",
      "commitNameOld": "3f1e047c898c9c925e1faac33bb07e1cb05d88cb",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 2.84,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "actualSource": "public DateTimeFormatterBuilder appendFraction(DateTimeFieldType fieldType, int minDigits, int maxDigits) {\n    if (fieldType \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Field type must not be null\");\n    }\n    if (maxDigits \u003c minDigits) {\n        maxDigits \u003d minDigits;\n    }\n    if (minDigits \u003c 0 || maxDigits \u003c\u003d 0) {\n        throw new IllegalArgumentException();\n    }\n    return append0(new Fraction(fieldType, minDigits, maxDigits));\n}",
      "path": "JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java",
      "functionStartLine": 530,
      "functionName": "appendFraction",
      "functionAnnotation": "",
      "functionDoc": "Instructs the printer to emit a remainder of time as a decimal fraction,\nwithout decimal point. For example, if the field is specified as\nminuteOfHour and the time is 12:30:45, the value printed is 75. A\ndecimal point is implied, so the fraction is 0.75, or three-quarters of\na minute.\n\n@param fieldType type of field to append\n@param minDigits minimum number of digits to print.\n@param maxDigits maximum number of digits to print or parse.\n@return this DateTimeFormatterBuilder, for chaining\n@throws IllegalArgumentException if field type is null\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Instructs the printer to emit a remainder of time as a decimal fraction,\nsans decimal point. For example, if the field is specified as\nminuteOfHour and the time is 12:30:45, the value printed is 75. A\ndecimal point is implied, so the fraction is 0.75, or three-quarters of\na minute.\n\n@param fieldType type of field to append\n@param minDigits minumum number of digits to print.\n@param maxDigits maximum number of digits to print or parse.\n@return this DateTimeFormatterBuilder\n@throws IllegalArgumentException if field type is null\n",
        "newValue": "Instructs the printer to emit a remainder of time as a decimal fraction,\nwithout decimal point. For example, if the field is specified as\nminuteOfHour and the time is 12:30:45, the value printed is 75. A\ndecimal point is implied, so the fraction is 0.75, or three-quarters of\na minute.\n\n@param fieldType type of field to append\n@param minDigits minimum number of digits to print.\n@param maxDigits maximum number of digits to print or parse.\n@return this DateTimeFormatterBuilder, for chaining\n@throws IllegalArgumentException if field type is null\n"
      }
    },
    "6cad802018b6b82ea4df53aaf91a0bbc98b2f9a3": {
      "type": "Ybodychange",
      "commitMessage": "Refactor format package to use late binding of chronology\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@543 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "10/28/04, 3:56 PM",
      "commitName": "6cad802018b6b82ea4df53aaf91a0bbc98b2f9a3",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "9/11/04, 4:30 PM",
      "commitNameOld": "9316fce1b432caa8b56ff6056d916f0a0aaefc1a",
      "commitAuthorOld": "Brian S O\u0027Neill",
      "daysBetweenCommits": 46.98,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "actualSource": "public DateTimeFormatterBuilder appendFraction(DateTimeFieldType fieldType, int minDigits, int maxDigits) {\n    if (fieldType \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Field type must not be null\");\n    }\n    if (maxDigits \u003c minDigits) {\n        maxDigits \u003d minDigits;\n    }\n    if (minDigits \u003c 0 || maxDigits \u003c\u003d 0) {\n        throw new IllegalArgumentException();\n    }\n    return append0(new Fraction(fieldType, minDigits, maxDigits));\n}",
      "path": "JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java",
      "functionStartLine": 531,
      "functionName": "appendFraction",
      "functionAnnotation": "",
      "functionDoc": "Instructs the printer to emit a remainder of time as a decimal fraction,\nsans decimal point. For example, if the field is specified as\nminuteOfHour and the time is 12:30:45, the value printed is 75. A\ndecimal point is implied, so the fraction is 0.75, or three-quarters of\na minute.\n\n@param fieldType type of field to append\n@param minDigits minumum number of digits to print.\n@param maxDigits maximum number of digits to print or parse.\n@return this DateTimeFormatterBuilder\n@throws IllegalArgumentException if field type is null\n",
      "diff": "@@ -1,13 +1,12 @@\n public DateTimeFormatterBuilder appendFraction(DateTimeFieldType fieldType, int minDigits, int maxDigits) {\n     if (fieldType \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Field type must not be null\");\n     }\n     if (maxDigits \u003c minDigits) {\n         maxDigits \u003d minDigits;\n     }\n     if (minDigits \u003c 0 || maxDigits \u003c\u003d 0) {\n         throw new IllegalArgumentException();\n     }\n-    DateTimeField field \u003d fieldType.getField(iChronoUTC);\n-    return append0(new Fraction(iChrono, field, minDigits, maxDigits));\n+    return append0(new Fraction(fieldType, minDigits, maxDigits));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9316fce1b432caa8b56ff6056d916f0a0aaefc1a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "Use DateTimeFieldType for custom fields\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@504 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "9/11/04, 4:30 PM",
      "commitName": "9316fce1b432caa8b56ff6056d916f0a0aaefc1a",
      "commitAuthor": "Brian S O\u0027Neill",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Use DateTimeFieldType for custom fields\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@504 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "9/11/04, 4:30 PM",
          "commitName": "9316fce1b432caa8b56ff6056d916f0a0aaefc1a",
          "commitAuthor": "Brian S O\u0027Neill",
          "commitDateOld": "9/9/04, 3:45 PM",
          "commitNameOld": "8ef60672c1dd5407b0761b81408857be44562ecf",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 2.03,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "public DateTimeFormatterBuilder appendFraction(DateTimeFieldType fieldType, int minDigits, int maxDigits) {\n    if (fieldType \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Field type must not be null\");\n    }\n    if (maxDigits \u003c minDigits) {\n        maxDigits \u003d minDigits;\n    }\n    if (minDigits \u003c 0 || maxDigits \u003c\u003d 0) {\n        throw new IllegalArgumentException();\n    }\n    DateTimeField field \u003d fieldType.getField(iChronoUTC);\n    return append0(new Fraction(iChrono, field, minDigits, maxDigits));\n}",
          "path": "JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java",
          "functionStartLine": 524,
          "functionName": "appendFraction",
          "functionAnnotation": "",
          "functionDoc": "Instructs the printer to emit a remainder of time as a decimal fraction,\nsans decimal point. For example, if the field is specified as\nminuteOfHour and the time is 12:30:45, the value printed is 75. A\ndecimal point is implied, so the fraction is 0.75, or three-quarters of\na minute.\n\n@param fieldType type of field to append\n@param minDigits minumum number of digits to print.\n@param maxDigits maximum number of digits to print or parse.\n@return this DateTimeFormatterBuilder\n@throws IllegalArgumentException if field type is null\n",
          "diff": "@@ -1,12 +1,13 @@\n-public DateTimeFormatterBuilder appendFraction(DateTimeField field, int minDigits, int maxDigits) {\n-    if (field.getDurationField().isPrecise() \u003d\u003d false) {\n-        throw new IllegalArgumentException(\"Field duration must be precise\");\n+public DateTimeFormatterBuilder appendFraction(DateTimeFieldType fieldType, int minDigits, int maxDigits) {\n+    if (fieldType \u003d\u003d null) {\n+        throw new IllegalArgumentException(\"Field type must not be null\");\n     }\n     if (maxDigits \u003c minDigits) {\n         maxDigits \u003d minDigits;\n     }\n     if (minDigits \u003c 0 || maxDigits \u003c\u003d 0) {\n         throw new IllegalArgumentException();\n     }\n+    DateTimeField field \u003d fieldType.getField(iChronoUTC);\n     return append0(new Fraction(iChrono, field, minDigits, maxDigits));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[field-DateTimeField, minDigits-int, maxDigits-int]",
            "newValue": "[fieldType-DateTimeFieldType, minDigits-int, maxDigits-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Use DateTimeFieldType for custom fields\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@504 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "9/11/04, 4:30 PM",
          "commitName": "9316fce1b432caa8b56ff6056d916f0a0aaefc1a",
          "commitAuthor": "Brian S O\u0027Neill",
          "commitDateOld": "9/9/04, 3:45 PM",
          "commitNameOld": "8ef60672c1dd5407b0761b81408857be44562ecf",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 2.03,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "public DateTimeFormatterBuilder appendFraction(DateTimeFieldType fieldType, int minDigits, int maxDigits) {\n    if (fieldType \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Field type must not be null\");\n    }\n    if (maxDigits \u003c minDigits) {\n        maxDigits \u003d minDigits;\n    }\n    if (minDigits \u003c 0 || maxDigits \u003c\u003d 0) {\n        throw new IllegalArgumentException();\n    }\n    DateTimeField field \u003d fieldType.getField(iChronoUTC);\n    return append0(new Fraction(iChrono, field, minDigits, maxDigits));\n}",
          "path": "JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java",
          "functionStartLine": 524,
          "functionName": "appendFraction",
          "functionAnnotation": "",
          "functionDoc": "Instructs the printer to emit a remainder of time as a decimal fraction,\nsans decimal point. For example, if the field is specified as\nminuteOfHour and the time is 12:30:45, the value printed is 75. A\ndecimal point is implied, so the fraction is 0.75, or three-quarters of\na minute.\n\n@param fieldType type of field to append\n@param minDigits minumum number of digits to print.\n@param maxDigits maximum number of digits to print or parse.\n@return this DateTimeFormatterBuilder\n@throws IllegalArgumentException if field type is null\n",
          "diff": "@@ -1,12 +1,13 @@\n-public DateTimeFormatterBuilder appendFraction(DateTimeField field, int minDigits, int maxDigits) {\n-    if (field.getDurationField().isPrecise() \u003d\u003d false) {\n-        throw new IllegalArgumentException(\"Field duration must be precise\");\n+public DateTimeFormatterBuilder appendFraction(DateTimeFieldType fieldType, int minDigits, int maxDigits) {\n+    if (fieldType \u003d\u003d null) {\n+        throw new IllegalArgumentException(\"Field type must not be null\");\n     }\n     if (maxDigits \u003c minDigits) {\n         maxDigits \u003d minDigits;\n     }\n     if (minDigits \u003c 0 || maxDigits \u003c\u003d 0) {\n         throw new IllegalArgumentException();\n     }\n+    DateTimeField field \u003d fieldType.getField(iChronoUTC);\n     return append0(new Fraction(iChrono, field, minDigits, maxDigits));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Use DateTimeFieldType for custom fields\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@504 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "9/11/04, 4:30 PM",
          "commitName": "9316fce1b432caa8b56ff6056d916f0a0aaefc1a",
          "commitAuthor": "Brian S O\u0027Neill",
          "commitDateOld": "9/9/04, 3:45 PM",
          "commitNameOld": "8ef60672c1dd5407b0761b81408857be44562ecf",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 2.03,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "public DateTimeFormatterBuilder appendFraction(DateTimeFieldType fieldType, int minDigits, int maxDigits) {\n    if (fieldType \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Field type must not be null\");\n    }\n    if (maxDigits \u003c minDigits) {\n        maxDigits \u003d minDigits;\n    }\n    if (minDigits \u003c 0 || maxDigits \u003c\u003d 0) {\n        throw new IllegalArgumentException();\n    }\n    DateTimeField field \u003d fieldType.getField(iChronoUTC);\n    return append0(new Fraction(iChrono, field, minDigits, maxDigits));\n}",
          "path": "JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java",
          "functionStartLine": 524,
          "functionName": "appendFraction",
          "functionAnnotation": "",
          "functionDoc": "Instructs the printer to emit a remainder of time as a decimal fraction,\nsans decimal point. For example, if the field is specified as\nminuteOfHour and the time is 12:30:45, the value printed is 75. A\ndecimal point is implied, so the fraction is 0.75, or three-quarters of\na minute.\n\n@param fieldType type of field to append\n@param minDigits minumum number of digits to print.\n@param maxDigits maximum number of digits to print or parse.\n@return this DateTimeFormatterBuilder\n@throws IllegalArgumentException if field type is null\n",
          "diff": "@@ -1,12 +1,13 @@\n-public DateTimeFormatterBuilder appendFraction(DateTimeField field, int minDigits, int maxDigits) {\n-    if (field.getDurationField().isPrecise() \u003d\u003d false) {\n-        throw new IllegalArgumentException(\"Field duration must be precise\");\n+public DateTimeFormatterBuilder appendFraction(DateTimeFieldType fieldType, int minDigits, int maxDigits) {\n+    if (fieldType \u003d\u003d null) {\n+        throw new IllegalArgumentException(\"Field type must not be null\");\n     }\n     if (maxDigits \u003c minDigits) {\n         maxDigits \u003d minDigits;\n     }\n     if (minDigits \u003c 0 || maxDigits \u003c\u003d 0) {\n         throw new IllegalArgumentException();\n     }\n+    DateTimeField field \u003d fieldType.getField(iChronoUTC);\n     return append0(new Fraction(iChrono, field, minDigits, maxDigits));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Instructs the printer to emit a remainder of time as a decimal fraction,\nsans decimal point. For example, if the field is specified as\nminuteOfHour and the time is 12:30:45, the value printed is 75. A\ndecimal point is implied, so the fraction is 0.75, or three-quarters of\na minute.\n\n@param field field should operate in UTC or be time zone agnostic\n@param minDigits minumum number of digits to print.\n@param maxDigits maximum number of digits to print or parse.\n@return this DateTimeFormatterBuilder\n@throws IllegalArgumentException if field\u0027s duration is not precise\n",
            "newValue": "Instructs the printer to emit a remainder of time as a decimal fraction,\nsans decimal point. For example, if the field is specified as\nminuteOfHour and the time is 12:30:45, the value printed is 75. A\ndecimal point is implied, so the fraction is 0.75, or three-quarters of\na minute.\n\n@param fieldType type of field to append\n@param minDigits minumum number of digits to print.\n@param maxDigits maximum number of digits to print or parse.\n@return this DateTimeFormatterBuilder\n@throws IllegalArgumentException if field type is null\n"
          }
        }
      ]
    },
    "b6272b13444f16bd60245a5ff8f339e8fee1c64d": {
      "type": "Ydocchange",
      "commitMessage": "More comments.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@18 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "12/18/03, 7:01 PM",
      "commitName": "b6272b13444f16bd60245a5ff8f339e8fee1c64d",
      "commitAuthor": "Brian S O\u0027Neill",
      "commitDateOld": "12/18/03, 6:07 PM",
      "commitNameOld": "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "public DateTimeFormatterBuilder appendFraction(DateTimeField field, int minDigits, int maxDigits) {\n    if (field.getDurationField().isPrecise() \u003d\u003d false) {\n        throw new IllegalArgumentException(\"Field duration must be precise\");\n    }\n    if (maxDigits \u003c minDigits) {\n        maxDigits \u003d minDigits;\n    }\n    if (minDigits \u003c 0 || maxDigits \u003c\u003d 0) {\n        throw new IllegalArgumentException();\n    }\n    return append0(new Fraction(iChrono, field, minDigits, maxDigits));\n}",
      "path": "JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java",
      "functionStartLine": 501,
      "functionName": "appendFraction",
      "functionAnnotation": "",
      "functionDoc": "Instructs the printer to emit a remainder of time as a decimal fraction,\nsans decimal point. For example, if the field is specified as\nminuteOfHour and the time is 12:30:45, the value printed is 75. A\ndecimal point is implied, so the fraction is 0.75, or three-quarters of\na minute.\n\n@param field field should operate in UTC or be time zone agnostic\n@param minDigits minumum number of digits to print.\n@param maxDigits maximum number of digits to print or parse.\n@return this DateTimeFormatterBuilder\n@throws IllegalArgumentException if field\u0027s duration is not precise\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Instructs the printer to emit a remainder of time as a decimal fraction,\nsans decimal point. For example, if the field is specified as\nminuteOfHour and the time is 12:30:45, the value printed is 75. A\ndecimal point is implied, so the fraction is 0.75, or three-quarters of\na minute.\n\n@param field field should operate in UTC or be time zone agnostic\n@param minDigits minumum number of digits to print.\n@param maxDigits maximum number of digits to print or parse.\n@throws IllegalArgumentException if field\u0027s duration is not precise\n",
        "newValue": "Instructs the printer to emit a remainder of time as a decimal fraction,\nsans decimal point. For example, if the field is specified as\nminuteOfHour and the time is 12:30:45, the value printed is 75. A\ndecimal point is implied, so the fraction is 0.75, or three-quarters of\na minute.\n\n@param field field should operate in UTC or be time zone agnostic\n@param minDigits minumum number of digits to print.\n@param maxDigits maximum number of digits to print or parse.\n@return this DateTimeFormatterBuilder\n@throws IllegalArgumentException if field\u0027s duration is not precise\n"
      }
    },
    "0e07ac6b2cff63550d7df336355ca63cc05aa40b": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "Move from Joda CVS\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@10 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "12/18/03, 6:07 PM",
      "commitName": "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Move from Joda CVS\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@10 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "12/18/03, 6:07 PM",
          "commitName": "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "12/16/03, 1:39 PM",
          "commitNameOld": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 2.19,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "public DateTimeFormatterBuilder appendFraction(DateTimeField field, int minDigits, int maxDigits) {\n    if (field.getDurationField().isPrecise() \u003d\u003d false) {\n        throw new IllegalArgumentException(\"Field duration must be precise\");\n    }\n    if (maxDigits \u003c minDigits) {\n        maxDigits \u003d minDigits;\n    }\n    if (minDigits \u003c 0 || maxDigits \u003c\u003d 0) {\n        throw new IllegalArgumentException();\n    }\n    return append0(new Fraction(iChrono, field, minDigits, maxDigits));\n}",
          "path": "JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java",
          "functionStartLine": 487,
          "functionName": "appendFraction",
          "functionAnnotation": "",
          "functionDoc": "Instructs the printer to emit a remainder of time as a decimal fraction,\nsans decimal point. For example, if the field is specified as\nminuteOfHour and the time is 12:30:45, the value printed is 75. A\ndecimal point is implied, so the fraction is 0.75, or three-quarters of\na minute.\n\n@param field field should operate in UTC or be time zone agnostic\n@param minDigits minumum number of digits to print.\n@param maxDigits maximum number of digits to print or parse.\n@throws IllegalArgumentException if field\u0027s duration is not precise\n",
          "diff": "@@ -1,9 +1,12 @@\n-public DateTimeFormatterBuilder appendFraction(int minDigits, int maxDigits, int rangeInMillis) {\n+public DateTimeFormatterBuilder appendFraction(DateTimeField field, int minDigits, int maxDigits) {\n+    if (field.getDurationField().isPrecise() \u003d\u003d false) {\n+        throw new IllegalArgumentException(\"Field duration must be precise\");\n+    }\n     if (maxDigits \u003c minDigits) {\n         maxDigits \u003d minDigits;\n     }\n     if (minDigits \u003c 0 || maxDigits \u003c\u003d 0) {\n         throw new IllegalArgumentException();\n     }\n-    return append0(new Fraction(iChrono, minDigits, maxDigits, rangeInMillis));\n+    return append0(new Fraction(iChrono, field, minDigits, maxDigits));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[minDigits-int, maxDigits-int, rangeInMillis-int]",
            "newValue": "[field-DateTimeField, minDigits-int, maxDigits-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Move from Joda CVS\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@10 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "12/18/03, 6:07 PM",
          "commitName": "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "12/16/03, 1:39 PM",
          "commitNameOld": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 2.19,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "public DateTimeFormatterBuilder appendFraction(DateTimeField field, int minDigits, int maxDigits) {\n    if (field.getDurationField().isPrecise() \u003d\u003d false) {\n        throw new IllegalArgumentException(\"Field duration must be precise\");\n    }\n    if (maxDigits \u003c minDigits) {\n        maxDigits \u003d minDigits;\n    }\n    if (minDigits \u003c 0 || maxDigits \u003c\u003d 0) {\n        throw new IllegalArgumentException();\n    }\n    return append0(new Fraction(iChrono, field, minDigits, maxDigits));\n}",
          "path": "JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java",
          "functionStartLine": 487,
          "functionName": "appendFraction",
          "functionAnnotation": "",
          "functionDoc": "Instructs the printer to emit a remainder of time as a decimal fraction,\nsans decimal point. For example, if the field is specified as\nminuteOfHour and the time is 12:30:45, the value printed is 75. A\ndecimal point is implied, so the fraction is 0.75, or three-quarters of\na minute.\n\n@param field field should operate in UTC or be time zone agnostic\n@param minDigits minumum number of digits to print.\n@param maxDigits maximum number of digits to print or parse.\n@throws IllegalArgumentException if field\u0027s duration is not precise\n",
          "diff": "@@ -1,9 +1,12 @@\n-public DateTimeFormatterBuilder appendFraction(int minDigits, int maxDigits, int rangeInMillis) {\n+public DateTimeFormatterBuilder appendFraction(DateTimeField field, int minDigits, int maxDigits) {\n+    if (field.getDurationField().isPrecise() \u003d\u003d false) {\n+        throw new IllegalArgumentException(\"Field duration must be precise\");\n+    }\n     if (maxDigits \u003c minDigits) {\n         maxDigits \u003d minDigits;\n     }\n     if (minDigits \u003c 0 || maxDigits \u003c\u003d 0) {\n         throw new IllegalArgumentException();\n     }\n-    return append0(new Fraction(iChrono, minDigits, maxDigits, rangeInMillis));\n+    return append0(new Fraction(iChrono, field, minDigits, maxDigits));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Move from Joda CVS\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@10 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "12/18/03, 6:07 PM",
          "commitName": "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "12/16/03, 1:39 PM",
          "commitNameOld": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 2.19,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "public DateTimeFormatterBuilder appendFraction(DateTimeField field, int minDigits, int maxDigits) {\n    if (field.getDurationField().isPrecise() \u003d\u003d false) {\n        throw new IllegalArgumentException(\"Field duration must be precise\");\n    }\n    if (maxDigits \u003c minDigits) {\n        maxDigits \u003d minDigits;\n    }\n    if (minDigits \u003c 0 || maxDigits \u003c\u003d 0) {\n        throw new IllegalArgumentException();\n    }\n    return append0(new Fraction(iChrono, field, minDigits, maxDigits));\n}",
          "path": "JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java",
          "functionStartLine": 487,
          "functionName": "appendFraction",
          "functionAnnotation": "",
          "functionDoc": "Instructs the printer to emit a remainder of time as a decimal fraction,\nsans decimal point. For example, if the field is specified as\nminuteOfHour and the time is 12:30:45, the value printed is 75. A\ndecimal point is implied, so the fraction is 0.75, or three-quarters of\na minute.\n\n@param field field should operate in UTC or be time zone agnostic\n@param minDigits minumum number of digits to print.\n@param maxDigits maximum number of digits to print or parse.\n@throws IllegalArgumentException if field\u0027s duration is not precise\n",
          "diff": "@@ -1,9 +1,12 @@\n-public DateTimeFormatterBuilder appendFraction(int minDigits, int maxDigits, int rangeInMillis) {\n+public DateTimeFormatterBuilder appendFraction(DateTimeField field, int minDigits, int maxDigits) {\n+    if (field.getDurationField().isPrecise() \u003d\u003d false) {\n+        throw new IllegalArgumentException(\"Field duration must be precise\");\n+    }\n     if (maxDigits \u003c minDigits) {\n         maxDigits \u003d minDigits;\n     }\n     if (minDigits \u003c 0 || maxDigits \u003c\u003d 0) {\n         throw new IllegalArgumentException();\n     }\n-    return append0(new Fraction(iChrono, minDigits, maxDigits, rangeInMillis));\n+    return append0(new Fraction(iChrono, field, minDigits, maxDigits));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Instructs the printer to emit a remainder of time as a decimal fraction,\nsans decimal point. For example, if the range is specified as 60000\n(milliseconds in one minute) and the time is 12:30:45, the value printed\nis 75. A decimal point is implied, so the fraction is 0.75, or three-quarters\nof a minute.\n\n@param minDigits minumum number of digits to print.\n@param maxDigits maximum number of digits to print or parse.\n@param rangeInMillis range of values in fraction\n",
            "newValue": "Instructs the printer to emit a remainder of time as a decimal fraction,\nsans decimal point. For example, if the field is specified as\nminuteOfHour and the time is 12:30:45, the value printed is 75. A\ndecimal point is implied, so the fraction is 0.75, or three-quarters of\na minute.\n\n@param field field should operate in UTC or be time zone agnostic\n@param minDigits minumum number of digits to print.\n@param maxDigits maximum number of digits to print or parse.\n@throws IllegalArgumentException if field\u0027s duration is not precise\n"
          }
        }
      ]
    },
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb": {
      "type": "Yintroduced",
      "commitMessage": "Move version 0.9 to joda-time repository\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@4 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "12/16/03, 1:39 PM",
      "commitName": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
      "commitAuthor": "Stephen Colebourne",
      "diff": "@@ -0,0 +1,9 @@\n+public DateTimeFormatterBuilder appendFraction(int minDigits, int maxDigits, int rangeInMillis) {\n+    if (maxDigits \u003c minDigits) {\n+        maxDigits \u003d minDigits;\n+    }\n+    if (minDigits \u003c 0 || maxDigits \u003c\u003d 0) {\n+        throw new IllegalArgumentException();\n+    }\n+    return append0(new Fraction(iChrono, minDigits, maxDigits, rangeInMillis));\n+}\n\\ No newline at end of file\n",
      "actualSource": "public DateTimeFormatterBuilder appendFraction(int minDigits, int maxDigits, int rangeInMillis) {\n    if (maxDigits \u003c minDigits) {\n        maxDigits \u003d minDigits;\n    }\n    if (minDigits \u003c 0 || maxDigits \u003c\u003d 0) {\n        throw new IllegalArgumentException();\n    }\n    return append0(new Fraction(iChrono, minDigits, maxDigits, rangeInMillis));\n}",
      "path": "JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java",
      "functionStartLine": 526,
      "functionName": "appendFraction",
      "functionAnnotation": "",
      "functionDoc": "Instructs the printer to emit a remainder of time as a decimal fraction,\nsans decimal point. For example, if the range is specified as 60000\n(milliseconds in one minute) and the time is 12:30:45, the value printed\nis 75. A decimal point is implied, so the fraction is 0.75, or three-quarters\nof a minute.\n\n@param minDigits minumum number of digits to print.\n@param maxDigits maximum number of digits to print or parse.\n@param rangeInMillis range of values in fraction\n"
    }
  }
}