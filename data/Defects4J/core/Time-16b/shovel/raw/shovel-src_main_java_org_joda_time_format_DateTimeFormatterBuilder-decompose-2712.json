{
  "origin": "codeshovel",
  "repositoryName": "Time-16b",
  "repositoryPath": "/tmp/Time-16b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DateTimeFormatterBuilder.java",
  "functionName": "decompose",
  "functionId": "$decompose___elementPairs-List__Object____printerList-List__Object____parserList-List__Object__",
  "sourceFilePath": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
  "functionAnnotation": "",
  "functionDoc": "Processes the element pairs, putting results into the given printer\nand parser lists.\n",
  "functionStartLine": 2712,
  "functionEndLine": 2733,
  "numCommitsSeen": 115,
  "timeTaken": 5532,
  "changeHistory": [
    "df4a82f4fb46cc2248280c462e18f08d55a3d112",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1",
    "3f1e047c898c9c925e1faac33bb07e1cb05d88cb",
    "b1163139b096852b5ca029003f780bf7d9bcbfea",
    "9316fce1b432caa8b56ff6056d916f0a0aaefc1a"
  ],
  "changeHistoryShort": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": "Yfilerename",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": "Yfilerename",
    "3f1e047c898c9c925e1faac33bb07e1cb05d88cb": "Yparameterchange",
    "b1163139b096852b5ca029003f780bf7d9bcbfea": "Ybodychange",
    "9316fce1b432caa8b56ff6056d916f0a0aaefc1a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": {
      "type": "Yfilerename",
      "commitMessage": "Remove JodaTime folder moving files to top level\n",
      "commitDate": "5/16/11, 10:02 AM",
      "commitName": "df4a82f4fb46cc2248280c462e18f08d55a3d112",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "5/16/11, 9:58 AM",
      "commitNameOld": "72b22654962284bac59c2777131b42a2d1f53228",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void decompose(List\u003cObject\u003e elementPairs, List\u003cObject\u003e printerList, List\u003cObject\u003e parserList) {\n    int size \u003d elementPairs.size();\n    for (int i \u003d 0; i \u003c size; i +\u003d 2) {\n        Object element \u003d elementPairs.get(i);\n        if (element instanceof DateTimePrinter) {\n            if (element instanceof Composite) {\n                addArrayToList(printerList, ((Composite) element).iPrinters);\n            } else {\n                printerList.add(element);\n            }\n        }\n        element \u003d elementPairs.get(i + 1);\n        if (element instanceof DateTimeParser) {\n            if (element instanceof Composite) {\n                addArrayToList(parserList, ((Composite) element).iParsers);\n            } else {\n                parserList.add(element);\n            }\n        }\n    }\n}",
      "path": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
      "functionStartLine": 2608,
      "functionName": "decompose",
      "functionAnnotation": "",
      "functionDoc": "Processes the element pairs, putting results into the given printer\nand parser lists.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
        "newPath": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java"
      }
    },
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": {
      "type": "Yfilerename",
      "commitMessage": "Convert to maven 2\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1540 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/8/10, 5:17 PM",
      "commitName": "53feb3fa56af7260e607844524b7e5a9be49ecc1",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/8/10, 5:02 PM",
      "commitNameOld": "7fa2ceaf5d95d050095432aa646ea803aa35e122",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void decompose(List\u003cObject\u003e elementPairs, List\u003cObject\u003e printerList, List\u003cObject\u003e parserList) {\n    int size \u003d elementPairs.size();\n    for (int i \u003d 0; i \u003c size; i +\u003d 2) {\n        Object element \u003d elementPairs.get(i);\n        if (element instanceof DateTimePrinter) {\n            if (element instanceof Composite) {\n                addArrayToList(printerList, ((Composite) element).iPrinters);\n            } else {\n                printerList.add(element);\n            }\n        }\n        element \u003d elementPairs.get(i + 1);\n        if (element instanceof DateTimeParser) {\n            if (element instanceof Composite) {\n                addArrayToList(parserList, ((Composite) element).iParsers);\n            } else {\n                parserList.add(element);\n            }\n        }\n    }\n}",
      "path": "JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
      "functionStartLine": 2608,
      "functionName": "decompose",
      "functionAnnotation": "",
      "functionDoc": "Processes the element pairs, putting results into the given printer\nand parser lists.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java",
        "newPath": "JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java"
      }
    },
    "3f1e047c898c9c925e1faac33bb07e1cb05d88cb": {
      "type": "Yparameterchange",
      "commitMessage": "Move to Java 5 with generics\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1406 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "11/4/09, 3:55 PM",
      "commitName": "3f1e047c898c9c925e1faac33bb07e1cb05d88cb",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "11/4/09, 2:27 PM",
      "commitNameOld": "9bad997820d36741944e86ba28f6999e074a0a95",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void decompose(List\u003cObject\u003e elementPairs, List\u003cObject\u003e printerList, List\u003cObject\u003e parserList) {\n    int size \u003d elementPairs.size();\n    for (int i \u003d 0; i \u003c size; i +\u003d 2) {\n        Object element \u003d elementPairs.get(i);\n        if (element instanceof DateTimePrinter) {\n            if (element instanceof Composite) {\n                addArrayToList(printerList, ((Composite) element).iPrinters);\n            } else {\n                printerList.add(element);\n            }\n        }\n        element \u003d elementPairs.get(i + 1);\n        if (element instanceof DateTimeParser) {\n            if (element instanceof Composite) {\n                addArrayToList(parserList, ((Composite) element).iParsers);\n            } else {\n                parserList.add(element);\n            }\n        }\n    }\n}",
      "path": "JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java",
      "functionStartLine": 2574,
      "functionName": "decompose",
      "functionAnnotation": "",
      "functionDoc": "Processes the element pairs, putting results into the given printer\nand parser lists.\n",
      "diff": "@@ -1,21 +1,21 @@\n-private void decompose(List elementPairs, List printerList, List parserList) {\n+private void decompose(List\u003cObject\u003e elementPairs, List\u003cObject\u003e printerList, List\u003cObject\u003e parserList) {\n     int size \u003d elementPairs.size();\n     for (int i \u003d 0; i \u003c size; i +\u003d 2) {\n         Object element \u003d elementPairs.get(i);\n         if (element instanceof DateTimePrinter) {\n             if (element instanceof Composite) {\n                 addArrayToList(printerList, ((Composite) element).iPrinters);\n             } else {\n                 printerList.add(element);\n             }\n         }\n         element \u003d elementPairs.get(i + 1);\n         if (element instanceof DateTimeParser) {\n             if (element instanceof Composite) {\n                 addArrayToList(parserList, ((Composite) element).iParsers);\n             } else {\n                 parserList.add(element);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[elementPairs-List, printerList-List, parserList-List]",
        "newValue": "[elementPairs-List\u003cObject\u003e, printerList-List\u003cObject\u003e, parserList-List\u003cObject\u003e]"
      }
    },
    "b1163139b096852b5ca029003f780bf7d9bcbfea": {
      "type": "Ybodychange",
      "commitMessage": "Remove unecessary code\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@698 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "2/13/05, 2:07 PM",
      "commitName": "b1163139b096852b5ca029003f780bf7d9bcbfea",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "2/13/05, 9:12 AM",
      "commitNameOld": "eac6e8608dc93816b685f96a43b27cbd351e77c6",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.2,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "private void decompose(List elementPairs, List printerList, List parserList) {\n    int size \u003d elementPairs.size();\n    for (int i \u003d 0; i \u003c size; i +\u003d 2) {\n        Object element \u003d elementPairs.get(i);\n        if (element instanceof DateTimePrinter) {\n            if (element instanceof Composite) {\n                addArrayToList(printerList, ((Composite) element).iPrinters);\n            } else {\n                printerList.add(element);\n            }\n        }\n        element \u003d elementPairs.get(i + 1);\n        if (element instanceof DateTimeParser) {\n            if (element instanceof Composite) {\n                addArrayToList(parserList, ((Composite) element).iParsers);\n            } else {\n                parserList.add(element);\n            }\n        }\n    }\n}",
      "path": "JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java",
      "functionStartLine": 2284,
      "functionName": "decompose",
      "functionAnnotation": "",
      "functionDoc": "Processes the element pairs, putting results into the given printer\nand parser lists.\n",
      "diff": "@@ -1,21 +1,21 @@\n private void decompose(List elementPairs, List printerList, List parserList) {\n     int size \u003d elementPairs.size();\n     for (int i \u003d 0; i \u003c size; i +\u003d 2) {\n         Object element \u003d elementPairs.get(i);\n-        if (element !\u003d null \u0026\u0026 element instanceof DateTimePrinter) {\n+        if (element instanceof DateTimePrinter) {\n             if (element instanceof Composite) {\n                 addArrayToList(printerList, ((Composite) element).iPrinters);\n             } else {\n                 printerList.add(element);\n             }\n         }\n         element \u003d elementPairs.get(i + 1);\n-        if (element !\u003d null \u0026\u0026 element instanceof DateTimeParser) {\n+        if (element instanceof DateTimeParser) {\n             if (element instanceof Composite) {\n                 addArrayToList(parserList, ((Composite) element).iParsers);\n             } else {\n                 parserList.add(element);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9316fce1b432caa8b56ff6056d916f0a0aaefc1a": {
      "type": "Yintroduced",
      "commitMessage": "Use DateTimeFieldType for custom fields\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@504 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "9/11/04, 4:30 PM",
      "commitName": "9316fce1b432caa8b56ff6056d916f0a0aaefc1a",
      "commitAuthor": "Brian S O\u0027Neill",
      "diff": "@@ -0,0 +1,21 @@\n+private void decompose(List elementPairs, List printerList, List parserList) {\n+    int size \u003d elementPairs.size();\n+    for (int i \u003d 0; i \u003c size; i +\u003d 2) {\n+        Object element \u003d elementPairs.get(i);\n+        if (element !\u003d null \u0026\u0026 element instanceof DateTimePrinter) {\n+            if (element instanceof Composite) {\n+                addArrayToList(printerList, ((Composite) element).iPrinters);\n+            } else {\n+                printerList.add(element);\n+            }\n+        }\n+        element \u003d elementPairs.get(i + 1);\n+        if (element !\u003d null \u0026\u0026 element instanceof DateTimeParser) {\n+            if (element instanceof Composite) {\n+                addArrayToList(parserList, ((Composite) element).iParsers);\n+            } else {\n+                parserList.add(element);\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void decompose(List elementPairs, List printerList, List parserList) {\n    int size \u003d elementPairs.size();\n    for (int i \u003d 0; i \u003c size; i +\u003d 2) {\n        Object element \u003d elementPairs.get(i);\n        if (element !\u003d null \u0026\u0026 element instanceof DateTimePrinter) {\n            if (element instanceof Composite) {\n                addArrayToList(printerList, ((Composite) element).iPrinters);\n            } else {\n                printerList.add(element);\n            }\n        }\n        element \u003d elementPairs.get(i + 1);\n        if (element !\u003d null \u0026\u0026 element instanceof DateTimeParser) {\n            if (element instanceof Composite) {\n                addArrayToList(parserList, ((Composite) element).iParsers);\n            } else {\n                parserList.add(element);\n            }\n        }\n    }\n}",
      "path": "JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java",
      "functionStartLine": 2317,
      "functionName": "decompose",
      "functionAnnotation": "",
      "functionDoc": "Processes the element pairs, putting results into the given printer\nand parser lists.\n"
    }
  }
}