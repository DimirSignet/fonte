{
  "origin": "codeshovel",
  "repositoryName": "Time-16b",
  "repositoryPath": "/tmp/Time-16b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DateTimeFormat.java",
  "functionName": "forPattern",
  "functionId": "forPattern___pattern-String",
  "sourceFilePath": "src/main/java/org/joda/time/format/DateTimeFormat.java",
  "functionAnnotation": "",
  "functionDoc": "Factory to create a formatter from a pattern string.\nThe pattern string is described above in the class level javadoc.\nIt is very similar to SimpleDateFormat patterns.\n\u003cp\u003e\nThe format may contain locale specific output, and this will change as\nyou change the locale of the formatter.\nCall {@link DateTimeFormatter#withLocale(Locale)} to switch the locale.\nFor example:\n\u003cpre\u003e\nDateTimeFormat.forPattern(pattern).withLocale(Locale.FRANCE).print(dt);\n\u003c/pre\u003e\n\n@param pattern pattern specification\n@return the formatter\n@throws IllegalArgumentException if the pattern is invalid\n",
  "functionStartLine": 169,
  "functionEndLine": 171,
  "numCommitsSeen": 37,
  "timeTaken": 2069,
  "changeHistory": [
    "df4a82f4fb46cc2248280c462e18f08d55a3d112",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1",
    "ddd50d2773c7126e0c3249c99bbed04cf7544b34",
    "eac6e8608dc93816b685f96a43b27cbd351e77c6",
    "5082337a4152e04ebd8077fd0b7fa28113a4d79e",
    "6cad802018b6b82ea4df53aaf91a0bbc98b2f9a3",
    "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb"
  ],
  "changeHistoryShort": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": "Yfilerename",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": "Yfilerename",
    "ddd50d2773c7126e0c3249c99bbed04cf7544b34": "Ydocchange",
    "eac6e8608dc93816b685f96a43b27cbd351e77c6": "Ydocchange",
    "5082337a4152e04ebd8077fd0b7fa28113a4d79e": "Ymultichange(Ymodifierchange,Ybodychange,Yparametermetachange,Ydocchange)",
    "6cad802018b6b82ea4df53aaf91a0bbc98b2f9a3": "Ybodychange",
    "0e07ac6b2cff63550d7df336355ca63cc05aa40b": "Ymultichange(Ybodychange,Yparametermetachange,Ydocchange)",
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb": "Yintroduced"
  },
  "changeHistoryDetails": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": {
      "type": "Yfilerename",
      "commitMessage": "Remove JodaTime folder moving files to top level\n",
      "commitDate": "5/16/11, 10:02 AM",
      "commitName": "df4a82f4fb46cc2248280c462e18f08d55a3d112",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "5/16/11, 9:58 AM",
      "commitNameOld": "72b22654962284bac59c2777131b42a2d1f53228",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static DateTimeFormatter forPattern(String pattern) {\n    return createFormatterForPattern(pattern);\n}",
      "path": "src/main/java/org/joda/time/format/DateTimeFormat.java",
      "functionStartLine": 169,
      "functionName": "forPattern",
      "functionAnnotation": "",
      "functionDoc": "Factory to create a formatter from a pattern string.\nThe pattern string is described above in the class level javadoc.\nIt is very similar to SimpleDateFormat patterns.\n\u003cp\u003e\nThe format may contain locale specific output, and this will change as\nyou change the locale of the formatter.\nCall {@link DateTimeFormatter#withLocale(Locale)} to switch the locale.\nFor example:\n\u003cpre\u003e\nDateTimeFormat.forPattern(pattern).withLocale(Locale.FRANCE).print(dt);\n\u003c/pre\u003e\n\n@param pattern pattern specification\n@return the formatter\n@throws IllegalArgumentException if the pattern is invalid\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/main/java/org/joda/time/format/DateTimeFormat.java",
        "newPath": "src/main/java/org/joda/time/format/DateTimeFormat.java"
      }
    },
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": {
      "type": "Yfilerename",
      "commitMessage": "Convert to maven 2\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1540 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/8/10, 5:17 PM",
      "commitName": "53feb3fa56af7260e607844524b7e5a9be49ecc1",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/8/10, 5:02 PM",
      "commitNameOld": "7fa2ceaf5d95d050095432aa646ea803aa35e122",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static DateTimeFormatter forPattern(String pattern) {\n    return createFormatterForPattern(pattern);\n}",
      "path": "JodaTime/src/main/java/org/joda/time/format/DateTimeFormat.java",
      "functionStartLine": 169,
      "functionName": "forPattern",
      "functionAnnotation": "",
      "functionDoc": "Factory to create a formatter from a pattern string.\nThe pattern string is described above in the class level javadoc.\nIt is very similar to SimpleDateFormat patterns.\n\u003cp\u003e\nThe format may contain locale specific output, and this will change as\nyou change the locale of the formatter.\nCall {@link DateTimeFormatter#withLocale(Locale)} to switch the locale.\nFor example:\n\u003cpre\u003e\nDateTimeFormat.forPattern(pattern).withLocale(Locale.FRANCE).print(dt);\n\u003c/pre\u003e\n\n@param pattern pattern specification\n@return the formatter\n@throws IllegalArgumentException if the pattern is invalid\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/java/org/joda/time/format/DateTimeFormat.java",
        "newPath": "JodaTime/src/main/java/org/joda/time/format/DateTimeFormat.java"
      }
    },
    "ddd50d2773c7126e0c3249c99bbed04cf7544b34": {
      "type": "Ydocchange",
      "commitMessage": "Fix DateTimeFormat javadoc to explain time zone parsing restriction better [OpenDiscussion 1721909]\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1219 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "5/26/07, 5:45 AM",
      "commitName": "ddd50d2773c7126e0c3249c99bbed04cf7544b34",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "4/30/06, 11:22 AM",
      "commitNameOld": "3a99ba6f5aff017053e99634d8191755c64c93ca",
      "commitAuthorOld": "Brian S O\u0027Neill",
      "daysBetweenCommits": 390.77,
      "commitsBetweenForRepo": 137,
      "commitsBetweenForFile": 1,
      "actualSource": "public static DateTimeFormatter forPattern(String pattern) {\n    return createFormatterForPattern(pattern);\n}",
      "path": "JodaTime/src/java/org/joda/time/format/DateTimeFormat.java",
      "functionStartLine": 169,
      "functionName": "forPattern",
      "functionAnnotation": "",
      "functionDoc": "Factory to create a formatter from a pattern string.\nThe pattern string is described above in the class level javadoc.\nIt is very similar to SimpleDateFormat patterns.\n\u003cp\u003e\nThe format may contain locale specific output, and this will change as\nyou change the locale of the formatter.\nCall {@link DateTimeFormatter#withLocale(Locale)} to switch the locale.\nFor example:\n\u003cpre\u003e\nDateTimeFormat.forPattern(pattern).withLocale(Locale.FRANCE).print(dt);\n\u003c/pre\u003e\n\n@param pattern pattern specification\n@return the formatter\n@throws IllegalArgumentException if the pattern is invalid\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Factory to create a formatter from a pattern string.\nThe pattern string is described above, and is similar to SimpleDateFormat.\n\u003cp\u003e\nThe format may contain locale specific output, and this will change as\nyou change the locale of the formatter.\nCall {@link DateTimeFormatter#withLocale(Locale)} to switch the locale.\nFor example:\n\u003cpre\u003e\nDateTimeFormat.forPattern(pattern).withLocale(Locale.FRANCE).print(dt);\n\u003c/pre\u003e\n\n@param pattern pattern specification\n@return the formatter\n@throws IllegalArgumentException if the pattern is invalid\n",
        "newValue": "Factory to create a formatter from a pattern string.\nThe pattern string is described above in the class level javadoc.\nIt is very similar to SimpleDateFormat patterns.\n\u003cp\u003e\nThe format may contain locale specific output, and this will change as\nyou change the locale of the formatter.\nCall {@link DateTimeFormatter#withLocale(Locale)} to switch the locale.\nFor example:\n\u003cpre\u003e\nDateTimeFormat.forPattern(pattern).withLocale(Locale.FRANCE).print(dt);\n\u003c/pre\u003e\n\n@param pattern pattern specification\n@return the formatter\n@throws IllegalArgumentException if the pattern is invalid\n"
      }
    },
    "eac6e8608dc93816b685f96a43b27cbd351e77c6": {
      "type": "Ydocchange",
      "commitMessage": "Test DateTimeFormat styles and patterns\nAdd ability to print time zone ids\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@690 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "2/13/05, 9:12 AM",
      "commitName": "eac6e8608dc93816b685f96a43b27cbd351e77c6",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "2/12/05, 6:39 PM",
      "commitNameOld": "5082337a4152e04ebd8077fd0b7fa28113a4d79e",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.61,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "public static DateTimeFormatter forPattern(String pattern) {\n    return createFormatterForPattern(pattern);\n}",
      "path": "JodaTime/src/java/org/joda/time/format/DateTimeFormat.java",
      "functionStartLine": 166,
      "functionName": "forPattern",
      "functionAnnotation": "",
      "functionDoc": "Factory to create a formatter from a pattern string.\nThe pattern string is described above, and is similar to SimpleDateFormat.\n\u003cp\u003e\nThe format may contain locale specific output, and this will change as\nyou change the locale of the formatter.\nCall {@link DateTimeFormatter#withLocale(Locale)} to switch the locale.\nFor example:\n\u003cpre\u003e\nDateTimeFormat.forPattern(pattern).withLocale(Locale.FRANCE).print(dt);\n\u003c/pre\u003e\n\n@param pattern pattern specification\n@return the formatter\n@throws IllegalArgumentException if the pattern is invalid\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Factory to create a formatter from a pattern string.\nThe pattern string is encoded as per SimpleDateFormat.\n\n@param pattern pattern specification\n@return the formatter\n@throws IllegalArgumentException if the pattern is invalid\n",
        "newValue": "Factory to create a formatter from a pattern string.\nThe pattern string is described above, and is similar to SimpleDateFormat.\n\u003cp\u003e\nThe format may contain locale specific output, and this will change as\nyou change the locale of the formatter.\nCall {@link DateTimeFormatter#withLocale(Locale)} to switch the locale.\nFor example:\n\u003cpre\u003e\nDateTimeFormat.forPattern(pattern).withLocale(Locale.FRANCE).print(dt);\n\u003c/pre\u003e\n\n@param pattern pattern specification\n@return the formatter\n@throws IllegalArgumentException if the pattern is invalid\n"
      }
    },
    "5082337a4152e04ebd8077fd0b7fa28113a4d79e": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange,Yparametermetachange,Ydocchange)",
      "commitMessage": "Refactor DateTime formatting to use decoration pattern\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@687 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "2/12/05, 6:39 PM",
      "commitName": "5082337a4152e04ebd8077fd0b7fa28113a4d79e",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "Refactor DateTime formatting to use decoration pattern\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@687 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "2/12/05, 6:39 PM",
          "commitName": "5082337a4152e04ebd8077fd0b7fa28113a4d79e",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "2/12/05, 3:28 PM",
          "commitNameOld": "28108d2dd6ba602f2b3d328045e74a3d2bf2d0a9",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 0.13,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "public static DateTimeFormatter forPattern(String pattern) {\n    return createFormatterForPattern(pattern);\n}",
          "path": "JodaTime/src/java/org/joda/time/format/DateTimeFormat.java",
          "functionStartLine": 157,
          "functionName": "forPattern",
          "functionAnnotation": "",
          "functionDoc": "Factory to create a formatter from a pattern string.\nThe pattern string is encoded as per SimpleDateFormat.\n\n@param pattern pattern specification\n@return the formatter\n@throws IllegalArgumentException if the pattern is invalid\n",
          "diff": "@@ -1,22 +1,3 @@\n-public synchronized DateTimeFormatter forPattern(final String pattern) {\n-    DateTimeFormatter formatter \u003d (DateTimeFormatter) iPatternedCache.get(pattern);\n-    if (formatter !\u003d null) {\n-        return formatter;\n-    }\n-    if (pattern \u003d\u003d null) {\n-        throw new IllegalArgumentException(\"Invalid pattern specification\");\n-    }\n-    DateTimeFormatterBuilder builder \u003d new DateTimeFormatterBuilder(iLocale);\n-    appendPatternTo(builder, pattern);\n-    if (builder.canBuildFormatter()) {\n-        formatter \u003d builder.toFormatter();\n-    } else if (builder.canBuildPrinter()) {\n-        formatter \u003d new FPrinter(builder.toPrinter());\n-    } else if (builder.canBuildParser()) {\n-        formatter \u003d new FParser(builder.toParser());\n-    } else {\n-        throw new UnsupportedOperationException(\"Pattern unsupported: \" + pattern);\n-    }\n-    iPatternedCache.put(pattern, formatter);\n-    return formatter;\n+public static DateTimeFormatter forPattern(String pattern) {\n+    return createFormatterForPattern(pattern);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[public, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Refactor DateTime formatting to use decoration pattern\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@687 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "2/12/05, 6:39 PM",
          "commitName": "5082337a4152e04ebd8077fd0b7fa28113a4d79e",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "2/12/05, 3:28 PM",
          "commitNameOld": "28108d2dd6ba602f2b3d328045e74a3d2bf2d0a9",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 0.13,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "public static DateTimeFormatter forPattern(String pattern) {\n    return createFormatterForPattern(pattern);\n}",
          "path": "JodaTime/src/java/org/joda/time/format/DateTimeFormat.java",
          "functionStartLine": 157,
          "functionName": "forPattern",
          "functionAnnotation": "",
          "functionDoc": "Factory to create a formatter from a pattern string.\nThe pattern string is encoded as per SimpleDateFormat.\n\n@param pattern pattern specification\n@return the formatter\n@throws IllegalArgumentException if the pattern is invalid\n",
          "diff": "@@ -1,22 +1,3 @@\n-public synchronized DateTimeFormatter forPattern(final String pattern) {\n-    DateTimeFormatter formatter \u003d (DateTimeFormatter) iPatternedCache.get(pattern);\n-    if (formatter !\u003d null) {\n-        return formatter;\n-    }\n-    if (pattern \u003d\u003d null) {\n-        throw new IllegalArgumentException(\"Invalid pattern specification\");\n-    }\n-    DateTimeFormatterBuilder builder \u003d new DateTimeFormatterBuilder(iLocale);\n-    appendPatternTo(builder, pattern);\n-    if (builder.canBuildFormatter()) {\n-        formatter \u003d builder.toFormatter();\n-    } else if (builder.canBuildPrinter()) {\n-        formatter \u003d new FPrinter(builder.toPrinter());\n-    } else if (builder.canBuildParser()) {\n-        formatter \u003d new FParser(builder.toParser());\n-    } else {\n-        throw new UnsupportedOperationException(\"Pattern unsupported: \" + pattern);\n-    }\n-    iPatternedCache.put(pattern, formatter);\n-    return formatter;\n+public static DateTimeFormatter forPattern(String pattern) {\n+    return createFormatterForPattern(pattern);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "Refactor DateTime formatting to use decoration pattern\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@687 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "2/12/05, 6:39 PM",
          "commitName": "5082337a4152e04ebd8077fd0b7fa28113a4d79e",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "2/12/05, 3:28 PM",
          "commitNameOld": "28108d2dd6ba602f2b3d328045e74a3d2bf2d0a9",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 0.13,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "public static DateTimeFormatter forPattern(String pattern) {\n    return createFormatterForPattern(pattern);\n}",
          "path": "JodaTime/src/java/org/joda/time/format/DateTimeFormat.java",
          "functionStartLine": 157,
          "functionName": "forPattern",
          "functionAnnotation": "",
          "functionDoc": "Factory to create a formatter from a pattern string.\nThe pattern string is encoded as per SimpleDateFormat.\n\n@param pattern pattern specification\n@return the formatter\n@throws IllegalArgumentException if the pattern is invalid\n",
          "diff": "@@ -1,22 +1,3 @@\n-public synchronized DateTimeFormatter forPattern(final String pattern) {\n-    DateTimeFormatter formatter \u003d (DateTimeFormatter) iPatternedCache.get(pattern);\n-    if (formatter !\u003d null) {\n-        return formatter;\n-    }\n-    if (pattern \u003d\u003d null) {\n-        throw new IllegalArgumentException(\"Invalid pattern specification\");\n-    }\n-    DateTimeFormatterBuilder builder \u003d new DateTimeFormatterBuilder(iLocale);\n-    appendPatternTo(builder, pattern);\n-    if (builder.canBuildFormatter()) {\n-        formatter \u003d builder.toFormatter();\n-    } else if (builder.canBuildPrinter()) {\n-        formatter \u003d new FPrinter(builder.toPrinter());\n-    } else if (builder.canBuildParser()) {\n-        formatter \u003d new FParser(builder.toParser());\n-    } else {\n-        throw new UnsupportedOperationException(\"Pattern unsupported: \" + pattern);\n-    }\n-    iPatternedCache.put(pattern, formatter);\n-    return formatter;\n+public static DateTimeFormatter forPattern(String pattern) {\n+    return createFormatterForPattern(pattern);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[pattern-String(modifiers-final)]",
            "newValue": "[pattern-String]"
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Refactor DateTime formatting to use decoration pattern\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@687 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "2/12/05, 6:39 PM",
          "commitName": "5082337a4152e04ebd8077fd0b7fa28113a4d79e",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "2/12/05, 3:28 PM",
          "commitNameOld": "28108d2dd6ba602f2b3d328045e74a3d2bf2d0a9",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 0.13,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "public static DateTimeFormatter forPattern(String pattern) {\n    return createFormatterForPattern(pattern);\n}",
          "path": "JodaTime/src/java/org/joda/time/format/DateTimeFormat.java",
          "functionStartLine": 157,
          "functionName": "forPattern",
          "functionAnnotation": "",
          "functionDoc": "Factory to create a formatter from a pattern string.\nThe pattern string is encoded as per SimpleDateFormat.\n\n@param pattern pattern specification\n@return the formatter\n@throws IllegalArgumentException if the pattern is invalid\n",
          "diff": "@@ -1,22 +1,3 @@\n-public synchronized DateTimeFormatter forPattern(final String pattern) {\n-    DateTimeFormatter formatter \u003d (DateTimeFormatter) iPatternedCache.get(pattern);\n-    if (formatter !\u003d null) {\n-        return formatter;\n-    }\n-    if (pattern \u003d\u003d null) {\n-        throw new IllegalArgumentException(\"Invalid pattern specification\");\n-    }\n-    DateTimeFormatterBuilder builder \u003d new DateTimeFormatterBuilder(iLocale);\n-    appendPatternTo(builder, pattern);\n-    if (builder.canBuildFormatter()) {\n-        formatter \u003d builder.toFormatter();\n-    } else if (builder.canBuildPrinter()) {\n-        formatter \u003d new FPrinter(builder.toPrinter());\n-    } else if (builder.canBuildParser()) {\n-        formatter \u003d new FParser(builder.toParser());\n-    } else {\n-        throw new UnsupportedOperationException(\"Pattern unsupported: \" + pattern);\n-    }\n-    iPatternedCache.put(pattern, formatter);\n-    return formatter;\n+public static DateTimeFormatter forPattern(String pattern) {\n+    return createFormatterForPattern(pattern);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Select a format from a custom pattern.\n\n@param pattern pattern specification\n@throws IllegalArgumentException if the pattern is invalid\n@see #appendPatternTo\n",
            "newValue": "Factory to create a formatter from a pattern string.\nThe pattern string is encoded as per SimpleDateFormat.\n\n@param pattern pattern specification\n@return the formatter\n@throws IllegalArgumentException if the pattern is invalid\n"
          }
        }
      ]
    },
    "6cad802018b6b82ea4df53aaf91a0bbc98b2f9a3": {
      "type": "Ybodychange",
      "commitMessage": "Refactor format package to use late binding of chronology\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@543 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "10/28/04, 3:56 PM",
      "commitName": "6cad802018b6b82ea4df53aaf91a0bbc98b2f9a3",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "9/11/04, 4:30 PM",
      "commitNameOld": "9316fce1b432caa8b56ff6056d916f0a0aaefc1a",
      "commitAuthorOld": "Brian S O\u0027Neill",
      "daysBetweenCommits": 46.98,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "actualSource": "public synchronized DateTimeFormatter forPattern(final String pattern) {\n    DateTimeFormatter formatter \u003d (DateTimeFormatter) iPatternedCache.get(pattern);\n    if (formatter !\u003d null) {\n        return formatter;\n    }\n    if (pattern \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Invalid pattern specification\");\n    }\n    DateTimeFormatterBuilder builder \u003d new DateTimeFormatterBuilder(iLocale);\n    appendPatternTo(builder, pattern);\n    if (builder.canBuildFormatter()) {\n        formatter \u003d builder.toFormatter();\n    } else if (builder.canBuildPrinter()) {\n        formatter \u003d new FPrinter(builder.toPrinter());\n    } else if (builder.canBuildParser()) {\n        formatter \u003d new FParser(builder.toParser());\n    } else {\n        throw new UnsupportedOperationException(\"Pattern unsupported: \" + pattern);\n    }\n    iPatternedCache.put(pattern, formatter);\n    return formatter;\n}",
      "path": "JodaTime/src/java/org/joda/time/format/DateTimeFormat.java",
      "functionStartLine": 478,
      "functionName": "forPattern",
      "functionAnnotation": "",
      "functionDoc": "Select a format from a custom pattern.\n\n@param pattern pattern specification\n@throws IllegalArgumentException if the pattern is invalid\n@see #appendPatternTo\n",
      "diff": "@@ -1,22 +1,22 @@\n public synchronized DateTimeFormatter forPattern(final String pattern) {\n     DateTimeFormatter formatter \u003d (DateTimeFormatter) iPatternedCache.get(pattern);\n     if (formatter !\u003d null) {\n         return formatter;\n     }\n     if (pattern \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Invalid pattern specification\");\n     }\n-    DateTimeFormatterBuilder builder \u003d new DateTimeFormatterBuilder(iChrono, iLocale);\n+    DateTimeFormatterBuilder builder \u003d new DateTimeFormatterBuilder(iLocale);\n     appendPatternTo(builder, pattern);\n     if (builder.canBuildFormatter()) {\n         formatter \u003d builder.toFormatter();\n     } else if (builder.canBuildPrinter()) {\n         formatter \u003d new FPrinter(builder.toPrinter());\n     } else if (builder.canBuildParser()) {\n         formatter \u003d new FParser(builder.toParser());\n     } else {\n         throw new UnsupportedOperationException(\"Pattern unsupported: \" + pattern);\n     }\n     iPatternedCache.put(pattern, formatter);\n     return formatter;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0e07ac6b2cff63550d7df336355ca63cc05aa40b": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange,Ydocchange)",
      "commitMessage": "Move from Joda CVS\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@10 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "12/18/03, 6:07 PM",
      "commitName": "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Move from Joda CVS\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@10 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "12/18/03, 6:07 PM",
          "commitName": "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "12/16/03, 1:39 PM",
          "commitNameOld": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 2.19,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "public synchronized DateTimeFormatter forPattern(final String pattern) {\n    DateTimeFormatter formatter \u003d (DateTimeFormatter) iPatternedCache.get(pattern);\n    if (formatter !\u003d null) {\n        return formatter;\n    }\n    if (pattern \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Invalid pattern specification\");\n    }\n    DateTimeFormatterBuilder builder \u003d new DateTimeFormatterBuilder(iChrono, iLocale);\n    appendPatternTo(builder, pattern);\n    if (builder.canBuildFormatter()) {\n        formatter \u003d builder.toFormatter();\n    } else if (builder.canBuildPrinter()) {\n        formatter \u003d new FPrinter(builder.toPrinter());\n    } else if (builder.canBuildParser()) {\n        formatter \u003d new FParser(builder.toParser());\n    } else {\n        throw new UnsupportedOperationException(\"Pattern unsupported: \" + pattern);\n    }\n    iPatternedCache.put(pattern, formatter);\n    return formatter;\n}",
          "path": "JodaTime/src/java/org/joda/time/format/DateTimeFormat.java",
          "functionStartLine": 534,
          "functionName": "forPattern",
          "functionAnnotation": "",
          "functionDoc": "Select a format from a custom pattern.\n\n@param pattern pattern specification\n@throws IllegalArgumentException if the pattern is invalid\n@see #appendPatternTo\n",
          "diff": "@@ -1,21 +1,22 @@\n-public synchronized DateTimeFormatter forPattern(String pattern) {\n+public synchronized DateTimeFormatter forPattern(final String pattern) {\n     DateTimeFormatter formatter \u003d (DateTimeFormatter) iPatternedCache.get(pattern);\n     if (formatter !\u003d null) {\n         return formatter;\n     }\n     if (pattern \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Invalid pattern specification\");\n     }\n-    DateTimeFormatterBuilder builder \u003d new DateTimeFormatterBuilder(iChrono, iLocale).appendPattern(pattern);\n+    DateTimeFormatterBuilder builder \u003d new DateTimeFormatterBuilder(iChrono, iLocale);\n+    appendPatternTo(builder, pattern);\n     if (builder.canBuildFormatter()) {\n         formatter \u003d builder.toFormatter();\n     } else if (builder.canBuildPrinter()) {\n         formatter \u003d new FPrinter(builder.toPrinter());\n     } else if (builder.canBuildParser()) {\n         formatter \u003d new FParser(builder.toParser());\n     } else {\n         throw new UnsupportedOperationException(\"Pattern unsupported: \" + pattern);\n     }\n     iPatternedCache.put(pattern, formatter);\n     return formatter;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "Move from Joda CVS\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@10 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "12/18/03, 6:07 PM",
          "commitName": "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "12/16/03, 1:39 PM",
          "commitNameOld": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 2.19,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "public synchronized DateTimeFormatter forPattern(final String pattern) {\n    DateTimeFormatter formatter \u003d (DateTimeFormatter) iPatternedCache.get(pattern);\n    if (formatter !\u003d null) {\n        return formatter;\n    }\n    if (pattern \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Invalid pattern specification\");\n    }\n    DateTimeFormatterBuilder builder \u003d new DateTimeFormatterBuilder(iChrono, iLocale);\n    appendPatternTo(builder, pattern);\n    if (builder.canBuildFormatter()) {\n        formatter \u003d builder.toFormatter();\n    } else if (builder.canBuildPrinter()) {\n        formatter \u003d new FPrinter(builder.toPrinter());\n    } else if (builder.canBuildParser()) {\n        formatter \u003d new FParser(builder.toParser());\n    } else {\n        throw new UnsupportedOperationException(\"Pattern unsupported: \" + pattern);\n    }\n    iPatternedCache.put(pattern, formatter);\n    return formatter;\n}",
          "path": "JodaTime/src/java/org/joda/time/format/DateTimeFormat.java",
          "functionStartLine": 534,
          "functionName": "forPattern",
          "functionAnnotation": "",
          "functionDoc": "Select a format from a custom pattern.\n\n@param pattern pattern specification\n@throws IllegalArgumentException if the pattern is invalid\n@see #appendPatternTo\n",
          "diff": "@@ -1,21 +1,22 @@\n-public synchronized DateTimeFormatter forPattern(String pattern) {\n+public synchronized DateTimeFormatter forPattern(final String pattern) {\n     DateTimeFormatter formatter \u003d (DateTimeFormatter) iPatternedCache.get(pattern);\n     if (formatter !\u003d null) {\n         return formatter;\n     }\n     if (pattern \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Invalid pattern specification\");\n     }\n-    DateTimeFormatterBuilder builder \u003d new DateTimeFormatterBuilder(iChrono, iLocale).appendPattern(pattern);\n+    DateTimeFormatterBuilder builder \u003d new DateTimeFormatterBuilder(iChrono, iLocale);\n+    appendPatternTo(builder, pattern);\n     if (builder.canBuildFormatter()) {\n         formatter \u003d builder.toFormatter();\n     } else if (builder.canBuildPrinter()) {\n         formatter \u003d new FPrinter(builder.toPrinter());\n     } else if (builder.canBuildParser()) {\n         formatter \u003d new FParser(builder.toParser());\n     } else {\n         throw new UnsupportedOperationException(\"Pattern unsupported: \" + pattern);\n     }\n     iPatternedCache.put(pattern, formatter);\n     return formatter;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[pattern-String]",
            "newValue": "[pattern-String(modifiers-final)]"
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Move from Joda CVS\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@10 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "12/18/03, 6:07 PM",
          "commitName": "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "12/16/03, 1:39 PM",
          "commitNameOld": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 2.19,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "public synchronized DateTimeFormatter forPattern(final String pattern) {\n    DateTimeFormatter formatter \u003d (DateTimeFormatter) iPatternedCache.get(pattern);\n    if (formatter !\u003d null) {\n        return formatter;\n    }\n    if (pattern \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Invalid pattern specification\");\n    }\n    DateTimeFormatterBuilder builder \u003d new DateTimeFormatterBuilder(iChrono, iLocale);\n    appendPatternTo(builder, pattern);\n    if (builder.canBuildFormatter()) {\n        formatter \u003d builder.toFormatter();\n    } else if (builder.canBuildPrinter()) {\n        formatter \u003d new FPrinter(builder.toPrinter());\n    } else if (builder.canBuildParser()) {\n        formatter \u003d new FParser(builder.toParser());\n    } else {\n        throw new UnsupportedOperationException(\"Pattern unsupported: \" + pattern);\n    }\n    iPatternedCache.put(pattern, formatter);\n    return formatter;\n}",
          "path": "JodaTime/src/java/org/joda/time/format/DateTimeFormat.java",
          "functionStartLine": 534,
          "functionName": "forPattern",
          "functionAnnotation": "",
          "functionDoc": "Select a format from a custom pattern.\n\n@param pattern pattern specification\n@throws IllegalArgumentException if the pattern is invalid\n@see #appendPatternTo\n",
          "diff": "@@ -1,21 +1,22 @@\n-public synchronized DateTimeFormatter forPattern(String pattern) {\n+public synchronized DateTimeFormatter forPattern(final String pattern) {\n     DateTimeFormatter formatter \u003d (DateTimeFormatter) iPatternedCache.get(pattern);\n     if (formatter !\u003d null) {\n         return formatter;\n     }\n     if (pattern \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Invalid pattern specification\");\n     }\n-    DateTimeFormatterBuilder builder \u003d new DateTimeFormatterBuilder(iChrono, iLocale).appendPattern(pattern);\n+    DateTimeFormatterBuilder builder \u003d new DateTimeFormatterBuilder(iChrono, iLocale);\n+    appendPatternTo(builder, pattern);\n     if (builder.canBuildFormatter()) {\n         formatter \u003d builder.toFormatter();\n     } else if (builder.canBuildPrinter()) {\n         formatter \u003d new FPrinter(builder.toPrinter());\n     } else if (builder.canBuildParser()) {\n         formatter \u003d new FParser(builder.toParser());\n     } else {\n         throw new UnsupportedOperationException(\"Pattern unsupported: \" + pattern);\n     }\n     iPatternedCache.put(pattern, formatter);\n     return formatter;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Select a format from a custom {@link DateTimeFormatterBuilder#appendPattern pattern}.\n\n@param pattern pattern specification\n@throws IllegalArgumentException\n@see DateTimeFormatterBuilder#appendPattern\n",
            "newValue": "Select a format from a custom pattern.\n\n@param pattern pattern specification\n@throws IllegalArgumentException if the pattern is invalid\n@see #appendPatternTo\n"
          }
        }
      ]
    },
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb": {
      "type": "Yintroduced",
      "commitMessage": "Move version 0.9 to joda-time repository\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@4 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "12/16/03, 1:39 PM",
      "commitName": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
      "commitAuthor": "Stephen Colebourne",
      "diff": "@@ -0,0 +1,21 @@\n+public synchronized DateTimeFormatter forPattern(String pattern) {\n+    DateTimeFormatter formatter \u003d (DateTimeFormatter) iPatternedCache.get(pattern);\n+    if (formatter !\u003d null) {\n+        return formatter;\n+    }\n+    if (pattern \u003d\u003d null) {\n+        throw new IllegalArgumentException(\"Invalid pattern specification\");\n+    }\n+    DateTimeFormatterBuilder builder \u003d new DateTimeFormatterBuilder(iChrono, iLocale).appendPattern(pattern);\n+    if (builder.canBuildFormatter()) {\n+        formatter \u003d builder.toFormatter();\n+    } else if (builder.canBuildPrinter()) {\n+        formatter \u003d new FPrinter(builder.toPrinter());\n+    } else if (builder.canBuildParser()) {\n+        formatter \u003d new FParser(builder.toParser());\n+    } else {\n+        throw new UnsupportedOperationException(\"Pattern unsupported: \" + pattern);\n+    }\n+    iPatternedCache.put(pattern, formatter);\n+    return formatter;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public synchronized DateTimeFormatter forPattern(String pattern) {\n    DateTimeFormatter formatter \u003d (DateTimeFormatter) iPatternedCache.get(pattern);\n    if (formatter !\u003d null) {\n        return formatter;\n    }\n    if (pattern \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Invalid pattern specification\");\n    }\n    DateTimeFormatterBuilder builder \u003d new DateTimeFormatterBuilder(iChrono, iLocale).appendPattern(pattern);\n    if (builder.canBuildFormatter()) {\n        formatter \u003d builder.toFormatter();\n    } else if (builder.canBuildPrinter()) {\n        formatter \u003d new FPrinter(builder.toPrinter());\n    } else if (builder.canBuildParser()) {\n        formatter \u003d new FParser(builder.toParser());\n    } else {\n        throw new UnsupportedOperationException(\"Pattern unsupported: \" + pattern);\n    }\n    iPatternedCache.put(pattern, formatter);\n    return formatter;\n}",
      "path": "JodaTime/src/java/org/joda/time/format/DateTimeFormat.java",
      "functionStartLine": 154,
      "functionName": "forPattern",
      "functionAnnotation": "",
      "functionDoc": "Select a format from a custom {@link DateTimeFormatterBuilder#appendPattern pattern}.\n\n@param pattern pattern specification\n@throws IllegalArgumentException\n@see DateTimeFormatterBuilder#appendPattern\n"
    }
  }
}