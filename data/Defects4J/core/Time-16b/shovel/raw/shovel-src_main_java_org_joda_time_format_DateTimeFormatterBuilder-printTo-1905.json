{
  "origin": "codeshovel",
  "repositoryName": "Time-16b",
  "repositoryPath": "/tmp/Time-16b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DateTimeFormatterBuilder.java",
  "functionName": "printTo",
  "functionId": "$printTo___buf-StringBuffer__out-Writer__instant-long__chrono-Chronology",
  "sourceFilePath": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 1905,
  "functionEndLine": 1987,
  "numCommitsSeen": 114,
  "timeTaken": 6890,
  "changeHistory": [
    "df4a82f4fb46cc2248280c462e18f08d55a3d112",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1",
    "1707517294d44202e104305e7b0c6fb12dd1a6dd",
    "ccddaff1a7295a4cb39f77589d781e760fd3b382",
    "6cad802018b6b82ea4df53aaf91a0bbc98b2f9a3",
    "4eebf636dd3f32f25f4f6335844ddffee631d131",
    "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb"
  ],
  "changeHistoryShort": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": "Yfilerename",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": "Yfilerename",
    "1707517294d44202e104305e7b0c6fb12dd1a6dd": "Ymultichange(Yparameterchange,Ybodychange)",
    "ccddaff1a7295a4cb39f77589d781e760fd3b382": "Ybodychange",
    "6cad802018b6b82ea4df53aaf91a0bbc98b2f9a3": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "4eebf636dd3f32f25f4f6335844ddffee631d131": "Ybodychange",
    "0e07ac6b2cff63550d7df336355ca63cc05aa40b": "Ymultichange(Yparameterchange,Ybodychange)",
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb": "Yintroduced"
  },
  "changeHistoryDetails": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": {
      "type": "Yfilerename",
      "commitMessage": "Remove JodaTime folder moving files to top level\n",
      "commitDate": "5/16/11, 10:02 AM",
      "commitName": "df4a82f4fb46cc2248280c462e18f08d55a3d112",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "5/16/11, 9:58 AM",
      "commitNameOld": "72b22654962284bac59c2777131b42a2d1f53228",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono) throws IOException {\n    DateTimeField field \u003d iFieldType.getField(chrono);\n    int minDigits \u003d iMinDigits;\n    long fraction;\n    try {\n        fraction \u003d field.remainder(instant);\n    } catch (RuntimeException e) {\n        if (buf !\u003d null) {\n            appendUnknownString(buf, minDigits);\n        } else {\n            printUnknownString(out, minDigits);\n        }\n        return;\n    }\n    if (fraction \u003d\u003d 0) {\n        if (buf !\u003d null) {\n            while (--minDigits \u003e\u003d 0) {\n                buf.append(\u00270\u0027);\n            }\n        } else {\n            while (--minDigits \u003e\u003d 0) {\n                out.write(\u00270\u0027);\n            }\n        }\n        return;\n    }\n    String str;\n    long[] fractionData \u003d getFractionData(fraction, field);\n    long scaled \u003d fractionData[0];\n    int maxDigits \u003d (int) fractionData[1];\n    if ((scaled \u0026 0x7fffffff) \u003d\u003d scaled) {\n        str \u003d Integer.toString((int) scaled);\n    } else {\n        str \u003d Long.toString(scaled);\n    }\n    int length \u003d str.length();\n    int digits \u003d maxDigits;\n    while (length \u003c digits) {\n        if (buf !\u003d null) {\n            buf.append(\u00270\u0027);\n        } else {\n            out.write(\u00270\u0027);\n        }\n        minDigits--;\n        digits--;\n    }\n    if (minDigits \u003c digits) {\n        while (minDigits \u003c digits) {\n            if (length \u003c\u003d 1 || str.charAt(length - 1) !\u003d \u00270\u0027) {\n                break;\n            }\n            digits--;\n            length--;\n        }\n        if (length \u003c str.length()) {\n            if (buf !\u003d null) {\n                for (int i \u003d 0; i \u003c length; i++) {\n                    buf.append(str.charAt(i));\n                }\n            } else {\n                for (int i \u003d 0; i \u003c length; i++) {\n                    out.write(str.charAt(i));\n                }\n            }\n            return;\n        }\n    }\n    if (buf !\u003d null) {\n        buf.append(str);\n    } else {\n        out.write(str);\n    }\n}",
      "path": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
      "functionStartLine": 1876,
      "functionName": "printTo",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
        "newPath": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java"
      }
    },
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": {
      "type": "Yfilerename",
      "commitMessage": "Convert to maven 2\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1540 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/8/10, 5:17 PM",
      "commitName": "53feb3fa56af7260e607844524b7e5a9be49ecc1",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/8/10, 5:02 PM",
      "commitNameOld": "7fa2ceaf5d95d050095432aa646ea803aa35e122",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono) throws IOException {\n    DateTimeField field \u003d iFieldType.getField(chrono);\n    int minDigits \u003d iMinDigits;\n    long fraction;\n    try {\n        fraction \u003d field.remainder(instant);\n    } catch (RuntimeException e) {\n        if (buf !\u003d null) {\n            appendUnknownString(buf, minDigits);\n        } else {\n            printUnknownString(out, minDigits);\n        }\n        return;\n    }\n    if (fraction \u003d\u003d 0) {\n        if (buf !\u003d null) {\n            while (--minDigits \u003e\u003d 0) {\n                buf.append(\u00270\u0027);\n            }\n        } else {\n            while (--minDigits \u003e\u003d 0) {\n                out.write(\u00270\u0027);\n            }\n        }\n        return;\n    }\n    String str;\n    long[] fractionData \u003d getFractionData(fraction, field);\n    long scaled \u003d fractionData[0];\n    int maxDigits \u003d (int) fractionData[1];\n    if ((scaled \u0026 0x7fffffff) \u003d\u003d scaled) {\n        str \u003d Integer.toString((int) scaled);\n    } else {\n        str \u003d Long.toString(scaled);\n    }\n    int length \u003d str.length();\n    int digits \u003d maxDigits;\n    while (length \u003c digits) {\n        if (buf !\u003d null) {\n            buf.append(\u00270\u0027);\n        } else {\n            out.write(\u00270\u0027);\n        }\n        minDigits--;\n        digits--;\n    }\n    if (minDigits \u003c digits) {\n        while (minDigits \u003c digits) {\n            if (length \u003c\u003d 1 || str.charAt(length - 1) !\u003d \u00270\u0027) {\n                break;\n            }\n            digits--;\n            length--;\n        }\n        if (length \u003c str.length()) {\n            if (buf !\u003d null) {\n                for (int i \u003d 0; i \u003c length; i++) {\n                    buf.append(str.charAt(i));\n                }\n            } else {\n                for (int i \u003d 0; i \u003c length; i++) {\n                    out.write(str.charAt(i));\n                }\n            }\n            return;\n        }\n    }\n    if (buf !\u003d null) {\n        buf.append(str);\n    } else {\n        out.write(str);\n    }\n}",
      "path": "JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
      "functionStartLine": 1876,
      "functionName": "printTo",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java",
        "newPath": "JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java"
      }
    },
    "1707517294d44202e104305e7b0c6fb12dd1a6dd": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Restored formatting interfaces to provide same functionality as v0.95.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@604 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "12/12/04, 8:21 PM",
      "commitName": "1707517294d44202e104305e7b0c6fb12dd1a6dd",
      "commitAuthor": "Brian S O\u0027Neill",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Restored formatting interfaces to provide same functionality as v0.95.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@604 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "12/12/04, 8:21 PM",
          "commitName": "1707517294d44202e104305e7b0c6fb12dd1a6dd",
          "commitAuthor": "Brian S O\u0027Neill",
          "commitDateOld": "12/11/04, 11:10 AM",
          "commitNameOld": "7d2cfa167873f8f58a65f358623c1738e6332069",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 1.38,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono) throws IOException {\n    DateTimeField field \u003d iFieldType.getField(chrono);\n    int minDigits \u003d iMinDigits;\n    long fraction;\n    try {\n        fraction \u003d field.remainder(instant);\n    } catch (RuntimeException e) {\n        if (buf !\u003d null) {\n            appendUnknownString(buf, minDigits);\n        } else {\n            printUnknownString(out, minDigits);\n        }\n        return;\n    }\n    if (fraction \u003d\u003d 0) {\n        if (buf !\u003d null) {\n            while (--minDigits \u003e\u003d 0) {\n                buf.append(\u00270\u0027);\n            }\n        } else {\n            while (--minDigits \u003e\u003d 0) {\n                out.write(\u00270\u0027);\n            }\n        }\n        return;\n    }\n    String str;\n    long[] fractionData \u003d getFractionData(fraction, field);\n    long scaled \u003d fractionData[0];\n    int maxDigits \u003d (int) fractionData[1];\n    if ((scaled \u0026 0x7fffffff) \u003d\u003d scaled) {\n        str \u003d Integer.toString((int) scaled);\n    } else {\n        str \u003d Long.toString(scaled);\n    }\n    int length \u003d str.length();\n    int digits \u003d maxDigits;\n    while (length \u003c digits) {\n        if (buf !\u003d null) {\n            buf.append(\u00270\u0027);\n        } else {\n            out.write(\u00270\u0027);\n        }\n        minDigits--;\n        digits--;\n    }\n    if (minDigits \u003c digits) {\n        while (minDigits \u003c digits) {\n            if (length \u003c\u003d 1 || str.charAt(length - 1) !\u003d \u00270\u0027) {\n                break;\n            }\n            digits--;\n            length--;\n        }\n        if (length \u003c str.length()) {\n            if (buf !\u003d null) {\n                for (int i \u003d 0; i \u003c length; i++) {\n                    buf.append(str.charAt(i));\n                }\n            } else {\n                for (int i \u003d 0; i \u003c length; i++) {\n                    out.write(str.charAt(i));\n                }\n            }\n            return;\n        }\n    }\n    if (buf !\u003d null) {\n        buf.append(str);\n    } else {\n        out.write(str);\n    }\n}",
          "path": "JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java",
          "functionStartLine": 1595,
          "functionName": "printTo",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,73 +1,73 @@\n-protected void printTo(StringBuffer buf, Writer out, long instantLocal, Chronology chronoLocal) throws IOException {\n-    DateTimeField field \u003d iFieldType.getField(chronoLocal);\n+protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono) throws IOException {\n+    DateTimeField field \u003d iFieldType.getField(chrono);\n     int minDigits \u003d iMinDigits;\n     long fraction;\n     try {\n-        fraction \u003d field.remainder(instantLocal);\n+        fraction \u003d field.remainder(instant);\n     } catch (RuntimeException e) {\n         if (buf !\u003d null) {\n             appendUnknownString(buf, minDigits);\n         } else {\n             printUnknownString(out, minDigits);\n         }\n         return;\n     }\n     if (fraction \u003d\u003d 0) {\n         if (buf !\u003d null) {\n             while (--minDigits \u003e\u003d 0) {\n                 buf.append(\u00270\u0027);\n             }\n         } else {\n             while (--minDigits \u003e\u003d 0) {\n                 out.write(\u00270\u0027);\n             }\n         }\n         return;\n     }\n     String str;\n     long[] fractionData \u003d getFractionData(fraction, field);\n     long scaled \u003d fractionData[0];\n     int maxDigits \u003d (int) fractionData[1];\n     if ((scaled \u0026 0x7fffffff) \u003d\u003d scaled) {\n         str \u003d Integer.toString((int) scaled);\n     } else {\n         str \u003d Long.toString(scaled);\n     }\n     int length \u003d str.length();\n     int digits \u003d maxDigits;\n     while (length \u003c digits) {\n         if (buf !\u003d null) {\n             buf.append(\u00270\u0027);\n         } else {\n             out.write(\u00270\u0027);\n         }\n         minDigits--;\n         digits--;\n     }\n     if (minDigits \u003c digits) {\n         while (minDigits \u003c digits) {\n             if (length \u003c\u003d 1 || str.charAt(length - 1) !\u003d \u00270\u0027) {\n                 break;\n             }\n             digits--;\n             length--;\n         }\n         if (length \u003c str.length()) {\n             if (buf !\u003d null) {\n                 for (int i \u003d 0; i \u003c length; i++) {\n                     buf.append(str.charAt(i));\n                 }\n             } else {\n                 for (int i \u003d 0; i \u003c length; i++) {\n                     out.write(str.charAt(i));\n                 }\n             }\n             return;\n         }\n     }\n     if (buf !\u003d null) {\n         buf.append(str);\n     } else {\n         out.write(str);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[buf-StringBuffer, out-Writer, instantLocal-long, chronoLocal-Chronology]",
            "newValue": "[buf-StringBuffer, out-Writer, instant-long, chrono-Chronology]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Restored formatting interfaces to provide same functionality as v0.95.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@604 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "12/12/04, 8:21 PM",
          "commitName": "1707517294d44202e104305e7b0c6fb12dd1a6dd",
          "commitAuthor": "Brian S O\u0027Neill",
          "commitDateOld": "12/11/04, 11:10 AM",
          "commitNameOld": "7d2cfa167873f8f58a65f358623c1738e6332069",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 1.38,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono) throws IOException {\n    DateTimeField field \u003d iFieldType.getField(chrono);\n    int minDigits \u003d iMinDigits;\n    long fraction;\n    try {\n        fraction \u003d field.remainder(instant);\n    } catch (RuntimeException e) {\n        if (buf !\u003d null) {\n            appendUnknownString(buf, minDigits);\n        } else {\n            printUnknownString(out, minDigits);\n        }\n        return;\n    }\n    if (fraction \u003d\u003d 0) {\n        if (buf !\u003d null) {\n            while (--minDigits \u003e\u003d 0) {\n                buf.append(\u00270\u0027);\n            }\n        } else {\n            while (--minDigits \u003e\u003d 0) {\n                out.write(\u00270\u0027);\n            }\n        }\n        return;\n    }\n    String str;\n    long[] fractionData \u003d getFractionData(fraction, field);\n    long scaled \u003d fractionData[0];\n    int maxDigits \u003d (int) fractionData[1];\n    if ((scaled \u0026 0x7fffffff) \u003d\u003d scaled) {\n        str \u003d Integer.toString((int) scaled);\n    } else {\n        str \u003d Long.toString(scaled);\n    }\n    int length \u003d str.length();\n    int digits \u003d maxDigits;\n    while (length \u003c digits) {\n        if (buf !\u003d null) {\n            buf.append(\u00270\u0027);\n        } else {\n            out.write(\u00270\u0027);\n        }\n        minDigits--;\n        digits--;\n    }\n    if (minDigits \u003c digits) {\n        while (minDigits \u003c digits) {\n            if (length \u003c\u003d 1 || str.charAt(length - 1) !\u003d \u00270\u0027) {\n                break;\n            }\n            digits--;\n            length--;\n        }\n        if (length \u003c str.length()) {\n            if (buf !\u003d null) {\n                for (int i \u003d 0; i \u003c length; i++) {\n                    buf.append(str.charAt(i));\n                }\n            } else {\n                for (int i \u003d 0; i \u003c length; i++) {\n                    out.write(str.charAt(i));\n                }\n            }\n            return;\n        }\n    }\n    if (buf !\u003d null) {\n        buf.append(str);\n    } else {\n        out.write(str);\n    }\n}",
          "path": "JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java",
          "functionStartLine": 1595,
          "functionName": "printTo",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,73 +1,73 @@\n-protected void printTo(StringBuffer buf, Writer out, long instantLocal, Chronology chronoLocal) throws IOException {\n-    DateTimeField field \u003d iFieldType.getField(chronoLocal);\n+protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono) throws IOException {\n+    DateTimeField field \u003d iFieldType.getField(chrono);\n     int minDigits \u003d iMinDigits;\n     long fraction;\n     try {\n-        fraction \u003d field.remainder(instantLocal);\n+        fraction \u003d field.remainder(instant);\n     } catch (RuntimeException e) {\n         if (buf !\u003d null) {\n             appendUnknownString(buf, minDigits);\n         } else {\n             printUnknownString(out, minDigits);\n         }\n         return;\n     }\n     if (fraction \u003d\u003d 0) {\n         if (buf !\u003d null) {\n             while (--minDigits \u003e\u003d 0) {\n                 buf.append(\u00270\u0027);\n             }\n         } else {\n             while (--minDigits \u003e\u003d 0) {\n                 out.write(\u00270\u0027);\n             }\n         }\n         return;\n     }\n     String str;\n     long[] fractionData \u003d getFractionData(fraction, field);\n     long scaled \u003d fractionData[0];\n     int maxDigits \u003d (int) fractionData[1];\n     if ((scaled \u0026 0x7fffffff) \u003d\u003d scaled) {\n         str \u003d Integer.toString((int) scaled);\n     } else {\n         str \u003d Long.toString(scaled);\n     }\n     int length \u003d str.length();\n     int digits \u003d maxDigits;\n     while (length \u003c digits) {\n         if (buf !\u003d null) {\n             buf.append(\u00270\u0027);\n         } else {\n             out.write(\u00270\u0027);\n         }\n         minDigits--;\n         digits--;\n     }\n     if (minDigits \u003c digits) {\n         while (minDigits \u003c digits) {\n             if (length \u003c\u003d 1 || str.charAt(length - 1) !\u003d \u00270\u0027) {\n                 break;\n             }\n             digits--;\n             length--;\n         }\n         if (length \u003c str.length()) {\n             if (buf !\u003d null) {\n                 for (int i \u003d 0; i \u003c length; i++) {\n                     buf.append(str.charAt(i));\n                 }\n             } else {\n                 for (int i \u003d 0; i \u003c length; i++) {\n                     out.write(str.charAt(i));\n                 }\n             }\n             return;\n         }\n     }\n     if (buf !\u003d null) {\n         buf.append(str);\n     } else {\n         out.write(str);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "ccddaff1a7295a4cb39f77589d781e760fd3b382": {
      "type": "Ybodychange",
      "commitMessage": "Remove BoundPrinter code\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@558 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "11/4/04, 3:53 PM",
      "commitName": "ccddaff1a7295a4cb39f77589d781e760fd3b382",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "10/28/04, 4:19 PM",
      "commitNameOld": "c6a69cc40dcb388b5ddc3e616064f130ef3608e2",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 7.02,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void printTo(StringBuffer buf, Writer out, long instantLocal, Chronology chronoLocal) throws IOException {\n    DateTimeField field \u003d iFieldType.getField(chronoLocal);\n    int minDigits \u003d iMinDigits;\n    long fraction;\n    try {\n        fraction \u003d field.remainder(instantLocal);\n    } catch (RuntimeException e) {\n        if (buf !\u003d null) {\n            appendUnknownString(buf, minDigits);\n        } else {\n            printUnknownString(out, minDigits);\n        }\n        return;\n    }\n    if (fraction \u003d\u003d 0) {\n        if (buf !\u003d null) {\n            while (--minDigits \u003e\u003d 0) {\n                buf.append(\u00270\u0027);\n            }\n        } else {\n            while (--minDigits \u003e\u003d 0) {\n                out.write(\u00270\u0027);\n            }\n        }\n        return;\n    }\n    String str;\n    long[] fractionData \u003d getFractionData(fraction, field);\n    long scaled \u003d fractionData[0];\n    int maxDigits \u003d (int) fractionData[1];\n    if ((scaled \u0026 0x7fffffff) \u003d\u003d scaled) {\n        str \u003d Integer.toString((int) scaled);\n    } else {\n        str \u003d Long.toString(scaled);\n    }\n    int length \u003d str.length();\n    int digits \u003d maxDigits;\n    while (length \u003c digits) {\n        if (buf !\u003d null) {\n            buf.append(\u00270\u0027);\n        } else {\n            out.write(\u00270\u0027);\n        }\n        minDigits--;\n        digits--;\n    }\n    if (minDigits \u003c digits) {\n        while (minDigits \u003c digits) {\n            if (length \u003c\u003d 1 || str.charAt(length - 1) !\u003d \u00270\u0027) {\n                break;\n            }\n            digits--;\n            length--;\n        }\n        if (length \u003c str.length()) {\n            if (buf !\u003d null) {\n                for (int i \u003d 0; i \u003c length; i++) {\n                    buf.append(str.charAt(i));\n                }\n            } else {\n                for (int i \u003d 0; i \u003c length; i++) {\n                    out.write(str.charAt(i));\n                }\n            }\n            return;\n        }\n    }\n    if (buf !\u003d null) {\n        buf.append(str);\n    } else {\n        out.write(str);\n    }\n}",
      "path": "JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java",
      "functionStartLine": 1620,
      "functionName": "printTo",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,72 +1,73 @@\n protected void printTo(StringBuffer buf, Writer out, long instantLocal, Chronology chronoLocal) throws IOException {\n-    DateTimeField field \u003d iField;\n+    DateTimeField field \u003d iFieldType.getField(chronoLocal);\n     int minDigits \u003d iMinDigits;\n     long fraction;\n     try {\n         fraction \u003d field.remainder(instantLocal);\n     } catch (RuntimeException e) {\n         if (buf !\u003d null) {\n             appendUnknownString(buf, minDigits);\n         } else {\n             printUnknownString(out, minDigits);\n         }\n         return;\n     }\n     if (fraction \u003d\u003d 0) {\n         if (buf !\u003d null) {\n             while (--minDigits \u003e\u003d 0) {\n                 buf.append(\u00270\u0027);\n             }\n         } else {\n             while (--minDigits \u003e\u003d 0) {\n                 out.write(\u00270\u0027);\n             }\n         }\n         return;\n     }\n     String str;\n-    long scaled \u003d fraction * iScalar / iRangeMillis;\n-    int maxDigits \u003d iMaxDigits;\n+    long[] fractionData \u003d getFractionData(fraction, field);\n+    long scaled \u003d fractionData[0];\n+    int maxDigits \u003d (int) fractionData[1];\n     if ((scaled \u0026 0x7fffffff) \u003d\u003d scaled) {\n         str \u003d Integer.toString((int) scaled);\n     } else {\n         str \u003d Long.toString(scaled);\n     }\n     int length \u003d str.length();\n     int digits \u003d maxDigits;\n     while (length \u003c digits) {\n         if (buf !\u003d null) {\n             buf.append(\u00270\u0027);\n         } else {\n             out.write(\u00270\u0027);\n         }\n         minDigits--;\n         digits--;\n     }\n     if (minDigits \u003c digits) {\n         while (minDigits \u003c digits) {\n             if (length \u003c\u003d 1 || str.charAt(length - 1) !\u003d \u00270\u0027) {\n                 break;\n             }\n             digits--;\n             length--;\n         }\n         if (length \u003c str.length()) {\n             if (buf !\u003d null) {\n                 for (int i \u003d 0; i \u003c length; i++) {\n                     buf.append(str.charAt(i));\n                 }\n             } else {\n                 for (int i \u003d 0; i \u003c length; i++) {\n                     out.write(str.charAt(i));\n                 }\n             }\n             return;\n         }\n     }\n     if (buf !\u003d null) {\n         buf.append(str);\n     } else {\n         out.write(str);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6cad802018b6b82ea4df53aaf91a0bbc98b2f9a3": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "Refactor format package to use late binding of chronology\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@543 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "10/28/04, 3:56 PM",
      "commitName": "6cad802018b6b82ea4df53aaf91a0bbc98b2f9a3",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Refactor format package to use late binding of chronology\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@543 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "10/28/04, 3:56 PM",
          "commitName": "6cad802018b6b82ea4df53aaf91a0bbc98b2f9a3",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "9/11/04, 4:30 PM",
          "commitNameOld": "9316fce1b432caa8b56ff6056d916f0a0aaefc1a",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 46.98,
          "commitsBetweenForRepo": 38,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void printTo(StringBuffer buf, Writer out, long instantLocal, Chronology chronoLocal) throws IOException {\n    DateTimeField field \u003d iField;\n    int minDigits \u003d iMinDigits;\n    long fraction;\n    try {\n        fraction \u003d field.remainder(instantLocal);\n    } catch (RuntimeException e) {\n        if (buf !\u003d null) {\n            appendUnknownString(buf, minDigits);\n        } else {\n            printUnknownString(out, minDigits);\n        }\n        return;\n    }\n    if (fraction \u003d\u003d 0) {\n        if (buf !\u003d null) {\n            while (--minDigits \u003e\u003d 0) {\n                buf.append(\u00270\u0027);\n            }\n        } else {\n            while (--minDigits \u003e\u003d 0) {\n                out.write(\u00270\u0027);\n            }\n        }\n        return;\n    }\n    String str;\n    long scaled \u003d fraction * iScalar / iRangeMillis;\n    int maxDigits \u003d iMaxDigits;\n    if ((scaled \u0026 0x7fffffff) \u003d\u003d scaled) {\n        str \u003d Integer.toString((int) scaled);\n    } else {\n        str \u003d Long.toString(scaled);\n    }\n    int length \u003d str.length();\n    int digits \u003d maxDigits;\n    while (length \u003c digits) {\n        if (buf !\u003d null) {\n            buf.append(\u00270\u0027);\n        } else {\n            out.write(\u00270\u0027);\n        }\n        minDigits--;\n        digits--;\n    }\n    if (minDigits \u003c digits) {\n        while (minDigits \u003c digits) {\n            if (length \u003c\u003d 1 || str.charAt(length - 1) !\u003d \u00270\u0027) {\n                break;\n            }\n            digits--;\n            length--;\n        }\n        if (length \u003c str.length()) {\n            if (buf !\u003d null) {\n                for (int i \u003d 0; i \u003c length; i++) {\n                    buf.append(str.charAt(i));\n                }\n            } else {\n                for (int i \u003d 0; i \u003c length; i++) {\n                    out.write(str.charAt(i));\n                }\n            }\n            return;\n        }\n    }\n    if (buf !\u003d null) {\n        buf.append(str);\n    } else {\n        out.write(str);\n    }\n}",
          "path": "JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java",
          "functionStartLine": 1920,
          "functionName": "printTo",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,74 +1,72 @@\n-private void printTo(StringBuffer buf, Writer out, long instantLocal) throws IOException {\n+protected void printTo(StringBuffer buf, Writer out, long instantLocal, Chronology chronoLocal) throws IOException {\n+    DateTimeField field \u003d iField;\n     int minDigits \u003d iMinDigits;\n     long fraction;\n     try {\n-        fraction \u003d iField.remainder(instantLocal);\n+        fraction \u003d field.remainder(instantLocal);\n     } catch (RuntimeException e) {\n         if (buf !\u003d null) {\n-            while (--minDigits \u003e\u003d 0) {\n-                buf.append(\u0027\\ufffd\u0027);\n-            }\n+            appendUnknownString(buf, minDigits);\n         } else {\n-            while (--minDigits \u003e\u003d 0) {\n-                out.write(\u0027\\ufffd\u0027);\n-            }\n+            printUnknownString(out, minDigits);\n         }\n         return;\n     }\n     if (fraction \u003d\u003d 0) {\n         if (buf !\u003d null) {\n             while (--minDigits \u003e\u003d 0) {\n                 buf.append(\u00270\u0027);\n             }\n         } else {\n             while (--minDigits \u003e\u003d 0) {\n                 out.write(\u00270\u0027);\n             }\n         }\n         return;\n     }\n     String str;\n     long scaled \u003d fraction * iScalar / iRangeMillis;\n+    int maxDigits \u003d iMaxDigits;\n     if ((scaled \u0026 0x7fffffff) \u003d\u003d scaled) {\n         str \u003d Integer.toString((int) scaled);\n     } else {\n         str \u003d Long.toString(scaled);\n     }\n     int length \u003d str.length();\n-    int digits \u003d iMaxDigits;\n+    int digits \u003d maxDigits;\n     while (length \u003c digits) {\n         if (buf !\u003d null) {\n             buf.append(\u00270\u0027);\n         } else {\n             out.write(\u00270\u0027);\n         }\n         minDigits--;\n         digits--;\n     }\n     if (minDigits \u003c digits) {\n         while (minDigits \u003c digits) {\n             if (length \u003c\u003d 1 || str.charAt(length - 1) !\u003d \u00270\u0027) {\n                 break;\n             }\n             digits--;\n             length--;\n         }\n         if (length \u003c str.length()) {\n             if (buf !\u003d null) {\n                 for (int i \u003d 0; i \u003c length; i++) {\n                     buf.append(str.charAt(i));\n                 }\n             } else {\n                 for (int i \u003d 0; i \u003c length; i++) {\n                     out.write(str.charAt(i));\n                 }\n             }\n             return;\n         }\n     }\n     if (buf !\u003d null) {\n         buf.append(str);\n     } else {\n         out.write(str);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[buf-StringBuffer, out-Writer, instantLocal-long]",
            "newValue": "[buf-StringBuffer, out-Writer, instantLocal-long, chronoLocal-Chronology]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Refactor format package to use late binding of chronology\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@543 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "10/28/04, 3:56 PM",
          "commitName": "6cad802018b6b82ea4df53aaf91a0bbc98b2f9a3",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "9/11/04, 4:30 PM",
          "commitNameOld": "9316fce1b432caa8b56ff6056d916f0a0aaefc1a",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 46.98,
          "commitsBetweenForRepo": 38,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void printTo(StringBuffer buf, Writer out, long instantLocal, Chronology chronoLocal) throws IOException {\n    DateTimeField field \u003d iField;\n    int minDigits \u003d iMinDigits;\n    long fraction;\n    try {\n        fraction \u003d field.remainder(instantLocal);\n    } catch (RuntimeException e) {\n        if (buf !\u003d null) {\n            appendUnknownString(buf, minDigits);\n        } else {\n            printUnknownString(out, minDigits);\n        }\n        return;\n    }\n    if (fraction \u003d\u003d 0) {\n        if (buf !\u003d null) {\n            while (--minDigits \u003e\u003d 0) {\n                buf.append(\u00270\u0027);\n            }\n        } else {\n            while (--minDigits \u003e\u003d 0) {\n                out.write(\u00270\u0027);\n            }\n        }\n        return;\n    }\n    String str;\n    long scaled \u003d fraction * iScalar / iRangeMillis;\n    int maxDigits \u003d iMaxDigits;\n    if ((scaled \u0026 0x7fffffff) \u003d\u003d scaled) {\n        str \u003d Integer.toString((int) scaled);\n    } else {\n        str \u003d Long.toString(scaled);\n    }\n    int length \u003d str.length();\n    int digits \u003d maxDigits;\n    while (length \u003c digits) {\n        if (buf !\u003d null) {\n            buf.append(\u00270\u0027);\n        } else {\n            out.write(\u00270\u0027);\n        }\n        minDigits--;\n        digits--;\n    }\n    if (minDigits \u003c digits) {\n        while (minDigits \u003c digits) {\n            if (length \u003c\u003d 1 || str.charAt(length - 1) !\u003d \u00270\u0027) {\n                break;\n            }\n            digits--;\n            length--;\n        }\n        if (length \u003c str.length()) {\n            if (buf !\u003d null) {\n                for (int i \u003d 0; i \u003c length; i++) {\n                    buf.append(str.charAt(i));\n                }\n            } else {\n                for (int i \u003d 0; i \u003c length; i++) {\n                    out.write(str.charAt(i));\n                }\n            }\n            return;\n        }\n    }\n    if (buf !\u003d null) {\n        buf.append(str);\n    } else {\n        out.write(str);\n    }\n}",
          "path": "JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java",
          "functionStartLine": 1920,
          "functionName": "printTo",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,74 +1,72 @@\n-private void printTo(StringBuffer buf, Writer out, long instantLocal) throws IOException {\n+protected void printTo(StringBuffer buf, Writer out, long instantLocal, Chronology chronoLocal) throws IOException {\n+    DateTimeField field \u003d iField;\n     int minDigits \u003d iMinDigits;\n     long fraction;\n     try {\n-        fraction \u003d iField.remainder(instantLocal);\n+        fraction \u003d field.remainder(instantLocal);\n     } catch (RuntimeException e) {\n         if (buf !\u003d null) {\n-            while (--minDigits \u003e\u003d 0) {\n-                buf.append(\u0027\\ufffd\u0027);\n-            }\n+            appendUnknownString(buf, minDigits);\n         } else {\n-            while (--minDigits \u003e\u003d 0) {\n-                out.write(\u0027\\ufffd\u0027);\n-            }\n+            printUnknownString(out, minDigits);\n         }\n         return;\n     }\n     if (fraction \u003d\u003d 0) {\n         if (buf !\u003d null) {\n             while (--minDigits \u003e\u003d 0) {\n                 buf.append(\u00270\u0027);\n             }\n         } else {\n             while (--minDigits \u003e\u003d 0) {\n                 out.write(\u00270\u0027);\n             }\n         }\n         return;\n     }\n     String str;\n     long scaled \u003d fraction * iScalar / iRangeMillis;\n+    int maxDigits \u003d iMaxDigits;\n     if ((scaled \u0026 0x7fffffff) \u003d\u003d scaled) {\n         str \u003d Integer.toString((int) scaled);\n     } else {\n         str \u003d Long.toString(scaled);\n     }\n     int length \u003d str.length();\n-    int digits \u003d iMaxDigits;\n+    int digits \u003d maxDigits;\n     while (length \u003c digits) {\n         if (buf !\u003d null) {\n             buf.append(\u00270\u0027);\n         } else {\n             out.write(\u00270\u0027);\n         }\n         minDigits--;\n         digits--;\n     }\n     if (minDigits \u003c digits) {\n         while (minDigits \u003c digits) {\n             if (length \u003c\u003d 1 || str.charAt(length - 1) !\u003d \u00270\u0027) {\n                 break;\n             }\n             digits--;\n             length--;\n         }\n         if (length \u003c str.length()) {\n             if (buf !\u003d null) {\n                 for (int i \u003d 0; i \u003c length; i++) {\n                     buf.append(str.charAt(i));\n                 }\n             } else {\n                 for (int i \u003d 0; i \u003c length; i++) {\n                     out.write(str.charAt(i));\n                 }\n             }\n             return;\n         }\n     }\n     if (buf !\u003d null) {\n         buf.append(str);\n     } else {\n         out.write(str);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Refactor format package to use late binding of chronology\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@543 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "10/28/04, 3:56 PM",
          "commitName": "6cad802018b6b82ea4df53aaf91a0bbc98b2f9a3",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "9/11/04, 4:30 PM",
          "commitNameOld": "9316fce1b432caa8b56ff6056d916f0a0aaefc1a",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 46.98,
          "commitsBetweenForRepo": 38,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void printTo(StringBuffer buf, Writer out, long instantLocal, Chronology chronoLocal) throws IOException {\n    DateTimeField field \u003d iField;\n    int minDigits \u003d iMinDigits;\n    long fraction;\n    try {\n        fraction \u003d field.remainder(instantLocal);\n    } catch (RuntimeException e) {\n        if (buf !\u003d null) {\n            appendUnknownString(buf, minDigits);\n        } else {\n            printUnknownString(out, minDigits);\n        }\n        return;\n    }\n    if (fraction \u003d\u003d 0) {\n        if (buf !\u003d null) {\n            while (--minDigits \u003e\u003d 0) {\n                buf.append(\u00270\u0027);\n            }\n        } else {\n            while (--minDigits \u003e\u003d 0) {\n                out.write(\u00270\u0027);\n            }\n        }\n        return;\n    }\n    String str;\n    long scaled \u003d fraction * iScalar / iRangeMillis;\n    int maxDigits \u003d iMaxDigits;\n    if ((scaled \u0026 0x7fffffff) \u003d\u003d scaled) {\n        str \u003d Integer.toString((int) scaled);\n    } else {\n        str \u003d Long.toString(scaled);\n    }\n    int length \u003d str.length();\n    int digits \u003d maxDigits;\n    while (length \u003c digits) {\n        if (buf !\u003d null) {\n            buf.append(\u00270\u0027);\n        } else {\n            out.write(\u00270\u0027);\n        }\n        minDigits--;\n        digits--;\n    }\n    if (minDigits \u003c digits) {\n        while (minDigits \u003c digits) {\n            if (length \u003c\u003d 1 || str.charAt(length - 1) !\u003d \u00270\u0027) {\n                break;\n            }\n            digits--;\n            length--;\n        }\n        if (length \u003c str.length()) {\n            if (buf !\u003d null) {\n                for (int i \u003d 0; i \u003c length; i++) {\n                    buf.append(str.charAt(i));\n                }\n            } else {\n                for (int i \u003d 0; i \u003c length; i++) {\n                    out.write(str.charAt(i));\n                }\n            }\n            return;\n        }\n    }\n    if (buf !\u003d null) {\n        buf.append(str);\n    } else {\n        out.write(str);\n    }\n}",
          "path": "JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java",
          "functionStartLine": 1920,
          "functionName": "printTo",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,74 +1,72 @@\n-private void printTo(StringBuffer buf, Writer out, long instantLocal) throws IOException {\n+protected void printTo(StringBuffer buf, Writer out, long instantLocal, Chronology chronoLocal) throws IOException {\n+    DateTimeField field \u003d iField;\n     int minDigits \u003d iMinDigits;\n     long fraction;\n     try {\n-        fraction \u003d iField.remainder(instantLocal);\n+        fraction \u003d field.remainder(instantLocal);\n     } catch (RuntimeException e) {\n         if (buf !\u003d null) {\n-            while (--minDigits \u003e\u003d 0) {\n-                buf.append(\u0027\\ufffd\u0027);\n-            }\n+            appendUnknownString(buf, minDigits);\n         } else {\n-            while (--minDigits \u003e\u003d 0) {\n-                out.write(\u0027\\ufffd\u0027);\n-            }\n+            printUnknownString(out, minDigits);\n         }\n         return;\n     }\n     if (fraction \u003d\u003d 0) {\n         if (buf !\u003d null) {\n             while (--minDigits \u003e\u003d 0) {\n                 buf.append(\u00270\u0027);\n             }\n         } else {\n             while (--minDigits \u003e\u003d 0) {\n                 out.write(\u00270\u0027);\n             }\n         }\n         return;\n     }\n     String str;\n     long scaled \u003d fraction * iScalar / iRangeMillis;\n+    int maxDigits \u003d iMaxDigits;\n     if ((scaled \u0026 0x7fffffff) \u003d\u003d scaled) {\n         str \u003d Integer.toString((int) scaled);\n     } else {\n         str \u003d Long.toString(scaled);\n     }\n     int length \u003d str.length();\n-    int digits \u003d iMaxDigits;\n+    int digits \u003d maxDigits;\n     while (length \u003c digits) {\n         if (buf !\u003d null) {\n             buf.append(\u00270\u0027);\n         } else {\n             out.write(\u00270\u0027);\n         }\n         minDigits--;\n         digits--;\n     }\n     if (minDigits \u003c digits) {\n         while (minDigits \u003c digits) {\n             if (length \u003c\u003d 1 || str.charAt(length - 1) !\u003d \u00270\u0027) {\n                 break;\n             }\n             digits--;\n             length--;\n         }\n         if (length \u003c str.length()) {\n             if (buf !\u003d null) {\n                 for (int i \u003d 0; i \u003c length; i++) {\n                     buf.append(str.charAt(i));\n                 }\n             } else {\n                 for (int i \u003d 0; i \u003c length; i++) {\n                     out.write(str.charAt(i));\n                 }\n             }\n             return;\n         }\n     }\n     if (buf !\u003d null) {\n         buf.append(str);\n     } else {\n         out.write(str);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "4eebf636dd3f32f25f4f6335844ddffee631d131": {
      "type": "Ybodychange",
      "commitMessage": "Improve fraction parsing accuracy.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@94 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "1/3/04, 9:50 AM",
      "commitName": "4eebf636dd3f32f25f4f6335844ddffee631d131",
      "commitAuthor": "Brian S O\u0027Neill",
      "commitDateOld": "1/3/04, 4:24 AM",
      "commitNameOld": "35aca9c2020c7c426b67fbe19e57ddcb9f1b389d",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.23,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private void printTo(StringBuffer buf, Writer out, long instantLocal) throws IOException {\n    int minDigits \u003d iMinDigits;\n    long fraction;\n    try {\n        fraction \u003d iField.remainder(instantLocal);\n    } catch (RuntimeException e) {\n        if (buf !\u003d null) {\n            while (--minDigits \u003e\u003d 0) {\n                buf.append(\u0027\\ufffd\u0027);\n            }\n        } else {\n            while (--minDigits \u003e\u003d 0) {\n                out.write(\u0027\\ufffd\u0027);\n            }\n        }\n        return;\n    }\n    if (fraction \u003d\u003d 0) {\n        if (buf !\u003d null) {\n            while (--minDigits \u003e\u003d 0) {\n                buf.append(\u00270\u0027);\n            }\n        } else {\n            while (--minDigits \u003e\u003d 0) {\n                out.write(\u00270\u0027);\n            }\n        }\n        return;\n    }\n    String str;\n    long scaled \u003d fraction * iScalar / iRangeMillis;\n    if ((scaled \u0026 0x7fffffff) \u003d\u003d scaled) {\n        str \u003d Integer.toString((int) scaled);\n    } else {\n        str \u003d Long.toString(scaled);\n    }\n    int length \u003d str.length();\n    int digits \u003d iMaxDigits;\n    while (length \u003c digits) {\n        if (buf !\u003d null) {\n            buf.append(\u00270\u0027);\n        } else {\n            out.write(\u00270\u0027);\n        }\n        minDigits--;\n        digits--;\n    }\n    if (minDigits \u003c digits) {\n        while (minDigits \u003c digits) {\n            if (length \u003c\u003d 1 || str.charAt(length - 1) !\u003d \u00270\u0027) {\n                break;\n            }\n            digits--;\n            length--;\n        }\n        if (length \u003c str.length()) {\n            if (buf !\u003d null) {\n                for (int i \u003d 0; i \u003c length; i++) {\n                    buf.append(str.charAt(i));\n                }\n            } else {\n                for (int i \u003d 0; i \u003c length; i++) {\n                    out.write(str.charAt(i));\n                }\n            }\n            return;\n        }\n    }\n    if (buf !\u003d null) {\n        buf.append(str);\n    } else {\n        out.write(str);\n    }\n}",
      "path": "JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java",
      "functionStartLine": 1337,
      "functionName": "printTo",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,74 +1,74 @@\n private void printTo(StringBuffer buf, Writer out, long instantLocal) throws IOException {\n     int minDigits \u003d iMinDigits;\n     long fraction;\n     try {\n         fraction \u003d iField.remainder(instantLocal);\n     } catch (RuntimeException e) {\n         if (buf !\u003d null) {\n             while (--minDigits \u003e\u003d 0) {\n                 buf.append(\u0027\\ufffd\u0027);\n             }\n         } else {\n             while (--minDigits \u003e\u003d 0) {\n                 out.write(\u0027\\ufffd\u0027);\n             }\n         }\n         return;\n     }\n     if (fraction \u003d\u003d 0) {\n         if (buf !\u003d null) {\n             while (--minDigits \u003e\u003d 0) {\n                 buf.append(\u00270\u0027);\n             }\n         } else {\n             while (--minDigits \u003e\u003d 0) {\n                 out.write(\u00270\u0027);\n             }\n         }\n         return;\n     }\n     String str;\n-    long scaled \u003d fraction * iScaler / iRangeMillis;\n+    long scaled \u003d fraction * iScalar / iRangeMillis;\n     if ((scaled \u0026 0x7fffffff) \u003d\u003d scaled) {\n         str \u003d Integer.toString((int) scaled);\n     } else {\n         str \u003d Long.toString(scaled);\n     }\n     int length \u003d str.length();\n     int digits \u003d iMaxDigits;\n     while (length \u003c digits) {\n         if (buf !\u003d null) {\n             buf.append(\u00270\u0027);\n         } else {\n             out.write(\u00270\u0027);\n         }\n         minDigits--;\n         digits--;\n     }\n     if (minDigits \u003c digits) {\n         while (minDigits \u003c digits) {\n             if (length \u003c\u003d 1 || str.charAt(length - 1) !\u003d \u00270\u0027) {\n                 break;\n             }\n             digits--;\n             length--;\n         }\n         if (length \u003c str.length()) {\n             if (buf !\u003d null) {\n                 for (int i \u003d 0; i \u003c length; i++) {\n                     buf.append(str.charAt(i));\n                 }\n             } else {\n                 for (int i \u003d 0; i \u003c length; i++) {\n                     out.write(str.charAt(i));\n                 }\n             }\n             return;\n         }\n     }\n     if (buf !\u003d null) {\n         buf.append(str);\n     } else {\n         out.write(str);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0e07ac6b2cff63550d7df336355ca63cc05aa40b": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Move from Joda CVS\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@10 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "12/18/03, 6:07 PM",
      "commitName": "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Move from Joda CVS\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@10 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "12/18/03, 6:07 PM",
          "commitName": "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "12/16/03, 1:39 PM",
          "commitNameOld": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 2.19,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "private void printTo(StringBuffer buf, Writer out, long instantLocal) throws IOException {\n    int minDigits \u003d iMinDigits;\n    long fraction;\n    try {\n        fraction \u003d iField.remainder(instantLocal);\n    } catch (RuntimeException e) {\n        if (buf !\u003d null) {\n            while (--minDigits \u003e\u003d 0) {\n                buf.append(\u0027\\ufffd\u0027);\n            }\n        } else {\n            while (--minDigits \u003e\u003d 0) {\n                out.write(\u0027\\ufffd\u0027);\n            }\n        }\n        return;\n    }\n    if (fraction \u003d\u003d 0) {\n        if (buf !\u003d null) {\n            while (--minDigits \u003e\u003d 0) {\n                buf.append(\u00270\u0027);\n            }\n        } else {\n            while (--minDigits \u003e\u003d 0) {\n                out.write(\u00270\u0027);\n            }\n        }\n        return;\n    }\n    String str;\n    long scaled \u003d fraction * iScaler / iRangeMillis;\n    if ((scaled \u0026 0x7fffffff) \u003d\u003d scaled) {\n        str \u003d Integer.toString((int) scaled);\n    } else {\n        str \u003d Long.toString(scaled);\n    }\n    int length \u003d str.length();\n    int digits \u003d iMaxDigits;\n    while (length \u003c digits) {\n        if (buf !\u003d null) {\n            buf.append(\u00270\u0027);\n        } else {\n            out.write(\u00270\u0027);\n        }\n        minDigits--;\n        digits--;\n    }\n    if (minDigits \u003c digits) {\n        while (minDigits \u003c digits) {\n            if (length \u003c\u003d 1 || str.charAt(length - 1) !\u003d \u00270\u0027) {\n                break;\n            }\n            digits--;\n            length--;\n        }\n        if (length \u003c str.length()) {\n            if (buf !\u003d null) {\n                for (int i \u003d 0; i \u003c length; i++) {\n                    buf.append(str.charAt(i));\n                }\n            } else {\n                for (int i \u003d 0; i \u003c length; i++) {\n                    out.write(str.charAt(i));\n                }\n            }\n            return;\n        }\n    }\n    if (buf !\u003d null) {\n        buf.append(str);\n    } else {\n        out.write(str);\n    }\n}",
          "path": "JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java",
          "functionStartLine": 1282,
          "functionName": "printTo",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,65 +1,74 @@\n-private void printTo(StringBuffer buf, Writer out, long millis) throws IOException {\n-    long fraction;\n-    if (millis \u003e\u003d 0) {\n-        fraction \u003d millis % iRange;\n-    } else {\n-        fraction \u003d iRange - 1 + (millis + 1) % iRange;\n-    }\n+private void printTo(StringBuffer buf, Writer out, long instantLocal) throws IOException {\n     int minDigits \u003d iMinDigits;\n+    long fraction;\n+    try {\n+        fraction \u003d iField.remainder(instantLocal);\n+    } catch (RuntimeException e) {\n+        if (buf !\u003d null) {\n+            while (--minDigits \u003e\u003d 0) {\n+                buf.append(\u0027\\ufffd\u0027);\n+            }\n+        } else {\n+            while (--minDigits \u003e\u003d 0) {\n+                out.write(\u0027\\ufffd\u0027);\n+            }\n+        }\n+        return;\n+    }\n     if (fraction \u003d\u003d 0) {\n         if (buf !\u003d null) {\n             while (--minDigits \u003e\u003d 0) {\n                 buf.append(\u00270\u0027);\n             }\n         } else {\n             while (--minDigits \u003e\u003d 0) {\n                 out.write(\u00270\u0027);\n             }\n         }\n         return;\n     }\n     String str;\n-    long scaled \u003d fraction * iScaler / iRange;\n+    long scaled \u003d fraction * iScaler / iRangeMillis;\n     if ((scaled \u0026 0x7fffffff) \u003d\u003d scaled) {\n         str \u003d Integer.toString((int) scaled);\n     } else {\n         str \u003d Long.toString(scaled);\n     }\n     int length \u003d str.length();\n     int digits \u003d iMaxDigits;\n     while (length \u003c digits) {\n         if (buf !\u003d null) {\n             buf.append(\u00270\u0027);\n         } else {\n             out.write(\u00270\u0027);\n         }\n         minDigits--;\n         digits--;\n     }\n     if (minDigits \u003c digits) {\n         while (minDigits \u003c digits) {\n             if (length \u003c\u003d 1 || str.charAt(length - 1) !\u003d \u00270\u0027) {\n                 break;\n             }\n             digits--;\n             length--;\n         }\n         if (length \u003c str.length()) {\n             if (buf !\u003d null) {\n                 for (int i \u003d 0; i \u003c length; i++) {\n                     buf.append(str.charAt(i));\n                 }\n             } else {\n                 for (int i \u003d 0; i \u003c length; i++) {\n                     out.write(str.charAt(i));\n                 }\n             }\n             return;\n         }\n     }\n     if (buf !\u003d null) {\n         buf.append(str);\n     } else {\n         out.write(str);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[buf-StringBuffer, out-Writer, millis-long]",
            "newValue": "[buf-StringBuffer, out-Writer, instantLocal-long]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Move from Joda CVS\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@10 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "12/18/03, 6:07 PM",
          "commitName": "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "12/16/03, 1:39 PM",
          "commitNameOld": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 2.19,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "private void printTo(StringBuffer buf, Writer out, long instantLocal) throws IOException {\n    int minDigits \u003d iMinDigits;\n    long fraction;\n    try {\n        fraction \u003d iField.remainder(instantLocal);\n    } catch (RuntimeException e) {\n        if (buf !\u003d null) {\n            while (--minDigits \u003e\u003d 0) {\n                buf.append(\u0027\\ufffd\u0027);\n            }\n        } else {\n            while (--minDigits \u003e\u003d 0) {\n                out.write(\u0027\\ufffd\u0027);\n            }\n        }\n        return;\n    }\n    if (fraction \u003d\u003d 0) {\n        if (buf !\u003d null) {\n            while (--minDigits \u003e\u003d 0) {\n                buf.append(\u00270\u0027);\n            }\n        } else {\n            while (--minDigits \u003e\u003d 0) {\n                out.write(\u00270\u0027);\n            }\n        }\n        return;\n    }\n    String str;\n    long scaled \u003d fraction * iScaler / iRangeMillis;\n    if ((scaled \u0026 0x7fffffff) \u003d\u003d scaled) {\n        str \u003d Integer.toString((int) scaled);\n    } else {\n        str \u003d Long.toString(scaled);\n    }\n    int length \u003d str.length();\n    int digits \u003d iMaxDigits;\n    while (length \u003c digits) {\n        if (buf !\u003d null) {\n            buf.append(\u00270\u0027);\n        } else {\n            out.write(\u00270\u0027);\n        }\n        minDigits--;\n        digits--;\n    }\n    if (minDigits \u003c digits) {\n        while (minDigits \u003c digits) {\n            if (length \u003c\u003d 1 || str.charAt(length - 1) !\u003d \u00270\u0027) {\n                break;\n            }\n            digits--;\n            length--;\n        }\n        if (length \u003c str.length()) {\n            if (buf !\u003d null) {\n                for (int i \u003d 0; i \u003c length; i++) {\n                    buf.append(str.charAt(i));\n                }\n            } else {\n                for (int i \u003d 0; i \u003c length; i++) {\n                    out.write(str.charAt(i));\n                }\n            }\n            return;\n        }\n    }\n    if (buf !\u003d null) {\n        buf.append(str);\n    } else {\n        out.write(str);\n    }\n}",
          "path": "JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java",
          "functionStartLine": 1282,
          "functionName": "printTo",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,65 +1,74 @@\n-private void printTo(StringBuffer buf, Writer out, long millis) throws IOException {\n-    long fraction;\n-    if (millis \u003e\u003d 0) {\n-        fraction \u003d millis % iRange;\n-    } else {\n-        fraction \u003d iRange - 1 + (millis + 1) % iRange;\n-    }\n+private void printTo(StringBuffer buf, Writer out, long instantLocal) throws IOException {\n     int minDigits \u003d iMinDigits;\n+    long fraction;\n+    try {\n+        fraction \u003d iField.remainder(instantLocal);\n+    } catch (RuntimeException e) {\n+        if (buf !\u003d null) {\n+            while (--minDigits \u003e\u003d 0) {\n+                buf.append(\u0027\\ufffd\u0027);\n+            }\n+        } else {\n+            while (--minDigits \u003e\u003d 0) {\n+                out.write(\u0027\\ufffd\u0027);\n+            }\n+        }\n+        return;\n+    }\n     if (fraction \u003d\u003d 0) {\n         if (buf !\u003d null) {\n             while (--minDigits \u003e\u003d 0) {\n                 buf.append(\u00270\u0027);\n             }\n         } else {\n             while (--minDigits \u003e\u003d 0) {\n                 out.write(\u00270\u0027);\n             }\n         }\n         return;\n     }\n     String str;\n-    long scaled \u003d fraction * iScaler / iRange;\n+    long scaled \u003d fraction * iScaler / iRangeMillis;\n     if ((scaled \u0026 0x7fffffff) \u003d\u003d scaled) {\n         str \u003d Integer.toString((int) scaled);\n     } else {\n         str \u003d Long.toString(scaled);\n     }\n     int length \u003d str.length();\n     int digits \u003d iMaxDigits;\n     while (length \u003c digits) {\n         if (buf !\u003d null) {\n             buf.append(\u00270\u0027);\n         } else {\n             out.write(\u00270\u0027);\n         }\n         minDigits--;\n         digits--;\n     }\n     if (minDigits \u003c digits) {\n         while (minDigits \u003c digits) {\n             if (length \u003c\u003d 1 || str.charAt(length - 1) !\u003d \u00270\u0027) {\n                 break;\n             }\n             digits--;\n             length--;\n         }\n         if (length \u003c str.length()) {\n             if (buf !\u003d null) {\n                 for (int i \u003d 0; i \u003c length; i++) {\n                     buf.append(str.charAt(i));\n                 }\n             } else {\n                 for (int i \u003d 0; i \u003c length; i++) {\n                     out.write(str.charAt(i));\n                 }\n             }\n             return;\n         }\n     }\n     if (buf !\u003d null) {\n         buf.append(str);\n     } else {\n         out.write(str);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb": {
      "type": "Yintroduced",
      "commitMessage": "Move version 0.9 to joda-time repository\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@4 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "12/16/03, 1:39 PM",
      "commitName": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
      "commitAuthor": "Stephen Colebourne",
      "diff": "@@ -0,0 +1,65 @@\n+private void printTo(StringBuffer buf, Writer out, long millis) throws IOException {\n+    long fraction;\n+    if (millis \u003e\u003d 0) {\n+        fraction \u003d millis % iRange;\n+    } else {\n+        fraction \u003d iRange - 1 + (millis + 1) % iRange;\n+    }\n+    int minDigits \u003d iMinDigits;\n+    if (fraction \u003d\u003d 0) {\n+        if (buf !\u003d null) {\n+            while (--minDigits \u003e\u003d 0) {\n+                buf.append(\u00270\u0027);\n+            }\n+        } else {\n+            while (--minDigits \u003e\u003d 0) {\n+                out.write(\u00270\u0027);\n+            }\n+        }\n+        return;\n+    }\n+    String str;\n+    long scaled \u003d fraction * iScaler / iRange;\n+    if ((scaled \u0026 0x7fffffff) \u003d\u003d scaled) {\n+        str \u003d Integer.toString((int) scaled);\n+    } else {\n+        str \u003d Long.toString(scaled);\n+    }\n+    int length \u003d str.length();\n+    int digits \u003d iMaxDigits;\n+    while (length \u003c digits) {\n+        if (buf !\u003d null) {\n+            buf.append(\u00270\u0027);\n+        } else {\n+            out.write(\u00270\u0027);\n+        }\n+        minDigits--;\n+        digits--;\n+    }\n+    if (minDigits \u003c digits) {\n+        while (minDigits \u003c digits) {\n+            if (length \u003c\u003d 1 || str.charAt(length - 1) !\u003d \u00270\u0027) {\n+                break;\n+            }\n+            digits--;\n+            length--;\n+        }\n+        if (length \u003c str.length()) {\n+            if (buf !\u003d null) {\n+                for (int i \u003d 0; i \u003c length; i++) {\n+                    buf.append(str.charAt(i));\n+                }\n+            } else {\n+                for (int i \u003d 0; i \u003c length; i++) {\n+                    out.write(str.charAt(i));\n+                }\n+            }\n+            return;\n+        }\n+    }\n+    if (buf !\u003d null) {\n+        buf.append(str);\n+    } else {\n+        out.write(str);\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void printTo(StringBuffer buf, Writer out, long millis) throws IOException {\n    long fraction;\n    if (millis \u003e\u003d 0) {\n        fraction \u003d millis % iRange;\n    } else {\n        fraction \u003d iRange - 1 + (millis + 1) % iRange;\n    }\n    int minDigits \u003d iMinDigits;\n    if (fraction \u003d\u003d 0) {\n        if (buf !\u003d null) {\n            while (--minDigits \u003e\u003d 0) {\n                buf.append(\u00270\u0027);\n            }\n        } else {\n            while (--minDigits \u003e\u003d 0) {\n                out.write(\u00270\u0027);\n            }\n        }\n        return;\n    }\n    String str;\n    long scaled \u003d fraction * iScaler / iRange;\n    if ((scaled \u0026 0x7fffffff) \u003d\u003d scaled) {\n        str \u003d Integer.toString((int) scaled);\n    } else {\n        str \u003d Long.toString(scaled);\n    }\n    int length \u003d str.length();\n    int digits \u003d iMaxDigits;\n    while (length \u003c digits) {\n        if (buf !\u003d null) {\n            buf.append(\u00270\u0027);\n        } else {\n            out.write(\u00270\u0027);\n        }\n        minDigits--;\n        digits--;\n    }\n    if (minDigits \u003c digits) {\n        while (minDigits \u003c digits) {\n            if (length \u003c\u003d 1 || str.charAt(length - 1) !\u003d \u00270\u0027) {\n                break;\n            }\n            digits--;\n            length--;\n        }\n        if (length \u003c str.length()) {\n            if (buf !\u003d null) {\n                for (int i \u003d 0; i \u003c length; i++) {\n                    buf.append(str.charAt(i));\n                }\n            } else {\n                for (int i \u003d 0; i \u003c length; i++) {\n                    out.write(str.charAt(i));\n                }\n            }\n            return;\n        }\n    }\n    if (buf !\u003d null) {\n        buf.append(str);\n    } else {\n        out.write(str);\n    }\n}",
      "path": "JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java",
      "functionStartLine": 1548,
      "functionName": "printTo",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}