{
  "origin": "codeshovel",
  "repositoryName": "Time-16b",
  "repositoryPath": "/tmp/Time-16b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DateTimeZone.java",
  "functionName": "getOffsetFromLocal",
  "functionId": "getOffsetFromLocal___instantLocal-long",
  "sourceFilePath": "src/main/java/org/joda/time/DateTimeZone.java",
  "functionAnnotation": "",
  "functionDoc": "Gets the millisecond offset to subtract from local time to get UTC time.\nThis offset can be used to undo adding the offset obtained by getOffset.\n\n\u003cpre\u003e\nmillisLocal \u003d\u003d millisUTC   + getOffset(millisUTC)\nmillisUTC   \u003d\u003d millisLocal - getOffsetFromLocal(millisLocal)\n\u003c/pre\u003e\n\nNOTE: After calculating millisLocal, some error may be introduced. At\noffset transitions (due to DST or other historical changes), ranges of\nlocal times may map to different UTC times.\n\u003cp\u003e\nThis method will return an offset suitable for calculating an instant\nafter any DST gap. For example, consider a zone with a cutover\nfrom 01:00 to 01:59:\u003cbr /\u003e\nInput: 00:00  Output: 00:00\u003cbr /\u003e\nInput: 00:30  Output: 00:30\u003cbr /\u003e\nInput: 01:00  Output: 02:00\u003cbr /\u003e\nInput: 01:30  Output: 02:30\u003cbr /\u003e\nInput: 02:00  Output: 02:00\u003cbr /\u003e\nInput: 02:30  Output: 02:30\u003cbr /\u003e\n\u003cp\u003e\nDuring a DST overlap (where the local time is ambiguous) this method will return\nthe earlier instant. The combination of these two rules is to always favour\ndaylight (summer) time over standard (winter) time.\n\u003cp\u003e\nNOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.\nPrior to v1.5, the DST gap behaviour was also not defined.\n\n@param instantLocal the millisecond instant, relative to this time zone, to get the offset for\n@return the millisecond offset to subtract from local time to get UTC time\n",
  "functionStartLine": 880,
  "functionEndLine": 911,
  "numCommitsSeen": 55,
  "timeTaken": 2359,
  "changeHistory": [
    "82c5e4f9550e4df36e07b66f35f7c3e9d7eb5eba",
    "df4a82f4fb46cc2248280c462e18f08d55a3d112",
    "552be4b677ec30a34d04d234395ba1a8c7beaacf",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1",
    "0c7b06d99dc6ac9dad724e9e3951aa0942593a6e",
    "c41eff1e6026a6e0b88ea45edda3e41eecc6ac7b",
    "a5b05944d52519cc70d86d1f59fe1c0e8d2e8956",
    "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb"
  ],
  "changeHistoryShort": {
    "82c5e4f9550e4df36e07b66f35f7c3e9d7eb5eba": "Ybodychange",
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": "Yfilerename",
    "552be4b677ec30a34d04d234395ba1a8c7beaacf": "Ymultichange(Ybodychange,Ydocchange)",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": "Yfilerename",
    "0c7b06d99dc6ac9dad724e9e3951aa0942593a6e": "Ybodychange",
    "c41eff1e6026a6e0b88ea45edda3e41eecc6ac7b": "Ymultichange(Ybodychange,Ydocchange)",
    "a5b05944d52519cc70d86d1f59fe1c0e8d2e8956": "Ydocchange",
    "0e07ac6b2cff63550d7df336355ca63cc05aa40b": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb": "Yintroduced"
  },
  "changeHistoryDetails": {
    "82c5e4f9550e4df36e07b66f35f7c3e9d7eb5eba": {
      "type": "Ybodychange",
      "commitMessage": "Ambiguous date-time when in zone with offset of 00:00 [3424669]\n",
      "commitDate": "10/23/11, 4:16 PM",
      "commitName": "82c5e4f9550e4df36e07b66f35f7c3e9d7eb5eba",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "5/16/11, 10:02 AM",
      "commitNameOld": "df4a82f4fb46cc2248280c462e18f08d55a3d112",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 160.26,
      "commitsBetweenForRepo": 46,
      "commitsBetweenForFile": 1,
      "actualSource": "public int getOffsetFromLocal(long instantLocal) {\n    final int offsetLocal \u003d getOffset(instantLocal);\n    final long instantAdjusted \u003d instantLocal - offsetLocal;\n    final int offsetAdjusted \u003d getOffset(instantAdjusted);\n    if (offsetLocal !\u003d offsetAdjusted) {\n        if ((offsetLocal - offsetAdjusted) \u003c 0) {\n            long nextLocal \u003d nextTransition(instantAdjusted);\n            long nextAdjusted \u003d nextTransition(instantLocal - offsetAdjusted);\n            if (nextLocal !\u003d nextAdjusted) {\n                return offsetLocal;\n            }\n        }\n    } else if (offsetLocal \u003e\u003d 0) {\n        long prev \u003d previousTransition(instantAdjusted);\n        if (prev \u003c instantAdjusted) {\n            int offsetPrev \u003d getOffset(prev);\n            int diff \u003d offsetPrev - offsetLocal;\n            if (instantAdjusted - prev \u003c\u003d diff) {\n                return offsetPrev;\n            }\n        }\n    }\n    return offsetAdjusted;\n}",
      "path": "src/main/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 880,
      "functionName": "getOffsetFromLocal",
      "functionAnnotation": "",
      "functionDoc": "Gets the millisecond offset to subtract from local time to get UTC time.\nThis offset can be used to undo adding the offset obtained by getOffset.\n\n\u003cpre\u003e\nmillisLocal \u003d\u003d millisUTC   + getOffset(millisUTC)\nmillisUTC   \u003d\u003d millisLocal - getOffsetFromLocal(millisLocal)\n\u003c/pre\u003e\n\nNOTE: After calculating millisLocal, some error may be introduced. At\noffset transitions (due to DST or other historical changes), ranges of\nlocal times may map to different UTC times.\n\u003cp\u003e\nThis method will return an offset suitable for calculating an instant\nafter any DST gap. For example, consider a zone with a cutover\nfrom 01:00 to 01:59:\u003cbr /\u003e\nInput: 00:00  Output: 00:00\u003cbr /\u003e\nInput: 00:30  Output: 00:30\u003cbr /\u003e\nInput: 01:00  Output: 02:00\u003cbr /\u003e\nInput: 01:30  Output: 02:30\u003cbr /\u003e\nInput: 02:00  Output: 02:00\u003cbr /\u003e\nInput: 02:30  Output: 02:30\u003cbr /\u003e\n\u003cp\u003e\nDuring a DST overlap (where the local time is ambiguous) this method will return\nthe earlier instant. The combination of these two rules is to always favour\ndaylight (summer) time over standard (winter) time.\n\u003cp\u003e\nNOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.\nPrior to v1.5, the DST gap behaviour was also not defined.\n\n@param instantLocal the millisecond instant, relative to this time zone, to get the offset for\n@return the millisecond offset to subtract from local time to get UTC time\n",
      "diff": "@@ -1,24 +1,24 @@\n public int getOffsetFromLocal(long instantLocal) {\n     final int offsetLocal \u003d getOffset(instantLocal);\n     final long instantAdjusted \u003d instantLocal - offsetLocal;\n     final int offsetAdjusted \u003d getOffset(instantAdjusted);\n     if (offsetLocal !\u003d offsetAdjusted) {\n         if ((offsetLocal - offsetAdjusted) \u003c 0) {\n             long nextLocal \u003d nextTransition(instantAdjusted);\n             long nextAdjusted \u003d nextTransition(instantLocal - offsetAdjusted);\n             if (nextLocal !\u003d nextAdjusted) {\n                 return offsetLocal;\n             }\n         }\n-    } else if (offsetLocal \u003e 0) {\n+    } else if (offsetLocal \u003e\u003d 0) {\n         long prev \u003d previousTransition(instantAdjusted);\n         if (prev \u003c instantAdjusted) {\n             int offsetPrev \u003d getOffset(prev);\n             int diff \u003d offsetPrev - offsetLocal;\n             if (instantAdjusted - prev \u003c\u003d diff) {\n                 return offsetPrev;\n             }\n         }\n     }\n     return offsetAdjusted;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": {
      "type": "Yfilerename",
      "commitMessage": "Remove JodaTime folder moving files to top level\n",
      "commitDate": "5/16/11, 10:02 AM",
      "commitName": "df4a82f4fb46cc2248280c462e18f08d55a3d112",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "5/16/11, 9:58 AM",
      "commitNameOld": "72b22654962284bac59c2777131b42a2d1f53228",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public int getOffsetFromLocal(long instantLocal) {\n    final int offsetLocal \u003d getOffset(instantLocal);\n    final long instantAdjusted \u003d instantLocal - offsetLocal;\n    final int offsetAdjusted \u003d getOffset(instantAdjusted);\n    if (offsetLocal !\u003d offsetAdjusted) {\n        if ((offsetLocal - offsetAdjusted) \u003c 0) {\n            long nextLocal \u003d nextTransition(instantAdjusted);\n            long nextAdjusted \u003d nextTransition(instantLocal - offsetAdjusted);\n            if (nextLocal !\u003d nextAdjusted) {\n                return offsetLocal;\n            }\n        }\n    } else if (offsetLocal \u003e 0) {\n        long prev \u003d previousTransition(instantAdjusted);\n        if (prev \u003c instantAdjusted) {\n            int offsetPrev \u003d getOffset(prev);\n            int diff \u003d offsetPrev - offsetLocal;\n            if (instantAdjusted - prev \u003c\u003d diff) {\n                return offsetPrev;\n            }\n        }\n    }\n    return offsetAdjusted;\n}",
      "path": "src/main/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 880,
      "functionName": "getOffsetFromLocal",
      "functionAnnotation": "",
      "functionDoc": "Gets the millisecond offset to subtract from local time to get UTC time.\nThis offset can be used to undo adding the offset obtained by getOffset.\n\n\u003cpre\u003e\nmillisLocal \u003d\u003d millisUTC   + getOffset(millisUTC)\nmillisUTC   \u003d\u003d millisLocal - getOffsetFromLocal(millisLocal)\n\u003c/pre\u003e\n\nNOTE: After calculating millisLocal, some error may be introduced. At\noffset transitions (due to DST or other historical changes), ranges of\nlocal times may map to different UTC times.\n\u003cp\u003e\nThis method will return an offset suitable for calculating an instant\nafter any DST gap. For example, consider a zone with a cutover\nfrom 01:00 to 01:59:\u003cbr /\u003e\nInput: 00:00  Output: 00:00\u003cbr /\u003e\nInput: 00:30  Output: 00:30\u003cbr /\u003e\nInput: 01:00  Output: 02:00\u003cbr /\u003e\nInput: 01:30  Output: 02:30\u003cbr /\u003e\nInput: 02:00  Output: 02:00\u003cbr /\u003e\nInput: 02:30  Output: 02:30\u003cbr /\u003e\n\u003cp\u003e\nDuring a DST overlap (where the local time is ambiguous) this method will return\nthe earlier instant. The combination of these two rules is to always favour\ndaylight (summer) time over standard (winter) time.\n\u003cp\u003e\nNOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.\nPrior to v1.5, the DST gap behaviour was also not defined.\n\n@param instantLocal the millisecond instant, relative to this time zone, to get the offset for\n@return the millisecond offset to subtract from local time to get UTC time\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/main/java/org/joda/time/DateTimeZone.java",
        "newPath": "src/main/java/org/joda/time/DateTimeZone.java"
      }
    },
    "552be4b677ec30a34d04d234395ba1a8c7beaacf": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "DateTimeZone.getOffsetFromLocal [2952991]\nThe behaviour during DST overlaps is now defined to always return the earlier instant which is normally known as daylight or summer time. Previously, the result varied by hemisphere. This affects the constructor of DateTime and other methods\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1596 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "12/5/10, 3:43 PM",
      "commitName": "552be4b677ec30a34d04d234395ba1a8c7beaacf",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "DateTimeZone.getOffsetFromLocal [2952991]\nThe behaviour during DST overlaps is now defined to always return the earlier instant which is normally known as daylight or summer time. Previously, the result varied by hemisphere. This affects the constructor of DateTime and other methods\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1596 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "12/5/10, 3:43 PM",
          "commitName": "552be4b677ec30a34d04d234395ba1a8c7beaacf",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "12/5/10, 1:27 PM",
          "commitNameOld": "c7a581e55fc988bd90fa4bb1b0acece5181b7c5f",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 0.09,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public int getOffsetFromLocal(long instantLocal) {\n    final int offsetLocal \u003d getOffset(instantLocal);\n    final long instantAdjusted \u003d instantLocal - offsetLocal;\n    final int offsetAdjusted \u003d getOffset(instantAdjusted);\n    if (offsetLocal !\u003d offsetAdjusted) {\n        if ((offsetLocal - offsetAdjusted) \u003c 0) {\n            long nextLocal \u003d nextTransition(instantAdjusted);\n            long nextAdjusted \u003d nextTransition(instantLocal - offsetAdjusted);\n            if (nextLocal !\u003d nextAdjusted) {\n                return offsetLocal;\n            }\n        }\n    } else if (offsetLocal \u003e 0) {\n        long prev \u003d previousTransition(instantAdjusted);\n        if (prev \u003c instantAdjusted) {\n            int offsetPrev \u003d getOffset(prev);\n            int diff \u003d offsetPrev - offsetLocal;\n            if (instantAdjusted - prev \u003c\u003d diff) {\n                return offsetPrev;\n            }\n        }\n    }\n    return offsetAdjusted;\n}",
          "path": "JodaTime/src/main/java/org/joda/time/DateTimeZone.java",
          "functionStartLine": 879,
          "functionName": "getOffsetFromLocal",
          "functionAnnotation": "",
          "functionDoc": "Gets the millisecond offset to subtract from local time to get UTC time.\nThis offset can be used to undo adding the offset obtained by getOffset.\n\n\u003cpre\u003e\nmillisLocal \u003d\u003d millisUTC   + getOffset(millisUTC)\nmillisUTC   \u003d\u003d millisLocal - getOffsetFromLocal(millisLocal)\n\u003c/pre\u003e\n\nNOTE: After calculating millisLocal, some error may be introduced. At\noffset transitions (due to DST or other historical changes), ranges of\nlocal times may map to different UTC times.\n\u003cp\u003e\nThis method will return an offset suitable for calculating an instant\nafter any DST gap. For example, consider a zone with a cutover\nfrom 01:00 to 01:59:\u003cbr /\u003e\nInput: 00:00  Output: 00:00\u003cbr /\u003e\nInput: 00:30  Output: 00:30\u003cbr /\u003e\nInput: 01:00  Output: 02:00\u003cbr /\u003e\nInput: 01:30  Output: 02:30\u003cbr /\u003e\nInput: 02:00  Output: 02:00\u003cbr /\u003e\nInput: 02:30  Output: 02:30\u003cbr /\u003e\n\u003cp\u003e\nDuring a DST overlap (where the local time is ambiguous) this method will return\nthe earlier instant. The combination of these two rules is to always favour\ndaylight (summer) time over standard (winter) time.\n\u003cp\u003e\nNOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.\nPrior to v1.5, the DST gap behaviour was also not defined.\n\n@param instantLocal the millisecond instant, relative to this time zone, to get the offset for\n@return the millisecond offset to subtract from local time to get UTC time\n",
          "diff": "@@ -1,14 +1,24 @@\n public int getOffsetFromLocal(long instantLocal) {\n-    int offsetLocal \u003d getOffset(instantLocal);\n-    int offsetAdjusted \u003d getOffset(instantLocal - offsetLocal);\n+    final int offsetLocal \u003d getOffset(instantLocal);\n+    final long instantAdjusted \u003d instantLocal - offsetLocal;\n+    final int offsetAdjusted \u003d getOffset(instantAdjusted);\n     if (offsetLocal !\u003d offsetAdjusted) {\n         if ((offsetLocal - offsetAdjusted) \u003c 0) {\n-            long nextLocal \u003d nextTransition(instantLocal - offsetLocal);\n+            long nextLocal \u003d nextTransition(instantAdjusted);\n             long nextAdjusted \u003d nextTransition(instantLocal - offsetAdjusted);\n             if (nextLocal !\u003d nextAdjusted) {\n                 return offsetLocal;\n             }\n         }\n+    } else if (offsetLocal \u003e 0) {\n+        long prev \u003d previousTransition(instantAdjusted);\n+        if (prev \u003c instantAdjusted) {\n+            int offsetPrev \u003d getOffset(prev);\n+            int diff \u003d offsetPrev - offsetLocal;\n+            if (instantAdjusted - prev \u003c\u003d diff) {\n+                return offsetPrev;\n+            }\n+        }\n     }\n     return offsetAdjusted;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "DateTimeZone.getOffsetFromLocal [2952991]\nThe behaviour during DST overlaps is now defined to always return the earlier instant which is normally known as daylight or summer time. Previously, the result varied by hemisphere. This affects the constructor of DateTime and other methods\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1596 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "12/5/10, 3:43 PM",
          "commitName": "552be4b677ec30a34d04d234395ba1a8c7beaacf",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "12/5/10, 1:27 PM",
          "commitNameOld": "c7a581e55fc988bd90fa4bb1b0acece5181b7c5f",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 0.09,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public int getOffsetFromLocal(long instantLocal) {\n    final int offsetLocal \u003d getOffset(instantLocal);\n    final long instantAdjusted \u003d instantLocal - offsetLocal;\n    final int offsetAdjusted \u003d getOffset(instantAdjusted);\n    if (offsetLocal !\u003d offsetAdjusted) {\n        if ((offsetLocal - offsetAdjusted) \u003c 0) {\n            long nextLocal \u003d nextTransition(instantAdjusted);\n            long nextAdjusted \u003d nextTransition(instantLocal - offsetAdjusted);\n            if (nextLocal !\u003d nextAdjusted) {\n                return offsetLocal;\n            }\n        }\n    } else if (offsetLocal \u003e 0) {\n        long prev \u003d previousTransition(instantAdjusted);\n        if (prev \u003c instantAdjusted) {\n            int offsetPrev \u003d getOffset(prev);\n            int diff \u003d offsetPrev - offsetLocal;\n            if (instantAdjusted - prev \u003c\u003d diff) {\n                return offsetPrev;\n            }\n        }\n    }\n    return offsetAdjusted;\n}",
          "path": "JodaTime/src/main/java/org/joda/time/DateTimeZone.java",
          "functionStartLine": 879,
          "functionName": "getOffsetFromLocal",
          "functionAnnotation": "",
          "functionDoc": "Gets the millisecond offset to subtract from local time to get UTC time.\nThis offset can be used to undo adding the offset obtained by getOffset.\n\n\u003cpre\u003e\nmillisLocal \u003d\u003d millisUTC   + getOffset(millisUTC)\nmillisUTC   \u003d\u003d millisLocal - getOffsetFromLocal(millisLocal)\n\u003c/pre\u003e\n\nNOTE: After calculating millisLocal, some error may be introduced. At\noffset transitions (due to DST or other historical changes), ranges of\nlocal times may map to different UTC times.\n\u003cp\u003e\nThis method will return an offset suitable for calculating an instant\nafter any DST gap. For example, consider a zone with a cutover\nfrom 01:00 to 01:59:\u003cbr /\u003e\nInput: 00:00  Output: 00:00\u003cbr /\u003e\nInput: 00:30  Output: 00:30\u003cbr /\u003e\nInput: 01:00  Output: 02:00\u003cbr /\u003e\nInput: 01:30  Output: 02:30\u003cbr /\u003e\nInput: 02:00  Output: 02:00\u003cbr /\u003e\nInput: 02:30  Output: 02:30\u003cbr /\u003e\n\u003cp\u003e\nDuring a DST overlap (where the local time is ambiguous) this method will return\nthe earlier instant. The combination of these two rules is to always favour\ndaylight (summer) time over standard (winter) time.\n\u003cp\u003e\nNOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.\nPrior to v1.5, the DST gap behaviour was also not defined.\n\n@param instantLocal the millisecond instant, relative to this time zone, to get the offset for\n@return the millisecond offset to subtract from local time to get UTC time\n",
          "diff": "@@ -1,14 +1,24 @@\n public int getOffsetFromLocal(long instantLocal) {\n-    int offsetLocal \u003d getOffset(instantLocal);\n-    int offsetAdjusted \u003d getOffset(instantLocal - offsetLocal);\n+    final int offsetLocal \u003d getOffset(instantLocal);\n+    final long instantAdjusted \u003d instantLocal - offsetLocal;\n+    final int offsetAdjusted \u003d getOffset(instantAdjusted);\n     if (offsetLocal !\u003d offsetAdjusted) {\n         if ((offsetLocal - offsetAdjusted) \u003c 0) {\n-            long nextLocal \u003d nextTransition(instantLocal - offsetLocal);\n+            long nextLocal \u003d nextTransition(instantAdjusted);\n             long nextAdjusted \u003d nextTransition(instantLocal - offsetAdjusted);\n             if (nextLocal !\u003d nextAdjusted) {\n                 return offsetLocal;\n             }\n         }\n+    } else if (offsetLocal \u003e 0) {\n+        long prev \u003d previousTransition(instantAdjusted);\n+        if (prev \u003c instantAdjusted) {\n+            int offsetPrev \u003d getOffset(prev);\n+            int diff \u003d offsetPrev - offsetLocal;\n+            if (instantAdjusted - prev \u003c\u003d diff) {\n+                return offsetPrev;\n+            }\n+        }\n     }\n     return offsetAdjusted;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Gets the millisecond offset to subtract from local time to get UTC time.\nThis offset can be used to undo adding the offset obtained by getOffset.\n\n\u003cpre\u003e\nmillisLocal \u003d\u003d millisUTC   + getOffset(millisUTC)\nmillisUTC   \u003d\u003d millisLocal - getOffsetFromLocal(millisLocal)\n\u003c/pre\u003e\n\nNOTE: After calculating millisLocal, some error may be introduced. At\noffset transitions (due to DST or other historical changes), ranges of\nlocal times may map to different UTC times.\n\u003cp\u003e\nThis method will return an offset suitable for calculating an instant\nafter any DST gap. For example, consider a zone with a cutover\nfrom 01:00 to 01:59:\u003cbr /\u003e\nInput: 00:00  Output: 00:00\u003cbr /\u003e\nInput: 00:30  Output: 00:30\u003cbr /\u003e\nInput: 01:00  Output: 02:00\u003cbr /\u003e\nInput: 01:30  Output: 02:30\u003cbr /\u003e\nInput: 02:00  Output: 02:00\u003cbr /\u003e\nInput: 02:30  Output: 02:30\u003cbr /\u003e\n\u003cp\u003e\nNOTE: The behaviour of this method changed in v1.5, with the emphasis\non returning a consistent result later along the time-line (shown above).\n\n@param instantLocal the millisecond instant, relative to this time zone, to\nget the offset for\n@return the millisecond offset to subtract from local time to get UTC time\n",
            "newValue": "Gets the millisecond offset to subtract from local time to get UTC time.\nThis offset can be used to undo adding the offset obtained by getOffset.\n\n\u003cpre\u003e\nmillisLocal \u003d\u003d millisUTC   + getOffset(millisUTC)\nmillisUTC   \u003d\u003d millisLocal - getOffsetFromLocal(millisLocal)\n\u003c/pre\u003e\n\nNOTE: After calculating millisLocal, some error may be introduced. At\noffset transitions (due to DST or other historical changes), ranges of\nlocal times may map to different UTC times.\n\u003cp\u003e\nThis method will return an offset suitable for calculating an instant\nafter any DST gap. For example, consider a zone with a cutover\nfrom 01:00 to 01:59:\u003cbr /\u003e\nInput: 00:00  Output: 00:00\u003cbr /\u003e\nInput: 00:30  Output: 00:30\u003cbr /\u003e\nInput: 01:00  Output: 02:00\u003cbr /\u003e\nInput: 01:30  Output: 02:30\u003cbr /\u003e\nInput: 02:00  Output: 02:00\u003cbr /\u003e\nInput: 02:30  Output: 02:30\u003cbr /\u003e\n\u003cp\u003e\nDuring a DST overlap (where the local time is ambiguous) this method will return\nthe earlier instant. The combination of these two rules is to always favour\ndaylight (summer) time over standard (winter) time.\n\u003cp\u003e\nNOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.\nPrior to v1.5, the DST gap behaviour was also not defined.\n\n@param instantLocal the millisecond instant, relative to this time zone, to get the offset for\n@return the millisecond offset to subtract from local time to get UTC time\n"
          }
        }
      ]
    },
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": {
      "type": "Yfilerename",
      "commitMessage": "Convert to maven 2\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1540 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/8/10, 5:17 PM",
      "commitName": "53feb3fa56af7260e607844524b7e5a9be49ecc1",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/8/10, 5:02 PM",
      "commitNameOld": "7fa2ceaf5d95d050095432aa646ea803aa35e122",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public int getOffsetFromLocal(long instantLocal) {\n    int offsetLocal \u003d getOffset(instantLocal);\n    int offsetAdjusted \u003d getOffset(instantLocal - offsetLocal);\n    if (offsetLocal !\u003d offsetAdjusted) {\n        if ((offsetLocal - offsetAdjusted) \u003c 0) {\n            long nextLocal \u003d nextTransition(instantLocal - offsetLocal);\n            long nextAdjusted \u003d nextTransition(instantLocal - offsetAdjusted);\n            if (nextLocal !\u003d nextAdjusted) {\n                return offsetLocal;\n            }\n        }\n    }\n    return offsetAdjusted;\n}",
      "path": "JodaTime/src/main/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 860,
      "functionName": "getOffsetFromLocal",
      "functionAnnotation": "",
      "functionDoc": "Gets the millisecond offset to subtract from local time to get UTC time.\nThis offset can be used to undo adding the offset obtained by getOffset.\n\n\u003cpre\u003e\nmillisLocal \u003d\u003d millisUTC   + getOffset(millisUTC)\nmillisUTC   \u003d\u003d millisLocal - getOffsetFromLocal(millisLocal)\n\u003c/pre\u003e\n\nNOTE: After calculating millisLocal, some error may be introduced. At\noffset transitions (due to DST or other historical changes), ranges of\nlocal times may map to different UTC times.\n\u003cp\u003e\nThis method will return an offset suitable for calculating an instant\nafter any DST gap. For example, consider a zone with a cutover\nfrom 01:00 to 01:59:\u003cbr /\u003e\nInput: 00:00  Output: 00:00\u003cbr /\u003e\nInput: 00:30  Output: 00:30\u003cbr /\u003e\nInput: 01:00  Output: 02:00\u003cbr /\u003e\nInput: 01:30  Output: 02:30\u003cbr /\u003e\nInput: 02:00  Output: 02:00\u003cbr /\u003e\nInput: 02:30  Output: 02:30\u003cbr /\u003e\n\u003cp\u003e\nNOTE: The behaviour of this method changed in v1.5, with the emphasis\non returning a consistent result later along the time-line (shown above).\n\n@param instantLocal the millisecond instant, relative to this time zone, to\nget the offset for\n@return the millisecond offset to subtract from local time to get UTC time\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
        "newPath": "JodaTime/src/main/java/org/joda/time/DateTimeZone.java"
      }
    },
    "0c7b06d99dc6ac9dad724e9e3951aa0942593a6e": {
      "type": "Ybodychange",
      "commitMessage": "Fix getOffsetFromLocal DST gap adjustment.\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1315 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "1/19/08, 9:50 AM",
      "commitName": "0c7b06d99dc6ac9dad724e9e3951aa0942593a6e",
      "commitAuthor": "Brian S O\u0027Neill",
      "commitDateOld": "10/29/07, 2:28 AM",
      "commitNameOld": "5ccd1def534f2e37637d0311fb8bcfba62f1c74d",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 82.35,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "actualSource": "public int getOffsetFromLocal(long instantLocal) {\n    int offsetLocal \u003d getOffset(instantLocal);\n    int offsetAdjusted \u003d getOffset(instantLocal - offsetLocal);\n    if (offsetLocal !\u003d offsetAdjusted) {\n        if ((offsetLocal - offsetAdjusted) \u003c 0) {\n            long nextLocal \u003d nextTransition(instantLocal - offsetLocal);\n            long nextAdjusted \u003d nextTransition(instantLocal - offsetAdjusted);\n            if (nextLocal !\u003d nextAdjusted) {\n                return offsetLocal;\n            }\n        }\n    }\n    return offsetAdjusted;\n}",
      "path": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 858,
      "functionName": "getOffsetFromLocal",
      "functionAnnotation": "",
      "functionDoc": "Gets the millisecond offset to subtract from local time to get UTC time.\nThis offset can be used to undo adding the offset obtained by getOffset.\n\n\u003cpre\u003e\nmillisLocal \u003d\u003d millisUTC   + getOffset(millisUTC)\nmillisUTC   \u003d\u003d millisLocal - getOffsetFromLocal(millisLocal)\n\u003c/pre\u003e\n\nNOTE: After calculating millisLocal, some error may be introduced. At\noffset transitions (due to DST or other historical changes), ranges of\nlocal times may map to different UTC times.\n\u003cp\u003e\nThis method will return an offset suitable for calculating an instant\nafter any DST gap. For example, consider a zone with a cutover\nfrom 01:00 to 01:59:\u003cbr /\u003e\nInput: 00:00  Output: 00:00\u003cbr /\u003e\nInput: 00:30  Output: 00:30\u003cbr /\u003e\nInput: 01:00  Output: 02:00\u003cbr /\u003e\nInput: 01:30  Output: 02:30\u003cbr /\u003e\nInput: 02:00  Output: 02:00\u003cbr /\u003e\nInput: 02:30  Output: 02:30\u003cbr /\u003e\n\u003cp\u003e\nNOTE: The behaviour of this method changed in v1.5, with the emphasis\non returning a consistent result later along the time-line (shown above).\n\n@param instantLocal the millisecond instant, relative to this time zone, to\nget the offset for\n@return the millisecond offset to subtract from local time to get UTC time\n",
      "diff": "@@ -1,14 +1,14 @@\n public int getOffsetFromLocal(long instantLocal) {\n     int offsetLocal \u003d getOffset(instantLocal);\n     int offsetAdjusted \u003d getOffset(instantLocal - offsetLocal);\n     if (offsetLocal !\u003d offsetAdjusted) {\n-        if (offsetLocal \u003c 0) {\n+        if ((offsetLocal - offsetAdjusted) \u003c 0) {\n             long nextLocal \u003d nextTransition(instantLocal - offsetLocal);\n             long nextAdjusted \u003d nextTransition(instantLocal - offsetAdjusted);\n             if (nextLocal !\u003d nextAdjusted) {\n                 return offsetLocal;\n             }\n         }\n     }\n     return offsetAdjusted;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c41eff1e6026a6e0b88ea45edda3e41eecc6ac7b": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Fix DateTimeZone to better handle spring DST cutover\nbugs 1710316, 1747219, 1755158\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1232 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/4/07, 10:23 AM",
      "commitName": "c41eff1e6026a6e0b88ea45edda3e41eecc6ac7b",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Fix DateTimeZone to better handle spring DST cutover\nbugs 1710316, 1747219, 1755158\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1232 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "8/4/07, 10:23 AM",
          "commitName": "c41eff1e6026a6e0b88ea45edda3e41eecc6ac7b",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "6/11/07, 3:13 PM",
          "commitNameOld": "9ab9cb1a2624063083cf4ed8d701eb15ee84674e",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 53.8,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "public int getOffsetFromLocal(long instantLocal) {\n    int offsetLocal \u003d getOffset(instantLocal);\n    int offsetAdjusted \u003d getOffset(instantLocal - offsetLocal);\n    if (offsetLocal !\u003d offsetAdjusted) {\n        if (offsetLocal \u003c 0) {\n            long nextLocal \u003d nextTransition(instantLocal - offsetLocal);\n            long nextAdjusted \u003d nextTransition(instantLocal - offsetAdjusted);\n            if (nextLocal !\u003d nextAdjusted) {\n                return offsetLocal;\n            }\n        }\n    }\n    return offsetAdjusted;\n}",
          "path": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
          "functionStartLine": 855,
          "functionName": "getOffsetFromLocal",
          "functionAnnotation": "",
          "functionDoc": "Gets the millisecond offset to subtract from local time to get UTC time.\nThis offset can be used to undo adding the offset obtained by getOffset.\n\n\u003cpre\u003e\nmillisLocal \u003d\u003d millisUTC   + getOffset(millisUTC)\nmillisUTC   \u003d\u003d millisLocal - getOffsetFromLocal(millisLocal)\n\u003c/pre\u003e\n\nNOTE: After calculating millisLocal, some error may be introduced. At\noffset transitions (due to DST or other historical changes), ranges of\nlocal times may map to different UTC times.\n\u003cp\u003e\nThis method will return an offset suitable for calculating an instant\nafter any DST gap. For example, consider a zone with a cutover\nfrom 01:00 to 01:59:\u003cbr /\u003e\nInput: 00:00  Output: 00:00\u003cbr /\u003e\nInput: 00:30  Output: 00:30\u003cbr /\u003e\nInput: 01:00  Output: 02:00\u003cbr /\u003e\nInput: 01:30  Output: 02:30\u003cbr /\u003e\nInput: 02:00  Output: 02:00\u003cbr /\u003e\nInput: 02:30  Output: 02:30\u003cbr /\u003e\n\u003cp\u003e\nNOTE: The behaviour of this method changed in v1.5, with the emphasis\non returning a consistent result later along the time-line (shown above).\n\n@param instantLocal the millisecond instant, relative to this time zone, to\nget the offset for\n@return the millisecond offset to subtract from local time to get UTC time\n",
          "diff": "@@ -1,3 +1,14 @@\n public int getOffsetFromLocal(long instantLocal) {\n-    return getOffset(instantLocal - getOffset(instantLocal));\n+    int offsetLocal \u003d getOffset(instantLocal);\n+    int offsetAdjusted \u003d getOffset(instantLocal - offsetLocal);\n+    if (offsetLocal !\u003d offsetAdjusted) {\n+        if (offsetLocal \u003c 0) {\n+            long nextLocal \u003d nextTransition(instantLocal - offsetLocal);\n+            long nextAdjusted \u003d nextTransition(instantLocal - offsetAdjusted);\n+            if (nextLocal !\u003d nextAdjusted) {\n+                return offsetLocal;\n+            }\n+        }\n+    }\n+    return offsetAdjusted;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Fix DateTimeZone to better handle spring DST cutover\nbugs 1710316, 1747219, 1755158\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1232 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "8/4/07, 10:23 AM",
          "commitName": "c41eff1e6026a6e0b88ea45edda3e41eecc6ac7b",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "6/11/07, 3:13 PM",
          "commitNameOld": "9ab9cb1a2624063083cf4ed8d701eb15ee84674e",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 53.8,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "public int getOffsetFromLocal(long instantLocal) {\n    int offsetLocal \u003d getOffset(instantLocal);\n    int offsetAdjusted \u003d getOffset(instantLocal - offsetLocal);\n    if (offsetLocal !\u003d offsetAdjusted) {\n        if (offsetLocal \u003c 0) {\n            long nextLocal \u003d nextTransition(instantLocal - offsetLocal);\n            long nextAdjusted \u003d nextTransition(instantLocal - offsetAdjusted);\n            if (nextLocal !\u003d nextAdjusted) {\n                return offsetLocal;\n            }\n        }\n    }\n    return offsetAdjusted;\n}",
          "path": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
          "functionStartLine": 855,
          "functionName": "getOffsetFromLocal",
          "functionAnnotation": "",
          "functionDoc": "Gets the millisecond offset to subtract from local time to get UTC time.\nThis offset can be used to undo adding the offset obtained by getOffset.\n\n\u003cpre\u003e\nmillisLocal \u003d\u003d millisUTC   + getOffset(millisUTC)\nmillisUTC   \u003d\u003d millisLocal - getOffsetFromLocal(millisLocal)\n\u003c/pre\u003e\n\nNOTE: After calculating millisLocal, some error may be introduced. At\noffset transitions (due to DST or other historical changes), ranges of\nlocal times may map to different UTC times.\n\u003cp\u003e\nThis method will return an offset suitable for calculating an instant\nafter any DST gap. For example, consider a zone with a cutover\nfrom 01:00 to 01:59:\u003cbr /\u003e\nInput: 00:00  Output: 00:00\u003cbr /\u003e\nInput: 00:30  Output: 00:30\u003cbr /\u003e\nInput: 01:00  Output: 02:00\u003cbr /\u003e\nInput: 01:30  Output: 02:30\u003cbr /\u003e\nInput: 02:00  Output: 02:00\u003cbr /\u003e\nInput: 02:30  Output: 02:30\u003cbr /\u003e\n\u003cp\u003e\nNOTE: The behaviour of this method changed in v1.5, with the emphasis\non returning a consistent result later along the time-line (shown above).\n\n@param instantLocal the millisecond instant, relative to this time zone, to\nget the offset for\n@return the millisecond offset to subtract from local time to get UTC time\n",
          "diff": "@@ -1,3 +1,14 @@\n public int getOffsetFromLocal(long instantLocal) {\n-    return getOffset(instantLocal - getOffset(instantLocal));\n+    int offsetLocal \u003d getOffset(instantLocal);\n+    int offsetAdjusted \u003d getOffset(instantLocal - offsetLocal);\n+    if (offsetLocal !\u003d offsetAdjusted) {\n+        if (offsetLocal \u003c 0) {\n+            long nextLocal \u003d nextTransition(instantLocal - offsetLocal);\n+            long nextAdjusted \u003d nextTransition(instantLocal - offsetAdjusted);\n+            if (nextLocal !\u003d nextAdjusted) {\n+                return offsetLocal;\n+            }\n+        }\n+    }\n+    return offsetAdjusted;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Gets the millisecond offset to subtract from local time to get UTC time.\nThis offset can be used to undo adding the offset obtained by getOffset.\n\n\u003cpre\u003e\nmillisLocal \u003d\u003d millisUTC   + getOffset(millisUTC)\nmillisUTC   \u003d\u003d millisLocal - getOffsetFromLocal(millisLocal)\n\u003c/pre\u003e\n\nNote: After calculating millisLocal, some error may be introduced. At\noffset transitions (due to DST or other historical changes), ranges of\nlocal times may map to different UTC times.\n\n@param instantLocal the millisecond instant, relative to this time zone, to\nget the offset for\n@return the millisecond offset to subtract from local time to get UTC time\n",
            "newValue": "Gets the millisecond offset to subtract from local time to get UTC time.\nThis offset can be used to undo adding the offset obtained by getOffset.\n\n\u003cpre\u003e\nmillisLocal \u003d\u003d millisUTC   + getOffset(millisUTC)\nmillisUTC   \u003d\u003d millisLocal - getOffsetFromLocal(millisLocal)\n\u003c/pre\u003e\n\nNOTE: After calculating millisLocal, some error may be introduced. At\noffset transitions (due to DST or other historical changes), ranges of\nlocal times may map to different UTC times.\n\u003cp\u003e\nThis method will return an offset suitable for calculating an instant\nafter any DST gap. For example, consider a zone with a cutover\nfrom 01:00 to 01:59:\u003cbr /\u003e\nInput: 00:00  Output: 00:00\u003cbr /\u003e\nInput: 00:30  Output: 00:30\u003cbr /\u003e\nInput: 01:00  Output: 02:00\u003cbr /\u003e\nInput: 01:30  Output: 02:30\u003cbr /\u003e\nInput: 02:00  Output: 02:00\u003cbr /\u003e\nInput: 02:30  Output: 02:30\u003cbr /\u003e\n\u003cp\u003e\nNOTE: The behaviour of this method changed in v1.5, with the emphasis\non returning a consistent result later along the time-line (shown above).\n\n@param instantLocal the millisecond instant, relative to this time zone, to\nget the offset for\n@return the millisecond offset to subtract from local time to get UTC time\n"
          }
        }
      ]
    },
    "a5b05944d52519cc70d86d1f59fe1c0e8d2e8956": {
      "type": "Ydocchange",
      "commitMessage": "Add getMillisKeepLocal to DateTimeZone\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@303 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "7/17/04, 9:49 AM",
      "commitName": "a5b05944d52519cc70d86d1f59fe1c0e8d2e8956",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "7/14/04, 4:23 PM",
      "commitNameOld": "6682ab2abccb5819ec2e62a1f3f9018945bed9cd",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 2.73,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "actualSource": "public int getOffsetFromLocal(long instantLocal) {\n    return getOffset(instantLocal - getOffset(instantLocal));\n}",
      "path": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 718,
      "functionName": "getOffsetFromLocal",
      "functionAnnotation": "",
      "functionDoc": "Gets the millisecond offset to subtract from local time to get UTC time.\nThis offset can be used to undo adding the offset obtained by getOffset.\n\n\u003cpre\u003e\nmillisLocal \u003d\u003d millisUTC   + getOffset(millisUTC)\nmillisUTC   \u003d\u003d millisLocal - getOffsetFromLocal(millisLocal)\n\u003c/pre\u003e\n\nNote: After calculating millisLocal, some error may be introduced. At\noffset transitions (due to DST or other historical changes), ranges of\nlocal times may map to different UTC times.\n\n@param instantLocal the millisecond instant, relative to this time zone, to\nget the offset for\n@return the millisecond offset to subtract from local time to get UTC time\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Gets the millisecond offset to subtract from local time to get UTC time.\nThis offset can be used to undo adding the offset obtained by getOffset.\n\n\u003cpre\u003e\nmillisLocal \u003d\u003d millisUTC   + getOffset(millisUTC)\nmillisUTC   \u003d\u003d millisLocal - getOffsetFromLocal(millisLocal)\n\u003c/pre\u003e\n\nNote: After calculating millisLocal, some error may be introduced. At\noffset transitions (due to DST or other historical changes), ranges of\nlocal times may map to different UTC times.\n\n@param instantLocal the millisecond instant, relative to this time zone, to\nget the offset for\n@return the millisceond offset to subtract from local time to get UTC time.\n",
        "newValue": "Gets the millisecond offset to subtract from local time to get UTC time.\nThis offset can be used to undo adding the offset obtained by getOffset.\n\n\u003cpre\u003e\nmillisLocal \u003d\u003d millisUTC   + getOffset(millisUTC)\nmillisUTC   \u003d\u003d millisLocal - getOffsetFromLocal(millisLocal)\n\u003c/pre\u003e\n\nNote: After calculating millisLocal, some error may be introduced. At\noffset transitions (due to DST or other historical changes), ranges of\nlocal times may map to different UTC times.\n\n@param instantLocal the millisecond instant, relative to this time zone, to\nget the offset for\n@return the millisecond offset to subtract from local time to get UTC time\n"
      }
    },
    "0e07ac6b2cff63550d7df336355ca63cc05aa40b": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "Move from Joda CVS\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@10 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "12/18/03, 6:07 PM",
      "commitName": "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Move from Joda CVS\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@10 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "12/18/03, 6:07 PM",
          "commitName": "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "12/16/03, 1:39 PM",
          "commitNameOld": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 2.19,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "public int getOffsetFromLocal(long instantLocal) {\n    return getOffset(instantLocal - getOffset(instantLocal));\n}",
          "path": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
          "functionStartLine": 628,
          "functionName": "getOffsetFromLocal",
          "functionAnnotation": "",
          "functionDoc": "Gets the millisecond offset to subtract from local time to get UTC time.\nThis offset can be used to undo adding the offset obtained by getOffset.\n\n\u003cpre\u003e\nmillisLocal \u003d\u003d millisUTC   + getOffset(millisUTC)\nmillisUTC   \u003d\u003d millisLocal - getOffsetFromLocal(millisLocal)\n\u003c/pre\u003e\n\nNote: After calculating millisLocal, some error may be introduced. At\noffset transitions (due to DST or other historical changes), ranges of\nlocal times may map to different UTC times.\n\n@param instantLocal the millisecond instant, relative to this time zone, to\nget the offset for\n@return the millisceond offset to subtract from local time to get UTC time.\n",
          "diff": "@@ -1,3 +1,3 @@\n-public int getOffsetFromLocal(long millisLocal) {\n-    return getOffset(millisLocal - getOffset(millisLocal));\n+public int getOffsetFromLocal(long instantLocal) {\n+    return getOffset(instantLocal - getOffset(instantLocal));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[millisLocal-long]",
            "newValue": "[instantLocal-long]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Move from Joda CVS\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@10 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "12/18/03, 6:07 PM",
          "commitName": "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "12/16/03, 1:39 PM",
          "commitNameOld": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 2.19,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "public int getOffsetFromLocal(long instantLocal) {\n    return getOffset(instantLocal - getOffset(instantLocal));\n}",
          "path": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
          "functionStartLine": 628,
          "functionName": "getOffsetFromLocal",
          "functionAnnotation": "",
          "functionDoc": "Gets the millisecond offset to subtract from local time to get UTC time.\nThis offset can be used to undo adding the offset obtained by getOffset.\n\n\u003cpre\u003e\nmillisLocal \u003d\u003d millisUTC   + getOffset(millisUTC)\nmillisUTC   \u003d\u003d millisLocal - getOffsetFromLocal(millisLocal)\n\u003c/pre\u003e\n\nNote: After calculating millisLocal, some error may be introduced. At\noffset transitions (due to DST or other historical changes), ranges of\nlocal times may map to different UTC times.\n\n@param instantLocal the millisecond instant, relative to this time zone, to\nget the offset for\n@return the millisceond offset to subtract from local time to get UTC time.\n",
          "diff": "@@ -1,3 +1,3 @@\n-public int getOffsetFromLocal(long millisLocal) {\n-    return getOffset(millisLocal - getOffset(millisLocal));\n+public int getOffsetFromLocal(long instantLocal) {\n+    return getOffset(instantLocal - getOffset(instantLocal));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Move from Joda CVS\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@10 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "12/18/03, 6:07 PM",
          "commitName": "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "12/16/03, 1:39 PM",
          "commitNameOld": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 2.19,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "public int getOffsetFromLocal(long instantLocal) {\n    return getOffset(instantLocal - getOffset(instantLocal));\n}",
          "path": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
          "functionStartLine": 628,
          "functionName": "getOffsetFromLocal",
          "functionAnnotation": "",
          "functionDoc": "Gets the millisecond offset to subtract from local time to get UTC time.\nThis offset can be used to undo adding the offset obtained by getOffset.\n\n\u003cpre\u003e\nmillisLocal \u003d\u003d millisUTC   + getOffset(millisUTC)\nmillisUTC   \u003d\u003d millisLocal - getOffsetFromLocal(millisLocal)\n\u003c/pre\u003e\n\nNote: After calculating millisLocal, some error may be introduced. At\noffset transitions (due to DST or other historical changes), ranges of\nlocal times may map to different UTC times.\n\n@param instantLocal the millisecond instant, relative to this time zone, to\nget the offset for\n@return the millisceond offset to subtract from local time to get UTC time.\n",
          "diff": "@@ -1,3 +1,3 @@\n-public int getOffsetFromLocal(long millisLocal) {\n-    return getOffset(millisLocal - getOffset(millisLocal));\n+public int getOffsetFromLocal(long instantLocal) {\n+    return getOffset(instantLocal - getOffset(instantLocal));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Gets the millisecond offset to subtract from local time to get UTC time.\nThis offset can be used to undo adding the offset obtained by getOffset.\n\n\u003cpre\u003e\nmillisLocal \u003d\u003d millisUTC   + getOffset(millisUTC)\nmillisUTC   \u003d\u003d millisLocal - getOffsetFromLocal(millisLocal)\n\u003c/pre\u003e\n\nNote: After calculating millisLocal, some error may be introduced. At\noffset transitions (due to DST or other historical changes), ranges of\nlocal times may map to different UTC times.\n\n@param millisLocal the millisecond instant, relative to this time zone, to\nget the offset for\n@return the millisceond offset to subtract from local time to get UTC time.\n",
            "newValue": "Gets the millisecond offset to subtract from local time to get UTC time.\nThis offset can be used to undo adding the offset obtained by getOffset.\n\n\u003cpre\u003e\nmillisLocal \u003d\u003d millisUTC   + getOffset(millisUTC)\nmillisUTC   \u003d\u003d millisLocal - getOffsetFromLocal(millisLocal)\n\u003c/pre\u003e\n\nNote: After calculating millisLocal, some error may be introduced. At\noffset transitions (due to DST or other historical changes), ranges of\nlocal times may map to different UTC times.\n\n@param instantLocal the millisecond instant, relative to this time zone, to\nget the offset for\n@return the millisceond offset to subtract from local time to get UTC time.\n"
          }
        }
      ]
    },
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb": {
      "type": "Yintroduced",
      "commitMessage": "Move version 0.9 to joda-time repository\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@4 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "12/16/03, 1:39 PM",
      "commitName": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
      "commitAuthor": "Stephen Colebourne",
      "diff": "@@ -0,0 +1,3 @@\n+public int getOffsetFromLocal(long millisLocal) {\n+    return getOffset(millisLocal - getOffset(millisLocal));\n+}\n\\ No newline at end of file\n",
      "actualSource": "public int getOffsetFromLocal(long millisLocal) {\n    return getOffset(millisLocal - getOffset(millisLocal));\n}",
      "path": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 588,
      "functionName": "getOffsetFromLocal",
      "functionAnnotation": "",
      "functionDoc": "Gets the millisecond offset to subtract from local time to get UTC time.\nThis offset can be used to undo adding the offset obtained by getOffset.\n\n\u003cpre\u003e\nmillisLocal \u003d\u003d millisUTC   + getOffset(millisUTC)\nmillisUTC   \u003d\u003d millisLocal - getOffsetFromLocal(millisLocal)\n\u003c/pre\u003e\n\nNote: After calculating millisLocal, some error may be introduced. At\noffset transitions (due to DST or other historical changes), ranges of\nlocal times may map to different UTC times.\n\n@param millisLocal the millisecond instant, relative to this time zone, to\nget the offset for\n@return the millisceond offset to subtract from local time to get UTC time.\n"
    }
  }
}