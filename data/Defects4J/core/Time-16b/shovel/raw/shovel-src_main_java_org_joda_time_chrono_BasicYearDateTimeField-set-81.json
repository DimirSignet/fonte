{
  "origin": "codeshovel",
  "repositoryName": "Time-16b",
  "repositoryPath": "/tmp/Time-16b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BasicYearDateTimeField.java",
  "functionName": "set",
  "functionId": "set___instant-long__year-int",
  "sourceFilePath": "src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 81,
  "functionEndLine": 85,
  "numCommitsSeen": 24,
  "timeTaken": 1039,
  "changeHistory": [
    "df4a82f4fb46cc2248280c462e18f08d55a3d112",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1",
    "7b7cb44562d5942add1f093111e84a5836780de4",
    "79b24183d3e4517e3bceb2c2754758bb0e204410",
    "e675e6d020b4261801fb6b2738acbfa7f9d00c6f",
    "6bdd176eed470329a73d7ee08498183e579cea60",
    "3ec1eb7ff17a6b61975e8ea72930d1ed927d4191"
  ],
  "changeHistoryShort": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": "Yfilerename",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": "Yfilerename",
    "7b7cb44562d5942add1f093111e84a5836780de4": "Ymultichange(Yfilerename,Ybodychange)",
    "79b24183d3e4517e3bceb2c2754758bb0e204410": "Ymultichange(Yfilerename,Ybodychange)",
    "e675e6d020b4261801fb6b2738acbfa7f9d00c6f": "Ymultichange(Yfilerename,Ybodychange)",
    "6bdd176eed470329a73d7ee08498183e579cea60": "Ybodychange",
    "3ec1eb7ff17a6b61975e8ea72930d1ed927d4191": "Yintroduced"
  },
  "changeHistoryDetails": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": {
      "type": "Yfilerename",
      "commitMessage": "Remove JodaTime folder moving files to top level\n",
      "commitDate": "5/16/11, 10:02 AM",
      "commitName": "df4a82f4fb46cc2248280c462e18f08d55a3d112",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "5/16/11, 9:58 AM",
      "commitNameOld": "72b22654962284bac59c2777131b42a2d1f53228",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public long set(long instant, int year) {\n    FieldUtils.verifyValueBounds(this, year, iChronology.getMinYear(), iChronology.getMaxYear());\n    return iChronology.setYear(instant, year);\n}",
      "path": "src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java",
      "functionStartLine": 81,
      "functionName": "set",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java",
        "newPath": "src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java"
      }
    },
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": {
      "type": "Yfilerename",
      "commitMessage": "Convert to maven 2\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1540 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/8/10, 5:17 PM",
      "commitName": "53feb3fa56af7260e607844524b7e5a9be49ecc1",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/8/10, 5:02 PM",
      "commitNameOld": "7fa2ceaf5d95d050095432aa646ea803aa35e122",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public long set(long instant, int year) {\n    FieldUtils.verifyValueBounds(this, year, iChronology.getMinYear(), iChronology.getMaxYear());\n    return iChronology.setYear(instant, year);\n}",
      "path": "JodaTime/src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java",
      "functionStartLine": 81,
      "functionName": "set",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java",
        "newPath": "JodaTime/src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java"
      }
    },
    "7b7cb44562d5942add1f093111e84a5836780de4": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "Refactor chronology classes to avoid dupication in code\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@779 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "6/8/05, 3:57 PM",
      "commitName": "7b7cb44562d5942add1f093111e84a5836780de4",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "Refactor chronology classes to avoid dupication in code\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@779 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "6/8/05, 3:57 PM",
          "commitName": "7b7cb44562d5942add1f093111e84a5836780de4",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "6/8/05, 9:15 AM",
          "commitNameOld": "84617fb61cc9a81b10aa0918740325ae6c0a3765",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 0.28,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public long set(long instant, int year) {\n    FieldUtils.verifyValueBounds(this, year, iChronology.getMinYear(), iChronology.getMaxYear());\n    return iChronology.setYear(instant, year);\n}",
          "path": "JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java",
          "functionStartLine": 81,
          "functionName": "set",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,15 +1,4 @@\n public long set(long instant, int year) {\n     FieldUtils.verifyValueBounds(this, year, iChronology.getMinYear(), iChronology.getMaxYear());\n-    BaseGJChronology chrono \u003d iChronology;\n-    int thisYear \u003d chrono.getYear(instant);\n-    int dayOfYear \u003d chrono.getDayOfYear(instant, thisYear);\n-    int millisOfDay \u003d chrono.getMillisOfDay(instant);\n-    if (dayOfYear \u003e 365) {\n-        if (!chrono.isLeapYear(year)) {\n-            dayOfYear--;\n-        }\n-    }\n-    instant \u003d chrono.getYearMonthDayMillis(year, 1, dayOfYear);\n-    instant +\u003d millisOfDay;\n-    return instant;\n+    return iChronology.setYear(instant, year);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java",
            "newPath": "JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Refactor chronology classes to avoid dupication in code\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@779 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "6/8/05, 3:57 PM",
          "commitName": "7b7cb44562d5942add1f093111e84a5836780de4",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "6/8/05, 9:15 AM",
          "commitNameOld": "84617fb61cc9a81b10aa0918740325ae6c0a3765",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 0.28,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public long set(long instant, int year) {\n    FieldUtils.verifyValueBounds(this, year, iChronology.getMinYear(), iChronology.getMaxYear());\n    return iChronology.setYear(instant, year);\n}",
          "path": "JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java",
          "functionStartLine": 81,
          "functionName": "set",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,15 +1,4 @@\n public long set(long instant, int year) {\n     FieldUtils.verifyValueBounds(this, year, iChronology.getMinYear(), iChronology.getMaxYear());\n-    BaseGJChronology chrono \u003d iChronology;\n-    int thisYear \u003d chrono.getYear(instant);\n-    int dayOfYear \u003d chrono.getDayOfYear(instant, thisYear);\n-    int millisOfDay \u003d chrono.getMillisOfDay(instant);\n-    if (dayOfYear \u003e 365) {\n-        if (!chrono.isLeapYear(year)) {\n-            dayOfYear--;\n-        }\n-    }\n-    instant \u003d chrono.getYearMonthDayMillis(year, 1, dayOfYear);\n-    instant +\u003d millisOfDay;\n-    return instant;\n+    return iChronology.setYear(instant, year);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "79b24183d3e4517e3bceb2c2754758bb0e204410": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "Rollback to 0.99 for 1.0 release\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@726 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "2/18/05, 4:54 PM",
      "commitName": "79b24183d3e4517e3bceb2c2754758bb0e204410",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "Rollback to 0.99 for 1.0 release\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@726 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "2/18/05, 4:54 PM",
          "commitName": "79b24183d3e4517e3bceb2c2754758bb0e204410",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "2/18/05, 3:02 PM",
          "commitNameOld": "e675e6d020b4261801fb6b2738acbfa7f9d00c6f",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 0.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public long set(long instant, int year) {\n    FieldUtils.verifyValueBounds(this, year, iChronology.getMinYear(), iChronology.getMaxYear());\n    BaseGJChronology chrono \u003d iChronology;\n    int thisYear \u003d chrono.getYear(instant);\n    int dayOfYear \u003d chrono.getDayOfYear(instant, thisYear);\n    int millisOfDay \u003d chrono.getMillisOfDay(instant);\n    if (dayOfYear \u003e 365) {\n        if (!chrono.isLeapYear(year)) {\n            dayOfYear--;\n        }\n    }\n    instant \u003d chrono.getYearMonthDayMillis(year, 1, dayOfYear);\n    instant +\u003d millisOfDay;\n    return instant;\n}",
          "path": "JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java",
          "functionStartLine": 91,
          "functionName": "set",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,4 +1,15 @@\n public long set(long instant, int year) {\n     FieldUtils.verifyValueBounds(this, year, iChronology.getMinYear(), iChronology.getMaxYear());\n-    return iChronology.setYear(instant, year);\n+    BaseGJChronology chrono \u003d iChronology;\n+    int thisYear \u003d chrono.getYear(instant);\n+    int dayOfYear \u003d chrono.getDayOfYear(instant, thisYear);\n+    int millisOfDay \u003d chrono.getMillisOfDay(instant);\n+    if (dayOfYear \u003e 365) {\n+        if (!chrono.isLeapYear(year)) {\n+            dayOfYear--;\n+        }\n+    }\n+    instant \u003d chrono.getYearMonthDayMillis(year, 1, dayOfYear);\n+    instant +\u003d millisOfDay;\n+    return instant;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java",
            "newPath": "JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Rollback to 0.99 for 1.0 release\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@726 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "2/18/05, 4:54 PM",
          "commitName": "79b24183d3e4517e3bceb2c2754758bb0e204410",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "2/18/05, 3:02 PM",
          "commitNameOld": "e675e6d020b4261801fb6b2738acbfa7f9d00c6f",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 0.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public long set(long instant, int year) {\n    FieldUtils.verifyValueBounds(this, year, iChronology.getMinYear(), iChronology.getMaxYear());\n    BaseGJChronology chrono \u003d iChronology;\n    int thisYear \u003d chrono.getYear(instant);\n    int dayOfYear \u003d chrono.getDayOfYear(instant, thisYear);\n    int millisOfDay \u003d chrono.getMillisOfDay(instant);\n    if (dayOfYear \u003e 365) {\n        if (!chrono.isLeapYear(year)) {\n            dayOfYear--;\n        }\n    }\n    instant \u003d chrono.getYearMonthDayMillis(year, 1, dayOfYear);\n    instant +\u003d millisOfDay;\n    return instant;\n}",
          "path": "JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java",
          "functionStartLine": 91,
          "functionName": "set",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,4 +1,15 @@\n public long set(long instant, int year) {\n     FieldUtils.verifyValueBounds(this, year, iChronology.getMinYear(), iChronology.getMaxYear());\n-    return iChronology.setYear(instant, year);\n+    BaseGJChronology chrono \u003d iChronology;\n+    int thisYear \u003d chrono.getYear(instant);\n+    int dayOfYear \u003d chrono.getDayOfYear(instant, thisYear);\n+    int millisOfDay \u003d chrono.getMillisOfDay(instant);\n+    if (dayOfYear \u003e 365) {\n+        if (!chrono.isLeapYear(year)) {\n+            dayOfYear--;\n+        }\n+    }\n+    instant \u003d chrono.getYearMonthDayMillis(year, 1, dayOfYear);\n+    instant +\u003d millisOfDay;\n+    return instant;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "e675e6d020b4261801fb6b2738acbfa7f9d00c6f": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "Refactor year classes into BaseGJChronology\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@725 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "2/18/05, 3:02 PM",
      "commitName": "e675e6d020b4261801fb6b2738acbfa7f9d00c6f",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "Refactor year classes into BaseGJChronology\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@725 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "2/18/05, 3:02 PM",
          "commitName": "e675e6d020b4261801fb6b2738acbfa7f9d00c6f",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "2/18/05, 2:51 PM",
          "commitNameOld": "4f36b1730b9ceef6c4e63b03103923dcf778af12",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public long set(long instant, int year) {\n    FieldUtils.verifyValueBounds(this, year, iChronology.getMinYear(), iChronology.getMaxYear());\n    return iChronology.setYear(instant, year);\n}",
          "path": "JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java",
          "functionStartLine": 81,
          "functionName": "set",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,15 +1,4 @@\n public long set(long instant, int year) {\n     FieldUtils.verifyValueBounds(this, year, iChronology.getMinYear(), iChronology.getMaxYear());\n-    BaseGJChronology chrono \u003d iChronology;\n-    int thisYear \u003d chrono.getYear(instant);\n-    int dayOfYear \u003d chrono.getDayOfYear(instant, thisYear);\n-    int millisOfDay \u003d chrono.getMillisOfDay(instant);\n-    if (dayOfYear \u003e 365) {\n-        if (!chrono.isLeapYear(year)) {\n-            dayOfYear--;\n-        }\n-    }\n-    instant \u003d chrono.getYearMonthDayMillis(year, 1, dayOfYear);\n-    instant +\u003d millisOfDay;\n-    return instant;\n+    return iChronology.setYear(instant, year);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java",
            "newPath": "JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Refactor year classes into BaseGJChronology\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@725 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "2/18/05, 3:02 PM",
          "commitName": "e675e6d020b4261801fb6b2738acbfa7f9d00c6f",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "2/18/05, 2:51 PM",
          "commitNameOld": "4f36b1730b9ceef6c4e63b03103923dcf778af12",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public long set(long instant, int year) {\n    FieldUtils.verifyValueBounds(this, year, iChronology.getMinYear(), iChronology.getMaxYear());\n    return iChronology.setYear(instant, year);\n}",
          "path": "JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java",
          "functionStartLine": 81,
          "functionName": "set",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,15 +1,4 @@\n public long set(long instant, int year) {\n     FieldUtils.verifyValueBounds(this, year, iChronology.getMinYear(), iChronology.getMaxYear());\n-    BaseGJChronology chrono \u003d iChronology;\n-    int thisYear \u003d chrono.getYear(instant);\n-    int dayOfYear \u003d chrono.getDayOfYear(instant, thisYear);\n-    int millisOfDay \u003d chrono.getMillisOfDay(instant);\n-    if (dayOfYear \u003e 365) {\n-        if (!chrono.isLeapYear(year)) {\n-            dayOfYear--;\n-        }\n-    }\n-    instant \u003d chrono.getYearMonthDayMillis(year, 1, dayOfYear);\n-    instant +\u003d millisOfDay;\n-    return instant;\n+    return iChronology.setYear(instant, year);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "6bdd176eed470329a73d7ee08498183e579cea60": {
      "type": "Ybodychange",
      "commitMessage": "Change Chronology to abstract class\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@432 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/22/04, 8:15 AM",
      "commitName": "6bdd176eed470329a73d7ee08498183e579cea60",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/7/04, 6:42 AM",
      "commitNameOld": "c578139c0184963ad7123ee107d7e12ef399de2d",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 15.06,
      "commitsBetweenForRepo": 61,
      "commitsBetweenForFile": 1,
      "actualSource": "public long set(long instant, int year) {\n    FieldUtils.verifyValueBounds(this, year, iChronology.getMinYear(), iChronology.getMaxYear());\n    BaseGJChronology chrono \u003d iChronology;\n    int thisYear \u003d chrono.getYear(instant);\n    int dayOfYear \u003d chrono.getDayOfYear(instant, thisYear);\n    int millisOfDay \u003d chrono.getMillisOfDay(instant);\n    if (dayOfYear \u003e 365) {\n        if (!chrono.isLeapYear(year)) {\n            dayOfYear--;\n        }\n    }\n    instant \u003d chrono.getYearMonthDayMillis(year, 1, dayOfYear);\n    instant +\u003d millisOfDay;\n    return instant;\n}",
      "path": "JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java",
      "functionStartLine": 129,
      "functionName": "set",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,15 +1,15 @@\n public long set(long instant, int year) {\n     FieldUtils.verifyValueBounds(this, year, iChronology.getMinYear(), iChronology.getMaxYear());\n-    AbstractGJChronology chrono \u003d iChronology;\n+    BaseGJChronology chrono \u003d iChronology;\n     int thisYear \u003d chrono.getYear(instant);\n     int dayOfYear \u003d chrono.getDayOfYear(instant, thisYear);\n     int millisOfDay \u003d chrono.getMillisOfDay(instant);\n     if (dayOfYear \u003e 365) {\n         if (!chrono.isLeapYear(year)) {\n             dayOfYear--;\n         }\n     }\n     instant \u003d chrono.getYearMonthDayMillis(year, 1, dayOfYear);\n     instant +\u003d millisOfDay;\n     return instant;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3ec1eb7ff17a6b61975e8ea72930d1ed927d4191": {
      "type": "Yintroduced",
      "commitMessage": "Require special year field.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@128 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "1/28/04, 10:01 PM",
      "commitName": "3ec1eb7ff17a6b61975e8ea72930d1ed927d4191",
      "commitAuthor": "Brian S O\u0027Neill",
      "diff": "@@ -0,0 +1,15 @@\n+public long set(long instant, int year) {\n+    FieldUtils.verifyValueBounds(this, year, iChronology.getMinYear(), iChronology.getMaxYear());\n+    AbstractGJChronology chrono \u003d iChronology;\n+    int thisYear \u003d chrono.getYear(instant);\n+    int dayOfYear \u003d chrono.getDayOfYear(instant, thisYear);\n+    int millisOfDay \u003d chrono.getMillisOfDay(instant);\n+    if (dayOfYear \u003e 365) {\n+        if (!chrono.isLeapYear(year)) {\n+            dayOfYear--;\n+        }\n+    }\n+    instant \u003d chrono.getYearMonthDayMillis(year, 1, dayOfYear);\n+    instant +\u003d millisOfDay;\n+    return instant;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public long set(long instant, int year) {\n    FieldUtils.verifyValueBounds(this, year, iChronology.getMinYear(), iChronology.getMaxYear());\n    AbstractGJChronology chrono \u003d iChronology;\n    int thisYear \u003d chrono.getYear(instant);\n    int dayOfYear \u003d chrono.getDayOfYear(instant, thisYear);\n    int millisOfDay \u003d chrono.getMillisOfDay(instant);\n    if (dayOfYear \u003e 365) {\n        if (!chrono.isLeapYear(year)) {\n            dayOfYear--;\n        }\n    }\n    instant \u003d chrono.getYearMonthDayMillis(year, 1, dayOfYear);\n    instant +\u003d millisOfDay;\n    return instant;\n}",
      "path": "JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java",
      "functionStartLine": 129,
      "functionName": "set",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}