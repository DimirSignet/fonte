{
  "origin": "codeshovel",
  "repositoryName": "Time-16b",
  "repositoryPath": "/tmp/Time-16b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DateTimeZone.java",
  "functionName": "getDefault",
  "functionId": "getDefault",
  "sourceFilePath": "src/main/java/org/joda/time/DateTimeZone.java",
  "functionAnnotation": "",
  "functionDoc": "Gets the default time zone.\n\u003cp\u003e\nThe default time zone is derived from the system property {@code user.timezone}.\nIf that is {@code null} or is not a valid identifier, then the value of the\nJDK {@code TimeZone} default is converted. If that fails, {@code UTC} is used.\n\u003cp\u003e\nNOTE: If the {@code java.util.TimeZone} default is updated \u003ci\u003eafter\u003c/i\u003e calling this\nmethod, then the change will not be picked up here.\n\n@return the default datetime zone object\n",
  "functionStartLine": 132,
  "functionEndLine": 162,
  "numCommitsSeen": 54,
  "timeTaken": 2322,
  "changeHistory": [
    "df4a82f4fb46cc2248280c462e18f08d55a3d112",
    "d090b642dc04259286d3478cfa49f1da2f0755e6",
    "b835259ecb3d91234a5ff36e57bb928cadc4aa36",
    "df5d164771c41e4c1ff8f1507db0317ffe685630",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1",
    "bc49e14e17ce686934b9a87a632f5b3ee6f80761",
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb"
  ],
  "changeHistoryShort": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": "Yfilerename",
    "d090b642dc04259286d3478cfa49f1da2f0755e6": "Ydocchange",
    "b835259ecb3d91234a5ff36e57bb928cadc4aa36": "Ymultichange(Ybodychange,Ydocchange)",
    "df5d164771c41e4c1ff8f1507db0317ffe685630": "Ybodychange",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": "Yfilerename",
    "bc49e14e17ce686934b9a87a632f5b3ee6f80761": "Ybodychange",
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb": "Yintroduced"
  },
  "changeHistoryDetails": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": {
      "type": "Yfilerename",
      "commitMessage": "Remove JodaTime folder moving files to top level\n",
      "commitDate": "5/16/11, 10:02 AM",
      "commitName": "df4a82f4fb46cc2248280c462e18f08d55a3d112",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "5/16/11, 9:58 AM",
      "commitNameOld": "72b22654962284bac59c2777131b42a2d1f53228",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static DateTimeZone getDefault() {\n    DateTimeZone zone \u003d cDefault;\n    if (zone \u003d\u003d null) {\n        synchronized (DateTimeZone.class) {\n            zone \u003d cDefault;\n            if (zone \u003d\u003d null) {\n                DateTimeZone temp \u003d null;\n                try {\n                    try {\n                        String id \u003d System.getProperty(\"user.timezone\");\n                        if (id !\u003d null) {\n                            temp \u003d forID(id);\n                        }\n                    } catch (RuntimeException ex) {\n                    }\n                    if (temp \u003d\u003d null) {\n                        temp \u003d forTimeZone(TimeZone.getDefault());\n                    }\n                } catch (IllegalArgumentException ex) {\n                }\n                if (temp \u003d\u003d null) {\n                    temp \u003d UTC;\n                }\n                cDefault \u003d zone \u003d temp;\n            }\n        }\n    }\n    return zone;\n}",
      "path": "src/main/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 132,
      "functionName": "getDefault",
      "functionAnnotation": "",
      "functionDoc": "Gets the default time zone.\n\u003cp\u003e\nThe default time zone is derived from the system property {@code user.timezone}.\nIf that is {@code null} or is not a valid identifier, then the value of the\nJDK {@code TimeZone} default is converted. If that fails, {@code UTC} is used.\n\u003cp\u003e\nNOTE: If the {@code java.util.TimeZone} default is updated \u003ci\u003eafter\u003c/i\u003e calling this\nmethod, then the change will not be picked up here.\n\n@return the default datetime zone object\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/main/java/org/joda/time/DateTimeZone.java",
        "newPath": "src/main/java/org/joda/time/DateTimeZone.java"
      }
    },
    "d090b642dc04259286d3478cfa49f1da2f0755e6": {
      "type": "Ydocchange",
      "commitMessage": "Better Javadoc of DateTimeZone.default behaviour\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1580 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "10/27/10, 3:26 PM",
      "commitName": "d090b642dc04259286d3478cfa49f1da2f0755e6",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "9/5/10, 9:55 AM",
      "commitNameOld": "b835259ecb3d91234a5ff36e57bb928cadc4aa36",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 52.23,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "public static DateTimeZone getDefault() {\n    DateTimeZone zone \u003d cDefault;\n    if (zone \u003d\u003d null) {\n        synchronized (DateTimeZone.class) {\n            zone \u003d cDefault;\n            if (zone \u003d\u003d null) {\n                DateTimeZone temp \u003d null;\n                try {\n                    try {\n                        String id \u003d System.getProperty(\"user.timezone\");\n                        if (id !\u003d null) {\n                            temp \u003d forID(id);\n                        }\n                    } catch (RuntimeException ex) {\n                    }\n                    if (temp \u003d\u003d null) {\n                        temp \u003d forTimeZone(TimeZone.getDefault());\n                    }\n                } catch (IllegalArgumentException ex) {\n                }\n                if (temp \u003d\u003d null) {\n                    temp \u003d UTC;\n                }\n                cDefault \u003d zone \u003d temp;\n            }\n        }\n    }\n    return zone;\n}",
      "path": "JodaTime/src/main/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 130,
      "functionName": "getDefault",
      "functionAnnotation": "",
      "functionDoc": "Gets the default time zone.\n\u003cp\u003e\nThe default time zone is derived from the system property {@code user.timezone}.\nIf that is {@code null} or is not a valid identifier, then the value of the\nJDK {@code TimeZone} default is converted. If that fails, {@code UTC} is used.\n\u003cp\u003e\nNOTE: If the {@code java.util.TimeZone} default is updated \u003ci\u003eafter\u003c/i\u003e calling this\nmethod, then the change will not be picked up here.\n\n@return the default datetime zone object\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Gets the default time zone.\n\u003cp\u003e\nThe default time zone is derived from the system property {@code user.timezone}.\nIf that is {@code null} or is not a valid identifier, then the value of the\nJDK {@code TimeZone} default is converted. If that fails, {@code UTC} is used.\n\n@return the default datetime zone object\n",
        "newValue": "Gets the default time zone.\n\u003cp\u003e\nThe default time zone is derived from the system property {@code user.timezone}.\nIf that is {@code null} or is not a valid identifier, then the value of the\nJDK {@code TimeZone} default is converted. If that fails, {@code UTC} is used.\n\u003cp\u003e\nNOTE: If the {@code java.util.TimeZone} default is updated \u003ci\u003eafter\u003c/i\u003e calling this\nmethod, then the change will not be picked up here.\n\n@return the default datetime zone object\n"
      }
    },
    "b835259ecb3d91234a5ff36e57bb928cadc4aa36": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Document algorithm for default time-zone\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1569 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "9/5/10, 9:55 AM",
      "commitName": "b835259ecb3d91234a5ff36e57bb928cadc4aa36",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Document algorithm for default time-zone\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1569 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "9/5/10, 9:55 AM",
          "commitName": "b835259ecb3d91234a5ff36e57bb928cadc4aa36",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "9/2/10, 5:40 PM",
          "commitNameOld": "df5d164771c41e4c1ff8f1507db0317ffe685630",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 2.68,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public static DateTimeZone getDefault() {\n    DateTimeZone zone \u003d cDefault;\n    if (zone \u003d\u003d null) {\n        synchronized (DateTimeZone.class) {\n            zone \u003d cDefault;\n            if (zone \u003d\u003d null) {\n                DateTimeZone temp \u003d null;\n                try {\n                    try {\n                        String id \u003d System.getProperty(\"user.timezone\");\n                        if (id !\u003d null) {\n                            temp \u003d forID(id);\n                        }\n                    } catch (RuntimeException ex) {\n                    }\n                    if (temp \u003d\u003d null) {\n                        temp \u003d forTimeZone(TimeZone.getDefault());\n                    }\n                } catch (IllegalArgumentException ex) {\n                }\n                if (temp \u003d\u003d null) {\n                    temp \u003d UTC;\n                }\n                cDefault \u003d zone \u003d temp;\n            }\n        }\n    }\n    return zone;\n}",
          "path": "JodaTime/src/main/java/org/joda/time/DateTimeZone.java",
          "functionStartLine": 127,
          "functionName": "getDefault",
          "functionAnnotation": "",
          "functionDoc": "Gets the default time zone.\n\u003cp\u003e\nThe default time zone is derived from the system property {@code user.timezone}.\nIf that is {@code null} or is not a valid identifier, then the value of the\nJDK {@code TimeZone} default is converted. If that fails, {@code UTC} is used.\n\n@return the default datetime zone object\n",
          "diff": "@@ -1,27 +1,29 @@\n public static DateTimeZone getDefault() {\n     DateTimeZone zone \u003d cDefault;\n     if (zone \u003d\u003d null) {\n         synchronized (DateTimeZone.class) {\n             zone \u003d cDefault;\n             if (zone \u003d\u003d null) {\n                 DateTimeZone temp \u003d null;\n                 try {\n                     try {\n                         String id \u003d System.getProperty(\"user.timezone\");\n-                        temp \u003d (id \u003d\u003d null ? UTC : forID(id));\n+                        if (id !\u003d null) {\n+                            temp \u003d forID(id);\n+                        }\n                     } catch (RuntimeException ex) {\n                     }\n                     if (temp \u003d\u003d null) {\n                         temp \u003d forTimeZone(TimeZone.getDefault());\n                     }\n                 } catch (IllegalArgumentException ex) {\n                 }\n                 if (temp \u003d\u003d null) {\n                     temp \u003d UTC;\n                 }\n                 cDefault \u003d zone \u003d temp;\n             }\n         }\n     }\n     return zone;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Document algorithm for default time-zone\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1569 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "9/5/10, 9:55 AM",
          "commitName": "b835259ecb3d91234a5ff36e57bb928cadc4aa36",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "9/2/10, 5:40 PM",
          "commitNameOld": "df5d164771c41e4c1ff8f1507db0317ffe685630",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 2.68,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public static DateTimeZone getDefault() {\n    DateTimeZone zone \u003d cDefault;\n    if (zone \u003d\u003d null) {\n        synchronized (DateTimeZone.class) {\n            zone \u003d cDefault;\n            if (zone \u003d\u003d null) {\n                DateTimeZone temp \u003d null;\n                try {\n                    try {\n                        String id \u003d System.getProperty(\"user.timezone\");\n                        if (id !\u003d null) {\n                            temp \u003d forID(id);\n                        }\n                    } catch (RuntimeException ex) {\n                    }\n                    if (temp \u003d\u003d null) {\n                        temp \u003d forTimeZone(TimeZone.getDefault());\n                    }\n                } catch (IllegalArgumentException ex) {\n                }\n                if (temp \u003d\u003d null) {\n                    temp \u003d UTC;\n                }\n                cDefault \u003d zone \u003d temp;\n            }\n        }\n    }\n    return zone;\n}",
          "path": "JodaTime/src/main/java/org/joda/time/DateTimeZone.java",
          "functionStartLine": 127,
          "functionName": "getDefault",
          "functionAnnotation": "",
          "functionDoc": "Gets the default time zone.\n\u003cp\u003e\nThe default time zone is derived from the system property {@code user.timezone}.\nIf that is {@code null} or is not a valid identifier, then the value of the\nJDK {@code TimeZone} default is converted. If that fails, {@code UTC} is used.\n\n@return the default datetime zone object\n",
          "diff": "@@ -1,27 +1,29 @@\n public static DateTimeZone getDefault() {\n     DateTimeZone zone \u003d cDefault;\n     if (zone \u003d\u003d null) {\n         synchronized (DateTimeZone.class) {\n             zone \u003d cDefault;\n             if (zone \u003d\u003d null) {\n                 DateTimeZone temp \u003d null;\n                 try {\n                     try {\n                         String id \u003d System.getProperty(\"user.timezone\");\n-                        temp \u003d (id \u003d\u003d null ? UTC : forID(id));\n+                        if (id !\u003d null) {\n+                            temp \u003d forID(id);\n+                        }\n                     } catch (RuntimeException ex) {\n                     }\n                     if (temp \u003d\u003d null) {\n                         temp \u003d forTimeZone(TimeZone.getDefault());\n                     }\n                 } catch (IllegalArgumentException ex) {\n                 }\n                 if (temp \u003d\u003d null) {\n                     temp \u003d UTC;\n                 }\n                 cDefault \u003d zone \u003d temp;\n             }\n         }\n     }\n     return zone;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Gets the default time zone.\n\n@return the default datetime zone object\n",
            "newValue": "Gets the default time zone.\n\u003cp\u003e\nThe default time zone is derived from the system property {@code user.timezone}.\nIf that is {@code null} or is not a valid identifier, then the value of the\nJDK {@code TimeZone} default is converted. If that fails, {@code UTC} is used.\n\n@return the default datetime zone object\n"
          }
        }
      ]
    },
    "df5d164771c41e4c1ff8f1507db0317ffe685630": {
      "type": "Ybodychange",
      "commitMessage": "Fix DateTimeZone.getDefault [3048468,3056104]\nHandle missing user.timezone system property on Android that resulted in stack overflow\ninvestigated by/patch suggeted by Matias Brunstein Macri\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1567 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "9/2/10, 5:40 PM",
      "commitName": "df5d164771c41e4c1ff8f1507db0317ffe685630",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/8/10, 5:17 PM",
      "commitNameOld": "53feb3fa56af7260e607844524b7e5a9be49ecc1",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 25.02,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "actualSource": "public static DateTimeZone getDefault() {\n    DateTimeZone zone \u003d cDefault;\n    if (zone \u003d\u003d null) {\n        synchronized (DateTimeZone.class) {\n            zone \u003d cDefault;\n            if (zone \u003d\u003d null) {\n                DateTimeZone temp \u003d null;\n                try {\n                    try {\n                        String id \u003d System.getProperty(\"user.timezone\");\n                        temp \u003d (id \u003d\u003d null ? UTC : forID(id));\n                    } catch (RuntimeException ex) {\n                    }\n                    if (temp \u003d\u003d null) {\n                        temp \u003d forTimeZone(TimeZone.getDefault());\n                    }\n                } catch (IllegalArgumentException ex) {\n                }\n                if (temp \u003d\u003d null) {\n                    temp \u003d UTC;\n                }\n                cDefault \u003d zone \u003d temp;\n            }\n        }\n    }\n    return zone;\n}",
      "path": "JodaTime/src/main/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 123,
      "functionName": "getDefault",
      "functionAnnotation": "",
      "functionDoc": "Gets the default time zone.\n\n@return the default datetime zone object\n",
      "diff": "@@ -1,26 +1,27 @@\n public static DateTimeZone getDefault() {\n     DateTimeZone zone \u003d cDefault;\n     if (zone \u003d\u003d null) {\n         synchronized (DateTimeZone.class) {\n             zone \u003d cDefault;\n             if (zone \u003d\u003d null) {\n                 DateTimeZone temp \u003d null;\n                 try {\n                     try {\n-                        temp \u003d forID(System.getProperty(\"user.timezone\"));\n+                        String id \u003d System.getProperty(\"user.timezone\");\n+                        temp \u003d (id \u003d\u003d null ? UTC : forID(id));\n                     } catch (RuntimeException ex) {\n                     }\n                     if (temp \u003d\u003d null) {\n                         temp \u003d forTimeZone(TimeZone.getDefault());\n                     }\n                 } catch (IllegalArgumentException ex) {\n                 }\n                 if (temp \u003d\u003d null) {\n                     temp \u003d UTC;\n                 }\n                 cDefault \u003d zone \u003d temp;\n             }\n         }\n     }\n     return zone;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": {
      "type": "Yfilerename",
      "commitMessage": "Convert to maven 2\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1540 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/8/10, 5:17 PM",
      "commitName": "53feb3fa56af7260e607844524b7e5a9be49ecc1",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/8/10, 5:02 PM",
      "commitNameOld": "7fa2ceaf5d95d050095432aa646ea803aa35e122",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static DateTimeZone getDefault() {\n    DateTimeZone zone \u003d cDefault;\n    if (zone \u003d\u003d null) {\n        synchronized (DateTimeZone.class) {\n            zone \u003d cDefault;\n            if (zone \u003d\u003d null) {\n                DateTimeZone temp \u003d null;\n                try {\n                    try {\n                        temp \u003d forID(System.getProperty(\"user.timezone\"));\n                    } catch (RuntimeException ex) {\n                    }\n                    if (temp \u003d\u003d null) {\n                        temp \u003d forTimeZone(TimeZone.getDefault());\n                    }\n                } catch (IllegalArgumentException ex) {\n                }\n                if (temp \u003d\u003d null) {\n                    temp \u003d UTC;\n                }\n                cDefault \u003d zone \u003d temp;\n            }\n        }\n    }\n    return zone;\n}",
      "path": "JodaTime/src/main/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 123,
      "functionName": "getDefault",
      "functionAnnotation": "",
      "functionDoc": "Gets the default time zone.\n\n@return the default datetime zone object\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
        "newPath": "JodaTime/src/main/java/org/joda/time/DateTimeZone.java"
      }
    },
    "bc49e14e17ce686934b9a87a632f5b3ee6f80761": {
      "type": "Ybodychange",
      "commitMessage": "Classloading CachedDateTimeZone could invalidate state [2935625]\nReported by Michael Barker\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1476 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "2/14/10, 9:19 AM",
      "commitName": "bc49e14e17ce686934b9a87a632f5b3ee6f80761",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "11/4/09, 3:55 PM",
      "commitNameOld": "3f1e047c898c9c925e1faac33bb07e1cb05d88cb",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 101.73,
      "commitsBetweenForRepo": 68,
      "commitsBetweenForFile": 1,
      "actualSource": "public static DateTimeZone getDefault() {\n    DateTimeZone zone \u003d cDefault;\n    if (zone \u003d\u003d null) {\n        synchronized (DateTimeZone.class) {\n            zone \u003d cDefault;\n            if (zone \u003d\u003d null) {\n                DateTimeZone temp \u003d null;\n                try {\n                    try {\n                        temp \u003d forID(System.getProperty(\"user.timezone\"));\n                    } catch (RuntimeException ex) {\n                    }\n                    if (temp \u003d\u003d null) {\n                        temp \u003d forTimeZone(TimeZone.getDefault());\n                    }\n                } catch (IllegalArgumentException ex) {\n                }\n                if (temp \u003d\u003d null) {\n                    temp \u003d UTC;\n                }\n                cDefault \u003d zone \u003d temp;\n            }\n        }\n    }\n    return zone;\n}",
      "path": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 123,
      "functionName": "getDefault",
      "functionAnnotation": "",
      "functionDoc": "Gets the default time zone.\n\n@return the default datetime zone object\n",
      "diff": "@@ -1,3 +1,26 @@\n public static DateTimeZone getDefault() {\n-    return cDefault;\n+    DateTimeZone zone \u003d cDefault;\n+    if (zone \u003d\u003d null) {\n+        synchronized (DateTimeZone.class) {\n+            zone \u003d cDefault;\n+            if (zone \u003d\u003d null) {\n+                DateTimeZone temp \u003d null;\n+                try {\n+                    try {\n+                        temp \u003d forID(System.getProperty(\"user.timezone\"));\n+                    } catch (RuntimeException ex) {\n+                    }\n+                    if (temp \u003d\u003d null) {\n+                        temp \u003d forTimeZone(TimeZone.getDefault());\n+                    }\n+                } catch (IllegalArgumentException ex) {\n+                }\n+                if (temp \u003d\u003d null) {\n+                    temp \u003d UTC;\n+                }\n+                cDefault \u003d zone \u003d temp;\n+            }\n+        }\n+    }\n+    return zone;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb": {
      "type": "Yintroduced",
      "commitMessage": "Move version 0.9 to joda-time repository\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@4 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "12/16/03, 1:39 PM",
      "commitName": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
      "commitAuthor": "Stephen Colebourne",
      "diff": "@@ -0,0 +1,3 @@\n+public static DateTimeZone getDefault() {\n+    return cDefault;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public static DateTimeZone getDefault() {\n    return cDefault;\n}",
      "path": "JodaTime/src/java/org/joda/time/DateTimeZone.java",
      "functionStartLine": 203,
      "functionName": "getDefault",
      "functionAnnotation": "",
      "functionDoc": "Gets the default time zone.\n\n@return the default datetime zone object\n"
    }
  }
}