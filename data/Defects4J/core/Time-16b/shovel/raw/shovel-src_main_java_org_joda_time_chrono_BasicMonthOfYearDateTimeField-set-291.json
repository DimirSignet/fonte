{
  "origin": "codeshovel",
  "repositoryName": "Time-16b",
  "repositoryPath": "/tmp/Time-16b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BasicMonthOfYearDateTimeField.java",
  "functionName": "set",
  "functionId": "set___instant-long__month-int",
  "sourceFilePath": "src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java",
  "functionAnnotation": "",
  "functionDoc": "Set the Month component of the specified time instant.\u003cp\u003e\nIf the new month has less total days than the specified\nday of the month, this value is coerced to the nearest\nsane value. e.g.\u003cp\u003e\n07-31 to month 6 \u003d 06-30\u003cp\u003e\n03-31 to month 2 \u003d 02-28 or 02-29 depending\u003cp\u003e\n\n@param instant the time instant in millis to update.\n@param month the month (1,12) to update the time to.\n@return the updated time instant.\n@throws IllegalArgumentException  if month is invalid\n",
  "functionStartLine": 291,
  "functionEndLine": 305,
  "numCommitsSeen": 22,
  "timeTaken": 1373,
  "changeHistory": [
    "df4a82f4fb46cc2248280c462e18f08d55a3d112",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1",
    "638abee397a254ce348b8500f089a781395f3349",
    "82cf7fe2bd1a9e8eebda02b1e183ccf50fbdea13",
    "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7",
    "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb"
  ],
  "changeHistoryShort": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": "Yfilerename",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": "Yfilerename",
    "638abee397a254ce348b8500f089a781395f3349": "Ybodychange",
    "82cf7fe2bd1a9e8eebda02b1e183ccf50fbdea13": "Ymovefromfile",
    "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7": "Ymultichange(Yfilerename,Ybodychange)",
    "0e07ac6b2cff63550d7df336355ca63cc05aa40b": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb": "Yintroduced"
  },
  "changeHistoryDetails": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": {
      "type": "Yfilerename",
      "commitMessage": "Remove JodaTime folder moving files to top level\n",
      "commitDate": "5/16/11, 10:02 AM",
      "commitName": "df4a82f4fb46cc2248280c462e18f08d55a3d112",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "5/16/11, 9:58 AM",
      "commitNameOld": "72b22654962284bac59c2777131b42a2d1f53228",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public long set(long instant, int month) {\n    FieldUtils.verifyValueBounds(this, month, MIN, iMax);\n    int thisYear \u003d iChronology.getYear(instant);\n    int thisDom \u003d iChronology.getDayOfMonth(instant, thisYear);\n    int maxDom \u003d iChronology.getDaysInYearMonth(thisYear, month);\n    if (thisDom \u003e maxDom) {\n        thisDom \u003d maxDom;\n    }\n    return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) + iChronology.getMillisOfDay(instant);\n}",
      "path": "src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java",
      "functionStartLine": 291,
      "functionName": "set",
      "functionAnnotation": "",
      "functionDoc": "Set the Month component of the specified time instant.\u003cp\u003e\nIf the new month has less total days than the specified\nday of the month, this value is coerced to the nearest\nsane value. e.g.\u003cp\u003e\n07-31 to month 6 \u003d 06-30\u003cp\u003e\n03-31 to month 2 \u003d 02-28 or 02-29 depending\u003cp\u003e\n\n@param instant the time instant in millis to update.\n@param month the month (1,12) to update the time to.\n@return the updated time instant.\n@throws IllegalArgumentException  if month is invalid\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java",
        "newPath": "src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java"
      }
    },
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": {
      "type": "Yfilerename",
      "commitMessage": "Convert to maven 2\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1540 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/8/10, 5:17 PM",
      "commitName": "53feb3fa56af7260e607844524b7e5a9be49ecc1",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/8/10, 5:02 PM",
      "commitNameOld": "7fa2ceaf5d95d050095432aa646ea803aa35e122",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public long set(long instant, int month) {\n    FieldUtils.verifyValueBounds(this, month, MIN, iMax);\n    int thisYear \u003d iChronology.getYear(instant);\n    int thisDom \u003d iChronology.getDayOfMonth(instant, thisYear);\n    int maxDom \u003d iChronology.getDaysInYearMonth(thisYear, month);\n    if (thisDom \u003e maxDom) {\n        thisDom \u003d maxDom;\n    }\n    return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) + iChronology.getMillisOfDay(instant);\n}",
      "path": "JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java",
      "functionStartLine": 291,
      "functionName": "set",
      "functionAnnotation": "",
      "functionDoc": "Set the Month component of the specified time instant.\u003cp\u003e\nIf the new month has less total days than the specified\nday of the month, this value is coerced to the nearest\nsane value. e.g.\u003cp\u003e\n07-31 to month 6 \u003d 06-30\u003cp\u003e\n03-31 to month 2 \u003d 02-28 or 02-29 depending\u003cp\u003e\n\n@param instant the time instant in millis to update.\n@param month the month (1,12) to update the time to.\n@return the updated time instant.\n@throws IllegalArgumentException  if month is invalid\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java",
        "newPath": "JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java"
      }
    },
    "638abee397a254ce348b8500f089a781395f3349": {
      "type": "Ybodychange",
      "commitMessage": "Add tests and fix duration/add bugs in Coptic and Ethiopic chronology\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@935 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "11/26/05, 4:51 PM",
      "commitName": "638abee397a254ce348b8500f089a781395f3349",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "11/26/05, 2:37 PM",
      "commitNameOld": "82cf7fe2bd1a9e8eebda02b1e183ccf50fbdea13",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.09,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public long set(long instant, int month) {\n    FieldUtils.verifyValueBounds(this, month, MIN, iMax);\n    int thisYear \u003d iChronology.getYear(instant);\n    int thisDom \u003d iChronology.getDayOfMonth(instant, thisYear);\n    int maxDom \u003d iChronology.getDaysInYearMonth(thisYear, month);\n    if (thisDom \u003e maxDom) {\n        thisDom \u003d maxDom;\n    }\n    return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) + iChronology.getMillisOfDay(instant);\n}",
      "path": "JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java",
      "functionStartLine": 270,
      "functionName": "set",
      "functionAnnotation": "",
      "functionDoc": "Set the Month component of the specified time instant.\u003cp\u003e\nIf the new month has less total days than the specified\nday of the month, this value is coerced to the nearest\nsane value. e.g.\u003cp\u003e\n07-31 to month 6 \u003d 06-30\u003cp\u003e\n03-31 to month 2 \u003d 02-28 or 02-29 depending\u003cp\u003e\n\n@param instant the time instant in millis to update.\n@param month the month (1,12) to update the time to.\n@return the updated time instant.\n@throws IllegalArgumentException  if month is invalid\n",
      "diff": "@@ -1,10 +1,10 @@\n public long set(long instant, int month) {\n-    FieldUtils.verifyValueBounds(this, month, MIN, MAX);\n+    FieldUtils.verifyValueBounds(this, month, MIN, iMax);\n     int thisYear \u003d iChronology.getYear(instant);\n     int thisDom \u003d iChronology.getDayOfMonth(instant, thisYear);\n     int maxDom \u003d iChronology.getDaysInYearMonth(thisYear, month);\n     if (thisDom \u003e maxDom) {\n         thisDom \u003d maxDom;\n     }\n     return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) + iChronology.getMillisOfDay(instant);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "82cf7fe2bd1a9e8eebda02b1e183ccf50fbdea13": {
      "type": "Ymovefromfile",
      "commitMessage": "Refactoring in advance of Islamic Chronology\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@933 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "11/26/05, 2:37 PM",
      "commitName": "82cf7fe2bd1a9e8eebda02b1e183ccf50fbdea13",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "11/26/05, 7:26 AM",
      "commitNameOld": "c4788d953b68641523da625111e352132cafe90e",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.3,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public long set(long instant, int month) {\n    FieldUtils.verifyValueBounds(this, month, MIN, MAX);\n    int thisYear \u003d iChronology.getYear(instant);\n    int thisDom \u003d iChronology.getDayOfMonth(instant, thisYear);\n    int maxDom \u003d iChronology.getDaysInYearMonth(thisYear, month);\n    if (thisDom \u003e maxDom) {\n        thisDom \u003d maxDom;\n    }\n    return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) + iChronology.getMillisOfDay(instant);\n}",
      "path": "JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java",
      "functionStartLine": 271,
      "functionName": "set",
      "functionAnnotation": "",
      "functionDoc": "Set the Month component of the specified time instant.\u003cp\u003e\nIf the new month has less total days than the specified\nday of the month, this value is coerced to the nearest\nsane value. e.g.\u003cp\u003e\n07-31 to month 6 \u003d 06-30\u003cp\u003e\n03-31 to month 2 \u003d 02-28 or 02-29 depending\u003cp\u003e\n\n@param instant the time instant in millis to update.\n@param month the month (1,12) to update the time to.\n@return the updated time instant.\n@throws IllegalArgumentException  if month is invalid\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java",
        "newPath": "JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java",
        "oldMethodName": "set",
        "newMethodName": "set"
      }
    },
    "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "Re-organized chronology package and created new field package.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@125 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "1/27/04, 11:12 PM",
      "commitName": "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7",
      "commitAuthor": "Brian S O\u0027Neill",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "Re-organized chronology package and created new field package.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@125 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "1/27/04, 11:12 PM",
          "commitName": "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7",
          "commitAuthor": "Brian S O\u0027Neill",
          "commitDateOld": "1/11/04, 9:39 AM",
          "commitNameOld": "6f5522f58c1d2abdec37b5d22e5981716d4ec731",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 16.56,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public long set(long instant, int month) {\n    FieldUtils.verifyValueBounds(this, month, MIN, MAX);\n    int thisYear \u003d iChronology.getYear(instant);\n    int thisDom \u003d iChronology.getDayOfMonth(instant, thisYear);\n    int maxDom \u003d iChronology.getDaysInYearMonth(thisYear, month);\n    if (thisDom \u003e maxDom) {\n        thisDom \u003d maxDom;\n    }\n    return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) + iChronology.getMillisOfDay(instant);\n}",
          "path": "JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java",
          "functionStartLine": 306,
          "functionName": "set",
          "functionAnnotation": "",
          "functionDoc": "Set the Month component of the specified time instant.\u003cp\u003e\nIf the new month has less total days than the specified\nday of the month, this value is coerced to the nearest\nsane value. e.g.\u003cp\u003e\n07-31 to month 6 \u003d 06-30\u003cp\u003e\n03-31 to month 2 \u003d 02-28 or 02-29 depending\u003cp\u003e\n\n@param instant the time instant in millis to update.\n@param month the month (1,12) to update the time to.\n@return the updated time instant.\n@throws IllegalArgumentException  if month is invalid\n",
          "diff": "@@ -1,10 +1,10 @@\n public long set(long instant, int month) {\n-    Utils.verifyValueBounds(this, month, MIN, MAX);\n-    int thisYear \u003d iChronology.year().get(instant);\n+    FieldUtils.verifyValueBounds(this, month, MIN, MAX);\n+    int thisYear \u003d iChronology.getYear(instant);\n     int thisDom \u003d iChronology.getDayOfMonth(instant, thisYear);\n     int maxDom \u003d iChronology.getDaysInYearMonth(thisYear, month);\n     if (thisDom \u003e maxDom) {\n         thisDom \u003d maxDom;\n     }\n-    return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) + iChronology.millisOfDay().get(instant);\n+    return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) + iChronology.getMillisOfDay(instant);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java",
            "newPath": "JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Re-organized chronology package and created new field package.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@125 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "1/27/04, 11:12 PM",
          "commitName": "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7",
          "commitAuthor": "Brian S O\u0027Neill",
          "commitDateOld": "1/11/04, 9:39 AM",
          "commitNameOld": "6f5522f58c1d2abdec37b5d22e5981716d4ec731",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 16.56,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public long set(long instant, int month) {\n    FieldUtils.verifyValueBounds(this, month, MIN, MAX);\n    int thisYear \u003d iChronology.getYear(instant);\n    int thisDom \u003d iChronology.getDayOfMonth(instant, thisYear);\n    int maxDom \u003d iChronology.getDaysInYearMonth(thisYear, month);\n    if (thisDom \u003e maxDom) {\n        thisDom \u003d maxDom;\n    }\n    return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) + iChronology.getMillisOfDay(instant);\n}",
          "path": "JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java",
          "functionStartLine": 306,
          "functionName": "set",
          "functionAnnotation": "",
          "functionDoc": "Set the Month component of the specified time instant.\u003cp\u003e\nIf the new month has less total days than the specified\nday of the month, this value is coerced to the nearest\nsane value. e.g.\u003cp\u003e\n07-31 to month 6 \u003d 06-30\u003cp\u003e\n03-31 to month 2 \u003d 02-28 or 02-29 depending\u003cp\u003e\n\n@param instant the time instant in millis to update.\n@param month the month (1,12) to update the time to.\n@return the updated time instant.\n@throws IllegalArgumentException  if month is invalid\n",
          "diff": "@@ -1,10 +1,10 @@\n public long set(long instant, int month) {\n-    Utils.verifyValueBounds(this, month, MIN, MAX);\n-    int thisYear \u003d iChronology.year().get(instant);\n+    FieldUtils.verifyValueBounds(this, month, MIN, MAX);\n+    int thisYear \u003d iChronology.getYear(instant);\n     int thisDom \u003d iChronology.getDayOfMonth(instant, thisYear);\n     int maxDom \u003d iChronology.getDaysInYearMonth(thisYear, month);\n     if (thisDom \u003e maxDom) {\n         thisDom \u003d maxDom;\n     }\n-    return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) + iChronology.millisOfDay().get(instant);\n+    return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) + iChronology.getMillisOfDay(instant);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "0e07ac6b2cff63550d7df336355ca63cc05aa40b": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "Move from Joda CVS\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@10 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "12/18/03, 6:07 PM",
      "commitName": "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Move from Joda CVS\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@10 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "12/18/03, 6:07 PM",
          "commitName": "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "12/16/03, 1:39 PM",
          "commitNameOld": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 2.19,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "public long set(long instant, int month) {\n    Utils.verifyValueBounds(this, month, MIN, MAX);\n    int thisYear \u003d iChronology.year().get(instant);\n    int thisDom \u003d iChronology.getDayOfMonth(instant, thisYear);\n    int maxDom \u003d iChronology.getDaysInYearMonth(thisYear, month);\n    if (thisDom \u003e maxDom) {\n        thisDom \u003d maxDom;\n    }\n    return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) + iChronology.millisOfDay().get(instant);\n}",
          "path": "JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java",
          "functionStartLine": 307,
          "functionName": "set",
          "functionAnnotation": "",
          "functionDoc": "Set the Month component of the specified time instant.\u003cp\u003e\nIf the new month has less total days than the specified\nday of the month, this value is coerced to the nearest\nsane value. e.g.\u003cp\u003e\n07-31 to month 6 \u003d 06-30\u003cp\u003e\n03-31 to month 2 \u003d 02-28 or 02-29 depending\u003cp\u003e\n\n@param instant the time instant in millis to update.\n@param month the month (1,12) to update the time to.\n@return the updated time instant.\n@throws IllegalArgumentException  if month is invalid\n",
          "diff": "@@ -1,10 +1,10 @@\n-public long set(long millis, int month) {\n-    super.verifyValueBounds(month, MIN, MAX);\n-    int thisYear \u003d iChronology.year().get(millis);\n-    int thisDom \u003d iChronology.getDayOfMonth(millis, thisYear);\n+public long set(long instant, int month) {\n+    Utils.verifyValueBounds(this, month, MIN, MAX);\n+    int thisYear \u003d iChronology.year().get(instant);\n+    int thisDom \u003d iChronology.getDayOfMonth(instant, thisYear);\n     int maxDom \u003d iChronology.getDaysInYearMonth(thisYear, month);\n     if (thisDom \u003e maxDom) {\n         thisDom \u003d maxDom;\n     }\n-    return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) + iChronology.millisOfDay().get(millis);\n+    return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) + iChronology.millisOfDay().get(instant);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[millis-long, month-int]",
            "newValue": "[instant-long, month-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Move from Joda CVS\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@10 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "12/18/03, 6:07 PM",
          "commitName": "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "12/16/03, 1:39 PM",
          "commitNameOld": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 2.19,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "public long set(long instant, int month) {\n    Utils.verifyValueBounds(this, month, MIN, MAX);\n    int thisYear \u003d iChronology.year().get(instant);\n    int thisDom \u003d iChronology.getDayOfMonth(instant, thisYear);\n    int maxDom \u003d iChronology.getDaysInYearMonth(thisYear, month);\n    if (thisDom \u003e maxDom) {\n        thisDom \u003d maxDom;\n    }\n    return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) + iChronology.millisOfDay().get(instant);\n}",
          "path": "JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java",
          "functionStartLine": 307,
          "functionName": "set",
          "functionAnnotation": "",
          "functionDoc": "Set the Month component of the specified time instant.\u003cp\u003e\nIf the new month has less total days than the specified\nday of the month, this value is coerced to the nearest\nsane value. e.g.\u003cp\u003e\n07-31 to month 6 \u003d 06-30\u003cp\u003e\n03-31 to month 2 \u003d 02-28 or 02-29 depending\u003cp\u003e\n\n@param instant the time instant in millis to update.\n@param month the month (1,12) to update the time to.\n@return the updated time instant.\n@throws IllegalArgumentException  if month is invalid\n",
          "diff": "@@ -1,10 +1,10 @@\n-public long set(long millis, int month) {\n-    super.verifyValueBounds(month, MIN, MAX);\n-    int thisYear \u003d iChronology.year().get(millis);\n-    int thisDom \u003d iChronology.getDayOfMonth(millis, thisYear);\n+public long set(long instant, int month) {\n+    Utils.verifyValueBounds(this, month, MIN, MAX);\n+    int thisYear \u003d iChronology.year().get(instant);\n+    int thisDom \u003d iChronology.getDayOfMonth(instant, thisYear);\n     int maxDom \u003d iChronology.getDaysInYearMonth(thisYear, month);\n     if (thisDom \u003e maxDom) {\n         thisDom \u003d maxDom;\n     }\n-    return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) + iChronology.millisOfDay().get(millis);\n+    return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) + iChronology.millisOfDay().get(instant);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Move from Joda CVS\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@10 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "12/18/03, 6:07 PM",
          "commitName": "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "12/16/03, 1:39 PM",
          "commitNameOld": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 2.19,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "public long set(long instant, int month) {\n    Utils.verifyValueBounds(this, month, MIN, MAX);\n    int thisYear \u003d iChronology.year().get(instant);\n    int thisDom \u003d iChronology.getDayOfMonth(instant, thisYear);\n    int maxDom \u003d iChronology.getDaysInYearMonth(thisYear, month);\n    if (thisDom \u003e maxDom) {\n        thisDom \u003d maxDom;\n    }\n    return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) + iChronology.millisOfDay().get(instant);\n}",
          "path": "JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java",
          "functionStartLine": 307,
          "functionName": "set",
          "functionAnnotation": "",
          "functionDoc": "Set the Month component of the specified time instant.\u003cp\u003e\nIf the new month has less total days than the specified\nday of the month, this value is coerced to the nearest\nsane value. e.g.\u003cp\u003e\n07-31 to month 6 \u003d 06-30\u003cp\u003e\n03-31 to month 2 \u003d 02-28 or 02-29 depending\u003cp\u003e\n\n@param instant the time instant in millis to update.\n@param month the month (1,12) to update the time to.\n@return the updated time instant.\n@throws IllegalArgumentException  if month is invalid\n",
          "diff": "@@ -1,10 +1,10 @@\n-public long set(long millis, int month) {\n-    super.verifyValueBounds(month, MIN, MAX);\n-    int thisYear \u003d iChronology.year().get(millis);\n-    int thisDom \u003d iChronology.getDayOfMonth(millis, thisYear);\n+public long set(long instant, int month) {\n+    Utils.verifyValueBounds(this, month, MIN, MAX);\n+    int thisYear \u003d iChronology.year().get(instant);\n+    int thisDom \u003d iChronology.getDayOfMonth(instant, thisYear);\n     int maxDom \u003d iChronology.getDaysInYearMonth(thisYear, month);\n     if (thisDom \u003e maxDom) {\n         thisDom \u003d maxDom;\n     }\n-    return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) + iChronology.millisOfDay().get(millis);\n+    return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) + iChronology.millisOfDay().get(instant);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Set the Month component of the specified time instant.\u003cp\u003e\nIf the new month has less total days than the specified\nday of the month, this value is coerced to the nearest\nsane value. e.g.\u003cp\u003e\n07-31 to month 6 \u003d 06-30\u003cp\u003e\n03-31 to month 2 \u003d 02-28 or 02-29 depending\u003cp\u003e\n\n@param millis the time instant in millis to update.\n@param month the month (1,12) to update the time to.\n@return the updated time instant.\n@throws IllegalArgumentException  if month is invalid\n",
            "newValue": "Set the Month component of the specified time instant.\u003cp\u003e\nIf the new month has less total days than the specified\nday of the month, this value is coerced to the nearest\nsane value. e.g.\u003cp\u003e\n07-31 to month 6 \u003d 06-30\u003cp\u003e\n03-31 to month 2 \u003d 02-28 or 02-29 depending\u003cp\u003e\n\n@param instant the time instant in millis to update.\n@param month the month (1,12) to update the time to.\n@return the updated time instant.\n@throws IllegalArgumentException  if month is invalid\n"
          }
        }
      ]
    },
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb": {
      "type": "Yintroduced",
      "commitMessage": "Move version 0.9 to joda-time repository\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@4 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "12/16/03, 1:39 PM",
      "commitName": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
      "commitAuthor": "Stephen Colebourne",
      "diff": "@@ -0,0 +1,10 @@\n+public long set(long millis, int month) {\n+    super.verifyValueBounds(month, MIN, MAX);\n+    int thisYear \u003d iChronology.year().get(millis);\n+    int thisDom \u003d iChronology.getDayOfMonth(millis, thisYear);\n+    int maxDom \u003d iChronology.getDaysInYearMonth(thisYear, month);\n+    if (thisDom \u003e maxDom) {\n+        thisDom \u003d maxDom;\n+    }\n+    return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) + iChronology.millisOfDay().get(millis);\n+}\n\\ No newline at end of file\n",
      "actualSource": "public long set(long millis, int month) {\n    super.verifyValueBounds(month, MIN, MAX);\n    int thisYear \u003d iChronology.year().get(millis);\n    int thisDom \u003d iChronology.getDayOfMonth(millis, thisYear);\n    int maxDom \u003d iChronology.getDaysInYearMonth(thisYear, month);\n    if (thisDom \u003e maxDom) {\n        thisDom \u003d maxDom;\n    }\n    return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) + iChronology.millisOfDay().get(millis);\n}",
      "path": "JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java",
      "functionStartLine": 297,
      "functionName": "set",
      "functionAnnotation": "",
      "functionDoc": "Set the Month component of the specified time instant.\u003cp\u003e\nIf the new month has less total days than the specified\nday of the month, this value is coerced to the nearest\nsane value. e.g.\u003cp\u003e\n07-31 to month 6 \u003d 06-30\u003cp\u003e\n03-31 to month 2 \u003d 02-28 or 02-29 depending\u003cp\u003e\n\n@param millis the time instant in millis to update.\n@param month the month (1,12) to update the time to.\n@return the updated time instant.\n@throws IllegalArgumentException  if month is invalid\n"
    }
  }
}