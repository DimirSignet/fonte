{
  "origin": "codeshovel",
  "repositoryName": "Time-16b",
  "repositoryPath": "/tmp/Time-16b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BasicMonthOfYearDateTimeField.java",
  "functionName": "add",
  "functionId": "add___instant-long__months-int",
  "sourceFilePath": "src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java",
  "functionAnnotation": "",
  "functionDoc": "Add the specified month to the specified time instant.\nThe amount added may be negative.\u003cp\u003e\nIf the new month has less total days than the specified\nday of the month, this value is coerced to the nearest\nsane value. e.g.\u003cp\u003e\n07-31 - (1 month) \u003d 06-30\u003cp\u003e\n03-31 - (1 month) \u003d 02-28 or 02-29 depending\u003cp\u003e\n\n@see org.joda.time.DateTimeField#add\n@see org.joda.time.ReadWritableDateTime#addMonths(int)\n@param instant the time instant in millis to update.\n@param months the months to add (can be negative).\n@return the updated time instant.\n",
  "functionStartLine": 91,
  "functionEndLine": 147,
  "numCommitsSeen": 22,
  "timeTaken": 1389,
  "changeHistory": [
    "df4a82f4fb46cc2248280c462e18f08d55a3d112",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1",
    "638abee397a254ce348b8500f089a781395f3349",
    "82cf7fe2bd1a9e8eebda02b1e183ccf50fbdea13",
    "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7",
    "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb"
  ],
  "changeHistoryShort": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": "Yfilerename",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": "Yfilerename",
    "638abee397a254ce348b8500f089a781395f3349": "Ybodychange",
    "82cf7fe2bd1a9e8eebda02b1e183ccf50fbdea13": "Ymovefromfile",
    "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7": "Ymultichange(Yfilerename,Ybodychange)",
    "0e07ac6b2cff63550d7df336355ca63cc05aa40b": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb": "Yintroduced"
  },
  "changeHistoryDetails": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": {
      "type": "Yfilerename",
      "commitMessage": "Remove JodaTime folder moving files to top level\n",
      "commitDate": "5/16/11, 10:02 AM",
      "commitName": "df4a82f4fb46cc2248280c462e18f08d55a3d112",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "5/16/11, 9:58 AM",
      "commitNameOld": "72b22654962284bac59c2777131b42a2d1f53228",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public long add(long instant, int months) {\n    if (months \u003d\u003d 0) {\n        return instant;\n    }\n    long timePart \u003d iChronology.getMillisOfDay(instant);\n    int thisYear \u003d iChronology.getYear(instant);\n    int thisMonth \u003d iChronology.getMonthOfYear(instant, thisYear);\n    int yearToUse;\n    int monthToUse \u003d thisMonth - 1 + months;\n    if (monthToUse \u003e\u003d 0) {\n        yearToUse \u003d thisYear + (monthToUse / iMax);\n        monthToUse \u003d (monthToUse % iMax) + 1;\n    } else {\n        yearToUse \u003d thisYear + (monthToUse / iMax) - 1;\n        monthToUse \u003d Math.abs(monthToUse);\n        int remMonthToUse \u003d monthToUse % iMax;\n        if (remMonthToUse \u003d\u003d 0) {\n            remMonthToUse \u003d iMax;\n        }\n        monthToUse \u003d iMax - remMonthToUse + 1;\n        if (monthToUse \u003d\u003d 1) {\n            yearToUse +\u003d 1;\n        }\n    }\n    int dayToUse \u003d iChronology.getDayOfMonth(instant, thisYear, thisMonth);\n    int maxDay \u003d iChronology.getDaysInYearMonth(yearToUse, monthToUse);\n    if (dayToUse \u003e maxDay) {\n        dayToUse \u003d maxDay;\n    }\n    long datePart \u003d iChronology.getYearMonthDayMillis(yearToUse, monthToUse, dayToUse);\n    return datePart + timePart;\n}",
      "path": "src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java",
      "functionStartLine": 91,
      "functionName": "add",
      "functionAnnotation": "",
      "functionDoc": "Add the specified month to the specified time instant.\nThe amount added may be negative.\u003cp\u003e\nIf the new month has less total days than the specified\nday of the month, this value is coerced to the nearest\nsane value. e.g.\u003cp\u003e\n07-31 - (1 month) \u003d 06-30\u003cp\u003e\n03-31 - (1 month) \u003d 02-28 or 02-29 depending\u003cp\u003e\n\n@see org.joda.time.DateTimeField#add\n@see org.joda.time.ReadWritableDateTime#addMonths(int)\n@param instant the time instant in millis to update.\n@param months the months to add (can be negative).\n@return the updated time instant.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java",
        "newPath": "src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java"
      }
    },
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": {
      "type": "Yfilerename",
      "commitMessage": "Convert to maven 2\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1540 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/8/10, 5:17 PM",
      "commitName": "53feb3fa56af7260e607844524b7e5a9be49ecc1",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/8/10, 5:02 PM",
      "commitNameOld": "7fa2ceaf5d95d050095432aa646ea803aa35e122",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public long add(long instant, int months) {\n    if (months \u003d\u003d 0) {\n        return instant;\n    }\n    long timePart \u003d iChronology.getMillisOfDay(instant);\n    int thisYear \u003d iChronology.getYear(instant);\n    int thisMonth \u003d iChronology.getMonthOfYear(instant, thisYear);\n    int yearToUse;\n    int monthToUse \u003d thisMonth - 1 + months;\n    if (monthToUse \u003e\u003d 0) {\n        yearToUse \u003d thisYear + (monthToUse / iMax);\n        monthToUse \u003d (monthToUse % iMax) + 1;\n    } else {\n        yearToUse \u003d thisYear + (monthToUse / iMax) - 1;\n        monthToUse \u003d Math.abs(monthToUse);\n        int remMonthToUse \u003d monthToUse % iMax;\n        if (remMonthToUse \u003d\u003d 0) {\n            remMonthToUse \u003d iMax;\n        }\n        monthToUse \u003d iMax - remMonthToUse + 1;\n        if (monthToUse \u003d\u003d 1) {\n            yearToUse +\u003d 1;\n        }\n    }\n    int dayToUse \u003d iChronology.getDayOfMonth(instant, thisYear, thisMonth);\n    int maxDay \u003d iChronology.getDaysInYearMonth(yearToUse, monthToUse);\n    if (dayToUse \u003e maxDay) {\n        dayToUse \u003d maxDay;\n    }\n    long datePart \u003d iChronology.getYearMonthDayMillis(yearToUse, monthToUse, dayToUse);\n    return datePart + timePart;\n}",
      "path": "JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java",
      "functionStartLine": 91,
      "functionName": "add",
      "functionAnnotation": "",
      "functionDoc": "Add the specified month to the specified time instant.\nThe amount added may be negative.\u003cp\u003e\nIf the new month has less total days than the specified\nday of the month, this value is coerced to the nearest\nsane value. e.g.\u003cp\u003e\n07-31 - (1 month) \u003d 06-30\u003cp\u003e\n03-31 - (1 month) \u003d 02-28 or 02-29 depending\u003cp\u003e\n\n@see org.joda.time.DateTimeField#add\n@see org.joda.time.ReadWritableDateTime#addMonths(int)\n@param instant the time instant in millis to update.\n@param months the months to add (can be negative).\n@return the updated time instant.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java",
        "newPath": "JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java"
      }
    },
    "638abee397a254ce348b8500f089a781395f3349": {
      "type": "Ybodychange",
      "commitMessage": "Add tests and fix duration/add bugs in Coptic and Ethiopic chronology\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@935 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "11/26/05, 4:51 PM",
      "commitName": "638abee397a254ce348b8500f089a781395f3349",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "11/26/05, 2:37 PM",
      "commitNameOld": "82cf7fe2bd1a9e8eebda02b1e183ccf50fbdea13",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.09,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public long add(long instant, int months) {\n    if (months \u003d\u003d 0) {\n        return instant;\n    }\n    long timePart \u003d iChronology.getMillisOfDay(instant);\n    int thisYear \u003d iChronology.getYear(instant);\n    int thisMonth \u003d iChronology.getMonthOfYear(instant, thisYear);\n    int yearToUse;\n    int monthToUse \u003d thisMonth - 1 + months;\n    if (monthToUse \u003e\u003d 0) {\n        yearToUse \u003d thisYear + (monthToUse / iMax);\n        monthToUse \u003d (monthToUse % iMax) + 1;\n    } else {\n        yearToUse \u003d thisYear + (monthToUse / iMax) - 1;\n        monthToUse \u003d Math.abs(monthToUse);\n        int remMonthToUse \u003d monthToUse % iMax;\n        if (remMonthToUse \u003d\u003d 0) {\n            remMonthToUse \u003d iMax;\n        }\n        monthToUse \u003d iMax - remMonthToUse + 1;\n        if (monthToUse \u003d\u003d 1) {\n            yearToUse +\u003d 1;\n        }\n    }\n    int dayToUse \u003d iChronology.getDayOfMonth(instant, thisYear, thisMonth);\n    int maxDay \u003d iChronology.getDaysInYearMonth(yearToUse, monthToUse);\n    if (dayToUse \u003e maxDay) {\n        dayToUse \u003d maxDay;\n    }\n    long datePart \u003d iChronology.getYearMonthDayMillis(yearToUse, monthToUse, dayToUse);\n    return datePart + timePart;\n}",
      "path": "JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java",
      "functionStartLine": 89,
      "functionName": "add",
      "functionAnnotation": "",
      "functionDoc": "Add the specified month to the specified time instant.\nThe amount added may be negative.\u003cp\u003e\nIf the new month has less total days than the specified\nday of the month, this value is coerced to the nearest\nsane value. e.g.\u003cp\u003e\n07-31 - (1 month) \u003d 06-30\u003cp\u003e\n03-31 - (1 month) \u003d 02-28 or 02-29 depending\u003cp\u003e\n\n@see org.joda.time.DateTimeField#add\n@see org.joda.time.ReadWritableDateTime#addMonths(int)\n@param instant the time instant in millis to update.\n@param months the months to add (can be negative).\n@return the updated time instant.\n",
      "diff": "@@ -1,32 +1,32 @@\n public long add(long instant, int months) {\n     if (months \u003d\u003d 0) {\n         return instant;\n     }\n     long timePart \u003d iChronology.getMillisOfDay(instant);\n     int thisYear \u003d iChronology.getYear(instant);\n     int thisMonth \u003d iChronology.getMonthOfYear(instant, thisYear);\n     int yearToUse;\n     int monthToUse \u003d thisMonth - 1 + months;\n     if (monthToUse \u003e\u003d 0) {\n-        yearToUse \u003d thisYear + (monthToUse / MAX);\n-        monthToUse \u003d (monthToUse % MAX) + 1;\n+        yearToUse \u003d thisYear + (monthToUse / iMax);\n+        monthToUse \u003d (monthToUse % iMax) + 1;\n     } else {\n-        yearToUse \u003d thisYear + (monthToUse / MAX) - 1;\n+        yearToUse \u003d thisYear + (monthToUse / iMax) - 1;\n         monthToUse \u003d Math.abs(monthToUse);\n-        int remMonthToUse \u003d monthToUse % MAX;\n+        int remMonthToUse \u003d monthToUse % iMax;\n         if (remMonthToUse \u003d\u003d 0) {\n-            remMonthToUse \u003d MAX;\n+            remMonthToUse \u003d iMax;\n         }\n-        monthToUse \u003d MAX - remMonthToUse + 1;\n+        monthToUse \u003d iMax - remMonthToUse + 1;\n         if (monthToUse \u003d\u003d 1) {\n             yearToUse +\u003d 1;\n         }\n     }\n     int dayToUse \u003d iChronology.getDayOfMonth(instant, thisYear, thisMonth);\n     int maxDay \u003d iChronology.getDaysInYearMonth(yearToUse, monthToUse);\n     if (dayToUse \u003e maxDay) {\n         dayToUse \u003d maxDay;\n     }\n     long datePart \u003d iChronology.getYearMonthDayMillis(yearToUse, monthToUse, dayToUse);\n     return datePart + timePart;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "82cf7fe2bd1a9e8eebda02b1e183ccf50fbdea13": {
      "type": "Ymovefromfile",
      "commitMessage": "Refactoring in advance of Islamic Chronology\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@933 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "11/26/05, 2:37 PM",
      "commitName": "82cf7fe2bd1a9e8eebda02b1e183ccf50fbdea13",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "11/26/05, 7:26 AM",
      "commitNameOld": "c4788d953b68641523da625111e352132cafe90e",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.3,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public long add(long instant, int months) {\n    if (months \u003d\u003d 0) {\n        return instant;\n    }\n    long timePart \u003d iChronology.getMillisOfDay(instant);\n    int thisYear \u003d iChronology.getYear(instant);\n    int thisMonth \u003d iChronology.getMonthOfYear(instant, thisYear);\n    int yearToUse;\n    int monthToUse \u003d thisMonth - 1 + months;\n    if (monthToUse \u003e\u003d 0) {\n        yearToUse \u003d thisYear + (monthToUse / MAX);\n        monthToUse \u003d (monthToUse % MAX) + 1;\n    } else {\n        yearToUse \u003d thisYear + (monthToUse / MAX) - 1;\n        monthToUse \u003d Math.abs(monthToUse);\n        int remMonthToUse \u003d monthToUse % MAX;\n        if (remMonthToUse \u003d\u003d 0) {\n            remMonthToUse \u003d MAX;\n        }\n        monthToUse \u003d MAX - remMonthToUse + 1;\n        if (monthToUse \u003d\u003d 1) {\n            yearToUse +\u003d 1;\n        }\n    }\n    int dayToUse \u003d iChronology.getDayOfMonth(instant, thisYear, thisMonth);\n    int maxDay \u003d iChronology.getDaysInYearMonth(yearToUse, monthToUse);\n    if (dayToUse \u003e maxDay) {\n        dayToUse \u003d maxDay;\n    }\n    long datePart \u003d iChronology.getYearMonthDayMillis(yearToUse, monthToUse, dayToUse);\n    return datePart + timePart;\n}",
      "path": "JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java",
      "functionStartLine": 90,
      "functionName": "add",
      "functionAnnotation": "",
      "functionDoc": "Add the specified month to the specified time instant.\nThe amount added may be negative.\u003cp\u003e\nIf the new month has less total days than the specified\nday of the month, this value is coerced to the nearest\nsane value. e.g.\u003cp\u003e\n07-31 - (1 month) \u003d 06-30\u003cp\u003e\n03-31 - (1 month) \u003d 02-28 or 02-29 depending\u003cp\u003e\n\n@see org.joda.time.DateTimeField#add\n@see org.joda.time.ReadWritableDateTime#addMonths(int)\n@param instant the time instant in millis to update.\n@param months the months to add (can be negative).\n@return the updated time instant.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java",
        "newPath": "JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java",
        "oldMethodName": "add",
        "newMethodName": "add"
      }
    },
    "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "Re-organized chronology package and created new field package.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@125 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "1/27/04, 11:12 PM",
      "commitName": "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7",
      "commitAuthor": "Brian S O\u0027Neill",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "Re-organized chronology package and created new field package.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@125 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "1/27/04, 11:12 PM",
          "commitName": "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7",
          "commitAuthor": "Brian S O\u0027Neill",
          "commitDateOld": "1/11/04, 9:39 AM",
          "commitNameOld": "6f5522f58c1d2abdec37b5d22e5981716d4ec731",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 16.56,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public long add(long instant, int months) {\n    if (months \u003d\u003d 0) {\n        return instant;\n    }\n    long timePart \u003d iChronology.getMillisOfDay(instant);\n    int thisYear \u003d iChronology.getYear(instant);\n    int thisMonth \u003d iChronology.getMonthOfYear(instant, thisYear);\n    int yearToUse;\n    int monthToUse \u003d thisMonth - 1 + months;\n    if (monthToUse \u003e\u003d 0) {\n        yearToUse \u003d thisYear + (monthToUse / MAX);\n        monthToUse \u003d (monthToUse % MAX) + 1;\n    } else {\n        yearToUse \u003d thisYear + (monthToUse / MAX) - 1;\n        monthToUse \u003d Math.abs(monthToUse);\n        int remMonthToUse \u003d monthToUse % MAX;\n        if (remMonthToUse \u003d\u003d 0) {\n            remMonthToUse \u003d MAX;\n        }\n        monthToUse \u003d MAX - remMonthToUse + 1;\n        if (monthToUse \u003d\u003d 1) {\n            yearToUse +\u003d 1;\n        }\n    }\n    int dayToUse \u003d iChronology.getDayOfMonth(instant, thisYear, thisMonth);\n    int maxDay \u003d iChronology.getDaysInYearMonth(yearToUse, monthToUse);\n    if (dayToUse \u003e maxDay) {\n        dayToUse \u003d maxDay;\n    }\n    long datePart \u003d iChronology.getYearMonthDayMillis(yearToUse, monthToUse, dayToUse);\n    return datePart + timePart;\n}",
          "path": "JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java",
          "functionStartLine": 129,
          "functionName": "add",
          "functionAnnotation": "",
          "functionDoc": "Add the specified month to the specified time instant.\nThe amount added may be negative.\u003cp\u003e\nIf the new month has less total days than the specified\nday of the month, this value is coerced to the nearest\nsane value. e.g.\u003cp\u003e\n07-31 - (1 month) \u003d 06-30\u003cp\u003e\n03-31 - (1 month) \u003d 02-28 or 02-29 depending\u003cp\u003e\n\n@see org.joda.time.DateTimeField#add\n@see org.joda.time.ReadWritableDateTime#addMonths(int)\n@param instant the time instant in millis to update.\n@param months the months to add (can be negative).\n@return the updated time instant.\n",
          "diff": "@@ -1,32 +1,32 @@\n public long add(long instant, int months) {\n     if (months \u003d\u003d 0) {\n         return instant;\n     }\n-    long timePart \u003d iChronology.millisOfDay().get(instant);\n-    int thisYear \u003d iChronology.year().get(instant);\n+    long timePart \u003d iChronology.getMillisOfDay(instant);\n+    int thisYear \u003d iChronology.getYear(instant);\n     int thisMonth \u003d iChronology.getMonthOfYear(instant, thisYear);\n     int yearToUse;\n     int monthToUse \u003d thisMonth - 1 + months;\n     if (monthToUse \u003e\u003d 0) {\n         yearToUse \u003d thisYear + (monthToUse / MAX);\n         monthToUse \u003d (monthToUse % MAX) + 1;\n     } else {\n         yearToUse \u003d thisYear + (monthToUse / MAX) - 1;\n         monthToUse \u003d Math.abs(monthToUse);\n         int remMonthToUse \u003d monthToUse % MAX;\n         if (remMonthToUse \u003d\u003d 0) {\n             remMonthToUse \u003d MAX;\n         }\n         monthToUse \u003d MAX - remMonthToUse + 1;\n         if (monthToUse \u003d\u003d 1) {\n             yearToUse +\u003d 1;\n         }\n     }\n     int dayToUse \u003d iChronology.getDayOfMonth(instant, thisYear, thisMonth);\n     int maxDay \u003d iChronology.getDaysInYearMonth(yearToUse, monthToUse);\n     if (dayToUse \u003e maxDay) {\n         dayToUse \u003d maxDay;\n     }\n     long datePart \u003d iChronology.getYearMonthDayMillis(yearToUse, monthToUse, dayToUse);\n     return datePart + timePart;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java",
            "newPath": "JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Re-organized chronology package and created new field package.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@125 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "1/27/04, 11:12 PM",
          "commitName": "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7",
          "commitAuthor": "Brian S O\u0027Neill",
          "commitDateOld": "1/11/04, 9:39 AM",
          "commitNameOld": "6f5522f58c1d2abdec37b5d22e5981716d4ec731",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 16.56,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public long add(long instant, int months) {\n    if (months \u003d\u003d 0) {\n        return instant;\n    }\n    long timePart \u003d iChronology.getMillisOfDay(instant);\n    int thisYear \u003d iChronology.getYear(instant);\n    int thisMonth \u003d iChronology.getMonthOfYear(instant, thisYear);\n    int yearToUse;\n    int monthToUse \u003d thisMonth - 1 + months;\n    if (monthToUse \u003e\u003d 0) {\n        yearToUse \u003d thisYear + (monthToUse / MAX);\n        monthToUse \u003d (monthToUse % MAX) + 1;\n    } else {\n        yearToUse \u003d thisYear + (monthToUse / MAX) - 1;\n        monthToUse \u003d Math.abs(monthToUse);\n        int remMonthToUse \u003d monthToUse % MAX;\n        if (remMonthToUse \u003d\u003d 0) {\n            remMonthToUse \u003d MAX;\n        }\n        monthToUse \u003d MAX - remMonthToUse + 1;\n        if (monthToUse \u003d\u003d 1) {\n            yearToUse +\u003d 1;\n        }\n    }\n    int dayToUse \u003d iChronology.getDayOfMonth(instant, thisYear, thisMonth);\n    int maxDay \u003d iChronology.getDaysInYearMonth(yearToUse, monthToUse);\n    if (dayToUse \u003e maxDay) {\n        dayToUse \u003d maxDay;\n    }\n    long datePart \u003d iChronology.getYearMonthDayMillis(yearToUse, monthToUse, dayToUse);\n    return datePart + timePart;\n}",
          "path": "JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java",
          "functionStartLine": 129,
          "functionName": "add",
          "functionAnnotation": "",
          "functionDoc": "Add the specified month to the specified time instant.\nThe amount added may be negative.\u003cp\u003e\nIf the new month has less total days than the specified\nday of the month, this value is coerced to the nearest\nsane value. e.g.\u003cp\u003e\n07-31 - (1 month) \u003d 06-30\u003cp\u003e\n03-31 - (1 month) \u003d 02-28 or 02-29 depending\u003cp\u003e\n\n@see org.joda.time.DateTimeField#add\n@see org.joda.time.ReadWritableDateTime#addMonths(int)\n@param instant the time instant in millis to update.\n@param months the months to add (can be negative).\n@return the updated time instant.\n",
          "diff": "@@ -1,32 +1,32 @@\n public long add(long instant, int months) {\n     if (months \u003d\u003d 0) {\n         return instant;\n     }\n-    long timePart \u003d iChronology.millisOfDay().get(instant);\n-    int thisYear \u003d iChronology.year().get(instant);\n+    long timePart \u003d iChronology.getMillisOfDay(instant);\n+    int thisYear \u003d iChronology.getYear(instant);\n     int thisMonth \u003d iChronology.getMonthOfYear(instant, thisYear);\n     int yearToUse;\n     int monthToUse \u003d thisMonth - 1 + months;\n     if (monthToUse \u003e\u003d 0) {\n         yearToUse \u003d thisYear + (monthToUse / MAX);\n         monthToUse \u003d (monthToUse % MAX) + 1;\n     } else {\n         yearToUse \u003d thisYear + (monthToUse / MAX) - 1;\n         monthToUse \u003d Math.abs(monthToUse);\n         int remMonthToUse \u003d monthToUse % MAX;\n         if (remMonthToUse \u003d\u003d 0) {\n             remMonthToUse \u003d MAX;\n         }\n         monthToUse \u003d MAX - remMonthToUse + 1;\n         if (monthToUse \u003d\u003d 1) {\n             yearToUse +\u003d 1;\n         }\n     }\n     int dayToUse \u003d iChronology.getDayOfMonth(instant, thisYear, thisMonth);\n     int maxDay \u003d iChronology.getDaysInYearMonth(yearToUse, monthToUse);\n     if (dayToUse \u003e maxDay) {\n         dayToUse \u003d maxDay;\n     }\n     long datePart \u003d iChronology.getYearMonthDayMillis(yearToUse, monthToUse, dayToUse);\n     return datePart + timePart;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "0e07ac6b2cff63550d7df336355ca63cc05aa40b": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "Move from Joda CVS\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@10 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "12/18/03, 6:07 PM",
      "commitName": "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Move from Joda CVS\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@10 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "12/18/03, 6:07 PM",
          "commitName": "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "12/16/03, 1:39 PM",
          "commitNameOld": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 2.19,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "public long add(long instant, int months) {\n    if (months \u003d\u003d 0) {\n        return instant;\n    }\n    long timePart \u003d iChronology.millisOfDay().get(instant);\n    int thisYear \u003d iChronology.year().get(instant);\n    int thisMonth \u003d iChronology.getMonthOfYear(instant, thisYear);\n    int yearToUse;\n    int monthToUse \u003d thisMonth - 1 + months;\n    if (monthToUse \u003e\u003d 0) {\n        yearToUse \u003d thisYear + (monthToUse / MAX);\n        monthToUse \u003d (monthToUse % MAX) + 1;\n    } else {\n        yearToUse \u003d thisYear + (monthToUse / MAX) - 1;\n        monthToUse \u003d Math.abs(monthToUse);\n        int remMonthToUse \u003d monthToUse % MAX;\n        if (remMonthToUse \u003d\u003d 0) {\n            remMonthToUse \u003d MAX;\n        }\n        monthToUse \u003d MAX - remMonthToUse + 1;\n        if (monthToUse \u003d\u003d 1) {\n            yearToUse +\u003d 1;\n        }\n    }\n    int dayToUse \u003d iChronology.getDayOfMonth(instant, thisYear, thisMonth);\n    int maxDay \u003d iChronology.getDaysInYearMonth(yearToUse, monthToUse);\n    if (dayToUse \u003e maxDay) {\n        dayToUse \u003d maxDay;\n    }\n    long datePart \u003d iChronology.getYearMonthDayMillis(yearToUse, monthToUse, dayToUse);\n    return datePart + timePart;\n}",
          "path": "JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java",
          "functionStartLine": 130,
          "functionName": "add",
          "functionAnnotation": "",
          "functionDoc": "Add the specified month to the specified time instant.\nThe amount added may be negative.\u003cp\u003e\nIf the new month has less total days than the specified\nday of the month, this value is coerced to the nearest\nsane value. e.g.\u003cp\u003e\n07-31 - (1 month) \u003d 06-30\u003cp\u003e\n03-31 - (1 month) \u003d 02-28 or 02-29 depending\u003cp\u003e\n\n@see org.joda.time.DateTimeField#add\n@see org.joda.time.ReadWritableDateTime#addMonths(int)\n@param instant the time instant in millis to update.\n@param months the months to add (can be negative).\n@return the updated time instant.\n",
          "diff": "@@ -1,32 +1,32 @@\n-public long add(long millis, int months) {\n+public long add(long instant, int months) {\n     if (months \u003d\u003d 0) {\n-        return millis;\n+        return instant;\n     }\n-    long timePart \u003d iChronology.millisOfDay().get(millis);\n-    int thisYear \u003d iChronology.year().get(millis);\n-    int thisMonth \u003d iChronology.getMonthOfYear(millis, thisYear);\n+    long timePart \u003d iChronology.millisOfDay().get(instant);\n+    int thisYear \u003d iChronology.year().get(instant);\n+    int thisMonth \u003d iChronology.getMonthOfYear(instant, thisYear);\n     int yearToUse;\n     int monthToUse \u003d thisMonth - 1 + months;\n     if (monthToUse \u003e\u003d 0) {\n         yearToUse \u003d thisYear + (monthToUse / MAX);\n         monthToUse \u003d (monthToUse % MAX) + 1;\n     } else {\n         yearToUse \u003d thisYear + (monthToUse / MAX) - 1;\n         monthToUse \u003d Math.abs(monthToUse);\n         int remMonthToUse \u003d monthToUse % MAX;\n         if (remMonthToUse \u003d\u003d 0) {\n             remMonthToUse \u003d MAX;\n         }\n         monthToUse \u003d MAX - remMonthToUse + 1;\n         if (monthToUse \u003d\u003d 1) {\n             yearToUse +\u003d 1;\n         }\n     }\n-    int dayToUse \u003d iChronology.getDayOfMonth(millis, thisYear, thisMonth);\n+    int dayToUse \u003d iChronology.getDayOfMonth(instant, thisYear, thisMonth);\n     int maxDay \u003d iChronology.getDaysInYearMonth(yearToUse, monthToUse);\n     if (dayToUse \u003e maxDay) {\n         dayToUse \u003d maxDay;\n     }\n     long datePart \u003d iChronology.getYearMonthDayMillis(yearToUse, monthToUse, dayToUse);\n     return datePart + timePart;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[millis-long, months-int]",
            "newValue": "[instant-long, months-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Move from Joda CVS\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@10 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "12/18/03, 6:07 PM",
          "commitName": "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "12/16/03, 1:39 PM",
          "commitNameOld": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 2.19,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "public long add(long instant, int months) {\n    if (months \u003d\u003d 0) {\n        return instant;\n    }\n    long timePart \u003d iChronology.millisOfDay().get(instant);\n    int thisYear \u003d iChronology.year().get(instant);\n    int thisMonth \u003d iChronology.getMonthOfYear(instant, thisYear);\n    int yearToUse;\n    int monthToUse \u003d thisMonth - 1 + months;\n    if (monthToUse \u003e\u003d 0) {\n        yearToUse \u003d thisYear + (monthToUse / MAX);\n        monthToUse \u003d (monthToUse % MAX) + 1;\n    } else {\n        yearToUse \u003d thisYear + (monthToUse / MAX) - 1;\n        monthToUse \u003d Math.abs(monthToUse);\n        int remMonthToUse \u003d monthToUse % MAX;\n        if (remMonthToUse \u003d\u003d 0) {\n            remMonthToUse \u003d MAX;\n        }\n        monthToUse \u003d MAX - remMonthToUse + 1;\n        if (monthToUse \u003d\u003d 1) {\n            yearToUse +\u003d 1;\n        }\n    }\n    int dayToUse \u003d iChronology.getDayOfMonth(instant, thisYear, thisMonth);\n    int maxDay \u003d iChronology.getDaysInYearMonth(yearToUse, monthToUse);\n    if (dayToUse \u003e maxDay) {\n        dayToUse \u003d maxDay;\n    }\n    long datePart \u003d iChronology.getYearMonthDayMillis(yearToUse, monthToUse, dayToUse);\n    return datePart + timePart;\n}",
          "path": "JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java",
          "functionStartLine": 130,
          "functionName": "add",
          "functionAnnotation": "",
          "functionDoc": "Add the specified month to the specified time instant.\nThe amount added may be negative.\u003cp\u003e\nIf the new month has less total days than the specified\nday of the month, this value is coerced to the nearest\nsane value. e.g.\u003cp\u003e\n07-31 - (1 month) \u003d 06-30\u003cp\u003e\n03-31 - (1 month) \u003d 02-28 or 02-29 depending\u003cp\u003e\n\n@see org.joda.time.DateTimeField#add\n@see org.joda.time.ReadWritableDateTime#addMonths(int)\n@param instant the time instant in millis to update.\n@param months the months to add (can be negative).\n@return the updated time instant.\n",
          "diff": "@@ -1,32 +1,32 @@\n-public long add(long millis, int months) {\n+public long add(long instant, int months) {\n     if (months \u003d\u003d 0) {\n-        return millis;\n+        return instant;\n     }\n-    long timePart \u003d iChronology.millisOfDay().get(millis);\n-    int thisYear \u003d iChronology.year().get(millis);\n-    int thisMonth \u003d iChronology.getMonthOfYear(millis, thisYear);\n+    long timePart \u003d iChronology.millisOfDay().get(instant);\n+    int thisYear \u003d iChronology.year().get(instant);\n+    int thisMonth \u003d iChronology.getMonthOfYear(instant, thisYear);\n     int yearToUse;\n     int monthToUse \u003d thisMonth - 1 + months;\n     if (monthToUse \u003e\u003d 0) {\n         yearToUse \u003d thisYear + (monthToUse / MAX);\n         monthToUse \u003d (monthToUse % MAX) + 1;\n     } else {\n         yearToUse \u003d thisYear + (monthToUse / MAX) - 1;\n         monthToUse \u003d Math.abs(monthToUse);\n         int remMonthToUse \u003d monthToUse % MAX;\n         if (remMonthToUse \u003d\u003d 0) {\n             remMonthToUse \u003d MAX;\n         }\n         monthToUse \u003d MAX - remMonthToUse + 1;\n         if (monthToUse \u003d\u003d 1) {\n             yearToUse +\u003d 1;\n         }\n     }\n-    int dayToUse \u003d iChronology.getDayOfMonth(millis, thisYear, thisMonth);\n+    int dayToUse \u003d iChronology.getDayOfMonth(instant, thisYear, thisMonth);\n     int maxDay \u003d iChronology.getDaysInYearMonth(yearToUse, monthToUse);\n     if (dayToUse \u003e maxDay) {\n         dayToUse \u003d maxDay;\n     }\n     long datePart \u003d iChronology.getYearMonthDayMillis(yearToUse, monthToUse, dayToUse);\n     return datePart + timePart;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Move from Joda CVS\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@10 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "12/18/03, 6:07 PM",
          "commitName": "0e07ac6b2cff63550d7df336355ca63cc05aa40b",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "12/16/03, 1:39 PM",
          "commitNameOld": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 2.19,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "public long add(long instant, int months) {\n    if (months \u003d\u003d 0) {\n        return instant;\n    }\n    long timePart \u003d iChronology.millisOfDay().get(instant);\n    int thisYear \u003d iChronology.year().get(instant);\n    int thisMonth \u003d iChronology.getMonthOfYear(instant, thisYear);\n    int yearToUse;\n    int monthToUse \u003d thisMonth - 1 + months;\n    if (monthToUse \u003e\u003d 0) {\n        yearToUse \u003d thisYear + (monthToUse / MAX);\n        monthToUse \u003d (monthToUse % MAX) + 1;\n    } else {\n        yearToUse \u003d thisYear + (monthToUse / MAX) - 1;\n        monthToUse \u003d Math.abs(monthToUse);\n        int remMonthToUse \u003d monthToUse % MAX;\n        if (remMonthToUse \u003d\u003d 0) {\n            remMonthToUse \u003d MAX;\n        }\n        monthToUse \u003d MAX - remMonthToUse + 1;\n        if (monthToUse \u003d\u003d 1) {\n            yearToUse +\u003d 1;\n        }\n    }\n    int dayToUse \u003d iChronology.getDayOfMonth(instant, thisYear, thisMonth);\n    int maxDay \u003d iChronology.getDaysInYearMonth(yearToUse, monthToUse);\n    if (dayToUse \u003e maxDay) {\n        dayToUse \u003d maxDay;\n    }\n    long datePart \u003d iChronology.getYearMonthDayMillis(yearToUse, monthToUse, dayToUse);\n    return datePart + timePart;\n}",
          "path": "JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java",
          "functionStartLine": 130,
          "functionName": "add",
          "functionAnnotation": "",
          "functionDoc": "Add the specified month to the specified time instant.\nThe amount added may be negative.\u003cp\u003e\nIf the new month has less total days than the specified\nday of the month, this value is coerced to the nearest\nsane value. e.g.\u003cp\u003e\n07-31 - (1 month) \u003d 06-30\u003cp\u003e\n03-31 - (1 month) \u003d 02-28 or 02-29 depending\u003cp\u003e\n\n@see org.joda.time.DateTimeField#add\n@see org.joda.time.ReadWritableDateTime#addMonths(int)\n@param instant the time instant in millis to update.\n@param months the months to add (can be negative).\n@return the updated time instant.\n",
          "diff": "@@ -1,32 +1,32 @@\n-public long add(long millis, int months) {\n+public long add(long instant, int months) {\n     if (months \u003d\u003d 0) {\n-        return millis;\n+        return instant;\n     }\n-    long timePart \u003d iChronology.millisOfDay().get(millis);\n-    int thisYear \u003d iChronology.year().get(millis);\n-    int thisMonth \u003d iChronology.getMonthOfYear(millis, thisYear);\n+    long timePart \u003d iChronology.millisOfDay().get(instant);\n+    int thisYear \u003d iChronology.year().get(instant);\n+    int thisMonth \u003d iChronology.getMonthOfYear(instant, thisYear);\n     int yearToUse;\n     int monthToUse \u003d thisMonth - 1 + months;\n     if (monthToUse \u003e\u003d 0) {\n         yearToUse \u003d thisYear + (monthToUse / MAX);\n         monthToUse \u003d (monthToUse % MAX) + 1;\n     } else {\n         yearToUse \u003d thisYear + (monthToUse / MAX) - 1;\n         monthToUse \u003d Math.abs(monthToUse);\n         int remMonthToUse \u003d monthToUse % MAX;\n         if (remMonthToUse \u003d\u003d 0) {\n             remMonthToUse \u003d MAX;\n         }\n         monthToUse \u003d MAX - remMonthToUse + 1;\n         if (monthToUse \u003d\u003d 1) {\n             yearToUse +\u003d 1;\n         }\n     }\n-    int dayToUse \u003d iChronology.getDayOfMonth(millis, thisYear, thisMonth);\n+    int dayToUse \u003d iChronology.getDayOfMonth(instant, thisYear, thisMonth);\n     int maxDay \u003d iChronology.getDaysInYearMonth(yearToUse, monthToUse);\n     if (dayToUse \u003e maxDay) {\n         dayToUse \u003d maxDay;\n     }\n     long datePart \u003d iChronology.getYearMonthDayMillis(yearToUse, monthToUse, dayToUse);\n     return datePart + timePart;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Add the specified month to the specified time instant.\nThe amount added may be negative.\u003cp\u003e\nIf the new month has less total days than the specified\nday of the month, this value is coerced to the nearest\nsane value. e.g.\u003cp\u003e\n07-31 - (1 month) \u003d 06-30\u003cp\u003e\n03-31 - (1 month) \u003d 02-28 or 02-29 depending\u003cp\u003e\n\n@see org.joda.time.DateTimeField#add\n@see org.joda.time.ReadWritableDateTime#addMonths(int)\n@param millis the time instant in millis to update.\n@param months the months to add (can be negative).\n@return the updated time instant.\n",
            "newValue": "Add the specified month to the specified time instant.\nThe amount added may be negative.\u003cp\u003e\nIf the new month has less total days than the specified\nday of the month, this value is coerced to the nearest\nsane value. e.g.\u003cp\u003e\n07-31 - (1 month) \u003d 06-30\u003cp\u003e\n03-31 - (1 month) \u003d 02-28 or 02-29 depending\u003cp\u003e\n\n@see org.joda.time.DateTimeField#add\n@see org.joda.time.ReadWritableDateTime#addMonths(int)\n@param instant the time instant in millis to update.\n@param months the months to add (can be negative).\n@return the updated time instant.\n"
          }
        }
      ]
    },
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb": {
      "type": "Yintroduced",
      "commitMessage": "Move version 0.9 to joda-time repository\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@4 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "12/16/03, 1:39 PM",
      "commitName": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
      "commitAuthor": "Stephen Colebourne",
      "diff": "@@ -0,0 +1,32 @@\n+public long add(long millis, int months) {\n+    if (months \u003d\u003d 0) {\n+        return millis;\n+    }\n+    long timePart \u003d iChronology.millisOfDay().get(millis);\n+    int thisYear \u003d iChronology.year().get(millis);\n+    int thisMonth \u003d iChronology.getMonthOfYear(millis, thisYear);\n+    int yearToUse;\n+    int monthToUse \u003d thisMonth - 1 + months;\n+    if (monthToUse \u003e\u003d 0) {\n+        yearToUse \u003d thisYear + (monthToUse / MAX);\n+        monthToUse \u003d (monthToUse % MAX) + 1;\n+    } else {\n+        yearToUse \u003d thisYear + (monthToUse / MAX) - 1;\n+        monthToUse \u003d Math.abs(monthToUse);\n+        int remMonthToUse \u003d monthToUse % MAX;\n+        if (remMonthToUse \u003d\u003d 0) {\n+            remMonthToUse \u003d MAX;\n+        }\n+        monthToUse \u003d MAX - remMonthToUse + 1;\n+        if (monthToUse \u003d\u003d 1) {\n+            yearToUse +\u003d 1;\n+        }\n+    }\n+    int dayToUse \u003d iChronology.getDayOfMonth(millis, thisYear, thisMonth);\n+    int maxDay \u003d iChronology.getDaysInYearMonth(yearToUse, monthToUse);\n+    if (dayToUse \u003e maxDay) {\n+        dayToUse \u003d maxDay;\n+    }\n+    long datePart \u003d iChronology.getYearMonthDayMillis(yearToUse, monthToUse, dayToUse);\n+    return datePart + timePart;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public long add(long millis, int months) {\n    if (months \u003d\u003d 0) {\n        return millis;\n    }\n    long timePart \u003d iChronology.millisOfDay().get(millis);\n    int thisYear \u003d iChronology.year().get(millis);\n    int thisMonth \u003d iChronology.getMonthOfYear(millis, thisYear);\n    int yearToUse;\n    int monthToUse \u003d thisMonth - 1 + months;\n    if (monthToUse \u003e\u003d 0) {\n        yearToUse \u003d thisYear + (monthToUse / MAX);\n        monthToUse \u003d (monthToUse % MAX) + 1;\n    } else {\n        yearToUse \u003d thisYear + (monthToUse / MAX) - 1;\n        monthToUse \u003d Math.abs(monthToUse);\n        int remMonthToUse \u003d monthToUse % MAX;\n        if (remMonthToUse \u003d\u003d 0) {\n            remMonthToUse \u003d MAX;\n        }\n        monthToUse \u003d MAX - remMonthToUse + 1;\n        if (monthToUse \u003d\u003d 1) {\n            yearToUse +\u003d 1;\n        }\n    }\n    int dayToUse \u003d iChronology.getDayOfMonth(millis, thisYear, thisMonth);\n    int maxDay \u003d iChronology.getDaysInYearMonth(yearToUse, monthToUse);\n    if (dayToUse \u003e maxDay) {\n        dayToUse \u003d maxDay;\n    }\n    long datePart \u003d iChronology.getYearMonthDayMillis(yearToUse, monthToUse, dayToUse);\n    return datePart + timePart;\n}",
      "path": "JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java",
      "functionStartLine": 120,
      "functionName": "add",
      "functionAnnotation": "",
      "functionDoc": "Add the specified month to the specified time instant.\nThe amount added may be negative.\u003cp\u003e\nIf the new month has less total days than the specified\nday of the month, this value is coerced to the nearest\nsane value. e.g.\u003cp\u003e\n07-31 - (1 month) \u003d 06-30\u003cp\u003e\n03-31 - (1 month) \u003d 02-28 or 02-29 depending\u003cp\u003e\n\n@see org.joda.time.DateTimeField#add\n@see org.joda.time.ReadWritableDateTime#addMonths(int)\n@param millis the time instant in millis to update.\n@param months the months to add (can be negative).\n@return the updated time instant.\n"
    }
  }
}