{
  "origin": "codeshovel",
  "repositoryName": "Time-16b",
  "repositoryPath": "/tmp/Time-16b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "GJChronology.java",
  "functionName": "getInstance",
  "functionId": "getInstance___zone-DateTimeZone__gregorianCutover-ReadableInstant__minDaysInFirstWeek-int",
  "sourceFilePath": "src/main/java/org/joda/time/chrono/GJChronology.java",
  "functionAnnotation": "",
  "functionDoc": "Factory method returns instances of the GJ cutover chronology. Any\ncutover date may be specified.\n\n@param zone the time zone to use, null is default\n@param gregorianCutover the cutover to use, null means default\n@param minDaysInFirstWeek minimum number of days in first week of the year; default is 4\n",
  "functionStartLine": 184,
  "functionEndLine": 231,
  "numCommitsSeen": 30,
  "timeTaken": 2185,
  "changeHistory": [
    "df4a82f4fb46cc2248280c462e18f08d55a3d112",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1",
    "3f1e047c898c9c925e1faac33bb07e1cb05d88cb",
    "55ba9b0b65cfa904eb0d499b46ae4cd3c028b7d8",
    "6c6142b2ef5f4444cbfe5ef931a28f79a9a9f2c9",
    "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7"
  ],
  "changeHistoryShort": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": "Yfilerename",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": "Yfilerename",
    "3f1e047c898c9c925e1faac33bb07e1cb05d88cb": "Ybodychange",
    "55ba9b0b65cfa904eb0d499b46ae4cd3c028b7d8": "Ybodychange",
    "6c6142b2ef5f4444cbfe5ef931a28f79a9a9f2c9": "Ybodychange",
    "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": {
      "type": "Yfilerename",
      "commitMessage": "Remove JodaTime folder moving files to top level\n",
      "commitDate": "5/16/11, 10:02 AM",
      "commitName": "df4a82f4fb46cc2248280c462e18f08d55a3d112",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "5/16/11, 9:58 AM",
      "commitNameOld": "72b22654962284bac59c2777131b42a2d1f53228",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static synchronized GJChronology getInstance(DateTimeZone zone, ReadableInstant gregorianCutover, int minDaysInFirstWeek) {\n    zone \u003d DateTimeUtils.getZone(zone);\n    Instant cutoverInstant;\n    if (gregorianCutover \u003d\u003d null) {\n        cutoverInstant \u003d DEFAULT_CUTOVER;\n    } else {\n        cutoverInstant \u003d gregorianCutover.toInstant();\n    }\n    GJChronology chrono;\n    ArrayList\u003cGJChronology\u003e chronos \u003d cCache.get(zone);\n    if (chronos \u003d\u003d null) {\n        chronos \u003d new ArrayList\u003cGJChronology\u003e(2);\n        cCache.put(zone, chronos);\n    } else {\n        for (int i \u003d chronos.size(); --i \u003e\u003d 0; ) {\n            chrono \u003d chronos.get(i);\n            if (minDaysInFirstWeek \u003d\u003d chrono.getMinimumDaysInFirstWeek() \u0026\u0026 cutoverInstant.equals(chrono.getGregorianCutover())) {\n                return chrono;\n            }\n        }\n    }\n    if (zone \u003d\u003d DateTimeZone.UTC) {\n        chrono \u003d new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);\n    } else {\n        chrono \u003d getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);\n        chrono \u003d new GJChronology(ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);\n    }\n    chronos.add(chrono);\n    return chrono;\n}",
      "path": "src/main/java/org/joda/time/chrono/GJChronology.java",
      "functionStartLine": 184,
      "functionName": "getInstance",
      "functionAnnotation": "",
      "functionDoc": "Factory method returns instances of the GJ cutover chronology. Any\ncutover date may be specified.\n\n@param zone the time zone to use, null is default\n@param gregorianCutover the cutover to use, null means default\n@param minDaysInFirstWeek minimum number of days in first week of the year; default is 4\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/main/java/org/joda/time/chrono/GJChronology.java",
        "newPath": "src/main/java/org/joda/time/chrono/GJChronology.java"
      }
    },
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": {
      "type": "Yfilerename",
      "commitMessage": "Convert to maven 2\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1540 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/8/10, 5:17 PM",
      "commitName": "53feb3fa56af7260e607844524b7e5a9be49ecc1",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/8/10, 5:02 PM",
      "commitNameOld": "7fa2ceaf5d95d050095432aa646ea803aa35e122",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static synchronized GJChronology getInstance(DateTimeZone zone, ReadableInstant gregorianCutover, int minDaysInFirstWeek) {\n    zone \u003d DateTimeUtils.getZone(zone);\n    Instant cutoverInstant;\n    if (gregorianCutover \u003d\u003d null) {\n        cutoverInstant \u003d DEFAULT_CUTOVER;\n    } else {\n        cutoverInstant \u003d gregorianCutover.toInstant();\n    }\n    GJChronology chrono;\n    ArrayList\u003cGJChronology\u003e chronos \u003d cCache.get(zone);\n    if (chronos \u003d\u003d null) {\n        chronos \u003d new ArrayList\u003cGJChronology\u003e(2);\n        cCache.put(zone, chronos);\n    } else {\n        for (int i \u003d chronos.size(); --i \u003e\u003d 0; ) {\n            chrono \u003d chronos.get(i);\n            if (minDaysInFirstWeek \u003d\u003d chrono.getMinimumDaysInFirstWeek() \u0026\u0026 cutoverInstant.equals(chrono.getGregorianCutover())) {\n                return chrono;\n            }\n        }\n    }\n    if (zone \u003d\u003d DateTimeZone.UTC) {\n        chrono \u003d new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);\n    } else {\n        chrono \u003d getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);\n        chrono \u003d new GJChronology(ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);\n    }\n    chronos.add(chrono);\n    return chrono;\n}",
      "path": "JodaTime/src/main/java/org/joda/time/chrono/GJChronology.java",
      "functionStartLine": 184,
      "functionName": "getInstance",
      "functionAnnotation": "",
      "functionDoc": "Factory method returns instances of the GJ cutover chronology. Any\ncutover date may be specified.\n\n@param zone the time zone to use, null is default\n@param gregorianCutover the cutover to use, null means default\n@param minDaysInFirstWeek minimum number of days in first week of the year; default is 4\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/java/org/joda/time/chrono/GJChronology.java",
        "newPath": "JodaTime/src/main/java/org/joda/time/chrono/GJChronology.java"
      }
    },
    "3f1e047c898c9c925e1faac33bb07e1cb05d88cb": {
      "type": "Ybodychange",
      "commitMessage": "Move to Java 5 with generics\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1406 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "11/4/09, 3:55 PM",
      "commitName": "3f1e047c898c9c925e1faac33bb07e1cb05d88cb",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/12/08, 2:41 PM",
      "commitNameOld": "2490507fb702a44b888984ec0df4e067953b6af2",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 449.09,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "actualSource": "public static synchronized GJChronology getInstance(DateTimeZone zone, ReadableInstant gregorianCutover, int minDaysInFirstWeek) {\n    zone \u003d DateTimeUtils.getZone(zone);\n    Instant cutoverInstant;\n    if (gregorianCutover \u003d\u003d null) {\n        cutoverInstant \u003d DEFAULT_CUTOVER;\n    } else {\n        cutoverInstant \u003d gregorianCutover.toInstant();\n    }\n    GJChronology chrono;\n    ArrayList\u003cGJChronology\u003e chronos \u003d cCache.get(zone);\n    if (chronos \u003d\u003d null) {\n        chronos \u003d new ArrayList\u003cGJChronology\u003e(2);\n        cCache.put(zone, chronos);\n    } else {\n        for (int i \u003d chronos.size(); --i \u003e\u003d 0; ) {\n            chrono \u003d chronos.get(i);\n            if (minDaysInFirstWeek \u003d\u003d chrono.getMinimumDaysInFirstWeek() \u0026\u0026 cutoverInstant.equals(chrono.getGregorianCutover())) {\n                return chrono;\n            }\n        }\n    }\n    if (zone \u003d\u003d DateTimeZone.UTC) {\n        chrono \u003d new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);\n    } else {\n        chrono \u003d getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);\n        chrono \u003d new GJChronology(ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);\n    }\n    chronos.add(chrono);\n    return chrono;\n}",
      "path": "JodaTime/src/java/org/joda/time/chrono/GJChronology.java",
      "functionStartLine": 184,
      "functionName": "getInstance",
      "functionAnnotation": "",
      "functionDoc": "Factory method returns instances of the GJ cutover chronology. Any\ncutover date may be specified.\n\n@param zone the time zone to use, null is default\n@param gregorianCutover the cutover to use, null means default\n@param minDaysInFirstWeek minimum number of days in first week of the year; default is 4\n",
      "diff": "@@ -1,30 +1,30 @@\n public static synchronized GJChronology getInstance(DateTimeZone zone, ReadableInstant gregorianCutover, int minDaysInFirstWeek) {\n     zone \u003d DateTimeUtils.getZone(zone);\n     Instant cutoverInstant;\n     if (gregorianCutover \u003d\u003d null) {\n         cutoverInstant \u003d DEFAULT_CUTOVER;\n     } else {\n         cutoverInstant \u003d gregorianCutover.toInstant();\n     }\n     GJChronology chrono;\n-    ArrayList chronos \u003d (ArrayList) cCache.get(zone);\n+    ArrayList\u003cGJChronology\u003e chronos \u003d cCache.get(zone);\n     if (chronos \u003d\u003d null) {\n-        chronos \u003d new ArrayList(2);\n+        chronos \u003d new ArrayList\u003cGJChronology\u003e(2);\n         cCache.put(zone, chronos);\n     } else {\n         for (int i \u003d chronos.size(); --i \u003e\u003d 0; ) {\n-            chrono \u003d (GJChronology) chronos.get(i);\n+            chrono \u003d chronos.get(i);\n             if (minDaysInFirstWeek \u003d\u003d chrono.getMinimumDaysInFirstWeek() \u0026\u0026 cutoverInstant.equals(chrono.getGregorianCutover())) {\n                 return chrono;\n             }\n         }\n     }\n     if (zone \u003d\u003d DateTimeZone.UTC) {\n         chrono \u003d new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);\n     } else {\n         chrono \u003d getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);\n         chrono \u003d new GJChronology(ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);\n     }\n     chronos.add(chrono);\n     return chrono;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "55ba9b0b65cfa904eb0d499b46ae4cd3c028b7d8": {
      "type": "Ybodychange",
      "commitMessage": "Add basic tests for chronologies\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@435 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/22/04, 9:16 AM",
      "commitName": "55ba9b0b65cfa904eb0d499b46ae4cd3c028b7d8",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/7/04, 6:42 AM",
      "commitNameOld": "c578139c0184963ad7123ee107d7e12ef399de2d",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 15.11,
      "commitsBetweenForRepo": 64,
      "commitsBetweenForFile": 1,
      "actualSource": "public static synchronized GJChronology getInstance(DateTimeZone zone, ReadableInstant gregorianCutover, int minDaysInFirstWeek) {\n    zone \u003d DateTimeUtils.getZone(zone);\n    Instant cutoverInstant;\n    if (gregorianCutover \u003d\u003d null) {\n        cutoverInstant \u003d DEFAULT_CUTOVER;\n    } else {\n        cutoverInstant \u003d gregorianCutover.toInstant();\n    }\n    GJChronology chrono;\n    ArrayList chronos \u003d (ArrayList) cCache.get(zone);\n    if (chronos \u003d\u003d null) {\n        chronos \u003d new ArrayList(2);\n        cCache.put(zone, chronos);\n    } else {\n        for (int i \u003d chronos.size(); --i \u003e\u003d 0; ) {\n            chrono \u003d (GJChronology) chronos.get(i);\n            if (minDaysInFirstWeek \u003d\u003d chrono.getMinimumDaysInFirstWeek() \u0026\u0026 cutoverInstant.equals(chrono.getGregorianCutover())) {\n                return chrono;\n            }\n        }\n    }\n    if (zone \u003d\u003d DateTimeZone.UTC) {\n        chrono \u003d new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);\n    } else {\n        chrono \u003d getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);\n        chrono \u003d new GJChronology(ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);\n    }\n    chronos.add(chrono);\n    return chrono;\n}",
      "path": "JodaTime/src/java/org/joda/time/chrono/GJChronology.java",
      "functionStartLine": 220,
      "functionName": "getInstance",
      "functionAnnotation": "",
      "functionDoc": "Factory method returns instances of the GJ cutover chronology. Any\ncutover date may be specified.\n\n@param zone the time zone to use, null is default\n@param gregorianCutover the cutover to use, null means default\n@param minDaysInFirstWeek minimum number of days in first week of the year; default is 4\n",
      "diff": "@@ -1,32 +1,30 @@\n public static synchronized GJChronology getInstance(DateTimeZone zone, ReadableInstant gregorianCutover, int minDaysInFirstWeek) {\n-    if (zone \u003d\u003d null) {\n-        zone \u003d DateTimeZone.getDefault();\n-    }\n+    zone \u003d DateTimeUtils.getZone(zone);\n     Instant cutoverInstant;\n     if (gregorianCutover \u003d\u003d null) {\n         cutoverInstant \u003d DEFAULT_CUTOVER;\n     } else {\n         cutoverInstant \u003d gregorianCutover.toInstant();\n     }\n     GJChronology chrono;\n     ArrayList chronos \u003d (ArrayList) cCache.get(zone);\n     if (chronos \u003d\u003d null) {\n         chronos \u003d new ArrayList(2);\n         cCache.put(zone, chronos);\n     } else {\n         for (int i \u003d chronos.size(); --i \u003e\u003d 0; ) {\n             chrono \u003d (GJChronology) chronos.get(i);\n             if (minDaysInFirstWeek \u003d\u003d chrono.getMinimumDaysInFirstWeek() \u0026\u0026 cutoverInstant.equals(chrono.getGregorianCutover())) {\n                 return chrono;\n             }\n         }\n     }\n     if (zone \u003d\u003d DateTimeZone.UTC) {\n         chrono \u003d new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);\n     } else {\n         chrono \u003d getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);\n         chrono \u003d new GJChronology(ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);\n     }\n     chronos.add(chrono);\n     return chrono;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6c6142b2ef5f4444cbfe5ef931a28f79a9a9f2c9": {
      "type": "Ybodychange",
      "commitMessage": "Fixed bug which caused getInstance to fail on second identical call.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@134 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "2/6/04, 10:49 PM",
      "commitName": "6c6142b2ef5f4444cbfe5ef931a28f79a9a9f2c9",
      "commitAuthor": "Brian S O\u0027Neill",
      "commitDateOld": "1/31/04, 9:12 AM",
      "commitNameOld": "c448a40c2e2a5c992a60afd3015fe7e0d244c0fb",
      "commitAuthorOld": "Brian S O\u0027Neill",
      "daysBetweenCommits": 6.57,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "public static synchronized GJChronology getInstance(DateTimeZone zone, ReadableInstant gregorianCutover, int minDaysInFirstWeek) {\n    if (zone \u003d\u003d null) {\n        zone \u003d DateTimeZone.getDefault();\n    }\n    Instant cutoverInstant;\n    if (gregorianCutover \u003d\u003d null) {\n        cutoverInstant \u003d DEFAULT_CUTOVER;\n    } else {\n        cutoverInstant \u003d gregorianCutover.toInstant();\n    }\n    GJChronology chrono;\n    ArrayList chronos \u003d (ArrayList) cCache.get(zone);\n    if (chronos \u003d\u003d null) {\n        chronos \u003d new ArrayList(2);\n        cCache.put(zone, chronos);\n    } else {\n        for (int i \u003d chronos.size(); --i \u003e\u003d 0; ) {\n            chrono \u003d (GJChronology) chronos.get(i);\n            if (minDaysInFirstWeek \u003d\u003d chrono.getMinimumDaysInFirstWeek() \u0026\u0026 cutoverInstant.equals(chrono.getGregorianCutover())) {\n                return chrono;\n            }\n        }\n    }\n    if (zone \u003d\u003d DateTimeZone.UTC) {\n        chrono \u003d new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);\n    } else {\n        chrono \u003d getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);\n        chrono \u003d new GJChronology(ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);\n    }\n    chronos.add(chrono);\n    return chrono;\n}",
      "path": "JodaTime/src/java/org/joda/time/chrono/GJChronology.java",
      "functionStartLine": 218,
      "functionName": "getInstance",
      "functionAnnotation": "",
      "functionDoc": "Factory method returns instances of the GJ cutover chronology. Any\ncutover date may be specified.\n\n@param zone the time zone to use, null is default\n@param gregorianCutover the cutover to use, null means default\n@param minDaysInFirstWeek minimum number of days in first week of the year; default is 4\n",
      "diff": "@@ -1,32 +1,32 @@\n public static synchronized GJChronology getInstance(DateTimeZone zone, ReadableInstant gregorianCutover, int minDaysInFirstWeek) {\n     if (zone \u003d\u003d null) {\n         zone \u003d DateTimeZone.getDefault();\n     }\n     Instant cutoverInstant;\n     if (gregorianCutover \u003d\u003d null) {\n         cutoverInstant \u003d DEFAULT_CUTOVER;\n     } else {\n         cutoverInstant \u003d gregorianCutover.toInstant();\n     }\n     GJChronology chrono;\n     ArrayList chronos \u003d (ArrayList) cCache.get(zone);\n     if (chronos \u003d\u003d null) {\n         chronos \u003d new ArrayList(2);\n         cCache.put(zone, chronos);\n     } else {\n         for (int i \u003d chronos.size(); --i \u003e\u003d 0; ) {\n             chrono \u003d (GJChronology) chronos.get(i);\n             if (minDaysInFirstWeek \u003d\u003d chrono.getMinimumDaysInFirstWeek() \u0026\u0026 cutoverInstant.equals(chrono.getGregorianCutover())) {\n                 return chrono;\n             }\n         }\n     }\n     if (zone \u003d\u003d DateTimeZone.UTC) {\n         chrono \u003d new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);\n     } else {\n-        chrono \u003d getInstance(DateTimeZone.UTC, gregorianCutover, minDaysInFirstWeek);\n-        chrono \u003d new GJChronology(ZonedChronology.getInstance(chrono, zone));\n+        chrono \u003d getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);\n+        chrono \u003d new GJChronology(ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);\n     }\n     chronos.add(chrono);\n     return chrono;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7": {
      "type": "Yintroduced",
      "commitMessage": "Re-organized chronology package and created new field package.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@125 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "1/27/04, 11:12 PM",
      "commitName": "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7",
      "commitAuthor": "Brian S O\u0027Neill",
      "diff": "@@ -0,0 +1,32 @@\n+public static synchronized GJChronology getInstance(DateTimeZone zone, ReadableInstant gregorianCutover, int minDaysInFirstWeek) {\n+    if (zone \u003d\u003d null) {\n+        zone \u003d DateTimeZone.getDefault();\n+    }\n+    Instant cutoverInstant;\n+    if (gregorianCutover \u003d\u003d null) {\n+        cutoverInstant \u003d DEFAULT_CUTOVER;\n+    } else {\n+        cutoverInstant \u003d gregorianCutover.toInstant();\n+    }\n+    GJChronology chrono;\n+    ArrayList chronos \u003d (ArrayList) cCache.get(zone);\n+    if (chronos \u003d\u003d null) {\n+        chronos \u003d new ArrayList(2);\n+        cCache.put(zone, chronos);\n+    } else {\n+        for (int i \u003d chronos.size(); --i \u003e\u003d 0; ) {\n+            chrono \u003d (GJChronology) chronos.get(i);\n+            if (minDaysInFirstWeek \u003d\u003d chrono.getMinimumDaysInFirstWeek() \u0026\u0026 cutoverInstant.equals(chrono.getGregorianCutover())) {\n+                return chrono;\n+            }\n+        }\n+    }\n+    if (zone \u003d\u003d DateTimeZone.UTC) {\n+        chrono \u003d new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);\n+    } else {\n+        chrono \u003d getInstance(DateTimeZone.UTC, gregorianCutover, minDaysInFirstWeek);\n+        chrono \u003d new GJChronology(ZonedChronology.getInstance(chrono, zone));\n+    }\n+    chronos.add(chrono);\n+    return chrono;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public static synchronized GJChronology getInstance(DateTimeZone zone, ReadableInstant gregorianCutover, int minDaysInFirstWeek) {\n    if (zone \u003d\u003d null) {\n        zone \u003d DateTimeZone.getDefault();\n    }\n    Instant cutoverInstant;\n    if (gregorianCutover \u003d\u003d null) {\n        cutoverInstant \u003d DEFAULT_CUTOVER;\n    } else {\n        cutoverInstant \u003d gregorianCutover.toInstant();\n    }\n    GJChronology chrono;\n    ArrayList chronos \u003d (ArrayList) cCache.get(zone);\n    if (chronos \u003d\u003d null) {\n        chronos \u003d new ArrayList(2);\n        cCache.put(zone, chronos);\n    } else {\n        for (int i \u003d chronos.size(); --i \u003e\u003d 0; ) {\n            chrono \u003d (GJChronology) chronos.get(i);\n            if (minDaysInFirstWeek \u003d\u003d chrono.getMinimumDaysInFirstWeek() \u0026\u0026 cutoverInstant.equals(chrono.getGregorianCutover())) {\n                return chrono;\n            }\n        }\n    }\n    if (zone \u003d\u003d DateTimeZone.UTC) {\n        chrono \u003d new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);\n    } else {\n        chrono \u003d getInstance(DateTimeZone.UTC, gregorianCutover, minDaysInFirstWeek);\n        chrono \u003d new GJChronology(ZonedChronology.getInstance(chrono, zone));\n    }\n    chronos.add(chrono);\n    return chrono;\n}",
      "path": "JodaTime/src/java/org/joda/time/chrono/GJChronology.java",
      "functionStartLine": 218,
      "functionName": "getInstance",
      "functionAnnotation": "",
      "functionDoc": "Factory method returns instances of the GJ cutover chronology. Any\ncutover date may be specified.\n\n@param zone the time zone to use, null is default\n@param gregorianCutover the cutover to use, null means default\n@param minDaysInFirstWeek minimum number of days in first week of the year; default is 4\n"
    }
  }
}