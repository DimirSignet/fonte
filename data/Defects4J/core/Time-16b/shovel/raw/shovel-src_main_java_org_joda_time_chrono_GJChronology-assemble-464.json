{
  "origin": "codeshovel",
  "repositoryName": "Time-16b",
  "repositoryPath": "/tmp/Time-16b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "GJChronology.java",
  "functionName": "assemble",
  "functionId": "assemble___fields-Fields",
  "sourceFilePath": "src/main/java/org/joda/time/chrono/GJChronology.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 464,
  "functionEndLine": 572,
  "numCommitsSeen": 30,
  "timeTaken": 2245,
  "changeHistory": [
    "df4a82f4fb46cc2248280c462e18f08d55a3d112",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1",
    "225ca55301809ebd8869cf4e7bcf11cee2a84c06",
    "284afb67e47546c8cf3194c2b273adaeb27df283",
    "c5a0687412741edbf6e78fb779a24153b8a5d189",
    "6c6142b2ef5f4444cbfe5ef931a28f79a9a9f2c9",
    "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7"
  ],
  "changeHistoryShort": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": "Yfilerename",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": "Yfilerename",
    "225ca55301809ebd8869cf4e7bcf11cee2a84c06": "Ybodychange",
    "284afb67e47546c8cf3194c2b273adaeb27df283": "Ybodychange",
    "c5a0687412741edbf6e78fb779a24153b8a5d189": "Ybodychange",
    "6c6142b2ef5f4444cbfe5ef931a28f79a9a9f2c9": "Ybodychange",
    "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": {
      "type": "Yfilerename",
      "commitMessage": "Remove JodaTime folder moving files to top level\n",
      "commitDate": "5/16/11, 10:02 AM",
      "commitName": "df4a82f4fb46cc2248280c462e18f08d55a3d112",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "5/16/11, 9:58 AM",
      "commitNameOld": "72b22654962284bac59c2777131b42a2d1f53228",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void assemble(Fields fields) {\n    Object[] params \u003d (Object[]) getParam();\n    JulianChronology julian \u003d (JulianChronology) params[0];\n    GregorianChronology gregorian \u003d (GregorianChronology) params[1];\n    Instant cutoverInstant \u003d (Instant) params[2];\n    iCutoverMillis \u003d cutoverInstant.getMillis();\n    iJulianChronology \u003d julian;\n    iGregorianChronology \u003d gregorian;\n    iCutoverInstant \u003d cutoverInstant;\n    if (getBase() !\u003d null) {\n        return;\n    }\n    if (julian.getMinimumDaysInFirstWeek() !\u003d gregorian.getMinimumDaysInFirstWeek()) {\n        throw new IllegalArgumentException();\n    }\n    iGapDuration \u003d iCutoverMillis - julianToGregorianByYear(iCutoverMillis);\n    fields.copyFieldsFrom(gregorian);\n    if (gregorian.millisOfDay().get(iCutoverMillis) \u003d\u003d 0) {\n        fields.millisOfSecond \u003d new CutoverField(julian.millisOfSecond(), fields.millisOfSecond, iCutoverMillis);\n        fields.millisOfDay \u003d new CutoverField(julian.millisOfDay(), fields.millisOfDay, iCutoverMillis);\n        fields.secondOfMinute \u003d new CutoverField(julian.secondOfMinute(), fields.secondOfMinute, iCutoverMillis);\n        fields.secondOfDay \u003d new CutoverField(julian.secondOfDay(), fields.secondOfDay, iCutoverMillis);\n        fields.minuteOfHour \u003d new CutoverField(julian.minuteOfHour(), fields.minuteOfHour, iCutoverMillis);\n        fields.minuteOfDay \u003d new CutoverField(julian.minuteOfDay(), fields.minuteOfDay, iCutoverMillis);\n        fields.hourOfDay \u003d new CutoverField(julian.hourOfDay(), fields.hourOfDay, iCutoverMillis);\n        fields.hourOfHalfday \u003d new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday, iCutoverMillis);\n        fields.clockhourOfDay \u003d new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay, iCutoverMillis);\n        fields.clockhourOfHalfday \u003d new CutoverField(julian.clockhourOfHalfday(), fields.clockhourOfHalfday, iCutoverMillis);\n        fields.halfdayOfDay \u003d new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay, iCutoverMillis);\n    }\n    {\n        fields.era \u003d new CutoverField(julian.era(), fields.era, iCutoverMillis);\n    }\n    {\n        long cutover \u003d gregorian.year().roundCeiling(iCutoverMillis);\n        fields.dayOfYear \u003d new CutoverField(julian.dayOfYear(), fields.dayOfYear, cutover);\n    }\n    {\n        long cutover \u003d gregorian.weekyear().roundCeiling(iCutoverMillis);\n        fields.weekOfWeekyear \u003d new CutoverField(julian.weekOfWeekyear(), fields.weekOfWeekyear, cutover, true);\n    }\n    {\n        fields.year \u003d new ImpreciseCutoverField(julian.year(), fields.year, iCutoverMillis);\n        fields.years \u003d fields.year.getDurationField();\n        fields.yearOfEra \u003d new ImpreciseCutoverField(julian.yearOfEra(), fields.yearOfEra, fields.years, iCutoverMillis);\n        fields.yearOfCentury \u003d new ImpreciseCutoverField(julian.yearOfCentury(), fields.yearOfCentury, fields.years, iCutoverMillis);\n        fields.centuryOfEra \u003d new ImpreciseCutoverField(julian.centuryOfEra(), fields.centuryOfEra, iCutoverMillis);\n        fields.centuries \u003d fields.centuryOfEra.getDurationField();\n        fields.monthOfYear \u003d new ImpreciseCutoverField(julian.monthOfYear(), fields.monthOfYear, iCutoverMillis);\n        fields.months \u003d fields.monthOfYear.getDurationField();\n        fields.weekyear \u003d new ImpreciseCutoverField(julian.weekyear(), fields.weekyear, null, iCutoverMillis, true);\n        fields.weekyearOfCentury \u003d new ImpreciseCutoverField(julian.weekyearOfCentury(), fields.weekyearOfCentury, fields.weekyears, iCutoverMillis);\n        fields.weekyears \u003d fields.weekyear.getDurationField();\n    }\n    {\n        CutoverField cf \u003d new CutoverField(julian.dayOfMonth(), fields.dayOfMonth, iCutoverMillis);\n        cf.iRangeDurationField \u003d fields.months;\n        fields.dayOfMonth \u003d cf;\n    }\n}",
      "path": "src/main/java/org/joda/time/chrono/GJChronology.java",
      "functionStartLine": 451,
      "functionName": "assemble",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/main/java/org/joda/time/chrono/GJChronology.java",
        "newPath": "src/main/java/org/joda/time/chrono/GJChronology.java"
      }
    },
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": {
      "type": "Yfilerename",
      "commitMessage": "Convert to maven 2\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1540 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/8/10, 5:17 PM",
      "commitName": "53feb3fa56af7260e607844524b7e5a9be49ecc1",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/8/10, 5:02 PM",
      "commitNameOld": "7fa2ceaf5d95d050095432aa646ea803aa35e122",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void assemble(Fields fields) {\n    Object[] params \u003d (Object[]) getParam();\n    JulianChronology julian \u003d (JulianChronology) params[0];\n    GregorianChronology gregorian \u003d (GregorianChronology) params[1];\n    Instant cutoverInstant \u003d (Instant) params[2];\n    iCutoverMillis \u003d cutoverInstant.getMillis();\n    iJulianChronology \u003d julian;\n    iGregorianChronology \u003d gregorian;\n    iCutoverInstant \u003d cutoverInstant;\n    if (getBase() !\u003d null) {\n        return;\n    }\n    if (julian.getMinimumDaysInFirstWeek() !\u003d gregorian.getMinimumDaysInFirstWeek()) {\n        throw new IllegalArgumentException();\n    }\n    iGapDuration \u003d iCutoverMillis - julianToGregorianByYear(iCutoverMillis);\n    fields.copyFieldsFrom(gregorian);\n    if (gregorian.millisOfDay().get(iCutoverMillis) \u003d\u003d 0) {\n        fields.millisOfSecond \u003d new CutoverField(julian.millisOfSecond(), fields.millisOfSecond, iCutoverMillis);\n        fields.millisOfDay \u003d new CutoverField(julian.millisOfDay(), fields.millisOfDay, iCutoverMillis);\n        fields.secondOfMinute \u003d new CutoverField(julian.secondOfMinute(), fields.secondOfMinute, iCutoverMillis);\n        fields.secondOfDay \u003d new CutoverField(julian.secondOfDay(), fields.secondOfDay, iCutoverMillis);\n        fields.minuteOfHour \u003d new CutoverField(julian.minuteOfHour(), fields.minuteOfHour, iCutoverMillis);\n        fields.minuteOfDay \u003d new CutoverField(julian.minuteOfDay(), fields.minuteOfDay, iCutoverMillis);\n        fields.hourOfDay \u003d new CutoverField(julian.hourOfDay(), fields.hourOfDay, iCutoverMillis);\n        fields.hourOfHalfday \u003d new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday, iCutoverMillis);\n        fields.clockhourOfDay \u003d new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay, iCutoverMillis);\n        fields.clockhourOfHalfday \u003d new CutoverField(julian.clockhourOfHalfday(), fields.clockhourOfHalfday, iCutoverMillis);\n        fields.halfdayOfDay \u003d new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay, iCutoverMillis);\n    }\n    {\n        fields.era \u003d new CutoverField(julian.era(), fields.era, iCutoverMillis);\n    }\n    {\n        long cutover \u003d gregorian.year().roundCeiling(iCutoverMillis);\n        fields.dayOfYear \u003d new CutoverField(julian.dayOfYear(), fields.dayOfYear, cutover);\n    }\n    {\n        long cutover \u003d gregorian.weekyear().roundCeiling(iCutoverMillis);\n        fields.weekOfWeekyear \u003d new CutoverField(julian.weekOfWeekyear(), fields.weekOfWeekyear, cutover, true);\n    }\n    {\n        fields.year \u003d new ImpreciseCutoverField(julian.year(), fields.year, iCutoverMillis);\n        fields.years \u003d fields.year.getDurationField();\n        fields.yearOfEra \u003d new ImpreciseCutoverField(julian.yearOfEra(), fields.yearOfEra, fields.years, iCutoverMillis);\n        fields.yearOfCentury \u003d new ImpreciseCutoverField(julian.yearOfCentury(), fields.yearOfCentury, fields.years, iCutoverMillis);\n        fields.centuryOfEra \u003d new ImpreciseCutoverField(julian.centuryOfEra(), fields.centuryOfEra, iCutoverMillis);\n        fields.centuries \u003d fields.centuryOfEra.getDurationField();\n        fields.monthOfYear \u003d new ImpreciseCutoverField(julian.monthOfYear(), fields.monthOfYear, iCutoverMillis);\n        fields.months \u003d fields.monthOfYear.getDurationField();\n        fields.weekyear \u003d new ImpreciseCutoverField(julian.weekyear(), fields.weekyear, null, iCutoverMillis, true);\n        fields.weekyearOfCentury \u003d new ImpreciseCutoverField(julian.weekyearOfCentury(), fields.weekyearOfCentury, fields.weekyears, iCutoverMillis);\n        fields.weekyears \u003d fields.weekyear.getDurationField();\n    }\n    {\n        CutoverField cf \u003d new CutoverField(julian.dayOfMonth(), fields.dayOfMonth, iCutoverMillis);\n        cf.iRangeDurationField \u003d fields.months;\n        fields.dayOfMonth \u003d cf;\n    }\n}",
      "path": "JodaTime/src/main/java/org/joda/time/chrono/GJChronology.java",
      "functionStartLine": 451,
      "functionName": "assemble",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/java/org/joda/time/chrono/GJChronology.java",
        "newPath": "JodaTime/src/main/java/org/joda/time/chrono/GJChronology.java"
      }
    },
    "225ca55301809ebd8869cf4e7bcf11cee2a84c06": {
      "type": "Ybodychange",
      "commitMessage": "Range duration field of dayOfMonth was not consistent with monthOfYear. This bug manifested itself when adding/subtracting periods to partials.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@765 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "5/30/05, 11:01 AM",
      "commitName": "225ca55301809ebd8869cf4e7bcf11cee2a84c06",
      "commitAuthor": "Brian S O\u0027Neill",
      "commitDateOld": "2/12/05, 6:39 PM",
      "commitNameOld": "5082337a4152e04ebd8077fd0b7fa28113a4d79e",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 106.64,
      "commitsBetweenForRepo": 77,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void assemble(Fields fields) {\n    Object[] params \u003d (Object[]) getParam();\n    JulianChronology julian \u003d (JulianChronology) params[0];\n    GregorianChronology gregorian \u003d (GregorianChronology) params[1];\n    Instant cutoverInstant \u003d (Instant) params[2];\n    iCutoverMillis \u003d cutoverInstant.getMillis();\n    iJulianChronology \u003d julian;\n    iGregorianChronology \u003d gregorian;\n    iCutoverInstant \u003d cutoverInstant;\n    if (getBase() !\u003d null) {\n        return;\n    }\n    if (julian.getMinimumDaysInFirstWeek() !\u003d gregorian.getMinimumDaysInFirstWeek()) {\n        throw new IllegalArgumentException();\n    }\n    iGapDuration \u003d iCutoverMillis - julianToGregorianByYear(iCutoverMillis);\n    fields.copyFieldsFrom(gregorian);\n    if (gregorian.millisOfDay().get(iCutoverMillis) \u003d\u003d 0) {\n        fields.millisOfSecond \u003d new CutoverField(julian.millisOfSecond(), fields.millisOfSecond, iCutoverMillis);\n        fields.millisOfDay \u003d new CutoverField(julian.millisOfDay(), fields.millisOfDay, iCutoverMillis);\n        fields.secondOfMinute \u003d new CutoverField(julian.secondOfMinute(), fields.secondOfMinute, iCutoverMillis);\n        fields.secondOfDay \u003d new CutoverField(julian.secondOfDay(), fields.secondOfDay, iCutoverMillis);\n        fields.minuteOfHour \u003d new CutoverField(julian.minuteOfHour(), fields.minuteOfHour, iCutoverMillis);\n        fields.minuteOfDay \u003d new CutoverField(julian.minuteOfDay(), fields.minuteOfDay, iCutoverMillis);\n        fields.hourOfDay \u003d new CutoverField(julian.hourOfDay(), fields.hourOfDay, iCutoverMillis);\n        fields.hourOfHalfday \u003d new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday, iCutoverMillis);\n        fields.clockhourOfDay \u003d new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay, iCutoverMillis);\n        fields.clockhourOfHalfday \u003d new CutoverField(julian.clockhourOfHalfday(), fields.clockhourOfHalfday, iCutoverMillis);\n        fields.halfdayOfDay \u003d new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay, iCutoverMillis);\n    }\n    {\n        fields.era \u003d new CutoverField(julian.era(), fields.era, iCutoverMillis);\n    }\n    {\n        long cutover \u003d gregorian.year().roundCeiling(iCutoverMillis);\n        fields.dayOfYear \u003d new CutoverField(julian.dayOfYear(), fields.dayOfYear, cutover);\n    }\n    {\n        long cutover \u003d gregorian.weekyear().roundCeiling(iCutoverMillis);\n        fields.weekOfWeekyear \u003d new CutoverField(julian.weekOfWeekyear(), fields.weekOfWeekyear, cutover, true);\n    }\n    {\n        fields.year \u003d new ImpreciseCutoverField(julian.year(), fields.year, iCutoverMillis);\n        fields.years \u003d fields.year.getDurationField();\n        fields.yearOfEra \u003d new ImpreciseCutoverField(julian.yearOfEra(), fields.yearOfEra, fields.years, iCutoverMillis);\n        fields.yearOfCentury \u003d new ImpreciseCutoverField(julian.yearOfCentury(), fields.yearOfCentury, fields.years, iCutoverMillis);\n        fields.centuryOfEra \u003d new ImpreciseCutoverField(julian.centuryOfEra(), fields.centuryOfEra, iCutoverMillis);\n        fields.centuries \u003d fields.centuryOfEra.getDurationField();\n        fields.monthOfYear \u003d new ImpreciseCutoverField(julian.monthOfYear(), fields.monthOfYear, iCutoverMillis);\n        fields.months \u003d fields.monthOfYear.getDurationField();\n        fields.weekyear \u003d new ImpreciseCutoverField(julian.weekyear(), fields.weekyear, null, iCutoverMillis, true);\n        fields.weekyearOfCentury \u003d new ImpreciseCutoverField(julian.weekyearOfCentury(), fields.weekyearOfCentury, fields.weekyears, iCutoverMillis);\n        fields.weekyears \u003d fields.weekyear.getDurationField();\n    }\n    {\n        CutoverField cf \u003d new CutoverField(julian.dayOfMonth(), fields.dayOfMonth, iCutoverMillis);\n        cf.iRangeDurationField \u003d fields.months;\n        fields.dayOfMonth \u003d cf;\n    }\n}",
      "path": "JodaTime/src/java/org/joda/time/chrono/GJChronology.java",
      "functionStartLine": 427,
      "functionName": "assemble",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,56 +1,60 @@\n protected void assemble(Fields fields) {\n     Object[] params \u003d (Object[]) getParam();\n     JulianChronology julian \u003d (JulianChronology) params[0];\n     GregorianChronology gregorian \u003d (GregorianChronology) params[1];\n     Instant cutoverInstant \u003d (Instant) params[2];\n     iCutoverMillis \u003d cutoverInstant.getMillis();\n     iJulianChronology \u003d julian;\n     iGregorianChronology \u003d gregorian;\n     iCutoverInstant \u003d cutoverInstant;\n     if (getBase() !\u003d null) {\n         return;\n     }\n     if (julian.getMinimumDaysInFirstWeek() !\u003d gregorian.getMinimumDaysInFirstWeek()) {\n         throw new IllegalArgumentException();\n     }\n     iGapDuration \u003d iCutoverMillis - julianToGregorianByYear(iCutoverMillis);\n     fields.copyFieldsFrom(gregorian);\n     if (gregorian.millisOfDay().get(iCutoverMillis) \u003d\u003d 0) {\n         fields.millisOfSecond \u003d new CutoverField(julian.millisOfSecond(), fields.millisOfSecond, iCutoverMillis);\n         fields.millisOfDay \u003d new CutoverField(julian.millisOfDay(), fields.millisOfDay, iCutoverMillis);\n         fields.secondOfMinute \u003d new CutoverField(julian.secondOfMinute(), fields.secondOfMinute, iCutoverMillis);\n         fields.secondOfDay \u003d new CutoverField(julian.secondOfDay(), fields.secondOfDay, iCutoverMillis);\n         fields.minuteOfHour \u003d new CutoverField(julian.minuteOfHour(), fields.minuteOfHour, iCutoverMillis);\n         fields.minuteOfDay \u003d new CutoverField(julian.minuteOfDay(), fields.minuteOfDay, iCutoverMillis);\n         fields.hourOfDay \u003d new CutoverField(julian.hourOfDay(), fields.hourOfDay, iCutoverMillis);\n         fields.hourOfHalfday \u003d new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday, iCutoverMillis);\n         fields.clockhourOfDay \u003d new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay, iCutoverMillis);\n         fields.clockhourOfHalfday \u003d new CutoverField(julian.clockhourOfHalfday(), fields.clockhourOfHalfday, iCutoverMillis);\n         fields.halfdayOfDay \u003d new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay, iCutoverMillis);\n     }\n     {\n         fields.era \u003d new CutoverField(julian.era(), fields.era, iCutoverMillis);\n-        fields.dayOfMonth \u003d new CutoverField(julian.dayOfMonth(), fields.dayOfMonth, iCutoverMillis);\n     }\n     {\n         long cutover \u003d gregorian.year().roundCeiling(iCutoverMillis);\n         fields.dayOfYear \u003d new CutoverField(julian.dayOfYear(), fields.dayOfYear, cutover);\n     }\n     {\n         long cutover \u003d gregorian.weekyear().roundCeiling(iCutoverMillis);\n         fields.weekOfWeekyear \u003d new CutoverField(julian.weekOfWeekyear(), fields.weekOfWeekyear, cutover, true);\n     }\n     {\n         fields.year \u003d new ImpreciseCutoverField(julian.year(), fields.year, iCutoverMillis);\n         fields.years \u003d fields.year.getDurationField();\n         fields.yearOfEra \u003d new ImpreciseCutoverField(julian.yearOfEra(), fields.yearOfEra, fields.years, iCutoverMillis);\n         fields.yearOfCentury \u003d new ImpreciseCutoverField(julian.yearOfCentury(), fields.yearOfCentury, fields.years, iCutoverMillis);\n         fields.centuryOfEra \u003d new ImpreciseCutoverField(julian.centuryOfEra(), fields.centuryOfEra, iCutoverMillis);\n         fields.centuries \u003d fields.centuryOfEra.getDurationField();\n         fields.monthOfYear \u003d new ImpreciseCutoverField(julian.monthOfYear(), fields.monthOfYear, iCutoverMillis);\n         fields.months \u003d fields.monthOfYear.getDurationField();\n         fields.weekyear \u003d new ImpreciseCutoverField(julian.weekyear(), fields.weekyear, null, iCutoverMillis, true);\n         fields.weekyearOfCentury \u003d new ImpreciseCutoverField(julian.weekyearOfCentury(), fields.weekyearOfCentury, fields.weekyears, iCutoverMillis);\n         fields.weekyears \u003d fields.weekyear.getDurationField();\n     }\n+    {\n+        CutoverField cf \u003d new CutoverField(julian.dayOfMonth(), fields.dayOfMonth, iCutoverMillis);\n+        cf.iRangeDurationField \u003d fields.months;\n+        fields.dayOfMonth \u003d cf;\n+    }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "284afb67e47546c8cf3194c2b273adaeb27df283": {
      "type": "Ybodychange",
      "commitMessage": "Make compatible with older JDKs\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@566 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "11/6/04, 4:07 AM",
      "commitName": "284afb67e47546c8cf3194c2b273adaeb27df283",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "10/28/04, 3:56 PM",
      "commitNameOld": "6cad802018b6b82ea4df53aaf91a0bbc98b2f9a3",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 8.55,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void assemble(Fields fields) {\n    Object[] params \u003d (Object[]) getParam();\n    JulianChronology julian \u003d (JulianChronology) params[0];\n    GregorianChronology gregorian \u003d (GregorianChronology) params[1];\n    Instant cutoverInstant \u003d (Instant) params[2];\n    iCutoverMillis \u003d cutoverInstant.getMillis();\n    iJulianChronology \u003d julian;\n    iGregorianChronology \u003d gregorian;\n    iCutoverInstant \u003d cutoverInstant;\n    if (getBase() !\u003d null) {\n        return;\n    }\n    if (julian.getMinimumDaysInFirstWeek() !\u003d gregorian.getMinimumDaysInFirstWeek()) {\n        throw new IllegalArgumentException();\n    }\n    iGapDuration \u003d iCutoverMillis - julianToGregorianByYear(iCutoverMillis);\n    fields.copyFieldsFrom(gregorian);\n    if (gregorian.millisOfDay().get(iCutoverMillis) \u003d\u003d 0) {\n        fields.millisOfSecond \u003d new CutoverField(julian.millisOfSecond(), fields.millisOfSecond, iCutoverMillis);\n        fields.millisOfDay \u003d new CutoverField(julian.millisOfDay(), fields.millisOfDay, iCutoverMillis);\n        fields.secondOfMinute \u003d new CutoverField(julian.secondOfMinute(), fields.secondOfMinute, iCutoverMillis);\n        fields.secondOfDay \u003d new CutoverField(julian.secondOfDay(), fields.secondOfDay, iCutoverMillis);\n        fields.minuteOfHour \u003d new CutoverField(julian.minuteOfHour(), fields.minuteOfHour, iCutoverMillis);\n        fields.minuteOfDay \u003d new CutoverField(julian.minuteOfDay(), fields.minuteOfDay, iCutoverMillis);\n        fields.hourOfDay \u003d new CutoverField(julian.hourOfDay(), fields.hourOfDay, iCutoverMillis);\n        fields.hourOfHalfday \u003d new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday, iCutoverMillis);\n        fields.clockhourOfDay \u003d new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay, iCutoverMillis);\n        fields.clockhourOfHalfday \u003d new CutoverField(julian.clockhourOfHalfday(), fields.clockhourOfHalfday, iCutoverMillis);\n        fields.halfdayOfDay \u003d new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay, iCutoverMillis);\n    }\n    {\n        fields.era \u003d new CutoverField(julian.era(), fields.era, iCutoverMillis);\n        fields.dayOfMonth \u003d new CutoverField(julian.dayOfMonth(), fields.dayOfMonth, iCutoverMillis);\n    }\n    {\n        long cutover \u003d gregorian.year().roundCeiling(iCutoverMillis);\n        fields.dayOfYear \u003d new CutoverField(julian.dayOfYear(), fields.dayOfYear, cutover);\n    }\n    {\n        long cutover \u003d gregorian.weekyear().roundCeiling(iCutoverMillis);\n        fields.weekOfWeekyear \u003d new CutoverField(julian.weekOfWeekyear(), fields.weekOfWeekyear, cutover, true);\n    }\n    {\n        fields.year \u003d new ImpreciseCutoverField(julian.year(), fields.year, iCutoverMillis);\n        fields.years \u003d fields.year.getDurationField();\n        fields.yearOfEra \u003d new ImpreciseCutoverField(julian.yearOfEra(), fields.yearOfEra, fields.years, iCutoverMillis);\n        fields.yearOfCentury \u003d new ImpreciseCutoverField(julian.yearOfCentury(), fields.yearOfCentury, fields.years, iCutoverMillis);\n        fields.centuryOfEra \u003d new ImpreciseCutoverField(julian.centuryOfEra(), fields.centuryOfEra, iCutoverMillis);\n        fields.centuries \u003d fields.centuryOfEra.getDurationField();\n        fields.monthOfYear \u003d new ImpreciseCutoverField(julian.monthOfYear(), fields.monthOfYear, iCutoverMillis);\n        fields.months \u003d fields.monthOfYear.getDurationField();\n        fields.weekyear \u003d new ImpreciseCutoverField(julian.weekyear(), fields.weekyear, null, iCutoverMillis, true);\n        fields.weekyearOfCentury \u003d new ImpreciseCutoverField(julian.weekyearOfCentury(), fields.weekyearOfCentury, fields.weekyears, iCutoverMillis);\n        fields.weekyears \u003d fields.weekyear.getDurationField();\n    }\n}",
      "path": "JodaTime/src/java/org/joda/time/chrono/GJChronology.java",
      "functionStartLine": 465,
      "functionName": "assemble",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,56 +1,56 @@\n protected void assemble(Fields fields) {\n     Object[] params \u003d (Object[]) getParam();\n     JulianChronology julian \u003d (JulianChronology) params[0];\n     GregorianChronology gregorian \u003d (GregorianChronology) params[1];\n     Instant cutoverInstant \u003d (Instant) params[2];\n     iCutoverMillis \u003d cutoverInstant.getMillis();\n     iJulianChronology \u003d julian;\n     iGregorianChronology \u003d gregorian;\n     iCutoverInstant \u003d cutoverInstant;\n     if (getBase() !\u003d null) {\n         return;\n     }\n     if (julian.getMinimumDaysInFirstWeek() !\u003d gregorian.getMinimumDaysInFirstWeek()) {\n         throw new IllegalArgumentException();\n     }\n     iGapDuration \u003d iCutoverMillis - julianToGregorianByYear(iCutoverMillis);\n     fields.copyFieldsFrom(gregorian);\n     if (gregorian.millisOfDay().get(iCutoverMillis) \u003d\u003d 0) {\n-        fields.millisOfSecond \u003d new CutoverField(julian.millisOfSecond(), fields.millisOfSecond);\n-        fields.millisOfDay \u003d new CutoverField(julian.millisOfDay(), fields.millisOfDay);\n-        fields.secondOfMinute \u003d new CutoverField(julian.secondOfMinute(), fields.secondOfMinute);\n-        fields.secondOfDay \u003d new CutoverField(julian.secondOfDay(), fields.secondOfDay);\n-        fields.minuteOfHour \u003d new CutoverField(julian.minuteOfHour(), fields.minuteOfHour);\n-        fields.minuteOfDay \u003d new CutoverField(julian.minuteOfDay(), fields.minuteOfDay);\n-        fields.hourOfDay \u003d new CutoverField(julian.hourOfDay(), fields.hourOfDay);\n-        fields.hourOfHalfday \u003d new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday);\n-        fields.clockhourOfDay \u003d new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay);\n-        fields.clockhourOfHalfday \u003d new CutoverField(julian.clockhourOfHalfday(), fields.clockhourOfHalfday);\n-        fields.halfdayOfDay \u003d new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay);\n+        fields.millisOfSecond \u003d new CutoverField(julian.millisOfSecond(), fields.millisOfSecond, iCutoverMillis);\n+        fields.millisOfDay \u003d new CutoverField(julian.millisOfDay(), fields.millisOfDay, iCutoverMillis);\n+        fields.secondOfMinute \u003d new CutoverField(julian.secondOfMinute(), fields.secondOfMinute, iCutoverMillis);\n+        fields.secondOfDay \u003d new CutoverField(julian.secondOfDay(), fields.secondOfDay, iCutoverMillis);\n+        fields.minuteOfHour \u003d new CutoverField(julian.minuteOfHour(), fields.minuteOfHour, iCutoverMillis);\n+        fields.minuteOfDay \u003d new CutoverField(julian.minuteOfDay(), fields.minuteOfDay, iCutoverMillis);\n+        fields.hourOfDay \u003d new CutoverField(julian.hourOfDay(), fields.hourOfDay, iCutoverMillis);\n+        fields.hourOfHalfday \u003d new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday, iCutoverMillis);\n+        fields.clockhourOfDay \u003d new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay, iCutoverMillis);\n+        fields.clockhourOfHalfday \u003d new CutoverField(julian.clockhourOfHalfday(), fields.clockhourOfHalfday, iCutoverMillis);\n+        fields.halfdayOfDay \u003d new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay, iCutoverMillis);\n     }\n     {\n-        fields.era \u003d new CutoverField(julian.era(), fields.era);\n-        fields.dayOfMonth \u003d new CutoverField(julian.dayOfMonth(), fields.dayOfMonth);\n+        fields.era \u003d new CutoverField(julian.era(), fields.era, iCutoverMillis);\n+        fields.dayOfMonth \u003d new CutoverField(julian.dayOfMonth(), fields.dayOfMonth, iCutoverMillis);\n     }\n     {\n         long cutover \u003d gregorian.year().roundCeiling(iCutoverMillis);\n         fields.dayOfYear \u003d new CutoverField(julian.dayOfYear(), fields.dayOfYear, cutover);\n     }\n     {\n         long cutover \u003d gregorian.weekyear().roundCeiling(iCutoverMillis);\n         fields.weekOfWeekyear \u003d new CutoverField(julian.weekOfWeekyear(), fields.weekOfWeekyear, cutover, true);\n     }\n     {\n-        fields.year \u003d new ImpreciseCutoverField(julian.year(), fields.year);\n+        fields.year \u003d new ImpreciseCutoverField(julian.year(), fields.year, iCutoverMillis);\n         fields.years \u003d fields.year.getDurationField();\n-        fields.yearOfEra \u003d new ImpreciseCutoverField(julian.yearOfEra(), fields.yearOfEra, fields.years);\n-        fields.yearOfCentury \u003d new ImpreciseCutoverField(julian.yearOfCentury(), fields.yearOfCentury, fields.years);\n-        fields.centuryOfEra \u003d new ImpreciseCutoverField(julian.centuryOfEra(), fields.centuryOfEra);\n+        fields.yearOfEra \u003d new ImpreciseCutoverField(julian.yearOfEra(), fields.yearOfEra, fields.years, iCutoverMillis);\n+        fields.yearOfCentury \u003d new ImpreciseCutoverField(julian.yearOfCentury(), fields.yearOfCentury, fields.years, iCutoverMillis);\n+        fields.centuryOfEra \u003d new ImpreciseCutoverField(julian.centuryOfEra(), fields.centuryOfEra, iCutoverMillis);\n         fields.centuries \u003d fields.centuryOfEra.getDurationField();\n-        fields.monthOfYear \u003d new ImpreciseCutoverField(julian.monthOfYear(), fields.monthOfYear);\n+        fields.monthOfYear \u003d new ImpreciseCutoverField(julian.monthOfYear(), fields.monthOfYear, iCutoverMillis);\n         fields.months \u003d fields.monthOfYear.getDurationField();\n-        fields.weekyear \u003d new ImpreciseCutoverField(julian.weekyear(), fields.weekyear, true);\n-        fields.weekyearOfCentury \u003d new ImpreciseCutoverField(julian.weekyearOfCentury(), fields.weekyearOfCentury, fields.weekyears);\n+        fields.weekyear \u003d new ImpreciseCutoverField(julian.weekyear(), fields.weekyear, null, iCutoverMillis, true);\n+        fields.weekyearOfCentury \u003d new ImpreciseCutoverField(julian.weekyearOfCentury(), fields.weekyearOfCentury, fields.weekyears, iCutoverMillis);\n         fields.weekyears \u003d fields.weekyear.getDurationField();\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c5a0687412741edbf6e78fb779a24153b8a5d189": {
      "type": "Ybodychange",
      "commitMessage": "Add halfdays and weekyearOfCentury fields\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@471 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "9/3/04, 1:48 PM",
      "commitName": "c5a0687412741edbf6e78fb779a24153b8a5d189",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "9/2/04, 3:47 PM",
      "commitNameOld": "0d18055d0b3c2e687197a8651b3a06e097fe5c48",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.92,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void assemble(Fields fields) {\n    Object[] params \u003d (Object[]) getParam();\n    JulianChronology julian \u003d (JulianChronology) params[0];\n    GregorianChronology gregorian \u003d (GregorianChronology) params[1];\n    Instant cutoverInstant \u003d (Instant) params[2];\n    iCutoverMillis \u003d cutoverInstant.getMillis();\n    iJulianChronology \u003d julian;\n    iGregorianChronology \u003d gregorian;\n    iCutoverInstant \u003d cutoverInstant;\n    if (getBase() !\u003d null) {\n        return;\n    }\n    if (julian.getMinimumDaysInFirstWeek() !\u003d gregorian.getMinimumDaysInFirstWeek()) {\n        throw new IllegalArgumentException();\n    }\n    iGapDuration \u003d iCutoverMillis - julianToGregorianByYear(iCutoverMillis);\n    fields.copyFieldsFrom(gregorian);\n    if (gregorian.millisOfDay().get(iCutoverMillis) \u003d\u003d 0) {\n        fields.millisOfSecond \u003d new CutoverField(julian.millisOfSecond(), fields.millisOfSecond);\n        fields.millisOfDay \u003d new CutoverField(julian.millisOfDay(), fields.millisOfDay);\n        fields.secondOfMinute \u003d new CutoverField(julian.secondOfMinute(), fields.secondOfMinute);\n        fields.secondOfDay \u003d new CutoverField(julian.secondOfDay(), fields.secondOfDay);\n        fields.minuteOfHour \u003d new CutoverField(julian.minuteOfHour(), fields.minuteOfHour);\n        fields.minuteOfDay \u003d new CutoverField(julian.minuteOfDay(), fields.minuteOfDay);\n        fields.hourOfDay \u003d new CutoverField(julian.hourOfDay(), fields.hourOfDay);\n        fields.hourOfHalfday \u003d new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday);\n        fields.clockhourOfDay \u003d new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay);\n        fields.clockhourOfHalfday \u003d new CutoverField(julian.clockhourOfHalfday(), fields.clockhourOfHalfday);\n        fields.halfdayOfDay \u003d new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay);\n    }\n    {\n        fields.era \u003d new CutoverField(julian.era(), fields.era);\n        fields.dayOfMonth \u003d new CutoverField(julian.dayOfMonth(), fields.dayOfMonth);\n    }\n    {\n        long cutover \u003d gregorian.year().roundCeiling(iCutoverMillis);\n        fields.dayOfYear \u003d new CutoverField(julian.dayOfYear(), fields.dayOfYear, cutover);\n    }\n    {\n        long cutover \u003d gregorian.weekyear().roundCeiling(iCutoverMillis);\n        fields.weekOfWeekyear \u003d new CutoverField(julian.weekOfWeekyear(), fields.weekOfWeekyear, cutover, true);\n    }\n    {\n        fields.year \u003d new ImpreciseCutoverField(julian.year(), fields.year);\n        fields.years \u003d fields.year.getDurationField();\n        fields.yearOfEra \u003d new ImpreciseCutoverField(julian.yearOfEra(), fields.yearOfEra, fields.years);\n        fields.yearOfCentury \u003d new ImpreciseCutoverField(julian.yearOfCentury(), fields.yearOfCentury, fields.years);\n        fields.centuryOfEra \u003d new ImpreciseCutoverField(julian.centuryOfEra(), fields.centuryOfEra);\n        fields.centuries \u003d fields.centuryOfEra.getDurationField();\n        fields.monthOfYear \u003d new ImpreciseCutoverField(julian.monthOfYear(), fields.monthOfYear);\n        fields.months \u003d fields.monthOfYear.getDurationField();\n        fields.weekyear \u003d new ImpreciseCutoverField(julian.weekyear(), fields.weekyear, true);\n        fields.weekyearOfCentury \u003d new ImpreciseCutoverField(julian.weekyearOfCentury(), fields.weekyearOfCentury, fields.weekyears);\n        fields.weekyears \u003d fields.weekyear.getDurationField();\n    }\n}",
      "path": "JodaTime/src/java/org/joda/time/chrono/GJChronology.java",
      "functionStartLine": 466,
      "functionName": "assemble",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,55 +1,56 @@\n protected void assemble(Fields fields) {\n     Object[] params \u003d (Object[]) getParam();\n     JulianChronology julian \u003d (JulianChronology) params[0];\n     GregorianChronology gregorian \u003d (GregorianChronology) params[1];\n     Instant cutoverInstant \u003d (Instant) params[2];\n     iCutoverMillis \u003d cutoverInstant.getMillis();\n     iJulianChronology \u003d julian;\n     iGregorianChronology \u003d gregorian;\n     iCutoverInstant \u003d cutoverInstant;\n     if (getBase() !\u003d null) {\n         return;\n     }\n     if (julian.getMinimumDaysInFirstWeek() !\u003d gregorian.getMinimumDaysInFirstWeek()) {\n         throw new IllegalArgumentException();\n     }\n     iGapDuration \u003d iCutoverMillis - julianToGregorianByYear(iCutoverMillis);\n     fields.copyFieldsFrom(gregorian);\n     if (gregorian.millisOfDay().get(iCutoverMillis) \u003d\u003d 0) {\n         fields.millisOfSecond \u003d new CutoverField(julian.millisOfSecond(), fields.millisOfSecond);\n         fields.millisOfDay \u003d new CutoverField(julian.millisOfDay(), fields.millisOfDay);\n         fields.secondOfMinute \u003d new CutoverField(julian.secondOfMinute(), fields.secondOfMinute);\n         fields.secondOfDay \u003d new CutoverField(julian.secondOfDay(), fields.secondOfDay);\n         fields.minuteOfHour \u003d new CutoverField(julian.minuteOfHour(), fields.minuteOfHour);\n         fields.minuteOfDay \u003d new CutoverField(julian.minuteOfDay(), fields.minuteOfDay);\n         fields.hourOfDay \u003d new CutoverField(julian.hourOfDay(), fields.hourOfDay);\n         fields.hourOfHalfday \u003d new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday);\n         fields.clockhourOfDay \u003d new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay);\n         fields.clockhourOfHalfday \u003d new CutoverField(julian.clockhourOfHalfday(), fields.clockhourOfHalfday);\n         fields.halfdayOfDay \u003d new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay);\n     }\n     {\n         fields.era \u003d new CutoverField(julian.era(), fields.era);\n         fields.dayOfMonth \u003d new CutoverField(julian.dayOfMonth(), fields.dayOfMonth);\n     }\n     {\n         long cutover \u003d gregorian.year().roundCeiling(iCutoverMillis);\n         fields.dayOfYear \u003d new CutoverField(julian.dayOfYear(), fields.dayOfYear, cutover);\n     }\n     {\n         long cutover \u003d gregorian.weekyear().roundCeiling(iCutoverMillis);\n         fields.weekOfWeekyear \u003d new CutoverField(julian.weekOfWeekyear(), fields.weekOfWeekyear, cutover, true);\n     }\n     {\n         fields.year \u003d new ImpreciseCutoverField(julian.year(), fields.year);\n         fields.years \u003d fields.year.getDurationField();\n         fields.yearOfEra \u003d new ImpreciseCutoverField(julian.yearOfEra(), fields.yearOfEra, fields.years);\n         fields.yearOfCentury \u003d new ImpreciseCutoverField(julian.yearOfCentury(), fields.yearOfCentury, fields.years);\n         fields.centuryOfEra \u003d new ImpreciseCutoverField(julian.centuryOfEra(), fields.centuryOfEra);\n         fields.centuries \u003d fields.centuryOfEra.getDurationField();\n         fields.monthOfYear \u003d new ImpreciseCutoverField(julian.monthOfYear(), fields.monthOfYear);\n         fields.months \u003d fields.monthOfYear.getDurationField();\n         fields.weekyear \u003d new ImpreciseCutoverField(julian.weekyear(), fields.weekyear, true);\n+        fields.weekyearOfCentury \u003d new ImpreciseCutoverField(julian.weekyearOfCentury(), fields.weekyearOfCentury, fields.weekyears);\n         fields.weekyears \u003d fields.weekyear.getDurationField();\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6c6142b2ef5f4444cbfe5ef931a28f79a9a9f2c9": {
      "type": "Ybodychange",
      "commitMessage": "Fixed bug which caused getInstance to fail on second identical call.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@134 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "2/6/04, 10:49 PM",
      "commitName": "6c6142b2ef5f4444cbfe5ef931a28f79a9a9f2c9",
      "commitAuthor": "Brian S O\u0027Neill",
      "commitDateOld": "1/31/04, 9:12 AM",
      "commitNameOld": "c448a40c2e2a5c992a60afd3015fe7e0d244c0fb",
      "commitAuthorOld": "Brian S O\u0027Neill",
      "daysBetweenCommits": 6.57,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void assemble(Fields fields) {\n    Object[] params \u003d (Object[]) getParam();\n    JulianChronology julian \u003d (JulianChronology) params[0];\n    GregorianChronology gregorian \u003d (GregorianChronology) params[1];\n    Instant cutoverInstant \u003d (Instant) params[2];\n    iCutoverMillis \u003d cutoverInstant.getMillis();\n    iJulianChronology \u003d julian;\n    iGregorianChronology \u003d gregorian;\n    iCutoverInstant \u003d cutoverInstant;\n    if (getBase() !\u003d null) {\n        return;\n    }\n    if (julian.getMinimumDaysInFirstWeek() !\u003d gregorian.getMinimumDaysInFirstWeek()) {\n        throw new IllegalArgumentException();\n    }\n    iGapDuration \u003d iCutoverMillis - julianToGregorianByYear(iCutoverMillis);\n    fields.copyFieldsFrom(gregorian);\n    if (gregorian.millisOfDay().get(iCutoverMillis) \u003d\u003d 0) {\n        fields.millisOfSecond \u003d new CutoverField(julian.millisOfSecond(), fields.millisOfSecond);\n        fields.millisOfDay \u003d new CutoverField(julian.millisOfDay(), fields.millisOfDay);\n        fields.secondOfMinute \u003d new CutoverField(julian.secondOfMinute(), fields.secondOfMinute);\n        fields.secondOfDay \u003d new CutoverField(julian.secondOfDay(), fields.secondOfDay);\n        fields.minuteOfHour \u003d new CutoverField(julian.minuteOfHour(), fields.minuteOfHour);\n        fields.minuteOfDay \u003d new CutoverField(julian.minuteOfDay(), fields.minuteOfDay);\n        fields.hourOfDay \u003d new CutoverField(julian.hourOfDay(), fields.hourOfDay);\n        fields.hourOfHalfday \u003d new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday);\n        fields.clockhourOfDay \u003d new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay);\n        fields.clockhourOfHalfday \u003d new CutoverField(julian.clockhourOfHalfday(), fields.clockhourOfHalfday);\n        fields.halfdayOfDay \u003d new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay);\n    }\n    {\n        fields.era \u003d new CutoverField(julian.era(), fields.era);\n        fields.dayOfMonth \u003d new CutoverField(julian.dayOfMonth(), fields.dayOfMonth);\n    }\n    {\n        long cutover \u003d gregorian.year().roundCeiling(iCutoverMillis);\n        fields.dayOfYear \u003d new CutoverField(julian.dayOfYear(), fields.dayOfYear, cutover);\n    }\n    {\n        long cutover \u003d gregorian.weekyear().roundCeiling(iCutoverMillis);\n        fields.weekOfWeekyear \u003d new CutoverField(julian.weekOfWeekyear(), fields.weekOfWeekyear, cutover, true);\n    }\n    {\n        fields.year \u003d new ImpreciseCutoverField(julian.year(), fields.year);\n        fields.years \u003d fields.year.getDurationField();\n        fields.yearOfEra \u003d new ImpreciseCutoverField(julian.yearOfEra(), fields.yearOfEra, fields.years);\n        fields.yearOfCentury \u003d new ImpreciseCutoverField(julian.yearOfCentury(), fields.yearOfCentury, fields.years);\n        fields.centuryOfEra \u003d new ImpreciseCutoverField(julian.centuryOfEra(), fields.centuryOfEra);\n        fields.centuries \u003d fields.centuryOfEra.getDurationField();\n        fields.monthOfYear \u003d new ImpreciseCutoverField(julian.monthOfYear(), fields.monthOfYear);\n        fields.months \u003d fields.monthOfYear.getDurationField();\n        fields.weekyear \u003d new ImpreciseCutoverField(julian.weekyear(), fields.weekyear, true);\n        fields.weekyears \u003d fields.weekyear.getDurationField();\n    }\n}",
      "path": "JodaTime/src/java/org/joda/time/chrono/GJChronology.java",
      "functionStartLine": 482,
      "functionName": "assemble",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,55 +1,55 @@\n protected void assemble(Fields fields) {\n-    if (getBase() !\u003d null) {\n-        return;\n-    }\n     Object[] params \u003d (Object[]) getParam();\n     JulianChronology julian \u003d (JulianChronology) params[0];\n     GregorianChronology gregorian \u003d (GregorianChronology) params[1];\n     Instant cutoverInstant \u003d (Instant) params[2];\n     iCutoverMillis \u003d cutoverInstant.getMillis();\n-    if (julian.getMinimumDaysInFirstWeek() !\u003d gregorian.getMinimumDaysInFirstWeek()) {\n-        throw new IllegalArgumentException();\n-    }\n     iJulianChronology \u003d julian;\n     iGregorianChronology \u003d gregorian;\n     iCutoverInstant \u003d cutoverInstant;\n+    if (getBase() !\u003d null) {\n+        return;\n+    }\n+    if (julian.getMinimumDaysInFirstWeek() !\u003d gregorian.getMinimumDaysInFirstWeek()) {\n+        throw new IllegalArgumentException();\n+    }\n     iGapDuration \u003d iCutoverMillis - julianToGregorianByYear(iCutoverMillis);\n     fields.copyFieldsFrom(gregorian);\n     if (gregorian.millisOfDay().get(iCutoverMillis) \u003d\u003d 0) {\n         fields.millisOfSecond \u003d new CutoverField(julian.millisOfSecond(), fields.millisOfSecond);\n         fields.millisOfDay \u003d new CutoverField(julian.millisOfDay(), fields.millisOfDay);\n         fields.secondOfMinute \u003d new CutoverField(julian.secondOfMinute(), fields.secondOfMinute);\n         fields.secondOfDay \u003d new CutoverField(julian.secondOfDay(), fields.secondOfDay);\n         fields.minuteOfHour \u003d new CutoverField(julian.minuteOfHour(), fields.minuteOfHour);\n         fields.minuteOfDay \u003d new CutoverField(julian.minuteOfDay(), fields.minuteOfDay);\n         fields.hourOfDay \u003d new CutoverField(julian.hourOfDay(), fields.hourOfDay);\n         fields.hourOfHalfday \u003d new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday);\n         fields.clockhourOfDay \u003d new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay);\n         fields.clockhourOfHalfday \u003d new CutoverField(julian.clockhourOfHalfday(), fields.clockhourOfHalfday);\n         fields.halfdayOfDay \u003d new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay);\n     }\n     {\n         fields.era \u003d new CutoverField(julian.era(), fields.era);\n         fields.dayOfMonth \u003d new CutoverField(julian.dayOfMonth(), fields.dayOfMonth);\n     }\n     {\n         long cutover \u003d gregorian.year().roundCeiling(iCutoverMillis);\n         fields.dayOfYear \u003d new CutoverField(julian.dayOfYear(), fields.dayOfYear, cutover);\n     }\n     {\n         long cutover \u003d gregorian.weekyear().roundCeiling(iCutoverMillis);\n         fields.weekOfWeekyear \u003d new CutoverField(julian.weekOfWeekyear(), fields.weekOfWeekyear, cutover, true);\n     }\n     {\n         fields.year \u003d new ImpreciseCutoverField(julian.year(), fields.year);\n         fields.years \u003d fields.year.getDurationField();\n         fields.yearOfEra \u003d new ImpreciseCutoverField(julian.yearOfEra(), fields.yearOfEra, fields.years);\n         fields.yearOfCentury \u003d new ImpreciseCutoverField(julian.yearOfCentury(), fields.yearOfCentury, fields.years);\n         fields.centuryOfEra \u003d new ImpreciseCutoverField(julian.centuryOfEra(), fields.centuryOfEra);\n         fields.centuries \u003d fields.centuryOfEra.getDurationField();\n         fields.monthOfYear \u003d new ImpreciseCutoverField(julian.monthOfYear(), fields.monthOfYear);\n         fields.months \u003d fields.monthOfYear.getDurationField();\n         fields.weekyear \u003d new ImpreciseCutoverField(julian.weekyear(), fields.weekyear, true);\n         fields.weekyears \u003d fields.weekyear.getDurationField();\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7": {
      "type": "Yintroduced",
      "commitMessage": "Re-organized chronology package and created new field package.\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@125 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "1/27/04, 11:12 PM",
      "commitName": "14dcaf0e3931855913d79d0fbe8d1e6f1421b7a7",
      "commitAuthor": "Brian S O\u0027Neill",
      "diff": "@@ -0,0 +1,55 @@\n+protected void assemble(Fields fields) {\n+    if (getBase() !\u003d null) {\n+        return;\n+    }\n+    Object[] params \u003d (Object[]) getParam();\n+    JulianChronology julian \u003d (JulianChronology) params[0];\n+    GregorianChronology gregorian \u003d (GregorianChronology) params[1];\n+    Instant cutoverInstant \u003d (Instant) params[2];\n+    iCutoverMillis \u003d cutoverInstant.getMillis();\n+    if (julian.getMinimumDaysInFirstWeek() !\u003d gregorian.getMinimumDaysInFirstWeek()) {\n+        throw new IllegalArgumentException();\n+    }\n+    iJulianChronology \u003d julian;\n+    iGregorianChronology \u003d gregorian;\n+    iCutoverInstant \u003d cutoverInstant;\n+    iGapDuration \u003d iCutoverMillis - julianToGregorianByYear(iCutoverMillis);\n+    fields.copyFieldsFrom(gregorian);\n+    if (gregorian.millisOfDay().get(iCutoverMillis) \u003d\u003d 0) {\n+        fields.millisOfSecond \u003d new CutoverField(julian.millisOfSecond(), fields.millisOfSecond);\n+        fields.millisOfDay \u003d new CutoverField(julian.millisOfDay(), fields.millisOfDay);\n+        fields.secondOfMinute \u003d new CutoverField(julian.secondOfMinute(), fields.secondOfMinute);\n+        fields.secondOfDay \u003d new CutoverField(julian.secondOfDay(), fields.secondOfDay);\n+        fields.minuteOfHour \u003d new CutoverField(julian.minuteOfHour(), fields.minuteOfHour);\n+        fields.minuteOfDay \u003d new CutoverField(julian.minuteOfDay(), fields.minuteOfDay);\n+        fields.hourOfDay \u003d new CutoverField(julian.hourOfDay(), fields.hourOfDay);\n+        fields.hourOfHalfday \u003d new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday);\n+        fields.clockhourOfDay \u003d new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay);\n+        fields.clockhourOfHalfday \u003d new CutoverField(julian.clockhourOfHalfday(), fields.clockhourOfHalfday);\n+        fields.halfdayOfDay \u003d new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay);\n+    }\n+    {\n+        fields.era \u003d new CutoverField(julian.era(), fields.era);\n+        fields.dayOfMonth \u003d new CutoverField(julian.dayOfMonth(), fields.dayOfMonth);\n+    }\n+    {\n+        long cutover \u003d gregorian.year().roundCeiling(iCutoverMillis);\n+        fields.dayOfYear \u003d new CutoverField(julian.dayOfYear(), fields.dayOfYear, cutover);\n+    }\n+    {\n+        long cutover \u003d gregorian.weekyear().roundCeiling(iCutoverMillis);\n+        fields.weekOfWeekyear \u003d new CutoverField(julian.weekOfWeekyear(), fields.weekOfWeekyear, cutover, true);\n+    }\n+    {\n+        fields.year \u003d new ImpreciseCutoverField(julian.year(), fields.year);\n+        fields.years \u003d fields.year.getDurationField();\n+        fields.yearOfEra \u003d new ImpreciseCutoverField(julian.yearOfEra(), fields.yearOfEra, fields.years);\n+        fields.yearOfCentury \u003d new ImpreciseCutoverField(julian.yearOfCentury(), fields.yearOfCentury, fields.years);\n+        fields.centuryOfEra \u003d new ImpreciseCutoverField(julian.centuryOfEra(), fields.centuryOfEra);\n+        fields.centuries \u003d fields.centuryOfEra.getDurationField();\n+        fields.monthOfYear \u003d new ImpreciseCutoverField(julian.monthOfYear(), fields.monthOfYear);\n+        fields.months \u003d fields.monthOfYear.getDurationField();\n+        fields.weekyear \u003d new ImpreciseCutoverField(julian.weekyear(), fields.weekyear, true);\n+        fields.weekyears \u003d fields.weekyear.getDurationField();\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected void assemble(Fields fields) {\n    if (getBase() !\u003d null) {\n        return;\n    }\n    Object[] params \u003d (Object[]) getParam();\n    JulianChronology julian \u003d (JulianChronology) params[0];\n    GregorianChronology gregorian \u003d (GregorianChronology) params[1];\n    Instant cutoverInstant \u003d (Instant) params[2];\n    iCutoverMillis \u003d cutoverInstant.getMillis();\n    if (julian.getMinimumDaysInFirstWeek() !\u003d gregorian.getMinimumDaysInFirstWeek()) {\n        throw new IllegalArgumentException();\n    }\n    iJulianChronology \u003d julian;\n    iGregorianChronology \u003d gregorian;\n    iCutoverInstant \u003d cutoverInstant;\n    iGapDuration \u003d iCutoverMillis - julianToGregorianByYear(iCutoverMillis);\n    fields.copyFieldsFrom(gregorian);\n    if (gregorian.millisOfDay().get(iCutoverMillis) \u003d\u003d 0) {\n        fields.millisOfSecond \u003d new CutoverField(julian.millisOfSecond(), fields.millisOfSecond);\n        fields.millisOfDay \u003d new CutoverField(julian.millisOfDay(), fields.millisOfDay);\n        fields.secondOfMinute \u003d new CutoverField(julian.secondOfMinute(), fields.secondOfMinute);\n        fields.secondOfDay \u003d new CutoverField(julian.secondOfDay(), fields.secondOfDay);\n        fields.minuteOfHour \u003d new CutoverField(julian.minuteOfHour(), fields.minuteOfHour);\n        fields.minuteOfDay \u003d new CutoverField(julian.minuteOfDay(), fields.minuteOfDay);\n        fields.hourOfDay \u003d new CutoverField(julian.hourOfDay(), fields.hourOfDay);\n        fields.hourOfHalfday \u003d new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday);\n        fields.clockhourOfDay \u003d new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay);\n        fields.clockhourOfHalfday \u003d new CutoverField(julian.clockhourOfHalfday(), fields.clockhourOfHalfday);\n        fields.halfdayOfDay \u003d new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay);\n    }\n    {\n        fields.era \u003d new CutoverField(julian.era(), fields.era);\n        fields.dayOfMonth \u003d new CutoverField(julian.dayOfMonth(), fields.dayOfMonth);\n    }\n    {\n        long cutover \u003d gregorian.year().roundCeiling(iCutoverMillis);\n        fields.dayOfYear \u003d new CutoverField(julian.dayOfYear(), fields.dayOfYear, cutover);\n    }\n    {\n        long cutover \u003d gregorian.weekyear().roundCeiling(iCutoverMillis);\n        fields.weekOfWeekyear \u003d new CutoverField(julian.weekOfWeekyear(), fields.weekOfWeekyear, cutover, true);\n    }\n    {\n        fields.year \u003d new ImpreciseCutoverField(julian.year(), fields.year);\n        fields.years \u003d fields.year.getDurationField();\n        fields.yearOfEra \u003d new ImpreciseCutoverField(julian.yearOfEra(), fields.yearOfEra, fields.years);\n        fields.yearOfCentury \u003d new ImpreciseCutoverField(julian.yearOfCentury(), fields.yearOfCentury, fields.years);\n        fields.centuryOfEra \u003d new ImpreciseCutoverField(julian.centuryOfEra(), fields.centuryOfEra);\n        fields.centuries \u003d fields.centuryOfEra.getDurationField();\n        fields.monthOfYear \u003d new ImpreciseCutoverField(julian.monthOfYear(), fields.monthOfYear);\n        fields.months \u003d fields.monthOfYear.getDurationField();\n        fields.weekyear \u003d new ImpreciseCutoverField(julian.weekyear(), fields.weekyear, true);\n        fields.weekyears \u003d fields.weekyear.getDurationField();\n    }\n}",
      "path": "JodaTime/src/java/org/joda/time/chrono/GJChronology.java",
      "functionStartLine": 479,
      "functionName": "assemble",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}