{
  "origin": "codeshovel",
  "repositoryName": "Math-17b",
  "repositoryPath": "/tmp/Math-17b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Dfp.java",
  "functionName": "round",
  "functionId": "round___n-int",
  "sourceFilePath": "src/main/java/org/apache/commons/math3/dfp/Dfp.java",
  "functionAnnotation": "",
  "functionDoc": "Round this given the next digit n using the current rounding mode.\n\n@param n ???\n@return the IEEE flag if an exception occurred\n",
  "functionStartLine": 1417,
  "functionEndLine": 1490,
  "numCommitsSeen": 12,
  "timeTaken": 12383,
  "changeHistory": [
    "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd",
    "1eb0c0d7421823470de3a901643ae3be2c9e0a8e"
  ],
  "changeHistoryShort": {
    "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd": "Ymovefromfile",
    "1eb0c0d7421823470de3a901643ae3be2c9e0a8e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd": {
      "type": "Ymovefromfile",
      "commitMessage": "MATH-444\nBase package name change: \"o.a.c.math\" -\u003e \"o.a.c.math3\"\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1244107 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/14/12, 8:17 AM",
      "commitName": "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd",
      "commitAuthor": "Gilles Sadowski",
      "commitDateOld": "2/14/12, 6:34 AM",
      "commitNameOld": "53257329dd394be1333b38bae787bf0cf19dc900",
      "commitAuthorOld": "Gilles Sadowski",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected int round(int n) {\n    boolean inc \u003d false;\n    switch(field.getRoundingMode()) {\n        case ROUND_DOWN:\n            inc \u003d false;\n            break;\n        case ROUND_UP:\n            inc \u003d n !\u003d 0;\n            break;\n        case ROUND_HALF_UP:\n            inc \u003d n \u003e\u003d 5000;\n            break;\n        case ROUND_HALF_DOWN:\n            inc \u003d n \u003e 5000;\n            break;\n        case ROUND_HALF_EVEN:\n            inc \u003d n \u003e 5000 || (n \u003d\u003d 5000 \u0026\u0026 (mant[0] \u0026 1) \u003d\u003d 1);\n            break;\n        case ROUND_HALF_ODD:\n            inc \u003d n \u003e 5000 || (n \u003d\u003d 5000 \u0026\u0026 (mant[0] \u0026 1) \u003d\u003d 0);\n            break;\n        case ROUND_CEIL:\n            inc \u003d sign \u003d\u003d 1 \u0026\u0026 n !\u003d 0;\n            break;\n        case ROUND_FLOOR:\n        default:\n            inc \u003d sign \u003d\u003d -1 \u0026\u0026 n !\u003d 0;\n            break;\n    }\n    if (inc) {\n        int rh \u003d 1;\n        for (int i \u003d 0; i \u003c mant.length; i++) {\n            final int r \u003d mant[i] + rh;\n            rh \u003d r / RADIX;\n            mant[i] \u003d r - rh * RADIX;\n        }\n        if (rh !\u003d 0) {\n            shiftRight();\n            mant[mant.length - 1] \u003d rh;\n        }\n    }\n    if (exp \u003c MIN_EXP) {\n        field.setIEEEFlagsBits(DfpField.FLAG_UNDERFLOW);\n        return DfpField.FLAG_UNDERFLOW;\n    }\n    if (exp \u003e MAX_EXP) {\n        field.setIEEEFlagsBits(DfpField.FLAG_OVERFLOW);\n        return DfpField.FLAG_OVERFLOW;\n    }\n    if (n !\u003d 0) {\n        field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n        return DfpField.FLAG_INEXACT;\n    }\n    return 0;\n}",
      "path": "src/main/java/org/apache/commons/math3/dfp/Dfp.java",
      "functionStartLine": 1417,
      "functionName": "round",
      "functionAnnotation": "",
      "functionDoc": "Round this given the next digit n using the current rounding mode.\n\n@param n ???\n@return the IEEE flag if an exception occurred\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/main/java/org/apache/commons/math/dfp/Dfp.java",
        "newPath": "src/main/java/org/apache/commons/math3/dfp/Dfp.java",
        "oldMethodName": "round",
        "newMethodName": "round"
      }
    },
    "1eb0c0d7421823470de3a901643ae3be2c9e0a8e": {
      "type": "Yintroduced",
      "commitMessage": "added the dfp library\nThe Dfp class represent the high precision numbers, it implements our existing Field interface and hence each instance is associated with a DfpField that provides the constants at the required precision as well as factory methods. This allowed to remove the compile-time constraint in the library. Users can even use at the same time a field for 20 decimals digits precision and another field for 100 digits precision. Dfp instances with different precision CANNOT be mixed in the same computation (doing so creates a NaN). A few utility methods have been added, like constructors from integral types, isInfinite and isNaN methods, equal has been renames to equals and its signature changed to match the general Object method (a hashcode method has been added too).\nJIRA: MATH-412\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@992697 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/4/10, 3:59 PM",
      "commitName": "1eb0c0d7421823470de3a901643ae3be2c9e0a8e",
      "commitAuthor": "Luc Maisonobe",
      "diff": "@@ -0,0 +1,55 @@\n+protected int round(int n) {\n+    boolean inc \u003d false;\n+    switch(field.getRoundingMode()) {\n+        case ROUND_DOWN:\n+            inc \u003d false;\n+            break;\n+        case ROUND_UP:\n+            inc \u003d n !\u003d 0;\n+            break;\n+        case ROUND_HALF_UP:\n+            inc \u003d n \u003e\u003d 5000;\n+            break;\n+        case ROUND_HALF_DOWN:\n+            inc \u003d n \u003e 5000;\n+            break;\n+        case ROUND_HALF_EVEN:\n+            inc \u003d n \u003e 5000 || (n \u003d\u003d 5000 \u0026\u0026 (mant[0] \u0026 1) \u003d\u003d 1);\n+            break;\n+        case ROUND_HALF_ODD:\n+            inc \u003d n \u003e 5000 || (n \u003d\u003d 5000 \u0026\u0026 (mant[0] \u0026 1) \u003d\u003d 0);\n+            break;\n+        case ROUND_CEIL:\n+            inc \u003d sign \u003d\u003d 1 \u0026\u0026 n !\u003d 0;\n+            break;\n+        case ROUND_FLOOR:\n+        default:\n+            inc \u003d sign \u003d\u003d -1 \u0026\u0026 n !\u003d 0;\n+            break;\n+    }\n+    if (inc) {\n+        int rh \u003d 1;\n+        for (int i \u003d 0; i \u003c mant.length; i++) {\n+            final int r \u003d mant[i] + rh;\n+            rh \u003d r / RADIX;\n+            mant[i] \u003d r - rh * RADIX;\n+        }\n+        if (rh !\u003d 0) {\n+            shiftRight();\n+            mant[mant.length - 1] \u003d rh;\n+        }\n+    }\n+    if (exp \u003c MIN_EXP) {\n+        field.setIEEEFlagsBits(DfpField.FLAG_UNDERFLOW);\n+        return DfpField.FLAG_UNDERFLOW;\n+    }\n+    if (exp \u003e MAX_EXP) {\n+        field.setIEEEFlagsBits(DfpField.FLAG_OVERFLOW);\n+        return DfpField.FLAG_OVERFLOW;\n+    }\n+    if (n !\u003d 0) {\n+        field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n+        return DfpField.FLAG_INEXACT;\n+    }\n+    return 0;\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected int round(int n) {\n    boolean inc \u003d false;\n    switch(field.getRoundingMode()) {\n        case ROUND_DOWN:\n            inc \u003d false;\n            break;\n        case ROUND_UP:\n            inc \u003d n !\u003d 0;\n            break;\n        case ROUND_HALF_UP:\n            inc \u003d n \u003e\u003d 5000;\n            break;\n        case ROUND_HALF_DOWN:\n            inc \u003d n \u003e 5000;\n            break;\n        case ROUND_HALF_EVEN:\n            inc \u003d n \u003e 5000 || (n \u003d\u003d 5000 \u0026\u0026 (mant[0] \u0026 1) \u003d\u003d 1);\n            break;\n        case ROUND_HALF_ODD:\n            inc \u003d n \u003e 5000 || (n \u003d\u003d 5000 \u0026\u0026 (mant[0] \u0026 1) \u003d\u003d 0);\n            break;\n        case ROUND_CEIL:\n            inc \u003d sign \u003d\u003d 1 \u0026\u0026 n !\u003d 0;\n            break;\n        case ROUND_FLOOR:\n        default:\n            inc \u003d sign \u003d\u003d -1 \u0026\u0026 n !\u003d 0;\n            break;\n    }\n    if (inc) {\n        int rh \u003d 1;\n        for (int i \u003d 0; i \u003c mant.length; i++) {\n            final int r \u003d mant[i] + rh;\n            rh \u003d r / RADIX;\n            mant[i] \u003d r - rh * RADIX;\n        }\n        if (rh !\u003d 0) {\n            shiftRight();\n            mant[mant.length - 1] \u003d rh;\n        }\n    }\n    if (exp \u003c MIN_EXP) {\n        field.setIEEEFlagsBits(DfpField.FLAG_UNDERFLOW);\n        return DfpField.FLAG_UNDERFLOW;\n    }\n    if (exp \u003e MAX_EXP) {\n        field.setIEEEFlagsBits(DfpField.FLAG_OVERFLOW);\n        return DfpField.FLAG_OVERFLOW;\n    }\n    if (n !\u003d 0) {\n        field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n        return DfpField.FLAG_INEXACT;\n    }\n    return 0;\n}",
      "path": "src/main/java/org/apache/commons/math/dfp/Dfp.java",
      "functionStartLine": 1330,
      "functionName": "round",
      "functionAnnotation": "",
      "functionDoc": "Round this given the next digit n using the current rounding mode.\n\n@param n ???\n@return the IEEE flag if an exception occurred\n"
    }
  }
}