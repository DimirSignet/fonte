{
  "origin": "codeshovel",
  "repositoryName": "Math-46b",
  "repositoryPath": "/tmp/Math-46b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Complex.java",
  "functionName": "divide",
  "functionId": "divide___divisor-Complex",
  "sourceFilePath": "src/main/java/org/apache/commons/math/complex/Complex.java",
  "functionAnnotation": "",
  "functionDoc": "Returns a {@code Complex} whose value is\n{@code (this / divisor)}.\nImplements the definitional formula\n\u003cpre\u003e\n \u003ccode\u003e\n   a + bi          ac + bd + (bc - ad)i\n   ----------- \u003d -------------------------\n   c + di         c\u003csup\u003e2\u003c/sup\u003e + d\u003csup\u003e2\u003c/sup\u003e\n \u003c/code\u003e\n\u003c/pre\u003e\nbut uses\n\u003ca href\u003d\"http://doi.acm.org/10.1145/1039813.1039814\"\u003e\nprescaling of operands\u003c/a\u003e to limit the effects of overflows and\nunderflows in the computation.\n\u003cbr/\u003e\n{@code Infinite} and {@code NaN} values are handled according to the\nfollowing rules, applied in the order presented:\n\u003cul\u003e\n \u003cli\u003eIf either {@code this} or {@code divisor} has a {@code NaN} value\n  in either part, {@link #NaN} is returned.\n \u003c/li\u003e\n \u003cli\u003eIf {@code this} and {@code divisor} are both {@link #ZERO},\n  {@link #NaN} is returned.\n \u003c/li\u003e\n \u003cli\u003eIf {@code divisor} equals {@link #ZERO}, {@link #INF} is returned.\n \u003c/li\u003e\n \u003cli\u003eIf {@code this} and {@code divisor} are both infinite,\n  {@link #NaN} is returned.\n \u003c/li\u003e\n \u003cli\u003eIf {@code this} is finite (i.e., has no {@code Infinite} or\n  {@code NaN} parts) and {@code divisor} is infinite (one or both parts\n  infinite), {@link #ZERO} is returned.\n \u003c/li\u003e\n \u003cli\u003eIf {@code this} is infinite and {@code divisor} is finite,\n  {@code NaN} values are returned in the parts of the result if the\n  {@link java.lang.Double} rules applied to the definitional formula\n  force {@code NaN} results.\n \u003c/li\u003e\n\u003c/ul\u003e\n\n@param divisor Value by which this {@code Complex} is to be divided.\n@return @code this / divisor}.\n@throws NullArgumentException if {@code divisor} is {@code null}.\n",
  "functionStartLine": 251,
  "functionEndLine": 280,
  "numCommitsSeen": 76,
  "timeTaken": 3272,
  "changeHistory": [
    "330f3fe17d132bd4e2a91ff812ccf489e77f390f",
    "3fb72699d911f4b9a4a18a30a75e9d9c4bb7305f",
    "b522106e845feae4200e37d0bd190fb6cdc5b756",
    "f34508958e47b663652c2ad420e6801f7150dac3",
    "e9c6d1de301072c16a48587db682542f967b3a9b",
    "80b1e90b42a34856b61cec628fcea6633d1000cd",
    "051edd33e81d09cc10e3970b3ee0b1a62914a0ab",
    "26dac5a0e7fc9c6be9571b3e71a15d8502480d96",
    "d6a438e931412713e99624cf9ed74470f1040184",
    "932ebf87acd81162cc7b1751c18b0e0ca760c8bf",
    "912d9beb43edb26caf87a32f08664ea634136c73",
    "6ef3b2932f4ca9219e41784bb0cd229dcabcdb11",
    "ad6929ea0c89c085422c1e43bb3f763a0e3d25e4",
    "0a904461932f2c0455611e77ec6a8d8aced2980b"
  ],
  "changeHistoryShort": {
    "330f3fe17d132bd4e2a91ff812ccf489e77f390f": "Ymultichange(Ybodychange,Ydocchange)",
    "3fb72699d911f4b9a4a18a30a75e9d9c4bb7305f": "Yannotationchange",
    "b522106e845feae4200e37d0bd190fb6cdc5b756": "Ymultichange(Yparameterchange,Ybodychange,Yannotationchange,Ydocchange)",
    "f34508958e47b663652c2ad420e6801f7150dac3": "Ybodychange",
    "e9c6d1de301072c16a48587db682542f967b3a9b": "Ymultichange(Yexceptionschange,Ybodychange,Ydocchange)",
    "80b1e90b42a34856b61cec628fcea6633d1000cd": "Ybodychange",
    "051edd33e81d09cc10e3970b3ee0b1a62914a0ab": "Ymultichange(Ybodychange,Ydocchange)",
    "26dac5a0e7fc9c6be9571b3e71a15d8502480d96": "Ymultichange(Ydocchange,Yformatchange)",
    "d6a438e931412713e99624cf9ed74470f1040184": "Yfilerename",
    "932ebf87acd81162cc7b1751c18b0e0ca760c8bf": "Ydocchange",
    "912d9beb43edb26caf87a32f08664ea634136c73": "Ybodychange",
    "6ef3b2932f4ca9219e41784bb0cd229dcabcdb11": "Ymultichange(Ybodychange,Ydocchange)",
    "ad6929ea0c89c085422c1e43bb3f763a0e3d25e4": "Ybodychange",
    "0a904461932f2c0455611e77ec6a8d8aced2980b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "330f3fe17d132bd4e2a91ff812ccf489e77f390f": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "MATH-657\nComplex division by zero:\n z / 0 \u003d INF if z is not ZERO\n 0 / 0 \u003d NaN\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1164756 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/2/11, 4:05 PM",
      "commitName": "330f3fe17d132bd4e2a91ff812ccf489e77f390f",
      "commitAuthor": "Gilles Sadowski",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "MATH-657\nComplex division by zero:\n z / 0 \u003d INF if z is not ZERO\n 0 / 0 \u003d NaN\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1164756 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "9/2/11, 4:05 PM",
          "commitName": "330f3fe17d132bd4e2a91ff812ccf489e77f390f",
          "commitAuthor": "Gilles Sadowski",
          "commitDateOld": "8/5/11, 3:07 PM",
          "commitNameOld": "de2c98de19f797d87ba76feee07b67a1cbcbbd67",
          "commitAuthorOld": "Gilles Sadowski",
          "daysBetweenCommits": 28.04,
          "commitsBetweenForRepo": 81,
          "commitsBetweenForFile": 1,
          "actualSource": "public Complex divide(Complex divisor) throws NullArgumentException {\n    MathUtils.checkNotNull(divisor);\n    if (isNaN || divisor.isNaN) {\n        return NaN;\n    }\n    if (divisor.isZero) {\n        return isZero ? NaN : INF;\n    }\n    if (divisor.isInfinite() \u0026\u0026 !isInfinite()) {\n        return ZERO;\n    }\n    final double c \u003d divisor.getReal();\n    final double d \u003d divisor.getImaginary();\n    if (FastMath.abs(c) \u003c FastMath.abs(d)) {\n        double q \u003d c / d;\n        double denominator \u003d c * q + d;\n        return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator);\n    } else {\n        double q \u003d d / c;\n        double denominator \u003d d * q + c;\n        return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator);\n    }\n}",
          "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
          "functionStartLine": 251,
          "functionName": "divide",
          "functionAnnotation": "",
          "functionDoc": "Returns a {@code Complex} whose value is\n{@code (this / divisor)}.\nImplements the definitional formula\n\u003cpre\u003e\n \u003ccode\u003e\n   a + bi          ac + bd + (bc - ad)i\n   ----------- \u003d -------------------------\n   c + di         c\u003csup\u003e2\u003c/sup\u003e + d\u003csup\u003e2\u003c/sup\u003e\n \u003c/code\u003e\n\u003c/pre\u003e\nbut uses\n\u003ca href\u003d\"http://doi.acm.org/10.1145/1039813.1039814\"\u003e\nprescaling of operands\u003c/a\u003e to limit the effects of overflows and\nunderflows in the computation.\n\u003cbr/\u003e\n{@code Infinite} and {@code NaN} values are handled according to the\nfollowing rules, applied in the order presented:\n\u003cul\u003e\n \u003cli\u003eIf either {@code this} or {@code divisor} has a {@code NaN} value\n  in either part, {@link #NaN} is returned.\n \u003c/li\u003e\n \u003cli\u003eIf {@code this} and {@code divisor} are both {@link #ZERO},\n  {@link #NaN} is returned.\n \u003c/li\u003e\n \u003cli\u003eIf {@code divisor} equals {@link #ZERO}, {@link #INF} is returned.\n \u003c/li\u003e\n \u003cli\u003eIf {@code this} and {@code divisor} are both infinite,\n  {@link #NaN} is returned.\n \u003c/li\u003e\n \u003cli\u003eIf {@code this} is finite (i.e., has no {@code Infinite} or\n  {@code NaN} parts) and {@code divisor} is infinite (one or both parts\n  infinite), {@link #ZERO} is returned.\n \u003c/li\u003e\n \u003cli\u003eIf {@code this} is infinite and {@code divisor} is finite,\n  {@code NaN} values are returned in the parts of the result if the\n  {@link java.lang.Double} rules applied to the definitional formula\n  force {@code NaN} results.\n \u003c/li\u003e\n\u003c/ul\u003e\n\n@param divisor Value by which this {@code Complex} is to be divided.\n@return @code this / divisor}.\n@throws NullArgumentException if {@code divisor} is {@code null}.\n",
          "diff": "@@ -1,23 +1,23 @@\n public Complex divide(Complex divisor) throws NullArgumentException {\n     MathUtils.checkNotNull(divisor);\n     if (isNaN || divisor.isNaN) {\n         return NaN;\n     }\n-    final double c \u003d divisor.getReal();\n-    final double d \u003d divisor.getImaginary();\n-    if (c \u003d\u003d 0.0 \u0026\u0026 d \u003d\u003d 0.0) {\n-        return NaN;\n+    if (divisor.isZero) {\n+        return isZero ? NaN : INF;\n     }\n     if (divisor.isInfinite() \u0026\u0026 !isInfinite()) {\n         return ZERO;\n     }\n+    final double c \u003d divisor.getReal();\n+    final double d \u003d divisor.getImaginary();\n     if (FastMath.abs(c) \u003c FastMath.abs(d)) {\n         double q \u003d c / d;\n         double denominator \u003d c * q + d;\n         return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator);\n     } else {\n         double q \u003d d / c;\n         double denominator \u003d d * q + c;\n         return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "MATH-657\nComplex division by zero:\n z / 0 \u003d INF if z is not ZERO\n 0 / 0 \u003d NaN\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1164756 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "9/2/11, 4:05 PM",
          "commitName": "330f3fe17d132bd4e2a91ff812ccf489e77f390f",
          "commitAuthor": "Gilles Sadowski",
          "commitDateOld": "8/5/11, 3:07 PM",
          "commitNameOld": "de2c98de19f797d87ba76feee07b67a1cbcbbd67",
          "commitAuthorOld": "Gilles Sadowski",
          "daysBetweenCommits": 28.04,
          "commitsBetweenForRepo": 81,
          "commitsBetweenForFile": 1,
          "actualSource": "public Complex divide(Complex divisor) throws NullArgumentException {\n    MathUtils.checkNotNull(divisor);\n    if (isNaN || divisor.isNaN) {\n        return NaN;\n    }\n    if (divisor.isZero) {\n        return isZero ? NaN : INF;\n    }\n    if (divisor.isInfinite() \u0026\u0026 !isInfinite()) {\n        return ZERO;\n    }\n    final double c \u003d divisor.getReal();\n    final double d \u003d divisor.getImaginary();\n    if (FastMath.abs(c) \u003c FastMath.abs(d)) {\n        double q \u003d c / d;\n        double denominator \u003d c * q + d;\n        return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator);\n    } else {\n        double q \u003d d / c;\n        double denominator \u003d d * q + c;\n        return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator);\n    }\n}",
          "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
          "functionStartLine": 251,
          "functionName": "divide",
          "functionAnnotation": "",
          "functionDoc": "Returns a {@code Complex} whose value is\n{@code (this / divisor)}.\nImplements the definitional formula\n\u003cpre\u003e\n \u003ccode\u003e\n   a + bi          ac + bd + (bc - ad)i\n   ----------- \u003d -------------------------\n   c + di         c\u003csup\u003e2\u003c/sup\u003e + d\u003csup\u003e2\u003c/sup\u003e\n \u003c/code\u003e\n\u003c/pre\u003e\nbut uses\n\u003ca href\u003d\"http://doi.acm.org/10.1145/1039813.1039814\"\u003e\nprescaling of operands\u003c/a\u003e to limit the effects of overflows and\nunderflows in the computation.\n\u003cbr/\u003e\n{@code Infinite} and {@code NaN} values are handled according to the\nfollowing rules, applied in the order presented:\n\u003cul\u003e\n \u003cli\u003eIf either {@code this} or {@code divisor} has a {@code NaN} value\n  in either part, {@link #NaN} is returned.\n \u003c/li\u003e\n \u003cli\u003eIf {@code this} and {@code divisor} are both {@link #ZERO},\n  {@link #NaN} is returned.\n \u003c/li\u003e\n \u003cli\u003eIf {@code divisor} equals {@link #ZERO}, {@link #INF} is returned.\n \u003c/li\u003e\n \u003cli\u003eIf {@code this} and {@code divisor} are both infinite,\n  {@link #NaN} is returned.\n \u003c/li\u003e\n \u003cli\u003eIf {@code this} is finite (i.e., has no {@code Infinite} or\n  {@code NaN} parts) and {@code divisor} is infinite (one or both parts\n  infinite), {@link #ZERO} is returned.\n \u003c/li\u003e\n \u003cli\u003eIf {@code this} is infinite and {@code divisor} is finite,\n  {@code NaN} values are returned in the parts of the result if the\n  {@link java.lang.Double} rules applied to the definitional formula\n  force {@code NaN} results.\n \u003c/li\u003e\n\u003c/ul\u003e\n\n@param divisor Value by which this {@code Complex} is to be divided.\n@return @code this / divisor}.\n@throws NullArgumentException if {@code divisor} is {@code null}.\n",
          "diff": "@@ -1,23 +1,23 @@\n public Complex divide(Complex divisor) throws NullArgumentException {\n     MathUtils.checkNotNull(divisor);\n     if (isNaN || divisor.isNaN) {\n         return NaN;\n     }\n-    final double c \u003d divisor.getReal();\n-    final double d \u003d divisor.getImaginary();\n-    if (c \u003d\u003d 0.0 \u0026\u0026 d \u003d\u003d 0.0) {\n-        return NaN;\n+    if (divisor.isZero) {\n+        return isZero ? NaN : INF;\n     }\n     if (divisor.isInfinite() \u0026\u0026 !isInfinite()) {\n         return ZERO;\n     }\n+    final double c \u003d divisor.getReal();\n+    final double d \u003d divisor.getImaginary();\n     if (FastMath.abs(c) \u003c FastMath.abs(d)) {\n         double q \u003d c / d;\n         double denominator \u003d c * q + d;\n         return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator);\n     } else {\n         double q \u003d d / c;\n         double denominator \u003d d * q + c;\n         return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Returns a {@code Complex} whose value is\n{@code (this / divisor)}.\nImplements the definitional formula\n\u003cpre\u003e\n \u003ccode\u003e\n   a + bi          ac + bd + (bc - ad)i\n   ----------- \u003d -------------------------\n   c + di         c\u003csup\u003e2\u003c/sup\u003e + d\u003csup\u003e2\u003c/sup\u003e\n \u003c/code\u003e\n\u003c/pre\u003e\nbut uses\n\u003ca href\u003d\"http://doi.acm.org/10.1145/1039813.1039814\"\u003e\nprescaling of operands\u003c/a\u003e to limit the effects of overflows and\nunderflows in the computation.\n\u003cbr/\u003e\n{@code Infinite} and {@code NaN} values are handled according to the\nfollowing rules, applied in the order presented:\n\u003cul\u003e\n \u003cli\u003eIf either {@code this} or {@code divisor} has a {@code NaN} value\n  in either part, {@link #NaN} is returned.\n \u003c/li\u003e\n \u003cli\u003eIf {@code divisor} equals {@link #ZERO}, {@link #NaN} is returned.\n \u003c/li\u003e\n \u003cli\u003eIf {@code this} and {@code divisor} are both infinite,\n  {@link #NaN} is returned.\n \u003c/li\u003e\n \u003cli\u003eIf {@code this} is finite (i.e., has no {@code Infinite} or\n  {@code NaN} parts) and {@code divisor} is infinite (one or both parts\n  infinite), {@link #ZERO} is returned.\n \u003c/li\u003e\n \u003cli\u003eIf {@code this} is infinite and {@code divisor} is finite,\n  {@code NaN} values are returned in the parts of the result if the\n  {@link java.lang.Double} rules applied to the definitional formula\n  force {@code NaN} results.\n \u003c/li\u003e\n\u003c/ul\u003e\n\n@param divisor Value by which this {@code Complex} is to be divided.\n@return @code this / divisor}.\n@throws NullArgumentException if {@code divisor} is {@code null}.\n",
            "newValue": "Returns a {@code Complex} whose value is\n{@code (this / divisor)}.\nImplements the definitional formula\n\u003cpre\u003e\n \u003ccode\u003e\n   a + bi          ac + bd + (bc - ad)i\n   ----------- \u003d -------------------------\n   c + di         c\u003csup\u003e2\u003c/sup\u003e + d\u003csup\u003e2\u003c/sup\u003e\n \u003c/code\u003e\n\u003c/pre\u003e\nbut uses\n\u003ca href\u003d\"http://doi.acm.org/10.1145/1039813.1039814\"\u003e\nprescaling of operands\u003c/a\u003e to limit the effects of overflows and\nunderflows in the computation.\n\u003cbr/\u003e\n{@code Infinite} and {@code NaN} values are handled according to the\nfollowing rules, applied in the order presented:\n\u003cul\u003e\n \u003cli\u003eIf either {@code this} or {@code divisor} has a {@code NaN} value\n  in either part, {@link #NaN} is returned.\n \u003c/li\u003e\n \u003cli\u003eIf {@code this} and {@code divisor} are both {@link #ZERO},\n  {@link #NaN} is returned.\n \u003c/li\u003e\n \u003cli\u003eIf {@code divisor} equals {@link #ZERO}, {@link #INF} is returned.\n \u003c/li\u003e\n \u003cli\u003eIf {@code this} and {@code divisor} are both infinite,\n  {@link #NaN} is returned.\n \u003c/li\u003e\n \u003cli\u003eIf {@code this} is finite (i.e., has no {@code Infinite} or\n  {@code NaN} parts) and {@code divisor} is infinite (one or both parts\n  infinite), {@link #ZERO} is returned.\n \u003c/li\u003e\n \u003cli\u003eIf {@code this} is infinite and {@code divisor} is finite,\n  {@code NaN} values are returned in the parts of the result if the\n  {@link java.lang.Double} rules applied to the definitional formula\n  force {@code NaN} results.\n \u003c/li\u003e\n\u003c/ul\u003e\n\n@param divisor Value by which this {@code Complex} is to be divided.\n@return @code this / divisor}.\n@throws NullArgumentException if {@code divisor} is {@code null}.\n"
          }
        }
      ]
    },
    "3fb72699d911f4b9a4a18a30a75e9d9c4bb7305f": {
      "type": "Yannotationchange",
      "commitMessage": "Java 1.5 does not allow @Override for method implementations, only true overrides\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1150378 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/24/11, 7:24 AM",
      "commitName": "3fb72699d911f4b9a4a18a30a75e9d9c4bb7305f",
      "commitAuthor": "Sebastian Bazley",
      "commitDateOld": "7/24/11, 4:21 AM",
      "commitNameOld": "b522106e845feae4200e37d0bd190fb6cdc5b756",
      "commitAuthorOld": "Gilles Sadowski",
      "daysBetweenCommits": 0.13,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public Complex divide(Complex divisor) throws NullArgumentException {\n    MathUtils.checkNotNull(divisor);\n    if (isNaN || divisor.isNaN) {\n        return NaN;\n    }\n    final double c \u003d divisor.getReal();\n    final double d \u003d divisor.getImaginary();\n    if (c \u003d\u003d 0.0 \u0026\u0026 d \u003d\u003d 0.0) {\n        return NaN;\n    }\n    if (divisor.isInfinite() \u0026\u0026 !isInfinite()) {\n        return ZERO;\n    }\n    if (FastMath.abs(c) \u003c FastMath.abs(d)) {\n        double q \u003d c / d;\n        double denominator \u003d c * q + d;\n        return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator);\n    } else {\n        double q \u003d d / c;\n        double denominator \u003d d * q + c;\n        return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator);\n    }\n}",
      "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
      "functionStartLine": 239,
      "functionName": "divide",
      "functionAnnotation": "",
      "functionDoc": "Returns a {@code Complex} whose value is\n{@code (this / divisor)}.\nImplements the definitional formula\n\u003cpre\u003e\n \u003ccode\u003e\n   a + bi          ac + bd + (bc - ad)i\n   ----------- \u003d -------------------------\n   c + di         c\u003csup\u003e2\u003c/sup\u003e + d\u003csup\u003e2\u003c/sup\u003e\n \u003c/code\u003e\n\u003c/pre\u003e\nbut uses\n\u003ca href\u003d\"http://doi.acm.org/10.1145/1039813.1039814\"\u003e\nprescaling of operands\u003c/a\u003e to limit the effects of overflows and\nunderflows in the computation.\n\u003cbr/\u003e\n{@code Infinite} and {@code NaN} values are handled according to the\nfollowing rules, applied in the order presented:\n\u003cul\u003e\n \u003cli\u003eIf either {@code this} or {@code divisor} has a {@code NaN} value\n  in either part, {@link #NaN} is returned.\n \u003c/li\u003e\n \u003cli\u003eIf {@code divisor} equals {@link #ZERO}, {@link #NaN} is returned.\n \u003c/li\u003e\n \u003cli\u003eIf {@code this} and {@code divisor} are both infinite,\n  {@link #NaN} is returned.\n \u003c/li\u003e\n \u003cli\u003eIf {@code this} is finite (i.e., has no {@code Infinite} or\n  {@code NaN} parts) and {@code divisor} is infinite (one or both parts\n  infinite), {@link #ZERO} is returned.\n \u003c/li\u003e\n \u003cli\u003eIf {@code this} is infinite and {@code divisor} is finite,\n  {@code NaN} values are returned in the parts of the result if the\n  {@link java.lang.Double} rules applied to the definitional formula\n  force {@code NaN} results.\n \u003c/li\u003e\n\u003c/ul\u003e\n\n@param divisor Value by which this {@code Complex} is to be divided.\n@return @code this / divisor}.\n@throws NullArgumentException if {@code divisor} is {@code null}.\n",
      "diff": "@@ -1,24 +1,23 @@\n-@Override\n public Complex divide(Complex divisor) throws NullArgumentException {\n     MathUtils.checkNotNull(divisor);\n     if (isNaN || divisor.isNaN) {\n         return NaN;\n     }\n     final double c \u003d divisor.getReal();\n     final double d \u003d divisor.getImaginary();\n     if (c \u003d\u003d 0.0 \u0026\u0026 d \u003d\u003d 0.0) {\n         return NaN;\n     }\n     if (divisor.isInfinite() \u0026\u0026 !isInfinite()) {\n         return ZERO;\n     }\n     if (FastMath.abs(c) \u003c FastMath.abs(d)) {\n         double q \u003d c / d;\n         double denominator \u003d c * q + d;\n         return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator);\n     } else {\n         double q \u003d d / c;\n         double denominator \u003d d * q + c;\n         return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "@Override",
        "newValue": ""
      }
    },
    "b522106e845feae4200e37d0bd190fb6cdc5b756": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Yannotationchange,Ydocchange)",
      "commitMessage": "MATH-577\nVarious enhancements to the \"Complex\" class, namely operators (add,\nsubtract, ...) taking a \"double\" argument, improved consistency in\nthe use of \"NAN\" and \"INF\" fields, updated Javadoc. Mainly due to\nArne Plöse.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1150340 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/24/11, 4:21 AM",
      "commitName": "b522106e845feae4200e37d0bd190fb6cdc5b756",
      "commitAuthor": "Gilles Sadowski",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MATH-577\nVarious enhancements to the \"Complex\" class, namely operators (add,\nsubtract, ...) taking a \"double\" argument, improved consistency in\nthe use of \"NAN\" and \"INF\" fields, updated Javadoc. Mainly due to\nArne Plöse.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1150340 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/24/11, 4:21 AM",
          "commitName": "b522106e845feae4200e37d0bd190fb6cdc5b756",
          "commitAuthor": "Gilles Sadowski",
          "commitDateOld": "7/13/11, 11:08 PM",
          "commitNameOld": "7707b0bb80be05bbf6533a36bb0c646cbfd1026d",
          "commitAuthorOld": "Phil Steitz",
          "daysBetweenCommits": 10.22,
          "commitsBetweenForRepo": 22,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic Complex divide(Complex divisor) throws NullArgumentException {\n    MathUtils.checkNotNull(divisor);\n    if (isNaN || divisor.isNaN) {\n        return NaN;\n    }\n    final double c \u003d divisor.getReal();\n    final double d \u003d divisor.getImaginary();\n    if (c \u003d\u003d 0.0 \u0026\u0026 d \u003d\u003d 0.0) {\n        return NaN;\n    }\n    if (divisor.isInfinite() \u0026\u0026 !isInfinite()) {\n        return ZERO;\n    }\n    if (FastMath.abs(c) \u003c FastMath.abs(d)) {\n        double q \u003d c / d;\n        double denominator \u003d c * q + d;\n        return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator);\n    } else {\n        double q \u003d d / c;\n        double denominator \u003d d * q + c;\n        return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator);\n    }\n}",
          "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
          "functionStartLine": 241,
          "functionName": "divide",
          "functionAnnotation": "@Override",
          "functionDoc": "Returns a {@code Complex} whose value is\n{@code (this / divisor)}.\nImplements the definitional formula\n\u003cpre\u003e\n \u003ccode\u003e\n   a + bi          ac + bd + (bc - ad)i\n   ----------- \u003d -------------------------\n   c + di         c\u003csup\u003e2\u003c/sup\u003e + d\u003csup\u003e2\u003c/sup\u003e\n \u003c/code\u003e\n\u003c/pre\u003e\nbut uses\n\u003ca href\u003d\"http://doi.acm.org/10.1145/1039813.1039814\"\u003e\nprescaling of operands\u003c/a\u003e to limit the effects of overflows and\nunderflows in the computation.\n\u003cbr/\u003e\n{@code Infinite} and {@code NaN} values are handled according to the\nfollowing rules, applied in the order presented:\n\u003cul\u003e\n \u003cli\u003eIf either {@code this} or {@code divisor} has a {@code NaN} value\n  in either part, {@link #NaN} is returned.\n \u003c/li\u003e\n \u003cli\u003eIf {@code divisor} equals {@link #ZERO}, {@link #NaN} is returned.\n \u003c/li\u003e\n \u003cli\u003eIf {@code this} and {@code divisor} are both infinite,\n  {@link #NaN} is returned.\n \u003c/li\u003e\n \u003cli\u003eIf {@code this} is finite (i.e., has no {@code Infinite} or\n  {@code NaN} parts) and {@code divisor} is infinite (one or both parts\n  infinite), {@link #ZERO} is returned.\n \u003c/li\u003e\n \u003cli\u003eIf {@code this} is infinite and {@code divisor} is finite,\n  {@code NaN} values are returned in the parts of the result if the\n  {@link java.lang.Double} rules applied to the definitional formula\n  force {@code NaN} results.\n \u003c/li\u003e\n\u003c/ul\u003e\n\n@param divisor Value by which this {@code Complex} is to be divided.\n@return @code this / divisor}.\n@throws NullArgumentException if {@code divisor} is {@code null}.\n",
          "diff": "@@ -1,23 +1,24 @@\n-public Complex divide(Complex rhs) throws NullArgumentException {\n-    MathUtils.checkNotNull(rhs);\n-    if (isNaN || rhs.isNaN) {\n+@Override\n+public Complex divide(Complex divisor) throws NullArgumentException {\n+    MathUtils.checkNotNull(divisor);\n+    if (isNaN || divisor.isNaN) {\n         return NaN;\n     }\n-    double c \u003d rhs.getReal();\n-    double d \u003d rhs.getImaginary();\n+    final double c \u003d divisor.getReal();\n+    final double d \u003d divisor.getImaginary();\n     if (c \u003d\u003d 0.0 \u0026\u0026 d \u003d\u003d 0.0) {\n         return NaN;\n     }\n-    if (rhs.isInfinite() \u0026\u0026 !isInfinite()) {\n+    if (divisor.isInfinite() \u0026\u0026 !isInfinite()) {\n         return ZERO;\n     }\n     if (FastMath.abs(c) \u003c FastMath.abs(d)) {\n         double q \u003d c / d;\n         double denominator \u003d c * q + d;\n         return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator);\n     } else {\n         double q \u003d d / c;\n         double denominator \u003d d * q + c;\n         return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[rhs-Complex]",
            "newValue": "[divisor-Complex]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MATH-577\nVarious enhancements to the \"Complex\" class, namely operators (add,\nsubtract, ...) taking a \"double\" argument, improved consistency in\nthe use of \"NAN\" and \"INF\" fields, updated Javadoc. Mainly due to\nArne Plöse.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1150340 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/24/11, 4:21 AM",
          "commitName": "b522106e845feae4200e37d0bd190fb6cdc5b756",
          "commitAuthor": "Gilles Sadowski",
          "commitDateOld": "7/13/11, 11:08 PM",
          "commitNameOld": "7707b0bb80be05bbf6533a36bb0c646cbfd1026d",
          "commitAuthorOld": "Phil Steitz",
          "daysBetweenCommits": 10.22,
          "commitsBetweenForRepo": 22,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic Complex divide(Complex divisor) throws NullArgumentException {\n    MathUtils.checkNotNull(divisor);\n    if (isNaN || divisor.isNaN) {\n        return NaN;\n    }\n    final double c \u003d divisor.getReal();\n    final double d \u003d divisor.getImaginary();\n    if (c \u003d\u003d 0.0 \u0026\u0026 d \u003d\u003d 0.0) {\n        return NaN;\n    }\n    if (divisor.isInfinite() \u0026\u0026 !isInfinite()) {\n        return ZERO;\n    }\n    if (FastMath.abs(c) \u003c FastMath.abs(d)) {\n        double q \u003d c / d;\n        double denominator \u003d c * q + d;\n        return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator);\n    } else {\n        double q \u003d d / c;\n        double denominator \u003d d * q + c;\n        return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator);\n    }\n}",
          "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
          "functionStartLine": 241,
          "functionName": "divide",
          "functionAnnotation": "@Override",
          "functionDoc": "Returns a {@code Complex} whose value is\n{@code (this / divisor)}.\nImplements the definitional formula\n\u003cpre\u003e\n \u003ccode\u003e\n   a + bi          ac + bd + (bc - ad)i\n   ----------- \u003d -------------------------\n   c + di         c\u003csup\u003e2\u003c/sup\u003e + d\u003csup\u003e2\u003c/sup\u003e\n \u003c/code\u003e\n\u003c/pre\u003e\nbut uses\n\u003ca href\u003d\"http://doi.acm.org/10.1145/1039813.1039814\"\u003e\nprescaling of operands\u003c/a\u003e to limit the effects of overflows and\nunderflows in the computation.\n\u003cbr/\u003e\n{@code Infinite} and {@code NaN} values are handled according to the\nfollowing rules, applied in the order presented:\n\u003cul\u003e\n \u003cli\u003eIf either {@code this} or {@code divisor} has a {@code NaN} value\n  in either part, {@link #NaN} is returned.\n \u003c/li\u003e\n \u003cli\u003eIf {@code divisor} equals {@link #ZERO}, {@link #NaN} is returned.\n \u003c/li\u003e\n \u003cli\u003eIf {@code this} and {@code divisor} are both infinite,\n  {@link #NaN} is returned.\n \u003c/li\u003e\n \u003cli\u003eIf {@code this} is finite (i.e., has no {@code Infinite} or\n  {@code NaN} parts) and {@code divisor} is infinite (one or both parts\n  infinite), {@link #ZERO} is returned.\n \u003c/li\u003e\n \u003cli\u003eIf {@code this} is infinite and {@code divisor} is finite,\n  {@code NaN} values are returned in the parts of the result if the\n  {@link java.lang.Double} rules applied to the definitional formula\n  force {@code NaN} results.\n \u003c/li\u003e\n\u003c/ul\u003e\n\n@param divisor Value by which this {@code Complex} is to be divided.\n@return @code this / divisor}.\n@throws NullArgumentException if {@code divisor} is {@code null}.\n",
          "diff": "@@ -1,23 +1,24 @@\n-public Complex divide(Complex rhs) throws NullArgumentException {\n-    MathUtils.checkNotNull(rhs);\n-    if (isNaN || rhs.isNaN) {\n+@Override\n+public Complex divide(Complex divisor) throws NullArgumentException {\n+    MathUtils.checkNotNull(divisor);\n+    if (isNaN || divisor.isNaN) {\n         return NaN;\n     }\n-    double c \u003d rhs.getReal();\n-    double d \u003d rhs.getImaginary();\n+    final double c \u003d divisor.getReal();\n+    final double d \u003d divisor.getImaginary();\n     if (c \u003d\u003d 0.0 \u0026\u0026 d \u003d\u003d 0.0) {\n         return NaN;\n     }\n-    if (rhs.isInfinite() \u0026\u0026 !isInfinite()) {\n+    if (divisor.isInfinite() \u0026\u0026 !isInfinite()) {\n         return ZERO;\n     }\n     if (FastMath.abs(c) \u003c FastMath.abs(d)) {\n         double q \u003d c / d;\n         double denominator \u003d c * q + d;\n         return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator);\n     } else {\n         double q \u003d d / c;\n         double denominator \u003d d * q + c;\n         return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yannotationchange",
          "commitMessage": "MATH-577\nVarious enhancements to the \"Complex\" class, namely operators (add,\nsubtract, ...) taking a \"double\" argument, improved consistency in\nthe use of \"NAN\" and \"INF\" fields, updated Javadoc. Mainly due to\nArne Plöse.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1150340 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/24/11, 4:21 AM",
          "commitName": "b522106e845feae4200e37d0bd190fb6cdc5b756",
          "commitAuthor": "Gilles Sadowski",
          "commitDateOld": "7/13/11, 11:08 PM",
          "commitNameOld": "7707b0bb80be05bbf6533a36bb0c646cbfd1026d",
          "commitAuthorOld": "Phil Steitz",
          "daysBetweenCommits": 10.22,
          "commitsBetweenForRepo": 22,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic Complex divide(Complex divisor) throws NullArgumentException {\n    MathUtils.checkNotNull(divisor);\n    if (isNaN || divisor.isNaN) {\n        return NaN;\n    }\n    final double c \u003d divisor.getReal();\n    final double d \u003d divisor.getImaginary();\n    if (c \u003d\u003d 0.0 \u0026\u0026 d \u003d\u003d 0.0) {\n        return NaN;\n    }\n    if (divisor.isInfinite() \u0026\u0026 !isInfinite()) {\n        return ZERO;\n    }\n    if (FastMath.abs(c) \u003c FastMath.abs(d)) {\n        double q \u003d c / d;\n        double denominator \u003d c * q + d;\n        return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator);\n    } else {\n        double q \u003d d / c;\n        double denominator \u003d d * q + c;\n        return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator);\n    }\n}",
          "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
          "functionStartLine": 241,
          "functionName": "divide",
          "functionAnnotation": "@Override",
          "functionDoc": "Returns a {@code Complex} whose value is\n{@code (this / divisor)}.\nImplements the definitional formula\n\u003cpre\u003e\n \u003ccode\u003e\n   a + bi          ac + bd + (bc - ad)i\n   ----------- \u003d -------------------------\n   c + di         c\u003csup\u003e2\u003c/sup\u003e + d\u003csup\u003e2\u003c/sup\u003e\n \u003c/code\u003e\n\u003c/pre\u003e\nbut uses\n\u003ca href\u003d\"http://doi.acm.org/10.1145/1039813.1039814\"\u003e\nprescaling of operands\u003c/a\u003e to limit the effects of overflows and\nunderflows in the computation.\n\u003cbr/\u003e\n{@code Infinite} and {@code NaN} values are handled according to the\nfollowing rules, applied in the order presented:\n\u003cul\u003e\n \u003cli\u003eIf either {@code this} or {@code divisor} has a {@code NaN} value\n  in either part, {@link #NaN} is returned.\n \u003c/li\u003e\n \u003cli\u003eIf {@code divisor} equals {@link #ZERO}, {@link #NaN} is returned.\n \u003c/li\u003e\n \u003cli\u003eIf {@code this} and {@code divisor} are both infinite,\n  {@link #NaN} is returned.\n \u003c/li\u003e\n \u003cli\u003eIf {@code this} is finite (i.e., has no {@code Infinite} or\n  {@code NaN} parts) and {@code divisor} is infinite (one or both parts\n  infinite), {@link #ZERO} is returned.\n \u003c/li\u003e\n \u003cli\u003eIf {@code this} is infinite and {@code divisor} is finite,\n  {@code NaN} values are returned in the parts of the result if the\n  {@link java.lang.Double} rules applied to the definitional formula\n  force {@code NaN} results.\n \u003c/li\u003e\n\u003c/ul\u003e\n\n@param divisor Value by which this {@code Complex} is to be divided.\n@return @code this / divisor}.\n@throws NullArgumentException if {@code divisor} is {@code null}.\n",
          "diff": "@@ -1,23 +1,24 @@\n-public Complex divide(Complex rhs) throws NullArgumentException {\n-    MathUtils.checkNotNull(rhs);\n-    if (isNaN || rhs.isNaN) {\n+@Override\n+public Complex divide(Complex divisor) throws NullArgumentException {\n+    MathUtils.checkNotNull(divisor);\n+    if (isNaN || divisor.isNaN) {\n         return NaN;\n     }\n-    double c \u003d rhs.getReal();\n-    double d \u003d rhs.getImaginary();\n+    final double c \u003d divisor.getReal();\n+    final double d \u003d divisor.getImaginary();\n     if (c \u003d\u003d 0.0 \u0026\u0026 d \u003d\u003d 0.0) {\n         return NaN;\n     }\n-    if (rhs.isInfinite() \u0026\u0026 !isInfinite()) {\n+    if (divisor.isInfinite() \u0026\u0026 !isInfinite()) {\n         return ZERO;\n     }\n     if (FastMath.abs(c) \u003c FastMath.abs(d)) {\n         double q \u003d c / d;\n         double denominator \u003d c * q + d;\n         return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator);\n     } else {\n         double q \u003d d / c;\n         double denominator \u003d d * q + c;\n         return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "@Override"
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "MATH-577\nVarious enhancements to the \"Complex\" class, namely operators (add,\nsubtract, ...) taking a \"double\" argument, improved consistency in\nthe use of \"NAN\" and \"INF\" fields, updated Javadoc. Mainly due to\nArne Plöse.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1150340 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/24/11, 4:21 AM",
          "commitName": "b522106e845feae4200e37d0bd190fb6cdc5b756",
          "commitAuthor": "Gilles Sadowski",
          "commitDateOld": "7/13/11, 11:08 PM",
          "commitNameOld": "7707b0bb80be05bbf6533a36bb0c646cbfd1026d",
          "commitAuthorOld": "Phil Steitz",
          "daysBetweenCommits": 10.22,
          "commitsBetweenForRepo": 22,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic Complex divide(Complex divisor) throws NullArgumentException {\n    MathUtils.checkNotNull(divisor);\n    if (isNaN || divisor.isNaN) {\n        return NaN;\n    }\n    final double c \u003d divisor.getReal();\n    final double d \u003d divisor.getImaginary();\n    if (c \u003d\u003d 0.0 \u0026\u0026 d \u003d\u003d 0.0) {\n        return NaN;\n    }\n    if (divisor.isInfinite() \u0026\u0026 !isInfinite()) {\n        return ZERO;\n    }\n    if (FastMath.abs(c) \u003c FastMath.abs(d)) {\n        double q \u003d c / d;\n        double denominator \u003d c * q + d;\n        return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator);\n    } else {\n        double q \u003d d / c;\n        double denominator \u003d d * q + c;\n        return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator);\n    }\n}",
          "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
          "functionStartLine": 241,
          "functionName": "divide",
          "functionAnnotation": "@Override",
          "functionDoc": "Returns a {@code Complex} whose value is\n{@code (this / divisor)}.\nImplements the definitional formula\n\u003cpre\u003e\n \u003ccode\u003e\n   a + bi          ac + bd + (bc - ad)i\n   ----------- \u003d -------------------------\n   c + di         c\u003csup\u003e2\u003c/sup\u003e + d\u003csup\u003e2\u003c/sup\u003e\n \u003c/code\u003e\n\u003c/pre\u003e\nbut uses\n\u003ca href\u003d\"http://doi.acm.org/10.1145/1039813.1039814\"\u003e\nprescaling of operands\u003c/a\u003e to limit the effects of overflows and\nunderflows in the computation.\n\u003cbr/\u003e\n{@code Infinite} and {@code NaN} values are handled according to the\nfollowing rules, applied in the order presented:\n\u003cul\u003e\n \u003cli\u003eIf either {@code this} or {@code divisor} has a {@code NaN} value\n  in either part, {@link #NaN} is returned.\n \u003c/li\u003e\n \u003cli\u003eIf {@code divisor} equals {@link #ZERO}, {@link #NaN} is returned.\n \u003c/li\u003e\n \u003cli\u003eIf {@code this} and {@code divisor} are both infinite,\n  {@link #NaN} is returned.\n \u003c/li\u003e\n \u003cli\u003eIf {@code this} is finite (i.e., has no {@code Infinite} or\n  {@code NaN} parts) and {@code divisor} is infinite (one or both parts\n  infinite), {@link #ZERO} is returned.\n \u003c/li\u003e\n \u003cli\u003eIf {@code this} is infinite and {@code divisor} is finite,\n  {@code NaN} values are returned in the parts of the result if the\n  {@link java.lang.Double} rules applied to the definitional formula\n  force {@code NaN} results.\n \u003c/li\u003e\n\u003c/ul\u003e\n\n@param divisor Value by which this {@code Complex} is to be divided.\n@return @code this / divisor}.\n@throws NullArgumentException if {@code divisor} is {@code null}.\n",
          "diff": "@@ -1,23 +1,24 @@\n-public Complex divide(Complex rhs) throws NullArgumentException {\n-    MathUtils.checkNotNull(rhs);\n-    if (isNaN || rhs.isNaN) {\n+@Override\n+public Complex divide(Complex divisor) throws NullArgumentException {\n+    MathUtils.checkNotNull(divisor);\n+    if (isNaN || divisor.isNaN) {\n         return NaN;\n     }\n-    double c \u003d rhs.getReal();\n-    double d \u003d rhs.getImaginary();\n+    final double c \u003d divisor.getReal();\n+    final double d \u003d divisor.getImaginary();\n     if (c \u003d\u003d 0.0 \u0026\u0026 d \u003d\u003d 0.0) {\n         return NaN;\n     }\n-    if (rhs.isInfinite() \u0026\u0026 !isInfinite()) {\n+    if (divisor.isInfinite() \u0026\u0026 !isInfinite()) {\n         return ZERO;\n     }\n     if (FastMath.abs(c) \u003c FastMath.abs(d)) {\n         double q \u003d c / d;\n         double denominator \u003d c * q + d;\n         return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator);\n     } else {\n         double q \u003d d / c;\n         double denominator \u003d d * q + c;\n         return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Return the quotient of this complex number and the given complex number.\n\u003cp\u003e\nImplements the definitional formula\n\u003cpre\u003e\u003ccode\u003e\n   a + bi          ac + bd + (bc - ad)i\n   ----------- \u003d -------------------------\n   c + di         c\u003csup\u003e2\u003c/sup\u003e + d\u003csup\u003e2\u003c/sup\u003e\n\u003c/code\u003e\u003c/pre\u003e\nbut uses\n\u003ca href\u003d\"http://doi.acm.org/10.1145/1039813.1039814\"\u003e\nprescaling of operands\u003c/a\u003e to limit the effects of overflows and\nunderflows in the computation.\u003c/p\u003e\n\u003cp\u003e\nInfinite and NaN values are handled / returned according to the\nfollowing rules, applied in the order presented:\n\u003cul\u003e\n\u003cli\u003eIf either this or \u003ccode\u003erhs\u003c/code\u003e has a NaN value in either part,\n {@link #NaN} is returned.\u003c/li\u003e\n\u003cli\u003eIf \u003ccode\u003erhs\u003c/code\u003e equals {@link #ZERO}, {@link #NaN} is returned.\n\u003c/li\u003e\n\u003cli\u003eIf this and \u003ccode\u003erhs\u003c/code\u003e are both infinite,\n{@link #NaN} is returned.\u003c/li\u003e\n\u003cli\u003eIf this is finite (i.e., has no infinite or NaN parts) and\n \u003ccode\u003erhs\u003c/code\u003e is infinite (one or both parts infinite),\n{@link #ZERO} is returned.\u003c/li\u003e\n\u003cli\u003eIf this is infinite and \u003ccode\u003erhs\u003c/code\u003e is finite, NaN values are\nreturned in the parts of the result if the {@link java.lang.Double}\nrules applied to the definitional formula force NaN results.\u003c/li\u003e\n\u003c/ul\u003e\u003c/p\u003e\n\n@param rhs the other complex number\n@return the complex number quotient\n@throws NullArgumentException if \u003ccode\u003erhs\u003c/code\u003e is null\n",
            "newValue": "Returns a {@code Complex} whose value is\n{@code (this / divisor)}.\nImplements the definitional formula\n\u003cpre\u003e\n \u003ccode\u003e\n   a + bi          ac + bd + (bc - ad)i\n   ----------- \u003d -------------------------\n   c + di         c\u003csup\u003e2\u003c/sup\u003e + d\u003csup\u003e2\u003c/sup\u003e\n \u003c/code\u003e\n\u003c/pre\u003e\nbut uses\n\u003ca href\u003d\"http://doi.acm.org/10.1145/1039813.1039814\"\u003e\nprescaling of operands\u003c/a\u003e to limit the effects of overflows and\nunderflows in the computation.\n\u003cbr/\u003e\n{@code Infinite} and {@code NaN} values are handled according to the\nfollowing rules, applied in the order presented:\n\u003cul\u003e\n \u003cli\u003eIf either {@code this} or {@code divisor} has a {@code NaN} value\n  in either part, {@link #NaN} is returned.\n \u003c/li\u003e\n \u003cli\u003eIf {@code divisor} equals {@link #ZERO}, {@link #NaN} is returned.\n \u003c/li\u003e\n \u003cli\u003eIf {@code this} and {@code divisor} are both infinite,\n  {@link #NaN} is returned.\n \u003c/li\u003e\n \u003cli\u003eIf {@code this} is finite (i.e., has no {@code Infinite} or\n  {@code NaN} parts) and {@code divisor} is infinite (one or both parts\n  infinite), {@link #ZERO} is returned.\n \u003c/li\u003e\n \u003cli\u003eIf {@code this} is infinite and {@code divisor} is finite,\n  {@code NaN} values are returned in the parts of the result if the\n  {@link java.lang.Double} rules applied to the definitional formula\n  force {@code NaN} results.\n \u003c/li\u003e\n\u003c/ul\u003e\n\n@param divisor Value by which this {@code Complex} is to be divided.\n@return @code this / divisor}.\n@throws NullArgumentException if {@code divisor} is {@code null}.\n"
          }
        }
      ]
    },
    "f34508958e47b663652c2ad420e6801f7150dac3": {
      "type": "Ybodychange",
      "commitMessage": "MATH-577\nReplaced function calls by direct reference to the instance variable.\nRemoved redundant prefix for static fields.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1145945 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/13/11, 3:10 AM",
      "commitName": "f34508958e47b663652c2ad420e6801f7150dac3",
      "commitAuthor": "Gilles Sadowski",
      "commitDateOld": "7/13/11, 2:41 AM",
      "commitNameOld": "9ca71cd7ab80b3b6620867272acb35b15bc50921",
      "commitAuthorOld": "Gilles Sadowski",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public Complex divide(Complex rhs) throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    if (isNaN || rhs.isNaN) {\n        return NaN;\n    }\n    double c \u003d rhs.getReal();\n    double d \u003d rhs.getImaginary();\n    if (c \u003d\u003d 0.0 \u0026\u0026 d \u003d\u003d 0.0) {\n        return NaN;\n    }\n    if (rhs.isInfinite() \u0026\u0026 !isInfinite()) {\n        return ZERO;\n    }\n    if (FastMath.abs(c) \u003c FastMath.abs(d)) {\n        double q \u003d c / d;\n        double denominator \u003d c * q + d;\n        return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator);\n    } else {\n        double q \u003d d / c;\n        double denominator \u003d d * q + c;\n        return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator);\n    }\n}",
      "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
      "functionStartLine": 213,
      "functionName": "divide",
      "functionAnnotation": "",
      "functionDoc": "Return the quotient of this complex number and the given complex number.\n\u003cp\u003e\nImplements the definitional formula\n\u003cpre\u003e\u003ccode\u003e\n   a + bi          ac + bd + (bc - ad)i\n   ----------- \u003d -------------------------\n   c + di         c\u003csup\u003e2\u003c/sup\u003e + d\u003csup\u003e2\u003c/sup\u003e\n\u003c/code\u003e\u003c/pre\u003e\nbut uses\n\u003ca href\u003d\"http://doi.acm.org/10.1145/1039813.1039814\"\u003e\nprescaling of operands\u003c/a\u003e to limit the effects of overflows and\nunderflows in the computation.\u003c/p\u003e\n\u003cp\u003e\nInfinite and NaN values are handled / returned according to the\nfollowing rules, applied in the order presented:\n\u003cul\u003e\n\u003cli\u003eIf either this or \u003ccode\u003erhs\u003c/code\u003e has a NaN value in either part,\n {@link #NaN} is returned.\u003c/li\u003e\n\u003cli\u003eIf \u003ccode\u003erhs\u003c/code\u003e equals {@link #ZERO}, {@link #NaN} is returned.\n\u003c/li\u003e\n\u003cli\u003eIf this and \u003ccode\u003erhs\u003c/code\u003e are both infinite,\n{@link #NaN} is returned.\u003c/li\u003e\n\u003cli\u003eIf this is finite (i.e., has no infinite or NaN parts) and\n \u003ccode\u003erhs\u003c/code\u003e is infinite (one or both parts infinite),\n{@link #ZERO} is returned.\u003c/li\u003e\n\u003cli\u003eIf this is infinite and \u003ccode\u003erhs\u003c/code\u003e is finite, NaN values are\nreturned in the parts of the result if the {@link java.lang.Double}\nrules applied to the definitional formula force NaN results.\u003c/li\u003e\n\u003c/ul\u003e\u003c/p\u003e\n\n@param rhs the other complex number\n@return the complex number quotient\n@throws NullArgumentException if \u003ccode\u003erhs\u003c/code\u003e is null\n",
      "diff": "@@ -1,23 +1,23 @@\n public Complex divide(Complex rhs) throws NullArgumentException {\n     MathUtils.checkNotNull(rhs);\n-    if (isNaN() || rhs.isNaN()) {\n+    if (isNaN || rhs.isNaN) {\n         return NaN;\n     }\n     double c \u003d rhs.getReal();\n     double d \u003d rhs.getImaginary();\n     if (c \u003d\u003d 0.0 \u0026\u0026 d \u003d\u003d 0.0) {\n         return NaN;\n     }\n     if (rhs.isInfinite() \u0026\u0026 !isInfinite()) {\n         return ZERO;\n     }\n     if (FastMath.abs(c) \u003c FastMath.abs(d)) {\n         double q \u003d c / d;\n         double denominator \u003d c * q + d;\n         return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator);\n     } else {\n         double q \u003d d / c;\n         double denominator \u003d d * q + c;\n         return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e9c6d1de301072c16a48587db682542f967b3a9b": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange,Ydocchange)",
      "commitMessage": "Replaced NullPointerException by NullArgumentException\n\nJIRA: MATH-403\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1132432 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/5/11, 7:59 AM",
      "commitName": "e9c6d1de301072c16a48587db682542f967b3a9b",
      "commitAuthor": "Luc Maisonobe",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "Replaced NullPointerException by NullArgumentException\n\nJIRA: MATH-403\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1132432 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "6/5/11, 7:59 AM",
          "commitName": "e9c6d1de301072c16a48587db682542f967b3a9b",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "6/3/11, 1:49 PM",
          "commitNameOld": "98e22d778b3a886be253638b9a6b7ec075c3d62d",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 1.76,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public Complex divide(Complex rhs) throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    if (isNaN() || rhs.isNaN()) {\n        return NaN;\n    }\n    double c \u003d rhs.getReal();\n    double d \u003d rhs.getImaginary();\n    if (c \u003d\u003d 0.0 \u0026\u0026 d \u003d\u003d 0.0) {\n        return NaN;\n    }\n    if (rhs.isInfinite() \u0026\u0026 !isInfinite()) {\n        return ZERO;\n    }\n    if (FastMath.abs(c) \u003c FastMath.abs(d)) {\n        double q \u003d c / d;\n        double denominator \u003d c * q + d;\n        return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator);\n    } else {\n        double q \u003d d / c;\n        double denominator \u003d d * q + c;\n        return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator);\n    }\n}",
          "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
          "functionStartLine": 213,
          "functionName": "divide",
          "functionAnnotation": "",
          "functionDoc": "Return the quotient of this complex number and the given complex number.\n\u003cp\u003e\nImplements the definitional formula\n\u003cpre\u003e\u003ccode\u003e\n   a + bi          ac + bd + (bc - ad)i\n   ----------- \u003d -------------------------\n   c + di         c\u003csup\u003e2\u003c/sup\u003e + d\u003csup\u003e2\u003c/sup\u003e\n\u003c/code\u003e\u003c/pre\u003e\nbut uses\n\u003ca href\u003d\"http://doi.acm.org/10.1145/1039813.1039814\"\u003e\nprescaling of operands\u003c/a\u003e to limit the effects of overflows and\nunderflows in the computation.\u003c/p\u003e\n\u003cp\u003e\nInfinite and NaN values are handled / returned according to the\nfollowing rules, applied in the order presented:\n\u003cul\u003e\n\u003cli\u003eIf either this or \u003ccode\u003erhs\u003c/code\u003e has a NaN value in either part,\n {@link #NaN} is returned.\u003c/li\u003e\n\u003cli\u003eIf \u003ccode\u003erhs\u003c/code\u003e equals {@link #ZERO}, {@link #NaN} is returned.\n\u003c/li\u003e\n\u003cli\u003eIf this and \u003ccode\u003erhs\u003c/code\u003e are both infinite,\n{@link #NaN} is returned.\u003c/li\u003e\n\u003cli\u003eIf this is finite (i.e., has no infinite or NaN parts) and\n \u003ccode\u003erhs\u003c/code\u003e is infinite (one or both parts infinite),\n{@link #ZERO} is returned.\u003c/li\u003e\n\u003cli\u003eIf this is infinite and \u003ccode\u003erhs\u003c/code\u003e is finite, NaN values are\nreturned in the parts of the result if the {@link java.lang.Double}\nrules applied to the definitional formula force NaN results.\u003c/li\u003e\n\u003c/ul\u003e\u003c/p\u003e\n\n@param rhs the other complex number\n@return the complex number quotient\n@throws NullArgumentException if \u003ccode\u003erhs\u003c/code\u003e is null\n",
          "diff": "@@ -1,22 +1,23 @@\n-public Complex divide(Complex rhs) {\n+public Complex divide(Complex rhs) throws NullArgumentException {\n+    MathUtils.checkNotNull(rhs);\n     if (isNaN() || rhs.isNaN()) {\n         return NaN;\n     }\n     double c \u003d rhs.getReal();\n     double d \u003d rhs.getImaginary();\n     if (c \u003d\u003d 0.0 \u0026\u0026 d \u003d\u003d 0.0) {\n         return NaN;\n     }\n     if (rhs.isInfinite() \u0026\u0026 !isInfinite()) {\n         return ZERO;\n     }\n     if (FastMath.abs(c) \u003c FastMath.abs(d)) {\n         double q \u003d c / d;\n         double denominator \u003d c * q + d;\n         return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator);\n     } else {\n         double q \u003d d / c;\n         double denominator \u003d d * q + c;\n         return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[NullArgumentException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Replaced NullPointerException by NullArgumentException\n\nJIRA: MATH-403\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1132432 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "6/5/11, 7:59 AM",
          "commitName": "e9c6d1de301072c16a48587db682542f967b3a9b",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "6/3/11, 1:49 PM",
          "commitNameOld": "98e22d778b3a886be253638b9a6b7ec075c3d62d",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 1.76,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public Complex divide(Complex rhs) throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    if (isNaN() || rhs.isNaN()) {\n        return NaN;\n    }\n    double c \u003d rhs.getReal();\n    double d \u003d rhs.getImaginary();\n    if (c \u003d\u003d 0.0 \u0026\u0026 d \u003d\u003d 0.0) {\n        return NaN;\n    }\n    if (rhs.isInfinite() \u0026\u0026 !isInfinite()) {\n        return ZERO;\n    }\n    if (FastMath.abs(c) \u003c FastMath.abs(d)) {\n        double q \u003d c / d;\n        double denominator \u003d c * q + d;\n        return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator);\n    } else {\n        double q \u003d d / c;\n        double denominator \u003d d * q + c;\n        return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator);\n    }\n}",
          "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
          "functionStartLine": 213,
          "functionName": "divide",
          "functionAnnotation": "",
          "functionDoc": "Return the quotient of this complex number and the given complex number.\n\u003cp\u003e\nImplements the definitional formula\n\u003cpre\u003e\u003ccode\u003e\n   a + bi          ac + bd + (bc - ad)i\n   ----------- \u003d -------------------------\n   c + di         c\u003csup\u003e2\u003c/sup\u003e + d\u003csup\u003e2\u003c/sup\u003e\n\u003c/code\u003e\u003c/pre\u003e\nbut uses\n\u003ca href\u003d\"http://doi.acm.org/10.1145/1039813.1039814\"\u003e\nprescaling of operands\u003c/a\u003e to limit the effects of overflows and\nunderflows in the computation.\u003c/p\u003e\n\u003cp\u003e\nInfinite and NaN values are handled / returned according to the\nfollowing rules, applied in the order presented:\n\u003cul\u003e\n\u003cli\u003eIf either this or \u003ccode\u003erhs\u003c/code\u003e has a NaN value in either part,\n {@link #NaN} is returned.\u003c/li\u003e\n\u003cli\u003eIf \u003ccode\u003erhs\u003c/code\u003e equals {@link #ZERO}, {@link #NaN} is returned.\n\u003c/li\u003e\n\u003cli\u003eIf this and \u003ccode\u003erhs\u003c/code\u003e are both infinite,\n{@link #NaN} is returned.\u003c/li\u003e\n\u003cli\u003eIf this is finite (i.e., has no infinite or NaN parts) and\n \u003ccode\u003erhs\u003c/code\u003e is infinite (one or both parts infinite),\n{@link #ZERO} is returned.\u003c/li\u003e\n\u003cli\u003eIf this is infinite and \u003ccode\u003erhs\u003c/code\u003e is finite, NaN values are\nreturned in the parts of the result if the {@link java.lang.Double}\nrules applied to the definitional formula force NaN results.\u003c/li\u003e\n\u003c/ul\u003e\u003c/p\u003e\n\n@param rhs the other complex number\n@return the complex number quotient\n@throws NullArgumentException if \u003ccode\u003erhs\u003c/code\u003e is null\n",
          "diff": "@@ -1,22 +1,23 @@\n-public Complex divide(Complex rhs) {\n+public Complex divide(Complex rhs) throws NullArgumentException {\n+    MathUtils.checkNotNull(rhs);\n     if (isNaN() || rhs.isNaN()) {\n         return NaN;\n     }\n     double c \u003d rhs.getReal();\n     double d \u003d rhs.getImaginary();\n     if (c \u003d\u003d 0.0 \u0026\u0026 d \u003d\u003d 0.0) {\n         return NaN;\n     }\n     if (rhs.isInfinite() \u0026\u0026 !isInfinite()) {\n         return ZERO;\n     }\n     if (FastMath.abs(c) \u003c FastMath.abs(d)) {\n         double q \u003d c / d;\n         double denominator \u003d c * q + d;\n         return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator);\n     } else {\n         double q \u003d d / c;\n         double denominator \u003d d * q + c;\n         return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Replaced NullPointerException by NullArgumentException\n\nJIRA: MATH-403\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1132432 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "6/5/11, 7:59 AM",
          "commitName": "e9c6d1de301072c16a48587db682542f967b3a9b",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "6/3/11, 1:49 PM",
          "commitNameOld": "98e22d778b3a886be253638b9a6b7ec075c3d62d",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 1.76,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public Complex divide(Complex rhs) throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    if (isNaN() || rhs.isNaN()) {\n        return NaN;\n    }\n    double c \u003d rhs.getReal();\n    double d \u003d rhs.getImaginary();\n    if (c \u003d\u003d 0.0 \u0026\u0026 d \u003d\u003d 0.0) {\n        return NaN;\n    }\n    if (rhs.isInfinite() \u0026\u0026 !isInfinite()) {\n        return ZERO;\n    }\n    if (FastMath.abs(c) \u003c FastMath.abs(d)) {\n        double q \u003d c / d;\n        double denominator \u003d c * q + d;\n        return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator);\n    } else {\n        double q \u003d d / c;\n        double denominator \u003d d * q + c;\n        return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator);\n    }\n}",
          "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
          "functionStartLine": 213,
          "functionName": "divide",
          "functionAnnotation": "",
          "functionDoc": "Return the quotient of this complex number and the given complex number.\n\u003cp\u003e\nImplements the definitional formula\n\u003cpre\u003e\u003ccode\u003e\n   a + bi          ac + bd + (bc - ad)i\n   ----------- \u003d -------------------------\n   c + di         c\u003csup\u003e2\u003c/sup\u003e + d\u003csup\u003e2\u003c/sup\u003e\n\u003c/code\u003e\u003c/pre\u003e\nbut uses\n\u003ca href\u003d\"http://doi.acm.org/10.1145/1039813.1039814\"\u003e\nprescaling of operands\u003c/a\u003e to limit the effects of overflows and\nunderflows in the computation.\u003c/p\u003e\n\u003cp\u003e\nInfinite and NaN values are handled / returned according to the\nfollowing rules, applied in the order presented:\n\u003cul\u003e\n\u003cli\u003eIf either this or \u003ccode\u003erhs\u003c/code\u003e has a NaN value in either part,\n {@link #NaN} is returned.\u003c/li\u003e\n\u003cli\u003eIf \u003ccode\u003erhs\u003c/code\u003e equals {@link #ZERO}, {@link #NaN} is returned.\n\u003c/li\u003e\n\u003cli\u003eIf this and \u003ccode\u003erhs\u003c/code\u003e are both infinite,\n{@link #NaN} is returned.\u003c/li\u003e\n\u003cli\u003eIf this is finite (i.e., has no infinite or NaN parts) and\n \u003ccode\u003erhs\u003c/code\u003e is infinite (one or both parts infinite),\n{@link #ZERO} is returned.\u003c/li\u003e\n\u003cli\u003eIf this is infinite and \u003ccode\u003erhs\u003c/code\u003e is finite, NaN values are\nreturned in the parts of the result if the {@link java.lang.Double}\nrules applied to the definitional formula force NaN results.\u003c/li\u003e\n\u003c/ul\u003e\u003c/p\u003e\n\n@param rhs the other complex number\n@return the complex number quotient\n@throws NullArgumentException if \u003ccode\u003erhs\u003c/code\u003e is null\n",
          "diff": "@@ -1,22 +1,23 @@\n-public Complex divide(Complex rhs) {\n+public Complex divide(Complex rhs) throws NullArgumentException {\n+    MathUtils.checkNotNull(rhs);\n     if (isNaN() || rhs.isNaN()) {\n         return NaN;\n     }\n     double c \u003d rhs.getReal();\n     double d \u003d rhs.getImaginary();\n     if (c \u003d\u003d 0.0 \u0026\u0026 d \u003d\u003d 0.0) {\n         return NaN;\n     }\n     if (rhs.isInfinite() \u0026\u0026 !isInfinite()) {\n         return ZERO;\n     }\n     if (FastMath.abs(c) \u003c FastMath.abs(d)) {\n         double q \u003d c / d;\n         double denominator \u003d c * q + d;\n         return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator);\n     } else {\n         double q \u003d d / c;\n         double denominator \u003d d * q + c;\n         return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Return the quotient of this complex number and the given complex number.\n\u003cp\u003e\nImplements the definitional formula\n\u003cpre\u003e\u003ccode\u003e\n   a + bi          ac + bd + (bc - ad)i\n   ----------- \u003d -------------------------\n   c + di         c\u003csup\u003e2\u003c/sup\u003e + d\u003csup\u003e2\u003c/sup\u003e\n\u003c/code\u003e\u003c/pre\u003e\nbut uses\n\u003ca href\u003d\"http://doi.acm.org/10.1145/1039813.1039814\"\u003e\nprescaling of operands\u003c/a\u003e to limit the effects of overflows and\nunderflows in the computation.\u003c/p\u003e\n\u003cp\u003e\nInfinite and NaN values are handled / returned according to the\nfollowing rules, applied in the order presented:\n\u003cul\u003e\n\u003cli\u003eIf either this or \u003ccode\u003erhs\u003c/code\u003e has a NaN value in either part,\n {@link #NaN} is returned.\u003c/li\u003e\n\u003cli\u003eIf \u003ccode\u003erhs\u003c/code\u003e equals {@link #ZERO}, {@link #NaN} is returned.\n\u003c/li\u003e\n\u003cli\u003eIf this and \u003ccode\u003erhs\u003c/code\u003e are both infinite,\n{@link #NaN} is returned.\u003c/li\u003e\n\u003cli\u003eIf this is finite (i.e., has no infinite or NaN parts) and\n \u003ccode\u003erhs\u003c/code\u003e is infinite (one or both parts infinite),\n{@link #ZERO} is returned.\u003c/li\u003e\n\u003cli\u003eIf this is infinite and \u003ccode\u003erhs\u003c/code\u003e is finite, NaN values are\nreturned in the parts of the result if the {@link java.lang.Double}\nrules applied to the definitional formula force NaN results.\u003c/li\u003e\n\u003c/ul\u003e\u003c/p\u003e\n\n@param rhs the other complex number\n@return the complex number quotient\n@throws NullPointerException if \u003ccode\u003erhs\u003c/code\u003e is null\n",
            "newValue": "Return the quotient of this complex number and the given complex number.\n\u003cp\u003e\nImplements the definitional formula\n\u003cpre\u003e\u003ccode\u003e\n   a + bi          ac + bd + (bc - ad)i\n   ----------- \u003d -------------------------\n   c + di         c\u003csup\u003e2\u003c/sup\u003e + d\u003csup\u003e2\u003c/sup\u003e\n\u003c/code\u003e\u003c/pre\u003e\nbut uses\n\u003ca href\u003d\"http://doi.acm.org/10.1145/1039813.1039814\"\u003e\nprescaling of operands\u003c/a\u003e to limit the effects of overflows and\nunderflows in the computation.\u003c/p\u003e\n\u003cp\u003e\nInfinite and NaN values are handled / returned according to the\nfollowing rules, applied in the order presented:\n\u003cul\u003e\n\u003cli\u003eIf either this or \u003ccode\u003erhs\u003c/code\u003e has a NaN value in either part,\n {@link #NaN} is returned.\u003c/li\u003e\n\u003cli\u003eIf \u003ccode\u003erhs\u003c/code\u003e equals {@link #ZERO}, {@link #NaN} is returned.\n\u003c/li\u003e\n\u003cli\u003eIf this and \u003ccode\u003erhs\u003c/code\u003e are both infinite,\n{@link #NaN} is returned.\u003c/li\u003e\n\u003cli\u003eIf this is finite (i.e., has no infinite or NaN parts) and\n \u003ccode\u003erhs\u003c/code\u003e is infinite (one or both parts infinite),\n{@link #ZERO} is returned.\u003c/li\u003e\n\u003cli\u003eIf this is infinite and \u003ccode\u003erhs\u003c/code\u003e is finite, NaN values are\nreturned in the parts of the result if the {@link java.lang.Double}\nrules applied to the definitional formula force NaN results.\u003c/li\u003e\n\u003c/ul\u003e\u003c/p\u003e\n\n@param rhs the other complex number\n@return the complex number quotient\n@throws NullArgumentException if \u003ccode\u003erhs\u003c/code\u003e is null\n"
          }
        }
      ]
    },
    "80b1e90b42a34856b61cec628fcea6633d1000cd": {
      "type": "Ybodychange",
      "commitMessage": "added FastMath and used it everywhere in replacement of java.util.Math\nthe unit tests have not been added yet (waiting for dfp library addition)\nJIRA: MATH-375\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@990658 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/29/10, 3:04 PM",
      "commitName": "80b1e90b42a34856b61cec628fcea6633d1000cd",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "8/10/10, 3:46 AM",
      "commitNameOld": "986597f52ce9c6c1ff13fb134b91696de6ec2796",
      "commitAuthorOld": "Gilles Sadowski",
      "daysBetweenCommits": 19.47,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "public Complex divide(Complex rhs) {\n    if (isNaN() || rhs.isNaN()) {\n        return NaN;\n    }\n    double c \u003d rhs.getReal();\n    double d \u003d rhs.getImaginary();\n    if (c \u003d\u003d 0.0 \u0026\u0026 d \u003d\u003d 0.0) {\n        return NaN;\n    }\n    if (rhs.isInfinite() \u0026\u0026 !isInfinite()) {\n        return ZERO;\n    }\n    if (FastMath.abs(c) \u003c FastMath.abs(d)) {\n        double q \u003d c / d;\n        double denominator \u003d c * q + d;\n        return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator);\n    } else {\n        double q \u003d d / c;\n        double denominator \u003d d * q + c;\n        return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator);\n    }\n}",
      "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
      "functionStartLine": 210,
      "functionName": "divide",
      "functionAnnotation": "",
      "functionDoc": "Return the quotient of this complex number and the given complex number.\n\u003cp\u003e\nImplements the definitional formula\n\u003cpre\u003e\u003ccode\u003e\n   a + bi          ac + bd + (bc - ad)i\n   ----------- \u003d -------------------------\n   c + di         c\u003csup\u003e2\u003c/sup\u003e + d\u003csup\u003e2\u003c/sup\u003e\n\u003c/code\u003e\u003c/pre\u003e\nbut uses\n\u003ca href\u003d\"http://doi.acm.org/10.1145/1039813.1039814\"\u003e\nprescaling of operands\u003c/a\u003e to limit the effects of overflows and\nunderflows in the computation.\u003c/p\u003e\n\u003cp\u003e\nInfinite and NaN values are handled / returned according to the\nfollowing rules, applied in the order presented:\n\u003cul\u003e\n\u003cli\u003eIf either this or \u003ccode\u003erhs\u003c/code\u003e has a NaN value in either part,\n {@link #NaN} is returned.\u003c/li\u003e\n\u003cli\u003eIf \u003ccode\u003erhs\u003c/code\u003e equals {@link #ZERO}, {@link #NaN} is returned.\n\u003c/li\u003e\n\u003cli\u003eIf this and \u003ccode\u003erhs\u003c/code\u003e are both infinite,\n{@link #NaN} is returned.\u003c/li\u003e\n\u003cli\u003eIf this is finite (i.e., has no infinite or NaN parts) and\n \u003ccode\u003erhs\u003c/code\u003e is infinite (one or both parts infinite),\n{@link #ZERO} is returned.\u003c/li\u003e\n\u003cli\u003eIf this is infinite and \u003ccode\u003erhs\u003c/code\u003e is finite, NaN values are\nreturned in the parts of the result if the {@link java.lang.Double}\nrules applied to the definitional formula force NaN results.\u003c/li\u003e\n\u003c/ul\u003e\u003c/p\u003e\n\n@param rhs the other complex number\n@return the complex number quotient\n@throws NullPointerException if \u003ccode\u003erhs\u003c/code\u003e is null\n",
      "diff": "@@ -1,22 +1,22 @@\n public Complex divide(Complex rhs) {\n     if (isNaN() || rhs.isNaN()) {\n         return NaN;\n     }\n     double c \u003d rhs.getReal();\n     double d \u003d rhs.getImaginary();\n     if (c \u003d\u003d 0.0 \u0026\u0026 d \u003d\u003d 0.0) {\n         return NaN;\n     }\n     if (rhs.isInfinite() \u0026\u0026 !isInfinite()) {\n         return ZERO;\n     }\n-    if (Math.abs(c) \u003c Math.abs(d)) {\n+    if (FastMath.abs(c) \u003c FastMath.abs(d)) {\n         double q \u003d c / d;\n         double denominator \u003d c * q + d;\n         return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator);\n     } else {\n         double q \u003d d / c;\n         double denominator \u003d d * q + c;\n         return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "051edd33e81d09cc10e3970b3ee0b1a62914a0ab": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Removed dead code, improved test coverage.  Dead code pointed out in JIRA: MATH-306. Thanks to Joerg Huber.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@830044 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/26/09, 6:32 PM",
      "commitName": "051edd33e81d09cc10e3970b3ee0b1a62914a0ab",
      "commitAuthor": "Phil Steitz",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Removed dead code, improved test coverage.  Dead code pointed out in JIRA: MATH-306. Thanks to Joerg Huber.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@830044 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/26/09, 6:32 PM",
          "commitName": "051edd33e81d09cc10e3970b3ee0b1a62914a0ab",
          "commitAuthor": "Phil Steitz",
          "commitDateOld": "9/6/09, 9:27 AM",
          "commitNameOld": "b631eb68a8aa659e0760de672edfbfb9f9ac246d",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 50.38,
          "commitsBetweenForRepo": 34,
          "commitsBetweenForFile": 1,
          "actualSource": "public Complex divide(Complex rhs) {\n    if (isNaN() || rhs.isNaN()) {\n        return NaN;\n    }\n    double c \u003d rhs.getReal();\n    double d \u003d rhs.getImaginary();\n    if (c \u003d\u003d 0.0 \u0026\u0026 d \u003d\u003d 0.0) {\n        return NaN;\n    }\n    if (rhs.isInfinite() \u0026\u0026 !isInfinite()) {\n        return ZERO;\n    }\n    if (Math.abs(c) \u003c Math.abs(d)) {\n        double q \u003d c / d;\n        double denominator \u003d c * q + d;\n        return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator);\n    } else {\n        double q \u003d d / c;\n        double denominator \u003d d * q + c;\n        return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator);\n    }\n}",
          "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
          "functionStartLine": 208,
          "functionName": "divide",
          "functionAnnotation": "",
          "functionDoc": "Return the quotient of this complex number and the given complex number.\n\u003cp\u003e\nImplements the definitional formula\n\u003cpre\u003e\u003ccode\u003e\n   a + bi          ac + bd + (bc - ad)i\n   ----------- \u003d -------------------------\n   c + di         c\u003csup\u003e2\u003c/sup\u003e + d\u003csup\u003e2\u003c/sup\u003e\n\u003c/code\u003e\u003c/pre\u003e\nbut uses\n\u003ca href\u003d\"http://doi.acm.org/10.1145/1039813.1039814\"\u003e\nprescaling of operands\u003c/a\u003e to limit the effects of overflows and\nunderflows in the computation.\u003c/p\u003e\n\u003cp\u003e\nInfinite and NaN values are handled / returned according to the\nfollowing rules, applied in the order presented:\n\u003cul\u003e\n\u003cli\u003eIf either this or \u003ccode\u003erhs\u003c/code\u003e has a NaN value in either part,\n {@link #NaN} is returned.\u003c/li\u003e\n\u003cli\u003eIf \u003ccode\u003erhs\u003c/code\u003e equals {@link #ZERO}, {@link #NaN} is returned.\n\u003c/li\u003e\n\u003cli\u003eIf this and \u003ccode\u003erhs\u003c/code\u003e are both infinite,\n{@link #NaN} is returned.\u003c/li\u003e\n\u003cli\u003eIf this is finite (i.e., has no infinite or NaN parts) and\n \u003ccode\u003erhs\u003c/code\u003e is infinite (one or both parts infinite),\n{@link #ZERO} is returned.\u003c/li\u003e\n\u003cli\u003eIf this is infinite and \u003ccode\u003erhs\u003c/code\u003e is finite, NaN values are\nreturned in the parts of the result if the {@link java.lang.Double}\nrules applied to the definitional formula force NaN results.\u003c/li\u003e\n\u003c/ul\u003e\u003c/p\u003e\n\n@param rhs the other complex number\n@return the complex number quotient\n@throws NullPointerException if \u003ccode\u003erhs\u003c/code\u003e is null\n",
          "diff": "@@ -1,28 +1,22 @@\n public Complex divide(Complex rhs) {\n     if (isNaN() || rhs.isNaN()) {\n         return NaN;\n     }\n     double c \u003d rhs.getReal();\n     double d \u003d rhs.getImaginary();\n     if (c \u003d\u003d 0.0 \u0026\u0026 d \u003d\u003d 0.0) {\n         return NaN;\n     }\n     if (rhs.isInfinite() \u0026\u0026 !isInfinite()) {\n         return ZERO;\n     }\n     if (Math.abs(c) \u003c Math.abs(d)) {\n-        if (d \u003d\u003d 0.0) {\n-            return createComplex(real / c, imaginary / c);\n-        }\n         double q \u003d c / d;\n         double denominator \u003d c * q + d;\n         return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator);\n     } else {\n-        if (c \u003d\u003d 0.0) {\n-            return createComplex(imaginary / d, -real / c);\n-        }\n         double q \u003d d / c;\n         double denominator \u003d d * q + c;\n         return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Removed dead code, improved test coverage.  Dead code pointed out in JIRA: MATH-306. Thanks to Joerg Huber.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@830044 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/26/09, 6:32 PM",
          "commitName": "051edd33e81d09cc10e3970b3ee0b1a62914a0ab",
          "commitAuthor": "Phil Steitz",
          "commitDateOld": "9/6/09, 9:27 AM",
          "commitNameOld": "b631eb68a8aa659e0760de672edfbfb9f9ac246d",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 50.38,
          "commitsBetweenForRepo": 34,
          "commitsBetweenForFile": 1,
          "actualSource": "public Complex divide(Complex rhs) {\n    if (isNaN() || rhs.isNaN()) {\n        return NaN;\n    }\n    double c \u003d rhs.getReal();\n    double d \u003d rhs.getImaginary();\n    if (c \u003d\u003d 0.0 \u0026\u0026 d \u003d\u003d 0.0) {\n        return NaN;\n    }\n    if (rhs.isInfinite() \u0026\u0026 !isInfinite()) {\n        return ZERO;\n    }\n    if (Math.abs(c) \u003c Math.abs(d)) {\n        double q \u003d c / d;\n        double denominator \u003d c * q + d;\n        return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator);\n    } else {\n        double q \u003d d / c;\n        double denominator \u003d d * q + c;\n        return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator);\n    }\n}",
          "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
          "functionStartLine": 208,
          "functionName": "divide",
          "functionAnnotation": "",
          "functionDoc": "Return the quotient of this complex number and the given complex number.\n\u003cp\u003e\nImplements the definitional formula\n\u003cpre\u003e\u003ccode\u003e\n   a + bi          ac + bd + (bc - ad)i\n   ----------- \u003d -------------------------\n   c + di         c\u003csup\u003e2\u003c/sup\u003e + d\u003csup\u003e2\u003c/sup\u003e\n\u003c/code\u003e\u003c/pre\u003e\nbut uses\n\u003ca href\u003d\"http://doi.acm.org/10.1145/1039813.1039814\"\u003e\nprescaling of operands\u003c/a\u003e to limit the effects of overflows and\nunderflows in the computation.\u003c/p\u003e\n\u003cp\u003e\nInfinite and NaN values are handled / returned according to the\nfollowing rules, applied in the order presented:\n\u003cul\u003e\n\u003cli\u003eIf either this or \u003ccode\u003erhs\u003c/code\u003e has a NaN value in either part,\n {@link #NaN} is returned.\u003c/li\u003e\n\u003cli\u003eIf \u003ccode\u003erhs\u003c/code\u003e equals {@link #ZERO}, {@link #NaN} is returned.\n\u003c/li\u003e\n\u003cli\u003eIf this and \u003ccode\u003erhs\u003c/code\u003e are both infinite,\n{@link #NaN} is returned.\u003c/li\u003e\n\u003cli\u003eIf this is finite (i.e., has no infinite or NaN parts) and\n \u003ccode\u003erhs\u003c/code\u003e is infinite (one or both parts infinite),\n{@link #ZERO} is returned.\u003c/li\u003e\n\u003cli\u003eIf this is infinite and \u003ccode\u003erhs\u003c/code\u003e is finite, NaN values are\nreturned in the parts of the result if the {@link java.lang.Double}\nrules applied to the definitional formula force NaN results.\u003c/li\u003e\n\u003c/ul\u003e\u003c/p\u003e\n\n@param rhs the other complex number\n@return the complex number quotient\n@throws NullPointerException if \u003ccode\u003erhs\u003c/code\u003e is null\n",
          "diff": "@@ -1,28 +1,22 @@\n public Complex divide(Complex rhs) {\n     if (isNaN() || rhs.isNaN()) {\n         return NaN;\n     }\n     double c \u003d rhs.getReal();\n     double d \u003d rhs.getImaginary();\n     if (c \u003d\u003d 0.0 \u0026\u0026 d \u003d\u003d 0.0) {\n         return NaN;\n     }\n     if (rhs.isInfinite() \u0026\u0026 !isInfinite()) {\n         return ZERO;\n     }\n     if (Math.abs(c) \u003c Math.abs(d)) {\n-        if (d \u003d\u003d 0.0) {\n-            return createComplex(real / c, imaginary / c);\n-        }\n         double q \u003d c / d;\n         double denominator \u003d c * q + d;\n         return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator);\n     } else {\n-        if (c \u003d\u003d 0.0) {\n-            return createComplex(imaginary / d, -real / c);\n-        }\n         double q \u003d d / c;\n         double denominator \u003d d * q + c;\n         return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Return the quotient of this complex number and the given complex number.\n\u003cp\u003e\nImplements the definitional formula\n\u003cpre\u003e\u003ccode\u003e\n   a + bi          ac + bd + (bc - ad)i\n   ----------- \u003d -------------------------\n   c + di               c\u003csup\u003e2\u003c/sup\u003e + d\u003csup\u003e2\u003c/sup\u003e\n\u003c/code\u003e\u003c/pre\u003e\nbut uses\n\u003ca href\u003d\"http://doi.acm.org/10.1145/1039813.1039814\"\u003e\nprescaling of operands\u003c/a\u003e to limit the effects of overflows and\nunderflows in the computation.\u003c/p\u003e\n\u003cp\u003e\nInfinite and NaN values are handled / returned according to the\nfollowing rules, applied in the order presented:\n\u003cul\u003e\n\u003cli\u003eIf either this or \u003ccode\u003erhs\u003c/code\u003e has a NaN value in either part,\n {@link #NaN} is returned.\u003c/li\u003e\n\u003cli\u003eIf \u003ccode\u003erhs\u003c/code\u003e equals {@link #ZERO}, {@link #NaN} is returned.\n\u003c/li\u003e\n\u003cli\u003eIf this and \u003ccode\u003erhs\u003c/code\u003e are both infinite,\n{@link #NaN} is returned.\u003c/li\u003e\n\u003cli\u003eIf this is finite (i.e., has no infinite or NaN parts) and\n \u003ccode\u003erhs\u003c/code\u003e is infinite (one or both parts infinite),\n{@link #ZERO} is returned.\u003c/li\u003e\n\u003cli\u003eIf this is infinite and \u003ccode\u003erhs\u003c/code\u003e is finite, NaN values are\nreturned in the parts of the result if the {@link java.lang.Double}\nrules applied to the definitional formula force NaN results.\u003c/li\u003e\n\u003c/ul\u003e\u003c/p\u003e\n\n@param rhs the other complex number\n@return the complex number quotient\n@throws NullPointerException if \u003ccode\u003erhs\u003c/code\u003e is null\n",
            "newValue": "Return the quotient of this complex number and the given complex number.\n\u003cp\u003e\nImplements the definitional formula\n\u003cpre\u003e\u003ccode\u003e\n   a + bi          ac + bd + (bc - ad)i\n   ----------- \u003d -------------------------\n   c + di         c\u003csup\u003e2\u003c/sup\u003e + d\u003csup\u003e2\u003c/sup\u003e\n\u003c/code\u003e\u003c/pre\u003e\nbut uses\n\u003ca href\u003d\"http://doi.acm.org/10.1145/1039813.1039814\"\u003e\nprescaling of operands\u003c/a\u003e to limit the effects of overflows and\nunderflows in the computation.\u003c/p\u003e\n\u003cp\u003e\nInfinite and NaN values are handled / returned according to the\nfollowing rules, applied in the order presented:\n\u003cul\u003e\n\u003cli\u003eIf either this or \u003ccode\u003erhs\u003c/code\u003e has a NaN value in either part,\n {@link #NaN} is returned.\u003c/li\u003e\n\u003cli\u003eIf \u003ccode\u003erhs\u003c/code\u003e equals {@link #ZERO}, {@link #NaN} is returned.\n\u003c/li\u003e\n\u003cli\u003eIf this and \u003ccode\u003erhs\u003c/code\u003e are both infinite,\n{@link #NaN} is returned.\u003c/li\u003e\n\u003cli\u003eIf this is finite (i.e., has no infinite or NaN parts) and\n \u003ccode\u003erhs\u003c/code\u003e is infinite (one or both parts infinite),\n{@link #ZERO} is returned.\u003c/li\u003e\n\u003cli\u003eIf this is infinite and \u003ccode\u003erhs\u003c/code\u003e is finite, NaN values are\nreturned in the parts of the result if the {@link java.lang.Double}\nrules applied to the definitional formula force NaN results.\u003c/li\u003e\n\u003c/ul\u003e\u003c/p\u003e\n\n@param rhs the other complex number\n@return the complex number quotient\n@throws NullPointerException if \u003ccode\u003erhs\u003c/code\u003e is null\n"
          }
        }
      ]
    },
    "26dac5a0e7fc9c6be9571b3e71a15d8502480d96": {
      "type": "Ymultichange(Ydocchange,Yformatchange)",
      "commitMessage": "Removed trailing spaces.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@811685 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/5/09, 10:36 AM",
      "commitName": "26dac5a0e7fc9c6be9571b3e71a15d8502480d96",
      "commitAuthor": "Phil Steitz",
      "subchanges": [
        {
          "type": "Ydocchange",
          "commitMessage": "Removed trailing spaces.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@811685 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "9/5/09, 10:36 AM",
          "commitName": "26dac5a0e7fc9c6be9571b3e71a15d8502480d96",
          "commitAuthor": "Phil Steitz",
          "commitDateOld": "9/1/09, 2:02 PM",
          "commitNameOld": "d6beaeaa9c53aa4e6ae128a856e68a9eeb1cadb8",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 3.86,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "public Complex divide(Complex rhs) {\n    if (isNaN() || rhs.isNaN()) {\n        return NaN;\n    }\n    double c \u003d rhs.getReal();\n    double d \u003d rhs.getImaginary();\n    if (c \u003d\u003d 0.0 \u0026\u0026 d \u003d\u003d 0.0) {\n        return NaN;\n    }\n    if (rhs.isInfinite() \u0026\u0026 !isInfinite()) {\n        return ZERO;\n    }\n    if (Math.abs(c) \u003c Math.abs(d)) {\n        if (d \u003d\u003d 0.0) {\n            return createComplex(real / c, imaginary / c);\n        }\n        double q \u003d c / d;\n        double denominator \u003d c * q + d;\n        return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator);\n    } else {\n        if (c \u003d\u003d 0.0) {\n            return createComplex(imaginary / d, -real / c);\n        }\n        double q \u003d d / c;\n        double denominator \u003d d * q + c;\n        return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator);\n    }\n}",
          "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
          "functionStartLine": 216,
          "functionName": "divide",
          "functionAnnotation": "",
          "functionDoc": "Return the quotient of this complex number and the given complex number.\n\u003cp\u003e\nImplements the definitional formula\n\u003cpre\u003e\u003ccode\u003e\n   a + bi          ac + bd + (bc - ad)i\n   ----------- \u003d -------------------------\n   c + di               c\u003csup\u003e2\u003c/sup\u003e + d\u003csup\u003e2\u003c/sup\u003e\n\u003c/code\u003e\u003c/pre\u003e\nbut uses\n\u003ca href\u003d\"http://doi.acm.org/10.1145/1039813.1039814\"\u003e\nprescaling of operands\u003c/a\u003e to limit the effects of overflows and\nunderflows in the computation.\u003c/p\u003e\n\u003cp\u003e\nInfinite and NaN values are handled / returned according to the\nfollowing rules, applied in the order presented:\n\u003cul\u003e\n\u003cli\u003eIf either this or \u003ccode\u003erhs\u003c/code\u003e has a NaN value in either part,\n {@link #NaN} is returned.\u003c/li\u003e\n\u003cli\u003eIf \u003ccode\u003erhs\u003c/code\u003e equals {@link #ZERO}, {@link #NaN} is returned.\n\u003c/li\u003e\n\u003cli\u003eIf this and \u003ccode\u003erhs\u003c/code\u003e are both infinite,\n{@link #NaN} is returned.\u003c/li\u003e\n\u003cli\u003eIf this is finite (i.e., has no infinite or NaN parts) and\n \u003ccode\u003erhs\u003c/code\u003e is infinite (one or both parts infinite),\n{@link #ZERO} is returned.\u003c/li\u003e\n\u003cli\u003eIf this is infinite and \u003ccode\u003erhs\u003c/code\u003e is finite, NaN values are\nreturned in the parts of the result if the {@link java.lang.Double}\nrules applied to the definitional formula force NaN results.\u003c/li\u003e\n\u003c/ul\u003e\u003c/p\u003e\n\n@param rhs the other complex number\n@return the complex number quotient\n@throws NullPointerException if \u003ccode\u003erhs\u003c/code\u003e is null\n",
          "diff": "",
          "extendedDetails": {
            "oldValue": "Return the quotient of this complex number and the given complex number.\n\u003cp\u003e\nImplements the definitional formula\n\u003cpre\u003e\u003ccode\u003e\n   a + bi          ac + bd + (bc - ad)i\n   ----------- \u003d -------------------------\n   c + di               c\u003csup\u003e2\u003c/sup\u003e + d\u003csup\u003e2\u003c/sup\u003e\n\u003c/code\u003e\u003c/pre\u003e\nbut uses \n\u003ca href\u003d\"http://doi.acm.org/10.1145/1039813.1039814\"\u003e\nprescaling of operands\u003c/a\u003e to limit the effects of overflows and\nunderflows in the computation.\u003c/p\u003e\n\u003cp\u003e\nInfinite and NaN values are handled / returned according to the\nfollowing rules, applied in the order presented:\n\u003cul\u003e\n\u003cli\u003eIf either this or \u003ccode\u003erhs\u003c/code\u003e has a NaN value in either part,\n {@link #NaN} is returned.\u003c/li\u003e\n\u003cli\u003eIf \u003ccode\u003erhs\u003c/code\u003e equals {@link #ZERO}, {@link #NaN} is returned.\n\u003c/li\u003e\n\u003cli\u003eIf this and \u003ccode\u003erhs\u003c/code\u003e are both infinite,\n{@link #NaN} is returned.\u003c/li\u003e\n\u003cli\u003eIf this is finite (i.e., has no infinite or NaN parts) and\n \u003ccode\u003erhs\u003c/code\u003e is infinite (one or both parts infinite), \n{@link #ZERO} is returned.\u003c/li\u003e\n\u003cli\u003eIf this is infinite and \u003ccode\u003erhs\u003c/code\u003e is finite, NaN values are\nreturned in the parts of the result if the {@link java.lang.Double}\nrules applied to the definitional formula force NaN results.\u003c/li\u003e\n\u003c/ul\u003e\u003c/p\u003e\n\n@param rhs the other complex number\n@return the complex number quotient\n@throws NullPointerException if \u003ccode\u003erhs\u003c/code\u003e is null\n",
            "newValue": "Return the quotient of this complex number and the given complex number.\n\u003cp\u003e\nImplements the definitional formula\n\u003cpre\u003e\u003ccode\u003e\n   a + bi          ac + bd + (bc - ad)i\n   ----------- \u003d -------------------------\n   c + di               c\u003csup\u003e2\u003c/sup\u003e + d\u003csup\u003e2\u003c/sup\u003e\n\u003c/code\u003e\u003c/pre\u003e\nbut uses\n\u003ca href\u003d\"http://doi.acm.org/10.1145/1039813.1039814\"\u003e\nprescaling of operands\u003c/a\u003e to limit the effects of overflows and\nunderflows in the computation.\u003c/p\u003e\n\u003cp\u003e\nInfinite and NaN values are handled / returned according to the\nfollowing rules, applied in the order presented:\n\u003cul\u003e\n\u003cli\u003eIf either this or \u003ccode\u003erhs\u003c/code\u003e has a NaN value in either part,\n {@link #NaN} is returned.\u003c/li\u003e\n\u003cli\u003eIf \u003ccode\u003erhs\u003c/code\u003e equals {@link #ZERO}, {@link #NaN} is returned.\n\u003c/li\u003e\n\u003cli\u003eIf this and \u003ccode\u003erhs\u003c/code\u003e are both infinite,\n{@link #NaN} is returned.\u003c/li\u003e\n\u003cli\u003eIf this is finite (i.e., has no infinite or NaN parts) and\n \u003ccode\u003erhs\u003c/code\u003e is infinite (one or both parts infinite),\n{@link #ZERO} is returned.\u003c/li\u003e\n\u003cli\u003eIf this is infinite and \u003ccode\u003erhs\u003c/code\u003e is finite, NaN values are\nreturned in the parts of the result if the {@link java.lang.Double}\nrules applied to the definitional formula force NaN results.\u003c/li\u003e\n\u003c/ul\u003e\u003c/p\u003e\n\n@param rhs the other complex number\n@return the complex number quotient\n@throws NullPointerException if \u003ccode\u003erhs\u003c/code\u003e is null\n"
          }
        },
        {
          "type": "Yformatchange",
          "commitMessage": "Removed trailing spaces.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@811685 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "9/5/09, 10:36 AM",
          "commitName": "26dac5a0e7fc9c6be9571b3e71a15d8502480d96",
          "commitAuthor": "Phil Steitz",
          "commitDateOld": "9/1/09, 2:02 PM",
          "commitNameOld": "d6beaeaa9c53aa4e6ae128a856e68a9eeb1cadb8",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 3.86,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "public Complex divide(Complex rhs) {\n    if (isNaN() || rhs.isNaN()) {\n        return NaN;\n    }\n    double c \u003d rhs.getReal();\n    double d \u003d rhs.getImaginary();\n    if (c \u003d\u003d 0.0 \u0026\u0026 d \u003d\u003d 0.0) {\n        return NaN;\n    }\n    if (rhs.isInfinite() \u0026\u0026 !isInfinite()) {\n        return ZERO;\n    }\n    if (Math.abs(c) \u003c Math.abs(d)) {\n        if (d \u003d\u003d 0.0) {\n            return createComplex(real / c, imaginary / c);\n        }\n        double q \u003d c / d;\n        double denominator \u003d c * q + d;\n        return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator);\n    } else {\n        if (c \u003d\u003d 0.0) {\n            return createComplex(imaginary / d, -real / c);\n        }\n        double q \u003d d / c;\n        double denominator \u003d d * q + c;\n        return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator);\n    }\n}",
          "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
          "functionStartLine": 216,
          "functionName": "divide",
          "functionAnnotation": "",
          "functionDoc": "Return the quotient of this complex number and the given complex number.\n\u003cp\u003e\nImplements the definitional formula\n\u003cpre\u003e\u003ccode\u003e\n   a + bi          ac + bd + (bc - ad)i\n   ----------- \u003d -------------------------\n   c + di               c\u003csup\u003e2\u003c/sup\u003e + d\u003csup\u003e2\u003c/sup\u003e\n\u003c/code\u003e\u003c/pre\u003e\nbut uses\n\u003ca href\u003d\"http://doi.acm.org/10.1145/1039813.1039814\"\u003e\nprescaling of operands\u003c/a\u003e to limit the effects of overflows and\nunderflows in the computation.\u003c/p\u003e\n\u003cp\u003e\nInfinite and NaN values are handled / returned according to the\nfollowing rules, applied in the order presented:\n\u003cul\u003e\n\u003cli\u003eIf either this or \u003ccode\u003erhs\u003c/code\u003e has a NaN value in either part,\n {@link #NaN} is returned.\u003c/li\u003e\n\u003cli\u003eIf \u003ccode\u003erhs\u003c/code\u003e equals {@link #ZERO}, {@link #NaN} is returned.\n\u003c/li\u003e\n\u003cli\u003eIf this and \u003ccode\u003erhs\u003c/code\u003e are both infinite,\n{@link #NaN} is returned.\u003c/li\u003e\n\u003cli\u003eIf this is finite (i.e., has no infinite or NaN parts) and\n \u003ccode\u003erhs\u003c/code\u003e is infinite (one or both parts infinite),\n{@link #ZERO} is returned.\u003c/li\u003e\n\u003cli\u003eIf this is infinite and \u003ccode\u003erhs\u003c/code\u003e is finite, NaN values are\nreturned in the parts of the result if the {@link java.lang.Double}\nrules applied to the definitional formula force NaN results.\u003c/li\u003e\n\u003c/ul\u003e\u003c/p\u003e\n\n@param rhs the other complex number\n@return the complex number quotient\n@throws NullPointerException if \u003ccode\u003erhs\u003c/code\u003e is null\n",
          "diff": "",
          "extendedDetails": {}
        }
      ]
    },
    "d6a438e931412713e99624cf9ed74470f1040184": {
      "type": "Yfilerename",
      "commitMessage": "moved main java directory for compliance with maven standard directory layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@799870 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/1/09, 7:30 AM",
      "commitName": "d6a438e931412713e99624cf9ed74470f1040184",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "8/1/09, 7:23 AM",
      "commitNameOld": "2ad5ef61630be627f46ae1c266cf796f044bd4a8",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public Complex divide(Complex rhs) {\n    if (isNaN() || rhs.isNaN()) {\n        return NaN;\n    }\n    double c \u003d rhs.getReal();\n    double d \u003d rhs.getImaginary();\n    if (c \u003d\u003d 0.0 \u0026\u0026 d \u003d\u003d 0.0) {\n        return NaN;\n    }\n    if (rhs.isInfinite() \u0026\u0026 !isInfinite()) {\n        return ZERO;\n    }\n    if (Math.abs(c) \u003c Math.abs(d)) {\n        if (d \u003d\u003d 0.0) {\n            return createComplex(real / c, imaginary / c);\n        }\n        double q \u003d c / d;\n        double denominator \u003d c * q + d;\n        return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator);\n    } else {\n        if (c \u003d\u003d 0.0) {\n            return createComplex(imaginary / d, -real / c);\n        }\n        double q \u003d d / c;\n        double denominator \u003d d * q + c;\n        return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator);\n    }\n}",
      "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
      "functionStartLine": 214,
      "functionName": "divide",
      "functionAnnotation": "",
      "functionDoc": "Return the quotient of this complex number and the given complex number.\n\u003cp\u003e\nImplements the definitional formula\n\u003cpre\u003e\u003ccode\u003e\n   a + bi          ac + bd + (bc - ad)i\n   ----------- \u003d -------------------------\n   c + di               c\u003csup\u003e2\u003c/sup\u003e + d\u003csup\u003e2\u003c/sup\u003e\n\u003c/code\u003e\u003c/pre\u003e\nbut uses \n\u003ca href\u003d\"http://doi.acm.org/10.1145/1039813.1039814\"\u003e\nprescaling of operands\u003c/a\u003e to limit the effects of overflows and\nunderflows in the computation.\u003c/p\u003e\n\u003cp\u003e\nInfinite and NaN values are handled / returned according to the\nfollowing rules, applied in the order presented:\n\u003cul\u003e\n\u003cli\u003eIf either this or \u003ccode\u003erhs\u003c/code\u003e has a NaN value in either part,\n {@link #NaN} is returned.\u003c/li\u003e\n\u003cli\u003eIf \u003ccode\u003erhs\u003c/code\u003e equals {@link #ZERO}, {@link #NaN} is returned.\n\u003c/li\u003e\n\u003cli\u003eIf this and \u003ccode\u003erhs\u003c/code\u003e are both infinite,\n{@link #NaN} is returned.\u003c/li\u003e\n\u003cli\u003eIf this is finite (i.e., has no infinite or NaN parts) and\n \u003ccode\u003erhs\u003c/code\u003e is infinite (one or both parts infinite), \n{@link #ZERO} is returned.\u003c/li\u003e\n\u003cli\u003eIf this is infinite and \u003ccode\u003erhs\u003c/code\u003e is finite, NaN values are\nreturned in the parts of the result if the {@link java.lang.Double}\nrules applied to the definitional formula force NaN results.\u003c/li\u003e\n\u003c/ul\u003e\u003c/p\u003e\n\n@param rhs the other complex number\n@return the complex number quotient\n@throws NullPointerException if \u003ccode\u003erhs\u003c/code\u003e is null\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/math/complex/Complex.java",
        "newPath": "src/main/java/org/apache/commons/math/complex/Complex.java"
      }
    },
    "932ebf87acd81162cc7b1751c18b0e0ca760c8bf": {
      "type": "Ydocchange",
      "commitMessage": "Javadoc only. Added missing \u003c/p\u003e\u0027s\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@615734 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/27/08, 10:10 PM",
      "commitName": "932ebf87acd81162cc7b1751c18b0e0ca760c8bf",
      "commitAuthor": "Phil Steitz",
      "commitDateOld": "1/8/08, 11:30 PM",
      "commitNameOld": "6375e636998ba899dd6354a5aaf60b357dbe66d6",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 18.94,
      "commitsBetweenForRepo": 54,
      "commitsBetweenForFile": 1,
      "actualSource": "public Complex divide(Complex rhs) {\n    if (isNaN() || rhs.isNaN()) {\n        return NaN;\n    }\n    double c \u003d rhs.getReal();\n    double d \u003d rhs.getImaginary();\n    if (c \u003d\u003d 0.0 \u0026\u0026 d \u003d\u003d 0.0) {\n        return NaN;\n    }\n    if (rhs.isInfinite() \u0026\u0026 !isInfinite()) {\n        return ZERO;\n    }\n    if (Math.abs(c) \u003c Math.abs(d)) {\n        if (d \u003d\u003d 0.0) {\n            return createComplex(real / c, imaginary / c);\n        }\n        double q \u003d c / d;\n        double denominator \u003d c * q + d;\n        return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator);\n    } else {\n        if (c \u003d\u003d 0.0) {\n            return createComplex(imaginary / d, -real / c);\n        }\n        double q \u003d d / c;\n        double denominator \u003d d * q + c;\n        return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator);\n    }\n}",
      "path": "src/java/org/apache/commons/math/complex/Complex.java",
      "functionStartLine": 190,
      "functionName": "divide",
      "functionAnnotation": "",
      "functionDoc": "Return the quotient of this complex number and the given complex number.\n\u003cp\u003e\nImplements the definitional formula\n\u003cpre\u003e\u003ccode\u003e\n   a + bi          ac + bd + (bc - ad)i\n   ----------- \u003d -------------------------\n   c + di               c\u003csup\u003e2\u003c/sup\u003e + d\u003csup\u003e2\u003c/sup\u003e\n\u003c/code\u003e\u003c/pre\u003e\nbut uses \n\u003ca href\u003d\"http://doi.acm.org/10.1145/1039813.1039814\"\u003e\nprescaling of operands\u003c/a\u003e to limit the effects of overflows and\nunderflows in the computation.\u003c/p\u003e\n\u003cp\u003e\nInfinite and NaN values are handled / returned according to the\nfollowing rules, applied in the order presented:\n\u003cul\u003e\n\u003cli\u003eIf either this or \u003ccode\u003erhs\u003c/code\u003e has a NaN value in either part,\n {@link #NaN} is returned.\u003c/li\u003e\n\u003cli\u003eIf \u003ccode\u003erhs\u003c/code\u003e equals {@link #ZERO}, {@link #NaN} is returned.\n\u003c/li\u003e\n\u003cli\u003eIf this and \u003ccode\u003erhs\u003c/code\u003e are both infinite,\n{@link #NaN} is returned.\u003c/li\u003e\n\u003cli\u003eIf this is finite (i.e., has no infinite or NaN parts) and\n \u003ccode\u003erhs\u003c/code\u003e is infinite (one or both parts infinite), \n{@link #ZERO} is returned.\u003c/li\u003e\n\u003cli\u003eIf this is infinite and \u003ccode\u003erhs\u003c/code\u003e is finite, NaN values are\nreturned in the parts of the result if the {@link java.lang.Double}\nrules applied to the definitional formula force NaN results.\u003c/li\u003e\n\u003c/ul\u003e\u003c/p\u003e\n\n@param rhs the other complex number\n@return the complex number quotient\n@throws NullPointerException if \u003ccode\u003erhs\u003c/code\u003e is null\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Return the quotient of this complex number and the given complex number.\n\u003cp\u003e\nImplements the definitional formula\n\u003cpre\u003e\u003ccode\u003e\n   a + bi          ac + bd + (bc - ad)i\n   ----------- \u003d -------------------------\n   c + di               c\u003csup\u003e2\u003c/sup\u003e + d\u003csup\u003e2\u003c/sup\u003e\n\u003c/code\u003e\u003c/pre\u003e\nbut uses \n\u003ca href\u003d\"http://doi.acm.org/10.1145/1039813.1039814\"\u003e\nprescaling of operands\u003c/a\u003e to limit the effects of overflows and\nunderflows in the computation.\n\u003cp\u003e\nInfinite and NaN values are handled / returned according to the\nfollowing rules, applied in the order presented:\n\u003cul\u003e\n\u003cli\u003eIf either this or \u003ccode\u003erhs\u003c/code\u003e has a NaN value in either part,\n {@link #NaN} is returned.\u003c/li\u003e\n\u003cli\u003eIf \u003ccode\u003erhs\u003c/code\u003e equals {@link #ZERO}, {@link #NaN} is returned.\n\u003c/li\u003e\n\u003cli\u003eIf this and \u003ccode\u003erhs\u003c/code\u003e are both infinite,\n{@link #NaN} is returned.\u003c/li\u003e\n\u003cli\u003eIf this is finite (i.e., has no infinite or NaN parts) and\n \u003ccode\u003erhs\u003c/code\u003e is infinite (one or both parts infinite), \n{@link #ZERO} is returned.\u003c/li\u003e\n\u003cli\u003eIf this is infinite and \u003ccode\u003erhs\u003c/code\u003e is finite, NaN values are\nreturned in the parts of the result if the {@link java.lang.Double}\nrules applied to the definitional formula force NaN results.\u003c/li\u003e\n\u003c/ul\u003e\n\n@param rhs the other complex number\n@return the complex number quotient\n@throws NullPointerException if \u003ccode\u003erhs\u003c/code\u003e is null\n",
        "newValue": "Return the quotient of this complex number and the given complex number.\n\u003cp\u003e\nImplements the definitional formula\n\u003cpre\u003e\u003ccode\u003e\n   a + bi          ac + bd + (bc - ad)i\n   ----------- \u003d -------------------------\n   c + di               c\u003csup\u003e2\u003c/sup\u003e + d\u003csup\u003e2\u003c/sup\u003e\n\u003c/code\u003e\u003c/pre\u003e\nbut uses \n\u003ca href\u003d\"http://doi.acm.org/10.1145/1039813.1039814\"\u003e\nprescaling of operands\u003c/a\u003e to limit the effects of overflows and\nunderflows in the computation.\u003c/p\u003e\n\u003cp\u003e\nInfinite and NaN values are handled / returned according to the\nfollowing rules, applied in the order presented:\n\u003cul\u003e\n\u003cli\u003eIf either this or \u003ccode\u003erhs\u003c/code\u003e has a NaN value in either part,\n {@link #NaN} is returned.\u003c/li\u003e\n\u003cli\u003eIf \u003ccode\u003erhs\u003c/code\u003e equals {@link #ZERO}, {@link #NaN} is returned.\n\u003c/li\u003e\n\u003cli\u003eIf this and \u003ccode\u003erhs\u003c/code\u003e are both infinite,\n{@link #NaN} is returned.\u003c/li\u003e\n\u003cli\u003eIf this is finite (i.e., has no infinite or NaN parts) and\n \u003ccode\u003erhs\u003c/code\u003e is infinite (one or both parts infinite), \n{@link #ZERO} is returned.\u003c/li\u003e\n\u003cli\u003eIf this is infinite and \u003ccode\u003erhs\u003c/code\u003e is finite, NaN values are\nreturned in the parts of the result if the {@link java.lang.Double}\nrules applied to the definitional formula force NaN results.\u003c/li\u003e\n\u003c/ul\u003e\u003c/p\u003e\n\n@param rhs the other complex number\n@return the complex number quotient\n@throws NullPointerException if \u003ccode\u003erhs\u003c/code\u003e is null\n"
      }
    },
    "912d9beb43edb26caf87a32f08664ea634136c73": {
      "type": "Ybodychange",
      "commitMessage": "Merged most functions from ComplexUtils into Complex class, added\nstatic factory method to Complex.\nJIRA: MATH-171\nReported and patched by Niall Pemberton\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@596159 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/18/07, 3:38 PM",
      "commitName": "912d9beb43edb26caf87a32f08664ea634136c73",
      "commitAuthor": "Phil Steitz",
      "commitDateOld": "11/28/06, 11:14 PM",
      "commitNameOld": "05f7f6059bd0cbb69b5dd49c061f1f3520e0ee1e",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 354.68,
      "commitsBetweenForRepo": 180,
      "commitsBetweenForFile": 1,
      "actualSource": "public Complex divide(Complex rhs) {\n    if (isNaN() || rhs.isNaN()) {\n        return NaN;\n    }\n    double c \u003d rhs.getReal();\n    double d \u003d rhs.getImaginary();\n    if (c \u003d\u003d 0.0 \u0026\u0026 d \u003d\u003d 0.0) {\n        return NaN;\n    }\n    if (rhs.isInfinite() \u0026\u0026 !isInfinite()) {\n        return ZERO;\n    }\n    if (Math.abs(c) \u003c Math.abs(d)) {\n        if (d \u003d\u003d 0.0) {\n            return createComplex(real / c, imaginary / c);\n        }\n        double q \u003d c / d;\n        double denominator \u003d c * q + d;\n        return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator);\n    } else {\n        if (c \u003d\u003d 0.0) {\n            return createComplex(imaginary / d, -real / c);\n        }\n        double q \u003d d / c;\n        double denominator \u003d d * q + c;\n        return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator);\n    }\n}",
      "path": "src/java/org/apache/commons/math/complex/Complex.java",
      "functionStartLine": 187,
      "functionName": "divide",
      "functionAnnotation": "",
      "functionDoc": "Return the quotient of this complex number and the given complex number.\n\u003cp\u003e\nImplements the definitional formula\n\u003cpre\u003e\u003ccode\u003e\n   a + bi          ac + bd + (bc - ad)i\n   ----------- \u003d -------------------------\n   c + di               c\u003csup\u003e2\u003c/sup\u003e + d\u003csup\u003e2\u003c/sup\u003e\n\u003c/code\u003e\u003c/pre\u003e\nbut uses \n\u003ca href\u003d\"http://doi.acm.org/10.1145/1039813.1039814\"\u003e\nprescaling of operands\u003c/a\u003e to limit the effects of overflows and\nunderflows in the computation.\n\u003cp\u003e\nInfinite and NaN values are handled / returned according to the\nfollowing rules, applied in the order presented:\n\u003cul\u003e\n\u003cli\u003eIf either this or \u003ccode\u003erhs\u003c/code\u003e has a NaN value in either part,\n {@link #NaN} is returned.\u003c/li\u003e\n\u003cli\u003eIf \u003ccode\u003erhs\u003c/code\u003e equals {@link #ZERO}, {@link #NaN} is returned.\n\u003c/li\u003e\n\u003cli\u003eIf this and \u003ccode\u003erhs\u003c/code\u003e are both infinite,\n{@link #NaN} is returned.\u003c/li\u003e\n\u003cli\u003eIf this is finite (i.e., has no infinite or NaN parts) and\n \u003ccode\u003erhs\u003c/code\u003e is infinite (one or both parts infinite), \n{@link #ZERO} is returned.\u003c/li\u003e\n\u003cli\u003eIf this is infinite and \u003ccode\u003erhs\u003c/code\u003e is finite, NaN values are\nreturned in the parts of the result if the {@link java.lang.Double}\nrules applied to the definitional formula force NaN results.\u003c/li\u003e\n\u003c/ul\u003e\n\n@param rhs the other complex number\n@return the complex number quotient\n@throws NullPointerException if \u003ccode\u003erhs\u003c/code\u003e is null\n",
      "diff": "@@ -1,28 +1,28 @@\n public Complex divide(Complex rhs) {\n     if (isNaN() || rhs.isNaN()) {\n         return NaN;\n     }\n     double c \u003d rhs.getReal();\n     double d \u003d rhs.getImaginary();\n     if (c \u003d\u003d 0.0 \u0026\u0026 d \u003d\u003d 0.0) {\n         return NaN;\n     }\n     if (rhs.isInfinite() \u0026\u0026 !isInfinite()) {\n         return ZERO;\n     }\n     if (Math.abs(c) \u003c Math.abs(d)) {\n         if (d \u003d\u003d 0.0) {\n-            return new Complex(real / c, imaginary / c);\n+            return createComplex(real / c, imaginary / c);\n         }\n         double q \u003d c / d;\n         double denominator \u003d c * q + d;\n-        return new Complex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator);\n+        return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator);\n     } else {\n         if (c \u003d\u003d 0.0) {\n-            return new Complex(imaginary / d, -real / c);\n+            return createComplex(imaginary / d, -real / c);\n         }\n         double q \u003d d / c;\n         double denominator \u003d d * q + c;\n-        return new Complex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator);\n+        return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6ef3b2932f4ca9219e41784bb0cd229dcabcdb11": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Merged (final) src changes from MATH_1_1 release branch r321516-358399\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@358631 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/22/05, 1:16 PM",
      "commitName": "6ef3b2932f4ca9219e41784bb0cd229dcabcdb11",
      "commitAuthor": "Phil Steitz",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Merged (final) src changes from MATH_1_1 release branch r321516-358399\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@358631 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/22/05, 1:16 PM",
          "commitName": "6ef3b2932f4ca9219e41784bb0cd229dcabcdb11",
          "commitAuthor": "Phil Steitz",
          "commitDateOld": "10/15/05, 8:29 PM",
          "commitNameOld": "545e47a273803b1d080b186c8cf139492f82c4fb",
          "commitAuthorOld": "Phil Steitz",
          "daysBetweenCommits": 67.74,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "actualSource": "public Complex divide(Complex rhs) {\n    if (isNaN() || rhs.isNaN()) {\n        return NaN;\n    }\n    double c \u003d rhs.getReal();\n    double d \u003d rhs.getImaginary();\n    if (c \u003d\u003d 0.0 \u0026\u0026 d \u003d\u003d 0.0) {\n        return NaN;\n    }\n    if (rhs.isInfinite() \u0026\u0026 !isInfinite()) {\n        return ZERO;\n    }\n    if (Math.abs(c) \u003c Math.abs(d)) {\n        if (d \u003d\u003d 0.0) {\n            return new Complex(real / c, imaginary / c);\n        }\n        double q \u003d c / d;\n        double denominator \u003d c * q + d;\n        return new Complex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator);\n    } else {\n        if (c \u003d\u003d 0.0) {\n            return new Complex(imaginary / d, -real / c);\n        }\n        double q \u003d d / c;\n        double denominator \u003d d * q + c;\n        return new Complex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator);\n    }\n}",
          "path": "src/java/org/apache/commons/math/complex/Complex.java",
          "functionStartLine": 186,
          "functionName": "divide",
          "functionAnnotation": "",
          "functionDoc": "Return the quotient of this complex number and the given complex number.\n\u003cp\u003e\nImplements the definitional formula\n\u003cpre\u003e\u003ccode\u003e\n   a + bi          ac + bd + (bc - ad)i\n   ----------- \u003d -------------------------\n   c + di               c\u003csup\u003e2\u003c/sup\u003e + d\u003csup\u003e2\u003c/sup\u003e\n\u003c/code\u003e\u003c/pre\u003e\nbut uses \n\u003ca href\u003d\"http://doi.acm.org/10.1145/1039813.1039814\"\u003e\nprescaling of operands\u003c/a\u003e to limit the effects of overflows and\nunderflows in the computation.\n\u003cp\u003e\nInfinite and NaN values are handled / returned according to the\nfollowing rules, applied in the order presented:\n\u003cul\u003e\n\u003cli\u003eIf either this or \u003ccode\u003erhs\u003c/code\u003e has a NaN value in either part,\n {@link #NaN} is returned.\u003c/li\u003e\n\u003cli\u003eIf \u003ccode\u003erhs\u003c/code\u003e equals {@link #ZERO}, {@link #NaN} is returned.\n\u003c/li\u003e\n\u003cli\u003eIf this and \u003ccode\u003erhs\u003c/code\u003e are both infinite,\n{@link #NaN} is returned.\u003c/li\u003e\n\u003cli\u003eIf this is finite (i.e., has no infinite or NaN parts) and\n \u003ccode\u003erhs\u003c/code\u003e is infinite (one or both parts infinite), \n{@link #ZERO} is returned.\u003c/li\u003e\n\u003cli\u003eIf this is infinite and \u003ccode\u003erhs\u003c/code\u003e is finite, NaN values are\nreturned in the parts of the result if the {@link java.lang.Double}\nrules applied to the definitional formula force NaN results.\u003c/li\u003e\n\u003c/ul\u003e\n\n@param rhs the other complex number\n@return the complex number quotient\n@throws NullPointerException if \u003ccode\u003erhs\u003c/code\u003e is null\n",
          "diff": "@@ -1,25 +1,28 @@\n public Complex divide(Complex rhs) {\n     if (isNaN() || rhs.isNaN()) {\n         return NaN;\n     }\n     double c \u003d rhs.getReal();\n     double d \u003d rhs.getImaginary();\n     if (c \u003d\u003d 0.0 \u0026\u0026 d \u003d\u003d 0.0) {\n-        throw new ArithmeticException(\"Error: division by zero.\");\n+        return NaN;\n+    }\n+    if (rhs.isInfinite() \u0026\u0026 !isInfinite()) {\n+        return ZERO;\n     }\n     if (Math.abs(c) \u003c Math.abs(d)) {\n         if (d \u003d\u003d 0.0) {\n             return new Complex(real / c, imaginary / c);\n         }\n         double q \u003d c / d;\n         double denominator \u003d c * q + d;\n         return new Complex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator);\n     } else {\n         if (c \u003d\u003d 0.0) {\n             return new Complex(imaginary / d, -real / c);\n         }\n         double q \u003d d / c;\n         double denominator \u003d d * q + c;\n         return new Complex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Merged (final) src changes from MATH_1_1 release branch r321516-358399\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@358631 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/22/05, 1:16 PM",
          "commitName": "6ef3b2932f4ca9219e41784bb0cd229dcabcdb11",
          "commitAuthor": "Phil Steitz",
          "commitDateOld": "10/15/05, 8:29 PM",
          "commitNameOld": "545e47a273803b1d080b186c8cf139492f82c4fb",
          "commitAuthorOld": "Phil Steitz",
          "daysBetweenCommits": 67.74,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "actualSource": "public Complex divide(Complex rhs) {\n    if (isNaN() || rhs.isNaN()) {\n        return NaN;\n    }\n    double c \u003d rhs.getReal();\n    double d \u003d rhs.getImaginary();\n    if (c \u003d\u003d 0.0 \u0026\u0026 d \u003d\u003d 0.0) {\n        return NaN;\n    }\n    if (rhs.isInfinite() \u0026\u0026 !isInfinite()) {\n        return ZERO;\n    }\n    if (Math.abs(c) \u003c Math.abs(d)) {\n        if (d \u003d\u003d 0.0) {\n            return new Complex(real / c, imaginary / c);\n        }\n        double q \u003d c / d;\n        double denominator \u003d c * q + d;\n        return new Complex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator);\n    } else {\n        if (c \u003d\u003d 0.0) {\n            return new Complex(imaginary / d, -real / c);\n        }\n        double q \u003d d / c;\n        double denominator \u003d d * q + c;\n        return new Complex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator);\n    }\n}",
          "path": "src/java/org/apache/commons/math/complex/Complex.java",
          "functionStartLine": 186,
          "functionName": "divide",
          "functionAnnotation": "",
          "functionDoc": "Return the quotient of this complex number and the given complex number.\n\u003cp\u003e\nImplements the definitional formula\n\u003cpre\u003e\u003ccode\u003e\n   a + bi          ac + bd + (bc - ad)i\n   ----------- \u003d -------------------------\n   c + di               c\u003csup\u003e2\u003c/sup\u003e + d\u003csup\u003e2\u003c/sup\u003e\n\u003c/code\u003e\u003c/pre\u003e\nbut uses \n\u003ca href\u003d\"http://doi.acm.org/10.1145/1039813.1039814\"\u003e\nprescaling of operands\u003c/a\u003e to limit the effects of overflows and\nunderflows in the computation.\n\u003cp\u003e\nInfinite and NaN values are handled / returned according to the\nfollowing rules, applied in the order presented:\n\u003cul\u003e\n\u003cli\u003eIf either this or \u003ccode\u003erhs\u003c/code\u003e has a NaN value in either part,\n {@link #NaN} is returned.\u003c/li\u003e\n\u003cli\u003eIf \u003ccode\u003erhs\u003c/code\u003e equals {@link #ZERO}, {@link #NaN} is returned.\n\u003c/li\u003e\n\u003cli\u003eIf this and \u003ccode\u003erhs\u003c/code\u003e are both infinite,\n{@link #NaN} is returned.\u003c/li\u003e\n\u003cli\u003eIf this is finite (i.e., has no infinite or NaN parts) and\n \u003ccode\u003erhs\u003c/code\u003e is infinite (one or both parts infinite), \n{@link #ZERO} is returned.\u003c/li\u003e\n\u003cli\u003eIf this is infinite and \u003ccode\u003erhs\u003c/code\u003e is finite, NaN values are\nreturned in the parts of the result if the {@link java.lang.Double}\nrules applied to the definitional formula force NaN results.\u003c/li\u003e\n\u003c/ul\u003e\n\n@param rhs the other complex number\n@return the complex number quotient\n@throws NullPointerException if \u003ccode\u003erhs\u003c/code\u003e is null\n",
          "diff": "@@ -1,25 +1,28 @@\n public Complex divide(Complex rhs) {\n     if (isNaN() || rhs.isNaN()) {\n         return NaN;\n     }\n     double c \u003d rhs.getReal();\n     double d \u003d rhs.getImaginary();\n     if (c \u003d\u003d 0.0 \u0026\u0026 d \u003d\u003d 0.0) {\n-        throw new ArithmeticException(\"Error: division by zero.\");\n+        return NaN;\n+    }\n+    if (rhs.isInfinite() \u0026\u0026 !isInfinite()) {\n+        return ZERO;\n     }\n     if (Math.abs(c) \u003c Math.abs(d)) {\n         if (d \u003d\u003d 0.0) {\n             return new Complex(real / c, imaginary / c);\n         }\n         double q \u003d c / d;\n         double denominator \u003d c * q + d;\n         return new Complex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator);\n     } else {\n         if (c \u003d\u003d 0.0) {\n             return new Complex(imaginary / d, -real / c);\n         }\n         double q \u003d d / c;\n         double denominator \u003d d * q + c;\n         return new Complex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Return the quotient of this complex number and the given complex number.\n\n@param rhs the other complex number.\n@return the complex number quotient.\n",
            "newValue": "Return the quotient of this complex number and the given complex number.\n\u003cp\u003e\nImplements the definitional formula\n\u003cpre\u003e\u003ccode\u003e\n   a + bi          ac + bd + (bc - ad)i\n   ----------- \u003d -------------------------\n   c + di               c\u003csup\u003e2\u003c/sup\u003e + d\u003csup\u003e2\u003c/sup\u003e\n\u003c/code\u003e\u003c/pre\u003e\nbut uses \n\u003ca href\u003d\"http://doi.acm.org/10.1145/1039813.1039814\"\u003e\nprescaling of operands\u003c/a\u003e to limit the effects of overflows and\nunderflows in the computation.\n\u003cp\u003e\nInfinite and NaN values are handled / returned according to the\nfollowing rules, applied in the order presented:\n\u003cul\u003e\n\u003cli\u003eIf either this or \u003ccode\u003erhs\u003c/code\u003e has a NaN value in either part,\n {@link #NaN} is returned.\u003c/li\u003e\n\u003cli\u003eIf \u003ccode\u003erhs\u003c/code\u003e equals {@link #ZERO}, {@link #NaN} is returned.\n\u003c/li\u003e\n\u003cli\u003eIf this and \u003ccode\u003erhs\u003c/code\u003e are both infinite,\n{@link #NaN} is returned.\u003c/li\u003e\n\u003cli\u003eIf this is finite (i.e., has no infinite or NaN parts) and\n \u003ccode\u003erhs\u003c/code\u003e is infinite (one or both parts infinite), \n{@link #ZERO} is returned.\u003c/li\u003e\n\u003cli\u003eIf this is infinite and \u003ccode\u003erhs\u003c/code\u003e is finite, NaN values are\nreturned in the parts of the result if the {@link java.lang.Double}\nrules applied to the definitional formula force NaN results.\u003c/li\u003e\n\u003c/ul\u003e\n\n@param rhs the other complex number\n@return the complex number quotient\n@throws NullPointerException if \u003ccode\u003erhs\u003c/code\u003e is null\n"
          }
        }
      ]
    },
    "ad6929ea0c89c085422c1e43bb3f763a0e3d25e4": {
      "type": "Ybodychange",
      "commitMessage": "Merged changes in MATH_1_1 branch to trunk.  This includes revision 232577 through revision 234481.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@239294 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/22/05, 7:27 PM",
      "commitName": "ad6929ea0c89c085422c1e43bb3f763a0e3d25e4",
      "commitAuthor": "Brent Worden",
      "commitDateOld": "2/26/05, 5:11 AM",
      "commitNameOld": "65b65f88b74de6b3462b04b2cf2a69f064a77557",
      "commitAuthorOld": "Dirk Verbeeck",
      "daysBetweenCommits": 177.55,
      "commitsBetweenForRepo": 77,
      "commitsBetweenForFile": 1,
      "actualSource": "public Complex divide(Complex rhs) {\n    if (isNaN() || rhs.isNaN()) {\n        return NaN;\n    }\n    double c \u003d rhs.getReal();\n    double d \u003d rhs.getImaginary();\n    if (c \u003d\u003d 0.0 \u0026\u0026 d \u003d\u003d 0.0) {\n        throw new ArithmeticException(\"Error: division by zero.\");\n    }\n    if (Math.abs(c) \u003c Math.abs(d)) {\n        if (d \u003d\u003d 0.0) {\n            return new Complex(real / c, imaginary / c);\n        }\n        double q \u003d c / d;\n        double denominator \u003d c * q + d;\n        return new Complex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator);\n    } else {\n        if (c \u003d\u003d 0.0) {\n            return new Complex(imaginary / d, -real / c);\n        }\n        double q \u003d d / c;\n        double denominator \u003d d * q + c;\n        return new Complex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator);\n    }\n}",
      "path": "src/java/org/apache/commons/math/complex/Complex.java",
      "functionStartLine": 119,
      "functionName": "divide",
      "functionAnnotation": "",
      "functionDoc": "Return the quotient of this complex number and the given complex number.\n\n@param rhs the other complex number.\n@return the complex number quotient.\n",
      "diff": "@@ -1,14 +1,25 @@\n public Complex divide(Complex rhs) {\n     if (isNaN() || rhs.isNaN()) {\n         return NaN;\n     }\n-    if (Math.abs(rhs.getReal()) \u003c Math.abs(rhs.getImaginary())) {\n-        double q \u003d rhs.getReal() / rhs.getImaginary();\n-        double d \u003d (rhs.getReal() * q) + rhs.getImaginary();\n-        return new Complex(((real * q) + imaginary) / d, ((imaginary * q) - real) / d);\n+    double c \u003d rhs.getReal();\n+    double d \u003d rhs.getImaginary();\n+    if (c \u003d\u003d 0.0 \u0026\u0026 d \u003d\u003d 0.0) {\n+        throw new ArithmeticException(\"Error: division by zero.\");\n+    }\n+    if (Math.abs(c) \u003c Math.abs(d)) {\n+        if (d \u003d\u003d 0.0) {\n+            return new Complex(real / c, imaginary / c);\n+        }\n+        double q \u003d c / d;\n+        double denominator \u003d c * q + d;\n+        return new Complex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator);\n     } else {\n-        double q \u003d rhs.getImaginary() / rhs.getReal();\n-        double d \u003d (rhs.getImaginary() * q) + rhs.getReal();\n-        return new Complex(((imaginary * q) + real) / d, (imaginary - (real * q)) / d);\n+        if (c \u003d\u003d 0.0) {\n+            return new Complex(imaginary / d, -real / c);\n+        }\n+        double q \u003d d / c;\n+        double denominator \u003d d * q + c;\n+        return new Complex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0a904461932f2c0455611e77ec6a8d8aced2980b": {
      "type": "Yintroduced",
      "commitMessage": "Attempting to recover last revision.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141013 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/14/03, 2:25 PM",
      "commitName": "0a904461932f2c0455611e77ec6a8d8aced2980b",
      "commitAuthor": "Mark R. Diggory",
      "diff": "@@ -0,0 +1,14 @@\n+public Complex divide(Complex rhs) {\n+    if (isNaN() || rhs.isNaN()) {\n+        return NaN;\n+    }\n+    if (Math.abs(rhs.getReal()) \u003c Math.abs(rhs.getImaginary())) {\n+        double q \u003d rhs.getReal() / rhs.getImaginary();\n+        double d \u003d (rhs.getReal() * q) + rhs.getImaginary();\n+        return new Complex(((real * q) + imaginary) / d, ((imaginary * q) - real) / d);\n+    } else {\n+        double q \u003d rhs.getImaginary() / rhs.getReal();\n+        double d \u003d (rhs.getImaginary() * q) + rhs.getReal();\n+        return new Complex(((imaginary * q) + real) / d, (imaginary - (real * q)) / d);\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "public Complex divide(Complex rhs) {\n    if (isNaN() || rhs.isNaN()) {\n        return NaN;\n    }\n    if (Math.abs(rhs.getReal()) \u003c Math.abs(rhs.getImaginary())) {\n        double q \u003d rhs.getReal() / rhs.getImaginary();\n        double d \u003d (rhs.getReal() * q) + rhs.getImaginary();\n        return new Complex(((real * q) + imaginary) / d, ((imaginary * q) - real) / d);\n    } else {\n        double q \u003d rhs.getImaginary() / rhs.getReal();\n        double d \u003d (rhs.getImaginary() * q) + rhs.getReal();\n        return new Complex(((imaginary * q) + real) / d, (imaginary - (real * q)) / d);\n    }\n}",
      "path": "src/java/org/apache/commons/math/complex/Complex.java",
      "functionStartLine": 135,
      "functionName": "divide",
      "functionAnnotation": "",
      "functionDoc": "Return the quotient of this complex number and the given complex number.\n\n@param rhs the other complex number.\n@return the complex number quotient.\n"
    }
  }
}