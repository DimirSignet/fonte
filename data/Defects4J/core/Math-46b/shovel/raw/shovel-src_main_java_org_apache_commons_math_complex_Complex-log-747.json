{
  "origin": "codeshovel",
  "repositoryName": "Math-46b",
  "repositoryPath": "/tmp/Math-46b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Complex.java",
  "functionName": "log",
  "functionId": "log",
  "sourceFilePath": "src/main/java/org/apache/commons/math/complex/Complex.java",
  "functionAnnotation": "",
  "functionDoc": "Compute the\n\u003ca href\u003d\"http://mathworld.wolfram.com/NaturalLogarithm.html\" TARGET\u003d\"_top\"\u003e\nnatural logarithm\u003c/a\u003e of this complex number.\nImplements the formula:\n\u003cpre\u003e\n \u003ccode\u003e\n  log(a + bi) \u003d ln(|a + bi|) + arg(a + bi)i\n \u003c/code\u003e\n\u003c/pre\u003e\nwhere ln on the right hand side is {@link java.lang.Math#log},\n{@code |a + bi|} is the modulus, {@link Complex#abs},  and\n{@code arg(a + bi) \u003d }{@link java.lang.Math#atan2}(b, a).\n\u003cbr/\u003e\nReturns {@link Complex#NaN} if either real or imaginary part of the\ninput argument is {@code NaN}.\n\u003cbr/\u003e\nInfinite (or critical) values in real or imaginary parts of the input may\nresult in infinite or NaN values returned in parts of the result.\n\u003cpre\u003e\n Examples:\n \u003ccode\u003e\n  log(1 \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (\u0026pi;/2)i\n  log(INFINITY + i) \u003d INFINITY + 0i\n  log(-INFINITY + i) \u003d INFINITY + \u0026pi;i\n  log(INFINITY \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (\u0026pi;/4)i\n  log(-INFINITY \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (3\u0026pi;/4)i\n  log(0 + 0i) \u003d -INFINITY + 0i\n \u003c/code\u003e\n\u003c/pre\u003e\n\n@return the value \u003ccode\u003eln \u0026nbsp; this\u003c/code\u003e, the natural logarithm\nof {@code this}.\n@since 1.2\n",
  "functionStartLine": 747,
  "functionEndLine": 754,
  "numCommitsSeen": 58,
  "timeTaken": 2194,
  "changeHistory": [
    "2e221fa5f9c32e964b4f3073475f314a9f3c5d99",
    "b522106e845feae4200e37d0bd190fb6cdc5b756",
    "f34508958e47b663652c2ad420e6801f7150dac3",
    "80b1e90b42a34856b61cec628fcea6633d1000cd",
    "26dac5a0e7fc9c6be9571b3e71a15d8502480d96",
    "d6a438e931412713e99624cf9ed74470f1040184",
    "932ebf87acd81162cc7b1751c18b0e0ca760c8bf",
    "912d9beb43edb26caf87a32f08664ea634136c73"
  ],
  "changeHistoryShort": {
    "2e221fa5f9c32e964b4f3073475f314a9f3c5d99": "Ydocchange",
    "b522106e845feae4200e37d0bd190fb6cdc5b756": "Ymultichange(Ydocchange,Yformatchange)",
    "f34508958e47b663652c2ad420e6801f7150dac3": "Ybodychange",
    "80b1e90b42a34856b61cec628fcea6633d1000cd": "Ybodychange",
    "26dac5a0e7fc9c6be9571b3e71a15d8502480d96": "Ymultichange(Ydocchange,Yformatchange)",
    "d6a438e931412713e99624cf9ed74470f1040184": "Yfilerename",
    "932ebf87acd81162cc7b1751c18b0e0ca760c8bf": "Ydocchange",
    "912d9beb43edb26caf87a32f08664ea634136c73": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2e221fa5f9c32e964b4f3073475f314a9f3c5d99": {
      "type": "Ydocchange",
      "commitMessage": "Nested inline tags are not allowed\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1150380 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/24/11, 7:28 AM",
      "commitName": "2e221fa5f9c32e964b4f3073475f314a9f3c5d99",
      "commitAuthor": "Sebastian Bazley",
      "commitDateOld": "7/24/11, 7:24 AM",
      "commitNameOld": "3fb72699d911f4b9a4a18a30a75e9d9c4bb7305f",
      "commitAuthorOld": "Sebastian Bazley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public Complex log() {\n    if (isNaN) {\n        return NaN;\n    }\n    return createComplex(FastMath.log(abs()), FastMath.atan2(imaginary, real));\n}",
      "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
      "functionStartLine": 734,
      "functionName": "log",
      "functionAnnotation": "",
      "functionDoc": "Compute the\n\u003ca href\u003d\"http://mathworld.wolfram.com/NaturalLogarithm.html\" TARGET\u003d\"_top\"\u003e\nnatural logarithm\u003c/a\u003e of this complex number.\nImplements the formula:\n\u003cpre\u003e\n \u003ccode\u003e\n  log(a + bi) \u003d ln(|a + bi|) + arg(a + bi)i\n \u003c/code\u003e\n\u003c/pre\u003e\nwhere ln on the right hand side is {@link java.lang.Math#log},\n{@code |a + bi|} is the modulus, {@link Complex#abs},  and\n{@code arg(a + bi) \u003d }{@link java.lang.Math#atan2}(b, a).\n\u003cbr/\u003e\nReturns {@link Complex#NaN} if either real or imaginary part of the\ninput argument is {@code NaN}.\n\u003cbr/\u003e\nInfinite (or critical) values in real or imaginary parts of the input may\nresult in infinite or NaN values returned in parts of the result.\n\u003cpre\u003e\n Examples:\n \u003ccode\u003e\n  log(1 \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (\u0026pi;/2)i\n  log(INFINITY + i) \u003d INFINITY + 0i\n  log(-INFINITY + i) \u003d INFINITY + \u0026pi;i\n  log(INFINITY \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (\u0026pi;/4)i\n  log(-INFINITY \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (3\u0026pi;/4)i\n  log(0 + 0i) \u003d -INFINITY + 0i\n \u003c/code\u003e\n\u003c/pre\u003e\n\n@return the value \u003ccode\u003eln \u0026nbsp; this\u003c/code\u003e, the natural logarithm\nof {@code this}.\n@since 1.2\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Compute the\n\u003ca href\u003d\"http://mathworld.wolfram.com/NaturalLogarithm.html\" TARGET\u003d\"_top\"\u003e\nnatural logarithm\u003c/a\u003e of this complex number.\nImplements the formula:\n\u003cpre\u003e\n \u003ccode\u003e\n  log(a + bi) \u003d ln(|a + bi|) + arg(a + bi)i\n \u003c/code\u003e\n\u003c/pre\u003e\nwhere ln on the right hand side is {@link java.lang.Math#log},\n{@code |a + bi|} is the modulus, {@link Complex#abs},  and\n{@code arg(a + bi) \u003d {@link java.lang.Math#atan2}(b, a)}.\n\u003cbr/\u003e\nReturns {@link Complex#NaN} if either real or imaginary part of the\ninput argument is {@code NaN}.\n\u003cbr/\u003e\nInfinite (or critical) values in real or imaginary parts of the input may\nresult in infinite or NaN values returned in parts of the result.\n\u003cpre\u003e\n Examples:\n \u003ccode\u003e\n  log(1 \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (\u0026pi;/2)i\n  log(INFINITY + i) \u003d INFINITY + 0i\n  log(-INFINITY + i) \u003d INFINITY + \u0026pi;i\n  log(INFINITY \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (\u0026pi;/4)i\n  log(-INFINITY \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (3\u0026pi;/4)i\n  log(0 + 0i) \u003d -INFINITY + 0i\n \u003c/code\u003e\n\u003c/pre\u003e\n\n@return the value \u003ccode\u003eln \u0026nbsp; this\u003c/code\u003e, the natural logarithm\nof {@code this}.\n@since 1.2\n",
        "newValue": "Compute the\n\u003ca href\u003d\"http://mathworld.wolfram.com/NaturalLogarithm.html\" TARGET\u003d\"_top\"\u003e\nnatural logarithm\u003c/a\u003e of this complex number.\nImplements the formula:\n\u003cpre\u003e\n \u003ccode\u003e\n  log(a + bi) \u003d ln(|a + bi|) + arg(a + bi)i\n \u003c/code\u003e\n\u003c/pre\u003e\nwhere ln on the right hand side is {@link java.lang.Math#log},\n{@code |a + bi|} is the modulus, {@link Complex#abs},  and\n{@code arg(a + bi) \u003d }{@link java.lang.Math#atan2}(b, a).\n\u003cbr/\u003e\nReturns {@link Complex#NaN} if either real or imaginary part of the\ninput argument is {@code NaN}.\n\u003cbr/\u003e\nInfinite (or critical) values in real or imaginary parts of the input may\nresult in infinite or NaN values returned in parts of the result.\n\u003cpre\u003e\n Examples:\n \u003ccode\u003e\n  log(1 \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (\u0026pi;/2)i\n  log(INFINITY + i) \u003d INFINITY + 0i\n  log(-INFINITY + i) \u003d INFINITY + \u0026pi;i\n  log(INFINITY \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (\u0026pi;/4)i\n  log(-INFINITY \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (3\u0026pi;/4)i\n  log(0 + 0i) \u003d -INFINITY + 0i\n \u003c/code\u003e\n\u003c/pre\u003e\n\n@return the value \u003ccode\u003eln \u0026nbsp; this\u003c/code\u003e, the natural logarithm\nof {@code this}.\n@since 1.2\n"
      }
    },
    "b522106e845feae4200e37d0bd190fb6cdc5b756": {
      "type": "Ymultichange(Ydocchange,Yformatchange)",
      "commitMessage": "MATH-577\nVarious enhancements to the \"Complex\" class, namely operators (add,\nsubtract, ...) taking a \"double\" argument, improved consistency in\nthe use of \"NAN\" and \"INF\" fields, updated Javadoc. Mainly due to\nArne Plöse.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1150340 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/24/11, 4:21 AM",
      "commitName": "b522106e845feae4200e37d0bd190fb6cdc5b756",
      "commitAuthor": "Gilles Sadowski",
      "subchanges": [
        {
          "type": "Ydocchange",
          "commitMessage": "MATH-577\nVarious enhancements to the \"Complex\" class, namely operators (add,\nsubtract, ...) taking a \"double\" argument, improved consistency in\nthe use of \"NAN\" and \"INF\" fields, updated Javadoc. Mainly due to\nArne Plöse.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1150340 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/24/11, 4:21 AM",
          "commitName": "b522106e845feae4200e37d0bd190fb6cdc5b756",
          "commitAuthor": "Gilles Sadowski",
          "commitDateOld": "7/13/11, 11:08 PM",
          "commitNameOld": "7707b0bb80be05bbf6533a36bb0c646cbfd1026d",
          "commitAuthorOld": "Phil Steitz",
          "daysBetweenCommits": 10.22,
          "commitsBetweenForRepo": 22,
          "commitsBetweenForFile": 1,
          "actualSource": "public Complex log() {\n    if (isNaN) {\n        return NaN;\n    }\n    return createComplex(FastMath.log(abs()), FastMath.atan2(imaginary, real));\n}",
          "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
          "functionStartLine": 738,
          "functionName": "log",
          "functionAnnotation": "",
          "functionDoc": "Compute the\n\u003ca href\u003d\"http://mathworld.wolfram.com/NaturalLogarithm.html\" TARGET\u003d\"_top\"\u003e\nnatural logarithm\u003c/a\u003e of this complex number.\nImplements the formula:\n\u003cpre\u003e\n \u003ccode\u003e\n  log(a + bi) \u003d ln(|a + bi|) + arg(a + bi)i\n \u003c/code\u003e\n\u003c/pre\u003e\nwhere ln on the right hand side is {@link java.lang.Math#log},\n{@code |a + bi|} is the modulus, {@link Complex#abs},  and\n{@code arg(a + bi) \u003d {@link java.lang.Math#atan2}(b, a)}.\n\u003cbr/\u003e\nReturns {@link Complex#NaN} if either real or imaginary part of the\ninput argument is {@code NaN}.\n\u003cbr/\u003e\nInfinite (or critical) values in real or imaginary parts of the input may\nresult in infinite or NaN values returned in parts of the result.\n\u003cpre\u003e\n Examples:\n \u003ccode\u003e\n  log(1 \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (\u0026pi;/2)i\n  log(INFINITY + i) \u003d INFINITY + 0i\n  log(-INFINITY + i) \u003d INFINITY + \u0026pi;i\n  log(INFINITY \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (\u0026pi;/4)i\n  log(-INFINITY \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (3\u0026pi;/4)i\n  log(0 + 0i) \u003d -INFINITY + 0i\n \u003c/code\u003e\n\u003c/pre\u003e\n\n@return the value \u003ccode\u003eln \u0026nbsp; this\u003c/code\u003e, the natural logarithm\nof {@code this}.\n@since 1.2\n",
          "diff": "",
          "extendedDetails": {
            "oldValue": "Compute the\n\u003ca href\u003d\"http://mathworld.wolfram.com/NaturalLogarithm.html\" TARGET\u003d\"_top\"\u003e\nnatural logarithm\u003c/a\u003e of this complex number.\n\u003cp\u003e\nImplements the formula: \u003cpre\u003e\n\u003ccode\u003e log(a + bi) \u003d ln(|a + bi|) + arg(a + bi)i\u003c/code\u003e\u003c/pre\u003e\nwhere ln on the right hand side is {@link java.lang.Math#log},\n\u003ccode\u003e|a + bi|\u003c/code\u003e is the modulus, {@link Complex#abs},  and\n\u003ccode\u003earg(a + bi) \u003d {@link java.lang.Math#atan2}(b, a)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\nReturns {@link Complex#NaN} if either real or imaginary part of the\ninput argument is \u003ccode\u003eNaN\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\nInfinite (or critical) values in real or imaginary parts of the input may\nresult in infinite or NaN values returned in parts of the result.\u003cpre\u003e\nExamples:\n\u003ccode\u003e\nlog(1 \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (\u0026pi;/2)i\nlog(INFINITY + i) \u003d INFINITY + 0i\nlog(-INFINITY + i) \u003d INFINITY + \u0026pi;i\nlog(INFINITY \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (\u0026pi;/4)i\nlog(-INFINITY \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (3\u0026pi;/4)i\nlog(0 + 0i) \u003d -INFINITY + 0i\n\u003c/code\u003e\u003c/pre\u003e\u003c/p\u003e\n\n@return ln of this complex number.\n@since 1.2\n",
            "newValue": "Compute the\n\u003ca href\u003d\"http://mathworld.wolfram.com/NaturalLogarithm.html\" TARGET\u003d\"_top\"\u003e\nnatural logarithm\u003c/a\u003e of this complex number.\nImplements the formula:\n\u003cpre\u003e\n \u003ccode\u003e\n  log(a + bi) \u003d ln(|a + bi|) + arg(a + bi)i\n \u003c/code\u003e\n\u003c/pre\u003e\nwhere ln on the right hand side is {@link java.lang.Math#log},\n{@code |a + bi|} is the modulus, {@link Complex#abs},  and\n{@code arg(a + bi) \u003d {@link java.lang.Math#atan2}(b, a)}.\n\u003cbr/\u003e\nReturns {@link Complex#NaN} if either real or imaginary part of the\ninput argument is {@code NaN}.\n\u003cbr/\u003e\nInfinite (or critical) values in real or imaginary parts of the input may\nresult in infinite or NaN values returned in parts of the result.\n\u003cpre\u003e\n Examples:\n \u003ccode\u003e\n  log(1 \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (\u0026pi;/2)i\n  log(INFINITY + i) \u003d INFINITY + 0i\n  log(-INFINITY + i) \u003d INFINITY + \u0026pi;i\n  log(INFINITY \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (\u0026pi;/4)i\n  log(-INFINITY \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (3\u0026pi;/4)i\n  log(0 + 0i) \u003d -INFINITY + 0i\n \u003c/code\u003e\n\u003c/pre\u003e\n\n@return the value \u003ccode\u003eln \u0026nbsp; this\u003c/code\u003e, the natural logarithm\nof {@code this}.\n@since 1.2\n"
          }
        },
        {
          "type": "Yformatchange",
          "commitMessage": "MATH-577\nVarious enhancements to the \"Complex\" class, namely operators (add,\nsubtract, ...) taking a \"double\" argument, improved consistency in\nthe use of \"NAN\" and \"INF\" fields, updated Javadoc. Mainly due to\nArne Plöse.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1150340 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/24/11, 4:21 AM",
          "commitName": "b522106e845feae4200e37d0bd190fb6cdc5b756",
          "commitAuthor": "Gilles Sadowski",
          "commitDateOld": "7/13/11, 11:08 PM",
          "commitNameOld": "7707b0bb80be05bbf6533a36bb0c646cbfd1026d",
          "commitAuthorOld": "Phil Steitz",
          "daysBetweenCommits": 10.22,
          "commitsBetweenForRepo": 22,
          "commitsBetweenForFile": 1,
          "actualSource": "public Complex log() {\n    if (isNaN) {\n        return NaN;\n    }\n    return createComplex(FastMath.log(abs()), FastMath.atan2(imaginary, real));\n}",
          "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
          "functionStartLine": 738,
          "functionName": "log",
          "functionAnnotation": "",
          "functionDoc": "Compute the\n\u003ca href\u003d\"http://mathworld.wolfram.com/NaturalLogarithm.html\" TARGET\u003d\"_top\"\u003e\nnatural logarithm\u003c/a\u003e of this complex number.\nImplements the formula:\n\u003cpre\u003e\n \u003ccode\u003e\n  log(a + bi) \u003d ln(|a + bi|) + arg(a + bi)i\n \u003c/code\u003e\n\u003c/pre\u003e\nwhere ln on the right hand side is {@link java.lang.Math#log},\n{@code |a + bi|} is the modulus, {@link Complex#abs},  and\n{@code arg(a + bi) \u003d {@link java.lang.Math#atan2}(b, a)}.\n\u003cbr/\u003e\nReturns {@link Complex#NaN} if either real or imaginary part of the\ninput argument is {@code NaN}.\n\u003cbr/\u003e\nInfinite (or critical) values in real or imaginary parts of the input may\nresult in infinite or NaN values returned in parts of the result.\n\u003cpre\u003e\n Examples:\n \u003ccode\u003e\n  log(1 \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (\u0026pi;/2)i\n  log(INFINITY + i) \u003d INFINITY + 0i\n  log(-INFINITY + i) \u003d INFINITY + \u0026pi;i\n  log(INFINITY \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (\u0026pi;/4)i\n  log(-INFINITY \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (3\u0026pi;/4)i\n  log(0 + 0i) \u003d -INFINITY + 0i\n \u003c/code\u003e\n\u003c/pre\u003e\n\n@return the value \u003ccode\u003eln \u0026nbsp; this\u003c/code\u003e, the natural logarithm\nof {@code this}.\n@since 1.2\n",
          "diff": "",
          "extendedDetails": {}
        }
      ]
    },
    "f34508958e47b663652c2ad420e6801f7150dac3": {
      "type": "Ybodychange",
      "commitMessage": "MATH-577\nReplaced function calls by direct reference to the instance variable.\nRemoved redundant prefix for static fields.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1145945 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/13/11, 3:10 AM",
      "commitName": "f34508958e47b663652c2ad420e6801f7150dac3",
      "commitAuthor": "Gilles Sadowski",
      "commitDateOld": "7/13/11, 2:41 AM",
      "commitNameOld": "9ca71cd7ab80b3b6620867272acb35b15bc50921",
      "commitAuthorOld": "Gilles Sadowski",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public Complex log() {\n    if (isNaN) {\n        return NaN;\n    }\n    return createComplex(FastMath.log(abs()), FastMath.atan2(imaginary, real));\n}",
      "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
      "functionStartLine": 662,
      "functionName": "log",
      "functionAnnotation": "",
      "functionDoc": "Compute the\n\u003ca href\u003d\"http://mathworld.wolfram.com/NaturalLogarithm.html\" TARGET\u003d\"_top\"\u003e\nnatural logarithm\u003c/a\u003e of this complex number.\n\u003cp\u003e\nImplements the formula: \u003cpre\u003e\n\u003ccode\u003e log(a + bi) \u003d ln(|a + bi|) + arg(a + bi)i\u003c/code\u003e\u003c/pre\u003e\nwhere ln on the right hand side is {@link java.lang.Math#log},\n\u003ccode\u003e|a + bi|\u003c/code\u003e is the modulus, {@link Complex#abs},  and\n\u003ccode\u003earg(a + bi) \u003d {@link java.lang.Math#atan2}(b, a)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\nReturns {@link Complex#NaN} if either real or imaginary part of the\ninput argument is \u003ccode\u003eNaN\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\nInfinite (or critical) values in real or imaginary parts of the input may\nresult in infinite or NaN values returned in parts of the result.\u003cpre\u003e\nExamples:\n\u003ccode\u003e\nlog(1 \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (\u0026pi;/2)i\nlog(INFINITY + i) \u003d INFINITY + 0i\nlog(-INFINITY + i) \u003d INFINITY + \u0026pi;i\nlog(INFINITY \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (\u0026pi;/4)i\nlog(-INFINITY \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (3\u0026pi;/4)i\nlog(0 + 0i) \u003d -INFINITY + 0i\n\u003c/code\u003e\u003c/pre\u003e\u003c/p\u003e\n\n@return ln of this complex number.\n@since 1.2\n",
      "diff": "@@ -1,6 +1,6 @@\n public Complex log() {\n-    if (isNaN()) {\n-        return Complex.NaN;\n+    if (isNaN) {\n+        return NaN;\n     }\n     return createComplex(FastMath.log(abs()), FastMath.atan2(imaginary, real));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "80b1e90b42a34856b61cec628fcea6633d1000cd": {
      "type": "Ybodychange",
      "commitMessage": "added FastMath and used it everywhere in replacement of java.util.Math\nthe unit tests have not been added yet (waiting for dfp library addition)\nJIRA: MATH-375\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@990658 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/29/10, 3:04 PM",
      "commitName": "80b1e90b42a34856b61cec628fcea6633d1000cd",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "8/10/10, 3:46 AM",
      "commitNameOld": "986597f52ce9c6c1ff13fb134b91696de6ec2796",
      "commitAuthorOld": "Gilles Sadowski",
      "daysBetweenCommits": 19.47,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "public Complex log() {\n    if (isNaN()) {\n        return Complex.NaN;\n    }\n    return createComplex(FastMath.log(abs()), FastMath.atan2(imaginary, real));\n}",
      "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
      "functionStartLine": 653,
      "functionName": "log",
      "functionAnnotation": "",
      "functionDoc": "Compute the\n\u003ca href\u003d\"http://mathworld.wolfram.com/NaturalLogarithm.html\" TARGET\u003d\"_top\"\u003e\nnatural logarithm\u003c/a\u003e of this complex number.\n\u003cp\u003e\nImplements the formula: \u003cpre\u003e\n\u003ccode\u003e log(a + bi) \u003d ln(|a + bi|) + arg(a + bi)i\u003c/code\u003e\u003c/pre\u003e\nwhere ln on the right hand side is {@link java.lang.Math#log},\n\u003ccode\u003e|a + bi|\u003c/code\u003e is the modulus, {@link Complex#abs},  and\n\u003ccode\u003earg(a + bi) \u003d {@link java.lang.Math#atan2}(b, a)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\nReturns {@link Complex#NaN} if either real or imaginary part of the\ninput argument is \u003ccode\u003eNaN\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\nInfinite (or critical) values in real or imaginary parts of the input may\nresult in infinite or NaN values returned in parts of the result.\u003cpre\u003e\nExamples:\n\u003ccode\u003e\nlog(1 \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (\u0026pi;/2)i\nlog(INFINITY + i) \u003d INFINITY + 0i\nlog(-INFINITY + i) \u003d INFINITY + \u0026pi;i\nlog(INFINITY \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (\u0026pi;/4)i\nlog(-INFINITY \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (3\u0026pi;/4)i\nlog(0 + 0i) \u003d -INFINITY + 0i\n\u003c/code\u003e\u003c/pre\u003e\u003c/p\u003e\n\n@return ln of this complex number.\n@since 1.2\n",
      "diff": "@@ -1,6 +1,6 @@\n public Complex log() {\n     if (isNaN()) {\n         return Complex.NaN;\n     }\n-    return createComplex(Math.log(abs()), Math.atan2(imaginary, real));\n+    return createComplex(FastMath.log(abs()), FastMath.atan2(imaginary, real));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "26dac5a0e7fc9c6be9571b3e71a15d8502480d96": {
      "type": "Ymultichange(Ydocchange,Yformatchange)",
      "commitMessage": "Removed trailing spaces.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@811685 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/5/09, 10:36 AM",
      "commitName": "26dac5a0e7fc9c6be9571b3e71a15d8502480d96",
      "commitAuthor": "Phil Steitz",
      "subchanges": [
        {
          "type": "Ydocchange",
          "commitMessage": "Removed trailing spaces.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@811685 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "9/5/09, 10:36 AM",
          "commitName": "26dac5a0e7fc9c6be9571b3e71a15d8502480d96",
          "commitAuthor": "Phil Steitz",
          "commitDateOld": "9/1/09, 2:02 PM",
          "commitNameOld": "d6beaeaa9c53aa4e6ae128a856e68a9eeb1cadb8",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 3.86,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "public Complex log() {\n    if (isNaN()) {\n        return Complex.NaN;\n    }\n    return createComplex(Math.log(abs()), Math.atan2(imaginary, real));\n}",
          "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
          "functionStartLine": 674,
          "functionName": "log",
          "functionAnnotation": "",
          "functionDoc": "Compute the\n\u003ca href\u003d\"http://mathworld.wolfram.com/NaturalLogarithm.html\" TARGET\u003d\"_top\"\u003e\nnatural logarithm\u003c/a\u003e of this complex number.\n\u003cp\u003e\nImplements the formula: \u003cpre\u003e\n\u003ccode\u003e log(a + bi) \u003d ln(|a + bi|) + arg(a + bi)i\u003c/code\u003e\u003c/pre\u003e\nwhere ln on the right hand side is {@link java.lang.Math#log},\n\u003ccode\u003e|a + bi|\u003c/code\u003e is the modulus, {@link Complex#abs},  and\n\u003ccode\u003earg(a + bi) \u003d {@link java.lang.Math#atan2}(b, a)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\nReturns {@link Complex#NaN} if either real or imaginary part of the\ninput argument is \u003ccode\u003eNaN\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\nInfinite (or critical) values in real or imaginary parts of the input may\nresult in infinite or NaN values returned in parts of the result.\u003cpre\u003e\nExamples:\n\u003ccode\u003e\nlog(1 \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (\u0026pi;/2)i\nlog(INFINITY + i) \u003d INFINITY + 0i\nlog(-INFINITY + i) \u003d INFINITY + \u0026pi;i\nlog(INFINITY \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (\u0026pi;/4)i\nlog(-INFINITY \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (3\u0026pi;/4)i\nlog(0 + 0i) \u003d -INFINITY + 0i\n\u003c/code\u003e\u003c/pre\u003e\u003c/p\u003e\n\n@return ln of this complex number.\n@since 1.2\n",
          "diff": "",
          "extendedDetails": {
            "oldValue": "Compute the \n\u003ca href\u003d\"http://mathworld.wolfram.com/NaturalLogarithm.html\" TARGET\u003d\"_top\"\u003e\nnatural logarithm\u003c/a\u003e of this complex number.\n\u003cp\u003e\nImplements the formula: \u003cpre\u003e\n\u003ccode\u003e log(a + bi) \u003d ln(|a + bi|) + arg(a + bi)i\u003c/code\u003e\u003c/pre\u003e\nwhere ln on the right hand side is {@link java.lang.Math#log},\n\u003ccode\u003e|a + bi|\u003c/code\u003e is the modulus, {@link Complex#abs},  and\n\u003ccode\u003earg(a + bi) \u003d {@link java.lang.Math#atan2}(b, a)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\nReturns {@link Complex#NaN} if either real or imaginary part of the \ninput argument is \u003ccode\u003eNaN\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\nInfinite (or critical) values in real or imaginary parts of the input may\nresult in infinite or NaN values returned in parts of the result.\u003cpre\u003e\nExamples: \n\u003ccode\u003e\nlog(1 \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (\u0026pi;/2)i\nlog(INFINITY + i) \u003d INFINITY + 0i\nlog(-INFINITY + i) \u003d INFINITY + \u0026pi;i\nlog(INFINITY \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (\u0026pi;/4)i\nlog(-INFINITY \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (3\u0026pi;/4)i\nlog(0 + 0i) \u003d -INFINITY + 0i\n\u003c/code\u003e\u003c/pre\u003e\u003c/p\u003e\n\n@return ln of this complex number.\n@since 1.2\n",
            "newValue": "Compute the\n\u003ca href\u003d\"http://mathworld.wolfram.com/NaturalLogarithm.html\" TARGET\u003d\"_top\"\u003e\nnatural logarithm\u003c/a\u003e of this complex number.\n\u003cp\u003e\nImplements the formula: \u003cpre\u003e\n\u003ccode\u003e log(a + bi) \u003d ln(|a + bi|) + arg(a + bi)i\u003c/code\u003e\u003c/pre\u003e\nwhere ln on the right hand side is {@link java.lang.Math#log},\n\u003ccode\u003e|a + bi|\u003c/code\u003e is the modulus, {@link Complex#abs},  and\n\u003ccode\u003earg(a + bi) \u003d {@link java.lang.Math#atan2}(b, a)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\nReturns {@link Complex#NaN} if either real or imaginary part of the\ninput argument is \u003ccode\u003eNaN\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\nInfinite (or critical) values in real or imaginary parts of the input may\nresult in infinite or NaN values returned in parts of the result.\u003cpre\u003e\nExamples:\n\u003ccode\u003e\nlog(1 \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (\u0026pi;/2)i\nlog(INFINITY + i) \u003d INFINITY + 0i\nlog(-INFINITY + i) \u003d INFINITY + \u0026pi;i\nlog(INFINITY \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (\u0026pi;/4)i\nlog(-INFINITY \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (3\u0026pi;/4)i\nlog(0 + 0i) \u003d -INFINITY + 0i\n\u003c/code\u003e\u003c/pre\u003e\u003c/p\u003e\n\n@return ln of this complex number.\n@since 1.2\n"
          }
        },
        {
          "type": "Yformatchange",
          "commitMessage": "Removed trailing spaces.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@811685 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "9/5/09, 10:36 AM",
          "commitName": "26dac5a0e7fc9c6be9571b3e71a15d8502480d96",
          "commitAuthor": "Phil Steitz",
          "commitDateOld": "9/1/09, 2:02 PM",
          "commitNameOld": "d6beaeaa9c53aa4e6ae128a856e68a9eeb1cadb8",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 3.86,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "public Complex log() {\n    if (isNaN()) {\n        return Complex.NaN;\n    }\n    return createComplex(Math.log(abs()), Math.atan2(imaginary, real));\n}",
          "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
          "functionStartLine": 674,
          "functionName": "log",
          "functionAnnotation": "",
          "functionDoc": "Compute the\n\u003ca href\u003d\"http://mathworld.wolfram.com/NaturalLogarithm.html\" TARGET\u003d\"_top\"\u003e\nnatural logarithm\u003c/a\u003e of this complex number.\n\u003cp\u003e\nImplements the formula: \u003cpre\u003e\n\u003ccode\u003e log(a + bi) \u003d ln(|a + bi|) + arg(a + bi)i\u003c/code\u003e\u003c/pre\u003e\nwhere ln on the right hand side is {@link java.lang.Math#log},\n\u003ccode\u003e|a + bi|\u003c/code\u003e is the modulus, {@link Complex#abs},  and\n\u003ccode\u003earg(a + bi) \u003d {@link java.lang.Math#atan2}(b, a)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\nReturns {@link Complex#NaN} if either real or imaginary part of the\ninput argument is \u003ccode\u003eNaN\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\nInfinite (or critical) values in real or imaginary parts of the input may\nresult in infinite or NaN values returned in parts of the result.\u003cpre\u003e\nExamples:\n\u003ccode\u003e\nlog(1 \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (\u0026pi;/2)i\nlog(INFINITY + i) \u003d INFINITY + 0i\nlog(-INFINITY + i) \u003d INFINITY + \u0026pi;i\nlog(INFINITY \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (\u0026pi;/4)i\nlog(-INFINITY \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (3\u0026pi;/4)i\nlog(0 + 0i) \u003d -INFINITY + 0i\n\u003c/code\u003e\u003c/pre\u003e\u003c/p\u003e\n\n@return ln of this complex number.\n@since 1.2\n",
          "diff": "",
          "extendedDetails": {}
        }
      ]
    },
    "d6a438e931412713e99624cf9ed74470f1040184": {
      "type": "Yfilerename",
      "commitMessage": "moved main java directory for compliance with maven standard directory layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@799870 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/1/09, 7:30 AM",
      "commitName": "d6a438e931412713e99624cf9ed74470f1040184",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "8/1/09, 7:23 AM",
      "commitNameOld": "2ad5ef61630be627f46ae1c266cf796f044bd4a8",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public Complex log() {\n    if (isNaN()) {\n        return Complex.NaN;\n    }\n    return createComplex(Math.log(abs()), Math.atan2(imaginary, real));\n}",
      "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
      "functionStartLine": 672,
      "functionName": "log",
      "functionAnnotation": "",
      "functionDoc": "Compute the \n\u003ca href\u003d\"http://mathworld.wolfram.com/NaturalLogarithm.html\" TARGET\u003d\"_top\"\u003e\nnatural logarithm\u003c/a\u003e of this complex number.\n\u003cp\u003e\nImplements the formula: \u003cpre\u003e\n\u003ccode\u003e log(a + bi) \u003d ln(|a + bi|) + arg(a + bi)i\u003c/code\u003e\u003c/pre\u003e\nwhere ln on the right hand side is {@link java.lang.Math#log},\n\u003ccode\u003e|a + bi|\u003c/code\u003e is the modulus, {@link Complex#abs},  and\n\u003ccode\u003earg(a + bi) \u003d {@link java.lang.Math#atan2}(b, a)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\nReturns {@link Complex#NaN} if either real or imaginary part of the \ninput argument is \u003ccode\u003eNaN\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\nInfinite (or critical) values in real or imaginary parts of the input may\nresult in infinite or NaN values returned in parts of the result.\u003cpre\u003e\nExamples: \n\u003ccode\u003e\nlog(1 \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (\u0026pi;/2)i\nlog(INFINITY + i) \u003d INFINITY + 0i\nlog(-INFINITY + i) \u003d INFINITY + \u0026pi;i\nlog(INFINITY \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (\u0026pi;/4)i\nlog(-INFINITY \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (3\u0026pi;/4)i\nlog(0 + 0i) \u003d -INFINITY + 0i\n\u003c/code\u003e\u003c/pre\u003e\u003c/p\u003e\n\n@return ln of this complex number.\n@since 1.2\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/math/complex/Complex.java",
        "newPath": "src/main/java/org/apache/commons/math/complex/Complex.java"
      }
    },
    "932ebf87acd81162cc7b1751c18b0e0ca760c8bf": {
      "type": "Ydocchange",
      "commitMessage": "Javadoc only. Added missing \u003c/p\u003e\u0027s\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@615734 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/27/08, 10:10 PM",
      "commitName": "932ebf87acd81162cc7b1751c18b0e0ca760c8bf",
      "commitAuthor": "Phil Steitz",
      "commitDateOld": "1/8/08, 11:30 PM",
      "commitNameOld": "6375e636998ba899dd6354a5aaf60b357dbe66d6",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 18.94,
      "commitsBetweenForRepo": 54,
      "commitsBetweenForFile": 1,
      "actualSource": "public Complex log() {\n    if (isNaN()) {\n        return Complex.NaN;\n    }\n    return createComplex(Math.log(abs()), Math.atan2(imaginary, real));\n}",
      "path": "src/java/org/apache/commons/math/complex/Complex.java",
      "functionStartLine": 612,
      "functionName": "log",
      "functionAnnotation": "",
      "functionDoc": "Compute the \n\u003ca href\u003d\"http://mathworld.wolfram.com/NaturalLogarithm.html\" TARGET\u003d\"_top\"\u003e\nnatural logarithm\u003c/a\u003e of this complex number.\n\u003cp\u003e\nImplements the formula: \u003cpre\u003e\n\u003ccode\u003e log(a + bi) \u003d ln(|a + bi|) + arg(a + bi)i\u003c/code\u003e\u003c/pre\u003e\nwhere ln on the right hand side is {@link java.lang.Math#log},\n\u003ccode\u003e|a + bi|\u003c/code\u003e is the modulus, {@link Complex#abs},  and\n\u003ccode\u003earg(a + bi) \u003d {@link java.lang.Math#atan2}(b, a)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\nReturns {@link Complex#NaN} if either real or imaginary part of the \ninput argument is \u003ccode\u003eNaN\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\nInfinite (or critical) values in real or imaginary parts of the input may\nresult in infinite or NaN values returned in parts of the result.\u003cpre\u003e\nExamples: \n\u003ccode\u003e\nlog(1 \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (\u0026pi;/2)i\nlog(INFINITY + i) \u003d INFINITY + 0i\nlog(-INFINITY + i) \u003d INFINITY + \u0026pi;i\nlog(INFINITY \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (\u0026pi;/4)i\nlog(-INFINITY \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (3\u0026pi;/4)i\nlog(0 + 0i) \u003d -INFINITY + 0i\n\u003c/code\u003e\u003c/pre\u003e\u003c/p\u003e\n\n@return ln of this complex number.\n@since 1.2\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Compute the \n\u003ca href\u003d\"http://mathworld.wolfram.com/NaturalLogarithm.html\" TARGET\u003d\"_top\"\u003e\nnatural logarithm\u003c/a\u003e of this complex number.\n\u003cp\u003e\nImplements the formula: \u003cpre\u003e\n\u003ccode\u003e log(a + bi) \u003d ln(|a + bi|) + arg(a + bi)i\u003c/code\u003e\u003c/pre\u003e\nwhere ln on the right hand side is {@link java.lang.Math#log},\n\u003ccode\u003e|a + bi|\u003c/code\u003e is the modulus, {@link Complex#abs},  and\n\u003ccode\u003earg(a + bi) \u003d {@link java.lang.Math#atan2}(b, a)\u003c/code\u003e\n\u003cp\u003e\nReturns {@link Complex#NaN} if either real or imaginary part of the \ninput argument is \u003ccode\u003eNaN\u003c/code\u003e.\n\u003cp\u003e\nInfinite (or critical) values in real or imaginary parts of the input may\nresult in infinite or NaN values returned in parts of the result.\u003cpre\u003e\nExamples: \n\u003ccode\u003e\nlog(1 \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (\u0026pi;/2)i\nlog(INFINITY + i) \u003d INFINITY + 0i\nlog(-INFINITY + i) \u003d INFINITY + \u0026pi;i\nlog(INFINITY \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (\u0026pi;/4)i\nlog(-INFINITY \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (3\u0026pi;/4)i\nlog(0 + 0i) \u003d -INFINITY + 0i\n\u003c/code\u003e\u003c/pre\u003e\n\n@return ln of this complex number.\n@since 1.2\n",
        "newValue": "Compute the \n\u003ca href\u003d\"http://mathworld.wolfram.com/NaturalLogarithm.html\" TARGET\u003d\"_top\"\u003e\nnatural logarithm\u003c/a\u003e of this complex number.\n\u003cp\u003e\nImplements the formula: \u003cpre\u003e\n\u003ccode\u003e log(a + bi) \u003d ln(|a + bi|) + arg(a + bi)i\u003c/code\u003e\u003c/pre\u003e\nwhere ln on the right hand side is {@link java.lang.Math#log},\n\u003ccode\u003e|a + bi|\u003c/code\u003e is the modulus, {@link Complex#abs},  and\n\u003ccode\u003earg(a + bi) \u003d {@link java.lang.Math#atan2}(b, a)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\nReturns {@link Complex#NaN} if either real or imaginary part of the \ninput argument is \u003ccode\u003eNaN\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\nInfinite (or critical) values in real or imaginary parts of the input may\nresult in infinite or NaN values returned in parts of the result.\u003cpre\u003e\nExamples: \n\u003ccode\u003e\nlog(1 \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (\u0026pi;/2)i\nlog(INFINITY + i) \u003d INFINITY + 0i\nlog(-INFINITY + i) \u003d INFINITY + \u0026pi;i\nlog(INFINITY \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (\u0026pi;/4)i\nlog(-INFINITY \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (3\u0026pi;/4)i\nlog(0 + 0i) \u003d -INFINITY + 0i\n\u003c/code\u003e\u003c/pre\u003e\u003c/p\u003e\n\n@return ln of this complex number.\n@since 1.2\n"
      }
    },
    "912d9beb43edb26caf87a32f08664ea634136c73": {
      "type": "Yintroduced",
      "commitMessage": "Merged most functions from ComplexUtils into Complex class, added\nstatic factory method to Complex.\nJIRA: MATH-171\nReported and patched by Niall Pemberton\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@596159 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/18/07, 3:38 PM",
      "commitName": "912d9beb43edb26caf87a32f08664ea634136c73",
      "commitAuthor": "Phil Steitz",
      "diff": "@@ -0,0 +1,6 @@\n+public Complex log() {\n+    if (isNaN()) {\n+        return Complex.NaN;\n+    }\n+    return createComplex(Math.log(abs()), Math.atan2(imaginary, real));\n+}\n\\ No newline at end of file\n",
      "actualSource": "public Complex log() {\n    if (isNaN()) {\n        return Complex.NaN;\n    }\n    return createComplex(Math.log(abs()), Math.atan2(imaginary, real));\n}",
      "path": "src/java/org/apache/commons/math/complex/Complex.java",
      "functionStartLine": 601,
      "functionName": "log",
      "functionAnnotation": "",
      "functionDoc": "Compute the \n\u003ca href\u003d\"http://mathworld.wolfram.com/NaturalLogarithm.html\" TARGET\u003d\"_top\"\u003e\nnatural logarithm\u003c/a\u003e of this complex number.\n\u003cp\u003e\nImplements the formula: \u003cpre\u003e\n\u003ccode\u003e log(a + bi) \u003d ln(|a + bi|) + arg(a + bi)i\u003c/code\u003e\u003c/pre\u003e\nwhere ln on the right hand side is {@link java.lang.Math#log},\n\u003ccode\u003e|a + bi|\u003c/code\u003e is the modulus, {@link Complex#abs},  and\n\u003ccode\u003earg(a + bi) \u003d {@link java.lang.Math#atan2}(b, a)\u003c/code\u003e\n\u003cp\u003e\nReturns {@link Complex#NaN} if either real or imaginary part of the \ninput argument is \u003ccode\u003eNaN\u003c/code\u003e.\n\u003cp\u003e\nInfinite (or critical) values in real or imaginary parts of the input may\nresult in infinite or NaN values returned in parts of the result.\u003cpre\u003e\nExamples: \n\u003ccode\u003e\nlog(1 \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (\u0026pi;/2)i\nlog(INFINITY + i) \u003d INFINITY + 0i\nlog(-INFINITY + i) \u003d INFINITY + \u0026pi;i\nlog(INFINITY \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (\u0026pi;/4)i\nlog(-INFINITY \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (3\u0026pi;/4)i\nlog(0 + 0i) \u003d -INFINITY + 0i\n\u003c/code\u003e\u003c/pre\u003e\n\n@return ln of this complex number.\n@since 1.2\n"
    }
  }
}