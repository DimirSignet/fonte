{
  "origin": "codeshovel",
  "repositoryName": "Math-46b",
  "repositoryPath": "/tmp/Math-46b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Complex.java",
  "functionName": "equals",
  "functionId": "equals___other-Object",
  "sourceFilePath": "src/main/java/org/apache/commons/math/complex/Complex.java",
  "functionAnnotation": "@Override",
  "functionDoc": "Test for the equality of two Complex objects.\nIf both the real and imaginary parts of two complex numbers\nare exactly the same, and neither is {@code Double.NaN}, the two\nComplex objects are considered to be equal.\nAll {@code NaN} values are considered to be equal - i.e, if either\n(or both) real and imaginary parts of the complex number are equal\nto {@code Double.NaN}, the complex number is equal to\n{@code NaN}.\n\n@param other Object to test for equality to this\n@return true if two Complex objects are equal, false if object is\n{@code null}, not an instance of Complex, or not equal to this Complex\ninstance.\n",
  "functionStartLine": 320,
  "functionEndLine": 333,
  "numCommitsSeen": 58,
  "timeTaken": 2309,
  "changeHistory": [
    "b522106e845feae4200e37d0bd190fb6cdc5b756",
    "f34508958e47b663652c2ad420e6801f7150dac3",
    "3729fba951e714135102e8c3c3aa866ac8b75cf9",
    "26dac5a0e7fc9c6be9571b3e71a15d8502480d96",
    "d6a438e931412713e99624cf9ed74470f1040184",
    "9c8d2c79c1ef565337599849cd066ff63b8d5816",
    "e6449cccdeaba96ffba4c27db322c5c3d5c18662",
    "932ebf87acd81162cc7b1751c18b0e0ca760c8bf",
    "6ef3b2932f4ca9219e41784bb0cd229dcabcdb11",
    "545e47a273803b1d080b186c8cf139492f82c4fb",
    "3f892d9e5957dca9312d5a72c6930fae62625da9",
    "0a904461932f2c0455611e77ec6a8d8aced2980b"
  ],
  "changeHistoryShort": {
    "b522106e845feae4200e37d0bd190fb6cdc5b756": "Ymultichange(Ybodychange,Ydocchange)",
    "f34508958e47b663652c2ad420e6801f7150dac3": "Ybodychange",
    "3729fba951e714135102e8c3c3aa866ac8b75cf9": "Ybodychange",
    "26dac5a0e7fc9c6be9571b3e71a15d8502480d96": "Ymultichange(Ydocchange,Yformatchange)",
    "d6a438e931412713e99624cf9ed74470f1040184": "Yfilerename",
    "9c8d2c79c1ef565337599849cd066ff63b8d5816": "Yannotationchange",
    "e6449cccdeaba96ffba4c27db322c5c3d5c18662": "Ybodychange",
    "932ebf87acd81162cc7b1751c18b0e0ca760c8bf": "Ydocchange",
    "6ef3b2932f4ca9219e41784bb0cd229dcabcdb11": "Ydocchange",
    "545e47a273803b1d080b186c8cf139492f82c4fb": "Ymultichange(Ybodychange,Ydocchange)",
    "3f892d9e5957dca9312d5a72c6930fae62625da9": "Ydocchange",
    "0a904461932f2c0455611e77ec6a8d8aced2980b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b522106e845feae4200e37d0bd190fb6cdc5b756": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "MATH-577\nVarious enhancements to the \"Complex\" class, namely operators (add,\nsubtract, ...) taking a \"double\" argument, improved consistency in\nthe use of \"NAN\" and \"INF\" fields, updated Javadoc. Mainly due to\nArne Plöse.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1150340 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/24/11, 4:21 AM",
      "commitName": "b522106e845feae4200e37d0bd190fb6cdc5b756",
      "commitAuthor": "Gilles Sadowski",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "MATH-577\nVarious enhancements to the \"Complex\" class, namely operators (add,\nsubtract, ...) taking a \"double\" argument, improved consistency in\nthe use of \"NAN\" and \"INF\" fields, updated Javadoc. Mainly due to\nArne Plöse.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1150340 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/24/11, 4:21 AM",
          "commitName": "b522106e845feae4200e37d0bd190fb6cdc5b756",
          "commitAuthor": "Gilles Sadowski",
          "commitDateOld": "7/13/11, 11:08 PM",
          "commitNameOld": "7707b0bb80be05bbf6533a36bb0c646cbfd1026d",
          "commitAuthorOld": "Phil Steitz",
          "daysBetweenCommits": 10.22,
          "commitsBetweenForRepo": 22,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic boolean equals(Object other) {\n    if (this \u003d\u003d other) {\n        return true;\n    }\n    if (other instanceof Complex) {\n        Complex c \u003d (Complex) other;\n        if (c.isNaN) {\n            return isNaN;\n        } else {\n            return (real \u003d\u003d c.real) \u0026\u0026 (imaginary \u003d\u003d c.imaginary);\n        }\n    }\n    return false;\n}",
          "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
          "functionStartLine": 310,
          "functionName": "equals",
          "functionAnnotation": "@Override",
          "functionDoc": "Test for the equality of two Complex objects.\nIf both the real and imaginary parts of two complex numbers\nare exactly the same, and neither is {@code Double.NaN}, the two\nComplex objects are considered to be equal.\nAll {@code NaN} values are considered to be equal - i.e, if either\n(or both) real and imaginary parts of the complex number are equal\nto {@code Double.NaN}, the complex number is equal to\n{@code NaN}.\n\n@param other Object to test for equality to this\n@return true if two Complex objects are equal, false if object is\n{@code null}, not an instance of Complex, or not equal to this Complex\ninstance.\n",
          "diff": "@@ -1,15 +1,15 @@\n @Override\n public boolean equals(Object other) {\n     if (this \u003d\u003d other) {\n         return true;\n     }\n     if (other instanceof Complex) {\n-        Complex rhs \u003d (Complex) other;\n-        if (rhs.isNaN) {\n+        Complex c \u003d (Complex) other;\n+        if (c.isNaN) {\n             return isNaN;\n         } else {\n-            return (real \u003d\u003d rhs.real) \u0026\u0026 (imaginary \u003d\u003d rhs.imaginary);\n+            return (real \u003d\u003d c.real) \u0026\u0026 (imaginary \u003d\u003d c.imaginary);\n         }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "MATH-577\nVarious enhancements to the \"Complex\" class, namely operators (add,\nsubtract, ...) taking a \"double\" argument, improved consistency in\nthe use of \"NAN\" and \"INF\" fields, updated Javadoc. Mainly due to\nArne Plöse.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1150340 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/24/11, 4:21 AM",
          "commitName": "b522106e845feae4200e37d0bd190fb6cdc5b756",
          "commitAuthor": "Gilles Sadowski",
          "commitDateOld": "7/13/11, 11:08 PM",
          "commitNameOld": "7707b0bb80be05bbf6533a36bb0c646cbfd1026d",
          "commitAuthorOld": "Phil Steitz",
          "daysBetweenCommits": 10.22,
          "commitsBetweenForRepo": 22,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic boolean equals(Object other) {\n    if (this \u003d\u003d other) {\n        return true;\n    }\n    if (other instanceof Complex) {\n        Complex c \u003d (Complex) other;\n        if (c.isNaN) {\n            return isNaN;\n        } else {\n            return (real \u003d\u003d c.real) \u0026\u0026 (imaginary \u003d\u003d c.imaginary);\n        }\n    }\n    return false;\n}",
          "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
          "functionStartLine": 310,
          "functionName": "equals",
          "functionAnnotation": "@Override",
          "functionDoc": "Test for the equality of two Complex objects.\nIf both the real and imaginary parts of two complex numbers\nare exactly the same, and neither is {@code Double.NaN}, the two\nComplex objects are considered to be equal.\nAll {@code NaN} values are considered to be equal - i.e, if either\n(or both) real and imaginary parts of the complex number are equal\nto {@code Double.NaN}, the complex number is equal to\n{@code NaN}.\n\n@param other Object to test for equality to this\n@return true if two Complex objects are equal, false if object is\n{@code null}, not an instance of Complex, or not equal to this Complex\ninstance.\n",
          "diff": "@@ -1,15 +1,15 @@\n @Override\n public boolean equals(Object other) {\n     if (this \u003d\u003d other) {\n         return true;\n     }\n     if (other instanceof Complex) {\n-        Complex rhs \u003d (Complex) other;\n-        if (rhs.isNaN) {\n+        Complex c \u003d (Complex) other;\n+        if (c.isNaN) {\n             return isNaN;\n         } else {\n-            return (real \u003d\u003d rhs.real) \u0026\u0026 (imaginary \u003d\u003d rhs.imaginary);\n+            return (real \u003d\u003d c.real) \u0026\u0026 (imaginary \u003d\u003d c.imaginary);\n         }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Test for the equality of two Complex objects.\n\u003cp\u003e\nIf both the real and imaginary parts of two Complex numbers\nare exactly the same, and neither is \u003ccode\u003eDouble.NaN\u003c/code\u003e, the two\nComplex objects are considered to be equal.\u003c/p\u003e\n\u003cp\u003e\nAll \u003ccode\u003eNaN\u003c/code\u003e values are considered to be equal - i.e, if either\n(or both) real and imaginary parts of the complex number are equal\nto \u003ccode\u003eDouble.NaN\u003c/code\u003e, the complex number is equal to\n\u003ccode\u003eComplex.NaN\u003c/code\u003e.\u003c/p\u003e\n\n@param other Object to test for equality to this\n@return true if two Complex objects are equal, false if\n        object is null, not an instance of Complex, or\n        not equal to this Complex instance\n",
            "newValue": "Test for the equality of two Complex objects.\nIf both the real and imaginary parts of two complex numbers\nare exactly the same, and neither is {@code Double.NaN}, the two\nComplex objects are considered to be equal.\nAll {@code NaN} values are considered to be equal - i.e, if either\n(or both) real and imaginary parts of the complex number are equal\nto {@code Double.NaN}, the complex number is equal to\n{@code NaN}.\n\n@param other Object to test for equality to this\n@return true if two Complex objects are equal, false if object is\n{@code null}, not an instance of Complex, or not equal to this Complex\ninstance.\n"
          }
        }
      ]
    },
    "f34508958e47b663652c2ad420e6801f7150dac3": {
      "type": "Ybodychange",
      "commitMessage": "MATH-577\nReplaced function calls by direct reference to the instance variable.\nRemoved redundant prefix for static fields.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1145945 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/13/11, 3:10 AM",
      "commitName": "f34508958e47b663652c2ad420e6801f7150dac3",
      "commitAuthor": "Gilles Sadowski",
      "commitDateOld": "7/13/11, 2:41 AM",
      "commitNameOld": "9ca71cd7ab80b3b6620867272acb35b15bc50921",
      "commitAuthorOld": "Gilles Sadowski",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic boolean equals(Object other) {\n    if (this \u003d\u003d other) {\n        return true;\n    }\n    if (other instanceof Complex) {\n        Complex rhs \u003d (Complex) other;\n        if (rhs.isNaN) {\n            return isNaN;\n        } else {\n            return (real \u003d\u003d rhs.real) \u0026\u0026 (imaginary \u003d\u003d rhs.imaginary);\n        }\n    }\n    return false;\n}",
      "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
      "functionStartLine": 262,
      "functionName": "equals",
      "functionAnnotation": "@Override",
      "functionDoc": "Test for the equality of two Complex objects.\n\u003cp\u003e\nIf both the real and imaginary parts of two Complex numbers\nare exactly the same, and neither is \u003ccode\u003eDouble.NaN\u003c/code\u003e, the two\nComplex objects are considered to be equal.\u003c/p\u003e\n\u003cp\u003e\nAll \u003ccode\u003eNaN\u003c/code\u003e values are considered to be equal - i.e, if either\n(or both) real and imaginary parts of the complex number are equal\nto \u003ccode\u003eDouble.NaN\u003c/code\u003e, the complex number is equal to\n\u003ccode\u003eComplex.NaN\u003c/code\u003e.\u003c/p\u003e\n\n@param other Object to test for equality to this\n@return true if two Complex objects are equal, false if\n        object is null, not an instance of Complex, or\n        not equal to this Complex instance\n",
      "diff": "@@ -1,15 +1,15 @@\n @Override\n public boolean equals(Object other) {\n     if (this \u003d\u003d other) {\n         return true;\n     }\n     if (other instanceof Complex) {\n         Complex rhs \u003d (Complex) other;\n-        if (rhs.isNaN()) {\n-            return this.isNaN();\n+        if (rhs.isNaN) {\n+            return isNaN;\n         } else {\n             return (real \u003d\u003d rhs.real) \u0026\u0026 (imaginary \u003d\u003d rhs.imaginary);\n         }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3729fba951e714135102e8c3c3aa866ac8b75cf9": {
      "type": "Ybodychange",
      "commitMessage": "MATH-337 Equals methods rely on catching ClassCastException rather than using instanceof check\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@922713 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/13/10, 5:26 PM",
      "commitName": "3729fba951e714135102e8c3c3aa866ac8b75cf9",
      "commitAuthor": "Sebastian Bazley",
      "commitDateOld": "10/26/09, 6:32 PM",
      "commitNameOld": "051edd33e81d09cc10e3970b3ee0b1a62914a0ab",
      "commitAuthorOld": "Phil Steitz",
      "daysBetweenCommits": 138.0,
      "commitsBetweenForRepo": 133,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic boolean equals(Object other) {\n    if (this \u003d\u003d other) {\n        return true;\n    }\n    if (other instanceof Complex) {\n        Complex rhs \u003d (Complex) other;\n        if (rhs.isNaN()) {\n            return this.isNaN();\n        } else {\n            return (real \u003d\u003d rhs.real) \u0026\u0026 (imaginary \u003d\u003d rhs.imaginary);\n        }\n    }\n    return false;\n}",
      "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
      "functionStartLine": 255,
      "functionName": "equals",
      "functionAnnotation": "@Override",
      "functionDoc": "Test for the equality of two Complex objects.\n\u003cp\u003e\nIf both the real and imaginary parts of two Complex numbers\nare exactly the same, and neither is \u003ccode\u003eDouble.NaN\u003c/code\u003e, the two\nComplex objects are considered to be equal.\u003c/p\u003e\n\u003cp\u003e\nAll \u003ccode\u003eNaN\u003c/code\u003e values are considered to be equal - i.e, if either\n(or both) real and imaginary parts of the complex number are equal\nto \u003ccode\u003eDouble.NaN\u003c/code\u003e, the complex number is equal to\n\u003ccode\u003eComplex.NaN\u003c/code\u003e.\u003c/p\u003e\n\n@param other Object to test for equality to this\n@return true if two Complex objects are equal, false if\n        object is null, not an instance of Complex, or\n        not equal to this Complex instance\n",
      "diff": "@@ -1,21 +1,15 @@\n @Override\n public boolean equals(Object other) {\n-    boolean ret;\n     if (this \u003d\u003d other) {\n-        ret \u003d true;\n-    } else if (other \u003d\u003d null) {\n-        ret \u003d false;\n-    } else {\n-        try {\n-            Complex rhs \u003d (Complex) other;\n-            if (rhs.isNaN()) {\n-                ret \u003d this.isNaN();\n-            } else {\n-                ret \u003d (real \u003d\u003d rhs.real) \u0026\u0026 (imaginary \u003d\u003d rhs.imaginary);\n-            }\n-        } catch (ClassCastException ex) {\n-            ret \u003d false;\n+        return true;\n+    }\n+    if (other instanceof Complex) {\n+        Complex rhs \u003d (Complex) other;\n+        if (rhs.isNaN()) {\n+            return this.isNaN();\n+        } else {\n+            return (real \u003d\u003d rhs.real) \u0026\u0026 (imaginary \u003d\u003d rhs.imaginary);\n         }\n     }\n-    return ret;\n+    return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "26dac5a0e7fc9c6be9571b3e71a15d8502480d96": {
      "type": "Ymultichange(Ydocchange,Yformatchange)",
      "commitMessage": "Removed trailing spaces.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@811685 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/5/09, 10:36 AM",
      "commitName": "26dac5a0e7fc9c6be9571b3e71a15d8502480d96",
      "commitAuthor": "Phil Steitz",
      "subchanges": [
        {
          "type": "Ydocchange",
          "commitMessage": "Removed trailing spaces.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@811685 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "9/5/09, 10:36 AM",
          "commitName": "26dac5a0e7fc9c6be9571b3e71a15d8502480d96",
          "commitAuthor": "Phil Steitz",
          "commitDateOld": "9/1/09, 2:02 PM",
          "commitNameOld": "d6beaeaa9c53aa4e6ae128a856e68a9eeb1cadb8",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 3.86,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic boolean equals(Object other) {\n    boolean ret;\n    if (this \u003d\u003d other) {\n        ret \u003d true;\n    } else if (other \u003d\u003d null) {\n        ret \u003d false;\n    } else {\n        try {\n            Complex rhs \u003d (Complex) other;\n            if (rhs.isNaN()) {\n                ret \u003d this.isNaN();\n            } else {\n                ret \u003d (real \u003d\u003d rhs.real) \u0026\u0026 (imaginary \u003d\u003d rhs.imaginary);\n            }\n        } catch (ClassCastException ex) {\n            ret \u003d false;\n        }\n    }\n    return ret;\n}",
          "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
          "functionStartLine": 269,
          "functionName": "equals",
          "functionAnnotation": "@Override",
          "functionDoc": "Test for the equality of two Complex objects.\n\u003cp\u003e\nIf both the real and imaginary parts of two Complex numbers\nare exactly the same, and neither is \u003ccode\u003eDouble.NaN\u003c/code\u003e, the two\nComplex objects are considered to be equal.\u003c/p\u003e\n\u003cp\u003e\nAll \u003ccode\u003eNaN\u003c/code\u003e values are considered to be equal - i.e, if either\n(or both) real and imaginary parts of the complex number are equal\nto \u003ccode\u003eDouble.NaN\u003c/code\u003e, the complex number is equal to\n\u003ccode\u003eComplex.NaN\u003c/code\u003e.\u003c/p\u003e\n\n@param other Object to test for equality to this\n@return true if two Complex objects are equal, false if\n        object is null, not an instance of Complex, or\n        not equal to this Complex instance\n",
          "diff": "",
          "extendedDetails": {
            "oldValue": "Test for the equality of two Complex objects.\n\u003cp\u003e\nIf both the real and imaginary parts of two Complex numbers\nare exactly the same, and neither is \u003ccode\u003eDouble.NaN\u003c/code\u003e, the two\nComplex objects are considered to be equal.\u003c/p\u003e\n\u003cp\u003e\nAll \u003ccode\u003eNaN\u003c/code\u003e values are considered to be equal - i.e, if either\n(or both) real and imaginary parts of the complex number are equal\nto \u003ccode\u003eDouble.NaN\u003c/code\u003e, the complex number is equal to \n\u003ccode\u003eComplex.NaN\u003c/code\u003e.\u003c/p\u003e\n\n@param other Object to test for equality to this\n@return true if two Complex objects are equal, false if\n        object is null, not an instance of Complex, or\n        not equal to this Complex instance\n",
            "newValue": "Test for the equality of two Complex objects.\n\u003cp\u003e\nIf both the real and imaginary parts of two Complex numbers\nare exactly the same, and neither is \u003ccode\u003eDouble.NaN\u003c/code\u003e, the two\nComplex objects are considered to be equal.\u003c/p\u003e\n\u003cp\u003e\nAll \u003ccode\u003eNaN\u003c/code\u003e values are considered to be equal - i.e, if either\n(or both) real and imaginary parts of the complex number are equal\nto \u003ccode\u003eDouble.NaN\u003c/code\u003e, the complex number is equal to\n\u003ccode\u003eComplex.NaN\u003c/code\u003e.\u003c/p\u003e\n\n@param other Object to test for equality to this\n@return true if two Complex objects are equal, false if\n        object is null, not an instance of Complex, or\n        not equal to this Complex instance\n"
          }
        },
        {
          "type": "Yformatchange",
          "commitMessage": "Removed trailing spaces.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@811685 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "9/5/09, 10:36 AM",
          "commitName": "26dac5a0e7fc9c6be9571b3e71a15d8502480d96",
          "commitAuthor": "Phil Steitz",
          "commitDateOld": "9/1/09, 2:02 PM",
          "commitNameOld": "d6beaeaa9c53aa4e6ae128a856e68a9eeb1cadb8",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 3.86,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic boolean equals(Object other) {\n    boolean ret;\n    if (this \u003d\u003d other) {\n        ret \u003d true;\n    } else if (other \u003d\u003d null) {\n        ret \u003d false;\n    } else {\n        try {\n            Complex rhs \u003d (Complex) other;\n            if (rhs.isNaN()) {\n                ret \u003d this.isNaN();\n            } else {\n                ret \u003d (real \u003d\u003d rhs.real) \u0026\u0026 (imaginary \u003d\u003d rhs.imaginary);\n            }\n        } catch (ClassCastException ex) {\n            ret \u003d false;\n        }\n    }\n    return ret;\n}",
          "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
          "functionStartLine": 269,
          "functionName": "equals",
          "functionAnnotation": "@Override",
          "functionDoc": "Test for the equality of two Complex objects.\n\u003cp\u003e\nIf both the real and imaginary parts of two Complex numbers\nare exactly the same, and neither is \u003ccode\u003eDouble.NaN\u003c/code\u003e, the two\nComplex objects are considered to be equal.\u003c/p\u003e\n\u003cp\u003e\nAll \u003ccode\u003eNaN\u003c/code\u003e values are considered to be equal - i.e, if either\n(or both) real and imaginary parts of the complex number are equal\nto \u003ccode\u003eDouble.NaN\u003c/code\u003e, the complex number is equal to\n\u003ccode\u003eComplex.NaN\u003c/code\u003e.\u003c/p\u003e\n\n@param other Object to test for equality to this\n@return true if two Complex objects are equal, false if\n        object is null, not an instance of Complex, or\n        not equal to this Complex instance\n",
          "diff": "",
          "extendedDetails": {}
        }
      ]
    },
    "d6a438e931412713e99624cf9ed74470f1040184": {
      "type": "Yfilerename",
      "commitMessage": "moved main java directory for compliance with maven standard directory layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@799870 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/1/09, 7:30 AM",
      "commitName": "d6a438e931412713e99624cf9ed74470f1040184",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "8/1/09, 7:23 AM",
      "commitNameOld": "2ad5ef61630be627f46ae1c266cf796f044bd4a8",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic boolean equals(Object other) {\n    boolean ret;\n    if (this \u003d\u003d other) {\n        ret \u003d true;\n    } else if (other \u003d\u003d null) {\n        ret \u003d false;\n    } else {\n        try {\n            Complex rhs \u003d (Complex) other;\n            if (rhs.isNaN()) {\n                ret \u003d this.isNaN();\n            } else {\n                ret \u003d (real \u003d\u003d rhs.real) \u0026\u0026 (imaginary \u003d\u003d rhs.imaginary);\n            }\n        } catch (ClassCastException ex) {\n            ret \u003d false;\n        }\n    }\n    return ret;\n}",
      "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
      "functionStartLine": 267,
      "functionName": "equals",
      "functionAnnotation": "@Override",
      "functionDoc": "Test for the equality of two Complex objects.\n\u003cp\u003e\nIf both the real and imaginary parts of two Complex numbers\nare exactly the same, and neither is \u003ccode\u003eDouble.NaN\u003c/code\u003e, the two\nComplex objects are considered to be equal.\u003c/p\u003e\n\u003cp\u003e\nAll \u003ccode\u003eNaN\u003c/code\u003e values are considered to be equal - i.e, if either\n(or both) real and imaginary parts of the complex number are equal\nto \u003ccode\u003eDouble.NaN\u003c/code\u003e, the complex number is equal to \n\u003ccode\u003eComplex.NaN\u003c/code\u003e.\u003c/p\u003e\n\n@param other Object to test for equality to this\n@return true if two Complex objects are equal, false if\n        object is null, not an instance of Complex, or\n        not equal to this Complex instance\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/math/complex/Complex.java",
        "newPath": "src/main/java/org/apache/commons/math/complex/Complex.java"
      }
    },
    "9c8d2c79c1ef565337599849cd066ff63b8d5816": {
      "type": "Yannotationchange",
      "commitMessage": "added missing @Override annotations\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@762087 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/5/09, 7:20 AM",
      "commitName": "9c8d2c79c1ef565337599849cd066ff63b8d5816",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "2/21/09, 12:01 PM",
      "commitNameOld": "7f88773d6c3c96c0a2fd24c3e50d1eb80daca11d",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 42.76,
      "commitsBetweenForRepo": 54,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic boolean equals(Object other) {\n    boolean ret;\n    if (this \u003d\u003d other) {\n        ret \u003d true;\n    } else if (other \u003d\u003d null) {\n        ret \u003d false;\n    } else {\n        try {\n            Complex rhs \u003d (Complex) other;\n            if (rhs.isNaN()) {\n                ret \u003d this.isNaN();\n            } else {\n                ret \u003d (real \u003d\u003d rhs.real) \u0026\u0026 (imaginary \u003d\u003d rhs.imaginary);\n            }\n        } catch (ClassCastException ex) {\n            ret \u003d false;\n        }\n    }\n    return ret;\n}",
      "path": "src/java/org/apache/commons/math/complex/Complex.java",
      "functionStartLine": 250,
      "functionName": "equals",
      "functionAnnotation": "@Override",
      "functionDoc": "Test for the equality of two Complex objects.\n\u003cp\u003e\nIf both the real and imaginary parts of two Complex numbers\nare exactly the same, and neither is \u003ccode\u003eDouble.NaN\u003c/code\u003e, the two\nComplex objects are considered to be equal.\u003c/p\u003e\n\u003cp\u003e\nAll \u003ccode\u003eNaN\u003c/code\u003e values are considered to be equal - i.e, if either\n(or both) real and imaginary parts of the complex number are equal\nto \u003ccode\u003eDouble.NaN\u003c/code\u003e, the complex number is equal to \n\u003ccode\u003eComplex.NaN\u003c/code\u003e.\u003c/p\u003e\n\n@param other Object to test for equality to this\n@return true if two Complex objects are equal, false if\n        object is null, not an instance of Complex, or\n        not equal to this Complex instance\n",
      "diff": "@@ -1,20 +1,21 @@\n+@Override\n public boolean equals(Object other) {\n     boolean ret;\n     if (this \u003d\u003d other) {\n         ret \u003d true;\n     } else if (other \u003d\u003d null) {\n         ret \u003d false;\n     } else {\n         try {\n             Complex rhs \u003d (Complex) other;\n             if (rhs.isNaN()) {\n                 ret \u003d this.isNaN();\n             } else {\n                 ret \u003d (real \u003d\u003d rhs.real) \u0026\u0026 (imaginary \u003d\u003d rhs.imaginary);\n             }\n         } catch (ClassCastException ex) {\n             ret \u003d false;\n         }\n     }\n     return ret;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "",
        "newValue": "@Override"
      }
    },
    "e6449cccdeaba96ffba4c27db322c5c3d5c18662": {
      "type": "Ybodychange",
      "commitMessage": "Changed the Complex.equals() method so that it considers +0 and -0 are equal,\nas required by IEEE-754 standard.\nJIRA: MATH-221\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/branches/MATH_2_0@690308 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/29/08, 8:46 AM",
      "commitName": "e6449cccdeaba96ffba4c27db322c5c3d5c18662",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "4/24/08, 5:01 AM",
      "commitNameOld": "30a40fa69d15367196d134823032514f6cddbaf6",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 127.16,
      "commitsBetweenForRepo": 102,
      "commitsBetweenForFile": 1,
      "actualSource": "public boolean equals(Object other) {\n    boolean ret;\n    if (this \u003d\u003d other) {\n        ret \u003d true;\n    } else if (other \u003d\u003d null) {\n        ret \u003d false;\n    } else {\n        try {\n            Complex rhs \u003d (Complex) other;\n            if (rhs.isNaN()) {\n                ret \u003d this.isNaN();\n            } else {\n                ret \u003d (real \u003d\u003d rhs.real) \u0026\u0026 (imaginary \u003d\u003d rhs.imaginary);\n            }\n        } catch (ClassCastException ex) {\n            ret \u003d false;\n        }\n    }\n    return ret;\n}",
      "path": "src/java/org/apache/commons/math/complex/Complex.java",
      "functionStartLine": 245,
      "functionName": "equals",
      "functionAnnotation": "",
      "functionDoc": "Test for the equality of two Complex objects.\n\u003cp\u003e\nIf both the real and imaginary parts of two Complex numbers\nare exactly the same, and neither is \u003ccode\u003eDouble.NaN\u003c/code\u003e, the two\nComplex objects are considered to be equal.\u003c/p\u003e\n\u003cp\u003e\nAll \u003ccode\u003eNaN\u003c/code\u003e values are considered to be equal - i.e, if either\n(or both) real and imaginary parts of the complex number are equal\nto \u003ccode\u003eDouble.NaN\u003c/code\u003e, the complex number is equal to \n\u003ccode\u003eComplex.NaN\u003c/code\u003e.\u003c/p\u003e\n\n@param other Object to test for equality to this\n@return true if two Complex objects are equal, false if\n        object is null, not an instance of Complex, or\n        not equal to this Complex instance\n",
      "diff": "@@ -1,20 +1,20 @@\n public boolean equals(Object other) {\n     boolean ret;\n     if (this \u003d\u003d other) {\n         ret \u003d true;\n     } else if (other \u003d\u003d null) {\n         ret \u003d false;\n     } else {\n         try {\n             Complex rhs \u003d (Complex) other;\n             if (rhs.isNaN()) {\n                 ret \u003d this.isNaN();\n             } else {\n-                ret \u003d (Double.doubleToRawLongBits(real) \u003d\u003d Double.doubleToRawLongBits(rhs.getReal())) \u0026\u0026 (Double.doubleToRawLongBits(imaginary) \u003d\u003d Double.doubleToRawLongBits(rhs.getImaginary()));\n+                ret \u003d (real \u003d\u003d rhs.real) \u0026\u0026 (imaginary \u003d\u003d rhs.imaginary);\n             }\n         } catch (ClassCastException ex) {\n             ret \u003d false;\n         }\n     }\n     return ret;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "932ebf87acd81162cc7b1751c18b0e0ca760c8bf": {
      "type": "Ydocchange",
      "commitMessage": "Javadoc only. Added missing \u003c/p\u003e\u0027s\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@615734 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/27/08, 10:10 PM",
      "commitName": "932ebf87acd81162cc7b1751c18b0e0ca760c8bf",
      "commitAuthor": "Phil Steitz",
      "commitDateOld": "1/8/08, 11:30 PM",
      "commitNameOld": "6375e636998ba899dd6354a5aaf60b357dbe66d6",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 18.94,
      "commitsBetweenForRepo": 54,
      "commitsBetweenForFile": 1,
      "actualSource": "public boolean equals(Object other) {\n    boolean ret;\n    if (this \u003d\u003d other) {\n        ret \u003d true;\n    } else if (other \u003d\u003d null) {\n        ret \u003d false;\n    } else {\n        try {\n            Complex rhs \u003d (Complex) other;\n            if (rhs.isNaN()) {\n                ret \u003d this.isNaN();\n            } else {\n                ret \u003d (Double.doubleToRawLongBits(real) \u003d\u003d Double.doubleToRawLongBits(rhs.getReal())) \u0026\u0026 (Double.doubleToRawLongBits(imaginary) \u003d\u003d Double.doubleToRawLongBits(rhs.getImaginary()));\n            }\n        } catch (ClassCastException ex) {\n            ret \u003d false;\n        }\n    }\n    return ret;\n}",
      "path": "src/java/org/apache/commons/math/complex/Complex.java",
      "functionStartLine": 242,
      "functionName": "equals",
      "functionAnnotation": "",
      "functionDoc": "Test for the equality of two Complex objects.\n\u003cp\u003e\nIf both the real and imaginary parts of two Complex numbers\nare exactly the same, and neither is \u003ccode\u003eDouble.NaN\u003c/code\u003e, the two\nComplex objects are considered to be equal.\u003c/p\u003e\n\u003cp\u003e\nAll \u003ccode\u003eNaN\u003c/code\u003e values are considered to be equal - i.e, if either\n(or both) real and imaginary parts of the complex number are equal\nto \u003ccode\u003eDouble.NaN\u003c/code\u003e, the complex number is equal to \n\u003ccode\u003eComplex.NaN\u003c/code\u003e.\u003c/p\u003e\n\n@param other Object to test for equality to this\n@return true if two Complex objects are equal, false if\n        object is null, not an instance of Complex, or\n        not equal to this Complex instance\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Test for the equality of two Complex objects.\n\u003cp\u003e\nIf both the real and imaginary parts of two Complex numbers\nare exactly the same, and neither is \u003ccode\u003eDouble.NaN\u003c/code\u003e, the two\nComplex objects are considered to be equal. \n\u003cp\u003e\nAll \u003ccode\u003eNaN\u003c/code\u003e values are considered to be equal - i.e, if either\n(or both) real and imaginary parts of the complex number are equal\nto \u003ccode\u003eDouble.NaN\u003c/code\u003e, the complex number is equal to \n\u003ccode\u003eComplex.NaN\u003c/code\u003e.\n\n@param other Object to test for equality to this\n@return true if two Complex objects are equal, false if\n        object is null, not an instance of Complex, or\n        not equal to this Complex instance\n",
        "newValue": "Test for the equality of two Complex objects.\n\u003cp\u003e\nIf both the real and imaginary parts of two Complex numbers\nare exactly the same, and neither is \u003ccode\u003eDouble.NaN\u003c/code\u003e, the two\nComplex objects are considered to be equal.\u003c/p\u003e\n\u003cp\u003e\nAll \u003ccode\u003eNaN\u003c/code\u003e values are considered to be equal - i.e, if either\n(or both) real and imaginary parts of the complex number are equal\nto \u003ccode\u003eDouble.NaN\u003c/code\u003e, the complex number is equal to \n\u003ccode\u003eComplex.NaN\u003c/code\u003e.\u003c/p\u003e\n\n@param other Object to test for equality to this\n@return true if two Complex objects are equal, false if\n        object is null, not an instance of Complex, or\n        not equal to this Complex instance\n"
      }
    },
    "6ef3b2932f4ca9219e41784bb0cd229dcabcdb11": {
      "type": "Ydocchange",
      "commitMessage": "Merged (final) src changes from MATH_1_1 release branch r321516-358399\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@358631 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/22/05, 1:16 PM",
      "commitName": "6ef3b2932f4ca9219e41784bb0cd229dcabcdb11",
      "commitAuthor": "Phil Steitz",
      "commitDateOld": "10/15/05, 8:29 PM",
      "commitNameOld": "545e47a273803b1d080b186c8cf139492f82c4fb",
      "commitAuthorOld": "Phil Steitz",
      "daysBetweenCommits": 67.74,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "public boolean equals(Object other) {\n    boolean ret;\n    if (this \u003d\u003d other) {\n        ret \u003d true;\n    } else if (other \u003d\u003d null) {\n        ret \u003d false;\n    } else {\n        try {\n            Complex rhs \u003d (Complex) other;\n            if (rhs.isNaN()) {\n                ret \u003d this.isNaN();\n            } else {\n                ret \u003d (Double.doubleToRawLongBits(real) \u003d\u003d Double.doubleToRawLongBits(rhs.getReal())) \u0026\u0026 (Double.doubleToRawLongBits(imaginary) \u003d\u003d Double.doubleToRawLongBits(rhs.getImaginary()));\n            }\n        } catch (ClassCastException ex) {\n            ret \u003d false;\n        }\n    }\n    return ret;\n}",
      "path": "src/java/org/apache/commons/math/complex/Complex.java",
      "functionStartLine": 238,
      "functionName": "equals",
      "functionAnnotation": "",
      "functionDoc": "Test for the equality of two Complex objects.\n\u003cp\u003e\nIf both the real and imaginary parts of two Complex numbers\nare exactly the same, and neither is \u003ccode\u003eDouble.NaN\u003c/code\u003e, the two\nComplex objects are considered to be equal. \n\u003cp\u003e\nAll \u003ccode\u003eNaN\u003c/code\u003e values are considered to be equal - i.e, if either\n(or both) real and imaginary parts of the complex number are equal\nto \u003ccode\u003eDouble.NaN\u003c/code\u003e, the complex number is equal to \n\u003ccode\u003eComplex.NaN\u003c/code\u003e.\n\n@param other Object to test for equality to this\n@return true if two Complex objects are equal, false if\n        object is null, not an instance of Complex, or\n        not equal to this Complex instance\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Test for the equality of two Complex objects.\n\u003cp\u003e\nIf both the real and imaginary parts of two Complex numbers\nare exactly the same, and neither is \u003ccode\u003eDouble.NaN\u003c/code\u003e, the two\nComplex objects are considered to be equal. \n\u003cp\u003e\nAll \u003ccode\u003eNaN\u003c/code\u003e values are considered to be equal - i.e, if either\n(or both) real and imaginary parts of the complex number are equal\nto Double.NaN, the complex number is equal to \n\u003ccode\u003eComplex.NaN\u003c/code\u003e.\n\n@param other Object to test for equality to this\n@return true if two Complex objects are equal, false if\n        object is null, not an instance of Complex, or\n        not equal to this Complex instance.\n",
        "newValue": "Test for the equality of two Complex objects.\n\u003cp\u003e\nIf both the real and imaginary parts of two Complex numbers\nare exactly the same, and neither is \u003ccode\u003eDouble.NaN\u003c/code\u003e, the two\nComplex objects are considered to be equal. \n\u003cp\u003e\nAll \u003ccode\u003eNaN\u003c/code\u003e values are considered to be equal - i.e, if either\n(or both) real and imaginary parts of the complex number are equal\nto \u003ccode\u003eDouble.NaN\u003c/code\u003e, the complex number is equal to \n\u003ccode\u003eComplex.NaN\u003c/code\u003e.\n\n@param other Object to test for equality to this\n@return true if two Complex objects are equal, false if\n        object is null, not an instance of Complex, or\n        not equal to this Complex instance\n"
      }
    },
    "545e47a273803b1d080b186c8cf139492f82c4fb": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Merging bug fixes in r267517:r321515 from MATH_1_1 branch.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@322442 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/15/05, 8:29 PM",
      "commitName": "545e47a273803b1d080b186c8cf139492f82c4fb",
      "commitAuthor": "Phil Steitz",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Merging bug fixes in r267517:r321515 from MATH_1_1 branch.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@322442 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/15/05, 8:29 PM",
          "commitName": "545e47a273803b1d080b186c8cf139492f82c4fb",
          "commitAuthor": "Phil Steitz",
          "commitDateOld": "8/22/05, 7:27 PM",
          "commitNameOld": "ad6929ea0c89c085422c1e43bb3f763a0e3d25e4",
          "commitAuthorOld": "Brent Worden",
          "daysBetweenCommits": 54.04,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "actualSource": "public boolean equals(Object other) {\n    boolean ret;\n    if (this \u003d\u003d other) {\n        ret \u003d true;\n    } else if (other \u003d\u003d null) {\n        ret \u003d false;\n    } else {\n        try {\n            Complex rhs \u003d (Complex) other;\n            if (rhs.isNaN()) {\n                ret \u003d this.isNaN();\n            } else {\n                ret \u003d (Double.doubleToRawLongBits(real) \u003d\u003d Double.doubleToRawLongBits(rhs.getReal())) \u0026\u0026 (Double.doubleToRawLongBits(imaginary) \u003d\u003d Double.doubleToRawLongBits(rhs.getImaginary()));\n            }\n        } catch (ClassCastException ex) {\n            ret \u003d false;\n        }\n    }\n    return ret;\n}",
          "path": "src/java/org/apache/commons/math/complex/Complex.java",
          "functionStartLine": 168,
          "functionName": "equals",
          "functionAnnotation": "",
          "functionDoc": "Test for the equality of two Complex objects.\n\u003cp\u003e\nIf both the real and imaginary parts of two Complex numbers\nare exactly the same, and neither is \u003ccode\u003eDouble.NaN\u003c/code\u003e, the two\nComplex objects are considered to be equal. \n\u003cp\u003e\nAll \u003ccode\u003eNaN\u003c/code\u003e values are considered to be equal - i.e, if either\n(or both) real and imaginary parts of the complex number are equal\nto Double.NaN, the complex number is equal to \n\u003ccode\u003eComplex.NaN\u003c/code\u003e.\n\n@param other Object to test for equality to this\n@return true if two Complex objects are equal, false if\n        object is null, not an instance of Complex, or\n        not equal to this Complex instance.\n",
          "diff": "@@ -1,16 +1,20 @@\n public boolean equals(Object other) {\n     boolean ret;\n     if (this \u003d\u003d other) {\n         ret \u003d true;\n     } else if (other \u003d\u003d null) {\n         ret \u003d false;\n     } else {\n         try {\n             Complex rhs \u003d (Complex) other;\n-            ret \u003d (Double.doubleToRawLongBits(real) \u003d\u003d Double.doubleToRawLongBits(rhs.getReal())) \u0026\u0026 (Double.doubleToRawLongBits(imaginary) \u003d\u003d Double.doubleToRawLongBits(rhs.getImaginary()));\n+            if (rhs.isNaN()) {\n+                ret \u003d this.isNaN();\n+            } else {\n+                ret \u003d (Double.doubleToRawLongBits(real) \u003d\u003d Double.doubleToRawLongBits(rhs.getReal())) \u0026\u0026 (Double.doubleToRawLongBits(imaginary) \u003d\u003d Double.doubleToRawLongBits(rhs.getImaginary()));\n+            }\n         } catch (ClassCastException ex) {\n             ret \u003d false;\n         }\n     }\n     return ret;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Merging bug fixes in r267517:r321515 from MATH_1_1 branch.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@322442 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/15/05, 8:29 PM",
          "commitName": "545e47a273803b1d080b186c8cf139492f82c4fb",
          "commitAuthor": "Phil Steitz",
          "commitDateOld": "8/22/05, 7:27 PM",
          "commitNameOld": "ad6929ea0c89c085422c1e43bb3f763a0e3d25e4",
          "commitAuthorOld": "Brent Worden",
          "daysBetweenCommits": 54.04,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "actualSource": "public boolean equals(Object other) {\n    boolean ret;\n    if (this \u003d\u003d other) {\n        ret \u003d true;\n    } else if (other \u003d\u003d null) {\n        ret \u003d false;\n    } else {\n        try {\n            Complex rhs \u003d (Complex) other;\n            if (rhs.isNaN()) {\n                ret \u003d this.isNaN();\n            } else {\n                ret \u003d (Double.doubleToRawLongBits(real) \u003d\u003d Double.doubleToRawLongBits(rhs.getReal())) \u0026\u0026 (Double.doubleToRawLongBits(imaginary) \u003d\u003d Double.doubleToRawLongBits(rhs.getImaginary()));\n            }\n        } catch (ClassCastException ex) {\n            ret \u003d false;\n        }\n    }\n    return ret;\n}",
          "path": "src/java/org/apache/commons/math/complex/Complex.java",
          "functionStartLine": 168,
          "functionName": "equals",
          "functionAnnotation": "",
          "functionDoc": "Test for the equality of two Complex objects.\n\u003cp\u003e\nIf both the real and imaginary parts of two Complex numbers\nare exactly the same, and neither is \u003ccode\u003eDouble.NaN\u003c/code\u003e, the two\nComplex objects are considered to be equal. \n\u003cp\u003e\nAll \u003ccode\u003eNaN\u003c/code\u003e values are considered to be equal - i.e, if either\n(or both) real and imaginary parts of the complex number are equal\nto Double.NaN, the complex number is equal to \n\u003ccode\u003eComplex.NaN\u003c/code\u003e.\n\n@param other Object to test for equality to this\n@return true if two Complex objects are equal, false if\n        object is null, not an instance of Complex, or\n        not equal to this Complex instance.\n",
          "diff": "@@ -1,16 +1,20 @@\n public boolean equals(Object other) {\n     boolean ret;\n     if (this \u003d\u003d other) {\n         ret \u003d true;\n     } else if (other \u003d\u003d null) {\n         ret \u003d false;\n     } else {\n         try {\n             Complex rhs \u003d (Complex) other;\n-            ret \u003d (Double.doubleToRawLongBits(real) \u003d\u003d Double.doubleToRawLongBits(rhs.getReal())) \u0026\u0026 (Double.doubleToRawLongBits(imaginary) \u003d\u003d Double.doubleToRawLongBits(rhs.getImaginary()));\n+            if (rhs.isNaN()) {\n+                ret \u003d this.isNaN();\n+            } else {\n+                ret \u003d (Double.doubleToRawLongBits(real) \u003d\u003d Double.doubleToRawLongBits(rhs.getReal())) \u0026\u0026 (Double.doubleToRawLongBits(imaginary) \u003d\u003d Double.doubleToRawLongBits(rhs.getImaginary()));\n+            }\n         } catch (ClassCastException ex) {\n             ret \u003d false;\n         }\n     }\n     return ret;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Test for the equality of two Complex objects.  If both the\nreal and imaginary parts of two Complex numbers are exactly\nthe same, the two Complex objects are considered to be equal.\n\n@param other Object to test for equality to this\n@return true if two Complex objects are equal, false if\n        object is null, not an instance of Complex, or\n        not equal to this Complex instance.\n",
            "newValue": "Test for the equality of two Complex objects.\n\u003cp\u003e\nIf both the real and imaginary parts of two Complex numbers\nare exactly the same, and neither is \u003ccode\u003eDouble.NaN\u003c/code\u003e, the two\nComplex objects are considered to be equal. \n\u003cp\u003e\nAll \u003ccode\u003eNaN\u003c/code\u003e values are considered to be equal - i.e, if either\n(or both) real and imaginary parts of the complex number are equal\nto Double.NaN, the complex number is equal to \n\u003ccode\u003eComplex.NaN\u003c/code\u003e.\n\n@param other Object to test for equality to this\n@return true if two Complex objects are equal, false if\n        object is null, not an instance of Complex, or\n        not equal to this Complex instance.\n"
          }
        }
      ]
    },
    "3f892d9e5957dca9312d5a72c6930fae62625da9": {
      "type": "Ydocchange",
      "commitMessage": "Added JavaDoc to the Complex class, still more work to be done.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141112 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/29/04, 11:52 AM",
      "commitName": "3f892d9e5957dca9312d5a72c6930fae62625da9",
      "commitAuthor": "Timothy O\u0027Brien",
      "commitDateOld": "2/21/04, 1:35 PM",
      "commitNameOld": "5d66d93e57e142760603024ce1429f2d229a6c8f",
      "commitAuthorOld": "Phil Steitz",
      "daysBetweenCommits": 7.93,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "public boolean equals(Object other) {\n    boolean ret;\n    if (this \u003d\u003d other) {\n        ret \u003d true;\n    } else if (other \u003d\u003d null) {\n        ret \u003d false;\n    } else {\n        try {\n            Complex rhs \u003d (Complex) other;\n            ret \u003d (Double.doubleToRawLongBits(real) \u003d\u003d Double.doubleToRawLongBits(rhs.getReal())) \u0026\u0026 (Double.doubleToRawLongBits(imaginary) \u003d\u003d Double.doubleToRawLongBits(rhs.getImaginary()));\n        } catch (ClassCastException ex) {\n            ret \u003d false;\n        }\n    }\n    return ret;\n}",
      "path": "src/java/org/apache/commons/math/complex/Complex.java",
      "functionStartLine": 133,
      "functionName": "equals",
      "functionAnnotation": "",
      "functionDoc": "Test for the equality of two Complex objects.  If both the\nreal and imaginary parts of two Complex numbers are exactly\nthe same, the two Complex objects are considered to be equal.\n\n@param other Object to test for equality to this\n@return true if two Complex objects are equal, false if\n        object is null, not an instance of Complex, or\n        not equal to this Complex instance.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "",
        "newValue": "Test for the equality of two Complex objects.  If both the\nreal and imaginary parts of two Complex numbers are exactly\nthe same, the two Complex objects are considered to be equal.\n\n@param other Object to test for equality to this\n@return true if two Complex objects are equal, false if\n        object is null, not an instance of Complex, or\n        not equal to this Complex instance.\n"
      }
    },
    "0a904461932f2c0455611e77ec6a8d8aced2980b": {
      "type": "Yintroduced",
      "commitMessage": "Attempting to recover last revision.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141013 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/14/03, 2:25 PM",
      "commitName": "0a904461932f2c0455611e77ec6a8d8aced2980b",
      "commitAuthor": "Mark R. Diggory",
      "diff": "@@ -0,0 +1,16 @@\n+public boolean equals(Object other) {\n+    boolean ret;\n+    if (this \u003d\u003d other) {\n+        ret \u003d true;\n+    } else if (other \u003d\u003d null) {\n+        ret \u003d false;\n+    } else {\n+        try {\n+            Complex rhs \u003d (Complex) other;\n+            ret \u003d (Double.doubleToRawLongBits(real) \u003d\u003d Double.doubleToRawLongBits(rhs.getReal())) \u0026\u0026 (Double.doubleToRawLongBits(imaginary) \u003d\u003d Double.doubleToRawLongBits(rhs.getImaginary()));\n+        } catch (ClassCastException ex) {\n+            ret \u003d false;\n+        }\n+    }\n+    return ret;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public boolean equals(Object other) {\n    boolean ret;\n    if (this \u003d\u003d other) {\n        ret \u003d true;\n    } else if (other \u003d\u003d null) {\n        ret \u003d false;\n    } else {\n        try {\n            Complex rhs \u003d (Complex) other;\n            ret \u003d (Double.doubleToRawLongBits(real) \u003d\u003d Double.doubleToRawLongBits(rhs.getReal())) \u0026\u0026 (Double.doubleToRawLongBits(imaginary) \u003d\u003d Double.doubleToRawLongBits(rhs.getImaginary()));\n        } catch (ClassCastException ex) {\n            ret \u003d false;\n        }\n    }\n    return ret;\n}",
      "path": "src/java/org/apache/commons/math/complex/Complex.java",
      "functionStartLine": 156,
      "functionName": "equals",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}