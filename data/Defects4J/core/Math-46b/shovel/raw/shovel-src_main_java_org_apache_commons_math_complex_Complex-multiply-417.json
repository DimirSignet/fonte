{
  "origin": "codeshovel",
  "repositoryName": "Math-46b",
  "repositoryPath": "/tmp/Math-46b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Complex.java",
  "functionName": "multiply",
  "functionId": "multiply___factor-Complex",
  "sourceFilePath": "src/main/java/org/apache/commons/math/complex/Complex.java",
  "functionAnnotation": "",
  "functionDoc": "Returns a {@code Complex} whose value is {@code this * factor}.\nImplements preliminary checks for {@code NaN} and infinity followed by\nthe definitional formula:\n\u003cpre\u003e\n \u003ccode\u003e\n  (a + bi)(c + di) \u003d (ac - bd) + (ad + bc)i\n \u003c/code\u003e\n\u003c/pre\u003e\nReturns {@link #NaN} if either {@code this} or {@code factor} has one or\nmore {@code NaN} parts.\n\u003cbr/\u003e\nReturns {@link #INF} if neither {@code this} nor {@code factor} has one\nor more {@code NaN} parts and if either {@code this} or {@code factor}\nhas one or more infinite parts (same result is returned regardless of\nthe sign of the components).\n\u003cbr/\u003e\nReturns finite values in components of the result per the definitional\nformula in all remaining cases.\n\n@param factor value to be multiplied by this {@code Complex}.\n@return @code this * factor}.\n@throws NullArgumentException if {@code factor} is {@code null}.\n",
  "functionStartLine": 417,
  "functionEndLine": 432,
  "numCommitsSeen": 76,
  "timeTaken": 2767,
  "changeHistory": [
    "3fb72699d911f4b9a4a18a30a75e9d9c4bb7305f",
    "b522106e845feae4200e37d0bd190fb6cdc5b756",
    "f34508958e47b663652c2ad420e6801f7150dac3",
    "e9c6d1de301072c16a48587db682542f967b3a9b",
    "d6a438e931412713e99624cf9ed74470f1040184",
    "6375e636998ba899dd6354a5aaf60b357dbe66d6",
    "912d9beb43edb26caf87a32f08664ea634136c73",
    "6ef3b2932f4ca9219e41784bb0cd229dcabcdb11",
    "0a904461932f2c0455611e77ec6a8d8aced2980b"
  ],
  "changeHistoryShort": {
    "3fb72699d911f4b9a4a18a30a75e9d9c4bb7305f": "Yannotationchange",
    "b522106e845feae4200e37d0bd190fb6cdc5b756": "Ymultichange(Yparameterchange,Ybodychange,Yannotationchange,Ydocchange)",
    "f34508958e47b663652c2ad420e6801f7150dac3": "Ybodychange",
    "e9c6d1de301072c16a48587db682542f967b3a9b": "Ymultichange(Yexceptionschange,Ybodychange,Ydocchange)",
    "d6a438e931412713e99624cf9ed74470f1040184": "Yfilerename",
    "6375e636998ba899dd6354a5aaf60b357dbe66d6": "Ymultichange(Ybodychange,Ydocchange)",
    "912d9beb43edb26caf87a32f08664ea634136c73": "Ybodychange",
    "6ef3b2932f4ca9219e41784bb0cd229dcabcdb11": "Ymultichange(Ybodychange,Ydocchange)",
    "0a904461932f2c0455611e77ec6a8d8aced2980b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3fb72699d911f4b9a4a18a30a75e9d9c4bb7305f": {
      "type": "Yannotationchange",
      "commitMessage": "Java 1.5 does not allow @Override for method implementations, only true overrides\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1150378 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/24/11, 7:24 AM",
      "commitName": "3fb72699d911f4b9a4a18a30a75e9d9c4bb7305f",
      "commitAuthor": "Sebastian Bazley",
      "commitDateOld": "7/24/11, 4:21 AM",
      "commitNameOld": "b522106e845feae4200e37d0bd190fb6cdc5b756",
      "commitAuthorOld": "Gilles Sadowski",
      "daysBetweenCommits": 0.13,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public Complex multiply(Complex factor) throws NullArgumentException {\n    MathUtils.checkNotNull(factor);\n    if (isNaN || factor.isNaN) {\n        return NaN;\n    }\n    if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(factor.real) || Double.isInfinite(factor.imaginary)) {\n        return INF;\n    }\n    return createComplex(real * factor.real - imaginary * factor.imaginary, real * factor.imaginary + imaginary * factor.real);\n}",
      "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
      "functionStartLine": 405,
      "functionName": "multiply",
      "functionAnnotation": "",
      "functionDoc": "Returns a {@code Complex} whose value is {@code this * factor}.\nImplements preliminary checks for {@code NaN} and infinity followed by\nthe definitional formula:\n\u003cpre\u003e\n \u003ccode\u003e\n  (a + bi)(c + di) \u003d (ac - bd) + (ad + bc)i\n \u003c/code\u003e\n\u003c/pre\u003e\nReturns {@link #NaN} if either {@code this} or {@code factor} has one or\nmore {@code NaN} parts.\n\u003cbr/\u003e\nReturns {@link #INF} if neither {@code this} nor {@code factor} has one\nor more {@code NaN} parts and if either {@code this} or {@code factor}\nhas one or more infinite parts (same result is returned regardless of\nthe sign of the components).\n\u003cbr/\u003e\nReturns finite values in components of the result per the definitional\nformula in all remaining cases.\n\n@param factor value to be multiplied by this {@code Complex}.\n@return @code this * factor}.\n@throws NullArgumentException if {@code factor} is {@code null}.\n",
      "diff": "@@ -1,11 +1,10 @@\n-@Override\n public Complex multiply(Complex factor) throws NullArgumentException {\n     MathUtils.checkNotNull(factor);\n     if (isNaN || factor.isNaN) {\n         return NaN;\n     }\n     if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(factor.real) || Double.isInfinite(factor.imaginary)) {\n         return INF;\n     }\n     return createComplex(real * factor.real - imaginary * factor.imaginary, real * factor.imaginary + imaginary * factor.real);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "@Override",
        "newValue": ""
      }
    },
    "b522106e845feae4200e37d0bd190fb6cdc5b756": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Yannotationchange,Ydocchange)",
      "commitMessage": "MATH-577\nVarious enhancements to the \"Complex\" class, namely operators (add,\nsubtract, ...) taking a \"double\" argument, improved consistency in\nthe use of \"NAN\" and \"INF\" fields, updated Javadoc. Mainly due to\nArne Plöse.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1150340 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/24/11, 4:21 AM",
      "commitName": "b522106e845feae4200e37d0bd190fb6cdc5b756",
      "commitAuthor": "Gilles Sadowski",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MATH-577\nVarious enhancements to the \"Complex\" class, namely operators (add,\nsubtract, ...) taking a \"double\" argument, improved consistency in\nthe use of \"NAN\" and \"INF\" fields, updated Javadoc. Mainly due to\nArne Plöse.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1150340 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/24/11, 4:21 AM",
          "commitName": "b522106e845feae4200e37d0bd190fb6cdc5b756",
          "commitAuthor": "Gilles Sadowski",
          "commitDateOld": "7/13/11, 11:08 PM",
          "commitNameOld": "7707b0bb80be05bbf6533a36bb0c646cbfd1026d",
          "commitAuthorOld": "Phil Steitz",
          "daysBetweenCommits": 10.22,
          "commitsBetweenForRepo": 22,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic Complex multiply(Complex factor) throws NullArgumentException {\n    MathUtils.checkNotNull(factor);\n    if (isNaN || factor.isNaN) {\n        return NaN;\n    }\n    if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(factor.real) || Double.isInfinite(factor.imaginary)) {\n        return INF;\n    }\n    return createComplex(real * factor.real - imaginary * factor.imaginary, real * factor.imaginary + imaginary * factor.real);\n}",
          "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
          "functionStartLine": 408,
          "functionName": "multiply",
          "functionAnnotation": "@Override",
          "functionDoc": "Returns a {@code Complex} whose value is {@code this * factor}.\nImplements preliminary checks for {@code NaN} and infinity followed by\nthe definitional formula:\n\u003cpre\u003e\n \u003ccode\u003e\n  (a + bi)(c + di) \u003d (ac - bd) + (ad + bc)i\n \u003c/code\u003e\n\u003c/pre\u003e\nReturns {@link #NaN} if either {@code this} or {@code factor} has one or\nmore {@code NaN} parts.\n\u003cbr/\u003e\nReturns {@link #INF} if neither {@code this} nor {@code factor} has one\nor more {@code NaN} parts and if either {@code this} or {@code factor}\nhas one or more infinite parts (same result is returned regardless of\nthe sign of the components).\n\u003cbr/\u003e\nReturns finite values in components of the result per the definitional\nformula in all remaining cases.\n\n@param factor value to be multiplied by this {@code Complex}.\n@return @code this * factor}.\n@throws NullArgumentException if {@code factor} is {@code null}.\n",
          "diff": "@@ -1,10 +1,11 @@\n-public Complex multiply(Complex rhs) throws NullArgumentException {\n-    MathUtils.checkNotNull(rhs);\n-    if (isNaN || rhs.isNaN) {\n+@Override\n+public Complex multiply(Complex factor) throws NullArgumentException {\n+    MathUtils.checkNotNull(factor);\n+    if (isNaN || factor.isNaN) {\n         return NaN;\n     }\n-    if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(rhs.real) || Double.isInfinite(rhs.imaginary)) {\n+    if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(factor.real) || Double.isInfinite(factor.imaginary)) {\n         return INF;\n     }\n-    return createComplex(real * rhs.real - imaginary * rhs.imaginary, real * rhs.imaginary + imaginary * rhs.real);\n+    return createComplex(real * factor.real - imaginary * factor.imaginary, real * factor.imaginary + imaginary * factor.real);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[rhs-Complex]",
            "newValue": "[factor-Complex]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MATH-577\nVarious enhancements to the \"Complex\" class, namely operators (add,\nsubtract, ...) taking a \"double\" argument, improved consistency in\nthe use of \"NAN\" and \"INF\" fields, updated Javadoc. Mainly due to\nArne Plöse.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1150340 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/24/11, 4:21 AM",
          "commitName": "b522106e845feae4200e37d0bd190fb6cdc5b756",
          "commitAuthor": "Gilles Sadowski",
          "commitDateOld": "7/13/11, 11:08 PM",
          "commitNameOld": "7707b0bb80be05bbf6533a36bb0c646cbfd1026d",
          "commitAuthorOld": "Phil Steitz",
          "daysBetweenCommits": 10.22,
          "commitsBetweenForRepo": 22,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic Complex multiply(Complex factor) throws NullArgumentException {\n    MathUtils.checkNotNull(factor);\n    if (isNaN || factor.isNaN) {\n        return NaN;\n    }\n    if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(factor.real) || Double.isInfinite(factor.imaginary)) {\n        return INF;\n    }\n    return createComplex(real * factor.real - imaginary * factor.imaginary, real * factor.imaginary + imaginary * factor.real);\n}",
          "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
          "functionStartLine": 408,
          "functionName": "multiply",
          "functionAnnotation": "@Override",
          "functionDoc": "Returns a {@code Complex} whose value is {@code this * factor}.\nImplements preliminary checks for {@code NaN} and infinity followed by\nthe definitional formula:\n\u003cpre\u003e\n \u003ccode\u003e\n  (a + bi)(c + di) \u003d (ac - bd) + (ad + bc)i\n \u003c/code\u003e\n\u003c/pre\u003e\nReturns {@link #NaN} if either {@code this} or {@code factor} has one or\nmore {@code NaN} parts.\n\u003cbr/\u003e\nReturns {@link #INF} if neither {@code this} nor {@code factor} has one\nor more {@code NaN} parts and if either {@code this} or {@code factor}\nhas one or more infinite parts (same result is returned regardless of\nthe sign of the components).\n\u003cbr/\u003e\nReturns finite values in components of the result per the definitional\nformula in all remaining cases.\n\n@param factor value to be multiplied by this {@code Complex}.\n@return @code this * factor}.\n@throws NullArgumentException if {@code factor} is {@code null}.\n",
          "diff": "@@ -1,10 +1,11 @@\n-public Complex multiply(Complex rhs) throws NullArgumentException {\n-    MathUtils.checkNotNull(rhs);\n-    if (isNaN || rhs.isNaN) {\n+@Override\n+public Complex multiply(Complex factor) throws NullArgumentException {\n+    MathUtils.checkNotNull(factor);\n+    if (isNaN || factor.isNaN) {\n         return NaN;\n     }\n-    if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(rhs.real) || Double.isInfinite(rhs.imaginary)) {\n+    if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(factor.real) || Double.isInfinite(factor.imaginary)) {\n         return INF;\n     }\n-    return createComplex(real * rhs.real - imaginary * rhs.imaginary, real * rhs.imaginary + imaginary * rhs.real);\n+    return createComplex(real * factor.real - imaginary * factor.imaginary, real * factor.imaginary + imaginary * factor.real);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yannotationchange",
          "commitMessage": "MATH-577\nVarious enhancements to the \"Complex\" class, namely operators (add,\nsubtract, ...) taking a \"double\" argument, improved consistency in\nthe use of \"NAN\" and \"INF\" fields, updated Javadoc. Mainly due to\nArne Plöse.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1150340 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/24/11, 4:21 AM",
          "commitName": "b522106e845feae4200e37d0bd190fb6cdc5b756",
          "commitAuthor": "Gilles Sadowski",
          "commitDateOld": "7/13/11, 11:08 PM",
          "commitNameOld": "7707b0bb80be05bbf6533a36bb0c646cbfd1026d",
          "commitAuthorOld": "Phil Steitz",
          "daysBetweenCommits": 10.22,
          "commitsBetweenForRepo": 22,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic Complex multiply(Complex factor) throws NullArgumentException {\n    MathUtils.checkNotNull(factor);\n    if (isNaN || factor.isNaN) {\n        return NaN;\n    }\n    if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(factor.real) || Double.isInfinite(factor.imaginary)) {\n        return INF;\n    }\n    return createComplex(real * factor.real - imaginary * factor.imaginary, real * factor.imaginary + imaginary * factor.real);\n}",
          "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
          "functionStartLine": 408,
          "functionName": "multiply",
          "functionAnnotation": "@Override",
          "functionDoc": "Returns a {@code Complex} whose value is {@code this * factor}.\nImplements preliminary checks for {@code NaN} and infinity followed by\nthe definitional formula:\n\u003cpre\u003e\n \u003ccode\u003e\n  (a + bi)(c + di) \u003d (ac - bd) + (ad + bc)i\n \u003c/code\u003e\n\u003c/pre\u003e\nReturns {@link #NaN} if either {@code this} or {@code factor} has one or\nmore {@code NaN} parts.\n\u003cbr/\u003e\nReturns {@link #INF} if neither {@code this} nor {@code factor} has one\nor more {@code NaN} parts and if either {@code this} or {@code factor}\nhas one or more infinite parts (same result is returned regardless of\nthe sign of the components).\n\u003cbr/\u003e\nReturns finite values in components of the result per the definitional\nformula in all remaining cases.\n\n@param factor value to be multiplied by this {@code Complex}.\n@return @code this * factor}.\n@throws NullArgumentException if {@code factor} is {@code null}.\n",
          "diff": "@@ -1,10 +1,11 @@\n-public Complex multiply(Complex rhs) throws NullArgumentException {\n-    MathUtils.checkNotNull(rhs);\n-    if (isNaN || rhs.isNaN) {\n+@Override\n+public Complex multiply(Complex factor) throws NullArgumentException {\n+    MathUtils.checkNotNull(factor);\n+    if (isNaN || factor.isNaN) {\n         return NaN;\n     }\n-    if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(rhs.real) || Double.isInfinite(rhs.imaginary)) {\n+    if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(factor.real) || Double.isInfinite(factor.imaginary)) {\n         return INF;\n     }\n-    return createComplex(real * rhs.real - imaginary * rhs.imaginary, real * rhs.imaginary + imaginary * rhs.real);\n+    return createComplex(real * factor.real - imaginary * factor.imaginary, real * factor.imaginary + imaginary * factor.real);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "@Override"
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "MATH-577\nVarious enhancements to the \"Complex\" class, namely operators (add,\nsubtract, ...) taking a \"double\" argument, improved consistency in\nthe use of \"NAN\" and \"INF\" fields, updated Javadoc. Mainly due to\nArne Plöse.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1150340 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/24/11, 4:21 AM",
          "commitName": "b522106e845feae4200e37d0bd190fb6cdc5b756",
          "commitAuthor": "Gilles Sadowski",
          "commitDateOld": "7/13/11, 11:08 PM",
          "commitNameOld": "7707b0bb80be05bbf6533a36bb0c646cbfd1026d",
          "commitAuthorOld": "Phil Steitz",
          "daysBetweenCommits": 10.22,
          "commitsBetweenForRepo": 22,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic Complex multiply(Complex factor) throws NullArgumentException {\n    MathUtils.checkNotNull(factor);\n    if (isNaN || factor.isNaN) {\n        return NaN;\n    }\n    if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(factor.real) || Double.isInfinite(factor.imaginary)) {\n        return INF;\n    }\n    return createComplex(real * factor.real - imaginary * factor.imaginary, real * factor.imaginary + imaginary * factor.real);\n}",
          "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
          "functionStartLine": 408,
          "functionName": "multiply",
          "functionAnnotation": "@Override",
          "functionDoc": "Returns a {@code Complex} whose value is {@code this * factor}.\nImplements preliminary checks for {@code NaN} and infinity followed by\nthe definitional formula:\n\u003cpre\u003e\n \u003ccode\u003e\n  (a + bi)(c + di) \u003d (ac - bd) + (ad + bc)i\n \u003c/code\u003e\n\u003c/pre\u003e\nReturns {@link #NaN} if either {@code this} or {@code factor} has one or\nmore {@code NaN} parts.\n\u003cbr/\u003e\nReturns {@link #INF} if neither {@code this} nor {@code factor} has one\nor more {@code NaN} parts and if either {@code this} or {@code factor}\nhas one or more infinite parts (same result is returned regardless of\nthe sign of the components).\n\u003cbr/\u003e\nReturns finite values in components of the result per the definitional\nformula in all remaining cases.\n\n@param factor value to be multiplied by this {@code Complex}.\n@return @code this * factor}.\n@throws NullArgumentException if {@code factor} is {@code null}.\n",
          "diff": "@@ -1,10 +1,11 @@\n-public Complex multiply(Complex rhs) throws NullArgumentException {\n-    MathUtils.checkNotNull(rhs);\n-    if (isNaN || rhs.isNaN) {\n+@Override\n+public Complex multiply(Complex factor) throws NullArgumentException {\n+    MathUtils.checkNotNull(factor);\n+    if (isNaN || factor.isNaN) {\n         return NaN;\n     }\n-    if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(rhs.real) || Double.isInfinite(rhs.imaginary)) {\n+    if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(factor.real) || Double.isInfinite(factor.imaginary)) {\n         return INF;\n     }\n-    return createComplex(real * rhs.real - imaginary * rhs.imaginary, real * rhs.imaginary + imaginary * rhs.real);\n+    return createComplex(real * factor.real - imaginary * factor.imaginary, real * factor.imaginary + imaginary * factor.real);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Return the product of this complex number and the given complex number.\n\u003cp\u003e\nImplements preliminary checks for NaN and infinity followed by\nthe definitional formula:\n\u003cpre\u003e\u003ccode\u003e\n(a + bi)(c + di) \u003d (ac - bd) + (ad + bc)i\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/p\u003e\n\u003cp\u003e\nReturns {@link #NaN} if either this or \u003ccode\u003erhs\u003c/code\u003e has one or more\nNaN parts.\n\u003c/p\u003e\nReturns {@link #INF} if neither this nor \u003ccode\u003erhs\u003c/code\u003e has one or more\nNaN parts and if either this or \u003ccode\u003erhs\u003c/code\u003e has one or more\ninfinite parts (same result is returned regardless of the sign of the\ncomponents).\n\u003c/p\u003e\n\u003cp\u003e\nReturns finite values in components of the result per the\ndefinitional formula in all remaining cases.\n \u003c/p\u003e\n\n@param rhs the other complex number\n@return the complex number product\n@throws NullArgumentException if \u003ccode\u003erhs\u003c/code\u003e is null\n",
            "newValue": "Returns a {@code Complex} whose value is {@code this * factor}.\nImplements preliminary checks for {@code NaN} and infinity followed by\nthe definitional formula:\n\u003cpre\u003e\n \u003ccode\u003e\n  (a + bi)(c + di) \u003d (ac - bd) + (ad + bc)i\n \u003c/code\u003e\n\u003c/pre\u003e\nReturns {@link #NaN} if either {@code this} or {@code factor} has one or\nmore {@code NaN} parts.\n\u003cbr/\u003e\nReturns {@link #INF} if neither {@code this} nor {@code factor} has one\nor more {@code NaN} parts and if either {@code this} or {@code factor}\nhas one or more infinite parts (same result is returned regardless of\nthe sign of the components).\n\u003cbr/\u003e\nReturns finite values in components of the result per the definitional\nformula in all remaining cases.\n\n@param factor value to be multiplied by this {@code Complex}.\n@return @code this * factor}.\n@throws NullArgumentException if {@code factor} is {@code null}.\n"
          }
        }
      ]
    },
    "f34508958e47b663652c2ad420e6801f7150dac3": {
      "type": "Ybodychange",
      "commitMessage": "MATH-577\nReplaced function calls by direct reference to the instance variable.\nRemoved redundant prefix for static fields.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1145945 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/13/11, 3:10 AM",
      "commitName": "f34508958e47b663652c2ad420e6801f7150dac3",
      "commitAuthor": "Gilles Sadowski",
      "commitDateOld": "7/13/11, 2:41 AM",
      "commitNameOld": "9ca71cd7ab80b3b6620867272acb35b15bc50921",
      "commitAuthorOld": "Gilles Sadowski",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public Complex multiply(Complex rhs) throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    if (isNaN || rhs.isNaN) {\n        return NaN;\n    }\n    if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(rhs.real) || Double.isInfinite(rhs.imaginary)) {\n        return INF;\n    }\n    return createComplex(real * rhs.real - imaginary * rhs.imaginary, real * rhs.imaginary + imaginary * rhs.real);\n}",
      "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
      "functionStartLine": 362,
      "functionName": "multiply",
      "functionAnnotation": "",
      "functionDoc": "Return the product of this complex number and the given complex number.\n\u003cp\u003e\nImplements preliminary checks for NaN and infinity followed by\nthe definitional formula:\n\u003cpre\u003e\u003ccode\u003e\n(a + bi)(c + di) \u003d (ac - bd) + (ad + bc)i\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/p\u003e\n\u003cp\u003e\nReturns {@link #NaN} if either this or \u003ccode\u003erhs\u003c/code\u003e has one or more\nNaN parts.\n\u003c/p\u003e\nReturns {@link #INF} if neither this nor \u003ccode\u003erhs\u003c/code\u003e has one or more\nNaN parts and if either this or \u003ccode\u003erhs\u003c/code\u003e has one or more\ninfinite parts (same result is returned regardless of the sign of the\ncomponents).\n\u003c/p\u003e\n\u003cp\u003e\nReturns finite values in components of the result per the\ndefinitional formula in all remaining cases.\n \u003c/p\u003e\n\n@param rhs the other complex number\n@return the complex number product\n@throws NullArgumentException if \u003ccode\u003erhs\u003c/code\u003e is null\n",
      "diff": "@@ -1,10 +1,10 @@\n public Complex multiply(Complex rhs) throws NullArgumentException {\n     MathUtils.checkNotNull(rhs);\n-    if (isNaN() || rhs.isNaN()) {\n+    if (isNaN || rhs.isNaN) {\n         return NaN;\n     }\n     if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(rhs.real) || Double.isInfinite(rhs.imaginary)) {\n         return INF;\n     }\n     return createComplex(real * rhs.real - imaginary * rhs.imaginary, real * rhs.imaginary + imaginary * rhs.real);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e9c6d1de301072c16a48587db682542f967b3a9b": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange,Ydocchange)",
      "commitMessage": "Replaced NullPointerException by NullArgumentException\n\nJIRA: MATH-403\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1132432 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/5/11, 7:59 AM",
      "commitName": "e9c6d1de301072c16a48587db682542f967b3a9b",
      "commitAuthor": "Luc Maisonobe",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "Replaced NullPointerException by NullArgumentException\n\nJIRA: MATH-403\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1132432 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "6/5/11, 7:59 AM",
          "commitName": "e9c6d1de301072c16a48587db682542f967b3a9b",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "6/3/11, 1:49 PM",
          "commitNameOld": "98e22d778b3a886be253638b9a6b7ec075c3d62d",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 1.76,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public Complex multiply(Complex rhs) throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    if (isNaN() || rhs.isNaN()) {\n        return NaN;\n    }\n    if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(rhs.real) || Double.isInfinite(rhs.imaginary)) {\n        return INF;\n    }\n    return createComplex(real * rhs.real - imaginary * rhs.imaginary, real * rhs.imaginary + imaginary * rhs.real);\n}",
          "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
          "functionStartLine": 362,
          "functionName": "multiply",
          "functionAnnotation": "",
          "functionDoc": "Return the product of this complex number and the given complex number.\n\u003cp\u003e\nImplements preliminary checks for NaN and infinity followed by\nthe definitional formula:\n\u003cpre\u003e\u003ccode\u003e\n(a + bi)(c + di) \u003d (ac - bd) + (ad + bc)i\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/p\u003e\n\u003cp\u003e\nReturns {@link #NaN} if either this or \u003ccode\u003erhs\u003c/code\u003e has one or more\nNaN parts.\n\u003c/p\u003e\nReturns {@link #INF} if neither this nor \u003ccode\u003erhs\u003c/code\u003e has one or more\nNaN parts and if either this or \u003ccode\u003erhs\u003c/code\u003e has one or more\ninfinite parts (same result is returned regardless of the sign of the\ncomponents).\n\u003c/p\u003e\n\u003cp\u003e\nReturns finite values in components of the result per the\ndefinitional formula in all remaining cases.\n \u003c/p\u003e\n\n@param rhs the other complex number\n@return the complex number product\n@throws NullArgumentException if \u003ccode\u003erhs\u003c/code\u003e is null\n",
          "diff": "@@ -1,9 +1,10 @@\n-public Complex multiply(Complex rhs) {\n+public Complex multiply(Complex rhs) throws NullArgumentException {\n+    MathUtils.checkNotNull(rhs);\n     if (isNaN() || rhs.isNaN()) {\n         return NaN;\n     }\n     if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(rhs.real) || Double.isInfinite(rhs.imaginary)) {\n         return INF;\n     }\n     return createComplex(real * rhs.real - imaginary * rhs.imaginary, real * rhs.imaginary + imaginary * rhs.real);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[NullArgumentException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Replaced NullPointerException by NullArgumentException\n\nJIRA: MATH-403\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1132432 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "6/5/11, 7:59 AM",
          "commitName": "e9c6d1de301072c16a48587db682542f967b3a9b",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "6/3/11, 1:49 PM",
          "commitNameOld": "98e22d778b3a886be253638b9a6b7ec075c3d62d",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 1.76,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public Complex multiply(Complex rhs) throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    if (isNaN() || rhs.isNaN()) {\n        return NaN;\n    }\n    if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(rhs.real) || Double.isInfinite(rhs.imaginary)) {\n        return INF;\n    }\n    return createComplex(real * rhs.real - imaginary * rhs.imaginary, real * rhs.imaginary + imaginary * rhs.real);\n}",
          "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
          "functionStartLine": 362,
          "functionName": "multiply",
          "functionAnnotation": "",
          "functionDoc": "Return the product of this complex number and the given complex number.\n\u003cp\u003e\nImplements preliminary checks for NaN and infinity followed by\nthe definitional formula:\n\u003cpre\u003e\u003ccode\u003e\n(a + bi)(c + di) \u003d (ac - bd) + (ad + bc)i\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/p\u003e\n\u003cp\u003e\nReturns {@link #NaN} if either this or \u003ccode\u003erhs\u003c/code\u003e has one or more\nNaN parts.\n\u003c/p\u003e\nReturns {@link #INF} if neither this nor \u003ccode\u003erhs\u003c/code\u003e has one or more\nNaN parts and if either this or \u003ccode\u003erhs\u003c/code\u003e has one or more\ninfinite parts (same result is returned regardless of the sign of the\ncomponents).\n\u003c/p\u003e\n\u003cp\u003e\nReturns finite values in components of the result per the\ndefinitional formula in all remaining cases.\n \u003c/p\u003e\n\n@param rhs the other complex number\n@return the complex number product\n@throws NullArgumentException if \u003ccode\u003erhs\u003c/code\u003e is null\n",
          "diff": "@@ -1,9 +1,10 @@\n-public Complex multiply(Complex rhs) {\n+public Complex multiply(Complex rhs) throws NullArgumentException {\n+    MathUtils.checkNotNull(rhs);\n     if (isNaN() || rhs.isNaN()) {\n         return NaN;\n     }\n     if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(rhs.real) || Double.isInfinite(rhs.imaginary)) {\n         return INF;\n     }\n     return createComplex(real * rhs.real - imaginary * rhs.imaginary, real * rhs.imaginary + imaginary * rhs.real);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Replaced NullPointerException by NullArgumentException\n\nJIRA: MATH-403\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1132432 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "6/5/11, 7:59 AM",
          "commitName": "e9c6d1de301072c16a48587db682542f967b3a9b",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "6/3/11, 1:49 PM",
          "commitNameOld": "98e22d778b3a886be253638b9a6b7ec075c3d62d",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 1.76,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public Complex multiply(Complex rhs) throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    if (isNaN() || rhs.isNaN()) {\n        return NaN;\n    }\n    if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(rhs.real) || Double.isInfinite(rhs.imaginary)) {\n        return INF;\n    }\n    return createComplex(real * rhs.real - imaginary * rhs.imaginary, real * rhs.imaginary + imaginary * rhs.real);\n}",
          "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
          "functionStartLine": 362,
          "functionName": "multiply",
          "functionAnnotation": "",
          "functionDoc": "Return the product of this complex number and the given complex number.\n\u003cp\u003e\nImplements preliminary checks for NaN and infinity followed by\nthe definitional formula:\n\u003cpre\u003e\u003ccode\u003e\n(a + bi)(c + di) \u003d (ac - bd) + (ad + bc)i\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/p\u003e\n\u003cp\u003e\nReturns {@link #NaN} if either this or \u003ccode\u003erhs\u003c/code\u003e has one or more\nNaN parts.\n\u003c/p\u003e\nReturns {@link #INF} if neither this nor \u003ccode\u003erhs\u003c/code\u003e has one or more\nNaN parts and if either this or \u003ccode\u003erhs\u003c/code\u003e has one or more\ninfinite parts (same result is returned regardless of the sign of the\ncomponents).\n\u003c/p\u003e\n\u003cp\u003e\nReturns finite values in components of the result per the\ndefinitional formula in all remaining cases.\n \u003c/p\u003e\n\n@param rhs the other complex number\n@return the complex number product\n@throws NullArgumentException if \u003ccode\u003erhs\u003c/code\u003e is null\n",
          "diff": "@@ -1,9 +1,10 @@\n-public Complex multiply(Complex rhs) {\n+public Complex multiply(Complex rhs) throws NullArgumentException {\n+    MathUtils.checkNotNull(rhs);\n     if (isNaN() || rhs.isNaN()) {\n         return NaN;\n     }\n     if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(rhs.real) || Double.isInfinite(rhs.imaginary)) {\n         return INF;\n     }\n     return createComplex(real * rhs.real - imaginary * rhs.imaginary, real * rhs.imaginary + imaginary * rhs.real);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Return the product of this complex number and the given complex number.\n\u003cp\u003e\nImplements preliminary checks for NaN and infinity followed by\nthe definitional formula:\n\u003cpre\u003e\u003ccode\u003e\n(a + bi)(c + di) \u003d (ac - bd) + (ad + bc)i\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/p\u003e\n\u003cp\u003e\nReturns {@link #NaN} if either this or \u003ccode\u003erhs\u003c/code\u003e has one or more\nNaN parts.\n\u003c/p\u003e\nReturns {@link #INF} if neither this nor \u003ccode\u003erhs\u003c/code\u003e has one or more\nNaN parts and if either this or \u003ccode\u003erhs\u003c/code\u003e has one or more\ninfinite parts (same result is returned regardless of the sign of the\ncomponents).\n\u003c/p\u003e\n\u003cp\u003e\nReturns finite values in components of the result per the\ndefinitional formula in all remaining cases.\n \u003c/p\u003e\n\n@param rhs the other complex number\n@return the complex number product\n@throws NullPointerException if \u003ccode\u003erhs\u003c/code\u003e is null\n",
            "newValue": "Return the product of this complex number and the given complex number.\n\u003cp\u003e\nImplements preliminary checks for NaN and infinity followed by\nthe definitional formula:\n\u003cpre\u003e\u003ccode\u003e\n(a + bi)(c + di) \u003d (ac - bd) + (ad + bc)i\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/p\u003e\n\u003cp\u003e\nReturns {@link #NaN} if either this or \u003ccode\u003erhs\u003c/code\u003e has one or more\nNaN parts.\n\u003c/p\u003e\nReturns {@link #INF} if neither this nor \u003ccode\u003erhs\u003c/code\u003e has one or more\nNaN parts and if either this or \u003ccode\u003erhs\u003c/code\u003e has one or more\ninfinite parts (same result is returned regardless of the sign of the\ncomponents).\n\u003c/p\u003e\n\u003cp\u003e\nReturns finite values in components of the result per the\ndefinitional formula in all remaining cases.\n \u003c/p\u003e\n\n@param rhs the other complex number\n@return the complex number product\n@throws NullArgumentException if \u003ccode\u003erhs\u003c/code\u003e is null\n"
          }
        }
      ]
    },
    "d6a438e931412713e99624cf9ed74470f1040184": {
      "type": "Yfilerename",
      "commitMessage": "moved main java directory for compliance with maven standard directory layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@799870 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/1/09, 7:30 AM",
      "commitName": "d6a438e931412713e99624cf9ed74470f1040184",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "8/1/09, 7:23 AM",
      "commitNameOld": "2ad5ef61630be627f46ae1c266cf796f044bd4a8",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public Complex multiply(Complex rhs) {\n    if (isNaN() || rhs.isNaN()) {\n        return NaN;\n    }\n    if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(rhs.real) || Double.isInfinite(rhs.imaginary)) {\n        return INF;\n    }\n    return createComplex(real * rhs.real - imaginary * rhs.imaginary, real * rhs.imaginary + imaginary * rhs.real);\n}",
      "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
      "functionStartLine": 376,
      "functionName": "multiply",
      "functionAnnotation": "",
      "functionDoc": "Return the product of this complex number and the given complex number.\n\u003cp\u003e\nImplements preliminary checks for NaN and infinity followed by\nthe definitional formula:\n\u003cpre\u003e\u003ccode\u003e\n(a + bi)(c + di) \u003d (ac - bd) + (ad + bc)i\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/p\u003e\n\u003cp\u003e\nReturns {@link #NaN} if either this or \u003ccode\u003erhs\u003c/code\u003e has one or more\nNaN parts.\n\u003c/p\u003e\nReturns {@link #INF} if neither this nor \u003ccode\u003erhs\u003c/code\u003e has one or more\nNaN parts and if either this or \u003ccode\u003erhs\u003c/code\u003e has one or more\ninfinite parts (same result is returned regardless of the sign of the\ncomponents).\n\u003c/p\u003e\n\u003cp\u003e\nReturns finite values in components of the result per the\ndefinitional formula in all remaining cases.\n \u003c/p\u003e\n\n@param rhs the other complex number\n@return the complex number product\n@throws NullPointerException if \u003ccode\u003erhs\u003c/code\u003e is null\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/math/complex/Complex.java",
        "newPath": "src/main/java/org/apache/commons/math/complex/Complex.java"
      }
    },
    "6375e636998ba899dd6354a5aaf60b357dbe66d6": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "MATH-164 add a special handling for multiplication of complex\nnumbers with infinite parts\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@610288 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/8/08, 11:30 PM",
      "commitName": "6375e636998ba899dd6354a5aaf60b357dbe66d6",
      "commitAuthor": "Luc Maisonobe",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "MATH-164 add a special handling for multiplication of complex\nnumbers with infinite parts\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@610288 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "1/8/08, 11:30 PM",
          "commitName": "6375e636998ba899dd6354a5aaf60b357dbe66d6",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "11/18/07, 3:38 PM",
          "commitNameOld": "912d9beb43edb26caf87a32f08664ea634136c73",
          "commitAuthorOld": "Phil Steitz",
          "daysBetweenCommits": 51.33,
          "commitsBetweenForRepo": 24,
          "commitsBetweenForFile": 1,
          "actualSource": "public Complex multiply(Complex rhs) {\n    if (isNaN() || rhs.isNaN()) {\n        return NaN;\n    }\n    if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(rhs.real) || Double.isInfinite(rhs.imaginary)) {\n        return INF;\n    }\n    return createComplex(real * rhs.real - imaginary * rhs.imaginary, real * rhs.imaginary + imaginary * rhs.real);\n}",
          "path": "src/java/org/apache/commons/math/complex/Complex.java",
          "functionStartLine": 354,
          "functionName": "multiply",
          "functionAnnotation": "",
          "functionDoc": "Return the product of this complex number and the given complex number.\n\u003cp\u003e\nImplements preliminary checks for NaN and infinity followed by\nthe definitional formula:\n\u003cpre\u003e\u003ccode\u003e\n(a + bi)(c + di) \u003d (ac - bd) + (ad + bc)i\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/p\u003e\n\u003cp\u003e\nReturns {@link #NaN} if either this or \u003ccode\u003erhs\u003c/code\u003e has one or more\nNaN parts.\n\u003c/p\u003e\nReturns {@link #INF} if neither this nor \u003ccode\u003erhs\u003c/code\u003e has one or more\nNaN parts and if either this or \u003ccode\u003erhs\u003c/code\u003e has one or more\ninfinite parts (same result is returned regardless of the sign of the\ncomponents).\n\u003c/p\u003e\n\u003cp\u003e\nReturns finite values in components of the result per the\ndefinitional formula in all remaining cases.\n \u003c/p\u003e\n\n@param rhs the other complex number\n@return the complex number product\n@throws NullPointerException if \u003ccode\u003erhs\u003c/code\u003e is null\n",
          "diff": "@@ -1,6 +1,9 @@\n public Complex multiply(Complex rhs) {\n     if (isNaN() || rhs.isNaN()) {\n         return NaN;\n     }\n+    if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(rhs.real) || Double.isInfinite(rhs.imaginary)) {\n+        return INF;\n+    }\n     return createComplex(real * rhs.real - imaginary * rhs.imaginary, real * rhs.imaginary + imaginary * rhs.real);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "MATH-164 add a special handling for multiplication of complex\nnumbers with infinite parts\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@610288 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "1/8/08, 11:30 PM",
          "commitName": "6375e636998ba899dd6354a5aaf60b357dbe66d6",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "11/18/07, 3:38 PM",
          "commitNameOld": "912d9beb43edb26caf87a32f08664ea634136c73",
          "commitAuthorOld": "Phil Steitz",
          "daysBetweenCommits": 51.33,
          "commitsBetweenForRepo": 24,
          "commitsBetweenForFile": 1,
          "actualSource": "public Complex multiply(Complex rhs) {\n    if (isNaN() || rhs.isNaN()) {\n        return NaN;\n    }\n    if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(rhs.real) || Double.isInfinite(rhs.imaginary)) {\n        return INF;\n    }\n    return createComplex(real * rhs.real - imaginary * rhs.imaginary, real * rhs.imaginary + imaginary * rhs.real);\n}",
          "path": "src/java/org/apache/commons/math/complex/Complex.java",
          "functionStartLine": 354,
          "functionName": "multiply",
          "functionAnnotation": "",
          "functionDoc": "Return the product of this complex number and the given complex number.\n\u003cp\u003e\nImplements preliminary checks for NaN and infinity followed by\nthe definitional formula:\n\u003cpre\u003e\u003ccode\u003e\n(a + bi)(c + di) \u003d (ac - bd) + (ad + bc)i\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/p\u003e\n\u003cp\u003e\nReturns {@link #NaN} if either this or \u003ccode\u003erhs\u003c/code\u003e has one or more\nNaN parts.\n\u003c/p\u003e\nReturns {@link #INF} if neither this nor \u003ccode\u003erhs\u003c/code\u003e has one or more\nNaN parts and if either this or \u003ccode\u003erhs\u003c/code\u003e has one or more\ninfinite parts (same result is returned regardless of the sign of the\ncomponents).\n\u003c/p\u003e\n\u003cp\u003e\nReturns finite values in components of the result per the\ndefinitional formula in all remaining cases.\n \u003c/p\u003e\n\n@param rhs the other complex number\n@return the complex number product\n@throws NullPointerException if \u003ccode\u003erhs\u003c/code\u003e is null\n",
          "diff": "@@ -1,6 +1,9 @@\n public Complex multiply(Complex rhs) {\n     if (isNaN() || rhs.isNaN()) {\n         return NaN;\n     }\n+    if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(rhs.real) || Double.isInfinite(rhs.imaginary)) {\n+        return INF;\n+    }\n     return createComplex(real * rhs.real - imaginary * rhs.imaginary, real * rhs.imaginary + imaginary * rhs.real);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Return the product of this complex number and the given complex number.\n\u003cp\u003e\nImplements the definitional formula:\n\u003cpre\u003e\u003ccode\u003e\n(a + bi)(c + di) \u003d (ac - bd) + (ad + bc)i\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\nReturns {@link #NaN} if either this or \u003ccode\u003erhs\u003c/code\u003e has one or more\nNaN parts.\n\u003cp\u003e\nReturns NaN or infinite values in components of the result per the\ndefinitional formula and and the rules for {@link java.lang.Double}\narithmetic.  Examples:\n\u003cpre\u003e\u003ccode\u003e\n (1 + i) (INF + i)  \u003d  INF + INFi\n (1 + INFi) (1 - INFi) \u003d INF + NaNi\n (-INF + -INFi)(1 + NaNi) \u003d NaN + NaNi\n \u003c/code\u003e\u003c/pre\u003e\n\n@param rhs the other complex number\n@return the complex number product\n@throws NullPointerException if \u003ccode\u003erhs\u003c/code\u003e is null\n",
            "newValue": "Return the product of this complex number and the given complex number.\n\u003cp\u003e\nImplements preliminary checks for NaN and infinity followed by\nthe definitional formula:\n\u003cpre\u003e\u003ccode\u003e\n(a + bi)(c + di) \u003d (ac - bd) + (ad + bc)i\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/p\u003e\n\u003cp\u003e\nReturns {@link #NaN} if either this or \u003ccode\u003erhs\u003c/code\u003e has one or more\nNaN parts.\n\u003c/p\u003e\nReturns {@link #INF} if neither this nor \u003ccode\u003erhs\u003c/code\u003e has one or more\nNaN parts and if either this or \u003ccode\u003erhs\u003c/code\u003e has one or more\ninfinite parts (same result is returned regardless of the sign of the\ncomponents).\n\u003c/p\u003e\n\u003cp\u003e\nReturns finite values in components of the result per the\ndefinitional formula in all remaining cases.\n \u003c/p\u003e\n\n@param rhs the other complex number\n@return the complex number product\n@throws NullPointerException if \u003ccode\u003erhs\u003c/code\u003e is null\n"
          }
        }
      ]
    },
    "912d9beb43edb26caf87a32f08664ea634136c73": {
      "type": "Ybodychange",
      "commitMessage": "Merged most functions from ComplexUtils into Complex class, added\nstatic factory method to Complex.\nJIRA: MATH-171\nReported and patched by Niall Pemberton\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@596159 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/18/07, 3:38 PM",
      "commitName": "912d9beb43edb26caf87a32f08664ea634136c73",
      "commitAuthor": "Phil Steitz",
      "commitDateOld": "11/28/06, 11:14 PM",
      "commitNameOld": "05f7f6059bd0cbb69b5dd49c061f1f3520e0ee1e",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 354.68,
      "commitsBetweenForRepo": 180,
      "commitsBetweenForFile": 1,
      "actualSource": "public Complex multiply(Complex rhs) {\n    if (isNaN() || rhs.isNaN()) {\n        return NaN;\n    }\n    return createComplex(real * rhs.real - imaginary * rhs.imaginary, real * rhs.imaginary + imaginary * rhs.real);\n}",
      "path": "src/java/org/apache/commons/math/complex/Complex.java",
      "functionStartLine": 348,
      "functionName": "multiply",
      "functionAnnotation": "",
      "functionDoc": "Return the product of this complex number and the given complex number.\n\u003cp\u003e\nImplements the definitional formula:\n\u003cpre\u003e\u003ccode\u003e\n(a + bi)(c + di) \u003d (ac - bd) + (ad + bc)i\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\nReturns {@link #NaN} if either this or \u003ccode\u003erhs\u003c/code\u003e has one or more\nNaN parts.\n\u003cp\u003e\nReturns NaN or infinite values in components of the result per the\ndefinitional formula and and the rules for {@link java.lang.Double}\narithmetic.  Examples:\n\u003cpre\u003e\u003ccode\u003e\n (1 + i) (INF + i)  \u003d  INF + INFi\n (1 + INFi) (1 - INFi) \u003d INF + NaNi\n (-INF + -INFi)(1 + NaNi) \u003d NaN + NaNi\n \u003c/code\u003e\u003c/pre\u003e\n\n@param rhs the other complex number\n@return the complex number product\n@throws NullPointerException if \u003ccode\u003erhs\u003c/code\u003e is null\n",
      "diff": "@@ -1,6 +1,6 @@\n public Complex multiply(Complex rhs) {\n     if (isNaN() || rhs.isNaN()) {\n         return NaN;\n     }\n-    return new Complex(real * rhs.real - imaginary * rhs.imaginary, real * rhs.imaginary + imaginary * rhs.real);\n+    return createComplex(real * rhs.real - imaginary * rhs.imaginary, real * rhs.imaginary + imaginary * rhs.real);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6ef3b2932f4ca9219e41784bb0cd229dcabcdb11": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Merged (final) src changes from MATH_1_1 release branch r321516-358399\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@358631 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/22/05, 1:16 PM",
      "commitName": "6ef3b2932f4ca9219e41784bb0cd229dcabcdb11",
      "commitAuthor": "Phil Steitz",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Merged (final) src changes from MATH_1_1 release branch r321516-358399\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@358631 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/22/05, 1:16 PM",
          "commitName": "6ef3b2932f4ca9219e41784bb0cd229dcabcdb11",
          "commitAuthor": "Phil Steitz",
          "commitDateOld": "10/15/05, 8:29 PM",
          "commitNameOld": "545e47a273803b1d080b186c8cf139492f82c4fb",
          "commitAuthorOld": "Phil Steitz",
          "daysBetweenCommits": 67.74,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "actualSource": "public Complex multiply(Complex rhs) {\n    if (isNaN() || rhs.isNaN()) {\n        return NaN;\n    }\n    return new Complex(real * rhs.real - imaginary * rhs.imaginary, real * rhs.imaginary + imaginary * rhs.real);\n}",
          "path": "src/java/org/apache/commons/math/complex/Complex.java",
          "functionStartLine": 347,
          "functionName": "multiply",
          "functionAnnotation": "",
          "functionDoc": "Return the product of this complex number and the given complex number.\n\u003cp\u003e\nImplements the definitional formula:\n\u003cpre\u003e\u003ccode\u003e\n(a + bi)(c + di) \u003d (ac - bd) + (ad + bc)i\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\nReturns {@link #NaN} if either this or \u003ccode\u003erhs\u003c/code\u003e has one or more\nNaN parts.\n\u003cp\u003e\nReturns NaN or infinite values in components of the result per the\ndefinitional formula and and the rules for {@link java.lang.Double}\narithmetic.  Examples:\n\u003cpre\u003e\u003ccode\u003e\n (1 + i) (INF + i)  \u003d  INF + INFi\n (1 + INFi) (1 - INFi) \u003d INF + NaNi\n (-INF + -INFi)(1 + NaNi) \u003d NaN + NaNi\n \u003c/code\u003e\u003c/pre\u003e\n\n@param rhs the other complex number\n@return the complex number product\n@throws NullPointerException if \u003ccode\u003erhs\u003c/code\u003e is null\n",
          "diff": "@@ -1,9 +1,6 @@\n public Complex multiply(Complex rhs) {\n     if (isNaN() || rhs.isNaN()) {\n         return NaN;\n     }\n-    double p \u003d (real + imaginary) * (rhs.getReal() + rhs.getImaginary());\n-    double ac \u003d real * rhs.getReal();\n-    double bd \u003d imaginary * rhs.getImaginary();\n-    return new Complex(ac - bd, p - ac - bd);\n+    return new Complex(real * rhs.real - imaginary * rhs.imaginary, real * rhs.imaginary + imaginary * rhs.real);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Merged (final) src changes from MATH_1_1 release branch r321516-358399\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@358631 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/22/05, 1:16 PM",
          "commitName": "6ef3b2932f4ca9219e41784bb0cd229dcabcdb11",
          "commitAuthor": "Phil Steitz",
          "commitDateOld": "10/15/05, 8:29 PM",
          "commitNameOld": "545e47a273803b1d080b186c8cf139492f82c4fb",
          "commitAuthorOld": "Phil Steitz",
          "daysBetweenCommits": 67.74,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "actualSource": "public Complex multiply(Complex rhs) {\n    if (isNaN() || rhs.isNaN()) {\n        return NaN;\n    }\n    return new Complex(real * rhs.real - imaginary * rhs.imaginary, real * rhs.imaginary + imaginary * rhs.real);\n}",
          "path": "src/java/org/apache/commons/math/complex/Complex.java",
          "functionStartLine": 347,
          "functionName": "multiply",
          "functionAnnotation": "",
          "functionDoc": "Return the product of this complex number and the given complex number.\n\u003cp\u003e\nImplements the definitional formula:\n\u003cpre\u003e\u003ccode\u003e\n(a + bi)(c + di) \u003d (ac - bd) + (ad + bc)i\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\nReturns {@link #NaN} if either this or \u003ccode\u003erhs\u003c/code\u003e has one or more\nNaN parts.\n\u003cp\u003e\nReturns NaN or infinite values in components of the result per the\ndefinitional formula and and the rules for {@link java.lang.Double}\narithmetic.  Examples:\n\u003cpre\u003e\u003ccode\u003e\n (1 + i) (INF + i)  \u003d  INF + INFi\n (1 + INFi) (1 - INFi) \u003d INF + NaNi\n (-INF + -INFi)(1 + NaNi) \u003d NaN + NaNi\n \u003c/code\u003e\u003c/pre\u003e\n\n@param rhs the other complex number\n@return the complex number product\n@throws NullPointerException if \u003ccode\u003erhs\u003c/code\u003e is null\n",
          "diff": "@@ -1,9 +1,6 @@\n public Complex multiply(Complex rhs) {\n     if (isNaN() || rhs.isNaN()) {\n         return NaN;\n     }\n-    double p \u003d (real + imaginary) * (rhs.getReal() + rhs.getImaginary());\n-    double ac \u003d real * rhs.getReal();\n-    double bd \u003d imaginary * rhs.getImaginary();\n-    return new Complex(ac - bd, p - ac - bd);\n+    return new Complex(real * rhs.real - imaginary * rhs.imaginary, real * rhs.imaginary + imaginary * rhs.real);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Return the product of this complex number and the given complex number.\n\n@param rhs the other complex number.\n@return the complex number product.\n",
            "newValue": "Return the product of this complex number and the given complex number.\n\u003cp\u003e\nImplements the definitional formula:\n\u003cpre\u003e\u003ccode\u003e\n(a + bi)(c + di) \u003d (ac - bd) + (ad + bc)i\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\nReturns {@link #NaN} if either this or \u003ccode\u003erhs\u003c/code\u003e has one or more\nNaN parts.\n\u003cp\u003e\nReturns NaN or infinite values in components of the result per the\ndefinitional formula and and the rules for {@link java.lang.Double}\narithmetic.  Examples:\n\u003cpre\u003e\u003ccode\u003e\n (1 + i) (INF + i)  \u003d  INF + INFi\n (1 + INFi) (1 - INFi) \u003d INF + NaNi\n (-INF + -INFi)(1 + NaNi) \u003d NaN + NaNi\n \u003c/code\u003e\u003c/pre\u003e\n\n@param rhs the other complex number\n@return the complex number product\n@throws NullPointerException if \u003ccode\u003erhs\u003c/code\u003e is null\n"
          }
        }
      ]
    },
    "0a904461932f2c0455611e77ec6a8d8aced2980b": {
      "type": "Yintroduced",
      "commitMessage": "Attempting to recover last revision.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141013 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/14/03, 2:25 PM",
      "commitName": "0a904461932f2c0455611e77ec6a8d8aced2980b",
      "commitAuthor": "Mark R. Diggory",
      "diff": "@@ -0,0 +1,9 @@\n+public Complex multiply(Complex rhs) {\n+    if (isNaN() || rhs.isNaN()) {\n+        return NaN;\n+    }\n+    double p \u003d (real + imaginary) * (rhs.getReal() + rhs.getImaginary());\n+    double ac \u003d real * rhs.getReal();\n+    double bd \u003d imaginary * rhs.getImaginary();\n+    return new Complex(ac - bd, p - ac - bd);\n+}\n\\ No newline at end of file\n",
      "actualSource": "public Complex multiply(Complex rhs) {\n    if (isNaN() || rhs.isNaN()) {\n        return NaN;\n    }\n    double p \u003d (real + imaginary) * (rhs.getReal() + rhs.getImaginary());\n    double ac \u003d real * rhs.getReal();\n    double bd \u003d imaginary * rhs.getImaginary();\n    return new Complex(ac - bd, p - ac - bd);\n}",
      "path": "src/java/org/apache/commons/math/complex/Complex.java",
      "functionStartLine": 210,
      "functionName": "multiply",
      "functionAnnotation": "",
      "functionDoc": "Return the product of this complex number and the given complex number.\n\n@param rhs the other complex number.\n@return the complex number product.\n"
    }
  }
}