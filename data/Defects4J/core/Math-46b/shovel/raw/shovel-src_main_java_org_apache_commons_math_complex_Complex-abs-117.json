{
  "origin": "codeshovel",
  "repositoryName": "Math-46b",
  "repositoryPath": "/tmp/Math-46b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Complex.java",
  "functionName": "abs",
  "functionId": "abs",
  "sourceFilePath": "src/main/java/org/apache/commons/math/complex/Complex.java",
  "functionAnnotation": "",
  "functionDoc": "Return the absolute value of this complex number.\nReturns {@code NaN} if either real or imaginary part is {@code NaN}\nand {@code Double.POSITIVE_INFINITY} if neither part is {@code NaN},\nbut at least one part is infinite.\n\n@return the absolute value.\n",
  "functionStartLine": 117,
  "functionEndLine": 137,
  "numCommitsSeen": 58,
  "timeTaken": 2254,
  "changeHistory": [
    "b522106e845feae4200e37d0bd190fb6cdc5b756",
    "f34508958e47b663652c2ad420e6801f7150dac3",
    "80b1e90b42a34856b61cec628fcea6633d1000cd",
    "b631eb68a8aa659e0760de672edfbfb9f9ac246d",
    "26dac5a0e7fc9c6be9571b3e71a15d8502480d96",
    "d6a438e931412713e99624cf9ed74470f1040184",
    "932ebf87acd81162cc7b1751c18b0e0ca760c8bf",
    "6ef3b2932f4ca9219e41784bb0cd229dcabcdb11",
    "ad6929ea0c89c085422c1e43bb3f763a0e3d25e4",
    "0a904461932f2c0455611e77ec6a8d8aced2980b"
  ],
  "changeHistoryShort": {
    "b522106e845feae4200e37d0bd190fb6cdc5b756": "Ymultichange(Ydocchange,Yformatchange)",
    "f34508958e47b663652c2ad420e6801f7150dac3": "Ybodychange",
    "80b1e90b42a34856b61cec628fcea6633d1000cd": "Ybodychange",
    "b631eb68a8aa659e0760de672edfbfb9f9ac246d": "Ybodychange",
    "26dac5a0e7fc9c6be9571b3e71a15d8502480d96": "Yformatchange",
    "d6a438e931412713e99624cf9ed74470f1040184": "Yfilerename",
    "932ebf87acd81162cc7b1751c18b0e0ca760c8bf": "Ydocchange",
    "6ef3b2932f4ca9219e41784bb0cd229dcabcdb11": "Ymultichange(Ybodychange,Ydocchange)",
    "ad6929ea0c89c085422c1e43bb3f763a0e3d25e4": "Ybodychange",
    "0a904461932f2c0455611e77ec6a8d8aced2980b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b522106e845feae4200e37d0bd190fb6cdc5b756": {
      "type": "Ymultichange(Ydocchange,Yformatchange)",
      "commitMessage": "MATH-577\nVarious enhancements to the \"Complex\" class, namely operators (add,\nsubtract, ...) taking a \"double\" argument, improved consistency in\nthe use of \"NAN\" and \"INF\" fields, updated Javadoc. Mainly due to\nArne Plöse.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1150340 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/24/11, 4:21 AM",
      "commitName": "b522106e845feae4200e37d0bd190fb6cdc5b756",
      "commitAuthor": "Gilles Sadowski",
      "subchanges": [
        {
          "type": "Ydocchange",
          "commitMessage": "MATH-577\nVarious enhancements to the \"Complex\" class, namely operators (add,\nsubtract, ...) taking a \"double\" argument, improved consistency in\nthe use of \"NAN\" and \"INF\" fields, updated Javadoc. Mainly due to\nArne Plöse.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1150340 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/24/11, 4:21 AM",
          "commitName": "b522106e845feae4200e37d0bd190fb6cdc5b756",
          "commitAuthor": "Gilles Sadowski",
          "commitDateOld": "7/13/11, 11:08 PM",
          "commitNameOld": "7707b0bb80be05bbf6533a36bb0c646cbfd1026d",
          "commitAuthorOld": "Phil Steitz",
          "daysBetweenCommits": 10.22,
          "commitsBetweenForRepo": 22,
          "commitsBetweenForFile": 1,
          "actualSource": "public double abs() {\n    if (isNaN) {\n        return Double.NaN;\n    }\n    if (isInfinite()) {\n        return Double.POSITIVE_INFINITY;\n    }\n    if (FastMath.abs(real) \u003c FastMath.abs(imaginary)) {\n        if (imaginary \u003d\u003d 0.0) {\n            return FastMath.abs(real);\n        }\n        double q \u003d real / imaginary;\n        return FastMath.abs(imaginary) * FastMath.sqrt(1 + q * q);\n    } else {\n        if (real \u003d\u003d 0.0) {\n            return FastMath.abs(imaginary);\n        }\n        double q \u003d imaginary / real;\n        return FastMath.abs(real) * FastMath.sqrt(1 + q * q);\n    }\n}",
          "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
          "functionStartLine": 108,
          "functionName": "abs",
          "functionAnnotation": "",
          "functionDoc": "Return the absolute value of this complex number.\nReturns {@code NaN} if either real or imaginary part is {@code NaN}\nand {@code Double.POSITIVE_INFINITY} if neither part is {@code NaN},\nbut at least one part is infinite.\n\n@return the absolute value.\n",
          "diff": "",
          "extendedDetails": {
            "oldValue": "Return the absolute value of this complex number.\n\u003cp\u003e\nReturns \u003ccode\u003eNaN\u003c/code\u003e if either real or imaginary part is\n\u003ccode\u003eNaN\u003c/code\u003e and \u003ccode\u003eDouble.POSITIVE_INFINITY\u003c/code\u003e if\nneither part is \u003ccode\u003eNaN\u003c/code\u003e, but at least one part takes an infinite\nvalue.\u003c/p\u003e\n\n@return the absolute value\n",
            "newValue": "Return the absolute value of this complex number.\nReturns {@code NaN} if either real or imaginary part is {@code NaN}\nand {@code Double.POSITIVE_INFINITY} if neither part is {@code NaN},\nbut at least one part is infinite.\n\n@return the absolute value.\n"
          }
        },
        {
          "type": "Yformatchange",
          "commitMessage": "MATH-577\nVarious enhancements to the \"Complex\" class, namely operators (add,\nsubtract, ...) taking a \"double\" argument, improved consistency in\nthe use of \"NAN\" and \"INF\" fields, updated Javadoc. Mainly due to\nArne Plöse.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1150340 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/24/11, 4:21 AM",
          "commitName": "b522106e845feae4200e37d0bd190fb6cdc5b756",
          "commitAuthor": "Gilles Sadowski",
          "commitDateOld": "7/13/11, 11:08 PM",
          "commitNameOld": "7707b0bb80be05bbf6533a36bb0c646cbfd1026d",
          "commitAuthorOld": "Phil Steitz",
          "daysBetweenCommits": 10.22,
          "commitsBetweenForRepo": 22,
          "commitsBetweenForFile": 1,
          "actualSource": "public double abs() {\n    if (isNaN) {\n        return Double.NaN;\n    }\n    if (isInfinite()) {\n        return Double.POSITIVE_INFINITY;\n    }\n    if (FastMath.abs(real) \u003c FastMath.abs(imaginary)) {\n        if (imaginary \u003d\u003d 0.0) {\n            return FastMath.abs(real);\n        }\n        double q \u003d real / imaginary;\n        return FastMath.abs(imaginary) * FastMath.sqrt(1 + q * q);\n    } else {\n        if (real \u003d\u003d 0.0) {\n            return FastMath.abs(imaginary);\n        }\n        double q \u003d imaginary / real;\n        return FastMath.abs(real) * FastMath.sqrt(1 + q * q);\n    }\n}",
          "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
          "functionStartLine": 108,
          "functionName": "abs",
          "functionAnnotation": "",
          "functionDoc": "Return the absolute value of this complex number.\nReturns {@code NaN} if either real or imaginary part is {@code NaN}\nand {@code Double.POSITIVE_INFINITY} if neither part is {@code NaN},\nbut at least one part is infinite.\n\n@return the absolute value.\n",
          "diff": "",
          "extendedDetails": {}
        }
      ]
    },
    "f34508958e47b663652c2ad420e6801f7150dac3": {
      "type": "Ybodychange",
      "commitMessage": "MATH-577\nReplaced function calls by direct reference to the instance variable.\nRemoved redundant prefix for static fields.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1145945 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/13/11, 3:10 AM",
      "commitName": "f34508958e47b663652c2ad420e6801f7150dac3",
      "commitAuthor": "Gilles Sadowski",
      "commitDateOld": "7/13/11, 2:41 AM",
      "commitNameOld": "9ca71cd7ab80b3b6620867272acb35b15bc50921",
      "commitAuthorOld": "Gilles Sadowski",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public double abs() {\n    if (isNaN) {\n        return Double.NaN;\n    }\n    if (isInfinite()) {\n        return Double.POSITIVE_INFINITY;\n    }\n    if (FastMath.abs(real) \u003c FastMath.abs(imaginary)) {\n        if (imaginary \u003d\u003d 0.0) {\n            return FastMath.abs(real);\n        }\n        double q \u003d real / imaginary;\n        return FastMath.abs(imaginary) * FastMath.sqrt(1 + q * q);\n    } else {\n        if (real \u003d\u003d 0.0) {\n            return FastMath.abs(imaginary);\n        }\n        double q \u003d imaginary / real;\n        return FastMath.abs(real) * FastMath.sqrt(1 + q * q);\n    }\n}",
      "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
      "functionStartLine": 109,
      "functionName": "abs",
      "functionAnnotation": "",
      "functionDoc": "Return the absolute value of this complex number.\n\u003cp\u003e\nReturns \u003ccode\u003eNaN\u003c/code\u003e if either real or imaginary part is\n\u003ccode\u003eNaN\u003c/code\u003e and \u003ccode\u003eDouble.POSITIVE_INFINITY\u003c/code\u003e if\nneither part is \u003ccode\u003eNaN\u003c/code\u003e, but at least one part takes an infinite\nvalue.\u003c/p\u003e\n\n@return the absolute value\n",
      "diff": "@@ -1,21 +1,21 @@\n public double abs() {\n-    if (isNaN()) {\n+    if (isNaN) {\n         return Double.NaN;\n     }\n     if (isInfinite()) {\n         return Double.POSITIVE_INFINITY;\n     }\n     if (FastMath.abs(real) \u003c FastMath.abs(imaginary)) {\n         if (imaginary \u003d\u003d 0.0) {\n             return FastMath.abs(real);\n         }\n         double q \u003d real / imaginary;\n         return FastMath.abs(imaginary) * FastMath.sqrt(1 + q * q);\n     } else {\n         if (real \u003d\u003d 0.0) {\n             return FastMath.abs(imaginary);\n         }\n         double q \u003d imaginary / real;\n         return FastMath.abs(real) * FastMath.sqrt(1 + q * q);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "80b1e90b42a34856b61cec628fcea6633d1000cd": {
      "type": "Ybodychange",
      "commitMessage": "added FastMath and used it everywhere in replacement of java.util.Math\nthe unit tests have not been added yet (waiting for dfp library addition)\nJIRA: MATH-375\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@990658 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/29/10, 3:04 PM",
      "commitName": "80b1e90b42a34856b61cec628fcea6633d1000cd",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "8/10/10, 3:46 AM",
      "commitNameOld": "986597f52ce9c6c1ff13fb134b91696de6ec2796",
      "commitAuthorOld": "Gilles Sadowski",
      "daysBetweenCommits": 19.47,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "public double abs() {\n    if (isNaN()) {\n        return Double.NaN;\n    }\n    if (isInfinite()) {\n        return Double.POSITIVE_INFINITY;\n    }\n    if (FastMath.abs(real) \u003c FastMath.abs(imaginary)) {\n        if (imaginary \u003d\u003d 0.0) {\n            return FastMath.abs(real);\n        }\n        double q \u003d real / imaginary;\n        return FastMath.abs(imaginary) * FastMath.sqrt(1 + q * q);\n    } else {\n        if (real \u003d\u003d 0.0) {\n            return FastMath.abs(imaginary);\n        }\n        double q \u003d imaginary / real;\n        return FastMath.abs(real) * FastMath.sqrt(1 + q * q);\n    }\n}",
      "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
      "functionStartLine": 108,
      "functionName": "abs",
      "functionAnnotation": "",
      "functionDoc": "Return the absolute value of this complex number.\n\u003cp\u003e\nReturns \u003ccode\u003eNaN\u003c/code\u003e if either real or imaginary part is\n\u003ccode\u003eNaN\u003c/code\u003e and \u003ccode\u003eDouble.POSITIVE_INFINITY\u003c/code\u003e if\nneither part is \u003ccode\u003eNaN\u003c/code\u003e, but at least one part takes an infinite\nvalue.\u003c/p\u003e\n\n@return the absolute value\n",
      "diff": "@@ -1,21 +1,21 @@\n public double abs() {\n     if (isNaN()) {\n         return Double.NaN;\n     }\n     if (isInfinite()) {\n         return Double.POSITIVE_INFINITY;\n     }\n-    if (Math.abs(real) \u003c Math.abs(imaginary)) {\n+    if (FastMath.abs(real) \u003c FastMath.abs(imaginary)) {\n         if (imaginary \u003d\u003d 0.0) {\n-            return Math.abs(real);\n+            return FastMath.abs(real);\n         }\n         double q \u003d real / imaginary;\n-        return Math.abs(imaginary) * Math.sqrt(1 + q * q);\n+        return FastMath.abs(imaginary) * FastMath.sqrt(1 + q * q);\n     } else {\n         if (real \u003d\u003d 0.0) {\n-            return Math.abs(imaginary);\n+            return FastMath.abs(imaginary);\n         }\n         double q \u003d imaginary / real;\n-        return Math.abs(real) * Math.sqrt(1 + q * q);\n+        return FastMath.abs(real) * FastMath.sqrt(1 + q * q);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b631eb68a8aa659e0760de672edfbfb9f9ac246d": {
      "type": "Ybodychange",
      "commitMessage": "removed unnecessary parentheses\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@811833 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/6/09, 9:27 AM",
      "commitName": "b631eb68a8aa659e0760de672edfbfb9f9ac246d",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "9/6/09, 8:32 AM",
      "commitNameOld": "292e891aab4d737a83ebf786c02bf4003ae0442d",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public double abs() {\n    if (isNaN()) {\n        return Double.NaN;\n    }\n    if (isInfinite()) {\n        return Double.POSITIVE_INFINITY;\n    }\n    if (Math.abs(real) \u003c Math.abs(imaginary)) {\n        if (imaginary \u003d\u003d 0.0) {\n            return Math.abs(real);\n        }\n        double q \u003d real / imaginary;\n        return Math.abs(imaginary) * Math.sqrt(1 + q * q);\n    } else {\n        if (real \u003d\u003d 0.0) {\n            return Math.abs(imaginary);\n        }\n        double q \u003d imaginary / real;\n        return Math.abs(real) * Math.sqrt(1 + q * q);\n    }\n}",
      "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
      "functionStartLine": 106,
      "functionName": "abs",
      "functionAnnotation": "",
      "functionDoc": "Return the absolute value of this complex number.\n\u003cp\u003e\nReturns \u003ccode\u003eNaN\u003c/code\u003e if either real or imaginary part is\n\u003ccode\u003eNaN\u003c/code\u003e and \u003ccode\u003eDouble.POSITIVE_INFINITY\u003c/code\u003e if\nneither part is \u003ccode\u003eNaN\u003c/code\u003e, but at least one part takes an infinite\nvalue.\u003c/p\u003e\n\n@return the absolute value\n",
      "diff": "@@ -1,21 +1,21 @@\n public double abs() {\n     if (isNaN()) {\n         return Double.NaN;\n     }\n     if (isInfinite()) {\n         return Double.POSITIVE_INFINITY;\n     }\n     if (Math.abs(real) \u003c Math.abs(imaginary)) {\n         if (imaginary \u003d\u003d 0.0) {\n             return Math.abs(real);\n         }\n         double q \u003d real / imaginary;\n-        return (Math.abs(imaginary) * Math.sqrt(1 + q * q));\n+        return Math.abs(imaginary) * Math.sqrt(1 + q * q);\n     } else {\n         if (real \u003d\u003d 0.0) {\n             return Math.abs(imaginary);\n         }\n         double q \u003d imaginary / real;\n-        return (Math.abs(real) * Math.sqrt(1 + q * q));\n+        return Math.abs(real) * Math.sqrt(1 + q * q);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "26dac5a0e7fc9c6be9571b3e71a15d8502480d96": {
      "type": "Yformatchange",
      "commitMessage": "Removed trailing spaces.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@811685 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/5/09, 10:36 AM",
      "commitName": "26dac5a0e7fc9c6be9571b3e71a15d8502480d96",
      "commitAuthor": "Phil Steitz",
      "commitDateOld": "9/1/09, 2:02 PM",
      "commitNameOld": "d6beaeaa9c53aa4e6ae128a856e68a9eeb1cadb8",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 3.86,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "public double abs() {\n    if (isNaN()) {\n        return Double.NaN;\n    }\n    if (isInfinite()) {\n        return Double.POSITIVE_INFINITY;\n    }\n    if (Math.abs(real) \u003c Math.abs(imaginary)) {\n        if (imaginary \u003d\u003d 0.0) {\n            return Math.abs(real);\n        }\n        double q \u003d real / imaginary;\n        return (Math.abs(imaginary) * Math.sqrt(1 + q * q));\n    } else {\n        if (real \u003d\u003d 0.0) {\n            return Math.abs(imaginary);\n        }\n        double q \u003d imaginary / real;\n        return (Math.abs(real) * Math.sqrt(1 + q * q));\n    }\n}",
      "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
      "functionStartLine": 114,
      "functionName": "abs",
      "functionAnnotation": "",
      "functionDoc": "Return the absolute value of this complex number.\n\u003cp\u003e\nReturns \u003ccode\u003eNaN\u003c/code\u003e if either real or imaginary part is\n\u003ccode\u003eNaN\u003c/code\u003e and \u003ccode\u003eDouble.POSITIVE_INFINITY\u003c/code\u003e if\nneither part is \u003ccode\u003eNaN\u003c/code\u003e, but at least one part takes an infinite\nvalue.\u003c/p\u003e\n\n@return the absolute value\n",
      "diff": "",
      "extendedDetails": {}
    },
    "d6a438e931412713e99624cf9ed74470f1040184": {
      "type": "Yfilerename",
      "commitMessage": "moved main java directory for compliance with maven standard directory layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@799870 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/1/09, 7:30 AM",
      "commitName": "d6a438e931412713e99624cf9ed74470f1040184",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "8/1/09, 7:23 AM",
      "commitNameOld": "2ad5ef61630be627f46ae1c266cf796f044bd4a8",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public double abs() {\n    if (isNaN()) {\n        return Double.NaN;\n    }\n    if (isInfinite()) {\n        return Double.POSITIVE_INFINITY;\n    }\n    if (Math.abs(real) \u003c Math.abs(imaginary)) {\n        if (imaginary \u003d\u003d 0.0) {\n            return Math.abs(real);\n        }\n        double q \u003d real / imaginary;\n        return (Math.abs(imaginary) * Math.sqrt(1 + q * q));\n    } else {\n        if (real \u003d\u003d 0.0) {\n            return Math.abs(imaginary);\n        }\n        double q \u003d imaginary / real;\n        return (Math.abs(real) * Math.sqrt(1 + q * q));\n    }\n}",
      "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
      "functionStartLine": 112,
      "functionName": "abs",
      "functionAnnotation": "",
      "functionDoc": "Return the absolute value of this complex number.\n\u003cp\u003e\nReturns \u003ccode\u003eNaN\u003c/code\u003e if either real or imaginary part is\n\u003ccode\u003eNaN\u003c/code\u003e and \u003ccode\u003eDouble.POSITIVE_INFINITY\u003c/code\u003e if\nneither part is \u003ccode\u003eNaN\u003c/code\u003e, but at least one part takes an infinite\nvalue.\u003c/p\u003e\n\n@return the absolute value\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/math/complex/Complex.java",
        "newPath": "src/main/java/org/apache/commons/math/complex/Complex.java"
      }
    },
    "932ebf87acd81162cc7b1751c18b0e0ca760c8bf": {
      "type": "Ydocchange",
      "commitMessage": "Javadoc only. Added missing \u003c/p\u003e\u0027s\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@615734 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/27/08, 10:10 PM",
      "commitName": "932ebf87acd81162cc7b1751c18b0e0ca760c8bf",
      "commitAuthor": "Phil Steitz",
      "commitDateOld": "1/8/08, 11:30 PM",
      "commitNameOld": "6375e636998ba899dd6354a5aaf60b357dbe66d6",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 18.94,
      "commitsBetweenForRepo": 54,
      "commitsBetweenForFile": 1,
      "actualSource": "public double abs() {\n    if (isNaN()) {\n        return Double.NaN;\n    }\n    if (isInfinite()) {\n        return Double.POSITIVE_INFINITY;\n    }\n    if (Math.abs(real) \u003c Math.abs(imaginary)) {\n        if (imaginary \u003d\u003d 0.0) {\n            return Math.abs(real);\n        }\n        double q \u003d real / imaginary;\n        return (Math.abs(imaginary) * Math.sqrt(1 + q * q));\n    } else {\n        if (real \u003d\u003d 0.0) {\n            return Math.abs(imaginary);\n        }\n        double q \u003d imaginary / real;\n        return (Math.abs(real) * Math.sqrt(1 + q * q));\n    }\n}",
      "path": "src/java/org/apache/commons/math/complex/Complex.java",
      "functionStartLine": 88,
      "functionName": "abs",
      "functionAnnotation": "",
      "functionDoc": "Return the absolute value of this complex number.\n\u003cp\u003e\nReturns \u003ccode\u003eNaN\u003c/code\u003e if either real or imaginary part is\n\u003ccode\u003eNaN\u003c/code\u003e and \u003ccode\u003eDouble.POSITIVE_INFINITY\u003c/code\u003e if\nneither part is \u003ccode\u003eNaN\u003c/code\u003e, but at least one part takes an infinite\nvalue.\u003c/p\u003e\n\n@return the absolute value\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Return the absolute value of this complex number.\n\u003cp\u003e\nReturns \u003ccode\u003eNaN\u003c/code\u003e if either real or imaginary part is\n\u003ccode\u003eNaN\u003c/code\u003e and \u003ccode\u003eDouble.POSITIVE_INFINITY\u003c/code\u003e if\nneither part is \u003ccode\u003eNaN\u003c/code\u003e, but at least one part takes an infinite\nvalue.\n\n@return the absolute value\n",
        "newValue": "Return the absolute value of this complex number.\n\u003cp\u003e\nReturns \u003ccode\u003eNaN\u003c/code\u003e if either real or imaginary part is\n\u003ccode\u003eNaN\u003c/code\u003e and \u003ccode\u003eDouble.POSITIVE_INFINITY\u003c/code\u003e if\nneither part is \u003ccode\u003eNaN\u003c/code\u003e, but at least one part takes an infinite\nvalue.\u003c/p\u003e\n\n@return the absolute value\n"
      }
    },
    "6ef3b2932f4ca9219e41784bb0cd229dcabcdb11": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Merged (final) src changes from MATH_1_1 release branch r321516-358399\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@358631 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/22/05, 1:16 PM",
      "commitName": "6ef3b2932f4ca9219e41784bb0cd229dcabcdb11",
      "commitAuthor": "Phil Steitz",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Merged (final) src changes from MATH_1_1 release branch r321516-358399\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@358631 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/22/05, 1:16 PM",
          "commitName": "6ef3b2932f4ca9219e41784bb0cd229dcabcdb11",
          "commitAuthor": "Phil Steitz",
          "commitDateOld": "10/15/05, 8:29 PM",
          "commitNameOld": "545e47a273803b1d080b186c8cf139492f82c4fb",
          "commitAuthorOld": "Phil Steitz",
          "daysBetweenCommits": 67.74,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "actualSource": "public double abs() {\n    if (isNaN()) {\n        return Double.NaN;\n    }\n    if (isInfinite()) {\n        return Double.POSITIVE_INFINITY;\n    }\n    if (Math.abs(real) \u003c Math.abs(imaginary)) {\n        if (imaginary \u003d\u003d 0.0) {\n            return Math.abs(real);\n        }\n        double q \u003d real / imaginary;\n        return (Math.abs(imaginary) * Math.sqrt(1 + q * q));\n    } else {\n        if (real \u003d\u003d 0.0) {\n            return Math.abs(imaginary);\n        }\n        double q \u003d imaginary / real;\n        return (Math.abs(real) * Math.sqrt(1 + q * q));\n    }\n}",
          "path": "src/java/org/apache/commons/math/complex/Complex.java",
          "functionStartLine": 84,
          "functionName": "abs",
          "functionAnnotation": "",
          "functionDoc": "Return the absolute value of this complex number.\n\u003cp\u003e\nReturns \u003ccode\u003eNaN\u003c/code\u003e if either real or imaginary part is\n\u003ccode\u003eNaN\u003c/code\u003e and \u003ccode\u003eDouble.POSITIVE_INFINITY\u003c/code\u003e if\nneither part is \u003ccode\u003eNaN\u003c/code\u003e, but at least one part takes an infinite\nvalue.\n\n@return the absolute value\n",
          "diff": "@@ -1,18 +1,21 @@\n public double abs() {\n     if (isNaN()) {\n         return Double.NaN;\n     }\n+    if (isInfinite()) {\n+        return Double.POSITIVE_INFINITY;\n+    }\n     if (Math.abs(real) \u003c Math.abs(imaginary)) {\n         if (imaginary \u003d\u003d 0.0) {\n             return Math.abs(real);\n         }\n         double q \u003d real / imaginary;\n         return (Math.abs(imaginary) * Math.sqrt(1 + q * q));\n     } else {\n         if (real \u003d\u003d 0.0) {\n             return Math.abs(imaginary);\n         }\n         double q \u003d imaginary / real;\n         return (Math.abs(real) * Math.sqrt(1 + q * q));\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Merged (final) src changes from MATH_1_1 release branch r321516-358399\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@358631 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/22/05, 1:16 PM",
          "commitName": "6ef3b2932f4ca9219e41784bb0cd229dcabcdb11",
          "commitAuthor": "Phil Steitz",
          "commitDateOld": "10/15/05, 8:29 PM",
          "commitNameOld": "545e47a273803b1d080b186c8cf139492f82c4fb",
          "commitAuthorOld": "Phil Steitz",
          "daysBetweenCommits": 67.74,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "actualSource": "public double abs() {\n    if (isNaN()) {\n        return Double.NaN;\n    }\n    if (isInfinite()) {\n        return Double.POSITIVE_INFINITY;\n    }\n    if (Math.abs(real) \u003c Math.abs(imaginary)) {\n        if (imaginary \u003d\u003d 0.0) {\n            return Math.abs(real);\n        }\n        double q \u003d real / imaginary;\n        return (Math.abs(imaginary) * Math.sqrt(1 + q * q));\n    } else {\n        if (real \u003d\u003d 0.0) {\n            return Math.abs(imaginary);\n        }\n        double q \u003d imaginary / real;\n        return (Math.abs(real) * Math.sqrt(1 + q * q));\n    }\n}",
          "path": "src/java/org/apache/commons/math/complex/Complex.java",
          "functionStartLine": 84,
          "functionName": "abs",
          "functionAnnotation": "",
          "functionDoc": "Return the absolute value of this complex number.\n\u003cp\u003e\nReturns \u003ccode\u003eNaN\u003c/code\u003e if either real or imaginary part is\n\u003ccode\u003eNaN\u003c/code\u003e and \u003ccode\u003eDouble.POSITIVE_INFINITY\u003c/code\u003e if\nneither part is \u003ccode\u003eNaN\u003c/code\u003e, but at least one part takes an infinite\nvalue.\n\n@return the absolute value\n",
          "diff": "@@ -1,18 +1,21 @@\n public double abs() {\n     if (isNaN()) {\n         return Double.NaN;\n     }\n+    if (isInfinite()) {\n+        return Double.POSITIVE_INFINITY;\n+    }\n     if (Math.abs(real) \u003c Math.abs(imaginary)) {\n         if (imaginary \u003d\u003d 0.0) {\n             return Math.abs(real);\n         }\n         double q \u003d real / imaginary;\n         return (Math.abs(imaginary) * Math.sqrt(1 + q * q));\n     } else {\n         if (real \u003d\u003d 0.0) {\n             return Math.abs(imaginary);\n         }\n         double q \u003d imaginary / real;\n         return (Math.abs(real) * Math.sqrt(1 + q * q));\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Return the absolute value of this complex number.\n\n@return the absolute value.\n",
            "newValue": "Return the absolute value of this complex number.\n\u003cp\u003e\nReturns \u003ccode\u003eNaN\u003c/code\u003e if either real or imaginary part is\n\u003ccode\u003eNaN\u003c/code\u003e and \u003ccode\u003eDouble.POSITIVE_INFINITY\u003c/code\u003e if\nneither part is \u003ccode\u003eNaN\u003c/code\u003e, but at least one part takes an infinite\nvalue.\n\n@return the absolute value\n"
          }
        }
      ]
    },
    "ad6929ea0c89c085422c1e43bb3f763a0e3d25e4": {
      "type": "Ybodychange",
      "commitMessage": "Merged changes in MATH_1_1 branch to trunk.  This includes revision 232577 through revision 234481.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@239294 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/22/05, 7:27 PM",
      "commitName": "ad6929ea0c89c085422c1e43bb3f763a0e3d25e4",
      "commitAuthor": "Brent Worden",
      "commitDateOld": "2/26/05, 5:11 AM",
      "commitNameOld": "65b65f88b74de6b3462b04b2cf2a69f064a77557",
      "commitAuthorOld": "Dirk Verbeeck",
      "daysBetweenCommits": 177.55,
      "commitsBetweenForRepo": 77,
      "commitsBetweenForFile": 1,
      "actualSource": "public double abs() {\n    if (isNaN()) {\n        return Double.NaN;\n    }\n    if (Math.abs(real) \u003c Math.abs(imaginary)) {\n        if (imaginary \u003d\u003d 0.0) {\n            return Math.abs(real);\n        }\n        double q \u003d real / imaginary;\n        return (Math.abs(imaginary) * Math.sqrt(1 + q * q));\n    } else {\n        if (real \u003d\u003d 0.0) {\n            return Math.abs(imaginary);\n        }\n        double q \u003d imaginary / real;\n        return (Math.abs(real) * Math.sqrt(1 + q * q));\n    }\n}",
      "path": "src/java/org/apache/commons/math/complex/Complex.java",
      "functionStartLine": 65,
      "functionName": "abs",
      "functionAnnotation": "",
      "functionDoc": "Return the absolute value of this complex number.\n\n@return the absolute value.\n",
      "diff": "@@ -1,6 +1,18 @@\n public double abs() {\n     if (isNaN()) {\n         return Double.NaN;\n     }\n-    return Math.sqrt(squareSum());\n+    if (Math.abs(real) \u003c Math.abs(imaginary)) {\n+        if (imaginary \u003d\u003d 0.0) {\n+            return Math.abs(real);\n+        }\n+        double q \u003d real / imaginary;\n+        return (Math.abs(imaginary) * Math.sqrt(1 + q * q));\n+    } else {\n+        if (real \u003d\u003d 0.0) {\n+            return Math.abs(imaginary);\n+        }\n+        double q \u003d imaginary / real;\n+        return (Math.abs(real) * Math.sqrt(1 + q * q));\n+    }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0a904461932f2c0455611e77ec6a8d8aced2980b": {
      "type": "Yintroduced",
      "commitMessage": "Attempting to recover last revision.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141013 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/14/03, 2:25 PM",
      "commitName": "0a904461932f2c0455611e77ec6a8d8aced2980b",
      "commitAuthor": "Mark R. Diggory",
      "diff": "@@ -0,0 +1,6 @@\n+public double abs() {\n+    if (isNaN()) {\n+        return Double.NaN;\n+    }\n+    return Math.sqrt(squareSum());\n+}\n\\ No newline at end of file\n",
      "actualSource": "public double abs() {\n    if (isNaN()) {\n        return Double.NaN;\n    }\n    return Math.sqrt(squareSum());\n}",
      "path": "src/java/org/apache/commons/math/complex/Complex.java",
      "functionStartLine": 97,
      "functionName": "abs",
      "functionAnnotation": "",
      "functionDoc": "Return the absolute value of this complex number.\n\n@return the absolute value.\n"
    }
  }
}