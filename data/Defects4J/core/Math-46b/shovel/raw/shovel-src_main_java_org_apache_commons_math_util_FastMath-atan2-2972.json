{
  "origin": "codeshovel",
  "repositoryName": "Math-46b",
  "repositoryPath": "/tmp/Math-46b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FastMath.java",
  "functionName": "atan2",
  "functionId": "atan2___y-double__x-double",
  "sourceFilePath": "src/main/java/org/apache/commons/math/util/FastMath.java",
  "functionAnnotation": "",
  "functionDoc": "Two arguments arctangent function\n\n@param y ordinate\n@param x abscissa\n@return phase angle of point (x,y) between {@code -PI} and {@code PI}\n",
  "functionStartLine": 2972,
  "functionEndLine": 3087,
  "numCommitsSeen": 51,
  "timeTaken": 21000,
  "changeHistory": [
    "aca98c76dbfd1e8e535eaeab94280cc8f1f45732",
    "d3d2350a00d7b132cf9cfc92bd921d0c0c28244f",
    "e38bbe5ddea1abc0d886842a6958d6028a017928",
    "11b1b60440bfbf6b58d7b4dfa270b4a2aad19c9e",
    "f45eb1fe480cfa8683bbe60b48d273848e851bbb",
    "90279e83d82389db2ba88898ec985a1827849e6e",
    "80b1e90b42a34856b61cec628fcea6633d1000cd"
  ],
  "changeHistoryShort": {
    "aca98c76dbfd1e8e535eaeab94280cc8f1f45732": "Ybodychange",
    "d3d2350a00d7b132cf9cfc92bd921d0c0c28244f": "Ybodychange",
    "e38bbe5ddea1abc0d886842a6958d6028a017928": "Ydocchange",
    "11b1b60440bfbf6b58d7b4dfa270b4a2aad19c9e": "Ybodychange",
    "f45eb1fe480cfa8683bbe60b48d273848e851bbb": "Ybodychange",
    "90279e83d82389db2ba88898ec985a1827849e6e": "Ybodychange",
    "80b1e90b42a34856b61cec628fcea6633d1000cd": "Yintroduced"
  },
  "changeHistoryDetails": {
    "aca98c76dbfd1e8e535eaeab94280cc8f1f45732": {
      "type": "Ybodychange",
      "commitMessage": "fixed a nasty bug with atan2 that occurred only with some Java 1.5 virtual machines\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1074295 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/24/11, 1:19 PM",
      "commitName": "aca98c76dbfd1e8e535eaeab94280cc8f1f45732",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "2/10/11, 1:07 PM",
      "commitNameOld": "6d0cca3e56cd82d68ede4919d6ca35068ce6fc89",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 14.01,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "actualSource": "public static double atan2(double y, double x) {\n    if (x !\u003d x || y !\u003d y) {\n        return Double.NaN;\n    }\n    if (y \u003d\u003d 0.0) {\n        double result \u003d x * y;\n        double invx \u003d 1.0 / x;\n        double invy \u003d 1.0 / y;\n        if (invx \u003d\u003d 0.0) {\n            if (x \u003e 0) {\n                return y;\n            } else {\n                return copySign(Math.PI, y);\n            }\n        }\n        if (x \u003c 0.0 || invx \u003c 0.0) {\n            if (y \u003c 0.0 || invy \u003c 0.0) {\n                return -Math.PI;\n            } else {\n                return Math.PI;\n            }\n        } else {\n            return result;\n        }\n    }\n    if (y \u003d\u003d Double.POSITIVE_INFINITY) {\n        if (x \u003d\u003d Double.POSITIVE_INFINITY) {\n            return Math.PI / 4.0;\n        }\n        if (x \u003d\u003d Double.NEGATIVE_INFINITY) {\n            return Math.PI * 3.0 / 4.0;\n        }\n        return Math.PI / 2.0;\n    }\n    if (y \u003d\u003d Double.NEGATIVE_INFINITY) {\n        if (x \u003d\u003d Double.POSITIVE_INFINITY) {\n            return -Math.PI / 4.0;\n        }\n        if (x \u003d\u003d Double.NEGATIVE_INFINITY) {\n            return -Math.PI * 3.0 / 4.0;\n        }\n        return -Math.PI / 2.0;\n    }\n    if (x \u003d\u003d Double.POSITIVE_INFINITY) {\n        if (y \u003e 0.0 || 1 / y \u003e 0.0) {\n            return 0.0;\n        }\n        if (y \u003c 0.0 || 1 / y \u003c 0.0) {\n            return -0.0;\n        }\n    }\n    if (x \u003d\u003d Double.NEGATIVE_INFINITY) {\n        if (y \u003e 0.0 || 1 / y \u003e 0.0) {\n            return Math.PI;\n        }\n        if (y \u003c 0.0 || 1 / y \u003c 0.0) {\n            return -Math.PI;\n        }\n    }\n    if (x \u003d\u003d 0) {\n        if (y \u003e 0.0 || 1 / y \u003e 0.0) {\n            return Math.PI / 2.0;\n        }\n        if (y \u003c 0.0 || 1 / y \u003c 0.0) {\n            return -Math.PI / 2.0;\n        }\n    }\n    final double r \u003d y / x;\n    if (Double.isInfinite(r)) {\n        return atan(r, 0, x \u003c 0);\n    }\n    double ra \u003d doubleHighPart(r);\n    double rb \u003d r - ra;\n    final double xa \u003d doubleHighPart(x);\n    final double xb \u003d x - xa;\n    rb +\u003d (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;\n    double temp \u003d ra + rb;\n    rb \u003d -(temp - ra - rb);\n    ra \u003d temp;\n    if (ra \u003d\u003d 0) {\n        ra \u003d copySign(0.0, y);\n    }\n    double result \u003d atan(ra, rb, x \u003c 0);\n    return result;\n}",
      "path": "src/main/java/org/apache/commons/math/util/FastMath.java",
      "functionStartLine": 2942,
      "functionName": "atan2",
      "functionAnnotation": "",
      "functionDoc": "Two arguments arctangent function\n\n@param y ordinate\n@param x abscissa\n@return phase angle of point (x,y) between {@code -PI} and {@code PI}\n",
      "diff": "@@ -1,85 +1,85 @@\n public static double atan2(double y, double x) {\n     if (x !\u003d x || y !\u003d y) {\n         return Double.NaN;\n     }\n     if (y \u003d\u003d 0.0) {\n         double result \u003d x * y;\n         double invx \u003d 1.0 / x;\n         double invy \u003d 1.0 / y;\n         if (invx \u003d\u003d 0.0) {\n             if (x \u003e 0) {\n                 return y;\n             } else {\n                 return copySign(Math.PI, y);\n             }\n         }\n         if (x \u003c 0.0 || invx \u003c 0.0) {\n             if (y \u003c 0.0 || invy \u003c 0.0) {\n                 return -Math.PI;\n             } else {\n                 return Math.PI;\n             }\n         } else {\n             return result;\n         }\n     }\n     if (y \u003d\u003d Double.POSITIVE_INFINITY) {\n         if (x \u003d\u003d Double.POSITIVE_INFINITY) {\n             return Math.PI / 4.0;\n         }\n         if (x \u003d\u003d Double.NEGATIVE_INFINITY) {\n             return Math.PI * 3.0 / 4.0;\n         }\n         return Math.PI / 2.0;\n     }\n     if (y \u003d\u003d Double.NEGATIVE_INFINITY) {\n         if (x \u003d\u003d Double.POSITIVE_INFINITY) {\n             return -Math.PI / 4.0;\n         }\n         if (x \u003d\u003d Double.NEGATIVE_INFINITY) {\n             return -Math.PI * 3.0 / 4.0;\n         }\n         return -Math.PI / 2.0;\n     }\n     if (x \u003d\u003d Double.POSITIVE_INFINITY) {\n         if (y \u003e 0.0 || 1 / y \u003e 0.0) {\n             return 0.0;\n         }\n         if (y \u003c 0.0 || 1 / y \u003c 0.0) {\n             return -0.0;\n         }\n     }\n     if (x \u003d\u003d Double.NEGATIVE_INFINITY) {\n         if (y \u003e 0.0 || 1 / y \u003e 0.0) {\n             return Math.PI;\n         }\n         if (y \u003c 0.0 || 1 / y \u003c 0.0) {\n             return -Math.PI;\n         }\n     }\n     if (x \u003d\u003d 0) {\n         if (y \u003e 0.0 || 1 / y \u003e 0.0) {\n             return Math.PI / 2.0;\n         }\n         if (y \u003c 0.0 || 1 / y \u003c 0.0) {\n             return -Math.PI / 2.0;\n         }\n     }\n     final double r \u003d y / x;\n     if (Double.isInfinite(r)) {\n         return atan(r, 0, x \u003c 0);\n     }\n     double ra \u003d doubleHighPart(r);\n     double rb \u003d r - ra;\n     final double xa \u003d doubleHighPart(x);\n     final double xb \u003d x - xa;\n     rb +\u003d (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;\n     double temp \u003d ra + rb;\n     rb \u003d -(temp - ra - rb);\n     ra \u003d temp;\n-    if (ra \u003d\u003d 0 \u0026\u0026 (y \u003c 0)) {\n-        ra \u003d -0.0;\n+    if (ra \u003d\u003d 0) {\n+        ra \u003d copySign(0.0, y);\n     }\n     double result \u003d atan(ra, rb, x \u003c 0);\n     return result;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d3d2350a00d7b132cf9cfc92bd921d0c0c28244f": {
      "type": "Ybodychange",
      "commitMessage": "MATH-496 Create FastMath copySign methods\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1062303 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/22/11, 4:57 PM",
      "commitName": "d3d2350a00d7b132cf9cfc92bd921d0c0c28244f",
      "commitAuthor": "Sebastian Bazley",
      "commitDateOld": "1/22/11, 12:28 PM",
      "commitNameOld": "e38bbe5ddea1abc0d886842a6958d6028a017928",
      "commitAuthorOld": "Sebastian Bazley",
      "daysBetweenCommits": 0.19,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public static double atan2(double y, double x) {\n    if (x !\u003d x || y !\u003d y) {\n        return Double.NaN;\n    }\n    if (y \u003d\u003d 0.0) {\n        double result \u003d x * y;\n        double invx \u003d 1.0 / x;\n        double invy \u003d 1.0 / y;\n        if (invx \u003d\u003d 0.0) {\n            if (x \u003e 0) {\n                return y;\n            } else {\n                return copySign(Math.PI, y);\n            }\n        }\n        if (x \u003c 0.0 || invx \u003c 0.0) {\n            if (y \u003c 0.0 || invy \u003c 0.0) {\n                return -Math.PI;\n            } else {\n                return Math.PI;\n            }\n        } else {\n            return result;\n        }\n    }\n    if (y \u003d\u003d Double.POSITIVE_INFINITY) {\n        if (x \u003d\u003d Double.POSITIVE_INFINITY) {\n            return Math.PI / 4.0;\n        }\n        if (x \u003d\u003d Double.NEGATIVE_INFINITY) {\n            return Math.PI * 3.0 / 4.0;\n        }\n        return Math.PI / 2.0;\n    }\n    if (y \u003d\u003d Double.NEGATIVE_INFINITY) {\n        if (x \u003d\u003d Double.POSITIVE_INFINITY) {\n            return -Math.PI / 4.0;\n        }\n        if (x \u003d\u003d Double.NEGATIVE_INFINITY) {\n            return -Math.PI * 3.0 / 4.0;\n        }\n        return -Math.PI / 2.0;\n    }\n    if (x \u003d\u003d Double.POSITIVE_INFINITY) {\n        if (y \u003e 0.0 || 1 / y \u003e 0.0) {\n            return 0.0;\n        }\n        if (y \u003c 0.0 || 1 / y \u003c 0.0) {\n            return -0.0;\n        }\n    }\n    if (x \u003d\u003d Double.NEGATIVE_INFINITY) {\n        if (y \u003e 0.0 || 1 / y \u003e 0.0) {\n            return Math.PI;\n        }\n        if (y \u003c 0.0 || 1 / y \u003c 0.0) {\n            return -Math.PI;\n        }\n    }\n    if (x \u003d\u003d 0) {\n        if (y \u003e 0.0 || 1 / y \u003e 0.0) {\n            return Math.PI / 2.0;\n        }\n        if (y \u003c 0.0 || 1 / y \u003c 0.0) {\n            return -Math.PI / 2.0;\n        }\n    }\n    final double r \u003d y / x;\n    if (Double.isInfinite(r)) {\n        return atan(r, 0, x \u003c 0);\n    }\n    double ra \u003d doubleHighPart(r);\n    double rb \u003d r - ra;\n    final double xa \u003d doubleHighPart(x);\n    final double xb \u003d x - xa;\n    rb +\u003d (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;\n    double temp \u003d ra + rb;\n    rb \u003d -(temp - ra - rb);\n    ra \u003d temp;\n    if (ra \u003d\u003d 0 \u0026\u0026 (y \u003c 0)) {\n        ra \u003d -0.0;\n    }\n    double result \u003d atan(ra, rb, x \u003c 0);\n    return result;\n}",
      "path": "src/main/java/org/apache/commons/math/util/FastMath.java",
      "functionStartLine": 2934,
      "functionName": "atan2",
      "functionAnnotation": "",
      "functionDoc": "Two arguments arctangent function\n\n@param y ordinate\n@param x abscissa\n@return phase angle of point (x,y) between {@code -PI} and {@code PI}\n",
      "diff": "@@ -1,85 +1,85 @@\n public static double atan2(double y, double x) {\n     if (x !\u003d x || y !\u003d y) {\n         return Double.NaN;\n     }\n     if (y \u003d\u003d 0.0) {\n         double result \u003d x * y;\n         double invx \u003d 1.0 / x;\n         double invy \u003d 1.0 / y;\n         if (invx \u003d\u003d 0.0) {\n             if (x \u003e 0) {\n                 return y;\n             } else {\n-                return getSign(y) * Math.PI;\n+                return copySign(Math.PI, y);\n             }\n         }\n         if (x \u003c 0.0 || invx \u003c 0.0) {\n             if (y \u003c 0.0 || invy \u003c 0.0) {\n                 return -Math.PI;\n             } else {\n                 return Math.PI;\n             }\n         } else {\n             return result;\n         }\n     }\n     if (y \u003d\u003d Double.POSITIVE_INFINITY) {\n         if (x \u003d\u003d Double.POSITIVE_INFINITY) {\n             return Math.PI / 4.0;\n         }\n         if (x \u003d\u003d Double.NEGATIVE_INFINITY) {\n             return Math.PI * 3.0 / 4.0;\n         }\n         return Math.PI / 2.0;\n     }\n     if (y \u003d\u003d Double.NEGATIVE_INFINITY) {\n         if (x \u003d\u003d Double.POSITIVE_INFINITY) {\n             return -Math.PI / 4.0;\n         }\n         if (x \u003d\u003d Double.NEGATIVE_INFINITY) {\n             return -Math.PI * 3.0 / 4.0;\n         }\n         return -Math.PI / 2.0;\n     }\n     if (x \u003d\u003d Double.POSITIVE_INFINITY) {\n         if (y \u003e 0.0 || 1 / y \u003e 0.0) {\n             return 0.0;\n         }\n         if (y \u003c 0.0 || 1 / y \u003c 0.0) {\n             return -0.0;\n         }\n     }\n     if (x \u003d\u003d Double.NEGATIVE_INFINITY) {\n         if (y \u003e 0.0 || 1 / y \u003e 0.0) {\n             return Math.PI;\n         }\n         if (y \u003c 0.0 || 1 / y \u003c 0.0) {\n             return -Math.PI;\n         }\n     }\n     if (x \u003d\u003d 0) {\n         if (y \u003e 0.0 || 1 / y \u003e 0.0) {\n             return Math.PI / 2.0;\n         }\n         if (y \u003c 0.0 || 1 / y \u003c 0.0) {\n             return -Math.PI / 2.0;\n         }\n     }\n     final double r \u003d y / x;\n     if (Double.isInfinite(r)) {\n         return atan(r, 0, x \u003c 0);\n     }\n     double ra \u003d doubleHighPart(r);\n     double rb \u003d r - ra;\n     final double xa \u003d doubleHighPart(x);\n     final double xb \u003d x - xa;\n     rb +\u003d (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;\n     double temp \u003d ra + rb;\n     rb \u003d -(temp - ra - rb);\n     ra \u003d temp;\n     if (ra \u003d\u003d 0 \u0026\u0026 (y \u003c 0)) {\n         ra \u003d -0.0;\n     }\n     double result \u003d atan(ra, rb, x \u003c 0);\n     return result;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e38bbe5ddea1abc0d886842a6958d6028a017928": {
      "type": "Ydocchange",
      "commitMessage": "Javadoc tweak\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1062260 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/22/11, 12:28 PM",
      "commitName": "e38bbe5ddea1abc0d886842a6958d6028a017928",
      "commitAuthor": "Sebastian Bazley",
      "commitDateOld": "1/22/11, 12:26 PM",
      "commitNameOld": "a4900c9dbad88add3eb1c0ee6366fc199edef7f7",
      "commitAuthorOld": "Sebastian Bazley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static double atan2(double y, double x) {\n    if (x !\u003d x || y !\u003d y) {\n        return Double.NaN;\n    }\n    if (y \u003d\u003d 0.0) {\n        double result \u003d x * y;\n        double invx \u003d 1.0 / x;\n        double invy \u003d 1.0 / y;\n        if (invx \u003d\u003d 0.0) {\n            if (x \u003e 0) {\n                return y;\n            } else {\n                return getSign(y) * Math.PI;\n            }\n        }\n        if (x \u003c 0.0 || invx \u003c 0.0) {\n            if (y \u003c 0.0 || invy \u003c 0.0) {\n                return -Math.PI;\n            } else {\n                return Math.PI;\n            }\n        } else {\n            return result;\n        }\n    }\n    if (y \u003d\u003d Double.POSITIVE_INFINITY) {\n        if (x \u003d\u003d Double.POSITIVE_INFINITY) {\n            return Math.PI / 4.0;\n        }\n        if (x \u003d\u003d Double.NEGATIVE_INFINITY) {\n            return Math.PI * 3.0 / 4.0;\n        }\n        return Math.PI / 2.0;\n    }\n    if (y \u003d\u003d Double.NEGATIVE_INFINITY) {\n        if (x \u003d\u003d Double.POSITIVE_INFINITY) {\n            return -Math.PI / 4.0;\n        }\n        if (x \u003d\u003d Double.NEGATIVE_INFINITY) {\n            return -Math.PI * 3.0 / 4.0;\n        }\n        return -Math.PI / 2.0;\n    }\n    if (x \u003d\u003d Double.POSITIVE_INFINITY) {\n        if (y \u003e 0.0 || 1 / y \u003e 0.0) {\n            return 0.0;\n        }\n        if (y \u003c 0.0 || 1 / y \u003c 0.0) {\n            return -0.0;\n        }\n    }\n    if (x \u003d\u003d Double.NEGATIVE_INFINITY) {\n        if (y \u003e 0.0 || 1 / y \u003e 0.0) {\n            return Math.PI;\n        }\n        if (y \u003c 0.0 || 1 / y \u003c 0.0) {\n            return -Math.PI;\n        }\n    }\n    if (x \u003d\u003d 0) {\n        if (y \u003e 0.0 || 1 / y \u003e 0.0) {\n            return Math.PI / 2.0;\n        }\n        if (y \u003c 0.0 || 1 / y \u003c 0.0) {\n            return -Math.PI / 2.0;\n        }\n    }\n    final double r \u003d y / x;\n    if (Double.isInfinite(r)) {\n        return atan(r, 0, x \u003c 0);\n    }\n    double ra \u003d doubleHighPart(r);\n    double rb \u003d r - ra;\n    final double xa \u003d doubleHighPart(x);\n    final double xb \u003d x - xa;\n    rb +\u003d (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;\n    double temp \u003d ra + rb;\n    rb \u003d -(temp - ra - rb);\n    ra \u003d temp;\n    if (ra \u003d\u003d 0 \u0026\u0026 (y \u003c 0)) {\n        ra \u003d -0.0;\n    }\n    double result \u003d atan(ra, rb, x \u003c 0);\n    return result;\n}",
      "path": "src/main/java/org/apache/commons/math/util/FastMath.java",
      "functionStartLine": 2946,
      "functionName": "atan2",
      "functionAnnotation": "",
      "functionDoc": "Two arguments arctangent function\n\n@param y ordinate\n@param x abscissa\n@return phase angle of point (x,y) between {@code -PI} and {@code PI}\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Two arguments arctangent function\n\n@param y ordinate\n@param x abscissa\n@return phase angle of point (x,y) between -\u0026pi; and \u0026pi;\n",
        "newValue": "Two arguments arctangent function\n\n@param y ordinate\n@param x abscissa\n@return phase angle of point (x,y) between {@code -PI} and {@code PI}\n"
      }
    },
    "11b1b60440bfbf6b58d7b4dfa270b4a2aad19c9e": {
      "type": "Ybodychange",
      "commitMessage": "MATH-494 FastMath atan2 does not agree with StrictMath for special cases\nAdd doubleHighPart() method to better handle splitting high absolute values\nAdd getSign() utility method\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1062253 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/22/11, 12:19 PM",
      "commitName": "11b1b60440bfbf6b58d7b4dfa270b4a2aad19c9e",
      "commitAuthor": "Sebastian Bazley",
      "commitDateOld": "1/21/11, 1:46 PM",
      "commitNameOld": "5e873783294c04f2a8eb47518e808445b2b2900c",
      "commitAuthorOld": "Sebastian Bazley",
      "daysBetweenCommits": 0.94,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "public static double atan2(double y, double x) {\n    if (x !\u003d x || y !\u003d y) {\n        return Double.NaN;\n    }\n    if (y \u003d\u003d 0.0) {\n        double result \u003d x * y;\n        double invx \u003d 1.0 / x;\n        double invy \u003d 1.0 / y;\n        if (invx \u003d\u003d 0.0) {\n            if (x \u003e 0) {\n                return y;\n            } else {\n                return getSign(y) * Math.PI;\n            }\n        }\n        if (x \u003c 0.0 || invx \u003c 0.0) {\n            if (y \u003c 0.0 || invy \u003c 0.0) {\n                return -Math.PI;\n            } else {\n                return Math.PI;\n            }\n        } else {\n            return result;\n        }\n    }\n    if (y \u003d\u003d Double.POSITIVE_INFINITY) {\n        if (x \u003d\u003d Double.POSITIVE_INFINITY) {\n            return Math.PI / 4.0;\n        }\n        if (x \u003d\u003d Double.NEGATIVE_INFINITY) {\n            return Math.PI * 3.0 / 4.0;\n        }\n        return Math.PI / 2.0;\n    }\n    if (y \u003d\u003d Double.NEGATIVE_INFINITY) {\n        if (x \u003d\u003d Double.POSITIVE_INFINITY) {\n            return -Math.PI / 4.0;\n        }\n        if (x \u003d\u003d Double.NEGATIVE_INFINITY) {\n            return -Math.PI * 3.0 / 4.0;\n        }\n        return -Math.PI / 2.0;\n    }\n    if (x \u003d\u003d Double.POSITIVE_INFINITY) {\n        if (y \u003e 0.0 || 1 / y \u003e 0.0) {\n            return 0.0;\n        }\n        if (y \u003c 0.0 || 1 / y \u003c 0.0) {\n            return -0.0;\n        }\n    }\n    if (x \u003d\u003d Double.NEGATIVE_INFINITY) {\n        if (y \u003e 0.0 || 1 / y \u003e 0.0) {\n            return Math.PI;\n        }\n        if (y \u003c 0.0 || 1 / y \u003c 0.0) {\n            return -Math.PI;\n        }\n    }\n    if (x \u003d\u003d 0) {\n        if (y \u003e 0.0 || 1 / y \u003e 0.0) {\n            return Math.PI / 2.0;\n        }\n        if (y \u003c 0.0 || 1 / y \u003c 0.0) {\n            return -Math.PI / 2.0;\n        }\n    }\n    final double r \u003d y / x;\n    if (Double.isInfinite(r)) {\n        return atan(r, 0, x \u003c 0);\n    }\n    double ra \u003d doubleHighPart(r);\n    double rb \u003d r - ra;\n    final double xa \u003d doubleHighPart(x);\n    final double xb \u003d x - xa;\n    rb +\u003d (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;\n    double temp \u003d ra + rb;\n    rb \u003d -(temp - ra - rb);\n    ra \u003d temp;\n    if (ra \u003d\u003d 0 \u0026\u0026 (y \u003c 0)) {\n        ra \u003d -0.0;\n    }\n    double result \u003d atan(ra, rb, x \u003c 0);\n    return result;\n}",
      "path": "src/main/java/org/apache/commons/math/util/FastMath.java",
      "functionStartLine": 2946,
      "functionName": "atan2",
      "functionAnnotation": "",
      "functionDoc": "Two arguments arctangent function\n\n@param y ordinate\n@param x abscissa\n@return phase angle of point (x,y) between -\u0026pi; and \u0026pi;\n",
      "diff": "@@ -1,88 +1,85 @@\n public static double atan2(double y, double x) {\n     if (x !\u003d x || y !\u003d y) {\n         return Double.NaN;\n     }\n     if (y \u003d\u003d 0.0) {\n         double result \u003d x * y;\n         double invx \u003d 1.0 / x;\n         double invy \u003d 1.0 / y;\n         if (invx \u003d\u003d 0.0) {\n             if (x \u003e 0) {\n-                return 0.0;\n+                return y;\n             } else {\n-                return Math.PI;\n+                return getSign(y) * Math.PI;\n             }\n         }\n-        if (result !\u003d result) {\n-            return x / y;\n-        }\n         if (x \u003c 0.0 || invx \u003c 0.0) {\n             if (y \u003c 0.0 || invy \u003c 0.0) {\n                 return -Math.PI;\n             } else {\n                 return Math.PI;\n             }\n         } else {\n             return result;\n         }\n     }\n     if (y \u003d\u003d Double.POSITIVE_INFINITY) {\n         if (x \u003d\u003d Double.POSITIVE_INFINITY) {\n             return Math.PI / 4.0;\n         }\n         if (x \u003d\u003d Double.NEGATIVE_INFINITY) {\n             return Math.PI * 3.0 / 4.0;\n         }\n         return Math.PI / 2.0;\n     }\n     if (y \u003d\u003d Double.NEGATIVE_INFINITY) {\n         if (x \u003d\u003d Double.POSITIVE_INFINITY) {\n             return -Math.PI / 4.0;\n         }\n         if (x \u003d\u003d Double.NEGATIVE_INFINITY) {\n             return -Math.PI * 3.0 / 4.0;\n         }\n         return -Math.PI / 2.0;\n     }\n     if (x \u003d\u003d Double.POSITIVE_INFINITY) {\n         if (y \u003e 0.0 || 1 / y \u003e 0.0) {\n             return 0.0;\n         }\n         if (y \u003c 0.0 || 1 / y \u003c 0.0) {\n             return -0.0;\n         }\n     }\n     if (x \u003d\u003d Double.NEGATIVE_INFINITY) {\n         if (y \u003e 0.0 || 1 / y \u003e 0.0) {\n             return Math.PI;\n         }\n         if (y \u003c 0.0 || 1 / y \u003c 0.0) {\n             return -Math.PI;\n         }\n     }\n     if (x \u003d\u003d 0) {\n         if (y \u003e 0.0 || 1 / y \u003e 0.0) {\n             return Math.PI / 2.0;\n         }\n         if (y \u003c 0.0 || 1 / y \u003c 0.0) {\n             return -Math.PI / 2.0;\n         }\n     }\n-    if (x \u003e 8e298 || x \u003c -8e298) {\n-        x *\u003d 9.31322574615478515625E-10;\n-        y *\u003d 9.31322574615478515625E-10;\n-    }\n-    double temp \u003d x * HEX_40000000;\n-    final double xa \u003d x + temp - temp;\n-    final double xb \u003d x - xa;\n     final double r \u003d y / x;\n-    temp \u003d r * HEX_40000000;\n-    double ra \u003d r + temp - temp;\n+    if (Double.isInfinite(r)) {\n+        return atan(r, 0, x \u003c 0);\n+    }\n+    double ra \u003d doubleHighPart(r);\n     double rb \u003d r - ra;\n+    final double xa \u003d doubleHighPart(x);\n+    final double xb \u003d x - xa;\n     rb +\u003d (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;\n-    temp \u003d ra + rb;\n+    double temp \u003d ra + rb;\n     rb \u003d -(temp - ra - rb);\n     ra \u003d temp;\n+    if (ra \u003d\u003d 0 \u0026\u0026 (y \u003c 0)) {\n+        ra \u003d -0.0;\n+    }\n     double result \u003d atan(ra, rb, x \u003c 0);\n     return result;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f45eb1fe480cfa8683bbe60b48d273848e851bbb": {
      "type": "Ybodychange",
      "commitMessage": "MATH-476 FastMath code contains \u0027magic\u0027 numbers\nExtracted \"splitter\" value as a constant\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1061621 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/20/11, 8:03 PM",
      "commitName": "f45eb1fe480cfa8683bbe60b48d273848e851bbb",
      "commitAuthor": "Sebastian Bazley",
      "commitDateOld": "1/20/11, 7:24 PM",
      "commitNameOld": "01fb77e16771516646f668450f538128b38e8825",
      "commitAuthorOld": "Sebastian Bazley",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public static double atan2(double y, double x) {\n    if (x !\u003d x || y !\u003d y) {\n        return Double.NaN;\n    }\n    if (y \u003d\u003d 0.0) {\n        double result \u003d x * y;\n        double invx \u003d 1.0 / x;\n        double invy \u003d 1.0 / y;\n        if (invx \u003d\u003d 0.0) {\n            if (x \u003e 0) {\n                return 0.0;\n            } else {\n                return Math.PI;\n            }\n        }\n        if (result !\u003d result) {\n            return x / y;\n        }\n        if (x \u003c 0.0 || invx \u003c 0.0) {\n            if (y \u003c 0.0 || invy \u003c 0.0) {\n                return -Math.PI;\n            } else {\n                return Math.PI;\n            }\n        } else {\n            return result;\n        }\n    }\n    if (y \u003d\u003d Double.POSITIVE_INFINITY) {\n        if (x \u003d\u003d Double.POSITIVE_INFINITY) {\n            return Math.PI / 4.0;\n        }\n        if (x \u003d\u003d Double.NEGATIVE_INFINITY) {\n            return Math.PI * 3.0 / 4.0;\n        }\n        return Math.PI / 2.0;\n    }\n    if (y \u003d\u003d Double.NEGATIVE_INFINITY) {\n        if (x \u003d\u003d Double.POSITIVE_INFINITY) {\n            return -Math.PI / 4.0;\n        }\n        if (x \u003d\u003d Double.NEGATIVE_INFINITY) {\n            return -Math.PI * 3.0 / 4.0;\n        }\n        return -Math.PI / 2.0;\n    }\n    if (x \u003d\u003d Double.POSITIVE_INFINITY) {\n        if (y \u003e 0.0 || 1 / y \u003e 0.0) {\n            return 0.0;\n        }\n        if (y \u003c 0.0 || 1 / y \u003c 0.0) {\n            return -0.0;\n        }\n    }\n    if (x \u003d\u003d Double.NEGATIVE_INFINITY) {\n        if (y \u003e 0.0 || 1 / y \u003e 0.0) {\n            return Math.PI;\n        }\n        if (y \u003c 0.0 || 1 / y \u003c 0.0) {\n            return -Math.PI;\n        }\n    }\n    if (x \u003d\u003d 0) {\n        if (y \u003e 0.0 || 1 / y \u003e 0.0) {\n            return Math.PI / 2.0;\n        }\n        if (y \u003c 0.0 || 1 / y \u003c 0.0) {\n            return -Math.PI / 2.0;\n        }\n    }\n    if (x \u003e 8e298 || x \u003c -8e298) {\n        x *\u003d 9.31322574615478515625E-10;\n        y *\u003d 9.31322574615478515625E-10;\n    }\n    double temp \u003d x * HEX_40000000;\n    final double xa \u003d x + temp - temp;\n    final double xb \u003d x - xa;\n    final double r \u003d y / x;\n    temp \u003d r * HEX_40000000;\n    double ra \u003d r + temp - temp;\n    double rb \u003d r - ra;\n    rb +\u003d (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;\n    temp \u003d ra + rb;\n    rb \u003d -(temp - ra - rb);\n    ra \u003d temp;\n    double result \u003d atan(ra, rb, x \u003c 0);\n    return result;\n}",
      "path": "src/main/java/org/apache/commons/math/util/FastMath.java",
      "functionStartLine": 2888,
      "functionName": "atan2",
      "functionAnnotation": "",
      "functionDoc": "Two arguments arctangent function\n\n@param y ordinate\n@param x abscissa\n@return phase angle of point (x,y) between -\u0026pi; and \u0026pi;\n",
      "diff": "@@ -1,88 +1,88 @@\n public static double atan2(double y, double x) {\n     if (x !\u003d x || y !\u003d y) {\n         return Double.NaN;\n     }\n     if (y \u003d\u003d 0.0) {\n         double result \u003d x * y;\n         double invx \u003d 1.0 / x;\n         double invy \u003d 1.0 / y;\n         if (invx \u003d\u003d 0.0) {\n             if (x \u003e 0) {\n                 return 0.0;\n             } else {\n                 return Math.PI;\n             }\n         }\n         if (result !\u003d result) {\n             return x / y;\n         }\n         if (x \u003c 0.0 || invx \u003c 0.0) {\n             if (y \u003c 0.0 || invy \u003c 0.0) {\n                 return -Math.PI;\n             } else {\n                 return Math.PI;\n             }\n         } else {\n             return result;\n         }\n     }\n     if (y \u003d\u003d Double.POSITIVE_INFINITY) {\n         if (x \u003d\u003d Double.POSITIVE_INFINITY) {\n             return Math.PI / 4.0;\n         }\n         if (x \u003d\u003d Double.NEGATIVE_INFINITY) {\n             return Math.PI * 3.0 / 4.0;\n         }\n         return Math.PI / 2.0;\n     }\n     if (y \u003d\u003d Double.NEGATIVE_INFINITY) {\n         if (x \u003d\u003d Double.POSITIVE_INFINITY) {\n             return -Math.PI / 4.0;\n         }\n         if (x \u003d\u003d Double.NEGATIVE_INFINITY) {\n             return -Math.PI * 3.0 / 4.0;\n         }\n         return -Math.PI / 2.0;\n     }\n     if (x \u003d\u003d Double.POSITIVE_INFINITY) {\n         if (y \u003e 0.0 || 1 / y \u003e 0.0) {\n             return 0.0;\n         }\n         if (y \u003c 0.0 || 1 / y \u003c 0.0) {\n             return -0.0;\n         }\n     }\n     if (x \u003d\u003d Double.NEGATIVE_INFINITY) {\n         if (y \u003e 0.0 || 1 / y \u003e 0.0) {\n             return Math.PI;\n         }\n         if (y \u003c 0.0 || 1 / y \u003c 0.0) {\n             return -Math.PI;\n         }\n     }\n     if (x \u003d\u003d 0) {\n         if (y \u003e 0.0 || 1 / y \u003e 0.0) {\n             return Math.PI / 2.0;\n         }\n         if (y \u003c 0.0 || 1 / y \u003c 0.0) {\n             return -Math.PI / 2.0;\n         }\n     }\n     if (x \u003e 8e298 || x \u003c -8e298) {\n         x *\u003d 9.31322574615478515625E-10;\n         y *\u003d 9.31322574615478515625E-10;\n     }\n-    double temp \u003d x * 1073741824.0;\n+    double temp \u003d x * HEX_40000000;\n     final double xa \u003d x + temp - temp;\n     final double xb \u003d x - xa;\n     final double r \u003d y / x;\n-    temp \u003d r * 1073741824.0;\n+    temp \u003d r * HEX_40000000;\n     double ra \u003d r + temp - temp;\n     double rb \u003d r - ra;\n     rb +\u003d (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;\n     temp \u003d ra + rb;\n     rb \u003d -(temp - ra - rb);\n     ra \u003d temp;\n     double result \u003d atan(ra, rb, x \u003c 0);\n     return result;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "90279e83d82389db2ba88898ec985a1827849e6e": {
      "type": "Ybodychange",
      "commitMessage": "fixed errors with infinities\nadded asin/acos\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@992870 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/5/10, 12:27 PM",
      "commitName": "90279e83d82389db2ba88898ec985a1827849e6e",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "8/29/10, 3:04 PM",
      "commitNameOld": "80b1e90b42a34856b61cec628fcea6633d1000cd",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 6.89,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "actualSource": "public static double atan2(double y, double x) {\n    if (x !\u003d x || y !\u003d y) {\n        return Double.NaN;\n    }\n    if (y \u003d\u003d 0.0) {\n        double result \u003d x * y;\n        double invx \u003d 1.0 / x;\n        double invy \u003d 1.0 / y;\n        if (invx \u003d\u003d 0.0) {\n            if (x \u003e 0) {\n                return 0.0;\n            } else {\n                return Math.PI;\n            }\n        }\n        if (result !\u003d result) {\n            return x / y;\n        }\n        if (x \u003c 0.0 || invx \u003c 0.0) {\n            if (y \u003c 0.0 || invy \u003c 0.0) {\n                return -Math.PI;\n            } else {\n                return Math.PI;\n            }\n        } else {\n            return result;\n        }\n    }\n    if (y \u003d\u003d Double.POSITIVE_INFINITY) {\n        if (x \u003d\u003d Double.POSITIVE_INFINITY) {\n            return Math.PI / 4.0;\n        }\n        if (x \u003d\u003d Double.NEGATIVE_INFINITY) {\n            return Math.PI * 3.0 / 4.0;\n        }\n        return Math.PI / 2.0;\n    }\n    if (y \u003d\u003d Double.NEGATIVE_INFINITY) {\n        if (x \u003d\u003d Double.POSITIVE_INFINITY) {\n            return -Math.PI / 4.0;\n        }\n        if (x \u003d\u003d Double.NEGATIVE_INFINITY) {\n            return -Math.PI * 3.0 / 4.0;\n        }\n        return -Math.PI / 2.0;\n    }\n    if (x \u003d\u003d Double.POSITIVE_INFINITY) {\n        if (y \u003e 0.0 || 1 / y \u003e 0.0) {\n            return 0.0;\n        }\n        if (y \u003c 0.0 || 1 / y \u003c 0.0) {\n            return -0.0;\n        }\n    }\n    if (x \u003d\u003d Double.NEGATIVE_INFINITY) {\n        if (y \u003e 0.0 || 1 / y \u003e 0.0) {\n            return Math.PI;\n        }\n        if (y \u003c 0.0 || 1 / y \u003c 0.0) {\n            return -Math.PI;\n        }\n    }\n    if (x \u003d\u003d 0) {\n        if (y \u003e 0.0 || 1 / y \u003e 0.0) {\n            return Math.PI / 2.0;\n        }\n        if (y \u003c 0.0 || 1 / y \u003c 0.0) {\n            return -Math.PI / 2.0;\n        }\n    }\n    if (x \u003e 8e298 || x \u003c -8e298) {\n        x *\u003d 9.31322574615478515625E-10;\n        y *\u003d 9.31322574615478515625E-10;\n    }\n    double temp \u003d x * 1073741824.0;\n    final double xa \u003d x + temp - temp;\n    final double xb \u003d x - xa;\n    final double r \u003d y / x;\n    temp \u003d r * 1073741824.0;\n    double ra \u003d r + temp - temp;\n    double rb \u003d r - ra;\n    rb +\u003d (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;\n    temp \u003d ra + rb;\n    rb \u003d -(temp - ra - rb);\n    ra \u003d temp;\n    double result \u003d atan(ra, rb, x \u003c 0);\n    return result;\n}",
      "path": "src/main/java/org/apache/commons/math/util/FastMath.java",
      "functionStartLine": 2624,
      "functionName": "atan2",
      "functionAnnotation": "",
      "functionDoc": "Two arguments arctangent function\n\n@param y ordinate\n@param x abscissa\n@return phase angle of point (x,y) between -\u0026pi; and \u0026pi;\n",
      "diff": "@@ -1,84 +1,88 @@\n public static double atan2(double y, double x) {\n     if (x !\u003d x || y !\u003d y) {\n         return Double.NaN;\n     }\n     if (y \u003d\u003d 0.0) {\n         double result \u003d x * y;\n         double invx \u003d 1.0 / x;\n         double invy \u003d 1.0 / y;\n         if (invx \u003d\u003d 0.0) {\n-            return 0.0;\n+            if (x \u003e 0) {\n+                return 0.0;\n+            } else {\n+                return Math.PI;\n+            }\n         }\n         if (result !\u003d result) {\n             return x / y;\n         }\n         if (x \u003c 0.0 || invx \u003c 0.0) {\n             if (y \u003c 0.0 || invy \u003c 0.0) {\n                 return -Math.PI;\n             } else {\n                 return Math.PI;\n             }\n         } else {\n             return result;\n         }\n     }\n     if (y \u003d\u003d Double.POSITIVE_INFINITY) {\n         if (x \u003d\u003d Double.POSITIVE_INFINITY) {\n             return Math.PI / 4.0;\n         }\n         if (x \u003d\u003d Double.NEGATIVE_INFINITY) {\n             return Math.PI * 3.0 / 4.0;\n         }\n         return Math.PI / 2.0;\n     }\n     if (y \u003d\u003d Double.NEGATIVE_INFINITY) {\n         if (x \u003d\u003d Double.POSITIVE_INFINITY) {\n             return -Math.PI / 4.0;\n         }\n         if (x \u003d\u003d Double.NEGATIVE_INFINITY) {\n             return -Math.PI * 3.0 / 4.0;\n         }\n         return -Math.PI / 2.0;\n     }\n     if (x \u003d\u003d Double.POSITIVE_INFINITY) {\n         if (y \u003e 0.0 || 1 / y \u003e 0.0) {\n             return 0.0;\n         }\n         if (y \u003c 0.0 || 1 / y \u003c 0.0) {\n             return -0.0;\n         }\n     }\n     if (x \u003d\u003d Double.NEGATIVE_INFINITY) {\n         if (y \u003e 0.0 || 1 / y \u003e 0.0) {\n             return Math.PI;\n         }\n         if (y \u003c 0.0 || 1 / y \u003c 0.0) {\n             return -Math.PI;\n         }\n     }\n     if (x \u003d\u003d 0) {\n         if (y \u003e 0.0 || 1 / y \u003e 0.0) {\n             return Math.PI / 2.0;\n         }\n         if (y \u003c 0.0 || 1 / y \u003c 0.0) {\n             return -Math.PI / 2.0;\n         }\n     }\n     if (x \u003e 8e298 || x \u003c -8e298) {\n         x *\u003d 9.31322574615478515625E-10;\n         y *\u003d 9.31322574615478515625E-10;\n     }\n     double temp \u003d x * 1073741824.0;\n     final double xa \u003d x + temp - temp;\n     final double xb \u003d x - xa;\n     final double r \u003d y / x;\n     temp \u003d r * 1073741824.0;\n     double ra \u003d r + temp - temp;\n     double rb \u003d r - ra;\n     rb +\u003d (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;\n     temp \u003d ra + rb;\n     rb \u003d -(temp - ra - rb);\n     ra \u003d temp;\n     double result \u003d atan(ra, rb, x \u003c 0);\n     return result;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "80b1e90b42a34856b61cec628fcea6633d1000cd": {
      "type": "Yintroduced",
      "commitMessage": "added FastMath and used it everywhere in replacement of java.util.Math\nthe unit tests have not been added yet (waiting for dfp library addition)\nJIRA: MATH-375\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@990658 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/29/10, 3:04 PM",
      "commitName": "80b1e90b42a34856b61cec628fcea6633d1000cd",
      "commitAuthor": "Luc Maisonobe",
      "diff": "@@ -0,0 +1,84 @@\n+public static double atan2(double y, double x) {\n+    if (x !\u003d x || y !\u003d y) {\n+        return Double.NaN;\n+    }\n+    if (y \u003d\u003d 0.0) {\n+        double result \u003d x * y;\n+        double invx \u003d 1.0 / x;\n+        double invy \u003d 1.0 / y;\n+        if (invx \u003d\u003d 0.0) {\n+            return 0.0;\n+        }\n+        if (result !\u003d result) {\n+            return x / y;\n+        }\n+        if (x \u003c 0.0 || invx \u003c 0.0) {\n+            if (y \u003c 0.0 || invy \u003c 0.0) {\n+                return -Math.PI;\n+            } else {\n+                return Math.PI;\n+            }\n+        } else {\n+            return result;\n+        }\n+    }\n+    if (y \u003d\u003d Double.POSITIVE_INFINITY) {\n+        if (x \u003d\u003d Double.POSITIVE_INFINITY) {\n+            return Math.PI / 4.0;\n+        }\n+        if (x \u003d\u003d Double.NEGATIVE_INFINITY) {\n+            return Math.PI * 3.0 / 4.0;\n+        }\n+        return Math.PI / 2.0;\n+    }\n+    if (y \u003d\u003d Double.NEGATIVE_INFINITY) {\n+        if (x \u003d\u003d Double.POSITIVE_INFINITY) {\n+            return -Math.PI / 4.0;\n+        }\n+        if (x \u003d\u003d Double.NEGATIVE_INFINITY) {\n+            return -Math.PI * 3.0 / 4.0;\n+        }\n+        return -Math.PI / 2.0;\n+    }\n+    if (x \u003d\u003d Double.POSITIVE_INFINITY) {\n+        if (y \u003e 0.0 || 1 / y \u003e 0.0) {\n+            return 0.0;\n+        }\n+        if (y \u003c 0.0 || 1 / y \u003c 0.0) {\n+            return -0.0;\n+        }\n+    }\n+    if (x \u003d\u003d Double.NEGATIVE_INFINITY) {\n+        if (y \u003e 0.0 || 1 / y \u003e 0.0) {\n+            return Math.PI;\n+        }\n+        if (y \u003c 0.0 || 1 / y \u003c 0.0) {\n+            return -Math.PI;\n+        }\n+    }\n+    if (x \u003d\u003d 0) {\n+        if (y \u003e 0.0 || 1 / y \u003e 0.0) {\n+            return Math.PI / 2.0;\n+        }\n+        if (y \u003c 0.0 || 1 / y \u003c 0.0) {\n+            return -Math.PI / 2.0;\n+        }\n+    }\n+    if (x \u003e 8e298 || x \u003c -8e298) {\n+        x *\u003d 9.31322574615478515625E-10;\n+        y *\u003d 9.31322574615478515625E-10;\n+    }\n+    double temp \u003d x * 1073741824.0;\n+    final double xa \u003d x + temp - temp;\n+    final double xb \u003d x - xa;\n+    final double r \u003d y / x;\n+    temp \u003d r * 1073741824.0;\n+    double ra \u003d r + temp - temp;\n+    double rb \u003d r - ra;\n+    rb +\u003d (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;\n+    temp \u003d ra + rb;\n+    rb \u003d -(temp - ra - rb);\n+    ra \u003d temp;\n+    double result \u003d atan(ra, rb, x \u003c 0);\n+    return result;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public static double atan2(double y, double x) {\n    if (x !\u003d x || y !\u003d y) {\n        return Double.NaN;\n    }\n    if (y \u003d\u003d 0.0) {\n        double result \u003d x * y;\n        double invx \u003d 1.0 / x;\n        double invy \u003d 1.0 / y;\n        if (invx \u003d\u003d 0.0) {\n            return 0.0;\n        }\n        if (result !\u003d result) {\n            return x / y;\n        }\n        if (x \u003c 0.0 || invx \u003c 0.0) {\n            if (y \u003c 0.0 || invy \u003c 0.0) {\n                return -Math.PI;\n            } else {\n                return Math.PI;\n            }\n        } else {\n            return result;\n        }\n    }\n    if (y \u003d\u003d Double.POSITIVE_INFINITY) {\n        if (x \u003d\u003d Double.POSITIVE_INFINITY) {\n            return Math.PI / 4.0;\n        }\n        if (x \u003d\u003d Double.NEGATIVE_INFINITY) {\n            return Math.PI * 3.0 / 4.0;\n        }\n        return Math.PI / 2.0;\n    }\n    if (y \u003d\u003d Double.NEGATIVE_INFINITY) {\n        if (x \u003d\u003d Double.POSITIVE_INFINITY) {\n            return -Math.PI / 4.0;\n        }\n        if (x \u003d\u003d Double.NEGATIVE_INFINITY) {\n            return -Math.PI * 3.0 / 4.0;\n        }\n        return -Math.PI / 2.0;\n    }\n    if (x \u003d\u003d Double.POSITIVE_INFINITY) {\n        if (y \u003e 0.0 || 1 / y \u003e 0.0) {\n            return 0.0;\n        }\n        if (y \u003c 0.0 || 1 / y \u003c 0.0) {\n            return -0.0;\n        }\n    }\n    if (x \u003d\u003d Double.NEGATIVE_INFINITY) {\n        if (y \u003e 0.0 || 1 / y \u003e 0.0) {\n            return Math.PI;\n        }\n        if (y \u003c 0.0 || 1 / y \u003c 0.0) {\n            return -Math.PI;\n        }\n    }\n    if (x \u003d\u003d 0) {\n        if (y \u003e 0.0 || 1 / y \u003e 0.0) {\n            return Math.PI / 2.0;\n        }\n        if (y \u003c 0.0 || 1 / y \u003c 0.0) {\n            return -Math.PI / 2.0;\n        }\n    }\n    if (x \u003e 8e298 || x \u003c -8e298) {\n        x *\u003d 9.31322574615478515625E-10;\n        y *\u003d 9.31322574615478515625E-10;\n    }\n    double temp \u003d x * 1073741824.0;\n    final double xa \u003d x + temp - temp;\n    final double xb \u003d x - xa;\n    final double r \u003d y / x;\n    temp \u003d r * 1073741824.0;\n    double ra \u003d r + temp - temp;\n    double rb \u003d r - ra;\n    rb +\u003d (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;\n    temp \u003d ra + rb;\n    rb \u003d -(temp - ra - rb);\n    ra \u003d temp;\n    double result \u003d atan(ra, rb, x \u003c 0);\n    return result;\n}",
      "path": "src/main/java/org/apache/commons/math/util/FastMath.java",
      "functionStartLine": 2577,
      "functionName": "atan2",
      "functionAnnotation": "",
      "functionDoc": "Two arguments arctangent function\n\n@param y ordinate\n@param x abscissa\n@return phase angle of point (x,y) between -\u0026pi; and \u0026pi;\n"
    }
  }
}