{
  "origin": "codeshovel",
  "repositoryName": "Math-2b",
  "repositoryPath": "/tmp/Math-2b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractWell.java",
  "functionName": "setSeed",
  "functionId": "setSeed___seed-int[](modifiers-final)",
  "sourceFilePath": "src/main/java/org/apache/commons/math3/random/AbstractWell.java",
  "functionAnnotation": "@Override",
  "functionDoc": "Reinitialize the generator as if just built with the given int array seed.\n\u003cp\u003eThe state of the generator is exactly the same as a new\ngenerator built with the same seed.\u003c/p\u003e\n\n@param seed the initial seed (32 bits integers array). If null\nthe seed of the generator will be the system time plus the system identity\nhash code of the instance.\n",
  "functionStartLine": 153,
  "functionEndLine": 170,
  "numCommitsSeen": 8,
  "timeTaken": 11706,
  "changeHistory": [
    "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd",
    "b39e2d0fe3da5429c555ea1423ff41dc6a12d61a",
    "1e75292c0bd314860a543a1d7a7154e056ed107c",
    "16727ebdc33f38d0a37aee0e87700500cc272a8b",
    "82d2bae36cf63cd61003fc970d96cc0ee50caa56"
  ],
  "changeHistoryShort": {
    "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd": "Ymovefromfile",
    "b39e2d0fe3da5429c555ea1423ff41dc6a12d61a": "Ybodychange",
    "1e75292c0bd314860a543a1d7a7154e056ed107c": "Ymultichange(Ybodychange,Ydocchange)",
    "16727ebdc33f38d0a37aee0e87700500cc272a8b": "Yannotationchange",
    "82d2bae36cf63cd61003fc970d96cc0ee50caa56": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd": {
      "type": "Ymovefromfile",
      "commitMessage": "MATH-444\nBase package name change: \"o.a.c.math\" -\u003e \"o.a.c.math3\"\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1244107 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/14/12, 8:17 AM",
      "commitName": "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd",
      "commitAuthor": "Gilles Sadowski",
      "commitDateOld": "2/14/12, 6:34 AM",
      "commitNameOld": "53257329dd394be1333b38bae787bf0cf19dc900",
      "commitAuthorOld": "Gilles Sadowski",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void setSeed(final int[] seed) {\n    if (seed \u003d\u003d null) {\n        setSeed(System.currentTimeMillis() + System.identityHashCode(this));\n        return;\n    }\n    System.arraycopy(seed, 0, v, 0, Math.min(seed.length, v.length));\n    if (seed.length \u003c v.length) {\n        for (int i \u003d seed.length; i \u003c v.length; ++i) {\n            final long l \u003d v[i - seed.length];\n            v[i] \u003d (int) ((1812433253l * (l ^ (l \u003e\u003e 30)) + i) \u0026 0xffffffffL);\n        }\n    }\n    index \u003d 0;\n    clear();\n}",
      "path": "src/main/java/org/apache/commons/math3/random/AbstractWell.java",
      "functionStartLine": 153,
      "functionName": "setSeed",
      "functionAnnotation": "@Override",
      "functionDoc": "Reinitialize the generator as if just built with the given int array seed.\n\u003cp\u003eThe state of the generator is exactly the same as a new\ngenerator built with the same seed.\u003c/p\u003e\n\n@param seed the initial seed (32 bits integers array). If null\nthe seed of the generator will be the system time plus the system identity\nhash code of the instance.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/main/java/org/apache/commons/math/random/AbstractWell.java",
        "newPath": "src/main/java/org/apache/commons/math3/random/AbstractWell.java",
        "oldMethodName": "setSeed",
        "newMethodName": "setSeed"
      }
    },
    "b39e2d0fe3da5429c555ea1423ff41dc6a12d61a": {
      "type": "Ybodychange",
      "commitMessage": "Modified setSeed methods in Bitstream generators (MersenneTwister and Well\ngenerators) to clear the cache of normal deviates used by nextGaussian.\n\nJIRA: MATH-723\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1213081 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/11/11, 1:33 PM",
      "commitName": "b39e2d0fe3da5429c555ea1423ff41dc6a12d61a",
      "commitAuthor": "Phil Steitz",
      "commitDateOld": "11/4/11, 11:48 PM",
      "commitNameOld": "1e75292c0bd314860a543a1d7a7154e056ed107c",
      "commitAuthorOld": "Phil Steitz",
      "daysBetweenCommits": 36.61,
      "commitsBetweenForRepo": 119,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void setSeed(final int[] seed) {\n    if (seed \u003d\u003d null) {\n        setSeed(System.currentTimeMillis() + System.identityHashCode(this));\n        return;\n    }\n    System.arraycopy(seed, 0, v, 0, Math.min(seed.length, v.length));\n    if (seed.length \u003c v.length) {\n        for (int i \u003d seed.length; i \u003c v.length; ++i) {\n            final long l \u003d v[i - seed.length];\n            v[i] \u003d (int) ((1812433253l * (l ^ (l \u003e\u003e 30)) + i) \u0026 0xffffffffL);\n        }\n    }\n    index \u003d 0;\n    clear();\n}",
      "path": "src/main/java/org/apache/commons/math/random/AbstractWell.java",
      "functionStartLine": 153,
      "functionName": "setSeed",
      "functionAnnotation": "@Override",
      "functionDoc": "Reinitialize the generator as if just built with the given int array seed.\n\u003cp\u003eThe state of the generator is exactly the same as a new\ngenerator built with the same seed.\u003c/p\u003e\n\n@param seed the initial seed (32 bits integers array). If null\nthe seed of the generator will be the system time plus the system identity\nhash code of the instance.\n",
      "diff": "@@ -1,15 +1,16 @@\n @Override\n public void setSeed(final int[] seed) {\n     if (seed \u003d\u003d null) {\n         setSeed(System.currentTimeMillis() + System.identityHashCode(this));\n         return;\n     }\n     System.arraycopy(seed, 0, v, 0, Math.min(seed.length, v.length));\n     if (seed.length \u003c v.length) {\n         for (int i \u003d seed.length; i \u003c v.length; ++i) {\n             final long l \u003d v[i - seed.length];\n             v[i] \u003d (int) ((1812433253l * (l ^ (l \u003e\u003e 30)) + i) \u0026 0xffffffffL);\n         }\n     }\n     index \u003d 0;\n+    clear();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1e75292c0bd314860a543a1d7a7154e056ed107c": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Changed default seeding for MersenneTwister, WELL generators to add system identity hash code.  JIRA: MATH-701.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1197896 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/4/11, 11:48 PM",
      "commitName": "1e75292c0bd314860a543a1d7a7154e056ed107c",
      "commitAuthor": "Phil Steitz",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Changed default seeding for MersenneTwister, WELL generators to add system identity hash code.  JIRA: MATH-701.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1197896 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/4/11, 11:48 PM",
          "commitName": "1e75292c0bd314860a543a1d7a7154e056ed107c",
          "commitAuthor": "Phil Steitz",
          "commitDateOld": "6/3/11, 1:49 PM",
          "commitNameOld": "98e22d778b3a886be253638b9a6b7ec075c3d62d",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 154.42,
          "commitsBetweenForRepo": 509,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void setSeed(final int[] seed) {\n    if (seed \u003d\u003d null) {\n        setSeed(System.currentTimeMillis() + System.identityHashCode(this));\n        return;\n    }\n    System.arraycopy(seed, 0, v, 0, Math.min(seed.length, v.length));\n    if (seed.length \u003c v.length) {\n        for (int i \u003d seed.length; i \u003c v.length; ++i) {\n            final long l \u003d v[i - seed.length];\n            v[i] \u003d (int) ((1812433253l * (l ^ (l \u003e\u003e 30)) + i) \u0026 0xffffffffL);\n        }\n    }\n    index \u003d 0;\n}",
          "path": "src/main/java/org/apache/commons/math/random/AbstractWell.java",
          "functionStartLine": 153,
          "functionName": "setSeed",
          "functionAnnotation": "@Override",
          "functionDoc": "Reinitialize the generator as if just built with the given int array seed.\n\u003cp\u003eThe state of the generator is exactly the same as a new\ngenerator built with the same seed.\u003c/p\u003e\n\n@param seed the initial seed (32 bits integers array). If null\nthe seed of the generator will be the system time plus the system identity\nhash code of the instance.\n",
          "diff": "@@ -1,15 +1,15 @@\n @Override\n public void setSeed(final int[] seed) {\n     if (seed \u003d\u003d null) {\n-        setSeed(System.currentTimeMillis());\n+        setSeed(System.currentTimeMillis() + System.identityHashCode(this));\n         return;\n     }\n     System.arraycopy(seed, 0, v, 0, Math.min(seed.length, v.length));\n     if (seed.length \u003c v.length) {\n         for (int i \u003d seed.length; i \u003c v.length; ++i) {\n             final long l \u003d v[i - seed.length];\n             v[i] \u003d (int) ((1812433253l * (l ^ (l \u003e\u003e 30)) + i) \u0026 0xffffffffL);\n         }\n     }\n     index \u003d 0;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Changed default seeding for MersenneTwister, WELL generators to add system identity hash code.  JIRA: MATH-701.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1197896 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/4/11, 11:48 PM",
          "commitName": "1e75292c0bd314860a543a1d7a7154e056ed107c",
          "commitAuthor": "Phil Steitz",
          "commitDateOld": "6/3/11, 1:49 PM",
          "commitNameOld": "98e22d778b3a886be253638b9a6b7ec075c3d62d",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 154.42,
          "commitsBetweenForRepo": 509,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void setSeed(final int[] seed) {\n    if (seed \u003d\u003d null) {\n        setSeed(System.currentTimeMillis() + System.identityHashCode(this));\n        return;\n    }\n    System.arraycopy(seed, 0, v, 0, Math.min(seed.length, v.length));\n    if (seed.length \u003c v.length) {\n        for (int i \u003d seed.length; i \u003c v.length; ++i) {\n            final long l \u003d v[i - seed.length];\n            v[i] \u003d (int) ((1812433253l * (l ^ (l \u003e\u003e 30)) + i) \u0026 0xffffffffL);\n        }\n    }\n    index \u003d 0;\n}",
          "path": "src/main/java/org/apache/commons/math/random/AbstractWell.java",
          "functionStartLine": 153,
          "functionName": "setSeed",
          "functionAnnotation": "@Override",
          "functionDoc": "Reinitialize the generator as if just built with the given int array seed.\n\u003cp\u003eThe state of the generator is exactly the same as a new\ngenerator built with the same seed.\u003c/p\u003e\n\n@param seed the initial seed (32 bits integers array). If null\nthe seed of the generator will be the system time plus the system identity\nhash code of the instance.\n",
          "diff": "@@ -1,15 +1,15 @@\n @Override\n public void setSeed(final int[] seed) {\n     if (seed \u003d\u003d null) {\n-        setSeed(System.currentTimeMillis());\n+        setSeed(System.currentTimeMillis() + System.identityHashCode(this));\n         return;\n     }\n     System.arraycopy(seed, 0, v, 0, Math.min(seed.length, v.length));\n     if (seed.length \u003c v.length) {\n         for (int i \u003d seed.length; i \u003c v.length; ++i) {\n             final long l \u003d v[i - seed.length];\n             v[i] \u003d (int) ((1812433253l * (l ^ (l \u003e\u003e 30)) + i) \u0026 0xffffffffL);\n         }\n     }\n     index \u003d 0;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Reinitialize the generator as if just built with the given int array seed.\n\u003cp\u003eThe state of the generator is exactly the same as a new\ngenerator built with the same seed.\u003c/p\u003e\n\n@param seed the initial seed (32 bits integers array), if null\nthe seed of the generator will be related to the current time\n",
            "newValue": "Reinitialize the generator as if just built with the given int array seed.\n\u003cp\u003eThe state of the generator is exactly the same as a new\ngenerator built with the same seed.\u003c/p\u003e\n\n@param seed the initial seed (32 bits integers array). If null\nthe seed of the generator will be the system time plus the system identity\nhash code of the instance.\n"
          }
        }
      ]
    },
    "16727ebdc33f38d0a37aee0e87700500cc272a8b": {
      "type": "Yannotationchange",
      "commitMessage": "Add missing @Override marker\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1003351 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/30/10, 6:50 PM",
      "commitName": "16727ebdc33f38d0a37aee0e87700500cc272a8b",
      "commitAuthor": "Sebastian Bazley",
      "commitDateOld": "9/21/10, 12:50 PM",
      "commitNameOld": "580b9555c83eda737306208c37c4ac24eab456a0",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 9.25,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void setSeed(final int[] seed) {\n    if (seed \u003d\u003d null) {\n        setSeed(System.currentTimeMillis());\n        return;\n    }\n    System.arraycopy(seed, 0, v, 0, Math.min(seed.length, v.length));\n    if (seed.length \u003c v.length) {\n        for (int i \u003d seed.length; i \u003c v.length; ++i) {\n            final long l \u003d v[i - seed.length];\n            v[i] \u003d (int) ((1812433253l * (l ^ (l \u003e\u003e 30)) + i) \u0026 0xffffffffL);\n        }\n    }\n    index \u003d 0;\n}",
      "path": "src/main/java/org/apache/commons/math/random/AbstractWell.java",
      "functionStartLine": 152,
      "functionName": "setSeed",
      "functionAnnotation": "@Override",
      "functionDoc": "Reinitialize the generator as if just built with the given int array seed.\n\u003cp\u003eThe state of the generator is exactly the same as a new\ngenerator built with the same seed.\u003c/p\u003e\n\n@param seed the initial seed (32 bits integers array), if null\nthe seed of the generator will be related to the current time\n",
      "diff": "@@ -1,14 +1,15 @@\n+@Override\n public void setSeed(final int[] seed) {\n     if (seed \u003d\u003d null) {\n         setSeed(System.currentTimeMillis());\n         return;\n     }\n     System.arraycopy(seed, 0, v, 0, Math.min(seed.length, v.length));\n     if (seed.length \u003c v.length) {\n         for (int i \u003d seed.length; i \u003c v.length; ++i) {\n             final long l \u003d v[i - seed.length];\n             v[i] \u003d (int) ((1812433253l * (l ^ (l \u003e\u003e 30)) + i) \u0026 0xffffffffL);\n         }\n     }\n     index \u003d 0;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "",
        "newValue": "@Override"
      }
    },
    "82d2bae36cf63cd61003fc970d96cc0ee50caa56": {
      "type": "Yintroduced",
      "commitMessage": "Added François Panneton and Pierre L\u0027Ecuyer WELL random generators:\nWELL512a, WELL1024a, WELL19937a, WELL19937c, WELL44497a and WELL44497b\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@998744 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/19/10, 3:34 PM",
      "commitName": "82d2bae36cf63cd61003fc970d96cc0ee50caa56",
      "commitAuthor": "Luc Maisonobe",
      "diff": "@@ -0,0 +1,14 @@\n+public void setSeed(final int[] seed) {\n+    if (seed \u003d\u003d null) {\n+        setSeed(System.currentTimeMillis());\n+        return;\n+    }\n+    System.arraycopy(seed, 0, v, 0, Math.min(seed.length, v.length));\n+    if (seed.length \u003c v.length) {\n+        for (int i \u003d seed.length; i \u003c v.length; ++i) {\n+            final long l \u003d v[i - seed.length];\n+            v[i] \u003d (int) ((1812433253l * (l ^ (l \u003e\u003e 30)) + i) \u0026 0xffffffffL);\n+        }\n+    }\n+    index \u003d 0;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public void setSeed(final int[] seed) {\n    if (seed \u003d\u003d null) {\n        setSeed(System.currentTimeMillis());\n        return;\n    }\n    System.arraycopy(seed, 0, v, 0, Math.min(seed.length, v.length));\n    if (seed.length \u003c v.length) {\n        for (int i \u003d seed.length; i \u003c v.length; ++i) {\n            final long l \u003d v[i - seed.length];\n            v[i] \u003d (int) ((1812433253l * (l ^ (l \u003e\u003e 30)) + i) \u0026 0xffffffffL);\n        }\n    }\n    index \u003d 0;\n}",
      "path": "src/main/java/org/apache/commons/math/random/AbstractWell.java",
      "functionStartLine": 145,
      "functionName": "setSeed",
      "functionAnnotation": "",
      "functionDoc": "Reinitialize the generator as if just built with the given int array seed.\n\u003cp\u003eThe state of the generator is exactly the same as a new\ngenerator built with the same seed.\u003c/p\u003e\n\n@param seed the initial seed (32 bits integers array), if null\nthe seed of the generator will be related to the current time\n"
    }
  }
}