{
  "origin": "codeshovel",
  "repositoryName": "Math-2b",
  "repositoryPath": "/tmp/Math-2b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractIntegerDistribution.java",
  "functionName": "inverseCumulativeProbability",
  "functionId": "inverseCumulativeProbability___p-double(modifiers-final)",
  "sourceFilePath": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
  "functionAnnotation": "",
  "functionDoc": "@inheritDoc}\n\nThe default implementation returns\n\u003cul\u003e\n\u003cli\u003e{@link #getSupportLowerBound()} for {@code p \u003d 0},\u003c/li\u003e\n\u003cli\u003e{@link #getSupportUpperBound()} for {@code p \u003d 1}, and\u003c/li\u003e\n\u003cli\u003e{@link #solveInverseCumulativeProbability(double, int, int)} for\n    {@code 0 \u003c p \u003c 1}.\u003c/li\u003e\n\u003c/ul\u003e\n",
  "functionStartLine": 100,
  "functionEndLine": 143,
  "numCommitsSeen": 65,
  "timeTaken": 13654,
  "changeHistory": [
    "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd",
    "711d6b94a120d413e9d8bd21bb26ec7d0aeecc39",
    "b7c6f9c6616bf63d910b00796169b288c0af1b42",
    "3f0b2ae731c85b184f2bc569aad5557c7bbfa822",
    "7491d6d38627a566c09a4556c567f76f329803b0",
    "120e9f5229c0e1f27788603fe95dc8a43f686ac9",
    "1eaea0b549f685bd416cef68faa3a137b9bb3519",
    "fcabfb5a821e31e42aa15740ebc7d740e689819f",
    "bd345d954b85ef8eb3867c5044f933e34df0c124",
    "26dac5a0e7fc9c6be9571b3e71a15d8502480d96",
    "d6a438e931412713e99624cf9ed74470f1040184",
    "e497d61c834d1ced0291fc431096b2c8a0546d0d",
    "5fa559b2cfc336442b8fabffdbdb136f67e15d89",
    "f25e3602099eeb8ccea425f9bb5b841905085436",
    "206201617aae648e12f63d4ab8aa9751157e7e63",
    "8d825e475b702a65e1568590161bea6bc8f0103f",
    "4c47502d072d5fb1192f6fae88b6d98e69128eab",
    "e6212e7d1802d4d0133fd545f1190594aa69b09f",
    "83caf3972c8f49953e0e31e12542f57b7728f9f4",
    "d1916458812f417874b0886ed64654bb6a0b8224",
    "0a904461932f2c0455611e77ec6a8d8aced2980b"
  ],
  "changeHistoryShort": {
    "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd": "Ymovefromfile",
    "711d6b94a120d413e9d8bd21bb26ec7d0aeecc39": "Ymultichange(Yexceptionschange,Ybodychange,Ydocchange)",
    "b7c6f9c6616bf63d910b00796169b288c0af1b42": "Ydocchange",
    "3f0b2ae731c85b184f2bc569aad5557c7bbfa822": "Ymultichange(Yexceptionschange,Ydocchange)",
    "7491d6d38627a566c09a4556c567f76f329803b0": "Ydocchange",
    "120e9f5229c0e1f27788603fe95dc8a43f686ac9": "Ymultichange(Ybodychange,Ydocchange)",
    "1eaea0b549f685bd416cef68faa3a137b9bb3519": "Ybodychange",
    "fcabfb5a821e31e42aa15740ebc7d740e689819f": "Ybodychange",
    "bd345d954b85ef8eb3867c5044f933e34df0c124": "Ybodychange",
    "26dac5a0e7fc9c6be9571b3e71a15d8502480d96": "Yformatchange",
    "d6a438e931412713e99624cf9ed74470f1040184": "Yfilerename",
    "e497d61c834d1ced0291fc431096b2c8a0546d0d": "Ybodychange",
    "5fa559b2cfc336442b8fabffdbdb136f67e15d89": "Ymultichange(Yfilerename,Ydocchange)",
    "f25e3602099eeb8ccea425f9bb5b841905085436": "Ymultichange(Ybodychange,Ydocchange)",
    "206201617aae648e12f63d4ab8aa9751157e7e63": "Ydocchange",
    "8d825e475b702a65e1568590161bea6bc8f0103f": "Ydocchange",
    "4c47502d072d5fb1192f6fae88b6d98e69128eab": "Ymultichange(Ybodychange,Ydocchange)",
    "e6212e7d1802d4d0133fd545f1190594aa69b09f": "Ydocchange",
    "83caf3972c8f49953e0e31e12542f57b7728f9f4": "Ymultichange(Yrename,Ybodychange)",
    "d1916458812f417874b0886ed64654bb6a0b8224": "Yexceptionschange",
    "0a904461932f2c0455611e77ec6a8d8aced2980b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd": {
      "type": "Ymovefromfile",
      "commitMessage": "MATH-444\nBase package name change: \"o.a.c.math\" -\u003e \"o.a.c.math3\"\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1244107 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/14/12, 8:17 AM",
      "commitName": "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd",
      "commitAuthor": "Gilles Sadowski",
      "commitDateOld": "2/14/12, 6:34 AM",
      "commitNameOld": "53257329dd394be1333b38bae787bf0cf19dc900",
      "commitAuthorOld": "Gilles Sadowski",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public int inverseCumulativeProbability(final double p) throws OutOfRangeException {\n    if (p \u003c 0.0 || p \u003e 1.0) {\n        throw new OutOfRangeException(p, 0, 1);\n    }\n    int lower \u003d getSupportLowerBound();\n    if (p \u003d\u003d 0.0) {\n        return lower;\n    }\n    if (lower \u003d\u003d Integer.MIN_VALUE) {\n        if (checkedCumulativeProbability(lower) \u003e\u003d p) {\n            return lower;\n        }\n    } else {\n        lower -\u003d 1;\n    }\n    int upper \u003d getSupportUpperBound();\n    if (p \u003d\u003d 1.0) {\n        return upper;\n    }\n    final double mu \u003d getNumericalMean();\n    final double sigma \u003d FastMath.sqrt(getNumericalVariance());\n    final boolean chebyshevApplies \u003d !(Double.isInfinite(mu) || Double.isNaN(mu) || Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma \u003d\u003d 0.0);\n    if (chebyshevApplies) {\n        double k \u003d FastMath.sqrt((1.0 - p) / p);\n        double tmp \u003d mu - k * sigma;\n        if (tmp \u003e lower) {\n            lower \u003d ((int) Math.ceil(tmp)) - 1;\n        }\n        k \u003d 1.0 / k;\n        tmp \u003d mu + k * sigma;\n        if (tmp \u003c upper) {\n            upper \u003d ((int) Math.ceil(tmp)) - 1;\n        }\n    }\n    return solveInverseCumulativeProbability(p, lower, upper);\n}",
      "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
      "functionStartLine": 74,
      "functionName": "inverseCumulativeProbability",
      "functionAnnotation": "",
      "functionDoc": "@inheritDoc}\n\nThe default implementation returns\n\u003cul\u003e\n\u003cli\u003e{@link #getSupportLowerBound()} for {@code p \u003d 0},\u003c/li\u003e\n\u003cli\u003e{@link #getSupportUpperBound()} for {@code p \u003d 1}, and\u003c/li\u003e\n\u003cli\u003e{@link #solveInverseCumulativeProbability(double, int, int)} for\n    {@code 0 \u003c p \u003c 1}.\u003c/li\u003e\n\u003c/ul\u003e\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java",
        "newPath": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "oldMethodName": "inverseCumulativeProbability",
        "newMethodName": "inverseCumulativeProbability"
      }
    },
    "711d6b94a120d413e9d8bd21bb26ec7d0aeecc39": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange,Ydocchange)",
      "commitMessage": "Modifications to the hierarchy of distributions, according to MATH-692. Patch contributed by Christian Winter.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1226041 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/30/11, 9:18 PM",
      "commitName": "711d6b94a120d413e9d8bd21bb26ec7d0aeecc39",
      "commitAuthor": "Sebastien Brisard",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "Modifications to the hierarchy of distributions, according to MATH-692. Patch contributed by Christian Winter.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1226041 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/30/11, 9:18 PM",
          "commitName": "711d6b94a120d413e9d8bd21bb26ec7d0aeecc39",
          "commitAuthor": "Sebastien Brisard",
          "commitDateOld": "12/3/11, 10:23 AM",
          "commitNameOld": "af3fffb74b6e2e35548a9519732077652fe89bb4",
          "commitAuthorOld": "Sebastien Brisard",
          "daysBetweenCommits": 27.46,
          "commitsBetweenForRepo": 41,
          "commitsBetweenForFile": 1,
          "actualSource": "public int inverseCumulativeProbability(final double p) throws OutOfRangeException {\n    if (p \u003c 0.0 || p \u003e 1.0) {\n        throw new OutOfRangeException(p, 0, 1);\n    }\n    int lower \u003d getSupportLowerBound();\n    if (p \u003d\u003d 0.0) {\n        return lower;\n    }\n    if (lower \u003d\u003d Integer.MIN_VALUE) {\n        if (checkedCumulativeProbability(lower) \u003e\u003d p) {\n            return lower;\n        }\n    } else {\n        lower -\u003d 1;\n    }\n    int upper \u003d getSupportUpperBound();\n    if (p \u003d\u003d 1.0) {\n        return upper;\n    }\n    final double mu \u003d getNumericalMean();\n    final double sigma \u003d FastMath.sqrt(getNumericalVariance());\n    final boolean chebyshevApplies \u003d !(Double.isInfinite(mu) || Double.isNaN(mu) || Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma \u003d\u003d 0.0);\n    if (chebyshevApplies) {\n        double k \u003d FastMath.sqrt((1.0 - p) / p);\n        double tmp \u003d mu - k * sigma;\n        if (tmp \u003e lower) {\n            lower \u003d ((int) Math.ceil(tmp)) - 1;\n        }\n        k \u003d 1.0 / k;\n        tmp \u003d mu + k * sigma;\n        if (tmp \u003c upper) {\n            upper \u003d ((int) Math.ceil(tmp)) - 1;\n        }\n    }\n    return solveInverseCumulativeProbability(p, lower, upper);\n}",
          "path": "src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java",
          "functionStartLine": 74,
          "functionName": "inverseCumulativeProbability",
          "functionAnnotation": "",
          "functionDoc": "@inheritDoc}\n\nThe default implementation returns\n\u003cul\u003e\n\u003cli\u003e{@link #getSupportLowerBound()} for {@code p \u003d 0},\u003c/li\u003e\n\u003cli\u003e{@link #getSupportUpperBound()} for {@code p \u003d 1}, and\u003c/li\u003e\n\u003cli\u003e{@link #solveInverseCumulativeProbability(double, int, int)} for\n    {@code 0 \u003c p \u003c 1}.\u003c/li\u003e\n\u003c/ul\u003e\n",
          "diff": "@@ -1,31 +1,36 @@\n-public int inverseCumulativeProbability(final double p) {\n-    if (p \u003c 0 || p \u003e 1) {\n+public int inverseCumulativeProbability(final double p) throws OutOfRangeException {\n+    if (p \u003c 0.0 || p \u003e 1.0) {\n         throw new OutOfRangeException(p, 0, 1);\n     }\n-    int x0 \u003d getDomainLowerBound(p);\n-    int x1 \u003d getDomainUpperBound(p);\n-    double pm;\n-    while (x0 \u003c x1) {\n-        int xm \u003d x0 + (x1 - x0) / 2;\n-        pm \u003d checkedCumulativeProbability(xm);\n-        if (pm \u003e p) {\n-            if (xm \u003d\u003d x1) {\n-                --x1;\n-            } else {\n-                x1 \u003d xm;\n-            }\n-        } else {\n-            if (xm \u003d\u003d x0) {\n-                ++x0;\n-            } else {\n-                x0 \u003d xm;\n-            }\n+    int lower \u003d getSupportLowerBound();\n+    if (p \u003d\u003d 0.0) {\n+        return lower;\n+    }\n+    if (lower \u003d\u003d Integer.MIN_VALUE) {\n+        if (checkedCumulativeProbability(lower) \u003e\u003d p) {\n+            return lower;\n+        }\n+    } else {\n+        lower -\u003d 1;\n+    }\n+    int upper \u003d getSupportUpperBound();\n+    if (p \u003d\u003d 1.0) {\n+        return upper;\n+    }\n+    final double mu \u003d getNumericalMean();\n+    final double sigma \u003d FastMath.sqrt(getNumericalVariance());\n+    final boolean chebyshevApplies \u003d !(Double.isInfinite(mu) || Double.isNaN(mu) || Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma \u003d\u003d 0.0);\n+    if (chebyshevApplies) {\n+        double k \u003d FastMath.sqrt((1.0 - p) / p);\n+        double tmp \u003d mu - k * sigma;\n+        if (tmp \u003e lower) {\n+            lower \u003d ((int) Math.ceil(tmp)) - 1;\n+        }\n+        k \u003d 1.0 / k;\n+        tmp \u003d mu + k * sigma;\n+        if (tmp \u003c upper) {\n+            upper \u003d ((int) Math.ceil(tmp)) - 1;\n         }\n     }\n-    pm \u003d checkedCumulativeProbability(x0);\n-    while (pm \u003e p) {\n-        --x0;\n-        pm \u003d checkedCumulativeProbability(x0);\n-    }\n-    return x0;\n+    return solveInverseCumulativeProbability(p, lower, upper);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[OutOfRangeException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Modifications to the hierarchy of distributions, according to MATH-692. Patch contributed by Christian Winter.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1226041 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/30/11, 9:18 PM",
          "commitName": "711d6b94a120d413e9d8bd21bb26ec7d0aeecc39",
          "commitAuthor": "Sebastien Brisard",
          "commitDateOld": "12/3/11, 10:23 AM",
          "commitNameOld": "af3fffb74b6e2e35548a9519732077652fe89bb4",
          "commitAuthorOld": "Sebastien Brisard",
          "daysBetweenCommits": 27.46,
          "commitsBetweenForRepo": 41,
          "commitsBetweenForFile": 1,
          "actualSource": "public int inverseCumulativeProbability(final double p) throws OutOfRangeException {\n    if (p \u003c 0.0 || p \u003e 1.0) {\n        throw new OutOfRangeException(p, 0, 1);\n    }\n    int lower \u003d getSupportLowerBound();\n    if (p \u003d\u003d 0.0) {\n        return lower;\n    }\n    if (lower \u003d\u003d Integer.MIN_VALUE) {\n        if (checkedCumulativeProbability(lower) \u003e\u003d p) {\n            return lower;\n        }\n    } else {\n        lower -\u003d 1;\n    }\n    int upper \u003d getSupportUpperBound();\n    if (p \u003d\u003d 1.0) {\n        return upper;\n    }\n    final double mu \u003d getNumericalMean();\n    final double sigma \u003d FastMath.sqrt(getNumericalVariance());\n    final boolean chebyshevApplies \u003d !(Double.isInfinite(mu) || Double.isNaN(mu) || Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma \u003d\u003d 0.0);\n    if (chebyshevApplies) {\n        double k \u003d FastMath.sqrt((1.0 - p) / p);\n        double tmp \u003d mu - k * sigma;\n        if (tmp \u003e lower) {\n            lower \u003d ((int) Math.ceil(tmp)) - 1;\n        }\n        k \u003d 1.0 / k;\n        tmp \u003d mu + k * sigma;\n        if (tmp \u003c upper) {\n            upper \u003d ((int) Math.ceil(tmp)) - 1;\n        }\n    }\n    return solveInverseCumulativeProbability(p, lower, upper);\n}",
          "path": "src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java",
          "functionStartLine": 74,
          "functionName": "inverseCumulativeProbability",
          "functionAnnotation": "",
          "functionDoc": "@inheritDoc}\n\nThe default implementation returns\n\u003cul\u003e\n\u003cli\u003e{@link #getSupportLowerBound()} for {@code p \u003d 0},\u003c/li\u003e\n\u003cli\u003e{@link #getSupportUpperBound()} for {@code p \u003d 1}, and\u003c/li\u003e\n\u003cli\u003e{@link #solveInverseCumulativeProbability(double, int, int)} for\n    {@code 0 \u003c p \u003c 1}.\u003c/li\u003e\n\u003c/ul\u003e\n",
          "diff": "@@ -1,31 +1,36 @@\n-public int inverseCumulativeProbability(final double p) {\n-    if (p \u003c 0 || p \u003e 1) {\n+public int inverseCumulativeProbability(final double p) throws OutOfRangeException {\n+    if (p \u003c 0.0 || p \u003e 1.0) {\n         throw new OutOfRangeException(p, 0, 1);\n     }\n-    int x0 \u003d getDomainLowerBound(p);\n-    int x1 \u003d getDomainUpperBound(p);\n-    double pm;\n-    while (x0 \u003c x1) {\n-        int xm \u003d x0 + (x1 - x0) / 2;\n-        pm \u003d checkedCumulativeProbability(xm);\n-        if (pm \u003e p) {\n-            if (xm \u003d\u003d x1) {\n-                --x1;\n-            } else {\n-                x1 \u003d xm;\n-            }\n-        } else {\n-            if (xm \u003d\u003d x0) {\n-                ++x0;\n-            } else {\n-                x0 \u003d xm;\n-            }\n+    int lower \u003d getSupportLowerBound();\n+    if (p \u003d\u003d 0.0) {\n+        return lower;\n+    }\n+    if (lower \u003d\u003d Integer.MIN_VALUE) {\n+        if (checkedCumulativeProbability(lower) \u003e\u003d p) {\n+            return lower;\n+        }\n+    } else {\n+        lower -\u003d 1;\n+    }\n+    int upper \u003d getSupportUpperBound();\n+    if (p \u003d\u003d 1.0) {\n+        return upper;\n+    }\n+    final double mu \u003d getNumericalMean();\n+    final double sigma \u003d FastMath.sqrt(getNumericalVariance());\n+    final boolean chebyshevApplies \u003d !(Double.isInfinite(mu) || Double.isNaN(mu) || Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma \u003d\u003d 0.0);\n+    if (chebyshevApplies) {\n+        double k \u003d FastMath.sqrt((1.0 - p) / p);\n+        double tmp \u003d mu - k * sigma;\n+        if (tmp \u003e lower) {\n+            lower \u003d ((int) Math.ceil(tmp)) - 1;\n+        }\n+        k \u003d 1.0 / k;\n+        tmp \u003d mu + k * sigma;\n+        if (tmp \u003c upper) {\n+            upper \u003d ((int) Math.ceil(tmp)) - 1;\n         }\n     }\n-    pm \u003d checkedCumulativeProbability(x0);\n-    while (pm \u003e p) {\n-        --x0;\n-        pm \u003d checkedCumulativeProbability(x0);\n-    }\n-    return x0;\n+    return solveInverseCumulativeProbability(p, lower, upper);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Modifications to the hierarchy of distributions, according to MATH-692. Patch contributed by Christian Winter.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1226041 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/30/11, 9:18 PM",
          "commitName": "711d6b94a120d413e9d8bd21bb26ec7d0aeecc39",
          "commitAuthor": "Sebastien Brisard",
          "commitDateOld": "12/3/11, 10:23 AM",
          "commitNameOld": "af3fffb74b6e2e35548a9519732077652fe89bb4",
          "commitAuthorOld": "Sebastien Brisard",
          "daysBetweenCommits": 27.46,
          "commitsBetweenForRepo": 41,
          "commitsBetweenForFile": 1,
          "actualSource": "public int inverseCumulativeProbability(final double p) throws OutOfRangeException {\n    if (p \u003c 0.0 || p \u003e 1.0) {\n        throw new OutOfRangeException(p, 0, 1);\n    }\n    int lower \u003d getSupportLowerBound();\n    if (p \u003d\u003d 0.0) {\n        return lower;\n    }\n    if (lower \u003d\u003d Integer.MIN_VALUE) {\n        if (checkedCumulativeProbability(lower) \u003e\u003d p) {\n            return lower;\n        }\n    } else {\n        lower -\u003d 1;\n    }\n    int upper \u003d getSupportUpperBound();\n    if (p \u003d\u003d 1.0) {\n        return upper;\n    }\n    final double mu \u003d getNumericalMean();\n    final double sigma \u003d FastMath.sqrt(getNumericalVariance());\n    final boolean chebyshevApplies \u003d !(Double.isInfinite(mu) || Double.isNaN(mu) || Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma \u003d\u003d 0.0);\n    if (chebyshevApplies) {\n        double k \u003d FastMath.sqrt((1.0 - p) / p);\n        double tmp \u003d mu - k * sigma;\n        if (tmp \u003e lower) {\n            lower \u003d ((int) Math.ceil(tmp)) - 1;\n        }\n        k \u003d 1.0 / k;\n        tmp \u003d mu + k * sigma;\n        if (tmp \u003c upper) {\n            upper \u003d ((int) Math.ceil(tmp)) - 1;\n        }\n    }\n    return solveInverseCumulativeProbability(p, lower, upper);\n}",
          "path": "src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java",
          "functionStartLine": 74,
          "functionName": "inverseCumulativeProbability",
          "functionAnnotation": "",
          "functionDoc": "@inheritDoc}\n\nThe default implementation returns\n\u003cul\u003e\n\u003cli\u003e{@link #getSupportLowerBound()} for {@code p \u003d 0},\u003c/li\u003e\n\u003cli\u003e{@link #getSupportUpperBound()} for {@code p \u003d 1}, and\u003c/li\u003e\n\u003cli\u003e{@link #solveInverseCumulativeProbability(double, int, int)} for\n    {@code 0 \u003c p \u003c 1}.\u003c/li\u003e\n\u003c/ul\u003e\n",
          "diff": "@@ -1,31 +1,36 @@\n-public int inverseCumulativeProbability(final double p) {\n-    if (p \u003c 0 || p \u003e 1) {\n+public int inverseCumulativeProbability(final double p) throws OutOfRangeException {\n+    if (p \u003c 0.0 || p \u003e 1.0) {\n         throw new OutOfRangeException(p, 0, 1);\n     }\n-    int x0 \u003d getDomainLowerBound(p);\n-    int x1 \u003d getDomainUpperBound(p);\n-    double pm;\n-    while (x0 \u003c x1) {\n-        int xm \u003d x0 + (x1 - x0) / 2;\n-        pm \u003d checkedCumulativeProbability(xm);\n-        if (pm \u003e p) {\n-            if (xm \u003d\u003d x1) {\n-                --x1;\n-            } else {\n-                x1 \u003d xm;\n-            }\n-        } else {\n-            if (xm \u003d\u003d x0) {\n-                ++x0;\n-            } else {\n-                x0 \u003d xm;\n-            }\n+    int lower \u003d getSupportLowerBound();\n+    if (p \u003d\u003d 0.0) {\n+        return lower;\n+    }\n+    if (lower \u003d\u003d Integer.MIN_VALUE) {\n+        if (checkedCumulativeProbability(lower) \u003e\u003d p) {\n+            return lower;\n+        }\n+    } else {\n+        lower -\u003d 1;\n+    }\n+    int upper \u003d getSupportUpperBound();\n+    if (p \u003d\u003d 1.0) {\n+        return upper;\n+    }\n+    final double mu \u003d getNumericalMean();\n+    final double sigma \u003d FastMath.sqrt(getNumericalVariance());\n+    final boolean chebyshevApplies \u003d !(Double.isInfinite(mu) || Double.isNaN(mu) || Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma \u003d\u003d 0.0);\n+    if (chebyshevApplies) {\n+        double k \u003d FastMath.sqrt((1.0 - p) / p);\n+        double tmp \u003d mu - k * sigma;\n+        if (tmp \u003e lower) {\n+            lower \u003d ((int) Math.ceil(tmp)) - 1;\n+        }\n+        k \u003d 1.0 / k;\n+        tmp \u003d mu + k * sigma;\n+        if (tmp \u003c upper) {\n+            upper \u003d ((int) Math.ceil(tmp)) - 1;\n         }\n     }\n-    pm \u003d checkedCumulativeProbability(x0);\n-    while (pm \u003e p) {\n-        --x0;\n-        pm \u003d checkedCumulativeProbability(x0);\n-    }\n-    return x0;\n+    return solveInverseCumulativeProbability(p, lower, upper);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "@inheritDoc}\n",
            "newValue": "@inheritDoc}\n\nThe default implementation returns\n\u003cul\u003e\n\u003cli\u003e{@link #getSupportLowerBound()} for {@code p \u003d 0},\u003c/li\u003e\n\u003cli\u003e{@link #getSupportUpperBound()} for {@code p \u003d 1}, and\u003c/li\u003e\n\u003cli\u003e{@link #solveInverseCumulativeProbability(double, int, int)} for\n    {@code 0 \u003c p \u003c 1}.\u003c/li\u003e\n\u003c/ul\u003e\n"
          }
        }
      ]
    },
    "b7c6f9c6616bf63d910b00796169b288c0af1b42": {
      "type": "Ydocchange",
      "commitMessage": "Patch contributed by Christian Winter (MATH-703).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1209836 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/2/11, 10:17 PM",
      "commitName": "b7c6f9c6616bf63d910b00796169b288c0af1b42",
      "commitAuthor": "Sebastien Brisard",
      "commitDateOld": "10/2/11, 9:36 PM",
      "commitNameOld": "3f0b2ae731c85b184f2bc569aad5557c7bbfa822",
      "commitAuthorOld": "Phil Steitz",
      "daysBetweenCommits": 61.07,
      "commitsBetweenForRepo": 209,
      "commitsBetweenForFile": 1,
      "actualSource": "public int inverseCumulativeProbability(final double p) {\n    if (p \u003c 0 || p \u003e 1) {\n        throw new OutOfRangeException(p, 0, 1);\n    }\n    int x0 \u003d getDomainLowerBound(p);\n    int x1 \u003d getDomainUpperBound(p);\n    double pm;\n    while (x0 \u003c x1) {\n        int xm \u003d x0 + (x1 - x0) / 2;\n        pm \u003d checkedCumulativeProbability(xm);\n        if (pm \u003e p) {\n            if (xm \u003d\u003d x1) {\n                --x1;\n            } else {\n                x1 \u003d xm;\n            }\n        } else {\n            if (xm \u003d\u003d x0) {\n                ++x0;\n            } else {\n                x0 \u003d xm;\n            }\n        }\n    }\n    pm \u003d checkedCumulativeProbability(x0);\n    while (pm \u003e p) {\n        --x0;\n        pm \u003d checkedCumulativeProbability(x0);\n    }\n    return x0;\n}",
      "path": "src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java",
      "functionStartLine": 64,
      "functionName": "inverseCumulativeProbability",
      "functionAnnotation": "",
      "functionDoc": "@inheritDoc}\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "For a random variable {@code X} whose values are distributed according\nto this distribution, this method returns the largest {@code x}, such\nthat {@code P(X \u003c\u003d x) \u003c\u003d p}.\n\n@param p Desired probability.\n@return the largest {@code x} such that {@code P(X \u003c x) \u003c\u003d p}.\n@throws OutOfRangeException if {@code p \u003c 0} or {@code p \u003e 1}.\n",
        "newValue": "@inheritDoc}\n"
      }
    },
    "3f0b2ae731c85b184f2bc569aad5557c7bbfa822": {
      "type": "Ymultichange(Yexceptionschange,Ydocchange)",
      "commitMessage": "Eliminated MathException from distribution interfaces and impls.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1178295 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/2/11, 9:36 PM",
      "commitName": "3f0b2ae731c85b184f2bc569aad5557c7bbfa822",
      "commitAuthor": "Phil Steitz",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "Eliminated MathException from distribution interfaces and impls.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1178295 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/2/11, 9:36 PM",
          "commitName": "3f0b2ae731c85b184f2bc569aad5557c7bbfa822",
          "commitAuthor": "Phil Steitz",
          "commitDateOld": "6/12/11, 10:19 AM",
          "commitNameOld": "7ed446aecd4b106a53af8bb236c576b896411c6e",
          "commitAuthorOld": "Phil Steitz",
          "daysBetweenCommits": 112.47,
          "commitsBetweenForRepo": 389,
          "commitsBetweenForFile": 1,
          "actualSource": "public int inverseCumulativeProbability(final double p) {\n    if (p \u003c 0 || p \u003e 1) {\n        throw new OutOfRangeException(p, 0, 1);\n    }\n    int x0 \u003d getDomainLowerBound(p);\n    int x1 \u003d getDomainUpperBound(p);\n    double pm;\n    while (x0 \u003c x1) {\n        int xm \u003d x0 + (x1 - x0) / 2;\n        pm \u003d checkedCumulativeProbability(xm);\n        if (pm \u003e p) {\n            if (xm \u003d\u003d x1) {\n                --x1;\n            } else {\n                x1 \u003d xm;\n            }\n        } else {\n            if (xm \u003d\u003d x0) {\n                ++x0;\n            } else {\n                x0 \u003d xm;\n            }\n        }\n    }\n    pm \u003d checkedCumulativeProbability(x0);\n    while (pm \u003e p) {\n        --x0;\n        pm \u003d checkedCumulativeProbability(x0);\n    }\n    return x0;\n}",
          "path": "src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java",
          "functionStartLine": 151,
          "functionName": "inverseCumulativeProbability",
          "functionAnnotation": "",
          "functionDoc": "For a random variable {@code X} whose values are distributed according\nto this distribution, this method returns the largest {@code x}, such\nthat {@code P(X \u003c\u003d x) \u003c\u003d p}.\n\n@param p Desired probability.\n@return the largest {@code x} such that {@code P(X \u003c x) \u003c\u003d p}.\n@throws OutOfRangeException if {@code p \u003c 0} or {@code p \u003e 1}.\n",
          "diff": "@@ -1,31 +1,31 @@\n-public int inverseCumulativeProbability(final double p) throws MathException {\n+public int inverseCumulativeProbability(final double p) {\n     if (p \u003c 0 || p \u003e 1) {\n         throw new OutOfRangeException(p, 0, 1);\n     }\n     int x0 \u003d getDomainLowerBound(p);\n     int x1 \u003d getDomainUpperBound(p);\n     double pm;\n     while (x0 \u003c x1) {\n         int xm \u003d x0 + (x1 - x0) / 2;\n         pm \u003d checkedCumulativeProbability(xm);\n         if (pm \u003e p) {\n             if (xm \u003d\u003d x1) {\n                 --x1;\n             } else {\n                 x1 \u003d xm;\n             }\n         } else {\n             if (xm \u003d\u003d x0) {\n                 ++x0;\n             } else {\n                 x0 \u003d xm;\n             }\n         }\n     }\n     pm \u003d checkedCumulativeProbability(x0);\n     while (pm \u003e p) {\n         --x0;\n         pm \u003d checkedCumulativeProbability(x0);\n     }\n     return x0;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[MathException]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Eliminated MathException from distribution interfaces and impls.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1178295 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/2/11, 9:36 PM",
          "commitName": "3f0b2ae731c85b184f2bc569aad5557c7bbfa822",
          "commitAuthor": "Phil Steitz",
          "commitDateOld": "6/12/11, 10:19 AM",
          "commitNameOld": "7ed446aecd4b106a53af8bb236c576b896411c6e",
          "commitAuthorOld": "Phil Steitz",
          "daysBetweenCommits": 112.47,
          "commitsBetweenForRepo": 389,
          "commitsBetweenForFile": 1,
          "actualSource": "public int inverseCumulativeProbability(final double p) {\n    if (p \u003c 0 || p \u003e 1) {\n        throw new OutOfRangeException(p, 0, 1);\n    }\n    int x0 \u003d getDomainLowerBound(p);\n    int x1 \u003d getDomainUpperBound(p);\n    double pm;\n    while (x0 \u003c x1) {\n        int xm \u003d x0 + (x1 - x0) / 2;\n        pm \u003d checkedCumulativeProbability(xm);\n        if (pm \u003e p) {\n            if (xm \u003d\u003d x1) {\n                --x1;\n            } else {\n                x1 \u003d xm;\n            }\n        } else {\n            if (xm \u003d\u003d x0) {\n                ++x0;\n            } else {\n                x0 \u003d xm;\n            }\n        }\n    }\n    pm \u003d checkedCumulativeProbability(x0);\n    while (pm \u003e p) {\n        --x0;\n        pm \u003d checkedCumulativeProbability(x0);\n    }\n    return x0;\n}",
          "path": "src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java",
          "functionStartLine": 151,
          "functionName": "inverseCumulativeProbability",
          "functionAnnotation": "",
          "functionDoc": "For a random variable {@code X} whose values are distributed according\nto this distribution, this method returns the largest {@code x}, such\nthat {@code P(X \u003c\u003d x) \u003c\u003d p}.\n\n@param p Desired probability.\n@return the largest {@code x} such that {@code P(X \u003c x) \u003c\u003d p}.\n@throws OutOfRangeException if {@code p \u003c 0} or {@code p \u003e 1}.\n",
          "diff": "@@ -1,31 +1,31 @@\n-public int inverseCumulativeProbability(final double p) throws MathException {\n+public int inverseCumulativeProbability(final double p) {\n     if (p \u003c 0 || p \u003e 1) {\n         throw new OutOfRangeException(p, 0, 1);\n     }\n     int x0 \u003d getDomainLowerBound(p);\n     int x1 \u003d getDomainUpperBound(p);\n     double pm;\n     while (x0 \u003c x1) {\n         int xm \u003d x0 + (x1 - x0) / 2;\n         pm \u003d checkedCumulativeProbability(xm);\n         if (pm \u003e p) {\n             if (xm \u003d\u003d x1) {\n                 --x1;\n             } else {\n                 x1 \u003d xm;\n             }\n         } else {\n             if (xm \u003d\u003d x0) {\n                 ++x0;\n             } else {\n                 x0 \u003d xm;\n             }\n         }\n     }\n     pm \u003d checkedCumulativeProbability(x0);\n     while (pm \u003e p) {\n         --x0;\n         pm \u003d checkedCumulativeProbability(x0);\n     }\n     return x0;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "For a random variable {@code X} whose values are distributed according\nto this distribution, this method returns the largest {@code x}, such\nthat {@code P(X \u003c\u003d x) \u003c\u003d p}.\n\n@param p Desired probability.\n@return the largest {@code x} such that {@code P(X \u003c x) \u003c\u003d p}.\n@throws MathException if the inverse cumulative probability can not be\ncomputed due to convergence or other numerical errors.\n@throws OutOfRangeException if {@code p \u003c 0} or {@code p \u003e 1}.\n",
            "newValue": "For a random variable {@code X} whose values are distributed according\nto this distribution, this method returns the largest {@code x}, such\nthat {@code P(X \u003c\u003d x) \u003c\u003d p}.\n\n@param p Desired probability.\n@return the largest {@code x} such that {@code P(X \u003c x) \u003c\u003d p}.\n@throws OutOfRangeException if {@code p \u003c 0} or {@code p \u003e 1}.\n"
          }
        }
      ]
    },
    "7491d6d38627a566c09a4556c567f76f329803b0": {
      "type": "Ydocchange",
      "commitMessage": "Fixed error in javadoc.  JIRA: MATH-540.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1134866 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/11/11, 10:56 PM",
      "commitName": "7491d6d38627a566c09a4556c567f76f329803b0",
      "commitAuthor": "Phil Steitz",
      "commitDateOld": "6/3/11, 1:49 PM",
      "commitNameOld": "98e22d778b3a886be253638b9a6b7ec075c3d62d",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 8.38,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "public int inverseCumulativeProbability(final double p) throws MathException {\n    if (p \u003c 0 || p \u003e 1) {\n        throw new OutOfRangeException(p, 0, 1);\n    }\n    int x0 \u003d getDomainLowerBound(p);\n    int x1 \u003d getDomainUpperBound(p);\n    double pm;\n    while (x0 \u003c x1) {\n        int xm \u003d x0 + (x1 - x0) / 2;\n        pm \u003d checkedCumulativeProbability(xm);\n        if (pm \u003e p) {\n            if (xm \u003d\u003d x1) {\n                --x1;\n            } else {\n                x1 \u003d xm;\n            }\n        } else {\n            if (xm \u003d\u003d x0) {\n                ++x0;\n            } else {\n                x0 \u003d xm;\n            }\n        }\n    }\n    pm \u003d checkedCumulativeProbability(x0);\n    while (pm \u003e p) {\n        --x0;\n        pm \u003d checkedCumulativeProbability(x0);\n    }\n    return x0;\n}",
      "path": "src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java",
      "functionStartLine": 162,
      "functionName": "inverseCumulativeProbability",
      "functionAnnotation": "",
      "functionDoc": "For a random variable {@code X} whose values are distributed according\nto this distribution, this method returns the largest {@code x}, such\nthat {@code P(X \u003c\u003d x) \u003c\u003d p}.\n\n@param p Desired probability.\n@return the largest {@code x} such that {@code P(X \u003c x) \u003c\u003d p}.\n@throws MathException if the inverse cumulative probability can not be\ncomputed due to convergence or other numerical errors.\n@throws OutOfRangeException if {@code p \u003c 0} or {@code p \u003e 1}.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "For a random variable {@code X} whose values are distributed according\nto this distribution, this method returns the largest {@code x}, such\nthat {@code P(X \u003c x) \u003c p}.\n\n@param p Desired probability.\n@return the largest {@code x} such that {@code P(X \u003c x) \u003c\u003d p}.\n@throws MathException if the inverse cumulative probability can not be\ncomputed due to convergence or other numerical errors.\n@throws OutOfRangeException if {@code p \u003c 0} or {@code p \u003e 1}.\n",
        "newValue": "For a random variable {@code X} whose values are distributed according\nto this distribution, this method returns the largest {@code x}, such\nthat {@code P(X \u003c\u003d x) \u003c\u003d p}.\n\n@param p Desired probability.\n@return the largest {@code x} such that {@code P(X \u003c x) \u003c\u003d p}.\n@throws MathException if the inverse cumulative probability can not be\ncomputed due to convergence or other numerical errors.\n@throws OutOfRangeException if {@code p \u003c 0} or {@code p \u003e 1}.\n"
      }
    },
    "120e9f5229c0e1f27788603fe95dc8a43f686ac9": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Removed deprecated code in implementations of \"IntegerDistribution\".\nAdded \"final\" keyword.\nAdded \"sample\" methods to \"IntegerDistribution\" and \"ContinuousDistribution\"\ninterfaces.\nCleaned up Javadoc.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1003512 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/1/10, 5:46 AM",
      "commitName": "120e9f5229c0e1f27788603fe95dc8a43f686ac9",
      "commitAuthor": "Gilles Sadowski",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Removed deprecated code in implementations of \"IntegerDistribution\".\nAdded \"final\" keyword.\nAdded \"sample\" methods to \"IntegerDistribution\" and \"ContinuousDistribution\"\ninterfaces.\nCleaned up Javadoc.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1003512 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/1/10, 5:46 AM",
          "commitName": "120e9f5229c0e1f27788603fe95dc8a43f686ac9",
          "commitAuthor": "Gilles Sadowski",
          "commitDateOld": "8/29/10, 3:04 PM",
          "commitNameOld": "80b1e90b42a34856b61cec628fcea6633d1000cd",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 32.61,
          "commitsBetweenForRepo": 62,
          "commitsBetweenForFile": 1,
          "actualSource": "public int inverseCumulativeProbability(final double p) throws MathException {\n    if (p \u003c 0 || p \u003e 1) {\n        throw new OutOfRangeException(p, 0, 1);\n    }\n    int x0 \u003d getDomainLowerBound(p);\n    int x1 \u003d getDomainUpperBound(p);\n    double pm;\n    while (x0 \u003c x1) {\n        int xm \u003d x0 + (x1 - x0) / 2;\n        pm \u003d checkedCumulativeProbability(xm);\n        if (pm \u003e p) {\n            if (xm \u003d\u003d x1) {\n                --x1;\n            } else {\n                x1 \u003d xm;\n            }\n        } else {\n            if (xm \u003d\u003d x0) {\n                ++x0;\n            } else {\n                x0 \u003d xm;\n            }\n        }\n    }\n    pm \u003d checkedCumulativeProbability(x0);\n    while (pm \u003e p) {\n        --x0;\n        pm \u003d checkedCumulativeProbability(x0);\n    }\n    return x0;\n}",
          "path": "src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java",
          "functionStartLine": 163,
          "functionName": "inverseCumulativeProbability",
          "functionAnnotation": "",
          "functionDoc": "For a random variable {@code X} whose values are distributed according\nto this distribution, this method returns the largest {@code x}, such\nthat {@code P(X \u003c x) \u003c p}.\n\n@param p Desired probability.\n@return the largest {@code x} such that {@code P(X \u003c x) \u003c\u003d p}.\n@throws MathException if the inverse cumulative probability can not be\ncomputed due to convergence or other numerical errors.\n@throws OutOfRangeException if {@code p \u003c 0} or {@code p \u003e 1}.\n",
          "diff": "@@ -1,31 +1,31 @@\n public int inverseCumulativeProbability(final double p) throws MathException {\n-    if (p \u003c 0.0 || p \u003e 1.0) {\n-        throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.OUT_OF_RANGE_SIMPLE, p, 0.0, 1.0);\n+    if (p \u003c 0 || p \u003e 1) {\n+        throw new OutOfRangeException(p, 0, 1);\n     }\n     int x0 \u003d getDomainLowerBound(p);\n     int x1 \u003d getDomainUpperBound(p);\n     double pm;\n     while (x0 \u003c x1) {\n         int xm \u003d x0 + (x1 - x0) / 2;\n         pm \u003d checkedCumulativeProbability(xm);\n         if (pm \u003e p) {\n             if (xm \u003d\u003d x1) {\n                 --x1;\n             } else {\n                 x1 \u003d xm;\n             }\n         } else {\n             if (xm \u003d\u003d x0) {\n                 ++x0;\n             } else {\n                 x0 \u003d xm;\n             }\n         }\n     }\n     pm \u003d checkedCumulativeProbability(x0);\n     while (pm \u003e p) {\n         --x0;\n         pm \u003d checkedCumulativeProbability(x0);\n     }\n     return x0;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Removed deprecated code in implementations of \"IntegerDistribution\".\nAdded \"final\" keyword.\nAdded \"sample\" methods to \"IntegerDistribution\" and \"ContinuousDistribution\"\ninterfaces.\nCleaned up Javadoc.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1003512 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/1/10, 5:46 AM",
          "commitName": "120e9f5229c0e1f27788603fe95dc8a43f686ac9",
          "commitAuthor": "Gilles Sadowski",
          "commitDateOld": "8/29/10, 3:04 PM",
          "commitNameOld": "80b1e90b42a34856b61cec628fcea6633d1000cd",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 32.61,
          "commitsBetweenForRepo": 62,
          "commitsBetweenForFile": 1,
          "actualSource": "public int inverseCumulativeProbability(final double p) throws MathException {\n    if (p \u003c 0 || p \u003e 1) {\n        throw new OutOfRangeException(p, 0, 1);\n    }\n    int x0 \u003d getDomainLowerBound(p);\n    int x1 \u003d getDomainUpperBound(p);\n    double pm;\n    while (x0 \u003c x1) {\n        int xm \u003d x0 + (x1 - x0) / 2;\n        pm \u003d checkedCumulativeProbability(xm);\n        if (pm \u003e p) {\n            if (xm \u003d\u003d x1) {\n                --x1;\n            } else {\n                x1 \u003d xm;\n            }\n        } else {\n            if (xm \u003d\u003d x0) {\n                ++x0;\n            } else {\n                x0 \u003d xm;\n            }\n        }\n    }\n    pm \u003d checkedCumulativeProbability(x0);\n    while (pm \u003e p) {\n        --x0;\n        pm \u003d checkedCumulativeProbability(x0);\n    }\n    return x0;\n}",
          "path": "src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java",
          "functionStartLine": 163,
          "functionName": "inverseCumulativeProbability",
          "functionAnnotation": "",
          "functionDoc": "For a random variable {@code X} whose values are distributed according\nto this distribution, this method returns the largest {@code x}, such\nthat {@code P(X \u003c x) \u003c p}.\n\n@param p Desired probability.\n@return the largest {@code x} such that {@code P(X \u003c x) \u003c\u003d p}.\n@throws MathException if the inverse cumulative probability can not be\ncomputed due to convergence or other numerical errors.\n@throws OutOfRangeException if {@code p \u003c 0} or {@code p \u003e 1}.\n",
          "diff": "@@ -1,31 +1,31 @@\n public int inverseCumulativeProbability(final double p) throws MathException {\n-    if (p \u003c 0.0 || p \u003e 1.0) {\n-        throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.OUT_OF_RANGE_SIMPLE, p, 0.0, 1.0);\n+    if (p \u003c 0 || p \u003e 1) {\n+        throw new OutOfRangeException(p, 0, 1);\n     }\n     int x0 \u003d getDomainLowerBound(p);\n     int x1 \u003d getDomainUpperBound(p);\n     double pm;\n     while (x0 \u003c x1) {\n         int xm \u003d x0 + (x1 - x0) / 2;\n         pm \u003d checkedCumulativeProbability(xm);\n         if (pm \u003e p) {\n             if (xm \u003d\u003d x1) {\n                 --x1;\n             } else {\n                 x1 \u003d xm;\n             }\n         } else {\n             if (xm \u003d\u003d x0) {\n                 ++x0;\n             } else {\n                 x0 \u003d xm;\n             }\n         }\n     }\n     pm \u003d checkedCumulativeProbability(x0);\n     while (pm \u003e p) {\n         --x0;\n         pm \u003d checkedCumulativeProbability(x0);\n     }\n     return x0;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "For a random variable X whose values are distributed according\nto this distribution, this method returns the largest x, such\nthat P(X \u0026le; x) \u0026le; \u003ccode\u003ep\u003c/code\u003e.\n\n@param p the desired probability\n@return the largest x such that P(X \u0026le; x) \u003c\u003d p\n@throws MathException if the inverse cumulative probability can not be\n           computed due to convergence or other numerical errors.\n@throws IllegalArgumentException if p \u003c 0 or p \u003e 1\n",
            "newValue": "For a random variable {@code X} whose values are distributed according\nto this distribution, this method returns the largest {@code x}, such\nthat {@code P(X \u003c x) \u003c p}.\n\n@param p Desired probability.\n@return the largest {@code x} such that {@code P(X \u003c x) \u003c\u003d p}.\n@throws MathException if the inverse cumulative probability can not be\ncomputed due to convergence or other numerical errors.\n@throws OutOfRangeException if {@code p \u003c 0} or {@code p \u003e 1}.\n"
          }
        }
      ]
    },
    "1eaea0b549f685bd416cef68faa3a137b9bb3519": {
      "type": "Ybodychange",
      "commitMessage": "changed the localization mechanism for error messages. The new system is based on an enum rather than on duplicated string literals.\nJIRA: MATH-361\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@955423 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/16/10, 4:03 PM",
      "commitName": "1eaea0b549f685bd416cef68faa3a137b9bb3519",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "5/31/10, 4:39 PM",
      "commitNameOld": "f7f988679e14addf6d1dc7009fd27e9aa0a5570b",
      "commitAuthorOld": "Phil Steitz",
      "daysBetweenCommits": 15.98,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "public int inverseCumulativeProbability(final double p) throws MathException {\n    if (p \u003c 0.0 || p \u003e 1.0) {\n        throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.OUT_OF_RANGE_SIMPLE, p, 0.0, 1.0);\n    }\n    int x0 \u003d getDomainLowerBound(p);\n    int x1 \u003d getDomainUpperBound(p);\n    double pm;\n    while (x0 \u003c x1) {\n        int xm \u003d x0 + (x1 - x0) / 2;\n        pm \u003d checkedCumulativeProbability(xm);\n        if (pm \u003e p) {\n            if (xm \u003d\u003d x1) {\n                --x1;\n            } else {\n                x1 \u003d xm;\n            }\n        } else {\n            if (xm \u003d\u003d x0) {\n                ++x0;\n            } else {\n                x0 \u003d xm;\n            }\n        }\n    }\n    pm \u003d checkedCumulativeProbability(x0);\n    while (pm \u003e p) {\n        --x0;\n        pm \u003d checkedCumulativeProbability(x0);\n    }\n    return x0;\n}",
      "path": "src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java",
      "functionStartLine": 164,
      "functionName": "inverseCumulativeProbability",
      "functionAnnotation": "",
      "functionDoc": "For a random variable X whose values are distributed according\nto this distribution, this method returns the largest x, such\nthat P(X \u0026le; x) \u0026le; \u003ccode\u003ep\u003c/code\u003e.\n\n@param p the desired probability\n@return the largest x such that P(X \u0026le; x) \u003c\u003d p\n@throws MathException if the inverse cumulative probability can not be\n           computed due to convergence or other numerical errors.\n@throws IllegalArgumentException if p \u003c 0 or p \u003e 1\n",
      "diff": "@@ -1,31 +1,31 @@\n public int inverseCumulativeProbability(final double p) throws MathException {\n     if (p \u003c 0.0 || p \u003e 1.0) {\n-        throw MathRuntimeException.createIllegalArgumentException(OUT_OF_RANGE_POINT, p, 0.0, 1.0);\n+        throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.OUT_OF_RANGE_SIMPLE, p, 0.0, 1.0);\n     }\n     int x0 \u003d getDomainLowerBound(p);\n     int x1 \u003d getDomainUpperBound(p);\n     double pm;\n     while (x0 \u003c x1) {\n         int xm \u003d x0 + (x1 - x0) / 2;\n         pm \u003d checkedCumulativeProbability(xm);\n         if (pm \u003e p) {\n             if (xm \u003d\u003d x1) {\n                 --x1;\n             } else {\n                 x1 \u003d xm;\n             }\n         } else {\n             if (xm \u003d\u003d x0) {\n                 ++x0;\n             } else {\n                 x0 \u003d xm;\n             }\n         }\n     }\n     pm \u003d checkedCumulativeProbability(x0);\n     while (pm \u003e p) {\n         --x0;\n         pm \u003d checkedCumulativeProbability(x0);\n     }\n     return x0;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "fcabfb5a821e31e42aa15740ebc7d740e689819f": {
      "type": "Ybodychange",
      "commitMessage": "Resolved multiple problems leading to inaccuracy and/or failure to compute Normal, ChiSquare and \nPoisson probabilities, Erf and Gamma functions.\n\nJIRA: MATH-282\nJIRA: MATH-301\n\nSummary of changes:\n\n* BrentSolver has been changed to expose its configured absolute accuracy. This solver is used by\n  the default inverse cum implementation in AbstractContinuousDistribution and the hard-coded setting\n  (1E-6) was limiting accuracy in inverse cumulative probability estimates. AbstractContinuousDistribution\n  was changed to allow distributions to set this value and NormalDistributionImpl was changed to set it to\n  1E-9 by default and allow users to configure it via a constructor argument.\n\n* AbstractContinuousDistribution and AbstractIntegerDistribution inverseCumulativeProbability methods\n  have been modified to check for NaN values returned by cumulativeProbability and throw MathExceptions\n  when this happens.\n\n* The criteria for choosing between the Lanczos series and continued fraction expansion when computing\n  regularized gamma functions has been changed to (x \u003e\u003d a + 1). When using the series approximation\n  (regularizedGammaP), divergence to infinity is checked and when this happens, 1 is returned.\n\n* When scaling continued fractions to (try to) avoid divergence to infinity, the larger of a and b is\n  used as a scale factor and the attempt to scale is repeated up to 5 times, using successive powers\n  of the scale factor.\n\n* The maximum number of iterations used in estimating cumulative probabilities for PoissonDistributionImpl\n  has been decreased from Integer.MAX_VALUE to 10000000 and made configurable.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@920558 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/8/10, 2:57 PM",
      "commitName": "fcabfb5a821e31e42aa15740ebc7d740e689819f",
      "commitAuthor": "Phil Steitz",
      "commitDateOld": "11/29/09, 1:47 PM",
      "commitNameOld": "bd345d954b85ef8eb3867c5044f933e34df0c124",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 99.05,
      "commitsBetweenForRepo": 104,
      "commitsBetweenForFile": 1,
      "actualSource": "public int inverseCumulativeProbability(final double p) throws MathException {\n    if (p \u003c 0.0 || p \u003e 1.0) {\n        throw MathRuntimeException.createIllegalArgumentException(OUT_OF_RANGE_POINT, p, 0.0, 1.0);\n    }\n    int x0 \u003d getDomainLowerBound(p);\n    int x1 \u003d getDomainUpperBound(p);\n    double pm;\n    while (x0 \u003c x1) {\n        int xm \u003d x0 + (x1 - x0) / 2;\n        pm \u003d checkedCumulativeProbability(xm);\n        if (pm \u003e p) {\n            if (xm \u003d\u003d x1) {\n                --x1;\n            } else {\n                x1 \u003d xm;\n            }\n        } else {\n            if (xm \u003d\u003d x0) {\n                ++x0;\n            } else {\n                x0 \u003d xm;\n            }\n        }\n    }\n    pm \u003d checkedCumulativeProbability(x0);\n    while (pm \u003e p) {\n        --x0;\n        pm \u003d checkedCumulativeProbability(x0);\n    }\n    return x0;\n}",
      "path": "src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java",
      "functionStartLine": 164,
      "functionName": "inverseCumulativeProbability",
      "functionAnnotation": "",
      "functionDoc": "For a random variable X whose values are distributed according\nto this distribution, this method returns the largest x, such\nthat P(X \u0026le; x) \u0026le; \u003ccode\u003ep\u003c/code\u003e.\n\n@param p the desired probability\n@return the largest x such that P(X \u0026le; x) \u003c\u003d p\n@throws MathException if the inverse cumulative probability can not be\n           computed due to convergence or other numerical errors.\n@throws IllegalArgumentException if p \u003c 0 or p \u003e 1\n",
      "diff": "@@ -1,31 +1,31 @@\n public int inverseCumulativeProbability(final double p) throws MathException {\n     if (p \u003c 0.0 || p \u003e 1.0) {\n         throw MathRuntimeException.createIllegalArgumentException(OUT_OF_RANGE_POINT, p, 0.0, 1.0);\n     }\n     int x0 \u003d getDomainLowerBound(p);\n     int x1 \u003d getDomainUpperBound(p);\n     double pm;\n     while (x0 \u003c x1) {\n         int xm \u003d x0 + (x1 - x0) / 2;\n-        pm \u003d cumulativeProbability(xm);\n+        pm \u003d checkedCumulativeProbability(xm);\n         if (pm \u003e p) {\n             if (xm \u003d\u003d x1) {\n                 --x1;\n             } else {\n                 x1 \u003d xm;\n             }\n         } else {\n             if (xm \u003d\u003d x0) {\n                 ++x0;\n             } else {\n                 x0 \u003d xm;\n             }\n         }\n     }\n-    pm \u003d cumulativeProbability(x0);\n+    pm \u003d checkedCumulativeProbability(x0);\n     while (pm \u003e p) {\n         --x0;\n-        pm \u003d cumulativeProbability(x0);\n+        pm \u003d checkedCumulativeProbability(x0);\n     }\n     return x0;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bd345d954b85ef8eb3867c5044f933e34df0c124": {
      "type": "Ybodychange",
      "commitMessage": "replaced duplicated strings by a single static string in many classes\nthis will later allow enabling the MultipleStringLiterals rule in checkstyle\n(there are many other duplicated strings, so this cannot be enabled yet, I\u0027ll\ndo another pass on it later on)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@885278 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/29/09, 1:47 PM",
      "commitName": "bd345d954b85ef8eb3867c5044f933e34df0c124",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "9/6/09, 2:36 AM",
      "commitNameOld": "e837f7cf8601e0cd68bd946a650f4937e4d44ff6",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 84.51,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "actualSource": "public int inverseCumulativeProbability(final double p) throws MathException {\n    if (p \u003c 0.0 || p \u003e 1.0) {\n        throw MathRuntimeException.createIllegalArgumentException(OUT_OF_RANGE_POINT, p, 0.0, 1.0);\n    }\n    int x0 \u003d getDomainLowerBound(p);\n    int x1 \u003d getDomainUpperBound(p);\n    double pm;\n    while (x0 \u003c x1) {\n        int xm \u003d x0 + (x1 - x0) / 2;\n        pm \u003d cumulativeProbability(xm);\n        if (pm \u003e p) {\n            if (xm \u003d\u003d x1) {\n                --x1;\n            } else {\n                x1 \u003d xm;\n            }\n        } else {\n            if (xm \u003d\u003d x0) {\n                ++x0;\n            } else {\n                x0 \u003d xm;\n            }\n        }\n    }\n    pm \u003d cumulativeProbability(x0);\n    while (pm \u003e p) {\n        --x0;\n        pm \u003d cumulativeProbability(x0);\n    }\n    return x0;\n}",
      "path": "src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java",
      "functionStartLine": 163,
      "functionName": "inverseCumulativeProbability",
      "functionAnnotation": "",
      "functionDoc": "For a random variable X whose values are distributed according\nto this distribution, this method returns the largest x, such\nthat P(X \u0026le; x) \u0026le; \u003ccode\u003ep\u003c/code\u003e.\n\n@param p the desired probability\n@return the largest x such that P(X \u0026le; x) \u003c\u003d p\n@throws MathException if the inverse cumulative probability can not be\n           computed due to convergence or other numerical errors.\n@throws IllegalArgumentException if p \u003c 0 or p \u003e 1\n",
      "diff": "@@ -1,31 +1,31 @@\n public int inverseCumulativeProbability(final double p) throws MathException {\n     if (p \u003c 0.0 || p \u003e 1.0) {\n-        throw MathRuntimeException.createIllegalArgumentException(\"{0} out of [{1}, {2}] range\", p, 0.0, 1.0);\n+        throw MathRuntimeException.createIllegalArgumentException(OUT_OF_RANGE_POINT, p, 0.0, 1.0);\n     }\n     int x0 \u003d getDomainLowerBound(p);\n     int x1 \u003d getDomainUpperBound(p);\n     double pm;\n     while (x0 \u003c x1) {\n         int xm \u003d x0 + (x1 - x0) / 2;\n         pm \u003d cumulativeProbability(xm);\n         if (pm \u003e p) {\n             if (xm \u003d\u003d x1) {\n                 --x1;\n             } else {\n                 x1 \u003d xm;\n             }\n         } else {\n             if (xm \u003d\u003d x0) {\n                 ++x0;\n             } else {\n                 x0 \u003d xm;\n             }\n         }\n     }\n     pm \u003d cumulativeProbability(x0);\n     while (pm \u003e p) {\n         --x0;\n         pm \u003d cumulativeProbability(x0);\n     }\n     return x0;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "26dac5a0e7fc9c6be9571b3e71a15d8502480d96": {
      "type": "Yformatchange",
      "commitMessage": "Removed trailing spaces.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@811685 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/5/09, 10:36 AM",
      "commitName": "26dac5a0e7fc9c6be9571b3e71a15d8502480d96",
      "commitAuthor": "Phil Steitz",
      "commitDateOld": "8/1/09, 7:30 AM",
      "commitNameOld": "d6a438e931412713e99624cf9ed74470f1040184",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 35.13,
      "commitsBetweenForRepo": 44,
      "commitsBetweenForFile": 1,
      "actualSource": "public int inverseCumulativeProbability(final double p) throws MathException {\n    if (p \u003c 0.0 || p \u003e 1.0) {\n        throw MathRuntimeException.createIllegalArgumentException(\"{0} out of [{1}, {2}] range\", p, 0.0, 1.0);\n    }\n    int x0 \u003d getDomainLowerBound(p);\n    int x1 \u003d getDomainUpperBound(p);\n    double pm;\n    while (x0 \u003c x1) {\n        int xm \u003d x0 + (x1 - x0) / 2;\n        pm \u003d cumulativeProbability(xm);\n        if (pm \u003e p) {\n            if (xm \u003d\u003d x1) {\n                --x1;\n            } else {\n                x1 \u003d xm;\n            }\n        } else {\n            if (xm \u003d\u003d x0) {\n                ++x0;\n            } else {\n                x0 \u003d xm;\n            }\n        }\n    }\n    pm \u003d cumulativeProbability(x0);\n    while (pm \u003e p) {\n        --x0;\n        pm \u003d cumulativeProbability(x0);\n    }\n    return x0;\n}",
      "path": "src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java",
      "functionStartLine": 157,
      "functionName": "inverseCumulativeProbability",
      "functionAnnotation": "",
      "functionDoc": "For a random variable X whose values are distributed according\nto this distribution, this method returns the largest x, such\nthat P(X \u0026le; x) \u0026le; \u003ccode\u003ep\u003c/code\u003e.\n\n@param p the desired probability\n@return the largest x such that P(X \u0026le; x) \u003c\u003d p\n@throws MathException if the inverse cumulative probability can not be\n           computed due to convergence or other numerical errors.\n@throws IllegalArgumentException if p \u003c 0 or p \u003e 1\n",
      "diff": "",
      "extendedDetails": {}
    },
    "d6a438e931412713e99624cf9ed74470f1040184": {
      "type": "Yfilerename",
      "commitMessage": "moved main java directory for compliance with maven standard directory layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@799870 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/1/09, 7:30 AM",
      "commitName": "d6a438e931412713e99624cf9ed74470f1040184",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "8/1/09, 7:23 AM",
      "commitNameOld": "2ad5ef61630be627f46ae1c266cf796f044bd4a8",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public int inverseCumulativeProbability(final double p) throws MathException {\n    if (p \u003c 0.0 || p \u003e 1.0) {\n        throw MathRuntimeException.createIllegalArgumentException(\"{0} out of [{1}, {2}] range\", p, 0.0, 1.0);\n    }\n    int x0 \u003d getDomainLowerBound(p);\n    int x1 \u003d getDomainUpperBound(p);\n    double pm;\n    while (x0 \u003c x1) {\n        int xm \u003d x0 + (x1 - x0) / 2;\n        pm \u003d cumulativeProbability(xm);\n        if (pm \u003e p) {\n            if (xm \u003d\u003d x1) {\n                --x1;\n            } else {\n                x1 \u003d xm;\n            }\n        } else {\n            if (xm \u003d\u003d x0) {\n                ++x0;\n            } else {\n                x0 \u003d xm;\n            }\n        }\n    }\n    pm \u003d cumulativeProbability(x0);\n    while (pm \u003e p) {\n        --x0;\n        pm \u003d cumulativeProbability(x0);\n    }\n    return x0;\n}",
      "path": "src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java",
      "functionStartLine": 157,
      "functionName": "inverseCumulativeProbability",
      "functionAnnotation": "",
      "functionDoc": "For a random variable X whose values are distributed according\nto this distribution, this method returns the largest x, such\nthat P(X \u0026le; x) \u0026le; \u003ccode\u003ep\u003c/code\u003e.\n\n@param p the desired probability\n@return the largest x such that P(X \u0026le; x) \u003c\u003d p\n@throws MathException if the inverse cumulative probability can not be\n           computed due to convergence or other numerical errors.\n@throws IllegalArgumentException if p \u003c 0 or p \u003e 1\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java",
        "newPath": "src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java"
      }
    },
    "e497d61c834d1ced0291fc431096b2c8a0546d0d": {
      "type": "Ybodychange",
      "commitMessage": "improved error messages\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@772119 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/6/09, 2:43 AM",
      "commitName": "e497d61c834d1ced0291fc431096b2c8a0546d0d",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "4/5/09, 7:20 AM",
      "commitNameOld": "9c8d2c79c1ef565337599849cd066ff63b8d5816",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 30.81,
      "commitsBetweenForRepo": 90,
      "commitsBetweenForFile": 1,
      "actualSource": "public int inverseCumulativeProbability(final double p) throws MathException {\n    if (p \u003c 0.0 || p \u003e 1.0) {\n        throw MathRuntimeException.createIllegalArgumentException(\"{0} out of [{1}, {2}] range\", p, 0.0, 1.0);\n    }\n    int x0 \u003d getDomainLowerBound(p);\n    int x1 \u003d getDomainUpperBound(p);\n    double pm;\n    while (x0 \u003c x1) {\n        int xm \u003d x0 + (x1 - x0) / 2;\n        pm \u003d cumulativeProbability(xm);\n        if (pm \u003e p) {\n            if (xm \u003d\u003d x1) {\n                --x1;\n            } else {\n                x1 \u003d xm;\n            }\n        } else {\n            if (xm \u003d\u003d x0) {\n                ++x0;\n            } else {\n                x0 \u003d xm;\n            }\n        }\n    }\n    pm \u003d cumulativeProbability(x0);\n    while (pm \u003e p) {\n        --x0;\n        pm \u003d cumulativeProbability(x0);\n    }\n    return x0;\n}",
      "path": "src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java",
      "functionStartLine": 157,
      "functionName": "inverseCumulativeProbability",
      "functionAnnotation": "",
      "functionDoc": "For a random variable X whose values are distributed according\nto this distribution, this method returns the largest x, such\nthat P(X \u0026le; x) \u0026le; \u003ccode\u003ep\u003c/code\u003e.\n\n@param p the desired probability\n@return the largest x such that P(X \u0026le; x) \u003c\u003d p\n@throws MathException if the inverse cumulative probability can not be\n           computed due to convergence or other numerical errors.\n@throws IllegalArgumentException if p \u003c 0 or p \u003e 1\n",
      "diff": "@@ -1,31 +1,31 @@\n public int inverseCumulativeProbability(final double p) throws MathException {\n     if (p \u003c 0.0 || p \u003e 1.0) {\n-        throw new IllegalArgumentException(\"p must be between 0 and 1.0 (inclusive)\");\n+        throw MathRuntimeException.createIllegalArgumentException(\"{0} out of [{1}, {2}] range\", p, 0.0, 1.0);\n     }\n     int x0 \u003d getDomainLowerBound(p);\n     int x1 \u003d getDomainUpperBound(p);\n     double pm;\n     while (x0 \u003c x1) {\n         int xm \u003d x0 + (x1 - x0) / 2;\n         pm \u003d cumulativeProbability(xm);\n         if (pm \u003e p) {\n             if (xm \u003d\u003d x1) {\n                 --x1;\n             } else {\n                 x1 \u003d xm;\n             }\n         } else {\n             if (xm \u003d\u003d x0) {\n                 ++x0;\n             } else {\n                 x0 \u003d xm;\n             }\n         }\n     }\n     pm \u003d cumulativeProbability(x0);\n     while (pm \u003e p) {\n         --x0;\n         pm \u003d cumulativeProbability(x0);\n     }\n     return x0;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5fa559b2cfc336442b8fabffdbdb136f67e15d89": {
      "type": "Ymultichange(Yfilerename,Ydocchange)",
      "commitMessage": "Refactored distribution package so that more general distributions can be\nrepresented and added Poisson distribution.\n1) Added Distribution, AbstractDistribution\n2) Added IntegerDistribution, AbstractIntegerDistribution\n3) Added PoissonDistribution contributed by Fredrik Norin (PR #31688)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141491 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/6/04, 7:32 PM",
      "commitName": "5fa559b2cfc336442b8fabffdbdb136f67e15d89",
      "commitAuthor": "Phil Steitz",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "Refactored distribution package so that more general distributions can be\nrepresented and added Poisson distribution.\n1) Added Distribution, AbstractDistribution\n2) Added IntegerDistribution, AbstractIntegerDistribution\n3) Added PoissonDistribution contributed by Fredrik Norin (PR #31688)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141491 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/6/04, 7:32 PM",
          "commitName": "5fa559b2cfc336442b8fabffdbdb136f67e15d89",
          "commitAuthor": "Phil Steitz",
          "commitDateOld": "11/6/04, 6:44 PM",
          "commitNameOld": "56f3443ae1d37993ab628ab4310064d6595ff7ad",
          "commitAuthorOld": "Phil Steitz",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public int inverseCumulativeProbability(final double p) throws MathException {\n    if (p \u003c 0.0 || p \u003e 1.0) {\n        throw new IllegalArgumentException(\"p must be between 0 and 1.0 (inclusive)\");\n    }\n    int x0 \u003d getDomainLowerBound(p);\n    int x1 \u003d getDomainUpperBound(p);\n    double pm;\n    while (x0 \u003c x1) {\n        int xm \u003d x0 + (x1 - x0) / 2;\n        pm \u003d cumulativeProbability(xm);\n        if (pm \u003e p) {\n            if (xm \u003d\u003d x1) {\n                --x1;\n            } else {\n                x1 \u003d xm;\n            }\n        } else {\n            if (xm \u003d\u003d x0) {\n                ++x0;\n            } else {\n                x0 \u003d xm;\n            }\n        }\n    }\n    pm \u003d cumulativeProbability(x0);\n    while (pm \u003e p) {\n        --x0;\n        pm \u003d cumulativeProbability(x0);\n    }\n    return x0;\n}",
          "path": "src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java",
          "functionStartLine": 124,
          "functionName": "inverseCumulativeProbability",
          "functionAnnotation": "",
          "functionDoc": "For a random variable X whose values are distributed according\nto this distribution, this method returns the largest x, such\nthat P(X \u0026le; x) \u0026le; \u003ccode\u003ep\u003c/code\u003e.\n\n@param p the desired probability\n@return the largest x such that P(X \u0026le; x) \u003c\u003d p\n@throws MathException if the inverse cumulative probability can not be\n           computed due to convergence or other numerical errors.\n@throws IllegalArgumentException if p \u003c 0 or p \u003e 1\n",
          "diff": "",
          "extendedDetails": {
            "oldPath": "src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java",
            "newPath": "src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java"
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Refactored distribution package so that more general distributions can be\nrepresented and added Poisson distribution.\n1) Added Distribution, AbstractDistribution\n2) Added IntegerDistribution, AbstractIntegerDistribution\n3) Added PoissonDistribution contributed by Fredrik Norin (PR #31688)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141491 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/6/04, 7:32 PM",
          "commitName": "5fa559b2cfc336442b8fabffdbdb136f67e15d89",
          "commitAuthor": "Phil Steitz",
          "commitDateOld": "11/6/04, 6:44 PM",
          "commitNameOld": "56f3443ae1d37993ab628ab4310064d6595ff7ad",
          "commitAuthorOld": "Phil Steitz",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public int inverseCumulativeProbability(final double p) throws MathException {\n    if (p \u003c 0.0 || p \u003e 1.0) {\n        throw new IllegalArgumentException(\"p must be between 0 and 1.0 (inclusive)\");\n    }\n    int x0 \u003d getDomainLowerBound(p);\n    int x1 \u003d getDomainUpperBound(p);\n    double pm;\n    while (x0 \u003c x1) {\n        int xm \u003d x0 + (x1 - x0) / 2;\n        pm \u003d cumulativeProbability(xm);\n        if (pm \u003e p) {\n            if (xm \u003d\u003d x1) {\n                --x1;\n            } else {\n                x1 \u003d xm;\n            }\n        } else {\n            if (xm \u003d\u003d x0) {\n                ++x0;\n            } else {\n                x0 \u003d xm;\n            }\n        }\n    }\n    pm \u003d cumulativeProbability(x0);\n    while (pm \u003e p) {\n        --x0;\n        pm \u003d cumulativeProbability(x0);\n    }\n    return x0;\n}",
          "path": "src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java",
          "functionStartLine": 124,
          "functionName": "inverseCumulativeProbability",
          "functionAnnotation": "",
          "functionDoc": "For a random variable X whose values are distributed according\nto this distribution, this method returns the largest x, such\nthat P(X \u0026le; x) \u0026le; \u003ccode\u003ep\u003c/code\u003e.\n\n@param p the desired probability\n@return the largest x such that P(X \u0026le; x) \u003c\u003d p\n@throws MathException if the inverse cumulative probability can not be\n           computed due to convergence or other numerical errors.\n@throws IllegalArgumentException if p \u003c 0 or p \u003e 1\n",
          "diff": "",
          "extendedDetails": {
            "oldValue": "For this distribution, X, this method returns the largest x, such\nthat P(X \u0026le; x) \u0026le; \u003ccode\u003ep\u003c/code\u003e.\n\n@param p the desired probability\n@return the largest x such that P(X \u0026le; x) \u003c\u003d p\n@throws MathException if the inverse cumulative probability can not be\n           computed due to convergence or other numerical errors.\n@throws IllegalArgumentException if p \u003c 0 or p \u003e 1\n",
            "newValue": "For a random variable X whose values are distributed according\nto this distribution, this method returns the largest x, such\nthat P(X \u0026le; x) \u0026le; \u003ccode\u003ep\u003c/code\u003e.\n\n@param p the desired probability\n@return the largest x such that P(X \u0026le; x) \u003c\u003d p\n@throws MathException if the inverse cumulative probability can not be\n           computed due to convergence or other numerical errors.\n@throws IllegalArgumentException if p \u003c 0 or p \u003e 1\n"
          }
        }
      ]
    },
    "f25e3602099eeb8ccea425f9bb5b841905085436": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Changed to allow p\u003d1 as argument to inverseCumulativeProbability.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141408 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/22/04, 10:20 PM",
      "commitName": "f25e3602099eeb8ccea425f9bb5b841905085436",
      "commitAuthor": "Phil Steitz",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Changed to allow p\u003d1 as argument to inverseCumulativeProbability.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141408 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/22/04, 10:20 PM",
          "commitName": "f25e3602099eeb8ccea425f9bb5b841905085436",
          "commitAuthor": "Phil Steitz",
          "commitDateOld": "6/23/04, 9:26 AM",
          "commitNameOld": "7b22aec5529fb3bad1e8098938271398d13c92ba",
          "commitAuthorOld": "Brent Worden",
          "daysBetweenCommits": 29.54,
          "commitsBetweenForRepo": 77,
          "commitsBetweenForFile": 1,
          "actualSource": "public int inverseCumulativeProbability(final double p) throws MathException {\n    if (p \u003c 0.0 || p \u003e 1.0) {\n        throw new IllegalArgumentException(\"p must be between 0 and 1.0 (inclusive)\");\n    }\n    int x0 \u003d getDomainLowerBound(p);\n    int x1 \u003d getDomainUpperBound(p);\n    double pm;\n    while (x0 \u003c x1) {\n        int xm \u003d x0 + (x1 - x0) / 2;\n        pm \u003d cumulativeProbability(xm);\n        if (pm \u003e p) {\n            if (xm \u003d\u003d x1) {\n                --x1;\n            } else {\n                x1 \u003d xm;\n            }\n        } else {\n            if (xm \u003d\u003d x0) {\n                ++x0;\n            } else {\n                x0 \u003d xm;\n            }\n        }\n    }\n    pm \u003d cumulativeProbability(x0);\n    while (pm \u003e p) {\n        --x0;\n        pm \u003d cumulativeProbability(x0);\n    }\n    return x0;\n}",
          "path": "src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java",
          "functionStartLine": 70,
          "functionName": "inverseCumulativeProbability",
          "functionAnnotation": "",
          "functionDoc": "For this distribution, X, this method returns the largest x, such\nthat P(X \u0026le; x) \u0026le; \u003ccode\u003ep\u003c/code\u003e.\n\n@param p the desired probability\n@return the largest x such that P(X \u0026le; x) \u003c\u003d p\n@throws MathException if the inverse cumulative probability can not be\n           computed due to convergence or other numerical errors.\n@throws IllegalArgumentException if p \u003c 0 or p \u003e 1\n",
          "diff": "@@ -1,31 +1,31 @@\n public int inverseCumulativeProbability(final double p) throws MathException {\n-    if (p \u003c 0.0 || p \u003e\u003d 1.0) {\n-        throw new IllegalArgumentException(\"p must be greater than or equal to 0.0 and strictly less than 1.0\");\n+    if (p \u003c 0.0 || p \u003e 1.0) {\n+        throw new IllegalArgumentException(\"p must be between 0 and 1.0 (inclusive)\");\n     }\n     int x0 \u003d getDomainLowerBound(p);\n     int x1 \u003d getDomainUpperBound(p);\n     double pm;\n     while (x0 \u003c x1) {\n         int xm \u003d x0 + (x1 - x0) / 2;\n         pm \u003d cumulativeProbability(xm);\n         if (pm \u003e p) {\n             if (xm \u003d\u003d x1) {\n                 --x1;\n             } else {\n                 x1 \u003d xm;\n             }\n         } else {\n             if (xm \u003d\u003d x0) {\n                 ++x0;\n             } else {\n                 x0 \u003d xm;\n             }\n         }\n     }\n     pm \u003d cumulativeProbability(x0);\n     while (pm \u003e p) {\n         --x0;\n         pm \u003d cumulativeProbability(x0);\n     }\n     return x0;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Changed to allow p\u003d1 as argument to inverseCumulativeProbability.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141408 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/22/04, 10:20 PM",
          "commitName": "f25e3602099eeb8ccea425f9bb5b841905085436",
          "commitAuthor": "Phil Steitz",
          "commitDateOld": "6/23/04, 9:26 AM",
          "commitNameOld": "7b22aec5529fb3bad1e8098938271398d13c92ba",
          "commitAuthorOld": "Brent Worden",
          "daysBetweenCommits": 29.54,
          "commitsBetweenForRepo": 77,
          "commitsBetweenForFile": 1,
          "actualSource": "public int inverseCumulativeProbability(final double p) throws MathException {\n    if (p \u003c 0.0 || p \u003e 1.0) {\n        throw new IllegalArgumentException(\"p must be between 0 and 1.0 (inclusive)\");\n    }\n    int x0 \u003d getDomainLowerBound(p);\n    int x1 \u003d getDomainUpperBound(p);\n    double pm;\n    while (x0 \u003c x1) {\n        int xm \u003d x0 + (x1 - x0) / 2;\n        pm \u003d cumulativeProbability(xm);\n        if (pm \u003e p) {\n            if (xm \u003d\u003d x1) {\n                --x1;\n            } else {\n                x1 \u003d xm;\n            }\n        } else {\n            if (xm \u003d\u003d x0) {\n                ++x0;\n            } else {\n                x0 \u003d xm;\n            }\n        }\n    }\n    pm \u003d cumulativeProbability(x0);\n    while (pm \u003e p) {\n        --x0;\n        pm \u003d cumulativeProbability(x0);\n    }\n    return x0;\n}",
          "path": "src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java",
          "functionStartLine": 70,
          "functionName": "inverseCumulativeProbability",
          "functionAnnotation": "",
          "functionDoc": "For this distribution, X, this method returns the largest x, such\nthat P(X \u0026le; x) \u0026le; \u003ccode\u003ep\u003c/code\u003e.\n\n@param p the desired probability\n@return the largest x such that P(X \u0026le; x) \u003c\u003d p\n@throws MathException if the inverse cumulative probability can not be\n           computed due to convergence or other numerical errors.\n@throws IllegalArgumentException if p \u003c 0 or p \u003e 1\n",
          "diff": "@@ -1,31 +1,31 @@\n public int inverseCumulativeProbability(final double p) throws MathException {\n-    if (p \u003c 0.0 || p \u003e\u003d 1.0) {\n-        throw new IllegalArgumentException(\"p must be greater than or equal to 0.0 and strictly less than 1.0\");\n+    if (p \u003c 0.0 || p \u003e 1.0) {\n+        throw new IllegalArgumentException(\"p must be between 0 and 1.0 (inclusive)\");\n     }\n     int x0 \u003d getDomainLowerBound(p);\n     int x1 \u003d getDomainUpperBound(p);\n     double pm;\n     while (x0 \u003c x1) {\n         int xm \u003d x0 + (x1 - x0) / 2;\n         pm \u003d cumulativeProbability(xm);\n         if (pm \u003e p) {\n             if (xm \u003d\u003d x1) {\n                 --x1;\n             } else {\n                 x1 \u003d xm;\n             }\n         } else {\n             if (xm \u003d\u003d x0) {\n                 ++x0;\n             } else {\n                 x0 \u003d xm;\n             }\n         }\n     }\n     pm \u003d cumulativeProbability(x0);\n     while (pm \u003e p) {\n         --x0;\n         pm \u003d cumulativeProbability(x0);\n     }\n     return x0;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "For this distribution, X, this method returns the largest x, such\nthat P(X \u0026le; x) \u0026le; \u003ccode\u003ep\u003c/code\u003e.\n\n@param p the desired probability\n@return the largest x such that P(X \u0026le; x) \u003c\u003d p\n@throws MathException if the inverse cumulative probability can not be\n           computed due to convergence or other numerical errors.\n@throws IllegalArgumentException if p \u003c 0 or p \u003e\u003d 1\n",
            "newValue": "For this distribution, X, this method returns the largest x, such\nthat P(X \u0026le; x) \u0026le; \u003ccode\u003ep\u003c/code\u003e.\n\n@param p the desired probability\n@return the largest x such that P(X \u0026le; x) \u003c\u003d p\n@throws MathException if the inverse cumulative probability can not be\n           computed due to convergence or other numerical errors.\n@throws IllegalArgumentException if p \u003c 0 or p \u003e 1\n"
          }
        }
      ]
    },
    "206201617aae648e12f63d4ab8aa9751157e7e63": {
      "type": "Ydocchange",
      "commitMessage": "Documented some runtime exceptions.\nPR: 29013\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141231 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/19/04, 7:16 AM",
      "commitName": "206201617aae648e12f63d4ab8aa9751157e7e63",
      "commitAuthor": "Brent Worden",
      "commitDateOld": "5/10/04, 7:19 PM",
      "commitNameOld": "8d825e475b702a65e1568590161bea6bc8f0103f",
      "commitAuthorOld": "Phil Steitz",
      "daysBetweenCommits": 8.5,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "public int inverseCumulativeProbability(final double p) throws MathException {\n    if (p \u003c 0.0 || p \u003e\u003d 1.0) {\n        throw new IllegalArgumentException(\"p must be greater than or equal to 0.0 and strictly less than 1.0\");\n    }\n    int x0 \u003d getDomainLowerBound(p);\n    int x1 \u003d getDomainUpperBound(p);\n    double pm;\n    while (x0 \u003c x1) {\n        int xm \u003d x0 + (x1 - x0) / 2;\n        pm \u003d cumulativeProbability(xm);\n        if (pm \u003e p) {\n            if (xm \u003d\u003d x1) {\n                --x1;\n            } else {\n                x1 \u003d xm;\n            }\n        } else {\n            if (xm \u003d\u003d x0) {\n                ++x0;\n            } else {\n                x0 \u003d xm;\n            }\n        }\n    }\n    pm \u003d cumulativeProbability(x0);\n    while (pm \u003e p) {\n        --x0;\n        pm \u003d cumulativeProbability(x0);\n    }\n    return x0;\n}",
      "path": "src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java",
      "functionStartLine": 65,
      "functionName": "inverseCumulativeProbability",
      "functionAnnotation": "",
      "functionDoc": "For this distribution, X, this method returns the largest x, such\nthat P(X \u0026le; x) \u0026le; \u003ccode\u003ep\u003c/code\u003e.\n\n@param p the desired probability\n@return the largest x such that P(X \u0026le; x) \u003c\u003d p\n@throws MathException if the inverse cumulative probability can not be\n           computed due to convergence or other numerical errors.\n@throws IllegalArgumentException if p \u003c 0 or p \u003e\u003d 1\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "For this distribution, X, this method returns the largest x, such\nthat P(X \u0026le; x) \u0026le; \u003ccode\u003ep\u003c/code\u003e.\n\n@param p the desired probability\n@return the largest x such that P(X \u0026le; x) \u003c\u003d p\n@exception MathException if the inverse cumulative probability can not be\n           computed due to convergence or other numerical errors.\n@exception IllegalArgumentException if p \u003c 0 or p \u003e\u003d 1\n",
        "newValue": "For this distribution, X, this method returns the largest x, such\nthat P(X \u0026le; x) \u0026le; \u003ccode\u003ep\u003c/code\u003e.\n\n@param p the desired probability\n@return the largest x such that P(X \u0026le; x) \u003c\u003d p\n@throws MathException if the inverse cumulative probability can not be\n           computed due to convergence or other numerical errors.\n@throws IllegalArgumentException if p \u003c 0 or p \u003e\u003d 1\n"
      }
    },
    "8d825e475b702a65e1568590161bea6bc8f0103f": {
      "type": "Ydocchange",
      "commitMessage": "javadoc typos.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141223 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/10/04, 7:19 PM",
      "commitName": "8d825e475b702a65e1568590161bea6bc8f0103f",
      "commitAuthor": "Phil Steitz",
      "commitDateOld": "5/10/04, 7:04 PM",
      "commitNameOld": "4c47502d072d5fb1192f6fae88b6d98e69128eab",
      "commitAuthorOld": "Phil Steitz",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "public int inverseCumulativeProbability(final double p) throws MathException {\n    if (p \u003c 0.0 || p \u003e\u003d 1.0) {\n        throw new IllegalArgumentException(\"p must be greater than or equal to 0.0 and strictly less than 1.0\");\n    }\n    int x0 \u003d getDomainLowerBound(p);\n    int x1 \u003d getDomainUpperBound(p);\n    double pm;\n    while (x0 \u003c x1) {\n        int xm \u003d x0 + (x1 - x0) / 2;\n        pm \u003d cumulativeProbability(xm);\n        if (pm \u003e p) {\n            if (xm \u003d\u003d x1) {\n                --x1;\n            } else {\n                x1 \u003d xm;\n            }\n        } else {\n            if (xm \u003d\u003d x0) {\n                ++x0;\n            } else {\n                x0 \u003d xm;\n            }\n        }\n    }\n    pm \u003d cumulativeProbability(x0);\n    while (pm \u003e p) {\n        --x0;\n        pm \u003d cumulativeProbability(x0);\n    }\n    return x0;\n}",
      "path": "src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java",
      "functionStartLine": 65,
      "functionName": "inverseCumulativeProbability",
      "functionAnnotation": "",
      "functionDoc": "For this distribution, X, this method returns the largest x, such\nthat P(X \u0026le; x) \u0026le; \u003ccode\u003ep\u003c/code\u003e.\n\n@param p the desired probability\n@return the largest x such that P(X \u0026le; x) \u003c\u003d p\n@exception MathException if the inverse cumulative probability can not be\n           computed due to convergence or other numerical errors.\n@exception IllegalArgumentException if p \u003c 0 or p \u003e\u003d 1\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "For this distribution, X, this method returns the lagest x, such\nthat P(X \u0026le; x) \u0026le; \u003ccode\u003ep\u003c/code\u003e.\n\n@param p the desired probability\n@return the largest x such that P(X \u0026le; x) \u003c\u003d p\n@exception MathException if the inverse cumulative probability can not be\n           computed due to convergence or other numerical errors.\n@exception IllegalArgumentException if p \u003c 0 or p \u003e\u003d 1\n",
        "newValue": "For this distribution, X, this method returns the largest x, such\nthat P(X \u0026le; x) \u0026le; \u003ccode\u003ep\u003c/code\u003e.\n\n@param p the desired probability\n@return the largest x such that P(X \u0026le; x) \u003c\u003d p\n@exception MathException if the inverse cumulative probability can not be\n           computed due to convergence or other numerical errors.\n@exception IllegalArgumentException if p \u003c 0 or p \u003e\u003d 1\n"
      }
    },
    "4c47502d072d5fb1192f6fae88b6d98e69128eab": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Improved documentation. Added x0 \u003c\u003d x1 check in cumulativeProbability. Required p \u003c 1 in inverseCumulativeProbability.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141218 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/10/04, 7:04 PM",
      "commitName": "4c47502d072d5fb1192f6fae88b6d98e69128eab",
      "commitAuthor": "Phil Steitz",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Improved documentation. Added x0 \u003c\u003d x1 check in cumulativeProbability. Required p \u003c 1 in inverseCumulativeProbability.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141218 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "5/10/04, 7:04 PM",
          "commitName": "4c47502d072d5fb1192f6fae88b6d98e69128eab",
          "commitAuthor": "Phil Steitz",
          "commitDateOld": "4/8/04, 1:46 PM",
          "commitNameOld": "e6212e7d1802d4d0133fd545f1190594aa69b09f",
          "commitAuthorOld": "Brent Worden",
          "daysBetweenCommits": 32.22,
          "commitsBetweenForRepo": 58,
          "commitsBetweenForFile": 1,
          "actualSource": "public int inverseCumulativeProbability(final double p) throws MathException {\n    if (p \u003c 0.0 || p \u003e\u003d 1.0) {\n        throw new IllegalArgumentException(\"p must be greater than or equal to 0.0 and strictly less than 1.0\");\n    }\n    int x0 \u003d getDomainLowerBound(p);\n    int x1 \u003d getDomainUpperBound(p);\n    double pm;\n    while (x0 \u003c x1) {\n        int xm \u003d x0 + (x1 - x0) / 2;\n        pm \u003d cumulativeProbability(xm);\n        if (pm \u003e p) {\n            if (xm \u003d\u003d x1) {\n                --x1;\n            } else {\n                x1 \u003d xm;\n            }\n        } else {\n            if (xm \u003d\u003d x0) {\n                ++x0;\n            } else {\n                x0 \u003d xm;\n            }\n        }\n    }\n    pm \u003d cumulativeProbability(x0);\n    while (pm \u003e p) {\n        --x0;\n        pm \u003d cumulativeProbability(x0);\n    }\n    return x0;\n}",
          "path": "src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java",
          "functionStartLine": 65,
          "functionName": "inverseCumulativeProbability",
          "functionAnnotation": "",
          "functionDoc": "For this distribution, X, this method returns the lagest x, such\nthat P(X \u0026le; x) \u0026le; \u003ccode\u003ep\u003c/code\u003e.\n\n@param p the desired probability\n@return the largest x such that P(X \u0026le; x) \u003c\u003d p\n@exception MathException if the inverse cumulative probability can not be\n           computed due to convergence or other numerical errors.\n@exception IllegalArgumentException if p \u003c 0 or p \u003e\u003d 1\n",
          "diff": "@@ -1,31 +1,31 @@\n public int inverseCumulativeProbability(final double p) throws MathException {\n-    if (p \u003c 0.0 || p \u003e 1.0) {\n-        throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n+    if (p \u003c 0.0 || p \u003e\u003d 1.0) {\n+        throw new IllegalArgumentException(\"p must be greater than or equal to 0.0 and strictly less than 1.0\");\n     }\n     int x0 \u003d getDomainLowerBound(p);\n     int x1 \u003d getDomainUpperBound(p);\n     double pm;\n     while (x0 \u003c x1) {\n         int xm \u003d x0 + (x1 - x0) / 2;\n         pm \u003d cumulativeProbability(xm);\n         if (pm \u003e p) {\n             if (xm \u003d\u003d x1) {\n                 --x1;\n             } else {\n                 x1 \u003d xm;\n             }\n         } else {\n             if (xm \u003d\u003d x0) {\n                 ++x0;\n             } else {\n                 x0 \u003d xm;\n             }\n         }\n     }\n     pm \u003d cumulativeProbability(x0);\n     while (pm \u003e p) {\n         --x0;\n         pm \u003d cumulativeProbability(x0);\n     }\n     return x0;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Improved documentation. Added x0 \u003c\u003d x1 check in cumulativeProbability. Required p \u003c 1 in inverseCumulativeProbability.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141218 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "5/10/04, 7:04 PM",
          "commitName": "4c47502d072d5fb1192f6fae88b6d98e69128eab",
          "commitAuthor": "Phil Steitz",
          "commitDateOld": "4/8/04, 1:46 PM",
          "commitNameOld": "e6212e7d1802d4d0133fd545f1190594aa69b09f",
          "commitAuthorOld": "Brent Worden",
          "daysBetweenCommits": 32.22,
          "commitsBetweenForRepo": 58,
          "commitsBetweenForFile": 1,
          "actualSource": "public int inverseCumulativeProbability(final double p) throws MathException {\n    if (p \u003c 0.0 || p \u003e\u003d 1.0) {\n        throw new IllegalArgumentException(\"p must be greater than or equal to 0.0 and strictly less than 1.0\");\n    }\n    int x0 \u003d getDomainLowerBound(p);\n    int x1 \u003d getDomainUpperBound(p);\n    double pm;\n    while (x0 \u003c x1) {\n        int xm \u003d x0 + (x1 - x0) / 2;\n        pm \u003d cumulativeProbability(xm);\n        if (pm \u003e p) {\n            if (xm \u003d\u003d x1) {\n                --x1;\n            } else {\n                x1 \u003d xm;\n            }\n        } else {\n            if (xm \u003d\u003d x0) {\n                ++x0;\n            } else {\n                x0 \u003d xm;\n            }\n        }\n    }\n    pm \u003d cumulativeProbability(x0);\n    while (pm \u003e p) {\n        --x0;\n        pm \u003d cumulativeProbability(x0);\n    }\n    return x0;\n}",
          "path": "src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java",
          "functionStartLine": 65,
          "functionName": "inverseCumulativeProbability",
          "functionAnnotation": "",
          "functionDoc": "For this distribution, X, this method returns the lagest x, such\nthat P(X \u0026le; x) \u0026le; \u003ccode\u003ep\u003c/code\u003e.\n\n@param p the desired probability\n@return the largest x such that P(X \u0026le; x) \u003c\u003d p\n@exception MathException if the inverse cumulative probability can not be\n           computed due to convergence or other numerical errors.\n@exception IllegalArgumentException if p \u003c 0 or p \u003e\u003d 1\n",
          "diff": "@@ -1,31 +1,31 @@\n public int inverseCumulativeProbability(final double p) throws MathException {\n-    if (p \u003c 0.0 || p \u003e 1.0) {\n-        throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n+    if (p \u003c 0.0 || p \u003e\u003d 1.0) {\n+        throw new IllegalArgumentException(\"p must be greater than or equal to 0.0 and strictly less than 1.0\");\n     }\n     int x0 \u003d getDomainLowerBound(p);\n     int x1 \u003d getDomainUpperBound(p);\n     double pm;\n     while (x0 \u003c x1) {\n         int xm \u003d x0 + (x1 - x0) / 2;\n         pm \u003d cumulativeProbability(xm);\n         if (pm \u003e p) {\n             if (xm \u003d\u003d x1) {\n                 --x1;\n             } else {\n                 x1 \u003d xm;\n             }\n         } else {\n             if (xm \u003d\u003d x0) {\n                 ++x0;\n             } else {\n                 x0 \u003d xm;\n             }\n         }\n     }\n     pm \u003d cumulativeProbability(x0);\n     while (pm \u003e p) {\n         --x0;\n         pm \u003d cumulativeProbability(x0);\n     }\n     return x0;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "For this distribution, X, this method returns the critical point x, such\nthat P(X \u0026le; x) \u0026le; \u003ccode\u003ep\u003c/code\u003e.\n\n@param p the desired probability\n@return x, such that P(X \u0026lt; x) \u003d \u003ccode\u003ep\u003c/code\u003e\n@exception MathException if the inverse cumulative probability can not be\n           computed due to convergence or other numerical errors.\n",
            "newValue": "For this distribution, X, this method returns the lagest x, such\nthat P(X \u0026le; x) \u0026le; \u003ccode\u003ep\u003c/code\u003e.\n\n@param p the desired probability\n@return the largest x such that P(X \u0026le; x) \u003c\u003d p\n@exception MathException if the inverse cumulative probability can not be\n           computed due to convergence or other numerical errors.\n@exception IllegalArgumentException if p \u003c 0 or p \u003e\u003d 1\n"
          }
        }
      ]
    },
    "e6212e7d1802d4d0133fd545f1190594aa69b09f": {
      "type": "Ydocchange",
      "commitMessage": "Added serveral javadoc comments.  Added constructors to the matrix exception classes to mimic the existing math exceptions.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141160 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/8/04, 1:46 PM",
      "commitName": "e6212e7d1802d4d0133fd545f1190594aa69b09f",
      "commitAuthor": "Brent Worden",
      "commitDateOld": "2/21/04, 1:35 PM",
      "commitNameOld": "5d66d93e57e142760603024ce1429f2d229a6c8f",
      "commitAuthorOld": "Phil Steitz",
      "daysBetweenCommits": 46.97,
      "commitsBetweenForRepo": 56,
      "commitsBetweenForFile": 1,
      "actualSource": "public int inverseCumulativeProbability(final double p) throws MathException {\n    if (p \u003c 0.0 || p \u003e 1.0) {\n        throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n    }\n    int x0 \u003d getDomainLowerBound(p);\n    int x1 \u003d getDomainUpperBound(p);\n    double pm;\n    while (x0 \u003c x1) {\n        int xm \u003d x0 + (x1 - x0) / 2;\n        pm \u003d cumulativeProbability(xm);\n        if (pm \u003e p) {\n            if (xm \u003d\u003d x1) {\n                --x1;\n            } else {\n                x1 \u003d xm;\n            }\n        } else {\n            if (xm \u003d\u003d x0) {\n                ++x0;\n            } else {\n                x0 \u003d xm;\n            }\n        }\n    }\n    pm \u003d cumulativeProbability(x0);\n    while (pm \u003e p) {\n        --x0;\n        pm \u003d cumulativeProbability(x0);\n    }\n    return x0;\n}",
      "path": "src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java",
      "functionStartLine": 60,
      "functionName": "inverseCumulativeProbability",
      "functionAnnotation": "",
      "functionDoc": "For this distribution, X, this method returns the critical point x, such\nthat P(X \u0026le; x) \u0026le; \u003ccode\u003ep\u003c/code\u003e.\n\n@param p the desired probability\n@return x, such that P(X \u0026lt; x) \u003d \u003ccode\u003ep\u003c/code\u003e\n@exception MathException if the inverse cumulative probability can not be\n           computed due to convergence or other numerical errors.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "For this distribution, X, this method returns the critical point x, such\nthat P(X \u0026le; x) \u0026le; \u003ccode\u003ep\u003c/code\u003e.\n\n@param p the desired probability\n@return x, such that P(X \u0026lt; x) \u003d \u003ccode\u003ep\u003c/code\u003e\n",
        "newValue": "For this distribution, X, this method returns the critical point x, such\nthat P(X \u0026le; x) \u0026le; \u003ccode\u003ep\u003c/code\u003e.\n\n@param p the desired probability\n@return x, such that P(X \u0026lt; x) \u003d \u003ccode\u003ep\u003c/code\u003e\n@exception MathException if the inverse cumulative probability can not be\n           computed due to convergence or other numerical errors.\n"
      }
    },
    "83caf3972c8f49953e0e31e12542f57b7728f9f4": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "fixed spelling error: cummulative -\u003e cumulative.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141100 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/17/04, 8:04 PM",
      "commitName": "83caf3972c8f49953e0e31e12542f57b7728f9f4",
      "commitAuthor": "Brent Worden",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "fixed spelling error: cummulative -\u003e cumulative.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141100 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2/17/04, 8:04 PM",
          "commitName": "83caf3972c8f49953e0e31e12542f57b7728f9f4",
          "commitAuthor": "Brent Worden",
          "commitDateOld": "1/28/04, 4:49 PM",
          "commitNameOld": "ea117cb81769e5d205cec3c07b29fda343bd7868",
          "commitAuthorOld": "Mark R. Diggory",
          "daysBetweenCommits": 20.14,
          "commitsBetweenForRepo": 26,
          "commitsBetweenForFile": 1,
          "actualSource": "public int inverseCumulativeProbability(final double p) throws MathException {\n    if (p \u003c 0.0 || p \u003e 1.0) {\n        throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n    }\n    int x0 \u003d getDomainLowerBound(p);\n    int x1 \u003d getDomainUpperBound(p);\n    double pm;\n    while (x0 \u003c x1) {\n        int xm \u003d x0 + (x1 - x0) / 2;\n        pm \u003d cumulativeProbability(xm);\n        if (pm \u003e p) {\n            if (xm \u003d\u003d x1) {\n                --x1;\n            } else {\n                x1 \u003d xm;\n            }\n        } else {\n            if (xm \u003d\u003d x0) {\n                ++x0;\n            } else {\n                x0 \u003d xm;\n            }\n        }\n    }\n    pm \u003d cumulativeProbability(x0);\n    while (pm \u003e p) {\n        --x0;\n        pm \u003d cumulativeProbability(x0);\n    }\n    return x0;\n}",
          "path": "src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java",
          "functionStartLine": 94,
          "functionName": "inverseCumulativeProbability",
          "functionAnnotation": "",
          "functionDoc": "For this distribution, X, this method returns the critical point x, such\nthat P(X \u0026le; x) \u0026le; \u003ccode\u003ep\u003c/code\u003e.\n\n@param p the desired probability\n@return x, such that P(X \u0026lt; x) \u003d \u003ccode\u003ep\u003c/code\u003e\n",
          "diff": "@@ -1,31 +1,31 @@\n-public int inverseCummulativeProbability(final double p) throws MathException {\n+public int inverseCumulativeProbability(final double p) throws MathException {\n     if (p \u003c 0.0 || p \u003e 1.0) {\n         throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n     }\n     int x0 \u003d getDomainLowerBound(p);\n     int x1 \u003d getDomainUpperBound(p);\n     double pm;\n     while (x0 \u003c x1) {\n         int xm \u003d x0 + (x1 - x0) / 2;\n-        pm \u003d cummulativeProbability(xm);\n+        pm \u003d cumulativeProbability(xm);\n         if (pm \u003e p) {\n             if (xm \u003d\u003d x1) {\n                 --x1;\n             } else {\n                 x1 \u003d xm;\n             }\n         } else {\n             if (xm \u003d\u003d x0) {\n                 ++x0;\n             } else {\n                 x0 \u003d xm;\n             }\n         }\n     }\n-    pm \u003d cummulativeProbability(x0);\n+    pm \u003d cumulativeProbability(x0);\n     while (pm \u003e p) {\n         --x0;\n-        pm \u003d cummulativeProbability(x0);\n+        pm \u003d cumulativeProbability(x0);\n     }\n     return x0;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "inverseCummulativeProbability",
            "newValue": "inverseCumulativeProbability"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "fixed spelling error: cummulative -\u003e cumulative.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141100 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2/17/04, 8:04 PM",
          "commitName": "83caf3972c8f49953e0e31e12542f57b7728f9f4",
          "commitAuthor": "Brent Worden",
          "commitDateOld": "1/28/04, 4:49 PM",
          "commitNameOld": "ea117cb81769e5d205cec3c07b29fda343bd7868",
          "commitAuthorOld": "Mark R. Diggory",
          "daysBetweenCommits": 20.14,
          "commitsBetweenForRepo": 26,
          "commitsBetweenForFile": 1,
          "actualSource": "public int inverseCumulativeProbability(final double p) throws MathException {\n    if (p \u003c 0.0 || p \u003e 1.0) {\n        throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n    }\n    int x0 \u003d getDomainLowerBound(p);\n    int x1 \u003d getDomainUpperBound(p);\n    double pm;\n    while (x0 \u003c x1) {\n        int xm \u003d x0 + (x1 - x0) / 2;\n        pm \u003d cumulativeProbability(xm);\n        if (pm \u003e p) {\n            if (xm \u003d\u003d x1) {\n                --x1;\n            } else {\n                x1 \u003d xm;\n            }\n        } else {\n            if (xm \u003d\u003d x0) {\n                ++x0;\n            } else {\n                x0 \u003d xm;\n            }\n        }\n    }\n    pm \u003d cumulativeProbability(x0);\n    while (pm \u003e p) {\n        --x0;\n        pm \u003d cumulativeProbability(x0);\n    }\n    return x0;\n}",
          "path": "src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java",
          "functionStartLine": 94,
          "functionName": "inverseCumulativeProbability",
          "functionAnnotation": "",
          "functionDoc": "For this distribution, X, this method returns the critical point x, such\nthat P(X \u0026le; x) \u0026le; \u003ccode\u003ep\u003c/code\u003e.\n\n@param p the desired probability\n@return x, such that P(X \u0026lt; x) \u003d \u003ccode\u003ep\u003c/code\u003e\n",
          "diff": "@@ -1,31 +1,31 @@\n-public int inverseCummulativeProbability(final double p) throws MathException {\n+public int inverseCumulativeProbability(final double p) throws MathException {\n     if (p \u003c 0.0 || p \u003e 1.0) {\n         throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n     }\n     int x0 \u003d getDomainLowerBound(p);\n     int x1 \u003d getDomainUpperBound(p);\n     double pm;\n     while (x0 \u003c x1) {\n         int xm \u003d x0 + (x1 - x0) / 2;\n-        pm \u003d cummulativeProbability(xm);\n+        pm \u003d cumulativeProbability(xm);\n         if (pm \u003e p) {\n             if (xm \u003d\u003d x1) {\n                 --x1;\n             } else {\n                 x1 \u003d xm;\n             }\n         } else {\n             if (xm \u003d\u003d x0) {\n                 ++x0;\n             } else {\n                 x0 \u003d xm;\n             }\n         }\n     }\n-    pm \u003d cummulativeProbability(x0);\n+    pm \u003d cumulativeProbability(x0);\n     while (pm \u003e p) {\n         --x0;\n-        pm \u003d cummulativeProbability(x0);\n+        pm \u003d cumulativeProbability(x0);\n     }\n     return x0;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "d1916458812f417874b0886ed64654bb6a0b8224": {
      "type": "Yexceptionschange",
      "commitMessage": "Exposed MathException handling in Distributions by adding thows MathException to methods where MathExceptions are caught and replaced with Double.NaN. Added Serialization Interface to Distributions, BivariateRegression and TestStatistic\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141035 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/18/03, 7:22 PM",
      "commitName": "d1916458812f417874b0886ed64654bb6a0b8224",
      "commitAuthor": "Mark R. Diggory",
      "commitDateOld": "11/15/03, 8:01 AM",
      "commitNameOld": "9bf7c1810448834898149a371c2081d8662337f6",
      "commitAuthorOld": "Dirk Verbeeck",
      "daysBetweenCommits": 3.47,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "actualSource": "public int inverseCummulativeProbability(final double p) throws MathException {\n    if (p \u003c 0.0 || p \u003e 1.0) {\n        throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n    }\n    int x0 \u003d getDomainLowerBound(p);\n    int x1 \u003d getDomainUpperBound(p);\n    double pm;\n    while (x0 \u003c x1) {\n        int xm \u003d x0 + (x1 - x0) / 2;\n        pm \u003d cummulativeProbability(xm);\n        if (pm \u003e p) {\n            if (xm \u003d\u003d x1) {\n                --x1;\n            } else {\n                x1 \u003d xm;\n            }\n        } else {\n            if (xm \u003d\u003d x0) {\n                ++x0;\n            } else {\n                x0 \u003d xm;\n            }\n        }\n    }\n    pm \u003d cummulativeProbability(x0);\n    while (pm \u003e p) {\n        --x0;\n        pm \u003d cummulativeProbability(x0);\n    }\n    return x0;\n}",
      "path": "src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java",
      "functionStartLine": 94,
      "functionName": "inverseCummulativeProbability",
      "functionAnnotation": "",
      "functionDoc": "For this distribution, X, this method returns the critical point x, such\nthat P(X \u0026le; x) \u0026le; \u003ccode\u003ep\u003c/code\u003e.\n\n@param p the desired probability\n@return x, such that P(X \u0026lt; x) \u003d \u003ccode\u003ep\u003c/code\u003e\n",
      "diff": "@@ -1,31 +1,31 @@\n-public int inverseCummulativeProbability(final double p) {\n+public int inverseCummulativeProbability(final double p) throws MathException {\n     if (p \u003c 0.0 || p \u003e 1.0) {\n         throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n     }\n     int x0 \u003d getDomainLowerBound(p);\n     int x1 \u003d getDomainUpperBound(p);\n     double pm;\n     while (x0 \u003c x1) {\n         int xm \u003d x0 + (x1 - x0) / 2;\n         pm \u003d cummulativeProbability(xm);\n         if (pm \u003e p) {\n             if (xm \u003d\u003d x1) {\n                 --x1;\n             } else {\n                 x1 \u003d xm;\n             }\n         } else {\n             if (xm \u003d\u003d x0) {\n                 ++x0;\n             } else {\n                 x0 \u003d xm;\n             }\n         }\n     }\n     pm \u003d cummulativeProbability(x0);\n     while (pm \u003e p) {\n         --x0;\n         pm \u003d cummulativeProbability(x0);\n     }\n     return x0;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[]",
        "newValue": "[MathException]"
      }
    },
    "0a904461932f2c0455611e77ec6a8d8aced2980b": {
      "type": "Yintroduced",
      "commitMessage": "Attempting to recover last revision.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141013 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/14/03, 2:25 PM",
      "commitName": "0a904461932f2c0455611e77ec6a8d8aced2980b",
      "commitAuthor": "Mark R. Diggory",
      "diff": "@@ -0,0 +1,31 @@\n+public int inverseCummulativeProbability(final double p) {\n+    if (p \u003c 0.0 || p \u003e 1.0) {\n+        throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n+    }\n+    int x0 \u003d getDomainLowerBound(p);\n+    int x1 \u003d getDomainUpperBound(p);\n+    double pm;\n+    while (x0 \u003c x1) {\n+        int xm \u003d x0 + (x1 - x0) / 2;\n+        pm \u003d cummulativeProbability(xm);\n+        if (pm \u003e p) {\n+            if (xm \u003d\u003d x1) {\n+                --x1;\n+            } else {\n+                x1 \u003d xm;\n+            }\n+        } else {\n+            if (xm \u003d\u003d x0) {\n+                ++x0;\n+            } else {\n+                x0 \u003d xm;\n+            }\n+        }\n+    }\n+    pm \u003d cummulativeProbability(x0);\n+    while (pm \u003e p) {\n+        --x0;\n+        pm \u003d cummulativeProbability(x0);\n+    }\n+    return x0;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public int inverseCummulativeProbability(final double p) {\n    if (p \u003c 0.0 || p \u003e 1.0) {\n        throw new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n    }\n    int x0 \u003d getDomainLowerBound(p);\n    int x1 \u003d getDomainUpperBound(p);\n    double pm;\n    while (x0 \u003c x1) {\n        int xm \u003d x0 + (x1 - x0) / 2;\n        pm \u003d cummulativeProbability(xm);\n        if (pm \u003e p) {\n            if (xm \u003d\u003d x1) {\n                --x1;\n            } else {\n                x1 \u003d xm;\n            }\n        } else {\n            if (xm \u003d\u003d x0) {\n                ++x0;\n            } else {\n                x0 \u003d xm;\n            }\n        }\n    }\n    pm \u003d cummulativeProbability(x0);\n    while (pm \u003e p) {\n        --x0;\n        pm \u003d cummulativeProbability(x0);\n    }\n    return x0;\n}",
      "path": "src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java",
      "functionStartLine": 92,
      "functionName": "inverseCummulativeProbability",
      "functionAnnotation": "",
      "functionDoc": "For this distribution, X, this method returns the critical point x, such\nthat P(X \u0026le; x) \u0026le; \u003ccode\u003ep\u003c/code\u003e.\n\n@param p the desired probability\n@return x, such that P(X \u0026lt; x) \u003d \u003ccode\u003ep\u003c/code\u003e\n"
    }
  }
}