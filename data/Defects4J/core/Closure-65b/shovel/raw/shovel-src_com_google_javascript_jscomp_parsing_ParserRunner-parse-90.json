{
  "origin": "codeshovel",
  "repositoryName": "Closure-65b",
  "repositoryPath": "/tmp/Closure-65b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ParserRunner.java",
  "functionName": "parse",
  "functionId": "parse___sourceName-String__sourceString-String__config-Config__errorReporter-ErrorReporter__logger-Logger",
  "sourceFilePath": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
  "functionAnnotation": "",
  "functionDoc": "Parses the JavaScript text given by a reader.\n\n@param sourceName The filename.\n@param sourceString Source code from the file.\n@param errorReporter An error.\n@param logger A logger.\n@return The AST of the given text.\n@throws IOException\n",
  "functionStartLine": 90,
  "functionEndLine": 132,
  "numCommitsSeen": 17,
  "timeTaken": 1148,
  "changeHistory": [
    "e4d80a3331cf7a9c1b7bdc9e2082d330381c3719",
    "82d3c01785f8b25113ca3fd7cc8b37da5d8a44a4",
    "7fbff508f8590793108aa192a1898dc617e7b040",
    "295c978bfbf070d28214b27239cd26aaea58b6d4",
    "b8c52bf5e76948ee8d561fa55a36cc6c9f5d0c68",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "e4d80a3331cf7a9c1b7bdc9e2082d330381c3719": "Ybodychange",
    "82d3c01785f8b25113ca3fd7cc8b37da5d8a44a4": "Ybodychange",
    "7fbff508f8590793108aa192a1898dc617e7b040": "Ybodychange",
    "295c978bfbf070d28214b27239cd26aaea58b6d4": "Ydocchange",
    "b8c52bf5e76948ee8d561fa55a36cc6c9f5d0c68": "Ymultichange(Yparameterchange,Ybodychange)",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e4d80a3331cf7a9c1b7bdc9e2082d330381c3719": {
      "type": "Ybodychange",
      "commitMessage": "\nEnable keywords as property names for ECMASCRIPT5\n\nR\u003dacleung\nDELTA\u003d106  (91 added, 1 deleted, 14 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d884\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@892 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/15/11, 3:57 PM",
      "commitName": "e4d80a3331cf7a9c1b7bdc9e2082d330381c3719",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "3/4/11, 4:48 PM",
      "commitNameOld": "82d3c01785f8b25113ca3fd7cc8b37da5d8a44a4",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 10.92,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Node parse(String sourceName, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n    Context cx \u003d Context.enter();\n    cx.setErrorReporter(errorReporter);\n    cx.setLanguageVersion(Context.VERSION_1_5);\n    CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n    compilerEnv.initFromContext(cx);\n    compilerEnv.setRecordingComments(true);\n    compilerEnv.setRecordingLocalJsDocComments(true);\n    compilerEnv.setWarnTrailingComma(config.languageMode \u003d\u003d LanguageMode.ECMASCRIPT3);\n    if (config.isIdeMode || config.languageMode !\u003d LanguageMode.ECMASCRIPT3) {\n        compilerEnv.setReservedKeywordAsIdentifier(true);\n        compilerEnv.setAllowKeywordAsObjectPropertyName(true);\n    }\n    if (config.isIdeMode) {\n        compilerEnv.setAllowMemberExprAsFunctionName(true);\n    }\n    Parser p \u003d new Parser(compilerEnv, errorReporter);\n    AstRoot astRoot \u003d null;\n    try {\n        astRoot \u003d p.parse(sourceString, sourceName, 1);\n    } catch (EvaluatorException e) {\n        logger.info(\"Error parsing \" + sourceName + \": \" + e.getMessage());\n    } finally {\n        Context.exit();\n    }\n    Node root \u003d null;\n    if (astRoot !\u003d null) {\n        root \u003d IRFactory.transformTree(astRoot, sourceString, config, errorReporter);\n        root.setIsSyntheticBlock(true);\n    }\n    return root;\n}",
      "path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
      "functionStartLine": 90,
      "functionName": "parse",
      "functionAnnotation": "",
      "functionDoc": "Parses the JavaScript text given by a reader.\n\n@param sourceName The filename.\n@param sourceString Source code from the file.\n@param errorReporter An error.\n@param logger A logger.\n@return The AST of the given text.\n@throws IOException\n",
      "diff": "@@ -1,31 +1,32 @@\n public static Node parse(String sourceName, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n     Context cx \u003d Context.enter();\n     cx.setErrorReporter(errorReporter);\n     cx.setLanguageVersion(Context.VERSION_1_5);\n     CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n     compilerEnv.initFromContext(cx);\n     compilerEnv.setRecordingComments(true);\n     compilerEnv.setRecordingLocalJsDocComments(true);\n     compilerEnv.setWarnTrailingComma(config.languageMode \u003d\u003d LanguageMode.ECMASCRIPT3);\n     if (config.isIdeMode || config.languageMode !\u003d LanguageMode.ECMASCRIPT3) {\n         compilerEnv.setReservedKeywordAsIdentifier(true);\n+        compilerEnv.setAllowKeywordAsObjectPropertyName(true);\n     }\n     if (config.isIdeMode) {\n         compilerEnv.setAllowMemberExprAsFunctionName(true);\n     }\n     Parser p \u003d new Parser(compilerEnv, errorReporter);\n     AstRoot astRoot \u003d null;\n     try {\n         astRoot \u003d p.parse(sourceString, sourceName, 1);\n     } catch (EvaluatorException e) {\n         logger.info(\"Error parsing \" + sourceName + \": \" + e.getMessage());\n     } finally {\n         Context.exit();\n     }\n     Node root \u003d null;\n     if (astRoot !\u003d null) {\n         root \u003d IRFactory.transformTree(astRoot, sourceString, config, errorReporter);\n         root.setIsSyntheticBlock(true);\n     }\n     return root;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "82d3c01785f8b25113ca3fd7cc8b37da5d8a44a4": {
      "type": "Ybodychange",
      "commitMessage": "\nTweak the parser to handle the restrict ES5 keyword set.\n\nR\u003dacleung\nDELTA\u003d145  (107 added, 7 deleted, 31 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d765\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@852 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/4/11, 4:48 PM",
      "commitName": "82d3c01785f8b25113ca3fd7cc8b37da5d8a44a4",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "3/4/11, 11:41 AM",
      "commitNameOld": "7fbff508f8590793108aa192a1898dc617e7b040",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 0.21,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Node parse(String sourceName, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n    Context cx \u003d Context.enter();\n    cx.setErrorReporter(errorReporter);\n    cx.setLanguageVersion(Context.VERSION_1_5);\n    CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n    compilerEnv.initFromContext(cx);\n    compilerEnv.setRecordingComments(true);\n    compilerEnv.setRecordingLocalJsDocComments(true);\n    compilerEnv.setWarnTrailingComma(config.languageMode \u003d\u003d LanguageMode.ECMASCRIPT3);\n    if (config.isIdeMode || config.languageMode !\u003d LanguageMode.ECMASCRIPT3) {\n        compilerEnv.setReservedKeywordAsIdentifier(true);\n    }\n    if (config.isIdeMode) {\n        compilerEnv.setAllowMemberExprAsFunctionName(true);\n    }\n    Parser p \u003d new Parser(compilerEnv, errorReporter);\n    AstRoot astRoot \u003d null;\n    try {\n        astRoot \u003d p.parse(sourceString, sourceName, 1);\n    } catch (EvaluatorException e) {\n        logger.info(\"Error parsing \" + sourceName + \": \" + e.getMessage());\n    } finally {\n        Context.exit();\n    }\n    Node root \u003d null;\n    if (astRoot !\u003d null) {\n        root \u003d IRFactory.transformTree(astRoot, sourceString, config, errorReporter);\n        root.setIsSyntheticBlock(true);\n    }\n    return root;\n}",
      "path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
      "functionStartLine": 90,
      "functionName": "parse",
      "functionAnnotation": "",
      "functionDoc": "Parses the JavaScript text given by a reader.\n\n@param sourceName The filename.\n@param sourceString Source code from the file.\n@param errorReporter An error.\n@param logger A logger.\n@return The AST of the given text.\n@throws IOException\n",
      "diff": "@@ -1,29 +1,31 @@\n public static Node parse(String sourceName, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n     Context cx \u003d Context.enter();\n     cx.setErrorReporter(errorReporter);\n     cx.setLanguageVersion(Context.VERSION_1_5);\n     CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n     compilerEnv.initFromContext(cx);\n     compilerEnv.setRecordingComments(true);\n     compilerEnv.setRecordingLocalJsDocComments(true);\n-    compilerEnv.setWarnTrailingComma(!config.acceptES5);\n-    if (config.isIdeMode) {\n+    compilerEnv.setWarnTrailingComma(config.languageMode \u003d\u003d LanguageMode.ECMASCRIPT3);\n+    if (config.isIdeMode || config.languageMode !\u003d LanguageMode.ECMASCRIPT3) {\n         compilerEnv.setReservedKeywordAsIdentifier(true);\n+    }\n+    if (config.isIdeMode) {\n         compilerEnv.setAllowMemberExprAsFunctionName(true);\n     }\n     Parser p \u003d new Parser(compilerEnv, errorReporter);\n     AstRoot astRoot \u003d null;\n     try {\n         astRoot \u003d p.parse(sourceString, sourceName, 1);\n     } catch (EvaluatorException e) {\n         logger.info(\"Error parsing \" + sourceName + \": \" + e.getMessage());\n     } finally {\n         Context.exit();\n     }\n     Node root \u003d null;\n     if (astRoot !\u003d null) {\n         root \u003d IRFactory.transformTree(astRoot, sourceString, config, errorReporter);\n         root.setIsSyntheticBlock(true);\n     }\n     return root;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7fbff508f8590793108aa192a1898dc617e7b040": {
      "type": "Ybodychange",
      "commitMessage": "\nDon\u0027t warn about trailing commas in ES5 mode.  ES5 allows it and IE9 handles it propertly.\n\nR\u003dnicksantos\nDELTA\u003d9  (8 added, 0 deleted, 1 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d764\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@851 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/4/11, 11:41 AM",
      "commitName": "7fbff508f8590793108aa192a1898dc617e7b040",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "2/8/11, 9:38 PM",
      "commitNameOld": "d38121222cc7c1d5e8dd2c34dcea4c2dc7468450",
      "commitAuthorOld": "kochi@google.com",
      "daysBetweenCommits": 23.59,
      "commitsBetweenForRepo": 78,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Node parse(String sourceName, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n    Context cx \u003d Context.enter();\n    cx.setErrorReporter(errorReporter);\n    cx.setLanguageVersion(Context.VERSION_1_5);\n    CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n    compilerEnv.initFromContext(cx);\n    compilerEnv.setRecordingComments(true);\n    compilerEnv.setRecordingLocalJsDocComments(true);\n    compilerEnv.setWarnTrailingComma(!config.acceptES5);\n    if (config.isIdeMode) {\n        compilerEnv.setReservedKeywordAsIdentifier(true);\n        compilerEnv.setAllowMemberExprAsFunctionName(true);\n    }\n    Parser p \u003d new Parser(compilerEnv, errorReporter);\n    AstRoot astRoot \u003d null;\n    try {\n        astRoot \u003d p.parse(sourceString, sourceName, 1);\n    } catch (EvaluatorException e) {\n        logger.info(\"Error parsing \" + sourceName + \": \" + e.getMessage());\n    } finally {\n        Context.exit();\n    }\n    Node root \u003d null;\n    if (astRoot !\u003d null) {\n        root \u003d IRFactory.transformTree(astRoot, sourceString, config, errorReporter);\n        root.setIsSyntheticBlock(true);\n    }\n    return root;\n}",
      "path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
      "functionStartLine": 93,
      "functionName": "parse",
      "functionAnnotation": "",
      "functionDoc": "Parses the JavaScript text given by a reader.\n\n@param sourceName The filename.\n@param sourceString Source code from the file.\n@param errorReporter An error.\n@param logger A logger.\n@return The AST of the given text.\n@throws IOException\n",
      "diff": "@@ -1,29 +1,29 @@\n public static Node parse(String sourceName, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n     Context cx \u003d Context.enter();\n     cx.setErrorReporter(errorReporter);\n     cx.setLanguageVersion(Context.VERSION_1_5);\n     CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n     compilerEnv.initFromContext(cx);\n     compilerEnv.setRecordingComments(true);\n     compilerEnv.setRecordingLocalJsDocComments(true);\n-    compilerEnv.setWarnTrailingComma(true);\n+    compilerEnv.setWarnTrailingComma(!config.acceptES5);\n     if (config.isIdeMode) {\n         compilerEnv.setReservedKeywordAsIdentifier(true);\n         compilerEnv.setAllowMemberExprAsFunctionName(true);\n     }\n     Parser p \u003d new Parser(compilerEnv, errorReporter);\n     AstRoot astRoot \u003d null;\n     try {\n         astRoot \u003d p.parse(sourceString, sourceName, 1);\n     } catch (EvaluatorException e) {\n         logger.info(\"Error parsing \" + sourceName + \": \" + e.getMessage());\n     } finally {\n         Context.exit();\n     }\n     Node root \u003d null;\n     if (astRoot !\u003d null) {\n         root \u003d IRFactory.transformTree(astRoot, sourceString, config, errorReporter);\n         root.setIsSyntheticBlock(true);\n     }\n     return root;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "295c978bfbf070d28214b27239cd26aaea58b6d4": {
      "type": "Ydocchange",
      "commitMessage": "Minor cleanup. (John)\nR\u003drobert\nDELTA\u003d5  (1 added, 4 deleted, 0 changed)\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@140 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/17/10, 1:06 PM",
      "commitName": "295c978bfbf070d28214b27239cd26aaea58b6d4",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "2/12/10, 11:40 AM",
      "commitNameOld": "b8c52bf5e76948ee8d561fa55a36cc6c9f5d0c68",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 33.02,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Node parse(String sourceName, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n    Context cx \u003d Context.enter();\n    cx.setErrorReporter(errorReporter);\n    cx.setLanguageVersion(Context.VERSION_1_5);\n    CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n    compilerEnv.initFromContext(cx);\n    compilerEnv.setRecordingComments(true);\n    compilerEnv.setRecordingLocalJsDocComments(true);\n    compilerEnv.setWarnTrailingComma(true);\n    if (config.isIdeMode) {\n        compilerEnv.setReservedKeywordAsIdentifier(true);\n        compilerEnv.setAllowMemberExprAsFunctionName(true);\n    }\n    Parser p \u003d new Parser(compilerEnv, errorReporter);\n    AstRoot astRoot \u003d null;\n    try {\n        astRoot \u003d p.parse(sourceString, sourceName, 1);\n    } catch (EvaluatorException e) {\n        logger.info(\"Error parsing \" + sourceName + \": \" + e.getMessage());\n    } finally {\n        Context.exit();\n    }\n    Node root \u003d null;\n    if (astRoot !\u003d null) {\n        root \u003d IRFactory.transformTree(astRoot, sourceString, config, errorReporter);\n        root.setIsSyntheticBlock(true);\n    }\n    return root;\n}",
      "path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
      "functionStartLine": 84,
      "functionName": "parse",
      "functionAnnotation": "",
      "functionDoc": "Parses the JavaScript text given by a reader.\n\n@param sourceName The filename.\n@param sourceString Source code from the file.\n@param errorReporter An error.\n@param logger A logger.\n@return The AST of the given text.\n@throws IOException\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Parses the JavaScript text given by a reader.\n\n@param sourceName The filename.\n@param sourceString Source code from the file.\n@param isIdeMode Whether in IDE mode, which affects the environment.\n@param typeRegistry The type registry.\n@param errorReporter An error.\n@param logger A logger.\n@return The AST of the given text.\n@throws IOException\n",
        "newValue": "Parses the JavaScript text given by a reader.\n\n@param sourceName The filename.\n@param sourceString Source code from the file.\n@param errorReporter An error.\n@param logger A logger.\n@return The AST of the given text.\n@throws IOException\n"
      }
    },
    "b8c52bf5e76948ee8d561fa55a36cc6c9f5d0c68": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Fix a null pointer exception in FunctionType.\n\nFix a bug in @export generation.\n\nRemove references to StringUtil.\n\nOnly create one ParserConfig per compilation process.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@104 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/12/10, 11:40 AM",
      "commitName": "b8c52bf5e76948ee8d561fa55a36cc6c9f5d0c68",
      "commitAuthor": "Nicholas.J.Santos",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Fix a null pointer exception in FunctionType.\n\nFix a bug in @export generation.\n\nRemove references to StringUtil.\n\nOnly create one ParserConfig per compilation process.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@104 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "2/12/10, 11:40 AM",
          "commitName": "b8c52bf5e76948ee8d561fa55a36cc6c9f5d0c68",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "11/3/09, 3:51 PM",
          "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 100.83,
          "commitsBetweenForRepo": 77,
          "commitsBetweenForFile": 1,
          "actualSource": "public static Node parse(String sourceName, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n    Context cx \u003d Context.enter();\n    cx.setErrorReporter(errorReporter);\n    cx.setLanguageVersion(Context.VERSION_1_5);\n    CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n    compilerEnv.initFromContext(cx);\n    compilerEnv.setRecordingComments(true);\n    compilerEnv.setRecordingLocalJsDocComments(true);\n    compilerEnv.setWarnTrailingComma(true);\n    if (config.isIdeMode) {\n        compilerEnv.setReservedKeywordAsIdentifier(true);\n        compilerEnv.setAllowMemberExprAsFunctionName(true);\n    }\n    Parser p \u003d new Parser(compilerEnv, errorReporter);\n    AstRoot astRoot \u003d null;\n    try {\n        astRoot \u003d p.parse(sourceString, sourceName, 1);\n    } catch (EvaluatorException e) {\n        logger.info(\"Error parsing \" + sourceName + \": \" + e.getMessage());\n    } finally {\n        Context.exit();\n    }\n    Node root \u003d null;\n    if (astRoot !\u003d null) {\n        root \u003d IRFactory.transformTree(astRoot, sourceString, config, errorReporter);\n        root.setIsSyntheticBlock(true);\n    }\n    return root;\n}",
          "path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
          "functionStartLine": 86,
          "functionName": "parse",
          "functionAnnotation": "",
          "functionDoc": "Parses the JavaScript text given by a reader.\n\n@param sourceName The filename.\n@param sourceString Source code from the file.\n@param isIdeMode Whether in IDE mode, which affects the environment.\n@param typeRegistry The type registry.\n@param errorReporter An error.\n@param logger A logger.\n@return The AST of the given text.\n@throws IOException\n",
          "diff": "@@ -1,31 +1,29 @@\n-public static Node parse(String sourceName, String sourceString, boolean isIdeMode, JSTypeRegistry typeRegistry, ErrorReporter errorReporter, Logger logger) throws IOException {\n-    initAnnotationNames();\n+public static Node parse(String sourceName, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n     Context cx \u003d Context.enter();\n     cx.setErrorReporter(errorReporter);\n     cx.setLanguageVersion(Context.VERSION_1_5);\n     CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n     compilerEnv.initFromContext(cx);\n     compilerEnv.setRecordingComments(true);\n     compilerEnv.setRecordingLocalJsDocComments(true);\n     compilerEnv.setWarnTrailingComma(true);\n-    if (isIdeMode) {\n+    if (config.isIdeMode) {\n         compilerEnv.setReservedKeywordAsIdentifier(true);\n         compilerEnv.setAllowMemberExprAsFunctionName(true);\n     }\n     Parser p \u003d new Parser(compilerEnv, errorReporter);\n     AstRoot astRoot \u003d null;\n     try {\n         astRoot \u003d p.parse(sourceString, sourceName, 1);\n     } catch (EvaluatorException e) {\n         logger.info(\"Error parsing \" + sourceName + \": \" + e.getMessage());\n     } finally {\n         Context.exit();\n     }\n     Node root \u003d null;\n     if (astRoot !\u003d null) {\n-        Config config \u003d new Config(typeRegistry, annotationNames, isIdeMode);\n         root \u003d IRFactory.transformTree(astRoot, sourceString, config, errorReporter);\n         root.setIsSyntheticBlock(true);\n     }\n     return root;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[sourceName-String, sourceString-String, isIdeMode-boolean, typeRegistry-JSTypeRegistry, errorReporter-ErrorReporter, logger-Logger]",
            "newValue": "[sourceName-String, sourceString-String, config-Config, errorReporter-ErrorReporter, logger-Logger]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Fix a null pointer exception in FunctionType.\n\nFix a bug in @export generation.\n\nRemove references to StringUtil.\n\nOnly create one ParserConfig per compilation process.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@104 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "2/12/10, 11:40 AM",
          "commitName": "b8c52bf5e76948ee8d561fa55a36cc6c9f5d0c68",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "11/3/09, 3:51 PM",
          "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 100.83,
          "commitsBetweenForRepo": 77,
          "commitsBetweenForFile": 1,
          "actualSource": "public static Node parse(String sourceName, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n    Context cx \u003d Context.enter();\n    cx.setErrorReporter(errorReporter);\n    cx.setLanguageVersion(Context.VERSION_1_5);\n    CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n    compilerEnv.initFromContext(cx);\n    compilerEnv.setRecordingComments(true);\n    compilerEnv.setRecordingLocalJsDocComments(true);\n    compilerEnv.setWarnTrailingComma(true);\n    if (config.isIdeMode) {\n        compilerEnv.setReservedKeywordAsIdentifier(true);\n        compilerEnv.setAllowMemberExprAsFunctionName(true);\n    }\n    Parser p \u003d new Parser(compilerEnv, errorReporter);\n    AstRoot astRoot \u003d null;\n    try {\n        astRoot \u003d p.parse(sourceString, sourceName, 1);\n    } catch (EvaluatorException e) {\n        logger.info(\"Error parsing \" + sourceName + \": \" + e.getMessage());\n    } finally {\n        Context.exit();\n    }\n    Node root \u003d null;\n    if (astRoot !\u003d null) {\n        root \u003d IRFactory.transformTree(astRoot, sourceString, config, errorReporter);\n        root.setIsSyntheticBlock(true);\n    }\n    return root;\n}",
          "path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
          "functionStartLine": 86,
          "functionName": "parse",
          "functionAnnotation": "",
          "functionDoc": "Parses the JavaScript text given by a reader.\n\n@param sourceName The filename.\n@param sourceString Source code from the file.\n@param isIdeMode Whether in IDE mode, which affects the environment.\n@param typeRegistry The type registry.\n@param errorReporter An error.\n@param logger A logger.\n@return The AST of the given text.\n@throws IOException\n",
          "diff": "@@ -1,31 +1,29 @@\n-public static Node parse(String sourceName, String sourceString, boolean isIdeMode, JSTypeRegistry typeRegistry, ErrorReporter errorReporter, Logger logger) throws IOException {\n-    initAnnotationNames();\n+public static Node parse(String sourceName, String sourceString, Config config, ErrorReporter errorReporter, Logger logger) throws IOException {\n     Context cx \u003d Context.enter();\n     cx.setErrorReporter(errorReporter);\n     cx.setLanguageVersion(Context.VERSION_1_5);\n     CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n     compilerEnv.initFromContext(cx);\n     compilerEnv.setRecordingComments(true);\n     compilerEnv.setRecordingLocalJsDocComments(true);\n     compilerEnv.setWarnTrailingComma(true);\n-    if (isIdeMode) {\n+    if (config.isIdeMode) {\n         compilerEnv.setReservedKeywordAsIdentifier(true);\n         compilerEnv.setAllowMemberExprAsFunctionName(true);\n     }\n     Parser p \u003d new Parser(compilerEnv, errorReporter);\n     AstRoot astRoot \u003d null;\n     try {\n         astRoot \u003d p.parse(sourceString, sourceName, 1);\n     } catch (EvaluatorException e) {\n         logger.info(\"Error parsing \" + sourceName + \": \" + e.getMessage());\n     } finally {\n         Context.exit();\n     }\n     Node root \u003d null;\n     if (astRoot !\u003d null) {\n-        Config config \u003d new Config(typeRegistry, annotationNames, isIdeMode);\n         root \u003d IRFactory.transformTree(astRoot, sourceString, config, errorReporter);\n         root.setIsSyntheticBlock(true);\n     }\n     return root;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,31 @@\n+public static Node parse(String sourceName, String sourceString, boolean isIdeMode, JSTypeRegistry typeRegistry, ErrorReporter errorReporter, Logger logger) throws IOException {\n+    initAnnotationNames();\n+    Context cx \u003d Context.enter();\n+    cx.setErrorReporter(errorReporter);\n+    cx.setLanguageVersion(Context.VERSION_1_5);\n+    CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n+    compilerEnv.initFromContext(cx);\n+    compilerEnv.setRecordingComments(true);\n+    compilerEnv.setRecordingLocalJsDocComments(true);\n+    compilerEnv.setWarnTrailingComma(true);\n+    if (isIdeMode) {\n+        compilerEnv.setReservedKeywordAsIdentifier(true);\n+        compilerEnv.setAllowMemberExprAsFunctionName(true);\n+    }\n+    Parser p \u003d new Parser(compilerEnv, errorReporter);\n+    AstRoot astRoot \u003d null;\n+    try {\n+        astRoot \u003d p.parse(sourceString, sourceName, 1);\n+    } catch (EvaluatorException e) {\n+        logger.info(\"Error parsing \" + sourceName + \": \" + e.getMessage());\n+    } finally {\n+        Context.exit();\n+    }\n+    Node root \u003d null;\n+    if (astRoot !\u003d null) {\n+        Config config \u003d new Config(typeRegistry, annotationNames, isIdeMode);\n+        root \u003d IRFactory.transformTree(astRoot, sourceString, config, errorReporter);\n+        root.setIsSyntheticBlock(true);\n+    }\n+    return root;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public static Node parse(String sourceName, String sourceString, boolean isIdeMode, JSTypeRegistry typeRegistry, ErrorReporter errorReporter, Logger logger) throws IOException {\n    initAnnotationNames();\n    Context cx \u003d Context.enter();\n    cx.setErrorReporter(errorReporter);\n    cx.setLanguageVersion(Context.VERSION_1_5);\n    CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n    compilerEnv.initFromContext(cx);\n    compilerEnv.setRecordingComments(true);\n    compilerEnv.setRecordingLocalJsDocComments(true);\n    compilerEnv.setWarnTrailingComma(true);\n    if (isIdeMode) {\n        compilerEnv.setReservedKeywordAsIdentifier(true);\n        compilerEnv.setAllowMemberExprAsFunctionName(true);\n    }\n    Parser p \u003d new Parser(compilerEnv, errorReporter);\n    AstRoot astRoot \u003d null;\n    try {\n        astRoot \u003d p.parse(sourceString, sourceName, 1);\n    } catch (EvaluatorException e) {\n        logger.info(\"Error parsing \" + sourceName + \": \" + e.getMessage());\n    } finally {\n        Context.exit();\n    }\n    Node root \u003d null;\n    if (astRoot !\u003d null) {\n        Config config \u003d new Config(typeRegistry, annotationNames, isIdeMode);\n        root \u003d IRFactory.transformTree(astRoot, sourceString, config, errorReporter);\n        root.setIsSyntheticBlock(true);\n    }\n    return root;\n}",
      "path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
      "functionStartLine": 80,
      "functionName": "parse",
      "functionAnnotation": "",
      "functionDoc": "Parses the JavaScript text given by a reader.\n\n@param sourceName The filename.\n@param sourceString Source code from the file.\n@param isIdeMode Whether in IDE mode, which affects the environment.\n@param typeRegistry The type registry.\n@param errorReporter An error.\n@param logger A logger.\n@return The AST of the given text.\n@throws IOException\n"
    }
  }
}