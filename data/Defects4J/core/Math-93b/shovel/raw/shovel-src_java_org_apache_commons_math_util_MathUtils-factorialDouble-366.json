{
  "origin": "codeshovel",
  "repositoryName": "Math-93b",
  "repositoryPath": "/tmp/Math-93b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MathUtils.java",
  "functionName": "factorialDouble",
  "functionId": "factorialDouble___n-int(modifiers-final)",
  "sourceFilePath": "src/java/org/apache/commons/math/util/MathUtils.java",
  "functionAnnotation": "",
  "functionDoc": "Returns n!. Shorthand for \u003ccode\u003en\u003c/code\u003e \u003ca\nhref\u003d\"http://mathworld.wolfram.com/Factorial.html\"\u003e Factorial\u003c/a\u003e, the\nproduct of the numbers \u003ccode\u003e1,...,n\u003c/code\u003e as a \u003ccode\u003edouble\u003c/code\u003e.\n\u003cp\u003e\n\u003cStrong\u003ePreconditions\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003e \u003ccode\u003en \u003e\u003d 0\u003c/code\u003e (otherwise\n\u003ccode\u003eIllegalArgumentException\u003c/code\u003e is thrown)\u003c/li\u003e\n\u003cli\u003e The result is small enough to fit into a \u003ccode\u003edouble\u003c/code\u003e. The\nlargest value of \u003ccode\u003en\u003c/code\u003e for which \u003ccode\u003en!\u003c/code\u003e \u003c\nDouble.MAX_VALUE\u003c/code\u003e is 170. If the computed value exceeds\nDouble.MAX_VALUE, Double.POSITIVE_INFINITY is returned\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\n@param n argument\n@return \u003ccode\u003en!\u003c/code\u003e\n@throws IllegalArgumentException if n \u003c 0\n",
  "functionStartLine": 366,
  "functionEndLine": 371,
  "numCommitsSeen": 49,
  "timeTaken": 1543,
  "changeHistory": [
    "b1ade04fc274a2030fcf1df2c760755eeb83bf1b",
    "d79a0a65d87f9027fba31d5655d6f9b2f379bb80",
    "0a904461932f2c0455611e77ec6a8d8aced2980b"
  ],
  "changeHistoryShort": {
    "b1ade04fc274a2030fcf1df2c760755eeb83bf1b": "Ydocchange",
    "d79a0a65d87f9027fba31d5655d6f9b2f379bb80": "Ymultichange(Ybodychange,Ydocchange)",
    "0a904461932f2c0455611e77ec6a8d8aced2980b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b1ade04fc274a2030fcf1df2c760755eeb83bf1b": {
      "type": "Ydocchange",
      "commitMessage": "PR: 35904\nChanged rounding methods to not rely on BigDecimal conversions which was causing numerical error.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@231029 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/9/05, 6:10 AM",
      "commitName": "b1ade04fc274a2030fcf1df2c760755eeb83bf1b",
      "commitAuthor": "Brent Worden",
      "commitDateOld": "7/30/05, 12:25 AM",
      "commitNameOld": "7153fa9be229ee078c7026dba8c9b2be3d791ed2",
      "commitAuthorOld": "Phil Steitz",
      "daysBetweenCommits": 10.24,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "public static double factorialDouble(final int n) {\n    if (n \u003c 0) {\n        throw new IllegalArgumentException(\"must have n \u003e\u003d 0 for n!\");\n    }\n    return Math.floor(Math.exp(factorialLog(n)) + 0.5);\n}",
      "path": "src/java/org/apache/commons/math/util/MathUtils.java",
      "functionStartLine": 265,
      "functionName": "factorialDouble",
      "functionAnnotation": "",
      "functionDoc": "Returns n!. Shorthand for \u003ccode\u003en\u003c/code\u003e \u003ca\nhref\u003d\"http://mathworld.wolfram.com/Factorial.html\"\u003e Factorial\u003c/a\u003e, the\nproduct of the numbers \u003ccode\u003e1,...,n\u003c/code\u003e as a \u003ccode\u003edouble\u003c/code\u003e.\n\u003cp\u003e\n\u003cStrong\u003ePreconditions\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003e \u003ccode\u003en \u003e\u003d 0\u003c/code\u003e (otherwise\n\u003ccode\u003eIllegalArgumentException\u003c/code\u003e is thrown)\u003c/li\u003e\n\u003cli\u003e The result is small enough to fit into a \u003ccode\u003edouble\u003c/code\u003e. The\nlargest value of \u003ccode\u003en\u003c/code\u003e for which \u003ccode\u003en!\u003c/code\u003e \u003c\nDouble.MAX_VALUE\u003c/code\u003e is 170. If the computed value exceeds\nDouble.MAX_VALUE, Double.POSITIVE_INFINITY is returned\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\n@param n argument\n@return \u003ccode\u003en!\u003c/code\u003e\n@throws IllegalArgumentException if n \u003c 0\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Returns n!.  Shorthand for \u003ccode\u003en\u003c/code\u003e\n\u003ca href\u003d\"http://mathworld.wolfram.com/Factorial.html\"\u003e\nFactorial\u003c/a\u003e, the product of the numbers \u003ccode\u003e1,...,n\u003c/code\u003e as a\n\u003ccode\u003edouble\u003c/code\u003e.\n\n\u003cp\u003e\n\u003cStrong\u003ePreconditions\u003c/strong\u003e:\u003cul\u003e\n\u003cli\u003e \u003ccode\u003en \u003e\u003d 0\u003c/code\u003e (otherwise\n     \u003ccode\u003eIllegalArgumentException\u003c/code\u003e is thrown)\u003c/li\u003e\n\u003cli\u003e The result is small enough to fit into a \u003ccode\u003edouble\u003c/code\u003e.  The\n     largest value of \u003ccode\u003en\u003c/code\u003e for which \u003ccode\u003en!\u003c/code\u003e\n     \u003c Double.MAX_VALUE\u003c/code\u003e is 170.  If the computed value exceeds\n     Double.MAX_VALUE, Double.POSITIVE_INFINITY is returned\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\n@param n argument\n@return \u003ccode\u003en!\u003c/code\u003e\n@throws IllegalArgumentException if n \u003c 0\n",
        "newValue": "Returns n!. Shorthand for \u003ccode\u003en\u003c/code\u003e \u003ca\nhref\u003d\"http://mathworld.wolfram.com/Factorial.html\"\u003e Factorial\u003c/a\u003e, the\nproduct of the numbers \u003ccode\u003e1,...,n\u003c/code\u003e as a \u003ccode\u003edouble\u003c/code\u003e.\n\u003cp\u003e\n\u003cStrong\u003ePreconditions\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003e \u003ccode\u003en \u003e\u003d 0\u003c/code\u003e (otherwise\n\u003ccode\u003eIllegalArgumentException\u003c/code\u003e is thrown)\u003c/li\u003e\n\u003cli\u003e The result is small enough to fit into a \u003ccode\u003edouble\u003c/code\u003e. The\nlargest value of \u003ccode\u003en\u003c/code\u003e for which \u003ccode\u003en!\u003c/code\u003e \u003c\nDouble.MAX_VALUE\u003c/code\u003e is 170. If the computed value exceeds\nDouble.MAX_VALUE, Double.POSITIVE_INFINITY is returned\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\n@param n argument\n@return \u003ccode\u003en!\u003c/code\u003e\n@throws IllegalArgumentException if n \u003c 0\n"
      }
    },
    "d79a0a65d87f9027fba31d5655d6f9b2f379bb80": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Changed factorial methods to return 1 for argument \u003d 0.\nPr #31687\nReported by: Fredrik Norin\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141473 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/13/04, 9:01 PM",
      "commitName": "d79a0a65d87f9027fba31d5655d6f9b2f379bb80",
      "commitAuthor": "Phil Steitz",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Changed factorial methods to return 1 for argument \u003d 0.\nPr #31687\nReported by: Fredrik Norin\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141473 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/13/04, 9:01 PM",
          "commitName": "d79a0a65d87f9027fba31d5655d6f9b2f379bb80",
          "commitAuthor": "Phil Steitz",
          "commitDateOld": "6/23/04, 9:26 AM",
          "commitNameOld": "7b22aec5529fb3bad1e8098938271398d13c92ba",
          "commitAuthorOld": "Brent Worden",
          "daysBetweenCommits": 112.48,
          "commitsBetweenForRepo": 141,
          "commitsBetweenForFile": 1,
          "actualSource": "public static double factorialDouble(final int n) {\n    if (n \u003c 0) {\n        throw new IllegalArgumentException(\"must have n \u003e\u003d 0 for n!\");\n    }\n    return Math.floor(Math.exp(factorialLog(n)) + 0.5);\n}",
          "path": "src/java/org/apache/commons/math/util/MathUtils.java",
          "functionStartLine": 397,
          "functionName": "factorialDouble",
          "functionAnnotation": "",
          "functionDoc": "Returns n!.  Shorthand for \u003ccode\u003en\u003c/code\u003e\n\u003ca href\u003d\"http://mathworld.wolfram.com/Factorial.html\"\u003e\nFactorial\u003c/a\u003e, the product of the numbers \u003ccode\u003e1,...,n\u003c/code\u003e as a\n\u003ccode\u003edouble\u003c/code\u003e.\n\n\u003cp\u003e\n\u003cStrong\u003ePreconditions\u003c/strong\u003e:\u003cul\u003e\n\u003cli\u003e \u003ccode\u003en \u003e\u003d 0\u003c/code\u003e (otherwise\n     \u003ccode\u003eIllegalArgumentException\u003c/code\u003e is thrown)\u003c/li\u003e\n\u003cli\u003e The result is small enough to fit into a \u003ccode\u003edouble\u003c/code\u003e.  The\n     largest value of \u003ccode\u003en\u003c/code\u003e for which \u003ccode\u003en!\u003c/code\u003e\n     \u003c Double.MAX_VALUE\u003c/code\u003e is 170.  If the computed value exceeds\n     Double.MAX_VALUE, Double.POSITIVE_INFINITY is returned\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\n@param n argument\n@return \u003ccode\u003en!\u003c/code\u003e\n@throws IllegalArgumentException if n \u003c 0\n",
          "diff": "@@ -1,6 +1,6 @@\n public static double factorialDouble(final int n) {\n-    if (n \u003c\u003d 0) {\n-        throw new IllegalArgumentException(\"must have n \u003e 0 for n!\");\n+    if (n \u003c 0) {\n+        throw new IllegalArgumentException(\"must have n \u003e\u003d 0 for n!\");\n     }\n     return Math.floor(Math.exp(factorialLog(n)) + 0.5);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Changed factorial methods to return 1 for argument \u003d 0.\nPr #31687\nReported by: Fredrik Norin\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141473 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/13/04, 9:01 PM",
          "commitName": "d79a0a65d87f9027fba31d5655d6f9b2f379bb80",
          "commitAuthor": "Phil Steitz",
          "commitDateOld": "6/23/04, 9:26 AM",
          "commitNameOld": "7b22aec5529fb3bad1e8098938271398d13c92ba",
          "commitAuthorOld": "Brent Worden",
          "daysBetweenCommits": 112.48,
          "commitsBetweenForRepo": 141,
          "commitsBetweenForFile": 1,
          "actualSource": "public static double factorialDouble(final int n) {\n    if (n \u003c 0) {\n        throw new IllegalArgumentException(\"must have n \u003e\u003d 0 for n!\");\n    }\n    return Math.floor(Math.exp(factorialLog(n)) + 0.5);\n}",
          "path": "src/java/org/apache/commons/math/util/MathUtils.java",
          "functionStartLine": 397,
          "functionName": "factorialDouble",
          "functionAnnotation": "",
          "functionDoc": "Returns n!.  Shorthand for \u003ccode\u003en\u003c/code\u003e\n\u003ca href\u003d\"http://mathworld.wolfram.com/Factorial.html\"\u003e\nFactorial\u003c/a\u003e, the product of the numbers \u003ccode\u003e1,...,n\u003c/code\u003e as a\n\u003ccode\u003edouble\u003c/code\u003e.\n\n\u003cp\u003e\n\u003cStrong\u003ePreconditions\u003c/strong\u003e:\u003cul\u003e\n\u003cli\u003e \u003ccode\u003en \u003e\u003d 0\u003c/code\u003e (otherwise\n     \u003ccode\u003eIllegalArgumentException\u003c/code\u003e is thrown)\u003c/li\u003e\n\u003cli\u003e The result is small enough to fit into a \u003ccode\u003edouble\u003c/code\u003e.  The\n     largest value of \u003ccode\u003en\u003c/code\u003e for which \u003ccode\u003en!\u003c/code\u003e\n     \u003c Double.MAX_VALUE\u003c/code\u003e is 170.  If the computed value exceeds\n     Double.MAX_VALUE, Double.POSITIVE_INFINITY is returned\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\n@param n argument\n@return \u003ccode\u003en!\u003c/code\u003e\n@throws IllegalArgumentException if n \u003c 0\n",
          "diff": "@@ -1,6 +1,6 @@\n public static double factorialDouble(final int n) {\n-    if (n \u003c\u003d 0) {\n-        throw new IllegalArgumentException(\"must have n \u003e 0 for n!\");\n+    if (n \u003c 0) {\n+        throw new IllegalArgumentException(\"must have n \u003e\u003d 0 for n!\");\n     }\n     return Math.floor(Math.exp(factorialLog(n)) + 0.5);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Returns n!.  Shorthand for \u003ccode\u003en\u003c/code\u003e\n\u003ca href\u003d\"http://mathworld.wolfram.com/Factorial.html\"\u003e\nFactorial\u003c/a\u003e, the product of the numbers \u003ccode\u003e1,...,n\u003c/code\u003e as a\n\u003ccode\u003edouble\u003c/code\u003e.\n\n\u003cp\u003e\n\u003cStrong\u003ePreconditions\u003c/strong\u003e:\u003cul\u003e\n\u003cli\u003e \u003ccode\u003en \u003e 0\u003c/code\u003e (otherwise\n     \u003ccode\u003eIllegalArgumentException\u003c/code\u003e is thrown)\u003c/li\u003e\n\u003cli\u003e The result is small enough to fit into a \u003ccode\u003edouble\u003c/code\u003e.  The\n     largest value of \u003ccode\u003en\u003c/code\u003e for which \u003ccode\u003en!\u003c/code\u003e\n     \u003c Double.MAX_VALUE\u003c/code\u003e is 170.  If the computed value exceeds\n     Double.MAX_VALUE, Double.POSITIVE_INFINITY is returned\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\n@param n argument\n@return \u003ccode\u003en!\u003c/code\u003e\n",
            "newValue": "Returns n!.  Shorthand for \u003ccode\u003en\u003c/code\u003e\n\u003ca href\u003d\"http://mathworld.wolfram.com/Factorial.html\"\u003e\nFactorial\u003c/a\u003e, the product of the numbers \u003ccode\u003e1,...,n\u003c/code\u003e as a\n\u003ccode\u003edouble\u003c/code\u003e.\n\n\u003cp\u003e\n\u003cStrong\u003ePreconditions\u003c/strong\u003e:\u003cul\u003e\n\u003cli\u003e \u003ccode\u003en \u003e\u003d 0\u003c/code\u003e (otherwise\n     \u003ccode\u003eIllegalArgumentException\u003c/code\u003e is thrown)\u003c/li\u003e\n\u003cli\u003e The result is small enough to fit into a \u003ccode\u003edouble\u003c/code\u003e.  The\n     largest value of \u003ccode\u003en\u003c/code\u003e for which \u003ccode\u003en!\u003c/code\u003e\n     \u003c Double.MAX_VALUE\u003c/code\u003e is 170.  If the computed value exceeds\n     Double.MAX_VALUE, Double.POSITIVE_INFINITY is returned\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\n@param n argument\n@return \u003ccode\u003en!\u003c/code\u003e\n@throws IllegalArgumentException if n \u003c 0\n"
          }
        }
      ]
    },
    "0a904461932f2c0455611e77ec6a8d8aced2980b": {
      "type": "Yintroduced",
      "commitMessage": "Attempting to recover last revision.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141013 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/14/03, 2:25 PM",
      "commitName": "0a904461932f2c0455611e77ec6a8d8aced2980b",
      "commitAuthor": "Mark R. Diggory",
      "diff": "@@ -0,0 +1,6 @@\n+public static double factorialDouble(final int n) {\n+    if (n \u003c\u003d 0) {\n+        throw new IllegalArgumentException(\"must have n \u003e 0 for n!\");\n+    }\n+    return Math.floor(Math.exp(factorialLog(n)) + 0.5);\n+}\n\\ No newline at end of file\n",
      "actualSource": "public static double factorialDouble(final int n) {\n    if (n \u003c\u003d 0) {\n        throw new IllegalArgumentException(\"must have n \u003e 0 for n!\");\n    }\n    return Math.floor(Math.exp(factorialLog(n)) + 0.5);\n}",
      "path": "src/java/org/apache/commons/math/util/MathUtils.java",
      "functionStartLine": 325,
      "functionName": "factorialDouble",
      "functionAnnotation": "",
      "functionDoc": "Returns n!.  Shorthand for \u003ccode\u003en\u003c/code\u003e\n\u003ca href\u003d\"http://mathworld.wolfram.com/Factorial.html\"\u003e\nFactorial\u003c/a\u003e, the product of the numbers \u003ccode\u003e1,...,n\u003c/code\u003e as a\n\u003ccode\u003edouble\u003c/code\u003e.\n\n\u003cp\u003e\n\u003cStrong\u003ePreconditions\u003c/strong\u003e:\u003cul\u003e\n\u003cli\u003e \u003ccode\u003en \u003e 0\u003c/code\u003e (otherwise\n     \u003ccode\u003eIllegalArgumentException\u003c/code\u003e is thrown)\u003c/li\u003e\n\u003cli\u003e The result is small enough to fit into a \u003ccode\u003edouble\u003c/code\u003e.  The\n     largest value of \u003ccode\u003en\u003c/code\u003e for which \u003ccode\u003en!\u003c/code\u003e\n     \u003c Double.MAX_VALUE\u003c/code\u003e is 170.  If the computed value exceeds\n     Double.MAX_VALUE, Double.POSITIVE_INFINITY is returned\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\n@param n argument\n@return \u003ccode\u003en!\u003c/code\u003e\n"
    }
  }
}