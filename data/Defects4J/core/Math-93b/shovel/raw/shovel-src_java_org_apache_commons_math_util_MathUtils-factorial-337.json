{
  "origin": "codeshovel",
  "repositoryName": "Math-93b",
  "repositoryPath": "/tmp/Math-93b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MathUtils.java",
  "functionName": "factorial",
  "functionId": "factorial___n-int(modifiers-final)",
  "sourceFilePath": "src/java/org/apache/commons/math/util/MathUtils.java",
  "functionAnnotation": "",
  "functionDoc": "Returns n!. Shorthand for \u003ccode\u003en\u003c/code\u003e \u003ca\nhref\u003d\"http://mathworld.wolfram.com/Factorial.html\"\u003e Factorial\u003c/a\u003e, the\nproduct of the numbers \u003ccode\u003e1,...,n\u003c/code\u003e.\n\u003cp\u003e\n\u003cStrong\u003ePreconditions\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003e \u003ccode\u003en \u003e\u003d 0\u003c/code\u003e (otherwise\n\u003ccode\u003eIllegalArgumentException\u003c/code\u003e is thrown)\u003c/li\u003e\n\u003cli\u003e The result is small enough to fit into a \u003ccode\u003elong\u003c/code\u003e. The\nlargest value of \u003ccode\u003en\u003c/code\u003e for which \u003ccode\u003en!\u003c/code\u003e \u003c\nLong.MAX_VALUE\u003c/code\u003e is 20. If the computed value exceeds \u003ccode\u003eLong.MAX_VALUE\u003c/code\u003e\nan \u003ccode\u003eArithMeticException \u003c/code\u003e is thrown.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\n@param n argument\n@return \u003ccode\u003en!\u003c/code\u003e\n@throws ArithmeticException if the result is too large to be represented\n        by a long integer.\n@throws IllegalArgumentException if n \u003c 0\n",
  "functionStartLine": 337,
  "functionEndLine": 344,
  "numCommitsSeen": 49,
  "timeTaken": 1473,
  "changeHistory": [
    "b1ade04fc274a2030fcf1df2c760755eeb83bf1b",
    "d79a0a65d87f9027fba31d5655d6f9b2f379bb80",
    "206201617aae648e12f63d4ab8aa9751157e7e63",
    "04c3ab9b355b2c52e0178533068dd22586c0eabf",
    "0a904461932f2c0455611e77ec6a8d8aced2980b"
  ],
  "changeHistoryShort": {
    "b1ade04fc274a2030fcf1df2c760755eeb83bf1b": "Ymultichange(Ydocchange,Yformatchange)",
    "d79a0a65d87f9027fba31d5655d6f9b2f379bb80": "Ydocchange",
    "206201617aae648e12f63d4ab8aa9751157e7e63": "Ydocchange",
    "04c3ab9b355b2c52e0178533068dd22586c0eabf": "Yformatchange",
    "0a904461932f2c0455611e77ec6a8d8aced2980b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b1ade04fc274a2030fcf1df2c760755eeb83bf1b": {
      "type": "Ymultichange(Ydocchange,Yformatchange)",
      "commitMessage": "PR: 35904\nChanged rounding methods to not rely on BigDecimal conversions which was causing numerical error.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@231029 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/9/05, 6:10 AM",
      "commitName": "b1ade04fc274a2030fcf1df2c760755eeb83bf1b",
      "commitAuthor": "Brent Worden",
      "subchanges": [
        {
          "type": "Ydocchange",
          "commitMessage": "PR: 35904\nChanged rounding methods to not rely on BigDecimal conversions which was causing numerical error.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@231029 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "8/9/05, 6:10 AM",
          "commitName": "b1ade04fc274a2030fcf1df2c760755eeb83bf1b",
          "commitAuthor": "Brent Worden",
          "commitDateOld": "7/30/05, 12:25 AM",
          "commitNameOld": "7153fa9be229ee078c7026dba8c9b2be3d791ed2",
          "commitAuthorOld": "Phil Steitz",
          "daysBetweenCommits": 10.24,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "public static long factorial(final int n) {\n    long result \u003d Math.round(factorialDouble(n));\n    if (result \u003d\u003d Long.MAX_VALUE) {\n        throw new ArithmeticException(\"result too large to represent in a long integer\");\n    }\n    return result;\n}",
          "path": "src/java/org/apache/commons/math/util/MathUtils.java",
          "functionStartLine": 236,
          "functionName": "factorial",
          "functionAnnotation": "",
          "functionDoc": "Returns n!. Shorthand for \u003ccode\u003en\u003c/code\u003e \u003ca\nhref\u003d\"http://mathworld.wolfram.com/Factorial.html\"\u003e Factorial\u003c/a\u003e, the\nproduct of the numbers \u003ccode\u003e1,...,n\u003c/code\u003e.\n\u003cp\u003e\n\u003cStrong\u003ePreconditions\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003e \u003ccode\u003en \u003e\u003d 0\u003c/code\u003e (otherwise\n\u003ccode\u003eIllegalArgumentException\u003c/code\u003e is thrown)\u003c/li\u003e\n\u003cli\u003e The result is small enough to fit into a \u003ccode\u003elong\u003c/code\u003e. The\nlargest value of \u003ccode\u003en\u003c/code\u003e for which \u003ccode\u003en!\u003c/code\u003e \u003c\nLong.MAX_VALUE\u003c/code\u003e is 20. If the computed value exceeds \u003ccode\u003eLong.MAX_VALUE\u003c/code\u003e\nan \u003ccode\u003eArithMeticException \u003c/code\u003e is thrown.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\n@param n argument\n@return \u003ccode\u003en!\u003c/code\u003e\n@throws ArithmeticException if the result is too large to be represented\n        by a long integer.\n@throws IllegalArgumentException if n \u003c 0\n",
          "diff": "",
          "extendedDetails": {
            "oldValue": "Returns n!.  Shorthand for \u003ccode\u003en\u003c/code\u003e\n\u003ca href\u003d\"http://mathworld.wolfram.com/Factorial.html\"\u003e\nFactorial\u003c/a\u003e, the product of the numbers \u003ccode\u003e1,...,n\u003c/code\u003e.\n\n\u003cp\u003e\n\u003cStrong\u003ePreconditions\u003c/strong\u003e:\u003cul\u003e\n\u003cli\u003e \u003ccode\u003en \u003e\u003d 0\u003c/code\u003e (otherwise\n     \u003ccode\u003eIllegalArgumentException\u003c/code\u003e is thrown)\u003c/li\u003e\n\u003cli\u003e The result is small enough to fit into a \u003ccode\u003elong\u003c/code\u003e.  The\n     largest value of \u003ccode\u003en\u003c/code\u003e for which \u003ccode\u003en!\u003c/code\u003e\n     \u003c Long.MAX_VALUE\u003c/code\u003e is 20.  If the computed value\n     exceeds \u003ccode\u003eLong.MAX_VALUE\u003c/code\u003e an \u003ccode\u003eArithMeticException\n     \u003c/code\u003e is thrown.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\n@param n argument\n@return \u003ccode\u003en!\u003c/code\u003e\n@throws ArithmeticException if the result is too large to be represented\n        by a long integer.\n@throws IllegalArgumentException if n \u003c 0\n",
            "newValue": "Returns n!. Shorthand for \u003ccode\u003en\u003c/code\u003e \u003ca\nhref\u003d\"http://mathworld.wolfram.com/Factorial.html\"\u003e Factorial\u003c/a\u003e, the\nproduct of the numbers \u003ccode\u003e1,...,n\u003c/code\u003e.\n\u003cp\u003e\n\u003cStrong\u003ePreconditions\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003e \u003ccode\u003en \u003e\u003d 0\u003c/code\u003e (otherwise\n\u003ccode\u003eIllegalArgumentException\u003c/code\u003e is thrown)\u003c/li\u003e\n\u003cli\u003e The result is small enough to fit into a \u003ccode\u003elong\u003c/code\u003e. The\nlargest value of \u003ccode\u003en\u003c/code\u003e for which \u003ccode\u003en!\u003c/code\u003e \u003c\nLong.MAX_VALUE\u003c/code\u003e is 20. If the computed value exceeds \u003ccode\u003eLong.MAX_VALUE\u003c/code\u003e\nan \u003ccode\u003eArithMeticException \u003c/code\u003e is thrown.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\n@param n argument\n@return \u003ccode\u003en!\u003c/code\u003e\n@throws ArithmeticException if the result is too large to be represented\n        by a long integer.\n@throws IllegalArgumentException if n \u003c 0\n"
          }
        },
        {
          "type": "Yformatchange",
          "commitMessage": "PR: 35904\nChanged rounding methods to not rely on BigDecimal conversions which was causing numerical error.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@231029 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "8/9/05, 6:10 AM",
          "commitName": "b1ade04fc274a2030fcf1df2c760755eeb83bf1b",
          "commitAuthor": "Brent Worden",
          "commitDateOld": "7/30/05, 12:25 AM",
          "commitNameOld": "7153fa9be229ee078c7026dba8c9b2be3d791ed2",
          "commitAuthorOld": "Phil Steitz",
          "daysBetweenCommits": 10.24,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "public static long factorial(final int n) {\n    long result \u003d Math.round(factorialDouble(n));\n    if (result \u003d\u003d Long.MAX_VALUE) {\n        throw new ArithmeticException(\"result too large to represent in a long integer\");\n    }\n    return result;\n}",
          "path": "src/java/org/apache/commons/math/util/MathUtils.java",
          "functionStartLine": 236,
          "functionName": "factorial",
          "functionAnnotation": "",
          "functionDoc": "Returns n!. Shorthand for \u003ccode\u003en\u003c/code\u003e \u003ca\nhref\u003d\"http://mathworld.wolfram.com/Factorial.html\"\u003e Factorial\u003c/a\u003e, the\nproduct of the numbers \u003ccode\u003e1,...,n\u003c/code\u003e.\n\u003cp\u003e\n\u003cStrong\u003ePreconditions\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003e \u003ccode\u003en \u003e\u003d 0\u003c/code\u003e (otherwise\n\u003ccode\u003eIllegalArgumentException\u003c/code\u003e is thrown)\u003c/li\u003e\n\u003cli\u003e The result is small enough to fit into a \u003ccode\u003elong\u003c/code\u003e. The\nlargest value of \u003ccode\u003en\u003c/code\u003e for which \u003ccode\u003en!\u003c/code\u003e \u003c\nLong.MAX_VALUE\u003c/code\u003e is 20. If the computed value exceeds \u003ccode\u003eLong.MAX_VALUE\u003c/code\u003e\nan \u003ccode\u003eArithMeticException \u003c/code\u003e is thrown.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\n@param n argument\n@return \u003ccode\u003en!\u003c/code\u003e\n@throws ArithmeticException if the result is too large to be represented\n        by a long integer.\n@throws IllegalArgumentException if n \u003c 0\n",
          "diff": "",
          "extendedDetails": {}
        }
      ]
    },
    "d79a0a65d87f9027fba31d5655d6f9b2f379bb80": {
      "type": "Ydocchange",
      "commitMessage": "Changed factorial methods to return 1 for argument \u003d 0.\nPr #31687\nReported by: Fredrik Norin\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141473 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/13/04, 9:01 PM",
      "commitName": "d79a0a65d87f9027fba31d5655d6f9b2f379bb80",
      "commitAuthor": "Phil Steitz",
      "commitDateOld": "6/23/04, 9:26 AM",
      "commitNameOld": "7b22aec5529fb3bad1e8098938271398d13c92ba",
      "commitAuthorOld": "Brent Worden",
      "daysBetweenCommits": 112.48,
      "commitsBetweenForRepo": 141,
      "commitsBetweenForFile": 1,
      "actualSource": "public static long factorial(final int n) {\n    long result \u003d Math.round(factorialDouble(n));\n    if (result \u003d\u003d Long.MAX_VALUE) {\n        throw new ArithmeticException(\"result too large to represent in a long integer\");\n    }\n    return result;\n}",
      "path": "src/java/org/apache/commons/math/util/MathUtils.java",
      "functionStartLine": 367,
      "functionName": "factorial",
      "functionAnnotation": "",
      "functionDoc": "Returns n!.  Shorthand for \u003ccode\u003en\u003c/code\u003e\n\u003ca href\u003d\"http://mathworld.wolfram.com/Factorial.html\"\u003e\nFactorial\u003c/a\u003e, the product of the numbers \u003ccode\u003e1,...,n\u003c/code\u003e.\n\n\u003cp\u003e\n\u003cStrong\u003ePreconditions\u003c/strong\u003e:\u003cul\u003e\n\u003cli\u003e \u003ccode\u003en \u003e\u003d 0\u003c/code\u003e (otherwise\n     \u003ccode\u003eIllegalArgumentException\u003c/code\u003e is thrown)\u003c/li\u003e\n\u003cli\u003e The result is small enough to fit into a \u003ccode\u003elong\u003c/code\u003e.  The\n     largest value of \u003ccode\u003en\u003c/code\u003e for which \u003ccode\u003en!\u003c/code\u003e\n     \u003c Long.MAX_VALUE\u003c/code\u003e is 20.  If the computed value\n     exceeds \u003ccode\u003eLong.MAX_VALUE\u003c/code\u003e an \u003ccode\u003eArithMeticException\n     \u003c/code\u003e is thrown.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\n@param n argument\n@return \u003ccode\u003en!\u003c/code\u003e\n@throws ArithmeticException if the result is too large to be represented\n        by a long integer.\n@throws IllegalArgumentException if n \u003c 0\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Returns n!.  Shorthand for \u003ccode\u003en\u003c/code\u003e\n\u003ca href\u003d\"http://mathworld.wolfram.com/Factorial.html\"\u003e\nFactorial\u003c/a\u003e, the product of the numbers \u003ccode\u003e1,...,n\u003c/code\u003e.\n\n\u003cp\u003e\n\u003cStrong\u003ePreconditions\u003c/strong\u003e:\u003cul\u003e\n\u003cli\u003e \u003ccode\u003en \u003e 0\u003c/code\u003e (otherwise\n     \u003ccode\u003eIllegalArgumentException\u003c/code\u003e is thrown)\u003c/li\u003e\n\u003cli\u003e The result is small enough to fit into a \u003ccode\u003elong\u003c/code\u003e.  The\n     largest value of \u003ccode\u003en\u003c/code\u003e for which \u003ccode\u003en!\u003c/code\u003e\n     \u003c Long.MAX_VALUE\u003c/code\u003e is 20.  If the computed value\n     exceeds \u003ccode\u003eLong.MAX_VALUE\u003c/code\u003e an \u003ccode\u003eArithMeticException\n     \u003c/code\u003e is thrown.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\n@param n argument\n@return \u003ccode\u003en!\u003c/code\u003e\n@throws ArithmeticException if the result is too large to be represented\n        by a long integer.\n",
        "newValue": "Returns n!.  Shorthand for \u003ccode\u003en\u003c/code\u003e\n\u003ca href\u003d\"http://mathworld.wolfram.com/Factorial.html\"\u003e\nFactorial\u003c/a\u003e, the product of the numbers \u003ccode\u003e1,...,n\u003c/code\u003e.\n\n\u003cp\u003e\n\u003cStrong\u003ePreconditions\u003c/strong\u003e:\u003cul\u003e\n\u003cli\u003e \u003ccode\u003en \u003e\u003d 0\u003c/code\u003e (otherwise\n     \u003ccode\u003eIllegalArgumentException\u003c/code\u003e is thrown)\u003c/li\u003e\n\u003cli\u003e The result is small enough to fit into a \u003ccode\u003elong\u003c/code\u003e.  The\n     largest value of \u003ccode\u003en\u003c/code\u003e for which \u003ccode\u003en!\u003c/code\u003e\n     \u003c Long.MAX_VALUE\u003c/code\u003e is 20.  If the computed value\n     exceeds \u003ccode\u003eLong.MAX_VALUE\u003c/code\u003e an \u003ccode\u003eArithMeticException\n     \u003c/code\u003e is thrown.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\n@param n argument\n@return \u003ccode\u003en!\u003c/code\u003e\n@throws ArithmeticException if the result is too large to be represented\n        by a long integer.\n@throws IllegalArgumentException if n \u003c 0\n"
      }
    },
    "206201617aae648e12f63d4ab8aa9751157e7e63": {
      "type": "Ydocchange",
      "commitMessage": "Documented some runtime exceptions.\nPR: 29013\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141231 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/19/04, 7:16 AM",
      "commitName": "206201617aae648e12f63d4ab8aa9751157e7e63",
      "commitAuthor": "Brent Worden",
      "commitDateOld": "5/8/04, 9:36 PM",
      "commitNameOld": "b71d09ea4a1af895b965a703b5048d3cadba53d9",
      "commitAuthorOld": "Phil Steitz",
      "daysBetweenCommits": 10.4,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "public static long factorial(final int n) {\n    long result \u003d Math.round(factorialDouble(n));\n    if (result \u003d\u003d Long.MAX_VALUE) {\n        throw new ArithmeticException(\"result too large to represent in a long integer\");\n    }\n    return result;\n}",
      "path": "src/java/org/apache/commons/math/util/MathUtils.java",
      "functionStartLine": 366,
      "functionName": "factorial",
      "functionAnnotation": "",
      "functionDoc": "Returns n!.  Shorthand for \u003ccode\u003en\u003c/code\u003e\n\u003ca href\u003d\"http://mathworld.wolfram.com/Factorial.html\"\u003e\nFactorial\u003c/a\u003e, the product of the numbers \u003ccode\u003e1,...,n\u003c/code\u003e.\n\n\u003cp\u003e\n\u003cStrong\u003ePreconditions\u003c/strong\u003e:\u003cul\u003e\n\u003cli\u003e \u003ccode\u003en \u003e 0\u003c/code\u003e (otherwise\n     \u003ccode\u003eIllegalArgumentException\u003c/code\u003e is thrown)\u003c/li\u003e\n\u003cli\u003e The result is small enough to fit into a \u003ccode\u003elong\u003c/code\u003e.  The\n     largest value of \u003ccode\u003en\u003c/code\u003e for which \u003ccode\u003en!\u003c/code\u003e\n     \u003c Long.MAX_VALUE\u003c/code\u003e is 20.  If the computed value\n     exceeds \u003ccode\u003eLong.MAX_VALUE\u003c/code\u003e an \u003ccode\u003eArithMeticException\n     \u003c/code\u003e is thrown.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\n@param n argument\n@return \u003ccode\u003en!\u003c/code\u003e\n@throws ArithmeticException if the result is too large to be represented\n        by a long integer.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Returns n!.  Shorthand for \u003ccode\u003en\u003c/code\u003e\n\u003ca href\u003d\"http://mathworld.wolfram.com/Factorial.html\"\u003e\nFactorial\u003c/a\u003e, the product of the numbers \u003ccode\u003e1,...,n\u003c/code\u003e.\n\n\u003cp\u003e\n\u003cStrong\u003ePreconditions\u003c/strong\u003e:\u003cul\u003e\n\u003cli\u003e \u003ccode\u003en \u003e 0\u003c/code\u003e (otherwise\n     \u003ccode\u003eIllegalArgumentException\u003c/code\u003e is thrown)\u003c/li\u003e\n\u003cli\u003e The result is small enough to fit into a \u003ccode\u003elong\u003c/code\u003e.  The\n     largest value of \u003ccode\u003en\u003c/code\u003e for which \u003ccode\u003en!\u003c/code\u003e\n     \u003c Long.MAX_VALUE\u003c/code\u003e is 20.  If the computed value\n     exceeds \u003ccode\u003eLong.MAX_VALUE\u003c/code\u003e an \u003ccode\u003eArithMeticException\n     \u003c/code\u003e is thrown.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\n@param n argument\n@return \u003ccode\u003en!\u003c/code\u003e\n",
        "newValue": "Returns n!.  Shorthand for \u003ccode\u003en\u003c/code\u003e\n\u003ca href\u003d\"http://mathworld.wolfram.com/Factorial.html\"\u003e\nFactorial\u003c/a\u003e, the product of the numbers \u003ccode\u003e1,...,n\u003c/code\u003e.\n\n\u003cp\u003e\n\u003cStrong\u003ePreconditions\u003c/strong\u003e:\u003cul\u003e\n\u003cli\u003e \u003ccode\u003en \u003e 0\u003c/code\u003e (otherwise\n     \u003ccode\u003eIllegalArgumentException\u003c/code\u003e is thrown)\u003c/li\u003e\n\u003cli\u003e The result is small enough to fit into a \u003ccode\u003elong\u003c/code\u003e.  The\n     largest value of \u003ccode\u003en\u003c/code\u003e for which \u003ccode\u003en!\u003c/code\u003e\n     \u003c Long.MAX_VALUE\u003c/code\u003e is 20.  If the computed value\n     exceeds \u003ccode\u003eLong.MAX_VALUE\u003c/code\u003e an \u003ccode\u003eArithMeticException\n     \u003c/code\u003e is thrown.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\n@param n argument\n@return \u003ccode\u003en!\u003c/code\u003e\n@throws ArithmeticException if the result is too large to be represented\n        by a long integer.\n"
      }
    },
    "04c3ab9b355b2c52e0178533068dd22586c0eabf": {
      "type": "Yformatchange",
      "commitMessage": "Improved Javadoc and fixed comparison error in indicator(short).\nContributed by: Christopher Schuck\nPr #28194\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141154 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/4/04, 8:47 PM",
      "commitName": "04c3ab9b355b2c52e0178533068dd22586c0eabf",
      "commitAuthor": "Phil Steitz",
      "commitDateOld": "2/21/04, 1:35 PM",
      "commitNameOld": "5d66d93e57e142760603024ce1429f2d229a6c8f",
      "commitAuthorOld": "Phil Steitz",
      "daysBetweenCommits": 43.26,
      "commitsBetweenForRepo": 50,
      "commitsBetweenForFile": 1,
      "actualSource": "public static long factorial(final int n) {\n    long result \u003d Math.round(factorialDouble(n));\n    if (result \u003d\u003d Long.MAX_VALUE) {\n        throw new ArithmeticException(\"result too large to represent in a long integer\");\n    }\n    return result;\n}",
      "path": "src/java/org/apache/commons/math/util/MathUtils.java",
      "functionStartLine": 353,
      "functionName": "factorial",
      "functionAnnotation": "",
      "functionDoc": "Returns n!.  Shorthand for \u003ccode\u003en\u003c/code\u003e\n\u003ca href\u003d\"http://mathworld.wolfram.com/Factorial.html\"\u003e\nFactorial\u003c/a\u003e, the product of the numbers \u003ccode\u003e1,...,n\u003c/code\u003e.\n\n\u003cp\u003e\n\u003cStrong\u003ePreconditions\u003c/strong\u003e:\u003cul\u003e\n\u003cli\u003e \u003ccode\u003en \u003e 0\u003c/code\u003e (otherwise\n     \u003ccode\u003eIllegalArgumentException\u003c/code\u003e is thrown)\u003c/li\u003e\n\u003cli\u003e The result is small enough to fit into a \u003ccode\u003elong\u003c/code\u003e.  The\n     largest value of \u003ccode\u003en\u003c/code\u003e for which \u003ccode\u003en!\u003c/code\u003e\n     \u003c Long.MAX_VALUE\u003c/code\u003e is 20.  If the computed value\n     exceeds \u003ccode\u003eLong.MAX_VALUE\u003c/code\u003e an \u003ccode\u003eArithMeticException\n     \u003c/code\u003e is thrown.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\n@param n argument\n@return \u003ccode\u003en!\u003c/code\u003e\n",
      "diff": "",
      "extendedDetails": {}
    },
    "0a904461932f2c0455611e77ec6a8d8aced2980b": {
      "type": "Yintroduced",
      "commitMessage": "Attempting to recover last revision.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141013 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/14/03, 2:25 PM",
      "commitName": "0a904461932f2c0455611e77ec6a8d8aced2980b",
      "commitAuthor": "Mark R. Diggory",
      "diff": "@@ -0,0 +1,7 @@\n+public static long factorial(final int n) {\n+    long result \u003d Math.round(factorialDouble(n));\n+    if (result \u003d\u003d Long.MAX_VALUE) {\n+        throw new ArithmeticException(\"result too large to represent in a long integer\");\n+    }\n+    return result;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public static long factorial(final int n) {\n    long result \u003d Math.round(factorialDouble(n));\n    if (result \u003d\u003d Long.MAX_VALUE) {\n        throw new ArithmeticException(\"result too large to represent in a long integer\");\n    }\n    return result;\n}",
      "path": "src/java/org/apache/commons/math/util/MathUtils.java",
      "functionStartLine": 296,
      "functionName": "factorial",
      "functionAnnotation": "",
      "functionDoc": "Returns n!.  Shorthand for \u003ccode\u003en\u003c/code\u003e\n\u003ca href\u003d\"http://mathworld.wolfram.com/Factorial.html\"\u003e\nFactorial\u003c/a\u003e, the product of the numbers \u003ccode\u003e1,...,n\u003c/code\u003e.\n\n\u003cp\u003e\n\u003cStrong\u003ePreconditions\u003c/strong\u003e:\u003cul\u003e\n\u003cli\u003e \u003ccode\u003en \u003e 0\u003c/code\u003e (otherwise\n     \u003ccode\u003eIllegalArgumentException\u003c/code\u003e is thrown)\u003c/li\u003e\n\u003cli\u003e The result is small enough to fit into a \u003ccode\u003elong\u003c/code\u003e.  The\n     largest value of \u003ccode\u003en\u003c/code\u003e for which \u003ccode\u003en!\u003c/code\u003e\n     \u003c Long.MAX_VALUE\u003c/code\u003e is 20.  If the computed value\n     exceeds \u003ccode\u003eLong.MAX_VALUE\u003c/code\u003e an \u003ccode\u003eArithMeticException\n     \u003c/code\u003e is thrown.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\n@param n argument\n@return \u003ccode\u003en!\u003c/code\u003e\n"
    }
  }
}