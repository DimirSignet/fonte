{
  "origin": "codeshovel",
  "repositoryName": "Closure-59b",
  "repositoryPath": "/tmp/Closure-59b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TypedScopeCreator.java",
  "functionName": "defineName",
  "functionId": "$defineName___name-Node__var-Node__parent-Node__info-JSDocInfo",
  "sourceFilePath": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
  "functionAnnotation": "",
  "functionDoc": "Defines a variable based on the {@link Token#NAME} node passed.\n\n@param name The {@link Token#NAME} node.\n@param var The parent of the {@code name} node, which must be a\n    {@link Token#VAR} node.\n@param parent @code var}\u0027s parent.\n@param info the {@link JSDocInfo} information relating to this\n    {@code name} node.\n",
  "functionStartLine": 745,
  "functionEndLine": 758,
  "numCommitsSeen": 59,
  "timeTaken": 4495,
  "changeHistory": [
    "b489cf1f4089225b5ae06b6f30aa82d3438210aa",
    "7675b68dbd7cfc37b1359fd40be9fdf0b618bc95",
    "2ea78e73e6ace693e18d535560606dfd49c3f9bc",
    "b7b201a08e330c9638f52f5dfe824e426a34f2c5",
    "465282f1ca28a208b06c47b55fd292d4631c55da",
    "c764a46abf211d4677fadc33f7d466e5b14fa088",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "b489cf1f4089225b5ae06b6f30aa82d3438210aa": "Ybodychange",
    "7675b68dbd7cfc37b1359fd40be9fdf0b618bc95": "Ybodychange",
    "2ea78e73e6ace693e18d535560606dfd49c3f9bc": "Ybodychange",
    "b7b201a08e330c9638f52f5dfe824e426a34f2c5": "Ybodychange",
    "465282f1ca28a208b06c47b55fd292d4631c55da": "Ybodychange",
    "c764a46abf211d4677fadc33f7d466e5b14fa088": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b489cf1f4089225b5ae06b6f30aa82d3438210aa": {
      "type": "Ybodychange",
      "commitMessage": "\nFix some bugs by removing redundant code.\n\nR\u003djohnlenz\nDELTA\u003d61  (4 added, 34 deleted, 23 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d667\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@816 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/24/11, 1:22 PM",
      "commitName": "b489cf1f4089225b5ae06b6f30aa82d3438210aa",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "2/16/11, 8:38 PM",
      "commitNameOld": "072fa2d047573d2d1f0187ba4bf76b1afa75031c",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 7.7,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "actualSource": "private void defineName(Node name, Node var, Node parent, JSDocInfo info) {\n    Node value \u003d name.getFirstChild();\n    JSType type \u003d getDeclaredType(sourceName, info, name, value);\n    if (type \u003d\u003d null) {\n        CompilerInput input \u003d compiler.getInput(sourceName);\n        Preconditions.checkNotNull(input, sourceName);\n        type \u003d input.isExtern() ? getNativeType(UNKNOWN_TYPE) : null;\n    }\n    defineSlot(name, var, type);\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 696,
      "functionName": "defineName",
      "functionAnnotation": "",
      "functionDoc": "Defines a variable based on the {@link Token#NAME} node passed.\n\n@param name The {@link Token#NAME} node.\n@param var The parent of the {@code name} node, which must be a\n    {@link Token#VAR} node.\n@param parent @code var}\u0027s parent.\n@param info the {@link JSDocInfo} information relating to this\n    {@code name} node.\n",
      "diff": "@@ -1,25 +1,10 @@\n private void defineName(Node name, Node var, Node parent, JSDocInfo info) {\n     Node value \u003d name.getFirstChild();\n-    JSType type \u003d null;\n-    if (value !\u003d null \u0026\u0026 value.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 shouldUseFunctionLiteralType((FunctionType) value.getJSType(), info, name)) {\n-        type \u003d value.getJSType();\n-    }\n+    JSType type \u003d getDeclaredType(sourceName, info, name, value);\n     if (type \u003d\u003d null) {\n-        if (info \u003d\u003d null) {\n-            CompilerInput input \u003d compiler.getInput(sourceName);\n-            Preconditions.checkNotNull(input, sourceName);\n-            type \u003d input.isExtern() ? getNativeType(UNKNOWN_TYPE) : null;\n-        } else if (info.hasEnumParameterType()) {\n-            if (value !\u003d null \u0026\u0026 value.getType() \u003d\u003d Token.OBJECTLIT) {\n-                type \u003d value.getJSType();\n-            } else {\n-                type \u003d createEnumTypeFromNodes(value, name.getString(), info, name);\n-            }\n-        } else if (info.isConstructor()) {\n-            type \u003d createFunctionTypeFromNodes(value, name.getString(), info, name);\n-        } else {\n-            type \u003d getDeclaredTypeInAnnotation(sourceName, name, info);\n-        }\n+        CompilerInput input \u003d compiler.getInput(sourceName);\n+        Preconditions.checkNotNull(input, sourceName);\n+        type \u003d input.isExtern() ? getNativeType(UNKNOWN_TYPE) : null;\n     }\n     defineSlot(name, var, type);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7675b68dbd7cfc37b1359fd40be9fdf0b618bc95": {
      "type": "Ybodychange",
      "commitMessage": "\nfix a todo that\u0027s really easy now\n\nR\u003djohnlenz\nDELTA\u003d67  (28 added, 12 deleted, 27 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d417\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@743 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/1/11, 11:22 AM",
      "commitName": "7675b68dbd7cfc37b1359fd40be9fdf0b618bc95",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "1/31/11, 8:08 AM",
      "commitNameOld": "2ea78e73e6ace693e18d535560606dfd49c3f9bc",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 1.13,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "private void defineName(Node name, Node var, Node parent, JSDocInfo info) {\n    Node value \u003d name.getFirstChild();\n    JSType type \u003d null;\n    if (value !\u003d null \u0026\u0026 value.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 shouldUseFunctionLiteralType((FunctionType) value.getJSType(), info, name)) {\n        type \u003d value.getJSType();\n    }\n    if (type \u003d\u003d null) {\n        if (info \u003d\u003d null) {\n            CompilerInput input \u003d compiler.getInput(sourceName);\n            Preconditions.checkNotNull(input, sourceName);\n            type \u003d input.isExtern() ? getNativeType(UNKNOWN_TYPE) : null;\n        } else if (info.hasEnumParameterType()) {\n            if (value !\u003d null \u0026\u0026 value.getType() \u003d\u003d Token.OBJECTLIT) {\n                type \u003d value.getJSType();\n            } else {\n                type \u003d createEnumTypeFromNodes(value, name.getString(), info, name);\n            }\n        } else if (info.isConstructor()) {\n            type \u003d createFunctionTypeFromNodes(value, name.getString(), info, name);\n        } else {\n            type \u003d getDeclaredTypeInAnnotation(sourceName, name, info);\n        }\n    }\n    defineSlot(name, var, type);\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 693,
      "functionName": "defineName",
      "functionAnnotation": "",
      "functionDoc": "Defines a variable based on the {@link Token#NAME} node passed.\n\n@param name The {@link Token#NAME} node.\n@param var The parent of the {@code name} node, which must be a\n    {@link Token#VAR} node.\n@param parent @code var}\u0027s parent.\n@param info the {@link JSDocInfo} information relating to this\n    {@code name} node.\n",
      "diff": "@@ -1,28 +1,25 @@\n private void defineName(Node name, Node var, Node parent, JSDocInfo info) {\n     Node value \u003d name.getFirstChild();\n     JSType type \u003d null;\n-    if (value !\u003d null \u0026\u0026 value.getType() \u003d\u003d Token.FUNCTION) {\n-        FunctionType valueType \u003d (FunctionType) value.getJSType();\n-        if (info !\u003d null || scope.isGlobal() || !valueType.isReturnTypeInferred()) {\n-            type \u003d value.getJSType();\n-        }\n+    if (value !\u003d null \u0026\u0026 value.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 shouldUseFunctionLiteralType((FunctionType) value.getJSType(), info, name)) {\n+        type \u003d value.getJSType();\n     }\n     if (type \u003d\u003d null) {\n         if (info \u003d\u003d null) {\n             CompilerInput input \u003d compiler.getInput(sourceName);\n             Preconditions.checkNotNull(input, sourceName);\n             type \u003d input.isExtern() ? getNativeType(UNKNOWN_TYPE) : null;\n         } else if (info.hasEnumParameterType()) {\n             if (value !\u003d null \u0026\u0026 value.getType() \u003d\u003d Token.OBJECTLIT) {\n                 type \u003d value.getJSType();\n             } else {\n                 type \u003d createEnumTypeFromNodes(value, name.getString(), info, name);\n             }\n         } else if (info.isConstructor()) {\n             type \u003d createFunctionTypeFromNodes(value, name.getString(), info, name);\n         } else {\n             type \u003d getDeclaredTypeInAnnotation(sourceName, name, info);\n         }\n     }\n     defineSlot(name, var, type);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2ea78e73e6ace693e18d535560606dfd49c3f9bc": {
      "type": "Ybodychange",
      "commitMessage": "\nClean up type discovery by refactoring to the following algorithm.\n1) When we see a function literal, create the authoritative\ntype for it.\n2) When we see an object literal, create the authoritative\ntype for it.\n3) When we declare a symbol, check to see if it\u0027s assigned to\nan object or function literal, and use that type if it\nmake sense to do so. Otherwise, fall back on the JSDoc info.\nThis should make it a lot easier to give accurate types to object\nliteral properties.\nI didn\u0027t intend to create any functional changes in this CL,\nbut some minor ones were inevitable.\n\nR\u003djohnlenz\nDELTA\u003d618  (320 added, 249 deleted, 49 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d392\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@739 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/31/11, 8:08 AM",
      "commitName": "2ea78e73e6ace693e18d535560606dfd49c3f9bc",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "1/27/11, 10:33 AM",
      "commitNameOld": "70f817ae4f80ac11dd2dfe97babf5896c690fb48",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 3.9,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "private void defineName(Node name, Node var, Node parent, JSDocInfo info) {\n    Node value \u003d name.getFirstChild();\n    JSType type \u003d null;\n    if (value !\u003d null \u0026\u0026 value.getType() \u003d\u003d Token.FUNCTION) {\n        FunctionType valueType \u003d (FunctionType) value.getJSType();\n        if (info !\u003d null || scope.isGlobal() || !valueType.isReturnTypeInferred()) {\n            type \u003d value.getJSType();\n        }\n    }\n    if (type \u003d\u003d null) {\n        if (info \u003d\u003d null) {\n            CompilerInput input \u003d compiler.getInput(sourceName);\n            Preconditions.checkNotNull(input, sourceName);\n            type \u003d input.isExtern() ? getNativeType(UNKNOWN_TYPE) : null;\n        } else if (info.hasEnumParameterType()) {\n            if (value !\u003d null \u0026\u0026 value.getType() \u003d\u003d Token.OBJECTLIT) {\n                type \u003d value.getJSType();\n            } else {\n                type \u003d createEnumTypeFromNodes(value, name.getString(), info, name);\n            }\n        } else if (info.isConstructor()) {\n            type \u003d createFunctionTypeFromNodes(value, name.getString(), info, name);\n        } else {\n            type \u003d getDeclaredTypeInAnnotation(sourceName, name, info);\n        }\n    }\n    defineSlot(name, var, type);\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 693,
      "functionName": "defineName",
      "functionAnnotation": "",
      "functionDoc": "Defines a variable based on the {@link Token#NAME} node passed.\n\n@param name The {@link Token#NAME} node.\n@param var The parent of the {@code name} node, which must be a\n    {@link Token#VAR} node.\n@param parent @code var}\u0027s parent.\n@param info the {@link JSDocInfo} information relating to this\n    {@code name} node.\n",
      "diff": "@@ -1,26 +1,28 @@\n private void defineName(Node name, Node var, Node parent, JSDocInfo info) {\n     Node value \u003d name.getFirstChild();\n+    JSType type \u003d null;\n     if (value !\u003d null \u0026\u0026 value.getType() \u003d\u003d Token.FUNCTION) {\n-        String functionName \u003d name.getString();\n-        FunctionType functionType \u003d getFunctionType(functionName, value, info, null);\n-        if (functionType.isReturnTypeInferred() \u0026\u0026 scope.isLocal()) {\n-            defineSlot(name, var, null);\n-        } else {\n-            defineSlot(name, var, functionType);\n+        FunctionType valueType \u003d (FunctionType) value.getJSType();\n+        if (info !\u003d null || scope.isGlobal() || !valueType.isReturnTypeInferred()) {\n+            type \u003d value.getJSType();\n         }\n-    } else {\n-        JSType type \u003d null;\n+    }\n+    if (type \u003d\u003d null) {\n         if (info \u003d\u003d null) {\n             CompilerInput input \u003d compiler.getInput(sourceName);\n             Preconditions.checkNotNull(input, sourceName);\n             type \u003d input.isExtern() ? getNativeType(UNKNOWN_TYPE) : null;\n         } else if (info.hasEnumParameterType()) {\n-            type \u003d getEnumType(name.getString(), var, value, info.getEnumParameterType().evaluate(scope, typeRegistry));\n+            if (value !\u003d null \u0026\u0026 value.getType() \u003d\u003d Token.OBJECTLIT) {\n+                type \u003d value.getJSType();\n+            } else {\n+                type \u003d createEnumTypeFromNodes(value, name.getString(), info, name);\n+            }\n         } else if (info.isConstructor()) {\n-            type \u003d getFunctionType(name.getString(), value, info, name);\n+            type \u003d createFunctionTypeFromNodes(value, name.getString(), info, name);\n         } else {\n             type \u003d getDeclaredTypeInAnnotation(sourceName, name, info);\n         }\n-        defineSlot(name, var, type);\n     }\n+    defineSlot(name, var, type);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b7b201a08e330c9638f52f5dfe824e426a34f2c5": {
      "type": "Ybodychange",
      "commitMessage": "\nAttach types to literals at scope-creation time instead of at\ninference time.\nScope-creation already attaches types to function literals at\nscope-creation type, so this makes the other literals more consistent\nwith function literals.\n\nR\u003djohnlenz\nDELTA\u003d167  (102 added, 53 deleted, 12 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d209649\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@411 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/8/10, 12:26 PM",
      "commitName": "b7b201a08e330c9638f52f5dfe824e426a34f2c5",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "7/19/10, 5:30 PM",
      "commitNameOld": "e8eafe7acfd53e5385e4f31692c4db67c3777185",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 50.79,
      "commitsBetweenForRepo": 116,
      "commitsBetweenForFile": 1,
      "actualSource": "private void defineName(Node name, Node var, Node parent, JSDocInfo info) {\n    Node value \u003d name.getFirstChild();\n    if (value !\u003d null \u0026\u0026 value.getType() \u003d\u003d Token.FUNCTION) {\n        String functionName \u003d name.getString();\n        FunctionType functionType \u003d getFunctionType(functionName, value, info, null);\n        if (functionType.isReturnTypeInferred() \u0026\u0026 scope.isLocal()) {\n            defineSlot(name, var, null);\n        } else {\n            defineSlot(name, var, functionType);\n        }\n    } else {\n        JSType type \u003d null;\n        if (info \u003d\u003d null) {\n            CompilerInput input \u003d compiler.getInput(sourceName);\n            Preconditions.checkNotNull(input, sourceName);\n            type \u003d input.isExtern() ? getNativeType(UNKNOWN_TYPE) : null;\n        } else if (info.hasEnumParameterType()) {\n            type \u003d getEnumType(name.getString(), var, value, info.getEnumParameterType().evaluate(scope, typeRegistry));\n        } else if (info.isConstructor()) {\n            type \u003d getFunctionType(name.getString(), value, info, name);\n        } else {\n            type \u003d getDeclaredTypeInAnnotation(sourceName, name, info);\n        }\n        defineSlot(name, var, type);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 565,
      "functionName": "defineName",
      "functionAnnotation": "",
      "functionDoc": "Defines a variable based on the {@link Token#NAME} node passed.\n\n@param name The {@link Token#NAME} node.\n@param var The parent of the {@code name} node, which must be a\n    {@link Token#VAR} node.\n@param parent @code var}\u0027s parent.\n@param info the {@link JSDocInfo} information relating to this\n    {@code name} node.\n",
      "diff": "@@ -1,26 +1,26 @@\n private void defineName(Node name, Node var, Node parent, JSDocInfo info) {\n     Node value \u003d name.getFirstChild();\n     if (value !\u003d null \u0026\u0026 value.getType() \u003d\u003d Token.FUNCTION) {\n         String functionName \u003d name.getString();\n         FunctionType functionType \u003d getFunctionType(functionName, value, info, null);\n         if (functionType.isReturnTypeInferred() \u0026\u0026 scope.isLocal()) {\n             defineSlot(name, var, null);\n         } else {\n             defineSlot(name, var, functionType);\n         }\n     } else {\n         JSType type \u003d null;\n         if (info \u003d\u003d null) {\n             CompilerInput input \u003d compiler.getInput(sourceName);\n             Preconditions.checkNotNull(input, sourceName);\n-            type \u003d input.isExtern() ? typeRegistry.getNativeType(UNKNOWN_TYPE) : null;\n+            type \u003d input.isExtern() ? getNativeType(UNKNOWN_TYPE) : null;\n         } else if (info.hasEnumParameterType()) {\n             type \u003d getEnumType(name.getString(), var, value, info.getEnumParameterType().evaluate(scope, typeRegistry));\n         } else if (info.isConstructor()) {\n             type \u003d getFunctionType(name.getString(), value, info, name);\n         } else {\n             type \u003d getDeclaredTypeInAnnotation(sourceName, name, info);\n         }\n         defineSlot(name, var, type);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "465282f1ca28a208b06c47b55fd292d4631c55da": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/06/22 by nicksantos\n\n        Inferred return types. \n        Fixes issue 143.\n        I eventually decided that it was wrong for the subtype\u0027s method\n        to affect the supertype\u0027s method, since this will make incremental\n        compilation a lot harder in the long run.\n\n        R\u003dmoedinger\n        DELTA\u003d481  (313 added, 38 deleted, 130 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d34007\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@249 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/22/10, 5:19 PM",
      "commitName": "465282f1ca28a208b06c47b55fd292d4631c55da",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/27/10, 12:02 PM",
      "commitNameOld": "eb5eae4438f49ffddd3c8be1413eeb9e7ecfb311",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 56.22,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "actualSource": "private void defineName(Node name, Node var, Node parent, JSDocInfo info) {\n    Node value \u003d name.getFirstChild();\n    if (value !\u003d null \u0026\u0026 value.getType() \u003d\u003d Token.FUNCTION) {\n        String functionName \u003d name.getString();\n        FunctionType functionType \u003d getFunctionType(functionName, value, info, null);\n        if (functionType.isReturnTypeInferred() \u0026\u0026 scope.isLocal()) {\n            defineSlot(name, var, null);\n        } else {\n            defineSlot(name, var, functionType);\n        }\n    } else {\n        JSType type \u003d null;\n        if (info \u003d\u003d null) {\n            CompilerInput input \u003d compiler.getInput(sourceName);\n            Preconditions.checkNotNull(input, sourceName);\n            type \u003d input.isExtern() ? typeRegistry.getNativeType(UNKNOWN_TYPE) : null;\n        } else if (info.hasEnumParameterType()) {\n            type \u003d getEnumType(name.getString(), var, value, info.getEnumParameterType().evaluate(scope, typeRegistry));\n        } else if (info.isConstructor()) {\n            type \u003d getFunctionType(name.getString(), value, info, name);\n        } else {\n            type \u003d getDeclaredTypeInAnnotation(sourceName, name, info);\n        }\n        defineSlot(name, var, type);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 503,
      "functionName": "defineName",
      "functionAnnotation": "",
      "functionDoc": "Defines a variable based on the {@link Token#NAME} node passed.\n\n@param name The {@link Token#NAME} node.\n@param var The parent of the {@code name} node, which must be a\n    {@link Token#VAR} node.\n@param parent @code var}\u0027s parent.\n@param info the {@link JSDocInfo} information relating to this\n    {@code name} node.\n",
      "diff": "@@ -1,22 +1,26 @@\n private void defineName(Node name, Node var, Node parent, JSDocInfo info) {\n     Node value \u003d name.getFirstChild();\n     if (value !\u003d null \u0026\u0026 value.getType() \u003d\u003d Token.FUNCTION) {\n         String functionName \u003d name.getString();\n         FunctionType functionType \u003d getFunctionType(functionName, value, info, null);\n-        defineSlot(name, var, functionType);\n+        if (functionType.isReturnTypeInferred() \u0026\u0026 scope.isLocal()) {\n+            defineSlot(name, var, null);\n+        } else {\n+            defineSlot(name, var, functionType);\n+        }\n     } else {\n         JSType type \u003d null;\n         if (info \u003d\u003d null) {\n             CompilerInput input \u003d compiler.getInput(sourceName);\n             Preconditions.checkNotNull(input, sourceName);\n             type \u003d input.isExtern() ? typeRegistry.getNativeType(UNKNOWN_TYPE) : null;\n         } else if (info.hasEnumParameterType()) {\n             type \u003d getEnumType(name.getString(), var, value, info.getEnumParameterType().evaluate(scope, typeRegistry));\n         } else if (info.isConstructor()) {\n             type \u003d getFunctionType(name.getString(), value, info, name);\n         } else {\n             type \u003d getDeclaredTypeInAnnotation(sourceName, name, info);\n         }\n         defineSlot(name, var, type);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c764a46abf211d4677fadc33f7d466e5b14fa088": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/04/13 by john\n\n        Here is a crazy thought, let\u0027s not require the JSTypeRegistry during\n        parsing.\n\n        There are basically two changes here:\n        1) The IRFactory was looking for enums to seed the JSTypeRegistry, so\n        we do that when we setup for type interence.\n        2) The JSDocParser was checking the types of @defines objects, now do\n        that during ProcessDefines.\n\n        R\u003drobert,mark\n        DELTA\u003d207  (82 added, 89 deleted, 36 changed)\n\nChange on 2010/04/14 by nick\n\n        Add a debugging function for JSType hashcodes.\n        i found this useful, and thought others might too.\n\n        R\u003djohn\n        DELTA\u003d69  (69 added, 0 deleted, 0 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dfqsoxx\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@183 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/14/10, 9:15 AM",
      "commitName": "c764a46abf211d4677fadc33f7d466e5b14fa088",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/13/10, 2:39 PM",
      "commitNameOld": "de13c3313c05f4449c50c560324389d6905a214d",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 0.78,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void defineName(Node name, Node var, Node parent, JSDocInfo info) {\n    Node value \u003d name.getFirstChild();\n    if (value !\u003d null \u0026\u0026 value.getType() \u003d\u003d Token.FUNCTION) {\n        String functionName \u003d name.getString();\n        FunctionType functionType \u003d getFunctionType(functionName, value, info, null);\n        defineSlot(name, var, functionType);\n    } else {\n        JSType type \u003d null;\n        if (info \u003d\u003d null) {\n            CompilerInput input \u003d compiler.getInput(sourceName);\n            Preconditions.checkNotNull(input, sourceName);\n            type \u003d input.isExtern() ? typeRegistry.getNativeType(UNKNOWN_TYPE) : null;\n        } else if (info.hasEnumParameterType()) {\n            type \u003d getEnumType(name.getString(), var, value, info.getEnumParameterType().evaluate(scope, typeRegistry));\n        } else if (info.isConstructor()) {\n            type \u003d getFunctionType(name.getString(), value, info, name);\n        } else {\n            type \u003d getDeclaredTypeInAnnotation(sourceName, name, info);\n        }\n        defineSlot(name, var, type);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 448,
      "functionName": "defineName",
      "functionAnnotation": "",
      "functionDoc": "Defines a variable based on the {@link Token#NAME} node passed.\n\n@param name The {@link Token#NAME} node.\n@param var The parent of the {@code name} node, which must be a\n    {@link Token#VAR} node.\n@param parent @code var}\u0027s parent.\n@param info the {@link JSDocInfo} information relating to this\n    {@code name} node.\n",
      "diff": "@@ -1,22 +1,22 @@\n private void defineName(Node name, Node var, Node parent, JSDocInfo info) {\n     Node value \u003d name.getFirstChild();\n     if (value !\u003d null \u0026\u0026 value.getType() \u003d\u003d Token.FUNCTION) {\n         String functionName \u003d name.getString();\n         FunctionType functionType \u003d getFunctionType(functionName, value, info, null);\n         defineSlot(name, var, functionType);\n     } else {\n         JSType type \u003d null;\n         if (info \u003d\u003d null) {\n             CompilerInput input \u003d compiler.getInput(sourceName);\n             Preconditions.checkNotNull(input, sourceName);\n             type \u003d input.isExtern() ? typeRegistry.getNativeType(UNKNOWN_TYPE) : null;\n         } else if (info.hasEnumParameterType()) {\n-            type \u003d getEnumType(name.getString(), var, value, info.getEnumParameterType().evaluate(scope));\n+            type \u003d getEnumType(name.getString(), var, value, info.getEnumParameterType().evaluate(scope, typeRegistry));\n         } else if (info.isConstructor()) {\n             type \u003d getFunctionType(name.getString(), value, info, name);\n         } else {\n             type \u003d getDeclaredTypeInAnnotation(sourceName, name, info);\n         }\n         defineSlot(name, var, type);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,22 @@\n+private void defineName(Node name, Node var, Node parent, JSDocInfo info) {\n+    Node value \u003d name.getFirstChild();\n+    if (value !\u003d null \u0026\u0026 value.getType() \u003d\u003d Token.FUNCTION) {\n+        String functionName \u003d name.getString();\n+        FunctionType functionType \u003d getFunctionType(functionName, value, info, null);\n+        defineSlot(name, var, functionType);\n+    } else {\n+        JSType type \u003d null;\n+        if (info \u003d\u003d null) {\n+            CompilerInput input \u003d compiler.getInput(sourceName);\n+            Preconditions.checkNotNull(input, sourceName);\n+            type \u003d input.isExtern() ? typeRegistry.getNativeType(UNKNOWN_TYPE) : null;\n+        } else if (info.hasEnumParameterType()) {\n+            type \u003d getEnumType(name.getString(), var, value, info.getEnumParameterType().evaluate(scope));\n+        } else if (info.isConstructor()) {\n+            type \u003d getFunctionType(name.getString(), value, info, name);\n+        } else {\n+            type \u003d getDeclaredTypeInAnnotation(sourceName, name, info);\n+        }\n+        defineSlot(name, var, type);\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void defineName(Node name, Node var, Node parent, JSDocInfo info) {\n    Node value \u003d name.getFirstChild();\n    if (value !\u003d null \u0026\u0026 value.getType() \u003d\u003d Token.FUNCTION) {\n        String functionName \u003d name.getString();\n        FunctionType functionType \u003d getFunctionType(functionName, value, info, null);\n        defineSlot(name, var, functionType);\n    } else {\n        JSType type \u003d null;\n        if (info \u003d\u003d null) {\n            CompilerInput input \u003d compiler.getInput(sourceName);\n            Preconditions.checkNotNull(input, sourceName);\n            type \u003d input.isExtern() ? typeRegistry.getNativeType(UNKNOWN_TYPE) : null;\n        } else if (info.hasEnumParameterType()) {\n            type \u003d getEnumType(name.getString(), var, value, info.getEnumParameterType().evaluate(scope));\n        } else if (info.isConstructor()) {\n            type \u003d getFunctionType(name.getString(), value, info, name);\n        } else {\n            type \u003d getDeclaredTypeInAnnotation(sourceName, name, info);\n        }\n        defineSlot(name, var, type);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 410,
      "functionName": "defineName",
      "functionAnnotation": "",
      "functionDoc": "Defines a variable based on the {@link Token#NAME} node passed.\n\n@param name The {@link Token#NAME} node.\n@param var The parent of the {@code name} node, which must be a\n    {@link Token#VAR} node.\n@param parent @code var}\u0027s parent.\n@param info the {@link JSDocInfo} information relating to this\n    {@code name} node.\n"
    }
  }
}