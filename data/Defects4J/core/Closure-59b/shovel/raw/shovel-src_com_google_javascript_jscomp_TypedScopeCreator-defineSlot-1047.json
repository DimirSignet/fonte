{
  "origin": "codeshovel",
  "repositoryName": "Closure-59b",
  "repositoryPath": "/tmp/Closure-59b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TypedScopeCreator.java",
  "functionName": "defineSlot",
  "functionId": "$defineSlot___n-Node__parent-Node__variableName-String__type-JSType__inferred-boolean",
  "sourceFilePath": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
  "functionAnnotation": "",
  "functionDoc": "Defines a symbol in the current scope.\n\n@param n the defining NAME or GETPROP or object literal key node.\n@param parent the {@code n}\u0027s parent.\n@param variableName The name that this should be known by.\n@param type the variable\u0027s type. It may be {@code null} if\n    {@code inferred} is {@code true}.\n@param inferred Whether the type is inferred or declared.\n",
  "functionStartLine": 1047,
  "functionEndLine": 1158,
  "numCommitsSeen": 59,
  "timeTaken": 2905,
  "changeHistory": [
    "03ce555bcedcf98d99de1b4f8a6238ba75ee6850",
    "71a9ef6258d01b0e05820209be0035fab11a8d3a",
    "f80152eb5a2de72e8336b26e0e78b9e6baae37d2",
    "072fa2d047573d2d1f0187ba4bf76b1afa75031c"
  ],
  "changeHistoryShort": {
    "03ce555bcedcf98d99de1b4f8a6238ba75ee6850": "Ybodychange",
    "71a9ef6258d01b0e05820209be0035fab11a8d3a": "Ybodychange",
    "f80152eb5a2de72e8336b26e0e78b9e6baae37d2": "Ymultichange(Ybodychange,Ydocchange)",
    "072fa2d047573d2d1f0187ba4bf76b1afa75031c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "03ce555bcedcf98d99de1b4f8a6238ba75ee6850": {
      "type": "Ybodychange",
      "commitMessage": "\nSimplify the type system a bit by pulling extern info off the nodes\n\nR\u003djohnlenz\nDELTA\u003d171  (4 added, 42 deleted, 125 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2500\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1242 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/1/11, 2:00 PM",
      "commitName": "03ce555bcedcf98d99de1b4f8a6238ba75ee6850",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "6/2/11, 9:10 AM",
      "commitNameOld": "e2da3b80158f6df8377e95ba54da85eb286e63d4",
      "commitAuthorOld": "bashir@google.com",
      "daysBetweenCommits": 29.2,
      "commitsBetweenForRepo": 84,
      "commitsBetweenForFile": 1,
      "actualSource": "void defineSlot(Node n, Node parent, String variableName, JSType type, boolean inferred) {\n    Preconditions.checkArgument(!variableName.isEmpty());\n    boolean isGlobalVar \u003d n.getType() \u003d\u003d Token.NAME \u0026\u0026 scope.isGlobal();\n    boolean shouldDeclareOnGlobalThis \u003d isGlobalVar \u0026\u0026 (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.FUNCTION);\n    Scope scopeToDeclareIn \u003d scope;\n    if (n.getType() \u003d\u003d Token.GETPROP \u0026\u0026 !scope.isGlobal() \u0026\u0026 isQnameRootedInGlobalScope(n)) {\n        Scope globalScope \u003d scope.getGlobalScope();\n        if (!globalScope.isDeclared(variableName, false)) {\n            scopeToDeclareIn \u003d scope.getGlobalScope();\n        }\n    }\n    if (scopeToDeclareIn.isDeclared(variableName, false)) {\n        Var oldVar \u003d scopeToDeclareIn.getVar(variableName);\n        validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);\n    } else {\n        if (!inferred) {\n            setDeferredType(n, type);\n        }\n        CompilerInput input \u003d compiler.getInput(sourceName);\n        boolean isExtern \u003d input.isExtern();\n        Var newVar \u003d scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n        if (shouldDeclareOnGlobalThis) {\n            ObjectType globalThis \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS);\n            if (inferred) {\n                globalThis.defineInferredProperty(variableName, type \u003d\u003d null ? getNativeType(JSTypeNative.NO_TYPE) : type, n);\n            } else {\n                globalThis.defineDeclaredProperty(variableName, type, n);\n            }\n        }\n        if (type instanceof EnumType) {\n            Node initialValue \u003d newVar.getInitialValue();\n            boolean isValidValue \u003d initialValue !\u003d null \u0026\u0026 (initialValue.getType() \u003d\u003d Token.OBJECTLIT || initialValue.isQualifiedName());\n            if (!isValidValue) {\n                compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));\n            }\n        }\n        if (type instanceof FunctionType \u0026\u0026 !type.isEmptyType()) {\n            FunctionType fnType \u003d (FunctionType) type;\n            if ((fnType.isConstructor() || fnType.isInterface()) \u0026\u0026 !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE))) {\n                FunctionType superClassCtor \u003d fnType.getSuperClassConstructor();\n                scopeToDeclareIn.declare(variableName + \".prototype\", n, fnType.getPrototype(), input, superClassCtor \u003d\u003d null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n                if (newVar.getInitialValue() \u003d\u003d null \u0026\u0026 !isExtern \u0026\u0026 variableName.equals(fnType.getInstanceType().getReferenceName())) {\n                    compiler.report(JSError.make(sourceName, n, fnType.isConstructor() ? CTOR_INITIALIZER : IFACE_INITIALIZER, variableName));\n                }\n            }\n        }\n    }\n    if (isGlobalVar \u0026\u0026 \"Window\".equals(variableName) \u0026\u0026 type instanceof FunctionType \u0026\u0026 type.isConstructor()) {\n        FunctionType globalThisCtor \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();\n        globalThisCtor.getInstanceType().clearCachedValues();\n        globalThisCtor.getPrototype().clearCachedValues();\n        globalThisCtor.setPrototypeBasedOn(((FunctionType) type).getInstanceType());\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 1047,
      "functionName": "defineSlot",
      "functionAnnotation": "",
      "functionDoc": "Defines a symbol in the current scope.\n\n@param n the defining NAME or GETPROP or object literal key node.\n@param parent the {@code n}\u0027s parent.\n@param variableName The name that this should be known by.\n@param type the variable\u0027s type. It may be {@code null} if\n    {@code inferred} is {@code true}.\n@param inferred Whether the type is inferred or declared.\n",
      "diff": "@@ -1,54 +1,54 @@\n void defineSlot(Node n, Node parent, String variableName, JSType type, boolean inferred) {\n     Preconditions.checkArgument(!variableName.isEmpty());\n     boolean isGlobalVar \u003d n.getType() \u003d\u003d Token.NAME \u0026\u0026 scope.isGlobal();\n     boolean shouldDeclareOnGlobalThis \u003d isGlobalVar \u0026\u0026 (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.FUNCTION);\n     Scope scopeToDeclareIn \u003d scope;\n     if (n.getType() \u003d\u003d Token.GETPROP \u0026\u0026 !scope.isGlobal() \u0026\u0026 isQnameRootedInGlobalScope(n)) {\n         Scope globalScope \u003d scope.getGlobalScope();\n         if (!globalScope.isDeclared(variableName, false)) {\n             scopeToDeclareIn \u003d scope.getGlobalScope();\n         }\n     }\n     if (scopeToDeclareIn.isDeclared(variableName, false)) {\n         Var oldVar \u003d scopeToDeclareIn.getVar(variableName);\n         validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);\n     } else {\n         if (!inferred) {\n             setDeferredType(n, type);\n         }\n         CompilerInput input \u003d compiler.getInput(sourceName);\n         boolean isExtern \u003d input.isExtern();\n         Var newVar \u003d scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n         if (shouldDeclareOnGlobalThis) {\n             ObjectType globalThis \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS);\n             if (inferred) {\n-                globalThis.defineInferredProperty(variableName, type \u003d\u003d null ? getNativeType(JSTypeNative.NO_TYPE) : type, isExtern, n);\n+                globalThis.defineInferredProperty(variableName, type \u003d\u003d null ? getNativeType(JSTypeNative.NO_TYPE) : type, n);\n             } else {\n-                globalThis.defineDeclaredProperty(variableName, type, isExtern, n);\n+                globalThis.defineDeclaredProperty(variableName, type, n);\n             }\n         }\n         if (type instanceof EnumType) {\n             Node initialValue \u003d newVar.getInitialValue();\n             boolean isValidValue \u003d initialValue !\u003d null \u0026\u0026 (initialValue.getType() \u003d\u003d Token.OBJECTLIT || initialValue.isQualifiedName());\n             if (!isValidValue) {\n                 compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));\n             }\n         }\n         if (type instanceof FunctionType \u0026\u0026 !type.isEmptyType()) {\n             FunctionType fnType \u003d (FunctionType) type;\n             if ((fnType.isConstructor() || fnType.isInterface()) \u0026\u0026 !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE))) {\n                 FunctionType superClassCtor \u003d fnType.getSuperClassConstructor();\n                 scopeToDeclareIn.declare(variableName + \".prototype\", n, fnType.getPrototype(), input, superClassCtor \u003d\u003d null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n                 if (newVar.getInitialValue() \u003d\u003d null \u0026\u0026 !isExtern \u0026\u0026 variableName.equals(fnType.getInstanceType().getReferenceName())) {\n                     compiler.report(JSError.make(sourceName, n, fnType.isConstructor() ? CTOR_INITIALIZER : IFACE_INITIALIZER, variableName));\n                 }\n             }\n         }\n     }\n     if (isGlobalVar \u0026\u0026 \"Window\".equals(variableName) \u0026\u0026 type instanceof FunctionType \u0026\u0026 type.isConstructor()) {\n         FunctionType globalThisCtor \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();\n         globalThisCtor.getInstanceType().clearCachedValues();\n         globalThisCtor.getPrototype().clearCachedValues();\n         globalThisCtor.setPrototypeBasedOn(((FunctionType) type).getInstanceType());\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "71a9ef6258d01b0e05820209be0035fab11a8d3a": {
      "type": "Ybodychange",
      "commitMessage": "\nIf Window is declared but not marked as a constructor, don\u0027t crash\n\nR\u003djohnlenz\nDELTA\u003d12  (11 added, 0 deleted, 1 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d851\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@883 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/14/11, 8:49 AM",
      "commitName": "71a9ef6258d01b0e05820209be0035fab11a8d3a",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "3/9/11, 11:46 AM",
      "commitNameOld": "04f380716cd2403ae87e2b0880a56369aa0c6c33",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 4.84,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "actualSource": "void defineSlot(Node n, Node parent, String variableName, JSType type, boolean inferred) {\n    Preconditions.checkArgument(!variableName.isEmpty());\n    boolean isGlobalVar \u003d n.getType() \u003d\u003d Token.NAME \u0026\u0026 scope.isGlobal();\n    boolean shouldDeclareOnGlobalThis \u003d isGlobalVar \u0026\u0026 (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.FUNCTION);\n    Scope scopeToDeclareIn \u003d scope;\n    if (n.getType() \u003d\u003d Token.GETPROP \u0026\u0026 !scope.isGlobal() \u0026\u0026 isQnameRootedInGlobalScope(n)) {\n        Scope globalScope \u003d scope.getGlobalScope();\n        if (!globalScope.isDeclared(variableName, false)) {\n            scopeToDeclareIn \u003d scope.getGlobalScope();\n        }\n    }\n    if (scopeToDeclareIn.isDeclared(variableName, false)) {\n        Var oldVar \u003d scopeToDeclareIn.getVar(variableName);\n        validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);\n    } else {\n        if (!inferred) {\n            setDeferredType(n, type);\n        }\n        CompilerInput input \u003d compiler.getInput(sourceName);\n        boolean isExtern \u003d input.isExtern();\n        Var newVar \u003d scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n        if (shouldDeclareOnGlobalThis) {\n            ObjectType globalThis \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS);\n            if (inferred) {\n                globalThis.defineInferredProperty(variableName, type \u003d\u003d null ? getNativeType(JSTypeNative.NO_TYPE) : type, isExtern, n);\n            } else {\n                globalThis.defineDeclaredProperty(variableName, type, isExtern, n);\n            }\n        }\n        if (type instanceof EnumType) {\n            Node initialValue \u003d newVar.getInitialValue();\n            boolean isValidValue \u003d initialValue !\u003d null \u0026\u0026 (initialValue.getType() \u003d\u003d Token.OBJECTLIT || initialValue.isQualifiedName());\n            if (!isValidValue) {\n                compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));\n            }\n        }\n        if (type instanceof FunctionType \u0026\u0026 !type.isEmptyType()) {\n            FunctionType fnType \u003d (FunctionType) type;\n            if ((fnType.isConstructor() || fnType.isInterface()) \u0026\u0026 !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE))) {\n                FunctionType superClassCtor \u003d fnType.getSuperClassConstructor();\n                scopeToDeclareIn.declare(variableName + \".prototype\", n, fnType.getPrototype(), input, superClassCtor \u003d\u003d null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n                if (newVar.getInitialValue() \u003d\u003d null \u0026\u0026 !isExtern \u0026\u0026 variableName.equals(fnType.getInstanceType().getReferenceName())) {\n                    compiler.report(JSError.make(sourceName, n, fnType.isConstructor() ? CTOR_INITIALIZER : IFACE_INITIALIZER, variableName));\n                }\n            }\n        }\n    }\n    if (isGlobalVar \u0026\u0026 \"Window\".equals(variableName) \u0026\u0026 type instanceof FunctionType \u0026\u0026 type.isConstructor()) {\n        FunctionType globalThisCtor \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();\n        globalThisCtor.getInstanceType().clearCachedValues();\n        globalThisCtor.getPrototype().clearCachedValues();\n        globalThisCtor.setPrototypeBasedOn(((FunctionType) type).getInstanceType());\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 1023,
      "functionName": "defineSlot",
      "functionAnnotation": "",
      "functionDoc": "Defines a symbol in the current scope.\n\n@param n the defining NAME or GETPROP or object literal key node.\n@param parent the {@code n}\u0027s parent.\n@param variableName The name that this should be known by.\n@param type the variable\u0027s type. It may be {@code null} if\n    {@code inferred} is {@code true}.\n@param inferred Whether the type is inferred or declared.\n",
      "diff": "@@ -1,54 +1,54 @@\n void defineSlot(Node n, Node parent, String variableName, JSType type, boolean inferred) {\n     Preconditions.checkArgument(!variableName.isEmpty());\n     boolean isGlobalVar \u003d n.getType() \u003d\u003d Token.NAME \u0026\u0026 scope.isGlobal();\n     boolean shouldDeclareOnGlobalThis \u003d isGlobalVar \u0026\u0026 (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.FUNCTION);\n     Scope scopeToDeclareIn \u003d scope;\n     if (n.getType() \u003d\u003d Token.GETPROP \u0026\u0026 !scope.isGlobal() \u0026\u0026 isQnameRootedInGlobalScope(n)) {\n         Scope globalScope \u003d scope.getGlobalScope();\n         if (!globalScope.isDeclared(variableName, false)) {\n             scopeToDeclareIn \u003d scope.getGlobalScope();\n         }\n     }\n     if (scopeToDeclareIn.isDeclared(variableName, false)) {\n         Var oldVar \u003d scopeToDeclareIn.getVar(variableName);\n         validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);\n     } else {\n         if (!inferred) {\n             setDeferredType(n, type);\n         }\n         CompilerInput input \u003d compiler.getInput(sourceName);\n         boolean isExtern \u003d input.isExtern();\n         Var newVar \u003d scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n         if (shouldDeclareOnGlobalThis) {\n             ObjectType globalThis \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS);\n             if (inferred) {\n                 globalThis.defineInferredProperty(variableName, type \u003d\u003d null ? getNativeType(JSTypeNative.NO_TYPE) : type, isExtern, n);\n             } else {\n                 globalThis.defineDeclaredProperty(variableName, type, isExtern, n);\n             }\n         }\n         if (type instanceof EnumType) {\n             Node initialValue \u003d newVar.getInitialValue();\n             boolean isValidValue \u003d initialValue !\u003d null \u0026\u0026 (initialValue.getType() \u003d\u003d Token.OBJECTLIT || initialValue.isQualifiedName());\n             if (!isValidValue) {\n                 compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));\n             }\n         }\n         if (type instanceof FunctionType \u0026\u0026 !type.isEmptyType()) {\n             FunctionType fnType \u003d (FunctionType) type;\n             if ((fnType.isConstructor() || fnType.isInterface()) \u0026\u0026 !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE))) {\n                 FunctionType superClassCtor \u003d fnType.getSuperClassConstructor();\n                 scopeToDeclareIn.declare(variableName + \".prototype\", n, fnType.getPrototype(), input, superClassCtor \u003d\u003d null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n                 if (newVar.getInitialValue() \u003d\u003d null \u0026\u0026 !isExtern \u0026\u0026 variableName.equals(fnType.getInstanceType().getReferenceName())) {\n                     compiler.report(JSError.make(sourceName, n, fnType.isConstructor() ? CTOR_INITIALIZER : IFACE_INITIALIZER, variableName));\n                 }\n             }\n         }\n     }\n-    if (isGlobalVar \u0026\u0026 \"Window\".equals(variableName) \u0026\u0026 type instanceof FunctionType) {\n+    if (isGlobalVar \u0026\u0026 \"Window\".equals(variableName) \u0026\u0026 type instanceof FunctionType \u0026\u0026 type.isConstructor()) {\n         FunctionType globalThisCtor \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();\n         globalThisCtor.getInstanceType().clearCachedValues();\n         globalThisCtor.getPrototype().clearCachedValues();\n         globalThisCtor.setPrototypeBasedOn(((FunctionType) type).getInstanceType());\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f80152eb5a2de72e8336b26e0e78b9e6baae37d2": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "\nMake the global-this a true subtype of window.\nDeclare \u0027goog\u0027 at scope-declaration time.\n\n\nR\u003djohnlenz\nDELTA\u003d166  (126 added, 11 deleted, 29 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d784\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@861 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/7/11, 5:08 PM",
      "commitName": "f80152eb5a2de72e8336b26e0e78b9e6baae37d2",
      "commitAuthor": "nicksantos@google.com",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "\nMake the global-this a true subtype of window.\nDeclare \u0027goog\u0027 at scope-declaration time.\n\n\nR\u003djohnlenz\nDELTA\u003d166  (126 added, 11 deleted, 29 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d784\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@861 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "3/7/11, 5:08 PM",
          "commitName": "f80152eb5a2de72e8336b26e0e78b9e6baae37d2",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "3/1/11, 7:50 AM",
          "commitNameOld": "a2153e7405e09c8fa413a01874c949b8b2bcd32b",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 6.39,
          "commitsBetweenForRepo": 28,
          "commitsBetweenForFile": 1,
          "actualSource": "void defineSlot(Node n, Node parent, String variableName, JSType type, boolean inferred) {\n    Preconditions.checkArgument(!variableName.isEmpty());\n    boolean isGlobalVar \u003d n.getType() \u003d\u003d Token.NAME \u0026\u0026 scope.isGlobal();\n    boolean shouldDeclareOnGlobalThis \u003d isGlobalVar \u0026\u0026 (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.FUNCTION);\n    Scope scopeToDeclareIn \u003d scope;\n    if (n.getType() \u003d\u003d Token.GETPROP \u0026\u0026 !scope.isGlobal() \u0026\u0026 isQnameRootedInGlobalScope(n)) {\n        Scope globalScope \u003d scope.getGlobalScope();\n        if (!globalScope.isDeclared(variableName, false)) {\n            scopeToDeclareIn \u003d scope.getGlobalScope();\n        }\n    }\n    if (scopeToDeclareIn.isDeclared(variableName, false)) {\n        Var oldVar \u003d scopeToDeclareIn.getVar(variableName);\n        validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);\n    } else {\n        if (!inferred) {\n            setDeferredType(n, type);\n        }\n        CompilerInput input \u003d compiler.getInput(sourceName);\n        boolean isExtern \u003d input.isExtern();\n        Var newVar \u003d scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n        if (shouldDeclareOnGlobalThis) {\n            ObjectType globalThis \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS);\n            if (inferred) {\n                globalThis.defineInferredProperty(variableName, type \u003d\u003d null ? getNativeType(JSTypeNative.NO_TYPE) : type, isExtern, n);\n            } else {\n                globalThis.defineDeclaredProperty(variableName, type, isExtern, n);\n            }\n        }\n        if (type instanceof EnumType) {\n            Node initialValue \u003d newVar.getInitialValue();\n            boolean isValidValue \u003d initialValue !\u003d null \u0026\u0026 (initialValue.getType() \u003d\u003d Token.OBJECTLIT || initialValue.isQualifiedName());\n            if (!isValidValue) {\n                compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));\n            }\n        }\n        if (type instanceof FunctionType \u0026\u0026 !type.isEmptyType()) {\n            FunctionType fnType \u003d (FunctionType) type;\n            if ((fnType.isConstructor() || fnType.isInterface()) \u0026\u0026 !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE))) {\n                FunctionType superClassCtor \u003d fnType.getSuperClassConstructor();\n                scopeToDeclareIn.declare(variableName + \".prototype\", n, fnType.getPrototype(), input, superClassCtor \u003d\u003d null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n                if (newVar.getInitialValue() \u003d\u003d null \u0026\u0026 !isExtern \u0026\u0026 variableName.equals(fnType.getInstanceType().getReferenceName())) {\n                    compiler.report(JSError.make(sourceName, n, fnType.isConstructor() ? CTOR_INITIALIZER : IFACE_INITIALIZER, variableName));\n                }\n            }\n        }\n    }\n    if (isGlobalVar \u0026\u0026 \"Window\".equals(variableName) \u0026\u0026 type instanceof FunctionType) {\n        FunctionType globalThisCtor \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();\n        globalThisCtor.getInstanceType().clearCachedValues();\n        globalThisCtor.getPrototype().clearCachedValues();\n        globalThisCtor.setPrototypeBasedOn(((FunctionType) type).getInstanceType());\n    }\n}",
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
          "functionStartLine": 1004,
          "functionName": "defineSlot",
          "functionAnnotation": "",
          "functionDoc": "Defines a symbol in the current scope.\n\n@param n the defining NAME or GETPROP or object literal key node.\n@param parent the {@code n}\u0027s parent.\n@param variableName The name that this should be known by.\n@param type the variable\u0027s type. It may be {@code null} if\n    {@code inferred} is {@code true}.\n@param inferred Whether the type is inferred or declared.\n",
          "diff": "@@ -1,47 +1,54 @@\n void defineSlot(Node n, Node parent, String variableName, JSType type, boolean inferred) {\n     Preconditions.checkArgument(!variableName.isEmpty());\n-    boolean shouldDeclareOnGlobalThis \u003d n.getType() \u003d\u003d Token.NAME \u0026\u0026 scope.isGlobal() \u0026\u0026 (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.FUNCTION);\n+    boolean isGlobalVar \u003d n.getType() \u003d\u003d Token.NAME \u0026\u0026 scope.isGlobal();\n+    boolean shouldDeclareOnGlobalThis \u003d isGlobalVar \u0026\u0026 (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.FUNCTION);\n     Scope scopeToDeclareIn \u003d scope;\n     if (n.getType() \u003d\u003d Token.GETPROP \u0026\u0026 !scope.isGlobal() \u0026\u0026 isQnameRootedInGlobalScope(n)) {\n         Scope globalScope \u003d scope.getGlobalScope();\n         if (!globalScope.isDeclared(variableName, false)) {\n             scopeToDeclareIn \u003d scope.getGlobalScope();\n         }\n     }\n     if (scopeToDeclareIn.isDeclared(variableName, false)) {\n         Var oldVar \u003d scopeToDeclareIn.getVar(variableName);\n         validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);\n     } else {\n         if (!inferred) {\n             setDeferredType(n, type);\n         }\n         CompilerInput input \u003d compiler.getInput(sourceName);\n         boolean isExtern \u003d input.isExtern();\n         Var newVar \u003d scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n         if (shouldDeclareOnGlobalThis) {\n-            ObjectType globalThis \u003d typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n+            ObjectType globalThis \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS);\n             if (inferred) {\n                 globalThis.defineInferredProperty(variableName, type \u003d\u003d null ? getNativeType(JSTypeNative.NO_TYPE) : type, isExtern, n);\n             } else {\n                 globalThis.defineDeclaredProperty(variableName, type, isExtern, n);\n             }\n         }\n         if (type instanceof EnumType) {\n             Node initialValue \u003d newVar.getInitialValue();\n             boolean isValidValue \u003d initialValue !\u003d null \u0026\u0026 (initialValue.getType() \u003d\u003d Token.OBJECTLIT || initialValue.isQualifiedName());\n             if (!isValidValue) {\n                 compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));\n             }\n         }\n         if (type instanceof FunctionType \u0026\u0026 !type.isEmptyType()) {\n             FunctionType fnType \u003d (FunctionType) type;\n             if ((fnType.isConstructor() || fnType.isInterface()) \u0026\u0026 !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE))) {\n                 FunctionType superClassCtor \u003d fnType.getSuperClassConstructor();\n                 scopeToDeclareIn.declare(variableName + \".prototype\", n, fnType.getPrototype(), input, superClassCtor \u003d\u003d null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n                 if (newVar.getInitialValue() \u003d\u003d null \u0026\u0026 !isExtern \u0026\u0026 variableName.equals(fnType.getInstanceType().getReferenceName())) {\n                     compiler.report(JSError.make(sourceName, n, fnType.isConstructor() ? CTOR_INITIALIZER : IFACE_INITIALIZER, variableName));\n                 }\n             }\n         }\n     }\n+    if (isGlobalVar \u0026\u0026 \"Window\".equals(variableName) \u0026\u0026 type instanceof FunctionType) {\n+        FunctionType globalThisCtor \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();\n+        globalThisCtor.getInstanceType().clearCachedValues();\n+        globalThisCtor.getPrototype().clearCachedValues();\n+        globalThisCtor.setPrototypeBasedOn(((FunctionType) type).getInstanceType());\n+    }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "\nMake the global-this a true subtype of window.\nDeclare \u0027goog\u0027 at scope-declaration time.\n\n\nR\u003djohnlenz\nDELTA\u003d166  (126 added, 11 deleted, 29 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d784\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@861 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "3/7/11, 5:08 PM",
          "commitName": "f80152eb5a2de72e8336b26e0e78b9e6baae37d2",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "3/1/11, 7:50 AM",
          "commitNameOld": "a2153e7405e09c8fa413a01874c949b8b2bcd32b",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 6.39,
          "commitsBetweenForRepo": 28,
          "commitsBetweenForFile": 1,
          "actualSource": "void defineSlot(Node n, Node parent, String variableName, JSType type, boolean inferred) {\n    Preconditions.checkArgument(!variableName.isEmpty());\n    boolean isGlobalVar \u003d n.getType() \u003d\u003d Token.NAME \u0026\u0026 scope.isGlobal();\n    boolean shouldDeclareOnGlobalThis \u003d isGlobalVar \u0026\u0026 (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.FUNCTION);\n    Scope scopeToDeclareIn \u003d scope;\n    if (n.getType() \u003d\u003d Token.GETPROP \u0026\u0026 !scope.isGlobal() \u0026\u0026 isQnameRootedInGlobalScope(n)) {\n        Scope globalScope \u003d scope.getGlobalScope();\n        if (!globalScope.isDeclared(variableName, false)) {\n            scopeToDeclareIn \u003d scope.getGlobalScope();\n        }\n    }\n    if (scopeToDeclareIn.isDeclared(variableName, false)) {\n        Var oldVar \u003d scopeToDeclareIn.getVar(variableName);\n        validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);\n    } else {\n        if (!inferred) {\n            setDeferredType(n, type);\n        }\n        CompilerInput input \u003d compiler.getInput(sourceName);\n        boolean isExtern \u003d input.isExtern();\n        Var newVar \u003d scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n        if (shouldDeclareOnGlobalThis) {\n            ObjectType globalThis \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS);\n            if (inferred) {\n                globalThis.defineInferredProperty(variableName, type \u003d\u003d null ? getNativeType(JSTypeNative.NO_TYPE) : type, isExtern, n);\n            } else {\n                globalThis.defineDeclaredProperty(variableName, type, isExtern, n);\n            }\n        }\n        if (type instanceof EnumType) {\n            Node initialValue \u003d newVar.getInitialValue();\n            boolean isValidValue \u003d initialValue !\u003d null \u0026\u0026 (initialValue.getType() \u003d\u003d Token.OBJECTLIT || initialValue.isQualifiedName());\n            if (!isValidValue) {\n                compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));\n            }\n        }\n        if (type instanceof FunctionType \u0026\u0026 !type.isEmptyType()) {\n            FunctionType fnType \u003d (FunctionType) type;\n            if ((fnType.isConstructor() || fnType.isInterface()) \u0026\u0026 !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE))) {\n                FunctionType superClassCtor \u003d fnType.getSuperClassConstructor();\n                scopeToDeclareIn.declare(variableName + \".prototype\", n, fnType.getPrototype(), input, superClassCtor \u003d\u003d null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n                if (newVar.getInitialValue() \u003d\u003d null \u0026\u0026 !isExtern \u0026\u0026 variableName.equals(fnType.getInstanceType().getReferenceName())) {\n                    compiler.report(JSError.make(sourceName, n, fnType.isConstructor() ? CTOR_INITIALIZER : IFACE_INITIALIZER, variableName));\n                }\n            }\n        }\n    }\n    if (isGlobalVar \u0026\u0026 \"Window\".equals(variableName) \u0026\u0026 type instanceof FunctionType) {\n        FunctionType globalThisCtor \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();\n        globalThisCtor.getInstanceType().clearCachedValues();\n        globalThisCtor.getPrototype().clearCachedValues();\n        globalThisCtor.setPrototypeBasedOn(((FunctionType) type).getInstanceType());\n    }\n}",
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
          "functionStartLine": 1004,
          "functionName": "defineSlot",
          "functionAnnotation": "",
          "functionDoc": "Defines a symbol in the current scope.\n\n@param n the defining NAME or GETPROP or object literal key node.\n@param parent the {@code n}\u0027s parent.\n@param variableName The name that this should be known by.\n@param type the variable\u0027s type. It may be {@code null} if\n    {@code inferred} is {@code true}.\n@param inferred Whether the type is inferred or declared.\n",
          "diff": "@@ -1,47 +1,54 @@\n void defineSlot(Node n, Node parent, String variableName, JSType type, boolean inferred) {\n     Preconditions.checkArgument(!variableName.isEmpty());\n-    boolean shouldDeclareOnGlobalThis \u003d n.getType() \u003d\u003d Token.NAME \u0026\u0026 scope.isGlobal() \u0026\u0026 (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.FUNCTION);\n+    boolean isGlobalVar \u003d n.getType() \u003d\u003d Token.NAME \u0026\u0026 scope.isGlobal();\n+    boolean shouldDeclareOnGlobalThis \u003d isGlobalVar \u0026\u0026 (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.FUNCTION);\n     Scope scopeToDeclareIn \u003d scope;\n     if (n.getType() \u003d\u003d Token.GETPROP \u0026\u0026 !scope.isGlobal() \u0026\u0026 isQnameRootedInGlobalScope(n)) {\n         Scope globalScope \u003d scope.getGlobalScope();\n         if (!globalScope.isDeclared(variableName, false)) {\n             scopeToDeclareIn \u003d scope.getGlobalScope();\n         }\n     }\n     if (scopeToDeclareIn.isDeclared(variableName, false)) {\n         Var oldVar \u003d scopeToDeclareIn.getVar(variableName);\n         validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);\n     } else {\n         if (!inferred) {\n             setDeferredType(n, type);\n         }\n         CompilerInput input \u003d compiler.getInput(sourceName);\n         boolean isExtern \u003d input.isExtern();\n         Var newVar \u003d scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n         if (shouldDeclareOnGlobalThis) {\n-            ObjectType globalThis \u003d typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n+            ObjectType globalThis \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS);\n             if (inferred) {\n                 globalThis.defineInferredProperty(variableName, type \u003d\u003d null ? getNativeType(JSTypeNative.NO_TYPE) : type, isExtern, n);\n             } else {\n                 globalThis.defineDeclaredProperty(variableName, type, isExtern, n);\n             }\n         }\n         if (type instanceof EnumType) {\n             Node initialValue \u003d newVar.getInitialValue();\n             boolean isValidValue \u003d initialValue !\u003d null \u0026\u0026 (initialValue.getType() \u003d\u003d Token.OBJECTLIT || initialValue.isQualifiedName());\n             if (!isValidValue) {\n                 compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));\n             }\n         }\n         if (type instanceof FunctionType \u0026\u0026 !type.isEmptyType()) {\n             FunctionType fnType \u003d (FunctionType) type;\n             if ((fnType.isConstructor() || fnType.isInterface()) \u0026\u0026 !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE))) {\n                 FunctionType superClassCtor \u003d fnType.getSuperClassConstructor();\n                 scopeToDeclareIn.declare(variableName + \".prototype\", n, fnType.getPrototype(), input, superClassCtor \u003d\u003d null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n                 if (newVar.getInitialValue() \u003d\u003d null \u0026\u0026 !isExtern \u0026\u0026 variableName.equals(fnType.getInstanceType().getReferenceName())) {\n                     compiler.report(JSError.make(sourceName, n, fnType.isConstructor() ? CTOR_INITIALIZER : IFACE_INITIALIZER, variableName));\n                 }\n             }\n         }\n     }\n+    if (isGlobalVar \u0026\u0026 \"Window\".equals(variableName) \u0026\u0026 type instanceof FunctionType) {\n+        FunctionType globalThisCtor \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();\n+        globalThisCtor.getInstanceType().clearCachedValues();\n+        globalThisCtor.getPrototype().clearCachedValues();\n+        globalThisCtor.setPrototypeBasedOn(((FunctionType) type).getInstanceType());\n+    }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Defines a symbol in the current scope.\n\n@param n the defining NAME or GETPROP or object literal key node.\n@param parent the {@code n}\u0027s parent.\n@param name The name that this should be known by.\n@param type the variable\u0027s type. It may be {@code null} if\n    {@code inferred} is {@code true}.\n@param inferred Whether the type is inferred or declared.\n",
            "newValue": "Defines a symbol in the current scope.\n\n@param n the defining NAME or GETPROP or object literal key node.\n@param parent the {@code n}\u0027s parent.\n@param variableName The name that this should be known by.\n@param type the variable\u0027s type. It may be {@code null} if\n    {@code inferred} is {@code true}.\n@param inferred Whether the type is inferred or declared.\n"
          }
        }
      ]
    },
    "072fa2d047573d2d1f0187ba4bf76b1afa75031c": {
      "type": "Yintroduced",
      "commitMessage": "\nWhen a property of a named object literal is declared,\ndeclare the qualified name of that property.\n\nR\u003djohnlenz\nDELTA\u003d82  (58 added, 3 deleted, 21 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d546\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@793 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/16/11, 8:38 PM",
      "commitName": "072fa2d047573d2d1f0187ba4bf76b1afa75031c",
      "commitAuthor": "nicksantos@google.com",
      "diff": "@@ -0,0 +1,47 @@\n+void defineSlot(Node n, Node parent, String variableName, JSType type, boolean inferred) {\n+    Preconditions.checkArgument(!variableName.isEmpty());\n+    boolean shouldDeclareOnGlobalThis \u003d n.getType() \u003d\u003d Token.NAME \u0026\u0026 scope.isGlobal() \u0026\u0026 (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.FUNCTION);\n+    Scope scopeToDeclareIn \u003d scope;\n+    if (n.getType() \u003d\u003d Token.GETPROP \u0026\u0026 !scope.isGlobal() \u0026\u0026 isQnameRootedInGlobalScope(n)) {\n+        Scope globalScope \u003d scope.getGlobalScope();\n+        if (!globalScope.isDeclared(variableName, false)) {\n+            scopeToDeclareIn \u003d scope.getGlobalScope();\n+        }\n+    }\n+    if (scopeToDeclareIn.isDeclared(variableName, false)) {\n+        Var oldVar \u003d scopeToDeclareIn.getVar(variableName);\n+        validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);\n+    } else {\n+        if (!inferred) {\n+            setDeferredType(n, type);\n+        }\n+        CompilerInput input \u003d compiler.getInput(sourceName);\n+        boolean isExtern \u003d input.isExtern();\n+        Var newVar \u003d scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n+        if (shouldDeclareOnGlobalThis) {\n+            ObjectType globalThis \u003d typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n+            if (inferred) {\n+                globalThis.defineInferredProperty(variableName, type \u003d\u003d null ? getNativeType(JSTypeNative.NO_TYPE) : type, isExtern, n);\n+            } else {\n+                globalThis.defineDeclaredProperty(variableName, type, isExtern, n);\n+            }\n+        }\n+        if (type instanceof EnumType) {\n+            Node initialValue \u003d newVar.getInitialValue();\n+            boolean isValidValue \u003d initialValue !\u003d null \u0026\u0026 (initialValue.getType() \u003d\u003d Token.OBJECTLIT || initialValue.isQualifiedName());\n+            if (!isValidValue) {\n+                compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));\n+            }\n+        }\n+        if (type instanceof FunctionType \u0026\u0026 !type.isEmptyType()) {\n+            FunctionType fnType \u003d (FunctionType) type;\n+            if ((fnType.isConstructor() || fnType.isInterface()) \u0026\u0026 !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE))) {\n+                FunctionType superClassCtor \u003d fnType.getSuperClassConstructor();\n+                scopeToDeclareIn.declare(variableName + \".prototype\", n, fnType.getPrototype(), input, superClassCtor \u003d\u003d null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n+                if (newVar.getInitialValue() \u003d\u003d null \u0026\u0026 !isExtern \u0026\u0026 variableName.equals(fnType.getInstanceType().getReferenceName())) {\n+                    compiler.report(JSError.make(sourceName, n, fnType.isConstructor() ? CTOR_INITIALIZER : IFACE_INITIALIZER, variableName));\n+                }\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "void defineSlot(Node n, Node parent, String variableName, JSType type, boolean inferred) {\n    Preconditions.checkArgument(!variableName.isEmpty());\n    boolean shouldDeclareOnGlobalThis \u003d n.getType() \u003d\u003d Token.NAME \u0026\u0026 scope.isGlobal() \u0026\u0026 (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.FUNCTION);\n    Scope scopeToDeclareIn \u003d scope;\n    if (n.getType() \u003d\u003d Token.GETPROP \u0026\u0026 !scope.isGlobal() \u0026\u0026 isQnameRootedInGlobalScope(n)) {\n        Scope globalScope \u003d scope.getGlobalScope();\n        if (!globalScope.isDeclared(variableName, false)) {\n            scopeToDeclareIn \u003d scope.getGlobalScope();\n        }\n    }\n    if (scopeToDeclareIn.isDeclared(variableName, false)) {\n        Var oldVar \u003d scopeToDeclareIn.getVar(variableName);\n        validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);\n    } else {\n        if (!inferred) {\n            setDeferredType(n, type);\n        }\n        CompilerInput input \u003d compiler.getInput(sourceName);\n        boolean isExtern \u003d input.isExtern();\n        Var newVar \u003d scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n        if (shouldDeclareOnGlobalThis) {\n            ObjectType globalThis \u003d typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n            if (inferred) {\n                globalThis.defineInferredProperty(variableName, type \u003d\u003d null ? getNativeType(JSTypeNative.NO_TYPE) : type, isExtern, n);\n            } else {\n                globalThis.defineDeclaredProperty(variableName, type, isExtern, n);\n            }\n        }\n        if (type instanceof EnumType) {\n            Node initialValue \u003d newVar.getInitialValue();\n            boolean isValidValue \u003d initialValue !\u003d null \u0026\u0026 (initialValue.getType() \u003d\u003d Token.OBJECTLIT || initialValue.isQualifiedName());\n            if (!isValidValue) {\n                compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));\n            }\n        }\n        if (type instanceof FunctionType \u0026\u0026 !type.isEmptyType()) {\n            FunctionType fnType \u003d (FunctionType) type;\n            if ((fnType.isConstructor() || fnType.isInterface()) \u0026\u0026 !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE))) {\n                FunctionType superClassCtor \u003d fnType.getSuperClassConstructor();\n                scopeToDeclareIn.declare(variableName + \".prototype\", n, fnType.getPrototype(), input, superClassCtor \u003d\u003d null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n                if (newVar.getInitialValue() \u003d\u003d null \u0026\u0026 !isExtern \u0026\u0026 variableName.equals(fnType.getInstanceType().getReferenceName())) {\n                    compiler.report(JSError.make(sourceName, n, fnType.isConstructor() ? CTOR_INITIALIZER : IFACE_INITIALIZER, variableName));\n                }\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 1027,
      "functionName": "defineSlot",
      "functionAnnotation": "",
      "functionDoc": "Defines a symbol in the current scope.\n\n@param n the defining NAME or GETPROP or object literal key node.\n@param parent the {@code n}\u0027s parent.\n@param name The name that this should be known by.\n@param type the variable\u0027s type. It may be {@code null} if\n    {@code inferred} is {@code true}.\n@param inferred Whether the type is inferred or declared.\n"
    }
  }
}