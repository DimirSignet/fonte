{
  "origin": "codeshovel",
  "repositoryName": "Closure-59b",
  "repositoryPath": "/tmp/Closure-59b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FunctionType.java",
  "functionName": "toString",
  "functionId": "toString",
  "sourceFilePath": "src/com/google/javascript/rhino/jstype/FunctionType.java",
  "functionAnnotation": "@Override",
  "functionDoc": "Informally, a function is represented by\n{@code function (params): returnType} where the {@code params} is a comma\nseparated list of types, the first one being a special\n{@code this:T} if the function expects a known type for {@code this}.\n",
  "functionStartLine": 774,
  "functionEndLine": 815,
  "numCommitsSeen": 43,
  "timeTaken": 1827,
  "changeHistory": [
    "e9f7e6114414f68deb90f4116861d7a054365404",
    "a9757e8c7d85f9ee9622b3e5352955ba3429733d",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "e9f7e6114414f68deb90f4116861d7a054365404": "Ybodychange",
    "a9757e8c7d85f9ee9622b3e5352955ba3429733d": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e9f7e6114414f68deb90f4116861d7a054365404": {
      "type": "Ybodychange",
      "commitMessage": "\nAdd a syntax for constructors\n{function(new:Type)}\nfixes issue 281\n\nR\u003djschorr\nDELTA\u003d199  (73 added, 4 deleted, 122 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d133\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@630 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/14/10, 1:49 PM",
      "commitName": "e9f7e6114414f68deb90f4116861d7a054365404",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "11/16/10, 11:03 AM",
      "commitNameOld": "af4b8d4a2da7996f15b405f523ee8b31a0fbf021",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 28.12,
      "commitsBetweenForRepo": 68,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic String toString() {\n    if (this \u003d\u003d registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)) {\n        return \"Function\";\n    }\n    StringBuilder b \u003d new StringBuilder(32);\n    b.append(\"function (\");\n    int paramNum \u003d call.parameters.getChildCount();\n    boolean hasKnownTypeOfThis \u003d !typeOfThis.isUnknownType();\n    if (hasKnownTypeOfThis) {\n        if (isConstructor()) {\n            b.append(\"new:\");\n        } else {\n            b.append(\"this:\");\n        }\n        b.append(typeOfThis.toString());\n    }\n    if (paramNum \u003e 0) {\n        if (hasKnownTypeOfThis) {\n            b.append(\", \");\n        }\n        Node p \u003d call.parameters.getFirstChild();\n        if (p.isVarArgs()) {\n            appendVarArgsString(b, p.getJSType());\n        } else {\n            b.append(p.getJSType().toString());\n        }\n        p \u003d p.getNext();\n        while (p !\u003d null) {\n            b.append(\", \");\n            if (p.isVarArgs()) {\n                appendVarArgsString(b, p.getJSType());\n            } else {\n                b.append(p.getJSType().toString());\n            }\n            p \u003d p.getNext();\n        }\n    }\n    b.append(\"): \");\n    b.append(call.returnType);\n    return b.toString();\n}",
      "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
      "functionStartLine": 697,
      "functionName": "toString",
      "functionAnnotation": "@Override",
      "functionDoc": "Informally, a function is represented by\n{@code function (params): returnType} where the {@code params} is a comma\nseparated list of types, the first one being a special\n{@code this:T} if the function expects a known type for {@code this}.\n",
      "diff": "@@ -1,38 +1,42 @@\n @Override\n public String toString() {\n     if (this \u003d\u003d registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)) {\n         return \"Function\";\n     }\n     StringBuilder b \u003d new StringBuilder(32);\n     b.append(\"function (\");\n     int paramNum \u003d call.parameters.getChildCount();\n     boolean hasKnownTypeOfThis \u003d !typeOfThis.isUnknownType();\n     if (hasKnownTypeOfThis) {\n-        b.append(\"this:\");\n+        if (isConstructor()) {\n+            b.append(\"new:\");\n+        } else {\n+            b.append(\"this:\");\n+        }\n         b.append(typeOfThis.toString());\n     }\n     if (paramNum \u003e 0) {\n         if (hasKnownTypeOfThis) {\n             b.append(\", \");\n         }\n         Node p \u003d call.parameters.getFirstChild();\n         if (p.isVarArgs()) {\n             appendVarArgsString(b, p.getJSType());\n         } else {\n             b.append(p.getJSType().toString());\n         }\n         p \u003d p.getNext();\n         while (p !\u003d null) {\n             b.append(\", \");\n             if (p.isVarArgs()) {\n                 appendVarArgsString(b, p.getJSType());\n             } else {\n                 b.append(p.getJSType().toString());\n             }\n             p \u003d p.getNext();\n         }\n     }\n     b.append(\"): \");\n     b.append(call.returnType);\n     return b.toString();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a9757e8c7d85f9ee9622b3e5352955ba3429733d": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/05/17 by robby\n\n        Check for non-alias locals in ScopedAliases.\n\n        R\u003dnick\n        DELTA\u003d26  (22 added, 3 deleted, 1 changed)\n\nChange on 2010/05/18 by nick\n\n        Add inferred return types.\n        Make the inf/sup relationship for function types a bit richer.\n        Make sure that the [call] pointer can never be null.\n\n        R\u003dandrew\n        DELTA\u003d192  (134 added, 30 deleted, 28 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d4001\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@216 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/18/10, 10:06 AM",
      "commitName": "a9757e8c7d85f9ee9622b3e5352955ba3429733d",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/19/10, 4:28 PM",
      "commitNameOld": "5da32cba7b68d69acfc535f57f21d652475d256f",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 28.73,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic String toString() {\n    if (this \u003d\u003d registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)) {\n        return \"Function\";\n    }\n    StringBuilder b \u003d new StringBuilder(32);\n    b.append(\"function (\");\n    int paramNum \u003d call.parameters.getChildCount();\n    boolean hasKnownTypeOfThis \u003d !typeOfThis.isUnknownType();\n    if (hasKnownTypeOfThis) {\n        b.append(\"this:\");\n        b.append(typeOfThis.toString());\n    }\n    if (paramNum \u003e 0) {\n        if (hasKnownTypeOfThis) {\n            b.append(\", \");\n        }\n        Node p \u003d call.parameters.getFirstChild();\n        if (p.isVarArgs()) {\n            appendVarArgsString(b, p.getJSType());\n        } else {\n            b.append(p.getJSType().toString());\n        }\n        p \u003d p.getNext();\n        while (p !\u003d null) {\n            b.append(\", \");\n            if (p.isVarArgs()) {\n                appendVarArgsString(b, p.getJSType());\n            } else {\n                b.append(p.getJSType().toString());\n            }\n            p \u003d p.getNext();\n        }\n    }\n    b.append(\"): \");\n    b.append(call.returnType);\n    return b.toString();\n}",
      "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
      "functionStartLine": 626,
      "functionName": "toString",
      "functionAnnotation": "@Override",
      "functionDoc": "Informally, a function is represented by\n{@code function (params): returnType} where the {@code params} is a comma\nseparated list of types, the first one being a special\n{@code this:T} if the function expects a known type for {@code this}.\n",
      "diff": "@@ -1,41 +1,38 @@\n @Override\n public String toString() {\n     if (this \u003d\u003d registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)) {\n         return \"Function\";\n     }\n     StringBuilder b \u003d new StringBuilder(32);\n     b.append(\"function (\");\n-    int paramNum \u003d (call \u003d\u003d null || call.parameters \u003d\u003d null) ? 0 : call.parameters.getChildCount();\n+    int paramNum \u003d call.parameters.getChildCount();\n     boolean hasKnownTypeOfThis \u003d !typeOfThis.isUnknownType();\n     if (hasKnownTypeOfThis) {\n         b.append(\"this:\");\n         b.append(typeOfThis.toString());\n     }\n     if (paramNum \u003e 0) {\n         if (hasKnownTypeOfThis) {\n             b.append(\", \");\n         }\n         Node p \u003d call.parameters.getFirstChild();\n         if (p.isVarArgs()) {\n             appendVarArgsString(b, p.getJSType());\n         } else {\n             b.append(p.getJSType().toString());\n         }\n         p \u003d p.getNext();\n         while (p !\u003d null) {\n             b.append(\", \");\n             if (p.isVarArgs()) {\n                 appendVarArgsString(b, p.getJSType());\n             } else {\n                 b.append(p.getJSType().toString());\n             }\n             p \u003d p.getNext();\n         }\n     }\n-    b.append(\")\");\n-    if (call !\u003d null \u0026\u0026 call.returnType !\u003d null) {\n-        b.append(\": \");\n-        b.append(call.returnType);\n-    }\n+    b.append(\"): \");\n+    b.append(call.returnType);\n     return b.toString();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,41 @@\n+@Override\n+public String toString() {\n+    if (this \u003d\u003d registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)) {\n+        return \"Function\";\n+    }\n+    StringBuilder b \u003d new StringBuilder(32);\n+    b.append(\"function (\");\n+    int paramNum \u003d (call \u003d\u003d null || call.parameters \u003d\u003d null) ? 0 : call.parameters.getChildCount();\n+    boolean hasKnownTypeOfThis \u003d !typeOfThis.isUnknownType();\n+    if (hasKnownTypeOfThis) {\n+        b.append(\"this:\");\n+        b.append(typeOfThis.toString());\n+    }\n+    if (paramNum \u003e 0) {\n+        if (hasKnownTypeOfThis) {\n+            b.append(\", \");\n+        }\n+        Node p \u003d call.parameters.getFirstChild();\n+        if (p.isVarArgs()) {\n+            appendVarArgsString(b, p.getJSType());\n+        } else {\n+            b.append(p.getJSType().toString());\n+        }\n+        p \u003d p.getNext();\n+        while (p !\u003d null) {\n+            b.append(\", \");\n+            if (p.isVarArgs()) {\n+                appendVarArgsString(b, p.getJSType());\n+            } else {\n+                b.append(p.getJSType().toString());\n+            }\n+            p \u003d p.getNext();\n+        }\n+    }\n+    b.append(\")\");\n+    if (call !\u003d null \u0026\u0026 call.returnType !\u003d null) {\n+        b.append(\": \");\n+        b.append(call.returnType);\n+    }\n+    return b.toString();\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic String toString() {\n    if (this \u003d\u003d registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)) {\n        return \"Function\";\n    }\n    StringBuilder b \u003d new StringBuilder(32);\n    b.append(\"function (\");\n    int paramNum \u003d (call \u003d\u003d null || call.parameters \u003d\u003d null) ? 0 : call.parameters.getChildCount();\n    boolean hasKnownTypeOfThis \u003d !typeOfThis.isUnknownType();\n    if (hasKnownTypeOfThis) {\n        b.append(\"this:\");\n        b.append(typeOfThis.toString());\n    }\n    if (paramNum \u003e 0) {\n        if (hasKnownTypeOfThis) {\n            b.append(\", \");\n        }\n        Node p \u003d call.parameters.getFirstChild();\n        if (p.isVarArgs()) {\n            appendVarArgsString(b, p.getJSType());\n        } else {\n            b.append(p.getJSType().toString());\n        }\n        p \u003d p.getNext();\n        while (p !\u003d null) {\n            b.append(\", \");\n            if (p.isVarArgs()) {\n                appendVarArgsString(b, p.getJSType());\n            } else {\n                b.append(p.getJSType().toString());\n            }\n            p \u003d p.getNext();\n        }\n    }\n    b.append(\")\");\n    if (call !\u003d null \u0026\u0026 call.returnType !\u003d null) {\n        b.append(\": \");\n        b.append(call.returnType);\n    }\n    return b.toString();\n}",
      "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
      "functionStartLine": 642,
      "functionName": "toString",
      "functionAnnotation": "@Override",
      "functionDoc": "Informally, a function is represented by\n{@code function (params): returnType} where the {@code params} is a comma\nseparated list of types, the first one being a special\n{@code this:T} if the function expects a known type for {@code this}.\n"
    }
  }
}