{
  "origin": "codeshovel",
  "repositoryName": "Closure-59b",
  "repositoryPath": "/tmp/Closure-59b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CheckAccessControls.java",
  "functionName": "checkPropertyVisibility",
  "functionId": "checkPropertyVisibility___t-NodeTraversal__getprop-Node__parent-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/CheckAccessControls.java",
  "functionAnnotation": "",
  "functionDoc": "Determines whether the given property is visible in the current context.\n\n@param t The current traversal.\n@param getprop The getprop node.\n",
  "functionStartLine": 417,
  "functionEndLine": 510,
  "numCommitsSeen": 14,
  "timeTaken": 737,
  "changeHistory": [
    "db1fdf97454a6e4ff2d29cab5f1ef2273b54c0b4",
    "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4",
    "a2d8936fae3eb0e3873c7f7c0233344c81436404",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "db1fdf97454a6e4ff2d29cab5f1ef2273b54c0b4": "Ybodychange",
    "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4": "Ybodychange",
    "a2d8936fae3eb0e3873c7f7c0233344c81436404": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "db1fdf97454a6e4ff2d29cab5f1ef2273b54c0b4": {
      "type": "Ybodychange",
      "commitMessage": "\nEmit a warning when a private property overrides another private\nproperty, with both defined in the ctor.\nFixes issue 254\n\n\n\nR\u003dzhuyi,pupius\nDELTA\u003d152  (134 added, 10 deleted, 8 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1860\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1089 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/12/11, 11:49 AM",
      "commitName": "db1fdf97454a6e4ff2d29cab5f1ef2273b54c0b4",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "5/11/11, 9:39 AM",
      "commitNameOld": "441d31de49d1ccfec562a7287b1ff4451c9815e4",
      "commitAuthorOld": "bashir@google.com",
      "daysBetweenCommits": 1.09,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "private void checkPropertyVisibility(NodeTraversal t, Node getprop, Node parent) {\n    ObjectType objectType \u003d ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n    String propertyName \u003d getprop.getLastChild().getString();\n    if (objectType !\u003d null) {\n        boolean isOverride \u003d parent.getJSDocInfo() !\u003d null \u0026\u0026 parent.getType() \u003d\u003d Token.ASSIGN \u0026\u0026 parent.getFirstChild() \u003d\u003d getprop;\n        if (isOverride) {\n            objectType \u003d objectType.getImplicitPrototype();\n        }\n        JSDocInfo docInfo \u003d null;\n        for (; objectType !\u003d null; objectType \u003d objectType.getImplicitPrototype()) {\n            docInfo \u003d objectType.getOwnPropertyJSDocInfo(propertyName);\n            if (docInfo !\u003d null \u0026\u0026 docInfo.getVisibility() !\u003d Visibility.INHERITED) {\n                break;\n            }\n        }\n        if (objectType \u003d\u003d null) {\n            return;\n        }\n        boolean sameInput \u003d t.getInput().getName().equals(docInfo.getSourceName());\n        Visibility visibility \u003d docInfo.getVisibility();\n        JSType ownerType \u003d normalizeClassType(objectType);\n        if (isOverride) {\n            JSDocInfo overridingInfo \u003d parent.getJSDocInfo();\n            Visibility overridingVisibility \u003d overridingInfo \u003d\u003d null ? Visibility.INHERITED : overridingInfo.getVisibility();\n            if (visibility \u003d\u003d Visibility.PRIVATE \u0026\u0026 !sameInput) {\n                compiler.report(t.makeError(getprop, PRIVATE_OVERRIDE, objectType.toString()));\n            } else if (overridingVisibility !\u003d Visibility.INHERITED \u0026\u0026 overridingVisibility !\u003d visibility) {\n                compiler.report(t.makeError(getprop, VISIBILITY_MISMATCH, visibility.name(), objectType.toString(), overridingVisibility.name()));\n            }\n        } else {\n            if (sameInput) {\n                return;\n            } else if (visibility \u003d\u003d Visibility.PRIVATE \u0026\u0026 (currentClass \u003d\u003d null || ownerType.differsFrom(currentClass))) {\n                if (docInfo.isConstructor() \u0026\u0026 isValidPrivateConstructorAccess(parent)) {\n                    return;\n                }\n                compiler.report(t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n            } else if (visibility \u003d\u003d Visibility.PROTECTED) {\n                if (currentClass \u003d\u003d null || !currentClass.isSubtype(ownerType)) {\n                    compiler.report(t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n                }\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/CheckAccessControls.java",
      "functionStartLine": 407,
      "functionName": "checkPropertyVisibility",
      "functionAnnotation": "",
      "functionDoc": "Determines whether the given property is visible in the current context.\n\n@param t The current traversal.\n@param getprop The getprop node.\n",
      "diff": "@@ -1,45 +1,45 @@\n private void checkPropertyVisibility(NodeTraversal t, Node getprop, Node parent) {\n     ObjectType objectType \u003d ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n     String propertyName \u003d getprop.getLastChild().getString();\n     if (objectType !\u003d null) {\n-        boolean isOverride \u003d t.inGlobalScope() \u0026\u0026 parent.getType() \u003d\u003d Token.ASSIGN \u0026\u0026 parent.getFirstChild() \u003d\u003d getprop;\n+        boolean isOverride \u003d parent.getJSDocInfo() !\u003d null \u0026\u0026 parent.getType() \u003d\u003d Token.ASSIGN \u0026\u0026 parent.getFirstChild() \u003d\u003d getprop;\n         if (isOverride) {\n             objectType \u003d objectType.getImplicitPrototype();\n         }\n         JSDocInfo docInfo \u003d null;\n         for (; objectType !\u003d null; objectType \u003d objectType.getImplicitPrototype()) {\n             docInfo \u003d objectType.getOwnPropertyJSDocInfo(propertyName);\n             if (docInfo !\u003d null \u0026\u0026 docInfo.getVisibility() !\u003d Visibility.INHERITED) {\n                 break;\n             }\n         }\n         if (objectType \u003d\u003d null) {\n             return;\n         }\n         boolean sameInput \u003d t.getInput().getName().equals(docInfo.getSourceName());\n         Visibility visibility \u003d docInfo.getVisibility();\n         JSType ownerType \u003d normalizeClassType(objectType);\n         if (isOverride) {\n             JSDocInfo overridingInfo \u003d parent.getJSDocInfo();\n             Visibility overridingVisibility \u003d overridingInfo \u003d\u003d null ? Visibility.INHERITED : overridingInfo.getVisibility();\n             if (visibility \u003d\u003d Visibility.PRIVATE \u0026\u0026 !sameInput) {\n                 compiler.report(t.makeError(getprop, PRIVATE_OVERRIDE, objectType.toString()));\n             } else if (overridingVisibility !\u003d Visibility.INHERITED \u0026\u0026 overridingVisibility !\u003d visibility) {\n                 compiler.report(t.makeError(getprop, VISIBILITY_MISMATCH, visibility.name(), objectType.toString(), overridingVisibility.name()));\n             }\n         } else {\n             if (sameInput) {\n                 return;\n             } else if (visibility \u003d\u003d Visibility.PRIVATE \u0026\u0026 (currentClass \u003d\u003d null || ownerType.differsFrom(currentClass))) {\n                 if (docInfo.isConstructor() \u0026\u0026 isValidPrivateConstructorAccess(parent)) {\n                     return;\n                 }\n                 compiler.report(t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n             } else if (visibility \u003d\u003d Visibility.PROTECTED) {\n                 if (currentClass \u003d\u003d null || !currentClass.isSubtype(ownerType)) {\n                     compiler.report(t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n                 }\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4": {
      "type": "Ybodychange",
      "commitMessage": "Remove circular dependency between error-reporting and the rest\nof the compiler. (Nick)\nR\u003dalan\nDELTA\u003d152  (27 added, 28 deleted, 97 changed)\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@159 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/29/10, 7:04 AM",
      "commitName": "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "3/11/10, 9:31 PM",
      "commitNameOld": "7bfdbd9164601af44d17edd51be829fde2cc51aa",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 17.36,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "actualSource": "private void checkPropertyVisibility(NodeTraversal t, Node getprop, Node parent) {\n    ObjectType objectType \u003d ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n    String propertyName \u003d getprop.getLastChild().getString();\n    if (objectType !\u003d null) {\n        boolean isOverride \u003d t.inGlobalScope() \u0026\u0026 parent.getType() \u003d\u003d Token.ASSIGN \u0026\u0026 parent.getFirstChild() \u003d\u003d getprop;\n        if (isOverride) {\n            objectType \u003d objectType.getImplicitPrototype();\n        }\n        JSDocInfo docInfo \u003d null;\n        for (; objectType !\u003d null; objectType \u003d objectType.getImplicitPrototype()) {\n            docInfo \u003d objectType.getOwnPropertyJSDocInfo(propertyName);\n            if (docInfo !\u003d null \u0026\u0026 docInfo.getVisibility() !\u003d Visibility.INHERITED) {\n                break;\n            }\n        }\n        if (objectType \u003d\u003d null) {\n            return;\n        }\n        boolean sameInput \u003d t.getInput().getName().equals(docInfo.getSourceName());\n        Visibility visibility \u003d docInfo.getVisibility();\n        JSType ownerType \u003d normalizeClassType(objectType);\n        if (isOverride) {\n            JSDocInfo overridingInfo \u003d parent.getJSDocInfo();\n            Visibility overridingVisibility \u003d overridingInfo \u003d\u003d null ? Visibility.INHERITED : overridingInfo.getVisibility();\n            if (visibility \u003d\u003d Visibility.PRIVATE \u0026\u0026 !sameInput) {\n                compiler.report(t.makeError(getprop, PRIVATE_OVERRIDE, objectType.toString()));\n            } else if (overridingVisibility !\u003d Visibility.INHERITED \u0026\u0026 overridingVisibility !\u003d visibility) {\n                compiler.report(t.makeError(getprop, VISIBILITY_MISMATCH, visibility.name(), objectType.toString(), overridingVisibility.name()));\n            }\n        } else {\n            if (sameInput) {\n                return;\n            } else if (visibility \u003d\u003d Visibility.PRIVATE \u0026\u0026 (currentClass \u003d\u003d null || ownerType.differsFrom(currentClass))) {\n                if (docInfo.isConstructor() \u0026\u0026 isValidPrivateConstructorAccess(parent)) {\n                    return;\n                }\n                compiler.report(t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n            } else if (visibility \u003d\u003d Visibility.PROTECTED) {\n                if (currentClass \u003d\u003d null || !currentClass.isSubtype(ownerType)) {\n                    compiler.report(t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n                }\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/CheckAccessControls.java",
      "functionStartLine": 337,
      "functionName": "checkPropertyVisibility",
      "functionAnnotation": "",
      "functionDoc": "Determines whether the given property is visible in the current context.\n\n@param t The current traversal.\n@param getprop The getprop node.\n",
      "diff": "@@ -1,45 +1,45 @@\n private void checkPropertyVisibility(NodeTraversal t, Node getprop, Node parent) {\n     ObjectType objectType \u003d ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n     String propertyName \u003d getprop.getLastChild().getString();\n     if (objectType !\u003d null) {\n         boolean isOverride \u003d t.inGlobalScope() \u0026\u0026 parent.getType() \u003d\u003d Token.ASSIGN \u0026\u0026 parent.getFirstChild() \u003d\u003d getprop;\n         if (isOverride) {\n             objectType \u003d objectType.getImplicitPrototype();\n         }\n         JSDocInfo docInfo \u003d null;\n         for (; objectType !\u003d null; objectType \u003d objectType.getImplicitPrototype()) {\n             docInfo \u003d objectType.getOwnPropertyJSDocInfo(propertyName);\n             if (docInfo !\u003d null \u0026\u0026 docInfo.getVisibility() !\u003d Visibility.INHERITED) {\n                 break;\n             }\n         }\n         if (objectType \u003d\u003d null) {\n             return;\n         }\n         boolean sameInput \u003d t.getInput().getName().equals(docInfo.getSourceName());\n         Visibility visibility \u003d docInfo.getVisibility();\n         JSType ownerType \u003d normalizeClassType(objectType);\n         if (isOverride) {\n             JSDocInfo overridingInfo \u003d parent.getJSDocInfo();\n             Visibility overridingVisibility \u003d overridingInfo \u003d\u003d null ? Visibility.INHERITED : overridingInfo.getVisibility();\n             if (visibility \u003d\u003d Visibility.PRIVATE \u0026\u0026 !sameInput) {\n-                compiler.report(JSError.make(t, getprop, PRIVATE_OVERRIDE, objectType.toString()));\n+                compiler.report(t.makeError(getprop, PRIVATE_OVERRIDE, objectType.toString()));\n             } else if (overridingVisibility !\u003d Visibility.INHERITED \u0026\u0026 overridingVisibility !\u003d visibility) {\n-                compiler.report(JSError.make(t, getprop, VISIBILITY_MISMATCH, visibility.name(), objectType.toString(), overridingVisibility.name()));\n+                compiler.report(t.makeError(getprop, VISIBILITY_MISMATCH, visibility.name(), objectType.toString(), overridingVisibility.name()));\n             }\n         } else {\n             if (sameInput) {\n                 return;\n             } else if (visibility \u003d\u003d Visibility.PRIVATE \u0026\u0026 (currentClass \u003d\u003d null || ownerType.differsFrom(currentClass))) {\n                 if (docInfo.isConstructor() \u0026\u0026 isValidPrivateConstructorAccess(parent)) {\n                     return;\n                 }\n-                compiler.report(JSError.make(t, getprop, BAD_PRIVATE_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n+                compiler.report(t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n             } else if (visibility \u003d\u003d Visibility.PROTECTED) {\n                 if (currentClass \u003d\u003d null || !currentClass.isSubtype(ownerType)) {\n-                    compiler.report(JSError.make(t, getprop, BAD_PROTECTED_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n+                    compiler.report(t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n                 }\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a2d8936fae3eb0e3873c7f7c0233344c81436404": {
      "type": "Ybodychange",
      "commitMessage": "Add warnings for functions that are ambiguously defined on different\nbrowsers.\n\nAdd better support for Caja.\n\nRollback the change to CoalesceVariableNames, because it had problems.\n\nInternal type system refactoring.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@33 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/15/09, 1:52 PM",
      "commitName": "a2d8936fae3eb0e3873c7f7c0233344c81436404",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/3/09, 3:51 PM",
      "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 41.92,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "actualSource": "private void checkPropertyVisibility(NodeTraversal t, Node getprop, Node parent) {\n    ObjectType objectType \u003d ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n    String propertyName \u003d getprop.getLastChild().getString();\n    if (objectType !\u003d null) {\n        boolean isOverride \u003d t.inGlobalScope() \u0026\u0026 parent.getType() \u003d\u003d Token.ASSIGN \u0026\u0026 parent.getFirstChild() \u003d\u003d getprop;\n        if (isOverride) {\n            objectType \u003d objectType.getImplicitPrototype();\n        }\n        JSDocInfo docInfo \u003d null;\n        for (; objectType !\u003d null; objectType \u003d objectType.getImplicitPrototype()) {\n            docInfo \u003d objectType.getOwnPropertyJSDocInfo(propertyName);\n            if (docInfo !\u003d null \u0026\u0026 docInfo.getVisibility() !\u003d Visibility.INHERITED) {\n                break;\n            }\n        }\n        if (objectType \u003d\u003d null) {\n            return;\n        }\n        boolean sameInput \u003d t.getInput().getName().equals(docInfo.getSourceName());\n        Visibility visibility \u003d docInfo.getVisibility();\n        JSType ownerType \u003d normalizeClassType(objectType);\n        if (isOverride) {\n            JSDocInfo overridingInfo \u003d parent.getJSDocInfo();\n            Visibility overridingVisibility \u003d overridingInfo \u003d\u003d null ? Visibility.INHERITED : overridingInfo.getVisibility();\n            if (visibility \u003d\u003d Visibility.PRIVATE \u0026\u0026 !sameInput) {\n                compiler.report(JSError.make(t, getprop, PRIVATE_OVERRIDE, objectType.toString()));\n            } else if (overridingVisibility !\u003d Visibility.INHERITED \u0026\u0026 overridingVisibility !\u003d visibility) {\n                compiler.report(JSError.make(t, getprop, VISIBILITY_MISMATCH, visibility.name(), objectType.toString(), overridingVisibility.name()));\n            }\n        } else {\n            if (sameInput) {\n                return;\n            } else if (visibility \u003d\u003d Visibility.PRIVATE \u0026\u0026 (currentClass \u003d\u003d null || ownerType.differsFrom(currentClass))) {\n                if (docInfo.isConstructor() \u0026\u0026 isValidPrivateConstructorAccess(parent)) {\n                    return;\n                }\n                compiler.report(JSError.make(t, getprop, BAD_PRIVATE_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n            } else if (visibility \u003d\u003d Visibility.PROTECTED) {\n                if (currentClass \u003d\u003d null || !currentClass.isSubtype(ownerType)) {\n                    compiler.report(JSError.make(t, getprop, BAD_PROTECTED_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n                }\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/CheckAccessControls.java",
      "functionStartLine": 337,
      "functionName": "checkPropertyVisibility",
      "functionAnnotation": "",
      "functionDoc": "Determines whether the given property is visible in the current context.\n\n@param t The current traversal.\n@param getprop The getprop node.\n",
      "diff": "@@ -1,46 +1,45 @@\n private void checkPropertyVisibility(NodeTraversal t, Node getprop, Node parent) {\n-    JSType maybeObjectType \u003d dereference(getprop.getFirstChild().getJSType());\n+    ObjectType objectType \u003d ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n     String propertyName \u003d getprop.getLastChild().getString();\n-    if (maybeObjectType !\u003d null \u0026\u0026 maybeObjectType instanceof ObjectType) {\n+    if (objectType !\u003d null) {\n         boolean isOverride \u003d t.inGlobalScope() \u0026\u0026 parent.getType() \u003d\u003d Token.ASSIGN \u0026\u0026 parent.getFirstChild() \u003d\u003d getprop;\n-        ObjectType objectType \u003d (ObjectType) maybeObjectType;\n         if (isOverride) {\n             objectType \u003d objectType.getImplicitPrototype();\n         }\n         JSDocInfo docInfo \u003d null;\n         for (; objectType !\u003d null; objectType \u003d objectType.getImplicitPrototype()) {\n             docInfo \u003d objectType.getOwnPropertyJSDocInfo(propertyName);\n             if (docInfo !\u003d null \u0026\u0026 docInfo.getVisibility() !\u003d Visibility.INHERITED) {\n                 break;\n             }\n         }\n         if (objectType \u003d\u003d null) {\n             return;\n         }\n         boolean sameInput \u003d t.getInput().getName().equals(docInfo.getSourceName());\n         Visibility visibility \u003d docInfo.getVisibility();\n         JSType ownerType \u003d normalizeClassType(objectType);\n         if (isOverride) {\n             JSDocInfo overridingInfo \u003d parent.getJSDocInfo();\n             Visibility overridingVisibility \u003d overridingInfo \u003d\u003d null ? Visibility.INHERITED : overridingInfo.getVisibility();\n             if (visibility \u003d\u003d Visibility.PRIVATE \u0026\u0026 !sameInput) {\n                 compiler.report(JSError.make(t, getprop, PRIVATE_OVERRIDE, objectType.toString()));\n             } else if (overridingVisibility !\u003d Visibility.INHERITED \u0026\u0026 overridingVisibility !\u003d visibility) {\n                 compiler.report(JSError.make(t, getprop, VISIBILITY_MISMATCH, visibility.name(), objectType.toString(), overridingVisibility.name()));\n             }\n         } else {\n             if (sameInput) {\n                 return;\n             } else if (visibility \u003d\u003d Visibility.PRIVATE \u0026\u0026 (currentClass \u003d\u003d null || ownerType.differsFrom(currentClass))) {\n                 if (docInfo.isConstructor() \u0026\u0026 isValidPrivateConstructorAccess(parent)) {\n                     return;\n                 }\n                 compiler.report(JSError.make(t, getprop, BAD_PRIVATE_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n             } else if (visibility \u003d\u003d Visibility.PROTECTED) {\n                 if (currentClass \u003d\u003d null || !currentClass.isSubtype(ownerType)) {\n                     compiler.report(JSError.make(t, getprop, BAD_PROTECTED_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n                 }\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,46 @@\n+private void checkPropertyVisibility(NodeTraversal t, Node getprop, Node parent) {\n+    JSType maybeObjectType \u003d dereference(getprop.getFirstChild().getJSType());\n+    String propertyName \u003d getprop.getLastChild().getString();\n+    if (maybeObjectType !\u003d null \u0026\u0026 maybeObjectType instanceof ObjectType) {\n+        boolean isOverride \u003d t.inGlobalScope() \u0026\u0026 parent.getType() \u003d\u003d Token.ASSIGN \u0026\u0026 parent.getFirstChild() \u003d\u003d getprop;\n+        ObjectType objectType \u003d (ObjectType) maybeObjectType;\n+        if (isOverride) {\n+            objectType \u003d objectType.getImplicitPrototype();\n+        }\n+        JSDocInfo docInfo \u003d null;\n+        for (; objectType !\u003d null; objectType \u003d objectType.getImplicitPrototype()) {\n+            docInfo \u003d objectType.getOwnPropertyJSDocInfo(propertyName);\n+            if (docInfo !\u003d null \u0026\u0026 docInfo.getVisibility() !\u003d Visibility.INHERITED) {\n+                break;\n+            }\n+        }\n+        if (objectType \u003d\u003d null) {\n+            return;\n+        }\n+        boolean sameInput \u003d t.getInput().getName().equals(docInfo.getSourceName());\n+        Visibility visibility \u003d docInfo.getVisibility();\n+        JSType ownerType \u003d normalizeClassType(objectType);\n+        if (isOverride) {\n+            JSDocInfo overridingInfo \u003d parent.getJSDocInfo();\n+            Visibility overridingVisibility \u003d overridingInfo \u003d\u003d null ? Visibility.INHERITED : overridingInfo.getVisibility();\n+            if (visibility \u003d\u003d Visibility.PRIVATE \u0026\u0026 !sameInput) {\n+                compiler.report(JSError.make(t, getprop, PRIVATE_OVERRIDE, objectType.toString()));\n+            } else if (overridingVisibility !\u003d Visibility.INHERITED \u0026\u0026 overridingVisibility !\u003d visibility) {\n+                compiler.report(JSError.make(t, getprop, VISIBILITY_MISMATCH, visibility.name(), objectType.toString(), overridingVisibility.name()));\n+            }\n+        } else {\n+            if (sameInput) {\n+                return;\n+            } else if (visibility \u003d\u003d Visibility.PRIVATE \u0026\u0026 (currentClass \u003d\u003d null || ownerType.differsFrom(currentClass))) {\n+                if (docInfo.isConstructor() \u0026\u0026 isValidPrivateConstructorAccess(parent)) {\n+                    return;\n+                }\n+                compiler.report(JSError.make(t, getprop, BAD_PRIVATE_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n+            } else if (visibility \u003d\u003d Visibility.PROTECTED) {\n+                if (currentClass \u003d\u003d null || !currentClass.isSubtype(ownerType)) {\n+                    compiler.report(JSError.make(t, getprop, BAD_PROTECTED_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n+                }\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void checkPropertyVisibility(NodeTraversal t, Node getprop, Node parent) {\n    JSType maybeObjectType \u003d dereference(getprop.getFirstChild().getJSType());\n    String propertyName \u003d getprop.getLastChild().getString();\n    if (maybeObjectType !\u003d null \u0026\u0026 maybeObjectType instanceof ObjectType) {\n        boolean isOverride \u003d t.inGlobalScope() \u0026\u0026 parent.getType() \u003d\u003d Token.ASSIGN \u0026\u0026 parent.getFirstChild() \u003d\u003d getprop;\n        ObjectType objectType \u003d (ObjectType) maybeObjectType;\n        if (isOverride) {\n            objectType \u003d objectType.getImplicitPrototype();\n        }\n        JSDocInfo docInfo \u003d null;\n        for (; objectType !\u003d null; objectType \u003d objectType.getImplicitPrototype()) {\n            docInfo \u003d objectType.getOwnPropertyJSDocInfo(propertyName);\n            if (docInfo !\u003d null \u0026\u0026 docInfo.getVisibility() !\u003d Visibility.INHERITED) {\n                break;\n            }\n        }\n        if (objectType \u003d\u003d null) {\n            return;\n        }\n        boolean sameInput \u003d t.getInput().getName().equals(docInfo.getSourceName());\n        Visibility visibility \u003d docInfo.getVisibility();\n        JSType ownerType \u003d normalizeClassType(objectType);\n        if (isOverride) {\n            JSDocInfo overridingInfo \u003d parent.getJSDocInfo();\n            Visibility overridingVisibility \u003d overridingInfo \u003d\u003d null ? Visibility.INHERITED : overridingInfo.getVisibility();\n            if (visibility \u003d\u003d Visibility.PRIVATE \u0026\u0026 !sameInput) {\n                compiler.report(JSError.make(t, getprop, PRIVATE_OVERRIDE, objectType.toString()));\n            } else if (overridingVisibility !\u003d Visibility.INHERITED \u0026\u0026 overridingVisibility !\u003d visibility) {\n                compiler.report(JSError.make(t, getprop, VISIBILITY_MISMATCH, visibility.name(), objectType.toString(), overridingVisibility.name()));\n            }\n        } else {\n            if (sameInput) {\n                return;\n            } else if (visibility \u003d\u003d Visibility.PRIVATE \u0026\u0026 (currentClass \u003d\u003d null || ownerType.differsFrom(currentClass))) {\n                if (docInfo.isConstructor() \u0026\u0026 isValidPrivateConstructorAccess(parent)) {\n                    return;\n                }\n                compiler.report(JSError.make(t, getprop, BAD_PRIVATE_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n            } else if (visibility \u003d\u003d Visibility.PROTECTED) {\n                if (currentClass \u003d\u003d null || !currentClass.isSubtype(ownerType)) {\n                    compiler.report(JSError.make(t, getprop, BAD_PROTECTED_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n                }\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/CheckAccessControls.java",
      "functionStartLine": 340,
      "functionName": "checkPropertyVisibility",
      "functionAnnotation": "",
      "functionDoc": "Determines whether the given property is visible in the current context.\n\n@param t The current traversal.\n@param getprop The getprop node.\n"
    }
  }
}