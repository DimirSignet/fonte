{
  "origin": "codeshovel",
  "repositoryName": "Closure-59b",
  "repositoryPath": "/tmp/Closure-59b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ExploitAssigns.java",
  "functionName": "isCollapsibleValue",
  "functionId": "isCollapsibleValue___value-Node__isLValue-boolean",
  "sourceFilePath": "src/com/google/javascript/jscomp/ExploitAssigns.java",
  "functionAnnotation": "",
  "functionDoc": "Determines whether we know enough about the given value to be able\nto collapse it into subsequent expressions.\n\nFor example, we can collapse booleans and variable names:\n\u003ccode\u003e\nx \u003d 3; y \u003d x; // y \u003d x \u003d 3;\na \u003d true; b \u003d true; // b \u003d a \u003d true;\n\u003ccode\u003e\nBut we won\u0027t try to collapse complex expressions.\n\n@param value The value node.\n@param isLValue Whether it\u0027s on the left-hand side of an expr.\n",
  "functionStartLine": 76,
  "functionEndLine": 91,
  "numCommitsSeen": 17,
  "timeTaken": 1122,
  "changeHistory": [
    "b7d0c1729ff32aa456727ed8c04dce277b1ebf89",
    "7c44f228de588387734227a0c08be36d11bf2b17",
    "62aa60c33726dd4e4de412e5880b87ba713b3a9a",
    "9150994b2e41be7d49ca7ab03d3d751f782650ee",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "b7d0c1729ff32aa456727ed8c04dce277b1ebf89": "Ymultichange(Ymovefromfile,Yformatchange)",
    "7c44f228de588387734227a0c08be36d11bf2b17": "Ybodychange",
    "62aa60c33726dd4e4de412e5880b87ba713b3a9a": "Ybodychange",
    "9150994b2e41be7d49ca7ab03d3d751f782650ee": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b7d0c1729ff32aa456727ed8c04dce277b1ebf89": {
      "type": "Ymultichange(Ymovefromfile,Yformatchange)",
      "commitMessage": "\nMove ExploitAssigns on its own.\n\nR\u003djohnlenz\nDELTA\u003d785  (437 added, 348 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d878\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@886 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/15/11, 11:18 AM",
      "commitName": "b7d0c1729ff32aa456727ed8c04dce277b1ebf89",
      "commitAuthor": "acleung@google.com",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "\nMove ExploitAssigns on its own.\n\nR\u003djohnlenz\nDELTA\u003d785  (437 added, 348 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d878\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@886 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "3/15/11, 11:18 AM",
          "commitName": "b7d0c1729ff32aa456727ed8c04dce277b1ebf89",
          "commitAuthor": "acleung@google.com",
          "commitDateOld": "3/15/11, 9:26 AM",
          "commitNameOld": "8d1ce6799ec27e62fd39fa0abc30ec4664b9b209",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 0.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private boolean isCollapsibleValue(Node value, boolean isLValue) {\n    switch(value.getType()) {\n        case Token.GETPROP:\n            return !isLValue || value.getFirstChild().getType() \u003d\u003d Token.THIS;\n        case Token.NAME:\n            return true;\n        default:\n            return NodeUtil.isImmutableValue(value);\n    }\n}",
          "path": "src/com/google/javascript/jscomp/ExploitAssigns.java",
          "functionStartLine": 76,
          "functionName": "isCollapsibleValue",
          "functionAnnotation": "",
          "functionDoc": "Determines whether we know enough about the given value to be able\nto collapse it into subsequent expressions.\n\nFor example, we can collapse booleans and variable names:\n\u003ccode\u003e\nx \u003d 3; y \u003d x; // y \u003d x \u003d 3;\na \u003d true; b \u003d true; // b \u003d a \u003d true;\n\u003ccode\u003e\nBut we won\u0027t try to collapse complex expressions.\n\n@param value The value node.\n@param isLValue Whether it\u0027s on the left-hand side of an expr.\n",
          "diff": "",
          "extendedDetails": {
            "oldPath": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java",
            "newPath": "src/com/google/javascript/jscomp/ExploitAssigns.java",
            "oldMethodName": "isCollapsibleValue",
            "newMethodName": "isCollapsibleValue"
          }
        },
        {
          "type": "Yformatchange",
          "commitMessage": "\nMove ExploitAssigns on its own.\n\nR\u003djohnlenz\nDELTA\u003d785  (437 added, 348 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d878\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@886 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "3/15/11, 11:18 AM",
          "commitName": "b7d0c1729ff32aa456727ed8c04dce277b1ebf89",
          "commitAuthor": "acleung@google.com",
          "commitDateOld": "3/15/11, 9:26 AM",
          "commitNameOld": "8d1ce6799ec27e62fd39fa0abc30ec4664b9b209",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 0.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private boolean isCollapsibleValue(Node value, boolean isLValue) {\n    switch(value.getType()) {\n        case Token.GETPROP:\n            return !isLValue || value.getFirstChild().getType() \u003d\u003d Token.THIS;\n        case Token.NAME:\n            return true;\n        default:\n            return NodeUtil.isImmutableValue(value);\n    }\n}",
          "path": "src/com/google/javascript/jscomp/ExploitAssigns.java",
          "functionStartLine": 76,
          "functionName": "isCollapsibleValue",
          "functionAnnotation": "",
          "functionDoc": "Determines whether we know enough about the given value to be able\nto collapse it into subsequent expressions.\n\nFor example, we can collapse booleans and variable names:\n\u003ccode\u003e\nx \u003d 3; y \u003d x; // y \u003d x \u003d 3;\na \u003d true; b \u003d true; // b \u003d a \u003d true;\n\u003ccode\u003e\nBut we won\u0027t try to collapse complex expressions.\n\n@param value The value node.\n@param isLValue Whether it\u0027s on the left-hand side of an expr.\n",
          "diff": "",
          "extendedDetails": {}
        }
      ]
    },
    "7c44f228de588387734227a0c08be36d11bf2b17": {
      "type": "Ybodychange",
      "commitMessage": "\nFix a couple of classes to handle !0 and !1 as TRUE and FALSE.\n\nR\u003dacleung\nDELTA\u003d118  (82 added, 32 deleted, 4 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d751\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@845 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/2/11, 3:41 PM",
      "commitName": "7c44f228de588387734227a0c08be36d11bf2b17",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "2/24/11, 1:58 PM",
      "commitNameOld": "62aa60c33726dd4e4de412e5880b87ba713b3a9a",
      "commitAuthorOld": "ankit@google.com",
      "daysBetweenCommits": 6.07,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "actualSource": "private boolean isCollapsibleValue(Node value, boolean isLValue) {\n    switch(value.getType()) {\n        case Token.GETPROP:\n            return !isLValue || value.getFirstChild().getType() \u003d\u003d Token.THIS;\n        case Token.NAME:\n            return true;\n        default:\n            return NodeUtil.isImmutableValue(value);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java",
      "functionStartLine": 156,
      "functionName": "isCollapsibleValue",
      "functionAnnotation": "",
      "functionDoc": "Determines whether we know enough about the given value to be able\nto collapse it into subsequent expressions.\n\nFor example, we can collapse booleans and variable names:\n\u003ccode\u003e\nx \u003d 3; y \u003d x; // y \u003d x \u003d 3;\na \u003d true; b \u003d true; // b \u003d a \u003d true;\n\u003ccode\u003e\nBut we won\u0027t try to collapse complex expressions.\n\n@param value The value node.\n@param isLValue Whether it\u0027s on the left-hand side of an expr.\n",
      "diff": "@@ -1,14 +1,10 @@\n private boolean isCollapsibleValue(Node value, boolean isLValue) {\n     switch(value.getType()) {\n         case Token.GETPROP:\n             return !isLValue || value.getFirstChild().getType() \u003d\u003d Token.THIS;\n         case Token.NAME:\n-        case Token.NUMBER:\n-        case Token.TRUE:\n-        case Token.FALSE:\n-        case Token.NULL:\n-        case Token.STRING:\n             return true;\n+        default:\n+            return NodeUtil.isImmutableValue(value);\n     }\n-    return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "62aa60c33726dd4e4de412e5880b87ba713b3a9a": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nBreaks gmail\n\n*** Original change description ***\n\nFix a couple of classes to handle !0 and !1 as TRUE and FALSE.\n\nR\u003djohnlenz\nDELTA\u003d114  (32 added, 78 deleted, 4 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d668\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@817 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/24/11, 1:58 PM",
      "commitName": "62aa60c33726dd4e4de412e5880b87ba713b3a9a",
      "commitAuthor": "ankit@google.com",
      "commitDateOld": "2/24/11, 12:11 PM",
      "commitNameOld": "9150994b2e41be7d49ca7ab03d3d751f782650ee",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private boolean isCollapsibleValue(Node value, boolean isLValue) {\n    switch(value.getType()) {\n        case Token.GETPROP:\n            return !isLValue || value.getFirstChild().getType() \u003d\u003d Token.THIS;\n        case Token.NAME:\n        case Token.NUMBER:\n        case Token.TRUE:\n        case Token.FALSE:\n        case Token.NULL:\n        case Token.STRING:\n            return true;\n    }\n    return false;\n}",
      "path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java",
      "functionStartLine": 156,
      "functionName": "isCollapsibleValue",
      "functionAnnotation": "",
      "functionDoc": "Determines whether we know enough about the given value to be able\nto collapse it into subsequent expressions.\n\nFor example, we can collapse booleans and variable names:\n\u003ccode\u003e\nx \u003d 3; y \u003d x; // y \u003d x \u003d 3;\na \u003d true; b \u003d true; // b \u003d a \u003d true;\n\u003ccode\u003e\nBut we won\u0027t try to collapse complex expressions.\n\n@param value The value node.\n@param isLValue Whether it\u0027s on the left-hand side of an expr.\n",
      "diff": "@@ -1,10 +1,14 @@\n private boolean isCollapsibleValue(Node value, boolean isLValue) {\n     switch(value.getType()) {\n         case Token.GETPROP:\n             return !isLValue || value.getFirstChild().getType() \u003d\u003d Token.THIS;\n         case Token.NAME:\n+        case Token.NUMBER:\n+        case Token.TRUE:\n+        case Token.FALSE:\n+        case Token.NULL:\n+        case Token.STRING:\n             return true;\n-        default:\n-            return NodeUtil.isImmutableValue(value);\n     }\n+    return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9150994b2e41be7d49ca7ab03d3d751f782650ee": {
      "type": "Ybodychange",
      "commitMessage": "\nFix a couple of classes to handle !0 and !1 as TRUE and FALSE.\n\nR\u003dacleung\nDELTA\u003d114  (78 added, 32 deleted, 4 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d665\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@814 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/24/11, 12:11 PM",
      "commitName": "9150994b2e41be7d49ca7ab03d3d751f782650ee",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "12/16/10, 1:20 PM",
      "commitNameOld": "8936be78f9ecad965b20fbf9ea78eda49514454e",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 69.95,
      "commitsBetweenForRepo": 161,
      "commitsBetweenForFile": 1,
      "actualSource": "private boolean isCollapsibleValue(Node value, boolean isLValue) {\n    switch(value.getType()) {\n        case Token.GETPROP:\n            return !isLValue || value.getFirstChild().getType() \u003d\u003d Token.THIS;\n        case Token.NAME:\n            return true;\n        default:\n            return NodeUtil.isImmutableValue(value);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java",
      "functionStartLine": 156,
      "functionName": "isCollapsibleValue",
      "functionAnnotation": "",
      "functionDoc": "Determines whether we know enough about the given value to be able\nto collapse it into subsequent expressions.\n\nFor example, we can collapse booleans and variable names:\n\u003ccode\u003e\nx \u003d 3; y \u003d x; // y \u003d x \u003d 3;\na \u003d true; b \u003d true; // b \u003d a \u003d true;\n\u003ccode\u003e\nBut we won\u0027t try to collapse complex expressions.\n\n@param value The value node.\n@param isLValue Whether it\u0027s on the left-hand side of an expr.\n",
      "diff": "@@ -1,14 +1,10 @@\n private boolean isCollapsibleValue(Node value, boolean isLValue) {\n     switch(value.getType()) {\n         case Token.GETPROP:\n             return !isLValue || value.getFirstChild().getType() \u003d\u003d Token.THIS;\n         case Token.NAME:\n-        case Token.NUMBER:\n-        case Token.TRUE:\n-        case Token.FALSE:\n-        case Token.NULL:\n-        case Token.STRING:\n             return true;\n+        default:\n+            return NodeUtil.isImmutableValue(value);\n     }\n-    return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,14 @@\n+private boolean isCollapsibleValue(Node value, boolean isLValue) {\n+    switch(value.getType()) {\n+        case Token.GETPROP:\n+            return !isLValue || value.getFirstChild().getType() \u003d\u003d Token.THIS;\n+        case Token.NAME:\n+        case Token.NUMBER:\n+        case Token.TRUE:\n+        case Token.FALSE:\n+        case Token.NULL:\n+        case Token.STRING:\n+            return true;\n+    }\n+    return false;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private boolean isCollapsibleValue(Node value, boolean isLValue) {\n    switch(value.getType()) {\n        case Token.GETPROP:\n            return !isLValue || value.getFirstChild().getType() \u003d\u003d Token.THIS;\n        case Token.NAME:\n        case Token.NUMBER:\n        case Token.TRUE:\n        case Token.FALSE:\n        case Token.NULL:\n        case Token.STRING:\n            return true;\n    }\n    return false;\n}",
      "path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java",
      "functionStartLine": 157,
      "functionName": "isCollapsibleValue",
      "functionAnnotation": "",
      "functionDoc": "Determines whether we know enough about the given value to be able\nto collapse it into subsequent expressions.\n\nFor example, we can collapse booleans and variable names:\n\u003ccode\u003e\nx \u003d 3; y \u003d x; // y \u003d x \u003d 3;\na \u003d true; b \u003d true; // b \u003d a \u003d true;\n\u003ccode\u003e\nBut we won\u0027t try to collapse complex expressions.\n\n@param value The value node.\n@param isLValue Whether it\u0027s on the left-hand side of an expr.\n"
    }
  }
}