{
  "origin": "codeshovel",
  "repositoryName": "Closure-59b",
  "repositoryPath": "/tmp/Closure-59b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MustBeReachingVariableDef.java",
  "functionName": "computeMustDef",
  "functionId": "computeMustDef___n-Node__cfgNode-Node__output-MustDef__conditional-boolean",
  "sourceFilePath": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java",
  "functionAnnotation": "",
  "functionDoc": "\n@param n The node in question.\n@param cfgNode The node to add\n@param conditional true if the definition is not always executed.\n",
  "functionStartLine": 222,
  "functionEndLine": 315,
  "numCommitsSeen": 17,
  "timeTaken": 808,
  "changeHistory": [
    "4ee37ccfbd12f26e713f86f07b3f13dca7cf24df",
    "6938aaabd0c2424ad36a4e13e7ce072b944ce33f",
    "3bee5d740c96572faea4b9fb8b632e0e07b13cbb",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "4ee37ccfbd12f26e713f86f07b3f13dca7cf24df": "Ybodychange",
    "6938aaabd0c2424ad36a4e13e7ce072b944ce33f": "Ybodychange",
    "3bee5d740c96572faea4b9fb8b632e0e07b13cbb": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4ee37ccfbd12f26e713f86f07b3f13dca7cf24df": {
      "type": "Ybodychange",
      "commitMessage": "\nDon\u0027t inline parameters when arguments object is escaped.\n\nR\u003djohnlenz\nDELTA\u003d35  (23 added, 8 deleted, 4 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d949\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@911 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/18/11, 1:58 PM",
      "commitName": "4ee37ccfbd12f26e713f86f07b3f13dca7cf24df",
      "commitAuthor": "acleung@google.com",
      "commitDateOld": "3/16/11, 11:45 PM",
      "commitNameOld": "6938aaabd0c2424ad36a4e13e7ce072b944ce33f",
      "commitAuthorOld": "acleung@google.com",
      "daysBetweenCommits": 1.59,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "private void computeMustDef(Node n, Node cfgNode, MustDef output, boolean conditional) {\n    switch(n.getType()) {\n        case Token.BLOCK:\n        case Token.FUNCTION:\n            return;\n        case Token.WHILE:\n        case Token.DO:\n        case Token.IF:\n            computeMustDef(NodeUtil.getConditionExpression(n), cfgNode, output, conditional);\n            return;\n        case Token.FOR:\n            if (!NodeUtil.isForIn(n)) {\n                computeMustDef(NodeUtil.getConditionExpression(n), cfgNode, output, conditional);\n            } else {\n                Node lhs \u003d n.getFirstChild();\n                Node rhs \u003d lhs.getNext();\n                if (NodeUtil.isVar(lhs)) {\n                    lhs \u003d lhs.getLastChild();\n                }\n                if (NodeUtil.isName(lhs)) {\n                    addToDefIfLocal(lhs.getString(), cfgNode, rhs, output);\n                }\n            }\n            return;\n        case Token.AND:\n        case Token.OR:\n            computeMustDef(n.getFirstChild(), cfgNode, output, conditional);\n            computeMustDef(n.getLastChild(), cfgNode, output, true);\n            return;\n        case Token.HOOK:\n            computeMustDef(n.getFirstChild(), cfgNode, output, conditional);\n            computeMustDef(n.getFirstChild().getNext(), cfgNode, output, true);\n            computeMustDef(n.getLastChild(), cfgNode, output, true);\n            return;\n        case Token.VAR:\n            for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n                if (c.hasChildren()) {\n                    computeMustDef(c.getFirstChild(), cfgNode, output, conditional);\n                    addToDefIfLocal(c.getString(), conditional ? null : cfgNode, c.getFirstChild(), output);\n                }\n            }\n            return;\n        default:\n            if (NodeUtil.isAssignmentOp(n)) {\n                if (NodeUtil.isName(n.getFirstChild())) {\n                    Node name \u003d n.getFirstChild();\n                    computeMustDef(name.getNext(), cfgNode, output, conditional);\n                    addToDefIfLocal(name.getString(), conditional ? null : cfgNode, n.getLastChild(), output);\n                    return;\n                } else if (NodeUtil.isGet(n.getFirstChild())) {\n                    Node obj \u003d n.getFirstChild().getFirstChild();\n                    if (NodeUtil.isName(obj) \u0026\u0026 \"arguments\".equals(obj.getString())) {\n                        escapeParameters(output);\n                    }\n                }\n            }\n            if (NodeUtil.isName(n) \u0026\u0026 \"arguments\".equals(n.getString())) {\n                escapeParameters(output);\n            }\n            if (n.getType() \u003d\u003d Token.DEC || n.getType() \u003d\u003d Token.INC) {\n                Node target \u003d n.getFirstChild();\n                if (NodeUtil.isName(target)) {\n                    addToDefIfLocal(target.getString(), conditional ? null : cfgNode, null, output);\n                    return;\n                }\n            }\n            for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n                computeMustDef(c, cfgNode, output, conditional);\n            }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java",
      "functionStartLine": 220,
      "functionName": "computeMustDef",
      "functionAnnotation": "",
      "functionDoc": "\n@param n The node in question.\n@param cfgNode The node to add\n@param conditional true if the definition is not always executed.\n",
      "diff": "@@ -1,73 +1,71 @@\n private void computeMustDef(Node n, Node cfgNode, MustDef output, boolean conditional) {\n     switch(n.getType()) {\n         case Token.BLOCK:\n         case Token.FUNCTION:\n             return;\n         case Token.WHILE:\n         case Token.DO:\n         case Token.IF:\n             computeMustDef(NodeUtil.getConditionExpression(n), cfgNode, output, conditional);\n             return;\n         case Token.FOR:\n             if (!NodeUtil.isForIn(n)) {\n                 computeMustDef(NodeUtil.getConditionExpression(n), cfgNode, output, conditional);\n             } else {\n                 Node lhs \u003d n.getFirstChild();\n                 Node rhs \u003d lhs.getNext();\n                 if (NodeUtil.isVar(lhs)) {\n                     lhs \u003d lhs.getLastChild();\n                 }\n                 if (NodeUtil.isName(lhs)) {\n                     addToDefIfLocal(lhs.getString(), cfgNode, rhs, output);\n                 }\n             }\n             return;\n         case Token.AND:\n         case Token.OR:\n             computeMustDef(n.getFirstChild(), cfgNode, output, conditional);\n             computeMustDef(n.getLastChild(), cfgNode, output, true);\n             return;\n         case Token.HOOK:\n             computeMustDef(n.getFirstChild(), cfgNode, output, conditional);\n             computeMustDef(n.getFirstChild().getNext(), cfgNode, output, true);\n             computeMustDef(n.getLastChild(), cfgNode, output, true);\n             return;\n         case Token.VAR:\n             for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n                 if (c.hasChildren()) {\n                     computeMustDef(c.getFirstChild(), cfgNode, output, conditional);\n                     addToDefIfLocal(c.getString(), conditional ? null : cfgNode, c.getFirstChild(), output);\n                 }\n             }\n             return;\n         default:\n             if (NodeUtil.isAssignmentOp(n)) {\n                 if (NodeUtil.isName(n.getFirstChild())) {\n                     Node name \u003d n.getFirstChild();\n                     computeMustDef(name.getNext(), cfgNode, output, conditional);\n                     addToDefIfLocal(name.getString(), conditional ? null : cfgNode, n.getLastChild(), output);\n                     return;\n                 } else if (NodeUtil.isGet(n.getFirstChild())) {\n                     Node obj \u003d n.getFirstChild().getFirstChild();\n                     if (NodeUtil.isName(obj) \u0026\u0026 \"arguments\".equals(obj.getString())) {\n-                        for (Iterator\u003cVar\u003e i \u003d jsScope.getVars(); i.hasNext(); ) {\n-                            Var v \u003d i.next();\n-                            if (v.getParentNode().getType() \u003d\u003d Token.LP) {\n-                                output.reachingDef.put(v, null);\n-                            }\n-                        }\n+                        escapeParameters(output);\n                     }\n                 }\n             }\n+            if (NodeUtil.isName(n) \u0026\u0026 \"arguments\".equals(n.getString())) {\n+                escapeParameters(output);\n+            }\n             if (n.getType() \u003d\u003d Token.DEC || n.getType() \u003d\u003d Token.INC) {\n                 Node target \u003d n.getFirstChild();\n                 if (NodeUtil.isName(target)) {\n                     addToDefIfLocal(target.getString(), conditional ? null : cfgNode, null, output);\n                     return;\n                 }\n             }\n             for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n                 computeMustDef(c, cfgNode, output, conditional);\n             }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6938aaabd0c2424ad36a4e13e7ce072b944ce33f": {
      "type": "Ybodychange",
      "commitMessage": "\nDon\u0027t inline parameters if arguments object has been modified.\n\nR\u003djohnlenz\nDELTA\u003d46  (29 added, 0 deleted, 17 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d913\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@896 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/16/11, 11:45 PM",
      "commitName": "6938aaabd0c2424ad36a4e13e7ce072b944ce33f",
      "commitAuthor": "acleung@google.com",
      "commitDateOld": "11/11/10, 9:42 PM",
      "commitNameOld": "df223efd38c514d584f00d076488ab9a02011492",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 125.04,
      "commitsBetweenForRepo": 338,
      "commitsBetweenForFile": 1,
      "actualSource": "private void computeMustDef(Node n, Node cfgNode, MustDef output, boolean conditional) {\n    switch(n.getType()) {\n        case Token.BLOCK:\n        case Token.FUNCTION:\n            return;\n        case Token.WHILE:\n        case Token.DO:\n        case Token.IF:\n            computeMustDef(NodeUtil.getConditionExpression(n), cfgNode, output, conditional);\n            return;\n        case Token.FOR:\n            if (!NodeUtil.isForIn(n)) {\n                computeMustDef(NodeUtil.getConditionExpression(n), cfgNode, output, conditional);\n            } else {\n                Node lhs \u003d n.getFirstChild();\n                Node rhs \u003d lhs.getNext();\n                if (NodeUtil.isVar(lhs)) {\n                    lhs \u003d lhs.getLastChild();\n                }\n                if (NodeUtil.isName(lhs)) {\n                    addToDefIfLocal(lhs.getString(), cfgNode, rhs, output);\n                }\n            }\n            return;\n        case Token.AND:\n        case Token.OR:\n            computeMustDef(n.getFirstChild(), cfgNode, output, conditional);\n            computeMustDef(n.getLastChild(), cfgNode, output, true);\n            return;\n        case Token.HOOK:\n            computeMustDef(n.getFirstChild(), cfgNode, output, conditional);\n            computeMustDef(n.getFirstChild().getNext(), cfgNode, output, true);\n            computeMustDef(n.getLastChild(), cfgNode, output, true);\n            return;\n        case Token.VAR:\n            for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n                if (c.hasChildren()) {\n                    computeMustDef(c.getFirstChild(), cfgNode, output, conditional);\n                    addToDefIfLocal(c.getString(), conditional ? null : cfgNode, c.getFirstChild(), output);\n                }\n            }\n            return;\n        default:\n            if (NodeUtil.isAssignmentOp(n)) {\n                if (NodeUtil.isName(n.getFirstChild())) {\n                    Node name \u003d n.getFirstChild();\n                    computeMustDef(name.getNext(), cfgNode, output, conditional);\n                    addToDefIfLocal(name.getString(), conditional ? null : cfgNode, n.getLastChild(), output);\n                    return;\n                } else if (NodeUtil.isGet(n.getFirstChild())) {\n                    Node obj \u003d n.getFirstChild().getFirstChild();\n                    if (NodeUtil.isName(obj) \u0026\u0026 \"arguments\".equals(obj.getString())) {\n                        for (Iterator\u003cVar\u003e i \u003d jsScope.getVars(); i.hasNext(); ) {\n                            Var v \u003d i.next();\n                            if (v.getParentNode().getType() \u003d\u003d Token.LP) {\n                                output.reachingDef.put(v, null);\n                            }\n                        }\n                    }\n                }\n            }\n            if (n.getType() \u003d\u003d Token.DEC || n.getType() \u003d\u003d Token.INC) {\n                Node target \u003d n.getFirstChild();\n                if (NodeUtil.isName(target)) {\n                    addToDefIfLocal(target.getString(), conditional ? null : cfgNode, null, output);\n                    return;\n                }\n            }\n            for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n                computeMustDef(c, cfgNode, output, conditional);\n            }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java",
      "functionStartLine": 220,
      "functionName": "computeMustDef",
      "functionAnnotation": "",
      "functionDoc": "\n@param n The node in question.\n@param cfgNode The node to add\n@param conditional true if the definition is not always executed.\n",
      "diff": "@@ -1,61 +1,73 @@\n private void computeMustDef(Node n, Node cfgNode, MustDef output, boolean conditional) {\n     switch(n.getType()) {\n         case Token.BLOCK:\n         case Token.FUNCTION:\n             return;\n         case Token.WHILE:\n         case Token.DO:\n         case Token.IF:\n             computeMustDef(NodeUtil.getConditionExpression(n), cfgNode, output, conditional);\n             return;\n         case Token.FOR:\n             if (!NodeUtil.isForIn(n)) {\n                 computeMustDef(NodeUtil.getConditionExpression(n), cfgNode, output, conditional);\n             } else {\n                 Node lhs \u003d n.getFirstChild();\n                 Node rhs \u003d lhs.getNext();\n                 if (NodeUtil.isVar(lhs)) {\n                     lhs \u003d lhs.getLastChild();\n                 }\n                 if (NodeUtil.isName(lhs)) {\n                     addToDefIfLocal(lhs.getString(), cfgNode, rhs, output);\n                 }\n             }\n             return;\n         case Token.AND:\n         case Token.OR:\n             computeMustDef(n.getFirstChild(), cfgNode, output, conditional);\n             computeMustDef(n.getLastChild(), cfgNode, output, true);\n             return;\n         case Token.HOOK:\n             computeMustDef(n.getFirstChild(), cfgNode, output, conditional);\n             computeMustDef(n.getFirstChild().getNext(), cfgNode, output, true);\n             computeMustDef(n.getLastChild(), cfgNode, output, true);\n             return;\n         case Token.VAR:\n             for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n                 if (c.hasChildren()) {\n                     computeMustDef(c.getFirstChild(), cfgNode, output, conditional);\n                     addToDefIfLocal(c.getString(), conditional ? null : cfgNode, c.getFirstChild(), output);\n                 }\n             }\n             return;\n         default:\n-            if (NodeUtil.isAssignmentOp(n) \u0026\u0026 NodeUtil.isName(n.getFirstChild())) {\n-                Node name \u003d n.getFirstChild();\n-                computeMustDef(name.getNext(), cfgNode, output, conditional);\n-                addToDefIfLocal(name.getString(), conditional ? null : cfgNode, n.getLastChild(), output);\n-            } else {\n-                if (n.getType() \u003d\u003d Token.DEC || n.getType() \u003d\u003d Token.INC) {\n-                    Node target \u003d n.getFirstChild();\n-                    if (NodeUtil.isName(target)) {\n-                        addToDefIfLocal(target.getString(), conditional ? null : cfgNode, null, output);\n-                        return;\n+            if (NodeUtil.isAssignmentOp(n)) {\n+                if (NodeUtil.isName(n.getFirstChild())) {\n+                    Node name \u003d n.getFirstChild();\n+                    computeMustDef(name.getNext(), cfgNode, output, conditional);\n+                    addToDefIfLocal(name.getString(), conditional ? null : cfgNode, n.getLastChild(), output);\n+                    return;\n+                } else if (NodeUtil.isGet(n.getFirstChild())) {\n+                    Node obj \u003d n.getFirstChild().getFirstChild();\n+                    if (NodeUtil.isName(obj) \u0026\u0026 \"arguments\".equals(obj.getString())) {\n+                        for (Iterator\u003cVar\u003e i \u003d jsScope.getVars(); i.hasNext(); ) {\n+                            Var v \u003d i.next();\n+                            if (v.getParentNode().getType() \u003d\u003d Token.LP) {\n+                                output.reachingDef.put(v, null);\n+                            }\n+                        }\n                     }\n                 }\n-                for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n-                    computeMustDef(c, cfgNode, output, conditional);\n+            }\n+            if (n.getType() \u003d\u003d Token.DEC || n.getType() \u003d\u003d Token.INC) {\n+                Node target \u003d n.getFirstChild();\n+                if (NodeUtil.isName(target)) {\n+                    addToDefIfLocal(target.getString(), conditional ? null : cfgNode, null, output);\n+                    return;\n                 }\n             }\n+            for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n+                computeMustDef(c, cfgNode, output, conditional);\n+            }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3bee5d740c96572faea4b9fb8b632e0e07b13cbb": {
      "type": "Ybodychange",
      "commitMessage": "Add a mechanism for inlining local vars, and turn it on by default.\nWarnings for \"ambiguous\" function definitions.\nRefactoring and renaming of some method names.\nUse \"\u003d\" optionality annotation in externs.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@15 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/25/09, 6:53 AM",
      "commitName": "3bee5d740c96572faea4b9fb8b632e0e07b13cbb",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/3/09, 3:51 PM",
      "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 21.63,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "actualSource": "private void computeMustDef(Node n, Node cfgNode, MustDef output, boolean conditional) {\n    switch(n.getType()) {\n        case Token.BLOCK:\n        case Token.FUNCTION:\n            return;\n        case Token.WHILE:\n        case Token.DO:\n        case Token.IF:\n            computeMustDef(NodeUtil.getConditionExpression(n), cfgNode, output, conditional);\n            return;\n        case Token.FOR:\n            if (!NodeUtil.isForIn(n)) {\n                computeMustDef(NodeUtil.getConditionExpression(n), cfgNode, output, conditional);\n            } else {\n                Node lhs \u003d n.getFirstChild();\n                Node rhs \u003d lhs.getNext();\n                if (NodeUtil.isVar(lhs)) {\n                    lhs \u003d lhs.getLastChild();\n                }\n                if (NodeUtil.isName(lhs)) {\n                    addToDefIfLocal(lhs.getString(), cfgNode, rhs, output);\n                }\n            }\n            return;\n        case Token.AND:\n        case Token.OR:\n            computeMustDef(n.getFirstChild(), cfgNode, output, conditional);\n            computeMustDef(n.getLastChild(), cfgNode, output, true);\n            return;\n        case Token.HOOK:\n            computeMustDef(n.getFirstChild(), cfgNode, output, conditional);\n            computeMustDef(n.getFirstChild().getNext(), cfgNode, output, true);\n            computeMustDef(n.getLastChild(), cfgNode, output, true);\n            return;\n        case Token.VAR:\n            for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n                if (c.hasChildren()) {\n                    computeMustDef(c.getFirstChild(), cfgNode, output, conditional);\n                    addToDefIfLocal(c.getString(), conditional ? null : cfgNode, c.getFirstChild(), output);\n                }\n            }\n            return;\n        default:\n            if (NodeUtil.isAssignmentOp(n) \u0026\u0026 NodeUtil.isName(n.getFirstChild())) {\n                Node name \u003d n.getFirstChild();\n                computeMustDef(name.getNext(), cfgNode, output, conditional);\n                addToDefIfLocal(name.getString(), conditional ? null : cfgNode, n.getLastChild(), output);\n            } else {\n                if (n.getType() \u003d\u003d Token.DEC || n.getType() \u003d\u003d Token.INC) {\n                    Node target \u003d n.getFirstChild();\n                    if (NodeUtil.isName(target)) {\n                        addToDefIfLocal(target.getString(), conditional ? null : cfgNode, null, output);\n                        return;\n                    }\n                }\n                for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n                    computeMustDef(c, cfgNode, output, conditional);\n                }\n            }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java",
      "functionStartLine": 219,
      "functionName": "computeMustDef",
      "functionAnnotation": "",
      "functionDoc": "\n@param n The node in question.\n@param cfgNode The node to add\n@param conditional true if the definition is not always executed.\n",
      "diff": "@@ -1,61 +1,61 @@\n private void computeMustDef(Node n, Node cfgNode, MustDef output, boolean conditional) {\n     switch(n.getType()) {\n         case Token.BLOCK:\n         case Token.FUNCTION:\n             return;\n         case Token.WHILE:\n         case Token.DO:\n         case Token.IF:\n             computeMustDef(NodeUtil.getConditionExpression(n), cfgNode, output, conditional);\n             return;\n         case Token.FOR:\n-            if (n.getChildCount() \u003d\u003d 4) {\n+            if (!NodeUtil.isForIn(n)) {\n                 computeMustDef(NodeUtil.getConditionExpression(n), cfgNode, output, conditional);\n             } else {\n                 Node lhs \u003d n.getFirstChild();\n                 Node rhs \u003d lhs.getNext();\n                 if (NodeUtil.isVar(lhs)) {\n                     lhs \u003d lhs.getLastChild();\n                 }\n                 if (NodeUtil.isName(lhs)) {\n                     addToDefIfLocal(lhs.getString(), cfgNode, rhs, output);\n                 }\n             }\n             return;\n         case Token.AND:\n         case Token.OR:\n             computeMustDef(n.getFirstChild(), cfgNode, output, conditional);\n             computeMustDef(n.getLastChild(), cfgNode, output, true);\n             return;\n         case Token.HOOK:\n             computeMustDef(n.getFirstChild(), cfgNode, output, conditional);\n             computeMustDef(n.getFirstChild().getNext(), cfgNode, output, true);\n             computeMustDef(n.getLastChild(), cfgNode, output, true);\n             return;\n         case Token.VAR:\n             for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n                 if (c.hasChildren()) {\n                     computeMustDef(c.getFirstChild(), cfgNode, output, conditional);\n                     addToDefIfLocal(c.getString(), conditional ? null : cfgNode, c.getFirstChild(), output);\n                 }\n             }\n             return;\n         default:\n             if (NodeUtil.isAssignmentOp(n) \u0026\u0026 NodeUtil.isName(n.getFirstChild())) {\n                 Node name \u003d n.getFirstChild();\n                 computeMustDef(name.getNext(), cfgNode, output, conditional);\n                 addToDefIfLocal(name.getString(), conditional ? null : cfgNode, n.getLastChild(), output);\n             } else {\n                 if (n.getType() \u003d\u003d Token.DEC || n.getType() \u003d\u003d Token.INC) {\n                     Node target \u003d n.getFirstChild();\n                     if (NodeUtil.isName(target)) {\n                         addToDefIfLocal(target.getString(), conditional ? null : cfgNode, null, output);\n                         return;\n                     }\n                 }\n                 for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n                     computeMustDef(c, cfgNode, output, conditional);\n                 }\n             }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,61 @@\n+private void computeMustDef(Node n, Node cfgNode, MustDef output, boolean conditional) {\n+    switch(n.getType()) {\n+        case Token.BLOCK:\n+        case Token.FUNCTION:\n+            return;\n+        case Token.WHILE:\n+        case Token.DO:\n+        case Token.IF:\n+            computeMustDef(NodeUtil.getConditionExpression(n), cfgNode, output, conditional);\n+            return;\n+        case Token.FOR:\n+            if (n.getChildCount() \u003d\u003d 4) {\n+                computeMustDef(NodeUtil.getConditionExpression(n), cfgNode, output, conditional);\n+            } else {\n+                Node lhs \u003d n.getFirstChild();\n+                Node rhs \u003d lhs.getNext();\n+                if (NodeUtil.isVar(lhs)) {\n+                    lhs \u003d lhs.getLastChild();\n+                }\n+                if (NodeUtil.isName(lhs)) {\n+                    addToDefIfLocal(lhs.getString(), cfgNode, rhs, output);\n+                }\n+            }\n+            return;\n+        case Token.AND:\n+        case Token.OR:\n+            computeMustDef(n.getFirstChild(), cfgNode, output, conditional);\n+            computeMustDef(n.getLastChild(), cfgNode, output, true);\n+            return;\n+        case Token.HOOK:\n+            computeMustDef(n.getFirstChild(), cfgNode, output, conditional);\n+            computeMustDef(n.getFirstChild().getNext(), cfgNode, output, true);\n+            computeMustDef(n.getLastChild(), cfgNode, output, true);\n+            return;\n+        case Token.VAR:\n+            for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n+                if (c.hasChildren()) {\n+                    computeMustDef(c.getFirstChild(), cfgNode, output, conditional);\n+                    addToDefIfLocal(c.getString(), conditional ? null : cfgNode, c.getFirstChild(), output);\n+                }\n+            }\n+            return;\n+        default:\n+            if (NodeUtil.isAssignmentOp(n) \u0026\u0026 NodeUtil.isName(n.getFirstChild())) {\n+                Node name \u003d n.getFirstChild();\n+                computeMustDef(name.getNext(), cfgNode, output, conditional);\n+                addToDefIfLocal(name.getString(), conditional ? null : cfgNode, n.getLastChild(), output);\n+            } else {\n+                if (n.getType() \u003d\u003d Token.DEC || n.getType() \u003d\u003d Token.INC) {\n+                    Node target \u003d n.getFirstChild();\n+                    if (NodeUtil.isName(target)) {\n+                        addToDefIfLocal(target.getString(), conditional ? null : cfgNode, null, output);\n+                        return;\n+                    }\n+                }\n+                for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n+                    computeMustDef(c, cfgNode, output, conditional);\n+                }\n+            }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void computeMustDef(Node n, Node cfgNode, MustDef output, boolean conditional) {\n    switch(n.getType()) {\n        case Token.BLOCK:\n        case Token.FUNCTION:\n            return;\n        case Token.WHILE:\n        case Token.DO:\n        case Token.IF:\n            computeMustDef(NodeUtil.getConditionExpression(n), cfgNode, output, conditional);\n            return;\n        case Token.FOR:\n            if (n.getChildCount() \u003d\u003d 4) {\n                computeMustDef(NodeUtil.getConditionExpression(n), cfgNode, output, conditional);\n            } else {\n                Node lhs \u003d n.getFirstChild();\n                Node rhs \u003d lhs.getNext();\n                if (NodeUtil.isVar(lhs)) {\n                    lhs \u003d lhs.getLastChild();\n                }\n                if (NodeUtil.isName(lhs)) {\n                    addToDefIfLocal(lhs.getString(), cfgNode, rhs, output);\n                }\n            }\n            return;\n        case Token.AND:\n        case Token.OR:\n            computeMustDef(n.getFirstChild(), cfgNode, output, conditional);\n            computeMustDef(n.getLastChild(), cfgNode, output, true);\n            return;\n        case Token.HOOK:\n            computeMustDef(n.getFirstChild(), cfgNode, output, conditional);\n            computeMustDef(n.getFirstChild().getNext(), cfgNode, output, true);\n            computeMustDef(n.getLastChild(), cfgNode, output, true);\n            return;\n        case Token.VAR:\n            for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n                if (c.hasChildren()) {\n                    computeMustDef(c.getFirstChild(), cfgNode, output, conditional);\n                    addToDefIfLocal(c.getString(), conditional ? null : cfgNode, c.getFirstChild(), output);\n                }\n            }\n            return;\n        default:\n            if (NodeUtil.isAssignmentOp(n) \u0026\u0026 NodeUtil.isName(n.getFirstChild())) {\n                Node name \u003d n.getFirstChild();\n                computeMustDef(name.getNext(), cfgNode, output, conditional);\n                addToDefIfLocal(name.getString(), conditional ? null : cfgNode, n.getLastChild(), output);\n            } else {\n                if (n.getType() \u003d\u003d Token.DEC || n.getType() \u003d\u003d Token.INC) {\n                    Node target \u003d n.getFirstChild();\n                    if (NodeUtil.isName(target)) {\n                        addToDefIfLocal(target.getString(), conditional ? null : cfgNode, null, output);\n                        return;\n                    }\n                }\n                for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n                    computeMustDef(c, cfgNode, output, conditional);\n                }\n            }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java",
      "functionStartLine": 219,
      "functionName": "computeMustDef",
      "functionAnnotation": "",
      "functionDoc": "\n@param n The node in question.\n@param cfgNode The node to add\n@param conditional true if the definition is not always executed.\n"
    }
  }
}