{
  "origin": "codeshovel",
  "repositoryName": "Closure-59b",
  "repositoryPath": "/tmp/Closure-59b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MakeDeclaredNamesUnique.java",
  "functionName": "visit",
  "functionId": "$visit___t-NodeTraversal__node-Node__parent-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 364,
  "functionEndLine": 379,
  "numCommitsSeen": 13,
  "timeTaken": 586,
  "changeHistory": [
    "da30f170f29e983f014fb029fe5779bfd5d3b04f",
    "938f48a60c544f6b7bdb5d49006f654a51ca9a22",
    "3df1d1eeb4a5868e5331ee98fb6748a2f1ccedba",
    "14ddcfdc0b8d1cece3c79221b1870b84f055d419",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "da30f170f29e983f014fb029fe5779bfd5d3b04f": "Ybodychange",
    "938f48a60c544f6b7bdb5d49006f654a51ca9a22": "Ybodychange",
    "3df1d1eeb4a5868e5331ee98fb6748a2f1ccedba": "Ybodychange",
    "14ddcfdc0b8d1cece3c79221b1870b84f055d419": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "da30f170f29e983f014fb029fe5779bfd5d3b04f": {
      "type": "Ybodychange",
      "commitMessage": "Fix assorted type system bugs and crashes.\nFixes issue 124. (Nick)\nR\u003dandrew\nDELTA\u003d161  (122 added, 9 deleted, 30 changed)\n\nFix unique name inverter  to prevent masking needed global names. (John)\nR\u003dnick\nDELTA\u003d315  (225 added, 46 deleted, 44 changed)\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@142 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/18/10, 3:51 PM",
      "commitName": "da30f170f29e983f014fb029fe5779bfd5d3b04f",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "3/16/10, 3:53 PM",
      "commitNameOld": "938f48a60c544f6b7bdb5d49006f654a51ca9a22",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 2.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node node, Node parent) {\n    if (t.inGlobalScope()) {\n        return;\n    }\n    if (NodeUtil.isReferenceName(node)) {\n        String name \u003d node.getString();\n        referencedNames.add(name);\n        if (containsSeparator(name)) {\n            addCandidateNameReference(name, node);\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
      "functionStartLine": 343,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,36 +1,13 @@\n @Override\n public void visit(NodeTraversal t, Node node, Node parent) {\n-    if (node.getType() \u003d\u003d Token.NAME) {\n-        String oldName \u003d node.getString();\n-        if (oldName.indexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR) !\u003d -1) {\n-            Scope scope \u003d t.getScope();\n-            Var var \u003d t.getScope().getVar(oldName);\n-            if (var \u003d\u003d null || var.isGlobal()) {\n-                return;\n-            }\n-            if (nameMap.containsKey(var)) {\n-                node.setString(nameMap.get(var));\n-            } else {\n-                int index \u003d indexOfSeparator(oldName);\n-                String newName \u003d getOrginalNameInternal(oldName, index);\n-                String suffix \u003d getNameSuffix(oldName, index);\n-                boolean recurseScopes \u003d false;\n-                if (!suffix.matches(\"\\\\d+\")) {\n-                    recurseScopes \u003d true;\n-                }\n-                if (var.scope.isDeclared(newName, recurseScopes) || !TokenStream.isJSIdentifier(newName)) {\n-                    newName \u003d oldName;\n-                } else {\n-                    var.scope.declare(newName, var.nameNode, null, null);\n-                    Node parentNode \u003d var.getParentNode();\n-                    if (parentNode.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 parentNode \u003d\u003d var.scope.getRootNode()) {\n-                        var.getNameNode().setString(newName);\n-                    }\n-                    node.setString(newName);\n-                    compiler.reportCodeChange();\n-                }\n-                nameMap.put(var, newName);\n-            }\n+    if (t.inGlobalScope()) {\n+        return;\n+    }\n+    if (NodeUtil.isReferenceName(node)) {\n+        String name \u003d node.getString();\n+        referencedNames.add(name);\n+        if (containsSeparator(name)) {\n+            addCandidateNameReference(name, node);\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "938f48a60c544f6b7bdb5d49006f654a51ca9a22": {
      "type": "Ybodychange",
      "commitMessage": "The MethodCompilerPass was being a little too smart for itself, leading\nto incorrect behavior by the InlineGetter pass (inlining extern\ndefinitions of functions which it thought were empty functions). This\nresults in slight worse behavior by the depreciated \"MethodCheck\" pass,\nbut most projects have moved on to \"check_types\" which is on by default. (John)\nR\u003dAlan\nDELTA\u003d77  (44 added, 28 deleted, 5 changed)\n\nIssue 103: Fix inappropriate renaming of local \"$super\" when the coding\nconvention declares it to be \"exported\". (John)\nFixes issue 103.\nR\u003dAlan\nDELTA\u003d86  (77 added, 3 deleted, 6 changed)\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@139 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/16/10, 3:53 PM",
      "commitName": "938f48a60c544f6b7bdb5d49006f654a51ca9a22",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "3/15/10, 3:46 PM",
      "commitNameOld": "3df1d1eeb4a5868e5331ee98fb6748a2f1ccedba",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 1.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node node, Node parent) {\n    if (node.getType() \u003d\u003d Token.NAME) {\n        String oldName \u003d node.getString();\n        if (oldName.indexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR) !\u003d -1) {\n            Scope scope \u003d t.getScope();\n            Var var \u003d t.getScope().getVar(oldName);\n            if (var \u003d\u003d null || var.isGlobal()) {\n                return;\n            }\n            if (nameMap.containsKey(var)) {\n                node.setString(nameMap.get(var));\n            } else {\n                int index \u003d indexOfSeparator(oldName);\n                String newName \u003d getOrginalNameInternal(oldName, index);\n                String suffix \u003d getNameSuffix(oldName, index);\n                boolean recurseScopes \u003d false;\n                if (!suffix.matches(\"\\\\d+\")) {\n                    recurseScopes \u003d true;\n                }\n                if (var.scope.isDeclared(newName, recurseScopes) || !TokenStream.isJSIdentifier(newName)) {\n                    newName \u003d oldName;\n                } else {\n                    var.scope.declare(newName, var.nameNode, null, null);\n                    Node parentNode \u003d var.getParentNode();\n                    if (parentNode.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 parentNode \u003d\u003d var.scope.getRootNode()) {\n                        var.getNameNode().setString(newName);\n                    }\n                    node.setString(newName);\n                    compiler.reportCodeChange();\n                }\n                nameMap.put(var, newName);\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
      "functionStartLine": 264,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,35 +1,36 @@\n @Override\n public void visit(NodeTraversal t, Node node, Node parent) {\n     if (node.getType() \u003d\u003d Token.NAME) {\n         String oldName \u003d node.getString();\n         if (oldName.indexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR) !\u003d -1) {\n             Scope scope \u003d t.getScope();\n             Var var \u003d t.getScope().getVar(oldName);\n             if (var \u003d\u003d null || var.isGlobal()) {\n                 return;\n             }\n             if (nameMap.containsKey(var)) {\n                 node.setString(nameMap.get(var));\n             } else {\n-                String newName \u003d oldName.substring(0, oldName.lastIndexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR));\n-                String suffix \u003d oldName.substring(oldName.lastIndexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR) + ContextualRenamer.UNIQUE_ID_SEPARATOR.length(), oldName.length());\n+                int index \u003d indexOfSeparator(oldName);\n+                String newName \u003d getOrginalNameInternal(oldName, index);\n+                String suffix \u003d getNameSuffix(oldName, index);\n                 boolean recurseScopes \u003d false;\n                 if (!suffix.matches(\"\\\\d+\")) {\n                     recurseScopes \u003d true;\n                 }\n                 if (var.scope.isDeclared(newName, recurseScopes) || !TokenStream.isJSIdentifier(newName)) {\n                     newName \u003d oldName;\n                 } else {\n                     var.scope.declare(newName, var.nameNode, null, null);\n                     Node parentNode \u003d var.getParentNode();\n                     if (parentNode.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 parentNode \u003d\u003d var.scope.getRootNode()) {\n                         var.getNameNode().setString(newName);\n                     }\n                     node.setString(newName);\n                     compiler.reportCodeChange();\n                 }\n                 nameMap.put(var, newName);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3df1d1eeb4a5868e5331ee98fb6748a2f1ccedba": {
      "type": "Ybodychange",
      "commitMessage": "Cache expensive hashcode calculations. (John)\n        \nTry again to simplify variable names in inlined function to simplify\ndiffs. (John)\n\nAdd an alias for the --define flag to ensure the api is backwards\ncompatible. (Nick)\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@136 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/15/10, 3:46 PM",
      "commitName": "3df1d1eeb4a5868e5331ee98fb6748a2f1ccedba",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "3/11/10, 9:31 PM",
      "commitNameOld": "7bfdbd9164601af44d17edd51be829fde2cc51aa",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 3.72,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node node, Node parent) {\n    if (node.getType() \u003d\u003d Token.NAME) {\n        String oldName \u003d node.getString();\n        if (oldName.indexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR) !\u003d -1) {\n            Scope scope \u003d t.getScope();\n            Var var \u003d t.getScope().getVar(oldName);\n            if (var \u003d\u003d null || var.isGlobal()) {\n                return;\n            }\n            if (nameMap.containsKey(var)) {\n                node.setString(nameMap.get(var));\n            } else {\n                String newName \u003d oldName.substring(0, oldName.lastIndexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR));\n                String suffix \u003d oldName.substring(oldName.lastIndexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR) + ContextualRenamer.UNIQUE_ID_SEPARATOR.length(), oldName.length());\n                boolean recurseScopes \u003d false;\n                if (!suffix.matches(\"\\\\d+\")) {\n                    recurseScopes \u003d true;\n                }\n                if (var.scope.isDeclared(newName, recurseScopes) || !TokenStream.isJSIdentifier(newName)) {\n                    newName \u003d oldName;\n                } else {\n                    var.scope.declare(newName, var.nameNode, null, null);\n                    Node parentNode \u003d var.getParentNode();\n                    if (parentNode.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 parentNode \u003d\u003d var.scope.getRootNode()) {\n                        var.getNameNode().setString(newName);\n                    }\n                    node.setString(newName);\n                    compiler.reportCodeChange();\n                }\n                nameMap.put(var, newName);\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
      "functionStartLine": 245,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,30 +1,35 @@\n @Override\n public void visit(NodeTraversal t, Node node, Node parent) {\n     if (node.getType() \u003d\u003d Token.NAME) {\n         String oldName \u003d node.getString();\n-        if (oldName.indexOf(\"$$\") !\u003d -1) {\n+        if (oldName.indexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR) !\u003d -1) {\n             Scope scope \u003d t.getScope();\n             Var var \u003d t.getScope().getVar(oldName);\n             if (var \u003d\u003d null || var.isGlobal()) {\n                 return;\n             }\n             if (nameMap.containsKey(var)) {\n                 node.setString(nameMap.get(var));\n             } else {\n-                String newName \u003d oldName.substring(0, oldName.lastIndexOf(\"$$\"));\n-                if (var.scope.isDeclared(newName, false) || !TokenStream.isJSIdentifier(newName)) {\n+                String newName \u003d oldName.substring(0, oldName.lastIndexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR));\n+                String suffix \u003d oldName.substring(oldName.lastIndexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR) + ContextualRenamer.UNIQUE_ID_SEPARATOR.length(), oldName.length());\n+                boolean recurseScopes \u003d false;\n+                if (!suffix.matches(\"\\\\d+\")) {\n+                    recurseScopes \u003d true;\n+                }\n+                if (var.scope.isDeclared(newName, recurseScopes) || !TokenStream.isJSIdentifier(newName)) {\n                     newName \u003d oldName;\n                 } else {\n                     var.scope.declare(newName, var.nameNode, null, null);\n                     Node parentNode \u003d var.getParentNode();\n                     if (parentNode.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 parentNode \u003d\u003d var.scope.getRootNode()) {\n                         var.getNameNode().setString(newName);\n                     }\n                     node.setString(newName);\n                     compiler.reportCodeChange();\n                 }\n                 nameMap.put(var, newName);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "14ddcfdc0b8d1cece3c79221b1870b84f055d419": {
      "type": "Ybodychange",
      "commitMessage": "Change the internal representation of constant variables.\n\nRun inline-variables before smart-name-removal.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@37 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/17/09, 4:20 PM",
      "commitName": "14ddcfdc0b8d1cece3c79221b1870b84f055d419",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/19/09, 1:23 PM",
      "commitNameOld": "6a6ea480bae01f40f9795218ac911bb7de18d34a",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 28.12,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node node, Node parent) {\n    if (node.getType() \u003d\u003d Token.NAME) {\n        String oldName \u003d node.getString();\n        if (oldName.indexOf(\"$$\") !\u003d -1) {\n            Scope scope \u003d t.getScope();\n            Var var \u003d t.getScope().getVar(oldName);\n            if (var \u003d\u003d null || var.isGlobal()) {\n                return;\n            }\n            if (nameMap.containsKey(var)) {\n                node.setString(nameMap.get(var));\n            } else {\n                String newName \u003d oldName.substring(0, oldName.lastIndexOf(\"$$\"));\n                if (var.scope.isDeclared(newName, false) || !TokenStream.isJSIdentifier(newName)) {\n                    newName \u003d oldName;\n                } else {\n                    var.scope.declare(newName, var.nameNode, null, null);\n                    Node parentNode \u003d var.getParentNode();\n                    if (parentNode.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 parentNode \u003d\u003d var.scope.getRootNode()) {\n                        var.getNameNode().setString(newName);\n                    }\n                    node.setString(newName);\n                    compiler.reportCodeChange();\n                }\n                nameMap.put(var, newName);\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
      "functionStartLine": 245,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,17 +1,30 @@\n @Override\n public void visit(NodeTraversal t, Node node, Node parent) {\n     if (node.getType() \u003d\u003d Token.NAME) {\n-        String name \u003d node.getString();\n-        if (name.contains(NodeUtil.CONSTANT_MARKER)) {\n-            Preconditions.checkState(name.indexOf(NodeUtil.CONSTANT_MARKER) \u003d\u003d name.lastIndexOf(NodeUtil.CONSTANT_MARKER));\n-            String constantFreeName \u003d constantRenamingCache.get(name);\n-            if (constantFreeName \u003d\u003d null) {\n-                constantFreeName \u003d name.replace(NodeUtil.CONSTANT_MARKER, \"\");\n-                constantRenamingCache.put(name, constantFreeName);\n+        String oldName \u003d node.getString();\n+        if (oldName.indexOf(\"$$\") !\u003d -1) {\n+            Scope scope \u003d t.getScope();\n+            Var var \u003d t.getScope().getVar(oldName);\n+            if (var \u003d\u003d null || var.isGlobal()) {\n+                return;\n             }\n-            node.setString(constantFreeName);\n-            node.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n-            compiler.reportCodeChange();\n+            if (nameMap.containsKey(var)) {\n+                node.setString(nameMap.get(var));\n+            } else {\n+                String newName \u003d oldName.substring(0, oldName.lastIndexOf(\"$$\"));\n+                if (var.scope.isDeclared(newName, false) || !TokenStream.isJSIdentifier(newName)) {\n+                    newName \u003d oldName;\n+                } else {\n+                    var.scope.declare(newName, var.nameNode, null, null);\n+                    Node parentNode \u003d var.getParentNode();\n+                    if (parentNode.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 parentNode \u003d\u003d var.scope.getRootNode()) {\n+                        var.getNameNode().setString(newName);\n+                    }\n+                    node.setString(newName);\n+                    compiler.reportCodeChange();\n+                }\n+                nameMap.put(var, newName);\n+            }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,17 @@\n+@Override\n+public void visit(NodeTraversal t, Node node, Node parent) {\n+    if (node.getType() \u003d\u003d Token.NAME) {\n+        String name \u003d node.getString();\n+        if (name.contains(NodeUtil.CONSTANT_MARKER)) {\n+            Preconditions.checkState(name.indexOf(NodeUtil.CONSTANT_MARKER) \u003d\u003d name.lastIndexOf(NodeUtil.CONSTANT_MARKER));\n+            String constantFreeName \u003d constantRenamingCache.get(name);\n+            if (constantFreeName \u003d\u003d null) {\n+                constantFreeName \u003d name.replace(NodeUtil.CONSTANT_MARKER, \"\");\n+                constantRenamingCache.put(name, constantFreeName);\n+            }\n+            node.setString(constantFreeName);\n+            node.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n+            compiler.reportCodeChange();\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node node, Node parent) {\n    if (node.getType() \u003d\u003d Token.NAME) {\n        String name \u003d node.getString();\n        if (name.contains(NodeUtil.CONSTANT_MARKER)) {\n            Preconditions.checkState(name.indexOf(NodeUtil.CONSTANT_MARKER) \u003d\u003d name.lastIndexOf(NodeUtil.CONSTANT_MARKER));\n            String constantFreeName \u003d constantRenamingCache.get(name);\n            if (constantFreeName \u003d\u003d null) {\n                constantFreeName \u003d name.replace(NodeUtil.CONSTANT_MARKER, \"\");\n                constantRenamingCache.put(name, constantFreeName);\n            }\n            node.setString(constantFreeName);\n            node.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n            compiler.reportCodeChange();\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
      "functionStartLine": 301,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}