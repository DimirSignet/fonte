{
  "origin": "codeshovel",
  "repositoryName": "Closure-59b",
  "repositoryPath": "/tmp/Closure-59b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MaybeReachingVariableUse.java",
  "functionName": "computeMayUse",
  "functionId": "computeMayUse___n-Node__cfgNode-Node__output-ReachingUses__conditional-boolean",
  "sourceFilePath": "src/com/google/javascript/jscomp/MaybeReachingVariableUse.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 151,
  "functionEndLine": 236,
  "numCommitsSeen": 11,
  "timeTaken": 418,
  "changeHistory": [
    "3bee5d740c96572faea4b9fb8b632e0e07b13cbb",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "3bee5d740c96572faea4b9fb8b632e0e07b13cbb": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3bee5d740c96572faea4b9fb8b632e0e07b13cbb": {
      "type": "Ybodychange",
      "commitMessage": "Add a mechanism for inlining local vars, and turn it on by default.\nWarnings for \"ambiguous\" function definitions.\nRefactoring and renaming of some method names.\nUse \"\u003d\" optionality annotation in externs.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@15 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/25/09, 6:53 AM",
      "commitName": "3bee5d740c96572faea4b9fb8b632e0e07b13cbb",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/17/09, 4:21 PM",
      "commitNameOld": "fe64e87cccd2c38524c0b36c49beb4c988d1453a",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 7.61,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private void computeMayUse(Node n, Node cfgNode, ReachingUses output, boolean conditional) {\n    switch(n.getType()) {\n        case Token.BLOCK:\n        case Token.FUNCTION:\n            return;\n        case Token.NAME:\n            addToUseIfLocal(n.getString(), cfgNode, output);\n            return;\n        case Token.WHILE:\n        case Token.DO:\n        case Token.IF:\n            computeMayUse(NodeUtil.getConditionExpression(n), cfgNode, output, conditional);\n            return;\n        case Token.FOR:\n            if (!NodeUtil.isForIn(n)) {\n                computeMayUse(NodeUtil.getConditionExpression(n), cfgNode, output, conditional);\n            } else {\n                Node lhs \u003d n.getFirstChild();\n                Node rhs \u003d lhs.getNext();\n                if (NodeUtil.isVar(lhs)) {\n                    lhs \u003d lhs.getLastChild();\n                }\n                if (NodeUtil.isName(lhs) \u0026\u0026 !conditional) {\n                    removeFromUseIfLocal(lhs.getString(), output);\n                }\n                computeMayUse(rhs, cfgNode, output, conditional);\n            }\n            return;\n        case Token.AND:\n        case Token.OR:\n            computeMayUse(n.getLastChild(), cfgNode, output, true);\n            computeMayUse(n.getFirstChild(), cfgNode, output, conditional);\n            return;\n        case Token.HOOK:\n            computeMayUse(n.getLastChild(), cfgNode, output, true);\n            computeMayUse(n.getFirstChild().getNext(), cfgNode, output, true);\n            computeMayUse(n.getFirstChild(), cfgNode, output, conditional);\n            return;\n        case Token.VAR:\n            Node varName \u003d n.getFirstChild();\n            Preconditions.checkState(n.hasChildren(), \"AST should be normalized\");\n            if (varName.hasChildren()) {\n                computeMayUse(varName.getFirstChild(), cfgNode, output, conditional);\n                if (!conditional) {\n                    removeFromUseIfLocal(varName.getString(), output);\n                }\n            }\n            return;\n        default:\n            if (NodeUtil.isAssignmentOp(n) \u0026\u0026 NodeUtil.isName(n.getFirstChild())) {\n                Node name \u003d n.getFirstChild();\n                if (!conditional) {\n                    removeFromUseIfLocal(name.getString(), output);\n                }\n                if (!NodeUtil.isAssign(n)) {\n                    addToUseIfLocal(name.getString(), cfgNode, output);\n                }\n                computeMayUse(name.getNext(), cfgNode, output, conditional);\n            } else {\n                for (Node c \u003d n.getLastChild(); c !\u003d null; c \u003d n.getChildBefore(c)) {\n                    computeMayUse(c, cfgNode, output, conditional);\n                }\n            }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/MaybeReachingVariableUse.java",
      "functionStartLine": 152,
      "functionName": "computeMayUse",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,65 +1,65 @@\n private void computeMayUse(Node n, Node cfgNode, ReachingUses output, boolean conditional) {\n     switch(n.getType()) {\n         case Token.BLOCK:\n         case Token.FUNCTION:\n             return;\n         case Token.NAME:\n             addToUseIfLocal(n.getString(), cfgNode, output);\n             return;\n         case Token.WHILE:\n         case Token.DO:\n         case Token.IF:\n             computeMayUse(NodeUtil.getConditionExpression(n), cfgNode, output, conditional);\n             return;\n         case Token.FOR:\n-            if (n.getChildCount() \u003d\u003d 4) {\n+            if (!NodeUtil.isForIn(n)) {\n                 computeMayUse(NodeUtil.getConditionExpression(n), cfgNode, output, conditional);\n             } else {\n                 Node lhs \u003d n.getFirstChild();\n                 Node rhs \u003d lhs.getNext();\n                 if (NodeUtil.isVar(lhs)) {\n                     lhs \u003d lhs.getLastChild();\n                 }\n                 if (NodeUtil.isName(lhs) \u0026\u0026 !conditional) {\n                     removeFromUseIfLocal(lhs.getString(), output);\n                 }\n                 computeMayUse(rhs, cfgNode, output, conditional);\n             }\n             return;\n         case Token.AND:\n         case Token.OR:\n             computeMayUse(n.getLastChild(), cfgNode, output, true);\n             computeMayUse(n.getFirstChild(), cfgNode, output, conditional);\n             return;\n         case Token.HOOK:\n             computeMayUse(n.getLastChild(), cfgNode, output, true);\n             computeMayUse(n.getFirstChild().getNext(), cfgNode, output, true);\n             computeMayUse(n.getFirstChild(), cfgNode, output, conditional);\n             return;\n         case Token.VAR:\n             Node varName \u003d n.getFirstChild();\n             Preconditions.checkState(n.hasChildren(), \"AST should be normalized\");\n             if (varName.hasChildren()) {\n                 computeMayUse(varName.getFirstChild(), cfgNode, output, conditional);\n                 if (!conditional) {\n                     removeFromUseIfLocal(varName.getString(), output);\n                 }\n             }\n             return;\n         default:\n             if (NodeUtil.isAssignmentOp(n) \u0026\u0026 NodeUtil.isName(n.getFirstChild())) {\n                 Node name \u003d n.getFirstChild();\n                 if (!conditional) {\n                     removeFromUseIfLocal(name.getString(), output);\n                 }\n                 if (!NodeUtil.isAssign(n)) {\n                     addToUseIfLocal(name.getString(), cfgNode, output);\n                 }\n                 computeMayUse(name.getNext(), cfgNode, output, conditional);\n             } else {\n                 for (Node c \u003d n.getLastChild(); c !\u003d null; c \u003d n.getChildBefore(c)) {\n                     computeMayUse(c, cfgNode, output, conditional);\n                 }\n             }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,65 @@\n+private void computeMayUse(Node n, Node cfgNode, ReachingUses output, boolean conditional) {\n+    switch(n.getType()) {\n+        case Token.BLOCK:\n+        case Token.FUNCTION:\n+            return;\n+        case Token.NAME:\n+            addToUseIfLocal(n.getString(), cfgNode, output);\n+            return;\n+        case Token.WHILE:\n+        case Token.DO:\n+        case Token.IF:\n+            computeMayUse(NodeUtil.getConditionExpression(n), cfgNode, output, conditional);\n+            return;\n+        case Token.FOR:\n+            if (n.getChildCount() \u003d\u003d 4) {\n+                computeMayUse(NodeUtil.getConditionExpression(n), cfgNode, output, conditional);\n+            } else {\n+                Node lhs \u003d n.getFirstChild();\n+                Node rhs \u003d lhs.getNext();\n+                if (NodeUtil.isVar(lhs)) {\n+                    lhs \u003d lhs.getLastChild();\n+                }\n+                if (NodeUtil.isName(lhs) \u0026\u0026 !conditional) {\n+                    removeFromUseIfLocal(lhs.getString(), output);\n+                }\n+                computeMayUse(rhs, cfgNode, output, conditional);\n+            }\n+            return;\n+        case Token.AND:\n+        case Token.OR:\n+            computeMayUse(n.getLastChild(), cfgNode, output, true);\n+            computeMayUse(n.getFirstChild(), cfgNode, output, conditional);\n+            return;\n+        case Token.HOOK:\n+            computeMayUse(n.getLastChild(), cfgNode, output, true);\n+            computeMayUse(n.getFirstChild().getNext(), cfgNode, output, true);\n+            computeMayUse(n.getFirstChild(), cfgNode, output, conditional);\n+            return;\n+        case Token.VAR:\n+            Node varName \u003d n.getFirstChild();\n+            Preconditions.checkState(n.hasChildren(), \"AST should be normalized\");\n+            if (varName.hasChildren()) {\n+                computeMayUse(varName.getFirstChild(), cfgNode, output, conditional);\n+                if (!conditional) {\n+                    removeFromUseIfLocal(varName.getString(), output);\n+                }\n+            }\n+            return;\n+        default:\n+            if (NodeUtil.isAssignmentOp(n) \u0026\u0026 NodeUtil.isName(n.getFirstChild())) {\n+                Node name \u003d n.getFirstChild();\n+                if (!conditional) {\n+                    removeFromUseIfLocal(name.getString(), output);\n+                }\n+                if (!NodeUtil.isAssign(n)) {\n+                    addToUseIfLocal(name.getString(), cfgNode, output);\n+                }\n+                computeMayUse(name.getNext(), cfgNode, output, conditional);\n+            } else {\n+                for (Node c \u003d n.getLastChild(); c !\u003d null; c \u003d n.getChildBefore(c)) {\n+                    computeMayUse(c, cfgNode, output, conditional);\n+                }\n+            }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void computeMayUse(Node n, Node cfgNode, ReachingUses output, boolean conditional) {\n    switch(n.getType()) {\n        case Token.BLOCK:\n        case Token.FUNCTION:\n            return;\n        case Token.NAME:\n            addToUseIfLocal(n.getString(), cfgNode, output);\n            return;\n        case Token.WHILE:\n        case Token.DO:\n        case Token.IF:\n            computeMayUse(NodeUtil.getConditionExpression(n), cfgNode, output, conditional);\n            return;\n        case Token.FOR:\n            if (n.getChildCount() \u003d\u003d 4) {\n                computeMayUse(NodeUtil.getConditionExpression(n), cfgNode, output, conditional);\n            } else {\n                Node lhs \u003d n.getFirstChild();\n                Node rhs \u003d lhs.getNext();\n                if (NodeUtil.isVar(lhs)) {\n                    lhs \u003d lhs.getLastChild();\n                }\n                if (NodeUtil.isName(lhs) \u0026\u0026 !conditional) {\n                    removeFromUseIfLocal(lhs.getString(), output);\n                }\n                computeMayUse(rhs, cfgNode, output, conditional);\n            }\n            return;\n        case Token.AND:\n        case Token.OR:\n            computeMayUse(n.getLastChild(), cfgNode, output, true);\n            computeMayUse(n.getFirstChild(), cfgNode, output, conditional);\n            return;\n        case Token.HOOK:\n            computeMayUse(n.getLastChild(), cfgNode, output, true);\n            computeMayUse(n.getFirstChild().getNext(), cfgNode, output, true);\n            computeMayUse(n.getFirstChild(), cfgNode, output, conditional);\n            return;\n        case Token.VAR:\n            Node varName \u003d n.getFirstChild();\n            Preconditions.checkState(n.hasChildren(), \"AST should be normalized\");\n            if (varName.hasChildren()) {\n                computeMayUse(varName.getFirstChild(), cfgNode, output, conditional);\n                if (!conditional) {\n                    removeFromUseIfLocal(varName.getString(), output);\n                }\n            }\n            return;\n        default:\n            if (NodeUtil.isAssignmentOp(n) \u0026\u0026 NodeUtil.isName(n.getFirstChild())) {\n                Node name \u003d n.getFirstChild();\n                if (!conditional) {\n                    removeFromUseIfLocal(name.getString(), output);\n                }\n                if (!NodeUtil.isAssign(n)) {\n                    addToUseIfLocal(name.getString(), cfgNode, output);\n                }\n                computeMayUse(name.getNext(), cfgNode, output, conditional);\n            } else {\n                for (Node c \u003d n.getLastChild(); c !\u003d null; c \u003d n.getChildBefore(c)) {\n                    computeMayUse(c, cfgNode, output, conditional);\n                }\n            }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/MaybeReachingVariableUse.java",
      "functionStartLine": 152,
      "functionName": "computeMayUse",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}