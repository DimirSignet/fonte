{
  "origin": "codeshovel",
  "repositoryName": "Closure-59b",
  "repositoryPath": "/tmp/Closure-59b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CoalesceVariableNames.java",
  "functionName": "visit",
  "functionId": "visit___t-NodeTraversal__n-Node__parent-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/CoalesceVariableNames.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 135,
  "functionEndLine": 197,
  "numCommitsSeen": 25,
  "timeTaken": 911,
  "changeHistory": [
    "c25df7eca2462861bf42ad8b74215099c3f81ae6",
    "6d374c3ee4c9c2651ffb44048924e127fd2bf37c",
    "06377401a3b08af2cc75c10e603b3ded983aaf8c",
    "a2d8936fae3eb0e3873c7f7c0233344c81436404",
    "31193006e16b909a3115f998789057fb05d76b18",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "c25df7eca2462861bf42ad8b74215099c3f81ae6": "Yformatchange",
    "6d374c3ee4c9c2651ffb44048924e127fd2bf37c": "Ybodychange",
    "06377401a3b08af2cc75c10e603b3ded983aaf8c": "Ybodychange",
    "a2d8936fae3eb0e3873c7f7c0233344c81436404": "Ybodychange",
    "31193006e16b909a3115f998789057fb05d76b18": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c25df7eca2462861bf42ad8b74215099c3f81ae6": {
      "type": "Yformatchange",
      "commitMessage": "Make lists the canonical representation of compiler sources.\nThey\u0027re so much easier to sort and mutate, which is going to\nmake a difference once we start sorting sources. (Nick)\nR\u003drobert\nDELTA\u003d97  (58 added, 6 deleted, 33 changed)\n\ninclude everything in the @license tag. (Nick)\nR\u003drobert\nDELTA\u003d78  (32 added, 19 deleted, 27 changed)\n\ntag externs files with the @externs tag. (Nick)\nR\u003dalan\nDELTA\u003d45  (45 added, 0 deleted, 0 changed)\n\nfix for issue 58.\nwork-around a bug in IE where it gets confused if the comparator\npassed to Array.prototype.sort writes to its own parameters. (Nick)\nR\u003dalan\nDELTA\u003d33  (30 added, 0 deleted, 3 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003ddpiluc\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@171 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/5/10, 11:58 PM",
      "commitName": "c25df7eca2462861bf42ad8b74215099c3f81ae6",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "1/8/10, 1:41 PM",
      "commitNameOld": "6d374c3ee4c9c2651ffb44048924e127fd2bf37c",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 87.39,
      "commitsBetweenForRepo": 103,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (colorings.isEmpty() || !NodeUtil.isName(n) || NodeUtil.isFunction(parent)) {\n        return;\n    }\n    Var var \u003d t.getScope().getVar(n.getString());\n    GraphNode\u003cVar, ?\u003e vNode \u003d colorings.peek().getGraph().getNode(var);\n    if (vNode \u003d\u003d null) {\n        return;\n    }\n    Var coalescedVar \u003d colorings.peek().getPartitionSuperNode(var);\n    if (!usePseudoNames) {\n        if (vNode.getValue().equals(coalescedVar)) {\n            return;\n        }\n        n.setString(coalescedVar.name);\n        compiler.reportCodeChange();\n        if (NodeUtil.isVar(parent)) {\n            removeVarDeclaration(n);\n        }\n    } else {\n        String pseudoName \u003d null;\n        Set\u003cString\u003e allMergedNames \u003d Sets.newTreeSet();\n        for (Iterator\u003cVar\u003e i \u003d t.getScope().getVars(); i.hasNext(); ) {\n            Var iVar \u003d i.next();\n            if (colorings.peek().getGraph().getNode(iVar) !\u003d null \u0026\u0026 coalescedVar.equals(colorings.peek().getPartitionSuperNode(iVar))) {\n                allMergedNames.add(iVar.name);\n            }\n        }\n        if (allMergedNames.size() \u003d\u003d 1) {\n            return;\n        }\n        pseudoName \u003d Joiner.on(\"_\").join(allMergedNames);\n        while (t.getScope().isDeclared(pseudoName, true)) {\n            pseudoName +\u003d \"$\";\n        }\n        n.setString(pseudoName);\n        compiler.reportCodeChange();\n        if (!vNode.getValue().equals(coalescedVar) \u0026\u0026 NodeUtil.isVar(parent)) {\n            removeVarDeclaration(n);\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/CoalesceVariableNames.java",
      "functionStartLine": 134,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "6d374c3ee4c9c2651ffb44048924e127fd2bf37c": {
      "type": "Ybodychange",
      "commitMessage": "Fixes a bug in AmbugateProperties in the presence of interfaces.\n\nFixes a bug in how type information on methods of interfaces gets\ninherited by implementers (issue 86)\n\nUse Joiners instead of the join() static method.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@59 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/8/10, 1:41 PM",
      "commitName": "6d374c3ee4c9c2651ffb44048924e127fd2bf37c",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "12/16/09, 6:37 PM",
      "commitNameOld": "06377401a3b08af2cc75c10e603b3ded983aaf8c",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 22.79,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (colorings.isEmpty() || !NodeUtil.isName(n) || NodeUtil.isFunction(parent)) {\n        return;\n    }\n    Var var \u003d t.getScope().getVar(n.getString());\n    GraphNode\u003cVar, ?\u003e vNode \u003d colorings.peek().getGraph().getNode(var);\n    if (vNode \u003d\u003d null) {\n        return;\n    }\n    Var coalescedVar \u003d colorings.peek().getPartitionSuperNode(var);\n    if (!usePseudoNames) {\n        if (vNode.getValue().equals(coalescedVar)) {\n            return;\n        }\n        n.setString(coalescedVar.name);\n        compiler.reportCodeChange();\n        if (NodeUtil.isVar(parent)) {\n            removeVarDeclaration(n);\n        }\n    } else {\n        String pseudoName \u003d null;\n        Set\u003cString\u003e allMergedNames \u003d Sets.newTreeSet();\n        for (Iterator\u003cVar\u003e i \u003d t.getScope().getVars(); i.hasNext(); ) {\n            Var iVar \u003d i.next();\n            if (colorings.peek().getGraph().getNode(iVar) !\u003d null \u0026\u0026 coalescedVar.equals(colorings.peek().getPartitionSuperNode(iVar))) {\n                allMergedNames.add(iVar.name);\n            }\n        }\n        if (allMergedNames.size() \u003d\u003d 1) {\n            return;\n        }\n        pseudoName \u003d Joiner.on(\"_\").join(allMergedNames);\n        while (t.getScope().isDeclared(pseudoName, true)) {\n            pseudoName +\u003d \"$\";\n        }\n        n.setString(pseudoName);\n        compiler.reportCodeChange();\n        if (!vNode.getValue().equals(coalescedVar) \u0026\u0026 NodeUtil.isVar(parent)) {\n            removeVarDeclaration(n);\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/CoalesceVariableNames.java",
      "functionStartLine": 127,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,43 +1,43 @@\n @Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     if (colorings.isEmpty() || !NodeUtil.isName(n) || NodeUtil.isFunction(parent)) {\n         return;\n     }\n     Var var \u003d t.getScope().getVar(n.getString());\n     GraphNode\u003cVar, ?\u003e vNode \u003d colorings.peek().getGraph().getNode(var);\n     if (vNode \u003d\u003d null) {\n         return;\n     }\n     Var coalescedVar \u003d colorings.peek().getPartitionSuperNode(var);\n     if (!usePseudoNames) {\n         if (vNode.getValue().equals(coalescedVar)) {\n             return;\n         }\n         n.setString(coalescedVar.name);\n         compiler.reportCodeChange();\n         if (NodeUtil.isVar(parent)) {\n             removeVarDeclaration(n);\n         }\n     } else {\n         String pseudoName \u003d null;\n         Set\u003cString\u003e allMergedNames \u003d Sets.newTreeSet();\n         for (Iterator\u003cVar\u003e i \u003d t.getScope().getVars(); i.hasNext(); ) {\n             Var iVar \u003d i.next();\n             if (colorings.peek().getGraph().getNode(iVar) !\u003d null \u0026\u0026 coalescedVar.equals(colorings.peek().getPartitionSuperNode(iVar))) {\n                 allMergedNames.add(iVar.name);\n             }\n         }\n         if (allMergedNames.size() \u003d\u003d 1) {\n             return;\n         }\n-        pseudoName \u003d Join.join(\"_\", allMergedNames);\n+        pseudoName \u003d Joiner.on(\"_\").join(allMergedNames);\n         while (t.getScope().isDeclared(pseudoName, true)) {\n             pseudoName +\u003d \"$\";\n         }\n         n.setString(pseudoName);\n         compiler.reportCodeChange();\n         if (!vNode.getValue().equals(coalescedVar) \u0026\u0026 NodeUtil.isVar(parent)) {\n             removeVarDeclaration(n);\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "06377401a3b08af2cc75c10e603b3ded983aaf8c": {
      "type": "Ybodychange",
      "commitMessage": "Fix for issue #75.\n\nRe-introduce the debugging option for name coalescing, now that its issues\nhave been fixed.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@34 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/16/09, 6:37 PM",
      "commitName": "06377401a3b08af2cc75c10e603b3ded983aaf8c",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "12/15/09, 1:52 PM",
      "commitNameOld": "a2d8936fae3eb0e3873c7f7c0233344c81436404",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 1.2,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (colorings.isEmpty() || !NodeUtil.isName(n) || NodeUtil.isFunction(parent)) {\n        return;\n    }\n    Var var \u003d t.getScope().getVar(n.getString());\n    GraphNode\u003cVar, ?\u003e vNode \u003d colorings.peek().getGraph().getNode(var);\n    if (vNode \u003d\u003d null) {\n        return;\n    }\n    Var coalescedVar \u003d colorings.peek().getPartitionSuperNode(var);\n    if (!usePseudoNames) {\n        if (vNode.getValue().equals(coalescedVar)) {\n            return;\n        }\n        n.setString(coalescedVar.name);\n        compiler.reportCodeChange();\n        if (NodeUtil.isVar(parent)) {\n            removeVarDeclaration(n);\n        }\n    } else {\n        String pseudoName \u003d null;\n        Set\u003cString\u003e allMergedNames \u003d Sets.newTreeSet();\n        for (Iterator\u003cVar\u003e i \u003d t.getScope().getVars(); i.hasNext(); ) {\n            Var iVar \u003d i.next();\n            if (colorings.peek().getGraph().getNode(iVar) !\u003d null \u0026\u0026 coalescedVar.equals(colorings.peek().getPartitionSuperNode(iVar))) {\n                allMergedNames.add(iVar.name);\n            }\n        }\n        if (allMergedNames.size() \u003d\u003d 1) {\n            return;\n        }\n        pseudoName \u003d Join.join(\"_\", allMergedNames);\n        while (t.getScope().isDeclared(pseudoName, true)) {\n            pseudoName +\u003d \"$\";\n        }\n        n.setString(pseudoName);\n        compiler.reportCodeChange();\n        if (!vNode.getValue().equals(coalescedVar) \u0026\u0026 NodeUtil.isVar(parent)) {\n            removeVarDeclaration(n);\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/CoalesceVariableNames.java",
      "functionStartLine": 127,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,23 +1,43 @@\n @Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     if (colorings.isEmpty() || !NodeUtil.isName(n) || NodeUtil.isFunction(parent)) {\n         return;\n     }\n     Var var \u003d t.getScope().getVar(n.getString());\n     GraphNode\u003cVar, ?\u003e vNode \u003d colorings.peek().getGraph().getNode(var);\n     if (vNode \u003d\u003d null) {\n         return;\n     }\n     Var coalescedVar \u003d colorings.peek().getPartitionSuperNode(var);\n-    if (vNode.getValue().equals(coalescedVar)) {\n-        return;\n-    }\n-    if (var.getNameNode() \u003d\u003d n) {\n-        coalescedLog.append(n.getString()).append(\" \u003d\u003e \").append(coalescedVar.name).append(\" in \").append(t.getSourceName()).append(\u0027:\u0027).append(n.getLineno()).append(\u0027\\n\u0027);\n-    }\n-    n.setString(coalescedVar.name);\n-    compiler.reportCodeChange();\n-    if (NodeUtil.isVar(parent)) {\n-        removeVarDeclaration(n);\n+    if (!usePseudoNames) {\n+        if (vNode.getValue().equals(coalescedVar)) {\n+            return;\n+        }\n+        n.setString(coalescedVar.name);\n+        compiler.reportCodeChange();\n+        if (NodeUtil.isVar(parent)) {\n+            removeVarDeclaration(n);\n+        }\n+    } else {\n+        String pseudoName \u003d null;\n+        Set\u003cString\u003e allMergedNames \u003d Sets.newTreeSet();\n+        for (Iterator\u003cVar\u003e i \u003d t.getScope().getVars(); i.hasNext(); ) {\n+            Var iVar \u003d i.next();\n+            if (colorings.peek().getGraph().getNode(iVar) !\u003d null \u0026\u0026 coalescedVar.equals(colorings.peek().getPartitionSuperNode(iVar))) {\n+                allMergedNames.add(iVar.name);\n+            }\n+        }\n+        if (allMergedNames.size() \u003d\u003d 1) {\n+            return;\n+        }\n+        pseudoName \u003d Join.join(\"_\", allMergedNames);\n+        while (t.getScope().isDeclared(pseudoName, true)) {\n+            pseudoName +\u003d \"$\";\n+        }\n+        n.setString(pseudoName);\n+        compiler.reportCodeChange();\n+        if (!vNode.getValue().equals(coalescedVar) \u0026\u0026 NodeUtil.isVar(parent)) {\n+            removeVarDeclaration(n);\n+        }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a2d8936fae3eb0e3873c7f7c0233344c81436404": {
      "type": "Ybodychange",
      "commitMessage": "Add warnings for functions that are ambiguously defined on different\nbrowsers.\n\nAdd better support for Caja.\n\nRollback the change to CoalesceVariableNames, because it had problems.\n\nInternal type system refactoring.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@33 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/15/09, 1:52 PM",
      "commitName": "a2d8936fae3eb0e3873c7f7c0233344c81436404",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "12/14/09, 4:18 PM",
      "commitNameOld": "31193006e16b909a3115f998789057fb05d76b18",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 0.9,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (colorings.isEmpty() || !NodeUtil.isName(n) || NodeUtil.isFunction(parent)) {\n        return;\n    }\n    Var var \u003d t.getScope().getVar(n.getString());\n    GraphNode\u003cVar, ?\u003e vNode \u003d colorings.peek().getGraph().getNode(var);\n    if (vNode \u003d\u003d null) {\n        return;\n    }\n    Var coalescedVar \u003d colorings.peek().getPartitionSuperNode(var);\n    if (vNode.getValue().equals(coalescedVar)) {\n        return;\n    }\n    if (var.getNameNode() \u003d\u003d n) {\n        coalescedLog.append(n.getString()).append(\" \u003d\u003e \").append(coalescedVar.name).append(\" in \").append(t.getSourceName()).append(\u0027:\u0027).append(n.getLineno()).append(\u0027\\n\u0027);\n    }\n    n.setString(coalescedVar.name);\n    compiler.reportCodeChange();\n    if (NodeUtil.isVar(parent)) {\n        removeVarDeclaration(n);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/CoalesceVariableNames.java",
      "functionStartLine": 127,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,43 +1,23 @@\n @Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     if (colorings.isEmpty() || !NodeUtil.isName(n) || NodeUtil.isFunction(parent)) {\n         return;\n     }\n     Var var \u003d t.getScope().getVar(n.getString());\n     GraphNode\u003cVar, ?\u003e vNode \u003d colorings.peek().getGraph().getNode(var);\n     if (vNode \u003d\u003d null) {\n         return;\n     }\n     Var coalescedVar \u003d colorings.peek().getPartitionSuperNode(var);\n-    if (!usePseudoNames) {\n-        if (vNode.getValue().equals(coalescedVar)) {\n-            return;\n-        }\n-        n.setString(coalescedVar.name);\n-        compiler.reportCodeChange();\n-        if (NodeUtil.isVar(parent)) {\n-            removeVarDeclaration(n);\n-        }\n-    } else {\n-        String pseudoName \u003d null;\n-        Set\u003cString\u003e allMergedNames \u003d Sets.newTreeSet();\n-        for (Iterator\u003cVar\u003e i \u003d t.getScope().getVars(); i.hasNext(); ) {\n-            Var iVar \u003d i.next();\n-            if (coalescedVar.equals(colorings.peek().getPartitionSuperNode(iVar))) {\n-                allMergedNames.add(iVar.name);\n-            }\n-        }\n-        if (allMergedNames.size() \u003d\u003d 1) {\n-            return;\n-        }\n-        pseudoName \u003d Join.join(\"_\", allMergedNames);\n-        while (t.getScope().isDeclared(pseudoName, true)) {\n-            pseudoName +\u003d \"$\";\n-        }\n-        n.setString(pseudoName);\n-        compiler.reportCodeChange();\n-        if (!vNode.getValue().equals(coalescedVar) \u0026\u0026 NodeUtil.isVar(parent)) {\n-            removeVarDeclaration(n);\n-        }\n+    if (vNode.getValue().equals(coalescedVar)) {\n+        return;\n+    }\n+    if (var.getNameNode() \u003d\u003d n) {\n+        coalescedLog.append(n.getString()).append(\" \u003d\u003e \").append(coalescedVar.name).append(\" in \").append(t.getSourceName()).append(\u0027:\u0027).append(n.getLineno()).append(\u0027\\n\u0027);\n+    }\n+    n.setString(coalescedVar.name);\n+    compiler.reportCodeChange();\n+    if (NodeUtil.isVar(parent)) {\n+        removeVarDeclaration(n);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "31193006e16b909a3115f998789057fb05d76b18": {
      "type": "Ybodychange",
      "commitMessage": "Add a --debug flag for easier debugging.\n\nTurn off autoboxing from number -\u003e Number, string -\u003e String, etc.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@32 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/14/09, 4:18 PM",
      "commitName": "31193006e16b909a3115f998789057fb05d76b18",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/25/09, 6:53 AM",
      "commitNameOld": "3bee5d740c96572faea4b9fb8b632e0e07b13cbb",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 19.39,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (colorings.isEmpty() || !NodeUtil.isName(n) || NodeUtil.isFunction(parent)) {\n        return;\n    }\n    Var var \u003d t.getScope().getVar(n.getString());\n    GraphNode\u003cVar, ?\u003e vNode \u003d colorings.peek().getGraph().getNode(var);\n    if (vNode \u003d\u003d null) {\n        return;\n    }\n    Var coalescedVar \u003d colorings.peek().getPartitionSuperNode(var);\n    if (!usePseudoNames) {\n        if (vNode.getValue().equals(coalescedVar)) {\n            return;\n        }\n        n.setString(coalescedVar.name);\n        compiler.reportCodeChange();\n        if (NodeUtil.isVar(parent)) {\n            removeVarDeclaration(n);\n        }\n    } else {\n        String pseudoName \u003d null;\n        Set\u003cString\u003e allMergedNames \u003d Sets.newTreeSet();\n        for (Iterator\u003cVar\u003e i \u003d t.getScope().getVars(); i.hasNext(); ) {\n            Var iVar \u003d i.next();\n            if (coalescedVar.equals(colorings.peek().getPartitionSuperNode(iVar))) {\n                allMergedNames.add(iVar.name);\n            }\n        }\n        if (allMergedNames.size() \u003d\u003d 1) {\n            return;\n        }\n        pseudoName \u003d Join.join(\"_\", allMergedNames);\n        while (t.getScope().isDeclared(pseudoName, true)) {\n            pseudoName +\u003d \"$\";\n        }\n        n.setString(pseudoName);\n        compiler.reportCodeChange();\n        if (!vNode.getValue().equals(coalescedVar) \u0026\u0026 NodeUtil.isVar(parent)) {\n            removeVarDeclaration(n);\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/CoalesceVariableNames.java",
      "functionStartLine": 127,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,23 +1,43 @@\n @Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     if (colorings.isEmpty() || !NodeUtil.isName(n) || NodeUtil.isFunction(parent)) {\n         return;\n     }\n     Var var \u003d t.getScope().getVar(n.getString());\n     GraphNode\u003cVar, ?\u003e vNode \u003d colorings.peek().getGraph().getNode(var);\n     if (vNode \u003d\u003d null) {\n         return;\n     }\n     Var coalescedVar \u003d colorings.peek().getPartitionSuperNode(var);\n-    if (vNode.getValue().equals(coalescedVar)) {\n-        return;\n-    }\n-    if (var.getNameNode() \u003d\u003d n) {\n-        coalescedLog.append(n.getString()).append(\" \u003d\u003e \").append(coalescedVar.name).append(\" in \").append(t.getSourceName()).append(\u0027:\u0027).append(n.getLineno()).append(\u0027\\n\u0027);\n-    }\n-    n.setString(coalescedVar.name);\n-    compiler.reportCodeChange();\n-    if (NodeUtil.isVar(parent)) {\n-        removeVarDeclaration(n);\n+    if (!usePseudoNames) {\n+        if (vNode.getValue().equals(coalescedVar)) {\n+            return;\n+        }\n+        n.setString(coalescedVar.name);\n+        compiler.reportCodeChange();\n+        if (NodeUtil.isVar(parent)) {\n+            removeVarDeclaration(n);\n+        }\n+    } else {\n+        String pseudoName \u003d null;\n+        Set\u003cString\u003e allMergedNames \u003d Sets.newTreeSet();\n+        for (Iterator\u003cVar\u003e i \u003d t.getScope().getVars(); i.hasNext(); ) {\n+            Var iVar \u003d i.next();\n+            if (coalescedVar.equals(colorings.peek().getPartitionSuperNode(iVar))) {\n+                allMergedNames.add(iVar.name);\n+            }\n+        }\n+        if (allMergedNames.size() \u003d\u003d 1) {\n+            return;\n+        }\n+        pseudoName \u003d Join.join(\"_\", allMergedNames);\n+        while (t.getScope().isDeclared(pseudoName, true)) {\n+            pseudoName +\u003d \"$\";\n+        }\n+        n.setString(pseudoName);\n+        compiler.reportCodeChange();\n+        if (!vNode.getValue().equals(coalescedVar) \u0026\u0026 NodeUtil.isVar(parent)) {\n+            removeVarDeclaration(n);\n+        }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,23 @@\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (colorings.isEmpty() || !NodeUtil.isName(n) || NodeUtil.isFunction(parent)) {\n+        return;\n+    }\n+    Var var \u003d t.getScope().getVar(n.getString());\n+    GraphNode\u003cVar, ?\u003e vNode \u003d colorings.peek().getGraph().getNode(var);\n+    if (vNode \u003d\u003d null) {\n+        return;\n+    }\n+    Var coalescedVar \u003d colorings.peek().getPartitionSuperNode(var);\n+    if (vNode.getValue().equals(coalescedVar)) {\n+        return;\n+    }\n+    if (var.getNameNode() \u003d\u003d n) {\n+        coalescedLog.append(n.getString()).append(\" \u003d\u003e \").append(coalescedVar.name).append(\" in \").append(t.getSourceName()).append(\u0027:\u0027).append(n.getLineno()).append(\u0027\\n\u0027);\n+    }\n+    n.setString(coalescedVar.name);\n+    compiler.reportCodeChange();\n+    if (NodeUtil.isVar(parent)) {\n+        removeVarDeclaration(n);\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (colorings.isEmpty() || !NodeUtil.isName(n) || NodeUtil.isFunction(parent)) {\n        return;\n    }\n    Var var \u003d t.getScope().getVar(n.getString());\n    GraphNode\u003cVar, ?\u003e vNode \u003d colorings.peek().getGraph().getNode(var);\n    if (vNode \u003d\u003d null) {\n        return;\n    }\n    Var coalescedVar \u003d colorings.peek().getPartitionSuperNode(var);\n    if (vNode.getValue().equals(coalescedVar)) {\n        return;\n    }\n    if (var.getNameNode() \u003d\u003d n) {\n        coalescedLog.append(n.getString()).append(\" \u003d\u003e \").append(coalescedVar.name).append(\" in \").append(t.getSourceName()).append(\u0027:\u0027).append(n.getLineno()).append(\u0027\\n\u0027);\n    }\n    n.setString(coalescedVar.name);\n    compiler.reportCodeChange();\n    if (NodeUtil.isVar(parent)) {\n        removeVarDeclaration(n);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/CoalesceVariableNames.java",
      "functionStartLine": 127,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}