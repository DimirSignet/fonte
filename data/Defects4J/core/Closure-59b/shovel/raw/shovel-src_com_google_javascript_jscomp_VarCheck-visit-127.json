{
  "origin": "codeshovel",
  "repositoryName": "Closure-59b",
  "repositoryPath": "/tmp/Closure-59b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "VarCheck.java",
  "functionName": "visit",
  "functionId": "visit___t-NodeTraversal__n-Node__parent-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/VarCheck.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 127,
  "functionEndLine": 213,
  "numCommitsSeen": 32,
  "timeTaken": 959,
  "changeHistory": [
    "681cd7be75bc549183ad231950716f344226050d",
    "0593df4f98c349d98fd00595966477494a0bcd29",
    "98d279bce83ddb2dca499be4bc365939f809a923",
    "9de5e9b4671773bb3f2d5932e57c1b4186b9b777",
    "c9e89727dc8063d087d28e42629606f4fd74a6e5",
    "ebb59a97610015bc41bda7f458dd1428a3a3e335",
    "5da32cba7b68d69acfc535f57f21d652475d256f",
    "222eafd303155b3eac5cd244584b2cb3c4c11975",
    "f01925cbf7a39a885e51865208368e861d25a0c1",
    "fbf47bd6fe52121c22d9c1fa6764e6686221df99",
    "ffe07f8c307c6b421cead64229eddb3602369f44",
    "3bee5d740c96572faea4b9fb8b632e0e07b13cbb",
    "78995bf9e88599055a8c4165d89c09dc92a44b30",
    "0b7eccf2fd3a9293d7b513fbb766d7bc06abd7e0",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "681cd7be75bc549183ad231950716f344226050d": "Ybodychange",
    "0593df4f98c349d98fd00595966477494a0bcd29": "Ybodychange",
    "98d279bce83ddb2dca499be4bc365939f809a923": "Ybodychange",
    "9de5e9b4671773bb3f2d5932e57c1b4186b9b777": "Ybodychange",
    "c9e89727dc8063d087d28e42629606f4fd74a6e5": "Ybodychange",
    "ebb59a97610015bc41bda7f458dd1428a3a3e335": "Ybodychange",
    "5da32cba7b68d69acfc535f57f21d652475d256f": "Ymultichange(Yannotationchange,Ydocchange)",
    "222eafd303155b3eac5cd244584b2cb3c4c11975": "Ybodychange",
    "f01925cbf7a39a885e51865208368e861d25a0c1": "Ybodychange",
    "fbf47bd6fe52121c22d9c1fa6764e6686221df99": "Ybodychange",
    "ffe07f8c307c6b421cead64229eddb3602369f44": "Ybodychange",
    "3bee5d740c96572faea4b9fb8b632e0e07b13cbb": "Ybodychange",
    "78995bf9e88599055a8c4165d89c09dc92a44b30": "Ybodychange",
    "0b7eccf2fd3a9293d7b513fbb766d7bc06abd7e0": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "681cd7be75bc549183ad231950716f344226050d": {
      "type": "Ybodychange",
      "commitMessage": "\nFix another regression in extern-synthesized vars.\nThe problem came up because we were attaching @suppress {duplicate}\nto VAR nodes, and CollapseVariableDeclarations was deleting\nthose @suppress tags.\n\nR\u003djohnlenz\nDELTA\u003d23  (21 added, 0 deleted, 2 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d212\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@667 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/5/11, 3:18 PM",
      "commitName": "681cd7be75bc549183ad231950716f344226050d",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "11/11/10, 9:42 PM",
      "commitNameOld": "df223efd38c514d584f00d076488ab9a02011492",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 54.73,
      "commitsBetweenForRepo": 119,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() !\u003d Token.NAME) {\n        return;\n    }\n    String varName \u003d n.getString();\n    if (varName.isEmpty()) {\n        Preconditions.checkState(NodeUtil.isFunction(parent));\n        if (!NodeUtil.isFunctionExpression(parent)) {\n            t.report(n, INVALID_FUNCTION_DECL);\n        }\n        return;\n    }\n    if ((parent.getType() \u003d\u003d Token.VAR || NodeUtil.isFunctionDeclaration(parent)) \u0026\u0026 varsToDeclareInExterns.contains(varName)) {\n        createSynthesizedExternVar(varName);\n        n.addSuppression(\"duplicate\");\n    }\n    Scope scope \u003d t.getScope();\n    Scope.Var var \u003d scope.getVar(varName);\n    if (var \u003d\u003d null) {\n        if (NodeUtil.isFunctionExpression(parent)) {\n        } else {\n            if (!strictExternCheck || !t.getInput().isExtern()) {\n                t.report(n, UNDEFINED_VAR_ERROR, varName);\n            }\n            if (sanityCheck) {\n                throw new IllegalStateException(\"Unexpected variable \" + varName);\n            } else {\n                createSynthesizedExternVar(varName);\n                scope.getGlobalScope().declare(varName, n, null, getSynthesizedExternsInput());\n            }\n        }\n        return;\n    }\n    CompilerInput currInput \u003d t.getInput();\n    CompilerInput varInput \u003d var.input;\n    if (currInput \u003d\u003d varInput || currInput \u003d\u003d null || varInput \u003d\u003d null) {\n        return;\n    }\n    JSModule currModule \u003d currInput.getModule();\n    JSModule varModule \u003d varInput.getModule();\n    JSModuleGraph moduleGraph \u003d compiler.getModuleGraph();\n    if (varModule !\u003d currModule \u0026\u0026 varModule !\u003d null \u0026\u0026 currModule !\u003d null) {\n        if (moduleGraph.dependsOn(currModule, varModule)) {\n        } else {\n            if (!sanityCheck \u0026\u0026 scope.isGlobal()) {\n                if (moduleGraph.dependsOn(varModule, currModule)) {\n                    t.report(n, VIOLATED_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                } else {\n                    t.report(n, MISSING_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                }\n            } else {\n                t.report(n, STRICT_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/VarCheck.java",
      "functionStartLine": 113,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,57 +1,57 @@\n @Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() !\u003d Token.NAME) {\n         return;\n     }\n     String varName \u003d n.getString();\n     if (varName.isEmpty()) {\n         Preconditions.checkState(NodeUtil.isFunction(parent));\n         if (!NodeUtil.isFunctionExpression(parent)) {\n             t.report(n, INVALID_FUNCTION_DECL);\n         }\n         return;\n     }\n     if ((parent.getType() \u003d\u003d Token.VAR || NodeUtil.isFunctionDeclaration(parent)) \u0026\u0026 varsToDeclareInExterns.contains(varName)) {\n         createSynthesizedExternVar(varName);\n-        parent.addSuppression(\"duplicate\");\n+        n.addSuppression(\"duplicate\");\n     }\n     Scope scope \u003d t.getScope();\n     Scope.Var var \u003d scope.getVar(varName);\n     if (var \u003d\u003d null) {\n         if (NodeUtil.isFunctionExpression(parent)) {\n         } else {\n             if (!strictExternCheck || !t.getInput().isExtern()) {\n                 t.report(n, UNDEFINED_VAR_ERROR, varName);\n             }\n             if (sanityCheck) {\n                 throw new IllegalStateException(\"Unexpected variable \" + varName);\n             } else {\n                 createSynthesizedExternVar(varName);\n                 scope.getGlobalScope().declare(varName, n, null, getSynthesizedExternsInput());\n             }\n         }\n         return;\n     }\n     CompilerInput currInput \u003d t.getInput();\n     CompilerInput varInput \u003d var.input;\n     if (currInput \u003d\u003d varInput || currInput \u003d\u003d null || varInput \u003d\u003d null) {\n         return;\n     }\n     JSModule currModule \u003d currInput.getModule();\n     JSModule varModule \u003d varInput.getModule();\n     JSModuleGraph moduleGraph \u003d compiler.getModuleGraph();\n     if (varModule !\u003d currModule \u0026\u0026 varModule !\u003d null \u0026\u0026 currModule !\u003d null) {\n         if (moduleGraph.dependsOn(currModule, varModule)) {\n         } else {\n             if (!sanityCheck \u0026\u0026 scope.isGlobal()) {\n                 if (moduleGraph.dependsOn(varModule, currModule)) {\n                     t.report(n, VIOLATED_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                 } else {\n                     t.report(n, MISSING_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                 }\n             } else {\n                 t.report(n, STRICT_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0593df4f98c349d98fd00595966477494a0bcd29": {
      "type": "Ybodychange",
      "commitMessage": "\nIf a variable is referenced from the externs, but not declared\nin the externs, then create a synthetic extern for it. This\nprevents a compiler crash where code removal removes all\nreferences to a variable in normal code, but there are still\nreferences in the externs.\n\nR\u003dacleung\nDELTA\u003d143  (103 added, 24 deleted, 16 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d203478\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@397 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/31/10, 11:22 AM",
      "commitName": "0593df4f98c349d98fd00595966477494a0bcd29",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "8/26/10, 4:07 PM",
      "commitNameOld": "4031a54f71a1df311b0b9ab24640297e0d526bfe",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 4.8,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() !\u003d Token.NAME) {\n        return;\n    }\n    String varName \u003d n.getString();\n    if (varName.isEmpty()) {\n        Preconditions.checkState(NodeUtil.isFunction(parent));\n        if (!NodeUtil.isFunctionExpression(parent)) {\n            t.report(n, INVALID_FUNCTION_DECL);\n        }\n        return;\n    }\n    if ((parent.getType() \u003d\u003d Token.VAR || NodeUtil.isFunctionDeclaration(parent)) \u0026\u0026 varsToDeclareInExterns.contains(varName)) {\n        createSynthesizedExternVar(varName);\n        parent.addSuppression(\"duplicate\");\n    }\n    Scope scope \u003d t.getScope();\n    Scope.Var var \u003d scope.getVar(varName);\n    if (var \u003d\u003d null) {\n        if (NodeUtil.isFunctionExpression(parent)) {\n        } else {\n            if (!strictExternCheck || !t.getInput().isExtern()) {\n                t.report(n, UNDEFINED_VAR_ERROR, varName);\n            }\n            if (sanityCheck) {\n                throw new IllegalStateException(\"Unexpected variable \" + varName);\n            } else {\n                createSynthesizedExternVar(varName);\n                scope.getGlobalScope().declare(varName, n, null, getSynthesizedExternsInput());\n            }\n        }\n        return;\n    }\n    CompilerInput currInput \u003d t.getInput();\n    CompilerInput varInput \u003d var.input;\n    if (currInput \u003d\u003d varInput || currInput \u003d\u003d null || varInput \u003d\u003d null) {\n        return;\n    }\n    JSModule currModule \u003d currInput.getModule();\n    JSModule varModule \u003d varInput.getModule();\n    JSModuleGraph moduleGraph \u003d compiler.getModuleGraph();\n    if (varModule !\u003d currModule \u0026\u0026 varModule !\u003d null \u0026\u0026 currModule !\u003d null) {\n        if (moduleGraph.dependsOn(currModule, varModule)) {\n        } else {\n            if (!sanityCheck \u0026\u0026 scope.isGlobal()) {\n                if (moduleGraph.dependsOn(varModule, currModule)) {\n                    t.report(n, VIOLATED_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                } else {\n                    t.report(n, MISSING_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                }\n            } else {\n                t.report(n, STRICT_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/VarCheck.java",
      "functionStartLine": 109,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,57 +1,57 @@\n @Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() !\u003d Token.NAME) {\n         return;\n     }\n     String varName \u003d n.getString();\n     if (varName.isEmpty()) {\n         Preconditions.checkState(NodeUtil.isFunction(parent));\n         if (!NodeUtil.isFunctionExpression(parent)) {\n             t.report(n, INVALID_FUNCTION_DECL);\n         }\n         return;\n     }\n+    if ((parent.getType() \u003d\u003d Token.VAR || NodeUtil.isFunctionDeclaration(parent)) \u0026\u0026 varsToDeclareInExterns.contains(varName)) {\n+        createSynthesizedExternVar(varName);\n+        parent.addSuppression(\"duplicate\");\n+    }\n     Scope scope \u003d t.getScope();\n     Scope.Var var \u003d scope.getVar(varName);\n     if (var \u003d\u003d null) {\n         if (NodeUtil.isFunctionExpression(parent)) {\n         } else {\n             if (!strictExternCheck || !t.getInput().isExtern()) {\n                 t.report(n, UNDEFINED_VAR_ERROR, varName);\n             }\n             if (sanityCheck) {\n                 throw new IllegalStateException(\"Unexpected variable \" + varName);\n             } else {\n-                Node nameNode \u003d Node.newString(Token.NAME, varName);\n-                if (compiler.getCodingConvention().isConstant(varName)) {\n-                    nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n-                }\n-                getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode));\n-                scope.getGlobalScope().declare(varName, nameNode, null, getSynthesizedExternsInput());\n+                createSynthesizedExternVar(varName);\n+                scope.getGlobalScope().declare(varName, n, null, getSynthesizedExternsInput());\n             }\n         }\n         return;\n     }\n     CompilerInput currInput \u003d t.getInput();\n     CompilerInput varInput \u003d var.input;\n     if (currInput \u003d\u003d varInput || currInput \u003d\u003d null || varInput \u003d\u003d null) {\n         return;\n     }\n     JSModule currModule \u003d currInput.getModule();\n     JSModule varModule \u003d varInput.getModule();\n     JSModuleGraph moduleGraph \u003d compiler.getModuleGraph();\n     if (varModule !\u003d currModule \u0026\u0026 varModule !\u003d null \u0026\u0026 currModule !\u003d null) {\n         if (moduleGraph.dependsOn(currModule, varModule)) {\n         } else {\n             if (!sanityCheck \u0026\u0026 scope.isGlobal()) {\n                 if (moduleGraph.dependsOn(varModule, currModule)) {\n                     t.report(n, VIOLATED_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                 } else {\n                     t.report(n, MISSING_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                 }\n             } else {\n                 t.report(n, STRICT_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "98d279bce83ddb2dca499be4bc365939f809a923": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/07/12 15:42:05 by nicksantos\n\n\tAdd a couple test cases that i was curious about.\n\n\tR\u003drobbyw\n\tDELTA\u003d25  (25 added, 0 deleted, 0 changed)\n\nChange on 2010/07/12 17:12:33 by nicksantos\n\n\tAdd CONST annotations to synthesized vars.\n\n\tR\u003djohnlenz\n\tDELTA\u003d11  (11 added, 0 deleted, 0 changed)\n\nChange on 2010/07/12 17:55:03 by johnlenz\n\n\tOpen source the name reference graph report and html report.\n\n\tR\u003dacleung\n\tDELTA\u003d185  (93 added, 90 deleted, 2 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d48009\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@273 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/13/10, 10:54 AM",
      "commitName": "98d279bce83ddb2dca499be4bc365939f809a923",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "7/1/10, 7:38 AM",
      "commitNameOld": "9de5e9b4671773bb3f2d5932e57c1b4186b9b777",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 12.14,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() !\u003d Token.NAME) {\n        return;\n    }\n    String varName \u003d n.getString();\n    if (varName.isEmpty()) {\n        Preconditions.checkState(NodeUtil.isFunction(parent));\n        if (!NodeUtil.isFunctionExpression(parent)) {\n            t.report(n, INVALID_FUNCTION_DECL);\n        }\n        return;\n    }\n    Scope scope \u003d t.getScope();\n    Scope.Var var \u003d scope.getVar(varName);\n    if (var \u003d\u003d null) {\n        if (NodeUtil.isFunctionExpression(parent)) {\n        } else {\n            if (!strictExternCheck || !t.getInput().isExtern()) {\n                t.report(n, UNDEFINED_VAR_ERROR, varName);\n            }\n            if (sanityCheck) {\n                throw new IllegalStateException(\"Unexpected variable \" + varName);\n            } else {\n                Node nameNode \u003d Node.newString(Token.NAME, varName);\n                if (compiler.getCodingConvention().isConstant(varName)) {\n                    nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n                }\n                getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode));\n                scope.getGlobalScope().declare(varName, nameNode, null, getSynthesizedExternsInput());\n            }\n        }\n        return;\n    }\n    CompilerInput currInput \u003d t.getInput();\n    CompilerInput varInput \u003d var.input;\n    if (currInput \u003d\u003d varInput || currInput \u003d\u003d null || varInput \u003d\u003d null) {\n        return;\n    }\n    JSModule currModule \u003d currInput.getModule();\n    JSModule varModule \u003d varInput.getModule();\n    JSModuleGraph moduleGraph \u003d compiler.getModuleGraph();\n    if (varModule !\u003d currModule \u0026\u0026 varModule !\u003d null \u0026\u0026 currModule !\u003d null) {\n        if (moduleGraph.dependsOn(currModule, varModule)) {\n        } else {\n            if (!sanityCheck \u0026\u0026 scope.isGlobal()) {\n                if (moduleGraph.dependsOn(varModule, currModule)) {\n                    t.report(n, VIOLATED_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                } else {\n                    t.report(n, MISSING_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                }\n            } else {\n                t.report(n, STRICT_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/VarCheck.java",
      "functionStartLine": 99,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,54 +1,57 @@\n @Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() !\u003d Token.NAME) {\n         return;\n     }\n     String varName \u003d n.getString();\n     if (varName.isEmpty()) {\n         Preconditions.checkState(NodeUtil.isFunction(parent));\n         if (!NodeUtil.isFunctionExpression(parent)) {\n             t.report(n, INVALID_FUNCTION_DECL);\n         }\n         return;\n     }\n     Scope scope \u003d t.getScope();\n     Scope.Var var \u003d scope.getVar(varName);\n     if (var \u003d\u003d null) {\n         if (NodeUtil.isFunctionExpression(parent)) {\n         } else {\n             if (!strictExternCheck || !t.getInput().isExtern()) {\n                 t.report(n, UNDEFINED_VAR_ERROR, varName);\n             }\n             if (sanityCheck) {\n                 throw new IllegalStateException(\"Unexpected variable \" + varName);\n             } else {\n                 Node nameNode \u003d Node.newString(Token.NAME, varName);\n+                if (compiler.getCodingConvention().isConstant(varName)) {\n+                    nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n+                }\n                 getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode));\n                 scope.getGlobalScope().declare(varName, nameNode, null, getSynthesizedExternsInput());\n             }\n         }\n         return;\n     }\n     CompilerInput currInput \u003d t.getInput();\n     CompilerInput varInput \u003d var.input;\n     if (currInput \u003d\u003d varInput || currInput \u003d\u003d null || varInput \u003d\u003d null) {\n         return;\n     }\n     JSModule currModule \u003d currInput.getModule();\n     JSModule varModule \u003d varInput.getModule();\n     JSModuleGraph moduleGraph \u003d compiler.getModuleGraph();\n     if (varModule !\u003d currModule \u0026\u0026 varModule !\u003d null \u0026\u0026 currModule !\u003d null) {\n         if (moduleGraph.dependsOn(currModule, varModule)) {\n         } else {\n             if (!sanityCheck \u0026\u0026 scope.isGlobal()) {\n                 if (moduleGraph.dependsOn(varModule, currModule)) {\n                     t.report(n, VIOLATED_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                 } else {\n                     t.report(n, MISSING_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                 }\n             } else {\n                 t.report(n, STRICT_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9de5e9b4671773bb3f2d5932e57c1b4186b9b777": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/06/30 15:06:33 by johnlenz\n\n\tAdd a diagnostic group so that projects with weird externs can opt-out of the stricter extern checks.\n\n\tR\u003dnicksantos\n\tDELTA\u003d54  (52 added, 0 deleted, 2 changed)\n\nChange on 2010/06/30 17:56:51 by johnlenz\n\n\tRevert warning levels until after a release is put out to control them.\n\n\tR\u003dnicksantos\n\tDELTA\u003d4  (2 added, 0 deleted, 2 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d47002\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@260 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/1/10, 7:38 AM",
      "commitName": "9de5e9b4671773bb3f2d5932e57c1b4186b9b777",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "6/22/10, 4:00 PM",
      "commitNameOld": "c9e89727dc8063d087d28e42629606f4fd74a6e5",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 8.65,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() !\u003d Token.NAME) {\n        return;\n    }\n    String varName \u003d n.getString();\n    if (varName.isEmpty()) {\n        Preconditions.checkState(NodeUtil.isFunction(parent));\n        if (!NodeUtil.isFunctionExpression(parent)) {\n            t.report(n, INVALID_FUNCTION_DECL);\n        }\n        return;\n    }\n    Scope scope \u003d t.getScope();\n    Scope.Var var \u003d scope.getVar(varName);\n    if (var \u003d\u003d null) {\n        if (NodeUtil.isFunctionExpression(parent)) {\n        } else {\n            if (!strictExternCheck || !t.getInput().isExtern()) {\n                t.report(n, UNDEFINED_VAR_ERROR, varName);\n            }\n            if (sanityCheck) {\n                throw new IllegalStateException(\"Unexpected variable \" + varName);\n            } else {\n                Node nameNode \u003d Node.newString(Token.NAME, varName);\n                getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode));\n                scope.getGlobalScope().declare(varName, nameNode, null, getSynthesizedExternsInput());\n            }\n        }\n        return;\n    }\n    CompilerInput currInput \u003d t.getInput();\n    CompilerInput varInput \u003d var.input;\n    if (currInput \u003d\u003d varInput || currInput \u003d\u003d null || varInput \u003d\u003d null) {\n        return;\n    }\n    JSModule currModule \u003d currInput.getModule();\n    JSModule varModule \u003d varInput.getModule();\n    JSModuleGraph moduleGraph \u003d compiler.getModuleGraph();\n    if (varModule !\u003d currModule \u0026\u0026 varModule !\u003d null \u0026\u0026 currModule !\u003d null) {\n        if (moduleGraph.dependsOn(currModule, varModule)) {\n        } else {\n            if (!sanityCheck \u0026\u0026 scope.isGlobal()) {\n                if (moduleGraph.dependsOn(varModule, currModule)) {\n                    t.report(n, VIOLATED_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                } else {\n                    t.report(n, MISSING_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                }\n            } else {\n                t.report(n, STRICT_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/VarCheck.java",
      "functionStartLine": 99,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,54 +1,54 @@\n @Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() !\u003d Token.NAME) {\n         return;\n     }\n     String varName \u003d n.getString();\n     if (varName.isEmpty()) {\n         Preconditions.checkState(NodeUtil.isFunction(parent));\n         if (!NodeUtil.isFunctionExpression(parent)) {\n             t.report(n, INVALID_FUNCTION_DECL);\n         }\n         return;\n     }\n     Scope scope \u003d t.getScope();\n     Scope.Var var \u003d scope.getVar(varName);\n     if (var \u003d\u003d null) {\n         if (NodeUtil.isFunctionExpression(parent)) {\n         } else {\n-            if (!t.getInput().isExtern()) {\n+            if (!strictExternCheck || !t.getInput().isExtern()) {\n                 t.report(n, UNDEFINED_VAR_ERROR, varName);\n             }\n             if (sanityCheck) {\n                 throw new IllegalStateException(\"Unexpected variable \" + varName);\n             } else {\n                 Node nameNode \u003d Node.newString(Token.NAME, varName);\n                 getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode));\n                 scope.getGlobalScope().declare(varName, nameNode, null, getSynthesizedExternsInput());\n             }\n         }\n         return;\n     }\n     CompilerInput currInput \u003d t.getInput();\n     CompilerInput varInput \u003d var.input;\n     if (currInput \u003d\u003d varInput || currInput \u003d\u003d null || varInput \u003d\u003d null) {\n         return;\n     }\n     JSModule currModule \u003d currInput.getModule();\n     JSModule varModule \u003d varInput.getModule();\n     JSModuleGraph moduleGraph \u003d compiler.getModuleGraph();\n     if (varModule !\u003d currModule \u0026\u0026 varModule !\u003d null \u0026\u0026 currModule !\u003d null) {\n         if (moduleGraph.dependsOn(currModule, varModule)) {\n         } else {\n             if (!sanityCheck \u0026\u0026 scope.isGlobal()) {\n                 if (moduleGraph.dependsOn(varModule, currModule)) {\n                     t.report(n, VIOLATED_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                 } else {\n                     t.report(n, MISSING_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                 }\n             } else {\n                 t.report(n, STRICT_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c9e89727dc8063d087d28e42629606f4fd74a6e5": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/06/22 by nicksantos\n\n\tvariable coalescing better be run AFTER ambiguate properties, and\n\tafter denormalization.\n\n\tR\u003djohnlenz\n\tDELTA\u003d36  (20 added, 16 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d34005\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@248 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/22/10, 4:00 PM",
      "commitName": "c9e89727dc8063d087d28e42629606f4fd74a6e5",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/23/10, 11:31 AM",
      "commitNameOld": "ebb59a97610015bc41bda7f458dd1428a3a3e335",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 60.19,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() !\u003d Token.NAME) {\n        return;\n    }\n    String varName \u003d n.getString();\n    if (varName.isEmpty()) {\n        Preconditions.checkState(NodeUtil.isFunction(parent));\n        if (!NodeUtil.isFunctionExpression(parent)) {\n            t.report(n, INVALID_FUNCTION_DECL);\n        }\n        return;\n    }\n    Scope scope \u003d t.getScope();\n    Scope.Var var \u003d scope.getVar(varName);\n    if (var \u003d\u003d null) {\n        if (NodeUtil.isFunctionExpression(parent)) {\n        } else {\n            if (!t.getInput().isExtern()) {\n                t.report(n, UNDEFINED_VAR_ERROR, varName);\n            }\n            if (sanityCheck) {\n                throw new IllegalStateException(\"Unexpected variable \" + varName);\n            } else {\n                Node nameNode \u003d Node.newString(Token.NAME, varName);\n                getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode));\n                scope.getGlobalScope().declare(varName, nameNode, null, getSynthesizedExternsInput());\n            }\n        }\n        return;\n    }\n    CompilerInput currInput \u003d t.getInput();\n    CompilerInput varInput \u003d var.input;\n    if (currInput \u003d\u003d varInput || currInput \u003d\u003d null || varInput \u003d\u003d null) {\n        return;\n    }\n    JSModule currModule \u003d currInput.getModule();\n    JSModule varModule \u003d varInput.getModule();\n    JSModuleGraph moduleGraph \u003d compiler.getModuleGraph();\n    if (varModule !\u003d currModule \u0026\u0026 varModule !\u003d null \u0026\u0026 currModule !\u003d null) {\n        if (moduleGraph.dependsOn(currModule, varModule)) {\n        } else {\n            if (!sanityCheck \u0026\u0026 scope.isGlobal()) {\n                if (moduleGraph.dependsOn(varModule, currModule)) {\n                    t.report(n, VIOLATED_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                } else {\n                    t.report(n, MISSING_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                }\n            } else {\n                t.report(n, STRICT_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/VarCheck.java",
      "functionStartLine": 94,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,52 +1,54 @@\n @Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() !\u003d Token.NAME) {\n         return;\n     }\n     String varName \u003d n.getString();\n     if (varName.isEmpty()) {\n         Preconditions.checkState(NodeUtil.isFunction(parent));\n         if (!NodeUtil.isFunctionExpression(parent)) {\n             t.report(n, INVALID_FUNCTION_DECL);\n         }\n         return;\n     }\n     Scope scope \u003d t.getScope();\n     Scope.Var var \u003d scope.getVar(varName);\n     if (var \u003d\u003d null) {\n         if (NodeUtil.isFunctionExpression(parent)) {\n         } else {\n-            t.report(n, UNDEFINED_VAR_ERROR, varName);\n+            if (!t.getInput().isExtern()) {\n+                t.report(n, UNDEFINED_VAR_ERROR, varName);\n+            }\n             if (sanityCheck) {\n                 throw new IllegalStateException(\"Unexpected variable \" + varName);\n             } else {\n                 Node nameNode \u003d Node.newString(Token.NAME, varName);\n                 getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode));\n                 scope.getGlobalScope().declare(varName, nameNode, null, getSynthesizedExternsInput());\n             }\n         }\n         return;\n     }\n     CompilerInput currInput \u003d t.getInput();\n     CompilerInput varInput \u003d var.input;\n     if (currInput \u003d\u003d varInput || currInput \u003d\u003d null || varInput \u003d\u003d null) {\n         return;\n     }\n     JSModule currModule \u003d currInput.getModule();\n     JSModule varModule \u003d varInput.getModule();\n     JSModuleGraph moduleGraph \u003d compiler.getModuleGraph();\n     if (varModule !\u003d currModule \u0026\u0026 varModule !\u003d null \u0026\u0026 currModule !\u003d null) {\n         if (moduleGraph.dependsOn(currModule, varModule)) {\n         } else {\n             if (!sanityCheck \u0026\u0026 scope.isGlobal()) {\n                 if (moduleGraph.dependsOn(varModule, currModule)) {\n                     t.report(n, VIOLATED_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                 } else {\n                     t.report(n, MISSING_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                 }\n             } else {\n                 t.report(n, STRICT_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ebb59a97610015bc41bda7f458dd1428a3a3e335": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/04/22 by nick\n\n        fix the extern definition of Window.prototype.stop\n\n        R\u003dsiggy\n        DELTA\u003d1  (0 added, 0 deleted, 1 changed)\n\nChange on 2010/04/22 by john\n\n        \"Anonymous function\" is a confusing term for functions with names.\n        Properly we are usually distinguishing between functions statements\n        (function declarations) and function expressions.\n\n        R\u003dalan\n        DELTA\u003d172  (7 added, 14 deleted, 151 changed)\n\nChange on 2010/04/22 by john\n\n        Standardize the definition of setTimeout/setInterval.\n        Fix for Issue 137\n\n        R\u003dnick\n        DELTA\u003d6  (2 added, 2 deleted, 2 changed)\n\nChange on 2010/04/22 by mark\n\n        Various delegate fixes.\n\n        Give the delegate proxy a name unique from the delegate base so that\n        InstanceObjectType#equals distinguishes them. This is necessary for\n        AmbiguateProperties to work.\n\n        Fix the prototype of the delegate proxy. This makes\n        DisambiguateProperties continue to work.\n\n        Add superclass methods of the delegate base to the delegate proxy.\n\n\n        R\u003dandrew,nada\n        DELTA\u003d526  (383 added, 104 deleted, 39 changed)\n\nChange on 2010/04/23 by john\n\n        Allow variable inlining of function statements. For simplicity  limited to functions defined before first use.\n\n        R\u003dnick\n        DELTA\u003d79  (49 added, 3 deleted, 27 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dhakjvx\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@197 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/23/10, 11:31 AM",
      "commitName": "ebb59a97610015bc41bda7f458dd1428a3a3e335",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/19/10, 4:28 PM",
      "commitNameOld": "5da32cba7b68d69acfc535f57f21d652475d256f",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 3.79,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() !\u003d Token.NAME) {\n        return;\n    }\n    String varName \u003d n.getString();\n    if (varName.isEmpty()) {\n        Preconditions.checkState(NodeUtil.isFunction(parent));\n        if (!NodeUtil.isFunctionExpression(parent)) {\n            t.report(n, INVALID_FUNCTION_DECL);\n        }\n        return;\n    }\n    Scope scope \u003d t.getScope();\n    Scope.Var var \u003d scope.getVar(varName);\n    if (var \u003d\u003d null) {\n        if (NodeUtil.isFunctionExpression(parent)) {\n        } else {\n            t.report(n, UNDEFINED_VAR_ERROR, varName);\n            if (sanityCheck) {\n                throw new IllegalStateException(\"Unexpected variable \" + varName);\n            } else {\n                Node nameNode \u003d Node.newString(Token.NAME, varName);\n                getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode));\n                scope.getGlobalScope().declare(varName, nameNode, null, getSynthesizedExternsInput());\n            }\n        }\n        return;\n    }\n    CompilerInput currInput \u003d t.getInput();\n    CompilerInput varInput \u003d var.input;\n    if (currInput \u003d\u003d varInput || currInput \u003d\u003d null || varInput \u003d\u003d null) {\n        return;\n    }\n    JSModule currModule \u003d currInput.getModule();\n    JSModule varModule \u003d varInput.getModule();\n    JSModuleGraph moduleGraph \u003d compiler.getModuleGraph();\n    if (varModule !\u003d currModule \u0026\u0026 varModule !\u003d null \u0026\u0026 currModule !\u003d null) {\n        if (moduleGraph.dependsOn(currModule, varModule)) {\n        } else {\n            if (!sanityCheck \u0026\u0026 scope.isGlobal()) {\n                if (moduleGraph.dependsOn(varModule, currModule)) {\n                    t.report(n, VIOLATED_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                } else {\n                    t.report(n, MISSING_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                }\n            } else {\n                t.report(n, STRICT_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/VarCheck.java",
      "functionStartLine": 89,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,52 +1,52 @@\n @Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() !\u003d Token.NAME) {\n         return;\n     }\n     String varName \u003d n.getString();\n     if (varName.isEmpty()) {\n         Preconditions.checkState(NodeUtil.isFunction(parent));\n-        if (!NodeUtil.isAnonymousFunction(parent)) {\n+        if (!NodeUtil.isFunctionExpression(parent)) {\n             t.report(n, INVALID_FUNCTION_DECL);\n         }\n         return;\n     }\n     Scope scope \u003d t.getScope();\n     Scope.Var var \u003d scope.getVar(varName);\n     if (var \u003d\u003d null) {\n-        if (NodeUtil.isAnonymousFunction(parent)) {\n+        if (NodeUtil.isFunctionExpression(parent)) {\n         } else {\n             t.report(n, UNDEFINED_VAR_ERROR, varName);\n             if (sanityCheck) {\n                 throw new IllegalStateException(\"Unexpected variable \" + varName);\n             } else {\n                 Node nameNode \u003d Node.newString(Token.NAME, varName);\n                 getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode));\n                 scope.getGlobalScope().declare(varName, nameNode, null, getSynthesizedExternsInput());\n             }\n         }\n         return;\n     }\n     CompilerInput currInput \u003d t.getInput();\n     CompilerInput varInput \u003d var.input;\n     if (currInput \u003d\u003d varInput || currInput \u003d\u003d null || varInput \u003d\u003d null) {\n         return;\n     }\n     JSModule currModule \u003d currInput.getModule();\n     JSModule varModule \u003d varInput.getModule();\n     JSModuleGraph moduleGraph \u003d compiler.getModuleGraph();\n     if (varModule !\u003d currModule \u0026\u0026 varModule !\u003d null \u0026\u0026 currModule !\u003d null) {\n         if (moduleGraph.dependsOn(currModule, varModule)) {\n         } else {\n             if (!sanityCheck \u0026\u0026 scope.isGlobal()) {\n                 if (moduleGraph.dependsOn(varModule, currModule)) {\n                     t.report(n, VIOLATED_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                 } else {\n                     t.report(n, MISSING_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                 }\n             } else {\n                 t.report(n, STRICT_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5da32cba7b68d69acfc535f57f21d652475d256f": {
      "type": "Ymultichange(Yannotationchange,Ydocchange)",
      "commitMessage": "\nChange on 2010/04/19 by anatol\n\n        Replace {@inheritDoc} javadoc annotation with @Override.\n        @Override is better as it implies documentation inheritance plus checks\n        that the parent method exists at the compile-time.\n\n        R\u003dnick\n        DELTA\u003d137  (0 added, 70 deleted, 67 changed)\n\nChange on 2010/04/19 by nick\n\n        Change how we resolve types.\n        Instead of leaving shell proxy types around, unbox the proxy types.\n\n        R\u003dandrew,john\n        DELTA\u003d103  (84 added, 5 deleted, 14 changed)\n\nChange on 2010/04/19 by acleung\n\n        Enable Flow Sensitive Inlining by default.\n\n        R\u003djohn\n        DELTA\u003d1  (0 added, 0 deleted, 1 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dpqvliw\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@191 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/19/10, 4:28 PM",
      "commitName": "5da32cba7b68d69acfc535f57f21d652475d256f",
      "commitAuthor": "Nicholas.J.Santos",
      "subchanges": [
        {
          "type": "Yannotationchange",
          "commitMessage": "\nChange on 2010/04/19 by anatol\n\n        Replace {@inheritDoc} javadoc annotation with @Override.\n        @Override is better as it implies documentation inheritance plus checks\n        that the parent method exists at the compile-time.\n\n        R\u003dnick\n        DELTA\u003d137  (0 added, 70 deleted, 67 changed)\n\nChange on 2010/04/19 by nick\n\n        Change how we resolve types.\n        Instead of leaving shell proxy types around, unbox the proxy types.\n\n        R\u003dandrew,john\n        DELTA\u003d103  (84 added, 5 deleted, 14 changed)\n\nChange on 2010/04/19 by acleung\n\n        Enable Flow Sensitive Inlining by default.\n\n        R\u003djohn\n        DELTA\u003d1  (0 added, 0 deleted, 1 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dpqvliw\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@191 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "4/19/10, 4:28 PM",
          "commitName": "5da32cba7b68d69acfc535f57f21d652475d256f",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "4/5/10, 12:30 PM",
          "commitNameOld": "222eafd303155b3eac5cd244584b2cb3c4c11975",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 14.17,
          "commitsBetweenForRepo": 18,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() !\u003d Token.NAME) {\n        return;\n    }\n    String varName \u003d n.getString();\n    if (varName.isEmpty()) {\n        Preconditions.checkState(NodeUtil.isFunction(parent));\n        if (!NodeUtil.isAnonymousFunction(parent)) {\n            t.report(n, INVALID_FUNCTION_DECL);\n        }\n        return;\n    }\n    Scope scope \u003d t.getScope();\n    Scope.Var var \u003d scope.getVar(varName);\n    if (var \u003d\u003d null) {\n        if (NodeUtil.isAnonymousFunction(parent)) {\n        } else {\n            t.report(n, UNDEFINED_VAR_ERROR, varName);\n            if (sanityCheck) {\n                throw new IllegalStateException(\"Unexpected variable \" + varName);\n            } else {\n                Node nameNode \u003d Node.newString(Token.NAME, varName);\n                getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode));\n                scope.getGlobalScope().declare(varName, nameNode, null, getSynthesizedExternsInput());\n            }\n        }\n        return;\n    }\n    CompilerInput currInput \u003d t.getInput();\n    CompilerInput varInput \u003d var.input;\n    if (currInput \u003d\u003d varInput || currInput \u003d\u003d null || varInput \u003d\u003d null) {\n        return;\n    }\n    JSModule currModule \u003d currInput.getModule();\n    JSModule varModule \u003d varInput.getModule();\n    JSModuleGraph moduleGraph \u003d compiler.getModuleGraph();\n    if (varModule !\u003d currModule \u0026\u0026 varModule !\u003d null \u0026\u0026 currModule !\u003d null) {\n        if (moduleGraph.dependsOn(currModule, varModule)) {\n        } else {\n            if (!sanityCheck \u0026\u0026 scope.isGlobal()) {\n                if (moduleGraph.dependsOn(varModule, currModule)) {\n                    t.report(n, VIOLATED_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                } else {\n                    t.report(n, MISSING_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                }\n            } else {\n                t.report(n, STRICT_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n            }\n        }\n    }\n}",
          "path": "src/com/google/javascript/jscomp/VarCheck.java",
          "functionStartLine": 89,
          "functionName": "visit",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,51 +1,52 @@\n+@Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() !\u003d Token.NAME) {\n         return;\n     }\n     String varName \u003d n.getString();\n     if (varName.isEmpty()) {\n         Preconditions.checkState(NodeUtil.isFunction(parent));\n         if (!NodeUtil.isAnonymousFunction(parent)) {\n             t.report(n, INVALID_FUNCTION_DECL);\n         }\n         return;\n     }\n     Scope scope \u003d t.getScope();\n     Scope.Var var \u003d scope.getVar(varName);\n     if (var \u003d\u003d null) {\n         if (NodeUtil.isAnonymousFunction(parent)) {\n         } else {\n             t.report(n, UNDEFINED_VAR_ERROR, varName);\n             if (sanityCheck) {\n                 throw new IllegalStateException(\"Unexpected variable \" + varName);\n             } else {\n                 Node nameNode \u003d Node.newString(Token.NAME, varName);\n                 getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode));\n                 scope.getGlobalScope().declare(varName, nameNode, null, getSynthesizedExternsInput());\n             }\n         }\n         return;\n     }\n     CompilerInput currInput \u003d t.getInput();\n     CompilerInput varInput \u003d var.input;\n     if (currInput \u003d\u003d varInput || currInput \u003d\u003d null || varInput \u003d\u003d null) {\n         return;\n     }\n     JSModule currModule \u003d currInput.getModule();\n     JSModule varModule \u003d varInput.getModule();\n     JSModuleGraph moduleGraph \u003d compiler.getModuleGraph();\n     if (varModule !\u003d currModule \u0026\u0026 varModule !\u003d null \u0026\u0026 currModule !\u003d null) {\n         if (moduleGraph.dependsOn(currModule, varModule)) {\n         } else {\n             if (!sanityCheck \u0026\u0026 scope.isGlobal()) {\n                 if (moduleGraph.dependsOn(varModule, currModule)) {\n                     t.report(n, VIOLATED_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                 } else {\n                     t.report(n, MISSING_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                 }\n             } else {\n                 t.report(n, STRICT_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "@Override"
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "\nChange on 2010/04/19 by anatol\n\n        Replace {@inheritDoc} javadoc annotation with @Override.\n        @Override is better as it implies documentation inheritance plus checks\n        that the parent method exists at the compile-time.\n\n        R\u003dnick\n        DELTA\u003d137  (0 added, 70 deleted, 67 changed)\n\nChange on 2010/04/19 by nick\n\n        Change how we resolve types.\n        Instead of leaving shell proxy types around, unbox the proxy types.\n\n        R\u003dandrew,john\n        DELTA\u003d103  (84 added, 5 deleted, 14 changed)\n\nChange on 2010/04/19 by acleung\n\n        Enable Flow Sensitive Inlining by default.\n\n        R\u003djohn\n        DELTA\u003d1  (0 added, 0 deleted, 1 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dpqvliw\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@191 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "4/19/10, 4:28 PM",
          "commitName": "5da32cba7b68d69acfc535f57f21d652475d256f",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "4/5/10, 12:30 PM",
          "commitNameOld": "222eafd303155b3eac5cd244584b2cb3c4c11975",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 14.17,
          "commitsBetweenForRepo": 18,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() !\u003d Token.NAME) {\n        return;\n    }\n    String varName \u003d n.getString();\n    if (varName.isEmpty()) {\n        Preconditions.checkState(NodeUtil.isFunction(parent));\n        if (!NodeUtil.isAnonymousFunction(parent)) {\n            t.report(n, INVALID_FUNCTION_DECL);\n        }\n        return;\n    }\n    Scope scope \u003d t.getScope();\n    Scope.Var var \u003d scope.getVar(varName);\n    if (var \u003d\u003d null) {\n        if (NodeUtil.isAnonymousFunction(parent)) {\n        } else {\n            t.report(n, UNDEFINED_VAR_ERROR, varName);\n            if (sanityCheck) {\n                throw new IllegalStateException(\"Unexpected variable \" + varName);\n            } else {\n                Node nameNode \u003d Node.newString(Token.NAME, varName);\n                getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode));\n                scope.getGlobalScope().declare(varName, nameNode, null, getSynthesizedExternsInput());\n            }\n        }\n        return;\n    }\n    CompilerInput currInput \u003d t.getInput();\n    CompilerInput varInput \u003d var.input;\n    if (currInput \u003d\u003d varInput || currInput \u003d\u003d null || varInput \u003d\u003d null) {\n        return;\n    }\n    JSModule currModule \u003d currInput.getModule();\n    JSModule varModule \u003d varInput.getModule();\n    JSModuleGraph moduleGraph \u003d compiler.getModuleGraph();\n    if (varModule !\u003d currModule \u0026\u0026 varModule !\u003d null \u0026\u0026 currModule !\u003d null) {\n        if (moduleGraph.dependsOn(currModule, varModule)) {\n        } else {\n            if (!sanityCheck \u0026\u0026 scope.isGlobal()) {\n                if (moduleGraph.dependsOn(varModule, currModule)) {\n                    t.report(n, VIOLATED_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                } else {\n                    t.report(n, MISSING_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                }\n            } else {\n                t.report(n, STRICT_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n            }\n        }\n    }\n}",
          "path": "src/com/google/javascript/jscomp/VarCheck.java",
          "functionStartLine": 89,
          "functionName": "visit",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,51 +1,52 @@\n+@Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() !\u003d Token.NAME) {\n         return;\n     }\n     String varName \u003d n.getString();\n     if (varName.isEmpty()) {\n         Preconditions.checkState(NodeUtil.isFunction(parent));\n         if (!NodeUtil.isAnonymousFunction(parent)) {\n             t.report(n, INVALID_FUNCTION_DECL);\n         }\n         return;\n     }\n     Scope scope \u003d t.getScope();\n     Scope.Var var \u003d scope.getVar(varName);\n     if (var \u003d\u003d null) {\n         if (NodeUtil.isAnonymousFunction(parent)) {\n         } else {\n             t.report(n, UNDEFINED_VAR_ERROR, varName);\n             if (sanityCheck) {\n                 throw new IllegalStateException(\"Unexpected variable \" + varName);\n             } else {\n                 Node nameNode \u003d Node.newString(Token.NAME, varName);\n                 getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode));\n                 scope.getGlobalScope().declare(varName, nameNode, null, getSynthesizedExternsInput());\n             }\n         }\n         return;\n     }\n     CompilerInput currInput \u003d t.getInput();\n     CompilerInput varInput \u003d var.input;\n     if (currInput \u003d\u003d varInput || currInput \u003d\u003d null || varInput \u003d\u003d null) {\n         return;\n     }\n     JSModule currModule \u003d currInput.getModule();\n     JSModule varModule \u003d varInput.getModule();\n     JSModuleGraph moduleGraph \u003d compiler.getModuleGraph();\n     if (varModule !\u003d currModule \u0026\u0026 varModule !\u003d null \u0026\u0026 currModule !\u003d null) {\n         if (moduleGraph.dependsOn(currModule, varModule)) {\n         } else {\n             if (!sanityCheck \u0026\u0026 scope.isGlobal()) {\n                 if (moduleGraph.dependsOn(varModule, currModule)) {\n                     t.report(n, VIOLATED_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                 } else {\n                     t.report(n, MISSING_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                 }\n             } else {\n                 t.report(n, STRICT_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "@inheritDoc}\n",
            "newValue": ""
          }
        }
      ]
    },
    "222eafd303155b3eac5cd244584b2cb3c4c11975": {
      "type": "Ybodychange",
      "commitMessage": "tighten up some types. (Nick)\nR\u003dalan\nDELTA\u003d4  (2 added, 0 deleted, 2 changed)\n\nDon\u0027t use NAME for label names, introduce LABEL_NAME. This improves the correctness of the compiler as many passes don\u0027t distinguish between label names and variable names appropriately. (John)\nR\u003drobert\n\nRemove now unneeded checks for label names when inspecting NAME nodes. (John)\nR\u003drobert\n\nTweak code generator to break after blocks for better pretty printing. (John)\nR\u003drobert\nDELTA\u003d196  (160 added, 0 deleted, 36 changed)\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dktmses\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@170 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/5/10, 12:30 PM",
      "commitName": "222eafd303155b3eac5cd244584b2cb3c4c11975",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/1/10, 7:32 PM",
      "commitNameOld": "f01925cbf7a39a885e51865208368e861d25a0c1",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 3.71,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() !\u003d Token.NAME) {\n        return;\n    }\n    String varName \u003d n.getString();\n    if (varName.isEmpty()) {\n        Preconditions.checkState(NodeUtil.isFunction(parent));\n        if (!NodeUtil.isAnonymousFunction(parent)) {\n            t.report(n, INVALID_FUNCTION_DECL);\n        }\n        return;\n    }\n    Scope scope \u003d t.getScope();\n    Scope.Var var \u003d scope.getVar(varName);\n    if (var \u003d\u003d null) {\n        if (NodeUtil.isAnonymousFunction(parent)) {\n        } else {\n            t.report(n, UNDEFINED_VAR_ERROR, varName);\n            if (sanityCheck) {\n                throw new IllegalStateException(\"Unexpected variable \" + varName);\n            } else {\n                Node nameNode \u003d Node.newString(Token.NAME, varName);\n                getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode));\n                scope.getGlobalScope().declare(varName, nameNode, null, getSynthesizedExternsInput());\n            }\n        }\n        return;\n    }\n    CompilerInput currInput \u003d t.getInput();\n    CompilerInput varInput \u003d var.input;\n    if (currInput \u003d\u003d varInput || currInput \u003d\u003d null || varInput \u003d\u003d null) {\n        return;\n    }\n    JSModule currModule \u003d currInput.getModule();\n    JSModule varModule \u003d varInput.getModule();\n    JSModuleGraph moduleGraph \u003d compiler.getModuleGraph();\n    if (varModule !\u003d currModule \u0026\u0026 varModule !\u003d null \u0026\u0026 currModule !\u003d null) {\n        if (moduleGraph.dependsOn(currModule, varModule)) {\n        } else {\n            if (!sanityCheck \u0026\u0026 scope.isGlobal()) {\n                if (moduleGraph.dependsOn(varModule, currModule)) {\n                    t.report(n, VIOLATED_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                } else {\n                    t.report(n, MISSING_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                }\n            } else {\n                t.report(n, STRICT_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/VarCheck.java",
      "functionStartLine": 89,
      "functionName": "visit",
      "functionAnnotation": "",
      "functionDoc": "@inheritDoc}\n",
      "diff": "@@ -1,54 +1,51 @@\n public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() !\u003d Token.NAME) {\n         return;\n     }\n-    if (NodeUtil.isLabelName(n)) {\n-        return;\n-    }\n     String varName \u003d n.getString();\n     if (varName.isEmpty()) {\n         Preconditions.checkState(NodeUtil.isFunction(parent));\n         if (!NodeUtil.isAnonymousFunction(parent)) {\n             t.report(n, INVALID_FUNCTION_DECL);\n         }\n         return;\n     }\n     Scope scope \u003d t.getScope();\n     Scope.Var var \u003d scope.getVar(varName);\n     if (var \u003d\u003d null) {\n         if (NodeUtil.isAnonymousFunction(parent)) {\n         } else {\n             t.report(n, UNDEFINED_VAR_ERROR, varName);\n             if (sanityCheck) {\n                 throw new IllegalStateException(\"Unexpected variable \" + varName);\n             } else {\n                 Node nameNode \u003d Node.newString(Token.NAME, varName);\n                 getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode));\n                 scope.getGlobalScope().declare(varName, nameNode, null, getSynthesizedExternsInput());\n             }\n         }\n         return;\n     }\n     CompilerInput currInput \u003d t.getInput();\n     CompilerInput varInput \u003d var.input;\n     if (currInput \u003d\u003d varInput || currInput \u003d\u003d null || varInput \u003d\u003d null) {\n         return;\n     }\n     JSModule currModule \u003d currInput.getModule();\n     JSModule varModule \u003d varInput.getModule();\n     JSModuleGraph moduleGraph \u003d compiler.getModuleGraph();\n     if (varModule !\u003d currModule \u0026\u0026 varModule !\u003d null \u0026\u0026 currModule !\u003d null) {\n         if (moduleGraph.dependsOn(currModule, varModule)) {\n         } else {\n             if (!sanityCheck \u0026\u0026 scope.isGlobal()) {\n                 if (moduleGraph.dependsOn(varModule, currModule)) {\n                     t.report(n, VIOLATED_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                 } else {\n                     t.report(n, MISSING_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                 }\n             } else {\n                 t.report(n, STRICT_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f01925cbf7a39a885e51865208368e861d25a0c1": {
      "type": "Ybodychange",
      "commitMessage": "Tests for deps generation (Nick)\nR\u003dandrew\n\nFix for decomposing assignment-ops. (john)\nR\u003dalan\nDELTA\u003d159  (127 added, 21 deleted, 11 changed)\n\nRemove unneeded imports. (John)\nR\u003drobert\nDELTA\u003d2  (0 added, 2 deleted, 0 changed)\n\nAutomated rollback of:\nRemove now unneeded checks for label names when inspecting NAME nodes. (Robert)\nR\u003dAlan\nDELTA\u003d6  (4 added, 0 deleted, 2 changed)\n\nAutomated rollback of:\nDon\u0027t use NAME for label names, introduce LABEL_NAME. This improves the correctness of the compiler as many passes don\u0027t distinguish between label names and variable names appropriately. (Robert)\nR\u003dAlan\nDELTA\u003d57  (12 added, 29 deleted, 16 changed)\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dgydkaf\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@167 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/1/10, 7:32 PM",
      "commitName": "f01925cbf7a39a885e51865208368e861d25a0c1",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "3/31/10, 2:45 PM",
      "commitNameOld": "fbf47bd6fe52121c22d9c1fa6764e6686221df99",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 1.2,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() !\u003d Token.NAME) {\n        return;\n    }\n    if (NodeUtil.isLabelName(n)) {\n        return;\n    }\n    String varName \u003d n.getString();\n    if (varName.isEmpty()) {\n        Preconditions.checkState(NodeUtil.isFunction(parent));\n        if (!NodeUtil.isAnonymousFunction(parent)) {\n            t.report(n, INVALID_FUNCTION_DECL);\n        }\n        return;\n    }\n    Scope scope \u003d t.getScope();\n    Scope.Var var \u003d scope.getVar(varName);\n    if (var \u003d\u003d null) {\n        if (NodeUtil.isAnonymousFunction(parent)) {\n        } else {\n            t.report(n, UNDEFINED_VAR_ERROR, varName);\n            if (sanityCheck) {\n                throw new IllegalStateException(\"Unexpected variable \" + varName);\n            } else {\n                Node nameNode \u003d Node.newString(Token.NAME, varName);\n                getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode));\n                scope.getGlobalScope().declare(varName, nameNode, null, getSynthesizedExternsInput());\n            }\n        }\n        return;\n    }\n    CompilerInput currInput \u003d t.getInput();\n    CompilerInput varInput \u003d var.input;\n    if (currInput \u003d\u003d varInput || currInput \u003d\u003d null || varInput \u003d\u003d null) {\n        return;\n    }\n    JSModule currModule \u003d currInput.getModule();\n    JSModule varModule \u003d varInput.getModule();\n    JSModuleGraph moduleGraph \u003d compiler.getModuleGraph();\n    if (varModule !\u003d currModule \u0026\u0026 varModule !\u003d null \u0026\u0026 currModule !\u003d null) {\n        if (moduleGraph.dependsOn(currModule, varModule)) {\n        } else {\n            if (!sanityCheck \u0026\u0026 scope.isGlobal()) {\n                if (moduleGraph.dependsOn(varModule, currModule)) {\n                    t.report(n, VIOLATED_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                } else {\n                    t.report(n, MISSING_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                }\n            } else {\n                t.report(n, STRICT_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/VarCheck.java",
      "functionStartLine": 89,
      "functionName": "visit",
      "functionAnnotation": "",
      "functionDoc": "@inheritDoc}\n",
      "diff": "@@ -1,51 +1,54 @@\n public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() !\u003d Token.NAME) {\n         return;\n     }\n+    if (NodeUtil.isLabelName(n)) {\n+        return;\n+    }\n     String varName \u003d n.getString();\n     if (varName.isEmpty()) {\n         Preconditions.checkState(NodeUtil.isFunction(parent));\n         if (!NodeUtil.isAnonymousFunction(parent)) {\n             t.report(n, INVALID_FUNCTION_DECL);\n         }\n         return;\n     }\n     Scope scope \u003d t.getScope();\n     Scope.Var var \u003d scope.getVar(varName);\n     if (var \u003d\u003d null) {\n         if (NodeUtil.isAnonymousFunction(parent)) {\n         } else {\n             t.report(n, UNDEFINED_VAR_ERROR, varName);\n             if (sanityCheck) {\n                 throw new IllegalStateException(\"Unexpected variable \" + varName);\n             } else {\n                 Node nameNode \u003d Node.newString(Token.NAME, varName);\n                 getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode));\n                 scope.getGlobalScope().declare(varName, nameNode, null, getSynthesizedExternsInput());\n             }\n         }\n         return;\n     }\n     CompilerInput currInput \u003d t.getInput();\n     CompilerInput varInput \u003d var.input;\n     if (currInput \u003d\u003d varInput || currInput \u003d\u003d null || varInput \u003d\u003d null) {\n         return;\n     }\n     JSModule currModule \u003d currInput.getModule();\n     JSModule varModule \u003d varInput.getModule();\n     JSModuleGraph moduleGraph \u003d compiler.getModuleGraph();\n     if (varModule !\u003d currModule \u0026\u0026 varModule !\u003d null \u0026\u0026 currModule !\u003d null) {\n         if (moduleGraph.dependsOn(currModule, varModule)) {\n         } else {\n             if (!sanityCheck \u0026\u0026 scope.isGlobal()) {\n                 if (moduleGraph.dependsOn(varModule, currModule)) {\n                     t.report(n, VIOLATED_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                 } else {\n                     t.report(n, MISSING_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                 }\n             } else {\n                 t.report(n, STRICT_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "fbf47bd6fe52121c22d9c1fa6764e6686221df99": {
      "type": "Ybodychange",
      "commitMessage": "Don\u0027t use NAME for label names, introduce LABEL_NAME. This improves the correctness of the compiler as many passes don\u0027t distinguish between label names and variable names appropriately. (John)\nR\u003drobert\nDELTA\u003d57  (29 added, 12 deleted, 16 changed)\n\nRemove now unneeded checks for label names when inspecting NAME nodes. (John)\nR\u003drobert\nDELTA\u003d6  (0 added, 4 deleted, 2 changed)\n\nBetter message for the \"arguments\" problem until we can fix it. (John)\nR\u003drobert\nDELTA\u003d5  (5 added, 0 deleted, 0 changed)\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dwdxvlt\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@164 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/31/10, 2:45 PM",
      "commitName": "fbf47bd6fe52121c22d9c1fa6764e6686221df99",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "11/30/09, 9:30 AM",
      "commitNameOld": "ffe07f8c307c6b421cead64229eddb3602369f44",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 121.18,
      "commitsBetweenForRepo": 123,
      "commitsBetweenForFile": 1,
      "actualSource": "public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() !\u003d Token.NAME) {\n        return;\n    }\n    String varName \u003d n.getString();\n    if (varName.isEmpty()) {\n        Preconditions.checkState(NodeUtil.isFunction(parent));\n        if (!NodeUtil.isAnonymousFunction(parent)) {\n            t.report(n, INVALID_FUNCTION_DECL);\n        }\n        return;\n    }\n    Scope scope \u003d t.getScope();\n    Scope.Var var \u003d scope.getVar(varName);\n    if (var \u003d\u003d null) {\n        if (NodeUtil.isAnonymousFunction(parent)) {\n        } else {\n            t.report(n, UNDEFINED_VAR_ERROR, varName);\n            if (sanityCheck) {\n                throw new IllegalStateException(\"Unexpected variable \" + varName);\n            } else {\n                Node nameNode \u003d Node.newString(Token.NAME, varName);\n                getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode));\n                scope.getGlobalScope().declare(varName, nameNode, null, getSynthesizedExternsInput());\n            }\n        }\n        return;\n    }\n    CompilerInput currInput \u003d t.getInput();\n    CompilerInput varInput \u003d var.input;\n    if (currInput \u003d\u003d varInput || currInput \u003d\u003d null || varInput \u003d\u003d null) {\n        return;\n    }\n    JSModule currModule \u003d currInput.getModule();\n    JSModule varModule \u003d varInput.getModule();\n    JSModuleGraph moduleGraph \u003d compiler.getModuleGraph();\n    if (varModule !\u003d currModule \u0026\u0026 varModule !\u003d null \u0026\u0026 currModule !\u003d null) {\n        if (moduleGraph.dependsOn(currModule, varModule)) {\n        } else {\n            if (!sanityCheck \u0026\u0026 scope.isGlobal()) {\n                if (moduleGraph.dependsOn(varModule, currModule)) {\n                    t.report(n, VIOLATED_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                } else {\n                    t.report(n, MISSING_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                }\n            } else {\n                t.report(n, STRICT_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/VarCheck.java",
      "functionStartLine": 89,
      "functionName": "visit",
      "functionAnnotation": "",
      "functionDoc": "@inheritDoc}\n",
      "diff": "@@ -1,54 +1,51 @@\n public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() !\u003d Token.NAME) {\n         return;\n     }\n-    if (NodeUtil.isLabelName(n)) {\n-        return;\n-    }\n     String varName \u003d n.getString();\n     if (varName.isEmpty()) {\n         Preconditions.checkState(NodeUtil.isFunction(parent));\n         if (!NodeUtil.isAnonymousFunction(parent)) {\n             t.report(n, INVALID_FUNCTION_DECL);\n         }\n         return;\n     }\n     Scope scope \u003d t.getScope();\n     Scope.Var var \u003d scope.getVar(varName);\n     if (var \u003d\u003d null) {\n         if (NodeUtil.isAnonymousFunction(parent)) {\n         } else {\n             t.report(n, UNDEFINED_VAR_ERROR, varName);\n             if (sanityCheck) {\n                 throw new IllegalStateException(\"Unexpected variable \" + varName);\n             } else {\n                 Node nameNode \u003d Node.newString(Token.NAME, varName);\n                 getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode));\n                 scope.getGlobalScope().declare(varName, nameNode, null, getSynthesizedExternsInput());\n             }\n         }\n         return;\n     }\n     CompilerInput currInput \u003d t.getInput();\n     CompilerInput varInput \u003d var.input;\n     if (currInput \u003d\u003d varInput || currInput \u003d\u003d null || varInput \u003d\u003d null) {\n         return;\n     }\n     JSModule currModule \u003d currInput.getModule();\n     JSModule varModule \u003d varInput.getModule();\n     JSModuleGraph moduleGraph \u003d compiler.getModuleGraph();\n     if (varModule !\u003d currModule \u0026\u0026 varModule !\u003d null \u0026\u0026 currModule !\u003d null) {\n         if (moduleGraph.dependsOn(currModule, varModule)) {\n         } else {\n             if (!sanityCheck \u0026\u0026 scope.isGlobal()) {\n                 if (moduleGraph.dependsOn(varModule, currModule)) {\n                     t.report(n, VIOLATED_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                 } else {\n                     t.report(n, MISSING_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                 }\n             } else {\n                 t.report(n, STRICT_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ffe07f8c307c6b421cead64229eddb3602369f44": {
      "type": "Ybodychange",
      "commitMessage": "Add --define flag to the API.\nRemove the warning for ambiguous function definitions: it\u0027s not yet fully baked.\nFix a bug in data-flow based variable inlining.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@16 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/30/09, 9:30 AM",
      "commitName": "ffe07f8c307c6b421cead64229eddb3602369f44",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/25/09, 6:53 AM",
      "commitNameOld": "3bee5d740c96572faea4b9fb8b632e0e07b13cbb",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 5.11,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() !\u003d Token.NAME) {\n        return;\n    }\n    if (NodeUtil.isLabelName(n)) {\n        return;\n    }\n    String varName \u003d n.getString();\n    if (varName.isEmpty()) {\n        Preconditions.checkState(NodeUtil.isFunction(parent));\n        if (!NodeUtil.isAnonymousFunction(parent)) {\n            t.report(n, INVALID_FUNCTION_DECL);\n        }\n        return;\n    }\n    Scope scope \u003d t.getScope();\n    Scope.Var var \u003d scope.getVar(varName);\n    if (var \u003d\u003d null) {\n        if (NodeUtil.isAnonymousFunction(parent)) {\n        } else {\n            t.report(n, UNDEFINED_VAR_ERROR, varName);\n            if (sanityCheck) {\n                throw new IllegalStateException(\"Unexpected variable \" + varName);\n            } else {\n                Node nameNode \u003d Node.newString(Token.NAME, varName);\n                getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode));\n                scope.getGlobalScope().declare(varName, nameNode, null, getSynthesizedExternsInput());\n            }\n        }\n        return;\n    }\n    CompilerInput currInput \u003d t.getInput();\n    CompilerInput varInput \u003d var.input;\n    if (currInput \u003d\u003d varInput || currInput \u003d\u003d null || varInput \u003d\u003d null) {\n        return;\n    }\n    JSModule currModule \u003d currInput.getModule();\n    JSModule varModule \u003d varInput.getModule();\n    JSModuleGraph moduleGraph \u003d compiler.getModuleGraph();\n    if (varModule !\u003d currModule \u0026\u0026 varModule !\u003d null \u0026\u0026 currModule !\u003d null) {\n        if (moduleGraph.dependsOn(currModule, varModule)) {\n        } else {\n            if (!sanityCheck \u0026\u0026 scope.isGlobal()) {\n                if (moduleGraph.dependsOn(varModule, currModule)) {\n                    t.report(n, VIOLATED_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                } else {\n                    t.report(n, MISSING_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                }\n            } else {\n                t.report(n, STRICT_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/VarCheck.java",
      "functionStartLine": 89,
      "functionName": "visit",
      "functionAnnotation": "",
      "functionDoc": "@inheritDoc}\n",
      "diff": "@@ -1,59 +1,54 @@\n public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() !\u003d Token.NAME) {\n         return;\n     }\n     if (NodeUtil.isLabelName(n)) {\n         return;\n     }\n     String varName \u003d n.getString();\n     if (varName.isEmpty()) {\n         Preconditions.checkState(NodeUtil.isFunction(parent));\n         if (!NodeUtil.isAnonymousFunction(parent)) {\n             t.report(n, INVALID_FUNCTION_DECL);\n         }\n         return;\n     }\n-    if (NodeUtil.isFunctionDeclaration(parent)) {\n-        if (!isHoistedFunction(parent)) {\n-            t.report(n, AMBIGUOUS_FUNCTION_DECL);\n-        }\n-    }\n     Scope scope \u003d t.getScope();\n     Scope.Var var \u003d scope.getVar(varName);\n     if (var \u003d\u003d null) {\n         if (NodeUtil.isAnonymousFunction(parent)) {\n         } else {\n             t.report(n, UNDEFINED_VAR_ERROR, varName);\n             if (sanityCheck) {\n                 throw new IllegalStateException(\"Unexpected variable \" + varName);\n             } else {\n                 Node nameNode \u003d Node.newString(Token.NAME, varName);\n                 getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode));\n                 scope.getGlobalScope().declare(varName, nameNode, null, getSynthesizedExternsInput());\n             }\n         }\n         return;\n     }\n     CompilerInput currInput \u003d t.getInput();\n     CompilerInput varInput \u003d var.input;\n     if (currInput \u003d\u003d varInput || currInput \u003d\u003d null || varInput \u003d\u003d null) {\n         return;\n     }\n     JSModule currModule \u003d currInput.getModule();\n     JSModule varModule \u003d varInput.getModule();\n     JSModuleGraph moduleGraph \u003d compiler.getModuleGraph();\n     if (varModule !\u003d currModule \u0026\u0026 varModule !\u003d null \u0026\u0026 currModule !\u003d null) {\n         if (moduleGraph.dependsOn(currModule, varModule)) {\n         } else {\n             if (!sanityCheck \u0026\u0026 scope.isGlobal()) {\n                 if (moduleGraph.dependsOn(varModule, currModule)) {\n                     t.report(n, VIOLATED_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                 } else {\n                     t.report(n, MISSING_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                 }\n             } else {\n                 t.report(n, STRICT_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3bee5d740c96572faea4b9fb8b632e0e07b13cbb": {
      "type": "Ybodychange",
      "commitMessage": "Add a mechanism for inlining local vars, and turn it on by default.\nWarnings for \"ambiguous\" function definitions.\nRefactoring and renaming of some method names.\nUse \"\u003d\" optionality annotation in externs.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@15 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/25/09, 6:53 AM",
      "commitName": "3bee5d740c96572faea4b9fb8b632e0e07b13cbb",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/10/09, 11:16 AM",
      "commitNameOld": "78995bf9e88599055a8c4165d89c09dc92a44b30",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 14.82,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() !\u003d Token.NAME) {\n        return;\n    }\n    if (NodeUtil.isLabelName(n)) {\n        return;\n    }\n    String varName \u003d n.getString();\n    if (varName.isEmpty()) {\n        Preconditions.checkState(NodeUtil.isFunction(parent));\n        if (!NodeUtil.isAnonymousFunction(parent)) {\n            t.report(n, INVALID_FUNCTION_DECL);\n        }\n        return;\n    }\n    if (NodeUtil.isFunctionDeclaration(parent)) {\n        if (!isHoistedFunction(parent)) {\n            t.report(n, AMBIGUOUS_FUNCTION_DECL);\n        }\n    }\n    Scope scope \u003d t.getScope();\n    Scope.Var var \u003d scope.getVar(varName);\n    if (var \u003d\u003d null) {\n        if (NodeUtil.isAnonymousFunction(parent)) {\n        } else {\n            t.report(n, UNDEFINED_VAR_ERROR, varName);\n            if (sanityCheck) {\n                throw new IllegalStateException(\"Unexpected variable \" + varName);\n            } else {\n                Node nameNode \u003d Node.newString(Token.NAME, varName);\n                getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode));\n                scope.getGlobalScope().declare(varName, nameNode, null, getSynthesizedExternsInput());\n            }\n        }\n        return;\n    }\n    CompilerInput currInput \u003d t.getInput();\n    CompilerInput varInput \u003d var.input;\n    if (currInput \u003d\u003d varInput || currInput \u003d\u003d null || varInput \u003d\u003d null) {\n        return;\n    }\n    JSModule currModule \u003d currInput.getModule();\n    JSModule varModule \u003d varInput.getModule();\n    JSModuleGraph moduleGraph \u003d compiler.getModuleGraph();\n    if (varModule !\u003d currModule \u0026\u0026 varModule !\u003d null \u0026\u0026 currModule !\u003d null) {\n        if (moduleGraph.dependsOn(currModule, varModule)) {\n        } else {\n            if (!sanityCheck \u0026\u0026 scope.isGlobal()) {\n                if (moduleGraph.dependsOn(varModule, currModule)) {\n                    t.report(n, VIOLATED_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                } else {\n                    t.report(n, MISSING_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                }\n            } else {\n                t.report(n, STRICT_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/VarCheck.java",
      "functionStartLine": 94,
      "functionName": "visit",
      "functionAnnotation": "",
      "functionDoc": "@inheritDoc}\n",
      "diff": "@@ -1,54 +1,59 @@\n public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() !\u003d Token.NAME) {\n         return;\n     }\n     if (NodeUtil.isLabelName(n)) {\n         return;\n     }\n     String varName \u003d n.getString();\n     if (varName.isEmpty()) {\n         Preconditions.checkState(NodeUtil.isFunction(parent));\n         if (!NodeUtil.isAnonymousFunction(parent)) {\n             t.report(n, INVALID_FUNCTION_DECL);\n         }\n         return;\n     }\n+    if (NodeUtil.isFunctionDeclaration(parent)) {\n+        if (!isHoistedFunction(parent)) {\n+            t.report(n, AMBIGUOUS_FUNCTION_DECL);\n+        }\n+    }\n     Scope scope \u003d t.getScope();\n     Scope.Var var \u003d scope.getVar(varName);\n     if (var \u003d\u003d null) {\n         if (NodeUtil.isAnonymousFunction(parent)) {\n         } else {\n             t.report(n, UNDEFINED_VAR_ERROR, varName);\n             if (sanityCheck) {\n                 throw new IllegalStateException(\"Unexpected variable \" + varName);\n             } else {\n                 Node nameNode \u003d Node.newString(Token.NAME, varName);\n                 getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode));\n                 scope.getGlobalScope().declare(varName, nameNode, null, getSynthesizedExternsInput());\n             }\n         }\n         return;\n     }\n     CompilerInput currInput \u003d t.getInput();\n     CompilerInput varInput \u003d var.input;\n     if (currInput \u003d\u003d varInput || currInput \u003d\u003d null || varInput \u003d\u003d null) {\n         return;\n     }\n     JSModule currModule \u003d currInput.getModule();\n     JSModule varModule \u003d varInput.getModule();\n     JSModuleGraph moduleGraph \u003d compiler.getModuleGraph();\n     if (varModule !\u003d currModule \u0026\u0026 varModule !\u003d null \u0026\u0026 currModule !\u003d null) {\n         if (moduleGraph.dependsOn(currModule, varModule)) {\n         } else {\n             if (!sanityCheck \u0026\u0026 scope.isGlobal()) {\n                 if (moduleGraph.dependsOn(varModule, currModule)) {\n                     t.report(n, VIOLATED_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                 } else {\n                     t.report(n, MISSING_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                 }\n             } else {\n                 t.report(n, STRICT_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "78995bf9e88599055a8c4165d89c09dc92a44b30": {
      "type": "Ybodychange",
      "commitMessage": "Fix synthesis of vars in DEFAULT mode.\nBetter variable inlining\nBetter function inlining\nAssorted bug fixes\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@6 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/10/09, 11:16 AM",
      "commitName": "78995bf9e88599055a8c4165d89c09dc92a44b30",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/6/09, 5:24 PM",
      "commitNameOld": "0b7eccf2fd3a9293d7b513fbb766d7bc06abd7e0",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 3.74,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() !\u003d Token.NAME) {\n        return;\n    }\n    if (NodeUtil.isLabelName(n)) {\n        return;\n    }\n    String varName \u003d n.getString();\n    if (varName.isEmpty()) {\n        Preconditions.checkState(NodeUtil.isFunction(parent));\n        if (!NodeUtil.isAnonymousFunction(parent)) {\n            t.report(n, INVALID_FUNCTION_DECL);\n        }\n        return;\n    }\n    Scope scope \u003d t.getScope();\n    Scope.Var var \u003d scope.getVar(varName);\n    if (var \u003d\u003d null) {\n        if (NodeUtil.isAnonymousFunction(parent)) {\n        } else {\n            t.report(n, UNDEFINED_VAR_ERROR, varName);\n            if (sanityCheck) {\n                throw new IllegalStateException(\"Unexpected variable \" + varName);\n            } else {\n                Node nameNode \u003d Node.newString(Token.NAME, varName);\n                getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode));\n                scope.getGlobalScope().declare(varName, nameNode, null, getSynthesizedExternsInput());\n            }\n        }\n        return;\n    }\n    CompilerInput currInput \u003d t.getInput();\n    CompilerInput varInput \u003d var.input;\n    if (currInput \u003d\u003d varInput || currInput \u003d\u003d null || varInput \u003d\u003d null) {\n        return;\n    }\n    JSModule currModule \u003d currInput.getModule();\n    JSModule varModule \u003d varInput.getModule();\n    JSModuleGraph moduleGraph \u003d compiler.getModuleGraph();\n    if (varModule !\u003d currModule \u0026\u0026 varModule !\u003d null \u0026\u0026 currModule !\u003d null) {\n        if (moduleGraph.dependsOn(currModule, varModule)) {\n        } else {\n            if (!sanityCheck \u0026\u0026 scope.isGlobal()) {\n                if (moduleGraph.dependsOn(varModule, currModule)) {\n                    t.report(n, VIOLATED_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                } else {\n                    t.report(n, MISSING_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                }\n            } else {\n                t.report(n, STRICT_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/VarCheck.java",
      "functionStartLine": 89,
      "functionName": "visit",
      "functionAnnotation": "",
      "functionDoc": "@inheritDoc}\n",
      "diff": "@@ -1,54 +1,54 @@\n public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() !\u003d Token.NAME) {\n         return;\n     }\n     if (NodeUtil.isLabelName(n)) {\n         return;\n     }\n     String varName \u003d n.getString();\n     if (varName.isEmpty()) {\n         Preconditions.checkState(NodeUtil.isFunction(parent));\n         if (!NodeUtil.isAnonymousFunction(parent)) {\n             t.report(n, INVALID_FUNCTION_DECL);\n         }\n         return;\n     }\n     Scope scope \u003d t.getScope();\n     Scope.Var var \u003d scope.getVar(varName);\n     if (var \u003d\u003d null) {\n         if (NodeUtil.isAnonymousFunction(parent)) {\n         } else {\n             t.report(n, UNDEFINED_VAR_ERROR, varName);\n             if (sanityCheck) {\n                 throw new IllegalStateException(\"Unexpected variable \" + varName);\n             } else {\n                 Node nameNode \u003d Node.newString(Token.NAME, varName);\n                 getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode));\n-                scope.declare(varName, nameNode, null, getSynthesizedExternsInput());\n+                scope.getGlobalScope().declare(varName, nameNode, null, getSynthesizedExternsInput());\n             }\n         }\n         return;\n     }\n     CompilerInput currInput \u003d t.getInput();\n     CompilerInput varInput \u003d var.input;\n     if (currInput \u003d\u003d varInput || currInput \u003d\u003d null || varInput \u003d\u003d null) {\n         return;\n     }\n     JSModule currModule \u003d currInput.getModule();\n     JSModule varModule \u003d varInput.getModule();\n     JSModuleGraph moduleGraph \u003d compiler.getModuleGraph();\n     if (varModule !\u003d currModule \u0026\u0026 varModule !\u003d null \u0026\u0026 currModule !\u003d null) {\n         if (moduleGraph.dependsOn(currModule, varModule)) {\n         } else {\n             if (!sanityCheck \u0026\u0026 scope.isGlobal()) {\n                 if (moduleGraph.dependsOn(varModule, currModule)) {\n                     t.report(n, VIOLATED_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                 } else {\n                     t.report(n, MISSING_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                 }\n             } else {\n                 t.report(n, STRICT_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0b7eccf2fd3a9293d7b513fbb766d7bc06abd7e0": {
      "type": "Ybodychange",
      "commitMessage": "A bunch of bug fixes\nAdded the --warning_level\u003d{QUIET|DEFAULT|VERBOSE} flag,\nto match the webservice API\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@3 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/6/09, 5:24 PM",
      "commitName": "0b7eccf2fd3a9293d7b513fbb766d7bc06abd7e0",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/3/09, 3:51 PM",
      "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 3.06,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() !\u003d Token.NAME) {\n        return;\n    }\n    if (NodeUtil.isLabelName(n)) {\n        return;\n    }\n    String varName \u003d n.getString();\n    if (varName.isEmpty()) {\n        Preconditions.checkState(NodeUtil.isFunction(parent));\n        if (!NodeUtil.isAnonymousFunction(parent)) {\n            t.report(n, INVALID_FUNCTION_DECL);\n        }\n        return;\n    }\n    Scope scope \u003d t.getScope();\n    Scope.Var var \u003d scope.getVar(varName);\n    if (var \u003d\u003d null) {\n        if (NodeUtil.isAnonymousFunction(parent)) {\n        } else {\n            t.report(n, UNDEFINED_VAR_ERROR, varName);\n            if (sanityCheck) {\n                throw new IllegalStateException(\"Unexpected variable \" + varName);\n            } else {\n                Node nameNode \u003d Node.newString(Token.NAME, varName);\n                getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode));\n                scope.declare(varName, nameNode, null, getSynthesizedExternsInput());\n            }\n        }\n        return;\n    }\n    CompilerInput currInput \u003d t.getInput();\n    CompilerInput varInput \u003d var.input;\n    if (currInput \u003d\u003d varInput || currInput \u003d\u003d null || varInput \u003d\u003d null) {\n        return;\n    }\n    JSModule currModule \u003d currInput.getModule();\n    JSModule varModule \u003d varInput.getModule();\n    JSModuleGraph moduleGraph \u003d compiler.getModuleGraph();\n    if (varModule !\u003d currModule \u0026\u0026 varModule !\u003d null \u0026\u0026 currModule !\u003d null) {\n        if (moduleGraph.dependsOn(currModule, varModule)) {\n        } else {\n            if (!sanityCheck \u0026\u0026 scope.isGlobal()) {\n                if (moduleGraph.dependsOn(varModule, currModule)) {\n                    t.report(n, VIOLATED_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                } else {\n                    t.report(n, MISSING_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                }\n            } else {\n                t.report(n, STRICT_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/VarCheck.java",
      "functionStartLine": 89,
      "functionName": "visit",
      "functionAnnotation": "",
      "functionDoc": "@inheritDoc}\n",
      "diff": "@@ -1,50 +1,54 @@\n public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() !\u003d Token.NAME) {\n         return;\n     }\n     if (NodeUtil.isLabelName(n)) {\n         return;\n     }\n     String varName \u003d n.getString();\n     if (varName.isEmpty()) {\n         Preconditions.checkState(NodeUtil.isFunction(parent));\n         if (!NodeUtil.isAnonymousFunction(parent)) {\n             t.report(n, INVALID_FUNCTION_DECL);\n         }\n         return;\n     }\n     Scope scope \u003d t.getScope();\n     Scope.Var var \u003d scope.getVar(varName);\n     if (var \u003d\u003d null) {\n         if (NodeUtil.isAnonymousFunction(parent)) {\n         } else {\n             t.report(n, UNDEFINED_VAR_ERROR, varName);\n-            Node nameNode \u003d Node.newString(Token.NAME, varName);\n-            getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode));\n-            scope.declare(varName, nameNode, null, getSynthesizedExternsInput());\n+            if (sanityCheck) {\n+                throw new IllegalStateException(\"Unexpected variable \" + varName);\n+            } else {\n+                Node nameNode \u003d Node.newString(Token.NAME, varName);\n+                getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode));\n+                scope.declare(varName, nameNode, null, getSynthesizedExternsInput());\n+            }\n         }\n         return;\n     }\n     CompilerInput currInput \u003d t.getInput();\n     CompilerInput varInput \u003d var.input;\n     if (currInput \u003d\u003d varInput || currInput \u003d\u003d null || varInput \u003d\u003d null) {\n         return;\n     }\n     JSModule currModule \u003d currInput.getModule();\n     JSModule varModule \u003d varInput.getModule();\n     JSModuleGraph moduleGraph \u003d compiler.getModuleGraph();\n     if (varModule !\u003d currModule \u0026\u0026 varModule !\u003d null \u0026\u0026 currModule !\u003d null) {\n         if (moduleGraph.dependsOn(currModule, varModule)) {\n         } else {\n-            if (nonStrictModuleChecks \u0026\u0026 scope.isGlobal()) {\n+            if (!sanityCheck \u0026\u0026 scope.isGlobal()) {\n                 if (moduleGraph.dependsOn(varModule, currModule)) {\n                     t.report(n, VIOLATED_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                 } else {\n                     t.report(n, MISSING_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                 }\n             } else {\n                 t.report(n, STRICT_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,50 @@\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n.getType() !\u003d Token.NAME) {\n+        return;\n+    }\n+    if (NodeUtil.isLabelName(n)) {\n+        return;\n+    }\n+    String varName \u003d n.getString();\n+    if (varName.isEmpty()) {\n+        Preconditions.checkState(NodeUtil.isFunction(parent));\n+        if (!NodeUtil.isAnonymousFunction(parent)) {\n+            t.report(n, INVALID_FUNCTION_DECL);\n+        }\n+        return;\n+    }\n+    Scope scope \u003d t.getScope();\n+    Scope.Var var \u003d scope.getVar(varName);\n+    if (var \u003d\u003d null) {\n+        if (NodeUtil.isAnonymousFunction(parent)) {\n+        } else {\n+            t.report(n, UNDEFINED_VAR_ERROR, varName);\n+            Node nameNode \u003d Node.newString(Token.NAME, varName);\n+            getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode));\n+            scope.declare(varName, nameNode, null, getSynthesizedExternsInput());\n+        }\n+        return;\n+    }\n+    CompilerInput currInput \u003d t.getInput();\n+    CompilerInput varInput \u003d var.input;\n+    if (currInput \u003d\u003d varInput || currInput \u003d\u003d null || varInput \u003d\u003d null) {\n+        return;\n+    }\n+    JSModule currModule \u003d currInput.getModule();\n+    JSModule varModule \u003d varInput.getModule();\n+    JSModuleGraph moduleGraph \u003d compiler.getModuleGraph();\n+    if (varModule !\u003d currModule \u0026\u0026 varModule !\u003d null \u0026\u0026 currModule !\u003d null) {\n+        if (moduleGraph.dependsOn(currModule, varModule)) {\n+        } else {\n+            if (nonStrictModuleChecks \u0026\u0026 scope.isGlobal()) {\n+                if (moduleGraph.dependsOn(varModule, currModule)) {\n+                    t.report(n, VIOLATED_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n+                } else {\n+                    t.report(n, MISSING_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n+                }\n+            } else {\n+                t.report(n, STRICT_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() !\u003d Token.NAME) {\n        return;\n    }\n    if (NodeUtil.isLabelName(n)) {\n        return;\n    }\n    String varName \u003d n.getString();\n    if (varName.isEmpty()) {\n        Preconditions.checkState(NodeUtil.isFunction(parent));\n        if (!NodeUtil.isAnonymousFunction(parent)) {\n            t.report(n, INVALID_FUNCTION_DECL);\n        }\n        return;\n    }\n    Scope scope \u003d t.getScope();\n    Scope.Var var \u003d scope.getVar(varName);\n    if (var \u003d\u003d null) {\n        if (NodeUtil.isAnonymousFunction(parent)) {\n        } else {\n            t.report(n, UNDEFINED_VAR_ERROR, varName);\n            Node nameNode \u003d Node.newString(Token.NAME, varName);\n            getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode));\n            scope.declare(varName, nameNode, null, getSynthesizedExternsInput());\n        }\n        return;\n    }\n    CompilerInput currInput \u003d t.getInput();\n    CompilerInput varInput \u003d var.input;\n    if (currInput \u003d\u003d varInput || currInput \u003d\u003d null || varInput \u003d\u003d null) {\n        return;\n    }\n    JSModule currModule \u003d currInput.getModule();\n    JSModule varModule \u003d varInput.getModule();\n    JSModuleGraph moduleGraph \u003d compiler.getModuleGraph();\n    if (varModule !\u003d currModule \u0026\u0026 varModule !\u003d null \u0026\u0026 currModule !\u003d null) {\n        if (moduleGraph.dependsOn(currModule, varModule)) {\n        } else {\n            if (nonStrictModuleChecks \u0026\u0026 scope.isGlobal()) {\n                if (moduleGraph.dependsOn(varModule, currModule)) {\n                    t.report(n, VIOLATED_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                } else {\n                    t.report(n, MISSING_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n                }\n            } else {\n                t.report(n, STRICT_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/VarCheck.java",
      "functionStartLine": 88,
      "functionName": "visit",
      "functionAnnotation": "",
      "functionDoc": "@inheritDoc}\n"
    }
  }
}