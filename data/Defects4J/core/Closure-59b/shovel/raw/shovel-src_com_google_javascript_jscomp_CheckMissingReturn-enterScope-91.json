{
  "origin": "codeshovel",
  "repositoryName": "Closure-59b",
  "repositoryPath": "/tmp/Closure-59b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CheckMissingReturn.java",
  "functionName": "enterScope",
  "functionId": "enterScope___t-NodeTraversal",
  "sourceFilePath": "src/com/google/javascript/jscomp/CheckMissingReturn.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 91,
  "functionEndLine": 113,
  "numCommitsSeen": 12,
  "timeTaken": 397,
  "changeHistory": [
    "dff6e0114f19c20aeb63393d67aa0880ff5745b5",
    "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "dff6e0114f19c20aeb63393d67aa0880ff5745b5": "Ybodychange",
    "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "dff6e0114f19c20aeb63393d67aa0880ff5745b5": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/06/25 by johnlenz\n\n\tPreserve blocks around problematic labelled statements.\n\tFixes issue 190\n\n\tR\u003dnicksantos\n\tDELTA\u003d95  (86 added, 2 deleted, 7 changed)\n\nChange on 2010/06/25 by nicksantos\n\n\tmore descriptive error messaging for CheckReturns.\n\n\n\tR\u003dacleung\n\tDELTA\u003d59  (21 added, 2 deleted, 36 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d42001\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@255 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/25/10, 4:56 PM",
      "commitName": "dff6e0114f19c20aeb63393d67aa0880ff5745b5",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "6/16/10, 12:33 PM",
      "commitNameOld": "e33e925eea3a8e4de958864e531e1adc4da62e18",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 9.18,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void enterScope(NodeTraversal t) {\n    JSType returnType \u003d explicitReturnExpected(t.getScopeRoot());\n    if (returnType \u003d\u003d null) {\n        return;\n    }\n    if (fastAllPathsReturnCheck(t.getControlFlowGraph())) {\n        return;\n    }\n    CheckPathsBetweenNodes\u003cNode, ControlFlowGraph.Branch\u003e test \u003d new CheckPathsBetweenNodes\u003cNode, ControlFlowGraph.Branch\u003e(t.getControlFlowGraph(), t.getControlFlowGraph().getEntry(), t.getControlFlowGraph().getImplicitReturn(), IS_RETURN, GOES_THROUGH_TRUE_CONDITION_PREDICATE);\n    if (!test.allPathsSatisfyPredicate()) {\n        compiler.report(t.makeError(t.getScopeRoot(), level, MISSING_RETURN_STATEMENT, returnType.toString()));\n    }\n}",
      "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java",
      "functionStartLine": 92,
      "functionName": "enterScope",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,13 +1,14 @@\n @Override\n public void enterScope(NodeTraversal t) {\n-    if (!explicitReturnExpected(t.getScopeRoot())) {\n+    JSType returnType \u003d explicitReturnExpected(t.getScopeRoot());\n+    if (returnType \u003d\u003d null) {\n         return;\n     }\n     if (fastAllPathsReturnCheck(t.getControlFlowGraph())) {\n         return;\n     }\n     CheckPathsBetweenNodes\u003cNode, ControlFlowGraph.Branch\u003e test \u003d new CheckPathsBetweenNodes\u003cNode, ControlFlowGraph.Branch\u003e(t.getControlFlowGraph(), t.getControlFlowGraph().getEntry(), t.getControlFlowGraph().getImplicitReturn(), IS_RETURN, GOES_THROUGH_TRUE_CONDITION_PREDICATE);\n     if (!test.allPathsSatisfyPredicate()) {\n-        compiler.report(t.makeError(t.getScopeRoot(), level, MISSING_RETURN_STATEMENT));\n+        compiler.report(t.makeError(t.getScopeRoot(), level, MISSING_RETURN_STATEMENT, returnType.toString()));\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4": {
      "type": "Ybodychange",
      "commitMessage": "Remove circular dependency between error-reporting and the rest\nof the compiler. (Nick)\nR\u003dalan\nDELTA\u003d152  (27 added, 28 deleted, 97 changed)\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@159 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/29/10, 7:04 AM",
      "commitName": "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "11/3/09, 3:51 PM",
      "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 145.59,
      "commitsBetweenForRepo": 132,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void enterScope(NodeTraversal t) {\n    if (!explicitReturnExpected(t.getScopeRoot())) {\n        return;\n    }\n    if (fastAllPathsReturnCheck(t.getControlFlowGraph())) {\n        return;\n    }\n    CheckPathsBetweenNodes\u003cNode, ControlFlowGraph.Branch\u003e test \u003d new CheckPathsBetweenNodes\u003cNode, ControlFlowGraph.Branch\u003e(t.getControlFlowGraph(), t.getControlFlowGraph().getEntry(), t.getControlFlowGraph().getImplicitReturn(), IS_RETURN, GOES_THROUGH_TRUE_CONDITION_PREDICATE);\n    if (!test.allPathsSatisfyPredicate()) {\n        compiler.report(t.makeError(t.getScopeRoot(), level, MISSING_RETURN_STATEMENT));\n    }\n}",
      "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java",
      "functionStartLine": 89,
      "functionName": "enterScope",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,13 +1,13 @@\n @Override\n public void enterScope(NodeTraversal t) {\n     if (!explicitReturnExpected(t.getScopeRoot())) {\n         return;\n     }\n     if (fastAllPathsReturnCheck(t.getControlFlowGraph())) {\n         return;\n     }\n     CheckPathsBetweenNodes\u003cNode, ControlFlowGraph.Branch\u003e test \u003d new CheckPathsBetweenNodes\u003cNode, ControlFlowGraph.Branch\u003e(t.getControlFlowGraph(), t.getControlFlowGraph().getEntry(), t.getControlFlowGraph().getImplicitReturn(), IS_RETURN, GOES_THROUGH_TRUE_CONDITION_PREDICATE);\n     if (!test.allPathsSatisfyPredicate()) {\n-        compiler.report(JSError.make(t, t.getScopeRoot(), level, MISSING_RETURN_STATEMENT));\n+        compiler.report(t.makeError(t.getScopeRoot(), level, MISSING_RETURN_STATEMENT));\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,13 @@\n+@Override\n+public void enterScope(NodeTraversal t) {\n+    if (!explicitReturnExpected(t.getScopeRoot())) {\n+        return;\n+    }\n+    if (fastAllPathsReturnCheck(t.getControlFlowGraph())) {\n+        return;\n+    }\n+    CheckPathsBetweenNodes\u003cNode, ControlFlowGraph.Branch\u003e test \u003d new CheckPathsBetweenNodes\u003cNode, ControlFlowGraph.Branch\u003e(t.getControlFlowGraph(), t.getControlFlowGraph().getEntry(), t.getControlFlowGraph().getImplicitReturn(), IS_RETURN, GOES_THROUGH_TRUE_CONDITION_PREDICATE);\n+    if (!test.allPathsSatisfyPredicate()) {\n+        compiler.report(JSError.make(t, t.getScopeRoot(), level, MISSING_RETURN_STATEMENT));\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic void enterScope(NodeTraversal t) {\n    if (!explicitReturnExpected(t.getScopeRoot())) {\n        return;\n    }\n    if (fastAllPathsReturnCheck(t.getControlFlowGraph())) {\n        return;\n    }\n    CheckPathsBetweenNodes\u003cNode, ControlFlowGraph.Branch\u003e test \u003d new CheckPathsBetweenNodes\u003cNode, ControlFlowGraph.Branch\u003e(t.getControlFlowGraph(), t.getControlFlowGraph().getEntry(), t.getControlFlowGraph().getImplicitReturn(), IS_RETURN, GOES_THROUGH_TRUE_CONDITION_PREDICATE);\n    if (!test.allPathsSatisfyPredicate()) {\n        compiler.report(JSError.make(t, t.getScopeRoot(), level, MISSING_RETURN_STATEMENT));\n    }\n}",
      "path": "src/com/google/javascript/jscomp/CheckMissingReturn.java",
      "functionStartLine": 89,
      "functionName": "enterScope",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}