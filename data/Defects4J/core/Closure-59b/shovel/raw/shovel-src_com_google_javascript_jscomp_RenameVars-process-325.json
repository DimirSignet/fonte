{
  "origin": "codeshovel",
  "repositoryName": "Closure-59b",
  "repositoryPath": "/tmp/Closure-59b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RenameVars.java",
  "functionName": "process",
  "functionId": "process___externs-Node__root-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/RenameVars.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 325,
  "functionEndLine": 384,
  "numCommitsSeen": 20,
  "timeTaken": 888,
  "changeHistory": [
    "b6e3f5c01de00915df7682dba4e9a7f733630d34",
    "55d1c8181d46a0b5e5a121db314145be37a10934",
    "5da32cba7b68d69acfc535f57f21d652475d256f",
    "a478193982ce1fb9271e3f7ebcc1369913c9a859",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "b6e3f5c01de00915df7682dba4e9a7f733630d34": "Ybodychange",
    "55d1c8181d46a0b5e5a121db314145be37a10934": "Ybodychange",
    "5da32cba7b68d69acfc535f57f21d652475d256f": "Ymultichange(Yannotationchange,Ydocchange)",
    "a478193982ce1fb9271e3f7ebcc1369913c9a859": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b6e3f5c01de00915df7682dba4e9a7f733630d34": {
      "type": "Ybodychange",
      "commitMessage": "\nShadows variables\n\nR\u003djohnlenz,nicksantos\nDELTA\u003d580  (531 added, 7 deleted, 42 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d639\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@808 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/22/11, 2:58 PM",
      "commitName": "b6e3f5c01de00915df7682dba4e9a7f733630d34",
      "commitAuthor": "acleung@google.com",
      "commitDateOld": "2/14/11, 1:50 PM",
      "commitNameOld": "95ac6a7f06053f4a85286e30394836d62d141518",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 8.05,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void process(Node externs, Node root) {\n    assignmentLog \u003d new StringBuilder();\n    NodeTraversal.traverse(compiler, externs, new ProcessVars(true));\n    NodeTraversal.traverse(compiler, root, new ProcessVars(false));\n    reservedNames.addAll(externNames);\n    SortedSet\u003cAssignment\u003e varsByFrequency \u003d new TreeSet\u003cAssignment\u003e(FREQUENCY_COMPARATOR);\n    varsByFrequency.addAll(assignments.values());\n    if (shouldShadow) {\n        new ShadowVariables(compiler, assignments, varsByFrequency, pseudoNameMap).process(externs, root);\n    }\n    if (prevUsedRenameMap !\u003d null) {\n        reusePreviouslyUsedVariableMap();\n    }\n    assignNames(varsByFrequency);\n    boolean changed \u003d false;\n    for (Node n : globalNameNodes) {\n        String newName \u003d getNewGlobalName(n);\n        if (newName !\u003d null) {\n            n.setString(newName);\n            changed \u003d true;\n        }\n    }\n    int count \u003d 0;\n    for (Node n : localNameNodes) {\n        String newName \u003d getNewLocalName(n);\n        if (newName !\u003d null) {\n            n.setString(newName);\n            changed \u003d true;\n        }\n        count++;\n    }\n    if (changed) {\n        compiler.reportCodeChange();\n    }\n    compiler.addToDebugLog(\"JS var assignments:\\n\" + assignmentLog);\n    assignmentLog \u003d null;\n}",
      "path": "src/com/google/javascript/jscomp/RenameVars.java",
      "functionStartLine": 328,
      "functionName": "process",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,35 +1,38 @@\n @Override\n public void process(Node externs, Node root) {\n     assignmentLog \u003d new StringBuilder();\n     NodeTraversal.traverse(compiler, externs, new ProcessVars(true));\n     NodeTraversal.traverse(compiler, root, new ProcessVars(false));\n     reservedNames.addAll(externNames);\n     SortedSet\u003cAssignment\u003e varsByFrequency \u003d new TreeSet\u003cAssignment\u003e(FREQUENCY_COMPARATOR);\n     varsByFrequency.addAll(assignments.values());\n+    if (shouldShadow) {\n+        new ShadowVariables(compiler, assignments, varsByFrequency, pseudoNameMap).process(externs, root);\n+    }\n     if (prevUsedRenameMap !\u003d null) {\n         reusePreviouslyUsedVariableMap();\n     }\n     assignNames(varsByFrequency);\n     boolean changed \u003d false;\n     for (Node n : globalNameNodes) {\n         String newName \u003d getNewGlobalName(n);\n         if (newName !\u003d null) {\n             n.setString(newName);\n             changed \u003d true;\n         }\n     }\n     int count \u003d 0;\n     for (Node n : localNameNodes) {\n         String newName \u003d getNewLocalName(n);\n         if (newName !\u003d null) {\n             n.setString(newName);\n             changed \u003d true;\n         }\n         count++;\n     }\n     if (changed) {\n         compiler.reportCodeChange();\n     }\n     compiler.addToDebugLog(\"JS var assignments:\\n\" + assignmentLog);\n     assignmentLog \u003d null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "55d1c8181d46a0b5e5a121db314145be37a10934": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/05/14 by nick\n\n        update maps api v3. fixes issue 153.\n        contributed by chad killingsworth\n\n        R\u003dalan\n        DELTA\u003d403  (309 added, 71 deleted, 23 changed)\n\nChange on 2010/05/14 by alan\n\n        Temporary rename variables to L_0 when gathering name usages.\n\n        R\u003dnick\n        DELTA\u003d46  (27 added, 5 deleted, 14 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1003\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@213 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/14/10, 7:02 PM",
      "commitName": "55d1c8181d46a0b5e5a121db314145be37a10934",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/23/10, 11:31 AM",
      "commitNameOld": "ebb59a97610015bc41bda7f458dd1428a3a3e335",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 21.31,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void process(Node externs, Node root) {\n    assignmentLog \u003d new StringBuilder();\n    NodeTraversal.traverse(compiler, externs, new ProcessVars(true));\n    NodeTraversal.traverse(compiler, root, new ProcessVars(false));\n    reservedNames.addAll(externNames);\n    SortedSet\u003cAssignment\u003e varsByFrequency \u003d new TreeSet\u003cAssignment\u003e(FREQUENCY_COMPARATOR);\n    varsByFrequency.addAll(assignments.values());\n    if (prevUsedRenameMap !\u003d null) {\n        reusePreviouslyUsedVariableMap();\n    }\n    assignNames(varsByFrequency);\n    boolean changed \u003d false;\n    for (Node n : globalNameNodes) {\n        String newName \u003d getNewGlobalName(n);\n        if (newName !\u003d null) {\n            n.setString(newName);\n            changed \u003d true;\n        }\n    }\n    int count \u003d 0;\n    for (Node n : localNameNodes) {\n        String newName \u003d getNewLocalName(n);\n        if (newName !\u003d null) {\n            n.setString(newName);\n            changed \u003d true;\n        }\n        count++;\n    }\n    if (changed) {\n        compiler.reportCodeChange();\n    }\n    compiler.addToDebugLog(\"JS var assignments:\\n\" + assignmentLog);\n    assignmentLog \u003d null;\n}",
      "path": "src/com/google/javascript/jscomp/RenameVars.java",
      "functionStartLine": 296,
      "functionName": "process",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,35 +1,35 @@\n @Override\n public void process(Node externs, Node root) {\n     assignmentLog \u003d new StringBuilder();\n     NodeTraversal.traverse(compiler, externs, new ProcessVars(true));\n     NodeTraversal.traverse(compiler, root, new ProcessVars(false));\n     reservedNames.addAll(externNames);\n     SortedSet\u003cAssignment\u003e varsByFrequency \u003d new TreeSet\u003cAssignment\u003e(FREQUENCY_COMPARATOR);\n     varsByFrequency.addAll(assignments.values());\n     if (prevUsedRenameMap !\u003d null) {\n         reusePreviouslyUsedVariableMap();\n     }\n     assignNames(varsByFrequency);\n     boolean changed \u003d false;\n     for (Node n : globalNameNodes) {\n         String newName \u003d getNewGlobalName(n);\n         if (newName !\u003d null) {\n             n.setString(newName);\n             changed \u003d true;\n         }\n     }\n     int count \u003d 0;\n     for (Node n : localNameNodes) {\n-        String newName \u003d getNewLocalName(n, count);\n+        String newName \u003d getNewLocalName(n);\n         if (newName !\u003d null) {\n             n.setString(newName);\n             changed \u003d true;\n         }\n         count++;\n     }\n     if (changed) {\n         compiler.reportCodeChange();\n     }\n     compiler.addToDebugLog(\"JS var assignments:\\n\" + assignmentLog);\n     assignmentLog \u003d null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5da32cba7b68d69acfc535f57f21d652475d256f": {
      "type": "Ymultichange(Yannotationchange,Ydocchange)",
      "commitMessage": "\nChange on 2010/04/19 by anatol\n\n        Replace {@inheritDoc} javadoc annotation with @Override.\n        @Override is better as it implies documentation inheritance plus checks\n        that the parent method exists at the compile-time.\n\n        R\u003dnick\n        DELTA\u003d137  (0 added, 70 deleted, 67 changed)\n\nChange on 2010/04/19 by nick\n\n        Change how we resolve types.\n        Instead of leaving shell proxy types around, unbox the proxy types.\n\n        R\u003dandrew,john\n        DELTA\u003d103  (84 added, 5 deleted, 14 changed)\n\nChange on 2010/04/19 by acleung\n\n        Enable Flow Sensitive Inlining by default.\n\n        R\u003djohn\n        DELTA\u003d1  (0 added, 0 deleted, 1 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dpqvliw\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@191 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/19/10, 4:28 PM",
      "commitName": "5da32cba7b68d69acfc535f57f21d652475d256f",
      "commitAuthor": "Nicholas.J.Santos",
      "subchanges": [
        {
          "type": "Yannotationchange",
          "commitMessage": "\nChange on 2010/04/19 by anatol\n\n        Replace {@inheritDoc} javadoc annotation with @Override.\n        @Override is better as it implies documentation inheritance plus checks\n        that the parent method exists at the compile-time.\n\n        R\u003dnick\n        DELTA\u003d137  (0 added, 70 deleted, 67 changed)\n\nChange on 2010/04/19 by nick\n\n        Change how we resolve types.\n        Instead of leaving shell proxy types around, unbox the proxy types.\n\n        R\u003dandrew,john\n        DELTA\u003d103  (84 added, 5 deleted, 14 changed)\n\nChange on 2010/04/19 by acleung\n\n        Enable Flow Sensitive Inlining by default.\n\n        R\u003djohn\n        DELTA\u003d1  (0 added, 0 deleted, 1 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dpqvliw\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@191 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "4/19/10, 4:28 PM",
          "commitName": "5da32cba7b68d69acfc535f57f21d652475d256f",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "3/16/10, 3:53 PM",
          "commitNameOld": "938f48a60c544f6b7bdb5d49006f654a51ca9a22",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 34.02,
          "commitsBetweenForRepo": 49,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void process(Node externs, Node root) {\n    assignmentLog \u003d new StringBuilder();\n    NodeTraversal.traverse(compiler, externs, new ProcessVars(true));\n    NodeTraversal.traverse(compiler, root, new ProcessVars(false));\n    reservedNames.addAll(externNames);\n    SortedSet\u003cAssignment\u003e varsByFrequency \u003d new TreeSet\u003cAssignment\u003e(FREQUENCY_COMPARATOR);\n    varsByFrequency.addAll(assignments.values());\n    if (prevUsedRenameMap !\u003d null) {\n        reusePreviouslyUsedVariableMap();\n    }\n    assignNames(varsByFrequency);\n    boolean changed \u003d false;\n    for (Node n : globalNameNodes) {\n        String newName \u003d getNewGlobalName(n);\n        if (newName !\u003d null) {\n            n.setString(newName);\n            changed \u003d true;\n        }\n    }\n    int count \u003d 0;\n    for (Node n : localNameNodes) {\n        String newName \u003d getNewLocalName(n, count);\n        if (newName !\u003d null) {\n            n.setString(newName);\n            changed \u003d true;\n        }\n        count++;\n    }\n    if (changed) {\n        compiler.reportCodeChange();\n    }\n    compiler.addToDebugLog(\"JS var assignments:\\n\" + assignmentLog);\n    assignmentLog \u003d null;\n}",
          "path": "src/com/google/javascript/jscomp/RenameVars.java",
          "functionStartLine": 276,
          "functionName": "process",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,34 +1,35 @@\n+@Override\n public void process(Node externs, Node root) {\n     assignmentLog \u003d new StringBuilder();\n     NodeTraversal.traverse(compiler, externs, new ProcessVars(true));\n     NodeTraversal.traverse(compiler, root, new ProcessVars(false));\n     reservedNames.addAll(externNames);\n     SortedSet\u003cAssignment\u003e varsByFrequency \u003d new TreeSet\u003cAssignment\u003e(FREQUENCY_COMPARATOR);\n     varsByFrequency.addAll(assignments.values());\n     if (prevUsedRenameMap !\u003d null) {\n         reusePreviouslyUsedVariableMap();\n     }\n     assignNames(varsByFrequency);\n     boolean changed \u003d false;\n     for (Node n : globalNameNodes) {\n         String newName \u003d getNewGlobalName(n);\n         if (newName !\u003d null) {\n             n.setString(newName);\n             changed \u003d true;\n         }\n     }\n     int count \u003d 0;\n     for (Node n : localNameNodes) {\n         String newName \u003d getNewLocalName(n, count);\n         if (newName !\u003d null) {\n             n.setString(newName);\n             changed \u003d true;\n         }\n         count++;\n     }\n     if (changed) {\n         compiler.reportCodeChange();\n     }\n     compiler.addToDebugLog(\"JS var assignments:\\n\" + assignmentLog);\n     assignmentLog \u003d null;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "@Override"
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "\nChange on 2010/04/19 by anatol\n\n        Replace {@inheritDoc} javadoc annotation with @Override.\n        @Override is better as it implies documentation inheritance plus checks\n        that the parent method exists at the compile-time.\n\n        R\u003dnick\n        DELTA\u003d137  (0 added, 70 deleted, 67 changed)\n\nChange on 2010/04/19 by nick\n\n        Change how we resolve types.\n        Instead of leaving shell proxy types around, unbox the proxy types.\n\n        R\u003dandrew,john\n        DELTA\u003d103  (84 added, 5 deleted, 14 changed)\n\nChange on 2010/04/19 by acleung\n\n        Enable Flow Sensitive Inlining by default.\n\n        R\u003djohn\n        DELTA\u003d1  (0 added, 0 deleted, 1 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dpqvliw\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@191 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "4/19/10, 4:28 PM",
          "commitName": "5da32cba7b68d69acfc535f57f21d652475d256f",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "3/16/10, 3:53 PM",
          "commitNameOld": "938f48a60c544f6b7bdb5d49006f654a51ca9a22",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 34.02,
          "commitsBetweenForRepo": 49,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void process(Node externs, Node root) {\n    assignmentLog \u003d new StringBuilder();\n    NodeTraversal.traverse(compiler, externs, new ProcessVars(true));\n    NodeTraversal.traverse(compiler, root, new ProcessVars(false));\n    reservedNames.addAll(externNames);\n    SortedSet\u003cAssignment\u003e varsByFrequency \u003d new TreeSet\u003cAssignment\u003e(FREQUENCY_COMPARATOR);\n    varsByFrequency.addAll(assignments.values());\n    if (prevUsedRenameMap !\u003d null) {\n        reusePreviouslyUsedVariableMap();\n    }\n    assignNames(varsByFrequency);\n    boolean changed \u003d false;\n    for (Node n : globalNameNodes) {\n        String newName \u003d getNewGlobalName(n);\n        if (newName !\u003d null) {\n            n.setString(newName);\n            changed \u003d true;\n        }\n    }\n    int count \u003d 0;\n    for (Node n : localNameNodes) {\n        String newName \u003d getNewLocalName(n, count);\n        if (newName !\u003d null) {\n            n.setString(newName);\n            changed \u003d true;\n        }\n        count++;\n    }\n    if (changed) {\n        compiler.reportCodeChange();\n    }\n    compiler.addToDebugLog(\"JS var assignments:\\n\" + assignmentLog);\n    assignmentLog \u003d null;\n}",
          "path": "src/com/google/javascript/jscomp/RenameVars.java",
          "functionStartLine": 276,
          "functionName": "process",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,34 +1,35 @@\n+@Override\n public void process(Node externs, Node root) {\n     assignmentLog \u003d new StringBuilder();\n     NodeTraversal.traverse(compiler, externs, new ProcessVars(true));\n     NodeTraversal.traverse(compiler, root, new ProcessVars(false));\n     reservedNames.addAll(externNames);\n     SortedSet\u003cAssignment\u003e varsByFrequency \u003d new TreeSet\u003cAssignment\u003e(FREQUENCY_COMPARATOR);\n     varsByFrequency.addAll(assignments.values());\n     if (prevUsedRenameMap !\u003d null) {\n         reusePreviouslyUsedVariableMap();\n     }\n     assignNames(varsByFrequency);\n     boolean changed \u003d false;\n     for (Node n : globalNameNodes) {\n         String newName \u003d getNewGlobalName(n);\n         if (newName !\u003d null) {\n             n.setString(newName);\n             changed \u003d true;\n         }\n     }\n     int count \u003d 0;\n     for (Node n : localNameNodes) {\n         String newName \u003d getNewLocalName(n, count);\n         if (newName !\u003d null) {\n             n.setString(newName);\n             changed \u003d true;\n         }\n         count++;\n     }\n     if (changed) {\n         compiler.reportCodeChange();\n     }\n     compiler.addToDebugLog(\"JS var assignments:\\n\" + assignmentLog);\n     assignmentLog \u003d null;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "@inheritDoc}\n",
            "newValue": ""
          }
        }
      ]
    },
    "a478193982ce1fb9271e3f7ebcc1369913c9a859": {
      "type": "Ybodychange",
      "commitMessage": "Add a debugging option for variable renaming.\nBug fixes for direct calls on the arguments array.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@17 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/1/09, 8:28 AM",
      "commitName": "a478193982ce1fb9271e3f7ebcc1369913c9a859",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/17/09, 4:21 PM",
      "commitNameOld": "fe64e87cccd2c38524c0b36c49beb4c988d1453a",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 13.67,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "public void process(Node externs, Node root) {\n    assignmentLog \u003d new StringBuilder();\n    NodeTraversal.traverse(compiler, externs, new ProcessVars(true));\n    NodeTraversal.traverse(compiler, root, new ProcessVars(false));\n    reservedNames.addAll(externNames);\n    SortedSet\u003cAssignment\u003e varsByFrequency \u003d new TreeSet\u003cAssignment\u003e(FREQUENCY_COMPARATOR);\n    varsByFrequency.addAll(assignments.values());\n    if (prevUsedRenameMap !\u003d null) {\n        reusePreviouslyUsedVariableMap();\n    }\n    assignNames(varsByFrequency);\n    boolean changed \u003d false;\n    for (Node n : globalNameNodes) {\n        String newName \u003d getNewGlobalName(n);\n        if (newName !\u003d null) {\n            n.setString(newName);\n            changed \u003d true;\n        }\n    }\n    int count \u003d 0;\n    for (Node n : localNameNodes) {\n        String newName \u003d getNewLocalName(n, count);\n        if (newName !\u003d null) {\n            n.setString(newName);\n            changed \u003d true;\n        }\n        count++;\n    }\n    if (changed) {\n        compiler.reportCodeChange();\n    }\n    compiler.addToDebugLog(\"JS var assignments:\\n\" + assignmentLog);\n    assignmentLog \u003d null;\n}",
      "path": "src/com/google/javascript/jscomp/RenameVars.java",
      "functionStartLine": 269,
      "functionName": "process",
      "functionAnnotation": "",
      "functionDoc": "@inheritDoc}\n",
      "diff": "@@ -1,34 +1,34 @@\n public void process(Node externs, Node root) {\n     assignmentLog \u003d new StringBuilder();\n     NodeTraversal.traverse(compiler, externs, new ProcessVars(true));\n     NodeTraversal.traverse(compiler, root, new ProcessVars(false));\n     reservedNames.addAll(externNames);\n     SortedSet\u003cAssignment\u003e varsByFrequency \u003d new TreeSet\u003cAssignment\u003e(FREQUENCY_COMPARATOR);\n     varsByFrequency.addAll(assignments.values());\n     if (prevUsedRenameMap !\u003d null) {\n         reusePreviouslyUsedVariableMap();\n     }\n     assignNames(varsByFrequency);\n     boolean changed \u003d false;\n     for (Node n : globalNameNodes) {\n-        String oldName \u003d n.getString();\n-        Assignment a \u003d assignments.get(oldName);\n-        if (a.newName !\u003d null) {\n-            n.setString(a.newName);\n-            changed \u003d changed || !a.newName.equals(oldName);\n+        String newName \u003d getNewGlobalName(n);\n+        if (newName !\u003d null) {\n+            n.setString(newName);\n+            changed \u003d true;\n         }\n     }\n     int count \u003d 0;\n     for (Node n : localNameNodes) {\n-        String oldName \u003d localTempNames.get(count);\n-        Assignment a \u003d assignments.get(oldName);\n-        n.setString(a.newName);\n-        changed \u003d changed || !a.newName.equals(oldName);\n+        String newName \u003d getNewLocalName(n, count);\n+        if (newName !\u003d null) {\n+            n.setString(newName);\n+            changed \u003d true;\n+        }\n         count++;\n     }\n     if (changed) {\n         compiler.reportCodeChange();\n     }\n     compiler.addToDebugLog(\"JS var assignments:\\n\" + assignmentLog);\n     assignmentLog \u003d null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,34 @@\n+public void process(Node externs, Node root) {\n+    assignmentLog \u003d new StringBuilder();\n+    NodeTraversal.traverse(compiler, externs, new ProcessVars(true));\n+    NodeTraversal.traverse(compiler, root, new ProcessVars(false));\n+    reservedNames.addAll(externNames);\n+    SortedSet\u003cAssignment\u003e varsByFrequency \u003d new TreeSet\u003cAssignment\u003e(FREQUENCY_COMPARATOR);\n+    varsByFrequency.addAll(assignments.values());\n+    if (prevUsedRenameMap !\u003d null) {\n+        reusePreviouslyUsedVariableMap();\n+    }\n+    assignNames(varsByFrequency);\n+    boolean changed \u003d false;\n+    for (Node n : globalNameNodes) {\n+        String oldName \u003d n.getString();\n+        Assignment a \u003d assignments.get(oldName);\n+        if (a.newName !\u003d null) {\n+            n.setString(a.newName);\n+            changed \u003d changed || !a.newName.equals(oldName);\n+        }\n+    }\n+    int count \u003d 0;\n+    for (Node n : localNameNodes) {\n+        String oldName \u003d localTempNames.get(count);\n+        Assignment a \u003d assignments.get(oldName);\n+        n.setString(a.newName);\n+        changed \u003d changed || !a.newName.equals(oldName);\n+        count++;\n+    }\n+    if (changed) {\n+        compiler.reportCodeChange();\n+    }\n+    compiler.addToDebugLog(\"JS var assignments:\\n\" + assignmentLog);\n+    assignmentLog \u003d null;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public void process(Node externs, Node root) {\n    assignmentLog \u003d new StringBuilder();\n    NodeTraversal.traverse(compiler, externs, new ProcessVars(true));\n    NodeTraversal.traverse(compiler, root, new ProcessVars(false));\n    reservedNames.addAll(externNames);\n    SortedSet\u003cAssignment\u003e varsByFrequency \u003d new TreeSet\u003cAssignment\u003e(FREQUENCY_COMPARATOR);\n    varsByFrequency.addAll(assignments.values());\n    if (prevUsedRenameMap !\u003d null) {\n        reusePreviouslyUsedVariableMap();\n    }\n    assignNames(varsByFrequency);\n    boolean changed \u003d false;\n    for (Node n : globalNameNodes) {\n        String oldName \u003d n.getString();\n        Assignment a \u003d assignments.get(oldName);\n        if (a.newName !\u003d null) {\n            n.setString(a.newName);\n            changed \u003d changed || !a.newName.equals(oldName);\n        }\n    }\n    int count \u003d 0;\n    for (Node n : localNameNodes) {\n        String oldName \u003d localTempNames.get(count);\n        Assignment a \u003d assignments.get(oldName);\n        n.setString(a.newName);\n        changed \u003d changed || !a.newName.equals(oldName);\n        count++;\n    }\n    if (changed) {\n        compiler.reportCodeChange();\n    }\n    compiler.addToDebugLog(\"JS var assignments:\\n\" + assignmentLog);\n    assignmentLog \u003d null;\n}",
      "path": "src/com/google/javascript/jscomp/RenameVars.java",
      "functionStartLine": 245,
      "functionName": "process",
      "functionAnnotation": "",
      "functionDoc": "@inheritDoc}\n"
    }
  }
}