{
  "origin": "codeshovel",
  "repositoryName": "Closure-59b",
  "repositoryPath": "/tmp/Closure-59b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ProcessDefines.java",
  "functionName": "collectDefines",
  "functionId": "collectDefines___root-Node__namespace-GlobalNamespace",
  "sourceFilePath": "src/com/google/javascript/jscomp/ProcessDefines.java",
  "functionAnnotation": "",
  "functionDoc": "Finds all defines, and creates a {@link DefineInfo} data structure for\neach one.\n\n@return A map of {@link DefineInfo} structures, keyed by name.\n",
  "functionStartLine": 171,
  "functionEndLine": 214,
  "numCommitsSeen": 11,
  "timeTaken": 816,
  "changeHistory": [
    "48a32150dae5412868226f0c336b24d51000a1b5",
    "8be3896c7639f91d83ac220531cc5cbdc5a029d4",
    "c764a46abf211d4677fadc33f7d466e5b14fa088",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "48a32150dae5412868226f0c336b24d51000a1b5": "Ybodychange",
    "8be3896c7639f91d83ac220531cc5cbdc5a029d4": "Ybodychange",
    "c764a46abf211d4677fadc33f7d466e5b14fa088": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "48a32150dae5412868226f0c336b24d51000a1b5": {
      "type": "Ybodychange",
      "commitMessage": "\nadd a getDeclaration() method to all StaticSlots\n\nR\u003dacleung\nDELTA\u003d137  (77 added, 4 deleted, 56 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2553\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1259 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/12/11, 8:03 AM",
      "commitName": "48a32150dae5412868226f0c336b24d51000a1b5",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "6/1/11, 11:13 AM",
      "commitNameOld": "19d4a0738ff90967c054ea9fecff0aaa115a45b7",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 40.87,
      "commitsBetweenForRepo": 102,
      "commitsBetweenForFile": 1,
      "actualSource": "private Map\u003cString, DefineInfo\u003e collectDefines(Node root, GlobalNamespace namespace) {\n    List\u003cName\u003e allDefines \u003d Lists.newArrayList();\n    for (Name name : namespace.getNameIndex().values()) {\n        Ref decl \u003d name.getDeclaration();\n        if (name.docInfo !\u003d null \u0026\u0026 name.docInfo.isDefine()) {\n            if (isValidDefineType(name.docInfo.getType())) {\n                allDefines.add(name);\n            } else {\n                JSError error \u003d JSError.make(decl.getSourceName(), decl.node, INVALID_DEFINE_TYPE_ERROR);\n                compiler.report(error);\n            }\n        } else {\n            for (Ref ref : name.getRefs()) {\n                if (ref \u003d\u003d decl) {\n                    continue;\n                }\n                Node n \u003d ref.node;\n                Node parent \u003d ref.node.getParent();\n                JSDocInfo info \u003d n.getJSDocInfo();\n                if (info \u003d\u003d null \u0026\u0026 parent.getType() \u003d\u003d Token.VAR \u0026\u0026 parent.hasOneChild()) {\n                    info \u003d parent.getJSDocInfo();\n                }\n                if (info !\u003d null \u0026\u0026 info.isDefine()) {\n                    allDefines.add(name);\n                    break;\n                }\n            }\n        }\n    }\n    CollectDefines pass \u003d new CollectDefines(compiler, allDefines);\n    NodeTraversal.traverse(compiler, root, pass);\n    return pass.getAllDefines();\n}",
      "path": "src/com/google/javascript/jscomp/ProcessDefines.java",
      "functionStartLine": 171,
      "functionName": "collectDefines",
      "functionAnnotation": "",
      "functionDoc": "Finds all defines, and creates a {@link DefineInfo} data structure for\neach one.\n\n@return A map of {@link DefineInfo} structures, keyed by name.\n",
      "diff": "@@ -1,32 +1,33 @@\n private Map\u003cString, DefineInfo\u003e collectDefines(Node root, GlobalNamespace namespace) {\n     List\u003cName\u003e allDefines \u003d Lists.newArrayList();\n     for (Name name : namespace.getNameIndex().values()) {\n+        Ref decl \u003d name.getDeclaration();\n         if (name.docInfo !\u003d null \u0026\u0026 name.docInfo.isDefine()) {\n             if (isValidDefineType(name.docInfo.getType())) {\n                 allDefines.add(name);\n             } else {\n-                JSError error \u003d JSError.make(name.declaration.getSourceName(), name.declaration.node, INVALID_DEFINE_TYPE_ERROR);\n+                JSError error \u003d JSError.make(decl.getSourceName(), decl.node, INVALID_DEFINE_TYPE_ERROR);\n                 compiler.report(error);\n             }\n         } else {\n             for (Ref ref : name.getRefs()) {\n-                if (ref \u003d\u003d name.declaration) {\n+                if (ref \u003d\u003d decl) {\n                     continue;\n                 }\n                 Node n \u003d ref.node;\n                 Node parent \u003d ref.node.getParent();\n                 JSDocInfo info \u003d n.getJSDocInfo();\n                 if (info \u003d\u003d null \u0026\u0026 parent.getType() \u003d\u003d Token.VAR \u0026\u0026 parent.hasOneChild()) {\n                     info \u003d parent.getJSDocInfo();\n                 }\n                 if (info !\u003d null \u0026\u0026 info.isDefine()) {\n                     allDefines.add(name);\n                     break;\n                 }\n             }\n         }\n     }\n     CollectDefines pass \u003d new CollectDefines(compiler, allDefines);\n     NodeTraversal.traverse(compiler, root, pass);\n     return pass.getAllDefines();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "8be3896c7639f91d83ac220531cc5cbdc5a029d4": {
      "type": "Ybodychange",
      "commitMessage": "\nClean up global namespacing a bit, to make way for additional\nchecks.\nI\u0027m not quite sure if the change w/r/t \u0027declaration\u0027 and \u0027refs\u0027\nis an improvement or not--i think it will allow us to get rid\nof special cases down the line, but am not sure.\n\nR\u003dacleung\nDELTA\u003d117  (40 added, 9 deleted, 68 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1542\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1031 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/25/11, 9:07 AM",
      "commitName": "8be3896c7639f91d83ac220531cc5cbdc5a029d4",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "4/12/11, 12:15 PM",
      "commitNameOld": "f322be0e576d5e2114cb59c0a6537197997b9c59",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 12.87,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "actualSource": "private Map\u003cString, DefineInfo\u003e collectDefines(Node root, GlobalNamespace namespace) {\n    List\u003cName\u003e allDefines \u003d Lists.newArrayList();\n    for (Name name : namespace.getNameIndex().values()) {\n        if (name.docInfo !\u003d null \u0026\u0026 name.docInfo.isDefine()) {\n            if (isValidDefineType(name.docInfo.getType())) {\n                allDefines.add(name);\n            } else {\n                JSError error \u003d JSError.make(name.declaration.getSourceName(), name.declaration.node, INVALID_DEFINE_TYPE_ERROR);\n                compiler.report(error);\n            }\n        } else {\n            for (Ref ref : name.getRefs()) {\n                if (ref \u003d\u003d name.declaration) {\n                    continue;\n                }\n                Node n \u003d ref.node;\n                Node parent \u003d ref.node.getParent();\n                JSDocInfo info \u003d n.getJSDocInfo();\n                if (info \u003d\u003d null \u0026\u0026 parent.getType() \u003d\u003d Token.VAR \u0026\u0026 parent.hasOneChild()) {\n                    info \u003d parent.getJSDocInfo();\n                }\n                if (info !\u003d null \u0026\u0026 info.isDefine()) {\n                    allDefines.add(name);\n                    break;\n                }\n            }\n        }\n    }\n    CollectDefines pass \u003d new CollectDefines(compiler, allDefines);\n    NodeTraversal.traverse(compiler, root, pass);\n    return pass.getAllDefines();\n}",
      "path": "src/com/google/javascript/jscomp/ProcessDefines.java",
      "functionStartLine": 171,
      "functionName": "collectDefines",
      "functionAnnotation": "",
      "functionDoc": "Finds all defines, and creates a {@link DefineInfo} data structure for\neach one.\n\n@return A map of {@link DefineInfo} structures, keyed by name.\n",
      "diff": "@@ -1,29 +1,32 @@\n private Map\u003cString, DefineInfo\u003e collectDefines(Node root, GlobalNamespace namespace) {\n     List\u003cName\u003e allDefines \u003d Lists.newArrayList();\n     for (Name name : namespace.getNameIndex().values()) {\n         if (name.docInfo !\u003d null \u0026\u0026 name.docInfo.isDefine()) {\n             if (isValidDefineType(name.docInfo.getType())) {\n                 allDefines.add(name);\n             } else {\n-                JSError error \u003d JSError.make(name.declaration.sourceName, name.declaration.node, INVALID_DEFINE_TYPE_ERROR);\n+                JSError error \u003d JSError.make(name.declaration.getSourceName(), name.declaration.node, INVALID_DEFINE_TYPE_ERROR);\n                 compiler.report(error);\n             }\n-        } else if (name.refs !\u003d null) {\n-            for (Ref ref : name.refs) {\n+        } else {\n+            for (Ref ref : name.getRefs()) {\n+                if (ref \u003d\u003d name.declaration) {\n+                    continue;\n+                }\n                 Node n \u003d ref.node;\n                 Node parent \u003d ref.node.getParent();\n                 JSDocInfo info \u003d n.getJSDocInfo();\n                 if (info \u003d\u003d null \u0026\u0026 parent.getType() \u003d\u003d Token.VAR \u0026\u0026 parent.hasOneChild()) {\n                     info \u003d parent.getJSDocInfo();\n                 }\n                 if (info !\u003d null \u0026\u0026 info.isDefine()) {\n                     allDefines.add(name);\n                     break;\n                 }\n             }\n         }\n     }\n     CollectDefines pass \u003d new CollectDefines(compiler, allDefines);\n     NodeTraversal.traverse(compiler, root, pass);\n     return pass.getAllDefines();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c764a46abf211d4677fadc33f7d466e5b14fa088": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/04/13 by john\n\n        Here is a crazy thought, let\u0027s not require the JSTypeRegistry during\n        parsing.\n\n        There are basically two changes here:\n        1) The IRFactory was looking for enums to seed the JSTypeRegistry, so\n        we do that when we setup for type interence.\n        2) The JSDocParser was checking the types of @defines objects, now do\n        that during ProcessDefines.\n\n        R\u003drobert,mark\n        DELTA\u003d207  (82 added, 89 deleted, 36 changed)\n\nChange on 2010/04/14 by nick\n\n        Add a debugging function for JSType hashcodes.\n        i found this useful, and thought others might too.\n\n        R\u003djohn\n        DELTA\u003d69  (69 added, 0 deleted, 0 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dfqsoxx\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@183 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/14/10, 9:15 AM",
      "commitName": "c764a46abf211d4677fadc33f7d466e5b14fa088",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "3/29/10, 7:04 AM",
      "commitNameOld": "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 16.09,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "actualSource": "private Map\u003cString, DefineInfo\u003e collectDefines(Node root, GlobalNamespace namespace) {\n    List\u003cName\u003e allDefines \u003d Lists.newArrayList();\n    for (Name name : namespace.getNameIndex().values()) {\n        if (name.docInfo !\u003d null \u0026\u0026 name.docInfo.isDefine()) {\n            if (isValidDefineType(name.docInfo.getType())) {\n                allDefines.add(name);\n            } else {\n                JSError error \u003d JSError.make(name.declaration.sourceName, name.declaration.node, INVALID_DEFINE_TYPE_ERROR);\n                compiler.report(error);\n            }\n        } else if (name.refs !\u003d null) {\n            for (Ref ref : name.refs) {\n                Node n \u003d ref.node;\n                Node parent \u003d ref.node.getParent();\n                JSDocInfo info \u003d n.getJSDocInfo();\n                if (info \u003d\u003d null \u0026\u0026 parent.getType() \u003d\u003d Token.VAR \u0026\u0026 parent.hasOneChild()) {\n                    info \u003d parent.getJSDocInfo();\n                }\n                if (info !\u003d null \u0026\u0026 info.isDefine()) {\n                    allDefines.add(name);\n                    break;\n                }\n            }\n        }\n    }\n    CollectDefines pass \u003d new CollectDefines(compiler, allDefines);\n    NodeTraversal.traverse(compiler, root, pass);\n    return pass.getAllDefines();\n}",
      "path": "src/com/google/javascript/jscomp/ProcessDefines.java",
      "functionStartLine": 171,
      "functionName": "collectDefines",
      "functionAnnotation": "",
      "functionDoc": "Finds all defines, and creates a {@link DefineInfo} data structure for\neach one.\n\n@return A map of {@link DefineInfo} structures, keyed by name.\n",
      "diff": "@@ -1,24 +1,29 @@\n private Map\u003cString, DefineInfo\u003e collectDefines(Node root, GlobalNamespace namespace) {\n     List\u003cName\u003e allDefines \u003d Lists.newArrayList();\n     for (Name name : namespace.getNameIndex().values()) {\n         if (name.docInfo !\u003d null \u0026\u0026 name.docInfo.isDefine()) {\n-            allDefines.add(name);\n+            if (isValidDefineType(name.docInfo.getType())) {\n+                allDefines.add(name);\n+            } else {\n+                JSError error \u003d JSError.make(name.declaration.sourceName, name.declaration.node, INVALID_DEFINE_TYPE_ERROR);\n+                compiler.report(error);\n+            }\n         } else if (name.refs !\u003d null) {\n             for (Ref ref : name.refs) {\n                 Node n \u003d ref.node;\n                 Node parent \u003d ref.node.getParent();\n                 JSDocInfo info \u003d n.getJSDocInfo();\n                 if (info \u003d\u003d null \u0026\u0026 parent.getType() \u003d\u003d Token.VAR \u0026\u0026 parent.hasOneChild()) {\n                     info \u003d parent.getJSDocInfo();\n                 }\n                 if (info !\u003d null \u0026\u0026 info.isDefine()) {\n                     allDefines.add(name);\n                     break;\n                 }\n             }\n         }\n     }\n     CollectDefines pass \u003d new CollectDefines(compiler, allDefines);\n     NodeTraversal.traverse(compiler, root, pass);\n     return pass.getAllDefines();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,24 @@\n+private Map\u003cString, DefineInfo\u003e collectDefines(Node root, GlobalNamespace namespace) {\n+    List\u003cName\u003e allDefines \u003d Lists.newArrayList();\n+    for (Name name : namespace.getNameIndex().values()) {\n+        if (name.docInfo !\u003d null \u0026\u0026 name.docInfo.isDefine()) {\n+            allDefines.add(name);\n+        } else if (name.refs !\u003d null) {\n+            for (Ref ref : name.refs) {\n+                Node n \u003d ref.node;\n+                Node parent \u003d ref.node.getParent();\n+                JSDocInfo info \u003d n.getJSDocInfo();\n+                if (info \u003d\u003d null \u0026\u0026 parent.getType() \u003d\u003d Token.VAR \u0026\u0026 parent.hasOneChild()) {\n+                    info \u003d parent.getJSDocInfo();\n+                }\n+                if (info !\u003d null \u0026\u0026 info.isDefine()) {\n+                    allDefines.add(name);\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+    CollectDefines pass \u003d new CollectDefines(compiler, allDefines);\n+    NodeTraversal.traverse(compiler, root, pass);\n+    return pass.getAllDefines();\n+}\n\\ No newline at end of file\n",
      "actualSource": "private Map\u003cString, DefineInfo\u003e collectDefines(Node root, GlobalNamespace namespace) {\n    List\u003cName\u003e allDefines \u003d Lists.newArrayList();\n    for (Name name : namespace.getNameIndex().values()) {\n        if (name.docInfo !\u003d null \u0026\u0026 name.docInfo.isDefine()) {\n            allDefines.add(name);\n        } else if (name.refs !\u003d null) {\n            for (Ref ref : name.refs) {\n                Node n \u003d ref.node;\n                Node parent \u003d ref.node.getParent();\n                JSDocInfo info \u003d n.getJSDocInfo();\n                if (info \u003d\u003d null \u0026\u0026 parent.getType() \u003d\u003d Token.VAR \u0026\u0026 parent.hasOneChild()) {\n                    info \u003d parent.getJSDocInfo();\n                }\n                if (info !\u003d null \u0026\u0026 info.isDefine()) {\n                    allDefines.add(name);\n                    break;\n                }\n            }\n        }\n    }\n    CollectDefines pass \u003d new CollectDefines(compiler, allDefines);\n    NodeTraversal.traverse(compiler, root, pass);\n    return pass.getAllDefines();\n}",
      "path": "src/com/google/javascript/jscomp/ProcessDefines.java",
      "functionStartLine": 152,
      "functionName": "collectDefines",
      "functionAnnotation": "",
      "functionDoc": "Finds all defines, and creates a {@link DefineInfo} data structure for\neach one.\n\n@return A map of {@link DefineInfo} structures, keyed by name.\n"
    }
  }
}