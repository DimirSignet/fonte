{
  "origin": "codeshovel",
  "repositoryName": "Closure-59b",
  "repositoryPath": "/tmp/Closure-59b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CheckAccessControls.java",
  "functionName": "checkPropertyDeprecation",
  "functionId": "checkPropertyDeprecation___t-NodeTraversal__n-Node__parent-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/CheckAccessControls.java",
  "functionAnnotation": "",
  "functionDoc": "Checks the given GETPROP node to ensure that access restrictions are\nobeyed.\n",
  "functionStartLine": 292,
  "functionEndLine": 321,
  "numCommitsSeen": 14,
  "timeTaken": 810,
  "changeHistory": [
    "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4",
    "a2d8936fae3eb0e3873c7f7c0233344c81436404",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4": "Ybodychange",
    "a2d8936fae3eb0e3873c7f7c0233344c81436404": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4": {
      "type": "Ybodychange",
      "commitMessage": "Remove circular dependency between error-reporting and the rest\nof the compiler. (Nick)\nR\u003dalan\nDELTA\u003d152  (27 added, 28 deleted, 97 changed)\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@159 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/29/10, 7:04 AM",
      "commitName": "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "3/11/10, 9:31 PM",
      "commitNameOld": "7bfdbd9164601af44d17edd51be829fde2cc51aa",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 17.36,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "actualSource": "private void checkPropertyDeprecation(NodeTraversal t, Node n, Node parent) {\n    if (parent.getType() \u003d\u003d Token.NEW) {\n        return;\n    }\n    ObjectType objectType \u003d ObjectType.cast(dereference(n.getFirstChild().getJSType()));\n    String propertyName \u003d n.getLastChild().getString();\n    if (objectType !\u003d null) {\n        String deprecationInfo \u003d getPropertyDeprecationInfo(objectType, propertyName);\n        if (deprecationInfo !\u003d null \u0026\u0026 shouldEmitDeprecationWarning(t, n, parent)) {\n            if (!deprecationInfo.isEmpty()) {\n                compiler.report(t.makeError(n, DEPRECATED_PROP_REASON, propertyName, validator.getReadableJSTypeName(n.getFirstChild(), true), deprecationInfo));\n            } else {\n                compiler.report(t.makeError(n, DEPRECATED_PROP, propertyName, validator.getReadableJSTypeName(n.getFirstChild(), true)));\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/CheckAccessControls.java",
      "functionStartLine": 274,
      "functionName": "checkPropertyDeprecation",
      "functionAnnotation": "",
      "functionDoc": "Checks the given GETPROP node to ensure that access restrictions are\nobeyed.\n",
      "diff": "@@ -1,17 +1,17 @@\n private void checkPropertyDeprecation(NodeTraversal t, Node n, Node parent) {\n     if (parent.getType() \u003d\u003d Token.NEW) {\n         return;\n     }\n     ObjectType objectType \u003d ObjectType.cast(dereference(n.getFirstChild().getJSType()));\n     String propertyName \u003d n.getLastChild().getString();\n     if (objectType !\u003d null) {\n         String deprecationInfo \u003d getPropertyDeprecationInfo(objectType, propertyName);\n         if (deprecationInfo !\u003d null \u0026\u0026 shouldEmitDeprecationWarning(t, n, parent)) {\n             if (!deprecationInfo.isEmpty()) {\n-                compiler.report(JSError.make(t, n, DEPRECATED_PROP_REASON, propertyName, validator.getReadableJSTypeName(n.getFirstChild(), true), deprecationInfo));\n+                compiler.report(t.makeError(n, DEPRECATED_PROP_REASON, propertyName, validator.getReadableJSTypeName(n.getFirstChild(), true), deprecationInfo));\n             } else {\n-                compiler.report(JSError.make(t, n, DEPRECATED_PROP, propertyName, validator.getReadableJSTypeName(n.getFirstChild(), true)));\n+                compiler.report(t.makeError(n, DEPRECATED_PROP, propertyName, validator.getReadableJSTypeName(n.getFirstChild(), true)));\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a2d8936fae3eb0e3873c7f7c0233344c81436404": {
      "type": "Ybodychange",
      "commitMessage": "Add warnings for functions that are ambiguously defined on different\nbrowsers.\n\nAdd better support for Caja.\n\nRollback the change to CoalesceVariableNames, because it had problems.\n\nInternal type system refactoring.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@33 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/15/09, 1:52 PM",
      "commitName": "a2d8936fae3eb0e3873c7f7c0233344c81436404",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/3/09, 3:51 PM",
      "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 41.92,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "actualSource": "private void checkPropertyDeprecation(NodeTraversal t, Node n, Node parent) {\n    if (parent.getType() \u003d\u003d Token.NEW) {\n        return;\n    }\n    ObjectType objectType \u003d ObjectType.cast(dereference(n.getFirstChild().getJSType()));\n    String propertyName \u003d n.getLastChild().getString();\n    if (objectType !\u003d null) {\n        String deprecationInfo \u003d getPropertyDeprecationInfo(objectType, propertyName);\n        if (deprecationInfo !\u003d null \u0026\u0026 shouldEmitDeprecationWarning(t, n, parent)) {\n            if (!deprecationInfo.isEmpty()) {\n                compiler.report(JSError.make(t, n, DEPRECATED_PROP_REASON, propertyName, validator.getReadableJSTypeName(n.getFirstChild(), true), deprecationInfo));\n            } else {\n                compiler.report(JSError.make(t, n, DEPRECATED_PROP, propertyName, validator.getReadableJSTypeName(n.getFirstChild(), true)));\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/CheckAccessControls.java",
      "functionStartLine": 274,
      "functionName": "checkPropertyDeprecation",
      "functionAnnotation": "",
      "functionDoc": "Checks the given GETPROP node to ensure that access restrictions are\nobeyed.\n",
      "diff": "@@ -1,18 +1,17 @@\n private void checkPropertyDeprecation(NodeTraversal t, Node n, Node parent) {\n     if (parent.getType() \u003d\u003d Token.NEW) {\n         return;\n     }\n-    JSType maybeObjectType \u003d dereference(n.getFirstChild().getJSType());\n+    ObjectType objectType \u003d ObjectType.cast(dereference(n.getFirstChild().getJSType()));\n     String propertyName \u003d n.getLastChild().getString();\n-    if (maybeObjectType !\u003d null \u0026\u0026 maybeObjectType instanceof ObjectType) {\n-        ObjectType objectType \u003d (ObjectType) maybeObjectType;\n+    if (objectType !\u003d null) {\n         String deprecationInfo \u003d getPropertyDeprecationInfo(objectType, propertyName);\n         if (deprecationInfo !\u003d null \u0026\u0026 shouldEmitDeprecationWarning(t, n, parent)) {\n             if (!deprecationInfo.isEmpty()) {\n                 compiler.report(JSError.make(t, n, DEPRECATED_PROP_REASON, propertyName, validator.getReadableJSTypeName(n.getFirstChild(), true), deprecationInfo));\n             } else {\n                 compiler.report(JSError.make(t, n, DEPRECATED_PROP, propertyName, validator.getReadableJSTypeName(n.getFirstChild(), true)));\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,18 @@\n+private void checkPropertyDeprecation(NodeTraversal t, Node n, Node parent) {\n+    if (parent.getType() \u003d\u003d Token.NEW) {\n+        return;\n+    }\n+    JSType maybeObjectType \u003d dereference(n.getFirstChild().getJSType());\n+    String propertyName \u003d n.getLastChild().getString();\n+    if (maybeObjectType !\u003d null \u0026\u0026 maybeObjectType instanceof ObjectType) {\n+        ObjectType objectType \u003d (ObjectType) maybeObjectType;\n+        String deprecationInfo \u003d getPropertyDeprecationInfo(objectType, propertyName);\n+        if (deprecationInfo !\u003d null \u0026\u0026 shouldEmitDeprecationWarning(t, n, parent)) {\n+            if (!deprecationInfo.isEmpty()) {\n+                compiler.report(JSError.make(t, n, DEPRECATED_PROP_REASON, propertyName, validator.getReadableJSTypeName(n.getFirstChild(), true), deprecationInfo));\n+            } else {\n+                compiler.report(JSError.make(t, n, DEPRECATED_PROP, propertyName, validator.getReadableJSTypeName(n.getFirstChild(), true)));\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void checkPropertyDeprecation(NodeTraversal t, Node n, Node parent) {\n    if (parent.getType() \u003d\u003d Token.NEW) {\n        return;\n    }\n    JSType maybeObjectType \u003d dereference(n.getFirstChild().getJSType());\n    String propertyName \u003d n.getLastChild().getString();\n    if (maybeObjectType !\u003d null \u0026\u0026 maybeObjectType instanceof ObjectType) {\n        ObjectType objectType \u003d (ObjectType) maybeObjectType;\n        String deprecationInfo \u003d getPropertyDeprecationInfo(objectType, propertyName);\n        if (deprecationInfo !\u003d null \u0026\u0026 shouldEmitDeprecationWarning(t, n, parent)) {\n            if (!deprecationInfo.isEmpty()) {\n                compiler.report(JSError.make(t, n, DEPRECATED_PROP_REASON, propertyName, validator.getReadableJSTypeName(n.getFirstChild(), true), deprecationInfo));\n            } else {\n                compiler.report(JSError.make(t, n, DEPRECATED_PROP, propertyName, validator.getReadableJSTypeName(n.getFirstChild(), true)));\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/CheckAccessControls.java",
      "functionStartLine": 274,
      "functionName": "checkPropertyDeprecation",
      "functionAnnotation": "",
      "functionDoc": "Checks the given GETPROP node to ensure that access restrictions are\nobeyed.\n"
    }
  }
}