{
  "origin": "codeshovel",
  "repositoryName": "Closure-59b",
  "repositoryPath": "/tmp/Closure-59b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "InlineFunctions.java",
  "functionName": "findNamedFunctions",
  "functionId": "$findNamedFunctions___t-NodeTraversal__n-Node__parent-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/InlineFunctions.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 169,
  "functionEndLine": 198,
  "numCommitsSeen": 29,
  "timeTaken": 2955,
  "changeHistory": [
    "b4801b28ceea8db0f63da7440d6769cb9b7cce8a",
    "ebb59a97610015bc41bda7f458dd1428a3a3e335",
    "2a43cf22f1e5e4ee4ddb99aceb5a566c05b0c6d4",
    "2acd6c1986e36bfdbae85c09eb83ac1940b86c73"
  ],
  "changeHistoryShort": {
    "b4801b28ceea8db0f63da7440d6769cb9b7cce8a": "Ybodychange",
    "ebb59a97610015bc41bda7f458dd1428a3a3e335": "Ybodychange",
    "2a43cf22f1e5e4ee4ddb99aceb5a566c05b0c6d4": "Ybodychange",
    "2acd6c1986e36bfdbae85c09eb83ac1940b86c73": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b4801b28ceea8db0f63da7440d6769cb9b7cce8a": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/05/28 by johnlenz\n\n        Inline functions with inner functions into global scope if they don\u0027t\n        declare any names.\n\n        R\u003dacleung\n        DELTA\u003d329  (244 added, 27 deleted, 58 changed)\n\nChange on 2010/05/28 by dcc\n\n        First pass on refactoring FoldConstants into separate peephole optimizations. This changelist adds the notion of an AbstractPeepholeOptimization and adds a PeepholeOptimizationsPass that runs them. In this go around the minimization aspects of FoldConstants have been factored out into PeepholeMinimize. A future change will factor out the other components of FoldConstants into their own PeepholeOptimizations. DefaultPassConfig has also been updated to run the new PeepholeOptimizationPass.\n\n        This change does not move the minimization-related unit tests from FoldConstantsTest to PeepholeMinimizeTest -- a future, separate, change will do so. Hopefully this will make it easier to review.\n\n        R\u003dacleung\n        DELTA\u003d1966  (1271 added, 675 deleted, 20 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d13010\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@235 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/29/10, 1:07 PM",
      "commitName": "b4801b28ceea8db0f63da7440d6769cb9b7cce8a",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "5/25/10, 10:51 AM",
      "commitNameOld": "170b23fa89cdcc38411fc29ec4453935e0903b16",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 4.09,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "public void findNamedFunctions(NodeTraversal t, Node n, Node parent) {\n    if (!NodeUtil.isStatement(n)) {\n        return;\n    }\n    switch(n.getType()) {\n        case Token.VAR:\n            Preconditions.checkState(n.hasOneChild());\n            Node nameNode \u003d n.getFirstChild();\n            if (nameNode.getType() \u003d\u003d Token.NAME \u0026\u0026 nameNode.hasChildren() \u0026\u0026 nameNode.getFirstChild().getType() \u003d\u003d Token.FUNCTION) {\n                maybeAddFunction(new FunctionVar(n), t.getModule());\n            }\n            break;\n        case Token.FUNCTION:\n            Preconditions.checkState(NodeUtil.isStatementBlock(parent) || parent.getType() \u003d\u003d Token.LABEL);\n            if (!NodeUtil.isFunctionExpression(n)) {\n                Function fn \u003d new NamedFunction(n);\n                maybeAddFunction(fn, t.getModule());\n            }\n            break;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/InlineFunctions.java",
      "functionStartLine": 161,
      "functionName": "findNamedFunctions",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,22 +1,21 @@\n public void findNamedFunctions(NodeTraversal t, Node n, Node parent) {\n     if (!NodeUtil.isStatement(n)) {\n         return;\n     }\n     switch(n.getType()) {\n         case Token.VAR:\n-            if (n.hasOneChild()) {\n-                Node nameNode \u003d n.getFirstChild();\n-                if (nameNode.getType() \u003d\u003d Token.NAME \u0026\u0026 nameNode.hasChildren() \u0026\u0026 nameNode.getFirstChild().getType() \u003d\u003d Token.FUNCTION) {\n-                    maybeAddFunction(new FunctionVar(n), t.getModule());\n-                }\n+            Preconditions.checkState(n.hasOneChild());\n+            Node nameNode \u003d n.getFirstChild();\n+            if (nameNode.getType() \u003d\u003d Token.NAME \u0026\u0026 nameNode.hasChildren() \u0026\u0026 nameNode.getFirstChild().getType() \u003d\u003d Token.FUNCTION) {\n+                maybeAddFunction(new FunctionVar(n), t.getModule());\n             }\n             break;\n         case Token.FUNCTION:\n             Preconditions.checkState(NodeUtil.isStatementBlock(parent) || parent.getType() \u003d\u003d Token.LABEL);\n             if (!NodeUtil.isFunctionExpression(n)) {\n                 Function fn \u003d new NamedFunction(n);\n                 maybeAddFunction(fn, t.getModule());\n             }\n             break;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ebb59a97610015bc41bda7f458dd1428a3a3e335": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/04/22 by nick\n\n        fix the extern definition of Window.prototype.stop\n\n        R\u003dsiggy\n        DELTA\u003d1  (0 added, 0 deleted, 1 changed)\n\nChange on 2010/04/22 by john\n\n        \"Anonymous function\" is a confusing term for functions with names.\n        Properly we are usually distinguishing between functions statements\n        (function declarations) and function expressions.\n\n        R\u003dalan\n        DELTA\u003d172  (7 added, 14 deleted, 151 changed)\n\nChange on 2010/04/22 by john\n\n        Standardize the definition of setTimeout/setInterval.\n        Fix for Issue 137\n\n        R\u003dnick\n        DELTA\u003d6  (2 added, 2 deleted, 2 changed)\n\nChange on 2010/04/22 by mark\n\n        Various delegate fixes.\n\n        Give the delegate proxy a name unique from the delegate base so that\n        InstanceObjectType#equals distinguishes them. This is necessary for\n        AmbiguateProperties to work.\n\n        Fix the prototype of the delegate proxy. This makes\n        DisambiguateProperties continue to work.\n\n        Add superclass methods of the delegate base to the delegate proxy.\n\n\n        R\u003dandrew,nada\n        DELTA\u003d526  (383 added, 104 deleted, 39 changed)\n\nChange on 2010/04/23 by john\n\n        Allow variable inlining of function statements. For simplicity  limited to functions defined before first use.\n\n        R\u003dnick\n        DELTA\u003d79  (49 added, 3 deleted, 27 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dhakjvx\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@197 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/23/10, 11:31 AM",
      "commitName": "ebb59a97610015bc41bda7f458dd1428a3a3e335",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/19/10, 4:28 PM",
      "commitNameOld": "5da32cba7b68d69acfc535f57f21d652475d256f",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 3.79,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "public void findNamedFunctions(NodeTraversal t, Node n, Node parent) {\n    if (!NodeUtil.isStatement(n)) {\n        return;\n    }\n    switch(n.getType()) {\n        case Token.VAR:\n            if (n.hasOneChild()) {\n                Node nameNode \u003d n.getFirstChild();\n                if (nameNode.getType() \u003d\u003d Token.NAME \u0026\u0026 nameNode.hasChildren() \u0026\u0026 nameNode.getFirstChild().getType() \u003d\u003d Token.FUNCTION) {\n                    maybeAddFunction(new FunctionVar(n), t.getModule());\n                }\n            }\n            break;\n        case Token.FUNCTION:\n            Preconditions.checkState(NodeUtil.isStatementBlock(parent) || parent.getType() \u003d\u003d Token.LABEL);\n            if (!NodeUtil.isFunctionExpression(n)) {\n                Function fn \u003d new NamedFunction(n);\n                maybeAddFunction(fn, t.getModule());\n            }\n            break;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/InlineFunctions.java",
      "functionStartLine": 171,
      "functionName": "findNamedFunctions",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,22 +1,22 @@\n public void findNamedFunctions(NodeTraversal t, Node n, Node parent) {\n     if (!NodeUtil.isStatement(n)) {\n         return;\n     }\n     switch(n.getType()) {\n         case Token.VAR:\n             if (n.hasOneChild()) {\n                 Node nameNode \u003d n.getFirstChild();\n                 if (nameNode.getType() \u003d\u003d Token.NAME \u0026\u0026 nameNode.hasChildren() \u0026\u0026 nameNode.getFirstChild().getType() \u003d\u003d Token.FUNCTION) {\n                     maybeAddFunction(new FunctionVar(n), t.getModule());\n                 }\n             }\n             break;\n         case Token.FUNCTION:\n             Preconditions.checkState(NodeUtil.isStatementBlock(parent) || parent.getType() \u003d\u003d Token.LABEL);\n-            if (!NodeUtil.isFunctionAnonymous(n)) {\n+            if (!NodeUtil.isFunctionExpression(n)) {\n                 Function fn \u003d new NamedFunction(n);\n                 maybeAddFunction(fn, t.getModule());\n             }\n             break;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2a43cf22f1e5e4ee4ddb99aceb5a566c05b0c6d4": {
      "type": "Ybodychange",
      "commitMessage": "Properly check for anonymous function when inlining. (John)\nR\u003drobert\nDELTA\u003d3  (0 added, 1 deleted, 2 changed)\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dwazoys\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@169 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/5/10, 8:30 AM",
      "commitName": "2a43cf22f1e5e4ee4ddb99aceb5a566c05b0c6d4",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/1/10, 8:34 AM",
      "commitNameOld": "a2f9d4f043be0fac4d868061fbc5d088ed31823b",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 4.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "public void findNamedFunctions(NodeTraversal t, Node n, Node parent) {\n    if (!NodeUtil.isStatement(n)) {\n        return;\n    }\n    switch(n.getType()) {\n        case Token.VAR:\n            if (n.hasOneChild()) {\n                Node nameNode \u003d n.getFirstChild();\n                if (nameNode.getType() \u003d\u003d Token.NAME \u0026\u0026 nameNode.hasChildren() \u0026\u0026 nameNode.getFirstChild().getType() \u003d\u003d Token.FUNCTION) {\n                    maybeAddFunction(new FunctionVar(n), t.getModule());\n                }\n            }\n            break;\n        case Token.FUNCTION:\n            Preconditions.checkState(NodeUtil.isStatementBlock(parent) || parent.getType() \u003d\u003d Token.LABEL);\n            if (!NodeUtil.isFunctionAnonymous(n)) {\n                Function fn \u003d new NamedFunction(n);\n                maybeAddFunction(fn, t.getModule());\n            }\n            break;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/InlineFunctions.java",
      "functionStartLine": 173,
      "functionName": "findNamedFunctions",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,23 +1,22 @@\n public void findNamedFunctions(NodeTraversal t, Node n, Node parent) {\n     if (!NodeUtil.isStatement(n)) {\n         return;\n     }\n     switch(n.getType()) {\n         case Token.VAR:\n             if (n.hasOneChild()) {\n                 Node nameNode \u003d n.getFirstChild();\n                 if (nameNode.getType() \u003d\u003d Token.NAME \u0026\u0026 nameNode.hasChildren() \u0026\u0026 nameNode.getFirstChild().getType() \u003d\u003d Token.FUNCTION) {\n                     maybeAddFunction(new FunctionVar(n), t.getModule());\n                 }\n             }\n             break;\n         case Token.FUNCTION:\n             Preconditions.checkState(NodeUtil.isStatementBlock(parent) || parent.getType() \u003d\u003d Token.LABEL);\n-            Function fn \u003d new NamedFunction(n);\n-            String name \u003d fn.getName();\n-            if (!name.isEmpty()) {\n+            if (!NodeUtil.isFunctionAnonymous(n)) {\n+                Function fn \u003d new NamedFunction(n);\n                 maybeAddFunction(fn, t.getModule());\n             }\n             break;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2acd6c1986e36bfdbae85c09eb83ac1940b86c73": {
      "type": "Yintroduced",
      "commitMessage": "Fix if-folding compiler crash (issue 43)\nFix property-collapsing compiler crash (issue 34)\nFix labeled VAR compiler crash (issue 41)\nMake [paramName] syntax denote optionality (issue #26)\nBetter function inlining.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@11 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/16/09, 4:04 PM",
      "commitName": "2acd6c1986e36bfdbae85c09eb83ac1940b86c73",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,23 @@\n+public void findNamedFunctions(NodeTraversal t, Node n, Node parent) {\n+    if (!NodeUtil.isStatement(n)) {\n+        return;\n+    }\n+    switch(n.getType()) {\n+        case Token.VAR:\n+            if (n.hasOneChild()) {\n+                Node nameNode \u003d n.getFirstChild();\n+                if (nameNode.getType() \u003d\u003d Token.NAME \u0026\u0026 nameNode.hasChildren() \u0026\u0026 nameNode.getFirstChild().getType() \u003d\u003d Token.FUNCTION) {\n+                    maybeAddFunction(new FunctionVar(n), t.getModule());\n+                }\n+            }\n+            break;\n+        case Token.FUNCTION:\n+            Preconditions.checkState(NodeUtil.isStatementBlock(parent) || parent.getType() \u003d\u003d Token.LABEL);\n+            Function fn \u003d new NamedFunction(n);\n+            String name \u003d fn.getName();\n+            if (!name.isEmpty()) {\n+                maybeAddFunction(fn, t.getModule());\n+            }\n+            break;\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "public void findNamedFunctions(NodeTraversal t, Node n, Node parent) {\n    if (!NodeUtil.isStatement(n)) {\n        return;\n    }\n    switch(n.getType()) {\n        case Token.VAR:\n            if (n.hasOneChild()) {\n                Node nameNode \u003d n.getFirstChild();\n                if (nameNode.getType() \u003d\u003d Token.NAME \u0026\u0026 nameNode.hasChildren() \u0026\u0026 nameNode.getFirstChild().getType() \u003d\u003d Token.FUNCTION) {\n                    maybeAddFunction(new FunctionVar(n), t.getModule());\n                }\n            }\n            break;\n        case Token.FUNCTION:\n            Preconditions.checkState(NodeUtil.isStatementBlock(parent) || parent.getType() \u003d\u003d Token.LABEL);\n            Function fn \u003d new NamedFunction(n);\n            String name \u003d fn.getName();\n            if (!name.isEmpty()) {\n                maybeAddFunction(fn, t.getModule());\n            }\n            break;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/InlineFunctions.java",
      "functionStartLine": 173,
      "functionName": "findNamedFunctions",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}