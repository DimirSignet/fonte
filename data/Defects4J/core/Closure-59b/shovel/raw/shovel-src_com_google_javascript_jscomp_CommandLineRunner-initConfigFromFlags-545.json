{
  "origin": "codeshovel",
  "repositoryName": "Closure-59b",
  "repositoryPath": "/tmp/Closure-59b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CommandLineRunner.java",
  "functionName": "initConfigFromFlags",
  "functionId": "initConfigFromFlags___args-String[]__err-PrintStream",
  "sourceFilePath": "src/com/google/javascript/jscomp/CommandLineRunner.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 545,
  "functionEndLine": 612,
  "numCommitsSeen": 44,
  "timeTaken": 1851,
  "changeHistory": [
    "c4fd3fc003e8420eba5ca4ce0c192e287abd37ea",
    "48cccf202b6cd853409e169d98918462f91301a8",
    "d6ac4fe53569b1415f66db221d7511c74f4a965b",
    "fcccf543e85a214f0948d1ac5cab3fa05363e845",
    "39c4d538a4a1363db7385476d3e6bcc09cb71f65",
    "d38121222cc7c1d5e8dd2c34dcea4c2dc7468450",
    "36a890d0dd7911a5a1b8e1682435945972a05cdc",
    "4672d2c17dbddd139330f247d96b6cc94376a719",
    "cf96848764f0b01a57bd9daa512903a1f0b1c00a",
    "f116658ed959c0a0f8199c3e70675e33742c2c04",
    "fe58a5d1750bab2c5d1d0ef16102c1000e761bd8",
    "260f0ffc9243ef15bd17e324c9cf7e2dfac9cc6a",
    "9147da9979fb00599efd700fa5e0cccfa93d25a5",
    "b29d4a8bc7138f9216930edfebed29d42f0dca89",
    "93b021578e479422012dd323b72110b19cbe41f8",
    "8c5eb247cb5361a6ffa2d86aa4c2de17c234bda7",
    "e5d3e5e012871b87d2f2a59985bc6522bb571ee2"
  ],
  "changeHistoryShort": {
    "c4fd3fc003e8420eba5ca4ce0c192e287abd37ea": "Ybodychange",
    "48cccf202b6cd853409e169d98918462f91301a8": "Ybodychange",
    "d6ac4fe53569b1415f66db221d7511c74f4a965b": "Ybodychange",
    "fcccf543e85a214f0948d1ac5cab3fa05363e845": "Ybodychange",
    "39c4d538a4a1363db7385476d3e6bcc09cb71f65": "Yformatchange",
    "d38121222cc7c1d5e8dd2c34dcea4c2dc7468450": "Ybodychange",
    "36a890d0dd7911a5a1b8e1682435945972a05cdc": "Ybodychange",
    "4672d2c17dbddd139330f247d96b6cc94376a719": "Ybodychange",
    "cf96848764f0b01a57bd9daa512903a1f0b1c00a": "Ybodychange",
    "f116658ed959c0a0f8199c3e70675e33742c2c04": "Ybodychange",
    "fe58a5d1750bab2c5d1d0ef16102c1000e761bd8": "Ybodychange",
    "260f0ffc9243ef15bd17e324c9cf7e2dfac9cc6a": "Ybodychange",
    "9147da9979fb00599efd700fa5e0cccfa93d25a5": "Ybodychange",
    "b29d4a8bc7138f9216930edfebed29d42f0dca89": "Ybodychange",
    "93b021578e479422012dd323b72110b19cbe41f8": "Ymultichange(Yexceptionschange,Ybodychange)",
    "8c5eb247cb5361a6ffa2d86aa4c2de17c234bda7": "Ybodychange",
    "e5d3e5e012871b87d2f2a59985bc6522bb571ee2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c4fd3fc003e8420eba5ca4ce0c192e287abd37ea": {
      "type": "Ybodychange",
      "commitMessage": "\nAdd \"--source_map_format\" to the open source command-line so users can\nstill use Closure Inspector and experiment with the V3 format.\n\nR\u003dnicksantos\nDELTA\u003d15  (15 added, 0 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2537\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1253 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/7/11, 11:26 AM",
      "commitName": "c4fd3fc003e8420eba5ca4ce0c192e287abd37ea",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "6/14/11, 10:53 AM",
      "commitNameOld": "48cccf202b6cd853409e169d98918462f91301a8",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 23.02,
      "commitsBetweenForRepo": 71,
      "commitsBetweenForFile": 1,
      "actualSource": "private void initConfigFromFlags(String[] args, PrintStream err) {\n    List\u003cString\u003e processedArgs \u003d processArgs(args);\n    CmdLineParser parser \u003d new CmdLineParser(flags);\n    Flags.warningGuardSpec.clear();\n    isConfigValid \u003d true;\n    try {\n        parser.parseArgument(processedArgs.toArray(new String[] {}));\n        if (!flags.flag_file.equals(\"\")) {\n            processFlagFile(err);\n        }\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid \u003d false;\n    } catch (IOException ioErr) {\n        err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n        isConfigValid \u003d false;\n    }\n    if (flags.version) {\n        ResourceBundle config \u003d ResourceBundle.getBundle(configResource);\n        err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n        err.flush();\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid \u003d false;\n        parser.printUsage(err);\n    } else {\n        getCommandLineConfig().setPrintTree(flags.print_tree).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setSourceMapFormat(flags.source_map_format).setWarningGuardSpec(Flags.warningGuardSpec).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(ImmutableList.of(flags.output_manifest)).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
      "functionStartLine": 545,
      "functionName": "initConfigFromFlags",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,29 +1,29 @@\n private void initConfigFromFlags(String[] args, PrintStream err) {\n     List\u003cString\u003e processedArgs \u003d processArgs(args);\n     CmdLineParser parser \u003d new CmdLineParser(flags);\n     Flags.warningGuardSpec.clear();\n     isConfigValid \u003d true;\n     try {\n         parser.parseArgument(processedArgs.toArray(new String[] {}));\n         if (!flags.flag_file.equals(\"\")) {\n             processFlagFile(err);\n         }\n     } catch (CmdLineException e) {\n         err.println(e.getMessage());\n         isConfigValid \u003d false;\n     } catch (IOException ioErr) {\n         err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n         isConfigValid \u003d false;\n     }\n     if (flags.version) {\n         ResourceBundle config \u003d ResourceBundle.getBundle(configResource);\n         err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n         err.flush();\n     }\n     if (!isConfigValid || flags.display_help) {\n         isConfigValid \u003d false;\n         parser.printUsage(err);\n     } else {\n-        getCommandLineConfig().setPrintTree(flags.print_tree).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setWarningGuardSpec(Flags.warningGuardSpec).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(ImmutableList.of(flags.output_manifest)).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n+        getCommandLineConfig().setPrintTree(flags.print_tree).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setSourceMapFormat(flags.source_map_format).setWarningGuardSpec(Flags.warningGuardSpec).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(ImmutableList.of(flags.output_manifest)).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "48cccf202b6cd853409e169d98918462f91301a8": {
      "type": "Ybodychange",
      "commitMessage": "\nAllow multiple output_manifest flags, for backwards compatibility\n\nR\u003dzhuyi\nDELTA\u003d54  (21 added, 13 deleted, 20 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2278\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1177 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/14/11, 10:53 AM",
      "commitName": "48cccf202b6cd853409e169d98918462f91301a8",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "4/19/11, 11:28 AM",
      "commitNameOld": "2f8df834aa5b0f6114a42ee0fe0d3729eb83995e",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 55.98,
      "commitsBetweenForRepo": 153,
      "commitsBetweenForFile": 1,
      "actualSource": "private void initConfigFromFlags(String[] args, PrintStream err) {\n    List\u003cString\u003e processedArgs \u003d processArgs(args);\n    CmdLineParser parser \u003d new CmdLineParser(flags);\n    Flags.warningGuardSpec.clear();\n    isConfigValid \u003d true;\n    try {\n        parser.parseArgument(processedArgs.toArray(new String[] {}));\n        if (!flags.flag_file.equals(\"\")) {\n            processFlagFile(err);\n        }\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid \u003d false;\n    } catch (IOException ioErr) {\n        err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n        isConfigValid \u003d false;\n    }\n    if (flags.version) {\n        ResourceBundle config \u003d ResourceBundle.getBundle(configResource);\n        err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n        err.flush();\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid \u003d false;\n        parser.printUsage(err);\n    } else {\n        getCommandLineConfig().setPrintTree(flags.print_tree).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setWarningGuardSpec(Flags.warningGuardSpec).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(ImmutableList.of(flags.output_manifest)).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
      "functionStartLine": 540,
      "functionName": "initConfigFromFlags",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,29 +1,29 @@\n private void initConfigFromFlags(String[] args, PrintStream err) {\n     List\u003cString\u003e processedArgs \u003d processArgs(args);\n     CmdLineParser parser \u003d new CmdLineParser(flags);\n     Flags.warningGuardSpec.clear();\n     isConfigValid \u003d true;\n     try {\n         parser.parseArgument(processedArgs.toArray(new String[] {}));\n         if (!flags.flag_file.equals(\"\")) {\n             processFlagFile(err);\n         }\n     } catch (CmdLineException e) {\n         err.println(e.getMessage());\n         isConfigValid \u003d false;\n     } catch (IOException ioErr) {\n         err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n         isConfigValid \u003d false;\n     }\n     if (flags.version) {\n         ResourceBundle config \u003d ResourceBundle.getBundle(configResource);\n         err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n         err.flush();\n     }\n     if (!isConfigValid || flags.display_help) {\n         isConfigValid \u003d false;\n         parser.printUsage(err);\n     } else {\n-        getCommandLineConfig().setPrintTree(flags.print_tree).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setWarningGuardSpec(Flags.warningGuardSpec).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n+        getCommandLineConfig().setPrintTree(flags.print_tree).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setWarningGuardSpec(Flags.warningGuardSpec).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(ImmutableList.of(flags.output_manifest)).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d6ac4fe53569b1415f66db221d7511c74f4a965b": {
      "type": "Ybodychange",
      "commitMessage": "\nClean up stream-handing a bit\nRemove compute_phase_ordering flag\nFixes issue 412\n\nR\u003djohnlenz\nDELTA\u003d43  (16 added, 7 deleted, 20 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1315\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@989 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/11/11, 10:28 AM",
      "commitName": "d6ac4fe53569b1415f66db221d7511c74f4a965b",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "4/6/11, 11:16 AM",
      "commitNameOld": "fcccf543e85a214f0948d1ac5cab3fa05363e845",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 4.97,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "private void initConfigFromFlags(String[] args, PrintStream err) {\n    List\u003cString\u003e processedArgs \u003d processArgs(args);\n    CmdLineParser parser \u003d new CmdLineParser(flags);\n    Flags.warningGuardSpec.clear();\n    isConfigValid \u003d true;\n    try {\n        parser.parseArgument(processedArgs.toArray(new String[] {}));\n        if (!flags.flag_file.equals(\"\")) {\n            processFlagFile(err);\n        }\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid \u003d false;\n    } catch (IOException ioErr) {\n        err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n        isConfigValid \u003d false;\n    }\n    if (flags.version) {\n        ResourceBundle config \u003d ResourceBundle.getBundle(configResource);\n        err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n        err.flush();\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid \u003d false;\n        parser.printUsage(err);\n    } else {\n        getCommandLineConfig().setPrintTree(flags.print_tree).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setWarningGuardSpec(Flags.warningGuardSpec).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
      "functionStartLine": 535,
      "functionName": "initConfigFromFlags",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,29 +1,29 @@\n private void initConfigFromFlags(String[] args, PrintStream err) {\n     List\u003cString\u003e processedArgs \u003d processArgs(args);\n     CmdLineParser parser \u003d new CmdLineParser(flags);\n     Flags.warningGuardSpec.clear();\n     isConfigValid \u003d true;\n     try {\n         parser.parseArgument(processedArgs.toArray(new String[] {}));\n         if (!flags.flag_file.equals(\"\")) {\n             processFlagFile(err);\n         }\n     } catch (CmdLineException e) {\n         err.println(e.getMessage());\n         isConfigValid \u003d false;\n     } catch (IOException ioErr) {\n         err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n         isConfigValid \u003d false;\n     }\n     if (flags.version) {\n         ResourceBundle config \u003d ResourceBundle.getBundle(configResource);\n         err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n         err.flush();\n     }\n     if (!isConfigValid || flags.display_help) {\n         isConfigValid \u003d false;\n         parser.printUsage(err);\n     } else {\n-        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setWarningGuardSpec(Flags.warningGuardSpec).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n+        getCommandLineConfig().setPrintTree(flags.print_tree).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setWarningGuardSpec(Flags.warningGuardSpec).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "fcccf543e85a214f0948d1ac5cab3fa05363e845": {
      "type": "Ybodychange",
      "commitMessage": "\nCreate new command-line parsers so that jscomp_off, jscomp_warning\njscomp_error get interpreted in the correct order relative\nto one another.\nFixes issue 407\n\nR\u003dzhuyi,acleung\nDELTA\u003d239  (181 added, 33 deleted, 25 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1281\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@973 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/6/11, 11:16 AM",
      "commitName": "fcccf543e85a214f0948d1ac5cab3fa05363e845",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "3/15/11, 3:48 PM",
      "commitNameOld": "e76e5680cb1816ba1e420fd6aa2c37f6fdb8c941",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 21.81,
      "commitsBetweenForRepo": 74,
      "commitsBetweenForFile": 1,
      "actualSource": "private void initConfigFromFlags(String[] args, PrintStream err) {\n    List\u003cString\u003e processedArgs \u003d processArgs(args);\n    CmdLineParser parser \u003d new CmdLineParser(flags);\n    Flags.warningGuardSpec.clear();\n    isConfigValid \u003d true;\n    try {\n        parser.parseArgument(processedArgs.toArray(new String[] {}));\n        if (!flags.flag_file.equals(\"\")) {\n            processFlagFile(err);\n        }\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid \u003d false;\n    } catch (IOException ioErr) {\n        err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n        isConfigValid \u003d false;\n    }\n    if (flags.version) {\n        ResourceBundle config \u003d ResourceBundle.getBundle(configResource);\n        err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n        err.flush();\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid \u003d false;\n        parser.printUsage(err);\n    } else {\n        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setWarningGuardSpec(Flags.warningGuardSpec).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
      "functionStartLine": 541,
      "functionName": "initConfigFromFlags",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,28 +1,29 @@\n private void initConfigFromFlags(String[] args, PrintStream err) {\n     List\u003cString\u003e processedArgs \u003d processArgs(args);\n     CmdLineParser parser \u003d new CmdLineParser(flags);\n+    Flags.warningGuardSpec.clear();\n     isConfigValid \u003d true;\n     try {\n         parser.parseArgument(processedArgs.toArray(new String[] {}));\n         if (!flags.flag_file.equals(\"\")) {\n             processFlagFile(err);\n         }\n     } catch (CmdLineException e) {\n         err.println(e.getMessage());\n         isConfigValid \u003d false;\n     } catch (IOException ioErr) {\n         err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n         isConfigValid \u003d false;\n     }\n     if (flags.version) {\n         ResourceBundle config \u003d ResourceBundle.getBundle(configResource);\n         err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n         err.flush();\n     }\n     if (!isConfigValid || flags.display_help) {\n         isConfigValid \u003d false;\n         parser.printUsage(err);\n     } else {\n-        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n+        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setWarningGuardSpec(Flags.warningGuardSpec).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "39c4d538a4a1363db7385476d3e6bcc09cb71f65": {
      "type": "Yformatchange",
      "commitMessage": "\nHide \"dev_mode\" from the commond-line usage message.\nFixes issue 348.\n\nR\u003dnicksantos\nDELTA\u003d3  (2 added, 0 deleted, 1 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d664\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@813 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/24/11, 10:14 AM",
      "commitName": "39c4d538a4a1363db7385476d3e6bcc09cb71f65",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "2/8/11, 9:38 PM",
      "commitNameOld": "d38121222cc7c1d5e8dd2c34dcea4c2dc7468450",
      "commitAuthorOld": "kochi@google.com",
      "daysBetweenCommits": 15.52,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "actualSource": "private void initConfigFromFlags(String[] args, PrintStream err) {\n    List\u003cString\u003e processedArgs \u003d processArgs(args);\n    CmdLineParser parser \u003d new CmdLineParser(flags);\n    isConfigValid \u003d true;\n    try {\n        parser.parseArgument(processedArgs.toArray(new String[] {}));\n        if (!flags.flag_file.equals(\"\")) {\n            processFlagFile(err);\n        }\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid \u003d false;\n    } catch (IOException ioErr) {\n        err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n        isConfigValid \u003d false;\n    }\n    if (flags.version) {\n        ResourceBundle config \u003d ResourceBundle.getBundle(configResource);\n        err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n        err.flush();\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid \u003d false;\n        parser.printUsage(err);\n    } else {\n        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
      "functionStartLine": 475,
      "functionName": "initConfigFromFlags",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "d38121222cc7c1d5e8dd2c34dcea4c2dc7468450": {
      "type": "Ybodychange",
      "commitMessage": "\nAdd --accept_const_keyword and --language_in flag so that we can accept \u0027const\u0027 keyword and ECMAScript5 compatible\njavascript source code.\n\nR\u003djohnlenz\nDELTA\u003d115  (104 added, 0 deleted, 11 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d480\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@771 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/8/11, 9:38 PM",
      "commitName": "d38121222cc7c1d5e8dd2c34dcea4c2dc7468450",
      "commitAuthor": "kochi@google.com",
      "commitDateOld": "1/31/11, 4:27 PM",
      "commitNameOld": "36a890d0dd7911a5a1b8e1682435945972a05cdc",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 8.22,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "actualSource": "private void initConfigFromFlags(String[] args, PrintStream err) {\n    List\u003cString\u003e processedArgs \u003d processArgs(args);\n    CmdLineParser parser \u003d new CmdLineParser(flags);\n    isConfigValid \u003d true;\n    try {\n        parser.parseArgument(processedArgs.toArray(new String[] {}));\n        if (!flags.flag_file.equals(\"\")) {\n            processFlagFile(err);\n        }\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid \u003d false;\n    } catch (IOException ioErr) {\n        err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n        isConfigValid \u003d false;\n    }\n    if (flags.version) {\n        ResourceBundle config \u003d ResourceBundle.getBundle(configResource);\n        err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n        err.flush();\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid \u003d false;\n        parser.printUsage(err);\n    } else {\n        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
      "functionStartLine": 473,
      "functionName": "initConfigFromFlags",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,28 +1,28 @@\n private void initConfigFromFlags(String[] args, PrintStream err) {\n     List\u003cString\u003e processedArgs \u003d processArgs(args);\n     CmdLineParser parser \u003d new CmdLineParser(flags);\n     isConfigValid \u003d true;\n     try {\n         parser.parseArgument(processedArgs.toArray(new String[] {}));\n         if (!flags.flag_file.equals(\"\")) {\n             processFlagFile(err);\n         }\n     } catch (CmdLineException e) {\n         err.println(e.getMessage());\n         isConfigValid \u003d false;\n     } catch (IOException ioErr) {\n         err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n         isConfigValid \u003d false;\n     }\n     if (flags.version) {\n         ResourceBundle config \u003d ResourceBundle.getBundle(configResource);\n         err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n         err.flush();\n     }\n     if (!isConfigValid || flags.display_help) {\n         isConfigValid \u003d false;\n         parser.printUsage(err);\n     } else {\n-        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest);\n+        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "36a890d0dd7911a5a1b8e1682435945972a05cdc": {
      "type": "Ybodychange",
      "commitMessage": "\nRemove the --output_wrapper_marker flag.\nNo one uses this, and it makes the API harder to understand.\n\nR\u003dacleung\nDELTA\u003d26  (2 added, 23 deleted, 1 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d409\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@741 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/31/11, 4:27 PM",
      "commitName": "36a890d0dd7911a5a1b8e1682435945972a05cdc",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "1/21/11, 1:43 PM",
      "commitNameOld": "215bff7bf7034ad0cb15caa3eaaa1be561aa3ec3",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 10.11,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "actualSource": "private void initConfigFromFlags(String[] args, PrintStream err) {\n    List\u003cString\u003e processedArgs \u003d processArgs(args);\n    CmdLineParser parser \u003d new CmdLineParser(flags);\n    isConfigValid \u003d true;\n    try {\n        parser.parseArgument(processedArgs.toArray(new String[] {}));\n        if (!flags.flag_file.equals(\"\")) {\n            processFlagFile(err);\n        }\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid \u003d false;\n    } catch (IOException ioErr) {\n        err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n        isConfigValid \u003d false;\n    }\n    if (flags.version) {\n        ResourceBundle config \u003d ResourceBundle.getBundle(configResource);\n        err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n        err.flush();\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid \u003d false;\n        parser.printUsage(err);\n    } else {\n        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
      "functionStartLine": 464,
      "functionName": "initConfigFromFlags",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,28 +1,28 @@\n private void initConfigFromFlags(String[] args, PrintStream err) {\n     List\u003cString\u003e processedArgs \u003d processArgs(args);\n     CmdLineParser parser \u003d new CmdLineParser(flags);\n     isConfigValid \u003d true;\n     try {\n         parser.parseArgument(processedArgs.toArray(new String[] {}));\n         if (!flags.flag_file.equals(\"\")) {\n             processFlagFile(err);\n         }\n     } catch (CmdLineException e) {\n         err.println(e.getMessage());\n         isConfigValid \u003d false;\n     } catch (IOException ioErr) {\n         err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n         isConfigValid \u003d false;\n     }\n     if (flags.version) {\n         ResourceBundle config \u003d ResourceBundle.getBundle(configResource);\n         err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n         err.flush();\n     }\n     if (!isConfigValid || flags.display_help) {\n         isConfigValid \u003d false;\n         parser.printUsage(err);\n     } else {\n-        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setOutputWrapperMarker(flags.output_wrapper_marker).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest);\n+        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4672d2c17dbddd139330f247d96b6cc94376a719": {
      "type": "Ybodychange",
      "commitMessage": "\nFixes issue 162\nReimplement the --flagfile option\n\nR\u003djohnlenz,acleung\nDELTA\u003d73  (72 added, 0 deleted, 1 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d324\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@717 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/20/11, 2:51 PM",
      "commitName": "4672d2c17dbddd139330f247d96b6cc94376a719",
      "commitAuthor": "zhuyi@google.com",
      "commitDateOld": "1/18/11, 10:02 AM",
      "commitNameOld": "43c245f0ff8d409e81e25687e69d34666b7cf26a",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 2.2,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "actualSource": "private void initConfigFromFlags(String[] args, PrintStream err) {\n    List\u003cString\u003e processedArgs \u003d processArgs(args);\n    CmdLineParser parser \u003d new CmdLineParser(flags);\n    isConfigValid \u003d true;\n    try {\n        parser.parseArgument(processedArgs.toArray(new String[] {}));\n        if (!flags.flag_file.equals(\"\")) {\n            processFlagFile(err);\n        }\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid \u003d false;\n    } catch (IOException ioErr) {\n        err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n        isConfigValid \u003d false;\n    }\n    if (flags.version) {\n        ResourceBundle config \u003d ResourceBundle.getBundle(configResource);\n        err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n        err.flush();\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid \u003d false;\n        parser.printUsage(err);\n    } else {\n        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setOutputWrapperMarker(flags.output_wrapper_marker).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
      "functionStartLine": 469,
      "functionName": "initConfigFromFlags",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,39 +1,28 @@\n private void initConfigFromFlags(String[] args, PrintStream err) {\n-    Pattern argPattern \u003d Pattern.compile(\"(--[a-zA-Z_]+)\u003d(.*)\");\n-    Pattern quotesPattern \u003d Pattern.compile(\"^[\u0027\\\"](.*)[\u0027\\\"]$\");\n-    List\u003cString\u003e processedArgs \u003d Lists.newArrayList();\n-    for (String arg : args) {\n-        Matcher matcher \u003d argPattern.matcher(arg);\n-        if (matcher.matches()) {\n-            processedArgs.add(matcher.group(1));\n-            String value \u003d matcher.group(2);\n-            Matcher quotesMatcher \u003d quotesPattern.matcher(value);\n-            if (quotesMatcher.matches()) {\n-                processedArgs.add(quotesMatcher.group(1));\n-            } else {\n-                processedArgs.add(value);\n-            }\n-        } else {\n-            processedArgs.add(arg);\n-        }\n-    }\n+    List\u003cString\u003e processedArgs \u003d processArgs(args);\n     CmdLineParser parser \u003d new CmdLineParser(flags);\n     isConfigValid \u003d true;\n     try {\n         parser.parseArgument(processedArgs.toArray(new String[] {}));\n+        if (!flags.flag_file.equals(\"\")) {\n+            processFlagFile(err);\n+        }\n     } catch (CmdLineException e) {\n         err.println(e.getMessage());\n         isConfigValid \u003d false;\n+    } catch (IOException ioErr) {\n+        err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n+        isConfigValid \u003d false;\n     }\n     if (flags.version) {\n         ResourceBundle config \u003d ResourceBundle.getBundle(configResource);\n         err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n         err.flush();\n     }\n     if (!isConfigValid || flags.display_help) {\n         isConfigValid \u003d false;\n         parser.printUsage(err);\n     } else {\n         getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setOutputWrapperMarker(flags.output_wrapper_marker).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "cf96848764f0b01a57bd9daa512903a1f0b1c00a": {
      "type": "Ybodychange",
      "commitMessage": "\nAdd a flag for defining entry points that we won\u0027t remove\nin manage_closure_dependencies mode.\nFixes issue 187\n\nR\u003dacleung\nDELTA\u003d232  (199 added, 15 deleted, 18 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d285838\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@476 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/5/10, 8:56 AM",
      "commitName": "cf96848764f0b01a57bd9daa512903a1f0b1c00a",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "9/27/10, 8:50 AM",
      "commitNameOld": "3b4004792feca6cf307fdcd85baaae3e1aef4bd4",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 8.0,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "private void initConfigFromFlags(String[] args, PrintStream err) {\n    Pattern argPattern \u003d Pattern.compile(\"(--[a-zA-Z_]+)\u003d(.*)\");\n    Pattern quotesPattern \u003d Pattern.compile(\"^[\u0027\\\"](.*)[\u0027\\\"]$\");\n    List\u003cString\u003e processedArgs \u003d Lists.newArrayList();\n    for (String arg : args) {\n        Matcher matcher \u003d argPattern.matcher(arg);\n        if (matcher.matches()) {\n            processedArgs.add(matcher.group(1));\n            String value \u003d matcher.group(2);\n            Matcher quotesMatcher \u003d quotesPattern.matcher(value);\n            if (quotesMatcher.matches()) {\n                processedArgs.add(quotesMatcher.group(1));\n            } else {\n                processedArgs.add(value);\n            }\n        } else {\n            processedArgs.add(arg);\n        }\n    }\n    CmdLineParser parser \u003d new CmdLineParser(flags);\n    isConfigValid \u003d true;\n    try {\n        parser.parseArgument(processedArgs.toArray(new String[] {}));\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid \u003d false;\n    }\n    if (flags.version) {\n        ResourceBundle config \u003d ResourceBundle.getBundle(configResource);\n        err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n        err.flush();\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid \u003d false;\n        parser.printUsage(err);\n    } else {\n        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setOutputWrapperMarker(flags.output_wrapper_marker).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
      "functionStartLine": 403,
      "functionName": "initConfigFromFlags",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,39 +1,39 @@\n private void initConfigFromFlags(String[] args, PrintStream err) {\n     Pattern argPattern \u003d Pattern.compile(\"(--[a-zA-Z_]+)\u003d(.*)\");\n     Pattern quotesPattern \u003d Pattern.compile(\"^[\u0027\\\"](.*)[\u0027\\\"]$\");\n     List\u003cString\u003e processedArgs \u003d Lists.newArrayList();\n     for (String arg : args) {\n         Matcher matcher \u003d argPattern.matcher(arg);\n         if (matcher.matches()) {\n             processedArgs.add(matcher.group(1));\n             String value \u003d matcher.group(2);\n             Matcher quotesMatcher \u003d quotesPattern.matcher(value);\n             if (quotesMatcher.matches()) {\n                 processedArgs.add(quotesMatcher.group(1));\n             } else {\n                 processedArgs.add(value);\n             }\n         } else {\n             processedArgs.add(arg);\n         }\n     }\n     CmdLineParser parser \u003d new CmdLineParser(flags);\n     isConfigValid \u003d true;\n     try {\n         parser.parseArgument(processedArgs.toArray(new String[] {}));\n     } catch (CmdLineException e) {\n         err.println(e.getMessage());\n         isConfigValid \u003d false;\n     }\n     if (flags.version) {\n         ResourceBundle config \u003d ResourceBundle.getBundle(configResource);\n         err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n         err.flush();\n     }\n     if (!isConfigValid || flags.display_help) {\n         isConfigValid \u003d false;\n         parser.printUsage(err);\n     } else {\n-        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setOutputWrapperMarker(flags.output_wrapper_marker).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setOutputManifest(flags.output_manifest);\n+        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setOutputWrapperMarker(flags.output_wrapper_marker).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f116658ed959c0a0f8199c3e70675e33742c2c04": {
      "type": "Ybodychange",
      "commitMessage": "\nd\u0027oh!\n\nR\u003djohnlenz\nDELTA\u003d2  (0 added, 0 deleted, 2 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d239126\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@445 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/20/10, 1:23 PM",
      "commitName": "f116658ed959c0a0f8199c3e70675e33742c2c04",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "9/17/10, 12:56 PM",
      "commitNameOld": "fe58a5d1750bab2c5d1d0ef16102c1000e761bd8",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 3.02,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private void initConfigFromFlags(String[] args, PrintStream err) {\n    Pattern argPattern \u003d Pattern.compile(\"(--[a-zA-Z_]+)\u003d(.*)\");\n    Pattern quotesPattern \u003d Pattern.compile(\"^[\u0027\\\"](.*)[\u0027\\\"]$\");\n    List\u003cString\u003e processedArgs \u003d Lists.newArrayList();\n    for (String arg : args) {\n        Matcher matcher \u003d argPattern.matcher(arg);\n        if (matcher.matches()) {\n            processedArgs.add(matcher.group(1));\n            String value \u003d matcher.group(2);\n            Matcher quotesMatcher \u003d quotesPattern.matcher(value);\n            if (quotesMatcher.matches()) {\n                processedArgs.add(quotesMatcher.group(1));\n            } else {\n                processedArgs.add(value);\n            }\n        } else {\n            processedArgs.add(arg);\n        }\n    }\n    CmdLineParser parser \u003d new CmdLineParser(flags);\n    isConfigValid \u003d true;\n    try {\n        parser.parseArgument(processedArgs.toArray(new String[] {}));\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid \u003d false;\n    }\n    if (flags.version) {\n        ResourceBundle config \u003d ResourceBundle.getBundle(configResource);\n        err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n        err.flush();\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid \u003d false;\n        parser.printUsage(err);\n    } else {\n        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setOutputWrapperMarker(flags.output_wrapper_marker).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setOutputManifest(flags.output_manifest);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
      "functionStartLine": 390,
      "functionName": "initConfigFromFlags",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,39 +1,39 @@\n private void initConfigFromFlags(String[] args, PrintStream err) {\n     Pattern argPattern \u003d Pattern.compile(\"(--[a-zA-Z_]+)\u003d(.*)\");\n     Pattern quotesPattern \u003d Pattern.compile(\"^[\u0027\\\"](.*)[\u0027\\\"]$\");\n     List\u003cString\u003e processedArgs \u003d Lists.newArrayList();\n     for (String arg : args) {\n         Matcher matcher \u003d argPattern.matcher(arg);\n         if (matcher.matches()) {\n             processedArgs.add(matcher.group(1));\n             String value \u003d matcher.group(2);\n             Matcher quotesMatcher \u003d quotesPattern.matcher(value);\n             if (quotesMatcher.matches()) {\n                 processedArgs.add(quotesMatcher.group(1));\n             } else {\n                 processedArgs.add(value);\n             }\n         } else {\n             processedArgs.add(arg);\n         }\n     }\n     CmdLineParser parser \u003d new CmdLineParser(flags);\n     isConfigValid \u003d true;\n     try {\n         parser.parseArgument(processedArgs.toArray(new String[] {}));\n     } catch (CmdLineException e) {\n         err.println(e.getMessage());\n         isConfigValid \u003d false;\n     }\n     if (flags.version) {\n         ResourceBundle config \u003d ResourceBundle.getBundle(configResource);\n-        err.println(\"Closure Compiler (http://code.google.com/p/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n+        err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n         err.flush();\n     }\n     if (!isConfigValid || flags.display_help) {\n         isConfigValid \u003d false;\n         parser.printUsage(err);\n     } else {\n         getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setOutputWrapperMarker(flags.output_wrapper_marker).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setOutputManifest(flags.output_manifest);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "fe58a5d1750bab2c5d1d0ef16102c1000e761bd8": {
      "type": "Ybodychange",
      "commitMessage": "\nAdd version numbers to closure compiler. \nFixes issue 74.\n\nR\u003djohnlenz\nDELTA\u003d56  (54 added, 0 deleted, 2 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d229045\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@440 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/17/10, 12:56 PM",
      "commitName": "fe58a5d1750bab2c5d1d0ef16102c1000e761bd8",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "8/20/10, 4:46 PM",
      "commitNameOld": "61b5204064333144810c184d38b4dc78f947bd62",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 27.84,
      "commitsBetweenForRepo": 63,
      "commitsBetweenForFile": 1,
      "actualSource": "private void initConfigFromFlags(String[] args, PrintStream err) {\n    Pattern argPattern \u003d Pattern.compile(\"(--[a-zA-Z_]+)\u003d(.*)\");\n    Pattern quotesPattern \u003d Pattern.compile(\"^[\u0027\\\"](.*)[\u0027\\\"]$\");\n    List\u003cString\u003e processedArgs \u003d Lists.newArrayList();\n    for (String arg : args) {\n        Matcher matcher \u003d argPattern.matcher(arg);\n        if (matcher.matches()) {\n            processedArgs.add(matcher.group(1));\n            String value \u003d matcher.group(2);\n            Matcher quotesMatcher \u003d quotesPattern.matcher(value);\n            if (quotesMatcher.matches()) {\n                processedArgs.add(quotesMatcher.group(1));\n            } else {\n                processedArgs.add(value);\n            }\n        } else {\n            processedArgs.add(arg);\n        }\n    }\n    CmdLineParser parser \u003d new CmdLineParser(flags);\n    isConfigValid \u003d true;\n    try {\n        parser.parseArgument(processedArgs.toArray(new String[] {}));\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid \u003d false;\n    }\n    if (flags.version) {\n        ResourceBundle config \u003d ResourceBundle.getBundle(configResource);\n        err.println(\"Closure Compiler (http://code.google.com/p/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n        err.flush();\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid \u003d false;\n        parser.printUsage(err);\n    } else {\n        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setOutputWrapperMarker(flags.output_wrapper_marker).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setOutputManifest(flags.output_manifest);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
      "functionStartLine": 390,
      "functionName": "initConfigFromFlags",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,34 +1,39 @@\n private void initConfigFromFlags(String[] args, PrintStream err) {\n     Pattern argPattern \u003d Pattern.compile(\"(--[a-zA-Z_]+)\u003d(.*)\");\n     Pattern quotesPattern \u003d Pattern.compile(\"^[\u0027\\\"](.*)[\u0027\\\"]$\");\n     List\u003cString\u003e processedArgs \u003d Lists.newArrayList();\n     for (String arg : args) {\n         Matcher matcher \u003d argPattern.matcher(arg);\n         if (matcher.matches()) {\n             processedArgs.add(matcher.group(1));\n             String value \u003d matcher.group(2);\n             Matcher quotesMatcher \u003d quotesPattern.matcher(value);\n             if (quotesMatcher.matches()) {\n                 processedArgs.add(quotesMatcher.group(1));\n             } else {\n                 processedArgs.add(value);\n             }\n         } else {\n             processedArgs.add(arg);\n         }\n     }\n     CmdLineParser parser \u003d new CmdLineParser(flags);\n     isConfigValid \u003d true;\n     try {\n         parser.parseArgument(processedArgs.toArray(new String[] {}));\n     } catch (CmdLineException e) {\n         err.println(e.getMessage());\n         isConfigValid \u003d false;\n     }\n+    if (flags.version) {\n+        ResourceBundle config \u003d ResourceBundle.getBundle(configResource);\n+        err.println(\"Closure Compiler (http://code.google.com/p/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n+        err.flush();\n+    }\n     if (!isConfigValid || flags.display_help) {\n         isConfigValid \u003d false;\n         parser.printUsage(err);\n     } else {\n         getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setOutputWrapperMarker(flags.output_wrapper_marker).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setOutputManifest(flags.output_manifest);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "260f0ffc9243ef15bd17e324c9cf7e2dfac9cc6a": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/05/13 by nick\n\n        add an --output_manifest flag.\n\n        R\u003djoey\n        DELTA\u003d112  (107 added, 0 deleted, 5 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2002\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@210 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/13/10, 5:34 PM",
      "commitName": "260f0ffc9243ef15bd17e324c9cf7e2dfac9cc6a",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "5/3/10, 7:03 AM",
      "commitNameOld": "9147da9979fb00599efd700fa5e0cccfa93d25a5",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 10.44,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "private void initConfigFromFlags(String[] args, PrintStream err) {\n    Pattern argPattern \u003d Pattern.compile(\"(--[a-zA-Z_]+)\u003d(.*)\");\n    Pattern quotesPattern \u003d Pattern.compile(\"^[\u0027\\\"](.*)[\u0027\\\"]$\");\n    List\u003cString\u003e processedArgs \u003d Lists.newArrayList();\n    for (String arg : args) {\n        Matcher matcher \u003d argPattern.matcher(arg);\n        if (matcher.matches()) {\n            processedArgs.add(matcher.group(1));\n            String value \u003d matcher.group(2);\n            Matcher quotesMatcher \u003d quotesPattern.matcher(value);\n            if (quotesMatcher.matches()) {\n                processedArgs.add(quotesMatcher.group(1));\n            } else {\n                processedArgs.add(value);\n            }\n        } else {\n            processedArgs.add(arg);\n        }\n    }\n    CmdLineParser parser \u003d new CmdLineParser(flags);\n    isConfigValid \u003d true;\n    try {\n        parser.parseArgument(processedArgs.toArray(new String[] {}));\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid \u003d false;\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid \u003d false;\n        parser.printUsage(err);\n    } else {\n        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setOutputWrapperMarker(flags.output_wrapper_marker).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setOutputManifest(flags.output_manifest);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
      "functionStartLine": 376,
      "functionName": "initConfigFromFlags",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,34 +1,34 @@\n private void initConfigFromFlags(String[] args, PrintStream err) {\n     Pattern argPattern \u003d Pattern.compile(\"(--[a-zA-Z_]+)\u003d(.*)\");\n     Pattern quotesPattern \u003d Pattern.compile(\"^[\u0027\\\"](.*)[\u0027\\\"]$\");\n     List\u003cString\u003e processedArgs \u003d Lists.newArrayList();\n     for (String arg : args) {\n         Matcher matcher \u003d argPattern.matcher(arg);\n         if (matcher.matches()) {\n             processedArgs.add(matcher.group(1));\n             String value \u003d matcher.group(2);\n             Matcher quotesMatcher \u003d quotesPattern.matcher(value);\n             if (quotesMatcher.matches()) {\n                 processedArgs.add(quotesMatcher.group(1));\n             } else {\n                 processedArgs.add(value);\n             }\n         } else {\n             processedArgs.add(arg);\n         }\n     }\n     CmdLineParser parser \u003d new CmdLineParser(flags);\n     isConfigValid \u003d true;\n     try {\n         parser.parseArgument(processedArgs.toArray(new String[] {}));\n     } catch (CmdLineException e) {\n         err.println(e.getMessage());\n         isConfigValid \u003d false;\n     }\n     if (!isConfigValid || flags.display_help) {\n         isConfigValid \u003d false;\n         parser.printUsage(err);\n     } else {\n-        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setOutputWrapperMarker(flags.output_wrapper_marker).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies);\n+        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setOutputWrapperMarker(flags.output_wrapper_marker).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setOutputManifest(flags.output_manifest);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9147da9979fb00599efd700fa5e0cccfa93d25a5": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/04/29 by alan\n\n        Don\u0027t inline a variable that has dependence on outer scoped variables.\n\n        R\u003dnick\n        DELTA\u003d44  (41 added, 0 deleted, 3 changed)\n\nChange on 2010/04/29 by nick\n\n        Remove some dead code.\n\n        R\u003dalan\n        DELTA\u003d113  (0 added, 113 deleted, 0 changed)\n\nChange on 2010/04/30 by andrew\n\n        -Fix up a copy/paste error in a comment.\n\n        R\u003djohn\n        DELTA\u003d1  (0 added, 0 deleted, 1 changed)\n\nChange on 2010/04/30 by nick\n\n        Prune sources that are not required when --manage_closure_dependencies\n        is on.\n\n        R\u003dalan\n        DELTA\u003d45  (22 added, 0 deleted, 23 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dlwqqkv\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@201 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/3/10, 7:03 AM",
      "commitName": "9147da9979fb00599efd700fa5e0cccfa93d25a5",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/21/10, 4:48 PM",
      "commitNameOld": "5bde370c377946671edd3408878413d236399944",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 11.59,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "private void initConfigFromFlags(String[] args, PrintStream err) {\n    Pattern argPattern \u003d Pattern.compile(\"(--[a-zA-Z_]+)\u003d(.*)\");\n    Pattern quotesPattern \u003d Pattern.compile(\"^[\u0027\\\"](.*)[\u0027\\\"]$\");\n    List\u003cString\u003e processedArgs \u003d Lists.newArrayList();\n    for (String arg : args) {\n        Matcher matcher \u003d argPattern.matcher(arg);\n        if (matcher.matches()) {\n            processedArgs.add(matcher.group(1));\n            String value \u003d matcher.group(2);\n            Matcher quotesMatcher \u003d quotesPattern.matcher(value);\n            if (quotesMatcher.matches()) {\n                processedArgs.add(quotesMatcher.group(1));\n            } else {\n                processedArgs.add(value);\n            }\n        } else {\n            processedArgs.add(arg);\n        }\n    }\n    CmdLineParser parser \u003d new CmdLineParser(flags);\n    isConfigValid \u003d true;\n    try {\n        parser.parseArgument(processedArgs.toArray(new String[] {}));\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid \u003d false;\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid \u003d false;\n        parser.printUsage(err);\n    } else {\n        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setOutputWrapperMarker(flags.output_wrapper_marker).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
      "functionStartLine": 367,
      "functionName": "initConfigFromFlags",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,34 +1,34 @@\n private void initConfigFromFlags(String[] args, PrintStream err) {\n     Pattern argPattern \u003d Pattern.compile(\"(--[a-zA-Z_]+)\u003d(.*)\");\n     Pattern quotesPattern \u003d Pattern.compile(\"^[\u0027\\\"](.*)[\u0027\\\"]$\");\n     List\u003cString\u003e processedArgs \u003d Lists.newArrayList();\n     for (String arg : args) {\n         Matcher matcher \u003d argPattern.matcher(arg);\n         if (matcher.matches()) {\n             processedArgs.add(matcher.group(1));\n             String value \u003d matcher.group(2);\n             Matcher quotesMatcher \u003d quotesPattern.matcher(value);\n             if (quotesMatcher.matches()) {\n                 processedArgs.add(quotesMatcher.group(1));\n             } else {\n                 processedArgs.add(value);\n             }\n         } else {\n             processedArgs.add(arg);\n         }\n     }\n     CmdLineParser parser \u003d new CmdLineParser(flags);\n     isConfigValid \u003d true;\n     try {\n         parser.parseArgument(processedArgs.toArray(new String[] {}));\n     } catch (CmdLineException e) {\n         err.println(e.getMessage());\n         isConfigValid \u003d false;\n     }\n     if (!isConfigValid || flags.display_help) {\n         isConfigValid \u003d false;\n         parser.printUsage(err);\n     } else {\n-        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setOutputWrapperMarker(flags.output_wrapper_marker).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setSortClosureDependencies(flags.sort_closure_dependencies);\n+        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setOutputWrapperMarker(flags.output_wrapper_marker).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b29d4a8bc7138f9216930edfebed29d42f0dca89": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/04/19 by nick\n\n        automatic source-sorting based on closure dependencies.\n\n        R\u003dalan\n        DELTA\u003d98  (89 added, 5 deleted, 4 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dohwxnh\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@192 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/20/10, 9:00 AM",
      "commitName": "b29d4a8bc7138f9216930edfebed29d42f0dca89",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/8/10, 11:11 AM",
      "commitNameOld": "93b021578e479422012dd323b72110b19cbe41f8",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 11.91,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "private void initConfigFromFlags(String[] args, PrintStream err) {\n    Pattern argPattern \u003d Pattern.compile(\"(--[a-zA-Z_]+)\u003d(.*)\");\n    Pattern quotesPattern \u003d Pattern.compile(\"^[\u0027\\\"](.*)[\u0027\\\"]$\");\n    List\u003cString\u003e processedArgs \u003d Lists.newArrayList();\n    for (String arg : args) {\n        Matcher matcher \u003d argPattern.matcher(arg);\n        if (matcher.matches()) {\n            processedArgs.add(matcher.group(1));\n            String value \u003d matcher.group(2);\n            Matcher quotesMatcher \u003d quotesPattern.matcher(value);\n            if (quotesMatcher.matches()) {\n                processedArgs.add(quotesMatcher.group(1));\n            } else {\n                processedArgs.add(value);\n            }\n        } else {\n            processedArgs.add(arg);\n        }\n    }\n    CmdLineParser parser \u003d new CmdLineParser(flags);\n    isConfigValid \u003d true;\n    try {\n        parser.parseArgument(processedArgs.toArray(new String[] {}));\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid \u003d false;\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid \u003d false;\n        parser.printUsage(err);\n    } else {\n        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setOutputWrapperMarker(flags.output_wrapper_marker).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setSortClosureDependencies(flags.sort_closure_dependencies);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
      "functionStartLine": 365,
      "functionName": "initConfigFromFlags",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,34 +1,34 @@\n private void initConfigFromFlags(String[] args, PrintStream err) {\n     Pattern argPattern \u003d Pattern.compile(\"(--[a-zA-Z_]+)\u003d(.*)\");\n     Pattern quotesPattern \u003d Pattern.compile(\"^[\u0027\\\"](.*)[\u0027\\\"]$\");\n     List\u003cString\u003e processedArgs \u003d Lists.newArrayList();\n     for (String arg : args) {\n         Matcher matcher \u003d argPattern.matcher(arg);\n         if (matcher.matches()) {\n             processedArgs.add(matcher.group(1));\n             String value \u003d matcher.group(2);\n             Matcher quotesMatcher \u003d quotesPattern.matcher(value);\n             if (quotesMatcher.matches()) {\n                 processedArgs.add(quotesMatcher.group(1));\n             } else {\n                 processedArgs.add(value);\n             }\n         } else {\n             processedArgs.add(arg);\n         }\n     }\n     CmdLineParser parser \u003d new CmdLineParser(flags);\n     isConfigValid \u003d true;\n     try {\n         parser.parseArgument(processedArgs.toArray(new String[] {}));\n     } catch (CmdLineException e) {\n         err.println(e.getMessage());\n         isConfigValid \u003d false;\n     }\n     if (!isConfigValid || flags.display_help) {\n         isConfigValid \u003d false;\n         parser.printUsage(err);\n     } else {\n-        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setOutputWrapperMarker(flags.output_wrapper_marker).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset);\n+        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setOutputWrapperMarker(flags.output_wrapper_marker).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setSortClosureDependencies(flags.sort_closure_dependencies);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "93b021578e479422012dd323b72110b19cbe41f8": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "\nChange on 2010/04/07 by john\n\n        Add \"help\" option to the open source command-line.\n        Fixes issue 141.\n\n        R\u003dnick\n        DELTA\u003d95  (25 added, 28 deleted, 42 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dijzeqt\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@175 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/8/10, 11:11 AM",
      "commitName": "93b021578e479422012dd323b72110b19cbe41f8",
      "commitAuthor": "Nicholas.J.Santos",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "\nChange on 2010/04/07 by john\n\n        Add \"help\" option to the open source command-line.\n        Fixes issue 141.\n\n        R\u003dnick\n        DELTA\u003d95  (25 added, 28 deleted, 42 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dijzeqt\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@175 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "4/8/10, 11:11 AM",
          "commitName": "93b021578e479422012dd323b72110b19cbe41f8",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "3/30/10, 9:01 PM",
          "commitNameOld": "8c5eb247cb5361a6ffa2d86aa4c2de17c234bda7",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 8.59,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "actualSource": "private void initConfigFromFlags(String[] args, PrintStream err) {\n    Pattern argPattern \u003d Pattern.compile(\"(--[a-zA-Z_]+)\u003d(.*)\");\n    Pattern quotesPattern \u003d Pattern.compile(\"^[\u0027\\\"](.*)[\u0027\\\"]$\");\n    List\u003cString\u003e processedArgs \u003d Lists.newArrayList();\n    for (String arg : args) {\n        Matcher matcher \u003d argPattern.matcher(arg);\n        if (matcher.matches()) {\n            processedArgs.add(matcher.group(1));\n            String value \u003d matcher.group(2);\n            Matcher quotesMatcher \u003d quotesPattern.matcher(value);\n            if (quotesMatcher.matches()) {\n                processedArgs.add(quotesMatcher.group(1));\n            } else {\n                processedArgs.add(value);\n            }\n        } else {\n            processedArgs.add(arg);\n        }\n    }\n    CmdLineParser parser \u003d new CmdLineParser(flags);\n    isConfigValid \u003d true;\n    try {\n        parser.parseArgument(processedArgs.toArray(new String[] {}));\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid \u003d false;\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid \u003d false;\n        parser.printUsage(err);\n    } else {\n        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setOutputWrapperMarker(flags.output_wrapper_marker).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset);\n    }\n}",
          "path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
          "functionStartLine": 358,
          "functionName": "initConfigFromFlags",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,29 +1,34 @@\n-private void initConfigFromFlags(String[] args, PrintStream err) throws CmdLineException {\n+private void initConfigFromFlags(String[] args, PrintStream err) {\n     Pattern argPattern \u003d Pattern.compile(\"(--[a-zA-Z_]+)\u003d(.*)\");\n     Pattern quotesPattern \u003d Pattern.compile(\"^[\u0027\\\"](.*)[\u0027\\\"]$\");\n     List\u003cString\u003e processedArgs \u003d Lists.newArrayList();\n     for (String arg : args) {\n         Matcher matcher \u003d argPattern.matcher(arg);\n         if (matcher.matches()) {\n             processedArgs.add(matcher.group(1));\n             String value \u003d matcher.group(2);\n             Matcher quotesMatcher \u003d quotesPattern.matcher(value);\n             if (quotesMatcher.matches()) {\n                 processedArgs.add(quotesMatcher.group(1));\n             } else {\n                 processedArgs.add(value);\n             }\n         } else {\n             processedArgs.add(arg);\n         }\n     }\n     CmdLineParser parser \u003d new CmdLineParser(flags);\n+    isConfigValid \u003d true;\n     try {\n         parser.parseArgument(processedArgs.toArray(new String[] {}));\n     } catch (CmdLineException e) {\n         err.println(e.getMessage());\n-        parser.printUsage(err);\n-        throw e;\n+        isConfigValid \u003d false;\n     }\n-    getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setOutputWrapperMarker(flags.output_wrapper_marker).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset);\n+    if (!isConfigValid || flags.display_help) {\n+        isConfigValid \u003d false;\n+        parser.printUsage(err);\n+    } else {\n+        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setOutputWrapperMarker(flags.output_wrapper_marker).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset);\n+    }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[CmdLineException]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nChange on 2010/04/07 by john\n\n        Add \"help\" option to the open source command-line.\n        Fixes issue 141.\n\n        R\u003dnick\n        DELTA\u003d95  (25 added, 28 deleted, 42 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dijzeqt\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@175 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "4/8/10, 11:11 AM",
          "commitName": "93b021578e479422012dd323b72110b19cbe41f8",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "3/30/10, 9:01 PM",
          "commitNameOld": "8c5eb247cb5361a6ffa2d86aa4c2de17c234bda7",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 8.59,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "actualSource": "private void initConfigFromFlags(String[] args, PrintStream err) {\n    Pattern argPattern \u003d Pattern.compile(\"(--[a-zA-Z_]+)\u003d(.*)\");\n    Pattern quotesPattern \u003d Pattern.compile(\"^[\u0027\\\"](.*)[\u0027\\\"]$\");\n    List\u003cString\u003e processedArgs \u003d Lists.newArrayList();\n    for (String arg : args) {\n        Matcher matcher \u003d argPattern.matcher(arg);\n        if (matcher.matches()) {\n            processedArgs.add(matcher.group(1));\n            String value \u003d matcher.group(2);\n            Matcher quotesMatcher \u003d quotesPattern.matcher(value);\n            if (quotesMatcher.matches()) {\n                processedArgs.add(quotesMatcher.group(1));\n            } else {\n                processedArgs.add(value);\n            }\n        } else {\n            processedArgs.add(arg);\n        }\n    }\n    CmdLineParser parser \u003d new CmdLineParser(flags);\n    isConfigValid \u003d true;\n    try {\n        parser.parseArgument(processedArgs.toArray(new String[] {}));\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid \u003d false;\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid \u003d false;\n        parser.printUsage(err);\n    } else {\n        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setOutputWrapperMarker(flags.output_wrapper_marker).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset);\n    }\n}",
          "path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
          "functionStartLine": 358,
          "functionName": "initConfigFromFlags",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,29 +1,34 @@\n-private void initConfigFromFlags(String[] args, PrintStream err) throws CmdLineException {\n+private void initConfigFromFlags(String[] args, PrintStream err) {\n     Pattern argPattern \u003d Pattern.compile(\"(--[a-zA-Z_]+)\u003d(.*)\");\n     Pattern quotesPattern \u003d Pattern.compile(\"^[\u0027\\\"](.*)[\u0027\\\"]$\");\n     List\u003cString\u003e processedArgs \u003d Lists.newArrayList();\n     for (String arg : args) {\n         Matcher matcher \u003d argPattern.matcher(arg);\n         if (matcher.matches()) {\n             processedArgs.add(matcher.group(1));\n             String value \u003d matcher.group(2);\n             Matcher quotesMatcher \u003d quotesPattern.matcher(value);\n             if (quotesMatcher.matches()) {\n                 processedArgs.add(quotesMatcher.group(1));\n             } else {\n                 processedArgs.add(value);\n             }\n         } else {\n             processedArgs.add(arg);\n         }\n     }\n     CmdLineParser parser \u003d new CmdLineParser(flags);\n+    isConfigValid \u003d true;\n     try {\n         parser.parseArgument(processedArgs.toArray(new String[] {}));\n     } catch (CmdLineException e) {\n         err.println(e.getMessage());\n-        parser.printUsage(err);\n-        throw e;\n+        isConfigValid \u003d false;\n     }\n-    getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setOutputWrapperMarker(flags.output_wrapper_marker).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset);\n+    if (!isConfigValid || flags.display_help) {\n+        isConfigValid \u003d false;\n+        parser.printUsage(err);\n+    } else {\n+        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setOutputWrapperMarker(flags.output_wrapper_marker).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset);\n+    }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "8c5eb247cb5361a6ffa2d86aa4c2de17c234bda7": {
      "type": "Ybodychange",
      "commitMessage": "Refactor how coding conventions are set (Nick)\nR\u003dalan\n\nDon\u0027t use NAME for label names, introduce LABEL_NAME. This improves\nthe correctness of the compiler as many passes don\u0027t distinguish\nbetween label names and variable names appropriately. (John)\nR\u003drobert\nDELTA\u003d57  (29 added, 12 deleted, 16 changed)\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@163 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/30/10, 9:01 PM",
      "commitName": "8c5eb247cb5361a6ffa2d86aa4c2de17c234bda7",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "3/23/10, 5:40 PM",
      "commitNameOld": "369282db85567f1bf2c9635d0c0043d47f114814",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 7.14,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "private void initConfigFromFlags(String[] args, PrintStream err) throws CmdLineException {\n    Pattern argPattern \u003d Pattern.compile(\"(--[a-zA-Z_]+)\u003d(.*)\");\n    Pattern quotesPattern \u003d Pattern.compile(\"^[\u0027\\\"](.*)[\u0027\\\"]$\");\n    List\u003cString\u003e processedArgs \u003d Lists.newArrayList();\n    for (String arg : args) {\n        Matcher matcher \u003d argPattern.matcher(arg);\n        if (matcher.matches()) {\n            processedArgs.add(matcher.group(1));\n            String value \u003d matcher.group(2);\n            Matcher quotesMatcher \u003d quotesPattern.matcher(value);\n            if (quotesMatcher.matches()) {\n                processedArgs.add(quotesMatcher.group(1));\n            } else {\n                processedArgs.add(value);\n            }\n        } else {\n            processedArgs.add(arg);\n        }\n    }\n    CmdLineParser parser \u003d new CmdLineParser(flags);\n    try {\n        parser.parseArgument(processedArgs.toArray(new String[] {}));\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        parser.printUsage(err);\n        throw e;\n    }\n    getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setOutputWrapperMarker(flags.output_wrapper_marker).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset);\n}",
      "path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
      "functionStartLine": 354,
      "functionName": "initConfigFromFlags",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,29 +1,29 @@\n private void initConfigFromFlags(String[] args, PrintStream err) throws CmdLineException {\n     Pattern argPattern \u003d Pattern.compile(\"(--[a-zA-Z_]+)\u003d(.*)\");\n     Pattern quotesPattern \u003d Pattern.compile(\"^[\u0027\\\"](.*)[\u0027\\\"]$\");\n     List\u003cString\u003e processedArgs \u003d Lists.newArrayList();\n     for (String arg : args) {\n         Matcher matcher \u003d argPattern.matcher(arg);\n         if (matcher.matches()) {\n             processedArgs.add(matcher.group(1));\n             String value \u003d matcher.group(2);\n             Matcher quotesMatcher \u003d quotesPattern.matcher(value);\n             if (quotesMatcher.matches()) {\n                 processedArgs.add(quotesMatcher.group(1));\n             } else {\n                 processedArgs.add(value);\n             }\n         } else {\n             processedArgs.add(arg);\n         }\n     }\n     CmdLineParser parser \u003d new CmdLineParser(flags);\n     try {\n         parser.parseArgument(processedArgs.toArray(new String[] {}));\n     } catch (CmdLineException e) {\n         err.println(e.getMessage());\n         parser.printUsage(err);\n         throw e;\n     }\n-    getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setThirdParty(flags.third_party).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setOutputWrapperMarker(flags.output_wrapper_marker).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset);\n+    getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setOutputWrapperMarker(flags.output_wrapper_marker).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e5d3e5e012871b87d2f2a59985bc6522bb571ee2": {
      "type": "Yintroduced",
      "commitMessage": "switch over to args4j (Nick)\nFixes issue 11.\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@128 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/5/10, 5:33 PM",
      "commitName": "e5d3e5e012871b87d2f2a59985bc6522bb571ee2",
      "commitAuthor": "Nicholas.J.Santos",
      "diff": "@@ -0,0 +1,29 @@\n+private void initConfigFromFlags(String[] args, PrintStream err) throws CmdLineException {\n+    Pattern argPattern \u003d Pattern.compile(\"(--[a-zA-Z_]+)\u003d(.*)\");\n+    Pattern quotesPattern \u003d Pattern.compile(\"^[\u0027\\\"](.*)[\u0027\\\"]$\");\n+    List\u003cString\u003e processedArgs \u003d Lists.newArrayList();\n+    for (String arg : args) {\n+        Matcher matcher \u003d argPattern.matcher(arg);\n+        if (matcher.matches()) {\n+            processedArgs.add(matcher.group(1));\n+            String value \u003d matcher.group(2);\n+            Matcher quotesMatcher \u003d quotesPattern.matcher(value);\n+            if (quotesMatcher.matches()) {\n+                processedArgs.add(quotesMatcher.group(1));\n+            } else {\n+                processedArgs.add(value);\n+            }\n+        } else {\n+            processedArgs.add(arg);\n+        }\n+    }\n+    CmdLineParser parser \u003d new CmdLineParser(flags);\n+    try {\n+        parser.parseArgument(processedArgs.toArray(new String[] {}));\n+    } catch (CmdLineException e) {\n+        err.println(e.getMessage());\n+        parser.printUsage(err);\n+        throw e;\n+    }\n+    getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setThirdParty(flags.third_party).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setOutputWrapperMarker(flags.output_wrapper_marker).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset);\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void initConfigFromFlags(String[] args, PrintStream err) throws CmdLineException {\n    Pattern argPattern \u003d Pattern.compile(\"(--[a-zA-Z_]+)\u003d(.*)\");\n    Pattern quotesPattern \u003d Pattern.compile(\"^[\u0027\\\"](.*)[\u0027\\\"]$\");\n    List\u003cString\u003e processedArgs \u003d Lists.newArrayList();\n    for (String arg : args) {\n        Matcher matcher \u003d argPattern.matcher(arg);\n        if (matcher.matches()) {\n            processedArgs.add(matcher.group(1));\n            String value \u003d matcher.group(2);\n            Matcher quotesMatcher \u003d quotesPattern.matcher(value);\n            if (quotesMatcher.matches()) {\n                processedArgs.add(quotesMatcher.group(1));\n            } else {\n                processedArgs.add(value);\n            }\n        } else {\n            processedArgs.add(arg);\n        }\n    }\n    CmdLineParser parser \u003d new CmdLineParser(flags);\n    try {\n        parser.parseArgument(processedArgs.toArray(new String[] {}));\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        parser.printUsage(err);\n        throw e;\n    }\n    getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setThirdParty(flags.third_party).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setOutputWrapperMarker(flags.output_wrapper_marker).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset);\n}",
      "path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
      "functionStartLine": 349,
      "functionName": "initConfigFromFlags",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}