{
  "origin": "codeshovel",
  "repositoryName": "Closure-59b",
  "repositoryPath": "/tmp/Closure-59b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ObjectType.java",
  "functionName": "defineInferredProperty",
  "functionId": "defineInferredProperty___propertyName-String__type-JSType__propertyNode-Node",
  "sourceFilePath": "src/com/google/javascript/rhino/jstype/ObjectType.java",
  "functionAnnotation": "",
  "functionDoc": "Defines a property whose type is inferred.\n\n@param propertyName the property\u0027s name\n@param type the type\n@param propertyNode the node corresponding to the inferred definition of\n       property that might later be accessed using {@code getPropertyNode}.\n",
  "functionStartLine": 289,
  "functionEndLine": 307,
  "numCommitsSeen": 68,
  "timeTaken": 1266,
  "changeHistory": [
    "03ce555bcedcf98d99de1b4f8a6238ba75ee6850",
    "6bbac115c9a7928a7053b2da3a78df9569df8570",
    "1c75a5484b515bd593295fbf0c8491e2dd1f1c45",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "03ce555bcedcf98d99de1b4f8a6238ba75ee6850": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "6bbac115c9a7928a7053b2da3a78df9569df8570": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "1c75a5484b515bd593295fbf0c8491e2dd1f1c45": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "03ce555bcedcf98d99de1b4f8a6238ba75ee6850": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "\nSimplify the type system a bit by pulling extern info off the nodes\n\nR\u003djohnlenz\nDELTA\u003d171  (4 added, 42 deleted, 125 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2500\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1242 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/1/11, 2:00 PM",
      "commitName": "03ce555bcedcf98d99de1b4f8a6238ba75ee6850",
      "commitAuthor": "nicksantos@google.com",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "\nSimplify the type system a bit by pulling extern info off the nodes\n\nR\u003djohnlenz\nDELTA\u003d171  (4 added, 42 deleted, 125 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2500\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1242 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "7/1/11, 2:00 PM",
          "commitName": "03ce555bcedcf98d99de1b4f8a6238ba75ee6850",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "6/15/11, 1:20 PM",
          "commitNameOld": "8dc67305aec856292735bb821fe41e7f9032e7e1",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 16.03,
          "commitsBetweenForRepo": 57,
          "commitsBetweenForFile": 1,
          "actualSource": "public final boolean defineInferredProperty(String propertyName, JSType type, Node propertyNode) {\n    if (hasProperty(propertyName)) {\n        JSType originalType \u003d getPropertyType(propertyName);\n        type \u003d originalType \u003d\u003d null ? type : originalType.getLeastSupertype(type);\n    }\n    boolean result \u003d defineProperty(propertyName, type, true, propertyNode);\n    registry.registerPropertyOnType(propertyName, this);\n    return result;\n}",
          "path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
          "functionStartLine": 286,
          "functionName": "defineInferredProperty",
          "functionAnnotation": "",
          "functionDoc": "Defines a property whose type is inferred.\n\n@param propertyName the property\u0027s name\n@param type the type\n@param propertyNode the node corresponding to the inferred definition of\n       property that might later be accessed using {@code getPropertyNode}.\n",
          "diff": "@@ -1,9 +1,9 @@\n-public final boolean defineInferredProperty(String propertyName, JSType type, boolean inExterns, Node propertyNode) {\n+public final boolean defineInferredProperty(String propertyName, JSType type, Node propertyNode) {\n     if (hasProperty(propertyName)) {\n         JSType originalType \u003d getPropertyType(propertyName);\n         type \u003d originalType \u003d\u003d null ? type : originalType.getLeastSupertype(type);\n     }\n-    boolean result \u003d defineProperty(propertyName, type, true, inExterns, propertyNode);\n+    boolean result \u003d defineProperty(propertyName, type, true, propertyNode);\n     registry.registerPropertyOnType(propertyName, this);\n     return result;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[propertyName-String, type-JSType, inExterns-boolean, propertyNode-Node]",
            "newValue": "[propertyName-String, type-JSType, propertyNode-Node]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nSimplify the type system a bit by pulling extern info off the nodes\n\nR\u003djohnlenz\nDELTA\u003d171  (4 added, 42 deleted, 125 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2500\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1242 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "7/1/11, 2:00 PM",
          "commitName": "03ce555bcedcf98d99de1b4f8a6238ba75ee6850",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "6/15/11, 1:20 PM",
          "commitNameOld": "8dc67305aec856292735bb821fe41e7f9032e7e1",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 16.03,
          "commitsBetweenForRepo": 57,
          "commitsBetweenForFile": 1,
          "actualSource": "public final boolean defineInferredProperty(String propertyName, JSType type, Node propertyNode) {\n    if (hasProperty(propertyName)) {\n        JSType originalType \u003d getPropertyType(propertyName);\n        type \u003d originalType \u003d\u003d null ? type : originalType.getLeastSupertype(type);\n    }\n    boolean result \u003d defineProperty(propertyName, type, true, propertyNode);\n    registry.registerPropertyOnType(propertyName, this);\n    return result;\n}",
          "path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
          "functionStartLine": 286,
          "functionName": "defineInferredProperty",
          "functionAnnotation": "",
          "functionDoc": "Defines a property whose type is inferred.\n\n@param propertyName the property\u0027s name\n@param type the type\n@param propertyNode the node corresponding to the inferred definition of\n       property that might later be accessed using {@code getPropertyNode}.\n",
          "diff": "@@ -1,9 +1,9 @@\n-public final boolean defineInferredProperty(String propertyName, JSType type, boolean inExterns, Node propertyNode) {\n+public final boolean defineInferredProperty(String propertyName, JSType type, Node propertyNode) {\n     if (hasProperty(propertyName)) {\n         JSType originalType \u003d getPropertyType(propertyName);\n         type \u003d originalType \u003d\u003d null ? type : originalType.getLeastSupertype(type);\n     }\n-    boolean result \u003d defineProperty(propertyName, type, true, inExterns, propertyNode);\n+    boolean result \u003d defineProperty(propertyName, type, true, propertyNode);\n     registry.registerPropertyOnType(propertyName, this);\n     return result;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "\nSimplify the type system a bit by pulling extern info off the nodes\n\nR\u003djohnlenz\nDELTA\u003d171  (4 added, 42 deleted, 125 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2500\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1242 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "7/1/11, 2:00 PM",
          "commitName": "03ce555bcedcf98d99de1b4f8a6238ba75ee6850",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "6/15/11, 1:20 PM",
          "commitNameOld": "8dc67305aec856292735bb821fe41e7f9032e7e1",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 16.03,
          "commitsBetweenForRepo": 57,
          "commitsBetweenForFile": 1,
          "actualSource": "public final boolean defineInferredProperty(String propertyName, JSType type, Node propertyNode) {\n    if (hasProperty(propertyName)) {\n        JSType originalType \u003d getPropertyType(propertyName);\n        type \u003d originalType \u003d\u003d null ? type : originalType.getLeastSupertype(type);\n    }\n    boolean result \u003d defineProperty(propertyName, type, true, propertyNode);\n    registry.registerPropertyOnType(propertyName, this);\n    return result;\n}",
          "path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
          "functionStartLine": 286,
          "functionName": "defineInferredProperty",
          "functionAnnotation": "",
          "functionDoc": "Defines a property whose type is inferred.\n\n@param propertyName the property\u0027s name\n@param type the type\n@param propertyNode the node corresponding to the inferred definition of\n       property that might later be accessed using {@code getPropertyNode}.\n",
          "diff": "@@ -1,9 +1,9 @@\n-public final boolean defineInferredProperty(String propertyName, JSType type, boolean inExterns, Node propertyNode) {\n+public final boolean defineInferredProperty(String propertyName, JSType type, Node propertyNode) {\n     if (hasProperty(propertyName)) {\n         JSType originalType \u003d getPropertyType(propertyName);\n         type \u003d originalType \u003d\u003d null ? type : originalType.getLeastSupertype(type);\n     }\n-    boolean result \u003d defineProperty(propertyName, type, true, inExterns, propertyNode);\n+    boolean result \u003d defineProperty(propertyName, type, true, propertyNode);\n     registry.registerPropertyOnType(propertyName, this);\n     return result;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Defines a property whose type is inferred.\n\n@param propertyName the property\u0027s name\n@param type the type\n@param inExterns @code true} if this property was defined in an externs\n       file. TightenTypes assumes that any function passed to an externs\n       property could be called, so setting this incorrectly could result\n       in live code being removed.\n@param propertyNode the node corresponding to the inferred definition of\n       property that might later be accessed using {@code getPropertyNode}.\n",
            "newValue": "Defines a property whose type is inferred.\n\n@param propertyName the property\u0027s name\n@param type the type\n@param propertyNode the node corresponding to the inferred definition of\n       property that might later be accessed using {@code getPropertyNode}.\n"
          }
        }
      ]
    },
    "6bbac115c9a7928a7053b2da3a78df9569df8570": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "\nAdding getPropertyNode functionality to ObjectType. This needs\nassociating nodes to properties in defineProperty.\n\nR\u003dnicksantos\nDELTA\u003d307  (127 added, 0 deleted, 180 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d223\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@674 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/7/11, 9:19 AM",
      "commitName": "6bbac115c9a7928a7053b2da3a78df9569df8570",
      "commitAuthor": "bashir@google.com",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "\nAdding getPropertyNode functionality to ObjectType. This needs\nassociating nodes to properties in defineProperty.\n\nR\u003dnicksantos\nDELTA\u003d307  (127 added, 0 deleted, 180 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d223\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@674 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/7/11, 9:19 AM",
          "commitName": "6bbac115c9a7928a7053b2da3a78df9569df8570",
          "commitAuthor": "bashir@google.com",
          "commitDateOld": "12/13/10, 8:10 AM",
          "commitNameOld": "1c75a5484b515bd593295fbf0c8491e2dd1f1c45",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 25.05,
          "commitsBetweenForRepo": 50,
          "commitsBetweenForFile": 1,
          "actualSource": "public final boolean defineInferredProperty(String propertyName, JSType type, boolean inExterns, Node propertyNode) {\n    if (hasProperty(propertyName)) {\n        JSType originalType \u003d getPropertyType(propertyName);\n        type \u003d originalType \u003d\u003d null ? type : originalType.getLeastSupertype(type);\n    }\n    boolean result \u003d defineProperty(propertyName, type, true, inExterns, propertyNode);\n    registry.registerPropertyOnType(propertyName, this);\n    return result;\n}",
          "path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
          "functionStartLine": 272,
          "functionName": "defineInferredProperty",
          "functionAnnotation": "",
          "functionDoc": "Defines a property whose type is inferred.\n\n@param propertyName the property\u0027s name\n@param type the type\n@param inExterns @code true} if this property was defined in an externs\n       file. TightenTypes assumes that any function passed to an externs\n       property could be called, so setting this incorrectly could result\n       in live code being removed.\n@param propertyNode the node corresponding to the inferred definition of\n       property that might later be accessed using {@code getPropertyNode}.\n",
          "diff": "@@ -1,9 +1,9 @@\n-public final boolean defineInferredProperty(String propertyName, JSType type, boolean inExterns) {\n+public final boolean defineInferredProperty(String propertyName, JSType type, boolean inExterns, Node propertyNode) {\n     if (hasProperty(propertyName)) {\n         JSType originalType \u003d getPropertyType(propertyName);\n         type \u003d originalType \u003d\u003d null ? type : originalType.getLeastSupertype(type);\n     }\n-    boolean result \u003d defineProperty(propertyName, type, true, inExterns);\n+    boolean result \u003d defineProperty(propertyName, type, true, inExterns, propertyNode);\n     registry.registerPropertyOnType(propertyName, this);\n     return result;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[propertyName-String, type-JSType, inExterns-boolean]",
            "newValue": "[propertyName-String, type-JSType, inExterns-boolean, propertyNode-Node]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nAdding getPropertyNode functionality to ObjectType. This needs\nassociating nodes to properties in defineProperty.\n\nR\u003dnicksantos\nDELTA\u003d307  (127 added, 0 deleted, 180 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d223\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@674 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/7/11, 9:19 AM",
          "commitName": "6bbac115c9a7928a7053b2da3a78df9569df8570",
          "commitAuthor": "bashir@google.com",
          "commitDateOld": "12/13/10, 8:10 AM",
          "commitNameOld": "1c75a5484b515bd593295fbf0c8491e2dd1f1c45",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 25.05,
          "commitsBetweenForRepo": 50,
          "commitsBetweenForFile": 1,
          "actualSource": "public final boolean defineInferredProperty(String propertyName, JSType type, boolean inExterns, Node propertyNode) {\n    if (hasProperty(propertyName)) {\n        JSType originalType \u003d getPropertyType(propertyName);\n        type \u003d originalType \u003d\u003d null ? type : originalType.getLeastSupertype(type);\n    }\n    boolean result \u003d defineProperty(propertyName, type, true, inExterns, propertyNode);\n    registry.registerPropertyOnType(propertyName, this);\n    return result;\n}",
          "path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
          "functionStartLine": 272,
          "functionName": "defineInferredProperty",
          "functionAnnotation": "",
          "functionDoc": "Defines a property whose type is inferred.\n\n@param propertyName the property\u0027s name\n@param type the type\n@param inExterns @code true} if this property was defined in an externs\n       file. TightenTypes assumes that any function passed to an externs\n       property could be called, so setting this incorrectly could result\n       in live code being removed.\n@param propertyNode the node corresponding to the inferred definition of\n       property that might later be accessed using {@code getPropertyNode}.\n",
          "diff": "@@ -1,9 +1,9 @@\n-public final boolean defineInferredProperty(String propertyName, JSType type, boolean inExterns) {\n+public final boolean defineInferredProperty(String propertyName, JSType type, boolean inExterns, Node propertyNode) {\n     if (hasProperty(propertyName)) {\n         JSType originalType \u003d getPropertyType(propertyName);\n         type \u003d originalType \u003d\u003d null ? type : originalType.getLeastSupertype(type);\n     }\n-    boolean result \u003d defineProperty(propertyName, type, true, inExterns);\n+    boolean result \u003d defineProperty(propertyName, type, true, inExterns, propertyNode);\n     registry.registerPropertyOnType(propertyName, this);\n     return result;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "\nAdding getPropertyNode functionality to ObjectType. This needs\nassociating nodes to properties in defineProperty.\n\nR\u003dnicksantos\nDELTA\u003d307  (127 added, 0 deleted, 180 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d223\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@674 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/7/11, 9:19 AM",
          "commitName": "6bbac115c9a7928a7053b2da3a78df9569df8570",
          "commitAuthor": "bashir@google.com",
          "commitDateOld": "12/13/10, 8:10 AM",
          "commitNameOld": "1c75a5484b515bd593295fbf0c8491e2dd1f1c45",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 25.05,
          "commitsBetweenForRepo": 50,
          "commitsBetweenForFile": 1,
          "actualSource": "public final boolean defineInferredProperty(String propertyName, JSType type, boolean inExterns, Node propertyNode) {\n    if (hasProperty(propertyName)) {\n        JSType originalType \u003d getPropertyType(propertyName);\n        type \u003d originalType \u003d\u003d null ? type : originalType.getLeastSupertype(type);\n    }\n    boolean result \u003d defineProperty(propertyName, type, true, inExterns, propertyNode);\n    registry.registerPropertyOnType(propertyName, this);\n    return result;\n}",
          "path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
          "functionStartLine": 272,
          "functionName": "defineInferredProperty",
          "functionAnnotation": "",
          "functionDoc": "Defines a property whose type is inferred.\n\n@param propertyName the property\u0027s name\n@param type the type\n@param inExterns @code true} if this property was defined in an externs\n       file. TightenTypes assumes that any function passed to an externs\n       property could be called, so setting this incorrectly could result\n       in live code being removed.\n@param propertyNode the node corresponding to the inferred definition of\n       property that might later be accessed using {@code getPropertyNode}.\n",
          "diff": "@@ -1,9 +1,9 @@\n-public final boolean defineInferredProperty(String propertyName, JSType type, boolean inExterns) {\n+public final boolean defineInferredProperty(String propertyName, JSType type, boolean inExterns, Node propertyNode) {\n     if (hasProperty(propertyName)) {\n         JSType originalType \u003d getPropertyType(propertyName);\n         type \u003d originalType \u003d\u003d null ? type : originalType.getLeastSupertype(type);\n     }\n-    boolean result \u003d defineProperty(propertyName, type, true, inExterns);\n+    boolean result \u003d defineProperty(propertyName, type, true, inExterns, propertyNode);\n     registry.registerPropertyOnType(propertyName, this);\n     return result;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Defines a property whose type is inferred.\n\n@param propertyName the property\u0027s name\n@param type the type\n@param inExterns @code true} if this property was defined in an externs\n       file. TightenTypes assumes that any function passed to an externs\n       property could be called, so setting this incorrectly could result\n       in live code being removed.\n",
            "newValue": "Defines a property whose type is inferred.\n\n@param propertyName the property\u0027s name\n@param type the type\n@param inExterns @code true} if this property was defined in an externs\n       file. TightenTypes assumes that any function passed to an externs\n       property could be called, so setting this incorrectly could result\n       in live code being removed.\n@param propertyNode the node corresponding to the inferred definition of\n       property that might later be accessed using {@code getPropertyNode}.\n"
          }
        }
      ]
    },
    "1c75a5484b515bd593295fbf0c8491e2dd1f1c45": {
      "type": "Ybodychange",
      "commitMessage": "\nremove all uses of Sets of types.\nequality can change over time, so this is not safe.\nThis means we need to be much more explicit in how\nwe collapse type duplicates in unions and in type tightening\n\nR\u003djohnlenz\nDELTA\u003d319  (210 added, 52 deleted, 57 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d121\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@623 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/13/10, 8:10 AM",
      "commitName": "1c75a5484b515bd593295fbf0c8491e2dd1f1c45",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "12/8/10, 12:18 PM",
      "commitNameOld": "8a76da206034045c555297e5069eb273d05fc6fb",
      "commitAuthorOld": "tylerg@google.com",
      "daysBetweenCommits": 4.83,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "public final boolean defineInferredProperty(String propertyName, JSType type, boolean inExterns) {\n    if (hasProperty(propertyName)) {\n        JSType originalType \u003d getPropertyType(propertyName);\n        type \u003d originalType \u003d\u003d null ? type : originalType.getLeastSupertype(type);\n    }\n    boolean result \u003d defineProperty(propertyName, type, true, inExterns);\n    registry.registerPropertyOnType(propertyName, this);\n    return result;\n}",
      "path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
      "functionStartLine": 266,
      "functionName": "defineInferredProperty",
      "functionAnnotation": "",
      "functionDoc": "Defines a property whose type is inferred.\n\n@param propertyName the property\u0027s name\n@param type the type\n@param inExterns @code true} if this property was defined in an externs\n       file. TightenTypes assumes that any function passed to an externs\n       property could be called, so setting this incorrectly could result\n       in live code being removed.\n",
      "diff": "@@ -1,8 +1,9 @@\n public final boolean defineInferredProperty(String propertyName, JSType type, boolean inExterns) {\n-    registry.registerPropertyOnType(propertyName, this);\n     if (hasProperty(propertyName)) {\n         JSType originalType \u003d getPropertyType(propertyName);\n         type \u003d originalType \u003d\u003d null ? type : originalType.getLeastSupertype(type);\n     }\n-    return defineProperty(propertyName, type, true, inExterns);\n+    boolean result \u003d defineProperty(propertyName, type, true, inExterns);\n+    registry.registerPropertyOnType(propertyName, this);\n+    return result;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,8 @@\n+public final boolean defineInferredProperty(String propertyName, JSType type, boolean inExterns) {\n+    registry.registerPropertyOnType(propertyName, this);\n+    if (hasProperty(propertyName)) {\n+        JSType originalType \u003d getPropertyType(propertyName);\n+        type \u003d originalType \u003d\u003d null ? type : originalType.getLeastSupertype(type);\n+    }\n+    return defineProperty(propertyName, type, true, inExterns);\n+}\n\\ No newline at end of file\n",
      "actualSource": "public final boolean defineInferredProperty(String propertyName, JSType type, boolean inExterns) {\n    registry.registerPropertyOnType(propertyName, this);\n    if (hasProperty(propertyName)) {\n        JSType originalType \u003d getPropertyType(propertyName);\n        type \u003d originalType \u003d\u003d null ? type : originalType.getLeastSupertype(type);\n    }\n    return defineProperty(propertyName, type, true, inExterns);\n}",
      "path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
      "functionStartLine": 229,
      "functionName": "defineInferredProperty",
      "functionAnnotation": "",
      "functionDoc": "Defines a property whose type is inferred.\n\n@param propertyName the property\u0027s name\n@param type the type\n@param inExterns @code true} if this property was defined in an externs\n       file. TightenTypes assumes that any function passed to an externs\n       property could be called, so setting this incorrectly could result\n       in live code being removed.\n"
    }
  }
}