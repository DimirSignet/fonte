{
  "origin": "codeshovel",
  "repositoryName": "Closure-59b",
  "repositoryPath": "/tmp/Closure-59b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "OptimizeArgumentsArray.java",
  "functionName": "tryReplaceArguments",
  "functionId": "tryReplaceArguments___scope-Scope",
  "sourceFilePath": "src/com/google/javascript/jscomp/OptimizeArgumentsArray.java",
  "functionAnnotation": "",
  "functionDoc": "Tries to optimize all the arguments array access in this scope by assigning\na name to each element.\n\n@param scope scope of the function\n@return true if any modification has been done to the AST\n",
  "functionStartLine": 178,
  "functionEndLine": 290,
  "numCommitsSeen": 11,
  "timeTaken": 460,
  "changeHistory": [
    "f8229e74701c28f001e5b4954c1f1f7a2b764c11",
    "a478193982ce1fb9271e3f7ebcc1369913c9a859",
    "fe64e87cccd2c38524c0b36c49beb4c988d1453a",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "f8229e74701c28f001e5b4954c1f1f7a2b764c11": "Yformatchange",
    "a478193982ce1fb9271e3f7ebcc1369913c9a859": "Ybodychange",
    "fe64e87cccd2c38524c0b36c49beb4c988d1453a": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f8229e74701c28f001e5b4954c1f1f7a2b764c11": {
      "type": "Yformatchange",
      "commitMessage": "\nsome whitespace-only changes\n\nFix up a type annotation on jquery externs.\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dweleuk\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@174 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/7/10, 5:51 PM",
      "commitName": "f8229e74701c28f001e5b4954c1f1f7a2b764c11",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "12/1/09, 8:28 AM",
      "commitNameOld": "a478193982ce1fb9271e3f7ebcc1369913c9a859",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 127.35,
      "commitsBetweenForRepo": 132,
      "commitsBetweenForFile": 1,
      "actualSource": "private boolean tryReplaceArguments(Scope scope) {\n    Node parametersList \u003d scope.getRootNode().getFirstChild().getNext();\n    Preconditions.checkState(parametersList.getType() \u003d\u003d Token.LP);\n    boolean changed \u003d false;\n    int numNamedParameter \u003d parametersList.getChildCount();\n    int highestIndex \u003d numNamedParameter - 1;\n    for (Node ref : currentArgumentsAccess) {\n        Node getElem \u003d ref.getParent();\n        if (getElem.getType() !\u003d Token.GETELEM) {\n            return false;\n        }\n        Node index \u003d ref.getNext();\n        if (index.getType() !\u003d Token.NUMBER) {\n            return false;\n        }\n        Node getElemParent \u003d getElem.getParent();\n        if (NodeUtil.isCall(getElemParent) \u0026\u0026 getElemParent.getFirstChild() \u003d\u003d getElem) {\n            return false;\n        }\n        int value \u003d (int) index.getDouble();\n        if (value \u003e highestIndex) {\n            highestIndex \u003d value;\n        }\n    }\n    int numExtraArgs \u003d highestIndex - numNamedParameter + 1;\n    String[] argNames \u003d new String[numExtraArgs];\n    for (int i \u003d 0; i \u003c numExtraArgs; i++) {\n        String name \u003d getNewName();\n        argNames[i] \u003d name;\n        parametersList.addChildrenToBack(Node.newString(Token.NAME, name));\n        changed \u003d true;\n    }\n    for (Node ref : currentArgumentsAccess) {\n        Node index \u003d ref.getNext();\n        if (index.getType() !\u003d Token.NUMBER) {\n            continue;\n        }\n        int value \u003d (int) index.getDouble();\n        if (value \u003e\u003d numNamedParameter) {\n            ref.getParent().getParent().replaceChild(ref.getParent(), Node.newString(Token.NAME, argNames[value - numNamedParameter]));\n        } else {\n            Node name \u003d parametersList.getFirstChild();\n            for (int i \u003d 0; i \u003c value; i++) {\n                name \u003d name.getNext();\n            }\n            ref.getParent().getParent().replaceChild(ref.getParent(), Node.newString(Token.NAME, name.getString()));\n        }\n        changed \u003d true;\n    }\n    return changed;\n}",
      "path": "src/com/google/javascript/jscomp/OptimizeArgumentsArray.java",
      "functionStartLine": 179,
      "functionName": "tryReplaceArguments",
      "functionAnnotation": "",
      "functionDoc": "Tries to optimize all the arguments array access in this scope by assigning\na name to each element.\n\n@param scope scope of the function\n@return true if any modification has been done to the AST\n",
      "diff": "",
      "extendedDetails": {}
    },
    "a478193982ce1fb9271e3f7ebcc1369913c9a859": {
      "type": "Ybodychange",
      "commitMessage": "Add a debugging option for variable renaming.\nBug fixes for direct calls on the arguments array.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@17 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/1/09, 8:28 AM",
      "commitName": "a478193982ce1fb9271e3f7ebcc1369913c9a859",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/17/09, 4:21 PM",
      "commitNameOld": "fe64e87cccd2c38524c0b36c49beb4c988d1453a",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 13.67,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "private boolean tryReplaceArguments(Scope scope) {\n    Node parametersList \u003d scope.getRootNode().getFirstChild().getNext();\n    Preconditions.checkState(parametersList.getType() \u003d\u003d Token.LP);\n    boolean changed \u003d false;\n    int numNamedParameter \u003d parametersList.getChildCount();\n    int highestIndex \u003d numNamedParameter - 1;\n    for (Node ref : currentArgumentsAccess) {\n        Node getElem \u003d ref.getParent();\n        if (getElem.getType() !\u003d Token.GETELEM) {\n            return false;\n        }\n        Node index \u003d ref.getNext();\n        if (index.getType() !\u003d Token.NUMBER) {\n            return false;\n        }\n        Node getElemParent \u003d getElem.getParent();\n        if (NodeUtil.isCall(getElemParent) \u0026\u0026 getElemParent.getFirstChild() \u003d\u003d getElem) {\n            return false;\n        }\n        int value \u003d (int) index.getDouble();\n        if (value \u003e highestIndex) {\n            highestIndex \u003d value;\n        }\n    }\n    int numExtraArgs \u003d highestIndex - numNamedParameter + 1;\n    String[] argNames \u003d new String[numExtraArgs];\n    for (int i \u003d 0; i \u003c numExtraArgs; i++) {\n        String name \u003d getNewName();\n        argNames[i] \u003d name;\n        parametersList.addChildrenToBack(Node.newString(Token.NAME, name));\n        changed \u003d true;\n    }\n    for (Node ref : currentArgumentsAccess) {\n        Node index \u003d ref.getNext();\n        if (index.getType() !\u003d Token.NUMBER) {\n            continue;\n        }\n        int value \u003d (int) index.getDouble();\n        if (value \u003e\u003d numNamedParameter) {\n            ref.getParent().getParent().replaceChild(ref.getParent(), Node.newString(Token.NAME, argNames[value - numNamedParameter]));\n        } else {\n            Node name \u003d parametersList.getFirstChild();\n            for (int i \u003d 0; i \u003c value; i++) {\n                name \u003d name.getNext();\n            }\n            ref.getParent().getParent().replaceChild(ref.getParent(), Node.newString(Token.NAME, name.getString()));\n        }\n        changed \u003d true;\n    }\n    return changed;\n}",
      "path": "src/com/google/javascript/jscomp/OptimizeArgumentsArray.java",
      "functionStartLine": 179,
      "functionName": "tryReplaceArguments",
      "functionAnnotation": "",
      "functionDoc": "Tries to optimize all the arguments array access in this scope by assigning\na name to each element.\n\n@param scope scope of the function\n@return true if any modification has been done to the AST\n",
      "diff": "@@ -1,46 +1,51 @@\n private boolean tryReplaceArguments(Scope scope) {\n     Node parametersList \u003d scope.getRootNode().getFirstChild().getNext();\n     Preconditions.checkState(parametersList.getType() \u003d\u003d Token.LP);\n     boolean changed \u003d false;\n     int numNamedParameter \u003d parametersList.getChildCount();\n     int highestIndex \u003d numNamedParameter - 1;\n     for (Node ref : currentArgumentsAccess) {\n-        if (ref.getParent().getType() !\u003d Token.GETELEM) {\n+        Node getElem \u003d ref.getParent();\n+        if (getElem.getType() !\u003d Token.GETELEM) {\n             return false;\n         }\n         Node index \u003d ref.getNext();\n         if (index.getType() !\u003d Token.NUMBER) {\n             return false;\n         }\n+        Node getElemParent \u003d getElem.getParent();\n+        if (NodeUtil.isCall(getElemParent) \u0026\u0026 getElemParent.getFirstChild() \u003d\u003d getElem) {\n+            return false;\n+        }\n         int value \u003d (int) index.getDouble();\n         if (value \u003e highestIndex) {\n             highestIndex \u003d value;\n         }\n     }\n     int numExtraArgs \u003d highestIndex - numNamedParameter + 1;\n     String[] argNames \u003d new String[numExtraArgs];\n     for (int i \u003d 0; i \u003c numExtraArgs; i++) {\n         String name \u003d getNewName();\n         argNames[i] \u003d name;\n         parametersList.addChildrenToBack(Node.newString(Token.NAME, name));\n         changed \u003d true;\n     }\n     for (Node ref : currentArgumentsAccess) {\n         Node index \u003d ref.getNext();\n         if (index.getType() !\u003d Token.NUMBER) {\n             continue;\n         }\n         int value \u003d (int) index.getDouble();\n         if (value \u003e\u003d numNamedParameter) {\n             ref.getParent().getParent().replaceChild(ref.getParent(), Node.newString(Token.NAME, argNames[value - numNamedParameter]));\n         } else {\n             Node name \u003d parametersList.getFirstChild();\n             for (int i \u003d 0; i \u003c value; i++) {\n                 name \u003d name.getNext();\n             }\n             ref.getParent().getParent().replaceChild(ref.getParent(), Node.newString(Token.NAME, name.getString()));\n         }\n         changed \u003d true;\n     }\n     return changed;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "fe64e87cccd2c38524c0b36c49beb4c988d1453a": {
      "type": "Ybodychange",
      "commitMessage": "Never rename a variable named \"$super\", because the Prototype library\nuses this to do magic.\n\nBetter dead assignment elimination.\n\nEmit an error if you declare a parameter twice.\n\nDon\u0027t do anonymous function collapsing by default.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@12 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/17/09, 4:21 PM",
      "commitName": "fe64e87cccd2c38524c0b36c49beb4c988d1453a",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/3/09, 3:51 PM",
      "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 14.02,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "private boolean tryReplaceArguments(Scope scope) {\n    Node parametersList \u003d scope.getRootNode().getFirstChild().getNext();\n    Preconditions.checkState(parametersList.getType() \u003d\u003d Token.LP);\n    boolean changed \u003d false;\n    int numNamedParameter \u003d parametersList.getChildCount();\n    int highestIndex \u003d numNamedParameter - 1;\n    for (Node ref : currentArgumentsAccess) {\n        if (ref.getParent().getType() !\u003d Token.GETELEM) {\n            return false;\n        }\n        Node index \u003d ref.getNext();\n        if (index.getType() !\u003d Token.NUMBER) {\n            return false;\n        }\n        int value \u003d (int) index.getDouble();\n        if (value \u003e highestIndex) {\n            highestIndex \u003d value;\n        }\n    }\n    int numExtraArgs \u003d highestIndex - numNamedParameter + 1;\n    String[] argNames \u003d new String[numExtraArgs];\n    for (int i \u003d 0; i \u003c numExtraArgs; i++) {\n        String name \u003d getNewName();\n        argNames[i] \u003d name;\n        parametersList.addChildrenToBack(Node.newString(Token.NAME, name));\n        changed \u003d true;\n    }\n    for (Node ref : currentArgumentsAccess) {\n        Node index \u003d ref.getNext();\n        if (index.getType() !\u003d Token.NUMBER) {\n            continue;\n        }\n        int value \u003d (int) index.getDouble();\n        if (value \u003e\u003d numNamedParameter) {\n            ref.getParent().getParent().replaceChild(ref.getParent(), Node.newString(Token.NAME, argNames[value - numNamedParameter]));\n        } else {\n            Node name \u003d parametersList.getFirstChild();\n            for (int i \u003d 0; i \u003c value; i++) {\n                name \u003d name.getNext();\n            }\n            ref.getParent().getParent().replaceChild(ref.getParent(), Node.newString(Token.NAME, name.getString()));\n        }\n        changed \u003d true;\n    }\n    return changed;\n}",
      "path": "src/com/google/javascript/jscomp/OptimizeArgumentsArray.java",
      "functionStartLine": 179,
      "functionName": "tryReplaceArguments",
      "functionAnnotation": "",
      "functionDoc": "Tries to optimize all the arguments array access in this scope by assigning\na name to each element.\n\n@param scope scope of the function\n@return true if any modification has been done to the AST\n",
      "diff": "@@ -1,46 +1,46 @@\n private boolean tryReplaceArguments(Scope scope) {\n     Node parametersList \u003d scope.getRootNode().getFirstChild().getNext();\n     Preconditions.checkState(parametersList.getType() \u003d\u003d Token.LP);\n     boolean changed \u003d false;\n     int numNamedParameter \u003d parametersList.getChildCount();\n     int highestIndex \u003d numNamedParameter - 1;\n     for (Node ref : currentArgumentsAccess) {\n         if (ref.getParent().getType() !\u003d Token.GETELEM) {\n             return false;\n         }\n         Node index \u003d ref.getNext();\n         if (index.getType() !\u003d Token.NUMBER) {\n-            continue;\n+            return false;\n         }\n         int value \u003d (int) index.getDouble();\n         if (value \u003e highestIndex) {\n             highestIndex \u003d value;\n         }\n     }\n     int numExtraArgs \u003d highestIndex - numNamedParameter + 1;\n     String[] argNames \u003d new String[numExtraArgs];\n     for (int i \u003d 0; i \u003c numExtraArgs; i++) {\n         String name \u003d getNewName();\n         argNames[i] \u003d name;\n         parametersList.addChildrenToBack(Node.newString(Token.NAME, name));\n         changed \u003d true;\n     }\n     for (Node ref : currentArgumentsAccess) {\n         Node index \u003d ref.getNext();\n         if (index.getType() !\u003d Token.NUMBER) {\n             continue;\n         }\n         int value \u003d (int) index.getDouble();\n         if (value \u003e\u003d numNamedParameter) {\n             ref.getParent().getParent().replaceChild(ref.getParent(), Node.newString(Token.NAME, argNames[value - numNamedParameter]));\n         } else {\n             Node name \u003d parametersList.getFirstChild();\n             for (int i \u003d 0; i \u003c value; i++) {\n                 name \u003d name.getNext();\n             }\n             ref.getParent().getParent().replaceChild(ref.getParent(), Node.newString(Token.NAME, name.getString()));\n         }\n         changed \u003d true;\n     }\n     return changed;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,46 @@\n+private boolean tryReplaceArguments(Scope scope) {\n+    Node parametersList \u003d scope.getRootNode().getFirstChild().getNext();\n+    Preconditions.checkState(parametersList.getType() \u003d\u003d Token.LP);\n+    boolean changed \u003d false;\n+    int numNamedParameter \u003d parametersList.getChildCount();\n+    int highestIndex \u003d numNamedParameter - 1;\n+    for (Node ref : currentArgumentsAccess) {\n+        if (ref.getParent().getType() !\u003d Token.GETELEM) {\n+            return false;\n+        }\n+        Node index \u003d ref.getNext();\n+        if (index.getType() !\u003d Token.NUMBER) {\n+            continue;\n+        }\n+        int value \u003d (int) index.getDouble();\n+        if (value \u003e highestIndex) {\n+            highestIndex \u003d value;\n+        }\n+    }\n+    int numExtraArgs \u003d highestIndex - numNamedParameter + 1;\n+    String[] argNames \u003d new String[numExtraArgs];\n+    for (int i \u003d 0; i \u003c numExtraArgs; i++) {\n+        String name \u003d getNewName();\n+        argNames[i] \u003d name;\n+        parametersList.addChildrenToBack(Node.newString(Token.NAME, name));\n+        changed \u003d true;\n+    }\n+    for (Node ref : currentArgumentsAccess) {\n+        Node index \u003d ref.getNext();\n+        if (index.getType() !\u003d Token.NUMBER) {\n+            continue;\n+        }\n+        int value \u003d (int) index.getDouble();\n+        if (value \u003e\u003d numNamedParameter) {\n+            ref.getParent().getParent().replaceChild(ref.getParent(), Node.newString(Token.NAME, argNames[value - numNamedParameter]));\n+        } else {\n+            Node name \u003d parametersList.getFirstChild();\n+            for (int i \u003d 0; i \u003c value; i++) {\n+                name \u003d name.getNext();\n+            }\n+            ref.getParent().getParent().replaceChild(ref.getParent(), Node.newString(Token.NAME, name.getString()));\n+        }\n+        changed \u003d true;\n+    }\n+    return changed;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private boolean tryReplaceArguments(Scope scope) {\n    Node parametersList \u003d scope.getRootNode().getFirstChild().getNext();\n    Preconditions.checkState(parametersList.getType() \u003d\u003d Token.LP);\n    boolean changed \u003d false;\n    int numNamedParameter \u003d parametersList.getChildCount();\n    int highestIndex \u003d numNamedParameter - 1;\n    for (Node ref : currentArgumentsAccess) {\n        if (ref.getParent().getType() !\u003d Token.GETELEM) {\n            return false;\n        }\n        Node index \u003d ref.getNext();\n        if (index.getType() !\u003d Token.NUMBER) {\n            continue;\n        }\n        int value \u003d (int) index.getDouble();\n        if (value \u003e highestIndex) {\n            highestIndex \u003d value;\n        }\n    }\n    int numExtraArgs \u003d highestIndex - numNamedParameter + 1;\n    String[] argNames \u003d new String[numExtraArgs];\n    for (int i \u003d 0; i \u003c numExtraArgs; i++) {\n        String name \u003d getNewName();\n        argNames[i] \u003d name;\n        parametersList.addChildrenToBack(Node.newString(Token.NAME, name));\n        changed \u003d true;\n    }\n    for (Node ref : currentArgumentsAccess) {\n        Node index \u003d ref.getNext();\n        if (index.getType() !\u003d Token.NUMBER) {\n            continue;\n        }\n        int value \u003d (int) index.getDouble();\n        if (value \u003e\u003d numNamedParameter) {\n            ref.getParent().getParent().replaceChild(ref.getParent(), Node.newString(Token.NAME, argNames[value - numNamedParameter]));\n        } else {\n            Node name \u003d parametersList.getFirstChild();\n            for (int i \u003d 0; i \u003c value; i++) {\n                name \u003d name.getNext();\n            }\n            ref.getParent().getParent().replaceChild(ref.getParent(), Node.newString(Token.NAME, name.getString()));\n        }\n        changed \u003d true;\n    }\n    return changed;\n}",
      "path": "src/com/google/javascript/jscomp/OptimizeArgumentsArray.java",
      "functionStartLine": 179,
      "functionName": "tryReplaceArguments",
      "functionAnnotation": "",
      "functionDoc": "Tries to optimize all the arguments array access in this scope by assigning\na name to each element.\n\n@param scope scope of the function\n@return true if any modification has been done to the AST\n"
    }
  }
}