{
  "origin": "codeshovel",
  "repositoryName": "Closure-59b",
  "repositoryPath": "/tmp/Closure-59b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NodeUtil.java",
  "functionName": "getPureBooleanValue",
  "functionId": "getPureBooleanValue___n-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/NodeUtil.java",
  "functionAnnotation": "",
  "functionDoc": "Gets the boolean value of a node that represents a literal. This method\neffectively emulates the \u003ccode\u003eBoolean()\u003c/code\u003e JavaScript cast function\nexcept it return UNKNOWN for known values with side-effects, use\ngetExpressionBooleanValue if you don\u0027t care about side-effects.\n",
  "functionStartLine": 122,
  "functionEndLine": 168,
  "numCommitsSeen": 169,
  "timeTaken": 7757,
  "changeHistory": [
    "fbaadc736f0031dd84bebea33abae497b47158cb",
    "86a7d25f3cc1177f35dc6480260fb807912c03fa",
    "e7ce7f710e1bf297f1a4258b53f22f550fc1f2e3",
    "ad32e173b7c78f48ff85324dc310fa5b5888e2aa",
    "e33e925eea3a8e4de958864e531e1adc4da62e18",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "fbaadc736f0031dd84bebea33abae497b47158cb": "Ybodychange",
    "86a7d25f3cc1177f35dc6480260fb807912c03fa": "Ymultichange(Yrename,Ybodychange,Ydocchange)",
    "e7ce7f710e1bf297f1a4258b53f22f550fc1f2e3": "Ybodychange",
    "ad32e173b7c78f48ff85324dc310fa5b5888e2aa": "Ydocchange",
    "e33e925eea3a8e4de958864e531e1adc4da62e18": "Ymultichange(Yreturntypechange,Ybodychange)",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "fbaadc736f0031dd84bebea33abae497b47158cb": {
      "type": "Ybodychange",
      "commitMessage": "\nfix a mishandling of the void keyword\nalso fix a bunch of apis\nfixes issue 504\n\nR\u003djohnlenz\nDELTA\u003d126  (29 added, 0 deleted, 97 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2506\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1248 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/6/11, 7:58 PM",
      "commitName": "fbaadc736f0031dd84bebea33abae497b47158cb",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "6/30/11, 1:25 PM",
      "commitNameOld": "9320feca198878ca9464aae089399a8891c314d7",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 6.27,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "static TernaryValue getPureBooleanValue(Node n) {\n    switch(n.getType()) {\n        case Token.STRING:\n            return TernaryValue.forBoolean(n.getString().length() \u003e 0);\n        case Token.NUMBER:\n            return TernaryValue.forBoolean(n.getDouble() !\u003d 0);\n        case Token.NOT:\n            return getPureBooleanValue(n.getLastChild()).not();\n        case Token.NULL:\n        case Token.FALSE:\n            return TernaryValue.FALSE;\n        case Token.VOID:\n            if (!mayHaveSideEffects(n.getFirstChild())) {\n                return TernaryValue.FALSE;\n            }\n            break;\n        case Token.NAME:\n            String name \u003d n.getString();\n            if (\"undefined\".equals(name) || \"NaN\".equals(name)) {\n                return TernaryValue.FALSE;\n            } else if (\"Infinity\".equals(name)) {\n                return TernaryValue.TRUE;\n            }\n            break;\n        case Token.TRUE:\n        case Token.REGEXP:\n            return TernaryValue.TRUE;\n        case Token.ARRAYLIT:\n        case Token.OBJECTLIT:\n            if (!mayHaveSideEffects(n)) {\n                return TernaryValue.TRUE;\n            }\n            break;\n    }\n    return TernaryValue.UNKNOWN;\n}",
      "path": "src/com/google/javascript/jscomp/NodeUtil.java",
      "functionStartLine": 122,
      "functionName": "getPureBooleanValue",
      "functionAnnotation": "",
      "functionDoc": "Gets the boolean value of a node that represents a literal. This method\neffectively emulates the \u003ccode\u003eBoolean()\u003c/code\u003e JavaScript cast function\nexcept it return UNKNOWN for known values with side-effects, use\ngetExpressionBooleanValue if you don\u0027t care about side-effects.\n",
      "diff": "@@ -1,31 +1,36 @@\n static TernaryValue getPureBooleanValue(Node n) {\n     switch(n.getType()) {\n         case Token.STRING:\n             return TernaryValue.forBoolean(n.getString().length() \u003e 0);\n         case Token.NUMBER:\n             return TernaryValue.forBoolean(n.getDouble() !\u003d 0);\n         case Token.NOT:\n             return getPureBooleanValue(n.getLastChild()).not();\n         case Token.NULL:\n         case Token.FALSE:\n-        case Token.VOID:\n             return TernaryValue.FALSE;\n+        case Token.VOID:\n+            if (!mayHaveSideEffects(n.getFirstChild())) {\n+                return TernaryValue.FALSE;\n+            }\n+            break;\n         case Token.NAME:\n             String name \u003d n.getString();\n             if (\"undefined\".equals(name) || \"NaN\".equals(name)) {\n                 return TernaryValue.FALSE;\n             } else if (\"Infinity\".equals(name)) {\n                 return TernaryValue.TRUE;\n             }\n             break;\n         case Token.TRUE:\n         case Token.REGEXP:\n             return TernaryValue.TRUE;\n         case Token.ARRAYLIT:\n         case Token.OBJECTLIT:\n             if (!mayHaveSideEffects(n)) {\n                 return TernaryValue.TRUE;\n             }\n+            break;\n     }\n     return TernaryValue.UNKNOWN;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "86a7d25f3cc1177f35dc6480260fb807912c03fa": {
      "type": "Ymultichange(Yrename,Ybodychange,Ydocchange)",
      "commitMessage": "\nFix bad folding of expressions containing object and array literals with side-effects.\n\nR\u003dnicksantos\nDELTA\u003d144  (94 added, 0 deleted, 50 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1088\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@941 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/25/11, 4:27 PM",
      "commitName": "86a7d25f3cc1177f35dc6480260fb807912c03fa",
      "commitAuthor": "johnlenz@google.com",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "\nFix bad folding of expressions containing object and array literals with side-effects.\n\nR\u003dnicksantos\nDELTA\u003d144  (94 added, 0 deleted, 50 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1088\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@941 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "3/25/11, 4:27 PM",
          "commitName": "86a7d25f3cc1177f35dc6480260fb807912c03fa",
          "commitAuthor": "johnlenz@google.com",
          "commitDateOld": "3/21/11, 2:54 PM",
          "commitNameOld": "b41c7bd823a9d7df8b9ec276ff3ce4286ab1e890",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 4.07,
          "commitsBetweenForRepo": 20,
          "commitsBetweenForFile": 1,
          "actualSource": "static TernaryValue getPureBooleanValue(Node n) {\n    switch(n.getType()) {\n        case Token.STRING:\n            return TernaryValue.forBoolean(n.getString().length() \u003e 0);\n        case Token.NUMBER:\n            return TernaryValue.forBoolean(n.getDouble() !\u003d 0);\n        case Token.NOT:\n            return getPureBooleanValue(n.getLastChild()).not();\n        case Token.NULL:\n        case Token.FALSE:\n        case Token.VOID:\n            return TernaryValue.FALSE;\n        case Token.NAME:\n            String name \u003d n.getString();\n            if (\"undefined\".equals(name) || \"NaN\".equals(name)) {\n                return TernaryValue.FALSE;\n            } else if (\"Infinity\".equals(name)) {\n                return TernaryValue.TRUE;\n            }\n            break;\n        case Token.TRUE:\n        case Token.REGEXP:\n            return TernaryValue.TRUE;\n        case Token.ARRAYLIT:\n        case Token.OBJECTLIT:\n            if (!mayHaveSideEffects(n)) {\n                return TernaryValue.TRUE;\n            }\n    }\n    return TernaryValue.UNKNOWN;\n}",
          "path": "src/com/google/javascript/jscomp/NodeUtil.java",
          "functionStartLine": 117,
          "functionName": "getPureBooleanValue",
          "functionAnnotation": "",
          "functionDoc": "Gets the boolean value of a node that represents a literal. This method\neffectively emulates the \u003ccode\u003eBoolean()\u003c/code\u003e JavaScript cast function\nexcept it return UNKNOWN for known values with side-effects, use\ngetExpressionBooleanValue if you don\u0027t care about side-effects.\n",
          "diff": "@@ -1,28 +1,31 @@\n-static TernaryValue getBooleanValue(Node n) {\n+static TernaryValue getPureBooleanValue(Node n) {\n     switch(n.getType()) {\n         case Token.STRING:\n             return TernaryValue.forBoolean(n.getString().length() \u003e 0);\n         case Token.NUMBER:\n             return TernaryValue.forBoolean(n.getDouble() !\u003d 0);\n         case Token.NOT:\n-            return getBooleanValue(n.getLastChild()).not();\n+            return getPureBooleanValue(n.getLastChild()).not();\n         case Token.NULL:\n         case Token.FALSE:\n         case Token.VOID:\n             return TernaryValue.FALSE;\n         case Token.NAME:\n             String name \u003d n.getString();\n             if (\"undefined\".equals(name) || \"NaN\".equals(name)) {\n                 return TernaryValue.FALSE;\n             } else if (\"Infinity\".equals(name)) {\n                 return TernaryValue.TRUE;\n             }\n             break;\n         case Token.TRUE:\n-        case Token.ARRAYLIT:\n-        case Token.OBJECTLIT:\n         case Token.REGEXP:\n             return TernaryValue.TRUE;\n+        case Token.ARRAYLIT:\n+        case Token.OBJECTLIT:\n+            if (!mayHaveSideEffects(n)) {\n+                return TernaryValue.TRUE;\n+            }\n     }\n     return TernaryValue.UNKNOWN;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "getBooleanValue",
            "newValue": "getPureBooleanValue"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nFix bad folding of expressions containing object and array literals with side-effects.\n\nR\u003dnicksantos\nDELTA\u003d144  (94 added, 0 deleted, 50 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1088\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@941 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "3/25/11, 4:27 PM",
          "commitName": "86a7d25f3cc1177f35dc6480260fb807912c03fa",
          "commitAuthor": "johnlenz@google.com",
          "commitDateOld": "3/21/11, 2:54 PM",
          "commitNameOld": "b41c7bd823a9d7df8b9ec276ff3ce4286ab1e890",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 4.07,
          "commitsBetweenForRepo": 20,
          "commitsBetweenForFile": 1,
          "actualSource": "static TernaryValue getPureBooleanValue(Node n) {\n    switch(n.getType()) {\n        case Token.STRING:\n            return TernaryValue.forBoolean(n.getString().length() \u003e 0);\n        case Token.NUMBER:\n            return TernaryValue.forBoolean(n.getDouble() !\u003d 0);\n        case Token.NOT:\n            return getPureBooleanValue(n.getLastChild()).not();\n        case Token.NULL:\n        case Token.FALSE:\n        case Token.VOID:\n            return TernaryValue.FALSE;\n        case Token.NAME:\n            String name \u003d n.getString();\n            if (\"undefined\".equals(name) || \"NaN\".equals(name)) {\n                return TernaryValue.FALSE;\n            } else if (\"Infinity\".equals(name)) {\n                return TernaryValue.TRUE;\n            }\n            break;\n        case Token.TRUE:\n        case Token.REGEXP:\n            return TernaryValue.TRUE;\n        case Token.ARRAYLIT:\n        case Token.OBJECTLIT:\n            if (!mayHaveSideEffects(n)) {\n                return TernaryValue.TRUE;\n            }\n    }\n    return TernaryValue.UNKNOWN;\n}",
          "path": "src/com/google/javascript/jscomp/NodeUtil.java",
          "functionStartLine": 117,
          "functionName": "getPureBooleanValue",
          "functionAnnotation": "",
          "functionDoc": "Gets the boolean value of a node that represents a literal. This method\neffectively emulates the \u003ccode\u003eBoolean()\u003c/code\u003e JavaScript cast function\nexcept it return UNKNOWN for known values with side-effects, use\ngetExpressionBooleanValue if you don\u0027t care about side-effects.\n",
          "diff": "@@ -1,28 +1,31 @@\n-static TernaryValue getBooleanValue(Node n) {\n+static TernaryValue getPureBooleanValue(Node n) {\n     switch(n.getType()) {\n         case Token.STRING:\n             return TernaryValue.forBoolean(n.getString().length() \u003e 0);\n         case Token.NUMBER:\n             return TernaryValue.forBoolean(n.getDouble() !\u003d 0);\n         case Token.NOT:\n-            return getBooleanValue(n.getLastChild()).not();\n+            return getPureBooleanValue(n.getLastChild()).not();\n         case Token.NULL:\n         case Token.FALSE:\n         case Token.VOID:\n             return TernaryValue.FALSE;\n         case Token.NAME:\n             String name \u003d n.getString();\n             if (\"undefined\".equals(name) || \"NaN\".equals(name)) {\n                 return TernaryValue.FALSE;\n             } else if (\"Infinity\".equals(name)) {\n                 return TernaryValue.TRUE;\n             }\n             break;\n         case Token.TRUE:\n-        case Token.ARRAYLIT:\n-        case Token.OBJECTLIT:\n         case Token.REGEXP:\n             return TernaryValue.TRUE;\n+        case Token.ARRAYLIT:\n+        case Token.OBJECTLIT:\n+            if (!mayHaveSideEffects(n)) {\n+                return TernaryValue.TRUE;\n+            }\n     }\n     return TernaryValue.UNKNOWN;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "\nFix bad folding of expressions containing object and array literals with side-effects.\n\nR\u003dnicksantos\nDELTA\u003d144  (94 added, 0 deleted, 50 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1088\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@941 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "3/25/11, 4:27 PM",
          "commitName": "86a7d25f3cc1177f35dc6480260fb807912c03fa",
          "commitAuthor": "johnlenz@google.com",
          "commitDateOld": "3/21/11, 2:54 PM",
          "commitNameOld": "b41c7bd823a9d7df8b9ec276ff3ce4286ab1e890",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 4.07,
          "commitsBetweenForRepo": 20,
          "commitsBetweenForFile": 1,
          "actualSource": "static TernaryValue getPureBooleanValue(Node n) {\n    switch(n.getType()) {\n        case Token.STRING:\n            return TernaryValue.forBoolean(n.getString().length() \u003e 0);\n        case Token.NUMBER:\n            return TernaryValue.forBoolean(n.getDouble() !\u003d 0);\n        case Token.NOT:\n            return getPureBooleanValue(n.getLastChild()).not();\n        case Token.NULL:\n        case Token.FALSE:\n        case Token.VOID:\n            return TernaryValue.FALSE;\n        case Token.NAME:\n            String name \u003d n.getString();\n            if (\"undefined\".equals(name) || \"NaN\".equals(name)) {\n                return TernaryValue.FALSE;\n            } else if (\"Infinity\".equals(name)) {\n                return TernaryValue.TRUE;\n            }\n            break;\n        case Token.TRUE:\n        case Token.REGEXP:\n            return TernaryValue.TRUE;\n        case Token.ARRAYLIT:\n        case Token.OBJECTLIT:\n            if (!mayHaveSideEffects(n)) {\n                return TernaryValue.TRUE;\n            }\n    }\n    return TernaryValue.UNKNOWN;\n}",
          "path": "src/com/google/javascript/jscomp/NodeUtil.java",
          "functionStartLine": 117,
          "functionName": "getPureBooleanValue",
          "functionAnnotation": "",
          "functionDoc": "Gets the boolean value of a node that represents a literal. This method\neffectively emulates the \u003ccode\u003eBoolean()\u003c/code\u003e JavaScript cast function\nexcept it return UNKNOWN for known values with side-effects, use\ngetExpressionBooleanValue if you don\u0027t care about side-effects.\n",
          "diff": "@@ -1,28 +1,31 @@\n-static TernaryValue getBooleanValue(Node n) {\n+static TernaryValue getPureBooleanValue(Node n) {\n     switch(n.getType()) {\n         case Token.STRING:\n             return TernaryValue.forBoolean(n.getString().length() \u003e 0);\n         case Token.NUMBER:\n             return TernaryValue.forBoolean(n.getDouble() !\u003d 0);\n         case Token.NOT:\n-            return getBooleanValue(n.getLastChild()).not();\n+            return getPureBooleanValue(n.getLastChild()).not();\n         case Token.NULL:\n         case Token.FALSE:\n         case Token.VOID:\n             return TernaryValue.FALSE;\n         case Token.NAME:\n             String name \u003d n.getString();\n             if (\"undefined\".equals(name) || \"NaN\".equals(name)) {\n                 return TernaryValue.FALSE;\n             } else if (\"Infinity\".equals(name)) {\n                 return TernaryValue.TRUE;\n             }\n             break;\n         case Token.TRUE:\n-        case Token.ARRAYLIT:\n-        case Token.OBJECTLIT:\n         case Token.REGEXP:\n             return TernaryValue.TRUE;\n+        case Token.ARRAYLIT:\n+        case Token.OBJECTLIT:\n+            if (!mayHaveSideEffects(n)) {\n+                return TernaryValue.TRUE;\n+            }\n     }\n     return TernaryValue.UNKNOWN;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Gets the boolean value of a node that represents a literal. This method\neffectively emulates the \u003ccode\u003eBoolean()\u003c/code\u003e JavaScript cast function.\n",
            "newValue": "Gets the boolean value of a node that represents a literal. This method\neffectively emulates the \u003ccode\u003eBoolean()\u003c/code\u003e JavaScript cast function\nexcept it return UNKNOWN for known values with side-effects, use\ngetExpressionBooleanValue if you don\u0027t care about side-effects.\n"
          }
        }
      ]
    },
    "e7ce7f710e1bf297f1a4258b53f22f550fc1f2e3": {
      "type": "Ybodychange",
      "commitMessage": "\nUse !0 and !1 for true and false.\n\nR\u003djohnlenz\nDELTA\u003d97  (81 added, 0 deleted, 16 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d500\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@775 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/10/11, 4:32 PM",
      "commitName": "e7ce7f710e1bf297f1a4258b53f22f550fc1f2e3",
      "commitAuthor": "acleung@google.com",
      "commitDateOld": "2/7/11, 2:59 PM",
      "commitNameOld": "1a7fbd18b47c102152869c3b046b65ff0f12fc43",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 3.06,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "static TernaryValue getBooleanValue(Node n) {\n    switch(n.getType()) {\n        case Token.STRING:\n            return TernaryValue.forBoolean(n.getString().length() \u003e 0);\n        case Token.NUMBER:\n            return TernaryValue.forBoolean(n.getDouble() !\u003d 0);\n        case Token.NOT:\n            return getBooleanValue(n.getLastChild()).not();\n        case Token.NULL:\n        case Token.FALSE:\n        case Token.VOID:\n            return TernaryValue.FALSE;\n        case Token.NAME:\n            String name \u003d n.getString();\n            if (\"undefined\".equals(name) || \"NaN\".equals(name)) {\n                return TernaryValue.FALSE;\n            } else if (\"Infinity\".equals(name)) {\n                return TernaryValue.TRUE;\n            }\n            break;\n        case Token.TRUE:\n        case Token.ARRAYLIT:\n        case Token.OBJECTLIT:\n        case Token.REGEXP:\n            return TernaryValue.TRUE;\n    }\n    return TernaryValue.UNKNOWN;\n}",
      "path": "src/com/google/javascript/jscomp/NodeUtil.java",
      "functionStartLine": 110,
      "functionName": "getBooleanValue",
      "functionAnnotation": "",
      "functionDoc": "Gets the boolean value of a node that represents a literal. This method\neffectively emulates the \u003ccode\u003eBoolean()\u003c/code\u003e JavaScript cast function.\n",
      "diff": "@@ -1,26 +1,28 @@\n static TernaryValue getBooleanValue(Node n) {\n     switch(n.getType()) {\n         case Token.STRING:\n             return TernaryValue.forBoolean(n.getString().length() \u003e 0);\n         case Token.NUMBER:\n             return TernaryValue.forBoolean(n.getDouble() !\u003d 0);\n+        case Token.NOT:\n+            return getBooleanValue(n.getLastChild()).not();\n         case Token.NULL:\n         case Token.FALSE:\n         case Token.VOID:\n             return TernaryValue.FALSE;\n         case Token.NAME:\n             String name \u003d n.getString();\n             if (\"undefined\".equals(name) || \"NaN\".equals(name)) {\n                 return TernaryValue.FALSE;\n             } else if (\"Infinity\".equals(name)) {\n                 return TernaryValue.TRUE;\n             }\n             break;\n         case Token.TRUE:\n         case Token.ARRAYLIT:\n         case Token.OBJECTLIT:\n         case Token.REGEXP:\n             return TernaryValue.TRUE;\n     }\n     return TernaryValue.UNKNOWN;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ad32e173b7c78f48ff85324dc310fa5b5888e2aa": {
      "type": "Ydocchange",
      "commitMessage": "\nChanges to completely remove goog.userAgent as required by\njavatests/com/google/javascript/closure/CompileUserAgentTest.  This\nrequires three changes:\n\n1) being able to remove expressions without side-effects in the global\nscope with the PeepholeRemoveDeadCode pass. This is simply a change to\nhandle both BLOCK and SCRIPT.\n\n2) a change to be able to fold constant result if conditions that have\nside-effects (a \u003d 1).  This was a change to include a smarter version\nof NodeUtil.getBooleanValue. A general expression evaluator would be\npreferred.\n\n3) and finally a bit of a hack to handle assignments followed by if\nstatements.  I would prefer a general solution, but this works well\nenough for this purpose.  A good general solution would need a general\nin-place expression evaluator and control-flow value propagation, both\nof which I\u0027ve special cased. It handles this:\n\na \u003d /MSIE/\nif (a) {\na.exec(value);\n}\n\n(we want the regexp object to get inlined into the exec call so it is known to\nbe side-effect free).\n\nR\u003dgboyer,acleung\nDELTA\u003d388  (333 added, 28 deleted, 27 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d90004\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@326 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/4/10, 12:47 PM",
      "commitName": "ad32e173b7c78f48ff85324dc310fa5b5888e2aa",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "7/23/10, 2:49 PM",
      "commitNameOld": "f0362b1ab1ae1339e017b1d04f016980e3fa6cb6",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 11.92,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "actualSource": "static TernaryValue getBooleanValue(Node n) {\n    switch(n.getType()) {\n        case Token.STRING:\n            return TernaryValue.forBoolean(n.getString().length() \u003e 0);\n        case Token.NUMBER:\n            return TernaryValue.forBoolean(n.getDouble() !\u003d 0);\n        case Token.NULL:\n        case Token.FALSE:\n        case Token.VOID:\n            return TernaryValue.FALSE;\n        case Token.NAME:\n            String name \u003d n.getString();\n            if (\"undefined\".equals(name) || \"NaN\".equals(name)) {\n                return TernaryValue.FALSE;\n            } else if (\"Infinity\".equals(name)) {\n                return TernaryValue.TRUE;\n            }\n            break;\n        case Token.TRUE:\n        case Token.ARRAYLIT:\n        case Token.OBJECTLIT:\n        case Token.REGEXP:\n            return TernaryValue.TRUE;\n    }\n    return TernaryValue.UNKNOWN;\n}",
      "path": "src/com/google/javascript/jscomp/NodeUtil.java",
      "functionStartLine": 108,
      "functionName": "getBooleanValue",
      "functionAnnotation": "",
      "functionDoc": "Gets the boolean value of a node that represents a literal. This method\neffectively emulates the \u003ccode\u003eBoolean()\u003c/code\u003e JavaScript cast function.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Gets the boolean value of a node that represents a literal. This method\neffectively emulates the \u003ccode\u003eBoolean()\u003c/code\u003e JavaScript cast function.\n\n@throws IllegalArgumentException If {@code n} is not a literal value\n",
        "newValue": "Gets the boolean value of a node that represents a literal. This method\neffectively emulates the \u003ccode\u003eBoolean()\u003c/code\u003e JavaScript cast function.\n"
      }
    },
    "e33e925eea3a8e4de958864e531e1adc4da62e18": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "\nChange on 2010/06/14 by johnlenz\n\n        Remove unneed parenthese from hook expressions.\n\n        R\u003dacleung\n        DELTA\u003d76  (20 added, 4 deleted, 52 changed)\n\nChange on 2010/06/14 by johnlenz\n\n        Fix non-determinisim.\n\n        R\u003djschorr\n        DELTA\u003d5  (3 added, 0 deleted, 2 changed)\n\nChange on 2010/06/15 by nicksantos\n\n        fix a regression caused by a change in the ordering in which\n        constant folding is done.\n        parts of PeepholeSubstituteAlternateSyntax will crash if they\n        see a NEG node with a NUMBER child.\n        They were assuming that FoldConstants would fold these into one node.\n\n        R\u003ddcc,acleung\n        DELTA\u003d153  (70 added, 6 deleted, 77 changed)\n\nChange on 2010/06/15 by johnlenz\n\n        More debug diffing improvements: convert unique globally unique names\n        to locally unique names for reproduciblity.\n\n        R\u003dacleung\n        DELTA\u003d222  (44 added, 7 deleted, 171 changed)\n\nChange on 2010/06/15 by nicksantos\n\n        Add the @nocompile annotation as a signal that this file should\n        be dropped silently if it gets pulled into a --manage_closure_dependencies\n        build.\n\n        R\u003dbowdidge,gboyer\n        DELTA\u003d82  (60 added, 1 deleted, 21 changed)\n\nChange on 2010/06/15 by dcc\n\n        Refactor FoldConstants dead code removal into PeepholeRemoveDeadCode.\n\n        R\u003dacleung\n        DELTA\u003d744  (403 added, 307 deleted, 34 changed)\n\nChange on 2010/06/15 by dcc\n\n        ExternExports test now emits type annotation for exported externs.\n                - Changed ExternExportsPass to generate the externs as an AST and then print\n        to a String rather than ad hoc with a StringBuilder.\n                - Changed TypedCodeGenerator to generate \u0027*\u0027 (AllType) for parameters with unknown types rather than \u0027?\u0027 (UnknownType) since \u0027?\u0027 is not valid JSDoc.\n\n        R\u003dacleung\n        DELTA\u003d643  (496 added, 66 deleted, 81 changed)\n\nChange on 2010/06/16 by johnlenz\n\n        Tweak to PureFunctionIndentifier to propagate the side-effects for\n        anonymous function expressions like: (Date.now||function(){return\n        +new Date})()\n\n        R\u003davd\n        DELTA\u003d42  (39 added, 0 deleted, 3 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d29010\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@243 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/16/10, 12:33 PM",
      "commitName": "e33e925eea3a8e4de958864e531e1adc4da62e18",
      "commitAuthor": "Nicholas.J.Santos",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "\nChange on 2010/06/14 by johnlenz\n\n        Remove unneed parenthese from hook expressions.\n\n        R\u003dacleung\n        DELTA\u003d76  (20 added, 4 deleted, 52 changed)\n\nChange on 2010/06/14 by johnlenz\n\n        Fix non-determinisim.\n\n        R\u003djschorr\n        DELTA\u003d5  (3 added, 0 deleted, 2 changed)\n\nChange on 2010/06/15 by nicksantos\n\n        fix a regression caused by a change in the ordering in which\n        constant folding is done.\n        parts of PeepholeSubstituteAlternateSyntax will crash if they\n        see a NEG node with a NUMBER child.\n        They were assuming that FoldConstants would fold these into one node.\n\n        R\u003ddcc,acleung\n        DELTA\u003d153  (70 added, 6 deleted, 77 changed)\n\nChange on 2010/06/15 by johnlenz\n\n        More debug diffing improvements: convert unique globally unique names\n        to locally unique names for reproduciblity.\n\n        R\u003dacleung\n        DELTA\u003d222  (44 added, 7 deleted, 171 changed)\n\nChange on 2010/06/15 by nicksantos\n\n        Add the @nocompile annotation as a signal that this file should\n        be dropped silently if it gets pulled into a --manage_closure_dependencies\n        build.\n\n        R\u003dbowdidge,gboyer\n        DELTA\u003d82  (60 added, 1 deleted, 21 changed)\n\nChange on 2010/06/15 by dcc\n\n        Refactor FoldConstants dead code removal into PeepholeRemoveDeadCode.\n\n        R\u003dacleung\n        DELTA\u003d744  (403 added, 307 deleted, 34 changed)\n\nChange on 2010/06/15 by dcc\n\n        ExternExports test now emits type annotation for exported externs.\n                - Changed ExternExportsPass to generate the externs as an AST and then print\n        to a String rather than ad hoc with a StringBuilder.\n                - Changed TypedCodeGenerator to generate \u0027*\u0027 (AllType) for parameters with unknown types rather than \u0027?\u0027 (UnknownType) since \u0027?\u0027 is not valid JSDoc.\n\n        R\u003dacleung\n        DELTA\u003d643  (496 added, 66 deleted, 81 changed)\n\nChange on 2010/06/16 by johnlenz\n\n        Tweak to PureFunctionIndentifier to propagate the side-effects for\n        anonymous function expressions like: (Date.now||function(){return\n        +new Date})()\n\n        R\u003davd\n        DELTA\u003d42  (39 added, 0 deleted, 3 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d29010\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@243 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "6/16/10, 12:33 PM",
          "commitName": "e33e925eea3a8e4de958864e531e1adc4da62e18",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "5/29/10, 1:07 PM",
          "commitNameOld": "b4801b28ceea8db0f63da7440d6769cb9b7cce8a",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 17.98,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "actualSource": "static TernaryValue getBooleanValue(Node n) {\n    switch(n.getType()) {\n        case Token.STRING:\n            return TernaryValue.forBoolean(n.getString().length() \u003e 0);\n        case Token.NUMBER:\n            return TernaryValue.forBoolean(n.getDouble() !\u003d 0);\n        case Token.NULL:\n        case Token.FALSE:\n        case Token.VOID:\n            return TernaryValue.FALSE;\n        case Token.NAME:\n            String name \u003d n.getString();\n            if (\"undefined\".equals(name) || \"NaN\".equals(name)) {\n                return TernaryValue.FALSE;\n            } else if (\"Infinity\".equals(name)) {\n                return TernaryValue.TRUE;\n            }\n            break;\n        case Token.TRUE:\n        case Token.ARRAYLIT:\n        case Token.OBJECTLIT:\n        case Token.REGEXP:\n            return TernaryValue.TRUE;\n    }\n    return TernaryValue.UNKNOWN;\n}",
          "path": "src/com/google/javascript/jscomp/NodeUtil.java",
          "functionStartLine": 70,
          "functionName": "getBooleanValue",
          "functionAnnotation": "",
          "functionDoc": "Gets the boolean value of a node that represents a literal. This method\neffectively emulates the \u003ccode\u003eBoolean()\u003c/code\u003e JavaScript cast function.\n\n@throws IllegalArgumentException If {@code n} is not a literal value\n",
          "diff": "@@ -1,26 +1,26 @@\n-static boolean getBooleanValue(Node n) {\n+static TernaryValue getBooleanValue(Node n) {\n     switch(n.getType()) {\n         case Token.STRING:\n-            return n.getString().length() \u003e 0;\n+            return TernaryValue.forBoolean(n.getString().length() \u003e 0);\n         case Token.NUMBER:\n-            return n.getDouble() !\u003d 0;\n+            return TernaryValue.forBoolean(n.getDouble() !\u003d 0);\n         case Token.NULL:\n         case Token.FALSE:\n         case Token.VOID:\n-            return false;\n+            return TernaryValue.FALSE;\n         case Token.NAME:\n             String name \u003d n.getString();\n             if (\"undefined\".equals(name) || \"NaN\".equals(name)) {\n-                return false;\n+                return TernaryValue.FALSE;\n             } else if (\"Infinity\".equals(name)) {\n-                return true;\n+                return TernaryValue.TRUE;\n             }\n             break;\n         case Token.TRUE:\n         case Token.ARRAYLIT:\n         case Token.OBJECTLIT:\n         case Token.REGEXP:\n-            return true;\n+            return TernaryValue.TRUE;\n     }\n-    throw new IllegalArgumentException(\"Non-literal value: \" + n);\n+    return TernaryValue.UNKNOWN;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "boolean",
            "newValue": "TernaryValue"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nChange on 2010/06/14 by johnlenz\n\n        Remove unneed parenthese from hook expressions.\n\n        R\u003dacleung\n        DELTA\u003d76  (20 added, 4 deleted, 52 changed)\n\nChange on 2010/06/14 by johnlenz\n\n        Fix non-determinisim.\n\n        R\u003djschorr\n        DELTA\u003d5  (3 added, 0 deleted, 2 changed)\n\nChange on 2010/06/15 by nicksantos\n\n        fix a regression caused by a change in the ordering in which\n        constant folding is done.\n        parts of PeepholeSubstituteAlternateSyntax will crash if they\n        see a NEG node with a NUMBER child.\n        They were assuming that FoldConstants would fold these into one node.\n\n        R\u003ddcc,acleung\n        DELTA\u003d153  (70 added, 6 deleted, 77 changed)\n\nChange on 2010/06/15 by johnlenz\n\n        More debug diffing improvements: convert unique globally unique names\n        to locally unique names for reproduciblity.\n\n        R\u003dacleung\n        DELTA\u003d222  (44 added, 7 deleted, 171 changed)\n\nChange on 2010/06/15 by nicksantos\n\n        Add the @nocompile annotation as a signal that this file should\n        be dropped silently if it gets pulled into a --manage_closure_dependencies\n        build.\n\n        R\u003dbowdidge,gboyer\n        DELTA\u003d82  (60 added, 1 deleted, 21 changed)\n\nChange on 2010/06/15 by dcc\n\n        Refactor FoldConstants dead code removal into PeepholeRemoveDeadCode.\n\n        R\u003dacleung\n        DELTA\u003d744  (403 added, 307 deleted, 34 changed)\n\nChange on 2010/06/15 by dcc\n\n        ExternExports test now emits type annotation for exported externs.\n                - Changed ExternExportsPass to generate the externs as an AST and then print\n        to a String rather than ad hoc with a StringBuilder.\n                - Changed TypedCodeGenerator to generate \u0027*\u0027 (AllType) for parameters with unknown types rather than \u0027?\u0027 (UnknownType) since \u0027?\u0027 is not valid JSDoc.\n\n        R\u003dacleung\n        DELTA\u003d643  (496 added, 66 deleted, 81 changed)\n\nChange on 2010/06/16 by johnlenz\n\n        Tweak to PureFunctionIndentifier to propagate the side-effects for\n        anonymous function expressions like: (Date.now||function(){return\n        +new Date})()\n\n        R\u003davd\n        DELTA\u003d42  (39 added, 0 deleted, 3 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d29010\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@243 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "6/16/10, 12:33 PM",
          "commitName": "e33e925eea3a8e4de958864e531e1adc4da62e18",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "5/29/10, 1:07 PM",
          "commitNameOld": "b4801b28ceea8db0f63da7440d6769cb9b7cce8a",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 17.98,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "actualSource": "static TernaryValue getBooleanValue(Node n) {\n    switch(n.getType()) {\n        case Token.STRING:\n            return TernaryValue.forBoolean(n.getString().length() \u003e 0);\n        case Token.NUMBER:\n            return TernaryValue.forBoolean(n.getDouble() !\u003d 0);\n        case Token.NULL:\n        case Token.FALSE:\n        case Token.VOID:\n            return TernaryValue.FALSE;\n        case Token.NAME:\n            String name \u003d n.getString();\n            if (\"undefined\".equals(name) || \"NaN\".equals(name)) {\n                return TernaryValue.FALSE;\n            } else if (\"Infinity\".equals(name)) {\n                return TernaryValue.TRUE;\n            }\n            break;\n        case Token.TRUE:\n        case Token.ARRAYLIT:\n        case Token.OBJECTLIT:\n        case Token.REGEXP:\n            return TernaryValue.TRUE;\n    }\n    return TernaryValue.UNKNOWN;\n}",
          "path": "src/com/google/javascript/jscomp/NodeUtil.java",
          "functionStartLine": 70,
          "functionName": "getBooleanValue",
          "functionAnnotation": "",
          "functionDoc": "Gets the boolean value of a node that represents a literal. This method\neffectively emulates the \u003ccode\u003eBoolean()\u003c/code\u003e JavaScript cast function.\n\n@throws IllegalArgumentException If {@code n} is not a literal value\n",
          "diff": "@@ -1,26 +1,26 @@\n-static boolean getBooleanValue(Node n) {\n+static TernaryValue getBooleanValue(Node n) {\n     switch(n.getType()) {\n         case Token.STRING:\n-            return n.getString().length() \u003e 0;\n+            return TernaryValue.forBoolean(n.getString().length() \u003e 0);\n         case Token.NUMBER:\n-            return n.getDouble() !\u003d 0;\n+            return TernaryValue.forBoolean(n.getDouble() !\u003d 0);\n         case Token.NULL:\n         case Token.FALSE:\n         case Token.VOID:\n-            return false;\n+            return TernaryValue.FALSE;\n         case Token.NAME:\n             String name \u003d n.getString();\n             if (\"undefined\".equals(name) || \"NaN\".equals(name)) {\n-                return false;\n+                return TernaryValue.FALSE;\n             } else if (\"Infinity\".equals(name)) {\n-                return true;\n+                return TernaryValue.TRUE;\n             }\n             break;\n         case Token.TRUE:\n         case Token.ARRAYLIT:\n         case Token.OBJECTLIT:\n         case Token.REGEXP:\n-            return true;\n+            return TernaryValue.TRUE;\n     }\n-    throw new IllegalArgumentException(\"Non-literal value: \" + n);\n+    return TernaryValue.UNKNOWN;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,26 @@\n+static boolean getBooleanValue(Node n) {\n+    switch(n.getType()) {\n+        case Token.STRING:\n+            return n.getString().length() \u003e 0;\n+        case Token.NUMBER:\n+            return n.getDouble() !\u003d 0;\n+        case Token.NULL:\n+        case Token.FALSE:\n+        case Token.VOID:\n+            return false;\n+        case Token.NAME:\n+            String name \u003d n.getString();\n+            if (\"undefined\".equals(name) || \"NaN\".equals(name)) {\n+                return false;\n+            } else if (\"Infinity\".equals(name)) {\n+                return true;\n+            }\n+            break;\n+        case Token.TRUE:\n+        case Token.ARRAYLIT:\n+        case Token.OBJECTLIT:\n+        case Token.REGEXP:\n+            return true;\n+    }\n+    throw new IllegalArgumentException(\"Non-literal value: \" + n);\n+}\n\\ No newline at end of file\n",
      "actualSource": "static boolean getBooleanValue(Node n) {\n    switch(n.getType()) {\n        case Token.STRING:\n            return n.getString().length() \u003e 0;\n        case Token.NUMBER:\n            return n.getDouble() !\u003d 0;\n        case Token.NULL:\n        case Token.FALSE:\n        case Token.VOID:\n            return false;\n        case Token.NAME:\n            String name \u003d n.getString();\n            if (\"undefined\".equals(name) || \"NaN\".equals(name)) {\n                return false;\n            } else if (\"Infinity\".equals(name)) {\n                return true;\n            }\n            break;\n        case Token.TRUE:\n        case Token.ARRAYLIT:\n        case Token.OBJECTLIT:\n        case Token.REGEXP:\n            return true;\n    }\n    throw new IllegalArgumentException(\"Non-literal value: \" + n);\n}",
      "path": "src/com/google/javascript/jscomp/NodeUtil.java",
      "functionStartLine": 68,
      "functionName": "getBooleanValue",
      "functionAnnotation": "",
      "functionDoc": "Gets the boolean value of a node that represents a literal. This method\neffectively emulates the \u003ccode\u003eBoolean()\u003c/code\u003e JavaScript cast function.\n\n@throws IllegalArgumentException If {@code n} is not a literal value\n"
    }
  }
}