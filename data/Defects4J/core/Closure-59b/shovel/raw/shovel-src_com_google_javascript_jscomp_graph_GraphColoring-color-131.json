{
  "origin": "codeshovel",
  "repositoryName": "Closure-59b",
  "repositoryPath": "/tmp/Closure-59b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "GraphColoring.java",
  "functionName": "color",
  "functionId": "$color",
  "sourceFilePath": "src/com/google/javascript/jscomp/graph/GraphColoring.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 131,
  "functionEndLine": 166,
  "numCommitsSeen": 9,
  "timeTaken": 343,
  "changeHistory": [
    "97bbbffb65eda01aa9b38a5cec43a598afb39070",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "97bbbffb65eda01aa9b38a5cec43a598afb39070": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "97bbbffb65eda01aa9b38a5cec43a598afb39070": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/05/12 by nick\n\n        simplify how we build source map paths.\n\n        R\u003djoey\n        DELTA\u003d111  (76 added, 4 deleted, 31 changed)\n\nChange on 2010/05/12 by nick\n\n        Use generics magic to clean up the graph code a bit.\n        These changes don\u0027t give the performance improvements that I hoped,\n        but i think they\u0027re good changes anyway.\n\n        R\u003dalan\n        DELTA\u003d253  (69 added, 121 deleted, 63 changed)\n\nChange on 2010/05/12 by nick\n\n        API clean-up: don\u0027t store null return types or parameter-list types.\n\n        R\u003drobert\n        DELTA\u003d195  (89 added, 54 deleted, 52 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003ddzaoho\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@209 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/13/10, 10:46 AM",
      "commitName": "97bbbffb65eda01aa9b38a5cec43a598afb39070",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "11/3/09, 3:51 PM",
      "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 190.75,
      "commitsBetweenForRepo": 178,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic int color() {\n    graph.clearNodeAnnotations();\n    List\u003cGraphNode\u003cN, E\u003e\u003e worklist \u003d Lists.newArrayList(graph.getNodes());\n    Collections.sort(worklist, new Comparator\u003cGraphNode\u003cN, E\u003e\u003e() {\n\n        @Override\n        public int compare(GraphNode\u003cN, E\u003e o1, GraphNode\u003cN, E\u003e o2) {\n            int result \u003d graph.getWeight(o2.getValue()) - graph.getWeight(o1.getValue());\n            return result \u003d\u003d 0 \u0026\u0026 tieBreaker !\u003d null ? tieBreaker.compare(o1.getValue(), o2.getValue()) : result;\n        }\n    });\n    int count \u003d 0;\n    do {\n        Color color \u003d new Color(count);\n        SubGraph\u003cN, E\u003e subgraph \u003d graph.newSubGraph();\n        for (Iterator\u003cGraphNode\u003cN, E\u003e\u003e i \u003d worklist.iterator(); i.hasNext(); ) {\n            GraphNode\u003cN, E\u003e node \u003d i.next();\n            if (subgraph.isIndependentOf(node.getValue())) {\n                subgraph.addNode(node.getValue());\n                node.setAnnotation(color);\n                i.remove();\n            }\n        }\n        count++;\n    } while (!worklist.isEmpty());\n    @SuppressWarnings(\"unchecked\") N[] map \u003d (N[]) new Object[count];\n    colorToNodeMap \u003d map;\n    return count;\n}",
      "path": "src/com/google/javascript/jscomp/graph/GraphColoring.java",
      "functionStartLine": 132,
      "functionName": "color",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,31 +1,30 @@\n @Override\n public int color() {\n     graph.clearNodeAnnotations();\n-    List\u003cGraphNode\u003cN, E\u003e\u003e worklist \u003d graph.getNodes();\n+    List\u003cGraphNode\u003cN, E\u003e\u003e worklist \u003d Lists.newArrayList(graph.getNodes());\n     Collections.sort(worklist, new Comparator\u003cGraphNode\u003cN, E\u003e\u003e() {\n \n         @Override\n         public int compare(GraphNode\u003cN, E\u003e o1, GraphNode\u003cN, E\u003e o2) {\n             int result \u003d graph.getWeight(o2.getValue()) - graph.getWeight(o1.getValue());\n             return result \u003d\u003d 0 \u0026\u0026 tieBreaker !\u003d null ? tieBreaker.compare(o1.getValue(), o2.getValue()) : result;\n         }\n     });\n-    worklist \u003d Lists.newLinkedList(worklist);\n     int count \u003d 0;\n     do {\n         Color color \u003d new Color(count);\n         SubGraph\u003cN, E\u003e subgraph \u003d graph.newSubGraph();\n         for (Iterator\u003cGraphNode\u003cN, E\u003e\u003e i \u003d worklist.iterator(); i.hasNext(); ) {\n             GraphNode\u003cN, E\u003e node \u003d i.next();\n             if (subgraph.isIndependentOf(node.getValue())) {\n                 subgraph.addNode(node.getValue());\n                 node.setAnnotation(color);\n                 i.remove();\n             }\n         }\n         count++;\n     } while (!worklist.isEmpty());\n     @SuppressWarnings(\"unchecked\") N[] map \u003d (N[]) new Object[count];\n     colorToNodeMap \u003d map;\n     return count;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,31 @@\n+@Override\n+public int color() {\n+    graph.clearNodeAnnotations();\n+    List\u003cGraphNode\u003cN, E\u003e\u003e worklist \u003d graph.getNodes();\n+    Collections.sort(worklist, new Comparator\u003cGraphNode\u003cN, E\u003e\u003e() {\n+\n+        @Override\n+        public int compare(GraphNode\u003cN, E\u003e o1, GraphNode\u003cN, E\u003e o2) {\n+            int result \u003d graph.getWeight(o2.getValue()) - graph.getWeight(o1.getValue());\n+            return result \u003d\u003d 0 \u0026\u0026 tieBreaker !\u003d null ? tieBreaker.compare(o1.getValue(), o2.getValue()) : result;\n+        }\n+    });\n+    worklist \u003d Lists.newLinkedList(worklist);\n+    int count \u003d 0;\n+    do {\n+        Color color \u003d new Color(count);\n+        SubGraph\u003cN, E\u003e subgraph \u003d graph.newSubGraph();\n+        for (Iterator\u003cGraphNode\u003cN, E\u003e\u003e i \u003d worklist.iterator(); i.hasNext(); ) {\n+            GraphNode\u003cN, E\u003e node \u003d i.next();\n+            if (subgraph.isIndependentOf(node.getValue())) {\n+                subgraph.addNode(node.getValue());\n+                node.setAnnotation(color);\n+                i.remove();\n+            }\n+        }\n+        count++;\n+    } while (!worklist.isEmpty());\n+    @SuppressWarnings(\"unchecked\") N[] map \u003d (N[]) new Object[count];\n+    colorToNodeMap \u003d map;\n+    return count;\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic int color() {\n    graph.clearNodeAnnotations();\n    List\u003cGraphNode\u003cN, E\u003e\u003e worklist \u003d graph.getNodes();\n    Collections.sort(worklist, new Comparator\u003cGraphNode\u003cN, E\u003e\u003e() {\n\n        @Override\n        public int compare(GraphNode\u003cN, E\u003e o1, GraphNode\u003cN, E\u003e o2) {\n            int result \u003d graph.getWeight(o2.getValue()) - graph.getWeight(o1.getValue());\n            return result \u003d\u003d 0 \u0026\u0026 tieBreaker !\u003d null ? tieBreaker.compare(o1.getValue(), o2.getValue()) : result;\n        }\n    });\n    worklist \u003d Lists.newLinkedList(worklist);\n    int count \u003d 0;\n    do {\n        Color color \u003d new Color(count);\n        SubGraph\u003cN, E\u003e subgraph \u003d graph.newSubGraph();\n        for (Iterator\u003cGraphNode\u003cN, E\u003e\u003e i \u003d worklist.iterator(); i.hasNext(); ) {\n            GraphNode\u003cN, E\u003e node \u003d i.next();\n            if (subgraph.isIndependentOf(node.getValue())) {\n                subgraph.addNode(node.getValue());\n                node.setAnnotation(color);\n                i.remove();\n            }\n        }\n        count++;\n    } while (!worklist.isEmpty());\n    @SuppressWarnings(\"unchecked\") N[] map \u003d (N[]) new Object[count];\n    colorToNodeMap \u003d map;\n    return count;\n}",
      "path": "src/com/google/javascript/jscomp/graph/GraphColoring.java",
      "functionStartLine": 132,
      "functionName": "color",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}