{
  "origin": "codeshovel",
  "repositoryName": "Closure-59b",
  "repositoryPath": "/tmp/Closure-59b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "InferJSDocInfo.java",
  "functionName": "visit",
  "functionId": "visit___t-NodeTraversal__n-Node__parent-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/InferJSDocInfo.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 92,
  "functionEndLine": 188,
  "numCommitsSeen": 11,
  "timeTaken": 478,
  "changeHistory": [
    "03ce555bcedcf98d99de1b4f8a6238ba75ee6850",
    "845f5ff65858fd0d1829f3d2f16f758725e8028f",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "03ce555bcedcf98d99de1b4f8a6238ba75ee6850": "Ybodychange",
    "845f5ff65858fd0d1829f3d2f16f758725e8028f": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "03ce555bcedcf98d99de1b4f8a6238ba75ee6850": {
      "type": "Ybodychange",
      "commitMessage": "\nSimplify the type system a bit by pulling extern info off the nodes\n\nR\u003djohnlenz\nDELTA\u003d171  (4 added, 42 deleted, 125 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2500\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1242 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/1/11, 2:00 PM",
      "commitName": "03ce555bcedcf98d99de1b4f8a6238ba75ee6850",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "6/6/11, 8:05 AM",
      "commitNameOld": "8777edb959dfea307495e667c2c01834adabb906",
      "commitAuthorOld": "bashir@google.com",
      "daysBetweenCommits": 25.25,
      "commitsBetweenForRepo": 79,
      "commitsBetweenForFile": 1,
      "actualSource": "public void visit(NodeTraversal t, Node n, Node parent) {\n    JSDocInfo docInfo;\n    switch(n.getType()) {\n        case Token.NAME:\n            if (parent \u003d\u003d null) {\n                return;\n            }\n            if (parent.getType() !\u003d Token.VAR \u0026\u0026 !NodeUtil.isFunctionDeclaration(parent) \u0026\u0026 !(parent.getType() \u003d\u003d Token.ASSIGN \u0026\u0026 n \u003d\u003d parent.getFirstChild())) {\n                return;\n            }\n            docInfo \u003d n.getJSDocInfo();\n            if (docInfo \u003d\u003d null \u0026\u0026 !(parent.getType() \u003d\u003d Token.VAR \u0026\u0026 !parent.hasOneChild())) {\n                docInfo \u003d parent.getJSDocInfo();\n            }\n            JSType varType \u003d n.getJSType();\n            if (varType \u003d\u003d null \u0026\u0026 parent.getType() \u003d\u003d Token.FUNCTION) {\n                varType \u003d parent.getJSType();\n            }\n            if (varType \u003d\u003d null || docInfo \u003d\u003d null) {\n                return;\n            }\n            ObjectType objType \u003d dereferenceToObject(varType);\n            if (objType \u003d\u003d null || objType.getJSDocInfo() !\u003d null) {\n                return;\n            }\n            attachJSDocInfoToNominalTypeOrShape(objType, docInfo, n.getString());\n            break;\n        case Token.GETPROP:\n            if (NodeUtil.isExpressionNode(parent) || (parent.getType() \u003d\u003d Token.ASSIGN \u0026\u0026 parent.getFirstChild() \u003d\u003d n)) {\n                docInfo \u003d n.getJSDocInfo();\n                if (docInfo \u003d\u003d null) {\n                    docInfo \u003d parent.getJSDocInfo();\n                }\n                if (docInfo !\u003d null) {\n                    ObjectType lhsType \u003d dereferenceToObject(n.getFirstChild().getJSType());\n                    if (lhsType !\u003d null) {\n                        String propName \u003d n.getLastChild().getString();\n                        if (lhsType.hasOwnProperty(propName)) {\n                            lhsType.setPropertyJSDocInfo(propName, docInfo);\n                        }\n                        ObjectType propType \u003d dereferenceToObject(lhsType.getPropertyType(propName));\n                        if (propType !\u003d null) {\n                            attachJSDocInfoToNominalTypeOrShape(propType, docInfo, n.getQualifiedName());\n                        }\n                    }\n                }\n            }\n            break;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/InferJSDocInfo.java",
      "functionStartLine": 92,
      "functionName": "visit",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,50 +1,50 @@\n public void visit(NodeTraversal t, Node n, Node parent) {\n     JSDocInfo docInfo;\n     switch(n.getType()) {\n         case Token.NAME:\n             if (parent \u003d\u003d null) {\n                 return;\n             }\n             if (parent.getType() !\u003d Token.VAR \u0026\u0026 !NodeUtil.isFunctionDeclaration(parent) \u0026\u0026 !(parent.getType() \u003d\u003d Token.ASSIGN \u0026\u0026 n \u003d\u003d parent.getFirstChild())) {\n                 return;\n             }\n             docInfo \u003d n.getJSDocInfo();\n             if (docInfo \u003d\u003d null \u0026\u0026 !(parent.getType() \u003d\u003d Token.VAR \u0026\u0026 !parent.hasOneChild())) {\n                 docInfo \u003d parent.getJSDocInfo();\n             }\n             JSType varType \u003d n.getJSType();\n             if (varType \u003d\u003d null \u0026\u0026 parent.getType() \u003d\u003d Token.FUNCTION) {\n                 varType \u003d parent.getJSType();\n             }\n             if (varType \u003d\u003d null || docInfo \u003d\u003d null) {\n                 return;\n             }\n             ObjectType objType \u003d dereferenceToObject(varType);\n             if (objType \u003d\u003d null || objType.getJSDocInfo() !\u003d null) {\n                 return;\n             }\n             attachJSDocInfoToNominalTypeOrShape(objType, docInfo, n.getString());\n             break;\n         case Token.GETPROP:\n             if (NodeUtil.isExpressionNode(parent) || (parent.getType() \u003d\u003d Token.ASSIGN \u0026\u0026 parent.getFirstChild() \u003d\u003d n)) {\n                 docInfo \u003d n.getJSDocInfo();\n                 if (docInfo \u003d\u003d null) {\n                     docInfo \u003d parent.getJSDocInfo();\n                 }\n                 if (docInfo !\u003d null) {\n                     ObjectType lhsType \u003d dereferenceToObject(n.getFirstChild().getJSType());\n                     if (lhsType !\u003d null) {\n                         String propName \u003d n.getLastChild().getString();\n                         if (lhsType.hasOwnProperty(propName)) {\n-                            lhsType.setPropertyJSDocInfo(propName, docInfo, inExterns);\n+                            lhsType.setPropertyJSDocInfo(propName, docInfo);\n                         }\n                         ObjectType propType \u003d dereferenceToObject(lhsType.getPropertyType(propName));\n                         if (propType !\u003d null) {\n                             attachJSDocInfoToNominalTypeOrShape(propType, docInfo, n.getQualifiedName());\n                         }\n                     }\n                 }\n             }\n             break;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "845f5ff65858fd0d1829f3d2f16f758725e8028f": {
      "type": "Ybodychange",
      "commitMessage": "Add buttloads of tests.\n\nRewrite JSDoc inference to be more redundant, which should help it\nto be more robust.\n\nAssorted other fixes.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@20 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/7/09, 1:53 PM",
      "commitName": "845f5ff65858fd0d1829f3d2f16f758725e8028f",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/3/09, 3:51 PM",
      "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 33.92,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "actualSource": "public void visit(NodeTraversal t, Node n, Node parent) {\n    JSDocInfo docInfo;\n    switch(n.getType()) {\n        case Token.NAME:\n            if (parent \u003d\u003d null) {\n                return;\n            }\n            if (parent.getType() !\u003d Token.VAR \u0026\u0026 !NodeUtil.isFunctionDeclaration(parent) \u0026\u0026 !(parent.getType() \u003d\u003d Token.ASSIGN \u0026\u0026 n \u003d\u003d parent.getFirstChild())) {\n                return;\n            }\n            docInfo \u003d n.getJSDocInfo();\n            if (docInfo \u003d\u003d null \u0026\u0026 !(parent.getType() \u003d\u003d Token.VAR \u0026\u0026 !parent.hasOneChild())) {\n                docInfo \u003d parent.getJSDocInfo();\n            }\n            JSType varType \u003d n.getJSType();\n            if (varType \u003d\u003d null \u0026\u0026 parent.getType() \u003d\u003d Token.FUNCTION) {\n                varType \u003d parent.getJSType();\n            }\n            if (varType \u003d\u003d null || docInfo \u003d\u003d null) {\n                return;\n            }\n            ObjectType objType \u003d dereferenceToObject(varType);\n            if (objType \u003d\u003d null || objType.getJSDocInfo() !\u003d null) {\n                return;\n            }\n            attachJSDocInfoToNominalTypeOrShape(objType, docInfo, n.getString());\n            break;\n        case Token.GETPROP:\n            if (NodeUtil.isExpressionNode(parent) || (parent.getType() \u003d\u003d Token.ASSIGN \u0026\u0026 parent.getFirstChild() \u003d\u003d n)) {\n                docInfo \u003d n.getJSDocInfo();\n                if (docInfo \u003d\u003d null) {\n                    docInfo \u003d parent.getJSDocInfo();\n                }\n                if (docInfo !\u003d null) {\n                    ObjectType lhsType \u003d dereferenceToObject(n.getFirstChild().getJSType());\n                    if (lhsType !\u003d null) {\n                        String propName \u003d n.getLastChild().getString();\n                        if (lhsType.hasOwnProperty(propName)) {\n                            lhsType.setPropertyJSDocInfo(propName, docInfo, inExterns);\n                        }\n                        ObjectType propType \u003d dereferenceToObject(lhsType.getPropertyType(propName));\n                        if (propType !\u003d null) {\n                            attachJSDocInfoToNominalTypeOrShape(propType, docInfo, n.getQualifiedName());\n                        }\n                    }\n                }\n            }\n            break;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/InferJSDocInfo.java",
      "functionStartLine": 82,
      "functionName": "visit",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,43 +1,50 @@\n public void visit(NodeTraversal t, Node n, Node parent) {\n     JSDocInfo docInfo;\n     switch(n.getType()) {\n-        case Token.FUNCTION:\n-            JSType fnType \u003d n.getJSType();\n-            if (fnType \u003d\u003d null) {\n-                break;\n+        case Token.NAME:\n+            if (parent \u003d\u003d null) {\n+                return;\n+            }\n+            if (parent.getType() !\u003d Token.VAR \u0026\u0026 !NodeUtil.isFunctionDeclaration(parent) \u0026\u0026 !(parent.getType() \u003d\u003d Token.ASSIGN \u0026\u0026 n \u003d\u003d parent.getFirstChild())) {\n+                return;\n             }\n             docInfo \u003d n.getJSDocInfo();\n-            if (docInfo \u003d\u003d null \u0026\u0026 (parent.getType() \u003d\u003d Token.ASSIGN || parent.getType() \u003d\u003d Token.NAME)) {\n+            if (docInfo \u003d\u003d null \u0026\u0026 !(parent.getType() \u003d\u003d Token.VAR \u0026\u0026 !parent.hasOneChild())) {\n                 docInfo \u003d parent.getJSDocInfo();\n-                if (docInfo \u003d\u003d null) {\n-                    Node gramps \u003d parent.getParent();\n-                    if (gramps !\u003d null \u0026\u0026 gramps.getType() \u003d\u003d Token.VAR \u0026\u0026 gramps.hasOneChild()) {\n-                        docInfo \u003d gramps.getJSDocInfo();\n-                    }\n-                }\n             }\n-            if (docInfo !\u003d null \u0026\u0026 fnType instanceof FunctionType) {\n-                FunctionType maybeCtorType \u003d (FunctionType) fnType;\n-                maybeCtorType.setJSDocInfo(docInfo);\n-                if (maybeCtorType.isConstructor()) {\n-                    maybeCtorType.getInstanceType().setJSDocInfo(docInfo);\n-                }\n+            JSType varType \u003d n.getJSType();\n+            if (varType \u003d\u003d null \u0026\u0026 parent.getType() \u003d\u003d Token.FUNCTION) {\n+                varType \u003d parent.getJSType();\n             }\n+            if (varType \u003d\u003d null || docInfo \u003d\u003d null) {\n+                return;\n+            }\n+            ObjectType objType \u003d dereferenceToObject(varType);\n+            if (objType \u003d\u003d null || objType.getJSDocInfo() !\u003d null) {\n+                return;\n+            }\n+            attachJSDocInfoToNominalTypeOrShape(objType, docInfo, n.getString());\n             break;\n         case Token.GETPROP:\n             if (NodeUtil.isExpressionNode(parent) || (parent.getType() \u003d\u003d Token.ASSIGN \u0026\u0026 parent.getFirstChild() \u003d\u003d n)) {\n                 docInfo \u003d n.getJSDocInfo();\n                 if (docInfo \u003d\u003d null) {\n                     docInfo \u003d parent.getJSDocInfo();\n                 }\n                 if (docInfo !\u003d null) {\n-                    JSType lhsType \u003d n.getFirstChild().getJSType();\n-                    if (lhsType !\u003d null \u0026\u0026 lhsType instanceof ObjectType) {\n-                        ObjectType objectType \u003d (ObjectType) lhsType;\n-                        objectType.setPropertyJSDocInfo(n.getLastChild().getString(), docInfo, inExterns);\n+                    ObjectType lhsType \u003d dereferenceToObject(n.getFirstChild().getJSType());\n+                    if (lhsType !\u003d null) {\n+                        String propName \u003d n.getLastChild().getString();\n+                        if (lhsType.hasOwnProperty(propName)) {\n+                            lhsType.setPropertyJSDocInfo(propName, docInfo, inExterns);\n+                        }\n+                        ObjectType propType \u003d dereferenceToObject(lhsType.getPropertyType(propName));\n+                        if (propType !\u003d null) {\n+                            attachJSDocInfoToNominalTypeOrShape(propType, docInfo, n.getQualifiedName());\n+                        }\n                     }\n                 }\n             }\n             break;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,43 @@\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    JSDocInfo docInfo;\n+    switch(n.getType()) {\n+        case Token.FUNCTION:\n+            JSType fnType \u003d n.getJSType();\n+            if (fnType \u003d\u003d null) {\n+                break;\n+            }\n+            docInfo \u003d n.getJSDocInfo();\n+            if (docInfo \u003d\u003d null \u0026\u0026 (parent.getType() \u003d\u003d Token.ASSIGN || parent.getType() \u003d\u003d Token.NAME)) {\n+                docInfo \u003d parent.getJSDocInfo();\n+                if (docInfo \u003d\u003d null) {\n+                    Node gramps \u003d parent.getParent();\n+                    if (gramps !\u003d null \u0026\u0026 gramps.getType() \u003d\u003d Token.VAR \u0026\u0026 gramps.hasOneChild()) {\n+                        docInfo \u003d gramps.getJSDocInfo();\n+                    }\n+                }\n+            }\n+            if (docInfo !\u003d null \u0026\u0026 fnType instanceof FunctionType) {\n+                FunctionType maybeCtorType \u003d (FunctionType) fnType;\n+                maybeCtorType.setJSDocInfo(docInfo);\n+                if (maybeCtorType.isConstructor()) {\n+                    maybeCtorType.getInstanceType().setJSDocInfo(docInfo);\n+                }\n+            }\n+            break;\n+        case Token.GETPROP:\n+            if (NodeUtil.isExpressionNode(parent) || (parent.getType() \u003d\u003d Token.ASSIGN \u0026\u0026 parent.getFirstChild() \u003d\u003d n)) {\n+                docInfo \u003d n.getJSDocInfo();\n+                if (docInfo \u003d\u003d null) {\n+                    docInfo \u003d parent.getJSDocInfo();\n+                }\n+                if (docInfo !\u003d null) {\n+                    JSType lhsType \u003d n.getFirstChild().getJSType();\n+                    if (lhsType !\u003d null \u0026\u0026 lhsType instanceof ObjectType) {\n+                        ObjectType objectType \u003d (ObjectType) lhsType;\n+                        objectType.setPropertyJSDocInfo(n.getLastChild().getString(), docInfo, inExterns);\n+                    }\n+                }\n+            }\n+            break;\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "public void visit(NodeTraversal t, Node n, Node parent) {\n    JSDocInfo docInfo;\n    switch(n.getType()) {\n        case Token.FUNCTION:\n            JSType fnType \u003d n.getJSType();\n            if (fnType \u003d\u003d null) {\n                break;\n            }\n            docInfo \u003d n.getJSDocInfo();\n            if (docInfo \u003d\u003d null \u0026\u0026 (parent.getType() \u003d\u003d Token.ASSIGN || parent.getType() \u003d\u003d Token.NAME)) {\n                docInfo \u003d parent.getJSDocInfo();\n                if (docInfo \u003d\u003d null) {\n                    Node gramps \u003d parent.getParent();\n                    if (gramps !\u003d null \u0026\u0026 gramps.getType() \u003d\u003d Token.VAR \u0026\u0026 gramps.hasOneChild()) {\n                        docInfo \u003d gramps.getJSDocInfo();\n                    }\n                }\n            }\n            if (docInfo !\u003d null \u0026\u0026 fnType instanceof FunctionType) {\n                FunctionType maybeCtorType \u003d (FunctionType) fnType;\n                maybeCtorType.setJSDocInfo(docInfo);\n                if (maybeCtorType.isConstructor()) {\n                    maybeCtorType.getInstanceType().setJSDocInfo(docInfo);\n                }\n            }\n            break;\n        case Token.GETPROP:\n            if (NodeUtil.isExpressionNode(parent) || (parent.getType() \u003d\u003d Token.ASSIGN \u0026\u0026 parent.getFirstChild() \u003d\u003d n)) {\n                docInfo \u003d n.getJSDocInfo();\n                if (docInfo \u003d\u003d null) {\n                    docInfo \u003d parent.getJSDocInfo();\n                }\n                if (docInfo !\u003d null) {\n                    JSType lhsType \u003d n.getFirstChild().getJSType();\n                    if (lhsType !\u003d null \u0026\u0026 lhsType instanceof ObjectType) {\n                        ObjectType objectType \u003d (ObjectType) lhsType;\n                        objectType.setPropertyJSDocInfo(n.getLastChild().getString(), docInfo, inExterns);\n                    }\n                }\n            }\n            break;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/InferJSDocInfo.java",
      "functionStartLine": 53,
      "functionName": "visit",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}