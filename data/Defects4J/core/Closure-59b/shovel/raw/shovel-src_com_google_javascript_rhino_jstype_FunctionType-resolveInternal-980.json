{
  "origin": "codeshovel",
  "repositoryName": "Closure-59b",
  "repositoryPath": "/tmp/Closure-59b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FunctionType.java",
  "functionName": "resolveInternal",
  "functionId": "resolveInternal___t-ErrorReporter__scope-StaticScope__JSType__",
  "sourceFilePath": "src/com/google/javascript/rhino/jstype/FunctionType.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 980,
  "functionEndLine": 1024,
  "numCommitsSeen": 43,
  "timeTaken": 3311,
  "changeHistory": [
    "c5e143f7df0c3d73f6634488cac8ad8e7054fe05",
    "de491e70b971caca03f07531c2caf97b878cd1ff",
    "5da32cba7b68d69acfc535f57f21d652475d256f",
    "bca9abb0e3062d373fe52c0e8340337588c05708"
  ],
  "changeHistoryShort": {
    "c5e143f7df0c3d73f6634488cac8ad8e7054fe05": "Ybodychange",
    "de491e70b971caca03f07531c2caf97b878cd1ff": "Ybodychange",
    "5da32cba7b68d69acfc535f57f21d652475d256f": "Ybodychange",
    "bca9abb0e3062d373fe52c0e8340337588c05708": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c5e143f7df0c3d73f6634488cac8ad8e7054fe05": {
      "type": "Ybodychange",
      "commitMessage": "\nCoerce null and undefined out of the @this type when\nwe resolve lazily. We already do this when we resolve\n@this blocks immediately. There\u0027s some question about whether\nwe should be coercing to the global object instead,\nbut i\u0027m going to just punt on this for now.\nFixes issue 274\n\nR\u003djohnlenz\nDELTA\u003d36  (33 added, 0 deleted, 3 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1035097\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@529 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/1/10, 9:00 AM",
      "commitName": "c5e143f7df0c3d73f6634488cac8ad8e7054fe05",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "10/27/10, 7:03 PM",
      "commitNameOld": "de491e70b971caca03f07531c2caf97b878cd1ff",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 4.58,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nJSType resolveInternal(ErrorReporter t, StaticScope\u003cJSType\u003e scope) {\n    setResolvedTypeInternal(this);\n    call \u003d (ArrowType) safeResolve(call, t, scope);\n    prototype \u003d (FunctionPrototypeType) safeResolve(prototype, t, scope);\n    JSType maybeTypeOfThis \u003d safeResolve(typeOfThis, t, scope);\n    if (maybeTypeOfThis !\u003d null) {\n        maybeTypeOfThis \u003d maybeTypeOfThis.restrictByNotNullOrUndefined();\n    }\n    if (maybeTypeOfThis instanceof ObjectType) {\n        typeOfThis \u003d (ObjectType) maybeTypeOfThis;\n    }\n    boolean changed \u003d false;\n    ImmutableList.Builder\u003cObjectType\u003e resolvedInterfaces \u003d ImmutableList.builder();\n    for (ObjectType iface : implementedInterfaces) {\n        ObjectType resolvedIface \u003d (ObjectType) iface.resolve(t, scope);\n        resolvedInterfaces.add(resolvedIface);\n        changed |\u003d (resolvedIface !\u003d iface);\n    }\n    if (changed) {\n        implementedInterfaces \u003d resolvedInterfaces.build();\n    }\n    if (subTypes !\u003d null) {\n        for (int i \u003d 0; i \u003c subTypes.size(); i++) {\n            subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n        }\n    }\n    return super.resolveInternal(t, scope);\n}",
      "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
      "functionStartLine": 862,
      "functionName": "resolveInternal",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,26 +1,29 @@\n @Override\n JSType resolveInternal(ErrorReporter t, StaticScope\u003cJSType\u003e scope) {\n     setResolvedTypeInternal(this);\n     call \u003d (ArrowType) safeResolve(call, t, scope);\n     prototype \u003d (FunctionPrototypeType) safeResolve(prototype, t, scope);\n     JSType maybeTypeOfThis \u003d safeResolve(typeOfThis, t, scope);\n+    if (maybeTypeOfThis !\u003d null) {\n+        maybeTypeOfThis \u003d maybeTypeOfThis.restrictByNotNullOrUndefined();\n+    }\n     if (maybeTypeOfThis instanceof ObjectType) {\n         typeOfThis \u003d (ObjectType) maybeTypeOfThis;\n     }\n     boolean changed \u003d false;\n     ImmutableList.Builder\u003cObjectType\u003e resolvedInterfaces \u003d ImmutableList.builder();\n     for (ObjectType iface : implementedInterfaces) {\n         ObjectType resolvedIface \u003d (ObjectType) iface.resolve(t, scope);\n         resolvedInterfaces.add(resolvedIface);\n         changed |\u003d (resolvedIface !\u003d iface);\n     }\n     if (changed) {\n         implementedInterfaces \u003d resolvedInterfaces.build();\n     }\n     if (subTypes !\u003d null) {\n         for (int i \u003d 0; i \u003c subTypes.size(); i++) {\n             subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n         }\n     }\n     return super.resolveInternal(t, scope);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "de491e70b971caca03f07531c2caf97b878cd1ff": {
      "type": "Ybodychange",
      "commitMessage": "\nvalidation for @this annotation. looks about the same\nas the @extends validation.\nFixes issue 268\n\nR\u003djohnlenz\nDELTA\u003d63  (55 added, 6 deleted, 2 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d804007\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@519 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/27/10, 7:03 PM",
      "commitName": "de491e70b971caca03f07531c2caf97b878cd1ff",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "10/25/10, 12:45 PM",
      "commitNameOld": "baa06eb5d4fa96fc674484130f093e83dacf7bef",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 2.26,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nJSType resolveInternal(ErrorReporter t, StaticScope\u003cJSType\u003e scope) {\n    setResolvedTypeInternal(this);\n    call \u003d (ArrowType) safeResolve(call, t, scope);\n    prototype \u003d (FunctionPrototypeType) safeResolve(prototype, t, scope);\n    JSType maybeTypeOfThis \u003d safeResolve(typeOfThis, t, scope);\n    if (maybeTypeOfThis instanceof ObjectType) {\n        typeOfThis \u003d (ObjectType) maybeTypeOfThis;\n    }\n    boolean changed \u003d false;\n    ImmutableList.Builder\u003cObjectType\u003e resolvedInterfaces \u003d ImmutableList.builder();\n    for (ObjectType iface : implementedInterfaces) {\n        ObjectType resolvedIface \u003d (ObjectType) iface.resolve(t, scope);\n        resolvedInterfaces.add(resolvedIface);\n        changed |\u003d (resolvedIface !\u003d iface);\n    }\n    if (changed) {\n        implementedInterfaces \u003d resolvedInterfaces.build();\n    }\n    if (subTypes !\u003d null) {\n        for (int i \u003d 0; i \u003c subTypes.size(); i++) {\n            subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n        }\n    }\n    return super.resolveInternal(t, scope);\n}",
      "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
      "functionStartLine": 862,
      "functionName": "resolveInternal",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,23 +1,26 @@\n @Override\n JSType resolveInternal(ErrorReporter t, StaticScope\u003cJSType\u003e scope) {\n     setResolvedTypeInternal(this);\n     call \u003d (ArrowType) safeResolve(call, t, scope);\n     prototype \u003d (FunctionPrototypeType) safeResolve(prototype, t, scope);\n-    typeOfThis \u003d (ObjectType) safeResolve(typeOfThis, t, scope);\n+    JSType maybeTypeOfThis \u003d safeResolve(typeOfThis, t, scope);\n+    if (maybeTypeOfThis instanceof ObjectType) {\n+        typeOfThis \u003d (ObjectType) maybeTypeOfThis;\n+    }\n     boolean changed \u003d false;\n     ImmutableList.Builder\u003cObjectType\u003e resolvedInterfaces \u003d ImmutableList.builder();\n     for (ObjectType iface : implementedInterfaces) {\n         ObjectType resolvedIface \u003d (ObjectType) iface.resolve(t, scope);\n         resolvedInterfaces.add(resolvedIface);\n         changed |\u003d (resolvedIface !\u003d iface);\n     }\n     if (changed) {\n         implementedInterfaces \u003d resolvedInterfaces.build();\n     }\n     if (subTypes !\u003d null) {\n         for (int i \u003d 0; i \u003c subTypes.size(); i++) {\n             subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n         }\n     }\n     return super.resolveInternal(t, scope);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5da32cba7b68d69acfc535f57f21d652475d256f": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/04/19 by anatol\n\n        Replace {@inheritDoc} javadoc annotation with @Override.\n        @Override is better as it implies documentation inheritance plus checks\n        that the parent method exists at the compile-time.\n\n        R\u003dnick\n        DELTA\u003d137  (0 added, 70 deleted, 67 changed)\n\nChange on 2010/04/19 by nick\n\n        Change how we resolve types.\n        Instead of leaving shell proxy types around, unbox the proxy types.\n\n        R\u003dandrew,john\n        DELTA\u003d103  (84 added, 5 deleted, 14 changed)\n\nChange on 2010/04/19 by acleung\n\n        Enable Flow Sensitive Inlining by default.\n\n        R\u003djohn\n        DELTA\u003d1  (0 added, 0 deleted, 1 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dpqvliw\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@191 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/19/10, 4:28 PM",
      "commitName": "5da32cba7b68d69acfc535f57f21d652475d256f",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/15/10, 4:45 PM",
      "commitNameOld": "e3bcc1c6e7ce7e9bfc3098cd5bf57774049f5baa",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 3.99,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nJSType resolveInternal(ErrorReporter t, StaticScope\u003cJSType\u003e scope) {\n    setResolvedTypeInternal(this);\n    call \u003d (ArrowType) safeResolve(call, t, scope);\n    prototype \u003d (FunctionPrototypeType) safeResolve(prototype, t, scope);\n    typeOfThis \u003d (ObjectType) safeResolve(typeOfThis, t, scope);\n    boolean changed \u003d false;\n    ImmutableList.Builder\u003cObjectType\u003e resolvedInterfaces \u003d ImmutableList.builder();\n    for (ObjectType iface : implementedInterfaces) {\n        ObjectType resolvedIface \u003d (ObjectType) iface.resolve(t, scope);\n        resolvedInterfaces.add(resolvedIface);\n        changed |\u003d (resolvedIface !\u003d iface);\n    }\n    if (changed) {\n        implementedInterfaces \u003d resolvedInterfaces.build();\n    }\n    if (subTypes !\u003d null) {\n        for (int i \u003d 0; i \u003c subTypes.size(); i++) {\n            subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n        }\n    }\n    return super.resolveInternal(t, scope);\n}",
      "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
      "functionStartLine": 782,
      "functionName": "resolveInternal",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,22 +1,23 @@\n @Override\n JSType resolveInternal(ErrorReporter t, StaticScope\u003cJSType\u003e scope) {\n+    setResolvedTypeInternal(this);\n     call \u003d (ArrowType) safeResolve(call, t, scope);\n     prototype \u003d (FunctionPrototypeType) safeResolve(prototype, t, scope);\n     typeOfThis \u003d (ObjectType) safeResolve(typeOfThis, t, scope);\n     boolean changed \u003d false;\n     ImmutableList.Builder\u003cObjectType\u003e resolvedInterfaces \u003d ImmutableList.builder();\n     for (ObjectType iface : implementedInterfaces) {\n         ObjectType resolvedIface \u003d (ObjectType) iface.resolve(t, scope);\n         resolvedInterfaces.add(resolvedIface);\n         changed |\u003d (resolvedIface !\u003d iface);\n     }\n     if (changed) {\n         implementedInterfaces \u003d resolvedInterfaces.build();\n     }\n     if (subTypes !\u003d null) {\n         for (int i \u003d 0; i \u003c subTypes.size(); i++) {\n             subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n         }\n     }\n     return super.resolveInternal(t, scope);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bca9abb0e3062d373fe52c0e8340337588c05708": {
      "type": "Yintroduced",
      "commitMessage": "Make sure that InlineVariables can inline variables that are never defined.\n\nCreate a function-inlining blacklist.\n\nSome minor type inference fixes.\n\nStart re-architecting type resolution to happen differently.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@77 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/26/10, 1:59 PM",
      "commitName": "bca9abb0e3062d373fe52c0e8340337588c05708",
      "commitAuthor": "Nicholas.J.Santos",
      "diff": "@@ -0,0 +1,22 @@\n+@Override\n+JSType resolveInternal(ErrorReporter t, StaticScope\u003cJSType\u003e scope) {\n+    call \u003d (ArrowType) safeResolve(call, t, scope);\n+    prototype \u003d (FunctionPrototypeType) safeResolve(prototype, t, scope);\n+    typeOfThis \u003d (ObjectType) safeResolve(typeOfThis, t, scope);\n+    boolean changed \u003d false;\n+    ImmutableList.Builder\u003cObjectType\u003e resolvedInterfaces \u003d ImmutableList.builder();\n+    for (ObjectType iface : implementedInterfaces) {\n+        ObjectType resolvedIface \u003d (ObjectType) iface.resolve(t, scope);\n+        resolvedInterfaces.add(resolvedIface);\n+        changed |\u003d (resolvedIface !\u003d iface);\n+    }\n+    if (changed) {\n+        implementedInterfaces \u003d resolvedInterfaces.build();\n+    }\n+    if (subTypes !\u003d null) {\n+        for (int i \u003d 0; i \u003c subTypes.size(); i++) {\n+            subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n+        }\n+    }\n+    return super.resolveInternal(t, scope);\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\nJSType resolveInternal(ErrorReporter t, StaticScope\u003cJSType\u003e scope) {\n    call \u003d (ArrowType) safeResolve(call, t, scope);\n    prototype \u003d (FunctionPrototypeType) safeResolve(prototype, t, scope);\n    typeOfThis \u003d (ObjectType) safeResolve(typeOfThis, t, scope);\n    boolean changed \u003d false;\n    ImmutableList.Builder\u003cObjectType\u003e resolvedInterfaces \u003d ImmutableList.builder();\n    for (ObjectType iface : implementedInterfaces) {\n        ObjectType resolvedIface \u003d (ObjectType) iface.resolve(t, scope);\n        resolvedInterfaces.add(resolvedIface);\n        changed |\u003d (resolvedIface !\u003d iface);\n    }\n    if (changed) {\n        implementedInterfaces \u003d resolvedInterfaces.build();\n    }\n    if (subTypes !\u003d null) {\n        for (int i \u003d 0; i \u003c subTypes.size(); i++) {\n            subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n        }\n    }\n    return super.resolveInternal(t, scope);\n}",
      "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
      "functionStartLine": 822,
      "functionName": "resolveInternal",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}