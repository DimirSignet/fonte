{
  "origin": "codeshovel",
  "repositoryName": "Closure-59b",
  "repositoryPath": "/tmp/Closure-59b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PhaseOptimizer.java",
  "functionName": "process",
  "functionId": "$process___externs-Node__root-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 245,
  "functionEndLine": 250,
  "numCommitsSeen": 10,
  "timeTaken": 408,
  "changeHistory": [
    "77b7c78d4aeeb6471f2f668a06c0f61a68f95ccd",
    "915752b8e4ffd312eea298fb749dddd0edc0db2e",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "77b7c78d4aeeb6471f2f668a06c0f61a68f95ccd": "Ybodychange",
    "915752b8e4ffd312eea298fb749dddd0edc0db2e": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "77b7c78d4aeeb6471f2f668a06c0f61a68f95ccd": {
      "type": "Ybodychange",
      "commitMessage": "Add more unit tests for type checking.\n\nAdd phase optimization.\n\nFix a type inference bug.\n\nString.prototype.split may not return null.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@55 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/4/10, 12:18 PM",
      "commitName": "77b7c78d4aeeb6471f2f668a06c0f61a68f95ccd",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "12/23/09, 9:33 AM",
      "commitNameOld": "915752b8e4ffd312eea298fb749dddd0edc0db2e",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 12.11,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public void process(Node externs, Node root) {\n    Preconditions.checkState(!loopMutex, \"Nested loops are forbidden\");\n    loopMutex \u003d true;\n    if (randomizeLoops) {\n        randomizePasses();\n    } else {\n        optimizePasses();\n    }\n    try {\n        int count \u003d 0;\n        out: do {\n            if (count++ \u003e MAX_LOOPS) {\n                compiler.throwInternalError(OPTIMIZE_LOOP_ERROR, null);\n            }\n            recentChange.reset();\n            for (CompilerPass pass : myPasses) {\n                pass.process(externs, root);\n                if (hasHaltingErrors()) {\n                    break out;\n                }\n            }\n        } while (recentChange.hasCodeChanged() \u0026\u0026 !hasHaltingErrors());\n        if (randomizeLoops) {\n            loopsRun.add(getPassOrder());\n        }\n    } finally {\n        loopMutex \u003d false;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
      "functionStartLine": 313,
      "functionName": "process",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,32 +1,29 @@\n public void process(Node externs, Node root) {\n     Preconditions.checkState(!loopMutex, \"Nested loops are forbidden\");\n     loopMutex \u003d true;\n     if (randomizeLoops) {\n-        List\u003cNamedPass\u003e mixedupPasses \u003d Lists.newArrayList();\n-        Random random \u003d new Random();\n-        while (myPasses.size() \u003e 0) {\n-            mixedupPasses.add(myPasses.remove(random.nextInt(myPasses.size())));\n-        }\n-        myPasses.addAll(mixedupPasses);\n+        randomizePasses();\n+    } else {\n+        optimizePasses();\n     }\n     try {\n         int count \u003d 0;\n         out: do {\n             if (count++ \u003e MAX_LOOPS) {\n                 compiler.throwInternalError(OPTIMIZE_LOOP_ERROR, null);\n             }\n             recentChange.reset();\n             for (CompilerPass pass : myPasses) {\n                 pass.process(externs, root);\n                 if (hasHaltingErrors()) {\n                     break out;\n                 }\n             }\n         } while (recentChange.hasCodeChanged() \u0026\u0026 !hasHaltingErrors());\n         if (randomizeLoops) {\n             loopsRun.add(getPassOrder());\n         }\n     } finally {\n         loopMutex \u003d false;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "915752b8e4ffd312eea298fb749dddd0edc0db2e": {
      "type": "Ybodychange",
      "commitMessage": "Add boatloads of tests.\n\nAdd support for --jscomp_warning\u003dcheckTypes\n\nAdd phase optimization improvements.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@49 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/23/09, 9:33 AM",
      "commitName": "915752b8e4ffd312eea298fb749dddd0edc0db2e",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "12/17/09, 4:20 PM",
      "commitNameOld": "14ddcfdc0b8d1cece3c79221b1870b84f055d419",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 5.72,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "public void process(Node externs, Node root) {\n    Preconditions.checkState(!loopMutex, \"Nested loops are forbidden\");\n    loopMutex \u003d true;\n    if (randomizeLoops) {\n        List\u003cNamedPass\u003e mixedupPasses \u003d Lists.newArrayList();\n        Random random \u003d new Random();\n        while (myPasses.size() \u003e 0) {\n            mixedupPasses.add(myPasses.remove(random.nextInt(myPasses.size())));\n        }\n        myPasses.addAll(mixedupPasses);\n    }\n    try {\n        int count \u003d 0;\n        out: do {\n            if (count++ \u003e MAX_LOOPS) {\n                compiler.throwInternalError(OPTIMIZE_LOOP_ERROR, null);\n            }\n            recentChange.reset();\n            for (CompilerPass pass : myPasses) {\n                pass.process(externs, root);\n                if (hasHaltingErrors()) {\n                    break out;\n                }\n            }\n        } while (recentChange.hasCodeChanged() \u0026\u0026 !hasHaltingErrors());\n        if (randomizeLoops) {\n            loopsRun.add(getPassOrder());\n        }\n    } finally {\n        loopMutex \u003d false;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
      "functionStartLine": 291,
      "functionName": "process",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,21 +1,32 @@\n public void process(Node externs, Node root) {\n     Preconditions.checkState(!loopMutex, \"Nested loops are forbidden\");\n     loopMutex \u003d true;\n+    if (randomizeLoops) {\n+        List\u003cNamedPass\u003e mixedupPasses \u003d Lists.newArrayList();\n+        Random random \u003d new Random();\n+        while (myPasses.size() \u003e 0) {\n+            mixedupPasses.add(myPasses.remove(random.nextInt(myPasses.size())));\n+        }\n+        myPasses.addAll(mixedupPasses);\n+    }\n     try {\n         int count \u003d 0;\n-        do {\n+        out: do {\n             if (count++ \u003e MAX_LOOPS) {\n                 compiler.throwInternalError(OPTIMIZE_LOOP_ERROR, null);\n             }\n             recentChange.reset();\n             for (CompilerPass pass : myPasses) {\n                 pass.process(externs, root);\n                 if (hasHaltingErrors()) {\n-                    return;\n+                    break out;\n                 }\n             }\n         } while (recentChange.hasCodeChanged() \u0026\u0026 !hasHaltingErrors());\n+        if (randomizeLoops) {\n+            loopsRun.add(getPassOrder());\n+        }\n     } finally {\n         loopMutex \u003d false;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,21 @@\n+public void process(Node externs, Node root) {\n+    Preconditions.checkState(!loopMutex, \"Nested loops are forbidden\");\n+    loopMutex \u003d true;\n+    try {\n+        int count \u003d 0;\n+        do {\n+            if (count++ \u003e MAX_LOOPS) {\n+                compiler.throwInternalError(OPTIMIZE_LOOP_ERROR, null);\n+            }\n+            recentChange.reset();\n+            for (CompilerPass pass : myPasses) {\n+                pass.process(externs, root);\n+                if (hasHaltingErrors()) {\n+                    return;\n+                }\n+            }\n+        } while (recentChange.hasCodeChanged() \u0026\u0026 !hasHaltingErrors());\n+    } finally {\n+        loopMutex \u003d false;\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "public void process(Node externs, Node root) {\n    Preconditions.checkState(!loopMutex, \"Nested loops are forbidden\");\n    loopMutex \u003d true;\n    try {\n        int count \u003d 0;\n        do {\n            if (count++ \u003e MAX_LOOPS) {\n                compiler.throwInternalError(OPTIMIZE_LOOP_ERROR, null);\n            }\n            recentChange.reset();\n            for (CompilerPass pass : myPasses) {\n                pass.process(externs, root);\n                if (hasHaltingErrors()) {\n                    return;\n                }\n            }\n        } while (recentChange.hasCodeChanged() \u0026\u0026 !hasHaltingErrors());\n    } finally {\n        loopMutex \u003d false;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
      "functionStartLine": 246,
      "functionName": "process",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}