{
  "origin": "codeshovel",
  "repositoryName": "Closure-59b",
  "repositoryPath": "/tmp/Closure-59b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "UnreachableCodeElimination.java",
  "functionName": "visit",
  "functionId": "visit___t-NodeTraversal__n-Node__parent-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 91,
  "functionEndLine": 110,
  "numCommitsSeen": 17,
  "timeTaken": 769,
  "changeHistory": [
    "c1971584101865a747d5d1e25ef0c0193135957f",
    "2581851be3b2202bd48d4c76889b020f4cecebf6",
    "0a39688562637465944df3c29ae0c1259cc0a4dc",
    "e33e925eea3a8e4de958864e531e1adc4da62e18",
    "d964d232de65db2370c06ce04de9865a3b2c8c9f",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "c1971584101865a747d5d1e25ef0c0193135957f": "Ybodychange",
    "2581851be3b2202bd48d4c76889b020f4cecebf6": "Ymultichange(Ybodychange,Yannotationchange)",
    "0a39688562637465944df3c29ae0c1259cc0a4dc": "Ymultichange(Ybodychange,Yannotationchange)",
    "e33e925eea3a8e4de958864e531e1adc4da62e18": "Ybodychange",
    "d964d232de65db2370c06ce04de9865a3b2c8c9f": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c1971584101865a747d5d1e25ef0c0193135957f": {
      "type": "Ybodychange",
      "commitMessage": "\nUpdate NodeUtil.removeChild to only safe handle try/catch/finally nodes. Update UnreachableCodeElminination to reflect the changes and removed\npeephole removal of unneeded TRY/FINALLY statements as that is now handled by\nthe PeepholeRemoveDeadCode pass.\n\nR\u003dnicksantos\nDELTA\u003d154  (88 added, 33 deleted, 33 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d219\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@670 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/6/11, 5:19 PM",
      "commitName": "c1971584101865a747d5d1e25ef0c0193135957f",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "12/3/10, 2:10 PM",
      "commitNameOld": "3c5a6f6a1b87c655c5eb3ed0ebcfce886ab6a614",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 34.13,
      "commitsBetweenForRepo": 75,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (parent \u003d\u003d null) {\n        return;\n    }\n    if (n.getType() \u003d\u003d Token.FUNCTION || n.getType() \u003d\u003d Token.SCRIPT) {\n        return;\n    }\n    DiGraphNode\u003cNode, Branch\u003e gNode \u003d curCfg.getDirectedGraphNode(n);\n    if (gNode \u003d\u003d null) {\n        return;\n    }\n    if (gNode.getAnnotation() !\u003d GraphReachability.REACHABLE || (removeNoOpStatements \u0026\u0026 !NodeUtil.mayHaveSideEffects(n))) {\n        removeDeadExprStatementSafely(n);\n        return;\n    }\n    tryRemoveUnconditionalBranching(n);\n}",
      "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
      "functionStartLine": 91,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,29 +1,18 @@\n @Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     if (parent \u003d\u003d null) {\n         return;\n     }\n     if (n.getType() \u003d\u003d Token.FUNCTION || n.getType() \u003d\u003d Token.SCRIPT) {\n         return;\n     }\n-    if (n.getType() \u003d\u003d Token.TRY) {\n-        Node body \u003d n.getFirstChild();\n-        Node catchOrFinallyBlock \u003d body.getNext();\n-        Node finallyBlock \u003d catchOrFinallyBlock.getNext();\n-        if (!catchOrFinallyBlock.hasChildren() \u0026\u0026 (finallyBlock \u003d\u003d null || !finallyBlock.hasChildren())) {\n-            n.removeChild(body);\n-            parent.replaceChild(n, body);\n-            compiler.reportCodeChange();\n-            n \u003d body;\n-        }\n-    }\n     DiGraphNode\u003cNode, Branch\u003e gNode \u003d curCfg.getDirectedGraphNode(n);\n     if (gNode \u003d\u003d null) {\n         return;\n     }\n     if (gNode.getAnnotation() !\u003d GraphReachability.REACHABLE || (removeNoOpStatements \u0026\u0026 !NodeUtil.mayHaveSideEffects(n))) {\n         removeDeadExprStatementSafely(n);\n         return;\n     }\n     tryRemoveUnconditionalBranching(n);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2581851be3b2202bd48d4c76889b020f4cecebf6": {
      "type": "Ymultichange(Ybodychange,Yannotationchange)",
      "commitMessage": "\nRemove more unconditional jumps.\n\nR\u003djohnlenz\nDELTA\u003d94  (74 added, 4 deleted, 16 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d85018\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@342 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/5/10, 6:06 PM",
      "commitName": "2581851be3b2202bd48d4c76889b020f4cecebf6",
      "commitAuthor": "acleung@google.com",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "\nRemove more unconditional jumps.\n\nR\u003djohnlenz\nDELTA\u003d94  (74 added, 4 deleted, 16 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d85018\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@342 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "8/5/10, 6:06 PM",
          "commitName": "2581851be3b2202bd48d4c76889b020f4cecebf6",
          "commitAuthor": "acleung@google.com",
          "commitDateOld": "8/4/10, 5:53 PM",
          "commitNameOld": "0a39688562637465944df3c29ae0c1259cc0a4dc",
          "commitAuthorOld": "acleung@google.com",
          "daysBetweenCommits": 1.01,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (parent \u003d\u003d null) {\n        return;\n    }\n    if (n.getType() \u003d\u003d Token.FUNCTION || n.getType() \u003d\u003d Token.SCRIPT) {\n        return;\n    }\n    if (n.getType() \u003d\u003d Token.TRY) {\n        Node body \u003d n.getFirstChild();\n        Node catchOrFinallyBlock \u003d body.getNext();\n        Node finallyBlock \u003d catchOrFinallyBlock.getNext();\n        if (!catchOrFinallyBlock.hasChildren() \u0026\u0026 (finallyBlock \u003d\u003d null || !finallyBlock.hasChildren())) {\n            n.removeChild(body);\n            parent.replaceChild(n, body);\n            compiler.reportCodeChange();\n            n \u003d body;\n        }\n    }\n    DiGraphNode\u003cNode, Branch\u003e gNode \u003d curCfg.getDirectedGraphNode(n);\n    if (gNode \u003d\u003d null) {\n        return;\n    }\n    if (gNode.getAnnotation() !\u003d GraphReachability.REACHABLE || (removeNoOpStatements \u0026\u0026 !NodeUtil.mayHaveSideEffects(n))) {\n        removeDeadExprStatementSafely(n);\n        return;\n    }\n    tryRemoveUnconditionalBranching(n);\n}",
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
          "functionStartLine": 92,
          "functionName": "visit",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,45 +1,29 @@\n-@SuppressWarnings(\"fallthrough\")\n @Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     if (parent \u003d\u003d null) {\n         return;\n     }\n     if (n.getType() \u003d\u003d Token.FUNCTION || n.getType() \u003d\u003d Token.SCRIPT) {\n         return;\n     }\n     if (n.getType() \u003d\u003d Token.TRY) {\n         Node body \u003d n.getFirstChild();\n         Node catchOrFinallyBlock \u003d body.getNext();\n         Node finallyBlock \u003d catchOrFinallyBlock.getNext();\n         if (!catchOrFinallyBlock.hasChildren() \u0026\u0026 (finallyBlock \u003d\u003d null || !finallyBlock.hasChildren())) {\n             n.removeChild(body);\n             parent.replaceChild(n, body);\n             compiler.reportCodeChange();\n             n \u003d body;\n         }\n     }\n     DiGraphNode\u003cNode, Branch\u003e gNode \u003d curCfg.getDirectedGraphNode(n);\n     if (gNode \u003d\u003d null) {\n         return;\n     }\n     if (gNode.getAnnotation() !\u003d GraphReachability.REACHABLE || (removeNoOpStatements \u0026\u0026 !NodeUtil.mayHaveSideEffects(n))) {\n-        removeDeadExprStatementSafely(n, parent);\n+        removeDeadExprStatementSafely(n);\n         return;\n     }\n-    switch(n.getType()) {\n-        case Token.RETURN:\n-            if (n.hasChildren()) {\n-                break;\n-            }\n-        case Token.BREAK:\n-        case Token.CONTINUE:\n-            List\u003cDiGraphEdge\u003cNode, Branch\u003e\u003e outEdges \u003d gNode.getOutEdges();\n-            if (outEdges.size() \u003d\u003d 1 \u0026\u0026 (n.getNext() \u003d\u003d null || n.getNext().getType() \u003d\u003d Token.FUNCTION)) {\n-                Preconditions.checkState(outEdges.get(0).getValue() \u003d\u003d Branch.UNCOND);\n-                Node fallThrough \u003d ControlFlowAnalysis.computeFollowNode(n);\n-                if (outEdges.get(0).getDestination().getValue() \u003d\u003d fallThrough) {\n-                    removeDeadExprStatementSafely(n, parent);\n-                }\n-            }\n-    }\n+    tryRemoveUnconditionalBranching(n);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yannotationchange",
          "commitMessage": "\nRemove more unconditional jumps.\n\nR\u003djohnlenz\nDELTA\u003d94  (74 added, 4 deleted, 16 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d85018\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@342 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "8/5/10, 6:06 PM",
          "commitName": "2581851be3b2202bd48d4c76889b020f4cecebf6",
          "commitAuthor": "acleung@google.com",
          "commitDateOld": "8/4/10, 5:53 PM",
          "commitNameOld": "0a39688562637465944df3c29ae0c1259cc0a4dc",
          "commitAuthorOld": "acleung@google.com",
          "daysBetweenCommits": 1.01,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (parent \u003d\u003d null) {\n        return;\n    }\n    if (n.getType() \u003d\u003d Token.FUNCTION || n.getType() \u003d\u003d Token.SCRIPT) {\n        return;\n    }\n    if (n.getType() \u003d\u003d Token.TRY) {\n        Node body \u003d n.getFirstChild();\n        Node catchOrFinallyBlock \u003d body.getNext();\n        Node finallyBlock \u003d catchOrFinallyBlock.getNext();\n        if (!catchOrFinallyBlock.hasChildren() \u0026\u0026 (finallyBlock \u003d\u003d null || !finallyBlock.hasChildren())) {\n            n.removeChild(body);\n            parent.replaceChild(n, body);\n            compiler.reportCodeChange();\n            n \u003d body;\n        }\n    }\n    DiGraphNode\u003cNode, Branch\u003e gNode \u003d curCfg.getDirectedGraphNode(n);\n    if (gNode \u003d\u003d null) {\n        return;\n    }\n    if (gNode.getAnnotation() !\u003d GraphReachability.REACHABLE || (removeNoOpStatements \u0026\u0026 !NodeUtil.mayHaveSideEffects(n))) {\n        removeDeadExprStatementSafely(n);\n        return;\n    }\n    tryRemoveUnconditionalBranching(n);\n}",
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
          "functionStartLine": 92,
          "functionName": "visit",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,45 +1,29 @@\n-@SuppressWarnings(\"fallthrough\")\n @Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     if (parent \u003d\u003d null) {\n         return;\n     }\n     if (n.getType() \u003d\u003d Token.FUNCTION || n.getType() \u003d\u003d Token.SCRIPT) {\n         return;\n     }\n     if (n.getType() \u003d\u003d Token.TRY) {\n         Node body \u003d n.getFirstChild();\n         Node catchOrFinallyBlock \u003d body.getNext();\n         Node finallyBlock \u003d catchOrFinallyBlock.getNext();\n         if (!catchOrFinallyBlock.hasChildren() \u0026\u0026 (finallyBlock \u003d\u003d null || !finallyBlock.hasChildren())) {\n             n.removeChild(body);\n             parent.replaceChild(n, body);\n             compiler.reportCodeChange();\n             n \u003d body;\n         }\n     }\n     DiGraphNode\u003cNode, Branch\u003e gNode \u003d curCfg.getDirectedGraphNode(n);\n     if (gNode \u003d\u003d null) {\n         return;\n     }\n     if (gNode.getAnnotation() !\u003d GraphReachability.REACHABLE || (removeNoOpStatements \u0026\u0026 !NodeUtil.mayHaveSideEffects(n))) {\n-        removeDeadExprStatementSafely(n, parent);\n+        removeDeadExprStatementSafely(n);\n         return;\n     }\n-    switch(n.getType()) {\n-        case Token.RETURN:\n-            if (n.hasChildren()) {\n-                break;\n-            }\n-        case Token.BREAK:\n-        case Token.CONTINUE:\n-            List\u003cDiGraphEdge\u003cNode, Branch\u003e\u003e outEdges \u003d gNode.getOutEdges();\n-            if (outEdges.size() \u003d\u003d 1 \u0026\u0026 (n.getNext() \u003d\u003d null || n.getNext().getType() \u003d\u003d Token.FUNCTION)) {\n-                Preconditions.checkState(outEdges.get(0).getValue() \u003d\u003d Branch.UNCOND);\n-                Node fallThrough \u003d ControlFlowAnalysis.computeFollowNode(n);\n-                if (outEdges.get(0).getDestination().getValue() \u003d\u003d fallThrough) {\n-                    removeDeadExprStatementSafely(n, parent);\n-                }\n-            }\n-    }\n+    tryRemoveUnconditionalBranching(n);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "@SuppressWarnings(\"fallthrough\"),@Override",
            "newValue": "@Override"
          }
        }
      ]
    },
    "0a39688562637465944df3c29ae0c1259cc0a4dc": {
      "type": "Ymultichange(Ybodychange,Yannotationchange)",
      "commitMessage": "\nRemoves useless unconditional jumps\n\nR\u003djohnlenz\nDELTA\u003d179  (96 added, 33 deleted, 50 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d88010\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@337 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/4/10, 5:53 PM",
      "commitName": "0a39688562637465944df3c29ae0c1259cc0a4dc",
      "commitAuthor": "acleung@google.com",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "\nRemoves useless unconditional jumps\n\nR\u003djohnlenz\nDELTA\u003d179  (96 added, 33 deleted, 50 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d88010\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@337 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "8/4/10, 5:53 PM",
          "commitName": "0a39688562637465944df3c29ae0c1259cc0a4dc",
          "commitAuthor": "acleung@google.com",
          "commitDateOld": "8/4/10, 12:51 PM",
          "commitNameOld": "1369e98d3d3b130b4677959b570b00ecbcb85cc3",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 0.21,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"fallthrough\")\n@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (parent \u003d\u003d null) {\n        return;\n    }\n    if (n.getType() \u003d\u003d Token.FUNCTION || n.getType() \u003d\u003d Token.SCRIPT) {\n        return;\n    }\n    if (n.getType() \u003d\u003d Token.TRY) {\n        Node body \u003d n.getFirstChild();\n        Node catchOrFinallyBlock \u003d body.getNext();\n        Node finallyBlock \u003d catchOrFinallyBlock.getNext();\n        if (!catchOrFinallyBlock.hasChildren() \u0026\u0026 (finallyBlock \u003d\u003d null || !finallyBlock.hasChildren())) {\n            n.removeChild(body);\n            parent.replaceChild(n, body);\n            compiler.reportCodeChange();\n            n \u003d body;\n        }\n    }\n    DiGraphNode\u003cNode, Branch\u003e gNode \u003d curCfg.getDirectedGraphNode(n);\n    if (gNode \u003d\u003d null) {\n        return;\n    }\n    if (gNode.getAnnotation() !\u003d GraphReachability.REACHABLE || (removeNoOpStatements \u0026\u0026 !NodeUtil.mayHaveSideEffects(n))) {\n        removeDeadExprStatementSafely(n, parent);\n        return;\n    }\n    switch(n.getType()) {\n        case Token.RETURN:\n            if (n.hasChildren()) {\n                break;\n            }\n        case Token.BREAK:\n        case Token.CONTINUE:\n            List\u003cDiGraphEdge\u003cNode, Branch\u003e\u003e outEdges \u003d gNode.getOutEdges();\n            if (outEdges.size() \u003d\u003d 1 \u0026\u0026 (n.getNext() \u003d\u003d null || n.getNext().getType() \u003d\u003d Token.FUNCTION)) {\n                Preconditions.checkState(outEdges.get(0).getValue() \u003d\u003d Branch.UNCOND);\n                Node fallThrough \u003d ControlFlowAnalysis.computeFollowNode(n);\n                if (outEdges.get(0).getDestination().getValue() \u003d\u003d fallThrough) {\n                    removeDeadExprStatementSafely(n, parent);\n                }\n            }\n    }\n}",
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
          "functionStartLine": 93,
          "functionName": "visit",
          "functionAnnotation": "@SuppressWarnings(\"fallthrough\"),@Override",
          "functionDoc": "",
          "diff": "@@ -1,27 +1,45 @@\n+@SuppressWarnings(\"fallthrough\")\n @Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     if (parent \u003d\u003d null) {\n         return;\n     }\n     if (n.getType() \u003d\u003d Token.FUNCTION || n.getType() \u003d\u003d Token.SCRIPT) {\n         return;\n     }\n     if (n.getType() \u003d\u003d Token.TRY) {\n         Node body \u003d n.getFirstChild();\n         Node catchOrFinallyBlock \u003d body.getNext();\n         Node finallyBlock \u003d catchOrFinallyBlock.getNext();\n         if (!catchOrFinallyBlock.hasChildren() \u0026\u0026 (finallyBlock \u003d\u003d null || !finallyBlock.hasChildren())) {\n             n.removeChild(body);\n             parent.replaceChild(n, body);\n             compiler.reportCodeChange();\n             n \u003d body;\n         }\n     }\n-    GraphNode\u003cNode, Branch\u003e gNode \u003d curCfg.getNode(n);\n+    DiGraphNode\u003cNode, Branch\u003e gNode \u003d curCfg.getDirectedGraphNode(n);\n     if (gNode \u003d\u003d null) {\n         return;\n     }\n     if (gNode.getAnnotation() !\u003d GraphReachability.REACHABLE || (removeNoOpStatements \u0026\u0026 !NodeUtil.mayHaveSideEffects(n))) {\n         removeDeadExprStatementSafely(n, parent);\n+        return;\n+    }\n+    switch(n.getType()) {\n+        case Token.RETURN:\n+            if (n.hasChildren()) {\n+                break;\n+            }\n+        case Token.BREAK:\n+        case Token.CONTINUE:\n+            List\u003cDiGraphEdge\u003cNode, Branch\u003e\u003e outEdges \u003d gNode.getOutEdges();\n+            if (outEdges.size() \u003d\u003d 1 \u0026\u0026 (n.getNext() \u003d\u003d null || n.getNext().getType() \u003d\u003d Token.FUNCTION)) {\n+                Preconditions.checkState(outEdges.get(0).getValue() \u003d\u003d Branch.UNCOND);\n+                Node fallThrough \u003d ControlFlowAnalysis.computeFollowNode(n);\n+                if (outEdges.get(0).getDestination().getValue() \u003d\u003d fallThrough) {\n+                    removeDeadExprStatementSafely(n, parent);\n+                }\n+            }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yannotationchange",
          "commitMessage": "\nRemoves useless unconditional jumps\n\nR\u003djohnlenz\nDELTA\u003d179  (96 added, 33 deleted, 50 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d88010\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@337 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "8/4/10, 5:53 PM",
          "commitName": "0a39688562637465944df3c29ae0c1259cc0a4dc",
          "commitAuthor": "acleung@google.com",
          "commitDateOld": "8/4/10, 12:51 PM",
          "commitNameOld": "1369e98d3d3b130b4677959b570b00ecbcb85cc3",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 0.21,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"fallthrough\")\n@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (parent \u003d\u003d null) {\n        return;\n    }\n    if (n.getType() \u003d\u003d Token.FUNCTION || n.getType() \u003d\u003d Token.SCRIPT) {\n        return;\n    }\n    if (n.getType() \u003d\u003d Token.TRY) {\n        Node body \u003d n.getFirstChild();\n        Node catchOrFinallyBlock \u003d body.getNext();\n        Node finallyBlock \u003d catchOrFinallyBlock.getNext();\n        if (!catchOrFinallyBlock.hasChildren() \u0026\u0026 (finallyBlock \u003d\u003d null || !finallyBlock.hasChildren())) {\n            n.removeChild(body);\n            parent.replaceChild(n, body);\n            compiler.reportCodeChange();\n            n \u003d body;\n        }\n    }\n    DiGraphNode\u003cNode, Branch\u003e gNode \u003d curCfg.getDirectedGraphNode(n);\n    if (gNode \u003d\u003d null) {\n        return;\n    }\n    if (gNode.getAnnotation() !\u003d GraphReachability.REACHABLE || (removeNoOpStatements \u0026\u0026 !NodeUtil.mayHaveSideEffects(n))) {\n        removeDeadExprStatementSafely(n, parent);\n        return;\n    }\n    switch(n.getType()) {\n        case Token.RETURN:\n            if (n.hasChildren()) {\n                break;\n            }\n        case Token.BREAK:\n        case Token.CONTINUE:\n            List\u003cDiGraphEdge\u003cNode, Branch\u003e\u003e outEdges \u003d gNode.getOutEdges();\n            if (outEdges.size() \u003d\u003d 1 \u0026\u0026 (n.getNext() \u003d\u003d null || n.getNext().getType() \u003d\u003d Token.FUNCTION)) {\n                Preconditions.checkState(outEdges.get(0).getValue() \u003d\u003d Branch.UNCOND);\n                Node fallThrough \u003d ControlFlowAnalysis.computeFollowNode(n);\n                if (outEdges.get(0).getDestination().getValue() \u003d\u003d fallThrough) {\n                    removeDeadExprStatementSafely(n, parent);\n                }\n            }\n    }\n}",
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
          "functionStartLine": 93,
          "functionName": "visit",
          "functionAnnotation": "@SuppressWarnings(\"fallthrough\"),@Override",
          "functionDoc": "",
          "diff": "@@ -1,27 +1,45 @@\n+@SuppressWarnings(\"fallthrough\")\n @Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     if (parent \u003d\u003d null) {\n         return;\n     }\n     if (n.getType() \u003d\u003d Token.FUNCTION || n.getType() \u003d\u003d Token.SCRIPT) {\n         return;\n     }\n     if (n.getType() \u003d\u003d Token.TRY) {\n         Node body \u003d n.getFirstChild();\n         Node catchOrFinallyBlock \u003d body.getNext();\n         Node finallyBlock \u003d catchOrFinallyBlock.getNext();\n         if (!catchOrFinallyBlock.hasChildren() \u0026\u0026 (finallyBlock \u003d\u003d null || !finallyBlock.hasChildren())) {\n             n.removeChild(body);\n             parent.replaceChild(n, body);\n             compiler.reportCodeChange();\n             n \u003d body;\n         }\n     }\n-    GraphNode\u003cNode, Branch\u003e gNode \u003d curCfg.getNode(n);\n+    DiGraphNode\u003cNode, Branch\u003e gNode \u003d curCfg.getDirectedGraphNode(n);\n     if (gNode \u003d\u003d null) {\n         return;\n     }\n     if (gNode.getAnnotation() !\u003d GraphReachability.REACHABLE || (removeNoOpStatements \u0026\u0026 !NodeUtil.mayHaveSideEffects(n))) {\n         removeDeadExprStatementSafely(n, parent);\n+        return;\n+    }\n+    switch(n.getType()) {\n+        case Token.RETURN:\n+            if (n.hasChildren()) {\n+                break;\n+            }\n+        case Token.BREAK:\n+        case Token.CONTINUE:\n+            List\u003cDiGraphEdge\u003cNode, Branch\u003e\u003e outEdges \u003d gNode.getOutEdges();\n+            if (outEdges.size() \u003d\u003d 1 \u0026\u0026 (n.getNext() \u003d\u003d null || n.getNext().getType() \u003d\u003d Token.FUNCTION)) {\n+                Preconditions.checkState(outEdges.get(0).getValue() \u003d\u003d Branch.UNCOND);\n+                Node fallThrough \u003d ControlFlowAnalysis.computeFollowNode(n);\n+                if (outEdges.get(0).getDestination().getValue() \u003d\u003d fallThrough) {\n+                    removeDeadExprStatementSafely(n, parent);\n+                }\n+            }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "@Override",
            "newValue": "@SuppressWarnings(\"fallthrough\"),@Override"
          }
        }
      ]
    },
    "e33e925eea3a8e4de958864e531e1adc4da62e18": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/06/14 by johnlenz\n\n        Remove unneed parenthese from hook expressions.\n\n        R\u003dacleung\n        DELTA\u003d76  (20 added, 4 deleted, 52 changed)\n\nChange on 2010/06/14 by johnlenz\n\n        Fix non-determinisim.\n\n        R\u003djschorr\n        DELTA\u003d5  (3 added, 0 deleted, 2 changed)\n\nChange on 2010/06/15 by nicksantos\n\n        fix a regression caused by a change in the ordering in which\n        constant folding is done.\n        parts of PeepholeSubstituteAlternateSyntax will crash if they\n        see a NEG node with a NUMBER child.\n        They were assuming that FoldConstants would fold these into one node.\n\n        R\u003ddcc,acleung\n        DELTA\u003d153  (70 added, 6 deleted, 77 changed)\n\nChange on 2010/06/15 by johnlenz\n\n        More debug diffing improvements: convert unique globally unique names\n        to locally unique names for reproduciblity.\n\n        R\u003dacleung\n        DELTA\u003d222  (44 added, 7 deleted, 171 changed)\n\nChange on 2010/06/15 by nicksantos\n\n        Add the @nocompile annotation as a signal that this file should\n        be dropped silently if it gets pulled into a --manage_closure_dependencies\n        build.\n\n        R\u003dbowdidge,gboyer\n        DELTA\u003d82  (60 added, 1 deleted, 21 changed)\n\nChange on 2010/06/15 by dcc\n\n        Refactor FoldConstants dead code removal into PeepholeRemoveDeadCode.\n\n        R\u003dacleung\n        DELTA\u003d744  (403 added, 307 deleted, 34 changed)\n\nChange on 2010/06/15 by dcc\n\n        ExternExports test now emits type annotation for exported externs.\n                - Changed ExternExportsPass to generate the externs as an AST and then print\n        to a String rather than ad hoc with a StringBuilder.\n                - Changed TypedCodeGenerator to generate \u0027*\u0027 (AllType) for parameters with unknown types rather than \u0027?\u0027 (UnknownType) since \u0027?\u0027 is not valid JSDoc.\n\n        R\u003dacleung\n        DELTA\u003d643  (496 added, 66 deleted, 81 changed)\n\nChange on 2010/06/16 by johnlenz\n\n        Tweak to PureFunctionIndentifier to propagate the side-effects for\n        anonymous function expressions like: (Date.now||function(){return\n        +new Date})()\n\n        R\u003davd\n        DELTA\u003d42  (39 added, 0 deleted, 3 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d29010\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@243 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/16/10, 12:33 PM",
      "commitName": "e33e925eea3a8e4de958864e531e1adc4da62e18",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "12/21/09, 10:13 AM",
      "commitNameOld": "d964d232de65db2370c06ce04de9865a3b2c8c9f",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 177.06,
      "commitsBetweenForRepo": 173,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (parent \u003d\u003d null) {\n        return;\n    }\n    if (n.getType() \u003d\u003d Token.FUNCTION || n.getType() \u003d\u003d Token.SCRIPT) {\n        return;\n    }\n    if (n.getType() \u003d\u003d Token.TRY) {\n        Node body \u003d n.getFirstChild();\n        Node catchOrFinallyBlock \u003d body.getNext();\n        Node finallyBlock \u003d catchOrFinallyBlock.getNext();\n        if (!catchOrFinallyBlock.hasChildren() \u0026\u0026 (finallyBlock \u003d\u003d null || !finallyBlock.hasChildren())) {\n            n.removeChild(body);\n            parent.replaceChild(n, body);\n            compiler.reportCodeChange();\n            n \u003d body;\n        }\n    }\n    GraphNode\u003cNode, Branch\u003e gNode \u003d curCfg.getNode(n);\n    if (gNode \u003d\u003d null) {\n        return;\n    }\n    if (gNode.getAnnotation() !\u003d GraphReachability.REACHABLE || (removeNoOpStatements \u0026\u0026 !NodeUtil.mayHaveSideEffects(n))) {\n        removeDeadExprStatementSafely(n, parent);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
      "functionStartLine": 89,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "d964d232de65db2370c06ce04de9865a3b2c8c9f": {
      "type": "Ybodychange",
      "commitMessage": "Minor code removal improvement \"({}).prop \u003d 3;\" has no side effects.\n\nImprovements to test infrastructure.\n\nFix an edge case compiler crash in TypeValidator.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@43 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/21/09, 10:13 AM",
      "commitName": "d964d232de65db2370c06ce04de9865a3b2c8c9f",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/3/09, 3:51 PM",
      "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 47.77,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (parent \u003d\u003d null) {\n        return;\n    }\n    if (n.getType() \u003d\u003d Token.FUNCTION || n.getType() \u003d\u003d Token.SCRIPT) {\n        return;\n    }\n    if (n.getType() \u003d\u003d Token.TRY) {\n        Node body \u003d n.getFirstChild();\n        Node catchOrFinallyBlock \u003d body.getNext();\n        Node finallyBlock \u003d catchOrFinallyBlock.getNext();\n        if (!catchOrFinallyBlock.hasChildren() \u0026\u0026 (finallyBlock \u003d\u003d null || !finallyBlock.hasChildren())) {\n            n.removeChild(body);\n            parent.replaceChild(n, body);\n            compiler.reportCodeChange();\n            n \u003d body;\n        }\n    }\n    GraphNode\u003cNode, Branch\u003e gNode \u003d curCfg.getNode(n);\n    if (gNode \u003d\u003d null) {\n        return;\n    }\n    if (gNode.getAnnotation() !\u003d GraphReachability.REACHABLE || (removeNoOpStatements \u0026\u0026 !NodeUtil.mayHaveSideEffects(n))) {\n        removeDeadExprStatementSafely(n, parent);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
      "functionStartLine": 89,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,27 +1,27 @@\n @Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     if (parent \u003d\u003d null) {\n         return;\n     }\n     if (n.getType() \u003d\u003d Token.FUNCTION || n.getType() \u003d\u003d Token.SCRIPT) {\n         return;\n     }\n     if (n.getType() \u003d\u003d Token.TRY) {\n         Node body \u003d n.getFirstChild();\n         Node catchOrFinallyBlock \u003d body.getNext();\n         Node finallyBlock \u003d catchOrFinallyBlock.getNext();\n         if (!catchOrFinallyBlock.hasChildren() \u0026\u0026 (finallyBlock \u003d\u003d null || !finallyBlock.hasChildren())) {\n             n.removeChild(body);\n             parent.replaceChild(n, body);\n             compiler.reportCodeChange();\n             n \u003d body;\n         }\n     }\n     GraphNode\u003cNode, Branch\u003e gNode \u003d curCfg.getNode(n);\n     if (gNode \u003d\u003d null) {\n         return;\n     }\n-    if (gNode.getAnnotation() !\u003d GraphReachability.REACHABLE || (removeNoOpStatements \u0026\u0026 !NodeUtil.mayEffectMutableState(n))) {\n+    if (gNode.getAnnotation() !\u003d GraphReachability.REACHABLE || (removeNoOpStatements \u0026\u0026 !NodeUtil.mayHaveSideEffects(n))) {\n         removeDeadExprStatementSafely(n, parent);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,27 @@\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (parent \u003d\u003d null) {\n+        return;\n+    }\n+    if (n.getType() \u003d\u003d Token.FUNCTION || n.getType() \u003d\u003d Token.SCRIPT) {\n+        return;\n+    }\n+    if (n.getType() \u003d\u003d Token.TRY) {\n+        Node body \u003d n.getFirstChild();\n+        Node catchOrFinallyBlock \u003d body.getNext();\n+        Node finallyBlock \u003d catchOrFinallyBlock.getNext();\n+        if (!catchOrFinallyBlock.hasChildren() \u0026\u0026 (finallyBlock \u003d\u003d null || !finallyBlock.hasChildren())) {\n+            n.removeChild(body);\n+            parent.replaceChild(n, body);\n+            compiler.reportCodeChange();\n+            n \u003d body;\n+        }\n+    }\n+    GraphNode\u003cNode, Branch\u003e gNode \u003d curCfg.getNode(n);\n+    if (gNode \u003d\u003d null) {\n+        return;\n+    }\n+    if (gNode.getAnnotation() !\u003d GraphReachability.REACHABLE || (removeNoOpStatements \u0026\u0026 !NodeUtil.mayEffectMutableState(n))) {\n+        removeDeadExprStatementSafely(n, parent);\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (parent \u003d\u003d null) {\n        return;\n    }\n    if (n.getType() \u003d\u003d Token.FUNCTION || n.getType() \u003d\u003d Token.SCRIPT) {\n        return;\n    }\n    if (n.getType() \u003d\u003d Token.TRY) {\n        Node body \u003d n.getFirstChild();\n        Node catchOrFinallyBlock \u003d body.getNext();\n        Node finallyBlock \u003d catchOrFinallyBlock.getNext();\n        if (!catchOrFinallyBlock.hasChildren() \u0026\u0026 (finallyBlock \u003d\u003d null || !finallyBlock.hasChildren())) {\n            n.removeChild(body);\n            parent.replaceChild(n, body);\n            compiler.reportCodeChange();\n            n \u003d body;\n        }\n    }\n    GraphNode\u003cNode, Branch\u003e gNode \u003d curCfg.getNode(n);\n    if (gNode \u003d\u003d null) {\n        return;\n    }\n    if (gNode.getAnnotation() !\u003d GraphReachability.REACHABLE || (removeNoOpStatements \u0026\u0026 !NodeUtil.mayEffectMutableState(n))) {\n        removeDeadExprStatementSafely(n, parent);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
      "functionStartLine": 89,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}