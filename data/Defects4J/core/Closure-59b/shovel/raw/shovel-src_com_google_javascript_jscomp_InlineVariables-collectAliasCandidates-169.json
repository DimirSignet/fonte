{
  "origin": "codeshovel",
  "repositoryName": "Closure-59b",
  "repositoryPath": "/tmp/Closure-59b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "InlineVariables.java",
  "functionName": "collectAliasCandidates",
  "functionId": "$collectAliasCandidates___t-NodeTraversal__referenceMap-ReferenceMap",
  "sourceFilePath": "src/com/google/javascript/jscomp/InlineVariables.java",
  "functionAnnotation": "",
  "functionDoc": "If any of the variables are well-defined and alias other variables,\nmark them as aliasing candidates.\n",
  "functionStartLine": 169,
  "functionEndLine": 190,
  "numCommitsSeen": 43,
  "timeTaken": 1410,
  "changeHistory": [
    "75a9013e3907e5db97f10578227497d7b018caf5",
    "d1df970451b5a18956448097b3afb43f3a82263d",
    "3bee5d740c96572faea4b9fb8b632e0e07b13cbb",
    "78995bf9e88599055a8c4165d89c09dc92a44b30",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "75a9013e3907e5db97f10578227497d7b018caf5": "Ymultichange(Yparameterchange,Ybodychange)",
    "d1df970451b5a18956448097b3afb43f3a82263d": "Ybodychange",
    "3bee5d740c96572faea4b9fb8b632e0e07b13cbb": "Ybodychange",
    "78995bf9e88599055a8c4165d89c09dc92a44b30": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "75a9013e3907e5db97f10578227497d7b018caf5": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "\nmade checkVariableReferences hot-swappable and to do this added the\nfunctionality to keep lists of all global var references in Compiler\n\nR\u003dnicksantos\nDELTA\u003d478  (417 added, 8 deleted, 53 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1999\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1128 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/24/11, 10:36 AM",
      "commitName": "75a9013e3907e5db97f10578227497d7b018caf5",
      "commitAuthor": "bashir@google.com",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "\nmade checkVariableReferences hot-swappable and to do this added the\nfunctionality to keep lists of all global var references in Compiler\n\nR\u003dnicksantos\nDELTA\u003d478  (417 added, 8 deleted, 53 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1999\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1128 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "5/24/11, 10:36 AM",
          "commitName": "75a9013e3907e5db97f10578227497d7b018caf5",
          "commitAuthor": "bashir@google.com",
          "commitDateOld": "4/12/11, 12:15 PM",
          "commitNameOld": "f322be0e576d5e2114cb59c0a6537197997b9c59",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 41.93,
          "commitsBetweenForRepo": 125,
          "commitsBetweenForFile": 1,
          "actualSource": "private void collectAliasCandidates(NodeTraversal t, ReferenceMap referenceMap) {\n    if (mode !\u003d Mode.CONSTANTS_ONLY) {\n        for (Iterator\u003cVar\u003e it \u003d t.getScope().getVars(); it.hasNext(); ) {\n            Var v \u003d it.next();\n            ReferenceCollection referenceInfo \u003d referenceMap.getReferences(v);\n            if (referenceInfo !\u003d null \u0026\u0026 referenceInfo.references.size() \u003e\u003d 2 \u0026\u0026 referenceInfo.isWellDefined() \u0026\u0026 referenceInfo.isAssignedOnceInLifetime()) {\n                Reference init \u003d referenceInfo.getInitializingReference();\n                Node value \u003d init.getAssignedValue();\n                if (value !\u003d null \u0026\u0026 value.getType() \u003d\u003d Token.NAME) {\n                    aliasCandidates.put(value, new AliasCandidate(v, referenceInfo));\n                }\n            }\n        }\n    }\n}",
          "path": "src/com/google/javascript/jscomp/InlineVariables.java",
          "functionStartLine": 169,
          "functionName": "collectAliasCandidates",
          "functionAnnotation": "",
          "functionDoc": "If any of the variables are well-defined and alias other variables,\nmark them as aliasing candidates.\n",
          "diff": "@@ -1,15 +1,15 @@\n-private void collectAliasCandidates(NodeTraversal t, Map\u003cVar, ReferenceCollection\u003e referenceMap) {\n+private void collectAliasCandidates(NodeTraversal t, ReferenceMap referenceMap) {\n     if (mode !\u003d Mode.CONSTANTS_ONLY) {\n         for (Iterator\u003cVar\u003e it \u003d t.getScope().getVars(); it.hasNext(); ) {\n             Var v \u003d it.next();\n-            ReferenceCollection referenceInfo \u003d referenceMap.get(v);\n+            ReferenceCollection referenceInfo \u003d referenceMap.getReferences(v);\n             if (referenceInfo !\u003d null \u0026\u0026 referenceInfo.references.size() \u003e\u003d 2 \u0026\u0026 referenceInfo.isWellDefined() \u0026\u0026 referenceInfo.isAssignedOnceInLifetime()) {\n                 Reference init \u003d referenceInfo.getInitializingReference();\n                 Node value \u003d init.getAssignedValue();\n                 if (value !\u003d null \u0026\u0026 value.getType() \u003d\u003d Token.NAME) {\n                     aliasCandidates.put(value, new AliasCandidate(v, referenceInfo));\n                 }\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[t-NodeTraversal, referenceMap-Map\u003cVar,ReferenceCollection\u003e]",
            "newValue": "[t-NodeTraversal, referenceMap-ReferenceMap]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nmade checkVariableReferences hot-swappable and to do this added the\nfunctionality to keep lists of all global var references in Compiler\n\nR\u003dnicksantos\nDELTA\u003d478  (417 added, 8 deleted, 53 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1999\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1128 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "5/24/11, 10:36 AM",
          "commitName": "75a9013e3907e5db97f10578227497d7b018caf5",
          "commitAuthor": "bashir@google.com",
          "commitDateOld": "4/12/11, 12:15 PM",
          "commitNameOld": "f322be0e576d5e2114cb59c0a6537197997b9c59",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 41.93,
          "commitsBetweenForRepo": 125,
          "commitsBetweenForFile": 1,
          "actualSource": "private void collectAliasCandidates(NodeTraversal t, ReferenceMap referenceMap) {\n    if (mode !\u003d Mode.CONSTANTS_ONLY) {\n        for (Iterator\u003cVar\u003e it \u003d t.getScope().getVars(); it.hasNext(); ) {\n            Var v \u003d it.next();\n            ReferenceCollection referenceInfo \u003d referenceMap.getReferences(v);\n            if (referenceInfo !\u003d null \u0026\u0026 referenceInfo.references.size() \u003e\u003d 2 \u0026\u0026 referenceInfo.isWellDefined() \u0026\u0026 referenceInfo.isAssignedOnceInLifetime()) {\n                Reference init \u003d referenceInfo.getInitializingReference();\n                Node value \u003d init.getAssignedValue();\n                if (value !\u003d null \u0026\u0026 value.getType() \u003d\u003d Token.NAME) {\n                    aliasCandidates.put(value, new AliasCandidate(v, referenceInfo));\n                }\n            }\n        }\n    }\n}",
          "path": "src/com/google/javascript/jscomp/InlineVariables.java",
          "functionStartLine": 169,
          "functionName": "collectAliasCandidates",
          "functionAnnotation": "",
          "functionDoc": "If any of the variables are well-defined and alias other variables,\nmark them as aliasing candidates.\n",
          "diff": "@@ -1,15 +1,15 @@\n-private void collectAliasCandidates(NodeTraversal t, Map\u003cVar, ReferenceCollection\u003e referenceMap) {\n+private void collectAliasCandidates(NodeTraversal t, ReferenceMap referenceMap) {\n     if (mode !\u003d Mode.CONSTANTS_ONLY) {\n         for (Iterator\u003cVar\u003e it \u003d t.getScope().getVars(); it.hasNext(); ) {\n             Var v \u003d it.next();\n-            ReferenceCollection referenceInfo \u003d referenceMap.get(v);\n+            ReferenceCollection referenceInfo \u003d referenceMap.getReferences(v);\n             if (referenceInfo !\u003d null \u0026\u0026 referenceInfo.references.size() \u003e\u003d 2 \u0026\u0026 referenceInfo.isWellDefined() \u0026\u0026 referenceInfo.isAssignedOnceInLifetime()) {\n                 Reference init \u003d referenceInfo.getInitializingReference();\n                 Node value \u003d init.getAssignedValue();\n                 if (value !\u003d null \u0026\u0026 value.getType() \u003d\u003d Token.NAME) {\n                     aliasCandidates.put(value, new AliasCandidate(v, referenceInfo));\n                 }\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "d1df970451b5a18956448097b3afb43f3a82263d": {
      "type": "Ybodychange",
      "commitMessage": "\n\nChange on 2010/06/09 by nicksantos\n\n        be clear that \"assigned once\" means \"assigned once in lifetime\"\n        fixes issue 174.\n\n        R\u003djohnlenz\n        DELTA\u003d125  (113 added, 0 deleted, 12 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d26002\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@241 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/10/10, 1:12 PM",
      "commitName": "d1df970451b5a18956448097b3afb43f3a82263d",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/23/10, 11:31 AM",
      "commitNameOld": "ebb59a97610015bc41bda7f458dd1428a3a3e335",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 48.07,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "actualSource": "private void collectAliasCandidates(NodeTraversal t, Map\u003cVar, ReferenceCollection\u003e referenceMap) {\n    if (mode !\u003d Mode.CONSTANTS_ONLY) {\n        for (Iterator\u003cVar\u003e it \u003d t.getScope().getVars(); it.hasNext(); ) {\n            Var v \u003d it.next();\n            ReferenceCollection referenceInfo \u003d referenceMap.get(v);\n            if (referenceInfo !\u003d null \u0026\u0026 referenceInfo.references.size() \u003e\u003d 2 \u0026\u0026 referenceInfo.isWellDefined() \u0026\u0026 referenceInfo.isAssignedOnceInLifetime()) {\n                Reference init \u003d referenceInfo.getInitializingReference();\n                Node value \u003d init.getAssignedValue();\n                if (value !\u003d null \u0026\u0026 value.getType() \u003d\u003d Token.NAME) {\n                    aliasCandidates.put(value, new AliasCandidate(v, referenceInfo));\n                }\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/InlineVariables.java",
      "functionStartLine": 169,
      "functionName": "collectAliasCandidates",
      "functionAnnotation": "",
      "functionDoc": "If any of the variables are well-defined and alias other variables,\nmark them as aliasing candidates.\n",
      "diff": "@@ -1,15 +1,15 @@\n private void collectAliasCandidates(NodeTraversal t, Map\u003cVar, ReferenceCollection\u003e referenceMap) {\n     if (mode !\u003d Mode.CONSTANTS_ONLY) {\n         for (Iterator\u003cVar\u003e it \u003d t.getScope().getVars(); it.hasNext(); ) {\n             Var v \u003d it.next();\n             ReferenceCollection referenceInfo \u003d referenceMap.get(v);\n-            if (referenceInfo !\u003d null \u0026\u0026 referenceInfo.references.size() \u003e\u003d 2 \u0026\u0026 referenceInfo.isWellDefined() \u0026\u0026 referenceInfo.isAssignedOnce()) {\n+            if (referenceInfo !\u003d null \u0026\u0026 referenceInfo.references.size() \u003e\u003d 2 \u0026\u0026 referenceInfo.isWellDefined() \u0026\u0026 referenceInfo.isAssignedOnceInLifetime()) {\n                 Reference init \u003d referenceInfo.getInitializingReference();\n                 Node value \u003d init.getAssignedValue();\n                 if (value !\u003d null \u0026\u0026 value.getType() \u003d\u003d Token.NAME) {\n                     aliasCandidates.put(value, new AliasCandidate(v, referenceInfo));\n                 }\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3bee5d740c96572faea4b9fb8b632e0e07b13cbb": {
      "type": "Ybodychange",
      "commitMessage": "Add a mechanism for inlining local vars, and turn it on by default.\nWarnings for \"ambiguous\" function definitions.\nRefactoring and renaming of some method names.\nUse \"\u003d\" optionality annotation in externs.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@15 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/25/09, 6:53 AM",
      "commitName": "3bee5d740c96572faea4b9fb8b632e0e07b13cbb",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/10/09, 11:16 AM",
      "commitNameOld": "78995bf9e88599055a8c4165d89c09dc92a44b30",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 14.82,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "private void collectAliasCandidates(NodeTraversal t, Map\u003cVar, ReferenceCollection\u003e referenceMap) {\n    if (mode !\u003d Mode.CONSTANTS_ONLY) {\n        for (Iterator\u003cVar\u003e it \u003d t.getScope().getVars(); it.hasNext(); ) {\n            Var v \u003d it.next();\n            ReferenceCollection referenceInfo \u003d referenceMap.get(v);\n            if (referenceInfo !\u003d null \u0026\u0026 referenceInfo.references.size() \u003e\u003d 2 \u0026\u0026 referenceInfo.isWellDefined() \u0026\u0026 referenceInfo.isAssignedOnce()) {\n                Reference init \u003d referenceInfo.getInitializingReference();\n                Node value \u003d init.getAssignedValue();\n                if (value !\u003d null \u0026\u0026 value.getType() \u003d\u003d Token.NAME) {\n                    aliasCandidates.put(value, new AliasCandidate(v, referenceInfo));\n                }\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/InlineVariables.java",
      "functionStartLine": 168,
      "functionName": "collectAliasCandidates",
      "functionAnnotation": "",
      "functionDoc": "If any of the variables are well-defined and alias other variables,\nmark them as aliasing candidates.\n",
      "diff": "@@ -1,15 +1,15 @@\n private void collectAliasCandidates(NodeTraversal t, Map\u003cVar, ReferenceCollection\u003e referenceMap) {\n-    if (!onlyConstants) {\n+    if (mode !\u003d Mode.CONSTANTS_ONLY) {\n         for (Iterator\u003cVar\u003e it \u003d t.getScope().getVars(); it.hasNext(); ) {\n             Var v \u003d it.next();\n             ReferenceCollection referenceInfo \u003d referenceMap.get(v);\n             if (referenceInfo !\u003d null \u0026\u0026 referenceInfo.references.size() \u003e\u003d 2 \u0026\u0026 referenceInfo.isWellDefined() \u0026\u0026 referenceInfo.isAssignedOnce()) {\n                 Reference init \u003d referenceInfo.getInitializingReference();\n                 Node value \u003d init.getAssignedValue();\n                 if (value !\u003d null \u0026\u0026 value.getType() \u003d\u003d Token.NAME) {\n                     aliasCandidates.put(value, new AliasCandidate(v, referenceInfo));\n                 }\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "78995bf9e88599055a8c4165d89c09dc92a44b30": {
      "type": "Ybodychange",
      "commitMessage": "Fix synthesis of vars in DEFAULT mode.\nBetter variable inlining\nBetter function inlining\nAssorted bug fixes\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@6 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/10/09, 11:16 AM",
      "commitName": "78995bf9e88599055a8c4165d89c09dc92a44b30",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/6/09, 5:24 PM",
      "commitNameOld": "0b7eccf2fd3a9293d7b513fbb766d7bc06abd7e0",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 3.74,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private void collectAliasCandidates(NodeTraversal t, Map\u003cVar, ReferenceCollection\u003e referenceMap) {\n    if (!onlyConstants) {\n        for (Iterator\u003cVar\u003e it \u003d t.getScope().getVars(); it.hasNext(); ) {\n            Var v \u003d it.next();\n            ReferenceCollection referenceInfo \u003d referenceMap.get(v);\n            if (referenceInfo !\u003d null \u0026\u0026 referenceInfo.references.size() \u003e\u003d 2 \u0026\u0026 referenceInfo.isWellDefined() \u0026\u0026 referenceInfo.isAssignedOnce()) {\n                Reference init \u003d referenceInfo.getInitializingReference();\n                Node value \u003d init.getAssignedValue();\n                if (value !\u003d null \u0026\u0026 value.getType() \u003d\u003d Token.NAME) {\n                    aliasCandidates.put(value, new AliasCandidate(v, referenceInfo));\n                }\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/InlineVariables.java",
      "functionStartLine": 139,
      "functionName": "collectAliasCandidates",
      "functionAnnotation": "",
      "functionDoc": "If any of the variables are well-defined and alias other variables,\nmark them as aliasing candidates.\n",
      "diff": "@@ -1,15 +1,15 @@\n private void collectAliasCandidates(NodeTraversal t, Map\u003cVar, ReferenceCollection\u003e referenceMap) {\n     if (!onlyConstants) {\n         for (Iterator\u003cVar\u003e it \u003d t.getScope().getVars(); it.hasNext(); ) {\n             Var v \u003d it.next();\n             ReferenceCollection referenceInfo \u003d referenceMap.get(v);\n-            if (referenceInfo !\u003d null \u0026\u0026 referenceInfo.references.size() \u003e\u003d 2 \u0026\u0026 referenceInfo.isWellDefined() \u0026\u0026 referenceInfo.isNeverReassigned()) {\n-                Reference declaration \u003d referenceInfo.references.get(0);\n-                Node value \u003d declaration.getNameNode().getFirstChild();\n-                if (declaration.getParent().getType() \u003d\u003d Token.VAR \u0026\u0026 value !\u003d null \u0026\u0026 value.getType() \u003d\u003d Token.NAME) {\n+            if (referenceInfo !\u003d null \u0026\u0026 referenceInfo.references.size() \u003e\u003d 2 \u0026\u0026 referenceInfo.isWellDefined() \u0026\u0026 referenceInfo.isAssignedOnce()) {\n+                Reference init \u003d referenceInfo.getInitializingReference();\n+                Node value \u003d init.getAssignedValue();\n+                if (value !\u003d null \u0026\u0026 value.getType() \u003d\u003d Token.NAME) {\n                     aliasCandidates.put(value, new AliasCandidate(v, referenceInfo));\n                 }\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,15 @@\n+private void collectAliasCandidates(NodeTraversal t, Map\u003cVar, ReferenceCollection\u003e referenceMap) {\n+    if (!onlyConstants) {\n+        for (Iterator\u003cVar\u003e it \u003d t.getScope().getVars(); it.hasNext(); ) {\n+            Var v \u003d it.next();\n+            ReferenceCollection referenceInfo \u003d referenceMap.get(v);\n+            if (referenceInfo !\u003d null \u0026\u0026 referenceInfo.references.size() \u003e\u003d 2 \u0026\u0026 referenceInfo.isWellDefined() \u0026\u0026 referenceInfo.isNeverReassigned()) {\n+                Reference declaration \u003d referenceInfo.references.get(0);\n+                Node value \u003d declaration.getNameNode().getFirstChild();\n+                if (declaration.getParent().getType() \u003d\u003d Token.VAR \u0026\u0026 value !\u003d null \u0026\u0026 value.getType() \u003d\u003d Token.NAME) {\n+                    aliasCandidates.put(value, new AliasCandidate(v, referenceInfo));\n+                }\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void collectAliasCandidates(NodeTraversal t, Map\u003cVar, ReferenceCollection\u003e referenceMap) {\n    if (!onlyConstants) {\n        for (Iterator\u003cVar\u003e it \u003d t.getScope().getVars(); it.hasNext(); ) {\n            Var v \u003d it.next();\n            ReferenceCollection referenceInfo \u003d referenceMap.get(v);\n            if (referenceInfo !\u003d null \u0026\u0026 referenceInfo.references.size() \u003e\u003d 2 \u0026\u0026 referenceInfo.isWellDefined() \u0026\u0026 referenceInfo.isNeverReassigned()) {\n                Reference declaration \u003d referenceInfo.references.get(0);\n                Node value \u003d declaration.getNameNode().getFirstChild();\n                if (declaration.getParent().getType() \u003d\u003d Token.VAR \u0026\u0026 value !\u003d null \u0026\u0026 value.getType() \u003d\u003d Token.NAME) {\n                    aliasCandidates.put(value, new AliasCandidate(v, referenceInfo));\n                }\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/InlineVariables.java",
      "functionStartLine": 169,
      "functionName": "collectAliasCandidates",
      "functionAnnotation": "",
      "functionDoc": "If any of the variables are well-defined and alias other variables,\nmark them as aliasing candidates.\n"
    }
  }
}