{
  "origin": "codeshovel",
  "repositoryName": "Closure-59b",
  "repositoryPath": "/tmp/Closure-59b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractCommandLineRunner.java",
  "functionName": "outputManifestOrBundle",
  "functionId": "outputManifestOrBundle___outputFiles-List__String____isManifest-boolean",
  "sourceFilePath": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 1157,
  "functionEndLine": 1198,
  "numCommitsSeen": 99,
  "timeTaken": 3095,
  "changeHistory": [
    "ab9dfefc6f8799aa4e8f69d4e4e52d055152b25a",
    "48cccf202b6cd853409e169d98918462f91301a8",
    "4cede4f156740b7ce93d92d824066e9a42257541",
    "82a9956c6337d2f5d4a94ebe624d64faa54d9182",
    "0c8a0c53b2124d05b017a63bdbc720a57c89ead2",
    "260f0ffc9243ef15bd17e324c9cf7e2dfac9cc6a"
  ],
  "changeHistoryShort": {
    "ab9dfefc6f8799aa4e8f69d4e4e52d055152b25a": "Ymultichange(Yrename,Yparameterchange,Ybodychange,Ydocchange)",
    "48cccf202b6cd853409e169d98918462f91301a8": "Ybodychange",
    "4cede4f156740b7ce93d92d824066e9a42257541": "Ybodychange",
    "82a9956c6337d2f5d4a94ebe624d64faa54d9182": "Ybodychange",
    "0c8a0c53b2124d05b017a63bdbc720a57c89ead2": "Ybodychange",
    "260f0ffc9243ef15bd17e324c9cf7e2dfac9cc6a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ab9dfefc6f8799aa4e8f69d4e4e52d055152b25a": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "\nCreate -output_bundle flag for JSCompiler to generate bundle files\n\nR\u003dnicksantos\nDELTA\u003d223  (156 added, 7 deleted, 60 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2369\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1198 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/21/11, 3:09 PM",
      "commitName": "ab9dfefc6f8799aa4e8f69d4e4e52d055152b25a",
      "commitAuthor": "zhuyi@google.com",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "\nCreate -output_bundle flag for JSCompiler to generate bundle files\n\nR\u003dnicksantos\nDELTA\u003d223  (156 added, 7 deleted, 60 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2369\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1198 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "6/21/11, 3:09 PM",
          "commitName": "ab9dfefc6f8799aa4e8f69d4e4e52d055152b25a",
          "commitAuthor": "zhuyi@google.com",
          "commitDateOld": "6/14/11, 10:53 AM",
          "commitNameOld": "48cccf202b6cd853409e169d98918462f91301a8",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 7.18,
          "commitsBetweenForRepo": 20,
          "commitsBetweenForFile": 1,
          "actualSource": "private void outputManifestOrBundle(List\u003cString\u003e outputFiles, boolean isManifest) throws IOException {\n    if (outputFiles.isEmpty()) {\n        return;\n    }\n    for (String output : outputFiles) {\n        if (output.isEmpty()) {\n            continue;\n        }\n        JSModuleGraph graph \u003d compiler.getModuleGraph();\n        if (shouldGenerateOutputPerModule(output)) {\n            Iterable\u003cJSModule\u003e modules \u003d graph.getAllModules();\n            for (JSModule module : modules) {\n                Writer out \u003d fileNameToOutputWriter(expandCommandLinePath(output, module));\n                if (isManifest) {\n                    printManifestTo(module.getInputs(), out);\n                } else {\n                    printBundleTo(module.getInputs(), out);\n                }\n                out.close();\n            }\n        } else {\n            Writer out \u003d fileNameToOutputWriter(expandCommandLinePath(output, null));\n            if (graph \u003d\u003d null) {\n                if (isManifest) {\n                    printManifestTo(compiler.getInputsInOrder(), out);\n                } else {\n                    printBundleTo(compiler.getInputsInOrder(), out);\n                }\n            } else {\n                printModuleGraphManifestOrBundleTo(graph, out, isManifest);\n            }\n            out.close();\n        }\n    }\n}",
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
          "functionStartLine": 1157,
          "functionName": "outputManifestOrBundle",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,28 +1,35 @@\n-private void outputManifest() throws IOException {\n-    List\u003cString\u003e outputManifests \u003d config.outputManifests;\n-    if (outputManifests.isEmpty()) {\n+private void outputManifestOrBundle(List\u003cString\u003e outputFiles, boolean isManifest) throws IOException {\n+    if (outputFiles.isEmpty()) {\n         return;\n     }\n-    for (String outputManifest : outputManifests) {\n-        if (outputManifest.isEmpty()) {\n+    for (String output : outputFiles) {\n+        if (output.isEmpty()) {\n             continue;\n         }\n         JSModuleGraph graph \u003d compiler.getModuleGraph();\n-        if (shouldGenerateManifestPerModule(outputManifest)) {\n+        if (shouldGenerateOutputPerModule(output)) {\n             Iterable\u003cJSModule\u003e modules \u003d graph.getAllModules();\n             for (JSModule module : modules) {\n-                Writer out \u003d fileNameToOutputWriter(expandManifest(module, outputManifest));\n-                printManifestTo(module.getInputs(), out);\n+                Writer out \u003d fileNameToOutputWriter(expandCommandLinePath(output, module));\n+                if (isManifest) {\n+                    printManifestTo(module.getInputs(), out);\n+                } else {\n+                    printBundleTo(module.getInputs(), out);\n+                }\n                 out.close();\n             }\n         } else {\n-            Writer out \u003d fileNameToOutputWriter(expandManifest(null, outputManifest));\n+            Writer out \u003d fileNameToOutputWriter(expandCommandLinePath(output, null));\n             if (graph \u003d\u003d null) {\n-                printManifestTo(compiler.getInputsInOrder(), out);\n+                if (isManifest) {\n+                    printManifestTo(compiler.getInputsInOrder(), out);\n+                } else {\n+                    printBundleTo(compiler.getInputsInOrder(), out);\n+                }\n             } else {\n-                printModuleGraphManifestTo(graph, out);\n+                printModuleGraphManifestOrBundleTo(graph, out, isManifest);\n             }\n             out.close();\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "outputManifest",
            "newValue": "outputManifestOrBundle"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "\nCreate -output_bundle flag for JSCompiler to generate bundle files\n\nR\u003dnicksantos\nDELTA\u003d223  (156 added, 7 deleted, 60 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2369\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1198 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "6/21/11, 3:09 PM",
          "commitName": "ab9dfefc6f8799aa4e8f69d4e4e52d055152b25a",
          "commitAuthor": "zhuyi@google.com",
          "commitDateOld": "6/14/11, 10:53 AM",
          "commitNameOld": "48cccf202b6cd853409e169d98918462f91301a8",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 7.18,
          "commitsBetweenForRepo": 20,
          "commitsBetweenForFile": 1,
          "actualSource": "private void outputManifestOrBundle(List\u003cString\u003e outputFiles, boolean isManifest) throws IOException {\n    if (outputFiles.isEmpty()) {\n        return;\n    }\n    for (String output : outputFiles) {\n        if (output.isEmpty()) {\n            continue;\n        }\n        JSModuleGraph graph \u003d compiler.getModuleGraph();\n        if (shouldGenerateOutputPerModule(output)) {\n            Iterable\u003cJSModule\u003e modules \u003d graph.getAllModules();\n            for (JSModule module : modules) {\n                Writer out \u003d fileNameToOutputWriter(expandCommandLinePath(output, module));\n                if (isManifest) {\n                    printManifestTo(module.getInputs(), out);\n                } else {\n                    printBundleTo(module.getInputs(), out);\n                }\n                out.close();\n            }\n        } else {\n            Writer out \u003d fileNameToOutputWriter(expandCommandLinePath(output, null));\n            if (graph \u003d\u003d null) {\n                if (isManifest) {\n                    printManifestTo(compiler.getInputsInOrder(), out);\n                } else {\n                    printBundleTo(compiler.getInputsInOrder(), out);\n                }\n            } else {\n                printModuleGraphManifestOrBundleTo(graph, out, isManifest);\n            }\n            out.close();\n        }\n    }\n}",
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
          "functionStartLine": 1157,
          "functionName": "outputManifestOrBundle",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,28 +1,35 @@\n-private void outputManifest() throws IOException {\n-    List\u003cString\u003e outputManifests \u003d config.outputManifests;\n-    if (outputManifests.isEmpty()) {\n+private void outputManifestOrBundle(List\u003cString\u003e outputFiles, boolean isManifest) throws IOException {\n+    if (outputFiles.isEmpty()) {\n         return;\n     }\n-    for (String outputManifest : outputManifests) {\n-        if (outputManifest.isEmpty()) {\n+    for (String output : outputFiles) {\n+        if (output.isEmpty()) {\n             continue;\n         }\n         JSModuleGraph graph \u003d compiler.getModuleGraph();\n-        if (shouldGenerateManifestPerModule(outputManifest)) {\n+        if (shouldGenerateOutputPerModule(output)) {\n             Iterable\u003cJSModule\u003e modules \u003d graph.getAllModules();\n             for (JSModule module : modules) {\n-                Writer out \u003d fileNameToOutputWriter(expandManifest(module, outputManifest));\n-                printManifestTo(module.getInputs(), out);\n+                Writer out \u003d fileNameToOutputWriter(expandCommandLinePath(output, module));\n+                if (isManifest) {\n+                    printManifestTo(module.getInputs(), out);\n+                } else {\n+                    printBundleTo(module.getInputs(), out);\n+                }\n                 out.close();\n             }\n         } else {\n-            Writer out \u003d fileNameToOutputWriter(expandManifest(null, outputManifest));\n+            Writer out \u003d fileNameToOutputWriter(expandCommandLinePath(output, null));\n             if (graph \u003d\u003d null) {\n-                printManifestTo(compiler.getInputsInOrder(), out);\n+                if (isManifest) {\n+                    printManifestTo(compiler.getInputsInOrder(), out);\n+                } else {\n+                    printBundleTo(compiler.getInputsInOrder(), out);\n+                }\n             } else {\n-                printModuleGraphManifestTo(graph, out);\n+                printModuleGraphManifestOrBundleTo(graph, out, isManifest);\n             }\n             out.close();\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[outputFiles-List\u003cString\u003e, isManifest-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nCreate -output_bundle flag for JSCompiler to generate bundle files\n\nR\u003dnicksantos\nDELTA\u003d223  (156 added, 7 deleted, 60 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2369\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1198 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "6/21/11, 3:09 PM",
          "commitName": "ab9dfefc6f8799aa4e8f69d4e4e52d055152b25a",
          "commitAuthor": "zhuyi@google.com",
          "commitDateOld": "6/14/11, 10:53 AM",
          "commitNameOld": "48cccf202b6cd853409e169d98918462f91301a8",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 7.18,
          "commitsBetweenForRepo": 20,
          "commitsBetweenForFile": 1,
          "actualSource": "private void outputManifestOrBundle(List\u003cString\u003e outputFiles, boolean isManifest) throws IOException {\n    if (outputFiles.isEmpty()) {\n        return;\n    }\n    for (String output : outputFiles) {\n        if (output.isEmpty()) {\n            continue;\n        }\n        JSModuleGraph graph \u003d compiler.getModuleGraph();\n        if (shouldGenerateOutputPerModule(output)) {\n            Iterable\u003cJSModule\u003e modules \u003d graph.getAllModules();\n            for (JSModule module : modules) {\n                Writer out \u003d fileNameToOutputWriter(expandCommandLinePath(output, module));\n                if (isManifest) {\n                    printManifestTo(module.getInputs(), out);\n                } else {\n                    printBundleTo(module.getInputs(), out);\n                }\n                out.close();\n            }\n        } else {\n            Writer out \u003d fileNameToOutputWriter(expandCommandLinePath(output, null));\n            if (graph \u003d\u003d null) {\n                if (isManifest) {\n                    printManifestTo(compiler.getInputsInOrder(), out);\n                } else {\n                    printBundleTo(compiler.getInputsInOrder(), out);\n                }\n            } else {\n                printModuleGraphManifestOrBundleTo(graph, out, isManifest);\n            }\n            out.close();\n        }\n    }\n}",
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
          "functionStartLine": 1157,
          "functionName": "outputManifestOrBundle",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,28 +1,35 @@\n-private void outputManifest() throws IOException {\n-    List\u003cString\u003e outputManifests \u003d config.outputManifests;\n-    if (outputManifests.isEmpty()) {\n+private void outputManifestOrBundle(List\u003cString\u003e outputFiles, boolean isManifest) throws IOException {\n+    if (outputFiles.isEmpty()) {\n         return;\n     }\n-    for (String outputManifest : outputManifests) {\n-        if (outputManifest.isEmpty()) {\n+    for (String output : outputFiles) {\n+        if (output.isEmpty()) {\n             continue;\n         }\n         JSModuleGraph graph \u003d compiler.getModuleGraph();\n-        if (shouldGenerateManifestPerModule(outputManifest)) {\n+        if (shouldGenerateOutputPerModule(output)) {\n             Iterable\u003cJSModule\u003e modules \u003d graph.getAllModules();\n             for (JSModule module : modules) {\n-                Writer out \u003d fileNameToOutputWriter(expandManifest(module, outputManifest));\n-                printManifestTo(module.getInputs(), out);\n+                Writer out \u003d fileNameToOutputWriter(expandCommandLinePath(output, module));\n+                if (isManifest) {\n+                    printManifestTo(module.getInputs(), out);\n+                } else {\n+                    printBundleTo(module.getInputs(), out);\n+                }\n                 out.close();\n             }\n         } else {\n-            Writer out \u003d fileNameToOutputWriter(expandManifest(null, outputManifest));\n+            Writer out \u003d fileNameToOutputWriter(expandCommandLinePath(output, null));\n             if (graph \u003d\u003d null) {\n-                printManifestTo(compiler.getInputsInOrder(), out);\n+                if (isManifest) {\n+                    printManifestTo(compiler.getInputsInOrder(), out);\n+                } else {\n+                    printBundleTo(compiler.getInputsInOrder(), out);\n+                }\n             } else {\n-                printModuleGraphManifestTo(graph, out);\n+                printModuleGraphManifestOrBundleTo(graph, out, isManifest);\n             }\n             out.close();\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "\nCreate -output_bundle flag for JSCompiler to generate bundle files\n\nR\u003dnicksantos\nDELTA\u003d223  (156 added, 7 deleted, 60 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2369\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1198 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "6/21/11, 3:09 PM",
          "commitName": "ab9dfefc6f8799aa4e8f69d4e4e52d055152b25a",
          "commitAuthor": "zhuyi@google.com",
          "commitDateOld": "6/14/11, 10:53 AM",
          "commitNameOld": "48cccf202b6cd853409e169d98918462f91301a8",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 7.18,
          "commitsBetweenForRepo": 20,
          "commitsBetweenForFile": 1,
          "actualSource": "private void outputManifestOrBundle(List\u003cString\u003e outputFiles, boolean isManifest) throws IOException {\n    if (outputFiles.isEmpty()) {\n        return;\n    }\n    for (String output : outputFiles) {\n        if (output.isEmpty()) {\n            continue;\n        }\n        JSModuleGraph graph \u003d compiler.getModuleGraph();\n        if (shouldGenerateOutputPerModule(output)) {\n            Iterable\u003cJSModule\u003e modules \u003d graph.getAllModules();\n            for (JSModule module : modules) {\n                Writer out \u003d fileNameToOutputWriter(expandCommandLinePath(output, module));\n                if (isManifest) {\n                    printManifestTo(module.getInputs(), out);\n                } else {\n                    printBundleTo(module.getInputs(), out);\n                }\n                out.close();\n            }\n        } else {\n            Writer out \u003d fileNameToOutputWriter(expandCommandLinePath(output, null));\n            if (graph \u003d\u003d null) {\n                if (isManifest) {\n                    printManifestTo(compiler.getInputsInOrder(), out);\n                } else {\n                    printBundleTo(compiler.getInputsInOrder(), out);\n                }\n            } else {\n                printModuleGraphManifestOrBundleTo(graph, out, isManifest);\n            }\n            out.close();\n        }\n    }\n}",
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
          "functionStartLine": 1157,
          "functionName": "outputManifestOrBundle",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,28 +1,35 @@\n-private void outputManifest() throws IOException {\n-    List\u003cString\u003e outputManifests \u003d config.outputManifests;\n-    if (outputManifests.isEmpty()) {\n+private void outputManifestOrBundle(List\u003cString\u003e outputFiles, boolean isManifest) throws IOException {\n+    if (outputFiles.isEmpty()) {\n         return;\n     }\n-    for (String outputManifest : outputManifests) {\n-        if (outputManifest.isEmpty()) {\n+    for (String output : outputFiles) {\n+        if (output.isEmpty()) {\n             continue;\n         }\n         JSModuleGraph graph \u003d compiler.getModuleGraph();\n-        if (shouldGenerateManifestPerModule(outputManifest)) {\n+        if (shouldGenerateOutputPerModule(output)) {\n             Iterable\u003cJSModule\u003e modules \u003d graph.getAllModules();\n             for (JSModule module : modules) {\n-                Writer out \u003d fileNameToOutputWriter(expandManifest(module, outputManifest));\n-                printManifestTo(module.getInputs(), out);\n+                Writer out \u003d fileNameToOutputWriter(expandCommandLinePath(output, module));\n+                if (isManifest) {\n+                    printManifestTo(module.getInputs(), out);\n+                } else {\n+                    printBundleTo(module.getInputs(), out);\n+                }\n                 out.close();\n             }\n         } else {\n-            Writer out \u003d fileNameToOutputWriter(expandManifest(null, outputManifest));\n+            Writer out \u003d fileNameToOutputWriter(expandCommandLinePath(output, null));\n             if (graph \u003d\u003d null) {\n-                printManifestTo(compiler.getInputsInOrder(), out);\n+                if (isManifest) {\n+                    printManifestTo(compiler.getInputsInOrder(), out);\n+                } else {\n+                    printBundleTo(compiler.getInputsInOrder(), out);\n+                }\n             } else {\n-                printModuleGraphManifestTo(graph, out);\n+                printModuleGraphManifestOrBundleTo(graph, out, isManifest);\n             }\n             out.close();\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Writes the manifest of all compiler input files that survived\nmanage_closure_dependencies, if requested.\n",
            "newValue": ""
          }
        }
      ]
    },
    "48cccf202b6cd853409e169d98918462f91301a8": {
      "type": "Ybodychange",
      "commitMessage": "\nAllow multiple output_manifest flags, for backwards compatibility\n\nR\u003dzhuyi\nDELTA\u003d54  (21 added, 13 deleted, 20 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2278\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1177 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/14/11, 10:53 AM",
      "commitName": "48cccf202b6cd853409e169d98918462f91301a8",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "6/13/11, 11:04 AM",
      "commitNameOld": "1a400824eb5299485e84d40698d811c4e284511e",
      "commitAuthorOld": "zhuyi@google.com",
      "daysBetweenCommits": 0.99,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "private void outputManifest() throws IOException {\n    List\u003cString\u003e outputManifests \u003d config.outputManifests;\n    if (outputManifests.isEmpty()) {\n        return;\n    }\n    for (String outputManifest : outputManifests) {\n        if (outputManifest.isEmpty()) {\n            continue;\n        }\n        JSModuleGraph graph \u003d compiler.getModuleGraph();\n        if (shouldGenerateManifestPerModule(outputManifest)) {\n            Iterable\u003cJSModule\u003e modules \u003d graph.getAllModules();\n            for (JSModule module : modules) {\n                Writer out \u003d fileNameToOutputWriter(expandManifest(module, outputManifest));\n                printManifestTo(module.getInputs(), out);\n                out.close();\n            }\n        } else {\n            Writer out \u003d fileNameToOutputWriter(expandManifest(null, outputManifest));\n            if (graph \u003d\u003d null) {\n                printManifestTo(compiler.getInputsInOrder(), out);\n            } else {\n                printModuleGraphManifestTo(graph, out);\n            }\n            out.close();\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
      "functionStartLine": 1152,
      "functionName": "outputManifest",
      "functionAnnotation": "",
      "functionDoc": "Writes the manifest of all compiler input files that survived\nmanage_closure_dependencies, if requested.\n",
      "diff": "@@ -1,23 +1,28 @@\n private void outputManifest() throws IOException {\n-    String outputManifest \u003d config.outputManifest;\n-    if (Strings.isEmpty(outputManifest)) {\n+    List\u003cString\u003e outputManifests \u003d config.outputManifests;\n+    if (outputManifests.isEmpty()) {\n         return;\n     }\n-    JSModuleGraph graph \u003d compiler.getModuleGraph();\n-    if (shouldGenerateManifestPerModule()) {\n-        Iterable\u003cJSModule\u003e modules \u003d graph.getAllModules();\n-        for (JSModule module : modules) {\n-            Writer out \u003d fileNameToOutputWriter(expandManifest(module));\n-            printManifestTo(module.getInputs(), out);\n+    for (String outputManifest : outputManifests) {\n+        if (outputManifest.isEmpty()) {\n+            continue;\n+        }\n+        JSModuleGraph graph \u003d compiler.getModuleGraph();\n+        if (shouldGenerateManifestPerModule(outputManifest)) {\n+            Iterable\u003cJSModule\u003e modules \u003d graph.getAllModules();\n+            for (JSModule module : modules) {\n+                Writer out \u003d fileNameToOutputWriter(expandManifest(module, outputManifest));\n+                printManifestTo(module.getInputs(), out);\n+                out.close();\n+            }\n+        } else {\n+            Writer out \u003d fileNameToOutputWriter(expandManifest(null, outputManifest));\n+            if (graph \u003d\u003d null) {\n+                printManifestTo(compiler.getInputsInOrder(), out);\n+            } else {\n+                printModuleGraphManifestTo(graph, out);\n+            }\n             out.close();\n         }\n-    } else {\n-        Writer out \u003d fileNameToOutputWriter(expandManifest(null));\n-        if (graph \u003d\u003d null) {\n-            printManifestTo(compiler.getInputsInOrder(), out);\n-        } else {\n-            printModuleGraphManifestTo(graph, out);\n-        }\n-        out.close();\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4cede4f156740b7ce93d92d824066e9a42257541": {
      "type": "Ybodychange",
      "commitMessage": "\nUnify output encoding for real this time\nFixes issue 224.\n\nRevision created by MOE tool push_codebase.\n\nR\u003djohnlenz\nDELTA\u003d39  (5 added, 5 deleted, 29 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d196345\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@394 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/30/10, 4:16 PM",
      "commitName": "4cede4f156740b7ce93d92d824066e9a42257541",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "8/27/10, 3:52 PM",
      "commitNameOld": "e152ec001d2c6a9bbd6e0d9443552371d11e461f",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 3.02,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "private void outputManifest() throws IOException {\n    String outputManifest \u003d config.outputManifest;\n    if (Strings.isEmpty(outputManifest)) {\n        return;\n    }\n    JSModuleGraph graph \u003d compiler.getModuleGraph();\n    if (shouldGenerateManifestPerModule()) {\n        Iterable\u003cJSModule\u003e modules \u003d graph.getAllModules();\n        for (JSModule module : modules) {\n            Writer out \u003d fileNameToOutputWriter(expandManifest(module));\n            printManifestTo(module.getInputs(), out);\n            out.close();\n        }\n    } else {\n        Writer out \u003d fileNameToOutputWriter(expandManifest(null));\n        if (graph \u003d\u003d null) {\n            printManifestTo(compiler.getInputsInOrder(), out);\n        } else {\n            printModuleGraphManifestTo(graph, out);\n        }\n        out.close();\n    }\n}",
      "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
      "functionStartLine": 1050,
      "functionName": "outputManifest",
      "functionAnnotation": "",
      "functionDoc": "Writes the manifest of all compiler input files that survived\nmanage_closure_dependencies, if requested.\n",
      "diff": "@@ -1,23 +1,23 @@\n private void outputManifest() throws IOException {\n     String outputManifest \u003d config.outputManifest;\n     if (Strings.isEmpty(outputManifest)) {\n         return;\n     }\n     JSModuleGraph graph \u003d compiler.getModuleGraph();\n     if (shouldGenerateManifestPerModule()) {\n         Iterable\u003cJSModule\u003e modules \u003d graph.getAllModules();\n         for (JSModule module : modules) {\n-            Writer out \u003d toWriter(expandManifest(module));\n+            Writer out \u003d fileNameToOutputWriter(expandManifest(module));\n             printManifestTo(module.getInputs(), out);\n             out.close();\n         }\n     } else {\n-        Writer out \u003d toWriter(expandManifest(null));\n+        Writer out \u003d fileNameToOutputWriter(expandManifest(null));\n         if (graph \u003d\u003d null) {\n             printManifestTo(compiler.getInputsInOrder(), out);\n         } else {\n             printModuleGraphManifestTo(graph, out);\n         }\n         out.close();\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "82a9956c6337d2f5d4a94ebe624d64faa54d9182": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/07/09 08:36:29 by nicksantos\n\n        when injecting param checks, do not inject them before any function\n        declarations, because that will break normalization constraints.\n\n        R\u003djohnlenz\n        DELTA\u003d22  (18 added, 0 deleted, 4 changed)\n\nChange on 2010/07/09 09:36:54 by johnlenz\n\n        Prefer FileWriter to PrintStream when charset translation isn\u0027t needed.\n\n        R\u003dacleung\n        DELTA\u003d68  (13 added, 2 deleted, 53 changed)\n\nChange on 2010/07/09 10:54:42 by nicksantos\n\n        our mechanism for injecting boilerplate does not work\n        for code that uses @const externs. So just don\u0027t use\n        any @const externs.\n\n        R\u003djohnlenz\n        DELTA\u003d3  (1 added, 0 deleted, 2 changed)\n\nChange on 2010/07/09 11:30:29 by nicksantos\n\n        Scan functional properties of object literals for invalid use\n        of \"this\".\n        Fixes issue 182.\n\n        R\u003dacleung\n        DELTA\u003d21  (19 added, 0 deleted, 2 changed)\n\nChange on 2010/07/09 12:40:16 by dcc\n\n        Separate pass instance for peephole preprocessing.\n        Now that I\u0027m writing instructions for how people can add their own\n        peephole passes, I want to make sure that the preprocessing\n        peephole optimizations that relies on don\u0027t get disturbed.\n\n        R\u003djohnlenz\n        DELTA\u003d18  (15 added, 0 deleted, 3 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d49008\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@270 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/9/10, 4:02 PM",
      "commitName": "82a9956c6337d2f5d4a94ebe624d64faa54d9182",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "7/8/10, 5:15 PM",
      "commitNameOld": "0c8a0c53b2124d05b017a63bdbc720a57c89ead2",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 0.95,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private void outputManifest() throws IOException {\n    String outputManifest \u003d config.outputManifest;\n    if (Strings.isEmpty(outputManifest)) {\n        return;\n    }\n    JSModuleGraph graph \u003d compiler.getModuleGraph();\n    if (shouldGenerateManifestPerModule()) {\n        Iterable\u003cJSModule\u003e modules \u003d graph.getAllModules();\n        for (JSModule module : modules) {\n            Writer out \u003d toWriter(expandManifest(module));\n            printManifestTo(module.getInputs(), out);\n            out.close();\n        }\n    } else {\n        Writer out \u003d toWriter(expandManifest(null));\n        if (graph \u003d\u003d null) {\n            printManifestTo(compiler.getInputsInOrder(), out);\n        } else {\n            printModuleGraphManifestTo(graph, out);\n        }\n        out.close();\n    }\n}",
      "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
      "functionStartLine": 963,
      "functionName": "outputManifest",
      "functionAnnotation": "",
      "functionDoc": "Writes the manifest of all compiler input files that survived\nmanage_closure_dependencies, if requested.\n",
      "diff": "@@ -1,23 +1,23 @@\n private void outputManifest() throws IOException {\n     String outputManifest \u003d config.outputManifest;\n     if (Strings.isEmpty(outputManifest)) {\n         return;\n     }\n     JSModuleGraph graph \u003d compiler.getModuleGraph();\n     if (shouldGenerateManifestPerModule()) {\n         Iterable\u003cJSModule\u003e modules \u003d graph.getAllModules();\n         for (JSModule module : modules) {\n-            PrintStream out \u003d toPrintStream(expandManifest(module));\n+            Writer out \u003d toWriter(expandManifest(module));\n             printManifestTo(module.getInputs(), out);\n             out.close();\n         }\n     } else {\n-        PrintStream out \u003d toPrintStream(expandManifest(null));\n+        Writer out \u003d toWriter(expandManifest(null));\n         if (graph \u003d\u003d null) {\n             printManifestTo(compiler.getInputsInOrder(), out);\n         } else {\n             printModuleGraphManifestTo(graph, out);\n         }\n         out.close();\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0c8a0c53b2124d05b017a63bdbc720a57c89ead2": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/07/08 09:27:35 by nicksantos\n\n\tget rid of spurious inGlobalScope check.\n\n\tR\u003dacleung\n\tDELTA\u003d2  (0 added, 1 deleted, 1 changed)\n\nChange on 2010/07/08 13:22:45 by dcc\n\n\tReplace direct references to stripped types with \u0027void 0\u0027.\n\n\tR\u003dnicksantos\n\tDELTA\u003d107  (100 added, 0 deleted, 7 changed)\n\nChange on 2010/07/08 13:28:47 by nicksantos\n\n\tReplicate blaze\u0027s manifest file for modules.\n\n\tR\u003djschorr\n\tDELTA\u003d121  (105 added, 1 deleted, 15 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d48004\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@267 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/8/10, 5:15 PM",
      "commitName": "0c8a0c53b2124d05b017a63bdbc720a57c89ead2",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "7/8/10, 4:28 PM",
      "commitNameOld": "6a94702f5cf769973528adc8b3dc3e9cf56277c8",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void outputManifest() throws IOException {\n    String outputManifest \u003d config.outputManifest;\n    if (Strings.isEmpty(outputManifest)) {\n        return;\n    }\n    JSModuleGraph graph \u003d compiler.getModuleGraph();\n    if (shouldGenerateManifestPerModule()) {\n        Iterable\u003cJSModule\u003e modules \u003d graph.getAllModules();\n        for (JSModule module : modules) {\n            PrintStream out \u003d toPrintStream(expandManifest(module));\n            printManifestTo(module.getInputs(), out);\n            out.close();\n        }\n    } else {\n        PrintStream out \u003d toPrintStream(expandManifest(null));\n        if (graph \u003d\u003d null) {\n            printManifestTo(compiler.getInputsInOrder(), out);\n        } else {\n            printModuleGraphManifestTo(graph, out);\n        }\n        out.close();\n    }\n}",
      "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
      "functionStartLine": 961,
      "functionName": "outputManifest",
      "functionAnnotation": "",
      "functionDoc": "Writes the manifest of all compiler input files that survived\nmanage_closure_dependencies, if requested.\n",
      "diff": "@@ -1,14 +1,23 @@\n private void outputManifest() throws IOException {\n     String outputManifest \u003d config.outputManifest;\n     if (Strings.isEmpty(outputManifest)) {\n         return;\n     }\n+    JSModuleGraph graph \u003d compiler.getModuleGraph();\n     if (shouldGenerateManifestPerModule()) {\n-        Iterable\u003cJSModule\u003e modules \u003d compiler.getModuleGraph().getAllModules();\n+        Iterable\u003cJSModule\u003e modules \u003d graph.getAllModules();\n         for (JSModule module : modules) {\n-            printManifestTo(module.getInputs(), expandManifest(module));\n+            PrintStream out \u003d toPrintStream(expandManifest(module));\n+            printManifestTo(module.getInputs(), out);\n+            out.close();\n         }\n     } else {\n-        printManifestTo(compiler.getInputsInOrder(), expandManifest(null));\n+        PrintStream out \u003d toPrintStream(expandManifest(null));\n+        if (graph \u003d\u003d null) {\n+            printManifestTo(compiler.getInputsInOrder(), out);\n+        } else {\n+            printModuleGraphManifestTo(graph, out);\n+        }\n+        out.close();\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "260f0ffc9243ef15bd17e324c9cf7e2dfac9cc6a": {
      "type": "Yintroduced",
      "commitMessage": "\nChange on 2010/05/13 by nick\n\n        add an --output_manifest flag.\n\n        R\u003djoey\n        DELTA\u003d112  (107 added, 0 deleted, 5 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2002\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@210 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/13/10, 5:34 PM",
      "commitName": "260f0ffc9243ef15bd17e324c9cf7e2dfac9cc6a",
      "commitAuthor": "Nicholas.J.Santos",
      "diff": "@@ -0,0 +1,14 @@\n+private void outputManifest() throws IOException {\n+    String outputManifest \u003d config.outputManifest;\n+    if (Strings.isEmpty(outputManifest)) {\n+        return;\n+    }\n+    if (shouldGenerateManifestPerModule()) {\n+        Iterable\u003cJSModule\u003e modules \u003d compiler.getModuleGraph().getAllModules();\n+        for (JSModule module : modules) {\n+            printManifestTo(module.getInputs(), expandManifest(module));\n+        }\n+    } else {\n+        printManifestTo(compiler.getInputsInOrder(), expandManifest(null));\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void outputManifest() throws IOException {\n    String outputManifest \u003d config.outputManifest;\n    if (Strings.isEmpty(outputManifest)) {\n        return;\n    }\n    if (shouldGenerateManifestPerModule()) {\n        Iterable\u003cJSModule\u003e modules \u003d compiler.getModuleGraph().getAllModules();\n        for (JSModule module : modules) {\n            printManifestTo(module.getInputs(), expandManifest(module));\n        }\n    } else {\n        printManifestTo(compiler.getInputsInOrder(), expandManifest(null));\n    }\n}",
      "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
      "functionStartLine": 941,
      "functionName": "outputManifest",
      "functionAnnotation": "",
      "functionDoc": "Writes the manifest of all compiler input files that survived\nmanage_closure_dependencies, if requested.\n"
    }
  }
}