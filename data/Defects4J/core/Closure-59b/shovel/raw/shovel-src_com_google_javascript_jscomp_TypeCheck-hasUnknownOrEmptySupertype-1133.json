{
  "origin": "codeshovel",
  "repositoryName": "Closure-59b",
  "repositoryPath": "/tmp/Closure-59b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TypeCheck.java",
  "functionName": "hasUnknownOrEmptySupertype",
  "functionId": "hasUnknownOrEmptySupertype___ctor-FunctionType",
  "sourceFilePath": "src/com/google/javascript/jscomp/TypeCheck.java",
  "functionAnnotation": "",
  "functionDoc": "Given a constructor or an interface type, find out whether the unknown\ntype is a supertype of the current type.\n",
  "functionStartLine": 1133,
  "functionEndLine": 1155,
  "numCommitsSeen": 139,
  "timeTaken": 8318,
  "changeHistory": [
    "043a352c2e85815a90a1926d112902d924bab6c1",
    "11bd742011d67590031dba6e9d1f7186393b38a0",
    "6dbca87c463d8a1e229a0d92d5cdf92247fdefde",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "043a352c2e85815a90a1926d112902d924bab6c1": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yrename,Yparameterchange)",
    "11bd742011d67590031dba6e9d1f7186393b38a0": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yrename,Yparameterchange)",
    "6dbca87c463d8a1e229a0d92d5cdf92247fdefde": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yrename,Yparameterchange)",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "043a352c2e85815a90a1926d112902d924bab6c1": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yrename,Yparameterchange)",
      "commitMessage": "\nWhen we can\u0027t find a forward-declared type,\nthat type should resolve to an empty type.\nThis ensures that if someone tries to pass a param or return\nvalue to it, they get a type warning.\nTry #3\n!!!\n\nR\u003djohnlenz\nDELTA\u003d534  (451 added, 37 deleted, 46 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d362\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@731 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/26/11, 8:30 AM",
      "commitName": "043a352c2e85815a90a1926d112902d924bab6c1",
      "commitAuthor": "nicksantos@google.com",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "\nWhen we can\u0027t find a forward-declared type,\nthat type should resolve to an empty type.\nThis ensures that if someone tries to pass a param or return\nvalue to it, they get a type warning.\nTry #3\n!!!\n\nR\u003djohnlenz\nDELTA\u003d534  (451 added, 37 deleted, 46 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d362\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@731 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/26/11, 8:30 AM",
          "commitName": "043a352c2e85815a90a1926d112902d924bab6c1",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "1/25/11, 2:14 PM",
          "commitNameOld": "6ee4f24898632726e63ade4b42636b18e1df6aa7",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 0.76,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private static boolean hasUnknownOrEmptySupertype(FunctionType ctor) {\n    Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());\n    Preconditions.checkArgument(!ctor.isUnknownType());\n    while (true) {\n        ObjectType maybeSuperInstanceType \u003d ctor.getPrototype().getImplicitPrototype();\n        if (maybeSuperInstanceType \u003d\u003d null) {\n            return false;\n        }\n        if (maybeSuperInstanceType.isUnknownType() || maybeSuperInstanceType.isEmptyType()) {\n            return true;\n        }\n        ctor \u003d maybeSuperInstanceType.getConstructor();\n        if (ctor \u003d\u003d null) {\n            return false;\n        }\n        Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());\n    }\n}",
          "path": "src/com/google/javascript/jscomp/TypeCheck.java",
          "functionStartLine": 1040,
          "functionName": "hasUnknownOrEmptySupertype",
          "functionAnnotation": "",
          "functionDoc": "Given a constructor or an interface type, find out whether the unknown\ntype is a supertype of the current type.\n",
          "diff": "@@ -1,19 +1,18 @@\n-public boolean hasUnknownSupertype() {\n-    Preconditions.checkArgument(isConstructor() || isInterface());\n-    Preconditions.checkArgument(!this.isUnknownType());\n-    FunctionType ctor \u003d this;\n+private static boolean hasUnknownOrEmptySupertype(FunctionType ctor) {\n+    Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());\n+    Preconditions.checkArgument(!ctor.isUnknownType());\n     while (true) {\n         ObjectType maybeSuperInstanceType \u003d ctor.getPrototype().getImplicitPrototype();\n         if (maybeSuperInstanceType \u003d\u003d null) {\n             return false;\n         }\n-        if (maybeSuperInstanceType.isUnknownType()) {\n+        if (maybeSuperInstanceType.isUnknownType() || maybeSuperInstanceType.isEmptyType()) {\n             return true;\n         }\n         ctor \u003d maybeSuperInstanceType.getConstructor();\n         if (ctor \u003d\u003d null) {\n             return false;\n         }\n         Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/com/google/javascript/rhino/jstype/FunctionType.java",
            "newPath": "src/com/google/javascript/jscomp/TypeCheck.java",
            "oldMethodName": "hasUnknownSupertype",
            "newMethodName": "hasUnknownOrEmptySupertype"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "\nWhen we can\u0027t find a forward-declared type,\nthat type should resolve to an empty type.\nThis ensures that if someone tries to pass a param or return\nvalue to it, they get a type warning.\nTry #3\n!!!\n\nR\u003djohnlenz\nDELTA\u003d534  (451 added, 37 deleted, 46 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d362\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@731 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/26/11, 8:30 AM",
          "commitName": "043a352c2e85815a90a1926d112902d924bab6c1",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "1/25/11, 2:14 PM",
          "commitNameOld": "6ee4f24898632726e63ade4b42636b18e1df6aa7",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 0.76,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private static boolean hasUnknownOrEmptySupertype(FunctionType ctor) {\n    Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());\n    Preconditions.checkArgument(!ctor.isUnknownType());\n    while (true) {\n        ObjectType maybeSuperInstanceType \u003d ctor.getPrototype().getImplicitPrototype();\n        if (maybeSuperInstanceType \u003d\u003d null) {\n            return false;\n        }\n        if (maybeSuperInstanceType.isUnknownType() || maybeSuperInstanceType.isEmptyType()) {\n            return true;\n        }\n        ctor \u003d maybeSuperInstanceType.getConstructor();\n        if (ctor \u003d\u003d null) {\n            return false;\n        }\n        Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());\n    }\n}",
          "path": "src/com/google/javascript/jscomp/TypeCheck.java",
          "functionStartLine": 1040,
          "functionName": "hasUnknownOrEmptySupertype",
          "functionAnnotation": "",
          "functionDoc": "Given a constructor or an interface type, find out whether the unknown\ntype is a supertype of the current type.\n",
          "diff": "@@ -1,19 +1,18 @@\n-public boolean hasUnknownSupertype() {\n-    Preconditions.checkArgument(isConstructor() || isInterface());\n-    Preconditions.checkArgument(!this.isUnknownType());\n-    FunctionType ctor \u003d this;\n+private static boolean hasUnknownOrEmptySupertype(FunctionType ctor) {\n+    Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());\n+    Preconditions.checkArgument(!ctor.isUnknownType());\n     while (true) {\n         ObjectType maybeSuperInstanceType \u003d ctor.getPrototype().getImplicitPrototype();\n         if (maybeSuperInstanceType \u003d\u003d null) {\n             return false;\n         }\n-        if (maybeSuperInstanceType.isUnknownType()) {\n+        if (maybeSuperInstanceType.isUnknownType() || maybeSuperInstanceType.isEmptyType()) {\n             return true;\n         }\n         ctor \u003d maybeSuperInstanceType.getConstructor();\n         if (ctor \u003d\u003d null) {\n             return false;\n         }\n         Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[private, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nWhen we can\u0027t find a forward-declared type,\nthat type should resolve to an empty type.\nThis ensures that if someone tries to pass a param or return\nvalue to it, they get a type warning.\nTry #3\n!!!\n\nR\u003djohnlenz\nDELTA\u003d534  (451 added, 37 deleted, 46 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d362\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@731 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/26/11, 8:30 AM",
          "commitName": "043a352c2e85815a90a1926d112902d924bab6c1",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "1/25/11, 2:14 PM",
          "commitNameOld": "6ee4f24898632726e63ade4b42636b18e1df6aa7",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 0.76,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private static boolean hasUnknownOrEmptySupertype(FunctionType ctor) {\n    Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());\n    Preconditions.checkArgument(!ctor.isUnknownType());\n    while (true) {\n        ObjectType maybeSuperInstanceType \u003d ctor.getPrototype().getImplicitPrototype();\n        if (maybeSuperInstanceType \u003d\u003d null) {\n            return false;\n        }\n        if (maybeSuperInstanceType.isUnknownType() || maybeSuperInstanceType.isEmptyType()) {\n            return true;\n        }\n        ctor \u003d maybeSuperInstanceType.getConstructor();\n        if (ctor \u003d\u003d null) {\n            return false;\n        }\n        Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());\n    }\n}",
          "path": "src/com/google/javascript/jscomp/TypeCheck.java",
          "functionStartLine": 1040,
          "functionName": "hasUnknownOrEmptySupertype",
          "functionAnnotation": "",
          "functionDoc": "Given a constructor or an interface type, find out whether the unknown\ntype is a supertype of the current type.\n",
          "diff": "@@ -1,19 +1,18 @@\n-public boolean hasUnknownSupertype() {\n-    Preconditions.checkArgument(isConstructor() || isInterface());\n-    Preconditions.checkArgument(!this.isUnknownType());\n-    FunctionType ctor \u003d this;\n+private static boolean hasUnknownOrEmptySupertype(FunctionType ctor) {\n+    Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());\n+    Preconditions.checkArgument(!ctor.isUnknownType());\n     while (true) {\n         ObjectType maybeSuperInstanceType \u003d ctor.getPrototype().getImplicitPrototype();\n         if (maybeSuperInstanceType \u003d\u003d null) {\n             return false;\n         }\n-        if (maybeSuperInstanceType.isUnknownType()) {\n+        if (maybeSuperInstanceType.isUnknownType() || maybeSuperInstanceType.isEmptyType()) {\n             return true;\n         }\n         ctor \u003d maybeSuperInstanceType.getConstructor();\n         if (ctor \u003d\u003d null) {\n             return false;\n         }\n         Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yrename",
          "commitMessage": "\nWhen we can\u0027t find a forward-declared type,\nthat type should resolve to an empty type.\nThis ensures that if someone tries to pass a param or return\nvalue to it, they get a type warning.\nTry #3\n!!!\n\nR\u003djohnlenz\nDELTA\u003d534  (451 added, 37 deleted, 46 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d362\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@731 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/26/11, 8:30 AM",
          "commitName": "043a352c2e85815a90a1926d112902d924bab6c1",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "1/25/11, 2:14 PM",
          "commitNameOld": "6ee4f24898632726e63ade4b42636b18e1df6aa7",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 0.76,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private static boolean hasUnknownOrEmptySupertype(FunctionType ctor) {\n    Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());\n    Preconditions.checkArgument(!ctor.isUnknownType());\n    while (true) {\n        ObjectType maybeSuperInstanceType \u003d ctor.getPrototype().getImplicitPrototype();\n        if (maybeSuperInstanceType \u003d\u003d null) {\n            return false;\n        }\n        if (maybeSuperInstanceType.isUnknownType() || maybeSuperInstanceType.isEmptyType()) {\n            return true;\n        }\n        ctor \u003d maybeSuperInstanceType.getConstructor();\n        if (ctor \u003d\u003d null) {\n            return false;\n        }\n        Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());\n    }\n}",
          "path": "src/com/google/javascript/jscomp/TypeCheck.java",
          "functionStartLine": 1040,
          "functionName": "hasUnknownOrEmptySupertype",
          "functionAnnotation": "",
          "functionDoc": "Given a constructor or an interface type, find out whether the unknown\ntype is a supertype of the current type.\n",
          "diff": "@@ -1,19 +1,18 @@\n-public boolean hasUnknownSupertype() {\n-    Preconditions.checkArgument(isConstructor() || isInterface());\n-    Preconditions.checkArgument(!this.isUnknownType());\n-    FunctionType ctor \u003d this;\n+private static boolean hasUnknownOrEmptySupertype(FunctionType ctor) {\n+    Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());\n+    Preconditions.checkArgument(!ctor.isUnknownType());\n     while (true) {\n         ObjectType maybeSuperInstanceType \u003d ctor.getPrototype().getImplicitPrototype();\n         if (maybeSuperInstanceType \u003d\u003d null) {\n             return false;\n         }\n-        if (maybeSuperInstanceType.isUnknownType()) {\n+        if (maybeSuperInstanceType.isUnknownType() || maybeSuperInstanceType.isEmptyType()) {\n             return true;\n         }\n         ctor \u003d maybeSuperInstanceType.getConstructor();\n         if (ctor \u003d\u003d null) {\n             return false;\n         }\n         Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "hasUnknownSupertype",
            "newValue": "hasUnknownOrEmptySupertype"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "\nWhen we can\u0027t find a forward-declared type,\nthat type should resolve to an empty type.\nThis ensures that if someone tries to pass a param or return\nvalue to it, they get a type warning.\nTry #3\n!!!\n\nR\u003djohnlenz\nDELTA\u003d534  (451 added, 37 deleted, 46 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d362\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@731 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/26/11, 8:30 AM",
          "commitName": "043a352c2e85815a90a1926d112902d924bab6c1",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "1/25/11, 2:14 PM",
          "commitNameOld": "6ee4f24898632726e63ade4b42636b18e1df6aa7",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 0.76,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private static boolean hasUnknownOrEmptySupertype(FunctionType ctor) {\n    Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());\n    Preconditions.checkArgument(!ctor.isUnknownType());\n    while (true) {\n        ObjectType maybeSuperInstanceType \u003d ctor.getPrototype().getImplicitPrototype();\n        if (maybeSuperInstanceType \u003d\u003d null) {\n            return false;\n        }\n        if (maybeSuperInstanceType.isUnknownType() || maybeSuperInstanceType.isEmptyType()) {\n            return true;\n        }\n        ctor \u003d maybeSuperInstanceType.getConstructor();\n        if (ctor \u003d\u003d null) {\n            return false;\n        }\n        Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());\n    }\n}",
          "path": "src/com/google/javascript/jscomp/TypeCheck.java",
          "functionStartLine": 1040,
          "functionName": "hasUnknownOrEmptySupertype",
          "functionAnnotation": "",
          "functionDoc": "Given a constructor or an interface type, find out whether the unknown\ntype is a supertype of the current type.\n",
          "diff": "@@ -1,19 +1,18 @@\n-public boolean hasUnknownSupertype() {\n-    Preconditions.checkArgument(isConstructor() || isInterface());\n-    Preconditions.checkArgument(!this.isUnknownType());\n-    FunctionType ctor \u003d this;\n+private static boolean hasUnknownOrEmptySupertype(FunctionType ctor) {\n+    Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());\n+    Preconditions.checkArgument(!ctor.isUnknownType());\n     while (true) {\n         ObjectType maybeSuperInstanceType \u003d ctor.getPrototype().getImplicitPrototype();\n         if (maybeSuperInstanceType \u003d\u003d null) {\n             return false;\n         }\n-        if (maybeSuperInstanceType.isUnknownType()) {\n+        if (maybeSuperInstanceType.isUnknownType() || maybeSuperInstanceType.isEmptyType()) {\n             return true;\n         }\n         ctor \u003d maybeSuperInstanceType.getConstructor();\n         if (ctor \u003d\u003d null) {\n             return false;\n         }\n         Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[ctor-FunctionType]"
          }
        }
      ]
    },
    "11bd742011d67590031dba6e9d1f7186393b38a0": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yrename,Yparameterchange)",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nbreaks contacts\n\n*** Original change description ***\n\nWhen we can\u0027t find a forward-declared type,\nthat type should resolve to an empty type.\nThis ensures that if someone tries to pass a param or return\nvalue to it, they get a type warning.\n\nDELTA\u003d461  (37 added, 385 deleted, 39 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d302\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@703 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/18/11, 5:02 PM",
      "commitName": "11bd742011d67590031dba6e9d1f7186393b38a0",
      "commitAuthor": "nicksantos@google.com",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nbreaks contacts\n\n*** Original change description ***\n\nWhen we can\u0027t find a forward-declared type,\nthat type should resolve to an empty type.\nThis ensures that if someone tries to pass a param or return\nvalue to it, they get a type warning.\n\nDELTA\u003d461  (37 added, 385 deleted, 39 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d302\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@703 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/18/11, 5:02 PM",
          "commitName": "11bd742011d67590031dba6e9d1f7186393b38a0",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "1/18/11, 3:28 PM",
          "commitNameOld": "6dbca87c463d8a1e229a0d92d5cdf92247fdefde",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public boolean hasUnknownSupertype() {\n    Preconditions.checkArgument(isConstructor() || isInterface());\n    Preconditions.checkArgument(!this.isUnknownType());\n    FunctionType ctor \u003d this;\n    while (true) {\n        ObjectType maybeSuperInstanceType \u003d ctor.getPrototype().getImplicitPrototype();\n        if (maybeSuperInstanceType \u003d\u003d null) {\n            return false;\n        }\n        if (maybeSuperInstanceType.isUnknownType()) {\n            return true;\n        }\n        ctor \u003d maybeSuperInstanceType.getConstructor();\n        if (ctor \u003d\u003d null) {\n            return false;\n        }\n        Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());\n    }\n}",
          "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
          "functionStartLine": 615,
          "functionName": "hasUnknownSupertype",
          "functionAnnotation": "",
          "functionDoc": "Given a constructor or an interface type, find out whether the unknown\ntype is a supertype of the current type.\n",
          "diff": "@@ -1,18 +1,19 @@\n-private static boolean hasUnknownOrEmptySupertype(FunctionType ctor) {\n-    Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());\n-    Preconditions.checkArgument(!ctor.isUnknownType());\n+public boolean hasUnknownSupertype() {\n+    Preconditions.checkArgument(isConstructor() || isInterface());\n+    Preconditions.checkArgument(!this.isUnknownType());\n+    FunctionType ctor \u003d this;\n     while (true) {\n         ObjectType maybeSuperInstanceType \u003d ctor.getPrototype().getImplicitPrototype();\n         if (maybeSuperInstanceType \u003d\u003d null) {\n             return false;\n         }\n-        if (maybeSuperInstanceType.isUnknownType() || maybeSuperInstanceType.isEmptyType()) {\n+        if (maybeSuperInstanceType.isUnknownType()) {\n             return true;\n         }\n         ctor \u003d maybeSuperInstanceType.getConstructor();\n         if (ctor \u003d\u003d null) {\n             return false;\n         }\n         Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/com/google/javascript/jscomp/TypeCheck.java",
            "newPath": "src/com/google/javascript/rhino/jstype/FunctionType.java",
            "oldMethodName": "hasUnknownOrEmptySupertype",
            "newMethodName": "hasUnknownSupertype"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nbreaks contacts\n\n*** Original change description ***\n\nWhen we can\u0027t find a forward-declared type,\nthat type should resolve to an empty type.\nThis ensures that if someone tries to pass a param or return\nvalue to it, they get a type warning.\n\nDELTA\u003d461  (37 added, 385 deleted, 39 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d302\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@703 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/18/11, 5:02 PM",
          "commitName": "11bd742011d67590031dba6e9d1f7186393b38a0",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "1/18/11, 3:28 PM",
          "commitNameOld": "6dbca87c463d8a1e229a0d92d5cdf92247fdefde",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public boolean hasUnknownSupertype() {\n    Preconditions.checkArgument(isConstructor() || isInterface());\n    Preconditions.checkArgument(!this.isUnknownType());\n    FunctionType ctor \u003d this;\n    while (true) {\n        ObjectType maybeSuperInstanceType \u003d ctor.getPrototype().getImplicitPrototype();\n        if (maybeSuperInstanceType \u003d\u003d null) {\n            return false;\n        }\n        if (maybeSuperInstanceType.isUnknownType()) {\n            return true;\n        }\n        ctor \u003d maybeSuperInstanceType.getConstructor();\n        if (ctor \u003d\u003d null) {\n            return false;\n        }\n        Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());\n    }\n}",
          "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
          "functionStartLine": 615,
          "functionName": "hasUnknownSupertype",
          "functionAnnotation": "",
          "functionDoc": "Given a constructor or an interface type, find out whether the unknown\ntype is a supertype of the current type.\n",
          "diff": "@@ -1,18 +1,19 @@\n-private static boolean hasUnknownOrEmptySupertype(FunctionType ctor) {\n-    Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());\n-    Preconditions.checkArgument(!ctor.isUnknownType());\n+public boolean hasUnknownSupertype() {\n+    Preconditions.checkArgument(isConstructor() || isInterface());\n+    Preconditions.checkArgument(!this.isUnknownType());\n+    FunctionType ctor \u003d this;\n     while (true) {\n         ObjectType maybeSuperInstanceType \u003d ctor.getPrototype().getImplicitPrototype();\n         if (maybeSuperInstanceType \u003d\u003d null) {\n             return false;\n         }\n-        if (maybeSuperInstanceType.isUnknownType() || maybeSuperInstanceType.isEmptyType()) {\n+        if (maybeSuperInstanceType.isUnknownType()) {\n             return true;\n         }\n         ctor \u003d maybeSuperInstanceType.getConstructor();\n         if (ctor \u003d\u003d null) {\n             return false;\n         }\n         Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[private, static]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nbreaks contacts\n\n*** Original change description ***\n\nWhen we can\u0027t find a forward-declared type,\nthat type should resolve to an empty type.\nThis ensures that if someone tries to pass a param or return\nvalue to it, they get a type warning.\n\nDELTA\u003d461  (37 added, 385 deleted, 39 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d302\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@703 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/18/11, 5:02 PM",
          "commitName": "11bd742011d67590031dba6e9d1f7186393b38a0",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "1/18/11, 3:28 PM",
          "commitNameOld": "6dbca87c463d8a1e229a0d92d5cdf92247fdefde",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public boolean hasUnknownSupertype() {\n    Preconditions.checkArgument(isConstructor() || isInterface());\n    Preconditions.checkArgument(!this.isUnknownType());\n    FunctionType ctor \u003d this;\n    while (true) {\n        ObjectType maybeSuperInstanceType \u003d ctor.getPrototype().getImplicitPrototype();\n        if (maybeSuperInstanceType \u003d\u003d null) {\n            return false;\n        }\n        if (maybeSuperInstanceType.isUnknownType()) {\n            return true;\n        }\n        ctor \u003d maybeSuperInstanceType.getConstructor();\n        if (ctor \u003d\u003d null) {\n            return false;\n        }\n        Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());\n    }\n}",
          "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
          "functionStartLine": 615,
          "functionName": "hasUnknownSupertype",
          "functionAnnotation": "",
          "functionDoc": "Given a constructor or an interface type, find out whether the unknown\ntype is a supertype of the current type.\n",
          "diff": "@@ -1,18 +1,19 @@\n-private static boolean hasUnknownOrEmptySupertype(FunctionType ctor) {\n-    Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());\n-    Preconditions.checkArgument(!ctor.isUnknownType());\n+public boolean hasUnknownSupertype() {\n+    Preconditions.checkArgument(isConstructor() || isInterface());\n+    Preconditions.checkArgument(!this.isUnknownType());\n+    FunctionType ctor \u003d this;\n     while (true) {\n         ObjectType maybeSuperInstanceType \u003d ctor.getPrototype().getImplicitPrototype();\n         if (maybeSuperInstanceType \u003d\u003d null) {\n             return false;\n         }\n-        if (maybeSuperInstanceType.isUnknownType() || maybeSuperInstanceType.isEmptyType()) {\n+        if (maybeSuperInstanceType.isUnknownType()) {\n             return true;\n         }\n         ctor \u003d maybeSuperInstanceType.getConstructor();\n         if (ctor \u003d\u003d null) {\n             return false;\n         }\n         Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yrename",
          "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nbreaks contacts\n\n*** Original change description ***\n\nWhen we can\u0027t find a forward-declared type,\nthat type should resolve to an empty type.\nThis ensures that if someone tries to pass a param or return\nvalue to it, they get a type warning.\n\nDELTA\u003d461  (37 added, 385 deleted, 39 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d302\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@703 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/18/11, 5:02 PM",
          "commitName": "11bd742011d67590031dba6e9d1f7186393b38a0",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "1/18/11, 3:28 PM",
          "commitNameOld": "6dbca87c463d8a1e229a0d92d5cdf92247fdefde",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public boolean hasUnknownSupertype() {\n    Preconditions.checkArgument(isConstructor() || isInterface());\n    Preconditions.checkArgument(!this.isUnknownType());\n    FunctionType ctor \u003d this;\n    while (true) {\n        ObjectType maybeSuperInstanceType \u003d ctor.getPrototype().getImplicitPrototype();\n        if (maybeSuperInstanceType \u003d\u003d null) {\n            return false;\n        }\n        if (maybeSuperInstanceType.isUnknownType()) {\n            return true;\n        }\n        ctor \u003d maybeSuperInstanceType.getConstructor();\n        if (ctor \u003d\u003d null) {\n            return false;\n        }\n        Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());\n    }\n}",
          "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
          "functionStartLine": 615,
          "functionName": "hasUnknownSupertype",
          "functionAnnotation": "",
          "functionDoc": "Given a constructor or an interface type, find out whether the unknown\ntype is a supertype of the current type.\n",
          "diff": "@@ -1,18 +1,19 @@\n-private static boolean hasUnknownOrEmptySupertype(FunctionType ctor) {\n-    Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());\n-    Preconditions.checkArgument(!ctor.isUnknownType());\n+public boolean hasUnknownSupertype() {\n+    Preconditions.checkArgument(isConstructor() || isInterface());\n+    Preconditions.checkArgument(!this.isUnknownType());\n+    FunctionType ctor \u003d this;\n     while (true) {\n         ObjectType maybeSuperInstanceType \u003d ctor.getPrototype().getImplicitPrototype();\n         if (maybeSuperInstanceType \u003d\u003d null) {\n             return false;\n         }\n-        if (maybeSuperInstanceType.isUnknownType() || maybeSuperInstanceType.isEmptyType()) {\n+        if (maybeSuperInstanceType.isUnknownType()) {\n             return true;\n         }\n         ctor \u003d maybeSuperInstanceType.getConstructor();\n         if (ctor \u003d\u003d null) {\n             return false;\n         }\n         Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "hasUnknownOrEmptySupertype",
            "newValue": "hasUnknownSupertype"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nbreaks contacts\n\n*** Original change description ***\n\nWhen we can\u0027t find a forward-declared type,\nthat type should resolve to an empty type.\nThis ensures that if someone tries to pass a param or return\nvalue to it, they get a type warning.\n\nDELTA\u003d461  (37 added, 385 deleted, 39 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d302\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@703 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/18/11, 5:02 PM",
          "commitName": "11bd742011d67590031dba6e9d1f7186393b38a0",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "1/18/11, 3:28 PM",
          "commitNameOld": "6dbca87c463d8a1e229a0d92d5cdf92247fdefde",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public boolean hasUnknownSupertype() {\n    Preconditions.checkArgument(isConstructor() || isInterface());\n    Preconditions.checkArgument(!this.isUnknownType());\n    FunctionType ctor \u003d this;\n    while (true) {\n        ObjectType maybeSuperInstanceType \u003d ctor.getPrototype().getImplicitPrototype();\n        if (maybeSuperInstanceType \u003d\u003d null) {\n            return false;\n        }\n        if (maybeSuperInstanceType.isUnknownType()) {\n            return true;\n        }\n        ctor \u003d maybeSuperInstanceType.getConstructor();\n        if (ctor \u003d\u003d null) {\n            return false;\n        }\n        Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());\n    }\n}",
          "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
          "functionStartLine": 615,
          "functionName": "hasUnknownSupertype",
          "functionAnnotation": "",
          "functionDoc": "Given a constructor or an interface type, find out whether the unknown\ntype is a supertype of the current type.\n",
          "diff": "@@ -1,18 +1,19 @@\n-private static boolean hasUnknownOrEmptySupertype(FunctionType ctor) {\n-    Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());\n-    Preconditions.checkArgument(!ctor.isUnknownType());\n+public boolean hasUnknownSupertype() {\n+    Preconditions.checkArgument(isConstructor() || isInterface());\n+    Preconditions.checkArgument(!this.isUnknownType());\n+    FunctionType ctor \u003d this;\n     while (true) {\n         ObjectType maybeSuperInstanceType \u003d ctor.getPrototype().getImplicitPrototype();\n         if (maybeSuperInstanceType \u003d\u003d null) {\n             return false;\n         }\n-        if (maybeSuperInstanceType.isUnknownType() || maybeSuperInstanceType.isEmptyType()) {\n+        if (maybeSuperInstanceType.isUnknownType()) {\n             return true;\n         }\n         ctor \u003d maybeSuperInstanceType.getConstructor();\n         if (ctor \u003d\u003d null) {\n             return false;\n         }\n         Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[ctor-FunctionType]",
            "newValue": "[]"
          }
        }
      ]
    },
    "6dbca87c463d8a1e229a0d92d5cdf92247fdefde": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yrename,Yparameterchange)",
      "commitMessage": "\nWhen we can\u0027t find a forward-declared type,\nthat type should resolve to an empty type.\nThis ensures that if someone tries to pass a param or return\nvalue to it, they get a type warning.\n\nR\u003djohnlenz\nDELTA\u003d461  (385 added, 37 deleted, 39 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d301\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@702 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/18/11, 3:28 PM",
      "commitName": "6dbca87c463d8a1e229a0d92d5cdf92247fdefde",
      "commitAuthor": "nicksantos@google.com",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "\nWhen we can\u0027t find a forward-declared type,\nthat type should resolve to an empty type.\nThis ensures that if someone tries to pass a param or return\nvalue to it, they get a type warning.\n\nR\u003djohnlenz\nDELTA\u003d461  (385 added, 37 deleted, 39 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d301\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@702 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/18/11, 3:28 PM",
          "commitName": "6dbca87c463d8a1e229a0d92d5cdf92247fdefde",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "1/18/11, 12:48 PM",
          "commitNameOld": "7e0ecb47ba5e1f50dc2aefbdf4f20379089f49cd",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 0.11,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private static boolean hasUnknownOrEmptySupertype(FunctionType ctor) {\n    Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());\n    Preconditions.checkArgument(!ctor.isUnknownType());\n    while (true) {\n        ObjectType maybeSuperInstanceType \u003d ctor.getPrototype().getImplicitPrototype();\n        if (maybeSuperInstanceType \u003d\u003d null) {\n            return false;\n        }\n        if (maybeSuperInstanceType.isUnknownType() || maybeSuperInstanceType.isEmptyType()) {\n            return true;\n        }\n        ctor \u003d maybeSuperInstanceType.getConstructor();\n        if (ctor \u003d\u003d null) {\n            return false;\n        }\n        Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());\n    }\n}",
          "path": "src/com/google/javascript/jscomp/TypeCheck.java",
          "functionStartLine": 1040,
          "functionName": "hasUnknownOrEmptySupertype",
          "functionAnnotation": "",
          "functionDoc": "Given a constructor or an interface type, find out whether the unknown\ntype is a supertype of the current type.\n",
          "diff": "@@ -1,19 +1,18 @@\n-public boolean hasUnknownSupertype() {\n-    Preconditions.checkArgument(isConstructor() || isInterface());\n-    Preconditions.checkArgument(!this.isUnknownType());\n-    FunctionType ctor \u003d this;\n+private static boolean hasUnknownOrEmptySupertype(FunctionType ctor) {\n+    Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());\n+    Preconditions.checkArgument(!ctor.isUnknownType());\n     while (true) {\n         ObjectType maybeSuperInstanceType \u003d ctor.getPrototype().getImplicitPrototype();\n         if (maybeSuperInstanceType \u003d\u003d null) {\n             return false;\n         }\n-        if (maybeSuperInstanceType.isUnknownType()) {\n+        if (maybeSuperInstanceType.isUnknownType() || maybeSuperInstanceType.isEmptyType()) {\n             return true;\n         }\n         ctor \u003d maybeSuperInstanceType.getConstructor();\n         if (ctor \u003d\u003d null) {\n             return false;\n         }\n         Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/com/google/javascript/rhino/jstype/FunctionType.java",
            "newPath": "src/com/google/javascript/jscomp/TypeCheck.java",
            "oldMethodName": "hasUnknownSupertype",
            "newMethodName": "hasUnknownOrEmptySupertype"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "\nWhen we can\u0027t find a forward-declared type,\nthat type should resolve to an empty type.\nThis ensures that if someone tries to pass a param or return\nvalue to it, they get a type warning.\n\nR\u003djohnlenz\nDELTA\u003d461  (385 added, 37 deleted, 39 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d301\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@702 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/18/11, 3:28 PM",
          "commitName": "6dbca87c463d8a1e229a0d92d5cdf92247fdefde",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "1/18/11, 12:48 PM",
          "commitNameOld": "7e0ecb47ba5e1f50dc2aefbdf4f20379089f49cd",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 0.11,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private static boolean hasUnknownOrEmptySupertype(FunctionType ctor) {\n    Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());\n    Preconditions.checkArgument(!ctor.isUnknownType());\n    while (true) {\n        ObjectType maybeSuperInstanceType \u003d ctor.getPrototype().getImplicitPrototype();\n        if (maybeSuperInstanceType \u003d\u003d null) {\n            return false;\n        }\n        if (maybeSuperInstanceType.isUnknownType() || maybeSuperInstanceType.isEmptyType()) {\n            return true;\n        }\n        ctor \u003d maybeSuperInstanceType.getConstructor();\n        if (ctor \u003d\u003d null) {\n            return false;\n        }\n        Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());\n    }\n}",
          "path": "src/com/google/javascript/jscomp/TypeCheck.java",
          "functionStartLine": 1040,
          "functionName": "hasUnknownOrEmptySupertype",
          "functionAnnotation": "",
          "functionDoc": "Given a constructor or an interface type, find out whether the unknown\ntype is a supertype of the current type.\n",
          "diff": "@@ -1,19 +1,18 @@\n-public boolean hasUnknownSupertype() {\n-    Preconditions.checkArgument(isConstructor() || isInterface());\n-    Preconditions.checkArgument(!this.isUnknownType());\n-    FunctionType ctor \u003d this;\n+private static boolean hasUnknownOrEmptySupertype(FunctionType ctor) {\n+    Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());\n+    Preconditions.checkArgument(!ctor.isUnknownType());\n     while (true) {\n         ObjectType maybeSuperInstanceType \u003d ctor.getPrototype().getImplicitPrototype();\n         if (maybeSuperInstanceType \u003d\u003d null) {\n             return false;\n         }\n-        if (maybeSuperInstanceType.isUnknownType()) {\n+        if (maybeSuperInstanceType.isUnknownType() || maybeSuperInstanceType.isEmptyType()) {\n             return true;\n         }\n         ctor \u003d maybeSuperInstanceType.getConstructor();\n         if (ctor \u003d\u003d null) {\n             return false;\n         }\n         Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[private, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nWhen we can\u0027t find a forward-declared type,\nthat type should resolve to an empty type.\nThis ensures that if someone tries to pass a param or return\nvalue to it, they get a type warning.\n\nR\u003djohnlenz\nDELTA\u003d461  (385 added, 37 deleted, 39 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d301\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@702 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/18/11, 3:28 PM",
          "commitName": "6dbca87c463d8a1e229a0d92d5cdf92247fdefde",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "1/18/11, 12:48 PM",
          "commitNameOld": "7e0ecb47ba5e1f50dc2aefbdf4f20379089f49cd",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 0.11,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private static boolean hasUnknownOrEmptySupertype(FunctionType ctor) {\n    Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());\n    Preconditions.checkArgument(!ctor.isUnknownType());\n    while (true) {\n        ObjectType maybeSuperInstanceType \u003d ctor.getPrototype().getImplicitPrototype();\n        if (maybeSuperInstanceType \u003d\u003d null) {\n            return false;\n        }\n        if (maybeSuperInstanceType.isUnknownType() || maybeSuperInstanceType.isEmptyType()) {\n            return true;\n        }\n        ctor \u003d maybeSuperInstanceType.getConstructor();\n        if (ctor \u003d\u003d null) {\n            return false;\n        }\n        Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());\n    }\n}",
          "path": "src/com/google/javascript/jscomp/TypeCheck.java",
          "functionStartLine": 1040,
          "functionName": "hasUnknownOrEmptySupertype",
          "functionAnnotation": "",
          "functionDoc": "Given a constructor or an interface type, find out whether the unknown\ntype is a supertype of the current type.\n",
          "diff": "@@ -1,19 +1,18 @@\n-public boolean hasUnknownSupertype() {\n-    Preconditions.checkArgument(isConstructor() || isInterface());\n-    Preconditions.checkArgument(!this.isUnknownType());\n-    FunctionType ctor \u003d this;\n+private static boolean hasUnknownOrEmptySupertype(FunctionType ctor) {\n+    Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());\n+    Preconditions.checkArgument(!ctor.isUnknownType());\n     while (true) {\n         ObjectType maybeSuperInstanceType \u003d ctor.getPrototype().getImplicitPrototype();\n         if (maybeSuperInstanceType \u003d\u003d null) {\n             return false;\n         }\n-        if (maybeSuperInstanceType.isUnknownType()) {\n+        if (maybeSuperInstanceType.isUnknownType() || maybeSuperInstanceType.isEmptyType()) {\n             return true;\n         }\n         ctor \u003d maybeSuperInstanceType.getConstructor();\n         if (ctor \u003d\u003d null) {\n             return false;\n         }\n         Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yrename",
          "commitMessage": "\nWhen we can\u0027t find a forward-declared type,\nthat type should resolve to an empty type.\nThis ensures that if someone tries to pass a param or return\nvalue to it, they get a type warning.\n\nR\u003djohnlenz\nDELTA\u003d461  (385 added, 37 deleted, 39 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d301\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@702 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/18/11, 3:28 PM",
          "commitName": "6dbca87c463d8a1e229a0d92d5cdf92247fdefde",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "1/18/11, 12:48 PM",
          "commitNameOld": "7e0ecb47ba5e1f50dc2aefbdf4f20379089f49cd",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 0.11,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private static boolean hasUnknownOrEmptySupertype(FunctionType ctor) {\n    Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());\n    Preconditions.checkArgument(!ctor.isUnknownType());\n    while (true) {\n        ObjectType maybeSuperInstanceType \u003d ctor.getPrototype().getImplicitPrototype();\n        if (maybeSuperInstanceType \u003d\u003d null) {\n            return false;\n        }\n        if (maybeSuperInstanceType.isUnknownType() || maybeSuperInstanceType.isEmptyType()) {\n            return true;\n        }\n        ctor \u003d maybeSuperInstanceType.getConstructor();\n        if (ctor \u003d\u003d null) {\n            return false;\n        }\n        Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());\n    }\n}",
          "path": "src/com/google/javascript/jscomp/TypeCheck.java",
          "functionStartLine": 1040,
          "functionName": "hasUnknownOrEmptySupertype",
          "functionAnnotation": "",
          "functionDoc": "Given a constructor or an interface type, find out whether the unknown\ntype is a supertype of the current type.\n",
          "diff": "@@ -1,19 +1,18 @@\n-public boolean hasUnknownSupertype() {\n-    Preconditions.checkArgument(isConstructor() || isInterface());\n-    Preconditions.checkArgument(!this.isUnknownType());\n-    FunctionType ctor \u003d this;\n+private static boolean hasUnknownOrEmptySupertype(FunctionType ctor) {\n+    Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());\n+    Preconditions.checkArgument(!ctor.isUnknownType());\n     while (true) {\n         ObjectType maybeSuperInstanceType \u003d ctor.getPrototype().getImplicitPrototype();\n         if (maybeSuperInstanceType \u003d\u003d null) {\n             return false;\n         }\n-        if (maybeSuperInstanceType.isUnknownType()) {\n+        if (maybeSuperInstanceType.isUnknownType() || maybeSuperInstanceType.isEmptyType()) {\n             return true;\n         }\n         ctor \u003d maybeSuperInstanceType.getConstructor();\n         if (ctor \u003d\u003d null) {\n             return false;\n         }\n         Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "hasUnknownSupertype",
            "newValue": "hasUnknownOrEmptySupertype"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "\nWhen we can\u0027t find a forward-declared type,\nthat type should resolve to an empty type.\nThis ensures that if someone tries to pass a param or return\nvalue to it, they get a type warning.\n\nR\u003djohnlenz\nDELTA\u003d461  (385 added, 37 deleted, 39 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d301\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@702 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/18/11, 3:28 PM",
          "commitName": "6dbca87c463d8a1e229a0d92d5cdf92247fdefde",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "1/18/11, 12:48 PM",
          "commitNameOld": "7e0ecb47ba5e1f50dc2aefbdf4f20379089f49cd",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 0.11,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private static boolean hasUnknownOrEmptySupertype(FunctionType ctor) {\n    Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());\n    Preconditions.checkArgument(!ctor.isUnknownType());\n    while (true) {\n        ObjectType maybeSuperInstanceType \u003d ctor.getPrototype().getImplicitPrototype();\n        if (maybeSuperInstanceType \u003d\u003d null) {\n            return false;\n        }\n        if (maybeSuperInstanceType.isUnknownType() || maybeSuperInstanceType.isEmptyType()) {\n            return true;\n        }\n        ctor \u003d maybeSuperInstanceType.getConstructor();\n        if (ctor \u003d\u003d null) {\n            return false;\n        }\n        Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());\n    }\n}",
          "path": "src/com/google/javascript/jscomp/TypeCheck.java",
          "functionStartLine": 1040,
          "functionName": "hasUnknownOrEmptySupertype",
          "functionAnnotation": "",
          "functionDoc": "Given a constructor or an interface type, find out whether the unknown\ntype is a supertype of the current type.\n",
          "diff": "@@ -1,19 +1,18 @@\n-public boolean hasUnknownSupertype() {\n-    Preconditions.checkArgument(isConstructor() || isInterface());\n-    Preconditions.checkArgument(!this.isUnknownType());\n-    FunctionType ctor \u003d this;\n+private static boolean hasUnknownOrEmptySupertype(FunctionType ctor) {\n+    Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());\n+    Preconditions.checkArgument(!ctor.isUnknownType());\n     while (true) {\n         ObjectType maybeSuperInstanceType \u003d ctor.getPrototype().getImplicitPrototype();\n         if (maybeSuperInstanceType \u003d\u003d null) {\n             return false;\n         }\n-        if (maybeSuperInstanceType.isUnknownType()) {\n+        if (maybeSuperInstanceType.isUnknownType() || maybeSuperInstanceType.isEmptyType()) {\n             return true;\n         }\n         ctor \u003d maybeSuperInstanceType.getConstructor();\n         if (ctor \u003d\u003d null) {\n             return false;\n         }\n         Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[ctor-FunctionType]"
          }
        }
      ]
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,19 @@\n+public boolean hasUnknownSupertype() {\n+    Preconditions.checkArgument(isConstructor() || isInterface());\n+    Preconditions.checkArgument(!this.isUnknownType());\n+    FunctionType ctor \u003d this;\n+    while (true) {\n+        ObjectType maybeSuperInstanceType \u003d ctor.getPrototype().getImplicitPrototype();\n+        if (maybeSuperInstanceType \u003d\u003d null) {\n+            return false;\n+        }\n+        if (maybeSuperInstanceType.isUnknownType()) {\n+            return true;\n+        }\n+        ctor \u003d maybeSuperInstanceType.getConstructor();\n+        if (ctor \u003d\u003d null) {\n+            return false;\n+        }\n+        Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "public boolean hasUnknownSupertype() {\n    Preconditions.checkArgument(isConstructor() || isInterface());\n    Preconditions.checkArgument(!this.isUnknownType());\n    FunctionType ctor \u003d this;\n    while (true) {\n        ObjectType maybeSuperInstanceType \u003d ctor.getPrototype().getImplicitPrototype();\n        if (maybeSuperInstanceType \u003d\u003d null) {\n            return false;\n        }\n        if (maybeSuperInstanceType.isUnknownType()) {\n            return true;\n        }\n        ctor \u003d maybeSuperInstanceType.getConstructor();\n        if (ctor \u003d\u003d null) {\n            return false;\n        }\n        Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());\n    }\n}",
      "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
      "functionStartLine": 554,
      "functionName": "hasUnknownSupertype",
      "functionAnnotation": "",
      "functionDoc": "Given a constructor or an interface type, find out whether the unknown\ntype is a supertype of the current type.\n"
    }
  }
}