{
  "origin": "codeshovel",
  "repositoryName": "Closure-59b",
  "repositoryPath": "/tmp/Closure-59b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CheckAccessControls.java",
  "functionName": "checkConstantProperty",
  "functionId": "checkConstantProperty___t-NodeTraversal__getprop-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/CheckAccessControls.java",
  "functionAnnotation": "",
  "functionDoc": "Determines whether the given property with @const tag got reassigned\n\n@param t The current traversal.\n@param getprop The getprop node.\n",
  "functionStartLine": 355,
  "functionEndLine": 410,
  "numCommitsSeen": 14,
  "timeTaken": 1010,
  "changeHistory": [
    "d3be4eec85ac05af0aff996ac8b03cc8ff861b8e",
    "0dcb6c9c4145839c667faecaedb9411a8a5b8ce0",
    "bd59bbcf79648c23e86f3625efc98ff646c23495"
  ],
  "changeHistoryShort": {
    "d3be4eec85ac05af0aff996ac8b03cc8ff861b8e": "Ybodychange",
    "0dcb6c9c4145839c667faecaedb9411a8a5b8ce0": "Ybodychange",
    "bd59bbcf79648c23e86f3625efc98ff646c23495": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d3be4eec85ac05af0aff996ac8b03cc8ff861b8e": {
      "type": "Ybodychange",
      "commitMessage": "\nMake sure that deleting a @const property is a compiler error\n\nR\u003dzhuyi\nDELTA\u003d23  (22 added, 0 deleted, 1 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2253\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1174 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/13/11, 8:58 AM",
      "commitName": "d3be4eec85ac05af0aff996ac8b03cc8ff861b8e",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "6/9/11, 4:02 PM",
      "commitNameOld": "0dcb6c9c4145839c667faecaedb9411a8a5b8ce0",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 3.71,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "private void checkConstantProperty(NodeTraversal t, Node getprop) {\n    Node parent \u003d getprop.getParent();\n    boolean isDelete \u003d parent.getType() \u003d\u003d Token.DELPROP;\n    if (!(NodeUtil.isAssignmentOp(parent) \u0026\u0026 parent.getFirstChild() \u003d\u003d getprop) \u0026\u0026 (parent.getType() !\u003d Token.INC) \u0026\u0026 (parent.getType() !\u003d Token.DEC) \u0026\u0026 !isDelete) {\n        return;\n    }\n    ObjectType objectType \u003d ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n    String propertyName \u003d getprop.getLastChild().getString();\n    boolean isConstant \u003d isPropertyDeclaredConstant(objectType, propertyName);\n    if (isConstant) {\n        if (isDelete) {\n            compiler.report(t.makeError(getprop, CONST_PROPERTY_DELETED, propertyName));\n            return;\n        }\n        ObjectType oType \u003d objectType;\n        while (oType !\u003d null) {\n            if (oType.hasReferenceName()) {\n                if (initializedConstantProperties.containsEntry(oType.getReferenceName(), propertyName)) {\n                    compiler.report(t.makeError(getprop, CONST_PROPERTY_REASSIGNED_VALUE, propertyName));\n                    break;\n                }\n            }\n            oType \u003d oType.getImplicitPrototype();\n        }\n        Preconditions.checkState(objectType.hasReferenceName());\n        initializedConstantProperties.put(objectType.getReferenceName(), propertyName);\n        if (objectType.isInstanceType()) {\n            ObjectType prototype \u003d objectType.getImplicitPrototype();\n            if (prototype !\u003d null) {\n                if (prototype.hasProperty(propertyName) \u0026\u0026 prototype.hasReferenceName()) {\n                    initializedConstantProperties.put(prototype.getReferenceName(), propertyName);\n                }\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/CheckAccessControls.java",
      "functionStartLine": 355,
      "functionName": "checkConstantProperty",
      "functionAnnotation": "",
      "functionDoc": "Determines whether the given property with @const tag got reassigned\n\n@param t The current traversal.\n@param getprop The getprop node.\n",
      "diff": "@@ -1,31 +1,36 @@\n private void checkConstantProperty(NodeTraversal t, Node getprop) {\n     Node parent \u003d getprop.getParent();\n-    if (!(NodeUtil.isAssignmentOp(parent) \u0026\u0026 parent.getFirstChild() \u003d\u003d getprop) \u0026\u0026 (parent.getType() !\u003d Token.INC) \u0026\u0026 (parent.getType() !\u003d Token.DEC)) {\n+    boolean isDelete \u003d parent.getType() \u003d\u003d Token.DELPROP;\n+    if (!(NodeUtil.isAssignmentOp(parent) \u0026\u0026 parent.getFirstChild() \u003d\u003d getprop) \u0026\u0026 (parent.getType() !\u003d Token.INC) \u0026\u0026 (parent.getType() !\u003d Token.DEC) \u0026\u0026 !isDelete) {\n         return;\n     }\n     ObjectType objectType \u003d ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n     String propertyName \u003d getprop.getLastChild().getString();\n     boolean isConstant \u003d isPropertyDeclaredConstant(objectType, propertyName);\n     if (isConstant) {\n+        if (isDelete) {\n+            compiler.report(t.makeError(getprop, CONST_PROPERTY_DELETED, propertyName));\n+            return;\n+        }\n         ObjectType oType \u003d objectType;\n         while (oType !\u003d null) {\n             if (oType.hasReferenceName()) {\n                 if (initializedConstantProperties.containsEntry(oType.getReferenceName(), propertyName)) {\n                     compiler.report(t.makeError(getprop, CONST_PROPERTY_REASSIGNED_VALUE, propertyName));\n                     break;\n                 }\n             }\n             oType \u003d oType.getImplicitPrototype();\n         }\n         Preconditions.checkState(objectType.hasReferenceName());\n         initializedConstantProperties.put(objectType.getReferenceName(), propertyName);\n         if (objectType.isInstanceType()) {\n             ObjectType prototype \u003d objectType.getImplicitPrototype();\n             if (prototype !\u003d null) {\n                 if (prototype.hasProperty(propertyName) \u0026\u0026 prototype.hasReferenceName()) {\n                     initializedConstantProperties.put(prototype.getReferenceName(), propertyName);\n                 }\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0dcb6c9c4145839c667faecaedb9411a8a5b8ce0": {
      "type": "Ybodychange",
      "commitMessage": "\nFix a bug in @const checking where it wouldn\u0027t detect @const\nwhen a class doesn\u0027t assign a value that it declared, but\na subclass does\n\nR\u003dzhuyi\nDELTA\u003d78  (62 added, 10 deleted, 6 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2231\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1170 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/9/11, 4:02 PM",
      "commitName": "0dcb6c9c4145839c667faecaedb9411a8a5b8ce0",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "5/12/11, 11:49 AM",
      "commitNameOld": "db1fdf97454a6e4ff2d29cab5f1ef2273b54c0b4",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 28.18,
      "commitsBetweenForRepo": 77,
      "commitsBetweenForFile": 1,
      "actualSource": "private void checkConstantProperty(NodeTraversal t, Node getprop) {\n    Node parent \u003d getprop.getParent();\n    if (!(NodeUtil.isAssignmentOp(parent) \u0026\u0026 parent.getFirstChild() \u003d\u003d getprop) \u0026\u0026 (parent.getType() !\u003d Token.INC) \u0026\u0026 (parent.getType() !\u003d Token.DEC)) {\n        return;\n    }\n    ObjectType objectType \u003d ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n    String propertyName \u003d getprop.getLastChild().getString();\n    boolean isConstant \u003d isPropertyDeclaredConstant(objectType, propertyName);\n    if (isConstant) {\n        ObjectType oType \u003d objectType;\n        while (oType !\u003d null) {\n            if (oType.hasReferenceName()) {\n                if (initializedConstantProperties.containsEntry(oType.getReferenceName(), propertyName)) {\n                    compiler.report(t.makeError(getprop, CONST_PROPERTY_REASSIGNED_VALUE, propertyName));\n                    break;\n                }\n            }\n            oType \u003d oType.getImplicitPrototype();\n        }\n        Preconditions.checkState(objectType.hasReferenceName());\n        initializedConstantProperties.put(objectType.getReferenceName(), propertyName);\n        if (objectType.isInstanceType()) {\n            ObjectType prototype \u003d objectType.getImplicitPrototype();\n            if (prototype !\u003d null) {\n                if (prototype.hasProperty(propertyName) \u0026\u0026 prototype.hasReferenceName()) {\n                    initializedConstantProperties.put(prototype.getReferenceName(), propertyName);\n                }\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/CheckAccessControls.java",
      "functionStartLine": 350,
      "functionName": "checkConstantProperty",
      "functionAnnotation": "",
      "functionDoc": "Determines whether the given property with @const tag got reassigned\n\n@param t The current traversal.\n@param getprop The getprop node.\n",
      "diff": "@@ -1,33 +1,31 @@\n private void checkConstantProperty(NodeTraversal t, Node getprop) {\n     Node parent \u003d getprop.getParent();\n     if (!(NodeUtil.isAssignmentOp(parent) \u0026\u0026 parent.getFirstChild() \u003d\u003d getprop) \u0026\u0026 (parent.getType() !\u003d Token.INC) \u0026\u0026 (parent.getType() !\u003d Token.DEC)) {\n         return;\n     }\n     ObjectType objectType \u003d ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n     String propertyName \u003d getprop.getLastChild().getString();\n-    if (objectType !\u003d null) {\n+    boolean isConstant \u003d isPropertyDeclaredConstant(objectType, propertyName);\n+    if (isConstant) {\n         ObjectType oType \u003d objectType;\n         while (oType !\u003d null) {\n             if (oType.hasReferenceName()) {\n                 if (initializedConstantProperties.containsEntry(oType.getReferenceName(), propertyName)) {\n                     compiler.report(t.makeError(getprop, CONST_PROPERTY_REASSIGNED_VALUE, propertyName));\n                     break;\n                 }\n             }\n             oType \u003d oType.getImplicitPrototype();\n         }\n-        JSDocInfo info \u003d objectType.getOwnPropertyJSDocInfo(propertyName);\n-        if (info !\u003d null \u0026\u0026 info.isConstant() \u0026\u0026 objectType.hasReferenceName()) {\n-            initializedConstantProperties.put(objectType.getReferenceName(), propertyName);\n-        }\n+        Preconditions.checkState(objectType.hasReferenceName());\n+        initializedConstantProperties.put(objectType.getReferenceName(), propertyName);\n         if (objectType.isInstanceType()) {\n             ObjectType prototype \u003d objectType.getImplicitPrototype();\n             if (prototype !\u003d null) {\n-                JSDocInfo prototypeInfo \u003d prototype.getOwnPropertyJSDocInfo(propertyName);\n-                if (prototypeInfo !\u003d null \u0026\u0026 prototypeInfo.isConstant() \u0026\u0026 prototype.hasReferenceName()) {\n+                if (prototype.hasProperty(propertyName) \u0026\u0026 prototype.hasReferenceName()) {\n                     initializedConstantProperties.put(prototype.getReferenceName(), propertyName);\n                 }\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bd59bbcf79648c23e86f3625efc98ff646c23495": {
      "type": "Yintroduced",
      "commitMessage": "\nFixes issue 133\n\nR\u003djohnlenz,nicksantos\nDELTA\u003d148  (145 added, 0 deleted, 3 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d565\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@800 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/18/11, 2:33 PM",
      "commitName": "bd59bbcf79648c23e86f3625efc98ff646c23495",
      "commitAuthor": "zhuyi@google.com",
      "diff": "@@ -0,0 +1,33 @@\n+private void checkConstantProperty(NodeTraversal t, Node getprop) {\n+    Node parent \u003d getprop.getParent();\n+    if (!(NodeUtil.isAssignmentOp(parent) \u0026\u0026 parent.getFirstChild() \u003d\u003d getprop) \u0026\u0026 (parent.getType() !\u003d Token.INC) \u0026\u0026 (parent.getType() !\u003d Token.DEC)) {\n+        return;\n+    }\n+    ObjectType objectType \u003d ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n+    String propertyName \u003d getprop.getLastChild().getString();\n+    if (objectType !\u003d null) {\n+        ObjectType oType \u003d objectType;\n+        while (oType !\u003d null) {\n+            if (oType.hasReferenceName()) {\n+                if (initializedConstantProperties.containsEntry(oType.getReferenceName(), propertyName)) {\n+                    compiler.report(t.makeError(getprop, CONST_PROPERTY_REASSIGNED_VALUE, propertyName));\n+                    break;\n+                }\n+            }\n+            oType \u003d oType.getImplicitPrototype();\n+        }\n+        JSDocInfo info \u003d objectType.getOwnPropertyJSDocInfo(propertyName);\n+        if (info !\u003d null \u0026\u0026 info.isConstant() \u0026\u0026 objectType.hasReferenceName()) {\n+            initializedConstantProperties.put(objectType.getReferenceName(), propertyName);\n+        }\n+        if (objectType.isInstanceType()) {\n+            ObjectType prototype \u003d objectType.getImplicitPrototype();\n+            if (prototype !\u003d null) {\n+                JSDocInfo prototypeInfo \u003d prototype.getOwnPropertyJSDocInfo(propertyName);\n+                if (prototypeInfo !\u003d null \u0026\u0026 prototypeInfo.isConstant() \u0026\u0026 prototype.hasReferenceName()) {\n+                    initializedConstantProperties.put(prototype.getReferenceName(), propertyName);\n+                }\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void checkConstantProperty(NodeTraversal t, Node getprop) {\n    Node parent \u003d getprop.getParent();\n    if (!(NodeUtil.isAssignmentOp(parent) \u0026\u0026 parent.getFirstChild() \u003d\u003d getprop) \u0026\u0026 (parent.getType() !\u003d Token.INC) \u0026\u0026 (parent.getType() !\u003d Token.DEC)) {\n        return;\n    }\n    ObjectType objectType \u003d ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n    String propertyName \u003d getprop.getLastChild().getString();\n    if (objectType !\u003d null) {\n        ObjectType oType \u003d objectType;\n        while (oType !\u003d null) {\n            if (oType.hasReferenceName()) {\n                if (initializedConstantProperties.containsEntry(oType.getReferenceName(), propertyName)) {\n                    compiler.report(t.makeError(getprop, CONST_PROPERTY_REASSIGNED_VALUE, propertyName));\n                    break;\n                }\n            }\n            oType \u003d oType.getImplicitPrototype();\n        }\n        JSDocInfo info \u003d objectType.getOwnPropertyJSDocInfo(propertyName);\n        if (info !\u003d null \u0026\u0026 info.isConstant() \u0026\u0026 objectType.hasReferenceName()) {\n            initializedConstantProperties.put(objectType.getReferenceName(), propertyName);\n        }\n        if (objectType.isInstanceType()) {\n            ObjectType prototype \u003d objectType.getImplicitPrototype();\n            if (prototype !\u003d null) {\n                JSDocInfo prototypeInfo \u003d prototype.getOwnPropertyJSDocInfo(propertyName);\n                if (prototypeInfo !\u003d null \u0026\u0026 prototypeInfo.isConstant() \u0026\u0026 prototype.hasReferenceName()) {\n                    initializedConstantProperties.put(prototype.getReferenceName(), propertyName);\n                }\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/CheckAccessControls.java",
      "functionStartLine": 348,
      "functionName": "checkConstantProperty",
      "functionAnnotation": "",
      "functionDoc": "Determines whether the given property with @const tag got reassigned\n\n@param t The current traversal.\n@param getprop The getprop node.\n"
    }
  }
}