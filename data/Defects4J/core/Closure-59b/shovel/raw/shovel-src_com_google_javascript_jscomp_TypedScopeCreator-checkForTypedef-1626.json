{
  "origin": "codeshovel",
  "repositoryName": "Closure-59b",
  "repositoryPath": "/tmp/Closure-59b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TypedScopeCreator.java",
  "functionName": "checkForTypedef",
  "functionId": "$checkForTypedef___t-NodeTraversal__candidate-Node__info-JSDocInfo",
  "sourceFilePath": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
  "functionAnnotation": "",
  "functionDoc": "Handle typedefs.\n\n@param t The current traversal.\n@param candidate A qualified name node.\n@param info JSDoc comments.\n",
  "functionStartLine": 1626,
  "functionEndLine": 1654,
  "numCommitsSeen": 59,
  "timeTaken": 4128,
  "changeHistory": [
    "3faef1d4959a55ebd86a09cd5395afb54ab5ec25",
    "b7b201a08e330c9638f52f5dfe824e426a34f2c5",
    "c764a46abf211d4677fadc33f7d466e5b14fa088",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "3faef1d4959a55ebd86a09cd5395afb54ab5ec25": "Ybodychange",
    "b7b201a08e330c9638f52f5dfe824e426a34f2c5": "Ybodychange",
    "c764a46abf211d4677fadc33f7d466e5b14fa088": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3faef1d4959a55ebd86a09cd5395afb54ab5ec25": {
      "type": "Ybodychange",
      "commitMessage": "\nHandle circular typedefs in a more robust way.\nThis comes up when we switch to different type-resolution algorithms\nthat resolve the forward-declared type later and ubox it.\nSadly, i don\u0027t have a good test case for this right now.\n\nR\u003djohnlenz\nDELTA\u003d17  (10 added, 1 deleted, 6 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d764010\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@516 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/27/10, 9:43 AM",
      "commitName": "3faef1d4959a55ebd86a09cd5395afb54ab5ec25",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "10/26/10, 8:07 AM",
      "commitNameOld": "1bd8d2f0f4f3edcc11aa441f50223967a98bf85d",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 1.07,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "private void checkForTypedef(NodeTraversal t, Node candidate, JSDocInfo info) {\n    if (info \u003d\u003d null || !info.hasTypedefType()) {\n        return;\n    }\n    String typedef \u003d candidate.getQualifiedName();\n    if (typedef \u003d\u003d null) {\n        return;\n    }\n    typeRegistry.declareType(typedef, getNativeType(UNKNOWN_TYPE));\n    JSType realType \u003d info.getTypedefType().evaluate(scope, typeRegistry);\n    if (realType \u003d\u003d null) {\n        compiler.report(JSError.make(t.getSourceName(), candidate, MALFORMED_TYPEDEF, typedef));\n    }\n    typeRegistry.overwriteDeclaredType(typedef, realType);\n    if (candidate.getType() \u003d\u003d Token.GETPROP) {\n        defineSlot(candidate, candidate.getParent(), getNativeType(NO_TYPE), false);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 1422,
      "functionName": "checkForTypedef",
      "functionAnnotation": "",
      "functionDoc": "Handle typedefs.\n\n@param t The current traversal.\n@param candidate A qualified name node.\n@param info JSDoc comments.\n",
      "diff": "@@ -1,18 +1,18 @@\n private void checkForTypedef(NodeTraversal t, Node candidate, JSDocInfo info) {\n     if (info \u003d\u003d null || !info.hasTypedefType()) {\n         return;\n     }\n     String typedef \u003d candidate.getQualifiedName();\n     if (typedef \u003d\u003d null) {\n         return;\n     }\n-    typeRegistry.forwardDeclareType(typedef);\n+    typeRegistry.declareType(typedef, getNativeType(UNKNOWN_TYPE));\n     JSType realType \u003d info.getTypedefType().evaluate(scope, typeRegistry);\n     if (realType \u003d\u003d null) {\n         compiler.report(JSError.make(t.getSourceName(), candidate, MALFORMED_TYPEDEF, typedef));\n     }\n-    typeRegistry.declareType(typedef, realType);\n+    typeRegistry.overwriteDeclaredType(typedef, realType);\n     if (candidate.getType() \u003d\u003d Token.GETPROP) {\n         defineSlot(candidate, candidate.getParent(), getNativeType(NO_TYPE), false);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b7b201a08e330c9638f52f5dfe824e426a34f2c5": {
      "type": "Ybodychange",
      "commitMessage": "\nAttach types to literals at scope-creation time instead of at\ninference time.\nScope-creation already attaches types to function literals at\nscope-creation type, so this makes the other literals more consistent\nwith function literals.\n\nR\u003djohnlenz\nDELTA\u003d167  (102 added, 53 deleted, 12 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d209649\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@411 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/8/10, 12:26 PM",
      "commitName": "b7b201a08e330c9638f52f5dfe824e426a34f2c5",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "7/19/10, 5:30 PM",
      "commitNameOld": "e8eafe7acfd53e5385e4f31692c4db67c3777185",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 50.79,
      "commitsBetweenForRepo": 116,
      "commitsBetweenForFile": 1,
      "actualSource": "private void checkForTypedef(NodeTraversal t, Node candidate, JSDocInfo info) {\n    if (info \u003d\u003d null || !info.hasTypedefType()) {\n        return;\n    }\n    String typedef \u003d candidate.getQualifiedName();\n    if (typedef \u003d\u003d null) {\n        return;\n    }\n    typeRegistry.forwardDeclareType(typedef);\n    JSType realType \u003d info.getTypedefType().evaluate(scope, typeRegistry);\n    if (realType \u003d\u003d null) {\n        compiler.report(JSError.make(t.getSourceName(), candidate, MALFORMED_TYPEDEF, typedef));\n    }\n    typeRegistry.declareType(typedef, realType);\n    if (candidate.getType() \u003d\u003d Token.GETPROP) {\n        defineSlot(candidate, candidate.getParent(), getNativeType(NO_TYPE), false);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 1074,
      "functionName": "checkForTypedef",
      "functionAnnotation": "",
      "functionDoc": "Handle typedefs.\n\n@param t The current traversal.\n@param candidate A qualified name node.\n@param info JSDoc comments.\n",
      "diff": "@@ -1,18 +1,18 @@\n private void checkForTypedef(NodeTraversal t, Node candidate, JSDocInfo info) {\n     if (info \u003d\u003d null || !info.hasTypedefType()) {\n         return;\n     }\n     String typedef \u003d candidate.getQualifiedName();\n     if (typedef \u003d\u003d null) {\n         return;\n     }\n     typeRegistry.forwardDeclareType(typedef);\n     JSType realType \u003d info.getTypedefType().evaluate(scope, typeRegistry);\n     if (realType \u003d\u003d null) {\n         compiler.report(JSError.make(t.getSourceName(), candidate, MALFORMED_TYPEDEF, typedef));\n     }\n     typeRegistry.declareType(typedef, realType);\n     if (candidate.getType() \u003d\u003d Token.GETPROP) {\n-        defineSlot(candidate, candidate.getParent(), typeRegistry.getNativeType(NO_TYPE), false);\n+        defineSlot(candidate, candidate.getParent(), getNativeType(NO_TYPE), false);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c764a46abf211d4677fadc33f7d466e5b14fa088": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/04/13 by john\n\n        Here is a crazy thought, let\u0027s not require the JSTypeRegistry during\n        parsing.\n\n        There are basically two changes here:\n        1) The IRFactory was looking for enums to seed the JSTypeRegistry, so\n        we do that when we setup for type interence.\n        2) The JSDocParser was checking the types of @defines objects, now do\n        that during ProcessDefines.\n\n        R\u003drobert,mark\n        DELTA\u003d207  (82 added, 89 deleted, 36 changed)\n\nChange on 2010/04/14 by nick\n\n        Add a debugging function for JSType hashcodes.\n        i found this useful, and thought others might too.\n\n        R\u003djohn\n        DELTA\u003d69  (69 added, 0 deleted, 0 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dfqsoxx\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@183 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/14/10, 9:15 AM",
      "commitName": "c764a46abf211d4677fadc33f7d466e5b14fa088",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/13/10, 2:39 PM",
      "commitNameOld": "de13c3313c05f4449c50c560324389d6905a214d",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 0.78,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void checkForTypedef(NodeTraversal t, Node candidate, JSDocInfo info) {\n    if (info \u003d\u003d null || !info.hasTypedefType()) {\n        return;\n    }\n    String typedef \u003d candidate.getQualifiedName();\n    if (typedef \u003d\u003d null) {\n        return;\n    }\n    typeRegistry.forwardDeclareType(typedef);\n    JSType realType \u003d info.getTypedefType().evaluate(scope, typeRegistry);\n    if (realType \u003d\u003d null) {\n        compiler.report(JSError.make(t.getSourceName(), candidate, MALFORMED_TYPEDEF, typedef));\n    }\n    typeRegistry.declareType(typedef, realType);\n    if (candidate.getType() \u003d\u003d Token.GETPROP) {\n        defineSlot(candidate, candidate.getParent(), typeRegistry.getNativeType(NO_TYPE), false);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 957,
      "functionName": "checkForTypedef",
      "functionAnnotation": "",
      "functionDoc": "Handle typedefs.\n\n@param t The current traversal.\n@param candidate A qualified name node.\n@param info JSDoc comments.\n",
      "diff": "@@ -1,18 +1,18 @@\n private void checkForTypedef(NodeTraversal t, Node candidate, JSDocInfo info) {\n     if (info \u003d\u003d null || !info.hasTypedefType()) {\n         return;\n     }\n     String typedef \u003d candidate.getQualifiedName();\n     if (typedef \u003d\u003d null) {\n         return;\n     }\n     typeRegistry.forwardDeclareType(typedef);\n-    JSType realType \u003d info.getTypedefType().evaluate(scope);\n+    JSType realType \u003d info.getTypedefType().evaluate(scope, typeRegistry);\n     if (realType \u003d\u003d null) {\n         compiler.report(JSError.make(t.getSourceName(), candidate, MALFORMED_TYPEDEF, typedef));\n     }\n     typeRegistry.declareType(typedef, realType);\n     if (candidate.getType() \u003d\u003d Token.GETPROP) {\n         defineSlot(candidate, candidate.getParent(), typeRegistry.getNativeType(NO_TYPE), false);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,18 @@\n+private void checkForTypedef(NodeTraversal t, Node candidate, JSDocInfo info) {\n+    if (info \u003d\u003d null || !info.hasTypedefType()) {\n+        return;\n+    }\n+    String typedef \u003d candidate.getQualifiedName();\n+    if (typedef \u003d\u003d null) {\n+        return;\n+    }\n+    typeRegistry.forwardDeclareType(typedef);\n+    JSType realType \u003d info.getTypedefType().evaluate(scope);\n+    if (realType \u003d\u003d null) {\n+        compiler.report(JSError.make(t.getSourceName(), candidate, MALFORMED_TYPEDEF, typedef));\n+    }\n+    typeRegistry.declareType(typedef, realType);\n+    if (candidate.getType() \u003d\u003d Token.GETPROP) {\n+        defineSlot(candidate, candidate.getParent(), typeRegistry.getNativeType(NO_TYPE), false);\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void checkForTypedef(NodeTraversal t, Node candidate, JSDocInfo info) {\n    if (info \u003d\u003d null || !info.hasTypedefType()) {\n        return;\n    }\n    String typedef \u003d candidate.getQualifiedName();\n    if (typedef \u003d\u003d null) {\n        return;\n    }\n    typeRegistry.forwardDeclareType(typedef);\n    JSType realType \u003d info.getTypedefType().evaluate(scope);\n    if (realType \u003d\u003d null) {\n        compiler.report(JSError.make(t.getSourceName(), candidate, MALFORMED_TYPEDEF, typedef));\n    }\n    typeRegistry.declareType(typedef, realType);\n    if (candidate.getType() \u003d\u003d Token.GETPROP) {\n        defineSlot(candidate, candidate.getParent(), typeRegistry.getNativeType(NO_TYPE), false);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 890,
      "functionName": "checkForTypedef",
      "functionAnnotation": "",
      "functionDoc": "Handle typedefs.\n\n@param t The current traversal.\n@param candidate A qualified name node.\n@param info JSDoc comments.\n"
    }
  }
}