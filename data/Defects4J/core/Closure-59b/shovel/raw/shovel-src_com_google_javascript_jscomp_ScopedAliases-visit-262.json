{
  "origin": "codeshovel",
  "repositoryName": "Closure-59b",
  "repositoryPath": "/tmp/Closure-59b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ScopedAliases.java",
  "functionName": "visit",
  "functionId": "$visit___t-NodeTraversal__n-Node__parent-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/ScopedAliases.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 262,
  "functionEndLine": 344,
  "numCommitsSeen": 15,
  "timeTaken": 1057,
  "changeHistory": [
    "b783533aac33c06fc34ed4c3f284aa8411ea0c54",
    "8c4a625cdec89e6b1fa452fbb73c6f8d4c56b701",
    "660e7b525f76cd64d10ccc8724a1b0e0c501d1d9",
    "e829dafb9b3365bda6b6bb80f5fa97783752d143",
    "a9757e8c7d85f9ee9622b3e5352955ba3429733d",
    "301ed5b03eb52debdc9b87929a45880eb2faf1fe",
    "ffe67f22a342291ecfed36c1c6ee7c01186f9eff",
    "58c3e4ce1d17ec619bcc4964bdeebc676f93567d"
  ],
  "changeHistoryShort": {
    "b783533aac33c06fc34ed4c3f284aa8411ea0c54": "Ybodychange",
    "8c4a625cdec89e6b1fa452fbb73c6f8d4c56b701": "Ybodychange",
    "660e7b525f76cd64d10ccc8724a1b0e0c501d1d9": "Ybodychange",
    "e829dafb9b3365bda6b6bb80f5fa97783752d143": "Ybodychange",
    "a9757e8c7d85f9ee9622b3e5352955ba3429733d": "Ybodychange",
    "301ed5b03eb52debdc9b87929a45880eb2faf1fe": "Ybodychange",
    "ffe67f22a342291ecfed36c1c6ee7c01186f9eff": "Ybodychange",
    "58c3e4ce1d17ec619bcc4964bdeebc676f93567d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b783533aac33c06fc34ed4c3f284aa8411ea0c54": {
      "type": "Ybodychange",
      "commitMessage": "\nRename NodeUtil.getFunctionInfo to NodeUtil.getFunctionJSDocInfo\nRename NodeUtil.getFnParameters to NodeUtil.getFunctionParameters.\nNOTE: this is a pure Eclipse refactor:rename CL\n\nR\u003djohnlenz\nDELTA\u003d18  (1 added, 0 deleted, 17 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1913\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1101 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/16/11, 8:14 AM",
      "commitName": "b783533aac33c06fc34ed4c3f284aa8411ea0c54",
      "commitAuthor": "tylerg@google.com",
      "commitDateOld": "4/12/11, 12:15 PM",
      "commitNameOld": "f322be0e576d5e2114cb59c0a6537197997b9c59",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 33.83,
      "commitsBetweenForRepo": 98,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (isCallToScopeMethod(n)) {\n        if (!NodeUtil.isExpressionNode(parent)) {\n            report(t, n, GOOG_SCOPE_USED_IMPROPERLY);\n        }\n        if (n.getChildCount() !\u003d 2) {\n            report(t, n, GOOG_SCOPE_HAS_BAD_PARAMETERS);\n        } else {\n            Node anonymousFnNode \u003d n.getChildAtIndex(1);\n            if (!NodeUtil.isFunction(anonymousFnNode) || NodeUtil.getFunctionName(anonymousFnNode) !\u003d null || NodeUtil.getFunctionParameters(anonymousFnNode).hasChildren()) {\n                report(t, anonymousFnNode, GOOG_SCOPE_HAS_BAD_PARAMETERS);\n            } else {\n                scopeCalls.add(n);\n            }\n        }\n    }\n    if (t.getScopeDepth() \u003d\u003d 2) {\n        int type \u003d n.getType();\n        if (type \u003d\u003d Token.NAME \u0026\u0026 parent.getType() \u003d\u003d Token.VAR) {\n            if (n.hasChildren() \u0026\u0026 n.getFirstChild().isQualifiedName()) {\n                String name \u003d n.getString();\n                Var aliasVar \u003d t.getScope().getVar(name);\n                aliases.put(name, aliasVar);\n                aliasDefinitions.add(n);\n                String qualifiedName \u003d aliasVar.getInitialValue().getQualifiedName();\n                transformation.addAlias(name, qualifiedName);\n                return;\n            } else {\n                report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n            }\n        }\n        if (type \u003d\u003d Token.NAME \u0026\u0026 NodeUtil.isAssignmentOp(parent) \u0026\u0026 n \u003d\u003d parent.getFirstChild()) {\n            report(t, n, GOOG_SCOPE_ALIAS_REDEFINED, n.getString());\n        }\n        if (type \u003d\u003d Token.RETURN) {\n            report(t, n, GOOG_SCOPE_USES_RETURN);\n        } else if (type \u003d\u003d Token.THIS) {\n            report(t, n, GOOG_SCOPE_REFERENCES_THIS);\n        } else if (type \u003d\u003d Token.THROW) {\n            report(t, n, GOOG_SCOPE_USES_THROW);\n        }\n    }\n    if (t.getScopeDepth() \u003e\u003d 2) {\n        if (n.getType() \u003d\u003d Token.NAME) {\n            String name \u003d n.getString();\n            Var aliasVar \u003d aliases.get(name);\n            if (aliasVar !\u003d null \u0026\u0026 t.getScope().getVar(name) \u003d\u003d aliasVar) {\n                Node aliasedNode \u003d aliasVar.getInitialValue();\n                aliasUsages.add(new AliasedNode(n, aliasedNode));\n            }\n        }\n        JSDocInfo info \u003d n.getJSDocInfo();\n        if (info !\u003d null) {\n            for (Node node : info.getTypeNodes()) {\n                fixTypeNode(node);\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/ScopedAliases.java",
      "functionStartLine": 257,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,60 +1,60 @@\n @Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     if (isCallToScopeMethod(n)) {\n         if (!NodeUtil.isExpressionNode(parent)) {\n             report(t, n, GOOG_SCOPE_USED_IMPROPERLY);\n         }\n         if (n.getChildCount() !\u003d 2) {\n             report(t, n, GOOG_SCOPE_HAS_BAD_PARAMETERS);\n         } else {\n             Node anonymousFnNode \u003d n.getChildAtIndex(1);\n-            if (!NodeUtil.isFunction(anonymousFnNode) || NodeUtil.getFunctionName(anonymousFnNode) !\u003d null || NodeUtil.getFnParameters(anonymousFnNode).hasChildren()) {\n+            if (!NodeUtil.isFunction(anonymousFnNode) || NodeUtil.getFunctionName(anonymousFnNode) !\u003d null || NodeUtil.getFunctionParameters(anonymousFnNode).hasChildren()) {\n                 report(t, anonymousFnNode, GOOG_SCOPE_HAS_BAD_PARAMETERS);\n             } else {\n                 scopeCalls.add(n);\n             }\n         }\n     }\n     if (t.getScopeDepth() \u003d\u003d 2) {\n         int type \u003d n.getType();\n         if (type \u003d\u003d Token.NAME \u0026\u0026 parent.getType() \u003d\u003d Token.VAR) {\n             if (n.hasChildren() \u0026\u0026 n.getFirstChild().isQualifiedName()) {\n                 String name \u003d n.getString();\n                 Var aliasVar \u003d t.getScope().getVar(name);\n                 aliases.put(name, aliasVar);\n                 aliasDefinitions.add(n);\n                 String qualifiedName \u003d aliasVar.getInitialValue().getQualifiedName();\n                 transformation.addAlias(name, qualifiedName);\n                 return;\n             } else {\n                 report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n             }\n         }\n         if (type \u003d\u003d Token.NAME \u0026\u0026 NodeUtil.isAssignmentOp(parent) \u0026\u0026 n \u003d\u003d parent.getFirstChild()) {\n             report(t, n, GOOG_SCOPE_ALIAS_REDEFINED, n.getString());\n         }\n         if (type \u003d\u003d Token.RETURN) {\n             report(t, n, GOOG_SCOPE_USES_RETURN);\n         } else if (type \u003d\u003d Token.THIS) {\n             report(t, n, GOOG_SCOPE_REFERENCES_THIS);\n         } else if (type \u003d\u003d Token.THROW) {\n             report(t, n, GOOG_SCOPE_USES_THROW);\n         }\n     }\n     if (t.getScopeDepth() \u003e\u003d 2) {\n         if (n.getType() \u003d\u003d Token.NAME) {\n             String name \u003d n.getString();\n             Var aliasVar \u003d aliases.get(name);\n             if (aliasVar !\u003d null \u0026\u0026 t.getScope().getVar(name) \u003d\u003d aliasVar) {\n                 Node aliasedNode \u003d aliasVar.getInitialValue();\n                 aliasUsages.add(new AliasedNode(n, aliasedNode));\n             }\n         }\n         JSDocInfo info \u003d n.getJSDocInfo();\n         if (info !\u003d null) {\n             for (Node node : info.getTypeNodes()) {\n                 fixTypeNode(node);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "8c4a625cdec89e6b1fa452fbb73c6f8d4c56b701": {
      "type": "Ybodychange",
      "commitMessage": "\nImplement ScopedAliases to record Aliases from goog.scope blocks.\nEasymock Dependency pulleded out for now to get the Changes working.  Will pull in and update tests as soon as dependency can be added to builds.\n\nR\u003dnicksantos\nDELTA\u003d206  (188 added, 2 deleted, 16 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1371\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@999 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/12/11, 11:46 AM",
      "commitName": "8c4a625cdec89e6b1fa452fbb73c6f8d4c56b701",
      "commitAuthor": "tylerg@google.com",
      "commitDateOld": "4/11/11, 4:01 PM",
      "commitNameOld": "f5bf89311e441f2c074f5f998881454cbeda804b",
      "commitAuthorOld": "jtarrio@google.com",
      "daysBetweenCommits": 0.82,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (isCallToScopeMethod(n)) {\n        if (!NodeUtil.isExpressionNode(parent)) {\n            report(t, n, GOOG_SCOPE_USED_IMPROPERLY);\n        }\n        if (n.getChildCount() !\u003d 2) {\n            report(t, n, GOOG_SCOPE_HAS_BAD_PARAMETERS);\n        } else {\n            Node anonymousFnNode \u003d n.getChildAtIndex(1);\n            if (!NodeUtil.isFunction(anonymousFnNode) || NodeUtil.getFunctionName(anonymousFnNode) !\u003d null || NodeUtil.getFnParameters(anonymousFnNode).hasChildren()) {\n                report(t, anonymousFnNode, GOOG_SCOPE_HAS_BAD_PARAMETERS);\n            } else {\n                scopeCalls.add(n);\n            }\n        }\n    }\n    if (t.getScopeDepth() \u003d\u003d 2) {\n        int type \u003d n.getType();\n        if (type \u003d\u003d Token.NAME \u0026\u0026 parent.getType() \u003d\u003d Token.VAR) {\n            if (n.hasChildren() \u0026\u0026 n.getFirstChild().isQualifiedName()) {\n                String name \u003d n.getString();\n                Var aliasVar \u003d t.getScope().getVar(name);\n                aliases.put(name, aliasVar);\n                aliasDefinitions.add(n);\n                String qualifiedName \u003d aliasVar.getInitialValue().getQualifiedName();\n                transformation.addAlias(name, qualifiedName);\n                return;\n            } else {\n                report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n            }\n        }\n        if (type \u003d\u003d Token.NAME \u0026\u0026 NodeUtil.isAssignmentOp(parent) \u0026\u0026 n \u003d\u003d parent.getFirstChild()) {\n            report(t, n, GOOG_SCOPE_ALIAS_REDEFINED, n.getString());\n        }\n        if (type \u003d\u003d Token.RETURN) {\n            report(t, n, GOOG_SCOPE_USES_RETURN);\n        } else if (type \u003d\u003d Token.THIS) {\n            report(t, n, GOOG_SCOPE_REFERENCES_THIS);\n        } else if (type \u003d\u003d Token.THROW) {\n            report(t, n, GOOG_SCOPE_USES_THROW);\n        }\n    }\n    if (t.getScopeDepth() \u003e\u003d 2) {\n        if (n.getType() \u003d\u003d Token.NAME) {\n            String name \u003d n.getString();\n            Var aliasVar \u003d aliases.get(name);\n            if (aliasVar !\u003d null \u0026\u0026 t.getScope().getVar(name) \u003d\u003d aliasVar) {\n                Node aliasedNode \u003d aliasVar.getInitialValue();\n                aliasUsages.add(new AliasedNode(n, aliasedNode));\n            }\n        }\n        JSDocInfo info \u003d n.getJSDocInfo();\n        if (info !\u003d null) {\n            for (Node node : info.getTypeNodes()) {\n                fixTypeNode(node);\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/ScopedAliases.java",
      "functionStartLine": 257,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,56 +1,60 @@\n @Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     if (isCallToScopeMethod(n)) {\n         if (!NodeUtil.isExpressionNode(parent)) {\n             report(t, n, GOOG_SCOPE_USED_IMPROPERLY);\n         }\n         if (n.getChildCount() !\u003d 2) {\n             report(t, n, GOOG_SCOPE_HAS_BAD_PARAMETERS);\n         } else {\n             Node anonymousFnNode \u003d n.getChildAtIndex(1);\n             if (!NodeUtil.isFunction(anonymousFnNode) || NodeUtil.getFunctionName(anonymousFnNode) !\u003d null || NodeUtil.getFnParameters(anonymousFnNode).hasChildren()) {\n                 report(t, anonymousFnNode, GOOG_SCOPE_HAS_BAD_PARAMETERS);\n             } else {\n                 scopeCalls.add(n);\n             }\n         }\n     }\n     if (t.getScopeDepth() \u003d\u003d 2) {\n         int type \u003d n.getType();\n         if (type \u003d\u003d Token.NAME \u0026\u0026 parent.getType() \u003d\u003d Token.VAR) {\n             if (n.hasChildren() \u0026\u0026 n.getFirstChild().isQualifiedName()) {\n-                aliases.put(n.getString(), t.getScope().getVar(n.getString()));\n+                String name \u003d n.getString();\n+                Var aliasVar \u003d t.getScope().getVar(name);\n+                aliases.put(name, aliasVar);\n                 aliasDefinitions.add(n);\n+                String qualifiedName \u003d aliasVar.getInitialValue().getQualifiedName();\n+                transformation.addAlias(name, qualifiedName);\n                 return;\n             } else {\n                 report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n             }\n         }\n         if (type \u003d\u003d Token.NAME \u0026\u0026 NodeUtil.isAssignmentOp(parent) \u0026\u0026 n \u003d\u003d parent.getFirstChild()) {\n             report(t, n, GOOG_SCOPE_ALIAS_REDEFINED, n.getString());\n         }\n         if (type \u003d\u003d Token.RETURN) {\n             report(t, n, GOOG_SCOPE_USES_RETURN);\n         } else if (type \u003d\u003d Token.THIS) {\n             report(t, n, GOOG_SCOPE_REFERENCES_THIS);\n         } else if (type \u003d\u003d Token.THROW) {\n             report(t, n, GOOG_SCOPE_USES_THROW);\n         }\n     }\n     if (t.getScopeDepth() \u003e\u003d 2) {\n         if (n.getType() \u003d\u003d Token.NAME) {\n             String name \u003d n.getString();\n             Var aliasVar \u003d aliases.get(name);\n             if (aliasVar !\u003d null \u0026\u0026 t.getScope().getVar(name) \u003d\u003d aliasVar) {\n                 Node aliasedNode \u003d aliasVar.getInitialValue();\n                 aliasUsages.add(new AliasedNode(n, aliasedNode));\n             }\n         }\n         JSDocInfo info \u003d n.getJSDocInfo();\n         if (info !\u003d null) {\n             for (Node node : info.getTypeNodes()) {\n                 fixTypeNode(node);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "660e7b525f76cd64d10ccc8724a1b0e0c501d1d9": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/07/13 09:58:55 by johnlenz\n\n        Change source map generation so that runs in O(n) time. Source map\n        generation is now roughly the time it takes to write the bytes to disk.\n\n        R\u003dacleung\n        DELTA\u003d820  (508 added, 270 deleted, 42 changed)\n\nChange on 2010/07/13 11:14:56 by acleung\n\n        Google Analytics Externs Contribution\n\n        R\u003dbkuhn,nicksantos\n        DELTA\u003d438  (438 added, 0 deleted, 0 changed)\n\nChange on 2010/07/13 11:37:57 by nicksantos\n\n        Fix goog.scope processing so that it works even if an alias\n        shadows a global variable.\n\n        R\u003drobbyw\n        DELTA\u003d28  (16 added, 3 deleted, 9 changed)\n\nChange on 2010/07/13 12:45:31 by nicksantos\n\n        fix a silly bug where an assignment of a name is interpreted\n        as an assignment to a name.\n\n        R\u003drobbyw\n        DELTA\u003d7  (6 added, 0 deleted, 1 changed)\n\nChange on 2010/07/13 14:02:13 by nicksantos\n\n        Make the goog.asserts functions work better for qualified names\n        (like x.y).\n\n        R\u003dagrieve\n        DELTA\u003d37  (17 added, 3 deleted, 17 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d50006\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@274 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/13/10, 3:28 PM",
      "commitName": "660e7b525f76cd64d10ccc8724a1b0e0c501d1d9",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "6/18/10, 5:18 PM",
      "commitNameOld": "e829dafb9b3365bda6b6bb80f5fa97783752d143",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 24.92,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (isCallToScopeMethod(n)) {\n        if (!NodeUtil.isExpressionNode(parent)) {\n            report(t, n, GOOG_SCOPE_USED_IMPROPERLY);\n        }\n        if (n.getChildCount() !\u003d 2) {\n            report(t, n, GOOG_SCOPE_HAS_BAD_PARAMETERS);\n        } else {\n            Node anonymousFnNode \u003d n.getChildAtIndex(1);\n            if (!NodeUtil.isFunction(anonymousFnNode) || NodeUtil.getFunctionName(anonymousFnNode) !\u003d null || NodeUtil.getFnParameters(anonymousFnNode).hasChildren()) {\n                report(t, anonymousFnNode, GOOG_SCOPE_HAS_BAD_PARAMETERS);\n            } else {\n                scopeCalls.add(n);\n            }\n        }\n    }\n    if (t.getScopeDepth() \u003d\u003d 2) {\n        int type \u003d n.getType();\n        if (type \u003d\u003d Token.NAME \u0026\u0026 parent.getType() \u003d\u003d Token.VAR) {\n            if (n.hasChildren() \u0026\u0026 n.getFirstChild().isQualifiedName()) {\n                aliases.put(n.getString(), t.getScope().getVar(n.getString()));\n                aliasDefinitions.add(n);\n                return;\n            } else {\n                report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n            }\n        }\n        if (type \u003d\u003d Token.NAME \u0026\u0026 NodeUtil.isAssignmentOp(parent) \u0026\u0026 n \u003d\u003d parent.getFirstChild()) {\n            report(t, n, GOOG_SCOPE_ALIAS_REDEFINED, n.getString());\n        }\n        if (type \u003d\u003d Token.RETURN) {\n            report(t, n, GOOG_SCOPE_USES_RETURN);\n        } else if (type \u003d\u003d Token.THIS) {\n            report(t, n, GOOG_SCOPE_REFERENCES_THIS);\n        } else if (type \u003d\u003d Token.THROW) {\n            report(t, n, GOOG_SCOPE_USES_THROW);\n        }\n    }\n    if (t.getScopeDepth() \u003e\u003d 2) {\n        if (n.getType() \u003d\u003d Token.NAME) {\n            String name \u003d n.getString();\n            Var aliasVar \u003d aliases.get(name);\n            if (aliasVar !\u003d null \u0026\u0026 t.getScope().getVar(name) \u003d\u003d aliasVar) {\n                Node aliasedNode \u003d aliasVar.getInitialValue();\n                aliasUsages.add(new AliasedNode(n, aliasedNode));\n            }\n        }\n        JSDocInfo info \u003d n.getJSDocInfo();\n        if (info !\u003d null) {\n            for (Node node : info.getTypeNodes()) {\n                fixTypeNode(node);\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/ScopedAliases.java",
      "functionStartLine": 225,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,55 +1,56 @@\n @Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     if (isCallToScopeMethod(n)) {\n         if (!NodeUtil.isExpressionNode(parent)) {\n             report(t, n, GOOG_SCOPE_USED_IMPROPERLY);\n         }\n         if (n.getChildCount() !\u003d 2) {\n             report(t, n, GOOG_SCOPE_HAS_BAD_PARAMETERS);\n         } else {\n             Node anonymousFnNode \u003d n.getChildAtIndex(1);\n             if (!NodeUtil.isFunction(anonymousFnNode) || NodeUtil.getFunctionName(anonymousFnNode) !\u003d null || NodeUtil.getFnParameters(anonymousFnNode).hasChildren()) {\n                 report(t, anonymousFnNode, GOOG_SCOPE_HAS_BAD_PARAMETERS);\n             } else {\n                 scopeCalls.add(n);\n             }\n         }\n     }\n     if (t.getScopeDepth() \u003d\u003d 2) {\n         int type \u003d n.getType();\n         if (type \u003d\u003d Token.NAME \u0026\u0026 parent.getType() \u003d\u003d Token.VAR) {\n             if (n.hasChildren() \u0026\u0026 n.getFirstChild().isQualifiedName()) {\n-                aliases.put(n.getString(), n.getFirstChild());\n+                aliases.put(n.getString(), t.getScope().getVar(n.getString()));\n                 aliasDefinitions.add(n);\n-                t.getScope().undeclare(t.getScope().getVar(n.getString()));\n                 return;\n             } else {\n                 report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n             }\n         }\n-        if (type \u003d\u003d Token.NAME \u0026\u0026 NodeUtil.isAssignmentOp(parent)) {\n+        if (type \u003d\u003d Token.NAME \u0026\u0026 NodeUtil.isAssignmentOp(parent) \u0026\u0026 n \u003d\u003d parent.getFirstChild()) {\n             report(t, n, GOOG_SCOPE_ALIAS_REDEFINED, n.getString());\n         }\n         if (type \u003d\u003d Token.RETURN) {\n             report(t, n, GOOG_SCOPE_USES_RETURN);\n         } else if (type \u003d\u003d Token.THIS) {\n             report(t, n, GOOG_SCOPE_REFERENCES_THIS);\n         } else if (type \u003d\u003d Token.THROW) {\n             report(t, n, GOOG_SCOPE_USES_THROW);\n         }\n     }\n     if (t.getScopeDepth() \u003e\u003d 2) {\n         if (n.getType() \u003d\u003d Token.NAME) {\n-            Node aliasedNode \u003d aliases.get(n.getString());\n-            if (t.getScope().getVar(n.getString()) \u003d\u003d null \u0026\u0026 aliasedNode !\u003d null) {\n+            String name \u003d n.getString();\n+            Var aliasVar \u003d aliases.get(name);\n+            if (aliasVar !\u003d null \u0026\u0026 t.getScope().getVar(name) \u003d\u003d aliasVar) {\n+                Node aliasedNode \u003d aliasVar.getInitialValue();\n                 aliasUsages.add(new AliasedNode(n, aliasedNode));\n             }\n         }\n         JSDocInfo info \u003d n.getJSDocInfo();\n         if (info !\u003d null) {\n             for (Node node : info.getTypeNodes()) {\n                 fixTypeNode(node);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e829dafb9b3365bda6b6bb80f5fa97783752d143": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/06/17 by nicksantos\n\n        don\u0027t use Sets to build union types.\n\n        R\u003djohnlenz\n        DELTA\u003d76  (52 added, 6 deleted, 18 changed)\n\nChange on 2010/06/17 by nicksantos\n\n        fix a couple bugs in goog.scope processing\n\n        R\u003drobbyw\n        DELTA\u003d54  (42 added, 11 deleted, 1 changed)\n\n\nChange on 2010/06/17 by acleung\n\n        Disables function argument check with @notypecheck is on for the whole file.\n\n        R\u003djohnlenz\n        DELTA\u003d8  (5 added, 1 deleted, 2 changed)\n\nChange on 2010/06/17 by dcc\n\n        Fix NPE in ExportExternsPass with --check_types\u003dfalse.\n\n        R\u003dacleung\n        DELTA\u003d72  (66 added, 4 deleted, 2 changed)\n\nChange on 2010/06/17 by johnlenz\n\n        Change stub method parameters to allow sanity checks to pass with\n        CrossModuleMethodMotion.\n\n        R\u003dnicksantos\n        DELTA\u003d7  (3 added, 0 deleted, 4 changed)\n\nChange on 2010/06/18 by johnlenz\n\n        Modify AliasKeywords so passes the sanity checks: don\u0027t create coding\n        convention constants without annotation them so that the tests pass\n        when the sanity checks are on.\n\n        R\u003dnicksantos\n        DELTA\u003d18  (5 added, 0 deleted, 13 changed)\n\nChange on 2010/06/18 by johnlenz\n\n        Fix source maps when run with sanity checks.\n\n        R\u003dnicksantos\n        DELTA\u003d10  (7 added, 0 deleted, 3 changed)\n\nChange on 2010/06/18 by johnlenz\n\n        Changes to PrepareAst to make it valid to run during SanityChecks.\n\n        R\u003dnicksantos\n        DELTA\u003d18  (5 added, 0 deleted, 13 changed)\n\nChange on 2010/06/18 by nicksantos\n\n        fix constant annotations in CollapseProperties.\n\n        R\u003djohnlenz\n        DELTA\u003d61  (49 added, 1 deleted, 11 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d30002\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@246 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/18/10, 5:18 PM",
      "commitName": "e829dafb9b3365bda6b6bb80f5fa97783752d143",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "5/18/10, 10:06 AM",
      "commitNameOld": "a9757e8c7d85f9ee9622b3e5352955ba3429733d",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 31.3,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (isCallToScopeMethod(n)) {\n        if (!NodeUtil.isExpressionNode(parent)) {\n            report(t, n, GOOG_SCOPE_USED_IMPROPERLY);\n        }\n        if (n.getChildCount() !\u003d 2) {\n            report(t, n, GOOG_SCOPE_HAS_BAD_PARAMETERS);\n        } else {\n            Node anonymousFnNode \u003d n.getChildAtIndex(1);\n            if (!NodeUtil.isFunction(anonymousFnNode) || NodeUtil.getFunctionName(anonymousFnNode) !\u003d null || NodeUtil.getFnParameters(anonymousFnNode).hasChildren()) {\n                report(t, anonymousFnNode, GOOG_SCOPE_HAS_BAD_PARAMETERS);\n            } else {\n                scopeCalls.add(n);\n            }\n        }\n    }\n    if (t.getScopeDepth() \u003d\u003d 2) {\n        int type \u003d n.getType();\n        if (type \u003d\u003d Token.NAME \u0026\u0026 parent.getType() \u003d\u003d Token.VAR) {\n            if (n.hasChildren() \u0026\u0026 n.getFirstChild().isQualifiedName()) {\n                aliases.put(n.getString(), n.getFirstChild());\n                aliasDefinitions.add(n);\n                t.getScope().undeclare(t.getScope().getVar(n.getString()));\n                return;\n            } else {\n                report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n            }\n        }\n        if (type \u003d\u003d Token.NAME \u0026\u0026 NodeUtil.isAssignmentOp(parent)) {\n            report(t, n, GOOG_SCOPE_ALIAS_REDEFINED, n.getString());\n        }\n        if (type \u003d\u003d Token.RETURN) {\n            report(t, n, GOOG_SCOPE_USES_RETURN);\n        } else if (type \u003d\u003d Token.THIS) {\n            report(t, n, GOOG_SCOPE_REFERENCES_THIS);\n        } else if (type \u003d\u003d Token.THROW) {\n            report(t, n, GOOG_SCOPE_USES_THROW);\n        }\n    }\n    if (t.getScopeDepth() \u003e\u003d 2) {\n        if (n.getType() \u003d\u003d Token.NAME) {\n            Node aliasedNode \u003d aliases.get(n.getString());\n            if (t.getScope().getVar(n.getString()) \u003d\u003d null \u0026\u0026 aliasedNode !\u003d null) {\n                aliasUsages.add(new AliasedNode(n, aliasedNode));\n            }\n        }\n        JSDocInfo info \u003d n.getJSDocInfo();\n        if (info !\u003d null) {\n            for (Node node : info.getTypeNodes()) {\n                fixTypeNode(node);\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/ScopedAliases.java",
      "functionStartLine": 224,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,53 +1,55 @@\n @Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     if (isCallToScopeMethod(n)) {\n         if (!NodeUtil.isExpressionNode(parent)) {\n             report(t, n, GOOG_SCOPE_USED_IMPROPERLY);\n         }\n         if (n.getChildCount() !\u003d 2) {\n             report(t, n, GOOG_SCOPE_HAS_BAD_PARAMETERS);\n         } else {\n             Node anonymousFnNode \u003d n.getChildAtIndex(1);\n             if (!NodeUtil.isFunction(anonymousFnNode) || NodeUtil.getFunctionName(anonymousFnNode) !\u003d null || NodeUtil.getFnParameters(anonymousFnNode).hasChildren()) {\n                 report(t, anonymousFnNode, GOOG_SCOPE_HAS_BAD_PARAMETERS);\n             } else {\n                 scopeCalls.add(n);\n             }\n         }\n     }\n     if (t.getScopeDepth() \u003d\u003d 2) {\n-        if (n.getType() \u003d\u003d Token.NAME \u0026\u0026 parent.getType() \u003d\u003d Token.VAR) {\n+        int type \u003d n.getType();\n+        if (type \u003d\u003d Token.NAME \u0026\u0026 parent.getType() \u003d\u003d Token.VAR) {\n             if (n.hasChildren() \u0026\u0026 n.getFirstChild().isQualifiedName()) {\n                 aliases.put(n.getString(), n.getFirstChild());\n                 aliasDefinitions.add(n);\n                 t.getScope().undeclare(t.getScope().getVar(n.getString()));\n                 return;\n             } else {\n                 report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n             }\n         }\n+        if (type \u003d\u003d Token.NAME \u0026\u0026 NodeUtil.isAssignmentOp(parent)) {\n+            report(t, n, GOOG_SCOPE_ALIAS_REDEFINED, n.getString());\n+        }\n+        if (type \u003d\u003d Token.RETURN) {\n+            report(t, n, GOOG_SCOPE_USES_RETURN);\n+        } else if (type \u003d\u003d Token.THIS) {\n+            report(t, n, GOOG_SCOPE_REFERENCES_THIS);\n+        } else if (type \u003d\u003d Token.THROW) {\n+            report(t, n, GOOG_SCOPE_USES_THROW);\n+        }\n     }\n     if (t.getScopeDepth() \u003e\u003d 2) {\n         if (n.getType() \u003d\u003d Token.NAME) {\n-            if (NodeUtil.isAssignmentOp(parent)) {\n-                report(t, n, GOOG_SCOPE_ALIAS_REDEFINED, n.getString());\n-            }\n             Node aliasedNode \u003d aliases.get(n.getString());\n             if (t.getScope().getVar(n.getString()) \u003d\u003d null \u0026\u0026 aliasedNode !\u003d null) {\n                 aliasUsages.add(new AliasedNode(n, aliasedNode));\n             }\n         }\n-        if (n.getType() \u003d\u003d Token.RETURN) {\n-            report(t, n, GOOG_SCOPE_USES_RETURN);\n-        }\n-        if (n.getType() \u003d\u003d Token.THIS) {\n-            report(t, n, GOOG_SCOPE_REFERENCES_THIS);\n-        }\n         JSDocInfo info \u003d n.getJSDocInfo();\n         if (info !\u003d null) {\n             for (Node node : info.getTypeNodes()) {\n                 fixTypeNode(node);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a9757e8c7d85f9ee9622b3e5352955ba3429733d": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/05/17 by robby\n\n        Check for non-alias locals in ScopedAliases.\n\n        R\u003dnick\n        DELTA\u003d26  (22 added, 3 deleted, 1 changed)\n\nChange on 2010/05/18 by nick\n\n        Add inferred return types.\n        Make the inf/sup relationship for function types a bit richer.\n        Make sure that the [call] pointer can never be null.\n\n        R\u003dandrew\n        DELTA\u003d192  (134 added, 30 deleted, 28 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d4001\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@216 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/18/10, 10:06 AM",
      "commitName": "a9757e8c7d85f9ee9622b3e5352955ba3429733d",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "5/11/10, 6:45 PM",
      "commitNameOld": "301ed5b03eb52debdc9b87929a45880eb2faf1fe",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 6.64,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (isCallToScopeMethod(n)) {\n        if (!NodeUtil.isExpressionNode(parent)) {\n            report(t, n, GOOG_SCOPE_USED_IMPROPERLY);\n        }\n        if (n.getChildCount() !\u003d 2) {\n            report(t, n, GOOG_SCOPE_HAS_BAD_PARAMETERS);\n        } else {\n            Node anonymousFnNode \u003d n.getChildAtIndex(1);\n            if (!NodeUtil.isFunction(anonymousFnNode) || NodeUtil.getFunctionName(anonymousFnNode) !\u003d null || NodeUtil.getFnParameters(anonymousFnNode).hasChildren()) {\n                report(t, anonymousFnNode, GOOG_SCOPE_HAS_BAD_PARAMETERS);\n            } else {\n                scopeCalls.add(n);\n            }\n        }\n    }\n    if (t.getScopeDepth() \u003d\u003d 2) {\n        if (n.getType() \u003d\u003d Token.NAME \u0026\u0026 parent.getType() \u003d\u003d Token.VAR) {\n            if (n.hasChildren() \u0026\u0026 n.getFirstChild().isQualifiedName()) {\n                aliases.put(n.getString(), n.getFirstChild());\n                aliasDefinitions.add(n);\n                t.getScope().undeclare(t.getScope().getVar(n.getString()));\n                return;\n            } else {\n                report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n            }\n        }\n    }\n    if (t.getScopeDepth() \u003e\u003d 2) {\n        if (n.getType() \u003d\u003d Token.NAME) {\n            if (NodeUtil.isAssignmentOp(parent)) {\n                report(t, n, GOOG_SCOPE_ALIAS_REDEFINED, n.getString());\n            }\n            Node aliasedNode \u003d aliases.get(n.getString());\n            if (t.getScope().getVar(n.getString()) \u003d\u003d null \u0026\u0026 aliasedNode !\u003d null) {\n                aliasUsages.add(new AliasedNode(n, aliasedNode));\n            }\n        }\n        if (n.getType() \u003d\u003d Token.RETURN) {\n            report(t, n, GOOG_SCOPE_USES_RETURN);\n        }\n        if (n.getType() \u003d\u003d Token.THIS) {\n            report(t, n, GOOG_SCOPE_REFERENCES_THIS);\n        }\n        JSDocInfo info \u003d n.getJSDocInfo();\n        if (info !\u003d null) {\n            for (Node node : info.getTypeNodes()) {\n                fixTypeNode(node);\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/ScopedAliases.java",
      "functionStartLine": 220,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,51 +1,53 @@\n @Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     if (isCallToScopeMethod(n)) {\n         if (!NodeUtil.isExpressionNode(parent)) {\n             report(t, n, GOOG_SCOPE_USED_IMPROPERLY);\n         }\n         if (n.getChildCount() !\u003d 2) {\n             report(t, n, GOOG_SCOPE_HAS_BAD_PARAMETERS);\n         } else {\n             Node anonymousFnNode \u003d n.getChildAtIndex(1);\n             if (!NodeUtil.isFunction(anonymousFnNode) || NodeUtil.getFunctionName(anonymousFnNode) !\u003d null || NodeUtil.getFnParameters(anonymousFnNode).hasChildren()) {\n                 report(t, anonymousFnNode, GOOG_SCOPE_HAS_BAD_PARAMETERS);\n             } else {\n                 scopeCalls.add(n);\n             }\n         }\n     }\n     if (t.getScopeDepth() \u003d\u003d 2) {\n         if (n.getType() \u003d\u003d Token.NAME \u0026\u0026 parent.getType() \u003d\u003d Token.VAR) {\n-            if (n.hasChildren() \u0026\u0026 n.isQualifiedName()) {\n+            if (n.hasChildren() \u0026\u0026 n.getFirstChild().isQualifiedName()) {\n                 aliases.put(n.getString(), n.getFirstChild());\n                 aliasDefinitions.add(n);\n                 t.getScope().undeclare(t.getScope().getVar(n.getString()));\n                 return;\n+            } else {\n+                report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n             }\n         }\n     }\n     if (t.getScopeDepth() \u003e\u003d 2) {\n         if (n.getType() \u003d\u003d Token.NAME) {\n             if (NodeUtil.isAssignmentOp(parent)) {\n                 report(t, n, GOOG_SCOPE_ALIAS_REDEFINED, n.getString());\n             }\n             Node aliasedNode \u003d aliases.get(n.getString());\n             if (t.getScope().getVar(n.getString()) \u003d\u003d null \u0026\u0026 aliasedNode !\u003d null) {\n                 aliasUsages.add(new AliasedNode(n, aliasedNode));\n             }\n         }\n         if (n.getType() \u003d\u003d Token.RETURN) {\n             report(t, n, GOOG_SCOPE_USES_RETURN);\n         }\n         if (n.getType() \u003d\u003d Token.THIS) {\n             report(t, n, GOOG_SCOPE_REFERENCES_THIS);\n         }\n         JSDocInfo info \u003d n.getJSDocInfo();\n         if (info !\u003d null) {\n             for (Node node : info.getTypeNodes()) {\n                 fixTypeNode(node);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "301ed5b03eb52debdc9b87929a45880eb2faf1fe": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/05/11 by robby\n\n        Support aliases in JsDoc + some additional tests.\n\n        R\u003dnick\n        DELTA\u003d311  (294 added, 2 deleted, 15 changed)\n\nChange on 2010/05/11 by nick\n\n        forward-declare type names that are dropped from the input.\n\n        R\u003dalan\n        DELTA\u003d31  (31 added, 0 deleted, 0 changed)\n\nChange on 2010/05/11 by nick\n\n        Verify that closure-compiler issue 157 is invalid.\n\n        R\u003drobert\n        DELTA\u003d4  (4 added, 0 deleted, 0 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dvflmak\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@208 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/11/10, 6:45 PM",
      "commitName": "301ed5b03eb52debdc9b87929a45880eb2faf1fe",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "5/11/10, 11:43 AM",
      "commitNameOld": "ffe67f22a342291ecfed36c1c6ee7c01186f9eff",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 0.29,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (isCallToScopeMethod(n)) {\n        if (!NodeUtil.isExpressionNode(parent)) {\n            report(t, n, GOOG_SCOPE_USED_IMPROPERLY);\n        }\n        if (n.getChildCount() !\u003d 2) {\n            report(t, n, GOOG_SCOPE_HAS_BAD_PARAMETERS);\n        } else {\n            Node anonymousFnNode \u003d n.getChildAtIndex(1);\n            if (!NodeUtil.isFunction(anonymousFnNode) || NodeUtil.getFunctionName(anonymousFnNode) !\u003d null || NodeUtil.getFnParameters(anonymousFnNode).hasChildren()) {\n                report(t, anonymousFnNode, GOOG_SCOPE_HAS_BAD_PARAMETERS);\n            } else {\n                scopeCalls.add(n);\n            }\n        }\n    }\n    if (t.getScopeDepth() \u003d\u003d 2) {\n        if (n.getType() \u003d\u003d Token.NAME \u0026\u0026 parent.getType() \u003d\u003d Token.VAR) {\n            if (n.hasChildren() \u0026\u0026 n.isQualifiedName()) {\n                aliases.put(n.getString(), n.getFirstChild());\n                aliasDefinitions.add(n);\n                t.getScope().undeclare(t.getScope().getVar(n.getString()));\n                return;\n            }\n        }\n    }\n    if (t.getScopeDepth() \u003e\u003d 2) {\n        if (n.getType() \u003d\u003d Token.NAME) {\n            if (NodeUtil.isAssignmentOp(parent)) {\n                report(t, n, GOOG_SCOPE_ALIAS_REDEFINED, n.getString());\n            }\n            Node aliasedNode \u003d aliases.get(n.getString());\n            if (t.getScope().getVar(n.getString()) \u003d\u003d null \u0026\u0026 aliasedNode !\u003d null) {\n                aliasUsages.add(new AliasedNode(n, aliasedNode));\n            }\n        }\n        if (n.getType() \u003d\u003d Token.RETURN) {\n            report(t, n, GOOG_SCOPE_USES_RETURN);\n        }\n        if (n.getType() \u003d\u003d Token.THIS) {\n            report(t, n, GOOG_SCOPE_REFERENCES_THIS);\n        }\n        JSDocInfo info \u003d n.getJSDocInfo();\n        if (info !\u003d null) {\n            for (Node node : info.getTypeNodes()) {\n                fixTypeNode(node);\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/ScopedAliases.java",
      "functionStartLine": 216,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,45 +1,51 @@\n @Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     if (isCallToScopeMethod(n)) {\n         if (!NodeUtil.isExpressionNode(parent)) {\n             report(t, n, GOOG_SCOPE_USED_IMPROPERLY);\n         }\n         if (n.getChildCount() !\u003d 2) {\n             report(t, n, GOOG_SCOPE_HAS_BAD_PARAMETERS);\n         } else {\n             Node anonymousFnNode \u003d n.getChildAtIndex(1);\n             if (!NodeUtil.isFunction(anonymousFnNode) || NodeUtil.getFunctionName(anonymousFnNode) !\u003d null || NodeUtil.getFnParameters(anonymousFnNode).hasChildren()) {\n                 report(t, anonymousFnNode, GOOG_SCOPE_HAS_BAD_PARAMETERS);\n             } else {\n                 scopeCalls.add(n);\n             }\n         }\n     }\n     if (t.getScopeDepth() \u003d\u003d 2) {\n         if (n.getType() \u003d\u003d Token.NAME \u0026\u0026 parent.getType() \u003d\u003d Token.VAR) {\n             if (n.hasChildren() \u0026\u0026 n.isQualifiedName()) {\n                 aliases.put(n.getString(), n.getFirstChild());\n                 aliasDefinitions.add(n);\n                 t.getScope().undeclare(t.getScope().getVar(n.getString()));\n                 return;\n             }\n         }\n     }\n     if (t.getScopeDepth() \u003e\u003d 2) {\n         if (n.getType() \u003d\u003d Token.NAME) {\n             if (NodeUtil.isAssignmentOp(parent)) {\n                 report(t, n, GOOG_SCOPE_ALIAS_REDEFINED, n.getString());\n             }\n             Node aliasedNode \u003d aliases.get(n.getString());\n             if (t.getScope().getVar(n.getString()) \u003d\u003d null \u0026\u0026 aliasedNode !\u003d null) {\n                 aliasUsages.add(new AliasedNode(n, aliasedNode));\n             }\n         }\n         if (n.getType() \u003d\u003d Token.RETURN) {\n             report(t, n, GOOG_SCOPE_USES_RETURN);\n         }\n         if (n.getType() \u003d\u003d Token.THIS) {\n             report(t, n, GOOG_SCOPE_REFERENCES_THIS);\n         }\n+        JSDocInfo info \u003d n.getJSDocInfo();\n+        if (info !\u003d null) {\n+            for (Node node : info.getTypeNodes()) {\n+                fixTypeNode(node);\n+            }\n+        }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ffe67f22a342291ecfed36c1c6ee7c01186f9eff": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/05/07 by robby\n\n        Add diagnostics to the ScopedAliases pass.\n\n        R\u003dnick\n        DELTA\u003d141  (95 added, 1 deleted, 45 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dvohmth\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@205 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/11/10, 11:43 AM",
      "commitName": "ffe67f22a342291ecfed36c1c6ee7c01186f9eff",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "5/4/10, 7:39 AM",
      "commitNameOld": "58c3e4ce1d17ec619bcc4964bdeebc676f93567d",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 7.17,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (isCallToScopeMethod(n)) {\n        if (!NodeUtil.isExpressionNode(parent)) {\n            report(t, n, GOOG_SCOPE_USED_IMPROPERLY);\n        }\n        if (n.getChildCount() !\u003d 2) {\n            report(t, n, GOOG_SCOPE_HAS_BAD_PARAMETERS);\n        } else {\n            Node anonymousFnNode \u003d n.getChildAtIndex(1);\n            if (!NodeUtil.isFunction(anonymousFnNode) || NodeUtil.getFunctionName(anonymousFnNode) !\u003d null || NodeUtil.getFnParameters(anonymousFnNode).hasChildren()) {\n                report(t, anonymousFnNode, GOOG_SCOPE_HAS_BAD_PARAMETERS);\n            } else {\n                scopeCalls.add(n);\n            }\n        }\n    }\n    if (t.getScopeDepth() \u003d\u003d 2) {\n        if (n.getType() \u003d\u003d Token.NAME \u0026\u0026 parent.getType() \u003d\u003d Token.VAR) {\n            if (n.hasChildren() \u0026\u0026 n.isQualifiedName()) {\n                aliases.put(n.getString(), n.getFirstChild());\n                aliasDefinitions.add(n);\n                t.getScope().undeclare(t.getScope().getVar(n.getString()));\n                return;\n            }\n        }\n    }\n    if (t.getScopeDepth() \u003e\u003d 2) {\n        if (n.getType() \u003d\u003d Token.NAME) {\n            if (NodeUtil.isAssignmentOp(parent)) {\n                report(t, n, GOOG_SCOPE_ALIAS_REDEFINED, n.getString());\n            }\n            Node aliasedNode \u003d aliases.get(n.getString());\n            if (t.getScope().getVar(n.getString()) \u003d\u003d null \u0026\u0026 aliasedNode !\u003d null) {\n                aliasUsages.add(new AliasedNode(n, aliasedNode));\n            }\n        }\n        if (n.getType() \u003d\u003d Token.RETURN) {\n            report(t, n, GOOG_SCOPE_USES_RETURN);\n        }\n        if (n.getType() \u003d\u003d Token.THIS) {\n            report(t, n, GOOG_SCOPE_REFERENCES_THIS);\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/ScopedAliases.java",
      "functionStartLine": 200,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,24 +1,45 @@\n @Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     if (isCallToScopeMethod(n)) {\n-        scopeCalls.add(n);\n+        if (!NodeUtil.isExpressionNode(parent)) {\n+            report(t, n, GOOG_SCOPE_USED_IMPROPERLY);\n+        }\n+        if (n.getChildCount() !\u003d 2) {\n+            report(t, n, GOOG_SCOPE_HAS_BAD_PARAMETERS);\n+        } else {\n+            Node anonymousFnNode \u003d n.getChildAtIndex(1);\n+            if (!NodeUtil.isFunction(anonymousFnNode) || NodeUtil.getFunctionName(anonymousFnNode) !\u003d null || NodeUtil.getFnParameters(anonymousFnNode).hasChildren()) {\n+                report(t, anonymousFnNode, GOOG_SCOPE_HAS_BAD_PARAMETERS);\n+            } else {\n+                scopeCalls.add(n);\n+            }\n+        }\n     }\n     if (t.getScopeDepth() \u003d\u003d 2) {\n         if (n.getType() \u003d\u003d Token.NAME \u0026\u0026 parent.getType() \u003d\u003d Token.VAR) {\n             if (n.hasChildren() \u0026\u0026 n.isQualifiedName()) {\n                 aliases.put(n.getString(), n.getFirstChild());\n                 aliasDefinitions.add(n);\n                 t.getScope().undeclare(t.getScope().getVar(n.getString()));\n                 return;\n             }\n         }\n     }\n     if (t.getScopeDepth() \u003e\u003d 2) {\n         if (n.getType() \u003d\u003d Token.NAME) {\n+            if (NodeUtil.isAssignmentOp(parent)) {\n+                report(t, n, GOOG_SCOPE_ALIAS_REDEFINED, n.getString());\n+            }\n             Node aliasedNode \u003d aliases.get(n.getString());\n             if (t.getScope().getVar(n.getString()) \u003d\u003d null \u0026\u0026 aliasedNode !\u003d null) {\n                 aliasUsages.add(new AliasedNode(n, aliasedNode));\n             }\n         }\n+        if (n.getType() \u003d\u003d Token.RETURN) {\n+            report(t, n, GOOG_SCOPE_USES_RETURN);\n+        }\n+        if (n.getType() \u003d\u003d Token.THIS) {\n+            report(t, n, GOOG_SCOPE_REFERENCES_THIS);\n+        }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "58c3e4ce1d17ec619bcc4964bdeebc676f93567d": {
      "type": "Yintroduced",
      "commitMessage": "\n\nChange on 2010/05/03 by robby\n\n        Preliminary: goog.scope support for closure-compiler\n\n        R\u003dnick,john\n        DELTA\u003d318  (318 added, 0 deleted, 0 changed)\n\nChange on 2010/05/03 by nick\n\n        Add a bit more smarts to type resolution. Also, give it a\n        \"forceResolve\" method so that it will try to resolve type names,\n        even if the registry is in a lazy mode.\n\n        R\u003drobert\n        DELTA\u003d205  (133 added, 54 deleted, 18 changed)\n\nChange on 2010/05/03 by alan\n\n        Enable Flow Sensitive Inlining by default. Passes GMail automation test.\n\n        R\u003dnick\n        DELTA\u003d1  (0 added, 0 deleted, 1 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dcmvhwl\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@202 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/4/10, 7:39 AM",
      "commitName": "58c3e4ce1d17ec619bcc4964bdeebc676f93567d",
      "commitAuthor": "Nicholas.J.Santos",
      "diff": "@@ -0,0 +1,24 @@\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (isCallToScopeMethod(n)) {\n+        scopeCalls.add(n);\n+    }\n+    if (t.getScopeDepth() \u003d\u003d 2) {\n+        if (n.getType() \u003d\u003d Token.NAME \u0026\u0026 parent.getType() \u003d\u003d Token.VAR) {\n+            if (n.hasChildren() \u0026\u0026 n.isQualifiedName()) {\n+                aliases.put(n.getString(), n.getFirstChild());\n+                aliasDefinitions.add(n);\n+                t.getScope().undeclare(t.getScope().getVar(n.getString()));\n+                return;\n+            }\n+        }\n+    }\n+    if (t.getScopeDepth() \u003e\u003d 2) {\n+        if (n.getType() \u003d\u003d Token.NAME) {\n+            Node aliasedNode \u003d aliases.get(n.getString());\n+            if (t.getScope().getVar(n.getString()) \u003d\u003d null \u0026\u0026 aliasedNode !\u003d null) {\n+                aliasUsages.add(new AliasedNode(n, aliasedNode));\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (isCallToScopeMethod(n)) {\n        scopeCalls.add(n);\n    }\n    if (t.getScopeDepth() \u003d\u003d 2) {\n        if (n.getType() \u003d\u003d Token.NAME \u0026\u0026 parent.getType() \u003d\u003d Token.VAR) {\n            if (n.hasChildren() \u0026\u0026 n.isQualifiedName()) {\n                aliases.put(n.getString(), n.getFirstChild());\n                aliasDefinitions.add(n);\n                t.getScope().undeclare(t.getScope().getVar(n.getString()));\n                return;\n            }\n        }\n    }\n    if (t.getScopeDepth() \u003e\u003d 2) {\n        if (n.getType() \u003d\u003d Token.NAME) {\n            Node aliasedNode \u003d aliases.get(n.getString());\n            if (t.getScope().getVar(n.getString()) \u003d\u003d null \u0026\u0026 aliasedNode !\u003d null) {\n                aliasUsages.add(new AliasedNode(n, aliasedNode));\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/ScopedAliases.java",
      "functionStartLine": 164,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}