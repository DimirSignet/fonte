{
  "origin": "codeshovel",
  "repositoryName": "Closure-59b",
  "repositoryPath": "/tmp/Closure-59b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Denormalize.java",
  "functionName": "maybeCollapseIntoForStatements",
  "functionId": "maybeCollapseIntoForStatements___n-Node__parent-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/Denormalize.java",
  "functionAnnotation": "",
  "functionDoc": "Collapse VARs and EXPR_RESULT node into FOR loop initializers where\npossible.\n",
  "functionStartLine": 65,
  "functionEndLine": 127,
  "numCommitsSeen": 10,
  "timeTaken": 334,
  "changeHistory": [
    "82ba14e2d8c636f707c65249f8968e89f72718d0",
    "3bee5d740c96572faea4b9fb8b632e0e07b13cbb",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "82ba14e2d8c636f707c65249f8968e89f72718d0": "Ybodychange",
    "3bee5d740c96572faea4b9fb8b632e0e07b13cbb": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "82ba14e2d8c636f707c65249f8968e89f72718d0": {
      "type": "Ybodychange",
      "commitMessage": "\nA little more normalization: remove VAR declarations from FOR-IN looops.\n\nR\u003dnicksantos\nDELTA\u003d84  (71 added, 1 deleted, 12 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d207783\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@412 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/8/10, 4:48 PM",
      "commitName": "82ba14e2d8c636f707c65249f8968e89f72718d0",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "7/2/10, 12:32 PM",
      "commitNameOld": "6afe53cb82f87071567808d816dea524a74ae3ab",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 68.18,
      "commitsBetweenForRepo": 146,
      "commitsBetweenForFile": 1,
      "actualSource": "private void maybeCollapseIntoForStatements(Node n, Node parent) {\n    if (parent \u003d\u003d null || !NodeUtil.isStatementBlock(parent)) {\n        return;\n    }\n    if (!NodeUtil.isExpressionNode(n) \u0026\u0026 !NodeUtil.isVar(n)) {\n        return;\n    }\n    Node nextSibling \u003d n.getNext();\n    if (nextSibling \u003d\u003d null) {\n        return;\n    } else if (NodeUtil.isForIn(nextSibling)) {\n        Node forNode \u003d nextSibling;\n        Node forVar \u003d forNode.getFirstChild();\n        if (NodeUtil.isName(forVar) \u0026\u0026 NodeUtil.isVar(n) \u0026\u0026 n.hasOneChild()) {\n            Node name \u003d n.getFirstChild();\n            if (!name.hasChildren() \u0026\u0026 forVar.getString().equals(name.getString())) {\n                parent.removeChild(n);\n                forNode.replaceChild(forVar, n);\n                compiler.reportCodeChange();\n            }\n        }\n    } else if (nextSibling.getType() \u003d\u003d Token.FOR \u0026\u0026 nextSibling.getFirstChild().getType() \u003d\u003d Token.EMPTY) {\n        if (NodeUtil.containsType(n, Token.IN)) {\n            return;\n        }\n        Node forNode \u003d nextSibling;\n        Node oldInitializer \u003d forNode.getFirstChild();\n        parent.removeChild(n);\n        Node newInitializer;\n        if (NodeUtil.isVar(n)) {\n            newInitializer \u003d n;\n        } else {\n            Preconditions.checkState(n.hasOneChild());\n            newInitializer \u003d n.getFirstChild();\n            n.removeChild(newInitializer);\n        }\n        forNode.replaceChild(oldInitializer, newInitializer);\n        compiler.reportCodeChange();\n    }\n}",
      "path": "src/com/google/javascript/jscomp/Denormalize.java",
      "functionStartLine": 65,
      "functionName": "maybeCollapseIntoForStatements",
      "functionAnnotation": "",
      "functionDoc": "Collapse VARs and EXPR_RESULT node into FOR loop initializers where\npossible.\n",
      "diff": "@@ -1,27 +1,40 @@\n private void maybeCollapseIntoForStatements(Node n, Node parent) {\n     if (parent \u003d\u003d null || !NodeUtil.isStatementBlock(parent)) {\n         return;\n     }\n     if (!NodeUtil.isExpressionNode(n) \u0026\u0026 !NodeUtil.isVar(n)) {\n         return;\n     }\n     Node nextSibling \u003d n.getNext();\n-    if (nextSibling !\u003d null \u0026\u0026 nextSibling.getType() \u003d\u003d Token.FOR \u0026\u0026 !NodeUtil.isForIn(nextSibling) \u0026\u0026 nextSibling.getFirstChild().getType() \u003d\u003d Token.EMPTY) {\n+    if (nextSibling \u003d\u003d null) {\n+        return;\n+    } else if (NodeUtil.isForIn(nextSibling)) {\n+        Node forNode \u003d nextSibling;\n+        Node forVar \u003d forNode.getFirstChild();\n+        if (NodeUtil.isName(forVar) \u0026\u0026 NodeUtil.isVar(n) \u0026\u0026 n.hasOneChild()) {\n+            Node name \u003d n.getFirstChild();\n+            if (!name.hasChildren() \u0026\u0026 forVar.getString().equals(name.getString())) {\n+                parent.removeChild(n);\n+                forNode.replaceChild(forVar, n);\n+                compiler.reportCodeChange();\n+            }\n+        }\n+    } else if (nextSibling.getType() \u003d\u003d Token.FOR \u0026\u0026 nextSibling.getFirstChild().getType() \u003d\u003d Token.EMPTY) {\n         if (NodeUtil.containsType(n, Token.IN)) {\n             return;\n         }\n         Node forNode \u003d nextSibling;\n         Node oldInitializer \u003d forNode.getFirstChild();\n         parent.removeChild(n);\n         Node newInitializer;\n         if (NodeUtil.isVar(n)) {\n             newInitializer \u003d n;\n         } else {\n             Preconditions.checkState(n.hasOneChild());\n             newInitializer \u003d n.getFirstChild();\n             n.removeChild(newInitializer);\n         }\n         forNode.replaceChild(oldInitializer, newInitializer);\n         compiler.reportCodeChange();\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3bee5d740c96572faea4b9fb8b632e0e07b13cbb": {
      "type": "Ybodychange",
      "commitMessage": "Add a mechanism for inlining local vars, and turn it on by default.\nWarnings for \"ambiguous\" function definitions.\nRefactoring and renaming of some method names.\nUse \"\u003d\" optionality annotation in externs.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@15 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/25/09, 6:53 AM",
      "commitName": "3bee5d740c96572faea4b9fb8b632e0e07b13cbb",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/3/09, 3:51 PM",
      "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 21.63,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "actualSource": "private void maybeCollapseIntoForStatements(Node n, Node parent) {\n    if (parent \u003d\u003d null || !NodeUtil.isStatementBlock(parent)) {\n        return;\n    }\n    if (!NodeUtil.isExpressionNode(n) \u0026\u0026 !NodeUtil.isVar(n)) {\n        return;\n    }\n    Node nextSibling \u003d n.getNext();\n    if (nextSibling !\u003d null \u0026\u0026 nextSibling.getType() \u003d\u003d Token.FOR \u0026\u0026 !NodeUtil.isForIn(nextSibling) \u0026\u0026 nextSibling.getFirstChild().getType() \u003d\u003d Token.EMPTY) {\n        if (NodeUtil.containsType(n, Token.IN)) {\n            return;\n        }\n        Node forNode \u003d nextSibling;\n        Node oldInitializer \u003d forNode.getFirstChild();\n        parent.removeChild(n);\n        Node newInitializer;\n        if (NodeUtil.isVar(n)) {\n            newInitializer \u003d n;\n        } else {\n            Preconditions.checkState(n.hasOneChild());\n            newInitializer \u003d n.getFirstChild();\n            n.removeChild(newInitializer);\n        }\n        forNode.replaceChild(oldInitializer, newInitializer);\n        compiler.reportCodeChange();\n    }\n}",
      "path": "src/com/google/javascript/jscomp/Denormalize.java",
      "functionStartLine": 64,
      "functionName": "maybeCollapseIntoForStatements",
      "functionAnnotation": "",
      "functionDoc": "Collapse VARs and EXPR_RESULT node into FOR loop initializers where\npossible.\n",
      "diff": "@@ -1,27 +1,27 @@\n private void maybeCollapseIntoForStatements(Node n, Node parent) {\n     if (parent \u003d\u003d null || !NodeUtil.isStatementBlock(parent)) {\n         return;\n     }\n     if (!NodeUtil.isExpressionNode(n) \u0026\u0026 !NodeUtil.isVar(n)) {\n         return;\n     }\n     Node nextSibling \u003d n.getNext();\n-    if (nextSibling !\u003d null \u0026\u0026 nextSibling.getType() \u003d\u003d Token.FOR \u0026\u0026 nextSibling.getChildCount() \u003d\u003d 4 \u0026\u0026 nextSibling.getFirstChild().getType() \u003d\u003d Token.EMPTY) {\n+    if (nextSibling !\u003d null \u0026\u0026 nextSibling.getType() \u003d\u003d Token.FOR \u0026\u0026 !NodeUtil.isForIn(nextSibling) \u0026\u0026 nextSibling.getFirstChild().getType() \u003d\u003d Token.EMPTY) {\n         if (NodeUtil.containsType(n, Token.IN)) {\n             return;\n         }\n         Node forNode \u003d nextSibling;\n         Node oldInitializer \u003d forNode.getFirstChild();\n         parent.removeChild(n);\n         Node newInitializer;\n         if (NodeUtil.isVar(n)) {\n             newInitializer \u003d n;\n         } else {\n             Preconditions.checkState(n.hasOneChild());\n             newInitializer \u003d n.getFirstChild();\n             n.removeChild(newInitializer);\n         }\n         forNode.replaceChild(oldInitializer, newInitializer);\n         compiler.reportCodeChange();\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,27 @@\n+private void maybeCollapseIntoForStatements(Node n, Node parent) {\n+    if (parent \u003d\u003d null || !NodeUtil.isStatementBlock(parent)) {\n+        return;\n+    }\n+    if (!NodeUtil.isExpressionNode(n) \u0026\u0026 !NodeUtil.isVar(n)) {\n+        return;\n+    }\n+    Node nextSibling \u003d n.getNext();\n+    if (nextSibling !\u003d null \u0026\u0026 nextSibling.getType() \u003d\u003d Token.FOR \u0026\u0026 nextSibling.getChildCount() \u003d\u003d 4 \u0026\u0026 nextSibling.getFirstChild().getType() \u003d\u003d Token.EMPTY) {\n+        if (NodeUtil.containsType(n, Token.IN)) {\n+            return;\n+        }\n+        Node forNode \u003d nextSibling;\n+        Node oldInitializer \u003d forNode.getFirstChild();\n+        parent.removeChild(n);\n+        Node newInitializer;\n+        if (NodeUtil.isVar(n)) {\n+            newInitializer \u003d n;\n+        } else {\n+            Preconditions.checkState(n.hasOneChild());\n+            newInitializer \u003d n.getFirstChild();\n+            n.removeChild(newInitializer);\n+        }\n+        forNode.replaceChild(oldInitializer, newInitializer);\n+        compiler.reportCodeChange();\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void maybeCollapseIntoForStatements(Node n, Node parent) {\n    if (parent \u003d\u003d null || !NodeUtil.isStatementBlock(parent)) {\n        return;\n    }\n    if (!NodeUtil.isExpressionNode(n) \u0026\u0026 !NodeUtil.isVar(n)) {\n        return;\n    }\n    Node nextSibling \u003d n.getNext();\n    if (nextSibling !\u003d null \u0026\u0026 nextSibling.getType() \u003d\u003d Token.FOR \u0026\u0026 nextSibling.getChildCount() \u003d\u003d 4 \u0026\u0026 nextSibling.getFirstChild().getType() \u003d\u003d Token.EMPTY) {\n        if (NodeUtil.containsType(n, Token.IN)) {\n            return;\n        }\n        Node forNode \u003d nextSibling;\n        Node oldInitializer \u003d forNode.getFirstChild();\n        parent.removeChild(n);\n        Node newInitializer;\n        if (NodeUtil.isVar(n)) {\n            newInitializer \u003d n;\n        } else {\n            Preconditions.checkState(n.hasOneChild());\n            newInitializer \u003d n.getFirstChild();\n            n.removeChild(newInitializer);\n        }\n        forNode.replaceChild(oldInitializer, newInitializer);\n        compiler.reportCodeChange();\n    }\n}",
      "path": "src/com/google/javascript/jscomp/Denormalize.java",
      "functionStartLine": 64,
      "functionName": "maybeCollapseIntoForStatements",
      "functionAnnotation": "",
      "functionDoc": "Collapse VARs and EXPR_RESULT node into FOR loop initializers where\npossible.\n"
    }
  }
}