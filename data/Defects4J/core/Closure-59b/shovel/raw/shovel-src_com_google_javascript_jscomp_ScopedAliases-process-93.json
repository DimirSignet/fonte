{
  "origin": "codeshovel",
  "repositoryName": "Closure-59b",
  "repositoryPath": "/tmp/Closure-59b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ScopedAliases.java",
  "functionName": "process",
  "functionId": "process___externs-Node__root-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/ScopedAliases.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 93,
  "functionEndLine": 95,
  "numCommitsSeen": 15,
  "timeTaken": 1072,
  "changeHistory": [
    "87c1e605e2539c756e53ff931b18a36c83216779",
    "8c4a625cdec89e6b1fa452fbb73c6f8d4c56b701",
    "3c4504a78a84e4715439cddb4028c25be2ce308f",
    "301ed5b03eb52debdc9b87929a45880eb2faf1fe",
    "ffe67f22a342291ecfed36c1c6ee7c01186f9eff",
    "58c3e4ce1d17ec619bcc4964bdeebc676f93567d"
  ],
  "changeHistoryShort": {
    "87c1e605e2539c756e53ff931b18a36c83216779": "Ybodychange",
    "8c4a625cdec89e6b1fa452fbb73c6f8d4c56b701": "Yformatchange",
    "3c4504a78a84e4715439cddb4028c25be2ce308f": "Ybodychange",
    "301ed5b03eb52debdc9b87929a45880eb2faf1fe": "Ybodychange",
    "ffe67f22a342291ecfed36c1c6ee7c01186f9eff": "Ybodychange",
    "58c3e4ce1d17ec619bcc4964bdeebc676f93567d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "87c1e605e2539c756e53ff931b18a36c83216779": {
      "type": "Ybodychange",
      "commitMessage": "\nmake closureGoogScopeAliases pass hot-swappable\n\nR\u003dnicksantos\nDELTA\u003d52  (37 added, 2 deleted, 13 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1943\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1112 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/17/11, 3:27 PM",
      "commitName": "87c1e605e2539c756e53ff931b18a36c83216779",
      "commitAuthor": "bashir@google.com",
      "commitDateOld": "5/16/11, 8:14 AM",
      "commitNameOld": "b783533aac33c06fc34ed4c3f284aa8411ea0c54",
      "commitAuthorOld": "tylerg@google.com",
      "daysBetweenCommits": 1.3,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void process(Node externs, Node root) {\n    hotSwapScript(root);\n}",
      "path": "src/com/google/javascript/jscomp/ScopedAliases.java",
      "functionStartLine": 93,
      "functionName": "process",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,27 +1,4 @@\n @Override\n public void process(Node externs, Node root) {\n-    Traversal traversal \u003d new Traversal();\n-    NodeTraversal.traverse(compiler, root, traversal);\n-    if (!traversal.hasErrors()) {\n-        for (AliasUsage aliasUsage : traversal.getAliasUsages()) {\n-            aliasUsage.applyAlias();\n-        }\n-        for (Node aliasDefinition : traversal.getAliasDefinitions()) {\n-            if (aliasDefinition.getParent().getType() \u003d\u003d Token.VAR \u0026\u0026 aliasDefinition.getParent().hasOneChild()) {\n-                aliasDefinition.getParent().detachFromParent();\n-            } else {\n-                aliasDefinition.detachFromParent();\n-            }\n-        }\n-        for (Node scopeCall : traversal.getScopeCalls()) {\n-            Node expressionWithScopeCall \u003d scopeCall.getParent();\n-            Node scopeClosureBlock \u003d scopeCall.getLastChild().getLastChild();\n-            scopeClosureBlock.detachFromParent();\n-            expressionWithScopeCall.getParent().replaceChild(expressionWithScopeCall, scopeClosureBlock);\n-            NodeUtil.tryMergeBlock(scopeClosureBlock);\n-        }\n-        if (traversal.getAliasUsages().size() \u003e 0 || traversal.getAliasDefinitions().size() \u003e 0 || traversal.getScopeCalls().size() \u003e 0) {\n-            compiler.reportCodeChange();\n-        }\n-    }\n+    hotSwapScript(root);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "8c4a625cdec89e6b1fa452fbb73c6f8d4c56b701": {
      "type": "Yformatchange",
      "commitMessage": "\nImplement ScopedAliases to record Aliases from goog.scope blocks.\nEasymock Dependency pulleded out for now to get the Changes working.  Will pull in and update tests as soon as dependency can be added to builds.\n\nR\u003dnicksantos\nDELTA\u003d206  (188 added, 2 deleted, 16 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1371\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@999 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/12/11, 11:46 AM",
      "commitName": "8c4a625cdec89e6b1fa452fbb73c6f8d4c56b701",
      "commitAuthor": "tylerg@google.com",
      "commitDateOld": "4/11/11, 4:01 PM",
      "commitNameOld": "f5bf89311e441f2c074f5f998881454cbeda804b",
      "commitAuthorOld": "jtarrio@google.com",
      "daysBetweenCommits": 0.82,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void process(Node externs, Node root) {\n    Traversal traversal \u003d new Traversal();\n    NodeTraversal.traverse(compiler, root, traversal);\n    if (!traversal.hasErrors()) {\n        for (AliasUsage aliasUsage : traversal.getAliasUsages()) {\n            aliasUsage.applyAlias();\n        }\n        for (Node aliasDefinition : traversal.getAliasDefinitions()) {\n            if (aliasDefinition.getParent().getType() \u003d\u003d Token.VAR \u0026\u0026 aliasDefinition.getParent().hasOneChild()) {\n                aliasDefinition.getParent().detachFromParent();\n            } else {\n                aliasDefinition.detachFromParent();\n            }\n        }\n        for (Node scopeCall : traversal.getScopeCalls()) {\n            Node expressionWithScopeCall \u003d scopeCall.getParent();\n            Node scopeClosureBlock \u003d scopeCall.getLastChild().getLastChild();\n            scopeClosureBlock.detachFromParent();\n            expressionWithScopeCall.getParent().replaceChild(expressionWithScopeCall, scopeClosureBlock);\n            NodeUtil.tryMergeBlock(scopeClosureBlock);\n        }\n        if (traversal.getAliasUsages().size() \u003e 0 || traversal.getAliasDefinitions().size() \u003e 0 || traversal.getScopeCalls().size() \u003e 0) {\n            compiler.reportCodeChange();\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/ScopedAliases.java",
      "functionStartLine": 93,
      "functionName": "process",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "3c4504a78a84e4715439cddb4028c25be2ce308f": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/07/13 17:21:32 by dhans\n\n        A few optimizations which replace getChildCount with more efficient functions for Node class.\n\n        R\u003djohnlenz\n        DELTA\u003d13  (2 added, 0 deleted, 11 changed)\n\nChange on 2010/07/13 18:08:42 by johnlenz\n\n        Add info for newly json.jar to README\n\n        R\u003dnicksantos\n        DELTA\u003d13  (13 added, 0 deleted, 0 changed)\n\nChange on 2010/07/14 08:51:02 by johnlenz\n\n        Attempt to add \"@nosideeffects\" to appropriate dom methods.\n\n        R\u003dgboyer\n        DELTA\u003d93  (91 added, 0 deleted, 2 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d48012\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@276 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/14/10, 10:45 AM",
      "commitName": "3c4504a78a84e4715439cddb4028c25be2ce308f",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "7/13/10, 3:28 PM",
      "commitNameOld": "660e7b525f76cd64d10ccc8724a1b0e0c501d1d9",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 0.8,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void process(Node externs, Node root) {\n    Traversal traversal \u003d new Traversal();\n    NodeTraversal.traverse(compiler, root, traversal);\n    if (!traversal.hasErrors()) {\n        for (AliasUsage aliasUsage : traversal.getAliasUsages()) {\n            aliasUsage.applyAlias();\n        }\n        for (Node aliasDefinition : traversal.getAliasDefinitions()) {\n            if (aliasDefinition.getParent().getType() \u003d\u003d Token.VAR \u0026\u0026 aliasDefinition.getParent().hasOneChild()) {\n                aliasDefinition.getParent().detachFromParent();\n            } else {\n                aliasDefinition.detachFromParent();\n            }\n        }\n        for (Node scopeCall : traversal.getScopeCalls()) {\n            Node expressionWithScopeCall \u003d scopeCall.getParent();\n            Node scopeClosureBlock \u003d scopeCall.getLastChild().getLastChild();\n            scopeClosureBlock.detachFromParent();\n            expressionWithScopeCall.getParent().replaceChild(expressionWithScopeCall, scopeClosureBlock);\n            NodeUtil.tryMergeBlock(scopeClosureBlock);\n        }\n        if (traversal.getAliasUsages().size() \u003e 0 || traversal.getAliasDefinitions().size() \u003e 0 || traversal.getScopeCalls().size() \u003e 0) {\n            compiler.reportCodeChange();\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/ScopedAliases.java",
      "functionStartLine": 87,
      "functionName": "process",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,27 +1,27 @@\n @Override\n public void process(Node externs, Node root) {\n     Traversal traversal \u003d new Traversal();\n     NodeTraversal.traverse(compiler, root, traversal);\n     if (!traversal.hasErrors()) {\n         for (AliasUsage aliasUsage : traversal.getAliasUsages()) {\n             aliasUsage.applyAlias();\n         }\n         for (Node aliasDefinition : traversal.getAliasDefinitions()) {\n-            if (aliasDefinition.getParent().getType() \u003d\u003d Token.VAR \u0026\u0026 aliasDefinition.getParent().getChildCount() \u003d\u003d 1) {\n+            if (aliasDefinition.getParent().getType() \u003d\u003d Token.VAR \u0026\u0026 aliasDefinition.getParent().hasOneChild()) {\n                 aliasDefinition.getParent().detachFromParent();\n             } else {\n                 aliasDefinition.detachFromParent();\n             }\n         }\n         for (Node scopeCall : traversal.getScopeCalls()) {\n             Node expressionWithScopeCall \u003d scopeCall.getParent();\n             Node scopeClosureBlock \u003d scopeCall.getLastChild().getLastChild();\n             scopeClosureBlock.detachFromParent();\n             expressionWithScopeCall.getParent().replaceChild(expressionWithScopeCall, scopeClosureBlock);\n             NodeUtil.tryMergeBlock(scopeClosureBlock);\n         }\n         if (traversal.getAliasUsages().size() \u003e 0 || traversal.getAliasDefinitions().size() \u003e 0 || traversal.getScopeCalls().size() \u003e 0) {\n             compiler.reportCodeChange();\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "301ed5b03eb52debdc9b87929a45880eb2faf1fe": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/05/11 by robby\n\n        Support aliases in JsDoc + some additional tests.\n\n        R\u003dnick\n        DELTA\u003d311  (294 added, 2 deleted, 15 changed)\n\nChange on 2010/05/11 by nick\n\n        forward-declare type names that are dropped from the input.\n\n        R\u003dalan\n        DELTA\u003d31  (31 added, 0 deleted, 0 changed)\n\nChange on 2010/05/11 by nick\n\n        Verify that closure-compiler issue 157 is invalid.\n\n        R\u003drobert\n        DELTA\u003d4  (4 added, 0 deleted, 0 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dvflmak\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@208 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/11/10, 6:45 PM",
      "commitName": "301ed5b03eb52debdc9b87929a45880eb2faf1fe",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "5/11/10, 11:43 AM",
      "commitNameOld": "ffe67f22a342291ecfed36c1c6ee7c01186f9eff",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 0.29,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void process(Node externs, Node root) {\n    Traversal traversal \u003d new Traversal();\n    NodeTraversal.traverse(compiler, root, traversal);\n    if (!traversal.hasErrors()) {\n        for (AliasUsage aliasUsage : traversal.getAliasUsages()) {\n            aliasUsage.applyAlias();\n        }\n        for (Node aliasDefinition : traversal.getAliasDefinitions()) {\n            if (aliasDefinition.getParent().getType() \u003d\u003d Token.VAR \u0026\u0026 aliasDefinition.getParent().getChildCount() \u003d\u003d 1) {\n                aliasDefinition.getParent().detachFromParent();\n            } else {\n                aliasDefinition.detachFromParent();\n            }\n        }\n        for (Node scopeCall : traversal.getScopeCalls()) {\n            Node expressionWithScopeCall \u003d scopeCall.getParent();\n            Node scopeClosureBlock \u003d scopeCall.getLastChild().getLastChild();\n            scopeClosureBlock.detachFromParent();\n            expressionWithScopeCall.getParent().replaceChild(expressionWithScopeCall, scopeClosureBlock);\n            NodeUtil.tryMergeBlock(scopeClosureBlock);\n        }\n        if (traversal.getAliasUsages().size() \u003e 0 || traversal.getAliasDefinitions().size() \u003e 0 || traversal.getScopeCalls().size() \u003e 0) {\n            compiler.reportCodeChange();\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/ScopedAliases.java",
      "functionStartLine": 78,
      "functionName": "process",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,27 +1,27 @@\n @Override\n public void process(Node externs, Node root) {\n     Traversal traversal \u003d new Traversal();\n     NodeTraversal.traverse(compiler, root, traversal);\n     if (!traversal.hasErrors()) {\n-        for (AliasedNode entry : traversal.getAliasUsages()) {\n-            entry.getAliasReference().getParent().replaceChild(entry.getAliasReference(), entry.getAliasDefinition().cloneTree());\n+        for (AliasUsage aliasUsage : traversal.getAliasUsages()) {\n+            aliasUsage.applyAlias();\n         }\n         for (Node aliasDefinition : traversal.getAliasDefinitions()) {\n             if (aliasDefinition.getParent().getType() \u003d\u003d Token.VAR \u0026\u0026 aliasDefinition.getParent().getChildCount() \u003d\u003d 1) {\n                 aliasDefinition.getParent().detachFromParent();\n             } else {\n                 aliasDefinition.detachFromParent();\n             }\n         }\n         for (Node scopeCall : traversal.getScopeCalls()) {\n             Node expressionWithScopeCall \u003d scopeCall.getParent();\n             Node scopeClosureBlock \u003d scopeCall.getLastChild().getLastChild();\n             scopeClosureBlock.detachFromParent();\n             expressionWithScopeCall.getParent().replaceChild(expressionWithScopeCall, scopeClosureBlock);\n             NodeUtil.tryMergeBlock(scopeClosureBlock);\n         }\n         if (traversal.getAliasUsages().size() \u003e 0 || traversal.getAliasDefinitions().size() \u003e 0 || traversal.getScopeCalls().size() \u003e 0) {\n             compiler.reportCodeChange();\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ffe67f22a342291ecfed36c1c6ee7c01186f9eff": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/05/07 by robby\n\n        Add diagnostics to the ScopedAliases pass.\n\n        R\u003dnick\n        DELTA\u003d141  (95 added, 1 deleted, 45 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dvohmth\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@205 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/11/10, 11:43 AM",
      "commitName": "ffe67f22a342291ecfed36c1c6ee7c01186f9eff",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "5/4/10, 7:39 AM",
      "commitNameOld": "58c3e4ce1d17ec619bcc4964bdeebc676f93567d",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 7.17,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void process(Node externs, Node root) {\n    Traversal traversal \u003d new Traversal();\n    NodeTraversal.traverse(compiler, root, traversal);\n    if (!traversal.hasErrors()) {\n        for (AliasedNode entry : traversal.getAliasUsages()) {\n            entry.getAliasReference().getParent().replaceChild(entry.getAliasReference(), entry.getAliasDefinition().cloneTree());\n        }\n        for (Node aliasDefinition : traversal.getAliasDefinitions()) {\n            if (aliasDefinition.getParent().getType() \u003d\u003d Token.VAR \u0026\u0026 aliasDefinition.getParent().getChildCount() \u003d\u003d 1) {\n                aliasDefinition.getParent().detachFromParent();\n            } else {\n                aliasDefinition.detachFromParent();\n            }\n        }\n        for (Node scopeCall : traversal.getScopeCalls()) {\n            Node expressionWithScopeCall \u003d scopeCall.getParent();\n            Node scopeClosureBlock \u003d scopeCall.getLastChild().getLastChild();\n            scopeClosureBlock.detachFromParent();\n            expressionWithScopeCall.getParent().replaceChild(expressionWithScopeCall, scopeClosureBlock);\n            NodeUtil.tryMergeBlock(scopeClosureBlock);\n        }\n        if (traversal.getAliasUsages().size() \u003e 0 || traversal.getAliasDefinitions().size() \u003e 0 || traversal.getScopeCalls().size() \u003e 0) {\n            compiler.reportCodeChange();\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/ScopedAliases.java",
      "functionStartLine": 77,
      "functionName": "process",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,25 +1,27 @@\n @Override\n public void process(Node externs, Node root) {\n     Traversal traversal \u003d new Traversal();\n     NodeTraversal.traverse(compiler, root, traversal);\n-    for (AliasedNode entry : traversal.getAliasUsages()) {\n-        entry.getAliasReference().getParent().replaceChild(entry.getAliasReference(), entry.getAliasDefinition().cloneTree());\n-    }\n-    for (Node aliasDefinition : traversal.getAliasDefinitions()) {\n-        if (aliasDefinition.getParent().getType() \u003d\u003d Token.VAR \u0026\u0026 aliasDefinition.getParent().getChildCount() \u003d\u003d 1) {\n-            aliasDefinition.getParent().detachFromParent();\n-        } else {\n-            aliasDefinition.detachFromParent();\n+    if (!traversal.hasErrors()) {\n+        for (AliasedNode entry : traversal.getAliasUsages()) {\n+            entry.getAliasReference().getParent().replaceChild(entry.getAliasReference(), entry.getAliasDefinition().cloneTree());\n         }\n-    }\n-    for (Node scopeCall : traversal.getScopeCalls()) {\n-        Node expressionWithScopeCall \u003d scopeCall.getParent();\n-        Node scopeClosureBlock \u003d scopeCall.getLastChild().getLastChild();\n-        scopeClosureBlock.detachFromParent();\n-        expressionWithScopeCall.getParent().replaceChild(expressionWithScopeCall, scopeClosureBlock);\n-        NodeUtil.tryMergeBlock(scopeClosureBlock);\n-    }\n-    if (traversal.getAliasUsages().size() \u003e 0 || traversal.getAliasDefinitions().size() \u003e 0 || traversal.getScopeCalls().size() \u003e 0) {\n-        compiler.reportCodeChange();\n+        for (Node aliasDefinition : traversal.getAliasDefinitions()) {\n+            if (aliasDefinition.getParent().getType() \u003d\u003d Token.VAR \u0026\u0026 aliasDefinition.getParent().getChildCount() \u003d\u003d 1) {\n+                aliasDefinition.getParent().detachFromParent();\n+            } else {\n+                aliasDefinition.detachFromParent();\n+            }\n+        }\n+        for (Node scopeCall : traversal.getScopeCalls()) {\n+            Node expressionWithScopeCall \u003d scopeCall.getParent();\n+            Node scopeClosureBlock \u003d scopeCall.getLastChild().getLastChild();\n+            scopeClosureBlock.detachFromParent();\n+            expressionWithScopeCall.getParent().replaceChild(expressionWithScopeCall, scopeClosureBlock);\n+            NodeUtil.tryMergeBlock(scopeClosureBlock);\n+        }\n+        if (traversal.getAliasUsages().size() \u003e 0 || traversal.getAliasDefinitions().size() \u003e 0 || traversal.getScopeCalls().size() \u003e 0) {\n+            compiler.reportCodeChange();\n+        }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "58c3e4ce1d17ec619bcc4964bdeebc676f93567d": {
      "type": "Yintroduced",
      "commitMessage": "\n\nChange on 2010/05/03 by robby\n\n        Preliminary: goog.scope support for closure-compiler\n\n        R\u003dnick,john\n        DELTA\u003d318  (318 added, 0 deleted, 0 changed)\n\nChange on 2010/05/03 by nick\n\n        Add a bit more smarts to type resolution. Also, give it a\n        \"forceResolve\" method so that it will try to resolve type names,\n        even if the registry is in a lazy mode.\n\n        R\u003drobert\n        DELTA\u003d205  (133 added, 54 deleted, 18 changed)\n\nChange on 2010/05/03 by alan\n\n        Enable Flow Sensitive Inlining by default. Passes GMail automation test.\n\n        R\u003dnick\n        DELTA\u003d1  (0 added, 0 deleted, 1 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dcmvhwl\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@202 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/4/10, 7:39 AM",
      "commitName": "58c3e4ce1d17ec619bcc4964bdeebc676f93567d",
      "commitAuthor": "Nicholas.J.Santos",
      "diff": "@@ -0,0 +1,25 @@\n+@Override\n+public void process(Node externs, Node root) {\n+    Traversal traversal \u003d new Traversal();\n+    NodeTraversal.traverse(compiler, root, traversal);\n+    for (AliasedNode entry : traversal.getAliasUsages()) {\n+        entry.getAliasReference().getParent().replaceChild(entry.getAliasReference(), entry.getAliasDefinition().cloneTree());\n+    }\n+    for (Node aliasDefinition : traversal.getAliasDefinitions()) {\n+        if (aliasDefinition.getParent().getType() \u003d\u003d Token.VAR \u0026\u0026 aliasDefinition.getParent().getChildCount() \u003d\u003d 1) {\n+            aliasDefinition.getParent().detachFromParent();\n+        } else {\n+            aliasDefinition.detachFromParent();\n+        }\n+    }\n+    for (Node scopeCall : traversal.getScopeCalls()) {\n+        Node expressionWithScopeCall \u003d scopeCall.getParent();\n+        Node scopeClosureBlock \u003d scopeCall.getLastChild().getLastChild();\n+        scopeClosureBlock.detachFromParent();\n+        expressionWithScopeCall.getParent().replaceChild(expressionWithScopeCall, scopeClosureBlock);\n+        NodeUtil.tryMergeBlock(scopeClosureBlock);\n+    }\n+    if (traversal.getAliasUsages().size() \u003e 0 || traversal.getAliasDefinitions().size() \u003e 0 || traversal.getScopeCalls().size() \u003e 0) {\n+        compiler.reportCodeChange();\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic void process(Node externs, Node root) {\n    Traversal traversal \u003d new Traversal();\n    NodeTraversal.traverse(compiler, root, traversal);\n    for (AliasedNode entry : traversal.getAliasUsages()) {\n        entry.getAliasReference().getParent().replaceChild(entry.getAliasReference(), entry.getAliasDefinition().cloneTree());\n    }\n    for (Node aliasDefinition : traversal.getAliasDefinitions()) {\n        if (aliasDefinition.getParent().getType() \u003d\u003d Token.VAR \u0026\u0026 aliasDefinition.getParent().getChildCount() \u003d\u003d 1) {\n            aliasDefinition.getParent().detachFromParent();\n        } else {\n            aliasDefinition.detachFromParent();\n        }\n    }\n    for (Node scopeCall : traversal.getScopeCalls()) {\n        Node expressionWithScopeCall \u003d scopeCall.getParent();\n        Node scopeClosureBlock \u003d scopeCall.getLastChild().getLastChild();\n        scopeClosureBlock.detachFromParent();\n        expressionWithScopeCall.getParent().replaceChild(expressionWithScopeCall, scopeClosureBlock);\n        NodeUtil.tryMergeBlock(scopeClosureBlock);\n    }\n    if (traversal.getAliasUsages().size() \u003e 0 || traversal.getAliasDefinitions().size() \u003e 0 || traversal.getScopeCalls().size() \u003e 0) {\n        compiler.reportCodeChange();\n    }\n}",
      "path": "src/com/google/javascript/jscomp/ScopedAliases.java",
      "functionStartLine": 54,
      "functionName": "process",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}