{
  "origin": "codeshovel",
  "repositoryName": "Closure-59b",
  "repositoryPath": "/tmp/Closure-59b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CheckUnreachableCode.java",
  "functionName": "apply",
  "functionId": "$apply___input-EdgeTuple__Node,Branch__",
  "sourceFilePath": "src/com/google/javascript/jscomp/CheckUnreachableCode.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 95,
  "functionEndLine": 112,
  "numCommitsSeen": 14,
  "timeTaken": 1184,
  "changeHistory": [
    "86a7d25f3cc1177f35dc6480260fb807912c03fa",
    "e33e925eea3a8e4de958864e531e1adc4da62e18",
    "5885b9b72a64533fb2bd6f05d66c65b58c7d3b45"
  ],
  "changeHistoryShort": {
    "86a7d25f3cc1177f35dc6480260fb807912c03fa": "Ybodychange",
    "e33e925eea3a8e4de958864e531e1adc4da62e18": "Ybodychange",
    "5885b9b72a64533fb2bd6f05d66c65b58c7d3b45": "Yintroduced"
  },
  "changeHistoryDetails": {
    "86a7d25f3cc1177f35dc6480260fb807912c03fa": {
      "type": "Ybodychange",
      "commitMessage": "\nFix bad folding of expressions containing object and array literals with side-effects.\n\nR\u003dnicksantos\nDELTA\u003d144  (94 added, 0 deleted, 50 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1088\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@941 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/25/11, 4:27 PM",
      "commitName": "86a7d25f3cc1177f35dc6480260fb807912c03fa",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/11/10, 9:42 PM",
      "commitNameOld": "df223efd38c514d584f00d076488ab9a02011492",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 133.74,
      "commitsBetweenForRepo": 375,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic boolean apply(EdgeTuple\u003cNode, Branch\u003e input) {\n    Branch branch \u003d input.edge;\n    if (!branch.isConditional()) {\n        return true;\n    }\n    Node predecessor \u003d input.sourceNode;\n    Node condition \u003d NodeUtil.getConditionExpression(predecessor);\n    if (condition !\u003d null) {\n        TernaryValue val \u003d NodeUtil.getImpureBooleanValue(condition);\n        if (val !\u003d TernaryValue.UNKNOWN) {\n            return val.toBoolean(true) \u003d\u003d (branch \u003d\u003d Branch.ON_TRUE);\n        }\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/jscomp/CheckUnreachableCode.java",
      "functionStartLine": 95,
      "functionName": "apply",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,16 +1,16 @@\n @Override\n public boolean apply(EdgeTuple\u003cNode, Branch\u003e input) {\n     Branch branch \u003d input.edge;\n     if (!branch.isConditional()) {\n         return true;\n     }\n     Node predecessor \u003d input.sourceNode;\n     Node condition \u003d NodeUtil.getConditionExpression(predecessor);\n     if (condition !\u003d null) {\n-        TernaryValue val \u003d NodeUtil.getBooleanValue(condition);\n+        TernaryValue val \u003d NodeUtil.getImpureBooleanValue(condition);\n         if (val !\u003d TernaryValue.UNKNOWN) {\n             return val.toBoolean(true) \u003d\u003d (branch \u003d\u003d Branch.ON_TRUE);\n         }\n     }\n     return true;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e33e925eea3a8e4de958864e531e1adc4da62e18": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/06/14 by johnlenz\n\n        Remove unneed parenthese from hook expressions.\n\n        R\u003dacleung\n        DELTA\u003d76  (20 added, 4 deleted, 52 changed)\n\nChange on 2010/06/14 by johnlenz\n\n        Fix non-determinisim.\n\n        R\u003djschorr\n        DELTA\u003d5  (3 added, 0 deleted, 2 changed)\n\nChange on 2010/06/15 by nicksantos\n\n        fix a regression caused by a change in the ordering in which\n        constant folding is done.\n        parts of PeepholeSubstituteAlternateSyntax will crash if they\n        see a NEG node with a NUMBER child.\n        They were assuming that FoldConstants would fold these into one node.\n\n        R\u003ddcc,acleung\n        DELTA\u003d153  (70 added, 6 deleted, 77 changed)\n\nChange on 2010/06/15 by johnlenz\n\n        More debug diffing improvements: convert unique globally unique names\n        to locally unique names for reproduciblity.\n\n        R\u003dacleung\n        DELTA\u003d222  (44 added, 7 deleted, 171 changed)\n\nChange on 2010/06/15 by nicksantos\n\n        Add the @nocompile annotation as a signal that this file should\n        be dropped silently if it gets pulled into a --manage_closure_dependencies\n        build.\n\n        R\u003dbowdidge,gboyer\n        DELTA\u003d82  (60 added, 1 deleted, 21 changed)\n\nChange on 2010/06/15 by dcc\n\n        Refactor FoldConstants dead code removal into PeepholeRemoveDeadCode.\n\n        R\u003dacleung\n        DELTA\u003d744  (403 added, 307 deleted, 34 changed)\n\nChange on 2010/06/15 by dcc\n\n        ExternExports test now emits type annotation for exported externs.\n                - Changed ExternExportsPass to generate the externs as an AST and then print\n        to a String rather than ad hoc with a StringBuilder.\n                - Changed TypedCodeGenerator to generate \u0027*\u0027 (AllType) for parameters with unknown types rather than \u0027?\u0027 (UnknownType) since \u0027?\u0027 is not valid JSDoc.\n\n        R\u003dacleung\n        DELTA\u003d643  (496 added, 66 deleted, 81 changed)\n\nChange on 2010/06/16 by johnlenz\n\n        Tweak to PureFunctionIndentifier to propagate the side-effects for\n        anonymous function expressions like: (Date.now||function(){return\n        +new Date})()\n\n        R\u003davd\n        DELTA\u003d42  (39 added, 0 deleted, 3 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d29010\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@243 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/16/10, 12:33 PM",
      "commitName": "e33e925eea3a8e4de958864e531e1adc4da62e18",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "5/21/10, 2:27 PM",
      "commitNameOld": "5885b9b72a64533fb2bd6f05d66c65b58c7d3b45",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 25.92,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic boolean apply(EdgeTuple\u003cNode, Branch\u003e input) {\n    Branch branch \u003d input.edge;\n    if (!branch.isConditional()) {\n        return true;\n    }\n    Node predecessor \u003d input.sourceNode;\n    Node condition \u003d NodeUtil.getConditionExpression(predecessor);\n    if (condition !\u003d null) {\n        TernaryValue val \u003d NodeUtil.getBooleanValue(condition);\n        if (val !\u003d TernaryValue.UNKNOWN) {\n            return val.toBoolean(true) \u003d\u003d (branch \u003d\u003d Branch.ON_TRUE);\n        }\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/jscomp/CheckUnreachableCode.java",
      "functionStartLine": 92,
      "functionName": "apply",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,13 +1,16 @@\n @Override\n public boolean apply(EdgeTuple\u003cNode, Branch\u003e input) {\n     Branch branch \u003d input.edge;\n     if (!branch.isConditional()) {\n         return true;\n     }\n     Node predecessor \u003d input.sourceNode;\n     Node condition \u003d NodeUtil.getConditionExpression(predecessor);\n-    if (condition !\u003d null \u0026\u0026 NodeUtil.isImmutableValue(condition)) {\n-        return NodeUtil.getBooleanValue(condition) \u003d\u003d (branch \u003d\u003d Branch.ON_TRUE);\n+    if (condition !\u003d null) {\n+        TernaryValue val \u003d NodeUtil.getBooleanValue(condition);\n+        if (val !\u003d TernaryValue.UNKNOWN) {\n+            return val.toBoolean(true) \u003d\u003d (branch \u003d\u003d Branch.ON_TRUE);\n+        }\n     }\n     return true;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5885b9b72a64533fb2bd6f05d66c65b58c7d3b45": {
      "type": "Yintroduced",
      "commitMessage": "\nChange on 2010/05/21 by nicksantos\n\n        Add a messagebundle to compileroptions.\n\n        R\u003djohnlenz\n        DELTA\u003d65  (53 added, 7 deleted, 5 changed)\n\nChange on 2010/05/21 by johnlenz\n\n        Automated g4 rollback of changelist 15608158.\n\n        *** Reason for rollback ***\n\n          Incorrectly inlines into loops.\n\n        *** Original change description ***\n\n        Enable flow sensitive inlining in open source world.\n\n        R\u003dacleung\n        DELTA\u003d2  (0 added, 2 deleted, 0 changed)\n\nChange on 2010/05/21 by johnlenz\n\n        Automated g4 rollback of changelist 15557333.\n\n        *** Reason for rollback ***\n\n          Flow sensitive inlining incorrectly inlines into loops.\n\n        *** Original change description ***\n\n        Automated g4 rollback of changelist 15443639.\n\n        *** Reason for rollback ***\n\n          Fixed by 15522083\n\n        *** Original change description ***\n\n        Automated g4 rollback of changelist 15380611.\n\n        *** Reason for rollback ***\n\n        see attached bug\n\n        *** Original change description ***\n\n        Enable Flow Sensitive Inlining by default. Passes GMail automation test.\n\n        R\u003dacleung\n        DELTA\u003d1  (0 added, 0 deleted, 1 changed)\n\nChange on 2010/05/21 by acleung\n\n        Automated g4 rollback of changelist 15093982.\n\n        *** Reason for rollback ***\n\n          Because third time is a charm.\n\n        *** Original change description ***\n\n        Automated g4 rollback of changelist 15093106.\n\n        *** Reason for rollback ***\n\n        breaks caribou b/c of new warnings.\n\n        *** Original change description ***\n\n        Make unreachable code detection a bit smarter.\n\n        R\u003djohnlenz\n        DELTA\u003d77  (70 added, 3 deleted, 4 changed)\n\nChange on 2010/05/21 by nicksantos\n\n        Create a shortcut mode for the deps file parser, and turn it on\n        by default.\n        Also, add tracers to deps generator.\n\n        R\u003dagrieve\n        DELTA\u003d171  (117 added, 44 deleted, 10 changed)\n\nChange on 2010/05/21 by acleung\n\n        Make ExtractPrototypeMemberDeclarations skip over devirtualized prototype methods\n\n        R\u003davd\n        DELTA\u003d80  (80 added, 0 deleted, 0 changed)\n\nChange on 2010/05/21 by robbyw\n\n        Attach ScopedAliases to the closurePass flag.\n\n        R\u003dnicksantos\n        DELTA\u003d13  (13 added, 0 deleted, 0 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d11001\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@226 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/21/10, 2:27 PM",
      "commitName": "5885b9b72a64533fb2bd6f05d66c65b58c7d3b45",
      "commitAuthor": "Nicholas.J.Santos",
      "diff": "@@ -0,0 +1,13 @@\n+@Override\n+public boolean apply(EdgeTuple\u003cNode, Branch\u003e input) {\n+    Branch branch \u003d input.edge;\n+    if (!branch.isConditional()) {\n+        return true;\n+    }\n+    Node predecessor \u003d input.sourceNode;\n+    Node condition \u003d NodeUtil.getConditionExpression(predecessor);\n+    if (condition !\u003d null \u0026\u0026 NodeUtil.isImmutableValue(condition)) {\n+        return NodeUtil.getBooleanValue(condition) \u003d\u003d (branch \u003d\u003d Branch.ON_TRUE);\n+    }\n+    return true;\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic boolean apply(EdgeTuple\u003cNode, Branch\u003e input) {\n    Branch branch \u003d input.edge;\n    if (!branch.isConditional()) {\n        return true;\n    }\n    Node predecessor \u003d input.sourceNode;\n    Node condition \u003d NodeUtil.getConditionExpression(predecessor);\n    if (condition !\u003d null \u0026\u0026 NodeUtil.isImmutableValue(condition)) {\n        return NodeUtil.getBooleanValue(condition) \u003d\u003d (branch \u003d\u003d Branch.ON_TRUE);\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/jscomp/CheckUnreachableCode.java",
      "functionStartLine": 91,
      "functionName": "apply",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}