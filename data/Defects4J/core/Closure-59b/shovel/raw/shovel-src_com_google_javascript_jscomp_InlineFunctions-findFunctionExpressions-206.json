{
  "origin": "codeshovel",
  "repositoryName": "Closure-59b",
  "repositoryPath": "/tmp/Closure-59b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "InlineFunctions.java",
  "functionName": "findFunctionExpressions",
  "functionId": "$findFunctionExpressions___t-NodeTraversal__n-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/InlineFunctions.java",
  "functionAnnotation": "",
  "functionDoc": "Find function expressions that are called directly in the form of\n  (function(a,b,...){...})(a,b,...)\nor\n  (function(a,b,...){...}).call(this,a,b, ...)\n",
  "functionStartLine": 206,
  "functionEndLine": 229,
  "numCommitsSeen": 38,
  "timeTaken": 1958,
  "changeHistory": [
    "ebb59a97610015bc41bda7f458dd1428a3a3e335",
    "2acd6c1986e36bfdbae85c09eb83ac1940b86c73",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "ebb59a97610015bc41bda7f458dd1428a3a3e335": "Ymultichange(Yrename,Ybodychange,Ydocchange)",
    "2acd6c1986e36bfdbae85c09eb83ac1940b86c73": "Ymultichange(Yrename,Yparameterchange,Ydocchange)",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ebb59a97610015bc41bda7f458dd1428a3a3e335": {
      "type": "Ymultichange(Yrename,Ybodychange,Ydocchange)",
      "commitMessage": "\nChange on 2010/04/22 by nick\n\n        fix the extern definition of Window.prototype.stop\n\n        R\u003dsiggy\n        DELTA\u003d1  (0 added, 0 deleted, 1 changed)\n\nChange on 2010/04/22 by john\n\n        \"Anonymous function\" is a confusing term for functions with names.\n        Properly we are usually distinguishing between functions statements\n        (function declarations) and function expressions.\n\n        R\u003dalan\n        DELTA\u003d172  (7 added, 14 deleted, 151 changed)\n\nChange on 2010/04/22 by john\n\n        Standardize the definition of setTimeout/setInterval.\n        Fix for Issue 137\n\n        R\u003dnick\n        DELTA\u003d6  (2 added, 2 deleted, 2 changed)\n\nChange on 2010/04/22 by mark\n\n        Various delegate fixes.\n\n        Give the delegate proxy a name unique from the delegate base so that\n        InstanceObjectType#equals distinguishes them. This is necessary for\n        AmbiguateProperties to work.\n\n        Fix the prototype of the delegate proxy. This makes\n        DisambiguateProperties continue to work.\n\n        Add superclass methods of the delegate base to the delegate proxy.\n\n\n        R\u003dandrew,nada\n        DELTA\u003d526  (383 added, 104 deleted, 39 changed)\n\nChange on 2010/04/23 by john\n\n        Allow variable inlining of function statements. For simplicity  limited to functions defined before first use.\n\n        R\u003dnick\n        DELTA\u003d79  (49 added, 3 deleted, 27 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dhakjvx\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@197 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/23/10, 11:31 AM",
      "commitName": "ebb59a97610015bc41bda7f458dd1428a3a3e335",
      "commitAuthor": "Nicholas.J.Santos",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "\nChange on 2010/04/22 by nick\n\n        fix the extern definition of Window.prototype.stop\n\n        R\u003dsiggy\n        DELTA\u003d1  (0 added, 0 deleted, 1 changed)\n\nChange on 2010/04/22 by john\n\n        \"Anonymous function\" is a confusing term for functions with names.\n        Properly we are usually distinguishing between functions statements\n        (function declarations) and function expressions.\n\n        R\u003dalan\n        DELTA\u003d172  (7 added, 14 deleted, 151 changed)\n\nChange on 2010/04/22 by john\n\n        Standardize the definition of setTimeout/setInterval.\n        Fix for Issue 137\n\n        R\u003dnick\n        DELTA\u003d6  (2 added, 2 deleted, 2 changed)\n\nChange on 2010/04/22 by mark\n\n        Various delegate fixes.\n\n        Give the delegate proxy a name unique from the delegate base so that\n        InstanceObjectType#equals distinguishes them. This is necessary for\n        AmbiguateProperties to work.\n\n        Fix the prototype of the delegate proxy. This makes\n        DisambiguateProperties continue to work.\n\n        Add superclass methods of the delegate base to the delegate proxy.\n\n\n        R\u003dandrew,nada\n        DELTA\u003d526  (383 added, 104 deleted, 39 changed)\n\nChange on 2010/04/23 by john\n\n        Allow variable inlining of function statements. For simplicity  limited to functions defined before first use.\n\n        R\u003dnick\n        DELTA\u003d79  (49 added, 3 deleted, 27 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dhakjvx\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@197 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "4/23/10, 11:31 AM",
          "commitName": "ebb59a97610015bc41bda7f458dd1428a3a3e335",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "4/19/10, 4:28 PM",
          "commitNameOld": "5da32cba7b68d69acfc535f57f21d652475d256f",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 3.79,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "public void findFunctionExpressions(NodeTraversal t, Node n) {\n    switch(n.getType()) {\n        case Token.CALL:\n            Node fnNode \u003d null;\n            if (n.getFirstChild().getType() \u003d\u003d Token.FUNCTION) {\n                fnNode \u003d n.getFirstChild();\n            } else if (NodeUtil.isFunctionObjectCall(n)) {\n                Node fnIdentifingNode \u003d n.getFirstChild().getFirstChild();\n                if (fnIdentifingNode.getType() \u003d\u003d Token.FUNCTION) {\n                    fnNode \u003d fnIdentifingNode;\n                }\n            }\n            if (fnNode !\u003d null) {\n                Function fn \u003d new FunctionExpression(fnNode, callsSeen++);\n                maybeAddFunction(fn, t.getModule());\n                anonFns.put(fnNode, fn.getName());\n            }\n            break;\n    }\n}",
          "path": "src/com/google/javascript/jscomp/InlineFunctions.java",
          "functionStartLine": 212,
          "functionName": "findFunctionExpressions",
          "functionAnnotation": "",
          "functionDoc": "Find function expressions that are called directly in the form of\n  (function(a,b,...){...})(a,b,...)\nor\n  (function(a,b,...){...}).call(this,a,b, ...)\n",
          "diff": "@@ -1,20 +1,20 @@\n-public void findAnonymousFunctionExpressions(NodeTraversal t, Node n) {\n+public void findFunctionExpressions(NodeTraversal t, Node n) {\n     switch(n.getType()) {\n         case Token.CALL:\n             Node fnNode \u003d null;\n             if (n.getFirstChild().getType() \u003d\u003d Token.FUNCTION) {\n                 fnNode \u003d n.getFirstChild();\n             } else if (NodeUtil.isFunctionObjectCall(n)) {\n                 Node fnIdentifingNode \u003d n.getFirstChild().getFirstChild();\n                 if (fnIdentifingNode.getType() \u003d\u003d Token.FUNCTION) {\n                     fnNode \u003d fnIdentifingNode;\n                 }\n             }\n             if (fnNode !\u003d null) {\n-                Function fn \u003d new AnonymousFunction(fnNode, callsSeen++);\n+                Function fn \u003d new FunctionExpression(fnNode, callsSeen++);\n                 maybeAddFunction(fn, t.getModule());\n                 anonFns.put(fnNode, fn.getName());\n             }\n             break;\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "findAnonymousFunctionExpressions",
            "newValue": "findFunctionExpressions"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nChange on 2010/04/22 by nick\n\n        fix the extern definition of Window.prototype.stop\n\n        R\u003dsiggy\n        DELTA\u003d1  (0 added, 0 deleted, 1 changed)\n\nChange on 2010/04/22 by john\n\n        \"Anonymous function\" is a confusing term for functions with names.\n        Properly we are usually distinguishing between functions statements\n        (function declarations) and function expressions.\n\n        R\u003dalan\n        DELTA\u003d172  (7 added, 14 deleted, 151 changed)\n\nChange on 2010/04/22 by john\n\n        Standardize the definition of setTimeout/setInterval.\n        Fix for Issue 137\n\n        R\u003dnick\n        DELTA\u003d6  (2 added, 2 deleted, 2 changed)\n\nChange on 2010/04/22 by mark\n\n        Various delegate fixes.\n\n        Give the delegate proxy a name unique from the delegate base so that\n        InstanceObjectType#equals distinguishes them. This is necessary for\n        AmbiguateProperties to work.\n\n        Fix the prototype of the delegate proxy. This makes\n        DisambiguateProperties continue to work.\n\n        Add superclass methods of the delegate base to the delegate proxy.\n\n\n        R\u003dandrew,nada\n        DELTA\u003d526  (383 added, 104 deleted, 39 changed)\n\nChange on 2010/04/23 by john\n\n        Allow variable inlining of function statements. For simplicity  limited to functions defined before first use.\n\n        R\u003dnick\n        DELTA\u003d79  (49 added, 3 deleted, 27 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dhakjvx\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@197 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "4/23/10, 11:31 AM",
          "commitName": "ebb59a97610015bc41bda7f458dd1428a3a3e335",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "4/19/10, 4:28 PM",
          "commitNameOld": "5da32cba7b68d69acfc535f57f21d652475d256f",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 3.79,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "public void findFunctionExpressions(NodeTraversal t, Node n) {\n    switch(n.getType()) {\n        case Token.CALL:\n            Node fnNode \u003d null;\n            if (n.getFirstChild().getType() \u003d\u003d Token.FUNCTION) {\n                fnNode \u003d n.getFirstChild();\n            } else if (NodeUtil.isFunctionObjectCall(n)) {\n                Node fnIdentifingNode \u003d n.getFirstChild().getFirstChild();\n                if (fnIdentifingNode.getType() \u003d\u003d Token.FUNCTION) {\n                    fnNode \u003d fnIdentifingNode;\n                }\n            }\n            if (fnNode !\u003d null) {\n                Function fn \u003d new FunctionExpression(fnNode, callsSeen++);\n                maybeAddFunction(fn, t.getModule());\n                anonFns.put(fnNode, fn.getName());\n            }\n            break;\n    }\n}",
          "path": "src/com/google/javascript/jscomp/InlineFunctions.java",
          "functionStartLine": 212,
          "functionName": "findFunctionExpressions",
          "functionAnnotation": "",
          "functionDoc": "Find function expressions that are called directly in the form of\n  (function(a,b,...){...})(a,b,...)\nor\n  (function(a,b,...){...}).call(this,a,b, ...)\n",
          "diff": "@@ -1,20 +1,20 @@\n-public void findAnonymousFunctionExpressions(NodeTraversal t, Node n) {\n+public void findFunctionExpressions(NodeTraversal t, Node n) {\n     switch(n.getType()) {\n         case Token.CALL:\n             Node fnNode \u003d null;\n             if (n.getFirstChild().getType() \u003d\u003d Token.FUNCTION) {\n                 fnNode \u003d n.getFirstChild();\n             } else if (NodeUtil.isFunctionObjectCall(n)) {\n                 Node fnIdentifingNode \u003d n.getFirstChild().getFirstChild();\n                 if (fnIdentifingNode.getType() \u003d\u003d Token.FUNCTION) {\n                     fnNode \u003d fnIdentifingNode;\n                 }\n             }\n             if (fnNode !\u003d null) {\n-                Function fn \u003d new AnonymousFunction(fnNode, callsSeen++);\n+                Function fn \u003d new FunctionExpression(fnNode, callsSeen++);\n                 maybeAddFunction(fn, t.getModule());\n                 anonFns.put(fnNode, fn.getName());\n             }\n             break;\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "\nChange on 2010/04/22 by nick\n\n        fix the extern definition of Window.prototype.stop\n\n        R\u003dsiggy\n        DELTA\u003d1  (0 added, 0 deleted, 1 changed)\n\nChange on 2010/04/22 by john\n\n        \"Anonymous function\" is a confusing term for functions with names.\n        Properly we are usually distinguishing between functions statements\n        (function declarations) and function expressions.\n\n        R\u003dalan\n        DELTA\u003d172  (7 added, 14 deleted, 151 changed)\n\nChange on 2010/04/22 by john\n\n        Standardize the definition of setTimeout/setInterval.\n        Fix for Issue 137\n\n        R\u003dnick\n        DELTA\u003d6  (2 added, 2 deleted, 2 changed)\n\nChange on 2010/04/22 by mark\n\n        Various delegate fixes.\n\n        Give the delegate proxy a name unique from the delegate base so that\n        InstanceObjectType#equals distinguishes them. This is necessary for\n        AmbiguateProperties to work.\n\n        Fix the prototype of the delegate proxy. This makes\n        DisambiguateProperties continue to work.\n\n        Add superclass methods of the delegate base to the delegate proxy.\n\n\n        R\u003dandrew,nada\n        DELTA\u003d526  (383 added, 104 deleted, 39 changed)\n\nChange on 2010/04/23 by john\n\n        Allow variable inlining of function statements. For simplicity  limited to functions defined before first use.\n\n        R\u003dnick\n        DELTA\u003d79  (49 added, 3 deleted, 27 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dhakjvx\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@197 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "4/23/10, 11:31 AM",
          "commitName": "ebb59a97610015bc41bda7f458dd1428a3a3e335",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "4/19/10, 4:28 PM",
          "commitNameOld": "5da32cba7b68d69acfc535f57f21d652475d256f",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 3.79,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "public void findFunctionExpressions(NodeTraversal t, Node n) {\n    switch(n.getType()) {\n        case Token.CALL:\n            Node fnNode \u003d null;\n            if (n.getFirstChild().getType() \u003d\u003d Token.FUNCTION) {\n                fnNode \u003d n.getFirstChild();\n            } else if (NodeUtil.isFunctionObjectCall(n)) {\n                Node fnIdentifingNode \u003d n.getFirstChild().getFirstChild();\n                if (fnIdentifingNode.getType() \u003d\u003d Token.FUNCTION) {\n                    fnNode \u003d fnIdentifingNode;\n                }\n            }\n            if (fnNode !\u003d null) {\n                Function fn \u003d new FunctionExpression(fnNode, callsSeen++);\n                maybeAddFunction(fn, t.getModule());\n                anonFns.put(fnNode, fn.getName());\n            }\n            break;\n    }\n}",
          "path": "src/com/google/javascript/jscomp/InlineFunctions.java",
          "functionStartLine": 212,
          "functionName": "findFunctionExpressions",
          "functionAnnotation": "",
          "functionDoc": "Find function expressions that are called directly in the form of\n  (function(a,b,...){...})(a,b,...)\nor\n  (function(a,b,...){...}).call(this,a,b, ...)\n",
          "diff": "@@ -1,20 +1,20 @@\n-public void findAnonymousFunctionExpressions(NodeTraversal t, Node n) {\n+public void findFunctionExpressions(NodeTraversal t, Node n) {\n     switch(n.getType()) {\n         case Token.CALL:\n             Node fnNode \u003d null;\n             if (n.getFirstChild().getType() \u003d\u003d Token.FUNCTION) {\n                 fnNode \u003d n.getFirstChild();\n             } else if (NodeUtil.isFunctionObjectCall(n)) {\n                 Node fnIdentifingNode \u003d n.getFirstChild().getFirstChild();\n                 if (fnIdentifingNode.getType() \u003d\u003d Token.FUNCTION) {\n                     fnNode \u003d fnIdentifingNode;\n                 }\n             }\n             if (fnNode !\u003d null) {\n-                Function fn \u003d new AnonymousFunction(fnNode, callsSeen++);\n+                Function fn \u003d new FunctionExpression(fnNode, callsSeen++);\n                 maybeAddFunction(fn, t.getModule());\n                 anonFns.put(fnNode, fn.getName());\n             }\n             break;\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Find anonymous functions that are called directly in the form of\n  (function(a,b,...){...})(a,b,...)\nor\n  (function(a,b,...){...}).call(this,a,b, ...)\n",
            "newValue": "Find function expressions that are called directly in the form of\n  (function(a,b,...){...})(a,b,...)\nor\n  (function(a,b,...){...}).call(this,a,b, ...)\n"
          }
        }
      ]
    },
    "2acd6c1986e36bfdbae85c09eb83ac1940b86c73": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ydocchange)",
      "commitMessage": "Fix if-folding compiler crash (issue 43)\nFix property-collapsing compiler crash (issue 34)\nFix labeled VAR compiler crash (issue 41)\nMake [paramName] syntax denote optionality (issue #26)\nBetter function inlining.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@11 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/16/09, 4:04 PM",
      "commitName": "2acd6c1986e36bfdbae85c09eb83ac1940b86c73",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "Fix if-folding compiler crash (issue 43)\nFix property-collapsing compiler crash (issue 34)\nFix labeled VAR compiler crash (issue 41)\nMake [paramName] syntax denote optionality (issue #26)\nBetter function inlining.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@11 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "11/16/09, 4:04 PM",
          "commitName": "2acd6c1986e36bfdbae85c09eb83ac1940b86c73",
          "commitAuthor": "nicholas.j.santos@gmail.com",
          "commitDateOld": "11/3/09, 3:51 PM",
          "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 13.01,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "actualSource": "public void findAnonymousFunctionExpressions(NodeTraversal t, Node n) {\n    switch(n.getType()) {\n        case Token.CALL:\n            Node fnNode \u003d null;\n            if (n.getFirstChild().getType() \u003d\u003d Token.FUNCTION) {\n                fnNode \u003d n.getFirstChild();\n            } else if (NodeUtil.isFunctionObjectCall(n)) {\n                Node fnIdentifingNode \u003d n.getFirstChild().getFirstChild();\n                if (fnIdentifingNode.getType() \u003d\u003d Token.FUNCTION) {\n                    fnNode \u003d fnIdentifingNode;\n                }\n            }\n            if (fnNode !\u003d null) {\n                Function fn \u003d new AnonymousFunction(fnNode, callsSeen++);\n                maybeAddFunction(fn, t.getModule());\n                anonFns.put(fnNode, fn.getName());\n            }\n            break;\n    }\n}",
          "path": "src/com/google/javascript/jscomp/InlineFunctions.java",
          "functionStartLine": 215,
          "functionName": "findAnonymousFunctionExpressions",
          "functionAnnotation": "",
          "functionDoc": "Find anonymous functions that are called directly in the form of\n  (function(a,b,...){...})(a,b,...)\nor\n  (function(a,b,...){...}).call(this,a,b, ...)\n",
          "diff": "@@ -1,20 +1,20 @@\n-public void visit(NodeTraversal t, Node n, Node parent) {\n+public void findAnonymousFunctionExpressions(NodeTraversal t, Node n) {\n     switch(n.getType()) {\n         case Token.CALL:\n             Node fnNode \u003d null;\n             if (n.getFirstChild().getType() \u003d\u003d Token.FUNCTION) {\n                 fnNode \u003d n.getFirstChild();\n             } else if (NodeUtil.isFunctionObjectCall(n)) {\n                 Node fnIdentifingNode \u003d n.getFirstChild().getFirstChild();\n                 if (fnIdentifingNode.getType() \u003d\u003d Token.FUNCTION) {\n                     fnNode \u003d fnIdentifingNode;\n                 }\n             }\n             if (fnNode !\u003d null) {\n                 Function fn \u003d new AnonymousFunction(fnNode, callsSeen++);\n                 maybeAddFunction(fn, t.getModule());\n                 anonFns.put(fnNode, fn.getName());\n             }\n             break;\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "visit",
            "newValue": "findAnonymousFunctionExpressions"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "Fix if-folding compiler crash (issue 43)\nFix property-collapsing compiler crash (issue 34)\nFix labeled VAR compiler crash (issue 41)\nMake [paramName] syntax denote optionality (issue #26)\nBetter function inlining.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@11 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "11/16/09, 4:04 PM",
          "commitName": "2acd6c1986e36bfdbae85c09eb83ac1940b86c73",
          "commitAuthor": "nicholas.j.santos@gmail.com",
          "commitDateOld": "11/3/09, 3:51 PM",
          "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 13.01,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "actualSource": "public void findAnonymousFunctionExpressions(NodeTraversal t, Node n) {\n    switch(n.getType()) {\n        case Token.CALL:\n            Node fnNode \u003d null;\n            if (n.getFirstChild().getType() \u003d\u003d Token.FUNCTION) {\n                fnNode \u003d n.getFirstChild();\n            } else if (NodeUtil.isFunctionObjectCall(n)) {\n                Node fnIdentifingNode \u003d n.getFirstChild().getFirstChild();\n                if (fnIdentifingNode.getType() \u003d\u003d Token.FUNCTION) {\n                    fnNode \u003d fnIdentifingNode;\n                }\n            }\n            if (fnNode !\u003d null) {\n                Function fn \u003d new AnonymousFunction(fnNode, callsSeen++);\n                maybeAddFunction(fn, t.getModule());\n                anonFns.put(fnNode, fn.getName());\n            }\n            break;\n    }\n}",
          "path": "src/com/google/javascript/jscomp/InlineFunctions.java",
          "functionStartLine": 215,
          "functionName": "findAnonymousFunctionExpressions",
          "functionAnnotation": "",
          "functionDoc": "Find anonymous functions that are called directly in the form of\n  (function(a,b,...){...})(a,b,...)\nor\n  (function(a,b,...){...}).call(this,a,b, ...)\n",
          "diff": "@@ -1,20 +1,20 @@\n-public void visit(NodeTraversal t, Node n, Node parent) {\n+public void findAnonymousFunctionExpressions(NodeTraversal t, Node n) {\n     switch(n.getType()) {\n         case Token.CALL:\n             Node fnNode \u003d null;\n             if (n.getFirstChild().getType() \u003d\u003d Token.FUNCTION) {\n                 fnNode \u003d n.getFirstChild();\n             } else if (NodeUtil.isFunctionObjectCall(n)) {\n                 Node fnIdentifingNode \u003d n.getFirstChild().getFirstChild();\n                 if (fnIdentifingNode.getType() \u003d\u003d Token.FUNCTION) {\n                     fnNode \u003d fnIdentifingNode;\n                 }\n             }\n             if (fnNode !\u003d null) {\n                 Function fn \u003d new AnonymousFunction(fnNode, callsSeen++);\n                 maybeAddFunction(fn, t.getModule());\n                 anonFns.put(fnNode, fn.getName());\n             }\n             break;\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[t-NodeTraversal, n-Node, parent-Node]",
            "newValue": "[t-NodeTraversal, n-Node]"
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Fix if-folding compiler crash (issue 43)\nFix property-collapsing compiler crash (issue 34)\nFix labeled VAR compiler crash (issue 41)\nMake [paramName] syntax denote optionality (issue #26)\nBetter function inlining.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@11 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "11/16/09, 4:04 PM",
          "commitName": "2acd6c1986e36bfdbae85c09eb83ac1940b86c73",
          "commitAuthor": "nicholas.j.santos@gmail.com",
          "commitDateOld": "11/3/09, 3:51 PM",
          "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 13.01,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "actualSource": "public void findAnonymousFunctionExpressions(NodeTraversal t, Node n) {\n    switch(n.getType()) {\n        case Token.CALL:\n            Node fnNode \u003d null;\n            if (n.getFirstChild().getType() \u003d\u003d Token.FUNCTION) {\n                fnNode \u003d n.getFirstChild();\n            } else if (NodeUtil.isFunctionObjectCall(n)) {\n                Node fnIdentifingNode \u003d n.getFirstChild().getFirstChild();\n                if (fnIdentifingNode.getType() \u003d\u003d Token.FUNCTION) {\n                    fnNode \u003d fnIdentifingNode;\n                }\n            }\n            if (fnNode !\u003d null) {\n                Function fn \u003d new AnonymousFunction(fnNode, callsSeen++);\n                maybeAddFunction(fn, t.getModule());\n                anonFns.put(fnNode, fn.getName());\n            }\n            break;\n    }\n}",
          "path": "src/com/google/javascript/jscomp/InlineFunctions.java",
          "functionStartLine": 215,
          "functionName": "findAnonymousFunctionExpressions",
          "functionAnnotation": "",
          "functionDoc": "Find anonymous functions that are called directly in the form of\n  (function(a,b,...){...})(a,b,...)\nor\n  (function(a,b,...){...}).call(this,a,b, ...)\n",
          "diff": "@@ -1,20 +1,20 @@\n-public void visit(NodeTraversal t, Node n, Node parent) {\n+public void findAnonymousFunctionExpressions(NodeTraversal t, Node n) {\n     switch(n.getType()) {\n         case Token.CALL:\n             Node fnNode \u003d null;\n             if (n.getFirstChild().getType() \u003d\u003d Token.FUNCTION) {\n                 fnNode \u003d n.getFirstChild();\n             } else if (NodeUtil.isFunctionObjectCall(n)) {\n                 Node fnIdentifingNode \u003d n.getFirstChild().getFirstChild();\n                 if (fnIdentifingNode.getType() \u003d\u003d Token.FUNCTION) {\n                     fnNode \u003d fnIdentifingNode;\n                 }\n             }\n             if (fnNode !\u003d null) {\n                 Function fn \u003d new AnonymousFunction(fnNode, callsSeen++);\n                 maybeAddFunction(fn, t.getModule());\n                 anonFns.put(fnNode, fn.getName());\n             }\n             break;\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "Find anonymous functions that are called directly in the form of\n  (function(a,b,...){...})(a,b,...)\nor\n  (function(a,b,...){...}).call(this,a,b, ...)\n"
          }
        }
      ]
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,7 @@\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    super.visit(t, n, parent);\n+    if (n.getType() \u003d\u003d Token.NAME) {\n+        checkNameUsage(t, n, parent);\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    super.visit(t, n, parent);\n    if (n.getType() \u003d\u003d Token.NAME) {\n        checkNameUsage(t, n, parent);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/InlineFunctions.java",
      "functionStartLine": 371,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}