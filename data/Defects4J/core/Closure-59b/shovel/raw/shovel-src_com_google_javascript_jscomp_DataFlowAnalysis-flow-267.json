{
  "origin": "codeshovel",
  "repositoryName": "Closure-59b",
  "repositoryPath": "/tmp/Closure-59b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DataFlowAnalysis.java",
  "functionName": "flow",
  "functionId": "flow___node-DiGraphNode__N,Branch__",
  "sourceFilePath": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
  "functionAnnotation": "",
  "functionDoc": "Performs a single flow through a node.\n\n@return @code true} if the flow state differs from the previous state.\n",
  "functionStartLine": 267,
  "functionEndLine": 278,
  "numCommitsSeen": 15,
  "timeTaken": 619,
  "changeHistory": [
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,12 @@\n+protected boolean flow(DiGraphNode\u003cN, Branch\u003e node) {\n+    FlowState\u003cL\u003e state \u003d node.getAnnotation();\n+    if (isForward()) {\n+        L outBefore \u003d state.out;\n+        state.out \u003d flowThrough(node.getValue(), state.in);\n+        return !outBefore.equals(state.out);\n+    } else {\n+        L inBefore \u003d state.in;\n+        state.in \u003d flowThrough(node.getValue(), state.out);\n+        return !inBefore.equals(state.in);\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected boolean flow(DiGraphNode\u003cN, Branch\u003e node) {\n    FlowState\u003cL\u003e state \u003d node.getAnnotation();\n    if (isForward()) {\n        L outBefore \u003d state.out;\n        state.out \u003d flowThrough(node.getValue(), state.in);\n        return !outBefore.equals(state.out);\n    } else {\n        L inBefore \u003d state.in;\n        state.in \u003d flowThrough(node.getValue(), state.out);\n        return !inBefore.equals(state.in);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
      "functionStartLine": 327,
      "functionName": "flow",
      "functionAnnotation": "",
      "functionDoc": "Performs a single flow through a node.\n\n@return @code true} if the flow state differs from the previous state.\n"
    }
  }
}