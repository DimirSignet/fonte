{
  "origin": "codeshovel",
  "repositoryName": "Math-88b",
  "repositoryPath": "/tmp/Math-88b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SimplexSolver.java",
  "functionName": "doIteration",
  "functionId": "doIteration___tableau-SimplexTableau(modifiers-final)",
  "sourceFilePath": "src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java",
  "functionAnnotation": "",
  "functionDoc": "Runs one iteration of the Simplex method on the given model.\n\n@param tableau simple tableau for the problem\n@throws OptimizationException if the maximal iteration count has been\nexceeded or if the model is found not to have a bounded solution\n",
  "functionStartLine": 99,
  "functionEndLine": 121,
  "numCommitsSeen": 4,
  "timeTaken": 356,
  "changeHistory": [
    "96b1276efd88c536f3c918396f7460e557b9ee65"
  ],
  "changeHistoryShort": {
    "96b1276efd88c536f3c918396f7460e557b9ee65": "Yintroduced"
  },
  "changeHistoryDetails": {
    "96b1276efd88c536f3c918396f7460e557b9ee65": {
      "type": "Yintroduced",
      "commitMessage": "added an implementation of Dantzig\u0027s simplex algorithm\nto solve constrained linear optimization problems\nJIRA: MATH-246\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@758920 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/26/09, 4:25 PM",
      "commitName": "96b1276efd88c536f3c918396f7460e557b9ee65",
      "commitAuthor": "Luc Maisonobe",
      "diff": "@@ -0,0 +1,16 @@\n+protected void doIteration(final SimplexTableau tableau) throws OptimizationException {\n+    incrementIterationsCounter();\n+    Integer pivotCol \u003d getPivotColumn(tableau);\n+    Integer pivotRow \u003d getPivotRow(pivotCol, tableau);\n+    if (pivotRow \u003d\u003d null) {\n+        throw new UnboundedSolutionException();\n+    }\n+    double pivotVal \u003d tableau.getEntry(pivotRow, pivotCol);\n+    tableau.divideRow(pivotRow, pivotVal);\n+    for (int i \u003d 0; i \u003c tableau.getHeight(); i++) {\n+        if (i !\u003d pivotRow) {\n+            double multiplier \u003d tableau.getEntry(i, pivotCol);\n+            tableau.subtractRow(i, pivotRow, multiplier);\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected void doIteration(final SimplexTableau tableau) throws OptimizationException {\n    incrementIterationsCounter();\n    Integer pivotCol \u003d getPivotColumn(tableau);\n    Integer pivotRow \u003d getPivotRow(pivotCol, tableau);\n    if (pivotRow \u003d\u003d null) {\n        throw new UnboundedSolutionException();\n    }\n    double pivotVal \u003d tableau.getEntry(pivotRow, pivotCol);\n    tableau.divideRow(pivotRow, pivotVal);\n    for (int i \u003d 0; i \u003c tableau.getHeight(); i++) {\n        if (i !\u003d pivotRow) {\n            double multiplier \u003d tableau.getEntry(i, pivotCol);\n            tableau.subtractRow(i, pivotRow, multiplier);\n        }\n    }\n}",
      "path": "src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java",
      "functionStartLine": 102,
      "functionName": "doIteration",
      "functionAnnotation": "",
      "functionDoc": "Runs one iteration of the Simplex method on the given model.\n\n@param tableau simple tableau for the problem\n@throws OptimizationException if the maximal iteration count has been\nexceeded or if the model is found not to have a bounded solution\n"
    }
  }
}