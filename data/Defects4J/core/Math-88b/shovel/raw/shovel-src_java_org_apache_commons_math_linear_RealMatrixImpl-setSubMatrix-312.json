{
  "origin": "codeshovel",
  "repositoryName": "Math-88b",
  "repositoryPath": "/tmp/Math-88b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RealMatrixImpl.java",
  "functionName": "setSubMatrix",
  "functionId": "setSubMatrix___subMatrix-double[][](modifiers-final)__row-int(modifiers-final)__column-int(modifiers-final)",
  "sourceFilePath": "src/java/org/apache/commons/math/linear/RealMatrixImpl.java",
  "functionAnnotation": "@Override",
  "functionDoc": "@inheritDoc}\n",
  "functionStartLine": 312,
  "functionEndLine": 347,
  "numCommitsSeen": 136,
  "timeTaken": 3213,
  "changeHistory": [
    "9c8d2c79c1ef565337599849cd066ff63b8d5816",
    "7f88773d6c3c96c0a2fd24c3e50d1eb80daca11d",
    "b8789b6e0983b49ed173bdabde6e9dcf005ae1b2",
    "c28099c6ede92badb1c26c003ea64c5f3f38377e",
    "17238b2e4570213c4d31d4df6805b24dadc468c1",
    "94417fe1ff3d59d80dd0edc0de712d37785013a3",
    "03d29023a9024017531faf876570f1eac9834104",
    "2974de5bcae652a32b1d823f8965d66f56b82fd3",
    "7b37de8d8ce8145f933537db67070dc91e19d86b",
    "479f7773075c136b43a9cf120704c77c0a4880ab",
    "cfc6701de6f21b7464a3f1b94546ced7beea8441",
    "3531f01cf943fe4681326652f8854730cdc26b6b",
    "4073bdf14d26f83799eb2c297ed1d7febefdfe93"
  ],
  "changeHistoryShort": {
    "9c8d2c79c1ef565337599849cd066ff63b8d5816": "Yannotationchange",
    "7f88773d6c3c96c0a2fd24c3e50d1eb80daca11d": "Ybodychange",
    "b8789b6e0983b49ed173bdabde6e9dcf005ae1b2": "Ybodychange",
    "c28099c6ede92badb1c26c003ea64c5f3f38377e": "Ymultichange(Ybodychange,Yparametermetachange,Ydocchange)",
    "17238b2e4570213c4d31d4df6805b24dadc468c1": "Ybodychange",
    "94417fe1ff3d59d80dd0edc0de712d37785013a3": "Ybodychange",
    "03d29023a9024017531faf876570f1eac9834104": "Ybodychange",
    "2974de5bcae652a32b1d823f8965d66f56b82fd3": "Ybodychange",
    "7b37de8d8ce8145f933537db67070dc91e19d86b": "Ybodychange",
    "479f7773075c136b43a9cf120704c77c0a4880ab": "Ydocchange",
    "cfc6701de6f21b7464a3f1b94546ced7beea8441": "Ydocchange",
    "3531f01cf943fe4681326652f8854730cdc26b6b": "Yformatchange",
    "4073bdf14d26f83799eb2c297ed1d7febefdfe93": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9c8d2c79c1ef565337599849cd066ff63b8d5816": {
      "type": "Yannotationchange",
      "commitMessage": "added missing @Override annotations\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@762087 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/5/09, 7:20 AM",
      "commitName": "9c8d2c79c1ef565337599849cd066ff63b8d5816",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "2/21/09, 12:01 PM",
      "commitNameOld": "7f88773d6c3c96c0a2fd24c3e50d1eb80daca11d",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 42.76,
      "commitsBetweenForRepo": 54,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void setSubMatrix(final double[][] subMatrix, final int row, final int column) throws MatrixIndexException {\n    if (data \u003d\u003d null) {\n        if (row \u003e 0) {\n            throw MathRuntimeException.createIllegalStateException(\"first {0} rows are not initialized yet\", row);\n        }\n        if (column \u003e 0) {\n            throw MathRuntimeException.createIllegalStateException(\"first {0} columns are not initialized yet\", column);\n        }\n        final int nRows \u003d subMatrix.length;\n        if (nRows \u003d\u003d 0) {\n            throw MathRuntimeException.createIllegalArgumentException(\"matrix must have at least one row\");\n        }\n        final int nCols \u003d subMatrix[0].length;\n        if (nCols \u003d\u003d 0) {\n            throw MathRuntimeException.createIllegalArgumentException(\"matrix must have at least one column\");\n        }\n        data \u003d new double[subMatrix.length][nCols];\n        for (int i \u003d 0; i \u003c data.length; ++i) {\n            if (subMatrix[i].length !\u003d nCols) {\n                throw MathRuntimeException.createIllegalArgumentException(\"some rows have length {0} while others have length {1}\", nCols, subMatrix[i].length);\n            }\n            System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);\n        }\n    } else {\n        super.setSubMatrix(subMatrix, row, column);\n    }\n}",
      "path": "src/java/org/apache/commons/math/linear/RealMatrixImpl.java",
      "functionStartLine": 312,
      "functionName": "setSubMatrix",
      "functionAnnotation": "@Override",
      "functionDoc": "@inheritDoc}\n",
      "diff": "@@ -1,27 +1,28 @@\n+@Override\n public void setSubMatrix(final double[][] subMatrix, final int row, final int column) throws MatrixIndexException {\n     if (data \u003d\u003d null) {\n         if (row \u003e 0) {\n             throw MathRuntimeException.createIllegalStateException(\"first {0} rows are not initialized yet\", row);\n         }\n         if (column \u003e 0) {\n             throw MathRuntimeException.createIllegalStateException(\"first {0} columns are not initialized yet\", column);\n         }\n         final int nRows \u003d subMatrix.length;\n         if (nRows \u003d\u003d 0) {\n             throw MathRuntimeException.createIllegalArgumentException(\"matrix must have at least one row\");\n         }\n         final int nCols \u003d subMatrix[0].length;\n         if (nCols \u003d\u003d 0) {\n             throw MathRuntimeException.createIllegalArgumentException(\"matrix must have at least one column\");\n         }\n         data \u003d new double[subMatrix.length][nCols];\n         for (int i \u003d 0; i \u003c data.length; ++i) {\n             if (subMatrix[i].length !\u003d nCols) {\n                 throw MathRuntimeException.createIllegalArgumentException(\"some rows have length {0} while others have length {1}\", nCols, subMatrix[i].length);\n             }\n             System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);\n         }\n     } else {\n         super.setSubMatrix(subMatrix, row, column);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "",
        "newValue": "@Override"
      }
    },
    "7f88773d6c3c96c0a2fd24c3e50d1eb80daca11d": {
      "type": "Ybodychange",
      "commitMessage": "replaced Object[] parameters by variable arguments in exceptions constructors\nthis allows simpler error declaration and removes the need for the strange\nnull argument with fixed messages\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@746578 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/21/09, 12:01 PM",
      "commitName": "7f88773d6c3c96c0a2fd24c3e50d1eb80daca11d",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "1/2/09, 9:07 AM",
      "commitNameOld": "e8c9aea1b31e6b28085c8c4776d93cdd29198ddb",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 50.12,
      "commitsBetweenForRepo": 88,
      "commitsBetweenForFile": 1,
      "actualSource": "public void setSubMatrix(final double[][] subMatrix, final int row, final int column) throws MatrixIndexException {\n    if (data \u003d\u003d null) {\n        if (row \u003e 0) {\n            throw MathRuntimeException.createIllegalStateException(\"first {0} rows are not initialized yet\", row);\n        }\n        if (column \u003e 0) {\n            throw MathRuntimeException.createIllegalStateException(\"first {0} columns are not initialized yet\", column);\n        }\n        final int nRows \u003d subMatrix.length;\n        if (nRows \u003d\u003d 0) {\n            throw MathRuntimeException.createIllegalArgumentException(\"matrix must have at least one row\");\n        }\n        final int nCols \u003d subMatrix[0].length;\n        if (nCols \u003d\u003d 0) {\n            throw MathRuntimeException.createIllegalArgumentException(\"matrix must have at least one column\");\n        }\n        data \u003d new double[subMatrix.length][nCols];\n        for (int i \u003d 0; i \u003c data.length; ++i) {\n            if (subMatrix[i].length !\u003d nCols) {\n                throw MathRuntimeException.createIllegalArgumentException(\"some rows have length {0} while others have length {1}\", nCols, subMatrix[i].length);\n            }\n            System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);\n        }\n    } else {\n        super.setSubMatrix(subMatrix, row, column);\n    }\n}",
      "path": "src/java/org/apache/commons/math/linear/RealMatrixImpl.java",
      "functionStartLine": 305,
      "functionName": "setSubMatrix",
      "functionAnnotation": "",
      "functionDoc": "@inheritDoc}\n",
      "diff": "@@ -1,27 +1,27 @@\n public void setSubMatrix(final double[][] subMatrix, final int row, final int column) throws MatrixIndexException {\n     if (data \u003d\u003d null) {\n         if (row \u003e 0) {\n-            throw MathRuntimeException.createIllegalStateException(\"first {0} rows are not initialized yet\", new Object[] { row });\n+            throw MathRuntimeException.createIllegalStateException(\"first {0} rows are not initialized yet\", row);\n         }\n         if (column \u003e 0) {\n-            throw MathRuntimeException.createIllegalStateException(\"first {0} columns are not initialized yet\", new Object[] { column });\n+            throw MathRuntimeException.createIllegalStateException(\"first {0} columns are not initialized yet\", column);\n         }\n         final int nRows \u003d subMatrix.length;\n         if (nRows \u003d\u003d 0) {\n-            throw MathRuntimeException.createIllegalArgumentException(\"matrix must have at least one row\", null);\n+            throw MathRuntimeException.createIllegalArgumentException(\"matrix must have at least one row\");\n         }\n         final int nCols \u003d subMatrix[0].length;\n         if (nCols \u003d\u003d 0) {\n-            throw MathRuntimeException.createIllegalArgumentException(\"matrix must have at least one column\", null);\n+            throw MathRuntimeException.createIllegalArgumentException(\"matrix must have at least one column\");\n         }\n         data \u003d new double[subMatrix.length][nCols];\n         for (int i \u003d 0; i \u003c data.length; ++i) {\n             if (subMatrix[i].length !\u003d nCols) {\n-                throw MathRuntimeException.createIllegalArgumentException(\"some rows have length {0} while others have length {1}\", new Object[] { nCols, subMatrix[i].length });\n+                throw MathRuntimeException.createIllegalArgumentException(\"some rows have length {0} while others have length {1}\", nCols, subMatrix[i].length);\n             }\n             System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);\n         }\n     } else {\n         super.setSubMatrix(subMatrix, row, column);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b8789b6e0983b49ed173bdabde6e9dcf005ae1b2": {
      "type": "Ybodychange",
      "commitMessage": "fixed missing error checks\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@724187 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/7/08, 12:17 PM",
      "commitName": "b8789b6e0983b49ed173bdabde6e9dcf005ae1b2",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "12/7/08, 7:21 AM",
      "commitNameOld": "c28099c6ede92badb1c26c003ea64c5f3f38377e",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 0.21,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "public void setSubMatrix(final double[][] subMatrix, final int row, final int column) throws MatrixIndexException {\n    if (data \u003d\u003d null) {\n        if (row \u003e 0) {\n            throw MathRuntimeException.createIllegalStateException(\"first {0} rows are not initialized yet\", new Object[] { row });\n        }\n        if (column \u003e 0) {\n            throw MathRuntimeException.createIllegalStateException(\"first {0} columns are not initialized yet\", new Object[] { column });\n        }\n        final int nRows \u003d subMatrix.length;\n        if (nRows \u003d\u003d 0) {\n            throw MathRuntimeException.createIllegalArgumentException(\"matrix must have at least one row\", null);\n        }\n        final int nCols \u003d subMatrix[0].length;\n        if (nCols \u003d\u003d 0) {\n            throw MathRuntimeException.createIllegalArgumentException(\"matrix must have at least one column\", null);\n        }\n        data \u003d new double[subMatrix.length][nCols];\n        for (int i \u003d 0; i \u003c data.length; ++i) {\n            if (subMatrix[i].length !\u003d nCols) {\n                throw MathRuntimeException.createIllegalArgumentException(\"some rows have length {0} while others have length {1}\", new Object[] { nCols, subMatrix[i].length });\n            }\n            System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);\n        }\n    } else {\n        super.setSubMatrix(subMatrix, row, column);\n    }\n}",
      "path": "src/java/org/apache/commons/math/linear/RealMatrixImpl.java",
      "functionStartLine": 313,
      "functionName": "setSubMatrix",
      "functionAnnotation": "",
      "functionDoc": "@inheritDoc}\n",
      "diff": "@@ -1,16 +1,27 @@\n public void setSubMatrix(final double[][] subMatrix, final int row, final int column) throws MatrixIndexException {\n     if (data \u003d\u003d null) {\n         if (row \u003e 0) {\n             throw MathRuntimeException.createIllegalStateException(\"first {0} rows are not initialized yet\", new Object[] { row });\n         }\n         if (column \u003e 0) {\n             throw MathRuntimeException.createIllegalStateException(\"first {0} columns are not initialized yet\", new Object[] { column });\n         }\n-        data \u003d new double[subMatrix.length][subMatrix[0].length];\n+        final int nRows \u003d subMatrix.length;\n+        if (nRows \u003d\u003d 0) {\n+            throw MathRuntimeException.createIllegalArgumentException(\"matrix must have at least one row\", null);\n+        }\n+        final int nCols \u003d subMatrix[0].length;\n+        if (nCols \u003d\u003d 0) {\n+            throw MathRuntimeException.createIllegalArgumentException(\"matrix must have at least one column\", null);\n+        }\n+        data \u003d new double[subMatrix.length][nCols];\n         for (int i \u003d 0; i \u003c data.length; ++i) {\n-            System.arraycopy(subMatrix[i], 0, data[i], 0, subMatrix[i].length);\n+            if (subMatrix[i].length !\u003d nCols) {\n+                throw MathRuntimeException.createIllegalArgumentException(\"some rows have length {0} while others have length {1}\", new Object[] { nCols, subMatrix[i].length });\n+            }\n+            System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);\n         }\n     } else {\n         super.setSubMatrix(subMatrix, row, column);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c28099c6ede92badb1c26c003ea64c5f3f38377e": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange,Ydocchange)",
      "commitMessage": "added an abstract implementation of RealMatrix and used it for RealMatrixImpl\nJIRA: MATH-231\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@724141 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/7/08, 7:21 AM",
      "commitName": "c28099c6ede92badb1c26c003ea64c5f3f38377e",
      "commitAuthor": "Luc Maisonobe",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "added an abstract implementation of RealMatrix and used it for RealMatrixImpl\nJIRA: MATH-231\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@724141 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/7/08, 7:21 AM",
          "commitName": "c28099c6ede92badb1c26c003ea64c5f3f38377e",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "12/5/08, 6:05 AM",
          "commitNameOld": "17238b2e4570213c4d31d4df6805b24dadc468c1",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 2.05,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "actualSource": "public void setSubMatrix(final double[][] subMatrix, final int row, final int column) throws MatrixIndexException {\n    if (data \u003d\u003d null) {\n        if (row \u003e 0) {\n            throw MathRuntimeException.createIllegalStateException(\"first {0} rows are not initialized yet\", new Object[] { row });\n        }\n        if (column \u003e 0) {\n            throw MathRuntimeException.createIllegalStateException(\"first {0} columns are not initialized yet\", new Object[] { column });\n        }\n        data \u003d new double[subMatrix.length][subMatrix[0].length];\n        for (int i \u003d 0; i \u003c data.length; ++i) {\n            System.arraycopy(subMatrix[i], 0, data[i], 0, subMatrix[i].length);\n        }\n    } else {\n        super.setSubMatrix(subMatrix, row, column);\n    }\n}",
          "path": "src/java/org/apache/commons/math/linear/RealMatrixImpl.java",
          "functionStartLine": 313,
          "functionName": "setSubMatrix",
          "functionAnnotation": "",
          "functionDoc": "@inheritDoc}\n",
          "diff": "@@ -1,34 +1,16 @@\n-public void setSubMatrix(double[][] subMatrix, int row, int column) throws MatrixIndexException {\n-    final int nRows \u003d subMatrix.length;\n-    if (nRows \u003d\u003d 0) {\n-        throw new IllegalArgumentException(\"Matrix must have at least one row.\");\n-    }\n-    final int nCols \u003d subMatrix[0].length;\n-    if (nCols \u003d\u003d 0) {\n-        throw new IllegalArgumentException(\"Matrix must have at least one column.\");\n-    }\n-    for (int r \u003d 1; r \u003c nRows; r++) {\n-        if (subMatrix[r].length !\u003d nCols) {\n-            throw new IllegalArgumentException(\"All input rows must have the same length.\");\n-        }\n-    }\n+public void setSubMatrix(final double[][] subMatrix, final int row, final int column) throws MatrixIndexException {\n     if (data \u003d\u003d null) {\n         if (row \u003e 0) {\n             throw MathRuntimeException.createIllegalStateException(\"first {0} rows are not initialized yet\", new Object[] { row });\n         }\n         if (column \u003e 0) {\n             throw MathRuntimeException.createIllegalStateException(\"first {0} columns are not initialized yet\", new Object[] { column });\n         }\n-        data \u003d new double[nRows][nCols];\n-        System.arraycopy(subMatrix, 0, data, 0, subMatrix.length);\n+        data \u003d new double[subMatrix.length][subMatrix[0].length];\n+        for (int i \u003d 0; i \u003c data.length; ++i) {\n+            System.arraycopy(subMatrix[i], 0, data[i], 0, subMatrix[i].length);\n+        }\n     } else {\n-        checkRowIndex(row);\n-        checkColumnIndex(column);\n-        checkRowIndex(nRows + row - 1);\n-        checkColumnIndex(nCols + column - 1);\n+        super.setSubMatrix(subMatrix, row, column);\n     }\n-    for (int i \u003d 0; i \u003c nRows; i++) {\n-        System.arraycopy(subMatrix[i], 0, data[row + i], column, nCols);\n-    }\n-    lu \u003d null;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "added an abstract implementation of RealMatrix and used it for RealMatrixImpl\nJIRA: MATH-231\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@724141 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/7/08, 7:21 AM",
          "commitName": "c28099c6ede92badb1c26c003ea64c5f3f38377e",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "12/5/08, 6:05 AM",
          "commitNameOld": "17238b2e4570213c4d31d4df6805b24dadc468c1",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 2.05,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "actualSource": "public void setSubMatrix(final double[][] subMatrix, final int row, final int column) throws MatrixIndexException {\n    if (data \u003d\u003d null) {\n        if (row \u003e 0) {\n            throw MathRuntimeException.createIllegalStateException(\"first {0} rows are not initialized yet\", new Object[] { row });\n        }\n        if (column \u003e 0) {\n            throw MathRuntimeException.createIllegalStateException(\"first {0} columns are not initialized yet\", new Object[] { column });\n        }\n        data \u003d new double[subMatrix.length][subMatrix[0].length];\n        for (int i \u003d 0; i \u003c data.length; ++i) {\n            System.arraycopy(subMatrix[i], 0, data[i], 0, subMatrix[i].length);\n        }\n    } else {\n        super.setSubMatrix(subMatrix, row, column);\n    }\n}",
          "path": "src/java/org/apache/commons/math/linear/RealMatrixImpl.java",
          "functionStartLine": 313,
          "functionName": "setSubMatrix",
          "functionAnnotation": "",
          "functionDoc": "@inheritDoc}\n",
          "diff": "@@ -1,34 +1,16 @@\n-public void setSubMatrix(double[][] subMatrix, int row, int column) throws MatrixIndexException {\n-    final int nRows \u003d subMatrix.length;\n-    if (nRows \u003d\u003d 0) {\n-        throw new IllegalArgumentException(\"Matrix must have at least one row.\");\n-    }\n-    final int nCols \u003d subMatrix[0].length;\n-    if (nCols \u003d\u003d 0) {\n-        throw new IllegalArgumentException(\"Matrix must have at least one column.\");\n-    }\n-    for (int r \u003d 1; r \u003c nRows; r++) {\n-        if (subMatrix[r].length !\u003d nCols) {\n-            throw new IllegalArgumentException(\"All input rows must have the same length.\");\n-        }\n-    }\n+public void setSubMatrix(final double[][] subMatrix, final int row, final int column) throws MatrixIndexException {\n     if (data \u003d\u003d null) {\n         if (row \u003e 0) {\n             throw MathRuntimeException.createIllegalStateException(\"first {0} rows are not initialized yet\", new Object[] { row });\n         }\n         if (column \u003e 0) {\n             throw MathRuntimeException.createIllegalStateException(\"first {0} columns are not initialized yet\", new Object[] { column });\n         }\n-        data \u003d new double[nRows][nCols];\n-        System.arraycopy(subMatrix, 0, data, 0, subMatrix.length);\n+        data \u003d new double[subMatrix.length][subMatrix[0].length];\n+        for (int i \u003d 0; i \u003c data.length; ++i) {\n+            System.arraycopy(subMatrix[i], 0, data[i], 0, subMatrix[i].length);\n+        }\n     } else {\n-        checkRowIndex(row);\n-        checkColumnIndex(column);\n-        checkRowIndex(nRows + row - 1);\n-        checkColumnIndex(nCols + column - 1);\n+        super.setSubMatrix(subMatrix, row, column);\n     }\n-    for (int i \u003d 0; i \u003c nRows; i++) {\n-        System.arraycopy(subMatrix[i], 0, data[row + i], column, nCols);\n-    }\n-    lu \u003d null;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[subMatrix-double[][], row-int, column-int]",
            "newValue": "[subMatrix-double[][](modifiers-final), row-int(modifiers-final), column-int(modifiers-final)]"
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "added an abstract implementation of RealMatrix and used it for RealMatrixImpl\nJIRA: MATH-231\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@724141 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/7/08, 7:21 AM",
          "commitName": "c28099c6ede92badb1c26c003ea64c5f3f38377e",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "12/5/08, 6:05 AM",
          "commitNameOld": "17238b2e4570213c4d31d4df6805b24dadc468c1",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 2.05,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "actualSource": "public void setSubMatrix(final double[][] subMatrix, final int row, final int column) throws MatrixIndexException {\n    if (data \u003d\u003d null) {\n        if (row \u003e 0) {\n            throw MathRuntimeException.createIllegalStateException(\"first {0} rows are not initialized yet\", new Object[] { row });\n        }\n        if (column \u003e 0) {\n            throw MathRuntimeException.createIllegalStateException(\"first {0} columns are not initialized yet\", new Object[] { column });\n        }\n        data \u003d new double[subMatrix.length][subMatrix[0].length];\n        for (int i \u003d 0; i \u003c data.length; ++i) {\n            System.arraycopy(subMatrix[i], 0, data[i], 0, subMatrix[i].length);\n        }\n    } else {\n        super.setSubMatrix(subMatrix, row, column);\n    }\n}",
          "path": "src/java/org/apache/commons/math/linear/RealMatrixImpl.java",
          "functionStartLine": 313,
          "functionName": "setSubMatrix",
          "functionAnnotation": "",
          "functionDoc": "@inheritDoc}\n",
          "diff": "@@ -1,34 +1,16 @@\n-public void setSubMatrix(double[][] subMatrix, int row, int column) throws MatrixIndexException {\n-    final int nRows \u003d subMatrix.length;\n-    if (nRows \u003d\u003d 0) {\n-        throw new IllegalArgumentException(\"Matrix must have at least one row.\");\n-    }\n-    final int nCols \u003d subMatrix[0].length;\n-    if (nCols \u003d\u003d 0) {\n-        throw new IllegalArgumentException(\"Matrix must have at least one column.\");\n-    }\n-    for (int r \u003d 1; r \u003c nRows; r++) {\n-        if (subMatrix[r].length !\u003d nCols) {\n-            throw new IllegalArgumentException(\"All input rows must have the same length.\");\n-        }\n-    }\n+public void setSubMatrix(final double[][] subMatrix, final int row, final int column) throws MatrixIndexException {\n     if (data \u003d\u003d null) {\n         if (row \u003e 0) {\n             throw MathRuntimeException.createIllegalStateException(\"first {0} rows are not initialized yet\", new Object[] { row });\n         }\n         if (column \u003e 0) {\n             throw MathRuntimeException.createIllegalStateException(\"first {0} columns are not initialized yet\", new Object[] { column });\n         }\n-        data \u003d new double[nRows][nCols];\n-        System.arraycopy(subMatrix, 0, data, 0, subMatrix.length);\n+        data \u003d new double[subMatrix.length][subMatrix[0].length];\n+        for (int i \u003d 0; i \u003c data.length; ++i) {\n+            System.arraycopy(subMatrix[i], 0, data[i], 0, subMatrix[i].length);\n+        }\n     } else {\n-        checkRowIndex(row);\n-        checkColumnIndex(column);\n-        checkRowIndex(nRows + row - 1);\n-        checkColumnIndex(nCols + column - 1);\n+        super.setSubMatrix(subMatrix, row, column);\n     }\n-    for (int i \u003d 0; i \u003c nRows; i++) {\n-        System.arraycopy(subMatrix[i], 0, data[row + i], column, nCols);\n-    }\n-    lu \u003d null;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Replace the submatrix starting at \u003ccode\u003erow, column\u003c/code\u003e using data in\nthe input \u003ccode\u003esubMatrix\u003c/code\u003e array. Indexes are 0-based.\n\u003cp\u003e \nExample:\u003cbr\u003e\nStarting with \u003cpre\u003e\n1  2  3  4\n5  6  7  8\n9  0  1  2\n\u003c/pre\u003e\nand \u003ccode\u003esubMatrix \u003d {{3, 4} {5,6}}\u003c/code\u003e, invoking \n\u003ccode\u003esetSubMatrix(subMatrix,1,1))\u003c/code\u003e will result in \u003cpre\u003e\n1  2  3  4\n5  3  4  8\n9  5  6  2\n\u003c/pre\u003e\u003c/p\u003e\n\n@param subMatrix array containing the submatrix replacement data\n@param row row coordinate of the top, left element to be replaced\n@param column column coordinate of the top, left element to be replaced\n@throws MatrixIndexException  if subMatrix does not fit into this \n   matrix from element in (row, column)\n@throws IllegalArgumentException if \u003ccode\u003esubMatrix\u003c/code\u003e is not rectangular\n (not all rows have the same length) or empty\n@throws NullPointerException if \u003ccode\u003esubMatrix\u003c/code\u003e is null\n@since 1.1\n",
            "newValue": "@inheritDoc}\n"
          }
        }
      ]
    },
    "17238b2e4570213c4d31d4df6805b24dadc468c1": {
      "type": "Ybodychange",
      "commitMessage": "improved matrix decomposition API.\nsolving a linear system AX \u003d B is now done by a call like:\n  RealVector x \u003d new XyzSolver(new XyzDecomposition(a)).solve(b);\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@723736 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/5/08, 6:05 AM",
      "commitName": "17238b2e4570213c4d31d4df6805b24dadc468c1",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "12/4/08, 3:48 PM",
      "commitNameOld": "94417fe1ff3d59d80dd0edc0de712d37785013a3",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 0.6,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "public void setSubMatrix(double[][] subMatrix, int row, int column) throws MatrixIndexException {\n    final int nRows \u003d subMatrix.length;\n    if (nRows \u003d\u003d 0) {\n        throw new IllegalArgumentException(\"Matrix must have at least one row.\");\n    }\n    final int nCols \u003d subMatrix[0].length;\n    if (nCols \u003d\u003d 0) {\n        throw new IllegalArgumentException(\"Matrix must have at least one column.\");\n    }\n    for (int r \u003d 1; r \u003c nRows; r++) {\n        if (subMatrix[r].length !\u003d nCols) {\n            throw new IllegalArgumentException(\"All input rows must have the same length.\");\n        }\n    }\n    if (data \u003d\u003d null) {\n        if (row \u003e 0) {\n            throw MathRuntimeException.createIllegalStateException(\"first {0} rows are not initialized yet\", new Object[] { row });\n        }\n        if (column \u003e 0) {\n            throw MathRuntimeException.createIllegalStateException(\"first {0} columns are not initialized yet\", new Object[] { column });\n        }\n        data \u003d new double[nRows][nCols];\n        System.arraycopy(subMatrix, 0, data, 0, subMatrix.length);\n    } else {\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n    }\n    for (int i \u003d 0; i \u003c nRows; i++) {\n        System.arraycopy(subMatrix[i], 0, data[row + i], column, nCols);\n    }\n    lu \u003d null;\n}",
      "path": "src/java/org/apache/commons/math/linear/RealMatrixImpl.java",
      "functionStartLine": 503,
      "functionName": "setSubMatrix",
      "functionAnnotation": "",
      "functionDoc": "Replace the submatrix starting at \u003ccode\u003erow, column\u003c/code\u003e using data in\nthe input \u003ccode\u003esubMatrix\u003c/code\u003e array. Indexes are 0-based.\n\u003cp\u003e \nExample:\u003cbr\u003e\nStarting with \u003cpre\u003e\n1  2  3  4\n5  6  7  8\n9  0  1  2\n\u003c/pre\u003e\nand \u003ccode\u003esubMatrix \u003d {{3, 4} {5,6}}\u003c/code\u003e, invoking \n\u003ccode\u003esetSubMatrix(subMatrix,1,1))\u003c/code\u003e will result in \u003cpre\u003e\n1  2  3  4\n5  3  4  8\n9  5  6  2\n\u003c/pre\u003e\u003c/p\u003e\n\n@param subMatrix array containing the submatrix replacement data\n@param row row coordinate of the top, left element to be replaced\n@param column column coordinate of the top, left element to be replaced\n@throws MatrixIndexException  if subMatrix does not fit into this \n   matrix from element in (row, column)\n@throws IllegalArgumentException if \u003ccode\u003esubMatrix\u003c/code\u003e is not rectangular\n (not all rows have the same length) or empty\n@throws NullPointerException if \u003ccode\u003esubMatrix\u003c/code\u003e is null\n@since 1.1\n",
      "diff": "@@ -1,34 +1,34 @@\n public void setSubMatrix(double[][] subMatrix, int row, int column) throws MatrixIndexException {\n     final int nRows \u003d subMatrix.length;\n     if (nRows \u003d\u003d 0) {\n         throw new IllegalArgumentException(\"Matrix must have at least one row.\");\n     }\n     final int nCols \u003d subMatrix[0].length;\n     if (nCols \u003d\u003d 0) {\n         throw new IllegalArgumentException(\"Matrix must have at least one column.\");\n     }\n     for (int r \u003d 1; r \u003c nRows; r++) {\n         if (subMatrix[r].length !\u003d nCols) {\n             throw new IllegalArgumentException(\"All input rows must have the same length.\");\n         }\n     }\n     if (data \u003d\u003d null) {\n         if (row \u003e 0) {\n             throw MathRuntimeException.createIllegalStateException(\"first {0} rows are not initialized yet\", new Object[] { row });\n         }\n         if (column \u003e 0) {\n             throw MathRuntimeException.createIllegalStateException(\"first {0} columns are not initialized yet\", new Object[] { column });\n         }\n         data \u003d new double[nRows][nCols];\n         System.arraycopy(subMatrix, 0, data, 0, subMatrix.length);\n     } else {\n         checkRowIndex(row);\n         checkColumnIndex(column);\n         checkRowIndex(nRows + row - 1);\n         checkColumnIndex(nCols + column - 1);\n     }\n     for (int i \u003d 0; i \u003c nRows; i++) {\n         System.arraycopy(subMatrix[i], 0, data[row + i], column, nCols);\n     }\n-    ds \u003d null;\n+    lu \u003d null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "94417fe1ff3d59d80dd0edc0de712d37785013a3": {
      "type": "Ybodychange",
      "commitMessage": "moved the various solve function out of decomposition algorithms\nand into a dedicated DecompositionSolver class\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@723496 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/4/08, 3:48 PM",
      "commitName": "94417fe1ff3d59d80dd0edc0de712d37785013a3",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "12/4/08, 7:41 AM",
      "commitNameOld": "e37e28a55d8a65a49213afbb0886468cc5eb5a7d",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "public void setSubMatrix(double[][] subMatrix, int row, int column) throws MatrixIndexException {\n    final int nRows \u003d subMatrix.length;\n    if (nRows \u003d\u003d 0) {\n        throw new IllegalArgumentException(\"Matrix must have at least one row.\");\n    }\n    final int nCols \u003d subMatrix[0].length;\n    if (nCols \u003d\u003d 0) {\n        throw new IllegalArgumentException(\"Matrix must have at least one column.\");\n    }\n    for (int r \u003d 1; r \u003c nRows; r++) {\n        if (subMatrix[r].length !\u003d nCols) {\n            throw new IllegalArgumentException(\"All input rows must have the same length.\");\n        }\n    }\n    if (data \u003d\u003d null) {\n        if (row \u003e 0) {\n            throw MathRuntimeException.createIllegalStateException(\"first {0} rows are not initialized yet\", new Object[] { row });\n        }\n        if (column \u003e 0) {\n            throw MathRuntimeException.createIllegalStateException(\"first {0} columns are not initialized yet\", new Object[] { column });\n        }\n        data \u003d new double[nRows][nCols];\n        System.arraycopy(subMatrix, 0, data, 0, subMatrix.length);\n    } else {\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n    }\n    for (int i \u003d 0; i \u003c nRows; i++) {\n        System.arraycopy(subMatrix[i], 0, data[row + i], column, nCols);\n    }\n    ds \u003d null;\n}",
      "path": "src/java/org/apache/commons/math/linear/RealMatrixImpl.java",
      "functionStartLine": 508,
      "functionName": "setSubMatrix",
      "functionAnnotation": "",
      "functionDoc": "Replace the submatrix starting at \u003ccode\u003erow, column\u003c/code\u003e using data in\nthe input \u003ccode\u003esubMatrix\u003c/code\u003e array. Indexes are 0-based.\n\u003cp\u003e \nExample:\u003cbr\u003e\nStarting with \u003cpre\u003e\n1  2  3  4\n5  6  7  8\n9  0  1  2\n\u003c/pre\u003e\nand \u003ccode\u003esubMatrix \u003d {{3, 4} {5,6}}\u003c/code\u003e, invoking \n\u003ccode\u003esetSubMatrix(subMatrix,1,1))\u003c/code\u003e will result in \u003cpre\u003e\n1  2  3  4\n5  3  4  8\n9  5  6  2\n\u003c/pre\u003e\u003c/p\u003e\n\n@param subMatrix array containing the submatrix replacement data\n@param row row coordinate of the top, left element to be replaced\n@param column column coordinate of the top, left element to be replaced\n@throws MatrixIndexException  if subMatrix does not fit into this \n   matrix from element in (row, column)\n@throws IllegalArgumentException if \u003ccode\u003esubMatrix\u003c/code\u003e is not rectangular\n (not all rows have the same length) or empty\n@throws NullPointerException if \u003ccode\u003esubMatrix\u003c/code\u003e is null\n@since 1.1\n",
      "diff": "@@ -1,34 +1,34 @@\n public void setSubMatrix(double[][] subMatrix, int row, int column) throws MatrixIndexException {\n     final int nRows \u003d subMatrix.length;\n     if (nRows \u003d\u003d 0) {\n         throw new IllegalArgumentException(\"Matrix must have at least one row.\");\n     }\n     final int nCols \u003d subMatrix[0].length;\n     if (nCols \u003d\u003d 0) {\n         throw new IllegalArgumentException(\"Matrix must have at least one column.\");\n     }\n     for (int r \u003d 1; r \u003c nRows; r++) {\n         if (subMatrix[r].length !\u003d nCols) {\n             throw new IllegalArgumentException(\"All input rows must have the same length.\");\n         }\n     }\n     if (data \u003d\u003d null) {\n         if (row \u003e 0) {\n             throw MathRuntimeException.createIllegalStateException(\"first {0} rows are not initialized yet\", new Object[] { row });\n         }\n         if (column \u003e 0) {\n             throw MathRuntimeException.createIllegalStateException(\"first {0} columns are not initialized yet\", new Object[] { column });\n         }\n         data \u003d new double[nRows][nCols];\n         System.arraycopy(subMatrix, 0, data, 0, subMatrix.length);\n     } else {\n         checkRowIndex(row);\n         checkColumnIndex(column);\n         checkRowIndex(nRows + row - 1);\n         checkColumnIndex(nCols + column - 1);\n     }\n     for (int i \u003d 0; i \u003c nRows; i++) {\n         System.arraycopy(subMatrix[i], 0, data[row + i], column, nCols);\n     }\n-    lu \u003d null;\n+    ds \u003d null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "03d29023a9024017531faf876570f1eac9834104": {
      "type": "Ybodychange",
      "commitMessage": "improved error messages\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/branches/MATH_2_0@712430 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/8/08, 12:42 PM",
      "commitName": "03d29023a9024017531faf876570f1eac9834104",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "11/7/08, 6:55 AM",
      "commitNameOld": "f5bd08d2b9bda97c6d6bf83308cfeb41c0557afe",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 1.24,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "public void setSubMatrix(double[][] subMatrix, int row, int column) throws MatrixIndexException {\n    final int nRows \u003d subMatrix.length;\n    if (nRows \u003d\u003d 0) {\n        throw new IllegalArgumentException(\"Matrix must have at least one row.\");\n    }\n    final int nCols \u003d subMatrix[0].length;\n    if (nCols \u003d\u003d 0) {\n        throw new IllegalArgumentException(\"Matrix must have at least one column.\");\n    }\n    for (int r \u003d 1; r \u003c nRows; r++) {\n        if (subMatrix[r].length !\u003d nCols) {\n            throw new IllegalArgumentException(\"All input rows must have the same length.\");\n        }\n    }\n    if (data \u003d\u003d null) {\n        if (row \u003e 0) {\n            throw MathRuntimeException.createIllegalStateException(\"first {0} rows are not initialized yet\", new Object[] { row });\n        }\n        if (column \u003e 0) {\n            throw MathRuntimeException.createIllegalStateException(\"first {0} columns are not initialized yet\", new Object[] { column });\n        }\n        data \u003d new double[nRows][nCols];\n        System.arraycopy(subMatrix, 0, data, 0, subMatrix.length);\n    } else {\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n    }\n    for (int i \u003d 0; i \u003c nRows; i++) {\n        System.arraycopy(subMatrix[i], 0, data[row + i], column, nCols);\n    }\n    lu \u003d null;\n}",
      "path": "src/java/org/apache/commons/math/linear/RealMatrixImpl.java",
      "functionStartLine": 473,
      "functionName": "setSubMatrix",
      "functionAnnotation": "",
      "functionDoc": "Replace the submatrix starting at \u003ccode\u003erow, column\u003c/code\u003e using data in\nthe input \u003ccode\u003esubMatrix\u003c/code\u003e array. Indexes are 0-based.\n\u003cp\u003e \nExample:\u003cbr\u003e\nStarting with \u003cpre\u003e\n1  2  3  4\n5  6  7  8\n9  0  1  2\n\u003c/pre\u003e\nand \u003ccode\u003esubMatrix \u003d {{3, 4} {5,6}}\u003c/code\u003e, invoking \n\u003ccode\u003esetSubMatrix(subMatrix,1,1))\u003c/code\u003e will result in \u003cpre\u003e\n1  2  3  4\n5  3  4  8\n9  5  6  2\n\u003c/pre\u003e\u003c/p\u003e\n\n@param subMatrix array containing the submatrix replacement data\n@param row row coordinate of the top, left element to be replaced\n@param column column coordinate of the top, left element to be replaced\n@throws MatrixIndexException  if subMatrix does not fit into this \n   matrix from element in (row, column)\n@throws IllegalArgumentException if \u003ccode\u003esubMatrix\u003c/code\u003e is not rectangular\n (not all rows have the same length) or empty\n@throws NullPointerException if \u003ccode\u003esubMatrix\u003c/code\u003e is null\n@since 1.1\n",
      "diff": "@@ -1,31 +1,34 @@\n public void setSubMatrix(double[][] subMatrix, int row, int column) throws MatrixIndexException {\n     final int nRows \u003d subMatrix.length;\n     if (nRows \u003d\u003d 0) {\n         throw new IllegalArgumentException(\"Matrix must have at least one row.\");\n     }\n     final int nCols \u003d subMatrix[0].length;\n     if (nCols \u003d\u003d 0) {\n         throw new IllegalArgumentException(\"Matrix must have at least one column.\");\n     }\n     for (int r \u003d 1; r \u003c nRows; r++) {\n         if (subMatrix[r].length !\u003d nCols) {\n             throw new IllegalArgumentException(\"All input rows must have the same length.\");\n         }\n     }\n     if (data \u003d\u003d null) {\n-        if ((row \u003e 0) || (column \u003e 0)) {\n-            throw new IllegalStateException(\"matrix must be initialized to perform this method\");\n+        if (row \u003e 0) {\n+            throw MathRuntimeException.createIllegalStateException(\"first {0} rows are not initialized yet\", new Object[] { row });\n+        }\n+        if (column \u003e 0) {\n+            throw MathRuntimeException.createIllegalStateException(\"first {0} columns are not initialized yet\", new Object[] { column });\n         }\n         data \u003d new double[nRows][nCols];\n         System.arraycopy(subMatrix, 0, data, 0, subMatrix.length);\n     } else {\n         checkRowIndex(row);\n         checkColumnIndex(column);\n         checkRowIndex(nRows + row - 1);\n         checkColumnIndex(nCols + column - 1);\n     }\n     for (int i \u003d 0; i \u003c nRows; i++) {\n         System.arraycopy(subMatrix[i], 0, data[row + i], column, nCols);\n     }\n     lu \u003d null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2974de5bcae652a32b1d823f8965d66f56b82fd3": {
      "type": "Ybodychange",
      "commitMessage": "improved error handling in linear package with finer grained exceptions\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/branches/MATH_2_0@710168 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/3/08, 1:32 PM",
      "commitName": "2974de5bcae652a32b1d823f8965d66f56b82fd3",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "9/28/08, 8:55 AM",
      "commitNameOld": "0e547fb3775b1cd9fd2b1c15882d34432c238913",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 36.23,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "actualSource": "public void setSubMatrix(double[][] subMatrix, int row, int column) throws MatrixIndexException {\n    final int nRows \u003d subMatrix.length;\n    if (nRows \u003d\u003d 0) {\n        throw new IllegalArgumentException(\"Matrix must have at least one row.\");\n    }\n    final int nCols \u003d subMatrix[0].length;\n    if (nCols \u003d\u003d 0) {\n        throw new IllegalArgumentException(\"Matrix must have at least one column.\");\n    }\n    for (int r \u003d 1; r \u003c nRows; r++) {\n        if (subMatrix[r].length !\u003d nCols) {\n            throw new IllegalArgumentException(\"All input rows must have the same length.\");\n        }\n    }\n    if (data \u003d\u003d null) {\n        if ((row \u003e 0) || (column \u003e 0)) {\n            throw new IllegalStateException(\"matrix must be initialized to perform this method\");\n        }\n        data \u003d new double[nRows][nCols];\n        System.arraycopy(subMatrix, 0, data, 0, subMatrix.length);\n    } else {\n        checkRowIndex(row);\n        checkColumnIndex(column);\n        checkRowIndex(nRows + row - 1);\n        checkColumnIndex(nCols + column - 1);\n    }\n    for (int i \u003d 0; i \u003c nRows; i++) {\n        System.arraycopy(subMatrix[i], 0, data[row + i], column, nCols);\n    }\n    lu \u003d null;\n}",
      "path": "src/java/org/apache/commons/math/linear/RealMatrixImpl.java",
      "functionStartLine": 471,
      "functionName": "setSubMatrix",
      "functionAnnotation": "",
      "functionDoc": "Replace the submatrix starting at \u003ccode\u003erow, column\u003c/code\u003e using data in\nthe input \u003ccode\u003esubMatrix\u003c/code\u003e array. Indexes are 0-based.\n\u003cp\u003e \nExample:\u003cbr\u003e\nStarting with \u003cpre\u003e\n1  2  3  4\n5  6  7  8\n9  0  1  2\n\u003c/pre\u003e\nand \u003ccode\u003esubMatrix \u003d {{3, 4} {5,6}}\u003c/code\u003e, invoking \n\u003ccode\u003esetSubMatrix(subMatrix,1,1))\u003c/code\u003e will result in \u003cpre\u003e\n1  2  3  4\n5  3  4  8\n9  5  6  2\n\u003c/pre\u003e\u003c/p\u003e\n\n@param subMatrix array containing the submatrix replacement data\n@param row row coordinate of the top, left element to be replaced\n@param column column coordinate of the top, left element to be replaced\n@throws MatrixIndexException  if subMatrix does not fit into this \n   matrix from element in (row, column)\n@throws IllegalArgumentException if \u003ccode\u003esubMatrix\u003c/code\u003e is not rectangular\n (not all rows have the same length) or empty\n@throws NullPointerException if \u003ccode\u003esubMatrix\u003c/code\u003e is null\n@since 1.1\n",
      "diff": "@@ -1,30 +1,31 @@\n public void setSubMatrix(double[][] subMatrix, int row, int column) throws MatrixIndexException {\n-    if ((row \u003c 0) || (column \u003c 0)) {\n-        throw new MatrixIndexException(\"invalid row or column index selection\");\n-    }\n     final int nRows \u003d subMatrix.length;\n     if (nRows \u003d\u003d 0) {\n         throw new IllegalArgumentException(\"Matrix must have at least one row.\");\n     }\n     final int nCols \u003d subMatrix[0].length;\n     if (nCols \u003d\u003d 0) {\n         throw new IllegalArgumentException(\"Matrix must have at least one column.\");\n     }\n     for (int r \u003d 1; r \u003c nRows; r++) {\n         if (subMatrix[r].length !\u003d nCols) {\n             throw new IllegalArgumentException(\"All input rows must have the same length.\");\n         }\n     }\n     if (data \u003d\u003d null) {\n-        if ((row \u003e 0) || (column \u003e 0))\n-            throw new MatrixIndexException(\"matrix must be initialized to perfom this method\");\n+        if ((row \u003e 0) || (column \u003e 0)) {\n+            throw new IllegalStateException(\"matrix must be initialized to perform this method\");\n+        }\n         data \u003d new double[nRows][nCols];\n         System.arraycopy(subMatrix, 0, data, 0, subMatrix.length);\n+    } else {\n+        checkRowIndex(row);\n+        checkColumnIndex(column);\n+        checkRowIndex(nRows + row - 1);\n+        checkColumnIndex(nCols + column - 1);\n     }\n-    if (((nRows + row) \u003e this.getRowDimension()) || (nCols + column \u003e this.getColumnDimension()))\n-        throw new MatrixIndexException(\"invalid row or column index selection\");\n     for (int i \u003d 0; i \u003c nRows; i++) {\n         System.arraycopy(subMatrix[i], 0, data[row + i], column, nCols);\n     }\n     lu \u003d null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7b37de8d8ce8145f933537db67070dc91e19d86b": {
      "type": "Ybodychange",
      "commitMessage": "Improved linear RealMatrixImpl and BigMatrixImpl performances.\nThe main changes are the following ones:\n - use directly the storage array when possible for\n   diadic operations (add, subtract, multiply), as\n   suggested by Phil, this avoids the cost of the\n   generic getEntry method\n - replaced custom indices checks by simple use of\n   the JVM checks and ArrayIndexOutOfBoundException\n - put row arrays reference in local variables to\n   avoid multiple checks in double loops\n - use final variables where possible\n - removed unneeded array copying\n - added a constructor to build a matrix from an\n   array without copying it where it makes sense\n\nThe speed gain is about 3X for multiplication. Performances\nfor this operation are now on par with Jama.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/branches/MATH_2_0@662241 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/1/08, 9:22 AM",
      "commitName": "7b37de8d8ce8145f933537db67070dc91e19d86b",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "4/24/08, 6:22 AM",
      "commitNameOld": "862e1b88bf4216eb1ed83504606ef4346dfc2cfa",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 38.13,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "actualSource": "public void setSubMatrix(double[][] subMatrix, int row, int column) throws MatrixIndexException {\n    if ((row \u003c 0) || (column \u003c 0)) {\n        throw new MatrixIndexException(\"invalid row or column index selection\");\n    }\n    final int nRows \u003d subMatrix.length;\n    if (nRows \u003d\u003d 0) {\n        throw new IllegalArgumentException(\"Matrix must have at least one row.\");\n    }\n    final int nCols \u003d subMatrix[0].length;\n    if (nCols \u003d\u003d 0) {\n        throw new IllegalArgumentException(\"Matrix must have at least one column.\");\n    }\n    for (int r \u003d 1; r \u003c nRows; r++) {\n        if (subMatrix[r].length !\u003d nCols) {\n            throw new IllegalArgumentException(\"All input rows must have the same length.\");\n        }\n    }\n    if (data \u003d\u003d null) {\n        if ((row \u003e 0) || (column \u003e 0))\n            throw new MatrixIndexException(\"matrix must be initialized to perfom this method\");\n        data \u003d new double[nRows][nCols];\n        System.arraycopy(subMatrix, 0, data, 0, subMatrix.length);\n    }\n    if (((nRows + row) \u003e this.getRowDimension()) || (nCols + column \u003e this.getColumnDimension()))\n        throw new MatrixIndexException(\"invalid row or column index selection\");\n    for (int i \u003d 0; i \u003c nRows; i++) {\n        System.arraycopy(subMatrix[i], 0, data[row + i], column, nCols);\n    }\n    lu \u003d null;\n}",
      "path": "src/java/org/apache/commons/math/linear/RealMatrixImpl.java",
      "functionStartLine": 527,
      "functionName": "setSubMatrix",
      "functionAnnotation": "",
      "functionDoc": "Replace the submatrix starting at \u003ccode\u003erow, column\u003c/code\u003e using data in\nthe input \u003ccode\u003esubMatrix\u003c/code\u003e array. Indexes are 0-based.\n\u003cp\u003e \nExample:\u003cbr\u003e\nStarting with \u003cpre\u003e\n1  2  3  4\n5  6  7  8\n9  0  1  2\n\u003c/pre\u003e\nand \u003ccode\u003esubMatrix \u003d {{3, 4} {5,6}}\u003c/code\u003e, invoking \n\u003ccode\u003esetSubMatrix(subMatrix,1,1))\u003c/code\u003e will result in \u003cpre\u003e\n1  2  3  4\n5  3  4  8\n9  5  6  2\n\u003c/pre\u003e\u003c/p\u003e\n\n@param subMatrix array containing the submatrix replacement data\n@param row row coordinate of the top, left element to be replaced\n@param column column coordinate of the top, left element to be replaced\n@throws MatrixIndexException  if subMatrix does not fit into this \n   matrix from element in (row, column)\n@throws IllegalArgumentException if \u003ccode\u003esubMatrix\u003c/code\u003e is not rectangular\n (not all rows have the same length) or empty\n@throws NullPointerException if \u003ccode\u003esubMatrix\u003c/code\u003e is null\n@since 1.1\n",
      "diff": "@@ -1,30 +1,30 @@\n public void setSubMatrix(double[][] subMatrix, int row, int column) throws MatrixIndexException {\n     if ((row \u003c 0) || (column \u003c 0)) {\n         throw new MatrixIndexException(\"invalid row or column index selection\");\n     }\n-    int nRows \u003d subMatrix.length;\n+    final int nRows \u003d subMatrix.length;\n     if (nRows \u003d\u003d 0) {\n         throw new IllegalArgumentException(\"Matrix must have at least one row.\");\n     }\n-    int nCols \u003d subMatrix[0].length;\n+    final int nCols \u003d subMatrix[0].length;\n     if (nCols \u003d\u003d 0) {\n         throw new IllegalArgumentException(\"Matrix must have at least one column.\");\n     }\n     for (int r \u003d 1; r \u003c nRows; r++) {\n         if (subMatrix[r].length !\u003d nCols) {\n             throw new IllegalArgumentException(\"All input rows must have the same length.\");\n         }\n     }\n     if (data \u003d\u003d null) {\n         if ((row \u003e 0) || (column \u003e 0))\n             throw new MatrixIndexException(\"matrix must be initialized to perfom this method\");\n         data \u003d new double[nRows][nCols];\n         System.arraycopy(subMatrix, 0, data, 0, subMatrix.length);\n     }\n     if (((nRows + row) \u003e this.getRowDimension()) || (nCols + column \u003e this.getColumnDimension()))\n         throw new MatrixIndexException(\"invalid row or column index selection\");\n     for (int i \u003d 0; i \u003c nRows; i++) {\n         System.arraycopy(subMatrix[i], 0, data[row + i], column, nCols);\n     }\n     lu \u003d null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "479f7773075c136b43a9cf120704c77c0a4880ab": {
      "type": "Ydocchange",
      "commitMessage": "Javadoc only.  Added missing \u003c/p\u003e\u0027s\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@617953 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/2/08, 9:54 PM",
      "commitName": "479f7773075c136b43a9cf120704c77c0a4880ab",
      "commitAuthor": "Phil Steitz",
      "commitDateOld": "1/20/08, 1:08 PM",
      "commitNameOld": "bc84c00b75adae089cba788aaec9bbbd8d9efcdb",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 13.36,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "actualSource": "public void setSubMatrix(double[][] subMatrix, int row, int column) throws MatrixIndexException {\n    if ((row \u003c 0) || (column \u003c 0)) {\n        throw new MatrixIndexException(\"invalid row or column index selection\");\n    }\n    int nRows \u003d subMatrix.length;\n    if (nRows \u003d\u003d 0) {\n        throw new IllegalArgumentException(\"Matrix must have at least one row.\");\n    }\n    int nCols \u003d subMatrix[0].length;\n    if (nCols \u003d\u003d 0) {\n        throw new IllegalArgumentException(\"Matrix must have at least one column.\");\n    }\n    for (int r \u003d 1; r \u003c nRows; r++) {\n        if (subMatrix[r].length !\u003d nCols) {\n            throw new IllegalArgumentException(\"All input rows must have the same length.\");\n        }\n    }\n    if (data \u003d\u003d null) {\n        if ((row \u003e 0) || (column \u003e 0))\n            throw new MatrixIndexException(\"matrix must be initialized to perfom this method\");\n        data \u003d new double[nRows][nCols];\n        System.arraycopy(subMatrix, 0, data, 0, subMatrix.length);\n    }\n    if (((nRows + row) \u003e this.getRowDimension()) || (nCols + column \u003e this.getColumnDimension()))\n        throw new MatrixIndexException(\"invalid row or column index selection\");\n    for (int i \u003d 0; i \u003c nRows; i++) {\n        System.arraycopy(subMatrix[i], 0, data[row + i], column, nCols);\n    }\n    lu \u003d null;\n}",
      "path": "src/java/org/apache/commons/math/linear/RealMatrixImpl.java",
      "functionStartLine": 388,
      "functionName": "setSubMatrix",
      "functionAnnotation": "",
      "functionDoc": "Replace the submatrix starting at \u003ccode\u003erow, column\u003c/code\u003e using data in\nthe input \u003ccode\u003esubMatrix\u003c/code\u003e array. Indexes are 0-based.\n\u003cp\u003e \nExample:\u003cbr\u003e\nStarting with \u003cpre\u003e\n1  2  3  4\n5  6  7  8\n9  0  1  2\n\u003c/pre\u003e\nand \u003ccode\u003esubMatrix \u003d {{3, 4} {5,6}}\u003c/code\u003e, invoking \n\u003ccode\u003esetSubMatrix(subMatrix,1,1))\u003c/code\u003e will result in \u003cpre\u003e\n1  2  3  4\n5  3  4  8\n9  5  6  2\n\u003c/pre\u003e\u003c/p\u003e\n\n@param subMatrix array containing the submatrix replacement data\n@param row row coordinate of the top, left element to be replaced\n@param column column coordinate of the top, left element to be replaced\n@throws MatrixIndexException  if subMatrix does not fit into this \n   matrix from element in (row, column)\n@throws IllegalArgumentException if \u003ccode\u003esubMatrix\u003c/code\u003e is not rectangular\n (not all rows have the same length) or empty\n@throws NullPointerException if \u003ccode\u003esubMatrix\u003c/code\u003e is null\n@since 1.1\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Replace the submatrix starting at \u003ccode\u003erow, column\u003c/code\u003e using data in\nthe input \u003ccode\u003esubMatrix\u003c/code\u003e array. Indexes are 0-based.\n\u003cp\u003e \nExample:\u003cbr\u003e\nStarting with \u003cpre\u003e\n1  2  3  4\n5  6  7  8\n9  0  1  2\n\u003c/pre\u003e\nand \u003ccode\u003esubMatrix \u003d {{3, 4} {5,6}}\u003c/code\u003e, invoking \n\u003ccode\u003esetSubMatrix(subMatrix,1,1))\u003c/code\u003e will result in \u003cpre\u003e\n1  2  3  4\n5  3  4  8\n9  5  6  2\n\u003c/pre\u003e\n\n@param subMatrix array containing the submatrix replacement data\n@param row row coordinate of the top, left element to be replaced\n@param column column coordinate of the top, left element to be replaced\n@throws MatrixIndexException  if subMatrix does not fit into this \n   matrix from element in (row, column)\n@throws IllegalArgumentException if \u003ccode\u003esubMatrix\u003c/code\u003e is not rectangular\n (not all rows have the same length) or empty\n@throws NullPointerException if \u003ccode\u003esubMatrix\u003c/code\u003e is null\n@since 1.1\n",
        "newValue": "Replace the submatrix starting at \u003ccode\u003erow, column\u003c/code\u003e using data in\nthe input \u003ccode\u003esubMatrix\u003c/code\u003e array. Indexes are 0-based.\n\u003cp\u003e \nExample:\u003cbr\u003e\nStarting with \u003cpre\u003e\n1  2  3  4\n5  6  7  8\n9  0  1  2\n\u003c/pre\u003e\nand \u003ccode\u003esubMatrix \u003d {{3, 4} {5,6}}\u003c/code\u003e, invoking \n\u003ccode\u003esetSubMatrix(subMatrix,1,1))\u003c/code\u003e will result in \u003cpre\u003e\n1  2  3  4\n5  3  4  8\n9  5  6  2\n\u003c/pre\u003e\u003c/p\u003e\n\n@param subMatrix array containing the submatrix replacement data\n@param row row coordinate of the top, left element to be replaced\n@param column column coordinate of the top, left element to be replaced\n@throws MatrixIndexException  if subMatrix does not fit into this \n   matrix from element in (row, column)\n@throws IllegalArgumentException if \u003ccode\u003esubMatrix\u003c/code\u003e is not rectangular\n (not all rows have the same length) or empty\n@throws NullPointerException if \u003ccode\u003esubMatrix\u003c/code\u003e is null\n@since 1.1\n"
      }
    },
    "cfc6701de6f21b7464a3f1b94546ced7beea8441": {
      "type": "Ydocchange",
      "commitMessage": "Added missing @since tags.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@209130 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/4/05, 3:16 PM",
      "commitName": "cfc6701de6f21b7464a3f1b94546ced7beea8441",
      "commitAuthor": "Phil Steitz",
      "commitDateOld": "6/5/05, 8:48 AM",
      "commitNameOld": "3531f01cf943fe4681326652f8854730cdc26b6b",
      "commitAuthorOld": "Phil Steitz",
      "daysBetweenCommits": 29.27,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "actualSource": "public void setSubMatrix(double[][] subMatrix, int row, int column) throws MatrixIndexException {\n    if ((row \u003c 0) || (column \u003c 0)) {\n        throw new MatrixIndexException(\"invalid row or column index selection\");\n    }\n    int nRows \u003d subMatrix.length;\n    if (nRows \u003d\u003d 0) {\n        throw new IllegalArgumentException(\"Matrix must have at least one row.\");\n    }\n    int nCols \u003d subMatrix[0].length;\n    if (nCols \u003d\u003d 0) {\n        throw new IllegalArgumentException(\"Matrix must have at least one column.\");\n    }\n    for (int r \u003d 1; r \u003c nRows; r++) {\n        if (subMatrix[r].length !\u003d nCols) {\n            throw new IllegalArgumentException(\"All input rows must have the same length.\");\n        }\n    }\n    if (data \u003d\u003d null) {\n        if ((row \u003e 0) || (column \u003e 0))\n            throw new MatrixIndexException(\"matrix must be initialized to perfom this method\");\n        data \u003d new double[nRows][nCols];\n        System.arraycopy(subMatrix, 0, data, 0, subMatrix.length);\n    }\n    if (((nRows + row) \u003e this.getRowDimension()) || (nCols + column \u003e this.getColumnDimension()))\n        throw new MatrixIndexException(\"invalid row or column index selection\");\n    for (int i \u003d 0; i \u003c nRows; i++) {\n        System.arraycopy(subMatrix[i], 0, data[row + i], column, nCols);\n    }\n    lu \u003d null;\n}",
      "path": "src/java/org/apache/commons/math/linear/RealMatrixImpl.java",
      "functionStartLine": 386,
      "functionName": "setSubMatrix",
      "functionAnnotation": "",
      "functionDoc": "Replace the submatrix starting at \u003ccode\u003erow, column\u003c/code\u003e using data in\nthe input \u003ccode\u003esubMatrix\u003c/code\u003e array. Indexes are 0-based.\n\u003cp\u003e \nExample:\u003cbr\u003e\nStarting with \u003cpre\u003e\n1  2  3  4\n5  6  7  8\n9  0  1  2\n\u003c/pre\u003e\nand \u003ccode\u003esubMatrix \u003d {{3, 4} {5,6}}\u003c/code\u003e, invoking \n\u003ccode\u003esetSubMatrix(subMatrix,1,1))\u003c/code\u003e will result in \u003cpre\u003e\n1  2  3  4\n5  3  4  8\n9  5  6  2\n\u003c/pre\u003e\n\n@param subMatrix array containing the submatrix replacement data\n@param row row coordinate of the top, left element to be replaced\n@param column column coordinate of the top, left element to be replaced\n@throws MatrixIndexException  if subMatrix does not fit into this \n   matrix from element in (row, column)\n@throws IllegalArgumentException if \u003ccode\u003esubMatrix\u003c/code\u003e is not rectangular\n (not all rows have the same length) or empty\n@throws NullPointerException if \u003ccode\u003esubMatrix\u003c/code\u003e is null\n@since 1.1\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Replace the submatrix starting at \u003ccode\u003erow, column\u003c/code\u003e using data in\nthe input \u003ccode\u003esubMatrix\u003c/code\u003e array. Indexes are 0-based.\n\u003cp\u003e \nExample:\u003cbr\u003e\nStarting with \u003cpre\u003e\n1  2  3  4\n5  6  7  8\n9  0  1  2\n\u003c/pre\u003e\nand \u003ccode\u003esubMatrix \u003d {{3, 4} {5,6}}\u003c/code\u003e, invoking \n\u003ccode\u003esetSubMatrix(subMatrix,1,1))\u003c/code\u003e will result in \u003cpre\u003e\n1  2  3  4\n5  3  4  8\n9  5  6  2\n\u003c/pre\u003e\n\n@param subMatrix array containing the submatrix replacement data\n@param row row coordinate of the top, left element to be replaced\n@param column column coordinate of the top, left element to be replaced\n@throws MatrixIndexException  if subMatrix does not fit into this \n   matrix from element in (row, column)\n@throws IllegalArgumentException if \u003ccode\u003esubMatrix\u003c/code\u003e is not rectangular\n (not all rows have the same length) or empty\n@throws NullPointerException if \u003ccode\u003esubMatrix\u003c/code\u003e is null\n",
        "newValue": "Replace the submatrix starting at \u003ccode\u003erow, column\u003c/code\u003e using data in\nthe input \u003ccode\u003esubMatrix\u003c/code\u003e array. Indexes are 0-based.\n\u003cp\u003e \nExample:\u003cbr\u003e\nStarting with \u003cpre\u003e\n1  2  3  4\n5  6  7  8\n9  0  1  2\n\u003c/pre\u003e\nand \u003ccode\u003esubMatrix \u003d {{3, 4} {5,6}}\u003c/code\u003e, invoking \n\u003ccode\u003esetSubMatrix(subMatrix,1,1))\u003c/code\u003e will result in \u003cpre\u003e\n1  2  3  4\n5  3  4  8\n9  5  6  2\n\u003c/pre\u003e\n\n@param subMatrix array containing the submatrix replacement data\n@param row row coordinate of the top, left element to be replaced\n@param column column coordinate of the top, left element to be replaced\n@throws MatrixIndexException  if subMatrix does not fit into this \n   matrix from element in (row, column)\n@throws IllegalArgumentException if \u003ccode\u003esubMatrix\u003c/code\u003e is not rectangular\n (not all rows have the same length) or empty\n@throws NullPointerException if \u003ccode\u003esubMatrix\u003c/code\u003e is null\n@since 1.1\n"
      }
    },
    "3531f01cf943fe4681326652f8854730cdc26b6b": {
      "type": "Yformatchange",
      "commitMessage": "Formatting to make checkstyle happy.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@180102 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/5/05, 8:48 AM",
      "commitName": "3531f01cf943fe4681326652f8854730cdc26b6b",
      "commitAuthor": "Phil Steitz",
      "commitDateOld": "5/29/05, 1:26 PM",
      "commitNameOld": "4073bdf14d26f83799eb2c297ed1d7febefdfe93",
      "commitAuthorOld": "Phil Steitz",
      "daysBetweenCommits": 6.81,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "actualSource": "public void setSubMatrix(double[][] subMatrix, int row, int column) throws MatrixIndexException {\n    if ((row \u003c 0) || (column \u003c 0)) {\n        throw new MatrixIndexException(\"invalid row or column index selection\");\n    }\n    int nRows \u003d subMatrix.length;\n    if (nRows \u003d\u003d 0) {\n        throw new IllegalArgumentException(\"Matrix must have at least one row.\");\n    }\n    int nCols \u003d subMatrix[0].length;\n    if (nCols \u003d\u003d 0) {\n        throw new IllegalArgumentException(\"Matrix must have at least one column.\");\n    }\n    for (int r \u003d 1; r \u003c nRows; r++) {\n        if (subMatrix[r].length !\u003d nCols) {\n            throw new IllegalArgumentException(\"All input rows must have the same length.\");\n        }\n    }\n    if (data \u003d\u003d null) {\n        if ((row \u003e 0) || (column \u003e 0))\n            throw new MatrixIndexException(\"matrix must be initialized to perfom this method\");\n        data \u003d new double[nRows][nCols];\n        System.arraycopy(subMatrix, 0, data, 0, subMatrix.length);\n    }\n    if (((nRows + row) \u003e this.getRowDimension()) || (nCols + column \u003e this.getColumnDimension()))\n        throw new MatrixIndexException(\"invalid row or column index selection\");\n    for (int i \u003d 0; i \u003c nRows; i++) {\n        System.arraycopy(subMatrix[i], 0, data[row + i], column, nCols);\n    }\n    lu \u003d null;\n}",
      "path": "src/java/org/apache/commons/math/linear/RealMatrixImpl.java",
      "functionStartLine": 385,
      "functionName": "setSubMatrix",
      "functionAnnotation": "",
      "functionDoc": "Replace the submatrix starting at \u003ccode\u003erow, column\u003c/code\u003e using data in\nthe input \u003ccode\u003esubMatrix\u003c/code\u003e array. Indexes are 0-based.\n\u003cp\u003e \nExample:\u003cbr\u003e\nStarting with \u003cpre\u003e\n1  2  3  4\n5  6  7  8\n9  0  1  2\n\u003c/pre\u003e\nand \u003ccode\u003esubMatrix \u003d {{3, 4} {5,6}}\u003c/code\u003e, invoking \n\u003ccode\u003esetSubMatrix(subMatrix,1,1))\u003c/code\u003e will result in \u003cpre\u003e\n1  2  3  4\n5  3  4  8\n9  5  6  2\n\u003c/pre\u003e\n\n@param subMatrix array containing the submatrix replacement data\n@param row row coordinate of the top, left element to be replaced\n@param column column coordinate of the top, left element to be replaced\n@throws MatrixIndexException  if subMatrix does not fit into this \n   matrix from element in (row, column)\n@throws IllegalArgumentException if \u003ccode\u003esubMatrix\u003c/code\u003e is not rectangular\n (not all rows have the same length) or empty\n@throws NullPointerException if \u003ccode\u003esubMatrix\u003c/code\u003e is null\n",
      "diff": "",
      "extendedDetails": {}
    },
    "4073bdf14d26f83799eb2c297ed1d7febefdfe93": {
      "type": "Yintroduced",
      "commitMessage": "Added setSubMatrix methods to RealMatrix, BigMatrix.\nModified copyIn methods to use setSubMatrix and moved array argument checking\nfrom constructors and copyIn to setSubMatrix.\nPR # 35007\nBase implementation contributed by Rodrigo di Lorenzo Lopes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@178982 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/29/05, 1:26 PM",
      "commitName": "4073bdf14d26f83799eb2c297ed1d7febefdfe93",
      "commitAuthor": "Phil Steitz",
      "diff": "@@ -0,0 +1,30 @@\n+public void setSubMatrix(double[][] subMatrix, int row, int column) throws MatrixIndexException {\n+    if ((row \u003c 0) || (column \u003c 0)) {\n+        throw new MatrixIndexException(\"invalid row or column index selection\");\n+    }\n+    int nRows \u003d subMatrix.length;\n+    if (nRows \u003d\u003d 0) {\n+        throw new IllegalArgumentException(\"Matrix must have at least one row.\");\n+    }\n+    int nCols \u003d subMatrix[0].length;\n+    if (nCols \u003d\u003d 0) {\n+        throw new IllegalArgumentException(\"Matrix must have at least one column.\");\n+    }\n+    for (int r \u003d 1; r \u003c nRows; r++) {\n+        if (subMatrix[r].length !\u003d nCols) {\n+            throw new IllegalArgumentException(\"All input rows must have the same length.\");\n+        }\n+    }\n+    if (data \u003d\u003d null) {\n+        if ((row \u003e 0) || (column \u003e 0))\n+            throw new MatrixIndexException(\"matrix must be initialized to perfom this method\");\n+        data \u003d new double[nRows][nCols];\n+        System.arraycopy(subMatrix, 0, data, 0, subMatrix.length);\n+    }\n+    if (((nRows + row) \u003e this.getRowDimension()) || (nCols + column \u003e this.getColumnDimension()))\n+        throw new MatrixIndexException(\"invalid row or column index selection\");\n+    for (int i \u003d 0; i \u003c nRows; i++) {\n+        System.arraycopy(subMatrix[i], 0, data[row + i], column, nCols);\n+    }\n+    lu \u003d null;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public void setSubMatrix(double[][] subMatrix, int row, int column) throws MatrixIndexException {\n    if ((row \u003c 0) || (column \u003c 0)) {\n        throw new MatrixIndexException(\"invalid row or column index selection\");\n    }\n    int nRows \u003d subMatrix.length;\n    if (nRows \u003d\u003d 0) {\n        throw new IllegalArgumentException(\"Matrix must have at least one row.\");\n    }\n    int nCols \u003d subMatrix[0].length;\n    if (nCols \u003d\u003d 0) {\n        throw new IllegalArgumentException(\"Matrix must have at least one column.\");\n    }\n    for (int r \u003d 1; r \u003c nRows; r++) {\n        if (subMatrix[r].length !\u003d nCols) {\n            throw new IllegalArgumentException(\"All input rows must have the same length.\");\n        }\n    }\n    if (data \u003d\u003d null) {\n        if ((row \u003e 0) || (column \u003e 0))\n            throw new MatrixIndexException(\"matrix must be initialized to perfom this method\");\n        data \u003d new double[nRows][nCols];\n        System.arraycopy(subMatrix, 0, data, 0, subMatrix.length);\n    }\n    if (((nRows + row) \u003e this.getRowDimension()) || (nCols + column \u003e this.getColumnDimension()))\n        throw new MatrixIndexException(\"invalid row or column index selection\");\n    for (int i \u003d 0; i \u003c nRows; i++) {\n        System.arraycopy(subMatrix[i], 0, data[row + i], column, nCols);\n    }\n    lu \u003d null;\n}",
      "path": "src/java/org/apache/commons/math/linear/RealMatrixImpl.java",
      "functionStartLine": 385,
      "functionName": "setSubMatrix",
      "functionAnnotation": "",
      "functionDoc": "Replace the submatrix starting at \u003ccode\u003erow, column\u003c/code\u003e using data in\nthe input \u003ccode\u003esubMatrix\u003c/code\u003e array. Indexes are 0-based.\n\u003cp\u003e \nExample:\u003cbr\u003e\nStarting with \u003cpre\u003e\n1  2  3  4\n5  6  7  8\n9  0  1  2\n\u003c/pre\u003e\nand \u003ccode\u003esubMatrix \u003d {{3, 4} {5,6}}\u003c/code\u003e, invoking \n\u003ccode\u003esetSubMatrix(subMatrix,1,1))\u003c/code\u003e will result in \u003cpre\u003e\n1  2  3  4\n5  3  4  8\n9  5  6  2\n\u003c/pre\u003e\n\n@param subMatrix array containing the submatrix replacement data\n@param row row coordinate of the top, left element to be replaced\n@param column column coordinate of the top, left element to be replaced\n@throws MatrixIndexException  if subMatrix does not fit into this \n   matrix from element in (row, column)\n@throws IllegalArgumentException if \u003ccode\u003esubMatrix\u003c/code\u003e is not rectangular\n (not all rows have the same length) or empty\n@throws NullPointerException if \u003ccode\u003esubMatrix\u003c/code\u003e is null\n"
    }
  }
}