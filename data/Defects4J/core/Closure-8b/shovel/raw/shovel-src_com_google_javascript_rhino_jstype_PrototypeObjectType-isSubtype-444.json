{
  "origin": "codeshovel",
  "repositoryName": "Closure-8b",
  "repositoryPath": "/tmp/Closure-8b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PrototypeObjectType.java",
  "functionName": "isSubtype",
  "functionId": "isSubtype___that-JSType",
  "sourceFilePath": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 444,
  "functionEndLine": 490,
  "numCommitsSeen": 46,
  "timeTaken": 2042,
  "changeHistory": [
    "bbf1b138e20a36ca79b2a012ae145c943929a6dd",
    "00241aa722c2245784e63dba9d444fce88134aed",
    "63e875373844bdb6cedc7be3f537baa32cbd2ec0",
    "febdacb341025491b3ae83ee8ffa9d22c69c295e",
    "3c1c9eabcde278439f21bcda1468425f92d7c052",
    "5ac633a4e4471847da5aa22bb1fcf28727eb7fe9",
    "d39f3fa825194ffa75c5c430eb2d193eca9ca9c3",
    "94192f9b6bee5bf1fe12d7538c1224f03c68f3c4",
    "18e926295003e6266e5e1a4ea6949b2b381c073d",
    "c438dfd06013f82daa648d23b864842ff1881695",
    "2851a41947bed8b8e100c7dac7d1edbc1c909d24",
    "a36a61a9027c5bca5752b0ecca7c609c07e568bb",
    "86860111110ec7a96d92fbefb6c3ae15e3575405",
    "a2d8936fae3eb0e3873c7f7c0233344c81436404",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "bbf1b138e20a36ca79b2a012ae145c943929a6dd": "Ybodychange",
    "00241aa722c2245784e63dba9d444fce88134aed": "Ybodychange",
    "63e875373844bdb6cedc7be3f537baa32cbd2ec0": "Ybodychange",
    "febdacb341025491b3ae83ee8ffa9d22c69c295e": "Ybodychange",
    "3c1c9eabcde278439f21bcda1468425f92d7c052": "Ybodychange",
    "5ac633a4e4471847da5aa22bb1fcf28727eb7fe9": "Ybodychange",
    "d39f3fa825194ffa75c5c430eb2d193eca9ca9c3": "Ybodychange",
    "94192f9b6bee5bf1fe12d7538c1224f03c68f3c4": "Ybodychange",
    "18e926295003e6266e5e1a4ea6949b2b381c073d": "Ybodychange",
    "c438dfd06013f82daa648d23b864842ff1881695": "Ybodychange",
    "2851a41947bed8b8e100c7dac7d1edbc1c909d24": "Ybodychange",
    "a36a61a9027c5bca5752b0ecca7c609c07e568bb": "Ybodychange",
    "86860111110ec7a96d92fbefb6c3ae15e3575405": "Ybodychange",
    "a2d8936fae3eb0e3873c7f7c0233344c81436404": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bbf1b138e20a36ca79b2a012ae145c943929a6dd": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback\n\n*** Reason for rollback ***\n\nFailures don\u0027t seem related to jscompiler. Resubmitting for now.\n\n*** Original change description ***\n\nAutomated g4 rollback\n\n*** Reason for rollback ***\n\nChange caused tests to stop building.\n\n*** Original change description ***\n\nNew @struct and @dict annotations for constructors.\nWith these annotations, one can enforce only dot or only bracket access on object properties.\n\nR\u003dnicksantos\nDELTA\u003d476  (391 added, 34 deleted, 51 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5491\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2184 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/11/12, 4:17 PM",
      "commitName": "bbf1b138e20a36ca79b2a012ae145c943929a6dd",
      "commitAuthor": "dimvar@google.com",
      "commitDateOld": "9/11/12, 11:52 AM",
      "commitNameOld": "00241aa722c2245784e63dba9d444fce88134aed",
      "commitAuthorOld": "dimvar@google.com",
      "daysBetweenCommits": 0.18,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic boolean isSubtype(JSType that) {\n    if (JSType.isSubtypeHelper(this, that)) {\n        return true;\n    }\n    if (that.isUnionType()) {\n        return false;\n    }\n    if (that.isRecordType()) {\n        return RecordType.isSubtype(this, that.toMaybeRecordType());\n    }\n    ObjectType thatObj \u003d that.toObjectType();\n    FunctionType thatCtor \u003d thatObj \u003d\u003d null ? null : thatObj.getConstructor();\n    if (getConstructor() !\u003d null \u0026\u0026 getConstructor().isInterface()) {\n        for (ObjectType thisInterface : getCtorExtendedInterfaces()) {\n            if (thisInterface.isSubtype(that)) {\n                return true;\n            }\n        }\n    } else if (thatCtor !\u003d null \u0026\u0026 thatCtor.isInterface()) {\n        Iterable\u003cObjectType\u003e thisInterfaces \u003d getCtorImplementedInterfaces();\n        for (ObjectType thisInterface : thisInterfaces) {\n            if (thisInterface.isSubtype(that)) {\n                return true;\n            }\n        }\n    }\n    if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n        return true;\n    }\n    return this.isImplicitPrototype(thatObj);\n}",
      "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
      "functionStartLine": 444,
      "functionName": "isSubtype",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,33 +1,32 @@\n @Override\n public boolean isSubtype(JSType that) {\n     if (JSType.isSubtypeHelper(this, that)) {\n         return true;\n     }\n     if (that.isUnionType()) {\n         return false;\n     }\n     if (that.isRecordType()) {\n         return RecordType.isSubtype(this, that.toMaybeRecordType());\n     }\n     ObjectType thatObj \u003d that.toObjectType();\n-    ObjectType thatCtor \u003d thatObj \u003d\u003d null ? null : thatObj.getConstructor();\n-    if (thatCtor !\u003d null \u0026\u0026 thatCtor.isInterface()) {\n-        Iterable\u003cObjectType\u003e thisInterfaces \u003d getCtorImplementedInterfaces();\n-        for (ObjectType thisInterface : thisInterfaces) {\n+    FunctionType thatCtor \u003d thatObj \u003d\u003d null ? null : thatObj.getConstructor();\n+    if (getConstructor() !\u003d null \u0026\u0026 getConstructor().isInterface()) {\n+        for (ObjectType thisInterface : getCtorExtendedInterfaces()) {\n             if (thisInterface.isSubtype(that)) {\n                 return true;\n             }\n         }\n-    }\n-    if (getConstructor() !\u003d null \u0026\u0026 getConstructor().isInterface()) {\n-        for (ObjectType thisInterface : getCtorExtendedInterfaces()) {\n+    } else if (thatCtor !\u003d null \u0026\u0026 thatCtor.isInterface()) {\n+        Iterable\u003cObjectType\u003e thisInterfaces \u003d getCtorImplementedInterfaces();\n+        for (ObjectType thisInterface : thisInterfaces) {\n             if (thisInterface.isSubtype(that)) {\n                 return true;\n             }\n         }\n     }\n     if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n         return true;\n     }\n     return this.isImplicitPrototype(thatObj);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "00241aa722c2245784e63dba9d444fce88134aed": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback\n\n*** Reason for rollback ***\n\nChange caused tests to stop building.\n\n*** Original change description ***\n\nNew @struct and @dict annotations for constructors.\nWith these annotations, one can enforce only dot or only bracket access on object properties.\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5489\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2182 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/11/12, 11:52 AM",
      "commitName": "00241aa722c2245784e63dba9d444fce88134aed",
      "commitAuthor": "dimvar@google.com",
      "commitDateOld": "9/11/12, 11:10 AM",
      "commitNameOld": "63e875373844bdb6cedc7be3f537baa32cbd2ec0",
      "commitAuthorOld": "dimvar@google.com",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic boolean isSubtype(JSType that) {\n    if (JSType.isSubtypeHelper(this, that)) {\n        return true;\n    }\n    if (that.isUnionType()) {\n        return false;\n    }\n    if (that.isRecordType()) {\n        return RecordType.isSubtype(this, that.toMaybeRecordType());\n    }\n    ObjectType thatObj \u003d that.toObjectType();\n    ObjectType thatCtor \u003d thatObj \u003d\u003d null ? null : thatObj.getConstructor();\n    if (thatCtor !\u003d null \u0026\u0026 thatCtor.isInterface()) {\n        Iterable\u003cObjectType\u003e thisInterfaces \u003d getCtorImplementedInterfaces();\n        for (ObjectType thisInterface : thisInterfaces) {\n            if (thisInterface.isSubtype(that)) {\n                return true;\n            }\n        }\n    }\n    if (getConstructor() !\u003d null \u0026\u0026 getConstructor().isInterface()) {\n        for (ObjectType thisInterface : getCtorExtendedInterfaces()) {\n            if (thisInterface.isSubtype(that)) {\n                return true;\n            }\n        }\n    }\n    if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n        return true;\n    }\n    return this.isImplicitPrototype(thatObj);\n}",
      "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
      "functionStartLine": 444,
      "functionName": "isSubtype",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,32 +1,33 @@\n @Override\n public boolean isSubtype(JSType that) {\n     if (JSType.isSubtypeHelper(this, that)) {\n         return true;\n     }\n     if (that.isUnionType()) {\n         return false;\n     }\n     if (that.isRecordType()) {\n         return RecordType.isSubtype(this, that.toMaybeRecordType());\n     }\n     ObjectType thatObj \u003d that.toObjectType();\n-    FunctionType thatCtor \u003d thatObj \u003d\u003d null ? null : thatObj.getConstructor();\n-    if (getConstructor() !\u003d null \u0026\u0026 getConstructor().isInterface()) {\n-        for (ObjectType thisInterface : getCtorExtendedInterfaces()) {\n+    ObjectType thatCtor \u003d thatObj \u003d\u003d null ? null : thatObj.getConstructor();\n+    if (thatCtor !\u003d null \u0026\u0026 thatCtor.isInterface()) {\n+        Iterable\u003cObjectType\u003e thisInterfaces \u003d getCtorImplementedInterfaces();\n+        for (ObjectType thisInterface : thisInterfaces) {\n             if (thisInterface.isSubtype(that)) {\n                 return true;\n             }\n         }\n-    } else if (thatCtor !\u003d null \u0026\u0026 thatCtor.isInterface()) {\n-        Iterable\u003cObjectType\u003e thisInterfaces \u003d getCtorImplementedInterfaces();\n-        for (ObjectType thisInterface : thisInterfaces) {\n+    }\n+    if (getConstructor() !\u003d null \u0026\u0026 getConstructor().isInterface()) {\n+        for (ObjectType thisInterface : getCtorExtendedInterfaces()) {\n             if (thisInterface.isSubtype(that)) {\n                 return true;\n             }\n         }\n     }\n     if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n         return true;\n     }\n     return this.isImplicitPrototype(thatObj);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "63e875373844bdb6cedc7be3f537baa32cbd2ec0": {
      "type": "Ybodychange",
      "commitMessage": "\nNew @struct and @dict annotations for constructors.\nWith these annotations, one can enforce only dot or only bracket access on object properties.\n\nR\u003dnicksantos\nDELTA\u003d476  (391 added, 34 deleted, 51 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5488\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2181 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/11/12, 11:10 AM",
      "commitName": "63e875373844bdb6cedc7be3f537baa32cbd2ec0",
      "commitAuthor": "dimvar@google.com",
      "commitDateOld": "8/1/12, 4:56 PM",
      "commitNameOld": "8d58355140bfdfbfc85c4629b90ed1d78225b520",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 40.76,
      "commitsBetweenForRepo": 60,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic boolean isSubtype(JSType that) {\n    if (JSType.isSubtypeHelper(this, that)) {\n        return true;\n    }\n    if (that.isUnionType()) {\n        return false;\n    }\n    if (that.isRecordType()) {\n        return RecordType.isSubtype(this, that.toMaybeRecordType());\n    }\n    ObjectType thatObj \u003d that.toObjectType();\n    FunctionType thatCtor \u003d thatObj \u003d\u003d null ? null : thatObj.getConstructor();\n    if (getConstructor() !\u003d null \u0026\u0026 getConstructor().isInterface()) {\n        for (ObjectType thisInterface : getCtorExtendedInterfaces()) {\n            if (thisInterface.isSubtype(that)) {\n                return true;\n            }\n        }\n    } else if (thatCtor !\u003d null \u0026\u0026 thatCtor.isInterface()) {\n        Iterable\u003cObjectType\u003e thisInterfaces \u003d getCtorImplementedInterfaces();\n        for (ObjectType thisInterface : thisInterfaces) {\n            if (thisInterface.isSubtype(that)) {\n                return true;\n            }\n        }\n    }\n    if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n        return true;\n    }\n    return this.isImplicitPrototype(thatObj);\n}",
      "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
      "functionStartLine": 444,
      "functionName": "isSubtype",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,33 +1,32 @@\n @Override\n public boolean isSubtype(JSType that) {\n     if (JSType.isSubtypeHelper(this, that)) {\n         return true;\n     }\n     if (that.isUnionType()) {\n         return false;\n     }\n     if (that.isRecordType()) {\n         return RecordType.isSubtype(this, that.toMaybeRecordType());\n     }\n     ObjectType thatObj \u003d that.toObjectType();\n-    ObjectType thatCtor \u003d thatObj \u003d\u003d null ? null : thatObj.getConstructor();\n-    if (thatCtor !\u003d null \u0026\u0026 thatCtor.isInterface()) {\n-        Iterable\u003cObjectType\u003e thisInterfaces \u003d getCtorImplementedInterfaces();\n-        for (ObjectType thisInterface : thisInterfaces) {\n+    FunctionType thatCtor \u003d thatObj \u003d\u003d null ? null : thatObj.getConstructor();\n+    if (getConstructor() !\u003d null \u0026\u0026 getConstructor().isInterface()) {\n+        for (ObjectType thisInterface : getCtorExtendedInterfaces()) {\n             if (thisInterface.isSubtype(that)) {\n                 return true;\n             }\n         }\n-    }\n-    if (getConstructor() !\u003d null \u0026\u0026 getConstructor().isInterface()) {\n-        for (ObjectType thisInterface : getCtorExtendedInterfaces()) {\n+    } else if (thatCtor !\u003d null \u0026\u0026 thatCtor.isInterface()) {\n+        Iterable\u003cObjectType\u003e thisInterfaces \u003d getCtorImplementedInterfaces();\n+        for (ObjectType thisInterface : thisInterfaces) {\n             if (thisInterface.isSubtype(that)) {\n                 return true;\n             }\n         }\n     }\n     if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n         return true;\n     }\n     return this.isImplicitPrototype(thatObj);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "febdacb341025491b3ae83ee8ffa9d22c69c295e": {
      "type": "Ybodychange",
      "commitMessage": "\nspeed up type analysis a bunch, and fix some bugs in record types\n\n\nR\u003dacleung\nDELTA\u003d232  (154 added, 54 deleted, 24 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3408\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1489 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/4/11, 4:04 PM",
      "commitName": "febdacb341025491b3ae83ee8ffa9d22c69c295e",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "10/4/11, 1:56 PM",
      "commitNameOld": "3c1c9eabcde278439f21bcda1468425f92d7c052",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.09,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic boolean isSubtype(JSType that) {\n    if (JSType.isSubtypeHelper(this, that)) {\n        return true;\n    }\n    if (that.isUnionType()) {\n        return false;\n    }\n    if (that.isRecordType()) {\n        return RecordType.isSubtype(this, that.toMaybeRecordType());\n    }\n    ObjectType thatObj \u003d that.toObjectType();\n    ObjectType thatCtor \u003d thatObj \u003d\u003d null ? null : thatObj.getConstructor();\n    if (thatCtor !\u003d null \u0026\u0026 thatCtor.isInterface()) {\n        Iterable\u003cObjectType\u003e thisInterfaces \u003d getCtorImplementedInterfaces();\n        for (ObjectType thisInterface : thisInterfaces) {\n            if (thisInterface.isSubtype(that)) {\n                return true;\n            }\n        }\n    }\n    if (getConstructor() !\u003d null \u0026\u0026 getConstructor().isInterface()) {\n        for (ObjectType thisInterface : getCtorExtendedInterfaces()) {\n            if (thisInterface.isSubtype(that)) {\n                return true;\n            }\n        }\n    }\n    if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n        return true;\n    }\n    return this.isImplicitPrototype(thatObj);\n}",
      "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
      "functionStartLine": 446,
      "functionName": "isSubtype",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,33 +1,33 @@\n @Override\n public boolean isSubtype(JSType that) {\n     if (JSType.isSubtypeHelper(this, that)) {\n         return true;\n     }\n     if (that.isUnionType()) {\n         return false;\n     }\n-    if (that instanceof RecordType) {\n-        return RecordType.isSubtype(this, (RecordType) that);\n+    if (that.isRecordType()) {\n+        return RecordType.isSubtype(this, that.toMaybeRecordType());\n     }\n     ObjectType thatObj \u003d that.toObjectType();\n     ObjectType thatCtor \u003d thatObj \u003d\u003d null ? null : thatObj.getConstructor();\n     if (thatCtor !\u003d null \u0026\u0026 thatCtor.isInterface()) {\n         Iterable\u003cObjectType\u003e thisInterfaces \u003d getCtorImplementedInterfaces();\n         for (ObjectType thisInterface : thisInterfaces) {\n             if (thisInterface.isSubtype(that)) {\n                 return true;\n             }\n         }\n     }\n     if (getConstructor() !\u003d null \u0026\u0026 getConstructor().isInterface()) {\n         for (ObjectType thisInterface : getCtorExtendedInterfaces()) {\n             if (thisInterface.isSubtype(that)) {\n                 return true;\n             }\n         }\n     }\n     if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n         return true;\n     }\n     return this.isImplicitPrototype(thatObj);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3c1c9eabcde278439f21bcda1468425f92d7c052": {
      "type": "Ybodychange",
      "commitMessage": "\nfix up some subtype tests\n\nR\u003dtylerg\nDELTA\u003d43  (8 added, 17 deleted, 18 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3402\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1488 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/4/11, 1:56 PM",
      "commitName": "3c1c9eabcde278439f21bcda1468425f92d7c052",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "9/8/11, 7:15 AM",
      "commitNameOld": "5c695ce6ca5095ba764d34e634c20f65d8a558e2",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 26.28,
      "commitsBetweenForRepo": 58,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic boolean isSubtype(JSType that) {\n    if (JSType.isSubtypeHelper(this, that)) {\n        return true;\n    }\n    if (that.isUnionType()) {\n        return false;\n    }\n    if (that instanceof RecordType) {\n        return RecordType.isSubtype(this, (RecordType) that);\n    }\n    ObjectType thatObj \u003d that.toObjectType();\n    ObjectType thatCtor \u003d thatObj \u003d\u003d null ? null : thatObj.getConstructor();\n    if (thatCtor !\u003d null \u0026\u0026 thatCtor.isInterface()) {\n        Iterable\u003cObjectType\u003e thisInterfaces \u003d getCtorImplementedInterfaces();\n        for (ObjectType thisInterface : thisInterfaces) {\n            if (thisInterface.isSubtype(that)) {\n                return true;\n            }\n        }\n    }\n    if (getConstructor() !\u003d null \u0026\u0026 getConstructor().isInterface()) {\n        for (ObjectType thisInterface : getCtorExtendedInterfaces()) {\n            if (thisInterface.isSubtype(that)) {\n                return true;\n            }\n        }\n    }\n    if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n        return true;\n    }\n    return this.isImplicitPrototype(thatObj);\n}",
      "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
      "functionStartLine": 442,
      "functionName": "isSubtype",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,33 +1,33 @@\n @Override\n public boolean isSubtype(JSType that) {\n-    if (JSType.isSubtype(this, that)) {\n+    if (JSType.isSubtypeHelper(this, that)) {\n         return true;\n     }\n     if (that.isUnionType()) {\n         return false;\n     }\n     if (that instanceof RecordType) {\n         return RecordType.isSubtype(this, (RecordType) that);\n     }\n     ObjectType thatObj \u003d that.toObjectType();\n     ObjectType thatCtor \u003d thatObj \u003d\u003d null ? null : thatObj.getConstructor();\n     if (thatCtor !\u003d null \u0026\u0026 thatCtor.isInterface()) {\n         Iterable\u003cObjectType\u003e thisInterfaces \u003d getCtorImplementedInterfaces();\n         for (ObjectType thisInterface : thisInterfaces) {\n             if (thisInterface.isSubtype(that)) {\n                 return true;\n             }\n         }\n     }\n     if (getConstructor() !\u003d null \u0026\u0026 getConstructor().isInterface()) {\n         for (ObjectType thisInterface : getCtorExtendedInterfaces()) {\n             if (thisInterface.isSubtype(that)) {\n                 return true;\n             }\n         }\n     }\n     if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n         return true;\n     }\n     return this.isImplicitPrototype(thatObj);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5ac633a4e4471847da5aa22bb1fcf28727eb7fe9": {
      "type": "Ybodychange",
      "commitMessage": "\nAdd a toUnionType method.\nI think this should be a lot more correct and easier for clients\nto use, because it will resolve typedefs of UnionTypes better.\nI will probably do this for all other instanceof checks if we\nagree that this is the way we want to go.\n\nR\u003djohnlenz\nDELTA\u003d79  (14 added, 7 deleted, 58 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3047\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1362 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/17/11, 11:43 AM",
      "commitName": "5ac633a4e4471847da5aa22bb1fcf28727eb7fe9",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "8/5/11, 7:59 AM",
      "commitNameOld": "521e1da46ae598d94afd1fe48a1aff8903fbac8e",
      "commitAuthorOld": "tylerg@google.com",
      "daysBetweenCommits": 12.16,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic boolean isSubtype(JSType that) {\n    if (JSType.isSubtype(this, that)) {\n        return true;\n    }\n    if (that.isUnionType()) {\n        return false;\n    }\n    if (that instanceof RecordType) {\n        return RecordType.isSubtype(this, (RecordType) that);\n    }\n    ObjectType thatObj \u003d that.toObjectType();\n    ObjectType thatCtor \u003d thatObj \u003d\u003d null ? null : thatObj.getConstructor();\n    if (thatCtor !\u003d null \u0026\u0026 thatCtor.isInterface()) {\n        Iterable\u003cObjectType\u003e thisInterfaces \u003d getCtorImplementedInterfaces();\n        for (ObjectType thisInterface : thisInterfaces) {\n            if (thisInterface.isSubtype(that)) {\n                return true;\n            }\n        }\n    }\n    if (getConstructor() !\u003d null \u0026\u0026 getConstructor().isInterface()) {\n        for (ObjectType thisInterface : getCtorExtendedInterfaces()) {\n            if (thisInterface.isSubtype(that)) {\n                return true;\n            }\n        }\n    }\n    if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n        return true;\n    }\n    return this.isImplicitPrototype(thatObj);\n}",
      "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
      "functionStartLine": 436,
      "functionName": "isSubtype",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,33 +1,33 @@\n @Override\n public boolean isSubtype(JSType that) {\n     if (JSType.isSubtype(this, that)) {\n         return true;\n     }\n-    if (that instanceof UnionType) {\n+    if (that.isUnionType()) {\n         return false;\n     }\n     if (that instanceof RecordType) {\n         return RecordType.isSubtype(this, (RecordType) that);\n     }\n     ObjectType thatObj \u003d that.toObjectType();\n     ObjectType thatCtor \u003d thatObj \u003d\u003d null ? null : thatObj.getConstructor();\n     if (thatCtor !\u003d null \u0026\u0026 thatCtor.isInterface()) {\n         Iterable\u003cObjectType\u003e thisInterfaces \u003d getCtorImplementedInterfaces();\n         for (ObjectType thisInterface : thisInterfaces) {\n             if (thisInterface.isSubtype(that)) {\n                 return true;\n             }\n         }\n     }\n     if (getConstructor() !\u003d null \u0026\u0026 getConstructor().isInterface()) {\n         for (ObjectType thisInterface : getCtorExtendedInterfaces()) {\n             if (thisInterface.isSubtype(that)) {\n                 return true;\n             }\n         }\n     }\n     if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n         return true;\n     }\n     return this.isImplicitPrototype(thatObj);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d39f3fa825194ffa75c5c430eb2d193eca9ca9c3": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nThe underlying bugs in DisambiguateProperties were fixed separately.\n\n*** Original change description ***\n\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nbreaks disambiugateproperties\n\n*** Original change description ***\n\nThe infimum() relation on enum types is deeply disturbing,\nbecause now you can have subsets of enums. wow.\n\nR\u003djohnlenz\nDELTA\u003d161  (149 added, 4 deleted, 8 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2683\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1276 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/20/11, 11:29 AM",
      "commitName": "d39f3fa825194ffa75c5c430eb2d193eca9ca9c3",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "7/18/11, 10:41 AM",
      "commitNameOld": "94192f9b6bee5bf1fe12d7538c1224f03c68f3c4",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 2.03,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic boolean isSubtype(JSType that) {\n    if (JSType.isSubtype(this, that)) {\n        return true;\n    }\n    if (that instanceof UnionType) {\n        return false;\n    }\n    if (that instanceof RecordType) {\n        return RecordType.isSubtype(this, (RecordType) that);\n    }\n    ObjectType thatObj \u003d that.toObjectType();\n    ObjectType thatCtor \u003d thatObj \u003d\u003d null ? null : thatObj.getConstructor();\n    if (thatCtor !\u003d null \u0026\u0026 thatCtor.isInterface()) {\n        Iterable\u003cObjectType\u003e thisInterfaces \u003d getCtorImplementedInterfaces();\n        for (ObjectType thisInterface : thisInterfaces) {\n            if (thisInterface.isSubtype(that)) {\n                return true;\n            }\n        }\n    }\n    if (getConstructor() !\u003d null \u0026\u0026 getConstructor().isInterface()) {\n        for (ObjectType thisInterface : getCtorExtendedInterfaces()) {\n            if (thisInterface.isSubtype(that)) {\n                return true;\n            }\n        }\n    }\n    if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n        return true;\n    }\n    return this.isImplicitPrototype(thatObj);\n}",
      "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
      "functionStartLine": 431,
      "functionName": "isSubtype",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,36 +1,33 @@\n @Override\n public boolean isSubtype(JSType that) {\n     if (JSType.isSubtype(this, that)) {\n         return true;\n     }\n     if (that instanceof UnionType) {\n         return false;\n     }\n     if (that instanceof RecordType) {\n         return RecordType.isSubtype(this, (RecordType) that);\n     }\n     ObjectType thatObj \u003d that.toObjectType();\n     ObjectType thatCtor \u003d thatObj \u003d\u003d null ? null : thatObj.getConstructor();\n     if (thatCtor !\u003d null \u0026\u0026 thatCtor.isInterface()) {\n         Iterable\u003cObjectType\u003e thisInterfaces \u003d getCtorImplementedInterfaces();\n         for (ObjectType thisInterface : thisInterfaces) {\n             if (thisInterface.isSubtype(that)) {\n                 return true;\n             }\n         }\n     }\n     if (getConstructor() !\u003d null \u0026\u0026 getConstructor().isInterface()) {\n         for (ObjectType thisInterface : getCtorExtendedInterfaces()) {\n             if (thisInterface.isSubtype(that)) {\n                 return true;\n             }\n         }\n     }\n-    if (that !\u003d null) {\n-        if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n-            return true;\n-        }\n-        return this.isImplicitPrototype(thatObj);\n+    if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n+        return true;\n     }\n-    return false;\n+    return this.isImplicitPrototype(thatObj);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "94192f9b6bee5bf1fe12d7538c1224f03c68f3c4": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nbreaks some optimizations\n\n*** Original change description ***\n\nThe infimum() relation on enum types is deeply disturbing,\nbecause now you can have subsets of enums. wow.\n\nDELTA\u003d161  (4 added, 149 deleted, 8 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2615\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1267 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/18/11, 10:41 AM",
      "commitName": "94192f9b6bee5bf1fe12d7538c1224f03c68f3c4",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "7/18/11, 9:57 AM",
      "commitNameOld": "18e926295003e6266e5e1a4ea6949b2b381c073d",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic boolean isSubtype(JSType that) {\n    if (JSType.isSubtype(this, that)) {\n        return true;\n    }\n    if (that instanceof UnionType) {\n        return false;\n    }\n    if (that instanceof RecordType) {\n        return RecordType.isSubtype(this, (RecordType) that);\n    }\n    ObjectType thatObj \u003d that.toObjectType();\n    ObjectType thatCtor \u003d thatObj \u003d\u003d null ? null : thatObj.getConstructor();\n    if (thatCtor !\u003d null \u0026\u0026 thatCtor.isInterface()) {\n        Iterable\u003cObjectType\u003e thisInterfaces \u003d getCtorImplementedInterfaces();\n        for (ObjectType thisInterface : thisInterfaces) {\n            if (thisInterface.isSubtype(that)) {\n                return true;\n            }\n        }\n    }\n    if (getConstructor() !\u003d null \u0026\u0026 getConstructor().isInterface()) {\n        for (ObjectType thisInterface : getCtorExtendedInterfaces()) {\n            if (thisInterface.isSubtype(that)) {\n                return true;\n            }\n        }\n    }\n    if (that !\u003d null) {\n        if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n            return true;\n        }\n        return this.isImplicitPrototype(thatObj);\n    }\n    return false;\n}",
      "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
      "functionStartLine": 431,
      "functionName": "isSubtype",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,33 +1,36 @@\n @Override\n public boolean isSubtype(JSType that) {\n     if (JSType.isSubtype(this, that)) {\n         return true;\n     }\n     if (that instanceof UnionType) {\n         return false;\n     }\n     if (that instanceof RecordType) {\n         return RecordType.isSubtype(this, (RecordType) that);\n     }\n     ObjectType thatObj \u003d that.toObjectType();\n     ObjectType thatCtor \u003d thatObj \u003d\u003d null ? null : thatObj.getConstructor();\n     if (thatCtor !\u003d null \u0026\u0026 thatCtor.isInterface()) {\n         Iterable\u003cObjectType\u003e thisInterfaces \u003d getCtorImplementedInterfaces();\n         for (ObjectType thisInterface : thisInterfaces) {\n             if (thisInterface.isSubtype(that)) {\n                 return true;\n             }\n         }\n     }\n     if (getConstructor() !\u003d null \u0026\u0026 getConstructor().isInterface()) {\n         for (ObjectType thisInterface : getCtorExtendedInterfaces()) {\n             if (thisInterface.isSubtype(that)) {\n                 return true;\n             }\n         }\n     }\n-    if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n-        return true;\n+    if (that !\u003d null) {\n+        if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n+            return true;\n+        }\n+        return this.isImplicitPrototype(thatObj);\n     }\n-    return this.isImplicitPrototype(thatObj);\n+    return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "18e926295003e6266e5e1a4ea6949b2b381c073d": {
      "type": "Ybodychange",
      "commitMessage": "\nThe infimum() relation on enum types is deeply disturbing,\nbecause now you can have subsets of enums. wow.\n\nR\u003djohnlenz\nDELTA\u003d161  (149 added, 4 deleted, 8 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2614\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1266 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/18/11, 9:57 AM",
      "commitName": "18e926295003e6266e5e1a4ea6949b2b381c073d",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "7/12/11, 8:03 AM",
      "commitNameOld": "48a32150dae5412868226f0c336b24d51000a1b5",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 6.08,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic boolean isSubtype(JSType that) {\n    if (JSType.isSubtype(this, that)) {\n        return true;\n    }\n    if (that instanceof UnionType) {\n        return false;\n    }\n    if (that instanceof RecordType) {\n        return RecordType.isSubtype(this, (RecordType) that);\n    }\n    ObjectType thatObj \u003d that.toObjectType();\n    ObjectType thatCtor \u003d thatObj \u003d\u003d null ? null : thatObj.getConstructor();\n    if (thatCtor !\u003d null \u0026\u0026 thatCtor.isInterface()) {\n        Iterable\u003cObjectType\u003e thisInterfaces \u003d getCtorImplementedInterfaces();\n        for (ObjectType thisInterface : thisInterfaces) {\n            if (thisInterface.isSubtype(that)) {\n                return true;\n            }\n        }\n    }\n    if (getConstructor() !\u003d null \u0026\u0026 getConstructor().isInterface()) {\n        for (ObjectType thisInterface : getCtorExtendedInterfaces()) {\n            if (thisInterface.isSubtype(that)) {\n                return true;\n            }\n        }\n    }\n    if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n        return true;\n    }\n    return this.isImplicitPrototype(thatObj);\n}",
      "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
      "functionStartLine": 431,
      "functionName": "isSubtype",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,36 +1,33 @@\n @Override\n public boolean isSubtype(JSType that) {\n     if (JSType.isSubtype(this, that)) {\n         return true;\n     }\n     if (that instanceof UnionType) {\n         return false;\n     }\n     if (that instanceof RecordType) {\n         return RecordType.isSubtype(this, (RecordType) that);\n     }\n     ObjectType thatObj \u003d that.toObjectType();\n     ObjectType thatCtor \u003d thatObj \u003d\u003d null ? null : thatObj.getConstructor();\n     if (thatCtor !\u003d null \u0026\u0026 thatCtor.isInterface()) {\n         Iterable\u003cObjectType\u003e thisInterfaces \u003d getCtorImplementedInterfaces();\n         for (ObjectType thisInterface : thisInterfaces) {\n             if (thisInterface.isSubtype(that)) {\n                 return true;\n             }\n         }\n     }\n     if (getConstructor() !\u003d null \u0026\u0026 getConstructor().isInterface()) {\n         for (ObjectType thisInterface : getCtorExtendedInterfaces()) {\n             if (thisInterface.isSubtype(that)) {\n                 return true;\n             }\n         }\n     }\n-    if (that !\u003d null) {\n-        if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n-            return true;\n-        }\n-        return this.isImplicitPrototype(thatObj);\n+    if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n+        return true;\n     }\n-    return false;\n+    return this.isImplicitPrototype(thatObj);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c438dfd06013f82daa648d23b864842ff1881695": {
      "type": "Ybodychange",
      "commitMessage": "\nImplement multiple extends for interfaces\n\nR\u003dnicksantos\nDELTA\u003d711  (635 added, 41 deleted, 35 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1917\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1105 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/16/11, 12:57 PM",
      "commitName": "c438dfd06013f82daa648d23b864842ff1881695",
      "commitAuthor": "zhuyi@google.com",
      "commitDateOld": "5/10/11, 2:34 PM",
      "commitNameOld": "2851a41947bed8b8e100c7dac7d1edbc1c909d24",
      "commitAuthorOld": "zhuyi@google.com",
      "daysBetweenCommits": 5.93,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic boolean isSubtype(JSType that) {\n    if (JSType.isSubtype(this, that)) {\n        return true;\n    }\n    if (that instanceof UnionType) {\n        return false;\n    }\n    if (that instanceof RecordType) {\n        return RecordType.isSubtype(this, (RecordType) that);\n    }\n    ObjectType thatObj \u003d that.toObjectType();\n    ObjectType thatCtor \u003d thatObj \u003d\u003d null ? null : thatObj.getConstructor();\n    if (thatCtor !\u003d null \u0026\u0026 thatCtor.isInterface()) {\n        Iterable\u003cObjectType\u003e thisInterfaces \u003d getCtorImplementedInterfaces();\n        for (ObjectType thisInterface : thisInterfaces) {\n            if (thisInterface.isSubtype(that)) {\n                return true;\n            }\n        }\n    }\n    if (getConstructor() !\u003d null \u0026\u0026 getConstructor().isInterface()) {\n        for (ObjectType thisInterface : getCtorExtendedInterfaces()) {\n            if (thisInterface.isSubtype(that)) {\n                return true;\n            }\n        }\n    }\n    if (that !\u003d null) {\n        if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n            return true;\n        }\n        return this.isImplicitPrototype(thatObj);\n    }\n    return false;\n}",
      "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
      "functionStartLine": 437,
      "functionName": "isSubtype",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,29 +1,36 @@\n @Override\n public boolean isSubtype(JSType that) {\n     if (JSType.isSubtype(this, that)) {\n         return true;\n     }\n     if (that instanceof UnionType) {\n         return false;\n     }\n     if (that instanceof RecordType) {\n         return RecordType.isSubtype(this, (RecordType) that);\n     }\n     ObjectType thatObj \u003d that.toObjectType();\n     ObjectType thatCtor \u003d thatObj \u003d\u003d null ? null : thatObj.getConstructor();\n     if (thatCtor !\u003d null \u0026\u0026 thatCtor.isInterface()) {\n         Iterable\u003cObjectType\u003e thisInterfaces \u003d getCtorImplementedInterfaces();\n         for (ObjectType thisInterface : thisInterfaces) {\n             if (thisInterface.isSubtype(that)) {\n                 return true;\n             }\n         }\n     }\n+    if (getConstructor() !\u003d null \u0026\u0026 getConstructor().isInterface()) {\n+        for (ObjectType thisInterface : getCtorExtendedInterfaces()) {\n+            if (thisInterface.isSubtype(that)) {\n+                return true;\n+            }\n+        }\n+    }\n     if (that !\u003d null) {\n         if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n             return true;\n         }\n         return this.isImplicitPrototype(thatObj);\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2851a41947bed8b8e100c7dac7d1edbc1c909d24": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nGot multiple cases broken from different teams.\n\n*** Original change description ***\n\nImplement multi extends for interfaces\n\nR\u003dnicksantos\nDELTA\u003d635  (41 added, 560 deleted, 34 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1813\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1077 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/10/11, 2:34 PM",
      "commitName": "2851a41947bed8b8e100c7dac7d1edbc1c909d24",
      "commitAuthor": "zhuyi@google.com",
      "commitDateOld": "5/10/11, 1:26 PM",
      "commitNameOld": "a36a61a9027c5bca5752b0ecca7c609c07e568bb",
      "commitAuthorOld": "zhuyi@google.com",
      "daysBetweenCommits": 0.05,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic boolean isSubtype(JSType that) {\n    if (JSType.isSubtype(this, that)) {\n        return true;\n    }\n    if (that instanceof UnionType) {\n        return false;\n    }\n    if (that instanceof RecordType) {\n        return RecordType.isSubtype(this, (RecordType) that);\n    }\n    ObjectType thatObj \u003d that.toObjectType();\n    ObjectType thatCtor \u003d thatObj \u003d\u003d null ? null : thatObj.getConstructor();\n    if (thatCtor !\u003d null \u0026\u0026 thatCtor.isInterface()) {\n        Iterable\u003cObjectType\u003e thisInterfaces \u003d getCtorImplementedInterfaces();\n        for (ObjectType thisInterface : thisInterfaces) {\n            if (thisInterface.isSubtype(that)) {\n                return true;\n            }\n        }\n    }\n    if (that !\u003d null) {\n        if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n            return true;\n        }\n        return this.isImplicitPrototype(thatObj);\n    }\n    return false;\n}",
      "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
      "functionStartLine": 430,
      "functionName": "isSubtype",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,39 +1,29 @@\n @Override\n public boolean isSubtype(JSType that) {\n     if (JSType.isSubtype(this, that)) {\n         return true;\n     }\n     if (that instanceof UnionType) {\n         return false;\n     }\n     if (that instanceof RecordType) {\n         return RecordType.isSubtype(this, (RecordType) that);\n     }\n     ObjectType thatObj \u003d that.toObjectType();\n     ObjectType thatCtor \u003d thatObj \u003d\u003d null ? null : thatObj.getConstructor();\n     if (thatCtor !\u003d null \u0026\u0026 thatCtor.isInterface()) {\n         Iterable\u003cObjectType\u003e thisInterfaces \u003d getCtorImplementedInterfaces();\n         for (ObjectType thisInterface : thisInterfaces) {\n             if (thisInterface.isSubtype(that)) {\n                 return true;\n             }\n         }\n     }\n-    if (getConstructor() !\u003d null \u0026\u0026 getConstructor().isInterface()) {\n-        for (ObjectType thisInterface : getCtorExtendedInterfaces()) {\n-            if (thisInterface.isSubtype(that)) {\n-                return true;\n-            }\n-        }\n-        if (that.isEquivalentTo(registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE))) {\n-            return true;\n-        }\n-    }\n     if (that !\u003d null) {\n         if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n             return true;\n         }\n         return this.isImplicitPrototype(thatObj);\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a36a61a9027c5bca5752b0ecca7c609c07e568bb": {
      "type": "Ybodychange",
      "commitMessage": "\nImplement multi extends for interfaces\n\nR\u003dnicksantos\nDELTA\u003d635  (560 added, 41 deleted, 34 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1810\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1074 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/10/11, 1:26 PM",
      "commitName": "a36a61a9027c5bca5752b0ecca7c609c07e568bb",
      "commitAuthor": "zhuyi@google.com",
      "commitDateOld": "5/10/11, 8:34 AM",
      "commitNameOld": "091577d5000b2260452cdc79eacf54925de894a3",
      "commitAuthorOld": "bashir@google.com",
      "daysBetweenCommits": 0.2,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic boolean isSubtype(JSType that) {\n    if (JSType.isSubtype(this, that)) {\n        return true;\n    }\n    if (that instanceof UnionType) {\n        return false;\n    }\n    if (that instanceof RecordType) {\n        return RecordType.isSubtype(this, (RecordType) that);\n    }\n    ObjectType thatObj \u003d that.toObjectType();\n    ObjectType thatCtor \u003d thatObj \u003d\u003d null ? null : thatObj.getConstructor();\n    if (thatCtor !\u003d null \u0026\u0026 thatCtor.isInterface()) {\n        Iterable\u003cObjectType\u003e thisInterfaces \u003d getCtorImplementedInterfaces();\n        for (ObjectType thisInterface : thisInterfaces) {\n            if (thisInterface.isSubtype(that)) {\n                return true;\n            }\n        }\n    }\n    if (getConstructor() !\u003d null \u0026\u0026 getConstructor().isInterface()) {\n        for (ObjectType thisInterface : getCtorExtendedInterfaces()) {\n            if (thisInterface.isSubtype(that)) {\n                return true;\n            }\n        }\n        if (that.isEquivalentTo(registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE))) {\n            return true;\n        }\n    }\n    if (that !\u003d null) {\n        if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n            return true;\n        }\n        return this.isImplicitPrototype(thatObj);\n    }\n    return false;\n}",
      "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
      "functionStartLine": 435,
      "functionName": "isSubtype",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,29 +1,39 @@\n @Override\n public boolean isSubtype(JSType that) {\n     if (JSType.isSubtype(this, that)) {\n         return true;\n     }\n     if (that instanceof UnionType) {\n         return false;\n     }\n     if (that instanceof RecordType) {\n         return RecordType.isSubtype(this, (RecordType) that);\n     }\n     ObjectType thatObj \u003d that.toObjectType();\n     ObjectType thatCtor \u003d thatObj \u003d\u003d null ? null : thatObj.getConstructor();\n     if (thatCtor !\u003d null \u0026\u0026 thatCtor.isInterface()) {\n         Iterable\u003cObjectType\u003e thisInterfaces \u003d getCtorImplementedInterfaces();\n         for (ObjectType thisInterface : thisInterfaces) {\n             if (thisInterface.isSubtype(that)) {\n                 return true;\n             }\n         }\n     }\n+    if (getConstructor() !\u003d null \u0026\u0026 getConstructor().isInterface()) {\n+        for (ObjectType thisInterface : getCtorExtendedInterfaces()) {\n+            if (thisInterface.isSubtype(that)) {\n+                return true;\n+            }\n+        }\n+        if (that.isEquivalentTo(registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE))) {\n+            return true;\n+        }\n+    }\n     if (that !\u003d null) {\n         if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n             return true;\n         }\n         return this.isImplicitPrototype(thatObj);\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "86860111110ec7a96d92fbefb6c3ae15e3575405": {
      "type": "Ybodychange",
      "commitMessage": "Fix up the inheritance hierarchy so that \"Foo implements Bar\" implies\nthat Bar.prototype is the implicit prototype of Foo.prototoype.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@58 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/7/10, 7:08 AM",
      "commitName": "86860111110ec7a96d92fbefb6c3ae15e3575405",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "12/15/09, 1:52 PM",
      "commitNameOld": "a2d8936fae3eb0e3873c7f7c0233344c81436404",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 22.72,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic boolean isSubtype(JSType that) {\n    if (JSType.isSubtype(this, that)) {\n        return true;\n    }\n    if (that instanceof UnionType) {\n        return false;\n    }\n    if (that instanceof RecordType) {\n        return RecordType.isSubtype(this, (RecordType) that);\n    }\n    ObjectType thatObj \u003d that.toObjectType();\n    ObjectType thatCtor \u003d thatObj \u003d\u003d null ? null : thatObj.getConstructor();\n    if (thatCtor !\u003d null \u0026\u0026 thatCtor.isInterface()) {\n        Iterable\u003cObjectType\u003e thisInterfaces \u003d getCtorImplementedInterfaces();\n        for (ObjectType thisInterface : thisInterfaces) {\n            if (thisInterface.isSubtype(that)) {\n                return true;\n            }\n        }\n    }\n    if (that !\u003d null) {\n        if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n            return true;\n        }\n        return this.isImplicitPrototype(thatObj);\n    }\n    return false;\n}",
      "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
      "functionStartLine": 360,
      "functionName": "isSubtype",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,17 +1,29 @@\n @Override\n public boolean isSubtype(JSType that) {\n     if (JSType.isSubtype(this, that)) {\n         return true;\n     }\n+    if (that instanceof UnionType) {\n+        return false;\n+    }\n     if (that instanceof RecordType) {\n         return RecordType.isSubtype(this, (RecordType) that);\n     }\n-    ObjectType thatObj \u003d ObjectType.cast(that);\n+    ObjectType thatObj \u003d that.toObjectType();\n+    ObjectType thatCtor \u003d thatObj \u003d\u003d null ? null : thatObj.getConstructor();\n+    if (thatCtor !\u003d null \u0026\u0026 thatCtor.isInterface()) {\n+        Iterable\u003cObjectType\u003e thisInterfaces \u003d getCtorImplementedInterfaces();\n+        for (ObjectType thisInterface : thisInterfaces) {\n+            if (thisInterface.isSubtype(that)) {\n+                return true;\n+            }\n+        }\n+    }\n     if (that !\u003d null) {\n         if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n             return true;\n         }\n         return this.isImplicitPrototype(thatObj);\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a2d8936fae3eb0e3873c7f7c0233344c81436404": {
      "type": "Ybodychange",
      "commitMessage": "Add warnings for functions that are ambiguously defined on different\nbrowsers.\n\nAdd better support for Caja.\n\nRollback the change to CoalesceVariableNames, because it had problems.\n\nInternal type system refactoring.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@33 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/15/09, 1:52 PM",
      "commitName": "a2d8936fae3eb0e3873c7f7c0233344c81436404",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/25/09, 6:53 AM",
      "commitNameOld": "3bee5d740c96572faea4b9fb8b632e0e07b13cbb",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 20.29,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic boolean isSubtype(JSType that) {\n    if (JSType.isSubtype(this, that)) {\n        return true;\n    }\n    if (that instanceof RecordType) {\n        return RecordType.isSubtype(this, (RecordType) that);\n    }\n    ObjectType thatObj \u003d ObjectType.cast(that);\n    if (that !\u003d null) {\n        if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n            return true;\n        }\n        return this.isImplicitPrototype(thatObj);\n    }\n    return false;\n}",
      "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
      "functionStartLine": 360,
      "functionName": "isSubtype",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,16 +1,17 @@\n @Override\n public boolean isSubtype(JSType that) {\n     if (JSType.isSubtype(this, that)) {\n         return true;\n     }\n     if (that instanceof RecordType) {\n         return RecordType.isSubtype(this, (RecordType) that);\n     }\n-    if (that instanceof ObjectType) {\n+    ObjectType thatObj \u003d ObjectType.cast(that);\n+    if (that !\u003d null) {\n         if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n             return true;\n         }\n-        return this.isImplicitPrototype((ObjectType) that);\n+        return this.isImplicitPrototype(thatObj);\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,16 @@\n+@Override\n+public boolean isSubtype(JSType that) {\n+    if (JSType.isSubtype(this, that)) {\n+        return true;\n+    }\n+    if (that instanceof RecordType) {\n+        return RecordType.isSubtype(this, (RecordType) that);\n+    }\n+    if (that instanceof ObjectType) {\n+        if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n+            return true;\n+        }\n+        return this.isImplicitPrototype((ObjectType) that);\n+    }\n+    return false;\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic boolean isSubtype(JSType that) {\n    if (JSType.isSubtype(this, that)) {\n        return true;\n    }\n    if (that instanceof RecordType) {\n        return RecordType.isSubtype(this, (RecordType) that);\n    }\n    if (that instanceof ObjectType) {\n        if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n            return true;\n        }\n        return this.isImplicitPrototype((ObjectType) that);\n    }\n    return false;\n}",
      "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
      "functionStartLine": 360,
      "functionName": "isSubtype",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}