{
  "origin": "codeshovel",
  "repositoryName": "Closure-10b",
  "repositoryPath": "/tmp/Closure-10b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PeepholeFoldConstants.java",
  "functionName": "tryFoldComparison",
  "functionId": "tryFoldComparison___n-Node__left-Node__right-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
  "functionAnnotation": "@SuppressWarnings(\"fallthrough\")",
  "functionDoc": "Try to fold comparison nodes, e.g \u003d\u003d\n",
  "functionStartLine": 920,
  "functionEndLine": 1150,
  "numCommitsSeen": 82,
  "timeTaken": 7840,
  "changeHistory": [
    "edb6e4c48c19be681f38e9ee27e67b66a1944640",
    "e85593d14461f5342013d0d6c6e8484dca003eef",
    "39f629a8cfaab37da55288010640d7e516000b1f",
    "3d80e1ed8fffbcb5f41b63f64726d9a4c76f209f",
    "789f923ebf37c6a357eeadf60985293fe65322dd",
    "03fee32a06ccf8257b2da67b9034270be38805ae",
    "510ff24ac51a8c73ff3f2401379654c37a00546b",
    "eaaa156632369f88e9667f55c7761cef8367cf57",
    "9548f8637872d775c168e91d63a657d5694035e1",
    "f0362b1ab1ae1339e017b1d04f016980e3fa6cb6",
    "9de5e9b4671773bb3f2d5932e57c1b4186b9b777",
    "c9e89727dc8063d087d28e42629606f4fd74a6e5",
    "ffc106663b5a9a282c44f4976bec93645c03668c",
    "9a185e0c06b0a595ca0e6fb7990945cd0114a12f",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "edb6e4c48c19be681f38e9ee27e67b66a1944640": "Ybodychange",
    "e85593d14461f5342013d0d6c6e8484dca003eef": "Ybodychange",
    "39f629a8cfaab37da55288010640d7e516000b1f": "Ybodychange",
    "3d80e1ed8fffbcb5f41b63f64726d9a4c76f209f": "Ybodychange",
    "789f923ebf37c6a357eeadf60985293fe65322dd": "Ybodychange",
    "03fee32a06ccf8257b2da67b9034270be38805ae": "Ybodychange",
    "510ff24ac51a8c73ff3f2401379654c37a00546b": "Ybodychange",
    "eaaa156632369f88e9667f55c7761cef8367cf57": "Ybodychange",
    "9548f8637872d775c168e91d63a657d5694035e1": "Ybodychange",
    "f0362b1ab1ae1339e017b1d04f016980e3fa6cb6": "Ybodychange",
    "9de5e9b4671773bb3f2d5932e57c1b4186b9b777": "Yformatchange",
    "c9e89727dc8063d087d28e42629606f4fd74a6e5": "Ymultichange(Ymovefromfile,Yreturntypechange,Ymodifierchange,Ybodychange,Yparameterchange)",
    "ffc106663b5a9a282c44f4976bec93645c03668c": "Yformatchange",
    "9a185e0c06b0a595ca0e6fb7990945cd0114a12f": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "edb6e4c48c19be681f38e9ee27e67b66a1944640": {
      "type": "Ybodychange",
      "commitMessage": "\nTry out the IR AST construction functions in the Peephole passes\n\nR\u003dnicksantos\nDELTA\u003d154  (41 added, 35 deleted, 78 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3795\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1637 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/21/11, 4:28 PM",
      "commitName": "edb6e4c48c19be681f38e9ee27e67b66a1944640",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/21/11, 12:02 PM",
      "commitNameOld": "e85593d14461f5342013d0d6c6e8484dca003eef",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.18,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"fallthrough\")\nprivate Node tryFoldComparison(Node n, Node left, Node right) {\n    boolean leftLiteral \u003d NodeUtil.isLiteralValue(left, true);\n    boolean rightLiteral \u003d NodeUtil.isLiteralValue(right, true);\n    if (!leftLiteral || !rightLiteral) {\n        if (n.getType() !\u003d Token.GT \u0026\u0026 n.getType() !\u003d Token.LT) {\n            return n;\n        }\n    }\n    int op \u003d n.getType();\n    boolean result;\n    boolean undefinedRight \u003d NodeUtil.isUndefined(right) \u0026\u0026 rightLiteral;\n    boolean nullRight \u003d right.isNull();\n    int lhType \u003d getNormalizedNodeType(left);\n    int rhType \u003d getNormalizedNodeType(right);\n    switch(lhType) {\n        case Token.VOID:\n            if (!leftLiteral) {\n                return n;\n            } else if (!rightLiteral) {\n                return n;\n            } else {\n                result \u003d compareToUndefined(right, op);\n            }\n            break;\n        case Token.NULL:\n            if (rightLiteral \u0026\u0026 isEqualityOp(op)) {\n                result \u003d compareToNull(right, op);\n                break;\n            }\n        case Token.TRUE:\n        case Token.FALSE:\n            if (undefinedRight) {\n                result \u003d compareToUndefined(left, op);\n                break;\n            }\n            if (rhType !\u003d Token.TRUE \u0026\u0026 rhType !\u003d Token.FALSE \u0026\u0026 rhType !\u003d Token.NULL) {\n                return n;\n            }\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    result \u003d lhType \u003d\u003d rhType;\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    result \u003d lhType !\u003d rhType;\n                    break;\n                case Token.GE:\n                case Token.LE:\n                case Token.GT:\n                case Token.LT:\n                    Boolean compareResult \u003d compareAsNumbers(op, left, right);\n                    if (compareResult !\u003d null) {\n                        result \u003d compareResult;\n                    } else {\n                        return n;\n                    }\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        case Token.THIS:\n            if (!right.isThis()) {\n                return n;\n            }\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    result \u003d true;\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    result \u003d false;\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        case Token.STRING:\n            if (undefinedRight) {\n                result \u003d compareToUndefined(left, op);\n                break;\n            }\n            if (nullRight \u0026\u0026 isEqualityOp(op)) {\n                result \u003d compareToNull(left, op);\n                break;\n            }\n            if (Token.STRING !\u003d right.getType()) {\n                return n;\n            }\n            TernaryValue ternary \u003d TernaryValue.UNKNOWN;\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    ternary \u003d areStringsEqual(left.getString(), right.getString());\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    ternary \u003d areStringsEqual(left.getString(), right.getString()).not();\n                    break;\n            }\n            if (ternary \u003d\u003d TernaryValue.UNKNOWN) {\n                return n;\n            }\n            result \u003d ternary.toBoolean(true);\n            break;\n        case Token.NUMBER:\n            if (undefinedRight) {\n                result \u003d compareToUndefined(left, op);\n                break;\n            }\n            if (nullRight \u0026\u0026 isEqualityOp(op)) {\n                result \u003d compareToNull(left, op);\n                break;\n            }\n            if (Token.NUMBER !\u003d right.getType()) {\n                return n;\n            }\n            Boolean compareResult \u003d compareAsNumbers(op, left, right);\n            if (compareResult !\u003d null) {\n                result \u003d compareResult;\n            } else {\n                return null;\n            }\n            break;\n        case Token.NAME:\n            if (leftLiteral \u0026\u0026 undefinedRight) {\n                result \u003d compareToUndefined(left, op);\n                break;\n            }\n            if (rightLiteral) {\n                boolean undefinedLeft \u003d (left.getString().equals(\"undefined\"));\n                if (undefinedLeft) {\n                    result \u003d compareToUndefined(right, op);\n                    break;\n                }\n                if (leftLiteral \u0026\u0026 nullRight \u0026\u0026 isEqualityOp(op)) {\n                    result \u003d compareToNull(left, op);\n                    break;\n                }\n            }\n            if (Token.NAME !\u003d right.getType()) {\n                return n;\n            }\n            String ln \u003d left.getString();\n            String rn \u003d right.getString();\n            if (!ln.equals(rn)) {\n                return n;\n            }\n            switch(op) {\n                case Token.LT:\n                case Token.GT:\n                    result \u003d false;\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        case Token.NEG:\n            if (leftLiteral) {\n                if (undefinedRight) {\n                    result \u003d compareToUndefined(left, op);\n                    break;\n                }\n                if (nullRight \u0026\u0026 isEqualityOp(op)) {\n                    result \u003d compareToNull(left, op);\n                    break;\n                }\n            }\n            return n;\n        case Token.ARRAYLIT:\n        case Token.OBJECTLIT:\n        case Token.REGEXP:\n        case Token.FUNCTION:\n            if (leftLiteral) {\n                if (undefinedRight) {\n                    result \u003d compareToUndefined(left, op);\n                    break;\n                }\n                if (nullRight \u0026\u0026 isEqualityOp(op)) {\n                    result \u003d compareToNull(left, op);\n                    break;\n                }\n            }\n            return n;\n        default:\n            return n;\n    }\n    Node newNode \u003d NodeUtil.booleanNode(result);\n    n.getParent().replaceChild(n, newNode);\n    reportCodeChange();\n    return newNode;\n}",
      "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
      "functionStartLine": 917,
      "functionName": "tryFoldComparison",
      "functionAnnotation": "@SuppressWarnings(\"fallthrough\")",
      "functionDoc": "Try to fold comparison nodes, e.g \u003d\u003d\n",
      "diff": "@@ -1,195 +1,195 @@\n @SuppressWarnings(\"fallthrough\")\n private Node tryFoldComparison(Node n, Node left, Node right) {\n     boolean leftLiteral \u003d NodeUtil.isLiteralValue(left, true);\n     boolean rightLiteral \u003d NodeUtil.isLiteralValue(right, true);\n     if (!leftLiteral || !rightLiteral) {\n         if (n.getType() !\u003d Token.GT \u0026\u0026 n.getType() !\u003d Token.LT) {\n             return n;\n         }\n     }\n     int op \u003d n.getType();\n     boolean result;\n     boolean undefinedRight \u003d NodeUtil.isUndefined(right) \u0026\u0026 rightLiteral;\n     boolean nullRight \u003d right.isNull();\n     int lhType \u003d getNormalizedNodeType(left);\n     int rhType \u003d getNormalizedNodeType(right);\n     switch(lhType) {\n         case Token.VOID:\n             if (!leftLiteral) {\n                 return n;\n             } else if (!rightLiteral) {\n                 return n;\n             } else {\n                 result \u003d compareToUndefined(right, op);\n             }\n             break;\n         case Token.NULL:\n             if (rightLiteral \u0026\u0026 isEqualityOp(op)) {\n                 result \u003d compareToNull(right, op);\n                 break;\n             }\n         case Token.TRUE:\n         case Token.FALSE:\n             if (undefinedRight) {\n                 result \u003d compareToUndefined(left, op);\n                 break;\n             }\n             if (rhType !\u003d Token.TRUE \u0026\u0026 rhType !\u003d Token.FALSE \u0026\u0026 rhType !\u003d Token.NULL) {\n                 return n;\n             }\n             switch(op) {\n                 case Token.SHEQ:\n                 case Token.EQ:\n                     result \u003d lhType \u003d\u003d rhType;\n                     break;\n                 case Token.SHNE:\n                 case Token.NE:\n                     result \u003d lhType !\u003d rhType;\n                     break;\n                 case Token.GE:\n                 case Token.LE:\n                 case Token.GT:\n                 case Token.LT:\n                     Boolean compareResult \u003d compareAsNumbers(op, left, right);\n                     if (compareResult !\u003d null) {\n                         result \u003d compareResult;\n                     } else {\n                         return n;\n                     }\n                     break;\n                 default:\n                     return n;\n             }\n             break;\n         case Token.THIS:\n             if (!right.isThis()) {\n                 return n;\n             }\n             switch(op) {\n                 case Token.SHEQ:\n                 case Token.EQ:\n                     result \u003d true;\n                     break;\n                 case Token.SHNE:\n                 case Token.NE:\n                     result \u003d false;\n                     break;\n                 default:\n                     return n;\n             }\n             break;\n         case Token.STRING:\n             if (undefinedRight) {\n                 result \u003d compareToUndefined(left, op);\n                 break;\n             }\n             if (nullRight \u0026\u0026 isEqualityOp(op)) {\n                 result \u003d compareToNull(left, op);\n                 break;\n             }\n             if (Token.STRING !\u003d right.getType()) {\n                 return n;\n             }\n             TernaryValue ternary \u003d TernaryValue.UNKNOWN;\n             switch(op) {\n                 case Token.SHEQ:\n                 case Token.EQ:\n                     ternary \u003d areStringsEqual(left.getString(), right.getString());\n                     break;\n                 case Token.SHNE:\n                 case Token.NE:\n                     ternary \u003d areStringsEqual(left.getString(), right.getString()).not();\n                     break;\n             }\n             if (ternary \u003d\u003d TernaryValue.UNKNOWN) {\n                 return n;\n             }\n             result \u003d ternary.toBoolean(true);\n             break;\n         case Token.NUMBER:\n             if (undefinedRight) {\n                 result \u003d compareToUndefined(left, op);\n                 break;\n             }\n             if (nullRight \u0026\u0026 isEqualityOp(op)) {\n                 result \u003d compareToNull(left, op);\n                 break;\n             }\n             if (Token.NUMBER !\u003d right.getType()) {\n                 return n;\n             }\n             Boolean compareResult \u003d compareAsNumbers(op, left, right);\n             if (compareResult !\u003d null) {\n                 result \u003d compareResult;\n             } else {\n                 return null;\n             }\n             break;\n         case Token.NAME:\n             if (leftLiteral \u0026\u0026 undefinedRight) {\n                 result \u003d compareToUndefined(left, op);\n                 break;\n             }\n             if (rightLiteral) {\n                 boolean undefinedLeft \u003d (left.getString().equals(\"undefined\"));\n                 if (undefinedLeft) {\n                     result \u003d compareToUndefined(right, op);\n                     break;\n                 }\n                 if (leftLiteral \u0026\u0026 nullRight \u0026\u0026 isEqualityOp(op)) {\n                     result \u003d compareToNull(left, op);\n                     break;\n                 }\n             }\n             if (Token.NAME !\u003d right.getType()) {\n                 return n;\n             }\n             String ln \u003d left.getString();\n             String rn \u003d right.getString();\n             if (!ln.equals(rn)) {\n                 return n;\n             }\n             switch(op) {\n                 case Token.LT:\n                 case Token.GT:\n                     result \u003d false;\n                     break;\n                 default:\n                     return n;\n             }\n             break;\n         case Token.NEG:\n             if (leftLiteral) {\n                 if (undefinedRight) {\n                     result \u003d compareToUndefined(left, op);\n                     break;\n                 }\n                 if (nullRight \u0026\u0026 isEqualityOp(op)) {\n                     result \u003d compareToNull(left, op);\n                     break;\n                 }\n             }\n             return n;\n         case Token.ARRAYLIT:\n         case Token.OBJECTLIT:\n         case Token.REGEXP:\n         case Token.FUNCTION:\n             if (leftLiteral) {\n                 if (undefinedRight) {\n                     result \u003d compareToUndefined(left, op);\n                     break;\n                 }\n                 if (nullRight \u0026\u0026 isEqualityOp(op)) {\n                     result \u003d compareToNull(left, op);\n                     break;\n                 }\n             }\n             return n;\n         default:\n             return n;\n     }\n-    Node newNode \u003d new Node(result ? Token.TRUE : Token.FALSE);\n+    Node newNode \u003d NodeUtil.booleanNode(result);\n     n.getParent().replaceChild(n, newNode);\n     reportCodeChange();\n     return newNode;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e85593d14461f5342013d0d6c6e8484dca003eef": {
      "type": "Ybodychange",
      "commitMessage": "\nfix vertical tab encoding\nfixes issue 601\n\nR\u003djohnlenz\nDELTA\u003d147  (119 added, 0 deleted, 28 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3787\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1627 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/21/11, 12:02 PM",
      "commitName": "e85593d14461f5342013d0d6c6e8484dca003eef",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "11/17/11, 10:08 AM",
      "commitNameOld": "4e976ac213f448bab78f5c1432340c489b533d7b",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 4.08,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"fallthrough\")\nprivate Node tryFoldComparison(Node n, Node left, Node right) {\n    boolean leftLiteral \u003d NodeUtil.isLiteralValue(left, true);\n    boolean rightLiteral \u003d NodeUtil.isLiteralValue(right, true);\n    if (!leftLiteral || !rightLiteral) {\n        if (n.getType() !\u003d Token.GT \u0026\u0026 n.getType() !\u003d Token.LT) {\n            return n;\n        }\n    }\n    int op \u003d n.getType();\n    boolean result;\n    boolean undefinedRight \u003d NodeUtil.isUndefined(right) \u0026\u0026 rightLiteral;\n    boolean nullRight \u003d right.isNull();\n    int lhType \u003d getNormalizedNodeType(left);\n    int rhType \u003d getNormalizedNodeType(right);\n    switch(lhType) {\n        case Token.VOID:\n            if (!leftLiteral) {\n                return n;\n            } else if (!rightLiteral) {\n                return n;\n            } else {\n                result \u003d compareToUndefined(right, op);\n            }\n            break;\n        case Token.NULL:\n            if (rightLiteral \u0026\u0026 isEqualityOp(op)) {\n                result \u003d compareToNull(right, op);\n                break;\n            }\n        case Token.TRUE:\n        case Token.FALSE:\n            if (undefinedRight) {\n                result \u003d compareToUndefined(left, op);\n                break;\n            }\n            if (rhType !\u003d Token.TRUE \u0026\u0026 rhType !\u003d Token.FALSE \u0026\u0026 rhType !\u003d Token.NULL) {\n                return n;\n            }\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    result \u003d lhType \u003d\u003d rhType;\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    result \u003d lhType !\u003d rhType;\n                    break;\n                case Token.GE:\n                case Token.LE:\n                case Token.GT:\n                case Token.LT:\n                    Boolean compareResult \u003d compareAsNumbers(op, left, right);\n                    if (compareResult !\u003d null) {\n                        result \u003d compareResult;\n                    } else {\n                        return n;\n                    }\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        case Token.THIS:\n            if (!right.isThis()) {\n                return n;\n            }\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    result \u003d true;\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    result \u003d false;\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        case Token.STRING:\n            if (undefinedRight) {\n                result \u003d compareToUndefined(left, op);\n                break;\n            }\n            if (nullRight \u0026\u0026 isEqualityOp(op)) {\n                result \u003d compareToNull(left, op);\n                break;\n            }\n            if (Token.STRING !\u003d right.getType()) {\n                return n;\n            }\n            TernaryValue ternary \u003d TernaryValue.UNKNOWN;\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    ternary \u003d areStringsEqual(left.getString(), right.getString());\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    ternary \u003d areStringsEqual(left.getString(), right.getString()).not();\n                    break;\n            }\n            if (ternary \u003d\u003d TernaryValue.UNKNOWN) {\n                return n;\n            }\n            result \u003d ternary.toBoolean(true);\n            break;\n        case Token.NUMBER:\n            if (undefinedRight) {\n                result \u003d compareToUndefined(left, op);\n                break;\n            }\n            if (nullRight \u0026\u0026 isEqualityOp(op)) {\n                result \u003d compareToNull(left, op);\n                break;\n            }\n            if (Token.NUMBER !\u003d right.getType()) {\n                return n;\n            }\n            Boolean compareResult \u003d compareAsNumbers(op, left, right);\n            if (compareResult !\u003d null) {\n                result \u003d compareResult;\n            } else {\n                return null;\n            }\n            break;\n        case Token.NAME:\n            if (leftLiteral \u0026\u0026 undefinedRight) {\n                result \u003d compareToUndefined(left, op);\n                break;\n            }\n            if (rightLiteral) {\n                boolean undefinedLeft \u003d (left.getString().equals(\"undefined\"));\n                if (undefinedLeft) {\n                    result \u003d compareToUndefined(right, op);\n                    break;\n                }\n                if (leftLiteral \u0026\u0026 nullRight \u0026\u0026 isEqualityOp(op)) {\n                    result \u003d compareToNull(left, op);\n                    break;\n                }\n            }\n            if (Token.NAME !\u003d right.getType()) {\n                return n;\n            }\n            String ln \u003d left.getString();\n            String rn \u003d right.getString();\n            if (!ln.equals(rn)) {\n                return n;\n            }\n            switch(op) {\n                case Token.LT:\n                case Token.GT:\n                    result \u003d false;\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        case Token.NEG:\n            if (leftLiteral) {\n                if (undefinedRight) {\n                    result \u003d compareToUndefined(left, op);\n                    break;\n                }\n                if (nullRight \u0026\u0026 isEqualityOp(op)) {\n                    result \u003d compareToNull(left, op);\n                    break;\n                }\n            }\n            return n;\n        case Token.ARRAYLIT:\n        case Token.OBJECTLIT:\n        case Token.REGEXP:\n        case Token.FUNCTION:\n            if (leftLiteral) {\n                if (undefinedRight) {\n                    result \u003d compareToUndefined(left, op);\n                    break;\n                }\n                if (nullRight \u0026\u0026 isEqualityOp(op)) {\n                    result \u003d compareToNull(left, op);\n                    break;\n                }\n            }\n            return n;\n        default:\n            return n;\n    }\n    Node newNode \u003d new Node(result ? Token.TRUE : Token.FALSE);\n    n.getParent().replaceChild(n, newNode);\n    reportCodeChange();\n    return newNode;\n}",
      "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
      "functionStartLine": 932,
      "functionName": "tryFoldComparison",
      "functionAnnotation": "@SuppressWarnings(\"fallthrough\")",
      "functionDoc": "Try to fold comparison nodes, e.g \u003d\u003d\n",
      "diff": "@@ -1,192 +1,195 @@\n @SuppressWarnings(\"fallthrough\")\n private Node tryFoldComparison(Node n, Node left, Node right) {\n     boolean leftLiteral \u003d NodeUtil.isLiteralValue(left, true);\n     boolean rightLiteral \u003d NodeUtil.isLiteralValue(right, true);\n     if (!leftLiteral || !rightLiteral) {\n         if (n.getType() !\u003d Token.GT \u0026\u0026 n.getType() !\u003d Token.LT) {\n             return n;\n         }\n     }\n     int op \u003d n.getType();\n     boolean result;\n     boolean undefinedRight \u003d NodeUtil.isUndefined(right) \u0026\u0026 rightLiteral;\n     boolean nullRight \u003d right.isNull();\n     int lhType \u003d getNormalizedNodeType(left);\n     int rhType \u003d getNormalizedNodeType(right);\n     switch(lhType) {\n         case Token.VOID:\n             if (!leftLiteral) {\n                 return n;\n             } else if (!rightLiteral) {\n                 return n;\n             } else {\n                 result \u003d compareToUndefined(right, op);\n             }\n             break;\n         case Token.NULL:\n             if (rightLiteral \u0026\u0026 isEqualityOp(op)) {\n                 result \u003d compareToNull(right, op);\n                 break;\n             }\n         case Token.TRUE:\n         case Token.FALSE:\n             if (undefinedRight) {\n                 result \u003d compareToUndefined(left, op);\n                 break;\n             }\n             if (rhType !\u003d Token.TRUE \u0026\u0026 rhType !\u003d Token.FALSE \u0026\u0026 rhType !\u003d Token.NULL) {\n                 return n;\n             }\n             switch(op) {\n                 case Token.SHEQ:\n                 case Token.EQ:\n                     result \u003d lhType \u003d\u003d rhType;\n                     break;\n                 case Token.SHNE:\n                 case Token.NE:\n                     result \u003d lhType !\u003d rhType;\n                     break;\n                 case Token.GE:\n                 case Token.LE:\n                 case Token.GT:\n                 case Token.LT:\n                     Boolean compareResult \u003d compareAsNumbers(op, left, right);\n                     if (compareResult !\u003d null) {\n                         result \u003d compareResult;\n                     } else {\n                         return n;\n                     }\n                     break;\n                 default:\n                     return n;\n             }\n             break;\n         case Token.THIS:\n             if (!right.isThis()) {\n                 return n;\n             }\n             switch(op) {\n                 case Token.SHEQ:\n                 case Token.EQ:\n                     result \u003d true;\n                     break;\n                 case Token.SHNE:\n                 case Token.NE:\n                     result \u003d false;\n                     break;\n                 default:\n                     return n;\n             }\n             break;\n         case Token.STRING:\n             if (undefinedRight) {\n                 result \u003d compareToUndefined(left, op);\n                 break;\n             }\n             if (nullRight \u0026\u0026 isEqualityOp(op)) {\n                 result \u003d compareToNull(left, op);\n                 break;\n             }\n             if (Token.STRING !\u003d right.getType()) {\n                 return n;\n             }\n+            TernaryValue ternary \u003d TernaryValue.UNKNOWN;\n             switch(op) {\n                 case Token.SHEQ:\n                 case Token.EQ:\n-                    result \u003d left.getString().equals(right.getString());\n+                    ternary \u003d areStringsEqual(left.getString(), right.getString());\n                     break;\n                 case Token.SHNE:\n                 case Token.NE:\n-                    result \u003d !left.getString().equals(right.getString());\n+                    ternary \u003d areStringsEqual(left.getString(), right.getString()).not();\n                     break;\n-                default:\n-                    return n;\n             }\n+            if (ternary \u003d\u003d TernaryValue.UNKNOWN) {\n+                return n;\n+            }\n+            result \u003d ternary.toBoolean(true);\n             break;\n         case Token.NUMBER:\n             if (undefinedRight) {\n                 result \u003d compareToUndefined(left, op);\n                 break;\n             }\n             if (nullRight \u0026\u0026 isEqualityOp(op)) {\n                 result \u003d compareToNull(left, op);\n                 break;\n             }\n             if (Token.NUMBER !\u003d right.getType()) {\n                 return n;\n             }\n             Boolean compareResult \u003d compareAsNumbers(op, left, right);\n             if (compareResult !\u003d null) {\n                 result \u003d compareResult;\n             } else {\n                 return null;\n             }\n             break;\n         case Token.NAME:\n             if (leftLiteral \u0026\u0026 undefinedRight) {\n                 result \u003d compareToUndefined(left, op);\n                 break;\n             }\n             if (rightLiteral) {\n                 boolean undefinedLeft \u003d (left.getString().equals(\"undefined\"));\n                 if (undefinedLeft) {\n                     result \u003d compareToUndefined(right, op);\n                     break;\n                 }\n                 if (leftLiteral \u0026\u0026 nullRight \u0026\u0026 isEqualityOp(op)) {\n                     result \u003d compareToNull(left, op);\n                     break;\n                 }\n             }\n             if (Token.NAME !\u003d right.getType()) {\n                 return n;\n             }\n             String ln \u003d left.getString();\n             String rn \u003d right.getString();\n             if (!ln.equals(rn)) {\n                 return n;\n             }\n             switch(op) {\n                 case Token.LT:\n                 case Token.GT:\n                     result \u003d false;\n                     break;\n                 default:\n                     return n;\n             }\n             break;\n         case Token.NEG:\n             if (leftLiteral) {\n                 if (undefinedRight) {\n                     result \u003d compareToUndefined(left, op);\n                     break;\n                 }\n                 if (nullRight \u0026\u0026 isEqualityOp(op)) {\n                     result \u003d compareToNull(left, op);\n                     break;\n                 }\n             }\n             return n;\n         case Token.ARRAYLIT:\n         case Token.OBJECTLIT:\n         case Token.REGEXP:\n         case Token.FUNCTION:\n             if (leftLiteral) {\n                 if (undefinedRight) {\n                     result \u003d compareToUndefined(left, op);\n                     break;\n                 }\n                 if (nullRight \u0026\u0026 isEqualityOp(op)) {\n                     result \u003d compareToNull(left, op);\n                     break;\n                 }\n             }\n             return n;\n         default:\n             return n;\n     }\n     Node newNode \u003d new Node(result ? Token.TRUE : Token.FALSE);\n     n.getParent().replaceChild(n, newNode);\n     reportCodeChange();\n     return newNode;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "39f629a8cfaab37da55288010640d7e516000b1f": {
      "type": "Ybodychange",
      "commitMessage": "\nReplace calls of the form \"Node.getType() !\u003d Token.XX\" with\n\"!Node.isXX()\" calls.\n\nR\u003dnicksantos\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3706\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1598 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/14/11, 6:13 PM",
      "commitName": "39f629a8cfaab37da55288010640d7e516000b1f",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/11/11, 4:42 PM",
      "commitNameOld": "5524adbda991632656059566b69cc2771ba42b7d",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 3.06,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"fallthrough\")\nprivate Node tryFoldComparison(Node n, Node left, Node right) {\n    boolean leftLiteral \u003d NodeUtil.isLiteralValue(left, true);\n    boolean rightLiteral \u003d NodeUtil.isLiteralValue(right, true);\n    if (!leftLiteral || !rightLiteral) {\n        if (n.getType() !\u003d Token.GT \u0026\u0026 n.getType() !\u003d Token.LT) {\n            return n;\n        }\n    }\n    int op \u003d n.getType();\n    boolean result;\n    boolean undefinedRight \u003d NodeUtil.isUndefined(right) \u0026\u0026 rightLiteral;\n    boolean nullRight \u003d right.isNull();\n    int lhType \u003d getNormalizedNodeType(left);\n    int rhType \u003d getNormalizedNodeType(right);\n    switch(lhType) {\n        case Token.VOID:\n            if (!leftLiteral) {\n                return n;\n            } else if (!rightLiteral) {\n                return n;\n            } else {\n                result \u003d compareToUndefined(right, op);\n            }\n            break;\n        case Token.NULL:\n            if (rightLiteral \u0026\u0026 isEqualityOp(op)) {\n                result \u003d compareToNull(right, op);\n                break;\n            }\n        case Token.TRUE:\n        case Token.FALSE:\n            if (undefinedRight) {\n                result \u003d compareToUndefined(left, op);\n                break;\n            }\n            if (rhType !\u003d Token.TRUE \u0026\u0026 rhType !\u003d Token.FALSE \u0026\u0026 rhType !\u003d Token.NULL) {\n                return n;\n            }\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    result \u003d lhType \u003d\u003d rhType;\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    result \u003d lhType !\u003d rhType;\n                    break;\n                case Token.GE:\n                case Token.LE:\n                case Token.GT:\n                case Token.LT:\n                    Boolean compareResult \u003d compareAsNumbers(op, left, right);\n                    if (compareResult !\u003d null) {\n                        result \u003d compareResult;\n                    } else {\n                        return n;\n                    }\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        case Token.THIS:\n            if (!right.isThis()) {\n                return n;\n            }\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    result \u003d true;\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    result \u003d false;\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        case Token.STRING:\n            if (undefinedRight) {\n                result \u003d compareToUndefined(left, op);\n                break;\n            }\n            if (nullRight \u0026\u0026 isEqualityOp(op)) {\n                result \u003d compareToNull(left, op);\n                break;\n            }\n            if (Token.STRING !\u003d right.getType()) {\n                return n;\n            }\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    result \u003d left.getString().equals(right.getString());\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    result \u003d !left.getString().equals(right.getString());\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        case Token.NUMBER:\n            if (undefinedRight) {\n                result \u003d compareToUndefined(left, op);\n                break;\n            }\n            if (nullRight \u0026\u0026 isEqualityOp(op)) {\n                result \u003d compareToNull(left, op);\n                break;\n            }\n            if (Token.NUMBER !\u003d right.getType()) {\n                return n;\n            }\n            Boolean compareResult \u003d compareAsNumbers(op, left, right);\n            if (compareResult !\u003d null) {\n                result \u003d compareResult;\n            } else {\n                return null;\n            }\n            break;\n        case Token.NAME:\n            if (leftLiteral \u0026\u0026 undefinedRight) {\n                result \u003d compareToUndefined(left, op);\n                break;\n            }\n            if (rightLiteral) {\n                boolean undefinedLeft \u003d (left.getString().equals(\"undefined\"));\n                if (undefinedLeft) {\n                    result \u003d compareToUndefined(right, op);\n                    break;\n                }\n                if (leftLiteral \u0026\u0026 nullRight \u0026\u0026 isEqualityOp(op)) {\n                    result \u003d compareToNull(left, op);\n                    break;\n                }\n            }\n            if (Token.NAME !\u003d right.getType()) {\n                return n;\n            }\n            String ln \u003d left.getString();\n            String rn \u003d right.getString();\n            if (!ln.equals(rn)) {\n                return n;\n            }\n            switch(op) {\n                case Token.LT:\n                case Token.GT:\n                    result \u003d false;\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        case Token.NEG:\n            if (leftLiteral) {\n                if (undefinedRight) {\n                    result \u003d compareToUndefined(left, op);\n                    break;\n                }\n                if (nullRight \u0026\u0026 isEqualityOp(op)) {\n                    result \u003d compareToNull(left, op);\n                    break;\n                }\n            }\n            return n;\n        case Token.ARRAYLIT:\n        case Token.OBJECTLIT:\n        case Token.REGEXP:\n        case Token.FUNCTION:\n            if (leftLiteral) {\n                if (undefinedRight) {\n                    result \u003d compareToUndefined(left, op);\n                    break;\n                }\n                if (nullRight \u0026\u0026 isEqualityOp(op)) {\n                    result \u003d compareToNull(left, op);\n                    break;\n                }\n            }\n            return n;\n        default:\n            return n;\n    }\n    Node newNode \u003d new Node(result ? Token.TRUE : Token.FALSE);\n    n.getParent().replaceChild(n, newNode);\n    reportCodeChange();\n    return newNode;\n}",
      "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
      "functionStartLine": 932,
      "functionName": "tryFoldComparison",
      "functionAnnotation": "@SuppressWarnings(\"fallthrough\")",
      "functionDoc": "Try to fold comparison nodes, e.g \u003d\u003d\n",
      "diff": "@@ -1,192 +1,192 @@\n @SuppressWarnings(\"fallthrough\")\n private Node tryFoldComparison(Node n, Node left, Node right) {\n     boolean leftLiteral \u003d NodeUtil.isLiteralValue(left, true);\n     boolean rightLiteral \u003d NodeUtil.isLiteralValue(right, true);\n     if (!leftLiteral || !rightLiteral) {\n         if (n.getType() !\u003d Token.GT \u0026\u0026 n.getType() !\u003d Token.LT) {\n             return n;\n         }\n     }\n     int op \u003d n.getType();\n     boolean result;\n     boolean undefinedRight \u003d NodeUtil.isUndefined(right) \u0026\u0026 rightLiteral;\n     boolean nullRight \u003d right.isNull();\n     int lhType \u003d getNormalizedNodeType(left);\n     int rhType \u003d getNormalizedNodeType(right);\n     switch(lhType) {\n         case Token.VOID:\n             if (!leftLiteral) {\n                 return n;\n             } else if (!rightLiteral) {\n                 return n;\n             } else {\n                 result \u003d compareToUndefined(right, op);\n             }\n             break;\n         case Token.NULL:\n             if (rightLiteral \u0026\u0026 isEqualityOp(op)) {\n                 result \u003d compareToNull(right, op);\n                 break;\n             }\n         case Token.TRUE:\n         case Token.FALSE:\n             if (undefinedRight) {\n                 result \u003d compareToUndefined(left, op);\n                 break;\n             }\n             if (rhType !\u003d Token.TRUE \u0026\u0026 rhType !\u003d Token.FALSE \u0026\u0026 rhType !\u003d Token.NULL) {\n                 return n;\n             }\n             switch(op) {\n                 case Token.SHEQ:\n                 case Token.EQ:\n                     result \u003d lhType \u003d\u003d rhType;\n                     break;\n                 case Token.SHNE:\n                 case Token.NE:\n                     result \u003d lhType !\u003d rhType;\n                     break;\n                 case Token.GE:\n                 case Token.LE:\n                 case Token.GT:\n                 case Token.LT:\n                     Boolean compareResult \u003d compareAsNumbers(op, left, right);\n                     if (compareResult !\u003d null) {\n                         result \u003d compareResult;\n                     } else {\n                         return n;\n                     }\n                     break;\n                 default:\n                     return n;\n             }\n             break;\n         case Token.THIS:\n-            if (right.getType() !\u003d Token.THIS) {\n+            if (!right.isThis()) {\n                 return n;\n             }\n             switch(op) {\n                 case Token.SHEQ:\n                 case Token.EQ:\n                     result \u003d true;\n                     break;\n                 case Token.SHNE:\n                 case Token.NE:\n                     result \u003d false;\n                     break;\n                 default:\n                     return n;\n             }\n             break;\n         case Token.STRING:\n             if (undefinedRight) {\n                 result \u003d compareToUndefined(left, op);\n                 break;\n             }\n             if (nullRight \u0026\u0026 isEqualityOp(op)) {\n                 result \u003d compareToNull(left, op);\n                 break;\n             }\n             if (Token.STRING !\u003d right.getType()) {\n                 return n;\n             }\n             switch(op) {\n                 case Token.SHEQ:\n                 case Token.EQ:\n                     result \u003d left.getString().equals(right.getString());\n                     break;\n                 case Token.SHNE:\n                 case Token.NE:\n                     result \u003d !left.getString().equals(right.getString());\n                     break;\n                 default:\n                     return n;\n             }\n             break;\n         case Token.NUMBER:\n             if (undefinedRight) {\n                 result \u003d compareToUndefined(left, op);\n                 break;\n             }\n             if (nullRight \u0026\u0026 isEqualityOp(op)) {\n                 result \u003d compareToNull(left, op);\n                 break;\n             }\n             if (Token.NUMBER !\u003d right.getType()) {\n                 return n;\n             }\n             Boolean compareResult \u003d compareAsNumbers(op, left, right);\n             if (compareResult !\u003d null) {\n                 result \u003d compareResult;\n             } else {\n                 return null;\n             }\n             break;\n         case Token.NAME:\n             if (leftLiteral \u0026\u0026 undefinedRight) {\n                 result \u003d compareToUndefined(left, op);\n                 break;\n             }\n             if (rightLiteral) {\n                 boolean undefinedLeft \u003d (left.getString().equals(\"undefined\"));\n                 if (undefinedLeft) {\n                     result \u003d compareToUndefined(right, op);\n                     break;\n                 }\n                 if (leftLiteral \u0026\u0026 nullRight \u0026\u0026 isEqualityOp(op)) {\n                     result \u003d compareToNull(left, op);\n                     break;\n                 }\n             }\n             if (Token.NAME !\u003d right.getType()) {\n                 return n;\n             }\n             String ln \u003d left.getString();\n             String rn \u003d right.getString();\n             if (!ln.equals(rn)) {\n                 return n;\n             }\n             switch(op) {\n                 case Token.LT:\n                 case Token.GT:\n                     result \u003d false;\n                     break;\n                 default:\n                     return n;\n             }\n             break;\n         case Token.NEG:\n             if (leftLiteral) {\n                 if (undefinedRight) {\n                     result \u003d compareToUndefined(left, op);\n                     break;\n                 }\n                 if (nullRight \u0026\u0026 isEqualityOp(op)) {\n                     result \u003d compareToNull(left, op);\n                     break;\n                 }\n             }\n             return n;\n         case Token.ARRAYLIT:\n         case Token.OBJECTLIT:\n         case Token.REGEXP:\n         case Token.FUNCTION:\n             if (leftLiteral) {\n                 if (undefinedRight) {\n                     result \u003d compareToUndefined(left, op);\n                     break;\n                 }\n                 if (nullRight \u0026\u0026 isEqualityOp(op)) {\n                     result \u003d compareToNull(left, op);\n                     break;\n                 }\n             }\n             return n;\n         default:\n             return n;\n     }\n     Node newNode \u003d new Node(result ? Token.TRUE : Token.FALSE);\n     n.getParent().replaceChild(n, newNode);\n     reportCodeChange();\n     return newNode;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3d80e1ed8fffbcb5f41b63f64726d9a4c76f209f": {
      "type": "Ybodychange",
      "commitMessage": "\nInline NodeUtil.isXXX functions and call the Node.isXXX functions\ndirectly.\n\nR\u003dnicksantos\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3673\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1578 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/9/11, 1:51 PM",
      "commitName": "3d80e1ed8fffbcb5f41b63f64726d9a4c76f209f",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/9/11, 10:08 AM",
      "commitNameOld": "ca41f5d443aad22b11b2b6d514fdf20101f33276",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 0.16,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"fallthrough\")\nprivate Node tryFoldComparison(Node n, Node left, Node right) {\n    boolean leftLiteral \u003d NodeUtil.isLiteralValue(left, true);\n    boolean rightLiteral \u003d NodeUtil.isLiteralValue(right, true);\n    if (!leftLiteral || !rightLiteral) {\n        if (n.getType() !\u003d Token.GT \u0026\u0026 n.getType() !\u003d Token.LT) {\n            return n;\n        }\n    }\n    int op \u003d n.getType();\n    boolean result;\n    boolean undefinedRight \u003d NodeUtil.isUndefined(right) \u0026\u0026 rightLiteral;\n    boolean nullRight \u003d right.isNull();\n    int lhType \u003d getNormalizedNodeType(left);\n    int rhType \u003d getNormalizedNodeType(right);\n    switch(lhType) {\n        case Token.VOID:\n            if (!leftLiteral) {\n                return n;\n            } else if (!rightLiteral) {\n                return n;\n            } else {\n                result \u003d compareToUndefined(right, op);\n            }\n            break;\n        case Token.NULL:\n            if (rightLiteral \u0026\u0026 isEqualityOp(op)) {\n                result \u003d compareToNull(right, op);\n                break;\n            }\n        case Token.TRUE:\n        case Token.FALSE:\n            if (undefinedRight) {\n                result \u003d compareToUndefined(left, op);\n                break;\n            }\n            if (rhType !\u003d Token.TRUE \u0026\u0026 rhType !\u003d Token.FALSE \u0026\u0026 rhType !\u003d Token.NULL) {\n                return n;\n            }\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    result \u003d lhType \u003d\u003d rhType;\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    result \u003d lhType !\u003d rhType;\n                    break;\n                case Token.GE:\n                case Token.LE:\n                case Token.GT:\n                case Token.LT:\n                    Boolean compareResult \u003d compareAsNumbers(op, left, right);\n                    if (compareResult !\u003d null) {\n                        result \u003d compareResult;\n                    } else {\n                        return n;\n                    }\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        case Token.THIS:\n            if (right.getType() !\u003d Token.THIS) {\n                return n;\n            }\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    result \u003d true;\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    result \u003d false;\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        case Token.STRING:\n            if (undefinedRight) {\n                result \u003d compareToUndefined(left, op);\n                break;\n            }\n            if (nullRight \u0026\u0026 isEqualityOp(op)) {\n                result \u003d compareToNull(left, op);\n                break;\n            }\n            if (Token.STRING !\u003d right.getType()) {\n                return n;\n            }\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    result \u003d left.getString().equals(right.getString());\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    result \u003d !left.getString().equals(right.getString());\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        case Token.NUMBER:\n            if (undefinedRight) {\n                result \u003d compareToUndefined(left, op);\n                break;\n            }\n            if (nullRight \u0026\u0026 isEqualityOp(op)) {\n                result \u003d compareToNull(left, op);\n                break;\n            }\n            if (Token.NUMBER !\u003d right.getType()) {\n                return n;\n            }\n            Boolean compareResult \u003d compareAsNumbers(op, left, right);\n            if (compareResult !\u003d null) {\n                result \u003d compareResult;\n            } else {\n                return null;\n            }\n            break;\n        case Token.NAME:\n            if (leftLiteral \u0026\u0026 undefinedRight) {\n                result \u003d compareToUndefined(left, op);\n                break;\n            }\n            if (rightLiteral) {\n                boolean undefinedLeft \u003d (left.getString().equals(\"undefined\"));\n                if (undefinedLeft) {\n                    result \u003d compareToUndefined(right, op);\n                    break;\n                }\n                if (leftLiteral \u0026\u0026 nullRight \u0026\u0026 isEqualityOp(op)) {\n                    result \u003d compareToNull(left, op);\n                    break;\n                }\n            }\n            if (Token.NAME !\u003d right.getType()) {\n                return n;\n            }\n            String ln \u003d left.getString();\n            String rn \u003d right.getString();\n            if (!ln.equals(rn)) {\n                return n;\n            }\n            switch(op) {\n                case Token.LT:\n                case Token.GT:\n                    result \u003d false;\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        case Token.NEG:\n            if (leftLiteral) {\n                if (undefinedRight) {\n                    result \u003d compareToUndefined(left, op);\n                    break;\n                }\n                if (nullRight \u0026\u0026 isEqualityOp(op)) {\n                    result \u003d compareToNull(left, op);\n                    break;\n                }\n            }\n            return n;\n        case Token.ARRAYLIT:\n        case Token.OBJECTLIT:\n        case Token.REGEXP:\n        case Token.FUNCTION:\n            if (leftLiteral) {\n                if (undefinedRight) {\n                    result \u003d compareToUndefined(left, op);\n                    break;\n                }\n                if (nullRight \u0026\u0026 isEqualityOp(op)) {\n                    result \u003d compareToNull(left, op);\n                    break;\n                }\n            }\n            return n;\n        default:\n            return n;\n    }\n    Node newNode \u003d new Node(result ? Token.TRUE : Token.FALSE);\n    n.getParent().replaceChild(n, newNode);\n    reportCodeChange();\n    return newNode;\n}",
      "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
      "functionStartLine": 932,
      "functionName": "tryFoldComparison",
      "functionAnnotation": "@SuppressWarnings(\"fallthrough\")",
      "functionDoc": "Try to fold comparison nodes, e.g \u003d\u003d\n",
      "diff": "@@ -1,192 +1,192 @@\n @SuppressWarnings(\"fallthrough\")\n private Node tryFoldComparison(Node n, Node left, Node right) {\n     boolean leftLiteral \u003d NodeUtil.isLiteralValue(left, true);\n     boolean rightLiteral \u003d NodeUtil.isLiteralValue(right, true);\n     if (!leftLiteral || !rightLiteral) {\n         if (n.getType() !\u003d Token.GT \u0026\u0026 n.getType() !\u003d Token.LT) {\n             return n;\n         }\n     }\n     int op \u003d n.getType();\n     boolean result;\n     boolean undefinedRight \u003d NodeUtil.isUndefined(right) \u0026\u0026 rightLiteral;\n-    boolean nullRight \u003d NodeUtil.isNull(right);\n+    boolean nullRight \u003d right.isNull();\n     int lhType \u003d getNormalizedNodeType(left);\n     int rhType \u003d getNormalizedNodeType(right);\n     switch(lhType) {\n         case Token.VOID:\n             if (!leftLiteral) {\n                 return n;\n             } else if (!rightLiteral) {\n                 return n;\n             } else {\n                 result \u003d compareToUndefined(right, op);\n             }\n             break;\n         case Token.NULL:\n             if (rightLiteral \u0026\u0026 isEqualityOp(op)) {\n                 result \u003d compareToNull(right, op);\n                 break;\n             }\n         case Token.TRUE:\n         case Token.FALSE:\n             if (undefinedRight) {\n                 result \u003d compareToUndefined(left, op);\n                 break;\n             }\n             if (rhType !\u003d Token.TRUE \u0026\u0026 rhType !\u003d Token.FALSE \u0026\u0026 rhType !\u003d Token.NULL) {\n                 return n;\n             }\n             switch(op) {\n                 case Token.SHEQ:\n                 case Token.EQ:\n                     result \u003d lhType \u003d\u003d rhType;\n                     break;\n                 case Token.SHNE:\n                 case Token.NE:\n                     result \u003d lhType !\u003d rhType;\n                     break;\n                 case Token.GE:\n                 case Token.LE:\n                 case Token.GT:\n                 case Token.LT:\n                     Boolean compareResult \u003d compareAsNumbers(op, left, right);\n                     if (compareResult !\u003d null) {\n                         result \u003d compareResult;\n                     } else {\n                         return n;\n                     }\n                     break;\n                 default:\n                     return n;\n             }\n             break;\n         case Token.THIS:\n             if (right.getType() !\u003d Token.THIS) {\n                 return n;\n             }\n             switch(op) {\n                 case Token.SHEQ:\n                 case Token.EQ:\n                     result \u003d true;\n                     break;\n                 case Token.SHNE:\n                 case Token.NE:\n                     result \u003d false;\n                     break;\n                 default:\n                     return n;\n             }\n             break;\n         case Token.STRING:\n             if (undefinedRight) {\n                 result \u003d compareToUndefined(left, op);\n                 break;\n             }\n             if (nullRight \u0026\u0026 isEqualityOp(op)) {\n                 result \u003d compareToNull(left, op);\n                 break;\n             }\n             if (Token.STRING !\u003d right.getType()) {\n                 return n;\n             }\n             switch(op) {\n                 case Token.SHEQ:\n                 case Token.EQ:\n                     result \u003d left.getString().equals(right.getString());\n                     break;\n                 case Token.SHNE:\n                 case Token.NE:\n                     result \u003d !left.getString().equals(right.getString());\n                     break;\n                 default:\n                     return n;\n             }\n             break;\n         case Token.NUMBER:\n             if (undefinedRight) {\n                 result \u003d compareToUndefined(left, op);\n                 break;\n             }\n             if (nullRight \u0026\u0026 isEqualityOp(op)) {\n                 result \u003d compareToNull(left, op);\n                 break;\n             }\n             if (Token.NUMBER !\u003d right.getType()) {\n                 return n;\n             }\n             Boolean compareResult \u003d compareAsNumbers(op, left, right);\n             if (compareResult !\u003d null) {\n                 result \u003d compareResult;\n             } else {\n                 return null;\n             }\n             break;\n         case Token.NAME:\n             if (leftLiteral \u0026\u0026 undefinedRight) {\n                 result \u003d compareToUndefined(left, op);\n                 break;\n             }\n             if (rightLiteral) {\n                 boolean undefinedLeft \u003d (left.getString().equals(\"undefined\"));\n                 if (undefinedLeft) {\n                     result \u003d compareToUndefined(right, op);\n                     break;\n                 }\n                 if (leftLiteral \u0026\u0026 nullRight \u0026\u0026 isEqualityOp(op)) {\n                     result \u003d compareToNull(left, op);\n                     break;\n                 }\n             }\n             if (Token.NAME !\u003d right.getType()) {\n                 return n;\n             }\n             String ln \u003d left.getString();\n             String rn \u003d right.getString();\n             if (!ln.equals(rn)) {\n                 return n;\n             }\n             switch(op) {\n                 case Token.LT:\n                 case Token.GT:\n                     result \u003d false;\n                     break;\n                 default:\n                     return n;\n             }\n             break;\n         case Token.NEG:\n             if (leftLiteral) {\n                 if (undefinedRight) {\n                     result \u003d compareToUndefined(left, op);\n                     break;\n                 }\n                 if (nullRight \u0026\u0026 isEqualityOp(op)) {\n                     result \u003d compareToNull(left, op);\n                     break;\n                 }\n             }\n             return n;\n         case Token.ARRAYLIT:\n         case Token.OBJECTLIT:\n         case Token.REGEXP:\n         case Token.FUNCTION:\n             if (leftLiteral) {\n                 if (undefinedRight) {\n                     result \u003d compareToUndefined(left, op);\n                     break;\n                 }\n                 if (nullRight \u0026\u0026 isEqualityOp(op)) {\n                     result \u003d compareToNull(left, op);\n                     break;\n                 }\n             }\n             return n;\n         default:\n             return n;\n     }\n     Node newNode \u003d new Node(result ? Token.TRUE : Token.FALSE);\n     n.getParent().replaceChild(n, newNode);\n     reportCodeChange();\n     return newNode;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "789f923ebf37c6a357eeadf60985293fe65322dd": {
      "type": "Ybodychange",
      "commitMessage": "\nPeephole folding of literal comparisons to null.\n\nR\u003dacleung\nDELTA\u003d230  (213 added, 8 deleted, 9 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3457\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1507 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/12/11, 5:00 PM",
      "commitName": "789f923ebf37c6a357eeadf60985293fe65322dd",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "9/12/11, 11:54 AM",
      "commitNameOld": "1c4c4fcaa092b3c11428beb1880282ca24456778",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 30.21,
      "commitsBetweenForRepo": 70,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"fallthrough\")\nprivate Node tryFoldComparison(Node n, Node left, Node right) {\n    boolean leftLiteral \u003d NodeUtil.isLiteralValue(left, true);\n    boolean rightLiteral \u003d NodeUtil.isLiteralValue(right, true);\n    if (!leftLiteral || !rightLiteral) {\n        if (n.getType() !\u003d Token.GT \u0026\u0026 n.getType() !\u003d Token.LT) {\n            return n;\n        }\n    }\n    int op \u003d n.getType();\n    boolean result;\n    boolean undefinedRight \u003d NodeUtil.isUndefined(right) \u0026\u0026 rightLiteral;\n    boolean nullRight \u003d NodeUtil.isNull(right);\n    int lhType \u003d getNormalizedNodeType(left);\n    int rhType \u003d getNormalizedNodeType(right);\n    switch(lhType) {\n        case Token.VOID:\n            if (!leftLiteral) {\n                return n;\n            } else if (!rightLiteral) {\n                return n;\n            } else {\n                result \u003d compareToUndefined(right, op);\n            }\n            break;\n        case Token.NULL:\n            if (rightLiteral \u0026\u0026 isEqualityOp(op)) {\n                result \u003d compareToNull(right, op);\n                break;\n            }\n        case Token.TRUE:\n        case Token.FALSE:\n            if (undefinedRight) {\n                result \u003d compareToUndefined(left, op);\n                break;\n            }\n            if (rhType !\u003d Token.TRUE \u0026\u0026 rhType !\u003d Token.FALSE \u0026\u0026 rhType !\u003d Token.NULL) {\n                return n;\n            }\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    result \u003d lhType \u003d\u003d rhType;\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    result \u003d lhType !\u003d rhType;\n                    break;\n                case Token.GE:\n                case Token.LE:\n                case Token.GT:\n                case Token.LT:\n                    Boolean compareResult \u003d compareAsNumbers(op, left, right);\n                    if (compareResult !\u003d null) {\n                        result \u003d compareResult;\n                    } else {\n                        return n;\n                    }\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        case Token.THIS:\n            if (right.getType() !\u003d Token.THIS) {\n                return n;\n            }\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    result \u003d true;\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    result \u003d false;\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        case Token.STRING:\n            if (undefinedRight) {\n                result \u003d compareToUndefined(left, op);\n                break;\n            }\n            if (nullRight \u0026\u0026 isEqualityOp(op)) {\n                result \u003d compareToNull(left, op);\n                break;\n            }\n            if (Token.STRING !\u003d right.getType()) {\n                return n;\n            }\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    result \u003d left.getString().equals(right.getString());\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    result \u003d !left.getString().equals(right.getString());\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        case Token.NUMBER:\n            if (undefinedRight) {\n                result \u003d compareToUndefined(left, op);\n                break;\n            }\n            if (nullRight \u0026\u0026 isEqualityOp(op)) {\n                result \u003d compareToNull(left, op);\n                break;\n            }\n            if (Token.NUMBER !\u003d right.getType()) {\n                return n;\n            }\n            Boolean compareResult \u003d compareAsNumbers(op, left, right);\n            if (compareResult !\u003d null) {\n                result \u003d compareResult;\n            } else {\n                return null;\n            }\n            break;\n        case Token.NAME:\n            if (leftLiteral \u0026\u0026 undefinedRight) {\n                result \u003d compareToUndefined(left, op);\n                break;\n            }\n            if (rightLiteral) {\n                boolean undefinedLeft \u003d (left.getString().equals(\"undefined\"));\n                if (undefinedLeft) {\n                    result \u003d compareToUndefined(right, op);\n                    break;\n                }\n                if (leftLiteral \u0026\u0026 nullRight \u0026\u0026 isEqualityOp(op)) {\n                    result \u003d compareToNull(left, op);\n                    break;\n                }\n            }\n            if (Token.NAME !\u003d right.getType()) {\n                return n;\n            }\n            String ln \u003d left.getString();\n            String rn \u003d right.getString();\n            if (!ln.equals(rn)) {\n                return n;\n            }\n            switch(op) {\n                case Token.LT:\n                case Token.GT:\n                    result \u003d false;\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        case Token.NEG:\n            if (leftLiteral) {\n                if (undefinedRight) {\n                    result \u003d compareToUndefined(left, op);\n                    break;\n                }\n                if (nullRight \u0026\u0026 isEqualityOp(op)) {\n                    result \u003d compareToNull(left, op);\n                    break;\n                }\n            }\n            return n;\n        case Token.ARRAYLIT:\n        case Token.OBJECTLIT:\n        case Token.REGEXP:\n        case Token.FUNCTION:\n            if (leftLiteral) {\n                if (undefinedRight) {\n                    result \u003d compareToUndefined(left, op);\n                    break;\n                }\n                if (nullRight \u0026\u0026 isEqualityOp(op)) {\n                    result \u003d compareToNull(left, op);\n                    break;\n                }\n            }\n            return n;\n        default:\n            return n;\n    }\n    Node newNode \u003d new Node(result ? Token.TRUE : Token.FALSE);\n    n.getParent().replaceChild(n, newNode);\n    reportCodeChange();\n    return newNode;\n}",
      "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
      "functionStartLine": 882,
      "functionName": "tryFoldComparison",
      "functionAnnotation": "@SuppressWarnings(\"fallthrough\")",
      "functionDoc": "Try to fold comparison nodes, e.g \u003d\u003d\n",
      "diff": "@@ -1,147 +1,192 @@\n @SuppressWarnings(\"fallthrough\")\n private Node tryFoldComparison(Node n, Node left, Node right) {\n-    if (!NodeUtil.isLiteralValue(left, false) || !NodeUtil.isLiteralValue(right, false)) {\n+    boolean leftLiteral \u003d NodeUtil.isLiteralValue(left, true);\n+    boolean rightLiteral \u003d NodeUtil.isLiteralValue(right, true);\n+    if (!leftLiteral || !rightLiteral) {\n         if (n.getType() !\u003d Token.GT \u0026\u0026 n.getType() !\u003d Token.LT) {\n             return n;\n         }\n     }\n     int op \u003d n.getType();\n     boolean result;\n-    boolean rightLiteral \u003d NodeUtil.isLiteralValue(right, false);\n-    boolean undefinedRight \u003d ((Token.NAME \u003d\u003d right.getType() \u0026\u0026 right.getString().equals(\"undefined\")) || (Token.VOID \u003d\u003d right.getType() \u0026\u0026 NodeUtil.isLiteralValue(right.getFirstChild(), false)));\n+    boolean undefinedRight \u003d NodeUtil.isUndefined(right) \u0026\u0026 rightLiteral;\n+    boolean nullRight \u003d NodeUtil.isNull(right);\n     int lhType \u003d getNormalizedNodeType(left);\n     int rhType \u003d getNormalizedNodeType(right);\n     switch(lhType) {\n         case Token.VOID:\n-            if (!NodeUtil.isLiteralValue(left.getFirstChild(), false)) {\n+            if (!leftLiteral) {\n                 return n;\n             } else if (!rightLiteral) {\n                 return n;\n             } else {\n                 result \u003d compareToUndefined(right, op);\n             }\n             break;\n         case Token.NULL:\n+            if (rightLiteral \u0026\u0026 isEqualityOp(op)) {\n+                result \u003d compareToNull(right, op);\n+                break;\n+            }\n         case Token.TRUE:\n         case Token.FALSE:\n             if (undefinedRight) {\n                 result \u003d compareToUndefined(left, op);\n                 break;\n             }\n             if (rhType !\u003d Token.TRUE \u0026\u0026 rhType !\u003d Token.FALSE \u0026\u0026 rhType !\u003d Token.NULL) {\n                 return n;\n             }\n             switch(op) {\n                 case Token.SHEQ:\n                 case Token.EQ:\n                     result \u003d lhType \u003d\u003d rhType;\n                     break;\n                 case Token.SHNE:\n                 case Token.NE:\n                     result \u003d lhType !\u003d rhType;\n                     break;\n                 case Token.GE:\n                 case Token.LE:\n                 case Token.GT:\n                 case Token.LT:\n                     Boolean compareResult \u003d compareAsNumbers(op, left, right);\n                     if (compareResult !\u003d null) {\n                         result \u003d compareResult;\n                     } else {\n                         return n;\n                     }\n                     break;\n                 default:\n                     return n;\n             }\n             break;\n         case Token.THIS:\n             if (right.getType() !\u003d Token.THIS) {\n                 return n;\n             }\n             switch(op) {\n                 case Token.SHEQ:\n                 case Token.EQ:\n                     result \u003d true;\n                     break;\n                 case Token.SHNE:\n                 case Token.NE:\n                     result \u003d false;\n                     break;\n                 default:\n                     return n;\n             }\n             break;\n         case Token.STRING:\n             if (undefinedRight) {\n                 result \u003d compareToUndefined(left, op);\n                 break;\n             }\n+            if (nullRight \u0026\u0026 isEqualityOp(op)) {\n+                result \u003d compareToNull(left, op);\n+                break;\n+            }\n             if (Token.STRING !\u003d right.getType()) {\n                 return n;\n             }\n             switch(op) {\n                 case Token.SHEQ:\n                 case Token.EQ:\n                     result \u003d left.getString().equals(right.getString());\n                     break;\n                 case Token.SHNE:\n                 case Token.NE:\n                     result \u003d !left.getString().equals(right.getString());\n                     break;\n                 default:\n                     return n;\n             }\n             break;\n         case Token.NUMBER:\n             if (undefinedRight) {\n                 result \u003d compareToUndefined(left, op);\n                 break;\n             }\n+            if (nullRight \u0026\u0026 isEqualityOp(op)) {\n+                result \u003d compareToNull(left, op);\n+                break;\n+            }\n             if (Token.NUMBER !\u003d right.getType()) {\n                 return n;\n             }\n             Boolean compareResult \u003d compareAsNumbers(op, left, right);\n             if (compareResult !\u003d null) {\n                 result \u003d compareResult;\n             } else {\n                 return null;\n             }\n             break;\n         case Token.NAME:\n-            if (undefinedRight) {\n+            if (leftLiteral \u0026\u0026 undefinedRight) {\n                 result \u003d compareToUndefined(left, op);\n                 break;\n             }\n             if (rightLiteral) {\n                 boolean undefinedLeft \u003d (left.getString().equals(\"undefined\"));\n                 if (undefinedLeft) {\n                     result \u003d compareToUndefined(right, op);\n                     break;\n                 }\n+                if (leftLiteral \u0026\u0026 nullRight \u0026\u0026 isEqualityOp(op)) {\n+                    result \u003d compareToNull(left, op);\n+                    break;\n+                }\n             }\n             if (Token.NAME !\u003d right.getType()) {\n                 return n;\n             }\n             String ln \u003d left.getString();\n             String rn \u003d right.getString();\n             if (!ln.equals(rn)) {\n                 return n;\n             }\n             switch(op) {\n                 case Token.LT:\n                 case Token.GT:\n                     result \u003d false;\n                     break;\n                 default:\n                     return n;\n             }\n             break;\n+        case Token.NEG:\n+            if (leftLiteral) {\n+                if (undefinedRight) {\n+                    result \u003d compareToUndefined(left, op);\n+                    break;\n+                }\n+                if (nullRight \u0026\u0026 isEqualityOp(op)) {\n+                    result \u003d compareToNull(left, op);\n+                    break;\n+                }\n+            }\n+            return n;\n+        case Token.ARRAYLIT:\n+        case Token.OBJECTLIT:\n+        case Token.REGEXP:\n+        case Token.FUNCTION:\n+            if (leftLiteral) {\n+                if (undefinedRight) {\n+                    result \u003d compareToUndefined(left, op);\n+                    break;\n+                }\n+                if (nullRight \u0026\u0026 isEqualityOp(op)) {\n+                    result \u003d compareToNull(left, op);\n+                    break;\n+                }\n+            }\n+            return n;\n         default:\n             return n;\n     }\n     Node newNode \u003d new Node(result ? Token.TRUE : Token.FALSE);\n     n.getParent().replaceChild(n, newNode);\n     reportCodeChange();\n     return newNode;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "03fee32a06ccf8257b2da67b9034270be38805ae": {
      "type": "Ybodychange",
      "commitMessage": "\nFix more regressions caused by TRUE/FALSE denormalization.\nFixes issue 413\n\nR\u003dacleung\nDELTA\u003d55  (46 added, 1 deleted, 8 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1308\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@982 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/8/11, 12:27 PM",
      "commitName": "03fee32a06ccf8257b2da67b9034270be38805ae",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "4/4/11, 2:57 PM",
      "commitNameOld": "9b27f9c5576f0132875c45dbdef55d22f64d5dcb",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 3.9,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"fallthrough\")\nprivate Node tryFoldComparison(Node n, Node left, Node right) {\n    if (!NodeUtil.isLiteralValue(left, false) || !NodeUtil.isLiteralValue(right, false)) {\n        if (n.getType() !\u003d Token.GT \u0026\u0026 n.getType() !\u003d Token.LT) {\n            return n;\n        }\n    }\n    int op \u003d n.getType();\n    boolean result;\n    boolean rightLiteral \u003d NodeUtil.isLiteralValue(right, false);\n    boolean undefinedRight \u003d ((Token.NAME \u003d\u003d right.getType() \u0026\u0026 right.getString().equals(\"undefined\")) || (Token.VOID \u003d\u003d right.getType() \u0026\u0026 NodeUtil.isLiteralValue(right.getFirstChild(), false)));\n    int lhType \u003d getNormalizedNodeType(left);\n    int rhType \u003d getNormalizedNodeType(right);\n    switch(lhType) {\n        case Token.VOID:\n            if (!NodeUtil.isLiteralValue(left.getFirstChild(), false)) {\n                return n;\n            } else if (!rightLiteral) {\n                return n;\n            } else {\n                result \u003d compareToUndefined(right, op);\n            }\n            break;\n        case Token.NULL:\n        case Token.TRUE:\n        case Token.FALSE:\n            if (undefinedRight) {\n                result \u003d compareToUndefined(left, op);\n                break;\n            }\n            if (rhType !\u003d Token.TRUE \u0026\u0026 rhType !\u003d Token.FALSE \u0026\u0026 rhType !\u003d Token.NULL) {\n                return n;\n            }\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    result \u003d lhType \u003d\u003d rhType;\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    result \u003d lhType !\u003d rhType;\n                    break;\n                case Token.GE:\n                case Token.LE:\n                case Token.GT:\n                case Token.LT:\n                    Boolean compareResult \u003d compareAsNumbers(op, left, right);\n                    if (compareResult !\u003d null) {\n                        result \u003d compareResult;\n                    } else {\n                        return n;\n                    }\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        case Token.THIS:\n            if (right.getType() !\u003d Token.THIS) {\n                return n;\n            }\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    result \u003d true;\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    result \u003d false;\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        case Token.STRING:\n            if (undefinedRight) {\n                result \u003d compareToUndefined(left, op);\n                break;\n            }\n            if (Token.STRING !\u003d right.getType()) {\n                return n;\n            }\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    result \u003d left.getString().equals(right.getString());\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    result \u003d !left.getString().equals(right.getString());\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        case Token.NUMBER:\n            if (undefinedRight) {\n                result \u003d compareToUndefined(left, op);\n                break;\n            }\n            if (Token.NUMBER !\u003d right.getType()) {\n                return n;\n            }\n            Boolean compareResult \u003d compareAsNumbers(op, left, right);\n            if (compareResult !\u003d null) {\n                result \u003d compareResult;\n            } else {\n                return null;\n            }\n            break;\n        case Token.NAME:\n            if (undefinedRight) {\n                result \u003d compareToUndefined(left, op);\n                break;\n            }\n            if (rightLiteral) {\n                boolean undefinedLeft \u003d (left.getString().equals(\"undefined\"));\n                if (undefinedLeft) {\n                    result \u003d compareToUndefined(right, op);\n                    break;\n                }\n            }\n            if (Token.NAME !\u003d right.getType()) {\n                return n;\n            }\n            String ln \u003d left.getString();\n            String rn \u003d right.getString();\n            if (!ln.equals(rn)) {\n                return n;\n            }\n            switch(op) {\n                case Token.LT:\n                case Token.GT:\n                    result \u003d false;\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        default:\n            return n;\n    }\n    Node newNode \u003d new Node(result ? Token.TRUE : Token.FALSE);\n    n.getParent().replaceChild(n, newNode);\n    reportCodeChange();\n    return newNode;\n}",
      "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
      "functionStartLine": 888,
      "functionName": "tryFoldComparison",
      "functionAnnotation": "@SuppressWarnings(\"fallthrough\")",
      "functionDoc": "Try to fold comparison nodes, e.g \u003d\u003d\n",
      "diff": "@@ -1,146 +1,147 @@\n @SuppressWarnings(\"fallthrough\")\n private Node tryFoldComparison(Node n, Node left, Node right) {\n     if (!NodeUtil.isLiteralValue(left, false) || !NodeUtil.isLiteralValue(right, false)) {\n         if (n.getType() !\u003d Token.GT \u0026\u0026 n.getType() !\u003d Token.LT) {\n             return n;\n         }\n     }\n     int op \u003d n.getType();\n     boolean result;\n     boolean rightLiteral \u003d NodeUtil.isLiteralValue(right, false);\n     boolean undefinedRight \u003d ((Token.NAME \u003d\u003d right.getType() \u0026\u0026 right.getString().equals(\"undefined\")) || (Token.VOID \u003d\u003d right.getType() \u0026\u0026 NodeUtil.isLiteralValue(right.getFirstChild(), false)));\n-    switch(left.getType()) {\n+    int lhType \u003d getNormalizedNodeType(left);\n+    int rhType \u003d getNormalizedNodeType(right);\n+    switch(lhType) {\n         case Token.VOID:\n             if (!NodeUtil.isLiteralValue(left.getFirstChild(), false)) {\n                 return n;\n             } else if (!rightLiteral) {\n                 return n;\n             } else {\n                 result \u003d compareToUndefined(right, op);\n             }\n             break;\n         case Token.NULL:\n         case Token.TRUE:\n         case Token.FALSE:\n             if (undefinedRight) {\n                 result \u003d compareToUndefined(left, op);\n                 break;\n             }\n-            int rhType \u003d right.getType();\n             if (rhType !\u003d Token.TRUE \u0026\u0026 rhType !\u003d Token.FALSE \u0026\u0026 rhType !\u003d Token.NULL) {\n                 return n;\n             }\n             switch(op) {\n                 case Token.SHEQ:\n                 case Token.EQ:\n-                    result \u003d left.getType() \u003d\u003d right.getType();\n+                    result \u003d lhType \u003d\u003d rhType;\n                     break;\n                 case Token.SHNE:\n                 case Token.NE:\n-                    result \u003d left.getType() !\u003d right.getType();\n+                    result \u003d lhType !\u003d rhType;\n                     break;\n                 case Token.GE:\n                 case Token.LE:\n                 case Token.GT:\n                 case Token.LT:\n                     Boolean compareResult \u003d compareAsNumbers(op, left, right);\n                     if (compareResult !\u003d null) {\n                         result \u003d compareResult;\n                     } else {\n                         return n;\n                     }\n                     break;\n                 default:\n                     return n;\n             }\n             break;\n         case Token.THIS:\n             if (right.getType() !\u003d Token.THIS) {\n                 return n;\n             }\n             switch(op) {\n                 case Token.SHEQ:\n                 case Token.EQ:\n                     result \u003d true;\n                     break;\n                 case Token.SHNE:\n                 case Token.NE:\n                     result \u003d false;\n                     break;\n                 default:\n                     return n;\n             }\n             break;\n         case Token.STRING:\n             if (undefinedRight) {\n                 result \u003d compareToUndefined(left, op);\n                 break;\n             }\n             if (Token.STRING !\u003d right.getType()) {\n                 return n;\n             }\n             switch(op) {\n                 case Token.SHEQ:\n                 case Token.EQ:\n                     result \u003d left.getString().equals(right.getString());\n                     break;\n                 case Token.SHNE:\n                 case Token.NE:\n                     result \u003d !left.getString().equals(right.getString());\n                     break;\n                 default:\n                     return n;\n             }\n             break;\n         case Token.NUMBER:\n             if (undefinedRight) {\n                 result \u003d compareToUndefined(left, op);\n                 break;\n             }\n             if (Token.NUMBER !\u003d right.getType()) {\n                 return n;\n             }\n             Boolean compareResult \u003d compareAsNumbers(op, left, right);\n             if (compareResult !\u003d null) {\n                 result \u003d compareResult;\n             } else {\n                 return null;\n             }\n             break;\n         case Token.NAME:\n             if (undefinedRight) {\n                 result \u003d compareToUndefined(left, op);\n                 break;\n             }\n             if (rightLiteral) {\n                 boolean undefinedLeft \u003d (left.getString().equals(\"undefined\"));\n                 if (undefinedLeft) {\n                     result \u003d compareToUndefined(right, op);\n                     break;\n                 }\n             }\n             if (Token.NAME !\u003d right.getType()) {\n                 return n;\n             }\n             String ln \u003d left.getString();\n             String rn \u003d right.getString();\n             if (!ln.equals(rn)) {\n                 return n;\n             }\n             switch(op) {\n                 case Token.LT:\n                 case Token.GT:\n                     result \u003d false;\n                     break;\n                 default:\n                     return n;\n             }\n             break;\n         default:\n             return n;\n     }\n     Node newNode \u003d new Node(result ? Token.TRUE : Token.FALSE);\n     n.getParent().replaceChild(n, newNode);\n     reportCodeChange();\n     return newNode;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "510ff24ac51a8c73ff3f2401379654c37a00546b": {
      "type": "Ybodychange",
      "commitMessage": "\nFold a few more comparison cases.\n\nR\u003dnicksantos\nDELTA\u003d215  (169 added, 20 deleted, 26 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d98\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@610 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/8/10, 2:31 PM",
      "commitName": "510ff24ac51a8c73ff3f2401379654c37a00546b",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/30/10, 12:10 PM",
      "commitNameOld": "eaaa156632369f88e9667f55c7761cef8367cf57",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 8.1,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"fallthrough\")\nprivate Node tryFoldComparison(Node n, Node left, Node right) {\n    if (!NodeUtil.isLiteralValue(left, false) || !NodeUtil.isLiteralValue(right, false)) {\n        if (n.getType() !\u003d Token.GT \u0026\u0026 n.getType() !\u003d Token.LT) {\n            return n;\n        }\n    }\n    int op \u003d n.getType();\n    boolean result;\n    boolean rightLiteral \u003d NodeUtil.isLiteralValue(right, false);\n    boolean undefinedRight \u003d ((Token.NAME \u003d\u003d right.getType() \u0026\u0026 right.getString().equals(\"undefined\")) || (Token.VOID \u003d\u003d right.getType() \u0026\u0026 NodeUtil.isLiteralValue(right.getFirstChild(), false)));\n    switch(left.getType()) {\n        case Token.VOID:\n            if (!NodeUtil.isLiteralValue(left.getFirstChild(), false)) {\n                return n;\n            } else if (!rightLiteral) {\n                return n;\n            } else {\n                result \u003d compareToUndefined(right, op);\n            }\n            break;\n        case Token.NULL:\n        case Token.TRUE:\n        case Token.FALSE:\n            if (undefinedRight) {\n                result \u003d compareToUndefined(left, op);\n                break;\n            }\n            int rhType \u003d right.getType();\n            if (rhType !\u003d Token.TRUE \u0026\u0026 rhType !\u003d Token.FALSE \u0026\u0026 rhType !\u003d Token.NULL) {\n                return n;\n            }\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    result \u003d left.getType() \u003d\u003d right.getType();\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    result \u003d left.getType() !\u003d right.getType();\n                    break;\n                case Token.GE:\n                case Token.LE:\n                case Token.GT:\n                case Token.LT:\n                    Boolean compareResult \u003d compareAsNumbers(op, left, right);\n                    if (compareResult !\u003d null) {\n                        result \u003d compareResult;\n                    } else {\n                        return n;\n                    }\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        case Token.THIS:\n            if (right.getType() !\u003d Token.THIS) {\n                return n;\n            }\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    result \u003d true;\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    result \u003d false;\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        case Token.STRING:\n            if (undefinedRight) {\n                result \u003d compareToUndefined(left, op);\n                break;\n            }\n            if (Token.STRING !\u003d right.getType()) {\n                return n;\n            }\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    result \u003d left.getString().equals(right.getString());\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    result \u003d !left.getString().equals(right.getString());\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        case Token.NUMBER:\n            if (undefinedRight) {\n                result \u003d compareToUndefined(left, op);\n                break;\n            }\n            if (Token.NUMBER !\u003d right.getType()) {\n                return n;\n            }\n            Boolean compareResult \u003d compareAsNumbers(op, left, right);\n            if (compareResult !\u003d null) {\n                result \u003d compareResult;\n            } else {\n                return null;\n            }\n            break;\n        case Token.NAME:\n            if (undefinedRight) {\n                result \u003d compareToUndefined(left, op);\n                break;\n            }\n            if (rightLiteral) {\n                boolean undefinedLeft \u003d (left.getString().equals(\"undefined\"));\n                if (undefinedLeft) {\n                    result \u003d compareToUndefined(right, op);\n                    break;\n                }\n            }\n            if (Token.NAME !\u003d right.getType()) {\n                return n;\n            }\n            String ln \u003d left.getString();\n            String rn \u003d right.getString();\n            if (!ln.equals(rn)) {\n                return n;\n            }\n            switch(op) {\n                case Token.LT:\n                case Token.GT:\n                    result \u003d false;\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        default:\n            return n;\n    }\n    Node newNode \u003d new Node(result ? Token.TRUE : Token.FALSE);\n    n.getParent().replaceChild(n, newNode);\n    reportCodeChange();\n    return newNode;\n}",
      "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
      "functionStartLine": 740,
      "functionName": "tryFoldComparison",
      "functionAnnotation": "@SuppressWarnings(\"fallthrough\")",
      "functionDoc": "Try to fold comparison nodes, e.g \u003d\u003d\n",
      "diff": "@@ -1,143 +1,146 @@\n @SuppressWarnings(\"fallthrough\")\n private Node tryFoldComparison(Node n, Node left, Node right) {\n     if (!NodeUtil.isLiteralValue(left, false) || !NodeUtil.isLiteralValue(right, false)) {\n         if (n.getType() !\u003d Token.GT \u0026\u0026 n.getType() !\u003d Token.LT) {\n             return n;\n         }\n     }\n     int op \u003d n.getType();\n     boolean result;\n     boolean rightLiteral \u003d NodeUtil.isLiteralValue(right, false);\n     boolean undefinedRight \u003d ((Token.NAME \u003d\u003d right.getType() \u0026\u0026 right.getString().equals(\"undefined\")) || (Token.VOID \u003d\u003d right.getType() \u0026\u0026 NodeUtil.isLiteralValue(right.getFirstChild(), false)));\n     switch(left.getType()) {\n         case Token.VOID:\n             if (!NodeUtil.isLiteralValue(left.getFirstChild(), false)) {\n                 return n;\n             } else if (!rightLiteral) {\n                 return n;\n             } else {\n                 result \u003d compareToUndefined(right, op);\n             }\n             break;\n         case Token.NULL:\n-            if (undefinedRight) {\n-                result \u003d compareToUndefined(left, op);\n-                break;\n-            }\n         case Token.TRUE:\n         case Token.FALSE:\n             if (undefinedRight) {\n                 result \u003d compareToUndefined(left, op);\n                 break;\n             }\n-        case Token.THIS:\n-            int tt \u003d right.getType();\n-            if (tt !\u003d Token.THIS \u0026\u0026 tt !\u003d Token.TRUE \u0026\u0026 tt !\u003d Token.FALSE \u0026\u0026 tt !\u003d Token.NULL) {\n+            int rhType \u003d right.getType();\n+            if (rhType !\u003d Token.TRUE \u0026\u0026 rhType !\u003d Token.FALSE \u0026\u0026 rhType !\u003d Token.NULL) {\n                 return n;\n             }\n             switch(op) {\n                 case Token.SHEQ:\n                 case Token.EQ:\n                     result \u003d left.getType() \u003d\u003d right.getType();\n                     break;\n                 case Token.SHNE:\n                 case Token.NE:\n                     result \u003d left.getType() !\u003d right.getType();\n                     break;\n+                case Token.GE:\n+                case Token.LE:\n+                case Token.GT:\n+                case Token.LT:\n+                    Boolean compareResult \u003d compareAsNumbers(op, left, right);\n+                    if (compareResult !\u003d null) {\n+                        result \u003d compareResult;\n+                    } else {\n+                        return n;\n+                    }\n+                    break;\n+                default:\n+                    return n;\n+            }\n+            break;\n+        case Token.THIS:\n+            if (right.getType() !\u003d Token.THIS) {\n+                return n;\n+            }\n+            switch(op) {\n+                case Token.SHEQ:\n+                case Token.EQ:\n+                    result \u003d true;\n+                    break;\n+                case Token.SHNE:\n+                case Token.NE:\n+                    result \u003d false;\n+                    break;\n                 default:\n                     return n;\n             }\n             break;\n         case Token.STRING:\n             if (undefinedRight) {\n                 result \u003d compareToUndefined(left, op);\n                 break;\n             }\n             if (Token.STRING !\u003d right.getType()) {\n                 return n;\n             }\n             switch(op) {\n                 case Token.SHEQ:\n                 case Token.EQ:\n                     result \u003d left.getString().equals(right.getString());\n                     break;\n                 case Token.SHNE:\n                 case Token.NE:\n                     result \u003d !left.getString().equals(right.getString());\n                     break;\n                 default:\n                     return n;\n             }\n             break;\n         case Token.NUMBER:\n             if (undefinedRight) {\n                 result \u003d compareToUndefined(left, op);\n                 break;\n             }\n             if (Token.NUMBER !\u003d right.getType()) {\n                 return n;\n             }\n-            double lv \u003d left.getDouble();\n-            double rv \u003d right.getDouble();\n-            switch(op) {\n-                case Token.SHEQ:\n-                case Token.EQ:\n-                    result \u003d lv \u003d\u003d rv;\n-                    break;\n-                case Token.SHNE:\n-                case Token.NE:\n-                    result \u003d lv !\u003d rv;\n-                    break;\n-                case Token.LE:\n-                    result \u003d lv \u003c\u003d rv;\n-                    break;\n-                case Token.LT:\n-                    result \u003d lv \u003c rv;\n-                    break;\n-                case Token.GE:\n-                    result \u003d lv \u003e\u003d rv;\n-                    break;\n-                case Token.GT:\n-                    result \u003d lv \u003e rv;\n-                    break;\n-                default:\n-                    return n;\n+            Boolean compareResult \u003d compareAsNumbers(op, left, right);\n+            if (compareResult !\u003d null) {\n+                result \u003d compareResult;\n+            } else {\n+                return null;\n             }\n             break;\n         case Token.NAME:\n             if (undefinedRight) {\n                 result \u003d compareToUndefined(left, op);\n                 break;\n             }\n             if (rightLiteral) {\n                 boolean undefinedLeft \u003d (left.getString().equals(\"undefined\"));\n                 if (undefinedLeft) {\n                     result \u003d compareToUndefined(right, op);\n                     break;\n                 }\n             }\n             if (Token.NAME !\u003d right.getType()) {\n                 return n;\n             }\n             String ln \u003d left.getString();\n             String rn \u003d right.getString();\n             if (!ln.equals(rn)) {\n                 return n;\n             }\n             switch(op) {\n                 case Token.LT:\n                 case Token.GT:\n                     result \u003d false;\n                     break;\n                 default:\n                     return n;\n             }\n             break;\n         default:\n             return n;\n     }\n     Node newNode \u003d new Node(result ? Token.TRUE : Token.FALSE);\n     n.getParent().replaceChild(n, newNode);\n     reportCodeChange();\n     return newNode;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "eaaa156632369f88e9667f55c7761cef8367cf57": {
      "type": "Ybodychange",
      "commitMessage": "\nCreate some exhaustive tests for binary ops\n\nR\u003djohnlenz\nDELTA\u003d181  (180 added, 0 deleted, 1 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d27\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@577 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/30/10, 12:10 PM",
      "commitName": "eaaa156632369f88e9667f55c7761cef8367cf57",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "11/30/10, 9:34 AM",
      "commitNameOld": "7a1ffc0ee87ec8ec2168b134dd644cd73c399584",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 0.11,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"fallthrough\")\nprivate Node tryFoldComparison(Node n, Node left, Node right) {\n    if (!NodeUtil.isLiteralValue(left, false) || !NodeUtil.isLiteralValue(right, false)) {\n        if (n.getType() !\u003d Token.GT \u0026\u0026 n.getType() !\u003d Token.LT) {\n            return n;\n        }\n    }\n    int op \u003d n.getType();\n    boolean result;\n    boolean rightLiteral \u003d NodeUtil.isLiteralValue(right, false);\n    boolean undefinedRight \u003d ((Token.NAME \u003d\u003d right.getType() \u0026\u0026 right.getString().equals(\"undefined\")) || (Token.VOID \u003d\u003d right.getType() \u0026\u0026 NodeUtil.isLiteralValue(right.getFirstChild(), false)));\n    switch(left.getType()) {\n        case Token.VOID:\n            if (!NodeUtil.isLiteralValue(left.getFirstChild(), false)) {\n                return n;\n            } else if (!rightLiteral) {\n                return n;\n            } else {\n                result \u003d compareToUndefined(right, op);\n            }\n            break;\n        case Token.NULL:\n            if (undefinedRight) {\n                result \u003d compareToUndefined(left, op);\n                break;\n            }\n        case Token.TRUE:\n        case Token.FALSE:\n            if (undefinedRight) {\n                result \u003d compareToUndefined(left, op);\n                break;\n            }\n        case Token.THIS:\n            int tt \u003d right.getType();\n            if (tt !\u003d Token.THIS \u0026\u0026 tt !\u003d Token.TRUE \u0026\u0026 tt !\u003d Token.FALSE \u0026\u0026 tt !\u003d Token.NULL) {\n                return n;\n            }\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    result \u003d left.getType() \u003d\u003d right.getType();\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    result \u003d left.getType() !\u003d right.getType();\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        case Token.STRING:\n            if (undefinedRight) {\n                result \u003d compareToUndefined(left, op);\n                break;\n            }\n            if (Token.STRING !\u003d right.getType()) {\n                return n;\n            }\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    result \u003d left.getString().equals(right.getString());\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    result \u003d !left.getString().equals(right.getString());\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        case Token.NUMBER:\n            if (undefinedRight) {\n                result \u003d compareToUndefined(left, op);\n                break;\n            }\n            if (Token.NUMBER !\u003d right.getType()) {\n                return n;\n            }\n            double lv \u003d left.getDouble();\n            double rv \u003d right.getDouble();\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    result \u003d lv \u003d\u003d rv;\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    result \u003d lv !\u003d rv;\n                    break;\n                case Token.LE:\n                    result \u003d lv \u003c\u003d rv;\n                    break;\n                case Token.LT:\n                    result \u003d lv \u003c rv;\n                    break;\n                case Token.GE:\n                    result \u003d lv \u003e\u003d rv;\n                    break;\n                case Token.GT:\n                    result \u003d lv \u003e rv;\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        case Token.NAME:\n            if (undefinedRight) {\n                result \u003d compareToUndefined(left, op);\n                break;\n            }\n            if (rightLiteral) {\n                boolean undefinedLeft \u003d (left.getString().equals(\"undefined\"));\n                if (undefinedLeft) {\n                    result \u003d compareToUndefined(right, op);\n                    break;\n                }\n            }\n            if (Token.NAME !\u003d right.getType()) {\n                return n;\n            }\n            String ln \u003d left.getString();\n            String rn \u003d right.getString();\n            if (!ln.equals(rn)) {\n                return n;\n            }\n            switch(op) {\n                case Token.LT:\n                case Token.GT:\n                    result \u003d false;\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        default:\n            return n;\n    }\n    Node newNode \u003d new Node(result ? Token.TRUE : Token.FALSE);\n    n.getParent().replaceChild(n, newNode);\n    reportCodeChange();\n    return newNode;\n}",
      "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
      "functionStartLine": 720,
      "functionName": "tryFoldComparison",
      "functionAnnotation": "@SuppressWarnings(\"fallthrough\")",
      "functionDoc": "Try to fold comparison nodes, e.g \u003d\u003d\n",
      "diff": "@@ -1,139 +1,143 @@\n @SuppressWarnings(\"fallthrough\")\n private Node tryFoldComparison(Node n, Node left, Node right) {\n     if (!NodeUtil.isLiteralValue(left, false) || !NodeUtil.isLiteralValue(right, false)) {\n         if (n.getType() !\u003d Token.GT \u0026\u0026 n.getType() !\u003d Token.LT) {\n             return n;\n         }\n     }\n     int op \u003d n.getType();\n     boolean result;\n     boolean rightLiteral \u003d NodeUtil.isLiteralValue(right, false);\n     boolean undefinedRight \u003d ((Token.NAME \u003d\u003d right.getType() \u0026\u0026 right.getString().equals(\"undefined\")) || (Token.VOID \u003d\u003d right.getType() \u0026\u0026 NodeUtil.isLiteralValue(right.getFirstChild(), false)));\n     switch(left.getType()) {\n         case Token.VOID:\n             if (!NodeUtil.isLiteralValue(left.getFirstChild(), false)) {\n                 return n;\n             } else if (!rightLiteral) {\n                 return n;\n             } else {\n                 result \u003d compareToUndefined(right, op);\n             }\n             break;\n         case Token.NULL:\n             if (undefinedRight) {\n                 result \u003d compareToUndefined(left, op);\n                 break;\n             }\n         case Token.TRUE:\n         case Token.FALSE:\n             if (undefinedRight) {\n                 result \u003d compareToUndefined(left, op);\n                 break;\n             }\n         case Token.THIS:\n             int tt \u003d right.getType();\n             if (tt !\u003d Token.THIS \u0026\u0026 tt !\u003d Token.TRUE \u0026\u0026 tt !\u003d Token.FALSE \u0026\u0026 tt !\u003d Token.NULL) {\n                 return n;\n             }\n             switch(op) {\n                 case Token.SHEQ:\n                 case Token.EQ:\n                     result \u003d left.getType() \u003d\u003d right.getType();\n                     break;\n                 case Token.SHNE:\n                 case Token.NE:\n                     result \u003d left.getType() !\u003d right.getType();\n                     break;\n                 default:\n                     return n;\n             }\n             break;\n         case Token.STRING:\n             if (undefinedRight) {\n                 result \u003d compareToUndefined(left, op);\n                 break;\n             }\n             if (Token.STRING !\u003d right.getType()) {\n                 return n;\n             }\n             switch(op) {\n                 case Token.SHEQ:\n                 case Token.EQ:\n                     result \u003d left.getString().equals(right.getString());\n                     break;\n                 case Token.SHNE:\n                 case Token.NE:\n                     result \u003d !left.getString().equals(right.getString());\n                     break;\n                 default:\n                     return n;\n             }\n             break;\n         case Token.NUMBER:\n             if (undefinedRight) {\n                 result \u003d compareToUndefined(left, op);\n                 break;\n             }\n             if (Token.NUMBER !\u003d right.getType()) {\n                 return n;\n             }\n             double lv \u003d left.getDouble();\n             double rv \u003d right.getDouble();\n             switch(op) {\n                 case Token.SHEQ:\n                 case Token.EQ:\n                     result \u003d lv \u003d\u003d rv;\n                     break;\n                 case Token.SHNE:\n                 case Token.NE:\n                     result \u003d lv !\u003d rv;\n                     break;\n                 case Token.LE:\n                     result \u003d lv \u003c\u003d rv;\n                     break;\n                 case Token.LT:\n                     result \u003d lv \u003c rv;\n                     break;\n                 case Token.GE:\n                     result \u003d lv \u003e\u003d rv;\n                     break;\n                 case Token.GT:\n                     result \u003d lv \u003e rv;\n                     break;\n                 default:\n                     return n;\n             }\n             break;\n         case Token.NAME:\n+            if (undefinedRight) {\n+                result \u003d compareToUndefined(left, op);\n+                break;\n+            }\n             if (rightLiteral) {\n                 boolean undefinedLeft \u003d (left.getString().equals(\"undefined\"));\n                 if (undefinedLeft) {\n                     result \u003d compareToUndefined(right, op);\n                     break;\n                 }\n             }\n             if (Token.NAME !\u003d right.getType()) {\n                 return n;\n             }\n             String ln \u003d left.getString();\n             String rn \u003d right.getString();\n             if (!ln.equals(rn)) {\n                 return n;\n             }\n             switch(op) {\n                 case Token.LT:\n                 case Token.GT:\n                     result \u003d false;\n                     break;\n                 default:\n                     return n;\n             }\n             break;\n         default:\n             return n;\n     }\n     Node newNode \u003d new Node(result ? Token.TRUE : Token.FALSE);\n     n.getParent().replaceChild(n, newNode);\n     reportCodeChange();\n     return newNode;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9548f8637872d775c168e91d63a657d5694035e1": {
      "type": "Ybodychange",
      "commitMessage": "\nFix folding of String-to-undefined comparisons\n\nR\u003dacleung\nDELTA\u003d125  (69 added, 49 deleted, 7 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d18\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@572 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/29/10, 5:14 PM",
      "commitName": "9548f8637872d775c168e91d63a657d5694035e1",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/11/10, 9:42 PM",
      "commitNameOld": "df223efd38c514d584f00d076488ab9a02011492",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 17.81,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"fallthrough\")\nprivate Node tryFoldComparison(Node n, Node left, Node right) {\n    if (!NodeUtil.isLiteralValue(left, false) || !NodeUtil.isLiteralValue(right, false)) {\n        if (n.getType() !\u003d Token.GT \u0026\u0026 n.getType() !\u003d Token.LT) {\n            return n;\n        }\n    }\n    int op \u003d n.getType();\n    boolean result;\n    boolean rightLiteral \u003d NodeUtil.isLiteralValue(right, false);\n    boolean undefinedRight \u003d ((Token.NAME \u003d\u003d right.getType() \u0026\u0026 right.getString().equals(\"undefined\")) || (Token.VOID \u003d\u003d right.getType() \u0026\u0026 NodeUtil.isLiteralValue(right.getFirstChild(), false)));\n    switch(left.getType()) {\n        case Token.VOID:\n            if (!NodeUtil.isLiteralValue(left.getFirstChild(), false)) {\n                return n;\n            } else if (!rightLiteral) {\n                return n;\n            } else {\n                result \u003d compareToUndefined(right, op);\n            }\n            break;\n        case Token.NULL:\n            if (undefinedRight) {\n                result \u003d compareToUndefined(left, op);\n                break;\n            }\n        case Token.TRUE:\n        case Token.FALSE:\n            if (undefinedRight) {\n                result \u003d compareToUndefined(left, op);\n                break;\n            }\n        case Token.THIS:\n            int tt \u003d right.getType();\n            if (tt !\u003d Token.THIS \u0026\u0026 tt !\u003d Token.TRUE \u0026\u0026 tt !\u003d Token.FALSE \u0026\u0026 tt !\u003d Token.NULL) {\n                return n;\n            }\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    result \u003d left.getType() \u003d\u003d right.getType();\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    result \u003d left.getType() !\u003d right.getType();\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        case Token.STRING:\n            if (undefinedRight) {\n                result \u003d compareToUndefined(left, op);\n                break;\n            }\n            if (Token.STRING !\u003d right.getType()) {\n                return n;\n            }\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    result \u003d left.getString().equals(right.getString());\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    result \u003d !left.getString().equals(right.getString());\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        case Token.NUMBER:\n            if (undefinedRight) {\n                result \u003d compareToUndefined(left, op);\n                break;\n            }\n            if (Token.NUMBER !\u003d right.getType()) {\n                return n;\n            }\n            double lv \u003d left.getDouble();\n            double rv \u003d right.getDouble();\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    result \u003d lv \u003d\u003d rv;\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    result \u003d lv !\u003d rv;\n                    break;\n                case Token.LE:\n                    result \u003d lv \u003c\u003d rv;\n                    break;\n                case Token.LT:\n                    result \u003d lv \u003c rv;\n                    break;\n                case Token.GE:\n                    result \u003d lv \u003e\u003d rv;\n                    break;\n                case Token.GT:\n                    result \u003d lv \u003e rv;\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        case Token.NAME:\n            if (rightLiteral) {\n                boolean undefinedLeft \u003d (left.getString().equals(\"undefined\"));\n                if (undefinedLeft) {\n                    result \u003d compareToUndefined(right, op);\n                    break;\n                }\n            }\n            if (Token.NAME !\u003d right.getType()) {\n                return n;\n            }\n            String ln \u003d left.getString();\n            String rn \u003d right.getString();\n            if (!ln.equals(rn)) {\n                return n;\n            }\n            switch(op) {\n                case Token.LT:\n                case Token.GT:\n                    result \u003d false;\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        default:\n            return n;\n    }\n    Node newNode \u003d new Node(result ? Token.TRUE : Token.FALSE);\n    n.getParent().replaceChild(n, newNode);\n    reportCodeChange();\n    return newNode;\n}",
      "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
      "functionStartLine": 720,
      "functionName": "tryFoldComparison",
      "functionAnnotation": "@SuppressWarnings(\"fallthrough\")",
      "functionDoc": "Try to fold comparison nodes, e.g \u003d\u003d\n",
      "diff": "@@ -1,185 +1,139 @@\n @SuppressWarnings(\"fallthrough\")\n private Node tryFoldComparison(Node n, Node left, Node right) {\n     if (!NodeUtil.isLiteralValue(left, false) || !NodeUtil.isLiteralValue(right, false)) {\n         if (n.getType() !\u003d Token.GT \u0026\u0026 n.getType() !\u003d Token.LT) {\n             return n;\n         }\n     }\n     int op \u003d n.getType();\n     boolean result;\n     boolean rightLiteral \u003d NodeUtil.isLiteralValue(right, false);\n     boolean undefinedRight \u003d ((Token.NAME \u003d\u003d right.getType() \u0026\u0026 right.getString().equals(\"undefined\")) || (Token.VOID \u003d\u003d right.getType() \u0026\u0026 NodeUtil.isLiteralValue(right.getFirstChild(), false)));\n     switch(left.getType()) {\n         case Token.VOID:\n             if (!NodeUtil.isLiteralValue(left.getFirstChild(), false)) {\n                 return n;\n             } else if (!rightLiteral) {\n                 return n;\n             } else {\n-                boolean nullRight \u003d (Token.NULL \u003d\u003d right.getType());\n-                boolean equivalent \u003d undefinedRight || nullRight;\n-                switch(op) {\n-                    case Token.EQ:\n-                        result \u003d equivalent;\n-                        break;\n-                    case Token.NE:\n-                        result \u003d !equivalent;\n-                        break;\n-                    case Token.SHEQ:\n-                        result \u003d undefinedRight;\n-                        break;\n-                    case Token.SHNE:\n-                        result \u003d !undefinedRight;\n-                        break;\n-                    case Token.LT:\n-                    case Token.GT:\n-                    case Token.LE:\n-                    case Token.GE:\n-                        result \u003d false;\n-                        break;\n-                    default:\n-                        return n;\n-                }\n+                result \u003d compareToUndefined(right, op);\n             }\n             break;\n         case Token.NULL:\n             if (undefinedRight) {\n-                result \u003d (op \u003d\u003d Token.EQ);\n+                result \u003d compareToUndefined(left, op);\n                 break;\n             }\n         case Token.TRUE:\n         case Token.FALSE:\n             if (undefinedRight) {\n-                result \u003d false;\n+                result \u003d compareToUndefined(left, op);\n                 break;\n             }\n         case Token.THIS:\n             int tt \u003d right.getType();\n             if (tt !\u003d Token.THIS \u0026\u0026 tt !\u003d Token.TRUE \u0026\u0026 tt !\u003d Token.FALSE \u0026\u0026 tt !\u003d Token.NULL) {\n                 return n;\n             }\n             switch(op) {\n                 case Token.SHEQ:\n                 case Token.EQ:\n                     result \u003d left.getType() \u003d\u003d right.getType();\n                     break;\n                 case Token.SHNE:\n                 case Token.NE:\n                     result \u003d left.getType() !\u003d right.getType();\n                     break;\n                 default:\n                     return n;\n             }\n             break;\n         case Token.STRING:\n             if (undefinedRight) {\n-                result \u003d false;\n+                result \u003d compareToUndefined(left, op);\n                 break;\n             }\n             if (Token.STRING !\u003d right.getType()) {\n                 return n;\n             }\n             switch(op) {\n                 case Token.SHEQ:\n                 case Token.EQ:\n                     result \u003d left.getString().equals(right.getString());\n                     break;\n                 case Token.SHNE:\n                 case Token.NE:\n                     result \u003d !left.getString().equals(right.getString());\n                     break;\n                 default:\n                     return n;\n             }\n             break;\n         case Token.NUMBER:\n             if (undefinedRight) {\n-                result \u003d false;\n+                result \u003d compareToUndefined(left, op);\n                 break;\n             }\n             if (Token.NUMBER !\u003d right.getType()) {\n                 return n;\n             }\n             double lv \u003d left.getDouble();\n             double rv \u003d right.getDouble();\n             switch(op) {\n                 case Token.SHEQ:\n                 case Token.EQ:\n                     result \u003d lv \u003d\u003d rv;\n                     break;\n                 case Token.SHNE:\n                 case Token.NE:\n                     result \u003d lv !\u003d rv;\n                     break;\n                 case Token.LE:\n                     result \u003d lv \u003c\u003d rv;\n                     break;\n                 case Token.LT:\n                     result \u003d lv \u003c rv;\n                     break;\n                 case Token.GE:\n                     result \u003d lv \u003e\u003d rv;\n                     break;\n                 case Token.GT:\n                     result \u003d lv \u003e rv;\n                     break;\n                 default:\n                     return n;\n             }\n             break;\n         case Token.NAME:\n             if (rightLiteral) {\n                 boolean undefinedLeft \u003d (left.getString().equals(\"undefined\"));\n                 if (undefinedLeft) {\n-                    boolean nullRight \u003d (Token.NULL \u003d\u003d right.getType());\n-                    boolean equivalent \u003d undefinedRight || nullRight;\n-                    switch(op) {\n-                        case Token.EQ:\n-                            result \u003d equivalent;\n-                            break;\n-                        case Token.NE:\n-                            result \u003d !equivalent;\n-                            break;\n-                        case Token.SHEQ:\n-                            result \u003d undefinedRight;\n-                            break;\n-                        case Token.SHNE:\n-                            result \u003d !undefinedRight;\n-                            break;\n-                        case Token.LT:\n-                        case Token.GT:\n-                        case Token.LE:\n-                        case Token.GE:\n-                            result \u003d false;\n-                            break;\n-                        default:\n-                            return n;\n-                    }\n+                    result \u003d compareToUndefined(right, op);\n                     break;\n                 }\n             }\n             if (Token.NAME !\u003d right.getType()) {\n                 return n;\n             }\n             String ln \u003d left.getString();\n             String rn \u003d right.getString();\n             if (!ln.equals(rn)) {\n                 return n;\n             }\n             switch(op) {\n                 case Token.LT:\n                 case Token.GT:\n                     result \u003d false;\n                     break;\n                 default:\n                     return n;\n             }\n             break;\n         default:\n             return n;\n     }\n     Node newNode \u003d new Node(result ? Token.TRUE : Token.FALSE);\n     n.getParent().replaceChild(n, newNode);\n     reportCodeChange();\n     return newNode;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f0362b1ab1ae1339e017b1d04f016980e3fa6cb6": {
      "type": "Ybodychange",
      "commitMessage": "\nfix a bug where NodeUtil was reporting function literals\nas immutable. functions are mutable.\nMake isLiteralValue a bit more flexible, so that it can\nidentify function literals.\ndo some additional folding on function literals.\n\nR\u003dacleung\nDELTA\u003d68  (35 added, 1 deleted, 32 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d64001\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@308 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/23/10, 2:49 PM",
      "commitName": "f0362b1ab1ae1339e017b1d04f016980e3fa6cb6",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "7/19/10, 4:41 PM",
      "commitNameOld": "ee749e286b477f8d6f53ff5960a38453baf50f31",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 3.92,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"fallthrough\")\nprivate Node tryFoldComparison(Node n, Node left, Node right) {\n    if (!NodeUtil.isLiteralValue(left, false) || !NodeUtil.isLiteralValue(right, false)) {\n        if (n.getType() !\u003d Token.GT \u0026\u0026 n.getType() !\u003d Token.LT) {\n            return n;\n        }\n    }\n    int op \u003d n.getType();\n    boolean result;\n    boolean rightLiteral \u003d NodeUtil.isLiteralValue(right, false);\n    boolean undefinedRight \u003d ((Token.NAME \u003d\u003d right.getType() \u0026\u0026 right.getString().equals(\"undefined\")) || (Token.VOID \u003d\u003d right.getType() \u0026\u0026 NodeUtil.isLiteralValue(right.getFirstChild(), false)));\n    switch(left.getType()) {\n        case Token.VOID:\n            if (!NodeUtil.isLiteralValue(left.getFirstChild(), false)) {\n                return n;\n            } else if (!rightLiteral) {\n                return n;\n            } else {\n                boolean nullRight \u003d (Token.NULL \u003d\u003d right.getType());\n                boolean equivalent \u003d undefinedRight || nullRight;\n                switch(op) {\n                    case Token.EQ:\n                        result \u003d equivalent;\n                        break;\n                    case Token.NE:\n                        result \u003d !equivalent;\n                        break;\n                    case Token.SHEQ:\n                        result \u003d undefinedRight;\n                        break;\n                    case Token.SHNE:\n                        result \u003d !undefinedRight;\n                        break;\n                    case Token.LT:\n                    case Token.GT:\n                    case Token.LE:\n                    case Token.GE:\n                        result \u003d false;\n                        break;\n                    default:\n                        return n;\n                }\n            }\n            break;\n        case Token.NULL:\n            if (undefinedRight) {\n                result \u003d (op \u003d\u003d Token.EQ);\n                break;\n            }\n        case Token.TRUE:\n        case Token.FALSE:\n            if (undefinedRight) {\n                result \u003d false;\n                break;\n            }\n        case Token.THIS:\n            int tt \u003d right.getType();\n            if (tt !\u003d Token.THIS \u0026\u0026 tt !\u003d Token.TRUE \u0026\u0026 tt !\u003d Token.FALSE \u0026\u0026 tt !\u003d Token.NULL) {\n                return n;\n            }\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    result \u003d left.getType() \u003d\u003d right.getType();\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    result \u003d left.getType() !\u003d right.getType();\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        case Token.STRING:\n            if (undefinedRight) {\n                result \u003d false;\n                break;\n            }\n            if (Token.STRING !\u003d right.getType()) {\n                return n;\n            }\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    result \u003d left.getString().equals(right.getString());\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    result \u003d !left.getString().equals(right.getString());\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        case Token.NUMBER:\n            if (undefinedRight) {\n                result \u003d false;\n                break;\n            }\n            if (Token.NUMBER !\u003d right.getType()) {\n                return n;\n            }\n            double lv \u003d left.getDouble();\n            double rv \u003d right.getDouble();\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    result \u003d lv \u003d\u003d rv;\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    result \u003d lv !\u003d rv;\n                    break;\n                case Token.LE:\n                    result \u003d lv \u003c\u003d rv;\n                    break;\n                case Token.LT:\n                    result \u003d lv \u003c rv;\n                    break;\n                case Token.GE:\n                    result \u003d lv \u003e\u003d rv;\n                    break;\n                case Token.GT:\n                    result \u003d lv \u003e rv;\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        case Token.NAME:\n            if (rightLiteral) {\n                boolean undefinedLeft \u003d (left.getString().equals(\"undefined\"));\n                if (undefinedLeft) {\n                    boolean nullRight \u003d (Token.NULL \u003d\u003d right.getType());\n                    boolean equivalent \u003d undefinedRight || nullRight;\n                    switch(op) {\n                        case Token.EQ:\n                            result \u003d equivalent;\n                            break;\n                        case Token.NE:\n                            result \u003d !equivalent;\n                            break;\n                        case Token.SHEQ:\n                            result \u003d undefinedRight;\n                            break;\n                        case Token.SHNE:\n                            result \u003d !undefinedRight;\n                            break;\n                        case Token.LT:\n                        case Token.GT:\n                        case Token.LE:\n                        case Token.GE:\n                            result \u003d false;\n                            break;\n                        default:\n                            return n;\n                    }\n                    break;\n                }\n            }\n            if (Token.NAME !\u003d right.getType()) {\n                return n;\n            }\n            String ln \u003d left.getString();\n            String rn \u003d right.getString();\n            if (!ln.equals(rn)) {\n                return n;\n            }\n            switch(op) {\n                case Token.LT:\n                case Token.GT:\n                    result \u003d false;\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        default:\n            return n;\n    }\n    Node newNode \u003d new Node(result ? Token.TRUE : Token.FALSE);\n    n.getParent().replaceChild(n, newNode);\n    reportCodeChange();\n    return newNode;\n}",
      "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
      "functionStartLine": 724,
      "functionName": "tryFoldComparison",
      "functionAnnotation": "@SuppressWarnings(\"fallthrough\")",
      "functionDoc": "Try to fold comparison nodes, e.g \u003d\u003d\n",
      "diff": "@@ -1,185 +1,185 @@\n @SuppressWarnings(\"fallthrough\")\n private Node tryFoldComparison(Node n, Node left, Node right) {\n-    if (!NodeUtil.isLiteralValue(left) || !NodeUtil.isLiteralValue(right)) {\n+    if (!NodeUtil.isLiteralValue(left, false) || !NodeUtil.isLiteralValue(right, false)) {\n         if (n.getType() !\u003d Token.GT \u0026\u0026 n.getType() !\u003d Token.LT) {\n             return n;\n         }\n     }\n     int op \u003d n.getType();\n     boolean result;\n-    boolean rightLiteral \u003d NodeUtil.isLiteralValue(right);\n-    boolean undefinedRight \u003d ((Token.NAME \u003d\u003d right.getType() \u0026\u0026 right.getString().equals(\"undefined\")) || (Token.VOID \u003d\u003d right.getType() \u0026\u0026 NodeUtil.isLiteralValue(right.getFirstChild())));\n+    boolean rightLiteral \u003d NodeUtil.isLiteralValue(right, false);\n+    boolean undefinedRight \u003d ((Token.NAME \u003d\u003d right.getType() \u0026\u0026 right.getString().equals(\"undefined\")) || (Token.VOID \u003d\u003d right.getType() \u0026\u0026 NodeUtil.isLiteralValue(right.getFirstChild(), false)));\n     switch(left.getType()) {\n         case Token.VOID:\n-            if (!NodeUtil.isLiteralValue(left.getFirstChild())) {\n+            if (!NodeUtil.isLiteralValue(left.getFirstChild(), false)) {\n                 return n;\n             } else if (!rightLiteral) {\n                 return n;\n             } else {\n                 boolean nullRight \u003d (Token.NULL \u003d\u003d right.getType());\n                 boolean equivalent \u003d undefinedRight || nullRight;\n                 switch(op) {\n                     case Token.EQ:\n                         result \u003d equivalent;\n                         break;\n                     case Token.NE:\n                         result \u003d !equivalent;\n                         break;\n                     case Token.SHEQ:\n                         result \u003d undefinedRight;\n                         break;\n                     case Token.SHNE:\n                         result \u003d !undefinedRight;\n                         break;\n                     case Token.LT:\n                     case Token.GT:\n                     case Token.LE:\n                     case Token.GE:\n                         result \u003d false;\n                         break;\n                     default:\n                         return n;\n                 }\n             }\n             break;\n         case Token.NULL:\n             if (undefinedRight) {\n                 result \u003d (op \u003d\u003d Token.EQ);\n                 break;\n             }\n         case Token.TRUE:\n         case Token.FALSE:\n             if (undefinedRight) {\n                 result \u003d false;\n                 break;\n             }\n         case Token.THIS:\n             int tt \u003d right.getType();\n             if (tt !\u003d Token.THIS \u0026\u0026 tt !\u003d Token.TRUE \u0026\u0026 tt !\u003d Token.FALSE \u0026\u0026 tt !\u003d Token.NULL) {\n                 return n;\n             }\n             switch(op) {\n                 case Token.SHEQ:\n                 case Token.EQ:\n                     result \u003d left.getType() \u003d\u003d right.getType();\n                     break;\n                 case Token.SHNE:\n                 case Token.NE:\n                     result \u003d left.getType() !\u003d right.getType();\n                     break;\n                 default:\n                     return n;\n             }\n             break;\n         case Token.STRING:\n             if (undefinedRight) {\n                 result \u003d false;\n                 break;\n             }\n             if (Token.STRING !\u003d right.getType()) {\n                 return n;\n             }\n             switch(op) {\n                 case Token.SHEQ:\n                 case Token.EQ:\n                     result \u003d left.getString().equals(right.getString());\n                     break;\n                 case Token.SHNE:\n                 case Token.NE:\n                     result \u003d !left.getString().equals(right.getString());\n                     break;\n                 default:\n                     return n;\n             }\n             break;\n         case Token.NUMBER:\n             if (undefinedRight) {\n                 result \u003d false;\n                 break;\n             }\n             if (Token.NUMBER !\u003d right.getType()) {\n                 return n;\n             }\n             double lv \u003d left.getDouble();\n             double rv \u003d right.getDouble();\n             switch(op) {\n                 case Token.SHEQ:\n                 case Token.EQ:\n                     result \u003d lv \u003d\u003d rv;\n                     break;\n                 case Token.SHNE:\n                 case Token.NE:\n                     result \u003d lv !\u003d rv;\n                     break;\n                 case Token.LE:\n                     result \u003d lv \u003c\u003d rv;\n                     break;\n                 case Token.LT:\n                     result \u003d lv \u003c rv;\n                     break;\n                 case Token.GE:\n                     result \u003d lv \u003e\u003d rv;\n                     break;\n                 case Token.GT:\n                     result \u003d lv \u003e rv;\n                     break;\n                 default:\n                     return n;\n             }\n             break;\n         case Token.NAME:\n             if (rightLiteral) {\n                 boolean undefinedLeft \u003d (left.getString().equals(\"undefined\"));\n                 if (undefinedLeft) {\n                     boolean nullRight \u003d (Token.NULL \u003d\u003d right.getType());\n                     boolean equivalent \u003d undefinedRight || nullRight;\n                     switch(op) {\n                         case Token.EQ:\n                             result \u003d equivalent;\n                             break;\n                         case Token.NE:\n                             result \u003d !equivalent;\n                             break;\n                         case Token.SHEQ:\n                             result \u003d undefinedRight;\n                             break;\n                         case Token.SHNE:\n                             result \u003d !undefinedRight;\n                             break;\n                         case Token.LT:\n                         case Token.GT:\n                         case Token.LE:\n                         case Token.GE:\n                             result \u003d false;\n                             break;\n                         default:\n                             return n;\n                     }\n                     break;\n                 }\n             }\n             if (Token.NAME !\u003d right.getType()) {\n                 return n;\n             }\n             String ln \u003d left.getString();\n             String rn \u003d right.getString();\n             if (!ln.equals(rn)) {\n                 return n;\n             }\n             switch(op) {\n                 case Token.LT:\n                 case Token.GT:\n                     result \u003d false;\n                     break;\n                 default:\n                     return n;\n             }\n             break;\n         default:\n             return n;\n     }\n     Node newNode \u003d new Node(result ? Token.TRUE : Token.FALSE);\n     n.getParent().replaceChild(n, newNode);\n     reportCodeChange();\n     return newNode;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9de5e9b4671773bb3f2d5932e57c1b4186b9b777": {
      "type": "Yformatchange",
      "commitMessage": "\nChange on 2010/06/30 15:06:33 by johnlenz\n\n\tAdd a diagnostic group so that projects with weird externs can opt-out of the stricter extern checks.\n\n\tR\u003dnicksantos\n\tDELTA\u003d54  (52 added, 0 deleted, 2 changed)\n\nChange on 2010/06/30 17:56:51 by johnlenz\n\n\tRevert warning levels until after a release is put out to control them.\n\n\tR\u003dnicksantos\n\tDELTA\u003d4  (2 added, 0 deleted, 2 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d47002\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@260 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/1/10, 7:38 AM",
      "commitName": "9de5e9b4671773bb3f2d5932e57c1b4186b9b777",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "6/28/10, 5:30 PM",
      "commitNameOld": "9925370292834ea846727f1f9db76af0d40261df",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 2.59,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"fallthrough\")\nprivate Node tryFoldComparison(Node n, Node left, Node right) {\n    if (!NodeUtil.isLiteralValue(left) || !NodeUtil.isLiteralValue(right)) {\n        if (n.getType() !\u003d Token.GT \u0026\u0026 n.getType() !\u003d Token.LT) {\n            return n;\n        }\n    }\n    int op \u003d n.getType();\n    boolean result;\n    boolean rightLiteral \u003d NodeUtil.isLiteralValue(right);\n    boolean undefinedRight \u003d ((Token.NAME \u003d\u003d right.getType() \u0026\u0026 right.getString().equals(\"undefined\")) || (Token.VOID \u003d\u003d right.getType() \u0026\u0026 NodeUtil.isLiteralValue(right.getFirstChild())));\n    switch(left.getType()) {\n        case Token.VOID:\n            if (!NodeUtil.isLiteralValue(left.getFirstChild())) {\n                return n;\n            } else if (!rightLiteral) {\n                return n;\n            } else {\n                boolean nullRight \u003d (Token.NULL \u003d\u003d right.getType());\n                boolean equivalent \u003d undefinedRight || nullRight;\n                switch(op) {\n                    case Token.EQ:\n                        result \u003d equivalent;\n                        break;\n                    case Token.NE:\n                        result \u003d !equivalent;\n                        break;\n                    case Token.SHEQ:\n                        result \u003d undefinedRight;\n                        break;\n                    case Token.SHNE:\n                        result \u003d !undefinedRight;\n                        break;\n                    case Token.LT:\n                    case Token.GT:\n                    case Token.LE:\n                    case Token.GE:\n                        result \u003d false;\n                        break;\n                    default:\n                        return n;\n                }\n            }\n            break;\n        case Token.NULL:\n            if (undefinedRight) {\n                result \u003d (op \u003d\u003d Token.EQ);\n                break;\n            }\n        case Token.TRUE:\n        case Token.FALSE:\n            if (undefinedRight) {\n                result \u003d false;\n                break;\n            }\n        case Token.THIS:\n            int tt \u003d right.getType();\n            if (tt !\u003d Token.THIS \u0026\u0026 tt !\u003d Token.TRUE \u0026\u0026 tt !\u003d Token.FALSE \u0026\u0026 tt !\u003d Token.NULL) {\n                return n;\n            }\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    result \u003d left.getType() \u003d\u003d right.getType();\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    result \u003d left.getType() !\u003d right.getType();\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        case Token.STRING:\n            if (undefinedRight) {\n                result \u003d false;\n                break;\n            }\n            if (Token.STRING !\u003d right.getType()) {\n                return n;\n            }\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    result \u003d left.getString().equals(right.getString());\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    result \u003d !left.getString().equals(right.getString());\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        case Token.NUMBER:\n            if (undefinedRight) {\n                result \u003d false;\n                break;\n            }\n            if (Token.NUMBER !\u003d right.getType()) {\n                return n;\n            }\n            double lv \u003d left.getDouble();\n            double rv \u003d right.getDouble();\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    result \u003d lv \u003d\u003d rv;\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    result \u003d lv !\u003d rv;\n                    break;\n                case Token.LE:\n                    result \u003d lv \u003c\u003d rv;\n                    break;\n                case Token.LT:\n                    result \u003d lv \u003c rv;\n                    break;\n                case Token.GE:\n                    result \u003d lv \u003e\u003d rv;\n                    break;\n                case Token.GT:\n                    result \u003d lv \u003e rv;\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        case Token.NAME:\n            if (rightLiteral) {\n                boolean undefinedLeft \u003d (left.getString().equals(\"undefined\"));\n                if (undefinedLeft) {\n                    boolean nullRight \u003d (Token.NULL \u003d\u003d right.getType());\n                    boolean equivalent \u003d undefinedRight || nullRight;\n                    switch(op) {\n                        case Token.EQ:\n                            result \u003d equivalent;\n                            break;\n                        case Token.NE:\n                            result \u003d !equivalent;\n                            break;\n                        case Token.SHEQ:\n                            result \u003d undefinedRight;\n                            break;\n                        case Token.SHNE:\n                            result \u003d !undefinedRight;\n                            break;\n                        case Token.LT:\n                        case Token.GT:\n                        case Token.LE:\n                        case Token.GE:\n                            result \u003d false;\n                            break;\n                        default:\n                            return n;\n                    }\n                    break;\n                }\n            }\n            if (Token.NAME !\u003d right.getType()) {\n                return n;\n            }\n            String ln \u003d left.getString();\n            String rn \u003d right.getString();\n            if (!ln.equals(rn)) {\n                return n;\n            }\n            switch(op) {\n                case Token.LT:\n                case Token.GT:\n                    result \u003d false;\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        default:\n            return n;\n    }\n    Node newNode \u003d new Node(result ? Token.TRUE : Token.FALSE);\n    n.getParent().replaceChild(n, newNode);\n    reportCodeChange();\n    return newNode;\n}",
      "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
      "functionStartLine": 713,
      "functionName": "tryFoldComparison",
      "functionAnnotation": "@SuppressWarnings(\"fallthrough\")",
      "functionDoc": "Try to fold comparison nodes, e.g \u003d\u003d\n",
      "diff": "",
      "extendedDetails": {}
    },
    "c9e89727dc8063d087d28e42629606f4fd74a6e5": {
      "type": "Ymultichange(Ymovefromfile,Yreturntypechange,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "\nChange on 2010/06/22 by nicksantos\n\n\tvariable coalescing better be run AFTER ambiguate properties, and\n\tafter denormalization.\n\n\tR\u003djohnlenz\n\tDELTA\u003d36  (20 added, 16 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d34005\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@248 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/22/10, 4:00 PM",
      "commitName": "c9e89727dc8063d087d28e42629606f4fd74a6e5",
      "commitAuthor": "Nicholas.J.Santos",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "\nChange on 2010/06/22 by nicksantos\n\n\tvariable coalescing better be run AFTER ambiguate properties, and\n\tafter denormalization.\n\n\tR\u003djohnlenz\n\tDELTA\u003d36  (20 added, 16 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d34005\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@248 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "6/22/10, 4:00 PM",
          "commitName": "c9e89727dc8063d087d28e42629606f4fd74a6e5",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "6/21/10, 12:59 PM",
          "commitNameOld": "5f09a76531fb4f6e182238411017e6fc7e74ad16",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 1.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"fallthrough\")\nprivate Node tryFoldComparison(Node n, Node left, Node right) {\n    if (!NodeUtil.isLiteralValue(left) || !NodeUtil.isLiteralValue(right)) {\n        if (n.getType() !\u003d Token.GT \u0026\u0026 n.getType() !\u003d Token.LT) {\n            return n;\n        }\n    }\n    int op \u003d n.getType();\n    boolean result;\n    boolean rightLiteral \u003d NodeUtil.isLiteralValue(right);\n    boolean undefinedRight \u003d ((Token.NAME \u003d\u003d right.getType() \u0026\u0026 right.getString().equals(\"undefined\")) || (Token.VOID \u003d\u003d right.getType() \u0026\u0026 NodeUtil.isLiteralValue(right.getFirstChild())));\n    switch(left.getType()) {\n        case Token.VOID:\n            if (!NodeUtil.isLiteralValue(left.getFirstChild())) {\n                return n;\n            } else if (!rightLiteral) {\n                return n;\n            } else {\n                boolean nullRight \u003d (Token.NULL \u003d\u003d right.getType());\n                boolean equivalent \u003d undefinedRight || nullRight;\n                switch(op) {\n                    case Token.EQ:\n                        result \u003d equivalent;\n                        break;\n                    case Token.NE:\n                        result \u003d !equivalent;\n                        break;\n                    case Token.SHEQ:\n                        result \u003d undefinedRight;\n                        break;\n                    case Token.SHNE:\n                        result \u003d !undefinedRight;\n                        break;\n                    case Token.LT:\n                    case Token.GT:\n                    case Token.LE:\n                    case Token.GE:\n                        result \u003d false;\n                        break;\n                    default:\n                        return n;\n                }\n            }\n            break;\n        case Token.NULL:\n            if (undefinedRight) {\n                result \u003d (op \u003d\u003d Token.EQ);\n                break;\n            }\n        case Token.TRUE:\n        case Token.FALSE:\n            if (undefinedRight) {\n                result \u003d false;\n                break;\n            }\n        case Token.THIS:\n            int tt \u003d right.getType();\n            if (tt !\u003d Token.THIS \u0026\u0026 tt !\u003d Token.TRUE \u0026\u0026 tt !\u003d Token.FALSE \u0026\u0026 tt !\u003d Token.NULL) {\n                return n;\n            }\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    result \u003d left.getType() \u003d\u003d right.getType();\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    result \u003d left.getType() !\u003d right.getType();\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        case Token.STRING:\n            if (undefinedRight) {\n                result \u003d false;\n                break;\n            }\n            if (Token.STRING !\u003d right.getType()) {\n                return n;\n            }\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    result \u003d left.getString().equals(right.getString());\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    result \u003d !left.getString().equals(right.getString());\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        case Token.NUMBER:\n            if (undefinedRight) {\n                result \u003d false;\n                break;\n            }\n            if (Token.NUMBER !\u003d right.getType()) {\n                return n;\n            }\n            double lv \u003d left.getDouble();\n            double rv \u003d right.getDouble();\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    result \u003d lv \u003d\u003d rv;\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    result \u003d lv !\u003d rv;\n                    break;\n                case Token.LE:\n                    result \u003d lv \u003c\u003d rv;\n                    break;\n                case Token.LT:\n                    result \u003d lv \u003c rv;\n                    break;\n                case Token.GE:\n                    result \u003d lv \u003e\u003d rv;\n                    break;\n                case Token.GT:\n                    result \u003d lv \u003e rv;\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        case Token.NAME:\n            if (rightLiteral) {\n                boolean undefinedLeft \u003d (left.getString().equals(\"undefined\"));\n                if (undefinedLeft) {\n                    boolean nullRight \u003d (Token.NULL \u003d\u003d right.getType());\n                    boolean equivalent \u003d undefinedRight || nullRight;\n                    switch(op) {\n                        case Token.EQ:\n                            result \u003d equivalent;\n                            break;\n                        case Token.NE:\n                            result \u003d !equivalent;\n                            break;\n                        case Token.SHEQ:\n                            result \u003d undefinedRight;\n                            break;\n                        case Token.SHNE:\n                            result \u003d !undefinedRight;\n                            break;\n                        case Token.LT:\n                        case Token.GT:\n                        case Token.LE:\n                        case Token.GE:\n                            result \u003d false;\n                            break;\n                        default:\n                            return n;\n                    }\n                    break;\n                }\n            }\n            if (Token.NAME !\u003d right.getType()) {\n                return n;\n            }\n            String ln \u003d left.getString();\n            String rn \u003d right.getString();\n            if (!ln.equals(rn)) {\n                return n;\n            }\n            switch(op) {\n                case Token.LT:\n                case Token.GT:\n                    result \u003d false;\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        default:\n            return n;\n    }\n    Node newNode \u003d new Node(result ? Token.TRUE : Token.FALSE);\n    n.getParent().replaceChild(n, newNode);\n    reportCodeChange();\n    return newNode;\n}",
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
          "functionStartLine": 702,
          "functionName": "tryFoldComparison",
          "functionAnnotation": "@SuppressWarnings(\"fallthrough\")",
          "functionDoc": "Try to fold comparison nodes, e.g \u003d\u003d\n",
          "diff": "@@ -1,177 +1,185 @@\n @SuppressWarnings(\"fallthrough\")\n-void tryFoldComparison(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n+private Node tryFoldComparison(Node n, Node left, Node right) {\n+    if (!NodeUtil.isLiteralValue(left) || !NodeUtil.isLiteralValue(right)) {\n+        if (n.getType() !\u003d Token.GT \u0026\u0026 n.getType() !\u003d Token.LT) {\n+            return n;\n+        }\n+    }\n     int op \u003d n.getType();\n     boolean result;\n     boolean rightLiteral \u003d NodeUtil.isLiteralValue(right);\n     boolean undefinedRight \u003d ((Token.NAME \u003d\u003d right.getType() \u0026\u0026 right.getString().equals(\"undefined\")) || (Token.VOID \u003d\u003d right.getType() \u0026\u0026 NodeUtil.isLiteralValue(right.getFirstChild())));\n     switch(left.getType()) {\n         case Token.VOID:\n             if (!NodeUtil.isLiteralValue(left.getFirstChild())) {\n-                return;\n+                return n;\n             } else if (!rightLiteral) {\n-                return;\n+                return n;\n             } else {\n                 boolean nullRight \u003d (Token.NULL \u003d\u003d right.getType());\n                 boolean equivalent \u003d undefinedRight || nullRight;\n                 switch(op) {\n                     case Token.EQ:\n                         result \u003d equivalent;\n                         break;\n                     case Token.NE:\n                         result \u003d !equivalent;\n                         break;\n                     case Token.SHEQ:\n                         result \u003d undefinedRight;\n                         break;\n                     case Token.SHNE:\n                         result \u003d !undefinedRight;\n                         break;\n                     case Token.LT:\n                     case Token.GT:\n                     case Token.LE:\n                     case Token.GE:\n                         result \u003d false;\n                         break;\n                     default:\n-                        return;\n+                        return n;\n                 }\n             }\n             break;\n         case Token.NULL:\n             if (undefinedRight) {\n                 result \u003d (op \u003d\u003d Token.EQ);\n                 break;\n             }\n         case Token.TRUE:\n         case Token.FALSE:\n             if (undefinedRight) {\n                 result \u003d false;\n                 break;\n             }\n         case Token.THIS:\n             int tt \u003d right.getType();\n-            if (tt !\u003d Token.THIS \u0026\u0026 tt !\u003d Token.TRUE \u0026\u0026 tt !\u003d Token.FALSE \u0026\u0026 tt !\u003d Token.NULL)\n-                return;\n+            if (tt !\u003d Token.THIS \u0026\u0026 tt !\u003d Token.TRUE \u0026\u0026 tt !\u003d Token.FALSE \u0026\u0026 tt !\u003d Token.NULL) {\n+                return n;\n+            }\n             switch(op) {\n                 case Token.SHEQ:\n                 case Token.EQ:\n                     result \u003d left.getType() \u003d\u003d right.getType();\n                     break;\n                 case Token.SHNE:\n                 case Token.NE:\n                     result \u003d left.getType() !\u003d right.getType();\n                     break;\n                 default:\n-                    return;\n+                    return n;\n             }\n             break;\n         case Token.STRING:\n             if (undefinedRight) {\n                 result \u003d false;\n                 break;\n             }\n             if (Token.STRING !\u003d right.getType()) {\n-                return;\n+                return n;\n             }\n             switch(op) {\n                 case Token.SHEQ:\n                 case Token.EQ:\n                     result \u003d left.getString().equals(right.getString());\n                     break;\n                 case Token.SHNE:\n                 case Token.NE:\n                     result \u003d !left.getString().equals(right.getString());\n                     break;\n                 default:\n-                    return;\n+                    return n;\n             }\n             break;\n         case Token.NUMBER:\n             if (undefinedRight) {\n                 result \u003d false;\n                 break;\n             }\n             if (Token.NUMBER !\u003d right.getType()) {\n-                return;\n+                return n;\n             }\n             double lv \u003d left.getDouble();\n             double rv \u003d right.getDouble();\n             switch(op) {\n                 case Token.SHEQ:\n                 case Token.EQ:\n                     result \u003d lv \u003d\u003d rv;\n                     break;\n                 case Token.SHNE:\n                 case Token.NE:\n                     result \u003d lv !\u003d rv;\n                     break;\n                 case Token.LE:\n                     result \u003d lv \u003c\u003d rv;\n                     break;\n                 case Token.LT:\n                     result \u003d lv \u003c rv;\n                     break;\n                 case Token.GE:\n                     result \u003d lv \u003e\u003d rv;\n                     break;\n                 case Token.GT:\n                     result \u003d lv \u003e rv;\n                     break;\n                 default:\n-                    return;\n+                    return n;\n             }\n             break;\n         case Token.NAME:\n             if (rightLiteral) {\n                 boolean undefinedLeft \u003d (left.getString().equals(\"undefined\"));\n                 if (undefinedLeft) {\n                     boolean nullRight \u003d (Token.NULL \u003d\u003d right.getType());\n                     boolean equivalent \u003d undefinedRight || nullRight;\n                     switch(op) {\n                         case Token.EQ:\n                             result \u003d equivalent;\n                             break;\n                         case Token.NE:\n                             result \u003d !equivalent;\n                             break;\n                         case Token.SHEQ:\n                             result \u003d undefinedRight;\n                             break;\n                         case Token.SHNE:\n                             result \u003d !undefinedRight;\n                             break;\n                         case Token.LT:\n                         case Token.GT:\n                         case Token.LE:\n                         case Token.GE:\n                             result \u003d false;\n                             break;\n                         default:\n-                            return;\n+                            return n;\n                     }\n                     break;\n                 }\n             }\n             if (Token.NAME !\u003d right.getType()) {\n-                return;\n+                return n;\n             }\n             String ln \u003d left.getString();\n             String rn \u003d right.getString();\n             if (!ln.equals(rn)) {\n-                return;\n+                return n;\n             }\n             switch(op) {\n                 case Token.LT:\n                 case Token.GT:\n                     result \u003d false;\n                     break;\n                 default:\n-                    return;\n+                    return n;\n             }\n             break;\n         default:\n-            return;\n+            return n;\n     }\n-    parent.replaceChild(n, new Node(result ? Token.TRUE : Token.FALSE));\n-    t.getCompiler().reportCodeChange();\n+    Node newNode \u003d new Node(result ? Token.TRUE : Token.FALSE);\n+    n.getParent().replaceChild(n, newNode);\n+    reportCodeChange();\n+    return newNode;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/com/google/javascript/jscomp/FoldConstants.java",
            "newPath": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
            "oldMethodName": "tryFoldComparison",
            "newMethodName": "tryFoldComparison"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "\nChange on 2010/06/22 by nicksantos\n\n\tvariable coalescing better be run AFTER ambiguate properties, and\n\tafter denormalization.\n\n\tR\u003djohnlenz\n\tDELTA\u003d36  (20 added, 16 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d34005\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@248 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "6/22/10, 4:00 PM",
          "commitName": "c9e89727dc8063d087d28e42629606f4fd74a6e5",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "6/21/10, 12:59 PM",
          "commitNameOld": "5f09a76531fb4f6e182238411017e6fc7e74ad16",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 1.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"fallthrough\")\nprivate Node tryFoldComparison(Node n, Node left, Node right) {\n    if (!NodeUtil.isLiteralValue(left) || !NodeUtil.isLiteralValue(right)) {\n        if (n.getType() !\u003d Token.GT \u0026\u0026 n.getType() !\u003d Token.LT) {\n            return n;\n        }\n    }\n    int op \u003d n.getType();\n    boolean result;\n    boolean rightLiteral \u003d NodeUtil.isLiteralValue(right);\n    boolean undefinedRight \u003d ((Token.NAME \u003d\u003d right.getType() \u0026\u0026 right.getString().equals(\"undefined\")) || (Token.VOID \u003d\u003d right.getType() \u0026\u0026 NodeUtil.isLiteralValue(right.getFirstChild())));\n    switch(left.getType()) {\n        case Token.VOID:\n            if (!NodeUtil.isLiteralValue(left.getFirstChild())) {\n                return n;\n            } else if (!rightLiteral) {\n                return n;\n            } else {\n                boolean nullRight \u003d (Token.NULL \u003d\u003d right.getType());\n                boolean equivalent \u003d undefinedRight || nullRight;\n                switch(op) {\n                    case Token.EQ:\n                        result \u003d equivalent;\n                        break;\n                    case Token.NE:\n                        result \u003d !equivalent;\n                        break;\n                    case Token.SHEQ:\n                        result \u003d undefinedRight;\n                        break;\n                    case Token.SHNE:\n                        result \u003d !undefinedRight;\n                        break;\n                    case Token.LT:\n                    case Token.GT:\n                    case Token.LE:\n                    case Token.GE:\n                        result \u003d false;\n                        break;\n                    default:\n                        return n;\n                }\n            }\n            break;\n        case Token.NULL:\n            if (undefinedRight) {\n                result \u003d (op \u003d\u003d Token.EQ);\n                break;\n            }\n        case Token.TRUE:\n        case Token.FALSE:\n            if (undefinedRight) {\n                result \u003d false;\n                break;\n            }\n        case Token.THIS:\n            int tt \u003d right.getType();\n            if (tt !\u003d Token.THIS \u0026\u0026 tt !\u003d Token.TRUE \u0026\u0026 tt !\u003d Token.FALSE \u0026\u0026 tt !\u003d Token.NULL) {\n                return n;\n            }\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    result \u003d left.getType() \u003d\u003d right.getType();\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    result \u003d left.getType() !\u003d right.getType();\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        case Token.STRING:\n            if (undefinedRight) {\n                result \u003d false;\n                break;\n            }\n            if (Token.STRING !\u003d right.getType()) {\n                return n;\n            }\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    result \u003d left.getString().equals(right.getString());\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    result \u003d !left.getString().equals(right.getString());\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        case Token.NUMBER:\n            if (undefinedRight) {\n                result \u003d false;\n                break;\n            }\n            if (Token.NUMBER !\u003d right.getType()) {\n                return n;\n            }\n            double lv \u003d left.getDouble();\n            double rv \u003d right.getDouble();\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    result \u003d lv \u003d\u003d rv;\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    result \u003d lv !\u003d rv;\n                    break;\n                case Token.LE:\n                    result \u003d lv \u003c\u003d rv;\n                    break;\n                case Token.LT:\n                    result \u003d lv \u003c rv;\n                    break;\n                case Token.GE:\n                    result \u003d lv \u003e\u003d rv;\n                    break;\n                case Token.GT:\n                    result \u003d lv \u003e rv;\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        case Token.NAME:\n            if (rightLiteral) {\n                boolean undefinedLeft \u003d (left.getString().equals(\"undefined\"));\n                if (undefinedLeft) {\n                    boolean nullRight \u003d (Token.NULL \u003d\u003d right.getType());\n                    boolean equivalent \u003d undefinedRight || nullRight;\n                    switch(op) {\n                        case Token.EQ:\n                            result \u003d equivalent;\n                            break;\n                        case Token.NE:\n                            result \u003d !equivalent;\n                            break;\n                        case Token.SHEQ:\n                            result \u003d undefinedRight;\n                            break;\n                        case Token.SHNE:\n                            result \u003d !undefinedRight;\n                            break;\n                        case Token.LT:\n                        case Token.GT:\n                        case Token.LE:\n                        case Token.GE:\n                            result \u003d false;\n                            break;\n                        default:\n                            return n;\n                    }\n                    break;\n                }\n            }\n            if (Token.NAME !\u003d right.getType()) {\n                return n;\n            }\n            String ln \u003d left.getString();\n            String rn \u003d right.getString();\n            if (!ln.equals(rn)) {\n                return n;\n            }\n            switch(op) {\n                case Token.LT:\n                case Token.GT:\n                    result \u003d false;\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        default:\n            return n;\n    }\n    Node newNode \u003d new Node(result ? Token.TRUE : Token.FALSE);\n    n.getParent().replaceChild(n, newNode);\n    reportCodeChange();\n    return newNode;\n}",
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
          "functionStartLine": 702,
          "functionName": "tryFoldComparison",
          "functionAnnotation": "@SuppressWarnings(\"fallthrough\")",
          "functionDoc": "Try to fold comparison nodes, e.g \u003d\u003d\n",
          "diff": "@@ -1,177 +1,185 @@\n @SuppressWarnings(\"fallthrough\")\n-void tryFoldComparison(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n+private Node tryFoldComparison(Node n, Node left, Node right) {\n+    if (!NodeUtil.isLiteralValue(left) || !NodeUtil.isLiteralValue(right)) {\n+        if (n.getType() !\u003d Token.GT \u0026\u0026 n.getType() !\u003d Token.LT) {\n+            return n;\n+        }\n+    }\n     int op \u003d n.getType();\n     boolean result;\n     boolean rightLiteral \u003d NodeUtil.isLiteralValue(right);\n     boolean undefinedRight \u003d ((Token.NAME \u003d\u003d right.getType() \u0026\u0026 right.getString().equals(\"undefined\")) || (Token.VOID \u003d\u003d right.getType() \u0026\u0026 NodeUtil.isLiteralValue(right.getFirstChild())));\n     switch(left.getType()) {\n         case Token.VOID:\n             if (!NodeUtil.isLiteralValue(left.getFirstChild())) {\n-                return;\n+                return n;\n             } else if (!rightLiteral) {\n-                return;\n+                return n;\n             } else {\n                 boolean nullRight \u003d (Token.NULL \u003d\u003d right.getType());\n                 boolean equivalent \u003d undefinedRight || nullRight;\n                 switch(op) {\n                     case Token.EQ:\n                         result \u003d equivalent;\n                         break;\n                     case Token.NE:\n                         result \u003d !equivalent;\n                         break;\n                     case Token.SHEQ:\n                         result \u003d undefinedRight;\n                         break;\n                     case Token.SHNE:\n                         result \u003d !undefinedRight;\n                         break;\n                     case Token.LT:\n                     case Token.GT:\n                     case Token.LE:\n                     case Token.GE:\n                         result \u003d false;\n                         break;\n                     default:\n-                        return;\n+                        return n;\n                 }\n             }\n             break;\n         case Token.NULL:\n             if (undefinedRight) {\n                 result \u003d (op \u003d\u003d Token.EQ);\n                 break;\n             }\n         case Token.TRUE:\n         case Token.FALSE:\n             if (undefinedRight) {\n                 result \u003d false;\n                 break;\n             }\n         case Token.THIS:\n             int tt \u003d right.getType();\n-            if (tt !\u003d Token.THIS \u0026\u0026 tt !\u003d Token.TRUE \u0026\u0026 tt !\u003d Token.FALSE \u0026\u0026 tt !\u003d Token.NULL)\n-                return;\n+            if (tt !\u003d Token.THIS \u0026\u0026 tt !\u003d Token.TRUE \u0026\u0026 tt !\u003d Token.FALSE \u0026\u0026 tt !\u003d Token.NULL) {\n+                return n;\n+            }\n             switch(op) {\n                 case Token.SHEQ:\n                 case Token.EQ:\n                     result \u003d left.getType() \u003d\u003d right.getType();\n                     break;\n                 case Token.SHNE:\n                 case Token.NE:\n                     result \u003d left.getType() !\u003d right.getType();\n                     break;\n                 default:\n-                    return;\n+                    return n;\n             }\n             break;\n         case Token.STRING:\n             if (undefinedRight) {\n                 result \u003d false;\n                 break;\n             }\n             if (Token.STRING !\u003d right.getType()) {\n-                return;\n+                return n;\n             }\n             switch(op) {\n                 case Token.SHEQ:\n                 case Token.EQ:\n                     result \u003d left.getString().equals(right.getString());\n                     break;\n                 case Token.SHNE:\n                 case Token.NE:\n                     result \u003d !left.getString().equals(right.getString());\n                     break;\n                 default:\n-                    return;\n+                    return n;\n             }\n             break;\n         case Token.NUMBER:\n             if (undefinedRight) {\n                 result \u003d false;\n                 break;\n             }\n             if (Token.NUMBER !\u003d right.getType()) {\n-                return;\n+                return n;\n             }\n             double lv \u003d left.getDouble();\n             double rv \u003d right.getDouble();\n             switch(op) {\n                 case Token.SHEQ:\n                 case Token.EQ:\n                     result \u003d lv \u003d\u003d rv;\n                     break;\n                 case Token.SHNE:\n                 case Token.NE:\n                     result \u003d lv !\u003d rv;\n                     break;\n                 case Token.LE:\n                     result \u003d lv \u003c\u003d rv;\n                     break;\n                 case Token.LT:\n                     result \u003d lv \u003c rv;\n                     break;\n                 case Token.GE:\n                     result \u003d lv \u003e\u003d rv;\n                     break;\n                 case Token.GT:\n                     result \u003d lv \u003e rv;\n                     break;\n                 default:\n-                    return;\n+                    return n;\n             }\n             break;\n         case Token.NAME:\n             if (rightLiteral) {\n                 boolean undefinedLeft \u003d (left.getString().equals(\"undefined\"));\n                 if (undefinedLeft) {\n                     boolean nullRight \u003d (Token.NULL \u003d\u003d right.getType());\n                     boolean equivalent \u003d undefinedRight || nullRight;\n                     switch(op) {\n                         case Token.EQ:\n                             result \u003d equivalent;\n                             break;\n                         case Token.NE:\n                             result \u003d !equivalent;\n                             break;\n                         case Token.SHEQ:\n                             result \u003d undefinedRight;\n                             break;\n                         case Token.SHNE:\n                             result \u003d !undefinedRight;\n                             break;\n                         case Token.LT:\n                         case Token.GT:\n                         case Token.LE:\n                         case Token.GE:\n                             result \u003d false;\n                             break;\n                         default:\n-                            return;\n+                            return n;\n                     }\n                     break;\n                 }\n             }\n             if (Token.NAME !\u003d right.getType()) {\n-                return;\n+                return n;\n             }\n             String ln \u003d left.getString();\n             String rn \u003d right.getString();\n             if (!ln.equals(rn)) {\n-                return;\n+                return n;\n             }\n             switch(op) {\n                 case Token.LT:\n                 case Token.GT:\n                     result \u003d false;\n                     break;\n                 default:\n-                    return;\n+                    return n;\n             }\n             break;\n         default:\n-            return;\n+            return n;\n     }\n-    parent.replaceChild(n, new Node(result ? Token.TRUE : Token.FALSE));\n-    t.getCompiler().reportCodeChange();\n+    Node newNode \u003d new Node(result ? Token.TRUE : Token.FALSE);\n+    n.getParent().replaceChild(n, newNode);\n+    reportCodeChange();\n+    return newNode;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "Node"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "\nChange on 2010/06/22 by nicksantos\n\n\tvariable coalescing better be run AFTER ambiguate properties, and\n\tafter denormalization.\n\n\tR\u003djohnlenz\n\tDELTA\u003d36  (20 added, 16 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d34005\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@248 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "6/22/10, 4:00 PM",
          "commitName": "c9e89727dc8063d087d28e42629606f4fd74a6e5",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "6/21/10, 12:59 PM",
          "commitNameOld": "5f09a76531fb4f6e182238411017e6fc7e74ad16",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 1.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"fallthrough\")\nprivate Node tryFoldComparison(Node n, Node left, Node right) {\n    if (!NodeUtil.isLiteralValue(left) || !NodeUtil.isLiteralValue(right)) {\n        if (n.getType() !\u003d Token.GT \u0026\u0026 n.getType() !\u003d Token.LT) {\n            return n;\n        }\n    }\n    int op \u003d n.getType();\n    boolean result;\n    boolean rightLiteral \u003d NodeUtil.isLiteralValue(right);\n    boolean undefinedRight \u003d ((Token.NAME \u003d\u003d right.getType() \u0026\u0026 right.getString().equals(\"undefined\")) || (Token.VOID \u003d\u003d right.getType() \u0026\u0026 NodeUtil.isLiteralValue(right.getFirstChild())));\n    switch(left.getType()) {\n        case Token.VOID:\n            if (!NodeUtil.isLiteralValue(left.getFirstChild())) {\n                return n;\n            } else if (!rightLiteral) {\n                return n;\n            } else {\n                boolean nullRight \u003d (Token.NULL \u003d\u003d right.getType());\n                boolean equivalent \u003d undefinedRight || nullRight;\n                switch(op) {\n                    case Token.EQ:\n                        result \u003d equivalent;\n                        break;\n                    case Token.NE:\n                        result \u003d !equivalent;\n                        break;\n                    case Token.SHEQ:\n                        result \u003d undefinedRight;\n                        break;\n                    case Token.SHNE:\n                        result \u003d !undefinedRight;\n                        break;\n                    case Token.LT:\n                    case Token.GT:\n                    case Token.LE:\n                    case Token.GE:\n                        result \u003d false;\n                        break;\n                    default:\n                        return n;\n                }\n            }\n            break;\n        case Token.NULL:\n            if (undefinedRight) {\n                result \u003d (op \u003d\u003d Token.EQ);\n                break;\n            }\n        case Token.TRUE:\n        case Token.FALSE:\n            if (undefinedRight) {\n                result \u003d false;\n                break;\n            }\n        case Token.THIS:\n            int tt \u003d right.getType();\n            if (tt !\u003d Token.THIS \u0026\u0026 tt !\u003d Token.TRUE \u0026\u0026 tt !\u003d Token.FALSE \u0026\u0026 tt !\u003d Token.NULL) {\n                return n;\n            }\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    result \u003d left.getType() \u003d\u003d right.getType();\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    result \u003d left.getType() !\u003d right.getType();\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        case Token.STRING:\n            if (undefinedRight) {\n                result \u003d false;\n                break;\n            }\n            if (Token.STRING !\u003d right.getType()) {\n                return n;\n            }\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    result \u003d left.getString().equals(right.getString());\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    result \u003d !left.getString().equals(right.getString());\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        case Token.NUMBER:\n            if (undefinedRight) {\n                result \u003d false;\n                break;\n            }\n            if (Token.NUMBER !\u003d right.getType()) {\n                return n;\n            }\n            double lv \u003d left.getDouble();\n            double rv \u003d right.getDouble();\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    result \u003d lv \u003d\u003d rv;\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    result \u003d lv !\u003d rv;\n                    break;\n                case Token.LE:\n                    result \u003d lv \u003c\u003d rv;\n                    break;\n                case Token.LT:\n                    result \u003d lv \u003c rv;\n                    break;\n                case Token.GE:\n                    result \u003d lv \u003e\u003d rv;\n                    break;\n                case Token.GT:\n                    result \u003d lv \u003e rv;\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        case Token.NAME:\n            if (rightLiteral) {\n                boolean undefinedLeft \u003d (left.getString().equals(\"undefined\"));\n                if (undefinedLeft) {\n                    boolean nullRight \u003d (Token.NULL \u003d\u003d right.getType());\n                    boolean equivalent \u003d undefinedRight || nullRight;\n                    switch(op) {\n                        case Token.EQ:\n                            result \u003d equivalent;\n                            break;\n                        case Token.NE:\n                            result \u003d !equivalent;\n                            break;\n                        case Token.SHEQ:\n                            result \u003d undefinedRight;\n                            break;\n                        case Token.SHNE:\n                            result \u003d !undefinedRight;\n                            break;\n                        case Token.LT:\n                        case Token.GT:\n                        case Token.LE:\n                        case Token.GE:\n                            result \u003d false;\n                            break;\n                        default:\n                            return n;\n                    }\n                    break;\n                }\n            }\n            if (Token.NAME !\u003d right.getType()) {\n                return n;\n            }\n            String ln \u003d left.getString();\n            String rn \u003d right.getString();\n            if (!ln.equals(rn)) {\n                return n;\n            }\n            switch(op) {\n                case Token.LT:\n                case Token.GT:\n                    result \u003d false;\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        default:\n            return n;\n    }\n    Node newNode \u003d new Node(result ? Token.TRUE : Token.FALSE);\n    n.getParent().replaceChild(n, newNode);\n    reportCodeChange();\n    return newNode;\n}",
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
          "functionStartLine": 702,
          "functionName": "tryFoldComparison",
          "functionAnnotation": "@SuppressWarnings(\"fallthrough\")",
          "functionDoc": "Try to fold comparison nodes, e.g \u003d\u003d\n",
          "diff": "@@ -1,177 +1,185 @@\n @SuppressWarnings(\"fallthrough\")\n-void tryFoldComparison(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n+private Node tryFoldComparison(Node n, Node left, Node right) {\n+    if (!NodeUtil.isLiteralValue(left) || !NodeUtil.isLiteralValue(right)) {\n+        if (n.getType() !\u003d Token.GT \u0026\u0026 n.getType() !\u003d Token.LT) {\n+            return n;\n+        }\n+    }\n     int op \u003d n.getType();\n     boolean result;\n     boolean rightLiteral \u003d NodeUtil.isLiteralValue(right);\n     boolean undefinedRight \u003d ((Token.NAME \u003d\u003d right.getType() \u0026\u0026 right.getString().equals(\"undefined\")) || (Token.VOID \u003d\u003d right.getType() \u0026\u0026 NodeUtil.isLiteralValue(right.getFirstChild())));\n     switch(left.getType()) {\n         case Token.VOID:\n             if (!NodeUtil.isLiteralValue(left.getFirstChild())) {\n-                return;\n+                return n;\n             } else if (!rightLiteral) {\n-                return;\n+                return n;\n             } else {\n                 boolean nullRight \u003d (Token.NULL \u003d\u003d right.getType());\n                 boolean equivalent \u003d undefinedRight || nullRight;\n                 switch(op) {\n                     case Token.EQ:\n                         result \u003d equivalent;\n                         break;\n                     case Token.NE:\n                         result \u003d !equivalent;\n                         break;\n                     case Token.SHEQ:\n                         result \u003d undefinedRight;\n                         break;\n                     case Token.SHNE:\n                         result \u003d !undefinedRight;\n                         break;\n                     case Token.LT:\n                     case Token.GT:\n                     case Token.LE:\n                     case Token.GE:\n                         result \u003d false;\n                         break;\n                     default:\n-                        return;\n+                        return n;\n                 }\n             }\n             break;\n         case Token.NULL:\n             if (undefinedRight) {\n                 result \u003d (op \u003d\u003d Token.EQ);\n                 break;\n             }\n         case Token.TRUE:\n         case Token.FALSE:\n             if (undefinedRight) {\n                 result \u003d false;\n                 break;\n             }\n         case Token.THIS:\n             int tt \u003d right.getType();\n-            if (tt !\u003d Token.THIS \u0026\u0026 tt !\u003d Token.TRUE \u0026\u0026 tt !\u003d Token.FALSE \u0026\u0026 tt !\u003d Token.NULL)\n-                return;\n+            if (tt !\u003d Token.THIS \u0026\u0026 tt !\u003d Token.TRUE \u0026\u0026 tt !\u003d Token.FALSE \u0026\u0026 tt !\u003d Token.NULL) {\n+                return n;\n+            }\n             switch(op) {\n                 case Token.SHEQ:\n                 case Token.EQ:\n                     result \u003d left.getType() \u003d\u003d right.getType();\n                     break;\n                 case Token.SHNE:\n                 case Token.NE:\n                     result \u003d left.getType() !\u003d right.getType();\n                     break;\n                 default:\n-                    return;\n+                    return n;\n             }\n             break;\n         case Token.STRING:\n             if (undefinedRight) {\n                 result \u003d false;\n                 break;\n             }\n             if (Token.STRING !\u003d right.getType()) {\n-                return;\n+                return n;\n             }\n             switch(op) {\n                 case Token.SHEQ:\n                 case Token.EQ:\n                     result \u003d left.getString().equals(right.getString());\n                     break;\n                 case Token.SHNE:\n                 case Token.NE:\n                     result \u003d !left.getString().equals(right.getString());\n                     break;\n                 default:\n-                    return;\n+                    return n;\n             }\n             break;\n         case Token.NUMBER:\n             if (undefinedRight) {\n                 result \u003d false;\n                 break;\n             }\n             if (Token.NUMBER !\u003d right.getType()) {\n-                return;\n+                return n;\n             }\n             double lv \u003d left.getDouble();\n             double rv \u003d right.getDouble();\n             switch(op) {\n                 case Token.SHEQ:\n                 case Token.EQ:\n                     result \u003d lv \u003d\u003d rv;\n                     break;\n                 case Token.SHNE:\n                 case Token.NE:\n                     result \u003d lv !\u003d rv;\n                     break;\n                 case Token.LE:\n                     result \u003d lv \u003c\u003d rv;\n                     break;\n                 case Token.LT:\n                     result \u003d lv \u003c rv;\n                     break;\n                 case Token.GE:\n                     result \u003d lv \u003e\u003d rv;\n                     break;\n                 case Token.GT:\n                     result \u003d lv \u003e rv;\n                     break;\n                 default:\n-                    return;\n+                    return n;\n             }\n             break;\n         case Token.NAME:\n             if (rightLiteral) {\n                 boolean undefinedLeft \u003d (left.getString().equals(\"undefined\"));\n                 if (undefinedLeft) {\n                     boolean nullRight \u003d (Token.NULL \u003d\u003d right.getType());\n                     boolean equivalent \u003d undefinedRight || nullRight;\n                     switch(op) {\n                         case Token.EQ:\n                             result \u003d equivalent;\n                             break;\n                         case Token.NE:\n                             result \u003d !equivalent;\n                             break;\n                         case Token.SHEQ:\n                             result \u003d undefinedRight;\n                             break;\n                         case Token.SHNE:\n                             result \u003d !undefinedRight;\n                             break;\n                         case Token.LT:\n                         case Token.GT:\n                         case Token.LE:\n                         case Token.GE:\n                             result \u003d false;\n                             break;\n                         default:\n-                            return;\n+                            return n;\n                     }\n                     break;\n                 }\n             }\n             if (Token.NAME !\u003d right.getType()) {\n-                return;\n+                return n;\n             }\n             String ln \u003d left.getString();\n             String rn \u003d right.getString();\n             if (!ln.equals(rn)) {\n-                return;\n+                return n;\n             }\n             switch(op) {\n                 case Token.LT:\n                 case Token.GT:\n                     result \u003d false;\n                     break;\n                 default:\n-                    return;\n+                    return n;\n             }\n             break;\n         default:\n-            return;\n+            return n;\n     }\n-    parent.replaceChild(n, new Node(result ? Token.TRUE : Token.FALSE));\n-    t.getCompiler().reportCodeChange();\n+    Node newNode \u003d new Node(result ? Token.TRUE : Token.FALSE);\n+    n.getParent().replaceChild(n, newNode);\n+    reportCodeChange();\n+    return newNode;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nChange on 2010/06/22 by nicksantos\n\n\tvariable coalescing better be run AFTER ambiguate properties, and\n\tafter denormalization.\n\n\tR\u003djohnlenz\n\tDELTA\u003d36  (20 added, 16 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d34005\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@248 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "6/22/10, 4:00 PM",
          "commitName": "c9e89727dc8063d087d28e42629606f4fd74a6e5",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "6/21/10, 12:59 PM",
          "commitNameOld": "5f09a76531fb4f6e182238411017e6fc7e74ad16",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 1.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"fallthrough\")\nprivate Node tryFoldComparison(Node n, Node left, Node right) {\n    if (!NodeUtil.isLiteralValue(left) || !NodeUtil.isLiteralValue(right)) {\n        if (n.getType() !\u003d Token.GT \u0026\u0026 n.getType() !\u003d Token.LT) {\n            return n;\n        }\n    }\n    int op \u003d n.getType();\n    boolean result;\n    boolean rightLiteral \u003d NodeUtil.isLiteralValue(right);\n    boolean undefinedRight \u003d ((Token.NAME \u003d\u003d right.getType() \u0026\u0026 right.getString().equals(\"undefined\")) || (Token.VOID \u003d\u003d right.getType() \u0026\u0026 NodeUtil.isLiteralValue(right.getFirstChild())));\n    switch(left.getType()) {\n        case Token.VOID:\n            if (!NodeUtil.isLiteralValue(left.getFirstChild())) {\n                return n;\n            } else if (!rightLiteral) {\n                return n;\n            } else {\n                boolean nullRight \u003d (Token.NULL \u003d\u003d right.getType());\n                boolean equivalent \u003d undefinedRight || nullRight;\n                switch(op) {\n                    case Token.EQ:\n                        result \u003d equivalent;\n                        break;\n                    case Token.NE:\n                        result \u003d !equivalent;\n                        break;\n                    case Token.SHEQ:\n                        result \u003d undefinedRight;\n                        break;\n                    case Token.SHNE:\n                        result \u003d !undefinedRight;\n                        break;\n                    case Token.LT:\n                    case Token.GT:\n                    case Token.LE:\n                    case Token.GE:\n                        result \u003d false;\n                        break;\n                    default:\n                        return n;\n                }\n            }\n            break;\n        case Token.NULL:\n            if (undefinedRight) {\n                result \u003d (op \u003d\u003d Token.EQ);\n                break;\n            }\n        case Token.TRUE:\n        case Token.FALSE:\n            if (undefinedRight) {\n                result \u003d false;\n                break;\n            }\n        case Token.THIS:\n            int tt \u003d right.getType();\n            if (tt !\u003d Token.THIS \u0026\u0026 tt !\u003d Token.TRUE \u0026\u0026 tt !\u003d Token.FALSE \u0026\u0026 tt !\u003d Token.NULL) {\n                return n;\n            }\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    result \u003d left.getType() \u003d\u003d right.getType();\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    result \u003d left.getType() !\u003d right.getType();\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        case Token.STRING:\n            if (undefinedRight) {\n                result \u003d false;\n                break;\n            }\n            if (Token.STRING !\u003d right.getType()) {\n                return n;\n            }\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    result \u003d left.getString().equals(right.getString());\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    result \u003d !left.getString().equals(right.getString());\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        case Token.NUMBER:\n            if (undefinedRight) {\n                result \u003d false;\n                break;\n            }\n            if (Token.NUMBER !\u003d right.getType()) {\n                return n;\n            }\n            double lv \u003d left.getDouble();\n            double rv \u003d right.getDouble();\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    result \u003d lv \u003d\u003d rv;\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    result \u003d lv !\u003d rv;\n                    break;\n                case Token.LE:\n                    result \u003d lv \u003c\u003d rv;\n                    break;\n                case Token.LT:\n                    result \u003d lv \u003c rv;\n                    break;\n                case Token.GE:\n                    result \u003d lv \u003e\u003d rv;\n                    break;\n                case Token.GT:\n                    result \u003d lv \u003e rv;\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        case Token.NAME:\n            if (rightLiteral) {\n                boolean undefinedLeft \u003d (left.getString().equals(\"undefined\"));\n                if (undefinedLeft) {\n                    boolean nullRight \u003d (Token.NULL \u003d\u003d right.getType());\n                    boolean equivalent \u003d undefinedRight || nullRight;\n                    switch(op) {\n                        case Token.EQ:\n                            result \u003d equivalent;\n                            break;\n                        case Token.NE:\n                            result \u003d !equivalent;\n                            break;\n                        case Token.SHEQ:\n                            result \u003d undefinedRight;\n                            break;\n                        case Token.SHNE:\n                            result \u003d !undefinedRight;\n                            break;\n                        case Token.LT:\n                        case Token.GT:\n                        case Token.LE:\n                        case Token.GE:\n                            result \u003d false;\n                            break;\n                        default:\n                            return n;\n                    }\n                    break;\n                }\n            }\n            if (Token.NAME !\u003d right.getType()) {\n                return n;\n            }\n            String ln \u003d left.getString();\n            String rn \u003d right.getString();\n            if (!ln.equals(rn)) {\n                return n;\n            }\n            switch(op) {\n                case Token.LT:\n                case Token.GT:\n                    result \u003d false;\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        default:\n            return n;\n    }\n    Node newNode \u003d new Node(result ? Token.TRUE : Token.FALSE);\n    n.getParent().replaceChild(n, newNode);\n    reportCodeChange();\n    return newNode;\n}",
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
          "functionStartLine": 702,
          "functionName": "tryFoldComparison",
          "functionAnnotation": "@SuppressWarnings(\"fallthrough\")",
          "functionDoc": "Try to fold comparison nodes, e.g \u003d\u003d\n",
          "diff": "@@ -1,177 +1,185 @@\n @SuppressWarnings(\"fallthrough\")\n-void tryFoldComparison(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n+private Node tryFoldComparison(Node n, Node left, Node right) {\n+    if (!NodeUtil.isLiteralValue(left) || !NodeUtil.isLiteralValue(right)) {\n+        if (n.getType() !\u003d Token.GT \u0026\u0026 n.getType() !\u003d Token.LT) {\n+            return n;\n+        }\n+    }\n     int op \u003d n.getType();\n     boolean result;\n     boolean rightLiteral \u003d NodeUtil.isLiteralValue(right);\n     boolean undefinedRight \u003d ((Token.NAME \u003d\u003d right.getType() \u0026\u0026 right.getString().equals(\"undefined\")) || (Token.VOID \u003d\u003d right.getType() \u0026\u0026 NodeUtil.isLiteralValue(right.getFirstChild())));\n     switch(left.getType()) {\n         case Token.VOID:\n             if (!NodeUtil.isLiteralValue(left.getFirstChild())) {\n-                return;\n+                return n;\n             } else if (!rightLiteral) {\n-                return;\n+                return n;\n             } else {\n                 boolean nullRight \u003d (Token.NULL \u003d\u003d right.getType());\n                 boolean equivalent \u003d undefinedRight || nullRight;\n                 switch(op) {\n                     case Token.EQ:\n                         result \u003d equivalent;\n                         break;\n                     case Token.NE:\n                         result \u003d !equivalent;\n                         break;\n                     case Token.SHEQ:\n                         result \u003d undefinedRight;\n                         break;\n                     case Token.SHNE:\n                         result \u003d !undefinedRight;\n                         break;\n                     case Token.LT:\n                     case Token.GT:\n                     case Token.LE:\n                     case Token.GE:\n                         result \u003d false;\n                         break;\n                     default:\n-                        return;\n+                        return n;\n                 }\n             }\n             break;\n         case Token.NULL:\n             if (undefinedRight) {\n                 result \u003d (op \u003d\u003d Token.EQ);\n                 break;\n             }\n         case Token.TRUE:\n         case Token.FALSE:\n             if (undefinedRight) {\n                 result \u003d false;\n                 break;\n             }\n         case Token.THIS:\n             int tt \u003d right.getType();\n-            if (tt !\u003d Token.THIS \u0026\u0026 tt !\u003d Token.TRUE \u0026\u0026 tt !\u003d Token.FALSE \u0026\u0026 tt !\u003d Token.NULL)\n-                return;\n+            if (tt !\u003d Token.THIS \u0026\u0026 tt !\u003d Token.TRUE \u0026\u0026 tt !\u003d Token.FALSE \u0026\u0026 tt !\u003d Token.NULL) {\n+                return n;\n+            }\n             switch(op) {\n                 case Token.SHEQ:\n                 case Token.EQ:\n                     result \u003d left.getType() \u003d\u003d right.getType();\n                     break;\n                 case Token.SHNE:\n                 case Token.NE:\n                     result \u003d left.getType() !\u003d right.getType();\n                     break;\n                 default:\n-                    return;\n+                    return n;\n             }\n             break;\n         case Token.STRING:\n             if (undefinedRight) {\n                 result \u003d false;\n                 break;\n             }\n             if (Token.STRING !\u003d right.getType()) {\n-                return;\n+                return n;\n             }\n             switch(op) {\n                 case Token.SHEQ:\n                 case Token.EQ:\n                     result \u003d left.getString().equals(right.getString());\n                     break;\n                 case Token.SHNE:\n                 case Token.NE:\n                     result \u003d !left.getString().equals(right.getString());\n                     break;\n                 default:\n-                    return;\n+                    return n;\n             }\n             break;\n         case Token.NUMBER:\n             if (undefinedRight) {\n                 result \u003d false;\n                 break;\n             }\n             if (Token.NUMBER !\u003d right.getType()) {\n-                return;\n+                return n;\n             }\n             double lv \u003d left.getDouble();\n             double rv \u003d right.getDouble();\n             switch(op) {\n                 case Token.SHEQ:\n                 case Token.EQ:\n                     result \u003d lv \u003d\u003d rv;\n                     break;\n                 case Token.SHNE:\n                 case Token.NE:\n                     result \u003d lv !\u003d rv;\n                     break;\n                 case Token.LE:\n                     result \u003d lv \u003c\u003d rv;\n                     break;\n                 case Token.LT:\n                     result \u003d lv \u003c rv;\n                     break;\n                 case Token.GE:\n                     result \u003d lv \u003e\u003d rv;\n                     break;\n                 case Token.GT:\n                     result \u003d lv \u003e rv;\n                     break;\n                 default:\n-                    return;\n+                    return n;\n             }\n             break;\n         case Token.NAME:\n             if (rightLiteral) {\n                 boolean undefinedLeft \u003d (left.getString().equals(\"undefined\"));\n                 if (undefinedLeft) {\n                     boolean nullRight \u003d (Token.NULL \u003d\u003d right.getType());\n                     boolean equivalent \u003d undefinedRight || nullRight;\n                     switch(op) {\n                         case Token.EQ:\n                             result \u003d equivalent;\n                             break;\n                         case Token.NE:\n                             result \u003d !equivalent;\n                             break;\n                         case Token.SHEQ:\n                             result \u003d undefinedRight;\n                             break;\n                         case Token.SHNE:\n                             result \u003d !undefinedRight;\n                             break;\n                         case Token.LT:\n                         case Token.GT:\n                         case Token.LE:\n                         case Token.GE:\n                             result \u003d false;\n                             break;\n                         default:\n-                            return;\n+                            return n;\n                     }\n                     break;\n                 }\n             }\n             if (Token.NAME !\u003d right.getType()) {\n-                return;\n+                return n;\n             }\n             String ln \u003d left.getString();\n             String rn \u003d right.getString();\n             if (!ln.equals(rn)) {\n-                return;\n+                return n;\n             }\n             switch(op) {\n                 case Token.LT:\n                 case Token.GT:\n                     result \u003d false;\n                     break;\n                 default:\n-                    return;\n+                    return n;\n             }\n             break;\n         default:\n-            return;\n+            return n;\n     }\n-    parent.replaceChild(n, new Node(result ? Token.TRUE : Token.FALSE));\n-    t.getCompiler().reportCodeChange();\n+    Node newNode \u003d new Node(result ? Token.TRUE : Token.FALSE);\n+    n.getParent().replaceChild(n, newNode);\n+    reportCodeChange();\n+    return newNode;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "\nChange on 2010/06/22 by nicksantos\n\n\tvariable coalescing better be run AFTER ambiguate properties, and\n\tafter denormalization.\n\n\tR\u003djohnlenz\n\tDELTA\u003d36  (20 added, 16 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d34005\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@248 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "6/22/10, 4:00 PM",
          "commitName": "c9e89727dc8063d087d28e42629606f4fd74a6e5",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "6/21/10, 12:59 PM",
          "commitNameOld": "5f09a76531fb4f6e182238411017e6fc7e74ad16",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 1.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"fallthrough\")\nprivate Node tryFoldComparison(Node n, Node left, Node right) {\n    if (!NodeUtil.isLiteralValue(left) || !NodeUtil.isLiteralValue(right)) {\n        if (n.getType() !\u003d Token.GT \u0026\u0026 n.getType() !\u003d Token.LT) {\n            return n;\n        }\n    }\n    int op \u003d n.getType();\n    boolean result;\n    boolean rightLiteral \u003d NodeUtil.isLiteralValue(right);\n    boolean undefinedRight \u003d ((Token.NAME \u003d\u003d right.getType() \u0026\u0026 right.getString().equals(\"undefined\")) || (Token.VOID \u003d\u003d right.getType() \u0026\u0026 NodeUtil.isLiteralValue(right.getFirstChild())));\n    switch(left.getType()) {\n        case Token.VOID:\n            if (!NodeUtil.isLiteralValue(left.getFirstChild())) {\n                return n;\n            } else if (!rightLiteral) {\n                return n;\n            } else {\n                boolean nullRight \u003d (Token.NULL \u003d\u003d right.getType());\n                boolean equivalent \u003d undefinedRight || nullRight;\n                switch(op) {\n                    case Token.EQ:\n                        result \u003d equivalent;\n                        break;\n                    case Token.NE:\n                        result \u003d !equivalent;\n                        break;\n                    case Token.SHEQ:\n                        result \u003d undefinedRight;\n                        break;\n                    case Token.SHNE:\n                        result \u003d !undefinedRight;\n                        break;\n                    case Token.LT:\n                    case Token.GT:\n                    case Token.LE:\n                    case Token.GE:\n                        result \u003d false;\n                        break;\n                    default:\n                        return n;\n                }\n            }\n            break;\n        case Token.NULL:\n            if (undefinedRight) {\n                result \u003d (op \u003d\u003d Token.EQ);\n                break;\n            }\n        case Token.TRUE:\n        case Token.FALSE:\n            if (undefinedRight) {\n                result \u003d false;\n                break;\n            }\n        case Token.THIS:\n            int tt \u003d right.getType();\n            if (tt !\u003d Token.THIS \u0026\u0026 tt !\u003d Token.TRUE \u0026\u0026 tt !\u003d Token.FALSE \u0026\u0026 tt !\u003d Token.NULL) {\n                return n;\n            }\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    result \u003d left.getType() \u003d\u003d right.getType();\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    result \u003d left.getType() !\u003d right.getType();\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        case Token.STRING:\n            if (undefinedRight) {\n                result \u003d false;\n                break;\n            }\n            if (Token.STRING !\u003d right.getType()) {\n                return n;\n            }\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    result \u003d left.getString().equals(right.getString());\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    result \u003d !left.getString().equals(right.getString());\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        case Token.NUMBER:\n            if (undefinedRight) {\n                result \u003d false;\n                break;\n            }\n            if (Token.NUMBER !\u003d right.getType()) {\n                return n;\n            }\n            double lv \u003d left.getDouble();\n            double rv \u003d right.getDouble();\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    result \u003d lv \u003d\u003d rv;\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    result \u003d lv !\u003d rv;\n                    break;\n                case Token.LE:\n                    result \u003d lv \u003c\u003d rv;\n                    break;\n                case Token.LT:\n                    result \u003d lv \u003c rv;\n                    break;\n                case Token.GE:\n                    result \u003d lv \u003e\u003d rv;\n                    break;\n                case Token.GT:\n                    result \u003d lv \u003e rv;\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        case Token.NAME:\n            if (rightLiteral) {\n                boolean undefinedLeft \u003d (left.getString().equals(\"undefined\"));\n                if (undefinedLeft) {\n                    boolean nullRight \u003d (Token.NULL \u003d\u003d right.getType());\n                    boolean equivalent \u003d undefinedRight || nullRight;\n                    switch(op) {\n                        case Token.EQ:\n                            result \u003d equivalent;\n                            break;\n                        case Token.NE:\n                            result \u003d !equivalent;\n                            break;\n                        case Token.SHEQ:\n                            result \u003d undefinedRight;\n                            break;\n                        case Token.SHNE:\n                            result \u003d !undefinedRight;\n                            break;\n                        case Token.LT:\n                        case Token.GT:\n                        case Token.LE:\n                        case Token.GE:\n                            result \u003d false;\n                            break;\n                        default:\n                            return n;\n                    }\n                    break;\n                }\n            }\n            if (Token.NAME !\u003d right.getType()) {\n                return n;\n            }\n            String ln \u003d left.getString();\n            String rn \u003d right.getString();\n            if (!ln.equals(rn)) {\n                return n;\n            }\n            switch(op) {\n                case Token.LT:\n                case Token.GT:\n                    result \u003d false;\n                    break;\n                default:\n                    return n;\n            }\n            break;\n        default:\n            return n;\n    }\n    Node newNode \u003d new Node(result ? Token.TRUE : Token.FALSE);\n    n.getParent().replaceChild(n, newNode);\n    reportCodeChange();\n    return newNode;\n}",
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
          "functionStartLine": 702,
          "functionName": "tryFoldComparison",
          "functionAnnotation": "@SuppressWarnings(\"fallthrough\")",
          "functionDoc": "Try to fold comparison nodes, e.g \u003d\u003d\n",
          "diff": "@@ -1,177 +1,185 @@\n @SuppressWarnings(\"fallthrough\")\n-void tryFoldComparison(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n+private Node tryFoldComparison(Node n, Node left, Node right) {\n+    if (!NodeUtil.isLiteralValue(left) || !NodeUtil.isLiteralValue(right)) {\n+        if (n.getType() !\u003d Token.GT \u0026\u0026 n.getType() !\u003d Token.LT) {\n+            return n;\n+        }\n+    }\n     int op \u003d n.getType();\n     boolean result;\n     boolean rightLiteral \u003d NodeUtil.isLiteralValue(right);\n     boolean undefinedRight \u003d ((Token.NAME \u003d\u003d right.getType() \u0026\u0026 right.getString().equals(\"undefined\")) || (Token.VOID \u003d\u003d right.getType() \u0026\u0026 NodeUtil.isLiteralValue(right.getFirstChild())));\n     switch(left.getType()) {\n         case Token.VOID:\n             if (!NodeUtil.isLiteralValue(left.getFirstChild())) {\n-                return;\n+                return n;\n             } else if (!rightLiteral) {\n-                return;\n+                return n;\n             } else {\n                 boolean nullRight \u003d (Token.NULL \u003d\u003d right.getType());\n                 boolean equivalent \u003d undefinedRight || nullRight;\n                 switch(op) {\n                     case Token.EQ:\n                         result \u003d equivalent;\n                         break;\n                     case Token.NE:\n                         result \u003d !equivalent;\n                         break;\n                     case Token.SHEQ:\n                         result \u003d undefinedRight;\n                         break;\n                     case Token.SHNE:\n                         result \u003d !undefinedRight;\n                         break;\n                     case Token.LT:\n                     case Token.GT:\n                     case Token.LE:\n                     case Token.GE:\n                         result \u003d false;\n                         break;\n                     default:\n-                        return;\n+                        return n;\n                 }\n             }\n             break;\n         case Token.NULL:\n             if (undefinedRight) {\n                 result \u003d (op \u003d\u003d Token.EQ);\n                 break;\n             }\n         case Token.TRUE:\n         case Token.FALSE:\n             if (undefinedRight) {\n                 result \u003d false;\n                 break;\n             }\n         case Token.THIS:\n             int tt \u003d right.getType();\n-            if (tt !\u003d Token.THIS \u0026\u0026 tt !\u003d Token.TRUE \u0026\u0026 tt !\u003d Token.FALSE \u0026\u0026 tt !\u003d Token.NULL)\n-                return;\n+            if (tt !\u003d Token.THIS \u0026\u0026 tt !\u003d Token.TRUE \u0026\u0026 tt !\u003d Token.FALSE \u0026\u0026 tt !\u003d Token.NULL) {\n+                return n;\n+            }\n             switch(op) {\n                 case Token.SHEQ:\n                 case Token.EQ:\n                     result \u003d left.getType() \u003d\u003d right.getType();\n                     break;\n                 case Token.SHNE:\n                 case Token.NE:\n                     result \u003d left.getType() !\u003d right.getType();\n                     break;\n                 default:\n-                    return;\n+                    return n;\n             }\n             break;\n         case Token.STRING:\n             if (undefinedRight) {\n                 result \u003d false;\n                 break;\n             }\n             if (Token.STRING !\u003d right.getType()) {\n-                return;\n+                return n;\n             }\n             switch(op) {\n                 case Token.SHEQ:\n                 case Token.EQ:\n                     result \u003d left.getString().equals(right.getString());\n                     break;\n                 case Token.SHNE:\n                 case Token.NE:\n                     result \u003d !left.getString().equals(right.getString());\n                     break;\n                 default:\n-                    return;\n+                    return n;\n             }\n             break;\n         case Token.NUMBER:\n             if (undefinedRight) {\n                 result \u003d false;\n                 break;\n             }\n             if (Token.NUMBER !\u003d right.getType()) {\n-                return;\n+                return n;\n             }\n             double lv \u003d left.getDouble();\n             double rv \u003d right.getDouble();\n             switch(op) {\n                 case Token.SHEQ:\n                 case Token.EQ:\n                     result \u003d lv \u003d\u003d rv;\n                     break;\n                 case Token.SHNE:\n                 case Token.NE:\n                     result \u003d lv !\u003d rv;\n                     break;\n                 case Token.LE:\n                     result \u003d lv \u003c\u003d rv;\n                     break;\n                 case Token.LT:\n                     result \u003d lv \u003c rv;\n                     break;\n                 case Token.GE:\n                     result \u003d lv \u003e\u003d rv;\n                     break;\n                 case Token.GT:\n                     result \u003d lv \u003e rv;\n                     break;\n                 default:\n-                    return;\n+                    return n;\n             }\n             break;\n         case Token.NAME:\n             if (rightLiteral) {\n                 boolean undefinedLeft \u003d (left.getString().equals(\"undefined\"));\n                 if (undefinedLeft) {\n                     boolean nullRight \u003d (Token.NULL \u003d\u003d right.getType());\n                     boolean equivalent \u003d undefinedRight || nullRight;\n                     switch(op) {\n                         case Token.EQ:\n                             result \u003d equivalent;\n                             break;\n                         case Token.NE:\n                             result \u003d !equivalent;\n                             break;\n                         case Token.SHEQ:\n                             result \u003d undefinedRight;\n                             break;\n                         case Token.SHNE:\n                             result \u003d !undefinedRight;\n                             break;\n                         case Token.LT:\n                         case Token.GT:\n                         case Token.LE:\n                         case Token.GE:\n                             result \u003d false;\n                             break;\n                         default:\n-                            return;\n+                            return n;\n                     }\n                     break;\n                 }\n             }\n             if (Token.NAME !\u003d right.getType()) {\n-                return;\n+                return n;\n             }\n             String ln \u003d left.getString();\n             String rn \u003d right.getString();\n             if (!ln.equals(rn)) {\n-                return;\n+                return n;\n             }\n             switch(op) {\n                 case Token.LT:\n                 case Token.GT:\n                     result \u003d false;\n                     break;\n                 default:\n-                    return;\n+                    return n;\n             }\n             break;\n         default:\n-            return;\n+            return n;\n     }\n-    parent.replaceChild(n, new Node(result ? Token.TRUE : Token.FALSE));\n-    t.getCompiler().reportCodeChange();\n+    Node newNode \u003d new Node(result ? Token.TRUE : Token.FALSE);\n+    n.getParent().replaceChild(n, newNode);\n+    reportCodeChange();\n+    return newNode;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[t-NodeTraversal, n-Node, left-Node, right-Node, parent-Node]",
            "newValue": "[n-Node, left-Node, right-Node]"
          }
        }
      ]
    },
    "ffc106663b5a9a282c44f4976bec93645c03668c": {
      "type": "Yformatchange",
      "commitMessage": "Split and fold constant comma expressions. (John)\nR\u003dAlan\nDELTA\u003d51  (51 added, 0 deleted, 0 changed)\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@145 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/19/10, 2:34 PM",
      "commitName": "ffc106663b5a9a282c44f4976bec93645c03668c",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "3/10/10, 9:49 PM",
      "commitNameOld": "9a185e0c06b0a595ca0e6fb7990945cd0114a12f",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 8.66,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"fallthrough\")\nvoid tryFoldComparison(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n    int op \u003d n.getType();\n    boolean result;\n    boolean rightLiteral \u003d NodeUtil.isLiteralValue(right);\n    boolean undefinedRight \u003d ((Token.NAME \u003d\u003d right.getType() \u0026\u0026 right.getString().equals(\"undefined\")) || (Token.VOID \u003d\u003d right.getType() \u0026\u0026 NodeUtil.isLiteralValue(right.getFirstChild())));\n    switch(left.getType()) {\n        case Token.VOID:\n            if (!NodeUtil.isLiteralValue(left.getFirstChild())) {\n                return;\n            } else if (!rightLiteral) {\n                return;\n            } else {\n                boolean nullRight \u003d (Token.NULL \u003d\u003d right.getType());\n                boolean equivalent \u003d undefinedRight || nullRight;\n                switch(op) {\n                    case Token.EQ:\n                        result \u003d equivalent;\n                        break;\n                    case Token.NE:\n                        result \u003d !equivalent;\n                        break;\n                    case Token.SHEQ:\n                        result \u003d undefinedRight;\n                        break;\n                    case Token.SHNE:\n                        result \u003d !undefinedRight;\n                        break;\n                    case Token.LT:\n                    case Token.GT:\n                    case Token.LE:\n                    case Token.GE:\n                        result \u003d false;\n                        break;\n                    default:\n                        return;\n                }\n            }\n            break;\n        case Token.NULL:\n            if (undefinedRight) {\n                result \u003d (op \u003d\u003d Token.EQ);\n                break;\n            }\n        case Token.TRUE:\n        case Token.FALSE:\n            if (undefinedRight) {\n                result \u003d false;\n                break;\n            }\n        case Token.THIS:\n            int tt \u003d right.getType();\n            if (tt !\u003d Token.THIS \u0026\u0026 tt !\u003d Token.TRUE \u0026\u0026 tt !\u003d Token.FALSE \u0026\u0026 tt !\u003d Token.NULL)\n                return;\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    result \u003d left.getType() \u003d\u003d right.getType();\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    result \u003d left.getType() !\u003d right.getType();\n                    break;\n                default:\n                    return;\n            }\n            break;\n        case Token.STRING:\n            if (undefinedRight) {\n                result \u003d false;\n                break;\n            }\n            if (Token.STRING !\u003d right.getType()) {\n                return;\n            }\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    result \u003d left.getString().equals(right.getString());\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    result \u003d !left.getString().equals(right.getString());\n                    break;\n                default:\n                    return;\n            }\n            break;\n        case Token.NUMBER:\n            if (undefinedRight) {\n                result \u003d false;\n                break;\n            }\n            if (Token.NUMBER !\u003d right.getType()) {\n                return;\n            }\n            double lv \u003d left.getDouble();\n            double rv \u003d right.getDouble();\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    result \u003d lv \u003d\u003d rv;\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    result \u003d lv !\u003d rv;\n                    break;\n                case Token.LE:\n                    result \u003d lv \u003c\u003d rv;\n                    break;\n                case Token.LT:\n                    result \u003d lv \u003c rv;\n                    break;\n                case Token.GE:\n                    result \u003d lv \u003e\u003d rv;\n                    break;\n                case Token.GT:\n                    result \u003d lv \u003e rv;\n                    break;\n                default:\n                    return;\n            }\n            break;\n        case Token.NAME:\n            if (rightLiteral) {\n                boolean undefinedLeft \u003d (left.getString().equals(\"undefined\"));\n                if (undefinedLeft) {\n                    boolean nullRight \u003d (Token.NULL \u003d\u003d right.getType());\n                    boolean equivalent \u003d undefinedRight || nullRight;\n                    switch(op) {\n                        case Token.EQ:\n                            result \u003d equivalent;\n                            break;\n                        case Token.NE:\n                            result \u003d !equivalent;\n                            break;\n                        case Token.SHEQ:\n                            result \u003d undefinedRight;\n                            break;\n                        case Token.SHNE:\n                            result \u003d !undefinedRight;\n                            break;\n                        case Token.LT:\n                        case Token.GT:\n                        case Token.LE:\n                        case Token.GE:\n                            result \u003d false;\n                            break;\n                        default:\n                            return;\n                    }\n                    break;\n                }\n            }\n            if (Token.NAME !\u003d right.getType()) {\n                return;\n            }\n            String ln \u003d left.getString();\n            String rn \u003d right.getString();\n            if (!ln.equals(rn)) {\n                return;\n            }\n            switch(op) {\n                case Token.LT:\n                case Token.GT:\n                    result \u003d false;\n                    break;\n                default:\n                    return;\n            }\n            break;\n        default:\n            return;\n    }\n    parent.replaceChild(n, new Node(result ? Token.TRUE : Token.FALSE));\n    t.getCompiler().reportCodeChange();\n}",
      "path": "src/com/google/javascript/jscomp/FoldConstants.java",
      "functionStartLine": 1246,
      "functionName": "tryFoldComparison",
      "functionAnnotation": "@SuppressWarnings(\"fallthrough\")",
      "functionDoc": "Try to fold comparison nodes, e.g \u003d\u003d\n",
      "diff": "",
      "extendedDetails": {}
    },
    "9a185e0c06b0a595ca0e6fb7990945cd0114a12f": {
      "type": "Ybodychange",
      "commitMessage": "Run cross module code motion before and after devirtualization. (Alan)\n\nMaking ErrorPass package-private. (Brad)\n\nImprove strict equality comparisons. (John)\n\nUpdate comments and minor cleanup of Normalize. (John)\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@133 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/10/10, 9:49 PM",
      "commitName": "9a185e0c06b0a595ca0e6fb7990945cd0114a12f",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "2/9/10, 1:33 PM",
      "commitNameOld": "113a08f59e8116fb11a7d4ceb11d5bb09b74ac3c",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 29.34,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"fallthrough\")\nvoid tryFoldComparison(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n    int op \u003d n.getType();\n    boolean result;\n    boolean rightLiteral \u003d NodeUtil.isLiteralValue(right);\n    boolean undefinedRight \u003d ((Token.NAME \u003d\u003d right.getType() \u0026\u0026 right.getString().equals(\"undefined\")) || (Token.VOID \u003d\u003d right.getType() \u0026\u0026 NodeUtil.isLiteralValue(right.getFirstChild())));\n    switch(left.getType()) {\n        case Token.VOID:\n            if (!NodeUtil.isLiteralValue(left.getFirstChild())) {\n                return;\n            } else if (!rightLiteral) {\n                return;\n            } else {\n                boolean nullRight \u003d (Token.NULL \u003d\u003d right.getType());\n                boolean equivalent \u003d undefinedRight || nullRight;\n                switch(op) {\n                    case Token.EQ:\n                        result \u003d equivalent;\n                        break;\n                    case Token.NE:\n                        result \u003d !equivalent;\n                        break;\n                    case Token.SHEQ:\n                        result \u003d undefinedRight;\n                        break;\n                    case Token.SHNE:\n                        result \u003d !undefinedRight;\n                        break;\n                    case Token.LT:\n                    case Token.GT:\n                    case Token.LE:\n                    case Token.GE:\n                        result \u003d false;\n                        break;\n                    default:\n                        return;\n                }\n            }\n            break;\n        case Token.NULL:\n            if (undefinedRight) {\n                result \u003d (op \u003d\u003d Token.EQ);\n                break;\n            }\n        case Token.TRUE:\n        case Token.FALSE:\n            if (undefinedRight) {\n                result \u003d false;\n                break;\n            }\n        case Token.THIS:\n            int tt \u003d right.getType();\n            if (tt !\u003d Token.THIS \u0026\u0026 tt !\u003d Token.TRUE \u0026\u0026 tt !\u003d Token.FALSE \u0026\u0026 tt !\u003d Token.NULL)\n                return;\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    result \u003d left.getType() \u003d\u003d right.getType();\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    result \u003d left.getType() !\u003d right.getType();\n                    break;\n                default:\n                    return;\n            }\n            break;\n        case Token.STRING:\n            if (undefinedRight) {\n                result \u003d false;\n                break;\n            }\n            if (Token.STRING !\u003d right.getType()) {\n                return;\n            }\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    result \u003d left.getString().equals(right.getString());\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    result \u003d !left.getString().equals(right.getString());\n                    break;\n                default:\n                    return;\n            }\n            break;\n        case Token.NUMBER:\n            if (undefinedRight) {\n                result \u003d false;\n                break;\n            }\n            if (Token.NUMBER !\u003d right.getType()) {\n                return;\n            }\n            double lv \u003d left.getDouble();\n            double rv \u003d right.getDouble();\n            switch(op) {\n                case Token.SHEQ:\n                case Token.EQ:\n                    result \u003d lv \u003d\u003d rv;\n                    break;\n                case Token.SHNE:\n                case Token.NE:\n                    result \u003d lv !\u003d rv;\n                    break;\n                case Token.LE:\n                    result \u003d lv \u003c\u003d rv;\n                    break;\n                case Token.LT:\n                    result \u003d lv \u003c rv;\n                    break;\n                case Token.GE:\n                    result \u003d lv \u003e\u003d rv;\n                    break;\n                case Token.GT:\n                    result \u003d lv \u003e rv;\n                    break;\n                default:\n                    return;\n            }\n            break;\n        case Token.NAME:\n            if (rightLiteral) {\n                boolean undefinedLeft \u003d (left.getString().equals(\"undefined\"));\n                if (undefinedLeft) {\n                    boolean nullRight \u003d (Token.NULL \u003d\u003d right.getType());\n                    boolean equivalent \u003d undefinedRight || nullRight;\n                    switch(op) {\n                        case Token.EQ:\n                            result \u003d equivalent;\n                            break;\n                        case Token.NE:\n                            result \u003d !equivalent;\n                            break;\n                        case Token.SHEQ:\n                            result \u003d undefinedRight;\n                            break;\n                        case Token.SHNE:\n                            result \u003d !undefinedRight;\n                            break;\n                        case Token.LT:\n                        case Token.GT:\n                        case Token.LE:\n                        case Token.GE:\n                            result \u003d false;\n                            break;\n                        default:\n                            return;\n                    }\n                    break;\n                }\n            }\n            if (Token.NAME !\u003d right.getType()) {\n                return;\n            }\n            String ln \u003d left.getString();\n            String rn \u003d right.getString();\n            if (!ln.equals(rn)) {\n                return;\n            }\n            switch(op) {\n                case Token.LT:\n                case Token.GT:\n                    result \u003d false;\n                    break;\n                default:\n                    return;\n            }\n            break;\n        default:\n            return;\n    }\n    parent.replaceChild(n, new Node(result ? Token.TRUE : Token.FALSE));\n    t.getCompiler().reportCodeChange();\n}",
      "path": "src/com/google/javascript/jscomp/FoldConstants.java",
      "functionStartLine": 1218,
      "functionName": "tryFoldComparison",
      "functionAnnotation": "@SuppressWarnings(\"fallthrough\")",
      "functionDoc": "Try to fold comparison nodes, e.g \u003d\u003d\n",
      "diff": "@@ -1,171 +1,177 @@\n @SuppressWarnings(\"fallthrough\")\n void tryFoldComparison(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n     int op \u003d n.getType();\n     boolean result;\n     boolean rightLiteral \u003d NodeUtil.isLiteralValue(right);\n     boolean undefinedRight \u003d ((Token.NAME \u003d\u003d right.getType() \u0026\u0026 right.getString().equals(\"undefined\")) || (Token.VOID \u003d\u003d right.getType() \u0026\u0026 NodeUtil.isLiteralValue(right.getFirstChild())));\n     switch(left.getType()) {\n         case Token.VOID:\n             if (!NodeUtil.isLiteralValue(left.getFirstChild())) {\n                 return;\n             } else if (!rightLiteral) {\n                 return;\n             } else {\n                 boolean nullRight \u003d (Token.NULL \u003d\u003d right.getType());\n                 boolean equivalent \u003d undefinedRight || nullRight;\n                 switch(op) {\n                     case Token.EQ:\n                         result \u003d equivalent;\n                         break;\n                     case Token.NE:\n                         result \u003d !equivalent;\n                         break;\n                     case Token.SHEQ:\n                         result \u003d undefinedRight;\n                         break;\n                     case Token.SHNE:\n                         result \u003d !undefinedRight;\n                         break;\n                     case Token.LT:\n                     case Token.GT:\n                     case Token.LE:\n                     case Token.GE:\n                         result \u003d false;\n                         break;\n                     default:\n                         return;\n                 }\n             }\n             break;\n         case Token.NULL:\n             if (undefinedRight) {\n                 result \u003d (op \u003d\u003d Token.EQ);\n                 break;\n             }\n         case Token.TRUE:\n         case Token.FALSE:\n             if (undefinedRight) {\n                 result \u003d false;\n                 break;\n             }\n         case Token.THIS:\n             int tt \u003d right.getType();\n             if (tt !\u003d Token.THIS \u0026\u0026 tt !\u003d Token.TRUE \u0026\u0026 tt !\u003d Token.FALSE \u0026\u0026 tt !\u003d Token.NULL)\n                 return;\n             switch(op) {\n+                case Token.SHEQ:\n                 case Token.EQ:\n                     result \u003d left.getType() \u003d\u003d right.getType();\n                     break;\n+                case Token.SHNE:\n                 case Token.NE:\n                     result \u003d left.getType() !\u003d right.getType();\n                     break;\n                 default:\n                     return;\n             }\n             break;\n         case Token.STRING:\n             if (undefinedRight) {\n                 result \u003d false;\n                 break;\n             }\n             if (Token.STRING !\u003d right.getType()) {\n                 return;\n             }\n             switch(op) {\n+                case Token.SHEQ:\n                 case Token.EQ:\n                     result \u003d left.getString().equals(right.getString());\n                     break;\n+                case Token.SHNE:\n                 case Token.NE:\n                     result \u003d !left.getString().equals(right.getString());\n                     break;\n                 default:\n                     return;\n             }\n             break;\n         case Token.NUMBER:\n             if (undefinedRight) {\n                 result \u003d false;\n                 break;\n             }\n             if (Token.NUMBER !\u003d right.getType()) {\n                 return;\n             }\n             double lv \u003d left.getDouble();\n             double rv \u003d right.getDouble();\n             switch(op) {\n+                case Token.SHEQ:\n                 case Token.EQ:\n                     result \u003d lv \u003d\u003d rv;\n                     break;\n+                case Token.SHNE:\n                 case Token.NE:\n                     result \u003d lv !\u003d rv;\n                     break;\n                 case Token.LE:\n                     result \u003d lv \u003c\u003d rv;\n                     break;\n                 case Token.LT:\n                     result \u003d lv \u003c rv;\n                     break;\n                 case Token.GE:\n                     result \u003d lv \u003e\u003d rv;\n                     break;\n                 case Token.GT:\n                     result \u003d lv \u003e rv;\n                     break;\n                 default:\n                     return;\n             }\n             break;\n         case Token.NAME:\n             if (rightLiteral) {\n                 boolean undefinedLeft \u003d (left.getString().equals(\"undefined\"));\n                 if (undefinedLeft) {\n                     boolean nullRight \u003d (Token.NULL \u003d\u003d right.getType());\n                     boolean equivalent \u003d undefinedRight || nullRight;\n                     switch(op) {\n                         case Token.EQ:\n                             result \u003d equivalent;\n                             break;\n                         case Token.NE:\n                             result \u003d !equivalent;\n                             break;\n                         case Token.SHEQ:\n                             result \u003d undefinedRight;\n                             break;\n                         case Token.SHNE:\n                             result \u003d !undefinedRight;\n                             break;\n                         case Token.LT:\n                         case Token.GT:\n                         case Token.LE:\n                         case Token.GE:\n                             result \u003d false;\n                             break;\n                         default:\n                             return;\n                     }\n                     break;\n                 }\n             }\n             if (Token.NAME !\u003d right.getType()) {\n                 return;\n             }\n             String ln \u003d left.getString();\n             String rn \u003d right.getString();\n             if (!ln.equals(rn)) {\n                 return;\n             }\n             switch(op) {\n                 case Token.LT:\n                 case Token.GT:\n                     result \u003d false;\n                     break;\n                 default:\n                     return;\n             }\n             break;\n         default:\n             return;\n     }\n     parent.replaceChild(n, new Node(result ? Token.TRUE : Token.FALSE));\n     t.getCompiler().reportCodeChange();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,171 @@\n+@SuppressWarnings(\"fallthrough\")\n+void tryFoldComparison(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n+    int op \u003d n.getType();\n+    boolean result;\n+    boolean rightLiteral \u003d NodeUtil.isLiteralValue(right);\n+    boolean undefinedRight \u003d ((Token.NAME \u003d\u003d right.getType() \u0026\u0026 right.getString().equals(\"undefined\")) || (Token.VOID \u003d\u003d right.getType() \u0026\u0026 NodeUtil.isLiteralValue(right.getFirstChild())));\n+    switch(left.getType()) {\n+        case Token.VOID:\n+            if (!NodeUtil.isLiteralValue(left.getFirstChild())) {\n+                return;\n+            } else if (!rightLiteral) {\n+                return;\n+            } else {\n+                boolean nullRight \u003d (Token.NULL \u003d\u003d right.getType());\n+                boolean equivalent \u003d undefinedRight || nullRight;\n+                switch(op) {\n+                    case Token.EQ:\n+                        result \u003d equivalent;\n+                        break;\n+                    case Token.NE:\n+                        result \u003d !equivalent;\n+                        break;\n+                    case Token.SHEQ:\n+                        result \u003d undefinedRight;\n+                        break;\n+                    case Token.SHNE:\n+                        result \u003d !undefinedRight;\n+                        break;\n+                    case Token.LT:\n+                    case Token.GT:\n+                    case Token.LE:\n+                    case Token.GE:\n+                        result \u003d false;\n+                        break;\n+                    default:\n+                        return;\n+                }\n+            }\n+            break;\n+        case Token.NULL:\n+            if (undefinedRight) {\n+                result \u003d (op \u003d\u003d Token.EQ);\n+                break;\n+            }\n+        case Token.TRUE:\n+        case Token.FALSE:\n+            if (undefinedRight) {\n+                result \u003d false;\n+                break;\n+            }\n+        case Token.THIS:\n+            int tt \u003d right.getType();\n+            if (tt !\u003d Token.THIS \u0026\u0026 tt !\u003d Token.TRUE \u0026\u0026 tt !\u003d Token.FALSE \u0026\u0026 tt !\u003d Token.NULL)\n+                return;\n+            switch(op) {\n+                case Token.EQ:\n+                    result \u003d left.getType() \u003d\u003d right.getType();\n+                    break;\n+                case Token.NE:\n+                    result \u003d left.getType() !\u003d right.getType();\n+                    break;\n+                default:\n+                    return;\n+            }\n+            break;\n+        case Token.STRING:\n+            if (undefinedRight) {\n+                result \u003d false;\n+                break;\n+            }\n+            if (Token.STRING !\u003d right.getType()) {\n+                return;\n+            }\n+            switch(op) {\n+                case Token.EQ:\n+                    result \u003d left.getString().equals(right.getString());\n+                    break;\n+                case Token.NE:\n+                    result \u003d !left.getString().equals(right.getString());\n+                    break;\n+                default:\n+                    return;\n+            }\n+            break;\n+        case Token.NUMBER:\n+            if (undefinedRight) {\n+                result \u003d false;\n+                break;\n+            }\n+            if (Token.NUMBER !\u003d right.getType()) {\n+                return;\n+            }\n+            double lv \u003d left.getDouble();\n+            double rv \u003d right.getDouble();\n+            switch(op) {\n+                case Token.EQ:\n+                    result \u003d lv \u003d\u003d rv;\n+                    break;\n+                case Token.NE:\n+                    result \u003d lv !\u003d rv;\n+                    break;\n+                case Token.LE:\n+                    result \u003d lv \u003c\u003d rv;\n+                    break;\n+                case Token.LT:\n+                    result \u003d lv \u003c rv;\n+                    break;\n+                case Token.GE:\n+                    result \u003d lv \u003e\u003d rv;\n+                    break;\n+                case Token.GT:\n+                    result \u003d lv \u003e rv;\n+                    break;\n+                default:\n+                    return;\n+            }\n+            break;\n+        case Token.NAME:\n+            if (rightLiteral) {\n+                boolean undefinedLeft \u003d (left.getString().equals(\"undefined\"));\n+                if (undefinedLeft) {\n+                    boolean nullRight \u003d (Token.NULL \u003d\u003d right.getType());\n+                    boolean equivalent \u003d undefinedRight || nullRight;\n+                    switch(op) {\n+                        case Token.EQ:\n+                            result \u003d equivalent;\n+                            break;\n+                        case Token.NE:\n+                            result \u003d !equivalent;\n+                            break;\n+                        case Token.SHEQ:\n+                            result \u003d undefinedRight;\n+                            break;\n+                        case Token.SHNE:\n+                            result \u003d !undefinedRight;\n+                            break;\n+                        case Token.LT:\n+                        case Token.GT:\n+                        case Token.LE:\n+                        case Token.GE:\n+                            result \u003d false;\n+                            break;\n+                        default:\n+                            return;\n+                    }\n+                    break;\n+                }\n+            }\n+            if (Token.NAME !\u003d right.getType()) {\n+                return;\n+            }\n+            String ln \u003d left.getString();\n+            String rn \u003d right.getString();\n+            if (!ln.equals(rn)) {\n+                return;\n+            }\n+            switch(op) {\n+                case Token.LT:\n+                case Token.GT:\n+                    result \u003d false;\n+                    break;\n+                default:\n+                    return;\n+            }\n+            break;\n+        default:\n+            return;\n+    }\n+    parent.replaceChild(n, new Node(result ? Token.TRUE : Token.FALSE));\n+    t.getCompiler().reportCodeChange();\n+}\n\\ No newline at end of file\n",
      "actualSource": "@SuppressWarnings(\"fallthrough\")\nvoid tryFoldComparison(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n    int op \u003d n.getType();\n    boolean result;\n    boolean rightLiteral \u003d NodeUtil.isLiteralValue(right);\n    boolean undefinedRight \u003d ((Token.NAME \u003d\u003d right.getType() \u0026\u0026 right.getString().equals(\"undefined\")) || (Token.VOID \u003d\u003d right.getType() \u0026\u0026 NodeUtil.isLiteralValue(right.getFirstChild())));\n    switch(left.getType()) {\n        case Token.VOID:\n            if (!NodeUtil.isLiteralValue(left.getFirstChild())) {\n                return;\n            } else if (!rightLiteral) {\n                return;\n            } else {\n                boolean nullRight \u003d (Token.NULL \u003d\u003d right.getType());\n                boolean equivalent \u003d undefinedRight || nullRight;\n                switch(op) {\n                    case Token.EQ:\n                        result \u003d equivalent;\n                        break;\n                    case Token.NE:\n                        result \u003d !equivalent;\n                        break;\n                    case Token.SHEQ:\n                        result \u003d undefinedRight;\n                        break;\n                    case Token.SHNE:\n                        result \u003d !undefinedRight;\n                        break;\n                    case Token.LT:\n                    case Token.GT:\n                    case Token.LE:\n                    case Token.GE:\n                        result \u003d false;\n                        break;\n                    default:\n                        return;\n                }\n            }\n            break;\n        case Token.NULL:\n            if (undefinedRight) {\n                result \u003d (op \u003d\u003d Token.EQ);\n                break;\n            }\n        case Token.TRUE:\n        case Token.FALSE:\n            if (undefinedRight) {\n                result \u003d false;\n                break;\n            }\n        case Token.THIS:\n            int tt \u003d right.getType();\n            if (tt !\u003d Token.THIS \u0026\u0026 tt !\u003d Token.TRUE \u0026\u0026 tt !\u003d Token.FALSE \u0026\u0026 tt !\u003d Token.NULL)\n                return;\n            switch(op) {\n                case Token.EQ:\n                    result \u003d left.getType() \u003d\u003d right.getType();\n                    break;\n                case Token.NE:\n                    result \u003d left.getType() !\u003d right.getType();\n                    break;\n                default:\n                    return;\n            }\n            break;\n        case Token.STRING:\n            if (undefinedRight) {\n                result \u003d false;\n                break;\n            }\n            if (Token.STRING !\u003d right.getType()) {\n                return;\n            }\n            switch(op) {\n                case Token.EQ:\n                    result \u003d left.getString().equals(right.getString());\n                    break;\n                case Token.NE:\n                    result \u003d !left.getString().equals(right.getString());\n                    break;\n                default:\n                    return;\n            }\n            break;\n        case Token.NUMBER:\n            if (undefinedRight) {\n                result \u003d false;\n                break;\n            }\n            if (Token.NUMBER !\u003d right.getType()) {\n                return;\n            }\n            double lv \u003d left.getDouble();\n            double rv \u003d right.getDouble();\n            switch(op) {\n                case Token.EQ:\n                    result \u003d lv \u003d\u003d rv;\n                    break;\n                case Token.NE:\n                    result \u003d lv !\u003d rv;\n                    break;\n                case Token.LE:\n                    result \u003d lv \u003c\u003d rv;\n                    break;\n                case Token.LT:\n                    result \u003d lv \u003c rv;\n                    break;\n                case Token.GE:\n                    result \u003d lv \u003e\u003d rv;\n                    break;\n                case Token.GT:\n                    result \u003d lv \u003e rv;\n                    break;\n                default:\n                    return;\n            }\n            break;\n        case Token.NAME:\n            if (rightLiteral) {\n                boolean undefinedLeft \u003d (left.getString().equals(\"undefined\"));\n                if (undefinedLeft) {\n                    boolean nullRight \u003d (Token.NULL \u003d\u003d right.getType());\n                    boolean equivalent \u003d undefinedRight || nullRight;\n                    switch(op) {\n                        case Token.EQ:\n                            result \u003d equivalent;\n                            break;\n                        case Token.NE:\n                            result \u003d !equivalent;\n                            break;\n                        case Token.SHEQ:\n                            result \u003d undefinedRight;\n                            break;\n                        case Token.SHNE:\n                            result \u003d !undefinedRight;\n                            break;\n                        case Token.LT:\n                        case Token.GT:\n                        case Token.LE:\n                        case Token.GE:\n                            result \u003d false;\n                            break;\n                        default:\n                            return;\n                    }\n                    break;\n                }\n            }\n            if (Token.NAME !\u003d right.getType()) {\n                return;\n            }\n            String ln \u003d left.getString();\n            String rn \u003d right.getString();\n            if (!ln.equals(rn)) {\n                return;\n            }\n            switch(op) {\n                case Token.LT:\n                case Token.GT:\n                    result \u003d false;\n                    break;\n                default:\n                    return;\n            }\n            break;\n        default:\n            return;\n    }\n    parent.replaceChild(n, new Node(result ? Token.TRUE : Token.FALSE));\n    t.getCompiler().reportCodeChange();\n}",
      "path": "src/com/google/javascript/jscomp/FoldConstants.java",
      "functionStartLine": 1210,
      "functionName": "tryFoldComparison",
      "functionAnnotation": "@SuppressWarnings(\"fallthrough\")",
      "functionDoc": "Try to fold comparison nodes, e.g \u003d\u003d\n"
    }
  }
}