{
  "origin": "codeshovel",
  "repositoryName": "Closure-10b",
  "repositoryPath": "/tmp/Closure-10b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Node.java",
  "functionName": "checkTreeEqualsImpl",
  "functionId": "checkTreeEqualsImpl___node2-Node",
  "sourceFilePath": "src/com/google/javascript/rhino/Node.java",
  "functionAnnotation": "",
  "functionDoc": "Compare this node to node2 recursively and return the first pair of nodes\nthat differs doing a preorder depth-first traversal. Package private for\ntesting. Returns null if the nodes are equivalent.\n",
  "functionStartLine": 1447,
  "functionEndLine": 1466,
  "numCommitsSeen": 78,
  "timeTaken": 6373,
  "changeHistory": [
    "e4cf805a6a27301672660756202e8dedee1e012b",
    "484b6166dc0254864b8fff0c7b29137ed7954828",
    "43859717972907dd1ecebd8dca6e05036386e28b",
    "66485d3df654fa92b7500d5e15b58300677edca3",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "e4cf805a6a27301672660756202e8dedee1e012b": "Ybodychange",
    "484b6166dc0254864b8fff0c7b29137ed7954828": "Ybodychange",
    "43859717972907dd1ecebd8dca6e05036386e28b": "Ymultichange(Ybodychange,Ydocchange)",
    "66485d3df654fa92b7500d5e15b58300677edca3": "Ymultichange(Yreturntypechange,Ybodychange)",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e4cf805a6a27301672660756202e8dedee1e012b": {
      "type": "Ybodychange",
      "commitMessage": "\nAvoid unnecessary temporary objects when comparing node trees.\n\nR\u003dacleung\nDELTA\u003d64  (17 added, 22 deleted, 25 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d762\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@849 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/3/11, 5:04 PM",
      "commitName": "e4cf805a6a27301672660756202e8dedee1e012b",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "3/3/11, 11:35 AM",
      "commitNameOld": "484b6166dc0254864b8fff0c7b29137ed7954828",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 0.23,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "NodeMismatch checkTreeEqualsImpl(Node node2) {\n    if (!isEquivalentTo(node2, false, false)) {\n        return new NodeMismatch(this, node2);\n    }\n    NodeMismatch res \u003d null;\n    Node n, n2;\n    for (n \u003d first, n2 \u003d node2.first; res \u003d\u003d null \u0026\u0026 n !\u003d null; n \u003d n.next, n2 \u003d n2.next) {\n        if (node2 \u003d\u003d null) {\n            throw new IllegalStateException();\n        }\n        res \u003d n.checkTreeEqualsImpl(n2);\n        if (res !\u003d null) {\n            return res;\n        }\n    }\n    return res;\n}",
      "path": "src/com/google/javascript/rhino/Node.java",
      "functionStartLine": 1396,
      "functionName": "checkTreeEqualsImpl",
      "functionAnnotation": "",
      "functionDoc": "Compare this node to node2 recursively and return the first pair of nodes\nthat differs doing a preorder depth-first traversal. Package private for\ntesting. Returns null if the nodes are equivalent.\n",
      "diff": "@@ -1,17 +1,17 @@\n NodeMismatch checkTreeEqualsImpl(Node node2) {\n-    if (!isEquivalentTo(node2, false)) {\n+    if (!isEquivalentTo(node2, false, false)) {\n         return new NodeMismatch(this, node2);\n     }\n     NodeMismatch res \u003d null;\n     Node n, n2;\n     for (n \u003d first, n2 \u003d node2.first; res \u003d\u003d null \u0026\u0026 n !\u003d null; n \u003d n.next, n2 \u003d n2.next) {\n         if (node2 \u003d\u003d null) {\n             throw new IllegalStateException();\n         }\n         res \u003d n.checkTreeEqualsImpl(n2);\n         if (res !\u003d null) {\n             return res;\n         }\n     }\n     return res;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "484b6166dc0254864b8fff0c7b29137ed7954828": {
      "type": "Ybodychange",
      "commitMessage": "\nNode.isEquivalentTo doesn\u0027t do what you expect, make it package private.\nFix up the caller to use a working method.\n\nR\u003dacleung\nDELTA\u003d92  (36 added, 12 deleted, 44 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d752\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@846 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/3/11, 11:35 AM",
      "commitName": "484b6166dc0254864b8fff0c7b29137ed7954828",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "9/27/10, 4:16 PM",
      "commitNameOld": "6a2378d43d1f06344f6418388d45c66fe3466a07",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 156.85,
      "commitsBetweenForRepo": 366,
      "commitsBetweenForFile": 1,
      "actualSource": "NodeMismatch checkTreeEqualsImpl(Node node2) {\n    if (!isEquivalentTo(node2, false)) {\n        return new NodeMismatch(this, node2);\n    }\n    NodeMismatch res \u003d null;\n    Node n, n2;\n    for (n \u003d first, n2 \u003d node2.first; res \u003d\u003d null \u0026\u0026 n !\u003d null; n \u003d n.next, n2 \u003d n2.next) {\n        if (node2 \u003d\u003d null) {\n            throw new IllegalStateException();\n        }\n        res \u003d n.checkTreeEqualsImpl(n2);\n        if (res !\u003d null) {\n            return res;\n        }\n    }\n    return res;\n}",
      "path": "src/com/google/javascript/rhino/Node.java",
      "functionStartLine": 1404,
      "functionName": "checkTreeEqualsImpl",
      "functionAnnotation": "",
      "functionDoc": "Compare this node to node2 recursively and return the first pair of nodes\nthat differs doing a preorder depth-first traversal. Package private for\ntesting. Returns null if the nodes are equivalent.\n",
      "diff": "@@ -1,18 +1,17 @@\n NodeMismatch checkTreeEqualsImpl(Node node2) {\n-    boolean eq \u003d false;\n-    if (type \u003d\u003d node2.getType() \u0026\u0026 getChildCount() \u003d\u003d node2.getChildCount() \u0026\u0026 getNodeClass(this) \u003d\u003d getNodeClass(node2)) {\n-        eq \u003d this.isEquivalentTo(node2);\n-    }\n-    if (!eq) {\n+    if (!isEquivalentTo(node2, false)) {\n         return new NodeMismatch(this, node2);\n     }\n     NodeMismatch res \u003d null;\n     Node n, n2;\n     for (n \u003d first, n2 \u003d node2.first; res \u003d\u003d null \u0026\u0026 n !\u003d null; n \u003d n.next, n2 \u003d n2.next) {\n+        if (node2 \u003d\u003d null) {\n+            throw new IllegalStateException();\n+        }\n         res \u003d n.checkTreeEqualsImpl(n2);\n         if (res !\u003d null) {\n             return res;\n         }\n     }\n     return res;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "43859717972907dd1ecebd8dca6e05036386e28b": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "\nChange on 2010/04/14 by john\n\n        Stop creating specialized Node types for FUNCTION and SCRIPT as the added functionality isn\u0027t used anywhere.\n\n        Also correct some formatting issue with Node (as it won\u0027t need to be merged with anything else anymore).\n\n        R\u003dsteve,robert\n        DELTA\u003d3969  (1913 added, 1925 deleted, 131 changed)\n\nChange on 2010/04/14 by john\n\n        Fix source information in MinimizeExitPoints.\n\n        R\u003drobert\n        DELTA\u003d10  (5 added, 2 deleted, 3 changed)\n\nChange on 2010/04/14 by john\n\n        Maintain source information.\n\n        R\u003dantonio\n        DELTA\u003d17  (11 added, 0 deleted, 6 changed)\n\nChange on 2010/04/14 by john\n\n        Maintain source information through FoldConstants.\n\n        R\u003drobert\n        DELTA\u003d42  (22 added, 0 deleted, 20 changed)\n\nChange on 2010/04/14 by nick\n\n        lock down function type construction\n\n        R\u003djohn\n        DELTA\u003d111  (83 added, 9 deleted, 19 changed)\n\nChange on 2010/04/14 by john\n\n        Fix source info in CollapseProperties.\n\n        R\u003dnick\n        DELTA\u003d17  (8 added, 3 deleted, 6 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dmbevwz\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@184 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/14/10, 4:53 PM",
      "commitName": "43859717972907dd1ecebd8dca6e05036386e28b",
      "commitAuthor": "Nicholas.J.Santos",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "\nChange on 2010/04/14 by john\n\n        Stop creating specialized Node types for FUNCTION and SCRIPT as the added functionality isn\u0027t used anywhere.\n\n        Also correct some formatting issue with Node (as it won\u0027t need to be merged with anything else anymore).\n\n        R\u003dsteve,robert\n        DELTA\u003d3969  (1913 added, 1925 deleted, 131 changed)\n\nChange on 2010/04/14 by john\n\n        Fix source information in MinimizeExitPoints.\n\n        R\u003drobert\n        DELTA\u003d10  (5 added, 2 deleted, 3 changed)\n\nChange on 2010/04/14 by john\n\n        Maintain source information.\n\n        R\u003dantonio\n        DELTA\u003d17  (11 added, 0 deleted, 6 changed)\n\nChange on 2010/04/14 by john\n\n        Maintain source information through FoldConstants.\n\n        R\u003drobert\n        DELTA\u003d42  (22 added, 0 deleted, 20 changed)\n\nChange on 2010/04/14 by nick\n\n        lock down function type construction\n\n        R\u003djohn\n        DELTA\u003d111  (83 added, 9 deleted, 19 changed)\n\nChange on 2010/04/14 by john\n\n        Fix source info in CollapseProperties.\n\n        R\u003dnick\n        DELTA\u003d17  (8 added, 3 deleted, 6 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dmbevwz\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@184 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "4/14/10, 4:53 PM",
          "commitName": "43859717972907dd1ecebd8dca6e05036386e28b",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "4/13/10, 2:39 PM",
          "commitNameOld": "de13c3313c05f4449c50c560324389d6905a214d",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 1.09,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "NodeMismatch checkTreeEqualsImpl(Node node2) {\n    boolean eq \u003d false;\n    if (type \u003d\u003d node2.getType() \u0026\u0026 getChildCount() \u003d\u003d node2.getChildCount() \u0026\u0026 getNodeClass(this) \u003d\u003d getNodeClass(node2)) {\n        eq \u003d this.isEquivalentTo(node2);\n    }\n    if (!eq) {\n        return new NodeMismatch(this, node2);\n    }\n    NodeMismatch res \u003d null;\n    Node n, n2;\n    for (n \u003d first, n2 \u003d node2.first; res \u003d\u003d null \u0026\u0026 n !\u003d null; n \u003d n.next, n2 \u003d n2.next) {\n        res \u003d n.checkTreeEqualsImpl(n2);\n        if (res !\u003d null) {\n            return res;\n        }\n    }\n    return res;\n}",
          "path": "src/com/google/javascript/rhino/Node.java",
          "functionStartLine": 1365,
          "functionName": "checkTreeEqualsImpl",
          "functionAnnotation": "",
          "functionDoc": "Compare this node to node2 recursively and return the first pair of nodes\nthat differs doing a preorder depth-first traversal. Package private for\ntesting. Returns null if the nodes are equivalent.\n",
          "diff": "@@ -1,18 +1,18 @@\n NodeMismatch checkTreeEqualsImpl(Node node2) {\n     boolean eq \u003d false;\n-    if (type \u003d\u003d node2.getType() \u0026\u0026 getChildCount() \u003d\u003d node2.getChildCount() \u0026\u0026 getClass() \u003d\u003d node2.getClass()) {\n+    if (type \u003d\u003d node2.getType() \u0026\u0026 getChildCount() \u003d\u003d node2.getChildCount() \u0026\u0026 getNodeClass(this) \u003d\u003d getNodeClass(node2)) {\n         eq \u003d this.isEquivalentTo(node2);\n     }\n     if (!eq) {\n         return new NodeMismatch(this, node2);\n     }\n     NodeMismatch res \u003d null;\n     Node n, n2;\n     for (n \u003d first, n2 \u003d node2.first; res \u003d\u003d null \u0026\u0026 n !\u003d null; n \u003d n.next, n2 \u003d n2.next) {\n         res \u003d n.checkTreeEqualsImpl(n2);\n         if (res !\u003d null) {\n             return res;\n         }\n     }\n     return res;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "\nChange on 2010/04/14 by john\n\n        Stop creating specialized Node types for FUNCTION and SCRIPT as the added functionality isn\u0027t used anywhere.\n\n        Also correct some formatting issue with Node (as it won\u0027t need to be merged with anything else anymore).\n\n        R\u003dsteve,robert\n        DELTA\u003d3969  (1913 added, 1925 deleted, 131 changed)\n\nChange on 2010/04/14 by john\n\n        Fix source information in MinimizeExitPoints.\n\n        R\u003drobert\n        DELTA\u003d10  (5 added, 2 deleted, 3 changed)\n\nChange on 2010/04/14 by john\n\n        Maintain source information.\n\n        R\u003dantonio\n        DELTA\u003d17  (11 added, 0 deleted, 6 changed)\n\nChange on 2010/04/14 by john\n\n        Maintain source information through FoldConstants.\n\n        R\u003drobert\n        DELTA\u003d42  (22 added, 0 deleted, 20 changed)\n\nChange on 2010/04/14 by nick\n\n        lock down function type construction\n\n        R\u003djohn\n        DELTA\u003d111  (83 added, 9 deleted, 19 changed)\n\nChange on 2010/04/14 by john\n\n        Fix source info in CollapseProperties.\n\n        R\u003dnick\n        DELTA\u003d17  (8 added, 3 deleted, 6 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dmbevwz\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@184 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "4/14/10, 4:53 PM",
          "commitName": "43859717972907dd1ecebd8dca6e05036386e28b",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "4/13/10, 2:39 PM",
          "commitNameOld": "de13c3313c05f4449c50c560324389d6905a214d",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 1.09,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "NodeMismatch checkTreeEqualsImpl(Node node2) {\n    boolean eq \u003d false;\n    if (type \u003d\u003d node2.getType() \u0026\u0026 getChildCount() \u003d\u003d node2.getChildCount() \u0026\u0026 getNodeClass(this) \u003d\u003d getNodeClass(node2)) {\n        eq \u003d this.isEquivalentTo(node2);\n    }\n    if (!eq) {\n        return new NodeMismatch(this, node2);\n    }\n    NodeMismatch res \u003d null;\n    Node n, n2;\n    for (n \u003d first, n2 \u003d node2.first; res \u003d\u003d null \u0026\u0026 n !\u003d null; n \u003d n.next, n2 \u003d n2.next) {\n        res \u003d n.checkTreeEqualsImpl(n2);\n        if (res !\u003d null) {\n            return res;\n        }\n    }\n    return res;\n}",
          "path": "src/com/google/javascript/rhino/Node.java",
          "functionStartLine": 1365,
          "functionName": "checkTreeEqualsImpl",
          "functionAnnotation": "",
          "functionDoc": "Compare this node to node2 recursively and return the first pair of nodes\nthat differs doing a preorder depth-first traversal. Package private for\ntesting. Returns null if the nodes are equivalent.\n",
          "diff": "@@ -1,18 +1,18 @@\n NodeMismatch checkTreeEqualsImpl(Node node2) {\n     boolean eq \u003d false;\n-    if (type \u003d\u003d node2.getType() \u0026\u0026 getChildCount() \u003d\u003d node2.getChildCount() \u0026\u0026 getClass() \u003d\u003d node2.getClass()) {\n+    if (type \u003d\u003d node2.getType() \u0026\u0026 getChildCount() \u003d\u003d node2.getChildCount() \u0026\u0026 getNodeClass(this) \u003d\u003d getNodeClass(node2)) {\n         eq \u003d this.isEquivalentTo(node2);\n     }\n     if (!eq) {\n         return new NodeMismatch(this, node2);\n     }\n     NodeMismatch res \u003d null;\n     Node n, n2;\n     for (n \u003d first, n2 \u003d node2.first; res \u003d\u003d null \u0026\u0026 n !\u003d null; n \u003d n.next, n2 \u003d n2.next) {\n         res \u003d n.checkTreeEqualsImpl(n2);\n         if (res !\u003d null) {\n             return res;\n         }\n     }\n     return res;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Compare this node to node2 recursively and return the first pair\nof nodes that differs doing a preorder depth-first traversal.\nPackage private for testing. Returns null if the nodes are equivalent.\n",
            "newValue": "Compare this node to node2 recursively and return the first pair of nodes\nthat differs doing a preorder depth-first traversal. Package private for\ntesting. Returns null if the nodes are equivalent.\n"
          }
        }
      ]
    },
    "66485d3df654fa92b7500d5e15b58300677edca3": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "Use non-generic data structures in a bunch of places.\n(More for readability reasons than anything else)\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@70 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/15/10, 1:56 PM",
      "commitName": "66485d3df654fa92b7500d5e15b58300677edca3",
      "commitAuthor": "Nicholas.J.Santos",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "Use non-generic data structures in a bunch of places.\n(More for readability reasons than anything else)\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@70 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/15/10, 1:56 PM",
          "commitName": "66485d3df654fa92b7500d5e15b58300677edca3",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "12/21/09, 10:13 AM",
          "commitNameOld": "d964d232de65db2370c06ce04de9865a3b2c8c9f",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 25.15,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "actualSource": "NodeMismatch checkTreeEqualsImpl(Node node2) {\n    boolean eq \u003d false;\n    if (type \u003d\u003d node2.getType() \u0026\u0026 getChildCount() \u003d\u003d node2.getChildCount() \u0026\u0026 getClass() \u003d\u003d node2.getClass()) {\n        eq \u003d this.isEquivalentTo(node2);\n    }\n    if (!eq) {\n        return new NodeMismatch(this, node2);\n    }\n    NodeMismatch res \u003d null;\n    Node n, n2;\n    for (n \u003d first, n2 \u003d node2.first; res \u003d\u003d null \u0026\u0026 n !\u003d null; n \u003d n.next, n2 \u003d n2.next) {\n        res \u003d n.checkTreeEqualsImpl(n2);\n        if (res !\u003d null) {\n            return res;\n        }\n    }\n    return res;\n}",
          "path": "src/com/google/javascript/rhino/Node.java",
          "functionStartLine": 1347,
          "functionName": "checkTreeEqualsImpl",
          "functionAnnotation": "",
          "functionDoc": "Compare this node to node2 recursively and return the first pair\nof nodes that differs doing a preorder depth-first traversal.\nPackage private for testing. Returns null if the nodes are equivalent.\n",
          "diff": "@@ -1,18 +1,18 @@\n-Pair\u003cNode, Node\u003e checkTreeEqualsImpl(Node node2) {\n+NodeMismatch checkTreeEqualsImpl(Node node2) {\n     boolean eq \u003d false;\n     if (type \u003d\u003d node2.getType() \u0026\u0026 getChildCount() \u003d\u003d node2.getChildCount() \u0026\u0026 getClass() \u003d\u003d node2.getClass()) {\n         eq \u003d this.isEquivalentTo(node2);\n     }\n     if (!eq) {\n-        return Pair.of(this, node2);\n+        return new NodeMismatch(this, node2);\n     }\n-    Pair\u003cNode, Node\u003e res \u003d null;\n+    NodeMismatch res \u003d null;\n     Node n, n2;\n     for (n \u003d first, n2 \u003d node2.first; res \u003d\u003d null \u0026\u0026 n !\u003d null; n \u003d n.next, n2 \u003d n2.next) {\n         res \u003d n.checkTreeEqualsImpl(n2);\n         if (res !\u003d null) {\n             return res;\n         }\n     }\n     return res;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Pair\u003cNode,Node\u003e",
            "newValue": "NodeMismatch"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Use non-generic data structures in a bunch of places.\n(More for readability reasons than anything else)\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@70 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/15/10, 1:56 PM",
          "commitName": "66485d3df654fa92b7500d5e15b58300677edca3",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "12/21/09, 10:13 AM",
          "commitNameOld": "d964d232de65db2370c06ce04de9865a3b2c8c9f",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 25.15,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "actualSource": "NodeMismatch checkTreeEqualsImpl(Node node2) {\n    boolean eq \u003d false;\n    if (type \u003d\u003d node2.getType() \u0026\u0026 getChildCount() \u003d\u003d node2.getChildCount() \u0026\u0026 getClass() \u003d\u003d node2.getClass()) {\n        eq \u003d this.isEquivalentTo(node2);\n    }\n    if (!eq) {\n        return new NodeMismatch(this, node2);\n    }\n    NodeMismatch res \u003d null;\n    Node n, n2;\n    for (n \u003d first, n2 \u003d node2.first; res \u003d\u003d null \u0026\u0026 n !\u003d null; n \u003d n.next, n2 \u003d n2.next) {\n        res \u003d n.checkTreeEqualsImpl(n2);\n        if (res !\u003d null) {\n            return res;\n        }\n    }\n    return res;\n}",
          "path": "src/com/google/javascript/rhino/Node.java",
          "functionStartLine": 1347,
          "functionName": "checkTreeEqualsImpl",
          "functionAnnotation": "",
          "functionDoc": "Compare this node to node2 recursively and return the first pair\nof nodes that differs doing a preorder depth-first traversal.\nPackage private for testing. Returns null if the nodes are equivalent.\n",
          "diff": "@@ -1,18 +1,18 @@\n-Pair\u003cNode, Node\u003e checkTreeEqualsImpl(Node node2) {\n+NodeMismatch checkTreeEqualsImpl(Node node2) {\n     boolean eq \u003d false;\n     if (type \u003d\u003d node2.getType() \u0026\u0026 getChildCount() \u003d\u003d node2.getChildCount() \u0026\u0026 getClass() \u003d\u003d node2.getClass()) {\n         eq \u003d this.isEquivalentTo(node2);\n     }\n     if (!eq) {\n-        return Pair.of(this, node2);\n+        return new NodeMismatch(this, node2);\n     }\n-    Pair\u003cNode, Node\u003e res \u003d null;\n+    NodeMismatch res \u003d null;\n     Node n, n2;\n     for (n \u003d first, n2 \u003d node2.first; res \u003d\u003d null \u0026\u0026 n !\u003d null; n \u003d n.next, n2 \u003d n2.next) {\n         res \u003d n.checkTreeEqualsImpl(n2);\n         if (res !\u003d null) {\n             return res;\n         }\n     }\n     return res;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,18 @@\n+Pair\u003cNode, Node\u003e checkTreeEqualsImpl(Node node2) {\n+    boolean eq \u003d false;\n+    if (type \u003d\u003d node2.getType() \u0026\u0026 getChildCount() \u003d\u003d node2.getChildCount() \u0026\u0026 getClass() \u003d\u003d node2.getClass()) {\n+        eq \u003d this.isEquivalentTo(node2);\n+    }\n+    if (!eq) {\n+        return Pair.of(this, node2);\n+    }\n+    Pair\u003cNode, Node\u003e res \u003d null;\n+    Node n, n2;\n+    for (n \u003d first, n2 \u003d node2.first; res \u003d\u003d null \u0026\u0026 n !\u003d null; n \u003d n.next, n2 \u003d n2.next) {\n+        res \u003d n.checkTreeEqualsImpl(n2);\n+        if (res !\u003d null) {\n+            return res;\n+        }\n+    }\n+    return res;\n+}\n\\ No newline at end of file\n",
      "actualSource": "Pair\u003cNode, Node\u003e checkTreeEqualsImpl(Node node2) {\n    boolean eq \u003d false;\n    if (type \u003d\u003d node2.getType() \u0026\u0026 getChildCount() \u003d\u003d node2.getChildCount() \u0026\u0026 getClass() \u003d\u003d node2.getClass()) {\n        eq \u003d this.isEquivalentTo(node2);\n    }\n    if (!eq) {\n        return Pair.of(this, node2);\n    }\n    Pair\u003cNode, Node\u003e res \u003d null;\n    Node n, n2;\n    for (n \u003d first, n2 \u003d node2.first; res \u003d\u003d null \u0026\u0026 n !\u003d null; n \u003d n.next, n2 \u003d n2.next) {\n        res \u003d n.checkTreeEqualsImpl(n2);\n        if (res !\u003d null) {\n            return res;\n        }\n    }\n    return res;\n}",
      "path": "src/com/google/javascript/rhino/Node.java",
      "functionStartLine": 1322,
      "functionName": "checkTreeEqualsImpl",
      "functionAnnotation": "",
      "functionDoc": "Compare this node to node2 recursively and return the first pair\nof nodes that differs doing a preorder depth-first traversal.\nPackage private for testing. Returns null if the nodes are equivalent.\n"
    }
  }
}