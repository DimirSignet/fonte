{
  "origin": "codeshovel",
  "repositoryName": "Closure-10b",
  "repositoryPath": "/tmp/Closure-10b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NodeUtil.java",
  "functionName": "getNumberValue",
  "functionId": "getNumberValue___n-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/NodeUtil.java",
  "functionAnnotation": "",
  "functionDoc": "Gets the value of a node as a Number, or null if it cannot be converted.\nWhen it returns a non-null Double, this method effectively emulates the\n\u003ccode\u003eNumber()\u003c/code\u003e JavaScript cast function.\n",
  "functionStartLine": 272,
  "functionEndLine": 329,
  "numCommitsSeen": 136,
  "timeTaken": 9103,
  "changeHistory": [
    "4d98fc9034031ee146c7e5534a150e2700d89f8e",
    "86a7d25f3cc1177f35dc6480260fb807912c03fa",
    "db7e51f90e44be275b568d0b512e9778d6d6b253",
    "e7ce7f710e1bf297f1a4258b53f22f550fc1f2e3",
    "20c504ecbbdea3908bde81709df5a3765d1e385e",
    "711b76ac1015234f86805f1735ff2c3da195f55c",
    "510ff24ac51a8c73ff3f2401379654c37a00546b"
  ],
  "changeHistoryShort": {
    "4d98fc9034031ee146c7e5534a150e2700d89f8e": "Ybodychange",
    "86a7d25f3cc1177f35dc6480260fb807912c03fa": "Ybodychange",
    "db7e51f90e44be275b568d0b512e9778d6d6b253": "Ybodychange",
    "e7ce7f710e1bf297f1a4258b53f22f550fc1f2e3": "Ybodychange",
    "20c504ecbbdea3908bde81709df5a3765d1e385e": "Ybodychange",
    "711b76ac1015234f86805f1735ff2c3da195f55c": "Ybodychange",
    "510ff24ac51a8c73ff3f2401379654c37a00546b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4d98fc9034031ee146c7e5534a150e2700d89f8e": {
      "type": "Ybodychange",
      "commitMessage": "\nAdd basic Node type helpers to Node\n\nR\u003dnicksantos\nDELTA\u003d241  (135 added, 9 deleted, 97 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3672\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1577 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/9/11, 12:32 PM",
      "commitName": "4d98fc9034031ee146c7e5534a150e2700d89f8e",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/9/11, 10:08 AM",
      "commitNameOld": "ca41f5d443aad22b11b2b6d514fdf20101f33276",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "static Double getNumberValue(Node n) {\n    switch(n.getType()) {\n        case Token.TRUE:\n            return 1.0;\n        case Token.FALSE:\n        case Token.NULL:\n            return 0.0;\n        case Token.NUMBER:\n            return n.getDouble();\n        case Token.VOID:\n            if (mayHaveSideEffects(n.getFirstChild())) {\n                return null;\n            } else {\n                return Double.NaN;\n            }\n        case Token.NAME:\n            String name \u003d n.getString();\n            if (name.equals(\"undefined\")) {\n                return Double.NaN;\n            }\n            if (name.equals(\"NaN\")) {\n                return Double.NaN;\n            }\n            if (name.equals(\"Infinity\")) {\n                return Double.POSITIVE_INFINITY;\n            }\n            return null;\n        case Token.NEG:\n            if (n.getChildCount() \u003d\u003d 1 \u0026\u0026 n.getFirstChild().isName() \u0026\u0026 n.getFirstChild().getString().equals(\"Infinity\")) {\n                return Double.NEGATIVE_INFINITY;\n            }\n            return null;\n        case Token.NOT:\n            TernaryValue child \u003d getPureBooleanValue(n.getFirstChild());\n            if (child !\u003d TernaryValue.UNKNOWN) {\n                return child.toBoolean(true) ? 0.0 : 1.0;\n            }\n            break;\n        case Token.STRING:\n            return getStringNumberValue(n.getString());\n        case Token.ARRAYLIT:\n        case Token.OBJECTLIT:\n            String value \u003d getStringValue(n);\n            return value !\u003d null ? getStringNumberValue(value) : null;\n    }\n    return null;\n}",
      "path": "src/com/google/javascript/jscomp/NodeUtil.java",
      "functionStartLine": 268,
      "functionName": "getNumberValue",
      "functionAnnotation": "",
      "functionDoc": "Gets the value of a node as a Number, or null if it cannot be converted.\nWhen it returns a non-null Double, this method effectively emulates the\n\u003ccode\u003eNumber()\u003c/code\u003e JavaScript cast function.\n",
      "diff": "@@ -1,47 +1,47 @@\n static Double getNumberValue(Node n) {\n     switch(n.getType()) {\n         case Token.TRUE:\n             return 1.0;\n         case Token.FALSE:\n         case Token.NULL:\n             return 0.0;\n         case Token.NUMBER:\n             return n.getDouble();\n         case Token.VOID:\n             if (mayHaveSideEffects(n.getFirstChild())) {\n                 return null;\n             } else {\n                 return Double.NaN;\n             }\n         case Token.NAME:\n             String name \u003d n.getString();\n             if (name.equals(\"undefined\")) {\n                 return Double.NaN;\n             }\n             if (name.equals(\"NaN\")) {\n                 return Double.NaN;\n             }\n             if (name.equals(\"Infinity\")) {\n                 return Double.POSITIVE_INFINITY;\n             }\n             return null;\n         case Token.NEG:\n-            if (n.getChildCount() \u003d\u003d 1 \u0026\u0026 n.getFirstChild().getType() \u003d\u003d Token.NAME \u0026\u0026 n.getFirstChild().getString().equals(\"Infinity\")) {\n+            if (n.getChildCount() \u003d\u003d 1 \u0026\u0026 n.getFirstChild().isName() \u0026\u0026 n.getFirstChild().getString().equals(\"Infinity\")) {\n                 return Double.NEGATIVE_INFINITY;\n             }\n             return null;\n         case Token.NOT:\n             TernaryValue child \u003d getPureBooleanValue(n.getFirstChild());\n             if (child !\u003d TernaryValue.UNKNOWN) {\n                 return child.toBoolean(true) ? 0.0 : 1.0;\n             }\n             break;\n         case Token.STRING:\n             return getStringNumberValue(n.getString());\n         case Token.ARRAYLIT:\n         case Token.OBJECTLIT:\n             String value \u003d getStringValue(n);\n             return value !\u003d null ? getStringNumberValue(value) : null;\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "86a7d25f3cc1177f35dc6480260fb807912c03fa": {
      "type": "Ybodychange",
      "commitMessage": "\nFix bad folding of expressions containing object and array literals with side-effects.\n\nR\u003dnicksantos\nDELTA\u003d144  (94 added, 0 deleted, 50 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1088\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@941 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/25/11, 4:27 PM",
      "commitName": "86a7d25f3cc1177f35dc6480260fb807912c03fa",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "3/21/11, 2:54 PM",
      "commitNameOld": "b41c7bd823a9d7df8b9ec276ff3ce4286ab1e890",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 4.07,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "actualSource": "static Double getNumberValue(Node n) {\n    switch(n.getType()) {\n        case Token.TRUE:\n            return 1.0;\n        case Token.FALSE:\n        case Token.NULL:\n            return 0.0;\n        case Token.NUMBER:\n            return n.getDouble();\n        case Token.VOID:\n            if (mayHaveSideEffects(n.getFirstChild())) {\n                return null;\n            } else {\n                return Double.NaN;\n            }\n        case Token.NAME:\n            String name \u003d n.getString();\n            if (name.equals(\"undefined\")) {\n                return Double.NaN;\n            }\n            if (name.equals(\"NaN\")) {\n                return Double.NaN;\n            }\n            if (name.equals(\"Infinity\")) {\n                return Double.POSITIVE_INFINITY;\n            }\n            return null;\n        case Token.NEG:\n            if (n.getChildCount() \u003d\u003d 1 \u0026\u0026 n.getFirstChild().getType() \u003d\u003d Token.NAME \u0026\u0026 n.getFirstChild().getString().equals(\"Infinity\")) {\n                return Double.NEGATIVE_INFINITY;\n            }\n            return null;\n        case Token.NOT:\n            TernaryValue child \u003d getPureBooleanValue(n.getFirstChild());\n            if (child !\u003d TernaryValue.UNKNOWN) {\n                return child.toBoolean(true) ? 0.0 : 1.0;\n            }\n            break;\n        case Token.STRING:\n            return getStringNumberValue(n.getString());\n        case Token.ARRAYLIT:\n        case Token.OBJECTLIT:\n            String value \u003d getStringValue(n);\n            return value !\u003d null ? getStringNumberValue(value) : null;\n    }\n    return null;\n}",
      "path": "src/com/google/javascript/jscomp/NodeUtil.java",
      "functionStartLine": 253,
      "functionName": "getNumberValue",
      "functionAnnotation": "",
      "functionDoc": "Gets the value of a node as a Number, or null if it cannot be converted.\nWhen it returns a non-null Double, this method effectively emulates the\n\u003ccode\u003eNumber()\u003c/code\u003e JavaScript cast function.\n",
      "diff": "@@ -1,47 +1,47 @@\n static Double getNumberValue(Node n) {\n     switch(n.getType()) {\n         case Token.TRUE:\n             return 1.0;\n         case Token.FALSE:\n         case Token.NULL:\n             return 0.0;\n         case Token.NUMBER:\n             return n.getDouble();\n         case Token.VOID:\n             if (mayHaveSideEffects(n.getFirstChild())) {\n                 return null;\n             } else {\n                 return Double.NaN;\n             }\n         case Token.NAME:\n             String name \u003d n.getString();\n             if (name.equals(\"undefined\")) {\n                 return Double.NaN;\n             }\n             if (name.equals(\"NaN\")) {\n                 return Double.NaN;\n             }\n             if (name.equals(\"Infinity\")) {\n                 return Double.POSITIVE_INFINITY;\n             }\n             return null;\n         case Token.NEG:\n             if (n.getChildCount() \u003d\u003d 1 \u0026\u0026 n.getFirstChild().getType() \u003d\u003d Token.NAME \u0026\u0026 n.getFirstChild().getString().equals(\"Infinity\")) {\n                 return Double.NEGATIVE_INFINITY;\n             }\n             return null;\n         case Token.NOT:\n-            TernaryValue child \u003d getBooleanValue(n.getFirstChild());\n+            TernaryValue child \u003d getPureBooleanValue(n.getFirstChild());\n             if (child !\u003d TernaryValue.UNKNOWN) {\n                 return child.toBoolean(true) ? 0.0 : 1.0;\n             }\n             break;\n         case Token.STRING:\n             return getStringNumberValue(n.getString());\n         case Token.ARRAYLIT:\n         case Token.OBJECTLIT:\n             String value \u003d getStringValue(n);\n             return value !\u003d null ? getStringNumberValue(value) : null;\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "db7e51f90e44be275b568d0b512e9778d6d6b253": {
      "type": "Ybodychange",
      "commitMessage": "\nFix issue with improper join of strings containing null and undefined.\nDefine a method for converting array literals to strings.\n\nR\u003dacleung\nDELTA\u003d174  (122 added, 38 deleted, 14 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d522\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@783 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/15/11, 10:52 AM",
      "commitName": "db7e51f90e44be275b568d0b512e9778d6d6b253",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "2/10/11, 4:32 PM",
      "commitNameOld": "e7ce7f710e1bf297f1a4258b53f22f550fc1f2e3",
      "commitAuthorOld": "acleung@google.com",
      "daysBetweenCommits": 4.76,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "static Double getNumberValue(Node n) {\n    switch(n.getType()) {\n        case Token.TRUE:\n            return 1.0;\n        case Token.FALSE:\n        case Token.NULL:\n            return 0.0;\n        case Token.NUMBER:\n            return n.getDouble();\n        case Token.VOID:\n            if (mayHaveSideEffects(n.getFirstChild())) {\n                return null;\n            } else {\n                return Double.NaN;\n            }\n        case Token.NAME:\n            String name \u003d n.getString();\n            if (name.equals(\"undefined\")) {\n                return Double.NaN;\n            }\n            if (name.equals(\"NaN\")) {\n                return Double.NaN;\n            }\n            if (name.equals(\"Infinity\")) {\n                return Double.POSITIVE_INFINITY;\n            }\n            return null;\n        case Token.NEG:\n            if (n.getChildCount() \u003d\u003d 1 \u0026\u0026 n.getFirstChild().getType() \u003d\u003d Token.NAME \u0026\u0026 n.getFirstChild().getString().equals(\"Infinity\")) {\n                return Double.NEGATIVE_INFINITY;\n            }\n            return null;\n        case Token.NOT:\n            TernaryValue child \u003d getBooleanValue(n.getFirstChild());\n            if (child !\u003d TernaryValue.UNKNOWN) {\n                return child.toBoolean(true) ? 0.0 : 1.0;\n            }\n            break;\n        case Token.STRING:\n            return getStringNumberValue(n.getString());\n        case Token.ARRAYLIT:\n        case Token.OBJECTLIT:\n            String value \u003d getStringValue(n);\n            return value !\u003d null ? getStringNumberValue(value) : null;\n    }\n    return null;\n}",
      "path": "src/com/google/javascript/jscomp/NodeUtil.java",
      "functionStartLine": 251,
      "functionName": "getNumberValue",
      "functionAnnotation": "",
      "functionDoc": "Gets the value of a node as a Number, or null if it cannot be converted.\nWhen it returns a non-null Double, this method effectively emulates the\n\u003ccode\u003eNumber()\u003c/code\u003e JavaScript cast function.\n",
      "diff": "@@ -1,64 +1,47 @@\n static Double getNumberValue(Node n) {\n     switch(n.getType()) {\n         case Token.TRUE:\n             return 1.0;\n         case Token.FALSE:\n         case Token.NULL:\n             return 0.0;\n         case Token.NUMBER:\n             return n.getDouble();\n         case Token.VOID:\n             if (mayHaveSideEffects(n.getFirstChild())) {\n                 return null;\n             } else {\n                 return Double.NaN;\n             }\n         case Token.NAME:\n             String name \u003d n.getString();\n             if (name.equals(\"undefined\")) {\n                 return Double.NaN;\n             }\n             if (name.equals(\"NaN\")) {\n                 return Double.NaN;\n             }\n             if (name.equals(\"Infinity\")) {\n                 return Double.POSITIVE_INFINITY;\n             }\n             return null;\n         case Token.NEG:\n             if (n.getChildCount() \u003d\u003d 1 \u0026\u0026 n.getFirstChild().getType() \u003d\u003d Token.NAME \u0026\u0026 n.getFirstChild().getString().equals(\"Infinity\")) {\n                 return Double.NEGATIVE_INFINITY;\n             }\n             return null;\n         case Token.NOT:\n             TernaryValue child \u003d getBooleanValue(n.getFirstChild());\n             if (child !\u003d TernaryValue.UNKNOWN) {\n                 return child.toBoolean(true) ? 0.0 : 1.0;\n             }\n             break;\n         case Token.STRING:\n-            String s \u003d trimJsWhiteSpace(n.getString());\n-            if (s.length() \u003d\u003d 0) {\n-                return 0.0;\n-            }\n-            if (s.length() \u003e 2 \u0026\u0026 s.charAt(0) \u003d\u003d \u00270\u0027 \u0026\u0026 (s.charAt(1) \u003d\u003d \u0027x\u0027 || s.charAt(1) \u003d\u003d \u0027X\u0027)) {\n-                try {\n-                    return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-                } catch (NumberFormatException e) {\n-                    return Double.NaN;\n-                }\n-            }\n-            if (s.length() \u003e 3 \u0026\u0026 (s.charAt(0) \u003d\u003d \u0027-\u0027 || s.charAt(0) \u003d\u003d \u0027+\u0027) \u0026\u0026 s.charAt(1) \u003d\u003d \u00270\u0027 \u0026\u0026 (s.charAt(2) \u003d\u003d \u0027x\u0027 || s.charAt(2) \u003d\u003d \u0027X\u0027)) {\n-                return null;\n-            }\n-            if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n-                return null;\n-            }\n-            try {\n-                return Double.parseDouble(s);\n-            } catch (NumberFormatException e) {\n-                return Double.NaN;\n-            }\n+            return getStringNumberValue(n.getString());\n+        case Token.ARRAYLIT:\n+        case Token.OBJECTLIT:\n+            String value \u003d getStringValue(n);\n+            return value !\u003d null ? getStringNumberValue(value) : null;\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e7ce7f710e1bf297f1a4258b53f22f550fc1f2e3": {
      "type": "Ybodychange",
      "commitMessage": "\nUse !0 and !1 for true and false.\n\nR\u003djohnlenz\nDELTA\u003d97  (81 added, 0 deleted, 16 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d500\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@775 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/10/11, 4:32 PM",
      "commitName": "e7ce7f710e1bf297f1a4258b53f22f550fc1f2e3",
      "commitAuthor": "acleung@google.com",
      "commitDateOld": "2/7/11, 2:59 PM",
      "commitNameOld": "1a7fbd18b47c102152869c3b046b65ff0f12fc43",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 3.06,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "static Double getNumberValue(Node n) {\n    switch(n.getType()) {\n        case Token.TRUE:\n            return 1.0;\n        case Token.FALSE:\n        case Token.NULL:\n            return 0.0;\n        case Token.NUMBER:\n            return n.getDouble();\n        case Token.VOID:\n            if (mayHaveSideEffects(n.getFirstChild())) {\n                return null;\n            } else {\n                return Double.NaN;\n            }\n        case Token.NAME:\n            String name \u003d n.getString();\n            if (name.equals(\"undefined\")) {\n                return Double.NaN;\n            }\n            if (name.equals(\"NaN\")) {\n                return Double.NaN;\n            }\n            if (name.equals(\"Infinity\")) {\n                return Double.POSITIVE_INFINITY;\n            }\n            return null;\n        case Token.NEG:\n            if (n.getChildCount() \u003d\u003d 1 \u0026\u0026 n.getFirstChild().getType() \u003d\u003d Token.NAME \u0026\u0026 n.getFirstChild().getString().equals(\"Infinity\")) {\n                return Double.NEGATIVE_INFINITY;\n            }\n            return null;\n        case Token.NOT:\n            TernaryValue child \u003d getBooleanValue(n.getFirstChild());\n            if (child !\u003d TernaryValue.UNKNOWN) {\n                return child.toBoolean(true) ? 0.0 : 1.0;\n            }\n            break;\n        case Token.STRING:\n            String s \u003d trimJsWhiteSpace(n.getString());\n            if (s.length() \u003d\u003d 0) {\n                return 0.0;\n            }\n            if (s.length() \u003e 2 \u0026\u0026 s.charAt(0) \u003d\u003d \u00270\u0027 \u0026\u0026 (s.charAt(1) \u003d\u003d \u0027x\u0027 || s.charAt(1) \u003d\u003d \u0027X\u0027)) {\n                try {\n                    return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n                } catch (NumberFormatException e) {\n                    return Double.NaN;\n                }\n            }\n            if (s.length() \u003e 3 \u0026\u0026 (s.charAt(0) \u003d\u003d \u0027-\u0027 || s.charAt(0) \u003d\u003d \u0027+\u0027) \u0026\u0026 s.charAt(1) \u003d\u003d \u00270\u0027 \u0026\u0026 (s.charAt(2) \u003d\u003d \u0027x\u0027 || s.charAt(2) \u003d\u003d \u0027X\u0027)) {\n                return null;\n            }\n            if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n                return null;\n            }\n            try {\n                return Double.parseDouble(s);\n            } catch (NumberFormatException e) {\n                return Double.NaN;\n            }\n    }\n    return null;\n}",
      "path": "src/com/google/javascript/jscomp/NodeUtil.java",
      "functionStartLine": 203,
      "functionName": "getNumberValue",
      "functionAnnotation": "",
      "functionDoc": "Gets the value of a node as a Number, or null if it cannot be converted.\nWhen it returns a non-null Double, this method effectively emulates the\n\u003ccode\u003eNumber()\u003c/code\u003e JavaScript cast function.\n",
      "diff": "@@ -1,58 +1,64 @@\n static Double getNumberValue(Node n) {\n     switch(n.getType()) {\n         case Token.TRUE:\n             return 1.0;\n         case Token.FALSE:\n         case Token.NULL:\n             return 0.0;\n         case Token.NUMBER:\n             return n.getDouble();\n         case Token.VOID:\n             if (mayHaveSideEffects(n.getFirstChild())) {\n                 return null;\n             } else {\n                 return Double.NaN;\n             }\n         case Token.NAME:\n             String name \u003d n.getString();\n             if (name.equals(\"undefined\")) {\n                 return Double.NaN;\n             }\n             if (name.equals(\"NaN\")) {\n                 return Double.NaN;\n             }\n             if (name.equals(\"Infinity\")) {\n                 return Double.POSITIVE_INFINITY;\n             }\n             return null;\n         case Token.NEG:\n             if (n.getChildCount() \u003d\u003d 1 \u0026\u0026 n.getFirstChild().getType() \u003d\u003d Token.NAME \u0026\u0026 n.getFirstChild().getString().equals(\"Infinity\")) {\n                 return Double.NEGATIVE_INFINITY;\n             }\n             return null;\n+        case Token.NOT:\n+            TernaryValue child \u003d getBooleanValue(n.getFirstChild());\n+            if (child !\u003d TernaryValue.UNKNOWN) {\n+                return child.toBoolean(true) ? 0.0 : 1.0;\n+            }\n+            break;\n         case Token.STRING:\n             String s \u003d trimJsWhiteSpace(n.getString());\n             if (s.length() \u003d\u003d 0) {\n                 return 0.0;\n             }\n             if (s.length() \u003e 2 \u0026\u0026 s.charAt(0) \u003d\u003d \u00270\u0027 \u0026\u0026 (s.charAt(1) \u003d\u003d \u0027x\u0027 || s.charAt(1) \u003d\u003d \u0027X\u0027)) {\n                 try {\n                     return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n                 } catch (NumberFormatException e) {\n                     return Double.NaN;\n                 }\n             }\n             if (s.length() \u003e 3 \u0026\u0026 (s.charAt(0) \u003d\u003d \u0027-\u0027 || s.charAt(0) \u003d\u003d \u0027+\u0027) \u0026\u0026 s.charAt(1) \u003d\u003d \u00270\u0027 \u0026\u0026 (s.charAt(2) \u003d\u003d \u0027x\u0027 || s.charAt(2) \u003d\u003d \u0027X\u0027)) {\n                 return null;\n             }\n             if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n                 return null;\n             }\n             try {\n                 return Double.parseDouble(s);\n             } catch (NumberFormatException e) {\n                 return Double.NaN;\n             }\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "20c504ecbbdea3908bde81709df5a3765d1e385e": {
      "type": "Ybodychange",
      "commitMessage": "\nPatch up NodeUtil.getNumberValue to handle strings values like\n\" 12 \" and \"baz\".\n\nR\u003dnicksantos\nDELTA\u003d123  (109 added, 2 deleted, 12 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d260\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@690 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/12/11, 2:57 PM",
      "commitName": "20c504ecbbdea3908bde81709df5a3765d1e385e",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "1/11/11, 3:59 PM",
      "commitNameOld": "685443251d5be1186e0d8abf4ad1181153bebe01",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 0.96,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "static Double getNumberValue(Node n) {\n    switch(n.getType()) {\n        case Token.TRUE:\n            return 1.0;\n        case Token.FALSE:\n        case Token.NULL:\n            return 0.0;\n        case Token.NUMBER:\n            return n.getDouble();\n        case Token.VOID:\n            if (mayHaveSideEffects(n.getFirstChild())) {\n                return null;\n            } else {\n                return Double.NaN;\n            }\n        case Token.NAME:\n            String name \u003d n.getString();\n            if (name.equals(\"undefined\")) {\n                return Double.NaN;\n            }\n            if (name.equals(\"NaN\")) {\n                return Double.NaN;\n            }\n            if (name.equals(\"Infinity\")) {\n                return Double.POSITIVE_INFINITY;\n            }\n            return null;\n        case Token.NEG:\n            if (n.getChildCount() \u003d\u003d 1 \u0026\u0026 n.getFirstChild().getType() \u003d\u003d Token.NAME \u0026\u0026 n.getFirstChild().getString().equals(\"Infinity\")) {\n                return Double.NEGATIVE_INFINITY;\n            }\n            return null;\n        case Token.STRING:\n            String s \u003d trimJsWhiteSpace(n.getString());\n            if (s.length() \u003d\u003d 0) {\n                return 0.0;\n            }\n            if (s.length() \u003e 2 \u0026\u0026 s.charAt(0) \u003d\u003d \u00270\u0027 \u0026\u0026 (s.charAt(1) \u003d\u003d \u0027x\u0027 || s.charAt(1) \u003d\u003d \u0027X\u0027)) {\n                try {\n                    return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n                } catch (NumberFormatException e) {\n                    return Double.NaN;\n                }\n            }\n            if (s.length() \u003e 3 \u0026\u0026 (s.charAt(0) \u003d\u003d \u0027-\u0027 || s.charAt(0) \u003d\u003d \u0027+\u0027) \u0026\u0026 s.charAt(1) \u003d\u003d \u00270\u0027 \u0026\u0026 (s.charAt(2) \u003d\u003d \u0027x\u0027 || s.charAt(2) \u003d\u003d \u0027X\u0027)) {\n                return null;\n            }\n            if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n                return null;\n            }\n            try {\n                return Double.parseDouble(s);\n            } catch (NumberFormatException e) {\n                return Double.NaN;\n            }\n    }\n    return null;\n}",
      "path": "src/com/google/javascript/jscomp/NodeUtil.java",
      "functionStartLine": 191,
      "functionName": "getNumberValue",
      "functionAnnotation": "",
      "functionDoc": "Gets the value of a node as a Number, or null if it cannot be converted.\nWhen it returns a non-null Double, this method effectively emulates the\n\u003ccode\u003eNumber()\u003c/code\u003e JavaScript cast function.\n",
      "diff": "@@ -1,48 +1,58 @@\n static Double getNumberValue(Node n) {\n     switch(n.getType()) {\n         case Token.TRUE:\n             return 1.0;\n         case Token.FALSE:\n         case Token.NULL:\n             return 0.0;\n         case Token.NUMBER:\n             return n.getDouble();\n         case Token.VOID:\n-            return Double.NaN;\n+            if (mayHaveSideEffects(n.getFirstChild())) {\n+                return null;\n+            } else {\n+                return Double.NaN;\n+            }\n         case Token.NAME:\n             String name \u003d n.getString();\n             if (name.equals(\"undefined\")) {\n                 return Double.NaN;\n             }\n             if (name.equals(\"NaN\")) {\n                 return Double.NaN;\n             }\n             if (name.equals(\"Infinity\")) {\n                 return Double.POSITIVE_INFINITY;\n             }\n             return null;\n         case Token.NEG:\n             if (n.getChildCount() \u003d\u003d 1 \u0026\u0026 n.getFirstChild().getType() \u003d\u003d Token.NAME \u0026\u0026 n.getFirstChild().getString().equals(\"Infinity\")) {\n                 return Double.NEGATIVE_INFINITY;\n             }\n             return null;\n         case Token.STRING:\n-            String s \u003d n.getString();\n+            String s \u003d trimJsWhiteSpace(n.getString());\n             if (s.length() \u003d\u003d 0) {\n                 return 0.0;\n             }\n             if (s.length() \u003e 2 \u0026\u0026 s.charAt(0) \u003d\u003d \u00270\u0027 \u0026\u0026 (s.charAt(1) \u003d\u003d \u0027x\u0027 || s.charAt(1) \u003d\u003d \u0027X\u0027)) {\n                 try {\n                     return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n                 } catch (NumberFormatException e) {\n-                    return null;\n+                    return Double.NaN;\n                 }\n             }\n+            if (s.length() \u003e 3 \u0026\u0026 (s.charAt(0) \u003d\u003d \u0027-\u0027 || s.charAt(0) \u003d\u003d \u0027+\u0027) \u0026\u0026 s.charAt(1) \u003d\u003d \u00270\u0027 \u0026\u0026 (s.charAt(2) \u003d\u003d \u0027x\u0027 || s.charAt(2) \u003d\u003d \u0027X\u0027)) {\n+                return null;\n+            }\n+            if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n+                return null;\n+            }\n             try {\n                 return Double.parseDouble(s);\n             } catch (NumberFormatException e) {\n-                return null;\n+                return Double.NaN;\n             }\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "711b76ac1015234f86805f1735ff2c3da195f55c": {
      "type": "Ybodychange",
      "commitMessage": "\nSome non-contraversal changes from 304.\nBased on a patch by Ilia Kantor\n\nR\u003dnicksantos\nDELTA\u003d333  (332 added, 0 deleted, 1 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d249\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@686 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/11/11, 12:06 PM",
      "commitName": "711b76ac1015234f86805f1735ff2c3da195f55c",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "1/6/11, 5:19 PM",
      "commitNameOld": "c1971584101865a747d5d1e25ef0c0193135957f",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 4.78,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "static Double getNumberValue(Node n) {\n    switch(n.getType()) {\n        case Token.TRUE:\n            return 1.0;\n        case Token.FALSE:\n        case Token.NULL:\n            return 0.0;\n        case Token.NUMBER:\n            return n.getDouble();\n        case Token.VOID:\n            return Double.NaN;\n        case Token.NAME:\n            String name \u003d n.getString();\n            if (name.equals(\"undefined\")) {\n                return Double.NaN;\n            }\n            if (name.equals(\"NaN\")) {\n                return Double.NaN;\n            }\n            if (name.equals(\"Infinity\")) {\n                return Double.POSITIVE_INFINITY;\n            }\n            return null;\n        case Token.NEG:\n            if (n.getChildCount() \u003d\u003d 1 \u0026\u0026 n.getFirstChild().getType() \u003d\u003d Token.NAME \u0026\u0026 n.getFirstChild().getString().equals(\"Infinity\")) {\n                return Double.NEGATIVE_INFINITY;\n            }\n            return null;\n        case Token.STRING:\n            String s \u003d n.getString();\n            if (s.length() \u003d\u003d 0) {\n                return 0.0;\n            }\n            if (s.length() \u003e 2 \u0026\u0026 s.charAt(0) \u003d\u003d \u00270\u0027 \u0026\u0026 (s.charAt(1) \u003d\u003d \u0027x\u0027 || s.charAt(1) \u003d\u003d \u0027X\u0027)) {\n                try {\n                    return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n                } catch (NumberFormatException e) {\n                    return null;\n                }\n            }\n            try {\n                return Double.parseDouble(s);\n            } catch (NumberFormatException e) {\n                return null;\n            }\n    }\n    return null;\n}",
      "path": "src/com/google/javascript/jscomp/NodeUtil.java",
      "functionStartLine": 191,
      "functionName": "getNumberValue",
      "functionAnnotation": "",
      "functionDoc": "Gets the value of a node as a Number, or null if it cannot be converted.\nWhen it returns a non-null Double, this method effectively emulates the\n\u003ccode\u003eNumber()\u003c/code\u003e JavaScript cast function.\n",
      "diff": "@@ -1,26 +1,48 @@\n static Double getNumberValue(Node n) {\n     switch(n.getType()) {\n         case Token.TRUE:\n             return 1.0;\n         case Token.FALSE:\n         case Token.NULL:\n             return 0.0;\n         case Token.NUMBER:\n             return n.getDouble();\n         case Token.VOID:\n             return Double.NaN;\n         case Token.NAME:\n             String name \u003d n.getString();\n             if (name.equals(\"undefined\")) {\n                 return Double.NaN;\n             }\n             if (name.equals(\"NaN\")) {\n                 return Double.NaN;\n             }\n             if (name.equals(\"Infinity\")) {\n                 return Double.POSITIVE_INFINITY;\n             }\n             return null;\n+        case Token.NEG:\n+            if (n.getChildCount() \u003d\u003d 1 \u0026\u0026 n.getFirstChild().getType() \u003d\u003d Token.NAME \u0026\u0026 n.getFirstChild().getString().equals(\"Infinity\")) {\n+                return Double.NEGATIVE_INFINITY;\n+            }\n+            return null;\n+        case Token.STRING:\n+            String s \u003d n.getString();\n+            if (s.length() \u003d\u003d 0) {\n+                return 0.0;\n+            }\n+            if (s.length() \u003e 2 \u0026\u0026 s.charAt(0) \u003d\u003d \u00270\u0027 \u0026\u0026 (s.charAt(1) \u003d\u003d \u0027x\u0027 || s.charAt(1) \u003d\u003d \u0027X\u0027)) {\n+                try {\n+                    return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n+                } catch (NumberFormatException e) {\n+                    return null;\n+                }\n+            }\n+            try {\n+                return Double.parseDouble(s);\n+            } catch (NumberFormatException e) {\n+                return null;\n+            }\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "510ff24ac51a8c73ff3f2401379654c37a00546b": {
      "type": "Yintroduced",
      "commitMessage": "\nFold a few more comparison cases.\n\nR\u003dnicksantos\nDELTA\u003d215  (169 added, 20 deleted, 26 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d98\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@610 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/8/10, 2:31 PM",
      "commitName": "510ff24ac51a8c73ff3f2401379654c37a00546b",
      "commitAuthor": "johnlenz@google.com",
      "diff": "@@ -0,0 +1,26 @@\n+static Double getNumberValue(Node n) {\n+    switch(n.getType()) {\n+        case Token.TRUE:\n+            return 1.0;\n+        case Token.FALSE:\n+        case Token.NULL:\n+            return 0.0;\n+        case Token.NUMBER:\n+            return n.getDouble();\n+        case Token.VOID:\n+            return Double.NaN;\n+        case Token.NAME:\n+            String name \u003d n.getString();\n+            if (name.equals(\"undefined\")) {\n+                return Double.NaN;\n+            }\n+            if (name.equals(\"NaN\")) {\n+                return Double.NaN;\n+            }\n+            if (name.equals(\"Infinity\")) {\n+                return Double.POSITIVE_INFINITY;\n+            }\n+            return null;\n+    }\n+    return null;\n+}\n\\ No newline at end of file\n",
      "actualSource": "static Double getNumberValue(Node n) {\n    switch(n.getType()) {\n        case Token.TRUE:\n            return 1.0;\n        case Token.FALSE:\n        case Token.NULL:\n            return 0.0;\n        case Token.NUMBER:\n            return n.getDouble();\n        case Token.VOID:\n            return Double.NaN;\n        case Token.NAME:\n            String name \u003d n.getString();\n            if (name.equals(\"undefined\")) {\n                return Double.NaN;\n            }\n            if (name.equals(\"NaN\")) {\n                return Double.NaN;\n            }\n            if (name.equals(\"Infinity\")) {\n                return Double.POSITIVE_INFINITY;\n            }\n            return null;\n    }\n    return null;\n}",
      "path": "src/com/google/javascript/jscomp/NodeUtil.java",
      "functionStartLine": 191,
      "functionName": "getNumberValue",
      "functionAnnotation": "",
      "functionDoc": "Gets the value of a node as a Number, or null if it cannot be converted.\nWhen it returns a non-null Double, this method effectively emulates the\n\u003ccode\u003eNumber()\u003c/code\u003e JavaScript cast function.\n"
    }
  }
}