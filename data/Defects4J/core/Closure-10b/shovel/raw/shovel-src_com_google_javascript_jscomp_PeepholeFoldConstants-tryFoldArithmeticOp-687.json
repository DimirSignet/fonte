{
  "origin": "codeshovel",
  "repositoryName": "Closure-10b",
  "repositoryPath": "/tmp/Closure-10b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PeepholeFoldConstants.java",
  "functionName": "tryFoldArithmeticOp",
  "functionId": "tryFoldArithmeticOp___n-Node__left-Node__right-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
  "functionAnnotation": "",
  "functionDoc": "Try to fold arithmetic binary operators\n",
  "functionStartLine": 687,
  "functionEndLine": 696,
  "numCommitsSeen": 119,
  "timeTaken": 7513,
  "changeHistory": [
    "bb877849306e221202b283f9b8eb3873d7bdc9ae",
    "510ff24ac51a8c73ff3f2401379654c37a00546b",
    "86fc0c596ece8917888075e8e8b42f701131632e",
    "b14f33a0c7d07320600acdf732f16f6f52aa999c",
    "66527dd399f7142edc491037b4488b158073ae55",
    "9de5e9b4671773bb3f2d5932e57c1b4186b9b777",
    "c9e89727dc8063d087d28e42629606f4fd74a6e5",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "bb877849306e221202b283f9b8eb3873d7bdc9ae": "Ybodychange",
    "510ff24ac51a8c73ff3f2401379654c37a00546b": "Ybodychange",
    "86fc0c596ece8917888075e8e8b42f701131632e": "Ymultichange(Yrename,Ybodychange)",
    "b14f33a0c7d07320600acdf732f16f6f52aa999c": "Ymultichange(Yrename,Ybodychange)",
    "66527dd399f7142edc491037b4488b158073ae55": "Ybodychange",
    "9de5e9b4671773bb3f2d5932e57c1b4186b9b777": "Yformatchange",
    "c9e89727dc8063d087d28e42629606f4fd74a6e5": "Ymultichange(Ymovefromfile,Yreturntypechange,Ymodifierchange,Ybodychange,Yparameterchange)",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bb877849306e221202b283f9b8eb3873d7bdc9ae": {
      "type": "Ybodychange",
      "commitMessage": "\nMore constant folding tweaks.\n- Remove extraneous unary \"+\"\n- Convert number to integer for BIT ops (not shift)\n- reduce literals in numberic contexts\n\nR\u003dnicksantos\nDELTA\u003d275  (225 added, 30 deleted, 20 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d319\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@712 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/19/11, 3:22 PM",
      "commitName": "bb877849306e221202b283f9b8eb3873d7bdc9ae",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "1/13/11, 1:33 PM",
      "commitNameOld": "e6e661b9ad751a51132f6de7e46be94d86fb3557",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 6.08,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "private Node tryFoldArithmeticOp(Node n, Node left, Node right) {\n    Node result \u003d performArithmeticOp(n.getType(), left, right);\n    if (result !\u003d null) {\n        result.copyInformationFromForTree(n);\n        n.getParent().replaceChild(n, result);\n        reportCodeChange();\n        return result;\n    }\n    return n;\n}",
      "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
      "functionStartLine": 610,
      "functionName": "tryFoldArithmeticOp",
      "functionAnnotation": "",
      "functionDoc": "Try to fold arithmetic binary operators\n",
      "diff": "@@ -1,9 +1,10 @@\n private Node tryFoldArithmeticOp(Node n, Node left, Node right) {\n     Node result \u003d performArithmeticOp(n.getType(), left, right);\n     if (result !\u003d null) {\n+        result.copyInformationFromForTree(n);\n         n.getParent().replaceChild(n, result);\n         reportCodeChange();\n         return result;\n     }\n     return n;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "510ff24ac51a8c73ff3f2401379654c37a00546b": {
      "type": "Ybodychange",
      "commitMessage": "\nFold a few more comparison cases.\n\nR\u003dnicksantos\nDELTA\u003d215  (169 added, 20 deleted, 26 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d98\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@610 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/8/10, 2:31 PM",
      "commitName": "510ff24ac51a8c73ff3f2401379654c37a00546b",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/30/10, 12:10 PM",
      "commitNameOld": "eaaa156632369f88e9667f55c7761cef8367cf57",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 8.1,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "actualSource": "private Node tryFoldArithmeticOp(Node n, Node left, Node right) {\n    Node result \u003d performArithmeticOp(n.getType(), left, right);\n    if (result !\u003d null) {\n        n.getParent().replaceChild(n, result);\n        reportCodeChange();\n        return result;\n    }\n    return n;\n}",
      "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
      "functionStartLine": 500,
      "functionName": "tryFoldArithmeticOp",
      "functionAnnotation": "",
      "functionDoc": "Try to fold arithmetic binary operators\n",
      "diff": "@@ -1,11 +1,9 @@\n private Node tryFoldArithmeticOp(Node n, Node left, Node right) {\n-    if (left.getType() \u003d\u003d Token.NUMBER \u0026\u0026 right.getType() \u003d\u003d Token.NUMBER) {\n-        Node result \u003d performArithmeticOp(n.getType(), left, right);\n-        if (result !\u003d null) {\n-            n.getParent().replaceChild(n, result);\n-            reportCodeChange();\n-            return result;\n-        }\n+    Node result \u003d performArithmeticOp(n.getType(), left, right);\n+    if (result !\u003d null) {\n+        n.getParent().replaceChild(n, result);\n+        reportCodeChange();\n+        return result;\n     }\n     return n;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "86fc0c596ece8917888075e8e8b42f701131632e": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "\nFix fold breakage with mixed constant types.\n\nR\u003dacleung\nDELTA\u003d20  (7 added, 4 deleted, 9 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1044274\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@531 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/1/10, 7:01 PM",
      "commitName": "86fc0c596ece8917888075e8e8b42f701131632e",
      "commitAuthor": "johnlenz@google.com",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "\nFix fold breakage with mixed constant types.\n\nR\u003dacleung\nDELTA\u003d20  (7 added, 4 deleted, 9 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1044274\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@531 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "11/1/10, 7:01 PM",
          "commitName": "86fc0c596ece8917888075e8e8b42f701131632e",
          "commitAuthor": "johnlenz@google.com",
          "commitDateOld": "11/1/10, 9:37 AM",
          "commitNameOld": "b14f33a0c7d07320600acdf732f16f6f52aa999c",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 0.39,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private Node tryFoldArithmeticOp(Node n, Node left, Node right) {\n    if (left.getType() \u003d\u003d Token.NUMBER \u0026\u0026 right.getType() \u003d\u003d Token.NUMBER) {\n        Node result \u003d performArithmeticOp(n.getType(), left, right);\n        if (result !\u003d null) {\n            n.getParent().replaceChild(n, result);\n            reportCodeChange();\n            return result;\n        }\n    }\n    return n;\n}",
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
          "functionStartLine": 500,
          "functionName": "tryFoldArithmeticOp",
          "functionAnnotation": "",
          "functionDoc": "Try to fold arithmetic binary operators\n",
          "diff": "@@ -1,9 +1,11 @@\n-private Node tryFoldOp(Node n, Node left, Node right) {\n-    Node result \u003d performArithmeticOp(n.getType(), left, right);\n-    if (result !\u003d null) {\n-        n.getParent().replaceChild(n, result);\n-        reportCodeChange();\n-        return result;\n+private Node tryFoldArithmeticOp(Node n, Node left, Node right) {\n+    if (left.getType() \u003d\u003d Token.NUMBER \u0026\u0026 right.getType() \u003d\u003d Token.NUMBER) {\n+        Node result \u003d performArithmeticOp(n.getType(), left, right);\n+        if (result !\u003d null) {\n+            n.getParent().replaceChild(n, result);\n+            reportCodeChange();\n+            return result;\n+        }\n     }\n     return n;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "tryFoldOp",
            "newValue": "tryFoldArithmeticOp"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nFix fold breakage with mixed constant types.\n\nR\u003dacleung\nDELTA\u003d20  (7 added, 4 deleted, 9 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1044274\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@531 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "11/1/10, 7:01 PM",
          "commitName": "86fc0c596ece8917888075e8e8b42f701131632e",
          "commitAuthor": "johnlenz@google.com",
          "commitDateOld": "11/1/10, 9:37 AM",
          "commitNameOld": "b14f33a0c7d07320600acdf732f16f6f52aa999c",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 0.39,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private Node tryFoldArithmeticOp(Node n, Node left, Node right) {\n    if (left.getType() \u003d\u003d Token.NUMBER \u0026\u0026 right.getType() \u003d\u003d Token.NUMBER) {\n        Node result \u003d performArithmeticOp(n.getType(), left, right);\n        if (result !\u003d null) {\n            n.getParent().replaceChild(n, result);\n            reportCodeChange();\n            return result;\n        }\n    }\n    return n;\n}",
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
          "functionStartLine": 500,
          "functionName": "tryFoldArithmeticOp",
          "functionAnnotation": "",
          "functionDoc": "Try to fold arithmetic binary operators\n",
          "diff": "@@ -1,9 +1,11 @@\n-private Node tryFoldOp(Node n, Node left, Node right) {\n-    Node result \u003d performArithmeticOp(n.getType(), left, right);\n-    if (result !\u003d null) {\n-        n.getParent().replaceChild(n, result);\n-        reportCodeChange();\n-        return result;\n+private Node tryFoldArithmeticOp(Node n, Node left, Node right) {\n+    if (left.getType() \u003d\u003d Token.NUMBER \u0026\u0026 right.getType() \u003d\u003d Token.NUMBER) {\n+        Node result \u003d performArithmeticOp(n.getType(), left, right);\n+        if (result !\u003d null) {\n+            n.getParent().replaceChild(n, result);\n+            reportCodeChange();\n+            return result;\n+        }\n     }\n     return n;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "b14f33a0c7d07320600acdf732f16f6f52aa999c": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "\nFold more associative operations.\nFixes issue 245\n\nR\u003dnicksantos\nDELTA\u003d250  (139 added, 61 deleted, 50 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1041044\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@530 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/1/10, 9:37 AM",
      "commitName": "b14f33a0c7d07320600acdf732f16f6f52aa999c",
      "commitAuthor": "johnlenz@google.com",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "\nFold more associative operations.\nFixes issue 245\n\nR\u003dnicksantos\nDELTA\u003d250  (139 added, 61 deleted, 50 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1041044\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@530 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "11/1/10, 9:37 AM",
          "commitName": "b14f33a0c7d07320600acdf732f16f6f52aa999c",
          "commitAuthor": "johnlenz@google.com",
          "commitDateOld": "10/25/10, 10:22 AM",
          "commitNameOld": "bbf3ed85e0f668331edb269329bf577fe27932a8",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 6.97,
          "commitsBetweenForRepo": 23,
          "commitsBetweenForFile": 1,
          "actualSource": "private Node tryFoldOp(Node n, Node left, Node right) {\n    Node result \u003d performArithmeticOp(n.getType(), left, right);\n    if (result !\u003d null) {\n        n.getParent().replaceChild(n, result);\n        reportCodeChange();\n        return result;\n    }\n    return n;\n}",
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
          "functionStartLine": 504,
          "functionName": "tryFoldOp",
          "functionAnnotation": "",
          "functionDoc": "Try to fold arithmetic binary operators\n",
          "diff": "@@ -1,34 +1,9 @@\n-private Node tryFoldBitAndOr(Node n, Node left, Node right) {\n-    Preconditions.checkArgument(n.getType() \u003d\u003d Token.BITAND || n.getType() \u003d\u003d Token.BITOR);\n-    if (left.getType() !\u003d Token.NUMBER || right.getType() !\u003d Token.NUMBER) {\n-        return n;\n+private Node tryFoldOp(Node n, Node left, Node right) {\n+    Node result \u003d performArithmeticOp(n.getType(), left, right);\n+    if (result !\u003d null) {\n+        n.getParent().replaceChild(n, result);\n+        reportCodeChange();\n+        return result;\n     }\n-    double resultDouble;\n-    double lval \u003d left.getDouble();\n-    double rval \u003d right.getDouble();\n-    if (lval \u003c Integer.MIN_VALUE || lval \u003e Integer.MAX_VALUE || rval \u003c Integer.MIN_VALUE || rval \u003e Integer.MAX_VALUE) {\n-        return n;\n-    }\n-    int lvalInt \u003d (int) lval;\n-    if (lvalInt !\u003d lval) {\n-        return n;\n-    }\n-    int rvalInt \u003d (int) rval;\n-    if (rvalInt !\u003d rval) {\n-        return n;\n-    }\n-    switch(n.getType()) {\n-        case Token.BITAND:\n-            resultDouble \u003d lvalInt \u0026 rvalInt;\n-            break;\n-        case Token.BITOR:\n-            resultDouble \u003d lvalInt | rvalInt;\n-            break;\n-        default:\n-            throw new Error(\"Unknown bitwise operator\");\n-    }\n-    Node newNumber \u003d Node.newNumber(resultDouble);\n-    n.getParent().replaceChild(n, newNumber);\n-    reportCodeChange();\n-    return newNumber;\n+    return n;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "tryFoldBitAndOr",
            "newValue": "tryFoldOp"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nFold more associative operations.\nFixes issue 245\n\nR\u003dnicksantos\nDELTA\u003d250  (139 added, 61 deleted, 50 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1041044\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@530 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "11/1/10, 9:37 AM",
          "commitName": "b14f33a0c7d07320600acdf732f16f6f52aa999c",
          "commitAuthor": "johnlenz@google.com",
          "commitDateOld": "10/25/10, 10:22 AM",
          "commitNameOld": "bbf3ed85e0f668331edb269329bf577fe27932a8",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 6.97,
          "commitsBetweenForRepo": 23,
          "commitsBetweenForFile": 1,
          "actualSource": "private Node tryFoldOp(Node n, Node left, Node right) {\n    Node result \u003d performArithmeticOp(n.getType(), left, right);\n    if (result !\u003d null) {\n        n.getParent().replaceChild(n, result);\n        reportCodeChange();\n        return result;\n    }\n    return n;\n}",
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
          "functionStartLine": 504,
          "functionName": "tryFoldOp",
          "functionAnnotation": "",
          "functionDoc": "Try to fold arithmetic binary operators\n",
          "diff": "@@ -1,34 +1,9 @@\n-private Node tryFoldBitAndOr(Node n, Node left, Node right) {\n-    Preconditions.checkArgument(n.getType() \u003d\u003d Token.BITAND || n.getType() \u003d\u003d Token.BITOR);\n-    if (left.getType() !\u003d Token.NUMBER || right.getType() !\u003d Token.NUMBER) {\n-        return n;\n+private Node tryFoldOp(Node n, Node left, Node right) {\n+    Node result \u003d performArithmeticOp(n.getType(), left, right);\n+    if (result !\u003d null) {\n+        n.getParent().replaceChild(n, result);\n+        reportCodeChange();\n+        return result;\n     }\n-    double resultDouble;\n-    double lval \u003d left.getDouble();\n-    double rval \u003d right.getDouble();\n-    if (lval \u003c Integer.MIN_VALUE || lval \u003e Integer.MAX_VALUE || rval \u003c Integer.MIN_VALUE || rval \u003e Integer.MAX_VALUE) {\n-        return n;\n-    }\n-    int lvalInt \u003d (int) lval;\n-    if (lvalInt !\u003d lval) {\n-        return n;\n-    }\n-    int rvalInt \u003d (int) rval;\n-    if (rvalInt !\u003d rval) {\n-        return n;\n-    }\n-    switch(n.getType()) {\n-        case Token.BITAND:\n-            resultDouble \u003d lvalInt \u0026 rvalInt;\n-            break;\n-        case Token.BITOR:\n-            resultDouble \u003d lvalInt | rvalInt;\n-            break;\n-        default:\n-            throw new Error(\"Unknown bitwise operator\");\n-    }\n-    Node newNumber \u003d Node.newNumber(resultDouble);\n-    n.getParent().replaceChild(n, newNumber);\n-    reportCodeChange();\n-    return newNumber;\n+    return n;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "66527dd399f7142edc491037b4488b158073ae55": {
      "type": "Ybodychange",
      "commitMessage": "\nFix needed PeepholeRemoveDeadCode to fix the Calendar builde.\n\nR\u003ddcc\nDELTA\u003d330  (161 added, 96 deleted, 73 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d103004\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@354 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/12/10, 12:04 PM",
      "commitName": "66527dd399f7142edc491037b4488b158073ae55",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "8/12/10, 6:02 PM",
      "commitNameOld": "15acafb00636f99295b394145b9b60a5e624ddfa",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": -0.25,
      "commitsBetweenForRepo": 0,
      "commitsBetweenForFile": 0,
      "actualSource": "private Node tryFoldBitAndOr(Node n, Node left, Node right) {\n    Preconditions.checkArgument(n.getType() \u003d\u003d Token.BITAND || n.getType() \u003d\u003d Token.BITOR);\n    if (left.getType() !\u003d Token.NUMBER || right.getType() !\u003d Token.NUMBER) {\n        return n;\n    }\n    double resultDouble;\n    double lval \u003d left.getDouble();\n    double rval \u003d right.getDouble();\n    if (lval \u003c Integer.MIN_VALUE || lval \u003e Integer.MAX_VALUE || rval \u003c Integer.MIN_VALUE || rval \u003e Integer.MAX_VALUE) {\n        return n;\n    }\n    int lvalInt \u003d (int) lval;\n    if (lvalInt !\u003d lval) {\n        return n;\n    }\n    int rvalInt \u003d (int) rval;\n    if (rvalInt !\u003d rval) {\n        return n;\n    }\n    switch(n.getType()) {\n        case Token.BITAND:\n            resultDouble \u003d lvalInt \u0026 rvalInt;\n            break;\n        case Token.BITOR:\n            resultDouble \u003d lvalInt | rvalInt;\n            break;\n        default:\n            throw new Error(\"Unknown bitwise operator\");\n    }\n    Node newNumber \u003d Node.newNumber(resultDouble);\n    n.getParent().replaceChild(n, newNumber);\n    reportCodeChange();\n    return newNumber;\n}",
      "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
      "functionStartLine": 605,
      "functionName": "tryFoldBitAndOr",
      "functionAnnotation": "",
      "functionDoc": "Try to fold arithmetic binary operators\n",
      "diff": "@@ -1,33 +1,34 @@\n private Node tryFoldBitAndOr(Node n, Node left, Node right) {\n     Preconditions.checkArgument(n.getType() \u003d\u003d Token.BITAND || n.getType() \u003d\u003d Token.BITOR);\n-    if (left.getType() \u003d\u003d Token.NUMBER \u0026\u0026 right.getType() \u003d\u003d Token.NUMBER) {\n-        double resultDouble;\n-        double lval \u003d left.getDouble();\n-        double rval \u003d right.getDouble();\n-        if (lval \u003c Integer.MIN_VALUE || lval \u003e Integer.MAX_VALUE || rval \u003c Integer.MIN_VALUE || rval \u003e Integer.MAX_VALUE) {\n-            return n;\n-        }\n-        int lvalInt \u003d (int) lval;\n-        if (lvalInt !\u003d lval) {\n-            return n;\n-        }\n-        int rvalInt \u003d (int) rval;\n-        if (rvalInt !\u003d rval) {\n-            return n;\n-        }\n-        switch(n.getType()) {\n-            case Token.BITAND:\n-                resultDouble \u003d lvalInt \u0026 rvalInt;\n-                break;\n-            case Token.BITOR:\n-                resultDouble \u003d lvalInt | rvalInt;\n-                break;\n-            default:\n-                throw new Error(\"Unknown bitwise operator\");\n-        }\n-        Node newNumber \u003d Node.newNumber(resultDouble);\n-        n.getParent().replaceChild(n, newNumber);\n-        reportCodeChange();\n+    if (left.getType() !\u003d Token.NUMBER || right.getType() !\u003d Token.NUMBER) {\n+        return n;\n     }\n-    return n;\n+    double resultDouble;\n+    double lval \u003d left.getDouble();\n+    double rval \u003d right.getDouble();\n+    if (lval \u003c Integer.MIN_VALUE || lval \u003e Integer.MAX_VALUE || rval \u003c Integer.MIN_VALUE || rval \u003e Integer.MAX_VALUE) {\n+        return n;\n+    }\n+    int lvalInt \u003d (int) lval;\n+    if (lvalInt !\u003d lval) {\n+        return n;\n+    }\n+    int rvalInt \u003d (int) rval;\n+    if (rvalInt !\u003d rval) {\n+        return n;\n+    }\n+    switch(n.getType()) {\n+        case Token.BITAND:\n+            resultDouble \u003d lvalInt \u0026 rvalInt;\n+            break;\n+        case Token.BITOR:\n+            resultDouble \u003d lvalInt | rvalInt;\n+            break;\n+        default:\n+            throw new Error(\"Unknown bitwise operator\");\n+    }\n+    Node newNumber \u003d Node.newNumber(resultDouble);\n+    n.getParent().replaceChild(n, newNumber);\n+    reportCodeChange();\n+    return newNumber;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9de5e9b4671773bb3f2d5932e57c1b4186b9b777": {
      "type": "Yformatchange",
      "commitMessage": "\nChange on 2010/06/30 15:06:33 by johnlenz\n\n\tAdd a diagnostic group so that projects with weird externs can opt-out of the stricter extern checks.\n\n\tR\u003dnicksantos\n\tDELTA\u003d54  (52 added, 0 deleted, 2 changed)\n\nChange on 2010/06/30 17:56:51 by johnlenz\n\n\tRevert warning levels until after a release is put out to control them.\n\n\tR\u003dnicksantos\n\tDELTA\u003d4  (2 added, 0 deleted, 2 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d47002\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@260 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/1/10, 7:38 AM",
      "commitName": "9de5e9b4671773bb3f2d5932e57c1b4186b9b777",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "6/28/10, 5:30 PM",
      "commitNameOld": "9925370292834ea846727f1f9db76af0d40261df",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 2.59,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private Node tryFoldBitAndOr(Node n, Node left, Node right) {\n    Preconditions.checkArgument(n.getType() \u003d\u003d Token.BITAND || n.getType() \u003d\u003d Token.BITOR);\n    if (left.getType() \u003d\u003d Token.NUMBER \u0026\u0026 right.getType() \u003d\u003d Token.NUMBER) {\n        double resultDouble;\n        double lval \u003d left.getDouble();\n        double rval \u003d right.getDouble();\n        if (lval \u003c Integer.MIN_VALUE || lval \u003e Integer.MAX_VALUE || rval \u003c Integer.MIN_VALUE || rval \u003e Integer.MAX_VALUE) {\n            return n;\n        }\n        int lvalInt \u003d (int) lval;\n        if (lvalInt !\u003d lval) {\n            return n;\n        }\n        int rvalInt \u003d (int) rval;\n        if (rvalInt !\u003d rval) {\n            return n;\n        }\n        switch(n.getType()) {\n            case Token.BITAND:\n                resultDouble \u003d lvalInt \u0026 rvalInt;\n                break;\n            case Token.BITOR:\n                resultDouble \u003d lvalInt | rvalInt;\n                break;\n            default:\n                throw new Error(\"Unknown bitwise operator\");\n        }\n        Node newNumber \u003d Node.newNumber(resultDouble);\n        n.getParent().replaceChild(n, newNumber);\n        reportCodeChange();\n    }\n    return n;\n}",
      "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
      "functionStartLine": 597,
      "functionName": "tryFoldBitAndOr",
      "functionAnnotation": "",
      "functionDoc": "Try to fold arithmetic binary operators\n",
      "diff": "",
      "extendedDetails": {}
    },
    "c9e89727dc8063d087d28e42629606f4fd74a6e5": {
      "type": "Ymultichange(Ymovefromfile,Yreturntypechange,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "\nChange on 2010/06/22 by nicksantos\n\n\tvariable coalescing better be run AFTER ambiguate properties, and\n\tafter denormalization.\n\n\tR\u003djohnlenz\n\tDELTA\u003d36  (20 added, 16 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d34005\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@248 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/22/10, 4:00 PM",
      "commitName": "c9e89727dc8063d087d28e42629606f4fd74a6e5",
      "commitAuthor": "Nicholas.J.Santos",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "\nChange on 2010/06/22 by nicksantos\n\n\tvariable coalescing better be run AFTER ambiguate properties, and\n\tafter denormalization.\n\n\tR\u003djohnlenz\n\tDELTA\u003d36  (20 added, 16 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d34005\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@248 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "6/22/10, 4:00 PM",
          "commitName": "c9e89727dc8063d087d28e42629606f4fd74a6e5",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "6/21/10, 12:59 PM",
          "commitNameOld": "5f09a76531fb4f6e182238411017e6fc7e74ad16",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 1.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private Node tryFoldBitAndOr(Node n, Node left, Node right) {\n    Preconditions.checkArgument(n.getType() \u003d\u003d Token.BITAND || n.getType() \u003d\u003d Token.BITOR);\n    if (left.getType() \u003d\u003d Token.NUMBER \u0026\u0026 right.getType() \u003d\u003d Token.NUMBER) {\n        double resultDouble;\n        double lval \u003d left.getDouble();\n        double rval \u003d right.getDouble();\n        if (lval \u003c Integer.MIN_VALUE || lval \u003e Integer.MAX_VALUE || rval \u003c Integer.MIN_VALUE || rval \u003e Integer.MAX_VALUE) {\n            return n;\n        }\n        int lvalInt \u003d (int) lval;\n        if (lvalInt !\u003d lval) {\n            return n;\n        }\n        int rvalInt \u003d (int) rval;\n        if (rvalInt !\u003d rval) {\n            return n;\n        }\n        switch(n.getType()) {\n            case Token.BITAND:\n                resultDouble \u003d lvalInt \u0026 rvalInt;\n                break;\n            case Token.BITOR:\n                resultDouble \u003d lvalInt | rvalInt;\n                break;\n            default:\n                throw new Error(\"Unknown bitwise operator\");\n        }\n        Node newNumber \u003d Node.newNumber(resultDouble);\n        n.getParent().replaceChild(n, newNumber);\n        reportCodeChange();\n    }\n    return n;\n}",
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
          "functionStartLine": 586,
          "functionName": "tryFoldBitAndOr",
          "functionAnnotation": "",
          "functionDoc": "Try to fold arithmetic binary operators\n",
          "diff": "@@ -1,30 +1,33 @@\n-void tryFoldBitAndOr(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n+private Node tryFoldBitAndOr(Node n, Node left, Node right) {\n+    Preconditions.checkArgument(n.getType() \u003d\u003d Token.BITAND || n.getType() \u003d\u003d Token.BITOR);\n     if (left.getType() \u003d\u003d Token.NUMBER \u0026\u0026 right.getType() \u003d\u003d Token.NUMBER) {\n-        double result;\n+        double resultDouble;\n         double lval \u003d left.getDouble();\n         double rval \u003d right.getDouble();\n         if (lval \u003c Integer.MIN_VALUE || lval \u003e Integer.MAX_VALUE || rval \u003c Integer.MIN_VALUE || rval \u003e Integer.MAX_VALUE) {\n-            return;\n+            return n;\n         }\n         int lvalInt \u003d (int) lval;\n         if (lvalInt !\u003d lval) {\n-            return;\n+            return n;\n         }\n         int rvalInt \u003d (int) rval;\n         if (rvalInt !\u003d rval) {\n-            return;\n+            return n;\n         }\n         switch(n.getType()) {\n             case Token.BITAND:\n-                result \u003d lvalInt \u0026 rvalInt;\n+                resultDouble \u003d lvalInt \u0026 rvalInt;\n                 break;\n             case Token.BITOR:\n-                result \u003d lvalInt | rvalInt;\n+                resultDouble \u003d lvalInt | rvalInt;\n                 break;\n             default:\n                 throw new Error(\"Unknown bitwise operator\");\n         }\n-        parent.replaceChild(n, Node.newNumber(result));\n-        t.getCompiler().reportCodeChange();\n+        Node newNumber \u003d Node.newNumber(resultDouble);\n+        n.getParent().replaceChild(n, newNumber);\n+        reportCodeChange();\n     }\n+    return n;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/com/google/javascript/jscomp/FoldConstants.java",
            "newPath": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
            "oldMethodName": "tryFoldBitAndOr",
            "newMethodName": "tryFoldBitAndOr"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "\nChange on 2010/06/22 by nicksantos\n\n\tvariable coalescing better be run AFTER ambiguate properties, and\n\tafter denormalization.\n\n\tR\u003djohnlenz\n\tDELTA\u003d36  (20 added, 16 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d34005\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@248 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "6/22/10, 4:00 PM",
          "commitName": "c9e89727dc8063d087d28e42629606f4fd74a6e5",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "6/21/10, 12:59 PM",
          "commitNameOld": "5f09a76531fb4f6e182238411017e6fc7e74ad16",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 1.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private Node tryFoldBitAndOr(Node n, Node left, Node right) {\n    Preconditions.checkArgument(n.getType() \u003d\u003d Token.BITAND || n.getType() \u003d\u003d Token.BITOR);\n    if (left.getType() \u003d\u003d Token.NUMBER \u0026\u0026 right.getType() \u003d\u003d Token.NUMBER) {\n        double resultDouble;\n        double lval \u003d left.getDouble();\n        double rval \u003d right.getDouble();\n        if (lval \u003c Integer.MIN_VALUE || lval \u003e Integer.MAX_VALUE || rval \u003c Integer.MIN_VALUE || rval \u003e Integer.MAX_VALUE) {\n            return n;\n        }\n        int lvalInt \u003d (int) lval;\n        if (lvalInt !\u003d lval) {\n            return n;\n        }\n        int rvalInt \u003d (int) rval;\n        if (rvalInt !\u003d rval) {\n            return n;\n        }\n        switch(n.getType()) {\n            case Token.BITAND:\n                resultDouble \u003d lvalInt \u0026 rvalInt;\n                break;\n            case Token.BITOR:\n                resultDouble \u003d lvalInt | rvalInt;\n                break;\n            default:\n                throw new Error(\"Unknown bitwise operator\");\n        }\n        Node newNumber \u003d Node.newNumber(resultDouble);\n        n.getParent().replaceChild(n, newNumber);\n        reportCodeChange();\n    }\n    return n;\n}",
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
          "functionStartLine": 586,
          "functionName": "tryFoldBitAndOr",
          "functionAnnotation": "",
          "functionDoc": "Try to fold arithmetic binary operators\n",
          "diff": "@@ -1,30 +1,33 @@\n-void tryFoldBitAndOr(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n+private Node tryFoldBitAndOr(Node n, Node left, Node right) {\n+    Preconditions.checkArgument(n.getType() \u003d\u003d Token.BITAND || n.getType() \u003d\u003d Token.BITOR);\n     if (left.getType() \u003d\u003d Token.NUMBER \u0026\u0026 right.getType() \u003d\u003d Token.NUMBER) {\n-        double result;\n+        double resultDouble;\n         double lval \u003d left.getDouble();\n         double rval \u003d right.getDouble();\n         if (lval \u003c Integer.MIN_VALUE || lval \u003e Integer.MAX_VALUE || rval \u003c Integer.MIN_VALUE || rval \u003e Integer.MAX_VALUE) {\n-            return;\n+            return n;\n         }\n         int lvalInt \u003d (int) lval;\n         if (lvalInt !\u003d lval) {\n-            return;\n+            return n;\n         }\n         int rvalInt \u003d (int) rval;\n         if (rvalInt !\u003d rval) {\n-            return;\n+            return n;\n         }\n         switch(n.getType()) {\n             case Token.BITAND:\n-                result \u003d lvalInt \u0026 rvalInt;\n+                resultDouble \u003d lvalInt \u0026 rvalInt;\n                 break;\n             case Token.BITOR:\n-                result \u003d lvalInt | rvalInt;\n+                resultDouble \u003d lvalInt | rvalInt;\n                 break;\n             default:\n                 throw new Error(\"Unknown bitwise operator\");\n         }\n-        parent.replaceChild(n, Node.newNumber(result));\n-        t.getCompiler().reportCodeChange();\n+        Node newNumber \u003d Node.newNumber(resultDouble);\n+        n.getParent().replaceChild(n, newNumber);\n+        reportCodeChange();\n     }\n+    return n;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "Node"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "\nChange on 2010/06/22 by nicksantos\n\n\tvariable coalescing better be run AFTER ambiguate properties, and\n\tafter denormalization.\n\n\tR\u003djohnlenz\n\tDELTA\u003d36  (20 added, 16 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d34005\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@248 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "6/22/10, 4:00 PM",
          "commitName": "c9e89727dc8063d087d28e42629606f4fd74a6e5",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "6/21/10, 12:59 PM",
          "commitNameOld": "5f09a76531fb4f6e182238411017e6fc7e74ad16",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 1.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private Node tryFoldBitAndOr(Node n, Node left, Node right) {\n    Preconditions.checkArgument(n.getType() \u003d\u003d Token.BITAND || n.getType() \u003d\u003d Token.BITOR);\n    if (left.getType() \u003d\u003d Token.NUMBER \u0026\u0026 right.getType() \u003d\u003d Token.NUMBER) {\n        double resultDouble;\n        double lval \u003d left.getDouble();\n        double rval \u003d right.getDouble();\n        if (lval \u003c Integer.MIN_VALUE || lval \u003e Integer.MAX_VALUE || rval \u003c Integer.MIN_VALUE || rval \u003e Integer.MAX_VALUE) {\n            return n;\n        }\n        int lvalInt \u003d (int) lval;\n        if (lvalInt !\u003d lval) {\n            return n;\n        }\n        int rvalInt \u003d (int) rval;\n        if (rvalInt !\u003d rval) {\n            return n;\n        }\n        switch(n.getType()) {\n            case Token.BITAND:\n                resultDouble \u003d lvalInt \u0026 rvalInt;\n                break;\n            case Token.BITOR:\n                resultDouble \u003d lvalInt | rvalInt;\n                break;\n            default:\n                throw new Error(\"Unknown bitwise operator\");\n        }\n        Node newNumber \u003d Node.newNumber(resultDouble);\n        n.getParent().replaceChild(n, newNumber);\n        reportCodeChange();\n    }\n    return n;\n}",
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
          "functionStartLine": 586,
          "functionName": "tryFoldBitAndOr",
          "functionAnnotation": "",
          "functionDoc": "Try to fold arithmetic binary operators\n",
          "diff": "@@ -1,30 +1,33 @@\n-void tryFoldBitAndOr(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n+private Node tryFoldBitAndOr(Node n, Node left, Node right) {\n+    Preconditions.checkArgument(n.getType() \u003d\u003d Token.BITAND || n.getType() \u003d\u003d Token.BITOR);\n     if (left.getType() \u003d\u003d Token.NUMBER \u0026\u0026 right.getType() \u003d\u003d Token.NUMBER) {\n-        double result;\n+        double resultDouble;\n         double lval \u003d left.getDouble();\n         double rval \u003d right.getDouble();\n         if (lval \u003c Integer.MIN_VALUE || lval \u003e Integer.MAX_VALUE || rval \u003c Integer.MIN_VALUE || rval \u003e Integer.MAX_VALUE) {\n-            return;\n+            return n;\n         }\n         int lvalInt \u003d (int) lval;\n         if (lvalInt !\u003d lval) {\n-            return;\n+            return n;\n         }\n         int rvalInt \u003d (int) rval;\n         if (rvalInt !\u003d rval) {\n-            return;\n+            return n;\n         }\n         switch(n.getType()) {\n             case Token.BITAND:\n-                result \u003d lvalInt \u0026 rvalInt;\n+                resultDouble \u003d lvalInt \u0026 rvalInt;\n                 break;\n             case Token.BITOR:\n-                result \u003d lvalInt | rvalInt;\n+                resultDouble \u003d lvalInt | rvalInt;\n                 break;\n             default:\n                 throw new Error(\"Unknown bitwise operator\");\n         }\n-        parent.replaceChild(n, Node.newNumber(result));\n-        t.getCompiler().reportCodeChange();\n+        Node newNumber \u003d Node.newNumber(resultDouble);\n+        n.getParent().replaceChild(n, newNumber);\n+        reportCodeChange();\n     }\n+    return n;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nChange on 2010/06/22 by nicksantos\n\n\tvariable coalescing better be run AFTER ambiguate properties, and\n\tafter denormalization.\n\n\tR\u003djohnlenz\n\tDELTA\u003d36  (20 added, 16 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d34005\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@248 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "6/22/10, 4:00 PM",
          "commitName": "c9e89727dc8063d087d28e42629606f4fd74a6e5",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "6/21/10, 12:59 PM",
          "commitNameOld": "5f09a76531fb4f6e182238411017e6fc7e74ad16",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 1.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private Node tryFoldBitAndOr(Node n, Node left, Node right) {\n    Preconditions.checkArgument(n.getType() \u003d\u003d Token.BITAND || n.getType() \u003d\u003d Token.BITOR);\n    if (left.getType() \u003d\u003d Token.NUMBER \u0026\u0026 right.getType() \u003d\u003d Token.NUMBER) {\n        double resultDouble;\n        double lval \u003d left.getDouble();\n        double rval \u003d right.getDouble();\n        if (lval \u003c Integer.MIN_VALUE || lval \u003e Integer.MAX_VALUE || rval \u003c Integer.MIN_VALUE || rval \u003e Integer.MAX_VALUE) {\n            return n;\n        }\n        int lvalInt \u003d (int) lval;\n        if (lvalInt !\u003d lval) {\n            return n;\n        }\n        int rvalInt \u003d (int) rval;\n        if (rvalInt !\u003d rval) {\n            return n;\n        }\n        switch(n.getType()) {\n            case Token.BITAND:\n                resultDouble \u003d lvalInt \u0026 rvalInt;\n                break;\n            case Token.BITOR:\n                resultDouble \u003d lvalInt | rvalInt;\n                break;\n            default:\n                throw new Error(\"Unknown bitwise operator\");\n        }\n        Node newNumber \u003d Node.newNumber(resultDouble);\n        n.getParent().replaceChild(n, newNumber);\n        reportCodeChange();\n    }\n    return n;\n}",
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
          "functionStartLine": 586,
          "functionName": "tryFoldBitAndOr",
          "functionAnnotation": "",
          "functionDoc": "Try to fold arithmetic binary operators\n",
          "diff": "@@ -1,30 +1,33 @@\n-void tryFoldBitAndOr(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n+private Node tryFoldBitAndOr(Node n, Node left, Node right) {\n+    Preconditions.checkArgument(n.getType() \u003d\u003d Token.BITAND || n.getType() \u003d\u003d Token.BITOR);\n     if (left.getType() \u003d\u003d Token.NUMBER \u0026\u0026 right.getType() \u003d\u003d Token.NUMBER) {\n-        double result;\n+        double resultDouble;\n         double lval \u003d left.getDouble();\n         double rval \u003d right.getDouble();\n         if (lval \u003c Integer.MIN_VALUE || lval \u003e Integer.MAX_VALUE || rval \u003c Integer.MIN_VALUE || rval \u003e Integer.MAX_VALUE) {\n-            return;\n+            return n;\n         }\n         int lvalInt \u003d (int) lval;\n         if (lvalInt !\u003d lval) {\n-            return;\n+            return n;\n         }\n         int rvalInt \u003d (int) rval;\n         if (rvalInt !\u003d rval) {\n-            return;\n+            return n;\n         }\n         switch(n.getType()) {\n             case Token.BITAND:\n-                result \u003d lvalInt \u0026 rvalInt;\n+                resultDouble \u003d lvalInt \u0026 rvalInt;\n                 break;\n             case Token.BITOR:\n-                result \u003d lvalInt | rvalInt;\n+                resultDouble \u003d lvalInt | rvalInt;\n                 break;\n             default:\n                 throw new Error(\"Unknown bitwise operator\");\n         }\n-        parent.replaceChild(n, Node.newNumber(result));\n-        t.getCompiler().reportCodeChange();\n+        Node newNumber \u003d Node.newNumber(resultDouble);\n+        n.getParent().replaceChild(n, newNumber);\n+        reportCodeChange();\n     }\n+    return n;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "\nChange on 2010/06/22 by nicksantos\n\n\tvariable coalescing better be run AFTER ambiguate properties, and\n\tafter denormalization.\n\n\tR\u003djohnlenz\n\tDELTA\u003d36  (20 added, 16 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d34005\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@248 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "6/22/10, 4:00 PM",
          "commitName": "c9e89727dc8063d087d28e42629606f4fd74a6e5",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "6/21/10, 12:59 PM",
          "commitNameOld": "5f09a76531fb4f6e182238411017e6fc7e74ad16",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 1.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private Node tryFoldBitAndOr(Node n, Node left, Node right) {\n    Preconditions.checkArgument(n.getType() \u003d\u003d Token.BITAND || n.getType() \u003d\u003d Token.BITOR);\n    if (left.getType() \u003d\u003d Token.NUMBER \u0026\u0026 right.getType() \u003d\u003d Token.NUMBER) {\n        double resultDouble;\n        double lval \u003d left.getDouble();\n        double rval \u003d right.getDouble();\n        if (lval \u003c Integer.MIN_VALUE || lval \u003e Integer.MAX_VALUE || rval \u003c Integer.MIN_VALUE || rval \u003e Integer.MAX_VALUE) {\n            return n;\n        }\n        int lvalInt \u003d (int) lval;\n        if (lvalInt !\u003d lval) {\n            return n;\n        }\n        int rvalInt \u003d (int) rval;\n        if (rvalInt !\u003d rval) {\n            return n;\n        }\n        switch(n.getType()) {\n            case Token.BITAND:\n                resultDouble \u003d lvalInt \u0026 rvalInt;\n                break;\n            case Token.BITOR:\n                resultDouble \u003d lvalInt | rvalInt;\n                break;\n            default:\n                throw new Error(\"Unknown bitwise operator\");\n        }\n        Node newNumber \u003d Node.newNumber(resultDouble);\n        n.getParent().replaceChild(n, newNumber);\n        reportCodeChange();\n    }\n    return n;\n}",
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
          "functionStartLine": 586,
          "functionName": "tryFoldBitAndOr",
          "functionAnnotation": "",
          "functionDoc": "Try to fold arithmetic binary operators\n",
          "diff": "@@ -1,30 +1,33 @@\n-void tryFoldBitAndOr(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n+private Node tryFoldBitAndOr(Node n, Node left, Node right) {\n+    Preconditions.checkArgument(n.getType() \u003d\u003d Token.BITAND || n.getType() \u003d\u003d Token.BITOR);\n     if (left.getType() \u003d\u003d Token.NUMBER \u0026\u0026 right.getType() \u003d\u003d Token.NUMBER) {\n-        double result;\n+        double resultDouble;\n         double lval \u003d left.getDouble();\n         double rval \u003d right.getDouble();\n         if (lval \u003c Integer.MIN_VALUE || lval \u003e Integer.MAX_VALUE || rval \u003c Integer.MIN_VALUE || rval \u003e Integer.MAX_VALUE) {\n-            return;\n+            return n;\n         }\n         int lvalInt \u003d (int) lval;\n         if (lvalInt !\u003d lval) {\n-            return;\n+            return n;\n         }\n         int rvalInt \u003d (int) rval;\n         if (rvalInt !\u003d rval) {\n-            return;\n+            return n;\n         }\n         switch(n.getType()) {\n             case Token.BITAND:\n-                result \u003d lvalInt \u0026 rvalInt;\n+                resultDouble \u003d lvalInt \u0026 rvalInt;\n                 break;\n             case Token.BITOR:\n-                result \u003d lvalInt | rvalInt;\n+                resultDouble \u003d lvalInt | rvalInt;\n                 break;\n             default:\n                 throw new Error(\"Unknown bitwise operator\");\n         }\n-        parent.replaceChild(n, Node.newNumber(result));\n-        t.getCompiler().reportCodeChange();\n+        Node newNumber \u003d Node.newNumber(resultDouble);\n+        n.getParent().replaceChild(n, newNumber);\n+        reportCodeChange();\n     }\n+    return n;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[t-NodeTraversal, n-Node, left-Node, right-Node, parent-Node]",
            "newValue": "[n-Node, left-Node, right-Node]"
          }
        }
      ]
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,30 @@\n+void tryFoldBitAndOr(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n+    if (left.getType() \u003d\u003d Token.NUMBER \u0026\u0026 right.getType() \u003d\u003d Token.NUMBER) {\n+        double result;\n+        double lval \u003d left.getDouble();\n+        double rval \u003d right.getDouble();\n+        if (lval \u003c Integer.MIN_VALUE || lval \u003e Integer.MAX_VALUE || rval \u003c Integer.MIN_VALUE || rval \u003e Integer.MAX_VALUE) {\n+            return;\n+        }\n+        int lvalInt \u003d (int) lval;\n+        if (lvalInt !\u003d lval) {\n+            return;\n+        }\n+        int rvalInt \u003d (int) rval;\n+        if (rvalInt !\u003d rval) {\n+            return;\n+        }\n+        switch(n.getType()) {\n+            case Token.BITAND:\n+                result \u003d lvalInt \u0026 rvalInt;\n+                break;\n+            case Token.BITOR:\n+                result \u003d lvalInt | rvalInt;\n+                break;\n+            default:\n+                throw new Error(\"Unknown bitwise operator\");\n+        }\n+        parent.replaceChild(n, Node.newNumber(result));\n+        t.getCompiler().reportCodeChange();\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "void tryFoldBitAndOr(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n    if (left.getType() \u003d\u003d Token.NUMBER \u0026\u0026 right.getType() \u003d\u003d Token.NUMBER) {\n        double result;\n        double lval \u003d left.getDouble();\n        double rval \u003d right.getDouble();\n        if (lval \u003c Integer.MIN_VALUE || lval \u003e Integer.MAX_VALUE || rval \u003c Integer.MIN_VALUE || rval \u003e Integer.MAX_VALUE) {\n            return;\n        }\n        int lvalInt \u003d (int) lval;\n        if (lvalInt !\u003d lval) {\n            return;\n        }\n        int rvalInt \u003d (int) rval;\n        if (rvalInt !\u003d rval) {\n            return;\n        }\n        switch(n.getType()) {\n            case Token.BITAND:\n                result \u003d lvalInt \u0026 rvalInt;\n                break;\n            case Token.BITOR:\n                result \u003d lvalInt | rvalInt;\n                break;\n            default:\n                throw new Error(\"Unknown bitwise operator\");\n        }\n        parent.replaceChild(n, Node.newNumber(result));\n        t.getCompiler().reportCodeChange();\n    }\n}",
      "path": "src/com/google/javascript/jscomp/FoldConstants.java",
      "functionStartLine": 1103,
      "functionName": "tryFoldBitAndOr",
      "functionAnnotation": "",
      "functionDoc": "Try to fold arithmetic binary operators\n"
    }
  }
}