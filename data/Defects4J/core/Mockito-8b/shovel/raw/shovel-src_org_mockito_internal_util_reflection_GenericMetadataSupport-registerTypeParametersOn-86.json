{
  "origin": "codeshovel",
  "repositoryName": "Mockito-8b",
  "repositoryPath": "/tmp/Mockito-8b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "GenericMetadataSupport.java",
  "functionName": "registerTypeParametersOn",
  "functionId": "registerTypeParametersOn___typeParameters-TypeVariable[]",
  "sourceFilePath": "src/org/mockito/internal/util/reflection/GenericMetadataSupport.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 86,
  "functionEndLine": 90,
  "numCommitsSeen": 16,
  "timeTaken": 1586,
  "changeHistory": [
    "ab9e9f347705bf9f4ebace4b07b085088275a256",
    "a811bad6a2ccac7f45b127d04815d1e6fd6d9eff",
    "55bfac6da735fbda1711e4a5ba53dd324ffa0f99",
    "dc2bea8fe7c5440bbcacf8a36cc03da512d26aa1",
    "52f6a9388d376d292918422296d82d77d5f6c921",
    "d8f0aa99cbc0f4399b15eca313ddc634dcb06fbb",
    "6eaf9a247dcfb68b88fec1f2a28808f2bfc19436"
  ],
  "changeHistoryShort": {
    "ab9e9f347705bf9f4ebace4b07b085088275a256": "Ybodychange",
    "a811bad6a2ccac7f45b127d04815d1e6fd6d9eff": "Ybodychange",
    "55bfac6da735fbda1711e4a5ba53dd324ffa0f99": "Yfilerename",
    "dc2bea8fe7c5440bbcacf8a36cc03da512d26aa1": "Ybodychange",
    "52f6a9388d376d292918422296d82d77d5f6c921": "Ybodychange",
    "d8f0aa99cbc0f4399b15eca313ddc634dcb06fbb": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
    "6eaf9a247dcfb68b88fec1f2a28808f2bfc19436": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ab9e9f347705bf9f4ebace4b07b085088275a256": {
      "type": "Ybodychange",
      "commitMessage": "Issue 230 Adds more deep stubs support for generic classes\n\n - metadata support extended beypond interfaces\n - cleans up a bit generics metadata\n",
      "commitDate": "3/10/14, 5:20 PM",
      "commitName": "ab9e9f347705bf9f4ebace4b07b085088275a256",
      "commitAuthor": "Brice Dutheil",
      "commitDateOld": "3/10/14, 5:00 PM",
      "commitNameOld": "a811bad6a2ccac7f45b127d04815d1e6fd6d9eff",
      "commitAuthorOld": "Marcin Grzejszczak",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void registerTypeParametersOn(TypeVariable[] typeParameters) {\n    for (TypeVariable typeVariable : typeParameters) {\n        registerTypeVariableIfNotPresent(typeVariable);\n    }\n}",
      "path": "src/org/mockito/internal/util/reflection/GenericMetadataSupport.java",
      "functionStartLine": 97,
      "functionName": "registerTypeParametersOn",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,5 +1,5 @@\n protected void registerTypeParametersOn(TypeVariable[] typeParameters) {\n-    for (TypeVariable typeParameter : typeParameters) {\n-        contextualActualTypeParameters.put(new SerializableTypeVariable(typeParameter), boundsOf(typeParameter));\n+    for (TypeVariable typeVariable : typeParameters) {\n+        registerTypeVariableIfNotPresent(typeVariable);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a811bad6a2ccac7f45b127d04815d1e6fd6d9eff": {
      "type": "Ybodychange",
      "commitMessage": "Made DeepStubsSerializableTest pass - unfortunately GenericMetadataSupportTest fails\n",
      "commitDate": "3/10/14, 5:00 PM",
      "commitName": "a811bad6a2ccac7f45b127d04815d1e6fd6d9eff",
      "commitAuthor": "Marcin Grzejszczak",
      "commitDateOld": "1/10/14, 2:49 AM",
      "commitNameOld": "afc5bb89eaae10a75e1baaa9f3bfcb19d930f17e",
      "commitAuthorOld": "Marcin.Grzejszczak",
      "daysBetweenCommits": 59.55,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void registerTypeParametersOn(TypeVariable[] typeParameters) {\n    for (TypeVariable typeParameter : typeParameters) {\n        contextualActualTypeParameters.put(new SerializableTypeVariable(typeParameter), boundsOf(typeParameter));\n    }\n}",
      "path": "src/org/mockito/internal/util/reflection/GenericMetadataSupport.java",
      "functionStartLine": 93,
      "functionName": "registerTypeParametersOn",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,5 +1,5 @@\n protected void registerTypeParametersOn(TypeVariable[] typeParameters) {\n     for (TypeVariable typeParameter : typeParameters) {\n-        contextualActualTypeParameters.put(typeParameter, boundsOf(typeParameter));\n+        contextualActualTypeParameters.put(new SerializableTypeVariable(typeParameter), boundsOf(typeParameter));\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "55bfac6da735fbda1711e4a5ba53dd324ffa0f99": {
      "type": "Yfilerename",
      "commitMessage": "Renamed MockitoGenericMetadata to GenericMetadataSupport\n\n--HG--\nbranch : issue230\nrename : src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java \u003d\u003e src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nrename : test/org/mockito/internal/util/reflection/MockitoGenericMetadataTest.java \u003d\u003e test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java\n",
      "commitDate": "8/1/12, 8:12 AM",
      "commitName": "55bfac6da735fbda1711e4a5ba53dd324ffa0f99",
      "commitAuthor": "Brice Dutheil",
      "commitDateOld": "8/1/12, 8:07 AM",
      "commitNameOld": "6e97858d79d08b455cb3690b811120965ee1975a",
      "commitAuthorOld": "Brice Dutheil",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void registerTypeParametersOn(TypeVariable[] typeParameters) {\n    for (TypeVariable typeParameter : typeParameters) {\n        contextualActualTypeParameters.put(typeParameter, boundsOf(typeParameter));\n    }\n}",
      "path": "src/org/mockito/internal/util/reflection/GenericMetadataSupport.java",
      "functionStartLine": 99,
      "functionName": "registerTypeParametersOn",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java",
        "newPath": "src/org/mockito/internal/util/reflection/GenericMetadataSupport.java"
      }
    },
    "dc2bea8fe7c5440bbcacf8a36cc03da512d26aa1": {
      "type": "Ybodychange",
      "commitMessage": "Added wildcard support\n\n--HG--\nbranch : issue230\n",
      "commitDate": "8/1/12, 7:11 AM",
      "commitName": "dc2bea8fe7c5440bbcacf8a36cc03da512d26aa1",
      "commitAuthor": "Brice Dutheil",
      "commitDateOld": "7/24/12, 9:52 AM",
      "commitNameOld": "52f6a9388d376d292918422296d82d77d5f6c921",
      "commitAuthorOld": "Brice Dutheil",
      "daysBetweenCommits": 7.89,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void registerTypeParametersOn(TypeVariable[] typeParameters) {\n    for (TypeVariable typeParameter : typeParameters) {\n        contextualActualTypeParameters.put(typeParameter, boundsOf(typeParameter));\n    }\n}",
      "path": "src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java",
      "functionStartLine": 61,
      "functionName": "registerTypeParametersOn",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,6 +1,5 @@\n protected void registerTypeParametersOn(TypeVariable[] typeParameters) {\n     for (TypeVariable typeParameter : typeParameters) {\n         contextualActualTypeParameters.put(typeParameter, boundsOf(typeParameter));\n-        logger.log(\"For \u0027\" + typeParameter.getGenericDeclaration() + \"\u0027 found type variable : { \u0027\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"\u0027 : \u0027\" + boundsOf(typeParameter) + \"\u0027 }\");\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "52f6a9388d376d292918422296d82d77d5f6c921": {
      "type": "Ybodychange",
      "commitMessage": "Generic deep stubs now operational! Wildcard types are not yet in the party.\n\n--HG--\nbranch : issue230\n",
      "commitDate": "7/24/12, 9:52 AM",
      "commitName": "52f6a9388d376d292918422296d82d77d5f6c921",
      "commitAuthor": "Brice Dutheil",
      "commitDateOld": "7/24/12, 5:43 AM",
      "commitNameOld": "d8f0aa99cbc0f4399b15eca313ddc634dcb06fbb",
      "commitAuthorOld": "Brice Dutheil",
      "daysBetweenCommits": 0.17,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void registerTypeParametersOn(TypeVariable[] typeParameters) {\n    for (TypeVariable typeParameter : typeParameters) {\n        contextualActualTypeParameters.put(typeParameter, boundsOf(typeParameter));\n        logger.log(\"For \u0027\" + typeParameter.getGenericDeclaration() + \"\u0027 found type variable : { \u0027\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"\u0027 : \u0027\" + boundsOf(typeParameter) + \"\u0027 }\");\n    }\n}",
      "path": "src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java",
      "functionStartLine": 48,
      "functionName": "registerTypeParametersOn",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,6 +1,6 @@\n protected void registerTypeParametersOn(TypeVariable[] typeParameters) {\n     for (TypeVariable typeParameter : typeParameters) {\n         contextualActualTypeParameters.put(typeParameter, boundsOf(typeParameter));\n-        GenericTypeInfo.logger.log(\"For \u0027\" + typeParameter.getGenericDeclaration() + \"\u0027 found type variable : { \u0027\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"\u0027 : \u0027\" + boundsOf(typeParameter) + \"\u0027 }\");\n+        logger.log(\"For \u0027\" + typeParameter.getGenericDeclaration() + \"\u0027 found type variable : { \u0027\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"\u0027 : \u0027\" + boundsOf(typeParameter) + \"\u0027 }\");\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d8f0aa99cbc0f4399b15eca313ddc634dcb06fbb": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
      "commitMessage": "Almost there, now can resolve most TypeVariables declaration, certainly not exhaustive\n\n--HG--\nbranch : issue230\n",
      "commitDate": "7/24/12, 5:43 AM",
      "commitName": "d8f0aa99cbc0f4399b15eca313ddc634dcb06fbb",
      "commitAuthor": "Brice Dutheil",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "Almost there, now can resolve most TypeVariables declaration, certainly not exhaustive\n\n--HG--\nbranch : issue230\n",
          "commitDate": "7/24/12, 5:43 AM",
          "commitName": "d8f0aa99cbc0f4399b15eca313ddc634dcb06fbb",
          "commitAuthor": "Brice Dutheil",
          "commitDateOld": "7/24/12, 3:26 AM",
          "commitNameOld": "6eaf9a247dcfb68b88fec1f2a28808f2bfc19436",
          "commitAuthorOld": "Brice Dutheil",
          "daysBetweenCommits": 0.1,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void registerTypeParametersOn(TypeVariable[] typeParameters) {\n    for (TypeVariable typeParameter : typeParameters) {\n        contextualActualTypeParameters.put(typeParameter, boundsOf(typeParameter));\n        GenericTypeInfo.logger.log(\"For \u0027\" + typeParameter.getGenericDeclaration() + \"\u0027 found type variable : { \u0027\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"\u0027 : \u0027\" + boundsOf(typeParameter) + \"\u0027 }\");\n    }\n}",
          "path": "src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java",
          "functionStartLine": 38,
          "functionName": "registerTypeParametersOn",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,7 +1,6 @@\n-protected void registerTypeVariablesOn(Class\u003c?\u003e clazz) {\n-    TypeVariable[] typeParameters \u003d clazz.getTypeParameters();\n+protected void registerTypeParametersOn(TypeVariable[] typeParameters) {\n     for (TypeVariable typeParameter : typeParameters) {\n         contextualActualTypeParameters.put(typeParameter, boundsOf(typeParameter));\n-        GenericTypeInfo.logger.log(\"For \u0027\" + clazz.getCanonicalName() + \"\u0027 found type variable : { \u0027\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"\u0027 : \u0027\" + boundsOf(typeParameter) + \"\u0027 }\");\n+        GenericTypeInfo.logger.log(\"For \u0027\" + typeParameter.getGenericDeclaration() + \"\u0027 found type variable : { \u0027\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"\u0027 : \u0027\" + boundsOf(typeParameter) + \"\u0027 }\");\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "registerTypeVariablesOn",
            "newValue": "registerTypeParametersOn"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "Almost there, now can resolve most TypeVariables declaration, certainly not exhaustive\n\n--HG--\nbranch : issue230\n",
          "commitDate": "7/24/12, 5:43 AM",
          "commitName": "d8f0aa99cbc0f4399b15eca313ddc634dcb06fbb",
          "commitAuthor": "Brice Dutheil",
          "commitDateOld": "7/24/12, 3:26 AM",
          "commitNameOld": "6eaf9a247dcfb68b88fec1f2a28808f2bfc19436",
          "commitAuthorOld": "Brice Dutheil",
          "daysBetweenCommits": 0.1,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void registerTypeParametersOn(TypeVariable[] typeParameters) {\n    for (TypeVariable typeParameter : typeParameters) {\n        contextualActualTypeParameters.put(typeParameter, boundsOf(typeParameter));\n        GenericTypeInfo.logger.log(\"For \u0027\" + typeParameter.getGenericDeclaration() + \"\u0027 found type variable : { \u0027\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"\u0027 : \u0027\" + boundsOf(typeParameter) + \"\u0027 }\");\n    }\n}",
          "path": "src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java",
          "functionStartLine": 38,
          "functionName": "registerTypeParametersOn",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,7 +1,6 @@\n-protected void registerTypeVariablesOn(Class\u003c?\u003e clazz) {\n-    TypeVariable[] typeParameters \u003d clazz.getTypeParameters();\n+protected void registerTypeParametersOn(TypeVariable[] typeParameters) {\n     for (TypeVariable typeParameter : typeParameters) {\n         contextualActualTypeParameters.put(typeParameter, boundsOf(typeParameter));\n-        GenericTypeInfo.logger.log(\"For \u0027\" + clazz.getCanonicalName() + \"\u0027 found type variable : { \u0027\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"\u0027 : \u0027\" + boundsOf(typeParameter) + \"\u0027 }\");\n+        GenericTypeInfo.logger.log(\"For \u0027\" + typeParameter.getGenericDeclaration() + \"\u0027 found type variable : { \u0027\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"\u0027 : \u0027\" + boundsOf(typeParameter) + \"\u0027 }\");\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[clazz-Class\u003c?\u003e]",
            "newValue": "[typeParameters-TypeVariable[]]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Almost there, now can resolve most TypeVariables declaration, certainly not exhaustive\n\n--HG--\nbranch : issue230\n",
          "commitDate": "7/24/12, 5:43 AM",
          "commitName": "d8f0aa99cbc0f4399b15eca313ddc634dcb06fbb",
          "commitAuthor": "Brice Dutheil",
          "commitDateOld": "7/24/12, 3:26 AM",
          "commitNameOld": "6eaf9a247dcfb68b88fec1f2a28808f2bfc19436",
          "commitAuthorOld": "Brice Dutheil",
          "daysBetweenCommits": 0.1,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void registerTypeParametersOn(TypeVariable[] typeParameters) {\n    for (TypeVariable typeParameter : typeParameters) {\n        contextualActualTypeParameters.put(typeParameter, boundsOf(typeParameter));\n        GenericTypeInfo.logger.log(\"For \u0027\" + typeParameter.getGenericDeclaration() + \"\u0027 found type variable : { \u0027\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"\u0027 : \u0027\" + boundsOf(typeParameter) + \"\u0027 }\");\n    }\n}",
          "path": "src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java",
          "functionStartLine": 38,
          "functionName": "registerTypeParametersOn",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,7 +1,6 @@\n-protected void registerTypeVariablesOn(Class\u003c?\u003e clazz) {\n-    TypeVariable[] typeParameters \u003d clazz.getTypeParameters();\n+protected void registerTypeParametersOn(TypeVariable[] typeParameters) {\n     for (TypeVariable typeParameter : typeParameters) {\n         contextualActualTypeParameters.put(typeParameter, boundsOf(typeParameter));\n-        GenericTypeInfo.logger.log(\"For \u0027\" + clazz.getCanonicalName() + \"\u0027 found type variable : { \u0027\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"\u0027 : \u0027\" + boundsOf(typeParameter) + \"\u0027 }\");\n+        GenericTypeInfo.logger.log(\"For \u0027\" + typeParameter.getGenericDeclaration() + \"\u0027 found type variable : { \u0027\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"\u0027 : \u0027\" + boundsOf(typeParameter) + \"\u0027 }\");\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "6eaf9a247dcfb68b88fec1f2a28808f2bfc19436": {
      "type": "Yintroduced",
      "commitMessage": "Trying a Top-Down approach instead of the Bottom-Up approach to better solve this generic mess (tests are broken here)(missing files)\n\n--HG--\nbranch : issue230\n",
      "commitDate": "7/24/12, 3:26 AM",
      "commitName": "6eaf9a247dcfb68b88fec1f2a28808f2bfc19436",
      "commitAuthor": "Brice Dutheil",
      "diff": "@@ -0,0 +1,7 @@\n+protected void registerTypeVariablesOn(Class\u003c?\u003e clazz) {\n+    TypeVariable[] typeParameters \u003d clazz.getTypeParameters();\n+    for (TypeVariable typeParameter : typeParameters) {\n+        contextualActualTypeParameters.put(typeParameter, boundsOf(typeParameter));\n+        GenericTypeInfo.logger.log(\"For \u0027\" + clazz.getCanonicalName() + \"\u0027 found type variable : { \u0027\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"\u0027 : \u0027\" + boundsOf(typeParameter) + \"\u0027 }\");\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected void registerTypeVariablesOn(Class\u003c?\u003e clazz) {\n    TypeVariable[] typeParameters \u003d clazz.getTypeParameters();\n    for (TypeVariable typeParameter : typeParameters) {\n        contextualActualTypeParameters.put(typeParameter, boundsOf(typeParameter));\n        GenericTypeInfo.logger.log(\"For \u0027\" + clazz.getCanonicalName() + \"\u0027 found type variable : { \u0027\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"\u0027 : \u0027\" + boundsOf(typeParameter) + \"\u0027 }\");\n    }\n}",
      "path": "src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java",
      "functionStartLine": 43,
      "functionName": "registerTypeVariablesOn",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}