{
  "origin": "codeshovel",
  "repositoryName": "Mockito-8b",
  "repositoryPath": "/tmp/Mockito-8b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "GenericMetadataSupport.java",
  "functionName": "resolveGenericReturnType",
  "functionId": "resolveGenericReturnType___method-Method",
  "sourceFilePath": "src/org/mockito/internal/util/reflection/GenericMetadataSupport.java",
  "functionAnnotation": "",
  "functionDoc": "Resolve current method generic return type to a {@link GenericMetadataSupport}.\n\n@param method Method to resolve the return type.\n@return @link GenericMetadataSupport} representing this generic return type.\n",
  "functionStartLine": 199,
  "functionEndLine": 214,
  "numCommitsSeen": 15,
  "timeTaken": 1403,
  "changeHistory": [
    "55bfac6da735fbda1711e4a5ba53dd324ffa0f99",
    "dc2bea8fe7c5440bbcacf8a36cc03da512d26aa1",
    "52f6a9388d376d292918422296d82d77d5f6c921",
    "d8f0aa99cbc0f4399b15eca313ddc634dcb06fbb",
    "6eaf9a247dcfb68b88fec1f2a28808f2bfc19436"
  ],
  "changeHistoryShort": {
    "55bfac6da735fbda1711e4a5ba53dd324ffa0f99": "Ymultichange(Yfilerename,Yreturntypechange,Ybodychange,Ydocchange)",
    "dc2bea8fe7c5440bbcacf8a36cc03da512d26aa1": "Ybodychange",
    "52f6a9388d376d292918422296d82d77d5f6c921": "Ybodychange",
    "d8f0aa99cbc0f4399b15eca313ddc634dcb06fbb": "Ybodychange",
    "6eaf9a247dcfb68b88fec1f2a28808f2bfc19436": "Yintroduced"
  },
  "changeHistoryDetails": {
    "55bfac6da735fbda1711e4a5ba53dd324ffa0f99": {
      "type": "Ymultichange(Yfilerename,Yreturntypechange,Ybodychange,Ydocchange)",
      "commitMessage": "Renamed MockitoGenericMetadata to GenericMetadataSupport\n\n--HG--\nbranch : issue230\nrename : src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java \u003d\u003e src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nrename : test/org/mockito/internal/util/reflection/MockitoGenericMetadataTest.java \u003d\u003e test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java\n",
      "commitDate": "8/1/12, 8:12 AM",
      "commitName": "55bfac6da735fbda1711e4a5ba53dd324ffa0f99",
      "commitAuthor": "Brice Dutheil",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "Renamed MockitoGenericMetadata to GenericMetadataSupport\n\n--HG--\nbranch : issue230\nrename : src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java \u003d\u003e src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nrename : test/org/mockito/internal/util/reflection/MockitoGenericMetadataTest.java \u003d\u003e test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java\n",
          "commitDate": "8/1/12, 8:12 AM",
          "commitName": "55bfac6da735fbda1711e4a5ba53dd324ffa0f99",
          "commitAuthor": "Brice Dutheil",
          "commitDateOld": "8/1/12, 8:07 AM",
          "commitNameOld": "6e97858d79d08b455cb3690b811120965ee1975a",
          "commitAuthorOld": "Brice Dutheil",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public GenericMetadataSupport resolveGenericReturnType(Method method) {\n    Type genericReturnType \u003d method.getGenericReturnType();\n    if (genericReturnType instanceof Class) {\n        return new NotGenericReturnTypeSupport(genericReturnType);\n    }\n    if (genericReturnType instanceof ParameterizedType) {\n        return new ParameterizedReturnType(this, method.getTypeParameters(), (ParameterizedType) method.getGenericReturnType());\n    }\n    if (genericReturnType instanceof TypeVariable) {\n        return new TypeVariableReturnType(this, method.getTypeParameters(), (TypeVariable) genericReturnType);\n    }\n    throw new MockitoException(\"Ouch, it shouldn\u0027t happen, type \u0027\" + genericReturnType.getClass().getCanonicalName() + \"\u0027 on method : \u0027\" + method.toGenericString() + \"\u0027 is not supported : \" + genericReturnType);\n}",
          "path": "src/org/mockito/internal/util/reflection/GenericMetadataSupport.java",
          "functionStartLine": 207,
          "functionName": "resolveGenericReturnType",
          "functionAnnotation": "",
          "functionDoc": "Resolve current method generic return type to a {@link GenericMetadataSupport}.\n\n@param method Method to resolve the return type.\n@return @link GenericMetadataSupport} representing this generic return type.\n",
          "diff": "@@ -1,13 +1,13 @@\n-public MockitoGenericMetadata resolveGenericReturnType(Method method) {\n+public GenericMetadataSupport resolveGenericReturnType(Method method) {\n     Type genericReturnType \u003d method.getGenericReturnType();\n     if (genericReturnType instanceof Class) {\n-        return new NotGenericReturnType(genericReturnType);\n+        return new NotGenericReturnTypeSupport(genericReturnType);\n     }\n     if (genericReturnType instanceof ParameterizedType) {\n         return new ParameterizedReturnType(this, method.getTypeParameters(), (ParameterizedType) method.getGenericReturnType());\n     }\n     if (genericReturnType instanceof TypeVariable) {\n         return new TypeVariableReturnType(this, method.getTypeParameters(), (TypeVariable) genericReturnType);\n     }\n     throw new MockitoException(\"Ouch, it shouldn\u0027t happen, type \u0027\" + genericReturnType.getClass().getCanonicalName() + \"\u0027 on method : \u0027\" + method.toGenericString() + \"\u0027 is not supported : \" + genericReturnType);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java",
            "newPath": "src/org/mockito/internal/util/reflection/GenericMetadataSupport.java"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "Renamed MockitoGenericMetadata to GenericMetadataSupport\n\n--HG--\nbranch : issue230\nrename : src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java \u003d\u003e src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nrename : test/org/mockito/internal/util/reflection/MockitoGenericMetadataTest.java \u003d\u003e test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java\n",
          "commitDate": "8/1/12, 8:12 AM",
          "commitName": "55bfac6da735fbda1711e4a5ba53dd324ffa0f99",
          "commitAuthor": "Brice Dutheil",
          "commitDateOld": "8/1/12, 8:07 AM",
          "commitNameOld": "6e97858d79d08b455cb3690b811120965ee1975a",
          "commitAuthorOld": "Brice Dutheil",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public GenericMetadataSupport resolveGenericReturnType(Method method) {\n    Type genericReturnType \u003d method.getGenericReturnType();\n    if (genericReturnType instanceof Class) {\n        return new NotGenericReturnTypeSupport(genericReturnType);\n    }\n    if (genericReturnType instanceof ParameterizedType) {\n        return new ParameterizedReturnType(this, method.getTypeParameters(), (ParameterizedType) method.getGenericReturnType());\n    }\n    if (genericReturnType instanceof TypeVariable) {\n        return new TypeVariableReturnType(this, method.getTypeParameters(), (TypeVariable) genericReturnType);\n    }\n    throw new MockitoException(\"Ouch, it shouldn\u0027t happen, type \u0027\" + genericReturnType.getClass().getCanonicalName() + \"\u0027 on method : \u0027\" + method.toGenericString() + \"\u0027 is not supported : \" + genericReturnType);\n}",
          "path": "src/org/mockito/internal/util/reflection/GenericMetadataSupport.java",
          "functionStartLine": 207,
          "functionName": "resolveGenericReturnType",
          "functionAnnotation": "",
          "functionDoc": "Resolve current method generic return type to a {@link GenericMetadataSupport}.\n\n@param method Method to resolve the return type.\n@return @link GenericMetadataSupport} representing this generic return type.\n",
          "diff": "@@ -1,13 +1,13 @@\n-public MockitoGenericMetadata resolveGenericReturnType(Method method) {\n+public GenericMetadataSupport resolveGenericReturnType(Method method) {\n     Type genericReturnType \u003d method.getGenericReturnType();\n     if (genericReturnType instanceof Class) {\n-        return new NotGenericReturnType(genericReturnType);\n+        return new NotGenericReturnTypeSupport(genericReturnType);\n     }\n     if (genericReturnType instanceof ParameterizedType) {\n         return new ParameterizedReturnType(this, method.getTypeParameters(), (ParameterizedType) method.getGenericReturnType());\n     }\n     if (genericReturnType instanceof TypeVariable) {\n         return new TypeVariableReturnType(this, method.getTypeParameters(), (TypeVariable) genericReturnType);\n     }\n     throw new MockitoException(\"Ouch, it shouldn\u0027t happen, type \u0027\" + genericReturnType.getClass().getCanonicalName() + \"\u0027 on method : \u0027\" + method.toGenericString() + \"\u0027 is not supported : \" + genericReturnType);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "MockitoGenericMetadata",
            "newValue": "GenericMetadataSupport"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Renamed MockitoGenericMetadata to GenericMetadataSupport\n\n--HG--\nbranch : issue230\nrename : src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java \u003d\u003e src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nrename : test/org/mockito/internal/util/reflection/MockitoGenericMetadataTest.java \u003d\u003e test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java\n",
          "commitDate": "8/1/12, 8:12 AM",
          "commitName": "55bfac6da735fbda1711e4a5ba53dd324ffa0f99",
          "commitAuthor": "Brice Dutheil",
          "commitDateOld": "8/1/12, 8:07 AM",
          "commitNameOld": "6e97858d79d08b455cb3690b811120965ee1975a",
          "commitAuthorOld": "Brice Dutheil",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public GenericMetadataSupport resolveGenericReturnType(Method method) {\n    Type genericReturnType \u003d method.getGenericReturnType();\n    if (genericReturnType instanceof Class) {\n        return new NotGenericReturnTypeSupport(genericReturnType);\n    }\n    if (genericReturnType instanceof ParameterizedType) {\n        return new ParameterizedReturnType(this, method.getTypeParameters(), (ParameterizedType) method.getGenericReturnType());\n    }\n    if (genericReturnType instanceof TypeVariable) {\n        return new TypeVariableReturnType(this, method.getTypeParameters(), (TypeVariable) genericReturnType);\n    }\n    throw new MockitoException(\"Ouch, it shouldn\u0027t happen, type \u0027\" + genericReturnType.getClass().getCanonicalName() + \"\u0027 on method : \u0027\" + method.toGenericString() + \"\u0027 is not supported : \" + genericReturnType);\n}",
          "path": "src/org/mockito/internal/util/reflection/GenericMetadataSupport.java",
          "functionStartLine": 207,
          "functionName": "resolveGenericReturnType",
          "functionAnnotation": "",
          "functionDoc": "Resolve current method generic return type to a {@link GenericMetadataSupport}.\n\n@param method Method to resolve the return type.\n@return @link GenericMetadataSupport} representing this generic return type.\n",
          "diff": "@@ -1,13 +1,13 @@\n-public MockitoGenericMetadata resolveGenericReturnType(Method method) {\n+public GenericMetadataSupport resolveGenericReturnType(Method method) {\n     Type genericReturnType \u003d method.getGenericReturnType();\n     if (genericReturnType instanceof Class) {\n-        return new NotGenericReturnType(genericReturnType);\n+        return new NotGenericReturnTypeSupport(genericReturnType);\n     }\n     if (genericReturnType instanceof ParameterizedType) {\n         return new ParameterizedReturnType(this, method.getTypeParameters(), (ParameterizedType) method.getGenericReturnType());\n     }\n     if (genericReturnType instanceof TypeVariable) {\n         return new TypeVariableReturnType(this, method.getTypeParameters(), (TypeVariable) genericReturnType);\n     }\n     throw new MockitoException(\"Ouch, it shouldn\u0027t happen, type \u0027\" + genericReturnType.getClass().getCanonicalName() + \"\u0027 on method : \u0027\" + method.toGenericString() + \"\u0027 is not supported : \" + genericReturnType);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Renamed MockitoGenericMetadata to GenericMetadataSupport\n\n--HG--\nbranch : issue230\nrename : src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java \u003d\u003e src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nrename : test/org/mockito/internal/util/reflection/MockitoGenericMetadataTest.java \u003d\u003e test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java\n",
          "commitDate": "8/1/12, 8:12 AM",
          "commitName": "55bfac6da735fbda1711e4a5ba53dd324ffa0f99",
          "commitAuthor": "Brice Dutheil",
          "commitDateOld": "8/1/12, 8:07 AM",
          "commitNameOld": "6e97858d79d08b455cb3690b811120965ee1975a",
          "commitAuthorOld": "Brice Dutheil",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public GenericMetadataSupport resolveGenericReturnType(Method method) {\n    Type genericReturnType \u003d method.getGenericReturnType();\n    if (genericReturnType instanceof Class) {\n        return new NotGenericReturnTypeSupport(genericReturnType);\n    }\n    if (genericReturnType instanceof ParameterizedType) {\n        return new ParameterizedReturnType(this, method.getTypeParameters(), (ParameterizedType) method.getGenericReturnType());\n    }\n    if (genericReturnType instanceof TypeVariable) {\n        return new TypeVariableReturnType(this, method.getTypeParameters(), (TypeVariable) genericReturnType);\n    }\n    throw new MockitoException(\"Ouch, it shouldn\u0027t happen, type \u0027\" + genericReturnType.getClass().getCanonicalName() + \"\u0027 on method : \u0027\" + method.toGenericString() + \"\u0027 is not supported : \" + genericReturnType);\n}",
          "path": "src/org/mockito/internal/util/reflection/GenericMetadataSupport.java",
          "functionStartLine": 207,
          "functionName": "resolveGenericReturnType",
          "functionAnnotation": "",
          "functionDoc": "Resolve current method generic return type to a {@link GenericMetadataSupport}.\n\n@param method Method to resolve the return type.\n@return @link GenericMetadataSupport} representing this generic return type.\n",
          "diff": "@@ -1,13 +1,13 @@\n-public MockitoGenericMetadata resolveGenericReturnType(Method method) {\n+public GenericMetadataSupport resolveGenericReturnType(Method method) {\n     Type genericReturnType \u003d method.getGenericReturnType();\n     if (genericReturnType instanceof Class) {\n-        return new NotGenericReturnType(genericReturnType);\n+        return new NotGenericReturnTypeSupport(genericReturnType);\n     }\n     if (genericReturnType instanceof ParameterizedType) {\n         return new ParameterizedReturnType(this, method.getTypeParameters(), (ParameterizedType) method.getGenericReturnType());\n     }\n     if (genericReturnType instanceof TypeVariable) {\n         return new TypeVariableReturnType(this, method.getTypeParameters(), (TypeVariable) genericReturnType);\n     }\n     throw new MockitoException(\"Ouch, it shouldn\u0027t happen, type \u0027\" + genericReturnType.getClass().getCanonicalName() + \"\u0027 on method : \u0027\" + method.toGenericString() + \"\u0027 is not supported : \" + genericReturnType);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Resolve current method generic return type to a {@link MockitoGenericMetadata}.\n\n@param method Method to resolve the return type.\n@return @link MockitoGenericMetadata} representing this generic return type.\n",
            "newValue": "Resolve current method generic return type to a {@link GenericMetadataSupport}.\n\n@param method Method to resolve the return type.\n@return @link GenericMetadataSupport} representing this generic return type.\n"
          }
        }
      ]
    },
    "dc2bea8fe7c5440bbcacf8a36cc03da512d26aa1": {
      "type": "Ybodychange",
      "commitMessage": "Added wildcard support\n\n--HG--\nbranch : issue230\n",
      "commitDate": "8/1/12, 7:11 AM",
      "commitName": "dc2bea8fe7c5440bbcacf8a36cc03da512d26aa1",
      "commitAuthor": "Brice Dutheil",
      "commitDateOld": "7/24/12, 9:52 AM",
      "commitNameOld": "52f6a9388d376d292918422296d82d77d5f6c921",
      "commitAuthorOld": "Brice Dutheil",
      "daysBetweenCommits": 7.89,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "public MockitoGenericMetadata resolveGenericReturnType(Method method) {\n    Type genericReturnType \u003d method.getGenericReturnType();\n    if (genericReturnType instanceof Class) {\n        return new NotGenericReturnType(genericReturnType);\n    }\n    if (genericReturnType instanceof ParameterizedType) {\n        return new ParameterizedReturnType(this, method.getTypeParameters(), (ParameterizedType) method.getGenericReturnType());\n    }\n    if (genericReturnType instanceof TypeVariable) {\n        return new TypeVariableReturnType(this, method.getTypeParameters(), (TypeVariable) genericReturnType);\n    }\n    throw new MockitoException(\"Ouch, it shouldn\u0027t happen, type \u0027\" + genericReturnType.getClass().getCanonicalName() + \"\u0027 on method : \u0027\" + method.toGenericString() + \"\u0027 is not supported : \" + genericReturnType);\n}",
      "path": "src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java",
      "functionStartLine": 172,
      "functionName": "resolveGenericReturnType",
      "functionAnnotation": "",
      "functionDoc": "Resolve current method generic return type to a {@link MockitoGenericMetadata}.\n\n@param method Method to resolve the return type.\n@return @link MockitoGenericMetadata} representing this generic return type.\n",
      "diff": "@@ -1,17 +1,13 @@\n public MockitoGenericMetadata resolveGenericReturnType(Method method) {\n     Type genericReturnType \u003d method.getGenericReturnType();\n-    logger.log(\"Method \u0027\" + method.toGenericString() + \"\u0027 has return type : \" + genericReturnType.getClass().getInterfaces()[0].getSimpleName() + \" : \" + genericReturnType);\n     if (genericReturnType instanceof Class) {\n         return new NotGenericReturnType(genericReturnType);\n     }\n     if (genericReturnType instanceof ParameterizedType) {\n         return new ParameterizedReturnType(this, method.getTypeParameters(), (ParameterizedType) method.getGenericReturnType());\n     }\n     if (genericReturnType instanceof TypeVariable) {\n         return new TypeVariableReturnType(this, method.getTypeParameters(), (TypeVariable) genericReturnType);\n     }\n-    if (genericReturnType instanceof BoundedType) {\n-        return new TypeVariableReturnType(this, method.getTypeParameters(), ((BoundedType) genericReturnType).typeVariable());\n-    }\n-    throw new IllegalStateException(\"ouch\");\n+    throw new MockitoException(\"Ouch, it shouldn\u0027t happen, type \u0027\" + genericReturnType.getClass().getCanonicalName() + \"\u0027 on method : \u0027\" + method.toGenericString() + \"\u0027 is not supported : \" + genericReturnType);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "52f6a9388d376d292918422296d82d77d5f6c921": {
      "type": "Ybodychange",
      "commitMessage": "Generic deep stubs now operational! Wildcard types are not yet in the party.\n\n--HG--\nbranch : issue230\n",
      "commitDate": "7/24/12, 9:52 AM",
      "commitName": "52f6a9388d376d292918422296d82d77d5f6c921",
      "commitAuthor": "Brice Dutheil",
      "commitDateOld": "7/24/12, 5:43 AM",
      "commitNameOld": "d8f0aa99cbc0f4399b15eca313ddc634dcb06fbb",
      "commitAuthorOld": "Brice Dutheil",
      "daysBetweenCommits": 0.17,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public MockitoGenericMetadata resolveGenericReturnType(Method method) {\n    Type genericReturnType \u003d method.getGenericReturnType();\n    logger.log(\"Method \u0027\" + method.toGenericString() + \"\u0027 has return type : \" + genericReturnType.getClass().getInterfaces()[0].getSimpleName() + \" : \" + genericReturnType);\n    if (genericReturnType instanceof Class) {\n        return new NotGenericReturnType(genericReturnType);\n    }\n    if (genericReturnType instanceof ParameterizedType) {\n        return new ParameterizedReturnType(this, method.getTypeParameters(), (ParameterizedType) method.getGenericReturnType());\n    }\n    if (genericReturnType instanceof TypeVariable) {\n        return new TypeVariableReturnType(this, method.getTypeParameters(), (TypeVariable) genericReturnType);\n    }\n    if (genericReturnType instanceof BoundedType) {\n        return new TypeVariableReturnType(this, method.getTypeParameters(), ((BoundedType) genericReturnType).typeVariable());\n    }\n    throw new IllegalStateException(\"ouch\");\n}",
      "path": "src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java",
      "functionStartLine": 131,
      "functionName": "resolveGenericReturnType",
      "functionAnnotation": "",
      "functionDoc": "Resolve current method generic return type to a {@link MockitoGenericMetadata}.\n\n@param method Method to resolve the return type.\n@return @link MockitoGenericMetadata} representing this generic return type.\n",
      "diff": "@@ -1,14 +1,17 @@\n public MockitoGenericMetadata resolveGenericReturnType(Method method) {\n     Type genericReturnType \u003d method.getGenericReturnType();\n-    System.out.println(\"Method \u0027\" + method.toGenericString() + \"\u0027 has return type : \" + genericReturnType.getClass().getInterfaces()[0].getSimpleName() + \" : \" + genericReturnType);\n+    logger.log(\"Method \u0027\" + method.toGenericString() + \"\u0027 has return type : \" + genericReturnType.getClass().getInterfaces()[0].getSimpleName() + \" : \" + genericReturnType);\n     if (genericReturnType instanceof Class) {\n         return new NotGenericReturnType(genericReturnType);\n     }\n     if (genericReturnType instanceof ParameterizedType) {\n         return new ParameterizedReturnType(this, method.getTypeParameters(), (ParameterizedType) method.getGenericReturnType());\n     }\n     if (genericReturnType instanceof TypeVariable) {\n         return new TypeVariableReturnType(this, method.getTypeParameters(), (TypeVariable) genericReturnType);\n     }\n+    if (genericReturnType instanceof BoundedType) {\n+        return new TypeVariableReturnType(this, method.getTypeParameters(), ((BoundedType) genericReturnType).typeVariable());\n+    }\n     throw new IllegalStateException(\"ouch\");\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d8f0aa99cbc0f4399b15eca313ddc634dcb06fbb": {
      "type": "Ybodychange",
      "commitMessage": "Almost there, now can resolve most TypeVariables declaration, certainly not exhaustive\n\n--HG--\nbranch : issue230\n",
      "commitDate": "7/24/12, 5:43 AM",
      "commitName": "d8f0aa99cbc0f4399b15eca313ddc634dcb06fbb",
      "commitAuthor": "Brice Dutheil",
      "commitDateOld": "7/24/12, 3:26 AM",
      "commitNameOld": "6eaf9a247dcfb68b88fec1f2a28808f2bfc19436",
      "commitAuthorOld": "Brice Dutheil",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public MockitoGenericMetadata resolveGenericReturnType(Method method) {\n    Type genericReturnType \u003d method.getGenericReturnType();\n    System.out.println(\"Method \u0027\" + method.toGenericString() + \"\u0027 has return type : \" + genericReturnType.getClass().getInterfaces()[0].getSimpleName() + \" : \" + genericReturnType);\n    if (genericReturnType instanceof Class) {\n        return new NotGenericReturnType(genericReturnType);\n    }\n    if (genericReturnType instanceof ParameterizedType) {\n        return new ParameterizedReturnType(this, method.getTypeParameters(), (ParameterizedType) method.getGenericReturnType());\n    }\n    if (genericReturnType instanceof TypeVariable) {\n        return new TypeVariableReturnType(this, method.getTypeParameters(), (TypeVariable) genericReturnType);\n    }\n    throw new IllegalStateException(\"ouch\");\n}",
      "path": "src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java",
      "functionStartLine": 102,
      "functionName": "resolveGenericReturnType",
      "functionAnnotation": "",
      "functionDoc": "Resolve current method generic return type to a {@link MockitoGenericMetadata}.\n\n@param method Method to resolve the return type.\n@return @link MockitoGenericMetadata} representing this generic return type.\n",
      "diff": "@@ -1,12 +1,14 @@\n public MockitoGenericMetadata resolveGenericReturnType(Method method) {\n     Type genericReturnType \u003d method.getGenericReturnType();\n     System.out.println(\"Method \u0027\" + method.toGenericString() + \"\u0027 has return type : \" + genericReturnType.getClass().getInterfaces()[0].getSimpleName() + \" : \" + genericReturnType);\n     if (genericReturnType instanceof Class) {\n         return new NotGenericReturnType(genericReturnType);\n     }\n     if (genericReturnType instanceof ParameterizedType) {\n-        ParameterizedType returnType \u003d (ParameterizedType) genericReturnType;\n-        return new ParameterizedReturnType(this, method);\n+        return new ParameterizedReturnType(this, method.getTypeParameters(), (ParameterizedType) method.getGenericReturnType());\n     }\n-    return new MethodGenericReturnTypeMockitoGenericMetadata(this, method);\n+    if (genericReturnType instanceof TypeVariable) {\n+        return new TypeVariableReturnType(this, method.getTypeParameters(), (TypeVariable) genericReturnType);\n+    }\n+    throw new IllegalStateException(\"ouch\");\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6eaf9a247dcfb68b88fec1f2a28808f2bfc19436": {
      "type": "Yintroduced",
      "commitMessage": "Trying a Top-Down approach instead of the Bottom-Up approach to better solve this generic mess (tests are broken here)(missing files)\n\n--HG--\nbranch : issue230\n",
      "commitDate": "7/24/12, 3:26 AM",
      "commitName": "6eaf9a247dcfb68b88fec1f2a28808f2bfc19436",
      "commitAuthor": "Brice Dutheil",
      "diff": "@@ -0,0 +1,12 @@\n+public MockitoGenericMetadata resolveGenericReturnType(Method method) {\n+    Type genericReturnType \u003d method.getGenericReturnType();\n+    System.out.println(\"Method \u0027\" + method.toGenericString() + \"\u0027 has return type : \" + genericReturnType.getClass().getInterfaces()[0].getSimpleName() + \" : \" + genericReturnType);\n+    if (genericReturnType instanceof Class) {\n+        return new NotGenericReturnType(genericReturnType);\n+    }\n+    if (genericReturnType instanceof ParameterizedType) {\n+        ParameterizedType returnType \u003d (ParameterizedType) genericReturnType;\n+        return new ParameterizedReturnType(this, method);\n+    }\n+    return new MethodGenericReturnTypeMockitoGenericMetadata(this, method);\n+}\n\\ No newline at end of file\n",
      "actualSource": "public MockitoGenericMetadata resolveGenericReturnType(Method method) {\n    Type genericReturnType \u003d method.getGenericReturnType();\n    System.out.println(\"Method \u0027\" + method.toGenericString() + \"\u0027 has return type : \" + genericReturnType.getClass().getInterfaces()[0].getSimpleName() + \" : \" + genericReturnType);\n    if (genericReturnType instanceof Class) {\n        return new NotGenericReturnType(genericReturnType);\n    }\n    if (genericReturnType instanceof ParameterizedType) {\n        ParameterizedType returnType \u003d (ParameterizedType) genericReturnType;\n        return new ParameterizedReturnType(this, method);\n    }\n    return new MethodGenericReturnTypeMockitoGenericMetadata(this, method);\n}",
      "path": "src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java",
      "functionStartLine": 98,
      "functionName": "resolveGenericReturnType",
      "functionAnnotation": "",
      "functionDoc": "Resolve current method generic return type to a {@link MockitoGenericMetadata}.\n\n@param method Method to resolve the return type.\n@return @link MockitoGenericMetadata} representing this generic return type.\n"
    }
  }
}