{
  "origin": "codeshovel",
  "repositoryName": "Mockito-8b",
  "repositoryPath": "/tmp/Mockito-8b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "GenericMetadataSupport.java",
  "functionName": "registerTypeVariablesOn",
  "functionId": "registerTypeVariablesOn___classType-Type",
  "sourceFilePath": "src/org/mockito/internal/util/reflection/GenericMetadataSupport.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 66,
  "functionEndLine": 84,
  "numCommitsSeen": 15,
  "timeTaken": 1295,
  "changeHistory": [
    "ab9e9f347705bf9f4ebace4b07b085088275a256",
    "a811bad6a2ccac7f45b127d04815d1e6fd6d9eff",
    "55bfac6da735fbda1711e4a5ba53dd324ffa0f99",
    "dc2bea8fe7c5440bbcacf8a36cc03da512d26aa1",
    "52f6a9388d376d292918422296d82d77d5f6c921",
    "d8f0aa99cbc0f4399b15eca313ddc634dcb06fbb",
    "6eaf9a247dcfb68b88fec1f2a28808f2bfc19436"
  ],
  "changeHistoryShort": {
    "ab9e9f347705bf9f4ebace4b07b085088275a256": "Ybodychange",
    "a811bad6a2ccac7f45b127d04815d1e6fd6d9eff": "Ybodychange",
    "55bfac6da735fbda1711e4a5ba53dd324ffa0f99": "Yfilerename",
    "dc2bea8fe7c5440bbcacf8a36cc03da512d26aa1": "Ybodychange",
    "52f6a9388d376d292918422296d82d77d5f6c921": "Ybodychange",
    "d8f0aa99cbc0f4399b15eca313ddc634dcb06fbb": "Ybodychange",
    "6eaf9a247dcfb68b88fec1f2a28808f2bfc19436": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ab9e9f347705bf9f4ebace4b07b085088275a256": {
      "type": "Ybodychange",
      "commitMessage": "Issue 230 Adds more deep stubs support for generic classes\n\n - metadata support extended beypond interfaces\n - cleans up a bit generics metadata\n",
      "commitDate": "3/10/14, 5:20 PM",
      "commitName": "ab9e9f347705bf9f4ebace4b07b085088275a256",
      "commitAuthor": "Brice Dutheil",
      "commitDateOld": "3/10/14, 5:00 PM",
      "commitNameOld": "a811bad6a2ccac7f45b127d04815d1e6fd6d9eff",
      "commitAuthorOld": "Marcin Grzejszczak",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void registerTypeVariablesOn(Type classType) {\n    if (!(classType instanceof ParameterizedType)) {\n        return;\n    }\n    ParameterizedType parameterizedType \u003d (ParameterizedType) classType;\n    TypeVariable[] typeParameters \u003d ((Class\u003c?\u003e) parameterizedType.getRawType()).getTypeParameters();\n    Type[] actualTypeArguments \u003d parameterizedType.getActualTypeArguments();\n    for (int i \u003d 0; i \u003c actualTypeArguments.length; i++) {\n        TypeVariable typeParameter \u003d typeParameters[i];\n        Type actualTypeArgument \u003d actualTypeArguments[i];\n        if (actualTypeArgument instanceof WildcardType) {\n            contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n        } else {\n            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n        }\n    }\n}",
      "path": "src/org/mockito/internal/util/reflection/GenericMetadataSupport.java",
      "functionStartLine": 77,
      "functionName": "registerTypeVariablesOn",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,20 +1,17 @@\n protected void registerTypeVariablesOn(Type classType) {\n     if (!(classType instanceof ParameterizedType)) {\n         return;\n     }\n     ParameterizedType parameterizedType \u003d (ParameterizedType) classType;\n     TypeVariable[] typeParameters \u003d ((Class\u003c?\u003e) parameterizedType.getRawType()).getTypeParameters();\n     Type[] actualTypeArguments \u003d parameterizedType.getActualTypeArguments();\n     for (int i \u003d 0; i \u003c actualTypeArguments.length; i++) {\n         TypeVariable typeParameter \u003d typeParameters[i];\n         Type actualTypeArgument \u003d actualTypeArguments[i];\n-        SerializableTypeVariable serializableTypeVariable \u003d new SerializableTypeVariable(typeParameter);\n         if (actualTypeArgument instanceof WildcardType) {\n-            contextualActualTypeParameters.put(serializableTypeVariable, boundsOf((WildcardType) actualTypeArgument));\n-        } else if (actualTypeArgument instanceof ParameterizedType) {\n-            contextualActualTypeParameters.put(serializableTypeVariable, new SerializableParameterizedType((ParameterizedType) actualTypeArgument));\n+            contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n         } else {\n-            contextualActualTypeParameters.put(serializableTypeVariable, actualTypeArgument);\n+            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a811bad6a2ccac7f45b127d04815d1e6fd6d9eff": {
      "type": "Ybodychange",
      "commitMessage": "Made DeepStubsSerializableTest pass - unfortunately GenericMetadataSupportTest fails\n",
      "commitDate": "3/10/14, 5:00 PM",
      "commitName": "a811bad6a2ccac7f45b127d04815d1e6fd6d9eff",
      "commitAuthor": "Marcin Grzejszczak",
      "commitDateOld": "1/10/14, 2:49 AM",
      "commitNameOld": "afc5bb89eaae10a75e1baaa9f3bfcb19d930f17e",
      "commitAuthorOld": "Marcin.Grzejszczak",
      "daysBetweenCommits": 59.55,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void registerTypeVariablesOn(Type classType) {\n    if (!(classType instanceof ParameterizedType)) {\n        return;\n    }\n    ParameterizedType parameterizedType \u003d (ParameterizedType) classType;\n    TypeVariable[] typeParameters \u003d ((Class\u003c?\u003e) parameterizedType.getRawType()).getTypeParameters();\n    Type[] actualTypeArguments \u003d parameterizedType.getActualTypeArguments();\n    for (int i \u003d 0; i \u003c actualTypeArguments.length; i++) {\n        TypeVariable typeParameter \u003d typeParameters[i];\n        Type actualTypeArgument \u003d actualTypeArguments[i];\n        SerializableTypeVariable serializableTypeVariable \u003d new SerializableTypeVariable(typeParameter);\n        if (actualTypeArgument instanceof WildcardType) {\n            contextualActualTypeParameters.put(serializableTypeVariable, boundsOf((WildcardType) actualTypeArgument));\n        } else if (actualTypeArgument instanceof ParameterizedType) {\n            contextualActualTypeParameters.put(serializableTypeVariable, new SerializableParameterizedType((ParameterizedType) actualTypeArgument));\n        } else {\n            contextualActualTypeParameters.put(serializableTypeVariable, actualTypeArgument);\n        }\n    }\n}",
      "path": "src/org/mockito/internal/util/reflection/GenericMetadataSupport.java",
      "functionStartLine": 70,
      "functionName": "registerTypeVariablesOn",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,17 +1,20 @@\n protected void registerTypeVariablesOn(Type classType) {\n     if (!(classType instanceof ParameterizedType)) {\n         return;\n     }\n     ParameterizedType parameterizedType \u003d (ParameterizedType) classType;\n     TypeVariable[] typeParameters \u003d ((Class\u003c?\u003e) parameterizedType.getRawType()).getTypeParameters();\n     Type[] actualTypeArguments \u003d parameterizedType.getActualTypeArguments();\n     for (int i \u003d 0; i \u003c actualTypeArguments.length; i++) {\n         TypeVariable typeParameter \u003d typeParameters[i];\n         Type actualTypeArgument \u003d actualTypeArguments[i];\n+        SerializableTypeVariable serializableTypeVariable \u003d new SerializableTypeVariable(typeParameter);\n         if (actualTypeArgument instanceof WildcardType) {\n-            contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n+            contextualActualTypeParameters.put(serializableTypeVariable, boundsOf((WildcardType) actualTypeArgument));\n+        } else if (actualTypeArgument instanceof ParameterizedType) {\n+            contextualActualTypeParameters.put(serializableTypeVariable, new SerializableParameterizedType((ParameterizedType) actualTypeArgument));\n         } else {\n-            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n+            contextualActualTypeParameters.put(serializableTypeVariable, actualTypeArgument);\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "55bfac6da735fbda1711e4a5ba53dd324ffa0f99": {
      "type": "Yfilerename",
      "commitMessage": "Renamed MockitoGenericMetadata to GenericMetadataSupport\n\n--HG--\nbranch : issue230\nrename : src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java \u003d\u003e src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nrename : test/org/mockito/internal/util/reflection/MockitoGenericMetadataTest.java \u003d\u003e test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java\n",
      "commitDate": "8/1/12, 8:12 AM",
      "commitName": "55bfac6da735fbda1711e4a5ba53dd324ffa0f99",
      "commitAuthor": "Brice Dutheil",
      "commitDateOld": "8/1/12, 8:07 AM",
      "commitNameOld": "6e97858d79d08b455cb3690b811120965ee1975a",
      "commitAuthorOld": "Brice Dutheil",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void registerTypeVariablesOn(Type classType) {\n    if (!(classType instanceof ParameterizedType)) {\n        return;\n    }\n    ParameterizedType parameterizedType \u003d (ParameterizedType) classType;\n    TypeVariable[] typeParameters \u003d ((Class\u003c?\u003e) parameterizedType.getRawType()).getTypeParameters();\n    Type[] actualTypeArguments \u003d parameterizedType.getActualTypeArguments();\n    for (int i \u003d 0; i \u003c actualTypeArguments.length; i++) {\n        TypeVariable typeParameter \u003d typeParameters[i];\n        Type actualTypeArgument \u003d actualTypeArguments[i];\n        if (actualTypeArgument instanceof WildcardType) {\n            contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n        } else {\n            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n        }\n    }\n}",
      "path": "src/org/mockito/internal/util/reflection/GenericMetadataSupport.java",
      "functionStartLine": 79,
      "functionName": "registerTypeVariablesOn",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java",
        "newPath": "src/org/mockito/internal/util/reflection/GenericMetadataSupport.java"
      }
    },
    "dc2bea8fe7c5440bbcacf8a36cc03da512d26aa1": {
      "type": "Ybodychange",
      "commitMessage": "Added wildcard support\n\n--HG--\nbranch : issue230\n",
      "commitDate": "8/1/12, 7:11 AM",
      "commitName": "dc2bea8fe7c5440bbcacf8a36cc03da512d26aa1",
      "commitAuthor": "Brice Dutheil",
      "commitDateOld": "7/24/12, 9:52 AM",
      "commitNameOld": "52f6a9388d376d292918422296d82d77d5f6c921",
      "commitAuthorOld": "Brice Dutheil",
      "daysBetweenCommits": 7.89,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void registerTypeVariablesOn(Type classType) {\n    if (!(classType instanceof ParameterizedType)) {\n        return;\n    }\n    ParameterizedType parameterizedType \u003d (ParameterizedType) classType;\n    TypeVariable[] typeParameters \u003d ((Class\u003c?\u003e) parameterizedType.getRawType()).getTypeParameters();\n    Type[] actualTypeArguments \u003d parameterizedType.getActualTypeArguments();\n    for (int i \u003d 0; i \u003c actualTypeArguments.length; i++) {\n        TypeVariable typeParameter \u003d typeParameters[i];\n        Type actualTypeArgument \u003d actualTypeArguments[i];\n        if (actualTypeArgument instanceof WildcardType) {\n            contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n        } else {\n            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n        }\n    }\n}",
      "path": "src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java",
      "functionStartLine": 41,
      "functionName": "registerTypeVariablesOn",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,14 +1,17 @@\n protected void registerTypeVariablesOn(Type classType) {\n     if (!(classType instanceof ParameterizedType)) {\n         return;\n     }\n     ParameterizedType parameterizedType \u003d (ParameterizedType) classType;\n     TypeVariable[] typeParameters \u003d ((Class\u003c?\u003e) parameterizedType.getRawType()).getTypeParameters();\n     Type[] actualTypeArguments \u003d parameterizedType.getActualTypeArguments();\n     for (int i \u003d 0; i \u003c actualTypeArguments.length; i++) {\n         TypeVariable typeParameter \u003d typeParameters[i];\n         Type actualTypeArgument \u003d actualTypeArguments[i];\n-        contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n-        logger.log(\"For \u0027\" + parameterizedType + \"\u0027 found type variable : { \u0027\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"\u0027 : \u0027\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"\u0027 }\");\n+        if (actualTypeArgument instanceof WildcardType) {\n+            contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n+        } else {\n+            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n+        }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "52f6a9388d376d292918422296d82d77d5f6c921": {
      "type": "Ybodychange",
      "commitMessage": "Generic deep stubs now operational! Wildcard types are not yet in the party.\n\n--HG--\nbranch : issue230\n",
      "commitDate": "7/24/12, 9:52 AM",
      "commitName": "52f6a9388d376d292918422296d82d77d5f6c921",
      "commitAuthor": "Brice Dutheil",
      "commitDateOld": "7/24/12, 5:43 AM",
      "commitNameOld": "d8f0aa99cbc0f4399b15eca313ddc634dcb06fbb",
      "commitAuthorOld": "Brice Dutheil",
      "daysBetweenCommits": 0.17,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void registerTypeVariablesOn(Type classType) {\n    if (!(classType instanceof ParameterizedType)) {\n        return;\n    }\n    ParameterizedType parameterizedType \u003d (ParameterizedType) classType;\n    TypeVariable[] typeParameters \u003d ((Class\u003c?\u003e) parameterizedType.getRawType()).getTypeParameters();\n    Type[] actualTypeArguments \u003d parameterizedType.getActualTypeArguments();\n    for (int i \u003d 0; i \u003c actualTypeArguments.length; i++) {\n        TypeVariable typeParameter \u003d typeParameters[i];\n        Type actualTypeArgument \u003d actualTypeArguments[i];\n        contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n        logger.log(\"For \u0027\" + parameterizedType + \"\u0027 found type variable : { \u0027\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"\u0027 : \u0027\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"\u0027 }\");\n    }\n}",
      "path": "src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java",
      "functionStartLine": 32,
      "functionName": "registerTypeVariablesOn",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,14 +1,14 @@\n protected void registerTypeVariablesOn(Type classType) {\n     if (!(classType instanceof ParameterizedType)) {\n         return;\n     }\n     ParameterizedType parameterizedType \u003d (ParameterizedType) classType;\n     TypeVariable[] typeParameters \u003d ((Class\u003c?\u003e) parameterizedType.getRawType()).getTypeParameters();\n     Type[] actualTypeArguments \u003d parameterizedType.getActualTypeArguments();\n     for (int i \u003d 0; i \u003c actualTypeArguments.length; i++) {\n         TypeVariable typeParameter \u003d typeParameters[i];\n         Type actualTypeArgument \u003d actualTypeArguments[i];\n         contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n-        GenericTypeInfo.logger.log(\"For \u0027\" + parameterizedType + \"\u0027 found type variable : { \u0027\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"\u0027 : \u0027\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"\u0027 }\");\n+        logger.log(\"For \u0027\" + parameterizedType + \"\u0027 found type variable : { \u0027\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"\u0027 : \u0027\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"\u0027 }\");\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d8f0aa99cbc0f4399b15eca313ddc634dcb06fbb": {
      "type": "Ybodychange",
      "commitMessage": "Almost there, now can resolve most TypeVariables declaration, certainly not exhaustive\n\n--HG--\nbranch : issue230\n",
      "commitDate": "7/24/12, 5:43 AM",
      "commitName": "d8f0aa99cbc0f4399b15eca313ddc634dcb06fbb",
      "commitAuthor": "Brice Dutheil",
      "commitDateOld": "7/24/12, 3:26 AM",
      "commitNameOld": "6eaf9a247dcfb68b88fec1f2a28808f2bfc19436",
      "commitAuthorOld": "Brice Dutheil",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void registerTypeVariablesOn(Type classType) {\n    if (!(classType instanceof ParameterizedType)) {\n        return;\n    }\n    ParameterizedType parameterizedType \u003d (ParameterizedType) classType;\n    TypeVariable[] typeParameters \u003d ((Class\u003c?\u003e) parameterizedType.getRawType()).getTypeParameters();\n    Type[] actualTypeArguments \u003d parameterizedType.getActualTypeArguments();\n    for (int i \u003d 0; i \u003c actualTypeArguments.length; i++) {\n        TypeVariable typeParameter \u003d typeParameters[i];\n        Type actualTypeArgument \u003d actualTypeArguments[i];\n        contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n        GenericTypeInfo.logger.log(\"For \u0027\" + parameterizedType + \"\u0027 found type variable : { \u0027\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"\u0027 : \u0027\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"\u0027 }\");\n    }\n}",
      "path": "src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java",
      "functionStartLine": 22,
      "functionName": "registerTypeVariablesOn",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,14 +1,14 @@\n protected void registerTypeVariablesOn(Type classType) {\n     if (!(classType instanceof ParameterizedType)) {\n         return;\n     }\n     ParameterizedType parameterizedType \u003d (ParameterizedType) classType;\n     TypeVariable[] typeParameters \u003d ((Class\u003c?\u003e) parameterizedType.getRawType()).getTypeParameters();\n     Type[] actualTypeArguments \u003d parameterizedType.getActualTypeArguments();\n     for (int i \u003d 0; i \u003c actualTypeArguments.length; i++) {\n         TypeVariable typeParameter \u003d typeParameters[i];\n         Type actualTypeArgument \u003d actualTypeArguments[i];\n         contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n-        GenericTypeInfo.logger.log(\"For \u0027\" + parameterizedType + \"\u0027 found type variable : { \u0027\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"\u0027 : \u0027\" + actualTypeArgument + \"\u0027 }\");\n+        GenericTypeInfo.logger.log(\"For \u0027\" + parameterizedType + \"\u0027 found type variable : { \u0027\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"\u0027 : \u0027\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"\u0027 }\");\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6eaf9a247dcfb68b88fec1f2a28808f2bfc19436": {
      "type": "Yintroduced",
      "commitMessage": "Trying a Top-Down approach instead of the Bottom-Up approach to better solve this generic mess (tests are broken here)(missing files)\n\n--HG--\nbranch : issue230\n",
      "commitDate": "7/24/12, 3:26 AM",
      "commitName": "6eaf9a247dcfb68b88fec1f2a28808f2bfc19436",
      "commitAuthor": "Brice Dutheil",
      "diff": "@@ -0,0 +1,14 @@\n+protected void registerTypeVariablesOn(Type classType) {\n+    if (!(classType instanceof ParameterizedType)) {\n+        return;\n+    }\n+    ParameterizedType parameterizedType \u003d (ParameterizedType) classType;\n+    TypeVariable[] typeParameters \u003d ((Class\u003c?\u003e) parameterizedType.getRawType()).getTypeParameters();\n+    Type[] actualTypeArguments \u003d parameterizedType.getActualTypeArguments();\n+    for (int i \u003d 0; i \u003c actualTypeArguments.length; i++) {\n+        TypeVariable typeParameter \u003d typeParameters[i];\n+        Type actualTypeArgument \u003d actualTypeArguments[i];\n+        contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n+        GenericTypeInfo.logger.log(\"For \u0027\" + parameterizedType + \"\u0027 found type variable : { \u0027\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"\u0027 : \u0027\" + actualTypeArgument + \"\u0027 }\");\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected void registerTypeVariablesOn(Type classType) {\n    if (!(classType instanceof ParameterizedType)) {\n        return;\n    }\n    ParameterizedType parameterizedType \u003d (ParameterizedType) classType;\n    TypeVariable[] typeParameters \u003d ((Class\u003c?\u003e) parameterizedType.getRawType()).getTypeParameters();\n    Type[] actualTypeArguments \u003d parameterizedType.getActualTypeArguments();\n    for (int i \u003d 0; i \u003c actualTypeArguments.length; i++) {\n        TypeVariable typeParameter \u003d typeParameters[i];\n        Type actualTypeArgument \u003d actualTypeArguments[i];\n        contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n        GenericTypeInfo.logger.log(\"For \u0027\" + parameterizedType + \"\u0027 found type variable : { \u0027\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"\u0027 : \u0027\" + actualTypeArgument + \"\u0027 }\");\n    }\n}",
      "path": "src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java",
      "functionStartLine": 27,
      "functionName": "registerTypeVariablesOn",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}