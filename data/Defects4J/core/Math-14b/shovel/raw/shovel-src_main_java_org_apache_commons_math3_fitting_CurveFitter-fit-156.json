{
  "origin": "codeshovel",
  "repositoryName": "Math-14b",
  "repositoryPath": "/tmp/Math-14b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CurveFitter.java",
  "functionName": "fit",
  "functionId": "fit___maxEval-int__f-T__initialGuess-double[](modifiers-final)",
  "sourceFilePath": "src/main/java/org/apache/commons/math3/fitting/CurveFitter.java",
  "functionAnnotation": "",
  "functionDoc": "Fit a curve.\nThis method compute the coefficients of the curve that best\nfit the sample of observed points previously given through calls\nto the {@link #addObservedPoint(WeightedObservedPoint)\naddObservedPoint} method.\n\n@param f parametric function to fit.\n@param initialGuess first guess of the function parameters.\n@param maxEval Maximum number of function evaluations.\n@return the fitted parameters.\n@throws org.apache.commons.math3.exception.TooManyEvaluationsException\nif the number of allowed evaluations is exceeded.\n@throws org.apache.commons.math3.exception.DimensionMismatchException\nif the start point dimension is wrong.\n@since 3.0\n",
  "functionStartLine": 156,
  "functionEndLine": 181,
  "numCommitsSeen": 3,
  "timeTaken": 681,
  "changeHistory": [
    "80180b28efc35d63bedde1f7014c29349d744dfe",
    "3d2561d5e80d8b605a0671526c997a1014c869b2",
    "a3a1f9a217c2ac49927aa3364ecd2eee4079a29f"
  ],
  "changeHistoryShort": {
    "80180b28efc35d63bedde1f7014c29349d744dfe": "Ybodychange",
    "3d2561d5e80d8b605a0671526c997a1014c869b2": "Ybodychange",
    "a3a1f9a217c2ac49927aa3364ecd2eee4079a29f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "80180b28efc35d63bedde1f7014c29349d744dfe": {
      "type": "Ybodychange",
      "commitMessage": "reverting commit introduced in r1426616\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1426751 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/29/12, 4:10 AM",
      "commitName": "80180b28efc35d63bedde1f7014c29349d744dfe",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "12/28/12, 12:16 PM",
      "commitNameOld": "3d2561d5e80d8b605a0671526c997a1014c869b2",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 0.66,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public double[] fit(int maxEval, T f, final double[] initialGuess) {\n    double[] target \u003d new double[observations.size()];\n    double[] weights \u003d new double[observations.size()];\n    int i \u003d 0;\n    for (WeightedObservedPoint point : observations) {\n        target[i] \u003d point.getY();\n        weights[i] \u003d point.getWeight();\n        ++i;\n    }\n    final TheoreticalValuesFunction model \u003d new TheoreticalValuesFunction(f);\n    final PointVectorValuePair optimum \u003d optimizer.optimize(new MaxEval(maxEval), model.getModelFunction(), model.getModelFunctionJacobian(), new Target(target), new Weight(weights), new InitialGuess(initialGuess));\n    return optimum.getPointRef();\n}",
      "path": "src/main/java/org/apache/commons/math3/fitting/CurveFitter.java",
      "functionStartLine": 156,
      "functionName": "fit",
      "functionAnnotation": "",
      "functionDoc": "Fit a curve.\nThis method compute the coefficients of the curve that best\nfit the sample of observed points previously given through calls\nto the {@link #addObservedPoint(WeightedObservedPoint)\naddObservedPoint} method.\n\n@param f parametric function to fit.\n@param initialGuess first guess of the function parameters.\n@param maxEval Maximum number of function evaluations.\n@return the fitted parameters.\n@throws org.apache.commons.math3.exception.TooManyEvaluationsException\nif the number of allowed evaluations is exceeded.\n@throws org.apache.commons.math3.exception.DimensionMismatchException\nif the start point dimension is wrong.\n@since 3.0\n",
      "diff": "@@ -1,13 +1,13 @@\n public double[] fit(int maxEval, T f, final double[] initialGuess) {\n     double[] target \u003d new double[observations.size()];\n     double[] weights \u003d new double[observations.size()];\n     int i \u003d 0;\n     for (WeightedObservedPoint point : observations) {\n         target[i] \u003d point.getY();\n         weights[i] \u003d point.getWeight();\n         ++i;\n     }\n     final TheoreticalValuesFunction model \u003d new TheoreticalValuesFunction(f);\n-    final PointVectorValuePair optimum \u003d optimizer.optimize(new MaxEval(maxEval), model.getModelFunction(), model.getModelFunctionJacobian(), new Target(target), new NonCorrelatedWeight(weights), new InitialGuess(initialGuess));\n+    final PointVectorValuePair optimum \u003d optimizer.optimize(new MaxEval(maxEval), model.getModelFunction(), model.getModelFunctionJacobian(), new Target(target), new Weight(weights), new InitialGuess(initialGuess));\n     return optimum.getPointRef();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3d2561d5e80d8b605a0671526c997a1014c869b2": {
      "type": "Ybodychange",
      "commitMessage": "Added vector-only weights for multivariate vector optimizers.\n\nJIRA: MATH-924\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1426616 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/28/12, 12:16 PM",
      "commitName": "3d2561d5e80d8b605a0671526c997a1014c869b2",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "12/12/12, 6:10 AM",
      "commitNameOld": "a3a1f9a217c2ac49927aa3364ecd2eee4079a29f",
      "commitAuthorOld": "Gilles Sadowski",
      "daysBetweenCommits": 16.25,
      "commitsBetweenForRepo": 54,
      "commitsBetweenForFile": 1,
      "actualSource": "public double[] fit(int maxEval, T f, final double[] initialGuess) {\n    double[] target \u003d new double[observations.size()];\n    double[] weights \u003d new double[observations.size()];\n    int i \u003d 0;\n    for (WeightedObservedPoint point : observations) {\n        target[i] \u003d point.getY();\n        weights[i] \u003d point.getWeight();\n        ++i;\n    }\n    final TheoreticalValuesFunction model \u003d new TheoreticalValuesFunction(f);\n    final PointVectorValuePair optimum \u003d optimizer.optimize(new MaxEval(maxEval), model.getModelFunction(), model.getModelFunctionJacobian(), new Target(target), new NonCorrelatedWeight(weights), new InitialGuess(initialGuess));\n    return optimum.getPointRef();\n}",
      "path": "src/main/java/org/apache/commons/math3/fitting/CurveFitter.java",
      "functionStartLine": 157,
      "functionName": "fit",
      "functionAnnotation": "",
      "functionDoc": "Fit a curve.\nThis method compute the coefficients of the curve that best\nfit the sample of observed points previously given through calls\nto the {@link #addObservedPoint(WeightedObservedPoint)\naddObservedPoint} method.\n\n@param f parametric function to fit.\n@param initialGuess first guess of the function parameters.\n@param maxEval Maximum number of function evaluations.\n@return the fitted parameters.\n@throws org.apache.commons.math3.exception.TooManyEvaluationsException\nif the number of allowed evaluations is exceeded.\n@throws org.apache.commons.math3.exception.DimensionMismatchException\nif the start point dimension is wrong.\n@since 3.0\n",
      "diff": "@@ -1,13 +1,13 @@\n public double[] fit(int maxEval, T f, final double[] initialGuess) {\n     double[] target \u003d new double[observations.size()];\n     double[] weights \u003d new double[observations.size()];\n     int i \u003d 0;\n     for (WeightedObservedPoint point : observations) {\n         target[i] \u003d point.getY();\n         weights[i] \u003d point.getWeight();\n         ++i;\n     }\n     final TheoreticalValuesFunction model \u003d new TheoreticalValuesFunction(f);\n-    final PointVectorValuePair optimum \u003d optimizer.optimize(new MaxEval(maxEval), model.getModelFunction(), model.getModelFunctionJacobian(), new Target(target), new Weight(weights), new InitialGuess(initialGuess));\n+    final PointVectorValuePair optimum \u003d optimizer.optimize(new MaxEval(maxEval), model.getModelFunction(), model.getModelFunctionJacobian(), new Target(target), new NonCorrelatedWeight(weights), new InitialGuess(initialGuess));\n     return optimum.getPointRef();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a3a1f9a217c2ac49927aa3364ecd2eee4079a29f": {
      "type": "Yintroduced",
      "commitMessage": "MATH-874\nRefactored of the contents of package \"o.a.c.m.optimization\"\ninto the new \"o.a.c.m.optim\" and \"o.a.c.m.fitting\" packages.\n* All deprecated classes/fields/methods have been removed in the\n  replacement packages.\n* Simplified API: a single \"optimize(OptimizationData... data)\"\n  for all optimizer types.\n* Simplified class hierarchy, merged interfaces and abstract\n  classes, only base classes are generic.\n* The new classes do not use the \"DerivativeStructure\" type.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1420684 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/12/12, 6:10 AM",
      "commitName": "a3a1f9a217c2ac49927aa3364ecd2eee4079a29f",
      "commitAuthor": "Gilles Sadowski",
      "diff": "@@ -0,0 +1,13 @@\n+public double[] fit(int maxEval, T f, final double[] initialGuess) {\n+    double[] target \u003d new double[observations.size()];\n+    double[] weights \u003d new double[observations.size()];\n+    int i \u003d 0;\n+    for (WeightedObservedPoint point : observations) {\n+        target[i] \u003d point.getY();\n+        weights[i] \u003d point.getWeight();\n+        ++i;\n+    }\n+    final TheoreticalValuesFunction model \u003d new TheoreticalValuesFunction(f);\n+    final PointVectorValuePair optimum \u003d optimizer.optimize(new MaxEval(maxEval), model.getModelFunction(), model.getModelFunctionJacobian(), new Target(target), new Weight(weights), new InitialGuess(initialGuess));\n+    return optimum.getPointRef();\n+}\n\\ No newline at end of file\n",
      "actualSource": "public double[] fit(int maxEval, T f, final double[] initialGuess) {\n    double[] target \u003d new double[observations.size()];\n    double[] weights \u003d new double[observations.size()];\n    int i \u003d 0;\n    for (WeightedObservedPoint point : observations) {\n        target[i] \u003d point.getY();\n        weights[i] \u003d point.getWeight();\n        ++i;\n    }\n    final TheoreticalValuesFunction model \u003d new TheoreticalValuesFunction(f);\n    final PointVectorValuePair optimum \u003d optimizer.optimize(new MaxEval(maxEval), model.getModelFunction(), model.getModelFunctionJacobian(), new Target(target), new Weight(weights), new InitialGuess(initialGuess));\n    return optimum.getPointRef();\n}",
      "path": "src/main/java/org/apache/commons/math3/fitting/CurveFitter.java",
      "functionStartLine": 156,
      "functionName": "fit",
      "functionAnnotation": "",
      "functionDoc": "Fit a curve.\nThis method compute the coefficients of the curve that best\nfit the sample of observed points previously given through calls\nto the {@link #addObservedPoint(WeightedObservedPoint)\naddObservedPoint} method.\n\n@param f parametric function to fit.\n@param initialGuess first guess of the function parameters.\n@param maxEval Maximum number of function evaluations.\n@return the fitted parameters.\n@throws org.apache.commons.math3.exception.TooManyEvaluationsException\nif the number of allowed evaluations is exceeded.\n@throws org.apache.commons.math3.exception.DimensionMismatchException\nif the start point dimension is wrong.\n@since 3.0\n"
    }
  }
}