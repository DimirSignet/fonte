{
  "origin": "codeshovel",
  "repositoryName": "Math-14b",
  "repositoryPath": "/tmp/Math-14b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BlockRealMatrix.java",
  "functionName": "createBlocksLayout",
  "functionId": "createBlocksLayout___rows-int(modifiers-final)__columns-int(modifiers-final)",
  "sourceFilePath": "src/main/java/org/apache/commons/math3/linear/BlockRealMatrix.java",
  "functionAnnotation": "",
  "functionDoc": "Create a data array in blocks layout.\n\u003cp\u003e\nThis method can be used to create the array argument of the {@link\n#BlockRealMatrix(int, int, double[][], boolean)} constructor.\n\u003c/p\u003e\n\n@param rows Number of rows in the new matrix.\n@param columns Number of columns in the new matrix.\n@return a new data array in blocks layout.\n@see #toBlocksLayout(double[][])\n@see #BlockRealMatrix(int, int, double[][], boolean)\n",
  "functionStartLine": 257,
  "functionEndLine": 277,
  "numCommitsSeen": 38,
  "timeTaken": 15189,
  "changeHistory": [
    "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd",
    "b9b5413f8fcb9ab9a127c7040ace0074e07bb53c",
    "8742126f8f6117d90401f8d3ca1f40cd72b489aa",
    "a16f53810b9c9b8cb461674c8b1ef7c17102372e",
    "80b1e90b42a34856b61cec628fcea6633d1000cd",
    "0905e8cf724b358277e219cbf1a06413faa48c9e",
    "d6a438e931412713e99624cf9ed74470f1040184",
    "62bed05b1491a68d1416392e3e4cb2665f995010",
    "22f406556284019a8d5eb2dfcce01f2feef947ae",
    "e59d9198494a6a6dd30e53d48c25da49688dbbac",
    "6b7fe27d4beca91a3f38247bcd6d6a73f43e744e"
  ],
  "changeHistoryShort": {
    "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd": "Ymovefromfile",
    "b9b5413f8fcb9ab9a127c7040ace0074e07bb53c": "Ydocchange",
    "8742126f8f6117d90401f8d3ca1f40cd72b489aa": "Yformatchange",
    "a16f53810b9c9b8cb461674c8b1ef7c17102372e": "Yformatchange",
    "80b1e90b42a34856b61cec628fcea6633d1000cd": "Ybodychange",
    "0905e8cf724b358277e219cbf1a06413faa48c9e": "Ybodychange",
    "d6a438e931412713e99624cf9ed74470f1040184": "Yfilerename",
    "62bed05b1491a68d1416392e3e4cb2665f995010": "Ydocchange",
    "22f406556284019a8d5eb2dfcce01f2feef947ae": "Ymultichange(Yfilerename,Ydocchange)",
    "e59d9198494a6a6dd30e53d48c25da49688dbbac": "Yexceptionschange",
    "6b7fe27d4beca91a3f38247bcd6d6a73f43e744e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd": {
      "type": "Ymovefromfile",
      "commitMessage": "MATH-444\nBase package name change: \"o.a.c.math\" -\u003e \"o.a.c.math3\"\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1244107 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/14/12, 8:17 AM",
      "commitName": "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd",
      "commitAuthor": "Gilles Sadowski",
      "commitDateOld": "2/14/12, 6:34 AM",
      "commitNameOld": "53257329dd394be1333b38bae787bf0cf19dc900",
      "commitAuthorOld": "Gilles Sadowski",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static double[][] createBlocksLayout(final int rows, final int columns) {\n    final int blockRows \u003d (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\n    final int blockColumns \u003d (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;\n    final double[][] blocks \u003d new double[blockRows * blockColumns][];\n    int blockIndex \u003d 0;\n    for (int iBlock \u003d 0; iBlock \u003c blockRows; ++iBlock) {\n        final int pStart \u003d iBlock * BLOCK_SIZE;\n        final int pEnd \u003d FastMath.min(pStart + BLOCK_SIZE, rows);\n        final int iHeight \u003d pEnd - pStart;\n        for (int jBlock \u003d 0; jBlock \u003c blockColumns; ++jBlock) {\n            final int qStart \u003d jBlock * BLOCK_SIZE;\n            final int qEnd \u003d FastMath.min(qStart + BLOCK_SIZE, columns);\n            final int jWidth \u003d qEnd - qStart;\n            blocks[blockIndex] \u003d new double[iHeight * jWidth];\n            ++blockIndex;\n        }\n    }\n    return blocks;\n}",
      "path": "src/main/java/org/apache/commons/math3/linear/BlockRealMatrix.java",
      "functionStartLine": 246,
      "functionName": "createBlocksLayout",
      "functionAnnotation": "",
      "functionDoc": "Create a data array in blocks layout.\n\u003cp\u003e\nThis method can be used to create the array argument of the {@link\n#BlockRealMatrix(int, int, double[][], boolean)} constructor.\n\u003c/p\u003e\n\n@param rows Number of rows in the new matrix.\n@param columns Number of columns in the new matrix.\n@return a new data array in blocks layout.\n@see #toBlocksLayout(double[][])\n@see #BlockRealMatrix(int, int, double[][], boolean)\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java",
        "newPath": "src/main/java/org/apache/commons/math3/linear/BlockRealMatrix.java",
        "oldMethodName": "createBlocksLayout",
        "newMethodName": "createBlocksLayout"
      }
    },
    "b9b5413f8fcb9ab9a127c7040ace0074e07bb53c": {
      "type": "Ydocchange",
      "commitMessage": "MATH-425\nRemoved redundant exception \"throws\" clauses.\nJavadoc cleanup.\nThrowing \"NoDataException\" instead of \"ZeroException\" when row or column\ndata is missing.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1038403 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/23/10, 4:42 PM",
      "commitName": "b9b5413f8fcb9ab9a127c7040ace0074e07bb53c",
      "commitAuthor": "Gilles Sadowski",
      "commitDateOld": "11/12/10, 9:53 AM",
      "commitNameOld": "2a29e2e1929a8bb7ba5ac040087328196a09fe84",
      "commitAuthorOld": "Gilles Sadowski",
      "daysBetweenCommits": 11.28,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "actualSource": "public static double[][] createBlocksLayout(final int rows, final int columns) {\n    final int blockRows \u003d (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\n    final int blockColumns \u003d (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;\n    final double[][] blocks \u003d new double[blockRows * blockColumns][];\n    int blockIndex \u003d 0;\n    for (int iBlock \u003d 0; iBlock \u003c blockRows; ++iBlock) {\n        final int pStart \u003d iBlock * BLOCK_SIZE;\n        final int pEnd \u003d FastMath.min(pStart + BLOCK_SIZE, rows);\n        final int iHeight \u003d pEnd - pStart;\n        for (int jBlock \u003d 0; jBlock \u003c blockColumns; ++jBlock) {\n            final int qStart \u003d jBlock * BLOCK_SIZE;\n            final int qEnd \u003d FastMath.min(qStart + BLOCK_SIZE, columns);\n            final int jWidth \u003d qEnd - qStart;\n            blocks[blockIndex] \u003d new double[iHeight * jWidth];\n            ++blockIndex;\n        }\n    }\n    return blocks;\n}",
      "path": "src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java",
      "functionStartLine": 245,
      "functionName": "createBlocksLayout",
      "functionAnnotation": "",
      "functionDoc": "Create a data array in blocks layout.\n\u003cp\u003e\nThis method can be used to create the array argument of the {@link\n#BlockRealMatrix(int, int, double[][], boolean)} constructor.\n\u003c/p\u003e\n\n@param rows Number of rows in the new matrix.\n@param columns Number of columns in the new matrix.\n@return a new data array in blocks layout.\n@see #toBlocksLayout(double[][])\n@see #BlockRealMatrix(int, int, double[][], boolean)\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Create a data array in blocks layout.\n\u003cp\u003e\nThis method can be used to create the array argument of the {@link\n#BlockRealMatrix(int, int, double[][], boolean)} constructor.\n\u003c/p\u003e\n\n@param rows the number of rows in the new matrix\n@param columns the number of columns in the new matrix\n@return a new data array in blocks layout\n@see #toBlocksLayout(double[][])\n@see #BlockRealMatrix(int, int, double[][], boolean)\n",
        "newValue": "Create a data array in blocks layout.\n\u003cp\u003e\nThis method can be used to create the array argument of the {@link\n#BlockRealMatrix(int, int, double[][], boolean)} constructor.\n\u003c/p\u003e\n\n@param rows Number of rows in the new matrix.\n@param columns Number of columns in the new matrix.\n@return a new data array in blocks layout.\n@see #toBlocksLayout(double[][])\n@see #BlockRealMatrix(int, int, double[][], boolean)\n"
      }
    },
    "8742126f8f6117d90401f8d3ca1f40cd72b489aa": {
      "type": "Yformatchange",
      "commitMessage": "MATH-425\nDeleted deprecated classes in package \"linear\".\nRemoved redundant methods in \"Array2DRowRealMatrix\".\nRemoved usage of \"MatrixIndexException\" (class is now deprecated).\nJavadoc clean up.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1027952 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/27/10, 6:16 AM",
      "commitName": "8742126f8f6117d90401f8d3ca1f40cd72b489aa",
      "commitAuthor": "Gilles Sadowski",
      "commitDateOld": "9/24/10, 4:12 PM",
      "commitNameOld": "a16f53810b9c9b8cb461674c8b1ef7c17102372e",
      "commitAuthorOld": "Gilles Sadowski",
      "daysBetweenCommits": 32.59,
      "commitsBetweenForRepo": 49,
      "commitsBetweenForFile": 1,
      "actualSource": "public static double[][] createBlocksLayout(final int rows, final int columns) {\n    final int blockRows \u003d (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\n    final int blockColumns \u003d (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;\n    final double[][] blocks \u003d new double[blockRows * blockColumns][];\n    int blockIndex \u003d 0;\n    for (int iBlock \u003d 0; iBlock \u003c blockRows; ++iBlock) {\n        final int pStart \u003d iBlock * BLOCK_SIZE;\n        final int pEnd \u003d FastMath.min(pStart + BLOCK_SIZE, rows);\n        final int iHeight \u003d pEnd - pStart;\n        for (int jBlock \u003d 0; jBlock \u003c blockColumns; ++jBlock) {\n            final int qStart \u003d jBlock * BLOCK_SIZE;\n            final int qEnd \u003d FastMath.min(qStart + BLOCK_SIZE, columns);\n            final int jWidth \u003d qEnd - qStart;\n            blocks[blockIndex] \u003d new double[iHeight * jWidth];\n            ++blockIndex;\n        }\n    }\n    return blocks;\n}",
      "path": "src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java",
      "functionStartLine": 248,
      "functionName": "createBlocksLayout",
      "functionAnnotation": "",
      "functionDoc": "Create a data array in blocks layout.\n\u003cp\u003e\nThis method can be used to create the array argument of the {@link\n#BlockRealMatrix(int, int, double[][], boolean)} constructor.\n\u003c/p\u003e\n\n@param rows the number of rows in the new matrix\n@param columns the number of columns in the new matrix\n@return a new data array in blocks layout\n@see #toBlocksLayout(double[][])\n@see #BlockRealMatrix(int, int, double[][], boolean)\n",
      "diff": "",
      "extendedDetails": {}
    },
    "a16f53810b9c9b8cb461674c8b1ef7c17102372e": {
      "type": "Yformatchange",
      "commitMessage": "Introduced \"MatrixDimensionMismatchException\" to replace \"InvalidMatrixException\"\nwhenever it was used to signal a row or column dimension mismatch.\n\"MessageFactory\": Fixed wrong order of appearance of general and specific messages.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1001107 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/24/10, 4:12 PM",
      "commitName": "a16f53810b9c9b8cb461674c8b1ef7c17102372e",
      "commitAuthor": "Gilles Sadowski",
      "commitDateOld": "8/29/10, 3:04 PM",
      "commitNameOld": "80b1e90b42a34856b61cec628fcea6633d1000cd",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 26.05,
      "commitsBetweenForRepo": 41,
      "commitsBetweenForFile": 1,
      "actualSource": "public static double[][] createBlocksLayout(final int rows, final int columns) {\n    final int blockRows \u003d (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\n    final int blockColumns \u003d (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;\n    final double[][] blocks \u003d new double[blockRows * blockColumns][];\n    int blockIndex \u003d 0;\n    for (int iBlock \u003d 0; iBlock \u003c blockRows; ++iBlock) {\n        final int pStart \u003d iBlock * BLOCK_SIZE;\n        final int pEnd \u003d FastMath.min(pStart + BLOCK_SIZE, rows);\n        final int iHeight \u003d pEnd - pStart;\n        for (int jBlock \u003d 0; jBlock \u003c blockColumns; ++jBlock) {\n            final int qStart \u003d jBlock * BLOCK_SIZE;\n            final int qEnd \u003d FastMath.min(qStart + BLOCK_SIZE, columns);\n            final int jWidth \u003d qEnd - qStart;\n            blocks[blockIndex] \u003d new double[iHeight * jWidth];\n            ++blockIndex;\n        }\n    }\n    return blocks;\n}",
      "path": "src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java",
      "functionStartLine": 264,
      "functionName": "createBlocksLayout",
      "functionAnnotation": "",
      "functionDoc": "Create a data array in blocks layout.\n\u003cp\u003e\nThis method can be used to create the array argument of the {@link\n#BlockRealMatrix(int, int, double[][], boolean)} constructor.\n\u003c/p\u003e\n\n@param rows the number of rows in the new matrix\n@param columns the number of columns in the new matrix\n@return a new data array in blocks layout\n@see #toBlocksLayout(double[][])\n@see #BlockRealMatrix(int, int, double[][], boolean)\n",
      "diff": "",
      "extendedDetails": {}
    },
    "80b1e90b42a34856b61cec628fcea6633d1000cd": {
      "type": "Ybodychange",
      "commitMessage": "added FastMath and used it everywhere in replacement of java.util.Math\nthe unit tests have not been added yet (waiting for dfp library addition)\nJIRA: MATH-375\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@990658 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/29/10, 3:04 PM",
      "commitName": "80b1e90b42a34856b61cec628fcea6633d1000cd",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "8/10/10, 3:46 AM",
      "commitNameOld": "986597f52ce9c6c1ff13fb134b91696de6ec2796",
      "commitAuthorOld": "Gilles Sadowski",
      "daysBetweenCommits": 19.47,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "public static double[][] createBlocksLayout(final int rows, final int columns) {\n    final int blockRows \u003d (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\n    final int blockColumns \u003d (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;\n    final double[][] blocks \u003d new double[blockRows * blockColumns][];\n    int blockIndex \u003d 0;\n    for (int iBlock \u003d 0; iBlock \u003c blockRows; ++iBlock) {\n        final int pStart \u003d iBlock * BLOCK_SIZE;\n        final int pEnd \u003d FastMath.min(pStart + BLOCK_SIZE, rows);\n        final int iHeight \u003d pEnd - pStart;\n        for (int jBlock \u003d 0; jBlock \u003c blockColumns; ++jBlock) {\n            final int qStart \u003d jBlock * BLOCK_SIZE;\n            final int qEnd \u003d FastMath.min(qStart + BLOCK_SIZE, columns);\n            final int jWidth \u003d qEnd - qStart;\n            blocks[blockIndex] \u003d new double[iHeight * jWidth];\n            ++blockIndex;\n        }\n    }\n    return blocks;\n}",
      "path": "src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java",
      "functionStartLine": 267,
      "functionName": "createBlocksLayout",
      "functionAnnotation": "",
      "functionDoc": "Create a data array in blocks layout.\n\u003cp\u003e\nThis method can be used to create the array argument of the {@link\n#BlockRealMatrix(int, int, double[][], boolean)} constructor.\n\u003c/p\u003e\n\n@param rows the number of rows in the new matrix\n@param columns the number of columns in the new matrix\n@return a new data array in blocks layout\n@see #toBlocksLayout(double[][])\n@see #BlockRealMatrix(int, int, double[][], boolean)\n",
      "diff": "@@ -1,19 +1,19 @@\n public static double[][] createBlocksLayout(final int rows, final int columns) {\n     final int blockRows \u003d (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\n     final int blockColumns \u003d (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;\n     final double[][] blocks \u003d new double[blockRows * blockColumns][];\n     int blockIndex \u003d 0;\n     for (int iBlock \u003d 0; iBlock \u003c blockRows; ++iBlock) {\n         final int pStart \u003d iBlock * BLOCK_SIZE;\n-        final int pEnd \u003d Math.min(pStart + BLOCK_SIZE, rows);\n+        final int pEnd \u003d FastMath.min(pStart + BLOCK_SIZE, rows);\n         final int iHeight \u003d pEnd - pStart;\n         for (int jBlock \u003d 0; jBlock \u003c blockColumns; ++jBlock) {\n             final int qStart \u003d jBlock * BLOCK_SIZE;\n-            final int qEnd \u003d Math.min(qStart + BLOCK_SIZE, columns);\n+            final int qEnd \u003d FastMath.min(qStart + BLOCK_SIZE, columns);\n             final int jWidth \u003d qEnd - qStart;\n             blocks[blockIndex] \u003d new double[iHeight * jWidth];\n             ++blockIndex;\n         }\n     }\n     return blocks;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0905e8cf724b358277e219cbf1a06413faa48c9e": {
      "type": "Ybodychange",
      "commitMessage": "tighten checkstyle rules: declaring multiple variables in one statement is now forbidden\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@825919 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/16/09, 7:51 AM",
      "commitName": "0905e8cf724b358277e219cbf1a06413faa48c9e",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "9/6/09, 8:32 AM",
      "commitNameOld": "292e891aab4d737a83ebf786c02bf4003ae0442d",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 39.97,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "actualSource": "public static double[][] createBlocksLayout(final int rows, final int columns) {\n    final int blockRows \u003d (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\n    final int blockColumns \u003d (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;\n    final double[][] blocks \u003d new double[blockRows * blockColumns][];\n    int blockIndex \u003d 0;\n    for (int iBlock \u003d 0; iBlock \u003c blockRows; ++iBlock) {\n        final int pStart \u003d iBlock * BLOCK_SIZE;\n        final int pEnd \u003d Math.min(pStart + BLOCK_SIZE, rows);\n        final int iHeight \u003d pEnd - pStart;\n        for (int jBlock \u003d 0; jBlock \u003c blockColumns; ++jBlock) {\n            final int qStart \u003d jBlock * BLOCK_SIZE;\n            final int qEnd \u003d Math.min(qStart + BLOCK_SIZE, columns);\n            final int jWidth \u003d qEnd - qStart;\n            blocks[blockIndex] \u003d new double[iHeight * jWidth];\n            ++blockIndex;\n        }\n    }\n    return blocks;\n}",
      "path": "src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java",
      "functionStartLine": 265,
      "functionName": "createBlocksLayout",
      "functionAnnotation": "",
      "functionDoc": "Create a data array in blocks layout.\n\u003cp\u003e\nThis method can be used to create the array argument of the {@link\n#BlockRealMatrix(int, int, double[][], boolean)} constructor.\n\u003c/p\u003e\n\n@param rows the number of rows in the new matrix\n@param columns the number of columns in the new matrix\n@return a new data array in blocks layout\n@see #toBlocksLayout(double[][])\n@see #BlockRealMatrix(int, int, double[][], boolean)\n",
      "diff": "@@ -1,17 +1,19 @@\n public static double[][] createBlocksLayout(final int rows, final int columns) {\n     final int blockRows \u003d (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\n     final int blockColumns \u003d (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;\n     final double[][] blocks \u003d new double[blockRows * blockColumns][];\n-    for (int iBlock \u003d 0, blockIndex \u003d 0; iBlock \u003c blockRows; ++iBlock) {\n+    int blockIndex \u003d 0;\n+    for (int iBlock \u003d 0; iBlock \u003c blockRows; ++iBlock) {\n         final int pStart \u003d iBlock * BLOCK_SIZE;\n         final int pEnd \u003d Math.min(pStart + BLOCK_SIZE, rows);\n         final int iHeight \u003d pEnd - pStart;\n-        for (int jBlock \u003d 0; jBlock \u003c blockColumns; ++jBlock, ++blockIndex) {\n+        for (int jBlock \u003d 0; jBlock \u003c blockColumns; ++jBlock) {\n             final int qStart \u003d jBlock * BLOCK_SIZE;\n             final int qEnd \u003d Math.min(qStart + BLOCK_SIZE, columns);\n             final int jWidth \u003d qEnd - qStart;\n             blocks[blockIndex] \u003d new double[iHeight * jWidth];\n+            ++blockIndex;\n         }\n     }\n     return blocks;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d6a438e931412713e99624cf9ed74470f1040184": {
      "type": "Yfilerename",
      "commitMessage": "moved main java directory for compliance with maven standard directory layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@799870 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/1/09, 7:30 AM",
      "commitName": "d6a438e931412713e99624cf9ed74470f1040184",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "8/1/09, 7:23 AM",
      "commitNameOld": "2ad5ef61630be627f46ae1c266cf796f044bd4a8",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static double[][] createBlocksLayout(final int rows, final int columns) {\n    final int blockRows \u003d (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\n    final int blockColumns \u003d (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;\n    final double[][] blocks \u003d new double[blockRows * blockColumns][];\n    for (int iBlock \u003d 0, blockIndex \u003d 0; iBlock \u003c blockRows; ++iBlock) {\n        final int pStart \u003d iBlock * BLOCK_SIZE;\n        final int pEnd \u003d Math.min(pStart + BLOCK_SIZE, rows);\n        final int iHeight \u003d pEnd - pStart;\n        for (int jBlock \u003d 0; jBlock \u003c blockColumns; ++jBlock, ++blockIndex) {\n            final int qStart \u003d jBlock * BLOCK_SIZE;\n            final int qEnd \u003d Math.min(qStart + BLOCK_SIZE, columns);\n            final int jWidth \u003d qEnd - qStart;\n            blocks[blockIndex] \u003d new double[iHeight * jWidth];\n        }\n    }\n    return blocks;\n}",
      "path": "src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java",
      "functionStartLine": 260,
      "functionName": "createBlocksLayout",
      "functionAnnotation": "",
      "functionDoc": "Create a data array in blocks layout.\n\u003cp\u003e\nThis method can be used to create the array argument of the {@link\n#BlockRealMatrix(int, int, double[][], boolean)} constructor.\n\u003c/p\u003e\n\n@param rows the number of rows in the new matrix\n@param columns the number of columns in the new matrix\n@return a new data array in blocks layout\n@see #toBlocksLayout(double[][])\n@see #BlockRealMatrix(int, int, double[][], boolean)\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/math/linear/BlockRealMatrix.java",
        "newPath": "src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java"
      }
    },
    "62bed05b1491a68d1416392e3e4cb2665f995010": {
      "type": "Ydocchange",
      "commitMessage": "removed remaining references to DenseXxx{Matrix/Vector}\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@783741 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/11/09, 5:35 AM",
      "commitName": "62bed05b1491a68d1416392e3e4cb2665f995010",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "6/11/09, 1:54 AM",
      "commitNameOld": "dbae4b01341d9d72e52d1e07a15d5023deca3d92",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 0.15,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static double[][] createBlocksLayout(final int rows, final int columns) {\n    final int blockRows \u003d (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\n    final int blockColumns \u003d (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;\n    final double[][] blocks \u003d new double[blockRows * blockColumns][];\n    for (int iBlock \u003d 0, blockIndex \u003d 0; iBlock \u003c blockRows; ++iBlock) {\n        final int pStart \u003d iBlock * BLOCK_SIZE;\n        final int pEnd \u003d Math.min(pStart + BLOCK_SIZE, rows);\n        final int iHeight \u003d pEnd - pStart;\n        for (int jBlock \u003d 0; jBlock \u003c blockColumns; ++jBlock, ++blockIndex) {\n            final int qStart \u003d jBlock * BLOCK_SIZE;\n            final int qEnd \u003d Math.min(qStart + BLOCK_SIZE, columns);\n            final int jWidth \u003d qEnd - qStart;\n            blocks[blockIndex] \u003d new double[iHeight * jWidth];\n        }\n    }\n    return blocks;\n}",
      "path": "src/java/org/apache/commons/math/linear/BlockRealMatrix.java",
      "functionStartLine": 260,
      "functionName": "createBlocksLayout",
      "functionAnnotation": "",
      "functionDoc": "Create a data array in blocks layout.\n\u003cp\u003e\nThis method can be used to create the array argument of the {@link\n#BlockRealMatrix(int, int, double[][], boolean)} constructor.\n\u003c/p\u003e\n\n@param rows the number of rows in the new matrix\n@param columns the number of columns in the new matrix\n@return a new data array in blocks layout\n@see #toBlocksLayout(double[][])\n@see #BlockRealMatrix(int, int, double[][], boolean)\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Create a data array in blocks layout.\n\u003cp\u003e\nThis method can be used to create the array argument of the {@link\nBlockRealMatrix#DenseRealMatrix(int, int, double[][], boolean)} constructor.\n\u003c/p\u003e\n\n@param rows the number of rows in the new matrix\n@param columns the number of columns in the new matrix\n@return a new data array in blocks layout\n@see #toBlocksLayout(double[][])\n@see #BlockRealMatrix(int, int, double[][], boolean)\n",
        "newValue": "Create a data array in blocks layout.\n\u003cp\u003e\nThis method can be used to create the array argument of the {@link\n#BlockRealMatrix(int, int, double[][], boolean)} constructor.\n\u003c/p\u003e\n\n@param rows the number of rows in the new matrix\n@param columns the number of columns in the new matrix\n@return a new data array in blocks layout\n@see #toBlocksLayout(double[][])\n@see #BlockRealMatrix(int, int, double[][], boolean)\n"
      }
    },
    "22f406556284019a8d5eb2dfcce01f2feef947ae": {
      "type": "Ymultichange(Yfilerename,Ydocchange)",
      "commitMessage": "renamed Dense{Real/Field}Matrix into Block{Real/Field}Matrix\nas suggested by Phil in http://markmail.org/message/iibgiz4bsv6hjjvh\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@783678 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/11/09, 1:05 AM",
      "commitName": "22f406556284019a8d5eb2dfcce01f2feef947ae",
      "commitAuthor": "Luc Maisonobe",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "renamed Dense{Real/Field}Matrix into Block{Real/Field}Matrix\nas suggested by Phil in http://markmail.org/message/iibgiz4bsv6hjjvh\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@783678 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "6/11/09, 1:05 AM",
          "commitName": "22f406556284019a8d5eb2dfcce01f2feef947ae",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "6/10/09, 2:44 PM",
          "commitNameOld": "9494baedb5ca3346ce6817f5bf03c73918f91d8b",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 0.43,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static double[][] createBlocksLayout(final int rows, final int columns) {\n    final int blockRows \u003d (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\n    final int blockColumns \u003d (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;\n    final double[][] blocks \u003d new double[blockRows * blockColumns][];\n    for (int iBlock \u003d 0, blockIndex \u003d 0; iBlock \u003c blockRows; ++iBlock) {\n        final int pStart \u003d iBlock * BLOCK_SIZE;\n        final int pEnd \u003d Math.min(pStart + BLOCK_SIZE, rows);\n        final int iHeight \u003d pEnd - pStart;\n        for (int jBlock \u003d 0; jBlock \u003c blockColumns; ++jBlock, ++blockIndex) {\n            final int qStart \u003d jBlock * BLOCK_SIZE;\n            final int qEnd \u003d Math.min(qStart + BLOCK_SIZE, columns);\n            final int jWidth \u003d qEnd - qStart;\n            blocks[blockIndex] \u003d new double[iHeight * jWidth];\n        }\n    }\n    return blocks;\n}",
          "path": "src/java/org/apache/commons/math/linear/BlockRealMatrix.java",
          "functionStartLine": 260,
          "functionName": "createBlocksLayout",
          "functionAnnotation": "",
          "functionDoc": "Create a data array in blocks layout.\n\u003cp\u003e\nThis method can be used to create the array argument of the {@link\nBlockRealMatrix#DenseRealMatrix(int, int, double[][], boolean)} constructor.\n\u003c/p\u003e\n\n@param rows the number of rows in the new matrix\n@param columns the number of columns in the new matrix\n@return a new data array in blocks layout\n@see #toBlocksLayout(double[][])\n@see #BlockRealMatrix(int, int, double[][], boolean)\n",
          "diff": "",
          "extendedDetails": {
            "oldPath": "src/java/org/apache/commons/math/linear/DenseRealMatrix.java",
            "newPath": "src/java/org/apache/commons/math/linear/BlockRealMatrix.java"
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "renamed Dense{Real/Field}Matrix into Block{Real/Field}Matrix\nas suggested by Phil in http://markmail.org/message/iibgiz4bsv6hjjvh\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@783678 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "6/11/09, 1:05 AM",
          "commitName": "22f406556284019a8d5eb2dfcce01f2feef947ae",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "6/10/09, 2:44 PM",
          "commitNameOld": "9494baedb5ca3346ce6817f5bf03c73918f91d8b",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 0.43,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static double[][] createBlocksLayout(final int rows, final int columns) {\n    final int blockRows \u003d (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\n    final int blockColumns \u003d (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;\n    final double[][] blocks \u003d new double[blockRows * blockColumns][];\n    for (int iBlock \u003d 0, blockIndex \u003d 0; iBlock \u003c blockRows; ++iBlock) {\n        final int pStart \u003d iBlock * BLOCK_SIZE;\n        final int pEnd \u003d Math.min(pStart + BLOCK_SIZE, rows);\n        final int iHeight \u003d pEnd - pStart;\n        for (int jBlock \u003d 0; jBlock \u003c blockColumns; ++jBlock, ++blockIndex) {\n            final int qStart \u003d jBlock * BLOCK_SIZE;\n            final int qEnd \u003d Math.min(qStart + BLOCK_SIZE, columns);\n            final int jWidth \u003d qEnd - qStart;\n            blocks[blockIndex] \u003d new double[iHeight * jWidth];\n        }\n    }\n    return blocks;\n}",
          "path": "src/java/org/apache/commons/math/linear/BlockRealMatrix.java",
          "functionStartLine": 260,
          "functionName": "createBlocksLayout",
          "functionAnnotation": "",
          "functionDoc": "Create a data array in blocks layout.\n\u003cp\u003e\nThis method can be used to create the array argument of the {@link\nBlockRealMatrix#DenseRealMatrix(int, int, double[][], boolean)} constructor.\n\u003c/p\u003e\n\n@param rows the number of rows in the new matrix\n@param columns the number of columns in the new matrix\n@return a new data array in blocks layout\n@see #toBlocksLayout(double[][])\n@see #BlockRealMatrix(int, int, double[][], boolean)\n",
          "diff": "",
          "extendedDetails": {
            "oldValue": "Create a data array in blocks layout.\n\u003cp\u003e\nThis method can be used to create the array argument of the {@link\nDenseRealMatrix#DenseRealMatrix(int, int, double[][], boolean)} constructor.\n\u003c/p\u003e\n\n@param rows the number of rows in the new matrix\n@param columns the number of columns in the new matrix\n@return a new data array in blocks layout\n@see #toBlocksLayout(double[][])\n@see #DenseRealMatrix(int, int, double[][], boolean)\n",
            "newValue": "Create a data array in blocks layout.\n\u003cp\u003e\nThis method can be used to create the array argument of the {@link\nBlockRealMatrix#DenseRealMatrix(int, int, double[][], boolean)} constructor.\n\u003c/p\u003e\n\n@param rows the number of rows in the new matrix\n@param columns the number of columns in the new matrix\n@return a new data array in blocks layout\n@see #toBlocksLayout(double[][])\n@see #BlockRealMatrix(int, int, double[][], boolean)\n"
          }
        }
      ]
    },
    "e59d9198494a6a6dd30e53d48c25da49688dbbac": {
      "type": "Yexceptionschange",
      "commitMessage": "removed unused exception clause\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@731339 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/4/09, 11:12 AM",
      "commitName": "e59d9198494a6a6dd30e53d48c25da49688dbbac",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "1/4/09, 8:14 AM",
      "commitNameOld": "aeb7693baf05f3840fa2b8cc94a61ff1bb26372a",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 0.12,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "public static double[][] createBlocksLayout(final int rows, final int columns) {\n    final int blockRows \u003d (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\n    final int blockColumns \u003d (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;\n    final double[][] blocks \u003d new double[blockRows * blockColumns][];\n    for (int iBlock \u003d 0, blockIndex \u003d 0; iBlock \u003c blockRows; ++iBlock) {\n        final int pStart \u003d iBlock * BLOCK_SIZE;\n        final int pEnd \u003d Math.min(pStart + BLOCK_SIZE, rows);\n        final int iHeight \u003d pEnd - pStart;\n        for (int jBlock \u003d 0; jBlock \u003c blockColumns; ++jBlock, ++blockIndex) {\n            final int qStart \u003d jBlock * BLOCK_SIZE;\n            final int qEnd \u003d Math.min(qStart + BLOCK_SIZE, columns);\n            final int jWidth \u003d qEnd - qStart;\n            blocks[blockIndex] \u003d new double[iHeight * jWidth];\n        }\n    }\n    return blocks;\n}",
      "path": "src/java/org/apache/commons/math/linear/DenseRealMatrix.java",
      "functionStartLine": 262,
      "functionName": "createBlocksLayout",
      "functionAnnotation": "",
      "functionDoc": "Create a data array in blocks layout.\n\u003cp\u003e\nThis method can be used to create the array argument of the {@link\nDenseRealMatrix#DenseRealMatrix(int, int, double[][], boolean)} constructor.\n\u003c/p\u003e\n\n@param rows the number of rows in the new matrix\n@param columns the number of columns in the new matrix\n@return a new data array in blocks layout\n@see #toBlocksLayout(double[][])\n@see #DenseRealMatrix(int, int, double[][], boolean)\n",
      "diff": "@@ -1,17 +1,17 @@\n-public static double[][] createBlocksLayout(final int rows, final int columns) throws IllegalArgumentException {\n+public static double[][] createBlocksLayout(final int rows, final int columns) {\n     final int blockRows \u003d (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\n     final int blockColumns \u003d (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;\n     final double[][] blocks \u003d new double[blockRows * blockColumns][];\n     for (int iBlock \u003d 0, blockIndex \u003d 0; iBlock \u003c blockRows; ++iBlock) {\n         final int pStart \u003d iBlock * BLOCK_SIZE;\n         final int pEnd \u003d Math.min(pStart + BLOCK_SIZE, rows);\n         final int iHeight \u003d pEnd - pStart;\n         for (int jBlock \u003d 0; jBlock \u003c blockColumns; ++jBlock, ++blockIndex) {\n             final int qStart \u003d jBlock * BLOCK_SIZE;\n             final int qEnd \u003d Math.min(qStart + BLOCK_SIZE, columns);\n             final int jWidth \u003d qEnd - qStart;\n             blocks[blockIndex] \u003d new double[iHeight * jWidth];\n         }\n     }\n     return blocks;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[IllegalArgumentException]",
        "newValue": "[]"
      }
    },
    "6b7fe27d4beca91a3f38247bcd6d6a73f43e744e": {
      "type": "Yintroduced",
      "commitMessage": "added a static method createBlocksLayout to prepare array before constructing the matrix\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@730838 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/2/09, 12:21 PM",
      "commitName": "6b7fe27d4beca91a3f38247bcd6d6a73f43e744e",
      "commitAuthor": "Luc Maisonobe",
      "diff": "@@ -0,0 +1,17 @@\n+public static double[][] createBlocksLayout(final int rows, final int columns) throws IllegalArgumentException {\n+    final int blockRows \u003d (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\n+    final int blockColumns \u003d (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;\n+    final double[][] blocks \u003d new double[blockRows * blockColumns][];\n+    for (int iBlock \u003d 0, blockIndex \u003d 0; iBlock \u003c blockRows; ++iBlock) {\n+        final int pStart \u003d iBlock * BLOCK_SIZE;\n+        final int pEnd \u003d Math.min(pStart + BLOCK_SIZE, rows);\n+        final int iHeight \u003d pEnd - pStart;\n+        for (int jBlock \u003d 0; jBlock \u003c blockColumns; ++jBlock, ++blockIndex) {\n+            final int qStart \u003d jBlock * BLOCK_SIZE;\n+            final int qEnd \u003d Math.min(qStart + BLOCK_SIZE, columns);\n+            final int jWidth \u003d qEnd - qStart;\n+            blocks[blockIndex] \u003d new double[iHeight * jWidth];\n+        }\n+    }\n+    return blocks;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public static double[][] createBlocksLayout(final int rows, final int columns) throws IllegalArgumentException {\n    final int blockRows \u003d (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\n    final int blockColumns \u003d (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;\n    final double[][] blocks \u003d new double[blockRows * blockColumns][];\n    for (int iBlock \u003d 0, blockIndex \u003d 0; iBlock \u003c blockRows; ++iBlock) {\n        final int pStart \u003d iBlock * BLOCK_SIZE;\n        final int pEnd \u003d Math.min(pStart + BLOCK_SIZE, rows);\n        final int iHeight \u003d pEnd - pStart;\n        for (int jBlock \u003d 0; jBlock \u003c blockColumns; ++jBlock, ++blockIndex) {\n            final int qStart \u003d jBlock * BLOCK_SIZE;\n            final int qEnd \u003d Math.min(qStart + BLOCK_SIZE, columns);\n            final int jWidth \u003d qEnd - qStart;\n            blocks[blockIndex] \u003d new double[iHeight * jWidth];\n        }\n    }\n    return blocks;\n}",
      "path": "src/java/org/apache/commons/math/linear/DenseRealMatrix.java",
      "functionStartLine": 262,
      "functionName": "createBlocksLayout",
      "functionAnnotation": "",
      "functionDoc": "Create a data array in blocks layout.\n\u003cp\u003e\nThis method can be used to create the array argument of the {@link\nDenseRealMatrix#DenseRealMatrix(int, int, double[][], boolean)} constructor.\n\u003c/p\u003e\n\n@param rows the number of rows in the new matrix\n@param columns the number of columns in the new matrix\n@return a new data array in blocks layout\n@see #toBlocksLayout(double[][])\n@see #DenseRealMatrix(int, int, double[][], boolean)\n"
    }
  }
}