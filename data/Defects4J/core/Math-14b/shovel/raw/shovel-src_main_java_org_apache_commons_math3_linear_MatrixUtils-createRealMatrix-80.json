{
  "origin": "codeshovel",
  "repositoryName": "Math-14b",
  "repositoryPath": "/tmp/Math-14b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MatrixUtils.java",
  "functionName": "createRealMatrix",
  "functionId": "createRealMatrix___rows-int(modifiers-final)__columns-int(modifiers-final)",
  "sourceFilePath": "src/main/java/org/apache/commons/math3/linear/MatrixUtils.java",
  "functionAnnotation": "",
  "functionDoc": "Returns a {@link RealMatrix} with specified dimensions.\n\u003cp\u003eThe type of matrix returned depends on the dimension. Below\n2\u003csup\u003e12\u003c/sup\u003e elements (i.e. 4096 elements or 64\u0026times;64 for a\nsquare matrix) which can be stored in a 32kB array, a {@link\nArray2DRowRealMatrix} instance is built. Above this threshold a {@link\nBlockRealMatrix} instance is built.\u003c/p\u003e\n\u003cp\u003eThe matrix elements are all set to 0.0.\u003c/p\u003e\n\n@param rows number of rows of the matrix\n@param columns number of columns of the matrix\n@return RealMatrix with specified dimensions\n@see #createRealMatrix(double[][])\n",
  "functionStartLine": 80,
  "functionEndLine": 83,
  "numCommitsSeen": 54,
  "timeTaken": 13319,
  "changeHistory": [
    "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd",
    "d6a438e931412713e99624cf9ed74470f1040184",
    "dbae4b01341d9d72e52d1e07a15d5023deca3d92",
    "3325ab51b3a0037ddd7dad8ab2269edcabad8fa0",
    "415479d76a52bb1cdd482894e20d91f629e1df8a",
    "7b37de8d8ce8145f933537db67070dc91e19d86b"
  ],
  "changeHistoryShort": {
    "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd": "Ymovefromfile",
    "d6a438e931412713e99624cf9ed74470f1040184": "Yfilerename",
    "dbae4b01341d9d72e52d1e07a15d5023deca3d92": "Ymultichange(Ybodychange,Ydocchange)",
    "3325ab51b3a0037ddd7dad8ab2269edcabad8fa0": "Ymultichange(Ybodychange,Ydocchange)",
    "415479d76a52bb1cdd482894e20d91f629e1df8a": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "7b37de8d8ce8145f933537db67070dc91e19d86b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd": {
      "type": "Ymovefromfile",
      "commitMessage": "MATH-444\nBase package name change: \"o.a.c.math\" -\u003e \"o.a.c.math3\"\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1244107 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/14/12, 8:17 AM",
      "commitName": "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd",
      "commitAuthor": "Gilles Sadowski",
      "commitDateOld": "2/14/12, 6:34 AM",
      "commitNameOld": "53257329dd394be1333b38bae787bf0cf19dc900",
      "commitAuthorOld": "Gilles Sadowski",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static RealMatrix createRealMatrix(final int rows, final int columns) {\n    return (rows * columns \u003c\u003d 4096) ? new Array2DRowRealMatrix(rows, columns) : new BlockRealMatrix(rows, columns);\n}",
      "path": "src/main/java/org/apache/commons/math3/linear/MatrixUtils.java",
      "functionStartLine": 69,
      "functionName": "createRealMatrix",
      "functionAnnotation": "",
      "functionDoc": "Returns a {@link RealMatrix} with specified dimensions.\n\u003cp\u003eThe type of matrix returned depends on the dimension. Below\n2\u003csup\u003e12\u003c/sup\u003e elements (i.e. 4096 elements or 64\u0026times;64 for a\nsquare matrix) which can be stored in a 32kB array, a {@link\nArray2DRowRealMatrix} instance is built. Above this threshold a {@link\nBlockRealMatrix} instance is built.\u003c/p\u003e\n\u003cp\u003eThe matrix elements are all set to 0.0.\u003c/p\u003e\n\n@param rows number of rows of the matrix\n@param columns number of columns of the matrix\n@return RealMatrix with specified dimensions\n@see #createRealMatrix(double[][])\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/main/java/org/apache/commons/math/linear/MatrixUtils.java",
        "newPath": "src/main/java/org/apache/commons/math3/linear/MatrixUtils.java",
        "oldMethodName": "createRealMatrix",
        "newMethodName": "createRealMatrix"
      }
    },
    "d6a438e931412713e99624cf9ed74470f1040184": {
      "type": "Yfilerename",
      "commitMessage": "moved main java directory for compliance with maven standard directory layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@799870 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/1/09, 7:30 AM",
      "commitName": "d6a438e931412713e99624cf9ed74470f1040184",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "8/1/09, 7:23 AM",
      "commitNameOld": "2ad5ef61630be627f46ae1c266cf796f044bd4a8",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static RealMatrix createRealMatrix(final int rows, final int columns) {\n    return (rows * columns \u003c\u003d 4096) ? new Array2DRowRealMatrix(rows, columns) : new BlockRealMatrix(rows, columns);\n}",
      "path": "src/main/java/org/apache/commons/math/linear/MatrixUtils.java",
      "functionStartLine": 60,
      "functionName": "createRealMatrix",
      "functionAnnotation": "",
      "functionDoc": "Returns a {@link RealMatrix} with specified dimensions.\n\u003cp\u003eThe type of matrix returned depends on the dimension. Below\n2\u003csup\u003e12\u003c/sup\u003e elements (i.e. 4096 elements or 64\u0026times;64 for a\nsquare matrix) which can be stored in a 32kB array, a {@link\nArray2DRowRealMatrix} instance is built. Above this threshold a {@link\nBlockRealMatrix} instance is built.\u003c/p\u003e\n\u003cp\u003eThe matrix elements are all set to 0.0.\u003c/p\u003e\n\n@param rows number of rows of the matrix\n@param columns number of columns of the matrix\n@return RealMatrix with specified dimensions\n@see #createRealMatrix(double[][])\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/math/linear/MatrixUtils.java",
        "newPath": "src/main/java/org/apache/commons/math/linear/MatrixUtils.java"
      }
    },
    "dbae4b01341d9d72e52d1e07a15d5023deca3d92": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "renamed RealMatrixImpl, RealVectorImpl, FieldMatrixImpl and FieldVectorImpl\ninto Array2DRowRealMatrix, ArrayRealVector, Array2DRowFieldMatrix and ArrayFieldVector\nas suggested by Sam in http://markmail.org/message/hh37ivxpzaoapekj\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@783702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/11/09, 1:54 AM",
      "commitName": "dbae4b01341d9d72e52d1e07a15d5023deca3d92",
      "commitAuthor": "Luc Maisonobe",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "renamed RealMatrixImpl, RealVectorImpl, FieldMatrixImpl and FieldVectorImpl\ninto Array2DRowRealMatrix, ArrayRealVector, Array2DRowFieldMatrix and ArrayFieldVector\nas suggested by Sam in http://markmail.org/message/hh37ivxpzaoapekj\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@783702 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "6/11/09, 1:54 AM",
          "commitName": "dbae4b01341d9d72e52d1e07a15d5023deca3d92",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "6/11/09, 1:06 AM",
          "commitNameOld": "3325ab51b3a0037ddd7dad8ab2269edcabad8fa0",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static RealMatrix createRealMatrix(final int rows, final int columns) {\n    return (rows * columns \u003c\u003d 4096) ? new Array2DRowRealMatrix(rows, columns) : new BlockRealMatrix(rows, columns);\n}",
          "path": "src/java/org/apache/commons/math/linear/MatrixUtils.java",
          "functionStartLine": 60,
          "functionName": "createRealMatrix",
          "functionAnnotation": "",
          "functionDoc": "Returns a {@link RealMatrix} with specified dimensions.\n\u003cp\u003eThe type of matrix returned depends on the dimension. Below\n2\u003csup\u003e12\u003c/sup\u003e elements (i.e. 4096 elements or 64\u0026times;64 for a\nsquare matrix) which can be stored in a 32kB array, a {@link\nArray2DRowRealMatrix} instance is built. Above this threshold a {@link\nBlockRealMatrix} instance is built.\u003c/p\u003e\n\u003cp\u003eThe matrix elements are all set to 0.0.\u003c/p\u003e\n\n@param rows number of rows of the matrix\n@param columns number of columns of the matrix\n@return RealMatrix with specified dimensions\n@see #createRealMatrix(double[][])\n",
          "diff": "@@ -1,3 +1,3 @@\n public static RealMatrix createRealMatrix(final int rows, final int columns) {\n-    return (rows * columns \u003c\u003d 4096) ? new RealMatrixImpl(rows, columns) : new BlockRealMatrix(rows, columns);\n+    return (rows * columns \u003c\u003d 4096) ? new Array2DRowRealMatrix(rows, columns) : new BlockRealMatrix(rows, columns);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "renamed RealMatrixImpl, RealVectorImpl, FieldMatrixImpl and FieldVectorImpl\ninto Array2DRowRealMatrix, ArrayRealVector, Array2DRowFieldMatrix and ArrayFieldVector\nas suggested by Sam in http://markmail.org/message/hh37ivxpzaoapekj\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@783702 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "6/11/09, 1:54 AM",
          "commitName": "dbae4b01341d9d72e52d1e07a15d5023deca3d92",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "6/11/09, 1:06 AM",
          "commitNameOld": "3325ab51b3a0037ddd7dad8ab2269edcabad8fa0",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static RealMatrix createRealMatrix(final int rows, final int columns) {\n    return (rows * columns \u003c\u003d 4096) ? new Array2DRowRealMatrix(rows, columns) : new BlockRealMatrix(rows, columns);\n}",
          "path": "src/java/org/apache/commons/math/linear/MatrixUtils.java",
          "functionStartLine": 60,
          "functionName": "createRealMatrix",
          "functionAnnotation": "",
          "functionDoc": "Returns a {@link RealMatrix} with specified dimensions.\n\u003cp\u003eThe type of matrix returned depends on the dimension. Below\n2\u003csup\u003e12\u003c/sup\u003e elements (i.e. 4096 elements or 64\u0026times;64 for a\nsquare matrix) which can be stored in a 32kB array, a {@link\nArray2DRowRealMatrix} instance is built. Above this threshold a {@link\nBlockRealMatrix} instance is built.\u003c/p\u003e\n\u003cp\u003eThe matrix elements are all set to 0.0.\u003c/p\u003e\n\n@param rows number of rows of the matrix\n@param columns number of columns of the matrix\n@return RealMatrix with specified dimensions\n@see #createRealMatrix(double[][])\n",
          "diff": "@@ -1,3 +1,3 @@\n public static RealMatrix createRealMatrix(final int rows, final int columns) {\n-    return (rows * columns \u003c\u003d 4096) ? new RealMatrixImpl(rows, columns) : new BlockRealMatrix(rows, columns);\n+    return (rows * columns \u003c\u003d 4096) ? new Array2DRowRealMatrix(rows, columns) : new BlockRealMatrix(rows, columns);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Returns a {@link RealMatrix} with specified dimensions.\n\u003cp\u003eThe type of matrix returned depends on the dimension. Below\n2\u003csup\u003e12\u003c/sup\u003e elements (i.e. 4096 elements or 64\u0026times;64 for a\nsquare matrix) which can be stored in a 32kB array, a {@link\nRealMatrixImpl} instance is built. Above this threshold a {@link\nBlockRealMatrix} instance is built.\u003c/p\u003e\n\u003cp\u003eThe matrix elements are all set to 0.0.\u003c/p\u003e\n\n@param rows number of rows of the matrix\n@param columns number of columns of the matrix\n@return RealMatrix with specified dimensions\n@see #createRealMatrix(double[][])\n",
            "newValue": "Returns a {@link RealMatrix} with specified dimensions.\n\u003cp\u003eThe type of matrix returned depends on the dimension. Below\n2\u003csup\u003e12\u003c/sup\u003e elements (i.e. 4096 elements or 64\u0026times;64 for a\nsquare matrix) which can be stored in a 32kB array, a {@link\nArray2DRowRealMatrix} instance is built. Above this threshold a {@link\nBlockRealMatrix} instance is built.\u003c/p\u003e\n\u003cp\u003eThe matrix elements are all set to 0.0.\u003c/p\u003e\n\n@param rows number of rows of the matrix\n@param columns number of columns of the matrix\n@return RealMatrix with specified dimensions\n@see #createRealMatrix(double[][])\n"
          }
        }
      ]
    },
    "3325ab51b3a0037ddd7dad8ab2269edcabad8fa0": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "switch the matrix type built by factory methods depending on the dimension\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@783680 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/11/09, 1:06 AM",
      "commitName": "3325ab51b3a0037ddd7dad8ab2269edcabad8fa0",
      "commitAuthor": "Luc Maisonobe",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "switch the matrix type built by factory methods depending on the dimension\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@783680 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "6/11/09, 1:06 AM",
          "commitName": "3325ab51b3a0037ddd7dad8ab2269edcabad8fa0",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "6/2/09, 2:02 PM",
          "commitNameOld": "d0c52c49b7efa5367b154443bba9910cb19e6419",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 8.46,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "actualSource": "public static RealMatrix createRealMatrix(final int rows, final int columns) {\n    return (rows * columns \u003c\u003d 4096) ? new RealMatrixImpl(rows, columns) : new BlockRealMatrix(rows, columns);\n}",
          "path": "src/java/org/apache/commons/math/linear/MatrixUtils.java",
          "functionStartLine": 60,
          "functionName": "createRealMatrix",
          "functionAnnotation": "",
          "functionDoc": "Returns a {@link RealMatrix} with specified dimensions.\n\u003cp\u003eThe type of matrix returned depends on the dimension. Below\n2\u003csup\u003e12\u003c/sup\u003e elements (i.e. 4096 elements or 64\u0026times;64 for a\nsquare matrix) which can be stored in a 32kB array, a {@link\nRealMatrixImpl} instance is built. Above this threshold a {@link\nBlockRealMatrix} instance is built.\u003c/p\u003e\n\u003cp\u003eThe matrix elements are all set to 0.0.\u003c/p\u003e\n\n@param rows number of rows of the matrix\n@param columns number of columns of the matrix\n@return RealMatrix with specified dimensions\n@see #createRealMatrix(double[][])\n",
          "diff": "@@ -1,3 +1,3 @@\n public static RealMatrix createRealMatrix(final int rows, final int columns) {\n-    return new DenseRealMatrix(rows, columns);\n+    return (rows * columns \u003c\u003d 4096) ? new RealMatrixImpl(rows, columns) : new BlockRealMatrix(rows, columns);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "switch the matrix type built by factory methods depending on the dimension\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@783680 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "6/11/09, 1:06 AM",
          "commitName": "3325ab51b3a0037ddd7dad8ab2269edcabad8fa0",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "6/2/09, 2:02 PM",
          "commitNameOld": "d0c52c49b7efa5367b154443bba9910cb19e6419",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 8.46,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "actualSource": "public static RealMatrix createRealMatrix(final int rows, final int columns) {\n    return (rows * columns \u003c\u003d 4096) ? new RealMatrixImpl(rows, columns) : new BlockRealMatrix(rows, columns);\n}",
          "path": "src/java/org/apache/commons/math/linear/MatrixUtils.java",
          "functionStartLine": 60,
          "functionName": "createRealMatrix",
          "functionAnnotation": "",
          "functionDoc": "Returns a {@link RealMatrix} with specified dimensions.\n\u003cp\u003eThe type of matrix returned depends on the dimension. Below\n2\u003csup\u003e12\u003c/sup\u003e elements (i.e. 4096 elements or 64\u0026times;64 for a\nsquare matrix) which can be stored in a 32kB array, a {@link\nRealMatrixImpl} instance is built. Above this threshold a {@link\nBlockRealMatrix} instance is built.\u003c/p\u003e\n\u003cp\u003eThe matrix elements are all set to 0.0.\u003c/p\u003e\n\n@param rows number of rows of the matrix\n@param columns number of columns of the matrix\n@return RealMatrix with specified dimensions\n@see #createRealMatrix(double[][])\n",
          "diff": "@@ -1,3 +1,3 @@\n public static RealMatrix createRealMatrix(final int rows, final int columns) {\n-    return new DenseRealMatrix(rows, columns);\n+    return (rows * columns \u003c\u003d 4096) ? new RealMatrixImpl(rows, columns) : new BlockRealMatrix(rows, columns);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Returns a {@link RealMatrix} with specified dimensions.\n\u003cp\u003eThe matrix elements are all set to 0.0.\u003c/p\u003e\n\n@param rows number of rows of the matrix\n@param columns number of columns of the matrix\n@return RealMatrix with specified dimensions\n@see #createRealMatrix(double[][])\n",
            "newValue": "Returns a {@link RealMatrix} with specified dimensions.\n\u003cp\u003eThe type of matrix returned depends on the dimension. Below\n2\u003csup\u003e12\u003c/sup\u003e elements (i.e. 4096 elements or 64\u0026times;64 for a\nsquare matrix) which can be stored in a 32kB array, a {@link\nRealMatrixImpl} instance is built. Above this threshold a {@link\nBlockRealMatrix} instance is built.\u003c/p\u003e\n\u003cp\u003eThe matrix elements are all set to 0.0.\u003c/p\u003e\n\n@param rows number of rows of the matrix\n@param columns number of columns of the matrix\n@return RealMatrix with specified dimensions\n@see #createRealMatrix(double[][])\n"
          }
        }
      ]
    },
    "415479d76a52bb1cdd482894e20d91f629e1df8a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "added a new DenseRealMatrix class intended to replace RealMatrixImpl\nthis class is more cache-friendly as it stores data from squares blocks\nin flattened arrays. This allows algorithms that need cross-direction\nnavigation like multiplication or transpose) to be more efficient on\nmodern processors.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@728185 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/19/08, 3:59 PM",
      "commitName": "415479d76a52bb1cdd482894e20d91f629e1df8a",
      "commitAuthor": "Luc Maisonobe",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "added a new DenseRealMatrix class intended to replace RealMatrixImpl\nthis class is more cache-friendly as it stores data from squares blocks\nin flattened arrays. This allows algorithms that need cross-direction\nnavigation like multiplication or transpose) to be more efficient on\nmodern processors.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@728185 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/19/08, 3:59 PM",
          "commitName": "415479d76a52bb1cdd482894e20d91f629e1df8a",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "8/3/08, 9:12 AM",
          "commitNameOld": "7ea01087e9df3ee46c68ea8f6cf92de9b00a9a33",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 138.32,
          "commitsBetweenForRepo": 103,
          "commitsBetweenForFile": 1,
          "actualSource": "public static RealMatrix createRealMatrix(final int rows, final int columns) {\n    return new DenseRealMatrix(rows, columns);\n}",
          "path": "src/java/org/apache/commons/math/linear/MatrixUtils.java",
          "functionStartLine": 45,
          "functionName": "createRealMatrix",
          "functionAnnotation": "",
          "functionDoc": "Returns a {@link RealMatrix} with specified dimensions.\n\u003cp\u003eThe matrix elements are all set to 0.0.\u003c/p\u003e\n\n@param rows number of rows of the matrix\n@param columns number of columns of the matrix\n@return RealMatrix with specified dimensions\n@see #createRealMatrix(double[][])\n",
          "diff": "@@ -1,3 +1,3 @@\n-public static RealMatrix createRealMatrix(double[][] data, boolean copyArray) {\n-    return new RealMatrixImpl(data, copyArray);\n+public static RealMatrix createRealMatrix(final int rows, final int columns) {\n+    return new DenseRealMatrix(rows, columns);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[data-double[][], copyArray-boolean]",
            "newValue": "[rows-int(modifiers-final), columns-int(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "added a new DenseRealMatrix class intended to replace RealMatrixImpl\nthis class is more cache-friendly as it stores data from squares blocks\nin flattened arrays. This allows algorithms that need cross-direction\nnavigation like multiplication or transpose) to be more efficient on\nmodern processors.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@728185 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/19/08, 3:59 PM",
          "commitName": "415479d76a52bb1cdd482894e20d91f629e1df8a",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "8/3/08, 9:12 AM",
          "commitNameOld": "7ea01087e9df3ee46c68ea8f6cf92de9b00a9a33",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 138.32,
          "commitsBetweenForRepo": 103,
          "commitsBetweenForFile": 1,
          "actualSource": "public static RealMatrix createRealMatrix(final int rows, final int columns) {\n    return new DenseRealMatrix(rows, columns);\n}",
          "path": "src/java/org/apache/commons/math/linear/MatrixUtils.java",
          "functionStartLine": 45,
          "functionName": "createRealMatrix",
          "functionAnnotation": "",
          "functionDoc": "Returns a {@link RealMatrix} with specified dimensions.\n\u003cp\u003eThe matrix elements are all set to 0.0.\u003c/p\u003e\n\n@param rows number of rows of the matrix\n@param columns number of columns of the matrix\n@return RealMatrix with specified dimensions\n@see #createRealMatrix(double[][])\n",
          "diff": "@@ -1,3 +1,3 @@\n-public static RealMatrix createRealMatrix(double[][] data, boolean copyArray) {\n-    return new RealMatrixImpl(data, copyArray);\n+public static RealMatrix createRealMatrix(final int rows, final int columns) {\n+    return new DenseRealMatrix(rows, columns);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "added a new DenseRealMatrix class intended to replace RealMatrixImpl\nthis class is more cache-friendly as it stores data from squares blocks\nin flattened arrays. This allows algorithms that need cross-direction\nnavigation like multiplication or transpose) to be more efficient on\nmodern processors.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@728185 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/19/08, 3:59 PM",
          "commitName": "415479d76a52bb1cdd482894e20d91f629e1df8a",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "8/3/08, 9:12 AM",
          "commitNameOld": "7ea01087e9df3ee46c68ea8f6cf92de9b00a9a33",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 138.32,
          "commitsBetweenForRepo": 103,
          "commitsBetweenForFile": 1,
          "actualSource": "public static RealMatrix createRealMatrix(final int rows, final int columns) {\n    return new DenseRealMatrix(rows, columns);\n}",
          "path": "src/java/org/apache/commons/math/linear/MatrixUtils.java",
          "functionStartLine": 45,
          "functionName": "createRealMatrix",
          "functionAnnotation": "",
          "functionDoc": "Returns a {@link RealMatrix} with specified dimensions.\n\u003cp\u003eThe matrix elements are all set to 0.0.\u003c/p\u003e\n\n@param rows number of rows of the matrix\n@param columns number of columns of the matrix\n@return RealMatrix with specified dimensions\n@see #createRealMatrix(double[][])\n",
          "diff": "@@ -1,3 +1,3 @@\n-public static RealMatrix createRealMatrix(double[][] data, boolean copyArray) {\n-    return new RealMatrixImpl(data, copyArray);\n+public static RealMatrix createRealMatrix(final int rows, final int columns) {\n+    return new DenseRealMatrix(rows, columns);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Returns a {@link RealMatrix} whose entries are the the values in the\nthe input array.\n\u003cp\u003eIf an array is built specially in order to be embedded in a\nRealMatrix and not used directly, the \u003ccode\u003ecopyArray\u003c/code\u003e may be\nset to \u003ccode\u003efalse\u003c/code. This will prevent the copying and improve\nperformance as no new array will be built and no data will be copied.\u003c/p\u003e\n\n@param data data for new matrix\n@param copyArray if true, the input array will be copied, otherwise\nit will be referenced\n@return RealMatrix containing the values of the array\n@throws IllegalArgumentException if \u003ccode\u003edata\u003c/code\u003e is not rectangular\n (not all rows have the same length) or empty\n@throws NullPointerException if \u003ccode\u003edata\u003c/code\u003e is null\n@see #createRealMatrix(double[][])\n",
            "newValue": "Returns a {@link RealMatrix} with specified dimensions.\n\u003cp\u003eThe matrix elements are all set to 0.0.\u003c/p\u003e\n\n@param rows number of rows of the matrix\n@param columns number of columns of the matrix\n@return RealMatrix with specified dimensions\n@see #createRealMatrix(double[][])\n"
          }
        }
      ]
    },
    "7b37de8d8ce8145f933537db67070dc91e19d86b": {
      "type": "Yintroduced",
      "commitMessage": "Improved linear RealMatrixImpl and BigMatrixImpl performances.\nThe main changes are the following ones:\n - use directly the storage array when possible for\n   diadic operations (add, subtract, multiply), as\n   suggested by Phil, this avoids the cost of the\n   generic getEntry method\n - replaced custom indices checks by simple use of\n   the JVM checks and ArrayIndexOutOfBoundException\n - put row arrays reference in local variables to\n   avoid multiple checks in double loops\n - use final variables where possible\n - removed unneeded array copying\n - added a constructor to build a matrix from an\n   array without copying it where it makes sense\n\nThe speed gain is about 3X for multiplication. Performances\nfor this operation are now on par with Jama.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/branches/MATH_2_0@662241 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/1/08, 9:22 AM",
      "commitName": "7b37de8d8ce8145f933537db67070dc91e19d86b",
      "commitAuthor": "Luc Maisonobe",
      "diff": "@@ -0,0 +1,3 @@\n+public static RealMatrix createRealMatrix(double[][] data, boolean copyArray) {\n+    return new RealMatrixImpl(data, copyArray);\n+}\n\\ No newline at end of file\n",
      "actualSource": "public static RealMatrix createRealMatrix(double[][] data, boolean copyArray) {\n    return new RealMatrixImpl(data, copyArray);\n}",
      "path": "src/java/org/apache/commons/math/linear/MatrixUtils.java",
      "functionStartLine": 68,
      "functionName": "createRealMatrix",
      "functionAnnotation": "",
      "functionDoc": "Returns a {@link RealMatrix} whose entries are the the values in the\nthe input array.\n\u003cp\u003eIf an array is built specially in order to be embedded in a\nRealMatrix and not used directly, the \u003ccode\u003ecopyArray\u003c/code\u003e may be\nset to \u003ccode\u003efalse\u003c/code. This will prevent the copying and improve\nperformance as no new array will be built and no data will be copied.\u003c/p\u003e\n\n@param data data for new matrix\n@param copyArray if true, the input array will be copied, otherwise\nit will be referenced\n@return RealMatrix containing the values of the array\n@throws IllegalArgumentException if \u003ccode\u003edata\u003c/code\u003e is not rectangular\n (not all rows have the same length) or empty\n@throws NullPointerException if \u003ccode\u003edata\u003c/code\u003e is null\n@see #createRealMatrix(double[][])\n"
    }
  }
}