{
  "origin": "codeshovel",
  "repositoryName": "Lang-13b",
  "repositoryPath": "/tmp/Lang-13b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SerializationUtils.java",
  "functionName": "serialize",
  "functionId": "serialize___obj-Serializable__outputStream-OutputStream",
  "sourceFilePath": "src/main/java/org/apache/commons/lang3/SerializationUtils.java",
  "functionAnnotation": "",
  "functionDoc": "\u003cp\u003eSerializes an {@code Object} to the specified stream.\u003c/p\u003e\n\n\u003cp\u003eThe stream will be closed once the object is written.\nThis avoids the need for a finally clause, and maybe also exception\nhandling, in the application code.\u003c/p\u003e\n\n\u003cp\u003eThe stream passed in is not buffered internally within this method.\nThis is the responsibility of your application if desired.\u003c/p\u003e\n\n@param obj the object to serialize to bytes, may be null\n@param outputStream the stream to write to, must not be null\n@throws IllegalArgumentException if {@code outputStream} is {@code null}\n@throws SerializationException (runtime) if the serialization fails\n",
  "functionStartLine": 128,
  "functionEndLine": 149,
  "numCommitsSeen": 34,
  "timeTaken": 1385,
  "changeHistory": [
    "5564fb57cf13dac2f052ceb3a7039a5d156fbe8d",
    "ffe79899ff05351f5cba5156273b0d32046be5f8",
    "3fce71c9c1e59a4b555ac4591b0cfa35ddc94e27",
    "b1686009b5494119575d43525b0829162ab79853",
    "586080851f6bca4d7aa84a7d307203ad8222407e",
    "f93aa9970a20d53e5db92196a4716b4550cb3042",
    "608c5159f2e6543809ce07432a51c0571c16bba0",
    "4d9bdc04b603a00c9335f53c34405dd46b2205ce",
    "97dfb3a031f9f5ec3e8d0ec49f0cc2c322f70ffc",
    "e90782608b401648c0128885fd70f500a4ecad2c",
    "30a5db352bf74d4f869f65cc320c63ccfd2f8cc7",
    "d23b22c78078ee7468e797e80188ae9508c0eee0"
  ],
  "changeHistoryShort": {
    "5564fb57cf13dac2f052ceb3a7039a5d156fbe8d": "Ybodychange",
    "ffe79899ff05351f5cba5156273b0d32046be5f8": "Yformatchange",
    "3fce71c9c1e59a4b555ac4591b0cfa35ddc94e27": "Ydocchange",
    "b1686009b5494119575d43525b0829162ab79853": "Yfilerename",
    "586080851f6bca4d7aa84a7d307203ad8222407e": "Yfilerename",
    "f93aa9970a20d53e5db92196a4716b4550cb3042": "Ybodychange",
    "608c5159f2e6543809ce07432a51c0571c16bba0": "Ybodychange",
    "4d9bdc04b603a00c9335f53c34405dd46b2205ce": "Ybodychange",
    "97dfb3a031f9f5ec3e8d0ec49f0cc2c322f70ffc": "Ymultichange(Ybodychange,Ydocchange)",
    "e90782608b401648c0128885fd70f500a4ecad2c": "Ydocchange",
    "30a5db352bf74d4f869f65cc320c63ccfd2f8cc7": "Ydocchange",
    "d23b22c78078ee7468e797e80188ae9508c0eee0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5564fb57cf13dac2f052ceb3a7039a5d156fbe8d": {
      "type": "Ybodychange",
      "commitMessage": "Adding NOPMD tags for various empty catch blocks\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1089736 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/6/11, 9:39 PM",
      "commitName": "5564fb57cf13dac2f052ceb3a7039a5d156fbe8d",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "4/4/11, 10:31 PM",
      "commitNameOld": "e434b8c01a4f4f8a6806aa14461e4ec9b71b14f7",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 1.96,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "actualSource": "public static void serialize(Serializable obj, OutputStream outputStream) {\n    if (outputStream \u003d\u003d null) {\n        throw new IllegalArgumentException(\"The OutputStream must not be null\");\n    }\n    ObjectOutputStream out \u003d null;\n    try {\n        out \u003d new ObjectOutputStream(outputStream);\n        out.writeObject(obj);\n    } catch (IOException ex) {\n        throw new SerializationException(ex);\n    } finally {\n        try {\n            if (out !\u003d null) {\n                out.close();\n            }\n        } catch (IOException ex) {\n        }\n    }\n}",
      "path": "src/main/java/org/apache/commons/lang3/SerializationUtils.java",
      "functionStartLine": 103,
      "functionName": "serialize",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eSerializes an {@code Object} to the specified stream.\u003c/p\u003e\n\n\u003cp\u003eThe stream will be closed once the object is written.\nThis avoids the need for a finally clause, and maybe also exception\nhandling, in the application code.\u003c/p\u003e\n\n\u003cp\u003eThe stream passed in is not buffered internally within this method.\nThis is the responsibility of your application if desired.\u003c/p\u003e\n\n@param obj the object to serialize to bytes, may be null\n@param outputStream the stream to write to, must not be null\n@throws IllegalArgumentException if {@code outputStream} is {@code null}\n@throws SerializationException (runtime) if the serialization fails\n",
      "diff": "",
      "extendedDetails": {}
    },
    "ffe79899ff05351f5cba5156273b0d32046be5f8": {
      "type": "Yformatchange",
      "commitMessage": "Checkstyle and trailing spaces.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1083207 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/19/11, 9:09 AM",
      "commitName": "ffe79899ff05351f5cba5156273b0d32046be5f8",
      "commitAuthor": "Oliver Heger",
      "commitDateOld": "3/4/11, 8:07 AM",
      "commitNameOld": "3fce71c9c1e59a4b555ac4591b0cfa35ddc94e27",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 15.0,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "actualSource": "public static void serialize(Serializable obj, OutputStream outputStream) {\n    if (outputStream \u003d\u003d null) {\n        throw new IllegalArgumentException(\"The OutputStream must not be null\");\n    }\n    ObjectOutputStream out \u003d null;\n    try {\n        out \u003d new ObjectOutputStream(outputStream);\n        out.writeObject(obj);\n    } catch (IOException ex) {\n        throw new SerializationException(ex);\n    } finally {\n        try {\n            if (out !\u003d null) {\n                out.close();\n            }\n        } catch (IOException ex) {\n        }\n    }\n}",
      "path": "src/main/java/org/apache/commons/lang3/SerializationUtils.java",
      "functionStartLine": 109,
      "functionName": "serialize",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eSerializes an {@code Object} to the specified stream.\u003c/p\u003e\n\n\u003cp\u003eThe stream will be closed once the object is written.\nThis avoids the need for a finally clause, and maybe also exception\nhandling, in the application code.\u003c/p\u003e\n\n\u003cp\u003eThe stream passed in is not buffered internally within this method.\nThis is the responsibility of your application if desired.\u003c/p\u003e\n\n@param obj the object to serialize to bytes, may be null\n@param outputStream the stream to write to, must not be null\n@throws IllegalArgumentException if {@code outputStream} is {@code null}\n@throws SerializationException (runtime) if the serialization fails\n",
      "diff": "",
      "extendedDetails": {}
    },
    "3fce71c9c1e59a4b555ac4591b0cfa35ddc94e27": {
      "type": "Ydocchange",
      "commitMessage": "Javadoc\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1078032 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/4/11, 8:07 AM",
      "commitName": "3fce71c9c1e59a4b555ac4591b0cfa35ddc94e27",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/25/10, 3:22 PM",
      "commitNameOld": "b2c32dc35e90124e62f0ddc32952fe5bbf8e656f",
      "commitAuthorOld": "Matthew Jason Benson",
      "daysBetweenCommits": 190.74,
      "commitsBetweenForRepo": 168,
      "commitsBetweenForFile": 1,
      "actualSource": "public static void serialize(Serializable obj, OutputStream outputStream) {\n    if (outputStream \u003d\u003d null) {\n        throw new IllegalArgumentException(\"The OutputStream must not be null\");\n    }\n    ObjectOutputStream out \u003d null;\n    try {\n        out \u003d new ObjectOutputStream(outputStream);\n        out.writeObject(obj);\n    } catch (IOException ex) {\n        throw new SerializationException(ex);\n    } finally {\n        try {\n            if (out !\u003d null) {\n                out.close();\n            }\n        } catch (IOException ex) {\n        }\n    }\n}",
      "path": "src/main/java/org/apache/commons/lang3/SerializationUtils.java",
      "functionStartLine": 108,
      "functionName": "serialize",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eSerializes an {@code Object} to the specified stream.\u003c/p\u003e\n\n\u003cp\u003eThe stream will be closed once the object is written.\nThis avoids the need for a finally clause, and maybe also exception\nhandling, in the application code.\u003c/p\u003e\n\n\u003cp\u003eThe stream passed in is not buffered internally within this method.\nThis is the responsibility of your application if desired.\u003c/p\u003e\n\n@param obj the object to serialize to bytes, may be null\n@param outputStream the stream to write to, must not be null\n@throws IllegalArgumentException if {@code outputStream} is {@code null}\n@throws SerializationException (runtime) if the serialization fails\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "\u003cp\u003eSerializes an \u003ccode\u003eObject\u003c/code\u003e to the specified stream.\u003c/p\u003e\n\n\u003cp\u003eThe stream will be closed once the object is written.\nThis avoids the need for a finally clause, and maybe also exception\nhandling, in the application code.\u003c/p\u003e\n\n\u003cp\u003eThe stream passed in is not buffered internally within this method.\nThis is the responsibility of your application if desired.\u003c/p\u003e\n\n@param obj the object to serialize to bytes, may be null\n@param outputStream the stream to write to, must not be null\n@throws IllegalArgumentException if \u003ccode\u003eoutputStream\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e\n@throws SerializationException (runtime) if the serialization fails\n",
        "newValue": "\u003cp\u003eSerializes an {@code Object} to the specified stream.\u003c/p\u003e\n\n\u003cp\u003eThe stream will be closed once the object is written.\nThis avoids the need for a finally clause, and maybe also exception\nhandling, in the application code.\u003c/p\u003e\n\n\u003cp\u003eThe stream passed in is not buffered internally within this method.\nThis is the responsibility of your application if desired.\u003c/p\u003e\n\n@param obj the object to serialize to bytes, may be null\n@param outputStream the stream to write to, must not be null\n@throws IllegalArgumentException if {@code outputStream} is {@code null}\n@throws SerializationException (runtime) if the serialization fails\n"
      }
    },
    "b1686009b5494119575d43525b0829162ab79853": {
      "type": "Yfilerename",
      "commitMessage": "Move main source to src/main/java\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@895322 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/2/10, 6:11 PM",
      "commitName": "b1686009b5494119575d43525b0829162ab79853",
      "commitAuthor": "Paul C. Benedict Jr",
      "commitDateOld": "1/2/10, 6:09 PM",
      "commitNameOld": "1f725a97e73edd27301e889408832b34a3d69e63",
      "commitAuthorOld": "Paul C. Benedict Jr",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static void serialize(Serializable obj, OutputStream outputStream) {\n    if (outputStream \u003d\u003d null) {\n        throw new IllegalArgumentException(\"The OutputStream must not be null\");\n    }\n    ObjectOutputStream out \u003d null;\n    try {\n        out \u003d new ObjectOutputStream(outputStream);\n        out.writeObject(obj);\n    } catch (IOException ex) {\n        throw new SerializationException(ex);\n    } finally {\n        try {\n            if (out !\u003d null) {\n                out.close();\n            }\n        } catch (IOException ex) {\n        }\n    }\n}",
      "path": "src/main/java/org/apache/commons/lang3/SerializationUtils.java",
      "functionStartLine": 100,
      "functionName": "serialize",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eSerializes an \u003ccode\u003eObject\u003c/code\u003e to the specified stream.\u003c/p\u003e\n\n\u003cp\u003eThe stream will be closed once the object is written.\nThis avoids the need for a finally clause, and maybe also exception\nhandling, in the application code.\u003c/p\u003e\n\n\u003cp\u003eThe stream passed in is not buffered internally within this method.\nThis is the responsibility of your application if desired.\u003c/p\u003e\n\n@param obj the object to serialize to bytes, may be null\n@param outputStream the stream to write to, must not be null\n@throws IllegalArgumentException if \u003ccode\u003eoutputStream\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e\n@throws SerializationException (runtime) if the serialization fails\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/lang3/SerializationUtils.java",
        "newPath": "src/main/java/org/apache/commons/lang3/SerializationUtils.java"
      }
    },
    "586080851f6bca4d7aa84a7d307203ad8222407e": {
      "type": "Yfilerename",
      "commitMessage": "Changing directory name from lang to lang3. Build will fail (probably) until Java code is changed in subsequent commit. LANG-563\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@889202 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/10/09, 3:33 AM",
      "commitName": "586080851f6bca4d7aa84a7d307203ad8222407e",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "12/10/09, 3:31 AM",
      "commitNameOld": "da479d635f66c1f82a1f858591cfb1b9941457ae",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static void serialize(Serializable obj, OutputStream outputStream) {\n    if (outputStream \u003d\u003d null) {\n        throw new IllegalArgumentException(\"The OutputStream must not be null\");\n    }\n    ObjectOutputStream out \u003d null;\n    try {\n        out \u003d new ObjectOutputStream(outputStream);\n        out.writeObject(obj);\n    } catch (IOException ex) {\n        throw new SerializationException(ex);\n    } finally {\n        try {\n            if (out !\u003d null) {\n                out.close();\n            }\n        } catch (IOException ex) {\n        }\n    }\n}",
      "path": "src/java/org/apache/commons/lang3/SerializationUtils.java",
      "functionStartLine": 100,
      "functionName": "serialize",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eSerializes an \u003ccode\u003eObject\u003c/code\u003e to the specified stream.\u003c/p\u003e\n\n\u003cp\u003eThe stream will be closed once the object is written.\nThis avoids the need for a finally clause, and maybe also exception\nhandling, in the application code.\u003c/p\u003e\n\n\u003cp\u003eThe stream passed in is not buffered internally within this method.\nThis is the responsibility of your application if desired.\u003c/p\u003e\n\n@param obj the object to serialize to bytes, may be null\n@param outputStream the stream to write to, must not be null\n@throws IllegalArgumentException if \u003ccode\u003eoutputStream\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e\n@throws SerializationException (runtime) if the serialization fails\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/lang/SerializationUtils.java",
        "newPath": "src/java/org/apache/commons/lang3/SerializationUtils.java"
      }
    },
    "f93aa9970a20d53e5db92196a4716b4550cb3042": {
      "type": "Ybodychange",
      "commitMessage": "removed empty statement from catch block that takes no action, using comment only to denote no action\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@209371 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/5/05, 6:10 PM",
      "commitName": "f93aa9970a20d53e5db92196a4716b4550cb3042",
      "commitAuthor": "Steven Caswell",
      "commitDateOld": "6/27/05, 1:24 PM",
      "commitNameOld": "608c5159f2e6543809ce07432a51c0571c16bba0",
      "commitAuthorOld": "Steven Caswell",
      "daysBetweenCommits": 8.2,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "public static void serialize(Serializable obj, OutputStream outputStream) {\n    if (outputStream \u003d\u003d null) {\n        throw new IllegalArgumentException(\"The OutputStream must not be null\");\n    }\n    ObjectOutputStream out \u003d null;\n    try {\n        out \u003d new ObjectOutputStream(outputStream);\n        out.writeObject(obj);\n    } catch (IOException ex) {\n        throw new SerializationException(ex);\n    } finally {\n        try {\n            if (out !\u003d null) {\n                out.close();\n            }\n        } catch (IOException ex) {\n        }\n    }\n}",
      "path": "src/java/org/apache/commons/lang/SerializationUtils.java",
      "functionStartLine": 99,
      "functionName": "serialize",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eSerializes an \u003ccode\u003eObject\u003c/code\u003e to the specified stream.\u003c/p\u003e\n\n\u003cp\u003eThe stream will be closed once the object is written.\nThis avoids the need for a finally clause, and maybe also exception\nhandling, in the application code.\u003c/p\u003e\n\n\u003cp\u003eThe stream passed in is not buffered internally within this method.\nThis is the responsibility of your application if desired.\u003c/p\u003e\n\n@param obj the object to serialize to bytes, may be null\n@param outputStream the stream to write to, must not be null\n@throws IllegalArgumentException if \u003ccode\u003eoutputStream\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e\n@throws SerializationException (runtime) if the serialization fails\n",
      "diff": "@@ -1,20 +1,19 @@\n public static void serialize(Serializable obj, OutputStream outputStream) {\n     if (outputStream \u003d\u003d null) {\n         throw new IllegalArgumentException(\"The OutputStream must not be null\");\n     }\n     ObjectOutputStream out \u003d null;\n     try {\n         out \u003d new ObjectOutputStream(outputStream);\n         out.writeObject(obj);\n     } catch (IOException ex) {\n         throw new SerializationException(ex);\n     } finally {\n         try {\n             if (out !\u003d null) {\n                 out.close();\n             }\n         } catch (IOException ex) {\n-            ;\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "608c5159f2e6543809ce07432a51c0571c16bba0": {
      "type": "Ybodychange",
      "commitMessage": "added empty statement to empty catch blocks\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@202043 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/27/05, 1:24 PM",
      "commitName": "608c5159f2e6543809ce07432a51c0571c16bba0",
      "commitAuthor": "Steven Caswell",
      "commitDateOld": "4/13/05, 9:30 PM",
      "commitNameOld": "0bedaaebf88001d27d49ffa19ea3b234f496d88f",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 74.66,
      "commitsBetweenForRepo": 64,
      "commitsBetweenForFile": 1,
      "actualSource": "public static void serialize(Serializable obj, OutputStream outputStream) {\n    if (outputStream \u003d\u003d null) {\n        throw new IllegalArgumentException(\"The OutputStream must not be null\");\n    }\n    ObjectOutputStream out \u003d null;\n    try {\n        out \u003d new ObjectOutputStream(outputStream);\n        out.writeObject(obj);\n    } catch (IOException ex) {\n        throw new SerializationException(ex);\n    } finally {\n        try {\n            if (out !\u003d null) {\n                out.close();\n            }\n        } catch (IOException ex) {\n            ;\n        }\n    }\n}",
      "path": "src/java/org/apache/commons/lang/SerializationUtils.java",
      "functionStartLine": 99,
      "functionName": "serialize",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eSerializes an \u003ccode\u003eObject\u003c/code\u003e to the specified stream.\u003c/p\u003e\n\n\u003cp\u003eThe stream will be closed once the object is written.\nThis avoids the need for a finally clause, and maybe also exception\nhandling, in the application code.\u003c/p\u003e\n\n\u003cp\u003eThe stream passed in is not buffered internally within this method.\nThis is the responsibility of your application if desired.\u003c/p\u003e\n\n@param obj the object to serialize to bytes, may be null\n@param outputStream the stream to write to, must not be null\n@throws IllegalArgumentException if \u003ccode\u003eoutputStream\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e\n@throws SerializationException (runtime) if the serialization fails\n",
      "diff": "@@ -1,19 +1,20 @@\n public static void serialize(Serializable obj, OutputStream outputStream) {\n     if (outputStream \u003d\u003d null) {\n         throw new IllegalArgumentException(\"The OutputStream must not be null\");\n     }\n     ObjectOutputStream out \u003d null;\n     try {\n         out \u003d new ObjectOutputStream(outputStream);\n         out.writeObject(obj);\n     } catch (IOException ex) {\n         throw new SerializationException(ex);\n     } finally {\n         try {\n             if (out !\u003d null) {\n                 out.close();\n             }\n         } catch (IOException ex) {\n+            ;\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4d9bdc04b603a00c9335f53c34405dd46b2205ce": {
      "type": "Ybodychange",
      "commitMessage": "Unify exception handling re IAE\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137544 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/31/03, 4:45 PM",
      "commitName": "4d9bdc04b603a00c9335f53c34405dd46b2205ce",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "7/19/03, 1:22 PM",
      "commitNameOld": "97dfb3a031f9f5ec3e8d0ec49f0cc2c322f70ffc",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 12.14,
      "commitsBetweenForRepo": 86,
      "commitsBetweenForFile": 1,
      "actualSource": "public static void serialize(Serializable obj, OutputStream outputStream) {\n    if (outputStream \u003d\u003d null) {\n        throw new IllegalArgumentException(\"The OutputStream must not be null\");\n    }\n    ObjectOutputStream out \u003d null;\n    try {\n        out \u003d new ObjectOutputStream(outputStream);\n        out.writeObject(obj);\n    } catch (IOException ex) {\n        throw new SerializationException(ex);\n    } finally {\n        try {\n            if (out !\u003d null) {\n                out.close();\n            }\n        } catch (IOException ex) {\n        }\n    }\n}",
      "path": "src/java/org/apache/commons/lang/SerializationUtils.java",
      "functionStartLine": 131,
      "functionName": "serialize",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eSerializes an \u003ccode\u003eObject\u003c/code\u003e to the specified stream.\u003c/p\u003e\n\n\u003cp\u003eThe stream will be closed once the object is written.\nThis avoids the need for a finally clause, and maybe also exception\nhandling, in the application code.\u003c/p\u003e\n\n\u003cp\u003eThe stream passed in is not buffered internally within this method.\nThis is the responsibility of your application if desired.\u003c/p\u003e\n\n@param obj the object to serialize to bytes, may be null\n@param outputStream the stream to write to, must not be null\n@throws IllegalArgumentException if \u003ccode\u003eoutputStream\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e\n@throws SerializationException (runtime) if the serialization fails\n",
      "diff": "@@ -1,19 +1,19 @@\n public static void serialize(Serializable obj, OutputStream outputStream) {\n     if (outputStream \u003d\u003d null) {\n-        throw new NullArgumentException(\"OutputStream\");\n+        throw new IllegalArgumentException(\"The OutputStream must not be null\");\n     }\n     ObjectOutputStream out \u003d null;\n     try {\n         out \u003d new ObjectOutputStream(outputStream);\n         out.writeObject(obj);\n     } catch (IOException ex) {\n         throw new SerializationException(ex);\n     } finally {\n         try {\n             if (out !\u003d null) {\n                 out.close();\n             }\n         } catch (IOException ex) {\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "97dfb3a031f9f5ec3e8d0ec49f0cc2c322f70ffc": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Update null behaviour for consistency and clarity\nDoument null behaviour\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137458 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/19/03, 1:22 PM",
      "commitName": "97dfb3a031f9f5ec3e8d0ec49f0cc2c322f70ffc",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Update null behaviour for consistency and clarity\nDoument null behaviour\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137458 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/19/03, 1:22 PM",
          "commitName": "97dfb3a031f9f5ec3e8d0ec49f0cc2c322f70ffc",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "6/23/03, 3:36 PM",
          "commitNameOld": "43fb280f44aa530783c43eec3f4b38ae80401697",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 25.91,
          "commitsBetweenForRepo": 84,
          "commitsBetweenForFile": 1,
          "actualSource": "public static void serialize(Serializable obj, OutputStream outputStream) {\n    if (outputStream \u003d\u003d null) {\n        throw new NullArgumentException(\"OutputStream\");\n    }\n    ObjectOutputStream out \u003d null;\n    try {\n        out \u003d new ObjectOutputStream(outputStream);\n        out.writeObject(obj);\n    } catch (IOException ex) {\n        throw new SerializationException(ex);\n    } finally {\n        try {\n            if (out !\u003d null) {\n                out.close();\n            }\n        } catch (IOException ex) {\n        }\n    }\n}",
          "path": "src/java/org/apache/commons/lang/SerializationUtils.java",
          "functionStartLine": 131,
          "functionName": "serialize",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eSerializes an \u003ccode\u003eObject\u003c/code\u003e to the specified stream.\u003c/p\u003e\n\n\u003cp\u003eThe stream will be closed once the object is written.\nThis avoids the need for a finally clause, and maybe also exception\nhandling, in the application code.\u003c/p\u003e\n\n\u003cp\u003eThe stream passed in is not buffered internally within this method.\nThis is the responsibility of your application if desired.\u003c/p\u003e\n\n@param obj the object to serialize to bytes, may be null\n@param outputStream the stream to write to, must not be null\n@throws IllegalArgumentException if \u003ccode\u003eoutputStream\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e\n@throws SerializationException (runtime) if the serialization fails\n",
          "diff": "@@ -1,16 +1,19 @@\n public static void serialize(Serializable obj, OutputStream outputStream) {\n+    if (outputStream \u003d\u003d null) {\n+        throw new NullArgumentException(\"OutputStream\");\n+    }\n     ObjectOutputStream out \u003d null;\n     try {\n         out \u003d new ObjectOutputStream(outputStream);\n         out.writeObject(obj);\n     } catch (IOException ex) {\n         throw new SerializationException(ex);\n     } finally {\n         try {\n             if (out !\u003d null) {\n                 out.close();\n             }\n         } catch (IOException ex) {\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Update null behaviour for consistency and clarity\nDoument null behaviour\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137458 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/19/03, 1:22 PM",
          "commitName": "97dfb3a031f9f5ec3e8d0ec49f0cc2c322f70ffc",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "6/23/03, 3:36 PM",
          "commitNameOld": "43fb280f44aa530783c43eec3f4b38ae80401697",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 25.91,
          "commitsBetweenForRepo": 84,
          "commitsBetweenForFile": 1,
          "actualSource": "public static void serialize(Serializable obj, OutputStream outputStream) {\n    if (outputStream \u003d\u003d null) {\n        throw new NullArgumentException(\"OutputStream\");\n    }\n    ObjectOutputStream out \u003d null;\n    try {\n        out \u003d new ObjectOutputStream(outputStream);\n        out.writeObject(obj);\n    } catch (IOException ex) {\n        throw new SerializationException(ex);\n    } finally {\n        try {\n            if (out !\u003d null) {\n                out.close();\n            }\n        } catch (IOException ex) {\n        }\n    }\n}",
          "path": "src/java/org/apache/commons/lang/SerializationUtils.java",
          "functionStartLine": 131,
          "functionName": "serialize",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eSerializes an \u003ccode\u003eObject\u003c/code\u003e to the specified stream.\u003c/p\u003e\n\n\u003cp\u003eThe stream will be closed once the object is written.\nThis avoids the need for a finally clause, and maybe also exception\nhandling, in the application code.\u003c/p\u003e\n\n\u003cp\u003eThe stream passed in is not buffered internally within this method.\nThis is the responsibility of your application if desired.\u003c/p\u003e\n\n@param obj the object to serialize to bytes, may be null\n@param outputStream the stream to write to, must not be null\n@throws IllegalArgumentException if \u003ccode\u003eoutputStream\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e\n@throws SerializationException (runtime) if the serialization fails\n",
          "diff": "@@ -1,16 +1,19 @@\n public static void serialize(Serializable obj, OutputStream outputStream) {\n+    if (outputStream \u003d\u003d null) {\n+        throw new NullArgumentException(\"OutputStream\");\n+    }\n     ObjectOutputStream out \u003d null;\n     try {\n         out \u003d new ObjectOutputStream(outputStream);\n         out.writeObject(obj);\n     } catch (IOException ex) {\n         throw new SerializationException(ex);\n     } finally {\n         try {\n             if (out !\u003d null) {\n                 out.close();\n             }\n         } catch (IOException ex) {\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "\u003cp\u003eSerializes an \u003ccode\u003eObject\u003c/code\u003e to the specified stream.\u003c/p\u003e\n\n\u003cp\u003eThe stream will be closed once the object is written.\nThis avoids the need for a finally clause, and maybe also exception\nhandling, in the application code.\u003c/p\u003e\n\n\u003cp\u003eThe stream passed in is not buffered internally within this method.\nThis is the responsibility of your application if desired.\u003c/p\u003e\n\n@param obj the object to serialize to bytes\n@param outputStream the stream to write to\n@throws SerializationException (runtime) if the serialization fails\n",
            "newValue": "\u003cp\u003eSerializes an \u003ccode\u003eObject\u003c/code\u003e to the specified stream.\u003c/p\u003e\n\n\u003cp\u003eThe stream will be closed once the object is written.\nThis avoids the need for a finally clause, and maybe also exception\nhandling, in the application code.\u003c/p\u003e\n\n\u003cp\u003eThe stream passed in is not buffered internally within this method.\nThis is the responsibility of your application if desired.\u003c/p\u003e\n\n@param obj the object to serialize to bytes, may be null\n@param outputStream the stream to write to, must not be null\n@throws IllegalArgumentException if \u003ccode\u003eoutputStream\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e\n@throws SerializationException (runtime) if the serialization fails\n"
          }
        }
      ]
    },
    "e90782608b401648c0128885fd70f500a4ecad2c": {
      "type": "Ydocchange",
      "commitMessage": "Update for performance, from Jeff Varszegi\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137200 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/22/02, 11:55 AM",
      "commitName": "e90782608b401648c0128885fd70f500a4ecad2c",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "11/16/02, 2:41 AM",
      "commitNameOld": "30a5db352bf74d4f869f65cc320c63ccfd2f8cc7",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 36.39,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "actualSource": "public static void serialize(Serializable obj, OutputStream outputStream) {\n    ObjectOutputStream out \u003d null;\n    try {\n        out \u003d new ObjectOutputStream(outputStream);\n        out.writeObject(obj);\n    } catch (IOException ex) {\n        throw new SerializationException(ex);\n    } finally {\n        try {\n            if (out !\u003d null) {\n                out.close();\n            }\n        } catch (IOException ex) {\n        }\n    }\n}",
      "path": "src/java/org/apache/commons/lang/SerializationUtils.java",
      "functionStartLine": 126,
      "functionName": "serialize",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eSerializes an \u003ccode\u003eObject\u003c/code\u003e to the specified stream.\u003c/p\u003e\n\n\u003cp\u003eThe stream will be closed once the object is written.\nThis avoids the need for a finally clause, and maybe also exception\nhandling, in the application code.\u003c/p\u003e\n\n\u003cp\u003eThe stream passed in is not buffered internally within this method.\nThis is the responsibility of your application if desired.\u003c/p\u003e\n\n@param obj the object to serialize to bytes\n@param outputStream the stream to write to\n@throws SerializationException (runtime) if the serialization fails\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "\u003cp\u003eSerializes an \u003ccode\u003eObject\u003c/code\u003e to the specified stream.\u003c/p\u003e\n\n\u003cp\u003eThe stream will be closed once the object is written.\nThis avoids the need for a finally clause, and maybe also exception\nhandling, in the application code.\u003c/p\u003e\n\n@param obj the object to serialize to bytes\n@param outputStream the stream to write to\n@throws SerializationException (runtime) if the serialization fails\n",
        "newValue": "\u003cp\u003eSerializes an \u003ccode\u003eObject\u003c/code\u003e to the specified stream.\u003c/p\u003e\n\n\u003cp\u003eThe stream will be closed once the object is written.\nThis avoids the need for a finally clause, and maybe also exception\nhandling, in the application code.\u003c/p\u003e\n\n\u003cp\u003eThe stream passed in is not buffered internally within this method.\nThis is the responsibility of your application if desired.\u003c/p\u003e\n\n@param obj the object to serialize to bytes\n@param outputStream the stream to write to\n@throws SerializationException (runtime) if the serialization fails\n"
      }
    },
    "30a5db352bf74d4f869f65cc320c63ccfd2f8cc7": {
      "type": "Ydocchange",
      "commitMessage": "Javadoc formatting patch, by Fredrik Westermarck\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137133 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/16/02, 2:41 AM",
      "commitName": "30a5db352bf74d4f869f65cc320c63ccfd2f8cc7",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/31/02, 4:11 AM",
      "commitNameOld": "2f94a814dc01ae392768afb8110b2b55169ed69f",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 76.98,
      "commitsBetweenForRepo": 128,
      "commitsBetweenForFile": 1,
      "actualSource": "public static void serialize(Serializable obj, OutputStream outputStream) {\n    ObjectOutputStream out \u003d null;\n    try {\n        out \u003d new ObjectOutputStream(outputStream);\n        out.writeObject(obj);\n    } catch (IOException ex) {\n        throw new SerializationException(ex);\n    } finally {\n        try {\n            if (out !\u003d null) {\n                out.close();\n            }\n        } catch (IOException ex) {\n        }\n    }\n}",
      "path": "src/java/org/apache/commons/lang/SerializationUtils.java",
      "functionStartLine": 118,
      "functionName": "serialize",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eSerializes an \u003ccode\u003eObject\u003c/code\u003e to the specified stream.\u003c/p\u003e\n\n\u003cp\u003eThe stream will be closed once the object is written.\nThis avoids the need for a finally clause, and maybe also exception\nhandling, in the application code.\u003c/p\u003e\n\n@param obj the object to serialize to bytes\n@param outputStream the stream to write to\n@throws SerializationException (runtime) if the serialization fails\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Serializes an object to the specified stream. The stream will\nbe closed once the object is written. This avoids the need for\na finally clause, and maybe also exception handling, in the\napplication code.\n\n@param obj the object to serialize to bytes\n@param outputStream the stream to write to\n@throws SerializationException (runtime) if the serialization fails\n",
        "newValue": "\u003cp\u003eSerializes an \u003ccode\u003eObject\u003c/code\u003e to the specified stream.\u003c/p\u003e\n\n\u003cp\u003eThe stream will be closed once the object is written.\nThis avoids the need for a finally clause, and maybe also exception\nhandling, in the application code.\u003c/p\u003e\n\n@param obj the object to serialize to bytes\n@param outputStream the stream to write to\n@throws SerializationException (runtime) if the serialization fails\n"
      }
    },
    "d23b22c78078ee7468e797e80188ae9508c0eee0": {
      "type": "Yintroduced",
      "commitMessage": "Initial copy from jakarta-commons-sandbox\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@136932 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/18/02, 8:35 PM",
      "commitName": "d23b22c78078ee7468e797e80188ae9508c0eee0",
      "commitAuthor": "Henri Yandell",
      "diff": "@@ -0,0 +1,16 @@\n+public static void serialize(Serializable obj, OutputStream outputStream) {\n+    ObjectOutputStream out \u003d null;\n+    try {\n+        out \u003d new ObjectOutputStream(outputStream);\n+        out.writeObject(obj);\n+    } catch (IOException ex) {\n+        throw new SerializationException(ex);\n+    } finally {\n+        try {\n+            if (out !\u003d null) {\n+                out.close();\n+            }\n+        } catch (IOException ex) {\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "public static void serialize(Serializable obj, OutputStream outputStream) {\n    ObjectOutputStream out \u003d null;\n    try {\n        out \u003d new ObjectOutputStream(outputStream);\n        out.writeObject(obj);\n    } catch (IOException ex) {\n        throw new SerializationException(ex);\n    } finally {\n        try {\n            if (out !\u003d null) {\n                out.close();\n            }\n        } catch (IOException ex) {\n        }\n    }\n}",
      "path": "src/java/org/apache/commons/lang/SerializationUtils.java",
      "functionStartLine": 117,
      "functionName": "serialize",
      "functionAnnotation": "",
      "functionDoc": "Serializes an object to the specified stream. The stream will\nbe closed once the object is written. This avoids the need for\na finally clause, and maybe also exception handling, in the\napplication code.\n\n@param obj the object to serialize to bytes\n@param outputStream the stream to write to\n@throws SerializationException (runtime) if the serialization fails\n"
    }
  }
}