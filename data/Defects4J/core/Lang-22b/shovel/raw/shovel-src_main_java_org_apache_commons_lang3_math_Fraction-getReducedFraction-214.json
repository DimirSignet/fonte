{
  "origin": "codeshovel",
  "repositoryName": "Lang-22b",
  "repositoryPath": "/tmp/Lang-22b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Fraction.java",
  "functionName": "getReducedFraction",
  "functionId": "getReducedFraction___numerator-int__denominator-int",
  "sourceFilePath": "src/main/java/org/apache/commons/lang3/math/Fraction.java",
  "functionAnnotation": "",
  "functionDoc": "\u003cp\u003eCreates a reduced \u003ccode\u003eFraction\u003c/code\u003e instance with the 2 parts\nof a fraction Y/Z.\u003c/p\u003e\n\n\u003cp\u003eFor example, if the input parameters represent 2/4, then the created\nfraction will be 1/2.\u003c/p\u003e\n\n\u003cp\u003eAny negative signs are resolved to be on the numerator.\u003c/p\u003e\n\n@param numerator the numerator, for example the three in \u0027three sevenths\u0027\n@param denominator the denominator, for example the seven in \u0027three sevenths\u0027\n@return a new fraction instance, with the numerator and denominator reduced\n@throws ArithmeticException if the denominator is \u003ccode\u003ezero\u003c/code\u003e\n",
  "functionStartLine": 214,
  "functionEndLine": 238,
  "numCommitsSeen": 34,
  "timeTaken": 1871,
  "changeHistory": [
    "b1686009b5494119575d43525b0829162ab79853",
    "586080851f6bca4d7aa84a7d307203ad8222407e",
    "ed2a8da1bf10db5cb3c7701b60accd0165dc2e10",
    "9a662f1bfd76c49bfcb9e9947f008aade2db54eb",
    "ab3779080b0c12668cca7fc9f12d6f38d6495892",
    "19858f58bc450f06cbb401c6bb8657c078049dd0",
    "c66659d62dbf69d4c1ccc5c9c50938273436c1b3",
    "7e8976d60b8a24f9fc03f89d98304d77e6153b6d"
  ],
  "changeHistoryShort": {
    "b1686009b5494119575d43525b0829162ab79853": "Yfilerename",
    "586080851f6bca4d7aa84a7d307203ad8222407e": "Yfilerename",
    "ed2a8da1bf10db5cb3c7701b60accd0165dc2e10": "Ydocchange",
    "9a662f1bfd76c49bfcb9e9947f008aade2db54eb": "Ymultichange(Ybodychange,Ydocchange)",
    "ab3779080b0c12668cca7fc9f12d6f38d6495892": "Ybodychange",
    "19858f58bc450f06cbb401c6bb8657c078049dd0": "Ybodychange",
    "c66659d62dbf69d4c1ccc5c9c50938273436c1b3": "Ydocchange",
    "7e8976d60b8a24f9fc03f89d98304d77e6153b6d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b1686009b5494119575d43525b0829162ab79853": {
      "type": "Yfilerename",
      "commitMessage": "Move main source to src/main/java\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@895322 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/2/10, 6:11 PM",
      "commitName": "b1686009b5494119575d43525b0829162ab79853",
      "commitAuthor": "Paul C. Benedict Jr",
      "commitDateOld": "1/2/10, 6:09 PM",
      "commitNameOld": "1f725a97e73edd27301e889408832b34a3d69e63",
      "commitAuthorOld": "Paul C. Benedict Jr",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Fraction getReducedFraction(int numerator, int denominator) {\n    if (denominator \u003d\u003d 0) {\n        throw new ArithmeticException(\"The denominator must not be zero\");\n    }\n    if (numerator \u003d\u003d 0) {\n        return ZERO;\n    }\n    if (denominator \u003d\u003d Integer.MIN_VALUE \u0026\u0026 (numerator \u0026 1) \u003d\u003d 0) {\n        numerator /\u003d 2;\n        denominator /\u003d 2;\n    }\n    if (denominator \u003c 0) {\n        if (numerator \u003d\u003d Integer.MIN_VALUE || denominator \u003d\u003d Integer.MIN_VALUE) {\n            throw new ArithmeticException(\"overflow: can\u0027t negate\");\n        }\n        numerator \u003d -numerator;\n        denominator \u003d -denominator;\n    }\n    int gcd \u003d greatestCommonDivisor(numerator, denominator);\n    numerator /\u003d gcd;\n    denominator /\u003d gcd;\n    return new Fraction(numerator, denominator);\n}",
      "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java",
      "functionStartLine": 209,
      "functionName": "getReducedFraction",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eCreates a reduced \u003ccode\u003eFraction\u003c/code\u003e instance with the 2 parts\nof a fraction Y/Z.\u003c/p\u003e\n\n\u003cp\u003eFor example, if the input parameters represent 2/4, then the created\nfraction will be 1/2.\u003c/p\u003e\n\n\u003cp\u003eAny negative signs are resolved to be on the numerator.\u003c/p\u003e\n\n@param numerator the numerator, for example the three in \u0027three sevenths\u0027\n@param denominator the denominator, for example the seven in \u0027three sevenths\u0027\n@return a new fraction instance, with the numerator and denominator reduced\n@throws ArithmeticException if the denominator is \u003ccode\u003ezero\u003c/code\u003e\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/lang3/math/Fraction.java",
        "newPath": "src/main/java/org/apache/commons/lang3/math/Fraction.java"
      }
    },
    "586080851f6bca4d7aa84a7d307203ad8222407e": {
      "type": "Yfilerename",
      "commitMessage": "Changing directory name from lang to lang3. Build will fail (probably) until Java code is changed in subsequent commit. LANG-563\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@889202 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/10/09, 3:33 AM",
      "commitName": "586080851f6bca4d7aa84a7d307203ad8222407e",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "12/10/09, 3:31 AM",
      "commitNameOld": "da479d635f66c1f82a1f858591cfb1b9941457ae",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Fraction getReducedFraction(int numerator, int denominator) {\n    if (denominator \u003d\u003d 0) {\n        throw new ArithmeticException(\"The denominator must not be zero\");\n    }\n    if (numerator \u003d\u003d 0) {\n        return ZERO;\n    }\n    if (denominator \u003d\u003d Integer.MIN_VALUE \u0026\u0026 (numerator \u0026 1) \u003d\u003d 0) {\n        numerator /\u003d 2;\n        denominator /\u003d 2;\n    }\n    if (denominator \u003c 0) {\n        if (numerator \u003d\u003d Integer.MIN_VALUE || denominator \u003d\u003d Integer.MIN_VALUE) {\n            throw new ArithmeticException(\"overflow: can\u0027t negate\");\n        }\n        numerator \u003d -numerator;\n        denominator \u003d -denominator;\n    }\n    int gcd \u003d greatestCommonDivisor(numerator, denominator);\n    numerator /\u003d gcd;\n    denominator /\u003d gcd;\n    return new Fraction(numerator, denominator);\n}",
      "path": "src/java/org/apache/commons/lang3/math/Fraction.java",
      "functionStartLine": 209,
      "functionName": "getReducedFraction",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eCreates a reduced \u003ccode\u003eFraction\u003c/code\u003e instance with the 2 parts\nof a fraction Y/Z.\u003c/p\u003e\n\n\u003cp\u003eFor example, if the input parameters represent 2/4, then the created\nfraction will be 1/2.\u003c/p\u003e\n\n\u003cp\u003eAny negative signs are resolved to be on the numerator.\u003c/p\u003e\n\n@param numerator the numerator, for example the three in \u0027three sevenths\u0027\n@param denominator the denominator, for example the seven in \u0027three sevenths\u0027\n@return a new fraction instance, with the numerator and denominator reduced\n@throws ArithmeticException if the denominator is \u003ccode\u003ezero\u003c/code\u003e\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/lang/math/Fraction.java",
        "newPath": "src/java/org/apache/commons/lang3/math/Fraction.java"
      }
    },
    "ed2a8da1bf10db5cb3c7701b60accd0165dc2e10": {
      "type": "Ydocchange",
      "commitMessage": "Document and fix fraction reduction\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@279983 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/10/05, 2:55 AM",
      "commitName": "ed2a8da1bf10db5cb3c7701b60accd0165dc2e10",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "9/6/05, 2:57 PM",
      "commitNameOld": "d36516a926d1bc348e254854451977295aff729c",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 3.5,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Fraction getReducedFraction(int numerator, int denominator) {\n    if (denominator \u003d\u003d 0) {\n        throw new ArithmeticException(\"The denominator must not be zero\");\n    }\n    if (numerator \u003d\u003d 0) {\n        return ZERO;\n    }\n    if (denominator \u003d\u003d Integer.MIN_VALUE \u0026\u0026 (numerator \u0026 1) \u003d\u003d 0) {\n        numerator /\u003d 2;\n        denominator /\u003d 2;\n    }\n    if (denominator \u003c 0) {\n        if (numerator \u003d\u003d Integer.MIN_VALUE || denominator \u003d\u003d Integer.MIN_VALUE) {\n            throw new ArithmeticException(\"overflow: can\u0027t negate\");\n        }\n        numerator \u003d -numerator;\n        denominator \u003d -denominator;\n    }\n    int gcd \u003d greatestCommonDivisor(numerator, denominator);\n    numerator /\u003d gcd;\n    denominator /\u003d gcd;\n    return new Fraction(numerator, denominator);\n}",
      "path": "src/java/org/apache/commons/lang/math/Fraction.java",
      "functionStartLine": 205,
      "functionName": "getReducedFraction",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eCreates a reduced \u003ccode\u003eFraction\u003c/code\u003e instance with the 2 parts\nof a fraction Y/Z.\u003c/p\u003e\n\n\u003cp\u003eFor example, if the input parameters represent 2/4, then the created\nfraction will be 1/2.\u003c/p\u003e\n\n\u003cp\u003eAny negative signs are resolved to be on the numerator.\u003c/p\u003e\n\n@param numerator the numerator, for example the three in \u0027three sevenths\u0027\n@param denominator the denominator, for example the seven in \u0027three sevenths\u0027\n@return a new fraction instance, with the numerator and denominator reduced\n@throws ArithmeticException if the denominator is \u003ccode\u003ezero\u003c/code\u003e\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "\u003cp\u003eCreates a \u003ccode\u003eFraction\u003c/code\u003e instance with the 2 parts\nof a fraction Y/Z.\u003c/p\u003e\n\n\u003cp\u003eAny negative signs are resolved to be on the numerator.\u003c/p\u003e\n\n@param numerator the numerator, for example the three in \u0027three sevenths\u0027\n@param denominator the denominator, for example the seven in \u0027three sevenths\u0027\n@return a new fraction instance, with the numerator and denominator reduced\n@throws ArithmeticException if the denominator is \u003ccode\u003ezero\u003c/code\u003e\n",
        "newValue": "\u003cp\u003eCreates a reduced \u003ccode\u003eFraction\u003c/code\u003e instance with the 2 parts\nof a fraction Y/Z.\u003c/p\u003e\n\n\u003cp\u003eFor example, if the input parameters represent 2/4, then the created\nfraction will be 1/2.\u003c/p\u003e\n\n\u003cp\u003eAny negative signs are resolved to be on the numerator.\u003c/p\u003e\n\n@param numerator the numerator, for example the three in \u0027three sevenths\u0027\n@param denominator the denominator, for example the seven in \u0027three sevenths\u0027\n@return a new fraction instance, with the numerator and denominator reduced\n@throws ArithmeticException if the denominator is \u003ccode\u003ezero\u003c/code\u003e\n"
      }
    },
    "9a662f1bfd76c49bfcb9e9947f008aade2db54eb": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Fixed numeric problems reported in PR #29294\nSubmitted by: C. Scott Ananian\nReviewed by: Phil Steitz\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137879 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/11/04, 4:20 PM",
      "commitName": "9a662f1bfd76c49bfcb9e9947f008aade2db54eb",
      "commitAuthor": "Phil Steitz",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Fixed numeric problems reported in PR #29294\nSubmitted by: C. Scott Ananian\nReviewed by: Phil Steitz\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137879 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/11/04, 4:20 PM",
          "commitName": "9a662f1bfd76c49bfcb9e9947f008aade2db54eb",
          "commitAuthor": "Phil Steitz",
          "commitDateOld": "2/18/04, 3:06 PM",
          "commitNameOld": "a6c9528cd88adee314a3bf2d0f66c3938906503f",
          "commitAuthorOld": "Gary D. Gregory",
          "daysBetweenCommits": 144.01,
          "commitsBetweenForRepo": 79,
          "commitsBetweenForFile": 1,
          "actualSource": "public static Fraction getReducedFraction(int numerator, int denominator) {\n    if (denominator \u003d\u003d 0) {\n        throw new ArithmeticException(\"The denominator must not be zero\");\n    }\n    if (numerator \u003d\u003d 0) {\n        return ZERO;\n    }\n    if (denominator \u003d\u003d Integer.MIN_VALUE \u0026\u0026 (numerator \u0026 1) \u003d\u003d 0) {\n        numerator /\u003d 2;\n        denominator /\u003d 2;\n    }\n    if (denominator \u003c 0) {\n        if (numerator \u003d\u003d Integer.MIN_VALUE || denominator \u003d\u003d Integer.MIN_VALUE) {\n            throw new ArithmeticException(\"overflow: can\u0027t negate\");\n        }\n        numerator \u003d -numerator;\n        denominator \u003d -denominator;\n    }\n    int gcd \u003d greatestCommonDivisor(numerator, denominator);\n    numerator /\u003d gcd;\n    denominator /\u003d gcd;\n    return new Fraction(numerator, denominator);\n}",
          "path": "src/java/org/apache/commons/lang/math/Fraction.java",
          "functionStartLine": 202,
          "functionName": "getReducedFraction",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eCreates a \u003ccode\u003eFraction\u003c/code\u003e instance with the 2 parts\nof a fraction Y/Z.\u003c/p\u003e\n\n\u003cp\u003eAny negative signs are resolved to be on the numerator.\u003c/p\u003e\n\n@param numerator the numerator, for example the three in \u0027three sevenths\u0027\n@param denominator the denominator, for example the seven in \u0027three sevenths\u0027\n@return a new fraction instance, with the numerator and denominator reduced\n@throws ArithmeticException if the denominator is \u003ccode\u003ezero\u003c/code\u003e\n",
          "diff": "@@ -1,11 +1,23 @@\n public static Fraction getReducedFraction(int numerator, int denominator) {\n     if (denominator \u003d\u003d 0) {\n         throw new ArithmeticException(\"The denominator must not be zero\");\n     }\n+    if (numerator \u003d\u003d 0) {\n+        return ZERO;\n+    }\n+    if (denominator \u003d\u003d Integer.MIN_VALUE \u0026\u0026 (numerator \u0026 1) \u003d\u003d 0) {\n+        numerator /\u003d 2;\n+        denominator /\u003d 2;\n+    }\n     if (denominator \u003c 0) {\n+        if (numerator \u003d\u003d Integer.MIN_VALUE || denominator \u003d\u003d Integer.MIN_VALUE) {\n+            throw new ArithmeticException(\"overflow: can\u0027t negate\");\n+        }\n         numerator \u003d -numerator;\n         denominator \u003d -denominator;\n     }\n-    int gcd \u003d greatestCommonDivisor(Math.abs(numerator), denominator);\n-    return new Fraction(numerator / gcd, denominator / gcd);\n+    int gcd \u003d greatestCommonDivisor(numerator, denominator);\n+    numerator /\u003d gcd;\n+    denominator /\u003d gcd;\n+    return new Fraction(numerator, denominator);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Fixed numeric problems reported in PR #29294\nSubmitted by: C. Scott Ananian\nReviewed by: Phil Steitz\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137879 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/11/04, 4:20 PM",
          "commitName": "9a662f1bfd76c49bfcb9e9947f008aade2db54eb",
          "commitAuthor": "Phil Steitz",
          "commitDateOld": "2/18/04, 3:06 PM",
          "commitNameOld": "a6c9528cd88adee314a3bf2d0f66c3938906503f",
          "commitAuthorOld": "Gary D. Gregory",
          "daysBetweenCommits": 144.01,
          "commitsBetweenForRepo": 79,
          "commitsBetweenForFile": 1,
          "actualSource": "public static Fraction getReducedFraction(int numerator, int denominator) {\n    if (denominator \u003d\u003d 0) {\n        throw new ArithmeticException(\"The denominator must not be zero\");\n    }\n    if (numerator \u003d\u003d 0) {\n        return ZERO;\n    }\n    if (denominator \u003d\u003d Integer.MIN_VALUE \u0026\u0026 (numerator \u0026 1) \u003d\u003d 0) {\n        numerator /\u003d 2;\n        denominator /\u003d 2;\n    }\n    if (denominator \u003c 0) {\n        if (numerator \u003d\u003d Integer.MIN_VALUE || denominator \u003d\u003d Integer.MIN_VALUE) {\n            throw new ArithmeticException(\"overflow: can\u0027t negate\");\n        }\n        numerator \u003d -numerator;\n        denominator \u003d -denominator;\n    }\n    int gcd \u003d greatestCommonDivisor(numerator, denominator);\n    numerator /\u003d gcd;\n    denominator /\u003d gcd;\n    return new Fraction(numerator, denominator);\n}",
          "path": "src/java/org/apache/commons/lang/math/Fraction.java",
          "functionStartLine": 202,
          "functionName": "getReducedFraction",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eCreates a \u003ccode\u003eFraction\u003c/code\u003e instance with the 2 parts\nof a fraction Y/Z.\u003c/p\u003e\n\n\u003cp\u003eAny negative signs are resolved to be on the numerator.\u003c/p\u003e\n\n@param numerator the numerator, for example the three in \u0027three sevenths\u0027\n@param denominator the denominator, for example the seven in \u0027three sevenths\u0027\n@return a new fraction instance, with the numerator and denominator reduced\n@throws ArithmeticException if the denominator is \u003ccode\u003ezero\u003c/code\u003e\n",
          "diff": "@@ -1,11 +1,23 @@\n public static Fraction getReducedFraction(int numerator, int denominator) {\n     if (denominator \u003d\u003d 0) {\n         throw new ArithmeticException(\"The denominator must not be zero\");\n     }\n+    if (numerator \u003d\u003d 0) {\n+        return ZERO;\n+    }\n+    if (denominator \u003d\u003d Integer.MIN_VALUE \u0026\u0026 (numerator \u0026 1) \u003d\u003d 0) {\n+        numerator /\u003d 2;\n+        denominator /\u003d 2;\n+    }\n     if (denominator \u003c 0) {\n+        if (numerator \u003d\u003d Integer.MIN_VALUE || denominator \u003d\u003d Integer.MIN_VALUE) {\n+            throw new ArithmeticException(\"overflow: can\u0027t negate\");\n+        }\n         numerator \u003d -numerator;\n         denominator \u003d -denominator;\n     }\n-    int gcd \u003d greatestCommonDivisor(Math.abs(numerator), denominator);\n-    return new Fraction(numerator / gcd, denominator / gcd);\n+    int gcd \u003d greatestCommonDivisor(numerator, denominator);\n+    numerator /\u003d gcd;\n+    denominator /\u003d gcd;\n+    return new Fraction(numerator, denominator);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "\u003cp\u003eCreates a \u003ccode\u003eFraction\u003c/code\u003e instance with the 2 parts\nof a fraction Y/Z.\u003c/p\u003e\n\n\u003cp\u003eAny negative signs are resolved to be on the numerator.\u003c/p\u003e\n\n@param numerator the numerator, for example the three in \u0027three sevenths\u0027\n@param denominator the denominator, for example the seven in \u0027three sevenths\u0027\n@return a new fraction instance, with the numerator and denominator reduced\n@throws ArithmeticException if the denomiator is \u003ccode\u003ezero\u003c/code\u003e\n",
            "newValue": "\u003cp\u003eCreates a \u003ccode\u003eFraction\u003c/code\u003e instance with the 2 parts\nof a fraction Y/Z.\u003c/p\u003e\n\n\u003cp\u003eAny negative signs are resolved to be on the numerator.\u003c/p\u003e\n\n@param numerator the numerator, for example the three in \u0027three sevenths\u0027\n@param denominator the denominator, for example the seven in \u0027three sevenths\u0027\n@return a new fraction instance, with the numerator and denominator reduced\n@throws ArithmeticException if the denominator is \u003ccode\u003ezero\u003c/code\u003e\n"
          }
        }
      ]
    },
    "ab3779080b0c12668cca7fc9f12d6f38d6495892": {
      "type": "Ybodychange",
      "commitMessage": "Improve Fraction Javadoc, implementation and tests\nbug 22386, from Phil Steitz\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137586 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/13/03, 4:42 PM",
      "commitName": "ab3779080b0c12668cca7fc9f12d6f38d6495892",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/3/03, 7:01 PM",
      "commitNameOld": "19858f58bc450f06cbb401c6bb8657c078049dd0",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 9.9,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Fraction getReducedFraction(int numerator, int denominator) {\n    if (denominator \u003d\u003d 0) {\n        throw new ArithmeticException(\"The denominator must not be zero\");\n    }\n    if (denominator \u003c 0) {\n        numerator \u003d -numerator;\n        denominator \u003d -denominator;\n    }\n    int gcd \u003d greatestCommonDivisor(Math.abs(numerator), denominator);\n    return new Fraction(numerator / gcd, denominator / gcd);\n}",
      "path": "src/java/org/apache/commons/lang/math/Fraction.java",
      "functionStartLine": 200,
      "functionName": "getReducedFraction",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eCreates a \u003ccode\u003eFraction\u003c/code\u003e instance with the 2 parts\nof a fraction Y/Z.\u003c/p\u003e\n\n\u003cp\u003eAny negative signs are resolved to be on the numerator.\u003c/p\u003e\n\n@param numerator the numerator, for example the three in \u0027three sevenths\u0027\n@param denominator the denominator, for example the seven in \u0027three sevenths\u0027\n@return a new fraction instance, with the numerator and denominator reduced\n@throws ArithmeticException if the denomiator is \u003ccode\u003ezero\u003c/code\u003e\n",
      "diff": "@@ -1,11 +1,11 @@\n public static Fraction getReducedFraction(int numerator, int denominator) {\n     if (denominator \u003d\u003d 0) {\n         throw new ArithmeticException(\"The denominator must not be zero\");\n     }\n     if (denominator \u003c 0) {\n         numerator \u003d -numerator;\n         denominator \u003d -denominator;\n     }\n-    int gcd \u003d greatestCommonDenominator(Math.abs(numerator), denominator);\n+    int gcd \u003d greatestCommonDivisor(Math.abs(numerator), denominator);\n     return new Fraction(numerator / gcd, denominator / gcd);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "19858f58bc450f06cbb401c6bb8657c078049dd0": {
      "type": "Ybodychange",
      "commitMessage": "Extra tests suggested by Clover\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137568 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/3/03, 7:01 PM",
      "commitName": "19858f58bc450f06cbb401c6bb8657c078049dd0",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/3/03, 6:20 PM",
      "commitNameOld": "245399b272732dbd3308a2940ebfdc7317572517",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Fraction getReducedFraction(int numerator, int denominator) {\n    if (denominator \u003d\u003d 0) {\n        throw new ArithmeticException(\"The denominator must not be zero\");\n    }\n    if (denominator \u003c 0) {\n        numerator \u003d -numerator;\n        denominator \u003d -denominator;\n    }\n    int gcd \u003d greatestCommonDenominator(Math.abs(numerator), denominator);\n    return new Fraction(numerator / gcd, denominator / gcd);\n}",
      "path": "src/java/org/apache/commons/lang/math/Fraction.java",
      "functionStartLine": 194,
      "functionName": "getReducedFraction",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eCreates a \u003ccode\u003eFraction\u003c/code\u003e instance with the 2 parts\nof a fraction Y/Z.\u003c/p\u003e\n\n\u003cp\u003eAny negative signs are resolved to be on the numerator.\u003c/p\u003e\n\n@param numerator the numerator, for example the three in \u0027three sevenths\u0027\n@param denominator the denominator, for example the seven in \u0027three sevenths\u0027\n@return a new fraction instance, with the numerator and denominator reduced\n@throws ArithmeticException if the denomiator is \u003ccode\u003ezero\u003c/code\u003e\n",
      "diff": "@@ -1,14 +1,11 @@\n public static Fraction getReducedFraction(int numerator, int denominator) {\n     if (denominator \u003d\u003d 0) {\n         throw new ArithmeticException(\"The denominator must not be zero\");\n     }\n     if (denominator \u003c 0) {\n         numerator \u003d -numerator;\n         denominator \u003d -denominator;\n     }\n     int gcd \u003d greatestCommonDenominator(Math.abs(numerator), denominator);\n-    if (gcd \u003d\u003d 0) {\n-        return new Fraction(numerator, denominator);\n-    }\n     return new Fraction(numerator / gcd, denominator / gcd);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c66659d62dbf69d4c1ccc5c9c50938273436c1b3": {
      "type": "Ydocchange",
      "commitMessage": "Javadoc fixes. Shouldn\u0027t have been anything other than javadoc changes in this.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137416 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/14/03, 3:25 PM",
      "commitName": "c66659d62dbf69d4c1ccc5c9c50938273436c1b3",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "4/8/03, 6:08 PM",
      "commitNameOld": "2f393b75ee6673e83969e003be3ebbb762fb5485",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 96.89,
      "commitsBetweenForRepo": 128,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Fraction getReducedFraction(int numerator, int denominator) {\n    if (denominator \u003d\u003d 0) {\n        throw new ArithmeticException(\"The denominator must not be zero\");\n    }\n    if (denominator \u003c 0) {\n        numerator \u003d -numerator;\n        denominator \u003d -denominator;\n    }\n    int gcd \u003d greatestCommonDenominator(Math.abs(numerator), denominator);\n    if (gcd \u003d\u003d 0) {\n        return new Fraction(numerator, denominator);\n    }\n    return new Fraction(numerator / gcd, denominator / gcd);\n}",
      "path": "src/java/org/apache/commons/lang/math/Fraction.java",
      "functionStartLine": 192,
      "functionName": "getReducedFraction",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eCreates a \u003ccode\u003eFraction\u003c/code\u003e instance with the 2 parts\nof a fraction Y/Z.\u003c/p\u003e\n\n\u003cp\u003eAny negative signs are resolved to be on the numerator.\u003c/p\u003e\n\n@param numerator the numerator, for example the three in \u0027three sevenths\u0027\n@param denominator the denominator, for example the seven in \u0027three sevenths\u0027\n@return a new fraction instance, with the numerator and denominator reduced\n@throws ArithmeticException if the denomiator is \u003ccode\u003ezero\u003c/code\u003e\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "\u003cp\u003eCreates a \u003ccode\u003eFraction\u003c/code\u003e instance with the 2 parts \nof a fraction Y/Z.\u003c/p\u003e\n\n\u003cp\u003eAny negative signs are resolved to be on the numerator.\u003c/p\u003e\n\n@param numerator the numerator, for example the three in \u0027three sevenths\u0027\n@param denominator the denominator, for example the seven in \u0027three sevenths\u0027\n@return a new fraction instance, with the numerator and denominator reduced\n@throws ArithmeticException if the denomiator is zero\n",
        "newValue": "\u003cp\u003eCreates a \u003ccode\u003eFraction\u003c/code\u003e instance with the 2 parts\nof a fraction Y/Z.\u003c/p\u003e\n\n\u003cp\u003eAny negative signs are resolved to be on the numerator.\u003c/p\u003e\n\n@param numerator the numerator, for example the three in \u0027three sevenths\u0027\n@param denominator the denominator, for example the seven in \u0027three sevenths\u0027\n@return a new fraction instance, with the numerator and denominator reduced\n@throws ArithmeticException if the denomiator is \u003ccode\u003ezero\u003c/code\u003e\n"
      }
    },
    "7e8976d60b8a24f9fc03f89d98304d77e6153b6d": {
      "type": "Yintroduced",
      "commitMessage": "Add Fraction class and associated tests\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137198 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/22/02, 11:39 AM",
      "commitName": "7e8976d60b8a24f9fc03f89d98304d77e6153b6d",
      "commitAuthor": "Stephen Colebourne",
      "diff": "@@ -0,0 +1,14 @@\n+public static Fraction getReducedFraction(int numerator, int denominator) {\n+    if (denominator \u003d\u003d 0) {\n+        throw new ArithmeticException(\"The denominator must not be zero\");\n+    }\n+    if (denominator \u003c 0) {\n+        numerator \u003d -numerator;\n+        denominator \u003d -denominator;\n+    }\n+    int gcd \u003d greatestCommonDenominator(Math.abs(numerator), denominator);\n+    if (gcd \u003d\u003d 0) {\n+        return new Fraction(numerator, denominator);\n+    }\n+    return new Fraction(numerator / gcd, denominator / gcd);\n+}\n\\ No newline at end of file\n",
      "actualSource": "public static Fraction getReducedFraction(int numerator, int denominator) {\n    if (denominator \u003d\u003d 0) {\n        throw new ArithmeticException(\"The denominator must not be zero\");\n    }\n    if (denominator \u003c 0) {\n        numerator \u003d -numerator;\n        denominator \u003d -denominator;\n    }\n    int gcd \u003d greatestCommonDenominator(Math.abs(numerator), denominator);\n    if (gcd \u003d\u003d 0) {\n        return new Fraction(numerator, denominator);\n    }\n    return new Fraction(numerator / gcd, denominator / gcd);\n}",
      "path": "src/java/org/apache/commons/lang/math/Fraction.java",
      "functionStartLine": 182,
      "functionName": "getReducedFraction",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eCreates a \u003ccode\u003eFraction\u003c/code\u003e instance with the 2 parts \nof a fraction Y/Z.\u003c/p\u003e\n\n\u003cp\u003eAny negative signs are resolved to be on the numerator.\u003c/p\u003e\n\n@param numerator the numerator, for example the three in \u0027three sevenths\u0027\n@param denominator the denominator, for example the seven in \u0027three sevenths\u0027\n@return a new fraction instance, with the numerator and denominator reduced\n@throws ArithmeticException if the denomiator is zero\n"
    }
  }
}