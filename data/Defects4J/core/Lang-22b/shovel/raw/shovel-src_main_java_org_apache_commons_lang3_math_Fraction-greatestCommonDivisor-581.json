{
  "origin": "codeshovel",
  "repositoryName": "Lang-22b",
  "repositoryPath": "/tmp/Lang-22b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Fraction.java",
  "functionName": "greatestCommonDivisor",
  "functionId": "greatestCommonDivisor___u-int__v-int",
  "sourceFilePath": "src/main/java/org/apache/commons/lang3/math/Fraction.java",
  "functionAnnotation": "",
  "functionDoc": "\u003cp\u003eGets the greatest common divisor of the absolute value of\ntwo numbers, using the \"binary gcd\" method which avoids\ndivision and modulo operations.  See Knuth 4.5.2 algorithm B.\nThis algorithm is due to Josef Stein (1961).\u003c/p\u003e\n\n@param u a non-zero number\n@param v a non-zero number\n@return the greatest common divisor, never zero\n",
  "functionStartLine": 581,
  "functionEndLine": 623,
  "numCommitsSeen": 55,
  "timeTaken": 2021,
  "changeHistory": [
    "b1686009b5494119575d43525b0829162ab79853",
    "586080851f6bca4d7aa84a7d307203ad8222407e",
    "dcdea66eff6cee2cd956e8ad2a92ab3a7c3a2f09",
    "9a662f1bfd76c49bfcb9e9947f008aade2db54eb",
    "ab3779080b0c12668cca7fc9f12d6f38d6495892",
    "19858f58bc450f06cbb401c6bb8657c078049dd0",
    "7e8976d60b8a24f9fc03f89d98304d77e6153b6d"
  ],
  "changeHistoryShort": {
    "b1686009b5494119575d43525b0829162ab79853": "Yfilerename",
    "586080851f6bca4d7aa84a7d307203ad8222407e": "Yfilerename",
    "dcdea66eff6cee2cd956e8ad2a92ab3a7c3a2f09": "Ybodychange",
    "9a662f1bfd76c49bfcb9e9947f008aade2db54eb": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "ab3779080b0c12668cca7fc9f12d6f38d6495892": "Ymultichange(Yrename,Ydocchange)",
    "19858f58bc450f06cbb401c6bb8657c078049dd0": "Ydocchange",
    "7e8976d60b8a24f9fc03f89d98304d77e6153b6d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b1686009b5494119575d43525b0829162ab79853": {
      "type": "Yfilerename",
      "commitMessage": "Move main source to src/main/java\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@895322 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/2/10, 6:11 PM",
      "commitName": "b1686009b5494119575d43525b0829162ab79853",
      "commitAuthor": "Paul C. Benedict Jr",
      "commitDateOld": "1/2/10, 6:09 PM",
      "commitNameOld": "1f725a97e73edd27301e889408832b34a3d69e63",
      "commitAuthorOld": "Paul C. Benedict Jr",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private static int greatestCommonDivisor(int u, int v) {\n    if (Math.abs(u) \u003c\u003d 1 || Math.abs(v) \u003c\u003d 1) {\n        return 1;\n    }\n    if (u \u003e 0) {\n        u \u003d -u;\n    }\n    if (v \u003e 0) {\n        v \u003d -v;\n    }\n    int k \u003d 0;\n    while ((u \u0026 1) \u003d\u003d 0 \u0026\u0026 (v \u0026 1) \u003d\u003d 0 \u0026\u0026 k \u003c 31) {\n        u /\u003d 2;\n        v /\u003d 2;\n        k++;\n    }\n    if (k \u003d\u003d 31) {\n        throw new ArithmeticException(\"overflow: gcd is 2^31\");\n    }\n    int t \u003d ((u \u0026 1) \u003d\u003d 1) ? v : -(u / 2);\n    do {\n        while ((t \u0026 1) \u003d\u003d 0) {\n            t /\u003d 2;\n        }\n        if (t \u003e 0) {\n            u \u003d -t;\n        } else {\n            v \u003d t;\n        }\n        t \u003d (v - u) / 2;\n    } while (t !\u003d 0);\n    return -u * (1 \u003c\u003c k);\n}",
      "path": "src/main/java/org/apache/commons/lang3/math/Fraction.java",
      "functionStartLine": 576,
      "functionName": "greatestCommonDivisor",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eGets the greatest common divisor of the absolute value of\ntwo numbers, using the \"binary gcd\" method which avoids\ndivision and modulo operations.  See Knuth 4.5.2 algorithm B.\nThis algorithm is due to Josef Stein (1961).\u003c/p\u003e\n\n@param u a non-zero number\n@param v a non-zero number\n@return the greatest common divisor, never zero\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/lang3/math/Fraction.java",
        "newPath": "src/main/java/org/apache/commons/lang3/math/Fraction.java"
      }
    },
    "586080851f6bca4d7aa84a7d307203ad8222407e": {
      "type": "Yfilerename",
      "commitMessage": "Changing directory name from lang to lang3. Build will fail (probably) until Java code is changed in subsequent commit. LANG-563\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@889202 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/10/09, 3:33 AM",
      "commitName": "586080851f6bca4d7aa84a7d307203ad8222407e",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "12/10/09, 3:31 AM",
      "commitNameOld": "da479d635f66c1f82a1f858591cfb1b9941457ae",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private static int greatestCommonDivisor(int u, int v) {\n    if (Math.abs(u) \u003c\u003d 1 || Math.abs(v) \u003c\u003d 1) {\n        return 1;\n    }\n    if (u \u003e 0) {\n        u \u003d -u;\n    }\n    if (v \u003e 0) {\n        v \u003d -v;\n    }\n    int k \u003d 0;\n    while ((u \u0026 1) \u003d\u003d 0 \u0026\u0026 (v \u0026 1) \u003d\u003d 0 \u0026\u0026 k \u003c 31) {\n        u /\u003d 2;\n        v /\u003d 2;\n        k++;\n    }\n    if (k \u003d\u003d 31) {\n        throw new ArithmeticException(\"overflow: gcd is 2^31\");\n    }\n    int t \u003d ((u \u0026 1) \u003d\u003d 1) ? v : -(u / 2);\n    do {\n        while ((t \u0026 1) \u003d\u003d 0) {\n            t /\u003d 2;\n        }\n        if (t \u003e 0) {\n            u \u003d -t;\n        } else {\n            v \u003d t;\n        }\n        t \u003d (v - u) / 2;\n    } while (t !\u003d 0);\n    return -u * (1 \u003c\u003c k);\n}",
      "path": "src/java/org/apache/commons/lang3/math/Fraction.java",
      "functionStartLine": 576,
      "functionName": "greatestCommonDivisor",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eGets the greatest common divisor of the absolute value of\ntwo numbers, using the \"binary gcd\" method which avoids\ndivision and modulo operations.  See Knuth 4.5.2 algorithm B.\nThis algorithm is due to Josef Stein (1961).\u003c/p\u003e\n\n@param u a non-zero number\n@param v a non-zero number\n@return the greatest common divisor, never zero\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/lang/math/Fraction.java",
        "newPath": "src/java/org/apache/commons/lang3/math/Fraction.java"
      }
    },
    "dcdea66eff6cee2cd956e8ad2a92ab3a7c3a2f09": {
      "type": "Ybodychange",
      "commitMessage": "[LANG-380] return when either arg \u003d\u003d 0 plus early return when either \u003d\u003d 1\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@598705 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/27/07, 9:24 AM",
      "commitName": "dcdea66eff6cee2cd956e8ad2a92ab3a7c3a2f09",
      "commitAuthor": "Matthew Jason Benson",
      "commitDateOld": "12/22/06, 11:29 AM",
      "commitNameOld": "9fbf21689aa7a5837db59f5e34cdf1c1af1dca26",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 339.91,
      "commitsBetweenForRepo": 188,
      "commitsBetweenForFile": 1,
      "actualSource": "private static int greatestCommonDivisor(int u, int v) {\n    if (Math.abs(u) \u003c\u003d 1 || Math.abs(v) \u003c\u003d 1) {\n        return 1;\n    }\n    if (u \u003e 0) {\n        u \u003d -u;\n    }\n    if (v \u003e 0) {\n        v \u003d -v;\n    }\n    int k \u003d 0;\n    while ((u \u0026 1) \u003d\u003d 0 \u0026\u0026 (v \u0026 1) \u003d\u003d 0 \u0026\u0026 k \u003c 31) {\n        u /\u003d 2;\n        v /\u003d 2;\n        k++;\n    }\n    if (k \u003d\u003d 31) {\n        throw new ArithmeticException(\"overflow: gcd is 2^31\");\n    }\n    int t \u003d ((u \u0026 1) \u003d\u003d 1) ? v : -(u / 2);\n    do {\n        while ((t \u0026 1) \u003d\u003d 0) {\n            t /\u003d 2;\n        }\n        if (t \u003e 0) {\n            u \u003d -t;\n        } else {\n            v \u003d t;\n        }\n        t \u003d (v - u) / 2;\n    } while (t !\u003d 0);\n    return -u * (1 \u003c\u003c k);\n}",
      "path": "src/java/org/apache/commons/lang/math/Fraction.java",
      "functionStartLine": 569,
      "functionName": "greatestCommonDivisor",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eGets the greatest common divisor of the absolute value of\ntwo numbers, using the \"binary gcd\" method which avoids\ndivision and modulo operations.  See Knuth 4.5.2 algorithm B.\nThis algorithm is due to Josef Stein (1961).\u003c/p\u003e\n\n@param u a non-zero number\n@param v a non-zero number\n@return the greatest common divisor, never zero\n",
      "diff": "@@ -1,30 +1,33 @@\n private static int greatestCommonDivisor(int u, int v) {\n+    if (Math.abs(u) \u003c\u003d 1 || Math.abs(v) \u003c\u003d 1) {\n+        return 1;\n+    }\n     if (u \u003e 0) {\n         u \u003d -u;\n     }\n     if (v \u003e 0) {\n         v \u003d -v;\n     }\n     int k \u003d 0;\n     while ((u \u0026 1) \u003d\u003d 0 \u0026\u0026 (v \u0026 1) \u003d\u003d 0 \u0026\u0026 k \u003c 31) {\n         u /\u003d 2;\n         v /\u003d 2;\n         k++;\n     }\n     if (k \u003d\u003d 31) {\n         throw new ArithmeticException(\"overflow: gcd is 2^31\");\n     }\n     int t \u003d ((u \u0026 1) \u003d\u003d 1) ? v : -(u / 2);\n     do {\n         while ((t \u0026 1) \u003d\u003d 0) {\n             t /\u003d 2;\n         }\n         if (t \u003e 0) {\n             u \u003d -t;\n         } else {\n             v \u003d t;\n         }\n         t \u003d (v - u) / 2;\n     } while (t !\u003d 0);\n     return -u * (1 \u003c\u003c k);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9a662f1bfd76c49bfcb9e9947f008aade2db54eb": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "Fixed numeric problems reported in PR #29294\nSubmitted by: C. Scott Ananian\nReviewed by: Phil Steitz\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137879 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/11/04, 4:20 PM",
      "commitName": "9a662f1bfd76c49bfcb9e9947f008aade2db54eb",
      "commitAuthor": "Phil Steitz",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Fixed numeric problems reported in PR #29294\nSubmitted by: C. Scott Ananian\nReviewed by: Phil Steitz\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137879 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/11/04, 4:20 PM",
          "commitName": "9a662f1bfd76c49bfcb9e9947f008aade2db54eb",
          "commitAuthor": "Phil Steitz",
          "commitDateOld": "2/18/04, 3:06 PM",
          "commitNameOld": "a6c9528cd88adee314a3bf2d0f66c3938906503f",
          "commitAuthorOld": "Gary D. Gregory",
          "daysBetweenCommits": 144.01,
          "commitsBetweenForRepo": 79,
          "commitsBetweenForFile": 1,
          "actualSource": "private static int greatestCommonDivisor(int u, int v) {\n    if (u \u003e 0) {\n        u \u003d -u;\n    }\n    if (v \u003e 0) {\n        v \u003d -v;\n    }\n    int k \u003d 0;\n    while ((u \u0026 1) \u003d\u003d 0 \u0026\u0026 (v \u0026 1) \u003d\u003d 0 \u0026\u0026 k \u003c 31) {\n        u /\u003d 2;\n        v /\u003d 2;\n        k++;\n    }\n    if (k \u003d\u003d 31) {\n        throw new ArithmeticException(\"overflow: gcd is 2^31\");\n    }\n    int t \u003d ((u \u0026 1) \u003d\u003d 1) ? v : -(u / 2);\n    do {\n        while ((t \u0026 1) \u003d\u003d 0) {\n            t /\u003d 2;\n        }\n        if (t \u003e 0) {\n            u \u003d -t;\n        } else {\n            v \u003d t;\n        }\n        t \u003d (v - u) / 2;\n    } while (t !\u003d 0);\n    return -u * (1 \u003c\u003c k);\n}",
          "path": "src/java/org/apache/commons/lang/math/Fraction.java",
          "functionStartLine": 556,
          "functionName": "greatestCommonDivisor",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eGets the greatest common divisor of the absolute value of\ntwo numbers, using the \"binary gcd\" method which avoids\ndivision and modulo operations.  See Knuth 4.5.2 algorithm B.\nThis algorithm is due to Josef Stein (1961).\u003c/p\u003e\n\n@param u a non-zero number\n@param v a non-zero number\n@return the greatest common divisor, never zero\n",
          "diff": "@@ -1,9 +1,30 @@\n-private static int greatestCommonDivisor(int number1, int number2) {\n-    int remainder \u003d number1 % number2;\n-    while (remainder !\u003d 0) {\n-        number1 \u003d number2;\n-        number2 \u003d remainder;\n-        remainder \u003d number1 % number2;\n+private static int greatestCommonDivisor(int u, int v) {\n+    if (u \u003e 0) {\n+        u \u003d -u;\n     }\n-    return number2;\n+    if (v \u003e 0) {\n+        v \u003d -v;\n+    }\n+    int k \u003d 0;\n+    while ((u \u0026 1) \u003d\u003d 0 \u0026\u0026 (v \u0026 1) \u003d\u003d 0 \u0026\u0026 k \u003c 31) {\n+        u /\u003d 2;\n+        v /\u003d 2;\n+        k++;\n+    }\n+    if (k \u003d\u003d 31) {\n+        throw new ArithmeticException(\"overflow: gcd is 2^31\");\n+    }\n+    int t \u003d ((u \u0026 1) \u003d\u003d 1) ? v : -(u / 2);\n+    do {\n+        while ((t \u0026 1) \u003d\u003d 0) {\n+            t /\u003d 2;\n+        }\n+        if (t \u003e 0) {\n+            u \u003d -t;\n+        } else {\n+            v \u003d t;\n+        }\n+        t \u003d (v - u) / 2;\n+    } while (t !\u003d 0);\n+    return -u * (1 \u003c\u003c k);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[number1-int, number2-int]",
            "newValue": "[u-int, v-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Fixed numeric problems reported in PR #29294\nSubmitted by: C. Scott Ananian\nReviewed by: Phil Steitz\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137879 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/11/04, 4:20 PM",
          "commitName": "9a662f1bfd76c49bfcb9e9947f008aade2db54eb",
          "commitAuthor": "Phil Steitz",
          "commitDateOld": "2/18/04, 3:06 PM",
          "commitNameOld": "a6c9528cd88adee314a3bf2d0f66c3938906503f",
          "commitAuthorOld": "Gary D. Gregory",
          "daysBetweenCommits": 144.01,
          "commitsBetweenForRepo": 79,
          "commitsBetweenForFile": 1,
          "actualSource": "private static int greatestCommonDivisor(int u, int v) {\n    if (u \u003e 0) {\n        u \u003d -u;\n    }\n    if (v \u003e 0) {\n        v \u003d -v;\n    }\n    int k \u003d 0;\n    while ((u \u0026 1) \u003d\u003d 0 \u0026\u0026 (v \u0026 1) \u003d\u003d 0 \u0026\u0026 k \u003c 31) {\n        u /\u003d 2;\n        v /\u003d 2;\n        k++;\n    }\n    if (k \u003d\u003d 31) {\n        throw new ArithmeticException(\"overflow: gcd is 2^31\");\n    }\n    int t \u003d ((u \u0026 1) \u003d\u003d 1) ? v : -(u / 2);\n    do {\n        while ((t \u0026 1) \u003d\u003d 0) {\n            t /\u003d 2;\n        }\n        if (t \u003e 0) {\n            u \u003d -t;\n        } else {\n            v \u003d t;\n        }\n        t \u003d (v - u) / 2;\n    } while (t !\u003d 0);\n    return -u * (1 \u003c\u003c k);\n}",
          "path": "src/java/org/apache/commons/lang/math/Fraction.java",
          "functionStartLine": 556,
          "functionName": "greatestCommonDivisor",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eGets the greatest common divisor of the absolute value of\ntwo numbers, using the \"binary gcd\" method which avoids\ndivision and modulo operations.  See Knuth 4.5.2 algorithm B.\nThis algorithm is due to Josef Stein (1961).\u003c/p\u003e\n\n@param u a non-zero number\n@param v a non-zero number\n@return the greatest common divisor, never zero\n",
          "diff": "@@ -1,9 +1,30 @@\n-private static int greatestCommonDivisor(int number1, int number2) {\n-    int remainder \u003d number1 % number2;\n-    while (remainder !\u003d 0) {\n-        number1 \u003d number2;\n-        number2 \u003d remainder;\n-        remainder \u003d number1 % number2;\n+private static int greatestCommonDivisor(int u, int v) {\n+    if (u \u003e 0) {\n+        u \u003d -u;\n     }\n-    return number2;\n+    if (v \u003e 0) {\n+        v \u003d -v;\n+    }\n+    int k \u003d 0;\n+    while ((u \u0026 1) \u003d\u003d 0 \u0026\u0026 (v \u0026 1) \u003d\u003d 0 \u0026\u0026 k \u003c 31) {\n+        u /\u003d 2;\n+        v /\u003d 2;\n+        k++;\n+    }\n+    if (k \u003d\u003d 31) {\n+        throw new ArithmeticException(\"overflow: gcd is 2^31\");\n+    }\n+    int t \u003d ((u \u0026 1) \u003d\u003d 1) ? v : -(u / 2);\n+    do {\n+        while ((t \u0026 1) \u003d\u003d 0) {\n+            t /\u003d 2;\n+        }\n+        if (t \u003e 0) {\n+            u \u003d -t;\n+        } else {\n+            v \u003d t;\n+        }\n+        t \u003d (v - u) / 2;\n+    } while (t !\u003d 0);\n+    return -u * (1 \u003c\u003c k);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Fixed numeric problems reported in PR #29294\nSubmitted by: C. Scott Ananian\nReviewed by: Phil Steitz\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137879 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/11/04, 4:20 PM",
          "commitName": "9a662f1bfd76c49bfcb9e9947f008aade2db54eb",
          "commitAuthor": "Phil Steitz",
          "commitDateOld": "2/18/04, 3:06 PM",
          "commitNameOld": "a6c9528cd88adee314a3bf2d0f66c3938906503f",
          "commitAuthorOld": "Gary D. Gregory",
          "daysBetweenCommits": 144.01,
          "commitsBetweenForRepo": 79,
          "commitsBetweenForFile": 1,
          "actualSource": "private static int greatestCommonDivisor(int u, int v) {\n    if (u \u003e 0) {\n        u \u003d -u;\n    }\n    if (v \u003e 0) {\n        v \u003d -v;\n    }\n    int k \u003d 0;\n    while ((u \u0026 1) \u003d\u003d 0 \u0026\u0026 (v \u0026 1) \u003d\u003d 0 \u0026\u0026 k \u003c 31) {\n        u /\u003d 2;\n        v /\u003d 2;\n        k++;\n    }\n    if (k \u003d\u003d 31) {\n        throw new ArithmeticException(\"overflow: gcd is 2^31\");\n    }\n    int t \u003d ((u \u0026 1) \u003d\u003d 1) ? v : -(u / 2);\n    do {\n        while ((t \u0026 1) \u003d\u003d 0) {\n            t /\u003d 2;\n        }\n        if (t \u003e 0) {\n            u \u003d -t;\n        } else {\n            v \u003d t;\n        }\n        t \u003d (v - u) / 2;\n    } while (t !\u003d 0);\n    return -u * (1 \u003c\u003c k);\n}",
          "path": "src/java/org/apache/commons/lang/math/Fraction.java",
          "functionStartLine": 556,
          "functionName": "greatestCommonDivisor",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eGets the greatest common divisor of the absolute value of\ntwo numbers, using the \"binary gcd\" method which avoids\ndivision and modulo operations.  See Knuth 4.5.2 algorithm B.\nThis algorithm is due to Josef Stein (1961).\u003c/p\u003e\n\n@param u a non-zero number\n@param v a non-zero number\n@return the greatest common divisor, never zero\n",
          "diff": "@@ -1,9 +1,30 @@\n-private static int greatestCommonDivisor(int number1, int number2) {\n-    int remainder \u003d number1 % number2;\n-    while (remainder !\u003d 0) {\n-        number1 \u003d number2;\n-        number2 \u003d remainder;\n-        remainder \u003d number1 % number2;\n+private static int greatestCommonDivisor(int u, int v) {\n+    if (u \u003e 0) {\n+        u \u003d -u;\n     }\n-    return number2;\n+    if (v \u003e 0) {\n+        v \u003d -v;\n+    }\n+    int k \u003d 0;\n+    while ((u \u0026 1) \u003d\u003d 0 \u0026\u0026 (v \u0026 1) \u003d\u003d 0 \u0026\u0026 k \u003c 31) {\n+        u /\u003d 2;\n+        v /\u003d 2;\n+        k++;\n+    }\n+    if (k \u003d\u003d 31) {\n+        throw new ArithmeticException(\"overflow: gcd is 2^31\");\n+    }\n+    int t \u003d ((u \u0026 1) \u003d\u003d 1) ? v : -(u / 2);\n+    do {\n+        while ((t \u0026 1) \u003d\u003d 0) {\n+            t /\u003d 2;\n+        }\n+        if (t \u003e 0) {\n+            u \u003d -t;\n+        } else {\n+            v \u003d t;\n+        }\n+        t \u003d (v - u) / 2;\n+    } while (t !\u003d 0);\n+    return -u * (1 \u003c\u003c k);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "\u003cp\u003eGets the greatest common divisor of two numbers.\u003c/p\u003e\n\n@param number1 a positive number\n@param number2 a positive number\n@return the greatest common divisor, never zero\n",
            "newValue": "\u003cp\u003eGets the greatest common divisor of the absolute value of\ntwo numbers, using the \"binary gcd\" method which avoids\ndivision and modulo operations.  See Knuth 4.5.2 algorithm B.\nThis algorithm is due to Josef Stein (1961).\u003c/p\u003e\n\n@param u a non-zero number\n@param v a non-zero number\n@return the greatest common divisor, never zero\n"
          }
        }
      ]
    },
    "ab3779080b0c12668cca7fc9f12d6f38d6495892": {
      "type": "Ymultichange(Yrename,Ydocchange)",
      "commitMessage": "Improve Fraction Javadoc, implementation and tests\nbug 22386, from Phil Steitz\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137586 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/13/03, 4:42 PM",
      "commitName": "ab3779080b0c12668cca7fc9f12d6f38d6495892",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "Improve Fraction Javadoc, implementation and tests\nbug 22386, from Phil Steitz\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137586 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "8/13/03, 4:42 PM",
          "commitName": "ab3779080b0c12668cca7fc9f12d6f38d6495892",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "8/3/03, 7:01 PM",
          "commitNameOld": "19858f58bc450f06cbb401c6bb8657c078049dd0",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 9.9,
          "commitsBetweenForRepo": 18,
          "commitsBetweenForFile": 1,
          "actualSource": "private static int greatestCommonDivisor(int number1, int number2) {\n    int remainder \u003d number1 % number2;\n    while (remainder !\u003d 0) {\n        number1 \u003d number2;\n        number2 \u003d remainder;\n        remainder \u003d number1 % number2;\n    }\n    return number2;\n}",
          "path": "src/java/org/apache/commons/lang/math/Fraction.java",
          "functionStartLine": 528,
          "functionName": "greatestCommonDivisor",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eGets the greatest common divisor of two numbers.\u003c/p\u003e\n\n@param number1 a positive number\n@param number2 a positive number\n@return the greatest common divisor, never zero\n",
          "diff": "@@ -1,9 +1,9 @@\n-private static int greatestCommonDenominator(int number1, int number2) {\n+private static int greatestCommonDivisor(int number1, int number2) {\n     int remainder \u003d number1 % number2;\n     while (remainder !\u003d 0) {\n         number1 \u003d number2;\n         number2 \u003d remainder;\n         remainder \u003d number1 % number2;\n     }\n     return number2;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "greatestCommonDenominator",
            "newValue": "greatestCommonDivisor"
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Improve Fraction Javadoc, implementation and tests\nbug 22386, from Phil Steitz\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137586 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "8/13/03, 4:42 PM",
          "commitName": "ab3779080b0c12668cca7fc9f12d6f38d6495892",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "8/3/03, 7:01 PM",
          "commitNameOld": "19858f58bc450f06cbb401c6bb8657c078049dd0",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 9.9,
          "commitsBetweenForRepo": 18,
          "commitsBetweenForFile": 1,
          "actualSource": "private static int greatestCommonDivisor(int number1, int number2) {\n    int remainder \u003d number1 % number2;\n    while (remainder !\u003d 0) {\n        number1 \u003d number2;\n        number2 \u003d remainder;\n        remainder \u003d number1 % number2;\n    }\n    return number2;\n}",
          "path": "src/java/org/apache/commons/lang/math/Fraction.java",
          "functionStartLine": 528,
          "functionName": "greatestCommonDivisor",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eGets the greatest common divisor of two numbers.\u003c/p\u003e\n\n@param number1 a positive number\n@param number2 a positive number\n@return the greatest common divisor, never zero\n",
          "diff": "@@ -1,9 +1,9 @@\n-private static int greatestCommonDenominator(int number1, int number2) {\n+private static int greatestCommonDivisor(int number1, int number2) {\n     int remainder \u003d number1 % number2;\n     while (remainder !\u003d 0) {\n         number1 \u003d number2;\n         number2 \u003d remainder;\n         remainder \u003d number1 % number2;\n     }\n     return number2;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "\u003cp\u003eGets the greatest common denominator of two numbers.\u003c/p\u003e\n\n@param number1 a positive number\n@param number2 a positive number\n@return the greatest common denominator, never zero\n",
            "newValue": "\u003cp\u003eGets the greatest common divisor of two numbers.\u003c/p\u003e\n\n@param number1 a positive number\n@param number2 a positive number\n@return the greatest common divisor, never zero\n"
          }
        }
      ]
    },
    "19858f58bc450f06cbb401c6bb8657c078049dd0": {
      "type": "Ydocchange",
      "commitMessage": "Extra tests suggested by Clover\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137568 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/3/03, 7:01 PM",
      "commitName": "19858f58bc450f06cbb401c6bb8657c078049dd0",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/3/03, 6:20 PM",
      "commitNameOld": "245399b272732dbd3308a2940ebfdc7317572517",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private static int greatestCommonDenominator(int number1, int number2) {\n    int remainder \u003d number1 % number2;\n    while (remainder !\u003d 0) {\n        number1 \u003d number2;\n        number2 \u003d remainder;\n        remainder \u003d number1 % number2;\n    }\n    return number2;\n}",
      "path": "src/java/org/apache/commons/lang/math/Fraction.java",
      "functionStartLine": 506,
      "functionName": "greatestCommonDenominator",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eGets the greatest common denominator of two numbers.\u003c/p\u003e\n\n@param number1 a positive number\n@param number2 a positive number\n@return the greatest common denominator, never zero\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "\u003cp\u003eGets the greatest common denominator of two numbers.\u003c/p\u003e\n\n@param number1 a positive number\n@param number2 a positive number\n@return the greatest common denominator\n",
        "newValue": "\u003cp\u003eGets the greatest common denominator of two numbers.\u003c/p\u003e\n\n@param number1 a positive number\n@param number2 a positive number\n@return the greatest common denominator, never zero\n"
      }
    },
    "7e8976d60b8a24f9fc03f89d98304d77e6153b6d": {
      "type": "Yintroduced",
      "commitMessage": "Add Fraction class and associated tests\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137198 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/22/02, 11:39 AM",
      "commitName": "7e8976d60b8a24f9fc03f89d98304d77e6153b6d",
      "commitAuthor": "Stephen Colebourne",
      "diff": "@@ -0,0 +1,9 @@\n+private static int greatestCommonDenominator(int number1, int number2) {\n+    int remainder \u003d number1 % number2;\n+    while (remainder !\u003d 0) {\n+        number1 \u003d number2;\n+        number2 \u003d remainder;\n+        remainder \u003d number1 % number2;\n+    }\n+    return number2;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private static int greatestCommonDenominator(int number1, int number2) {\n    int remainder \u003d number1 % number2;\n    while (remainder !\u003d 0) {\n        number1 \u003d number2;\n        number2 \u003d remainder;\n        remainder \u003d number1 % number2;\n    }\n    return number2;\n}",
      "path": "src/java/org/apache/commons/lang/math/Fraction.java",
      "functionStartLine": 497,
      "functionName": "greatestCommonDenominator",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eGets the greatest common denominator of two numbers.\u003c/p\u003e\n\n@param number1 a positive number\n@param number2 a positive number\n@return the greatest common denominator\n"
    }
  }
}