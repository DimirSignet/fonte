{
  "origin": "codeshovel",
  "repositoryName": "Closure-17b",
  "repositoryPath": "/tmp/Closure-17b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TypeCheck.java",
  "functionName": "visitVar",
  "functionId": "visitVar___t-NodeTraversal__n-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/TypeCheck.java",
  "functionAnnotation": "",
  "functionDoc": "Visits a VAR node.\n\n@param t The node traversal object that supplies context, such as the\nscope chain to use in name lookups as well as error reporting.\n@param n The node being visited.\n",
  "functionStartLine": 1429,
  "functionEndLine": 1458,
  "numCommitsSeen": 80,
  "timeTaken": 6012,
  "changeHistory": [
    "9614c7c0ffe2418359fe91be2a0e61400142237d",
    "c764a46abf211d4677fadc33f7d466e5b14fa088",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "9614c7c0ffe2418359fe91be2a0e61400142237d": "Ybodychange",
    "c764a46abf211d4677fadc33f7d466e5b14fa088": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9614c7c0ffe2418359fe91be2a0e61400142237d": {
      "type": "Ybodychange",
      "commitMessage": "\nremove some special-case code for enums\nnow that we handle object literals properly, we can just\nuse the normal checks\n\nR\u003dacleung\nDELTA\u003d137  (46 added, 26 deleted, 65 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3459\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1509 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/12/11, 8:07 PM",
      "commitName": "9614c7c0ffe2418359fe91be2a0e61400142237d",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "10/4/11, 4:04 PM",
      "commitNameOld": "febdacb341025491b3ae83ee8ffa9d22c69c295e",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 8.17,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "actualSource": "private void visitVar(NodeTraversal t, Node n) {\n    JSDocInfo varInfo \u003d n.hasOneChild() ? n.getJSDocInfo() : null;\n    for (Node name : n.children()) {\n        Node value \u003d name.getFirstChild();\n        Var var \u003d t.getScope().getVar(name.getString());\n        if (value !\u003d null) {\n            JSType valueType \u003d getJSType(value);\n            JSType nameType \u003d var.getType();\n            nameType \u003d (nameType \u003d\u003d null) ? getNativeType(UNKNOWN_TYPE) : nameType;\n            JSDocInfo info \u003d name.getJSDocInfo();\n            if (info \u003d\u003d null) {\n                info \u003d varInfo;\n            }\n            checkEnumAlias(t, info, value);\n            if (var.isTypeInferred()) {\n                ensureTyped(t, name, valueType);\n            } else {\n                validator.expectCanAssignTo(t, value, valueType, nameType, \"initializing variable\");\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1389,
      "functionName": "visitVar",
      "functionAnnotation": "",
      "functionDoc": "Visits a VAR node.\n\n@param t The node traversal object that supplies context, such as the\nscope chain to use in name lookups as well as error reporting.\n@param n The node being visited.\n",
      "diff": "@@ -1,23 +1,22 @@\n private void visitVar(NodeTraversal t, Node n) {\n     JSDocInfo varInfo \u003d n.hasOneChild() ? n.getJSDocInfo() : null;\n     for (Node name : n.children()) {\n         Node value \u003d name.getFirstChild();\n         Var var \u003d t.getScope().getVar(name.getString());\n         if (value !\u003d null) {\n             JSType valueType \u003d getJSType(value);\n             JSType nameType \u003d var.getType();\n             nameType \u003d (nameType \u003d\u003d null) ? getNativeType(UNKNOWN_TYPE) : nameType;\n             JSDocInfo info \u003d name.getJSDocInfo();\n             if (info \u003d\u003d null) {\n                 info \u003d varInfo;\n             }\n-            if (info !\u003d null \u0026\u0026 info.hasEnumParameterType()) {\n-                checkEnumInitializer(t, value, info.getEnumParameterType().evaluate(t.getScope(), typeRegistry));\n-            } else if (var.isTypeInferred()) {\n+            checkEnumAlias(t, info, value);\n+            if (var.isTypeInferred()) {\n                 ensureTyped(t, name, valueType);\n             } else {\n                 validator.expectCanAssignTo(t, value, valueType, nameType, \"initializing variable\");\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c764a46abf211d4677fadc33f7d466e5b14fa088": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/04/13 by john\n\n        Here is a crazy thought, let\u0027s not require the JSTypeRegistry during\n        parsing.\n\n        There are basically two changes here:\n        1) The IRFactory was looking for enums to seed the JSTypeRegistry, so\n        we do that when we setup for type interence.\n        2) The JSDocParser was checking the types of @defines objects, now do\n        that during ProcessDefines.\n\n        R\u003drobert,mark\n        DELTA\u003d207  (82 added, 89 deleted, 36 changed)\n\nChange on 2010/04/14 by nick\n\n        Add a debugging function for JSType hashcodes.\n        i found this useful, and thought others might too.\n\n        R\u003djohn\n        DELTA\u003d69  (69 added, 0 deleted, 0 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dfqsoxx\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@183 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/14/10, 9:15 AM",
      "commitName": "c764a46abf211d4677fadc33f7d466e5b14fa088",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/5/10, 12:30 PM",
      "commitNameOld": "222eafd303155b3eac5cd244584b2cb3c4c11975",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 8.86,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "private void visitVar(NodeTraversal t, Node n) {\n    JSDocInfo varInfo \u003d n.hasOneChild() ? n.getJSDocInfo() : null;\n    for (Node name : n.children()) {\n        Node value \u003d name.getFirstChild();\n        Var var \u003d t.getScope().getVar(name.getString());\n        if (value !\u003d null) {\n            JSType valueType \u003d getJSType(value);\n            JSType nameType \u003d var.getType();\n            nameType \u003d (nameType \u003d\u003d null) ? getNativeType(UNKNOWN_TYPE) : nameType;\n            JSDocInfo info \u003d name.getJSDocInfo();\n            if (info \u003d\u003d null) {\n                info \u003d varInfo;\n            }\n            if (info !\u003d null \u0026\u0026 info.hasEnumParameterType()) {\n                checkEnumInitializer(t, value, info.getEnumParameterType().evaluate(t.getScope(), typeRegistry));\n            } else if (var.isTypeInferred()) {\n                ensureTyped(t, name, valueType);\n            } else {\n                validator.expectCanAssignTo(t, value, valueType, nameType, \"initializing variable\");\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1254,
      "functionName": "visitVar",
      "functionAnnotation": "",
      "functionDoc": "Visits a VAR node.\n\n@param t The node traversal object that supplies context, such as the\nscope chain to use in name lookups as well as error reporting.\n@param n The node being visited.\n",
      "diff": "@@ -1,23 +1,23 @@\n private void visitVar(NodeTraversal t, Node n) {\n     JSDocInfo varInfo \u003d n.hasOneChild() ? n.getJSDocInfo() : null;\n     for (Node name : n.children()) {\n         Node value \u003d name.getFirstChild();\n         Var var \u003d t.getScope().getVar(name.getString());\n         if (value !\u003d null) {\n             JSType valueType \u003d getJSType(value);\n             JSType nameType \u003d var.getType();\n             nameType \u003d (nameType \u003d\u003d null) ? getNativeType(UNKNOWN_TYPE) : nameType;\n             JSDocInfo info \u003d name.getJSDocInfo();\n             if (info \u003d\u003d null) {\n                 info \u003d varInfo;\n             }\n             if (info !\u003d null \u0026\u0026 info.hasEnumParameterType()) {\n-                checkEnumInitializer(t, value, info.getEnumParameterType().evaluate(t.getScope()));\n+                checkEnumInitializer(t, value, info.getEnumParameterType().evaluate(t.getScope(), typeRegistry));\n             } else if (var.isTypeInferred()) {\n                 ensureTyped(t, name, valueType);\n             } else {\n                 validator.expectCanAssignTo(t, value, valueType, nameType, \"initializing variable\");\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,23 @@\n+private void visitVar(NodeTraversal t, Node n) {\n+    JSDocInfo varInfo \u003d n.hasOneChild() ? n.getJSDocInfo() : null;\n+    for (Node name : n.children()) {\n+        Node value \u003d name.getFirstChild();\n+        Var var \u003d t.getScope().getVar(name.getString());\n+        if (value !\u003d null) {\n+            JSType valueType \u003d getJSType(value);\n+            JSType nameType \u003d var.getType();\n+            nameType \u003d (nameType \u003d\u003d null) ? getNativeType(UNKNOWN_TYPE) : nameType;\n+            JSDocInfo info \u003d name.getJSDocInfo();\n+            if (info \u003d\u003d null) {\n+                info \u003d varInfo;\n+            }\n+            if (info !\u003d null \u0026\u0026 info.hasEnumParameterType()) {\n+                checkEnumInitializer(t, value, info.getEnumParameterType().evaluate(t.getScope()));\n+            } else if (var.isTypeInferred()) {\n+                ensureTyped(t, name, valueType);\n+            } else {\n+                validator.expectCanAssignTo(t, value, valueType, nameType, \"initializing variable\");\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void visitVar(NodeTraversal t, Node n) {\n    JSDocInfo varInfo \u003d n.hasOneChild() ? n.getJSDocInfo() : null;\n    for (Node name : n.children()) {\n        Node value \u003d name.getFirstChild();\n        Var var \u003d t.getScope().getVar(name.getString());\n        if (value !\u003d null) {\n            JSType valueType \u003d getJSType(value);\n            JSType nameType \u003d var.getType();\n            nameType \u003d (nameType \u003d\u003d null) ? getNativeType(UNKNOWN_TYPE) : nameType;\n            JSDocInfo info \u003d name.getJSDocInfo();\n            if (info \u003d\u003d null) {\n                info \u003d varInfo;\n            }\n            if (info !\u003d null \u0026\u0026 info.hasEnumParameterType()) {\n                checkEnumInitializer(t, value, info.getEnumParameterType().evaluate(t.getScope()));\n            } else if (var.isTypeInferred()) {\n                ensureTyped(t, name, valueType);\n            } else {\n                validator.expectCanAssignTo(t, value, valueType, nameType, \"initializing variable\");\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1222,
      "functionName": "visitVar",
      "functionAnnotation": "",
      "functionDoc": "Visits a VAR node.\n\n@param t The node traversal object that supplies context, such as the\nscope chain to use in name lookups as well as error reporting.\n@param n The node being visited.\n"
    }
  }
}