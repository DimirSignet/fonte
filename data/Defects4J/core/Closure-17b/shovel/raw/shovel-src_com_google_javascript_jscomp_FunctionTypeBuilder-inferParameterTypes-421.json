{
  "origin": "codeshovel",
  "repositoryName": "Closure-17b",
  "repositoryPath": "/tmp/Closure-17b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FunctionTypeBuilder.java",
  "functionName": "inferParameterTypes",
  "functionId": "inferParameterTypes___argsParent-Node(annotations-@Nullable)__info-JSDocInfo(annotations-@Nullable)",
  "sourceFilePath": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
  "functionAnnotation": "",
  "functionDoc": "Infer the parameter types from the list of argument names and\nthe doc info.\n",
  "functionStartLine": 421,
  "functionEndLine": 489,
  "numCommitsSeen": 51,
  "timeTaken": 2148,
  "changeHistory": [
    "616f796f52ee78e1a655e913e0b339d6c5e1347e",
    "16a9c4d210fea92c24ff05aa2d6767e3f5ceb362",
    "00b1517c53912ac6843c257c0a6ead1176e8c5ee",
    "b8fb1c4377809503625087f13c1ade664ce9b7e2",
    "c764a46abf211d4677fadc33f7d466e5b14fa088",
    "6a36f04485599820ff86441accee002b4deec2eb",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "616f796f52ee78e1a655e913e0b339d6c5e1347e": "Ybodychange",
    "16a9c4d210fea92c24ff05aa2d6767e3f5ceb362": "Ybodychange",
    "00b1517c53912ac6843c257c0a6ead1176e8c5ee": "Ybodychange",
    "b8fb1c4377809503625087f13c1ade664ce9b7e2": "Ybodychange",
    "c764a46abf211d4677fadc33f7d466e5b14fa088": "Ybodychange",
    "6a36f04485599820ff86441accee002b4deec2eb": "Ymultichange(Ybodychange,Yparametermetachange,Ydocchange)",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "616f796f52ee78e1a655e913e0b339d6c5e1347e": {
      "type": "Ybodychange",
      "commitMessage": "\nAdd better support for generic methods.\n\nR\u003dnicksantos\nDELTA\u003d1070  (825 added, 186 deleted, 59 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d4996\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2040 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/12/12, 12:51 PM",
      "commitName": "616f796f52ee78e1a655e913e0b339d6c5e1347e",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "5/31/12, 2:10 PM",
      "commitNameOld": "16a9c4d210fea92c24ff05aa2d6767e3f5ceb362",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 11.95,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "actualSource": "FunctionTypeBuilder inferParameterTypes(@Nullable Node argsParent, @Nullable JSDocInfo info) {\n    if (argsParent \u003d\u003d null) {\n        if (info \u003d\u003d null) {\n            return this;\n        } else {\n            return inferParameterTypes(info);\n        }\n    }\n    Node oldParameterType \u003d null;\n    if (parametersNode !\u003d null) {\n        oldParameterType \u003d parametersNode.getFirstChild();\n    }\n    FunctionParamBuilder builder \u003d new FunctionParamBuilder(typeRegistry);\n    boolean warnedAboutArgList \u003d false;\n    Set\u003cString\u003e allJsDocParams \u003d (info \u003d\u003d null) ? Sets.\u003cString\u003enewHashSet() : Sets.newHashSet(info.getParameterNames());\n    boolean foundTemplateType \u003d false;\n    boolean isVarArgs \u003d false;\n    for (Node arg : argsParent.children()) {\n        String argumentName \u003d arg.getString();\n        allJsDocParams.remove(argumentName);\n        JSType parameterType \u003d null;\n        boolean isOptionalParam \u003d isOptionalParameter(arg, info);\n        isVarArgs \u003d isVarArgsParameter(arg, info);\n        if (info !\u003d null \u0026\u0026 info.hasParameterType(argumentName)) {\n            parameterType \u003d info.getParameterType(argumentName).evaluate(scope, typeRegistry);\n        } else if (oldParameterType !\u003d null \u0026\u0026 oldParameterType.getJSType() !\u003d null) {\n            parameterType \u003d oldParameterType.getJSType();\n            isOptionalParam \u003d oldParameterType.isOptionalArg();\n            isVarArgs \u003d oldParameterType.isVarArgs();\n        } else {\n            parameterType \u003d typeRegistry.getNativeType(UNKNOWN_TYPE);\n        }\n        warnedAboutArgList |\u003d addParameter(builder, parameterType, warnedAboutArgList, isOptionalParam, isVarArgs);\n        if (oldParameterType !\u003d null) {\n            oldParameterType \u003d oldParameterType.getNext();\n        }\n    }\n    if (!isVarArgs) {\n        while (oldParameterType !\u003d null \u0026\u0026 !isVarArgs) {\n            builder.newParameterFromNode(oldParameterType);\n            oldParameterType \u003d oldParameterType.getNext();\n        }\n    }\n    for (String inexistentName : allJsDocParams) {\n        reportWarning(INEXISTANT_PARAM, inexistentName, fnName);\n    }\n    parametersNode \u003d builder.build();\n    return this;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
      "functionStartLine": 421,
      "functionName": "inferParameterTypes",
      "functionAnnotation": "",
      "functionDoc": "Infer the parameter types from the list of argument names and\nthe doc info.\n",
      "diff": "@@ -1,58 +1,49 @@\n FunctionTypeBuilder inferParameterTypes(@Nullable Node argsParent, @Nullable JSDocInfo info) {\n     if (argsParent \u003d\u003d null) {\n         if (info \u003d\u003d null) {\n             return this;\n         } else {\n             return inferParameterTypes(info);\n         }\n     }\n     Node oldParameterType \u003d null;\n     if (parametersNode !\u003d null) {\n         oldParameterType \u003d parametersNode.getFirstChild();\n     }\n     FunctionParamBuilder builder \u003d new FunctionParamBuilder(typeRegistry);\n     boolean warnedAboutArgList \u003d false;\n     Set\u003cString\u003e allJsDocParams \u003d (info \u003d\u003d null) ? Sets.\u003cString\u003enewHashSet() : Sets.newHashSet(info.getParameterNames());\n     boolean foundTemplateType \u003d false;\n     boolean isVarArgs \u003d false;\n     for (Node arg : argsParent.children()) {\n         String argumentName \u003d arg.getString();\n         allJsDocParams.remove(argumentName);\n         JSType parameterType \u003d null;\n         boolean isOptionalParam \u003d isOptionalParameter(arg, info);\n         isVarArgs \u003d isVarArgsParameter(arg, info);\n         if (info !\u003d null \u0026\u0026 info.hasParameterType(argumentName)) {\n             parameterType \u003d info.getParameterType(argumentName).evaluate(scope, typeRegistry);\n         } else if (oldParameterType !\u003d null \u0026\u0026 oldParameterType.getJSType() !\u003d null) {\n             parameterType \u003d oldParameterType.getJSType();\n             isOptionalParam \u003d oldParameterType.isOptionalArg();\n             isVarArgs \u003d oldParameterType.isVarArgs();\n         } else {\n             parameterType \u003d typeRegistry.getNativeType(UNKNOWN_TYPE);\n         }\n-        if (!templateTypeNames.isEmpty() \u0026\u0026 parameterType.restrictByNotNullOrUndefined().isTemplateType()) {\n-            if (foundTemplateType) {\n-                reportError(TEMPLATE_TYPE_DUPLICATED, fnName);\n-            }\n-            foundTemplateType \u003d true;\n-        }\n         warnedAboutArgList |\u003d addParameter(builder, parameterType, warnedAboutArgList, isOptionalParam, isVarArgs);\n         if (oldParameterType !\u003d null) {\n             oldParameterType \u003d oldParameterType.getNext();\n         }\n     }\n     if (!isVarArgs) {\n         while (oldParameterType !\u003d null \u0026\u0026 !isVarArgs) {\n             builder.newParameterFromNode(oldParameterType);\n             oldParameterType \u003d oldParameterType.getNext();\n         }\n     }\n-    if (!templateTypeNames.isEmpty() \u0026\u0026 !foundTemplateType) {\n-        reportError(TEMPLATE_TYPE_EXPECTED, fnName);\n-    }\n     for (String inexistentName : allJsDocParams) {\n         reportWarning(INEXISTANT_PARAM, inexistentName, fnName);\n     }\n     parametersNode \u003d builder.build();\n     return this;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "16a9c4d210fea92c24ff05aa2d6767e3f5ceb362": {
      "type": "Ybodychange",
      "commitMessage": "\nChange @template to be a repeatable JSDoc tag.\n\nR\u003dnicksantos\nDELTA\u003d67  (18 added, 6 deleted, 43 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d4910\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2008 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/31/12, 2:10 PM",
      "commitName": "16a9c4d210fea92c24ff05aa2d6767e3f5ceb362",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "5/18/12, 11:09 AM",
      "commitNameOld": "70a5626922ea7e8c98747e22b6986638ba38fadc",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 13.13,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "actualSource": "FunctionTypeBuilder inferParameterTypes(@Nullable Node argsParent, @Nullable JSDocInfo info) {\n    if (argsParent \u003d\u003d null) {\n        if (info \u003d\u003d null) {\n            return this;\n        } else {\n            return inferParameterTypes(info);\n        }\n    }\n    Node oldParameterType \u003d null;\n    if (parametersNode !\u003d null) {\n        oldParameterType \u003d parametersNode.getFirstChild();\n    }\n    FunctionParamBuilder builder \u003d new FunctionParamBuilder(typeRegistry);\n    boolean warnedAboutArgList \u003d false;\n    Set\u003cString\u003e allJsDocParams \u003d (info \u003d\u003d null) ? Sets.\u003cString\u003enewHashSet() : Sets.newHashSet(info.getParameterNames());\n    boolean foundTemplateType \u003d false;\n    boolean isVarArgs \u003d false;\n    for (Node arg : argsParent.children()) {\n        String argumentName \u003d arg.getString();\n        allJsDocParams.remove(argumentName);\n        JSType parameterType \u003d null;\n        boolean isOptionalParam \u003d isOptionalParameter(arg, info);\n        isVarArgs \u003d isVarArgsParameter(arg, info);\n        if (info !\u003d null \u0026\u0026 info.hasParameterType(argumentName)) {\n            parameterType \u003d info.getParameterType(argumentName).evaluate(scope, typeRegistry);\n        } else if (oldParameterType !\u003d null \u0026\u0026 oldParameterType.getJSType() !\u003d null) {\n            parameterType \u003d oldParameterType.getJSType();\n            isOptionalParam \u003d oldParameterType.isOptionalArg();\n            isVarArgs \u003d oldParameterType.isVarArgs();\n        } else {\n            parameterType \u003d typeRegistry.getNativeType(UNKNOWN_TYPE);\n        }\n        if (!templateTypeNames.isEmpty() \u0026\u0026 parameterType.restrictByNotNullOrUndefined().isTemplateType()) {\n            if (foundTemplateType) {\n                reportError(TEMPLATE_TYPE_DUPLICATED, fnName);\n            }\n            foundTemplateType \u003d true;\n        }\n        warnedAboutArgList |\u003d addParameter(builder, parameterType, warnedAboutArgList, isOptionalParam, isVarArgs);\n        if (oldParameterType !\u003d null) {\n            oldParameterType \u003d oldParameterType.getNext();\n        }\n    }\n    if (!isVarArgs) {\n        while (oldParameterType !\u003d null \u0026\u0026 !isVarArgs) {\n            builder.newParameterFromNode(oldParameterType);\n            oldParameterType \u003d oldParameterType.getNext();\n        }\n    }\n    if (!templateTypeNames.isEmpty() \u0026\u0026 !foundTemplateType) {\n        reportError(TEMPLATE_TYPE_EXPECTED, fnName);\n    }\n    for (String inexistentName : allJsDocParams) {\n        reportWarning(INEXISTANT_PARAM, inexistentName, fnName);\n    }\n    parametersNode \u003d builder.build();\n    return this;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
      "functionStartLine": 426,
      "functionName": "inferParameterTypes",
      "functionAnnotation": "",
      "functionDoc": "Infer the parameter types from the list of argument names and\nthe doc info.\n",
      "diff": "@@ -1,58 +1,58 @@\n FunctionTypeBuilder inferParameterTypes(@Nullable Node argsParent, @Nullable JSDocInfo info) {\n     if (argsParent \u003d\u003d null) {\n         if (info \u003d\u003d null) {\n             return this;\n         } else {\n             return inferParameterTypes(info);\n         }\n     }\n     Node oldParameterType \u003d null;\n     if (parametersNode !\u003d null) {\n         oldParameterType \u003d parametersNode.getFirstChild();\n     }\n     FunctionParamBuilder builder \u003d new FunctionParamBuilder(typeRegistry);\n     boolean warnedAboutArgList \u003d false;\n     Set\u003cString\u003e allJsDocParams \u003d (info \u003d\u003d null) ? Sets.\u003cString\u003enewHashSet() : Sets.newHashSet(info.getParameterNames());\n     boolean foundTemplateType \u003d false;\n     boolean isVarArgs \u003d false;\n     for (Node arg : argsParent.children()) {\n         String argumentName \u003d arg.getString();\n         allJsDocParams.remove(argumentName);\n         JSType parameterType \u003d null;\n         boolean isOptionalParam \u003d isOptionalParameter(arg, info);\n         isVarArgs \u003d isVarArgsParameter(arg, info);\n         if (info !\u003d null \u0026\u0026 info.hasParameterType(argumentName)) {\n             parameterType \u003d info.getParameterType(argumentName).evaluate(scope, typeRegistry);\n         } else if (oldParameterType !\u003d null \u0026\u0026 oldParameterType.getJSType() !\u003d null) {\n             parameterType \u003d oldParameterType.getJSType();\n             isOptionalParam \u003d oldParameterType.isOptionalArg();\n             isVarArgs \u003d oldParameterType.isVarArgs();\n         } else {\n             parameterType \u003d typeRegistry.getNativeType(UNKNOWN_TYPE);\n         }\n-        if (templateTypeName !\u003d null \u0026\u0026 parameterType.restrictByNotNullOrUndefined().isTemplateType()) {\n+        if (!templateTypeNames.isEmpty() \u0026\u0026 parameterType.restrictByNotNullOrUndefined().isTemplateType()) {\n             if (foundTemplateType) {\n                 reportError(TEMPLATE_TYPE_DUPLICATED, fnName);\n             }\n             foundTemplateType \u003d true;\n         }\n         warnedAboutArgList |\u003d addParameter(builder, parameterType, warnedAboutArgList, isOptionalParam, isVarArgs);\n         if (oldParameterType !\u003d null) {\n             oldParameterType \u003d oldParameterType.getNext();\n         }\n     }\n     if (!isVarArgs) {\n         while (oldParameterType !\u003d null \u0026\u0026 !isVarArgs) {\n             builder.newParameterFromNode(oldParameterType);\n             oldParameterType \u003d oldParameterType.getNext();\n         }\n     }\n-    if (templateTypeName !\u003d null \u0026\u0026 !foundTemplateType) {\n+    if (!templateTypeNames.isEmpty() \u0026\u0026 !foundTemplateType) {\n         reportError(TEMPLATE_TYPE_EXPECTED, fnName);\n     }\n     for (String inexistentName : allJsDocParams) {\n         reportWarning(INEXISTANT_PARAM, inexistentName, fnName);\n     }\n     parametersNode \u003d builder.build();\n     return this;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "00b1517c53912ac6843c257c0a6ead1176e8c5ee": {
      "type": "Ybodychange",
      "commitMessage": "\nWhen inferring a function type, there may be formal parameters\nthat do not appear in the function literal\nFixes issue 368\n\nTested:\nyes\n\nR\u003djohnlenz\nDELTA\u003d47  (37 added, 6 deleted, 4 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d4126\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1742 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/23/12, 3:36 PM",
      "commitName": "00b1517c53912ac6843c257c0a6ead1176e8c5ee",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "11/22/11, 2:28 PM",
      "commitNameOld": "9dfbc803407e714f9744555a1c9e7c4230f1816d",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 62.05,
      "commitsBetweenForRepo": 90,
      "commitsBetweenForFile": 1,
      "actualSource": "FunctionTypeBuilder inferParameterTypes(@Nullable Node argsParent, @Nullable JSDocInfo info) {\n    if (argsParent \u003d\u003d null) {\n        if (info \u003d\u003d null) {\n            return this;\n        } else {\n            return inferParameterTypes(info);\n        }\n    }\n    Node oldParameterType \u003d null;\n    if (parametersNode !\u003d null) {\n        oldParameterType \u003d parametersNode.getFirstChild();\n    }\n    FunctionParamBuilder builder \u003d new FunctionParamBuilder(typeRegistry);\n    boolean warnedAboutArgList \u003d false;\n    Set\u003cString\u003e allJsDocParams \u003d (info \u003d\u003d null) ? Sets.\u003cString\u003enewHashSet() : Sets.newHashSet(info.getParameterNames());\n    boolean foundTemplateType \u003d false;\n    boolean isVarArgs \u003d false;\n    for (Node arg : argsParent.children()) {\n        String argumentName \u003d arg.getString();\n        allJsDocParams.remove(argumentName);\n        JSType parameterType \u003d null;\n        boolean isOptionalParam \u003d isOptionalParameter(arg, info);\n        isVarArgs \u003d isVarArgsParameter(arg, info);\n        if (info !\u003d null \u0026\u0026 info.hasParameterType(argumentName)) {\n            parameterType \u003d info.getParameterType(argumentName).evaluate(scope, typeRegistry);\n        } else if (oldParameterType !\u003d null \u0026\u0026 oldParameterType.getJSType() !\u003d null) {\n            parameterType \u003d oldParameterType.getJSType();\n            isOptionalParam \u003d oldParameterType.isOptionalArg();\n            isVarArgs \u003d oldParameterType.isVarArgs();\n        } else {\n            parameterType \u003d typeRegistry.getNativeType(UNKNOWN_TYPE);\n        }\n        if (templateTypeName !\u003d null \u0026\u0026 parameterType.restrictByNotNullOrUndefined().isTemplateType()) {\n            if (foundTemplateType) {\n                reportError(TEMPLATE_TYPE_DUPLICATED, fnName);\n            }\n            foundTemplateType \u003d true;\n        }\n        warnedAboutArgList |\u003d addParameter(builder, parameterType, warnedAboutArgList, isOptionalParam, isVarArgs);\n        if (oldParameterType !\u003d null) {\n            oldParameterType \u003d oldParameterType.getNext();\n        }\n    }\n    if (!isVarArgs) {\n        while (oldParameterType !\u003d null \u0026\u0026 !isVarArgs) {\n            builder.newParameterFromNode(oldParameterType);\n            oldParameterType \u003d oldParameterType.getNext();\n        }\n    }\n    if (templateTypeName !\u003d null \u0026\u0026 !foundTemplateType) {\n        reportError(TEMPLATE_TYPE_EXPECTED, fnName);\n    }\n    for (String inexistentName : allJsDocParams) {\n        reportWarning(INEXISTANT_PARAM, inexistentName, fnName);\n    }\n    parametersNode \u003d builder.build();\n    return this;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
      "functionStartLine": 424,
      "functionName": "inferParameterTypes",
      "functionAnnotation": "",
      "functionDoc": "Infer the parameter types from the list of argument names and\nthe doc info.\n",
      "diff": "@@ -1,51 +1,58 @@\n FunctionTypeBuilder inferParameterTypes(@Nullable Node argsParent, @Nullable JSDocInfo info) {\n     if (argsParent \u003d\u003d null) {\n         if (info \u003d\u003d null) {\n             return this;\n         } else {\n             return inferParameterTypes(info);\n         }\n     }\n     Node oldParameterType \u003d null;\n     if (parametersNode !\u003d null) {\n         oldParameterType \u003d parametersNode.getFirstChild();\n     }\n     FunctionParamBuilder builder \u003d new FunctionParamBuilder(typeRegistry);\n     boolean warnedAboutArgList \u003d false;\n     Set\u003cString\u003e allJsDocParams \u003d (info \u003d\u003d null) ? Sets.\u003cString\u003enewHashSet() : Sets.newHashSet(info.getParameterNames());\n     boolean foundTemplateType \u003d false;\n+    boolean isVarArgs \u003d false;\n     for (Node arg : argsParent.children()) {\n         String argumentName \u003d arg.getString();\n         allJsDocParams.remove(argumentName);\n         JSType parameterType \u003d null;\n         boolean isOptionalParam \u003d isOptionalParameter(arg, info);\n-        boolean isVarArgs \u003d isVarArgsParameter(arg, info);\n+        isVarArgs \u003d isVarArgsParameter(arg, info);\n         if (info !\u003d null \u0026\u0026 info.hasParameterType(argumentName)) {\n             parameterType \u003d info.getParameterType(argumentName).evaluate(scope, typeRegistry);\n         } else if (oldParameterType !\u003d null \u0026\u0026 oldParameterType.getJSType() !\u003d null) {\n             parameterType \u003d oldParameterType.getJSType();\n             isOptionalParam \u003d oldParameterType.isOptionalArg();\n             isVarArgs \u003d oldParameterType.isVarArgs();\n         } else {\n             parameterType \u003d typeRegistry.getNativeType(UNKNOWN_TYPE);\n         }\n         if (templateTypeName !\u003d null \u0026\u0026 parameterType.restrictByNotNullOrUndefined().isTemplateType()) {\n             if (foundTemplateType) {\n                 reportError(TEMPLATE_TYPE_DUPLICATED, fnName);\n             }\n             foundTemplateType \u003d true;\n         }\n         warnedAboutArgList |\u003d addParameter(builder, parameterType, warnedAboutArgList, isOptionalParam, isVarArgs);\n         if (oldParameterType !\u003d null) {\n             oldParameterType \u003d oldParameterType.getNext();\n         }\n     }\n+    if (!isVarArgs) {\n+        while (oldParameterType !\u003d null \u0026\u0026 !isVarArgs) {\n+            builder.newParameterFromNode(oldParameterType);\n+            oldParameterType \u003d oldParameterType.getNext();\n+        }\n+    }\n     if (templateTypeName !\u003d null \u0026\u0026 !foundTemplateType) {\n         reportError(TEMPLATE_TYPE_EXPECTED, fnName);\n     }\n     for (String inexistentName : allJsDocParams) {\n         reportWarning(INEXISTANT_PARAM, inexistentName, fnName);\n     }\n     parametersNode \u003d builder.build();\n     return this;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b8fb1c4377809503625087f13c1ade664ce9b7e2": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/06/29 13:33:11 by nicksantos\n\n\tBe more aggressive about pulling param/return types off the overridden\n\tmethod.\n\n\tR\u003djohnlenz\n\tDELTA\u003d198  (149 added, 21 deleted, 28 changed)\n\nChange on 2010/06/30 05:24:10 by nthomas\n\n\tAdd ontouch{cancel,end,move,start} attribute declarations per the Safari Reference Library:\n\thttp://developer.apple.com/safari/library/documentation/AppleApplications/Reference/SafariHTMLRef/Articles/Attributes.html\n\n\tR\u003dacleung\n\tDELTA\u003d28  (28 added, 0 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d47001\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@259 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/30/10, 3:28 PM",
      "commitName": "b8fb1c4377809503625087f13c1ade664ce9b7e2",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "6/22/10, 5:19 PM",
      "commitNameOld": "465282f1ca28a208b06c47b55fd292d4631c55da",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 7.92,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "FunctionTypeBuilder inferParameterTypes(@Nullable Node argsParent, @Nullable JSDocInfo info) {\n    if (argsParent \u003d\u003d null) {\n        if (info \u003d\u003d null) {\n            return this;\n        } else {\n            return inferParameterTypes(info);\n        }\n    }\n    Node oldParameterType \u003d null;\n    if (parametersNode !\u003d null) {\n        oldParameterType \u003d parametersNode.getFirstChild();\n    }\n    FunctionParamBuilder builder \u003d new FunctionParamBuilder(typeRegistry);\n    boolean warnedAboutArgList \u003d false;\n    Set\u003cString\u003e allJsDocParams \u003d (info \u003d\u003d null) ? Sets.\u003cString\u003enewHashSet() : Sets.newHashSet(info.getParameterNames());\n    boolean foundTemplateType \u003d false;\n    for (Node arg : argsParent.children()) {\n        String argumentName \u003d arg.getString();\n        allJsDocParams.remove(argumentName);\n        JSType parameterType \u003d null;\n        boolean isOptionalParam \u003d isOptionalParameter(arg, info);\n        boolean isVarArgs \u003d isVarArgsParameter(arg, info);\n        if (info !\u003d null \u0026\u0026 info.hasParameterType(argumentName)) {\n            parameterType \u003d info.getParameterType(argumentName).evaluate(scope, typeRegistry);\n        } else if (oldParameterType !\u003d null \u0026\u0026 oldParameterType.getJSType() !\u003d null) {\n            parameterType \u003d oldParameterType.getJSType();\n            isOptionalParam \u003d oldParameterType.isOptionalArg();\n            isVarArgs \u003d oldParameterType.isVarArgs();\n        } else {\n            parameterType \u003d typeRegistry.getNativeType(UNKNOWN_TYPE);\n        }\n        if (templateTypeName !\u003d null \u0026\u0026 parameterType.restrictByNotNullOrUndefined().isTemplateType()) {\n            if (foundTemplateType) {\n                reportError(TEMPLATE_TYPE_DUPLICATED, fnName);\n            }\n            foundTemplateType \u003d true;\n        }\n        warnedAboutArgList |\u003d addParameter(builder, parameterType, warnedAboutArgList, isOptionalParam, isVarArgs);\n        if (oldParameterType !\u003d null) {\n            oldParameterType \u003d oldParameterType.getNext();\n        }\n    }\n    if (templateTypeName !\u003d null \u0026\u0026 !foundTemplateType) {\n        reportError(TEMPLATE_TYPE_EXPECTED, fnName);\n    }\n    for (String inexistentName : allJsDocParams) {\n        reportWarning(INEXISTANT_PARAM, inexistentName, fnName);\n    }\n    parametersNode \u003d builder.build();\n    return this;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
      "functionStartLine": 387,
      "functionName": "inferParameterTypes",
      "functionAnnotation": "",
      "functionDoc": "Infer the parameter types from the list of argument names and\nthe doc info.\n",
      "diff": "@@ -1,33 +1,51 @@\n FunctionTypeBuilder inferParameterTypes(@Nullable Node argsParent, @Nullable JSDocInfo info) {\n     if (argsParent \u003d\u003d null) {\n         if (info \u003d\u003d null) {\n             return this;\n         } else {\n             return inferParameterTypes(info);\n         }\n     }\n+    Node oldParameterType \u003d null;\n+    if (parametersNode !\u003d null) {\n+        oldParameterType \u003d parametersNode.getFirstChild();\n+    }\n     FunctionParamBuilder builder \u003d new FunctionParamBuilder(typeRegistry);\n     boolean warnedAboutArgList \u003d false;\n     Set\u003cString\u003e allJsDocParams \u003d (info \u003d\u003d null) ? Sets.\u003cString\u003enewHashSet() : Sets.newHashSet(info.getParameterNames());\n     boolean foundTemplateType \u003d false;\n     for (Node arg : argsParent.children()) {\n         String argumentName \u003d arg.getString();\n         allJsDocParams.remove(argumentName);\n-        JSType parameterType \u003d info !\u003d null \u0026\u0026 info.hasParameterType(argumentName) ? info.getParameterType(argumentName).evaluate(scope, typeRegistry) : typeRegistry.getNativeType(UNKNOWN_TYPE);\n+        JSType parameterType \u003d null;\n+        boolean isOptionalParam \u003d isOptionalParameter(arg, info);\n+        boolean isVarArgs \u003d isVarArgsParameter(arg, info);\n+        if (info !\u003d null \u0026\u0026 info.hasParameterType(argumentName)) {\n+            parameterType \u003d info.getParameterType(argumentName).evaluate(scope, typeRegistry);\n+        } else if (oldParameterType !\u003d null \u0026\u0026 oldParameterType.getJSType() !\u003d null) {\n+            parameterType \u003d oldParameterType.getJSType();\n+            isOptionalParam \u003d oldParameterType.isOptionalArg();\n+            isVarArgs \u003d oldParameterType.isVarArgs();\n+        } else {\n+            parameterType \u003d typeRegistry.getNativeType(UNKNOWN_TYPE);\n+        }\n         if (templateTypeName !\u003d null \u0026\u0026 parameterType.restrictByNotNullOrUndefined().isTemplateType()) {\n             if (foundTemplateType) {\n                 reportError(TEMPLATE_TYPE_DUPLICATED, fnName);\n             }\n             foundTemplateType \u003d true;\n         }\n-        warnedAboutArgList |\u003d addParameter(builder, parameterType, warnedAboutArgList, isOptionalParameter(arg, info), isVarArgsParameter(arg, info));\n+        warnedAboutArgList |\u003d addParameter(builder, parameterType, warnedAboutArgList, isOptionalParam, isVarArgs);\n+        if (oldParameterType !\u003d null) {\n+            oldParameterType \u003d oldParameterType.getNext();\n+        }\n     }\n     if (templateTypeName !\u003d null \u0026\u0026 !foundTemplateType) {\n         reportError(TEMPLATE_TYPE_EXPECTED, fnName);\n     }\n     for (String inexistentName : allJsDocParams) {\n         reportWarning(INEXISTANT_PARAM, inexistentName, fnName);\n     }\n     parametersNode \u003d builder.build();\n     return this;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c764a46abf211d4677fadc33f7d466e5b14fa088": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/04/13 by john\n\n        Here is a crazy thought, let\u0027s not require the JSTypeRegistry during\n        parsing.\n\n        There are basically two changes here:\n        1) The IRFactory was looking for enums to seed the JSTypeRegistry, so\n        we do that when we setup for type interence.\n        2) The JSDocParser was checking the types of @defines objects, now do\n        that during ProcessDefines.\n\n        R\u003drobert,mark\n        DELTA\u003d207  (82 added, 89 deleted, 36 changed)\n\nChange on 2010/04/14 by nick\n\n        Add a debugging function for JSType hashcodes.\n        i found this useful, and thought others might too.\n\n        R\u003djohn\n        DELTA\u003d69  (69 added, 0 deleted, 0 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dfqsoxx\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@183 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/14/10, 9:15 AM",
      "commitName": "c764a46abf211d4677fadc33f7d466e5b14fa088",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "3/11/10, 9:31 PM",
      "commitNameOld": "7bfdbd9164601af44d17edd51be829fde2cc51aa",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 33.45,
      "commitsBetweenForRepo": 47,
      "commitsBetweenForFile": 1,
      "actualSource": "FunctionTypeBuilder inferParameterTypes(@Nullable Node argsParent, @Nullable JSDocInfo info) {\n    if (argsParent \u003d\u003d null) {\n        if (info \u003d\u003d null) {\n            return this;\n        } else {\n            return inferParameterTypes(info);\n        }\n    }\n    FunctionParamBuilder builder \u003d new FunctionParamBuilder(typeRegistry);\n    boolean warnedAboutArgList \u003d false;\n    Set\u003cString\u003e allJsDocParams \u003d (info \u003d\u003d null) ? Sets.\u003cString\u003enewHashSet() : Sets.newHashSet(info.getParameterNames());\n    boolean foundTemplateType \u003d false;\n    for (Node arg : argsParent.children()) {\n        String argumentName \u003d arg.getString();\n        allJsDocParams.remove(argumentName);\n        JSType parameterType \u003d info !\u003d null \u0026\u0026 info.hasParameterType(argumentName) ? info.getParameterType(argumentName).evaluate(scope, typeRegistry) : typeRegistry.getNativeType(UNKNOWN_TYPE);\n        if (templateTypeName !\u003d null \u0026\u0026 parameterType.restrictByNotNullOrUndefined().isTemplateType()) {\n            if (foundTemplateType) {\n                reportError(TEMPLATE_TYPE_DUPLICATED, fnName);\n            }\n            foundTemplateType \u003d true;\n        }\n        warnedAboutArgList |\u003d addParameter(builder, parameterType, warnedAboutArgList, isOptionalParameter(arg, info), isVarArgsParameter(arg, info));\n    }\n    if (templateTypeName !\u003d null \u0026\u0026 !foundTemplateType) {\n        reportError(TEMPLATE_TYPE_EXPECTED, fnName);\n    }\n    for (String inexistentName : allJsDocParams) {\n        reportWarning(INEXISTANT_PARAM, inexistentName, fnName);\n    }\n    parametersNode \u003d builder.build();\n    return this;\n}",
      "path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
      "functionStartLine": 328,
      "functionName": "inferParameterTypes",
      "functionAnnotation": "",
      "functionDoc": "Infer the parameter types from the list of argument names and\nthe doc info.\n",
      "diff": "@@ -1,33 +1,33 @@\n FunctionTypeBuilder inferParameterTypes(@Nullable Node argsParent, @Nullable JSDocInfo info) {\n     if (argsParent \u003d\u003d null) {\n         if (info \u003d\u003d null) {\n             return this;\n         } else {\n             return inferParameterTypes(info);\n         }\n     }\n     FunctionParamBuilder builder \u003d new FunctionParamBuilder(typeRegistry);\n     boolean warnedAboutArgList \u003d false;\n     Set\u003cString\u003e allJsDocParams \u003d (info \u003d\u003d null) ? Sets.\u003cString\u003enewHashSet() : Sets.newHashSet(info.getParameterNames());\n     boolean foundTemplateType \u003d false;\n     for (Node arg : argsParent.children()) {\n         String argumentName \u003d arg.getString();\n         allJsDocParams.remove(argumentName);\n-        JSType parameterType \u003d info !\u003d null \u0026\u0026 info.hasParameterType(argumentName) ? info.getParameterType(argumentName).evaluate(scope) : typeRegistry.getNativeType(UNKNOWN_TYPE);\n+        JSType parameterType \u003d info !\u003d null \u0026\u0026 info.hasParameterType(argumentName) ? info.getParameterType(argumentName).evaluate(scope, typeRegistry) : typeRegistry.getNativeType(UNKNOWN_TYPE);\n         if (templateTypeName !\u003d null \u0026\u0026 parameterType.restrictByNotNullOrUndefined().isTemplateType()) {\n             if (foundTemplateType) {\n                 reportError(TEMPLATE_TYPE_DUPLICATED, fnName);\n             }\n             foundTemplateType \u003d true;\n         }\n         warnedAboutArgList |\u003d addParameter(builder, parameterType, warnedAboutArgList, isOptionalParameter(arg, info), isVarArgsParameter(arg, info));\n     }\n     if (templateTypeName !\u003d null \u0026\u0026 !foundTemplateType) {\n         reportError(TEMPLATE_TYPE_EXPECTED, fnName);\n     }\n     for (String inexistentName : allJsDocParams) {\n         reportWarning(INEXISTANT_PARAM, inexistentName, fnName);\n     }\n     parametersNode \u003d builder.build();\n     return this;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6a36f04485599820ff86441accee002b4deec2eb": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange,Ydocchange)",
      "commitMessage": "Fixes for issues 14 and 16.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@7 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/11/09, 11:05 AM",
      "commitName": "6a36f04485599820ff86441accee002b4deec2eb",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Fixes for issues 14 and 16.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@7 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "11/11/09, 11:05 AM",
          "commitName": "6a36f04485599820ff86441accee002b4deec2eb",
          "commitAuthor": "nicholas.j.santos@gmail.com",
          "commitDateOld": "11/3/09, 3:51 PM",
          "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 7.8,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "actualSource": "FunctionTypeBuilder inferParameterTypes(@Nullable Node argsParent, @Nullable JSDocInfo info) {\n    if (argsParent \u003d\u003d null) {\n        if (info \u003d\u003d null) {\n            return this;\n        } else {\n            return inferParameterTypes(info);\n        }\n    }\n    FunctionParamBuilder builder \u003d new FunctionParamBuilder(typeRegistry);\n    boolean warnedAboutArgList \u003d false;\n    Set\u003cString\u003e allJsDocParams \u003d (info \u003d\u003d null) ? Sets.\u003cString\u003enewHashSet() : Sets.newHashSet(info.getParameterNames());\n    boolean foundTemplateType \u003d false;\n    for (Node arg : argsParent.children()) {\n        String argumentName \u003d arg.getString();\n        allJsDocParams.remove(argumentName);\n        JSType parameterType \u003d info !\u003d null \u0026\u0026 info.hasParameterType(argumentName) ? info.getParameterType(argumentName).evaluate(scope) : typeRegistry.getNativeType(UNKNOWN_TYPE);\n        if (templateTypeName !\u003d null \u0026\u0026 parameterType.restrictByNotNullOrUndefined().isTemplateType()) {\n            if (foundTemplateType) {\n                reportError(TEMPLATE_TYPE_DUPLICATED, fnName);\n            }\n            foundTemplateType \u003d true;\n        }\n        warnedAboutArgList |\u003d addParameter(builder, parameterType, warnedAboutArgList, isOptionalParameter(arg, info), isVarArgsParameter(arg, info));\n    }\n    if (templateTypeName !\u003d null \u0026\u0026 !foundTemplateType) {\n        reportError(TEMPLATE_TYPE_EXPECTED, fnName);\n    }\n    for (String inexistentName : allJsDocParams) {\n        reportWarning(INEXISTANT_PARAM, inexistentName, fnName);\n    }\n    parametersNode \u003d builder.build();\n    return this;\n}",
          "path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
          "functionStartLine": 327,
          "functionName": "inferParameterTypes",
          "functionAnnotation": "",
          "functionDoc": "Infer the parameter types from the list of argument names and\nthe doc info.\n",
          "diff": "@@ -1,13 +1,33 @@\n-FunctionTypeBuilder inferParameterTypes(Node argsParent, @Nullable JSDocInfo info) {\n+FunctionTypeBuilder inferParameterTypes(@Nullable Node argsParent, @Nullable JSDocInfo info) {\n     if (argsParent \u003d\u003d null) {\n-        return inferParameterTypes(info);\n-    }\n-    List\u003cString\u003e argsList \u003d ImmutableList.of();\n-    if (argsParent.getFirstChild() !\u003d null) {\n-        argsList \u003d Lists.newArrayList();\n-        for (Node n : argsParent.children()) {\n-            argsList.add(n.getString());\n+        if (info \u003d\u003d null) {\n+            return this;\n+        } else {\n+            return inferParameterTypes(info);\n         }\n     }\n-    return inferParameterTypes(argsList, info);\n+    FunctionParamBuilder builder \u003d new FunctionParamBuilder(typeRegistry);\n+    boolean warnedAboutArgList \u003d false;\n+    Set\u003cString\u003e allJsDocParams \u003d (info \u003d\u003d null) ? Sets.\u003cString\u003enewHashSet() : Sets.newHashSet(info.getParameterNames());\n+    boolean foundTemplateType \u003d false;\n+    for (Node arg : argsParent.children()) {\n+        String argumentName \u003d arg.getString();\n+        allJsDocParams.remove(argumentName);\n+        JSType parameterType \u003d info !\u003d null \u0026\u0026 info.hasParameterType(argumentName) ? info.getParameterType(argumentName).evaluate(scope) : typeRegistry.getNativeType(UNKNOWN_TYPE);\n+        if (templateTypeName !\u003d null \u0026\u0026 parameterType.restrictByNotNullOrUndefined().isTemplateType()) {\n+            if (foundTemplateType) {\n+                reportError(TEMPLATE_TYPE_DUPLICATED, fnName);\n+            }\n+            foundTemplateType \u003d true;\n+        }\n+        warnedAboutArgList |\u003d addParameter(builder, parameterType, warnedAboutArgList, isOptionalParameter(arg, info), isVarArgsParameter(arg, info));\n+    }\n+    if (templateTypeName !\u003d null \u0026\u0026 !foundTemplateType) {\n+        reportError(TEMPLATE_TYPE_EXPECTED, fnName);\n+    }\n+    for (String inexistentName : allJsDocParams) {\n+        reportWarning(INEXISTANT_PARAM, inexistentName, fnName);\n+    }\n+    parametersNode \u003d builder.build();\n+    return this;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "Fixes for issues 14 and 16.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@7 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "11/11/09, 11:05 AM",
          "commitName": "6a36f04485599820ff86441accee002b4deec2eb",
          "commitAuthor": "nicholas.j.santos@gmail.com",
          "commitDateOld": "11/3/09, 3:51 PM",
          "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 7.8,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "actualSource": "FunctionTypeBuilder inferParameterTypes(@Nullable Node argsParent, @Nullable JSDocInfo info) {\n    if (argsParent \u003d\u003d null) {\n        if (info \u003d\u003d null) {\n            return this;\n        } else {\n            return inferParameterTypes(info);\n        }\n    }\n    FunctionParamBuilder builder \u003d new FunctionParamBuilder(typeRegistry);\n    boolean warnedAboutArgList \u003d false;\n    Set\u003cString\u003e allJsDocParams \u003d (info \u003d\u003d null) ? Sets.\u003cString\u003enewHashSet() : Sets.newHashSet(info.getParameterNames());\n    boolean foundTemplateType \u003d false;\n    for (Node arg : argsParent.children()) {\n        String argumentName \u003d arg.getString();\n        allJsDocParams.remove(argumentName);\n        JSType parameterType \u003d info !\u003d null \u0026\u0026 info.hasParameterType(argumentName) ? info.getParameterType(argumentName).evaluate(scope) : typeRegistry.getNativeType(UNKNOWN_TYPE);\n        if (templateTypeName !\u003d null \u0026\u0026 parameterType.restrictByNotNullOrUndefined().isTemplateType()) {\n            if (foundTemplateType) {\n                reportError(TEMPLATE_TYPE_DUPLICATED, fnName);\n            }\n            foundTemplateType \u003d true;\n        }\n        warnedAboutArgList |\u003d addParameter(builder, parameterType, warnedAboutArgList, isOptionalParameter(arg, info), isVarArgsParameter(arg, info));\n    }\n    if (templateTypeName !\u003d null \u0026\u0026 !foundTemplateType) {\n        reportError(TEMPLATE_TYPE_EXPECTED, fnName);\n    }\n    for (String inexistentName : allJsDocParams) {\n        reportWarning(INEXISTANT_PARAM, inexistentName, fnName);\n    }\n    parametersNode \u003d builder.build();\n    return this;\n}",
          "path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
          "functionStartLine": 327,
          "functionName": "inferParameterTypes",
          "functionAnnotation": "",
          "functionDoc": "Infer the parameter types from the list of argument names and\nthe doc info.\n",
          "diff": "@@ -1,13 +1,33 @@\n-FunctionTypeBuilder inferParameterTypes(Node argsParent, @Nullable JSDocInfo info) {\n+FunctionTypeBuilder inferParameterTypes(@Nullable Node argsParent, @Nullable JSDocInfo info) {\n     if (argsParent \u003d\u003d null) {\n-        return inferParameterTypes(info);\n-    }\n-    List\u003cString\u003e argsList \u003d ImmutableList.of();\n-    if (argsParent.getFirstChild() !\u003d null) {\n-        argsList \u003d Lists.newArrayList();\n-        for (Node n : argsParent.children()) {\n-            argsList.add(n.getString());\n+        if (info \u003d\u003d null) {\n+            return this;\n+        } else {\n+            return inferParameterTypes(info);\n         }\n     }\n-    return inferParameterTypes(argsList, info);\n+    FunctionParamBuilder builder \u003d new FunctionParamBuilder(typeRegistry);\n+    boolean warnedAboutArgList \u003d false;\n+    Set\u003cString\u003e allJsDocParams \u003d (info \u003d\u003d null) ? Sets.\u003cString\u003enewHashSet() : Sets.newHashSet(info.getParameterNames());\n+    boolean foundTemplateType \u003d false;\n+    for (Node arg : argsParent.children()) {\n+        String argumentName \u003d arg.getString();\n+        allJsDocParams.remove(argumentName);\n+        JSType parameterType \u003d info !\u003d null \u0026\u0026 info.hasParameterType(argumentName) ? info.getParameterType(argumentName).evaluate(scope) : typeRegistry.getNativeType(UNKNOWN_TYPE);\n+        if (templateTypeName !\u003d null \u0026\u0026 parameterType.restrictByNotNullOrUndefined().isTemplateType()) {\n+            if (foundTemplateType) {\n+                reportError(TEMPLATE_TYPE_DUPLICATED, fnName);\n+            }\n+            foundTemplateType \u003d true;\n+        }\n+        warnedAboutArgList |\u003d addParameter(builder, parameterType, warnedAboutArgList, isOptionalParameter(arg, info), isVarArgsParameter(arg, info));\n+    }\n+    if (templateTypeName !\u003d null \u0026\u0026 !foundTemplateType) {\n+        reportError(TEMPLATE_TYPE_EXPECTED, fnName);\n+    }\n+    for (String inexistentName : allJsDocParams) {\n+        reportWarning(INEXISTANT_PARAM, inexistentName, fnName);\n+    }\n+    parametersNode \u003d builder.build();\n+    return this;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[argsParent-Node, info-JSDocInfo(annotations-@Nullable)]",
            "newValue": "[argsParent-Node(annotations-@Nullable), info-JSDocInfo(annotations-@Nullable)]"
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Fixes for issues 14 and 16.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@7 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "11/11/09, 11:05 AM",
          "commitName": "6a36f04485599820ff86441accee002b4deec2eb",
          "commitAuthor": "nicholas.j.santos@gmail.com",
          "commitDateOld": "11/3/09, 3:51 PM",
          "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 7.8,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "actualSource": "FunctionTypeBuilder inferParameterTypes(@Nullable Node argsParent, @Nullable JSDocInfo info) {\n    if (argsParent \u003d\u003d null) {\n        if (info \u003d\u003d null) {\n            return this;\n        } else {\n            return inferParameterTypes(info);\n        }\n    }\n    FunctionParamBuilder builder \u003d new FunctionParamBuilder(typeRegistry);\n    boolean warnedAboutArgList \u003d false;\n    Set\u003cString\u003e allJsDocParams \u003d (info \u003d\u003d null) ? Sets.\u003cString\u003enewHashSet() : Sets.newHashSet(info.getParameterNames());\n    boolean foundTemplateType \u003d false;\n    for (Node arg : argsParent.children()) {\n        String argumentName \u003d arg.getString();\n        allJsDocParams.remove(argumentName);\n        JSType parameterType \u003d info !\u003d null \u0026\u0026 info.hasParameterType(argumentName) ? info.getParameterType(argumentName).evaluate(scope) : typeRegistry.getNativeType(UNKNOWN_TYPE);\n        if (templateTypeName !\u003d null \u0026\u0026 parameterType.restrictByNotNullOrUndefined().isTemplateType()) {\n            if (foundTemplateType) {\n                reportError(TEMPLATE_TYPE_DUPLICATED, fnName);\n            }\n            foundTemplateType \u003d true;\n        }\n        warnedAboutArgList |\u003d addParameter(builder, parameterType, warnedAboutArgList, isOptionalParameter(arg, info), isVarArgsParameter(arg, info));\n    }\n    if (templateTypeName !\u003d null \u0026\u0026 !foundTemplateType) {\n        reportError(TEMPLATE_TYPE_EXPECTED, fnName);\n    }\n    for (String inexistentName : allJsDocParams) {\n        reportWarning(INEXISTANT_PARAM, inexistentName, fnName);\n    }\n    parametersNode \u003d builder.build();\n    return this;\n}",
          "path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
          "functionStartLine": 327,
          "functionName": "inferParameterTypes",
          "functionAnnotation": "",
          "functionDoc": "Infer the parameter types from the list of argument names and\nthe doc info.\n",
          "diff": "@@ -1,13 +1,33 @@\n-FunctionTypeBuilder inferParameterTypes(Node argsParent, @Nullable JSDocInfo info) {\n+FunctionTypeBuilder inferParameterTypes(@Nullable Node argsParent, @Nullable JSDocInfo info) {\n     if (argsParent \u003d\u003d null) {\n-        return inferParameterTypes(info);\n-    }\n-    List\u003cString\u003e argsList \u003d ImmutableList.of();\n-    if (argsParent.getFirstChild() !\u003d null) {\n-        argsList \u003d Lists.newArrayList();\n-        for (Node n : argsParent.children()) {\n-            argsList.add(n.getString());\n+        if (info \u003d\u003d null) {\n+            return this;\n+        } else {\n+            return inferParameterTypes(info);\n         }\n     }\n-    return inferParameterTypes(argsList, info);\n+    FunctionParamBuilder builder \u003d new FunctionParamBuilder(typeRegistry);\n+    boolean warnedAboutArgList \u003d false;\n+    Set\u003cString\u003e allJsDocParams \u003d (info \u003d\u003d null) ? Sets.\u003cString\u003enewHashSet() : Sets.newHashSet(info.getParameterNames());\n+    boolean foundTemplateType \u003d false;\n+    for (Node arg : argsParent.children()) {\n+        String argumentName \u003d arg.getString();\n+        allJsDocParams.remove(argumentName);\n+        JSType parameterType \u003d info !\u003d null \u0026\u0026 info.hasParameterType(argumentName) ? info.getParameterType(argumentName).evaluate(scope) : typeRegistry.getNativeType(UNKNOWN_TYPE);\n+        if (templateTypeName !\u003d null \u0026\u0026 parameterType.restrictByNotNullOrUndefined().isTemplateType()) {\n+            if (foundTemplateType) {\n+                reportError(TEMPLATE_TYPE_DUPLICATED, fnName);\n+            }\n+            foundTemplateType \u003d true;\n+        }\n+        warnedAboutArgList |\u003d addParameter(builder, parameterType, warnedAboutArgList, isOptionalParameter(arg, info), isVarArgsParameter(arg, info));\n+    }\n+    if (templateTypeName !\u003d null \u0026\u0026 !foundTemplateType) {\n+        reportError(TEMPLATE_TYPE_EXPECTED, fnName);\n+    }\n+    for (String inexistentName : allJsDocParams) {\n+        reportWarning(INEXISTANT_PARAM, inexistentName, fnName);\n+    }\n+    parametersNode \u003d builder.build();\n+    return this;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Infer the parameter types from the list of arguments in the AST.\n",
            "newValue": "Infer the parameter types from the list of argument names and\nthe doc info.\n"
          }
        }
      ]
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,13 @@\n+FunctionTypeBuilder inferParameterTypes(Node argsParent, @Nullable JSDocInfo info) {\n+    if (argsParent \u003d\u003d null) {\n+        return inferParameterTypes(info);\n+    }\n+    List\u003cString\u003e argsList \u003d ImmutableList.of();\n+    if (argsParent.getFirstChild() !\u003d null) {\n+        argsList \u003d Lists.newArrayList();\n+        for (Node n : argsParent.children()) {\n+            argsList.add(n.getString());\n+        }\n+    }\n+    return inferParameterTypes(argsList, info);\n+}\n\\ No newline at end of file\n",
      "actualSource": "FunctionTypeBuilder inferParameterTypes(Node argsParent, @Nullable JSDocInfo info) {\n    if (argsParent \u003d\u003d null) {\n        return inferParameterTypes(info);\n    }\n    List\u003cString\u003e argsList \u003d ImmutableList.of();\n    if (argsParent.getFirstChild() !\u003d null) {\n        argsList \u003d Lists.newArrayList();\n        for (Node n : argsParent.children()) {\n            argsList.add(n.getString());\n        }\n    }\n    return inferParameterTypes(argsList, info);\n}",
      "path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
      "functionStartLine": 314,
      "functionName": "inferParameterTypes",
      "functionAnnotation": "",
      "functionDoc": "Infer the parameter types from the list of arguments in the AST.\n"
    }
  }
}