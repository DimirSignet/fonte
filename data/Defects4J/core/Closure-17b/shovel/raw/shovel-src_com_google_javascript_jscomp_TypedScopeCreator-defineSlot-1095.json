{
  "origin": "codeshovel",
  "repositoryName": "Closure-17b",
  "repositoryPath": "/tmp/Closure-17b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TypedScopeCreator.java",
  "functionName": "defineSlot",
  "functionId": "$defineSlot___n-Node__parent-Node__variableName-String__type-JSType__inferred-boolean",
  "sourceFilePath": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
  "functionAnnotation": "",
  "functionDoc": "Defines a symbol in the current scope.\n\n@param n the defining NAME or GETPROP or object literal key node.\n@param parent the {@code n}\u0027s parent.\n@param variableName The name that this should be known by.\n@param type the variable\u0027s type. It may be {@code null} if\n    {@code inferred} is {@code true}.\n@param inferred Whether the type is inferred or declared.\n",
  "functionStartLine": 1095,
  "functionEndLine": 1234,
  "numCommitsSeen": 98,
  "timeTaken": 6691,
  "changeHistory": [
    "c2e1d41c876befd2c6b80861b2680685d8f54a5e",
    "400a87f52b5d1ffc28bb85ed302aefaea5c28021",
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
    "c42af07351fdce0bcab4b844c2a887eeca27d1a7",
    "5c695ce6ca5095ba764d34e634c20f65d8a558e2",
    "6a2b233cac8fad95318405149b01d2c073509f62",
    "fc307189f141773d0a66c235f8f37f05c8252d8d",
    "bd9c7b620384fe5a98772729001ed56304459bc6",
    "01d1238a2a577d8988a72c29304a3283ca05a29a",
    "fc0798047ad3aac58a54ea65f9f1c8857745419f",
    "1b8156d41fe441ab03999f1e2c5ac4537e79fc75",
    "03ce555bcedcf98d99de1b4f8a6238ba75ee6850",
    "71a9ef6258d01b0e05820209be0035fab11a8d3a",
    "f80152eb5a2de72e8336b26e0e78b9e6baae37d2",
    "072fa2d047573d2d1f0187ba4bf76b1afa75031c"
  ],
  "changeHistoryShort": {
    "c2e1d41c876befd2c6b80861b2680685d8f54a5e": "Ybodychange",
    "400a87f52b5d1ffc28bb85ed302aefaea5c28021": "Ybodychange",
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c": "Ybodychange",
    "c42af07351fdce0bcab4b844c2a887eeca27d1a7": "Ybodychange",
    "5c695ce6ca5095ba764d34e634c20f65d8a558e2": "Ybodychange",
    "6a2b233cac8fad95318405149b01d2c073509f62": "Ybodychange",
    "fc307189f141773d0a66c235f8f37f05c8252d8d": "Ybodychange",
    "bd9c7b620384fe5a98772729001ed56304459bc6": "Ybodychange",
    "01d1238a2a577d8988a72c29304a3283ca05a29a": "Ybodychange",
    "fc0798047ad3aac58a54ea65f9f1c8857745419f": "Ybodychange",
    "1b8156d41fe441ab03999f1e2c5ac4537e79fc75": "Ybodychange",
    "03ce555bcedcf98d99de1b4f8a6238ba75ee6850": "Ybodychange",
    "71a9ef6258d01b0e05820209be0035fab11a8d3a": "Ybodychange",
    "f80152eb5a2de72e8336b26e0e78b9e6baae37d2": "Ymultichange(Ybodychange,Ydocchange)",
    "072fa2d047573d2d1f0187ba4bf76b1afa75031c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c2e1d41c876befd2c6b80861b2680685d8f54a5e": {
      "type": "Ybodychange",
      "commitMessage": "\nredeclare prototypes of native types when we see them in the externs.\nThis ensures that they get proper source info\n\nR\u003djohnlenz\nDELTA\u003d94  (32 added, 2 deleted, 60 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3900\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1656 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/1/11, 11:56 AM",
      "commitName": "c2e1d41c876befd2c6b80861b2680685d8f54a5e",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "11/15/11, 8:57 AM",
      "commitNameOld": "ad20fd0c59903ace8f89f16a52c528951c7615da",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 16.12,
      "commitsBetweenForRepo": 45,
      "commitsBetweenForFile": 1,
      "actualSource": "void defineSlot(Node n, Node parent, String variableName, JSType type, boolean inferred) {\n    Preconditions.checkArgument(!variableName.isEmpty());\n    boolean isGlobalVar \u003d n.isName() \u0026\u0026 scope.isGlobal();\n    boolean shouldDeclareOnGlobalThis \u003d isGlobalVar \u0026\u0026 (parent.isVar() || parent.isFunction());\n    Scope scopeToDeclareIn \u003d scope;\n    if (n.isGetProp() \u0026\u0026 !scope.isGlobal() \u0026\u0026 isQnameRootedInGlobalScope(n)) {\n        Scope globalScope \u003d scope.getGlobalScope();\n        if (!globalScope.isDeclared(variableName, false)) {\n            scopeToDeclareIn \u003d scope.getGlobalScope();\n        }\n    }\n    boolean isExtern \u003d n.isFromExterns();\n    Var newVar \u003d null;\n    CompilerInput input \u003d compiler.getInput(inputId);\n    if (scopeToDeclareIn.isDeclared(variableName, false)) {\n        Var oldVar \u003d scopeToDeclareIn.getVar(variableName);\n        newVar \u003d validator.expectUndeclaredVariable(sourceName, input, n, parent, oldVar, variableName, type);\n    } else {\n        if (!inferred) {\n            setDeferredType(n, type);\n        }\n        newVar \u003d scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n        if (type instanceof EnumType) {\n            Node initialValue \u003d newVar.getInitialValue();\n            boolean isValidValue \u003d initialValue !\u003d null \u0026\u0026 (initialValue.isObjectLit() || initialValue.isQualifiedName());\n            if (!isValidValue) {\n                compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));\n            }\n        }\n    }\n    FunctionType fnType \u003d JSType.toMaybeFunctionType(type);\n    if (fnType !\u003d null \u0026\u0026 !type.isEmptyType()) {\n        if ((fnType.isConstructor() || fnType.isInterface()) \u0026\u0026 !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE))) {\n            FunctionType superClassCtor \u003d fnType.getSuperClassConstructor();\n            ObjectType.Property prototypeSlot \u003d fnType.getSlot(\"prototype\");\n            prototypeSlot.setNode(n);\n            String prototypeName \u003d variableName + \".prototype\";\n            Var prototypeVar \u003d scopeToDeclareIn.getVar(prototypeName);\n            if (prototypeVar !\u003d null \u0026\u0026 prototypeVar.scope \u003d\u003d scopeToDeclareIn) {\n                scopeToDeclareIn.undeclare(prototypeVar);\n            }\n            scopeToDeclareIn.declare(prototypeName, n, prototypeSlot.getType(), input, superClassCtor \u003d\u003d null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n            if (newVar.getInitialValue() \u003d\u003d null \u0026\u0026 !isExtern \u0026\u0026 variableName.equals(fnType.getInstanceType().getReferenceName())) {\n                compiler.report(JSError.make(sourceName, n, fnType.isConstructor() ? CTOR_INITIALIZER : IFACE_INITIALIZER, variableName));\n            }\n        }\n    }\n    if (shouldDeclareOnGlobalThis) {\n        ObjectType globalThis \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS);\n        if (inferred) {\n            globalThis.defineInferredProperty(variableName, type \u003d\u003d null ? getNativeType(JSTypeNative.NO_TYPE) : type, n);\n        } else {\n            globalThis.defineDeclaredProperty(variableName, type, n);\n        }\n    }\n    if (isGlobalVar \u0026\u0026 \"Window\".equals(variableName) \u0026\u0026 type !\u003d null \u0026\u0026 type.isFunctionType() \u0026\u0026 type.isConstructor()) {\n        FunctionType globalThisCtor \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();\n        globalThisCtor.getInstanceType().clearCachedValues();\n        globalThisCtor.getPrototype().clearCachedValues();\n        globalThisCtor.setPrototypeBasedOn((type.toMaybeFunctionType()).getInstanceType());\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 1060,
      "functionName": "defineSlot",
      "functionAnnotation": "",
      "functionDoc": "Defines a symbol in the current scope.\n\n@param n the defining NAME or GETPROP or object literal key node.\n@param parent the {@code n}\u0027s parent.\n@param variableName The name that this should be known by.\n@param type the variable\u0027s type. It may be {@code null} if\n    {@code inferred} is {@code true}.\n@param inferred Whether the type is inferred or declared.\n",
      "diff": "@@ -1,59 +1,62 @@\n void defineSlot(Node n, Node parent, String variableName, JSType type, boolean inferred) {\n     Preconditions.checkArgument(!variableName.isEmpty());\n     boolean isGlobalVar \u003d n.isName() \u0026\u0026 scope.isGlobal();\n     boolean shouldDeclareOnGlobalThis \u003d isGlobalVar \u0026\u0026 (parent.isVar() || parent.isFunction());\n     Scope scopeToDeclareIn \u003d scope;\n     if (n.isGetProp() \u0026\u0026 !scope.isGlobal() \u0026\u0026 isQnameRootedInGlobalScope(n)) {\n         Scope globalScope \u003d scope.getGlobalScope();\n         if (!globalScope.isDeclared(variableName, false)) {\n             scopeToDeclareIn \u003d scope.getGlobalScope();\n         }\n     }\n+    boolean isExtern \u003d n.isFromExterns();\n+    Var newVar \u003d null;\n     CompilerInput input \u003d compiler.getInput(inputId);\n     if (scopeToDeclareIn.isDeclared(variableName, false)) {\n         Var oldVar \u003d scopeToDeclareIn.getVar(variableName);\n-        validator.expectUndeclaredVariable(sourceName, input, n, parent, oldVar, variableName, type);\n+        newVar \u003d validator.expectUndeclaredVariable(sourceName, input, n, parent, oldVar, variableName, type);\n     } else {\n         if (!inferred) {\n             setDeferredType(n, type);\n         }\n-        boolean isExtern \u003d n.isFromExterns();\n-        Var newVar \u003d scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n+        newVar \u003d scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n         if (type instanceof EnumType) {\n             Node initialValue \u003d newVar.getInitialValue();\n             boolean isValidValue \u003d initialValue !\u003d null \u0026\u0026 (initialValue.isObjectLit() || initialValue.isQualifiedName());\n             if (!isValidValue) {\n                 compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));\n             }\n         }\n-        FunctionType fnType \u003d JSType.toMaybeFunctionType(type);\n-        if (fnType !\u003d null \u0026\u0026 !type.isEmptyType()) {\n-            if ((fnType.isConstructor() || fnType.isInterface()) \u0026\u0026 !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE))) {\n-                FunctionType superClassCtor \u003d fnType.getSuperClassConstructor();\n-                ObjectType.Property prototypeSlot \u003d fnType.getSlot(\"prototype\");\n-                String prototypeName \u003d variableName + \".prototype\";\n-                if (scopeToDeclareIn.getOwnSlot(prototypeName) \u003d\u003d null) {\n-                    prototypeSlot.setNode(n);\n-                    scopeToDeclareIn.declare(prototypeName, n, prototypeSlot.getType(), input, superClassCtor \u003d\u003d null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n-                }\n-                if (newVar.getInitialValue() \u003d\u003d null \u0026\u0026 !isExtern \u0026\u0026 variableName.equals(fnType.getInstanceType().getReferenceName())) {\n-                    compiler.report(JSError.make(sourceName, n, fnType.isConstructor() ? CTOR_INITIALIZER : IFACE_INITIALIZER, variableName));\n-                }\n+    }\n+    FunctionType fnType \u003d JSType.toMaybeFunctionType(type);\n+    if (fnType !\u003d null \u0026\u0026 !type.isEmptyType()) {\n+        if ((fnType.isConstructor() || fnType.isInterface()) \u0026\u0026 !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE))) {\n+            FunctionType superClassCtor \u003d fnType.getSuperClassConstructor();\n+            ObjectType.Property prototypeSlot \u003d fnType.getSlot(\"prototype\");\n+            prototypeSlot.setNode(n);\n+            String prototypeName \u003d variableName + \".prototype\";\n+            Var prototypeVar \u003d scopeToDeclareIn.getVar(prototypeName);\n+            if (prototypeVar !\u003d null \u0026\u0026 prototypeVar.scope \u003d\u003d scopeToDeclareIn) {\n+                scopeToDeclareIn.undeclare(prototypeVar);\n+            }\n+            scopeToDeclareIn.declare(prototypeName, n, prototypeSlot.getType(), input, superClassCtor \u003d\u003d null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n+            if (newVar.getInitialValue() \u003d\u003d null \u0026\u0026 !isExtern \u0026\u0026 variableName.equals(fnType.getInstanceType().getReferenceName())) {\n+                compiler.report(JSError.make(sourceName, n, fnType.isConstructor() ? CTOR_INITIALIZER : IFACE_INITIALIZER, variableName));\n             }\n         }\n     }\n     if (shouldDeclareOnGlobalThis) {\n         ObjectType globalThis \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS);\n         if (inferred) {\n             globalThis.defineInferredProperty(variableName, type \u003d\u003d null ? getNativeType(JSTypeNative.NO_TYPE) : type, n);\n         } else {\n             globalThis.defineDeclaredProperty(variableName, type, n);\n         }\n     }\n     if (isGlobalVar \u0026\u0026 \"Window\".equals(variableName) \u0026\u0026 type !\u003d null \u0026\u0026 type.isFunctionType() \u0026\u0026 type.isConstructor()) {\n         FunctionType globalThisCtor \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();\n         globalThisCtor.getInstanceType().clearCachedValues();\n         globalThisCtor.getPrototype().clearCachedValues();\n         globalThisCtor.setPrototypeBasedOn((type.toMaybeFunctionType()).getInstanceType());\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "400a87f52b5d1ffc28bb85ed302aefaea5c28021": {
      "type": "Ybodychange",
      "commitMessage": "\nMake sure that a function and its prototype are declared in the same place\n\nR\u003djohnlenz\nDELTA\u003d56  (30 added, 2 deleted, 24 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3693\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1588 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/11/11, 9:54 AM",
      "commitName": "400a87f52b5d1ffc28bb85ed302aefaea5c28021",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "11/10/11, 8:36 AM",
      "commitNameOld": "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 1.05,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "void defineSlot(Node n, Node parent, String variableName, JSType type, boolean inferred) {\n    Preconditions.checkArgument(!variableName.isEmpty());\n    boolean isGlobalVar \u003d n.isName() \u0026\u0026 scope.isGlobal();\n    boolean shouldDeclareOnGlobalThis \u003d isGlobalVar \u0026\u0026 (parent.isVar() || parent.isFunction());\n    Scope scopeToDeclareIn \u003d scope;\n    if (n.isGetProp() \u0026\u0026 !scope.isGlobal() \u0026\u0026 isQnameRootedInGlobalScope(n)) {\n        Scope globalScope \u003d scope.getGlobalScope();\n        if (!globalScope.isDeclared(variableName, false)) {\n            scopeToDeclareIn \u003d scope.getGlobalScope();\n        }\n    }\n    CompilerInput input \u003d compiler.getInput(inputId);\n    if (scopeToDeclareIn.isDeclared(variableName, false)) {\n        Var oldVar \u003d scopeToDeclareIn.getVar(variableName);\n        validator.expectUndeclaredVariable(sourceName, input, n, parent, oldVar, variableName, type);\n    } else {\n        if (!inferred) {\n            setDeferredType(n, type);\n        }\n        boolean isExtern \u003d n.isFromExterns();\n        Var newVar \u003d scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n        if (type instanceof EnumType) {\n            Node initialValue \u003d newVar.getInitialValue();\n            boolean isValidValue \u003d initialValue !\u003d null \u0026\u0026 (initialValue.isObjectLit() || initialValue.isQualifiedName());\n            if (!isValidValue) {\n                compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));\n            }\n        }\n        FunctionType fnType \u003d JSType.toMaybeFunctionType(type);\n        if (fnType !\u003d null \u0026\u0026 !type.isEmptyType()) {\n            if ((fnType.isConstructor() || fnType.isInterface()) \u0026\u0026 !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE))) {\n                FunctionType superClassCtor \u003d fnType.getSuperClassConstructor();\n                ObjectType.Property prototypeSlot \u003d fnType.getSlot(\"prototype\");\n                String prototypeName \u003d variableName + \".prototype\";\n                if (scopeToDeclareIn.getOwnSlot(prototypeName) \u003d\u003d null) {\n                    prototypeSlot.setNode(n);\n                    scopeToDeclareIn.declare(prototypeName, n, prototypeSlot.getType(), input, superClassCtor \u003d\u003d null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n                }\n                if (newVar.getInitialValue() \u003d\u003d null \u0026\u0026 !isExtern \u0026\u0026 variableName.equals(fnType.getInstanceType().getReferenceName())) {\n                    compiler.report(JSError.make(sourceName, n, fnType.isConstructor() ? CTOR_INITIALIZER : IFACE_INITIALIZER, variableName));\n                }\n            }\n        }\n    }\n    if (shouldDeclareOnGlobalThis) {\n        ObjectType globalThis \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS);\n        if (inferred) {\n            globalThis.defineInferredProperty(variableName, type \u003d\u003d null ? getNativeType(JSTypeNative.NO_TYPE) : type, n);\n        } else {\n            globalThis.defineDeclaredProperty(variableName, type, n);\n        }\n    }\n    if (isGlobalVar \u0026\u0026 \"Window\".equals(variableName) \u0026\u0026 type !\u003d null \u0026\u0026 type.isFunctionType() \u0026\u0026 type.isConstructor()) {\n        FunctionType globalThisCtor \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();\n        globalThisCtor.getInstanceType().clearCachedValues();\n        globalThisCtor.getPrototype().clearCachedValues();\n        globalThisCtor.setPrototypeBasedOn((type.toMaybeFunctionType()).getInstanceType());\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 1058,
      "functionName": "defineSlot",
      "functionAnnotation": "",
      "functionDoc": "Defines a symbol in the current scope.\n\n@param n the defining NAME or GETPROP or object literal key node.\n@param parent the {@code n}\u0027s parent.\n@param variableName The name that this should be known by.\n@param type the variable\u0027s type. It may be {@code null} if\n    {@code inferred} is {@code true}.\n@param inferred Whether the type is inferred or declared.\n",
      "diff": "@@ -1,62 +1,59 @@\n void defineSlot(Node n, Node parent, String variableName, JSType type, boolean inferred) {\n     Preconditions.checkArgument(!variableName.isEmpty());\n     boolean isGlobalVar \u003d n.isName() \u0026\u0026 scope.isGlobal();\n     boolean shouldDeclareOnGlobalThis \u003d isGlobalVar \u0026\u0026 (parent.isVar() || parent.isFunction());\n     Scope scopeToDeclareIn \u003d scope;\n     if (n.isGetProp() \u0026\u0026 !scope.isGlobal() \u0026\u0026 isQnameRootedInGlobalScope(n)) {\n         Scope globalScope \u003d scope.getGlobalScope();\n         if (!globalScope.isDeclared(variableName, false)) {\n             scopeToDeclareIn \u003d scope.getGlobalScope();\n         }\n     }\n     CompilerInput input \u003d compiler.getInput(inputId);\n     if (scopeToDeclareIn.isDeclared(variableName, false)) {\n         Var oldVar \u003d scopeToDeclareIn.getVar(variableName);\n         validator.expectUndeclaredVariable(sourceName, input, n, parent, oldVar, variableName, type);\n     } else {\n         if (!inferred) {\n             setDeferredType(n, type);\n         }\n         boolean isExtern \u003d n.isFromExterns();\n         Var newVar \u003d scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n         if (type instanceof EnumType) {\n             Node initialValue \u003d newVar.getInitialValue();\n             boolean isValidValue \u003d initialValue !\u003d null \u0026\u0026 (initialValue.isObjectLit() || initialValue.isQualifiedName());\n             if (!isValidValue) {\n                 compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));\n             }\n         }\n         FunctionType fnType \u003d JSType.toMaybeFunctionType(type);\n         if (fnType !\u003d null \u0026\u0026 !type.isEmptyType()) {\n             if ((fnType.isConstructor() || fnType.isInterface()) \u0026\u0026 !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE))) {\n                 FunctionType superClassCtor \u003d fnType.getSuperClassConstructor();\n-                StaticSlot\u003cJSType\u003e prototypeSlot \u003d fnType.getSlot(\"prototype\");\n+                ObjectType.Property prototypeSlot \u003d fnType.getSlot(\"prototype\");\n                 String prototypeName \u003d variableName + \".prototype\";\n                 if (scopeToDeclareIn.getOwnSlot(prototypeName) \u003d\u003d null) {\n-                    Node prototypeNode \u003d n;\n-                    if (prototypeSlot.getDeclaration() !\u003d null) {\n-                        prototypeNode \u003d prototypeSlot.getDeclaration().getNode();\n-                    }\n-                    scopeToDeclareIn.declare(prototypeName, prototypeNode, prototypeSlot.getType(), input, superClassCtor \u003d\u003d null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n+                    prototypeSlot.setNode(n);\n+                    scopeToDeclareIn.declare(prototypeName, n, prototypeSlot.getType(), input, superClassCtor \u003d\u003d null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n                 }\n                 if (newVar.getInitialValue() \u003d\u003d null \u0026\u0026 !isExtern \u0026\u0026 variableName.equals(fnType.getInstanceType().getReferenceName())) {\n                     compiler.report(JSError.make(sourceName, n, fnType.isConstructor() ? CTOR_INITIALIZER : IFACE_INITIALIZER, variableName));\n                 }\n             }\n         }\n     }\n     if (shouldDeclareOnGlobalThis) {\n         ObjectType globalThis \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS);\n         if (inferred) {\n             globalThis.defineInferredProperty(variableName, type \u003d\u003d null ? getNativeType(JSTypeNative.NO_TYPE) : type, n);\n         } else {\n             globalThis.defineDeclaredProperty(variableName, type, n);\n         }\n     }\n     if (isGlobalVar \u0026\u0026 \"Window\".equals(variableName) \u0026\u0026 type !\u003d null \u0026\u0026 type.isFunctionType() \u0026\u0026 type.isConstructor()) {\n         FunctionType globalThisCtor \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();\n         globalThisCtor.getInstanceType().clearCachedValues();\n         globalThisCtor.getPrototype().clearCachedValues();\n         globalThisCtor.setPrototypeBasedOn((type.toMaybeFunctionType()).getInstanceType());\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c": {
      "type": "Ybodychange",
      "commitMessage": "\nReplace the bulk of the Node.getType() \u003d\u003d Token.XXX calls with\nNode.isXXX calls.\n\nR\u003dnicksantos\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3677\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1582 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/10/11, 8:36 AM",
      "commitName": "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/9/11, 2:45 PM",
      "commitNameOld": "103bd46736cbbbabe6ad27ab11da10d6dbb1a8e5",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "void defineSlot(Node n, Node parent, String variableName, JSType type, boolean inferred) {\n    Preconditions.checkArgument(!variableName.isEmpty());\n    boolean isGlobalVar \u003d n.isName() \u0026\u0026 scope.isGlobal();\n    boolean shouldDeclareOnGlobalThis \u003d isGlobalVar \u0026\u0026 (parent.isVar() || parent.isFunction());\n    Scope scopeToDeclareIn \u003d scope;\n    if (n.isGetProp() \u0026\u0026 !scope.isGlobal() \u0026\u0026 isQnameRootedInGlobalScope(n)) {\n        Scope globalScope \u003d scope.getGlobalScope();\n        if (!globalScope.isDeclared(variableName, false)) {\n            scopeToDeclareIn \u003d scope.getGlobalScope();\n        }\n    }\n    CompilerInput input \u003d compiler.getInput(inputId);\n    if (scopeToDeclareIn.isDeclared(variableName, false)) {\n        Var oldVar \u003d scopeToDeclareIn.getVar(variableName);\n        validator.expectUndeclaredVariable(sourceName, input, n, parent, oldVar, variableName, type);\n    } else {\n        if (!inferred) {\n            setDeferredType(n, type);\n        }\n        boolean isExtern \u003d n.isFromExterns();\n        Var newVar \u003d scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n        if (type instanceof EnumType) {\n            Node initialValue \u003d newVar.getInitialValue();\n            boolean isValidValue \u003d initialValue !\u003d null \u0026\u0026 (initialValue.isObjectLit() || initialValue.isQualifiedName());\n            if (!isValidValue) {\n                compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));\n            }\n        }\n        FunctionType fnType \u003d JSType.toMaybeFunctionType(type);\n        if (fnType !\u003d null \u0026\u0026 !type.isEmptyType()) {\n            if ((fnType.isConstructor() || fnType.isInterface()) \u0026\u0026 !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE))) {\n                FunctionType superClassCtor \u003d fnType.getSuperClassConstructor();\n                StaticSlot\u003cJSType\u003e prototypeSlot \u003d fnType.getSlot(\"prototype\");\n                String prototypeName \u003d variableName + \".prototype\";\n                if (scopeToDeclareIn.getOwnSlot(prototypeName) \u003d\u003d null) {\n                    Node prototypeNode \u003d n;\n                    if (prototypeSlot.getDeclaration() !\u003d null) {\n                        prototypeNode \u003d prototypeSlot.getDeclaration().getNode();\n                    }\n                    scopeToDeclareIn.declare(prototypeName, prototypeNode, prototypeSlot.getType(), input, superClassCtor \u003d\u003d null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n                }\n                if (newVar.getInitialValue() \u003d\u003d null \u0026\u0026 !isExtern \u0026\u0026 variableName.equals(fnType.getInstanceType().getReferenceName())) {\n                    compiler.report(JSError.make(sourceName, n, fnType.isConstructor() ? CTOR_INITIALIZER : IFACE_INITIALIZER, variableName));\n                }\n            }\n        }\n    }\n    if (shouldDeclareOnGlobalThis) {\n        ObjectType globalThis \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS);\n        if (inferred) {\n            globalThis.defineInferredProperty(variableName, type \u003d\u003d null ? getNativeType(JSTypeNative.NO_TYPE) : type, n);\n        } else {\n            globalThis.defineDeclaredProperty(variableName, type, n);\n        }\n    }\n    if (isGlobalVar \u0026\u0026 \"Window\".equals(variableName) \u0026\u0026 type !\u003d null \u0026\u0026 type.isFunctionType() \u0026\u0026 type.isConstructor()) {\n        FunctionType globalThisCtor \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();\n        globalThisCtor.getInstanceType().clearCachedValues();\n        globalThisCtor.getPrototype().clearCachedValues();\n        globalThisCtor.setPrototypeBasedOn((type.toMaybeFunctionType()).getInstanceType());\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 1059,
      "functionName": "defineSlot",
      "functionAnnotation": "",
      "functionDoc": "Defines a symbol in the current scope.\n\n@param n the defining NAME or GETPROP or object literal key node.\n@param parent the {@code n}\u0027s parent.\n@param variableName The name that this should be known by.\n@param type the variable\u0027s type. It may be {@code null} if\n    {@code inferred} is {@code true}.\n@param inferred Whether the type is inferred or declared.\n",
      "diff": "@@ -1,62 +1,62 @@\n void defineSlot(Node n, Node parent, String variableName, JSType type, boolean inferred) {\n     Preconditions.checkArgument(!variableName.isEmpty());\n-    boolean isGlobalVar \u003d n.getType() \u003d\u003d Token.NAME \u0026\u0026 scope.isGlobal();\n-    boolean shouldDeclareOnGlobalThis \u003d isGlobalVar \u0026\u0026 (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.FUNCTION);\n+    boolean isGlobalVar \u003d n.isName() \u0026\u0026 scope.isGlobal();\n+    boolean shouldDeclareOnGlobalThis \u003d isGlobalVar \u0026\u0026 (parent.isVar() || parent.isFunction());\n     Scope scopeToDeclareIn \u003d scope;\n-    if (n.getType() \u003d\u003d Token.GETPROP \u0026\u0026 !scope.isGlobal() \u0026\u0026 isQnameRootedInGlobalScope(n)) {\n+    if (n.isGetProp() \u0026\u0026 !scope.isGlobal() \u0026\u0026 isQnameRootedInGlobalScope(n)) {\n         Scope globalScope \u003d scope.getGlobalScope();\n         if (!globalScope.isDeclared(variableName, false)) {\n             scopeToDeclareIn \u003d scope.getGlobalScope();\n         }\n     }\n     CompilerInput input \u003d compiler.getInput(inputId);\n     if (scopeToDeclareIn.isDeclared(variableName, false)) {\n         Var oldVar \u003d scopeToDeclareIn.getVar(variableName);\n         validator.expectUndeclaredVariable(sourceName, input, n, parent, oldVar, variableName, type);\n     } else {\n         if (!inferred) {\n             setDeferredType(n, type);\n         }\n         boolean isExtern \u003d n.isFromExterns();\n         Var newVar \u003d scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n         if (type instanceof EnumType) {\n             Node initialValue \u003d newVar.getInitialValue();\n-            boolean isValidValue \u003d initialValue !\u003d null \u0026\u0026 (initialValue.getType() \u003d\u003d Token.OBJECTLIT || initialValue.isQualifiedName());\n+            boolean isValidValue \u003d initialValue !\u003d null \u0026\u0026 (initialValue.isObjectLit() || initialValue.isQualifiedName());\n             if (!isValidValue) {\n                 compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));\n             }\n         }\n         FunctionType fnType \u003d JSType.toMaybeFunctionType(type);\n         if (fnType !\u003d null \u0026\u0026 !type.isEmptyType()) {\n             if ((fnType.isConstructor() || fnType.isInterface()) \u0026\u0026 !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE))) {\n                 FunctionType superClassCtor \u003d fnType.getSuperClassConstructor();\n                 StaticSlot\u003cJSType\u003e prototypeSlot \u003d fnType.getSlot(\"prototype\");\n                 String prototypeName \u003d variableName + \".prototype\";\n                 if (scopeToDeclareIn.getOwnSlot(prototypeName) \u003d\u003d null) {\n                     Node prototypeNode \u003d n;\n                     if (prototypeSlot.getDeclaration() !\u003d null) {\n                         prototypeNode \u003d prototypeSlot.getDeclaration().getNode();\n                     }\n                     scopeToDeclareIn.declare(prototypeName, prototypeNode, prototypeSlot.getType(), input, superClassCtor \u003d\u003d null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n                 }\n                 if (newVar.getInitialValue() \u003d\u003d null \u0026\u0026 !isExtern \u0026\u0026 variableName.equals(fnType.getInstanceType().getReferenceName())) {\n                     compiler.report(JSError.make(sourceName, n, fnType.isConstructor() ? CTOR_INITIALIZER : IFACE_INITIALIZER, variableName));\n                 }\n             }\n         }\n     }\n     if (shouldDeclareOnGlobalThis) {\n         ObjectType globalThis \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS);\n         if (inferred) {\n             globalThis.defineInferredProperty(variableName, type \u003d\u003d null ? getNativeType(JSTypeNative.NO_TYPE) : type, n);\n         } else {\n             globalThis.defineDeclaredProperty(variableName, type, n);\n         }\n     }\n     if (isGlobalVar \u0026\u0026 \"Window\".equals(variableName) \u0026\u0026 type !\u003d null \u0026\u0026 type.isFunctionType() \u0026\u0026 type.isConstructor()) {\n         FunctionType globalThisCtor \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();\n         globalThisCtor.getInstanceType().clearCachedValues();\n         globalThisCtor.getPrototype().clearCachedValues();\n         globalThisCtor.setPrototypeBasedOn((type.toMaybeFunctionType()).getInstanceType());\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c42af07351fdce0bcab4b844c2a887eeca27d1a7": {
      "type": "Ybodychange",
      "commitMessage": "\nfix a compiler crash in a rare case\n\nR\u003dacleung\nDELTA\u003d34  (21 added, 7 deleted, 6 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3422\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1496 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/6/11, 1:45 PM",
      "commitName": "c42af07351fdce0bcab4b844c2a887eeca27d1a7",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "9/29/11, 10:35 AM",
      "commitNameOld": "6db92d59fa4984b1cfbb174c3558c0ad090df6fc",
      "commitAuthorOld": "tylerg@google.com",
      "daysBetweenCommits": 7.13,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "actualSource": "void defineSlot(Node n, Node parent, String variableName, JSType type, boolean inferred) {\n    Preconditions.checkArgument(!variableName.isEmpty());\n    boolean isGlobalVar \u003d n.getType() \u003d\u003d Token.NAME \u0026\u0026 scope.isGlobal();\n    boolean shouldDeclareOnGlobalThis \u003d isGlobalVar \u0026\u0026 (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.FUNCTION);\n    Scope scopeToDeclareIn \u003d scope;\n    if (n.getType() \u003d\u003d Token.GETPROP \u0026\u0026 !scope.isGlobal() \u0026\u0026 isQnameRootedInGlobalScope(n)) {\n        Scope globalScope \u003d scope.getGlobalScope();\n        if (!globalScope.isDeclared(variableName, false)) {\n            scopeToDeclareIn \u003d scope.getGlobalScope();\n        }\n    }\n    CompilerInput input \u003d compiler.getInput(inputId);\n    if (scopeToDeclareIn.isDeclared(variableName, false)) {\n        Var oldVar \u003d scopeToDeclareIn.getVar(variableName);\n        validator.expectUndeclaredVariable(sourceName, input, n, parent, oldVar, variableName, type);\n    } else {\n        if (!inferred) {\n            setDeferredType(n, type);\n        }\n        boolean isExtern \u003d n.isFromExterns();\n        Var newVar \u003d scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n        if (type instanceof EnumType) {\n            Node initialValue \u003d newVar.getInitialValue();\n            boolean isValidValue \u003d initialValue !\u003d null \u0026\u0026 (initialValue.getType() \u003d\u003d Token.OBJECTLIT || initialValue.isQualifiedName());\n            if (!isValidValue) {\n                compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));\n            }\n        }\n        FunctionType fnType \u003d JSType.toMaybeFunctionType(type);\n        if (fnType !\u003d null \u0026\u0026 !type.isEmptyType()) {\n            if ((fnType.isConstructor() || fnType.isInterface()) \u0026\u0026 !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE))) {\n                FunctionType superClassCtor \u003d fnType.getSuperClassConstructor();\n                StaticSlot\u003cJSType\u003e prototypeSlot \u003d fnType.getSlot(\"prototype\");\n                String prototypeName \u003d variableName + \".prototype\";\n                if (scopeToDeclareIn.getOwnSlot(prototypeName) \u003d\u003d null) {\n                    Node prototypeNode \u003d n;\n                    if (prototypeSlot.getDeclaration() !\u003d null) {\n                        prototypeNode \u003d prototypeSlot.getDeclaration().getNode();\n                    }\n                    scopeToDeclareIn.declare(prototypeName, prototypeNode, prototypeSlot.getType(), input, superClassCtor \u003d\u003d null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n                }\n                if (newVar.getInitialValue() \u003d\u003d null \u0026\u0026 !isExtern \u0026\u0026 variableName.equals(fnType.getInstanceType().getReferenceName())) {\n                    compiler.report(JSError.make(sourceName, n, fnType.isConstructor() ? CTOR_INITIALIZER : IFACE_INITIALIZER, variableName));\n                }\n            }\n        }\n    }\n    if (shouldDeclareOnGlobalThis) {\n        ObjectType globalThis \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS);\n        if (inferred) {\n            globalThis.defineInferredProperty(variableName, type \u003d\u003d null ? getNativeType(JSTypeNative.NO_TYPE) : type, n);\n        } else {\n            globalThis.defineDeclaredProperty(variableName, type, n);\n        }\n    }\n    if (isGlobalVar \u0026\u0026 \"Window\".equals(variableName) \u0026\u0026 type !\u003d null \u0026\u0026 type.isFunctionType() \u0026\u0026 type.isConstructor()) {\n        FunctionType globalThisCtor \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();\n        globalThisCtor.getInstanceType().clearCachedValues();\n        globalThisCtor.getPrototype().clearCachedValues();\n        globalThisCtor.setPrototypeBasedOn((type.toMaybeFunctionType()).getInstanceType());\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 1065,
      "functionName": "defineSlot",
      "functionAnnotation": "",
      "functionDoc": "Defines a symbol in the current scope.\n\n@param n the defining NAME or GETPROP or object literal key node.\n@param parent the {@code n}\u0027s parent.\n@param variableName The name that this should be known by.\n@param type the variable\u0027s type. It may be {@code null} if\n    {@code inferred} is {@code true}.\n@param inferred Whether the type is inferred or declared.\n",
      "diff": "@@ -1,59 +1,62 @@\n void defineSlot(Node n, Node parent, String variableName, JSType type, boolean inferred) {\n     Preconditions.checkArgument(!variableName.isEmpty());\n     boolean isGlobalVar \u003d n.getType() \u003d\u003d Token.NAME \u0026\u0026 scope.isGlobal();\n     boolean shouldDeclareOnGlobalThis \u003d isGlobalVar \u0026\u0026 (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.FUNCTION);\n     Scope scopeToDeclareIn \u003d scope;\n     if (n.getType() \u003d\u003d Token.GETPROP \u0026\u0026 !scope.isGlobal() \u0026\u0026 isQnameRootedInGlobalScope(n)) {\n         Scope globalScope \u003d scope.getGlobalScope();\n         if (!globalScope.isDeclared(variableName, false)) {\n             scopeToDeclareIn \u003d scope.getGlobalScope();\n         }\n     }\n     CompilerInput input \u003d compiler.getInput(inputId);\n     if (scopeToDeclareIn.isDeclared(variableName, false)) {\n         Var oldVar \u003d scopeToDeclareIn.getVar(variableName);\n         validator.expectUndeclaredVariable(sourceName, input, n, parent, oldVar, variableName, type);\n     } else {\n         if (!inferred) {\n             setDeferredType(n, type);\n         }\n         boolean isExtern \u003d n.isFromExterns();\n         Var newVar \u003d scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n         if (type instanceof EnumType) {\n             Node initialValue \u003d newVar.getInitialValue();\n             boolean isValidValue \u003d initialValue !\u003d null \u0026\u0026 (initialValue.getType() \u003d\u003d Token.OBJECTLIT || initialValue.isQualifiedName());\n             if (!isValidValue) {\n                 compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));\n             }\n         }\n         FunctionType fnType \u003d JSType.toMaybeFunctionType(type);\n         if (fnType !\u003d null \u0026\u0026 !type.isEmptyType()) {\n             if ((fnType.isConstructor() || fnType.isInterface()) \u0026\u0026 !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE))) {\n                 FunctionType superClassCtor \u003d fnType.getSuperClassConstructor();\n                 StaticSlot\u003cJSType\u003e prototypeSlot \u003d fnType.getSlot(\"prototype\");\n-                Node prototypeNode \u003d n;\n-                if (prototypeSlot.getDeclaration() !\u003d null) {\n-                    prototypeNode \u003d prototypeSlot.getDeclaration().getNode();\n+                String prototypeName \u003d variableName + \".prototype\";\n+                if (scopeToDeclareIn.getOwnSlot(prototypeName) \u003d\u003d null) {\n+                    Node prototypeNode \u003d n;\n+                    if (prototypeSlot.getDeclaration() !\u003d null) {\n+                        prototypeNode \u003d prototypeSlot.getDeclaration().getNode();\n+                    }\n+                    scopeToDeclareIn.declare(prototypeName, prototypeNode, prototypeSlot.getType(), input, superClassCtor \u003d\u003d null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n                 }\n-                scopeToDeclareIn.declare(variableName + \".prototype\", prototypeNode, prototypeSlot.getType(), input, superClassCtor \u003d\u003d null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n                 if (newVar.getInitialValue() \u003d\u003d null \u0026\u0026 !isExtern \u0026\u0026 variableName.equals(fnType.getInstanceType().getReferenceName())) {\n                     compiler.report(JSError.make(sourceName, n, fnType.isConstructor() ? CTOR_INITIALIZER : IFACE_INITIALIZER, variableName));\n                 }\n             }\n         }\n     }\n     if (shouldDeclareOnGlobalThis) {\n         ObjectType globalThis \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS);\n         if (inferred) {\n             globalThis.defineInferredProperty(variableName, type \u003d\u003d null ? getNativeType(JSTypeNative.NO_TYPE) : type, n);\n         } else {\n             globalThis.defineDeclaredProperty(variableName, type, n);\n         }\n     }\n     if (isGlobalVar \u0026\u0026 \"Window\".equals(variableName) \u0026\u0026 type !\u003d null \u0026\u0026 type.isFunctionType() \u0026\u0026 type.isConstructor()) {\n         FunctionType globalThisCtor \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();\n         globalThisCtor.getInstanceType().clearCachedValues();\n         globalThisCtor.getPrototype().clearCachedValues();\n         globalThisCtor.setPrototypeBasedOn((type.toMaybeFunctionType()).getInstanceType());\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5c695ce6ca5095ba764d34e634c20f65d8a558e2": {
      "type": "Ybodychange",
      "commitMessage": "\nProper source information for function prototypes\n\nR\u003dacleung\nDELTA\u003d343  (190 added, 106 deleted, 47 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3216\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1424 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/8/11, 7:15 AM",
      "commitName": "5c695ce6ca5095ba764d34e634c20f65d8a558e2",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "9/6/11, 11:52 AM",
      "commitNameOld": "6a2b233cac8fad95318405149b01d2c073509f62",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 1.81,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "actualSource": "void defineSlot(Node n, Node parent, String variableName, JSType type, boolean inferred) {\n    Preconditions.checkArgument(!variableName.isEmpty());\n    boolean isGlobalVar \u003d n.getType() \u003d\u003d Token.NAME \u0026\u0026 scope.isGlobal();\n    boolean shouldDeclareOnGlobalThis \u003d isGlobalVar \u0026\u0026 (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.FUNCTION);\n    Scope scopeToDeclareIn \u003d scope;\n    if (n.getType() \u003d\u003d Token.GETPROP \u0026\u0026 !scope.isGlobal() \u0026\u0026 isQnameRootedInGlobalScope(n)) {\n        Scope globalScope \u003d scope.getGlobalScope();\n        if (!globalScope.isDeclared(variableName, false)) {\n            scopeToDeclareIn \u003d scope.getGlobalScope();\n        }\n    }\n    CompilerInput input \u003d compiler.getInput(inputId);\n    if (scopeToDeclareIn.isDeclared(variableName, false)) {\n        Var oldVar \u003d scopeToDeclareIn.getVar(variableName);\n        validator.expectUndeclaredVariable(sourceName, input, n, parent, oldVar, variableName, type);\n    } else {\n        if (!inferred) {\n            setDeferredType(n, type);\n        }\n        boolean isExtern \u003d n.isFromExterns();\n        Var newVar \u003d scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n        if (type instanceof EnumType) {\n            Node initialValue \u003d newVar.getInitialValue();\n            boolean isValidValue \u003d initialValue !\u003d null \u0026\u0026 (initialValue.getType() \u003d\u003d Token.OBJECTLIT || initialValue.isQualifiedName());\n            if (!isValidValue) {\n                compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));\n            }\n        }\n        FunctionType fnType \u003d JSType.toMaybeFunctionType(type);\n        if (fnType !\u003d null \u0026\u0026 !type.isEmptyType()) {\n            if ((fnType.isConstructor() || fnType.isInterface()) \u0026\u0026 !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE))) {\n                FunctionType superClassCtor \u003d fnType.getSuperClassConstructor();\n                StaticSlot\u003cJSType\u003e prototypeSlot \u003d fnType.getSlot(\"prototype\");\n                Node prototypeNode \u003d n;\n                if (prototypeSlot.getDeclaration() !\u003d null) {\n                    prototypeNode \u003d prototypeSlot.getDeclaration().getNode();\n                }\n                scopeToDeclareIn.declare(variableName + \".prototype\", prototypeNode, prototypeSlot.getType(), input, superClassCtor \u003d\u003d null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n                if (newVar.getInitialValue() \u003d\u003d null \u0026\u0026 !isExtern \u0026\u0026 variableName.equals(fnType.getInstanceType().getReferenceName())) {\n                    compiler.report(JSError.make(sourceName, n, fnType.isConstructor() ? CTOR_INITIALIZER : IFACE_INITIALIZER, variableName));\n                }\n            }\n        }\n    }\n    if (shouldDeclareOnGlobalThis) {\n        ObjectType globalThis \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS);\n        if (inferred) {\n            globalThis.defineInferredProperty(variableName, type \u003d\u003d null ? getNativeType(JSTypeNative.NO_TYPE) : type, n);\n        } else {\n            globalThis.defineDeclaredProperty(variableName, type, n);\n        }\n    }\n    if (isGlobalVar \u0026\u0026 \"Window\".equals(variableName) \u0026\u0026 type !\u003d null \u0026\u0026 type.isFunctionType() \u0026\u0026 type.isConstructor()) {\n        FunctionType globalThisCtor \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();\n        globalThisCtor.getInstanceType().clearCachedValues();\n        globalThisCtor.getPrototype().clearCachedValues();\n        globalThisCtor.setPrototypeBasedOn((type.toMaybeFunctionType()).getInstanceType());\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 1045,
      "functionName": "defineSlot",
      "functionAnnotation": "",
      "functionDoc": "Defines a symbol in the current scope.\n\n@param n the defining NAME or GETPROP or object literal key node.\n@param parent the {@code n}\u0027s parent.\n@param variableName The name that this should be known by.\n@param type the variable\u0027s type. It may be {@code null} if\n    {@code inferred} is {@code true}.\n@param inferred Whether the type is inferred or declared.\n",
      "diff": "@@ -1,54 +1,59 @@\n void defineSlot(Node n, Node parent, String variableName, JSType type, boolean inferred) {\n     Preconditions.checkArgument(!variableName.isEmpty());\n     boolean isGlobalVar \u003d n.getType() \u003d\u003d Token.NAME \u0026\u0026 scope.isGlobal();\n     boolean shouldDeclareOnGlobalThis \u003d isGlobalVar \u0026\u0026 (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.FUNCTION);\n     Scope scopeToDeclareIn \u003d scope;\n     if (n.getType() \u003d\u003d Token.GETPROP \u0026\u0026 !scope.isGlobal() \u0026\u0026 isQnameRootedInGlobalScope(n)) {\n         Scope globalScope \u003d scope.getGlobalScope();\n         if (!globalScope.isDeclared(variableName, false)) {\n             scopeToDeclareIn \u003d scope.getGlobalScope();\n         }\n     }\n     CompilerInput input \u003d compiler.getInput(inputId);\n     if (scopeToDeclareIn.isDeclared(variableName, false)) {\n         Var oldVar \u003d scopeToDeclareIn.getVar(variableName);\n         validator.expectUndeclaredVariable(sourceName, input, n, parent, oldVar, variableName, type);\n     } else {\n         if (!inferred) {\n             setDeferredType(n, type);\n         }\n         boolean isExtern \u003d n.isFromExterns();\n         Var newVar \u003d scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n         if (type instanceof EnumType) {\n             Node initialValue \u003d newVar.getInitialValue();\n             boolean isValidValue \u003d initialValue !\u003d null \u0026\u0026 (initialValue.getType() \u003d\u003d Token.OBJECTLIT || initialValue.isQualifiedName());\n             if (!isValidValue) {\n                 compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));\n             }\n         }\n         FunctionType fnType \u003d JSType.toMaybeFunctionType(type);\n         if (fnType !\u003d null \u0026\u0026 !type.isEmptyType()) {\n             if ((fnType.isConstructor() || fnType.isInterface()) \u0026\u0026 !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE))) {\n                 FunctionType superClassCtor \u003d fnType.getSuperClassConstructor();\n-                scopeToDeclareIn.declare(variableName + \".prototype\", n, fnType.getPrototype(), input, superClassCtor \u003d\u003d null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n+                StaticSlot\u003cJSType\u003e prototypeSlot \u003d fnType.getSlot(\"prototype\");\n+                Node prototypeNode \u003d n;\n+                if (prototypeSlot.getDeclaration() !\u003d null) {\n+                    prototypeNode \u003d prototypeSlot.getDeclaration().getNode();\n+                }\n+                scopeToDeclareIn.declare(variableName + \".prototype\", prototypeNode, prototypeSlot.getType(), input, superClassCtor \u003d\u003d null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n                 if (newVar.getInitialValue() \u003d\u003d null \u0026\u0026 !isExtern \u0026\u0026 variableName.equals(fnType.getInstanceType().getReferenceName())) {\n                     compiler.report(JSError.make(sourceName, n, fnType.isConstructor() ? CTOR_INITIALIZER : IFACE_INITIALIZER, variableName));\n                 }\n             }\n         }\n     }\n     if (shouldDeclareOnGlobalThis) {\n         ObjectType globalThis \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS);\n         if (inferred) {\n             globalThis.defineInferredProperty(variableName, type \u003d\u003d null ? getNativeType(JSTypeNative.NO_TYPE) : type, n);\n         } else {\n             globalThis.defineDeclaredProperty(variableName, type, n);\n         }\n     }\n     if (isGlobalVar \u0026\u0026 \"Window\".equals(variableName) \u0026\u0026 type !\u003d null \u0026\u0026 type.isFunctionType() \u0026\u0026 type.isConstructor()) {\n         FunctionType globalThisCtor \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();\n         globalThisCtor.getInstanceType().clearCachedValues();\n         globalThisCtor.getPrototype().clearCachedValues();\n         globalThisCtor.setPrototypeBasedOn((type.toMaybeFunctionType()).getInstanceType());\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6a2b233cac8fad95318405149b01d2c073509f62": {
      "type": "Ybodychange",
      "commitMessage": "\nRedeclare native types in the externs. This ensures that source links\npoint to the right place\n\nR\u003dacleung\nDELTA\u003d22  (17 added, 1 deleted, 4 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3185\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1409 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/6/11, 11:52 AM",
      "commitName": "6a2b233cac8fad95318405149b01d2c073509f62",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "8/31/11, 7:30 PM",
      "commitNameOld": "7e9b8336568ea7f05c33e1b58eb67fa6d4eee756",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 5.68,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "void defineSlot(Node n, Node parent, String variableName, JSType type, boolean inferred) {\n    Preconditions.checkArgument(!variableName.isEmpty());\n    boolean isGlobalVar \u003d n.getType() \u003d\u003d Token.NAME \u0026\u0026 scope.isGlobal();\n    boolean shouldDeclareOnGlobalThis \u003d isGlobalVar \u0026\u0026 (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.FUNCTION);\n    Scope scopeToDeclareIn \u003d scope;\n    if (n.getType() \u003d\u003d Token.GETPROP \u0026\u0026 !scope.isGlobal() \u0026\u0026 isQnameRootedInGlobalScope(n)) {\n        Scope globalScope \u003d scope.getGlobalScope();\n        if (!globalScope.isDeclared(variableName, false)) {\n            scopeToDeclareIn \u003d scope.getGlobalScope();\n        }\n    }\n    CompilerInput input \u003d compiler.getInput(inputId);\n    if (scopeToDeclareIn.isDeclared(variableName, false)) {\n        Var oldVar \u003d scopeToDeclareIn.getVar(variableName);\n        validator.expectUndeclaredVariable(sourceName, input, n, parent, oldVar, variableName, type);\n    } else {\n        if (!inferred) {\n            setDeferredType(n, type);\n        }\n        boolean isExtern \u003d n.isFromExterns();\n        Var newVar \u003d scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n        if (type instanceof EnumType) {\n            Node initialValue \u003d newVar.getInitialValue();\n            boolean isValidValue \u003d initialValue !\u003d null \u0026\u0026 (initialValue.getType() \u003d\u003d Token.OBJECTLIT || initialValue.isQualifiedName());\n            if (!isValidValue) {\n                compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));\n            }\n        }\n        FunctionType fnType \u003d JSType.toMaybeFunctionType(type);\n        if (fnType !\u003d null \u0026\u0026 !type.isEmptyType()) {\n            if ((fnType.isConstructor() || fnType.isInterface()) \u0026\u0026 !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE))) {\n                FunctionType superClassCtor \u003d fnType.getSuperClassConstructor();\n                scopeToDeclareIn.declare(variableName + \".prototype\", n, fnType.getPrototype(), input, superClassCtor \u003d\u003d null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n                if (newVar.getInitialValue() \u003d\u003d null \u0026\u0026 !isExtern \u0026\u0026 variableName.equals(fnType.getInstanceType().getReferenceName())) {\n                    compiler.report(JSError.make(sourceName, n, fnType.isConstructor() ? CTOR_INITIALIZER : IFACE_INITIALIZER, variableName));\n                }\n            }\n        }\n    }\n    if (shouldDeclareOnGlobalThis) {\n        ObjectType globalThis \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS);\n        if (inferred) {\n            globalThis.defineInferredProperty(variableName, type \u003d\u003d null ? getNativeType(JSTypeNative.NO_TYPE) : type, n);\n        } else {\n            globalThis.defineDeclaredProperty(variableName, type, n);\n        }\n    }\n    if (isGlobalVar \u0026\u0026 \"Window\".equals(variableName) \u0026\u0026 type !\u003d null \u0026\u0026 type.isFunctionType() \u0026\u0026 type.isConstructor()) {\n        FunctionType globalThisCtor \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();\n        globalThisCtor.getInstanceType().clearCachedValues();\n        globalThisCtor.getPrototype().clearCachedValues();\n        globalThisCtor.setPrototypeBasedOn((type.toMaybeFunctionType()).getInstanceType());\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 1044,
      "functionName": "defineSlot",
      "functionAnnotation": "",
      "functionDoc": "Defines a symbol in the current scope.\n\n@param n the defining NAME or GETPROP or object literal key node.\n@param parent the {@code n}\u0027s parent.\n@param variableName The name that this should be known by.\n@param type the variable\u0027s type. It may be {@code null} if\n    {@code inferred} is {@code true}.\n@param inferred Whether the type is inferred or declared.\n",
      "diff": "@@ -1,54 +1,54 @@\n void defineSlot(Node n, Node parent, String variableName, JSType type, boolean inferred) {\n     Preconditions.checkArgument(!variableName.isEmpty());\n     boolean isGlobalVar \u003d n.getType() \u003d\u003d Token.NAME \u0026\u0026 scope.isGlobal();\n     boolean shouldDeclareOnGlobalThis \u003d isGlobalVar \u0026\u0026 (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.FUNCTION);\n     Scope scopeToDeclareIn \u003d scope;\n     if (n.getType() \u003d\u003d Token.GETPROP \u0026\u0026 !scope.isGlobal() \u0026\u0026 isQnameRootedInGlobalScope(n)) {\n         Scope globalScope \u003d scope.getGlobalScope();\n         if (!globalScope.isDeclared(variableName, false)) {\n             scopeToDeclareIn \u003d scope.getGlobalScope();\n         }\n     }\n+    CompilerInput input \u003d compiler.getInput(inputId);\n     if (scopeToDeclareIn.isDeclared(variableName, false)) {\n         Var oldVar \u003d scopeToDeclareIn.getVar(variableName);\n-        validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);\n+        validator.expectUndeclaredVariable(sourceName, input, n, parent, oldVar, variableName, type);\n     } else {\n         if (!inferred) {\n             setDeferredType(n, type);\n         }\n-        CompilerInput input \u003d compiler.getInput(inputId);\n         boolean isExtern \u003d n.isFromExterns();\n         Var newVar \u003d scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n         if (type instanceof EnumType) {\n             Node initialValue \u003d newVar.getInitialValue();\n             boolean isValidValue \u003d initialValue !\u003d null \u0026\u0026 (initialValue.getType() \u003d\u003d Token.OBJECTLIT || initialValue.isQualifiedName());\n             if (!isValidValue) {\n                 compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));\n             }\n         }\n         FunctionType fnType \u003d JSType.toMaybeFunctionType(type);\n         if (fnType !\u003d null \u0026\u0026 !type.isEmptyType()) {\n             if ((fnType.isConstructor() || fnType.isInterface()) \u0026\u0026 !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE))) {\n                 FunctionType superClassCtor \u003d fnType.getSuperClassConstructor();\n                 scopeToDeclareIn.declare(variableName + \".prototype\", n, fnType.getPrototype(), input, superClassCtor \u003d\u003d null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n                 if (newVar.getInitialValue() \u003d\u003d null \u0026\u0026 !isExtern \u0026\u0026 variableName.equals(fnType.getInstanceType().getReferenceName())) {\n                     compiler.report(JSError.make(sourceName, n, fnType.isConstructor() ? CTOR_INITIALIZER : IFACE_INITIALIZER, variableName));\n                 }\n             }\n         }\n     }\n     if (shouldDeclareOnGlobalThis) {\n         ObjectType globalThis \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS);\n         if (inferred) {\n             globalThis.defineInferredProperty(variableName, type \u003d\u003d null ? getNativeType(JSTypeNative.NO_TYPE) : type, n);\n         } else {\n             globalThis.defineDeclaredProperty(variableName, type, n);\n         }\n     }\n     if (isGlobalVar \u0026\u0026 \"Window\".equals(variableName) \u0026\u0026 type !\u003d null \u0026\u0026 type.isFunctionType() \u0026\u0026 type.isConstructor()) {\n         FunctionType globalThisCtor \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();\n         globalThisCtor.getInstanceType().clearCachedValues();\n         globalThisCtor.getPrototype().clearCachedValues();\n         globalThisCtor.setPrototypeBasedOn((type.toMaybeFunctionType()).getInstanceType());\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "fc307189f141773d0a66c235f8f37f05c8252d8d": {
      "type": "Ybodychange",
      "commitMessage": "\nMake sure \"global this\" properties get declared even for built-in\ntypes.\n\nR\u003dacleung\nDELTA\u003d37  (23 added, 14 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3172\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1400 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/31/11, 4:48 PM",
      "commitName": "fc307189f141773d0a66c235f8f37f05c8252d8d",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "8/31/11, 8:11 AM",
      "commitNameOld": "a2dd1662d90524a12a99a9fa7d4308568938d963",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.36,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "void defineSlot(Node n, Node parent, String variableName, JSType type, boolean inferred) {\n    Preconditions.checkArgument(!variableName.isEmpty());\n    boolean isGlobalVar \u003d n.getType() \u003d\u003d Token.NAME \u0026\u0026 scope.isGlobal();\n    boolean shouldDeclareOnGlobalThis \u003d isGlobalVar \u0026\u0026 (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.FUNCTION);\n    Scope scopeToDeclareIn \u003d scope;\n    if (n.getType() \u003d\u003d Token.GETPROP \u0026\u0026 !scope.isGlobal() \u0026\u0026 isQnameRootedInGlobalScope(n)) {\n        Scope globalScope \u003d scope.getGlobalScope();\n        if (!globalScope.isDeclared(variableName, false)) {\n            scopeToDeclareIn \u003d scope.getGlobalScope();\n        }\n    }\n    if (scopeToDeclareIn.isDeclared(variableName, false)) {\n        Var oldVar \u003d scopeToDeclareIn.getVar(variableName);\n        validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);\n    } else {\n        if (!inferred) {\n            setDeferredType(n, type);\n        }\n        CompilerInput input \u003d compiler.getInput(inputId);\n        boolean isExtern \u003d n.isFromExterns();\n        Var newVar \u003d scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n        if (type instanceof EnumType) {\n            Node initialValue \u003d newVar.getInitialValue();\n            boolean isValidValue \u003d initialValue !\u003d null \u0026\u0026 (initialValue.getType() \u003d\u003d Token.OBJECTLIT || initialValue.isQualifiedName());\n            if (!isValidValue) {\n                compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));\n            }\n        }\n        FunctionType fnType \u003d JSType.toMaybeFunctionType(type);\n        if (fnType !\u003d null \u0026\u0026 !type.isEmptyType()) {\n            if ((fnType.isConstructor() || fnType.isInterface()) \u0026\u0026 !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE))) {\n                FunctionType superClassCtor \u003d fnType.getSuperClassConstructor();\n                scopeToDeclareIn.declare(variableName + \".prototype\", n, fnType.getPrototype(), input, superClassCtor \u003d\u003d null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n                if (newVar.getInitialValue() \u003d\u003d null \u0026\u0026 !isExtern \u0026\u0026 variableName.equals(fnType.getInstanceType().getReferenceName())) {\n                    compiler.report(JSError.make(sourceName, n, fnType.isConstructor() ? CTOR_INITIALIZER : IFACE_INITIALIZER, variableName));\n                }\n            }\n        }\n    }\n    if (shouldDeclareOnGlobalThis) {\n        ObjectType globalThis \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS);\n        if (inferred) {\n            globalThis.defineInferredProperty(variableName, type \u003d\u003d null ? getNativeType(JSTypeNative.NO_TYPE) : type, n);\n        } else {\n            globalThis.defineDeclaredProperty(variableName, type, n);\n        }\n    }\n    if (isGlobalVar \u0026\u0026 \"Window\".equals(variableName) \u0026\u0026 type !\u003d null \u0026\u0026 type.isFunctionType() \u0026\u0026 type.isConstructor()) {\n        FunctionType globalThisCtor \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();\n        globalThisCtor.getInstanceType().clearCachedValues();\n        globalThisCtor.getPrototype().clearCachedValues();\n        globalThisCtor.setPrototypeBasedOn((type.toMaybeFunctionType()).getInstanceType());\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 1044,
      "functionName": "defineSlot",
      "functionAnnotation": "",
      "functionDoc": "Defines a symbol in the current scope.\n\n@param n the defining NAME or GETPROP or object literal key node.\n@param parent the {@code n}\u0027s parent.\n@param variableName The name that this should be known by.\n@param type the variable\u0027s type. It may be {@code null} if\n    {@code inferred} is {@code true}.\n@param inferred Whether the type is inferred or declared.\n",
      "diff": "@@ -1,54 +1,54 @@\n void defineSlot(Node n, Node parent, String variableName, JSType type, boolean inferred) {\n     Preconditions.checkArgument(!variableName.isEmpty());\n     boolean isGlobalVar \u003d n.getType() \u003d\u003d Token.NAME \u0026\u0026 scope.isGlobal();\n     boolean shouldDeclareOnGlobalThis \u003d isGlobalVar \u0026\u0026 (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.FUNCTION);\n     Scope scopeToDeclareIn \u003d scope;\n     if (n.getType() \u003d\u003d Token.GETPROP \u0026\u0026 !scope.isGlobal() \u0026\u0026 isQnameRootedInGlobalScope(n)) {\n         Scope globalScope \u003d scope.getGlobalScope();\n         if (!globalScope.isDeclared(variableName, false)) {\n             scopeToDeclareIn \u003d scope.getGlobalScope();\n         }\n     }\n     if (scopeToDeclareIn.isDeclared(variableName, false)) {\n         Var oldVar \u003d scopeToDeclareIn.getVar(variableName);\n         validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);\n     } else {\n         if (!inferred) {\n             setDeferredType(n, type);\n         }\n         CompilerInput input \u003d compiler.getInput(inputId);\n         boolean isExtern \u003d n.isFromExterns();\n         Var newVar \u003d scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n-        if (shouldDeclareOnGlobalThis) {\n-            ObjectType globalThis \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS);\n-            if (inferred) {\n-                globalThis.defineInferredProperty(variableName, type \u003d\u003d null ? getNativeType(JSTypeNative.NO_TYPE) : type, n);\n-            } else {\n-                globalThis.defineDeclaredProperty(variableName, type, n);\n-            }\n-        }\n         if (type instanceof EnumType) {\n             Node initialValue \u003d newVar.getInitialValue();\n             boolean isValidValue \u003d initialValue !\u003d null \u0026\u0026 (initialValue.getType() \u003d\u003d Token.OBJECTLIT || initialValue.isQualifiedName());\n             if (!isValidValue) {\n                 compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));\n             }\n         }\n         FunctionType fnType \u003d JSType.toMaybeFunctionType(type);\n         if (fnType !\u003d null \u0026\u0026 !type.isEmptyType()) {\n             if ((fnType.isConstructor() || fnType.isInterface()) \u0026\u0026 !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE))) {\n                 FunctionType superClassCtor \u003d fnType.getSuperClassConstructor();\n                 scopeToDeclareIn.declare(variableName + \".prototype\", n, fnType.getPrototype(), input, superClassCtor \u003d\u003d null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n                 if (newVar.getInitialValue() \u003d\u003d null \u0026\u0026 !isExtern \u0026\u0026 variableName.equals(fnType.getInstanceType().getReferenceName())) {\n                     compiler.report(JSError.make(sourceName, n, fnType.isConstructor() ? CTOR_INITIALIZER : IFACE_INITIALIZER, variableName));\n                 }\n             }\n         }\n     }\n+    if (shouldDeclareOnGlobalThis) {\n+        ObjectType globalThis \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS);\n+        if (inferred) {\n+            globalThis.defineInferredProperty(variableName, type \u003d\u003d null ? getNativeType(JSTypeNative.NO_TYPE) : type, n);\n+        } else {\n+            globalThis.defineDeclaredProperty(variableName, type, n);\n+        }\n+    }\n     if (isGlobalVar \u0026\u0026 \"Window\".equals(variableName) \u0026\u0026 type !\u003d null \u0026\u0026 type.isFunctionType() \u0026\u0026 type.isConstructor()) {\n         FunctionType globalThisCtor \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();\n         globalThisCtor.getInstanceType().clearCachedValues();\n         globalThisCtor.getPrototype().clearCachedValues();\n         globalThisCtor.setPrototypeBasedOn((type.toMaybeFunctionType()).getInstanceType());\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bd9c7b620384fe5a98772729001ed56304459bc6": {
      "type": "Ybodychange",
      "commitMessage": "\nAdd toMaybeFunctionType/toMaybeEnumElementType.\ntry #2. the bugs in jstestc were fixed. this cl is exactly\nthe same as the original\n\nR\u003djohnlenz\nDELTA\u003d317  (79 added, 47 deleted, 191 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3078\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1367 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/18/11, 3:46 PM",
      "commitName": "bd9c7b620384fe5a98772729001ed56304459bc6",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "8/18/11, 10:40 AM",
      "commitNameOld": "01d1238a2a577d8988a72c29304a3283ca05a29a",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.21,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "void defineSlot(Node n, Node parent, String variableName, JSType type, boolean inferred) {\n    Preconditions.checkArgument(!variableName.isEmpty());\n    boolean isGlobalVar \u003d n.getType() \u003d\u003d Token.NAME \u0026\u0026 scope.isGlobal();\n    boolean shouldDeclareOnGlobalThis \u003d isGlobalVar \u0026\u0026 (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.FUNCTION);\n    Scope scopeToDeclareIn \u003d scope;\n    if (n.getType() \u003d\u003d Token.GETPROP \u0026\u0026 !scope.isGlobal() \u0026\u0026 isQnameRootedInGlobalScope(n)) {\n        Scope globalScope \u003d scope.getGlobalScope();\n        if (!globalScope.isDeclared(variableName, false)) {\n            scopeToDeclareIn \u003d scope.getGlobalScope();\n        }\n    }\n    if (scopeToDeclareIn.isDeclared(variableName, false)) {\n        Var oldVar \u003d scopeToDeclareIn.getVar(variableName);\n        validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);\n    } else {\n        if (!inferred) {\n            setDeferredType(n, type);\n        }\n        CompilerInput input \u003d compiler.getInput(inputId);\n        boolean isExtern \u003d n.isFromExterns();\n        Var newVar \u003d scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n        if (shouldDeclareOnGlobalThis) {\n            ObjectType globalThis \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS);\n            if (inferred) {\n                globalThis.defineInferredProperty(variableName, type \u003d\u003d null ? getNativeType(JSTypeNative.NO_TYPE) : type, n);\n            } else {\n                globalThis.defineDeclaredProperty(variableName, type, n);\n            }\n        }\n        if (type instanceof EnumType) {\n            Node initialValue \u003d newVar.getInitialValue();\n            boolean isValidValue \u003d initialValue !\u003d null \u0026\u0026 (initialValue.getType() \u003d\u003d Token.OBJECTLIT || initialValue.isQualifiedName());\n            if (!isValidValue) {\n                compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));\n            }\n        }\n        FunctionType fnType \u003d JSType.toMaybeFunctionType(type);\n        if (fnType !\u003d null \u0026\u0026 !type.isEmptyType()) {\n            if ((fnType.isConstructor() || fnType.isInterface()) \u0026\u0026 !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE))) {\n                FunctionType superClassCtor \u003d fnType.getSuperClassConstructor();\n                scopeToDeclareIn.declare(variableName + \".prototype\", n, fnType.getPrototype(), input, superClassCtor \u003d\u003d null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n                if (newVar.getInitialValue() \u003d\u003d null \u0026\u0026 !isExtern \u0026\u0026 variableName.equals(fnType.getInstanceType().getReferenceName())) {\n                    compiler.report(JSError.make(sourceName, n, fnType.isConstructor() ? CTOR_INITIALIZER : IFACE_INITIALIZER, variableName));\n                }\n            }\n        }\n    }\n    if (isGlobalVar \u0026\u0026 \"Window\".equals(variableName) \u0026\u0026 type !\u003d null \u0026\u0026 type.isFunctionType() \u0026\u0026 type.isConstructor()) {\n        FunctionType globalThisCtor \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();\n        globalThisCtor.getInstanceType().clearCachedValues();\n        globalThisCtor.getPrototype().clearCachedValues();\n        globalThisCtor.setPrototypeBasedOn((type.toMaybeFunctionType()).getInstanceType());\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 1042,
      "functionName": "defineSlot",
      "functionAnnotation": "",
      "functionDoc": "Defines a symbol in the current scope.\n\n@param n the defining NAME or GETPROP or object literal key node.\n@param parent the {@code n}\u0027s parent.\n@param variableName The name that this should be known by.\n@param type the variable\u0027s type. It may be {@code null} if\n    {@code inferred} is {@code true}.\n@param inferred Whether the type is inferred or declared.\n",
      "diff": "@@ -1,54 +1,54 @@\n void defineSlot(Node n, Node parent, String variableName, JSType type, boolean inferred) {\n     Preconditions.checkArgument(!variableName.isEmpty());\n     boolean isGlobalVar \u003d n.getType() \u003d\u003d Token.NAME \u0026\u0026 scope.isGlobal();\n     boolean shouldDeclareOnGlobalThis \u003d isGlobalVar \u0026\u0026 (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.FUNCTION);\n     Scope scopeToDeclareIn \u003d scope;\n     if (n.getType() \u003d\u003d Token.GETPROP \u0026\u0026 !scope.isGlobal() \u0026\u0026 isQnameRootedInGlobalScope(n)) {\n         Scope globalScope \u003d scope.getGlobalScope();\n         if (!globalScope.isDeclared(variableName, false)) {\n             scopeToDeclareIn \u003d scope.getGlobalScope();\n         }\n     }\n     if (scopeToDeclareIn.isDeclared(variableName, false)) {\n         Var oldVar \u003d scopeToDeclareIn.getVar(variableName);\n         validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);\n     } else {\n         if (!inferred) {\n             setDeferredType(n, type);\n         }\n         CompilerInput input \u003d compiler.getInput(inputId);\n         boolean isExtern \u003d n.isFromExterns();\n         Var newVar \u003d scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n         if (shouldDeclareOnGlobalThis) {\n             ObjectType globalThis \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS);\n             if (inferred) {\n                 globalThis.defineInferredProperty(variableName, type \u003d\u003d null ? getNativeType(JSTypeNative.NO_TYPE) : type, n);\n             } else {\n                 globalThis.defineDeclaredProperty(variableName, type, n);\n             }\n         }\n         if (type instanceof EnumType) {\n             Node initialValue \u003d newVar.getInitialValue();\n             boolean isValidValue \u003d initialValue !\u003d null \u0026\u0026 (initialValue.getType() \u003d\u003d Token.OBJECTLIT || initialValue.isQualifiedName());\n             if (!isValidValue) {\n                 compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));\n             }\n         }\n-        if (type instanceof FunctionType \u0026\u0026 !type.isEmptyType()) {\n-            FunctionType fnType \u003d (FunctionType) type;\n+        FunctionType fnType \u003d JSType.toMaybeFunctionType(type);\n+        if (fnType !\u003d null \u0026\u0026 !type.isEmptyType()) {\n             if ((fnType.isConstructor() || fnType.isInterface()) \u0026\u0026 !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE))) {\n                 FunctionType superClassCtor \u003d fnType.getSuperClassConstructor();\n                 scopeToDeclareIn.declare(variableName + \".prototype\", n, fnType.getPrototype(), input, superClassCtor \u003d\u003d null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n                 if (newVar.getInitialValue() \u003d\u003d null \u0026\u0026 !isExtern \u0026\u0026 variableName.equals(fnType.getInstanceType().getReferenceName())) {\n                     compiler.report(JSError.make(sourceName, n, fnType.isConstructor() ? CTOR_INITIALIZER : IFACE_INITIALIZER, variableName));\n                 }\n             }\n         }\n     }\n-    if (isGlobalVar \u0026\u0026 \"Window\".equals(variableName) \u0026\u0026 type instanceof FunctionType \u0026\u0026 type.isConstructor()) {\n+    if (isGlobalVar \u0026\u0026 \"Window\".equals(variableName) \u0026\u0026 type !\u003d null \u0026\u0026 type.isFunctionType() \u0026\u0026 type.isConstructor()) {\n         FunctionType globalThisCtor \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();\n         globalThisCtor.getInstanceType().clearCachedValues();\n         globalThisCtor.getPrototype().clearCachedValues();\n-        globalThisCtor.setPrototypeBasedOn(((FunctionType) type).getInstanceType());\n+        globalThisCtor.setPrototypeBasedOn((type.toMaybeFunctionType()).getInstanceType());\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "01d1238a2a577d8988a72c29304a3283ca05a29a": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nbroke some tests\n\n*** Original change description ***\n\nAdd toMaybeFunctionType/toMaybeEnumElementType.\nwow, nullability is annoying!\n\nDELTA\u003d318  (48 added, 79 deleted, 191 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3075\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1364 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/18/11, 10:40 AM",
      "commitName": "01d1238a2a577d8988a72c29304a3283ca05a29a",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "8/18/11, 9:38 AM",
      "commitNameOld": "fc0798047ad3aac58a54ea65f9f1c8857745419f",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "void defineSlot(Node n, Node parent, String variableName, JSType type, boolean inferred) {\n    Preconditions.checkArgument(!variableName.isEmpty());\n    boolean isGlobalVar \u003d n.getType() \u003d\u003d Token.NAME \u0026\u0026 scope.isGlobal();\n    boolean shouldDeclareOnGlobalThis \u003d isGlobalVar \u0026\u0026 (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.FUNCTION);\n    Scope scopeToDeclareIn \u003d scope;\n    if (n.getType() \u003d\u003d Token.GETPROP \u0026\u0026 !scope.isGlobal() \u0026\u0026 isQnameRootedInGlobalScope(n)) {\n        Scope globalScope \u003d scope.getGlobalScope();\n        if (!globalScope.isDeclared(variableName, false)) {\n            scopeToDeclareIn \u003d scope.getGlobalScope();\n        }\n    }\n    if (scopeToDeclareIn.isDeclared(variableName, false)) {\n        Var oldVar \u003d scopeToDeclareIn.getVar(variableName);\n        validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);\n    } else {\n        if (!inferred) {\n            setDeferredType(n, type);\n        }\n        CompilerInput input \u003d compiler.getInput(inputId);\n        boolean isExtern \u003d n.isFromExterns();\n        Var newVar \u003d scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n        if (shouldDeclareOnGlobalThis) {\n            ObjectType globalThis \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS);\n            if (inferred) {\n                globalThis.defineInferredProperty(variableName, type \u003d\u003d null ? getNativeType(JSTypeNative.NO_TYPE) : type, n);\n            } else {\n                globalThis.defineDeclaredProperty(variableName, type, n);\n            }\n        }\n        if (type instanceof EnumType) {\n            Node initialValue \u003d newVar.getInitialValue();\n            boolean isValidValue \u003d initialValue !\u003d null \u0026\u0026 (initialValue.getType() \u003d\u003d Token.OBJECTLIT || initialValue.isQualifiedName());\n            if (!isValidValue) {\n                compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));\n            }\n        }\n        if (type instanceof FunctionType \u0026\u0026 !type.isEmptyType()) {\n            FunctionType fnType \u003d (FunctionType) type;\n            if ((fnType.isConstructor() || fnType.isInterface()) \u0026\u0026 !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE))) {\n                FunctionType superClassCtor \u003d fnType.getSuperClassConstructor();\n                scopeToDeclareIn.declare(variableName + \".prototype\", n, fnType.getPrototype(), input, superClassCtor \u003d\u003d null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n                if (newVar.getInitialValue() \u003d\u003d null \u0026\u0026 !isExtern \u0026\u0026 variableName.equals(fnType.getInstanceType().getReferenceName())) {\n                    compiler.report(JSError.make(sourceName, n, fnType.isConstructor() ? CTOR_INITIALIZER : IFACE_INITIALIZER, variableName));\n                }\n            }\n        }\n    }\n    if (isGlobalVar \u0026\u0026 \"Window\".equals(variableName) \u0026\u0026 type instanceof FunctionType \u0026\u0026 type.isConstructor()) {\n        FunctionType globalThisCtor \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();\n        globalThisCtor.getInstanceType().clearCachedValues();\n        globalThisCtor.getPrototype().clearCachedValues();\n        globalThisCtor.setPrototypeBasedOn(((FunctionType) type).getInstanceType());\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 1041,
      "functionName": "defineSlot",
      "functionAnnotation": "",
      "functionDoc": "Defines a symbol in the current scope.\n\n@param n the defining NAME or GETPROP or object literal key node.\n@param parent the {@code n}\u0027s parent.\n@param variableName The name that this should be known by.\n@param type the variable\u0027s type. It may be {@code null} if\n    {@code inferred} is {@code true}.\n@param inferred Whether the type is inferred or declared.\n",
      "diff": "@@ -1,54 +1,54 @@\n void defineSlot(Node n, Node parent, String variableName, JSType type, boolean inferred) {\n     Preconditions.checkArgument(!variableName.isEmpty());\n     boolean isGlobalVar \u003d n.getType() \u003d\u003d Token.NAME \u0026\u0026 scope.isGlobal();\n     boolean shouldDeclareOnGlobalThis \u003d isGlobalVar \u0026\u0026 (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.FUNCTION);\n     Scope scopeToDeclareIn \u003d scope;\n     if (n.getType() \u003d\u003d Token.GETPROP \u0026\u0026 !scope.isGlobal() \u0026\u0026 isQnameRootedInGlobalScope(n)) {\n         Scope globalScope \u003d scope.getGlobalScope();\n         if (!globalScope.isDeclared(variableName, false)) {\n             scopeToDeclareIn \u003d scope.getGlobalScope();\n         }\n     }\n     if (scopeToDeclareIn.isDeclared(variableName, false)) {\n         Var oldVar \u003d scopeToDeclareIn.getVar(variableName);\n         validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);\n     } else {\n         if (!inferred) {\n             setDeferredType(n, type);\n         }\n         CompilerInput input \u003d compiler.getInput(inputId);\n         boolean isExtern \u003d n.isFromExterns();\n         Var newVar \u003d scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n         if (shouldDeclareOnGlobalThis) {\n             ObjectType globalThis \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS);\n             if (inferred) {\n                 globalThis.defineInferredProperty(variableName, type \u003d\u003d null ? getNativeType(JSTypeNative.NO_TYPE) : type, n);\n             } else {\n                 globalThis.defineDeclaredProperty(variableName, type, n);\n             }\n         }\n         if (type instanceof EnumType) {\n             Node initialValue \u003d newVar.getInitialValue();\n             boolean isValidValue \u003d initialValue !\u003d null \u0026\u0026 (initialValue.getType() \u003d\u003d Token.OBJECTLIT || initialValue.isQualifiedName());\n             if (!isValidValue) {\n                 compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));\n             }\n         }\n-        FunctionType fnType \u003d JSType.toMaybeFunctionType(type);\n-        if (fnType !\u003d null \u0026\u0026 !type.isEmptyType()) {\n+        if (type instanceof FunctionType \u0026\u0026 !type.isEmptyType()) {\n+            FunctionType fnType \u003d (FunctionType) type;\n             if ((fnType.isConstructor() || fnType.isInterface()) \u0026\u0026 !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE))) {\n                 FunctionType superClassCtor \u003d fnType.getSuperClassConstructor();\n                 scopeToDeclareIn.declare(variableName + \".prototype\", n, fnType.getPrototype(), input, superClassCtor \u003d\u003d null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n                 if (newVar.getInitialValue() \u003d\u003d null \u0026\u0026 !isExtern \u0026\u0026 variableName.equals(fnType.getInstanceType().getReferenceName())) {\n                     compiler.report(JSError.make(sourceName, n, fnType.isConstructor() ? CTOR_INITIALIZER : IFACE_INITIALIZER, variableName));\n                 }\n             }\n         }\n     }\n-    if (isGlobalVar \u0026\u0026 \"Window\".equals(variableName) \u0026\u0026 type !\u003d null \u0026\u0026 type.isFunctionType() \u0026\u0026 type.isConstructor()) {\n+    if (isGlobalVar \u0026\u0026 \"Window\".equals(variableName) \u0026\u0026 type instanceof FunctionType \u0026\u0026 type.isConstructor()) {\n         FunctionType globalThisCtor \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();\n         globalThisCtor.getInstanceType().clearCachedValues();\n         globalThisCtor.getPrototype().clearCachedValues();\n-        globalThisCtor.setPrototypeBasedOn((type.toMaybeFunctionType()).getInstanceType());\n+        globalThisCtor.setPrototypeBasedOn(((FunctionType) type).getInstanceType());\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "fc0798047ad3aac58a54ea65f9f1c8857745419f": {
      "type": "Ybodychange",
      "commitMessage": "\nAdd toMaybeFunctionType/toMaybeEnumElementType.\nwow, nullability is annoying!\n\nR\u003djohnlenz\nDELTA\u003d318  (79 added, 48 deleted, 191 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3074\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1363 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/18/11, 9:38 AM",
      "commitName": "fc0798047ad3aac58a54ea65f9f1c8857745419f",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "8/12/11, 9:46 AM",
      "commitNameOld": "7ab44a5f66e5889e71bb56bb91eb29066cf82530",
      "commitAuthorOld": "pdoyle@google.com",
      "daysBetweenCommits": 5.99,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "void defineSlot(Node n, Node parent, String variableName, JSType type, boolean inferred) {\n    Preconditions.checkArgument(!variableName.isEmpty());\n    boolean isGlobalVar \u003d n.getType() \u003d\u003d Token.NAME \u0026\u0026 scope.isGlobal();\n    boolean shouldDeclareOnGlobalThis \u003d isGlobalVar \u0026\u0026 (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.FUNCTION);\n    Scope scopeToDeclareIn \u003d scope;\n    if (n.getType() \u003d\u003d Token.GETPROP \u0026\u0026 !scope.isGlobal() \u0026\u0026 isQnameRootedInGlobalScope(n)) {\n        Scope globalScope \u003d scope.getGlobalScope();\n        if (!globalScope.isDeclared(variableName, false)) {\n            scopeToDeclareIn \u003d scope.getGlobalScope();\n        }\n    }\n    if (scopeToDeclareIn.isDeclared(variableName, false)) {\n        Var oldVar \u003d scopeToDeclareIn.getVar(variableName);\n        validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);\n    } else {\n        if (!inferred) {\n            setDeferredType(n, type);\n        }\n        CompilerInput input \u003d compiler.getInput(inputId);\n        boolean isExtern \u003d n.isFromExterns();\n        Var newVar \u003d scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n        if (shouldDeclareOnGlobalThis) {\n            ObjectType globalThis \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS);\n            if (inferred) {\n                globalThis.defineInferredProperty(variableName, type \u003d\u003d null ? getNativeType(JSTypeNative.NO_TYPE) : type, n);\n            } else {\n                globalThis.defineDeclaredProperty(variableName, type, n);\n            }\n        }\n        if (type instanceof EnumType) {\n            Node initialValue \u003d newVar.getInitialValue();\n            boolean isValidValue \u003d initialValue !\u003d null \u0026\u0026 (initialValue.getType() \u003d\u003d Token.OBJECTLIT || initialValue.isQualifiedName());\n            if (!isValidValue) {\n                compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));\n            }\n        }\n        FunctionType fnType \u003d JSType.toMaybeFunctionType(type);\n        if (fnType !\u003d null \u0026\u0026 !type.isEmptyType()) {\n            if ((fnType.isConstructor() || fnType.isInterface()) \u0026\u0026 !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE))) {\n                FunctionType superClassCtor \u003d fnType.getSuperClassConstructor();\n                scopeToDeclareIn.declare(variableName + \".prototype\", n, fnType.getPrototype(), input, superClassCtor \u003d\u003d null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n                if (newVar.getInitialValue() \u003d\u003d null \u0026\u0026 !isExtern \u0026\u0026 variableName.equals(fnType.getInstanceType().getReferenceName())) {\n                    compiler.report(JSError.make(sourceName, n, fnType.isConstructor() ? CTOR_INITIALIZER : IFACE_INITIALIZER, variableName));\n                }\n            }\n        }\n    }\n    if (isGlobalVar \u0026\u0026 \"Window\".equals(variableName) \u0026\u0026 type !\u003d null \u0026\u0026 type.isFunctionType() \u0026\u0026 type.isConstructor()) {\n        FunctionType globalThisCtor \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();\n        globalThisCtor.getInstanceType().clearCachedValues();\n        globalThisCtor.getPrototype().clearCachedValues();\n        globalThisCtor.setPrototypeBasedOn((type.toMaybeFunctionType()).getInstanceType());\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 1042,
      "functionName": "defineSlot",
      "functionAnnotation": "",
      "functionDoc": "Defines a symbol in the current scope.\n\n@param n the defining NAME or GETPROP or object literal key node.\n@param parent the {@code n}\u0027s parent.\n@param variableName The name that this should be known by.\n@param type the variable\u0027s type. It may be {@code null} if\n    {@code inferred} is {@code true}.\n@param inferred Whether the type is inferred or declared.\n",
      "diff": "@@ -1,54 +1,54 @@\n void defineSlot(Node n, Node parent, String variableName, JSType type, boolean inferred) {\n     Preconditions.checkArgument(!variableName.isEmpty());\n     boolean isGlobalVar \u003d n.getType() \u003d\u003d Token.NAME \u0026\u0026 scope.isGlobal();\n     boolean shouldDeclareOnGlobalThis \u003d isGlobalVar \u0026\u0026 (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.FUNCTION);\n     Scope scopeToDeclareIn \u003d scope;\n     if (n.getType() \u003d\u003d Token.GETPROP \u0026\u0026 !scope.isGlobal() \u0026\u0026 isQnameRootedInGlobalScope(n)) {\n         Scope globalScope \u003d scope.getGlobalScope();\n         if (!globalScope.isDeclared(variableName, false)) {\n             scopeToDeclareIn \u003d scope.getGlobalScope();\n         }\n     }\n     if (scopeToDeclareIn.isDeclared(variableName, false)) {\n         Var oldVar \u003d scopeToDeclareIn.getVar(variableName);\n         validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);\n     } else {\n         if (!inferred) {\n             setDeferredType(n, type);\n         }\n         CompilerInput input \u003d compiler.getInput(inputId);\n         boolean isExtern \u003d n.isFromExterns();\n         Var newVar \u003d scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n         if (shouldDeclareOnGlobalThis) {\n             ObjectType globalThis \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS);\n             if (inferred) {\n                 globalThis.defineInferredProperty(variableName, type \u003d\u003d null ? getNativeType(JSTypeNative.NO_TYPE) : type, n);\n             } else {\n                 globalThis.defineDeclaredProperty(variableName, type, n);\n             }\n         }\n         if (type instanceof EnumType) {\n             Node initialValue \u003d newVar.getInitialValue();\n             boolean isValidValue \u003d initialValue !\u003d null \u0026\u0026 (initialValue.getType() \u003d\u003d Token.OBJECTLIT || initialValue.isQualifiedName());\n             if (!isValidValue) {\n                 compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));\n             }\n         }\n-        if (type instanceof FunctionType \u0026\u0026 !type.isEmptyType()) {\n-            FunctionType fnType \u003d (FunctionType) type;\n+        FunctionType fnType \u003d JSType.toMaybeFunctionType(type);\n+        if (fnType !\u003d null \u0026\u0026 !type.isEmptyType()) {\n             if ((fnType.isConstructor() || fnType.isInterface()) \u0026\u0026 !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE))) {\n                 FunctionType superClassCtor \u003d fnType.getSuperClassConstructor();\n                 scopeToDeclareIn.declare(variableName + \".prototype\", n, fnType.getPrototype(), input, superClassCtor \u003d\u003d null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n                 if (newVar.getInitialValue() \u003d\u003d null \u0026\u0026 !isExtern \u0026\u0026 variableName.equals(fnType.getInstanceType().getReferenceName())) {\n                     compiler.report(JSError.make(sourceName, n, fnType.isConstructor() ? CTOR_INITIALIZER : IFACE_INITIALIZER, variableName));\n                 }\n             }\n         }\n     }\n-    if (isGlobalVar \u0026\u0026 \"Window\".equals(variableName) \u0026\u0026 type instanceof FunctionType \u0026\u0026 type.isConstructor()) {\n+    if (isGlobalVar \u0026\u0026 \"Window\".equals(variableName) \u0026\u0026 type !\u003d null \u0026\u0026 type.isFunctionType() \u0026\u0026 type.isConstructor()) {\n         FunctionType globalThisCtor \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();\n         globalThisCtor.getInstanceType().clearCachedValues();\n         globalThisCtor.getPrototype().clearCachedValues();\n-        globalThisCtor.setPrototypeBasedOn(((FunctionType) type).getInstanceType());\n+        globalThisCtor.setPrototypeBasedOn((type.toMaybeFunctionType()).getInstanceType());\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1b8156d41fe441ab03999f1e2c5ac4537e79fc75": {
      "type": "Ybodychange",
      "commitMessage": "\nPart 4, source name/input id split: Require an InputId to lookup a CompilerInput.\n\nR\u003dnicksantos\nDELTA\u003d266  (106 added, 20 deleted, 140 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2899\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1328 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/4/11, 11:43 AM",
      "commitName": "1b8156d41fe441ab03999f1e2c5ac4537e79fc75",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "8/4/11, 8:56 AM",
      "commitNameOld": "e58030c47800f5842a950cf7ceb40bba5bd1dd23",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.12,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "void defineSlot(Node n, Node parent, String variableName, JSType type, boolean inferred) {\n    Preconditions.checkArgument(!variableName.isEmpty());\n    boolean isGlobalVar \u003d n.getType() \u003d\u003d Token.NAME \u0026\u0026 scope.isGlobal();\n    boolean shouldDeclareOnGlobalThis \u003d isGlobalVar \u0026\u0026 (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.FUNCTION);\n    Scope scopeToDeclareIn \u003d scope;\n    if (n.getType() \u003d\u003d Token.GETPROP \u0026\u0026 !scope.isGlobal() \u0026\u0026 isQnameRootedInGlobalScope(n)) {\n        Scope globalScope \u003d scope.getGlobalScope();\n        if (!globalScope.isDeclared(variableName, false)) {\n            scopeToDeclareIn \u003d scope.getGlobalScope();\n        }\n    }\n    if (scopeToDeclareIn.isDeclared(variableName, false)) {\n        Var oldVar \u003d scopeToDeclareIn.getVar(variableName);\n        validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);\n    } else {\n        if (!inferred) {\n            setDeferredType(n, type);\n        }\n        CompilerInput input \u003d compiler.getInput(inputId);\n        boolean isExtern \u003d n.isFromExterns();\n        Var newVar \u003d scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n        if (shouldDeclareOnGlobalThis) {\n            ObjectType globalThis \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS);\n            if (inferred) {\n                globalThis.defineInferredProperty(variableName, type \u003d\u003d null ? getNativeType(JSTypeNative.NO_TYPE) : type, n);\n            } else {\n                globalThis.defineDeclaredProperty(variableName, type, n);\n            }\n        }\n        if (type instanceof EnumType) {\n            Node initialValue \u003d newVar.getInitialValue();\n            boolean isValidValue \u003d initialValue !\u003d null \u0026\u0026 (initialValue.getType() \u003d\u003d Token.OBJECTLIT || initialValue.isQualifiedName());\n            if (!isValidValue) {\n                compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));\n            }\n        }\n        if (type instanceof FunctionType \u0026\u0026 !type.isEmptyType()) {\n            FunctionType fnType \u003d (FunctionType) type;\n            if ((fnType.isConstructor() || fnType.isInterface()) \u0026\u0026 !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE))) {\n                FunctionType superClassCtor \u003d fnType.getSuperClassConstructor();\n                scopeToDeclareIn.declare(variableName + \".prototype\", n, fnType.getPrototype(), input, superClassCtor \u003d\u003d null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n                if (newVar.getInitialValue() \u003d\u003d null \u0026\u0026 !isExtern \u0026\u0026 variableName.equals(fnType.getInstanceType().getReferenceName())) {\n                    compiler.report(JSError.make(sourceName, n, fnType.isConstructor() ? CTOR_INITIALIZER : IFACE_INITIALIZER, variableName));\n                }\n            }\n        }\n    }\n    if (isGlobalVar \u0026\u0026 \"Window\".equals(variableName) \u0026\u0026 type instanceof FunctionType \u0026\u0026 type.isConstructor()) {\n        FunctionType globalThisCtor \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();\n        globalThisCtor.getInstanceType().clearCachedValues();\n        globalThisCtor.getPrototype().clearCachedValues();\n        globalThisCtor.setPrototypeBasedOn(((FunctionType) type).getInstanceType());\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 1035,
      "functionName": "defineSlot",
      "functionAnnotation": "",
      "functionDoc": "Defines a symbol in the current scope.\n\n@param n the defining NAME or GETPROP or object literal key node.\n@param parent the {@code n}\u0027s parent.\n@param variableName The name that this should be known by.\n@param type the variable\u0027s type. It may be {@code null} if\n    {@code inferred} is {@code true}.\n@param inferred Whether the type is inferred or declared.\n",
      "diff": "@@ -1,54 +1,54 @@\n void defineSlot(Node n, Node parent, String variableName, JSType type, boolean inferred) {\n     Preconditions.checkArgument(!variableName.isEmpty());\n     boolean isGlobalVar \u003d n.getType() \u003d\u003d Token.NAME \u0026\u0026 scope.isGlobal();\n     boolean shouldDeclareOnGlobalThis \u003d isGlobalVar \u0026\u0026 (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.FUNCTION);\n     Scope scopeToDeclareIn \u003d scope;\n     if (n.getType() \u003d\u003d Token.GETPROP \u0026\u0026 !scope.isGlobal() \u0026\u0026 isQnameRootedInGlobalScope(n)) {\n         Scope globalScope \u003d scope.getGlobalScope();\n         if (!globalScope.isDeclared(variableName, false)) {\n             scopeToDeclareIn \u003d scope.getGlobalScope();\n         }\n     }\n     if (scopeToDeclareIn.isDeclared(variableName, false)) {\n         Var oldVar \u003d scopeToDeclareIn.getVar(variableName);\n         validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);\n     } else {\n         if (!inferred) {\n             setDeferredType(n, type);\n         }\n-        CompilerInput input \u003d compiler.getInput(sourceName);\n-        boolean isExtern \u003d input.isExtern();\n+        CompilerInput input \u003d compiler.getInput(inputId);\n+        boolean isExtern \u003d n.isFromExterns();\n         Var newVar \u003d scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n         if (shouldDeclareOnGlobalThis) {\n             ObjectType globalThis \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS);\n             if (inferred) {\n                 globalThis.defineInferredProperty(variableName, type \u003d\u003d null ? getNativeType(JSTypeNative.NO_TYPE) : type, n);\n             } else {\n                 globalThis.defineDeclaredProperty(variableName, type, n);\n             }\n         }\n         if (type instanceof EnumType) {\n             Node initialValue \u003d newVar.getInitialValue();\n             boolean isValidValue \u003d initialValue !\u003d null \u0026\u0026 (initialValue.getType() \u003d\u003d Token.OBJECTLIT || initialValue.isQualifiedName());\n             if (!isValidValue) {\n                 compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));\n             }\n         }\n         if (type instanceof FunctionType \u0026\u0026 !type.isEmptyType()) {\n             FunctionType fnType \u003d (FunctionType) type;\n             if ((fnType.isConstructor() || fnType.isInterface()) \u0026\u0026 !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE))) {\n                 FunctionType superClassCtor \u003d fnType.getSuperClassConstructor();\n                 scopeToDeclareIn.declare(variableName + \".prototype\", n, fnType.getPrototype(), input, superClassCtor \u003d\u003d null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n                 if (newVar.getInitialValue() \u003d\u003d null \u0026\u0026 !isExtern \u0026\u0026 variableName.equals(fnType.getInstanceType().getReferenceName())) {\n                     compiler.report(JSError.make(sourceName, n, fnType.isConstructor() ? CTOR_INITIALIZER : IFACE_INITIALIZER, variableName));\n                 }\n             }\n         }\n     }\n     if (isGlobalVar \u0026\u0026 \"Window\".equals(variableName) \u0026\u0026 type instanceof FunctionType \u0026\u0026 type.isConstructor()) {\n         FunctionType globalThisCtor \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();\n         globalThisCtor.getInstanceType().clearCachedValues();\n         globalThisCtor.getPrototype().clearCachedValues();\n         globalThisCtor.setPrototypeBasedOn(((FunctionType) type).getInstanceType());\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "03ce555bcedcf98d99de1b4f8a6238ba75ee6850": {
      "type": "Ybodychange",
      "commitMessage": "\nSimplify the type system a bit by pulling extern info off the nodes\n\nR\u003djohnlenz\nDELTA\u003d171  (4 added, 42 deleted, 125 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2500\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1242 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/1/11, 2:00 PM",
      "commitName": "03ce555bcedcf98d99de1b4f8a6238ba75ee6850",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "6/2/11, 9:10 AM",
      "commitNameOld": "e2da3b80158f6df8377e95ba54da85eb286e63d4",
      "commitAuthorOld": "bashir@google.com",
      "daysBetweenCommits": 29.2,
      "commitsBetweenForRepo": 84,
      "commitsBetweenForFile": 1,
      "actualSource": "void defineSlot(Node n, Node parent, String variableName, JSType type, boolean inferred) {\n    Preconditions.checkArgument(!variableName.isEmpty());\n    boolean isGlobalVar \u003d n.getType() \u003d\u003d Token.NAME \u0026\u0026 scope.isGlobal();\n    boolean shouldDeclareOnGlobalThis \u003d isGlobalVar \u0026\u0026 (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.FUNCTION);\n    Scope scopeToDeclareIn \u003d scope;\n    if (n.getType() \u003d\u003d Token.GETPROP \u0026\u0026 !scope.isGlobal() \u0026\u0026 isQnameRootedInGlobalScope(n)) {\n        Scope globalScope \u003d scope.getGlobalScope();\n        if (!globalScope.isDeclared(variableName, false)) {\n            scopeToDeclareIn \u003d scope.getGlobalScope();\n        }\n    }\n    if (scopeToDeclareIn.isDeclared(variableName, false)) {\n        Var oldVar \u003d scopeToDeclareIn.getVar(variableName);\n        validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);\n    } else {\n        if (!inferred) {\n            setDeferredType(n, type);\n        }\n        CompilerInput input \u003d compiler.getInput(sourceName);\n        boolean isExtern \u003d input.isExtern();\n        Var newVar \u003d scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n        if (shouldDeclareOnGlobalThis) {\n            ObjectType globalThis \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS);\n            if (inferred) {\n                globalThis.defineInferredProperty(variableName, type \u003d\u003d null ? getNativeType(JSTypeNative.NO_TYPE) : type, n);\n            } else {\n                globalThis.defineDeclaredProperty(variableName, type, n);\n            }\n        }\n        if (type instanceof EnumType) {\n            Node initialValue \u003d newVar.getInitialValue();\n            boolean isValidValue \u003d initialValue !\u003d null \u0026\u0026 (initialValue.getType() \u003d\u003d Token.OBJECTLIT || initialValue.isQualifiedName());\n            if (!isValidValue) {\n                compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));\n            }\n        }\n        if (type instanceof FunctionType \u0026\u0026 !type.isEmptyType()) {\n            FunctionType fnType \u003d (FunctionType) type;\n            if ((fnType.isConstructor() || fnType.isInterface()) \u0026\u0026 !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE))) {\n                FunctionType superClassCtor \u003d fnType.getSuperClassConstructor();\n                scopeToDeclareIn.declare(variableName + \".prototype\", n, fnType.getPrototype(), input, superClassCtor \u003d\u003d null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n                if (newVar.getInitialValue() \u003d\u003d null \u0026\u0026 !isExtern \u0026\u0026 variableName.equals(fnType.getInstanceType().getReferenceName())) {\n                    compiler.report(JSError.make(sourceName, n, fnType.isConstructor() ? CTOR_INITIALIZER : IFACE_INITIALIZER, variableName));\n                }\n            }\n        }\n    }\n    if (isGlobalVar \u0026\u0026 \"Window\".equals(variableName) \u0026\u0026 type instanceof FunctionType \u0026\u0026 type.isConstructor()) {\n        FunctionType globalThisCtor \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();\n        globalThisCtor.getInstanceType().clearCachedValues();\n        globalThisCtor.getPrototype().clearCachedValues();\n        globalThisCtor.setPrototypeBasedOn(((FunctionType) type).getInstanceType());\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 1047,
      "functionName": "defineSlot",
      "functionAnnotation": "",
      "functionDoc": "Defines a symbol in the current scope.\n\n@param n the defining NAME or GETPROP or object literal key node.\n@param parent the {@code n}\u0027s parent.\n@param variableName The name that this should be known by.\n@param type the variable\u0027s type. It may be {@code null} if\n    {@code inferred} is {@code true}.\n@param inferred Whether the type is inferred or declared.\n",
      "diff": "@@ -1,54 +1,54 @@\n void defineSlot(Node n, Node parent, String variableName, JSType type, boolean inferred) {\n     Preconditions.checkArgument(!variableName.isEmpty());\n     boolean isGlobalVar \u003d n.getType() \u003d\u003d Token.NAME \u0026\u0026 scope.isGlobal();\n     boolean shouldDeclareOnGlobalThis \u003d isGlobalVar \u0026\u0026 (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.FUNCTION);\n     Scope scopeToDeclareIn \u003d scope;\n     if (n.getType() \u003d\u003d Token.GETPROP \u0026\u0026 !scope.isGlobal() \u0026\u0026 isQnameRootedInGlobalScope(n)) {\n         Scope globalScope \u003d scope.getGlobalScope();\n         if (!globalScope.isDeclared(variableName, false)) {\n             scopeToDeclareIn \u003d scope.getGlobalScope();\n         }\n     }\n     if (scopeToDeclareIn.isDeclared(variableName, false)) {\n         Var oldVar \u003d scopeToDeclareIn.getVar(variableName);\n         validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);\n     } else {\n         if (!inferred) {\n             setDeferredType(n, type);\n         }\n         CompilerInput input \u003d compiler.getInput(sourceName);\n         boolean isExtern \u003d input.isExtern();\n         Var newVar \u003d scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n         if (shouldDeclareOnGlobalThis) {\n             ObjectType globalThis \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS);\n             if (inferred) {\n-                globalThis.defineInferredProperty(variableName, type \u003d\u003d null ? getNativeType(JSTypeNative.NO_TYPE) : type, isExtern, n);\n+                globalThis.defineInferredProperty(variableName, type \u003d\u003d null ? getNativeType(JSTypeNative.NO_TYPE) : type, n);\n             } else {\n-                globalThis.defineDeclaredProperty(variableName, type, isExtern, n);\n+                globalThis.defineDeclaredProperty(variableName, type, n);\n             }\n         }\n         if (type instanceof EnumType) {\n             Node initialValue \u003d newVar.getInitialValue();\n             boolean isValidValue \u003d initialValue !\u003d null \u0026\u0026 (initialValue.getType() \u003d\u003d Token.OBJECTLIT || initialValue.isQualifiedName());\n             if (!isValidValue) {\n                 compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));\n             }\n         }\n         if (type instanceof FunctionType \u0026\u0026 !type.isEmptyType()) {\n             FunctionType fnType \u003d (FunctionType) type;\n             if ((fnType.isConstructor() || fnType.isInterface()) \u0026\u0026 !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE))) {\n                 FunctionType superClassCtor \u003d fnType.getSuperClassConstructor();\n                 scopeToDeclareIn.declare(variableName + \".prototype\", n, fnType.getPrototype(), input, superClassCtor \u003d\u003d null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n                 if (newVar.getInitialValue() \u003d\u003d null \u0026\u0026 !isExtern \u0026\u0026 variableName.equals(fnType.getInstanceType().getReferenceName())) {\n                     compiler.report(JSError.make(sourceName, n, fnType.isConstructor() ? CTOR_INITIALIZER : IFACE_INITIALIZER, variableName));\n                 }\n             }\n         }\n     }\n     if (isGlobalVar \u0026\u0026 \"Window\".equals(variableName) \u0026\u0026 type instanceof FunctionType \u0026\u0026 type.isConstructor()) {\n         FunctionType globalThisCtor \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();\n         globalThisCtor.getInstanceType().clearCachedValues();\n         globalThisCtor.getPrototype().clearCachedValues();\n         globalThisCtor.setPrototypeBasedOn(((FunctionType) type).getInstanceType());\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "71a9ef6258d01b0e05820209be0035fab11a8d3a": {
      "type": "Ybodychange",
      "commitMessage": "\nIf Window is declared but not marked as a constructor, don\u0027t crash\n\nR\u003djohnlenz\nDELTA\u003d12  (11 added, 0 deleted, 1 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d851\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@883 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/14/11, 8:49 AM",
      "commitName": "71a9ef6258d01b0e05820209be0035fab11a8d3a",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "3/9/11, 11:46 AM",
      "commitNameOld": "04f380716cd2403ae87e2b0880a56369aa0c6c33",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 4.84,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "actualSource": "void defineSlot(Node n, Node parent, String variableName, JSType type, boolean inferred) {\n    Preconditions.checkArgument(!variableName.isEmpty());\n    boolean isGlobalVar \u003d n.getType() \u003d\u003d Token.NAME \u0026\u0026 scope.isGlobal();\n    boolean shouldDeclareOnGlobalThis \u003d isGlobalVar \u0026\u0026 (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.FUNCTION);\n    Scope scopeToDeclareIn \u003d scope;\n    if (n.getType() \u003d\u003d Token.GETPROP \u0026\u0026 !scope.isGlobal() \u0026\u0026 isQnameRootedInGlobalScope(n)) {\n        Scope globalScope \u003d scope.getGlobalScope();\n        if (!globalScope.isDeclared(variableName, false)) {\n            scopeToDeclareIn \u003d scope.getGlobalScope();\n        }\n    }\n    if (scopeToDeclareIn.isDeclared(variableName, false)) {\n        Var oldVar \u003d scopeToDeclareIn.getVar(variableName);\n        validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);\n    } else {\n        if (!inferred) {\n            setDeferredType(n, type);\n        }\n        CompilerInput input \u003d compiler.getInput(sourceName);\n        boolean isExtern \u003d input.isExtern();\n        Var newVar \u003d scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n        if (shouldDeclareOnGlobalThis) {\n            ObjectType globalThis \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS);\n            if (inferred) {\n                globalThis.defineInferredProperty(variableName, type \u003d\u003d null ? getNativeType(JSTypeNative.NO_TYPE) : type, isExtern, n);\n            } else {\n                globalThis.defineDeclaredProperty(variableName, type, isExtern, n);\n            }\n        }\n        if (type instanceof EnumType) {\n            Node initialValue \u003d newVar.getInitialValue();\n            boolean isValidValue \u003d initialValue !\u003d null \u0026\u0026 (initialValue.getType() \u003d\u003d Token.OBJECTLIT || initialValue.isQualifiedName());\n            if (!isValidValue) {\n                compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));\n            }\n        }\n        if (type instanceof FunctionType \u0026\u0026 !type.isEmptyType()) {\n            FunctionType fnType \u003d (FunctionType) type;\n            if ((fnType.isConstructor() || fnType.isInterface()) \u0026\u0026 !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE))) {\n                FunctionType superClassCtor \u003d fnType.getSuperClassConstructor();\n                scopeToDeclareIn.declare(variableName + \".prototype\", n, fnType.getPrototype(), input, superClassCtor \u003d\u003d null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n                if (newVar.getInitialValue() \u003d\u003d null \u0026\u0026 !isExtern \u0026\u0026 variableName.equals(fnType.getInstanceType().getReferenceName())) {\n                    compiler.report(JSError.make(sourceName, n, fnType.isConstructor() ? CTOR_INITIALIZER : IFACE_INITIALIZER, variableName));\n                }\n            }\n        }\n    }\n    if (isGlobalVar \u0026\u0026 \"Window\".equals(variableName) \u0026\u0026 type instanceof FunctionType \u0026\u0026 type.isConstructor()) {\n        FunctionType globalThisCtor \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();\n        globalThisCtor.getInstanceType().clearCachedValues();\n        globalThisCtor.getPrototype().clearCachedValues();\n        globalThisCtor.setPrototypeBasedOn(((FunctionType) type).getInstanceType());\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 1023,
      "functionName": "defineSlot",
      "functionAnnotation": "",
      "functionDoc": "Defines a symbol in the current scope.\n\n@param n the defining NAME or GETPROP or object literal key node.\n@param parent the {@code n}\u0027s parent.\n@param variableName The name that this should be known by.\n@param type the variable\u0027s type. It may be {@code null} if\n    {@code inferred} is {@code true}.\n@param inferred Whether the type is inferred or declared.\n",
      "diff": "@@ -1,54 +1,54 @@\n void defineSlot(Node n, Node parent, String variableName, JSType type, boolean inferred) {\n     Preconditions.checkArgument(!variableName.isEmpty());\n     boolean isGlobalVar \u003d n.getType() \u003d\u003d Token.NAME \u0026\u0026 scope.isGlobal();\n     boolean shouldDeclareOnGlobalThis \u003d isGlobalVar \u0026\u0026 (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.FUNCTION);\n     Scope scopeToDeclareIn \u003d scope;\n     if (n.getType() \u003d\u003d Token.GETPROP \u0026\u0026 !scope.isGlobal() \u0026\u0026 isQnameRootedInGlobalScope(n)) {\n         Scope globalScope \u003d scope.getGlobalScope();\n         if (!globalScope.isDeclared(variableName, false)) {\n             scopeToDeclareIn \u003d scope.getGlobalScope();\n         }\n     }\n     if (scopeToDeclareIn.isDeclared(variableName, false)) {\n         Var oldVar \u003d scopeToDeclareIn.getVar(variableName);\n         validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);\n     } else {\n         if (!inferred) {\n             setDeferredType(n, type);\n         }\n         CompilerInput input \u003d compiler.getInput(sourceName);\n         boolean isExtern \u003d input.isExtern();\n         Var newVar \u003d scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n         if (shouldDeclareOnGlobalThis) {\n             ObjectType globalThis \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS);\n             if (inferred) {\n                 globalThis.defineInferredProperty(variableName, type \u003d\u003d null ? getNativeType(JSTypeNative.NO_TYPE) : type, isExtern, n);\n             } else {\n                 globalThis.defineDeclaredProperty(variableName, type, isExtern, n);\n             }\n         }\n         if (type instanceof EnumType) {\n             Node initialValue \u003d newVar.getInitialValue();\n             boolean isValidValue \u003d initialValue !\u003d null \u0026\u0026 (initialValue.getType() \u003d\u003d Token.OBJECTLIT || initialValue.isQualifiedName());\n             if (!isValidValue) {\n                 compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));\n             }\n         }\n         if (type instanceof FunctionType \u0026\u0026 !type.isEmptyType()) {\n             FunctionType fnType \u003d (FunctionType) type;\n             if ((fnType.isConstructor() || fnType.isInterface()) \u0026\u0026 !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE))) {\n                 FunctionType superClassCtor \u003d fnType.getSuperClassConstructor();\n                 scopeToDeclareIn.declare(variableName + \".prototype\", n, fnType.getPrototype(), input, superClassCtor \u003d\u003d null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n                 if (newVar.getInitialValue() \u003d\u003d null \u0026\u0026 !isExtern \u0026\u0026 variableName.equals(fnType.getInstanceType().getReferenceName())) {\n                     compiler.report(JSError.make(sourceName, n, fnType.isConstructor() ? CTOR_INITIALIZER : IFACE_INITIALIZER, variableName));\n                 }\n             }\n         }\n     }\n-    if (isGlobalVar \u0026\u0026 \"Window\".equals(variableName) \u0026\u0026 type instanceof FunctionType) {\n+    if (isGlobalVar \u0026\u0026 \"Window\".equals(variableName) \u0026\u0026 type instanceof FunctionType \u0026\u0026 type.isConstructor()) {\n         FunctionType globalThisCtor \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();\n         globalThisCtor.getInstanceType().clearCachedValues();\n         globalThisCtor.getPrototype().clearCachedValues();\n         globalThisCtor.setPrototypeBasedOn(((FunctionType) type).getInstanceType());\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f80152eb5a2de72e8336b26e0e78b9e6baae37d2": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "\nMake the global-this a true subtype of window.\nDeclare \u0027goog\u0027 at scope-declaration time.\n\n\nR\u003djohnlenz\nDELTA\u003d166  (126 added, 11 deleted, 29 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d784\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@861 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/7/11, 5:08 PM",
      "commitName": "f80152eb5a2de72e8336b26e0e78b9e6baae37d2",
      "commitAuthor": "nicksantos@google.com",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "\nMake the global-this a true subtype of window.\nDeclare \u0027goog\u0027 at scope-declaration time.\n\n\nR\u003djohnlenz\nDELTA\u003d166  (126 added, 11 deleted, 29 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d784\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@861 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "3/7/11, 5:08 PM",
          "commitName": "f80152eb5a2de72e8336b26e0e78b9e6baae37d2",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "3/1/11, 7:50 AM",
          "commitNameOld": "a2153e7405e09c8fa413a01874c949b8b2bcd32b",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 6.39,
          "commitsBetweenForRepo": 28,
          "commitsBetweenForFile": 1,
          "actualSource": "void defineSlot(Node n, Node parent, String variableName, JSType type, boolean inferred) {\n    Preconditions.checkArgument(!variableName.isEmpty());\n    boolean isGlobalVar \u003d n.getType() \u003d\u003d Token.NAME \u0026\u0026 scope.isGlobal();\n    boolean shouldDeclareOnGlobalThis \u003d isGlobalVar \u0026\u0026 (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.FUNCTION);\n    Scope scopeToDeclareIn \u003d scope;\n    if (n.getType() \u003d\u003d Token.GETPROP \u0026\u0026 !scope.isGlobal() \u0026\u0026 isQnameRootedInGlobalScope(n)) {\n        Scope globalScope \u003d scope.getGlobalScope();\n        if (!globalScope.isDeclared(variableName, false)) {\n            scopeToDeclareIn \u003d scope.getGlobalScope();\n        }\n    }\n    if (scopeToDeclareIn.isDeclared(variableName, false)) {\n        Var oldVar \u003d scopeToDeclareIn.getVar(variableName);\n        validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);\n    } else {\n        if (!inferred) {\n            setDeferredType(n, type);\n        }\n        CompilerInput input \u003d compiler.getInput(sourceName);\n        boolean isExtern \u003d input.isExtern();\n        Var newVar \u003d scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n        if (shouldDeclareOnGlobalThis) {\n            ObjectType globalThis \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS);\n            if (inferred) {\n                globalThis.defineInferredProperty(variableName, type \u003d\u003d null ? getNativeType(JSTypeNative.NO_TYPE) : type, isExtern, n);\n            } else {\n                globalThis.defineDeclaredProperty(variableName, type, isExtern, n);\n            }\n        }\n        if (type instanceof EnumType) {\n            Node initialValue \u003d newVar.getInitialValue();\n            boolean isValidValue \u003d initialValue !\u003d null \u0026\u0026 (initialValue.getType() \u003d\u003d Token.OBJECTLIT || initialValue.isQualifiedName());\n            if (!isValidValue) {\n                compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));\n            }\n        }\n        if (type instanceof FunctionType \u0026\u0026 !type.isEmptyType()) {\n            FunctionType fnType \u003d (FunctionType) type;\n            if ((fnType.isConstructor() || fnType.isInterface()) \u0026\u0026 !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE))) {\n                FunctionType superClassCtor \u003d fnType.getSuperClassConstructor();\n                scopeToDeclareIn.declare(variableName + \".prototype\", n, fnType.getPrototype(), input, superClassCtor \u003d\u003d null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n                if (newVar.getInitialValue() \u003d\u003d null \u0026\u0026 !isExtern \u0026\u0026 variableName.equals(fnType.getInstanceType().getReferenceName())) {\n                    compiler.report(JSError.make(sourceName, n, fnType.isConstructor() ? CTOR_INITIALIZER : IFACE_INITIALIZER, variableName));\n                }\n            }\n        }\n    }\n    if (isGlobalVar \u0026\u0026 \"Window\".equals(variableName) \u0026\u0026 type instanceof FunctionType) {\n        FunctionType globalThisCtor \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();\n        globalThisCtor.getInstanceType().clearCachedValues();\n        globalThisCtor.getPrototype().clearCachedValues();\n        globalThisCtor.setPrototypeBasedOn(((FunctionType) type).getInstanceType());\n    }\n}",
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
          "functionStartLine": 1004,
          "functionName": "defineSlot",
          "functionAnnotation": "",
          "functionDoc": "Defines a symbol in the current scope.\n\n@param n the defining NAME or GETPROP or object literal key node.\n@param parent the {@code n}\u0027s parent.\n@param variableName The name that this should be known by.\n@param type the variable\u0027s type. It may be {@code null} if\n    {@code inferred} is {@code true}.\n@param inferred Whether the type is inferred or declared.\n",
          "diff": "@@ -1,47 +1,54 @@\n void defineSlot(Node n, Node parent, String variableName, JSType type, boolean inferred) {\n     Preconditions.checkArgument(!variableName.isEmpty());\n-    boolean shouldDeclareOnGlobalThis \u003d n.getType() \u003d\u003d Token.NAME \u0026\u0026 scope.isGlobal() \u0026\u0026 (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.FUNCTION);\n+    boolean isGlobalVar \u003d n.getType() \u003d\u003d Token.NAME \u0026\u0026 scope.isGlobal();\n+    boolean shouldDeclareOnGlobalThis \u003d isGlobalVar \u0026\u0026 (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.FUNCTION);\n     Scope scopeToDeclareIn \u003d scope;\n     if (n.getType() \u003d\u003d Token.GETPROP \u0026\u0026 !scope.isGlobal() \u0026\u0026 isQnameRootedInGlobalScope(n)) {\n         Scope globalScope \u003d scope.getGlobalScope();\n         if (!globalScope.isDeclared(variableName, false)) {\n             scopeToDeclareIn \u003d scope.getGlobalScope();\n         }\n     }\n     if (scopeToDeclareIn.isDeclared(variableName, false)) {\n         Var oldVar \u003d scopeToDeclareIn.getVar(variableName);\n         validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);\n     } else {\n         if (!inferred) {\n             setDeferredType(n, type);\n         }\n         CompilerInput input \u003d compiler.getInput(sourceName);\n         boolean isExtern \u003d input.isExtern();\n         Var newVar \u003d scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n         if (shouldDeclareOnGlobalThis) {\n-            ObjectType globalThis \u003d typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n+            ObjectType globalThis \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS);\n             if (inferred) {\n                 globalThis.defineInferredProperty(variableName, type \u003d\u003d null ? getNativeType(JSTypeNative.NO_TYPE) : type, isExtern, n);\n             } else {\n                 globalThis.defineDeclaredProperty(variableName, type, isExtern, n);\n             }\n         }\n         if (type instanceof EnumType) {\n             Node initialValue \u003d newVar.getInitialValue();\n             boolean isValidValue \u003d initialValue !\u003d null \u0026\u0026 (initialValue.getType() \u003d\u003d Token.OBJECTLIT || initialValue.isQualifiedName());\n             if (!isValidValue) {\n                 compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));\n             }\n         }\n         if (type instanceof FunctionType \u0026\u0026 !type.isEmptyType()) {\n             FunctionType fnType \u003d (FunctionType) type;\n             if ((fnType.isConstructor() || fnType.isInterface()) \u0026\u0026 !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE))) {\n                 FunctionType superClassCtor \u003d fnType.getSuperClassConstructor();\n                 scopeToDeclareIn.declare(variableName + \".prototype\", n, fnType.getPrototype(), input, superClassCtor \u003d\u003d null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n                 if (newVar.getInitialValue() \u003d\u003d null \u0026\u0026 !isExtern \u0026\u0026 variableName.equals(fnType.getInstanceType().getReferenceName())) {\n                     compiler.report(JSError.make(sourceName, n, fnType.isConstructor() ? CTOR_INITIALIZER : IFACE_INITIALIZER, variableName));\n                 }\n             }\n         }\n     }\n+    if (isGlobalVar \u0026\u0026 \"Window\".equals(variableName) \u0026\u0026 type instanceof FunctionType) {\n+        FunctionType globalThisCtor \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();\n+        globalThisCtor.getInstanceType().clearCachedValues();\n+        globalThisCtor.getPrototype().clearCachedValues();\n+        globalThisCtor.setPrototypeBasedOn(((FunctionType) type).getInstanceType());\n+    }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "\nMake the global-this a true subtype of window.\nDeclare \u0027goog\u0027 at scope-declaration time.\n\n\nR\u003djohnlenz\nDELTA\u003d166  (126 added, 11 deleted, 29 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d784\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@861 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "3/7/11, 5:08 PM",
          "commitName": "f80152eb5a2de72e8336b26e0e78b9e6baae37d2",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "3/1/11, 7:50 AM",
          "commitNameOld": "a2153e7405e09c8fa413a01874c949b8b2bcd32b",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 6.39,
          "commitsBetweenForRepo": 28,
          "commitsBetweenForFile": 1,
          "actualSource": "void defineSlot(Node n, Node parent, String variableName, JSType type, boolean inferred) {\n    Preconditions.checkArgument(!variableName.isEmpty());\n    boolean isGlobalVar \u003d n.getType() \u003d\u003d Token.NAME \u0026\u0026 scope.isGlobal();\n    boolean shouldDeclareOnGlobalThis \u003d isGlobalVar \u0026\u0026 (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.FUNCTION);\n    Scope scopeToDeclareIn \u003d scope;\n    if (n.getType() \u003d\u003d Token.GETPROP \u0026\u0026 !scope.isGlobal() \u0026\u0026 isQnameRootedInGlobalScope(n)) {\n        Scope globalScope \u003d scope.getGlobalScope();\n        if (!globalScope.isDeclared(variableName, false)) {\n            scopeToDeclareIn \u003d scope.getGlobalScope();\n        }\n    }\n    if (scopeToDeclareIn.isDeclared(variableName, false)) {\n        Var oldVar \u003d scopeToDeclareIn.getVar(variableName);\n        validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);\n    } else {\n        if (!inferred) {\n            setDeferredType(n, type);\n        }\n        CompilerInput input \u003d compiler.getInput(sourceName);\n        boolean isExtern \u003d input.isExtern();\n        Var newVar \u003d scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n        if (shouldDeclareOnGlobalThis) {\n            ObjectType globalThis \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS);\n            if (inferred) {\n                globalThis.defineInferredProperty(variableName, type \u003d\u003d null ? getNativeType(JSTypeNative.NO_TYPE) : type, isExtern, n);\n            } else {\n                globalThis.defineDeclaredProperty(variableName, type, isExtern, n);\n            }\n        }\n        if (type instanceof EnumType) {\n            Node initialValue \u003d newVar.getInitialValue();\n            boolean isValidValue \u003d initialValue !\u003d null \u0026\u0026 (initialValue.getType() \u003d\u003d Token.OBJECTLIT || initialValue.isQualifiedName());\n            if (!isValidValue) {\n                compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));\n            }\n        }\n        if (type instanceof FunctionType \u0026\u0026 !type.isEmptyType()) {\n            FunctionType fnType \u003d (FunctionType) type;\n            if ((fnType.isConstructor() || fnType.isInterface()) \u0026\u0026 !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE))) {\n                FunctionType superClassCtor \u003d fnType.getSuperClassConstructor();\n                scopeToDeclareIn.declare(variableName + \".prototype\", n, fnType.getPrototype(), input, superClassCtor \u003d\u003d null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n                if (newVar.getInitialValue() \u003d\u003d null \u0026\u0026 !isExtern \u0026\u0026 variableName.equals(fnType.getInstanceType().getReferenceName())) {\n                    compiler.report(JSError.make(sourceName, n, fnType.isConstructor() ? CTOR_INITIALIZER : IFACE_INITIALIZER, variableName));\n                }\n            }\n        }\n    }\n    if (isGlobalVar \u0026\u0026 \"Window\".equals(variableName) \u0026\u0026 type instanceof FunctionType) {\n        FunctionType globalThisCtor \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();\n        globalThisCtor.getInstanceType().clearCachedValues();\n        globalThisCtor.getPrototype().clearCachedValues();\n        globalThisCtor.setPrototypeBasedOn(((FunctionType) type).getInstanceType());\n    }\n}",
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
          "functionStartLine": 1004,
          "functionName": "defineSlot",
          "functionAnnotation": "",
          "functionDoc": "Defines a symbol in the current scope.\n\n@param n the defining NAME or GETPROP or object literal key node.\n@param parent the {@code n}\u0027s parent.\n@param variableName The name that this should be known by.\n@param type the variable\u0027s type. It may be {@code null} if\n    {@code inferred} is {@code true}.\n@param inferred Whether the type is inferred or declared.\n",
          "diff": "@@ -1,47 +1,54 @@\n void defineSlot(Node n, Node parent, String variableName, JSType type, boolean inferred) {\n     Preconditions.checkArgument(!variableName.isEmpty());\n-    boolean shouldDeclareOnGlobalThis \u003d n.getType() \u003d\u003d Token.NAME \u0026\u0026 scope.isGlobal() \u0026\u0026 (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.FUNCTION);\n+    boolean isGlobalVar \u003d n.getType() \u003d\u003d Token.NAME \u0026\u0026 scope.isGlobal();\n+    boolean shouldDeclareOnGlobalThis \u003d isGlobalVar \u0026\u0026 (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.FUNCTION);\n     Scope scopeToDeclareIn \u003d scope;\n     if (n.getType() \u003d\u003d Token.GETPROP \u0026\u0026 !scope.isGlobal() \u0026\u0026 isQnameRootedInGlobalScope(n)) {\n         Scope globalScope \u003d scope.getGlobalScope();\n         if (!globalScope.isDeclared(variableName, false)) {\n             scopeToDeclareIn \u003d scope.getGlobalScope();\n         }\n     }\n     if (scopeToDeclareIn.isDeclared(variableName, false)) {\n         Var oldVar \u003d scopeToDeclareIn.getVar(variableName);\n         validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);\n     } else {\n         if (!inferred) {\n             setDeferredType(n, type);\n         }\n         CompilerInput input \u003d compiler.getInput(sourceName);\n         boolean isExtern \u003d input.isExtern();\n         Var newVar \u003d scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n         if (shouldDeclareOnGlobalThis) {\n-            ObjectType globalThis \u003d typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n+            ObjectType globalThis \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS);\n             if (inferred) {\n                 globalThis.defineInferredProperty(variableName, type \u003d\u003d null ? getNativeType(JSTypeNative.NO_TYPE) : type, isExtern, n);\n             } else {\n                 globalThis.defineDeclaredProperty(variableName, type, isExtern, n);\n             }\n         }\n         if (type instanceof EnumType) {\n             Node initialValue \u003d newVar.getInitialValue();\n             boolean isValidValue \u003d initialValue !\u003d null \u0026\u0026 (initialValue.getType() \u003d\u003d Token.OBJECTLIT || initialValue.isQualifiedName());\n             if (!isValidValue) {\n                 compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));\n             }\n         }\n         if (type instanceof FunctionType \u0026\u0026 !type.isEmptyType()) {\n             FunctionType fnType \u003d (FunctionType) type;\n             if ((fnType.isConstructor() || fnType.isInterface()) \u0026\u0026 !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE))) {\n                 FunctionType superClassCtor \u003d fnType.getSuperClassConstructor();\n                 scopeToDeclareIn.declare(variableName + \".prototype\", n, fnType.getPrototype(), input, superClassCtor \u003d\u003d null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n                 if (newVar.getInitialValue() \u003d\u003d null \u0026\u0026 !isExtern \u0026\u0026 variableName.equals(fnType.getInstanceType().getReferenceName())) {\n                     compiler.report(JSError.make(sourceName, n, fnType.isConstructor() ? CTOR_INITIALIZER : IFACE_INITIALIZER, variableName));\n                 }\n             }\n         }\n     }\n+    if (isGlobalVar \u0026\u0026 \"Window\".equals(variableName) \u0026\u0026 type instanceof FunctionType) {\n+        FunctionType globalThisCtor \u003d typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();\n+        globalThisCtor.getInstanceType().clearCachedValues();\n+        globalThisCtor.getPrototype().clearCachedValues();\n+        globalThisCtor.setPrototypeBasedOn(((FunctionType) type).getInstanceType());\n+    }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Defines a symbol in the current scope.\n\n@param n the defining NAME or GETPROP or object literal key node.\n@param parent the {@code n}\u0027s parent.\n@param name The name that this should be known by.\n@param type the variable\u0027s type. It may be {@code null} if\n    {@code inferred} is {@code true}.\n@param inferred Whether the type is inferred or declared.\n",
            "newValue": "Defines a symbol in the current scope.\n\n@param n the defining NAME or GETPROP or object literal key node.\n@param parent the {@code n}\u0027s parent.\n@param variableName The name that this should be known by.\n@param type the variable\u0027s type. It may be {@code null} if\n    {@code inferred} is {@code true}.\n@param inferred Whether the type is inferred or declared.\n"
          }
        }
      ]
    },
    "072fa2d047573d2d1f0187ba4bf76b1afa75031c": {
      "type": "Yintroduced",
      "commitMessage": "\nWhen a property of a named object literal is declared,\ndeclare the qualified name of that property.\n\nR\u003djohnlenz\nDELTA\u003d82  (58 added, 3 deleted, 21 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d546\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@793 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/16/11, 8:38 PM",
      "commitName": "072fa2d047573d2d1f0187ba4bf76b1afa75031c",
      "commitAuthor": "nicksantos@google.com",
      "diff": "@@ -0,0 +1,47 @@\n+void defineSlot(Node n, Node parent, String variableName, JSType type, boolean inferred) {\n+    Preconditions.checkArgument(!variableName.isEmpty());\n+    boolean shouldDeclareOnGlobalThis \u003d n.getType() \u003d\u003d Token.NAME \u0026\u0026 scope.isGlobal() \u0026\u0026 (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.FUNCTION);\n+    Scope scopeToDeclareIn \u003d scope;\n+    if (n.getType() \u003d\u003d Token.GETPROP \u0026\u0026 !scope.isGlobal() \u0026\u0026 isQnameRootedInGlobalScope(n)) {\n+        Scope globalScope \u003d scope.getGlobalScope();\n+        if (!globalScope.isDeclared(variableName, false)) {\n+            scopeToDeclareIn \u003d scope.getGlobalScope();\n+        }\n+    }\n+    if (scopeToDeclareIn.isDeclared(variableName, false)) {\n+        Var oldVar \u003d scopeToDeclareIn.getVar(variableName);\n+        validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);\n+    } else {\n+        if (!inferred) {\n+            setDeferredType(n, type);\n+        }\n+        CompilerInput input \u003d compiler.getInput(sourceName);\n+        boolean isExtern \u003d input.isExtern();\n+        Var newVar \u003d scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n+        if (shouldDeclareOnGlobalThis) {\n+            ObjectType globalThis \u003d typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n+            if (inferred) {\n+                globalThis.defineInferredProperty(variableName, type \u003d\u003d null ? getNativeType(JSTypeNative.NO_TYPE) : type, isExtern, n);\n+            } else {\n+                globalThis.defineDeclaredProperty(variableName, type, isExtern, n);\n+            }\n+        }\n+        if (type instanceof EnumType) {\n+            Node initialValue \u003d newVar.getInitialValue();\n+            boolean isValidValue \u003d initialValue !\u003d null \u0026\u0026 (initialValue.getType() \u003d\u003d Token.OBJECTLIT || initialValue.isQualifiedName());\n+            if (!isValidValue) {\n+                compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));\n+            }\n+        }\n+        if (type instanceof FunctionType \u0026\u0026 !type.isEmptyType()) {\n+            FunctionType fnType \u003d (FunctionType) type;\n+            if ((fnType.isConstructor() || fnType.isInterface()) \u0026\u0026 !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE))) {\n+                FunctionType superClassCtor \u003d fnType.getSuperClassConstructor();\n+                scopeToDeclareIn.declare(variableName + \".prototype\", n, fnType.getPrototype(), input, superClassCtor \u003d\u003d null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n+                if (newVar.getInitialValue() \u003d\u003d null \u0026\u0026 !isExtern \u0026\u0026 variableName.equals(fnType.getInstanceType().getReferenceName())) {\n+                    compiler.report(JSError.make(sourceName, n, fnType.isConstructor() ? CTOR_INITIALIZER : IFACE_INITIALIZER, variableName));\n+                }\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "void defineSlot(Node n, Node parent, String variableName, JSType type, boolean inferred) {\n    Preconditions.checkArgument(!variableName.isEmpty());\n    boolean shouldDeclareOnGlobalThis \u003d n.getType() \u003d\u003d Token.NAME \u0026\u0026 scope.isGlobal() \u0026\u0026 (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.FUNCTION);\n    Scope scopeToDeclareIn \u003d scope;\n    if (n.getType() \u003d\u003d Token.GETPROP \u0026\u0026 !scope.isGlobal() \u0026\u0026 isQnameRootedInGlobalScope(n)) {\n        Scope globalScope \u003d scope.getGlobalScope();\n        if (!globalScope.isDeclared(variableName, false)) {\n            scopeToDeclareIn \u003d scope.getGlobalScope();\n        }\n    }\n    if (scopeToDeclareIn.isDeclared(variableName, false)) {\n        Var oldVar \u003d scopeToDeclareIn.getVar(variableName);\n        validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);\n    } else {\n        if (!inferred) {\n            setDeferredType(n, type);\n        }\n        CompilerInput input \u003d compiler.getInput(sourceName);\n        boolean isExtern \u003d input.isExtern();\n        Var newVar \u003d scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n        if (shouldDeclareOnGlobalThis) {\n            ObjectType globalThis \u003d typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n            if (inferred) {\n                globalThis.defineInferredProperty(variableName, type \u003d\u003d null ? getNativeType(JSTypeNative.NO_TYPE) : type, isExtern, n);\n            } else {\n                globalThis.defineDeclaredProperty(variableName, type, isExtern, n);\n            }\n        }\n        if (type instanceof EnumType) {\n            Node initialValue \u003d newVar.getInitialValue();\n            boolean isValidValue \u003d initialValue !\u003d null \u0026\u0026 (initialValue.getType() \u003d\u003d Token.OBJECTLIT || initialValue.isQualifiedName());\n            if (!isValidValue) {\n                compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));\n            }\n        }\n        if (type instanceof FunctionType \u0026\u0026 !type.isEmptyType()) {\n            FunctionType fnType \u003d (FunctionType) type;\n            if ((fnType.isConstructor() || fnType.isInterface()) \u0026\u0026 !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE))) {\n                FunctionType superClassCtor \u003d fnType.getSuperClassConstructor();\n                scopeToDeclareIn.declare(variableName + \".prototype\", n, fnType.getPrototype(), input, superClassCtor \u003d\u003d null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n                if (newVar.getInitialValue() \u003d\u003d null \u0026\u0026 !isExtern \u0026\u0026 variableName.equals(fnType.getInstanceType().getReferenceName())) {\n                    compiler.report(JSError.make(sourceName, n, fnType.isConstructor() ? CTOR_INITIALIZER : IFACE_INITIALIZER, variableName));\n                }\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 1027,
      "functionName": "defineSlot",
      "functionAnnotation": "",
      "functionDoc": "Defines a symbol in the current scope.\n\n@param n the defining NAME or GETPROP or object literal key node.\n@param parent the {@code n}\u0027s parent.\n@param name The name that this should be known by.\n@param type the variable\u0027s type. It may be {@code null} if\n    {@code inferred} is {@code true}.\n@param inferred Whether the type is inferred or declared.\n"
    }
  }
}