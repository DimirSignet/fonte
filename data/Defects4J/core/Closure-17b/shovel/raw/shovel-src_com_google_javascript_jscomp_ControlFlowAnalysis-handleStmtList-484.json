{
  "origin": "codeshovel",
  "repositoryName": "Closure-17b",
  "repositoryPath": "/tmp/Closure-17b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ControlFlowAnalysis.java",
  "functionName": "handleStmtList",
  "functionId": "handleStmtList___node-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 484,
  "functionEndLine": 523,
  "numCommitsSeen": 23,
  "timeTaken": 1622,
  "changeHistory": [
    "5524adbda991632656059566b69cc2771ba42b7d",
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
    "ec8f3c1ea3de563d6ed6ce7af198701f46aea338",
    "0a39688562637465944df3c29ae0c1259cc0a4dc",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "5524adbda991632656059566b69cc2771ba42b7d": "Ybodychange",
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c": "Ybodychange",
    "ec8f3c1ea3de563d6ed6ce7af198701f46aea338": "Ybodychange",
    "0a39688562637465944df3c29ae0c1259cc0a4dc": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5524adbda991632656059566b69cc2771ba42b7d": {
      "type": "Ybodychange",
      "commitMessage": "\nRename a couple of AST nodes:\nDEFAULT becomes DEFAULT_CASE\nLP becomes PARAM_LIST\nGET becomes GETTER_DEF\nSET becomes SETTER_DEF\n\nR\u003dnicksantos\nDELTA\u003d215  (40 added, 5 deleted, 170 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3695\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1590 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/11/11, 4:42 PM",
      "commitName": "5524adbda991632656059566b69cc2771ba42b7d",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/10/11, 8:36 AM",
      "commitNameOld": "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 1.34,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "private void handleStmtList(Node node) {\n    Node parent \u003d node.getParent();\n    if (node.isBlock() \u0026\u0026 parent !\u003d null \u0026\u0026 parent.isTry() \u0026\u0026 NodeUtil.getCatchBlock(parent) \u003d\u003d node \u0026\u0026 !NodeUtil.hasCatchHandler(node)) {\n        return;\n    }\n    Node child \u003d node.getFirstChild();\n    while (child !\u003d null \u0026\u0026 child.isFunction()) {\n        child \u003d child.getNext();\n    }\n    if (child !\u003d null) {\n        createEdge(node, Branch.UNCOND, computeFallThrough(child));\n    } else {\n        createEdge(node, Branch.UNCOND, computeFollowNode(node, this));\n    }\n    if (parent !\u003d null) {\n        switch(parent.getType()) {\n            case Token.DEFAULT_CASE:\n            case Token.CASE:\n            case Token.TRY:\n                break;\n            default:\n                if (node.isBlock() \u0026\u0026 node.isSyntheticBlock()) {\n                    createEdge(node, Branch.SYN_BLOCK, computeFollowNode(node, this));\n                }\n                break;\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
      "functionStartLine": 482,
      "functionName": "handleStmtList",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,28 +1,28 @@\n private void handleStmtList(Node node) {\n     Node parent \u003d node.getParent();\n     if (node.isBlock() \u0026\u0026 parent !\u003d null \u0026\u0026 parent.isTry() \u0026\u0026 NodeUtil.getCatchBlock(parent) \u003d\u003d node \u0026\u0026 !NodeUtil.hasCatchHandler(node)) {\n         return;\n     }\n     Node child \u003d node.getFirstChild();\n     while (child !\u003d null \u0026\u0026 child.isFunction()) {\n         child \u003d child.getNext();\n     }\n     if (child !\u003d null) {\n         createEdge(node, Branch.UNCOND, computeFallThrough(child));\n     } else {\n         createEdge(node, Branch.UNCOND, computeFollowNode(node, this));\n     }\n     if (parent !\u003d null) {\n         switch(parent.getType()) {\n-            case Token.DEFAULT:\n+            case Token.DEFAULT_CASE:\n             case Token.CASE:\n             case Token.TRY:\n                 break;\n             default:\n                 if (node.isBlock() \u0026\u0026 node.isSyntheticBlock()) {\n                     createEdge(node, Branch.SYN_BLOCK, computeFollowNode(node, this));\n                 }\n                 break;\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c": {
      "type": "Ybodychange",
      "commitMessage": "\nReplace the bulk of the Node.getType() \u003d\u003d Token.XXX calls with\nNode.isXXX calls.\n\nR\u003dnicksantos\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3677\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1582 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/10/11, 8:36 AM",
      "commitName": "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/9/11, 1:51 PM",
      "commitNameOld": "3d80e1ed8fffbcb5f41b63f64726d9a4c76f209f",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 0.78,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "private void handleStmtList(Node node) {\n    Node parent \u003d node.getParent();\n    if (node.isBlock() \u0026\u0026 parent !\u003d null \u0026\u0026 parent.isTry() \u0026\u0026 NodeUtil.getCatchBlock(parent) \u003d\u003d node \u0026\u0026 !NodeUtil.hasCatchHandler(node)) {\n        return;\n    }\n    Node child \u003d node.getFirstChild();\n    while (child !\u003d null \u0026\u0026 child.isFunction()) {\n        child \u003d child.getNext();\n    }\n    if (child !\u003d null) {\n        createEdge(node, Branch.UNCOND, computeFallThrough(child));\n    } else {\n        createEdge(node, Branch.UNCOND, computeFollowNode(node, this));\n    }\n    if (parent !\u003d null) {\n        switch(parent.getType()) {\n            case Token.DEFAULT:\n            case Token.CASE:\n            case Token.TRY:\n                break;\n            default:\n                if (node.isBlock() \u0026\u0026 node.isSyntheticBlock()) {\n                    createEdge(node, Branch.SYN_BLOCK, computeFollowNode(node, this));\n                }\n                break;\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
      "functionStartLine": 482,
      "functionName": "handleStmtList",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,28 +1,28 @@\n private void handleStmtList(Node node) {\n     Node parent \u003d node.getParent();\n-    if (node.getType() \u003d\u003d Token.BLOCK \u0026\u0026 parent !\u003d null \u0026\u0026 parent.getType() \u003d\u003d Token.TRY \u0026\u0026 NodeUtil.getCatchBlock(parent) \u003d\u003d node \u0026\u0026 !NodeUtil.hasCatchHandler(node)) {\n+    if (node.isBlock() \u0026\u0026 parent !\u003d null \u0026\u0026 parent.isTry() \u0026\u0026 NodeUtil.getCatchBlock(parent) \u003d\u003d node \u0026\u0026 !NodeUtil.hasCatchHandler(node)) {\n         return;\n     }\n     Node child \u003d node.getFirstChild();\n-    while (child !\u003d null \u0026\u0026 child.getType() \u003d\u003d Token.FUNCTION) {\n+    while (child !\u003d null \u0026\u0026 child.isFunction()) {\n         child \u003d child.getNext();\n     }\n     if (child !\u003d null) {\n         createEdge(node, Branch.UNCOND, computeFallThrough(child));\n     } else {\n         createEdge(node, Branch.UNCOND, computeFollowNode(node, this));\n     }\n     if (parent !\u003d null) {\n         switch(parent.getType()) {\n             case Token.DEFAULT:\n             case Token.CASE:\n             case Token.TRY:\n                 break;\n             default:\n-                if (node.getType() \u003d\u003d Token.BLOCK \u0026\u0026 node.isSyntheticBlock()) {\n+                if (node.isBlock() \u0026\u0026 node.isSyntheticBlock()) {\n                     createEdge(node, Branch.SYN_BLOCK, computeFollowNode(node, this));\n                 }\n                 break;\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ec8f3c1ea3de563d6ed6ce7af198701f46aea338": {
      "type": "Ybodychange",
      "commitMessage": "\ntemplate sections are now represented differently in the AST,\nso the control flow graph needs to reflect that.\n\nR\u003dacleung\nDELTA\u003d39  (31 added, 3 deleted, 5 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d176113\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@383 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/24/10, 12:29 PM",
      "commitName": "ec8f3c1ea3de563d6ed6ce7af198701f46aea338",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "8/12/10, 6:02 PM",
      "commitNameOld": "15acafb00636f99295b394145b9b60a5e624ddfa",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 11.77,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "actualSource": "private void handleStmtList(Node node) {\n    Node parent \u003d node.getParent();\n    if (node.getType() \u003d\u003d Token.BLOCK \u0026\u0026 parent !\u003d null \u0026\u0026 parent.getType() \u003d\u003d Token.TRY \u0026\u0026 NodeUtil.getCatchBlock(parent) \u003d\u003d node \u0026\u0026 !NodeUtil.hasCatchHandler(node)) {\n        return;\n    }\n    Node child \u003d node.getFirstChild();\n    while (child !\u003d null \u0026\u0026 child.getType() \u003d\u003d Token.FUNCTION) {\n        child \u003d child.getNext();\n    }\n    if (child !\u003d null) {\n        createEdge(node, Branch.UNCOND, computeFallThrough(child));\n    } else {\n        createEdge(node, Branch.UNCOND, computeFollowNode(node, this));\n    }\n    if (parent !\u003d null) {\n        switch(parent.getType()) {\n            case Token.DEFAULT:\n            case Token.CASE:\n            case Token.TRY:\n                break;\n            default:\n                if (node.getType() \u003d\u003d Token.BLOCK \u0026\u0026 node.isSyntheticBlock()) {\n                    createEdge(node, Branch.SYN_BLOCK, computeFollowNode(node, this));\n                }\n                break;\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
      "functionStartLine": 478,
      "functionName": "handleStmtList",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,31 +1,28 @@\n private void handleStmtList(Node node) {\n     Node parent \u003d node.getParent();\n     if (node.getType() \u003d\u003d Token.BLOCK \u0026\u0026 parent !\u003d null \u0026\u0026 parent.getType() \u003d\u003d Token.TRY \u0026\u0026 NodeUtil.getCatchBlock(parent) \u003d\u003d node \u0026\u0026 !NodeUtil.hasCatchHandler(node)) {\n         return;\n     }\n     Node child \u003d node.getFirstChild();\n     while (child !\u003d null \u0026\u0026 child.getType() \u003d\u003d Token.FUNCTION) {\n         child \u003d child.getNext();\n     }\n     if (child !\u003d null) {\n         createEdge(node, Branch.UNCOND, computeFallThrough(child));\n     } else {\n         createEdge(node, Branch.UNCOND, computeFollowNode(node, this));\n     }\n     if (parent !\u003d null) {\n         switch(parent.getType()) {\n             case Token.DEFAULT:\n             case Token.CASE:\n             case Token.TRY:\n                 break;\n             default:\n                 if (node.getType() \u003d\u003d Token.BLOCK \u0026\u0026 node.isSyntheticBlock()) {\n-                    Node next \u003d node.getLastChild();\n-                    if (next !\u003d null) {\n-                        createEdge(node, Branch.SYN_BLOCK, computeFallThrough(next));\n-                    }\n+                    createEdge(node, Branch.SYN_BLOCK, computeFollowNode(node, this));\n                 }\n                 break;\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0a39688562637465944df3c29ae0c1259cc0a4dc": {
      "type": "Ybodychange",
      "commitMessage": "\nRemoves useless unconditional jumps\n\nR\u003djohnlenz\nDELTA\u003d179  (96 added, 33 deleted, 50 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d88010\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@337 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/4/10, 5:53 PM",
      "commitName": "0a39688562637465944df3c29ae0c1259cc0a4dc",
      "commitAuthor": "acleung@google.com",
      "commitDateOld": "2/22/10, 5:07 PM",
      "commitNameOld": "2f5cb1622371de540fe20dcbe0411651ec89f952",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 162.99,
      "commitsBetweenForRepo": 207,
      "commitsBetweenForFile": 1,
      "actualSource": "private void handleStmtList(Node node) {\n    Node parent \u003d node.getParent();\n    if (node.getType() \u003d\u003d Token.BLOCK \u0026\u0026 parent !\u003d null \u0026\u0026 parent.getType() \u003d\u003d Token.TRY \u0026\u0026 NodeUtil.getCatchBlock(parent) \u003d\u003d node \u0026\u0026 !NodeUtil.hasCatchHandler(node)) {\n        return;\n    }\n    Node child \u003d node.getFirstChild();\n    while (child !\u003d null \u0026\u0026 child.getType() \u003d\u003d Token.FUNCTION) {\n        child \u003d child.getNext();\n    }\n    if (child !\u003d null) {\n        createEdge(node, Branch.UNCOND, computeFallThrough(child));\n    } else {\n        createEdge(node, Branch.UNCOND, computeFollowNode(node, this));\n    }\n    if (parent !\u003d null) {\n        switch(parent.getType()) {\n            case Token.DEFAULT:\n            case Token.CASE:\n            case Token.TRY:\n                break;\n            default:\n                if (node.getType() \u003d\u003d Token.BLOCK \u0026\u0026 node.isSyntheticBlock()) {\n                    Node next \u003d node.getLastChild();\n                    if (next !\u003d null) {\n                        createEdge(node, Branch.SYN_BLOCK, computeFallThrough(next));\n                    }\n                }\n                break;\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
      "functionStartLine": 478,
      "functionName": "handleStmtList",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,31 +1,31 @@\n private void handleStmtList(Node node) {\n     Node parent \u003d node.getParent();\n     if (node.getType() \u003d\u003d Token.BLOCK \u0026\u0026 parent !\u003d null \u0026\u0026 parent.getType() \u003d\u003d Token.TRY \u0026\u0026 NodeUtil.getCatchBlock(parent) \u003d\u003d node \u0026\u0026 !NodeUtil.hasCatchHandler(node)) {\n         return;\n     }\n     Node child \u003d node.getFirstChild();\n     while (child !\u003d null \u0026\u0026 child.getType() \u003d\u003d Token.FUNCTION) {\n         child \u003d child.getNext();\n     }\n     if (child !\u003d null) {\n         createEdge(node, Branch.UNCOND, computeFallThrough(child));\n     } else {\n-        createEdge(node, Branch.UNCOND, computeFollowNode(node));\n+        createEdge(node, Branch.UNCOND, computeFollowNode(node, this));\n     }\n     if (parent !\u003d null) {\n         switch(parent.getType()) {\n             case Token.DEFAULT:\n             case Token.CASE:\n             case Token.TRY:\n                 break;\n             default:\n                 if (node.getType() \u003d\u003d Token.BLOCK \u0026\u0026 node.isSyntheticBlock()) {\n                     Node next \u003d node.getLastChild();\n                     if (next !\u003d null) {\n                         createEdge(node, Branch.SYN_BLOCK, computeFallThrough(next));\n                     }\n                 }\n                 break;\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,31 @@\n+private void handleStmtList(Node node) {\n+    Node parent \u003d node.getParent();\n+    if (node.getType() \u003d\u003d Token.BLOCK \u0026\u0026 parent !\u003d null \u0026\u0026 parent.getType() \u003d\u003d Token.TRY \u0026\u0026 NodeUtil.getCatchBlock(parent) \u003d\u003d node \u0026\u0026 !NodeUtil.hasCatchHandler(node)) {\n+        return;\n+    }\n+    Node child \u003d node.getFirstChild();\n+    while (child !\u003d null \u0026\u0026 child.getType() \u003d\u003d Token.FUNCTION) {\n+        child \u003d child.getNext();\n+    }\n+    if (child !\u003d null) {\n+        createEdge(node, Branch.UNCOND, computeFallThrough(child));\n+    } else {\n+        createEdge(node, Branch.UNCOND, computeFollowNode(node));\n+    }\n+    if (parent !\u003d null) {\n+        switch(parent.getType()) {\n+            case Token.DEFAULT:\n+            case Token.CASE:\n+            case Token.TRY:\n+                break;\n+            default:\n+                if (node.getType() \u003d\u003d Token.BLOCK \u0026\u0026 node.isSyntheticBlock()) {\n+                    Node next \u003d node.getLastChild();\n+                    if (next !\u003d null) {\n+                        createEdge(node, Branch.SYN_BLOCK, computeFallThrough(next));\n+                    }\n+                }\n+                break;\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void handleStmtList(Node node) {\n    Node parent \u003d node.getParent();\n    if (node.getType() \u003d\u003d Token.BLOCK \u0026\u0026 parent !\u003d null \u0026\u0026 parent.getType() \u003d\u003d Token.TRY \u0026\u0026 NodeUtil.getCatchBlock(parent) \u003d\u003d node \u0026\u0026 !NodeUtil.hasCatchHandler(node)) {\n        return;\n    }\n    Node child \u003d node.getFirstChild();\n    while (child !\u003d null \u0026\u0026 child.getType() \u003d\u003d Token.FUNCTION) {\n        child \u003d child.getNext();\n    }\n    if (child !\u003d null) {\n        createEdge(node, Branch.UNCOND, computeFallThrough(child));\n    } else {\n        createEdge(node, Branch.UNCOND, computeFollowNode(node));\n    }\n    if (parent !\u003d null) {\n        switch(parent.getType()) {\n            case Token.DEFAULT:\n            case Token.CASE:\n            case Token.TRY:\n                break;\n            default:\n                if (node.getType() \u003d\u003d Token.BLOCK \u0026\u0026 node.isSyntheticBlock()) {\n                    Node next \u003d node.getLastChild();\n                    if (next !\u003d null) {\n                        createEdge(node, Branch.SYN_BLOCK, computeFallThrough(next));\n                    }\n                }\n                break;\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
      "functionStartLine": 479,
      "functionName": "handleStmtList",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}