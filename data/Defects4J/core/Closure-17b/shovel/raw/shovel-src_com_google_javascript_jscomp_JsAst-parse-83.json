{
  "origin": "codeshovel",
  "repositoryName": "Closure-17b",
  "repositoryPath": "/tmp/Closure-17b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JsAst.java",
  "functionName": "parse",
  "functionId": "parse___compiler-AbstractCompiler",
  "sourceFilePath": "src/com/google/javascript/jscomp/JsAst.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 83,
  "functionEndLine": 105,
  "numCommitsSeen": 29,
  "timeTaken": 1088,
  "changeHistory": [
    "9dfbc803407e714f9744555a1c9e7c4230f1816d",
    "f203be4152b8fd8dac8b82cac3d417e020cb9b1a",
    "9320feca198878ca9464aae089399a8891c314d7",
    "9a1ddf5f982e54ecbc3e028dfa84ef9bd07a8044",
    "b8c52bf5e76948ee8d561fa55a36cc6c9f5d0c68",
    "168bc14ff5e9e664863c3b1146f2a5b7a30ffb42",
    "3924ff1e4a236d68a0b5448d185537d90ca04419",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "9dfbc803407e714f9744555a1c9e7c4230f1816d": "Ybodychange",
    "f203be4152b8fd8dac8b82cac3d417e020cb9b1a": "Ybodychange",
    "9320feca198878ca9464aae089399a8891c314d7": "Ymultichange(Yparameterchange,Ybodychange)",
    "9a1ddf5f982e54ecbc3e028dfa84ef9bd07a8044": "Ybodychange",
    "b8c52bf5e76948ee8d561fa55a36cc6c9f5d0c68": "Ybodychange",
    "168bc14ff5e9e664863c3b1146f2a5b7a30ffb42": "Ybodychange",
    "3924ff1e4a236d68a0b5448d185537d90ca04419": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9dfbc803407e714f9744555a1c9e7c4230f1816d": {
      "type": "Ybodychange",
      "commitMessage": "\nUse the new IR interface where possible.\n\nR\u003dnicksantos\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3799\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1641 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/22/11, 2:28 PM",
      "commitName": "9dfbc803407e714f9744555a1c9e7c4230f1816d",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "8/3/11, 1:55 PM",
      "commitNameOld": "f203be4152b8fd8dac8b82cac3d417e020cb9b1a",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 111.07,
      "commitsBetweenForRepo": 280,
      "commitsBetweenForFile": 1,
      "actualSource": "private void parse(AbstractCompiler compiler) {\n    try {\n        logger_.fine(\"Parsing: \" + sourceFile.getName());\n        root \u003d ParserRunner.parse(sourceFile, sourceFile.getCode(), compiler.getParserConfig(), compiler.getDefaultErrorReporter(), logger_);\n    } catch (IOException e) {\n        compiler.report(JSError.make(AbstractCompiler.READ_ERROR, sourceFile.getName()));\n    }\n    if (root \u003d\u003d null || compiler.hasHaltingErrors()) {\n        root \u003d IR.script();\n    } else {\n        compiler.prepareAst(root);\n    }\n    root.setStaticSourceFile(sourceFile);\n}",
      "path": "src/com/google/javascript/jscomp/JsAst.java",
      "functionStartLine": 83,
      "functionName": "parse",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,14 +1,14 @@\n private void parse(AbstractCompiler compiler) {\n     try {\n         logger_.fine(\"Parsing: \" + sourceFile.getName());\n         root \u003d ParserRunner.parse(sourceFile, sourceFile.getCode(), compiler.getParserConfig(), compiler.getDefaultErrorReporter(), logger_);\n     } catch (IOException e) {\n         compiler.report(JSError.make(AbstractCompiler.READ_ERROR, sourceFile.getName()));\n     }\n     if (root \u003d\u003d null || compiler.hasHaltingErrors()) {\n-        root \u003d new Node(Token.SCRIPT);\n+        root \u003d IR.script();\n     } else {\n         compiler.prepareAst(root);\n     }\n     root.setStaticSourceFile(sourceFile);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f203be4152b8fd8dac8b82cac3d417e020cb9b1a": {
      "type": "Ybodychange",
      "commitMessage": "\nPart 2: source name/input id splitting.\nRequire an input id on all AST classes and SCRIPT nodes.\n\nR\u003dnicksantos\nDELTA\u003d112  (95 added, 6 deleted, 11 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2895\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1324 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/3/11, 1:55 PM",
      "commitName": "f203be4152b8fd8dac8b82cac3d417e020cb9b1a",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "6/30/11, 1:25 PM",
      "commitNameOld": "9320feca198878ca9464aae089399a8891c314d7",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 34.02,
      "commitsBetweenForRepo": 76,
      "commitsBetweenForFile": 1,
      "actualSource": "private void parse(AbstractCompiler compiler) {\n    try {\n        logger_.fine(\"Parsing: \" + sourceFile.getName());\n        root \u003d ParserRunner.parse(sourceFile, sourceFile.getCode(), compiler.getParserConfig(), compiler.getDefaultErrorReporter(), logger_);\n    } catch (IOException e) {\n        compiler.report(JSError.make(AbstractCompiler.READ_ERROR, sourceFile.getName()));\n    }\n    if (root \u003d\u003d null || compiler.hasHaltingErrors()) {\n        root \u003d new Node(Token.SCRIPT);\n    } else {\n        compiler.prepareAst(root);\n    }\n    root.setStaticSourceFile(sourceFile);\n}",
      "path": "src/com/google/javascript/jscomp/JsAst.java",
      "functionStartLine": 84,
      "functionName": "parse",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,14 +1,14 @@\n private void parse(AbstractCompiler compiler) {\n     try {\n         logger_.fine(\"Parsing: \" + sourceFile.getName());\n         root \u003d ParserRunner.parse(sourceFile, sourceFile.getCode(), compiler.getParserConfig(), compiler.getDefaultErrorReporter(), logger_);\n     } catch (IOException e) {\n         compiler.report(JSError.make(AbstractCompiler.READ_ERROR, sourceFile.getName()));\n     }\n     if (root \u003d\u003d null || compiler.hasHaltingErrors()) {\n-        root \u003d new Node(Token.BLOCK);\n+        root \u003d new Node(Token.SCRIPT);\n     } else {\n         compiler.prepareAst(root);\n     }\n     root.setStaticSourceFile(sourceFile);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9320feca198878ca9464aae089399a8891c314d7": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "\nMake StaticSourceFile a property of Node\n\nR\u003djohnlenz\nDELTA\u003d183  (102 added, 25 deleted, 56 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2496\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1236 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/30/11, 1:25 PM",
      "commitName": "9320feca198878ca9464aae089399a8891c314d7",
      "commitAuthor": "nicksantos@google.com",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "\nMake StaticSourceFile a property of Node\n\nR\u003djohnlenz\nDELTA\u003d183  (102 added, 25 deleted, 56 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2496\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1236 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "6/30/11, 1:25 PM",
          "commitName": "9320feca198878ca9464aae089399a8891c314d7",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "4/12/11, 12:15 PM",
          "commitNameOld": "f322be0e576d5e2114cb59c0a6537197997b9c59",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 79.05,
          "commitsBetweenForRepo": 230,
          "commitsBetweenForFile": 1,
          "actualSource": "private void parse(AbstractCompiler compiler) {\n    try {\n        logger_.fine(\"Parsing: \" + sourceFile.getName());\n        root \u003d ParserRunner.parse(sourceFile, sourceFile.getCode(), compiler.getParserConfig(), compiler.getDefaultErrorReporter(), logger_);\n    } catch (IOException e) {\n        compiler.report(JSError.make(AbstractCompiler.READ_ERROR, sourceFile.getName()));\n    }\n    if (root \u003d\u003d null || compiler.hasHaltingErrors()) {\n        root \u003d new Node(Token.BLOCK);\n    } else {\n        compiler.prepareAst(root);\n    }\n    root.setStaticSourceFile(sourceFile);\n}",
          "path": "src/com/google/javascript/jscomp/JsAst.java",
          "functionStartLine": 75,
          "functionName": "parse",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,14 +1,14 @@\n-private void parse(AbstractCompiler compiler, String sourceName, String sourceStr) {\n+private void parse(AbstractCompiler compiler) {\n     try {\n-        logger_.fine(\"Parsing: \" + sourceName);\n-        root \u003d ParserRunner.parse(sourceName, sourceStr, compiler.getParserConfig(), compiler.getDefaultErrorReporter(), logger_);\n+        logger_.fine(\"Parsing: \" + sourceFile.getName());\n+        root \u003d ParserRunner.parse(sourceFile, sourceFile.getCode(), compiler.getParserConfig(), compiler.getDefaultErrorReporter(), logger_);\n     } catch (IOException e) {\n-        compiler.report(JSError.make(AbstractCompiler.READ_ERROR, sourceName));\n+        compiler.report(JSError.make(AbstractCompiler.READ_ERROR, sourceFile.getName()));\n     }\n     if (root \u003d\u003d null || compiler.hasHaltingErrors()) {\n         root \u003d new Node(Token.BLOCK);\n     } else {\n         compiler.prepareAst(root);\n     }\n-    root.putProp(Node.SOURCENAME_PROP, sourceName);\n+    root.setStaticSourceFile(sourceFile);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[compiler-AbstractCompiler, sourceName-String, sourceStr-String]",
            "newValue": "[compiler-AbstractCompiler]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nMake StaticSourceFile a property of Node\n\nR\u003djohnlenz\nDELTA\u003d183  (102 added, 25 deleted, 56 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2496\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1236 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "6/30/11, 1:25 PM",
          "commitName": "9320feca198878ca9464aae089399a8891c314d7",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "4/12/11, 12:15 PM",
          "commitNameOld": "f322be0e576d5e2114cb59c0a6537197997b9c59",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 79.05,
          "commitsBetweenForRepo": 230,
          "commitsBetweenForFile": 1,
          "actualSource": "private void parse(AbstractCompiler compiler) {\n    try {\n        logger_.fine(\"Parsing: \" + sourceFile.getName());\n        root \u003d ParserRunner.parse(sourceFile, sourceFile.getCode(), compiler.getParserConfig(), compiler.getDefaultErrorReporter(), logger_);\n    } catch (IOException e) {\n        compiler.report(JSError.make(AbstractCompiler.READ_ERROR, sourceFile.getName()));\n    }\n    if (root \u003d\u003d null || compiler.hasHaltingErrors()) {\n        root \u003d new Node(Token.BLOCK);\n    } else {\n        compiler.prepareAst(root);\n    }\n    root.setStaticSourceFile(sourceFile);\n}",
          "path": "src/com/google/javascript/jscomp/JsAst.java",
          "functionStartLine": 75,
          "functionName": "parse",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,14 +1,14 @@\n-private void parse(AbstractCompiler compiler, String sourceName, String sourceStr) {\n+private void parse(AbstractCompiler compiler) {\n     try {\n-        logger_.fine(\"Parsing: \" + sourceName);\n-        root \u003d ParserRunner.parse(sourceName, sourceStr, compiler.getParserConfig(), compiler.getDefaultErrorReporter(), logger_);\n+        logger_.fine(\"Parsing: \" + sourceFile.getName());\n+        root \u003d ParserRunner.parse(sourceFile, sourceFile.getCode(), compiler.getParserConfig(), compiler.getDefaultErrorReporter(), logger_);\n     } catch (IOException e) {\n-        compiler.report(JSError.make(AbstractCompiler.READ_ERROR, sourceName));\n+        compiler.report(JSError.make(AbstractCompiler.READ_ERROR, sourceFile.getName()));\n     }\n     if (root \u003d\u003d null || compiler.hasHaltingErrors()) {\n         root \u003d new Node(Token.BLOCK);\n     } else {\n         compiler.prepareAst(root);\n     }\n-    root.putProp(Node.SOURCENAME_PROP, sourceName);\n+    root.setStaticSourceFile(sourceFile);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "9a1ddf5f982e54ecbc3e028dfa84ef9bd07a8044": {
      "type": "Ybodychange",
      "commitMessage": "Merge NodeTypeNormalizer and CodingConventionAnnotator into\na single pass. (Nick)\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@116 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/24/10, 8:37 PM",
      "commitName": "9a1ddf5f982e54ecbc3e028dfa84ef9bd07a8044",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "2/12/10, 11:40 AM",
      "commitNameOld": "b8c52bf5e76948ee8d561fa55a36cc6c9f5d0c68",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 12.37,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "actualSource": "private void parse(AbstractCompiler compiler, String sourceName, String sourceStr) {\n    try {\n        logger_.fine(\"Parsing: \" + sourceName);\n        root \u003d ParserRunner.parse(sourceName, sourceStr, compiler.getParserConfig(), compiler.getDefaultErrorReporter(), logger_);\n    } catch (IOException e) {\n        compiler.report(JSError.make(AbstractCompiler.READ_ERROR, sourceName));\n    }\n    if (root \u003d\u003d null || compiler.hasHaltingErrors()) {\n        root \u003d new Node(Token.BLOCK);\n    } else {\n        compiler.prepareAst(root);\n    }\n    root.putProp(Node.SOURCENAME_PROP, sourceName);\n}",
      "path": "src/com/google/javascript/jscomp/JsAst.java",
      "functionStartLine": 85,
      "functionName": "parse",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,15 +1,14 @@\n private void parse(AbstractCompiler compiler, String sourceName, String sourceStr) {\n     try {\n         logger_.fine(\"Parsing: \" + sourceName);\n         root \u003d ParserRunner.parse(sourceName, sourceStr, compiler.getParserConfig(), compiler.getDefaultErrorReporter(), logger_);\n     } catch (IOException e) {\n         compiler.report(JSError.make(AbstractCompiler.READ_ERROR, sourceName));\n     }\n     if (root \u003d\u003d null || compiler.hasHaltingErrors()) {\n         root \u003d new Node(Token.BLOCK);\n     } else {\n-        compiler.normalizeNodeTypes(root);\n-        compiler.annotateCodingConvention(root);\n+        compiler.prepareAst(root);\n     }\n     root.putProp(Node.SOURCENAME_PROP, sourceName);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b8c52bf5e76948ee8d561fa55a36cc6c9f5d0c68": {
      "type": "Ybodychange",
      "commitMessage": "Fix a null pointer exception in FunctionType.\n\nFix a bug in @export generation.\n\nRemove references to StringUtil.\n\nOnly create one ParserConfig per compilation process.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@104 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/12/10, 11:40 AM",
      "commitName": "b8c52bf5e76948ee8d561fa55a36cc6c9f5d0c68",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "12/11/09, 3:29 PM",
      "commitNameOld": "168bc14ff5e9e664863c3b1146f2a5b7a30ffb42",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 62.84,
      "commitsBetweenForRepo": 56,
      "commitsBetweenForFile": 1,
      "actualSource": "private void parse(AbstractCompiler compiler, String sourceName, String sourceStr) {\n    try {\n        logger_.fine(\"Parsing: \" + sourceName);\n        root \u003d ParserRunner.parse(sourceName, sourceStr, compiler.getParserConfig(), compiler.getDefaultErrorReporter(), logger_);\n    } catch (IOException e) {\n        compiler.report(JSError.make(AbstractCompiler.READ_ERROR, sourceName));\n    }\n    if (root \u003d\u003d null || compiler.hasHaltingErrors()) {\n        root \u003d new Node(Token.BLOCK);\n    } else {\n        compiler.normalizeNodeTypes(root);\n        compiler.annotateCodingConvention(root);\n    }\n    root.putProp(Node.SOURCENAME_PROP, sourceName);\n}",
      "path": "src/com/google/javascript/jscomp/JsAst.java",
      "functionStartLine": 85,
      "functionName": "parse",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,15 +1,15 @@\n private void parse(AbstractCompiler compiler, String sourceName, String sourceStr) {\n     try {\n         logger_.fine(\"Parsing: \" + sourceName);\n-        root \u003d ParserRunner.parse(sourceName, sourceStr, compiler.isIdeMode(), compiler.getTypeRegistry(), compiler.getDefaultErrorReporter(), logger_);\n+        root \u003d ParserRunner.parse(sourceName, sourceStr, compiler.getParserConfig(), compiler.getDefaultErrorReporter(), logger_);\n     } catch (IOException e) {\n         compiler.report(JSError.make(AbstractCompiler.READ_ERROR, sourceName));\n     }\n     if (root \u003d\u003d null || compiler.hasHaltingErrors()) {\n         root \u003d new Node(Token.BLOCK);\n     } else {\n         compiler.normalizeNodeTypes(root);\n         compiler.annotateCodingConvention(root);\n     }\n     root.putProp(Node.SOURCENAME_PROP, sourceName);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "168bc14ff5e9e664863c3b1146f2a5b7a30ffb42": {
      "type": "Ybodychange",
      "commitMessage": "Add a pass for collecting symbols exported like window[\u0027x\u0027] \u003d ...\n\nFix for issue #70.\n\nAssorted minor bug fixes.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@31 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/11/09, 3:29 PM",
      "commitName": "168bc14ff5e9e664863c3b1146f2a5b7a30ffb42",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "12/2/09, 5:12 PM",
      "commitNameOld": "3924ff1e4a236d68a0b5448d185537d90ca04419",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 8.93,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "private void parse(AbstractCompiler compiler, String sourceName, String sourceStr) {\n    try {\n        logger_.fine(\"Parsing: \" + sourceName);\n        root \u003d ParserRunner.parse(sourceName, sourceStr, compiler.isIdeMode(), compiler.getTypeRegistry(), compiler.getDefaultErrorReporter(), logger_);\n    } catch (IOException e) {\n        compiler.report(JSError.make(AbstractCompiler.READ_ERROR, sourceName));\n    }\n    if (root \u003d\u003d null || compiler.hasHaltingErrors()) {\n        root \u003d new Node(Token.BLOCK);\n    } else {\n        compiler.normalizeNodeTypes(root);\n        compiler.annotateCodingConvention(root);\n    }\n    root.putProp(Node.SOURCENAME_PROP, sourceName);\n}",
      "path": "src/com/google/javascript/jscomp/JsAst.java",
      "functionStartLine": 85,
      "functionName": "parse",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,15 +1,15 @@\n private void parse(AbstractCompiler compiler, String sourceName, String sourceStr) {\n     try {\n         logger_.fine(\"Parsing: \" + sourceName);\n         root \u003d ParserRunner.parse(sourceName, sourceStr, compiler.isIdeMode(), compiler.getTypeRegistry(), compiler.getDefaultErrorReporter(), logger_);\n     } catch (IOException e) {\n         compiler.report(JSError.make(AbstractCompiler.READ_ERROR, sourceName));\n     }\n-    if (root \u003d\u003d null) {\n+    if (root \u003d\u003d null || compiler.hasHaltingErrors()) {\n         root \u003d new Node(Token.BLOCK);\n     } else {\n         compiler.normalizeNodeTypes(root);\n         compiler.annotateCodingConvention(root);\n     }\n     root.putProp(Node.SOURCENAME_PROP, sourceName);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3924ff1e4a236d68a0b5448d185537d90ca04419": {
      "type": "Ybodychange",
      "commitMessage": "Warn about all with statements, unless there\u0027s an explicit\n/** @suppress {with} */ tag\n\nRefactor a bunch of stuff into PassConfigs\n\nAdd a bunch of parser tests.\n\nUp-integrate John and Norris\u0027 latest changes to Rhino at trunk\n\nMinor type-tightening bug fixes.\n\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@18 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/2/09, 5:12 PM",
      "commitName": "3924ff1e4a236d68a0b5448d185537d90ca04419",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/3/09, 3:51 PM",
      "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 29.06,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "actualSource": "private void parse(AbstractCompiler compiler, String sourceName, String sourceStr) {\n    try {\n        logger_.fine(\"Parsing: \" + sourceName);\n        root \u003d ParserRunner.parse(sourceName, sourceStr, compiler.isIdeMode(), compiler.getTypeRegistry(), compiler.getDefaultErrorReporter(), logger_);\n    } catch (IOException e) {\n        compiler.report(JSError.make(AbstractCompiler.READ_ERROR, sourceName));\n    }\n    if (root \u003d\u003d null) {\n        root \u003d new Node(Token.BLOCK);\n    } else {\n        compiler.normalizeNodeTypes(root);\n        compiler.annotateCodingConvention(root);\n    }\n    root.putProp(Node.SOURCENAME_PROP, sourceName);\n}",
      "path": "src/com/google/javascript/jscomp/JsAst.java",
      "functionStartLine": 85,
      "functionName": "parse",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,15 +1,15 @@\n private void parse(AbstractCompiler compiler, String sourceName, String sourceStr) {\n     try {\n         logger_.fine(\"Parsing: \" + sourceName);\n         root \u003d ParserRunner.parse(sourceName, sourceStr, compiler.isIdeMode(), compiler.getTypeRegistry(), compiler.getDefaultErrorReporter(), logger_);\n     } catch (IOException e) {\n-        compiler.report(JSError.make(Compiler.READ_ERROR, sourceName));\n+        compiler.report(JSError.make(AbstractCompiler.READ_ERROR, sourceName));\n     }\n     if (root \u003d\u003d null) {\n         root \u003d new Node(Token.BLOCK);\n     } else {\n         compiler.normalizeNodeTypes(root);\n         compiler.annotateCodingConvention(root);\n     }\n     root.putProp(Node.SOURCENAME_PROP, sourceName);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,15 @@\n+private void parse(AbstractCompiler compiler, String sourceName, String sourceStr) {\n+    try {\n+        logger_.fine(\"Parsing: \" + sourceName);\n+        root \u003d ParserRunner.parse(sourceName, sourceStr, compiler.isIdeMode(), compiler.getTypeRegistry(), compiler.getDefaultErrorReporter(), logger_);\n+    } catch (IOException e) {\n+        compiler.report(JSError.make(Compiler.READ_ERROR, sourceName));\n+    }\n+    if (root \u003d\u003d null) {\n+        root \u003d new Node(Token.BLOCK);\n+    } else {\n+        compiler.normalizeNodeTypes(root);\n+        compiler.annotateCodingConvention(root);\n+    }\n+    root.putProp(Node.SOURCENAME_PROP, sourceName);\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void parse(AbstractCompiler compiler, String sourceName, String sourceStr) {\n    try {\n        logger_.fine(\"Parsing: \" + sourceName);\n        root \u003d ParserRunner.parse(sourceName, sourceStr, compiler.isIdeMode(), compiler.getTypeRegistry(), compiler.getDefaultErrorReporter(), logger_);\n    } catch (IOException e) {\n        compiler.report(JSError.make(Compiler.READ_ERROR, sourceName));\n    }\n    if (root \u003d\u003d null) {\n        root \u003d new Node(Token.BLOCK);\n    } else {\n        compiler.normalizeNodeTypes(root);\n        compiler.annotateCodingConvention(root);\n    }\n    root.putProp(Node.SOURCENAME_PROP, sourceName);\n}",
      "path": "src/com/google/javascript/jscomp/JsAst.java",
      "functionStartLine": 85,
      "functionName": "parse",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}