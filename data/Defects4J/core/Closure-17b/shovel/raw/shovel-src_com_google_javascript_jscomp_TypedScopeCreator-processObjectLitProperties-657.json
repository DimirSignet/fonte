{
  "origin": "codeshovel",
  "repositoryName": "Closure-17b",
  "repositoryPath": "/tmp/Closure-17b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TypedScopeCreator.java",
  "functionName": "processObjectLitProperties",
  "functionId": "$processObjectLitProperties___objLit-Node__objLitType-ObjectType__declareOnOwner-boolean",
  "sourceFilePath": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
  "functionAnnotation": "",
  "functionDoc": "Process an object literal and all the types on it.\n\n@param objLit The OBJECTLIT node.\n@param objLitType The type of the OBJECTLIT node. This might be a named\n    type, because of the lends annotation.\n@param declareOnOwner If true, declare properties on the objLitType as\n    well. If false, the caller should take care of this.\n",
  "functionStartLine": 657,
  "functionEndLine": 687,
  "numCommitsSeen": 300,
  "timeTaken": 8098,
  "changeHistory": [
    "70a5626922ea7e8c98747e22b6986638ba38fadc",
    "f636f23bdef4b27752ca249a28463ec1b6af1f0b",
    "ad20fd0c59903ace8f89f16a52c528951c7615da",
    "c5d7b308ecf260bf6ccf4b20ac256074fc42768f",
    "9614c7c0ffe2418359fe91be2a0e61400142237d",
    "e58030c47800f5842a950cf7ceb40bba5bd1dd23",
    "03ce555bcedcf98d99de1b4f8a6238ba75ee6850",
    "b489cf1f4089225b5ae06b6f30aa82d3438210aa",
    "072fa2d047573d2d1f0187ba4bf76b1afa75031c",
    "7675b68dbd7cfc37b1359fd40be9fdf0b618bc95",
    "70f817ae4f80ac11dd2dfe97babf5896c690fb48",
    "f3d83b7eb7b1e4afbb24ae57e1a57adadbcead42",
    "1bd8d2f0f4f3edcc11aa441f50223967a98bf85d"
  ],
  "changeHistoryShort": {
    "70a5626922ea7e8c98747e22b6986638ba38fadc": "Ydocchange",
    "f636f23bdef4b27752ca249a28463ec1b6af1f0b": "Ymultichange(Yparameterchange,Ybodychange)",
    "ad20fd0c59903ace8f89f16a52c528951c7615da": "Ybodychange",
    "c5d7b308ecf260bf6ccf4b20ac256074fc42768f": "Ybodychange",
    "9614c7c0ffe2418359fe91be2a0e61400142237d": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "e58030c47800f5842a950cf7ceb40bba5bd1dd23": "Ybodychange",
    "03ce555bcedcf98d99de1b4f8a6238ba75ee6850": "Ybodychange",
    "b489cf1f4089225b5ae06b6f30aa82d3438210aa": "Ybodychange",
    "072fa2d047573d2d1f0187ba4bf76b1afa75031c": "Ybodychange",
    "7675b68dbd7cfc37b1359fd40be9fdf0b618bc95": "Ybodychange",
    "70f817ae4f80ac11dd2dfe97babf5896c690fb48": "Ybodychange",
    "f3d83b7eb7b1e4afbb24ae57e1a57adadbcead42": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange,Ydocchange)",
    "1bd8d2f0f4f3edcc11aa441f50223967a98bf85d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "70a5626922ea7e8c98747e22b6986638ba38fadc": {
      "type": "Ydocchange",
      "commitMessage": "\nFix various typos, spelling and grammar errors.\nFixes issue 734. \nContributed by Robert Gust Bardon\n\nR\u003dnicksantos\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d4827\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1979 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/18/12, 11:09 AM",
      "commitName": "70a5626922ea7e8c98747e22b6986638ba38fadc",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "4/25/12, 1:34 PM",
      "commitNameOld": "f412f0c0efd54842b30207c845d65cb826217fd6",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 22.9,
      "commitsBetweenForRepo": 51,
      "commitsBetweenForFile": 1,
      "actualSource": "void processObjectLitProperties(Node objLit, ObjectType objLitType, boolean declareOnOwner) {\n    for (Node keyNode \u003d objLit.getFirstChild(); keyNode !\u003d null; keyNode \u003d keyNode.getNext()) {\n        Node value \u003d keyNode.getFirstChild();\n        String memberName \u003d NodeUtil.getObjectLitKeyName(keyNode);\n        JSDocInfo info \u003d keyNode.getJSDocInfo();\n        JSType valueType \u003d getDeclaredType(keyNode.getSourceFileName(), info, keyNode, value);\n        JSType keyType \u003d objLitType.isEnumType() ? objLitType.toMaybeEnumType().getElementsType() : NodeUtil.getObjectLitKeyTypeFromValueType(keyNode, valueType);\n        String qualifiedName \u003d NodeUtil.getBestLValueName(keyNode);\n        if (qualifiedName !\u003d null) {\n            boolean inferred \u003d keyType \u003d\u003d null;\n            defineSlot(keyNode, objLit, qualifiedName, keyType, inferred);\n        } else if (keyType !\u003d null) {\n            setDeferredType(keyNode, keyType);\n        }\n        if (keyType !\u003d null \u0026\u0026 objLitType !\u003d null \u0026\u0026 declareOnOwner) {\n            boolean isExtern \u003d keyNode.isFromExterns();\n            objLitType.defineDeclaredProperty(memberName, keyType, keyNode);\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 657,
      "functionName": "processObjectLitProperties",
      "functionAnnotation": "",
      "functionDoc": "Process an object literal and all the types on it.\n\n@param objLit The OBJECTLIT node.\n@param objLitType The type of the OBJECTLIT node. This might be a named\n    type, because of the lends annotation.\n@param declareOnOwner If true, declare properties on the objLitType as\n    well. If false, the caller should take care of this.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Process an object literal and all the types on it.\n\n@param objLit The OBJECTLIT node.\n@param objLitType The type of the OBJECTLIT node. This might be a named\n    type, because of the lends annotation.\n@param declareOnOwner If true, declare properties on the objLitType as\n    well. If false, the caller should take crae of this.\n",
        "newValue": "Process an object literal and all the types on it.\n\n@param objLit The OBJECTLIT node.\n@param objLitType The type of the OBJECTLIT node. This might be a named\n    type, because of the lends annotation.\n@param declareOnOwner If true, declare properties on the objLitType as\n    well. If false, the caller should take care of this.\n"
      }
    },
    "f636f23bdef4b27752ca249a28463ec1b6af1f0b": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "\ndefer evaluation of the @lends annotation\nfixes issue 314\n\nR\u003djohnlenz\nDELTA\u003d69  (61 added, 0 deleted, 8 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d4094\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1727 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/17/12, 8:37 AM",
      "commitName": "f636f23bdef4b27752ca249a28463ec1b6af1f0b",
      "commitAuthor": "nicksantos@google.com",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "\ndefer evaluation of the @lends annotation\nfixes issue 314\n\nR\u003djohnlenz\nDELTA\u003d69  (61 added, 0 deleted, 8 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d4094\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1727 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/17/12, 8:37 AM",
          "commitName": "f636f23bdef4b27752ca249a28463ec1b6af1f0b",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "12/1/11, 11:56 AM",
          "commitNameOld": "c2e1d41c876befd2c6b80861b2680685d8f54a5e",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 46.86,
          "commitsBetweenForRepo": 66,
          "commitsBetweenForFile": 1,
          "actualSource": "void processObjectLitProperties(Node objLit, ObjectType objLitType, boolean declareOnOwner) {\n    for (Node keyNode \u003d objLit.getFirstChild(); keyNode !\u003d null; keyNode \u003d keyNode.getNext()) {\n        Node value \u003d keyNode.getFirstChild();\n        String memberName \u003d NodeUtil.getObjectLitKeyName(keyNode);\n        JSDocInfo info \u003d keyNode.getJSDocInfo();\n        JSType valueType \u003d getDeclaredType(keyNode.getSourceFileName(), info, keyNode, value);\n        JSType keyType \u003d objLitType.isEnumType() ? objLitType.toMaybeEnumType().getElementsType() : NodeUtil.getObjectLitKeyTypeFromValueType(keyNode, valueType);\n        String qualifiedName \u003d NodeUtil.getBestLValueName(keyNode);\n        if (qualifiedName !\u003d null) {\n            boolean inferred \u003d keyType \u003d\u003d null;\n            defineSlot(keyNode, objLit, qualifiedName, keyType, inferred);\n        } else if (keyType !\u003d null) {\n            setDeferredType(keyNode, keyType);\n        }\n        if (keyType !\u003d null \u0026\u0026 objLitType !\u003d null \u0026\u0026 declareOnOwner) {\n            boolean isExtern \u003d keyNode.isFromExterns();\n            objLitType.defineDeclaredProperty(memberName, keyType, keyNode);\n        }\n    }\n}",
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
          "functionStartLine": 660,
          "functionName": "processObjectLitProperties",
          "functionAnnotation": "",
          "functionDoc": "Process an object literal and all the types on it.\n\n@param objLit The OBJECTLIT node.\n@param objLitType The type of the OBJECTLIT node. This might be a named\n    type, because of the lends annotation.\n@param declareOnOwner If true, declare properties on the objLitType as\n    well. If false, the caller should take crae of this.\n",
          "diff": "@@ -1,20 +1,20 @@\n-void processObjectLitProperties(NodeTraversal t, Node objLit, ObjectType objLitType, boolean declareOnOwner) {\n+void processObjectLitProperties(Node objLit, ObjectType objLitType, boolean declareOnOwner) {\n     for (Node keyNode \u003d objLit.getFirstChild(); keyNode !\u003d null; keyNode \u003d keyNode.getNext()) {\n         Node value \u003d keyNode.getFirstChild();\n         String memberName \u003d NodeUtil.getObjectLitKeyName(keyNode);\n         JSDocInfo info \u003d keyNode.getJSDocInfo();\n-        JSType valueType \u003d getDeclaredType(t.getSourceName(), info, keyNode, value);\n+        JSType valueType \u003d getDeclaredType(keyNode.getSourceFileName(), info, keyNode, value);\n         JSType keyType \u003d objLitType.isEnumType() ? objLitType.toMaybeEnumType().getElementsType() : NodeUtil.getObjectLitKeyTypeFromValueType(keyNode, valueType);\n         String qualifiedName \u003d NodeUtil.getBestLValueName(keyNode);\n         if (qualifiedName !\u003d null) {\n             boolean inferred \u003d keyType \u003d\u003d null;\n             defineSlot(keyNode, objLit, qualifiedName, keyType, inferred);\n         } else if (keyType !\u003d null) {\n             setDeferredType(keyNode, keyType);\n         }\n         if (keyType !\u003d null \u0026\u0026 objLitType !\u003d null \u0026\u0026 declareOnOwner) {\n-            boolean isExtern \u003d t.getInput() !\u003d null \u0026\u0026 t.getInput().isExtern();\n+            boolean isExtern \u003d keyNode.isFromExterns();\n             objLitType.defineDeclaredProperty(memberName, keyType, keyNode);\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[t-NodeTraversal, objLit-Node, objLitType-ObjectType, declareOnOwner-boolean]",
            "newValue": "[objLit-Node, objLitType-ObjectType, declareOnOwner-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\ndefer evaluation of the @lends annotation\nfixes issue 314\n\nR\u003djohnlenz\nDELTA\u003d69  (61 added, 0 deleted, 8 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d4094\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1727 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/17/12, 8:37 AM",
          "commitName": "f636f23bdef4b27752ca249a28463ec1b6af1f0b",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "12/1/11, 11:56 AM",
          "commitNameOld": "c2e1d41c876befd2c6b80861b2680685d8f54a5e",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 46.86,
          "commitsBetweenForRepo": 66,
          "commitsBetweenForFile": 1,
          "actualSource": "void processObjectLitProperties(Node objLit, ObjectType objLitType, boolean declareOnOwner) {\n    for (Node keyNode \u003d objLit.getFirstChild(); keyNode !\u003d null; keyNode \u003d keyNode.getNext()) {\n        Node value \u003d keyNode.getFirstChild();\n        String memberName \u003d NodeUtil.getObjectLitKeyName(keyNode);\n        JSDocInfo info \u003d keyNode.getJSDocInfo();\n        JSType valueType \u003d getDeclaredType(keyNode.getSourceFileName(), info, keyNode, value);\n        JSType keyType \u003d objLitType.isEnumType() ? objLitType.toMaybeEnumType().getElementsType() : NodeUtil.getObjectLitKeyTypeFromValueType(keyNode, valueType);\n        String qualifiedName \u003d NodeUtil.getBestLValueName(keyNode);\n        if (qualifiedName !\u003d null) {\n            boolean inferred \u003d keyType \u003d\u003d null;\n            defineSlot(keyNode, objLit, qualifiedName, keyType, inferred);\n        } else if (keyType !\u003d null) {\n            setDeferredType(keyNode, keyType);\n        }\n        if (keyType !\u003d null \u0026\u0026 objLitType !\u003d null \u0026\u0026 declareOnOwner) {\n            boolean isExtern \u003d keyNode.isFromExterns();\n            objLitType.defineDeclaredProperty(memberName, keyType, keyNode);\n        }\n    }\n}",
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
          "functionStartLine": 660,
          "functionName": "processObjectLitProperties",
          "functionAnnotation": "",
          "functionDoc": "Process an object literal and all the types on it.\n\n@param objLit The OBJECTLIT node.\n@param objLitType The type of the OBJECTLIT node. This might be a named\n    type, because of the lends annotation.\n@param declareOnOwner If true, declare properties on the objLitType as\n    well. If false, the caller should take crae of this.\n",
          "diff": "@@ -1,20 +1,20 @@\n-void processObjectLitProperties(NodeTraversal t, Node objLit, ObjectType objLitType, boolean declareOnOwner) {\n+void processObjectLitProperties(Node objLit, ObjectType objLitType, boolean declareOnOwner) {\n     for (Node keyNode \u003d objLit.getFirstChild(); keyNode !\u003d null; keyNode \u003d keyNode.getNext()) {\n         Node value \u003d keyNode.getFirstChild();\n         String memberName \u003d NodeUtil.getObjectLitKeyName(keyNode);\n         JSDocInfo info \u003d keyNode.getJSDocInfo();\n-        JSType valueType \u003d getDeclaredType(t.getSourceName(), info, keyNode, value);\n+        JSType valueType \u003d getDeclaredType(keyNode.getSourceFileName(), info, keyNode, value);\n         JSType keyType \u003d objLitType.isEnumType() ? objLitType.toMaybeEnumType().getElementsType() : NodeUtil.getObjectLitKeyTypeFromValueType(keyNode, valueType);\n         String qualifiedName \u003d NodeUtil.getBestLValueName(keyNode);\n         if (qualifiedName !\u003d null) {\n             boolean inferred \u003d keyType \u003d\u003d null;\n             defineSlot(keyNode, objLit, qualifiedName, keyType, inferred);\n         } else if (keyType !\u003d null) {\n             setDeferredType(keyNode, keyType);\n         }\n         if (keyType !\u003d null \u0026\u0026 objLitType !\u003d null \u0026\u0026 declareOnOwner) {\n-            boolean isExtern \u003d t.getInput() !\u003d null \u0026\u0026 t.getInput().isExtern();\n+            boolean isExtern \u003d keyNode.isFromExterns();\n             objLitType.defineDeclaredProperty(memberName, keyType, keyNode);\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "ad20fd0c59903ace8f89f16a52c528951c7615da": {
      "type": "Ybodychange",
      "commitMessage": "\nSome refactoring and tests based on comments in other cls\n\nR\u003djohnlenz\nDELTA\u003d125  (80 added, 42 deleted, 3 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3707\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1599 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/15/11, 8:57 AM",
      "commitName": "ad20fd0c59903ace8f89f16a52c528951c7615da",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "11/14/11, 6:13 PM",
      "commitNameOld": "39f629a8cfaab37da55288010640d7e516000b1f",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 0.61,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "void processObjectLitProperties(NodeTraversal t, Node objLit, ObjectType objLitType, boolean declareOnOwner) {\n    for (Node keyNode \u003d objLit.getFirstChild(); keyNode !\u003d null; keyNode \u003d keyNode.getNext()) {\n        Node value \u003d keyNode.getFirstChild();\n        String memberName \u003d NodeUtil.getObjectLitKeyName(keyNode);\n        JSDocInfo info \u003d keyNode.getJSDocInfo();\n        JSType valueType \u003d getDeclaredType(t.getSourceName(), info, keyNode, value);\n        JSType keyType \u003d objLitType.isEnumType() ? objLitType.toMaybeEnumType().getElementsType() : NodeUtil.getObjectLitKeyTypeFromValueType(keyNode, valueType);\n        String qualifiedName \u003d NodeUtil.getBestLValueName(keyNode);\n        if (qualifiedName !\u003d null) {\n            boolean inferred \u003d keyType \u003d\u003d null;\n            defineSlot(keyNode, objLit, qualifiedName, keyType, inferred);\n        } else if (keyType !\u003d null) {\n            setDeferredType(keyNode, keyType);\n        }\n        if (keyType !\u003d null \u0026\u0026 objLitType !\u003d null \u0026\u0026 declareOnOwner) {\n            boolean isExtern \u003d t.getInput() !\u003d null \u0026\u0026 t.getInput().isExtern();\n            objLitType.defineDeclaredProperty(memberName, keyType, keyNode);\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 630,
      "functionName": "processObjectLitProperties",
      "functionAnnotation": "",
      "functionDoc": "Process an object literal and all the types on it.\n\n@param objLit The OBJECTLIT node.\n@param objLitType The type of the OBJECTLIT node. This might be a named\n    type, because of the lends annotation.\n@param declareOnOwner If true, declare properties on the objLitType as\n    well. If false, the caller should take crae of this.\n",
      "diff": "@@ -1,19 +1,20 @@\n void processObjectLitProperties(NodeTraversal t, Node objLit, ObjectType objLitType, boolean declareOnOwner) {\n     for (Node keyNode \u003d objLit.getFirstChild(); keyNode !\u003d null; keyNode \u003d keyNode.getNext()) {\n         Node value \u003d keyNode.getFirstChild();\n         String memberName \u003d NodeUtil.getObjectLitKeyName(keyNode);\n         JSDocInfo info \u003d keyNode.getJSDocInfo();\n         JSType valueType \u003d getDeclaredType(t.getSourceName(), info, keyNode, value);\n         JSType keyType \u003d objLitType.isEnumType() ? objLitType.toMaybeEnumType().getElementsType() : NodeUtil.getObjectLitKeyTypeFromValueType(keyNode, valueType);\n         String qualifiedName \u003d NodeUtil.getBestLValueName(keyNode);\n         if (qualifiedName !\u003d null) {\n-            defineSlot(keyNode, objLit, qualifiedName, keyType, keyType \u003d\u003d null);\n+            boolean inferred \u003d keyType \u003d\u003d null;\n+            defineSlot(keyNode, objLit, qualifiedName, keyType, inferred);\n         } else if (keyType !\u003d null) {\n             setDeferredType(keyNode, keyType);\n         }\n         if (keyType !\u003d null \u0026\u0026 objLitType !\u003d null \u0026\u0026 declareOnOwner) {\n             boolean isExtern \u003d t.getInput() !\u003d null \u0026\u0026 t.getInput().isExtern();\n             objLitType.defineDeclaredProperty(memberName, keyType, keyNode);\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c5d7b308ecf260bf6ccf4b20ac256074fc42768f": {
      "type": "Ybodychange",
      "commitMessage": "\nBetter type inference on object literal properties\n\nR\u003dacleung\nDELTA\u003d99  (70 added, 6 deleted, 23 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3703\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1595 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/14/11, 3:03 PM",
      "commitName": "c5d7b308ecf260bf6ccf4b20ac256074fc42768f",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "11/14/11, 9:12 AM",
      "commitNameOld": "46da17d59abb4f9c48b6ffd31601c212490b970b",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.24,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "void processObjectLitProperties(NodeTraversal t, Node objLit, ObjectType objLitType, boolean declareOnOwner) {\n    for (Node keyNode \u003d objLit.getFirstChild(); keyNode !\u003d null; keyNode \u003d keyNode.getNext()) {\n        Node value \u003d keyNode.getFirstChild();\n        String memberName \u003d NodeUtil.getObjectLitKeyName(keyNode);\n        JSDocInfo info \u003d keyNode.getJSDocInfo();\n        JSType valueType \u003d getDeclaredType(t.getSourceName(), info, keyNode, value);\n        JSType keyType \u003d objLitType.isEnumType() ? objLitType.toMaybeEnumType().getElementsType() : NodeUtil.getObjectLitKeyTypeFromValueType(keyNode, valueType);\n        String qualifiedName \u003d NodeUtil.getBestLValueName(keyNode);\n        if (qualifiedName !\u003d null) {\n            defineSlot(keyNode, objLit, qualifiedName, keyType, keyType \u003d\u003d null);\n        } else if (keyType !\u003d null) {\n            setDeferredType(keyNode, keyType);\n        }\n        if (keyType !\u003d null \u0026\u0026 objLitType !\u003d null \u0026\u0026 declareOnOwner) {\n            boolean isExtern \u003d t.getInput() !\u003d null \u0026\u0026 t.getInput().isExtern();\n            objLitType.defineDeclaredProperty(memberName, keyType, keyNode);\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 630,
      "functionName": "processObjectLitProperties",
      "functionAnnotation": "",
      "functionDoc": "Process an object literal and all the types on it.\n\n@param objLit The OBJECTLIT node.\n@param objLitType The type of the OBJECTLIT node. This might be a named\n    type, because of the lends annotation.\n@param declareOnOwner If true, declare properties on the objLitType as\n    well. If false, the caller should take crae of this.\n",
      "diff": "@@ -1,21 +1,19 @@\n void processObjectLitProperties(NodeTraversal t, Node objLit, ObjectType objLitType, boolean declareOnOwner) {\n     for (Node keyNode \u003d objLit.getFirstChild(); keyNode !\u003d null; keyNode \u003d keyNode.getNext()) {\n         Node value \u003d keyNode.getFirstChild();\n         String memberName \u003d NodeUtil.getObjectLitKeyName(keyNode);\n         JSDocInfo info \u003d keyNode.getJSDocInfo();\n         JSType valueType \u003d getDeclaredType(t.getSourceName(), info, keyNode, value);\n         JSType keyType \u003d objLitType.isEnumType() ? objLitType.toMaybeEnumType().getElementsType() : NodeUtil.getObjectLitKeyTypeFromValueType(keyNode, valueType);\n-        if (keyType !\u003d null) {\n-            String qualifiedName \u003d NodeUtil.getBestLValueName(keyNode);\n-            if (qualifiedName !\u003d null) {\n-                defineSlot(keyNode, objLit, qualifiedName, keyType, false);\n-            } else {\n-                setDeferredType(keyNode, keyType);\n-            }\n-            if (objLitType !\u003d null \u0026\u0026 declareOnOwner) {\n-                boolean isExtern \u003d t.getInput() !\u003d null \u0026\u0026 t.getInput().isExtern();\n-                objLitType.defineDeclaredProperty(memberName, keyType, keyNode);\n-            }\n+        String qualifiedName \u003d NodeUtil.getBestLValueName(keyNode);\n+        if (qualifiedName !\u003d null) {\n+            defineSlot(keyNode, objLit, qualifiedName, keyType, keyType \u003d\u003d null);\n+        } else if (keyType !\u003d null) {\n+            setDeferredType(keyNode, keyType);\n+        }\n+        if (keyType !\u003d null \u0026\u0026 objLitType !\u003d null \u0026\u0026 declareOnOwner) {\n+            boolean isExtern \u003d t.getInput() !\u003d null \u0026\u0026 t.getInput().isExtern();\n+            objLitType.defineDeclaredProperty(memberName, keyType, keyNode);\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9614c7c0ffe2418359fe91be2a0e61400142237d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "\nremove some special-case code for enums\nnow that we handle object literals properly, we can just\nuse the normal checks\n\nR\u003dacleung\nDELTA\u003d137  (46 added, 26 deleted, 65 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3459\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1509 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/12/11, 8:07 PM",
      "commitName": "9614c7c0ffe2418359fe91be2a0e61400142237d",
      "commitAuthor": "nicksantos@google.com",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "\nremove some special-case code for enums\nnow that we handle object literals properly, we can just\nuse the normal checks\n\nR\u003dacleung\nDELTA\u003d137  (46 added, 26 deleted, 65 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3459\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1509 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "10/12/11, 8:07 PM",
          "commitName": "9614c7c0ffe2418359fe91be2a0e61400142237d",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "10/6/11, 1:45 PM",
          "commitNameOld": "c42af07351fdce0bcab4b844c2a887eeca27d1a7",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 6.27,
          "commitsBetweenForRepo": 13,
          "commitsBetweenForFile": 1,
          "actualSource": "void processObjectLitProperties(NodeTraversal t, Node objLit, ObjectType objLitType, boolean declareOnOwner) {\n    for (Node keyNode \u003d objLit.getFirstChild(); keyNode !\u003d null; keyNode \u003d keyNode.getNext()) {\n        Node value \u003d keyNode.getFirstChild();\n        String memberName \u003d NodeUtil.getObjectLitKeyName(keyNode);\n        JSDocInfo info \u003d keyNode.getJSDocInfo();\n        JSType valueType \u003d getDeclaredType(t.getSourceName(), info, keyNode, value);\n        JSType keyType \u003d objLitType.isEnumType() ? objLitType.toMaybeEnumType().getElementsType() : NodeUtil.getObjectLitKeyTypeFromValueType(keyNode, valueType);\n        if (keyType !\u003d null) {\n            String qualifiedName \u003d NodeUtil.getBestLValueName(keyNode);\n            if (qualifiedName !\u003d null) {\n                defineSlot(keyNode, objLit, qualifiedName, keyType, false);\n            } else {\n                setDeferredType(keyNode, keyType);\n            }\n            if (objLitType !\u003d null \u0026\u0026 declareOnOwner) {\n                boolean isExtern \u003d t.getInput() !\u003d null \u0026\u0026 t.getInput().isExtern();\n                objLitType.defineDeclaredProperty(memberName, keyType, keyNode);\n            }\n        }\n    }\n}",
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
          "functionStartLine": 633,
          "functionName": "processObjectLitProperties",
          "functionAnnotation": "",
          "functionDoc": "Process an object literal and all the types on it.\n\n@param objLit The OBJECTLIT node.\n@param objLitType The type of the OBJECTLIT node. This might be a named\n    type, because of the lends annotation.\n@param declareOnOwner If true, declare properties on the objLitType as\n    well. If false, the caller should take crae of this.\n",
          "diff": "@@ -1,21 +1,21 @@\n-void processObjectLitProperties(NodeTraversal t, Node objLit, ObjectType objLitType) {\n+void processObjectLitProperties(NodeTraversal t, Node objLit, ObjectType objLitType, boolean declareOnOwner) {\n     for (Node keyNode \u003d objLit.getFirstChild(); keyNode !\u003d null; keyNode \u003d keyNode.getNext()) {\n         Node value \u003d keyNode.getFirstChild();\n         String memberName \u003d NodeUtil.getObjectLitKeyName(keyNode);\n         JSDocInfo info \u003d keyNode.getJSDocInfo();\n         JSType valueType \u003d getDeclaredType(t.getSourceName(), info, keyNode, value);\n-        JSType keyType \u003d NodeUtil.getObjectLitKeyTypeFromValueType(keyNode, valueType);\n+        JSType keyType \u003d objLitType.isEnumType() ? objLitType.toMaybeEnumType().getElementsType() : NodeUtil.getObjectLitKeyTypeFromValueType(keyNode, valueType);\n         if (keyType !\u003d null) {\n             String qualifiedName \u003d NodeUtil.getBestLValueName(keyNode);\n             if (qualifiedName !\u003d null) {\n                 defineSlot(keyNode, objLit, qualifiedName, keyType, false);\n             } else {\n                 setDeferredType(keyNode, keyType);\n             }\n-            if (objLitType !\u003d null) {\n+            if (objLitType !\u003d null \u0026\u0026 declareOnOwner) {\n                 boolean isExtern \u003d t.getInput() !\u003d null \u0026\u0026 t.getInput().isExtern();\n                 objLitType.defineDeclaredProperty(memberName, keyType, keyNode);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[t-NodeTraversal, objLit-Node, objLitType-ObjectType]",
            "newValue": "[t-NodeTraversal, objLit-Node, objLitType-ObjectType, declareOnOwner-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nremove some special-case code for enums\nnow that we handle object literals properly, we can just\nuse the normal checks\n\nR\u003dacleung\nDELTA\u003d137  (46 added, 26 deleted, 65 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3459\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1509 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "10/12/11, 8:07 PM",
          "commitName": "9614c7c0ffe2418359fe91be2a0e61400142237d",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "10/6/11, 1:45 PM",
          "commitNameOld": "c42af07351fdce0bcab4b844c2a887eeca27d1a7",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 6.27,
          "commitsBetweenForRepo": 13,
          "commitsBetweenForFile": 1,
          "actualSource": "void processObjectLitProperties(NodeTraversal t, Node objLit, ObjectType objLitType, boolean declareOnOwner) {\n    for (Node keyNode \u003d objLit.getFirstChild(); keyNode !\u003d null; keyNode \u003d keyNode.getNext()) {\n        Node value \u003d keyNode.getFirstChild();\n        String memberName \u003d NodeUtil.getObjectLitKeyName(keyNode);\n        JSDocInfo info \u003d keyNode.getJSDocInfo();\n        JSType valueType \u003d getDeclaredType(t.getSourceName(), info, keyNode, value);\n        JSType keyType \u003d objLitType.isEnumType() ? objLitType.toMaybeEnumType().getElementsType() : NodeUtil.getObjectLitKeyTypeFromValueType(keyNode, valueType);\n        if (keyType !\u003d null) {\n            String qualifiedName \u003d NodeUtil.getBestLValueName(keyNode);\n            if (qualifiedName !\u003d null) {\n                defineSlot(keyNode, objLit, qualifiedName, keyType, false);\n            } else {\n                setDeferredType(keyNode, keyType);\n            }\n            if (objLitType !\u003d null \u0026\u0026 declareOnOwner) {\n                boolean isExtern \u003d t.getInput() !\u003d null \u0026\u0026 t.getInput().isExtern();\n                objLitType.defineDeclaredProperty(memberName, keyType, keyNode);\n            }\n        }\n    }\n}",
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
          "functionStartLine": 633,
          "functionName": "processObjectLitProperties",
          "functionAnnotation": "",
          "functionDoc": "Process an object literal and all the types on it.\n\n@param objLit The OBJECTLIT node.\n@param objLitType The type of the OBJECTLIT node. This might be a named\n    type, because of the lends annotation.\n@param declareOnOwner If true, declare properties on the objLitType as\n    well. If false, the caller should take crae of this.\n",
          "diff": "@@ -1,21 +1,21 @@\n-void processObjectLitProperties(NodeTraversal t, Node objLit, ObjectType objLitType) {\n+void processObjectLitProperties(NodeTraversal t, Node objLit, ObjectType objLitType, boolean declareOnOwner) {\n     for (Node keyNode \u003d objLit.getFirstChild(); keyNode !\u003d null; keyNode \u003d keyNode.getNext()) {\n         Node value \u003d keyNode.getFirstChild();\n         String memberName \u003d NodeUtil.getObjectLitKeyName(keyNode);\n         JSDocInfo info \u003d keyNode.getJSDocInfo();\n         JSType valueType \u003d getDeclaredType(t.getSourceName(), info, keyNode, value);\n-        JSType keyType \u003d NodeUtil.getObjectLitKeyTypeFromValueType(keyNode, valueType);\n+        JSType keyType \u003d objLitType.isEnumType() ? objLitType.toMaybeEnumType().getElementsType() : NodeUtil.getObjectLitKeyTypeFromValueType(keyNode, valueType);\n         if (keyType !\u003d null) {\n             String qualifiedName \u003d NodeUtil.getBestLValueName(keyNode);\n             if (qualifiedName !\u003d null) {\n                 defineSlot(keyNode, objLit, qualifiedName, keyType, false);\n             } else {\n                 setDeferredType(keyNode, keyType);\n             }\n-            if (objLitType !\u003d null) {\n+            if (objLitType !\u003d null \u0026\u0026 declareOnOwner) {\n                 boolean isExtern \u003d t.getInput() !\u003d null \u0026\u0026 t.getInput().isExtern();\n                 objLitType.defineDeclaredProperty(memberName, keyType, keyNode);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "\nremove some special-case code for enums\nnow that we handle object literals properly, we can just\nuse the normal checks\n\nR\u003dacleung\nDELTA\u003d137  (46 added, 26 deleted, 65 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3459\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1509 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "10/12/11, 8:07 PM",
          "commitName": "9614c7c0ffe2418359fe91be2a0e61400142237d",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "10/6/11, 1:45 PM",
          "commitNameOld": "c42af07351fdce0bcab4b844c2a887eeca27d1a7",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 6.27,
          "commitsBetweenForRepo": 13,
          "commitsBetweenForFile": 1,
          "actualSource": "void processObjectLitProperties(NodeTraversal t, Node objLit, ObjectType objLitType, boolean declareOnOwner) {\n    for (Node keyNode \u003d objLit.getFirstChild(); keyNode !\u003d null; keyNode \u003d keyNode.getNext()) {\n        Node value \u003d keyNode.getFirstChild();\n        String memberName \u003d NodeUtil.getObjectLitKeyName(keyNode);\n        JSDocInfo info \u003d keyNode.getJSDocInfo();\n        JSType valueType \u003d getDeclaredType(t.getSourceName(), info, keyNode, value);\n        JSType keyType \u003d objLitType.isEnumType() ? objLitType.toMaybeEnumType().getElementsType() : NodeUtil.getObjectLitKeyTypeFromValueType(keyNode, valueType);\n        if (keyType !\u003d null) {\n            String qualifiedName \u003d NodeUtil.getBestLValueName(keyNode);\n            if (qualifiedName !\u003d null) {\n                defineSlot(keyNode, objLit, qualifiedName, keyType, false);\n            } else {\n                setDeferredType(keyNode, keyType);\n            }\n            if (objLitType !\u003d null \u0026\u0026 declareOnOwner) {\n                boolean isExtern \u003d t.getInput() !\u003d null \u0026\u0026 t.getInput().isExtern();\n                objLitType.defineDeclaredProperty(memberName, keyType, keyNode);\n            }\n        }\n    }\n}",
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
          "functionStartLine": 633,
          "functionName": "processObjectLitProperties",
          "functionAnnotation": "",
          "functionDoc": "Process an object literal and all the types on it.\n\n@param objLit The OBJECTLIT node.\n@param objLitType The type of the OBJECTLIT node. This might be a named\n    type, because of the lends annotation.\n@param declareOnOwner If true, declare properties on the objLitType as\n    well. If false, the caller should take crae of this.\n",
          "diff": "@@ -1,21 +1,21 @@\n-void processObjectLitProperties(NodeTraversal t, Node objLit, ObjectType objLitType) {\n+void processObjectLitProperties(NodeTraversal t, Node objLit, ObjectType objLitType, boolean declareOnOwner) {\n     for (Node keyNode \u003d objLit.getFirstChild(); keyNode !\u003d null; keyNode \u003d keyNode.getNext()) {\n         Node value \u003d keyNode.getFirstChild();\n         String memberName \u003d NodeUtil.getObjectLitKeyName(keyNode);\n         JSDocInfo info \u003d keyNode.getJSDocInfo();\n         JSType valueType \u003d getDeclaredType(t.getSourceName(), info, keyNode, value);\n-        JSType keyType \u003d NodeUtil.getObjectLitKeyTypeFromValueType(keyNode, valueType);\n+        JSType keyType \u003d objLitType.isEnumType() ? objLitType.toMaybeEnumType().getElementsType() : NodeUtil.getObjectLitKeyTypeFromValueType(keyNode, valueType);\n         if (keyType !\u003d null) {\n             String qualifiedName \u003d NodeUtil.getBestLValueName(keyNode);\n             if (qualifiedName !\u003d null) {\n                 defineSlot(keyNode, objLit, qualifiedName, keyType, false);\n             } else {\n                 setDeferredType(keyNode, keyType);\n             }\n-            if (objLitType !\u003d null) {\n+            if (objLitType !\u003d null \u0026\u0026 declareOnOwner) {\n                 boolean isExtern \u003d t.getInput() !\u003d null \u0026\u0026 t.getInput().isExtern();\n                 objLitType.defineDeclaredProperty(memberName, keyType, keyNode);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Process an object literal and all the types on it.\n\n@param objLit The OBJECTLIT node.\n@param objLitType The type of the OBJECTLIT node. This might be a named\n    type, because of the lends annotation.\n",
            "newValue": "Process an object literal and all the types on it.\n\n@param objLit The OBJECTLIT node.\n@param objLitType The type of the OBJECTLIT node. This might be a named\n    type, because of the lends annotation.\n@param declareOnOwner If true, declare properties on the objLitType as\n    well. If false, the caller should take crae of this.\n"
          }
        }
      ]
    },
    "e58030c47800f5842a950cf7ceb40bba5bd1dd23": {
      "type": "Ybodychange",
      "commitMessage": "\nFirst crack at a new js indexer.\nOnly about 10% of the tests pass, but that\u0027s 10 better than 0\nwoohoo!\n\nR\u003dacleung,stevey\nDELTA\u003d1067  (523 added, 183 deleted, 361 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2897\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1326 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/4/11, 8:56 AM",
      "commitName": "e58030c47800f5842a950cf7ceb40bba5bd1dd23",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "8/1/11, 10:56 AM",
      "commitNameOld": "5912a2fb9367a461f5b86f6e42704773f849e464",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 2.92,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "void processObjectLitProperties(NodeTraversal t, Node objLit, ObjectType objLitType) {\n    for (Node keyNode \u003d objLit.getFirstChild(); keyNode !\u003d null; keyNode \u003d keyNode.getNext()) {\n        Node value \u003d keyNode.getFirstChild();\n        String memberName \u003d NodeUtil.getObjectLitKeyName(keyNode);\n        JSDocInfo info \u003d keyNode.getJSDocInfo();\n        JSType valueType \u003d getDeclaredType(t.getSourceName(), info, keyNode, value);\n        JSType keyType \u003d NodeUtil.getObjectLitKeyTypeFromValueType(keyNode, valueType);\n        if (keyType !\u003d null) {\n            String qualifiedName \u003d NodeUtil.getBestLValueName(keyNode);\n            if (qualifiedName !\u003d null) {\n                defineSlot(keyNode, objLit, qualifiedName, keyType, false);\n            } else {\n                setDeferredType(keyNode, keyType);\n            }\n            if (objLitType !\u003d null) {\n                boolean isExtern \u003d t.getInput() !\u003d null \u0026\u0026 t.getInput().isExtern();\n                objLitType.defineDeclaredProperty(memberName, keyType, keyNode);\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 597,
      "functionName": "processObjectLitProperties",
      "functionAnnotation": "",
      "functionDoc": "Process an object literal and all the types on it.\n\n@param objLit The OBJECTLIT node.\n@param objLitType The type of the OBJECTLIT node. This might be a named\n    type, because of the lends annotation.\n",
      "diff": "@@ -1,21 +1,21 @@\n void processObjectLitProperties(NodeTraversal t, Node objLit, ObjectType objLitType) {\n     for (Node keyNode \u003d objLit.getFirstChild(); keyNode !\u003d null; keyNode \u003d keyNode.getNext()) {\n         Node value \u003d keyNode.getFirstChild();\n         String memberName \u003d NodeUtil.getObjectLitKeyName(keyNode);\n         JSDocInfo info \u003d keyNode.getJSDocInfo();\n         JSType valueType \u003d getDeclaredType(t.getSourceName(), info, keyNode, value);\n         JSType keyType \u003d NodeUtil.getObjectLitKeyTypeFromValueType(keyNode, valueType);\n         if (keyType !\u003d null) {\n-            String qualifiedName \u003d getBestLValueName(keyNode);\n+            String qualifiedName \u003d NodeUtil.getBestLValueName(keyNode);\n             if (qualifiedName !\u003d null) {\n                 defineSlot(keyNode, objLit, qualifiedName, keyType, false);\n             } else {\n                 setDeferredType(keyNode, keyType);\n             }\n             if (objLitType !\u003d null) {\n                 boolean isExtern \u003d t.getInput() !\u003d null \u0026\u0026 t.getInput().isExtern();\n                 objLitType.defineDeclaredProperty(memberName, keyType, keyNode);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "03ce555bcedcf98d99de1b4f8a6238ba75ee6850": {
      "type": "Ybodychange",
      "commitMessage": "\nSimplify the type system a bit by pulling extern info off the nodes\n\nR\u003djohnlenz\nDELTA\u003d171  (4 added, 42 deleted, 125 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2500\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1242 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/1/11, 2:00 PM",
      "commitName": "03ce555bcedcf98d99de1b4f8a6238ba75ee6850",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "6/2/11, 9:10 AM",
      "commitNameOld": "e2da3b80158f6df8377e95ba54da85eb286e63d4",
      "commitAuthorOld": "bashir@google.com",
      "daysBetweenCommits": 29.2,
      "commitsBetweenForRepo": 84,
      "commitsBetweenForFile": 1,
      "actualSource": "void processObjectLitProperties(NodeTraversal t, Node objLit, ObjectType objLitType) {\n    for (Node keyNode \u003d objLit.getFirstChild(); keyNode !\u003d null; keyNode \u003d keyNode.getNext()) {\n        Node value \u003d keyNode.getFirstChild();\n        String memberName \u003d NodeUtil.getObjectLitKeyName(keyNode);\n        JSDocInfo info \u003d keyNode.getJSDocInfo();\n        JSType valueType \u003d getDeclaredType(t.getSourceName(), info, keyNode, value);\n        JSType keyType \u003d NodeUtil.getObjectLitKeyTypeFromValueType(keyNode, valueType);\n        if (keyType !\u003d null) {\n            String qualifiedName \u003d getBestLValueName(keyNode);\n            if (qualifiedName !\u003d null) {\n                defineSlot(keyNode, objLit, qualifiedName, keyType, false);\n            } else {\n                setDeferredType(keyNode, keyType);\n            }\n            if (objLitType !\u003d null) {\n                boolean isExtern \u003d t.getInput() !\u003d null \u0026\u0026 t.getInput().isExtern();\n                objLitType.defineDeclaredProperty(memberName, keyType, keyNode);\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 616,
      "functionName": "processObjectLitProperties",
      "functionAnnotation": "",
      "functionDoc": "Process an object literal and all the types on it.\n\n@param objLit The OBJECTLIT node.\n@param objLitType The type of the OBJECTLIT node. This might be a named\n    type, because of the lends annotation.\n",
      "diff": "@@ -1,21 +1,21 @@\n void processObjectLitProperties(NodeTraversal t, Node objLit, ObjectType objLitType) {\n     for (Node keyNode \u003d objLit.getFirstChild(); keyNode !\u003d null; keyNode \u003d keyNode.getNext()) {\n         Node value \u003d keyNode.getFirstChild();\n         String memberName \u003d NodeUtil.getObjectLitKeyName(keyNode);\n         JSDocInfo info \u003d keyNode.getJSDocInfo();\n         JSType valueType \u003d getDeclaredType(t.getSourceName(), info, keyNode, value);\n         JSType keyType \u003d NodeUtil.getObjectLitKeyTypeFromValueType(keyNode, valueType);\n         if (keyType !\u003d null) {\n             String qualifiedName \u003d getBestLValueName(keyNode);\n             if (qualifiedName !\u003d null) {\n                 defineSlot(keyNode, objLit, qualifiedName, keyType, false);\n             } else {\n                 setDeferredType(keyNode, keyType);\n             }\n             if (objLitType !\u003d null) {\n                 boolean isExtern \u003d t.getInput() !\u003d null \u0026\u0026 t.getInput().isExtern();\n-                objLitType.defineDeclaredProperty(memberName, keyType, isExtern, keyNode);\n+                objLitType.defineDeclaredProperty(memberName, keyType, keyNode);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b489cf1f4089225b5ae06b6f30aa82d3438210aa": {
      "type": "Ybodychange",
      "commitMessage": "\nFix some bugs by removing redundant code.\n\nR\u003djohnlenz\nDELTA\u003d61  (4 added, 34 deleted, 23 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d667\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@816 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/24/11, 1:22 PM",
      "commitName": "b489cf1f4089225b5ae06b6f30aa82d3438210aa",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "2/16/11, 8:38 PM",
      "commitNameOld": "072fa2d047573d2d1f0187ba4bf76b1afa75031c",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 7.7,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "actualSource": "void processObjectLitProperties(NodeTraversal t, Node objLit, ObjectType objLitType) {\n    for (Node keyNode \u003d objLit.getFirstChild(); keyNode !\u003d null; keyNode \u003d keyNode.getNext()) {\n        Node value \u003d keyNode.getFirstChild();\n        String memberName \u003d NodeUtil.getObjectLitKeyName(keyNode);\n        JSDocInfo info \u003d keyNode.getJSDocInfo();\n        JSType valueType \u003d getDeclaredType(t.getSourceName(), info, keyNode, value);\n        JSType keyType \u003d NodeUtil.getObjectLitKeyTypeFromValueType(keyNode, valueType);\n        if (keyType !\u003d null) {\n            String qualifiedName \u003d getBestLValueName(keyNode);\n            if (qualifiedName !\u003d null) {\n                defineSlot(keyNode, objLit, qualifiedName, keyType, false);\n            } else {\n                setDeferredType(keyNode, keyType);\n            }\n            if (objLitType !\u003d null) {\n                boolean isExtern \u003d t.getInput() !\u003d null \u0026\u0026 t.getInput().isExtern();\n                objLitType.defineDeclaredProperty(memberName, keyType, isExtern, keyNode);\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 567,
      "functionName": "processObjectLitProperties",
      "functionAnnotation": "",
      "functionDoc": "Process an object literal and all the types on it.\n\n@param objLit The OBJECTLIT node.\n@param objLitType The type of the OBJECTLIT node. This might be a named\n    type, because of the lends annotation.\n",
      "diff": "@@ -1,21 +1,21 @@\n void processObjectLitProperties(NodeTraversal t, Node objLit, ObjectType objLitType) {\n     for (Node keyNode \u003d objLit.getFirstChild(); keyNode !\u003d null; keyNode \u003d keyNode.getNext()) {\n         Node value \u003d keyNode.getFirstChild();\n         String memberName \u003d NodeUtil.getObjectLitKeyName(keyNode);\n         JSDocInfo info \u003d keyNode.getJSDocInfo();\n-        JSType valueType \u003d getDeclaredPropType(t, info, keyNode, value);\n+        JSType valueType \u003d getDeclaredType(t.getSourceName(), info, keyNode, value);\n         JSType keyType \u003d NodeUtil.getObjectLitKeyTypeFromValueType(keyNode, valueType);\n         if (keyType !\u003d null) {\n             String qualifiedName \u003d getBestLValueName(keyNode);\n             if (qualifiedName !\u003d null) {\n                 defineSlot(keyNode, objLit, qualifiedName, keyType, false);\n             } else {\n                 setDeferredType(keyNode, keyType);\n             }\n             if (objLitType !\u003d null) {\n                 boolean isExtern \u003d t.getInput() !\u003d null \u0026\u0026 t.getInput().isExtern();\n                 objLitType.defineDeclaredProperty(memberName, keyType, isExtern, keyNode);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "072fa2d047573d2d1f0187ba4bf76b1afa75031c": {
      "type": "Ybodychange",
      "commitMessage": "\nWhen a property of a named object literal is declared,\ndeclare the qualified name of that property.\n\nR\u003djohnlenz\nDELTA\u003d82  (58 added, 3 deleted, 21 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d546\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@793 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/16/11, 8:38 PM",
      "commitName": "072fa2d047573d2d1f0187ba4bf76b1afa75031c",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "2/1/11, 11:22 AM",
      "commitNameOld": "7675b68dbd7cfc37b1359fd40be9fdf0b618bc95",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 15.39,
      "commitsBetweenForRepo": 49,
      "commitsBetweenForFile": 1,
      "actualSource": "void processObjectLitProperties(NodeTraversal t, Node objLit, ObjectType objLitType) {\n    for (Node keyNode \u003d objLit.getFirstChild(); keyNode !\u003d null; keyNode \u003d keyNode.getNext()) {\n        Node value \u003d keyNode.getFirstChild();\n        String memberName \u003d NodeUtil.getObjectLitKeyName(keyNode);\n        JSDocInfo info \u003d keyNode.getJSDocInfo();\n        JSType valueType \u003d getDeclaredPropType(t, info, keyNode, value);\n        JSType keyType \u003d NodeUtil.getObjectLitKeyTypeFromValueType(keyNode, valueType);\n        if (keyType !\u003d null) {\n            String qualifiedName \u003d getBestLValueName(keyNode);\n            if (qualifiedName !\u003d null) {\n                defineSlot(keyNode, objLit, qualifiedName, keyType, false);\n            } else {\n                setDeferredType(keyNode, keyType);\n            }\n            if (objLitType !\u003d null) {\n                boolean isExtern \u003d t.getInput() !\u003d null \u0026\u0026 t.getInput().isExtern();\n                objLitType.defineDeclaredProperty(memberName, keyType, isExtern, keyNode);\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 567,
      "functionName": "processObjectLitProperties",
      "functionAnnotation": "",
      "functionDoc": "Process an object literal and all the types on it.\n\n@param objLit The OBJECTLIT node.\n@param objLitType The type of the OBJECTLIT node. This might be a named\n    type, because of the lends annotation.\n",
      "diff": "@@ -1,15 +1,21 @@\n void processObjectLitProperties(NodeTraversal t, Node objLit, ObjectType objLitType) {\n-    for (Node name \u003d objLit.getFirstChild(); name !\u003d null; name \u003d name.getNext()) {\n-        Node value \u003d name.getFirstChild();\n-        String memberName \u003d NodeUtil.getObjectLitKeyName(name);\n-        JSType valueType \u003d getDeclaredPropType(t, name.getJSDocInfo(), name, value);\n-        JSType keyType \u003d NodeUtil.getObjectLitKeyTypeFromValueType(name, valueType);\n+    for (Node keyNode \u003d objLit.getFirstChild(); keyNode !\u003d null; keyNode \u003d keyNode.getNext()) {\n+        Node value \u003d keyNode.getFirstChild();\n+        String memberName \u003d NodeUtil.getObjectLitKeyName(keyNode);\n+        JSDocInfo info \u003d keyNode.getJSDocInfo();\n+        JSType valueType \u003d getDeclaredPropType(t, info, keyNode, value);\n+        JSType keyType \u003d NodeUtil.getObjectLitKeyTypeFromValueType(keyNode, valueType);\n         if (keyType !\u003d null) {\n-            name.setJSType(keyType);\n+            String qualifiedName \u003d getBestLValueName(keyNode);\n+            if (qualifiedName !\u003d null) {\n+                defineSlot(keyNode, objLit, qualifiedName, keyType, false);\n+            } else {\n+                setDeferredType(keyNode, keyType);\n+            }\n             if (objLitType !\u003d null) {\n                 boolean isExtern \u003d t.getInput() !\u003d null \u0026\u0026 t.getInput().isExtern();\n-                objLitType.defineDeclaredProperty(memberName, keyType, isExtern, name);\n+                objLitType.defineDeclaredProperty(memberName, keyType, isExtern, keyNode);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7675b68dbd7cfc37b1359fd40be9fdf0b618bc95": {
      "type": "Ybodychange",
      "commitMessage": "\nfix a todo that\u0027s really easy now\n\nR\u003djohnlenz\nDELTA\u003d67  (28 added, 12 deleted, 27 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d417\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@743 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/1/11, 11:22 AM",
      "commitName": "7675b68dbd7cfc37b1359fd40be9fdf0b618bc95",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "1/31/11, 8:08 AM",
      "commitNameOld": "2ea78e73e6ace693e18d535560606dfd49c3f9bc",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 1.13,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "void processObjectLitProperties(NodeTraversal t, Node objLit, ObjectType objLitType) {\n    for (Node name \u003d objLit.getFirstChild(); name !\u003d null; name \u003d name.getNext()) {\n        Node value \u003d name.getFirstChild();\n        String memberName \u003d NodeUtil.getObjectLitKeyName(name);\n        JSType valueType \u003d getDeclaredPropType(t, name.getJSDocInfo(), name, value);\n        JSType keyType \u003d NodeUtil.getObjectLitKeyTypeFromValueType(name, valueType);\n        if (keyType !\u003d null) {\n            name.setJSType(keyType);\n            if (objLitType !\u003d null) {\n                boolean isExtern \u003d t.getInput() !\u003d null \u0026\u0026 t.getInput().isExtern();\n                objLitType.defineDeclaredProperty(memberName, keyType, isExtern, name);\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 567,
      "functionName": "processObjectLitProperties",
      "functionAnnotation": "",
      "functionDoc": "Process an object literal and all the types on it.\n\n@param objLit The OBJECTLIT node.\n@param objLitType The type of the OBJECTLIT node. This might be a named\n    type, because of the lends annotation.\n",
      "diff": "@@ -1,15 +1,15 @@\n void processObjectLitProperties(NodeTraversal t, Node objLit, ObjectType objLitType) {\n     for (Node name \u003d objLit.getFirstChild(); name !\u003d null; name \u003d name.getNext()) {\n         Node value \u003d name.getFirstChild();\n         String memberName \u003d NodeUtil.getObjectLitKeyName(name);\n-        JSType valueType \u003d getDeclaredTypeInAnnotation(t, name, name.getJSDocInfo());\n+        JSType valueType \u003d getDeclaredPropType(t, name.getJSDocInfo(), name, value);\n         JSType keyType \u003d NodeUtil.getObjectLitKeyTypeFromValueType(name, valueType);\n         if (keyType !\u003d null) {\n             name.setJSType(keyType);\n             if (objLitType !\u003d null) {\n                 boolean isExtern \u003d t.getInput() !\u003d null \u0026\u0026 t.getInput().isExtern();\n                 objLitType.defineDeclaredProperty(memberName, keyType, isExtern, name);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "70f817ae4f80ac11dd2dfe97babf5896c690fb48": {
      "type": "Ybodychange",
      "commitMessage": "\nAdd basic getters and setters support to TypeInference.\n\nR\u003dnicksantos\nDELTA\u003d573  (533 added, 15 deleted, 25 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d366\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@735 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/27/11, 10:33 AM",
      "commitName": "70f817ae4f80ac11dd2dfe97babf5896c690fb48",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "1/21/11, 10:57 AM",
      "commitNameOld": "f3d83b7eb7b1e4afbb24ae57e1a57adadbcead42",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 5.98,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "void processObjectLitProperties(NodeTraversal t, Node objLit, ObjectType objLitType) {\n    for (Node name \u003d objLit.getFirstChild(); name !\u003d null; name \u003d name.getNext()) {\n        Node value \u003d name.getFirstChild();\n        String memberName \u003d NodeUtil.getObjectLitKeyName(name);\n        JSType valueType \u003d getDeclaredTypeInAnnotation(t, name, name.getJSDocInfo());\n        JSType keyType \u003d NodeUtil.getObjectLitKeyTypeFromValueType(name, valueType);\n        if (keyType !\u003d null) {\n            name.setJSType(keyType);\n            if (objLitType !\u003d null) {\n                boolean isExtern \u003d t.getInput() !\u003d null \u0026\u0026 t.getInput().isExtern();\n                objLitType.defineDeclaredProperty(memberName, keyType, isExtern, name);\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 564,
      "functionName": "processObjectLitProperties",
      "functionAnnotation": "",
      "functionDoc": "Process an object literal and all the types on it.\n\n@param objLit The OBJECTLIT node.\n@param objLitType The type of the OBJECTLIT node. This might be a named\n    type, because of the lends annotation.\n",
      "diff": "@@ -1,14 +1,15 @@\n void processObjectLitProperties(NodeTraversal t, Node objLit, ObjectType objLitType) {\n-    if (objLitType \u003d\u003d null) {\n-        return;\n-    }\n     for (Node name \u003d objLit.getFirstChild(); name !\u003d null; name \u003d name.getNext()) {\n         Node value \u003d name.getFirstChild();\n-        String memberName \u003d NodeUtil.getStringValue(name);\n-        JSType type \u003d getDeclaredTypeInAnnotation(t, name, name.getJSDocInfo());\n-        if (type !\u003d null) {\n-            boolean isExtern \u003d t.getInput() !\u003d null \u0026\u0026 t.getInput().isExtern();\n-            objLitType.defineDeclaredProperty(memberName, type, isExtern, name);\n+        String memberName \u003d NodeUtil.getObjectLitKeyName(name);\n+        JSType valueType \u003d getDeclaredTypeInAnnotation(t, name, name.getJSDocInfo());\n+        JSType keyType \u003d NodeUtil.getObjectLitKeyTypeFromValueType(name, valueType);\n+        if (keyType !\u003d null) {\n+            name.setJSType(keyType);\n+            if (objLitType !\u003d null) {\n+                boolean isExtern \u003d t.getInput() !\u003d null \u0026\u0026 t.getInput().isExtern();\n+                objLitType.defineDeclaredProperty(memberName, keyType, isExtern, name);\n+            }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f3d83b7eb7b1e4afbb24ae57e1a57adadbcead42": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange,Ydocchange)",
      "commitMessage": "\nRudimentary handling of declared properties of object literals.\n\nR\u003djohnlenz\nDELTA\u003d101  (95 added, 0 deleted, 6 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d331\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@725 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/21/11, 10:57 AM",
      "commitName": "f3d83b7eb7b1e4afbb24ae57e1a57adadbcead42",
      "commitAuthor": "nicksantos@google.com",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "\nRudimentary handling of declared properties of object literals.\n\nR\u003djohnlenz\nDELTA\u003d101  (95 added, 0 deleted, 6 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d331\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@725 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/21/11, 10:57 AM",
          "commitName": "f3d83b7eb7b1e4afbb24ae57e1a57adadbcead42",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "1/7/11, 9:19 AM",
          "commitNameOld": "6bbac115c9a7928a7053b2da3a78df9569df8570",
          "commitAuthorOld": "bashir@google.com",
          "daysBetweenCommits": 14.07,
          "commitsBetweenForRepo": 45,
          "commitsBetweenForFile": 1,
          "actualSource": "void processObjectLitProperties(NodeTraversal t, Node objLit, ObjectType objLitType) {\n    if (objLitType \u003d\u003d null) {\n        return;\n    }\n    for (Node name \u003d objLit.getFirstChild(); name !\u003d null; name \u003d name.getNext()) {\n        Node value \u003d name.getFirstChild();\n        String memberName \u003d NodeUtil.getStringValue(name);\n        JSType type \u003d getDeclaredTypeInAnnotation(t, name, name.getJSDocInfo());\n        if (type !\u003d null) {\n            boolean isExtern \u003d t.getInput() !\u003d null \u0026\u0026 t.getInput().isExtern();\n            objLitType.defineDeclaredProperty(memberName, type, isExtern, name);\n        }\n    }\n}",
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
          "functionStartLine": 558,
          "functionName": "processObjectLitProperties",
          "functionAnnotation": "",
          "functionDoc": "Process an object literal and all the types on it.\n\n@param objLit The OBJECTLIT node.\n@param objLitType The type of the OBJECTLIT node. This might be a named\n    type, because of the lends annotation.\n",
          "diff": "@@ -1,23 +1,14 @@\n-private void processObjectLit(Node objectLit) {\n-    JSDocInfo info \u003d objectLit.getJSDocInfo();\n-    if (info !\u003d null \u0026\u0026 info.getLendsName() !\u003d null) {\n-        String lendsName \u003d info.getLendsName();\n-        Var lendsVar \u003d scope.getVar(lendsName);\n-        if (lendsVar \u003d\u003d null) {\n-            compiler.report(JSError.make(sourceName, objectLit, UNKNOWN_LENDS, lendsName));\n-        } else {\n-            JSType type \u003d lendsVar.getType();\n-            if (type \u003d\u003d null) {\n-                type \u003d typeRegistry.getNativeType(UNKNOWN_TYPE);\n-            }\n-            if (!type.isSubtype(typeRegistry.getNativeType(OBJECT_TYPE))) {\n-                compiler.report(JSError.make(sourceName, objectLit, LENDS_ON_NON_OBJECT, lendsName, type.toString()));\n-            } else {\n-                objectLit.setJSType(type);\n-            }\n-        }\n+void processObjectLitProperties(NodeTraversal t, Node objLit, ObjectType objLitType) {\n+    if (objLitType \u003d\u003d null) {\n+        return;\n     }\n-    if (objectLit.getJSType() \u003d\u003d null) {\n-        objectLit.setJSType(typeRegistry.createAnonymousObjectType());\n+    for (Node name \u003d objLit.getFirstChild(); name !\u003d null; name \u003d name.getNext()) {\n+        Node value \u003d name.getFirstChild();\n+        String memberName \u003d NodeUtil.getStringValue(name);\n+        JSType type \u003d getDeclaredTypeInAnnotation(t, name, name.getJSDocInfo());\n+        if (type !\u003d null) {\n+            boolean isExtern \u003d t.getInput() !\u003d null \u0026\u0026 t.getInput().isExtern();\n+            objLitType.defineDeclaredProperty(memberName, type, isExtern, name);\n+        }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "processObjectLit",
            "newValue": "processObjectLitProperties"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "\nRudimentary handling of declared properties of object literals.\n\nR\u003djohnlenz\nDELTA\u003d101  (95 added, 0 deleted, 6 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d331\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@725 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/21/11, 10:57 AM",
          "commitName": "f3d83b7eb7b1e4afbb24ae57e1a57adadbcead42",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "1/7/11, 9:19 AM",
          "commitNameOld": "6bbac115c9a7928a7053b2da3a78df9569df8570",
          "commitAuthorOld": "bashir@google.com",
          "daysBetweenCommits": 14.07,
          "commitsBetweenForRepo": 45,
          "commitsBetweenForFile": 1,
          "actualSource": "void processObjectLitProperties(NodeTraversal t, Node objLit, ObjectType objLitType) {\n    if (objLitType \u003d\u003d null) {\n        return;\n    }\n    for (Node name \u003d objLit.getFirstChild(); name !\u003d null; name \u003d name.getNext()) {\n        Node value \u003d name.getFirstChild();\n        String memberName \u003d NodeUtil.getStringValue(name);\n        JSType type \u003d getDeclaredTypeInAnnotation(t, name, name.getJSDocInfo());\n        if (type !\u003d null) {\n            boolean isExtern \u003d t.getInput() !\u003d null \u0026\u0026 t.getInput().isExtern();\n            objLitType.defineDeclaredProperty(memberName, type, isExtern, name);\n        }\n    }\n}",
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
          "functionStartLine": 558,
          "functionName": "processObjectLitProperties",
          "functionAnnotation": "",
          "functionDoc": "Process an object literal and all the types on it.\n\n@param objLit The OBJECTLIT node.\n@param objLitType The type of the OBJECTLIT node. This might be a named\n    type, because of the lends annotation.\n",
          "diff": "@@ -1,23 +1,14 @@\n-private void processObjectLit(Node objectLit) {\n-    JSDocInfo info \u003d objectLit.getJSDocInfo();\n-    if (info !\u003d null \u0026\u0026 info.getLendsName() !\u003d null) {\n-        String lendsName \u003d info.getLendsName();\n-        Var lendsVar \u003d scope.getVar(lendsName);\n-        if (lendsVar \u003d\u003d null) {\n-            compiler.report(JSError.make(sourceName, objectLit, UNKNOWN_LENDS, lendsName));\n-        } else {\n-            JSType type \u003d lendsVar.getType();\n-            if (type \u003d\u003d null) {\n-                type \u003d typeRegistry.getNativeType(UNKNOWN_TYPE);\n-            }\n-            if (!type.isSubtype(typeRegistry.getNativeType(OBJECT_TYPE))) {\n-                compiler.report(JSError.make(sourceName, objectLit, LENDS_ON_NON_OBJECT, lendsName, type.toString()));\n-            } else {\n-                objectLit.setJSType(type);\n-            }\n-        }\n+void processObjectLitProperties(NodeTraversal t, Node objLit, ObjectType objLitType) {\n+    if (objLitType \u003d\u003d null) {\n+        return;\n     }\n-    if (objectLit.getJSType() \u003d\u003d null) {\n-        objectLit.setJSType(typeRegistry.createAnonymousObjectType());\n+    for (Node name \u003d objLit.getFirstChild(); name !\u003d null; name \u003d name.getNext()) {\n+        Node value \u003d name.getFirstChild();\n+        String memberName \u003d NodeUtil.getStringValue(name);\n+        JSType type \u003d getDeclaredTypeInAnnotation(t, name, name.getJSDocInfo());\n+        if (type !\u003d null) {\n+            boolean isExtern \u003d t.getInput() !\u003d null \u0026\u0026 t.getInput().isExtern();\n+            objLitType.defineDeclaredProperty(memberName, type, isExtern, name);\n+        }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[objectLit-Node]",
            "newValue": "[t-NodeTraversal, objLit-Node, objLitType-ObjectType]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "\nRudimentary handling of declared properties of object literals.\n\nR\u003djohnlenz\nDELTA\u003d101  (95 added, 0 deleted, 6 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d331\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@725 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/21/11, 10:57 AM",
          "commitName": "f3d83b7eb7b1e4afbb24ae57e1a57adadbcead42",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "1/7/11, 9:19 AM",
          "commitNameOld": "6bbac115c9a7928a7053b2da3a78df9569df8570",
          "commitAuthorOld": "bashir@google.com",
          "daysBetweenCommits": 14.07,
          "commitsBetweenForRepo": 45,
          "commitsBetweenForFile": 1,
          "actualSource": "void processObjectLitProperties(NodeTraversal t, Node objLit, ObjectType objLitType) {\n    if (objLitType \u003d\u003d null) {\n        return;\n    }\n    for (Node name \u003d objLit.getFirstChild(); name !\u003d null; name \u003d name.getNext()) {\n        Node value \u003d name.getFirstChild();\n        String memberName \u003d NodeUtil.getStringValue(name);\n        JSType type \u003d getDeclaredTypeInAnnotation(t, name, name.getJSDocInfo());\n        if (type !\u003d null) {\n            boolean isExtern \u003d t.getInput() !\u003d null \u0026\u0026 t.getInput().isExtern();\n            objLitType.defineDeclaredProperty(memberName, type, isExtern, name);\n        }\n    }\n}",
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
          "functionStartLine": 558,
          "functionName": "processObjectLitProperties",
          "functionAnnotation": "",
          "functionDoc": "Process an object literal and all the types on it.\n\n@param objLit The OBJECTLIT node.\n@param objLitType The type of the OBJECTLIT node. This might be a named\n    type, because of the lends annotation.\n",
          "diff": "@@ -1,23 +1,14 @@\n-private void processObjectLit(Node objectLit) {\n-    JSDocInfo info \u003d objectLit.getJSDocInfo();\n-    if (info !\u003d null \u0026\u0026 info.getLendsName() !\u003d null) {\n-        String lendsName \u003d info.getLendsName();\n-        Var lendsVar \u003d scope.getVar(lendsName);\n-        if (lendsVar \u003d\u003d null) {\n-            compiler.report(JSError.make(sourceName, objectLit, UNKNOWN_LENDS, lendsName));\n-        } else {\n-            JSType type \u003d lendsVar.getType();\n-            if (type \u003d\u003d null) {\n-                type \u003d typeRegistry.getNativeType(UNKNOWN_TYPE);\n-            }\n-            if (!type.isSubtype(typeRegistry.getNativeType(OBJECT_TYPE))) {\n-                compiler.report(JSError.make(sourceName, objectLit, LENDS_ON_NON_OBJECT, lendsName, type.toString()));\n-            } else {\n-                objectLit.setJSType(type);\n-            }\n-        }\n+void processObjectLitProperties(NodeTraversal t, Node objLit, ObjectType objLitType) {\n+    if (objLitType \u003d\u003d null) {\n+        return;\n     }\n-    if (objectLit.getJSType() \u003d\u003d null) {\n-        objectLit.setJSType(typeRegistry.createAnonymousObjectType());\n+    for (Node name \u003d objLit.getFirstChild(); name !\u003d null; name \u003d name.getNext()) {\n+        Node value \u003d name.getFirstChild();\n+        String memberName \u003d NodeUtil.getStringValue(name);\n+        JSType type \u003d getDeclaredTypeInAnnotation(t, name, name.getJSDocInfo());\n+        if (type !\u003d null) {\n+            boolean isExtern \u003d t.getInput() !\u003d null \u0026\u0026 t.getInput().isExtern();\n+            objLitType.defineDeclaredProperty(memberName, type, isExtern, name);\n+        }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nRudimentary handling of declared properties of object literals.\n\nR\u003djohnlenz\nDELTA\u003d101  (95 added, 0 deleted, 6 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d331\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@725 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/21/11, 10:57 AM",
          "commitName": "f3d83b7eb7b1e4afbb24ae57e1a57adadbcead42",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "1/7/11, 9:19 AM",
          "commitNameOld": "6bbac115c9a7928a7053b2da3a78df9569df8570",
          "commitAuthorOld": "bashir@google.com",
          "daysBetweenCommits": 14.07,
          "commitsBetweenForRepo": 45,
          "commitsBetweenForFile": 1,
          "actualSource": "void processObjectLitProperties(NodeTraversal t, Node objLit, ObjectType objLitType) {\n    if (objLitType \u003d\u003d null) {\n        return;\n    }\n    for (Node name \u003d objLit.getFirstChild(); name !\u003d null; name \u003d name.getNext()) {\n        Node value \u003d name.getFirstChild();\n        String memberName \u003d NodeUtil.getStringValue(name);\n        JSType type \u003d getDeclaredTypeInAnnotation(t, name, name.getJSDocInfo());\n        if (type !\u003d null) {\n            boolean isExtern \u003d t.getInput() !\u003d null \u0026\u0026 t.getInput().isExtern();\n            objLitType.defineDeclaredProperty(memberName, type, isExtern, name);\n        }\n    }\n}",
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
          "functionStartLine": 558,
          "functionName": "processObjectLitProperties",
          "functionAnnotation": "",
          "functionDoc": "Process an object literal and all the types on it.\n\n@param objLit The OBJECTLIT node.\n@param objLitType The type of the OBJECTLIT node. This might be a named\n    type, because of the lends annotation.\n",
          "diff": "@@ -1,23 +1,14 @@\n-private void processObjectLit(Node objectLit) {\n-    JSDocInfo info \u003d objectLit.getJSDocInfo();\n-    if (info !\u003d null \u0026\u0026 info.getLendsName() !\u003d null) {\n-        String lendsName \u003d info.getLendsName();\n-        Var lendsVar \u003d scope.getVar(lendsName);\n-        if (lendsVar \u003d\u003d null) {\n-            compiler.report(JSError.make(sourceName, objectLit, UNKNOWN_LENDS, lendsName));\n-        } else {\n-            JSType type \u003d lendsVar.getType();\n-            if (type \u003d\u003d null) {\n-                type \u003d typeRegistry.getNativeType(UNKNOWN_TYPE);\n-            }\n-            if (!type.isSubtype(typeRegistry.getNativeType(OBJECT_TYPE))) {\n-                compiler.report(JSError.make(sourceName, objectLit, LENDS_ON_NON_OBJECT, lendsName, type.toString()));\n-            } else {\n-                objectLit.setJSType(type);\n-            }\n-        }\n+void processObjectLitProperties(NodeTraversal t, Node objLit, ObjectType objLitType) {\n+    if (objLitType \u003d\u003d null) {\n+        return;\n     }\n-    if (objectLit.getJSType() \u003d\u003d null) {\n-        objectLit.setJSType(typeRegistry.createAnonymousObjectType());\n+    for (Node name \u003d objLit.getFirstChild(); name !\u003d null; name \u003d name.getNext()) {\n+        Node value \u003d name.getFirstChild();\n+        String memberName \u003d NodeUtil.getStringValue(name);\n+        JSType type \u003d getDeclaredTypeInAnnotation(t, name, name.getJSDocInfo());\n+        if (type !\u003d null) {\n+            boolean isExtern \u003d t.getInput() !\u003d null \u0026\u0026 t.getInput().isExtern();\n+            objLitType.defineDeclaredProperty(memberName, type, isExtern, name);\n+        }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "\nRudimentary handling of declared properties of object literals.\n\nR\u003djohnlenz\nDELTA\u003d101  (95 added, 0 deleted, 6 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d331\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@725 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/21/11, 10:57 AM",
          "commitName": "f3d83b7eb7b1e4afbb24ae57e1a57adadbcead42",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "1/7/11, 9:19 AM",
          "commitNameOld": "6bbac115c9a7928a7053b2da3a78df9569df8570",
          "commitAuthorOld": "bashir@google.com",
          "daysBetweenCommits": 14.07,
          "commitsBetweenForRepo": 45,
          "commitsBetweenForFile": 1,
          "actualSource": "void processObjectLitProperties(NodeTraversal t, Node objLit, ObjectType objLitType) {\n    if (objLitType \u003d\u003d null) {\n        return;\n    }\n    for (Node name \u003d objLit.getFirstChild(); name !\u003d null; name \u003d name.getNext()) {\n        Node value \u003d name.getFirstChild();\n        String memberName \u003d NodeUtil.getStringValue(name);\n        JSType type \u003d getDeclaredTypeInAnnotation(t, name, name.getJSDocInfo());\n        if (type !\u003d null) {\n            boolean isExtern \u003d t.getInput() !\u003d null \u0026\u0026 t.getInput().isExtern();\n            objLitType.defineDeclaredProperty(memberName, type, isExtern, name);\n        }\n    }\n}",
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
          "functionStartLine": 558,
          "functionName": "processObjectLitProperties",
          "functionAnnotation": "",
          "functionDoc": "Process an object literal and all the types on it.\n\n@param objLit The OBJECTLIT node.\n@param objLitType The type of the OBJECTLIT node. This might be a named\n    type, because of the lends annotation.\n",
          "diff": "@@ -1,23 +1,14 @@\n-private void processObjectLit(Node objectLit) {\n-    JSDocInfo info \u003d objectLit.getJSDocInfo();\n-    if (info !\u003d null \u0026\u0026 info.getLendsName() !\u003d null) {\n-        String lendsName \u003d info.getLendsName();\n-        Var lendsVar \u003d scope.getVar(lendsName);\n-        if (lendsVar \u003d\u003d null) {\n-            compiler.report(JSError.make(sourceName, objectLit, UNKNOWN_LENDS, lendsName));\n-        } else {\n-            JSType type \u003d lendsVar.getType();\n-            if (type \u003d\u003d null) {\n-                type \u003d typeRegistry.getNativeType(UNKNOWN_TYPE);\n-            }\n-            if (!type.isSubtype(typeRegistry.getNativeType(OBJECT_TYPE))) {\n-                compiler.report(JSError.make(sourceName, objectLit, LENDS_ON_NON_OBJECT, lendsName, type.toString()));\n-            } else {\n-                objectLit.setJSType(type);\n-            }\n-        }\n+void processObjectLitProperties(NodeTraversal t, Node objLit, ObjectType objLitType) {\n+    if (objLitType \u003d\u003d null) {\n+        return;\n     }\n-    if (objectLit.getJSType() \u003d\u003d null) {\n-        objectLit.setJSType(typeRegistry.createAnonymousObjectType());\n+    for (Node name \u003d objLit.getFirstChild(); name !\u003d null; name \u003d name.getNext()) {\n+        Node value \u003d name.getFirstChild();\n+        String memberName \u003d NodeUtil.getStringValue(name);\n+        JSType type \u003d getDeclaredTypeInAnnotation(t, name, name.getJSDocInfo());\n+        if (type !\u003d null) {\n+            boolean isExtern \u003d t.getInput() !\u003d null \u0026\u0026 t.getInput().isExtern();\n+            objLitType.defineDeclaredProperty(memberName, type, isExtern, name);\n+        }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "Process an object literal and all the types on it.\n\n@param objLit The OBJECTLIT node.\n@param objLitType The type of the OBJECTLIT node. This might be a named\n    type, because of the lends annotation.\n"
          }
        }
      ]
    },
    "1bd8d2f0f4f3edcc11aa441f50223967a98bf85d": {
      "type": "Yintroduced",
      "commitMessage": "\ntype-check the @lends annotation\n\nR\u003dacleung\nDELTA\u003d207  (163 added, 42 deleted, 2 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d751020\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@512 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/26/10, 8:07 AM",
      "commitName": "1bd8d2f0f4f3edcc11aa441f50223967a98bf85d",
      "commitAuthor": "nicksantos@google.com",
      "diff": "@@ -0,0 +1,23 @@\n+private void processObjectLit(Node objectLit) {\n+    JSDocInfo info \u003d objectLit.getJSDocInfo();\n+    if (info !\u003d null \u0026\u0026 info.getLendsName() !\u003d null) {\n+        String lendsName \u003d info.getLendsName();\n+        Var lendsVar \u003d scope.getVar(lendsName);\n+        if (lendsVar \u003d\u003d null) {\n+            compiler.report(JSError.make(sourceName, objectLit, UNKNOWN_LENDS, lendsName));\n+        } else {\n+            JSType type \u003d lendsVar.getType();\n+            if (type \u003d\u003d null) {\n+                type \u003d typeRegistry.getNativeType(UNKNOWN_TYPE);\n+            }\n+            if (!type.isSubtype(typeRegistry.getNativeType(OBJECT_TYPE))) {\n+                compiler.report(JSError.make(sourceName, objectLit, LENDS_ON_NON_OBJECT, lendsName, type.toString()));\n+            } else {\n+                objectLit.setJSType(type);\n+            }\n+        }\n+    }\n+    if (objectLit.getJSType() \u003d\u003d null) {\n+        objectLit.setJSType(typeRegistry.createAnonymousObjectType());\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void processObjectLit(Node objectLit) {\n    JSDocInfo info \u003d objectLit.getJSDocInfo();\n    if (info !\u003d null \u0026\u0026 info.getLendsName() !\u003d null) {\n        String lendsName \u003d info.getLendsName();\n        Var lendsVar \u003d scope.getVar(lendsName);\n        if (lendsVar \u003d\u003d null) {\n            compiler.report(JSError.make(sourceName, objectLit, UNKNOWN_LENDS, lendsName));\n        } else {\n            JSType type \u003d lendsVar.getType();\n            if (type \u003d\u003d null) {\n                type \u003d typeRegistry.getNativeType(UNKNOWN_TYPE);\n            }\n            if (!type.isSubtype(typeRegistry.getNativeType(OBJECT_TYPE))) {\n                compiler.report(JSError.make(sourceName, objectLit, LENDS_ON_NON_OBJECT, lendsName, type.toString()));\n            } else {\n                objectLit.setJSType(type);\n            }\n        }\n    }\n    if (objectLit.getJSType() \u003d\u003d null) {\n        objectLit.setJSType(typeRegistry.createAnonymousObjectType());\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
      "functionStartLine": 489,
      "functionName": "processObjectLit",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}