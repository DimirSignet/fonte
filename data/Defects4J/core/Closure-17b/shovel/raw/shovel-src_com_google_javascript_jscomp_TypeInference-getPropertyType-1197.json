{
  "origin": "codeshovel",
  "repositoryName": "Closure-17b",
  "repositoryPath": "/tmp/Closure-17b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TypeInference.java",
  "functionName": "getPropertyType",
  "functionId": "getPropertyType___objType-JSType__propName-String__n-Node__scope-FlowScope",
  "sourceFilePath": "src/com/google/javascript/jscomp/TypeInference.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 1197,
  "functionEndLine": 1248,
  "numCommitsSeen": 81,
  "timeTaken": 4926,
  "changeHistory": [
    "8d91f37d29abd8682e298a23f63b96f2f2def659",
    "a2d8936fae3eb0e3873c7f7c0233344c81436404",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "8d91f37d29abd8682e298a23f63b96f2f2def659": "Ybodychange",
    "a2d8936fae3eb0e3873c7f7c0233344c81436404": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8d91f37d29abd8682e298a23f63b96f2f2def659": {
      "type": "Ybodychange",
      "commitMessage": "\nImprove inference for functions defined in constructors\n\nFixes issue 765\n\nR\u003dacleung\nDELTA\u003d132  (88 added, 20 deleted, 24 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5093\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2070 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/27/12, 3:57 PM",
      "commitName": "8d91f37d29abd8682e298a23f63b96f2f2def659",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "6/12/12, 12:51 PM",
      "commitNameOld": "616f796f52ee78e1a655e913e0b339d6c5e1347e",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 15.13,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "actualSource": "private JSType getPropertyType(JSType objType, String propName, Node n, FlowScope scope) {\n    JSType unknownType \u003d getNativeType(UNKNOWN_TYPE);\n    JSType propertyType \u003d null;\n    boolean isLocallyInferred \u003d false;\n    String qualifiedName \u003d n.getQualifiedName();\n    StaticSlot\u003cJSType\u003e var \u003d scope.getSlot(qualifiedName);\n    if (var !\u003d null) {\n        JSType varType \u003d var.getType();\n        if (varType !\u003d null) {\n            boolean isDeclared \u003d !var.isTypeInferred();\n            isLocallyInferred \u003d (var !\u003d syntacticScope.getSlot(qualifiedName));\n            if (isDeclared || isLocallyInferred) {\n                propertyType \u003d varType;\n            }\n        }\n    }\n    if (propertyType \u003d\u003d null \u0026\u0026 objType !\u003d null) {\n        JSType foundType \u003d objType.findPropertyType(propName);\n        if (foundType !\u003d null) {\n            propertyType \u003d foundType;\n        }\n    }\n    if ((propertyType \u003d\u003d null || propertyType.isUnknownType()) \u0026\u0026 qualifiedName !\u003d null) {\n        ObjectType regType \u003d ObjectType.cast(registry.getType(qualifiedName));\n        if (regType !\u003d null) {\n            propertyType \u003d regType.getConstructor();\n        }\n    }\n    if (propertyType \u003d\u003d null) {\n        return getNativeType(UNKNOWN_TYPE);\n    } else if (propertyType.equals(unknownType) \u0026\u0026 isLocallyInferred) {\n        return getNativeType(CHECKED_UNKNOWN_TYPE);\n    } else {\n        return propertyType;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 1197,
      "functionName": "getPropertyType",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,25 +1,36 @@\n private JSType getPropertyType(JSType objType, String propName, Node n, FlowScope scope) {\n+    JSType unknownType \u003d getNativeType(UNKNOWN_TYPE);\n+    JSType propertyType \u003d null;\n+    boolean isLocallyInferred \u003d false;\n     String qualifiedName \u003d n.getQualifiedName();\n     StaticSlot\u003cJSType\u003e var \u003d scope.getSlot(qualifiedName);\n     if (var !\u003d null) {\n         JSType varType \u003d var.getType();\n         if (varType !\u003d null) {\n-            if (varType.equals(getNativeType(UNKNOWN_TYPE)) \u0026\u0026 var !\u003d syntacticScope.getSlot(qualifiedName)) {\n-                return getNativeType(CHECKED_UNKNOWN_TYPE);\n-            } else {\n-                return varType;\n+            boolean isDeclared \u003d !var.isTypeInferred();\n+            isLocallyInferred \u003d (var !\u003d syntacticScope.getSlot(qualifiedName));\n+            if (isDeclared || isLocallyInferred) {\n+                propertyType \u003d varType;\n             }\n         }\n     }\n-    JSType propertyType \u003d null;\n-    if (objType !\u003d null) {\n-        propertyType \u003d objType.findPropertyType(propName);\n+    if (propertyType \u003d\u003d null \u0026\u0026 objType !\u003d null) {\n+        JSType foundType \u003d objType.findPropertyType(propName);\n+        if (foundType !\u003d null) {\n+            propertyType \u003d foundType;\n+        }\n     }\n     if ((propertyType \u003d\u003d null || propertyType.isUnknownType()) \u0026\u0026 qualifiedName !\u003d null) {\n         ObjectType regType \u003d ObjectType.cast(registry.getType(qualifiedName));\n         if (regType !\u003d null) {\n             propertyType \u003d regType.getConstructor();\n         }\n     }\n-    return propertyType;\n+    if (propertyType \u003d\u003d null) {\n+        return getNativeType(UNKNOWN_TYPE);\n+    } else if (propertyType.equals(unknownType) \u0026\u0026 isLocallyInferred) {\n+        return getNativeType(CHECKED_UNKNOWN_TYPE);\n+    } else {\n+        return propertyType;\n+    }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a2d8936fae3eb0e3873c7f7c0233344c81436404": {
      "type": "Ybodychange",
      "commitMessage": "Add warnings for functions that are ambiguously defined on different\nbrowsers.\n\nAdd better support for Caja.\n\nRollback the change to CoalesceVariableNames, because it had problems.\n\nInternal type system refactoring.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@33 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/15/09, 1:52 PM",
      "commitName": "a2d8936fae3eb0e3873c7f7c0233344c81436404",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/25/09, 6:53 AM",
      "commitNameOld": "3bee5d740c96572faea4b9fb8b632e0e07b13cbb",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 20.29,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "private JSType getPropertyType(JSType objType, String propName, Node n, FlowScope scope) {\n    String qualifiedName \u003d n.getQualifiedName();\n    StaticSlot\u003cJSType\u003e var \u003d scope.getSlot(qualifiedName);\n    if (var !\u003d null) {\n        JSType varType \u003d var.getType();\n        if (varType !\u003d null) {\n            if (varType.equals(getNativeType(UNKNOWN_TYPE)) \u0026\u0026 var !\u003d syntacticScope.getSlot(qualifiedName)) {\n                return getNativeType(CHECKED_UNKNOWN_TYPE);\n            } else {\n                return varType;\n            }\n        }\n    }\n    JSType propertyType \u003d null;\n    if (objType !\u003d null) {\n        propertyType \u003d objType.findPropertyType(propName);\n    }\n    if ((propertyType \u003d\u003d null || propertyType.isUnknownType()) \u0026\u0026 qualifiedName !\u003d null) {\n        ObjectType regType \u003d ObjectType.cast(registry.getType(qualifiedName));\n        if (regType !\u003d null) {\n            propertyType \u003d regType.getConstructor();\n        }\n    }\n    return propertyType;\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 919,
      "functionName": "getPropertyType",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,25 +1,25 @@\n private JSType getPropertyType(JSType objType, String propName, Node n, FlowScope scope) {\n     String qualifiedName \u003d n.getQualifiedName();\n     StaticSlot\u003cJSType\u003e var \u003d scope.getSlot(qualifiedName);\n     if (var !\u003d null) {\n         JSType varType \u003d var.getType();\n         if (varType !\u003d null) {\n             if (varType.equals(getNativeType(UNKNOWN_TYPE)) \u0026\u0026 var !\u003d syntacticScope.getSlot(qualifiedName)) {\n                 return getNativeType(CHECKED_UNKNOWN_TYPE);\n             } else {\n                 return varType;\n             }\n         }\n     }\n     JSType propertyType \u003d null;\n     if (objType !\u003d null) {\n         propertyType \u003d objType.findPropertyType(propName);\n     }\n     if ((propertyType \u003d\u003d null || propertyType.isUnknownType()) \u0026\u0026 qualifiedName !\u003d null) {\n-        JSType regType \u003d registry.getType(qualifiedName);\n-        if (regType instanceof ObjectType) {\n-            propertyType \u003d ((ObjectType) regType).getConstructor();\n+        ObjectType regType \u003d ObjectType.cast(registry.getType(qualifiedName));\n+        if (regType !\u003d null) {\n+            propertyType \u003d regType.getConstructor();\n         }\n     }\n     return propertyType;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,25 @@\n+private JSType getPropertyType(JSType objType, String propName, Node n, FlowScope scope) {\n+    String qualifiedName \u003d n.getQualifiedName();\n+    StaticSlot\u003cJSType\u003e var \u003d scope.getSlot(qualifiedName);\n+    if (var !\u003d null) {\n+        JSType varType \u003d var.getType();\n+        if (varType !\u003d null) {\n+            if (varType.equals(getNativeType(UNKNOWN_TYPE)) \u0026\u0026 var !\u003d syntacticScope.getSlot(qualifiedName)) {\n+                return getNativeType(CHECKED_UNKNOWN_TYPE);\n+            } else {\n+                return varType;\n+            }\n+        }\n+    }\n+    JSType propertyType \u003d null;\n+    if (objType !\u003d null) {\n+        propertyType \u003d objType.findPropertyType(propName);\n+    }\n+    if ((propertyType \u003d\u003d null || propertyType.isUnknownType()) \u0026\u0026 qualifiedName !\u003d null) {\n+        JSType regType \u003d registry.getType(qualifiedName);\n+        if (regType instanceof ObjectType) {\n+            propertyType \u003d ((ObjectType) regType).getConstructor();\n+        }\n+    }\n+    return propertyType;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private JSType getPropertyType(JSType objType, String propName, Node n, FlowScope scope) {\n    String qualifiedName \u003d n.getQualifiedName();\n    StaticSlot\u003cJSType\u003e var \u003d scope.getSlot(qualifiedName);\n    if (var !\u003d null) {\n        JSType varType \u003d var.getType();\n        if (varType !\u003d null) {\n            if (varType.equals(getNativeType(UNKNOWN_TYPE)) \u0026\u0026 var !\u003d syntacticScope.getSlot(qualifiedName)) {\n                return getNativeType(CHECKED_UNKNOWN_TYPE);\n            } else {\n                return varType;\n            }\n        }\n    }\n    JSType propertyType \u003d null;\n    if (objType !\u003d null) {\n        propertyType \u003d objType.findPropertyType(propName);\n    }\n    if ((propertyType \u003d\u003d null || propertyType.isUnknownType()) \u0026\u0026 qualifiedName !\u003d null) {\n        JSType regType \u003d registry.getType(qualifiedName);\n        if (regType instanceof ObjectType) {\n            propertyType \u003d ((ObjectType) regType).getConstructor();\n        }\n    }\n    return propertyType;\n}",
      "path": "src/com/google/javascript/jscomp/TypeInference.java",
      "functionStartLine": 921,
      "functionName": "getPropertyType",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}