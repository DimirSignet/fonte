{
  "origin": "codeshovel",
  "repositoryName": "Closure-17b",
  "repositoryPath": "/tmp/Closure-17b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TypeCheck.java",
  "functionName": "checkEnumAlias",
  "functionId": "checkEnumAlias___t-NodeTraversal__declInfo-JSDocInfo__value-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/TypeCheck.java",
  "functionAnnotation": "",
  "functionDoc": "\u003cp\u003eChecks enum aliases.\n\n\u003cp\u003eWe verify that the enum element type of the enum used\nfor initialization is a subtype of the enum element type of\nthe enum the value is being copied in.\u003c/p\u003e\n\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003evar myEnum \u003d myOtherEnum;\u003c/pre\u003e\n\n\u003cp\u003eEnum aliases are irregular, so we need special code for this :(\u003c/p\u003e\n\n@param value the value used for initialization of the enum\n",
  "functionStartLine": 1811,
  "functionEndLine": 1828,
  "numCommitsSeen": 137,
  "timeTaken": 6384,
  "changeHistory": [
    "9d8201624c22636577d47a40aa03de44363b695b",
    "9614c7c0ffe2418359fe91be2a0e61400142237d",
    "34fd5f8275ae69fc772c2283a3c5fd13b93a7c42",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "9d8201624c22636577d47a40aa03de44363b695b": "Ydocchange",
    "9614c7c0ffe2418359fe91be2a0e61400142237d": "Ymultichange(Yrename,Yparameterchange,Ybodychange,Ydocchange)",
    "34fd5f8275ae69fc772c2283a3c5fd13b93a7c42": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9d8201624c22636577d47a40aa03de44363b695b": {
      "type": "Ydocchange",
      "commitMessage": "\nCleanup a bunch of warnings reported by eclipse.\n\nR\u003dnicksantos\nDELTA\u003d57  (4 added, 42 deleted, 11 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3658\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1571 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/8/11, 12:25 PM",
      "commitName": "9d8201624c22636577d47a40aa03de44363b695b",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/7/11, 2:21 PM",
      "commitNameOld": "6641663fa9970c4d7bcdd96a6f31b83b18c3ee3d",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 0.92,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "private void checkEnumAlias(NodeTraversal t, JSDocInfo declInfo, Node value) {\n    if (declInfo \u003d\u003d null || !declInfo.hasEnumParameterType()) {\n        return;\n    }\n    JSType valueType \u003d getJSType(value);\n    if (!valueType.isEnumType()) {\n        return;\n    }\n    EnumType valueEnumType \u003d valueType.toMaybeEnumType();\n    JSType valueEnumPrimitiveType \u003d valueEnumType.getElementsType().getPrimitiveType();\n    validator.expectCanAssignTo(t, value, valueEnumPrimitiveType, declInfo.getEnumParameterType().evaluate(t.getScope(), typeRegistry), \"incompatible enum element types\");\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1762,
      "functionName": "checkEnumAlias",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eChecks enum aliases.\n\n\u003cp\u003eWe verify that the enum element type of the enum used\nfor initialization is a subtype of the enum element type of\nthe enum the value is being copied in.\u003c/p\u003e\n\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003evar myEnum \u003d myOtherEnum;\u003c/pre\u003e\n\n\u003cp\u003eEnum aliases are irregular, so we need special code for this :(\u003c/p\u003e\n\n@param value the value used for initialization of the enum\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "\u003cp\u003eChecks enum aliases.\n\n\u003cp\u003eWe verify that the enum element type of the enum used\nfor initialization is a subtype of the enum element type of\nthe enum the value is being copied in.\u003c/p\u003e\n\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003evar myEnum \u003d myOtherEnum;\u003c/pre\u003e\n\n\u003cp\u003eEnum aliases are irregular, so we need special code for this :(\u003c/p\u003e\n\n@param value the value used for initialization of the enum\n@param primitiveType The type of each element of the enum.\n",
        "newValue": "\u003cp\u003eChecks enum aliases.\n\n\u003cp\u003eWe verify that the enum element type of the enum used\nfor initialization is a subtype of the enum element type of\nthe enum the value is being copied in.\u003c/p\u003e\n\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003evar myEnum \u003d myOtherEnum;\u003c/pre\u003e\n\n\u003cp\u003eEnum aliases are irregular, so we need special code for this :(\u003c/p\u003e\n\n@param value the value used for initialization of the enum\n"
      }
    },
    "9614c7c0ffe2418359fe91be2a0e61400142237d": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "\nremove some special-case code for enums\nnow that we handle object literals properly, we can just\nuse the normal checks\n\nR\u003dacleung\nDELTA\u003d137  (46 added, 26 deleted, 65 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3459\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1509 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/12/11, 8:07 PM",
      "commitName": "9614c7c0ffe2418359fe91be2a0e61400142237d",
      "commitAuthor": "nicksantos@google.com",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "\nremove some special-case code for enums\nnow that we handle object literals properly, we can just\nuse the normal checks\n\nR\u003dacleung\nDELTA\u003d137  (46 added, 26 deleted, 65 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3459\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1509 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "10/12/11, 8:07 PM",
          "commitName": "9614c7c0ffe2418359fe91be2a0e61400142237d",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "10/4/11, 4:04 PM",
          "commitNameOld": "febdacb341025491b3ae83ee8ffa9d22c69c295e",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 8.17,
          "commitsBetweenForRepo": 20,
          "commitsBetweenForFile": 1,
          "actualSource": "private void checkEnumAlias(NodeTraversal t, JSDocInfo declInfo, Node value) {\n    if (declInfo \u003d\u003d null || !declInfo.hasEnumParameterType()) {\n        return;\n    }\n    JSType valueType \u003d getJSType(value);\n    if (!valueType.isEnumType()) {\n        return;\n    }\n    EnumType valueEnumType \u003d valueType.toMaybeEnumType();\n    JSType valueEnumPrimitiveType \u003d valueEnumType.getElementsType().getPrimitiveType();\n    validator.expectCanAssignTo(t, value, valueEnumPrimitiveType, declInfo.getEnumParameterType().evaluate(t.getScope(), typeRegistry), \"incompatible enum element types\");\n}",
          "path": "src/com/google/javascript/jscomp/TypeCheck.java",
          "functionStartLine": 1771,
          "functionName": "checkEnumAlias",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eChecks enum aliases.\n\n\u003cp\u003eWe verify that the enum element type of the enum used\nfor initialization is a subtype of the enum element type of\nthe enum the value is being copied in.\u003c/p\u003e\n\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003evar myEnum \u003d myOtherEnum;\u003c/pre\u003e\n\n\u003cp\u003eEnum aliases are irregular, so we need special code for this :(\u003c/p\u003e\n\n@param value the value used for initialization of the enum\n@param primitiveType The type of each element of the enum.\n",
          "diff": "@@ -1,13 +1,12 @@\n-private void checkEnumInitializer(NodeTraversal t, Node value, JSType primitiveType) {\n-    if (value.getType() \u003d\u003d Token.OBJECTLIT) {\n-        for (Node key \u003d value.getFirstChild(); key !\u003d null; key \u003d key.getNext()) {\n-            Node propValue \u003d key.getFirstChild();\n-            validator.expectCanAssignTo(t, propValue, getJSType(propValue), primitiveType, \"element type must match enum\u0027s type\");\n-        }\n-    } else if (value.getJSType() instanceof EnumType) {\n-        EnumType valueEnumType \u003d (EnumType) value.getJSType();\n-        JSType valueEnumPrimitiveType \u003d valueEnumType.getElementsType().getPrimitiveType();\n-        validator.expectCanAssignTo(t, value, valueEnumPrimitiveType, primitiveType, \"incompatible enum element types\");\n-    } else {\n+private void checkEnumAlias(NodeTraversal t, JSDocInfo declInfo, Node value) {\n+    if (declInfo \u003d\u003d null || !declInfo.hasEnumParameterType()) {\n+        return;\n     }\n+    JSType valueType \u003d getJSType(value);\n+    if (!valueType.isEnumType()) {\n+        return;\n+    }\n+    EnumType valueEnumType \u003d valueType.toMaybeEnumType();\n+    JSType valueEnumPrimitiveType \u003d valueEnumType.getElementsType().getPrimitiveType();\n+    validator.expectCanAssignTo(t, value, valueEnumPrimitiveType, declInfo.getEnumParameterType().evaluate(t.getScope(), typeRegistry), \"incompatible enum element types\");\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "checkEnumInitializer",
            "newValue": "checkEnumAlias"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "\nremove some special-case code for enums\nnow that we handle object literals properly, we can just\nuse the normal checks\n\nR\u003dacleung\nDELTA\u003d137  (46 added, 26 deleted, 65 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3459\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1509 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "10/12/11, 8:07 PM",
          "commitName": "9614c7c0ffe2418359fe91be2a0e61400142237d",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "10/4/11, 4:04 PM",
          "commitNameOld": "febdacb341025491b3ae83ee8ffa9d22c69c295e",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 8.17,
          "commitsBetweenForRepo": 20,
          "commitsBetweenForFile": 1,
          "actualSource": "private void checkEnumAlias(NodeTraversal t, JSDocInfo declInfo, Node value) {\n    if (declInfo \u003d\u003d null || !declInfo.hasEnumParameterType()) {\n        return;\n    }\n    JSType valueType \u003d getJSType(value);\n    if (!valueType.isEnumType()) {\n        return;\n    }\n    EnumType valueEnumType \u003d valueType.toMaybeEnumType();\n    JSType valueEnumPrimitiveType \u003d valueEnumType.getElementsType().getPrimitiveType();\n    validator.expectCanAssignTo(t, value, valueEnumPrimitiveType, declInfo.getEnumParameterType().evaluate(t.getScope(), typeRegistry), \"incompatible enum element types\");\n}",
          "path": "src/com/google/javascript/jscomp/TypeCheck.java",
          "functionStartLine": 1771,
          "functionName": "checkEnumAlias",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eChecks enum aliases.\n\n\u003cp\u003eWe verify that the enum element type of the enum used\nfor initialization is a subtype of the enum element type of\nthe enum the value is being copied in.\u003c/p\u003e\n\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003evar myEnum \u003d myOtherEnum;\u003c/pre\u003e\n\n\u003cp\u003eEnum aliases are irregular, so we need special code for this :(\u003c/p\u003e\n\n@param value the value used for initialization of the enum\n@param primitiveType The type of each element of the enum.\n",
          "diff": "@@ -1,13 +1,12 @@\n-private void checkEnumInitializer(NodeTraversal t, Node value, JSType primitiveType) {\n-    if (value.getType() \u003d\u003d Token.OBJECTLIT) {\n-        for (Node key \u003d value.getFirstChild(); key !\u003d null; key \u003d key.getNext()) {\n-            Node propValue \u003d key.getFirstChild();\n-            validator.expectCanAssignTo(t, propValue, getJSType(propValue), primitiveType, \"element type must match enum\u0027s type\");\n-        }\n-    } else if (value.getJSType() instanceof EnumType) {\n-        EnumType valueEnumType \u003d (EnumType) value.getJSType();\n-        JSType valueEnumPrimitiveType \u003d valueEnumType.getElementsType().getPrimitiveType();\n-        validator.expectCanAssignTo(t, value, valueEnumPrimitiveType, primitiveType, \"incompatible enum element types\");\n-    } else {\n+private void checkEnumAlias(NodeTraversal t, JSDocInfo declInfo, Node value) {\n+    if (declInfo \u003d\u003d null || !declInfo.hasEnumParameterType()) {\n+        return;\n     }\n+    JSType valueType \u003d getJSType(value);\n+    if (!valueType.isEnumType()) {\n+        return;\n+    }\n+    EnumType valueEnumType \u003d valueType.toMaybeEnumType();\n+    JSType valueEnumPrimitiveType \u003d valueEnumType.getElementsType().getPrimitiveType();\n+    validator.expectCanAssignTo(t, value, valueEnumPrimitiveType, declInfo.getEnumParameterType().evaluate(t.getScope(), typeRegistry), \"incompatible enum element types\");\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[t-NodeTraversal, value-Node, primitiveType-JSType]",
            "newValue": "[t-NodeTraversal, declInfo-JSDocInfo, value-Node]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nremove some special-case code for enums\nnow that we handle object literals properly, we can just\nuse the normal checks\n\nR\u003dacleung\nDELTA\u003d137  (46 added, 26 deleted, 65 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3459\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1509 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "10/12/11, 8:07 PM",
          "commitName": "9614c7c0ffe2418359fe91be2a0e61400142237d",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "10/4/11, 4:04 PM",
          "commitNameOld": "febdacb341025491b3ae83ee8ffa9d22c69c295e",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 8.17,
          "commitsBetweenForRepo": 20,
          "commitsBetweenForFile": 1,
          "actualSource": "private void checkEnumAlias(NodeTraversal t, JSDocInfo declInfo, Node value) {\n    if (declInfo \u003d\u003d null || !declInfo.hasEnumParameterType()) {\n        return;\n    }\n    JSType valueType \u003d getJSType(value);\n    if (!valueType.isEnumType()) {\n        return;\n    }\n    EnumType valueEnumType \u003d valueType.toMaybeEnumType();\n    JSType valueEnumPrimitiveType \u003d valueEnumType.getElementsType().getPrimitiveType();\n    validator.expectCanAssignTo(t, value, valueEnumPrimitiveType, declInfo.getEnumParameterType().evaluate(t.getScope(), typeRegistry), \"incompatible enum element types\");\n}",
          "path": "src/com/google/javascript/jscomp/TypeCheck.java",
          "functionStartLine": 1771,
          "functionName": "checkEnumAlias",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eChecks enum aliases.\n\n\u003cp\u003eWe verify that the enum element type of the enum used\nfor initialization is a subtype of the enum element type of\nthe enum the value is being copied in.\u003c/p\u003e\n\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003evar myEnum \u003d myOtherEnum;\u003c/pre\u003e\n\n\u003cp\u003eEnum aliases are irregular, so we need special code for this :(\u003c/p\u003e\n\n@param value the value used for initialization of the enum\n@param primitiveType The type of each element of the enum.\n",
          "diff": "@@ -1,13 +1,12 @@\n-private void checkEnumInitializer(NodeTraversal t, Node value, JSType primitiveType) {\n-    if (value.getType() \u003d\u003d Token.OBJECTLIT) {\n-        for (Node key \u003d value.getFirstChild(); key !\u003d null; key \u003d key.getNext()) {\n-            Node propValue \u003d key.getFirstChild();\n-            validator.expectCanAssignTo(t, propValue, getJSType(propValue), primitiveType, \"element type must match enum\u0027s type\");\n-        }\n-    } else if (value.getJSType() instanceof EnumType) {\n-        EnumType valueEnumType \u003d (EnumType) value.getJSType();\n-        JSType valueEnumPrimitiveType \u003d valueEnumType.getElementsType().getPrimitiveType();\n-        validator.expectCanAssignTo(t, value, valueEnumPrimitiveType, primitiveType, \"incompatible enum element types\");\n-    } else {\n+private void checkEnumAlias(NodeTraversal t, JSDocInfo declInfo, Node value) {\n+    if (declInfo \u003d\u003d null || !declInfo.hasEnumParameterType()) {\n+        return;\n     }\n+    JSType valueType \u003d getJSType(value);\n+    if (!valueType.isEnumType()) {\n+        return;\n+    }\n+    EnumType valueEnumType \u003d valueType.toMaybeEnumType();\n+    JSType valueEnumPrimitiveType \u003d valueEnumType.getElementsType().getPrimitiveType();\n+    validator.expectCanAssignTo(t, value, valueEnumPrimitiveType, declInfo.getEnumParameterType().evaluate(t.getScope(), typeRegistry), \"incompatible enum element types\");\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "\nremove some special-case code for enums\nnow that we handle object literals properly, we can just\nuse the normal checks\n\nR\u003dacleung\nDELTA\u003d137  (46 added, 26 deleted, 65 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3459\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1509 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "10/12/11, 8:07 PM",
          "commitName": "9614c7c0ffe2418359fe91be2a0e61400142237d",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "10/4/11, 4:04 PM",
          "commitNameOld": "febdacb341025491b3ae83ee8ffa9d22c69c295e",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 8.17,
          "commitsBetweenForRepo": 20,
          "commitsBetweenForFile": 1,
          "actualSource": "private void checkEnumAlias(NodeTraversal t, JSDocInfo declInfo, Node value) {\n    if (declInfo \u003d\u003d null || !declInfo.hasEnumParameterType()) {\n        return;\n    }\n    JSType valueType \u003d getJSType(value);\n    if (!valueType.isEnumType()) {\n        return;\n    }\n    EnumType valueEnumType \u003d valueType.toMaybeEnumType();\n    JSType valueEnumPrimitiveType \u003d valueEnumType.getElementsType().getPrimitiveType();\n    validator.expectCanAssignTo(t, value, valueEnumPrimitiveType, declInfo.getEnumParameterType().evaluate(t.getScope(), typeRegistry), \"incompatible enum element types\");\n}",
          "path": "src/com/google/javascript/jscomp/TypeCheck.java",
          "functionStartLine": 1771,
          "functionName": "checkEnumAlias",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eChecks enum aliases.\n\n\u003cp\u003eWe verify that the enum element type of the enum used\nfor initialization is a subtype of the enum element type of\nthe enum the value is being copied in.\u003c/p\u003e\n\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003evar myEnum \u003d myOtherEnum;\u003c/pre\u003e\n\n\u003cp\u003eEnum aliases are irregular, so we need special code for this :(\u003c/p\u003e\n\n@param value the value used for initialization of the enum\n@param primitiveType The type of each element of the enum.\n",
          "diff": "@@ -1,13 +1,12 @@\n-private void checkEnumInitializer(NodeTraversal t, Node value, JSType primitiveType) {\n-    if (value.getType() \u003d\u003d Token.OBJECTLIT) {\n-        for (Node key \u003d value.getFirstChild(); key !\u003d null; key \u003d key.getNext()) {\n-            Node propValue \u003d key.getFirstChild();\n-            validator.expectCanAssignTo(t, propValue, getJSType(propValue), primitiveType, \"element type must match enum\u0027s type\");\n-        }\n-    } else if (value.getJSType() instanceof EnumType) {\n-        EnumType valueEnumType \u003d (EnumType) value.getJSType();\n-        JSType valueEnumPrimitiveType \u003d valueEnumType.getElementsType().getPrimitiveType();\n-        validator.expectCanAssignTo(t, value, valueEnumPrimitiveType, primitiveType, \"incompatible enum element types\");\n-    } else {\n+private void checkEnumAlias(NodeTraversal t, JSDocInfo declInfo, Node value) {\n+    if (declInfo \u003d\u003d null || !declInfo.hasEnumParameterType()) {\n+        return;\n     }\n+    JSType valueType \u003d getJSType(value);\n+    if (!valueType.isEnumType()) {\n+        return;\n+    }\n+    EnumType valueEnumType \u003d valueType.toMaybeEnumType();\n+    JSType valueEnumPrimitiveType \u003d valueEnumType.getElementsType().getPrimitiveType();\n+    validator.expectCanAssignTo(t, value, valueEnumPrimitiveType, declInfo.getEnumParameterType().evaluate(t.getScope(), typeRegistry), \"incompatible enum element types\");\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "\u003cp\u003eChecks the initializer of an enum. An enum can be initialized with an\nobject literal whose values must be subtypes of the declared enum element\ntype, or by copying another enum.\u003c/p\u003e\n\n\u003cp\u003eIn the case of an enum copy, we verify that the enum element type of the\nenum used for initialization is a subtype of the enum element type of\nthe enum the value is being copied in.\u003c/p\u003e\n\n\u003cp\u003eExamples:\u003c/p\u003e\n\u003cpre\u003evar myEnum \u003d {FOO: ..., BAR: ...};\nvar myEnum \u003d myOtherEnum;\u003c/pre\u003e\n\n@param value the value used for initialization of the enum\n@param primitiveType The type of each element of the enum.\n",
            "newValue": "\u003cp\u003eChecks enum aliases.\n\n\u003cp\u003eWe verify that the enum element type of the enum used\nfor initialization is a subtype of the enum element type of\nthe enum the value is being copied in.\u003c/p\u003e\n\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003evar myEnum \u003d myOtherEnum;\u003c/pre\u003e\n\n\u003cp\u003eEnum aliases are irregular, so we need special code for this :(\u003c/p\u003e\n\n@param value the value used for initialization of the enum\n@param primitiveType The type of each element of the enum.\n"
          }
        }
      ]
    },
    "34fd5f8275ae69fc772c2283a3c5fd13b93a7c42": {
      "type": "Ybodychange",
      "commitMessage": "\nChange the OBJECTLIT AST structure from:\n\nOBJECTLIT\n  KEY1\n  VALUE1\n\nto\n\nOBJECTLIT\n  KEY1\n    VALUE1\n\nFixes issue 241\n\nR\u003dacleung,johnlenz,stevey\nDELTA\u003d268  (101 added, 51 deleted, 116 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d356416\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@494 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/18/10, 2:55 PM",
      "commitName": "34fd5f8275ae69fc772c2283a3c5fd13b93a7c42",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "9/13/10, 11:12 AM",
      "commitNameOld": "4c6e1039b80859f17de5f3cbcfeba61ed8ea0485",
      "commitAuthorOld": "elbaum@google.com",
      "daysBetweenCommits": 35.15,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "actualSource": "private void checkEnumInitializer(NodeTraversal t, Node value, JSType primitiveType) {\n    if (value.getType() \u003d\u003d Token.OBJECTLIT) {\n        for (Node key \u003d value.getFirstChild(); key !\u003d null; key \u003d key.getNext()) {\n            Node propValue \u003d key.getFirstChild();\n            validator.expectCanAssignTo(t, propValue, getJSType(propValue), primitiveType, \"element type must match enum\u0027s type\");\n        }\n    } else if (value.getJSType() instanceof EnumType) {\n        EnumType valueEnumType \u003d (EnumType) value.getJSType();\n        JSType valueEnumPrimitiveType \u003d valueEnumType.getElementsType().getPrimitiveType();\n        validator.expectCanAssignTo(t, value, valueEnumPrimitiveType, primitiveType, \"incompatible enum element types\");\n    } else {\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1558,
      "functionName": "checkEnumInitializer",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eChecks the initializer of an enum. An enum can be initialized with an\nobject literal whose values must be subtypes of the declared enum element\ntype, or by copying another enum.\u003c/p\u003e\n\n\u003cp\u003eIn the case of an enum copy, we verify that the enum element type of the\nenum used for initialization is a subtype of the enum element type of\nthe enum the value is being copied in.\u003c/p\u003e\n\n\u003cp\u003eExamples:\u003c/p\u003e\n\u003cpre\u003evar myEnum \u003d {FOO: ..., BAR: ...};\nvar myEnum \u003d myOtherEnum;\u003c/pre\u003e\n\n@param value the value used for initialization of the enum\n@param primitiveType The type of each element of the enum.\n",
      "diff": "@@ -1,16 +1,13 @@\n private void checkEnumInitializer(NodeTraversal t, Node value, JSType primitiveType) {\n     if (value.getType() \u003d\u003d Token.OBJECTLIT) {\n-        value \u003d value.getFirstChild();\n-        value \u003d (value \u003d\u003d null) ? null : value.getNext();\n-        while (value !\u003d null) {\n-            validator.expectCanAssignTo(t, value, getJSType(value), primitiveType, \"element type must match enum\u0027s type\");\n-            value \u003d value.getNext();\n-            value \u003d (value \u003d\u003d null) ? null : value.getNext();\n+        for (Node key \u003d value.getFirstChild(); key !\u003d null; key \u003d key.getNext()) {\n+            Node propValue \u003d key.getFirstChild();\n+            validator.expectCanAssignTo(t, propValue, getJSType(propValue), primitiveType, \"element type must match enum\u0027s type\");\n         }\n     } else if (value.getJSType() instanceof EnumType) {\n         EnumType valueEnumType \u003d (EnumType) value.getJSType();\n         JSType valueEnumPrimitiveType \u003d valueEnumType.getElementsType().getPrimitiveType();\n         validator.expectCanAssignTo(t, value, valueEnumPrimitiveType, primitiveType, \"incompatible enum element types\");\n     } else {\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,16 @@\n+private void checkEnumInitializer(NodeTraversal t, Node value, JSType primitiveType) {\n+    if (value.getType() \u003d\u003d Token.OBJECTLIT) {\n+        value \u003d value.getFirstChild();\n+        value \u003d (value \u003d\u003d null) ? null : value.getNext();\n+        while (value !\u003d null) {\n+            validator.expectCanAssignTo(t, value, getJSType(value), primitiveType, \"element type must match enum\u0027s type\");\n+            value \u003d value.getNext();\n+            value \u003d (value \u003d\u003d null) ? null : value.getNext();\n+        }\n+    } else if (value.getJSType() instanceof EnumType) {\n+        EnumType valueEnumType \u003d (EnumType) value.getJSType();\n+        JSType valueEnumPrimitiveType \u003d valueEnumType.getElementsType().getPrimitiveType();\n+        validator.expectCanAssignTo(t, value, valueEnumPrimitiveType, primitiveType, \"incompatible enum element types\");\n+    } else {\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void checkEnumInitializer(NodeTraversal t, Node value, JSType primitiveType) {\n    if (value.getType() \u003d\u003d Token.OBJECTLIT) {\n        value \u003d value.getFirstChild();\n        value \u003d (value \u003d\u003d null) ? null : value.getNext();\n        while (value !\u003d null) {\n            validator.expectCanAssignTo(t, value, getJSType(value), primitiveType, \"element type must match enum\u0027s type\");\n            value \u003d value.getNext();\n            value \u003d (value \u003d\u003d null) ? null : value.getNext();\n        }\n    } else if (value.getJSType() instanceof EnumType) {\n        EnumType valueEnumType \u003d (EnumType) value.getJSType();\n        JSType valueEnumPrimitiveType \u003d valueEnumType.getElementsType().getPrimitiveType();\n        validator.expectCanAssignTo(t, value, valueEnumPrimitiveType, primitiveType, \"incompatible enum element types\");\n    } else {\n    }\n}",
      "path": "src/com/google/javascript/jscomp/TypeCheck.java",
      "functionStartLine": 1525,
      "functionName": "checkEnumInitializer",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eChecks the initializer of an enum. An enum can be initialized with an\nobject literal whose values must be subtypes of the declared enum element\ntype, or by copying another enum.\u003c/p\u003e\n\n\u003cp\u003eIn the case of an enum copy, we verify that the enum element type of the\nenum used for initialization is a subtype of the enum element type of\nthe enum the value is being copied in.\u003c/p\u003e\n\n\u003cp\u003eExamples:\u003c/p\u003e\n\u003cpre\u003evar myEnum \u003d {FOO: ..., BAR: ...};\nvar myEnum \u003d myOtherEnum;\u003c/pre\u003e\n\n@param value the value used for initialization of the enum\n@param primitiveType The type of each element of the enum.\n"
    }
  }
}