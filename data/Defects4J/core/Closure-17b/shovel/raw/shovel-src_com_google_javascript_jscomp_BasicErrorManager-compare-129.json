{
  "origin": "codeshovel",
  "repositoryName": "Closure-17b",
  "repositoryPath": "/tmp/Closure-17b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BasicErrorManager.java",
  "functionName": "compare",
  "functionId": "$compare___p1-ErrorWithLevel__p2-ErrorWithLevel",
  "sourceFilePath": "src/com/google/javascript/jscomp/BasicErrorManager.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 129,
  "functionEndLine": 179,
  "numCommitsSeen": 11,
  "timeTaken": 895,
  "changeHistory": [
    "76abdf11394c0e7515ae63335676ea3657badb45",
    "66485d3df654fa92b7500d5e15b58300677edca3",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "76abdf11394c0e7515ae63335676ea3657badb45": "Yannotationchange",
    "66485d3df654fa92b7500d5e15b58300677edca3": "Ymultichange(Yparameterchange,Ybodychange)",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "76abdf11394c0e7515ae63335676ea3657badb45": {
      "type": "Yannotationchange",
      "commitMessage": "\nMake our build warnings free.\n\nR\u003dacleung\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2830\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1301 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/28/11, 4:19 PM",
      "commitName": "76abdf11394c0e7515ae63335676ea3657badb45",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "4/12/11, 12:15 PM",
      "commitNameOld": "f322be0e576d5e2114cb59c0a6537197997b9c59",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 107.17,
      "commitsBetweenForRepo": 289,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic int compare(ErrorWithLevel p1, ErrorWithLevel p2) {\n    if (p2 \u003d\u003d null) {\n        if (p1 \u003d\u003d null) {\n            return 0;\n        } else {\n            return P1_GT_P2;\n        }\n    }\n    if (p1.level !\u003d p2.level) {\n        return p2.level.compareTo(p1.level);\n    }\n    String source1 \u003d p1.error.sourceName;\n    String source2 \u003d p2.error.sourceName;\n    if (source1 !\u003d null \u0026\u0026 source2 !\u003d null) {\n        int sourceCompare \u003d source1.compareTo(source2);\n        if (sourceCompare !\u003d 0) {\n            return sourceCompare;\n        }\n    } else if (source1 \u003d\u003d null \u0026\u0026 source2 !\u003d null) {\n        return P1_LT_P2;\n    } else if (source1 !\u003d null \u0026\u0026 source2 \u003d\u003d null) {\n        return P1_GT_P2;\n    }\n    int lineno1 \u003d p1.error.lineNumber;\n    int lineno2 \u003d p2.error.lineNumber;\n    if (lineno1 !\u003d lineno2) {\n        return lineno1 - lineno2;\n    } else if (lineno1 \u003c 0 \u0026\u0026 0 \u003c\u003d lineno2) {\n        return P1_LT_P2;\n    } else if (0 \u003c\u003d lineno1 \u0026\u0026 lineno2 \u003c 0) {\n        return P1_GT_P2;\n    }\n    int charno1 \u003d p1.error.getCharno();\n    int charno2 \u003d p2.error.getCharno();\n    if (charno1 !\u003d charno2) {\n        return charno1 - charno2;\n    } else if (charno1 \u003c 0 \u0026\u0026 0 \u003c\u003d charno2) {\n        return P1_LT_P2;\n    } else if (0 \u003c\u003d charno1 \u0026\u0026 charno2 \u003c 0) {\n        return P1_GT_P2;\n    }\n    return p1.error.description.compareTo(p2.error.description);\n}",
      "path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
      "functionStartLine": 129,
      "functionName": "compare",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,43 +1,44 @@\n+@Override\n public int compare(ErrorWithLevel p1, ErrorWithLevel p2) {\n     if (p2 \u003d\u003d null) {\n         if (p1 \u003d\u003d null) {\n             return 0;\n         } else {\n             return P1_GT_P2;\n         }\n     }\n     if (p1.level !\u003d p2.level) {\n         return p2.level.compareTo(p1.level);\n     }\n     String source1 \u003d p1.error.sourceName;\n     String source2 \u003d p2.error.sourceName;\n     if (source1 !\u003d null \u0026\u0026 source2 !\u003d null) {\n         int sourceCompare \u003d source1.compareTo(source2);\n         if (sourceCompare !\u003d 0) {\n             return sourceCompare;\n         }\n     } else if (source1 \u003d\u003d null \u0026\u0026 source2 !\u003d null) {\n         return P1_LT_P2;\n     } else if (source1 !\u003d null \u0026\u0026 source2 \u003d\u003d null) {\n         return P1_GT_P2;\n     }\n     int lineno1 \u003d p1.error.lineNumber;\n     int lineno2 \u003d p2.error.lineNumber;\n     if (lineno1 !\u003d lineno2) {\n         return lineno1 - lineno2;\n     } else if (lineno1 \u003c 0 \u0026\u0026 0 \u003c\u003d lineno2) {\n         return P1_LT_P2;\n     } else if (0 \u003c\u003d lineno1 \u0026\u0026 lineno2 \u003c 0) {\n         return P1_GT_P2;\n     }\n     int charno1 \u003d p1.error.getCharno();\n     int charno2 \u003d p2.error.getCharno();\n     if (charno1 !\u003d charno2) {\n         return charno1 - charno2;\n     } else if (charno1 \u003c 0 \u0026\u0026 0 \u003c\u003d charno2) {\n         return P1_LT_P2;\n     } else if (0 \u003c\u003d charno1 \u0026\u0026 charno2 \u003c 0) {\n         return P1_GT_P2;\n     }\n     return p1.error.description.compareTo(p2.error.description);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "",
        "newValue": "@Override"
      }
    },
    "66485d3df654fa92b7500d5e15b58300677edca3": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Use non-generic data structures in a bunch of places.\n(More for readability reasons than anything else)\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@70 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/15/10, 1:56 PM",
      "commitName": "66485d3df654fa92b7500d5e15b58300677edca3",
      "commitAuthor": "Nicholas.J.Santos",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Use non-generic data structures in a bunch of places.\n(More for readability reasons than anything else)\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@70 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/15/10, 1:56 PM",
          "commitName": "66485d3df654fa92b7500d5e15b58300677edca3",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "11/3/09, 3:51 PM",
          "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 72.92,
          "commitsBetweenForRepo": 48,
          "commitsBetweenForFile": 1,
          "actualSource": "public int compare(ErrorWithLevel p1, ErrorWithLevel p2) {\n    if (p2 \u003d\u003d null) {\n        if (p1 \u003d\u003d null) {\n            return 0;\n        } else {\n            return P1_GT_P2;\n        }\n    }\n    if (p1.level !\u003d p2.level) {\n        return p2.level.compareTo(p1.level);\n    }\n    String source1 \u003d p1.error.sourceName;\n    String source2 \u003d p2.error.sourceName;\n    if (source1 !\u003d null \u0026\u0026 source2 !\u003d null) {\n        int sourceCompare \u003d source1.compareTo(source2);\n        if (sourceCompare !\u003d 0) {\n            return sourceCompare;\n        }\n    } else if (source1 \u003d\u003d null \u0026\u0026 source2 !\u003d null) {\n        return P1_LT_P2;\n    } else if (source1 !\u003d null \u0026\u0026 source2 \u003d\u003d null) {\n        return P1_GT_P2;\n    }\n    int lineno1 \u003d p1.error.lineNumber;\n    int lineno2 \u003d p2.error.lineNumber;\n    if (lineno1 !\u003d lineno2) {\n        return lineno1 - lineno2;\n    } else if (lineno1 \u003c 0 \u0026\u0026 0 \u003c\u003d lineno2) {\n        return P1_LT_P2;\n    } else if (0 \u003c\u003d lineno1 \u0026\u0026 lineno2 \u003c 0) {\n        return P1_GT_P2;\n    }\n    int charno1 \u003d p1.error.getCharno();\n    int charno2 \u003d p2.error.getCharno();\n    if (charno1 !\u003d charno2) {\n        return charno1 - charno2;\n    } else if (charno1 \u003c 0 \u0026\u0026 0 \u003c\u003d charno2) {\n        return P1_LT_P2;\n    } else if (0 \u003c\u003d charno1 \u0026\u0026 charno2 \u003c 0) {\n        return P1_GT_P2;\n    }\n    return p1.error.description.compareTo(p2.error.description);\n}",
          "path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
          "functionStartLine": 122,
          "functionName": "compare",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,43 +1,43 @@\n-public int compare(Pair\u003cJSError, CheckLevel\u003e p1, Pair\u003cJSError, CheckLevel\u003e p2) {\n+public int compare(ErrorWithLevel p1, ErrorWithLevel p2) {\n     if (p2 \u003d\u003d null) {\n         if (p1 \u003d\u003d null) {\n             return 0;\n         } else {\n             return P1_GT_P2;\n         }\n     }\n-    if (p1.second !\u003d p2.second) {\n-        return p2.second.compareTo(p1.second);\n+    if (p1.level !\u003d p2.level) {\n+        return p2.level.compareTo(p1.level);\n     }\n-    String source1 \u003d p1.first.sourceName;\n-    String source2 \u003d p2.first.sourceName;\n+    String source1 \u003d p1.error.sourceName;\n+    String source2 \u003d p2.error.sourceName;\n     if (source1 !\u003d null \u0026\u0026 source2 !\u003d null) {\n         int sourceCompare \u003d source1.compareTo(source2);\n         if (sourceCompare !\u003d 0) {\n             return sourceCompare;\n         }\n     } else if (source1 \u003d\u003d null \u0026\u0026 source2 !\u003d null) {\n         return P1_LT_P2;\n     } else if (source1 !\u003d null \u0026\u0026 source2 \u003d\u003d null) {\n         return P1_GT_P2;\n     }\n-    int lineno1 \u003d p1.first.lineNumber;\n-    int lineno2 \u003d p2.first.lineNumber;\n+    int lineno1 \u003d p1.error.lineNumber;\n+    int lineno2 \u003d p2.error.lineNumber;\n     if (lineno1 !\u003d lineno2) {\n         return lineno1 - lineno2;\n     } else if (lineno1 \u003c 0 \u0026\u0026 0 \u003c\u003d lineno2) {\n         return P1_LT_P2;\n     } else if (0 \u003c\u003d lineno1 \u0026\u0026 lineno2 \u003c 0) {\n         return P1_GT_P2;\n     }\n-    int charno1 \u003d p1.first.getCharno();\n-    int charno2 \u003d p2.first.getCharno();\n+    int charno1 \u003d p1.error.getCharno();\n+    int charno2 \u003d p2.error.getCharno();\n     if (charno1 !\u003d charno2) {\n         return charno1 - charno2;\n     } else if (charno1 \u003c 0 \u0026\u0026 0 \u003c\u003d charno2) {\n         return P1_LT_P2;\n     } else if (0 \u003c\u003d charno1 \u0026\u0026 charno2 \u003c 0) {\n         return P1_GT_P2;\n     }\n-    return p1.first.description.compareTo(p2.first.description);\n+    return p1.error.description.compareTo(p2.error.description);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[p1-Pair\u003cJSError,CheckLevel\u003e, p2-Pair\u003cJSError,CheckLevel\u003e]",
            "newValue": "[p1-ErrorWithLevel, p2-ErrorWithLevel]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Use non-generic data structures in a bunch of places.\n(More for readability reasons than anything else)\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@70 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/15/10, 1:56 PM",
          "commitName": "66485d3df654fa92b7500d5e15b58300677edca3",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "11/3/09, 3:51 PM",
          "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 72.92,
          "commitsBetweenForRepo": 48,
          "commitsBetweenForFile": 1,
          "actualSource": "public int compare(ErrorWithLevel p1, ErrorWithLevel p2) {\n    if (p2 \u003d\u003d null) {\n        if (p1 \u003d\u003d null) {\n            return 0;\n        } else {\n            return P1_GT_P2;\n        }\n    }\n    if (p1.level !\u003d p2.level) {\n        return p2.level.compareTo(p1.level);\n    }\n    String source1 \u003d p1.error.sourceName;\n    String source2 \u003d p2.error.sourceName;\n    if (source1 !\u003d null \u0026\u0026 source2 !\u003d null) {\n        int sourceCompare \u003d source1.compareTo(source2);\n        if (sourceCompare !\u003d 0) {\n            return sourceCompare;\n        }\n    } else if (source1 \u003d\u003d null \u0026\u0026 source2 !\u003d null) {\n        return P1_LT_P2;\n    } else if (source1 !\u003d null \u0026\u0026 source2 \u003d\u003d null) {\n        return P1_GT_P2;\n    }\n    int lineno1 \u003d p1.error.lineNumber;\n    int lineno2 \u003d p2.error.lineNumber;\n    if (lineno1 !\u003d lineno2) {\n        return lineno1 - lineno2;\n    } else if (lineno1 \u003c 0 \u0026\u0026 0 \u003c\u003d lineno2) {\n        return P1_LT_P2;\n    } else if (0 \u003c\u003d lineno1 \u0026\u0026 lineno2 \u003c 0) {\n        return P1_GT_P2;\n    }\n    int charno1 \u003d p1.error.getCharno();\n    int charno2 \u003d p2.error.getCharno();\n    if (charno1 !\u003d charno2) {\n        return charno1 - charno2;\n    } else if (charno1 \u003c 0 \u0026\u0026 0 \u003c\u003d charno2) {\n        return P1_LT_P2;\n    } else if (0 \u003c\u003d charno1 \u0026\u0026 charno2 \u003c 0) {\n        return P1_GT_P2;\n    }\n    return p1.error.description.compareTo(p2.error.description);\n}",
          "path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
          "functionStartLine": 122,
          "functionName": "compare",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,43 +1,43 @@\n-public int compare(Pair\u003cJSError, CheckLevel\u003e p1, Pair\u003cJSError, CheckLevel\u003e p2) {\n+public int compare(ErrorWithLevel p1, ErrorWithLevel p2) {\n     if (p2 \u003d\u003d null) {\n         if (p1 \u003d\u003d null) {\n             return 0;\n         } else {\n             return P1_GT_P2;\n         }\n     }\n-    if (p1.second !\u003d p2.second) {\n-        return p2.second.compareTo(p1.second);\n+    if (p1.level !\u003d p2.level) {\n+        return p2.level.compareTo(p1.level);\n     }\n-    String source1 \u003d p1.first.sourceName;\n-    String source2 \u003d p2.first.sourceName;\n+    String source1 \u003d p1.error.sourceName;\n+    String source2 \u003d p2.error.sourceName;\n     if (source1 !\u003d null \u0026\u0026 source2 !\u003d null) {\n         int sourceCompare \u003d source1.compareTo(source2);\n         if (sourceCompare !\u003d 0) {\n             return sourceCompare;\n         }\n     } else if (source1 \u003d\u003d null \u0026\u0026 source2 !\u003d null) {\n         return P1_LT_P2;\n     } else if (source1 !\u003d null \u0026\u0026 source2 \u003d\u003d null) {\n         return P1_GT_P2;\n     }\n-    int lineno1 \u003d p1.first.lineNumber;\n-    int lineno2 \u003d p2.first.lineNumber;\n+    int lineno1 \u003d p1.error.lineNumber;\n+    int lineno2 \u003d p2.error.lineNumber;\n     if (lineno1 !\u003d lineno2) {\n         return lineno1 - lineno2;\n     } else if (lineno1 \u003c 0 \u0026\u0026 0 \u003c\u003d lineno2) {\n         return P1_LT_P2;\n     } else if (0 \u003c\u003d lineno1 \u0026\u0026 lineno2 \u003c 0) {\n         return P1_GT_P2;\n     }\n-    int charno1 \u003d p1.first.getCharno();\n-    int charno2 \u003d p2.first.getCharno();\n+    int charno1 \u003d p1.error.getCharno();\n+    int charno2 \u003d p2.error.getCharno();\n     if (charno1 !\u003d charno2) {\n         return charno1 - charno2;\n     } else if (charno1 \u003c 0 \u0026\u0026 0 \u003c\u003d charno2) {\n         return P1_LT_P2;\n     } else if (0 \u003c\u003d charno1 \u0026\u0026 charno2 \u003c 0) {\n         return P1_GT_P2;\n     }\n-    return p1.first.description.compareTo(p2.first.description);\n+    return p1.error.description.compareTo(p2.error.description);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,43 @@\n+public int compare(Pair\u003cJSError, CheckLevel\u003e p1, Pair\u003cJSError, CheckLevel\u003e p2) {\n+    if (p2 \u003d\u003d null) {\n+        if (p1 \u003d\u003d null) {\n+            return 0;\n+        } else {\n+            return P1_GT_P2;\n+        }\n+    }\n+    if (p1.second !\u003d p2.second) {\n+        return p2.second.compareTo(p1.second);\n+    }\n+    String source1 \u003d p1.first.sourceName;\n+    String source2 \u003d p2.first.sourceName;\n+    if (source1 !\u003d null \u0026\u0026 source2 !\u003d null) {\n+        int sourceCompare \u003d source1.compareTo(source2);\n+        if (sourceCompare !\u003d 0) {\n+            return sourceCompare;\n+        }\n+    } else if (source1 \u003d\u003d null \u0026\u0026 source2 !\u003d null) {\n+        return P1_LT_P2;\n+    } else if (source1 !\u003d null \u0026\u0026 source2 \u003d\u003d null) {\n+        return P1_GT_P2;\n+    }\n+    int lineno1 \u003d p1.first.lineNumber;\n+    int lineno2 \u003d p2.first.lineNumber;\n+    if (lineno1 !\u003d lineno2) {\n+        return lineno1 - lineno2;\n+    } else if (lineno1 \u003c 0 \u0026\u0026 0 \u003c\u003d lineno2) {\n+        return P1_LT_P2;\n+    } else if (0 \u003c\u003d lineno1 \u0026\u0026 lineno2 \u003c 0) {\n+        return P1_GT_P2;\n+    }\n+    int charno1 \u003d p1.first.getCharno();\n+    int charno2 \u003d p2.first.getCharno();\n+    if (charno1 !\u003d charno2) {\n+        return charno1 - charno2;\n+    } else if (charno1 \u003c 0 \u0026\u0026 0 \u003c\u003d charno2) {\n+        return P1_LT_P2;\n+    } else if (0 \u003c\u003d charno1 \u0026\u0026 charno2 \u003c 0) {\n+        return P1_GT_P2;\n+    }\n+    return p1.first.description.compareTo(p2.first.description);\n+}\n\\ No newline at end of file\n",
      "actualSource": "public int compare(Pair\u003cJSError, CheckLevel\u003e p1, Pair\u003cJSError, CheckLevel\u003e p2) {\n    if (p2 \u003d\u003d null) {\n        if (p1 \u003d\u003d null) {\n            return 0;\n        } else {\n            return P1_GT_P2;\n        }\n    }\n    if (p1.second !\u003d p2.second) {\n        return p2.second.compareTo(p1.second);\n    }\n    String source1 \u003d p1.first.sourceName;\n    String source2 \u003d p2.first.sourceName;\n    if (source1 !\u003d null \u0026\u0026 source2 !\u003d null) {\n        int sourceCompare \u003d source1.compareTo(source2);\n        if (sourceCompare !\u003d 0) {\n            return sourceCompare;\n        }\n    } else if (source1 \u003d\u003d null \u0026\u0026 source2 !\u003d null) {\n        return P1_LT_P2;\n    } else if (source1 !\u003d null \u0026\u0026 source2 \u003d\u003d null) {\n        return P1_GT_P2;\n    }\n    int lineno1 \u003d p1.first.lineNumber;\n    int lineno2 \u003d p2.first.lineNumber;\n    if (lineno1 !\u003d lineno2) {\n        return lineno1 - lineno2;\n    } else if (lineno1 \u003c 0 \u0026\u0026 0 \u003c\u003d lineno2) {\n        return P1_LT_P2;\n    } else if (0 \u003c\u003d lineno1 \u0026\u0026 lineno2 \u003c 0) {\n        return P1_GT_P2;\n    }\n    int charno1 \u003d p1.first.getCharno();\n    int charno2 \u003d p2.first.getCharno();\n    if (charno1 !\u003d charno2) {\n        return charno1 - charno2;\n    } else if (charno1 \u003c 0 \u0026\u0026 0 \u003c\u003d charno2) {\n        return P1_LT_P2;\n    } else if (0 \u003c\u003d charno1 \u0026\u0026 charno2 \u003c 0) {\n        return P1_GT_P2;\n    }\n    return p1.first.description.compareTo(p2.first.description);\n}",
      "path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
      "functionStartLine": 123,
      "functionName": "compare",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}