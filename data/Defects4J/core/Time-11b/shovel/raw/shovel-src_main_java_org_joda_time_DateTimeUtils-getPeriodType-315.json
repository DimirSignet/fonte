{
  "origin": "codeshovel",
  "repositoryName": "Time-11b",
  "repositoryPath": "/tmp/Time-11b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DateTimeUtils.java",
  "functionName": "getPeriodType",
  "functionId": "getPeriodType___type-PeriodType",
  "sourceFilePath": "src/main/java/org/joda/time/DateTimeUtils.java",
  "functionAnnotation": "",
  "functionDoc": "Gets the period type handling null.\n\u003cp\u003e\nIf the zone is \u003ccode\u003enull\u003c/code\u003e, {@link PeriodType#standard()}\nwill be returned. Otherwise, the type specified is returned.\n\n@param type the time zone to use, null means the standard type\n@return the type to use, never null\n",
  "functionStartLine": 315,
  "functionEndLine": 320,
  "numCommitsSeen": 43,
  "timeTaken": 2555,
  "changeHistory": [
    "df4a82f4fb46cc2248280c462e18f08d55a3d112",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1",
    "73c467922eaf2579fa5c24e5aa2c8e5ffdc50aeb",
    "5f2aa4794e8094eb6b3018589c3a751f61bd2fa6",
    "0e2ca0e439c9d726fa24dbe589bb8db3354b11e1",
    "b10e0031a3572dfd2783ec0b179a59b5532a4c1f",
    "8daa099d389ca45b01f1343fb403ec560d7428bd",
    "ad8e643d2533b2d562adb7c66c6d2917c5f0305c"
  ],
  "changeHistoryShort": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": "Yfilerename",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": "Yfilerename",
    "73c467922eaf2579fa5c24e5aa2c8e5ffdc50aeb": "Ymultichange(Ybodychange,Ydocchange)",
    "5f2aa4794e8094eb6b3018589c3a751f61bd2fa6": "Ymultichange(Ymovefromfile,Ymodifierchange,Ydocchange,Yrename)",
    "0e2ca0e439c9d726fa24dbe589bb8db3354b11e1": "Yfilerename",
    "b10e0031a3572dfd2783ec0b179a59b5532a4c1f": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange,Ydocchange)",
    "8daa099d389ca45b01f1343fb403ec560d7428bd": "Ymultichange(Yfilerename,Ybodychange)",
    "ad8e643d2533b2d562adb7c66c6d2917c5f0305c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": {
      "type": "Yfilerename",
      "commitMessage": "Remove JodaTime folder moving files to top level\n",
      "commitDate": "5/16/11, 10:02 AM",
      "commitName": "df4a82f4fb46cc2248280c462e18f08d55a3d112",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "5/16/11, 9:58 AM",
      "commitNameOld": "72b22654962284bac59c2777131b42a2d1f53228",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static final PeriodType getPeriodType(PeriodType type) {\n    if (type \u003d\u003d null) {\n        return PeriodType.standard();\n    }\n    return type;\n}",
      "path": "src/main/java/org/joda/time/DateTimeUtils.java",
      "functionStartLine": 285,
      "functionName": "getPeriodType",
      "functionAnnotation": "",
      "functionDoc": "Gets the period type handling null.\n\u003cp\u003e\nIf the zone is \u003ccode\u003enull\u003c/code\u003e, {@link PeriodType#standard()}\nwill be returned. Otherwise, the type specified is returned.\n\n@param type the time zone to use, null means the standard type\n@return the type to use, never null\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/main/java/org/joda/time/DateTimeUtils.java",
        "newPath": "src/main/java/org/joda/time/DateTimeUtils.java"
      }
    },
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": {
      "type": "Yfilerename",
      "commitMessage": "Convert to maven 2\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1540 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/8/10, 5:17 PM",
      "commitName": "53feb3fa56af7260e607844524b7e5a9be49ecc1",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/8/10, 5:02 PM",
      "commitNameOld": "7fa2ceaf5d95d050095432aa646ea803aa35e122",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static final PeriodType getPeriodType(PeriodType type) {\n    if (type \u003d\u003d null) {\n        return PeriodType.standard();\n    }\n    return type;\n}",
      "path": "JodaTime/src/main/java/org/joda/time/DateTimeUtils.java",
      "functionStartLine": 285,
      "functionName": "getPeriodType",
      "functionAnnotation": "",
      "functionDoc": "Gets the period type handling null.\n\u003cp\u003e\nIf the zone is \u003ccode\u003enull\u003c/code\u003e, {@link PeriodType#standard()}\nwill be returned. Otherwise, the type specified is returned.\n\n@param type the time zone to use, null means the standard type\n@return the type to use, never null\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/java/org/joda/time/DateTimeUtils.java",
        "newPath": "JodaTime/src/main/java/org/joda/time/DateTimeUtils.java"
      }
    },
    "73c467922eaf2579fa5c24e5aa2c8e5ffdc50aeb": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Refactor Periods\n- no longer have a chronology\n- period type is based around DurationFieldType\n- array structure internally\n- not convertable to durations\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@478 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "9/4/04, 4:48 PM",
      "commitName": "73c467922eaf2579fa5c24e5aa2c8e5ffdc50aeb",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Refactor Periods\n- no longer have a chronology\n- period type is based around DurationFieldType\n- array structure internally\n- not convertable to durations\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@478 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "9/4/04, 4:48 PM",
          "commitName": "73c467922eaf2579fa5c24e5aa2c8e5ffdc50aeb",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "8/21/04, 2:29 PM",
          "commitNameOld": "5f2aa4794e8094eb6b3018589c3a751f61bd2fa6",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 14.1,
          "commitsBetweenForRepo": 63,
          "commitsBetweenForFile": 1,
          "actualSource": "public static final PeriodType getPeriodType(PeriodType type) {\n    if (type \u003d\u003d null) {\n        return PeriodType.standard();\n    }\n    return type;\n}",
          "path": "JodaTime/src/java/org/joda/time/DateTimeUtils.java",
          "functionStartLine": 250,
          "functionName": "getPeriodType",
          "functionAnnotation": "",
          "functionDoc": "Gets the period type handling null.\n\u003cp\u003e\nIf the zone is \u003ccode\u003enull\u003c/code\u003e, {@link PeriodType#standard()}\nwill be returned. Otherwise, the type specified is returned.\n\n@param type the time zone to use, null means the standard type\n@return the type to use, never null\n",
          "diff": "@@ -1,6 +1,6 @@\n public static final PeriodType getPeriodType(PeriodType type) {\n     if (type \u003d\u003d null) {\n-        return PeriodType.getAllType();\n+        return PeriodType.standard();\n     }\n     return type;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Refactor Periods\n- no longer have a chronology\n- period type is based around DurationFieldType\n- array structure internally\n- not convertable to durations\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@478 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "9/4/04, 4:48 PM",
          "commitName": "73c467922eaf2579fa5c24e5aa2c8e5ffdc50aeb",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "8/21/04, 2:29 PM",
          "commitNameOld": "5f2aa4794e8094eb6b3018589c3a751f61bd2fa6",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 14.1,
          "commitsBetweenForRepo": 63,
          "commitsBetweenForFile": 1,
          "actualSource": "public static final PeriodType getPeriodType(PeriodType type) {\n    if (type \u003d\u003d null) {\n        return PeriodType.standard();\n    }\n    return type;\n}",
          "path": "JodaTime/src/java/org/joda/time/DateTimeUtils.java",
          "functionStartLine": 250,
          "functionName": "getPeriodType",
          "functionAnnotation": "",
          "functionDoc": "Gets the period type handling null.\n\u003cp\u003e\nIf the zone is \u003ccode\u003enull\u003c/code\u003e, {@link PeriodType#standard()}\nwill be returned. Otherwise, the type specified is returned.\n\n@param type the time zone to use, null means the standard type\n@return the type to use, never null\n",
          "diff": "@@ -1,6 +1,6 @@\n public static final PeriodType getPeriodType(PeriodType type) {\n     if (type \u003d\u003d null) {\n-        return PeriodType.getAllType();\n+        return PeriodType.standard();\n     }\n     return type;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Gets the period type handling null.\n\u003cp\u003e\nIf the zone is \u003ccode\u003enull\u003c/code\u003e, {@link PeriodType#getAllType()}\nwill be returned. Otherwise, the type specified is returned.\n\n@param type the time zone to use, null means the All type\n@return the type to use, never null\n",
            "newValue": "Gets the period type handling null.\n\u003cp\u003e\nIf the zone is \u003ccode\u003enull\u003c/code\u003e, {@link PeriodType#standard()}\nwill be returned. Otherwise, the type specified is returned.\n\n@param type the time zone to use, null means the standard type\n@return the type to use, never null\n"
          }
        }
      ]
    },
    "5f2aa4794e8094eb6b3018589c3a751f61bd2fa6": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ydocchange,Yrename)",
      "commitMessage": "Create BasePeriod\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@415 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/21/04, 2:29 PM",
      "commitName": "5f2aa4794e8094eb6b3018589c3a751f61bd2fa6",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "Create BasePeriod\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@415 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "8/21/04, 2:29 PM",
          "commitName": "5f2aa4794e8094eb6b3018589c3a751f61bd2fa6",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "8/20/04, 9:17 PM",
          "commitNameOld": "7c064bbf222d8abec91abb9a0790014ff6f06cea",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 0.72,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static final PeriodType getPeriodType(PeriodType type) {\n    if (type \u003d\u003d null) {\n        return PeriodType.getAllType();\n    }\n    return type;\n}",
          "path": "JodaTime/src/java/org/joda/time/DateTimeUtils.java",
          "functionStartLine": 250,
          "functionName": "getPeriodType",
          "functionAnnotation": "",
          "functionDoc": "Gets the period type handling null.\n\u003cp\u003e\nIf the zone is \u003ccode\u003enull\u003c/code\u003e, {@link PeriodType#getAllType()}\nwill be returned. Otherwise, the type specified is returned.\n\n@param type the time zone to use, null means the All type\n@return the type to use, never null\n",
          "diff": "@@ -1,6 +1,6 @@\n-protected final PeriodType checkPeriodType(PeriodType type) {\n+public static final PeriodType getPeriodType(PeriodType type) {\n     if (type \u003d\u003d null) {\n         return PeriodType.getAllType();\n     }\n     return type;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "JodaTime/src/java/org/joda/time/Period.java",
            "newPath": "JodaTime/src/java/org/joda/time/DateTimeUtils.java",
            "oldMethodName": "checkPeriodType",
            "newMethodName": "getPeriodType"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Create BasePeriod\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@415 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "8/21/04, 2:29 PM",
          "commitName": "5f2aa4794e8094eb6b3018589c3a751f61bd2fa6",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "8/20/04, 9:17 PM",
          "commitNameOld": "7c064bbf222d8abec91abb9a0790014ff6f06cea",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 0.72,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static final PeriodType getPeriodType(PeriodType type) {\n    if (type \u003d\u003d null) {\n        return PeriodType.getAllType();\n    }\n    return type;\n}",
          "path": "JodaTime/src/java/org/joda/time/DateTimeUtils.java",
          "functionStartLine": 250,
          "functionName": "getPeriodType",
          "functionAnnotation": "",
          "functionDoc": "Gets the period type handling null.\n\u003cp\u003e\nIf the zone is \u003ccode\u003enull\u003c/code\u003e, {@link PeriodType#getAllType()}\nwill be returned. Otherwise, the type specified is returned.\n\n@param type the time zone to use, null means the All type\n@return the type to use, never null\n",
          "diff": "@@ -1,6 +1,6 @@\n-protected final PeriodType checkPeriodType(PeriodType type) {\n+public static final PeriodType getPeriodType(PeriodType type) {\n     if (type \u003d\u003d null) {\n         return PeriodType.getAllType();\n     }\n     return type;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[protected, final]",
            "newValue": "[public, static, final]"
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Create BasePeriod\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@415 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "8/21/04, 2:29 PM",
          "commitName": "5f2aa4794e8094eb6b3018589c3a751f61bd2fa6",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "8/20/04, 9:17 PM",
          "commitNameOld": "7c064bbf222d8abec91abb9a0790014ff6f06cea",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 0.72,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static final PeriodType getPeriodType(PeriodType type) {\n    if (type \u003d\u003d null) {\n        return PeriodType.getAllType();\n    }\n    return type;\n}",
          "path": "JodaTime/src/java/org/joda/time/DateTimeUtils.java",
          "functionStartLine": 250,
          "functionName": "getPeriodType",
          "functionAnnotation": "",
          "functionDoc": "Gets the period type handling null.\n\u003cp\u003e\nIf the zone is \u003ccode\u003enull\u003c/code\u003e, {@link PeriodType#getAllType()}\nwill be returned. Otherwise, the type specified is returned.\n\n@param type the time zone to use, null means the All type\n@return the type to use, never null\n",
          "diff": "@@ -1,6 +1,6 @@\n-protected final PeriodType checkPeriodType(PeriodType type) {\n+public static final PeriodType getPeriodType(PeriodType type) {\n     if (type \u003d\u003d null) {\n         return PeriodType.getAllType();\n     }\n     return type;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Validates a period type, converting nulls to a default value and\nchecking the type is suitable for this instance.\n\n@param type the type to check, may be null\n@return the validated type to use, not null\n@throws IllegalArgumentException if the period type is not precise\n",
            "newValue": "Gets the period type handling null.\n\u003cp\u003e\nIf the zone is \u003ccode\u003enull\u003c/code\u003e, {@link PeriodType#getAllType()}\nwill be returned. Otherwise, the type specified is returned.\n\n@param type the time zone to use, null means the All type\n@return the type to use, never null\n"
          }
        },
        {
          "type": "Yrename",
          "commitMessage": "Create BasePeriod\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@415 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "8/21/04, 2:29 PM",
          "commitName": "5f2aa4794e8094eb6b3018589c3a751f61bd2fa6",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "8/20/04, 9:17 PM",
          "commitNameOld": "7c064bbf222d8abec91abb9a0790014ff6f06cea",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 0.72,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static final PeriodType getPeriodType(PeriodType type) {\n    if (type \u003d\u003d null) {\n        return PeriodType.getAllType();\n    }\n    return type;\n}",
          "path": "JodaTime/src/java/org/joda/time/DateTimeUtils.java",
          "functionStartLine": 250,
          "functionName": "getPeriodType",
          "functionAnnotation": "",
          "functionDoc": "Gets the period type handling null.\n\u003cp\u003e\nIf the zone is \u003ccode\u003enull\u003c/code\u003e, {@link PeriodType#getAllType()}\nwill be returned. Otherwise, the type specified is returned.\n\n@param type the time zone to use, null means the All type\n@return the type to use, never null\n",
          "diff": "@@ -1,6 +1,6 @@\n-protected final PeriodType checkPeriodType(PeriodType type) {\n+public static final PeriodType getPeriodType(PeriodType type) {\n     if (type \u003d\u003d null) {\n         return PeriodType.getAllType();\n     }\n     return type;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "checkPeriodType",
            "newValue": "getPeriodType"
          }
        }
      ]
    },
    "0e2ca0e439c9d726fa24dbe589bb8db3354b11e1": {
      "type": "Yfilerename",
      "commitMessage": "Change TimePeriod to Period\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@364 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/6/04, 3:32 PM",
      "commitName": "0e2ca0e439c9d726fa24dbe589bb8db3354b11e1",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/6/04, 11:49 AM",
      "commitNameOld": "b10e0031a3572dfd2783ec0b179a59b5532a4c1f",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.15,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected final PeriodType checkPeriodType(PeriodType type) {\n    if (type \u003d\u003d null) {\n        return PeriodType.getAllType();\n    }\n    return type;\n}",
      "path": "JodaTime/src/java/org/joda/time/Period.java",
      "functionStartLine": 253,
      "functionName": "checkPeriodType",
      "functionAnnotation": "",
      "functionDoc": "Validates a period type, converting nulls to a default value and\nchecking the type is suitable for this instance.\n\n@param type the type to check, may be null\n@return the validated type to use, not null\n@throws IllegalArgumentException if the period type is not precise\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/java/org/joda/time/TimePeriod.java",
        "newPath": "JodaTime/src/java/org/joda/time/Period.java"
      }
    },
    "b10e0031a3572dfd2783ec0b179a59b5532a4c1f": {
      "type": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange,Ydocchange)",
      "commitMessage": "Change DurationType to PeriodType\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@363 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/6/04, 11:49 AM",
      "commitName": "b10e0031a3572dfd2783ec0b179a59b5532a4c1f",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "Change DurationType to PeriodType\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@363 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "8/6/04, 11:49 AM",
          "commitName": "b10e0031a3572dfd2783ec0b179a59b5532a4c1f",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "8/3/04, 3:57 PM",
          "commitNameOld": "24e79cfd1b603f32ea78a132762ee03b77ed934f",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 2.83,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "actualSource": "protected final PeriodType checkPeriodType(PeriodType type) {\n    if (type \u003d\u003d null) {\n        return PeriodType.getAllType();\n    }\n    return type;\n}",
          "path": "JodaTime/src/java/org/joda/time/TimePeriod.java",
          "functionStartLine": 253,
          "functionName": "checkPeriodType",
          "functionAnnotation": "",
          "functionDoc": "Validates a period type, converting nulls to a default value and\nchecking the type is suitable for this instance.\n\n@param type the type to check, may be null\n@return the validated type to use, not null\n@throws IllegalArgumentException if the period type is not precise\n",
          "diff": "@@ -1,6 +1,6 @@\n-protected final DurationType checkDurationType(DurationType type) {\n+protected final PeriodType checkPeriodType(PeriodType type) {\n     if (type \u003d\u003d null) {\n-        return DurationType.getAllType();\n+        return PeriodType.getAllType();\n     }\n     return type;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "checkDurationType",
            "newValue": "checkPeriodType"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "Change DurationType to PeriodType\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@363 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "8/6/04, 11:49 AM",
          "commitName": "b10e0031a3572dfd2783ec0b179a59b5532a4c1f",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "8/3/04, 3:57 PM",
          "commitNameOld": "24e79cfd1b603f32ea78a132762ee03b77ed934f",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 2.83,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "actualSource": "protected final PeriodType checkPeriodType(PeriodType type) {\n    if (type \u003d\u003d null) {\n        return PeriodType.getAllType();\n    }\n    return type;\n}",
          "path": "JodaTime/src/java/org/joda/time/TimePeriod.java",
          "functionStartLine": 253,
          "functionName": "checkPeriodType",
          "functionAnnotation": "",
          "functionDoc": "Validates a period type, converting nulls to a default value and\nchecking the type is suitable for this instance.\n\n@param type the type to check, may be null\n@return the validated type to use, not null\n@throws IllegalArgumentException if the period type is not precise\n",
          "diff": "@@ -1,6 +1,6 @@\n-protected final DurationType checkDurationType(DurationType type) {\n+protected final PeriodType checkPeriodType(PeriodType type) {\n     if (type \u003d\u003d null) {\n-        return DurationType.getAllType();\n+        return PeriodType.getAllType();\n     }\n     return type;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[type-DurationType]",
            "newValue": "[type-PeriodType]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "Change DurationType to PeriodType\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@363 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "8/6/04, 11:49 AM",
          "commitName": "b10e0031a3572dfd2783ec0b179a59b5532a4c1f",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "8/3/04, 3:57 PM",
          "commitNameOld": "24e79cfd1b603f32ea78a132762ee03b77ed934f",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 2.83,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "actualSource": "protected final PeriodType checkPeriodType(PeriodType type) {\n    if (type \u003d\u003d null) {\n        return PeriodType.getAllType();\n    }\n    return type;\n}",
          "path": "JodaTime/src/java/org/joda/time/TimePeriod.java",
          "functionStartLine": 253,
          "functionName": "checkPeriodType",
          "functionAnnotation": "",
          "functionDoc": "Validates a period type, converting nulls to a default value and\nchecking the type is suitable for this instance.\n\n@param type the type to check, may be null\n@return the validated type to use, not null\n@throws IllegalArgumentException if the period type is not precise\n",
          "diff": "@@ -1,6 +1,6 @@\n-protected final DurationType checkDurationType(DurationType type) {\n+protected final PeriodType checkPeriodType(PeriodType type) {\n     if (type \u003d\u003d null) {\n-        return DurationType.getAllType();\n+        return PeriodType.getAllType();\n     }\n     return type;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "DurationType",
            "newValue": "PeriodType"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Change DurationType to PeriodType\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@363 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "8/6/04, 11:49 AM",
          "commitName": "b10e0031a3572dfd2783ec0b179a59b5532a4c1f",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "8/3/04, 3:57 PM",
          "commitNameOld": "24e79cfd1b603f32ea78a132762ee03b77ed934f",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 2.83,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "actualSource": "protected final PeriodType checkPeriodType(PeriodType type) {\n    if (type \u003d\u003d null) {\n        return PeriodType.getAllType();\n    }\n    return type;\n}",
          "path": "JodaTime/src/java/org/joda/time/TimePeriod.java",
          "functionStartLine": 253,
          "functionName": "checkPeriodType",
          "functionAnnotation": "",
          "functionDoc": "Validates a period type, converting nulls to a default value and\nchecking the type is suitable for this instance.\n\n@param type the type to check, may be null\n@return the validated type to use, not null\n@throws IllegalArgumentException if the period type is not precise\n",
          "diff": "@@ -1,6 +1,6 @@\n-protected final DurationType checkDurationType(DurationType type) {\n+protected final PeriodType checkPeriodType(PeriodType type) {\n     if (type \u003d\u003d null) {\n-        return DurationType.getAllType();\n+        return PeriodType.getAllType();\n     }\n     return type;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Change DurationType to PeriodType\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@363 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "8/6/04, 11:49 AM",
          "commitName": "b10e0031a3572dfd2783ec0b179a59b5532a4c1f",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "8/3/04, 3:57 PM",
          "commitNameOld": "24e79cfd1b603f32ea78a132762ee03b77ed934f",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 2.83,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "actualSource": "protected final PeriodType checkPeriodType(PeriodType type) {\n    if (type \u003d\u003d null) {\n        return PeriodType.getAllType();\n    }\n    return type;\n}",
          "path": "JodaTime/src/java/org/joda/time/TimePeriod.java",
          "functionStartLine": 253,
          "functionName": "checkPeriodType",
          "functionAnnotation": "",
          "functionDoc": "Validates a period type, converting nulls to a default value and\nchecking the type is suitable for this instance.\n\n@param type the type to check, may be null\n@return the validated type to use, not null\n@throws IllegalArgumentException if the period type is not precise\n",
          "diff": "@@ -1,6 +1,6 @@\n-protected final DurationType checkDurationType(DurationType type) {\n+protected final PeriodType checkPeriodType(PeriodType type) {\n     if (type \u003d\u003d null) {\n-        return DurationType.getAllType();\n+        return PeriodType.getAllType();\n     }\n     return type;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Validates a duration type, converting nulls to a default value and\nchecking the type is suitable for this instance.\n\n@param type the type to check, may be null\n@return the validated type to use, not null\n@throws IllegalArgumentException if the duration type is not precise\n",
            "newValue": "Validates a period type, converting nulls to a default value and\nchecking the type is suitable for this instance.\n\n@param type the type to check, may be null\n@return the validated type to use, not null\n@throws IllegalArgumentException if the period type is not precise\n"
          }
        }
      ]
    },
    "8daa099d389ca45b01f1343fb403ec560d7428bd": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "Refactor to create TimePeriod and make Duration millisecond only\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@357 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/2/04, 5:02 PM",
      "commitName": "8daa099d389ca45b01f1343fb403ec560d7428bd",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "Refactor to create TimePeriod and make Duration millisecond only\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@357 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "8/2/04, 5:02 PM",
          "commitName": "8daa099d389ca45b01f1343fb403ec560d7428bd",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "8/1/04, 3:10 PM",
          "commitNameOld": "7b179791d98f66990aa09a5a9fdc237d520ef1f0",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 1.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected final DurationType checkDurationType(DurationType type) {\n    if (type \u003d\u003d null) {\n        return DurationType.getAllType();\n    }\n    return type;\n}",
          "path": "JodaTime/src/java/org/joda/time/TimePeriod.java",
          "functionStartLine": 256,
          "functionName": "checkDurationType",
          "functionAnnotation": "",
          "functionDoc": "Validates a duration type, converting nulls to a default value and\nchecking the type is suitable for this instance.\n\n@param type the type to check, may be null\n@return the validated type to use, not null\n@throws IllegalArgumentException if the duration type is not precise\n",
          "diff": "@@ -1,9 +1,6 @@\n protected final DurationType checkDurationType(DurationType type) {\n     if (type \u003d\u003d null) {\n-        return DurationType.getPreciseAllType();\n-    }\n-    if (type.isPrecise() \u003d\u003d false) {\n-        throw new IllegalArgumentException(\"The duration type must be precise: \" + type);\n+        return DurationType.getAllType();\n     }\n     return type;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "JodaTime/src/java/org/joda/time/MillisDuration.java",
            "newPath": "JodaTime/src/java/org/joda/time/TimePeriod.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Refactor to create TimePeriod and make Duration millisecond only\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@357 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "8/2/04, 5:02 PM",
          "commitName": "8daa099d389ca45b01f1343fb403ec560d7428bd",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "8/1/04, 3:10 PM",
          "commitNameOld": "7b179791d98f66990aa09a5a9fdc237d520ef1f0",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 1.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected final DurationType checkDurationType(DurationType type) {\n    if (type \u003d\u003d null) {\n        return DurationType.getAllType();\n    }\n    return type;\n}",
          "path": "JodaTime/src/java/org/joda/time/TimePeriod.java",
          "functionStartLine": 256,
          "functionName": "checkDurationType",
          "functionAnnotation": "",
          "functionDoc": "Validates a duration type, converting nulls to a default value and\nchecking the type is suitable for this instance.\n\n@param type the type to check, may be null\n@return the validated type to use, not null\n@throws IllegalArgumentException if the duration type is not precise\n",
          "diff": "@@ -1,9 +1,6 @@\n protected final DurationType checkDurationType(DurationType type) {\n     if (type \u003d\u003d null) {\n-        return DurationType.getPreciseAllType();\n-    }\n-    if (type.isPrecise() \u003d\u003d false) {\n-        throw new IllegalArgumentException(\"The duration type must be precise: \" + type);\n+        return DurationType.getAllType();\n     }\n     return type;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "ad8e643d2533b2d562adb7c66c6d2917c5f0305c": {
      "type": "Yintroduced",
      "commitMessage": "Refactor Duration to create MillisDuration for millisecond based durations\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@352 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/1/04, 12:37 PM",
      "commitName": "ad8e643d2533b2d562adb7c66c6d2917c5f0305c",
      "commitAuthor": "Stephen Colebourne",
      "diff": "@@ -0,0 +1,9 @@\n+protected final DurationType checkDurationType(DurationType type) {\n+    if (type \u003d\u003d null) {\n+        return DurationType.getPreciseAllType();\n+    }\n+    if (type.isPrecise() \u003d\u003d false) {\n+        throw new IllegalArgumentException(\"The duration type must be precise: \" + type);\n+    }\n+    return type;\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected final DurationType checkDurationType(DurationType type) {\n    if (type \u003d\u003d null) {\n        return DurationType.getPreciseAllType();\n    }\n    if (type.isPrecise() \u003d\u003d false) {\n        throw new IllegalArgumentException(\"The duration type must be precise: \" + type);\n    }\n    return type;\n}",
      "path": "JodaTime/src/java/org/joda/time/MillisDuration.java",
      "functionStartLine": 282,
      "functionName": "checkDurationType",
      "functionAnnotation": "",
      "functionDoc": "Validates a duration type, converting nulls to a default value and\nchecking the type is suitable for this instance.\n\n@param type the type to check, may be null\n@return the validated type to use, not null\n@throws IllegalArgumentException if the duration type is not precise\n"
    }
  }
}