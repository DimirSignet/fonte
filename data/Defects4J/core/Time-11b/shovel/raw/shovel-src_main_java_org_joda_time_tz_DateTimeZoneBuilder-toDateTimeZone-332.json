{
  "origin": "codeshovel",
  "repositoryName": "Time-11b",
  "repositoryPath": "/tmp/Time-11b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DateTimeZoneBuilder.java",
  "functionName": "toDateTimeZone",
  "functionId": "toDateTimeZone___id-String__outputID-boolean",
  "sourceFilePath": "src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java",
  "functionAnnotation": "",
  "functionDoc": "Processes all the rules and builds a DateTimeZone.\n\n@param id time zone id to assign\n@param outputID true if the zone id should be output\n",
  "functionStartLine": 332,
  "functionEndLine": 401,
  "numCommitsSeen": 37,
  "timeTaken": 2937,
  "changeHistory": [
    "df4a82f4fb46cc2248280c462e18f08d55a3d112",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1",
    "3f1e047c898c9c925e1faac33bb07e1cb05d88cb",
    "9b01b9e8b42e8f33f02caf91110fe6459e830fcb",
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb"
  ],
  "changeHistoryShort": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": "Yfilerename",
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": "Yfilerename",
    "3f1e047c898c9c925e1faac33bb07e1cb05d88cb": "Ybodychange",
    "9b01b9e8b42e8f33f02caf91110fe6459e830fcb": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb": "Yintroduced"
  },
  "changeHistoryDetails": {
    "df4a82f4fb46cc2248280c462e18f08d55a3d112": {
      "type": "Yfilerename",
      "commitMessage": "Remove JodaTime folder moving files to top level\n",
      "commitDate": "5/16/11, 10:02 AM",
      "commitName": "df4a82f4fb46cc2248280c462e18f08d55a3d112",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "5/16/11, 9:58 AM",
      "commitNameOld": "72b22654962284bac59c2777131b42a2d1f53228",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public DateTimeZone toDateTimeZone(String id, boolean outputID) {\n    if (id \u003d\u003d null) {\n        throw new IllegalArgumentException();\n    }\n    ArrayList\u003cTransition\u003e transitions \u003d new ArrayList\u003cTransition\u003e();\n    DSTZone tailZone \u003d null;\n    long millis \u003d Long.MIN_VALUE;\n    int saveMillis \u003d 0;\n    int ruleSetCount \u003d iRuleSets.size();\n    for (int i \u003d 0; i \u003c ruleSetCount; i++) {\n        RuleSet rs \u003d iRuleSets.get(i);\n        Transition next \u003d rs.firstTransition(millis);\n        if (next \u003d\u003d null) {\n            continue;\n        }\n        addTransition(transitions, next);\n        millis \u003d next.getMillis();\n        saveMillis \u003d next.getSaveMillis();\n        rs \u003d new RuleSet(rs);\n        while ((next \u003d rs.nextTransition(millis, saveMillis)) !\u003d null) {\n            if (addTransition(transitions, next)) {\n                if (tailZone !\u003d null) {\n                    break;\n                }\n            }\n            millis \u003d next.getMillis();\n            saveMillis \u003d next.getSaveMillis();\n            if (tailZone \u003d\u003d null \u0026\u0026 i \u003d\u003d ruleSetCount - 1) {\n                tailZone \u003d rs.buildTailZone(id);\n            }\n        }\n        millis \u003d rs.getUpperLimit(saveMillis);\n    }\n    if (transitions.size() \u003d\u003d 0) {\n        if (tailZone !\u003d null) {\n            return tailZone;\n        }\n        return buildFixedZone(id, \"UTC\", 0, 0);\n    }\n    if (transitions.size() \u003d\u003d 1 \u0026\u0026 tailZone \u003d\u003d null) {\n        Transition tr \u003d transitions.get(0);\n        return buildFixedZone(id, tr.getNameKey(), tr.getWallOffset(), tr.getStandardOffset());\n    }\n    PrecalculatedZone zone \u003d PrecalculatedZone.create(id, outputID, transitions, tailZone);\n    if (zone.isCachable()) {\n        return CachedDateTimeZone.forZone(zone);\n    }\n    return zone;\n}",
      "path": "src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java",
      "functionStartLine": 332,
      "functionName": "toDateTimeZone",
      "functionAnnotation": "",
      "functionDoc": "Processes all the rules and builds a DateTimeZone.\n\n@param id time zone id to assign\n@param outputID true if the zone id should be output\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java",
        "newPath": "src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java"
      }
    },
    "53feb3fa56af7260e607844524b7e5a9be49ecc1": {
      "type": "Yfilerename",
      "commitMessage": "Convert to maven 2\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1540 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "8/8/10, 5:17 PM",
      "commitName": "53feb3fa56af7260e607844524b7e5a9be49ecc1",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/8/10, 5:02 PM",
      "commitNameOld": "7fa2ceaf5d95d050095432aa646ea803aa35e122",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public DateTimeZone toDateTimeZone(String id, boolean outputID) {\n    if (id \u003d\u003d null) {\n        throw new IllegalArgumentException();\n    }\n    ArrayList\u003cTransition\u003e transitions \u003d new ArrayList\u003cTransition\u003e();\n    DSTZone tailZone \u003d null;\n    long millis \u003d Long.MIN_VALUE;\n    int saveMillis \u003d 0;\n    int ruleSetCount \u003d iRuleSets.size();\n    for (int i \u003d 0; i \u003c ruleSetCount; i++) {\n        RuleSet rs \u003d iRuleSets.get(i);\n        Transition next \u003d rs.firstTransition(millis);\n        if (next \u003d\u003d null) {\n            continue;\n        }\n        addTransition(transitions, next);\n        millis \u003d next.getMillis();\n        saveMillis \u003d next.getSaveMillis();\n        rs \u003d new RuleSet(rs);\n        while ((next \u003d rs.nextTransition(millis, saveMillis)) !\u003d null) {\n            if (addTransition(transitions, next)) {\n                if (tailZone !\u003d null) {\n                    break;\n                }\n            }\n            millis \u003d next.getMillis();\n            saveMillis \u003d next.getSaveMillis();\n            if (tailZone \u003d\u003d null \u0026\u0026 i \u003d\u003d ruleSetCount - 1) {\n                tailZone \u003d rs.buildTailZone(id);\n            }\n        }\n        millis \u003d rs.getUpperLimit(saveMillis);\n    }\n    if (transitions.size() \u003d\u003d 0) {\n        if (tailZone !\u003d null) {\n            return tailZone;\n        }\n        return buildFixedZone(id, \"UTC\", 0, 0);\n    }\n    if (transitions.size() \u003d\u003d 1 \u0026\u0026 tailZone \u003d\u003d null) {\n        Transition tr \u003d transitions.get(0);\n        return buildFixedZone(id, tr.getNameKey(), tr.getWallOffset(), tr.getStandardOffset());\n    }\n    PrecalculatedZone zone \u003d PrecalculatedZone.create(id, outputID, transitions, tailZone);\n    if (zone.isCachable()) {\n        return CachedDateTimeZone.forZone(zone);\n    }\n    return zone;\n}",
      "path": "JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java",
      "functionStartLine": 332,
      "functionName": "toDateTimeZone",
      "functionAnnotation": "",
      "functionDoc": "Processes all the rules and builds a DateTimeZone.\n\n@param id time zone id to assign\n@param outputID true if the zone id should be output\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java",
        "newPath": "JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java"
      }
    },
    "3f1e047c898c9c925e1faac33bb07e1cb05d88cb": {
      "type": "Ybodychange",
      "commitMessage": "Move to Java 5 with generics\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1406 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "11/4/09, 3:55 PM",
      "commitName": "3f1e047c898c9c925e1faac33bb07e1cb05d88cb",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "8/13/09, 4:26 PM",
      "commitNameOld": "6cd3a18f8cb3c907107017849ab1ac3b88e43fb5",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 83.02,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "public DateTimeZone toDateTimeZone(String id, boolean outputID) {\n    if (id \u003d\u003d null) {\n        throw new IllegalArgumentException();\n    }\n    ArrayList\u003cTransition\u003e transitions \u003d new ArrayList\u003cTransition\u003e();\n    DSTZone tailZone \u003d null;\n    long millis \u003d Long.MIN_VALUE;\n    int saveMillis \u003d 0;\n    int ruleSetCount \u003d iRuleSets.size();\n    for (int i \u003d 0; i \u003c ruleSetCount; i++) {\n        RuleSet rs \u003d iRuleSets.get(i);\n        Transition next \u003d rs.firstTransition(millis);\n        if (next \u003d\u003d null) {\n            continue;\n        }\n        addTransition(transitions, next);\n        millis \u003d next.getMillis();\n        saveMillis \u003d next.getSaveMillis();\n        rs \u003d new RuleSet(rs);\n        while ((next \u003d rs.nextTransition(millis, saveMillis)) !\u003d null) {\n            if (addTransition(transitions, next)) {\n                if (tailZone !\u003d null) {\n                    break;\n                }\n            }\n            millis \u003d next.getMillis();\n            saveMillis \u003d next.getSaveMillis();\n            if (tailZone \u003d\u003d null \u0026\u0026 i \u003d\u003d ruleSetCount - 1) {\n                tailZone \u003d rs.buildTailZone(id);\n            }\n        }\n        millis \u003d rs.getUpperLimit(saveMillis);\n    }\n    if (transitions.size() \u003d\u003d 0) {\n        if (tailZone !\u003d null) {\n            return tailZone;\n        }\n        return buildFixedZone(id, \"UTC\", 0, 0);\n    }\n    if (transitions.size() \u003d\u003d 1 \u0026\u0026 tailZone \u003d\u003d null) {\n        Transition tr \u003d transitions.get(0);\n        return buildFixedZone(id, tr.getNameKey(), tr.getWallOffset(), tr.getStandardOffset());\n    }\n    PrecalculatedZone zone \u003d PrecalculatedZone.create(id, outputID, transitions, tailZone);\n    if (zone.isCachable()) {\n        return CachedDateTimeZone.forZone(zone);\n    }\n    return zone;\n}",
      "path": "JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java",
      "functionStartLine": 332,
      "functionName": "toDateTimeZone",
      "functionAnnotation": "",
      "functionDoc": "Processes all the rules and builds a DateTimeZone.\n\n@param id time zone id to assign\n@param outputID true if the zone id should be output\n",
      "diff": "@@ -1,49 +1,49 @@\n public DateTimeZone toDateTimeZone(String id, boolean outputID) {\n     if (id \u003d\u003d null) {\n         throw new IllegalArgumentException();\n     }\n-    ArrayList transitions \u003d new ArrayList();\n+    ArrayList\u003cTransition\u003e transitions \u003d new ArrayList\u003cTransition\u003e();\n     DSTZone tailZone \u003d null;\n     long millis \u003d Long.MIN_VALUE;\n     int saveMillis \u003d 0;\n     int ruleSetCount \u003d iRuleSets.size();\n     for (int i \u003d 0; i \u003c ruleSetCount; i++) {\n-        RuleSet rs \u003d (RuleSet) iRuleSets.get(i);\n+        RuleSet rs \u003d iRuleSets.get(i);\n         Transition next \u003d rs.firstTransition(millis);\n         if (next \u003d\u003d null) {\n             continue;\n         }\n         addTransition(transitions, next);\n         millis \u003d next.getMillis();\n         saveMillis \u003d next.getSaveMillis();\n         rs \u003d new RuleSet(rs);\n         while ((next \u003d rs.nextTransition(millis, saveMillis)) !\u003d null) {\n             if (addTransition(transitions, next)) {\n                 if (tailZone !\u003d null) {\n                     break;\n                 }\n             }\n             millis \u003d next.getMillis();\n             saveMillis \u003d next.getSaveMillis();\n             if (tailZone \u003d\u003d null \u0026\u0026 i \u003d\u003d ruleSetCount - 1) {\n                 tailZone \u003d rs.buildTailZone(id);\n             }\n         }\n         millis \u003d rs.getUpperLimit(saveMillis);\n     }\n     if (transitions.size() \u003d\u003d 0) {\n         if (tailZone !\u003d null) {\n             return tailZone;\n         }\n         return buildFixedZone(id, \"UTC\", 0, 0);\n     }\n     if (transitions.size() \u003d\u003d 1 \u0026\u0026 tailZone \u003d\u003d null) {\n-        Transition tr \u003d (Transition) transitions.get(0);\n+        Transition tr \u003d transitions.get(0);\n         return buildFixedZone(id, tr.getNameKey(), tr.getWallOffset(), tr.getStandardOffset());\n     }\n     PrecalculatedZone zone \u003d PrecalculatedZone.create(id, outputID, transitions, tailZone);\n     if (zone.isCachable()) {\n         return CachedDateTimeZone.forZone(zone);\n     }\n     return zone;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9b01b9e8b42e8f33f02caf91110fe6459e830fcb": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "Fix bug where some time zones (Australia) use same abbreviated zone name for summer and winter\nbug 1716305\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1218 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "5/20/07, 3:02 AM",
      "commitName": "9b01b9e8b42e8f33f02caf91110fe6459e830fcb",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Fix bug where some time zones (Australia) use same abbreviated zone name for summer and winter\nbug 1716305\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1218 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "5/20/07, 3:02 AM",
          "commitName": "9b01b9e8b42e8f33f02caf91110fe6459e830fcb",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "9/7/05, 11:26 AM",
          "commitNameOld": "3dd31f2d88ad2109502a508bfaf1d81f9f7a3808",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 619.65,
          "commitsBetweenForRepo": 309,
          "commitsBetweenForFile": 1,
          "actualSource": "public DateTimeZone toDateTimeZone(String id, boolean outputID) {\n    if (id \u003d\u003d null) {\n        throw new IllegalArgumentException();\n    }\n    ArrayList transitions \u003d new ArrayList();\n    DSTZone tailZone \u003d null;\n    long millis \u003d Long.MIN_VALUE;\n    int saveMillis \u003d 0;\n    int ruleSetCount \u003d iRuleSets.size();\n    for (int i \u003d 0; i \u003c ruleSetCount; i++) {\n        RuleSet rs \u003d (RuleSet) iRuleSets.get(i);\n        Transition next \u003d rs.firstTransition(millis);\n        if (next \u003d\u003d null) {\n            continue;\n        }\n        addTransition(transitions, next);\n        millis \u003d next.getMillis();\n        saveMillis \u003d next.getSaveMillis();\n        rs \u003d new RuleSet(rs);\n        while ((next \u003d rs.nextTransition(millis, saveMillis)) !\u003d null) {\n            if (addTransition(transitions, next)) {\n                if (tailZone !\u003d null) {\n                    break;\n                }\n            }\n            millis \u003d next.getMillis();\n            saveMillis \u003d next.getSaveMillis();\n            if (tailZone \u003d\u003d null \u0026\u0026 i \u003d\u003d ruleSetCount - 1) {\n                tailZone \u003d rs.buildTailZone(id);\n            }\n        }\n        millis \u003d rs.getUpperLimit(saveMillis);\n    }\n    if (transitions.size() \u003d\u003d 0) {\n        if (tailZone !\u003d null) {\n            return tailZone;\n        }\n        return buildFixedZone(id, \"UTC\", 0, 0);\n    }\n    if (transitions.size() \u003d\u003d 1 \u0026\u0026 tailZone \u003d\u003d null) {\n        Transition tr \u003d (Transition) transitions.get(0);\n        return buildFixedZone(id, tr.getNameKey(), tr.getWallOffset(), tr.getStandardOffset());\n    }\n    PrecalculatedZone zone \u003d PrecalculatedZone.create(id, outputID, transitions, tailZone);\n    if (zone.isCachable()) {\n        return CachedDateTimeZone.forZone(zone);\n    }\n    return zone;\n}",
          "path": "JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java",
          "functionStartLine": 331,
          "functionName": "toDateTimeZone",
          "functionAnnotation": "",
          "functionDoc": "Processes all the rules and builds a DateTimeZone.\n\n@param id time zone id to assign\n@param outputID true if the zone id should be output\n",
          "diff": "@@ -1,49 +1,49 @@\n-public DateTimeZone toDateTimeZone(String id) {\n+public DateTimeZone toDateTimeZone(String id, boolean outputID) {\n     if (id \u003d\u003d null) {\n         throw new IllegalArgumentException();\n     }\n     ArrayList transitions \u003d new ArrayList();\n     DSTZone tailZone \u003d null;\n     long millis \u003d Long.MIN_VALUE;\n     int saveMillis \u003d 0;\n     int ruleSetCount \u003d iRuleSets.size();\n     for (int i \u003d 0; i \u003c ruleSetCount; i++) {\n         RuleSet rs \u003d (RuleSet) iRuleSets.get(i);\n         Transition next \u003d rs.firstTransition(millis);\n         if (next \u003d\u003d null) {\n             continue;\n         }\n         addTransition(transitions, next);\n         millis \u003d next.getMillis();\n         saveMillis \u003d next.getSaveMillis();\n         rs \u003d new RuleSet(rs);\n         while ((next \u003d rs.nextTransition(millis, saveMillis)) !\u003d null) {\n             if (addTransition(transitions, next)) {\n                 if (tailZone !\u003d null) {\n                     break;\n                 }\n             }\n             millis \u003d next.getMillis();\n             saveMillis \u003d next.getSaveMillis();\n             if (tailZone \u003d\u003d null \u0026\u0026 i \u003d\u003d ruleSetCount - 1) {\n                 tailZone \u003d rs.buildTailZone(id);\n             }\n         }\n         millis \u003d rs.getUpperLimit(saveMillis);\n     }\n     if (transitions.size() \u003d\u003d 0) {\n         if (tailZone !\u003d null) {\n             return tailZone;\n         }\n         return buildFixedZone(id, \"UTC\", 0, 0);\n     }\n     if (transitions.size() \u003d\u003d 1 \u0026\u0026 tailZone \u003d\u003d null) {\n         Transition tr \u003d (Transition) transitions.get(0);\n         return buildFixedZone(id, tr.getNameKey(), tr.getWallOffset(), tr.getStandardOffset());\n     }\n-    PrecalculatedZone zone \u003d new PrecalculatedZone(id, transitions, tailZone);\n+    PrecalculatedZone zone \u003d PrecalculatedZone.create(id, outputID, transitions, tailZone);\n     if (zone.isCachable()) {\n         return CachedDateTimeZone.forZone(zone);\n     }\n     return zone;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[id-String]",
            "newValue": "[id-String, outputID-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Fix bug where some time zones (Australia) use same abbreviated zone name for summer and winter\nbug 1716305\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1218 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "5/20/07, 3:02 AM",
          "commitName": "9b01b9e8b42e8f33f02caf91110fe6459e830fcb",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "9/7/05, 11:26 AM",
          "commitNameOld": "3dd31f2d88ad2109502a508bfaf1d81f9f7a3808",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 619.65,
          "commitsBetweenForRepo": 309,
          "commitsBetweenForFile": 1,
          "actualSource": "public DateTimeZone toDateTimeZone(String id, boolean outputID) {\n    if (id \u003d\u003d null) {\n        throw new IllegalArgumentException();\n    }\n    ArrayList transitions \u003d new ArrayList();\n    DSTZone tailZone \u003d null;\n    long millis \u003d Long.MIN_VALUE;\n    int saveMillis \u003d 0;\n    int ruleSetCount \u003d iRuleSets.size();\n    for (int i \u003d 0; i \u003c ruleSetCount; i++) {\n        RuleSet rs \u003d (RuleSet) iRuleSets.get(i);\n        Transition next \u003d rs.firstTransition(millis);\n        if (next \u003d\u003d null) {\n            continue;\n        }\n        addTransition(transitions, next);\n        millis \u003d next.getMillis();\n        saveMillis \u003d next.getSaveMillis();\n        rs \u003d new RuleSet(rs);\n        while ((next \u003d rs.nextTransition(millis, saveMillis)) !\u003d null) {\n            if (addTransition(transitions, next)) {\n                if (tailZone !\u003d null) {\n                    break;\n                }\n            }\n            millis \u003d next.getMillis();\n            saveMillis \u003d next.getSaveMillis();\n            if (tailZone \u003d\u003d null \u0026\u0026 i \u003d\u003d ruleSetCount - 1) {\n                tailZone \u003d rs.buildTailZone(id);\n            }\n        }\n        millis \u003d rs.getUpperLimit(saveMillis);\n    }\n    if (transitions.size() \u003d\u003d 0) {\n        if (tailZone !\u003d null) {\n            return tailZone;\n        }\n        return buildFixedZone(id, \"UTC\", 0, 0);\n    }\n    if (transitions.size() \u003d\u003d 1 \u0026\u0026 tailZone \u003d\u003d null) {\n        Transition tr \u003d (Transition) transitions.get(0);\n        return buildFixedZone(id, tr.getNameKey(), tr.getWallOffset(), tr.getStandardOffset());\n    }\n    PrecalculatedZone zone \u003d PrecalculatedZone.create(id, outputID, transitions, tailZone);\n    if (zone.isCachable()) {\n        return CachedDateTimeZone.forZone(zone);\n    }\n    return zone;\n}",
          "path": "JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java",
          "functionStartLine": 331,
          "functionName": "toDateTimeZone",
          "functionAnnotation": "",
          "functionDoc": "Processes all the rules and builds a DateTimeZone.\n\n@param id time zone id to assign\n@param outputID true if the zone id should be output\n",
          "diff": "@@ -1,49 +1,49 @@\n-public DateTimeZone toDateTimeZone(String id) {\n+public DateTimeZone toDateTimeZone(String id, boolean outputID) {\n     if (id \u003d\u003d null) {\n         throw new IllegalArgumentException();\n     }\n     ArrayList transitions \u003d new ArrayList();\n     DSTZone tailZone \u003d null;\n     long millis \u003d Long.MIN_VALUE;\n     int saveMillis \u003d 0;\n     int ruleSetCount \u003d iRuleSets.size();\n     for (int i \u003d 0; i \u003c ruleSetCount; i++) {\n         RuleSet rs \u003d (RuleSet) iRuleSets.get(i);\n         Transition next \u003d rs.firstTransition(millis);\n         if (next \u003d\u003d null) {\n             continue;\n         }\n         addTransition(transitions, next);\n         millis \u003d next.getMillis();\n         saveMillis \u003d next.getSaveMillis();\n         rs \u003d new RuleSet(rs);\n         while ((next \u003d rs.nextTransition(millis, saveMillis)) !\u003d null) {\n             if (addTransition(transitions, next)) {\n                 if (tailZone !\u003d null) {\n                     break;\n                 }\n             }\n             millis \u003d next.getMillis();\n             saveMillis \u003d next.getSaveMillis();\n             if (tailZone \u003d\u003d null \u0026\u0026 i \u003d\u003d ruleSetCount - 1) {\n                 tailZone \u003d rs.buildTailZone(id);\n             }\n         }\n         millis \u003d rs.getUpperLimit(saveMillis);\n     }\n     if (transitions.size() \u003d\u003d 0) {\n         if (tailZone !\u003d null) {\n             return tailZone;\n         }\n         return buildFixedZone(id, \"UTC\", 0, 0);\n     }\n     if (transitions.size() \u003d\u003d 1 \u0026\u0026 tailZone \u003d\u003d null) {\n         Transition tr \u003d (Transition) transitions.get(0);\n         return buildFixedZone(id, tr.getNameKey(), tr.getWallOffset(), tr.getStandardOffset());\n     }\n-    PrecalculatedZone zone \u003d new PrecalculatedZone(id, transitions, tailZone);\n+    PrecalculatedZone zone \u003d PrecalculatedZone.create(id, outputID, transitions, tailZone);\n     if (zone.isCachable()) {\n         return CachedDateTimeZone.forZone(zone);\n     }\n     return zone;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Fix bug where some time zones (Australia) use same abbreviated zone name for summer and winter\nbug 1716305\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1218 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
          "commitDate": "5/20/07, 3:02 AM",
          "commitName": "9b01b9e8b42e8f33f02caf91110fe6459e830fcb",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "9/7/05, 11:26 AM",
          "commitNameOld": "3dd31f2d88ad2109502a508bfaf1d81f9f7a3808",
          "commitAuthorOld": "Brian S O\u0027Neill",
          "daysBetweenCommits": 619.65,
          "commitsBetweenForRepo": 309,
          "commitsBetweenForFile": 1,
          "actualSource": "public DateTimeZone toDateTimeZone(String id, boolean outputID) {\n    if (id \u003d\u003d null) {\n        throw new IllegalArgumentException();\n    }\n    ArrayList transitions \u003d new ArrayList();\n    DSTZone tailZone \u003d null;\n    long millis \u003d Long.MIN_VALUE;\n    int saveMillis \u003d 0;\n    int ruleSetCount \u003d iRuleSets.size();\n    for (int i \u003d 0; i \u003c ruleSetCount; i++) {\n        RuleSet rs \u003d (RuleSet) iRuleSets.get(i);\n        Transition next \u003d rs.firstTransition(millis);\n        if (next \u003d\u003d null) {\n            continue;\n        }\n        addTransition(transitions, next);\n        millis \u003d next.getMillis();\n        saveMillis \u003d next.getSaveMillis();\n        rs \u003d new RuleSet(rs);\n        while ((next \u003d rs.nextTransition(millis, saveMillis)) !\u003d null) {\n            if (addTransition(transitions, next)) {\n                if (tailZone !\u003d null) {\n                    break;\n                }\n            }\n            millis \u003d next.getMillis();\n            saveMillis \u003d next.getSaveMillis();\n            if (tailZone \u003d\u003d null \u0026\u0026 i \u003d\u003d ruleSetCount - 1) {\n                tailZone \u003d rs.buildTailZone(id);\n            }\n        }\n        millis \u003d rs.getUpperLimit(saveMillis);\n    }\n    if (transitions.size() \u003d\u003d 0) {\n        if (tailZone !\u003d null) {\n            return tailZone;\n        }\n        return buildFixedZone(id, \"UTC\", 0, 0);\n    }\n    if (transitions.size() \u003d\u003d 1 \u0026\u0026 tailZone \u003d\u003d null) {\n        Transition tr \u003d (Transition) transitions.get(0);\n        return buildFixedZone(id, tr.getNameKey(), tr.getWallOffset(), tr.getStandardOffset());\n    }\n    PrecalculatedZone zone \u003d PrecalculatedZone.create(id, outputID, transitions, tailZone);\n    if (zone.isCachable()) {\n        return CachedDateTimeZone.forZone(zone);\n    }\n    return zone;\n}",
          "path": "JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java",
          "functionStartLine": 331,
          "functionName": "toDateTimeZone",
          "functionAnnotation": "",
          "functionDoc": "Processes all the rules and builds a DateTimeZone.\n\n@param id time zone id to assign\n@param outputID true if the zone id should be output\n",
          "diff": "@@ -1,49 +1,49 @@\n-public DateTimeZone toDateTimeZone(String id) {\n+public DateTimeZone toDateTimeZone(String id, boolean outputID) {\n     if (id \u003d\u003d null) {\n         throw new IllegalArgumentException();\n     }\n     ArrayList transitions \u003d new ArrayList();\n     DSTZone tailZone \u003d null;\n     long millis \u003d Long.MIN_VALUE;\n     int saveMillis \u003d 0;\n     int ruleSetCount \u003d iRuleSets.size();\n     for (int i \u003d 0; i \u003c ruleSetCount; i++) {\n         RuleSet rs \u003d (RuleSet) iRuleSets.get(i);\n         Transition next \u003d rs.firstTransition(millis);\n         if (next \u003d\u003d null) {\n             continue;\n         }\n         addTransition(transitions, next);\n         millis \u003d next.getMillis();\n         saveMillis \u003d next.getSaveMillis();\n         rs \u003d new RuleSet(rs);\n         while ((next \u003d rs.nextTransition(millis, saveMillis)) !\u003d null) {\n             if (addTransition(transitions, next)) {\n                 if (tailZone !\u003d null) {\n                     break;\n                 }\n             }\n             millis \u003d next.getMillis();\n             saveMillis \u003d next.getSaveMillis();\n             if (tailZone \u003d\u003d null \u0026\u0026 i \u003d\u003d ruleSetCount - 1) {\n                 tailZone \u003d rs.buildTailZone(id);\n             }\n         }\n         millis \u003d rs.getUpperLimit(saveMillis);\n     }\n     if (transitions.size() \u003d\u003d 0) {\n         if (tailZone !\u003d null) {\n             return tailZone;\n         }\n         return buildFixedZone(id, \"UTC\", 0, 0);\n     }\n     if (transitions.size() \u003d\u003d 1 \u0026\u0026 tailZone \u003d\u003d null) {\n         Transition tr \u003d (Transition) transitions.get(0);\n         return buildFixedZone(id, tr.getNameKey(), tr.getWallOffset(), tr.getStandardOffset());\n     }\n-    PrecalculatedZone zone \u003d new PrecalculatedZone(id, transitions, tailZone);\n+    PrecalculatedZone zone \u003d PrecalculatedZone.create(id, outputID, transitions, tailZone);\n     if (zone.isCachable()) {\n         return CachedDateTimeZone.forZone(zone);\n     }\n     return zone;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Processes all the rules and builds a DateTimeZone.\n\n@param id time zone id to assign\n",
            "newValue": "Processes all the rules and builds a DateTimeZone.\n\n@param id time zone id to assign\n@param outputID true if the zone id should be output\n"
          }
        }
      ]
    },
    "7fe68f297f7c372b515fde7f0bc8d721ec257ceb": {
      "type": "Yintroduced",
      "commitMessage": "Move version 0.9 to joda-time repository\n\n\ngit-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@4 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1\n",
      "commitDate": "12/16/03, 1:39 PM",
      "commitName": "7fe68f297f7c372b515fde7f0bc8d721ec257ceb",
      "commitAuthor": "Stephen Colebourne",
      "diff": "@@ -0,0 +1,49 @@\n+public DateTimeZone toDateTimeZone(String id) {\n+    if (id \u003d\u003d null) {\n+        throw new IllegalArgumentException();\n+    }\n+    ArrayList transitions \u003d new ArrayList();\n+    DSTZone tailZone \u003d null;\n+    long millis \u003d Long.MIN_VALUE;\n+    int saveMillis \u003d 0;\n+    int ruleSetCount \u003d iRuleSets.size();\n+    for (int i \u003d 0; i \u003c ruleSetCount; i++) {\n+        RuleSet rs \u003d (RuleSet) iRuleSets.get(i);\n+        Transition next \u003d rs.firstTransition(millis);\n+        if (next \u003d\u003d null) {\n+            continue;\n+        }\n+        addTransition(transitions, next);\n+        millis \u003d next.getMillis();\n+        saveMillis \u003d next.getSaveMillis();\n+        rs \u003d new RuleSet(rs);\n+        while ((next \u003d rs.nextTransition(millis, saveMillis)) !\u003d null) {\n+            if (addTransition(transitions, next)) {\n+                if (tailZone !\u003d null) {\n+                    break;\n+                }\n+            }\n+            millis \u003d next.getMillis();\n+            saveMillis \u003d next.getSaveMillis();\n+            if (tailZone \u003d\u003d null \u0026\u0026 i \u003d\u003d ruleSetCount - 1) {\n+                tailZone \u003d rs.buildTailZone(id);\n+            }\n+        }\n+        millis \u003d rs.getUpperLimit(saveMillis);\n+    }\n+    if (transitions.size() \u003d\u003d 0) {\n+        if (tailZone !\u003d null) {\n+            return tailZone;\n+        }\n+        return buildFixedZone(id, \"UTC\", 0, 0);\n+    }\n+    if (transitions.size() \u003d\u003d 1 \u0026\u0026 tailZone \u003d\u003d null) {\n+        Transition tr \u003d (Transition) transitions.get(0);\n+        return buildFixedZone(id, tr.getNameKey(), tr.getWallOffset(), tr.getStandardOffset());\n+    }\n+    PrecalculatedZone zone \u003d new PrecalculatedZone(id, transitions, tailZone);\n+    if (zone.isCachable()) {\n+        return CachedDateTimeZone.forZone(zone);\n+    }\n+    return zone;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public DateTimeZone toDateTimeZone(String id) {\n    if (id \u003d\u003d null) {\n        throw new IllegalArgumentException();\n    }\n    ArrayList transitions \u003d new ArrayList();\n    DSTZone tailZone \u003d null;\n    long millis \u003d Long.MIN_VALUE;\n    int saveMillis \u003d 0;\n    int ruleSetCount \u003d iRuleSets.size();\n    for (int i \u003d 0; i \u003c ruleSetCount; i++) {\n        RuleSet rs \u003d (RuleSet) iRuleSets.get(i);\n        Transition next \u003d rs.firstTransition(millis);\n        if (next \u003d\u003d null) {\n            continue;\n        }\n        addTransition(transitions, next);\n        millis \u003d next.getMillis();\n        saveMillis \u003d next.getSaveMillis();\n        rs \u003d new RuleSet(rs);\n        while ((next \u003d rs.nextTransition(millis, saveMillis)) !\u003d null) {\n            if (addTransition(transitions, next)) {\n                if (tailZone !\u003d null) {\n                    break;\n                }\n            }\n            millis \u003d next.getMillis();\n            saveMillis \u003d next.getSaveMillis();\n            if (tailZone \u003d\u003d null \u0026\u0026 i \u003d\u003d ruleSetCount - 1) {\n                tailZone \u003d rs.buildTailZone(id);\n            }\n        }\n        millis \u003d rs.getUpperLimit(saveMillis);\n    }\n    if (transitions.size() \u003d\u003d 0) {\n        if (tailZone !\u003d null) {\n            return tailZone;\n        }\n        return buildFixedZone(id, \"UTC\", 0, 0);\n    }\n    if (transitions.size() \u003d\u003d 1 \u0026\u0026 tailZone \u003d\u003d null) {\n        Transition tr \u003d (Transition) transitions.get(0);\n        return buildFixedZone(id, tr.getNameKey(), tr.getWallOffset(), tr.getStandardOffset());\n    }\n    PrecalculatedZone zone \u003d new PrecalculatedZone(id, transitions, tailZone);\n    if (zone.isCachable()) {\n        return CachedDateTimeZone.forZone(zone);\n    }\n    return zone;\n}",
      "path": "JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java",
      "functionStartLine": 328,
      "functionName": "toDateTimeZone",
      "functionAnnotation": "",
      "functionDoc": "Processes all the rules and builds a DateTimeZone.\n\n@param id time zone id to assign\n"
    }
  }
}