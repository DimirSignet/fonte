{
  "origin": "codeshovel",
  "repositoryName": "Closure-92b",
  "repositoryPath": "/tmp/Closure-92b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ProcessClosurePrimitives.java",
  "functionName": "makeVarDeclNode",
  "functionId": "$makeVarDeclNode___namespace-String__sourceNode-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
  "functionAnnotation": "",
  "functionDoc": "Creates a simple namespace variable declaration\n(e.g. \u003ccode\u003evar foo \u003d {};\u003c/code\u003e).\n\n@param namespace A simple namespace (must be a valid js identifier)\n@param sourceNode The node to get source information from.\n",
  "functionStartLine": 830,
  "functionEndLine": 845,
  "numCommitsSeen": 28,
  "timeTaken": 1578,
  "changeHistory": [
    "0a40e6661cd197e1cd0d3a3bccaa4c5313df8514",
    "1046b0c09e2371f8924f72331d42db5b554c4a32",
    "449fdd3c1163cf42d9caa4e7382e37f20f2ca6ac",
    "a3ed6caf81e25d0cff2f84ba7f7dd80dab9e8086",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "0a40e6661cd197e1cd0d3a3bccaa4c5313df8514": "Ybodychange",
    "1046b0c09e2371f8924f72331d42db5b554c4a32": "Yformatchange",
    "449fdd3c1163cf42d9caa4e7382e37f20f2ca6ac": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "a3ed6caf81e25d0cff2f84ba7f7dd80dab9e8086": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0a40e6661cd197e1cd0d3a3bccaa4c5313df8514": {
      "type": "Ybodychange",
      "commitMessage": "\nfix a weird integration issue.\nsome processes run the\nprovide/require processor after scope creation.  That means\nthat TypedScopeCreator can\u0027t assign types to the\nnew namespaces.  Normal closure compiler is moving towards a model\nwhere TypedScopeCreator declares namespaces in the global\nscope.\nIt\u0027s not clear how we should resolve this inconsistency, but\nfor now this shim will make things better.\n\nR\u003dmoedinger\nDELTA\u003d25  (15 added, 5 deleted, 5 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d214752\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@419 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/13/10, 7:29 AM",
      "commitName": "0a40e6661cd197e1cd0d3a3bccaa4c5313df8514",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "8/12/10, 6:02 PM",
      "commitNameOld": "15acafb00636f99295b394145b9b60a5e624ddfa",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 31.56,
      "commitsBetweenForRepo": 60,
      "commitsBetweenForFile": 1,
      "actualSource": "private Node makeVarDeclNode(String namespace, Node sourceNode) {\n    Node name \u003d Node.newString(Token.NAME, namespace);\n    name.addChildToFront(createNamespaceLiteral());\n    Node decl \u003d new Node(Token.VAR, name);\n    decl.putBooleanProp(Node.IS_NAMESPACE, true);\n    if (compiler.getCodingConvention().isConstant(namespace)) {\n        name.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n    }\n    Preconditions.checkState(isNamespacePlaceholder(decl));\n    decl.copyInformationFromForTree(sourceNode);\n    return decl;\n}",
      "path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
      "functionStartLine": 833,
      "functionName": "makeVarDeclNode",
      "functionAnnotation": "",
      "functionDoc": "Creates a simple namespace variable declaration\n(e.g. \u003ccode\u003evar foo \u003d {};\u003c/code\u003e).\n\n@param namespace A simple namespace (must be a valid js identifier)\n@param sourceNode The node to get source information from.\n",
      "diff": "@@ -1,12 +1,12 @@\n private Node makeVarDeclNode(String namespace, Node sourceNode) {\n     Node name \u003d Node.newString(Token.NAME, namespace);\n-    name.addChildToFront(new Node(Token.OBJECTLIT));\n+    name.addChildToFront(createNamespaceLiteral());\n     Node decl \u003d new Node(Token.VAR, name);\n     decl.putBooleanProp(Node.IS_NAMESPACE, true);\n     if (compiler.getCodingConvention().isConstant(namespace)) {\n         name.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n     }\n     Preconditions.checkState(isNamespacePlaceholder(decl));\n     decl.copyInformationFromForTree(sourceNode);\n     return decl;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1046b0c09e2371f8924f72331d42db5b554c4a32": {
      "type": "Yformatchange",
      "commitMessage": "Rewrite ProcessClosurePrimitives to have a distinct indexing and mutation step.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@94 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/5/10, 11:27 AM",
      "commitName": "1046b0c09e2371f8924f72331d42db5b554c4a32",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "2/3/10, 7:26 AM",
      "commitNameOld": "449fdd3c1163cf42d9caa4e7382e37f20f2ca6ac",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 2.17,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "private Node makeVarDeclNode(String namespace, Node sourceNode) {\n    Node name \u003d Node.newString(Token.NAME, namespace);\n    name.addChildToFront(new Node(Token.OBJECTLIT));\n    Node decl \u003d new Node(Token.VAR, name);\n    decl.putBooleanProp(Node.IS_NAMESPACE, true);\n    if (compiler.getCodingConvention().isConstant(namespace)) {\n        name.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n    }\n    Preconditions.checkState(isNamespacePlaceholder(decl));\n    decl.copyInformationFromForTree(sourceNode);\n    return decl;\n}",
      "path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
      "functionStartLine": 779,
      "functionName": "makeVarDeclNode",
      "functionAnnotation": "",
      "functionDoc": "Creates a simple namespace variable declaration\n(e.g. \u003ccode\u003evar foo \u003d {};\u003c/code\u003e).\n\n@param namespace A simple namespace (must be a valid js identifier)\n@param sourceNode The node to get source information from.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "449fdd3c1163cf42d9caa4e7382e37f20f2ca6ac": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "Make CompilerRunner package-private. There\u0027s no good reason for it to\nbe public. And right now, users of the Java API are confused about\nwhether they should use Compiler or CompilerRunner.\n\nAlso, make sure that ProcessClosurePrimitives always preserves original\nsource information.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@89 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/3/10, 7:26 AM",
      "commitName": "449fdd3c1163cf42d9caa4e7382e37f20f2ca6ac",
      "commitAuthor": "Nicholas.J.Santos",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Make CompilerRunner package-private. There\u0027s no good reason for it to\nbe public. And right now, users of the Java API are confused about\nwhether they should use Compiler or CompilerRunner.\n\nAlso, make sure that ProcessClosurePrimitives always preserves original\nsource information.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@89 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "2/3/10, 7:26 AM",
          "commitName": "449fdd3c1163cf42d9caa4e7382e37f20f2ca6ac",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "1/12/10, 1:53 PM",
          "commitNameOld": "a3ed6caf81e25d0cff2f84ba7f7dd80dab9e8086",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 21.73,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "actualSource": "private Node makeVarDeclNode(String namespace, Node sourceNode) {\n    Node name \u003d Node.newString(Token.NAME, namespace);\n    name.addChildToFront(new Node(Token.OBJECTLIT));\n    Node decl \u003d new Node(Token.VAR, name);\n    decl.putBooleanProp(Node.IS_NAMESPACE, true);\n    if (compiler.getCodingConvention().isConstant(namespace)) {\n        name.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n    }\n    Preconditions.checkState(isNamespacePlaceholder(decl));\n    decl.copyInformationFromForTree(sourceNode);\n    return decl;\n}",
          "path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
          "functionStartLine": 659,
          "functionName": "makeVarDeclNode",
          "functionAnnotation": "",
          "functionDoc": "Creates a simple namespace variable declaration\n(e.g. \u003ccode\u003evar foo \u003d {};\u003c/code\u003e).\n\n@param namespace A simple namespace (must be a valid js identifier)\n@param sourceNode The node to get source information from.\n",
          "diff": "@@ -1,11 +1,12 @@\n-private Node makeVarDeclNode(String namespace) {\n+private Node makeVarDeclNode(String namespace, Node sourceNode) {\n     Node name \u003d Node.newString(Token.NAME, namespace);\n     name.addChildToFront(new Node(Token.OBJECTLIT));\n     Node decl \u003d new Node(Token.VAR, name);\n     decl.putBooleanProp(Node.IS_NAMESPACE, true);\n     if (compiler.getCodingConvention().isConstant(namespace)) {\n         name.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n     }\n     Preconditions.checkState(isNamespacePlaceholder(decl));\n+    decl.copyInformationFromForTree(sourceNode);\n     return decl;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[namespace-String]",
            "newValue": "[namespace-String, sourceNode-Node]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Make CompilerRunner package-private. There\u0027s no good reason for it to\nbe public. And right now, users of the Java API are confused about\nwhether they should use Compiler or CompilerRunner.\n\nAlso, make sure that ProcessClosurePrimitives always preserves original\nsource information.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@89 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "2/3/10, 7:26 AM",
          "commitName": "449fdd3c1163cf42d9caa4e7382e37f20f2ca6ac",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "1/12/10, 1:53 PM",
          "commitNameOld": "a3ed6caf81e25d0cff2f84ba7f7dd80dab9e8086",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 21.73,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "actualSource": "private Node makeVarDeclNode(String namespace, Node sourceNode) {\n    Node name \u003d Node.newString(Token.NAME, namespace);\n    name.addChildToFront(new Node(Token.OBJECTLIT));\n    Node decl \u003d new Node(Token.VAR, name);\n    decl.putBooleanProp(Node.IS_NAMESPACE, true);\n    if (compiler.getCodingConvention().isConstant(namespace)) {\n        name.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n    }\n    Preconditions.checkState(isNamespacePlaceholder(decl));\n    decl.copyInformationFromForTree(sourceNode);\n    return decl;\n}",
          "path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
          "functionStartLine": 659,
          "functionName": "makeVarDeclNode",
          "functionAnnotation": "",
          "functionDoc": "Creates a simple namespace variable declaration\n(e.g. \u003ccode\u003evar foo \u003d {};\u003c/code\u003e).\n\n@param namespace A simple namespace (must be a valid js identifier)\n@param sourceNode The node to get source information from.\n",
          "diff": "@@ -1,11 +1,12 @@\n-private Node makeVarDeclNode(String namespace) {\n+private Node makeVarDeclNode(String namespace, Node sourceNode) {\n     Node name \u003d Node.newString(Token.NAME, namespace);\n     name.addChildToFront(new Node(Token.OBJECTLIT));\n     Node decl \u003d new Node(Token.VAR, name);\n     decl.putBooleanProp(Node.IS_NAMESPACE, true);\n     if (compiler.getCodingConvention().isConstant(namespace)) {\n         name.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n     }\n     Preconditions.checkState(isNamespacePlaceholder(decl));\n+    decl.copyInformationFromForTree(sourceNode);\n     return decl;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Make CompilerRunner package-private. There\u0027s no good reason for it to\nbe public. And right now, users of the Java API are confused about\nwhether they should use Compiler or CompilerRunner.\n\nAlso, make sure that ProcessClosurePrimitives always preserves original\nsource information.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@89 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "2/3/10, 7:26 AM",
          "commitName": "449fdd3c1163cf42d9caa4e7382e37f20f2ca6ac",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "1/12/10, 1:53 PM",
          "commitNameOld": "a3ed6caf81e25d0cff2f84ba7f7dd80dab9e8086",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 21.73,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "actualSource": "private Node makeVarDeclNode(String namespace, Node sourceNode) {\n    Node name \u003d Node.newString(Token.NAME, namespace);\n    name.addChildToFront(new Node(Token.OBJECTLIT));\n    Node decl \u003d new Node(Token.VAR, name);\n    decl.putBooleanProp(Node.IS_NAMESPACE, true);\n    if (compiler.getCodingConvention().isConstant(namespace)) {\n        name.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n    }\n    Preconditions.checkState(isNamespacePlaceholder(decl));\n    decl.copyInformationFromForTree(sourceNode);\n    return decl;\n}",
          "path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
          "functionStartLine": 659,
          "functionName": "makeVarDeclNode",
          "functionAnnotation": "",
          "functionDoc": "Creates a simple namespace variable declaration\n(e.g. \u003ccode\u003evar foo \u003d {};\u003c/code\u003e).\n\n@param namespace A simple namespace (must be a valid js identifier)\n@param sourceNode The node to get source information from.\n",
          "diff": "@@ -1,11 +1,12 @@\n-private Node makeVarDeclNode(String namespace) {\n+private Node makeVarDeclNode(String namespace, Node sourceNode) {\n     Node name \u003d Node.newString(Token.NAME, namespace);\n     name.addChildToFront(new Node(Token.OBJECTLIT));\n     Node decl \u003d new Node(Token.VAR, name);\n     decl.putBooleanProp(Node.IS_NAMESPACE, true);\n     if (compiler.getCodingConvention().isConstant(namespace)) {\n         name.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n     }\n     Preconditions.checkState(isNamespacePlaceholder(decl));\n+    decl.copyInformationFromForTree(sourceNode);\n     return decl;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Creates a simple namespace variable declaration\n(e.g. \u003ccode\u003evar foo \u003d {};\u003c/code\u003e).\n\n@param namespace A simple namespace (must be a valid js identifier)\n",
            "newValue": "Creates a simple namespace variable declaration\n(e.g. \u003ccode\u003evar foo \u003d {};\u003c/code\u003e).\n\n@param namespace A simple namespace (must be a valid js identifier)\n@param sourceNode The node to get source information from.\n"
          }
        }
      ]
    },
    "a3ed6caf81e25d0cff2f84ba7f7dd80dab9e8086": {
      "type": "Ybodychange",
      "commitMessage": "Fix an edge case in goog.provide handling.\n\nAlso, add a type annotation to the dom apis.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@63 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/12/10, 1:53 PM",
      "commitName": "a3ed6caf81e25d0cff2f84ba7f7dd80dab9e8086",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "11/19/09, 1:23 PM",
      "commitNameOld": "6a6ea480bae01f40f9795218ac911bb7de18d34a",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 54.02,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "actualSource": "private Node makeVarDeclNode(String namespace) {\n    Node name \u003d Node.newString(Token.NAME, namespace);\n    name.addChildToFront(new Node(Token.OBJECTLIT));\n    Node decl \u003d new Node(Token.VAR, name);\n    decl.putBooleanProp(Node.IS_NAMESPACE, true);\n    if (compiler.getCodingConvention().isConstant(namespace)) {\n        name.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n    }\n    Preconditions.checkState(isNamespacePlaceholder(decl));\n    return decl;\n}",
      "path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
      "functionStartLine": 658,
      "functionName": "makeVarDeclNode",
      "functionAnnotation": "",
      "functionDoc": "Creates a simple namespace variable declaration\n(e.g. \u003ccode\u003evar foo \u003d {};\u003c/code\u003e).\n\n@param namespace A simple namespace (must be a valid js identifier)\n",
      "diff": "@@ -1,10 +1,11 @@\n private Node makeVarDeclNode(String namespace) {\n     Node name \u003d Node.newString(Token.NAME, namespace);\n     name.addChildToFront(new Node(Token.OBJECTLIT));\n     Node decl \u003d new Node(Token.VAR, name);\n     decl.putBooleanProp(Node.IS_NAMESPACE, true);\n     if (compiler.getCodingConvention().isConstant(namespace)) {\n         name.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n     }\n+    Preconditions.checkState(isNamespacePlaceholder(decl));\n     return decl;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,10 @@\n+private Node makeVarDeclNode(String namespace) {\n+    Node name \u003d Node.newString(Token.NAME, namespace);\n+    name.addChildToFront(new Node(Token.OBJECTLIT));\n+    Node decl \u003d new Node(Token.VAR, name);\n+    decl.putBooleanProp(Node.IS_NAMESPACE, true);\n+    if (compiler.getCodingConvention().isConstant(namespace)) {\n+        name.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n+    }\n+    return decl;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private Node makeVarDeclNode(String namespace) {\n    Node name \u003d Node.newString(Token.NAME, namespace);\n    name.addChildToFront(new Node(Token.OBJECTLIT));\n    Node decl \u003d new Node(Token.VAR, name);\n    decl.putBooleanProp(Node.IS_NAMESPACE, true);\n    if (compiler.getCodingConvention().isConstant(namespace)) {\n        name.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n    }\n    return decl;\n}",
      "path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
      "functionStartLine": 521,
      "functionName": "makeVarDeclNode",
      "functionAnnotation": "",
      "functionDoc": "Creates a simple namespace variable declaration\n(e.g. \u003ccode\u003evar foo \u003d {};\u003c/code\u003e).\n\n@param namespace A simple namespace (must be a valid js identifier)\n"
    }
  }
}