{
  "origin": "codeshovel",
  "repositoryName": "Closure-92b",
  "repositoryPath": "/tmp/Closure-92b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JSModuleGraph.java",
  "functionName": "getDeepestCommonDependency",
  "functionId": "getDeepestCommonDependency___m1-JSModule__m2-JSModule",
  "sourceFilePath": "src/com/google/javascript/jscomp/JSModuleGraph.java",
  "functionAnnotation": "",
  "functionDoc": "Finds the deepest common dependency of two modules, not including the two\nmodules themselves.\n\n@param m1 A module in this graph\n@param m2 A module in this graph\n@return The deepest common dep of {@code m1} and {@code m2}, or null if\n    they have no common dependencies\n",
  "functionStartLine": 163,
  "functionEndLine": 180,
  "numCommitsSeen": 13,
  "timeTaken": 476,
  "changeHistory": [
    "0b3f6f9feca6f027037a12978017ff055a0be538",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "0b3f6f9feca6f027037a12978017ff055a0be538": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0b3f6f9feca6f027037a12978017ff055a0be538": {
      "type": "Ybodychange",
      "commitMessage": "\nRestructure how a JSModule\u0027s depth is stored.\n\nR\u003dnicksantos\nDELTA\u003d49  (18 added, 13 deleted, 18 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d69001\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@313 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/26/10, 7:13 PM",
      "commitName": "0b3f6f9feca6f027037a12978017ff055a0be538",
      "commitAuthor": "acleung@google.com",
      "commitDateOld": "7/8/10, 5:15 PM",
      "commitNameOld": "0c8a0c53b2124d05b017a63bdbc720a57c89ead2",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 18.08,
      "commitsBetweenForRepo": 46,
      "commitsBetweenForFile": 1,
      "actualSource": "JSModule getDeepestCommonDependency(JSModule m1, JSModule m2) {\n    int m1Depth \u003d m1.getDepth();\n    int m2Depth \u003d m2.getDepth();\n    for (int depth \u003d Math.min(m1Depth, m2Depth) - 1; depth \u003e\u003d 0; depth--) {\n        List\u003cJSModule\u003e modulesAtDepth \u003d modulesByDepth.get(depth);\n        for (int i \u003d modulesAtDepth.size() - 1; i \u003e\u003d 0; i--) {\n            JSModule m \u003d modulesAtDepth.get(i);\n            if (dependsOn(m1, m) \u0026\u0026 dependsOn(m2, m)) {\n                return m;\n            }\n        }\n    }\n    return null;\n}",
      "path": "src/com/google/javascript/jscomp/JSModuleGraph.java",
      "functionStartLine": 163,
      "functionName": "getDeepestCommonDependency",
      "functionAnnotation": "",
      "functionDoc": "Finds the deepest common dependency of two modules, not including the two\nmodules themselves.\n\n@param m1 A module in this graph\n@param m2 A module in this graph\n@return The deepest common dep of {@code m1} and {@code m2}, or null if\n    they have no common dependencies\n",
      "diff": "@@ -1,14 +1,14 @@\n JSModule getDeepestCommonDependency(JSModule m1, JSModule m2) {\n-    int m1Depth \u003d getDepth(m1);\n-    int m2Depth \u003d getDepth(m2);\n+    int m1Depth \u003d m1.getDepth();\n+    int m2Depth \u003d m2.getDepth();\n     for (int depth \u003d Math.min(m1Depth, m2Depth) - 1; depth \u003e\u003d 0; depth--) {\n         List\u003cJSModule\u003e modulesAtDepth \u003d modulesByDepth.get(depth);\n         for (int i \u003d modulesAtDepth.size() - 1; i \u003e\u003d 0; i--) {\n             JSModule m \u003d modulesAtDepth.get(i);\n             if (dependsOn(m1, m) \u0026\u0026 dependsOn(m2, m)) {\n                 return m;\n             }\n         }\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,14 @@\n+JSModule getDeepestCommonDependency(JSModule m1, JSModule m2) {\n+    int m1Depth \u003d getDepth(m1);\n+    int m2Depth \u003d getDepth(m2);\n+    for (int depth \u003d Math.min(m1Depth, m2Depth) - 1; depth \u003e\u003d 0; depth--) {\n+        List\u003cJSModule\u003e modulesAtDepth \u003d modulesByDepth.get(depth);\n+        for (int i \u003d modulesAtDepth.size() - 1; i \u003e\u003d 0; i--) {\n+            JSModule m \u003d modulesAtDepth.get(i);\n+            if (dependsOn(m1, m) \u0026\u0026 dependsOn(m2, m)) {\n+                return m;\n+            }\n+        }\n+    }\n+    return null;\n+}\n\\ No newline at end of file\n",
      "actualSource": "JSModule getDeepestCommonDependency(JSModule m1, JSModule m2) {\n    int m1Depth \u003d getDepth(m1);\n    int m2Depth \u003d getDepth(m2);\n    for (int depth \u003d Math.min(m1Depth, m2Depth) - 1; depth \u003e\u003d 0; depth--) {\n        List\u003cJSModule\u003e modulesAtDepth \u003d modulesByDepth.get(depth);\n        for (int i \u003d modulesAtDepth.size() - 1; i \u003e\u003d 0; i--) {\n            JSModule m \u003d modulesAtDepth.get(i);\n            if (dependsOn(m1, m) \u0026\u0026 dependsOn(m2, m)) {\n                return m;\n            }\n        }\n    }\n    return null;\n}",
      "path": "src/com/google/javascript/jscomp/JSModuleGraph.java",
      "functionStartLine": 152,
      "functionName": "getDeepestCommonDependency",
      "functionAnnotation": "",
      "functionDoc": "Finds the deepest common dependency of two modules, not including the two\nmodules themselves.\n\n@param m1 A module in this graph\n@param m2 A module in this graph\n@return The deepest common dep of {@code m1} and {@code m2}, or null if\n    they have no common dependencies\n"
    }
  }
}