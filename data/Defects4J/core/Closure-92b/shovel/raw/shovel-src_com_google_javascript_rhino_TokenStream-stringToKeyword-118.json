{
  "origin": "codeshovel",
  "repositoryName": "Closure-92b",
  "repositoryPath": "/tmp/Closure-92b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TokenStream.java",
  "functionName": "stringToKeyword",
  "functionId": "stringToKeyword___name-String",
  "sourceFilePath": "src/com/google/javascript/rhino/TokenStream.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 118,
  "functionEndLine": 292,
  "numCommitsSeen": 6,
  "timeTaken": 969,
  "changeHistory": [
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,322 @@\n+private static int stringToKeyword(String name) {\n+    final int Id_break \u003d Token.BREAK, Id_case \u003d Token.CASE, Id_continue \u003d Token.CONTINUE, Id_default \u003d Token.DEFAULT, Id_delete \u003d Token.DELPROP, Id_do \u003d Token.DO, Id_else \u003d Token.ELSE, Id_export \u003d Token.EXPORT, Id_false \u003d Token.FALSE, Id_for \u003d Token.FOR, Id_function \u003d Token.FUNCTION, Id_if \u003d Token.IF, Id_in \u003d Token.IN, Id_new \u003d Token.NEW, Id_null \u003d Token.NULL, Id_return \u003d Token.RETURN, Id_switch \u003d Token.SWITCH, Id_this \u003d Token.THIS, Id_true \u003d Token.TRUE, Id_typeof \u003d Token.TYPEOF, Id_var \u003d Token.VAR, Id_void \u003d Token.VOID, Id_while \u003d Token.WHILE, Id_with \u003d Token.WITH, Id_abstract \u003d Token.RESERVED, Id_boolean \u003d Token.RESERVED, Id_byte \u003d Token.RESERVED, Id_catch \u003d Token.CATCH, Id_char \u003d Token.RESERVED, Id_class \u003d Token.RESERVED, Id_const \u003d Token.CONST, Id_debugger \u003d Token.DEBUGGER, Id_double \u003d Token.RESERVED, Id_enum \u003d Token.RESERVED, Id_extends \u003d Token.RESERVED, Id_final \u003d Token.RESERVED, Id_finally \u003d Token.FINALLY, Id_float \u003d Token.RESERVED, Id_goto \u003d Token.RESERVED, Id_implements \u003d Token.RESERVED, Id_import \u003d Token.IMPORT, Id_instanceof \u003d Token.INSTANCEOF, Id_int \u003d Token.RESERVED, Id_interface \u003d Token.RESERVED, Id_long \u003d Token.RESERVED, Id_native \u003d Token.RESERVED, Id_package \u003d Token.RESERVED, Id_private \u003d Token.RESERVED, Id_protected \u003d Token.RESERVED, Id_public \u003d Token.RESERVED, Id_short \u003d Token.RESERVED, Id_static \u003d Token.RESERVED, Id_super \u003d Token.RESERVED, Id_synchronized \u003d Token.RESERVED, Id_throw \u003d Token.THROW, Id_throws \u003d Token.RESERVED, Id_transient \u003d Token.RESERVED, Id_try \u003d Token.TRY, Id_volatile \u003d Token.RESERVED;\n+    int id;\n+    String s \u003d name;\n+    L0: {\n+        id \u003d 0;\n+        String X \u003d null;\n+        int c;\n+        L: switch(s.length()) {\n+            case 2:\n+                c \u003d s.charAt(1);\n+                if (c \u003d\u003d \u0027f\u0027) {\n+                    if (s.charAt(0) \u003d\u003d \u0027i\u0027) {\n+                        id \u003d Id_if;\n+                        break L0;\n+                    }\n+                } else if (c \u003d\u003d \u0027n\u0027) {\n+                    if (s.charAt(0) \u003d\u003d \u0027i\u0027) {\n+                        id \u003d Id_in;\n+                        break L0;\n+                    }\n+                } else if (c \u003d\u003d \u0027o\u0027) {\n+                    if (s.charAt(0) \u003d\u003d \u0027d\u0027) {\n+                        id \u003d Id_do;\n+                        break L0;\n+                    }\n+                }\n+                break L;\n+            case 3:\n+                switch(s.charAt(0)) {\n+                    case \u0027f\u0027:\n+                        if (s.charAt(2) \u003d\u003d \u0027r\u0027 \u0026\u0026 s.charAt(1) \u003d\u003d \u0027o\u0027) {\n+                            id \u003d Id_for;\n+                            break L0;\n+                        }\n+                        break L;\n+                    case \u0027i\u0027:\n+                        if (s.charAt(2) \u003d\u003d \u0027t\u0027 \u0026\u0026 s.charAt(1) \u003d\u003d \u0027n\u0027) {\n+                            id \u003d Id_int;\n+                            break L0;\n+                        }\n+                        break L;\n+                    case \u0027n\u0027:\n+                        if (s.charAt(2) \u003d\u003d \u0027w\u0027 \u0026\u0026 s.charAt(1) \u003d\u003d \u0027e\u0027) {\n+                            id \u003d Id_new;\n+                            break L0;\n+                        }\n+                        break L;\n+                    case \u0027t\u0027:\n+                        if (s.charAt(2) \u003d\u003d \u0027y\u0027 \u0026\u0026 s.charAt(1) \u003d\u003d \u0027r\u0027) {\n+                            id \u003d Id_try;\n+                            break L0;\n+                        }\n+                        break L;\n+                    case \u0027v\u0027:\n+                        if (s.charAt(2) \u003d\u003d \u0027r\u0027 \u0026\u0026 s.charAt(1) \u003d\u003d \u0027a\u0027) {\n+                            id \u003d Id_var;\n+                            break L0;\n+                        }\n+                        break L;\n+                }\n+                break L;\n+            case 4:\n+                switch(s.charAt(0)) {\n+                    case \u0027b\u0027:\n+                        X \u003d \"byte\";\n+                        id \u003d Id_byte;\n+                        break L;\n+                    case \u0027c\u0027:\n+                        c \u003d s.charAt(3);\n+                        if (c \u003d\u003d \u0027e\u0027) {\n+                            if (s.charAt(2) \u003d\u003d \u0027s\u0027 \u0026\u0026 s.charAt(1) \u003d\u003d \u0027a\u0027) {\n+                                id \u003d Id_case;\n+                                break L0;\n+                            }\n+                        } else if (c \u003d\u003d \u0027r\u0027) {\n+                            if (s.charAt(2) \u003d\u003d \u0027a\u0027 \u0026\u0026 s.charAt(1) \u003d\u003d \u0027h\u0027) {\n+                                id \u003d Id_char;\n+                                break L0;\n+                            }\n+                        }\n+                        break L;\n+                    case \u0027e\u0027:\n+                        c \u003d s.charAt(3);\n+                        if (c \u003d\u003d \u0027e\u0027) {\n+                            if (s.charAt(2) \u003d\u003d \u0027s\u0027 \u0026\u0026 s.charAt(1) \u003d\u003d \u0027l\u0027) {\n+                                id \u003d Id_else;\n+                                break L0;\n+                            }\n+                        } else if (c \u003d\u003d \u0027m\u0027) {\n+                            if (s.charAt(2) \u003d\u003d \u0027u\u0027 \u0026\u0026 s.charAt(1) \u003d\u003d \u0027n\u0027) {\n+                                id \u003d Id_enum;\n+                                break L0;\n+                            }\n+                        }\n+                        break L;\n+                    case \u0027g\u0027:\n+                        X \u003d \"goto\";\n+                        id \u003d Id_goto;\n+                        break L;\n+                    case \u0027l\u0027:\n+                        X \u003d \"long\";\n+                        id \u003d Id_long;\n+                        break L;\n+                    case \u0027n\u0027:\n+                        X \u003d \"null\";\n+                        id \u003d Id_null;\n+                        break L;\n+                    case \u0027t\u0027:\n+                        c \u003d s.charAt(3);\n+                        if (c \u003d\u003d \u0027e\u0027) {\n+                            if (s.charAt(2) \u003d\u003d \u0027u\u0027 \u0026\u0026 s.charAt(1) \u003d\u003d \u0027r\u0027) {\n+                                id \u003d Id_true;\n+                                break L0;\n+                            }\n+                        } else if (c \u003d\u003d \u0027s\u0027) {\n+                            if (s.charAt(2) \u003d\u003d \u0027i\u0027 \u0026\u0026 s.charAt(1) \u003d\u003d \u0027h\u0027) {\n+                                id \u003d Id_this;\n+                                break L0;\n+                            }\n+                        }\n+                        break L;\n+                    case \u0027v\u0027:\n+                        X \u003d \"void\";\n+                        id \u003d Id_void;\n+                        break L;\n+                    case \u0027w\u0027:\n+                        X \u003d \"with\";\n+                        id \u003d Id_with;\n+                        break L;\n+                }\n+                break L;\n+            case 5:\n+                switch(s.charAt(2)) {\n+                    case \u0027a\u0027:\n+                        X \u003d \"class\";\n+                        id \u003d Id_class;\n+                        break L;\n+                    case \u0027e\u0027:\n+                        X \u003d \"break\";\n+                        id \u003d Id_break;\n+                        break L;\n+                    case \u0027i\u0027:\n+                        X \u003d \"while\";\n+                        id \u003d Id_while;\n+                        break L;\n+                    case \u0027l\u0027:\n+                        X \u003d \"false\";\n+                        id \u003d Id_false;\n+                        break L;\n+                    case \u0027n\u0027:\n+                        c \u003d s.charAt(0);\n+                        if (c \u003d\u003d \u0027c\u0027) {\n+                            X \u003d \"const\";\n+                            id \u003d Id_const;\n+                        } else if (c \u003d\u003d \u0027f\u0027) {\n+                            X \u003d \"final\";\n+                            id \u003d Id_final;\n+                        }\n+                        break L;\n+                    case \u0027o\u0027:\n+                        c \u003d s.charAt(0);\n+                        if (c \u003d\u003d \u0027f\u0027) {\n+                            X \u003d \"float\";\n+                            id \u003d Id_float;\n+                        } else if (c \u003d\u003d \u0027s\u0027) {\n+                            X \u003d \"short\";\n+                            id \u003d Id_short;\n+                        }\n+                        break L;\n+                    case \u0027p\u0027:\n+                        X \u003d \"super\";\n+                        id \u003d Id_super;\n+                        break L;\n+                    case \u0027r\u0027:\n+                        X \u003d \"throw\";\n+                        id \u003d Id_throw;\n+                        break L;\n+                    case \u0027t\u0027:\n+                        X \u003d \"catch\";\n+                        id \u003d Id_catch;\n+                        break L;\n+                }\n+                break L;\n+            case 6:\n+                switch(s.charAt(1)) {\n+                    case \u0027a\u0027:\n+                        X \u003d \"native\";\n+                        id \u003d Id_native;\n+                        break L;\n+                    case \u0027e\u0027:\n+                        c \u003d s.charAt(0);\n+                        if (c \u003d\u003d \u0027d\u0027) {\n+                            X \u003d \"delete\";\n+                            id \u003d Id_delete;\n+                        } else if (c \u003d\u003d \u0027r\u0027) {\n+                            X \u003d \"return\";\n+                            id \u003d Id_return;\n+                        }\n+                        break L;\n+                    case \u0027h\u0027:\n+                        X \u003d \"throws\";\n+                        id \u003d Id_throws;\n+                        break L;\n+                    case \u0027m\u0027:\n+                        X \u003d \"import\";\n+                        id \u003d Id_import;\n+                        break L;\n+                    case \u0027o\u0027:\n+                        X \u003d \"double\";\n+                        id \u003d Id_double;\n+                        break L;\n+                    case \u0027t\u0027:\n+                        X \u003d \"static\";\n+                        id \u003d Id_static;\n+                        break L;\n+                    case \u0027u\u0027:\n+                        X \u003d \"public\";\n+                        id \u003d Id_public;\n+                        break L;\n+                    case \u0027w\u0027:\n+                        X \u003d \"switch\";\n+                        id \u003d Id_switch;\n+                        break L;\n+                    case \u0027x\u0027:\n+                        X \u003d \"export\";\n+                        id \u003d Id_export;\n+                        break L;\n+                    case \u0027y\u0027:\n+                        X \u003d \"typeof\";\n+                        id \u003d Id_typeof;\n+                        break L;\n+                }\n+                break L;\n+            case 7:\n+                switch(s.charAt(1)) {\n+                    case \u0027a\u0027:\n+                        X \u003d \"package\";\n+                        id \u003d Id_package;\n+                        break L;\n+                    case \u0027e\u0027:\n+                        X \u003d \"default\";\n+                        id \u003d Id_default;\n+                        break L;\n+                    case \u0027i\u0027:\n+                        X \u003d \"finally\";\n+                        id \u003d Id_finally;\n+                        break L;\n+                    case \u0027o\u0027:\n+                        X \u003d \"boolean\";\n+                        id \u003d Id_boolean;\n+                        break L;\n+                    case \u0027r\u0027:\n+                        X \u003d \"private\";\n+                        id \u003d Id_private;\n+                        break L;\n+                    case \u0027x\u0027:\n+                        X \u003d \"extends\";\n+                        id \u003d Id_extends;\n+                        break L;\n+                }\n+                break L;\n+            case 8:\n+                switch(s.charAt(0)) {\n+                    case \u0027a\u0027:\n+                        X \u003d \"abstract\";\n+                        id \u003d Id_abstract;\n+                        break L;\n+                    case \u0027c\u0027:\n+                        X \u003d \"continue\";\n+                        id \u003d Id_continue;\n+                        break L;\n+                    case \u0027d\u0027:\n+                        X \u003d \"debugger\";\n+                        id \u003d Id_debugger;\n+                        break L;\n+                    case \u0027f\u0027:\n+                        X \u003d \"function\";\n+                        id \u003d Id_function;\n+                        break L;\n+                    case \u0027v\u0027:\n+                        X \u003d \"volatile\";\n+                        id \u003d Id_volatile;\n+                        break L;\n+                }\n+                break L;\n+            case 9:\n+                c \u003d s.charAt(0);\n+                if (c \u003d\u003d \u0027i\u0027) {\n+                    X \u003d \"interface\";\n+                    id \u003d Id_interface;\n+                } else if (c \u003d\u003d \u0027p\u0027) {\n+                    X \u003d \"protected\";\n+                    id \u003d Id_protected;\n+                } else if (c \u003d\u003d \u0027t\u0027) {\n+                    X \u003d \"transient\";\n+                    id \u003d Id_transient;\n+                }\n+                break L;\n+            case 10:\n+                c \u003d s.charAt(1);\n+                if (c \u003d\u003d \u0027m\u0027) {\n+                    X \u003d \"implements\";\n+                    id \u003d Id_implements;\n+                } else if (c \u003d\u003d \u0027n\u0027) {\n+                    X \u003d \"instanceof\";\n+                    id \u003d Id_instanceof;\n+                }\n+                break L;\n+            case 12:\n+                X \u003d \"synchronized\";\n+                id \u003d Id_synchronized;\n+                break L;\n+        }\n+        if (X !\u003d null \u0026\u0026 X !\u003d s \u0026\u0026 !X.equals(s))\n+            id \u003d 0;\n+    }\n+    if (id \u003d\u003d 0) {\n+        return Token.EOF;\n+    }\n+    return id \u0026 0xff;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private static int stringToKeyword(String name) {\n    final int Id_break \u003d Token.BREAK, Id_case \u003d Token.CASE, Id_continue \u003d Token.CONTINUE, Id_default \u003d Token.DEFAULT, Id_delete \u003d Token.DELPROP, Id_do \u003d Token.DO, Id_else \u003d Token.ELSE, Id_export \u003d Token.EXPORT, Id_false \u003d Token.FALSE, Id_for \u003d Token.FOR, Id_function \u003d Token.FUNCTION, Id_if \u003d Token.IF, Id_in \u003d Token.IN, Id_new \u003d Token.NEW, Id_null \u003d Token.NULL, Id_return \u003d Token.RETURN, Id_switch \u003d Token.SWITCH, Id_this \u003d Token.THIS, Id_true \u003d Token.TRUE, Id_typeof \u003d Token.TYPEOF, Id_var \u003d Token.VAR, Id_void \u003d Token.VOID, Id_while \u003d Token.WHILE, Id_with \u003d Token.WITH, Id_abstract \u003d Token.RESERVED, Id_boolean \u003d Token.RESERVED, Id_byte \u003d Token.RESERVED, Id_catch \u003d Token.CATCH, Id_char \u003d Token.RESERVED, Id_class \u003d Token.RESERVED, Id_const \u003d Token.CONST, Id_debugger \u003d Token.DEBUGGER, Id_double \u003d Token.RESERVED, Id_enum \u003d Token.RESERVED, Id_extends \u003d Token.RESERVED, Id_final \u003d Token.RESERVED, Id_finally \u003d Token.FINALLY, Id_float \u003d Token.RESERVED, Id_goto \u003d Token.RESERVED, Id_implements \u003d Token.RESERVED, Id_import \u003d Token.IMPORT, Id_instanceof \u003d Token.INSTANCEOF, Id_int \u003d Token.RESERVED, Id_interface \u003d Token.RESERVED, Id_long \u003d Token.RESERVED, Id_native \u003d Token.RESERVED, Id_package \u003d Token.RESERVED, Id_private \u003d Token.RESERVED, Id_protected \u003d Token.RESERVED, Id_public \u003d Token.RESERVED, Id_short \u003d Token.RESERVED, Id_static \u003d Token.RESERVED, Id_super \u003d Token.RESERVED, Id_synchronized \u003d Token.RESERVED, Id_throw \u003d Token.THROW, Id_throws \u003d Token.RESERVED, Id_transient \u003d Token.RESERVED, Id_try \u003d Token.TRY, Id_volatile \u003d Token.RESERVED;\n    int id;\n    String s \u003d name;\n    L0: {\n        id \u003d 0;\n        String X \u003d null;\n        int c;\n        L: switch(s.length()) {\n            case 2:\n                c \u003d s.charAt(1);\n                if (c \u003d\u003d \u0027f\u0027) {\n                    if (s.charAt(0) \u003d\u003d \u0027i\u0027) {\n                        id \u003d Id_if;\n                        break L0;\n                    }\n                } else if (c \u003d\u003d \u0027n\u0027) {\n                    if (s.charAt(0) \u003d\u003d \u0027i\u0027) {\n                        id \u003d Id_in;\n                        break L0;\n                    }\n                } else if (c \u003d\u003d \u0027o\u0027) {\n                    if (s.charAt(0) \u003d\u003d \u0027d\u0027) {\n                        id \u003d Id_do;\n                        break L0;\n                    }\n                }\n                break L;\n            case 3:\n                switch(s.charAt(0)) {\n                    case \u0027f\u0027:\n                        if (s.charAt(2) \u003d\u003d \u0027r\u0027 \u0026\u0026 s.charAt(1) \u003d\u003d \u0027o\u0027) {\n                            id \u003d Id_for;\n                            break L0;\n                        }\n                        break L;\n                    case \u0027i\u0027:\n                        if (s.charAt(2) \u003d\u003d \u0027t\u0027 \u0026\u0026 s.charAt(1) \u003d\u003d \u0027n\u0027) {\n                            id \u003d Id_int;\n                            break L0;\n                        }\n                        break L;\n                    case \u0027n\u0027:\n                        if (s.charAt(2) \u003d\u003d \u0027w\u0027 \u0026\u0026 s.charAt(1) \u003d\u003d \u0027e\u0027) {\n                            id \u003d Id_new;\n                            break L0;\n                        }\n                        break L;\n                    case \u0027t\u0027:\n                        if (s.charAt(2) \u003d\u003d \u0027y\u0027 \u0026\u0026 s.charAt(1) \u003d\u003d \u0027r\u0027) {\n                            id \u003d Id_try;\n                            break L0;\n                        }\n                        break L;\n                    case \u0027v\u0027:\n                        if (s.charAt(2) \u003d\u003d \u0027r\u0027 \u0026\u0026 s.charAt(1) \u003d\u003d \u0027a\u0027) {\n                            id \u003d Id_var;\n                            break L0;\n                        }\n                        break L;\n                }\n                break L;\n            case 4:\n                switch(s.charAt(0)) {\n                    case \u0027b\u0027:\n                        X \u003d \"byte\";\n                        id \u003d Id_byte;\n                        break L;\n                    case \u0027c\u0027:\n                        c \u003d s.charAt(3);\n                        if (c \u003d\u003d \u0027e\u0027) {\n                            if (s.charAt(2) \u003d\u003d \u0027s\u0027 \u0026\u0026 s.charAt(1) \u003d\u003d \u0027a\u0027) {\n                                id \u003d Id_case;\n                                break L0;\n                            }\n                        } else if (c \u003d\u003d \u0027r\u0027) {\n                            if (s.charAt(2) \u003d\u003d \u0027a\u0027 \u0026\u0026 s.charAt(1) \u003d\u003d \u0027h\u0027) {\n                                id \u003d Id_char;\n                                break L0;\n                            }\n                        }\n                        break L;\n                    case \u0027e\u0027:\n                        c \u003d s.charAt(3);\n                        if (c \u003d\u003d \u0027e\u0027) {\n                            if (s.charAt(2) \u003d\u003d \u0027s\u0027 \u0026\u0026 s.charAt(1) \u003d\u003d \u0027l\u0027) {\n                                id \u003d Id_else;\n                                break L0;\n                            }\n                        } else if (c \u003d\u003d \u0027m\u0027) {\n                            if (s.charAt(2) \u003d\u003d \u0027u\u0027 \u0026\u0026 s.charAt(1) \u003d\u003d \u0027n\u0027) {\n                                id \u003d Id_enum;\n                                break L0;\n                            }\n                        }\n                        break L;\n                    case \u0027g\u0027:\n                        X \u003d \"goto\";\n                        id \u003d Id_goto;\n                        break L;\n                    case \u0027l\u0027:\n                        X \u003d \"long\";\n                        id \u003d Id_long;\n                        break L;\n                    case \u0027n\u0027:\n                        X \u003d \"null\";\n                        id \u003d Id_null;\n                        break L;\n                    case \u0027t\u0027:\n                        c \u003d s.charAt(3);\n                        if (c \u003d\u003d \u0027e\u0027) {\n                            if (s.charAt(2) \u003d\u003d \u0027u\u0027 \u0026\u0026 s.charAt(1) \u003d\u003d \u0027r\u0027) {\n                                id \u003d Id_true;\n                                break L0;\n                            }\n                        } else if (c \u003d\u003d \u0027s\u0027) {\n                            if (s.charAt(2) \u003d\u003d \u0027i\u0027 \u0026\u0026 s.charAt(1) \u003d\u003d \u0027h\u0027) {\n                                id \u003d Id_this;\n                                break L0;\n                            }\n                        }\n                        break L;\n                    case \u0027v\u0027:\n                        X \u003d \"void\";\n                        id \u003d Id_void;\n                        break L;\n                    case \u0027w\u0027:\n                        X \u003d \"with\";\n                        id \u003d Id_with;\n                        break L;\n                }\n                break L;\n            case 5:\n                switch(s.charAt(2)) {\n                    case \u0027a\u0027:\n                        X \u003d \"class\";\n                        id \u003d Id_class;\n                        break L;\n                    case \u0027e\u0027:\n                        X \u003d \"break\";\n                        id \u003d Id_break;\n                        break L;\n                    case \u0027i\u0027:\n                        X \u003d \"while\";\n                        id \u003d Id_while;\n                        break L;\n                    case \u0027l\u0027:\n                        X \u003d \"false\";\n                        id \u003d Id_false;\n                        break L;\n                    case \u0027n\u0027:\n                        c \u003d s.charAt(0);\n                        if (c \u003d\u003d \u0027c\u0027) {\n                            X \u003d \"const\";\n                            id \u003d Id_const;\n                        } else if (c \u003d\u003d \u0027f\u0027) {\n                            X \u003d \"final\";\n                            id \u003d Id_final;\n                        }\n                        break L;\n                    case \u0027o\u0027:\n                        c \u003d s.charAt(0);\n                        if (c \u003d\u003d \u0027f\u0027) {\n                            X \u003d \"float\";\n                            id \u003d Id_float;\n                        } else if (c \u003d\u003d \u0027s\u0027) {\n                            X \u003d \"short\";\n                            id \u003d Id_short;\n                        }\n                        break L;\n                    case \u0027p\u0027:\n                        X \u003d \"super\";\n                        id \u003d Id_super;\n                        break L;\n                    case \u0027r\u0027:\n                        X \u003d \"throw\";\n                        id \u003d Id_throw;\n                        break L;\n                    case \u0027t\u0027:\n                        X \u003d \"catch\";\n                        id \u003d Id_catch;\n                        break L;\n                }\n                break L;\n            case 6:\n                switch(s.charAt(1)) {\n                    case \u0027a\u0027:\n                        X \u003d \"native\";\n                        id \u003d Id_native;\n                        break L;\n                    case \u0027e\u0027:\n                        c \u003d s.charAt(0);\n                        if (c \u003d\u003d \u0027d\u0027) {\n                            X \u003d \"delete\";\n                            id \u003d Id_delete;\n                        } else if (c \u003d\u003d \u0027r\u0027) {\n                            X \u003d \"return\";\n                            id \u003d Id_return;\n                        }\n                        break L;\n                    case \u0027h\u0027:\n                        X \u003d \"throws\";\n                        id \u003d Id_throws;\n                        break L;\n                    case \u0027m\u0027:\n                        X \u003d \"import\";\n                        id \u003d Id_import;\n                        break L;\n                    case \u0027o\u0027:\n                        X \u003d \"double\";\n                        id \u003d Id_double;\n                        break L;\n                    case \u0027t\u0027:\n                        X \u003d \"static\";\n                        id \u003d Id_static;\n                        break L;\n                    case \u0027u\u0027:\n                        X \u003d \"public\";\n                        id \u003d Id_public;\n                        break L;\n                    case \u0027w\u0027:\n                        X \u003d \"switch\";\n                        id \u003d Id_switch;\n                        break L;\n                    case \u0027x\u0027:\n                        X \u003d \"export\";\n                        id \u003d Id_export;\n                        break L;\n                    case \u0027y\u0027:\n                        X \u003d \"typeof\";\n                        id \u003d Id_typeof;\n                        break L;\n                }\n                break L;\n            case 7:\n                switch(s.charAt(1)) {\n                    case \u0027a\u0027:\n                        X \u003d \"package\";\n                        id \u003d Id_package;\n                        break L;\n                    case \u0027e\u0027:\n                        X \u003d \"default\";\n                        id \u003d Id_default;\n                        break L;\n                    case \u0027i\u0027:\n                        X \u003d \"finally\";\n                        id \u003d Id_finally;\n                        break L;\n                    case \u0027o\u0027:\n                        X \u003d \"boolean\";\n                        id \u003d Id_boolean;\n                        break L;\n                    case \u0027r\u0027:\n                        X \u003d \"private\";\n                        id \u003d Id_private;\n                        break L;\n                    case \u0027x\u0027:\n                        X \u003d \"extends\";\n                        id \u003d Id_extends;\n                        break L;\n                }\n                break L;\n            case 8:\n                switch(s.charAt(0)) {\n                    case \u0027a\u0027:\n                        X \u003d \"abstract\";\n                        id \u003d Id_abstract;\n                        break L;\n                    case \u0027c\u0027:\n                        X \u003d \"continue\";\n                        id \u003d Id_continue;\n                        break L;\n                    case \u0027d\u0027:\n                        X \u003d \"debugger\";\n                        id \u003d Id_debugger;\n                        break L;\n                    case \u0027f\u0027:\n                        X \u003d \"function\";\n                        id \u003d Id_function;\n                        break L;\n                    case \u0027v\u0027:\n                        X \u003d \"volatile\";\n                        id \u003d Id_volatile;\n                        break L;\n                }\n                break L;\n            case 9:\n                c \u003d s.charAt(0);\n                if (c \u003d\u003d \u0027i\u0027) {\n                    X \u003d \"interface\";\n                    id \u003d Id_interface;\n                } else if (c \u003d\u003d \u0027p\u0027) {\n                    X \u003d \"protected\";\n                    id \u003d Id_protected;\n                } else if (c \u003d\u003d \u0027t\u0027) {\n                    X \u003d \"transient\";\n                    id \u003d Id_transient;\n                }\n                break L;\n            case 10:\n                c \u003d s.charAt(1);\n                if (c \u003d\u003d \u0027m\u0027) {\n                    X \u003d \"implements\";\n                    id \u003d Id_implements;\n                } else if (c \u003d\u003d \u0027n\u0027) {\n                    X \u003d \"instanceof\";\n                    id \u003d Id_instanceof;\n                }\n                break L;\n            case 12:\n                X \u003d \"synchronized\";\n                id \u003d Id_synchronized;\n                break L;\n        }\n        if (X !\u003d null \u0026\u0026 X !\u003d s \u0026\u0026 !X.equals(s))\n            id \u003d 0;\n    }\n    if (id \u003d\u003d 0) {\n        return Token.EOF;\n    }\n    return id \u0026 0xff;\n}",
      "path": "src/com/google/javascript/rhino/TokenStream.java",
      "functionStartLine": 120,
      "functionName": "stringToKeyword",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}