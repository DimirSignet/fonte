{
  "origin": "codeshovel",
  "repositoryName": "Math-54b",
  "repositoryPath": "/tmp/Math-54b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Dfp.java",
  "functionName": "trap",
  "functionId": "trap___type-int__what-String__oper-Dfp__def-Dfp__result-Dfp",
  "sourceFilePath": "src/main/java/org/apache/commons/math/dfp/Dfp.java",
  "functionAnnotation": "",
  "functionDoc": "Trap handler.  Subclasses may override this to provide trap\n functionality per IEEE 854-1987.\n\n@ @param type  The exception type - e.g. FLAG_OVERFLOW\n @param what  The name of the routine we were in e.g. divide()\n @param oper  An operand to this function if any\n @param def   The default return value if trap not enabled\n @param result    The result that is specified to be delivered per\n                  IEEE 854, if any\n @return the value that should be return by the operation triggering the trap\n",
  "functionStartLine": 2202,
  "functionEndLine": 2204,
  "numCommitsSeen": 4,
  "timeTaken": 811,
  "changeHistory": [
    "1eb0c0d7421823470de3a901643ae3be2c9e0a8e"
  ],
  "changeHistoryShort": {
    "1eb0c0d7421823470de3a901643ae3be2c9e0a8e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1eb0c0d7421823470de3a901643ae3be2c9e0a8e": {
      "type": "Yintroduced",
      "commitMessage": "added the dfp library\nThe Dfp class represent the high precision numbers, it implements our existing Field interface and hence each instance is associated with a DfpField that provides the constants at the required precision as well as factory methods. This allowed to remove the compile-time constraint in the library. Users can even use at the same time a field for 20 decimals digits precision and another field for 100 digits precision. Dfp instances with different precision CANNOT be mixed in the same computation (doing so creates a NaN). A few utility methods have been added, like constructors from integral types, isInfinite and isNaN methods, equal has been renames to equals and its signature changed to match the general Object method (a hashcode method has been added too).\nJIRA: MATH-412\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@992697 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/4/10, 3:59 PM",
      "commitName": "1eb0c0d7421823470de3a901643ae3be2c9e0a8e",
      "commitAuthor": "Luc Maisonobe",
      "diff": "@@ -0,0 +1,3 @@\n+protected Dfp trap(int type, String what, Dfp oper, Dfp def, Dfp result) {\n+    return def;\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected Dfp trap(int type, String what, Dfp oper, Dfp def, Dfp result) {\n    return def;\n}",
      "path": "src/main/java/org/apache/commons/math/dfp/Dfp.java",
      "functionStartLine": 2203,
      "functionName": "trap",
      "functionAnnotation": "",
      "functionDoc": "Trap handler.  Subclasses may override this to provide trap\n functionality per IEEE 854-1987.\n\n@ @param type  The exception type - e.g. FLAG_OVERFLOW\n @param what  The name of the routine we were in e.g. divide()\n @param oper  An operand to this function if any\n @param def   The default return value if trap not enabled\n @param result    The result that is specified to be delivered per\n                  IEEE 854, if any\n @return the value that should be return by the operation triggering the trap\n"
    }
  }
}