{
  "origin": "codeshovel",
  "repositoryName": "Math-75b",
  "repositoryPath": "/tmp/Math-75b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Frequency.java",
  "functionName": "compare",
  "functionId": "$compare___o1-Comparable__T____o2-Comparable__T__",
  "sourceFilePath": "src/main/java/org/apache/commons/math/stat/Frequency.java",
  "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
  "functionDoc": "Compare the two {@link Comparable Comparable} arguments.\nThis method is equivalent to:\n\u003cpre\u003e(({@link Comparable Comparable})o1).{@link Comparable#compareTo compareTo}(o2)\u003c/pre\u003e\n\n@param o1 the first object\n@param o2 the second object\n@return result of comparison\n@throws NullPointerException when \u003ci\u003eo1\u003c/i\u003e is \u003ccode\u003enull\u003c/code\u003e,\n        or when \u003ccode\u003e((Comparable)o1).compareTo(o2)\u003c/code\u003e does\n@throws ClassCastException when \u003ci\u003eo1\u003c/i\u003e is not a {@link Comparable Comparable},\n        or when \u003ccode\u003e((Comparable)o1).compareTo(o2)\u003c/code\u003e does\n",
  "functionStartLine": 560,
  "functionEndLine": 562,
  "numCommitsSeen": 103,
  "timeTaken": 1545,
  "changeHistory": [
    "b631eb68a8aa659e0760de672edfbfb9f9ac246d",
    "26dac5a0e7fc9c6be9571b3e71a15d8502480d96",
    "d6a438e931412713e99624cf9ed74470f1040184",
    "18b61a1b18ed7d80ec2bf28588ce95fdd3dddf28",
    "ee76cb3292d63a7171f5d33b7f1d5a98cc6015bc",
    "2ae4998c4b53c951160f8a0b63fa8f7493d956cb"
  ],
  "changeHistoryShort": {
    "b631eb68a8aa659e0760de672edfbfb9f9ac246d": "Ybodychange",
    "26dac5a0e7fc9c6be9571b3e71a15d8502480d96": "Ydocchange",
    "d6a438e931412713e99624cf9ed74470f1040184": "Yfilerename",
    "18b61a1b18ed7d80ec2bf28588ce95fdd3dddf28": "Ymultichange(Yparameterchange,Ybodychange,Yannotationchange)",
    "ee76cb3292d63a7171f5d33b7f1d5a98cc6015bc": "Ymultichange(Ybodychange,Yannotationchange)",
    "2ae4998c4b53c951160f8a0b63fa8f7493d956cb": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b631eb68a8aa659e0760de672edfbfb9f9ac246d": {
      "type": "Ybodychange",
      "commitMessage": "removed unnecessary parentheses\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@811833 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/6/09, 9:27 AM",
      "commitName": "b631eb68a8aa659e0760de672edfbfb9f9ac246d",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "9/5/09, 10:36 AM",
      "commitNameOld": "26dac5a0e7fc9c6be9571b3e71a15d8502480d96",
      "commitAuthorOld": "Phil Steitz",
      "daysBetweenCommits": 0.95,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\npublic int compare(Comparable\u003cT\u003e o1, Comparable\u003cT\u003e o2) {\n    return o1.compareTo((T) o2);\n}",
      "path": "src/main/java/org/apache/commons/math/stat/Frequency.java",
      "functionStartLine": 559,
      "functionName": "compare",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Compare the two {@link Comparable Comparable} arguments.\nThis method is equivalent to:\n\u003cpre\u003e(({@link Comparable Comparable})o1).{@link Comparable#compareTo compareTo}(o2)\u003c/pre\u003e\n\n@param o1 the first object\n@param o2 the second object\n@return result of comparison\n@throws NullPointerException when \u003ci\u003eo1\u003c/i\u003e is \u003ccode\u003enull\u003c/code\u003e,\n        or when \u003ccode\u003e((Comparable)o1).compareTo(o2)\u003c/code\u003e does\n@throws ClassCastException when \u003ci\u003eo1\u003c/i\u003e is not a {@link Comparable Comparable},\n        or when \u003ccode\u003e((Comparable)o1).compareTo(o2)\u003c/code\u003e does\n",
      "diff": "@@ -1,4 +1,4 @@\n @SuppressWarnings(\"unchecked\")\n public int compare(Comparable\u003cT\u003e o1, Comparable\u003cT\u003e o2) {\n-    return (o1.compareTo((T) o2));\n+    return o1.compareTo((T) o2);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "26dac5a0e7fc9c6be9571b3e71a15d8502480d96": {
      "type": "Ydocchange",
      "commitMessage": "Removed trailing spaces.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@811685 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/5/09, 10:36 AM",
      "commitName": "26dac5a0e7fc9c6be9571b3e71a15d8502480d96",
      "commitAuthor": "Phil Steitz",
      "commitDateOld": "8/1/09, 7:30 AM",
      "commitNameOld": "d6a438e931412713e99624cf9ed74470f1040184",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 35.13,
      "commitsBetweenForRepo": 44,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\npublic int compare(Comparable\u003cT\u003e o1, Comparable\u003cT\u003e o2) {\n    return (o1.compareTo((T) o2));\n}",
      "path": "src/main/java/org/apache/commons/math/stat/Frequency.java",
      "functionStartLine": 559,
      "functionName": "compare",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Compare the two {@link Comparable Comparable} arguments.\nThis method is equivalent to:\n\u003cpre\u003e(({@link Comparable Comparable})o1).{@link Comparable#compareTo compareTo}(o2)\u003c/pre\u003e\n\n@param o1 the first object\n@param o2 the second object\n@return result of comparison\n@throws NullPointerException when \u003ci\u003eo1\u003c/i\u003e is \u003ccode\u003enull\u003c/code\u003e,\n        or when \u003ccode\u003e((Comparable)o1).compareTo(o2)\u003c/code\u003e does\n@throws ClassCastException when \u003ci\u003eo1\u003c/i\u003e is not a {@link Comparable Comparable},\n        or when \u003ccode\u003e((Comparable)o1).compareTo(o2)\u003c/code\u003e does\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Compare the two {@link Comparable Comparable} arguments.\nThis method is equivalent to:\n\u003cpre\u003e(({@link Comparable Comparable})o1).{@link Comparable#compareTo compareTo}(o2)\u003c/pre\u003e\n\n@param o1 the first object\n@param o2 the second object\n@return result of comparison\n@throws NullPointerException when \u003ci\u003eo1\u003c/i\u003e is \u003ccode\u003enull\u003c/code\u003e, \n        or when \u003ccode\u003e((Comparable)o1).compareTo(o2)\u003c/code\u003e does\n@throws ClassCastException when \u003ci\u003eo1\u003c/i\u003e is not a {@link Comparable Comparable}, \n        or when \u003ccode\u003e((Comparable)o1).compareTo(o2)\u003c/code\u003e does\n",
        "newValue": "Compare the two {@link Comparable Comparable} arguments.\nThis method is equivalent to:\n\u003cpre\u003e(({@link Comparable Comparable})o1).{@link Comparable#compareTo compareTo}(o2)\u003c/pre\u003e\n\n@param o1 the first object\n@param o2 the second object\n@return result of comparison\n@throws NullPointerException when \u003ci\u003eo1\u003c/i\u003e is \u003ccode\u003enull\u003c/code\u003e,\n        or when \u003ccode\u003e((Comparable)o1).compareTo(o2)\u003c/code\u003e does\n@throws ClassCastException when \u003ci\u003eo1\u003c/i\u003e is not a {@link Comparable Comparable},\n        or when \u003ccode\u003e((Comparable)o1).compareTo(o2)\u003c/code\u003e does\n"
      }
    },
    "d6a438e931412713e99624cf9ed74470f1040184": {
      "type": "Yfilerename",
      "commitMessage": "moved main java directory for compliance with maven standard directory layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@799870 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/1/09, 7:30 AM",
      "commitName": "d6a438e931412713e99624cf9ed74470f1040184",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "8/1/09, 7:23 AM",
      "commitNameOld": "2ad5ef61630be627f46ae1c266cf796f044bd4a8",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\npublic int compare(Comparable\u003cT\u003e o1, Comparable\u003cT\u003e o2) {\n    return (o1.compareTo((T) o2));\n}",
      "path": "src/main/java/org/apache/commons/math/stat/Frequency.java",
      "functionStartLine": 559,
      "functionName": "compare",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Compare the two {@link Comparable Comparable} arguments.\nThis method is equivalent to:\n\u003cpre\u003e(({@link Comparable Comparable})o1).{@link Comparable#compareTo compareTo}(o2)\u003c/pre\u003e\n\n@param o1 the first object\n@param o2 the second object\n@return result of comparison\n@throws NullPointerException when \u003ci\u003eo1\u003c/i\u003e is \u003ccode\u003enull\u003c/code\u003e, \n        or when \u003ccode\u003e((Comparable)o1).compareTo(o2)\u003c/code\u003e does\n@throws ClassCastException when \u003ci\u003eo1\u003c/i\u003e is not a {@link Comparable Comparable}, \n        or when \u003ccode\u003e((Comparable)o1).compareTo(o2)\u003c/code\u003e does\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/math/stat/Frequency.java",
        "newPath": "src/main/java/org/apache/commons/math/stat/Frequency.java"
      }
    },
    "18b61a1b18ed7d80ec2bf28588ce95fdd3dddf28": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Yannotationchange)",
      "commitMessage": "removed compilation/findbugs warnings about type safety\nthe changes include API changes (replacing Object by Comparable\u003c?\u003e).\nThe class itself is still not generic as this would prevent mixing types which is a desired feature here that is checked in the unit tests\nJIRA: MATH-261\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@791733 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/7/09, 12:44 AM",
      "commitName": "18b61a1b18ed7d80ec2bf28588ce95fdd3dddf28",
      "commitAuthor": "Luc Maisonobe",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "removed compilation/findbugs warnings about type safety\nthe changes include API changes (replacing Object by Comparable\u003c?\u003e).\nThe class itself is still not generic as this would prevent mixing types which is a desired feature here that is checked in the unit tests\nJIRA: MATH-261\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@791733 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/7/09, 12:44 AM",
          "commitName": "18b61a1b18ed7d80ec2bf28588ce95fdd3dddf28",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "6/1/09, 6:24 AM",
          "commitNameOld": "b9f4e914df109dedee24e7b5674d6cfdee170ff9",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 35.76,
          "commitsBetweenForRepo": 103,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"unchecked\")\npublic int compare(Comparable\u003cT\u003e o1, Comparable\u003cT\u003e o2) {\n    return (o1.compareTo((T) o2));\n}",
          "path": "src/java/org/apache/commons/math/stat/Frequency.java",
          "functionStartLine": 559,
          "functionName": "compare",
          "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
          "functionDoc": "Compare the two {@link Comparable Comparable} arguments.\nThis method is equivalent to:\n\u003cpre\u003e(({@link Comparable Comparable})o1).{@link Comparable#compareTo compareTo}(o2)\u003c/pre\u003e\n\n@param o1 the first object\n@param o2 the second object\n@return result of comparison\n@throws NullPointerException when \u003ci\u003eo1\u003c/i\u003e is \u003ccode\u003enull\u003c/code\u003e, \n        or when \u003ccode\u003e((Comparable)o1).compareTo(o2)\u003c/code\u003e does\n@throws ClassCastException when \u003ci\u003eo1\u003c/i\u003e is not a {@link Comparable Comparable}, \n        or when \u003ccode\u003e((Comparable)o1).compareTo(o2)\u003c/code\u003e does\n",
          "diff": "@@ -1,4 +1,4 @@\n @SuppressWarnings(\"unchecked\")\n-public int compare(Object o1, Object o2) {\n-    return ((Comparable\u003cObject\u003e) o1).compareTo(o2);\n+public int compare(Comparable\u003cT\u003e o1, Comparable\u003cT\u003e o2) {\n+    return (o1.compareTo((T) o2));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[o1-Object, o2-Object]",
            "newValue": "[o1-Comparable\u003cT\u003e, o2-Comparable\u003cT\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "removed compilation/findbugs warnings about type safety\nthe changes include API changes (replacing Object by Comparable\u003c?\u003e).\nThe class itself is still not generic as this would prevent mixing types which is a desired feature here that is checked in the unit tests\nJIRA: MATH-261\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@791733 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/7/09, 12:44 AM",
          "commitName": "18b61a1b18ed7d80ec2bf28588ce95fdd3dddf28",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "6/1/09, 6:24 AM",
          "commitNameOld": "b9f4e914df109dedee24e7b5674d6cfdee170ff9",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 35.76,
          "commitsBetweenForRepo": 103,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"unchecked\")\npublic int compare(Comparable\u003cT\u003e o1, Comparable\u003cT\u003e o2) {\n    return (o1.compareTo((T) o2));\n}",
          "path": "src/java/org/apache/commons/math/stat/Frequency.java",
          "functionStartLine": 559,
          "functionName": "compare",
          "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
          "functionDoc": "Compare the two {@link Comparable Comparable} arguments.\nThis method is equivalent to:\n\u003cpre\u003e(({@link Comparable Comparable})o1).{@link Comparable#compareTo compareTo}(o2)\u003c/pre\u003e\n\n@param o1 the first object\n@param o2 the second object\n@return result of comparison\n@throws NullPointerException when \u003ci\u003eo1\u003c/i\u003e is \u003ccode\u003enull\u003c/code\u003e, \n        or when \u003ccode\u003e((Comparable)o1).compareTo(o2)\u003c/code\u003e does\n@throws ClassCastException when \u003ci\u003eo1\u003c/i\u003e is not a {@link Comparable Comparable}, \n        or when \u003ccode\u003e((Comparable)o1).compareTo(o2)\u003c/code\u003e does\n",
          "diff": "@@ -1,4 +1,4 @@\n @SuppressWarnings(\"unchecked\")\n-public int compare(Object o1, Object o2) {\n-    return ((Comparable\u003cObject\u003e) o1).compareTo(o2);\n+public int compare(Comparable\u003cT\u003e o1, Comparable\u003cT\u003e o2) {\n+    return (o1.compareTo((T) o2));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yannotationchange",
          "commitMessage": "removed compilation/findbugs warnings about type safety\nthe changes include API changes (replacing Object by Comparable\u003c?\u003e).\nThe class itself is still not generic as this would prevent mixing types which is a desired feature here that is checked in the unit tests\nJIRA: MATH-261\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@791733 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/7/09, 12:44 AM",
          "commitName": "18b61a1b18ed7d80ec2bf28588ce95fdd3dddf28",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "6/1/09, 6:24 AM",
          "commitNameOld": "b9f4e914df109dedee24e7b5674d6cfdee170ff9",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 35.76,
          "commitsBetweenForRepo": 103,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"unchecked\")\npublic int compare(Comparable\u003cT\u003e o1, Comparable\u003cT\u003e o2) {\n    return (o1.compareTo((T) o2));\n}",
          "path": "src/java/org/apache/commons/math/stat/Frequency.java",
          "functionStartLine": 559,
          "functionName": "compare",
          "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
          "functionDoc": "Compare the two {@link Comparable Comparable} arguments.\nThis method is equivalent to:\n\u003cpre\u003e(({@link Comparable Comparable})o1).{@link Comparable#compareTo compareTo}(o2)\u003c/pre\u003e\n\n@param o1 the first object\n@param o2 the second object\n@return result of comparison\n@throws NullPointerException when \u003ci\u003eo1\u003c/i\u003e is \u003ccode\u003enull\u003c/code\u003e, \n        or when \u003ccode\u003e((Comparable)o1).compareTo(o2)\u003c/code\u003e does\n@throws ClassCastException when \u003ci\u003eo1\u003c/i\u003e is not a {@link Comparable Comparable}, \n        or when \u003ccode\u003e((Comparable)o1).compareTo(o2)\u003c/code\u003e does\n",
          "diff": "@@ -1,4 +1,4 @@\n @SuppressWarnings(\"unchecked\")\n-public int compare(Object o1, Object o2) {\n-    return ((Comparable\u003cObject\u003e) o1).compareTo(o2);\n+public int compare(Comparable\u003cT\u003e o1, Comparable\u003cT\u003e o2) {\n+    return (o1.compareTo((T) o2));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "// See Javadoc, ClassCast is expected\n@SuppressWarnings(\"unchecked\")",
            "newValue": "@SuppressWarnings(\"unchecked\")"
          }
        }
      ]
    },
    "ee76cb3292d63a7171f5d33b7f1d5a98cc6015bc": {
      "type": "Ymultichange(Ybodychange,Yannotationchange)",
      "commitMessage": "MATH-261 - start adding some generics to Frequency\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@768084 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/23/09, 3:52 PM",
      "commitName": "ee76cb3292d63a7171f5d33b7f1d5a98cc6015bc",
      "commitAuthor": "Sebastian Bazley",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "MATH-261 - start adding some generics to Frequency\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@768084 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "4/23/09, 3:52 PM",
          "commitName": "ee76cb3292d63a7171f5d33b7f1d5a98cc6015bc",
          "commitAuthor": "Sebastian Bazley",
          "commitDateOld": "4/17/09, 6:44 AM",
          "commitNameOld": "62b3877f953dd47c4d301be35c77446e2cf55311",
          "commitAuthorOld": "Sebastian Bazley",
          "daysBetweenCommits": 6.38,
          "commitsBetweenForRepo": 21,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"unchecked\")\npublic int compare(Object o1, Object o2) {\n    return ((Comparable\u003cObject\u003e) o1).compareTo(o2);\n}",
          "path": "src/java/org/apache/commons/math/stat/Frequency.java",
          "functionStartLine": 491,
          "functionName": "compare",
          "functionAnnotation": "// See Javadoc, ClassCast is expected\n@SuppressWarnings(\"unchecked\")",
          "functionDoc": "Compare the two {@link Comparable Comparable} arguments.\nThis method is equivalent to:\n\u003cpre\u003e(({@link Comparable Comparable})o1).{@link Comparable#compareTo compareTo}(o2)\u003c/pre\u003e\n\n@param o1 the first object\n@param o2 the second object\n@return result of comparison\n@throws NullPointerException when \u003ci\u003eo1\u003c/i\u003e is \u003ccode\u003enull\u003c/code\u003e, \n        or when \u003ccode\u003e((Comparable)o1).compareTo(o2)\u003c/code\u003e does\n@throws ClassCastException when \u003ci\u003eo1\u003c/i\u003e is not a {@link Comparable Comparable}, \n        or when \u003ccode\u003e((Comparable)o1).compareTo(o2)\u003c/code\u003e does\n",
          "diff": "@@ -1,3 +1,4 @@\n+@SuppressWarnings(\"unchecked\")\n public int compare(Object o1, Object o2) {\n-    return ((Comparable) o1).compareTo(o2);\n+    return ((Comparable\u003cObject\u003e) o1).compareTo(o2);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yannotationchange",
          "commitMessage": "MATH-261 - start adding some generics to Frequency\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@768084 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "4/23/09, 3:52 PM",
          "commitName": "ee76cb3292d63a7171f5d33b7f1d5a98cc6015bc",
          "commitAuthor": "Sebastian Bazley",
          "commitDateOld": "4/17/09, 6:44 AM",
          "commitNameOld": "62b3877f953dd47c4d301be35c77446e2cf55311",
          "commitAuthorOld": "Sebastian Bazley",
          "daysBetweenCommits": 6.38,
          "commitsBetweenForRepo": 21,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"unchecked\")\npublic int compare(Object o1, Object o2) {\n    return ((Comparable\u003cObject\u003e) o1).compareTo(o2);\n}",
          "path": "src/java/org/apache/commons/math/stat/Frequency.java",
          "functionStartLine": 491,
          "functionName": "compare",
          "functionAnnotation": "// See Javadoc, ClassCast is expected\n@SuppressWarnings(\"unchecked\")",
          "functionDoc": "Compare the two {@link Comparable Comparable} arguments.\nThis method is equivalent to:\n\u003cpre\u003e(({@link Comparable Comparable})o1).{@link Comparable#compareTo compareTo}(o2)\u003c/pre\u003e\n\n@param o1 the first object\n@param o2 the second object\n@return result of comparison\n@throws NullPointerException when \u003ci\u003eo1\u003c/i\u003e is \u003ccode\u003enull\u003c/code\u003e, \n        or when \u003ccode\u003e((Comparable)o1).compareTo(o2)\u003c/code\u003e does\n@throws ClassCastException when \u003ci\u003eo1\u003c/i\u003e is not a {@link Comparable Comparable}, \n        or when \u003ccode\u003e((Comparable)o1).compareTo(o2)\u003c/code\u003e does\n",
          "diff": "@@ -1,3 +1,4 @@\n+@SuppressWarnings(\"unchecked\")\n public int compare(Object o1, Object o2) {\n-    return ((Comparable) o1).compareTo(o2);\n+    return ((Comparable\u003cObject\u003e) o1).compareTo(o2);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "// See Javadoc, ClassCast is expected\n@SuppressWarnings(\"unchecked\")"
          }
        }
      ]
    },
    "2ae4998c4b53c951160f8a0b63fa8f7493d956cb": {
      "type": "Yintroduced",
      "commitMessage": "Changed implementation to use TreeMap directly, eliminating [collections] depenency.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141328 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/20/04, 9:53 AM",
      "commitName": "2ae4998c4b53c951160f8a0b63fa8f7493d956cb",
      "commitAuthor": "Phil Steitz",
      "diff": "@@ -0,0 +1,3 @@\n+public int compare(Object o1, Object o2) {\n+    return ((Comparable) o1).compareTo(o2);\n+}\n\\ No newline at end of file\n",
      "actualSource": "public int compare(Object o1, Object o2) {\n    return ((Comparable) o1).compareTo(o2);\n}",
      "path": "src/java/org/apache/commons/math/stat/Frequency.java",
      "functionStartLine": 415,
      "functionName": "compare",
      "functionAnnotation": "",
      "functionDoc": "Compare the two {@link Comparable Comparable} arguments.\nThis method is equivalent to:\n\u003cpre\u003e(({@link Comparable Comparable})o1).{@link Comparable#compareTo compareTo}(o2)\u003c/pre\u003e\n\n@param o1 the first object\n@param o2 the second object\n@return result of comparison\n@throws NullPointerException when \u003ci\u003eo1\u003c/i\u003e is \u003ccode\u003enull\u003c/code\u003e, \n        or when \u003ccode\u003e((Comparable)o1).compareTo(o2)\u003c/code\u003e does\n@throws ClassCastException when \u003ci\u003eo1\u003c/i\u003e is not a {@link Comparable Comparable}, \n        or when \u003ccode\u003e((Comparable)o1).compareTo(o2)\u003c/code\u003e does\n"
    }
  }
}