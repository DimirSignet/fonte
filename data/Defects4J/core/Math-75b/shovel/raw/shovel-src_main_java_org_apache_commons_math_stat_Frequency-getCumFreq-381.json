{
  "origin": "codeshovel",
  "repositoryName": "Math-75b",
  "repositoryPath": "/tmp/Math-75b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Frequency.java",
  "functionName": "getCumFreq",
  "functionId": "getCumFreq___v-Comparable__?__",
  "sourceFilePath": "src/main/java/org/apache/commons/math/stat/Frequency.java",
  "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
  "functionDoc": "Returns the cumulative frequency of values less than or equal to v.\n\u003cp\u003e\nReturns 0 if v is not comparable to the values set.\u003c/p\u003e\n\n@param v the value to lookup.\n@return the proportion of values equal to v\n",
  "functionStartLine": 381,
  "functionEndLine": 421,
  "numCommitsSeen": 103,
  "timeTaken": 1747,
  "changeHistory": [
    "26dac5a0e7fc9c6be9571b3e71a15d8502480d96",
    "d6a438e931412713e99624cf9ed74470f1040184",
    "18b61a1b18ed7d80ec2bf28588ce95fdd3dddf28",
    "ee76cb3292d63a7171f5d33b7f1d5a98cc6015bc",
    "479f7773075c136b43a9cf120704c77c0a4880ab",
    "849284f1db2aa7c1620897db0ec50b1b38bd9684",
    "57ef80caca376d86e8dbf5d0b7124547e141c86e",
    "2ae4998c4b53c951160f8a0b63fa8f7493d956cb",
    "9b133e9745f67fdb89d93985877f4c15579aaa5d",
    "b1872b6749d527f17cdb58abc66d58f3fcad71d7",
    "83caf3972c8f49953e0e31e12542f57b7728f9f4",
    "d740b517d5ecd91b1bcdce96977b57a80823c3fb"
  ],
  "changeHistoryShort": {
    "26dac5a0e7fc9c6be9571b3e71a15d8502480d96": "Yformatchange",
    "d6a438e931412713e99624cf9ed74470f1040184": "Yfilerename",
    "18b61a1b18ed7d80ec2bf28588ce95fdd3dddf28": "Ymultichange(Yparameterchange,Ybodychange,Yannotationchange)",
    "ee76cb3292d63a7171f5d33b7f1d5a98cc6015bc": "Ybodychange",
    "479f7773075c136b43a9cf120704c77c0a4880ab": "Ydocchange",
    "849284f1db2aa7c1620897db0ec50b1b38bd9684": "Ybodychange",
    "57ef80caca376d86e8dbf5d0b7124547e141c86e": "Ybodychange",
    "2ae4998c4b53c951160f8a0b63fa8f7493d956cb": "Ybodychange",
    "9b133e9745f67fdb89d93985877f4c15579aaa5d": "Ybodychange",
    "b1872b6749d527f17cdb58abc66d58f3fcad71d7": "Ybodychange",
    "83caf3972c8f49953e0e31e12542f57b7728f9f4": "Ydocchange",
    "d740b517d5ecd91b1bcdce96977b57a80823c3fb": "Yintroduced"
  },
  "changeHistoryDetails": {
    "26dac5a0e7fc9c6be9571b3e71a15d8502480d96": {
      "type": "Yformatchange",
      "commitMessage": "Removed trailing spaces.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@811685 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/5/09, 10:36 AM",
      "commitName": "26dac5a0e7fc9c6be9571b3e71a15d8502480d96",
      "commitAuthor": "Phil Steitz",
      "commitDateOld": "8/1/09, 7:30 AM",
      "commitNameOld": "d6a438e931412713e99624cf9ed74470f1040184",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 35.13,
      "commitsBetweenForRepo": 44,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\npublic long getCumFreq(Comparable\u003c?\u003e v) {\n    if (getSumFreq() \u003d\u003d 0) {\n        return 0;\n    }\n    if (v instanceof Integer) {\n        return getCumFreq(((Integer) v).longValue());\n    }\n    Comparator\u003cComparable\u003c?\u003e\u003e c \u003d (Comparator\u003cComparable\u003c?\u003e\u003e) freqTable.comparator();\n    if (c \u003d\u003d null) {\n        c \u003d new NaturalComparator();\n    }\n    long result \u003d 0;\n    try {\n        Long value \u003d freqTable.get(v);\n        if (value !\u003d null) {\n            result \u003d value.longValue();\n        }\n    } catch (ClassCastException ex) {\n        return result;\n    }\n    if (c.compare(v, freqTable.firstKey()) \u003c 0) {\n        return 0;\n    }\n    if (c.compare(v, freqTable.lastKey()) \u003e\u003d 0) {\n        return getSumFreq();\n    }\n    Iterator\u003cComparable\u003c?\u003e\u003e values \u003d valuesIterator();\n    while (values.hasNext()) {\n        Comparable\u003c?\u003e nextValue \u003d values.next();\n        if (c.compare(v, nextValue) \u003e 0) {\n            result +\u003d getCount(nextValue);\n        } else {\n            return result;\n        }\n    }\n    return result;\n}",
      "path": "src/main/java/org/apache/commons/math/stat/Frequency.java",
      "functionStartLine": 380,
      "functionName": "getCumFreq",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Returns the cumulative frequency of values less than or equal to v.\n\u003cp\u003e\nReturns 0 if v is not comparable to the values set.\u003c/p\u003e\n\n@param v the value to lookup.\n@return the proportion of values equal to v\n",
      "diff": "",
      "extendedDetails": {}
    },
    "d6a438e931412713e99624cf9ed74470f1040184": {
      "type": "Yfilerename",
      "commitMessage": "moved main java directory for compliance with maven standard directory layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@799870 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/1/09, 7:30 AM",
      "commitName": "d6a438e931412713e99624cf9ed74470f1040184",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "8/1/09, 7:23 AM",
      "commitNameOld": "2ad5ef61630be627f46ae1c266cf796f044bd4a8",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\npublic long getCumFreq(Comparable\u003c?\u003e v) {\n    if (getSumFreq() \u003d\u003d 0) {\n        return 0;\n    }\n    if (v instanceof Integer) {\n        return getCumFreq(((Integer) v).longValue());\n    }\n    Comparator\u003cComparable\u003c?\u003e\u003e c \u003d (Comparator\u003cComparable\u003c?\u003e\u003e) freqTable.comparator();\n    if (c \u003d\u003d null) {\n        c \u003d new NaturalComparator();\n    }\n    long result \u003d 0;\n    try {\n        Long value \u003d freqTable.get(v);\n        if (value !\u003d null) {\n            result \u003d value.longValue();\n        }\n    } catch (ClassCastException ex) {\n        return result;\n    }\n    if (c.compare(v, freqTable.firstKey()) \u003c 0) {\n        return 0;\n    }\n    if (c.compare(v, freqTable.lastKey()) \u003e\u003d 0) {\n        return getSumFreq();\n    }\n    Iterator\u003cComparable\u003c?\u003e\u003e values \u003d valuesIterator();\n    while (values.hasNext()) {\n        Comparable\u003c?\u003e nextValue \u003d values.next();\n        if (c.compare(v, nextValue) \u003e 0) {\n            result +\u003d getCount(nextValue);\n        } else {\n            return result;\n        }\n    }\n    return result;\n}",
      "path": "src/main/java/org/apache/commons/math/stat/Frequency.java",
      "functionStartLine": 380,
      "functionName": "getCumFreq",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Returns the cumulative frequency of values less than or equal to v.\n\u003cp\u003e\nReturns 0 if v is not comparable to the values set.\u003c/p\u003e\n\n@param v the value to lookup.\n@return the proportion of values equal to v\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/math/stat/Frequency.java",
        "newPath": "src/main/java/org/apache/commons/math/stat/Frequency.java"
      }
    },
    "18b61a1b18ed7d80ec2bf28588ce95fdd3dddf28": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Yannotationchange)",
      "commitMessage": "removed compilation/findbugs warnings about type safety\nthe changes include API changes (replacing Object by Comparable\u003c?\u003e).\nThe class itself is still not generic as this would prevent mixing types which is a desired feature here that is checked in the unit tests\nJIRA: MATH-261\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@791733 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/7/09, 12:44 AM",
      "commitName": "18b61a1b18ed7d80ec2bf28588ce95fdd3dddf28",
      "commitAuthor": "Luc Maisonobe",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "removed compilation/findbugs warnings about type safety\nthe changes include API changes (replacing Object by Comparable\u003c?\u003e).\nThe class itself is still not generic as this would prevent mixing types which is a desired feature here that is checked in the unit tests\nJIRA: MATH-261\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@791733 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/7/09, 12:44 AM",
          "commitName": "18b61a1b18ed7d80ec2bf28588ce95fdd3dddf28",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "6/1/09, 6:24 AM",
          "commitNameOld": "b9f4e914df109dedee24e7b5674d6cfdee170ff9",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 35.76,
          "commitsBetweenForRepo": 103,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"unchecked\")\npublic long getCumFreq(Comparable\u003c?\u003e v) {\n    if (getSumFreq() \u003d\u003d 0) {\n        return 0;\n    }\n    if (v instanceof Integer) {\n        return getCumFreq(((Integer) v).longValue());\n    }\n    Comparator\u003cComparable\u003c?\u003e\u003e c \u003d (Comparator\u003cComparable\u003c?\u003e\u003e) freqTable.comparator();\n    if (c \u003d\u003d null) {\n        c \u003d new NaturalComparator();\n    }\n    long result \u003d 0;\n    try {\n        Long value \u003d freqTable.get(v);\n        if (value !\u003d null) {\n            result \u003d value.longValue();\n        }\n    } catch (ClassCastException ex) {\n        return result;\n    }\n    if (c.compare(v, freqTable.firstKey()) \u003c 0) {\n        return 0;\n    }\n    if (c.compare(v, freqTable.lastKey()) \u003e\u003d 0) {\n        return getSumFreq();\n    }\n    Iterator\u003cComparable\u003c?\u003e\u003e values \u003d valuesIterator();\n    while (values.hasNext()) {\n        Comparable\u003c?\u003e nextValue \u003d values.next();\n        if (c.compare(v, nextValue) \u003e 0) {\n            result +\u003d getCount(nextValue);\n        } else {\n            return result;\n        }\n    }\n    return result;\n}",
          "path": "src/java/org/apache/commons/math/stat/Frequency.java",
          "functionStartLine": 380,
          "functionName": "getCumFreq",
          "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
          "functionDoc": "Returns the cumulative frequency of values less than or equal to v.\n\u003cp\u003e\nReturns 0 if v is not comparable to the values set.\u003c/p\u003e\n\n@param v the value to lookup.\n@return the proportion of values equal to v\n",
          "diff": "@@ -1,37 +1,38 @@\n-public long getCumFreq(Object v) {\n+@SuppressWarnings(\"unchecked\")\n+public long getCumFreq(Comparable\u003c?\u003e v) {\n     if (getSumFreq() \u003d\u003d 0) {\n         return 0;\n     }\n     if (v instanceof Integer) {\n         return getCumFreq(((Integer) v).longValue());\n     }\n-    Comparator c \u003d freqTable.comparator();\n+    Comparator\u003cComparable\u003c?\u003e\u003e c \u003d (Comparator\u003cComparable\u003c?\u003e\u003e) freqTable.comparator();\n     if (c \u003d\u003d null) {\n         c \u003d new NaturalComparator();\n     }\n     long result \u003d 0;\n     try {\n         Long value \u003d freqTable.get(v);\n         if (value !\u003d null) {\n             result \u003d value.longValue();\n         }\n     } catch (ClassCastException ex) {\n         return result;\n     }\n     if (c.compare(v, freqTable.firstKey()) \u003c 0) {\n         return 0;\n     }\n     if (c.compare(v, freqTable.lastKey()) \u003e\u003d 0) {\n         return getSumFreq();\n     }\n-    Iterator\u003c?\u003e values \u003d valuesIterator();\n+    Iterator\u003cComparable\u003c?\u003e\u003e values \u003d valuesIterator();\n     while (values.hasNext()) {\n-        Object nextValue \u003d values.next();\n+        Comparable\u003c?\u003e nextValue \u003d values.next();\n         if (c.compare(v, nextValue) \u003e 0) {\n             result +\u003d getCount(nextValue);\n         } else {\n             return result;\n         }\n     }\n     return result;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[v-Object]",
            "newValue": "[v-Comparable\u003c?\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "removed compilation/findbugs warnings about type safety\nthe changes include API changes (replacing Object by Comparable\u003c?\u003e).\nThe class itself is still not generic as this would prevent mixing types which is a desired feature here that is checked in the unit tests\nJIRA: MATH-261\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@791733 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/7/09, 12:44 AM",
          "commitName": "18b61a1b18ed7d80ec2bf28588ce95fdd3dddf28",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "6/1/09, 6:24 AM",
          "commitNameOld": "b9f4e914df109dedee24e7b5674d6cfdee170ff9",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 35.76,
          "commitsBetweenForRepo": 103,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"unchecked\")\npublic long getCumFreq(Comparable\u003c?\u003e v) {\n    if (getSumFreq() \u003d\u003d 0) {\n        return 0;\n    }\n    if (v instanceof Integer) {\n        return getCumFreq(((Integer) v).longValue());\n    }\n    Comparator\u003cComparable\u003c?\u003e\u003e c \u003d (Comparator\u003cComparable\u003c?\u003e\u003e) freqTable.comparator();\n    if (c \u003d\u003d null) {\n        c \u003d new NaturalComparator();\n    }\n    long result \u003d 0;\n    try {\n        Long value \u003d freqTable.get(v);\n        if (value !\u003d null) {\n            result \u003d value.longValue();\n        }\n    } catch (ClassCastException ex) {\n        return result;\n    }\n    if (c.compare(v, freqTable.firstKey()) \u003c 0) {\n        return 0;\n    }\n    if (c.compare(v, freqTable.lastKey()) \u003e\u003d 0) {\n        return getSumFreq();\n    }\n    Iterator\u003cComparable\u003c?\u003e\u003e values \u003d valuesIterator();\n    while (values.hasNext()) {\n        Comparable\u003c?\u003e nextValue \u003d values.next();\n        if (c.compare(v, nextValue) \u003e 0) {\n            result +\u003d getCount(nextValue);\n        } else {\n            return result;\n        }\n    }\n    return result;\n}",
          "path": "src/java/org/apache/commons/math/stat/Frequency.java",
          "functionStartLine": 380,
          "functionName": "getCumFreq",
          "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
          "functionDoc": "Returns the cumulative frequency of values less than or equal to v.\n\u003cp\u003e\nReturns 0 if v is not comparable to the values set.\u003c/p\u003e\n\n@param v the value to lookup.\n@return the proportion of values equal to v\n",
          "diff": "@@ -1,37 +1,38 @@\n-public long getCumFreq(Object v) {\n+@SuppressWarnings(\"unchecked\")\n+public long getCumFreq(Comparable\u003c?\u003e v) {\n     if (getSumFreq() \u003d\u003d 0) {\n         return 0;\n     }\n     if (v instanceof Integer) {\n         return getCumFreq(((Integer) v).longValue());\n     }\n-    Comparator c \u003d freqTable.comparator();\n+    Comparator\u003cComparable\u003c?\u003e\u003e c \u003d (Comparator\u003cComparable\u003c?\u003e\u003e) freqTable.comparator();\n     if (c \u003d\u003d null) {\n         c \u003d new NaturalComparator();\n     }\n     long result \u003d 0;\n     try {\n         Long value \u003d freqTable.get(v);\n         if (value !\u003d null) {\n             result \u003d value.longValue();\n         }\n     } catch (ClassCastException ex) {\n         return result;\n     }\n     if (c.compare(v, freqTable.firstKey()) \u003c 0) {\n         return 0;\n     }\n     if (c.compare(v, freqTable.lastKey()) \u003e\u003d 0) {\n         return getSumFreq();\n     }\n-    Iterator\u003c?\u003e values \u003d valuesIterator();\n+    Iterator\u003cComparable\u003c?\u003e\u003e values \u003d valuesIterator();\n     while (values.hasNext()) {\n-        Object nextValue \u003d values.next();\n+        Comparable\u003c?\u003e nextValue \u003d values.next();\n         if (c.compare(v, nextValue) \u003e 0) {\n             result +\u003d getCount(nextValue);\n         } else {\n             return result;\n         }\n     }\n     return result;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yannotationchange",
          "commitMessage": "removed compilation/findbugs warnings about type safety\nthe changes include API changes (replacing Object by Comparable\u003c?\u003e).\nThe class itself is still not generic as this would prevent mixing types which is a desired feature here that is checked in the unit tests\nJIRA: MATH-261\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@791733 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/7/09, 12:44 AM",
          "commitName": "18b61a1b18ed7d80ec2bf28588ce95fdd3dddf28",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "6/1/09, 6:24 AM",
          "commitNameOld": "b9f4e914df109dedee24e7b5674d6cfdee170ff9",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 35.76,
          "commitsBetweenForRepo": 103,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"unchecked\")\npublic long getCumFreq(Comparable\u003c?\u003e v) {\n    if (getSumFreq() \u003d\u003d 0) {\n        return 0;\n    }\n    if (v instanceof Integer) {\n        return getCumFreq(((Integer) v).longValue());\n    }\n    Comparator\u003cComparable\u003c?\u003e\u003e c \u003d (Comparator\u003cComparable\u003c?\u003e\u003e) freqTable.comparator();\n    if (c \u003d\u003d null) {\n        c \u003d new NaturalComparator();\n    }\n    long result \u003d 0;\n    try {\n        Long value \u003d freqTable.get(v);\n        if (value !\u003d null) {\n            result \u003d value.longValue();\n        }\n    } catch (ClassCastException ex) {\n        return result;\n    }\n    if (c.compare(v, freqTable.firstKey()) \u003c 0) {\n        return 0;\n    }\n    if (c.compare(v, freqTable.lastKey()) \u003e\u003d 0) {\n        return getSumFreq();\n    }\n    Iterator\u003cComparable\u003c?\u003e\u003e values \u003d valuesIterator();\n    while (values.hasNext()) {\n        Comparable\u003c?\u003e nextValue \u003d values.next();\n        if (c.compare(v, nextValue) \u003e 0) {\n            result +\u003d getCount(nextValue);\n        } else {\n            return result;\n        }\n    }\n    return result;\n}",
          "path": "src/java/org/apache/commons/math/stat/Frequency.java",
          "functionStartLine": 380,
          "functionName": "getCumFreq",
          "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
          "functionDoc": "Returns the cumulative frequency of values less than or equal to v.\n\u003cp\u003e\nReturns 0 if v is not comparable to the values set.\u003c/p\u003e\n\n@param v the value to lookup.\n@return the proportion of values equal to v\n",
          "diff": "@@ -1,37 +1,38 @@\n-public long getCumFreq(Object v) {\n+@SuppressWarnings(\"unchecked\")\n+public long getCumFreq(Comparable\u003c?\u003e v) {\n     if (getSumFreq() \u003d\u003d 0) {\n         return 0;\n     }\n     if (v instanceof Integer) {\n         return getCumFreq(((Integer) v).longValue());\n     }\n-    Comparator c \u003d freqTable.comparator();\n+    Comparator\u003cComparable\u003c?\u003e\u003e c \u003d (Comparator\u003cComparable\u003c?\u003e\u003e) freqTable.comparator();\n     if (c \u003d\u003d null) {\n         c \u003d new NaturalComparator();\n     }\n     long result \u003d 0;\n     try {\n         Long value \u003d freqTable.get(v);\n         if (value !\u003d null) {\n             result \u003d value.longValue();\n         }\n     } catch (ClassCastException ex) {\n         return result;\n     }\n     if (c.compare(v, freqTable.firstKey()) \u003c 0) {\n         return 0;\n     }\n     if (c.compare(v, freqTable.lastKey()) \u003e\u003d 0) {\n         return getSumFreq();\n     }\n-    Iterator\u003c?\u003e values \u003d valuesIterator();\n+    Iterator\u003cComparable\u003c?\u003e\u003e values \u003d valuesIterator();\n     while (values.hasNext()) {\n-        Object nextValue \u003d values.next();\n+        Comparable\u003c?\u003e nextValue \u003d values.next();\n         if (c.compare(v, nextValue) \u003e 0) {\n             result +\u003d getCount(nextValue);\n         } else {\n             return result;\n         }\n     }\n     return result;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "@SuppressWarnings(\"unchecked\")"
          }
        }
      ]
    },
    "ee76cb3292d63a7171f5d33b7f1d5a98cc6015bc": {
      "type": "Ybodychange",
      "commitMessage": "MATH-261 - start adding some generics to Frequency\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@768084 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/23/09, 3:52 PM",
      "commitName": "ee76cb3292d63a7171f5d33b7f1d5a98cc6015bc",
      "commitAuthor": "Sebastian Bazley",
      "commitDateOld": "4/17/09, 6:44 AM",
      "commitNameOld": "62b3877f953dd47c4d301be35c77446e2cf55311",
      "commitAuthorOld": "Sebastian Bazley",
      "daysBetweenCommits": 6.38,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "actualSource": "public long getCumFreq(Object v) {\n    if (getSumFreq() \u003d\u003d 0) {\n        return 0;\n    }\n    if (v instanceof Integer) {\n        return getCumFreq(((Integer) v).longValue());\n    }\n    Comparator c \u003d freqTable.comparator();\n    if (c \u003d\u003d null) {\n        c \u003d new NaturalComparator();\n    }\n    long result \u003d 0;\n    try {\n        Long value \u003d freqTable.get(v);\n        if (value !\u003d null) {\n            result \u003d value.longValue();\n        }\n    } catch (ClassCastException ex) {\n        return result;\n    }\n    if (c.compare(v, freqTable.firstKey()) \u003c 0) {\n        return 0;\n    }\n    if (c.compare(v, freqTable.lastKey()) \u003e\u003d 0) {\n        return getSumFreq();\n    }\n    Iterator\u003c?\u003e values \u003d valuesIterator();\n    while (values.hasNext()) {\n        Object nextValue \u003d values.next();\n        if (c.compare(v, nextValue) \u003e 0) {\n            result +\u003d getCount(nextValue);\n        } else {\n            return result;\n        }\n    }\n    return result;\n}",
      "path": "src/java/org/apache/commons/math/stat/Frequency.java",
      "functionStartLine": 330,
      "functionName": "getCumFreq",
      "functionAnnotation": "",
      "functionDoc": "Returns the cumulative frequency of values less than or equal to v.\n\u003cp\u003e\nReturns 0 if v is not comparable to the values set.\u003c/p\u003e\n\n@param v the value to lookup.\n@return the proportion of values equal to v\n",
      "diff": "@@ -1,37 +1,37 @@\n public long getCumFreq(Object v) {\n     if (getSumFreq() \u003d\u003d 0) {\n         return 0;\n     }\n     if (v instanceof Integer) {\n         return getCumFreq(((Integer) v).longValue());\n     }\n     Comparator c \u003d freqTable.comparator();\n     if (c \u003d\u003d null) {\n         c \u003d new NaturalComparator();\n     }\n     long result \u003d 0;\n     try {\n-        Long value \u003d (Long) freqTable.get(v);\n+        Long value \u003d freqTable.get(v);\n         if (value !\u003d null) {\n             result \u003d value.longValue();\n         }\n     } catch (ClassCastException ex) {\n         return result;\n     }\n     if (c.compare(v, freqTable.firstKey()) \u003c 0) {\n         return 0;\n     }\n     if (c.compare(v, freqTable.lastKey()) \u003e\u003d 0) {\n         return getSumFreq();\n     }\n-    Iterator values \u003d valuesIterator();\n+    Iterator\u003c?\u003e values \u003d valuesIterator();\n     while (values.hasNext()) {\n         Object nextValue \u003d values.next();\n         if (c.compare(v, nextValue) \u003e 0) {\n             result +\u003d getCount(nextValue);\n         } else {\n             return result;\n         }\n     }\n     return result;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "479f7773075c136b43a9cf120704c77c0a4880ab": {
      "type": "Ydocchange",
      "commitMessage": "Javadoc only.  Added missing \u003c/p\u003e\u0027s\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@617953 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/2/08, 9:54 PM",
      "commitName": "479f7773075c136b43a9cf120704c77c0a4880ab",
      "commitAuthor": "Phil Steitz",
      "commitDateOld": "2/2/08, 10:07 AM",
      "commitNameOld": "fa601ee57b549eabdd099489b7cb09d2af08b5dc",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 0.49,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public long getCumFreq(Object v) {\n    if (getSumFreq() \u003d\u003d 0) {\n        return 0;\n    }\n    if (v instanceof Integer) {\n        return getCumFreq(((Integer) v).longValue());\n    }\n    Comparator c \u003d freqTable.comparator();\n    if (c \u003d\u003d null) {\n        c \u003d new NaturalComparator();\n    }\n    long result \u003d 0;\n    try {\n        Long value \u003d (Long) freqTable.get(v);\n        if (value !\u003d null) {\n            result \u003d value.longValue();\n        }\n    } catch (ClassCastException ex) {\n        return result;\n    }\n    if (c.compare(v, freqTable.firstKey()) \u003c 0) {\n        return 0;\n    }\n    if (c.compare(v, freqTable.lastKey()) \u003e\u003d 0) {\n        return getSumFreq();\n    }\n    Iterator values \u003d valuesIterator();\n    while (values.hasNext()) {\n        Object nextValue \u003d values.next();\n        if (c.compare(v, nextValue) \u003e 0) {\n            result +\u003d getCount(nextValue);\n        } else {\n            return result;\n        }\n    }\n    return result;\n}",
      "path": "src/java/org/apache/commons/math/stat/Frequency.java",
      "functionStartLine": 297,
      "functionName": "getCumFreq",
      "functionAnnotation": "",
      "functionDoc": "Returns the cumulative frequency of values less than or equal to v.\n\u003cp\u003e\nReturns 0 if v is not comparable to the values set.\u003c/p\u003e\n\n@param v the value to lookup.\n@return the proportion of values equal to v\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Returns the cumulative frequency of values less than or equal to v.\n\u003cp\u003e\nReturns 0 if v is not comparable to the values set.\n\n@param v the value to lookup.\n@return the proportion of values equal to v\n",
        "newValue": "Returns the cumulative frequency of values less than or equal to v.\n\u003cp\u003e\nReturns 0 if v is not comparable to the values set.\u003c/p\u003e\n\n@param v the value to lookup.\n@return the proportion of values equal to v\n"
      }
    },
    "849284f1db2aa7c1620897db0ec50b1b38bd9684": {
      "type": "Ybodychange",
      "commitMessage": "Fixed error computing cumulative frequencies when actual parameter is an Integer.  Reported to commons-dev list by Jon Langlois.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141445 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/19/04, 3:47 PM",
      "commitName": "849284f1db2aa7c1620897db0ec50b1b38bd9684",
      "commitAuthor": "Phil Steitz",
      "commitDateOld": "8/21/04, 6:42 PM",
      "commitNameOld": "e3aff05625c90f3d74c740183e9bf7a499b1ff3d",
      "commitAuthorOld": "Phil Steitz",
      "daysBetweenCommits": 28.88,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "actualSource": "public long getCumFreq(Object v) {\n    if (getSumFreq() \u003d\u003d 0) {\n        return 0;\n    }\n    if (v instanceof Integer) {\n        return getCumFreq(((Integer) v).longValue());\n    }\n    Comparator c \u003d freqTable.comparator();\n    if (c \u003d\u003d null) {\n        c \u003d new NaturalComparator();\n    }\n    long result \u003d 0;\n    try {\n        Long value \u003d (Long) freqTable.get(v);\n        if (value !\u003d null) {\n            result \u003d value.longValue();\n        }\n    } catch (ClassCastException ex) {\n        return result;\n    }\n    if (c.compare(v, freqTable.firstKey()) \u003c 0) {\n        return 0;\n    }\n    if (c.compare(v, freqTable.lastKey()) \u003e\u003d 0) {\n        return getSumFreq();\n    }\n    Iterator values \u003d valuesIterator();\n    while (values.hasNext()) {\n        Object nextValue \u003d values.next();\n        if (c.compare(v, nextValue) \u003e 0) {\n            result +\u003d getCount(nextValue);\n        } else {\n            return result;\n        }\n    }\n    return result;\n}",
      "path": "src/java/org/apache/commons/math/stat/Frequency.java",
      "functionStartLine": 292,
      "functionName": "getCumFreq",
      "functionAnnotation": "",
      "functionDoc": "Returns the cumulative frequency of values less than or equal to v.\n\u003cp\u003e\nReturns 0 if v is not comparable to the values set.\n\n@param v the value to lookup.\n@return the proportion of values equal to v\n",
      "diff": "@@ -1,34 +1,37 @@\n public long getCumFreq(Object v) {\n     if (getSumFreq() \u003d\u003d 0) {\n         return 0;\n     }\n+    if (v instanceof Integer) {\n+        return getCumFreq(((Integer) v).longValue());\n+    }\n     Comparator c \u003d freqTable.comparator();\n     if (c \u003d\u003d null) {\n         c \u003d new NaturalComparator();\n     }\n     long result \u003d 0;\n     try {\n         Long value \u003d (Long) freqTable.get(v);\n         if (value !\u003d null) {\n             result \u003d value.longValue();\n         }\n     } catch (ClassCastException ex) {\n         return result;\n     }\n     if (c.compare(v, freqTable.firstKey()) \u003c 0) {\n         return 0;\n     }\n     if (c.compare(v, freqTable.lastKey()) \u003e\u003d 0) {\n         return getSumFreq();\n     }\n     Iterator values \u003d valuesIterator();\n     while (values.hasNext()) {\n         Object nextValue \u003d values.next();\n         if (c.compare(v, nextValue) \u003e 0) {\n             result +\u003d getCount(nextValue);\n         } else {\n             return result;\n         }\n     }\n     return result;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "57ef80caca376d86e8dbf5d0b7124547e141c86e": {
      "type": "Ybodychange",
      "commitMessage": "Fixed two errors reported on commons-user / commons-dev:\n1. addValue(object) and getXxx methods failing or returning incorrect results for Integer arguments when the freq table is not empty\n2. getXxx methods failing / returning inconsistent values when invoked on an empty table.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141420 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/12/04, 8:33 AM",
      "commitName": "57ef80caca376d86e8dbf5d0b7124547e141c86e",
      "commitAuthor": "Phil Steitz",
      "commitDateOld": "7/1/04, 10:27 PM",
      "commitNameOld": "c6758d6bd899c6b087fa7a8a36b1ceecac55ec31",
      "commitAuthorOld": "Phil Steitz",
      "daysBetweenCommits": 41.42,
      "commitsBetweenForRepo": 66,
      "commitsBetweenForFile": 1,
      "actualSource": "public long getCumFreq(Object v) {\n    if (getSumFreq() \u003d\u003d 0) {\n        return 0;\n    }\n    Comparator c \u003d freqTable.comparator();\n    if (c \u003d\u003d null) {\n        c \u003d new NaturalComparator();\n    }\n    long result \u003d 0;\n    try {\n        Long value \u003d (Long) freqTable.get(v);\n        if (value !\u003d null) {\n            result \u003d value.longValue();\n        }\n    } catch (ClassCastException ex) {\n        return result;\n    }\n    if (c.compare(v, freqTable.firstKey()) \u003c 0) {\n        return 0;\n    }\n    if (c.compare(v, freqTable.lastKey()) \u003e\u003d 0) {\n        return getSumFreq();\n    }\n    Iterator values \u003d valuesIterator();\n    while (values.hasNext()) {\n        Object nextValue \u003d values.next();\n        if (c.compare(v, nextValue) \u003e 0) {\n            result +\u003d getCount(nextValue);\n        } else {\n            return result;\n        }\n    }\n    return result;\n}",
      "path": "src/java/org/apache/commons/math/stat/Frequency.java",
      "functionStartLine": 288,
      "functionName": "getCumFreq",
      "functionAnnotation": "",
      "functionDoc": "Returns the cumulative frequency of values less than or equal to v.\n\u003cp\u003e\nReturns 0 if v is not comparable to the values set.\n\n@param v the value to lookup.\n@return the proportion of values equal to v\n",
      "diff": "@@ -1,31 +1,34 @@\n public long getCumFreq(Object v) {\n+    if (getSumFreq() \u003d\u003d 0) {\n+        return 0;\n+    }\n     Comparator c \u003d freqTable.comparator();\n     if (c \u003d\u003d null) {\n         c \u003d new NaturalComparator();\n     }\n     long result \u003d 0;\n     try {\n         Long value \u003d (Long) freqTable.get(v);\n         if (value !\u003d null) {\n             result \u003d value.longValue();\n         }\n     } catch (ClassCastException ex) {\n         return result;\n     }\n     if (c.compare(v, freqTable.firstKey()) \u003c 0) {\n         return 0;\n     }\n     if (c.compare(v, freqTable.lastKey()) \u003e\u003d 0) {\n         return getSumFreq();\n     }\n     Iterator values \u003d valuesIterator();\n     while (values.hasNext()) {\n         Object nextValue \u003d values.next();\n         if (c.compare(v, nextValue) \u003e 0) {\n             result +\u003d getCount(nextValue);\n         } else {\n             return result;\n         }\n     }\n     return result;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2ae4998c4b53c951160f8a0b63fa8f7493d956cb": {
      "type": "Ybodychange",
      "commitMessage": "Changed implementation to use TreeMap directly, eliminating [collections] depenency.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141328 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/20/04, 9:53 AM",
      "commitName": "2ae4998c4b53c951160f8a0b63fa8f7493d956cb",
      "commitAuthor": "Phil Steitz",
      "commitDateOld": "6/1/04, 5:24 PM",
      "commitNameOld": "94d130188d16bd3a1ca2560bd372bdcf48999172",
      "commitAuthorOld": "Mark R. Diggory",
      "daysBetweenCommits": 18.69,
      "commitsBetweenForRepo": 58,
      "commitsBetweenForFile": 1,
      "actualSource": "public long getCumFreq(Object v) {\n    Comparator c \u003d freqTable.comparator();\n    if (c \u003d\u003d null) {\n        c \u003d new NaturalComparator();\n    }\n    long result \u003d 0;\n    try {\n        Long value \u003d (Long) freqTable.get(v);\n        if (value !\u003d null) {\n            result \u003d value.longValue();\n        }\n    } catch (ClassCastException ex) {\n        return result;\n    }\n    if (c.compare(v, freqTable.firstKey()) \u003c 0) {\n        return 0;\n    }\n    if (c.compare(v, freqTable.lastKey()) \u003e\u003d 0) {\n        return getSumFreq();\n    }\n    Iterator values \u003d valuesIterator();\n    while (values.hasNext()) {\n        Object nextValue \u003d values.next();\n        if (c.compare(v, nextValue) \u003e 0) {\n            result +\u003d getCount(nextValue);\n        } else {\n            return result;\n        }\n    }\n    return result;\n}",
      "path": "src/java/org/apache/commons/math/stat/Frequency.java",
      "functionStartLine": 271,
      "functionName": "getCumFreq",
      "functionAnnotation": "",
      "functionDoc": "Returns the cumulative frequency of values less than or equal to v.\n\u003cp\u003e\nReturns 0 if v is not comparable to the values set.\n\n@param v the value to lookup.\n@return the proportion of values equal to v\n",
      "diff": "@@ -1,28 +1,31 @@\n public long getCumFreq(Object v) {\n     Comparator c \u003d freqTable.comparator();\n     if (c \u003d\u003d null) {\n-        c \u003d ComparatorUtils.NATURAL_COMPARATOR;\n+        c \u003d new NaturalComparator();\n     }\n     long result \u003d 0;\n     try {\n-        result \u003d freqTable.getCount(v);\n+        Long value \u003d (Long) freqTable.get(v);\n+        if (value !\u003d null) {\n+            result \u003d value.longValue();\n+        }\n     } catch (ClassCastException ex) {\n         return result;\n     }\n-    if (c.compare(v, freqTable.first()) \u003c 0) {\n+    if (c.compare(v, freqTable.firstKey()) \u003c 0) {\n         return 0;\n     }\n-    if (c.compare(v, freqTable.last()) \u003e\u003d 0) {\n+    if (c.compare(v, freqTable.lastKey()) \u003e\u003d 0) {\n         return getSumFreq();\n     }\n     Iterator values \u003d valuesIterator();\n     while (values.hasNext()) {\n         Object nextValue \u003d values.next();\n         if (c.compare(v, nextValue) \u003e 0) {\n             result +\u003d getCount(nextValue);\n         } else {\n             return result;\n         }\n     }\n     return result;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9b133e9745f67fdb89d93985877f4c15579aaa5d": {
      "type": "Ybodychange",
      "commitMessage": "Dropped extraneous line added in error with last commit.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141121 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/6/04, 6:21 PM",
      "commitName": "9b133e9745f67fdb89d93985877f4c15579aaa5d",
      "commitAuthor": "Phil Steitz",
      "commitDateOld": "3/6/04, 4:54 PM",
      "commitNameOld": "b1872b6749d527f17cdb58abc66d58f3fcad71d7",
      "commitAuthorOld": "Phil Steitz",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "public long getCumFreq(Object v) {\n    Comparator c \u003d freqTable.comparator();\n    if (c \u003d\u003d null) {\n        c \u003d ComparatorUtils.NATURAL_COMPARATOR;\n    }\n    long result \u003d 0;\n    try {\n        result \u003d freqTable.getCount(v);\n    } catch (ClassCastException ex) {\n        return result;\n    }\n    if (c.compare(v, freqTable.first()) \u003c 0) {\n        return 0;\n    }\n    if (c.compare(v, freqTable.last()) \u003e\u003d 0) {\n        return getSumFreq();\n    }\n    Iterator values \u003d valuesIterator();\n    while (values.hasNext()) {\n        Object nextValue \u003d values.next();\n        if (c.compare(v, nextValue) \u003e 0) {\n            result +\u003d getCount(nextValue);\n        } else {\n            return result;\n        }\n    }\n    return result;\n}",
      "path": "src/java/org/apache/commons/math/stat/Frequency.java",
      "functionStartLine": 253,
      "functionName": "getCumFreq",
      "functionAnnotation": "",
      "functionDoc": "Returns the cumulative frequency of values less than or equal to v.\n\u003cp\u003e\nReturns 0 if v is not comparable to the values set.\n\n@param v the value to lookup.\n@return the proportion of values equal to v\n",
      "diff": "@@ -1,29 +1,28 @@\n public long getCumFreq(Object v) {\n     Comparator c \u003d freqTable.comparator();\n     if (c \u003d\u003d null) {\n         c \u003d ComparatorUtils.NATURAL_COMPARATOR;\n     }\n     long result \u003d 0;\n     try {\n         result \u003d freqTable.getCount(v);\n     } catch (ClassCastException ex) {\n         return result;\n     }\n     if (c.compare(v, freqTable.first()) \u003c 0) {\n-        return System.out.println(\"iterating...\");\n-        0;\n+        return 0;\n     }\n     if (c.compare(v, freqTable.last()) \u003e\u003d 0) {\n         return getSumFreq();\n     }\n     Iterator values \u003d valuesIterator();\n     while (values.hasNext()) {\n         Object nextValue \u003d values.next();\n         if (c.compare(v, nextValue) \u003e 0) {\n             result +\u003d getCount(nextValue);\n         } else {\n             return result;\n         }\n     }\n     return result;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b1872b6749d527f17cdb58abc66d58f3fcad71d7": {
      "type": "Ybodychange",
      "commitMessage": "Fixed error in getCumFreq (use custom comparator when one is supplied). Removed tabs.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141118 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/6/04, 4:54 PM",
      "commitName": "b1872b6749d527f17cdb58abc66d58f3fcad71d7",
      "commitAuthor": "Phil Steitz",
      "commitDateOld": "2/22/04, 2:01 PM",
      "commitNameOld": "5cb403cbbcb292481c680728298cb87c46663914",
      "commitAuthorOld": "Phil Steitz",
      "daysBetweenCommits": 13.12,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "actualSource": "public long getCumFreq(Object v) {\n    Comparator c \u003d freqTable.comparator();\n    if (c \u003d\u003d null) {\n        c \u003d ComparatorUtils.NATURAL_COMPARATOR;\n    }\n    long result \u003d 0;\n    try {\n        result \u003d freqTable.getCount(v);\n    } catch (ClassCastException ex) {\n        return result;\n    }\n    if (c.compare(v, freqTable.first()) \u003c 0) {\n        return System.out.println(\"iterating...\");\n        0;\n    }\n    if (c.compare(v, freqTable.last()) \u003e\u003d 0) {\n        return getSumFreq();\n    }\n    Iterator values \u003d valuesIterator();\n    while (values.hasNext()) {\n        Object nextValue \u003d values.next();\n        if (c.compare(v, nextValue) \u003e 0) {\n            result +\u003d getCount(nextValue);\n        } else {\n            return result;\n        }\n    }\n    return result;\n}",
      "path": "src/java/org/apache/commons/math/stat/Frequency.java",
      "functionStartLine": 253,
      "functionName": "getCumFreq",
      "functionAnnotation": "",
      "functionDoc": "Returns the cumulative frequency of values less than or equal to v.\n\u003cp\u003e\nReturns 0 if v is not comparable to the values set.\n\n@param v the value to lookup.\n@return the proportion of values equal to v\n",
      "diff": "@@ -1,25 +1,29 @@\n public long getCumFreq(Object v) {\n+    Comparator c \u003d freqTable.comparator();\n+    if (c \u003d\u003d null) {\n+        c \u003d ComparatorUtils.NATURAL_COMPARATOR;\n+    }\n     long result \u003d 0;\n     try {\n         result \u003d freqTable.getCount(v);\n     } catch (ClassCastException ex) {\n         return result;\n     }\n-    Comparable c \u003d (Comparable) v;\n-    if (c.compareTo(freqTable.first()) \u003c 0) {\n-        return 0;\n+    if (c.compare(v, freqTable.first()) \u003c 0) {\n+        return System.out.println(\"iterating...\");\n+        0;\n     }\n-    if (c.compareTo(freqTable.last()) \u003e 0) {\n+    if (c.compare(v, freqTable.last()) \u003e\u003d 0) {\n         return getSumFreq();\n     }\n     Iterator values \u003d valuesIterator();\n     while (values.hasNext()) {\n         Object nextValue \u003d values.next();\n-        if (c.compareTo(nextValue) \u003e 0) {\n+        if (c.compare(v, nextValue) \u003e 0) {\n             result +\u003d getCount(nextValue);\n         } else {\n             return result;\n         }\n     }\n     return result;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "83caf3972c8f49953e0e31e12542f57b7728f9f4": {
      "type": "Ydocchange",
      "commitMessage": "fixed spelling error: cummulative -\u003e cumulative.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141100 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/17/04, 8:04 PM",
      "commitName": "83caf3972c8f49953e0e31e12542f57b7728f9f4",
      "commitAuthor": "Brent Worden",
      "commitDateOld": "2/15/04, 10:32 PM",
      "commitNameOld": "526956b3d938c45d24df7000bb0184837cf332e2",
      "commitAuthorOld": "Phil Steitz",
      "daysBetweenCommits": 1.9,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "public long getCumFreq(Object v) {\n    long result \u003d 0;\n    try {\n        result \u003d freqTable.getCount(v);\n    } catch (ClassCastException ex) {\n        return result;\n    }\n    Comparable c \u003d (Comparable) v;\n    if (c.compareTo(freqTable.first()) \u003c 0) {\n        return 0;\n    }\n    if (c.compareTo(freqTable.last()) \u003e 0) {\n        return getSumFreq();\n    }\n    Iterator values \u003d valuesIterator();\n    while (values.hasNext()) {\n        Object nextValue \u003d values.next();\n        if (c.compareTo(nextValue) \u003e 0) {\n            result +\u003d getCount(nextValue);\n        } else {\n            return result;\n        }\n    }\n    return result;\n}",
      "path": "src/java/org/apache/commons/math/stat/Frequency.java",
      "functionStartLine": 286,
      "functionName": "getCumFreq",
      "functionAnnotation": "",
      "functionDoc": "Returns the cumulative frequency of values less than or equal to v.\n\u003cp\u003e\nReturns 0 if v is not comparable to the values set.\n\n@param v the value to lookup.\n@return the proportion of values equal to v\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Returns the cummulative frequency of values less than or equal to v.\n\u003cp\u003e\nReturns 0 if v is not comparable to the values set.\n\n@param v the value to lookup.\n@return the proportion of values equal to v\n",
        "newValue": "Returns the cumulative frequency of values less than or equal to v.\n\u003cp\u003e\nReturns 0 if v is not comparable to the values set.\n\n@param v the value to lookup.\n@return the proportion of values equal to v\n"
      }
    },
    "d740b517d5ecd91b1bcdce96977b57a80823c3fb": {
      "type": "Yintroduced",
      "commitMessage": "Refactored Frequency to support cummulative frequency counts and percentages. Also eliminated the name property.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141089 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/8/04, 11:51 AM",
      "commitName": "d740b517d5ecd91b1bcdce96977b57a80823c3fb",
      "commitAuthor": "Phil Steitz",
      "diff": "@@ -0,0 +1,25 @@\n+public long getCumFreq(Object v) {\n+    long result \u003d 0;\n+    try {\n+        result \u003d freqTable.getCount(v);\n+    } catch (ClassCastException ex) {\n+        return result;\n+    }\n+    Comparable c \u003d (Comparable) v;\n+    if (c.compareTo(freqTable.first()) \u003c 0) {\n+        return 0;\n+    }\n+    if (c.compareTo(freqTable.last()) \u003e 0) {\n+        return getSumFreq();\n+    }\n+    Iterator values \u003d valuesIterator();\n+    while (values.hasNext()) {\n+        Object nextValue \u003d values.next();\n+        if (c.compareTo(nextValue) \u003e 0) {\n+            result +\u003d getCount(nextValue);\n+        } else {\n+            return result;\n+        }\n+    }\n+    return result;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public long getCumFreq(Object v) {\n    long result \u003d 0;\n    try {\n        result \u003d freqTable.getCount(v);\n    } catch (ClassCastException ex) {\n        return result;\n    }\n    Comparable c \u003d (Comparable) v;\n    if (c.compareTo(freqTable.first()) \u003c 0) {\n        return 0;\n    }\n    if (c.compareTo(freqTable.last()) \u003e 0) {\n        return getSumFreq();\n    }\n    Iterator values \u003d valuesIterator();\n    while (values.hasNext()) {\n        Object nextValue \u003d values.next();\n        if (c.compareTo(nextValue) \u003e 0) {\n            result +\u003d getCount(nextValue);\n        } else {\n            return result;\n        }\n    }\n    return result;\n}",
      "path": "src/java/org/apache/commons/math/stat/Frequency.java",
      "functionStartLine": 286,
      "functionName": "getCumFreq",
      "functionAnnotation": "",
      "functionDoc": "Returns the cummulative frequency of values less than or equal to v.\n\u003cp\u003e\nReturns 0 if v is not comparable to the values set.\n\n@param v the value to lookup.\n@return the proportion of values equal to v\n"
    }
  }
}