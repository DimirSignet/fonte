{
  "origin": "codeshovel",
  "repositoryName": "Closure-74b",
  "repositoryPath": "/tmp/Closure-74b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "IRFactory.java",
  "functionName": "processUnaryExpression",
  "functionId": "$processUnaryExpression___exprNode-UnaryExpression",
  "sourceFilePath": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 895,
  "functionEndLine": 920,
  "numCommitsSeen": 36,
  "timeTaken": 3075,
  "changeHistory": [
    "4839e1ea57f9a1a26debd2cc8f22beef7282b490",
    "35d56dd1fadec0ed50797d222de4e05f78bbf1c9",
    "541402929a600a95bf099513908b4efd8b0e1c5b",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "4839e1ea57f9a1a26debd2cc8f22beef7282b490": "Ybodychange",
    "35d56dd1fadec0ed50797d222de4e05f78bbf1c9": "Ybodychange",
    "541402929a600a95bf099513908b4efd8b0e1c5b": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4839e1ea57f9a1a26debd2cc8f22beef7282b490": {
      "type": "Ybodychange",
      "commitMessage": "\nDon\u0027t let invalid LHS assignments to slip through.\nFixes issue 215.\nFixes issue 214.\n\nR\u003dnicksantos\nDELTA\u003d98  (82 added, 1 deleted, 15 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d248\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@685 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/11/11, 11:28 AM",
      "commitName": "4839e1ea57f9a1a26debd2cc8f22beef7282b490",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "12/21/10, 11:18 AM",
      "commitNameOld": "68c9dd762c89b2d1d0e2c2edb1e82df43602e7bc",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 21.01,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nNode processUnaryExpression(UnaryExpression exprNode) {\n    int type \u003d transformTokenType(exprNode.getType());\n    Node operand \u003d transform(exprNode.getOperand());\n    if (type \u003d\u003d Token.NEG \u0026\u0026 operand.getType() \u003d\u003d Token.NUMBER) {\n        operand.setDouble(-operand.getDouble());\n        return operand;\n    } else {\n        if (type \u003d\u003d Token.INC || type \u003d\u003d Token.DEC) {\n            if (!validAssignmentTarget(operand)) {\n                String msg \u003d (type \u003d\u003d Token.INC) ? \"invalid increment target\" : \"invalid decrement target\";\n                errorReporter.error(msg, sourceName, operand.getLineno(), \"\", 0);\n            }\n        }\n        Node node \u003d newNode(type, operand);\n        if (exprNode.isPostfix()) {\n            node.putBooleanProp(Node.INCRDECR_PROP, true);\n        }\n        return node;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
      "functionStartLine": 797,
      "functionName": "processUnaryExpression",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,15 +1,21 @@\n @Override\n Node processUnaryExpression(UnaryExpression exprNode) {\n     int type \u003d transformTokenType(exprNode.getType());\n     Node operand \u003d transform(exprNode.getOperand());\n     if (type \u003d\u003d Token.NEG \u0026\u0026 operand.getType() \u003d\u003d Token.NUMBER) {\n         operand.setDouble(-operand.getDouble());\n         return operand;\n     } else {\n+        if (type \u003d\u003d Token.INC || type \u003d\u003d Token.DEC) {\n+            if (!validAssignmentTarget(operand)) {\n+                String msg \u003d (type \u003d\u003d Token.INC) ? \"invalid increment target\" : \"invalid decrement target\";\n+                errorReporter.error(msg, sourceName, operand.getLineno(), \"\", 0);\n+            }\n+        }\n         Node node \u003d newNode(type, operand);\n         if (exprNode.isPostfix()) {\n             node.putBooleanProp(Node.INCRDECR_PROP, true);\n         }\n         return node;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "35d56dd1fadec0ed50797d222de4e05f78bbf1c9": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/07/02 17:44:46 by nicksantos\n\n        fix RAI when comparing two types that are always equal.\n        Fixes issue 172\n\n        R\u003dacleung\n        DELTA\u003d20  (19 added, 0 deleted, 1 changed)\n\nChange on 2010/07/03 08:52:08 by johnlenz\n\n        Prefer the use of the unsyncronized StringBuilder over StringBuffer. This is just a code style change, this are no uses that should have any performance impact.\n\n        R\u003dacleung\n        DELTA\u003d30  (0 added, 2 deleted, 28 changed)\n\nChange on 2010/07/07 11:56:02 by johnlenz\n\n        Reduce the memory cost of generating source maps by reducing the number\n        of property structure objects that are created.  We do this by taking\n        advantage of the fact the property list objects are immutable and can be\n        shared between Nodes.  The source file prop is then shared between\n        every Node in the AST for a given source file, reducing the the number\n        of property nodes used to store this information from O(ast-nodes) to\n        O(source-files).\n\n        R\u003dbowdidge\n        DELTA\u003d122  (68 added, 1 deleted, 53 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d49002\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@265 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/7/10, 3:14 PM",
      "commitName": "35d56dd1fadec0ed50797d222de4e05f78bbf1c9",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "6/29/10, 2:10 PM",
      "commitNameOld": "541402929a600a95bf099513908b4efd8b0e1c5b",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 8.04,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nNode processUnaryExpression(UnaryExpression exprNode) {\n    int type \u003d transformTokenType(exprNode.getType());\n    Node operand \u003d transform(exprNode.getOperand());\n    if (type \u003d\u003d Token.NEG \u0026\u0026 operand.getType() \u003d\u003d Token.NUMBER) {\n        operand.setDouble(-operand.getDouble());\n        return operand;\n    } else {\n        Node node \u003d newNode(type, operand);\n        if (exprNode.isPostfix()) {\n            node.putBooleanProp(Node.INCRDECR_PROP, true);\n        }\n        return node;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
      "functionStartLine": 807,
      "functionName": "processUnaryExpression",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,15 +1,15 @@\n @Override\n Node processUnaryExpression(UnaryExpression exprNode) {\n     int type \u003d transformTokenType(exprNode.getType());\n     Node operand \u003d transform(exprNode.getOperand());\n     if (type \u003d\u003d Token.NEG \u0026\u0026 operand.getType() \u003d\u003d Token.NUMBER) {\n         operand.setDouble(-operand.getDouble());\n         return operand;\n     } else {\n-        Node node \u003d new Node(type, operand);\n+        Node node \u003d newNode(type, operand);\n         if (exprNode.isPostfix()) {\n             node.putBooleanProp(Node.INCRDECR_PROP, true);\n         }\n         return node;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "541402929a600a95bf099513908b4efd8b0e1c5b": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/06/28 16:56:22 by dhans\n\n        Array(arg0, arg1, ...) folds into [arg0, arg1, ...] if\n        possible.\n\n        R\u003djohnlenz\n        DELTA\u003d126  (101 added, 0 deleted, 25 changed)\n\nChange on 2010/06/28 17:36:40 by johnlenz\n\n        Modify the AST construction so that \"-2\" is a single Node instead of a\n        \"NEG\" and a \"NUMBER\" node. Simplifies unit testing in some cases.\n        Update and enable a couple of disable tests while I\u0027m here.\n\n        R\u003dbowdidge\n        DELTA\u003d82  (63 added, 3 deleted, 16 changed)\n\nChange on 2010/06/29 00:59:44 by lukaszo\n\n        Adding adoptNode to the Document prototype.\n\n        R\u003dacleung\n        DELTA\u003d7  (7 added, 0 deleted, 0 changed)\n\nChange on 2010/06/29 08:30:43 by dcc\n\n        Remove the (now empty) FoldConstants pass and all references to it.\n\n        R\u003dacleung\n        DELTA\u003d64  (0 added, 64 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d46001\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@258 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/29/10, 2:10 PM",
      "commitName": "541402929a600a95bf099513908b4efd8b0e1c5b",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "5/26/10, 11:16 AM",
      "commitNameOld": "d7a094a288f86ca58bf05c9867320096e468c45e",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 34.12,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nNode processUnaryExpression(UnaryExpression exprNode) {\n    int type \u003d transformTokenType(exprNode.getType());\n    Node operand \u003d transform(exprNode.getOperand());\n    if (type \u003d\u003d Token.NEG \u0026\u0026 operand.getType() \u003d\u003d Token.NUMBER) {\n        operand.setDouble(-operand.getDouble());\n        return operand;\n    } else {\n        Node node \u003d new Node(type, operand);\n        if (exprNode.isPostfix()) {\n            node.putBooleanProp(Node.INCRDECR_PROP, true);\n        }\n        return node;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
      "functionStartLine": 789,
      "functionName": "processUnaryExpression",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,8 +1,15 @@\n @Override\n Node processUnaryExpression(UnaryExpression exprNode) {\n-    Node node \u003d new Node(transformTokenType(exprNode.getType()), transform(exprNode.getOperand()));\n-    if (exprNode.isPostfix()) {\n-        node.putBooleanProp(Node.INCRDECR_PROP, true);\n+    int type \u003d transformTokenType(exprNode.getType());\n+    Node operand \u003d transform(exprNode.getOperand());\n+    if (type \u003d\u003d Token.NEG \u0026\u0026 operand.getType() \u003d\u003d Token.NUMBER) {\n+        operand.setDouble(-operand.getDouble());\n+        return operand;\n+    } else {\n+        Node node \u003d new Node(type, operand);\n+        if (exprNode.isPostfix()) {\n+            node.putBooleanProp(Node.INCRDECR_PROP, true);\n+        }\n+        return node;\n     }\n-    return node;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,8 @@\n+@Override\n+Node processUnaryExpression(UnaryExpression exprNode) {\n+    Node node \u003d new Node(transformTokenType(exprNode.getType()), transform(exprNode.getOperand()));\n+    if (exprNode.isPostfix()) {\n+        node.putBooleanProp(Node.INCRDECR_PROP, true);\n+    }\n+    return node;\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\nNode processUnaryExpression(UnaryExpression exprNode) {\n    Node node \u003d new Node(transformTokenType(exprNode.getType()), transform(exprNode.getOperand()));\n    if (exprNode.isPostfix()) {\n        node.putBooleanProp(Node.INCRDECR_PROP, true);\n    }\n    return node;\n}",
      "path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
      "functionStartLine": 747,
      "functionName": "processUnaryExpression",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}