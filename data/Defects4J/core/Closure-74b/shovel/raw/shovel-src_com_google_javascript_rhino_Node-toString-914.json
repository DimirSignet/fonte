{
  "origin": "codeshovel",
  "repositoryName": "Closure-74b",
  "repositoryPath": "/tmp/Closure-74b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Node.java",
  "functionName": "toString",
  "functionId": "toString___printSource-boolean__printAnnotations-boolean__printType-boolean",
  "sourceFilePath": "src/com/google/javascript/rhino/Node.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 914,
  "functionEndLine": 924,
  "numCommitsSeen": 37,
  "timeTaken": 3458,
  "changeHistory": [
    "43859717972907dd1ecebd8dca6e05036386e28b",
    "7efb21a25bb44dcfc513d584c6b191aeacfba367",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "43859717972907dd1ecebd8dca6e05036386e28b": "Yformatchange",
    "7efb21a25bb44dcfc513d584c6b191aeacfba367": "Ymultichange(Yparameterchange,Yreturntypechange,Ymodifierchange,Ybodychange)",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "43859717972907dd1ecebd8dca6e05036386e28b": {
      "type": "Yformatchange",
      "commitMessage": "\nChange on 2010/04/14 by john\n\n        Stop creating specialized Node types for FUNCTION and SCRIPT as the added functionality isn\u0027t used anywhere.\n\n        Also correct some formatting issue with Node (as it won\u0027t need to be merged with anything else anymore).\n\n        R\u003dsteve,robert\n        DELTA\u003d3969  (1913 added, 1925 deleted, 131 changed)\n\nChange on 2010/04/14 by john\n\n        Fix source information in MinimizeExitPoints.\n\n        R\u003drobert\n        DELTA\u003d10  (5 added, 2 deleted, 3 changed)\n\nChange on 2010/04/14 by john\n\n        Maintain source information.\n\n        R\u003dantonio\n        DELTA\u003d17  (11 added, 0 deleted, 6 changed)\n\nChange on 2010/04/14 by john\n\n        Maintain source information through FoldConstants.\n\n        R\u003drobert\n        DELTA\u003d42  (22 added, 0 deleted, 20 changed)\n\nChange on 2010/04/14 by nick\n\n        lock down function type construction\n\n        R\u003djohn\n        DELTA\u003d111  (83 added, 9 deleted, 19 changed)\n\nChange on 2010/04/14 by john\n\n        Fix source info in CollapseProperties.\n\n        R\u003dnick\n        DELTA\u003d17  (8 added, 3 deleted, 6 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dmbevwz\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@184 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/14/10, 4:53 PM",
      "commitName": "43859717972907dd1ecebd8dca6e05036386e28b",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/13/10, 2:39 PM",
      "commitNameOld": "de13c3313c05f4449c50c560324389d6905a214d",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 1.09,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public String toString(boolean printSource, boolean printAnnotations, boolean printType) {\n    if (Token.printTrees) {\n        StringBuilder sb \u003d new StringBuilder();\n        toString(sb, printSource, printAnnotations, printType);\n        return sb.toString();\n    }\n    return String.valueOf(type);\n}",
      "path": "src/com/google/javascript/rhino/Node.java",
      "functionStartLine": 877,
      "functionName": "toString",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "7efb21a25bb44dcfc513d584c6b191aeacfba367": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ymodifierchange,Ybodychange)",
      "commitMessage": "Remove timestamps from the javadoc, because they screw up the diffs.\nAlso, better error messages.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@5 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/9/09, 12:46 PM",
      "commitName": "7efb21a25bb44dcfc513d584c6b191aeacfba367",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Remove timestamps from the javadoc, because they screw up the diffs.\nAlso, better error messages.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@5 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "11/9/09, 12:46 PM",
          "commitName": "7efb21a25bb44dcfc513d584c6b191aeacfba367",
          "commitAuthor": "nicholas.j.santos@gmail.com",
          "commitDateOld": "11/3/09, 3:51 PM",
          "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 5.87,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "public String toString(boolean printSource, boolean printAnnotations, boolean printType) {\n    if (Token.printTrees) {\n        StringBuilder sb \u003d new StringBuilder();\n        toString(sb, printSource, printAnnotations, printType);\n        return sb.toString();\n    }\n    return String.valueOf(type);\n}",
          "path": "src/com/google/javascript/rhino/Node.java",
          "functionStartLine": 868,
          "functionName": "toString",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,97 +1,8 @@\n-private void toString(StringBuilder sb) {\n+public String toString(boolean printSource, boolean printAnnotations, boolean printType) {\n     if (Token.printTrees) {\n-        sb.append(Token.name(type));\n-        if (this instanceof StringNode) {\n-            sb.append(\u0027 \u0027);\n-            sb.append(getString());\n-        } else if (type \u003d\u003d Token.FUNCTION) {\n-            sb.append(\u0027 \u0027);\n-            sb.append(first.getString());\n-        } else if (this instanceof ScriptOrFnNode) {\n-            ScriptOrFnNode sof \u003d (ScriptOrFnNode) this;\n-            if (this instanceof FunctionNode) {\n-                FunctionNode fn \u003d (FunctionNode) this;\n-                sb.append(\u0027 \u0027);\n-                sb.append(fn.getFunctionName());\n-            }\n-            sb.append(\" [source name: \");\n-            sb.append(sof.getSourceName());\n-            sb.append(\"] [encoded source length: \");\n-            sb.append(sof.getEncodedSourceEnd() - sof.getEncodedSourceStart());\n-            sb.append(\"] [base line: \");\n-            sb.append(sof.getBaseLineno());\n-            sb.append(\"] [end line: \");\n-            sb.append(sof.getEndLineno());\n-            sb.append(\u0027]\u0027);\n-        } else if (type \u003d\u003d Token.NUMBER) {\n-            sb.append(\u0027 \u0027);\n-            sb.append(getDouble());\n-        }\n-        int lineno \u003d getLineno();\n-        if (lineno !\u003d -1) {\n-            sb.append(\u0027 \u0027);\n-            sb.append(lineno);\n-        }\n-        int[] keys \u003d getSortedPropTypes();\n-        for (int i \u003d 0; i \u003c keys.length; i++) {\n-            int type \u003d keys[i];\n-            PropListItem x \u003d lookupProperty(type);\n-            sb.append(\" [\");\n-            sb.append(propToString(type));\n-            sb.append(\": \");\n-            String value;\n-            switch(type) {\n-                case TARGETBLOCK_PROP:\n-                    value \u003d \"target block property\";\n-                    break;\n-                case LOCAL_BLOCK_PROP:\n-                    value \u003d \"last local block\";\n-                    break;\n-                case ISNUMBER_PROP:\n-                    switch(x.intValue) {\n-                        case BOTH:\n-                            value \u003d \"both\";\n-                            break;\n-                        case RIGHT:\n-                            value \u003d \"right\";\n-                            break;\n-                        case LEFT:\n-                            value \u003d \"left\";\n-                            break;\n-                        default:\n-                            throw Kit.codeBug();\n-                    }\n-                    break;\n-                case SPECIALCALL_PROP:\n-                    switch(x.intValue) {\n-                        case SPECIALCALL_EVAL:\n-                            value \u003d \"eval\";\n-                            break;\n-                        case SPECIALCALL_WITH:\n-                            value \u003d \"with\";\n-                            break;\n-                        default:\n-                            throw Kit.codeBug();\n-                    }\n-                    break;\n-                default:\n-                    Object obj \u003d x.objectValue;\n-                    if (obj !\u003d null) {\n-                        value \u003d obj.toString();\n-                    } else {\n-                        value \u003d String.valueOf(x.intValue);\n-                    }\n-                    break;\n-            }\n-            sb.append(value);\n-            sb.append(\u0027]\u0027);\n-        }\n-        if (jsType !\u003d null) {\n-            String jsTypeString \u003d jsType.toString();\n-            if (jsTypeString !\u003d null) {\n-                sb.append(\" : \");\n-                sb.append(jsTypeString);\n-            }\n-        }\n+        StringBuilder sb \u003d new StringBuilder();\n+        toString(sb, printSource, printAnnotations, printType);\n+        return sb.toString();\n     }\n+    return String.valueOf(type);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[sb-StringBuilder]",
            "newValue": "[printSource-boolean, printAnnotations-boolean, printType-boolean]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "Remove timestamps from the javadoc, because they screw up the diffs.\nAlso, better error messages.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@5 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "11/9/09, 12:46 PM",
          "commitName": "7efb21a25bb44dcfc513d584c6b191aeacfba367",
          "commitAuthor": "nicholas.j.santos@gmail.com",
          "commitDateOld": "11/3/09, 3:51 PM",
          "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 5.87,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "public String toString(boolean printSource, boolean printAnnotations, boolean printType) {\n    if (Token.printTrees) {\n        StringBuilder sb \u003d new StringBuilder();\n        toString(sb, printSource, printAnnotations, printType);\n        return sb.toString();\n    }\n    return String.valueOf(type);\n}",
          "path": "src/com/google/javascript/rhino/Node.java",
          "functionStartLine": 868,
          "functionName": "toString",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,97 +1,8 @@\n-private void toString(StringBuilder sb) {\n+public String toString(boolean printSource, boolean printAnnotations, boolean printType) {\n     if (Token.printTrees) {\n-        sb.append(Token.name(type));\n-        if (this instanceof StringNode) {\n-            sb.append(\u0027 \u0027);\n-            sb.append(getString());\n-        } else if (type \u003d\u003d Token.FUNCTION) {\n-            sb.append(\u0027 \u0027);\n-            sb.append(first.getString());\n-        } else if (this instanceof ScriptOrFnNode) {\n-            ScriptOrFnNode sof \u003d (ScriptOrFnNode) this;\n-            if (this instanceof FunctionNode) {\n-                FunctionNode fn \u003d (FunctionNode) this;\n-                sb.append(\u0027 \u0027);\n-                sb.append(fn.getFunctionName());\n-            }\n-            sb.append(\" [source name: \");\n-            sb.append(sof.getSourceName());\n-            sb.append(\"] [encoded source length: \");\n-            sb.append(sof.getEncodedSourceEnd() - sof.getEncodedSourceStart());\n-            sb.append(\"] [base line: \");\n-            sb.append(sof.getBaseLineno());\n-            sb.append(\"] [end line: \");\n-            sb.append(sof.getEndLineno());\n-            sb.append(\u0027]\u0027);\n-        } else if (type \u003d\u003d Token.NUMBER) {\n-            sb.append(\u0027 \u0027);\n-            sb.append(getDouble());\n-        }\n-        int lineno \u003d getLineno();\n-        if (lineno !\u003d -1) {\n-            sb.append(\u0027 \u0027);\n-            sb.append(lineno);\n-        }\n-        int[] keys \u003d getSortedPropTypes();\n-        for (int i \u003d 0; i \u003c keys.length; i++) {\n-            int type \u003d keys[i];\n-            PropListItem x \u003d lookupProperty(type);\n-            sb.append(\" [\");\n-            sb.append(propToString(type));\n-            sb.append(\": \");\n-            String value;\n-            switch(type) {\n-                case TARGETBLOCK_PROP:\n-                    value \u003d \"target block property\";\n-                    break;\n-                case LOCAL_BLOCK_PROP:\n-                    value \u003d \"last local block\";\n-                    break;\n-                case ISNUMBER_PROP:\n-                    switch(x.intValue) {\n-                        case BOTH:\n-                            value \u003d \"both\";\n-                            break;\n-                        case RIGHT:\n-                            value \u003d \"right\";\n-                            break;\n-                        case LEFT:\n-                            value \u003d \"left\";\n-                            break;\n-                        default:\n-                            throw Kit.codeBug();\n-                    }\n-                    break;\n-                case SPECIALCALL_PROP:\n-                    switch(x.intValue) {\n-                        case SPECIALCALL_EVAL:\n-                            value \u003d \"eval\";\n-                            break;\n-                        case SPECIALCALL_WITH:\n-                            value \u003d \"with\";\n-                            break;\n-                        default:\n-                            throw Kit.codeBug();\n-                    }\n-                    break;\n-                default:\n-                    Object obj \u003d x.objectValue;\n-                    if (obj !\u003d null) {\n-                        value \u003d obj.toString();\n-                    } else {\n-                        value \u003d String.valueOf(x.intValue);\n-                    }\n-                    break;\n-            }\n-            sb.append(value);\n-            sb.append(\u0027]\u0027);\n-        }\n-        if (jsType !\u003d null) {\n-            String jsTypeString \u003d jsType.toString();\n-            if (jsTypeString !\u003d null) {\n-                sb.append(\" : \");\n-                sb.append(jsTypeString);\n-            }\n-        }\n+        StringBuilder sb \u003d new StringBuilder();\n+        toString(sb, printSource, printAnnotations, printType);\n+        return sb.toString();\n     }\n+    return String.valueOf(type);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "String"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Remove timestamps from the javadoc, because they screw up the diffs.\nAlso, better error messages.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@5 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "11/9/09, 12:46 PM",
          "commitName": "7efb21a25bb44dcfc513d584c6b191aeacfba367",
          "commitAuthor": "nicholas.j.santos@gmail.com",
          "commitDateOld": "11/3/09, 3:51 PM",
          "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 5.87,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "public String toString(boolean printSource, boolean printAnnotations, boolean printType) {\n    if (Token.printTrees) {\n        StringBuilder sb \u003d new StringBuilder();\n        toString(sb, printSource, printAnnotations, printType);\n        return sb.toString();\n    }\n    return String.valueOf(type);\n}",
          "path": "src/com/google/javascript/rhino/Node.java",
          "functionStartLine": 868,
          "functionName": "toString",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,97 +1,8 @@\n-private void toString(StringBuilder sb) {\n+public String toString(boolean printSource, boolean printAnnotations, boolean printType) {\n     if (Token.printTrees) {\n-        sb.append(Token.name(type));\n-        if (this instanceof StringNode) {\n-            sb.append(\u0027 \u0027);\n-            sb.append(getString());\n-        } else if (type \u003d\u003d Token.FUNCTION) {\n-            sb.append(\u0027 \u0027);\n-            sb.append(first.getString());\n-        } else if (this instanceof ScriptOrFnNode) {\n-            ScriptOrFnNode sof \u003d (ScriptOrFnNode) this;\n-            if (this instanceof FunctionNode) {\n-                FunctionNode fn \u003d (FunctionNode) this;\n-                sb.append(\u0027 \u0027);\n-                sb.append(fn.getFunctionName());\n-            }\n-            sb.append(\" [source name: \");\n-            sb.append(sof.getSourceName());\n-            sb.append(\"] [encoded source length: \");\n-            sb.append(sof.getEncodedSourceEnd() - sof.getEncodedSourceStart());\n-            sb.append(\"] [base line: \");\n-            sb.append(sof.getBaseLineno());\n-            sb.append(\"] [end line: \");\n-            sb.append(sof.getEndLineno());\n-            sb.append(\u0027]\u0027);\n-        } else if (type \u003d\u003d Token.NUMBER) {\n-            sb.append(\u0027 \u0027);\n-            sb.append(getDouble());\n-        }\n-        int lineno \u003d getLineno();\n-        if (lineno !\u003d -1) {\n-            sb.append(\u0027 \u0027);\n-            sb.append(lineno);\n-        }\n-        int[] keys \u003d getSortedPropTypes();\n-        for (int i \u003d 0; i \u003c keys.length; i++) {\n-            int type \u003d keys[i];\n-            PropListItem x \u003d lookupProperty(type);\n-            sb.append(\" [\");\n-            sb.append(propToString(type));\n-            sb.append(\": \");\n-            String value;\n-            switch(type) {\n-                case TARGETBLOCK_PROP:\n-                    value \u003d \"target block property\";\n-                    break;\n-                case LOCAL_BLOCK_PROP:\n-                    value \u003d \"last local block\";\n-                    break;\n-                case ISNUMBER_PROP:\n-                    switch(x.intValue) {\n-                        case BOTH:\n-                            value \u003d \"both\";\n-                            break;\n-                        case RIGHT:\n-                            value \u003d \"right\";\n-                            break;\n-                        case LEFT:\n-                            value \u003d \"left\";\n-                            break;\n-                        default:\n-                            throw Kit.codeBug();\n-                    }\n-                    break;\n-                case SPECIALCALL_PROP:\n-                    switch(x.intValue) {\n-                        case SPECIALCALL_EVAL:\n-                            value \u003d \"eval\";\n-                            break;\n-                        case SPECIALCALL_WITH:\n-                            value \u003d \"with\";\n-                            break;\n-                        default:\n-                            throw Kit.codeBug();\n-                    }\n-                    break;\n-                default:\n-                    Object obj \u003d x.objectValue;\n-                    if (obj !\u003d null) {\n-                        value \u003d obj.toString();\n-                    } else {\n-                        value \u003d String.valueOf(x.intValue);\n-                    }\n-                    break;\n-            }\n-            sb.append(value);\n-            sb.append(\u0027]\u0027);\n-        }\n-        if (jsType !\u003d null) {\n-            String jsTypeString \u003d jsType.toString();\n-            if (jsTypeString !\u003d null) {\n-                sb.append(\" : \");\n-                sb.append(jsTypeString);\n-            }\n-        }\n+        StringBuilder sb \u003d new StringBuilder();\n+        toString(sb, printSource, printAnnotations, printType);\n+        return sb.toString();\n     }\n+    return String.valueOf(type);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Remove timestamps from the javadoc, because they screw up the diffs.\nAlso, better error messages.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@5 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "11/9/09, 12:46 PM",
          "commitName": "7efb21a25bb44dcfc513d584c6b191aeacfba367",
          "commitAuthor": "nicholas.j.santos@gmail.com",
          "commitDateOld": "11/3/09, 3:51 PM",
          "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 5.87,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "public String toString(boolean printSource, boolean printAnnotations, boolean printType) {\n    if (Token.printTrees) {\n        StringBuilder sb \u003d new StringBuilder();\n        toString(sb, printSource, printAnnotations, printType);\n        return sb.toString();\n    }\n    return String.valueOf(type);\n}",
          "path": "src/com/google/javascript/rhino/Node.java",
          "functionStartLine": 868,
          "functionName": "toString",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,97 +1,8 @@\n-private void toString(StringBuilder sb) {\n+public String toString(boolean printSource, boolean printAnnotations, boolean printType) {\n     if (Token.printTrees) {\n-        sb.append(Token.name(type));\n-        if (this instanceof StringNode) {\n-            sb.append(\u0027 \u0027);\n-            sb.append(getString());\n-        } else if (type \u003d\u003d Token.FUNCTION) {\n-            sb.append(\u0027 \u0027);\n-            sb.append(first.getString());\n-        } else if (this instanceof ScriptOrFnNode) {\n-            ScriptOrFnNode sof \u003d (ScriptOrFnNode) this;\n-            if (this instanceof FunctionNode) {\n-                FunctionNode fn \u003d (FunctionNode) this;\n-                sb.append(\u0027 \u0027);\n-                sb.append(fn.getFunctionName());\n-            }\n-            sb.append(\" [source name: \");\n-            sb.append(sof.getSourceName());\n-            sb.append(\"] [encoded source length: \");\n-            sb.append(sof.getEncodedSourceEnd() - sof.getEncodedSourceStart());\n-            sb.append(\"] [base line: \");\n-            sb.append(sof.getBaseLineno());\n-            sb.append(\"] [end line: \");\n-            sb.append(sof.getEndLineno());\n-            sb.append(\u0027]\u0027);\n-        } else if (type \u003d\u003d Token.NUMBER) {\n-            sb.append(\u0027 \u0027);\n-            sb.append(getDouble());\n-        }\n-        int lineno \u003d getLineno();\n-        if (lineno !\u003d -1) {\n-            sb.append(\u0027 \u0027);\n-            sb.append(lineno);\n-        }\n-        int[] keys \u003d getSortedPropTypes();\n-        for (int i \u003d 0; i \u003c keys.length; i++) {\n-            int type \u003d keys[i];\n-            PropListItem x \u003d lookupProperty(type);\n-            sb.append(\" [\");\n-            sb.append(propToString(type));\n-            sb.append(\": \");\n-            String value;\n-            switch(type) {\n-                case TARGETBLOCK_PROP:\n-                    value \u003d \"target block property\";\n-                    break;\n-                case LOCAL_BLOCK_PROP:\n-                    value \u003d \"last local block\";\n-                    break;\n-                case ISNUMBER_PROP:\n-                    switch(x.intValue) {\n-                        case BOTH:\n-                            value \u003d \"both\";\n-                            break;\n-                        case RIGHT:\n-                            value \u003d \"right\";\n-                            break;\n-                        case LEFT:\n-                            value \u003d \"left\";\n-                            break;\n-                        default:\n-                            throw Kit.codeBug();\n-                    }\n-                    break;\n-                case SPECIALCALL_PROP:\n-                    switch(x.intValue) {\n-                        case SPECIALCALL_EVAL:\n-                            value \u003d \"eval\";\n-                            break;\n-                        case SPECIALCALL_WITH:\n-                            value \u003d \"with\";\n-                            break;\n-                        default:\n-                            throw Kit.codeBug();\n-                    }\n-                    break;\n-                default:\n-                    Object obj \u003d x.objectValue;\n-                    if (obj !\u003d null) {\n-                        value \u003d obj.toString();\n-                    } else {\n-                        value \u003d String.valueOf(x.intValue);\n-                    }\n-                    break;\n-            }\n-            sb.append(value);\n-            sb.append(\u0027]\u0027);\n-        }\n-        if (jsType !\u003d null) {\n-            String jsTypeString \u003d jsType.toString();\n-            if (jsTypeString !\u003d null) {\n-                sb.append(\" : \");\n-                sb.append(jsTypeString);\n-            }\n-        }\n+        StringBuilder sb \u003d new StringBuilder();\n+        toString(sb, printSource, printAnnotations, printType);\n+        return sb.toString();\n     }\n+    return String.valueOf(type);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,97 @@\n+private void toString(StringBuilder sb) {\n+    if (Token.printTrees) {\n+        sb.append(Token.name(type));\n+        if (this instanceof StringNode) {\n+            sb.append(\u0027 \u0027);\n+            sb.append(getString());\n+        } else if (type \u003d\u003d Token.FUNCTION) {\n+            sb.append(\u0027 \u0027);\n+            sb.append(first.getString());\n+        } else if (this instanceof ScriptOrFnNode) {\n+            ScriptOrFnNode sof \u003d (ScriptOrFnNode) this;\n+            if (this instanceof FunctionNode) {\n+                FunctionNode fn \u003d (FunctionNode) this;\n+                sb.append(\u0027 \u0027);\n+                sb.append(fn.getFunctionName());\n+            }\n+            sb.append(\" [source name: \");\n+            sb.append(sof.getSourceName());\n+            sb.append(\"] [encoded source length: \");\n+            sb.append(sof.getEncodedSourceEnd() - sof.getEncodedSourceStart());\n+            sb.append(\"] [base line: \");\n+            sb.append(sof.getBaseLineno());\n+            sb.append(\"] [end line: \");\n+            sb.append(sof.getEndLineno());\n+            sb.append(\u0027]\u0027);\n+        } else if (type \u003d\u003d Token.NUMBER) {\n+            sb.append(\u0027 \u0027);\n+            sb.append(getDouble());\n+        }\n+        int lineno \u003d getLineno();\n+        if (lineno !\u003d -1) {\n+            sb.append(\u0027 \u0027);\n+            sb.append(lineno);\n+        }\n+        int[] keys \u003d getSortedPropTypes();\n+        for (int i \u003d 0; i \u003c keys.length; i++) {\n+            int type \u003d keys[i];\n+            PropListItem x \u003d lookupProperty(type);\n+            sb.append(\" [\");\n+            sb.append(propToString(type));\n+            sb.append(\": \");\n+            String value;\n+            switch(type) {\n+                case TARGETBLOCK_PROP:\n+                    value \u003d \"target block property\";\n+                    break;\n+                case LOCAL_BLOCK_PROP:\n+                    value \u003d \"last local block\";\n+                    break;\n+                case ISNUMBER_PROP:\n+                    switch(x.intValue) {\n+                        case BOTH:\n+                            value \u003d \"both\";\n+                            break;\n+                        case RIGHT:\n+                            value \u003d \"right\";\n+                            break;\n+                        case LEFT:\n+                            value \u003d \"left\";\n+                            break;\n+                        default:\n+                            throw Kit.codeBug();\n+                    }\n+                    break;\n+                case SPECIALCALL_PROP:\n+                    switch(x.intValue) {\n+                        case SPECIALCALL_EVAL:\n+                            value \u003d \"eval\";\n+                            break;\n+                        case SPECIALCALL_WITH:\n+                            value \u003d \"with\";\n+                            break;\n+                        default:\n+                            throw Kit.codeBug();\n+                    }\n+                    break;\n+                default:\n+                    Object obj \u003d x.objectValue;\n+                    if (obj !\u003d null) {\n+                        value \u003d obj.toString();\n+                    } else {\n+                        value \u003d String.valueOf(x.intValue);\n+                    }\n+                    break;\n+            }\n+            sb.append(value);\n+            sb.append(\u0027]\u0027);\n+        }\n+        if (jsType !\u003d null) {\n+            String jsTypeString \u003d jsType.toString();\n+            if (jsTypeString !\u003d null) {\n+                sb.append(\" : \");\n+                sb.append(jsTypeString);\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void toString(StringBuilder sb) {\n    if (Token.printTrees) {\n        sb.append(Token.name(type));\n        if (this instanceof StringNode) {\n            sb.append(\u0027 \u0027);\n            sb.append(getString());\n        } else if (type \u003d\u003d Token.FUNCTION) {\n            sb.append(\u0027 \u0027);\n            sb.append(first.getString());\n        } else if (this instanceof ScriptOrFnNode) {\n            ScriptOrFnNode sof \u003d (ScriptOrFnNode) this;\n            if (this instanceof FunctionNode) {\n                FunctionNode fn \u003d (FunctionNode) this;\n                sb.append(\u0027 \u0027);\n                sb.append(fn.getFunctionName());\n            }\n            sb.append(\" [source name: \");\n            sb.append(sof.getSourceName());\n            sb.append(\"] [encoded source length: \");\n            sb.append(sof.getEncodedSourceEnd() - sof.getEncodedSourceStart());\n            sb.append(\"] [base line: \");\n            sb.append(sof.getBaseLineno());\n            sb.append(\"] [end line: \");\n            sb.append(sof.getEndLineno());\n            sb.append(\u0027]\u0027);\n        } else if (type \u003d\u003d Token.NUMBER) {\n            sb.append(\u0027 \u0027);\n            sb.append(getDouble());\n        }\n        int lineno \u003d getLineno();\n        if (lineno !\u003d -1) {\n            sb.append(\u0027 \u0027);\n            sb.append(lineno);\n        }\n        int[] keys \u003d getSortedPropTypes();\n        for (int i \u003d 0; i \u003c keys.length; i++) {\n            int type \u003d keys[i];\n            PropListItem x \u003d lookupProperty(type);\n            sb.append(\" [\");\n            sb.append(propToString(type));\n            sb.append(\": \");\n            String value;\n            switch(type) {\n                case TARGETBLOCK_PROP:\n                    value \u003d \"target block property\";\n                    break;\n                case LOCAL_BLOCK_PROP:\n                    value \u003d \"last local block\";\n                    break;\n                case ISNUMBER_PROP:\n                    switch(x.intValue) {\n                        case BOTH:\n                            value \u003d \"both\";\n                            break;\n                        case RIGHT:\n                            value \u003d \"right\";\n                            break;\n                        case LEFT:\n                            value \u003d \"left\";\n                            break;\n                        default:\n                            throw Kit.codeBug();\n                    }\n                    break;\n                case SPECIALCALL_PROP:\n                    switch(x.intValue) {\n                        case SPECIALCALL_EVAL:\n                            value \u003d \"eval\";\n                            break;\n                        case SPECIALCALL_WITH:\n                            value \u003d \"with\";\n                            break;\n                        default:\n                            throw Kit.codeBug();\n                    }\n                    break;\n                default:\n                    Object obj \u003d x.objectValue;\n                    if (obj !\u003d null) {\n                        value \u003d obj.toString();\n                    } else {\n                        value \u003d String.valueOf(x.intValue);\n                    }\n                    break;\n            }\n            sb.append(value);\n            sb.append(\u0027]\u0027);\n        }\n        if (jsType !\u003d null) {\n            String jsTypeString \u003d jsType.toString();\n            if (jsTypeString !\u003d null) {\n                sb.append(\" : \");\n                sb.append(jsTypeString);\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/rhino/Node.java",
      "functionStartLine": 873,
      "functionName": "toString",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}