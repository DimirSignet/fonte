{
  "origin": "codeshovel",
  "repositoryName": "Closure-74b",
  "repositoryPath": "/tmp/Closure-74b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Compiler.java",
  "functionName": "initOptions",
  "functionId": "initOptions___options-CompilerOptions",
  "sourceFilePath": "src/com/google/javascript/jscomp/Compiler.java",
  "functionAnnotation": "",
  "functionDoc": "Initialize the compiler options. Only necessary if you\u0027re not doing\na normal compile() job.\n",
  "functionStartLine": 221,
  "functionEndLine": 279,
  "numCommitsSeen": 75,
  "timeTaken": 4657,
  "changeHistory": [
    "c00a33b88d00f3b28787da26e3bb65ae2c1f4893",
    "1e03ad032456a42908e19a7f2df46786969e7121",
    "8bf67e65c7ee2a202ac2dbf252727ae656642350",
    "5709ec1d0bbe5b7726a14d06f7eab9c35150e314",
    "1004aa6826a19fcb9e6a33b029b492a100fa081b",
    "a70a7c599e53a7752cf4b9e6e82b4408c3c4c04b",
    "6f2539acd3c37bd7f0d031b43364f75a5cd6d5f7"
  ],
  "changeHistoryShort": {
    "c00a33b88d00f3b28787da26e3bb65ae2c1f4893": "Ybodychange",
    "1e03ad032456a42908e19a7f2df46786969e7121": "Ybodychange",
    "8bf67e65c7ee2a202ac2dbf252727ae656642350": "Ybodychange",
    "5709ec1d0bbe5b7726a14d06f7eab9c35150e314": "Ybodychange",
    "1004aa6826a19fcb9e6a33b029b492a100fa081b": "Ybodychange",
    "a70a7c599e53a7752cf4b9e6e82b4408c3c4c04b": "Ybodychange",
    "6f2539acd3c37bd7f0d031b43364f75a5cd6d5f7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c00a33b88d00f3b28787da26e3bb65ae2c1f4893": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nSame change. The warnings guard issue has been fixed\n\n*** Original change description ***\n\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\ncausing problems. not sure why yet.\n\n*** Original change description ***\n\nAllow the \"global this\" warning to be suppressed on a per-file basis\n\nR\u003djohnlenz\nDELTA\u003d82  (50 added, 22 deleted, 10 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d953\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@915 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/18/11, 5:19 PM",
      "commitName": "c00a33b88d00f3b28787da26e3bb65ae2c1f4893",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "3/18/11, 1:52 PM",
      "commitNameOld": "1e03ad032456a42908e19a7f2df46786969e7121",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.14,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "public void initOptions(CompilerOptions options) {\n    this.options \u003d options;\n    if (errorManager \u003d\u003d null) {\n        if (outStream \u003d\u003d null) {\n            setErrorManager(new LoggerErrorManager(createMessageFormatter(), logger));\n        } else {\n            PrintStreamErrorManager printer \u003d new PrintStreamErrorManager(createMessageFormatter(), outStream);\n            printer.setSummaryDetailLevel(options.summaryDetailLevel);\n            setErrorManager(printer);\n        }\n    }\n    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n        options.checkTypes \u003d true;\n    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n        options.checkTypes \u003d false;\n    } else if (!options.checkTypes) {\n        options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR), CheckLevel.OFF);\n    }\n    if (options.checkGlobalThisLevel.isOn()) {\n        options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, options.checkGlobalThisLevel);\n    }\n    List\u003cWarningsGuard\u003e guards \u003d Lists.newArrayList();\n    guards.add(new SuppressDocWarningsGuard(getDiagnosticGroups().getRegisteredGroups()));\n    WarningsGuard warningsGuard \u003d options.getWarningsGuard();\n    if (warningsGuard !\u003d null) {\n        guards.add(options.getWarningsGuard());\n    }\n    if (!options.checkSymbols \u0026\u0026 (warningsGuard \u003d\u003d null || !warningsGuard.disables(DiagnosticGroups.CHECK_VARIABLES))) {\n        guards.add(new DiagnosticGroupWarningsGuard(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n    }\n    this.warningsGuard \u003d new ComposeWarningsGuard(guards);\n}",
      "path": "src/com/google/javascript/jscomp/Compiler.java",
      "functionStartLine": 221,
      "functionName": "initOptions",
      "functionAnnotation": "",
      "functionDoc": "Initialize the compiler options. Only necessary if you\u0027re not doing\na normal compile() job.\n",
      "diff": "@@ -1,29 +1,32 @@\n public void initOptions(CompilerOptions options) {\n     this.options \u003d options;\n     if (errorManager \u003d\u003d null) {\n         if (outStream \u003d\u003d null) {\n             setErrorManager(new LoggerErrorManager(createMessageFormatter(), logger));\n         } else {\n             PrintStreamErrorManager printer \u003d new PrintStreamErrorManager(createMessageFormatter(), outStream);\n             printer.setSummaryDetailLevel(options.summaryDetailLevel);\n             setErrorManager(printer);\n         }\n     }\n+    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n+        options.checkTypes \u003d true;\n+    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n+        options.checkTypes \u003d false;\n+    } else if (!options.checkTypes) {\n+        options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR), CheckLevel.OFF);\n+    }\n+    if (options.checkGlobalThisLevel.isOn()) {\n+        options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, options.checkGlobalThisLevel);\n+    }\n     List\u003cWarningsGuard\u003e guards \u003d Lists.newArrayList();\n     guards.add(new SuppressDocWarningsGuard(getDiagnosticGroups().getRegisteredGroups()));\n     WarningsGuard warningsGuard \u003d options.getWarningsGuard();\n     if (warningsGuard !\u003d null) {\n         guards.add(options.getWarningsGuard());\n     }\n     if (!options.checkSymbols \u0026\u0026 (warningsGuard \u003d\u003d null || !warningsGuard.disables(DiagnosticGroups.CHECK_VARIABLES))) {\n         guards.add(new DiagnosticGroupWarningsGuard(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n     }\n-    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n-        options.checkTypes \u003d true;\n-    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n-        options.checkTypes \u003d false;\n-    } else if (!options.checkTypes) {\n-        guards.add(new DiagnosticGroupWarningsGuard(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR), CheckLevel.OFF));\n-    }\n     this.warningsGuard \u003d new ComposeWarningsGuard(guards);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1e03ad032456a42908e19a7f2df46786969e7121": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\ncausing problems. not sure why yet.\n\n*** Original change description ***\n\nAllow the \"global this\" warning to be suppressed on a per-file basis\n\nDELTA\u003d82  (22 added, 50 deleted, 10 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d948\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@910 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/18/11, 1:52 PM",
      "commitName": "1e03ad032456a42908e19a7f2df46786969e7121",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "3/18/11, 5:25 PM",
      "commitNameOld": "8bf67e65c7ee2a202ac2dbf252727ae656642350",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": -0.15,
      "commitsBetweenForRepo": 0,
      "commitsBetweenForFile": 0,
      "actualSource": "public void initOptions(CompilerOptions options) {\n    this.options \u003d options;\n    if (errorManager \u003d\u003d null) {\n        if (outStream \u003d\u003d null) {\n            setErrorManager(new LoggerErrorManager(createMessageFormatter(), logger));\n        } else {\n            PrintStreamErrorManager printer \u003d new PrintStreamErrorManager(createMessageFormatter(), outStream);\n            printer.setSummaryDetailLevel(options.summaryDetailLevel);\n            setErrorManager(printer);\n        }\n    }\n    List\u003cWarningsGuard\u003e guards \u003d Lists.newArrayList();\n    guards.add(new SuppressDocWarningsGuard(getDiagnosticGroups().getRegisteredGroups()));\n    WarningsGuard warningsGuard \u003d options.getWarningsGuard();\n    if (warningsGuard !\u003d null) {\n        guards.add(options.getWarningsGuard());\n    }\n    if (!options.checkSymbols \u0026\u0026 (warningsGuard \u003d\u003d null || !warningsGuard.disables(DiagnosticGroups.CHECK_VARIABLES))) {\n        guards.add(new DiagnosticGroupWarningsGuard(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n    }\n    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n        options.checkTypes \u003d true;\n    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n        options.checkTypes \u003d false;\n    } else if (!options.checkTypes) {\n        guards.add(new DiagnosticGroupWarningsGuard(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR), CheckLevel.OFF));\n    }\n    this.warningsGuard \u003d new ComposeWarningsGuard(guards);\n}",
      "path": "src/com/google/javascript/jscomp/Compiler.java",
      "functionStartLine": 221,
      "functionName": "initOptions",
      "functionAnnotation": "",
      "functionDoc": "Initialize the compiler options. Only necessary if you\u0027re not doing\na normal compile() job.\n",
      "diff": "@@ -1,32 +1,29 @@\n public void initOptions(CompilerOptions options) {\n     this.options \u003d options;\n     if (errorManager \u003d\u003d null) {\n         if (outStream \u003d\u003d null) {\n             setErrorManager(new LoggerErrorManager(createMessageFormatter(), logger));\n         } else {\n             PrintStreamErrorManager printer \u003d new PrintStreamErrorManager(createMessageFormatter(), outStream);\n             printer.setSummaryDetailLevel(options.summaryDetailLevel);\n             setErrorManager(printer);\n         }\n     }\n-    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n-        options.checkTypes \u003d true;\n-    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n-        options.checkTypes \u003d false;\n-    } else if (!options.checkTypes) {\n-        options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR), CheckLevel.OFF);\n-    }\n-    if (options.checkGlobalThisLevel.isOn()) {\n-        options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, options.checkGlobalThisLevel);\n-    }\n     List\u003cWarningsGuard\u003e guards \u003d Lists.newArrayList();\n     guards.add(new SuppressDocWarningsGuard(getDiagnosticGroups().getRegisteredGroups()));\n     WarningsGuard warningsGuard \u003d options.getWarningsGuard();\n     if (warningsGuard !\u003d null) {\n         guards.add(options.getWarningsGuard());\n     }\n     if (!options.checkSymbols \u0026\u0026 (warningsGuard \u003d\u003d null || !warningsGuard.disables(DiagnosticGroups.CHECK_VARIABLES))) {\n         guards.add(new DiagnosticGroupWarningsGuard(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n     }\n+    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n+        options.checkTypes \u003d true;\n+    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n+        options.checkTypes \u003d false;\n+    } else if (!options.checkTypes) {\n+        guards.add(new DiagnosticGroupWarningsGuard(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR), CheckLevel.OFF));\n+    }\n     this.warningsGuard \u003d new ComposeWarningsGuard(guards);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "8bf67e65c7ee2a202ac2dbf252727ae656642350": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2011-03-18 10:06:19-07:00 by nicksantos\n\n\tAllow suppression of duplicate property declarations when\n\tthe property is in an object literal\n\n\tR\u003djohnlenz\n\tDELTA\u003d48  (47 added, 0 deleted, 1 changed)\n\nChange on 2011-03-18 12:02:54-07:00 by nicksantos\n\n\tAllow the \"global this\" warning to be suppressed on a per-file basis\n\n\tR\u003djohnlenz\n\tDELTA\u003d82  (50 added, 22 deleted, 10 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d945\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@909 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/18/11, 5:25 PM",
      "commitName": "8bf67e65c7ee2a202ac2dbf252727ae656642350",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "3/15/11, 3:44 PM",
      "commitNameOld": "027f4949c97913eac7dc4ba2402ceaf66246685e",
      "commitAuthorOld": "acleung@google.com",
      "daysBetweenCommits": 3.07,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "public void initOptions(CompilerOptions options) {\n    this.options \u003d options;\n    if (errorManager \u003d\u003d null) {\n        if (outStream \u003d\u003d null) {\n            setErrorManager(new LoggerErrorManager(createMessageFormatter(), logger));\n        } else {\n            PrintStreamErrorManager printer \u003d new PrintStreamErrorManager(createMessageFormatter(), outStream);\n            printer.setSummaryDetailLevel(options.summaryDetailLevel);\n            setErrorManager(printer);\n        }\n    }\n    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n        options.checkTypes \u003d true;\n    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n        options.checkTypes \u003d false;\n    } else if (!options.checkTypes) {\n        options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR), CheckLevel.OFF);\n    }\n    if (options.checkGlobalThisLevel.isOn()) {\n        options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, options.checkGlobalThisLevel);\n    }\n    List\u003cWarningsGuard\u003e guards \u003d Lists.newArrayList();\n    guards.add(new SuppressDocWarningsGuard(getDiagnosticGroups().getRegisteredGroups()));\n    WarningsGuard warningsGuard \u003d options.getWarningsGuard();\n    if (warningsGuard !\u003d null) {\n        guards.add(options.getWarningsGuard());\n    }\n    if (!options.checkSymbols \u0026\u0026 (warningsGuard \u003d\u003d null || !warningsGuard.disables(DiagnosticGroups.CHECK_VARIABLES))) {\n        guards.add(new DiagnosticGroupWarningsGuard(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n    }\n    this.warningsGuard \u003d new ComposeWarningsGuard(guards);\n}",
      "path": "src/com/google/javascript/jscomp/Compiler.java",
      "functionStartLine": 221,
      "functionName": "initOptions",
      "functionAnnotation": "",
      "functionDoc": "Initialize the compiler options. Only necessary if you\u0027re not doing\na normal compile() job.\n",
      "diff": "@@ -1,29 +1,32 @@\n public void initOptions(CompilerOptions options) {\n     this.options \u003d options;\n     if (errorManager \u003d\u003d null) {\n         if (outStream \u003d\u003d null) {\n             setErrorManager(new LoggerErrorManager(createMessageFormatter(), logger));\n         } else {\n             PrintStreamErrorManager printer \u003d new PrintStreamErrorManager(createMessageFormatter(), outStream);\n             printer.setSummaryDetailLevel(options.summaryDetailLevel);\n             setErrorManager(printer);\n         }\n     }\n+    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n+        options.checkTypes \u003d true;\n+    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n+        options.checkTypes \u003d false;\n+    } else if (!options.checkTypes) {\n+        options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR), CheckLevel.OFF);\n+    }\n+    if (options.checkGlobalThisLevel.isOn()) {\n+        options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, options.checkGlobalThisLevel);\n+    }\n     List\u003cWarningsGuard\u003e guards \u003d Lists.newArrayList();\n     guards.add(new SuppressDocWarningsGuard(getDiagnosticGroups().getRegisteredGroups()));\n     WarningsGuard warningsGuard \u003d options.getWarningsGuard();\n     if (warningsGuard !\u003d null) {\n         guards.add(options.getWarningsGuard());\n     }\n     if (!options.checkSymbols \u0026\u0026 (warningsGuard \u003d\u003d null || !warningsGuard.disables(DiagnosticGroups.CHECK_VARIABLES))) {\n         guards.add(new DiagnosticGroupWarningsGuard(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n     }\n-    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n-        options.checkTypes \u003d true;\n-    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n-        options.checkTypes \u003d false;\n-    } else if (!options.checkTypes) {\n-        guards.add(new DiagnosticGroupWarningsGuard(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR), CheckLevel.OFF));\n-    }\n     this.warningsGuard \u003d new ComposeWarningsGuard(guards);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5709ec1d0bbe5b7726a14d06f7eab9c35150e314": {
      "type": "Ybodychange",
      "commitMessage": "\nPut bad type annotations behind a diagnostic group, so that they\naren\u0027t reported if type-checking isn\u0027t on.\n\nR\u003dacleung\nDELTA\u003d300  (110 added, 11 deleted, 179 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d780\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@857 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/7/11, 12:59 PM",
      "commitName": "5709ec1d0bbe5b7726a14d06f7eab9c35150e314",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "3/4/11, 4:48 PM",
      "commitNameOld": "82d3c01785f8b25113ca3fd7cc8b37da5d8a44a4",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 2.84,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "public void initOptions(CompilerOptions options) {\n    this.options \u003d options;\n    if (errorManager \u003d\u003d null) {\n        if (outStream \u003d\u003d null) {\n            setErrorManager(new LoggerErrorManager(createMessageFormatter(), logger));\n        } else {\n            PrintStreamErrorManager printer \u003d new PrintStreamErrorManager(createMessageFormatter(), outStream);\n            printer.setSummaryDetailLevel(options.summaryDetailLevel);\n            setErrorManager(printer);\n        }\n    }\n    List\u003cWarningsGuard\u003e guards \u003d Lists.newArrayList();\n    guards.add(new SuppressDocWarningsGuard(getDiagnosticGroups().getRegisteredGroups()));\n    WarningsGuard warningsGuard \u003d options.getWarningsGuard();\n    if (warningsGuard !\u003d null) {\n        guards.add(options.getWarningsGuard());\n    }\n    if (!options.checkSymbols \u0026\u0026 (warningsGuard \u003d\u003d null || !warningsGuard.disables(DiagnosticGroups.CHECK_VARIABLES))) {\n        guards.add(new DiagnosticGroupWarningsGuard(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n    }\n    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n        options.checkTypes \u003d true;\n    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n        options.checkTypes \u003d false;\n    } else if (!options.checkTypes) {\n        guards.add(new DiagnosticGroupWarningsGuard(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR), CheckLevel.OFF));\n    }\n    this.warningsGuard \u003d new ComposeWarningsGuard(guards);\n}",
      "path": "src/com/google/javascript/jscomp/Compiler.java",
      "functionStartLine": 221,
      "functionName": "initOptions",
      "functionAnnotation": "",
      "functionDoc": "Initialize the compiler options. Only necessary if you\u0027re not doing\na normal compile() job.\n",
      "diff": "@@ -1,22 +1,29 @@\n public void initOptions(CompilerOptions options) {\n     this.options \u003d options;\n     if (errorManager \u003d\u003d null) {\n         if (outStream \u003d\u003d null) {\n             setErrorManager(new LoggerErrorManager(createMessageFormatter(), logger));\n         } else {\n             PrintStreamErrorManager printer \u003d new PrintStreamErrorManager(createMessageFormatter(), outStream);\n             printer.setSummaryDetailLevel(options.summaryDetailLevel);\n             setErrorManager(printer);\n         }\n     }\n     List\u003cWarningsGuard\u003e guards \u003d Lists.newArrayList();\n     guards.add(new SuppressDocWarningsGuard(getDiagnosticGroups().getRegisteredGroups()));\n     WarningsGuard warningsGuard \u003d options.getWarningsGuard();\n     if (warningsGuard !\u003d null) {\n         guards.add(options.getWarningsGuard());\n     }\n     if (!options.checkSymbols \u0026\u0026 (warningsGuard \u003d\u003d null || !warningsGuard.disables(DiagnosticGroups.CHECK_VARIABLES))) {\n         guards.add(new DiagnosticGroupWarningsGuard(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n     }\n+    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n+        options.checkTypes \u003d true;\n+    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n+        options.checkTypes \u003d false;\n+    } else if (!options.checkTypes) {\n+        guards.add(new DiagnosticGroupWarningsGuard(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR), CheckLevel.OFF));\n+    }\n     this.warningsGuard \u003d new ComposeWarningsGuard(guards);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1004aa6826a19fcb9e6a33b029b492a100fa081b": {
      "type": "Ybodychange",
      "commitMessage": "\nMake all named warning groups suppressable.\nThe real radical change here is that in order to do this,\nwe need to tell the compiler which diagnostic groups it\u0027s running\nwith, which requires a bit of clean-up in the compiler\u0027s\nbootstrapping sequence.\n\nR\u003djohnlenz\nDELTA\u003d94  (74 added, 14 deleted, 6 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d114010\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@358 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/12/10, 6:27 PM",
      "commitName": "1004aa6826a19fcb9e6a33b029b492a100fa081b",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "8/12/10, 6:02 PM",
      "commitNameOld": "15acafb00636f99295b394145b9b60a5e624ddfa",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public void initOptions(CompilerOptions options) {\n    this.options \u003d options;\n    if (errorManager \u003d\u003d null) {\n        if (outStream \u003d\u003d null) {\n            setErrorManager(new LoggerErrorManager(createMessageFormatter(), logger));\n        } else {\n            PrintStreamErrorManager printer \u003d new PrintStreamErrorManager(createMessageFormatter(), outStream);\n            printer.setSummaryDetailLevel(options.summaryDetailLevel);\n            setErrorManager(printer);\n        }\n    }\n    List\u003cWarningsGuard\u003e guards \u003d Lists.newArrayList();\n    guards.add(new SuppressDocWarningsGuard(getDiagnosticGroups().getRegisteredGroups()));\n    WarningsGuard warningsGuard \u003d options.getWarningsGuard();\n    if (warningsGuard !\u003d null) {\n        guards.add(options.getWarningsGuard());\n    }\n    if (!options.checkSymbols \u0026\u0026 (warningsGuard \u003d\u003d null || !warningsGuard.disables(DiagnosticGroups.CHECK_VARIABLES))) {\n        guards.add(new DiagnosticGroupWarningsGuard(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n    }\n    this.warningsGuard \u003d new ComposeWarningsGuard(guards);\n}",
      "path": "src/com/google/javascript/jscomp/Compiler.java",
      "functionStartLine": 217,
      "functionName": "initOptions",
      "functionAnnotation": "",
      "functionDoc": "Initialize the compiler options. Only necessary if you\u0027re not doing\na normal compile() job.\n",
      "diff": "@@ -1,12 +1,22 @@\n public void initOptions(CompilerOptions options) {\n     this.options \u003d options;\n     if (errorManager \u003d\u003d null) {\n         if (outStream \u003d\u003d null) {\n             setErrorManager(new LoggerErrorManager(createMessageFormatter(), logger));\n         } else {\n             PrintStreamErrorManager printer \u003d new PrintStreamErrorManager(createMessageFormatter(), outStream);\n             printer.setSummaryDetailLevel(options.summaryDetailLevel);\n             setErrorManager(printer);\n         }\n     }\n+    List\u003cWarningsGuard\u003e guards \u003d Lists.newArrayList();\n+    guards.add(new SuppressDocWarningsGuard(getDiagnosticGroups().getRegisteredGroups()));\n+    WarningsGuard warningsGuard \u003d options.getWarningsGuard();\n+    if (warningsGuard !\u003d null) {\n+        guards.add(options.getWarningsGuard());\n+    }\n+    if (!options.checkSymbols \u0026\u0026 (warningsGuard \u003d\u003d null || !warningsGuard.disables(DiagnosticGroups.CHECK_VARIABLES))) {\n+        guards.add(new DiagnosticGroupWarningsGuard(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n+    }\n+    this.warningsGuard \u003d new ComposeWarningsGuard(guards);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a70a7c599e53a7752cf4b9e6e82b4408c3c4c04b": {
      "type": "Ybodychange",
      "commitMessage": "fix silly 2004-era naming conventions (Nick)\nR\u003djohn\nDELTA\u003d134  (0 added, 0 deleted, 134 changed)\n\nInsert a place holder file for any empty modules. (Alan)\nR\u003dnick\nDELTA\u003d53  (46 added, 6 deleted, 1 changed)\n\nMaps API extern update.\n(Contributed by Chad Killingsworth)\nFixes issue 121\nDELTA\u003d86  (48 added, 16 deleted, 22 changed)\n\n\nGoogle Loader API externs.\n(Contributed by Chad Killingsworth)\nFixes issue 126\nDELTA\u003d54  (54 added, 0 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@149 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/22/10, 10:51 PM",
      "commitName": "a70a7c599e53a7752cf4b9e6e82b4408c3c4c04b",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "3/22/10, 3:55 PM",
      "commitNameOld": "b347ce3a71e23a4ab92dc0a6c07d43e2f497c953",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 0.29,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public void initOptions(CompilerOptions options) {\n    this.options \u003d options;\n    if (errorManager \u003d\u003d null) {\n        if (outStream \u003d\u003d null) {\n            setErrorManager(new LoggerErrorManager(createMessageFormatter(), logger));\n        } else {\n            PrintStreamErrorManager printer \u003d new PrintStreamErrorManager(createMessageFormatter(), outStream);\n            printer.setSummaryDetailLevel(options.summaryDetailLevel);\n            setErrorManager(printer);\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/Compiler.java",
      "functionStartLine": 220,
      "functionName": "initOptions",
      "functionAnnotation": "",
      "functionDoc": "Initialize the compiler options. Only necessary if you\u0027re not doing\na normal compile() job.\n",
      "diff": "@@ -1,12 +1,12 @@\n public void initOptions(CompilerOptions options) {\n-    options_ \u003d options;\n+    this.options \u003d options;\n     if (errorManager \u003d\u003d null) {\n         if (outStream \u003d\u003d null) {\n-            setErrorManager(new LoggerErrorManager(createMessageFormatter(), logger_));\n+            setErrorManager(new LoggerErrorManager(createMessageFormatter(), logger));\n         } else {\n             PrintStreamErrorManager printer \u003d new PrintStreamErrorManager(createMessageFormatter(), outStream);\n-            printer.setSummaryDetailLevel(options_.summaryDetailLevel);\n+            printer.setSummaryDetailLevel(options.summaryDetailLevel);\n             setErrorManager(printer);\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6f2539acd3c37bd7f0d031b43364f75a5cd6d5f7": {
      "type": "Yintroduced",
      "commitMessage": "fix some code that was initializing options from flags twice.\n(and thus re-parsing the js messages bundles)\nas it turns out, there are a lot of ways to not initialize options. (Nick)\nR\u003djohn\nDELTA\u003d99  (72 added, 24 deleted, 3 changed)\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@147 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/22/10, 10:41 AM",
      "commitName": "6f2539acd3c37bd7f0d031b43364f75a5cd6d5f7",
      "commitAuthor": "Nicholas.J.Santos",
      "diff": "@@ -0,0 +1,12 @@\n+public void initOptions(CompilerOptions options) {\n+    options_ \u003d options;\n+    if (errorManager \u003d\u003d null) {\n+        if (outStream \u003d\u003d null) {\n+            setErrorManager(new LoggerErrorManager(createMessageFormatter(), logger_));\n+        } else {\n+            PrintStreamErrorManager printer \u003d new PrintStreamErrorManager(createMessageFormatter(), outStream);\n+            printer.setSummaryDetailLevel(options_.summaryDetailLevel);\n+            setErrorManager(printer);\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "public void initOptions(CompilerOptions options) {\n    options_ \u003d options;\n    if (errorManager \u003d\u003d null) {\n        if (outStream \u003d\u003d null) {\n            setErrorManager(new LoggerErrorManager(createMessageFormatter(), logger_));\n        } else {\n            PrintStreamErrorManager printer \u003d new PrintStreamErrorManager(createMessageFormatter(), outStream);\n            printer.setSummaryDetailLevel(options_.summaryDetailLevel);\n            setErrorManager(printer);\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/Compiler.java",
      "functionStartLine": 220,
      "functionName": "initOptions",
      "functionAnnotation": "",
      "functionDoc": "Initialize the compiler options. Only necessary if you\u0027re not doing\na normal compile() job.\n"
    }
  }
}