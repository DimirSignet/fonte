{
  "origin": "codeshovel",
  "repositoryName": "Closure-74b",
  "repositoryPath": "/tmp/Closure-74b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PeepholeFoldConstants.java",
  "functionName": "tryFoldUnaryOperator",
  "functionId": "tryFoldUnaryOperator___n-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 325,
  "functionEndLine": 416,
  "numCommitsSeen": 40,
  "timeTaken": 4400,
  "changeHistory": [
    "86a7d25f3cc1177f35dc6480260fb807912c03fa",
    "e7ce7f710e1bf297f1a4258b53f22f550fc1f2e3",
    "bb877849306e221202b283f9b8eb3873d7bdc9ae",
    "48701cc70fde194c05ecd008fc1015b9d82921d1",
    "66527dd399f7142edc491037b4488b158073ae55",
    "9de5e9b4671773bb3f2d5932e57c1b4186b9b777",
    "9925370292834ea846727f1f9db76af0d40261df",
    "c9e89727dc8063d087d28e42629606f4fd74a6e5"
  ],
  "changeHistoryShort": {
    "86a7d25f3cc1177f35dc6480260fb807912c03fa": "Ybodychange",
    "e7ce7f710e1bf297f1a4258b53f22f550fc1f2e3": "Ybodychange",
    "bb877849306e221202b283f9b8eb3873d7bdc9ae": "Ybodychange",
    "48701cc70fde194c05ecd008fc1015b9d82921d1": "Ybodychange",
    "66527dd399f7142edc491037b4488b158073ae55": "Ybodychange",
    "9de5e9b4671773bb3f2d5932e57c1b4186b9b777": "Yformatchange",
    "9925370292834ea846727f1f9db76af0d40261df": "Yformatchange",
    "c9e89727dc8063d087d28e42629606f4fd74a6e5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "86a7d25f3cc1177f35dc6480260fb807912c03fa": {
      "type": "Ybodychange",
      "commitMessage": "\nFix bad folding of expressions containing object and array literals with side-effects.\n\nR\u003dnicksantos\nDELTA\u003d144  (94 added, 0 deleted, 50 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1088\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@941 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/25/11, 4:27 PM",
      "commitName": "86a7d25f3cc1177f35dc6480260fb807912c03fa",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "3/17/11, 11:12 AM",
      "commitNameOld": "25829b0395164533782d608399096803321225a7",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 8.22,
      "commitsBetweenForRepo": 35,
      "commitsBetweenForFile": 1,
      "actualSource": "private Node tryFoldUnaryOperator(Node n) {\n    Preconditions.checkState(n.hasOneChild());\n    Node left \u003d n.getFirstChild();\n    Node parent \u003d n.getParent();\n    if (left \u003d\u003d null) {\n        return n;\n    }\n    TernaryValue leftVal \u003d NodeUtil.getPureBooleanValue(left);\n    if (leftVal \u003d\u003d TernaryValue.UNKNOWN) {\n        return n;\n    }\n    switch(n.getType()) {\n        case Token.NOT:\n            if (left.getType() \u003d\u003d Token.NUMBER) {\n                double numValue \u003d left.getDouble();\n                if (numValue \u003d\u003d 0 || numValue \u003d\u003d 1) {\n                    return n;\n                }\n            }\n            int result \u003d leftVal.toBoolean(true) ? Token.FALSE : Token.TRUE;\n            Node replacementNode \u003d new Node(result);\n            parent.replaceChild(n, replacementNode);\n            reportCodeChange();\n            return replacementNode;\n        case Token.POS:\n            if (NodeUtil.isNumericResult(left)) {\n                parent.replaceChild(n, left.detachFromParent());\n                reportCodeChange();\n                return left;\n            }\n            return n;\n        case Token.NEG:\n            try {\n                if (left.getType() \u003d\u003d Token.NAME) {\n                    if (left.getString().equals(\"Infinity\")) {\n                        return n;\n                    } else if (left.getString().equals(\"NaN\")) {\n                        n.removeChild(left);\n                        parent.replaceChild(n, left);\n                        reportCodeChange();\n                        return left;\n                    }\n                }\n                double negNum \u003d -left.getDouble();\n                Node negNumNode \u003d Node.newNumber(negNum);\n                parent.replaceChild(n, negNumNode);\n                reportCodeChange();\n                return negNumNode;\n            } catch (UnsupportedOperationException ex) {\n                error(NEGATING_A_NON_NUMBER_ERROR, left);\n                return n;\n            }\n        case Token.BITNOT:\n            try {\n                double val \u003d left.getDouble();\n                if (val \u003e\u003d Integer.MIN_VALUE \u0026\u0026 val \u003c\u003d Integer.MAX_VALUE) {\n                    int intVal \u003d (int) val;\n                    if (intVal \u003d\u003d val) {\n                        Node notIntValNode \u003d Node.newNumber(~intVal);\n                        parent.replaceChild(n, notIntValNode);\n                        reportCodeChange();\n                        return notIntValNode;\n                    } else {\n                        error(FRACTIONAL_BITWISE_OPERAND, left);\n                        return n;\n                    }\n                } else {\n                    error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n                    return n;\n                }\n            } catch (UnsupportedOperationException ex) {\n                error(NEGATING_A_NON_NUMBER_ERROR, left);\n                return n;\n            }\n        default:\n            return n;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
      "functionStartLine": 325,
      "functionName": "tryFoldUnaryOperator",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,78 +1,78 @@\n private Node tryFoldUnaryOperator(Node n) {\n     Preconditions.checkState(n.hasOneChild());\n     Node left \u003d n.getFirstChild();\n     Node parent \u003d n.getParent();\n     if (left \u003d\u003d null) {\n         return n;\n     }\n-    TernaryValue leftVal \u003d NodeUtil.getBooleanValue(left);\n+    TernaryValue leftVal \u003d NodeUtil.getPureBooleanValue(left);\n     if (leftVal \u003d\u003d TernaryValue.UNKNOWN) {\n         return n;\n     }\n     switch(n.getType()) {\n         case Token.NOT:\n             if (left.getType() \u003d\u003d Token.NUMBER) {\n                 double numValue \u003d left.getDouble();\n                 if (numValue \u003d\u003d 0 || numValue \u003d\u003d 1) {\n                     return n;\n                 }\n             }\n             int result \u003d leftVal.toBoolean(true) ? Token.FALSE : Token.TRUE;\n             Node replacementNode \u003d new Node(result);\n             parent.replaceChild(n, replacementNode);\n             reportCodeChange();\n             return replacementNode;\n         case Token.POS:\n             if (NodeUtil.isNumericResult(left)) {\n                 parent.replaceChild(n, left.detachFromParent());\n                 reportCodeChange();\n                 return left;\n             }\n             return n;\n         case Token.NEG:\n             try {\n                 if (left.getType() \u003d\u003d Token.NAME) {\n                     if (left.getString().equals(\"Infinity\")) {\n                         return n;\n                     } else if (left.getString().equals(\"NaN\")) {\n                         n.removeChild(left);\n                         parent.replaceChild(n, left);\n                         reportCodeChange();\n                         return left;\n                     }\n                 }\n                 double negNum \u003d -left.getDouble();\n                 Node negNumNode \u003d Node.newNumber(negNum);\n                 parent.replaceChild(n, negNumNode);\n                 reportCodeChange();\n                 return negNumNode;\n             } catch (UnsupportedOperationException ex) {\n                 error(NEGATING_A_NON_NUMBER_ERROR, left);\n                 return n;\n             }\n         case Token.BITNOT:\n             try {\n                 double val \u003d left.getDouble();\n                 if (val \u003e\u003d Integer.MIN_VALUE \u0026\u0026 val \u003c\u003d Integer.MAX_VALUE) {\n                     int intVal \u003d (int) val;\n                     if (intVal \u003d\u003d val) {\n                         Node notIntValNode \u003d Node.newNumber(~intVal);\n                         parent.replaceChild(n, notIntValNode);\n                         reportCodeChange();\n                         return notIntValNode;\n                     } else {\n                         error(FRACTIONAL_BITWISE_OPERAND, left);\n                         return n;\n                     }\n                 } else {\n                     error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n                     return n;\n                 }\n             } catch (UnsupportedOperationException ex) {\n                 error(NEGATING_A_NON_NUMBER_ERROR, left);\n                 return n;\n             }\n         default:\n             return n;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e7ce7f710e1bf297f1a4258b53f22f550fc1f2e3": {
      "type": "Ybodychange",
      "commitMessage": "\nUse !0 and !1 for true and false.\n\nR\u003djohnlenz\nDELTA\u003d97  (81 added, 0 deleted, 16 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d500\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@775 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/10/11, 4:32 PM",
      "commitName": "e7ce7f710e1bf297f1a4258b53f22f550fc1f2e3",
      "commitAuthor": "acleung@google.com",
      "commitDateOld": "2/7/11, 2:59 PM",
      "commitNameOld": "1a7fbd18b47c102152869c3b046b65ff0f12fc43",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 3.06,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "private Node tryFoldUnaryOperator(Node n) {\n    Preconditions.checkState(n.hasOneChild());\n    Node left \u003d n.getFirstChild();\n    Node parent \u003d n.getParent();\n    if (left \u003d\u003d null) {\n        return n;\n    }\n    TernaryValue leftVal \u003d NodeUtil.getBooleanValue(left);\n    if (leftVal \u003d\u003d TernaryValue.UNKNOWN) {\n        return n;\n    }\n    switch(n.getType()) {\n        case Token.NOT:\n            if (left.getType() \u003d\u003d Token.NUMBER) {\n                double numValue \u003d left.getDouble();\n                if (numValue \u003d\u003d 0 || numValue \u003d\u003d 1) {\n                    return n;\n                }\n            }\n            int result \u003d leftVal.toBoolean(true) ? Token.FALSE : Token.TRUE;\n            Node replacementNode \u003d new Node(result);\n            parent.replaceChild(n, replacementNode);\n            reportCodeChange();\n            return replacementNode;\n        case Token.POS:\n            if (NodeUtil.isNumericResult(left)) {\n                parent.replaceChild(n, left.detachFromParent());\n                reportCodeChange();\n                return left;\n            }\n            return n;\n        case Token.NEG:\n            try {\n                if (left.getType() \u003d\u003d Token.NAME) {\n                    if (left.getString().equals(\"Infinity\")) {\n                        return n;\n                    } else if (left.getString().equals(\"NaN\")) {\n                        n.removeChild(left);\n                        parent.replaceChild(n, left);\n                        reportCodeChange();\n                        return left;\n                    }\n                }\n                double negNum \u003d -left.getDouble();\n                Node negNumNode \u003d Node.newNumber(negNum);\n                parent.replaceChild(n, negNumNode);\n                reportCodeChange();\n                return negNumNode;\n            } catch (UnsupportedOperationException ex) {\n                error(NEGATING_A_NON_NUMBER_ERROR, left);\n                return n;\n            }\n        case Token.BITNOT:\n            try {\n                double val \u003d left.getDouble();\n                if (val \u003e\u003d Integer.MIN_VALUE \u0026\u0026 val \u003c\u003d Integer.MAX_VALUE) {\n                    int intVal \u003d (int) val;\n                    if (intVal \u003d\u003d val) {\n                        Node notIntValNode \u003d Node.newNumber(~intVal);\n                        parent.replaceChild(n, notIntValNode);\n                        reportCodeChange();\n                        return notIntValNode;\n                    } else {\n                        error(FRACTIONAL_BITWISE_OPERAND, left);\n                        return n;\n                    }\n                } else {\n                    error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n                    return n;\n                }\n            } catch (UnsupportedOperationException ex) {\n                error(NEGATING_A_NON_NUMBER_ERROR, left);\n                return n;\n            }\n        default:\n            return n;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
      "functionStartLine": 311,
      "functionName": "tryFoldUnaryOperator",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,72 +1,78 @@\n private Node tryFoldUnaryOperator(Node n) {\n     Preconditions.checkState(n.hasOneChild());\n     Node left \u003d n.getFirstChild();\n     Node parent \u003d n.getParent();\n     if (left \u003d\u003d null) {\n         return n;\n     }\n     TernaryValue leftVal \u003d NodeUtil.getBooleanValue(left);\n     if (leftVal \u003d\u003d TernaryValue.UNKNOWN) {\n         return n;\n     }\n     switch(n.getType()) {\n         case Token.NOT:\n+            if (left.getType() \u003d\u003d Token.NUMBER) {\n+                double numValue \u003d left.getDouble();\n+                if (numValue \u003d\u003d 0 || numValue \u003d\u003d 1) {\n+                    return n;\n+                }\n+            }\n             int result \u003d leftVal.toBoolean(true) ? Token.FALSE : Token.TRUE;\n             Node replacementNode \u003d new Node(result);\n             parent.replaceChild(n, replacementNode);\n             reportCodeChange();\n             return replacementNode;\n         case Token.POS:\n             if (NodeUtil.isNumericResult(left)) {\n                 parent.replaceChild(n, left.detachFromParent());\n                 reportCodeChange();\n                 return left;\n             }\n             return n;\n         case Token.NEG:\n             try {\n                 if (left.getType() \u003d\u003d Token.NAME) {\n                     if (left.getString().equals(\"Infinity\")) {\n                         return n;\n                     } else if (left.getString().equals(\"NaN\")) {\n                         n.removeChild(left);\n                         parent.replaceChild(n, left);\n                         reportCodeChange();\n                         return left;\n                     }\n                 }\n                 double negNum \u003d -left.getDouble();\n                 Node negNumNode \u003d Node.newNumber(negNum);\n                 parent.replaceChild(n, negNumNode);\n                 reportCodeChange();\n                 return negNumNode;\n             } catch (UnsupportedOperationException ex) {\n                 error(NEGATING_A_NON_NUMBER_ERROR, left);\n                 return n;\n             }\n         case Token.BITNOT:\n             try {\n                 double val \u003d left.getDouble();\n                 if (val \u003e\u003d Integer.MIN_VALUE \u0026\u0026 val \u003c\u003d Integer.MAX_VALUE) {\n                     int intVal \u003d (int) val;\n                     if (intVal \u003d\u003d val) {\n                         Node notIntValNode \u003d Node.newNumber(~intVal);\n                         parent.replaceChild(n, notIntValNode);\n                         reportCodeChange();\n                         return notIntValNode;\n                     } else {\n                         error(FRACTIONAL_BITWISE_OPERAND, left);\n                         return n;\n                     }\n                 } else {\n                     error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n                     return n;\n                 }\n             } catch (UnsupportedOperationException ex) {\n                 error(NEGATING_A_NON_NUMBER_ERROR, left);\n                 return n;\n             }\n         default:\n             return n;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bb877849306e221202b283f9b8eb3873d7bdc9ae": {
      "type": "Ybodychange",
      "commitMessage": "\nMore constant folding tweaks.\n- Remove extraneous unary \"+\"\n- Convert number to integer for BIT ops (not shift)\n- reduce literals in numberic contexts\n\nR\u003dnicksantos\nDELTA\u003d275  (225 added, 30 deleted, 20 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d319\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@712 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/19/11, 3:22 PM",
      "commitName": "bb877849306e221202b283f9b8eb3873d7bdc9ae",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "1/13/11, 1:33 PM",
      "commitNameOld": "e6e661b9ad751a51132f6de7e46be94d86fb3557",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 6.08,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "private Node tryFoldUnaryOperator(Node n) {\n    Preconditions.checkState(n.hasOneChild());\n    Node left \u003d n.getFirstChild();\n    Node parent \u003d n.getParent();\n    if (left \u003d\u003d null) {\n        return n;\n    }\n    TernaryValue leftVal \u003d NodeUtil.getBooleanValue(left);\n    if (leftVal \u003d\u003d TernaryValue.UNKNOWN) {\n        return n;\n    }\n    switch(n.getType()) {\n        case Token.NOT:\n            int result \u003d leftVal.toBoolean(true) ? Token.FALSE : Token.TRUE;\n            Node replacementNode \u003d new Node(result);\n            parent.replaceChild(n, replacementNode);\n            reportCodeChange();\n            return replacementNode;\n        case Token.POS:\n            if (NodeUtil.isNumericResult(left)) {\n                parent.replaceChild(n, left.detachFromParent());\n                reportCodeChange();\n                return left;\n            }\n            return n;\n        case Token.NEG:\n            try {\n                if (left.getType() \u003d\u003d Token.NAME) {\n                    if (left.getString().equals(\"Infinity\")) {\n                        return n;\n                    } else if (left.getString().equals(\"NaN\")) {\n                        n.removeChild(left);\n                        parent.replaceChild(n, left);\n                        reportCodeChange();\n                        return left;\n                    }\n                }\n                double negNum \u003d -left.getDouble();\n                Node negNumNode \u003d Node.newNumber(negNum);\n                parent.replaceChild(n, negNumNode);\n                reportCodeChange();\n                return negNumNode;\n            } catch (UnsupportedOperationException ex) {\n                error(NEGATING_A_NON_NUMBER_ERROR, left);\n                return n;\n            }\n        case Token.BITNOT:\n            try {\n                double val \u003d left.getDouble();\n                if (val \u003e\u003d Integer.MIN_VALUE \u0026\u0026 val \u003c\u003d Integer.MAX_VALUE) {\n                    int intVal \u003d (int) val;\n                    if (intVal \u003d\u003d val) {\n                        Node notIntValNode \u003d Node.newNumber(~intVal);\n                        parent.replaceChild(n, notIntValNode);\n                        reportCodeChange();\n                        return notIntValNode;\n                    } else {\n                        error(FRACTIONAL_BITWISE_OPERAND, left);\n                        return n;\n                    }\n                } else {\n                    error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n                    return n;\n                }\n            } catch (UnsupportedOperationException ex) {\n                error(NEGATING_A_NON_NUMBER_ERROR, left);\n                return n;\n            }\n        default:\n            return n;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
      "functionStartLine": 311,
      "functionName": "tryFoldUnaryOperator",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,65 +1,72 @@\n private Node tryFoldUnaryOperator(Node n) {\n     Preconditions.checkState(n.hasOneChild());\n     Node left \u003d n.getFirstChild();\n     Node parent \u003d n.getParent();\n     if (left \u003d\u003d null) {\n         return n;\n     }\n     TernaryValue leftVal \u003d NodeUtil.getBooleanValue(left);\n     if (leftVal \u003d\u003d TernaryValue.UNKNOWN) {\n         return n;\n     }\n     switch(n.getType()) {\n         case Token.NOT:\n             int result \u003d leftVal.toBoolean(true) ? Token.FALSE : Token.TRUE;\n             Node replacementNode \u003d new Node(result);\n             parent.replaceChild(n, replacementNode);\n             reportCodeChange();\n             return replacementNode;\n+        case Token.POS:\n+            if (NodeUtil.isNumericResult(left)) {\n+                parent.replaceChild(n, left.detachFromParent());\n+                reportCodeChange();\n+                return left;\n+            }\n+            return n;\n         case Token.NEG:\n             try {\n                 if (left.getType() \u003d\u003d Token.NAME) {\n                     if (left.getString().equals(\"Infinity\")) {\n                         return n;\n                     } else if (left.getString().equals(\"NaN\")) {\n                         n.removeChild(left);\n                         parent.replaceChild(n, left);\n                         reportCodeChange();\n                         return left;\n                     }\n                 }\n                 double negNum \u003d -left.getDouble();\n                 Node negNumNode \u003d Node.newNumber(negNum);\n                 parent.replaceChild(n, negNumNode);\n                 reportCodeChange();\n                 return negNumNode;\n             } catch (UnsupportedOperationException ex) {\n                 error(NEGATING_A_NON_NUMBER_ERROR, left);\n                 return n;\n             }\n         case Token.BITNOT:\n             try {\n                 double val \u003d left.getDouble();\n                 if (val \u003e\u003d Integer.MIN_VALUE \u0026\u0026 val \u003c\u003d Integer.MAX_VALUE) {\n                     int intVal \u003d (int) val;\n                     if (intVal \u003d\u003d val) {\n                         Node notIntValNode \u003d Node.newNumber(~intVal);\n                         parent.replaceChild(n, notIntValNode);\n                         reportCodeChange();\n                         return notIntValNode;\n                     } else {\n                         error(FRACTIONAL_BITWISE_OPERAND, left);\n                         return n;\n                     }\n                 } else {\n                     error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n                     return n;\n                 }\n             } catch (UnsupportedOperationException ex) {\n                 error(NEGATING_A_NON_NUMBER_ERROR, left);\n                 return n;\n             }\n         default:\n             return n;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "48701cc70fde194c05ecd008fc1015b9d82921d1": {
      "type": "Ybodychange",
      "commitMessage": "\n- Generalize unused operation removal and remove a couple of special cases (HOOK, NOT).\n- Add handling for other AST locations that can have unused ops removed (COMMA lhs and FOR increment expressions).\n\nR\u003dacleung\nDELTA\u003d358  (260 added, 80 deleted, 18 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d197245\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@390 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/27/10, 3:09 PM",
      "commitName": "48701cc70fde194c05ecd008fc1015b9d82921d1",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "8/12/10, 12:04 PM",
      "commitNameOld": "66527dd399f7142edc491037b4488b158073ae55",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 15.13,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "actualSource": "private Node tryFoldUnaryOperator(Node n) {\n    Preconditions.checkState(n.hasOneChild());\n    Node left \u003d n.getFirstChild();\n    Node parent \u003d n.getParent();\n    if (left \u003d\u003d null) {\n        return n;\n    }\n    TernaryValue leftVal \u003d NodeUtil.getBooleanValue(left);\n    if (leftVal \u003d\u003d TernaryValue.UNKNOWN) {\n        return n;\n    }\n    switch(n.getType()) {\n        case Token.NOT:\n            int result \u003d leftVal.toBoolean(true) ? Token.FALSE : Token.TRUE;\n            Node replacementNode \u003d new Node(result);\n            parent.replaceChild(n, replacementNode);\n            reportCodeChange();\n            return replacementNode;\n        case Token.NEG:\n            try {\n                if (left.getType() \u003d\u003d Token.NAME) {\n                    if (left.getString().equals(\"Infinity\")) {\n                        return n;\n                    } else if (left.getString().equals(\"NaN\")) {\n                        n.removeChild(left);\n                        parent.replaceChild(n, left);\n                        reportCodeChange();\n                        return left;\n                    }\n                }\n                double negNum \u003d -left.getDouble();\n                Node negNumNode \u003d Node.newNumber(negNum);\n                parent.replaceChild(n, negNumNode);\n                reportCodeChange();\n                return negNumNode;\n            } catch (UnsupportedOperationException ex) {\n                error(NEGATING_A_NON_NUMBER_ERROR, left);\n                return n;\n            }\n        case Token.BITNOT:\n            try {\n                double val \u003d left.getDouble();\n                if (val \u003e\u003d Integer.MIN_VALUE \u0026\u0026 val \u003c\u003d Integer.MAX_VALUE) {\n                    int intVal \u003d (int) val;\n                    if (intVal \u003d\u003d val) {\n                        Node notIntValNode \u003d Node.newNumber(~intVal);\n                        parent.replaceChild(n, notIntValNode);\n                        reportCodeChange();\n                        return notIntValNode;\n                    } else {\n                        error(FRACTIONAL_BITWISE_OPERAND, left);\n                        return n;\n                    }\n                } else {\n                    error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n                    return n;\n                }\n            } catch (UnsupportedOperationException ex) {\n                error(NEGATING_A_NON_NUMBER_ERROR, left);\n                return n;\n            }\n        default:\n            return n;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
      "functionStartLine": 208,
      "functionName": "tryFoldUnaryOperator",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,71 +1,65 @@\n private Node tryFoldUnaryOperator(Node n) {\n     Preconditions.checkState(n.hasOneChild());\n     Node left \u003d n.getFirstChild();\n     Node parent \u003d n.getParent();\n     if (left \u003d\u003d null) {\n         return n;\n     }\n-    if (NodeUtil.isExpressionNode(parent)) {\n-        Node replacement \u003d n.removeFirstChild();\n-        parent.replaceChild(n, replacement);\n-        reportCodeChange();\n-        return replacement;\n-    }\n     TernaryValue leftVal \u003d NodeUtil.getBooleanValue(left);\n     if (leftVal \u003d\u003d TernaryValue.UNKNOWN) {\n         return n;\n     }\n     switch(n.getType()) {\n         case Token.NOT:\n             int result \u003d leftVal.toBoolean(true) ? Token.FALSE : Token.TRUE;\n             Node replacementNode \u003d new Node(result);\n             parent.replaceChild(n, replacementNode);\n             reportCodeChange();\n             return replacementNode;\n         case Token.NEG:\n             try {\n                 if (left.getType() \u003d\u003d Token.NAME) {\n                     if (left.getString().equals(\"Infinity\")) {\n                         return n;\n                     } else if (left.getString().equals(\"NaN\")) {\n                         n.removeChild(left);\n                         parent.replaceChild(n, left);\n                         reportCodeChange();\n                         return left;\n                     }\n                 }\n                 double negNum \u003d -left.getDouble();\n                 Node negNumNode \u003d Node.newNumber(negNum);\n                 parent.replaceChild(n, negNumNode);\n                 reportCodeChange();\n                 return negNumNode;\n             } catch (UnsupportedOperationException ex) {\n                 error(NEGATING_A_NON_NUMBER_ERROR, left);\n                 return n;\n             }\n         case Token.BITNOT:\n             try {\n                 double val \u003d left.getDouble();\n                 if (val \u003e\u003d Integer.MIN_VALUE \u0026\u0026 val \u003c\u003d Integer.MAX_VALUE) {\n                     int intVal \u003d (int) val;\n                     if (intVal \u003d\u003d val) {\n                         Node notIntValNode \u003d Node.newNumber(~intVal);\n                         parent.replaceChild(n, notIntValNode);\n                         reportCodeChange();\n                         return notIntValNode;\n                     } else {\n                         error(FRACTIONAL_BITWISE_OPERAND, left);\n                         return n;\n                     }\n                 } else {\n                     error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n                     return n;\n                 }\n             } catch (UnsupportedOperationException ex) {\n                 error(NEGATING_A_NON_NUMBER_ERROR, left);\n                 return n;\n             }\n         default:\n             return n;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "66527dd399f7142edc491037b4488b158073ae55": {
      "type": "Ybodychange",
      "commitMessage": "\nFix needed PeepholeRemoveDeadCode to fix the Calendar builde.\n\nR\u003ddcc\nDELTA\u003d330  (161 added, 96 deleted, 73 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d103004\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@354 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/12/10, 12:04 PM",
      "commitName": "66527dd399f7142edc491037b4488b158073ae55",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "8/12/10, 6:02 PM",
      "commitNameOld": "15acafb00636f99295b394145b9b60a5e624ddfa",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": -0.25,
      "commitsBetweenForRepo": 0,
      "commitsBetweenForFile": 0,
      "actualSource": "private Node tryFoldUnaryOperator(Node n) {\n    Preconditions.checkState(n.hasOneChild());\n    Node left \u003d n.getFirstChild();\n    Node parent \u003d n.getParent();\n    if (left \u003d\u003d null) {\n        return n;\n    }\n    if (NodeUtil.isExpressionNode(parent)) {\n        Node replacement \u003d n.removeFirstChild();\n        parent.replaceChild(n, replacement);\n        reportCodeChange();\n        return replacement;\n    }\n    TernaryValue leftVal \u003d NodeUtil.getBooleanValue(left);\n    if (leftVal \u003d\u003d TernaryValue.UNKNOWN) {\n        return n;\n    }\n    switch(n.getType()) {\n        case Token.NOT:\n            int result \u003d leftVal.toBoolean(true) ? Token.FALSE : Token.TRUE;\n            Node replacementNode \u003d new Node(result);\n            parent.replaceChild(n, replacementNode);\n            reportCodeChange();\n            return replacementNode;\n        case Token.NEG:\n            try {\n                if (left.getType() \u003d\u003d Token.NAME) {\n                    if (left.getString().equals(\"Infinity\")) {\n                        return n;\n                    } else if (left.getString().equals(\"NaN\")) {\n                        n.removeChild(left);\n                        parent.replaceChild(n, left);\n                        reportCodeChange();\n                        return left;\n                    }\n                }\n                double negNum \u003d -left.getDouble();\n                Node negNumNode \u003d Node.newNumber(negNum);\n                parent.replaceChild(n, negNumNode);\n                reportCodeChange();\n                return negNumNode;\n            } catch (UnsupportedOperationException ex) {\n                error(NEGATING_A_NON_NUMBER_ERROR, left);\n                return n;\n            }\n        case Token.BITNOT:\n            try {\n                double val \u003d left.getDouble();\n                if (val \u003e\u003d Integer.MIN_VALUE \u0026\u0026 val \u003c\u003d Integer.MAX_VALUE) {\n                    int intVal \u003d (int) val;\n                    if (intVal \u003d\u003d val) {\n                        Node notIntValNode \u003d Node.newNumber(~intVal);\n                        parent.replaceChild(n, notIntValNode);\n                        reportCodeChange();\n                        return notIntValNode;\n                    } else {\n                        error(FRACTIONAL_BITWISE_OPERAND, left);\n                        return n;\n                    }\n                } else {\n                    error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n                    return n;\n                }\n            } catch (UnsupportedOperationException ex) {\n                error(NEGATING_A_NON_NUMBER_ERROR, left);\n                return n;\n            }\n        default:\n            return n;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
      "functionStartLine": 208,
      "functionName": "tryFoldUnaryOperator",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,70 +1,71 @@\n private Node tryFoldUnaryOperator(Node n) {\n     Preconditions.checkState(n.hasOneChild());\n     Node left \u003d n.getFirstChild();\n     Node parent \u003d n.getParent();\n     if (left \u003d\u003d null) {\n         return n;\n     }\n     if (NodeUtil.isExpressionNode(parent)) {\n-        parent.replaceChild(n, n.removeFirstChild());\n+        Node replacement \u003d n.removeFirstChild();\n+        parent.replaceChild(n, replacement);\n         reportCodeChange();\n-        return null;\n+        return replacement;\n     }\n     TernaryValue leftVal \u003d NodeUtil.getBooleanValue(left);\n     if (leftVal \u003d\u003d TernaryValue.UNKNOWN) {\n         return n;\n     }\n     switch(n.getType()) {\n         case Token.NOT:\n             int result \u003d leftVal.toBoolean(true) ? Token.FALSE : Token.TRUE;\n             Node replacementNode \u003d new Node(result);\n             parent.replaceChild(n, replacementNode);\n             reportCodeChange();\n             return replacementNode;\n         case Token.NEG:\n             try {\n                 if (left.getType() \u003d\u003d Token.NAME) {\n                     if (left.getString().equals(\"Infinity\")) {\n                         return n;\n                     } else if (left.getString().equals(\"NaN\")) {\n                         n.removeChild(left);\n                         parent.replaceChild(n, left);\n                         reportCodeChange();\n                         return left;\n                     }\n                 }\n                 double negNum \u003d -left.getDouble();\n                 Node negNumNode \u003d Node.newNumber(negNum);\n                 parent.replaceChild(n, negNumNode);\n                 reportCodeChange();\n                 return negNumNode;\n             } catch (UnsupportedOperationException ex) {\n                 error(NEGATING_A_NON_NUMBER_ERROR, left);\n                 return n;\n             }\n         case Token.BITNOT:\n             try {\n                 double val \u003d left.getDouble();\n                 if (val \u003e\u003d Integer.MIN_VALUE \u0026\u0026 val \u003c\u003d Integer.MAX_VALUE) {\n                     int intVal \u003d (int) val;\n                     if (intVal \u003d\u003d val) {\n                         Node notIntValNode \u003d Node.newNumber(~intVal);\n                         parent.replaceChild(n, notIntValNode);\n                         reportCodeChange();\n                         return notIntValNode;\n                     } else {\n                         error(FRACTIONAL_BITWISE_OPERAND, left);\n                         return n;\n                     }\n                 } else {\n                     error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n                     return n;\n                 }\n             } catch (UnsupportedOperationException ex) {\n                 error(NEGATING_A_NON_NUMBER_ERROR, left);\n                 return n;\n             }\n         default:\n             return n;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9de5e9b4671773bb3f2d5932e57c1b4186b9b777": {
      "type": "Yformatchange",
      "commitMessage": "\nChange on 2010/06/30 15:06:33 by johnlenz\n\n\tAdd a diagnostic group so that projects with weird externs can opt-out of the stricter extern checks.\n\n\tR\u003dnicksantos\n\tDELTA\u003d54  (52 added, 0 deleted, 2 changed)\n\nChange on 2010/06/30 17:56:51 by johnlenz\n\n\tRevert warning levels until after a release is put out to control them.\n\n\tR\u003dnicksantos\n\tDELTA\u003d4  (2 added, 0 deleted, 2 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d47002\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@260 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/1/10, 7:38 AM",
      "commitName": "9de5e9b4671773bb3f2d5932e57c1b4186b9b777",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "6/28/10, 5:30 PM",
      "commitNameOld": "9925370292834ea846727f1f9db76af0d40261df",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 2.59,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private Node tryFoldUnaryOperator(Node n) {\n    Preconditions.checkState(n.hasOneChild());\n    Node left \u003d n.getFirstChild();\n    Node parent \u003d n.getParent();\n    if (left \u003d\u003d null) {\n        return n;\n    }\n    if (NodeUtil.isExpressionNode(parent)) {\n        parent.replaceChild(n, n.removeFirstChild());\n        reportCodeChange();\n        return null;\n    }\n    TernaryValue leftVal \u003d NodeUtil.getBooleanValue(left);\n    if (leftVal \u003d\u003d TernaryValue.UNKNOWN) {\n        return n;\n    }\n    switch(n.getType()) {\n        case Token.NOT:\n            int result \u003d leftVal.toBoolean(true) ? Token.FALSE : Token.TRUE;\n            Node replacementNode \u003d new Node(result);\n            parent.replaceChild(n, replacementNode);\n            reportCodeChange();\n            return replacementNode;\n        case Token.NEG:\n            try {\n                if (left.getType() \u003d\u003d Token.NAME) {\n                    if (left.getString().equals(\"Infinity\")) {\n                        return n;\n                    } else if (left.getString().equals(\"NaN\")) {\n                        n.removeChild(left);\n                        parent.replaceChild(n, left);\n                        reportCodeChange();\n                        return left;\n                    }\n                }\n                double negNum \u003d -left.getDouble();\n                Node negNumNode \u003d Node.newNumber(negNum);\n                parent.replaceChild(n, negNumNode);\n                reportCodeChange();\n                return negNumNode;\n            } catch (UnsupportedOperationException ex) {\n                error(NEGATING_A_NON_NUMBER_ERROR, left);\n                return n;\n            }\n        case Token.BITNOT:\n            try {\n                double val \u003d left.getDouble();\n                if (val \u003e\u003d Integer.MIN_VALUE \u0026\u0026 val \u003c\u003d Integer.MAX_VALUE) {\n                    int intVal \u003d (int) val;\n                    if (intVal \u003d\u003d val) {\n                        Node notIntValNode \u003d Node.newNumber(~intVal);\n                        parent.replaceChild(n, notIntValNode);\n                        reportCodeChange();\n                        return notIntValNode;\n                    } else {\n                        error(FRACTIONAL_BITWISE_OPERAND, left);\n                        return n;\n                    }\n                } else {\n                    error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n                    return n;\n                }\n            } catch (UnsupportedOperationException ex) {\n                error(NEGATING_A_NON_NUMBER_ERROR, left);\n                return n;\n            }\n        default:\n            return n;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
      "functionStartLine": 202,
      "functionName": "tryFoldUnaryOperator",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "9925370292834ea846727f1f9db76af0d40261df": {
      "type": "Yformatchange",
      "commitMessage": "\nChange on 2010/06/28 12:25:08 by dcc\n\n        Split up FoldConstants unit tests.\n\n        R\u003dacleung\n        DELTA\u003d2778  (1508 added, 1270 deleted, 0 changed)\n\nChange on 2010/06/28 15:47:46 by johnlenz\n\n        Prevent COMMAs with more than two children.\n\n        R\u003dacleung\n        DELTA\u003d1  (1 added, 0 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d44002\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@257 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/28/10, 5:30 PM",
      "commitName": "9925370292834ea846727f1f9db76af0d40261df",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "6/24/10, 7:36 PM",
      "commitNameOld": "83d03ec5c8b7c49896841a9386bec0f75d2697a5",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 3.91,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "private Node tryFoldUnaryOperator(Node n) {\n    Preconditions.checkState(n.hasOneChild());\n    Node left \u003d n.getFirstChild();\n    Node parent \u003d n.getParent();\n    if (left \u003d\u003d null) {\n        return n;\n    }\n    if (NodeUtil.isExpressionNode(parent)) {\n        parent.replaceChild(n, n.removeFirstChild());\n        reportCodeChange();\n        return null;\n    }\n    TernaryValue leftVal \u003d NodeUtil.getBooleanValue(left);\n    if (leftVal \u003d\u003d TernaryValue.UNKNOWN) {\n        return n;\n    }\n    switch(n.getType()) {\n        case Token.NOT:\n            int result \u003d leftVal.toBoolean(true) ? Token.FALSE : Token.TRUE;\n            Node replacementNode \u003d new Node(result);\n            parent.replaceChild(n, replacementNode);\n            reportCodeChange();\n            return replacementNode;\n        case Token.NEG:\n            try {\n                if (left.getType() \u003d\u003d Token.NAME) {\n                    if (left.getString().equals(\"Infinity\")) {\n                        return n;\n                    } else if (left.getString().equals(\"NaN\")) {\n                        n.removeChild(left);\n                        parent.replaceChild(n, left);\n                        reportCodeChange();\n                        return left;\n                    }\n                }\n                double negNum \u003d -left.getDouble();\n                Node negNumNode \u003d Node.newNumber(negNum);\n                parent.replaceChild(n, negNumNode);\n                reportCodeChange();\n                return negNumNode;\n            } catch (UnsupportedOperationException ex) {\n                error(NEGATING_A_NON_NUMBER_ERROR, left);\n                return n;\n            }\n        case Token.BITNOT:\n            try {\n                double val \u003d left.getDouble();\n                if (val \u003e\u003d Integer.MIN_VALUE \u0026\u0026 val \u003c\u003d Integer.MAX_VALUE) {\n                    int intVal \u003d (int) val;\n                    if (intVal \u003d\u003d val) {\n                        Node notIntValNode \u003d Node.newNumber(~intVal);\n                        parent.replaceChild(n, notIntValNode);\n                        reportCodeChange();\n                        return notIntValNode;\n                    } else {\n                        error(FRACTIONAL_BITWISE_OPERAND, left);\n                        return n;\n                    }\n                } else {\n                    error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n                    return n;\n                }\n            } catch (UnsupportedOperationException ex) {\n                error(NEGATING_A_NON_NUMBER_ERROR, left);\n                return n;\n            }\n        default:\n            return n;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
      "functionStartLine": 202,
      "functionName": "tryFoldUnaryOperator",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "c9e89727dc8063d087d28e42629606f4fd74a6e5": {
      "type": "Yintroduced",
      "commitMessage": "\nChange on 2010/06/22 by nicksantos\n\n\tvariable coalescing better be run AFTER ambiguate properties, and\n\tafter denormalization.\n\n\tR\u003djohnlenz\n\tDELTA\u003d36  (20 added, 16 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d34005\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@248 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/22/10, 4:00 PM",
      "commitName": "c9e89727dc8063d087d28e42629606f4fd74a6e5",
      "commitAuthor": "Nicholas.J.Santos",
      "diff": "@@ -0,0 +1,70 @@\n+private Node tryFoldUnaryOperator(Node n) {\n+    Preconditions.checkState(n.hasOneChild());\n+    Node left \u003d n.getFirstChild();\n+    Node parent \u003d n.getParent();\n+    if (left \u003d\u003d null) {\n+        return n;\n+    }\n+    if (NodeUtil.isExpressionNode(parent)) {\n+        parent.replaceChild(n, n.removeFirstChild());\n+        reportCodeChange();\n+        return null;\n+    }\n+    TernaryValue leftVal \u003d NodeUtil.getBooleanValue(left);\n+    if (leftVal \u003d\u003d TernaryValue.UNKNOWN) {\n+        return n;\n+    }\n+    switch(n.getType()) {\n+        case Token.NOT:\n+            int result \u003d leftVal.toBoolean(true) ? Token.FALSE : Token.TRUE;\n+            Node replacementNode \u003d new Node(result);\n+            parent.replaceChild(n, replacementNode);\n+            reportCodeChange();\n+            return replacementNode;\n+        case Token.NEG:\n+            try {\n+                if (left.getType() \u003d\u003d Token.NAME) {\n+                    if (left.getString().equals(\"Infinity\")) {\n+                        return n;\n+                    } else if (left.getString().equals(\"NaN\")) {\n+                        n.removeChild(left);\n+                        parent.replaceChild(n, left);\n+                        reportCodeChange();\n+                        return left;\n+                    }\n+                }\n+                double negNum \u003d -left.getDouble();\n+                Node negNumNode \u003d Node.newNumber(negNum);\n+                parent.replaceChild(n, negNumNode);\n+                reportCodeChange();\n+                return negNumNode;\n+            } catch (UnsupportedOperationException ex) {\n+                error(NEGATING_A_NON_NUMBER_ERROR, left);\n+                return n;\n+            }\n+        case Token.BITNOT:\n+            try {\n+                double val \u003d left.getDouble();\n+                if (val \u003e\u003d Integer.MIN_VALUE \u0026\u0026 val \u003c\u003d Integer.MAX_VALUE) {\n+                    int intVal \u003d (int) val;\n+                    if (intVal \u003d\u003d val) {\n+                        Node notIntValNode \u003d Node.newNumber(~intVal);\n+                        parent.replaceChild(n, notIntValNode);\n+                        reportCodeChange();\n+                        return notIntValNode;\n+                    } else {\n+                        error(FRACTIONAL_BITWISE_OPERAND, left);\n+                        return n;\n+                    }\n+                } else {\n+                    error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n+                    return n;\n+                }\n+            } catch (UnsupportedOperationException ex) {\n+                error(NEGATING_A_NON_NUMBER_ERROR, left);\n+                return n;\n+            }\n+        default:\n+            return n;\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private Node tryFoldUnaryOperator(Node n) {\n    Preconditions.checkState(n.hasOneChild());\n    Node left \u003d n.getFirstChild();\n    Node parent \u003d n.getParent();\n    if (left \u003d\u003d null) {\n        return n;\n    }\n    if (NodeUtil.isExpressionNode(parent)) {\n        parent.replaceChild(n, n.removeFirstChild());\n        reportCodeChange();\n        return null;\n    }\n    TernaryValue leftVal \u003d NodeUtil.getBooleanValue(left);\n    if (leftVal \u003d\u003d TernaryValue.UNKNOWN) {\n        return n;\n    }\n    switch(n.getType()) {\n        case Token.NOT:\n            int result \u003d leftVal.toBoolean(true) ? Token.FALSE : Token.TRUE;\n            Node replacementNode \u003d new Node(result);\n            parent.replaceChild(n, replacementNode);\n            reportCodeChange();\n            return replacementNode;\n        case Token.NEG:\n            try {\n                if (left.getType() \u003d\u003d Token.NAME) {\n                    if (left.getString().equals(\"Infinity\")) {\n                        return n;\n                    } else if (left.getString().equals(\"NaN\")) {\n                        n.removeChild(left);\n                        parent.replaceChild(n, left);\n                        reportCodeChange();\n                        return left;\n                    }\n                }\n                double negNum \u003d -left.getDouble();\n                Node negNumNode \u003d Node.newNumber(negNum);\n                parent.replaceChild(n, negNumNode);\n                reportCodeChange();\n                return negNumNode;\n            } catch (UnsupportedOperationException ex) {\n                error(NEGATING_A_NON_NUMBER_ERROR, left);\n                return n;\n            }\n        case Token.BITNOT:\n            try {\n                double val \u003d left.getDouble();\n                if (val \u003e\u003d Integer.MIN_VALUE \u0026\u0026 val \u003c\u003d Integer.MAX_VALUE) {\n                    int intVal \u003d (int) val;\n                    if (intVal \u003d\u003d val) {\n                        Node notIntValNode \u003d Node.newNumber(~intVal);\n                        parent.replaceChild(n, notIntValNode);\n                        reportCodeChange();\n                        return notIntValNode;\n                    } else {\n                        error(FRACTIONAL_BITWISE_OPERAND, left);\n                        return n;\n                    }\n                } else {\n                    error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n                    return n;\n                }\n            } catch (UnsupportedOperationException ex) {\n                error(NEGATING_A_NON_NUMBER_ERROR, left);\n                return n;\n            }\n        default:\n            return n;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
      "functionStartLine": 200,
      "functionName": "tryFoldUnaryOperator",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}