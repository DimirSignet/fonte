{
  "origin": "codeshovel",
  "repositoryName": "Closure-120b",
  "repositoryPath": "/tmp/Closure-120b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Node.java",
  "functionName": "isEquivalentTo",
  "functionId": "isEquivalentTo___node-Node",
  "sourceFilePath": "src/com/google/javascript/rhino/Node.java",
  "functionAnnotation": "",
  "functionDoc": "Returns true if this node is equivalent semantically to another\n",
  "functionStartLine": 1490,
  "functionEndLine": 1492,
  "numCommitsSeen": 92,
  "timeTaken": 7385,
  "changeHistory": [
    "4ff5d0b989360d785c63978faf8eed6284e030e1",
    "e4cf805a6a27301672660756202e8dedee1e012b",
    "484b6166dc0254864b8fff0c7b29137ed7954828",
    "c9e89727dc8063d087d28e42629606f4fd74a6e5",
    "43859717972907dd1ecebd8dca6e05036386e28b",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "4ff5d0b989360d785c63978faf8eed6284e030e1": "Ybodychange",
    "e4cf805a6a27301672660756202e8dedee1e012b": "Ybodychange",
    "484b6166dc0254864b8fff0c7b29137ed7954828": "Ybodychange",
    "c9e89727dc8063d087d28e42629606f4fd74a6e5": "Ybodychange",
    "43859717972907dd1ecebd8dca6e05036386e28b": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4ff5d0b989360d785c63978faf8eed6284e030e1": {
      "type": "Ybodychange",
      "commitMessage": "Make Peephole and UnreachableCodeElimination only work on functions that have changed since the last run.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID\u003d44109570\n",
      "commitDate": "3/20/13, 9:48 AM",
      "commitName": "4ff5d0b989360d785c63978faf8eed6284e030e1",
      "commitAuthor": "Ben Lickly",
      "commitDateOld": "1/10/13, 4:31 PM",
      "commitNameOld": "9bf6d8db973a4691ad1551bdcbc559a86ba60532",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 68.68,
      "commitsBetweenForRepo": 144,
      "commitsBetweenForFile": 1,
      "actualSource": "public boolean isEquivalentTo(Node node) {\n    return isEquivalentTo(node, false, true, false);\n}",
      "path": "src/com/google/javascript/rhino/Node.java",
      "functionStartLine": 1488,
      "functionName": "isEquivalentTo",
      "functionAnnotation": "",
      "functionDoc": "Returns true if this node is equivalent semantically to another\n",
      "diff": "@@ -1,3 +1,3 @@\n public boolean isEquivalentTo(Node node) {\n-    return isEquivalentTo(node, false, true);\n+    return isEquivalentTo(node, false, true, false);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e4cf805a6a27301672660756202e8dedee1e012b": {
      "type": "Ybodychange",
      "commitMessage": "\nAvoid unnecessary temporary objects when comparing node trees.\n\nR\u003dacleung\nDELTA\u003d64  (17 added, 22 deleted, 25 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d762\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@849 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/3/11, 5:04 PM",
      "commitName": "e4cf805a6a27301672660756202e8dedee1e012b",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "3/3/11, 11:35 AM",
      "commitNameOld": "484b6166dc0254864b8fff0c7b29137ed7954828",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 0.23,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "public boolean isEquivalentTo(Node node) {\n    return isEquivalentTo(node, false, true);\n}",
      "path": "src/com/google/javascript/rhino/Node.java",
      "functionStartLine": 1565,
      "functionName": "isEquivalentTo",
      "functionAnnotation": "",
      "functionDoc": "Returns true if this node is equivalent semantically to another\n",
      "diff": "@@ -1,3 +1,3 @@\n public boolean isEquivalentTo(Node node) {\n-    return isEquivalentTo(node, true);\n+    return isEquivalentTo(node, false, true);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "484b6166dc0254864b8fff0c7b29137ed7954828": {
      "type": "Ybodychange",
      "commitMessage": "\nNode.isEquivalentTo doesn\u0027t do what you expect, make it package private.\nFix up the caller to use a working method.\n\nR\u003dacleung\nDELTA\u003d92  (36 added, 12 deleted, 44 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d752\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@846 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/3/11, 11:35 AM",
      "commitName": "484b6166dc0254864b8fff0c7b29137ed7954828",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "9/27/10, 4:16 PM",
      "commitNameOld": "6a2378d43d1f06344f6418388d45c66fe3466a07",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 156.85,
      "commitsBetweenForRepo": 366,
      "commitsBetweenForFile": 1,
      "actualSource": "public boolean isEquivalentTo(Node node) {\n    return isEquivalentTo(node, true);\n}",
      "path": "src/com/google/javascript/rhino/Node.java",
      "functionStartLine": 1586,
      "functionName": "isEquivalentTo",
      "functionAnnotation": "",
      "functionDoc": "Returns true if this node is equivalent semantically to another\n",
      "diff": "@@ -1,38 +1,3 @@\n public boolean isEquivalentTo(Node node) {\n-    if (type \u003d\u003d Token.ARRAYLIT) {\n-        try {\n-            int[] indices1 \u003d (int[]) getProp(Node.SKIP_INDEXES_PROP);\n-            int[] indices2 \u003d (int[]) node.getProp(Node.SKIP_INDEXES_PROP);\n-            if (indices1 \u003d\u003d null) {\n-                if (indices2 !\u003d null) {\n-                    return false;\n-                }\n-            } else if (indices2 \u003d\u003d null) {\n-                return false;\n-            } else if (indices1.length !\u003d indices2.length) {\n-                return false;\n-            } else {\n-                for (int i \u003d 0; i \u003c indices1.length; i++) {\n-                    if (indices1[i] !\u003d indices2[i]) {\n-                        return false;\n-                    }\n-                }\n-            }\n-        } catch (Exception e) {\n-            return false;\n-        }\n-    } else if (type \u003d\u003d Token.INC || type \u003d\u003d Token.DEC) {\n-        int post1 \u003d this.getIntProp(INCRDECR_PROP);\n-        int post2 \u003d node.getIntProp(INCRDECR_PROP);\n-        if (post1 !\u003d post2) {\n-            return false;\n-        }\n-    } else if (type \u003d\u003d Token.STRING) {\n-        int quoted1 \u003d this.getIntProp(QUOTED_PROP);\n-        int quoted2 \u003d node.getIntProp(QUOTED_PROP);\n-        if (quoted1 !\u003d quoted2) {\n-            return false;\n-        }\n-    }\n-    return true;\n+    return isEquivalentTo(node, true);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c9e89727dc8063d087d28e42629606f4fd74a6e5": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/06/22 by nicksantos\n\n\tvariable coalescing better be run AFTER ambiguate properties, and\n\tafter denormalization.\n\n\tR\u003djohnlenz\n\tDELTA\u003d36  (20 added, 16 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d34005\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@248 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/22/10, 4:00 PM",
      "commitName": "c9e89727dc8063d087d28e42629606f4fd74a6e5",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "5/26/10, 8:26 AM",
      "commitNameOld": "cf5fd88f13f0b11625ac407f85cb58b36862e173",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 27.32,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "actualSource": "public boolean isEquivalentTo(Node node) {\n    if (type \u003d\u003d Token.ARRAYLIT) {\n        try {\n            int[] indices1 \u003d (int[]) getProp(Node.SKIP_INDEXES_PROP);\n            int[] indices2 \u003d (int[]) node.getProp(Node.SKIP_INDEXES_PROP);\n            if (indices1 \u003d\u003d null) {\n                if (indices2 !\u003d null) {\n                    return false;\n                }\n            } else if (indices2 \u003d\u003d null) {\n                return false;\n            } else if (indices1.length !\u003d indices2.length) {\n                return false;\n            } else {\n                for (int i \u003d 0; i \u003c indices1.length; i++) {\n                    if (indices1[i] !\u003d indices2[i]) {\n                        return false;\n                    }\n                }\n            }\n        } catch (Exception e) {\n            return false;\n        }\n    } else if (type \u003d\u003d Token.INC || type \u003d\u003d Token.DEC) {\n        int post1 \u003d this.getIntProp(INCRDECR_PROP);\n        int post2 \u003d node.getIntProp(INCRDECR_PROP);\n        if (post1 !\u003d post2) {\n            return false;\n        }\n    } else if (type \u003d\u003d Token.STRING) {\n        int quoted1 \u003d this.getIntProp(QUOTED_PROP);\n        int quoted2 \u003d node.getIntProp(QUOTED_PROP);\n        if (quoted1 !\u003d quoted2) {\n            return false;\n        }\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/rhino/Node.java",
      "functionStartLine": 1586,
      "functionName": "isEquivalentTo",
      "functionAnnotation": "",
      "functionDoc": "Returns true if this node is equivalent semantically to another\n",
      "diff": "@@ -1,38 +1,38 @@\n public boolean isEquivalentTo(Node node) {\n     if (type \u003d\u003d Token.ARRAYLIT) {\n         try {\n             int[] indices1 \u003d (int[]) getProp(Node.SKIP_INDEXES_PROP);\n             int[] indices2 \u003d (int[]) node.getProp(Node.SKIP_INDEXES_PROP);\n             if (indices1 \u003d\u003d null) {\n                 if (indices2 !\u003d null) {\n                     return false;\n                 }\n             } else if (indices2 \u003d\u003d null) {\n                 return false;\n             } else if (indices1.length !\u003d indices2.length) {\n                 return false;\n             } else {\n                 for (int i \u003d 0; i \u003c indices1.length; i++) {\n                     if (indices1[i] !\u003d indices2[i]) {\n                         return false;\n                     }\n                 }\n             }\n         } catch (Exception e) {\n             return false;\n         }\n     } else if (type \u003d\u003d Token.INC || type \u003d\u003d Token.DEC) {\n-        int post1 \u003d this.getIntProp(INCRDECR_PROP, 0);\n-        int post2 \u003d node.getIntProp(INCRDECR_PROP, 0);\n+        int post1 \u003d this.getIntProp(INCRDECR_PROP);\n+        int post2 \u003d node.getIntProp(INCRDECR_PROP);\n         if (post1 !\u003d post2) {\n             return false;\n         }\n     } else if (type \u003d\u003d Token.STRING) {\n-        int quoted1 \u003d this.getIntProp(QUOTED_PROP, 0);\n-        int quoted2 \u003d node.getIntProp(QUOTED_PROP, 0);\n+        int quoted1 \u003d this.getIntProp(QUOTED_PROP);\n+        int quoted2 \u003d node.getIntProp(QUOTED_PROP);\n         if (quoted1 !\u003d quoted2) {\n             return false;\n         }\n     }\n     return true;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "43859717972907dd1ecebd8dca6e05036386e28b": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/04/14 by john\n\n        Stop creating specialized Node types for FUNCTION and SCRIPT as the added functionality isn\u0027t used anywhere.\n\n        Also correct some formatting issue with Node (as it won\u0027t need to be merged with anything else anymore).\n\n        R\u003dsteve,robert\n        DELTA\u003d3969  (1913 added, 1925 deleted, 131 changed)\n\nChange on 2010/04/14 by john\n\n        Fix source information in MinimizeExitPoints.\n\n        R\u003drobert\n        DELTA\u003d10  (5 added, 2 deleted, 3 changed)\n\nChange on 2010/04/14 by john\n\n        Maintain source information.\n\n        R\u003dantonio\n        DELTA\u003d17  (11 added, 0 deleted, 6 changed)\n\nChange on 2010/04/14 by john\n\n        Maintain source information through FoldConstants.\n\n        R\u003drobert\n        DELTA\u003d42  (22 added, 0 deleted, 20 changed)\n\nChange on 2010/04/14 by nick\n\n        lock down function type construction\n\n        R\u003djohn\n        DELTA\u003d111  (83 added, 9 deleted, 19 changed)\n\nChange on 2010/04/14 by john\n\n        Fix source info in CollapseProperties.\n\n        R\u003dnick\n        DELTA\u003d17  (8 added, 3 deleted, 6 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dmbevwz\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@184 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/14/10, 4:53 PM",
      "commitName": "43859717972907dd1ecebd8dca6e05036386e28b",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/13/10, 2:39 PM",
      "commitNameOld": "de13c3313c05f4449c50c560324389d6905a214d",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 1.09,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public boolean isEquivalentTo(Node node) {\n    if (type \u003d\u003d Token.ARRAYLIT) {\n        try {\n            int[] indices1 \u003d (int[]) getProp(Node.SKIP_INDEXES_PROP);\n            int[] indices2 \u003d (int[]) node.getProp(Node.SKIP_INDEXES_PROP);\n            if (indices1 \u003d\u003d null) {\n                if (indices2 !\u003d null) {\n                    return false;\n                }\n            } else if (indices2 \u003d\u003d null) {\n                return false;\n            } else if (indices1.length !\u003d indices2.length) {\n                return false;\n            } else {\n                for (int i \u003d 0; i \u003c indices1.length; i++) {\n                    if (indices1[i] !\u003d indices2[i]) {\n                        return false;\n                    }\n                }\n            }\n        } catch (Exception e) {\n            return false;\n        }\n    } else if (type \u003d\u003d Token.INC || type \u003d\u003d Token.DEC) {\n        int post1 \u003d this.getIntProp(INCRDECR_PROP, 0);\n        int post2 \u003d node.getIntProp(INCRDECR_PROP, 0);\n        if (post1 !\u003d post2) {\n            return false;\n        }\n    } else if (type \u003d\u003d Token.STRING) {\n        int quoted1 \u003d this.getIntProp(QUOTED_PROP, 0);\n        int quoted2 \u003d node.getIntProp(QUOTED_PROP, 0);\n        if (quoted1 !\u003d quoted2) {\n            return false;\n        }\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/rhino/Node.java",
      "functionStartLine": 1556,
      "functionName": "isEquivalentTo",
      "functionAnnotation": "",
      "functionDoc": "Returns true if this node is equivalent semantically to another\n",
      "diff": "@@ -1,34 +1,38 @@\n public boolean isEquivalentTo(Node node) {\n     if (type \u003d\u003d Token.ARRAYLIT) {\n         try {\n             int[] indices1 \u003d (int[]) getProp(Node.SKIP_INDEXES_PROP);\n             int[] indices2 \u003d (int[]) node.getProp(Node.SKIP_INDEXES_PROP);\n             if (indices1 \u003d\u003d null) {\n-                if (indices2 !\u003d null)\n+                if (indices2 !\u003d null) {\n                     return false;\n+                }\n             } else if (indices2 \u003d\u003d null) {\n                 return false;\n             } else if (indices1.length !\u003d indices2.length) {\n                 return false;\n             } else {\n                 for (int i \u003d 0; i \u003c indices1.length; i++) {\n-                    if (indices1[i] !\u003d indices2[i])\n+                    if (indices1[i] !\u003d indices2[i]) {\n                         return false;\n+                    }\n                 }\n             }\n         } catch (Exception e) {\n             return false;\n         }\n     } else if (type \u003d\u003d Token.INC || type \u003d\u003d Token.DEC) {\n         int post1 \u003d this.getIntProp(INCRDECR_PROP, 0);\n         int post2 \u003d node.getIntProp(INCRDECR_PROP, 0);\n-        if (post1 !\u003d post2)\n+        if (post1 !\u003d post2) {\n             return false;\n+        }\n     } else if (type \u003d\u003d Token.STRING) {\n         int quoted1 \u003d this.getIntProp(QUOTED_PROP, 0);\n         int quoted2 \u003d node.getIntProp(QUOTED_PROP, 0);\n-        if (quoted1 !\u003d quoted2)\n+        if (quoted1 !\u003d quoted2) {\n             return false;\n+        }\n     }\n     return true;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,34 @@\n+public boolean isEquivalentTo(Node node) {\n+    if (type \u003d\u003d Token.ARRAYLIT) {\n+        try {\n+            int[] indices1 \u003d (int[]) getProp(Node.SKIP_INDEXES_PROP);\n+            int[] indices2 \u003d (int[]) node.getProp(Node.SKIP_INDEXES_PROP);\n+            if (indices1 \u003d\u003d null) {\n+                if (indices2 !\u003d null)\n+                    return false;\n+            } else if (indices2 \u003d\u003d null) {\n+                return false;\n+            } else if (indices1.length !\u003d indices2.length) {\n+                return false;\n+            } else {\n+                for (int i \u003d 0; i \u003c indices1.length; i++) {\n+                    if (indices1[i] !\u003d indices2[i])\n+                        return false;\n+                }\n+            }\n+        } catch (Exception e) {\n+            return false;\n+        }\n+    } else if (type \u003d\u003d Token.INC || type \u003d\u003d Token.DEC) {\n+        int post1 \u003d this.getIntProp(INCRDECR_PROP, 0);\n+        int post2 \u003d node.getIntProp(INCRDECR_PROP, 0);\n+        if (post1 !\u003d post2)\n+            return false;\n+    } else if (type \u003d\u003d Token.STRING) {\n+        int quoted1 \u003d this.getIntProp(QUOTED_PROP, 0);\n+        int quoted2 \u003d node.getIntProp(QUOTED_PROP, 0);\n+        if (quoted1 !\u003d quoted2)\n+            return false;\n+    }\n+    return true;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public boolean isEquivalentTo(Node node) {\n    if (type \u003d\u003d Token.ARRAYLIT) {\n        try {\n            int[] indices1 \u003d (int[]) getProp(Node.SKIP_INDEXES_PROP);\n            int[] indices2 \u003d (int[]) node.getProp(Node.SKIP_INDEXES_PROP);\n            if (indices1 \u003d\u003d null) {\n                if (indices2 !\u003d null)\n                    return false;\n            } else if (indices2 \u003d\u003d null) {\n                return false;\n            } else if (indices1.length !\u003d indices2.length) {\n                return false;\n            } else {\n                for (int i \u003d 0; i \u003c indices1.length; i++) {\n                    if (indices1[i] !\u003d indices2[i])\n                        return false;\n                }\n            }\n        } catch (Exception e) {\n            return false;\n        }\n    } else if (type \u003d\u003d Token.INC || type \u003d\u003d Token.DEC) {\n        int post1 \u003d this.getIntProp(INCRDECR_PROP, 0);\n        int post2 \u003d node.getIntProp(INCRDECR_PROP, 0);\n        if (post1 !\u003d post2)\n            return false;\n    } else if (type \u003d\u003d Token.STRING) {\n        int quoted1 \u003d this.getIntProp(QUOTED_PROP, 0);\n        int quoted2 \u003d node.getIntProp(QUOTED_PROP, 0);\n        if (quoted1 !\u003d quoted2)\n            return false;\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/rhino/Node.java",
      "functionStartLine": 1473,
      "functionName": "isEquivalentTo",
      "functionAnnotation": "",
      "functionDoc": "Returns true if this node is equivalent semantically to another\n"
    }
  }
}