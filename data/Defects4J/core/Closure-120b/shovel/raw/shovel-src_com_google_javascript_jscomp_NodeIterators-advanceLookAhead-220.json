{
  "origin": "codeshovel",
  "repositoryName": "Closure-120b",
  "repositoryPath": "/tmp/Closure-120b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NodeIterators.java",
  "functionName": "advanceLookAhead",
  "functionId": "$advanceLookAhead___atStart-boolean",
  "sourceFilePath": "src/com/google/javascript/jscomp/NodeIterators.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 220,
  "functionEndLine": 288,
  "numCommitsSeen": 9,
  "timeTaken": 990,
  "changeHistory": [
    "5fde503a0846406893ebdfdc04388875ea423d81",
    "70a5626922ea7e8c98747e22b6986638ba38fadc",
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "5fde503a0846406893ebdfdc04388875ea423d81": "Ybodychange",
    "70a5626922ea7e8c98747e22b6986638ba38fadc": "Ybodychange",
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5fde503a0846406893ebdfdc04388875ea423d81": {
      "type": "Ybodychange",
      "commitMessage": "\nFix a bug in the old inliner.\nThere are probably cases that i\u0027m missing. i\u0027ll think about it\na bit more over the weekend.\n\nR\u003dacleung\nDELTA\u003d50  (30 added, 3 deleted, 17 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d4940\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2021 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/4/12, 3:08 PM",
      "commitName": "5fde503a0846406893ebdfdc04388875ea423d81",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "5/18/12, 11:09 AM",
      "commitNameOld": "70a5626922ea7e8c98747e22b6986638ba38fadc",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 17.17,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "actualSource": "private void advanceLookAhead(boolean atStart) {\n    if (!atStart) {\n        if (lookAhead \u003d\u003d null) {\n            return;\n        }\n        Node curNode \u003d iterator.current();\n        if (curNode.isName() \u0026\u0026 varName.equals(curNode.getString())) {\n            lookAhead \u003d null;\n            return;\n        }\n    }\n    if (!iterator.hasNext()) {\n        lookAhead \u003d null;\n        return;\n    }\n    Node nextNode \u003d iterator.next();\n    Node nextParent \u003d iterator.currentParent();\n    int type \u003d nextNode.getType();\n    if (valueHasSideEffects) {\n        boolean readsState \u003d false;\n        if ((nextNode.isName() \u0026\u0026 !varName.equals(nextNode.getString())) || (nextNode.isGetProp() || nextNode.isGetElem())) {\n            if (nextParent \u003d\u003d null || !NodeUtil.isVarOrSimpleAssignLhs(nextNode, nextParent)) {\n                readsState \u003d true;\n            }\n        } else if (nextNode.isCall() || nextNode.isNew()) {\n            readsState \u003d true;\n        }\n        if (readsState) {\n            lookAhead \u003d null;\n            return;\n        }\n    }\n    if (NodeUtil.nodeTypeMayHaveSideEffects(nextNode) \u0026\u0026 type !\u003d Token.NAME || type \u003d\u003d Token.NAME \u0026\u0026 nextParent.isCatch()) {\n        lookAhead \u003d null;\n        return;\n    }\n    lookAhead \u003d nextNode;\n}",
      "path": "src/com/google/javascript/jscomp/NodeIterators.java",
      "functionStartLine": 220,
      "functionName": "advanceLookAhead",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,42 +1,38 @@\n private void advanceLookAhead(boolean atStart) {\n     if (!atStart) {\n         if (lookAhead \u003d\u003d null) {\n             return;\n         }\n         Node curNode \u003d iterator.current();\n         if (curNode.isName() \u0026\u0026 varName.equals(curNode.getString())) {\n             lookAhead \u003d null;\n             return;\n         }\n     }\n     if (!iterator.hasNext()) {\n         lookAhead \u003d null;\n         return;\n     }\n     Node nextNode \u003d iterator.next();\n     Node nextParent \u003d iterator.currentParent();\n     int type \u003d nextNode.getType();\n     if (valueHasSideEffects) {\n-        if (type \u003d\u003d Token.NAME \u0026\u0026 !varName.equals(nextNode.getString())) {\n-            boolean blocked \u003d false;\n-            if (nextParent \u003d\u003d null) {\n-                blocked \u003d true;\n-            } else {\n-                boolean assignsName \u003d (nextParent.isAssign() \u0026\u0026 nextNode \u003d\u003d nextParent.getFirstChild());\n-                boolean isVarDeclaration \u003d (nextParent.isVar());\n-                if (!assignsName \u0026\u0026 !isVarDeclaration) {\n-                    blocked \u003d true;\n-                }\n+        boolean readsState \u003d false;\n+        if ((nextNode.isName() \u0026\u0026 !varName.equals(nextNode.getString())) || (nextNode.isGetProp() || nextNode.isGetElem())) {\n+            if (nextParent \u003d\u003d null || !NodeUtil.isVarOrSimpleAssignLhs(nextNode, nextParent)) {\n+                readsState \u003d true;\n             }\n-            if (blocked) {\n-                lookAhead \u003d null;\n-                return;\n-            }\n+        } else if (nextNode.isCall() || nextNode.isNew()) {\n+            readsState \u003d true;\n+        }\n+        if (readsState) {\n+            lookAhead \u003d null;\n+            return;\n         }\n     }\n     if (NodeUtil.nodeTypeMayHaveSideEffects(nextNode) \u0026\u0026 type !\u003d Token.NAME || type \u003d\u003d Token.NAME \u0026\u0026 nextParent.isCatch()) {\n         lookAhead \u003d null;\n         return;\n     }\n     lookAhead \u003d nextNode;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "70a5626922ea7e8c98747e22b6986638ba38fadc": {
      "type": "Ybodychange",
      "commitMessage": "\nFix various typos, spelling and grammar errors.\nFixes issue 734. \nContributed by Robert Gust Bardon\n\nR\u003dnicksantos\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d4827\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1979 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/18/12, 11:09 AM",
      "commitName": "70a5626922ea7e8c98747e22b6986638ba38fadc",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/10/11, 8:36 AM",
      "commitNameOld": "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 190.06,
      "commitsBetweenForRepo": 339,
      "commitsBetweenForFile": 1,
      "actualSource": "private void advanceLookAhead(boolean atStart) {\n    if (!atStart) {\n        if (lookAhead \u003d\u003d null) {\n            return;\n        }\n        Node curNode \u003d iterator.current();\n        if (curNode.isName() \u0026\u0026 varName.equals(curNode.getString())) {\n            lookAhead \u003d null;\n            return;\n        }\n    }\n    if (!iterator.hasNext()) {\n        lookAhead \u003d null;\n        return;\n    }\n    Node nextNode \u003d iterator.next();\n    Node nextParent \u003d iterator.currentParent();\n    int type \u003d nextNode.getType();\n    if (valueHasSideEffects) {\n        if (type \u003d\u003d Token.NAME \u0026\u0026 !varName.equals(nextNode.getString())) {\n            boolean blocked \u003d false;\n            if (nextParent \u003d\u003d null) {\n                blocked \u003d true;\n            } else {\n                boolean assignsName \u003d (nextParent.isAssign() \u0026\u0026 nextNode \u003d\u003d nextParent.getFirstChild());\n                boolean isVarDeclaration \u003d (nextParent.isVar());\n                if (!assignsName \u0026\u0026 !isVarDeclaration) {\n                    blocked \u003d true;\n                }\n            }\n            if (blocked) {\n                lookAhead \u003d null;\n                return;\n            }\n        }\n    }\n    if (NodeUtil.nodeTypeMayHaveSideEffects(nextNode) \u0026\u0026 type !\u003d Token.NAME || type \u003d\u003d Token.NAME \u0026\u0026 nextParent.isCatch()) {\n        lookAhead \u003d null;\n        return;\n    }\n    lookAhead \u003d nextNode;\n}",
      "path": "src/com/google/javascript/jscomp/NodeIterators.java",
      "functionStartLine": 220,
      "functionName": "advanceLookAhead",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c": {
      "type": "Ybodychange",
      "commitMessage": "\nReplace the bulk of the Node.getType() \u003d\u003d Token.XXX calls with\nNode.isXXX calls.\n\nR\u003dnicksantos\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3677\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1582 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/10/11, 8:36 AM",
      "commitName": "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "4/12/11, 12:15 PM",
      "commitNameOld": "f322be0e576d5e2114cb59c0a6537197997b9c59",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 211.89,
      "commitsBetweenForRepo": 539,
      "commitsBetweenForFile": 1,
      "actualSource": "private void advanceLookAhead(boolean atStart) {\n    if (!atStart) {\n        if (lookAhead \u003d\u003d null) {\n            return;\n        }\n        Node curNode \u003d iterator.current();\n        if (curNode.isName() \u0026\u0026 varName.equals(curNode.getString())) {\n            lookAhead \u003d null;\n            return;\n        }\n    }\n    if (!iterator.hasNext()) {\n        lookAhead \u003d null;\n        return;\n    }\n    Node nextNode \u003d iterator.next();\n    Node nextParent \u003d iterator.currentParent();\n    int type \u003d nextNode.getType();\n    if (valueHasSideEffects) {\n        if (type \u003d\u003d Token.NAME \u0026\u0026 !varName.equals(nextNode.getString())) {\n            boolean blocked \u003d false;\n            if (nextParent \u003d\u003d null) {\n                blocked \u003d true;\n            } else {\n                boolean assignsName \u003d (nextParent.isAssign() \u0026\u0026 nextNode \u003d\u003d nextParent.getFirstChild());\n                boolean isVarDeclaration \u003d (nextParent.isVar());\n                if (!assignsName \u0026\u0026 !isVarDeclaration) {\n                    blocked \u003d true;\n                }\n            }\n            if (blocked) {\n                lookAhead \u003d null;\n                return;\n            }\n        }\n    }\n    if (NodeUtil.nodeTypeMayHaveSideEffects(nextNode) \u0026\u0026 type !\u003d Token.NAME || type \u003d\u003d Token.NAME \u0026\u0026 nextParent.isCatch()) {\n        lookAhead \u003d null;\n        return;\n    }\n    lookAhead \u003d nextNode;\n}",
      "path": "src/com/google/javascript/jscomp/NodeIterators.java",
      "functionStartLine": 220,
      "functionName": "advanceLookAhead",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,42 +1,42 @@\n private void advanceLookAhead(boolean atStart) {\n     if (!atStart) {\n         if (lookAhead \u003d\u003d null) {\n             return;\n         }\n         Node curNode \u003d iterator.current();\n-        if (curNode.getType() \u003d\u003d Token.NAME \u0026\u0026 varName.equals(curNode.getString())) {\n+        if (curNode.isName() \u0026\u0026 varName.equals(curNode.getString())) {\n             lookAhead \u003d null;\n             return;\n         }\n     }\n     if (!iterator.hasNext()) {\n         lookAhead \u003d null;\n         return;\n     }\n     Node nextNode \u003d iterator.next();\n     Node nextParent \u003d iterator.currentParent();\n     int type \u003d nextNode.getType();\n     if (valueHasSideEffects) {\n         if (type \u003d\u003d Token.NAME \u0026\u0026 !varName.equals(nextNode.getString())) {\n             boolean blocked \u003d false;\n             if (nextParent \u003d\u003d null) {\n                 blocked \u003d true;\n             } else {\n-                boolean assignsName \u003d (nextParent.getType() \u003d\u003d Token.ASSIGN \u0026\u0026 nextNode \u003d\u003d nextParent.getFirstChild());\n-                boolean isVarDeclaration \u003d (nextParent.getType() \u003d\u003d Token.VAR);\n+                boolean assignsName \u003d (nextParent.isAssign() \u0026\u0026 nextNode \u003d\u003d nextParent.getFirstChild());\n+                boolean isVarDeclaration \u003d (nextParent.isVar());\n                 if (!assignsName \u0026\u0026 !isVarDeclaration) {\n                     blocked \u003d true;\n                 }\n             }\n             if (blocked) {\n                 lookAhead \u003d null;\n                 return;\n             }\n         }\n     }\n-    if (NodeUtil.nodeTypeMayHaveSideEffects(nextNode) \u0026\u0026 type !\u003d Token.NAME || type \u003d\u003d Token.NAME \u0026\u0026 nextParent.getType() \u003d\u003d Token.CATCH) {\n+    if (NodeUtil.nodeTypeMayHaveSideEffects(nextNode) \u0026\u0026 type !\u003d Token.NAME || type \u003d\u003d Token.NAME \u0026\u0026 nextParent.isCatch()) {\n         lookAhead \u003d null;\n         return;\n     }\n     lookAhead \u003d nextNode;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,42 @@\n+private void advanceLookAhead(boolean atStart) {\n+    if (!atStart) {\n+        if (lookAhead \u003d\u003d null) {\n+            return;\n+        }\n+        Node curNode \u003d iterator.current();\n+        if (curNode.getType() \u003d\u003d Token.NAME \u0026\u0026 varName.equals(curNode.getString())) {\n+            lookAhead \u003d null;\n+            return;\n+        }\n+    }\n+    if (!iterator.hasNext()) {\n+        lookAhead \u003d null;\n+        return;\n+    }\n+    Node nextNode \u003d iterator.next();\n+    Node nextParent \u003d iterator.currentParent();\n+    int type \u003d nextNode.getType();\n+    if (valueHasSideEffects) {\n+        if (type \u003d\u003d Token.NAME \u0026\u0026 !varName.equals(nextNode.getString())) {\n+            boolean blocked \u003d false;\n+            if (nextParent \u003d\u003d null) {\n+                blocked \u003d true;\n+            } else {\n+                boolean assignsName \u003d (nextParent.getType() \u003d\u003d Token.ASSIGN \u0026\u0026 nextNode \u003d\u003d nextParent.getFirstChild());\n+                boolean isVarDeclaration \u003d (nextParent.getType() \u003d\u003d Token.VAR);\n+                if (!assignsName \u0026\u0026 !isVarDeclaration) {\n+                    blocked \u003d true;\n+                }\n+            }\n+            if (blocked) {\n+                lookAhead \u003d null;\n+                return;\n+            }\n+        }\n+    }\n+    if (NodeUtil.nodeTypeMayHaveSideEffects(nextNode) \u0026\u0026 type !\u003d Token.NAME || type \u003d\u003d Token.NAME \u0026\u0026 nextParent.getType() \u003d\u003d Token.CATCH) {\n+        lookAhead \u003d null;\n+        return;\n+    }\n+    lookAhead \u003d nextNode;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void advanceLookAhead(boolean atStart) {\n    if (!atStart) {\n        if (lookAhead \u003d\u003d null) {\n            return;\n        }\n        Node curNode \u003d iterator.current();\n        if (curNode.getType() \u003d\u003d Token.NAME \u0026\u0026 varName.equals(curNode.getString())) {\n            lookAhead \u003d null;\n            return;\n        }\n    }\n    if (!iterator.hasNext()) {\n        lookAhead \u003d null;\n        return;\n    }\n    Node nextNode \u003d iterator.next();\n    Node nextParent \u003d iterator.currentParent();\n    int type \u003d nextNode.getType();\n    if (valueHasSideEffects) {\n        if (type \u003d\u003d Token.NAME \u0026\u0026 !varName.equals(nextNode.getString())) {\n            boolean blocked \u003d false;\n            if (nextParent \u003d\u003d null) {\n                blocked \u003d true;\n            } else {\n                boolean assignsName \u003d (nextParent.getType() \u003d\u003d Token.ASSIGN \u0026\u0026 nextNode \u003d\u003d nextParent.getFirstChild());\n                boolean isVarDeclaration \u003d (nextParent.getType() \u003d\u003d Token.VAR);\n                if (!assignsName \u0026\u0026 !isVarDeclaration) {\n                    blocked \u003d true;\n                }\n            }\n            if (blocked) {\n                lookAhead \u003d null;\n                return;\n            }\n        }\n    }\n    if (NodeUtil.nodeTypeMayHaveSideEffects(nextNode) \u0026\u0026 type !\u003d Token.NAME || type \u003d\u003d Token.NAME \u0026\u0026 nextParent.getType() \u003d\u003d Token.CATCH) {\n        lookAhead \u003d null;\n        return;\n    }\n    lookAhead \u003d nextNode;\n}",
      "path": "src/com/google/javascript/jscomp/NodeIterators.java",
      "functionStartLine": 197,
      "functionName": "advanceLookAhead",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}