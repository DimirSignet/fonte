{
  "origin": "codeshovel",
  "repositoryName": "Closure-120b",
  "repositoryPath": "/tmp/Closure-120b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "InlineVariables.java",
  "functionName": "canInline",
  "functionId": "$canInline___declaration-Reference__initialization-Reference__reference-Reference",
  "sourceFilePath": "src/com/google/javascript/jscomp/InlineVariables.java",
  "functionAnnotation": "",
  "functionDoc": "\n@return true if the provided reference and declaration can be safely\n        inlined according to our criteria\n",
  "functionStartLine": 513,
  "functionEndLine": 577,
  "numCommitsSeen": 36,
  "timeTaken": 2377,
  "changeHistory": [
    "70a5626922ea7e8c98747e22b6986638ba38fadc",
    "be397ee0d0be2aad8f71d12f097b17563866445a",
    "39f629a8cfaab37da55288010640d7e516000b1f",
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
    "fb1ca6ab49d90553268b711edc805c47ceae5088",
    "c6848064f7a5f696e34b6054ea6cc75b13eb9acc",
    "78995bf9e88599055a8c4165d89c09dc92a44b30",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "70a5626922ea7e8c98747e22b6986638ba38fadc": "Ybodychange",
    "be397ee0d0be2aad8f71d12f097b17563866445a": "Ybodychange",
    "39f629a8cfaab37da55288010640d7e516000b1f": "Ybodychange",
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c": "Ybodychange",
    "fb1ca6ab49d90553268b711edc805c47ceae5088": "Ybodychange",
    "c6848064f7a5f696e34b6054ea6cc75b13eb9acc": "Ybodychange",
    "78995bf9e88599055a8c4165d89c09dc92a44b30": "Ymultichange(Yparameterchange,Ybodychange)",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "70a5626922ea7e8c98747e22b6986638ba38fadc": {
      "type": "Ybodychange",
      "commitMessage": "\nFix various typos, spelling and grammar errors.\nFixes issue 734. \nContributed by Robert Gust Bardon\n\nR\u003dnicksantos\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d4827\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1979 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/18/12, 11:09 AM",
      "commitName": "70a5626922ea7e8c98747e22b6986638ba38fadc",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "4/30/12, 4:40 PM",
      "commitNameOld": "f58f7523c285197df175ad780dbe6288c67bc08c",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 17.77,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "actualSource": "private boolean canInline(Reference declaration, Reference initialization, Reference reference) {\n    if (!isValidDeclaration(declaration) || !isValidInitialization(initialization) || !isValidReference(reference)) {\n        return false;\n    }\n    if (declaration !\u003d initialization \u0026\u0026 !initialization.getGrandparent().isExprResult()) {\n        return false;\n    }\n    if (declaration.getBasicBlock() !\u003d initialization.getBasicBlock() || declaration.getBasicBlock() !\u003d reference.getBasicBlock()) {\n        return false;\n    }\n    Node value \u003d initialization.getAssignedValue();\n    Preconditions.checkState(value !\u003d null);\n    if (value.isGetProp() \u0026\u0026 reference.getParent().isCall() \u0026\u0026 reference.getParent().getFirstChild() \u003d\u003d reference.getNode()) {\n        return false;\n    }\n    if (value.isFunction()) {\n        Node callNode \u003d reference.getParent();\n        if (reference.getParent().isCall()) {\n            CodingConvention convention \u003d compiler.getCodingConvention();\n            SubclassRelationship relationship \u003d convention.getClassesDefinedByCall(callNode);\n            if (relationship !\u003d null) {\n                return false;\n            }\n            if (convention.getSingletonGetterClassName(callNode) !\u003d null) {\n                return false;\n            }\n        }\n    }\n    return canMoveAggressively(value) || canMoveModerately(initialization, reference);\n}",
      "path": "src/com/google/javascript/jscomp/InlineVariables.java",
      "functionStartLine": 519,
      "functionName": "canInline",
      "functionAnnotation": "",
      "functionDoc": "\n@return true if the provided reference and declaration can be safely\n        inlined according to our criteria\n",
      "diff": "",
      "extendedDetails": {}
    },
    "be397ee0d0be2aad8f71d12f097b17563866445a": {
      "type": "Ybodychange",
      "commitMessage": "\nRemove addSingletonGetter stragglers.\nFixes issue 668\n\nR\u003dnicksantos\nDELTA\u003d34  (31 added, 2 deleted, 1 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d4297\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1800 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/28/12, 9:56 PM",
      "commitName": "be397ee0d0be2aad8f71d12f097b17563866445a",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/14/11, 6:13 PM",
      "commitNameOld": "39f629a8cfaab37da55288010640d7e516000b1f",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 106.15,
      "commitsBetweenForRepo": 168,
      "commitsBetweenForFile": 1,
      "actualSource": "private boolean canInline(Reference declaration, Reference initialization, Reference reference) {\n    if (!isValidDeclaration(declaration) || !isValidInitialization(initialization) || !isValidReference(reference)) {\n        return false;\n    }\n    if (declaration !\u003d initialization \u0026\u0026 !initialization.getGrandparent().isExprResult()) {\n        return false;\n    }\n    if (declaration.getBasicBlock() !\u003d initialization.getBasicBlock() || declaration.getBasicBlock() !\u003d reference.getBasicBlock()) {\n        return false;\n    }\n    Node value \u003d initialization.getAssignedValue();\n    Preconditions.checkState(value !\u003d null);\n    if (value.isGetProp() \u0026\u0026 reference.getParent().isCall() \u0026\u0026 reference.getParent().getFirstChild() \u003d\u003d reference.getNode()) {\n        return false;\n    }\n    if (value.isFunction()) {\n        Node callNode \u003d reference.getParent();\n        if (reference.getParent().isCall()) {\n            CodingConvention convention \u003d compiler.getCodingConvention();\n            SubclassRelationship relationship \u003d convention.getClassesDefinedByCall(callNode);\n            if (relationship !\u003d null) {\n                return false;\n            }\n            if (convention.getSingletonGetterClassName(callNode) !\u003d null) {\n                return false;\n            }\n        }\n    }\n    return canMoveAggressively(value) || canMoveModerately(initialization, reference);\n}",
      "path": "src/com/google/javascript/jscomp/InlineVariables.java",
      "functionStartLine": 519,
      "functionName": "canInline",
      "functionAnnotation": "",
      "functionDoc": "\n@return true if the provided reference and declaration can be safely\n        inlined according to our criteria\n",
      "diff": "@@ -1,26 +1,30 @@\n private boolean canInline(Reference declaration, Reference initialization, Reference reference) {\n     if (!isValidDeclaration(declaration) || !isValidInitialization(initialization) || !isValidReference(reference)) {\n         return false;\n     }\n     if (declaration !\u003d initialization \u0026\u0026 !initialization.getGrandparent().isExprResult()) {\n         return false;\n     }\n     if (declaration.getBasicBlock() !\u003d initialization.getBasicBlock() || declaration.getBasicBlock() !\u003d reference.getBasicBlock()) {\n         return false;\n     }\n     Node value \u003d initialization.getAssignedValue();\n     Preconditions.checkState(value !\u003d null);\n     if (value.isGetProp() \u0026\u0026 reference.getParent().isCall() \u0026\u0026 reference.getParent().getFirstChild() \u003d\u003d reference.getNode()) {\n         return false;\n     }\n     if (value.isFunction()) {\n         Node callNode \u003d reference.getParent();\n         if (reference.getParent().isCall()) {\n-            SubclassRelationship relationship \u003d compiler.getCodingConvention().getClassesDefinedByCall(callNode);\n+            CodingConvention convention \u003d compiler.getCodingConvention();\n+            SubclassRelationship relationship \u003d convention.getClassesDefinedByCall(callNode);\n             if (relationship !\u003d null) {\n                 return false;\n             }\n+            if (convention.getSingletonGetterClassName(callNode) !\u003d null) {\n+                return false;\n+            }\n         }\n     }\n     return canMoveAggressively(value) || canMoveModerately(initialization, reference);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "39f629a8cfaab37da55288010640d7e516000b1f": {
      "type": "Ybodychange",
      "commitMessage": "\nReplace calls of the form \"Node.getType() !\u003d Token.XX\" with\n\"!Node.isXX()\" calls.\n\nR\u003dnicksantos\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3706\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1598 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/14/11, 6:13 PM",
      "commitName": "39f629a8cfaab37da55288010640d7e516000b1f",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/10/11, 8:36 AM",
      "commitNameOld": "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 4.4,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "actualSource": "private boolean canInline(Reference declaration, Reference initialization, Reference reference) {\n    if (!isValidDeclaration(declaration) || !isValidInitialization(initialization) || !isValidReference(reference)) {\n        return false;\n    }\n    if (declaration !\u003d initialization \u0026\u0026 !initialization.getGrandparent().isExprResult()) {\n        return false;\n    }\n    if (declaration.getBasicBlock() !\u003d initialization.getBasicBlock() || declaration.getBasicBlock() !\u003d reference.getBasicBlock()) {\n        return false;\n    }\n    Node value \u003d initialization.getAssignedValue();\n    Preconditions.checkState(value !\u003d null);\n    if (value.isGetProp() \u0026\u0026 reference.getParent().isCall() \u0026\u0026 reference.getParent().getFirstChild() \u003d\u003d reference.getNode()) {\n        return false;\n    }\n    if (value.isFunction()) {\n        Node callNode \u003d reference.getParent();\n        if (reference.getParent().isCall()) {\n            SubclassRelationship relationship \u003d compiler.getCodingConvention().getClassesDefinedByCall(callNode);\n            if (relationship !\u003d null) {\n                return false;\n            }\n        }\n    }\n    return canMoveAggressively(value) || canMoveModerately(initialization, reference);\n}",
      "path": "src/com/google/javascript/jscomp/InlineVariables.java",
      "functionStartLine": 519,
      "functionName": "canInline",
      "functionAnnotation": "",
      "functionDoc": "\n@return true if the provided reference and declaration can be safely\n        inlined according to our criteria\n",
      "diff": "@@ -1,26 +1,26 @@\n private boolean canInline(Reference declaration, Reference initialization, Reference reference) {\n     if (!isValidDeclaration(declaration) || !isValidInitialization(initialization) || !isValidReference(reference)) {\n         return false;\n     }\n-    if (declaration !\u003d initialization \u0026\u0026 initialization.getGrandparent().getType() !\u003d Token.EXPR_RESULT) {\n+    if (declaration !\u003d initialization \u0026\u0026 !initialization.getGrandparent().isExprResult()) {\n         return false;\n     }\n     if (declaration.getBasicBlock() !\u003d initialization.getBasicBlock() || declaration.getBasicBlock() !\u003d reference.getBasicBlock()) {\n         return false;\n     }\n     Node value \u003d initialization.getAssignedValue();\n     Preconditions.checkState(value !\u003d null);\n     if (value.isGetProp() \u0026\u0026 reference.getParent().isCall() \u0026\u0026 reference.getParent().getFirstChild() \u003d\u003d reference.getNode()) {\n         return false;\n     }\n     if (value.isFunction()) {\n         Node callNode \u003d reference.getParent();\n         if (reference.getParent().isCall()) {\n             SubclassRelationship relationship \u003d compiler.getCodingConvention().getClassesDefinedByCall(callNode);\n             if (relationship !\u003d null) {\n                 return false;\n             }\n         }\n     }\n     return canMoveAggressively(value) || canMoveModerately(initialization, reference);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c": {
      "type": "Ybodychange",
      "commitMessage": "\nReplace the bulk of the Node.getType() \u003d\u003d Token.XXX calls with\nNode.isXXX calls.\n\nR\u003dnicksantos\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3677\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1582 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/10/11, 8:36 AM",
      "commitName": "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "6/23/11, 1:45 PM",
      "commitNameOld": "03db3415761aa9d8ba2fafa0ed64116a8331b1a9",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 139.83,
      "commitsBetweenForRepo": 340,
      "commitsBetweenForFile": 1,
      "actualSource": "private boolean canInline(Reference declaration, Reference initialization, Reference reference) {\n    if (!isValidDeclaration(declaration) || !isValidInitialization(initialization) || !isValidReference(reference)) {\n        return false;\n    }\n    if (declaration !\u003d initialization \u0026\u0026 initialization.getGrandparent().getType() !\u003d Token.EXPR_RESULT) {\n        return false;\n    }\n    if (declaration.getBasicBlock() !\u003d initialization.getBasicBlock() || declaration.getBasicBlock() !\u003d reference.getBasicBlock()) {\n        return false;\n    }\n    Node value \u003d initialization.getAssignedValue();\n    Preconditions.checkState(value !\u003d null);\n    if (value.isGetProp() \u0026\u0026 reference.getParent().isCall() \u0026\u0026 reference.getParent().getFirstChild() \u003d\u003d reference.getNode()) {\n        return false;\n    }\n    if (value.isFunction()) {\n        Node callNode \u003d reference.getParent();\n        if (reference.getParent().isCall()) {\n            SubclassRelationship relationship \u003d compiler.getCodingConvention().getClassesDefinedByCall(callNode);\n            if (relationship !\u003d null) {\n                return false;\n            }\n        }\n    }\n    return canMoveAggressively(value) || canMoveModerately(initialization, reference);\n}",
      "path": "src/com/google/javascript/jscomp/InlineVariables.java",
      "functionStartLine": 521,
      "functionName": "canInline",
      "functionAnnotation": "",
      "functionDoc": "\n@return true if the provided reference and declaration can be safely\n        inlined according to our criteria\n",
      "diff": "@@ -1,26 +1,26 @@\n private boolean canInline(Reference declaration, Reference initialization, Reference reference) {\n     if (!isValidDeclaration(declaration) || !isValidInitialization(initialization) || !isValidReference(reference)) {\n         return false;\n     }\n     if (declaration !\u003d initialization \u0026\u0026 initialization.getGrandparent().getType() !\u003d Token.EXPR_RESULT) {\n         return false;\n     }\n     if (declaration.getBasicBlock() !\u003d initialization.getBasicBlock() || declaration.getBasicBlock() !\u003d reference.getBasicBlock()) {\n         return false;\n     }\n     Node value \u003d initialization.getAssignedValue();\n     Preconditions.checkState(value !\u003d null);\n-    if (value.getType() \u003d\u003d Token.GETPROP \u0026\u0026 reference.getParent().getType() \u003d\u003d Token.CALL \u0026\u0026 reference.getParent().getFirstChild() \u003d\u003d reference.getNode()) {\n+    if (value.isGetProp() \u0026\u0026 reference.getParent().isCall() \u0026\u0026 reference.getParent().getFirstChild() \u003d\u003d reference.getNode()) {\n         return false;\n     }\n-    if (value.getType() \u003d\u003d Token.FUNCTION) {\n+    if (value.isFunction()) {\n         Node callNode \u003d reference.getParent();\n-        if (reference.getParent().getType() \u003d\u003d Token.CALL) {\n+        if (reference.getParent().isCall()) {\n             SubclassRelationship relationship \u003d compiler.getCodingConvention().getClassesDefinedByCall(callNode);\n             if (relationship !\u003d null) {\n                 return false;\n             }\n         }\n     }\n     return canMoveAggressively(value) || canMoveModerately(initialization, reference);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "fb1ca6ab49d90553268b711edc805c47ceae5088": {
      "type": "Ybodychange",
      "commitMessage": "\nCreate an inferface for references in the symbol table\n\nR\u003dacleung\nDELTA\u003d275  (214 added, 16 deleted, 45 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2317\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1185 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/16/11, 11:12 AM",
      "commitName": "fb1ca6ab49d90553268b711edc805c47ceae5088",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "5/24/11, 10:36 AM",
      "commitNameOld": "75a9013e3907e5db97f10578227497d7b018caf5",
      "commitAuthorOld": "bashir@google.com",
      "daysBetweenCommits": 23.02,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "actualSource": "private boolean canInline(Reference declaration, Reference initialization, Reference reference) {\n    if (!isValidDeclaration(declaration) || !isValidInitialization(initialization) || !isValidReference(reference)) {\n        return false;\n    }\n    if (declaration !\u003d initialization \u0026\u0026 initialization.getGrandparent().getType() !\u003d Token.EXPR_RESULT) {\n        return false;\n    }\n    if (declaration.getBasicBlock() !\u003d initialization.getBasicBlock() || declaration.getBasicBlock() !\u003d reference.getBasicBlock()) {\n        return false;\n    }\n    Node value \u003d initialization.getAssignedValue();\n    Preconditions.checkState(value !\u003d null);\n    if (value.getType() \u003d\u003d Token.GETPROP \u0026\u0026 reference.getParent().getType() \u003d\u003d Token.CALL \u0026\u0026 reference.getParent().getFirstChild() \u003d\u003d reference.getNode()) {\n        return false;\n    }\n    if (value.getType() \u003d\u003d Token.FUNCTION) {\n        Node callNode \u003d reference.getParent();\n        if (reference.getParent().getType() \u003d\u003d Token.CALL) {\n            SubclassRelationship relationship \u003d compiler.getCodingConvention().getClassesDefinedByCall(callNode);\n            if (relationship !\u003d null) {\n                return false;\n            }\n        }\n    }\n    return canMoveAggressively(value) || canMoveModerately(initialization, reference);\n}",
      "path": "src/com/google/javascript/jscomp/InlineVariables.java",
      "functionStartLine": 520,
      "functionName": "canInline",
      "functionAnnotation": "",
      "functionDoc": "\n@return true if the provided reference and declaration can be safely\n        inlined according to our criteria\n",
      "diff": "@@ -1,26 +1,26 @@\n private boolean canInline(Reference declaration, Reference initialization, Reference reference) {\n     if (!isValidDeclaration(declaration) || !isValidInitialization(initialization) || !isValidReference(reference)) {\n         return false;\n     }\n     if (declaration !\u003d initialization \u0026\u0026 initialization.getGrandparent().getType() !\u003d Token.EXPR_RESULT) {\n         return false;\n     }\n     if (declaration.getBasicBlock() !\u003d initialization.getBasicBlock() || declaration.getBasicBlock() !\u003d reference.getBasicBlock()) {\n         return false;\n     }\n     Node value \u003d initialization.getAssignedValue();\n     Preconditions.checkState(value !\u003d null);\n-    if (value.getType() \u003d\u003d Token.GETPROP \u0026\u0026 reference.getParent().getType() \u003d\u003d Token.CALL \u0026\u0026 reference.getParent().getFirstChild() \u003d\u003d reference.getNameNode()) {\n+    if (value.getType() \u003d\u003d Token.GETPROP \u0026\u0026 reference.getParent().getType() \u003d\u003d Token.CALL \u0026\u0026 reference.getParent().getFirstChild() \u003d\u003d reference.getNode()) {\n         return false;\n     }\n     if (value.getType() \u003d\u003d Token.FUNCTION) {\n         Node callNode \u003d reference.getParent();\n         if (reference.getParent().getType() \u003d\u003d Token.CALL) {\n             SubclassRelationship relationship \u003d compiler.getCodingConvention().getClassesDefinedByCall(callNode);\n             if (relationship !\u003d null) {\n                 return false;\n             }\n         }\n     }\n     return canMoveAggressively(value) || canMoveModerately(initialization, reference);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c6848064f7a5f696e34b6054ea6cc75b13eb9acc": {
      "type": "Ybodychange",
      "commitMessage": "Allow @typedefs to never be assigned. (Nick Santos)\n\nSimple solution to goog.inherit calls not getting stripped when the\nsubclass constructor is inlined into the call. (John Lenz)\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@109 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/17/10, 1:34 PM",
      "commitName": "c6848064f7a5f696e34b6054ea6cc75b13eb9acc",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "2/11/10, 1:02 PM",
      "commitNameOld": "1771d2005a441cb87df2a488069f265bd71ed9ee",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 6.02,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "private boolean canInline(Reference declaration, Reference initialization, Reference reference) {\n    if (!isValidDeclaration(declaration) || !isValidInitialization(initialization) || !isValidReference(reference)) {\n        return false;\n    }\n    if (declaration !\u003d initialization \u0026\u0026 initialization.getGrandparent().getType() !\u003d Token.EXPR_RESULT) {\n        return false;\n    }\n    if (declaration.getBasicBlock() !\u003d initialization.getBasicBlock() || declaration.getBasicBlock() !\u003d reference.getBasicBlock()) {\n        return false;\n    }\n    Node value \u003d initialization.getAssignedValue();\n    Preconditions.checkState(value !\u003d null);\n    if (value.getType() \u003d\u003d Token.GETPROP \u0026\u0026 reference.getParent().getType() \u003d\u003d Token.CALL \u0026\u0026 reference.getParent().getFirstChild() \u003d\u003d reference.getNameNode()) {\n        return false;\n    }\n    if (value.getType() \u003d\u003d Token.FUNCTION) {\n        Node callNode \u003d reference.getParent();\n        if (reference.getParent().getType() \u003d\u003d Token.CALL) {\n            SubclassRelationship relationship \u003d compiler.getCodingConvention().getClassesDefinedByCall(callNode);\n            if (relationship !\u003d null) {\n                return false;\n            }\n        }\n    }\n    return canMoveAggressively(value) || canMoveModerately(initialization, reference);\n}",
      "path": "src/com/google/javascript/jscomp/InlineVariables.java",
      "functionStartLine": 478,
      "functionName": "canInline",
      "functionAnnotation": "",
      "functionDoc": "\n@return true if the provided reference and declaration can be safely\n        inlined according to our criteria\n",
      "diff": "@@ -1,17 +1,26 @@\n private boolean canInline(Reference declaration, Reference initialization, Reference reference) {\n     if (!isValidDeclaration(declaration) || !isValidInitialization(initialization) || !isValidReference(reference)) {\n         return false;\n     }\n     if (declaration !\u003d initialization \u0026\u0026 initialization.getGrandparent().getType() !\u003d Token.EXPR_RESULT) {\n         return false;\n     }\n     if (declaration.getBasicBlock() !\u003d initialization.getBasicBlock() || declaration.getBasicBlock() !\u003d reference.getBasicBlock()) {\n         return false;\n     }\n     Node value \u003d initialization.getAssignedValue();\n     Preconditions.checkState(value !\u003d null);\n     if (value.getType() \u003d\u003d Token.GETPROP \u0026\u0026 reference.getParent().getType() \u003d\u003d Token.CALL \u0026\u0026 reference.getParent().getFirstChild() \u003d\u003d reference.getNameNode()) {\n         return false;\n     }\n+    if (value.getType() \u003d\u003d Token.FUNCTION) {\n+        Node callNode \u003d reference.getParent();\n+        if (reference.getParent().getType() \u003d\u003d Token.CALL) {\n+            SubclassRelationship relationship \u003d compiler.getCodingConvention().getClassesDefinedByCall(callNode);\n+            if (relationship !\u003d null) {\n+                return false;\n+            }\n+        }\n+    }\n     return canMoveAggressively(value) || canMoveModerately(initialization, reference);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "78995bf9e88599055a8c4165d89c09dc92a44b30": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Fix synthesis of vars in DEFAULT mode.\nBetter variable inlining\nBetter function inlining\nAssorted bug fixes\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@6 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/10/09, 11:16 AM",
      "commitName": "78995bf9e88599055a8c4165d89c09dc92a44b30",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Fix synthesis of vars in DEFAULT mode.\nBetter variable inlining\nBetter function inlining\nAssorted bug fixes\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@6 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "11/10/09, 11:16 AM",
          "commitName": "78995bf9e88599055a8c4165d89c09dc92a44b30",
          "commitAuthor": "nicholas.j.santos@gmail.com",
          "commitDateOld": "11/6/09, 5:24 PM",
          "commitNameOld": "0b7eccf2fd3a9293d7b513fbb766d7bc06abd7e0",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 3.74,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "private boolean canInline(Reference declaration, Reference initialization, Reference reference) {\n    if (!isValidDeclaration(declaration) || !isValidInitialization(initialization) || !isValidReference(reference)) {\n        return false;\n    }\n    if (declaration !\u003d initialization \u0026\u0026 initialization.getGrandparent().getType() !\u003d Token.EXPR_RESULT) {\n        return false;\n    }\n    if (declaration.getBasicBlock() !\u003d initialization.getBasicBlock() || declaration.getBasicBlock() !\u003d reference.getBasicBlock()) {\n        return false;\n    }\n    Node value \u003d initialization.getAssignedValue();\n    Preconditions.checkState(value !\u003d null);\n    if (value.getType() \u003d\u003d Token.GETPROP \u0026\u0026 reference.getParent().getType() \u003d\u003d Token.CALL \u0026\u0026 reference.getParent().getFirstChild() \u003d\u003d reference.getNameNode()) {\n        return false;\n    }\n    return canMoveAggressively(value) || canMoveModerately(initialization, reference);\n}",
          "path": "src/com/google/javascript/jscomp/InlineVariables.java",
          "functionStartLine": 440,
          "functionName": "canInline",
          "functionAnnotation": "",
          "functionDoc": "\n@return true if the provided reference and declaration can be safely\n        inlined according to our criteria\n",
          "diff": "@@ -1,12 +1,17 @@\n-private boolean canInline(Reference declaration, Reference reference) {\n-    if (!isValidDeclaration(declaration) || !isValidReference(reference)) {\n+private boolean canInline(Reference declaration, Reference initialization, Reference reference) {\n+    if (!isValidDeclaration(declaration) || !isValidInitialization(initialization) || !isValidReference(reference)) {\n         return false;\n     }\n-    if (declaration.getBasicBlock() !\u003d reference.getBasicBlock()) {\n+    if (declaration !\u003d initialization \u0026\u0026 initialization.getGrandparent().getType() !\u003d Token.EXPR_RESULT) {\n         return false;\n     }\n-    if (declaration.getNameNode().getFirstChild().getType() \u003d\u003d Token.GETPROP \u0026\u0026 reference.getParent().getType() \u003d\u003d Token.CALL) {\n+    if (declaration.getBasicBlock() !\u003d initialization.getBasicBlock() || declaration.getBasicBlock() !\u003d reference.getBasicBlock()) {\n         return false;\n     }\n-    return canMoveAggressively(declaration) || canMoveModerately(declaration, reference);\n+    Node value \u003d initialization.getAssignedValue();\n+    Preconditions.checkState(value !\u003d null);\n+    if (value.getType() \u003d\u003d Token.GETPROP \u0026\u0026 reference.getParent().getType() \u003d\u003d Token.CALL \u0026\u0026 reference.getParent().getFirstChild() \u003d\u003d reference.getNameNode()) {\n+        return false;\n+    }\n+    return canMoveAggressively(value) || canMoveModerately(initialization, reference);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[declaration-Reference, reference-Reference]",
            "newValue": "[declaration-Reference, initialization-Reference, reference-Reference]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Fix synthesis of vars in DEFAULT mode.\nBetter variable inlining\nBetter function inlining\nAssorted bug fixes\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@6 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "11/10/09, 11:16 AM",
          "commitName": "78995bf9e88599055a8c4165d89c09dc92a44b30",
          "commitAuthor": "nicholas.j.santos@gmail.com",
          "commitDateOld": "11/6/09, 5:24 PM",
          "commitNameOld": "0b7eccf2fd3a9293d7b513fbb766d7bc06abd7e0",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 3.74,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "private boolean canInline(Reference declaration, Reference initialization, Reference reference) {\n    if (!isValidDeclaration(declaration) || !isValidInitialization(initialization) || !isValidReference(reference)) {\n        return false;\n    }\n    if (declaration !\u003d initialization \u0026\u0026 initialization.getGrandparent().getType() !\u003d Token.EXPR_RESULT) {\n        return false;\n    }\n    if (declaration.getBasicBlock() !\u003d initialization.getBasicBlock() || declaration.getBasicBlock() !\u003d reference.getBasicBlock()) {\n        return false;\n    }\n    Node value \u003d initialization.getAssignedValue();\n    Preconditions.checkState(value !\u003d null);\n    if (value.getType() \u003d\u003d Token.GETPROP \u0026\u0026 reference.getParent().getType() \u003d\u003d Token.CALL \u0026\u0026 reference.getParent().getFirstChild() \u003d\u003d reference.getNameNode()) {\n        return false;\n    }\n    return canMoveAggressively(value) || canMoveModerately(initialization, reference);\n}",
          "path": "src/com/google/javascript/jscomp/InlineVariables.java",
          "functionStartLine": 440,
          "functionName": "canInline",
          "functionAnnotation": "",
          "functionDoc": "\n@return true if the provided reference and declaration can be safely\n        inlined according to our criteria\n",
          "diff": "@@ -1,12 +1,17 @@\n-private boolean canInline(Reference declaration, Reference reference) {\n-    if (!isValidDeclaration(declaration) || !isValidReference(reference)) {\n+private boolean canInline(Reference declaration, Reference initialization, Reference reference) {\n+    if (!isValidDeclaration(declaration) || !isValidInitialization(initialization) || !isValidReference(reference)) {\n         return false;\n     }\n-    if (declaration.getBasicBlock() !\u003d reference.getBasicBlock()) {\n+    if (declaration !\u003d initialization \u0026\u0026 initialization.getGrandparent().getType() !\u003d Token.EXPR_RESULT) {\n         return false;\n     }\n-    if (declaration.getNameNode().getFirstChild().getType() \u003d\u003d Token.GETPROP \u0026\u0026 reference.getParent().getType() \u003d\u003d Token.CALL) {\n+    if (declaration.getBasicBlock() !\u003d initialization.getBasicBlock() || declaration.getBasicBlock() !\u003d reference.getBasicBlock()) {\n         return false;\n     }\n-    return canMoveAggressively(declaration) || canMoveModerately(declaration, reference);\n+    Node value \u003d initialization.getAssignedValue();\n+    Preconditions.checkState(value !\u003d null);\n+    if (value.getType() \u003d\u003d Token.GETPROP \u0026\u0026 reference.getParent().getType() \u003d\u003d Token.CALL \u0026\u0026 reference.getParent().getFirstChild() \u003d\u003d reference.getNameNode()) {\n+        return false;\n+    }\n+    return canMoveAggressively(value) || canMoveModerately(initialization, reference);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,12 @@\n+private boolean canInline(Reference declaration, Reference reference) {\n+    if (!isValidDeclaration(declaration) || !isValidReference(reference)) {\n+        return false;\n+    }\n+    if (declaration.getBasicBlock() !\u003d reference.getBasicBlock()) {\n+        return false;\n+    }\n+    if (declaration.getNameNode().getFirstChild().getType() \u003d\u003d Token.GETPROP \u0026\u0026 reference.getParent().getType() \u003d\u003d Token.CALL) {\n+        return false;\n+    }\n+    return canMoveAggressively(declaration) || canMoveModerately(declaration, reference);\n+}\n\\ No newline at end of file\n",
      "actualSource": "private boolean canInline(Reference declaration, Reference reference) {\n    if (!isValidDeclaration(declaration) || !isValidReference(reference)) {\n        return false;\n    }\n    if (declaration.getBasicBlock() !\u003d reference.getBasicBlock()) {\n        return false;\n    }\n    if (declaration.getNameNode().getFirstChild().getType() \u003d\u003d Token.GETPROP \u0026\u0026 reference.getParent().getType() \u003d\u003d Token.CALL) {\n        return false;\n    }\n    return canMoveAggressively(declaration) || canMoveModerately(declaration, reference);\n}",
      "path": "src/com/google/javascript/jscomp/InlineVariables.java",
      "functionStartLine": 424,
      "functionName": "canInline",
      "functionAnnotation": "",
      "functionDoc": "\n@return true if the provided reference and declaration can be safely\n        inlined according to our criteria\n"
    }
  }
}