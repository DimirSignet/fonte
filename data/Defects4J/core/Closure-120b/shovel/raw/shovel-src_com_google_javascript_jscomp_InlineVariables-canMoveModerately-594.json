{
  "origin": "codeshovel",
  "repositoryName": "Closure-120b",
  "repositoryPath": "/tmp/Closure-120b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "InlineVariables.java",
  "functionName": "canMoveModerately",
  "functionId": "$canMoveModerately___initialization-Reference__reference-Reference",
  "sourceFilePath": "src/com/google/javascript/jscomp/InlineVariables.java",
  "functionAnnotation": "",
  "functionDoc": "If the value of a variable is not constant, then it may read or modify\nstate. Therefore it cannot be moved past anything else that may modify\nthe value being read or read values that are modified.\n",
  "functionStartLine": 594,
  "functionEndLine": 626,
  "numCommitsSeen": 36,
  "timeTaken": 2078,
  "changeHistory": [
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
    "fb1ca6ab49d90553268b711edc805c47ceae5088",
    "f0362b1ab1ae1339e017b1d04f016980e3fa6cb6",
    "78995bf9e88599055a8c4165d89c09dc92a44b30",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c": "Ybodychange",
    "fb1ca6ab49d90553268b711edc805c47ceae5088": "Ybodychange",
    "f0362b1ab1ae1339e017b1d04f016980e3fa6cb6": "Ybodychange",
    "78995bf9e88599055a8c4165d89c09dc92a44b30": "Ymultichange(Yparameterchange,Ybodychange)",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ec324a9bb23eb78c76f537f4c4170ba88d542f1c": {
      "type": "Ybodychange",
      "commitMessage": "\nReplace the bulk of the Node.getType() \u003d\u003d Token.XXX calls with\nNode.isXXX calls.\n\nR\u003dnicksantos\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3677\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1582 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/10/11, 8:36 AM",
      "commitName": "ec324a9bb23eb78c76f537f4c4170ba88d542f1c",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "6/23/11, 1:45 PM",
      "commitNameOld": "03db3415761aa9d8ba2fafa0ed64116a8331b1a9",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 139.83,
      "commitsBetweenForRepo": 340,
      "commitsBetweenForFile": 1,
      "actualSource": "private boolean canMoveModerately(Reference initialization, Reference reference) {\n    Iterator\u003cNode\u003e it;\n    if (initialization.getParent().isVar()) {\n        it \u003d NodeIterators.LocalVarMotion.forVar(initialization.getNode(), initialization.getParent(), initialization.getGrandparent());\n    } else if (initialization.getParent().isAssign()) {\n        Preconditions.checkState(initialization.getGrandparent().isExprResult());\n        it \u003d NodeIterators.LocalVarMotion.forAssign(initialization.getNode(), initialization.getParent(), initialization.getGrandparent(), initialization.getGrandparent().getParent());\n    } else {\n        throw new IllegalStateException(\"Unexpected initialization parent \" + initialization.getParent().toStringTree());\n    }\n    Node targetName \u003d reference.getNode();\n    while (it.hasNext()) {\n        Node curNode \u003d it.next();\n        if (curNode \u003d\u003d targetName) {\n            return true;\n        }\n    }\n    return false;\n}",
      "path": "src/com/google/javascript/jscomp/InlineVariables.java",
      "functionStartLine": 595,
      "functionName": "canMoveModerately",
      "functionAnnotation": "",
      "functionDoc": "If the value of a variable is not constant, then it may read or modify\nstate. Therefore it cannot be moved past anything else that may modify\nthe value being read or read values that are modified.\n",
      "diff": "@@ -1,19 +1,19 @@\n private boolean canMoveModerately(Reference initialization, Reference reference) {\n     Iterator\u003cNode\u003e it;\n-    if (initialization.getParent().getType() \u003d\u003d Token.VAR) {\n+    if (initialization.getParent().isVar()) {\n         it \u003d NodeIterators.LocalVarMotion.forVar(initialization.getNode(), initialization.getParent(), initialization.getGrandparent());\n-    } else if (initialization.getParent().getType() \u003d\u003d Token.ASSIGN) {\n-        Preconditions.checkState(initialization.getGrandparent().getType() \u003d\u003d Token.EXPR_RESULT);\n+    } else if (initialization.getParent().isAssign()) {\n+        Preconditions.checkState(initialization.getGrandparent().isExprResult());\n         it \u003d NodeIterators.LocalVarMotion.forAssign(initialization.getNode(), initialization.getParent(), initialization.getGrandparent(), initialization.getGrandparent().getParent());\n     } else {\n         throw new IllegalStateException(\"Unexpected initialization parent \" + initialization.getParent().toStringTree());\n     }\n     Node targetName \u003d reference.getNode();\n     while (it.hasNext()) {\n         Node curNode \u003d it.next();\n         if (curNode \u003d\u003d targetName) {\n             return true;\n         }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "fb1ca6ab49d90553268b711edc805c47ceae5088": {
      "type": "Ybodychange",
      "commitMessage": "\nCreate an inferface for references in the symbol table\n\nR\u003dacleung\nDELTA\u003d275  (214 added, 16 deleted, 45 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2317\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1185 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/16/11, 11:12 AM",
      "commitName": "fb1ca6ab49d90553268b711edc805c47ceae5088",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "5/24/11, 10:36 AM",
      "commitNameOld": "75a9013e3907e5db97f10578227497d7b018caf5",
      "commitAuthorOld": "bashir@google.com",
      "daysBetweenCommits": 23.02,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "actualSource": "private boolean canMoveModerately(Reference initialization, Reference reference) {\n    Iterator\u003cNode\u003e it;\n    if (initialization.getParent().getType() \u003d\u003d Token.VAR) {\n        it \u003d NodeIterators.LocalVarMotion.forVar(initialization.getNode(), initialization.getParent(), initialization.getGrandparent());\n    } else if (initialization.getParent().getType() \u003d\u003d Token.ASSIGN) {\n        Preconditions.checkState(initialization.getGrandparent().getType() \u003d\u003d Token.EXPR_RESULT);\n        it \u003d NodeIterators.LocalVarMotion.forAssign(initialization.getNode(), initialization.getParent(), initialization.getGrandparent(), initialization.getGrandparent().getParent());\n    } else {\n        throw new IllegalStateException(\"Unexpected initialization parent \" + initialization.getParent().toStringTree());\n    }\n    Node targetName \u003d reference.getNode();\n    while (it.hasNext()) {\n        Node curNode \u003d it.next();\n        if (curNode \u003d\u003d targetName) {\n            return true;\n        }\n    }\n    return false;\n}",
      "path": "src/com/google/javascript/jscomp/InlineVariables.java",
      "functionStartLine": 594,
      "functionName": "canMoveModerately",
      "functionAnnotation": "",
      "functionDoc": "If the value of a variable is not constant, then it may read or modify\nstate. Therefore it cannot be moved past anything else that may modify\nthe value being read or read values that are modified.\n",
      "diff": "@@ -1,19 +1,19 @@\n private boolean canMoveModerately(Reference initialization, Reference reference) {\n     Iterator\u003cNode\u003e it;\n     if (initialization.getParent().getType() \u003d\u003d Token.VAR) {\n-        it \u003d NodeIterators.LocalVarMotion.forVar(initialization.getNameNode(), initialization.getParent(), initialization.getGrandparent());\n+        it \u003d NodeIterators.LocalVarMotion.forVar(initialization.getNode(), initialization.getParent(), initialization.getGrandparent());\n     } else if (initialization.getParent().getType() \u003d\u003d Token.ASSIGN) {\n         Preconditions.checkState(initialization.getGrandparent().getType() \u003d\u003d Token.EXPR_RESULT);\n-        it \u003d NodeIterators.LocalVarMotion.forAssign(initialization.getNameNode(), initialization.getParent(), initialization.getGrandparent(), initialization.getGrandparent().getParent());\n+        it \u003d NodeIterators.LocalVarMotion.forAssign(initialization.getNode(), initialization.getParent(), initialization.getGrandparent(), initialization.getGrandparent().getParent());\n     } else {\n         throw new IllegalStateException(\"Unexpected initialization parent \" + initialization.getParent().toStringTree());\n     }\n-    Node targetName \u003d reference.getNameNode();\n+    Node targetName \u003d reference.getNode();\n     while (it.hasNext()) {\n         Node curNode \u003d it.next();\n         if (curNode \u003d\u003d targetName) {\n             return true;\n         }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f0362b1ab1ae1339e017b1d04f016980e3fa6cb6": {
      "type": "Ybodychange",
      "commitMessage": "\nfix a bug where NodeUtil was reporting function literals\nas immutable. functions are mutable.\nMake isLiteralValue a bit more flexible, so that it can\nidentify function literals.\ndo some additional folding on function literals.\n\nR\u003dacleung\nDELTA\u003d68  (35 added, 1 deleted, 32 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d64001\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@308 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/23/10, 2:49 PM",
      "commitName": "f0362b1ab1ae1339e017b1d04f016980e3fa6cb6",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "6/10/10, 1:12 PM",
      "commitNameOld": "d1df970451b5a18956448097b3afb43f3a82263d",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 43.07,
      "commitsBetweenForRepo": 66,
      "commitsBetweenForFile": 1,
      "actualSource": "private boolean canMoveModerately(Reference initialization, Reference reference) {\n    Iterator\u003cNode\u003e it;\n    if (initialization.getParent().getType() \u003d\u003d Token.VAR) {\n        it \u003d NodeIterators.LocalVarMotion.forVar(initialization.getNameNode(), initialization.getParent(), initialization.getGrandparent());\n    } else if (initialization.getParent().getType() \u003d\u003d Token.ASSIGN) {\n        Preconditions.checkState(initialization.getGrandparent().getType() \u003d\u003d Token.EXPR_RESULT);\n        it \u003d NodeIterators.LocalVarMotion.forAssign(initialization.getNameNode(), initialization.getParent(), initialization.getGrandparent(), initialization.getGrandparent().getParent());\n    } else {\n        throw new IllegalStateException(\"Unexpected initialization parent \" + initialization.getParent().toStringTree());\n    }\n    Node targetName \u003d reference.getNameNode();\n    while (it.hasNext()) {\n        Node curNode \u003d it.next();\n        if (curNode \u003d\u003d targetName) {\n            return true;\n        }\n    }\n    return false;\n}",
      "path": "src/com/google/javascript/jscomp/InlineVariables.java",
      "functionStartLine": 561,
      "functionName": "canMoveModerately",
      "functionAnnotation": "",
      "functionDoc": "If the value of a variable is not constant, then it may read or modify\nstate. Therefore it cannot be moved past anything else that may modify\nthe value being read or read values that are modified.\n",
      "diff": "@@ -1,19 +1,19 @@\n private boolean canMoveModerately(Reference initialization, Reference reference) {\n     Iterator\u003cNode\u003e it;\n     if (initialization.getParent().getType() \u003d\u003d Token.VAR) {\n         it \u003d NodeIterators.LocalVarMotion.forVar(initialization.getNameNode(), initialization.getParent(), initialization.getGrandparent());\n     } else if (initialization.getParent().getType() \u003d\u003d Token.ASSIGN) {\n         Preconditions.checkState(initialization.getGrandparent().getType() \u003d\u003d Token.EXPR_RESULT);\n         it \u003d NodeIterators.LocalVarMotion.forAssign(initialization.getNameNode(), initialization.getParent(), initialization.getGrandparent(), initialization.getGrandparent().getParent());\n     } else {\n-        throw new IllegalStateException(\"Unexpected initialiation parent\");\n+        throw new IllegalStateException(\"Unexpected initialization parent \" + initialization.getParent().toStringTree());\n     }\n     Node targetName \u003d reference.getNameNode();\n     while (it.hasNext()) {\n         Node curNode \u003d it.next();\n         if (curNode \u003d\u003d targetName) {\n             return true;\n         }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "78995bf9e88599055a8c4165d89c09dc92a44b30": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Fix synthesis of vars in DEFAULT mode.\nBetter variable inlining\nBetter function inlining\nAssorted bug fixes\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@6 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/10/09, 11:16 AM",
      "commitName": "78995bf9e88599055a8c4165d89c09dc92a44b30",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Fix synthesis of vars in DEFAULT mode.\nBetter variable inlining\nBetter function inlining\nAssorted bug fixes\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@6 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "11/10/09, 11:16 AM",
          "commitName": "78995bf9e88599055a8c4165d89c09dc92a44b30",
          "commitAuthor": "nicholas.j.santos@gmail.com",
          "commitDateOld": "11/6/09, 5:24 PM",
          "commitNameOld": "0b7eccf2fd3a9293d7b513fbb766d7bc06abd7e0",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 3.74,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "private boolean canMoveModerately(Reference initialization, Reference reference) {\n    Iterator\u003cNode\u003e it;\n    if (initialization.getParent().getType() \u003d\u003d Token.VAR) {\n        it \u003d NodeIterators.LocalVarMotion.forVar(initialization.getNameNode(), initialization.getParent(), initialization.getGrandparent());\n    } else if (initialization.getParent().getType() \u003d\u003d Token.ASSIGN) {\n        Preconditions.checkState(initialization.getGrandparent().getType() \u003d\u003d Token.EXPR_RESULT);\n        it \u003d NodeIterators.LocalVarMotion.forAssign(initialization.getNameNode(), initialization.getParent(), initialization.getGrandparent(), initialization.getGrandparent().getParent());\n    } else {\n        throw new IllegalStateException(\"Unexpected initialiation parent\");\n    }\n    Node targetName \u003d reference.getNameNode();\n    while (it.hasNext()) {\n        Node curNode \u003d it.next();\n        if (curNode \u003d\u003d targetName) {\n            return true;\n        }\n    }\n    return false;\n}",
          "path": "src/com/google/javascript/jscomp/InlineVariables.java",
          "functionStartLine": 501,
          "functionName": "canMoveModerately",
          "functionAnnotation": "",
          "functionDoc": "If the value of a variable is not constant, then it may read or modify\nstate. Therefore it cannot be moved past anything else that may modify\nthe value being read or read values that are modified.\n",
          "diff": "@@ -1,11 +1,19 @@\n-private boolean canMoveModerately(Reference declaration, Reference reference) {\n-    Iterator\u003cNode\u003e it \u003d new NodeIterators.LocalVarMotion(declaration.getNameNode(), declaration.getParent(), declaration.getGrandparent());\n+private boolean canMoveModerately(Reference initialization, Reference reference) {\n+    Iterator\u003cNode\u003e it;\n+    if (initialization.getParent().getType() \u003d\u003d Token.VAR) {\n+        it \u003d NodeIterators.LocalVarMotion.forVar(initialization.getNameNode(), initialization.getParent(), initialization.getGrandparent());\n+    } else if (initialization.getParent().getType() \u003d\u003d Token.ASSIGN) {\n+        Preconditions.checkState(initialization.getGrandparent().getType() \u003d\u003d Token.EXPR_RESULT);\n+        it \u003d NodeIterators.LocalVarMotion.forAssign(initialization.getNameNode(), initialization.getParent(), initialization.getGrandparent(), initialization.getGrandparent().getParent());\n+    } else {\n+        throw new IllegalStateException(\"Unexpected initialiation parent\");\n+    }\n     Node targetName \u003d reference.getNameNode();\n     while (it.hasNext()) {\n         Node curNode \u003d it.next();\n         if (curNode \u003d\u003d targetName) {\n             return true;\n         }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[declaration-Reference, reference-Reference]",
            "newValue": "[initialization-Reference, reference-Reference]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Fix synthesis of vars in DEFAULT mode.\nBetter variable inlining\nBetter function inlining\nAssorted bug fixes\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@6 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "11/10/09, 11:16 AM",
          "commitName": "78995bf9e88599055a8c4165d89c09dc92a44b30",
          "commitAuthor": "nicholas.j.santos@gmail.com",
          "commitDateOld": "11/6/09, 5:24 PM",
          "commitNameOld": "0b7eccf2fd3a9293d7b513fbb766d7bc06abd7e0",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 3.74,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "private boolean canMoveModerately(Reference initialization, Reference reference) {\n    Iterator\u003cNode\u003e it;\n    if (initialization.getParent().getType() \u003d\u003d Token.VAR) {\n        it \u003d NodeIterators.LocalVarMotion.forVar(initialization.getNameNode(), initialization.getParent(), initialization.getGrandparent());\n    } else if (initialization.getParent().getType() \u003d\u003d Token.ASSIGN) {\n        Preconditions.checkState(initialization.getGrandparent().getType() \u003d\u003d Token.EXPR_RESULT);\n        it \u003d NodeIterators.LocalVarMotion.forAssign(initialization.getNameNode(), initialization.getParent(), initialization.getGrandparent(), initialization.getGrandparent().getParent());\n    } else {\n        throw new IllegalStateException(\"Unexpected initialiation parent\");\n    }\n    Node targetName \u003d reference.getNameNode();\n    while (it.hasNext()) {\n        Node curNode \u003d it.next();\n        if (curNode \u003d\u003d targetName) {\n            return true;\n        }\n    }\n    return false;\n}",
          "path": "src/com/google/javascript/jscomp/InlineVariables.java",
          "functionStartLine": 501,
          "functionName": "canMoveModerately",
          "functionAnnotation": "",
          "functionDoc": "If the value of a variable is not constant, then it may read or modify\nstate. Therefore it cannot be moved past anything else that may modify\nthe value being read or read values that are modified.\n",
          "diff": "@@ -1,11 +1,19 @@\n-private boolean canMoveModerately(Reference declaration, Reference reference) {\n-    Iterator\u003cNode\u003e it \u003d new NodeIterators.LocalVarMotion(declaration.getNameNode(), declaration.getParent(), declaration.getGrandparent());\n+private boolean canMoveModerately(Reference initialization, Reference reference) {\n+    Iterator\u003cNode\u003e it;\n+    if (initialization.getParent().getType() \u003d\u003d Token.VAR) {\n+        it \u003d NodeIterators.LocalVarMotion.forVar(initialization.getNameNode(), initialization.getParent(), initialization.getGrandparent());\n+    } else if (initialization.getParent().getType() \u003d\u003d Token.ASSIGN) {\n+        Preconditions.checkState(initialization.getGrandparent().getType() \u003d\u003d Token.EXPR_RESULT);\n+        it \u003d NodeIterators.LocalVarMotion.forAssign(initialization.getNameNode(), initialization.getParent(), initialization.getGrandparent(), initialization.getGrandparent().getParent());\n+    } else {\n+        throw new IllegalStateException(\"Unexpected initialiation parent\");\n+    }\n     Node targetName \u003d reference.getNameNode();\n     while (it.hasNext()) {\n         Node curNode \u003d it.next();\n         if (curNode \u003d\u003d targetName) {\n             return true;\n         }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,11 @@\n+private boolean canMoveModerately(Reference declaration, Reference reference) {\n+    Iterator\u003cNode\u003e it \u003d new NodeIterators.LocalVarMotion(declaration.getNameNode(), declaration.getParent(), declaration.getGrandparent());\n+    Node targetName \u003d reference.getNameNode();\n+    while (it.hasNext()) {\n+        Node curNode \u003d it.next();\n+        if (curNode \u003d\u003d targetName) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private boolean canMoveModerately(Reference declaration, Reference reference) {\n    Iterator\u003cNode\u003e it \u003d new NodeIterators.LocalVarMotion(declaration.getNameNode(), declaration.getParent(), declaration.getGrandparent());\n    Node targetName \u003d reference.getNameNode();\n    while (it.hasNext()) {\n        Node curNode \u003d it.next();\n        if (curNode \u003d\u003d targetName) {\n            return true;\n        }\n    }\n    return false;\n}",
      "path": "src/com/google/javascript/jscomp/InlineVariables.java",
      "functionStartLine": 463,
      "functionName": "canMoveModerately",
      "functionAnnotation": "",
      "functionDoc": "If the value of a variable is not constant, then it may read or modify\nstate. Therefore it cannot be moved past anything else that may modify\nthe value being read or read values that are modified.\n"
    }
  }
}