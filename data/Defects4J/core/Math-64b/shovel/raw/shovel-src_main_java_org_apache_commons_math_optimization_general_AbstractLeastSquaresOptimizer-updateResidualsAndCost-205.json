{
  "origin": "codeshovel",
  "repositoryName": "Math-64b",
  "repositoryPath": "/tmp/Math-64b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractLeastSquaresOptimizer.java",
  "functionName": "updateResidualsAndCost",
  "functionId": "updateResidualsAndCost",
  "sourceFilePath": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
  "functionAnnotation": "",
  "functionDoc": "Update the residuals array and cost function value.\n\n@exception FunctionEvaluationException if the function cannot be evaluated\nor its dimension doesn\u0027t match problem dimension or maximal number of\nof evaluations is exceeded\n",
  "functionStartLine": 205,
  "functionEndLine": 227,
  "numCommitsSeen": 20,
  "timeTaken": 1643,
  "changeHistory": [
    "1eaea0b549f685bd416cef68faa3a137b9bb3519",
    "0905e8cf724b358277e219cbf1a06413faa48c9e",
    "d6beaeaa9c53aa4e6ae128a856e68a9eeb1cadb8",
    "d6a438e931412713e99624cf9ed74470f1040184",
    "c92a3d9eee0701aae4e62d6678815c0eb03f5a11",
    "ae6753dd5e4ce3b0ed9bd67f92d2d4e92587300f",
    "a22972bab6b827f94bf2c5a644929418ae18b3c0",
    "a7faf40b61f445d15d9a210b23fa0008b87e25e2",
    "8541f303370cec9a25f2b32b3d660b3f188913f0",
    "8cb418e7fa50aba9977fe073aec66ad3f6e4f07c"
  ],
  "changeHistoryShort": {
    "1eaea0b549f685bd416cef68faa3a137b9bb3519": "Ybodychange",
    "0905e8cf724b358277e219cbf1a06413faa48c9e": "Ybodychange",
    "d6beaeaa9c53aa4e6ae128a856e68a9eeb1cadb8": "Ybodychange",
    "d6a438e931412713e99624cf9ed74470f1040184": "Yfilerename",
    "c92a3d9eee0701aae4e62d6678815c0eb03f5a11": "Ymultichange(Ybodychange,Ydocchange)",
    "ae6753dd5e4ce3b0ed9bd67f92d2d4e92587300f": "Ymultichange(Yexceptionschange,Ybodychange,Ydocchange)",
    "a22972bab6b827f94bf2c5a644929418ae18b3c0": "Ybodychange",
    "a7faf40b61f445d15d9a210b23fa0008b87e25e2": "Ymultichange(Yexceptionschange,Ybodychange,Ydocchange)",
    "8541f303370cec9a25f2b32b3d660b3f188913f0": "Ybodychange",
    "8cb418e7fa50aba9977fe073aec66ad3f6e4f07c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1eaea0b549f685bd416cef68faa3a137b9bb3519": {
      "type": "Ybodychange",
      "commitMessage": "changed the localization mechanism for error messages. The new system is based on an enum rather than on duplicated string literals.\nJIRA: MATH-361\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@955423 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/16/10, 4:03 PM",
      "commitName": "1eaea0b549f685bd416cef68faa3a137b9bb3519",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "3/21/10, 8:49 AM",
      "commitNameOld": "7e65c5d2b07b2706be148fa5463ba3d2b89a2f93",
      "commitAuthorOld": "Phil Steitz",
      "daysBetweenCommits": 87.3,
      "commitsBetweenForRepo": 88,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void updateResidualsAndCost() throws FunctionEvaluationException {\n    if (++objectiveEvaluations \u003e maxEvaluations) {\n        throw new FunctionEvaluationException(new MaxEvaluationsExceededException(maxEvaluations), point);\n    }\n    objective \u003d function.value(point);\n    if (objective.length !\u003d rows) {\n        throw new FunctionEvaluationException(point, LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, objective.length, rows);\n    }\n    cost \u003d 0;\n    int index \u003d 0;\n    for (int i \u003d 0; i \u003c rows; i++) {\n        final double residual \u003d targetValues[i] - objective[i];\n        residuals[i] \u003d residual;\n        cost +\u003d residualsWeights[i] * residual * residual;\n        index +\u003d cols;\n    }\n    cost \u003d Math.sqrt(cost);\n}",
      "path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
      "functionStartLine": 205,
      "functionName": "updateResidualsAndCost",
      "functionAnnotation": "",
      "functionDoc": "Update the residuals array and cost function value.\n\n@exception FunctionEvaluationException if the function cannot be evaluated\nor its dimension doesn\u0027t match problem dimension or maximal number of\nof evaluations is exceeded\n",
      "diff": "@@ -1,18 +1,18 @@\n protected void updateResidualsAndCost() throws FunctionEvaluationException {\n     if (++objectiveEvaluations \u003e maxEvaluations) {\n         throw new FunctionEvaluationException(new MaxEvaluationsExceededException(maxEvaluations), point);\n     }\n     objective \u003d function.value(point);\n     if (objective.length !\u003d rows) {\n-        throw new FunctionEvaluationException(point, \"dimension mismatch {0} !\u003d {1}\", objective.length, rows);\n+        throw new FunctionEvaluationException(point, LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, objective.length, rows);\n     }\n     cost \u003d 0;\n     int index \u003d 0;\n     for (int i \u003d 0; i \u003c rows; i++) {\n         final double residual \u003d targetValues[i] - objective[i];\n         residuals[i] \u003d residual;\n         cost +\u003d residualsWeights[i] * residual * residual;\n         index +\u003d cols;\n     }\n     cost \u003d Math.sqrt(cost);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0905e8cf724b358277e219cbf1a06413faa48c9e": {
      "type": "Ybodychange",
      "commitMessage": "tighten checkstyle rules: declaring multiple variables in one statement is now forbidden\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@825919 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/16/09, 7:51 AM",
      "commitName": "0905e8cf724b358277e219cbf1a06413faa48c9e",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "9/6/09, 8:32 AM",
      "commitNameOld": "292e891aab4d737a83ebf786c02bf4003ae0442d",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 39.97,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void updateResidualsAndCost() throws FunctionEvaluationException {\n    if (++objectiveEvaluations \u003e maxEvaluations) {\n        throw new FunctionEvaluationException(new MaxEvaluationsExceededException(maxEvaluations), point);\n    }\n    objective \u003d function.value(point);\n    if (objective.length !\u003d rows) {\n        throw new FunctionEvaluationException(point, \"dimension mismatch {0} !\u003d {1}\", objective.length, rows);\n    }\n    cost \u003d 0;\n    int index \u003d 0;\n    for (int i \u003d 0; i \u003c rows; i++) {\n        final double residual \u003d targetValues[i] - objective[i];\n        residuals[i] \u003d residual;\n        cost +\u003d residualsWeights[i] * residual * residual;\n        index +\u003d cols;\n    }\n    cost \u003d Math.sqrt(cost);\n}",
      "path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
      "functionStartLine": 198,
      "functionName": "updateResidualsAndCost",
      "functionAnnotation": "",
      "functionDoc": "Update the residuals array and cost function value.\n\n@exception FunctionEvaluationException if the function cannot be evaluated\nor its dimension doesn\u0027t match problem dimension or maximal number of\nof evaluations is exceeded\n",
      "diff": "@@ -1,16 +1,18 @@\n protected void updateResidualsAndCost() throws FunctionEvaluationException {\n     if (++objectiveEvaluations \u003e maxEvaluations) {\n         throw new FunctionEvaluationException(new MaxEvaluationsExceededException(maxEvaluations), point);\n     }\n     objective \u003d function.value(point);\n     if (objective.length !\u003d rows) {\n         throw new FunctionEvaluationException(point, \"dimension mismatch {0} !\u003d {1}\", objective.length, rows);\n     }\n     cost \u003d 0;\n-    for (int i \u003d 0, index \u003d 0; i \u003c rows; i++, index +\u003d cols) {\n+    int index \u003d 0;\n+    for (int i \u003d 0; i \u003c rows; i++) {\n         final double residual \u003d targetValues[i] - objective[i];\n         residuals[i] \u003d residual;\n         cost +\u003d residualsWeights[i] * residual * residual;\n+        index +\u003d cols;\n     }\n     cost \u003d Math.sqrt(cost);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d6beaeaa9c53aa4e6ae128a856e68a9eeb1cadb8": {
      "type": "Ybodychange",
      "commitMessage": "tighten checkstyle rules for hidden fields\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@810238 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/1/09, 2:02 PM",
      "commitName": "d6beaeaa9c53aa4e6ae128a856e68a9eeb1cadb8",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "8/1/09, 7:30 AM",
      "commitNameOld": "d6a438e931412713e99624cf9ed74470f1040184",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 31.27,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void updateResidualsAndCost() throws FunctionEvaluationException {\n    if (++objectiveEvaluations \u003e maxEvaluations) {\n        throw new FunctionEvaluationException(new MaxEvaluationsExceededException(maxEvaluations), point);\n    }\n    objective \u003d function.value(point);\n    if (objective.length !\u003d rows) {\n        throw new FunctionEvaluationException(point, \"dimension mismatch {0} !\u003d {1}\", objective.length, rows);\n    }\n    cost \u003d 0;\n    for (int i \u003d 0, index \u003d 0; i \u003c rows; i++, index +\u003d cols) {\n        final double residual \u003d targetValues[i] - objective[i];\n        residuals[i] \u003d residual;\n        cost +\u003d residualsWeights[i] * residual * residual;\n    }\n    cost \u003d Math.sqrt(cost);\n}",
      "path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
      "functionStartLine": 198,
      "functionName": "updateResidualsAndCost",
      "functionAnnotation": "",
      "functionDoc": "Update the residuals array and cost function value.\n\n@exception FunctionEvaluationException if the function cannot be evaluated\nor its dimension doesn\u0027t match problem dimension or maximal number of\nof evaluations is exceeded\n",
      "diff": "@@ -1,16 +1,16 @@\n protected void updateResidualsAndCost() throws FunctionEvaluationException {\n     if (++objectiveEvaluations \u003e maxEvaluations) {\n         throw new FunctionEvaluationException(new MaxEvaluationsExceededException(maxEvaluations), point);\n     }\n-    objective \u003d f.value(point);\n+    objective \u003d function.value(point);\n     if (objective.length !\u003d rows) {\n         throw new FunctionEvaluationException(point, \"dimension mismatch {0} !\u003d {1}\", objective.length, rows);\n     }\n     cost \u003d 0;\n     for (int i \u003d 0, index \u003d 0; i \u003c rows; i++, index +\u003d cols) {\n-        final double residual \u003d target[i] - objective[i];\n+        final double residual \u003d targetValues[i] - objective[i];\n         residuals[i] \u003d residual;\n-        cost +\u003d weights[i] * residual * residual;\n+        cost +\u003d residualsWeights[i] * residual * residual;\n     }\n     cost \u003d Math.sqrt(cost);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d6a438e931412713e99624cf9ed74470f1040184": {
      "type": "Yfilerename",
      "commitMessage": "moved main java directory for compliance with maven standard directory layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@799870 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/1/09, 7:30 AM",
      "commitName": "d6a438e931412713e99624cf9ed74470f1040184",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "8/1/09, 7:23 AM",
      "commitNameOld": "2ad5ef61630be627f46ae1c266cf796f044bd4a8",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void updateResidualsAndCost() throws FunctionEvaluationException {\n    if (++objectiveEvaluations \u003e maxEvaluations) {\n        throw new FunctionEvaluationException(new MaxEvaluationsExceededException(maxEvaluations), point);\n    }\n    objective \u003d f.value(point);\n    if (objective.length !\u003d rows) {\n        throw new FunctionEvaluationException(point, \"dimension mismatch {0} !\u003d {1}\", objective.length, rows);\n    }\n    cost \u003d 0;\n    for (int i \u003d 0, index \u003d 0; i \u003c rows; i++, index +\u003d cols) {\n        final double residual \u003d target[i] - objective[i];\n        residuals[i] \u003d residual;\n        cost +\u003d weights[i] * residual * residual;\n    }\n    cost \u003d Math.sqrt(cost);\n}",
      "path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
      "functionStartLine": 198,
      "functionName": "updateResidualsAndCost",
      "functionAnnotation": "",
      "functionDoc": "Update the residuals array and cost function value.\n\n@exception FunctionEvaluationException if the function cannot be evaluated\nor its dimension doesn\u0027t match problem dimension or maximal number of\nof evaluations is exceeded\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "newPath": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java"
      }
    },
    "c92a3d9eee0701aae4e62d6678815c0eb03f5a11": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "added protection against infinite loops by setting a maximal number of evaluations\n(some classes were forgotten in the first pass to fix this problem)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@786466 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/19/09, 5:03 AM",
      "commitName": "c92a3d9eee0701aae4e62d6678815c0eb03f5a11",
      "commitAuthor": "Luc Maisonobe",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "added protection against infinite loops by setting a maximal number of evaluations\n(some classes were forgotten in the first pass to fix this problem)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@786466 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "6/19/09, 5:03 AM",
          "commitName": "c92a3d9eee0701aae4e62d6678815c0eb03f5a11",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "6/7/09, 2:24 PM",
          "commitNameOld": "4eb810e816aac9329ae05715a8ebb8aa7c400031",
          "commitAuthorOld": "William Barker",
          "daysBetweenCommits": 11.61,
          "commitsBetweenForRepo": 15,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void updateResidualsAndCost() throws FunctionEvaluationException {\n    if (++objectiveEvaluations \u003e maxEvaluations) {\n        throw new FunctionEvaluationException(new MaxEvaluationsExceededException(maxEvaluations), point);\n    }\n    objective \u003d f.value(point);\n    if (objective.length !\u003d rows) {\n        throw new FunctionEvaluationException(point, \"dimension mismatch {0} !\u003d {1}\", objective.length, rows);\n    }\n    cost \u003d 0;\n    for (int i \u003d 0, index \u003d 0; i \u003c rows; i++, index +\u003d cols) {\n        final double residual \u003d target[i] - objective[i];\n        residuals[i] \u003d residual;\n        cost +\u003d weights[i] * residual * residual;\n    }\n    cost \u003d Math.sqrt(cost);\n}",
          "path": "src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
          "functionStartLine": 198,
          "functionName": "updateResidualsAndCost",
          "functionAnnotation": "",
          "functionDoc": "Update the residuals array and cost function value.\n\n@exception FunctionEvaluationException if the function cannot be evaluated\nor its dimension doesn\u0027t match problem dimension or maximal number of\nof evaluations is exceeded\n",
          "diff": "@@ -1,14 +1,16 @@\n protected void updateResidualsAndCost() throws FunctionEvaluationException {\n-    ++objectiveEvaluations;\n+    if (++objectiveEvaluations \u003e maxEvaluations) {\n+        throw new FunctionEvaluationException(new MaxEvaluationsExceededException(maxEvaluations), point);\n+    }\n     objective \u003d f.value(point);\n     if (objective.length !\u003d rows) {\n         throw new FunctionEvaluationException(point, \"dimension mismatch {0} !\u003d {1}\", objective.length, rows);\n     }\n     cost \u003d 0;\n     for (int i \u003d 0, index \u003d 0; i \u003c rows; i++, index +\u003d cols) {\n         final double residual \u003d target[i] - objective[i];\n         residuals[i] \u003d residual;\n         cost +\u003d weights[i] * residual * residual;\n     }\n     cost \u003d Math.sqrt(cost);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "added protection against infinite loops by setting a maximal number of evaluations\n(some classes were forgotten in the first pass to fix this problem)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@786466 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "6/19/09, 5:03 AM",
          "commitName": "c92a3d9eee0701aae4e62d6678815c0eb03f5a11",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "6/7/09, 2:24 PM",
          "commitNameOld": "4eb810e816aac9329ae05715a8ebb8aa7c400031",
          "commitAuthorOld": "William Barker",
          "daysBetweenCommits": 11.61,
          "commitsBetweenForRepo": 15,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void updateResidualsAndCost() throws FunctionEvaluationException {\n    if (++objectiveEvaluations \u003e maxEvaluations) {\n        throw new FunctionEvaluationException(new MaxEvaluationsExceededException(maxEvaluations), point);\n    }\n    objective \u003d f.value(point);\n    if (objective.length !\u003d rows) {\n        throw new FunctionEvaluationException(point, \"dimension mismatch {0} !\u003d {1}\", objective.length, rows);\n    }\n    cost \u003d 0;\n    for (int i \u003d 0, index \u003d 0; i \u003c rows; i++, index +\u003d cols) {\n        final double residual \u003d target[i] - objective[i];\n        residuals[i] \u003d residual;\n        cost +\u003d weights[i] * residual * residual;\n    }\n    cost \u003d Math.sqrt(cost);\n}",
          "path": "src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
          "functionStartLine": 198,
          "functionName": "updateResidualsAndCost",
          "functionAnnotation": "",
          "functionDoc": "Update the residuals array and cost function value.\n\n@exception FunctionEvaluationException if the function cannot be evaluated\nor its dimension doesn\u0027t match problem dimension or maximal number of\nof evaluations is exceeded\n",
          "diff": "@@ -1,14 +1,16 @@\n protected void updateResidualsAndCost() throws FunctionEvaluationException {\n-    ++objectiveEvaluations;\n+    if (++objectiveEvaluations \u003e maxEvaluations) {\n+        throw new FunctionEvaluationException(new MaxEvaluationsExceededException(maxEvaluations), point);\n+    }\n     objective \u003d f.value(point);\n     if (objective.length !\u003d rows) {\n         throw new FunctionEvaluationException(point, \"dimension mismatch {0} !\u003d {1}\", objective.length, rows);\n     }\n     cost \u003d 0;\n     for (int i \u003d 0, index \u003d 0; i \u003c rows; i++, index +\u003d cols) {\n         final double residual \u003d target[i] - objective[i];\n         residuals[i] \u003d residual;\n         cost +\u003d weights[i] * residual * residual;\n     }\n     cost \u003d Math.sqrt(cost);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Update the residuals array and cost function value.\n\n@exception FunctionEvaluationException if the function cannot be evaluated\nor its dimension doesn\u0027t match problem dimension\n",
            "newValue": "Update the residuals array and cost function value.\n\n@exception FunctionEvaluationException if the function cannot be evaluated\nor its dimension doesn\u0027t match problem dimension or maximal number of\nof evaluations is exceeded\n"
          }
        }
      ]
    },
    "ae6753dd5e4ce3b0ed9bd67f92d2d4e92587300f": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange,Ydocchange)",
      "commitMessage": "updated general algorithms with latest interfaces definitions\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@758058 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/24/09, 3:15 PM",
      "commitName": "ae6753dd5e4ce3b0ed9bd67f92d2d4e92587300f",
      "commitAuthor": "Luc Maisonobe",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "updated general algorithms with latest interfaces definitions\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@758058 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "3/24/09, 3:15 PM",
          "commitName": "ae6753dd5e4ce3b0ed9bd67f92d2d4e92587300f",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "3/22/09, 6:19 AM",
          "commitNameOld": "a22972bab6b827f94bf2c5a644929418ae18b3c0",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 2.37,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void updateResidualsAndCost() throws FunctionEvaluationException {\n    ++objectiveEvaluations;\n    objective \u003d f.value(point);\n    if (objective.length !\u003d rows) {\n        throw new FunctionEvaluationException(point, \"dimension mismatch {0} !\u003d {1}\", objective.length, rows);\n    }\n    cost \u003d 0;\n    for (int i \u003d 0, index \u003d 0; i \u003c rows; i++, index +\u003d cols) {\n        final double residual \u003d target[i] - objective[i];\n        residuals[i] \u003d residual;\n        cost +\u003d weights[i] * residual * residual;\n    }\n    cost \u003d Math.sqrt(cost);\n}",
          "path": "src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
          "functionStartLine": 187,
          "functionName": "updateResidualsAndCost",
          "functionAnnotation": "",
          "functionDoc": "Update the residuals array and cost function value.\n\n@exception FunctionEvaluationException if the function cannot be evaluated\nor its dimension doesn\u0027t match problem dimension\n",
          "diff": "@@ -1,14 +1,14 @@\n-protected void updateResidualsAndCost() throws ObjectiveException {\n+protected void updateResidualsAndCost() throws FunctionEvaluationException {\n     ++objectiveEvaluations;\n-    objective \u003d f.objective(variables);\n+    objective \u003d f.value(point);\n     if (objective.length !\u003d rows) {\n-        throw new ObjectiveException(\"dimension mismatch {0} !\u003d {1}\", objective.length, rows);\n+        throw new FunctionEvaluationException(point, \"dimension mismatch {0} !\u003d {1}\", objective.length, rows);\n     }\n     cost \u003d 0;\n     for (int i \u003d 0, index \u003d 0; i \u003c rows; i++, index +\u003d cols) {\n         final double residual \u003d target[i] - objective[i];\n         residuals[i] \u003d residual;\n         cost +\u003d weights[i] * residual * residual;\n     }\n     cost \u003d Math.sqrt(cost);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[ObjectiveException]",
            "newValue": "[FunctionEvaluationException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "updated general algorithms with latest interfaces definitions\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@758058 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "3/24/09, 3:15 PM",
          "commitName": "ae6753dd5e4ce3b0ed9bd67f92d2d4e92587300f",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "3/22/09, 6:19 AM",
          "commitNameOld": "a22972bab6b827f94bf2c5a644929418ae18b3c0",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 2.37,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void updateResidualsAndCost() throws FunctionEvaluationException {\n    ++objectiveEvaluations;\n    objective \u003d f.value(point);\n    if (objective.length !\u003d rows) {\n        throw new FunctionEvaluationException(point, \"dimension mismatch {0} !\u003d {1}\", objective.length, rows);\n    }\n    cost \u003d 0;\n    for (int i \u003d 0, index \u003d 0; i \u003c rows; i++, index +\u003d cols) {\n        final double residual \u003d target[i] - objective[i];\n        residuals[i] \u003d residual;\n        cost +\u003d weights[i] * residual * residual;\n    }\n    cost \u003d Math.sqrt(cost);\n}",
          "path": "src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
          "functionStartLine": 187,
          "functionName": "updateResidualsAndCost",
          "functionAnnotation": "",
          "functionDoc": "Update the residuals array and cost function value.\n\n@exception FunctionEvaluationException if the function cannot be evaluated\nor its dimension doesn\u0027t match problem dimension\n",
          "diff": "@@ -1,14 +1,14 @@\n-protected void updateResidualsAndCost() throws ObjectiveException {\n+protected void updateResidualsAndCost() throws FunctionEvaluationException {\n     ++objectiveEvaluations;\n-    objective \u003d f.objective(variables);\n+    objective \u003d f.value(point);\n     if (objective.length !\u003d rows) {\n-        throw new ObjectiveException(\"dimension mismatch {0} !\u003d {1}\", objective.length, rows);\n+        throw new FunctionEvaluationException(point, \"dimension mismatch {0} !\u003d {1}\", objective.length, rows);\n     }\n     cost \u003d 0;\n     for (int i \u003d 0, index \u003d 0; i \u003c rows; i++, index +\u003d cols) {\n         final double residual \u003d target[i] - objective[i];\n         residuals[i] \u003d residual;\n         cost +\u003d weights[i] * residual * residual;\n     }\n     cost \u003d Math.sqrt(cost);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "updated general algorithms with latest interfaces definitions\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@758058 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "3/24/09, 3:15 PM",
          "commitName": "ae6753dd5e4ce3b0ed9bd67f92d2d4e92587300f",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "3/22/09, 6:19 AM",
          "commitNameOld": "a22972bab6b827f94bf2c5a644929418ae18b3c0",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 2.37,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void updateResidualsAndCost() throws FunctionEvaluationException {\n    ++objectiveEvaluations;\n    objective \u003d f.value(point);\n    if (objective.length !\u003d rows) {\n        throw new FunctionEvaluationException(point, \"dimension mismatch {0} !\u003d {1}\", objective.length, rows);\n    }\n    cost \u003d 0;\n    for (int i \u003d 0, index \u003d 0; i \u003c rows; i++, index +\u003d cols) {\n        final double residual \u003d target[i] - objective[i];\n        residuals[i] \u003d residual;\n        cost +\u003d weights[i] * residual * residual;\n    }\n    cost \u003d Math.sqrt(cost);\n}",
          "path": "src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
          "functionStartLine": 187,
          "functionName": "updateResidualsAndCost",
          "functionAnnotation": "",
          "functionDoc": "Update the residuals array and cost function value.\n\n@exception FunctionEvaluationException if the function cannot be evaluated\nor its dimension doesn\u0027t match problem dimension\n",
          "diff": "@@ -1,14 +1,14 @@\n-protected void updateResidualsAndCost() throws ObjectiveException {\n+protected void updateResidualsAndCost() throws FunctionEvaluationException {\n     ++objectiveEvaluations;\n-    objective \u003d f.objective(variables);\n+    objective \u003d f.value(point);\n     if (objective.length !\u003d rows) {\n-        throw new ObjectiveException(\"dimension mismatch {0} !\u003d {1}\", objective.length, rows);\n+        throw new FunctionEvaluationException(point, \"dimension mismatch {0} !\u003d {1}\", objective.length, rows);\n     }\n     cost \u003d 0;\n     for (int i \u003d 0, index \u003d 0; i \u003c rows; i++, index +\u003d cols) {\n         final double residual \u003d target[i] - objective[i];\n         residuals[i] \u003d residual;\n         cost +\u003d weights[i] * residual * residual;\n     }\n     cost \u003d Math.sqrt(cost);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Update the residuals array and cost function value.\n\n@exception ObjectiveException if the function cannot be evaluated\nor its dimension doesn\u0027t match problem dimension\n",
            "newValue": "Update the residuals array and cost function value.\n\n@exception FunctionEvaluationException if the function cannot be evaluated\nor its dimension doesn\u0027t match problem dimension\n"
          }
        }
      ]
    },
    "a22972bab6b827f94bf2c5a644929418ae18b3c0": {
      "type": "Ybodychange",
      "commitMessage": "fixed a forgotten counter update\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@757183 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/22/09, 6:19 AM",
      "commitName": "a22972bab6b827f94bf2c5a644929418ae18b3c0",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "3/22/09, 6:00 AM",
      "commitNameOld": "a7faf40b61f445d15d9a210b23fa0008b87e25e2",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void updateResidualsAndCost() throws ObjectiveException {\n    ++objectiveEvaluations;\n    objective \u003d f.objective(variables);\n    if (objective.length !\u003d rows) {\n        throw new ObjectiveException(\"dimension mismatch {0} !\u003d {1}\", objective.length, rows);\n    }\n    cost \u003d 0;\n    for (int i \u003d 0, index \u003d 0; i \u003c rows; i++, index +\u003d cols) {\n        final double residual \u003d target[i] - objective[i];\n        residuals[i] \u003d residual;\n        cost +\u003d weights[i] * residual * residual;\n    }\n    cost \u003d Math.sqrt(cost);\n}",
      "path": "src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
      "functionStartLine": 183,
      "functionName": "updateResidualsAndCost",
      "functionAnnotation": "",
      "functionDoc": "Update the residuals array and cost function value.\n\n@exception ObjectiveException if the function cannot be evaluated\nor its dimension doesn\u0027t match problem dimension\n",
      "diff": "@@ -1,13 +1,14 @@\n protected void updateResidualsAndCost() throws ObjectiveException {\n+    ++objectiveEvaluations;\n     objective \u003d f.objective(variables);\n     if (objective.length !\u003d rows) {\n         throw new ObjectiveException(\"dimension mismatch {0} !\u003d {1}\", objective.length, rows);\n     }\n     cost \u003d 0;\n     for (int i \u003d 0, index \u003d 0; i \u003c rows; i++, index +\u003d cols) {\n         final double residual \u003d target[i] - objective[i];\n         residuals[i] \u003d residual;\n         cost +\u003d weights[i] * residual * residual;\n     }\n     cost \u003d Math.sqrt(cost);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a7faf40b61f445d15d9a210b23fa0008b87e25e2": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange,Ydocchange)",
      "commitMessage": "separated iteration counter from function evaluation counters,\nsome optimizers are based on gradient/jacobian only and cannot\nreliably be protected by monitoring the objective function calls.\n\nWe now have two or three counters for each algorithm:\n - iteration counter, which is checked against a max allowance\n   to prevent infinite loops if no convergence is reached\n - objective function evaluations, for user information only\n - objective function gradient/jacobian if the function is\n   differentiable, for user information only\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@757181 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/22/09, 6:00 AM",
      "commitName": "a7faf40b61f445d15d9a210b23fa0008b87e25e2",
      "commitAuthor": "Luc Maisonobe",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "separated iteration counter from function evaluation counters,\nsome optimizers are based on gradient/jacobian only and cannot\nreliably be protected by monitoring the objective function calls.\n\nWe now have two or three counters for each algorithm:\n - iteration counter, which is checked against a max allowance\n   to prevent infinite loops if no convergence is reached\n - objective function evaluations, for user information only\n - objective function gradient/jacobian if the function is\n   differentiable, for user information only\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@757181 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "3/22/09, 6:00 AM",
          "commitName": "a7faf40b61f445d15d9a210b23fa0008b87e25e2",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "3/15/09, 2:35 PM",
          "commitNameOld": "513511976ddc778f7c52d69bf43db3c3f4b88803",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 6.64,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void updateResidualsAndCost() throws ObjectiveException {\n    objective \u003d f.objective(variables);\n    if (objective.length !\u003d rows) {\n        throw new ObjectiveException(\"dimension mismatch {0} !\u003d {1}\", objective.length, rows);\n    }\n    cost \u003d 0;\n    for (int i \u003d 0, index \u003d 0; i \u003c rows; i++, index +\u003d cols) {\n        final double residual \u003d target[i] - objective[i];\n        residuals[i] \u003d residual;\n        cost +\u003d weights[i] * residual * residual;\n    }\n    cost \u003d Math.sqrt(cost);\n}",
          "path": "src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
          "functionStartLine": 183,
          "functionName": "updateResidualsAndCost",
          "functionAnnotation": "",
          "functionDoc": "Update the residuals array and cost function value.\n\n@exception ObjectiveException if the function cannot be evaluated\nor its dimension doesn\u0027t match problem dimension\n",
          "diff": "@@ -1,16 +1,13 @@\n-protected void updateResidualsAndCost() throws ObjectiveException, OptimizationException {\n-    if (++objectiveEvaluations \u003e maxEvaluations) {\n-        throw new OptimizationException(\"maximal number of evaluations exceeded ({0})\", objectiveEvaluations);\n-    }\n+protected void updateResidualsAndCost() throws ObjectiveException {\n     objective \u003d f.objective(variables);\n     if (objective.length !\u003d rows) {\n         throw new ObjectiveException(\"dimension mismatch {0} !\u003d {1}\", objective.length, rows);\n     }\n     cost \u003d 0;\n     for (int i \u003d 0, index \u003d 0; i \u003c rows; i++, index +\u003d cols) {\n         final double residual \u003d target[i] - objective[i];\n         residuals[i] \u003d residual;\n         cost +\u003d weights[i] * residual * residual;\n     }\n     cost \u003d Math.sqrt(cost);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[ObjectiveException, OptimizationException]",
            "newValue": "[ObjectiveException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "separated iteration counter from function evaluation counters,\nsome optimizers are based on gradient/jacobian only and cannot\nreliably be protected by monitoring the objective function calls.\n\nWe now have two or three counters for each algorithm:\n - iteration counter, which is checked against a max allowance\n   to prevent infinite loops if no convergence is reached\n - objective function evaluations, for user information only\n - objective function gradient/jacobian if the function is\n   differentiable, for user information only\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@757181 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "3/22/09, 6:00 AM",
          "commitName": "a7faf40b61f445d15d9a210b23fa0008b87e25e2",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "3/15/09, 2:35 PM",
          "commitNameOld": "513511976ddc778f7c52d69bf43db3c3f4b88803",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 6.64,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void updateResidualsAndCost() throws ObjectiveException {\n    objective \u003d f.objective(variables);\n    if (objective.length !\u003d rows) {\n        throw new ObjectiveException(\"dimension mismatch {0} !\u003d {1}\", objective.length, rows);\n    }\n    cost \u003d 0;\n    for (int i \u003d 0, index \u003d 0; i \u003c rows; i++, index +\u003d cols) {\n        final double residual \u003d target[i] - objective[i];\n        residuals[i] \u003d residual;\n        cost +\u003d weights[i] * residual * residual;\n    }\n    cost \u003d Math.sqrt(cost);\n}",
          "path": "src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
          "functionStartLine": 183,
          "functionName": "updateResidualsAndCost",
          "functionAnnotation": "",
          "functionDoc": "Update the residuals array and cost function value.\n\n@exception ObjectiveException if the function cannot be evaluated\nor its dimension doesn\u0027t match problem dimension\n",
          "diff": "@@ -1,16 +1,13 @@\n-protected void updateResidualsAndCost() throws ObjectiveException, OptimizationException {\n-    if (++objectiveEvaluations \u003e maxEvaluations) {\n-        throw new OptimizationException(\"maximal number of evaluations exceeded ({0})\", objectiveEvaluations);\n-    }\n+protected void updateResidualsAndCost() throws ObjectiveException {\n     objective \u003d f.objective(variables);\n     if (objective.length !\u003d rows) {\n         throw new ObjectiveException(\"dimension mismatch {0} !\u003d {1}\", objective.length, rows);\n     }\n     cost \u003d 0;\n     for (int i \u003d 0, index \u003d 0; i \u003c rows; i++, index +\u003d cols) {\n         final double residual \u003d target[i] - objective[i];\n         residuals[i] \u003d residual;\n         cost +\u003d weights[i] * residual * residual;\n     }\n     cost \u003d Math.sqrt(cost);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "separated iteration counter from function evaluation counters,\nsome optimizers are based on gradient/jacobian only and cannot\nreliably be protected by monitoring the objective function calls.\n\nWe now have two or three counters for each algorithm:\n - iteration counter, which is checked against a max allowance\n   to prevent infinite loops if no convergence is reached\n - objective function evaluations, for user information only\n - objective function gradient/jacobian if the function is\n   differentiable, for user information only\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@757181 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "3/22/09, 6:00 AM",
          "commitName": "a7faf40b61f445d15d9a210b23fa0008b87e25e2",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "3/15/09, 2:35 PM",
          "commitNameOld": "513511976ddc778f7c52d69bf43db3c3f4b88803",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 6.64,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void updateResidualsAndCost() throws ObjectiveException {\n    objective \u003d f.objective(variables);\n    if (objective.length !\u003d rows) {\n        throw new ObjectiveException(\"dimension mismatch {0} !\u003d {1}\", objective.length, rows);\n    }\n    cost \u003d 0;\n    for (int i \u003d 0, index \u003d 0; i \u003c rows; i++, index +\u003d cols) {\n        final double residual \u003d target[i] - objective[i];\n        residuals[i] \u003d residual;\n        cost +\u003d weights[i] * residual * residual;\n    }\n    cost \u003d Math.sqrt(cost);\n}",
          "path": "src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
          "functionStartLine": 183,
          "functionName": "updateResidualsAndCost",
          "functionAnnotation": "",
          "functionDoc": "Update the residuals array and cost function value.\n\n@exception ObjectiveException if the function cannot be evaluated\nor its dimension doesn\u0027t match problem dimension\n",
          "diff": "@@ -1,16 +1,13 @@\n-protected void updateResidualsAndCost() throws ObjectiveException, OptimizationException {\n-    if (++objectiveEvaluations \u003e maxEvaluations) {\n-        throw new OptimizationException(\"maximal number of evaluations exceeded ({0})\", objectiveEvaluations);\n-    }\n+protected void updateResidualsAndCost() throws ObjectiveException {\n     objective \u003d f.objective(variables);\n     if (objective.length !\u003d rows) {\n         throw new ObjectiveException(\"dimension mismatch {0} !\u003d {1}\", objective.length, rows);\n     }\n     cost \u003d 0;\n     for (int i \u003d 0, index \u003d 0; i \u003c rows; i++, index +\u003d cols) {\n         final double residual \u003d target[i] - objective[i];\n         residuals[i] \u003d residual;\n         cost +\u003d weights[i] * residual * residual;\n     }\n     cost \u003d Math.sqrt(cost);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Update the residuals array and cost function value.\n\n@exception ObjectiveException if the function cannot be evaluated\nor its dimension doesn\u0027t match problem dimension\n@exception OptimizationException if the number of cost evaluations\nexceeds the maximum allowed\n",
            "newValue": "Update the residuals array and cost function value.\n\n@exception ObjectiveException if the function cannot be evaluated\nor its dimension doesn\u0027t match problem dimension\n"
          }
        }
      ]
    },
    "8541f303370cec9a25f2b32b3d660b3f188913f0": {
      "type": "Ybodychange",
      "commitMessage": "adapted old Levenberg-Marquardt estimator to new top level optimizers API\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@754727 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/15/09, 12:11 PM",
      "commitName": "8541f303370cec9a25f2b32b3d660b3f188913f0",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "3/14/09, 10:38 AM",
      "commitNameOld": "8cb418e7fa50aba9977fe073aec66ad3f6e4f07c",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 1.06,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void updateResidualsAndCost() throws ObjectiveException, OptimizationException {\n    if (++objectiveEvaluations \u003e maxEvaluations) {\n        throw new OptimizationException(\"maximal number of evaluations exceeded ({0})\", objectiveEvaluations);\n    }\n    objective \u003d f.objective(variables);\n    if (objective.length !\u003d rows) {\n        throw new ObjectiveException(\"dimension mismatch {0} !\u003d {1}\", objective.length, rows);\n    }\n    cost \u003d 0;\n    for (int i \u003d 0, index \u003d 0; i \u003c rows; i++, index +\u003d cols) {\n        final double residual \u003d target[i] - objective[i];\n        residuals[i] \u003d residual;\n        cost +\u003d weights[i] * residual * residual;\n    }\n    cost \u003d Math.sqrt(cost);\n}",
      "path": "src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
      "functionStartLine": 170,
      "functionName": "updateResidualsAndCost",
      "functionAnnotation": "",
      "functionDoc": "Update the residuals array and cost function value.\n\n@exception ObjectiveException if the function cannot be evaluated\nor its dimension doesn\u0027t match problem dimension\n@exception OptimizationException if the number of cost evaluations\nexceeds the maximum allowed\n",
      "diff": "@@ -1,15 +1,16 @@\n protected void updateResidualsAndCost() throws ObjectiveException, OptimizationException {\n     if (++objectiveEvaluations \u003e maxEvaluations) {\n         throw new OptimizationException(\"maximal number of evaluations exceeded ({0})\", objectiveEvaluations);\n     }\n     objective \u003d f.objective(variables);\n     if (objective.length !\u003d rows) {\n         throw new ObjectiveException(\"dimension mismatch {0} !\u003d {1}\", objective.length, rows);\n     }\n     cost \u003d 0;\n     for (int i \u003d 0, index \u003d 0; i \u003c rows; i++, index +\u003d cols) {\n-        final double residual \u003d objective[i] - target[i];\n+        final double residual \u003d target[i] - objective[i];\n+        residuals[i] \u003d residual;\n         cost +\u003d weights[i] * residual * residual;\n     }\n     cost \u003d Math.sqrt(cost);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "8cb418e7fa50aba9977fe073aec66ad3f6e4f07c": {
      "type": "Yintroduced",
      "commitMessage": "adapted the Gauss-Newton optimizer to the new top-level optimization interfaces\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@754500 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/14/09, 10:38 AM",
      "commitName": "8cb418e7fa50aba9977fe073aec66ad3f6e4f07c",
      "commitAuthor": "Luc Maisonobe",
      "diff": "@@ -0,0 +1,15 @@\n+protected void updateResidualsAndCost() throws ObjectiveException, OptimizationException {\n+    if (++objectiveEvaluations \u003e maxEvaluations) {\n+        throw new OptimizationException(\"maximal number of evaluations exceeded ({0})\", objectiveEvaluations);\n+    }\n+    objective \u003d f.objective(variables);\n+    if (objective.length !\u003d rows) {\n+        throw new ObjectiveException(\"dimension mismatch {0} !\u003d {1}\", objective.length, rows);\n+    }\n+    cost \u003d 0;\n+    for (int i \u003d 0, index \u003d 0; i \u003c rows; i++, index +\u003d cols) {\n+        final double residual \u003d objective[i] - target[i];\n+        cost +\u003d weights[i] * residual * residual;\n+    }\n+    cost \u003d Math.sqrt(cost);\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected void updateResidualsAndCost() throws ObjectiveException, OptimizationException {\n    if (++objectiveEvaluations \u003e maxEvaluations) {\n        throw new OptimizationException(\"maximal number of evaluations exceeded ({0})\", objectiveEvaluations);\n    }\n    objective \u003d f.objective(variables);\n    if (objective.length !\u003d rows) {\n        throw new ObjectiveException(\"dimension mismatch {0} !\u003d {1}\", objective.length, rows);\n    }\n    cost \u003d 0;\n    for (int i \u003d 0, index \u003d 0; i \u003c rows; i++, index +\u003d cols) {\n        final double residual \u003d objective[i] - target[i];\n        cost +\u003d weights[i] * residual * residual;\n    }\n    cost \u003d Math.sqrt(cost);\n}",
      "path": "src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
      "functionStartLine": 162,
      "functionName": "updateResidualsAndCost",
      "functionAnnotation": "",
      "functionDoc": "Update the residuals array and cost function value.\n\n@exception ObjectiveException if the function cannot be evaluated\nor its dimension doesn\u0027t match problem dimension\n@exception OptimizationException if the number of cost evaluations\nexceeds the maximum allowed\n"
    }
  }
}