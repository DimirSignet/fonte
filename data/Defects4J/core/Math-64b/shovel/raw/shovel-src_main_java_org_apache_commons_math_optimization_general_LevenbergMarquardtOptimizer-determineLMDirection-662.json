{
  "origin": "codeshovel",
  "repositoryName": "Math-64b",
  "repositoryPath": "/tmp/Math-64b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LevenbergMarquardtOptimizer.java",
  "functionName": "determineLMDirection",
  "functionId": "determineLMDirection___qy-double[]__diag-double[]__lmDiag-double[]__work-double[]",
  "sourceFilePath": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
  "functionAnnotation": "",
  "functionDoc": "Solve a*x \u003d b and d*x \u003d 0 in the least squares sense.\n\u003cp\u003eThis implementation is a translation in Java of the MINPACK\n\u003ca href\u003d\"http://www.netlib.org/minpack/qrsolv.f\"\u003eqrsolv\u003c/a\u003e\nroutine.\u003c/p\u003e\n\u003cp\u003eThis method sets the lmDir and lmDiag attributes.\u003c/p\u003e\n\u003cp\u003eThe authors of the original fortran function are:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eArgonne National Laboratory. MINPACK project. March 1980\u003c/li\u003e\n  \u003cli\u003eBurton  S. Garbow\u003c/li\u003e\n  \u003cli\u003eKenneth E. Hillstrom\u003c/li\u003e\n  \u003cli\u003eJorge   J. More\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLuc Maisonobe did the Java translation.\u003c/p\u003e\n\n@param qy array containing qTy\n@param diag diagonal matrix\n@param lmDiag diagonal elements associated with lmDir\n@param work work array\n",
  "functionStartLine": 662,
  "functionEndLine": 764,
  "numCommitsSeen": 34,
  "timeTaken": 3405,
  "changeHistory": [
    "0905e8cf724b358277e219cbf1a06413faa48c9e",
    "d6a438e931412713e99624cf9ed74470f1040184",
    "8541f303370cec9a25f2b32b3d660b3f188913f0",
    "fbe565694aa2721d4a8538eb053171cc8ecfde47",
    "6d21abba54a9b3a0cca222abfacd26cabd88561c",
    "89ac173c2b467e6289df0e62f2a43ed1730fbad5"
  ],
  "changeHistoryShort": {
    "0905e8cf724b358277e219cbf1a06413faa48c9e": "Ybodychange",
    "d6a438e931412713e99624cf9ed74470f1040184": "Yfilerename",
    "8541f303370cec9a25f2b32b3d660b3f188913f0": "Ymultichange(Ymovefromfile,Ybodychange)",
    "fbe565694aa2721d4a8538eb053171cc8ecfde47": "Yfilerename",
    "6d21abba54a9b3a0cca222abfacd26cabd88561c": "Yfilerename",
    "89ac173c2b467e6289df0e62f2a43ed1730fbad5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0905e8cf724b358277e219cbf1a06413faa48c9e": {
      "type": "Ybodychange",
      "commitMessage": "tighten checkstyle rules: declaring multiple variables in one statement is now forbidden\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@825919 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/16/09, 7:51 AM",
      "commitName": "0905e8cf724b358277e219cbf1a06413faa48c9e",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "9/6/09, 1:56 AM",
      "commitNameOld": "fd5e4bf4e2efc81c9d3b1d6ad125ef034705d0ed",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 40.25,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "actualSource": "private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) {\n    for (int j \u003d 0; j \u003c solvedCols; ++j) {\n        int pj \u003d permutation[j];\n        for (int i \u003d j + 1; i \u003c solvedCols; ++i) {\n            jacobian[i][pj] \u003d jacobian[j][permutation[i]];\n        }\n        lmDir[j] \u003d diagR[pj];\n        work[j] \u003d qy[j];\n    }\n    for (int j \u003d 0; j \u003c solvedCols; ++j) {\n        int pj \u003d permutation[j];\n        double dpj \u003d diag[pj];\n        if (dpj !\u003d 0) {\n            Arrays.fill(lmDiag, j + 1, lmDiag.length, 0);\n        }\n        lmDiag[j] \u003d dpj;\n        double qtbpj \u003d 0;\n        for (int k \u003d j; k \u003c solvedCols; ++k) {\n            int pk \u003d permutation[k];\n            if (lmDiag[k] !\u003d 0) {\n                final double sin;\n                final double cos;\n                double rkk \u003d jacobian[k][pk];\n                if (Math.abs(rkk) \u003c Math.abs(lmDiag[k])) {\n                    final double cotan \u003d rkk / lmDiag[k];\n                    sin \u003d 1.0 / Math.sqrt(1.0 + cotan * cotan);\n                    cos \u003d sin * cotan;\n                } else {\n                    final double tan \u003d lmDiag[k] / rkk;\n                    cos \u003d 1.0 / Math.sqrt(1.0 + tan * tan);\n                    sin \u003d cos * tan;\n                }\n                jacobian[k][pk] \u003d cos * rkk + sin * lmDiag[k];\n                final double temp \u003d cos * work[k] + sin * qtbpj;\n                qtbpj \u003d -sin * work[k] + cos * qtbpj;\n                work[k] \u003d temp;\n                for (int i \u003d k + 1; i \u003c solvedCols; ++i) {\n                    double rik \u003d jacobian[i][pk];\n                    final double temp2 \u003d cos * rik + sin * lmDiag[i];\n                    lmDiag[i] \u003d -sin * rik + cos * lmDiag[i];\n                    jacobian[i][pk] \u003d temp2;\n                }\n            }\n        }\n        lmDiag[j] \u003d jacobian[j][permutation[j]];\n        jacobian[j][permutation[j]] \u003d lmDir[j];\n    }\n    int nSing \u003d solvedCols;\n    for (int j \u003d 0; j \u003c solvedCols; ++j) {\n        if ((lmDiag[j] \u003d\u003d 0) \u0026\u0026 (nSing \u003d\u003d solvedCols)) {\n            nSing \u003d j;\n        }\n        if (nSing \u003c solvedCols) {\n            work[j] \u003d 0;\n        }\n    }\n    if (nSing \u003e 0) {\n        for (int j \u003d nSing - 1; j \u003e\u003d 0; --j) {\n            int pj \u003d permutation[j];\n            double sum \u003d 0;\n            for (int i \u003d j + 1; i \u003c nSing; ++i) {\n                sum +\u003d jacobian[i][pj] * work[i];\n            }\n            work[j] \u003d (work[j] - sum) / lmDiag[j];\n        }\n    }\n    for (int j \u003d 0; j \u003c lmDir.length; ++j) {\n        lmDir[permutation[j]] \u003d work[j];\n    }\n}",
      "path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
      "functionStartLine": 626,
      "functionName": "determineLMDirection",
      "functionAnnotation": "",
      "functionDoc": "Solve a*x \u003d b and d*x \u003d 0 in the least squares sense.\n\u003cp\u003eThis implementation is a translation in Java of the MINPACK\n\u003ca href\u003d\"http://www.netlib.org/minpack/qrsolv.f\"\u003eqrsolv\u003c/a\u003e\nroutine.\u003c/p\u003e\n\u003cp\u003eThis method sets the lmDir and lmDiag attributes.\u003c/p\u003e\n\u003cp\u003eThe authors of the original fortran function are:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eArgonne National Laboratory. MINPACK project. March 1980\u003c/li\u003e\n  \u003cli\u003eBurton  S. Garbow\u003c/li\u003e\n  \u003cli\u003eKenneth E. Hillstrom\u003c/li\u003e\n  \u003cli\u003eJorge   J. More\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLuc Maisonobe did the Java translation.\u003c/p\u003e\n\n@param qy array containing qTy\n@param diag diagonal matrix\n@param lmDiag diagonal elements associated with lmDir\n@param work work array\n",
      "diff": "@@ -1,69 +1,70 @@\n private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) {\n     for (int j \u003d 0; j \u003c solvedCols; ++j) {\n         int pj \u003d permutation[j];\n         for (int i \u003d j + 1; i \u003c solvedCols; ++i) {\n             jacobian[i][pj] \u003d jacobian[j][permutation[i]];\n         }\n         lmDir[j] \u003d diagR[pj];\n         work[j] \u003d qy[j];\n     }\n     for (int j \u003d 0; j \u003c solvedCols; ++j) {\n         int pj \u003d permutation[j];\n         double dpj \u003d diag[pj];\n         if (dpj !\u003d 0) {\n             Arrays.fill(lmDiag, j + 1, lmDiag.length, 0);\n         }\n         lmDiag[j] \u003d dpj;\n         double qtbpj \u003d 0;\n         for (int k \u003d j; k \u003c solvedCols; ++k) {\n             int pk \u003d permutation[k];\n             if (lmDiag[k] !\u003d 0) {\n-                double sin, cos;\n+                final double sin;\n+                final double cos;\n                 double rkk \u003d jacobian[k][pk];\n                 if (Math.abs(rkk) \u003c Math.abs(lmDiag[k])) {\n-                    double cotan \u003d rkk / lmDiag[k];\n+                    final double cotan \u003d rkk / lmDiag[k];\n                     sin \u003d 1.0 / Math.sqrt(1.0 + cotan * cotan);\n                     cos \u003d sin * cotan;\n                 } else {\n-                    double tan \u003d lmDiag[k] / rkk;\n+                    final double tan \u003d lmDiag[k] / rkk;\n                     cos \u003d 1.0 / Math.sqrt(1.0 + tan * tan);\n                     sin \u003d cos * tan;\n                 }\n                 jacobian[k][pk] \u003d cos * rkk + sin * lmDiag[k];\n-                double temp \u003d cos * work[k] + sin * qtbpj;\n+                final double temp \u003d cos * work[k] + sin * qtbpj;\n                 qtbpj \u003d -sin * work[k] + cos * qtbpj;\n                 work[k] \u003d temp;\n                 for (int i \u003d k + 1; i \u003c solvedCols; ++i) {\n                     double rik \u003d jacobian[i][pk];\n-                    temp \u003d cos * rik + sin * lmDiag[i];\n+                    final double temp2 \u003d cos * rik + sin * lmDiag[i];\n                     lmDiag[i] \u003d -sin * rik + cos * lmDiag[i];\n-                    jacobian[i][pk] \u003d temp;\n+                    jacobian[i][pk] \u003d temp2;\n                 }\n             }\n         }\n         lmDiag[j] \u003d jacobian[j][permutation[j]];\n         jacobian[j][permutation[j]] \u003d lmDir[j];\n     }\n     int nSing \u003d solvedCols;\n     for (int j \u003d 0; j \u003c solvedCols; ++j) {\n         if ((lmDiag[j] \u003d\u003d 0) \u0026\u0026 (nSing \u003d\u003d solvedCols)) {\n             nSing \u003d j;\n         }\n         if (nSing \u003c solvedCols) {\n             work[j] \u003d 0;\n         }\n     }\n     if (nSing \u003e 0) {\n         for (int j \u003d nSing - 1; j \u003e\u003d 0; --j) {\n             int pj \u003d permutation[j];\n             double sum \u003d 0;\n             for (int i \u003d j + 1; i \u003c nSing; ++i) {\n                 sum +\u003d jacobian[i][pj] * work[i];\n             }\n             work[j] \u003d (work[j] - sum) / lmDiag[j];\n         }\n     }\n     for (int j \u003d 0; j \u003c lmDir.length; ++j) {\n         lmDir[permutation[j]] \u003d work[j];\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d6a438e931412713e99624cf9ed74470f1040184": {
      "type": "Yfilerename",
      "commitMessage": "moved main java directory for compliance with maven standard directory layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@799870 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/1/09, 7:30 AM",
      "commitName": "d6a438e931412713e99624cf9ed74470f1040184",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "8/1/09, 7:23 AM",
      "commitNameOld": "2ad5ef61630be627f46ae1c266cf796f044bd4a8",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) {\n    for (int j \u003d 0; j \u003c solvedCols; ++j) {\n        int pj \u003d permutation[j];\n        for (int i \u003d j + 1; i \u003c solvedCols; ++i) {\n            jacobian[i][pj] \u003d jacobian[j][permutation[i]];\n        }\n        lmDir[j] \u003d diagR[pj];\n        work[j] \u003d qy[j];\n    }\n    for (int j \u003d 0; j \u003c solvedCols; ++j) {\n        int pj \u003d permutation[j];\n        double dpj \u003d diag[pj];\n        if (dpj !\u003d 0) {\n            Arrays.fill(lmDiag, j + 1, lmDiag.length, 0);\n        }\n        lmDiag[j] \u003d dpj;\n        double qtbpj \u003d 0;\n        for (int k \u003d j; k \u003c solvedCols; ++k) {\n            int pk \u003d permutation[k];\n            if (lmDiag[k] !\u003d 0) {\n                double sin, cos;\n                double rkk \u003d jacobian[k][pk];\n                if (Math.abs(rkk) \u003c Math.abs(lmDiag[k])) {\n                    double cotan \u003d rkk / lmDiag[k];\n                    sin \u003d 1.0 / Math.sqrt(1.0 + cotan * cotan);\n                    cos \u003d sin * cotan;\n                } else {\n                    double tan \u003d lmDiag[k] / rkk;\n                    cos \u003d 1.0 / Math.sqrt(1.0 + tan * tan);\n                    sin \u003d cos * tan;\n                }\n                jacobian[k][pk] \u003d cos * rkk + sin * lmDiag[k];\n                double temp \u003d cos * work[k] + sin * qtbpj;\n                qtbpj \u003d -sin * work[k] + cos * qtbpj;\n                work[k] \u003d temp;\n                for (int i \u003d k + 1; i \u003c solvedCols; ++i) {\n                    double rik \u003d jacobian[i][pk];\n                    temp \u003d cos * rik + sin * lmDiag[i];\n                    lmDiag[i] \u003d -sin * rik + cos * lmDiag[i];\n                    jacobian[i][pk] \u003d temp;\n                }\n            }\n        }\n        lmDiag[j] \u003d jacobian[j][permutation[j]];\n        jacobian[j][permutation[j]] \u003d lmDir[j];\n    }\n    int nSing \u003d solvedCols;\n    for (int j \u003d 0; j \u003c solvedCols; ++j) {\n        if ((lmDiag[j] \u003d\u003d 0) \u0026\u0026 (nSing \u003d\u003d solvedCols)) {\n            nSing \u003d j;\n        }\n        if (nSing \u003c solvedCols) {\n            work[j] \u003d 0;\n        }\n    }\n    if (nSing \u003e 0) {\n        for (int j \u003d nSing - 1; j \u003e\u003d 0; --j) {\n            int pj \u003d permutation[j];\n            double sum \u003d 0;\n            for (int i \u003d j + 1; i \u003c nSing; ++i) {\n                sum +\u003d jacobian[i][pj] * work[i];\n            }\n            work[j] \u003d (work[j] - sum) / lmDiag[j];\n        }\n    }\n    for (int j \u003d 0; j \u003c lmDir.length; ++j) {\n        lmDir[permutation[j]] \u003d work[j];\n    }\n}",
      "path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
      "functionStartLine": 623,
      "functionName": "determineLMDirection",
      "functionAnnotation": "",
      "functionDoc": "Solve a*x \u003d b and d*x \u003d 0 in the least squares sense.\n\u003cp\u003eThis implementation is a translation in Java of the MINPACK\n\u003ca href\u003d\"http://www.netlib.org/minpack/qrsolv.f\"\u003eqrsolv\u003c/a\u003e\nroutine.\u003c/p\u003e\n\u003cp\u003eThis method sets the lmDir and lmDiag attributes.\u003c/p\u003e\n\u003cp\u003eThe authors of the original fortran function are:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eArgonne National Laboratory. MINPACK project. March 1980\u003c/li\u003e\n  \u003cli\u003eBurton  S. Garbow\u003c/li\u003e\n  \u003cli\u003eKenneth E. Hillstrom\u003c/li\u003e\n  \u003cli\u003eJorge   J. More\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLuc Maisonobe did the Java translation.\u003c/p\u003e\n\n@param qy array containing qTy\n@param diag diagonal matrix\n@param lmDiag diagonal elements associated with lmDir\n@param work work array\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "newPath": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java"
      }
    },
    "8541f303370cec9a25f2b32b3d660b3f188913f0": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "adapted old Levenberg-Marquardt estimator to new top level optimizers API\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@754727 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/15/09, 12:11 PM",
      "commitName": "8541f303370cec9a25f2b32b3d660b3f188913f0",
      "commitAuthor": "Luc Maisonobe",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "adapted old Levenberg-Marquardt estimator to new top level optimizers API\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@754727 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "3/15/09, 12:11 PM",
          "commitName": "8541f303370cec9a25f2b32b3d660b3f188913f0",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "3/14/09, 10:38 AM",
          "commitNameOld": "8cb418e7fa50aba9977fe073aec66ad3f6e4f07c",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 1.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) {\n    for (int j \u003d 0; j \u003c solvedCols; ++j) {\n        int pj \u003d permutation[j];\n        for (int i \u003d j + 1; i \u003c solvedCols; ++i) {\n            jacobian[i][pj] \u003d jacobian[j][permutation[i]];\n        }\n        lmDir[j] \u003d diagR[pj];\n        work[j] \u003d qy[j];\n    }\n    for (int j \u003d 0; j \u003c solvedCols; ++j) {\n        int pj \u003d permutation[j];\n        double dpj \u003d diag[pj];\n        if (dpj !\u003d 0) {\n            Arrays.fill(lmDiag, j + 1, lmDiag.length, 0);\n        }\n        lmDiag[j] \u003d dpj;\n        double qtbpj \u003d 0;\n        for (int k \u003d j; k \u003c solvedCols; ++k) {\n            int pk \u003d permutation[k];\n            if (lmDiag[k] !\u003d 0) {\n                double sin, cos;\n                double rkk \u003d jacobian[k][pk];\n                if (Math.abs(rkk) \u003c Math.abs(lmDiag[k])) {\n                    double cotan \u003d rkk / lmDiag[k];\n                    sin \u003d 1.0 / Math.sqrt(1.0 + cotan * cotan);\n                    cos \u003d sin * cotan;\n                } else {\n                    double tan \u003d lmDiag[k] / rkk;\n                    cos \u003d 1.0 / Math.sqrt(1.0 + tan * tan);\n                    sin \u003d cos * tan;\n                }\n                jacobian[k][pk] \u003d cos * rkk + sin * lmDiag[k];\n                double temp \u003d cos * work[k] + sin * qtbpj;\n                qtbpj \u003d -sin * work[k] + cos * qtbpj;\n                work[k] \u003d temp;\n                for (int i \u003d k + 1; i \u003c solvedCols; ++i) {\n                    double rik \u003d jacobian[i][pk];\n                    temp \u003d cos * rik + sin * lmDiag[i];\n                    lmDiag[i] \u003d -sin * rik + cos * lmDiag[i];\n                    jacobian[i][pk] \u003d temp;\n                }\n            }\n        }\n        lmDiag[j] \u003d jacobian[j][permutation[j]];\n        jacobian[j][permutation[j]] \u003d lmDir[j];\n    }\n    int nSing \u003d solvedCols;\n    for (int j \u003d 0; j \u003c solvedCols; ++j) {\n        if ((lmDiag[j] \u003d\u003d 0) \u0026\u0026 (nSing \u003d\u003d solvedCols)) {\n            nSing \u003d j;\n        }\n        if (nSing \u003c solvedCols) {\n            work[j] \u003d 0;\n        }\n    }\n    if (nSing \u003e 0) {\n        for (int j \u003d nSing - 1; j \u003e\u003d 0; --j) {\n            int pj \u003d permutation[j];\n            double sum \u003d 0;\n            for (int i \u003d j + 1; i \u003c nSing; ++i) {\n                sum +\u003d jacobian[i][pj] * work[i];\n            }\n            work[j] \u003d (work[j] - sum) / lmDiag[j];\n        }\n    }\n    for (int j \u003d 0; j \u003c lmDir.length; ++j) {\n        lmDir[permutation[j]] \u003d work[j];\n    }\n}",
          "path": "src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
          "functionStartLine": 623,
          "functionName": "determineLMDirection",
          "functionAnnotation": "",
          "functionDoc": "Solve a*x \u003d b and d*x \u003d 0 in the least squares sense.\n\u003cp\u003eThis implementation is a translation in Java of the MINPACK\n\u003ca href\u003d\"http://www.netlib.org/minpack/qrsolv.f\"\u003eqrsolv\u003c/a\u003e\nroutine.\u003c/p\u003e\n\u003cp\u003eThis method sets the lmDir and lmDiag attributes.\u003c/p\u003e\n\u003cp\u003eThe authors of the original fortran function are:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eArgonne National Laboratory. MINPACK project. March 1980\u003c/li\u003e\n  \u003cli\u003eBurton  S. Garbow\u003c/li\u003e\n  \u003cli\u003eKenneth E. Hillstrom\u003c/li\u003e\n  \u003cli\u003eJorge   J. More\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLuc Maisonobe did the Java translation.\u003c/p\u003e\n\n@param qy array containing qTy\n@param diag diagonal matrix\n@param lmDiag diagonal elements associated with lmDir\n@param work work array\n",
          "diff": "@@ -1,70 +1,69 @@\n private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) {\n     for (int j \u003d 0; j \u003c solvedCols; ++j) {\n         int pj \u003d permutation[j];\n         for (int i \u003d j + 1; i \u003c solvedCols; ++i) {\n-            jacobian[i * cols + pj] \u003d jacobian[j * cols + permutation[i]];\n+            jacobian[i][pj] \u003d jacobian[j][permutation[i]];\n         }\n         lmDir[j] \u003d diagR[pj];\n         work[j] \u003d qy[j];\n     }\n     for (int j \u003d 0; j \u003c solvedCols; ++j) {\n         int pj \u003d permutation[j];\n         double dpj \u003d diag[pj];\n         if (dpj !\u003d 0) {\n             Arrays.fill(lmDiag, j + 1, lmDiag.length, 0);\n         }\n         lmDiag[j] \u003d dpj;\n         double qtbpj \u003d 0;\n         for (int k \u003d j; k \u003c solvedCols; ++k) {\n             int pk \u003d permutation[k];\n             if (lmDiag[k] !\u003d 0) {\n                 double sin, cos;\n-                double rkk \u003d jacobian[k * cols + pk];\n+                double rkk \u003d jacobian[k][pk];\n                 if (Math.abs(rkk) \u003c Math.abs(lmDiag[k])) {\n                     double cotan \u003d rkk / lmDiag[k];\n                     sin \u003d 1.0 / Math.sqrt(1.0 + cotan * cotan);\n                     cos \u003d sin * cotan;\n                 } else {\n                     double tan \u003d lmDiag[k] / rkk;\n                     cos \u003d 1.0 / Math.sqrt(1.0 + tan * tan);\n                     sin \u003d cos * tan;\n                 }\n-                jacobian[k * cols + pk] \u003d cos * rkk + sin * lmDiag[k];\n+                jacobian[k][pk] \u003d cos * rkk + sin * lmDiag[k];\n                 double temp \u003d cos * work[k] + sin * qtbpj;\n                 qtbpj \u003d -sin * work[k] + cos * qtbpj;\n                 work[k] \u003d temp;\n                 for (int i \u003d k + 1; i \u003c solvedCols; ++i) {\n-                    double rik \u003d jacobian[i * cols + pk];\n+                    double rik \u003d jacobian[i][pk];\n                     temp \u003d cos * rik + sin * lmDiag[i];\n                     lmDiag[i] \u003d -sin * rik + cos * lmDiag[i];\n-                    jacobian[i * cols + pk] \u003d temp;\n+                    jacobian[i][pk] \u003d temp;\n                 }\n             }\n         }\n-        int index \u003d j * cols + permutation[j];\n-        lmDiag[j] \u003d jacobian[index];\n-        jacobian[index] \u003d lmDir[j];\n+        lmDiag[j] \u003d jacobian[j][permutation[j]];\n+        jacobian[j][permutation[j]] \u003d lmDir[j];\n     }\n     int nSing \u003d solvedCols;\n     for (int j \u003d 0; j \u003c solvedCols; ++j) {\n         if ((lmDiag[j] \u003d\u003d 0) \u0026\u0026 (nSing \u003d\u003d solvedCols)) {\n             nSing \u003d j;\n         }\n         if (nSing \u003c solvedCols) {\n             work[j] \u003d 0;\n         }\n     }\n     if (nSing \u003e 0) {\n         for (int j \u003d nSing - 1; j \u003e\u003d 0; --j) {\n             int pj \u003d permutation[j];\n             double sum \u003d 0;\n             for (int i \u003d j + 1; i \u003c nSing; ++i) {\n-                sum +\u003d jacobian[i * cols + pj] * work[i];\n+                sum +\u003d jacobian[i][pj] * work[i];\n             }\n             work[j] \u003d (work[j] - sum) / lmDiag[j];\n         }\n     }\n     for (int j \u003d 0; j \u003c lmDir.length; ++j) {\n         lmDir[permutation[j]] \u003d work[j];\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java",
            "newPath": "src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
            "oldMethodName": "determineLMDirection",
            "newMethodName": "determineLMDirection"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "adapted old Levenberg-Marquardt estimator to new top level optimizers API\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@754727 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "3/15/09, 12:11 PM",
          "commitName": "8541f303370cec9a25f2b32b3d660b3f188913f0",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "3/14/09, 10:38 AM",
          "commitNameOld": "8cb418e7fa50aba9977fe073aec66ad3f6e4f07c",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 1.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) {\n    for (int j \u003d 0; j \u003c solvedCols; ++j) {\n        int pj \u003d permutation[j];\n        for (int i \u003d j + 1; i \u003c solvedCols; ++i) {\n            jacobian[i][pj] \u003d jacobian[j][permutation[i]];\n        }\n        lmDir[j] \u003d diagR[pj];\n        work[j] \u003d qy[j];\n    }\n    for (int j \u003d 0; j \u003c solvedCols; ++j) {\n        int pj \u003d permutation[j];\n        double dpj \u003d diag[pj];\n        if (dpj !\u003d 0) {\n            Arrays.fill(lmDiag, j + 1, lmDiag.length, 0);\n        }\n        lmDiag[j] \u003d dpj;\n        double qtbpj \u003d 0;\n        for (int k \u003d j; k \u003c solvedCols; ++k) {\n            int pk \u003d permutation[k];\n            if (lmDiag[k] !\u003d 0) {\n                double sin, cos;\n                double rkk \u003d jacobian[k][pk];\n                if (Math.abs(rkk) \u003c Math.abs(lmDiag[k])) {\n                    double cotan \u003d rkk / lmDiag[k];\n                    sin \u003d 1.0 / Math.sqrt(1.0 + cotan * cotan);\n                    cos \u003d sin * cotan;\n                } else {\n                    double tan \u003d lmDiag[k] / rkk;\n                    cos \u003d 1.0 / Math.sqrt(1.0 + tan * tan);\n                    sin \u003d cos * tan;\n                }\n                jacobian[k][pk] \u003d cos * rkk + sin * lmDiag[k];\n                double temp \u003d cos * work[k] + sin * qtbpj;\n                qtbpj \u003d -sin * work[k] + cos * qtbpj;\n                work[k] \u003d temp;\n                for (int i \u003d k + 1; i \u003c solvedCols; ++i) {\n                    double rik \u003d jacobian[i][pk];\n                    temp \u003d cos * rik + sin * lmDiag[i];\n                    lmDiag[i] \u003d -sin * rik + cos * lmDiag[i];\n                    jacobian[i][pk] \u003d temp;\n                }\n            }\n        }\n        lmDiag[j] \u003d jacobian[j][permutation[j]];\n        jacobian[j][permutation[j]] \u003d lmDir[j];\n    }\n    int nSing \u003d solvedCols;\n    for (int j \u003d 0; j \u003c solvedCols; ++j) {\n        if ((lmDiag[j] \u003d\u003d 0) \u0026\u0026 (nSing \u003d\u003d solvedCols)) {\n            nSing \u003d j;\n        }\n        if (nSing \u003c solvedCols) {\n            work[j] \u003d 0;\n        }\n    }\n    if (nSing \u003e 0) {\n        for (int j \u003d nSing - 1; j \u003e\u003d 0; --j) {\n            int pj \u003d permutation[j];\n            double sum \u003d 0;\n            for (int i \u003d j + 1; i \u003c nSing; ++i) {\n                sum +\u003d jacobian[i][pj] * work[i];\n            }\n            work[j] \u003d (work[j] - sum) / lmDiag[j];\n        }\n    }\n    for (int j \u003d 0; j \u003c lmDir.length; ++j) {\n        lmDir[permutation[j]] \u003d work[j];\n    }\n}",
          "path": "src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
          "functionStartLine": 623,
          "functionName": "determineLMDirection",
          "functionAnnotation": "",
          "functionDoc": "Solve a*x \u003d b and d*x \u003d 0 in the least squares sense.\n\u003cp\u003eThis implementation is a translation in Java of the MINPACK\n\u003ca href\u003d\"http://www.netlib.org/minpack/qrsolv.f\"\u003eqrsolv\u003c/a\u003e\nroutine.\u003c/p\u003e\n\u003cp\u003eThis method sets the lmDir and lmDiag attributes.\u003c/p\u003e\n\u003cp\u003eThe authors of the original fortran function are:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eArgonne National Laboratory. MINPACK project. March 1980\u003c/li\u003e\n  \u003cli\u003eBurton  S. Garbow\u003c/li\u003e\n  \u003cli\u003eKenneth E. Hillstrom\u003c/li\u003e\n  \u003cli\u003eJorge   J. More\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLuc Maisonobe did the Java translation.\u003c/p\u003e\n\n@param qy array containing qTy\n@param diag diagonal matrix\n@param lmDiag diagonal elements associated with lmDir\n@param work work array\n",
          "diff": "@@ -1,70 +1,69 @@\n private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) {\n     for (int j \u003d 0; j \u003c solvedCols; ++j) {\n         int pj \u003d permutation[j];\n         for (int i \u003d j + 1; i \u003c solvedCols; ++i) {\n-            jacobian[i * cols + pj] \u003d jacobian[j * cols + permutation[i]];\n+            jacobian[i][pj] \u003d jacobian[j][permutation[i]];\n         }\n         lmDir[j] \u003d diagR[pj];\n         work[j] \u003d qy[j];\n     }\n     for (int j \u003d 0; j \u003c solvedCols; ++j) {\n         int pj \u003d permutation[j];\n         double dpj \u003d diag[pj];\n         if (dpj !\u003d 0) {\n             Arrays.fill(lmDiag, j + 1, lmDiag.length, 0);\n         }\n         lmDiag[j] \u003d dpj;\n         double qtbpj \u003d 0;\n         for (int k \u003d j; k \u003c solvedCols; ++k) {\n             int pk \u003d permutation[k];\n             if (lmDiag[k] !\u003d 0) {\n                 double sin, cos;\n-                double rkk \u003d jacobian[k * cols + pk];\n+                double rkk \u003d jacobian[k][pk];\n                 if (Math.abs(rkk) \u003c Math.abs(lmDiag[k])) {\n                     double cotan \u003d rkk / lmDiag[k];\n                     sin \u003d 1.0 / Math.sqrt(1.0 + cotan * cotan);\n                     cos \u003d sin * cotan;\n                 } else {\n                     double tan \u003d lmDiag[k] / rkk;\n                     cos \u003d 1.0 / Math.sqrt(1.0 + tan * tan);\n                     sin \u003d cos * tan;\n                 }\n-                jacobian[k * cols + pk] \u003d cos * rkk + sin * lmDiag[k];\n+                jacobian[k][pk] \u003d cos * rkk + sin * lmDiag[k];\n                 double temp \u003d cos * work[k] + sin * qtbpj;\n                 qtbpj \u003d -sin * work[k] + cos * qtbpj;\n                 work[k] \u003d temp;\n                 for (int i \u003d k + 1; i \u003c solvedCols; ++i) {\n-                    double rik \u003d jacobian[i * cols + pk];\n+                    double rik \u003d jacobian[i][pk];\n                     temp \u003d cos * rik + sin * lmDiag[i];\n                     lmDiag[i] \u003d -sin * rik + cos * lmDiag[i];\n-                    jacobian[i * cols + pk] \u003d temp;\n+                    jacobian[i][pk] \u003d temp;\n                 }\n             }\n         }\n-        int index \u003d j * cols + permutation[j];\n-        lmDiag[j] \u003d jacobian[index];\n-        jacobian[index] \u003d lmDir[j];\n+        lmDiag[j] \u003d jacobian[j][permutation[j]];\n+        jacobian[j][permutation[j]] \u003d lmDir[j];\n     }\n     int nSing \u003d solvedCols;\n     for (int j \u003d 0; j \u003c solvedCols; ++j) {\n         if ((lmDiag[j] \u003d\u003d 0) \u0026\u0026 (nSing \u003d\u003d solvedCols)) {\n             nSing \u003d j;\n         }\n         if (nSing \u003c solvedCols) {\n             work[j] \u003d 0;\n         }\n     }\n     if (nSing \u003e 0) {\n         for (int j \u003d nSing - 1; j \u003e\u003d 0; --j) {\n             int pj \u003d permutation[j];\n             double sum \u003d 0;\n             for (int i \u003d j + 1; i \u003c nSing; ++i) {\n-                sum +\u003d jacobian[i * cols + pj] * work[i];\n+                sum +\u003d jacobian[i][pj] * work[i];\n             }\n             work[j] \u003d (work[j] - sum) / lmDiag[j];\n         }\n     }\n     for (int j \u003d 0; j \u003c lmDir.length; ++j) {\n         lmDir[permutation[j]] \u003d work[j];\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "fbe565694aa2721d4a8538eb053171cc8ecfde47": {
      "type": "Yfilerename",
      "commitMessage": "started refactoring of optimization framework:\n - created subpackages optimization.direct, optimization.general,\n   optimization.linear (currently empty) and optimization.univariate\n - removed packages analysis.minimization and estimation\n - renamed all Cost-related interfaces/classes into Objective\n   (this allows both minimization and maximization)\n - added a few new general interfaces\n\nThis work is not complete yet. The direct and general packages classes\nare very close to the former design, they have almost not been changed\nstructurally.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@748274 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/26/09, 11:17 AM",
      "commitName": "fbe565694aa2721d4a8538eb053171cc8ecfde47",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "2/24/09, 7:32 PM",
      "commitNameOld": "911f0fe11146590554ec11d1277d6e2ba55bd7e9",
      "commitAuthorOld": "William Barker",
      "daysBetweenCommits": 1.66,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) {\n    for (int j \u003d 0; j \u003c solvedCols; ++j) {\n        int pj \u003d permutation[j];\n        for (int i \u003d j + 1; i \u003c solvedCols; ++i) {\n            jacobian[i * cols + pj] \u003d jacobian[j * cols + permutation[i]];\n        }\n        lmDir[j] \u003d diagR[pj];\n        work[j] \u003d qy[j];\n    }\n    for (int j \u003d 0; j \u003c solvedCols; ++j) {\n        int pj \u003d permutation[j];\n        double dpj \u003d diag[pj];\n        if (dpj !\u003d 0) {\n            Arrays.fill(lmDiag, j + 1, lmDiag.length, 0);\n        }\n        lmDiag[j] \u003d dpj;\n        double qtbpj \u003d 0;\n        for (int k \u003d j; k \u003c solvedCols; ++k) {\n            int pk \u003d permutation[k];\n            if (lmDiag[k] !\u003d 0) {\n                double sin, cos;\n                double rkk \u003d jacobian[k * cols + pk];\n                if (Math.abs(rkk) \u003c Math.abs(lmDiag[k])) {\n                    double cotan \u003d rkk / lmDiag[k];\n                    sin \u003d 1.0 / Math.sqrt(1.0 + cotan * cotan);\n                    cos \u003d sin * cotan;\n                } else {\n                    double tan \u003d lmDiag[k] / rkk;\n                    cos \u003d 1.0 / Math.sqrt(1.0 + tan * tan);\n                    sin \u003d cos * tan;\n                }\n                jacobian[k * cols + pk] \u003d cos * rkk + sin * lmDiag[k];\n                double temp \u003d cos * work[k] + sin * qtbpj;\n                qtbpj \u003d -sin * work[k] + cos * qtbpj;\n                work[k] \u003d temp;\n                for (int i \u003d k + 1; i \u003c solvedCols; ++i) {\n                    double rik \u003d jacobian[i * cols + pk];\n                    temp \u003d cos * rik + sin * lmDiag[i];\n                    lmDiag[i] \u003d -sin * rik + cos * lmDiag[i];\n                    jacobian[i * cols + pk] \u003d temp;\n                }\n            }\n        }\n        int index \u003d j * cols + permutation[j];\n        lmDiag[j] \u003d jacobian[index];\n        jacobian[index] \u003d lmDir[j];\n    }\n    int nSing \u003d solvedCols;\n    for (int j \u003d 0; j \u003c solvedCols; ++j) {\n        if ((lmDiag[j] \u003d\u003d 0) \u0026\u0026 (nSing \u003d\u003d solvedCols)) {\n            nSing \u003d j;\n        }\n        if (nSing \u003c solvedCols) {\n            work[j] \u003d 0;\n        }\n    }\n    if (nSing \u003e 0) {\n        for (int j \u003d nSing - 1; j \u003e\u003d 0; --j) {\n            int pj \u003d permutation[j];\n            double sum \u003d 0;\n            for (int i \u003d j + 1; i \u003c nSing; ++i) {\n                sum +\u003d jacobian[i * cols + pj] * work[i];\n            }\n            work[j] \u003d (work[j] - sum) / lmDiag[j];\n        }\n    }\n    for (int j \u003d 0; j \u003c lmDir.length; ++j) {\n        lmDir[permutation[j]] \u003d work[j];\n    }\n}",
      "path": "src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java",
      "functionStartLine": 613,
      "functionName": "determineLMDirection",
      "functionAnnotation": "",
      "functionDoc": "Solve a*x \u003d b and d*x \u003d 0 in the least squares sense.\n\u003cp\u003eThis implementation is a translation in Java of the MINPACK\n\u003ca href\u003d\"http://www.netlib.org/minpack/qrsolv.f\"\u003eqrsolv\u003c/a\u003e\nroutine.\u003c/p\u003e\n\u003cp\u003eThis method sets the lmDir and lmDiag attributes.\u003c/p\u003e\n\u003cp\u003eThe authors of the original fortran function are:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eArgonne National Laboratory. MINPACK project. March 1980\u003c/li\u003e\n  \u003cli\u003eBurton  S. Garbow\u003c/li\u003e\n  \u003cli\u003eKenneth E. Hillstrom\u003c/li\u003e\n  \u003cli\u003eJorge   J. More\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLuc Maisonobe did the Java translation.\u003c/p\u003e\n\n@param qy array containing qTy\n@param diag diagonal matrix\n@param lmDiag diagonal elements associated with lmDir\n@param work work array\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java",
        "newPath": "src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java"
      }
    },
    "6d21abba54a9b3a0cca222abfacd26cabd88561c": {
      "type": "Yfilerename",
      "commitMessage": "added the estimation package from Mantissa\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@512061 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/26/07, 2:59 PM",
      "commitName": "6d21abba54a9b3a0cca222abfacd26cabd88561c",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "2/26/07, 2:44 PM",
      "commitNameOld": "8ce6b30d7126356da4e18fb73f0bd836b921ce1c",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) {\n    for (int j \u003d 0; j \u003c solvedCols; ++j) {\n        int pj \u003d permutation[j];\n        for (int i \u003d j + 1; i \u003c solvedCols; ++i) {\n            jacobian[i * cols + pj] \u003d jacobian[j * cols + permutation[i]];\n        }\n        lmDir[j] \u003d diagR[pj];\n        work[j] \u003d qy[j];\n    }\n    for (int j \u003d 0; j \u003c solvedCols; ++j) {\n        int pj \u003d permutation[j];\n        double dpj \u003d diag[pj];\n        if (dpj !\u003d 0) {\n            Arrays.fill(lmDiag, j + 1, lmDiag.length, 0);\n        }\n        lmDiag[j] \u003d dpj;\n        double qtbpj \u003d 0;\n        for (int k \u003d j; k \u003c solvedCols; ++k) {\n            int pk \u003d permutation[k];\n            if (lmDiag[k] !\u003d 0) {\n                double sin, cos;\n                double rkk \u003d jacobian[k * cols + pk];\n                if (Math.abs(rkk) \u003c Math.abs(lmDiag[k])) {\n                    double cotan \u003d rkk / lmDiag[k];\n                    sin \u003d 1.0 / Math.sqrt(1.0 + cotan * cotan);\n                    cos \u003d sin * cotan;\n                } else {\n                    double tan \u003d lmDiag[k] / rkk;\n                    cos \u003d 1.0 / Math.sqrt(1.0 + tan * tan);\n                    sin \u003d cos * tan;\n                }\n                jacobian[k * cols + pk] \u003d cos * rkk + sin * lmDiag[k];\n                double temp \u003d cos * work[k] + sin * qtbpj;\n                qtbpj \u003d -sin * work[k] + cos * qtbpj;\n                work[k] \u003d temp;\n                for (int i \u003d k + 1; i \u003c solvedCols; ++i) {\n                    double rik \u003d jacobian[i * cols + pk];\n                    temp \u003d cos * rik + sin * lmDiag[i];\n                    lmDiag[i] \u003d -sin * rik + cos * lmDiag[i];\n                    jacobian[i * cols + pk] \u003d temp;\n                }\n            }\n        }\n        int index \u003d j * cols + permutation[j];\n        lmDiag[j] \u003d jacobian[index];\n        jacobian[index] \u003d lmDir[j];\n    }\n    int nSing \u003d solvedCols;\n    for (int j \u003d 0; j \u003c solvedCols; ++j) {\n        if ((lmDiag[j] \u003d\u003d 0) \u0026\u0026 (nSing \u003d\u003d solvedCols)) {\n            nSing \u003d j;\n        }\n        if (nSing \u003c solvedCols) {\n            work[j] \u003d 0;\n        }\n    }\n    if (nSing \u003e 0) {\n        for (int j \u003d nSing - 1; j \u003e\u003d 0; --j) {\n            int pj \u003d permutation[j];\n            double sum \u003d 0;\n            for (int i \u003d j + 1; i \u003c nSing; ++i) {\n                sum +\u003d jacobian[i * cols + pj] * work[i];\n            }\n            work[j] \u003d (work[j] - sum) / lmDiag[j];\n        }\n    }\n    for (int j \u003d 0; j \u003c lmDir.length; ++j) {\n        lmDir[permutation[j]] \u003d work[j];\n    }\n}",
      "path": "src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java",
      "functionStartLine": 683,
      "functionName": "determineLMDirection",
      "functionAnnotation": "",
      "functionDoc": "Solve a*x \u003d b and d*x \u003d 0 in the least squares sense.\n\u003cp\u003eThis implementation is a translation in Java of the MINPACK\n\u003ca href\u003d\"http://www.netlib.org/minpack/qrsolv.f\"\u003eqrsolv\u003c/a\u003e\nroutine.\u003c/p\u003e\n\u003cp\u003eThis method sets the lmDir and lmDiag attributes.\u003c/p\u003e\n\u003cp\u003eThe authors of the original fortran function are:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eArgonne National Laboratory. MINPACK project. March 1980\u003c/li\u003e\n  \u003cli\u003eBurton  S. Garbow\u003c/li\u003e\n  \u003cli\u003eKenneth E. Hillstrom\u003c/li\u003e\n  \u003cli\u003eJorge   J. More\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLuc Maisonobe did the Java translation.\u003c/p\u003e\n\n@param qy array containing qTy\n@param diag diagonal matrix\n@param lmDiag diagonal elements associated with lmDir\n@param work work array\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/mantissa/src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimator.java",
        "newPath": "src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java"
      }
    },
    "89ac173c2b467e6289df0e62f2a43ed1730fbad5": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@476930 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/19/06, 1:36 PM",
      "commitName": "89ac173c2b467e6289df0e62f2a43ed1730fbad5",
      "commitAuthor": "Phil Steitz",
      "diff": "@@ -0,0 +1,70 @@\n+private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) {\n+    for (int j \u003d 0; j \u003c solvedCols; ++j) {\n+        int pj \u003d permutation[j];\n+        for (int i \u003d j + 1; i \u003c solvedCols; ++i) {\n+            jacobian[i * cols + pj] \u003d jacobian[j * cols + permutation[i]];\n+        }\n+        lmDir[j] \u003d diagR[pj];\n+        work[j] \u003d qy[j];\n+    }\n+    for (int j \u003d 0; j \u003c solvedCols; ++j) {\n+        int pj \u003d permutation[j];\n+        double dpj \u003d diag[pj];\n+        if (dpj !\u003d 0) {\n+            Arrays.fill(lmDiag, j + 1, lmDiag.length, 0);\n+        }\n+        lmDiag[j] \u003d dpj;\n+        double qtbpj \u003d 0;\n+        for (int k \u003d j; k \u003c solvedCols; ++k) {\n+            int pk \u003d permutation[k];\n+            if (lmDiag[k] !\u003d 0) {\n+                double sin, cos;\n+                double rkk \u003d jacobian[k * cols + pk];\n+                if (Math.abs(rkk) \u003c Math.abs(lmDiag[k])) {\n+                    double cotan \u003d rkk / lmDiag[k];\n+                    sin \u003d 1.0 / Math.sqrt(1.0 + cotan * cotan);\n+                    cos \u003d sin * cotan;\n+                } else {\n+                    double tan \u003d lmDiag[k] / rkk;\n+                    cos \u003d 1.0 / Math.sqrt(1.0 + tan * tan);\n+                    sin \u003d cos * tan;\n+                }\n+                jacobian[k * cols + pk] \u003d cos * rkk + sin * lmDiag[k];\n+                double temp \u003d cos * work[k] + sin * qtbpj;\n+                qtbpj \u003d -sin * work[k] + cos * qtbpj;\n+                work[k] \u003d temp;\n+                for (int i \u003d k + 1; i \u003c solvedCols; ++i) {\n+                    double rik \u003d jacobian[i * cols + pk];\n+                    temp \u003d cos * rik + sin * lmDiag[i];\n+                    lmDiag[i] \u003d -sin * rik + cos * lmDiag[i];\n+                    jacobian[i * cols + pk] \u003d temp;\n+                }\n+            }\n+        }\n+        int index \u003d j * cols + permutation[j];\n+        lmDiag[j] \u003d jacobian[index];\n+        jacobian[index] \u003d lmDir[j];\n+    }\n+    int nSing \u003d solvedCols;\n+    for (int j \u003d 0; j \u003c solvedCols; ++j) {\n+        if ((lmDiag[j] \u003d\u003d 0) \u0026\u0026 (nSing \u003d\u003d solvedCols)) {\n+            nSing \u003d j;\n+        }\n+        if (nSing \u003c solvedCols) {\n+            work[j] \u003d 0;\n+        }\n+    }\n+    if (nSing \u003e 0) {\n+        for (int j \u003d nSing - 1; j \u003e\u003d 0; --j) {\n+            int pj \u003d permutation[j];\n+            double sum \u003d 0;\n+            for (int i \u003d j + 1; i \u003c nSing; ++i) {\n+                sum +\u003d jacobian[i * cols + pj] * work[i];\n+            }\n+            work[j] \u003d (work[j] - sum) / lmDiag[j];\n+        }\n+    }\n+    for (int j \u003d 0; j \u003c lmDir.length; ++j) {\n+        lmDir[permutation[j]] \u003d work[j];\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work) {\n    for (int j \u003d 0; j \u003c solvedCols; ++j) {\n        int pj \u003d permutation[j];\n        for (int i \u003d j + 1; i \u003c solvedCols; ++i) {\n            jacobian[i * cols + pj] \u003d jacobian[j * cols + permutation[i]];\n        }\n        lmDir[j] \u003d diagR[pj];\n        work[j] \u003d qy[j];\n    }\n    for (int j \u003d 0; j \u003c solvedCols; ++j) {\n        int pj \u003d permutation[j];\n        double dpj \u003d diag[pj];\n        if (dpj !\u003d 0) {\n            Arrays.fill(lmDiag, j + 1, lmDiag.length, 0);\n        }\n        lmDiag[j] \u003d dpj;\n        double qtbpj \u003d 0;\n        for (int k \u003d j; k \u003c solvedCols; ++k) {\n            int pk \u003d permutation[k];\n            if (lmDiag[k] !\u003d 0) {\n                double sin, cos;\n                double rkk \u003d jacobian[k * cols + pk];\n                if (Math.abs(rkk) \u003c Math.abs(lmDiag[k])) {\n                    double cotan \u003d rkk / lmDiag[k];\n                    sin \u003d 1.0 / Math.sqrt(1.0 + cotan * cotan);\n                    cos \u003d sin * cotan;\n                } else {\n                    double tan \u003d lmDiag[k] / rkk;\n                    cos \u003d 1.0 / Math.sqrt(1.0 + tan * tan);\n                    sin \u003d cos * tan;\n                }\n                jacobian[k * cols + pk] \u003d cos * rkk + sin * lmDiag[k];\n                double temp \u003d cos * work[k] + sin * qtbpj;\n                qtbpj \u003d -sin * work[k] + cos * qtbpj;\n                work[k] \u003d temp;\n                for (int i \u003d k + 1; i \u003c solvedCols; ++i) {\n                    double rik \u003d jacobian[i * cols + pk];\n                    temp \u003d cos * rik + sin * lmDiag[i];\n                    lmDiag[i] \u003d -sin * rik + cos * lmDiag[i];\n                    jacobian[i * cols + pk] \u003d temp;\n                }\n            }\n        }\n        int index \u003d j * cols + permutation[j];\n        lmDiag[j] \u003d jacobian[index];\n        jacobian[index] \u003d lmDir[j];\n    }\n    int nSing \u003d solvedCols;\n    for (int j \u003d 0; j \u003c solvedCols; ++j) {\n        if ((lmDiag[j] \u003d\u003d 0) \u0026\u0026 (nSing \u003d\u003d solvedCols)) {\n            nSing \u003d j;\n        }\n        if (nSing \u003c solvedCols) {\n            work[j] \u003d 0;\n        }\n    }\n    if (nSing \u003e 0) {\n        for (int j \u003d nSing - 1; j \u003e\u003d 0; --j) {\n            int pj \u003d permutation[j];\n            double sum \u003d 0;\n            for (int i \u003d j + 1; i \u003c nSing; ++i) {\n                sum +\u003d jacobian[i * cols + pj] * work[i];\n            }\n            work[j] \u003d (work[j] - sum) / lmDiag[j];\n        }\n    }\n    for (int j \u003d 0; j \u003c lmDir.length; ++j) {\n        lmDir[permutation[j]] \u003d work[j];\n    }\n}",
      "path": "src/mantissa/src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimator.java",
      "functionStartLine": 684,
      "functionName": "determineLMDirection",
      "functionAnnotation": "",
      "functionDoc": "Solve a*x \u003d b and d*x \u003d 0 in the least squares sense.\n\u003cp\u003eThis implementation is a translation in Java of the MINPACK\n\u003ca href\u003d\"http://www.netlib.org/minpack/qrsolv.f\"\u003eqrsolv\u003c/a\u003e\nroutine.\u003c/p\u003e\n\u003cp\u003eThis method sets the lmDir and lmDiag attributes.\u003c/p\u003e\n\u003cp\u003eThe authors of the original fortran function are:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eArgonne National Laboratory. MINPACK project. March 1980\u003c/li\u003e\n  \u003cli\u003eBurton  S. Garbow\u003c/li\u003e\n  \u003cli\u003eKenneth E. Hillstrom\u003c/li\u003e\n  \u003cli\u003eJorge   J. More\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLuc Maisonobe did the Java translation.\u003c/p\u003e\n\n@param qy array containing qTy\n@param diag diagonal matrix\n@param lmDiag diagonal elements associated with lmDir\n@param work work array\n"
    }
  }
}