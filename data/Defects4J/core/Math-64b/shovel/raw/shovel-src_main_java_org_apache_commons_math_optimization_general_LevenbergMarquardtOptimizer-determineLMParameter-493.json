{
  "origin": "codeshovel",
  "repositoryName": "Math-64b",
  "repositoryPath": "/tmp/Math-64b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LevenbergMarquardtOptimizer.java",
  "functionName": "determineLMParameter",
  "functionId": "determineLMParameter___qy-double[]__delta-double__diag-double[]__work1-double[]__work2-double[]__work3-double[]",
  "sourceFilePath": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
  "functionAnnotation": "",
  "functionDoc": "Determine the Levenberg-Marquardt parameter.\n\u003cp\u003eThis implementation is a translation in Java of the MINPACK\n\u003ca href\u003d\"http://www.netlib.org/minpack/lmpar.f\"\u003elmpar\u003c/a\u003e\nroutine.\u003c/p\u003e\n\u003cp\u003eThis method sets the lmPar and lmDir attributes.\u003c/p\u003e\n\u003cp\u003eThe authors of the original fortran function are:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eArgonne National Laboratory. MINPACK project. March 1980\u003c/li\u003e\n  \u003cli\u003eBurton  S. Garbow\u003c/li\u003e\n  \u003cli\u003eKenneth E. Hillstrom\u003c/li\u003e\n  \u003cli\u003eJorge   J. More\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLuc Maisonobe did the Java translation.\u003c/p\u003e\n\n@param qy array containing qTy\n@param delta upper bound on the euclidean norm of diagR * lmDir\n@param diag diagonal matrix\n@param work1 work array\n@param work2 work array\n@param work3 work array\n",
  "functionStartLine": 493,
  "functionEndLine": 640,
  "numCommitsSeen": 34,
  "timeTaken": 3439,
  "changeHistory": [
    "0905e8cf724b358277e219cbf1a06413faa48c9e",
    "26dac5a0e7fc9c6be9571b3e71a15d8502480d96",
    "d6a438e931412713e99624cf9ed74470f1040184",
    "8541f303370cec9a25f2b32b3d660b3f188913f0",
    "fbe565694aa2721d4a8538eb053171cc8ecfde47",
    "1f89e226f2b7dc9b3b498d63c5a5bd5bc23a46b6",
    "6d21abba54a9b3a0cca222abfacd26cabd88561c",
    "89ac173c2b467e6289df0e62f2a43ed1730fbad5"
  ],
  "changeHistoryShort": {
    "0905e8cf724b358277e219cbf1a06413faa48c9e": "Ybodychange",
    "26dac5a0e7fc9c6be9571b3e71a15d8502480d96": "Yformatchange",
    "d6a438e931412713e99624cf9ed74470f1040184": "Yfilerename",
    "8541f303370cec9a25f2b32b3d660b3f188913f0": "Ymultichange(Ymovefromfile,Ybodychange)",
    "fbe565694aa2721d4a8538eb053171cc8ecfde47": "Yfilerename",
    "1f89e226f2b7dc9b3b498d63c5a5bd5bc23a46b6": "Yformatchange",
    "6d21abba54a9b3a0cca222abfacd26cabd88561c": "Yfilerename",
    "89ac173c2b467e6289df0e62f2a43ed1730fbad5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0905e8cf724b358277e219cbf1a06413faa48c9e": {
      "type": "Ybodychange",
      "commitMessage": "tighten checkstyle rules: declaring multiple variables in one statement is now forbidden\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@825919 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/16/09, 7:51 AM",
      "commitName": "0905e8cf724b358277e219cbf1a06413faa48c9e",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "9/6/09, 1:56 AM",
      "commitNameOld": "fd5e4bf4e2efc81c9d3b1d6ad125ef034705d0ed",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 40.25,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "actualSource": "private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) {\n    for (int j \u003d 0; j \u003c rank; ++j) {\n        lmDir[permutation[j]] \u003d qy[j];\n    }\n    for (int j \u003d rank; j \u003c cols; ++j) {\n        lmDir[permutation[j]] \u003d 0;\n    }\n    for (int k \u003d rank - 1; k \u003e\u003d 0; --k) {\n        int pk \u003d permutation[k];\n        double ypk \u003d lmDir[pk] / diagR[pk];\n        for (int i \u003d 0; i \u003c k; ++i) {\n            lmDir[permutation[i]] -\u003d ypk * jacobian[i][pk];\n        }\n        lmDir[pk] \u003d ypk;\n    }\n    double dxNorm \u003d 0;\n    for (int j \u003d 0; j \u003c solvedCols; ++j) {\n        int pj \u003d permutation[j];\n        double s \u003d diag[pj] * lmDir[pj];\n        work1[pj] \u003d s;\n        dxNorm +\u003d s * s;\n    }\n    dxNorm \u003d Math.sqrt(dxNorm);\n    double fp \u003d dxNorm - delta;\n    if (fp \u003c\u003d 0.1 * delta) {\n        lmPar \u003d 0;\n        return;\n    }\n    double sum2;\n    double parl \u003d 0;\n    if (rank \u003d\u003d solvedCols) {\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            work1[pj] *\u003d diag[pj] / dxNorm;\n        }\n        sum2 \u003d 0;\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            double sum \u003d 0;\n            for (int i \u003d 0; i \u003c j; ++i) {\n                sum +\u003d jacobian[i][pj] * work1[permutation[i]];\n            }\n            double s \u003d (work1[pj] - sum) / diagR[pj];\n            work1[pj] \u003d s;\n            sum2 +\u003d s * s;\n        }\n        parl \u003d fp / (delta * sum2);\n    }\n    sum2 \u003d 0;\n    for (int j \u003d 0; j \u003c solvedCols; ++j) {\n        int pj \u003d permutation[j];\n        double sum \u003d 0;\n        for (int i \u003d 0; i \u003c\u003d j; ++i) {\n            sum +\u003d jacobian[i][pj] * qy[i];\n        }\n        sum /\u003d diag[pj];\n        sum2 +\u003d sum * sum;\n    }\n    double gNorm \u003d Math.sqrt(sum2);\n    double paru \u003d gNorm / delta;\n    if (paru \u003d\u003d 0) {\n        paru \u003d 2.2251e-308 / Math.min(delta, 0.1);\n    }\n    lmPar \u003d Math.min(paru, Math.max(lmPar, parl));\n    if (lmPar \u003d\u003d 0) {\n        lmPar \u003d gNorm / dxNorm;\n    }\n    for (int countdown \u003d 10; countdown \u003e\u003d 0; --countdown) {\n        if (lmPar \u003d\u003d 0) {\n            lmPar \u003d Math.max(2.2251e-308, 0.001 * paru);\n        }\n        double sPar \u003d Math.sqrt(lmPar);\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            work1[pj] \u003d sPar * diag[pj];\n        }\n        determineLMDirection(qy, work1, work2, work3);\n        dxNorm \u003d 0;\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            double s \u003d diag[pj] * lmDir[pj];\n            work3[pj] \u003d s;\n            dxNorm +\u003d s * s;\n        }\n        dxNorm \u003d Math.sqrt(dxNorm);\n        double previousFP \u003d fp;\n        fp \u003d dxNorm - delta;\n        if ((Math.abs(fp) \u003c\u003d 0.1 * delta) || ((parl \u003d\u003d 0) \u0026\u0026 (fp \u003c\u003d previousFP) \u0026\u0026 (previousFP \u003c 0))) {\n            return;\n        }\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            work1[pj] \u003d work3[pj] * diag[pj] / dxNorm;\n        }\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            work1[pj] /\u003d work2[j];\n            double tmp \u003d work1[pj];\n            for (int i \u003d j + 1; i \u003c solvedCols; ++i) {\n                work1[permutation[i]] -\u003d jacobian[i][pj] * tmp;\n            }\n        }\n        sum2 \u003d 0;\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            double s \u003d work1[permutation[j]];\n            sum2 +\u003d s * s;\n        }\n        double correction \u003d fp / (delta * sum2);\n        if (fp \u003e 0) {\n            parl \u003d Math.max(parl, lmPar);\n        } else if (fp \u003c 0) {\n            paru \u003d Math.min(paru, lmPar);\n        }\n        lmPar \u003d Math.max(parl, lmPar + correction);\n    }\n}",
      "path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
      "functionStartLine": 457,
      "functionName": "determineLMParameter",
      "functionAnnotation": "",
      "functionDoc": "Determine the Levenberg-Marquardt parameter.\n\u003cp\u003eThis implementation is a translation in Java of the MINPACK\n\u003ca href\u003d\"http://www.netlib.org/minpack/lmpar.f\"\u003elmpar\u003c/a\u003e\nroutine.\u003c/p\u003e\n\u003cp\u003eThis method sets the lmPar and lmDir attributes.\u003c/p\u003e\n\u003cp\u003eThe authors of the original fortran function are:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eArgonne National Laboratory. MINPACK project. March 1980\u003c/li\u003e\n  \u003cli\u003eBurton  S. Garbow\u003c/li\u003e\n  \u003cli\u003eKenneth E. Hillstrom\u003c/li\u003e\n  \u003cli\u003eJorge   J. More\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLuc Maisonobe did the Java translation.\u003c/p\u003e\n\n@param qy array containing qTy\n@param delta upper bound on the euclidean norm of diagR * lmDir\n@param diag diagonal matrix\n@param work1 work array\n@param work2 work array\n@param work3 work array\n",
      "diff": "@@ -1,115 +1,116 @@\n private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) {\n     for (int j \u003d 0; j \u003c rank; ++j) {\n         lmDir[permutation[j]] \u003d qy[j];\n     }\n     for (int j \u003d rank; j \u003c cols; ++j) {\n         lmDir[permutation[j]] \u003d 0;\n     }\n     for (int k \u003d rank - 1; k \u003e\u003d 0; --k) {\n         int pk \u003d permutation[k];\n         double ypk \u003d lmDir[pk] / diagR[pk];\n         for (int i \u003d 0; i \u003c k; ++i) {\n             lmDir[permutation[i]] -\u003d ypk * jacobian[i][pk];\n         }\n         lmDir[pk] \u003d ypk;\n     }\n     double dxNorm \u003d 0;\n     for (int j \u003d 0; j \u003c solvedCols; ++j) {\n         int pj \u003d permutation[j];\n         double s \u003d diag[pj] * lmDir[pj];\n         work1[pj] \u003d s;\n         dxNorm +\u003d s * s;\n     }\n     dxNorm \u003d Math.sqrt(dxNorm);\n     double fp \u003d dxNorm - delta;\n     if (fp \u003c\u003d 0.1 * delta) {\n         lmPar \u003d 0;\n         return;\n     }\n-    double sum2, parl \u003d 0;\n+    double sum2;\n+    double parl \u003d 0;\n     if (rank \u003d\u003d solvedCols) {\n         for (int j \u003d 0; j \u003c solvedCols; ++j) {\n             int pj \u003d permutation[j];\n             work1[pj] *\u003d diag[pj] / dxNorm;\n         }\n         sum2 \u003d 0;\n         for (int j \u003d 0; j \u003c solvedCols; ++j) {\n             int pj \u003d permutation[j];\n             double sum \u003d 0;\n             for (int i \u003d 0; i \u003c j; ++i) {\n                 sum +\u003d jacobian[i][pj] * work1[permutation[i]];\n             }\n             double s \u003d (work1[pj] - sum) / diagR[pj];\n             work1[pj] \u003d s;\n             sum2 +\u003d s * s;\n         }\n         parl \u003d fp / (delta * sum2);\n     }\n     sum2 \u003d 0;\n     for (int j \u003d 0; j \u003c solvedCols; ++j) {\n         int pj \u003d permutation[j];\n         double sum \u003d 0;\n         for (int i \u003d 0; i \u003c\u003d j; ++i) {\n             sum +\u003d jacobian[i][pj] * qy[i];\n         }\n         sum /\u003d diag[pj];\n         sum2 +\u003d sum * sum;\n     }\n     double gNorm \u003d Math.sqrt(sum2);\n     double paru \u003d gNorm / delta;\n     if (paru \u003d\u003d 0) {\n         paru \u003d 2.2251e-308 / Math.min(delta, 0.1);\n     }\n     lmPar \u003d Math.min(paru, Math.max(lmPar, parl));\n     if (lmPar \u003d\u003d 0) {\n         lmPar \u003d gNorm / dxNorm;\n     }\n     for (int countdown \u003d 10; countdown \u003e\u003d 0; --countdown) {\n         if (lmPar \u003d\u003d 0) {\n             lmPar \u003d Math.max(2.2251e-308, 0.001 * paru);\n         }\n         double sPar \u003d Math.sqrt(lmPar);\n         for (int j \u003d 0; j \u003c solvedCols; ++j) {\n             int pj \u003d permutation[j];\n             work1[pj] \u003d sPar * diag[pj];\n         }\n         determineLMDirection(qy, work1, work2, work3);\n         dxNorm \u003d 0;\n         for (int j \u003d 0; j \u003c solvedCols; ++j) {\n             int pj \u003d permutation[j];\n             double s \u003d diag[pj] * lmDir[pj];\n             work3[pj] \u003d s;\n             dxNorm +\u003d s * s;\n         }\n         dxNorm \u003d Math.sqrt(dxNorm);\n         double previousFP \u003d fp;\n         fp \u003d dxNorm - delta;\n         if ((Math.abs(fp) \u003c\u003d 0.1 * delta) || ((parl \u003d\u003d 0) \u0026\u0026 (fp \u003c\u003d previousFP) \u0026\u0026 (previousFP \u003c 0))) {\n             return;\n         }\n         for (int j \u003d 0; j \u003c solvedCols; ++j) {\n             int pj \u003d permutation[j];\n             work1[pj] \u003d work3[pj] * diag[pj] / dxNorm;\n         }\n         for (int j \u003d 0; j \u003c solvedCols; ++j) {\n             int pj \u003d permutation[j];\n             work1[pj] /\u003d work2[j];\n             double tmp \u003d work1[pj];\n             for (int i \u003d j + 1; i \u003c solvedCols; ++i) {\n                 work1[permutation[i]] -\u003d jacobian[i][pj] * tmp;\n             }\n         }\n         sum2 \u003d 0;\n         for (int j \u003d 0; j \u003c solvedCols; ++j) {\n             double s \u003d work1[permutation[j]];\n             sum2 +\u003d s * s;\n         }\n         double correction \u003d fp / (delta * sum2);\n         if (fp \u003e 0) {\n             parl \u003d Math.max(parl, lmPar);\n         } else if (fp \u003c 0) {\n             paru \u003d Math.min(paru, lmPar);\n         }\n         lmPar \u003d Math.max(parl, lmPar + correction);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "26dac5a0e7fc9c6be9571b3e71a15d8502480d96": {
      "type": "Yformatchange",
      "commitMessage": "Removed trailing spaces.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@811685 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/5/09, 10:36 AM",
      "commitName": "26dac5a0e7fc9c6be9571b3e71a15d8502480d96",
      "commitAuthor": "Phil Steitz",
      "commitDateOld": "8/1/09, 7:30 AM",
      "commitNameOld": "d6a438e931412713e99624cf9ed74470f1040184",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 35.13,
      "commitsBetweenForRepo": 44,
      "commitsBetweenForFile": 1,
      "actualSource": "private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) {\n    for (int j \u003d 0; j \u003c rank; ++j) {\n        lmDir[permutation[j]] \u003d qy[j];\n    }\n    for (int j \u003d rank; j \u003c cols; ++j) {\n        lmDir[permutation[j]] \u003d 0;\n    }\n    for (int k \u003d rank - 1; k \u003e\u003d 0; --k) {\n        int pk \u003d permutation[k];\n        double ypk \u003d lmDir[pk] / diagR[pk];\n        for (int i \u003d 0; i \u003c k; ++i) {\n            lmDir[permutation[i]] -\u003d ypk * jacobian[i][pk];\n        }\n        lmDir[pk] \u003d ypk;\n    }\n    double dxNorm \u003d 0;\n    for (int j \u003d 0; j \u003c solvedCols; ++j) {\n        int pj \u003d permutation[j];\n        double s \u003d diag[pj] * lmDir[pj];\n        work1[pj] \u003d s;\n        dxNorm +\u003d s * s;\n    }\n    dxNorm \u003d Math.sqrt(dxNorm);\n    double fp \u003d dxNorm - delta;\n    if (fp \u003c\u003d 0.1 * delta) {\n        lmPar \u003d 0;\n        return;\n    }\n    double sum2, parl \u003d 0;\n    if (rank \u003d\u003d solvedCols) {\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            work1[pj] *\u003d diag[pj] / dxNorm;\n        }\n        sum2 \u003d 0;\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            double sum \u003d 0;\n            for (int i \u003d 0; i \u003c j; ++i) {\n                sum +\u003d jacobian[i][pj] * work1[permutation[i]];\n            }\n            double s \u003d (work1[pj] - sum) / diagR[pj];\n            work1[pj] \u003d s;\n            sum2 +\u003d s * s;\n        }\n        parl \u003d fp / (delta * sum2);\n    }\n    sum2 \u003d 0;\n    for (int j \u003d 0; j \u003c solvedCols; ++j) {\n        int pj \u003d permutation[j];\n        double sum \u003d 0;\n        for (int i \u003d 0; i \u003c\u003d j; ++i) {\n            sum +\u003d jacobian[i][pj] * qy[i];\n        }\n        sum /\u003d diag[pj];\n        sum2 +\u003d sum * sum;\n    }\n    double gNorm \u003d Math.sqrt(sum2);\n    double paru \u003d gNorm / delta;\n    if (paru \u003d\u003d 0) {\n        paru \u003d 2.2251e-308 / Math.min(delta, 0.1);\n    }\n    lmPar \u003d Math.min(paru, Math.max(lmPar, parl));\n    if (lmPar \u003d\u003d 0) {\n        lmPar \u003d gNorm / dxNorm;\n    }\n    for (int countdown \u003d 10; countdown \u003e\u003d 0; --countdown) {\n        if (lmPar \u003d\u003d 0) {\n            lmPar \u003d Math.max(2.2251e-308, 0.001 * paru);\n        }\n        double sPar \u003d Math.sqrt(lmPar);\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            work1[pj] \u003d sPar * diag[pj];\n        }\n        determineLMDirection(qy, work1, work2, work3);\n        dxNorm \u003d 0;\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            double s \u003d diag[pj] * lmDir[pj];\n            work3[pj] \u003d s;\n            dxNorm +\u003d s * s;\n        }\n        dxNorm \u003d Math.sqrt(dxNorm);\n        double previousFP \u003d fp;\n        fp \u003d dxNorm - delta;\n        if ((Math.abs(fp) \u003c\u003d 0.1 * delta) || ((parl \u003d\u003d 0) \u0026\u0026 (fp \u003c\u003d previousFP) \u0026\u0026 (previousFP \u003c 0))) {\n            return;\n        }\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            work1[pj] \u003d work3[pj] * diag[pj] / dxNorm;\n        }\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            work1[pj] /\u003d work2[j];\n            double tmp \u003d work1[pj];\n            for (int i \u003d j + 1; i \u003c solvedCols; ++i) {\n                work1[permutation[i]] -\u003d jacobian[i][pj] * tmp;\n            }\n        }\n        sum2 \u003d 0;\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            double s \u003d work1[permutation[j]];\n            sum2 +\u003d s * s;\n        }\n        double correction \u003d fp / (delta * sum2);\n        if (fp \u003e 0) {\n            parl \u003d Math.max(parl, lmPar);\n        } else if (fp \u003c 0) {\n            paru \u003d Math.min(paru, lmPar);\n        }\n        lmPar \u003d Math.max(parl, lmPar + correction);\n    }\n}",
      "path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
      "functionStartLine": 455,
      "functionName": "determineLMParameter",
      "functionAnnotation": "",
      "functionDoc": "Determine the Levenberg-Marquardt parameter.\n\u003cp\u003eThis implementation is a translation in Java of the MINPACK\n\u003ca href\u003d\"http://www.netlib.org/minpack/lmpar.f\"\u003elmpar\u003c/a\u003e\nroutine.\u003c/p\u003e\n\u003cp\u003eThis method sets the lmPar and lmDir attributes.\u003c/p\u003e\n\u003cp\u003eThe authors of the original fortran function are:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eArgonne National Laboratory. MINPACK project. March 1980\u003c/li\u003e\n  \u003cli\u003eBurton  S. Garbow\u003c/li\u003e\n  \u003cli\u003eKenneth E. Hillstrom\u003c/li\u003e\n  \u003cli\u003eJorge   J. More\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLuc Maisonobe did the Java translation.\u003c/p\u003e\n\n@param qy array containing qTy\n@param delta upper bound on the euclidean norm of diagR * lmDir\n@param diag diagonal matrix\n@param work1 work array\n@param work2 work array\n@param work3 work array\n",
      "diff": "",
      "extendedDetails": {}
    },
    "d6a438e931412713e99624cf9ed74470f1040184": {
      "type": "Yfilerename",
      "commitMessage": "moved main java directory for compliance with maven standard directory layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@799870 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/1/09, 7:30 AM",
      "commitName": "d6a438e931412713e99624cf9ed74470f1040184",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "8/1/09, 7:23 AM",
      "commitNameOld": "2ad5ef61630be627f46ae1c266cf796f044bd4a8",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) {\n    for (int j \u003d 0; j \u003c rank; ++j) {\n        lmDir[permutation[j]] \u003d qy[j];\n    }\n    for (int j \u003d rank; j \u003c cols; ++j) {\n        lmDir[permutation[j]] \u003d 0;\n    }\n    for (int k \u003d rank - 1; k \u003e\u003d 0; --k) {\n        int pk \u003d permutation[k];\n        double ypk \u003d lmDir[pk] / diagR[pk];\n        for (int i \u003d 0; i \u003c k; ++i) {\n            lmDir[permutation[i]] -\u003d ypk * jacobian[i][pk];\n        }\n        lmDir[pk] \u003d ypk;\n    }\n    double dxNorm \u003d 0;\n    for (int j \u003d 0; j \u003c solvedCols; ++j) {\n        int pj \u003d permutation[j];\n        double s \u003d diag[pj] * lmDir[pj];\n        work1[pj] \u003d s;\n        dxNorm +\u003d s * s;\n    }\n    dxNorm \u003d Math.sqrt(dxNorm);\n    double fp \u003d dxNorm - delta;\n    if (fp \u003c\u003d 0.1 * delta) {\n        lmPar \u003d 0;\n        return;\n    }\n    double sum2, parl \u003d 0;\n    if (rank \u003d\u003d solvedCols) {\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            work1[pj] *\u003d diag[pj] / dxNorm;\n        }\n        sum2 \u003d 0;\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            double sum \u003d 0;\n            for (int i \u003d 0; i \u003c j; ++i) {\n                sum +\u003d jacobian[i][pj] * work1[permutation[i]];\n            }\n            double s \u003d (work1[pj] - sum) / diagR[pj];\n            work1[pj] \u003d s;\n            sum2 +\u003d s * s;\n        }\n        parl \u003d fp / (delta * sum2);\n    }\n    sum2 \u003d 0;\n    for (int j \u003d 0; j \u003c solvedCols; ++j) {\n        int pj \u003d permutation[j];\n        double sum \u003d 0;\n        for (int i \u003d 0; i \u003c\u003d j; ++i) {\n            sum +\u003d jacobian[i][pj] * qy[i];\n        }\n        sum /\u003d diag[pj];\n        sum2 +\u003d sum * sum;\n    }\n    double gNorm \u003d Math.sqrt(sum2);\n    double paru \u003d gNorm / delta;\n    if (paru \u003d\u003d 0) {\n        paru \u003d 2.2251e-308 / Math.min(delta, 0.1);\n    }\n    lmPar \u003d Math.min(paru, Math.max(lmPar, parl));\n    if (lmPar \u003d\u003d 0) {\n        lmPar \u003d gNorm / dxNorm;\n    }\n    for (int countdown \u003d 10; countdown \u003e\u003d 0; --countdown) {\n        if (lmPar \u003d\u003d 0) {\n            lmPar \u003d Math.max(2.2251e-308, 0.001 * paru);\n        }\n        double sPar \u003d Math.sqrt(lmPar);\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            work1[pj] \u003d sPar * diag[pj];\n        }\n        determineLMDirection(qy, work1, work2, work3);\n        dxNorm \u003d 0;\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            double s \u003d diag[pj] * lmDir[pj];\n            work3[pj] \u003d s;\n            dxNorm +\u003d s * s;\n        }\n        dxNorm \u003d Math.sqrt(dxNorm);\n        double previousFP \u003d fp;\n        fp \u003d dxNorm - delta;\n        if ((Math.abs(fp) \u003c\u003d 0.1 * delta) || ((parl \u003d\u003d 0) \u0026\u0026 (fp \u003c\u003d previousFP) \u0026\u0026 (previousFP \u003c 0))) {\n            return;\n        }\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            work1[pj] \u003d work3[pj] * diag[pj] / dxNorm;\n        }\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            work1[pj] /\u003d work2[j];\n            double tmp \u003d work1[pj];\n            for (int i \u003d j + 1; i \u003c solvedCols; ++i) {\n                work1[permutation[i]] -\u003d jacobian[i][pj] * tmp;\n            }\n        }\n        sum2 \u003d 0;\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            double s \u003d work1[permutation[j]];\n            sum2 +\u003d s * s;\n        }\n        double correction \u003d fp / (delta * sum2);\n        if (fp \u003e 0) {\n            parl \u003d Math.max(parl, lmPar);\n        } else if (fp \u003c 0) {\n            paru \u003d Math.min(paru, lmPar);\n        }\n        lmPar \u003d Math.max(parl, lmPar + correction);\n    }\n}",
      "path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
      "functionStartLine": 455,
      "functionName": "determineLMParameter",
      "functionAnnotation": "",
      "functionDoc": "Determine the Levenberg-Marquardt parameter.\n\u003cp\u003eThis implementation is a translation in Java of the MINPACK\n\u003ca href\u003d\"http://www.netlib.org/minpack/lmpar.f\"\u003elmpar\u003c/a\u003e\nroutine.\u003c/p\u003e\n\u003cp\u003eThis method sets the lmPar and lmDir attributes.\u003c/p\u003e\n\u003cp\u003eThe authors of the original fortran function are:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eArgonne National Laboratory. MINPACK project. March 1980\u003c/li\u003e\n  \u003cli\u003eBurton  S. Garbow\u003c/li\u003e\n  \u003cli\u003eKenneth E. Hillstrom\u003c/li\u003e\n  \u003cli\u003eJorge   J. More\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLuc Maisonobe did the Java translation.\u003c/p\u003e\n\n@param qy array containing qTy\n@param delta upper bound on the euclidean norm of diagR * lmDir\n@param diag diagonal matrix\n@param work1 work array\n@param work2 work array\n@param work3 work array\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "newPath": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java"
      }
    },
    "8541f303370cec9a25f2b32b3d660b3f188913f0": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "adapted old Levenberg-Marquardt estimator to new top level optimizers API\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@754727 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/15/09, 12:11 PM",
      "commitName": "8541f303370cec9a25f2b32b3d660b3f188913f0",
      "commitAuthor": "Luc Maisonobe",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "adapted old Levenberg-Marquardt estimator to new top level optimizers API\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@754727 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "3/15/09, 12:11 PM",
          "commitName": "8541f303370cec9a25f2b32b3d660b3f188913f0",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "3/14/09, 10:38 AM",
          "commitNameOld": "8cb418e7fa50aba9977fe073aec66ad3f6e4f07c",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 1.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) {\n    for (int j \u003d 0; j \u003c rank; ++j) {\n        lmDir[permutation[j]] \u003d qy[j];\n    }\n    for (int j \u003d rank; j \u003c cols; ++j) {\n        lmDir[permutation[j]] \u003d 0;\n    }\n    for (int k \u003d rank - 1; k \u003e\u003d 0; --k) {\n        int pk \u003d permutation[k];\n        double ypk \u003d lmDir[pk] / diagR[pk];\n        for (int i \u003d 0; i \u003c k; ++i) {\n            lmDir[permutation[i]] -\u003d ypk * jacobian[i][pk];\n        }\n        lmDir[pk] \u003d ypk;\n    }\n    double dxNorm \u003d 0;\n    for (int j \u003d 0; j \u003c solvedCols; ++j) {\n        int pj \u003d permutation[j];\n        double s \u003d diag[pj] * lmDir[pj];\n        work1[pj] \u003d s;\n        dxNorm +\u003d s * s;\n    }\n    dxNorm \u003d Math.sqrt(dxNorm);\n    double fp \u003d dxNorm - delta;\n    if (fp \u003c\u003d 0.1 * delta) {\n        lmPar \u003d 0;\n        return;\n    }\n    double sum2, parl \u003d 0;\n    if (rank \u003d\u003d solvedCols) {\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            work1[pj] *\u003d diag[pj] / dxNorm;\n        }\n        sum2 \u003d 0;\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            double sum \u003d 0;\n            for (int i \u003d 0; i \u003c j; ++i) {\n                sum +\u003d jacobian[i][pj] * work1[permutation[i]];\n            }\n            double s \u003d (work1[pj] - sum) / diagR[pj];\n            work1[pj] \u003d s;\n            sum2 +\u003d s * s;\n        }\n        parl \u003d fp / (delta * sum2);\n    }\n    sum2 \u003d 0;\n    for (int j \u003d 0; j \u003c solvedCols; ++j) {\n        int pj \u003d permutation[j];\n        double sum \u003d 0;\n        for (int i \u003d 0; i \u003c\u003d j; ++i) {\n            sum +\u003d jacobian[i][pj] * qy[i];\n        }\n        sum /\u003d diag[pj];\n        sum2 +\u003d sum * sum;\n    }\n    double gNorm \u003d Math.sqrt(sum2);\n    double paru \u003d gNorm / delta;\n    if (paru \u003d\u003d 0) {\n        paru \u003d 2.2251e-308 / Math.min(delta, 0.1);\n    }\n    lmPar \u003d Math.min(paru, Math.max(lmPar, parl));\n    if (lmPar \u003d\u003d 0) {\n        lmPar \u003d gNorm / dxNorm;\n    }\n    for (int countdown \u003d 10; countdown \u003e\u003d 0; --countdown) {\n        if (lmPar \u003d\u003d 0) {\n            lmPar \u003d Math.max(2.2251e-308, 0.001 * paru);\n        }\n        double sPar \u003d Math.sqrt(lmPar);\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            work1[pj] \u003d sPar * diag[pj];\n        }\n        determineLMDirection(qy, work1, work2, work3);\n        dxNorm \u003d 0;\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            double s \u003d diag[pj] * lmDir[pj];\n            work3[pj] \u003d s;\n            dxNorm +\u003d s * s;\n        }\n        dxNorm \u003d Math.sqrt(dxNorm);\n        double previousFP \u003d fp;\n        fp \u003d dxNorm - delta;\n        if ((Math.abs(fp) \u003c\u003d 0.1 * delta) || ((parl \u003d\u003d 0) \u0026\u0026 (fp \u003c\u003d previousFP) \u0026\u0026 (previousFP \u003c 0))) {\n            return;\n        }\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            work1[pj] \u003d work3[pj] * diag[pj] / dxNorm;\n        }\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            work1[pj] /\u003d work2[j];\n            double tmp \u003d work1[pj];\n            for (int i \u003d j + 1; i \u003c solvedCols; ++i) {\n                work1[permutation[i]] -\u003d jacobian[i][pj] * tmp;\n            }\n        }\n        sum2 \u003d 0;\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            double s \u003d work1[permutation[j]];\n            sum2 +\u003d s * s;\n        }\n        double correction \u003d fp / (delta * sum2);\n        if (fp \u003e 0) {\n            parl \u003d Math.max(parl, lmPar);\n        } else if (fp \u003c 0) {\n            paru \u003d Math.min(paru, lmPar);\n        }\n        lmPar \u003d Math.max(parl, lmPar + correction);\n    }\n}",
          "path": "src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
          "functionStartLine": 455,
          "functionName": "determineLMParameter",
          "functionAnnotation": "",
          "functionDoc": "Determine the Levenberg-Marquardt parameter.\n\u003cp\u003eThis implementation is a translation in Java of the MINPACK\n\u003ca href\u003d\"http://www.netlib.org/minpack/lmpar.f\"\u003elmpar\u003c/a\u003e\nroutine.\u003c/p\u003e\n\u003cp\u003eThis method sets the lmPar and lmDir attributes.\u003c/p\u003e\n\u003cp\u003eThe authors of the original fortran function are:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eArgonne National Laboratory. MINPACK project. March 1980\u003c/li\u003e\n  \u003cli\u003eBurton  S. Garbow\u003c/li\u003e\n  \u003cli\u003eKenneth E. Hillstrom\u003c/li\u003e\n  \u003cli\u003eJorge   J. More\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLuc Maisonobe did the Java translation.\u003c/p\u003e\n\n@param qy array containing qTy\n@param delta upper bound on the euclidean norm of diagR * lmDir\n@param diag diagonal matrix\n@param work1 work array\n@param work2 work array\n@param work3 work array\n",
          "diff": "@@ -1,115 +1,115 @@\n private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) {\n     for (int j \u003d 0; j \u003c rank; ++j) {\n         lmDir[permutation[j]] \u003d qy[j];\n     }\n     for (int j \u003d rank; j \u003c cols; ++j) {\n         lmDir[permutation[j]] \u003d 0;\n     }\n     for (int k \u003d rank - 1; k \u003e\u003d 0; --k) {\n         int pk \u003d permutation[k];\n         double ypk \u003d lmDir[pk] / diagR[pk];\n-        for (int i \u003d 0, index \u003d pk; i \u003c k; ++i, index +\u003d cols) {\n-            lmDir[permutation[i]] -\u003d ypk * jacobian[index];\n+        for (int i \u003d 0; i \u003c k; ++i) {\n+            lmDir[permutation[i]] -\u003d ypk * jacobian[i][pk];\n         }\n         lmDir[pk] \u003d ypk;\n     }\n     double dxNorm \u003d 0;\n     for (int j \u003d 0; j \u003c solvedCols; ++j) {\n         int pj \u003d permutation[j];\n         double s \u003d diag[pj] * lmDir[pj];\n         work1[pj] \u003d s;\n         dxNorm +\u003d s * s;\n     }\n     dxNorm \u003d Math.sqrt(dxNorm);\n     double fp \u003d dxNorm - delta;\n     if (fp \u003c\u003d 0.1 * delta) {\n         lmPar \u003d 0;\n         return;\n     }\n     double sum2, parl \u003d 0;\n     if (rank \u003d\u003d solvedCols) {\n         for (int j \u003d 0; j \u003c solvedCols; ++j) {\n             int pj \u003d permutation[j];\n             work1[pj] *\u003d diag[pj] / dxNorm;\n         }\n         sum2 \u003d 0;\n         for (int j \u003d 0; j \u003c solvedCols; ++j) {\n             int pj \u003d permutation[j];\n             double sum \u003d 0;\n-            for (int i \u003d 0, index \u003d pj; i \u003c j; ++i, index +\u003d cols) {\n-                sum +\u003d jacobian[index] * work1[permutation[i]];\n+            for (int i \u003d 0; i \u003c j; ++i) {\n+                sum +\u003d jacobian[i][pj] * work1[permutation[i]];\n             }\n             double s \u003d (work1[pj] - sum) / diagR[pj];\n             work1[pj] \u003d s;\n             sum2 +\u003d s * s;\n         }\n         parl \u003d fp / (delta * sum2);\n     }\n     sum2 \u003d 0;\n     for (int j \u003d 0; j \u003c solvedCols; ++j) {\n         int pj \u003d permutation[j];\n         double sum \u003d 0;\n-        for (int i \u003d 0, index \u003d pj; i \u003c\u003d j; ++i, index +\u003d cols) {\n-            sum +\u003d jacobian[index] * qy[i];\n+        for (int i \u003d 0; i \u003c\u003d j; ++i) {\n+            sum +\u003d jacobian[i][pj] * qy[i];\n         }\n         sum /\u003d diag[pj];\n         sum2 +\u003d sum * sum;\n     }\n     double gNorm \u003d Math.sqrt(sum2);\n     double paru \u003d gNorm / delta;\n     if (paru \u003d\u003d 0) {\n         paru \u003d 2.2251e-308 / Math.min(delta, 0.1);\n     }\n     lmPar \u003d Math.min(paru, Math.max(lmPar, parl));\n     if (lmPar \u003d\u003d 0) {\n         lmPar \u003d gNorm / dxNorm;\n     }\n     for (int countdown \u003d 10; countdown \u003e\u003d 0; --countdown) {\n         if (lmPar \u003d\u003d 0) {\n             lmPar \u003d Math.max(2.2251e-308, 0.001 * paru);\n         }\n         double sPar \u003d Math.sqrt(lmPar);\n         for (int j \u003d 0; j \u003c solvedCols; ++j) {\n             int pj \u003d permutation[j];\n             work1[pj] \u003d sPar * diag[pj];\n         }\n         determineLMDirection(qy, work1, work2, work3);\n         dxNorm \u003d 0;\n         for (int j \u003d 0; j \u003c solvedCols; ++j) {\n             int pj \u003d permutation[j];\n             double s \u003d diag[pj] * lmDir[pj];\n             work3[pj] \u003d s;\n             dxNorm +\u003d s * s;\n         }\n         dxNorm \u003d Math.sqrt(dxNorm);\n         double previousFP \u003d fp;\n         fp \u003d dxNorm - delta;\n         if ((Math.abs(fp) \u003c\u003d 0.1 * delta) || ((parl \u003d\u003d 0) \u0026\u0026 (fp \u003c\u003d previousFP) \u0026\u0026 (previousFP \u003c 0))) {\n             return;\n         }\n         for (int j \u003d 0; j \u003c solvedCols; ++j) {\n             int pj \u003d permutation[j];\n             work1[pj] \u003d work3[pj] * diag[pj] / dxNorm;\n         }\n         for (int j \u003d 0; j \u003c solvedCols; ++j) {\n             int pj \u003d permutation[j];\n             work1[pj] /\u003d work2[j];\n             double tmp \u003d work1[pj];\n             for (int i \u003d j + 1; i \u003c solvedCols; ++i) {\n-                work1[permutation[i]] -\u003d jacobian[i * cols + pj] * tmp;\n+                work1[permutation[i]] -\u003d jacobian[i][pj] * tmp;\n             }\n         }\n         sum2 \u003d 0;\n         for (int j \u003d 0; j \u003c solvedCols; ++j) {\n             double s \u003d work1[permutation[j]];\n             sum2 +\u003d s * s;\n         }\n         double correction \u003d fp / (delta * sum2);\n         if (fp \u003e 0) {\n             parl \u003d Math.max(parl, lmPar);\n         } else if (fp \u003c 0) {\n             paru \u003d Math.min(paru, lmPar);\n         }\n         lmPar \u003d Math.max(parl, lmPar + correction);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java",
            "newPath": "src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
            "oldMethodName": "determineLMParameter",
            "newMethodName": "determineLMParameter"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "adapted old Levenberg-Marquardt estimator to new top level optimizers API\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@754727 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "3/15/09, 12:11 PM",
          "commitName": "8541f303370cec9a25f2b32b3d660b3f188913f0",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "3/14/09, 10:38 AM",
          "commitNameOld": "8cb418e7fa50aba9977fe073aec66ad3f6e4f07c",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 1.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) {\n    for (int j \u003d 0; j \u003c rank; ++j) {\n        lmDir[permutation[j]] \u003d qy[j];\n    }\n    for (int j \u003d rank; j \u003c cols; ++j) {\n        lmDir[permutation[j]] \u003d 0;\n    }\n    for (int k \u003d rank - 1; k \u003e\u003d 0; --k) {\n        int pk \u003d permutation[k];\n        double ypk \u003d lmDir[pk] / diagR[pk];\n        for (int i \u003d 0; i \u003c k; ++i) {\n            lmDir[permutation[i]] -\u003d ypk * jacobian[i][pk];\n        }\n        lmDir[pk] \u003d ypk;\n    }\n    double dxNorm \u003d 0;\n    for (int j \u003d 0; j \u003c solvedCols; ++j) {\n        int pj \u003d permutation[j];\n        double s \u003d diag[pj] * lmDir[pj];\n        work1[pj] \u003d s;\n        dxNorm +\u003d s * s;\n    }\n    dxNorm \u003d Math.sqrt(dxNorm);\n    double fp \u003d dxNorm - delta;\n    if (fp \u003c\u003d 0.1 * delta) {\n        lmPar \u003d 0;\n        return;\n    }\n    double sum2, parl \u003d 0;\n    if (rank \u003d\u003d solvedCols) {\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            work1[pj] *\u003d diag[pj] / dxNorm;\n        }\n        sum2 \u003d 0;\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            double sum \u003d 0;\n            for (int i \u003d 0; i \u003c j; ++i) {\n                sum +\u003d jacobian[i][pj] * work1[permutation[i]];\n            }\n            double s \u003d (work1[pj] - sum) / diagR[pj];\n            work1[pj] \u003d s;\n            sum2 +\u003d s * s;\n        }\n        parl \u003d fp / (delta * sum2);\n    }\n    sum2 \u003d 0;\n    for (int j \u003d 0; j \u003c solvedCols; ++j) {\n        int pj \u003d permutation[j];\n        double sum \u003d 0;\n        for (int i \u003d 0; i \u003c\u003d j; ++i) {\n            sum +\u003d jacobian[i][pj] * qy[i];\n        }\n        sum /\u003d diag[pj];\n        sum2 +\u003d sum * sum;\n    }\n    double gNorm \u003d Math.sqrt(sum2);\n    double paru \u003d gNorm / delta;\n    if (paru \u003d\u003d 0) {\n        paru \u003d 2.2251e-308 / Math.min(delta, 0.1);\n    }\n    lmPar \u003d Math.min(paru, Math.max(lmPar, parl));\n    if (lmPar \u003d\u003d 0) {\n        lmPar \u003d gNorm / dxNorm;\n    }\n    for (int countdown \u003d 10; countdown \u003e\u003d 0; --countdown) {\n        if (lmPar \u003d\u003d 0) {\n            lmPar \u003d Math.max(2.2251e-308, 0.001 * paru);\n        }\n        double sPar \u003d Math.sqrt(lmPar);\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            work1[pj] \u003d sPar * diag[pj];\n        }\n        determineLMDirection(qy, work1, work2, work3);\n        dxNorm \u003d 0;\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            double s \u003d diag[pj] * lmDir[pj];\n            work3[pj] \u003d s;\n            dxNorm +\u003d s * s;\n        }\n        dxNorm \u003d Math.sqrt(dxNorm);\n        double previousFP \u003d fp;\n        fp \u003d dxNorm - delta;\n        if ((Math.abs(fp) \u003c\u003d 0.1 * delta) || ((parl \u003d\u003d 0) \u0026\u0026 (fp \u003c\u003d previousFP) \u0026\u0026 (previousFP \u003c 0))) {\n            return;\n        }\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            work1[pj] \u003d work3[pj] * diag[pj] / dxNorm;\n        }\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            work1[pj] /\u003d work2[j];\n            double tmp \u003d work1[pj];\n            for (int i \u003d j + 1; i \u003c solvedCols; ++i) {\n                work1[permutation[i]] -\u003d jacobian[i][pj] * tmp;\n            }\n        }\n        sum2 \u003d 0;\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            double s \u003d work1[permutation[j]];\n            sum2 +\u003d s * s;\n        }\n        double correction \u003d fp / (delta * sum2);\n        if (fp \u003e 0) {\n            parl \u003d Math.max(parl, lmPar);\n        } else if (fp \u003c 0) {\n            paru \u003d Math.min(paru, lmPar);\n        }\n        lmPar \u003d Math.max(parl, lmPar + correction);\n    }\n}",
          "path": "src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
          "functionStartLine": 455,
          "functionName": "determineLMParameter",
          "functionAnnotation": "",
          "functionDoc": "Determine the Levenberg-Marquardt parameter.\n\u003cp\u003eThis implementation is a translation in Java of the MINPACK\n\u003ca href\u003d\"http://www.netlib.org/minpack/lmpar.f\"\u003elmpar\u003c/a\u003e\nroutine.\u003c/p\u003e\n\u003cp\u003eThis method sets the lmPar and lmDir attributes.\u003c/p\u003e\n\u003cp\u003eThe authors of the original fortran function are:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eArgonne National Laboratory. MINPACK project. March 1980\u003c/li\u003e\n  \u003cli\u003eBurton  S. Garbow\u003c/li\u003e\n  \u003cli\u003eKenneth E. Hillstrom\u003c/li\u003e\n  \u003cli\u003eJorge   J. More\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLuc Maisonobe did the Java translation.\u003c/p\u003e\n\n@param qy array containing qTy\n@param delta upper bound on the euclidean norm of diagR * lmDir\n@param diag diagonal matrix\n@param work1 work array\n@param work2 work array\n@param work3 work array\n",
          "diff": "@@ -1,115 +1,115 @@\n private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) {\n     for (int j \u003d 0; j \u003c rank; ++j) {\n         lmDir[permutation[j]] \u003d qy[j];\n     }\n     for (int j \u003d rank; j \u003c cols; ++j) {\n         lmDir[permutation[j]] \u003d 0;\n     }\n     for (int k \u003d rank - 1; k \u003e\u003d 0; --k) {\n         int pk \u003d permutation[k];\n         double ypk \u003d lmDir[pk] / diagR[pk];\n-        for (int i \u003d 0, index \u003d pk; i \u003c k; ++i, index +\u003d cols) {\n-            lmDir[permutation[i]] -\u003d ypk * jacobian[index];\n+        for (int i \u003d 0; i \u003c k; ++i) {\n+            lmDir[permutation[i]] -\u003d ypk * jacobian[i][pk];\n         }\n         lmDir[pk] \u003d ypk;\n     }\n     double dxNorm \u003d 0;\n     for (int j \u003d 0; j \u003c solvedCols; ++j) {\n         int pj \u003d permutation[j];\n         double s \u003d diag[pj] * lmDir[pj];\n         work1[pj] \u003d s;\n         dxNorm +\u003d s * s;\n     }\n     dxNorm \u003d Math.sqrt(dxNorm);\n     double fp \u003d dxNorm - delta;\n     if (fp \u003c\u003d 0.1 * delta) {\n         lmPar \u003d 0;\n         return;\n     }\n     double sum2, parl \u003d 0;\n     if (rank \u003d\u003d solvedCols) {\n         for (int j \u003d 0; j \u003c solvedCols; ++j) {\n             int pj \u003d permutation[j];\n             work1[pj] *\u003d diag[pj] / dxNorm;\n         }\n         sum2 \u003d 0;\n         for (int j \u003d 0; j \u003c solvedCols; ++j) {\n             int pj \u003d permutation[j];\n             double sum \u003d 0;\n-            for (int i \u003d 0, index \u003d pj; i \u003c j; ++i, index +\u003d cols) {\n-                sum +\u003d jacobian[index] * work1[permutation[i]];\n+            for (int i \u003d 0; i \u003c j; ++i) {\n+                sum +\u003d jacobian[i][pj] * work1[permutation[i]];\n             }\n             double s \u003d (work1[pj] - sum) / diagR[pj];\n             work1[pj] \u003d s;\n             sum2 +\u003d s * s;\n         }\n         parl \u003d fp / (delta * sum2);\n     }\n     sum2 \u003d 0;\n     for (int j \u003d 0; j \u003c solvedCols; ++j) {\n         int pj \u003d permutation[j];\n         double sum \u003d 0;\n-        for (int i \u003d 0, index \u003d pj; i \u003c\u003d j; ++i, index +\u003d cols) {\n-            sum +\u003d jacobian[index] * qy[i];\n+        for (int i \u003d 0; i \u003c\u003d j; ++i) {\n+            sum +\u003d jacobian[i][pj] * qy[i];\n         }\n         sum /\u003d diag[pj];\n         sum2 +\u003d sum * sum;\n     }\n     double gNorm \u003d Math.sqrt(sum2);\n     double paru \u003d gNorm / delta;\n     if (paru \u003d\u003d 0) {\n         paru \u003d 2.2251e-308 / Math.min(delta, 0.1);\n     }\n     lmPar \u003d Math.min(paru, Math.max(lmPar, parl));\n     if (lmPar \u003d\u003d 0) {\n         lmPar \u003d gNorm / dxNorm;\n     }\n     for (int countdown \u003d 10; countdown \u003e\u003d 0; --countdown) {\n         if (lmPar \u003d\u003d 0) {\n             lmPar \u003d Math.max(2.2251e-308, 0.001 * paru);\n         }\n         double sPar \u003d Math.sqrt(lmPar);\n         for (int j \u003d 0; j \u003c solvedCols; ++j) {\n             int pj \u003d permutation[j];\n             work1[pj] \u003d sPar * diag[pj];\n         }\n         determineLMDirection(qy, work1, work2, work3);\n         dxNorm \u003d 0;\n         for (int j \u003d 0; j \u003c solvedCols; ++j) {\n             int pj \u003d permutation[j];\n             double s \u003d diag[pj] * lmDir[pj];\n             work3[pj] \u003d s;\n             dxNorm +\u003d s * s;\n         }\n         dxNorm \u003d Math.sqrt(dxNorm);\n         double previousFP \u003d fp;\n         fp \u003d dxNorm - delta;\n         if ((Math.abs(fp) \u003c\u003d 0.1 * delta) || ((parl \u003d\u003d 0) \u0026\u0026 (fp \u003c\u003d previousFP) \u0026\u0026 (previousFP \u003c 0))) {\n             return;\n         }\n         for (int j \u003d 0; j \u003c solvedCols; ++j) {\n             int pj \u003d permutation[j];\n             work1[pj] \u003d work3[pj] * diag[pj] / dxNorm;\n         }\n         for (int j \u003d 0; j \u003c solvedCols; ++j) {\n             int pj \u003d permutation[j];\n             work1[pj] /\u003d work2[j];\n             double tmp \u003d work1[pj];\n             for (int i \u003d j + 1; i \u003c solvedCols; ++i) {\n-                work1[permutation[i]] -\u003d jacobian[i * cols + pj] * tmp;\n+                work1[permutation[i]] -\u003d jacobian[i][pj] * tmp;\n             }\n         }\n         sum2 \u003d 0;\n         for (int j \u003d 0; j \u003c solvedCols; ++j) {\n             double s \u003d work1[permutation[j]];\n             sum2 +\u003d s * s;\n         }\n         double correction \u003d fp / (delta * sum2);\n         if (fp \u003e 0) {\n             parl \u003d Math.max(parl, lmPar);\n         } else if (fp \u003c 0) {\n             paru \u003d Math.min(paru, lmPar);\n         }\n         lmPar \u003d Math.max(parl, lmPar + correction);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "fbe565694aa2721d4a8538eb053171cc8ecfde47": {
      "type": "Yfilerename",
      "commitMessage": "started refactoring of optimization framework:\n - created subpackages optimization.direct, optimization.general,\n   optimization.linear (currently empty) and optimization.univariate\n - removed packages analysis.minimization and estimation\n - renamed all Cost-related interfaces/classes into Objective\n   (this allows both minimization and maximization)\n - added a few new general interfaces\n\nThis work is not complete yet. The direct and general packages classes\nare very close to the former design, they have almost not been changed\nstructurally.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@748274 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/26/09, 11:17 AM",
      "commitName": "fbe565694aa2721d4a8538eb053171cc8ecfde47",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "2/24/09, 7:32 PM",
      "commitNameOld": "911f0fe11146590554ec11d1277d6e2ba55bd7e9",
      "commitAuthorOld": "William Barker",
      "daysBetweenCommits": 1.66,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) {\n    for (int j \u003d 0; j \u003c rank; ++j) {\n        lmDir[permutation[j]] \u003d qy[j];\n    }\n    for (int j \u003d rank; j \u003c cols; ++j) {\n        lmDir[permutation[j]] \u003d 0;\n    }\n    for (int k \u003d rank - 1; k \u003e\u003d 0; --k) {\n        int pk \u003d permutation[k];\n        double ypk \u003d lmDir[pk] / diagR[pk];\n        for (int i \u003d 0, index \u003d pk; i \u003c k; ++i, index +\u003d cols) {\n            lmDir[permutation[i]] -\u003d ypk * jacobian[index];\n        }\n        lmDir[pk] \u003d ypk;\n    }\n    double dxNorm \u003d 0;\n    for (int j \u003d 0; j \u003c solvedCols; ++j) {\n        int pj \u003d permutation[j];\n        double s \u003d diag[pj] * lmDir[pj];\n        work1[pj] \u003d s;\n        dxNorm +\u003d s * s;\n    }\n    dxNorm \u003d Math.sqrt(dxNorm);\n    double fp \u003d dxNorm - delta;\n    if (fp \u003c\u003d 0.1 * delta) {\n        lmPar \u003d 0;\n        return;\n    }\n    double sum2, parl \u003d 0;\n    if (rank \u003d\u003d solvedCols) {\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            work1[pj] *\u003d diag[pj] / dxNorm;\n        }\n        sum2 \u003d 0;\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            double sum \u003d 0;\n            for (int i \u003d 0, index \u003d pj; i \u003c j; ++i, index +\u003d cols) {\n                sum +\u003d jacobian[index] * work1[permutation[i]];\n            }\n            double s \u003d (work1[pj] - sum) / diagR[pj];\n            work1[pj] \u003d s;\n            sum2 +\u003d s * s;\n        }\n        parl \u003d fp / (delta * sum2);\n    }\n    sum2 \u003d 0;\n    for (int j \u003d 0; j \u003c solvedCols; ++j) {\n        int pj \u003d permutation[j];\n        double sum \u003d 0;\n        for (int i \u003d 0, index \u003d pj; i \u003c\u003d j; ++i, index +\u003d cols) {\n            sum +\u003d jacobian[index] * qy[i];\n        }\n        sum /\u003d diag[pj];\n        sum2 +\u003d sum * sum;\n    }\n    double gNorm \u003d Math.sqrt(sum2);\n    double paru \u003d gNorm / delta;\n    if (paru \u003d\u003d 0) {\n        paru \u003d 2.2251e-308 / Math.min(delta, 0.1);\n    }\n    lmPar \u003d Math.min(paru, Math.max(lmPar, parl));\n    if (lmPar \u003d\u003d 0) {\n        lmPar \u003d gNorm / dxNorm;\n    }\n    for (int countdown \u003d 10; countdown \u003e\u003d 0; --countdown) {\n        if (lmPar \u003d\u003d 0) {\n            lmPar \u003d Math.max(2.2251e-308, 0.001 * paru);\n        }\n        double sPar \u003d Math.sqrt(lmPar);\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            work1[pj] \u003d sPar * diag[pj];\n        }\n        determineLMDirection(qy, work1, work2, work3);\n        dxNorm \u003d 0;\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            double s \u003d diag[pj] * lmDir[pj];\n            work3[pj] \u003d s;\n            dxNorm +\u003d s * s;\n        }\n        dxNorm \u003d Math.sqrt(dxNorm);\n        double previousFP \u003d fp;\n        fp \u003d dxNorm - delta;\n        if ((Math.abs(fp) \u003c\u003d 0.1 * delta) || ((parl \u003d\u003d 0) \u0026\u0026 (fp \u003c\u003d previousFP) \u0026\u0026 (previousFP \u003c 0))) {\n            return;\n        }\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            work1[pj] \u003d work3[pj] * diag[pj] / dxNorm;\n        }\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            work1[pj] /\u003d work2[j];\n            double tmp \u003d work1[pj];\n            for (int i \u003d j + 1; i \u003c solvedCols; ++i) {\n                work1[permutation[i]] -\u003d jacobian[i * cols + pj] * tmp;\n            }\n        }\n        sum2 \u003d 0;\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            double s \u003d work1[permutation[j]];\n            sum2 +\u003d s * s;\n        }\n        double correction \u003d fp / (delta * sum2);\n        if (fp \u003e 0) {\n            parl \u003d Math.max(parl, lmPar);\n        } else if (fp \u003c 0) {\n            paru \u003d Math.min(paru, lmPar);\n        }\n        lmPar \u003d Math.max(parl, lmPar + correction);\n    }\n}",
      "path": "src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java",
      "functionStartLine": 445,
      "functionName": "determineLMParameter",
      "functionAnnotation": "",
      "functionDoc": "Determine the Levenberg-Marquardt parameter.\n\u003cp\u003eThis implementation is a translation in Java of the MINPACK\n\u003ca href\u003d\"http://www.netlib.org/minpack/lmpar.f\"\u003elmpar\u003c/a\u003e\nroutine.\u003c/p\u003e\n\u003cp\u003eThis method sets the lmPar and lmDir attributes.\u003c/p\u003e\n\u003cp\u003eThe authors of the original fortran function are:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eArgonne National Laboratory. MINPACK project. March 1980\u003c/li\u003e\n  \u003cli\u003eBurton  S. Garbow\u003c/li\u003e\n  \u003cli\u003eKenneth E. Hillstrom\u003c/li\u003e\n  \u003cli\u003eJorge   J. More\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLuc Maisonobe did the Java translation.\u003c/p\u003e\n\n@param qy array containing qTy\n@param delta upper bound on the euclidean norm of diagR * lmDir\n@param diag diagonal matrix\n@param work1 work array\n@param work2 work array\n@param work3 work array\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java",
        "newPath": "src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java"
      }
    },
    "1f89e226f2b7dc9b3b498d63c5a5bd5bc23a46b6": {
      "type": "Yformatchange",
      "commitMessage": "wrap lines *after* operator, to keep checkstyle happy\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@613600 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/20/08, 8:35 AM",
      "commitName": "1f89e226f2b7dc9b3b498d63c5a5bd5bc23a46b6",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "1/20/08, 7:03 AM",
      "commitNameOld": "d76a581764f63cf8841173cf1527216ca19aa558",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) {\n    for (int j \u003d 0; j \u003c rank; ++j) {\n        lmDir[permutation[j]] \u003d qy[j];\n    }\n    for (int j \u003d rank; j \u003c cols; ++j) {\n        lmDir[permutation[j]] \u003d 0;\n    }\n    for (int k \u003d rank - 1; k \u003e\u003d 0; --k) {\n        int pk \u003d permutation[k];\n        double ypk \u003d lmDir[pk] / diagR[pk];\n        for (int i \u003d 0, index \u003d pk; i \u003c k; ++i, index +\u003d cols) {\n            lmDir[permutation[i]] -\u003d ypk * jacobian[index];\n        }\n        lmDir[pk] \u003d ypk;\n    }\n    double dxNorm \u003d 0;\n    for (int j \u003d 0; j \u003c solvedCols; ++j) {\n        int pj \u003d permutation[j];\n        double s \u003d diag[pj] * lmDir[pj];\n        work1[pj] \u003d s;\n        dxNorm +\u003d s * s;\n    }\n    dxNorm \u003d Math.sqrt(dxNorm);\n    double fp \u003d dxNorm - delta;\n    if (fp \u003c\u003d 0.1 * delta) {\n        lmPar \u003d 0;\n        return;\n    }\n    double sum2, parl \u003d 0;\n    if (rank \u003d\u003d solvedCols) {\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            work1[pj] *\u003d diag[pj] / dxNorm;\n        }\n        sum2 \u003d 0;\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            double sum \u003d 0;\n            for (int i \u003d 0, index \u003d pj; i \u003c j; ++i, index +\u003d cols) {\n                sum +\u003d jacobian[index] * work1[permutation[i]];\n            }\n            double s \u003d (work1[pj] - sum) / diagR[pj];\n            work1[pj] \u003d s;\n            sum2 +\u003d s * s;\n        }\n        parl \u003d fp / (delta * sum2);\n    }\n    sum2 \u003d 0;\n    for (int j \u003d 0; j \u003c solvedCols; ++j) {\n        int pj \u003d permutation[j];\n        double sum \u003d 0;\n        for (int i \u003d 0, index \u003d pj; i \u003c\u003d j; ++i, index +\u003d cols) {\n            sum +\u003d jacobian[index] * qy[i];\n        }\n        sum /\u003d diag[pj];\n        sum2 +\u003d sum * sum;\n    }\n    double gNorm \u003d Math.sqrt(sum2);\n    double paru \u003d gNorm / delta;\n    if (paru \u003d\u003d 0) {\n        paru \u003d 2.2251e-308 / Math.min(delta, 0.1);\n    }\n    lmPar \u003d Math.min(paru, Math.max(lmPar, parl));\n    if (lmPar \u003d\u003d 0) {\n        lmPar \u003d gNorm / dxNorm;\n    }\n    for (int countdown \u003d 10; countdown \u003e\u003d 0; --countdown) {\n        if (lmPar \u003d\u003d 0) {\n            lmPar \u003d Math.max(2.2251e-308, 0.001 * paru);\n        }\n        double sPar \u003d Math.sqrt(lmPar);\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            work1[pj] \u003d sPar * diag[pj];\n        }\n        determineLMDirection(qy, work1, work2, work3);\n        dxNorm \u003d 0;\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            double s \u003d diag[pj] * lmDir[pj];\n            work3[pj] \u003d s;\n            dxNorm +\u003d s * s;\n        }\n        dxNorm \u003d Math.sqrt(dxNorm);\n        double previousFP \u003d fp;\n        fp \u003d dxNorm - delta;\n        if ((Math.abs(fp) \u003c\u003d 0.1 * delta) || ((parl \u003d\u003d 0) \u0026\u0026 (fp \u003c\u003d previousFP) \u0026\u0026 (previousFP \u003c 0))) {\n            return;\n        }\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            work1[pj] \u003d work3[pj] * diag[pj] / dxNorm;\n        }\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            work1[pj] /\u003d work2[j];\n            double tmp \u003d work1[pj];\n            for (int i \u003d j + 1; i \u003c solvedCols; ++i) {\n                work1[permutation[i]] -\u003d jacobian[i * cols + pj] * tmp;\n            }\n        }\n        sum2 \u003d 0;\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            double s \u003d work1[permutation[j]];\n            sum2 +\u003d s * s;\n        }\n        double correction \u003d fp / (delta * sum2);\n        if (fp \u003e 0) {\n            parl \u003d Math.max(parl, lmPar);\n        } else if (fp \u003c 0) {\n            paru \u003d Math.min(paru, lmPar);\n        }\n        lmPar \u003d Math.max(parl, lmPar + correction);\n    }\n}",
      "path": "src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java",
      "functionStartLine": 443,
      "functionName": "determineLMParameter",
      "functionAnnotation": "",
      "functionDoc": "Determine the Levenberg-Marquardt parameter.\n\u003cp\u003eThis implementation is a translation in Java of the MINPACK\n\u003ca href\u003d\"http://www.netlib.org/minpack/lmpar.f\"\u003elmpar\u003c/a\u003e\nroutine.\u003c/p\u003e\n\u003cp\u003eThis method sets the lmPar and lmDir attributes.\u003c/p\u003e\n\u003cp\u003eThe authors of the original fortran function are:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eArgonne National Laboratory. MINPACK project. March 1980\u003c/li\u003e\n  \u003cli\u003eBurton  S. Garbow\u003c/li\u003e\n  \u003cli\u003eKenneth E. Hillstrom\u003c/li\u003e\n  \u003cli\u003eJorge   J. More\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLuc Maisonobe did the Java translation.\u003c/p\u003e\n\n@param qy array containing qTy\n@param delta upper bound on the euclidean norm of diagR * lmDir\n@param diag diagonal matrix\n@param work1 work array\n@param work2 work array\n@param work3 work array\n",
      "diff": "",
      "extendedDetails": {}
    },
    "6d21abba54a9b3a0cca222abfacd26cabd88561c": {
      "type": "Yfilerename",
      "commitMessage": "added the estimation package from Mantissa\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@512061 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/26/07, 2:59 PM",
      "commitName": "6d21abba54a9b3a0cca222abfacd26cabd88561c",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "2/26/07, 2:44 PM",
      "commitNameOld": "8ce6b30d7126356da4e18fb73f0bd836b921ce1c",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) {\n    for (int j \u003d 0; j \u003c rank; ++j) {\n        lmDir[permutation[j]] \u003d qy[j];\n    }\n    for (int j \u003d rank; j \u003c cols; ++j) {\n        lmDir[permutation[j]] \u003d 0;\n    }\n    for (int k \u003d rank - 1; k \u003e\u003d 0; --k) {\n        int pk \u003d permutation[k];\n        double ypk \u003d lmDir[pk] / diagR[pk];\n        for (int i \u003d 0, index \u003d pk; i \u003c k; ++i, index +\u003d cols) {\n            lmDir[permutation[i]] -\u003d ypk * jacobian[index];\n        }\n        lmDir[pk] \u003d ypk;\n    }\n    double dxNorm \u003d 0;\n    for (int j \u003d 0; j \u003c solvedCols; ++j) {\n        int pj \u003d permutation[j];\n        double s \u003d diag[pj] * lmDir[pj];\n        work1[pj] \u003d s;\n        dxNorm +\u003d s * s;\n    }\n    dxNorm \u003d Math.sqrt(dxNorm);\n    double fp \u003d dxNorm - delta;\n    if (fp \u003c\u003d 0.1 * delta) {\n        lmPar \u003d 0;\n        return;\n    }\n    double sum2, parl \u003d 0;\n    if (rank \u003d\u003d solvedCols) {\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            work1[pj] *\u003d diag[pj] / dxNorm;\n        }\n        sum2 \u003d 0;\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            double sum \u003d 0;\n            for (int i \u003d 0, index \u003d pj; i \u003c j; ++i, index +\u003d cols) {\n                sum +\u003d jacobian[index] * work1[permutation[i]];\n            }\n            double s \u003d (work1[pj] - sum) / diagR[pj];\n            work1[pj] \u003d s;\n            sum2 +\u003d s * s;\n        }\n        parl \u003d fp / (delta * sum2);\n    }\n    sum2 \u003d 0;\n    for (int j \u003d 0; j \u003c solvedCols; ++j) {\n        int pj \u003d permutation[j];\n        double sum \u003d 0;\n        for (int i \u003d 0, index \u003d pj; i \u003c\u003d j; ++i, index +\u003d cols) {\n            sum +\u003d jacobian[index] * qy[i];\n        }\n        sum /\u003d diag[pj];\n        sum2 +\u003d sum * sum;\n    }\n    double gNorm \u003d Math.sqrt(sum2);\n    double paru \u003d gNorm / delta;\n    if (paru \u003d\u003d 0) {\n        paru \u003d 2.2251e-308 / Math.min(delta, 0.1);\n    }\n    lmPar \u003d Math.min(paru, Math.max(lmPar, parl));\n    if (lmPar \u003d\u003d 0) {\n        lmPar \u003d gNorm / dxNorm;\n    }\n    for (int countdown \u003d 10; countdown \u003e\u003d 0; --countdown) {\n        if (lmPar \u003d\u003d 0) {\n            lmPar \u003d Math.max(2.2251e-308, 0.001 * paru);\n        }\n        double sPar \u003d Math.sqrt(lmPar);\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            work1[pj] \u003d sPar * diag[pj];\n        }\n        determineLMDirection(qy, work1, work2, work3);\n        dxNorm \u003d 0;\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            double s \u003d diag[pj] * lmDir[pj];\n            work3[pj] \u003d s;\n            dxNorm +\u003d s * s;\n        }\n        dxNorm \u003d Math.sqrt(dxNorm);\n        double previousFP \u003d fp;\n        fp \u003d dxNorm - delta;\n        if ((Math.abs(fp) \u003c\u003d 0.1 * delta) || ((parl \u003d\u003d 0) \u0026\u0026 (fp \u003c\u003d previousFP) \u0026\u0026 (previousFP \u003c 0))) {\n            return;\n        }\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            work1[pj] \u003d work3[pj] * diag[pj] / dxNorm;\n        }\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            work1[pj] /\u003d work2[j];\n            double tmp \u003d work1[pj];\n            for (int i \u003d j + 1; i \u003c solvedCols; ++i) {\n                work1[permutation[i]] -\u003d jacobian[i * cols + pj] * tmp;\n            }\n        }\n        sum2 \u003d 0;\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            double s \u003d work1[permutation[j]];\n            sum2 +\u003d s * s;\n        }\n        double correction \u003d fp / (delta * sum2);\n        if (fp \u003e 0) {\n            parl \u003d Math.max(parl, lmPar);\n        } else if (fp \u003c 0) {\n            paru \u003d Math.min(paru, lmPar);\n        }\n        lmPar \u003d Math.max(parl, lmPar + correction);\n    }\n}",
      "path": "src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java",
      "functionStartLine": 517,
      "functionName": "determineLMParameter",
      "functionAnnotation": "",
      "functionDoc": "Determine the Levenberg-Marquardt parameter.\n\u003cp\u003eThis implementation is a translation in Java of the MINPACK\n\u003ca href\u003d\"http://www.netlib.org/minpack/lmpar.f\"\u003elmpar\u003c/a\u003e\nroutine.\u003c/p\u003e\n\u003cp\u003eThis method sets the lmPar and lmDir attributes.\u003c/p\u003e\n\u003cp\u003eThe authors of the original fortran function are:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eArgonne National Laboratory. MINPACK project. March 1980\u003c/li\u003e\n  \u003cli\u003eBurton  S. Garbow\u003c/li\u003e\n  \u003cli\u003eKenneth E. Hillstrom\u003c/li\u003e\n  \u003cli\u003eJorge   J. More\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLuc Maisonobe did the Java translation.\u003c/p\u003e\n\n@param qy array containing qTy\n@param delta upper bound on the euclidean norm of diagR * lmDir\n@param diag diagonal matrix\n@param work1 work array\n@param work2 work array\n@param work3 work array\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/mantissa/src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimator.java",
        "newPath": "src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java"
      }
    },
    "89ac173c2b467e6289df0e62f2a43ed1730fbad5": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@476930 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/19/06, 1:36 PM",
      "commitName": "89ac173c2b467e6289df0e62f2a43ed1730fbad5",
      "commitAuthor": "Phil Steitz",
      "diff": "@@ -0,0 +1,115 @@\n+private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) {\n+    for (int j \u003d 0; j \u003c rank; ++j) {\n+        lmDir[permutation[j]] \u003d qy[j];\n+    }\n+    for (int j \u003d rank; j \u003c cols; ++j) {\n+        lmDir[permutation[j]] \u003d 0;\n+    }\n+    for (int k \u003d rank - 1; k \u003e\u003d 0; --k) {\n+        int pk \u003d permutation[k];\n+        double ypk \u003d lmDir[pk] / diagR[pk];\n+        for (int i \u003d 0, index \u003d pk; i \u003c k; ++i, index +\u003d cols) {\n+            lmDir[permutation[i]] -\u003d ypk * jacobian[index];\n+        }\n+        lmDir[pk] \u003d ypk;\n+    }\n+    double dxNorm \u003d 0;\n+    for (int j \u003d 0; j \u003c solvedCols; ++j) {\n+        int pj \u003d permutation[j];\n+        double s \u003d diag[pj] * lmDir[pj];\n+        work1[pj] \u003d s;\n+        dxNorm +\u003d s * s;\n+    }\n+    dxNorm \u003d Math.sqrt(dxNorm);\n+    double fp \u003d dxNorm - delta;\n+    if (fp \u003c\u003d 0.1 * delta) {\n+        lmPar \u003d 0;\n+        return;\n+    }\n+    double sum2, parl \u003d 0;\n+    if (rank \u003d\u003d solvedCols) {\n+        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n+            int pj \u003d permutation[j];\n+            work1[pj] *\u003d diag[pj] / dxNorm;\n+        }\n+        sum2 \u003d 0;\n+        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n+            int pj \u003d permutation[j];\n+            double sum \u003d 0;\n+            for (int i \u003d 0, index \u003d pj; i \u003c j; ++i, index +\u003d cols) {\n+                sum +\u003d jacobian[index] * work1[permutation[i]];\n+            }\n+            double s \u003d (work1[pj] - sum) / diagR[pj];\n+            work1[pj] \u003d s;\n+            sum2 +\u003d s * s;\n+        }\n+        parl \u003d fp / (delta * sum2);\n+    }\n+    sum2 \u003d 0;\n+    for (int j \u003d 0; j \u003c solvedCols; ++j) {\n+        int pj \u003d permutation[j];\n+        double sum \u003d 0;\n+        for (int i \u003d 0, index \u003d pj; i \u003c\u003d j; ++i, index +\u003d cols) {\n+            sum +\u003d jacobian[index] * qy[i];\n+        }\n+        sum /\u003d diag[pj];\n+        sum2 +\u003d sum * sum;\n+    }\n+    double gNorm \u003d Math.sqrt(sum2);\n+    double paru \u003d gNorm / delta;\n+    if (paru \u003d\u003d 0) {\n+        paru \u003d 2.2251e-308 / Math.min(delta, 0.1);\n+    }\n+    lmPar \u003d Math.min(paru, Math.max(lmPar, parl));\n+    if (lmPar \u003d\u003d 0) {\n+        lmPar \u003d gNorm / dxNorm;\n+    }\n+    for (int countdown \u003d 10; countdown \u003e\u003d 0; --countdown) {\n+        if (lmPar \u003d\u003d 0) {\n+            lmPar \u003d Math.max(2.2251e-308, 0.001 * paru);\n+        }\n+        double sPar \u003d Math.sqrt(lmPar);\n+        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n+            int pj \u003d permutation[j];\n+            work1[pj] \u003d sPar * diag[pj];\n+        }\n+        determineLMDirection(qy, work1, work2, work3);\n+        dxNorm \u003d 0;\n+        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n+            int pj \u003d permutation[j];\n+            double s \u003d diag[pj] * lmDir[pj];\n+            work3[pj] \u003d s;\n+            dxNorm +\u003d s * s;\n+        }\n+        dxNorm \u003d Math.sqrt(dxNorm);\n+        double previousFP \u003d fp;\n+        fp \u003d dxNorm - delta;\n+        if ((Math.abs(fp) \u003c\u003d 0.1 * delta) || ((parl \u003d\u003d 0) \u0026\u0026 (fp \u003c\u003d previousFP) \u0026\u0026 (previousFP \u003c 0))) {\n+            return;\n+        }\n+        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n+            int pj \u003d permutation[j];\n+            work1[pj] \u003d work3[pj] * diag[pj] / dxNorm;\n+        }\n+        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n+            int pj \u003d permutation[j];\n+            work1[pj] /\u003d work2[j];\n+            double tmp \u003d work1[pj];\n+            for (int i \u003d j + 1; i \u003c solvedCols; ++i) {\n+                work1[permutation[i]] -\u003d jacobian[i * cols + pj] * tmp;\n+            }\n+        }\n+        sum2 \u003d 0;\n+        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n+            double s \u003d work1[permutation[j]];\n+            sum2 +\u003d s * s;\n+        }\n+        double correction \u003d fp / (delta * sum2);\n+        if (fp \u003e 0) {\n+            parl \u003d Math.max(parl, lmPar);\n+        } else if (fp \u003c 0) {\n+            paru \u003d Math.min(paru, lmPar);\n+        }\n+        lmPar \u003d Math.max(parl, lmPar + correction);\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3) {\n    for (int j \u003d 0; j \u003c rank; ++j) {\n        lmDir[permutation[j]] \u003d qy[j];\n    }\n    for (int j \u003d rank; j \u003c cols; ++j) {\n        lmDir[permutation[j]] \u003d 0;\n    }\n    for (int k \u003d rank - 1; k \u003e\u003d 0; --k) {\n        int pk \u003d permutation[k];\n        double ypk \u003d lmDir[pk] / diagR[pk];\n        for (int i \u003d 0, index \u003d pk; i \u003c k; ++i, index +\u003d cols) {\n            lmDir[permutation[i]] -\u003d ypk * jacobian[index];\n        }\n        lmDir[pk] \u003d ypk;\n    }\n    double dxNorm \u003d 0;\n    for (int j \u003d 0; j \u003c solvedCols; ++j) {\n        int pj \u003d permutation[j];\n        double s \u003d diag[pj] * lmDir[pj];\n        work1[pj] \u003d s;\n        dxNorm +\u003d s * s;\n    }\n    dxNorm \u003d Math.sqrt(dxNorm);\n    double fp \u003d dxNorm - delta;\n    if (fp \u003c\u003d 0.1 * delta) {\n        lmPar \u003d 0;\n        return;\n    }\n    double sum2, parl \u003d 0;\n    if (rank \u003d\u003d solvedCols) {\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            work1[pj] *\u003d diag[pj] / dxNorm;\n        }\n        sum2 \u003d 0;\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            double sum \u003d 0;\n            for (int i \u003d 0, index \u003d pj; i \u003c j; ++i, index +\u003d cols) {\n                sum +\u003d jacobian[index] * work1[permutation[i]];\n            }\n            double s \u003d (work1[pj] - sum) / diagR[pj];\n            work1[pj] \u003d s;\n            sum2 +\u003d s * s;\n        }\n        parl \u003d fp / (delta * sum2);\n    }\n    sum2 \u003d 0;\n    for (int j \u003d 0; j \u003c solvedCols; ++j) {\n        int pj \u003d permutation[j];\n        double sum \u003d 0;\n        for (int i \u003d 0, index \u003d pj; i \u003c\u003d j; ++i, index +\u003d cols) {\n            sum +\u003d jacobian[index] * qy[i];\n        }\n        sum /\u003d diag[pj];\n        sum2 +\u003d sum * sum;\n    }\n    double gNorm \u003d Math.sqrt(sum2);\n    double paru \u003d gNorm / delta;\n    if (paru \u003d\u003d 0) {\n        paru \u003d 2.2251e-308 / Math.min(delta, 0.1);\n    }\n    lmPar \u003d Math.min(paru, Math.max(lmPar, parl));\n    if (lmPar \u003d\u003d 0) {\n        lmPar \u003d gNorm / dxNorm;\n    }\n    for (int countdown \u003d 10; countdown \u003e\u003d 0; --countdown) {\n        if (lmPar \u003d\u003d 0) {\n            lmPar \u003d Math.max(2.2251e-308, 0.001 * paru);\n        }\n        double sPar \u003d Math.sqrt(lmPar);\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            work1[pj] \u003d sPar * diag[pj];\n        }\n        determineLMDirection(qy, work1, work2, work3);\n        dxNorm \u003d 0;\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            double s \u003d diag[pj] * lmDir[pj];\n            work3[pj] \u003d s;\n            dxNorm +\u003d s * s;\n        }\n        dxNorm \u003d Math.sqrt(dxNorm);\n        double previousFP \u003d fp;\n        fp \u003d dxNorm - delta;\n        if ((Math.abs(fp) \u003c\u003d 0.1 * delta) || ((parl \u003d\u003d 0) \u0026\u0026 (fp \u003c\u003d previousFP) \u0026\u0026 (previousFP \u003c 0))) {\n            return;\n        }\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            work1[pj] \u003d work3[pj] * diag[pj] / dxNorm;\n        }\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            int pj \u003d permutation[j];\n            work1[pj] /\u003d work2[j];\n            double tmp \u003d work1[pj];\n            for (int i \u003d j + 1; i \u003c solvedCols; ++i) {\n                work1[permutation[i]] -\u003d jacobian[i * cols + pj] * tmp;\n            }\n        }\n        sum2 \u003d 0;\n        for (int j \u003d 0; j \u003c solvedCols; ++j) {\n            double s \u003d work1[permutation[j]];\n            sum2 +\u003d s * s;\n        }\n        double correction \u003d fp / (delta * sum2);\n        if (fp \u003e 0) {\n            parl \u003d Math.max(parl, lmPar);\n        } else if (fp \u003c 0) {\n            paru \u003d Math.min(paru, lmPar);\n        }\n        lmPar \u003d Math.max(parl, lmPar + correction);\n    }\n}",
      "path": "src/mantissa/src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimator.java",
      "functionStartLine": 518,
      "functionName": "determineLMParameter",
      "functionAnnotation": "",
      "functionDoc": "Determine the Levenberg-Marquardt parameter.\n\u003cp\u003eThis implementation is a translation in Java of the MINPACK\n\u003ca href\u003d\"http://www.netlib.org/minpack/lmpar.f\"\u003elmpar\u003c/a\u003e\nroutine.\u003c/p\u003e\n\u003cp\u003eThis method sets the lmPar and lmDir attributes.\u003c/p\u003e\n\u003cp\u003eThe authors of the original fortran function are:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eArgonne National Laboratory. MINPACK project. March 1980\u003c/li\u003e\n  \u003cli\u003eBurton  S. Garbow\u003c/li\u003e\n  \u003cli\u003eKenneth E. Hillstrom\u003c/li\u003e\n  \u003cli\u003eJorge   J. More\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLuc Maisonobe did the Java translation.\u003c/p\u003e\n\n@param qy array containing qTy\n@param delta upper bound on the euclidean norm of diagR * lmDir\n@param diag diagonal matrix\n@param work1 work array\n@param work2 work array\n@param work3 work array\n"
    }
  }
}