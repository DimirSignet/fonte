{
  "origin": "codeshovel",
  "repositoryName": "Math-64b",
  "repositoryPath": "/tmp/Math-64b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractLeastSquaresOptimizer.java",
  "functionName": "getRMS",
  "functionId": "getRMS",
  "sourceFilePath": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
  "functionAnnotation": "",
  "functionDoc": "Get the Root Mean Square value.\nGet the Root Mean Square value, i.e. the root of the arithmetic\nmean of the square of all weighted residuals. This is related to the\ncriterion that is minimized by the optimizer as follows: if\n\u003cem\u003ec\u003c/em\u003e if the criterion, and \u003cem\u003en\u003c/em\u003e is the number of\nmeasurements, then the RMS is \u003cem\u003esqrt (c/n)\u003c/em\u003e.\n\n@return RMS value\n",
  "functionStartLine": 239,
  "functionEndLine": 241,
  "numCommitsSeen": 20,
  "timeTaken": 1313,
  "changeHistory": [
    "a4f9188a55e6935d4d38ae97806af4d59e671588",
    "d6beaeaa9c53aa4e6ae128a856e68a9eeb1cadb8",
    "d6a438e931412713e99624cf9ed74470f1040184",
    "8541f303370cec9a25f2b32b3d660b3f188913f0",
    "8cb418e7fa50aba9977fe073aec66ad3f6e4f07c"
  ],
  "changeHistoryShort": {
    "a4f9188a55e6935d4d38ae97806af4d59e671588": "Ybodychange",
    "d6beaeaa9c53aa4e6ae128a856e68a9eeb1cadb8": "Ybodychange",
    "d6a438e931412713e99624cf9ed74470f1040184": "Yfilerename",
    "8541f303370cec9a25f2b32b3d660b3f188913f0": "Ymultichange(Ybodychange,Ydocchange)",
    "8cb418e7fa50aba9977fe073aec66ad3f6e4f07c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a4f9188a55e6935d4d38ae97806af4d59e671588": {
      "type": "Ybodychange",
      "commitMessage": "MATH-377 fixed\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@982507 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/5/10, 1:48 AM",
      "commitName": "a4f9188a55e6935d4d38ae97806af4d59e671588",
      "commitAuthor": "Dimitri Pourbaix",
      "commitDateOld": "8/2/10, 1:10 AM",
      "commitNameOld": "53335bad55937b1447697455d11e42fe3d26874e",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 3.03,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public double getRMS() {\n    return Math.sqrt(getChiSquare() / rows);\n}",
      "path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
      "functionStartLine": 239,
      "functionName": "getRMS",
      "functionAnnotation": "",
      "functionDoc": "Get the Root Mean Square value.\nGet the Root Mean Square value, i.e. the root of the arithmetic\nmean of the square of all weighted residuals. This is related to the\ncriterion that is minimized by the optimizer as follows: if\n\u003cem\u003ec\u003c/em\u003e if the criterion, and \u003cem\u003en\u003c/em\u003e is the number of\nmeasurements, then the RMS is \u003cem\u003esqrt (c/n)\u003c/em\u003e.\n\n@return RMS value\n",
      "diff": "@@ -1,8 +1,3 @@\n public double getRMS() {\n-    double criterion \u003d 0;\n-    for (int i \u003d 0; i \u003c rows; ++i) {\n-        final double residual \u003d residuals[i];\n-        criterion +\u003d residualsWeights[i] * residual * residual;\n-    }\n-    return Math.sqrt(criterion / rows);\n+    return Math.sqrt(getChiSquare() / rows);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d6beaeaa9c53aa4e6ae128a856e68a9eeb1cadb8": {
      "type": "Ybodychange",
      "commitMessage": "tighten checkstyle rules for hidden fields\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@810238 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/1/09, 2:02 PM",
      "commitName": "d6beaeaa9c53aa4e6ae128a856e68a9eeb1cadb8",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "8/1/09, 7:30 AM",
      "commitNameOld": "d6a438e931412713e99624cf9ed74470f1040184",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 31.27,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "actualSource": "public double getRMS() {\n    double criterion \u003d 0;\n    for (int i \u003d 0; i \u003c rows; ++i) {\n        final double residual \u003d residuals[i];\n        criterion +\u003d residualsWeights[i] * residual * residual;\n    }\n    return Math.sqrt(criterion / rows);\n}",
      "path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
      "functionStartLine": 230,
      "functionName": "getRMS",
      "functionAnnotation": "",
      "functionDoc": "Get the Root Mean Square value.\nGet the Root Mean Square value, i.e. the root of the arithmetic\nmean of the square of all weighted residuals. This is related to the\ncriterion that is minimized by the optimizer as follows: if\n\u003cem\u003ec\u003c/em\u003e if the criterion, and \u003cem\u003en\u003c/em\u003e is the number of\nmeasurements, then the RMS is \u003cem\u003esqrt (c/n)\u003c/em\u003e.\n\n@return RMS value\n",
      "diff": "@@ -1,8 +1,8 @@\n public double getRMS() {\n     double criterion \u003d 0;\n     for (int i \u003d 0; i \u003c rows; ++i) {\n         final double residual \u003d residuals[i];\n-        criterion +\u003d weights[i] * residual * residual;\n+        criterion +\u003d residualsWeights[i] * residual * residual;\n     }\n     return Math.sqrt(criterion / rows);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d6a438e931412713e99624cf9ed74470f1040184": {
      "type": "Yfilerename",
      "commitMessage": "moved main java directory for compliance with maven standard directory layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@799870 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/1/09, 7:30 AM",
      "commitName": "d6a438e931412713e99624cf9ed74470f1040184",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "8/1/09, 7:23 AM",
      "commitNameOld": "2ad5ef61630be627f46ae1c266cf796f044bd4a8",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public double getRMS() {\n    double criterion \u003d 0;\n    for (int i \u003d 0; i \u003c rows; ++i) {\n        final double residual \u003d residuals[i];\n        criterion +\u003d weights[i] * residual * residual;\n    }\n    return Math.sqrt(criterion / rows);\n}",
      "path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
      "functionStartLine": 230,
      "functionName": "getRMS",
      "functionAnnotation": "",
      "functionDoc": "Get the Root Mean Square value.\nGet the Root Mean Square value, i.e. the root of the arithmetic\nmean of the square of all weighted residuals. This is related to the\ncriterion that is minimized by the optimizer as follows: if\n\u003cem\u003ec\u003c/em\u003e if the criterion, and \u003cem\u003en\u003c/em\u003e is the number of\nmeasurements, then the RMS is \u003cem\u003esqrt (c/n)\u003c/em\u003e.\n\n@return RMS value\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "newPath": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java"
      }
    },
    "8541f303370cec9a25f2b32b3d660b3f188913f0": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "adapted old Levenberg-Marquardt estimator to new top level optimizers API\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@754727 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/15/09, 12:11 PM",
      "commitName": "8541f303370cec9a25f2b32b3d660b3f188913f0",
      "commitAuthor": "Luc Maisonobe",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "adapted old Levenberg-Marquardt estimator to new top level optimizers API\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@754727 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "3/15/09, 12:11 PM",
          "commitName": "8541f303370cec9a25f2b32b3d660b3f188913f0",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "3/14/09, 10:38 AM",
          "commitNameOld": "8cb418e7fa50aba9977fe073aec66ad3f6e4f07c",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 1.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public double getRMS() {\n    double criterion \u003d 0;\n    for (int i \u003d 0; i \u003c rows; ++i) {\n        final double residual \u003d residuals[i];\n        criterion +\u003d weights[i] * residual * residual;\n    }\n    return Math.sqrt(criterion / rows);\n}",
          "path": "src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
          "functionStartLine": 204,
          "functionName": "getRMS",
          "functionAnnotation": "",
          "functionDoc": "Get the Root Mean Square value.\nGet the Root Mean Square value, i.e. the root of the arithmetic\nmean of the square of all weighted residuals. This is related to the\ncriterion that is minimized by the optimizer as follows: if\n\u003cem\u003ec\u003c/em\u003e if the criterion, and \u003cem\u003en\u003c/em\u003e is the number of\nmeasurements, then the RMS is \u003cem\u003esqrt (c/n)\u003c/em\u003e.\n\n@return RMS value\n",
          "diff": "@@ -1,8 +1,8 @@\n public double getRMS() {\n     double criterion \u003d 0;\n     for (int i \u003d 0; i \u003c rows; ++i) {\n-        final double residual \u003d objective[i] - target[i];\n+        final double residual \u003d residuals[i];\n         criterion +\u003d weights[i] * residual * residual;\n     }\n     return Math.sqrt(criterion / rows);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "adapted old Levenberg-Marquardt estimator to new top level optimizers API\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@754727 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "3/15/09, 12:11 PM",
          "commitName": "8541f303370cec9a25f2b32b3d660b3f188913f0",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "3/14/09, 10:38 AM",
          "commitNameOld": "8cb418e7fa50aba9977fe073aec66ad3f6e4f07c",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 1.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public double getRMS() {\n    double criterion \u003d 0;\n    for (int i \u003d 0; i \u003c rows; ++i) {\n        final double residual \u003d residuals[i];\n        criterion +\u003d weights[i] * residual * residual;\n    }\n    return Math.sqrt(criterion / rows);\n}",
          "path": "src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
          "functionStartLine": 204,
          "functionName": "getRMS",
          "functionAnnotation": "",
          "functionDoc": "Get the Root Mean Square value.\nGet the Root Mean Square value, i.e. the root of the arithmetic\nmean of the square of all weighted residuals. This is related to the\ncriterion that is minimized by the optimizer as follows: if\n\u003cem\u003ec\u003c/em\u003e if the criterion, and \u003cem\u003en\u003c/em\u003e is the number of\nmeasurements, then the RMS is \u003cem\u003esqrt (c/n)\u003c/em\u003e.\n\n@return RMS value\n",
          "diff": "@@ -1,8 +1,8 @@\n public double getRMS() {\n     double criterion \u003d 0;\n     for (int i \u003d 0; i \u003c rows; ++i) {\n-        final double residual \u003d objective[i] - target[i];\n+        final double residual \u003d residuals[i];\n         criterion +\u003d weights[i] * residual * residual;\n     }\n     return Math.sqrt(criterion / rows);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Get the Root Mean Square value.\nGet the Root Mean Square value, i.e. the root of the arithmetic\nmean of the square of all weighted residuals. This is related to the\ncriterion that is minimized by the estimator as follows: if\n\u003cem\u003ec\u003c/em\u003e if the criterion, and \u003cem\u003en\u003c/em\u003e is the number of\nmeasurements, then the RMS is \u003cem\u003esqrt (c/n)\u003c/em\u003e.\n\n@return RMS value\n",
            "newValue": "Get the Root Mean Square value.\nGet the Root Mean Square value, i.e. the root of the arithmetic\nmean of the square of all weighted residuals. This is related to the\ncriterion that is minimized by the optimizer as follows: if\n\u003cem\u003ec\u003c/em\u003e if the criterion, and \u003cem\u003en\u003c/em\u003e is the number of\nmeasurements, then the RMS is \u003cem\u003esqrt (c/n)\u003c/em\u003e.\n\n@return RMS value\n"
          }
        }
      ]
    },
    "8cb418e7fa50aba9977fe073aec66ad3f6e4f07c": {
      "type": "Yintroduced",
      "commitMessage": "adapted the Gauss-Newton optimizer to the new top-level optimization interfaces\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@754500 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/14/09, 10:38 AM",
      "commitName": "8cb418e7fa50aba9977fe073aec66ad3f6e4f07c",
      "commitAuthor": "Luc Maisonobe",
      "diff": "@@ -0,0 +1,8 @@\n+public double getRMS() {\n+    double criterion \u003d 0;\n+    for (int i \u003d 0; i \u003c rows; ++i) {\n+        final double residual \u003d objective[i] - target[i];\n+        criterion +\u003d weights[i] * residual * residual;\n+    }\n+    return Math.sqrt(criterion / rows);\n+}\n\\ No newline at end of file\n",
      "actualSource": "public double getRMS() {\n    double criterion \u003d 0;\n    for (int i \u003d 0; i \u003c rows; ++i) {\n        final double residual \u003d objective[i] - target[i];\n        criterion +\u003d weights[i] * residual * residual;\n    }\n    return Math.sqrt(criterion / rows);\n}",
      "path": "src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
      "functionStartLine": 195,
      "functionName": "getRMS",
      "functionAnnotation": "",
      "functionDoc": "Get the Root Mean Square value.\nGet the Root Mean Square value, i.e. the root of the arithmetic\nmean of the square of all weighted residuals. This is related to the\ncriterion that is minimized by the estimator as follows: if\n\u003cem\u003ec\u003c/em\u003e if the criterion, and \u003cem\u003en\u003c/em\u003e is the number of\nmeasurements, then the RMS is \u003cem\u003esqrt (c/n)\u003c/em\u003e.\n\n@return RMS value\n"
    }
  }
}