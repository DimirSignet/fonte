{
  "origin": "codeshovel",
  "repositoryName": "Math-64b",
  "repositoryPath": "/tmp/Math-64b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractLeastSquaresOptimizer.java",
  "functionName": "optimize",
  "functionId": "optimize___f-DifferentiableMultivariateVectorialFunction(modifiers-final)__target-double[](modifiers-final)__weights-double[](modifiers-final)__startPoint-double[](modifiers-final)",
  "sourceFilePath": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
  "functionAnnotation": "",
  "functionDoc": "@inheritDoc}\n",
  "functionStartLine": 322,
  "functionEndLine": 354,
  "numCommitsSeen": 25,
  "timeTaken": 1478,
  "changeHistory": [
    "1eaea0b549f685bd416cef68faa3a137b9bb3519",
    "d6beaeaa9c53aa4e6ae128a856e68a9eeb1cadb8",
    "d6a438e931412713e99624cf9ed74470f1040184",
    "ae6753dd5e4ce3b0ed9bd67f92d2d4e92587300f",
    "a7faf40b61f445d15d9a210b23fa0008b87e25e2",
    "513511976ddc778f7c52d69bf43db3c3f4b88803",
    "8541f303370cec9a25f2b32b3d660b3f188913f0",
    "8cb418e7fa50aba9977fe073aec66ad3f6e4f07c"
  ],
  "changeHistoryShort": {
    "1eaea0b549f685bd416cef68faa3a137b9bb3519": "Ybodychange",
    "d6beaeaa9c53aa4e6ae128a856e68a9eeb1cadb8": "Ybodychange",
    "d6a438e931412713e99624cf9ed74470f1040184": "Yfilerename",
    "ae6753dd5e4ce3b0ed9bd67f92d2d4e92587300f": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
    "a7faf40b61f445d15d9a210b23fa0008b87e25e2": "Ybodychange",
    "513511976ddc778f7c52d69bf43db3c3f4b88803": "Ybodychange",
    "8541f303370cec9a25f2b32b3d660b3f188913f0": "Ybodychange",
    "8cb418e7fa50aba9977fe073aec66ad3f6e4f07c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1eaea0b549f685bd416cef68faa3a137b9bb3519": {
      "type": "Ybodychange",
      "commitMessage": "changed the localization mechanism for error messages. The new system is based on an enum rather than on duplicated string literals.\nJIRA: MATH-361\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@955423 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/16/10, 4:03 PM",
      "commitName": "1eaea0b549f685bd416cef68faa3a137b9bb3519",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "3/21/10, 8:49 AM",
      "commitNameOld": "7e65c5d2b07b2706be148fa5463ba3d2b89a2f93",
      "commitAuthorOld": "Phil Steitz",
      "daysBetweenCommits": 87.3,
      "commitsBetweenForRepo": 88,
      "commitsBetweenForFile": 1,
      "actualSource": "public VectorialPointValuePair optimize(final DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n    if (target.length !\u003d weights.length) {\n        throw new OptimizationException(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, target.length, weights.length);\n    }\n    iterations \u003d 0;\n    objectiveEvaluations \u003d 0;\n    jacobianEvaluations \u003d 0;\n    function \u003d f;\n    jF \u003d f.jacobian();\n    targetValues \u003d target.clone();\n    residualsWeights \u003d weights.clone();\n    this.point \u003d startPoint.clone();\n    this.residuals \u003d new double[target.length];\n    rows \u003d target.length;\n    cols \u003d point.length;\n    jacobian \u003d new double[rows][cols];\n    cost \u003d Double.POSITIVE_INFINITY;\n    return doOptimize();\n}",
      "path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
      "functionStartLine": 325,
      "functionName": "optimize",
      "functionAnnotation": "",
      "functionDoc": "@inheritDoc}\n",
      "diff": "@@ -1,19 +1,19 @@\n public VectorialPointValuePair optimize(final DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n     if (target.length !\u003d weights.length) {\n-        throw new OptimizationException(\"dimension mismatch {0} !\u003d {1}\", target.length, weights.length);\n+        throw new OptimizationException(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, target.length, weights.length);\n     }\n     iterations \u003d 0;\n     objectiveEvaluations \u003d 0;\n     jacobianEvaluations \u003d 0;\n     function \u003d f;\n     jF \u003d f.jacobian();\n     targetValues \u003d target.clone();\n     residualsWeights \u003d weights.clone();\n     this.point \u003d startPoint.clone();\n     this.residuals \u003d new double[target.length];\n     rows \u003d target.length;\n     cols \u003d point.length;\n     jacobian \u003d new double[rows][cols];\n     cost \u003d Double.POSITIVE_INFINITY;\n     return doOptimize();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d6beaeaa9c53aa4e6ae128a856e68a9eeb1cadb8": {
      "type": "Ybodychange",
      "commitMessage": "tighten checkstyle rules for hidden fields\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@810238 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/1/09, 2:02 PM",
      "commitName": "d6beaeaa9c53aa4e6ae128a856e68a9eeb1cadb8",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "8/1/09, 7:30 AM",
      "commitNameOld": "d6a438e931412713e99624cf9ed74470f1040184",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 31.27,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "actualSource": "public VectorialPointValuePair optimize(final DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n    if (target.length !\u003d weights.length) {\n        throw new OptimizationException(\"dimension mismatch {0} !\u003d {1}\", target.length, weights.length);\n    }\n    iterations \u003d 0;\n    objectiveEvaluations \u003d 0;\n    jacobianEvaluations \u003d 0;\n    function \u003d f;\n    jF \u003d f.jacobian();\n    targetValues \u003d target.clone();\n    residualsWeights \u003d weights.clone();\n    this.point \u003d startPoint.clone();\n    this.residuals \u003d new double[target.length];\n    rows \u003d target.length;\n    cols \u003d point.length;\n    jacobian \u003d new double[rows][cols];\n    cost \u003d Double.POSITIVE_INFINITY;\n    return doOptimize();\n}",
      "path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
      "functionStartLine": 316,
      "functionName": "optimize",
      "functionAnnotation": "",
      "functionDoc": "@inheritDoc}\n",
      "diff": "@@ -1,19 +1,19 @@\n public VectorialPointValuePair optimize(final DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n     if (target.length !\u003d weights.length) {\n         throw new OptimizationException(\"dimension mismatch {0} !\u003d {1}\", target.length, weights.length);\n     }\n     iterations \u003d 0;\n     objectiveEvaluations \u003d 0;\n     jacobianEvaluations \u003d 0;\n-    this.f \u003d f;\n+    function \u003d f;\n     jF \u003d f.jacobian();\n-    this.target \u003d target.clone();\n-    this.weights \u003d weights.clone();\n+    targetValues \u003d target.clone();\n+    residualsWeights \u003d weights.clone();\n     this.point \u003d startPoint.clone();\n     this.residuals \u003d new double[target.length];\n     rows \u003d target.length;\n     cols \u003d point.length;\n     jacobian \u003d new double[rows][cols];\n     cost \u003d Double.POSITIVE_INFINITY;\n     return doOptimize();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d6a438e931412713e99624cf9ed74470f1040184": {
      "type": "Yfilerename",
      "commitMessage": "moved main java directory for compliance with maven standard directory layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@799870 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/1/09, 7:30 AM",
      "commitName": "d6a438e931412713e99624cf9ed74470f1040184",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "8/1/09, 7:23 AM",
      "commitNameOld": "2ad5ef61630be627f46ae1c266cf796f044bd4a8",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public VectorialPointValuePair optimize(final DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n    if (target.length !\u003d weights.length) {\n        throw new OptimizationException(\"dimension mismatch {0} !\u003d {1}\", target.length, weights.length);\n    }\n    iterations \u003d 0;\n    objectiveEvaluations \u003d 0;\n    jacobianEvaluations \u003d 0;\n    this.f \u003d f;\n    jF \u003d f.jacobian();\n    this.target \u003d target.clone();\n    this.weights \u003d weights.clone();\n    this.point \u003d startPoint.clone();\n    this.residuals \u003d new double[target.length];\n    rows \u003d target.length;\n    cols \u003d point.length;\n    jacobian \u003d new double[rows][cols];\n    cost \u003d Double.POSITIVE_INFINITY;\n    return doOptimize();\n}",
      "path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
      "functionStartLine": 316,
      "functionName": "optimize",
      "functionAnnotation": "",
      "functionDoc": "@inheritDoc}\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "newPath": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java"
      }
    },
    "ae6753dd5e4ce3b0ed9bd67f92d2d4e92587300f": {
      "type": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "updated general algorithms with latest interfaces definitions\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@758058 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/24/09, 3:15 PM",
      "commitName": "ae6753dd5e4ce3b0ed9bd67f92d2d4e92587300f",
      "commitAuthor": "Luc Maisonobe",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "updated general algorithms with latest interfaces definitions\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@758058 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "3/24/09, 3:15 PM",
          "commitName": "ae6753dd5e4ce3b0ed9bd67f92d2d4e92587300f",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "3/22/09, 6:19 AM",
          "commitNameOld": "a22972bab6b827f94bf2c5a644929418ae18b3c0",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 2.37,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "actualSource": "public VectorialPointValuePair optimize(final DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n    if (target.length !\u003d weights.length) {\n        throw new OptimizationException(\"dimension mismatch {0} !\u003d {1}\", target.length, weights.length);\n    }\n    iterations \u003d 0;\n    objectiveEvaluations \u003d 0;\n    jacobianEvaluations \u003d 0;\n    this.f \u003d f;\n    jF \u003d f.jacobian();\n    this.target \u003d target.clone();\n    this.weights \u003d weights.clone();\n    this.point \u003d startPoint.clone();\n    this.residuals \u003d new double[target.length];\n    rows \u003d target.length;\n    cols \u003d point.length;\n    jacobian \u003d new double[rows][cols];\n    cost \u003d Double.POSITIVE_INFINITY;\n    return doOptimize();\n}",
          "path": "src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
          "functionStartLine": 302,
          "functionName": "optimize",
          "functionAnnotation": "",
          "functionDoc": "@inheritDoc}\n",
          "diff": "@@ -1,18 +1,19 @@\n-public VectorialPointValuePair optimize(final VectorialDifferentiableObjectiveFunction f, final double[] target, final double[] weights, final double[] startPoint) throws ObjectiveException, OptimizationException, IllegalArgumentException {\n+public VectorialPointValuePair optimize(final DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n     if (target.length !\u003d weights.length) {\n         throw new OptimizationException(\"dimension mismatch {0} !\u003d {1}\", target.length, weights.length);\n     }\n     iterations \u003d 0;\n     objectiveEvaluations \u003d 0;\n     jacobianEvaluations \u003d 0;\n     this.f \u003d f;\n+    jF \u003d f.jacobian();\n     this.target \u003d target.clone();\n     this.weights \u003d weights.clone();\n-    this.variables \u003d startPoint.clone();\n+    this.point \u003d startPoint.clone();\n     this.residuals \u003d new double[target.length];\n     rows \u003d target.length;\n-    cols \u003d variables.length;\n+    cols \u003d point.length;\n     jacobian \u003d new double[rows][cols];\n     cost \u003d Double.POSITIVE_INFINITY;\n     return doOptimize();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[f-VectorialDifferentiableObjectiveFunction(modifiers-final), target-double[](modifiers-final), weights-double[](modifiers-final), startPoint-double[](modifiers-final)]",
            "newValue": "[f-DifferentiableMultivariateVectorialFunction(modifiers-final), target-double[](modifiers-final), weights-double[](modifiers-final), startPoint-double[](modifiers-final)]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "updated general algorithms with latest interfaces definitions\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@758058 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "3/24/09, 3:15 PM",
          "commitName": "ae6753dd5e4ce3b0ed9bd67f92d2d4e92587300f",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "3/22/09, 6:19 AM",
          "commitNameOld": "a22972bab6b827f94bf2c5a644929418ae18b3c0",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 2.37,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "actualSource": "public VectorialPointValuePair optimize(final DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n    if (target.length !\u003d weights.length) {\n        throw new OptimizationException(\"dimension mismatch {0} !\u003d {1}\", target.length, weights.length);\n    }\n    iterations \u003d 0;\n    objectiveEvaluations \u003d 0;\n    jacobianEvaluations \u003d 0;\n    this.f \u003d f;\n    jF \u003d f.jacobian();\n    this.target \u003d target.clone();\n    this.weights \u003d weights.clone();\n    this.point \u003d startPoint.clone();\n    this.residuals \u003d new double[target.length];\n    rows \u003d target.length;\n    cols \u003d point.length;\n    jacobian \u003d new double[rows][cols];\n    cost \u003d Double.POSITIVE_INFINITY;\n    return doOptimize();\n}",
          "path": "src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
          "functionStartLine": 302,
          "functionName": "optimize",
          "functionAnnotation": "",
          "functionDoc": "@inheritDoc}\n",
          "diff": "@@ -1,18 +1,19 @@\n-public VectorialPointValuePair optimize(final VectorialDifferentiableObjectiveFunction f, final double[] target, final double[] weights, final double[] startPoint) throws ObjectiveException, OptimizationException, IllegalArgumentException {\n+public VectorialPointValuePair optimize(final DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n     if (target.length !\u003d weights.length) {\n         throw new OptimizationException(\"dimension mismatch {0} !\u003d {1}\", target.length, weights.length);\n     }\n     iterations \u003d 0;\n     objectiveEvaluations \u003d 0;\n     jacobianEvaluations \u003d 0;\n     this.f \u003d f;\n+    jF \u003d f.jacobian();\n     this.target \u003d target.clone();\n     this.weights \u003d weights.clone();\n-    this.variables \u003d startPoint.clone();\n+    this.point \u003d startPoint.clone();\n     this.residuals \u003d new double[target.length];\n     rows \u003d target.length;\n-    cols \u003d variables.length;\n+    cols \u003d point.length;\n     jacobian \u003d new double[rows][cols];\n     cost \u003d Double.POSITIVE_INFINITY;\n     return doOptimize();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[ObjectiveException, OptimizationException, IllegalArgumentException]",
            "newValue": "[FunctionEvaluationException, OptimizationException, IllegalArgumentException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "updated general algorithms with latest interfaces definitions\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@758058 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "3/24/09, 3:15 PM",
          "commitName": "ae6753dd5e4ce3b0ed9bd67f92d2d4e92587300f",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "3/22/09, 6:19 AM",
          "commitNameOld": "a22972bab6b827f94bf2c5a644929418ae18b3c0",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 2.37,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "actualSource": "public VectorialPointValuePair optimize(final DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n    if (target.length !\u003d weights.length) {\n        throw new OptimizationException(\"dimension mismatch {0} !\u003d {1}\", target.length, weights.length);\n    }\n    iterations \u003d 0;\n    objectiveEvaluations \u003d 0;\n    jacobianEvaluations \u003d 0;\n    this.f \u003d f;\n    jF \u003d f.jacobian();\n    this.target \u003d target.clone();\n    this.weights \u003d weights.clone();\n    this.point \u003d startPoint.clone();\n    this.residuals \u003d new double[target.length];\n    rows \u003d target.length;\n    cols \u003d point.length;\n    jacobian \u003d new double[rows][cols];\n    cost \u003d Double.POSITIVE_INFINITY;\n    return doOptimize();\n}",
          "path": "src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
          "functionStartLine": 302,
          "functionName": "optimize",
          "functionAnnotation": "",
          "functionDoc": "@inheritDoc}\n",
          "diff": "@@ -1,18 +1,19 @@\n-public VectorialPointValuePair optimize(final VectorialDifferentiableObjectiveFunction f, final double[] target, final double[] weights, final double[] startPoint) throws ObjectiveException, OptimizationException, IllegalArgumentException {\n+public VectorialPointValuePair optimize(final DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n     if (target.length !\u003d weights.length) {\n         throw new OptimizationException(\"dimension mismatch {0} !\u003d {1}\", target.length, weights.length);\n     }\n     iterations \u003d 0;\n     objectiveEvaluations \u003d 0;\n     jacobianEvaluations \u003d 0;\n     this.f \u003d f;\n+    jF \u003d f.jacobian();\n     this.target \u003d target.clone();\n     this.weights \u003d weights.clone();\n-    this.variables \u003d startPoint.clone();\n+    this.point \u003d startPoint.clone();\n     this.residuals \u003d new double[target.length];\n     rows \u003d target.length;\n-    cols \u003d variables.length;\n+    cols \u003d point.length;\n     jacobian \u003d new double[rows][cols];\n     cost \u003d Double.POSITIVE_INFINITY;\n     return doOptimize();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "a7faf40b61f445d15d9a210b23fa0008b87e25e2": {
      "type": "Ybodychange",
      "commitMessage": "separated iteration counter from function evaluation counters,\nsome optimizers are based on gradient/jacobian only and cannot\nreliably be protected by monitoring the objective function calls.\n\nWe now have two or three counters for each algorithm:\n - iteration counter, which is checked against a max allowance\n   to prevent infinite loops if no convergence is reached\n - objective function evaluations, for user information only\n - objective function gradient/jacobian if the function is\n   differentiable, for user information only\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@757181 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/22/09, 6:00 AM",
      "commitName": "a7faf40b61f445d15d9a210b23fa0008b87e25e2",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "3/15/09, 2:35 PM",
      "commitNameOld": "513511976ddc778f7c52d69bf43db3c3f4b88803",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 6.64,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public VectorialPointValuePair optimize(final VectorialDifferentiableObjectiveFunction f, final double[] target, final double[] weights, final double[] startPoint) throws ObjectiveException, OptimizationException, IllegalArgumentException {\n    if (target.length !\u003d weights.length) {\n        throw new OptimizationException(\"dimension mismatch {0} !\u003d {1}\", target.length, weights.length);\n    }\n    iterations \u003d 0;\n    objectiveEvaluations \u003d 0;\n    jacobianEvaluations \u003d 0;\n    this.f \u003d f;\n    this.target \u003d target.clone();\n    this.weights \u003d weights.clone();\n    this.variables \u003d startPoint.clone();\n    this.residuals \u003d new double[target.length];\n    rows \u003d target.length;\n    cols \u003d variables.length;\n    jacobian \u003d new double[rows][cols];\n    cost \u003d Double.POSITIVE_INFINITY;\n    return doOptimize();\n}",
      "path": "src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
      "functionStartLine": 297,
      "functionName": "optimize",
      "functionAnnotation": "",
      "functionDoc": "@inheritDoc}\n",
      "diff": "@@ -1,17 +1,18 @@\n public VectorialPointValuePair optimize(final VectorialDifferentiableObjectiveFunction f, final double[] target, final double[] weights, final double[] startPoint) throws ObjectiveException, OptimizationException, IllegalArgumentException {\n     if (target.length !\u003d weights.length) {\n         throw new OptimizationException(\"dimension mismatch {0} !\u003d {1}\", target.length, weights.length);\n     }\n+    iterations \u003d 0;\n     objectiveEvaluations \u003d 0;\n     jacobianEvaluations \u003d 0;\n     this.f \u003d f;\n     this.target \u003d target.clone();\n     this.weights \u003d weights.clone();\n     this.variables \u003d startPoint.clone();\n     this.residuals \u003d new double[target.length];\n     rows \u003d target.length;\n     cols \u003d variables.length;\n     jacobian \u003d new double[rows][cols];\n     cost \u003d Double.POSITIVE_INFINITY;\n     return doOptimize();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "513511976ddc778f7c52d69bf43db3c3f4b88803": {
      "type": "Ybodychange",
      "commitMessage": "fixed checkstyle and findbugs errors\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@754765 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/15/09, 2:35 PM",
      "commitName": "513511976ddc778f7c52d69bf43db3c3f4b88803",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "3/15/09, 12:11 PM",
      "commitNameOld": "8541f303370cec9a25f2b32b3d660b3f188913f0",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "public VectorialPointValuePair optimize(final VectorialDifferentiableObjectiveFunction f, final double[] target, final double[] weights, final double[] startPoint) throws ObjectiveException, OptimizationException, IllegalArgumentException {\n    if (target.length !\u003d weights.length) {\n        throw new OptimizationException(\"dimension mismatch {0} !\u003d {1}\", target.length, weights.length);\n    }\n    objectiveEvaluations \u003d 0;\n    jacobianEvaluations \u003d 0;\n    this.f \u003d f;\n    this.target \u003d target.clone();\n    this.weights \u003d weights.clone();\n    this.variables \u003d startPoint.clone();\n    this.residuals \u003d new double[target.length];\n    rows \u003d target.length;\n    cols \u003d variables.length;\n    jacobian \u003d new double[rows][cols];\n    cost \u003d Double.POSITIVE_INFINITY;\n    return doOptimize();\n}",
      "path": "src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
      "functionStartLine": 290,
      "functionName": "optimize",
      "functionAnnotation": "",
      "functionDoc": "@inheritDoc}\n",
      "diff": "@@ -1,17 +1,17 @@\n public VectorialPointValuePair optimize(final VectorialDifferentiableObjectiveFunction f, final double[] target, final double[] weights, final double[] startPoint) throws ObjectiveException, OptimizationException, IllegalArgumentException {\n     if (target.length !\u003d weights.length) {\n         throw new OptimizationException(\"dimension mismatch {0} !\u003d {1}\", target.length, weights.length);\n     }\n     objectiveEvaluations \u003d 0;\n     jacobianEvaluations \u003d 0;\n     this.f \u003d f;\n-    this.target \u003d target;\n-    this.weights \u003d weights;\n+    this.target \u003d target.clone();\n+    this.weights \u003d weights.clone();\n     this.variables \u003d startPoint.clone();\n     this.residuals \u003d new double[target.length];\n     rows \u003d target.length;\n     cols \u003d variables.length;\n     jacobian \u003d new double[rows][cols];\n     cost \u003d Double.POSITIVE_INFINITY;\n     return doOptimize();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "8541f303370cec9a25f2b32b3d660b3f188913f0": {
      "type": "Ybodychange",
      "commitMessage": "adapted old Levenberg-Marquardt estimator to new top level optimizers API\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@754727 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/15/09, 12:11 PM",
      "commitName": "8541f303370cec9a25f2b32b3d660b3f188913f0",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "3/14/09, 10:38 AM",
      "commitNameOld": "8cb418e7fa50aba9977fe073aec66ad3f6e4f07c",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 1.06,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public VectorialPointValuePair optimize(final VectorialDifferentiableObjectiveFunction f, final double[] target, final double[] weights, final double[] startPoint) throws ObjectiveException, OptimizationException, IllegalArgumentException {\n    if (target.length !\u003d weights.length) {\n        throw new OptimizationException(\"dimension mismatch {0} !\u003d {1}\", target.length, weights.length);\n    }\n    objectiveEvaluations \u003d 0;\n    jacobianEvaluations \u003d 0;\n    this.f \u003d f;\n    this.target \u003d target;\n    this.weights \u003d weights;\n    this.variables \u003d startPoint.clone();\n    this.residuals \u003d new double[target.length];\n    rows \u003d target.length;\n    cols \u003d variables.length;\n    jacobian \u003d new double[rows][cols];\n    cost \u003d Double.POSITIVE_INFINITY;\n    return doOptimize();\n}",
      "path": "src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
      "functionStartLine": 290,
      "functionName": "optimize",
      "functionAnnotation": "",
      "functionDoc": "@inheritDoc}\n",
      "diff": "@@ -1,16 +1,17 @@\n public VectorialPointValuePair optimize(final VectorialDifferentiableObjectiveFunction f, final double[] target, final double[] weights, final double[] startPoint) throws ObjectiveException, OptimizationException, IllegalArgumentException {\n     if (target.length !\u003d weights.length) {\n         throw new OptimizationException(\"dimension mismatch {0} !\u003d {1}\", target.length, weights.length);\n     }\n     objectiveEvaluations \u003d 0;\n     jacobianEvaluations \u003d 0;\n     this.f \u003d f;\n     this.target \u003d target;\n     this.weights \u003d weights;\n     this.variables \u003d startPoint.clone();\n+    this.residuals \u003d new double[target.length];\n     rows \u003d target.length;\n     cols \u003d variables.length;\n     jacobian \u003d new double[rows][cols];\n     cost \u003d Double.POSITIVE_INFINITY;\n     return doOptimize();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "8cb418e7fa50aba9977fe073aec66ad3f6e4f07c": {
      "type": "Yintroduced",
      "commitMessage": "adapted the Gauss-Newton optimizer to the new top-level optimization interfaces\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@754500 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/14/09, 10:38 AM",
      "commitName": "8cb418e7fa50aba9977fe073aec66ad3f6e4f07c",
      "commitAuthor": "Luc Maisonobe",
      "diff": "@@ -0,0 +1,16 @@\n+public VectorialPointValuePair optimize(final VectorialDifferentiableObjectiveFunction f, final double[] target, final double[] weights, final double[] startPoint) throws ObjectiveException, OptimizationException, IllegalArgumentException {\n+    if (target.length !\u003d weights.length) {\n+        throw new OptimizationException(\"dimension mismatch {0} !\u003d {1}\", target.length, weights.length);\n+    }\n+    objectiveEvaluations \u003d 0;\n+    jacobianEvaluations \u003d 0;\n+    this.f \u003d f;\n+    this.target \u003d target;\n+    this.weights \u003d weights;\n+    this.variables \u003d startPoint.clone();\n+    rows \u003d target.length;\n+    cols \u003d variables.length;\n+    jacobian \u003d new double[rows][cols];\n+    cost \u003d Double.POSITIVE_INFINITY;\n+    return doOptimize();\n+}\n\\ No newline at end of file\n",
      "actualSource": "public VectorialPointValuePair optimize(final VectorialDifferentiableObjectiveFunction f, final double[] target, final double[] weights, final double[] startPoint) throws ObjectiveException, OptimizationException, IllegalArgumentException {\n    if (target.length !\u003d weights.length) {\n        throw new OptimizationException(\"dimension mismatch {0} !\u003d {1}\", target.length, weights.length);\n    }\n    objectiveEvaluations \u003d 0;\n    jacobianEvaluations \u003d 0;\n    this.f \u003d f;\n    this.target \u003d target;\n    this.weights \u003d weights;\n    this.variables \u003d startPoint.clone();\n    rows \u003d target.length;\n    cols \u003d variables.length;\n    jacobian \u003d new double[rows][cols];\n    cost \u003d Double.POSITIVE_INFINITY;\n    return doOptimize();\n}",
      "path": "src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
      "functionStartLine": 283,
      "functionName": "optimize",
      "functionAnnotation": "",
      "functionDoc": "@inheritDoc}\n"
    }
  }
}