{
  "origin": "codeshovel",
  "repositoryName": "Closure-31b",
  "repositoryPath": "/tmp/Closure-31b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractCommandLineRunner.java",
  "functionName": "outputNameMaps",
  "functionId": "outputNameMaps___options-B",
  "sourceFilePath": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
  "functionAnnotation": "",
  "functionDoc": "Outputs the variable and property name maps for the specified compiler if\nthe proper FLAGS are set.\n",
  "functionStartLine": 1220,
  "functionEndLine": 1279,
  "numCommitsSeen": 91,
  "timeTaken": 4748,
  "changeHistory": [
    "a5eb0d18b158ce13e0b2e8c709ff4275fc239dc6",
    "3e42e575f21275d2d0f8196f2f22b4ea06995d5b",
    "c080c668a4ccd9eb151cbb4f90980ddbbfbaba44",
    "848ace840362a1f5558bec065cb40548ff66587a",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "a5eb0d18b158ce13e0b2e8c709ff4275fc239dc6": "Ybodychange",
    "3e42e575f21275d2d0f8196f2f22b4ea06995d5b": "Ybodychange",
    "c080c668a4ccd9eb151cbb4f90980ddbbfbaba44": "Ybodychange",
    "848ace840362a1f5558bec065cb40548ff66587a": "Yfilerename",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a5eb0d18b158ce13e0b2e8c709ff4275fc239dc6": {
      "type": "Ybodychange",
      "commitMessage": "\nRemove jsOutputFile from CompilerOptions as it has no purpose.\n\nR\u003dnicksantos\nDELTA\u003d10  (0 added, 5 deleted, 5 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3928\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1667 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/7/11, 3:47 PM",
      "commitName": "a5eb0d18b158ce13e0b2e8c709ff4275fc239dc6",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/22/11, 4:16 PM",
      "commitNameOld": "5a7b057e7326d4c710ce4d087c05a39d29778078",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 14.98,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "actualSource": "private void outputNameMaps(B options) throws FlagUsageException, IOException {\n    String propertyMapOutputPath \u003d null;\n    String variableMapOutputPath \u003d null;\n    String functionInformationMapOutputPath \u003d null;\n    if (config.createNameMapFiles) {\n        String basePath \u003d getMapPath(config.jsOutputFile);\n        propertyMapOutputPath \u003d basePath + \"_props_map.out\";\n        variableMapOutputPath \u003d basePath + \"_vars_map.out\";\n        functionInformationMapOutputPath \u003d basePath + \"_functions_map.out\";\n    }\n    if (!config.variableMapOutputFile.equals(\"\")) {\n        if (variableMapOutputPath !\u003d null) {\n            throw new FlagUsageException(\"The flags variable_map_output_file and \" + \"create_name_map_files cannot both be used simultaniously.\");\n        }\n        variableMapOutputPath \u003d config.variableMapOutputFile;\n    }\n    if (!config.propertyMapOutputFile.equals(\"\")) {\n        if (propertyMapOutputPath !\u003d null) {\n            throw new FlagUsageException(\"The flags property_map_output_file and \" + \"create_name_map_files cannot both be used simultaniously.\");\n        }\n        propertyMapOutputPath \u003d config.propertyMapOutputFile;\n    }\n    if (variableMapOutputPath !\u003d null) {\n        if (compiler.getVariableMap() !\u003d null) {\n            compiler.getVariableMap().save(variableMapOutputPath);\n        }\n    }\n    if (propertyMapOutputPath !\u003d null) {\n        if (compiler.getPropertyMap() !\u003d null) {\n            compiler.getPropertyMap().save(propertyMapOutputPath);\n        }\n    }\n    if (functionInformationMapOutputPath !\u003d null) {\n        if (compiler.getFunctionalInformationMap() !\u003d null) {\n            OutputStream file \u003d filenameToOutputStream(functionInformationMapOutputPath);\n            CodedOutputStream outputStream \u003d CodedOutputStream.newInstance(file);\n            compiler.getFunctionalInformationMap().writeTo(outputStream);\n            outputStream.flush();\n            file.flush();\n            file.close();\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
      "functionStartLine": 1110,
      "functionName": "outputNameMaps",
      "functionAnnotation": "",
      "functionDoc": "Outputs the variable and property name maps for the specified compiler if\nthe proper FLAGS are set.\n",
      "diff": "@@ -1,43 +1,43 @@\n private void outputNameMaps(B options) throws FlagUsageException, IOException {\n     String propertyMapOutputPath \u003d null;\n     String variableMapOutputPath \u003d null;\n     String functionInformationMapOutputPath \u003d null;\n     if (config.createNameMapFiles) {\n-        String basePath \u003d getMapPath(options.jsOutputFile);\n+        String basePath \u003d getMapPath(config.jsOutputFile);\n         propertyMapOutputPath \u003d basePath + \"_props_map.out\";\n         variableMapOutputPath \u003d basePath + \"_vars_map.out\";\n         functionInformationMapOutputPath \u003d basePath + \"_functions_map.out\";\n     }\n     if (!config.variableMapOutputFile.equals(\"\")) {\n         if (variableMapOutputPath !\u003d null) {\n             throw new FlagUsageException(\"The flags variable_map_output_file and \" + \"create_name_map_files cannot both be used simultaniously.\");\n         }\n         variableMapOutputPath \u003d config.variableMapOutputFile;\n     }\n     if (!config.propertyMapOutputFile.equals(\"\")) {\n         if (propertyMapOutputPath !\u003d null) {\n             throw new FlagUsageException(\"The flags property_map_output_file and \" + \"create_name_map_files cannot both be used simultaniously.\");\n         }\n         propertyMapOutputPath \u003d config.propertyMapOutputFile;\n     }\n     if (variableMapOutputPath !\u003d null) {\n         if (compiler.getVariableMap() !\u003d null) {\n             compiler.getVariableMap().save(variableMapOutputPath);\n         }\n     }\n     if (propertyMapOutputPath !\u003d null) {\n         if (compiler.getPropertyMap() !\u003d null) {\n             compiler.getPropertyMap().save(propertyMapOutputPath);\n         }\n     }\n     if (functionInformationMapOutputPath !\u003d null) {\n         if (compiler.getFunctionalInformationMap() !\u003d null) {\n             OutputStream file \u003d filenameToOutputStream(functionInformationMapOutputPath);\n             CodedOutputStream outputStream \u003d CodedOutputStream.newInstance(file);\n             compiler.getFunctionalInformationMap().writeTo(outputStream);\n             outputStream.flush();\n             file.flush();\n             file.close();\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3e42e575f21275d2d0f8196f2f22b4ea06995d5b": {
      "type": "Ybodychange",
      "commitMessage": "\nMake CommandLineRunner more extensible\nFixes issue 353.\nContributed by Ibrahim Chaehoi\n\nRevision created by MOE tool push_codebase.\n\nR\u003djohnlenz\nDELTA\u003d45  (30 added, 2 deleted, 13 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d679\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@823 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/25/11, 12:23 PM",
      "commitName": "3e42e575f21275d2d0f8196f2f22b4ea06995d5b",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "2/8/11, 9:38 PM",
      "commitNameOld": "d38121222cc7c1d5e8dd2c34dcea4c2dc7468450",
      "commitAuthorOld": "kochi@google.com",
      "daysBetweenCommits": 16.61,
      "commitsBetweenForRepo": 50,
      "commitsBetweenForFile": 1,
      "actualSource": "private void outputNameMaps(B options) throws FlagUsageException, IOException {\n    String propertyMapOutputPath \u003d null;\n    String variableMapOutputPath \u003d null;\n    String functionInformationMapOutputPath \u003d null;\n    if (config.createNameMapFiles) {\n        String basePath \u003d getMapPath(options.jsOutputFile);\n        propertyMapOutputPath \u003d basePath + \"_props_map.out\";\n        variableMapOutputPath \u003d basePath + \"_vars_map.out\";\n        functionInformationMapOutputPath \u003d basePath + \"_functions_map.out\";\n    }\n    if (!config.variableMapOutputFile.equals(\"\")) {\n        if (variableMapOutputPath !\u003d null) {\n            throw new FlagUsageException(\"The flags variable_map_output_file and \" + \"create_name_map_files cannot both be used simultaniously.\");\n        }\n        variableMapOutputPath \u003d config.variableMapOutputFile;\n    }\n    if (!config.propertyMapOutputFile.equals(\"\")) {\n        if (propertyMapOutputPath !\u003d null) {\n            throw new FlagUsageException(\"The flags property_map_output_file and \" + \"create_name_map_files cannot both be used simultaniously.\");\n        }\n        propertyMapOutputPath \u003d config.propertyMapOutputFile;\n    }\n    if (variableMapOutputPath !\u003d null) {\n        if (compiler.getVariableMap() !\u003d null) {\n            compiler.getVariableMap().save(variableMapOutputPath);\n        }\n    }\n    if (propertyMapOutputPath !\u003d null) {\n        if (compiler.getPropertyMap() !\u003d null) {\n            compiler.getPropertyMap().save(propertyMapOutputPath);\n        }\n    }\n    if (functionInformationMapOutputPath !\u003d null) {\n        if (compiler.getFunctionalInformationMap() !\u003d null) {\n            OutputStream file \u003d filenameToOutputStream(functionInformationMapOutputPath);\n            CodedOutputStream outputStream \u003d CodedOutputStream.newInstance(file);\n            compiler.getFunctionalInformationMap().writeTo(outputStream);\n            outputStream.flush();\n            file.flush();\n            file.close();\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
      "functionStartLine": 968,
      "functionName": "outputNameMaps",
      "functionAnnotation": "",
      "functionDoc": "Outputs the variable and property name maps for the specified compiler if\nthe proper FLAGS are set.\n",
      "diff": "@@ -1,43 +1,43 @@\n private void outputNameMaps(B options) throws FlagUsageException, IOException {\n     String propertyMapOutputPath \u003d null;\n     String variableMapOutputPath \u003d null;\n     String functionInformationMapOutputPath \u003d null;\n     if (config.createNameMapFiles) {\n         String basePath \u003d getMapPath(options.jsOutputFile);\n         propertyMapOutputPath \u003d basePath + \"_props_map.out\";\n         variableMapOutputPath \u003d basePath + \"_vars_map.out\";\n         functionInformationMapOutputPath \u003d basePath + \"_functions_map.out\";\n     }\n     if (!config.variableMapOutputFile.equals(\"\")) {\n         if (variableMapOutputPath !\u003d null) {\n             throw new FlagUsageException(\"The flags variable_map_output_file and \" + \"create_name_map_files cannot both be used simultaniously.\");\n         }\n         variableMapOutputPath \u003d config.variableMapOutputFile;\n     }\n     if (!config.propertyMapOutputFile.equals(\"\")) {\n         if (propertyMapOutputPath !\u003d null) {\n             throw new FlagUsageException(\"The flags property_map_output_file and \" + \"create_name_map_files cannot both be used simultaniously.\");\n         }\n         propertyMapOutputPath \u003d config.propertyMapOutputFile;\n     }\n     if (variableMapOutputPath !\u003d null) {\n         if (compiler.getVariableMap() !\u003d null) {\n             compiler.getVariableMap().save(variableMapOutputPath);\n         }\n     }\n     if (propertyMapOutputPath !\u003d null) {\n         if (compiler.getPropertyMap() !\u003d null) {\n             compiler.getPropertyMap().save(propertyMapOutputPath);\n         }\n     }\n     if (functionInformationMapOutputPath !\u003d null) {\n         if (compiler.getFunctionalInformationMap() !\u003d null) {\n-            FileOutputStream file \u003d new FileOutputStream(functionInformationMapOutputPath);\n+            OutputStream file \u003d filenameToOutputStream(functionInformationMapOutputPath);\n             CodedOutputStream outputStream \u003d CodedOutputStream.newInstance(file);\n             compiler.getFunctionalInformationMap().writeTo(outputStream);\n             outputStream.flush();\n             file.flush();\n             file.close();\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c080c668a4ccd9eb151cbb4f90980ddbbfbaba44": {
      "type": "Ybodychange",
      "commitMessage": "rolling back the EventTarget changes for a little bit\n\ndecouple command-line options from command-line parsing. (Nick)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@127 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/4/10, 10:33 AM",
      "commitName": "c080c668a4ccd9eb151cbb4f90980ddbbfbaba44",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "2/26/10, 6:04 PM",
      "commitNameOld": "848ace840362a1f5558bec065cb40548ff66587a",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 5.69,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "private void outputNameMaps(B options) throws FlagUsageException, IOException {\n    String propertyMapOutputPath \u003d null;\n    String variableMapOutputPath \u003d null;\n    String functionInformationMapOutputPath \u003d null;\n    if (config.createNameMapFiles) {\n        String basePath \u003d getMapPath(options.jsOutputFile);\n        propertyMapOutputPath \u003d basePath + \"_props_map.out\";\n        variableMapOutputPath \u003d basePath + \"_vars_map.out\";\n        functionInformationMapOutputPath \u003d basePath + \"_functions_map.out\";\n    }\n    if (!config.variableMapOutputFile.equals(\"\")) {\n        if (variableMapOutputPath !\u003d null) {\n            throw new FlagUsageException(\"The flags variable_map_output_file and \" + \"create_name_map_files cannot both be used simultaniously.\");\n        }\n        variableMapOutputPath \u003d config.variableMapOutputFile;\n    }\n    if (!config.propertyMapOutputFile.equals(\"\")) {\n        if (propertyMapOutputPath !\u003d null) {\n            throw new FlagUsageException(\"The flags property_map_output_file and \" + \"create_name_map_files cannot both be used simultaniously.\");\n        }\n        propertyMapOutputPath \u003d config.propertyMapOutputFile;\n    }\n    if (variableMapOutputPath !\u003d null) {\n        if (compiler.getVariableMap() !\u003d null) {\n            compiler.getVariableMap().save(variableMapOutputPath);\n        }\n    }\n    if (propertyMapOutputPath !\u003d null) {\n        if (compiler.getPropertyMap() !\u003d null) {\n            compiler.getPropertyMap().save(propertyMapOutputPath);\n        }\n    }\n    if (functionInformationMapOutputPath !\u003d null) {\n        if (compiler.getFunctionalInformationMap() !\u003d null) {\n            FileOutputStream file \u003d new FileOutputStream(functionInformationMapOutputPath);\n            CodedOutputStream outputStream \u003d CodedOutputStream.newInstance(file);\n            compiler.getFunctionalInformationMap().writeTo(outputStream);\n            outputStream.flush();\n            file.flush();\n            file.close();\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
      "functionStartLine": 778,
      "functionName": "outputNameMaps",
      "functionAnnotation": "",
      "functionDoc": "Outputs the variable and property name maps for the specified compiler if\nthe proper FLAGS are set.\n",
      "diff": "@@ -1,43 +1,43 @@\n private void outputNameMaps(B options) throws FlagUsageException, IOException {\n     String propertyMapOutputPath \u003d null;\n     String variableMapOutputPath \u003d null;\n     String functionInformationMapOutputPath \u003d null;\n-    if (FLAG_create_name_map_files.get()) {\n+    if (config.createNameMapFiles) {\n         String basePath \u003d getMapPath(options.jsOutputFile);\n         propertyMapOutputPath \u003d basePath + \"_props_map.out\";\n         variableMapOutputPath \u003d basePath + \"_vars_map.out\";\n         functionInformationMapOutputPath \u003d basePath + \"_functions_map.out\";\n     }\n-    if (!FLAG_variable_map_output_file.get().equals(\"\")) {\n+    if (!config.variableMapOutputFile.equals(\"\")) {\n         if (variableMapOutputPath !\u003d null) {\n             throw new FlagUsageException(\"The flags variable_map_output_file and \" + \"create_name_map_files cannot both be used simultaniously.\");\n         }\n-        variableMapOutputPath \u003d FLAG_variable_map_output_file.get();\n+        variableMapOutputPath \u003d config.variableMapOutputFile;\n     }\n-    if (!FLAG_property_map_output_file.get().equals(\"\")) {\n+    if (!config.propertyMapOutputFile.equals(\"\")) {\n         if (propertyMapOutputPath !\u003d null) {\n             throw new FlagUsageException(\"The flags property_map_output_file and \" + \"create_name_map_files cannot both be used simultaniously.\");\n         }\n-        propertyMapOutputPath \u003d FLAG_property_map_output_file.get();\n+        propertyMapOutputPath \u003d config.propertyMapOutputFile;\n     }\n     if (variableMapOutputPath !\u003d null) {\n         if (compiler.getVariableMap() !\u003d null) {\n             compiler.getVariableMap().save(variableMapOutputPath);\n         }\n     }\n     if (propertyMapOutputPath !\u003d null) {\n         if (compiler.getPropertyMap() !\u003d null) {\n             compiler.getPropertyMap().save(propertyMapOutputPath);\n         }\n     }\n     if (functionInformationMapOutputPath !\u003d null) {\n         if (compiler.getFunctionalInformationMap() !\u003d null) {\n             FileOutputStream file \u003d new FileOutputStream(functionInformationMapOutputPath);\n             CodedOutputStream outputStream \u003d CodedOutputStream.newInstance(file);\n             compiler.getFunctionalInformationMap().writeTo(outputStream);\n             outputStream.flush();\n             file.flush();\n             file.close();\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "848ace840362a1f5558bec065cb40548ff66587a": {
      "type": "Yfilerename",
      "commitMessage": "Rename CompilerRunner -\u003e CommandLineRunner.\nI\u0027ll also do this for JSCompilerRunner, but it will be a much\nbigger change. (Nick)\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@119 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/26/10, 6:04 PM",
      "commitName": "848ace840362a1f5558bec065cb40548ff66587a",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "2/26/10, 3:45 PM",
      "commitNameOld": "50c1b3d39ff5b17c956a2235f97f7b5da05ab6f0",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void outputNameMaps(B options) throws FlagUsageException, IOException {\n    String propertyMapOutputPath \u003d null;\n    String variableMapOutputPath \u003d null;\n    String functionInformationMapOutputPath \u003d null;\n    if (FLAG_create_name_map_files.get()) {\n        String basePath \u003d getMapPath(options.jsOutputFile);\n        propertyMapOutputPath \u003d basePath + \"_props_map.out\";\n        variableMapOutputPath \u003d basePath + \"_vars_map.out\";\n        functionInformationMapOutputPath \u003d basePath + \"_functions_map.out\";\n    }\n    if (!FLAG_variable_map_output_file.get().equals(\"\")) {\n        if (variableMapOutputPath !\u003d null) {\n            throw new FlagUsageException(\"The flags variable_map_output_file and \" + \"create_name_map_files cannot both be used simultaniously.\");\n        }\n        variableMapOutputPath \u003d FLAG_variable_map_output_file.get();\n    }\n    if (!FLAG_property_map_output_file.get().equals(\"\")) {\n        if (propertyMapOutputPath !\u003d null) {\n            throw new FlagUsageException(\"The flags property_map_output_file and \" + \"create_name_map_files cannot both be used simultaniously.\");\n        }\n        propertyMapOutputPath \u003d FLAG_property_map_output_file.get();\n    }\n    if (variableMapOutputPath !\u003d null) {\n        if (compiler.getVariableMap() !\u003d null) {\n            compiler.getVariableMap().save(variableMapOutputPath);\n        }\n    }\n    if (propertyMapOutputPath !\u003d null) {\n        if (compiler.getPropertyMap() !\u003d null) {\n            compiler.getPropertyMap().save(propertyMapOutputPath);\n        }\n    }\n    if (functionInformationMapOutputPath !\u003d null) {\n        if (compiler.getFunctionalInformationMap() !\u003d null) {\n            FileOutputStream file \u003d new FileOutputStream(functionInformationMapOutputPath);\n            CodedOutputStream outputStream \u003d CodedOutputStream.newInstance(file);\n            compiler.getFunctionalInformationMap().writeTo(outputStream);\n            outputStream.flush();\n            file.flush();\n            file.close();\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
      "functionStartLine": 932,
      "functionName": "outputNameMaps",
      "functionAnnotation": "",
      "functionDoc": "Outputs the variable and property name maps for the specified compiler if\nthe proper FLAGS are set.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/com/google/javascript/jscomp/AbstractCompilerRunner.java",
        "newPath": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java"
      }
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,43 @@\n+private void outputNameMaps(B options) throws FlagUsageException, IOException {\n+    String propertyMapOutputPath \u003d null;\n+    String variableMapOutputPath \u003d null;\n+    String functionInformationMapOutputPath \u003d null;\n+    if (FLAG_create_name_map_files.get()) {\n+        String basePath \u003d getMapPath(options.jsOutputFile);\n+        propertyMapOutputPath \u003d basePath + \"_props_map.out\";\n+        variableMapOutputPath \u003d basePath + \"_vars_map.out\";\n+        functionInformationMapOutputPath \u003d basePath + \"_functions_map.out\";\n+    }\n+    if (!FLAG_variable_map_output_file.get().equals(\"\")) {\n+        if (variableMapOutputPath !\u003d null) {\n+            throw new FlagUsageException(\"The flags variable_map_output_file and \" + \"create_name_map_files cannot both be used simultaniously.\");\n+        }\n+        variableMapOutputPath \u003d FLAG_variable_map_output_file.get();\n+    }\n+    if (!FLAG_property_map_output_file.get().equals(\"\")) {\n+        if (propertyMapOutputPath !\u003d null) {\n+            throw new FlagUsageException(\"The flags property_map_output_file and \" + \"create_name_map_files cannot both be used simultaniously.\");\n+        }\n+        propertyMapOutputPath \u003d FLAG_property_map_output_file.get();\n+    }\n+    if (variableMapOutputPath !\u003d null) {\n+        if (compiler.getVariableMap() !\u003d null) {\n+            compiler.getVariableMap().save(variableMapOutputPath);\n+        }\n+    }\n+    if (propertyMapOutputPath !\u003d null) {\n+        if (compiler.getPropertyMap() !\u003d null) {\n+            compiler.getPropertyMap().save(propertyMapOutputPath);\n+        }\n+    }\n+    if (functionInformationMapOutputPath !\u003d null) {\n+        if (compiler.getFunctionalInformationMap() !\u003d null) {\n+            FileOutputStream file \u003d new FileOutputStream(functionInformationMapOutputPath);\n+            CodedOutputStream outputStream \u003d CodedOutputStream.newInstance(file);\n+            compiler.getFunctionalInformationMap().writeTo(outputStream);\n+            outputStream.flush();\n+            file.flush();\n+            file.close();\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void outputNameMaps(B options) throws FlagUsageException, IOException {\n    String propertyMapOutputPath \u003d null;\n    String variableMapOutputPath \u003d null;\n    String functionInformationMapOutputPath \u003d null;\n    if (FLAG_create_name_map_files.get()) {\n        String basePath \u003d getMapPath(options.jsOutputFile);\n        propertyMapOutputPath \u003d basePath + \"_props_map.out\";\n        variableMapOutputPath \u003d basePath + \"_vars_map.out\";\n        functionInformationMapOutputPath \u003d basePath + \"_functions_map.out\";\n    }\n    if (!FLAG_variable_map_output_file.get().equals(\"\")) {\n        if (variableMapOutputPath !\u003d null) {\n            throw new FlagUsageException(\"The flags variable_map_output_file and \" + \"create_name_map_files cannot both be used simultaniously.\");\n        }\n        variableMapOutputPath \u003d FLAG_variable_map_output_file.get();\n    }\n    if (!FLAG_property_map_output_file.get().equals(\"\")) {\n        if (propertyMapOutputPath !\u003d null) {\n            throw new FlagUsageException(\"The flags property_map_output_file and \" + \"create_name_map_files cannot both be used simultaniously.\");\n        }\n        propertyMapOutputPath \u003d FLAG_property_map_output_file.get();\n    }\n    if (variableMapOutputPath !\u003d null) {\n        if (compiler.getVariableMap() !\u003d null) {\n            compiler.getVariableMap().save(variableMapOutputPath);\n        }\n    }\n    if (propertyMapOutputPath !\u003d null) {\n        if (compiler.getPropertyMap() !\u003d null) {\n            compiler.getPropertyMap().save(propertyMapOutputPath);\n        }\n    }\n    if (functionInformationMapOutputPath !\u003d null) {\n        if (compiler.getFunctionalInformationMap() !\u003d null) {\n            FileOutputStream file \u003d new FileOutputStream(functionInformationMapOutputPath);\n            CodedOutputStream outputStream \u003d CodedOutputStream.newInstance(file);\n            compiler.getFunctionalInformationMap().writeTo(outputStream);\n            outputStream.flush();\n            file.flush();\n            file.close();\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/AbstractCompilerRunner.java",
      "functionStartLine": 790,
      "functionName": "outputNameMaps",
      "functionAnnotation": "",
      "functionDoc": "Outputs the variable and property name maps for the specified compiler if\nthe proper FLAGS are set.\n"
    }
  }
}