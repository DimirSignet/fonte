{
  "origin": "codeshovel",
  "repositoryName": "Closure-31b",
  "repositoryPath": "/tmp/Closure-31b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JsDocInfoParser.java",
  "functionName": "parseTypeName",
  "functionId": "parseTypeName___token-JsDocToken",
  "sourceFilePath": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
  "functionAnnotation": "",
  "functionDoc": "TypeName :\u003d NameExpression | NameExpression TypeApplication\nTypeApplication :\u003d \u0027.\u003c\u0027 TypeExpressionList \u0027\u003e\u0027\nTypeExpressionList :\u003d TypeExpression // a white lie\n",
  "functionStartLine": 1764,
  "functionEndLine": 1799,
  "numCommitsSeen": 58,
  "timeTaken": 6542,
  "changeHistory": [
    "9dcaf037db4f82485a52421540f35565068c9766",
    "11e59819ec6134736004cebf264b030517a7bff1",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "9dcaf037db4f82485a52421540f35565068c9766": "Ybodychange",
    "11e59819ec6134736004cebf264b030517a7bff1": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9dcaf037db4f82485a52421540f35565068c9766": {
      "type": "Ybodychange",
      "commitMessage": "\nAdd an indexer for type references in jsdoc tags\n\nR\u003djschorr\nDELTA\u003d82  (75 added, 0 deleted, 7 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3238\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1429 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/12/11, 10:01 AM",
      "commitName": "9dcaf037db4f82485a52421540f35565068c9766",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "8/4/11, 9:23 AM",
      "commitNameOld": "0af94b21ceb7f8f0891b85e5713ff93c230e1bb6",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 39.03,
      "commitsBetweenForRepo": 93,
      "commitsBetweenForFile": 1,
      "actualSource": "private Node parseTypeName(JsDocToken token) {\n    if (token !\u003d JsDocToken.STRING) {\n        return reportGenericTypeSyntaxWarning();\n    }\n    String typeName \u003d stream.getString();\n    int lineno \u003d stream.getLineno();\n    int charno \u003d stream.getCharno();\n    while (match(JsDocToken.EOL) \u0026\u0026 typeName.charAt(typeName.length() - 1) \u003d\u003d \u0027.\u0027) {\n        skipEOLs();\n        if (match(JsDocToken.STRING)) {\n            next();\n            typeName +\u003d stream.getString();\n        }\n    }\n    Node typeNameNode \u003d newStringNode(typeName, lineno, charno);\n    if (match(JsDocToken.LT)) {\n        next();\n        skipEOLs();\n        Node memberType \u003d parseTypeExpressionList(next());\n        if (memberType !\u003d null) {\n            typeNameNode.addChildToFront(memberType);\n            skipEOLs();\n            if (!match(JsDocToken.GT)) {\n                return reportTypeSyntaxWarning(\"msg.jsdoc.missing.gt\");\n            }\n            next();\n        }\n    }\n    return typeNameNode;\n}",
      "path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
      "functionStartLine": 1723,
      "functionName": "parseTypeName",
      "functionAnnotation": "",
      "functionDoc": "TypeName :\u003d NameExpression | NameExpression TypeApplication\nTypeApplication :\u003d \u0027.\u003c\u0027 TypeExpressionList \u0027\u003e\u0027\nTypeExpressionList :\u003d TypeExpression // a white lie\n",
      "diff": "@@ -1,28 +1,30 @@\n private Node parseTypeName(JsDocToken token) {\n     if (token !\u003d JsDocToken.STRING) {\n         return reportGenericTypeSyntaxWarning();\n     }\n     String typeName \u003d stream.getString();\n+    int lineno \u003d stream.getLineno();\n+    int charno \u003d stream.getCharno();\n     while (match(JsDocToken.EOL) \u0026\u0026 typeName.charAt(typeName.length() - 1) \u003d\u003d \u0027.\u0027) {\n         skipEOLs();\n         if (match(JsDocToken.STRING)) {\n             next();\n             typeName +\u003d stream.getString();\n         }\n     }\n-    Node typeNameNode \u003d newStringNode(typeName);\n+    Node typeNameNode \u003d newStringNode(typeName, lineno, charno);\n     if (match(JsDocToken.LT)) {\n         next();\n         skipEOLs();\n         Node memberType \u003d parseTypeExpressionList(next());\n         if (memberType !\u003d null) {\n             typeNameNode.addChildToFront(memberType);\n             skipEOLs();\n             if (!match(JsDocToken.GT)) {\n                 return reportTypeSyntaxWarning(\"msg.jsdoc.missing.gt\");\n             }\n             next();\n         }\n     }\n     return typeNameNode;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "11e59819ec6134736004cebf264b030517a7bff1": {
      "type": "Ybodychange",
      "commitMessage": "\nAllow type names to be split across multiple lines.\nTo avoid parsing ambiguities, we insist that the type name must\nend in a \u0027.\u0027 to get this behavior.\n\nR\u003dacleung\nDELTA\u003d49  (40 added, 0 deleted, 9 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d579\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@802 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/22/11, 6:33 AM",
      "commitName": "11e59819ec6134736004cebf264b030517a7bff1",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "2/8/11, 9:38 PM",
      "commitNameOld": "d38121222cc7c1d5e8dd2c34dcea4c2dc7468450",
      "commitAuthorOld": "kochi@google.com",
      "daysBetweenCommits": 13.37,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "actualSource": "private Node parseTypeName(JsDocToken token) {\n    if (token !\u003d JsDocToken.STRING) {\n        return reportGenericTypeSyntaxWarning();\n    }\n    String typeName \u003d stream.getString();\n    while (match(JsDocToken.EOL) \u0026\u0026 typeName.charAt(typeName.length() - 1) \u003d\u003d \u0027.\u0027) {\n        skipEOLs();\n        if (match(JsDocToken.STRING)) {\n            next();\n            typeName +\u003d stream.getString();\n        }\n    }\n    Node typeNameNode \u003d newStringNode(typeName);\n    if (match(JsDocToken.LT)) {\n        next();\n        skipEOLs();\n        Node memberType \u003d parseTypeExpressionList(next());\n        if (memberType !\u003d null) {\n            typeNameNode.addChildToFront(memberType);\n            skipEOLs();\n            if (!match(JsDocToken.GT)) {\n                return reportTypeSyntaxWarning(\"msg.jsdoc.missing.gt\");\n            }\n            next();\n        }\n    }\n    return typeNameNode;\n}",
      "path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
      "functionStartLine": 1661,
      "functionName": "parseTypeName",
      "functionAnnotation": "",
      "functionDoc": "TypeName :\u003d NameExpression | NameExpression TypeApplication\nTypeApplication :\u003d \u0027.\u003c\u0027 TypeExpressionList \u0027\u003e\u0027\nTypeExpressionList :\u003d TypeExpression // a white lie\n",
      "diff": "@@ -1,20 +1,28 @@\n private Node parseTypeName(JsDocToken token) {\n     if (token !\u003d JsDocToken.STRING) {\n         return reportGenericTypeSyntaxWarning();\n     }\n-    Node typeName \u003d newStringNode(stream.getString());\n+    String typeName \u003d stream.getString();\n+    while (match(JsDocToken.EOL) \u0026\u0026 typeName.charAt(typeName.length() - 1) \u003d\u003d \u0027.\u0027) {\n+        skipEOLs();\n+        if (match(JsDocToken.STRING)) {\n+            next();\n+            typeName +\u003d stream.getString();\n+        }\n+    }\n+    Node typeNameNode \u003d newStringNode(typeName);\n     if (match(JsDocToken.LT)) {\n         next();\n         skipEOLs();\n         Node memberType \u003d parseTypeExpressionList(next());\n         if (memberType !\u003d null) {\n-            typeName.addChildToFront(memberType);\n+            typeNameNode.addChildToFront(memberType);\n             skipEOLs();\n             if (!match(JsDocToken.GT)) {\n                 return reportTypeSyntaxWarning(\"msg.jsdoc.missing.gt\");\n             }\n             next();\n         }\n     }\n-    return typeName;\n+    return typeNameNode;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,20 @@\n+private Node parseTypeName(JsDocToken token) {\n+    if (token !\u003d JsDocToken.STRING) {\n+        return reportGenericTypeSyntaxWarning();\n+    }\n+    Node typeName \u003d newStringNode(stream.getString());\n+    if (match(JsDocToken.LT)) {\n+        next();\n+        skipEOLs();\n+        Node memberType \u003d parseTypeExpressionList(next());\n+        if (memberType !\u003d null) {\n+            typeName.addChildToFront(memberType);\n+            skipEOLs();\n+            if (!match(JsDocToken.GT)) {\n+                return reportTypeSyntaxWarning(\"msg.jsdoc.missing.gt\");\n+            }\n+            next();\n+        }\n+    }\n+    return typeName;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private Node parseTypeName(JsDocToken token) {\n    if (token !\u003d JsDocToken.STRING) {\n        return reportGenericTypeSyntaxWarning();\n    }\n    Node typeName \u003d newStringNode(stream.getString());\n    if (match(JsDocToken.LT)) {\n        next();\n        skipEOLs();\n        Node memberType \u003d parseTypeExpressionList(next());\n        if (memberType !\u003d null) {\n            typeName.addChildToFront(memberType);\n            skipEOLs();\n            if (!match(JsDocToken.GT)) {\n                return reportTypeSyntaxWarning(\"msg.jsdoc.missing.gt\");\n            }\n            next();\n        }\n    }\n    return typeName;\n}",
      "path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
      "functionStartLine": 1548,
      "functionName": "parseTypeName",
      "functionAnnotation": "",
      "functionDoc": "TypeName :\u003d NameExpression | NameExpression TypeApplication\nTypeApplication :\u003d \u0027.\u003c\u0027 TypeExpressionList \u0027\u003e\u0027\nTypeExpressionList :\u003d TypeExpression // a white lie\n"
    }
  }
}