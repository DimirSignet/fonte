{
  "origin": "codeshovel",
  "repositoryName": "Closure-60b",
  "repositoryPath": "/tmp/Closure-60b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FixedPointGraphTraversal.java",
  "functionName": "computeFixedPoint",
  "functionId": "computeFixedPoint___graph-DiGraph__N,E____entrySet-Set__N__",
  "sourceFilePath": "src/com/google/javascript/jscomp/graph/FixedPointGraphTraversal.java",
  "functionAnnotation": "",
  "functionDoc": "Compute a fixed point for the given graph, entering from the given nodes.\n\n@param graph The graph to traverse.\n@param entrySet The nodes to begin traversing from.\n",
  "functionStartLine": 93,
  "functionEndLine": 128,
  "numCommitsSeen": 5,
  "timeTaken": 330,
  "changeHistory": [
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,22 @@\n+public void computeFixedPoint(DiGraph\u003cN, E\u003e graph, Set\u003cN\u003e entrySet) {\n+    int cycleCount \u003d 0;\n+    long nodeCount \u003d graph.getNodes().size();\n+    long maxIterations \u003d Math.max(nodeCount * nodeCount * nodeCount, 100);\n+    LinkedHashSet\u003cDiGraphNode\u003cN, E\u003e\u003e workSet \u003d Sets.newLinkedHashSet();\n+    for (N n : entrySet) {\n+        workSet.add(graph.getDirectedGraphNode(n));\n+    }\n+    for (; !workSet.isEmpty() \u0026\u0026 cycleCount \u003c maxIterations; cycleCount++) {\n+        DiGraphNode\u003cN, E\u003e source \u003d workSet.iterator().next();\n+        N sourceValue \u003d source.getValue();\n+        workSet.remove(source);\n+        List\u003cDiGraphEdge\u003cN, E\u003e\u003e outEdges \u003d source.getOutEdges();\n+        for (DiGraphEdge\u003cN, E\u003e edge : outEdges) {\n+            N destNode \u003d edge.getDestination().getValue();\n+            if (callback.traverseEdge(sourceValue, edge.getValue(), destNode)) {\n+                workSet.add(edge.getDestination());\n+            }\n+        }\n+    }\n+    Preconditions.checkState(cycleCount !\u003d maxIterations, NON_HALTING_ERROR_MSG);\n+}\n\\ No newline at end of file\n",
      "actualSource": "public void computeFixedPoint(DiGraph\u003cN, E\u003e graph, Set\u003cN\u003e entrySet) {\n    int cycleCount \u003d 0;\n    long nodeCount \u003d graph.getNodes().size();\n    long maxIterations \u003d Math.max(nodeCount * nodeCount * nodeCount, 100);\n    LinkedHashSet\u003cDiGraphNode\u003cN, E\u003e\u003e workSet \u003d Sets.newLinkedHashSet();\n    for (N n : entrySet) {\n        workSet.add(graph.getDirectedGraphNode(n));\n    }\n    for (; !workSet.isEmpty() \u0026\u0026 cycleCount \u003c maxIterations; cycleCount++) {\n        DiGraphNode\u003cN, E\u003e source \u003d workSet.iterator().next();\n        N sourceValue \u003d source.getValue();\n        workSet.remove(source);\n        List\u003cDiGraphEdge\u003cN, E\u003e\u003e outEdges \u003d source.getOutEdges();\n        for (DiGraphEdge\u003cN, E\u003e edge : outEdges) {\n            N destNode \u003d edge.getDestination().getValue();\n            if (callback.traverseEdge(sourceValue, edge.getValue(), destNode)) {\n                workSet.add(edge.getDestination());\n            }\n        }\n    }\n    Preconditions.checkState(cycleCount !\u003d maxIterations, NON_HALTING_ERROR_MSG);\n}",
      "path": "src/com/google/javascript/jscomp/graph/FixedPointGraphTraversal.java",
      "functionStartLine": 93,
      "functionName": "computeFixedPoint",
      "functionAnnotation": "",
      "functionDoc": "Compute a fixed point for the given graph, entering from the given nodes.\n\n@param graph The graph to traverse.\n@param entrySet The nodes to begin traversing from.\n"
    }
  }
}