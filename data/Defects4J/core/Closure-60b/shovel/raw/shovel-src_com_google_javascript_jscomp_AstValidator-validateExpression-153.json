{
  "origin": "codeshovel",
  "repositoryName": "Closure-60b",
  "repositoryPath": "/tmp/Closure-60b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AstValidator.java",
  "functionName": "validateExpression",
  "functionId": "validateExpression___n-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/AstValidator.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 153,
  "functionEndLine": 273,
  "numCommitsSeen": 8,
  "timeTaken": 847,
  "changeHistory": [
    "7dfe089019805bd9a62ce26c1993b3c86d1aa3d1"
  ],
  "changeHistoryShort": {
    "7dfe089019805bd9a62ce26c1993b3c86d1aa3d1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7dfe089019805bd9a62ce26c1993b3c86d1aa3d1": {
      "type": "Yintroduced",
      "commitMessage": "\nIntroduce an ast validator.\n\nR\u003dacleung\nDELTA\u003d823  (823 added, 0 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1314\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@988 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/11/11, 9:52 AM",
      "commitName": "7dfe089019805bd9a62ce26c1993b3c86d1aa3d1",
      "commitAuthor": "johnlenz@google.com",
      "diff": "@@ -0,0 +1,99 @@\n+public void validateExpression(Node n) {\n+    switch(n.getType()) {\n+        case Token.FALSE:\n+        case Token.NULL:\n+        case Token.THIS:\n+        case Token.TRUE:\n+            validateChildless(n);\n+            return;\n+        case Token.DELPROP:\n+        case Token.POS:\n+        case Token.NEG:\n+        case Token.NOT:\n+        case Token.INC:\n+        case Token.DEC:\n+        case Token.TYPEOF:\n+        case Token.VOID:\n+        case Token.BITNOT:\n+            validateUnaryOp(n);\n+            return;\n+        case Token.COMMA:\n+        case Token.OR:\n+        case Token.AND:\n+        case Token.BITOR:\n+        case Token.BITXOR:\n+        case Token.BITAND:\n+        case Token.EQ:\n+        case Token.NE:\n+        case Token.SHEQ:\n+        case Token.SHNE:\n+        case Token.LT:\n+        case Token.GT:\n+        case Token.LE:\n+        case Token.GE:\n+        case Token.INSTANCEOF:\n+        case Token.IN:\n+        case Token.LSH:\n+        case Token.RSH:\n+        case Token.URSH:\n+        case Token.SUB:\n+        case Token.ADD:\n+        case Token.MUL:\n+        case Token.MOD:\n+        case Token.DIV:\n+            validateBinaryOp(n);\n+            return;\n+        case Token.ASSIGN:\n+        case Token.ASSIGN_BITOR:\n+        case Token.ASSIGN_BITXOR:\n+        case Token.ASSIGN_BITAND:\n+        case Token.ASSIGN_LSH:\n+        case Token.ASSIGN_RSH:\n+        case Token.ASSIGN_URSH:\n+        case Token.ASSIGN_ADD:\n+        case Token.ASSIGN_SUB:\n+        case Token.ASSIGN_MUL:\n+        case Token.ASSIGN_DIV:\n+        case Token.ASSIGN_MOD:\n+            validateAssignmentExpression(n);\n+            return;\n+        case Token.HOOK:\n+            validateTrinaryOp(n);\n+            return;\n+        case Token.STRING:\n+            validateString(n);\n+            return;\n+        case Token.NUMBER:\n+            validateNumber(n);\n+            return;\n+        case Token.NAME:\n+            validateName(n);\n+            return;\n+        case Token.GETELEM:\n+            validateBinaryOp(n);\n+            return;\n+        case Token.GETPROP:\n+            validateGetProp(n);\n+            return;\n+        case Token.ARRAYLIT:\n+            validateArrayLit(n);\n+            return;\n+        case Token.OBJECTLIT:\n+            validateObjectLit(n);\n+            return;\n+        case Token.REGEXP:\n+            validateRegExpLit(n);\n+            return;\n+        case Token.CALL:\n+            validateCall(n);\n+            return;\n+        case Token.NEW:\n+            validateNew(n);\n+            return;\n+        case Token.FUNCTION:\n+            validateFunctionExpression(n);\n+            return;\n+        default:\n+            violation(\"Expected expression but was \" + Node.tokenToName(n.getType()), n);\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "public void validateExpression(Node n) {\n    switch(n.getType()) {\n        case Token.FALSE:\n        case Token.NULL:\n        case Token.THIS:\n        case Token.TRUE:\n            validateChildless(n);\n            return;\n        case Token.DELPROP:\n        case Token.POS:\n        case Token.NEG:\n        case Token.NOT:\n        case Token.INC:\n        case Token.DEC:\n        case Token.TYPEOF:\n        case Token.VOID:\n        case Token.BITNOT:\n            validateUnaryOp(n);\n            return;\n        case Token.COMMA:\n        case Token.OR:\n        case Token.AND:\n        case Token.BITOR:\n        case Token.BITXOR:\n        case Token.BITAND:\n        case Token.EQ:\n        case Token.NE:\n        case Token.SHEQ:\n        case Token.SHNE:\n        case Token.LT:\n        case Token.GT:\n        case Token.LE:\n        case Token.GE:\n        case Token.INSTANCEOF:\n        case Token.IN:\n        case Token.LSH:\n        case Token.RSH:\n        case Token.URSH:\n        case Token.SUB:\n        case Token.ADD:\n        case Token.MUL:\n        case Token.MOD:\n        case Token.DIV:\n            validateBinaryOp(n);\n            return;\n        case Token.ASSIGN:\n        case Token.ASSIGN_BITOR:\n        case Token.ASSIGN_BITXOR:\n        case Token.ASSIGN_BITAND:\n        case Token.ASSIGN_LSH:\n        case Token.ASSIGN_RSH:\n        case Token.ASSIGN_URSH:\n        case Token.ASSIGN_ADD:\n        case Token.ASSIGN_SUB:\n        case Token.ASSIGN_MUL:\n        case Token.ASSIGN_DIV:\n        case Token.ASSIGN_MOD:\n            validateAssignmentExpression(n);\n            return;\n        case Token.HOOK:\n            validateTrinaryOp(n);\n            return;\n        case Token.STRING:\n            validateString(n);\n            return;\n        case Token.NUMBER:\n            validateNumber(n);\n            return;\n        case Token.NAME:\n            validateName(n);\n            return;\n        case Token.GETELEM:\n            validateBinaryOp(n);\n            return;\n        case Token.GETPROP:\n            validateGetProp(n);\n            return;\n        case Token.ARRAYLIT:\n            validateArrayLit(n);\n            return;\n        case Token.OBJECTLIT:\n            validateObjectLit(n);\n            return;\n        case Token.REGEXP:\n            validateRegExpLit(n);\n            return;\n        case Token.CALL:\n            validateCall(n);\n            return;\n        case Token.NEW:\n            validateNew(n);\n            return;\n        case Token.FUNCTION:\n            validateFunctionExpression(n);\n            return;\n        default:\n            violation(\"Expected expression but was \" + Node.tokenToName(n.getType()), n);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/AstValidator.java",
      "functionStartLine": 148,
      "functionName": "validateExpression",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}