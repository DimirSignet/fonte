{
  "origin": "codeshovel",
  "repositoryName": "Closure-60b",
  "repositoryPath": "/tmp/Closure-60b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PhaseOptimizer.java",
  "functionName": "consume",
  "functionId": "consume___factories-List__PassFactory__",
  "sourceFilePath": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
  "functionAnnotation": "",
  "functionDoc": "Add the passes generated by the given factories to the compile sequence.\n\nAutomatically pulls multi-run passes into fixed point loops. If there\nare 2 or more multi-run passes in a row, they will run together in\nthe same fixed point loop. If A and B are in the same fixed point loop,\nthe loop will continue to run both A and B until both are finished\nmaking changes.\n\nOther than that, the PhaseOptimizer is free to tweak the order and\nfrequency of multi-run passes in a fixed-point loop.\n",
  "functionStartLine": 113,
  "functionEndLine": 134,
  "numCommitsSeen": 10,
  "timeTaken": 396,
  "changeHistory": [
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,20 @@\n+void consume(List\u003cPassFactory\u003e factories) {\n+    Loop currentLoop \u003d new LoopInternal();\n+    boolean isCurrentLoopPopulated \u003d false;\n+    for (PassFactory factory : factories) {\n+        if (factory.isOneTimePass()) {\n+            if (isCurrentLoopPopulated) {\n+                passes.add(currentLoop);\n+                currentLoop \u003d new LoopInternal();\n+                isCurrentLoopPopulated \u003d false;\n+            }\n+            addOneTimePass(factory);\n+        } else {\n+            currentLoop.addLoopedPass(factory);\n+            isCurrentLoopPopulated \u003d true;\n+        }\n+    }\n+    if (isCurrentLoopPopulated) {\n+        passes.add(currentLoop);\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "void consume(List\u003cPassFactory\u003e factories) {\n    Loop currentLoop \u003d new LoopInternal();\n    boolean isCurrentLoopPopulated \u003d false;\n    for (PassFactory factory : factories) {\n        if (factory.isOneTimePass()) {\n            if (isCurrentLoopPopulated) {\n                passes.add(currentLoop);\n                currentLoop \u003d new LoopInternal();\n                isCurrentLoopPopulated \u003d false;\n            }\n            addOneTimePass(factory);\n        } else {\n            currentLoop.addLoopedPass(factory);\n            isCurrentLoopPopulated \u003d true;\n        }\n    }\n    if (isCurrentLoopPopulated) {\n        passes.add(currentLoop);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
      "functionStartLine": 70,
      "functionName": "consume",
      "functionAnnotation": "",
      "functionDoc": "Add the passes generated by the given factories to the compile sequence.\n\nAutomatically pulls multi-run passes into fixed point loops. If there\nare 2 or more multi-run passes in a row, they will run together in\nthe same fixed point loop. If A and B are in the same fixed point loop,\nthe loop will continue to run both A and B until both are finished\nmaking changes.\n\nOther than that, the PhaseOptimizer is free to tweak the order and\nfrequency of multi-run passes in a fixed-point loop.\n"
    }
  }
}