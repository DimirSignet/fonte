{
  "origin": "codeshovel",
  "repositoryName": "Closure-60b",
  "repositoryPath": "/tmp/Closure-60b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PureFunctionIdentifier.java",
  "functionName": "exitScope",
  "functionId": "$exitScope___t-NodeTraversal",
  "sourceFilePath": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 475,
  "functionEndLine": 513,
  "numCommitsSeen": 25,
  "timeTaken": 1367,
  "changeHistory": [
    "d48e656b8ef676a9d4d87503028d59628013307f",
    "6d4979514fd802dd4deded67f3ba1929e74a928d",
    "530ed0eff3806a9bb9dd6b58d15597f9a91c66a6"
  ],
  "changeHistoryShort": {
    "d48e656b8ef676a9d4d87503028d59628013307f": "Ybodychange",
    "6d4979514fd802dd4deded67f3ba1929e74a928d": "Ybodychange",
    "530ed0eff3806a9bb9dd6b58d15597f9a91c66a6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d48e656b8ef676a9d4d87503028d59628013307f": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nBreaks builds\n\n*** Original change description ***\n\nPropagate known local value information across functions.  This also fixes\nproblems with incomplete local information.\n\nR\u003dacleung,niranjan\nDELTA\u003d1003  (254 added, 671 deleted, 78 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@568 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/22/10, 7:55 PM",
      "commitName": "d48e656b8ef676a9d4d87503028d59628013307f",
      "commitAuthor": "diegosalas@google.com",
      "commitDateOld": "11/22/10, 3:02 PM",
      "commitNameOld": "6d4979514fd802dd4deded67f3ba1929e74a928d",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 0.2,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void exitScope(NodeTraversal t) {\n    if (t.inGlobalScope()) {\n        return;\n    }\n    FunctionInformation sideEffectInfo \u003d functionSideEffectMap.get(t.getScopeRoot());\n    if (sideEffectInfo.mutatesGlobalState()) {\n        sideEffectInfo.resetLocalVars();\n        return;\n    }\n    for (Iterator\u003cVar\u003e i \u003d t.getScope().getVars(); i.hasNext(); ) {\n        Var v \u003d i.next();\n        boolean localVar \u003d false;\n        if (v.getParentNode().getType() \u003d\u003d Token.VAR) {\n            sideEffectInfo.knownLocals.add(v.getName());\n            localVar \u003d true;\n        }\n        if (!localVar || sideEffectInfo.blacklisted.contains(v)) {\n            if (sideEffectInfo.taintedLocals.contains(v)) {\n                sideEffectInfo.setTaintsUnknown();\n                sideEffectInfo.resetLocalVars();\n                break;\n            }\n        }\n    }\n    sideEffectInfo.taintedLocals \u003d null;\n    sideEffectInfo.blacklisted \u003d null;\n}",
      "path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
      "functionStartLine": 475,
      "functionName": "exitScope",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,8 +1,28 @@\n @Override\n public void exitScope(NodeTraversal t) {\n-    if (t.inGlobalScope() || inExterns) {\n+    if (t.inGlobalScope()) {\n         return;\n     }\n-    FunctionSideEffectData sideEffectInfo \u003d functionSideEffectMap.get(t.getScopeRoot());\n-    sideEffectInfo.normalizeValueMaps();\n+    FunctionInformation sideEffectInfo \u003d functionSideEffectMap.get(t.getScopeRoot());\n+    if (sideEffectInfo.mutatesGlobalState()) {\n+        sideEffectInfo.resetLocalVars();\n+        return;\n+    }\n+    for (Iterator\u003cVar\u003e i \u003d t.getScope().getVars(); i.hasNext(); ) {\n+        Var v \u003d i.next();\n+        boolean localVar \u003d false;\n+        if (v.getParentNode().getType() \u003d\u003d Token.VAR) {\n+            sideEffectInfo.knownLocals.add(v.getName());\n+            localVar \u003d true;\n+        }\n+        if (!localVar || sideEffectInfo.blacklisted.contains(v)) {\n+            if (sideEffectInfo.taintedLocals.contains(v)) {\n+                sideEffectInfo.setTaintsUnknown();\n+                sideEffectInfo.resetLocalVars();\n+                break;\n+            }\n+        }\n+    }\n+    sideEffectInfo.taintedLocals \u003d null;\n+    sideEffectInfo.blacklisted \u003d null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6d4979514fd802dd4deded67f3ba1929e74a928d": {
      "type": "Ybodychange",
      "commitMessage": "\nPropagate known local value information across functions.  This also fixes\nproblems with incomplete local information.\n\nR\u003dnicksantos\nDELTA\u003d1000  (667 added, 250 deleted, 83 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d0\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@567 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/22/10, 3:02 PM",
      "commitName": "6d4979514fd802dd4deded67f3ba1929e74a928d",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/15/10, 10:20 PM",
      "commitNameOld": "da794a3a9cb2cebc0efb708ba9b465a4510c7235",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 6.7,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void exitScope(NodeTraversal t) {\n    if (t.inGlobalScope() || inExterns) {\n        return;\n    }\n    FunctionSideEffectData sideEffectInfo \u003d functionSideEffectMap.get(t.getScopeRoot());\n    sideEffectInfo.normalizeValueMaps();\n}",
      "path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
      "functionStartLine": 480,
      "functionName": "exitScope",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,28 +1,8 @@\n @Override\n public void exitScope(NodeTraversal t) {\n-    if (t.inGlobalScope()) {\n+    if (t.inGlobalScope() || inExterns) {\n         return;\n     }\n-    FunctionInformation sideEffectInfo \u003d functionSideEffectMap.get(t.getScopeRoot());\n-    if (sideEffectInfo.mutatesGlobalState()) {\n-        sideEffectInfo.resetLocalVars();\n-        return;\n-    }\n-    for (Iterator\u003cVar\u003e i \u003d t.getScope().getVars(); i.hasNext(); ) {\n-        Var v \u003d i.next();\n-        boolean localVar \u003d false;\n-        if (v.getParentNode().getType() \u003d\u003d Token.VAR) {\n-            sideEffectInfo.knownLocals.add(v.getName());\n-            localVar \u003d true;\n-        }\n-        if (!localVar || sideEffectInfo.blacklisted.contains(v)) {\n-            if (sideEffectInfo.taintedLocals.contains(v)) {\n-                sideEffectInfo.setTaintsUnknown();\n-                sideEffectInfo.resetLocalVars();\n-                break;\n-            }\n-        }\n-    }\n-    sideEffectInfo.taintedLocals \u003d null;\n-    sideEffectInfo.blacklisted \u003d null;\n+    FunctionSideEffectData sideEffectInfo \u003d functionSideEffectMap.get(t.getScopeRoot());\n+    sideEffectInfo.normalizeValueMaps();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "530ed0eff3806a9bb9dd6b58d15597f9a91c66a6": {
      "type": "Yintroduced",
      "commitMessage": "\nIntroduce the concept of local object side-effects.\n\nR\u003davd\nDELTA\u003d447  (422 added, 3 deleted, 22 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d242506\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@454 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/22/10, 3:14 PM",
      "commitName": "530ed0eff3806a9bb9dd6b58d15597f9a91c66a6",
      "commitAuthor": "johnlenz@google.com",
      "diff": "@@ -0,0 +1,28 @@\n+@Override\n+public void exitScope(NodeTraversal t) {\n+    if (t.inGlobalScope()) {\n+        return;\n+    }\n+    FunctionInformation sideEffectInfo \u003d functionSideEffectMap.get(t.getScopeRoot());\n+    if (sideEffectInfo.mutatesGlobalState()) {\n+        sideEffectInfo.resetLocalVars();\n+        return;\n+    }\n+    for (Iterator\u003cVar\u003e i \u003d t.getScope().getVars(); i.hasNext(); ) {\n+        Var v \u003d i.next();\n+        boolean localVar \u003d false;\n+        if (v.getParentNode().getType() \u003d\u003d Token.VAR) {\n+            sideEffectInfo.knownLocals.add(v.getName());\n+            localVar \u003d true;\n+        }\n+        if (!localVar || sideEffectInfo.blacklisted.contains(v)) {\n+            if (sideEffectInfo.taintedLocals.contains(v)) {\n+                sideEffectInfo.setTaintsUnknown();\n+                sideEffectInfo.resetLocalVars();\n+                break;\n+            }\n+        }\n+    }\n+    sideEffectInfo.taintedLocals \u003d null;\n+    sideEffectInfo.blacklisted \u003d null;\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic void exitScope(NodeTraversal t) {\n    if (t.inGlobalScope()) {\n        return;\n    }\n    FunctionInformation sideEffectInfo \u003d functionSideEffectMap.get(t.getScopeRoot());\n    if (sideEffectInfo.mutatesGlobalState()) {\n        sideEffectInfo.resetLocalVars();\n        return;\n    }\n    for (Iterator\u003cVar\u003e i \u003d t.getScope().getVars(); i.hasNext(); ) {\n        Var v \u003d i.next();\n        boolean localVar \u003d false;\n        if (v.getParentNode().getType() \u003d\u003d Token.VAR) {\n            sideEffectInfo.knownLocals.add(v.getName());\n            localVar \u003d true;\n        }\n        if (!localVar || sideEffectInfo.blacklisted.contains(v)) {\n            if (sideEffectInfo.taintedLocals.contains(v)) {\n                sideEffectInfo.setTaintsUnknown();\n                sideEffectInfo.resetLocalVars();\n                break;\n            }\n        }\n    }\n    sideEffectInfo.taintedLocals \u003d null;\n    sideEffectInfo.blacklisted \u003d null;\n}",
      "path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
      "functionStartLine": 439,
      "functionName": "exitScope",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}