{
  "origin": "codeshovel",
  "repositoryName": "Closure-60b",
  "repositoryPath": "/tmp/Closure-60b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Compiler.java",
  "functionName": "check",
  "functionId": "check",
  "sourceFilePath": "src/com/google/javascript/jscomp/Compiler.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 721,
  "functionEndLine": 753,
  "numCommitsSeen": 90,
  "timeTaken": 5704,
  "changeHistory": [
    "d24a652c89b3798648fade2401b741eae981d535",
    "0c3fdb92840718de9f9da085b818efb419cfb927",
    "a70a7c599e53a7752cf4b9e6e82b4408c3c4c04b",
    "845f5ff65858fd0d1829f3d2f16f758725e8028f",
    "3924ff1e4a236d68a0b5448d185537d90ca04419",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "d24a652c89b3798648fade2401b741eae981d535": "Ybodychange",
    "0c3fdb92840718de9f9da085b818efb419cfb927": "Ybodychange",
    "a70a7c599e53a7752cf4b9e6e82b4408c3c4c04b": "Ybodychange",
    "845f5ff65858fd0d1829f3d2f16f758725e8028f": "Ybodychange",
    "3924ff1e4a236d68a0b5448d185537d90ca04419": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d24a652c89b3798648fade2401b741eae981d535": {
      "type": "Ybodychange",
      "commitMessage": "\nEnhance the ProcessTweaks pass so that it:\n-Strips out all goog.tweak calls when tweakProcessing \u003d\u003d STRIP\n-Adds a var to the beginning of the input with compiler overrides when\ntweakProcessing \u003d\u003d CHECK\n\nR\u003dnicksantos\nDELTA\u003d369  (356 added, 3 deleted, 10 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d235\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@681 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/10/11, 11:27 AM",
      "commitName": "d24a652c89b3798648fade2401b741eae981d535",
      "commitAuthor": "agrieve@google.com",
      "commitDateOld": "1/6/11, 5:42 PM",
      "commitNameOld": "cd40201a2437da125ac492b21f13c8ad200b96bd",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 3.74,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "public void check() {\n    runCustomPasses(CustomPassExecutionTime.BEFORE_CHECKS);\n    PhaseOptimizer phaseOptimizer \u003d new PhaseOptimizer(this, tracker);\n    if (options.devMode \u003d\u003d DevMode.EVERY_PASS) {\n        phaseOptimizer.setSanityCheck(sanityCheck);\n    }\n    phaseOptimizer.consume(getPassConfig().getChecks());\n    phaseOptimizer.process(externsRoot, jsRoot);\n    if (hasErrors()) {\n        return;\n    }\n    if (options.nameAnonymousFunctionsOnly) {\n        return;\n    }\n    if (options.removeTryCatchFinally) {\n        removeTryCatchFinally();\n    }\n    if (options.getTweakProcessing().shouldStrip() || !options.stripTypes.isEmpty() || !options.stripNameSuffixes.isEmpty() || !options.stripTypePrefixes.isEmpty() || !options.stripNamePrefixes.isEmpty()) {\n        stripCode(options.stripTypes, options.stripNameSuffixes, options.stripTypePrefixes, options.stripNamePrefixes);\n    }\n    runCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATIONS);\n}",
      "path": "src/com/google/javascript/jscomp/Compiler.java",
      "functionStartLine": 691,
      "functionName": "check",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,22 +1,22 @@\n public void check() {\n     runCustomPasses(CustomPassExecutionTime.BEFORE_CHECKS);\n     PhaseOptimizer phaseOptimizer \u003d new PhaseOptimizer(this, tracker);\n     if (options.devMode \u003d\u003d DevMode.EVERY_PASS) {\n         phaseOptimizer.setSanityCheck(sanityCheck);\n     }\n     phaseOptimizer.consume(getPassConfig().getChecks());\n     phaseOptimizer.process(externsRoot, jsRoot);\n     if (hasErrors()) {\n         return;\n     }\n     if (options.nameAnonymousFunctionsOnly) {\n         return;\n     }\n     if (options.removeTryCatchFinally) {\n         removeTryCatchFinally();\n     }\n-    if (!options.stripTypes.isEmpty() || !options.stripNameSuffixes.isEmpty() || !options.stripTypePrefixes.isEmpty() || !options.stripNamePrefixes.isEmpty()) {\n+    if (options.getTweakProcessing().shouldStrip() || !options.stripTypes.isEmpty() || !options.stripNameSuffixes.isEmpty() || !options.stripTypePrefixes.isEmpty() || !options.stripNamePrefixes.isEmpty()) {\n         stripCode(options.stripTypes, options.stripNameSuffixes, options.stripTypePrefixes, options.stripNamePrefixes);\n     }\n     runCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATIONS);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0c3fdb92840718de9f9da085b818efb419cfb927": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/04/20 by john\n\n        Move Normalize from the end of \"check\" to the beginning of \"optimize\",\n        which is more consistent with how we are using it.\n\n        R\u003dnick\n        DELTA\u003d14  (7 added, 7 deleted, 0 changed)\n\nChange on 2010/04/20 by john\n\n        When pretty printing, output empty blocks instead of semicolons for if, for, etc so that\n        reparsing doesn\u0027t generate empty block warnings.\n\n        R\u003drobert\n        DELTA\u003d12  (8 added, 0 deleted, 4 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003divhzkq\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@193 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/20/10, 2:39 PM",
      "commitName": "0c3fdb92840718de9f9da085b818efb419cfb927",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/20/10, 9:00 AM",
      "commitNameOld": "b29d4a8bc7138f9216930edfebed29d42f0dca89",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 0.24,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public void check() {\n    runCustomPasses(CustomPassExecutionTime.BEFORE_CHECKS);\n    PhaseOptimizer phaseOptimizer \u003d new PhaseOptimizer(this, tracker);\n    if (options.devMode \u003d\u003d DevMode.EVERY_PASS) {\n        phaseOptimizer.setSanityCheck(sanityCheck);\n    }\n    phaseOptimizer.consume(getPassConfig().getChecks());\n    phaseOptimizer.process(externsRoot, jsRoot);\n    if (hasErrors()) {\n        return;\n    }\n    if (options.nameAnonymousFunctionsOnly) {\n        return;\n    }\n    if (options.removeTryCatchFinally) {\n        removeTryCatchFinally();\n    }\n    if (!options.stripTypes.isEmpty() || !options.stripNameSuffixes.isEmpty() || !options.stripTypePrefixes.isEmpty() || !options.stripNamePrefixes.isEmpty()) {\n        stripCode(options.stripTypes, options.stripNameSuffixes, options.stripTypePrefixes, options.stripNamePrefixes);\n    }\n    runCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATIONS);\n}",
      "path": "src/com/google/javascript/jscomp/Compiler.java",
      "functionStartLine": 677,
      "functionName": "check",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,23 +1,22 @@\n public void check() {\n     runCustomPasses(CustomPassExecutionTime.BEFORE_CHECKS);\n     PhaseOptimizer phaseOptimizer \u003d new PhaseOptimizer(this, tracker);\n     if (options.devMode \u003d\u003d DevMode.EVERY_PASS) {\n         phaseOptimizer.setSanityCheck(sanityCheck);\n     }\n     phaseOptimizer.consume(getPassConfig().getChecks());\n     phaseOptimizer.process(externsRoot, jsRoot);\n     if (hasErrors()) {\n         return;\n     }\n     if (options.nameAnonymousFunctionsOnly) {\n         return;\n     }\n     if (options.removeTryCatchFinally) {\n         removeTryCatchFinally();\n     }\n     if (!options.stripTypes.isEmpty() || !options.stripNameSuffixes.isEmpty() || !options.stripTypePrefixes.isEmpty() || !options.stripNamePrefixes.isEmpty()) {\n         stripCode(options.stripTypes, options.stripNameSuffixes, options.stripTypePrefixes, options.stripNamePrefixes);\n     }\n     runCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATIONS);\n-    normalize();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a70a7c599e53a7752cf4b9e6e82b4408c3c4c04b": {
      "type": "Ybodychange",
      "commitMessage": "fix silly 2004-era naming conventions (Nick)\nR\u003djohn\nDELTA\u003d134  (0 added, 0 deleted, 134 changed)\n\nInsert a place holder file for any empty modules. (Alan)\nR\u003dnick\nDELTA\u003d53  (46 added, 6 deleted, 1 changed)\n\nMaps API extern update.\n(Contributed by Chad Killingsworth)\nFixes issue 121\nDELTA\u003d86  (48 added, 16 deleted, 22 changed)\n\n\nGoogle Loader API externs.\n(Contributed by Chad Killingsworth)\nFixes issue 126\nDELTA\u003d54  (54 added, 0 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@149 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/22/10, 10:51 PM",
      "commitName": "a70a7c599e53a7752cf4b9e6e82b4408c3c4c04b",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "3/22/10, 3:55 PM",
      "commitNameOld": "b347ce3a71e23a4ab92dc0a6c07d43e2f497c953",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 0.29,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public void check() {\n    runCustomPasses(CustomPassExecutionTime.BEFORE_CHECKS);\n    PhaseOptimizer phaseOptimizer \u003d new PhaseOptimizer(this, tracker);\n    if (options.devMode \u003d\u003d DevMode.EVERY_PASS) {\n        phaseOptimizer.setSanityCheck(sanityCheck);\n    }\n    phaseOptimizer.consume(getPassConfig().getChecks());\n    phaseOptimizer.process(externsRoot, jsRoot);\n    if (hasErrors()) {\n        return;\n    }\n    if (options.nameAnonymousFunctionsOnly) {\n        return;\n    }\n    if (options.removeTryCatchFinally) {\n        removeTryCatchFinally();\n    }\n    if (!options.stripTypes.isEmpty() || !options.stripNameSuffixes.isEmpty() || !options.stripTypePrefixes.isEmpty() || !options.stripNamePrefixes.isEmpty()) {\n        stripCode(options.stripTypes, options.stripNameSuffixes, options.stripTypePrefixes, options.stripNamePrefixes);\n    }\n    runCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATIONS);\n    normalize();\n}",
      "path": "src/com/google/javascript/jscomp/Compiler.java",
      "functionStartLine": 630,
      "functionName": "check",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,23 +1,23 @@\n public void check() {\n     runCustomPasses(CustomPassExecutionTime.BEFORE_CHECKS);\n     PhaseOptimizer phaseOptimizer \u003d new PhaseOptimizer(this, tracker);\n-    if (options_.devMode \u003d\u003d DevMode.EVERY_PASS) {\n+    if (options.devMode \u003d\u003d DevMode.EVERY_PASS) {\n         phaseOptimizer.setSanityCheck(sanityCheck);\n     }\n     phaseOptimizer.consume(getPassConfig().getChecks());\n     phaseOptimizer.process(externsRoot, jsRoot);\n     if (hasErrors()) {\n         return;\n     }\n-    if (options_.nameAnonymousFunctionsOnly) {\n+    if (options.nameAnonymousFunctionsOnly) {\n         return;\n     }\n-    if (options_.removeTryCatchFinally) {\n+    if (options.removeTryCatchFinally) {\n         removeTryCatchFinally();\n     }\n-    if (!options_.stripTypes.isEmpty() || !options_.stripNameSuffixes.isEmpty() || !options_.stripTypePrefixes.isEmpty() || !options_.stripNamePrefixes.isEmpty()) {\n-        stripCode(options_.stripTypes, options_.stripNameSuffixes, options_.stripTypePrefixes, options_.stripNamePrefixes);\n+    if (!options.stripTypes.isEmpty() || !options.stripNameSuffixes.isEmpty() || !options.stripTypePrefixes.isEmpty() || !options.stripNamePrefixes.isEmpty()) {\n+        stripCode(options.stripTypes, options.stripNameSuffixes, options.stripTypePrefixes, options.stripNamePrefixes);\n     }\n     runCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATIONS);\n     normalize();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "845f5ff65858fd0d1829f3d2f16f758725e8028f": {
      "type": "Ybodychange",
      "commitMessage": "Add buttloads of tests.\n\nRewrite JSDoc inference to be more redundant, which should help it\nto be more robust.\n\nAssorted other fixes.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@20 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/7/09, 1:53 PM",
      "commitName": "845f5ff65858fd0d1829f3d2f16f758725e8028f",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "12/2/09, 5:12 PM",
      "commitNameOld": "3924ff1e4a236d68a0b5448d185537d90ca04419",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 4.86,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public void check() {\n    runCustomPasses(CustomPassExecutionTime.BEFORE_CHECKS);\n    PhaseOptimizer phaseOptimizer \u003d new PhaseOptimizer(this, tracker);\n    if (options_.devMode \u003d\u003d DevMode.EVERY_PASS) {\n        phaseOptimizer.setSanityCheck(sanityCheck);\n    }\n    phaseOptimizer.consume(getPassConfig().getChecks());\n    phaseOptimizer.process(externsRoot, jsRoot);\n    if (hasErrors()) {\n        return;\n    }\n    if (options_.nameAnonymousFunctionsOnly) {\n        return;\n    }\n    if (options_.removeTryCatchFinally) {\n        removeTryCatchFinally();\n    }\n    if (!options_.stripTypes.isEmpty() || !options_.stripNameSuffixes.isEmpty() || !options_.stripTypePrefixes.isEmpty() || !options_.stripNamePrefixes.isEmpty()) {\n        stripCode(options_.stripTypes, options_.stripNameSuffixes, options_.stripTypePrefixes, options_.stripNamePrefixes);\n    }\n    runCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATIONS);\n    normalize();\n}",
      "path": "src/com/google/javascript/jscomp/Compiler.java",
      "functionStartLine": 594,
      "functionName": "check",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,26 +1,23 @@\n public void check() {\n     runCustomPasses(CustomPassExecutionTime.BEFORE_CHECKS);\n     PhaseOptimizer phaseOptimizer \u003d new PhaseOptimizer(this, tracker);\n     if (options_.devMode \u003d\u003d DevMode.EVERY_PASS) {\n         phaseOptimizer.setSanityCheck(sanityCheck);\n     }\n     phaseOptimizer.consume(getPassConfig().getChecks());\n     phaseOptimizer.process(externsRoot, jsRoot);\n     if (hasErrors()) {\n         return;\n     }\n     if (options_.nameAnonymousFunctionsOnly) {\n         return;\n     }\n     if (options_.removeTryCatchFinally) {\n         removeTryCatchFinally();\n     }\n     if (!options_.stripTypes.isEmpty() || !options_.stripNameSuffixes.isEmpty() || !options_.stripTypePrefixes.isEmpty() || !options_.stripNamePrefixes.isEmpty()) {\n         stripCode(options_.stripTypes, options_.stripNameSuffixes, options_.stripTypePrefixes, options_.stripNamePrefixes);\n     }\n     runCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATIONS);\n     normalize();\n-    if (options_.sourceMapOutputPath !\u003d null) {\n-        this.sourceMap_ \u003d new SourceMap();\n-    }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3924ff1e4a236d68a0b5448d185537d90ca04419": {
      "type": "Ybodychange",
      "commitMessage": "Warn about all with statements, unless there\u0027s an explicit\n/** @suppress {with} */ tag\n\nRefactor a bunch of stuff into PassConfigs\n\nAdd a bunch of parser tests.\n\nUp-integrate John and Norris\u0027 latest changes to Rhino at trunk\n\nMinor type-tightening bug fixes.\n\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@18 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/2/09, 5:12 PM",
      "commitName": "3924ff1e4a236d68a0b5448d185537d90ca04419",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "12/1/09, 8:28 AM",
      "commitNameOld": "a478193982ce1fb9271e3f7ebcc1369913c9a859",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 1.36,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public void check() {\n    runCustomPasses(CustomPassExecutionTime.BEFORE_CHECKS);\n    PhaseOptimizer phaseOptimizer \u003d new PhaseOptimizer(this, tracker);\n    if (options_.devMode \u003d\u003d DevMode.EVERY_PASS) {\n        phaseOptimizer.setSanityCheck(sanityCheck);\n    }\n    phaseOptimizer.consume(getPassConfig().getChecks());\n    phaseOptimizer.process(externsRoot, jsRoot);\n    if (hasErrors()) {\n        return;\n    }\n    if (options_.nameAnonymousFunctionsOnly) {\n        return;\n    }\n    if (options_.removeTryCatchFinally) {\n        removeTryCatchFinally();\n    }\n    if (!options_.stripTypes.isEmpty() || !options_.stripNameSuffixes.isEmpty() || !options_.stripTypePrefixes.isEmpty() || !options_.stripNamePrefixes.isEmpty()) {\n        stripCode(options_.stripTypes, options_.stripNameSuffixes, options_.stripTypePrefixes, options_.stripNamePrefixes);\n    }\n    runCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATIONS);\n    normalize();\n    if (options_.sourceMapOutputPath !\u003d null) {\n        this.sourceMap_ \u003d new SourceMap();\n    }\n}",
      "path": "src/com/google/javascript/jscomp/Compiler.java",
      "functionStartLine": 583,
      "functionName": "check",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,26 +1,26 @@\n public void check() {\n     runCustomPasses(CustomPassExecutionTime.BEFORE_CHECKS);\n     PhaseOptimizer phaseOptimizer \u003d new PhaseOptimizer(this, tracker);\n     if (options_.devMode \u003d\u003d DevMode.EVERY_PASS) {\n         phaseOptimizer.setSanityCheck(sanityCheck);\n     }\n     phaseOptimizer.consume(getPassConfig().getChecks());\n     phaseOptimizer.process(externsRoot, jsRoot);\n     if (hasErrors()) {\n         return;\n     }\n-    if (options_.instrumentationTemplate !\u003d null || options_.recordFunctionInformation) {\n-        computeFunctionNames();\n+    if (options_.nameAnonymousFunctionsOnly) {\n+        return;\n     }\n     if (options_.removeTryCatchFinally) {\n         removeTryCatchFinally();\n     }\n     if (!options_.stripTypes.isEmpty() || !options_.stripNameSuffixes.isEmpty() || !options_.stripTypePrefixes.isEmpty() || !options_.stripNamePrefixes.isEmpty()) {\n         stripCode(options_.stripTypes, options_.stripNameSuffixes, options_.stripTypePrefixes, options_.stripNamePrefixes);\n     }\n     runCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATIONS);\n     normalize();\n     if (options_.sourceMapOutputPath !\u003d null) {\n         this.sourceMap_ \u003d new SourceMap();\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,26 @@\n+public void check() {\n+    runCustomPasses(CustomPassExecutionTime.BEFORE_CHECKS);\n+    PhaseOptimizer phaseOptimizer \u003d new PhaseOptimizer(this, tracker);\n+    if (options_.devMode \u003d\u003d DevMode.EVERY_PASS) {\n+        phaseOptimizer.setSanityCheck(sanityCheck);\n+    }\n+    phaseOptimizer.consume(getPassConfig().getChecks());\n+    phaseOptimizer.process(externsRoot, jsRoot);\n+    if (hasErrors()) {\n+        return;\n+    }\n+    if (options_.instrumentationTemplate !\u003d null || options_.recordFunctionInformation) {\n+        computeFunctionNames();\n+    }\n+    if (options_.removeTryCatchFinally) {\n+        removeTryCatchFinally();\n+    }\n+    if (!options_.stripTypes.isEmpty() || !options_.stripNameSuffixes.isEmpty() || !options_.stripTypePrefixes.isEmpty() || !options_.stripNamePrefixes.isEmpty()) {\n+        stripCode(options_.stripTypes, options_.stripNameSuffixes, options_.stripTypePrefixes, options_.stripNamePrefixes);\n+    }\n+    runCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATIONS);\n+    normalize();\n+    if (options_.sourceMapOutputPath !\u003d null) {\n+        this.sourceMap_ \u003d new SourceMap();\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "public void check() {\n    runCustomPasses(CustomPassExecutionTime.BEFORE_CHECKS);\n    PhaseOptimizer phaseOptimizer \u003d new PhaseOptimizer(this, tracker);\n    if (options_.devMode \u003d\u003d DevMode.EVERY_PASS) {\n        phaseOptimizer.setSanityCheck(sanityCheck);\n    }\n    phaseOptimizer.consume(getPassConfig().getChecks());\n    phaseOptimizer.process(externsRoot, jsRoot);\n    if (hasErrors()) {\n        return;\n    }\n    if (options_.instrumentationTemplate !\u003d null || options_.recordFunctionInformation) {\n        computeFunctionNames();\n    }\n    if (options_.removeTryCatchFinally) {\n        removeTryCatchFinally();\n    }\n    if (!options_.stripTypes.isEmpty() || !options_.stripNameSuffixes.isEmpty() || !options_.stripTypePrefixes.isEmpty() || !options_.stripNamePrefixes.isEmpty()) {\n        stripCode(options_.stripTypes, options_.stripNameSuffixes, options_.stripTypePrefixes, options_.stripNamePrefixes);\n    }\n    runCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATIONS);\n    normalize();\n    if (options_.sourceMapOutputPath !\u003d null) {\n        this.sourceMap_ \u003d new SourceMap();\n    }\n}",
      "path": "src/com/google/javascript/jscomp/Compiler.java",
      "functionStartLine": 612,
      "functionName": "check",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}