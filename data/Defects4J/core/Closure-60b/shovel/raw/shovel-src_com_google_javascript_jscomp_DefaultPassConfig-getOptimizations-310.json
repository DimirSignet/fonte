{
  "origin": "codeshovel",
  "repositoryName": "Closure-60b",
  "repositoryPath": "/tmp/Closure-60b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DefaultPassConfig.java",
  "functionName": "getOptimizations",
  "functionId": "getOptimizations",
  "sourceFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 310,
  "functionEndLine": 630,
  "numCommitsSeen": 117,
  "timeTaken": 9049,
  "changeHistory": [
    "a28ca5764c6836f267b011d95fd00d0ec9a6adbe",
    "fdccd7dd83594a58a6943d6dbc53531024a4d708",
    "38405b88fee5511d1b50bc24339a295cbc91613f",
    "760bded3242093d86611a82e81fdca302a1487f1",
    "5818d174d5f45189cb705071ddf35fc012ada891",
    "bf4fc620041677d3031a326fd2c0f91352fa6e27",
    "10587cd1fbd6b189089444d0bd2aa24d557b480c",
    "b7d0c1729ff32aa456727ed8c04dce277b1ebf89",
    "2daa009d090adc7f4e6b9130b35a68b8a1536e7b",
    "4bd29c66f884aaae3a3bc2cdf8019ced6e13089c",
    "b326ab0a322d0ece76e61955852ada034122192b",
    "f3c23f757da302483c86414ec8b9c502f10fce00",
    "902503a7f8aa4d86bbfc01a0933f2a9e6d952e7f",
    "211c8c6eae5117f156aa348d843ce688b80f5ea7",
    "b823ff368e21fbd36344db07f512d55826eded37",
    "f5b974651c6b4873c8df103572587a95d9be282c",
    "5741fcbabf37d54f3d37f4b497b44527ede76be1",
    "f42e3e4ac6273bf9f25392b34de24672e5d56883",
    "3c3abc459ce1f720fee690dc8398b03701263c38",
    "2f29d7ee3aaf3fe2372eb49104d4eb9ab93531ca",
    "db6ecf32790e8a1454f6bf1517444f8637211eae",
    "73f98ee988dad825ba8320bf4d8df0413fde531c",
    "c61dccaace9a74483f45d578121b8faee04b0f57",
    "309b4b8353342766fac7c446722d277cf19b6ac1",
    "44e59948342527c9d8ffc6f2b01d86af72aaef54",
    "aafd3788df73bd0d21c9411014a7cbda0a5bbd17",
    "4cf197f69d8733ac68b02672b2e23d7939e5eb76",
    "de6bda7da621841ee37e8a92399a9e7f0088dbf2",
    "6afe53cb82f87071567808d816dea524a74ae3ab",
    "7faf5924ea9c2ea0910cac2f6be17faa843ccf54",
    "c9e89727dc8063d087d28e42629606f4fd74a6e5",
    "3c2047d4ed1b14fc5e5269d08ee17bfc19bb5374",
    "1c2f9589453a5269f45adefed4f38b1b8253d235",
    "2131059de15ba858adf7646bfba5cbd04b661336",
    "4938fd2f88debf796c181d44ae5b9a35aa595513",
    "4922461babcc37fb037d2a6db3fcb33fe4127a60",
    "0f655dc72070acbdcc5fe3a1aecf91c11955c37b",
    "819dd2d2f8dc36cc6770236f1eb91635f3f9410e",
    "14ddcfdc0b8d1cece3c79221b1870b84f055d419",
    "a2d8936fae3eb0e3873c7f7c0233344c81436404",
    "168bc14ff5e9e664863c3b1146f2a5b7a30ffb42",
    "3924ff1e4a236d68a0b5448d185537d90ca04419",
    "6a6ea480bae01f40f9795218ac911bb7de18d34a",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "a28ca5764c6836f267b011d95fd00d0ec9a6adbe": "Ybodychange",
    "fdccd7dd83594a58a6943d6dbc53531024a4d708": "Ybodychange",
    "38405b88fee5511d1b50bc24339a295cbc91613f": "Ybodychange",
    "760bded3242093d86611a82e81fdca302a1487f1": "Ybodychange",
    "5818d174d5f45189cb705071ddf35fc012ada891": "Ybodychange",
    "bf4fc620041677d3031a326fd2c0f91352fa6e27": "Ybodychange",
    "10587cd1fbd6b189089444d0bd2aa24d557b480c": "Ybodychange",
    "b7d0c1729ff32aa456727ed8c04dce277b1ebf89": "Ybodychange",
    "2daa009d090adc7f4e6b9130b35a68b8a1536e7b": "Ybodychange",
    "4bd29c66f884aaae3a3bc2cdf8019ced6e13089c": "Ybodychange",
    "b326ab0a322d0ece76e61955852ada034122192b": "Ybodychange",
    "f3c23f757da302483c86414ec8b9c502f10fce00": "Ybodychange",
    "902503a7f8aa4d86bbfc01a0933f2a9e6d952e7f": "Ybodychange",
    "211c8c6eae5117f156aa348d843ce688b80f5ea7": "Ybodychange",
    "b823ff368e21fbd36344db07f512d55826eded37": "Ybodychange",
    "f5b974651c6b4873c8df103572587a95d9be282c": "Ybodychange",
    "5741fcbabf37d54f3d37f4b497b44527ede76be1": "Ybodychange",
    "f42e3e4ac6273bf9f25392b34de24672e5d56883": "Ybodychange",
    "3c3abc459ce1f720fee690dc8398b03701263c38": "Ybodychange",
    "2f29d7ee3aaf3fe2372eb49104d4eb9ab93531ca": "Ybodychange",
    "db6ecf32790e8a1454f6bf1517444f8637211eae": "Ybodychange",
    "73f98ee988dad825ba8320bf4d8df0413fde531c": "Ybodychange",
    "c61dccaace9a74483f45d578121b8faee04b0f57": "Ybodychange",
    "309b4b8353342766fac7c446722d277cf19b6ac1": "Ybodychange",
    "44e59948342527c9d8ffc6f2b01d86af72aaef54": "Ybodychange",
    "aafd3788df73bd0d21c9411014a7cbda0a5bbd17": "Ybodychange",
    "4cf197f69d8733ac68b02672b2e23d7939e5eb76": "Ybodychange",
    "de6bda7da621841ee37e8a92399a9e7f0088dbf2": "Ybodychange",
    "6afe53cb82f87071567808d816dea524a74ae3ab": "Ybodychange",
    "7faf5924ea9c2ea0910cac2f6be17faa843ccf54": "Ybodychange",
    "c9e89727dc8063d087d28e42629606f4fd74a6e5": "Ybodychange",
    "3c2047d4ed1b14fc5e5269d08ee17bfc19bb5374": "Ybodychange",
    "1c2f9589453a5269f45adefed4f38b1b8253d235": "Ybodychange",
    "2131059de15ba858adf7646bfba5cbd04b661336": "Ybodychange",
    "4938fd2f88debf796c181d44ae5b9a35aa595513": "Ybodychange",
    "4922461babcc37fb037d2a6db3fcb33fe4127a60": "Ybodychange",
    "0f655dc72070acbdcc5fe3a1aecf91c11955c37b": "Ybodychange",
    "819dd2d2f8dc36cc6770236f1eb91635f3f9410e": "Ybodychange",
    "14ddcfdc0b8d1cece3c79221b1870b84f055d419": "Ybodychange",
    "a2d8936fae3eb0e3873c7f7c0233344c81436404": "Ybodychange",
    "168bc14ff5e9e664863c3b1146f2a5b7a30ffb42": "Ybodychange",
    "3924ff1e4a236d68a0b5448d185537d90ca04419": "Ybodychange",
    "6a6ea480bae01f40f9795218ac911bb7de18d34a": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a28ca5764c6836f267b011d95fd00d0ec9a6adbe": {
      "type": "Ybodychange",
      "commitMessage": "\nAttempt #2 - This time with all strings marked as quoted.\n-Convert goog.object.create() calls into object literals when possible.\n\nR\u003dnicksantos\nDELTA\u003d199  (199 added, 0 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1632\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1041 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/27/11, 9:59 AM",
      "commitName": "a28ca5764c6836f267b011d95fd00d0ec9a6adbe",
      "commitAuthor": "agrieve@google.com",
      "commitDateOld": "4/27/11, 7:25 AM",
      "commitNameOld": "fdccd7dd83594a58a6943d6dbc53531024a4d708",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.11,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getOptimizations() {\n    List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n    if (options.runtimeTypeCheck) {\n        passes.add(runtimeTypeCheck);\n    }\n    passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n    if (!options.idGenerators.isEmpty()) {\n        passes.add(replaceIdGenerators);\n    }\n    if (options.optimizeArgumentsArray) {\n        passes.add(optimizeArgumentsArray);\n    }\n    if (options.closurePass \u0026\u0026 (options.removeAbstractMethods || options.removeClosureAsserts)) {\n        passes.add(closureCodeRemoval);\n    }\n    if (options.collapseProperties) {\n        passes.add(collapseProperties);\n    }\n    if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n        passes.add(replaceStrings);\n    }\n    if (options.tightenTypes) {\n        passes.add(tightenTypesBuilder);\n    }\n    if (options.disambiguateProperties) {\n        passes.add(disambiguateProperties);\n    }\n    if (options.computeFunctionSideEffects) {\n        passes.add(markPureFunctions);\n    } else if (options.markNoSideEffectCalls) {\n        passes.add(markNoSideEffectCalls);\n    }\n    if (options.chainCalls) {\n        passes.add(chainCalls);\n    }\n    if (options.inlineConstantVars) {\n        passes.add(checkConsts);\n    }\n    if (options.ignoreCajaProperties) {\n        passes.add(ignoreCajaProperties);\n    }\n    assertAllOneTimePasses(passes);\n    if (options.smartNameRemoval || options.reportPath !\u003d null) {\n        passes.addAll(getCodeRemovingPasses());\n        passes.add(smartNamePass);\n    }\n    if (options.closurePass) {\n        passes.add(closureOptimizePrimitives);\n    }\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.devirtualizePrototypeMethods) {\n        passes.add(devirtualizePrototypeMethods);\n    }\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n    }\n    passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n    if (options.specializeInitialModule) {\n        passes.addAll(getMainOptimizationLoop());\n        if (options.crossModuleCodeMotion) {\n            passes.add(crossModuleCodeMotion);\n        }\n        if (options.crossModuleMethodMotion) {\n            passes.add(crossModuleMethodMotion);\n        }\n        passes.add(specializeInitialModule.makeOneTimePass());\n    }\n    passes.addAll(getMainOptimizationLoop());\n    passes.add(createEmptyPass(\"beforeModuleMotion\"));\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.crossModuleMethodMotion) {\n        passes.add(crossModuleMethodMotion);\n    }\n    passes.add(createEmptyPass(\"afterModuleMotion\"));\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n    }\n    if (options.flowSensitiveInlineVariables) {\n        passes.add(flowSensitiveInlineVariables);\n        if (options.removeUnusedVars) {\n            passes.add(removeUnusedVars);\n        }\n    }\n    if (options.smartNameRemoval) {\n        passes.add(smartNamePass2);\n    }\n    if (options.collapseAnonymousFunctions) {\n        passes.add(collapseAnonymousFunctions);\n    }\n    if (options.moveFunctionDeclarations) {\n        passes.add(moveFunctionDeclarations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n        passes.add(nameMappedAnonymousFunctions);\n    }\n    if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n        passes.add(extractPrototypeMemberDeclarations);\n    }\n    if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n        passes.add(ambiguateProperties);\n    }\n    if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n        passes.add(renameProperties);\n    }\n    if (options.reserveRawExports) {\n        passes.add(gatherRawExports);\n    }\n    if (options.convertToDottedProperties) {\n        passes.add(convertToDottedProperties);\n    }\n    if (options.rewriteFunctionExpressions) {\n        passes.add(rewriteFunctionExpressions);\n    }\n    if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n        passes.add(aliasStrings);\n    }\n    if (options.aliasExternals) {\n        passes.add(aliasExternals);\n    }\n    if (options.aliasKeywords) {\n        passes.add(aliasKeywords);\n    }\n    passes.add(markUnnormalized);\n    if (options.coalesceVariableNames) {\n        passes.add(coalesceVariableNames);\n        if (options.foldConstants) {\n            passes.add(peepholeOptimizations);\n        }\n    }\n    if (options.collapseVariableDeclarations) {\n        passes.add(exploitAssign);\n        passes.add(collapseVariableDeclarations);\n    }\n    passes.add(denormalize);\n    if (options.instrumentationTemplate !\u003d null) {\n        passes.add(instrumentFunctions);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n        passes.add(invertContextualRenaming);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n        passes.add(renameVars);\n    }\n    if (options.groupVariableDeclarations) {\n        passes.add(groupVariableDeclarations);\n    }\n    if (options.processObjectPropertyString) {\n        passes.add(objectPropertyStringPostprocess);\n    }\n    if (options.labelRenaming) {\n        passes.add(renameLabels);\n    }\n    if (options.foldConstants) {\n        passes.add(latePeepholeOptimizations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n        passes.add(nameUnmappedAnonymousFunctions);\n    }\n    if (options.operaCompoundAssignFix) {\n        passes.add(operaCompoundAssignFix);\n    }\n    passes.add(sanityCheckAst);\n    passes.add(sanityCheckVars);\n    return passes;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 319,
      "functionName": "getOptimizations",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,167 +1,170 @@\n @Override\n protected List\u003cPassFactory\u003e getOptimizations() {\n     List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n     if (options.runtimeTypeCheck) {\n         passes.add(runtimeTypeCheck);\n     }\n     passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n     if (!options.idGenerators.isEmpty()) {\n         passes.add(replaceIdGenerators);\n     }\n     if (options.optimizeArgumentsArray) {\n         passes.add(optimizeArgumentsArray);\n     }\n     if (options.closurePass \u0026\u0026 (options.removeAbstractMethods || options.removeClosureAsserts)) {\n         passes.add(closureCodeRemoval);\n     }\n     if (options.collapseProperties) {\n         passes.add(collapseProperties);\n     }\n     if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n         passes.add(replaceStrings);\n     }\n     if (options.tightenTypes) {\n         passes.add(tightenTypesBuilder);\n     }\n     if (options.disambiguateProperties) {\n         passes.add(disambiguateProperties);\n     }\n     if (options.computeFunctionSideEffects) {\n         passes.add(markPureFunctions);\n     } else if (options.markNoSideEffectCalls) {\n         passes.add(markNoSideEffectCalls);\n     }\n     if (options.chainCalls) {\n         passes.add(chainCalls);\n     }\n     if (options.inlineConstantVars) {\n         passes.add(checkConsts);\n     }\n     if (options.ignoreCajaProperties) {\n         passes.add(ignoreCajaProperties);\n     }\n     assertAllOneTimePasses(passes);\n     if (options.smartNameRemoval || options.reportPath !\u003d null) {\n         passes.addAll(getCodeRemovingPasses());\n         passes.add(smartNamePass);\n     }\n+    if (options.closurePass) {\n+        passes.add(closureOptimizePrimitives);\n+    }\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.devirtualizePrototypeMethods) {\n         passes.add(devirtualizePrototypeMethods);\n     }\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n     }\n     passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n     if (options.specializeInitialModule) {\n         passes.addAll(getMainOptimizationLoop());\n         if (options.crossModuleCodeMotion) {\n             passes.add(crossModuleCodeMotion);\n         }\n         if (options.crossModuleMethodMotion) {\n             passes.add(crossModuleMethodMotion);\n         }\n         passes.add(specializeInitialModule.makeOneTimePass());\n     }\n     passes.addAll(getMainOptimizationLoop());\n     passes.add(createEmptyPass(\"beforeModuleMotion\"));\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.crossModuleMethodMotion) {\n         passes.add(crossModuleMethodMotion);\n     }\n     passes.add(createEmptyPass(\"afterModuleMotion\"));\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n     }\n     if (options.flowSensitiveInlineVariables) {\n         passes.add(flowSensitiveInlineVariables);\n         if (options.removeUnusedVars) {\n             passes.add(removeUnusedVars);\n         }\n     }\n     if (options.smartNameRemoval) {\n         passes.add(smartNamePass2);\n     }\n     if (options.collapseAnonymousFunctions) {\n         passes.add(collapseAnonymousFunctions);\n     }\n     if (options.moveFunctionDeclarations) {\n         passes.add(moveFunctionDeclarations);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n         passes.add(nameMappedAnonymousFunctions);\n     }\n     if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n         passes.add(extractPrototypeMemberDeclarations);\n     }\n     if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n         passes.add(ambiguateProperties);\n     }\n     if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n         passes.add(renameProperties);\n     }\n     if (options.reserveRawExports) {\n         passes.add(gatherRawExports);\n     }\n     if (options.convertToDottedProperties) {\n         passes.add(convertToDottedProperties);\n     }\n     if (options.rewriteFunctionExpressions) {\n         passes.add(rewriteFunctionExpressions);\n     }\n     if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n         passes.add(aliasStrings);\n     }\n     if (options.aliasExternals) {\n         passes.add(aliasExternals);\n     }\n     if (options.aliasKeywords) {\n         passes.add(aliasKeywords);\n     }\n     passes.add(markUnnormalized);\n     if (options.coalesceVariableNames) {\n         passes.add(coalesceVariableNames);\n         if (options.foldConstants) {\n             passes.add(peepholeOptimizations);\n         }\n     }\n     if (options.collapseVariableDeclarations) {\n         passes.add(exploitAssign);\n         passes.add(collapseVariableDeclarations);\n     }\n     passes.add(denormalize);\n     if (options.instrumentationTemplate !\u003d null) {\n         passes.add(instrumentFunctions);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n         passes.add(invertContextualRenaming);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n         passes.add(renameVars);\n     }\n     if (options.groupVariableDeclarations) {\n         passes.add(groupVariableDeclarations);\n     }\n     if (options.processObjectPropertyString) {\n         passes.add(objectPropertyStringPostprocess);\n     }\n     if (options.labelRenaming) {\n         passes.add(renameLabels);\n     }\n     if (options.foldConstants) {\n         passes.add(latePeepholeOptimizations);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n         passes.add(nameUnmappedAnonymousFunctions);\n     }\n     if (options.operaCompoundAssignFix) {\n         passes.add(operaCompoundAssignFix);\n     }\n     passes.add(sanityCheckAst);\n     passes.add(sanityCheckVars);\n     return passes;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "fdccd7dd83594a58a6943d6dbc53531024a4d708": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\n\u003center reason for rollback\u003e\n\n*** Original change description ***\n\n-Convert goog.object.create() calls into object literals when possible.\n\nR\u003dagrieve\nDELTA\u003d199  (0 added, 199 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1631\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1040 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/27/11, 7:25 AM",
      "commitName": "fdccd7dd83594a58a6943d6dbc53531024a4d708",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "4/26/11, 8:51 AM",
      "commitNameOld": "38405b88fee5511d1b50bc24339a295cbc91613f",
      "commitAuthorOld": "agrieve@google.com",
      "daysBetweenCommits": 0.94,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getOptimizations() {\n    List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n    if (options.runtimeTypeCheck) {\n        passes.add(runtimeTypeCheck);\n    }\n    passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n    if (!options.idGenerators.isEmpty()) {\n        passes.add(replaceIdGenerators);\n    }\n    if (options.optimizeArgumentsArray) {\n        passes.add(optimizeArgumentsArray);\n    }\n    if (options.closurePass \u0026\u0026 (options.removeAbstractMethods || options.removeClosureAsserts)) {\n        passes.add(closureCodeRemoval);\n    }\n    if (options.collapseProperties) {\n        passes.add(collapseProperties);\n    }\n    if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n        passes.add(replaceStrings);\n    }\n    if (options.tightenTypes) {\n        passes.add(tightenTypesBuilder);\n    }\n    if (options.disambiguateProperties) {\n        passes.add(disambiguateProperties);\n    }\n    if (options.computeFunctionSideEffects) {\n        passes.add(markPureFunctions);\n    } else if (options.markNoSideEffectCalls) {\n        passes.add(markNoSideEffectCalls);\n    }\n    if (options.chainCalls) {\n        passes.add(chainCalls);\n    }\n    if (options.inlineConstantVars) {\n        passes.add(checkConsts);\n    }\n    if (options.ignoreCajaProperties) {\n        passes.add(ignoreCajaProperties);\n    }\n    assertAllOneTimePasses(passes);\n    if (options.smartNameRemoval || options.reportPath !\u003d null) {\n        passes.addAll(getCodeRemovingPasses());\n        passes.add(smartNamePass);\n    }\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.devirtualizePrototypeMethods) {\n        passes.add(devirtualizePrototypeMethods);\n    }\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n    }\n    passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n    if (options.specializeInitialModule) {\n        passes.addAll(getMainOptimizationLoop());\n        if (options.crossModuleCodeMotion) {\n            passes.add(crossModuleCodeMotion);\n        }\n        if (options.crossModuleMethodMotion) {\n            passes.add(crossModuleMethodMotion);\n        }\n        passes.add(specializeInitialModule.makeOneTimePass());\n    }\n    passes.addAll(getMainOptimizationLoop());\n    passes.add(createEmptyPass(\"beforeModuleMotion\"));\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.crossModuleMethodMotion) {\n        passes.add(crossModuleMethodMotion);\n    }\n    passes.add(createEmptyPass(\"afterModuleMotion\"));\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n    }\n    if (options.flowSensitiveInlineVariables) {\n        passes.add(flowSensitiveInlineVariables);\n        if (options.removeUnusedVars) {\n            passes.add(removeUnusedVars);\n        }\n    }\n    if (options.smartNameRemoval) {\n        passes.add(smartNamePass2);\n    }\n    if (options.collapseAnonymousFunctions) {\n        passes.add(collapseAnonymousFunctions);\n    }\n    if (options.moveFunctionDeclarations) {\n        passes.add(moveFunctionDeclarations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n        passes.add(nameMappedAnonymousFunctions);\n    }\n    if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n        passes.add(extractPrototypeMemberDeclarations);\n    }\n    if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n        passes.add(ambiguateProperties);\n    }\n    if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n        passes.add(renameProperties);\n    }\n    if (options.reserveRawExports) {\n        passes.add(gatherRawExports);\n    }\n    if (options.convertToDottedProperties) {\n        passes.add(convertToDottedProperties);\n    }\n    if (options.rewriteFunctionExpressions) {\n        passes.add(rewriteFunctionExpressions);\n    }\n    if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n        passes.add(aliasStrings);\n    }\n    if (options.aliasExternals) {\n        passes.add(aliasExternals);\n    }\n    if (options.aliasKeywords) {\n        passes.add(aliasKeywords);\n    }\n    passes.add(markUnnormalized);\n    if (options.coalesceVariableNames) {\n        passes.add(coalesceVariableNames);\n        if (options.foldConstants) {\n            passes.add(peepholeOptimizations);\n        }\n    }\n    if (options.collapseVariableDeclarations) {\n        passes.add(exploitAssign);\n        passes.add(collapseVariableDeclarations);\n    }\n    passes.add(denormalize);\n    if (options.instrumentationTemplate !\u003d null) {\n        passes.add(instrumentFunctions);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n        passes.add(invertContextualRenaming);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n        passes.add(renameVars);\n    }\n    if (options.groupVariableDeclarations) {\n        passes.add(groupVariableDeclarations);\n    }\n    if (options.processObjectPropertyString) {\n        passes.add(objectPropertyStringPostprocess);\n    }\n    if (options.labelRenaming) {\n        passes.add(renameLabels);\n    }\n    if (options.foldConstants) {\n        passes.add(latePeepholeOptimizations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n        passes.add(nameUnmappedAnonymousFunctions);\n    }\n    if (options.operaCompoundAssignFix) {\n        passes.add(operaCompoundAssignFix);\n    }\n    passes.add(sanityCheckAst);\n    passes.add(sanityCheckVars);\n    return passes;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 319,
      "functionName": "getOptimizations",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,170 +1,167 @@\n @Override\n protected List\u003cPassFactory\u003e getOptimizations() {\n     List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n     if (options.runtimeTypeCheck) {\n         passes.add(runtimeTypeCheck);\n     }\n     passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n     if (!options.idGenerators.isEmpty()) {\n         passes.add(replaceIdGenerators);\n     }\n     if (options.optimizeArgumentsArray) {\n         passes.add(optimizeArgumentsArray);\n     }\n     if (options.closurePass \u0026\u0026 (options.removeAbstractMethods || options.removeClosureAsserts)) {\n         passes.add(closureCodeRemoval);\n     }\n     if (options.collapseProperties) {\n         passes.add(collapseProperties);\n     }\n     if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n         passes.add(replaceStrings);\n     }\n     if (options.tightenTypes) {\n         passes.add(tightenTypesBuilder);\n     }\n     if (options.disambiguateProperties) {\n         passes.add(disambiguateProperties);\n     }\n     if (options.computeFunctionSideEffects) {\n         passes.add(markPureFunctions);\n     } else if (options.markNoSideEffectCalls) {\n         passes.add(markNoSideEffectCalls);\n     }\n     if (options.chainCalls) {\n         passes.add(chainCalls);\n     }\n     if (options.inlineConstantVars) {\n         passes.add(checkConsts);\n     }\n     if (options.ignoreCajaProperties) {\n         passes.add(ignoreCajaProperties);\n     }\n     assertAllOneTimePasses(passes);\n     if (options.smartNameRemoval || options.reportPath !\u003d null) {\n         passes.addAll(getCodeRemovingPasses());\n         passes.add(smartNamePass);\n     }\n-    if (options.closurePass) {\n-        passes.add(closureOptimizePrimitives);\n-    }\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.devirtualizePrototypeMethods) {\n         passes.add(devirtualizePrototypeMethods);\n     }\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n     }\n     passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n     if (options.specializeInitialModule) {\n         passes.addAll(getMainOptimizationLoop());\n         if (options.crossModuleCodeMotion) {\n             passes.add(crossModuleCodeMotion);\n         }\n         if (options.crossModuleMethodMotion) {\n             passes.add(crossModuleMethodMotion);\n         }\n         passes.add(specializeInitialModule.makeOneTimePass());\n     }\n     passes.addAll(getMainOptimizationLoop());\n     passes.add(createEmptyPass(\"beforeModuleMotion\"));\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.crossModuleMethodMotion) {\n         passes.add(crossModuleMethodMotion);\n     }\n     passes.add(createEmptyPass(\"afterModuleMotion\"));\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n     }\n     if (options.flowSensitiveInlineVariables) {\n         passes.add(flowSensitiveInlineVariables);\n         if (options.removeUnusedVars) {\n             passes.add(removeUnusedVars);\n         }\n     }\n     if (options.smartNameRemoval) {\n         passes.add(smartNamePass2);\n     }\n     if (options.collapseAnonymousFunctions) {\n         passes.add(collapseAnonymousFunctions);\n     }\n     if (options.moveFunctionDeclarations) {\n         passes.add(moveFunctionDeclarations);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n         passes.add(nameMappedAnonymousFunctions);\n     }\n     if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n         passes.add(extractPrototypeMemberDeclarations);\n     }\n     if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n         passes.add(ambiguateProperties);\n     }\n     if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n         passes.add(renameProperties);\n     }\n     if (options.reserveRawExports) {\n         passes.add(gatherRawExports);\n     }\n     if (options.convertToDottedProperties) {\n         passes.add(convertToDottedProperties);\n     }\n     if (options.rewriteFunctionExpressions) {\n         passes.add(rewriteFunctionExpressions);\n     }\n     if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n         passes.add(aliasStrings);\n     }\n     if (options.aliasExternals) {\n         passes.add(aliasExternals);\n     }\n     if (options.aliasKeywords) {\n         passes.add(aliasKeywords);\n     }\n     passes.add(markUnnormalized);\n     if (options.coalesceVariableNames) {\n         passes.add(coalesceVariableNames);\n         if (options.foldConstants) {\n             passes.add(peepholeOptimizations);\n         }\n     }\n     if (options.collapseVariableDeclarations) {\n         passes.add(exploitAssign);\n         passes.add(collapseVariableDeclarations);\n     }\n     passes.add(denormalize);\n     if (options.instrumentationTemplate !\u003d null) {\n         passes.add(instrumentFunctions);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n         passes.add(invertContextualRenaming);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n         passes.add(renameVars);\n     }\n     if (options.groupVariableDeclarations) {\n         passes.add(groupVariableDeclarations);\n     }\n     if (options.processObjectPropertyString) {\n         passes.add(objectPropertyStringPostprocess);\n     }\n     if (options.labelRenaming) {\n         passes.add(renameLabels);\n     }\n     if (options.foldConstants) {\n         passes.add(latePeepholeOptimizations);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n         passes.add(nameUnmappedAnonymousFunctions);\n     }\n     if (options.operaCompoundAssignFix) {\n         passes.add(operaCompoundAssignFix);\n     }\n     passes.add(sanityCheckAst);\n     passes.add(sanityCheckVars);\n     return passes;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "38405b88fee5511d1b50bc24339a295cbc91613f": {
      "type": "Ybodychange",
      "commitMessage": "\n-Convert goog.object.create() calls into object literals when possible.\n\nR\u003djohnlenz\nDELTA\u003d199  (199 added, 0 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1621\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1035 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/26/11, 8:51 AM",
      "commitName": "38405b88fee5511d1b50bc24339a295cbc91613f",
      "commitAuthor": "agrieve@google.com",
      "commitDateOld": "4/26/11, 7:14 AM",
      "commitNameOld": "4d27fdcfda10b3cfbf0c87b3b6d691da5b5291a7",
      "commitAuthorOld": "davidplass@google.com",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getOptimizations() {\n    List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n    if (options.runtimeTypeCheck) {\n        passes.add(runtimeTypeCheck);\n    }\n    passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n    if (!options.idGenerators.isEmpty()) {\n        passes.add(replaceIdGenerators);\n    }\n    if (options.optimizeArgumentsArray) {\n        passes.add(optimizeArgumentsArray);\n    }\n    if (options.closurePass \u0026\u0026 (options.removeAbstractMethods || options.removeClosureAsserts)) {\n        passes.add(closureCodeRemoval);\n    }\n    if (options.collapseProperties) {\n        passes.add(collapseProperties);\n    }\n    if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n        passes.add(replaceStrings);\n    }\n    if (options.tightenTypes) {\n        passes.add(tightenTypesBuilder);\n    }\n    if (options.disambiguateProperties) {\n        passes.add(disambiguateProperties);\n    }\n    if (options.computeFunctionSideEffects) {\n        passes.add(markPureFunctions);\n    } else if (options.markNoSideEffectCalls) {\n        passes.add(markNoSideEffectCalls);\n    }\n    if (options.chainCalls) {\n        passes.add(chainCalls);\n    }\n    if (options.inlineConstantVars) {\n        passes.add(checkConsts);\n    }\n    if (options.ignoreCajaProperties) {\n        passes.add(ignoreCajaProperties);\n    }\n    assertAllOneTimePasses(passes);\n    if (options.smartNameRemoval || options.reportPath !\u003d null) {\n        passes.addAll(getCodeRemovingPasses());\n        passes.add(smartNamePass);\n    }\n    if (options.closurePass) {\n        passes.add(closureOptimizePrimitives);\n    }\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.devirtualizePrototypeMethods) {\n        passes.add(devirtualizePrototypeMethods);\n    }\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n    }\n    passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n    if (options.specializeInitialModule) {\n        passes.addAll(getMainOptimizationLoop());\n        if (options.crossModuleCodeMotion) {\n            passes.add(crossModuleCodeMotion);\n        }\n        if (options.crossModuleMethodMotion) {\n            passes.add(crossModuleMethodMotion);\n        }\n        passes.add(specializeInitialModule.makeOneTimePass());\n    }\n    passes.addAll(getMainOptimizationLoop());\n    passes.add(createEmptyPass(\"beforeModuleMotion\"));\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.crossModuleMethodMotion) {\n        passes.add(crossModuleMethodMotion);\n    }\n    passes.add(createEmptyPass(\"afterModuleMotion\"));\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n    }\n    if (options.flowSensitiveInlineVariables) {\n        passes.add(flowSensitiveInlineVariables);\n        if (options.removeUnusedVars) {\n            passes.add(removeUnusedVars);\n        }\n    }\n    if (options.smartNameRemoval) {\n        passes.add(smartNamePass2);\n    }\n    if (options.collapseAnonymousFunctions) {\n        passes.add(collapseAnonymousFunctions);\n    }\n    if (options.moveFunctionDeclarations) {\n        passes.add(moveFunctionDeclarations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n        passes.add(nameMappedAnonymousFunctions);\n    }\n    if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n        passes.add(extractPrototypeMemberDeclarations);\n    }\n    if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n        passes.add(ambiguateProperties);\n    }\n    if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n        passes.add(renameProperties);\n    }\n    if (options.reserveRawExports) {\n        passes.add(gatherRawExports);\n    }\n    if (options.convertToDottedProperties) {\n        passes.add(convertToDottedProperties);\n    }\n    if (options.rewriteFunctionExpressions) {\n        passes.add(rewriteFunctionExpressions);\n    }\n    if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n        passes.add(aliasStrings);\n    }\n    if (options.aliasExternals) {\n        passes.add(aliasExternals);\n    }\n    if (options.aliasKeywords) {\n        passes.add(aliasKeywords);\n    }\n    passes.add(markUnnormalized);\n    if (options.coalesceVariableNames) {\n        passes.add(coalesceVariableNames);\n        if (options.foldConstants) {\n            passes.add(peepholeOptimizations);\n        }\n    }\n    if (options.collapseVariableDeclarations) {\n        passes.add(exploitAssign);\n        passes.add(collapseVariableDeclarations);\n    }\n    passes.add(denormalize);\n    if (options.instrumentationTemplate !\u003d null) {\n        passes.add(instrumentFunctions);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n        passes.add(invertContextualRenaming);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n        passes.add(renameVars);\n    }\n    if (options.groupVariableDeclarations) {\n        passes.add(groupVariableDeclarations);\n    }\n    if (options.processObjectPropertyString) {\n        passes.add(objectPropertyStringPostprocess);\n    }\n    if (options.labelRenaming) {\n        passes.add(renameLabels);\n    }\n    if (options.foldConstants) {\n        passes.add(latePeepholeOptimizations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n        passes.add(nameUnmappedAnonymousFunctions);\n    }\n    if (options.operaCompoundAssignFix) {\n        passes.add(operaCompoundAssignFix);\n    }\n    passes.add(sanityCheckAst);\n    passes.add(sanityCheckVars);\n    return passes;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 319,
      "functionName": "getOptimizations",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,167 +1,170 @@\n @Override\n protected List\u003cPassFactory\u003e getOptimizations() {\n     List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n     if (options.runtimeTypeCheck) {\n         passes.add(runtimeTypeCheck);\n     }\n     passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n     if (!options.idGenerators.isEmpty()) {\n         passes.add(replaceIdGenerators);\n     }\n     if (options.optimizeArgumentsArray) {\n         passes.add(optimizeArgumentsArray);\n     }\n     if (options.closurePass \u0026\u0026 (options.removeAbstractMethods || options.removeClosureAsserts)) {\n         passes.add(closureCodeRemoval);\n     }\n     if (options.collapseProperties) {\n         passes.add(collapseProperties);\n     }\n     if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n         passes.add(replaceStrings);\n     }\n     if (options.tightenTypes) {\n         passes.add(tightenTypesBuilder);\n     }\n     if (options.disambiguateProperties) {\n         passes.add(disambiguateProperties);\n     }\n     if (options.computeFunctionSideEffects) {\n         passes.add(markPureFunctions);\n     } else if (options.markNoSideEffectCalls) {\n         passes.add(markNoSideEffectCalls);\n     }\n     if (options.chainCalls) {\n         passes.add(chainCalls);\n     }\n     if (options.inlineConstantVars) {\n         passes.add(checkConsts);\n     }\n     if (options.ignoreCajaProperties) {\n         passes.add(ignoreCajaProperties);\n     }\n     assertAllOneTimePasses(passes);\n     if (options.smartNameRemoval || options.reportPath !\u003d null) {\n         passes.addAll(getCodeRemovingPasses());\n         passes.add(smartNamePass);\n     }\n+    if (options.closurePass) {\n+        passes.add(closureOptimizePrimitives);\n+    }\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.devirtualizePrototypeMethods) {\n         passes.add(devirtualizePrototypeMethods);\n     }\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n     }\n     passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n     if (options.specializeInitialModule) {\n         passes.addAll(getMainOptimizationLoop());\n         if (options.crossModuleCodeMotion) {\n             passes.add(crossModuleCodeMotion);\n         }\n         if (options.crossModuleMethodMotion) {\n             passes.add(crossModuleMethodMotion);\n         }\n         passes.add(specializeInitialModule.makeOneTimePass());\n     }\n     passes.addAll(getMainOptimizationLoop());\n     passes.add(createEmptyPass(\"beforeModuleMotion\"));\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.crossModuleMethodMotion) {\n         passes.add(crossModuleMethodMotion);\n     }\n     passes.add(createEmptyPass(\"afterModuleMotion\"));\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n     }\n     if (options.flowSensitiveInlineVariables) {\n         passes.add(flowSensitiveInlineVariables);\n         if (options.removeUnusedVars) {\n             passes.add(removeUnusedVars);\n         }\n     }\n     if (options.smartNameRemoval) {\n         passes.add(smartNamePass2);\n     }\n     if (options.collapseAnonymousFunctions) {\n         passes.add(collapseAnonymousFunctions);\n     }\n     if (options.moveFunctionDeclarations) {\n         passes.add(moveFunctionDeclarations);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n         passes.add(nameMappedAnonymousFunctions);\n     }\n     if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n         passes.add(extractPrototypeMemberDeclarations);\n     }\n     if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n         passes.add(ambiguateProperties);\n     }\n     if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n         passes.add(renameProperties);\n     }\n     if (options.reserveRawExports) {\n         passes.add(gatherRawExports);\n     }\n     if (options.convertToDottedProperties) {\n         passes.add(convertToDottedProperties);\n     }\n     if (options.rewriteFunctionExpressions) {\n         passes.add(rewriteFunctionExpressions);\n     }\n     if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n         passes.add(aliasStrings);\n     }\n     if (options.aliasExternals) {\n         passes.add(aliasExternals);\n     }\n     if (options.aliasKeywords) {\n         passes.add(aliasKeywords);\n     }\n     passes.add(markUnnormalized);\n     if (options.coalesceVariableNames) {\n         passes.add(coalesceVariableNames);\n         if (options.foldConstants) {\n             passes.add(peepholeOptimizations);\n         }\n     }\n     if (options.collapseVariableDeclarations) {\n         passes.add(exploitAssign);\n         passes.add(collapseVariableDeclarations);\n     }\n     passes.add(denormalize);\n     if (options.instrumentationTemplate !\u003d null) {\n         passes.add(instrumentFunctions);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n         passes.add(invertContextualRenaming);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n         passes.add(renameVars);\n     }\n     if (options.groupVariableDeclarations) {\n         passes.add(groupVariableDeclarations);\n     }\n     if (options.processObjectPropertyString) {\n         passes.add(objectPropertyStringPostprocess);\n     }\n     if (options.labelRenaming) {\n         passes.add(renameLabels);\n     }\n     if (options.foldConstants) {\n         passes.add(latePeepholeOptimizations);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n         passes.add(nameUnmappedAnonymousFunctions);\n     }\n     if (options.operaCompoundAssignFix) {\n         passes.add(operaCompoundAssignFix);\n     }\n     passes.add(sanityCheckAst);\n     passes.add(sanityCheckVars);\n     return passes;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "760bded3242093d86611a82e81fdca302a1487f1": {
      "type": "Ybodychange",
      "commitMessage": "\nnow that we create synthetic vars, always run the variable\nsanity check. this is always a real problem\n\nR\u003dacleung\nDELTA\u003d30  (26 added, 2 deleted, 2 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1488\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1013 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/14/11, 5:22 PM",
      "commitName": "760bded3242093d86611a82e81fdca302a1487f1",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "4/14/11, 1:27 PM",
      "commitNameOld": "5818d174d5f45189cb705071ddf35fc012ada891",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 0.16,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getOptimizations() {\n    List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n    if (options.runtimeTypeCheck) {\n        passes.add(runtimeTypeCheck);\n    }\n    passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n    if (!options.idGenerators.isEmpty()) {\n        passes.add(replaceIdGenerators);\n    }\n    if (options.optimizeArgumentsArray) {\n        passes.add(optimizeArgumentsArray);\n    }\n    if (options.closurePass \u0026\u0026 (options.removeAbstractMethods || options.removeClosureAsserts)) {\n        passes.add(closureCodeRemoval);\n    }\n    if (options.collapseProperties) {\n        passes.add(collapseProperties);\n    }\n    if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n        passes.add(replaceStrings);\n    }\n    if (options.tightenTypes) {\n        passes.add(tightenTypesBuilder);\n    }\n    if (options.disambiguateProperties) {\n        passes.add(disambiguateProperties);\n    }\n    if (options.computeFunctionSideEffects) {\n        passes.add(markPureFunctions);\n    } else if (options.markNoSideEffectCalls) {\n        passes.add(markNoSideEffectCalls);\n    }\n    if (options.chainCalls) {\n        passes.add(chainCalls);\n    }\n    if (options.inlineConstantVars) {\n        passes.add(checkConsts);\n    }\n    if (options.ignoreCajaProperties) {\n        passes.add(ignoreCajaProperties);\n    }\n    assertAllOneTimePasses(passes);\n    if (options.smartNameRemoval || options.reportPath !\u003d null) {\n        passes.addAll(getCodeRemovingPasses());\n        passes.add(smartNamePass);\n    }\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.devirtualizePrototypeMethods) {\n        passes.add(devirtualizePrototypeMethods);\n    }\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n    }\n    passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n    if (options.specializeInitialModule) {\n        passes.addAll(getMainOptimizationLoop());\n        if (options.crossModuleCodeMotion) {\n            passes.add(crossModuleCodeMotion);\n        }\n        if (options.crossModuleMethodMotion) {\n            passes.add(crossModuleMethodMotion);\n        }\n        passes.add(specializeInitialModule.makeOneTimePass());\n    }\n    passes.addAll(getMainOptimizationLoop());\n    passes.add(createEmptyPass(\"beforeModuleMotion\"));\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.crossModuleMethodMotion) {\n        passes.add(crossModuleMethodMotion);\n    }\n    passes.add(createEmptyPass(\"afterModuleMotion\"));\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n    }\n    if (options.flowSensitiveInlineVariables) {\n        passes.add(flowSensitiveInlineVariables);\n        if (options.removeUnusedVars) {\n            passes.add(removeUnusedVars);\n        }\n    }\n    if (options.smartNameRemoval) {\n        passes.add(smartNamePass2);\n    }\n    if (options.collapseAnonymousFunctions) {\n        passes.add(collapseAnonymousFunctions);\n    }\n    if (options.moveFunctionDeclarations) {\n        passes.add(moveFunctionDeclarations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n        passes.add(nameMappedAnonymousFunctions);\n    }\n    if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n        passes.add(extractPrototypeMemberDeclarations);\n    }\n    if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n        passes.add(ambiguateProperties);\n    }\n    if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n        passes.add(renameProperties);\n    }\n    if (options.reserveRawExports) {\n        passes.add(gatherRawExports);\n    }\n    if (options.convertToDottedProperties) {\n        passes.add(convertToDottedProperties);\n    }\n    if (options.rewriteFunctionExpressions) {\n        passes.add(rewriteFunctionExpressions);\n    }\n    if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n        passes.add(aliasStrings);\n    }\n    if (options.aliasExternals) {\n        passes.add(aliasExternals);\n    }\n    if (options.aliasKeywords) {\n        passes.add(aliasKeywords);\n    }\n    passes.add(markUnnormalized);\n    if (options.coalesceVariableNames) {\n        passes.add(coalesceVariableNames);\n        if (options.foldConstants) {\n            passes.add(peepholeOptimizations);\n        }\n    }\n    if (options.collapseVariableDeclarations) {\n        passes.add(exploitAssign);\n        passes.add(collapseVariableDeclarations);\n    }\n    passes.add(denormalize);\n    if (options.instrumentationTemplate !\u003d null) {\n        passes.add(instrumentFunctions);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n        passes.add(invertContextualRenaming);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n        passes.add(renameVars);\n    }\n    if (options.groupVariableDeclarations) {\n        passes.add(groupVariableDeclarations);\n    }\n    if (options.processObjectPropertyString) {\n        passes.add(objectPropertyStringPostprocess);\n    }\n    if (options.labelRenaming) {\n        passes.add(renameLabels);\n    }\n    if (options.foldConstants) {\n        passes.add(latePeepholeOptimizations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n        passes.add(nameUnmappedAnonymousFunctions);\n    }\n    if (options.operaCompoundAssignFix) {\n        passes.add(operaCompoundAssignFix);\n    }\n    passes.add(sanityCheckAst);\n    passes.add(sanityCheckVars);\n    return passes;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 315,
      "functionName": "getOptimizations",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,169 +1,167 @@\n @Override\n protected List\u003cPassFactory\u003e getOptimizations() {\n     List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n     if (options.runtimeTypeCheck) {\n         passes.add(runtimeTypeCheck);\n     }\n     passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n     if (!options.idGenerators.isEmpty()) {\n         passes.add(replaceIdGenerators);\n     }\n     if (options.optimizeArgumentsArray) {\n         passes.add(optimizeArgumentsArray);\n     }\n     if (options.closurePass \u0026\u0026 (options.removeAbstractMethods || options.removeClosureAsserts)) {\n         passes.add(closureCodeRemoval);\n     }\n     if (options.collapseProperties) {\n         passes.add(collapseProperties);\n     }\n     if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n         passes.add(replaceStrings);\n     }\n     if (options.tightenTypes) {\n         passes.add(tightenTypesBuilder);\n     }\n     if (options.disambiguateProperties) {\n         passes.add(disambiguateProperties);\n     }\n     if (options.computeFunctionSideEffects) {\n         passes.add(markPureFunctions);\n     } else if (options.markNoSideEffectCalls) {\n         passes.add(markNoSideEffectCalls);\n     }\n     if (options.chainCalls) {\n         passes.add(chainCalls);\n     }\n     if (options.inlineConstantVars) {\n         passes.add(checkConsts);\n     }\n     if (options.ignoreCajaProperties) {\n         passes.add(ignoreCajaProperties);\n     }\n     assertAllOneTimePasses(passes);\n     if (options.smartNameRemoval || options.reportPath !\u003d null) {\n         passes.addAll(getCodeRemovingPasses());\n         passes.add(smartNamePass);\n     }\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.devirtualizePrototypeMethods) {\n         passes.add(devirtualizePrototypeMethods);\n     }\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n     }\n     passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n     if (options.specializeInitialModule) {\n         passes.addAll(getMainOptimizationLoop());\n         if (options.crossModuleCodeMotion) {\n             passes.add(crossModuleCodeMotion);\n         }\n         if (options.crossModuleMethodMotion) {\n             passes.add(crossModuleMethodMotion);\n         }\n         passes.add(specializeInitialModule.makeOneTimePass());\n     }\n     passes.addAll(getMainOptimizationLoop());\n     passes.add(createEmptyPass(\"beforeModuleMotion\"));\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.crossModuleMethodMotion) {\n         passes.add(crossModuleMethodMotion);\n     }\n     passes.add(createEmptyPass(\"afterModuleMotion\"));\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n     }\n     if (options.flowSensitiveInlineVariables) {\n         passes.add(flowSensitiveInlineVariables);\n         if (options.removeUnusedVars) {\n             passes.add(removeUnusedVars);\n         }\n     }\n     if (options.smartNameRemoval) {\n         passes.add(smartNamePass2);\n     }\n     if (options.collapseAnonymousFunctions) {\n         passes.add(collapseAnonymousFunctions);\n     }\n     if (options.moveFunctionDeclarations) {\n         passes.add(moveFunctionDeclarations);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n         passes.add(nameMappedAnonymousFunctions);\n     }\n     if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n         passes.add(extractPrototypeMemberDeclarations);\n     }\n     if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n         passes.add(ambiguateProperties);\n     }\n     if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n         passes.add(renameProperties);\n     }\n     if (options.reserveRawExports) {\n         passes.add(gatherRawExports);\n     }\n     if (options.convertToDottedProperties) {\n         passes.add(convertToDottedProperties);\n     }\n     if (options.rewriteFunctionExpressions) {\n         passes.add(rewriteFunctionExpressions);\n     }\n     if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n         passes.add(aliasStrings);\n     }\n     if (options.aliasExternals) {\n         passes.add(aliasExternals);\n     }\n     if (options.aliasKeywords) {\n         passes.add(aliasKeywords);\n     }\n     passes.add(markUnnormalized);\n     if (options.coalesceVariableNames) {\n         passes.add(coalesceVariableNames);\n         if (options.foldConstants) {\n             passes.add(peepholeOptimizations);\n         }\n     }\n     if (options.collapseVariableDeclarations) {\n         passes.add(exploitAssign);\n         passes.add(collapseVariableDeclarations);\n     }\n     passes.add(denormalize);\n     if (options.instrumentationTemplate !\u003d null) {\n         passes.add(instrumentFunctions);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n         passes.add(invertContextualRenaming);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n         passes.add(renameVars);\n     }\n     if (options.groupVariableDeclarations) {\n         passes.add(groupVariableDeclarations);\n     }\n     if (options.processObjectPropertyString) {\n         passes.add(objectPropertyStringPostprocess);\n     }\n     if (options.labelRenaming) {\n         passes.add(renameLabels);\n     }\n     if (options.foldConstants) {\n         passes.add(latePeepholeOptimizations);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n         passes.add(nameUnmappedAnonymousFunctions);\n     }\n     if (options.operaCompoundAssignFix) {\n         passes.add(operaCompoundAssignFix);\n     }\n     passes.add(sanityCheckAst);\n-    if (options.checkSymbols) {\n-        passes.add(sanityCheckVars);\n-    }\n+    passes.add(sanityCheckVars);\n     return passes;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5818d174d5f45189cb705071ddf35fc012ada891": {
      "type": "Ybodychange",
      "commitMessage": "\nAlways do an AST validation sanity check.\n\nR\u003dacleung\nDELTA\u003d11  (10 added, 0 deleted, 1 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1487\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1012 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/14/11, 1:27 PM",
      "commitName": "5818d174d5f45189cb705071ddf35fc012ada891",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "4/12/11, 12:15 PM",
      "commitNameOld": "f322be0e576d5e2114cb59c0a6537197997b9c59",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 2.05,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getOptimizations() {\n    List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n    if (options.runtimeTypeCheck) {\n        passes.add(runtimeTypeCheck);\n    }\n    passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n    if (!options.idGenerators.isEmpty()) {\n        passes.add(replaceIdGenerators);\n    }\n    if (options.optimizeArgumentsArray) {\n        passes.add(optimizeArgumentsArray);\n    }\n    if (options.closurePass \u0026\u0026 (options.removeAbstractMethods || options.removeClosureAsserts)) {\n        passes.add(closureCodeRemoval);\n    }\n    if (options.collapseProperties) {\n        passes.add(collapseProperties);\n    }\n    if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n        passes.add(replaceStrings);\n    }\n    if (options.tightenTypes) {\n        passes.add(tightenTypesBuilder);\n    }\n    if (options.disambiguateProperties) {\n        passes.add(disambiguateProperties);\n    }\n    if (options.computeFunctionSideEffects) {\n        passes.add(markPureFunctions);\n    } else if (options.markNoSideEffectCalls) {\n        passes.add(markNoSideEffectCalls);\n    }\n    if (options.chainCalls) {\n        passes.add(chainCalls);\n    }\n    if (options.inlineConstantVars) {\n        passes.add(checkConsts);\n    }\n    if (options.ignoreCajaProperties) {\n        passes.add(ignoreCajaProperties);\n    }\n    assertAllOneTimePasses(passes);\n    if (options.smartNameRemoval || options.reportPath !\u003d null) {\n        passes.addAll(getCodeRemovingPasses());\n        passes.add(smartNamePass);\n    }\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.devirtualizePrototypeMethods) {\n        passes.add(devirtualizePrototypeMethods);\n    }\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n    }\n    passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n    if (options.specializeInitialModule) {\n        passes.addAll(getMainOptimizationLoop());\n        if (options.crossModuleCodeMotion) {\n            passes.add(crossModuleCodeMotion);\n        }\n        if (options.crossModuleMethodMotion) {\n            passes.add(crossModuleMethodMotion);\n        }\n        passes.add(specializeInitialModule.makeOneTimePass());\n    }\n    passes.addAll(getMainOptimizationLoop());\n    passes.add(createEmptyPass(\"beforeModuleMotion\"));\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.crossModuleMethodMotion) {\n        passes.add(crossModuleMethodMotion);\n    }\n    passes.add(createEmptyPass(\"afterModuleMotion\"));\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n    }\n    if (options.flowSensitiveInlineVariables) {\n        passes.add(flowSensitiveInlineVariables);\n        if (options.removeUnusedVars) {\n            passes.add(removeUnusedVars);\n        }\n    }\n    if (options.smartNameRemoval) {\n        passes.add(smartNamePass2);\n    }\n    if (options.collapseAnonymousFunctions) {\n        passes.add(collapseAnonymousFunctions);\n    }\n    if (options.moveFunctionDeclarations) {\n        passes.add(moveFunctionDeclarations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n        passes.add(nameMappedAnonymousFunctions);\n    }\n    if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n        passes.add(extractPrototypeMemberDeclarations);\n    }\n    if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n        passes.add(ambiguateProperties);\n    }\n    if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n        passes.add(renameProperties);\n    }\n    if (options.reserveRawExports) {\n        passes.add(gatherRawExports);\n    }\n    if (options.convertToDottedProperties) {\n        passes.add(convertToDottedProperties);\n    }\n    if (options.rewriteFunctionExpressions) {\n        passes.add(rewriteFunctionExpressions);\n    }\n    if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n        passes.add(aliasStrings);\n    }\n    if (options.aliasExternals) {\n        passes.add(aliasExternals);\n    }\n    if (options.aliasKeywords) {\n        passes.add(aliasKeywords);\n    }\n    passes.add(markUnnormalized);\n    if (options.coalesceVariableNames) {\n        passes.add(coalesceVariableNames);\n        if (options.foldConstants) {\n            passes.add(peepholeOptimizations);\n        }\n    }\n    if (options.collapseVariableDeclarations) {\n        passes.add(exploitAssign);\n        passes.add(collapseVariableDeclarations);\n    }\n    passes.add(denormalize);\n    if (options.instrumentationTemplate !\u003d null) {\n        passes.add(instrumentFunctions);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n        passes.add(invertContextualRenaming);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n        passes.add(renameVars);\n    }\n    if (options.groupVariableDeclarations) {\n        passes.add(groupVariableDeclarations);\n    }\n    if (options.processObjectPropertyString) {\n        passes.add(objectPropertyStringPostprocess);\n    }\n    if (options.labelRenaming) {\n        passes.add(renameLabels);\n    }\n    if (options.foldConstants) {\n        passes.add(latePeepholeOptimizations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n        passes.add(nameUnmappedAnonymousFunctions);\n    }\n    if (options.operaCompoundAssignFix) {\n        passes.add(operaCompoundAssignFix);\n    }\n    passes.add(sanityCheckAst);\n    if (options.checkSymbols) {\n        passes.add(sanityCheckVars);\n    }\n    return passes;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 315,
      "functionName": "getOptimizations",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,168 +1,169 @@\n @Override\n protected List\u003cPassFactory\u003e getOptimizations() {\n     List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n     if (options.runtimeTypeCheck) {\n         passes.add(runtimeTypeCheck);\n     }\n     passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n     if (!options.idGenerators.isEmpty()) {\n         passes.add(replaceIdGenerators);\n     }\n     if (options.optimizeArgumentsArray) {\n         passes.add(optimizeArgumentsArray);\n     }\n     if (options.closurePass \u0026\u0026 (options.removeAbstractMethods || options.removeClosureAsserts)) {\n         passes.add(closureCodeRemoval);\n     }\n     if (options.collapseProperties) {\n         passes.add(collapseProperties);\n     }\n     if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n         passes.add(replaceStrings);\n     }\n     if (options.tightenTypes) {\n         passes.add(tightenTypesBuilder);\n     }\n     if (options.disambiguateProperties) {\n         passes.add(disambiguateProperties);\n     }\n     if (options.computeFunctionSideEffects) {\n         passes.add(markPureFunctions);\n     } else if (options.markNoSideEffectCalls) {\n         passes.add(markNoSideEffectCalls);\n     }\n     if (options.chainCalls) {\n         passes.add(chainCalls);\n     }\n     if (options.inlineConstantVars) {\n         passes.add(checkConsts);\n     }\n     if (options.ignoreCajaProperties) {\n         passes.add(ignoreCajaProperties);\n     }\n     assertAllOneTimePasses(passes);\n     if (options.smartNameRemoval || options.reportPath !\u003d null) {\n         passes.addAll(getCodeRemovingPasses());\n         passes.add(smartNamePass);\n     }\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.devirtualizePrototypeMethods) {\n         passes.add(devirtualizePrototypeMethods);\n     }\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n     }\n     passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n     if (options.specializeInitialModule) {\n         passes.addAll(getMainOptimizationLoop());\n         if (options.crossModuleCodeMotion) {\n             passes.add(crossModuleCodeMotion);\n         }\n         if (options.crossModuleMethodMotion) {\n             passes.add(crossModuleMethodMotion);\n         }\n         passes.add(specializeInitialModule.makeOneTimePass());\n     }\n     passes.addAll(getMainOptimizationLoop());\n     passes.add(createEmptyPass(\"beforeModuleMotion\"));\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.crossModuleMethodMotion) {\n         passes.add(crossModuleMethodMotion);\n     }\n     passes.add(createEmptyPass(\"afterModuleMotion\"));\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n     }\n     if (options.flowSensitiveInlineVariables) {\n         passes.add(flowSensitiveInlineVariables);\n         if (options.removeUnusedVars) {\n             passes.add(removeUnusedVars);\n         }\n     }\n     if (options.smartNameRemoval) {\n         passes.add(smartNamePass2);\n     }\n     if (options.collapseAnonymousFunctions) {\n         passes.add(collapseAnonymousFunctions);\n     }\n     if (options.moveFunctionDeclarations) {\n         passes.add(moveFunctionDeclarations);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n         passes.add(nameMappedAnonymousFunctions);\n     }\n     if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n         passes.add(extractPrototypeMemberDeclarations);\n     }\n     if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n         passes.add(ambiguateProperties);\n     }\n     if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n         passes.add(renameProperties);\n     }\n     if (options.reserveRawExports) {\n         passes.add(gatherRawExports);\n     }\n     if (options.convertToDottedProperties) {\n         passes.add(convertToDottedProperties);\n     }\n     if (options.rewriteFunctionExpressions) {\n         passes.add(rewriteFunctionExpressions);\n     }\n     if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n         passes.add(aliasStrings);\n     }\n     if (options.aliasExternals) {\n         passes.add(aliasExternals);\n     }\n     if (options.aliasKeywords) {\n         passes.add(aliasKeywords);\n     }\n     passes.add(markUnnormalized);\n     if (options.coalesceVariableNames) {\n         passes.add(coalesceVariableNames);\n         if (options.foldConstants) {\n             passes.add(peepholeOptimizations);\n         }\n     }\n     if (options.collapseVariableDeclarations) {\n         passes.add(exploitAssign);\n         passes.add(collapseVariableDeclarations);\n     }\n     passes.add(denormalize);\n     if (options.instrumentationTemplate !\u003d null) {\n         passes.add(instrumentFunctions);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n         passes.add(invertContextualRenaming);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n         passes.add(renameVars);\n     }\n     if (options.groupVariableDeclarations) {\n         passes.add(groupVariableDeclarations);\n     }\n     if (options.processObjectPropertyString) {\n         passes.add(objectPropertyStringPostprocess);\n     }\n     if (options.labelRenaming) {\n         passes.add(renameLabels);\n     }\n     if (options.foldConstants) {\n         passes.add(latePeepholeOptimizations);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n         passes.add(nameUnmappedAnonymousFunctions);\n     }\n     if (options.operaCompoundAssignFix) {\n         passes.add(operaCompoundAssignFix);\n     }\n+    passes.add(sanityCheckAst);\n     if (options.checkSymbols) {\n         passes.add(sanityCheckVars);\n     }\n     return passes;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bf4fc620041677d3031a326fd2c0f91352fa6e27": {
      "type": "Ybodychange",
      "commitMessage": "\nWorkaround for Opera bug.\n\nR\u003djohnlenz\nDELTA\u003d335  (328 added, 5 deleted, 2 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1226\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@959 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/1/11, 2:52 PM",
      "commitName": "bf4fc620041677d3031a326fd2c0f91352fa6e27",
      "commitAuthor": "acleung@google.com",
      "commitDateOld": "3/30/11, 7:59 AM",
      "commitNameOld": "8703ffc3c1e71d42a8a41932055a875bf428bf8d",
      "commitAuthorOld": "acleung@google.com",
      "daysBetweenCommits": 2.29,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getOptimizations() {\n    List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n    if (options.runtimeTypeCheck) {\n        passes.add(runtimeTypeCheck);\n    }\n    passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n    if (!options.idGenerators.isEmpty()) {\n        passes.add(replaceIdGenerators);\n    }\n    if (options.optimizeArgumentsArray) {\n        passes.add(optimizeArgumentsArray);\n    }\n    if (options.closurePass \u0026\u0026 (options.removeAbstractMethods || options.removeClosureAsserts)) {\n        passes.add(closureCodeRemoval);\n    }\n    if (options.collapseProperties) {\n        passes.add(collapseProperties);\n    }\n    if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n        passes.add(replaceStrings);\n    }\n    if (options.tightenTypes) {\n        passes.add(tightenTypesBuilder);\n    }\n    if (options.disambiguateProperties) {\n        passes.add(disambiguateProperties);\n    }\n    if (options.computeFunctionSideEffects) {\n        passes.add(markPureFunctions);\n    } else if (options.markNoSideEffectCalls) {\n        passes.add(markNoSideEffectCalls);\n    }\n    if (options.chainCalls) {\n        passes.add(chainCalls);\n    }\n    if (options.inlineConstantVars) {\n        passes.add(checkConsts);\n    }\n    if (options.ignoreCajaProperties) {\n        passes.add(ignoreCajaProperties);\n    }\n    assertAllOneTimePasses(passes);\n    if (options.smartNameRemoval || options.reportPath !\u003d null) {\n        passes.addAll(getCodeRemovingPasses());\n        passes.add(smartNamePass);\n    }\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.devirtualizePrototypeMethods) {\n        passes.add(devirtualizePrototypeMethods);\n    }\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n    }\n    passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n    if (options.specializeInitialModule) {\n        passes.addAll(getMainOptimizationLoop());\n        if (options.crossModuleCodeMotion) {\n            passes.add(crossModuleCodeMotion);\n        }\n        if (options.crossModuleMethodMotion) {\n            passes.add(crossModuleMethodMotion);\n        }\n        passes.add(specializeInitialModule.makeOneTimePass());\n    }\n    passes.addAll(getMainOptimizationLoop());\n    passes.add(createEmptyPass(\"beforeModuleMotion\"));\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.crossModuleMethodMotion) {\n        passes.add(crossModuleMethodMotion);\n    }\n    passes.add(createEmptyPass(\"afterModuleMotion\"));\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n    }\n    if (options.flowSensitiveInlineVariables) {\n        passes.add(flowSensitiveInlineVariables);\n        if (options.removeUnusedVars) {\n            passes.add(removeUnusedVars);\n        }\n    }\n    if (options.smartNameRemoval) {\n        passes.add(smartNamePass2);\n    }\n    if (options.collapseAnonymousFunctions) {\n        passes.add(collapseAnonymousFunctions);\n    }\n    if (options.moveFunctionDeclarations) {\n        passes.add(moveFunctionDeclarations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n        passes.add(nameMappedAnonymousFunctions);\n    }\n    if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n        passes.add(extractPrototypeMemberDeclarations);\n    }\n    if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n        passes.add(ambiguateProperties);\n    }\n    if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n        passes.add(renameProperties);\n    }\n    if (options.reserveRawExports) {\n        passes.add(gatherRawExports);\n    }\n    if (options.convertToDottedProperties) {\n        passes.add(convertToDottedProperties);\n    }\n    if (options.rewriteFunctionExpressions) {\n        passes.add(rewriteFunctionExpressions);\n    }\n    if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n        passes.add(aliasStrings);\n    }\n    if (options.aliasExternals) {\n        passes.add(aliasExternals);\n    }\n    if (options.aliasKeywords) {\n        passes.add(aliasKeywords);\n    }\n    passes.add(markUnnormalized);\n    if (options.coalesceVariableNames) {\n        passes.add(coalesceVariableNames);\n        if (options.foldConstants) {\n            passes.add(peepholeOptimizations);\n        }\n    }\n    if (options.collapseVariableDeclarations) {\n        passes.add(exploitAssign);\n        passes.add(collapseVariableDeclarations);\n    }\n    passes.add(denormalize);\n    if (options.instrumentationTemplate !\u003d null) {\n        passes.add(instrumentFunctions);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n        passes.add(invertContextualRenaming);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n        passes.add(renameVars);\n    }\n    if (options.groupVariableDeclarations) {\n        passes.add(groupVariableDeclarations);\n    }\n    if (options.processObjectPropertyString) {\n        passes.add(objectPropertyStringPostprocess);\n    }\n    if (options.labelRenaming) {\n        passes.add(renameLabels);\n    }\n    if (options.foldConstants) {\n        passes.add(latePeepholeOptimizations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n        passes.add(nameUnmappedAnonymousFunctions);\n    }\n    if (options.operaCompoundAssignFix) {\n        passes.add(operaCompoundAssignFix);\n    }\n    if (options.checkSymbols) {\n        passes.add(sanityCheckVars);\n    }\n    return passes;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 315,
      "functionName": "getOptimizations",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,165 +1,168 @@\n @Override\n protected List\u003cPassFactory\u003e getOptimizations() {\n     List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n     if (options.runtimeTypeCheck) {\n         passes.add(runtimeTypeCheck);\n     }\n     passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n     if (!options.idGenerators.isEmpty()) {\n         passes.add(replaceIdGenerators);\n     }\n     if (options.optimizeArgumentsArray) {\n         passes.add(optimizeArgumentsArray);\n     }\n     if (options.closurePass \u0026\u0026 (options.removeAbstractMethods || options.removeClosureAsserts)) {\n         passes.add(closureCodeRemoval);\n     }\n     if (options.collapseProperties) {\n         passes.add(collapseProperties);\n     }\n     if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n         passes.add(replaceStrings);\n     }\n     if (options.tightenTypes) {\n         passes.add(tightenTypesBuilder);\n     }\n     if (options.disambiguateProperties) {\n         passes.add(disambiguateProperties);\n     }\n     if (options.computeFunctionSideEffects) {\n         passes.add(markPureFunctions);\n     } else if (options.markNoSideEffectCalls) {\n         passes.add(markNoSideEffectCalls);\n     }\n     if (options.chainCalls) {\n         passes.add(chainCalls);\n     }\n     if (options.inlineConstantVars) {\n         passes.add(checkConsts);\n     }\n     if (options.ignoreCajaProperties) {\n         passes.add(ignoreCajaProperties);\n     }\n     assertAllOneTimePasses(passes);\n     if (options.smartNameRemoval || options.reportPath !\u003d null) {\n         passes.addAll(getCodeRemovingPasses());\n         passes.add(smartNamePass);\n     }\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.devirtualizePrototypeMethods) {\n         passes.add(devirtualizePrototypeMethods);\n     }\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n     }\n     passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n     if (options.specializeInitialModule) {\n         passes.addAll(getMainOptimizationLoop());\n         if (options.crossModuleCodeMotion) {\n             passes.add(crossModuleCodeMotion);\n         }\n         if (options.crossModuleMethodMotion) {\n             passes.add(crossModuleMethodMotion);\n         }\n         passes.add(specializeInitialModule.makeOneTimePass());\n     }\n     passes.addAll(getMainOptimizationLoop());\n     passes.add(createEmptyPass(\"beforeModuleMotion\"));\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.crossModuleMethodMotion) {\n         passes.add(crossModuleMethodMotion);\n     }\n     passes.add(createEmptyPass(\"afterModuleMotion\"));\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n     }\n     if (options.flowSensitiveInlineVariables) {\n         passes.add(flowSensitiveInlineVariables);\n         if (options.removeUnusedVars) {\n             passes.add(removeUnusedVars);\n         }\n     }\n     if (options.smartNameRemoval) {\n         passes.add(smartNamePass2);\n     }\n     if (options.collapseAnonymousFunctions) {\n         passes.add(collapseAnonymousFunctions);\n     }\n     if (options.moveFunctionDeclarations) {\n         passes.add(moveFunctionDeclarations);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n         passes.add(nameMappedAnonymousFunctions);\n     }\n     if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n         passes.add(extractPrototypeMemberDeclarations);\n     }\n     if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n         passes.add(ambiguateProperties);\n     }\n     if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n         passes.add(renameProperties);\n     }\n     if (options.reserveRawExports) {\n         passes.add(gatherRawExports);\n     }\n     if (options.convertToDottedProperties) {\n         passes.add(convertToDottedProperties);\n     }\n     if (options.rewriteFunctionExpressions) {\n         passes.add(rewriteFunctionExpressions);\n     }\n     if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n         passes.add(aliasStrings);\n     }\n     if (options.aliasExternals) {\n         passes.add(aliasExternals);\n     }\n     if (options.aliasKeywords) {\n         passes.add(aliasKeywords);\n     }\n     passes.add(markUnnormalized);\n     if (options.coalesceVariableNames) {\n         passes.add(coalesceVariableNames);\n         if (options.foldConstants) {\n             passes.add(peepholeOptimizations);\n         }\n     }\n     if (options.collapseVariableDeclarations) {\n         passes.add(exploitAssign);\n         passes.add(collapseVariableDeclarations);\n     }\n     passes.add(denormalize);\n     if (options.instrumentationTemplate !\u003d null) {\n         passes.add(instrumentFunctions);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n         passes.add(invertContextualRenaming);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n         passes.add(renameVars);\n     }\n     if (options.groupVariableDeclarations) {\n         passes.add(groupVariableDeclarations);\n     }\n     if (options.processObjectPropertyString) {\n         passes.add(objectPropertyStringPostprocess);\n     }\n     if (options.labelRenaming) {\n         passes.add(renameLabels);\n     }\n     if (options.foldConstants) {\n         passes.add(latePeepholeOptimizations);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n         passes.add(nameUnmappedAnonymousFunctions);\n     }\n+    if (options.operaCompoundAssignFix) {\n+        passes.add(operaCompoundAssignFix);\n+    }\n     if (options.checkSymbols) {\n         passes.add(sanityCheckVars);\n     }\n     return passes;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "10587cd1fbd6b189089444d0bd2aa24d557b480c": {
      "type": "Ybodychange",
      "commitMessage": "\nAttempt #2: jscompile_clients passes this time.\n-Turn on RemoveUnusedVars\u0027s optimizeCalls option within the main optimization loop.\n-This is required to handle call sites that propagate unused parameters.\n\nR\u003djohnlenz\nDELTA\u003d31  (16 added, 8 deleted, 7 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d886\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@894 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/16/11, 7:07 AM",
      "commitName": "10587cd1fbd6b189089444d0bd2aa24d557b480c",
      "commitAuthor": "agrieve@google.com",
      "commitDateOld": "3/15/11, 11:18 AM",
      "commitNameOld": "b7d0c1729ff32aa456727ed8c04dce277b1ebf89",
      "commitAuthorOld": "acleung@google.com",
      "daysBetweenCommits": 0.83,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getOptimizations() {\n    List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n    if (options.runtimeTypeCheck) {\n        passes.add(runtimeTypeCheck);\n    }\n    passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n    if (!options.idGenerators.isEmpty()) {\n        passes.add(replaceIdGenerators);\n    }\n    if (options.optimizeArgumentsArray) {\n        passes.add(optimizeArgumentsArray);\n    }\n    if (options.closurePass \u0026\u0026 (options.removeAbstractMethods || options.removeClosureAsserts)) {\n        passes.add(closureCodeRemoval);\n    }\n    if (options.collapseProperties) {\n        passes.add(collapseProperties);\n    }\n    if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n        passes.add(replaceStrings);\n    }\n    if (options.tightenTypes) {\n        passes.add(tightenTypesBuilder);\n    }\n    if (options.disambiguateProperties) {\n        passes.add(disambiguateProperties);\n    }\n    if (options.computeFunctionSideEffects) {\n        passes.add(markPureFunctions);\n    } else if (options.markNoSideEffectCalls) {\n        passes.add(markNoSideEffectCalls);\n    }\n    if (options.chainCalls) {\n        passes.add(chainCalls);\n    }\n    if (options.inlineConstantVars) {\n        passes.add(checkConsts);\n    }\n    if (options.ignoreCajaProperties) {\n        passes.add(ignoreCajaProperties);\n    }\n    assertAllOneTimePasses(passes);\n    if (options.smartNameRemoval || options.reportPath !\u003d null) {\n        passes.addAll(getCodeRemovingPasses());\n        passes.add(smartNamePass);\n    }\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.devirtualizePrototypeMethods) {\n        passes.add(devirtualizePrototypeMethods);\n    }\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n    }\n    passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n    if (options.specializeInitialModule) {\n        passes.addAll(getMainOptimizationLoop());\n        if (options.crossModuleCodeMotion) {\n            passes.add(crossModuleCodeMotion);\n        }\n        if (options.crossModuleMethodMotion) {\n            passes.add(crossModuleMethodMotion);\n        }\n        passes.add(specializeInitialModule.makeOneTimePass());\n    }\n    passes.addAll(getMainOptimizationLoop());\n    passes.add(createEmptyPass(\"beforeModuleMotion\"));\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.crossModuleMethodMotion) {\n        passes.add(crossModuleMethodMotion);\n    }\n    passes.add(createEmptyPass(\"afterModuleMotion\"));\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n    }\n    if (options.flowSensitiveInlineVariables) {\n        passes.add(flowSensitiveInlineVariables);\n        if (options.removeUnusedVars) {\n            passes.add(removeUnusedVars);\n        }\n    }\n    if (options.smartNameRemoval) {\n        passes.add(smartNamePass2);\n    }\n    if (options.collapseAnonymousFunctions) {\n        passes.add(collapseAnonymousFunctions);\n    }\n    if (options.moveFunctionDeclarations) {\n        passes.add(moveFunctionDeclarations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n        passes.add(nameMappedAnonymousFunctions);\n    }\n    if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n        passes.add(extractPrototypeMemberDeclarations);\n    }\n    if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n        passes.add(ambiguateProperties);\n    }\n    if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n        passes.add(renameProperties);\n    }\n    if (options.reserveRawExports) {\n        passes.add(gatherRawExports);\n    }\n    if (options.convertToDottedProperties) {\n        passes.add(convertToDottedProperties);\n    }\n    if (options.rewriteFunctionExpressions) {\n        passes.add(rewriteFunctionExpressions);\n    }\n    if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n        passes.add(aliasStrings);\n    }\n    if (options.aliasExternals) {\n        passes.add(aliasExternals);\n    }\n    if (options.aliasKeywords) {\n        passes.add(aliasKeywords);\n    }\n    passes.add(markUnnormalized);\n    if (options.coalesceVariableNames) {\n        passes.add(coalesceVariableNames);\n        if (options.foldConstants) {\n            passes.add(peepholeOptimizations);\n        }\n    }\n    if (options.collapseVariableDeclarations) {\n        passes.add(exploitAssign);\n        passes.add(collapseVariableDeclarations);\n    }\n    passes.add(denormalize);\n    if (options.instrumentationTemplate !\u003d null) {\n        passes.add(instrumentFunctions);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n        passes.add(invertContextualRenaming);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n        passes.add(renameVars);\n    }\n    if (options.groupVariableDeclarations) {\n        passes.add(groupVariableDeclarations);\n    }\n    if (options.processObjectPropertyString) {\n        passes.add(objectPropertyStringPostprocess);\n    }\n    if (options.labelRenaming) {\n        passes.add(renameLabels);\n    }\n    if (options.foldConstants) {\n        passes.add(latePeepholeOptimizations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n        passes.add(nameUnmappedAnonymousFunctions);\n    }\n    if (options.checkSymbols) {\n        passes.add(sanityCheckVars);\n    }\n    return passes;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 315,
      "functionName": "getOptimizations",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,168 +1,165 @@\n @Override\n protected List\u003cPassFactory\u003e getOptimizations() {\n     List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n     if (options.runtimeTypeCheck) {\n         passes.add(runtimeTypeCheck);\n     }\n     passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n     if (!options.idGenerators.isEmpty()) {\n         passes.add(replaceIdGenerators);\n     }\n     if (options.optimizeArgumentsArray) {\n         passes.add(optimizeArgumentsArray);\n     }\n     if (options.closurePass \u0026\u0026 (options.removeAbstractMethods || options.removeClosureAsserts)) {\n         passes.add(closureCodeRemoval);\n     }\n     if (options.collapseProperties) {\n         passes.add(collapseProperties);\n     }\n     if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n         passes.add(replaceStrings);\n     }\n     if (options.tightenTypes) {\n         passes.add(tightenTypesBuilder);\n     }\n     if (options.disambiguateProperties) {\n         passes.add(disambiguateProperties);\n     }\n     if (options.computeFunctionSideEffects) {\n         passes.add(markPureFunctions);\n     } else if (options.markNoSideEffectCalls) {\n         passes.add(markNoSideEffectCalls);\n     }\n     if (options.chainCalls) {\n         passes.add(chainCalls);\n     }\n     if (options.inlineConstantVars) {\n         passes.add(checkConsts);\n     }\n     if (options.ignoreCajaProperties) {\n         passes.add(ignoreCajaProperties);\n     }\n     assertAllOneTimePasses(passes);\n     if (options.smartNameRemoval || options.reportPath !\u003d null) {\n         passes.addAll(getCodeRemovingPasses());\n         passes.add(smartNamePass);\n     }\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.devirtualizePrototypeMethods) {\n         passes.add(devirtualizePrototypeMethods);\n     }\n-    if (options.optimizeCalls || options.optimizeParameters || options.optimizeReturns) {\n-        passes.add(optimizeCalls);\n-    }\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n     }\n     passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n     if (options.specializeInitialModule) {\n         passes.addAll(getMainOptimizationLoop());\n         if (options.crossModuleCodeMotion) {\n             passes.add(crossModuleCodeMotion);\n         }\n         if (options.crossModuleMethodMotion) {\n             passes.add(crossModuleMethodMotion);\n         }\n         passes.add(specializeInitialModule.makeOneTimePass());\n     }\n     passes.addAll(getMainOptimizationLoop());\n     passes.add(createEmptyPass(\"beforeModuleMotion\"));\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.crossModuleMethodMotion) {\n         passes.add(crossModuleMethodMotion);\n     }\n     passes.add(createEmptyPass(\"afterModuleMotion\"));\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n     }\n     if (options.flowSensitiveInlineVariables) {\n         passes.add(flowSensitiveInlineVariables);\n         if (options.removeUnusedVars) {\n             passes.add(removeUnusedVars);\n         }\n     }\n     if (options.smartNameRemoval) {\n         passes.add(smartNamePass2);\n     }\n     if (options.collapseAnonymousFunctions) {\n         passes.add(collapseAnonymousFunctions);\n     }\n     if (options.moveFunctionDeclarations) {\n         passes.add(moveFunctionDeclarations);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n         passes.add(nameMappedAnonymousFunctions);\n     }\n     if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n         passes.add(extractPrototypeMemberDeclarations);\n     }\n     if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n         passes.add(ambiguateProperties);\n     }\n     if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n         passes.add(renameProperties);\n     }\n     if (options.reserveRawExports) {\n         passes.add(gatherRawExports);\n     }\n     if (options.convertToDottedProperties) {\n         passes.add(convertToDottedProperties);\n     }\n     if (options.rewriteFunctionExpressions) {\n         passes.add(rewriteFunctionExpressions);\n     }\n     if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n         passes.add(aliasStrings);\n     }\n     if (options.aliasExternals) {\n         passes.add(aliasExternals);\n     }\n     if (options.aliasKeywords) {\n         passes.add(aliasKeywords);\n     }\n     passes.add(markUnnormalized);\n     if (options.coalesceVariableNames) {\n         passes.add(coalesceVariableNames);\n         if (options.foldConstants) {\n             passes.add(peepholeOptimizations);\n         }\n     }\n     if (options.collapseVariableDeclarations) {\n         passes.add(exploitAssign);\n         passes.add(collapseVariableDeclarations);\n     }\n     passes.add(denormalize);\n     if (options.instrumentationTemplate !\u003d null) {\n         passes.add(instrumentFunctions);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n         passes.add(invertContextualRenaming);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n         passes.add(renameVars);\n     }\n     if (options.groupVariableDeclarations) {\n         passes.add(groupVariableDeclarations);\n     }\n     if (options.processObjectPropertyString) {\n         passes.add(objectPropertyStringPostprocess);\n     }\n     if (options.labelRenaming) {\n         passes.add(renameLabels);\n     }\n     if (options.foldConstants) {\n         passes.add(latePeepholeOptimizations);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n         passes.add(nameUnmappedAnonymousFunctions);\n     }\n     if (options.checkSymbols) {\n         passes.add(sanityCheckVars);\n     }\n     return passes;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b7d0c1729ff32aa456727ed8c04dce277b1ebf89": {
      "type": "Ybodychange",
      "commitMessage": "\nMove ExploitAssigns on its own.\n\nR\u003djohnlenz\nDELTA\u003d785  (437 added, 348 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d878\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@886 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/15/11, 11:18 AM",
      "commitName": "b7d0c1729ff32aa456727ed8c04dce277b1ebf89",
      "commitAuthor": "acleung@google.com",
      "commitDateOld": "3/11/11, 11:56 AM",
      "commitNameOld": "2daa009d090adc7f4e6b9130b35a68b8a1536e7b",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 3.93,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getOptimizations() {\n    List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n    if (options.runtimeTypeCheck) {\n        passes.add(runtimeTypeCheck);\n    }\n    passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n    if (!options.idGenerators.isEmpty()) {\n        passes.add(replaceIdGenerators);\n    }\n    if (options.optimizeArgumentsArray) {\n        passes.add(optimizeArgumentsArray);\n    }\n    if (options.closurePass \u0026\u0026 (options.removeAbstractMethods || options.removeClosureAsserts)) {\n        passes.add(closureCodeRemoval);\n    }\n    if (options.collapseProperties) {\n        passes.add(collapseProperties);\n    }\n    if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n        passes.add(replaceStrings);\n    }\n    if (options.tightenTypes) {\n        passes.add(tightenTypesBuilder);\n    }\n    if (options.disambiguateProperties) {\n        passes.add(disambiguateProperties);\n    }\n    if (options.computeFunctionSideEffects) {\n        passes.add(markPureFunctions);\n    } else if (options.markNoSideEffectCalls) {\n        passes.add(markNoSideEffectCalls);\n    }\n    if (options.chainCalls) {\n        passes.add(chainCalls);\n    }\n    if (options.inlineConstantVars) {\n        passes.add(checkConsts);\n    }\n    if (options.ignoreCajaProperties) {\n        passes.add(ignoreCajaProperties);\n    }\n    assertAllOneTimePasses(passes);\n    if (options.smartNameRemoval || options.reportPath !\u003d null) {\n        passes.addAll(getCodeRemovingPasses());\n        passes.add(smartNamePass);\n    }\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.devirtualizePrototypeMethods) {\n        passes.add(devirtualizePrototypeMethods);\n    }\n    if (options.optimizeCalls || options.optimizeParameters || options.optimizeReturns) {\n        passes.add(optimizeCalls);\n    }\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n    }\n    passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n    if (options.specializeInitialModule) {\n        passes.addAll(getMainOptimizationLoop());\n        if (options.crossModuleCodeMotion) {\n            passes.add(crossModuleCodeMotion);\n        }\n        if (options.crossModuleMethodMotion) {\n            passes.add(crossModuleMethodMotion);\n        }\n        passes.add(specializeInitialModule.makeOneTimePass());\n    }\n    passes.addAll(getMainOptimizationLoop());\n    passes.add(createEmptyPass(\"beforeModuleMotion\"));\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.crossModuleMethodMotion) {\n        passes.add(crossModuleMethodMotion);\n    }\n    passes.add(createEmptyPass(\"afterModuleMotion\"));\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n    }\n    if (options.flowSensitiveInlineVariables) {\n        passes.add(flowSensitiveInlineVariables);\n        if (options.removeUnusedVars) {\n            passes.add(removeUnusedVars);\n        }\n    }\n    if (options.smartNameRemoval) {\n        passes.add(smartNamePass2);\n    }\n    if (options.collapseAnonymousFunctions) {\n        passes.add(collapseAnonymousFunctions);\n    }\n    if (options.moveFunctionDeclarations) {\n        passes.add(moveFunctionDeclarations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n        passes.add(nameMappedAnonymousFunctions);\n    }\n    if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n        passes.add(extractPrototypeMemberDeclarations);\n    }\n    if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n        passes.add(ambiguateProperties);\n    }\n    if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n        passes.add(renameProperties);\n    }\n    if (options.reserveRawExports) {\n        passes.add(gatherRawExports);\n    }\n    if (options.convertToDottedProperties) {\n        passes.add(convertToDottedProperties);\n    }\n    if (options.rewriteFunctionExpressions) {\n        passes.add(rewriteFunctionExpressions);\n    }\n    if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n        passes.add(aliasStrings);\n    }\n    if (options.aliasExternals) {\n        passes.add(aliasExternals);\n    }\n    if (options.aliasKeywords) {\n        passes.add(aliasKeywords);\n    }\n    passes.add(markUnnormalized);\n    if (options.coalesceVariableNames) {\n        passes.add(coalesceVariableNames);\n        if (options.foldConstants) {\n            passes.add(peepholeOptimizations);\n        }\n    }\n    if (options.collapseVariableDeclarations) {\n        passes.add(exploitAssign);\n        passes.add(collapseVariableDeclarations);\n    }\n    passes.add(denormalize);\n    if (options.instrumentationTemplate !\u003d null) {\n        passes.add(instrumentFunctions);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n        passes.add(invertContextualRenaming);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n        passes.add(renameVars);\n    }\n    if (options.groupVariableDeclarations) {\n        passes.add(groupVariableDeclarations);\n    }\n    if (options.processObjectPropertyString) {\n        passes.add(objectPropertyStringPostprocess);\n    }\n    if (options.labelRenaming) {\n        passes.add(renameLabels);\n    }\n    if (options.foldConstants) {\n        passes.add(latePeepholeOptimizations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n        passes.add(nameUnmappedAnonymousFunctions);\n    }\n    if (options.checkSymbols) {\n        passes.add(sanityCheckVars);\n    }\n    return passes;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 315,
      "functionName": "getOptimizations",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,167 +1,168 @@\n @Override\n protected List\u003cPassFactory\u003e getOptimizations() {\n     List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n     if (options.runtimeTypeCheck) {\n         passes.add(runtimeTypeCheck);\n     }\n     passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n     if (!options.idGenerators.isEmpty()) {\n         passes.add(replaceIdGenerators);\n     }\n     if (options.optimizeArgumentsArray) {\n         passes.add(optimizeArgumentsArray);\n     }\n     if (options.closurePass \u0026\u0026 (options.removeAbstractMethods || options.removeClosureAsserts)) {\n         passes.add(closureCodeRemoval);\n     }\n     if (options.collapseProperties) {\n         passes.add(collapseProperties);\n     }\n     if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n         passes.add(replaceStrings);\n     }\n     if (options.tightenTypes) {\n         passes.add(tightenTypesBuilder);\n     }\n     if (options.disambiguateProperties) {\n         passes.add(disambiguateProperties);\n     }\n     if (options.computeFunctionSideEffects) {\n         passes.add(markPureFunctions);\n     } else if (options.markNoSideEffectCalls) {\n         passes.add(markNoSideEffectCalls);\n     }\n     if (options.chainCalls) {\n         passes.add(chainCalls);\n     }\n     if (options.inlineConstantVars) {\n         passes.add(checkConsts);\n     }\n     if (options.ignoreCajaProperties) {\n         passes.add(ignoreCajaProperties);\n     }\n     assertAllOneTimePasses(passes);\n     if (options.smartNameRemoval || options.reportPath !\u003d null) {\n         passes.addAll(getCodeRemovingPasses());\n         passes.add(smartNamePass);\n     }\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.devirtualizePrototypeMethods) {\n         passes.add(devirtualizePrototypeMethods);\n     }\n     if (options.optimizeCalls || options.optimizeParameters || options.optimizeReturns) {\n         passes.add(optimizeCalls);\n     }\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n     }\n     passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n     if (options.specializeInitialModule) {\n         passes.addAll(getMainOptimizationLoop());\n         if (options.crossModuleCodeMotion) {\n             passes.add(crossModuleCodeMotion);\n         }\n         if (options.crossModuleMethodMotion) {\n             passes.add(crossModuleMethodMotion);\n         }\n         passes.add(specializeInitialModule.makeOneTimePass());\n     }\n     passes.addAll(getMainOptimizationLoop());\n     passes.add(createEmptyPass(\"beforeModuleMotion\"));\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.crossModuleMethodMotion) {\n         passes.add(crossModuleMethodMotion);\n     }\n     passes.add(createEmptyPass(\"afterModuleMotion\"));\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n     }\n     if (options.flowSensitiveInlineVariables) {\n         passes.add(flowSensitiveInlineVariables);\n         if (options.removeUnusedVars) {\n             passes.add(removeUnusedVars);\n         }\n     }\n     if (options.smartNameRemoval) {\n         passes.add(smartNamePass2);\n     }\n     if (options.collapseAnonymousFunctions) {\n         passes.add(collapseAnonymousFunctions);\n     }\n     if (options.moveFunctionDeclarations) {\n         passes.add(moveFunctionDeclarations);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n         passes.add(nameMappedAnonymousFunctions);\n     }\n     if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n         passes.add(extractPrototypeMemberDeclarations);\n     }\n     if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n         passes.add(ambiguateProperties);\n     }\n     if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n         passes.add(renameProperties);\n     }\n     if (options.reserveRawExports) {\n         passes.add(gatherRawExports);\n     }\n     if (options.convertToDottedProperties) {\n         passes.add(convertToDottedProperties);\n     }\n     if (options.rewriteFunctionExpressions) {\n         passes.add(rewriteFunctionExpressions);\n     }\n     if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n         passes.add(aliasStrings);\n     }\n     if (options.aliasExternals) {\n         passes.add(aliasExternals);\n     }\n     if (options.aliasKeywords) {\n         passes.add(aliasKeywords);\n     }\n     passes.add(markUnnormalized);\n     if (options.coalesceVariableNames) {\n         passes.add(coalesceVariableNames);\n         if (options.foldConstants) {\n             passes.add(peepholeOptimizations);\n         }\n     }\n     if (options.collapseVariableDeclarations) {\n+        passes.add(exploitAssign);\n         passes.add(collapseVariableDeclarations);\n     }\n     passes.add(denormalize);\n     if (options.instrumentationTemplate !\u003d null) {\n         passes.add(instrumentFunctions);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n         passes.add(invertContextualRenaming);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n         passes.add(renameVars);\n     }\n     if (options.groupVariableDeclarations) {\n         passes.add(groupVariableDeclarations);\n     }\n     if (options.processObjectPropertyString) {\n         passes.add(objectPropertyStringPostprocess);\n     }\n     if (options.labelRenaming) {\n         passes.add(renameLabels);\n     }\n     if (options.foldConstants) {\n         passes.add(latePeepholeOptimizations);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n         passes.add(nameUnmappedAnonymousFunctions);\n     }\n     if (options.checkSymbols) {\n         passes.add(sanityCheckVars);\n     }\n     return passes;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2daa009d090adc7f4e6b9130b35a68b8a1536e7b": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nbreaks with NPEs\n\n*** Original change description ***\n\n-Turn on RemoveUnusedVars\u0027s optimizeCalls option within the main optimization loop.\nThis is required to handle call sites that propagate unused parameters.\n\nR\u003dagrieve,johnlenz\nDELTA\u003d31  (8 added, 16 deleted, 7 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d833\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@880 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/11/11, 11:56 AM",
      "commitName": "2daa009d090adc7f4e6b9130b35a68b8a1536e7b",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "3/11/11, 10:12 AM",
      "commitNameOld": "4bd29c66f884aaae3a3bc2cdf8019ced6e13089c",
      "commitAuthorOld": "agrieve@google.com",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getOptimizations() {\n    List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n    if (options.runtimeTypeCheck) {\n        passes.add(runtimeTypeCheck);\n    }\n    passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n    if (!options.idGenerators.isEmpty()) {\n        passes.add(replaceIdGenerators);\n    }\n    if (options.optimizeArgumentsArray) {\n        passes.add(optimizeArgumentsArray);\n    }\n    if (options.closurePass \u0026\u0026 (options.removeAbstractMethods || options.removeClosureAsserts)) {\n        passes.add(closureCodeRemoval);\n    }\n    if (options.collapseProperties) {\n        passes.add(collapseProperties);\n    }\n    if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n        passes.add(replaceStrings);\n    }\n    if (options.tightenTypes) {\n        passes.add(tightenTypesBuilder);\n    }\n    if (options.disambiguateProperties) {\n        passes.add(disambiguateProperties);\n    }\n    if (options.computeFunctionSideEffects) {\n        passes.add(markPureFunctions);\n    } else if (options.markNoSideEffectCalls) {\n        passes.add(markNoSideEffectCalls);\n    }\n    if (options.chainCalls) {\n        passes.add(chainCalls);\n    }\n    if (options.inlineConstantVars) {\n        passes.add(checkConsts);\n    }\n    if (options.ignoreCajaProperties) {\n        passes.add(ignoreCajaProperties);\n    }\n    assertAllOneTimePasses(passes);\n    if (options.smartNameRemoval || options.reportPath !\u003d null) {\n        passes.addAll(getCodeRemovingPasses());\n        passes.add(smartNamePass);\n    }\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.devirtualizePrototypeMethods) {\n        passes.add(devirtualizePrototypeMethods);\n    }\n    if (options.optimizeCalls || options.optimizeParameters || options.optimizeReturns) {\n        passes.add(optimizeCalls);\n    }\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n    }\n    passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n    if (options.specializeInitialModule) {\n        passes.addAll(getMainOptimizationLoop());\n        if (options.crossModuleCodeMotion) {\n            passes.add(crossModuleCodeMotion);\n        }\n        if (options.crossModuleMethodMotion) {\n            passes.add(crossModuleMethodMotion);\n        }\n        passes.add(specializeInitialModule.makeOneTimePass());\n    }\n    passes.addAll(getMainOptimizationLoop());\n    passes.add(createEmptyPass(\"beforeModuleMotion\"));\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.crossModuleMethodMotion) {\n        passes.add(crossModuleMethodMotion);\n    }\n    passes.add(createEmptyPass(\"afterModuleMotion\"));\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n    }\n    if (options.flowSensitiveInlineVariables) {\n        passes.add(flowSensitiveInlineVariables);\n        if (options.removeUnusedVars) {\n            passes.add(removeUnusedVars);\n        }\n    }\n    if (options.smartNameRemoval) {\n        passes.add(smartNamePass2);\n    }\n    if (options.collapseAnonymousFunctions) {\n        passes.add(collapseAnonymousFunctions);\n    }\n    if (options.moveFunctionDeclarations) {\n        passes.add(moveFunctionDeclarations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n        passes.add(nameMappedAnonymousFunctions);\n    }\n    if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n        passes.add(extractPrototypeMemberDeclarations);\n    }\n    if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n        passes.add(ambiguateProperties);\n    }\n    if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n        passes.add(renameProperties);\n    }\n    if (options.reserveRawExports) {\n        passes.add(gatherRawExports);\n    }\n    if (options.convertToDottedProperties) {\n        passes.add(convertToDottedProperties);\n    }\n    if (options.rewriteFunctionExpressions) {\n        passes.add(rewriteFunctionExpressions);\n    }\n    if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n        passes.add(aliasStrings);\n    }\n    if (options.aliasExternals) {\n        passes.add(aliasExternals);\n    }\n    if (options.aliasKeywords) {\n        passes.add(aliasKeywords);\n    }\n    passes.add(markUnnormalized);\n    if (options.coalesceVariableNames) {\n        passes.add(coalesceVariableNames);\n        if (options.foldConstants) {\n            passes.add(peepholeOptimizations);\n        }\n    }\n    if (options.collapseVariableDeclarations) {\n        passes.add(collapseVariableDeclarations);\n    }\n    passes.add(denormalize);\n    if (options.instrumentationTemplate !\u003d null) {\n        passes.add(instrumentFunctions);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n        passes.add(invertContextualRenaming);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n        passes.add(renameVars);\n    }\n    if (options.groupVariableDeclarations) {\n        passes.add(groupVariableDeclarations);\n    }\n    if (options.processObjectPropertyString) {\n        passes.add(objectPropertyStringPostprocess);\n    }\n    if (options.labelRenaming) {\n        passes.add(renameLabels);\n    }\n    if (options.foldConstants) {\n        passes.add(latePeepholeOptimizations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n        passes.add(nameUnmappedAnonymousFunctions);\n    }\n    if (options.checkSymbols) {\n        passes.add(sanityCheckVars);\n    }\n    return passes;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 315,
      "functionName": "getOptimizations",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,164 +1,167 @@\n @Override\n protected List\u003cPassFactory\u003e getOptimizations() {\n     List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n     if (options.runtimeTypeCheck) {\n         passes.add(runtimeTypeCheck);\n     }\n     passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n     if (!options.idGenerators.isEmpty()) {\n         passes.add(replaceIdGenerators);\n     }\n     if (options.optimizeArgumentsArray) {\n         passes.add(optimizeArgumentsArray);\n     }\n     if (options.closurePass \u0026\u0026 (options.removeAbstractMethods || options.removeClosureAsserts)) {\n         passes.add(closureCodeRemoval);\n     }\n     if (options.collapseProperties) {\n         passes.add(collapseProperties);\n     }\n     if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n         passes.add(replaceStrings);\n     }\n     if (options.tightenTypes) {\n         passes.add(tightenTypesBuilder);\n     }\n     if (options.disambiguateProperties) {\n         passes.add(disambiguateProperties);\n     }\n     if (options.computeFunctionSideEffects) {\n         passes.add(markPureFunctions);\n     } else if (options.markNoSideEffectCalls) {\n         passes.add(markNoSideEffectCalls);\n     }\n     if (options.chainCalls) {\n         passes.add(chainCalls);\n     }\n     if (options.inlineConstantVars) {\n         passes.add(checkConsts);\n     }\n     if (options.ignoreCajaProperties) {\n         passes.add(ignoreCajaProperties);\n     }\n     assertAllOneTimePasses(passes);\n     if (options.smartNameRemoval || options.reportPath !\u003d null) {\n         passes.addAll(getCodeRemovingPasses());\n         passes.add(smartNamePass);\n     }\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.devirtualizePrototypeMethods) {\n         passes.add(devirtualizePrototypeMethods);\n     }\n+    if (options.optimizeCalls || options.optimizeParameters || options.optimizeReturns) {\n+        passes.add(optimizeCalls);\n+    }\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n     }\n     passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n     if (options.specializeInitialModule) {\n         passes.addAll(getMainOptimizationLoop());\n         if (options.crossModuleCodeMotion) {\n             passes.add(crossModuleCodeMotion);\n         }\n         if (options.crossModuleMethodMotion) {\n             passes.add(crossModuleMethodMotion);\n         }\n         passes.add(specializeInitialModule.makeOneTimePass());\n     }\n     passes.addAll(getMainOptimizationLoop());\n     passes.add(createEmptyPass(\"beforeModuleMotion\"));\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.crossModuleMethodMotion) {\n         passes.add(crossModuleMethodMotion);\n     }\n     passes.add(createEmptyPass(\"afterModuleMotion\"));\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n     }\n     if (options.flowSensitiveInlineVariables) {\n         passes.add(flowSensitiveInlineVariables);\n         if (options.removeUnusedVars) {\n             passes.add(removeUnusedVars);\n         }\n     }\n     if (options.smartNameRemoval) {\n         passes.add(smartNamePass2);\n     }\n     if (options.collapseAnonymousFunctions) {\n         passes.add(collapseAnonymousFunctions);\n     }\n     if (options.moveFunctionDeclarations) {\n         passes.add(moveFunctionDeclarations);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n         passes.add(nameMappedAnonymousFunctions);\n     }\n     if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n         passes.add(extractPrototypeMemberDeclarations);\n     }\n     if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n         passes.add(ambiguateProperties);\n     }\n     if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n         passes.add(renameProperties);\n     }\n     if (options.reserveRawExports) {\n         passes.add(gatherRawExports);\n     }\n     if (options.convertToDottedProperties) {\n         passes.add(convertToDottedProperties);\n     }\n     if (options.rewriteFunctionExpressions) {\n         passes.add(rewriteFunctionExpressions);\n     }\n     if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n         passes.add(aliasStrings);\n     }\n     if (options.aliasExternals) {\n         passes.add(aliasExternals);\n     }\n     if (options.aliasKeywords) {\n         passes.add(aliasKeywords);\n     }\n     passes.add(markUnnormalized);\n     if (options.coalesceVariableNames) {\n         passes.add(coalesceVariableNames);\n         if (options.foldConstants) {\n             passes.add(peepholeOptimizations);\n         }\n     }\n     if (options.collapseVariableDeclarations) {\n         passes.add(collapseVariableDeclarations);\n     }\n     passes.add(denormalize);\n     if (options.instrumentationTemplate !\u003d null) {\n         passes.add(instrumentFunctions);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n         passes.add(invertContextualRenaming);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n         passes.add(renameVars);\n     }\n     if (options.groupVariableDeclarations) {\n         passes.add(groupVariableDeclarations);\n     }\n     if (options.processObjectPropertyString) {\n         passes.add(objectPropertyStringPostprocess);\n     }\n     if (options.labelRenaming) {\n         passes.add(renameLabels);\n     }\n     if (options.foldConstants) {\n         passes.add(latePeepholeOptimizations);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n         passes.add(nameUnmappedAnonymousFunctions);\n     }\n     if (options.checkSymbols) {\n         passes.add(sanityCheckVars);\n     }\n     return passes;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4bd29c66f884aaae3a3bc2cdf8019ced6e13089c": {
      "type": "Ybodychange",
      "commitMessage": "\n-Turn on RemoveUnusedVars\u0027s optimizeCalls option within the main optimization loop.\nThis is required to handle call sites that propagate unused parameters.\n\nR\u003djohnlenz\nDELTA\u003d31  (16 added, 8 deleted, 7 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d830\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@879 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/11/11, 10:12 AM",
      "commitName": "4bd29c66f884aaae3a3bc2cdf8019ced6e13089c",
      "commitAuthor": "agrieve@google.com",
      "commitDateOld": "3/10/11, 11:48 AM",
      "commitNameOld": "524c758183be741ff1519acfa8a4bf714dd2c4cd",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 0.93,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getOptimizations() {\n    List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n    if (options.runtimeTypeCheck) {\n        passes.add(runtimeTypeCheck);\n    }\n    passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n    if (!options.idGenerators.isEmpty()) {\n        passes.add(replaceIdGenerators);\n    }\n    if (options.optimizeArgumentsArray) {\n        passes.add(optimizeArgumentsArray);\n    }\n    if (options.closurePass \u0026\u0026 (options.removeAbstractMethods || options.removeClosureAsserts)) {\n        passes.add(closureCodeRemoval);\n    }\n    if (options.collapseProperties) {\n        passes.add(collapseProperties);\n    }\n    if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n        passes.add(replaceStrings);\n    }\n    if (options.tightenTypes) {\n        passes.add(tightenTypesBuilder);\n    }\n    if (options.disambiguateProperties) {\n        passes.add(disambiguateProperties);\n    }\n    if (options.computeFunctionSideEffects) {\n        passes.add(markPureFunctions);\n    } else if (options.markNoSideEffectCalls) {\n        passes.add(markNoSideEffectCalls);\n    }\n    if (options.chainCalls) {\n        passes.add(chainCalls);\n    }\n    if (options.inlineConstantVars) {\n        passes.add(checkConsts);\n    }\n    if (options.ignoreCajaProperties) {\n        passes.add(ignoreCajaProperties);\n    }\n    assertAllOneTimePasses(passes);\n    if (options.smartNameRemoval || options.reportPath !\u003d null) {\n        passes.addAll(getCodeRemovingPasses());\n        passes.add(smartNamePass);\n    }\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.devirtualizePrototypeMethods) {\n        passes.add(devirtualizePrototypeMethods);\n    }\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n    }\n    passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n    if (options.specializeInitialModule) {\n        passes.addAll(getMainOptimizationLoop());\n        if (options.crossModuleCodeMotion) {\n            passes.add(crossModuleCodeMotion);\n        }\n        if (options.crossModuleMethodMotion) {\n            passes.add(crossModuleMethodMotion);\n        }\n        passes.add(specializeInitialModule.makeOneTimePass());\n    }\n    passes.addAll(getMainOptimizationLoop());\n    passes.add(createEmptyPass(\"beforeModuleMotion\"));\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.crossModuleMethodMotion) {\n        passes.add(crossModuleMethodMotion);\n    }\n    passes.add(createEmptyPass(\"afterModuleMotion\"));\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n    }\n    if (options.flowSensitiveInlineVariables) {\n        passes.add(flowSensitiveInlineVariables);\n        if (options.removeUnusedVars) {\n            passes.add(removeUnusedVars);\n        }\n    }\n    if (options.smartNameRemoval) {\n        passes.add(smartNamePass2);\n    }\n    if (options.collapseAnonymousFunctions) {\n        passes.add(collapseAnonymousFunctions);\n    }\n    if (options.moveFunctionDeclarations) {\n        passes.add(moveFunctionDeclarations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n        passes.add(nameMappedAnonymousFunctions);\n    }\n    if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n        passes.add(extractPrototypeMemberDeclarations);\n    }\n    if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n        passes.add(ambiguateProperties);\n    }\n    if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n        passes.add(renameProperties);\n    }\n    if (options.reserveRawExports) {\n        passes.add(gatherRawExports);\n    }\n    if (options.convertToDottedProperties) {\n        passes.add(convertToDottedProperties);\n    }\n    if (options.rewriteFunctionExpressions) {\n        passes.add(rewriteFunctionExpressions);\n    }\n    if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n        passes.add(aliasStrings);\n    }\n    if (options.aliasExternals) {\n        passes.add(aliasExternals);\n    }\n    if (options.aliasKeywords) {\n        passes.add(aliasKeywords);\n    }\n    passes.add(markUnnormalized);\n    if (options.coalesceVariableNames) {\n        passes.add(coalesceVariableNames);\n        if (options.foldConstants) {\n            passes.add(peepholeOptimizations);\n        }\n    }\n    if (options.collapseVariableDeclarations) {\n        passes.add(collapseVariableDeclarations);\n    }\n    passes.add(denormalize);\n    if (options.instrumentationTemplate !\u003d null) {\n        passes.add(instrumentFunctions);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n        passes.add(invertContextualRenaming);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n        passes.add(renameVars);\n    }\n    if (options.groupVariableDeclarations) {\n        passes.add(groupVariableDeclarations);\n    }\n    if (options.processObjectPropertyString) {\n        passes.add(objectPropertyStringPostprocess);\n    }\n    if (options.labelRenaming) {\n        passes.add(renameLabels);\n    }\n    if (options.foldConstants) {\n        passes.add(latePeepholeOptimizations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n        passes.add(nameUnmappedAnonymousFunctions);\n    }\n    if (options.checkSymbols) {\n        passes.add(sanityCheckVars);\n    }\n    return passes;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 315,
      "functionName": "getOptimizations",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,167 +1,164 @@\n @Override\n protected List\u003cPassFactory\u003e getOptimizations() {\n     List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n     if (options.runtimeTypeCheck) {\n         passes.add(runtimeTypeCheck);\n     }\n     passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n     if (!options.idGenerators.isEmpty()) {\n         passes.add(replaceIdGenerators);\n     }\n     if (options.optimizeArgumentsArray) {\n         passes.add(optimizeArgumentsArray);\n     }\n     if (options.closurePass \u0026\u0026 (options.removeAbstractMethods || options.removeClosureAsserts)) {\n         passes.add(closureCodeRemoval);\n     }\n     if (options.collapseProperties) {\n         passes.add(collapseProperties);\n     }\n     if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n         passes.add(replaceStrings);\n     }\n     if (options.tightenTypes) {\n         passes.add(tightenTypesBuilder);\n     }\n     if (options.disambiguateProperties) {\n         passes.add(disambiguateProperties);\n     }\n     if (options.computeFunctionSideEffects) {\n         passes.add(markPureFunctions);\n     } else if (options.markNoSideEffectCalls) {\n         passes.add(markNoSideEffectCalls);\n     }\n     if (options.chainCalls) {\n         passes.add(chainCalls);\n     }\n     if (options.inlineConstantVars) {\n         passes.add(checkConsts);\n     }\n     if (options.ignoreCajaProperties) {\n         passes.add(ignoreCajaProperties);\n     }\n     assertAllOneTimePasses(passes);\n     if (options.smartNameRemoval || options.reportPath !\u003d null) {\n         passes.addAll(getCodeRemovingPasses());\n         passes.add(smartNamePass);\n     }\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.devirtualizePrototypeMethods) {\n         passes.add(devirtualizePrototypeMethods);\n     }\n-    if (options.optimizeCalls || options.optimizeParameters || options.optimizeReturns) {\n-        passes.add(optimizeCalls);\n-    }\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n     }\n     passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n     if (options.specializeInitialModule) {\n         passes.addAll(getMainOptimizationLoop());\n         if (options.crossModuleCodeMotion) {\n             passes.add(crossModuleCodeMotion);\n         }\n         if (options.crossModuleMethodMotion) {\n             passes.add(crossModuleMethodMotion);\n         }\n         passes.add(specializeInitialModule.makeOneTimePass());\n     }\n     passes.addAll(getMainOptimizationLoop());\n     passes.add(createEmptyPass(\"beforeModuleMotion\"));\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.crossModuleMethodMotion) {\n         passes.add(crossModuleMethodMotion);\n     }\n     passes.add(createEmptyPass(\"afterModuleMotion\"));\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n     }\n     if (options.flowSensitiveInlineVariables) {\n         passes.add(flowSensitiveInlineVariables);\n         if (options.removeUnusedVars) {\n             passes.add(removeUnusedVars);\n         }\n     }\n     if (options.smartNameRemoval) {\n         passes.add(smartNamePass2);\n     }\n     if (options.collapseAnonymousFunctions) {\n         passes.add(collapseAnonymousFunctions);\n     }\n     if (options.moveFunctionDeclarations) {\n         passes.add(moveFunctionDeclarations);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n         passes.add(nameMappedAnonymousFunctions);\n     }\n     if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n         passes.add(extractPrototypeMemberDeclarations);\n     }\n     if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n         passes.add(ambiguateProperties);\n     }\n     if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n         passes.add(renameProperties);\n     }\n     if (options.reserveRawExports) {\n         passes.add(gatherRawExports);\n     }\n     if (options.convertToDottedProperties) {\n         passes.add(convertToDottedProperties);\n     }\n     if (options.rewriteFunctionExpressions) {\n         passes.add(rewriteFunctionExpressions);\n     }\n     if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n         passes.add(aliasStrings);\n     }\n     if (options.aliasExternals) {\n         passes.add(aliasExternals);\n     }\n     if (options.aliasKeywords) {\n         passes.add(aliasKeywords);\n     }\n     passes.add(markUnnormalized);\n     if (options.coalesceVariableNames) {\n         passes.add(coalesceVariableNames);\n         if (options.foldConstants) {\n             passes.add(peepholeOptimizations);\n         }\n     }\n     if (options.collapseVariableDeclarations) {\n         passes.add(collapseVariableDeclarations);\n     }\n     passes.add(denormalize);\n     if (options.instrumentationTemplate !\u003d null) {\n         passes.add(instrumentFunctions);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n         passes.add(invertContextualRenaming);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n         passes.add(renameVars);\n     }\n     if (options.groupVariableDeclarations) {\n         passes.add(groupVariableDeclarations);\n     }\n     if (options.processObjectPropertyString) {\n         passes.add(objectPropertyStringPostprocess);\n     }\n     if (options.labelRenaming) {\n         passes.add(renameLabels);\n     }\n     if (options.foldConstants) {\n         passes.add(latePeepholeOptimizations);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n         passes.add(nameUnmappedAnonymousFunctions);\n     }\n     if (options.checkSymbols) {\n         passes.add(sanityCheckVars);\n     }\n     return passes;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b326ab0a322d0ece76e61955852ada034122192b": {
      "type": "Ybodychange",
      "commitMessage": "\nIntroduces a late peephole optimization pass.\n\nR\u003djohnlenz\nDELTA\u003d206  (116 added, 57 deleted, 33 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d783\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@860 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/7/11, 4:19 PM",
      "commitName": "b326ab0a322d0ece76e61955852ada034122192b",
      "commitAuthor": "acleung@google.com",
      "commitDateOld": "3/7/11, 12:59 PM",
      "commitNameOld": "5709ec1d0bbe5b7726a14d06f7eab9c35150e314",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.14,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getOptimizations() {\n    List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n    if (options.runtimeTypeCheck) {\n        passes.add(runtimeTypeCheck);\n    }\n    passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n    if (!options.idGenerators.isEmpty()) {\n        passes.add(replaceIdGenerators);\n    }\n    if (options.optimizeArgumentsArray) {\n        passes.add(optimizeArgumentsArray);\n    }\n    if (options.closurePass \u0026\u0026 (options.removeAbstractMethods || options.removeClosureAsserts)) {\n        passes.add(closureCodeRemoval);\n    }\n    if (options.collapseProperties) {\n        passes.add(collapseProperties);\n    }\n    if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n        passes.add(replaceStrings);\n    }\n    if (options.tightenTypes) {\n        passes.add(tightenTypesBuilder);\n    }\n    if (options.disambiguateProperties) {\n        passes.add(disambiguateProperties);\n    }\n    if (options.computeFunctionSideEffects) {\n        passes.add(markPureFunctions);\n    } else if (options.markNoSideEffectCalls) {\n        passes.add(markNoSideEffectCalls);\n    }\n    if (options.chainCalls) {\n        passes.add(chainCalls);\n    }\n    if (options.inlineConstantVars) {\n        passes.add(checkConsts);\n    }\n    if (options.ignoreCajaProperties) {\n        passes.add(ignoreCajaProperties);\n    }\n    assertAllOneTimePasses(passes);\n    if (options.smartNameRemoval || options.reportPath !\u003d null) {\n        passes.addAll(getCodeRemovingPasses());\n        passes.add(smartNamePass);\n    }\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.devirtualizePrototypeMethods) {\n        passes.add(devirtualizePrototypeMethods);\n    }\n    if (options.optimizeCalls || options.optimizeParameters || options.optimizeReturns) {\n        passes.add(optimizeCalls);\n    }\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n    }\n    passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n    if (options.specializeInitialModule) {\n        passes.addAll(getMainOptimizationLoop());\n        if (options.crossModuleCodeMotion) {\n            passes.add(crossModuleCodeMotion);\n        }\n        if (options.crossModuleMethodMotion) {\n            passes.add(crossModuleMethodMotion);\n        }\n        passes.add(specializeInitialModule.makeOneTimePass());\n    }\n    passes.addAll(getMainOptimizationLoop());\n    passes.add(createEmptyPass(\"beforeModuleMotion\"));\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.crossModuleMethodMotion) {\n        passes.add(crossModuleMethodMotion);\n    }\n    passes.add(createEmptyPass(\"afterModuleMotion\"));\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n    }\n    if (options.flowSensitiveInlineVariables) {\n        passes.add(flowSensitiveInlineVariables);\n        if (options.removeUnusedVars) {\n            passes.add(removeUnusedVars);\n        }\n    }\n    if (options.smartNameRemoval) {\n        passes.add(smartNamePass2);\n    }\n    if (options.collapseAnonymousFunctions) {\n        passes.add(collapseAnonymousFunctions);\n    }\n    if (options.moveFunctionDeclarations) {\n        passes.add(moveFunctionDeclarations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n        passes.add(nameMappedAnonymousFunctions);\n    }\n    if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n        passes.add(extractPrototypeMemberDeclarations);\n    }\n    if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n        passes.add(ambiguateProperties);\n    }\n    if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n        passes.add(renameProperties);\n    }\n    if (options.reserveRawExports) {\n        passes.add(gatherRawExports);\n    }\n    if (options.convertToDottedProperties) {\n        passes.add(convertToDottedProperties);\n    }\n    if (options.rewriteFunctionExpressions) {\n        passes.add(rewriteFunctionExpressions);\n    }\n    if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n        passes.add(aliasStrings);\n    }\n    if (options.aliasExternals) {\n        passes.add(aliasExternals);\n    }\n    if (options.aliasKeywords) {\n        passes.add(aliasKeywords);\n    }\n    passes.add(markUnnormalized);\n    if (options.coalesceVariableNames) {\n        passes.add(coalesceVariableNames);\n        if (options.foldConstants) {\n            passes.add(peepholeOptimizations);\n        }\n    }\n    if (options.collapseVariableDeclarations) {\n        passes.add(collapseVariableDeclarations);\n    }\n    passes.add(denormalize);\n    if (options.instrumentationTemplate !\u003d null) {\n        passes.add(instrumentFunctions);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n        passes.add(invertContextualRenaming);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n        passes.add(renameVars);\n    }\n    if (options.groupVariableDeclarations) {\n        passes.add(groupVariableDeclarations);\n    }\n    if (options.processObjectPropertyString) {\n        passes.add(objectPropertyStringPostprocess);\n    }\n    if (options.labelRenaming) {\n        passes.add(renameLabels);\n    }\n    if (options.foldConstants) {\n        passes.add(latePeepholeOptimizations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n        passes.add(nameUnmappedAnonymousFunctions);\n    }\n    if (options.checkSymbols) {\n        passes.add(sanityCheckVars);\n    }\n    return passes;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 312,
      "functionName": "getOptimizations",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,164 +1,167 @@\n @Override\n protected List\u003cPassFactory\u003e getOptimizations() {\n     List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n     if (options.runtimeTypeCheck) {\n         passes.add(runtimeTypeCheck);\n     }\n     passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n     if (!options.idGenerators.isEmpty()) {\n         passes.add(replaceIdGenerators);\n     }\n     if (options.optimizeArgumentsArray) {\n         passes.add(optimizeArgumentsArray);\n     }\n     if (options.closurePass \u0026\u0026 (options.removeAbstractMethods || options.removeClosureAsserts)) {\n         passes.add(closureCodeRemoval);\n     }\n     if (options.collapseProperties) {\n         passes.add(collapseProperties);\n     }\n     if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n         passes.add(replaceStrings);\n     }\n     if (options.tightenTypes) {\n         passes.add(tightenTypesBuilder);\n     }\n     if (options.disambiguateProperties) {\n         passes.add(disambiguateProperties);\n     }\n     if (options.computeFunctionSideEffects) {\n         passes.add(markPureFunctions);\n     } else if (options.markNoSideEffectCalls) {\n         passes.add(markNoSideEffectCalls);\n     }\n     if (options.chainCalls) {\n         passes.add(chainCalls);\n     }\n     if (options.inlineConstantVars) {\n         passes.add(checkConsts);\n     }\n     if (options.ignoreCajaProperties) {\n         passes.add(ignoreCajaProperties);\n     }\n     assertAllOneTimePasses(passes);\n     if (options.smartNameRemoval || options.reportPath !\u003d null) {\n         passes.addAll(getCodeRemovingPasses());\n         passes.add(smartNamePass);\n     }\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.devirtualizePrototypeMethods) {\n         passes.add(devirtualizePrototypeMethods);\n     }\n     if (options.optimizeCalls || options.optimizeParameters || options.optimizeReturns) {\n         passes.add(optimizeCalls);\n     }\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n     }\n     passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n     if (options.specializeInitialModule) {\n         passes.addAll(getMainOptimizationLoop());\n         if (options.crossModuleCodeMotion) {\n             passes.add(crossModuleCodeMotion);\n         }\n         if (options.crossModuleMethodMotion) {\n             passes.add(crossModuleMethodMotion);\n         }\n         passes.add(specializeInitialModule.makeOneTimePass());\n     }\n     passes.addAll(getMainOptimizationLoop());\n     passes.add(createEmptyPass(\"beforeModuleMotion\"));\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.crossModuleMethodMotion) {\n         passes.add(crossModuleMethodMotion);\n     }\n     passes.add(createEmptyPass(\"afterModuleMotion\"));\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n     }\n     if (options.flowSensitiveInlineVariables) {\n         passes.add(flowSensitiveInlineVariables);\n         if (options.removeUnusedVars) {\n             passes.add(removeUnusedVars);\n         }\n     }\n     if (options.smartNameRemoval) {\n         passes.add(smartNamePass2);\n     }\n     if (options.collapseAnonymousFunctions) {\n         passes.add(collapseAnonymousFunctions);\n     }\n     if (options.moveFunctionDeclarations) {\n         passes.add(moveFunctionDeclarations);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n         passes.add(nameMappedAnonymousFunctions);\n     }\n     if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n         passes.add(extractPrototypeMemberDeclarations);\n     }\n     if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n         passes.add(ambiguateProperties);\n     }\n     if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n         passes.add(renameProperties);\n     }\n     if (options.reserveRawExports) {\n         passes.add(gatherRawExports);\n     }\n     if (options.convertToDottedProperties) {\n         passes.add(convertToDottedProperties);\n     }\n     if (options.rewriteFunctionExpressions) {\n         passes.add(rewriteFunctionExpressions);\n     }\n     if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n         passes.add(aliasStrings);\n     }\n     if (options.aliasExternals) {\n         passes.add(aliasExternals);\n     }\n     if (options.aliasKeywords) {\n         passes.add(aliasKeywords);\n     }\n     passes.add(markUnnormalized);\n     if (options.coalesceVariableNames) {\n         passes.add(coalesceVariableNames);\n         if (options.foldConstants) {\n             passes.add(peepholeOptimizations);\n         }\n     }\n     if (options.collapseVariableDeclarations) {\n         passes.add(collapseVariableDeclarations);\n     }\n     passes.add(denormalize);\n     if (options.instrumentationTemplate !\u003d null) {\n         passes.add(instrumentFunctions);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n         passes.add(invertContextualRenaming);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n         passes.add(renameVars);\n     }\n     if (options.groupVariableDeclarations) {\n         passes.add(groupVariableDeclarations);\n     }\n     if (options.processObjectPropertyString) {\n         passes.add(objectPropertyStringPostprocess);\n     }\n     if (options.labelRenaming) {\n         passes.add(renameLabels);\n     }\n+    if (options.foldConstants) {\n+        passes.add(latePeepholeOptimizations);\n+    }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n         passes.add(nameUnmappedAnonymousFunctions);\n     }\n     if (options.checkSymbols) {\n         passes.add(sanityCheckVars);\n     }\n     return passes;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f3c23f757da302483c86414ec8b9c502f10fce00": {
      "type": "Ybodychange",
      "commitMessage": "\nReapply second run of smart name removal after smart name removal fixes.\n\nOriginal change:\n-Run SmartNameRemoval a second time, after the optimization loop.\n-This causes goog.events to be compiled down to nothing when compiled on its own.\n\nR\u003dnicksantos\nDELTA\u003d24  (24 added, 0 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d720\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@843 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/2/11, 2:12 PM",
      "commitName": "f3c23f757da302483c86414ec8b9c502f10fce00",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "2/25/11, 2:08 PM",
      "commitNameOld": "2665037fa174f1fc17928a27c7bd6d90c8e9e559",
      "commitAuthorOld": "acleung@google.com",
      "daysBetweenCommits": 5.0,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getOptimizations() {\n    List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n    if (options.runtimeTypeCheck) {\n        passes.add(runtimeTypeCheck);\n    }\n    passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n    if (!options.idGenerators.isEmpty()) {\n        passes.add(replaceIdGenerators);\n    }\n    if (options.optimizeArgumentsArray) {\n        passes.add(optimizeArgumentsArray);\n    }\n    if (options.closurePass \u0026\u0026 (options.removeAbstractMethods || options.removeClosureAsserts)) {\n        passes.add(closureCodeRemoval);\n    }\n    if (options.collapseProperties) {\n        passes.add(collapseProperties);\n    }\n    if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n        passes.add(replaceStrings);\n    }\n    if (options.tightenTypes) {\n        passes.add(tightenTypesBuilder);\n    }\n    if (options.disambiguateProperties) {\n        passes.add(disambiguateProperties);\n    }\n    if (options.computeFunctionSideEffects) {\n        passes.add(markPureFunctions);\n    } else if (options.markNoSideEffectCalls) {\n        passes.add(markNoSideEffectCalls);\n    }\n    if (options.chainCalls) {\n        passes.add(chainCalls);\n    }\n    if (options.inlineConstantVars) {\n        passes.add(checkConsts);\n    }\n    if (options.ignoreCajaProperties) {\n        passes.add(ignoreCajaProperties);\n    }\n    assertAllOneTimePasses(passes);\n    if (options.smartNameRemoval || options.reportPath !\u003d null) {\n        passes.addAll(getCodeRemovingPasses());\n        passes.add(smartNamePass);\n    }\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.devirtualizePrototypeMethods) {\n        passes.add(devirtualizePrototypeMethods);\n    }\n    if (options.optimizeCalls || options.optimizeParameters || options.optimizeReturns) {\n        passes.add(optimizeCalls);\n    }\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n    }\n    passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n    if (options.specializeInitialModule) {\n        passes.addAll(getMainOptimizationLoop());\n        if (options.crossModuleCodeMotion) {\n            passes.add(crossModuleCodeMotion);\n        }\n        if (options.crossModuleMethodMotion) {\n            passes.add(crossModuleMethodMotion);\n        }\n        passes.add(specializeInitialModule.makeOneTimePass());\n    }\n    passes.addAll(getMainOptimizationLoop());\n    passes.add(createEmptyPass(\"beforeModuleMotion\"));\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.crossModuleMethodMotion) {\n        passes.add(crossModuleMethodMotion);\n    }\n    passes.add(createEmptyPass(\"afterModuleMotion\"));\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n    }\n    if (options.flowSensitiveInlineVariables) {\n        passes.add(flowSensitiveInlineVariables);\n        if (options.removeUnusedVars) {\n            passes.add(removeUnusedVars);\n        }\n    }\n    if (options.smartNameRemoval) {\n        passes.add(smartNamePass2);\n    }\n    if (options.collapseAnonymousFunctions) {\n        passes.add(collapseAnonymousFunctions);\n    }\n    if (options.moveFunctionDeclarations) {\n        passes.add(moveFunctionDeclarations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n        passes.add(nameMappedAnonymousFunctions);\n    }\n    if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n        passes.add(extractPrototypeMemberDeclarations);\n    }\n    if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n        passes.add(ambiguateProperties);\n    }\n    if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n        passes.add(renameProperties);\n    }\n    if (options.reserveRawExports) {\n        passes.add(gatherRawExports);\n    }\n    if (options.convertToDottedProperties) {\n        passes.add(convertToDottedProperties);\n    }\n    if (options.rewriteFunctionExpressions) {\n        passes.add(rewriteFunctionExpressions);\n    }\n    if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n        passes.add(aliasStrings);\n    }\n    if (options.aliasExternals) {\n        passes.add(aliasExternals);\n    }\n    if (options.aliasKeywords) {\n        passes.add(aliasKeywords);\n    }\n    passes.add(markUnnormalized);\n    if (options.coalesceVariableNames) {\n        passes.add(coalesceVariableNames);\n        if (options.foldConstants) {\n            passes.add(peepholeOptimizations);\n        }\n    }\n    if (options.collapseVariableDeclarations) {\n        passes.add(collapseVariableDeclarations);\n    }\n    passes.add(denormalize);\n    if (options.instrumentationTemplate !\u003d null) {\n        passes.add(instrumentFunctions);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n        passes.add(invertContextualRenaming);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n        passes.add(renameVars);\n    }\n    if (options.groupVariableDeclarations) {\n        passes.add(groupVariableDeclarations);\n    }\n    if (options.processObjectPropertyString) {\n        passes.add(objectPropertyStringPostprocess);\n    }\n    if (options.labelRenaming) {\n        passes.add(renameLabels);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n        passes.add(nameUnmappedAnonymousFunctions);\n    }\n    if (options.checkSymbols) {\n        passes.add(sanityCheckVars);\n    }\n    return passes;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 319,
      "functionName": "getOptimizations",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,161 +1,164 @@\n @Override\n protected List\u003cPassFactory\u003e getOptimizations() {\n     List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n     if (options.runtimeTypeCheck) {\n         passes.add(runtimeTypeCheck);\n     }\n     passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n     if (!options.idGenerators.isEmpty()) {\n         passes.add(replaceIdGenerators);\n     }\n     if (options.optimizeArgumentsArray) {\n         passes.add(optimizeArgumentsArray);\n     }\n     if (options.closurePass \u0026\u0026 (options.removeAbstractMethods || options.removeClosureAsserts)) {\n         passes.add(closureCodeRemoval);\n     }\n     if (options.collapseProperties) {\n         passes.add(collapseProperties);\n     }\n     if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n         passes.add(replaceStrings);\n     }\n     if (options.tightenTypes) {\n         passes.add(tightenTypesBuilder);\n     }\n     if (options.disambiguateProperties) {\n         passes.add(disambiguateProperties);\n     }\n     if (options.computeFunctionSideEffects) {\n         passes.add(markPureFunctions);\n     } else if (options.markNoSideEffectCalls) {\n         passes.add(markNoSideEffectCalls);\n     }\n     if (options.chainCalls) {\n         passes.add(chainCalls);\n     }\n     if (options.inlineConstantVars) {\n         passes.add(checkConsts);\n     }\n     if (options.ignoreCajaProperties) {\n         passes.add(ignoreCajaProperties);\n     }\n     assertAllOneTimePasses(passes);\n     if (options.smartNameRemoval || options.reportPath !\u003d null) {\n         passes.addAll(getCodeRemovingPasses());\n         passes.add(smartNamePass);\n     }\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.devirtualizePrototypeMethods) {\n         passes.add(devirtualizePrototypeMethods);\n     }\n     if (options.optimizeCalls || options.optimizeParameters || options.optimizeReturns) {\n         passes.add(optimizeCalls);\n     }\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n     }\n     passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n     if (options.specializeInitialModule) {\n         passes.addAll(getMainOptimizationLoop());\n         if (options.crossModuleCodeMotion) {\n             passes.add(crossModuleCodeMotion);\n         }\n         if (options.crossModuleMethodMotion) {\n             passes.add(crossModuleMethodMotion);\n         }\n         passes.add(specializeInitialModule.makeOneTimePass());\n     }\n     passes.addAll(getMainOptimizationLoop());\n     passes.add(createEmptyPass(\"beforeModuleMotion\"));\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.crossModuleMethodMotion) {\n         passes.add(crossModuleMethodMotion);\n     }\n     passes.add(createEmptyPass(\"afterModuleMotion\"));\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n     }\n     if (options.flowSensitiveInlineVariables) {\n         passes.add(flowSensitiveInlineVariables);\n         if (options.removeUnusedVars) {\n             passes.add(removeUnusedVars);\n         }\n     }\n+    if (options.smartNameRemoval) {\n+        passes.add(smartNamePass2);\n+    }\n     if (options.collapseAnonymousFunctions) {\n         passes.add(collapseAnonymousFunctions);\n     }\n     if (options.moveFunctionDeclarations) {\n         passes.add(moveFunctionDeclarations);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n         passes.add(nameMappedAnonymousFunctions);\n     }\n     if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n         passes.add(extractPrototypeMemberDeclarations);\n     }\n     if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n         passes.add(ambiguateProperties);\n     }\n     if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n         passes.add(renameProperties);\n     }\n     if (options.reserveRawExports) {\n         passes.add(gatherRawExports);\n     }\n     if (options.convertToDottedProperties) {\n         passes.add(convertToDottedProperties);\n     }\n     if (options.rewriteFunctionExpressions) {\n         passes.add(rewriteFunctionExpressions);\n     }\n     if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n         passes.add(aliasStrings);\n     }\n     if (options.aliasExternals) {\n         passes.add(aliasExternals);\n     }\n     if (options.aliasKeywords) {\n         passes.add(aliasKeywords);\n     }\n     passes.add(markUnnormalized);\n     if (options.coalesceVariableNames) {\n         passes.add(coalesceVariableNames);\n         if (options.foldConstants) {\n             passes.add(peepholeOptimizations);\n         }\n     }\n     if (options.collapseVariableDeclarations) {\n         passes.add(collapseVariableDeclarations);\n     }\n     passes.add(denormalize);\n     if (options.instrumentationTemplate !\u003d null) {\n         passes.add(instrumentFunctions);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n         passes.add(invertContextualRenaming);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n         passes.add(renameVars);\n     }\n     if (options.groupVariableDeclarations) {\n         passes.add(groupVariableDeclarations);\n     }\n     if (options.processObjectPropertyString) {\n         passes.add(objectPropertyStringPostprocess);\n     }\n     if (options.labelRenaming) {\n         passes.add(renameLabels);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n         passes.add(nameUnmappedAnonymousFunctions);\n     }\n     if (options.checkSymbols) {\n         passes.add(sanityCheckVars);\n     }\n     return passes;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "902503a7f8aa4d86bbfc01a0933f2a9e6d952e7f": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nFixed!\n\n*** Original change description ***\n\nTemporary disable passes that requires path checking.\n\nR\u003dnicksantos\nDELTA\u003d16  (0 added, 13 deleted, 3 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d643\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@812 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/23/11, 6:02 PM",
      "commitName": "902503a7f8aa4d86bbfc01a0933f2a9e6d952e7f",
      "commitAuthor": "acleung@google.com",
      "commitDateOld": "2/22/11, 2:58 PM",
      "commitNameOld": "b6e3f5c01de00915df7682dba4e9a7f733630d34",
      "commitAuthorOld": "acleung@google.com",
      "daysBetweenCommits": 1.13,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getOptimizations() {\n    List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n    if (options.runtimeTypeCheck) {\n        passes.add(runtimeTypeCheck);\n    }\n    passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n    if (!options.idGenerators.isEmpty()) {\n        passes.add(replaceIdGenerators);\n    }\n    if (options.optimizeArgumentsArray) {\n        passes.add(optimizeArgumentsArray);\n    }\n    if (options.closurePass \u0026\u0026 (options.removeAbstractMethods || options.removeClosureAsserts)) {\n        passes.add(closureCodeRemoval);\n    }\n    if (options.collapseProperties) {\n        passes.add(collapseProperties);\n    }\n    if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n        passes.add(replaceStrings);\n    }\n    if (options.tightenTypes) {\n        passes.add(tightenTypesBuilder);\n    }\n    if (options.disambiguateProperties) {\n        passes.add(disambiguateProperties);\n    }\n    if (options.computeFunctionSideEffects) {\n        passes.add(markPureFunctions);\n    } else if (options.markNoSideEffectCalls) {\n        passes.add(markNoSideEffectCalls);\n    }\n    if (options.chainCalls) {\n        passes.add(chainCalls);\n    }\n    if (options.inlineConstantVars) {\n        passes.add(checkConsts);\n    }\n    if (options.ignoreCajaProperties) {\n        passes.add(ignoreCajaProperties);\n    }\n    assertAllOneTimePasses(passes);\n    if (options.smartNameRemoval || options.reportPath !\u003d null) {\n        passes.addAll(getCodeRemovingPasses());\n        passes.add(smartNamePass);\n    }\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.devirtualizePrototypeMethods) {\n        passes.add(devirtualizePrototypeMethods);\n    }\n    if (options.optimizeCalls || options.optimizeParameters || options.optimizeReturns) {\n        passes.add(optimizeCalls);\n    }\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n    }\n    passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n    if (options.specializeInitialModule) {\n        passes.addAll(getMainOptimizationLoop());\n        if (options.crossModuleCodeMotion) {\n            passes.add(crossModuleCodeMotion);\n        }\n        if (options.crossModuleMethodMotion) {\n            passes.add(crossModuleMethodMotion);\n        }\n        passes.add(specializeInitialModule.makeOneTimePass());\n    }\n    passes.addAll(getMainOptimizationLoop());\n    passes.add(createEmptyPass(\"beforeModuleMotion\"));\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.crossModuleMethodMotion) {\n        passes.add(crossModuleMethodMotion);\n    }\n    passes.add(createEmptyPass(\"afterModuleMotion\"));\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n    }\n    if (options.flowSensitiveInlineVariables) {\n        passes.add(flowSensitiveInlineVariables);\n        if (options.removeUnusedVars) {\n            passes.add(removeUnusedVars);\n        }\n    }\n    if (options.collapseAnonymousFunctions) {\n        passes.add(collapseAnonymousFunctions);\n    }\n    if (options.moveFunctionDeclarations) {\n        passes.add(moveFunctionDeclarations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n        passes.add(nameMappedAnonymousFunctions);\n    }\n    if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n        passes.add(extractPrototypeMemberDeclarations);\n    }\n    if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n        passes.add(ambiguateProperties);\n    }\n    if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n        passes.add(renameProperties);\n    }\n    if (options.reserveRawExports) {\n        passes.add(gatherRawExports);\n    }\n    if (options.convertToDottedProperties) {\n        passes.add(convertToDottedProperties);\n    }\n    if (options.rewriteFunctionExpressions) {\n        passes.add(rewriteFunctionExpressions);\n    }\n    if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n        passes.add(aliasStrings);\n    }\n    if (options.aliasExternals) {\n        passes.add(aliasExternals);\n    }\n    if (options.aliasKeywords) {\n        passes.add(aliasKeywords);\n    }\n    passes.add(markUnnormalized);\n    if (options.coalesceVariableNames) {\n        passes.add(coalesceVariableNames);\n        if (options.foldConstants) {\n            passes.add(peepholeOptimizations);\n        }\n    }\n    if (options.collapseVariableDeclarations) {\n        passes.add(collapseVariableDeclarations);\n    }\n    passes.add(denormalize);\n    if (options.instrumentationTemplate !\u003d null) {\n        passes.add(instrumentFunctions);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n        passes.add(invertContextualRenaming);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n        passes.add(renameVars);\n    }\n    if (options.groupVariableDeclarations) {\n        passes.add(groupVariableDeclarations);\n    }\n    if (options.processObjectPropertyString) {\n        passes.add(objectPropertyStringPostprocess);\n    }\n    if (options.labelRenaming) {\n        passes.add(renameLabels);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n        passes.add(nameUnmappedAnonymousFunctions);\n    }\n    if (options.checkSymbols) {\n        passes.add(sanityCheckVars);\n    }\n    return passes;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 318,
      "functionName": "getOptimizations",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,155 +1,161 @@\n @Override\n protected List\u003cPassFactory\u003e getOptimizations() {\n     List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n     if (options.runtimeTypeCheck) {\n         passes.add(runtimeTypeCheck);\n     }\n     passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n     if (!options.idGenerators.isEmpty()) {\n         passes.add(replaceIdGenerators);\n     }\n     if (options.optimizeArgumentsArray) {\n         passes.add(optimizeArgumentsArray);\n     }\n     if (options.closurePass \u0026\u0026 (options.removeAbstractMethods || options.removeClosureAsserts)) {\n         passes.add(closureCodeRemoval);\n     }\n     if (options.collapseProperties) {\n         passes.add(collapseProperties);\n     }\n     if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n         passes.add(replaceStrings);\n     }\n     if (options.tightenTypes) {\n         passes.add(tightenTypesBuilder);\n     }\n     if (options.disambiguateProperties) {\n         passes.add(disambiguateProperties);\n     }\n     if (options.computeFunctionSideEffects) {\n         passes.add(markPureFunctions);\n     } else if (options.markNoSideEffectCalls) {\n         passes.add(markNoSideEffectCalls);\n     }\n     if (options.chainCalls) {\n         passes.add(chainCalls);\n     }\n     if (options.inlineConstantVars) {\n         passes.add(checkConsts);\n     }\n     if (options.ignoreCajaProperties) {\n         passes.add(ignoreCajaProperties);\n     }\n     assertAllOneTimePasses(passes);\n     if (options.smartNameRemoval || options.reportPath !\u003d null) {\n         passes.addAll(getCodeRemovingPasses());\n         passes.add(smartNamePass);\n     }\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.devirtualizePrototypeMethods) {\n         passes.add(devirtualizePrototypeMethods);\n     }\n     if (options.optimizeCalls || options.optimizeParameters || options.optimizeReturns) {\n         passes.add(optimizeCalls);\n     }\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n     }\n     passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n     if (options.specializeInitialModule) {\n         passes.addAll(getMainOptimizationLoop());\n         if (options.crossModuleCodeMotion) {\n             passes.add(crossModuleCodeMotion);\n         }\n         if (options.crossModuleMethodMotion) {\n             passes.add(crossModuleMethodMotion);\n         }\n         passes.add(specializeInitialModule.makeOneTimePass());\n     }\n     passes.addAll(getMainOptimizationLoop());\n     passes.add(createEmptyPass(\"beforeModuleMotion\"));\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.crossModuleMethodMotion) {\n         passes.add(crossModuleMethodMotion);\n     }\n     passes.add(createEmptyPass(\"afterModuleMotion\"));\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n     }\n+    if (options.flowSensitiveInlineVariables) {\n+        passes.add(flowSensitiveInlineVariables);\n+        if (options.removeUnusedVars) {\n+            passes.add(removeUnusedVars);\n+        }\n+    }\n     if (options.collapseAnonymousFunctions) {\n         passes.add(collapseAnonymousFunctions);\n     }\n     if (options.moveFunctionDeclarations) {\n         passes.add(moveFunctionDeclarations);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n         passes.add(nameMappedAnonymousFunctions);\n     }\n     if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n         passes.add(extractPrototypeMemberDeclarations);\n     }\n     if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n         passes.add(ambiguateProperties);\n     }\n     if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n         passes.add(renameProperties);\n     }\n     if (options.reserveRawExports) {\n         passes.add(gatherRawExports);\n     }\n     if (options.convertToDottedProperties) {\n         passes.add(convertToDottedProperties);\n     }\n     if (options.rewriteFunctionExpressions) {\n         passes.add(rewriteFunctionExpressions);\n     }\n     if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n         passes.add(aliasStrings);\n     }\n     if (options.aliasExternals) {\n         passes.add(aliasExternals);\n     }\n     if (options.aliasKeywords) {\n         passes.add(aliasKeywords);\n     }\n     passes.add(markUnnormalized);\n     if (options.coalesceVariableNames) {\n         passes.add(coalesceVariableNames);\n         if (options.foldConstants) {\n             passes.add(peepholeOptimizations);\n         }\n     }\n     if (options.collapseVariableDeclarations) {\n         passes.add(collapseVariableDeclarations);\n     }\n     passes.add(denormalize);\n     if (options.instrumentationTemplate !\u003d null) {\n         passes.add(instrumentFunctions);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n         passes.add(invertContextualRenaming);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n         passes.add(renameVars);\n     }\n     if (options.groupVariableDeclarations) {\n         passes.add(groupVariableDeclarations);\n     }\n     if (options.processObjectPropertyString) {\n         passes.add(objectPropertyStringPostprocess);\n     }\n     if (options.labelRenaming) {\n         passes.add(renameLabels);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n         passes.add(nameUnmappedAnonymousFunctions);\n     }\n     if (options.checkSymbols) {\n         passes.add(sanityCheckVars);\n     }\n     return passes;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "211c8c6eae5117f156aa348d843ce688b80f5ea7": {
      "type": "Ybodychange",
      "commitMessage": "\nTemporary disable passes that requires path checking.\n\nR\u003dnicksantos\nDELTA\u003d19  (15 added, 0 deleted, 4 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d566\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@801 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/19/11, 2:28 PM",
      "commitName": "211c8c6eae5117f156aa348d843ce688b80f5ea7",
      "commitAuthor": "acleung@google.com",
      "commitDateOld": "2/14/11, 1:06 PM",
      "commitNameOld": "761072d3253078706cfadf0cde6237bb268a309c",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 5.06,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getOptimizations() {\n    List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n    if (options.runtimeTypeCheck) {\n        passes.add(runtimeTypeCheck);\n    }\n    passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n    if (!options.idGenerators.isEmpty()) {\n        passes.add(replaceIdGenerators);\n    }\n    if (options.optimizeArgumentsArray) {\n        passes.add(optimizeArgumentsArray);\n    }\n    if (options.closurePass \u0026\u0026 (options.removeAbstractMethods || options.removeClosureAsserts)) {\n        passes.add(closureCodeRemoval);\n    }\n    if (options.collapseProperties) {\n        passes.add(collapseProperties);\n    }\n    if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n        passes.add(replaceStrings);\n    }\n    if (options.tightenTypes) {\n        passes.add(tightenTypesBuilder);\n    }\n    if (options.disambiguateProperties) {\n        passes.add(disambiguateProperties);\n    }\n    if (options.computeFunctionSideEffects) {\n        passes.add(markPureFunctions);\n    } else if (options.markNoSideEffectCalls) {\n        passes.add(markNoSideEffectCalls);\n    }\n    if (options.chainCalls) {\n        passes.add(chainCalls);\n    }\n    if (options.inlineConstantVars) {\n        passes.add(checkConsts);\n    }\n    if (options.ignoreCajaProperties) {\n        passes.add(ignoreCajaProperties);\n    }\n    assertAllOneTimePasses(passes);\n    if (options.smartNameRemoval || options.reportPath !\u003d null) {\n        passes.addAll(getCodeRemovingPasses());\n        passes.add(smartNamePass);\n    }\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.devirtualizePrototypeMethods) {\n        passes.add(devirtualizePrototypeMethods);\n    }\n    if (options.optimizeCalls || options.optimizeParameters || options.optimizeReturns) {\n        passes.add(optimizeCalls);\n    }\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n    }\n    passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n    if (options.specializeInitialModule) {\n        passes.addAll(getMainOptimizationLoop());\n        if (options.crossModuleCodeMotion) {\n            passes.add(crossModuleCodeMotion);\n        }\n        if (options.crossModuleMethodMotion) {\n            passes.add(crossModuleMethodMotion);\n        }\n        passes.add(specializeInitialModule.makeOneTimePass());\n    }\n    passes.addAll(getMainOptimizationLoop());\n    passes.add(createEmptyPass(\"beforeModuleMotion\"));\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.crossModuleMethodMotion) {\n        passes.add(crossModuleMethodMotion);\n    }\n    passes.add(createEmptyPass(\"afterModuleMotion\"));\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n    }\n    if (options.collapseAnonymousFunctions) {\n        passes.add(collapseAnonymousFunctions);\n    }\n    if (options.moveFunctionDeclarations) {\n        passes.add(moveFunctionDeclarations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n        passes.add(nameMappedAnonymousFunctions);\n    }\n    if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n        passes.add(extractPrototypeMemberDeclarations);\n    }\n    if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n        passes.add(ambiguateProperties);\n    }\n    if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n        passes.add(renameProperties);\n    }\n    if (options.reserveRawExports) {\n        passes.add(gatherRawExports);\n    }\n    if (options.convertToDottedProperties) {\n        passes.add(convertToDottedProperties);\n    }\n    if (options.rewriteFunctionExpressions) {\n        passes.add(rewriteFunctionExpressions);\n    }\n    if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n        passes.add(aliasStrings);\n    }\n    if (options.aliasExternals) {\n        passes.add(aliasExternals);\n    }\n    if (options.aliasKeywords) {\n        passes.add(aliasKeywords);\n    }\n    passes.add(markUnnormalized);\n    if (options.coalesceVariableNames) {\n        passes.add(coalesceVariableNames);\n        if (options.foldConstants) {\n            passes.add(peepholeOptimizations);\n        }\n    }\n    if (options.collapseVariableDeclarations) {\n        passes.add(collapseVariableDeclarations);\n    }\n    passes.add(denormalize);\n    if (options.instrumentationTemplate !\u003d null) {\n        passes.add(instrumentFunctions);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n        passes.add(invertContextualRenaming);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n        passes.add(renameVars);\n    }\n    if (options.groupVariableDeclarations) {\n        passes.add(groupVariableDeclarations);\n    }\n    if (options.processObjectPropertyString) {\n        passes.add(objectPropertyStringPostprocess);\n    }\n    if (options.labelRenaming) {\n        passes.add(renameLabels);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n        passes.add(nameUnmappedAnonymousFunctions);\n    }\n    if (options.checkSymbols) {\n        passes.add(sanityCheckVars);\n    }\n    return passes;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 318,
      "functionName": "getOptimizations",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,161 +1,155 @@\n @Override\n protected List\u003cPassFactory\u003e getOptimizations() {\n     List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n     if (options.runtimeTypeCheck) {\n         passes.add(runtimeTypeCheck);\n     }\n     passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n     if (!options.idGenerators.isEmpty()) {\n         passes.add(replaceIdGenerators);\n     }\n     if (options.optimizeArgumentsArray) {\n         passes.add(optimizeArgumentsArray);\n     }\n     if (options.closurePass \u0026\u0026 (options.removeAbstractMethods || options.removeClosureAsserts)) {\n         passes.add(closureCodeRemoval);\n     }\n     if (options.collapseProperties) {\n         passes.add(collapseProperties);\n     }\n     if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n         passes.add(replaceStrings);\n     }\n     if (options.tightenTypes) {\n         passes.add(tightenTypesBuilder);\n     }\n     if (options.disambiguateProperties) {\n         passes.add(disambiguateProperties);\n     }\n     if (options.computeFunctionSideEffects) {\n         passes.add(markPureFunctions);\n     } else if (options.markNoSideEffectCalls) {\n         passes.add(markNoSideEffectCalls);\n     }\n     if (options.chainCalls) {\n         passes.add(chainCalls);\n     }\n     if (options.inlineConstantVars) {\n         passes.add(checkConsts);\n     }\n     if (options.ignoreCajaProperties) {\n         passes.add(ignoreCajaProperties);\n     }\n     assertAllOneTimePasses(passes);\n     if (options.smartNameRemoval || options.reportPath !\u003d null) {\n         passes.addAll(getCodeRemovingPasses());\n         passes.add(smartNamePass);\n     }\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.devirtualizePrototypeMethods) {\n         passes.add(devirtualizePrototypeMethods);\n     }\n     if (options.optimizeCalls || options.optimizeParameters || options.optimizeReturns) {\n         passes.add(optimizeCalls);\n     }\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n     }\n     passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n     if (options.specializeInitialModule) {\n         passes.addAll(getMainOptimizationLoop());\n         if (options.crossModuleCodeMotion) {\n             passes.add(crossModuleCodeMotion);\n         }\n         if (options.crossModuleMethodMotion) {\n             passes.add(crossModuleMethodMotion);\n         }\n         passes.add(specializeInitialModule.makeOneTimePass());\n     }\n     passes.addAll(getMainOptimizationLoop());\n     passes.add(createEmptyPass(\"beforeModuleMotion\"));\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.crossModuleMethodMotion) {\n         passes.add(crossModuleMethodMotion);\n     }\n     passes.add(createEmptyPass(\"afterModuleMotion\"));\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n     }\n-    if (options.flowSensitiveInlineVariables) {\n-        passes.add(flowSensitiveInlineVariables);\n-        if (options.removeUnusedVars) {\n-            passes.add(removeUnusedVars);\n-        }\n-    }\n     if (options.collapseAnonymousFunctions) {\n         passes.add(collapseAnonymousFunctions);\n     }\n     if (options.moveFunctionDeclarations) {\n         passes.add(moveFunctionDeclarations);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n         passes.add(nameMappedAnonymousFunctions);\n     }\n     if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n         passes.add(extractPrototypeMemberDeclarations);\n     }\n     if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n         passes.add(ambiguateProperties);\n     }\n     if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n         passes.add(renameProperties);\n     }\n     if (options.reserveRawExports) {\n         passes.add(gatherRawExports);\n     }\n     if (options.convertToDottedProperties) {\n         passes.add(convertToDottedProperties);\n     }\n     if (options.rewriteFunctionExpressions) {\n         passes.add(rewriteFunctionExpressions);\n     }\n     if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n         passes.add(aliasStrings);\n     }\n     if (options.aliasExternals) {\n         passes.add(aliasExternals);\n     }\n     if (options.aliasKeywords) {\n         passes.add(aliasKeywords);\n     }\n     passes.add(markUnnormalized);\n     if (options.coalesceVariableNames) {\n         passes.add(coalesceVariableNames);\n         if (options.foldConstants) {\n             passes.add(peepholeOptimizations);\n         }\n     }\n     if (options.collapseVariableDeclarations) {\n         passes.add(collapseVariableDeclarations);\n     }\n     passes.add(denormalize);\n     if (options.instrumentationTemplate !\u003d null) {\n         passes.add(instrumentFunctions);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n         passes.add(invertContextualRenaming);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n         passes.add(renameVars);\n     }\n     if (options.groupVariableDeclarations) {\n         passes.add(groupVariableDeclarations);\n     }\n     if (options.processObjectPropertyString) {\n         passes.add(objectPropertyStringPostprocess);\n     }\n     if (options.labelRenaming) {\n         passes.add(renameLabels);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n         passes.add(nameUnmappedAnonymousFunctions);\n     }\n     if (options.checkSymbols) {\n         passes.add(sanityCheckVars);\n     }\n     return passes;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b823ff368e21fbd36344db07f512d55826eded37": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nSmart name removal is too aggressive with code inlined into global scope.\n\n*** Original change description ***\n\n-Run SmartNameRemoval a second time, after the optimization loop.\n-This causes goog.events to be compiled down to nothing when compiled on its own.\n-Caused a .1% decrease for superpudu and an 4 byte increase for mobile docs\n-Feel free to try compiling //experimental/users/agrieve/jstweaks:bin2 with\nand without this change to see it in action.\n\nR\u003dnicksantos\nDELTA\u003d24  (0 added, 24 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d363\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@732 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/26/11, 8:38 AM",
      "commitName": "b823ff368e21fbd36344db07f512d55826eded37",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "1/19/11, 11:13 AM",
      "commitNameOld": "a4550d0e0c8352a37f7d8343dd26593426fe5ae5",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 6.89,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getOptimizations() {\n    List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n    if (options.runtimeTypeCheck) {\n        passes.add(runtimeTypeCheck);\n    }\n    passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n    if (!options.idGenerators.isEmpty()) {\n        passes.add(replaceIdGenerators);\n    }\n    if (options.optimizeArgumentsArray) {\n        passes.add(optimizeArgumentsArray);\n    }\n    if (options.closurePass \u0026\u0026 (options.removeAbstractMethods || options.removeClosureAsserts)) {\n        passes.add(closureCodeRemoval);\n    }\n    if (options.collapseProperties) {\n        passes.add(collapseProperties);\n    }\n    if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n        passes.add(replaceStrings);\n    }\n    if (options.tightenTypes) {\n        passes.add(tightenTypesBuilder);\n    }\n    if (options.disambiguateProperties) {\n        passes.add(disambiguateProperties);\n    }\n    if (options.computeFunctionSideEffects) {\n        passes.add(markPureFunctions);\n    } else if (options.markNoSideEffectCalls) {\n        passes.add(markNoSideEffectCalls);\n    }\n    if (options.chainCalls) {\n        passes.add(chainCalls);\n    }\n    if (options.inlineConstantVars) {\n        passes.add(checkConsts);\n    }\n    if (options.ignoreCajaProperties) {\n        passes.add(ignoreCajaProperties);\n    }\n    assertAllOneTimePasses(passes);\n    if (options.smartNameRemoval || options.reportPath !\u003d null) {\n        passes.addAll(getCodeRemovingPasses());\n        passes.add(smartNamePass);\n    }\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.devirtualizePrototypeMethods) {\n        passes.add(devirtualizePrototypeMethods);\n    }\n    if (options.optimizeCalls || options.optimizeParameters || options.optimizeReturns) {\n        passes.add(optimizeCalls);\n    }\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n    }\n    passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n    if (options.specializeInitialModule) {\n        passes.addAll(getMainOptimizationLoop());\n        if (options.crossModuleCodeMotion) {\n            passes.add(crossModuleCodeMotion);\n        }\n        if (options.crossModuleMethodMotion) {\n            passes.add(crossModuleMethodMotion);\n        }\n        passes.add(specializeInitialModule.makeOneTimePass());\n    }\n    passes.addAll(getMainOptimizationLoop());\n    passes.add(createEmptyPass(\"beforeModuleMotion\"));\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.crossModuleMethodMotion) {\n        passes.add(crossModuleMethodMotion);\n    }\n    passes.add(createEmptyPass(\"afterModuleMotion\"));\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n    }\n    if (options.flowSensitiveInlineVariables) {\n        passes.add(flowSensitiveInlineVariables);\n        if (options.removeUnusedVars) {\n            passes.add(removeUnusedVars);\n        }\n    }\n    if (options.collapseAnonymousFunctions) {\n        passes.add(collapseAnonymousFunctions);\n    }\n    if (options.moveFunctionDeclarations) {\n        passes.add(moveFunctionDeclarations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n        passes.add(nameMappedAnonymousFunctions);\n    }\n    if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n        passes.add(extractPrototypeMemberDeclarations);\n    }\n    if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n        passes.add(ambiguateProperties);\n    }\n    if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n        passes.add(renameProperties);\n    }\n    if (options.reserveRawExports) {\n        passes.add(gatherRawExports);\n    }\n    if (options.convertToDottedProperties) {\n        passes.add(convertToDottedProperties);\n    }\n    if (options.rewriteFunctionExpressions) {\n        passes.add(rewriteFunctionExpressions);\n    }\n    if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n        passes.add(aliasStrings);\n    }\n    if (options.aliasExternals) {\n        passes.add(aliasExternals);\n    }\n    if (options.aliasKeywords) {\n        passes.add(aliasKeywords);\n    }\n    passes.add(markUnnormalized);\n    if (options.coalesceVariableNames) {\n        passes.add(coalesceVariableNames);\n        if (options.foldConstants) {\n            passes.add(peepholeOptimizations);\n        }\n    }\n    if (options.collapseVariableDeclarations) {\n        passes.add(collapseVariableDeclarations);\n    }\n    passes.add(denormalize);\n    if (options.instrumentationTemplate !\u003d null) {\n        passes.add(instrumentFunctions);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n        passes.add(invertContextualRenaming);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n        passes.add(renameVars);\n    }\n    if (options.groupVariableDeclarations) {\n        passes.add(groupVariableDeclarations);\n    }\n    if (options.processObjectPropertyString) {\n        passes.add(objectPropertyStringPostprocess);\n    }\n    if (options.labelRenaming) {\n        passes.add(renameLabels);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n        passes.add(nameUnmappedAnonymousFunctions);\n    }\n    if (options.checkSymbols) {\n        passes.add(sanityCheckVars);\n    }\n    return passes;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 318,
      "functionName": "getOptimizations",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,164 +1,161 @@\n @Override\n protected List\u003cPassFactory\u003e getOptimizations() {\n     List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n     if (options.runtimeTypeCheck) {\n         passes.add(runtimeTypeCheck);\n     }\n     passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n     if (!options.idGenerators.isEmpty()) {\n         passes.add(replaceIdGenerators);\n     }\n     if (options.optimizeArgumentsArray) {\n         passes.add(optimizeArgumentsArray);\n     }\n     if (options.closurePass \u0026\u0026 (options.removeAbstractMethods || options.removeClosureAsserts)) {\n         passes.add(closureCodeRemoval);\n     }\n     if (options.collapseProperties) {\n         passes.add(collapseProperties);\n     }\n     if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n         passes.add(replaceStrings);\n     }\n     if (options.tightenTypes) {\n         passes.add(tightenTypesBuilder);\n     }\n     if (options.disambiguateProperties) {\n         passes.add(disambiguateProperties);\n     }\n     if (options.computeFunctionSideEffects) {\n         passes.add(markPureFunctions);\n     } else if (options.markNoSideEffectCalls) {\n         passes.add(markNoSideEffectCalls);\n     }\n     if (options.chainCalls) {\n         passes.add(chainCalls);\n     }\n     if (options.inlineConstantVars) {\n         passes.add(checkConsts);\n     }\n     if (options.ignoreCajaProperties) {\n         passes.add(ignoreCajaProperties);\n     }\n     assertAllOneTimePasses(passes);\n     if (options.smartNameRemoval || options.reportPath !\u003d null) {\n         passes.addAll(getCodeRemovingPasses());\n         passes.add(smartNamePass);\n     }\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.devirtualizePrototypeMethods) {\n         passes.add(devirtualizePrototypeMethods);\n     }\n     if (options.optimizeCalls || options.optimizeParameters || options.optimizeReturns) {\n         passes.add(optimizeCalls);\n     }\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n     }\n     passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n     if (options.specializeInitialModule) {\n         passes.addAll(getMainOptimizationLoop());\n         if (options.crossModuleCodeMotion) {\n             passes.add(crossModuleCodeMotion);\n         }\n         if (options.crossModuleMethodMotion) {\n             passes.add(crossModuleMethodMotion);\n         }\n         passes.add(specializeInitialModule.makeOneTimePass());\n     }\n     passes.addAll(getMainOptimizationLoop());\n     passes.add(createEmptyPass(\"beforeModuleMotion\"));\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.crossModuleMethodMotion) {\n         passes.add(crossModuleMethodMotion);\n     }\n     passes.add(createEmptyPass(\"afterModuleMotion\"));\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n     }\n     if (options.flowSensitiveInlineVariables) {\n         passes.add(flowSensitiveInlineVariables);\n         if (options.removeUnusedVars) {\n             passes.add(removeUnusedVars);\n         }\n     }\n-    if (options.smartNameRemoval) {\n-        passes.add(smartNamePass2);\n-    }\n     if (options.collapseAnonymousFunctions) {\n         passes.add(collapseAnonymousFunctions);\n     }\n     if (options.moveFunctionDeclarations) {\n         passes.add(moveFunctionDeclarations);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n         passes.add(nameMappedAnonymousFunctions);\n     }\n     if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n         passes.add(extractPrototypeMemberDeclarations);\n     }\n     if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n         passes.add(ambiguateProperties);\n     }\n     if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n         passes.add(renameProperties);\n     }\n     if (options.reserveRawExports) {\n         passes.add(gatherRawExports);\n     }\n     if (options.convertToDottedProperties) {\n         passes.add(convertToDottedProperties);\n     }\n     if (options.rewriteFunctionExpressions) {\n         passes.add(rewriteFunctionExpressions);\n     }\n     if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n         passes.add(aliasStrings);\n     }\n     if (options.aliasExternals) {\n         passes.add(aliasExternals);\n     }\n     if (options.aliasKeywords) {\n         passes.add(aliasKeywords);\n     }\n     passes.add(markUnnormalized);\n     if (options.coalesceVariableNames) {\n         passes.add(coalesceVariableNames);\n         if (options.foldConstants) {\n             passes.add(peepholeOptimizations);\n         }\n     }\n     if (options.collapseVariableDeclarations) {\n         passes.add(collapseVariableDeclarations);\n     }\n     passes.add(denormalize);\n     if (options.instrumentationTemplate !\u003d null) {\n         passes.add(instrumentFunctions);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n         passes.add(invertContextualRenaming);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n         passes.add(renameVars);\n     }\n     if (options.groupVariableDeclarations) {\n         passes.add(groupVariableDeclarations);\n     }\n     if (options.processObjectPropertyString) {\n         passes.add(objectPropertyStringPostprocess);\n     }\n     if (options.labelRenaming) {\n         passes.add(renameLabels);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n         passes.add(nameUnmappedAnonymousFunctions);\n     }\n     if (options.checkSymbols) {\n         passes.add(sanityCheckVars);\n     }\n     return passes;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f5b974651c6b4873c8df103572587a95d9be282c": {
      "type": "Ybodychange",
      "commitMessage": "\n-Run SmartNameRemoval a second time, after the optimization loop.\n-This causes goog.events to be compiled down to nothing when compiled on its own.\n\nR\u003dnicksantos\nDELTA\u003d25  (25 added, 0 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d283\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@698 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/14/11, 6:14 AM",
      "commitName": "f5b974651c6b4873c8df103572587a95d9be282c",
      "commitAuthor": "agrieve@google.com",
      "commitDateOld": "1/10/11, 11:27 AM",
      "commitNameOld": "d24a652c89b3798648fade2401b741eae981d535",
      "commitAuthorOld": "agrieve@google.com",
      "daysBetweenCommits": 3.78,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getOptimizations() {\n    List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n    if (options.runtimeTypeCheck) {\n        passes.add(runtimeTypeCheck);\n    }\n    passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n    if (!options.idGenerators.isEmpty()) {\n        passes.add(replaceIdGenerators);\n    }\n    if (options.optimizeArgumentsArray) {\n        passes.add(optimizeArgumentsArray);\n    }\n    if (options.closurePass \u0026\u0026 (options.removeAbstractMethods || options.removeClosureAsserts)) {\n        passes.add(closureCodeRemoval);\n    }\n    if (options.collapseProperties) {\n        passes.add(collapseProperties);\n    }\n    if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n        passes.add(replaceStrings);\n    }\n    if (options.tightenTypes) {\n        passes.add(tightenTypesBuilder);\n    }\n    if (options.disambiguateProperties) {\n        passes.add(disambiguateProperties);\n    }\n    if (options.computeFunctionSideEffects) {\n        passes.add(markPureFunctions);\n    } else if (options.markNoSideEffectCalls) {\n        passes.add(markNoSideEffectCalls);\n    }\n    if (options.chainCalls) {\n        passes.add(chainCalls);\n    }\n    if (options.inlineConstantVars) {\n        passes.add(checkConsts);\n    }\n    if (options.ignoreCajaProperties) {\n        passes.add(ignoreCajaProperties);\n    }\n    assertAllOneTimePasses(passes);\n    if (options.smartNameRemoval || options.reportPath !\u003d null) {\n        passes.addAll(getCodeRemovingPasses());\n        passes.add(smartNamePass);\n    }\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.devirtualizePrototypeMethods) {\n        passes.add(devirtualizePrototypeMethods);\n    }\n    if (options.optimizeCalls || options.optimizeParameters || options.optimizeReturns) {\n        passes.add(optimizeCalls);\n    }\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n    }\n    passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n    if (options.specializeInitialModule) {\n        passes.addAll(getMainOptimizationLoop());\n        if (options.crossModuleCodeMotion) {\n            passes.add(crossModuleCodeMotion);\n        }\n        if (options.crossModuleMethodMotion) {\n            passes.add(crossModuleMethodMotion);\n        }\n        passes.add(specializeInitialModule.makeOneTimePass());\n    }\n    passes.addAll(getMainOptimizationLoop());\n    passes.add(createEmptyPass(\"beforeModuleMotion\"));\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.crossModuleMethodMotion) {\n        passes.add(crossModuleMethodMotion);\n    }\n    passes.add(createEmptyPass(\"afterModuleMotion\"));\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n    }\n    if (options.flowSensitiveInlineVariables) {\n        passes.add(flowSensitiveInlineVariables);\n        if (options.removeUnusedVars) {\n            passes.add(removeUnusedVars);\n        }\n    }\n    if (options.smartNameRemoval) {\n        passes.add(smartNamePass2);\n    }\n    if (options.collapseAnonymousFunctions) {\n        passes.add(collapseAnonymousFunctions);\n    }\n    if (options.moveFunctionDeclarations) {\n        passes.add(moveFunctionDeclarations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n        passes.add(nameMappedAnonymousFunctions);\n    }\n    if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n        passes.add(extractPrototypeMemberDeclarations);\n    }\n    if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n        passes.add(ambiguateProperties);\n    }\n    if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n        passes.add(renameProperties);\n    }\n    if (options.reserveRawExports) {\n        passes.add(gatherRawExports);\n    }\n    if (options.convertToDottedProperties) {\n        passes.add(convertToDottedProperties);\n    }\n    if (options.rewriteFunctionExpressions) {\n        passes.add(rewriteFunctionExpressions);\n    }\n    if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n        passes.add(aliasStrings);\n    }\n    if (options.aliasExternals) {\n        passes.add(aliasExternals);\n    }\n    if (options.aliasKeywords) {\n        passes.add(aliasKeywords);\n    }\n    passes.add(markUnnormalized);\n    if (options.coalesceVariableNames) {\n        passes.add(coalesceVariableNames);\n        if (options.foldConstants) {\n            passes.add(peepholeOptimizations);\n        }\n    }\n    if (options.collapseVariableDeclarations) {\n        passes.add(collapseVariableDeclarations);\n    }\n    passes.add(denormalize);\n    if (options.instrumentationTemplate !\u003d null) {\n        passes.add(instrumentFunctions);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n        passes.add(invertContextualRenaming);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n        passes.add(renameVars);\n    }\n    if (options.groupVariableDeclarations) {\n        passes.add(groupVariableDeclarations);\n    }\n    if (options.processObjectPropertyString) {\n        passes.add(objectPropertyStringPostprocess);\n    }\n    if (options.labelRenaming) {\n        passes.add(renameLabels);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n        passes.add(nameUnmappedAnonymousFunctions);\n    }\n    if (options.checkSymbols) {\n        passes.add(sanityCheckVars);\n    }\n    return passes;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 318,
      "functionName": "getOptimizations",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,161 +1,164 @@\n @Override\n protected List\u003cPassFactory\u003e getOptimizations() {\n     List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n     if (options.runtimeTypeCheck) {\n         passes.add(runtimeTypeCheck);\n     }\n     passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n     if (!options.idGenerators.isEmpty()) {\n         passes.add(replaceIdGenerators);\n     }\n     if (options.optimizeArgumentsArray) {\n         passes.add(optimizeArgumentsArray);\n     }\n     if (options.closurePass \u0026\u0026 (options.removeAbstractMethods || options.removeClosureAsserts)) {\n         passes.add(closureCodeRemoval);\n     }\n     if (options.collapseProperties) {\n         passes.add(collapseProperties);\n     }\n     if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n         passes.add(replaceStrings);\n     }\n     if (options.tightenTypes) {\n         passes.add(tightenTypesBuilder);\n     }\n     if (options.disambiguateProperties) {\n         passes.add(disambiguateProperties);\n     }\n     if (options.computeFunctionSideEffects) {\n         passes.add(markPureFunctions);\n     } else if (options.markNoSideEffectCalls) {\n         passes.add(markNoSideEffectCalls);\n     }\n     if (options.chainCalls) {\n         passes.add(chainCalls);\n     }\n     if (options.inlineConstantVars) {\n         passes.add(checkConsts);\n     }\n     if (options.ignoreCajaProperties) {\n         passes.add(ignoreCajaProperties);\n     }\n     assertAllOneTimePasses(passes);\n     if (options.smartNameRemoval || options.reportPath !\u003d null) {\n         passes.addAll(getCodeRemovingPasses());\n         passes.add(smartNamePass);\n     }\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.devirtualizePrototypeMethods) {\n         passes.add(devirtualizePrototypeMethods);\n     }\n     if (options.optimizeCalls || options.optimizeParameters || options.optimizeReturns) {\n         passes.add(optimizeCalls);\n     }\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n     }\n     passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n     if (options.specializeInitialModule) {\n         passes.addAll(getMainOptimizationLoop());\n         if (options.crossModuleCodeMotion) {\n             passes.add(crossModuleCodeMotion);\n         }\n         if (options.crossModuleMethodMotion) {\n             passes.add(crossModuleMethodMotion);\n         }\n         passes.add(specializeInitialModule.makeOneTimePass());\n     }\n     passes.addAll(getMainOptimizationLoop());\n     passes.add(createEmptyPass(\"beforeModuleMotion\"));\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.crossModuleMethodMotion) {\n         passes.add(crossModuleMethodMotion);\n     }\n     passes.add(createEmptyPass(\"afterModuleMotion\"));\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n     }\n     if (options.flowSensitiveInlineVariables) {\n         passes.add(flowSensitiveInlineVariables);\n         if (options.removeUnusedVars) {\n             passes.add(removeUnusedVars);\n         }\n     }\n+    if (options.smartNameRemoval) {\n+        passes.add(smartNamePass2);\n+    }\n     if (options.collapseAnonymousFunctions) {\n         passes.add(collapseAnonymousFunctions);\n     }\n     if (options.moveFunctionDeclarations) {\n         passes.add(moveFunctionDeclarations);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n         passes.add(nameMappedAnonymousFunctions);\n     }\n     if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n         passes.add(extractPrototypeMemberDeclarations);\n     }\n     if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n         passes.add(ambiguateProperties);\n     }\n     if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n         passes.add(renameProperties);\n     }\n     if (options.reserveRawExports) {\n         passes.add(gatherRawExports);\n     }\n     if (options.convertToDottedProperties) {\n         passes.add(convertToDottedProperties);\n     }\n     if (options.rewriteFunctionExpressions) {\n         passes.add(rewriteFunctionExpressions);\n     }\n     if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n         passes.add(aliasStrings);\n     }\n     if (options.aliasExternals) {\n         passes.add(aliasExternals);\n     }\n     if (options.aliasKeywords) {\n         passes.add(aliasKeywords);\n     }\n     passes.add(markUnnormalized);\n     if (options.coalesceVariableNames) {\n         passes.add(coalesceVariableNames);\n         if (options.foldConstants) {\n             passes.add(peepholeOptimizations);\n         }\n     }\n     if (options.collapseVariableDeclarations) {\n         passes.add(collapseVariableDeclarations);\n     }\n     passes.add(denormalize);\n     if (options.instrumentationTemplate !\u003d null) {\n         passes.add(instrumentFunctions);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n         passes.add(invertContextualRenaming);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n         passes.add(renameVars);\n     }\n     if (options.groupVariableDeclarations) {\n         passes.add(groupVariableDeclarations);\n     }\n     if (options.processObjectPropertyString) {\n         passes.add(objectPropertyStringPostprocess);\n     }\n     if (options.labelRenaming) {\n         passes.add(renameLabels);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n         passes.add(nameUnmappedAnonymousFunctions);\n     }\n     if (options.checkSymbols) {\n         passes.add(sanityCheckVars);\n     }\n     return passes;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5741fcbabf37d54f3d37f4b497b44527ede76be1": {
      "type": "Ybodychange",
      "commitMessage": "\nAfter coalesce variable names, rerun peephole passes.\nFixes issue 299.\n\nR\u003dnicksantos\nDELTA\u003d71  (71 added, 0 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d228\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@677 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/7/11, 1:09 PM",
      "commitName": "5741fcbabf37d54f3d37f4b497b44527ede76be1",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "12/16/10, 1:20 PM",
      "commitNameOld": "8936be78f9ecad965b20fbf9ea78eda49514454e",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 21.99,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getOptimizations() {\n    List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n    if (options.runtimeTypeCheck) {\n        passes.add(runtimeTypeCheck);\n    }\n    passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n    if (!options.idGenerators.isEmpty()) {\n        passes.add(replaceIdGenerators);\n    }\n    if (options.optimizeArgumentsArray) {\n        passes.add(optimizeArgumentsArray);\n    }\n    if (options.closurePass \u0026\u0026 (options.removeAbstractMethods || options.removeClosureAsserts)) {\n        passes.add(closureCodeRemoval);\n    }\n    if (options.collapseProperties) {\n        passes.add(collapseProperties);\n    }\n    if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n        passes.add(replaceStrings);\n    }\n    if (options.tightenTypes) {\n        passes.add(tightenTypesBuilder);\n    }\n    if (options.disambiguateProperties) {\n        passes.add(disambiguateProperties);\n    }\n    if (options.computeFunctionSideEffects) {\n        passes.add(markPureFunctions);\n    } else if (options.markNoSideEffectCalls) {\n        passes.add(markNoSideEffectCalls);\n    }\n    if (options.chainCalls) {\n        passes.add(chainCalls);\n    }\n    if (options.inlineConstantVars) {\n        passes.add(checkConsts);\n    }\n    if (options.ignoreCajaProperties) {\n        passes.add(ignoreCajaProperties);\n    }\n    assertAllOneTimePasses(passes);\n    if (options.smartNameRemoval || options.reportPath !\u003d null) {\n        passes.addAll(getCodeRemovingPasses());\n        passes.add(smartNamePass);\n    }\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.devirtualizePrototypeMethods) {\n        passes.add(devirtualizePrototypeMethods);\n    }\n    if (options.optimizeCalls || options.optimizeParameters || options.optimizeReturns) {\n        passes.add(optimizeCalls);\n    }\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n    }\n    passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n    if (options.specializeInitialModule) {\n        passes.addAll(getMainOptimizationLoop());\n        if (options.crossModuleCodeMotion) {\n            passes.add(crossModuleCodeMotion);\n        }\n        if (options.crossModuleMethodMotion) {\n            passes.add(crossModuleMethodMotion);\n        }\n        passes.add(specializeInitialModule.makeOneTimePass());\n    }\n    passes.addAll(getMainOptimizationLoop());\n    passes.add(createEmptyPass(\"beforeModuleMotion\"));\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.crossModuleMethodMotion) {\n        passes.add(crossModuleMethodMotion);\n    }\n    passes.add(createEmptyPass(\"afterModuleMotion\"));\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n    }\n    if (options.flowSensitiveInlineVariables) {\n        passes.add(flowSensitiveInlineVariables);\n        if (options.removeUnusedVars) {\n            passes.add(removeUnusedVars);\n        }\n    }\n    if (options.collapseAnonymousFunctions) {\n        passes.add(collapseAnonymousFunctions);\n    }\n    if (options.moveFunctionDeclarations) {\n        passes.add(moveFunctionDeclarations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n        passes.add(nameMappedAnonymousFunctions);\n    }\n    if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n        passes.add(extractPrototypeMemberDeclarations);\n    }\n    if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n        passes.add(ambiguateProperties);\n    }\n    if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n        passes.add(renameProperties);\n    }\n    if (options.reserveRawExports) {\n        passes.add(gatherRawExports);\n    }\n    if (options.convertToDottedProperties) {\n        passes.add(convertToDottedProperties);\n    }\n    if (options.rewriteFunctionExpressions) {\n        passes.add(rewriteFunctionExpressions);\n    }\n    if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n        passes.add(aliasStrings);\n    }\n    if (options.aliasExternals) {\n        passes.add(aliasExternals);\n    }\n    if (options.aliasKeywords) {\n        passes.add(aliasKeywords);\n    }\n    passes.add(markUnnormalized);\n    if (options.coalesceVariableNames) {\n        passes.add(coalesceVariableNames);\n        if (options.foldConstants) {\n            passes.add(peepholeOptimizations);\n        }\n    }\n    if (options.collapseVariableDeclarations) {\n        passes.add(collapseVariableDeclarations);\n    }\n    passes.add(denormalize);\n    if (options.instrumentationTemplate !\u003d null) {\n        passes.add(instrumentFunctions);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n        passes.add(invertContextualRenaming);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n        passes.add(renameVars);\n    }\n    if (options.groupVariableDeclarations) {\n        passes.add(groupVariableDeclarations);\n    }\n    if (options.processObjectPropertyString) {\n        passes.add(objectPropertyStringPostprocess);\n    }\n    if (options.labelRenaming) {\n        passes.add(renameLabels);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n        passes.add(nameUnmappedAnonymousFunctions);\n    }\n    if (options.checkSymbols) {\n        passes.add(sanityCheckVars);\n    }\n    return passes;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 314,
      "functionName": "getOptimizations",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,158 +1,161 @@\n @Override\n protected List\u003cPassFactory\u003e getOptimizations() {\n     List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n     if (options.runtimeTypeCheck) {\n         passes.add(runtimeTypeCheck);\n     }\n     passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n     if (!options.idGenerators.isEmpty()) {\n         passes.add(replaceIdGenerators);\n     }\n     if (options.optimizeArgumentsArray) {\n         passes.add(optimizeArgumentsArray);\n     }\n     if (options.closurePass \u0026\u0026 (options.removeAbstractMethods || options.removeClosureAsserts)) {\n         passes.add(closureCodeRemoval);\n     }\n     if (options.collapseProperties) {\n         passes.add(collapseProperties);\n     }\n     if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n         passes.add(replaceStrings);\n     }\n     if (options.tightenTypes) {\n         passes.add(tightenTypesBuilder);\n     }\n     if (options.disambiguateProperties) {\n         passes.add(disambiguateProperties);\n     }\n     if (options.computeFunctionSideEffects) {\n         passes.add(markPureFunctions);\n     } else if (options.markNoSideEffectCalls) {\n         passes.add(markNoSideEffectCalls);\n     }\n     if (options.chainCalls) {\n         passes.add(chainCalls);\n     }\n     if (options.inlineConstantVars) {\n         passes.add(checkConsts);\n     }\n     if (options.ignoreCajaProperties) {\n         passes.add(ignoreCajaProperties);\n     }\n     assertAllOneTimePasses(passes);\n     if (options.smartNameRemoval || options.reportPath !\u003d null) {\n         passes.addAll(getCodeRemovingPasses());\n         passes.add(smartNamePass);\n     }\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.devirtualizePrototypeMethods) {\n         passes.add(devirtualizePrototypeMethods);\n     }\n     if (options.optimizeCalls || options.optimizeParameters || options.optimizeReturns) {\n         passes.add(optimizeCalls);\n     }\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n     }\n     passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n     if (options.specializeInitialModule) {\n         passes.addAll(getMainOptimizationLoop());\n         if (options.crossModuleCodeMotion) {\n             passes.add(crossModuleCodeMotion);\n         }\n         if (options.crossModuleMethodMotion) {\n             passes.add(crossModuleMethodMotion);\n         }\n         passes.add(specializeInitialModule.makeOneTimePass());\n     }\n     passes.addAll(getMainOptimizationLoop());\n     passes.add(createEmptyPass(\"beforeModuleMotion\"));\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.crossModuleMethodMotion) {\n         passes.add(crossModuleMethodMotion);\n     }\n     passes.add(createEmptyPass(\"afterModuleMotion\"));\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n     }\n     if (options.flowSensitiveInlineVariables) {\n         passes.add(flowSensitiveInlineVariables);\n         if (options.removeUnusedVars) {\n             passes.add(removeUnusedVars);\n         }\n     }\n     if (options.collapseAnonymousFunctions) {\n         passes.add(collapseAnonymousFunctions);\n     }\n     if (options.moveFunctionDeclarations) {\n         passes.add(moveFunctionDeclarations);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n         passes.add(nameMappedAnonymousFunctions);\n     }\n     if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n         passes.add(extractPrototypeMemberDeclarations);\n     }\n     if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n         passes.add(ambiguateProperties);\n     }\n     if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n         passes.add(renameProperties);\n     }\n     if (options.reserveRawExports) {\n         passes.add(gatherRawExports);\n     }\n     if (options.convertToDottedProperties) {\n         passes.add(convertToDottedProperties);\n     }\n     if (options.rewriteFunctionExpressions) {\n         passes.add(rewriteFunctionExpressions);\n     }\n     if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n         passes.add(aliasStrings);\n     }\n     if (options.aliasExternals) {\n         passes.add(aliasExternals);\n     }\n     if (options.aliasKeywords) {\n         passes.add(aliasKeywords);\n     }\n     passes.add(markUnnormalized);\n     if (options.coalesceVariableNames) {\n         passes.add(coalesceVariableNames);\n+        if (options.foldConstants) {\n+            passes.add(peepholeOptimizations);\n+        }\n     }\n     if (options.collapseVariableDeclarations) {\n         passes.add(collapseVariableDeclarations);\n     }\n     passes.add(denormalize);\n     if (options.instrumentationTemplate !\u003d null) {\n         passes.add(instrumentFunctions);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n         passes.add(invertContextualRenaming);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n         passes.add(renameVars);\n     }\n     if (options.groupVariableDeclarations) {\n         passes.add(groupVariableDeclarations);\n     }\n     if (options.processObjectPropertyString) {\n         passes.add(objectPropertyStringPostprocess);\n     }\n     if (options.labelRenaming) {\n         passes.add(renameLabels);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n         passes.add(nameUnmappedAnonymousFunctions);\n     }\n     if (options.checkSymbols) {\n         passes.add(sanityCheckVars);\n     }\n     return passes;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f42e3e4ac6273bf9f25392b34de24672e5d56883": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nFixes tests.\n\n*** Original change description ***\n\nAutomated g4 rollback5.\n\n*** Reason for rollback ***\n\n\u003center reason for rollback\u003e\n\n*** Original change description ***\n\nAllow the removal of unused parameters from call sites.\n\nR\u003dacleung\nDELTA\u003d491  (456 added, 1 deleted, 34 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d68\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@597 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/6/10, 12:43 PM",
      "commitName": "f42e3e4ac6273bf9f25392b34de24672e5d56883",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "12/6/10, 10:59 AM",
      "commitNameOld": "3c3abc459ce1f720fee690dc8398b03701263c38",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getOptimizations() {\n    List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n    if (options.runtimeTypeCheck) {\n        passes.add(runtimeTypeCheck);\n    }\n    passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n    if (!options.idGenerators.isEmpty()) {\n        passes.add(replaceIdGenerators);\n    }\n    if (options.optimizeArgumentsArray) {\n        passes.add(optimizeArgumentsArray);\n    }\n    if (options.closurePass \u0026\u0026 (options.removeAbstractMethods || options.removeClosureAsserts)) {\n        passes.add(closureCodeRemoval);\n    }\n    if (options.collapseProperties) {\n        passes.add(collapseProperties);\n    }\n    if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n        passes.add(replaceStrings);\n    }\n    if (options.tightenTypes) {\n        passes.add(tightenTypesBuilder);\n    }\n    if (options.disambiguateProperties) {\n        passes.add(disambiguateProperties);\n    }\n    if (options.computeFunctionSideEffects) {\n        passes.add(markPureFunctions);\n    } else if (options.markNoSideEffectCalls) {\n        passes.add(markNoSideEffectCalls);\n    }\n    if (options.chainCalls) {\n        passes.add(chainCalls);\n    }\n    if (options.inlineConstantVars) {\n        passes.add(checkConsts);\n    }\n    if (options.ignoreCajaProperties) {\n        passes.add(ignoreCajaProperties);\n    }\n    assertAllOneTimePasses(passes);\n    if (options.smartNameRemoval || options.reportPath !\u003d null) {\n        passes.addAll(getCodeRemovingPasses());\n        passes.add(smartNamePass);\n    }\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.devirtualizePrototypeMethods) {\n        passes.add(devirtualizePrototypeMethods);\n    }\n    if (options.optimizeCalls || options.optimizeParameters || options.optimizeReturns) {\n        passes.add(optimizeCalls);\n    }\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n    }\n    passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n    if (options.specializeInitialModule) {\n        passes.addAll(getMainOptimizationLoop());\n        if (options.crossModuleCodeMotion) {\n            passes.add(crossModuleCodeMotion);\n        }\n        if (options.crossModuleMethodMotion) {\n            passes.add(crossModuleMethodMotion);\n        }\n        passes.add(specializeInitialModule.makeOneTimePass());\n    }\n    passes.addAll(getMainOptimizationLoop());\n    passes.add(createEmptyPass(\"beforeModuleMotion\"));\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.crossModuleMethodMotion) {\n        passes.add(crossModuleMethodMotion);\n    }\n    passes.add(createEmptyPass(\"afterModuleMotion\"));\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n    }\n    if (options.flowSensitiveInlineVariables) {\n        passes.add(flowSensitiveInlineVariables);\n        if (options.removeUnusedVars) {\n            passes.add(removeUnusedVars);\n        }\n    }\n    if (options.collapseAnonymousFunctions) {\n        passes.add(collapseAnonymousFunctions);\n    }\n    if (options.moveFunctionDeclarations) {\n        passes.add(moveFunctionDeclarations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n        passes.add(nameMappedAnonymousFunctions);\n    }\n    if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n        passes.add(extractPrototypeMemberDeclarations);\n    }\n    if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n        passes.add(ambiguateProperties);\n    }\n    if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n        passes.add(renameProperties);\n    }\n    if (options.reserveRawExports) {\n        passes.add(gatherRawExports);\n    }\n    if (options.convertToDottedProperties) {\n        passes.add(convertToDottedProperties);\n    }\n    if (options.rewriteFunctionExpressions) {\n        passes.add(rewriteFunctionExpressions);\n    }\n    if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n        passes.add(aliasStrings);\n    }\n    if (options.aliasExternals) {\n        passes.add(aliasExternals);\n    }\n    if (options.aliasKeywords) {\n        passes.add(aliasKeywords);\n    }\n    passes.add(markUnnormalized);\n    if (options.coalesceVariableNames) {\n        passes.add(coalesceVariableNames);\n    }\n    if (options.collapseVariableDeclarations) {\n        passes.add(collapseVariableDeclarations);\n    }\n    passes.add(denormalize);\n    if (options.instrumentationTemplate !\u003d null) {\n        passes.add(instrumentFunctions);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n        passes.add(invertContextualRenaming);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n        passes.add(renameVars);\n    }\n    if (options.groupVariableDeclarations) {\n        passes.add(groupVariableDeclarations);\n    }\n    if (options.processObjectPropertyString) {\n        passes.add(objectPropertyStringPostprocess);\n    }\n    if (options.labelRenaming) {\n        passes.add(renameLabels);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n        passes.add(nameUnmappedAnonymousFunctions);\n    }\n    if (options.checkSymbols) {\n        passes.add(sanityCheckVars);\n    }\n    return passes;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 313,
      "functionName": "getOptimizations",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,155 +1,158 @@\n @Override\n protected List\u003cPassFactory\u003e getOptimizations() {\n     List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n     if (options.runtimeTypeCheck) {\n         passes.add(runtimeTypeCheck);\n     }\n     passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n     if (!options.idGenerators.isEmpty()) {\n         passes.add(replaceIdGenerators);\n     }\n     if (options.optimizeArgumentsArray) {\n         passes.add(optimizeArgumentsArray);\n     }\n     if (options.closurePass \u0026\u0026 (options.removeAbstractMethods || options.removeClosureAsserts)) {\n         passes.add(closureCodeRemoval);\n     }\n     if (options.collapseProperties) {\n         passes.add(collapseProperties);\n     }\n     if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n         passes.add(replaceStrings);\n     }\n     if (options.tightenTypes) {\n         passes.add(tightenTypesBuilder);\n     }\n     if (options.disambiguateProperties) {\n         passes.add(disambiguateProperties);\n     }\n     if (options.computeFunctionSideEffects) {\n         passes.add(markPureFunctions);\n     } else if (options.markNoSideEffectCalls) {\n         passes.add(markNoSideEffectCalls);\n     }\n     if (options.chainCalls) {\n         passes.add(chainCalls);\n     }\n     if (options.inlineConstantVars) {\n         passes.add(checkConsts);\n     }\n     if (options.ignoreCajaProperties) {\n         passes.add(ignoreCajaProperties);\n     }\n     assertAllOneTimePasses(passes);\n     if (options.smartNameRemoval || options.reportPath !\u003d null) {\n         passes.addAll(getCodeRemovingPasses());\n         passes.add(smartNamePass);\n     }\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n-    if (options.devirtualizePrototypeMethods || options.optimizeReturns || options.optimizeParameters) {\n+    if (options.devirtualizePrototypeMethods) {\n+        passes.add(devirtualizePrototypeMethods);\n+    }\n+    if (options.optimizeCalls || options.optimizeParameters || options.optimizeReturns) {\n         passes.add(optimizeCalls);\n     }\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n     }\n     passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n     if (options.specializeInitialModule) {\n         passes.addAll(getMainOptimizationLoop());\n         if (options.crossModuleCodeMotion) {\n             passes.add(crossModuleCodeMotion);\n         }\n         if (options.crossModuleMethodMotion) {\n             passes.add(crossModuleMethodMotion);\n         }\n         passes.add(specializeInitialModule.makeOneTimePass());\n     }\n     passes.addAll(getMainOptimizationLoop());\n     passes.add(createEmptyPass(\"beforeModuleMotion\"));\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.crossModuleMethodMotion) {\n         passes.add(crossModuleMethodMotion);\n     }\n     passes.add(createEmptyPass(\"afterModuleMotion\"));\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n     }\n     if (options.flowSensitiveInlineVariables) {\n         passes.add(flowSensitiveInlineVariables);\n         if (options.removeUnusedVars) {\n             passes.add(removeUnusedVars);\n         }\n     }\n     if (options.collapseAnonymousFunctions) {\n         passes.add(collapseAnonymousFunctions);\n     }\n     if (options.moveFunctionDeclarations) {\n         passes.add(moveFunctionDeclarations);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n         passes.add(nameMappedAnonymousFunctions);\n     }\n     if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n         passes.add(extractPrototypeMemberDeclarations);\n     }\n     if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n         passes.add(ambiguateProperties);\n     }\n     if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n         passes.add(renameProperties);\n     }\n     if (options.reserveRawExports) {\n         passes.add(gatherRawExports);\n     }\n     if (options.convertToDottedProperties) {\n         passes.add(convertToDottedProperties);\n     }\n     if (options.rewriteFunctionExpressions) {\n         passes.add(rewriteFunctionExpressions);\n     }\n     if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n         passes.add(aliasStrings);\n     }\n     if (options.aliasExternals) {\n         passes.add(aliasExternals);\n     }\n     if (options.aliasKeywords) {\n         passes.add(aliasKeywords);\n     }\n     passes.add(markUnnormalized);\n     if (options.coalesceVariableNames) {\n         passes.add(coalesceVariableNames);\n     }\n     if (options.collapseVariableDeclarations) {\n         passes.add(collapseVariableDeclarations);\n     }\n     passes.add(denormalize);\n     if (options.instrumentationTemplate !\u003d null) {\n         passes.add(instrumentFunctions);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n         passes.add(invertContextualRenaming);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n         passes.add(renameVars);\n     }\n     if (options.groupVariableDeclarations) {\n         passes.add(groupVariableDeclarations);\n     }\n     if (options.processObjectPropertyString) {\n         passes.add(objectPropertyStringPostprocess);\n     }\n     if (options.labelRenaming) {\n         passes.add(renameLabels);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n         passes.add(nameUnmappedAnonymousFunctions);\n     }\n     if (options.checkSymbols) {\n         passes.add(sanityCheckVars);\n     }\n     return passes;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3c3abc459ce1f720fee690dc8398b03701263c38": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\n\u003center reason for rollback\u003e\n\n*** Original change description ***\n\nAllow the removal of unused parameters from call sites.\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d66\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@595 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/6/10, 10:59 AM",
      "commitName": "3c3abc459ce1f720fee690dc8398b03701263c38",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "12/6/10, 9:51 AM",
      "commitNameOld": "2f29d7ee3aaf3fe2372eb49104d4eb9ab93531ca",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 0.05,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getOptimizations() {\n    List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n    if (options.runtimeTypeCheck) {\n        passes.add(runtimeTypeCheck);\n    }\n    passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n    if (!options.idGenerators.isEmpty()) {\n        passes.add(replaceIdGenerators);\n    }\n    if (options.optimizeArgumentsArray) {\n        passes.add(optimizeArgumentsArray);\n    }\n    if (options.closurePass \u0026\u0026 (options.removeAbstractMethods || options.removeClosureAsserts)) {\n        passes.add(closureCodeRemoval);\n    }\n    if (options.collapseProperties) {\n        passes.add(collapseProperties);\n    }\n    if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n        passes.add(replaceStrings);\n    }\n    if (options.tightenTypes) {\n        passes.add(tightenTypesBuilder);\n    }\n    if (options.disambiguateProperties) {\n        passes.add(disambiguateProperties);\n    }\n    if (options.computeFunctionSideEffects) {\n        passes.add(markPureFunctions);\n    } else if (options.markNoSideEffectCalls) {\n        passes.add(markNoSideEffectCalls);\n    }\n    if (options.chainCalls) {\n        passes.add(chainCalls);\n    }\n    if (options.inlineConstantVars) {\n        passes.add(checkConsts);\n    }\n    if (options.ignoreCajaProperties) {\n        passes.add(ignoreCajaProperties);\n    }\n    assertAllOneTimePasses(passes);\n    if (options.smartNameRemoval || options.reportPath !\u003d null) {\n        passes.addAll(getCodeRemovingPasses());\n        passes.add(smartNamePass);\n    }\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.devirtualizePrototypeMethods || options.optimizeReturns || options.optimizeParameters) {\n        passes.add(optimizeCalls);\n    }\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n    }\n    passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n    if (options.specializeInitialModule) {\n        passes.addAll(getMainOptimizationLoop());\n        if (options.crossModuleCodeMotion) {\n            passes.add(crossModuleCodeMotion);\n        }\n        if (options.crossModuleMethodMotion) {\n            passes.add(crossModuleMethodMotion);\n        }\n        passes.add(specializeInitialModule.makeOneTimePass());\n    }\n    passes.addAll(getMainOptimizationLoop());\n    passes.add(createEmptyPass(\"beforeModuleMotion\"));\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.crossModuleMethodMotion) {\n        passes.add(crossModuleMethodMotion);\n    }\n    passes.add(createEmptyPass(\"afterModuleMotion\"));\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n    }\n    if (options.flowSensitiveInlineVariables) {\n        passes.add(flowSensitiveInlineVariables);\n        if (options.removeUnusedVars) {\n            passes.add(removeUnusedVars);\n        }\n    }\n    if (options.collapseAnonymousFunctions) {\n        passes.add(collapseAnonymousFunctions);\n    }\n    if (options.moveFunctionDeclarations) {\n        passes.add(moveFunctionDeclarations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n        passes.add(nameMappedAnonymousFunctions);\n    }\n    if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n        passes.add(extractPrototypeMemberDeclarations);\n    }\n    if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n        passes.add(ambiguateProperties);\n    }\n    if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n        passes.add(renameProperties);\n    }\n    if (options.reserveRawExports) {\n        passes.add(gatherRawExports);\n    }\n    if (options.convertToDottedProperties) {\n        passes.add(convertToDottedProperties);\n    }\n    if (options.rewriteFunctionExpressions) {\n        passes.add(rewriteFunctionExpressions);\n    }\n    if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n        passes.add(aliasStrings);\n    }\n    if (options.aliasExternals) {\n        passes.add(aliasExternals);\n    }\n    if (options.aliasKeywords) {\n        passes.add(aliasKeywords);\n    }\n    passes.add(markUnnormalized);\n    if (options.coalesceVariableNames) {\n        passes.add(coalesceVariableNames);\n    }\n    if (options.collapseVariableDeclarations) {\n        passes.add(collapseVariableDeclarations);\n    }\n    passes.add(denormalize);\n    if (options.instrumentationTemplate !\u003d null) {\n        passes.add(instrumentFunctions);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n        passes.add(invertContextualRenaming);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n        passes.add(renameVars);\n    }\n    if (options.groupVariableDeclarations) {\n        passes.add(groupVariableDeclarations);\n    }\n    if (options.processObjectPropertyString) {\n        passes.add(objectPropertyStringPostprocess);\n    }\n    if (options.labelRenaming) {\n        passes.add(renameLabels);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n        passes.add(nameUnmappedAnonymousFunctions);\n    }\n    if (options.checkSymbols) {\n        passes.add(sanityCheckVars);\n    }\n    return passes;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 313,
      "functionName": "getOptimizations",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,158 +1,155 @@\n @Override\n protected List\u003cPassFactory\u003e getOptimizations() {\n     List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n     if (options.runtimeTypeCheck) {\n         passes.add(runtimeTypeCheck);\n     }\n     passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n     if (!options.idGenerators.isEmpty()) {\n         passes.add(replaceIdGenerators);\n     }\n     if (options.optimizeArgumentsArray) {\n         passes.add(optimizeArgumentsArray);\n     }\n     if (options.closurePass \u0026\u0026 (options.removeAbstractMethods || options.removeClosureAsserts)) {\n         passes.add(closureCodeRemoval);\n     }\n     if (options.collapseProperties) {\n         passes.add(collapseProperties);\n     }\n     if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n         passes.add(replaceStrings);\n     }\n     if (options.tightenTypes) {\n         passes.add(tightenTypesBuilder);\n     }\n     if (options.disambiguateProperties) {\n         passes.add(disambiguateProperties);\n     }\n     if (options.computeFunctionSideEffects) {\n         passes.add(markPureFunctions);\n     } else if (options.markNoSideEffectCalls) {\n         passes.add(markNoSideEffectCalls);\n     }\n     if (options.chainCalls) {\n         passes.add(chainCalls);\n     }\n     if (options.inlineConstantVars) {\n         passes.add(checkConsts);\n     }\n     if (options.ignoreCajaProperties) {\n         passes.add(ignoreCajaProperties);\n     }\n     assertAllOneTimePasses(passes);\n     if (options.smartNameRemoval || options.reportPath !\u003d null) {\n         passes.addAll(getCodeRemovingPasses());\n         passes.add(smartNamePass);\n     }\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n-    if (options.devirtualizePrototypeMethods) {\n-        passes.add(devirtualizePrototypeMethods);\n-    }\n-    if (options.optimizeCalls || options.optimizeParameters || options.optimizeReturns) {\n+    if (options.devirtualizePrototypeMethods || options.optimizeReturns || options.optimizeParameters) {\n         passes.add(optimizeCalls);\n     }\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n     }\n     passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n     if (options.specializeInitialModule) {\n         passes.addAll(getMainOptimizationLoop());\n         if (options.crossModuleCodeMotion) {\n             passes.add(crossModuleCodeMotion);\n         }\n         if (options.crossModuleMethodMotion) {\n             passes.add(crossModuleMethodMotion);\n         }\n         passes.add(specializeInitialModule.makeOneTimePass());\n     }\n     passes.addAll(getMainOptimizationLoop());\n     passes.add(createEmptyPass(\"beforeModuleMotion\"));\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.crossModuleMethodMotion) {\n         passes.add(crossModuleMethodMotion);\n     }\n     passes.add(createEmptyPass(\"afterModuleMotion\"));\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n     }\n     if (options.flowSensitiveInlineVariables) {\n         passes.add(flowSensitiveInlineVariables);\n         if (options.removeUnusedVars) {\n             passes.add(removeUnusedVars);\n         }\n     }\n     if (options.collapseAnonymousFunctions) {\n         passes.add(collapseAnonymousFunctions);\n     }\n     if (options.moveFunctionDeclarations) {\n         passes.add(moveFunctionDeclarations);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n         passes.add(nameMappedAnonymousFunctions);\n     }\n     if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n         passes.add(extractPrototypeMemberDeclarations);\n     }\n     if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n         passes.add(ambiguateProperties);\n     }\n     if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n         passes.add(renameProperties);\n     }\n     if (options.reserveRawExports) {\n         passes.add(gatherRawExports);\n     }\n     if (options.convertToDottedProperties) {\n         passes.add(convertToDottedProperties);\n     }\n     if (options.rewriteFunctionExpressions) {\n         passes.add(rewriteFunctionExpressions);\n     }\n     if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n         passes.add(aliasStrings);\n     }\n     if (options.aliasExternals) {\n         passes.add(aliasExternals);\n     }\n     if (options.aliasKeywords) {\n         passes.add(aliasKeywords);\n     }\n     passes.add(markUnnormalized);\n     if (options.coalesceVariableNames) {\n         passes.add(coalesceVariableNames);\n     }\n     if (options.collapseVariableDeclarations) {\n         passes.add(collapseVariableDeclarations);\n     }\n     passes.add(denormalize);\n     if (options.instrumentationTemplate !\u003d null) {\n         passes.add(instrumentFunctions);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n         passes.add(invertContextualRenaming);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n         passes.add(renameVars);\n     }\n     if (options.groupVariableDeclarations) {\n         passes.add(groupVariableDeclarations);\n     }\n     if (options.processObjectPropertyString) {\n         passes.add(objectPropertyStringPostprocess);\n     }\n     if (options.labelRenaming) {\n         passes.add(renameLabels);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n         passes.add(nameUnmappedAnonymousFunctions);\n     }\n     if (options.checkSymbols) {\n         passes.add(sanityCheckVars);\n     }\n     return passes;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2f29d7ee3aaf3fe2372eb49104d4eb9ab93531ca": {
      "type": "Ybodychange",
      "commitMessage": "\nAllow the removal of unused parameters from call sites.\n\nR\u003dacleung\nDELTA\u003d455  (425 added, 1 deleted, 29 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d59\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@593 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/6/10, 9:51 AM",
      "commitName": "2f29d7ee3aaf3fe2372eb49104d4eb9ab93531ca",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "12/2/10, 3:14 PM",
      "commitNameOld": "db6ecf32790e8a1454f6bf1517444f8637211eae",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 3.78,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getOptimizations() {\n    List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n    if (options.runtimeTypeCheck) {\n        passes.add(runtimeTypeCheck);\n    }\n    passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n    if (!options.idGenerators.isEmpty()) {\n        passes.add(replaceIdGenerators);\n    }\n    if (options.optimizeArgumentsArray) {\n        passes.add(optimizeArgumentsArray);\n    }\n    if (options.closurePass \u0026\u0026 (options.removeAbstractMethods || options.removeClosureAsserts)) {\n        passes.add(closureCodeRemoval);\n    }\n    if (options.collapseProperties) {\n        passes.add(collapseProperties);\n    }\n    if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n        passes.add(replaceStrings);\n    }\n    if (options.tightenTypes) {\n        passes.add(tightenTypesBuilder);\n    }\n    if (options.disambiguateProperties) {\n        passes.add(disambiguateProperties);\n    }\n    if (options.computeFunctionSideEffects) {\n        passes.add(markPureFunctions);\n    } else if (options.markNoSideEffectCalls) {\n        passes.add(markNoSideEffectCalls);\n    }\n    if (options.chainCalls) {\n        passes.add(chainCalls);\n    }\n    if (options.inlineConstantVars) {\n        passes.add(checkConsts);\n    }\n    if (options.ignoreCajaProperties) {\n        passes.add(ignoreCajaProperties);\n    }\n    assertAllOneTimePasses(passes);\n    if (options.smartNameRemoval || options.reportPath !\u003d null) {\n        passes.addAll(getCodeRemovingPasses());\n        passes.add(smartNamePass);\n    }\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.devirtualizePrototypeMethods) {\n        passes.add(devirtualizePrototypeMethods);\n    }\n    if (options.optimizeCalls || options.optimizeParameters || options.optimizeReturns) {\n        passes.add(optimizeCalls);\n    }\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n    }\n    passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n    if (options.specializeInitialModule) {\n        passes.addAll(getMainOptimizationLoop());\n        if (options.crossModuleCodeMotion) {\n            passes.add(crossModuleCodeMotion);\n        }\n        if (options.crossModuleMethodMotion) {\n            passes.add(crossModuleMethodMotion);\n        }\n        passes.add(specializeInitialModule.makeOneTimePass());\n    }\n    passes.addAll(getMainOptimizationLoop());\n    passes.add(createEmptyPass(\"beforeModuleMotion\"));\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.crossModuleMethodMotion) {\n        passes.add(crossModuleMethodMotion);\n    }\n    passes.add(createEmptyPass(\"afterModuleMotion\"));\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n    }\n    if (options.flowSensitiveInlineVariables) {\n        passes.add(flowSensitiveInlineVariables);\n        if (options.removeUnusedVars) {\n            passes.add(removeUnusedVars);\n        }\n    }\n    if (options.collapseAnonymousFunctions) {\n        passes.add(collapseAnonymousFunctions);\n    }\n    if (options.moveFunctionDeclarations) {\n        passes.add(moveFunctionDeclarations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n        passes.add(nameMappedAnonymousFunctions);\n    }\n    if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n        passes.add(extractPrototypeMemberDeclarations);\n    }\n    if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n        passes.add(ambiguateProperties);\n    }\n    if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n        passes.add(renameProperties);\n    }\n    if (options.reserveRawExports) {\n        passes.add(gatherRawExports);\n    }\n    if (options.convertToDottedProperties) {\n        passes.add(convertToDottedProperties);\n    }\n    if (options.rewriteFunctionExpressions) {\n        passes.add(rewriteFunctionExpressions);\n    }\n    if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n        passes.add(aliasStrings);\n    }\n    if (options.aliasExternals) {\n        passes.add(aliasExternals);\n    }\n    if (options.aliasKeywords) {\n        passes.add(aliasKeywords);\n    }\n    passes.add(markUnnormalized);\n    if (options.coalesceVariableNames) {\n        passes.add(coalesceVariableNames);\n    }\n    if (options.collapseVariableDeclarations) {\n        passes.add(collapseVariableDeclarations);\n    }\n    passes.add(denormalize);\n    if (options.instrumentationTemplate !\u003d null) {\n        passes.add(instrumentFunctions);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n        passes.add(invertContextualRenaming);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n        passes.add(renameVars);\n    }\n    if (options.groupVariableDeclarations) {\n        passes.add(groupVariableDeclarations);\n    }\n    if (options.processObjectPropertyString) {\n        passes.add(objectPropertyStringPostprocess);\n    }\n    if (options.labelRenaming) {\n        passes.add(renameLabels);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n        passes.add(nameUnmappedAnonymousFunctions);\n    }\n    if (options.checkSymbols) {\n        passes.add(sanityCheckVars);\n    }\n    return passes;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 313,
      "functionName": "getOptimizations",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,155 +1,158 @@\n @Override\n protected List\u003cPassFactory\u003e getOptimizations() {\n     List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n     if (options.runtimeTypeCheck) {\n         passes.add(runtimeTypeCheck);\n     }\n     passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n     if (!options.idGenerators.isEmpty()) {\n         passes.add(replaceIdGenerators);\n     }\n     if (options.optimizeArgumentsArray) {\n         passes.add(optimizeArgumentsArray);\n     }\n     if (options.closurePass \u0026\u0026 (options.removeAbstractMethods || options.removeClosureAsserts)) {\n         passes.add(closureCodeRemoval);\n     }\n     if (options.collapseProperties) {\n         passes.add(collapseProperties);\n     }\n     if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n         passes.add(replaceStrings);\n     }\n     if (options.tightenTypes) {\n         passes.add(tightenTypesBuilder);\n     }\n     if (options.disambiguateProperties) {\n         passes.add(disambiguateProperties);\n     }\n     if (options.computeFunctionSideEffects) {\n         passes.add(markPureFunctions);\n     } else if (options.markNoSideEffectCalls) {\n         passes.add(markNoSideEffectCalls);\n     }\n     if (options.chainCalls) {\n         passes.add(chainCalls);\n     }\n     if (options.inlineConstantVars) {\n         passes.add(checkConsts);\n     }\n     if (options.ignoreCajaProperties) {\n         passes.add(ignoreCajaProperties);\n     }\n     assertAllOneTimePasses(passes);\n     if (options.smartNameRemoval || options.reportPath !\u003d null) {\n         passes.addAll(getCodeRemovingPasses());\n         passes.add(smartNamePass);\n     }\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n-    if (options.devirtualizePrototypeMethods || options.optimizeReturns || options.optimizeParameters) {\n+    if (options.devirtualizePrototypeMethods) {\n+        passes.add(devirtualizePrototypeMethods);\n+    }\n+    if (options.optimizeCalls || options.optimizeParameters || options.optimizeReturns) {\n         passes.add(optimizeCalls);\n     }\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n     }\n     passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n     if (options.specializeInitialModule) {\n         passes.addAll(getMainOptimizationLoop());\n         if (options.crossModuleCodeMotion) {\n             passes.add(crossModuleCodeMotion);\n         }\n         if (options.crossModuleMethodMotion) {\n             passes.add(crossModuleMethodMotion);\n         }\n         passes.add(specializeInitialModule.makeOneTimePass());\n     }\n     passes.addAll(getMainOptimizationLoop());\n     passes.add(createEmptyPass(\"beforeModuleMotion\"));\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.crossModuleMethodMotion) {\n         passes.add(crossModuleMethodMotion);\n     }\n     passes.add(createEmptyPass(\"afterModuleMotion\"));\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n     }\n     if (options.flowSensitiveInlineVariables) {\n         passes.add(flowSensitiveInlineVariables);\n         if (options.removeUnusedVars) {\n             passes.add(removeUnusedVars);\n         }\n     }\n     if (options.collapseAnonymousFunctions) {\n         passes.add(collapseAnonymousFunctions);\n     }\n     if (options.moveFunctionDeclarations) {\n         passes.add(moveFunctionDeclarations);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n         passes.add(nameMappedAnonymousFunctions);\n     }\n     if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n         passes.add(extractPrototypeMemberDeclarations);\n     }\n     if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n         passes.add(ambiguateProperties);\n     }\n     if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n         passes.add(renameProperties);\n     }\n     if (options.reserveRawExports) {\n         passes.add(gatherRawExports);\n     }\n     if (options.convertToDottedProperties) {\n         passes.add(convertToDottedProperties);\n     }\n     if (options.rewriteFunctionExpressions) {\n         passes.add(rewriteFunctionExpressions);\n     }\n     if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n         passes.add(aliasStrings);\n     }\n     if (options.aliasExternals) {\n         passes.add(aliasExternals);\n     }\n     if (options.aliasKeywords) {\n         passes.add(aliasKeywords);\n     }\n     passes.add(markUnnormalized);\n     if (options.coalesceVariableNames) {\n         passes.add(coalesceVariableNames);\n     }\n     if (options.collapseVariableDeclarations) {\n         passes.add(collapseVariableDeclarations);\n     }\n     passes.add(denormalize);\n     if (options.instrumentationTemplate !\u003d null) {\n         passes.add(instrumentFunctions);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n         passes.add(invertContextualRenaming);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n         passes.add(renameVars);\n     }\n     if (options.groupVariableDeclarations) {\n         passes.add(groupVariableDeclarations);\n     }\n     if (options.processObjectPropertyString) {\n         passes.add(objectPropertyStringPostprocess);\n     }\n     if (options.labelRenaming) {\n         passes.add(renameLabels);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n         passes.add(nameUnmappedAnonymousFunctions);\n     }\n     if (options.checkSymbols) {\n         passes.add(sanityCheckVars);\n     }\n     return passes;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "db6ecf32790e8a1454f6bf1517444f8637211eae": {
      "type": "Ybodychange",
      "commitMessage": "\nHave ReplaceStrings run earlier so that optimizations (collapse\nproperties, disambiguate properties, devirtualize methods, etc) don\u0027t\nchange the results.\n\nR\u003dnicksantos\nDELTA\u003d12  (6 added, 6 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d43\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@585 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/2/10, 3:14 PM",
      "commitName": "db6ecf32790e8a1454f6bf1517444f8637211eae",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/29/10, 10:09 AM",
      "commitNameOld": "73f98ee988dad825ba8320bf4d8df0413fde531c",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 3.21,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getOptimizations() {\n    List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n    if (options.runtimeTypeCheck) {\n        passes.add(runtimeTypeCheck);\n    }\n    passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n    if (!options.idGenerators.isEmpty()) {\n        passes.add(replaceIdGenerators);\n    }\n    if (options.optimizeArgumentsArray) {\n        passes.add(optimizeArgumentsArray);\n    }\n    if (options.closurePass \u0026\u0026 (options.removeAbstractMethods || options.removeClosureAsserts)) {\n        passes.add(closureCodeRemoval);\n    }\n    if (options.collapseProperties) {\n        passes.add(collapseProperties);\n    }\n    if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n        passes.add(replaceStrings);\n    }\n    if (options.tightenTypes) {\n        passes.add(tightenTypesBuilder);\n    }\n    if (options.disambiguateProperties) {\n        passes.add(disambiguateProperties);\n    }\n    if (options.computeFunctionSideEffects) {\n        passes.add(markPureFunctions);\n    } else if (options.markNoSideEffectCalls) {\n        passes.add(markNoSideEffectCalls);\n    }\n    if (options.chainCalls) {\n        passes.add(chainCalls);\n    }\n    if (options.inlineConstantVars) {\n        passes.add(checkConsts);\n    }\n    if (options.ignoreCajaProperties) {\n        passes.add(ignoreCajaProperties);\n    }\n    assertAllOneTimePasses(passes);\n    if (options.smartNameRemoval || options.reportPath !\u003d null) {\n        passes.addAll(getCodeRemovingPasses());\n        passes.add(smartNamePass);\n    }\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.devirtualizePrototypeMethods || options.optimizeReturns || options.optimizeParameters) {\n        passes.add(optimizeCalls);\n    }\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n    }\n    passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n    if (options.specializeInitialModule) {\n        passes.addAll(getMainOptimizationLoop());\n        if (options.crossModuleCodeMotion) {\n            passes.add(crossModuleCodeMotion);\n        }\n        if (options.crossModuleMethodMotion) {\n            passes.add(crossModuleMethodMotion);\n        }\n        passes.add(specializeInitialModule.makeOneTimePass());\n    }\n    passes.addAll(getMainOptimizationLoop());\n    passes.add(createEmptyPass(\"beforeModuleMotion\"));\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.crossModuleMethodMotion) {\n        passes.add(crossModuleMethodMotion);\n    }\n    passes.add(createEmptyPass(\"afterModuleMotion\"));\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n    }\n    if (options.flowSensitiveInlineVariables) {\n        passes.add(flowSensitiveInlineVariables);\n        if (options.removeUnusedVars) {\n            passes.add(removeUnusedVars);\n        }\n    }\n    if (options.collapseAnonymousFunctions) {\n        passes.add(collapseAnonymousFunctions);\n    }\n    if (options.moveFunctionDeclarations) {\n        passes.add(moveFunctionDeclarations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n        passes.add(nameMappedAnonymousFunctions);\n    }\n    if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n        passes.add(extractPrototypeMemberDeclarations);\n    }\n    if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n        passes.add(ambiguateProperties);\n    }\n    if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n        passes.add(renameProperties);\n    }\n    if (options.reserveRawExports) {\n        passes.add(gatherRawExports);\n    }\n    if (options.convertToDottedProperties) {\n        passes.add(convertToDottedProperties);\n    }\n    if (options.rewriteFunctionExpressions) {\n        passes.add(rewriteFunctionExpressions);\n    }\n    if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n        passes.add(aliasStrings);\n    }\n    if (options.aliasExternals) {\n        passes.add(aliasExternals);\n    }\n    if (options.aliasKeywords) {\n        passes.add(aliasKeywords);\n    }\n    passes.add(markUnnormalized);\n    if (options.coalesceVariableNames) {\n        passes.add(coalesceVariableNames);\n    }\n    if (options.collapseVariableDeclarations) {\n        passes.add(collapseVariableDeclarations);\n    }\n    passes.add(denormalize);\n    if (options.instrumentationTemplate !\u003d null) {\n        passes.add(instrumentFunctions);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n        passes.add(invertContextualRenaming);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n        passes.add(renameVars);\n    }\n    if (options.groupVariableDeclarations) {\n        passes.add(groupVariableDeclarations);\n    }\n    if (options.processObjectPropertyString) {\n        passes.add(objectPropertyStringPostprocess);\n    }\n    if (options.labelRenaming) {\n        passes.add(renameLabels);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n        passes.add(nameUnmappedAnonymousFunctions);\n    }\n    if (options.checkSymbols) {\n        passes.add(sanityCheckVars);\n    }\n    return passes;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 313,
      "functionName": "getOptimizations",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,155 +1,155 @@\n @Override\n protected List\u003cPassFactory\u003e getOptimizations() {\n     List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n     if (options.runtimeTypeCheck) {\n         passes.add(runtimeTypeCheck);\n     }\n     passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n     if (!options.idGenerators.isEmpty()) {\n         passes.add(replaceIdGenerators);\n     }\n     if (options.optimizeArgumentsArray) {\n         passes.add(optimizeArgumentsArray);\n     }\n     if (options.closurePass \u0026\u0026 (options.removeAbstractMethods || options.removeClosureAsserts)) {\n         passes.add(closureCodeRemoval);\n     }\n     if (options.collapseProperties) {\n         passes.add(collapseProperties);\n     }\n+    if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n+        passes.add(replaceStrings);\n+    }\n     if (options.tightenTypes) {\n         passes.add(tightenTypesBuilder);\n     }\n     if (options.disambiguateProperties) {\n         passes.add(disambiguateProperties);\n     }\n     if (options.computeFunctionSideEffects) {\n         passes.add(markPureFunctions);\n     } else if (options.markNoSideEffectCalls) {\n         passes.add(markNoSideEffectCalls);\n     }\n     if (options.chainCalls) {\n         passes.add(chainCalls);\n     }\n     if (options.inlineConstantVars) {\n         passes.add(checkConsts);\n     }\n-    if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n-        passes.add(replaceStrings);\n-    }\n     if (options.ignoreCajaProperties) {\n         passes.add(ignoreCajaProperties);\n     }\n     assertAllOneTimePasses(passes);\n     if (options.smartNameRemoval || options.reportPath !\u003d null) {\n         passes.addAll(getCodeRemovingPasses());\n         passes.add(smartNamePass);\n     }\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.devirtualizePrototypeMethods || options.optimizeReturns || options.optimizeParameters) {\n         passes.add(optimizeCalls);\n     }\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n     }\n     passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n     if (options.specializeInitialModule) {\n         passes.addAll(getMainOptimizationLoop());\n         if (options.crossModuleCodeMotion) {\n             passes.add(crossModuleCodeMotion);\n         }\n         if (options.crossModuleMethodMotion) {\n             passes.add(crossModuleMethodMotion);\n         }\n         passes.add(specializeInitialModule.makeOneTimePass());\n     }\n     passes.addAll(getMainOptimizationLoop());\n     passes.add(createEmptyPass(\"beforeModuleMotion\"));\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.crossModuleMethodMotion) {\n         passes.add(crossModuleMethodMotion);\n     }\n     passes.add(createEmptyPass(\"afterModuleMotion\"));\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n     }\n     if (options.flowSensitiveInlineVariables) {\n         passes.add(flowSensitiveInlineVariables);\n         if (options.removeUnusedVars) {\n             passes.add(removeUnusedVars);\n         }\n     }\n     if (options.collapseAnonymousFunctions) {\n         passes.add(collapseAnonymousFunctions);\n     }\n     if (options.moveFunctionDeclarations) {\n         passes.add(moveFunctionDeclarations);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n         passes.add(nameMappedAnonymousFunctions);\n     }\n     if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n         passes.add(extractPrototypeMemberDeclarations);\n     }\n     if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n         passes.add(ambiguateProperties);\n     }\n     if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n         passes.add(renameProperties);\n     }\n     if (options.reserveRawExports) {\n         passes.add(gatherRawExports);\n     }\n     if (options.convertToDottedProperties) {\n         passes.add(convertToDottedProperties);\n     }\n     if (options.rewriteFunctionExpressions) {\n         passes.add(rewriteFunctionExpressions);\n     }\n     if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n         passes.add(aliasStrings);\n     }\n     if (options.aliasExternals) {\n         passes.add(aliasExternals);\n     }\n     if (options.aliasKeywords) {\n         passes.add(aliasKeywords);\n     }\n     passes.add(markUnnormalized);\n     if (options.coalesceVariableNames) {\n         passes.add(coalesceVariableNames);\n     }\n     if (options.collapseVariableDeclarations) {\n         passes.add(collapseVariableDeclarations);\n     }\n     passes.add(denormalize);\n     if (options.instrumentationTemplate !\u003d null) {\n         passes.add(instrumentFunctions);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n         passes.add(invertContextualRenaming);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n         passes.add(renameVars);\n     }\n     if (options.groupVariableDeclarations) {\n         passes.add(groupVariableDeclarations);\n     }\n     if (options.processObjectPropertyString) {\n         passes.add(objectPropertyStringPostprocess);\n     }\n     if (options.labelRenaming) {\n         passes.add(renameLabels);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n         passes.add(nameUnmappedAnonymousFunctions);\n     }\n     if (options.checkSymbols) {\n         passes.add(sanityCheckVars);\n     }\n     return passes;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "73f98ee988dad825ba8320bf4d8df0413fde531c": {
      "type": "Ybodychange",
      "commitMessage": "\nLay the groundwork for the my next call optimization.\n\nR\u003dacleung\nDELTA\u003d428  (267 added, 117 deleted, 44 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d6\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@570 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/29/10, 10:09 AM",
      "commitName": "73f98ee988dad825ba8320bf4d8df0413fde531c",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/12/10, 12:00 PM",
      "commitNameOld": "7a0bb06d85735d901894cce2aff99251bcf67484",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 16.92,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getOptimizations() {\n    List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n    if (options.runtimeTypeCheck) {\n        passes.add(runtimeTypeCheck);\n    }\n    passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n    if (!options.idGenerators.isEmpty()) {\n        passes.add(replaceIdGenerators);\n    }\n    if (options.optimizeArgumentsArray) {\n        passes.add(optimizeArgumentsArray);\n    }\n    if (options.closurePass \u0026\u0026 (options.removeAbstractMethods || options.removeClosureAsserts)) {\n        passes.add(closureCodeRemoval);\n    }\n    if (options.collapseProperties) {\n        passes.add(collapseProperties);\n    }\n    if (options.tightenTypes) {\n        passes.add(tightenTypesBuilder);\n    }\n    if (options.disambiguateProperties) {\n        passes.add(disambiguateProperties);\n    }\n    if (options.computeFunctionSideEffects) {\n        passes.add(markPureFunctions);\n    } else if (options.markNoSideEffectCalls) {\n        passes.add(markNoSideEffectCalls);\n    }\n    if (options.chainCalls) {\n        passes.add(chainCalls);\n    }\n    if (options.inlineConstantVars) {\n        passes.add(checkConsts);\n    }\n    if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n        passes.add(replaceStrings);\n    }\n    if (options.ignoreCajaProperties) {\n        passes.add(ignoreCajaProperties);\n    }\n    assertAllOneTimePasses(passes);\n    if (options.smartNameRemoval || options.reportPath !\u003d null) {\n        passes.addAll(getCodeRemovingPasses());\n        passes.add(smartNamePass);\n    }\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.devirtualizePrototypeMethods || options.optimizeReturns || options.optimizeParameters) {\n        passes.add(optimizeCalls);\n    }\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n    }\n    passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n    if (options.specializeInitialModule) {\n        passes.addAll(getMainOptimizationLoop());\n        if (options.crossModuleCodeMotion) {\n            passes.add(crossModuleCodeMotion);\n        }\n        if (options.crossModuleMethodMotion) {\n            passes.add(crossModuleMethodMotion);\n        }\n        passes.add(specializeInitialModule.makeOneTimePass());\n    }\n    passes.addAll(getMainOptimizationLoop());\n    passes.add(createEmptyPass(\"beforeModuleMotion\"));\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.crossModuleMethodMotion) {\n        passes.add(crossModuleMethodMotion);\n    }\n    passes.add(createEmptyPass(\"afterModuleMotion\"));\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n    }\n    if (options.flowSensitiveInlineVariables) {\n        passes.add(flowSensitiveInlineVariables);\n        if (options.removeUnusedVars) {\n            passes.add(removeUnusedVars);\n        }\n    }\n    if (options.collapseAnonymousFunctions) {\n        passes.add(collapseAnonymousFunctions);\n    }\n    if (options.moveFunctionDeclarations) {\n        passes.add(moveFunctionDeclarations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n        passes.add(nameMappedAnonymousFunctions);\n    }\n    if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n        passes.add(extractPrototypeMemberDeclarations);\n    }\n    if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n        passes.add(ambiguateProperties);\n    }\n    if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n        passes.add(renameProperties);\n    }\n    if (options.reserveRawExports) {\n        passes.add(gatherRawExports);\n    }\n    if (options.convertToDottedProperties) {\n        passes.add(convertToDottedProperties);\n    }\n    if (options.rewriteFunctionExpressions) {\n        passes.add(rewriteFunctionExpressions);\n    }\n    if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n        passes.add(aliasStrings);\n    }\n    if (options.aliasExternals) {\n        passes.add(aliasExternals);\n    }\n    if (options.aliasKeywords) {\n        passes.add(aliasKeywords);\n    }\n    passes.add(markUnnormalized);\n    if (options.coalesceVariableNames) {\n        passes.add(coalesceVariableNames);\n    }\n    if (options.collapseVariableDeclarations) {\n        passes.add(collapseVariableDeclarations);\n    }\n    passes.add(denormalize);\n    if (options.instrumentationTemplate !\u003d null) {\n        passes.add(instrumentFunctions);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n        passes.add(invertContextualRenaming);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n        passes.add(renameVars);\n    }\n    if (options.groupVariableDeclarations) {\n        passes.add(groupVariableDeclarations);\n    }\n    if (options.processObjectPropertyString) {\n        passes.add(objectPropertyStringPostprocess);\n    }\n    if (options.labelRenaming) {\n        passes.add(renameLabels);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n        passes.add(nameUnmappedAnonymousFunctions);\n    }\n    if (options.checkSymbols) {\n        passes.add(sanityCheckVars);\n    }\n    return passes;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 313,
      "functionName": "getOptimizations",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,158 +1,155 @@\n @Override\n protected List\u003cPassFactory\u003e getOptimizations() {\n     List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n     if (options.runtimeTypeCheck) {\n         passes.add(runtimeTypeCheck);\n     }\n     passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n     if (!options.idGenerators.isEmpty()) {\n         passes.add(replaceIdGenerators);\n     }\n     if (options.optimizeArgumentsArray) {\n         passes.add(optimizeArgumentsArray);\n     }\n-    if (options.optimizeParameters) {\n-        passes.add(removeUselessParameters);\n-    }\n     if (options.closurePass \u0026\u0026 (options.removeAbstractMethods || options.removeClosureAsserts)) {\n         passes.add(closureCodeRemoval);\n     }\n     if (options.collapseProperties) {\n         passes.add(collapseProperties);\n     }\n     if (options.tightenTypes) {\n         passes.add(tightenTypesBuilder);\n     }\n     if (options.disambiguateProperties) {\n         passes.add(disambiguateProperties);\n     }\n     if (options.computeFunctionSideEffects) {\n         passes.add(markPureFunctions);\n     } else if (options.markNoSideEffectCalls) {\n         passes.add(markNoSideEffectCalls);\n     }\n     if (options.chainCalls) {\n         passes.add(chainCalls);\n     }\n     if (options.inlineConstantVars) {\n         passes.add(checkConsts);\n     }\n     if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n         passes.add(replaceStrings);\n     }\n     if (options.ignoreCajaProperties) {\n         passes.add(ignoreCajaProperties);\n     }\n     assertAllOneTimePasses(passes);\n     if (options.smartNameRemoval || options.reportPath !\u003d null) {\n         passes.addAll(getCodeRemovingPasses());\n         passes.add(smartNamePass);\n     }\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n-    if (options.devirtualizePrototypeMethods) {\n+    if (options.devirtualizePrototypeMethods || options.optimizeReturns || options.optimizeParameters) {\n         passes.add(optimizeCalls);\n     }\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n     }\n     passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n     if (options.specializeInitialModule) {\n         passes.addAll(getMainOptimizationLoop());\n         if (options.crossModuleCodeMotion) {\n             passes.add(crossModuleCodeMotion);\n         }\n         if (options.crossModuleMethodMotion) {\n             passes.add(crossModuleMethodMotion);\n         }\n         passes.add(specializeInitialModule.makeOneTimePass());\n     }\n     passes.addAll(getMainOptimizationLoop());\n     passes.add(createEmptyPass(\"beforeModuleMotion\"));\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.crossModuleMethodMotion) {\n         passes.add(crossModuleMethodMotion);\n     }\n     passes.add(createEmptyPass(\"afterModuleMotion\"));\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n     }\n     if (options.flowSensitiveInlineVariables) {\n         passes.add(flowSensitiveInlineVariables);\n         if (options.removeUnusedVars) {\n             passes.add(removeUnusedVars);\n         }\n     }\n     if (options.collapseAnonymousFunctions) {\n         passes.add(collapseAnonymousFunctions);\n     }\n     if (options.moveFunctionDeclarations) {\n         passes.add(moveFunctionDeclarations);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n         passes.add(nameMappedAnonymousFunctions);\n     }\n     if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n         passes.add(extractPrototypeMemberDeclarations);\n     }\n     if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n         passes.add(ambiguateProperties);\n     }\n     if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n         passes.add(renameProperties);\n     }\n     if (options.reserveRawExports) {\n         passes.add(gatherRawExports);\n     }\n     if (options.convertToDottedProperties) {\n         passes.add(convertToDottedProperties);\n     }\n     if (options.rewriteFunctionExpressions) {\n         passes.add(rewriteFunctionExpressions);\n     }\n     if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n         passes.add(aliasStrings);\n     }\n     if (options.aliasExternals) {\n         passes.add(aliasExternals);\n     }\n     if (options.aliasKeywords) {\n         passes.add(aliasKeywords);\n     }\n     passes.add(markUnnormalized);\n     if (options.coalesceVariableNames) {\n         passes.add(coalesceVariableNames);\n     }\n     if (options.collapseVariableDeclarations) {\n         passes.add(collapseVariableDeclarations);\n     }\n     passes.add(denormalize);\n     if (options.instrumentationTemplate !\u003d null) {\n         passes.add(instrumentFunctions);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n         passes.add(invertContextualRenaming);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n         passes.add(renameVars);\n     }\n     if (options.groupVariableDeclarations) {\n         passes.add(groupVariableDeclarations);\n     }\n     if (options.processObjectPropertyString) {\n         passes.add(objectPropertyStringPostprocess);\n     }\n     if (options.labelRenaming) {\n         passes.add(renameLabels);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n         passes.add(nameUnmappedAnonymousFunctions);\n     }\n     if (options.checkSymbols) {\n         passes.add(sanityCheckVars);\n     }\n     return passes;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c61dccaace9a74483f45d578121b8faee04b0f57": {
      "type": "Ybodychange",
      "commitMessage": "\nOptimize unused return values\n\nR\u003dacleung\nDELTA\u003d574  (566 added, 0 deleted, 8 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1169980\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@537 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/9/10, 4:38 PM",
      "commitName": "c61dccaace9a74483f45d578121b8faee04b0f57",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "10/19/10, 3:22 PM",
      "commitNameOld": "58d95f78d02133da8424319302d28e827a0786e2",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 21.09,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getOptimizations() {\n    List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n    if (options.runtimeTypeCheck) {\n        passes.add(runtimeTypeCheck);\n    }\n    passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n    if (!options.idGenerators.isEmpty()) {\n        passes.add(replaceIdGenerators);\n    }\n    if (options.optimizeArgumentsArray) {\n        passes.add(optimizeArgumentsArray);\n    }\n    if (options.optimizeParameters) {\n        passes.add(removeUselessParameters);\n    }\n    if (options.closurePass \u0026\u0026 (options.removeAbstractMethods || options.removeClosureAsserts)) {\n        passes.add(closureCodeRemoval);\n    }\n    if (options.collapseProperties) {\n        passes.add(collapseProperties);\n    }\n    if (options.tightenTypes) {\n        passes.add(tightenTypesBuilder);\n    }\n    if (options.disambiguateProperties) {\n        passes.add(disambiguateProperties);\n    }\n    if (options.computeFunctionSideEffects) {\n        passes.add(markPureFunctions);\n    } else if (options.markNoSideEffectCalls) {\n        passes.add(markNoSideEffectCalls);\n    }\n    if (options.chainCalls) {\n        passes.add(chainCalls);\n    }\n    if (options.inlineConstantVars) {\n        passes.add(checkConsts);\n    }\n    if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n        passes.add(replaceStrings);\n    }\n    if (options.ignoreCajaProperties) {\n        passes.add(ignoreCajaProperties);\n    }\n    assertAllOneTimePasses(passes);\n    if (options.smartNameRemoval || options.reportPath !\u003d null) {\n        passes.addAll(getCodeRemovingPasses());\n        passes.add(smartNamePass);\n    }\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.devirtualizePrototypeMethods) {\n        passes.add(optimizeCalls);\n    }\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n    }\n    passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n    if (options.specializeInitialModule) {\n        passes.addAll(getMainOptimizationLoop());\n        if (options.crossModuleCodeMotion) {\n            passes.add(crossModuleCodeMotion);\n        }\n        if (options.crossModuleMethodMotion) {\n            passes.add(crossModuleMethodMotion);\n        }\n        passes.add(specializeInitialModule.makeOneTimePass());\n    }\n    passes.addAll(getMainOptimizationLoop());\n    passes.add(createEmptyPass(\"beforeModuleMotion\"));\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.crossModuleMethodMotion) {\n        passes.add(crossModuleMethodMotion);\n    }\n    passes.add(createEmptyPass(\"afterModuleMotion\"));\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n    }\n    if (options.flowSensitiveInlineVariables) {\n        passes.add(flowSensitiveInlineVariables);\n        if (options.removeUnusedVars) {\n            passes.add(removeUnusedVars);\n        }\n    }\n    if (options.collapseAnonymousFunctions) {\n        passes.add(collapseAnonymousFunctions);\n    }\n    if (options.moveFunctionDeclarations) {\n        passes.add(moveFunctionDeclarations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n        passes.add(nameMappedAnonymousFunctions);\n    }\n    if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n        passes.add(extractPrototypeMemberDeclarations);\n    }\n    if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n        passes.add(ambiguateProperties);\n    }\n    if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n        passes.add(renameProperties);\n    }\n    if (options.reserveRawExports) {\n        passes.add(gatherRawExports);\n    }\n    if (options.convertToDottedProperties) {\n        passes.add(convertToDottedProperties);\n    }\n    if (options.rewriteFunctionExpressions) {\n        passes.add(rewriteFunctionExpressions);\n    }\n    if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n        passes.add(aliasStrings);\n    }\n    if (options.aliasExternals) {\n        passes.add(aliasExternals);\n    }\n    if (options.aliasKeywords) {\n        passes.add(aliasKeywords);\n    }\n    passes.add(markUnnormalized);\n    if (options.coalesceVariableNames) {\n        passes.add(coalesceVariableNames);\n    }\n    if (options.collapseVariableDeclarations) {\n        passes.add(collapseVariableDeclarations);\n    }\n    passes.add(denormalize);\n    if (options.instrumentationTemplate !\u003d null) {\n        passes.add(instrumentFunctions);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n        passes.add(invertContextualRenaming);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n        passes.add(renameVars);\n    }\n    if (options.groupVariableDeclarations) {\n        passes.add(groupVariableDeclarations);\n    }\n    if (options.processObjectPropertyString) {\n        passes.add(objectPropertyStringPostprocess);\n    }\n    if (options.labelRenaming) {\n        passes.add(renameLabels);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n        passes.add(nameUnmappedAnonymousFunctions);\n    }\n    if (options.checkSymbols) {\n        passes.add(sanityCheckVars);\n    }\n    return passes;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 313,
      "functionName": "getOptimizations",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,158 +1,158 @@\n @Override\n protected List\u003cPassFactory\u003e getOptimizations() {\n     List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n     if (options.runtimeTypeCheck) {\n         passes.add(runtimeTypeCheck);\n     }\n     passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n     if (!options.idGenerators.isEmpty()) {\n         passes.add(replaceIdGenerators);\n     }\n     if (options.optimizeArgumentsArray) {\n         passes.add(optimizeArgumentsArray);\n     }\n     if (options.optimizeParameters) {\n         passes.add(removeUselessParameters);\n     }\n     if (options.closurePass \u0026\u0026 (options.removeAbstractMethods || options.removeClosureAsserts)) {\n         passes.add(closureCodeRemoval);\n     }\n     if (options.collapseProperties) {\n         passes.add(collapseProperties);\n     }\n     if (options.tightenTypes) {\n         passes.add(tightenTypesBuilder);\n     }\n     if (options.disambiguateProperties) {\n         passes.add(disambiguateProperties);\n     }\n     if (options.computeFunctionSideEffects) {\n         passes.add(markPureFunctions);\n     } else if (options.markNoSideEffectCalls) {\n         passes.add(markNoSideEffectCalls);\n     }\n     if (options.chainCalls) {\n         passes.add(chainCalls);\n     }\n     if (options.inlineConstantVars) {\n         passes.add(checkConsts);\n     }\n     if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n         passes.add(replaceStrings);\n     }\n     if (options.ignoreCajaProperties) {\n         passes.add(ignoreCajaProperties);\n     }\n     assertAllOneTimePasses(passes);\n     if (options.smartNameRemoval || options.reportPath !\u003d null) {\n         passes.addAll(getCodeRemovingPasses());\n         passes.add(smartNamePass);\n     }\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.devirtualizePrototypeMethods) {\n-        passes.add(devirtualizePrototypeMethods);\n+        passes.add(optimizeCalls);\n     }\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n     }\n     passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n     if (options.specializeInitialModule) {\n         passes.addAll(getMainOptimizationLoop());\n         if (options.crossModuleCodeMotion) {\n             passes.add(crossModuleCodeMotion);\n         }\n         if (options.crossModuleMethodMotion) {\n             passes.add(crossModuleMethodMotion);\n         }\n         passes.add(specializeInitialModule.makeOneTimePass());\n     }\n     passes.addAll(getMainOptimizationLoop());\n     passes.add(createEmptyPass(\"beforeModuleMotion\"));\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.crossModuleMethodMotion) {\n         passes.add(crossModuleMethodMotion);\n     }\n     passes.add(createEmptyPass(\"afterModuleMotion\"));\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n     }\n     if (options.flowSensitiveInlineVariables) {\n         passes.add(flowSensitiveInlineVariables);\n         if (options.removeUnusedVars) {\n             passes.add(removeUnusedVars);\n         }\n     }\n     if (options.collapseAnonymousFunctions) {\n         passes.add(collapseAnonymousFunctions);\n     }\n     if (options.moveFunctionDeclarations) {\n         passes.add(moveFunctionDeclarations);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n         passes.add(nameMappedAnonymousFunctions);\n     }\n     if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n         passes.add(extractPrototypeMemberDeclarations);\n     }\n     if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n         passes.add(ambiguateProperties);\n     }\n     if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n         passes.add(renameProperties);\n     }\n     if (options.reserveRawExports) {\n         passes.add(gatherRawExports);\n     }\n     if (options.convertToDottedProperties) {\n         passes.add(convertToDottedProperties);\n     }\n     if (options.rewriteFunctionExpressions) {\n         passes.add(rewriteFunctionExpressions);\n     }\n     if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n         passes.add(aliasStrings);\n     }\n     if (options.aliasExternals) {\n         passes.add(aliasExternals);\n     }\n     if (options.aliasKeywords) {\n         passes.add(aliasKeywords);\n     }\n     passes.add(markUnnormalized);\n     if (options.coalesceVariableNames) {\n         passes.add(coalesceVariableNames);\n     }\n     if (options.collapseVariableDeclarations) {\n         passes.add(collapseVariableDeclarations);\n     }\n     passes.add(denormalize);\n     if (options.instrumentationTemplate !\u003d null) {\n         passes.add(instrumentFunctions);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n         passes.add(invertContextualRenaming);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n         passes.add(renameVars);\n     }\n     if (options.groupVariableDeclarations) {\n         passes.add(groupVariableDeclarations);\n     }\n     if (options.processObjectPropertyString) {\n         passes.add(objectPropertyStringPostprocess);\n     }\n     if (options.labelRenaming) {\n         passes.add(renameLabels);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n         passes.add(nameUnmappedAnonymousFunctions);\n     }\n     if (options.checkSymbols) {\n         passes.add(sanityCheckVars);\n     }\n     return passes;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "309b4b8353342766fac7c446722d277cf19b6ac1": {
      "type": "Ybodychange",
      "commitMessage": "\nAdd a flag for removing goog.asserts.\n\nR\u003dacleung\nDELTA\u003d30  (27 added, 0 deleted, 3 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d113009\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@359 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/13/10, 11:28 AM",
      "commitName": "309b4b8353342766fac7c446722d277cf19b6ac1",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "8/12/10, 6:27 PM",
      "commitNameOld": "1004aa6826a19fcb9e6a33b029b492a100fa081b",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.71,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getOptimizations() {\n    List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n    if (options.runtimeTypeCheck) {\n        passes.add(runtimeTypeCheck);\n    }\n    passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n    if (!options.idGenerators.isEmpty()) {\n        passes.add(replaceIdGenerators);\n    }\n    if (options.optimizeArgumentsArray) {\n        passes.add(optimizeArgumentsArray);\n    }\n    if (options.optimizeParameters) {\n        passes.add(removeUselessParameters);\n    }\n    if (options.closurePass \u0026\u0026 (options.removeAbstractMethods || options.removeClosureAsserts)) {\n        passes.add(closureCodeRemoval);\n    }\n    if (options.collapseProperties) {\n        passes.add(collapseProperties);\n    }\n    if (options.tightenTypes) {\n        passes.add(tightenTypesBuilder);\n    }\n    if (options.disambiguateProperties) {\n        passes.add(disambiguateProperties);\n    }\n    if (options.computeFunctionSideEffects) {\n        passes.add(markPureFunctions);\n    } else if (options.markNoSideEffectCalls) {\n        passes.add(markNoSideEffectCalls);\n    }\n    if (options.chainCalls) {\n        passes.add(chainCalls);\n    }\n    if (options.inlineConstantVars) {\n        passes.add(checkConsts);\n    }\n    if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n        passes.add(replaceStrings);\n    }\n    if (options.ignoreCajaProperties) {\n        passes.add(ignoreCajaProperties);\n    }\n    assertAllOneTimePasses(passes);\n    if (options.smartNameRemoval || options.reportPath !\u003d null) {\n        passes.addAll(getCodeRemovingPasses());\n        passes.add(smartNamePass);\n    }\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.devirtualizePrototypeMethods) {\n        passes.add(devirtualizePrototypeMethods);\n    }\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n    }\n    passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n    if (options.specializeInitialModule) {\n        passes.addAll(getMainOptimizationLoop());\n        if (options.crossModuleCodeMotion) {\n            passes.add(crossModuleCodeMotion);\n        }\n        if (options.crossModuleMethodMotion) {\n            passes.add(crossModuleMethodMotion);\n        }\n        passes.add(specializeInitialModule.makeOneTimePass());\n    }\n    passes.addAll(getMainOptimizationLoop());\n    passes.add(createEmptyPass(\"beforeModuleMotion\"));\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.crossModuleMethodMotion) {\n        passes.add(crossModuleMethodMotion);\n    }\n    passes.add(createEmptyPass(\"afterModuleMotion\"));\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n    }\n    if (options.flowSensitiveInlineVariables) {\n        passes.add(flowSensitiveInlineVariables);\n        if (options.removeUnusedVars) {\n            passes.add(removeUnusedVars);\n        }\n    }\n    if (options.collapseAnonymousFunctions) {\n        passes.add(collapseAnonymousFunctions);\n    }\n    if (options.moveFunctionDeclarations) {\n        passes.add(moveFunctionDeclarations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n        passes.add(nameMappedAnonymousFunctions);\n    }\n    if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n        passes.add(extractPrototypeMemberDeclarations);\n    }\n    if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n        passes.add(ambiguateProperties);\n    }\n    if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n        passes.add(renameProperties);\n    }\n    if (options.reserveRawExports) {\n        passes.add(gatherRawExports);\n    }\n    if (options.convertToDottedProperties) {\n        passes.add(convertToDottedProperties);\n    }\n    if (options.rewriteFunctionExpressions) {\n        passes.add(rewriteFunctionExpressions);\n    }\n    if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n        passes.add(aliasStrings);\n    }\n    if (options.aliasExternals) {\n        passes.add(aliasExternals);\n    }\n    if (options.aliasKeywords) {\n        passes.add(aliasKeywords);\n    }\n    passes.add(markUnnormalized);\n    if (options.coalesceVariableNames) {\n        passes.add(coalesceVariableNames);\n    }\n    if (options.collapseVariableDeclarations) {\n        passes.add(collapseVariableDeclarations);\n    }\n    passes.add(denormalize);\n    if (options.instrumentationTemplate !\u003d null) {\n        passes.add(instrumentFunctions);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n        passes.add(invertContextualRenaming);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n        passes.add(renameVars);\n    }\n    if (options.groupVariableDeclarations) {\n        passes.add(groupVariableDeclarations);\n    }\n    if (options.processObjectPropertyString) {\n        passes.add(objectPropertyStringPostprocess);\n    }\n    if (options.labelRenaming) {\n        passes.add(renameLabels);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n        passes.add(nameUnmappedAnonymousFunctions);\n    }\n    if (options.checkSymbols) {\n        passes.add(sanityCheckVars);\n    }\n    return passes;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 309,
      "functionName": "getOptimizations",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,158 +1,158 @@\n @Override\n protected List\u003cPassFactory\u003e getOptimizations() {\n     List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n     if (options.runtimeTypeCheck) {\n         passes.add(runtimeTypeCheck);\n     }\n     passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n     if (!options.idGenerators.isEmpty()) {\n         passes.add(replaceIdGenerators);\n     }\n     if (options.optimizeArgumentsArray) {\n         passes.add(optimizeArgumentsArray);\n     }\n     if (options.optimizeParameters) {\n         passes.add(removeUselessParameters);\n     }\n-    if (options.closurePass \u0026\u0026 options.removeAbstractMethods) {\n+    if (options.closurePass \u0026\u0026 (options.removeAbstractMethods || options.removeClosureAsserts)) {\n         passes.add(closureCodeRemoval);\n     }\n     if (options.collapseProperties) {\n         passes.add(collapseProperties);\n     }\n     if (options.tightenTypes) {\n         passes.add(tightenTypesBuilder);\n     }\n     if (options.disambiguateProperties) {\n         passes.add(disambiguateProperties);\n     }\n     if (options.computeFunctionSideEffects) {\n         passes.add(markPureFunctions);\n     } else if (options.markNoSideEffectCalls) {\n         passes.add(markNoSideEffectCalls);\n     }\n     if (options.chainCalls) {\n         passes.add(chainCalls);\n     }\n     if (options.inlineConstantVars) {\n         passes.add(checkConsts);\n     }\n     if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n         passes.add(replaceStrings);\n     }\n     if (options.ignoreCajaProperties) {\n         passes.add(ignoreCajaProperties);\n     }\n     assertAllOneTimePasses(passes);\n     if (options.smartNameRemoval || options.reportPath !\u003d null) {\n         passes.addAll(getCodeRemovingPasses());\n         passes.add(smartNamePass);\n     }\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.devirtualizePrototypeMethods) {\n         passes.add(devirtualizePrototypeMethods);\n     }\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n     }\n     passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n     if (options.specializeInitialModule) {\n         passes.addAll(getMainOptimizationLoop());\n         if (options.crossModuleCodeMotion) {\n             passes.add(crossModuleCodeMotion);\n         }\n         if (options.crossModuleMethodMotion) {\n             passes.add(crossModuleMethodMotion);\n         }\n         passes.add(specializeInitialModule.makeOneTimePass());\n     }\n     passes.addAll(getMainOptimizationLoop());\n     passes.add(createEmptyPass(\"beforeModuleMotion\"));\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.crossModuleMethodMotion) {\n         passes.add(crossModuleMethodMotion);\n     }\n     passes.add(createEmptyPass(\"afterModuleMotion\"));\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n     }\n     if (options.flowSensitiveInlineVariables) {\n         passes.add(flowSensitiveInlineVariables);\n         if (options.removeUnusedVars) {\n             passes.add(removeUnusedVars);\n         }\n     }\n     if (options.collapseAnonymousFunctions) {\n         passes.add(collapseAnonymousFunctions);\n     }\n     if (options.moveFunctionDeclarations) {\n         passes.add(moveFunctionDeclarations);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n         passes.add(nameMappedAnonymousFunctions);\n     }\n     if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n         passes.add(extractPrototypeMemberDeclarations);\n     }\n     if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n         passes.add(ambiguateProperties);\n     }\n     if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n         passes.add(renameProperties);\n     }\n     if (options.reserveRawExports) {\n         passes.add(gatherRawExports);\n     }\n     if (options.convertToDottedProperties) {\n         passes.add(convertToDottedProperties);\n     }\n     if (options.rewriteFunctionExpressions) {\n         passes.add(rewriteFunctionExpressions);\n     }\n     if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n         passes.add(aliasStrings);\n     }\n     if (options.aliasExternals) {\n         passes.add(aliasExternals);\n     }\n     if (options.aliasKeywords) {\n         passes.add(aliasKeywords);\n     }\n     passes.add(markUnnormalized);\n     if (options.coalesceVariableNames) {\n         passes.add(coalesceVariableNames);\n     }\n     if (options.collapseVariableDeclarations) {\n         passes.add(collapseVariableDeclarations);\n     }\n     passes.add(denormalize);\n     if (options.instrumentationTemplate !\u003d null) {\n         passes.add(instrumentFunctions);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n         passes.add(invertContextualRenaming);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n         passes.add(renameVars);\n     }\n     if (options.groupVariableDeclarations) {\n         passes.add(groupVariableDeclarations);\n     }\n     if (options.processObjectPropertyString) {\n         passes.add(objectPropertyStringPostprocess);\n     }\n     if (options.labelRenaming) {\n         passes.add(renameLabels);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n         passes.add(nameUnmappedAnonymousFunctions);\n     }\n     if (options.checkSymbols) {\n         passes.add(sanityCheckVars);\n     }\n     return passes;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "44e59948342527c9d8ffc6f2b01d86af72aaef54": {
      "type": "Ybodychange",
      "commitMessage": "\nExperimental initial module specialization.\n\nThis optimization replaces functions in the initial module with specialized\nversions that are only safe in the initial module.\nThe original, general, versions of the functions are \"fixed up\" in later\nmodules.\nThis optimization can shrink the initial module significantly but the fixup code\nin later modules increases overall code size.\n\nSee SpecializeModule.java for more details.\n\nThis change modifies three existing passes: DevirtualizePrototyMethods, InlineFunctions, and\nRemoveUnusedPrototypeProperties, to be specialization-aware.\nWhen running under specialization, these modules now ask before modifying or\nremoving a function and report\nwhat functions they have modified or removed.\n\nFiles meriting extra scrutiny:\n- DevirtualizePrototypeMethods.java\n- RemoveUnusedPrototypeProperties.java\n- InlineFunctions.java\n- DefaultPassConfig.java\n\nR\u003dacleung\nDELTA\u003d1820  (1810 added, 0 deleted, 10 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d103003\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@353 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/12/10, 11:58 AM",
      "commitName": "44e59948342527c9d8ffc6f2b01d86af72aaef54",
      "commitAuthor": "dcc@google.com",
      "commitDateOld": "8/4/10, 5:22 PM",
      "commitNameOld": "c41e5b19af044fd2d5f9e835addece71c3548edb",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 7.78,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getOptimizations() {\n    List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n    if (options.runtimeTypeCheck) {\n        passes.add(runtimeTypeCheck);\n    }\n    passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n    if (!options.idGenerators.isEmpty()) {\n        passes.add(replaceIdGenerators);\n    }\n    if (options.optimizeArgumentsArray) {\n        passes.add(optimizeArgumentsArray);\n    }\n    if (options.optimizeParameters) {\n        passes.add(removeUselessParameters);\n    }\n    if (options.closurePass \u0026\u0026 options.removeAbstractMethods) {\n        passes.add(closureCodeRemoval);\n    }\n    if (options.collapseProperties) {\n        passes.add(collapseProperties);\n    }\n    if (options.tightenTypes) {\n        passes.add(tightenTypesBuilder);\n    }\n    if (options.disambiguateProperties) {\n        passes.add(disambiguateProperties);\n    }\n    if (options.computeFunctionSideEffects) {\n        passes.add(markPureFunctions);\n    } else if (options.markNoSideEffectCalls) {\n        passes.add(markNoSideEffectCalls);\n    }\n    if (options.chainCalls) {\n        passes.add(chainCalls);\n    }\n    if (options.inlineConstantVars) {\n        passes.add(checkConsts);\n    }\n    if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n        passes.add(replaceStrings);\n    }\n    if (options.ignoreCajaProperties) {\n        passes.add(ignoreCajaProperties);\n    }\n    assertAllOneTimePasses(passes);\n    if (options.smartNameRemoval || options.reportPath !\u003d null) {\n        passes.addAll(getCodeRemovingPasses());\n        passes.add(smartNamePass);\n    }\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.devirtualizePrototypeMethods) {\n        passes.add(devirtualizePrototypeMethods);\n    }\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n    }\n    passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n    if (options.specializeInitialModule) {\n        passes.addAll(getMainOptimizationLoop());\n        if (options.crossModuleCodeMotion) {\n            passes.add(crossModuleCodeMotion);\n        }\n        if (options.crossModuleMethodMotion) {\n            passes.add(crossModuleMethodMotion);\n        }\n        passes.add(specializeInitialModule.makeOneTimePass());\n    }\n    passes.addAll(getMainOptimizationLoop());\n    passes.add(createEmptyPass(\"beforeModuleMotion\"));\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.crossModuleMethodMotion) {\n        passes.add(crossModuleMethodMotion);\n    }\n    passes.add(createEmptyPass(\"afterModuleMotion\"));\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n    }\n    if (options.flowSensitiveInlineVariables) {\n        passes.add(flowSensitiveInlineVariables);\n        if (options.removeUnusedVars) {\n            passes.add(removeUnusedVars);\n        }\n    }\n    if (options.collapseAnonymousFunctions) {\n        passes.add(collapseAnonymousFunctions);\n    }\n    if (options.moveFunctionDeclarations) {\n        passes.add(moveFunctionDeclarations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n        passes.add(nameMappedAnonymousFunctions);\n    }\n    if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n        passes.add(extractPrototypeMemberDeclarations);\n    }\n    if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n        passes.add(ambiguateProperties);\n    }\n    if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n        passes.add(renameProperties);\n    }\n    if (options.reserveRawExports) {\n        passes.add(gatherRawExports);\n    }\n    if (options.convertToDottedProperties) {\n        passes.add(convertToDottedProperties);\n    }\n    if (options.rewriteFunctionExpressions) {\n        passes.add(rewriteFunctionExpressions);\n    }\n    if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n        passes.add(aliasStrings);\n    }\n    if (options.aliasExternals) {\n        passes.add(aliasExternals);\n    }\n    if (options.aliasKeywords) {\n        passes.add(aliasKeywords);\n    }\n    passes.add(markUnnormalized);\n    if (options.coalesceVariableNames) {\n        passes.add(coalesceVariableNames);\n    }\n    if (options.collapseVariableDeclarations) {\n        passes.add(collapseVariableDeclarations);\n    }\n    passes.add(denormalize);\n    if (options.instrumentationTemplate !\u003d null) {\n        passes.add(instrumentFunctions);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n        passes.add(invertContextualRenaming);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n        passes.add(renameVars);\n    }\n    if (options.groupVariableDeclarations) {\n        passes.add(groupVariableDeclarations);\n    }\n    if (options.processObjectPropertyString) {\n        passes.add(objectPropertyStringPostprocess);\n    }\n    if (options.labelRenaming) {\n        passes.add(renameLabels);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n        passes.add(nameUnmappedAnonymousFunctions);\n    }\n    if (options.checkSymbols) {\n        passes.add(sanityCheckVars);\n    }\n    return passes;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 322,
      "functionName": "getOptimizations",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,148 +1,158 @@\n @Override\n protected List\u003cPassFactory\u003e getOptimizations() {\n     List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n     if (options.runtimeTypeCheck) {\n         passes.add(runtimeTypeCheck);\n     }\n     passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n     if (!options.idGenerators.isEmpty()) {\n         passes.add(replaceIdGenerators);\n     }\n     if (options.optimizeArgumentsArray) {\n         passes.add(optimizeArgumentsArray);\n     }\n     if (options.optimizeParameters) {\n         passes.add(removeUselessParameters);\n     }\n     if (options.closurePass \u0026\u0026 options.removeAbstractMethods) {\n         passes.add(closureCodeRemoval);\n     }\n     if (options.collapseProperties) {\n         passes.add(collapseProperties);\n     }\n     if (options.tightenTypes) {\n         passes.add(tightenTypesBuilder);\n     }\n     if (options.disambiguateProperties) {\n         passes.add(disambiguateProperties);\n     }\n     if (options.computeFunctionSideEffects) {\n         passes.add(markPureFunctions);\n     } else if (options.markNoSideEffectCalls) {\n         passes.add(markNoSideEffectCalls);\n     }\n     if (options.chainCalls) {\n         passes.add(chainCalls);\n     }\n     if (options.inlineConstantVars) {\n         passes.add(checkConsts);\n     }\n     if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n         passes.add(replaceStrings);\n     }\n     if (options.ignoreCajaProperties) {\n         passes.add(ignoreCajaProperties);\n     }\n     assertAllOneTimePasses(passes);\n     if (options.smartNameRemoval || options.reportPath !\u003d null) {\n         passes.addAll(getCodeRemovingPasses());\n         passes.add(smartNamePass);\n     }\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.devirtualizePrototypeMethods) {\n         passes.add(devirtualizePrototypeMethods);\n     }\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n     }\n     passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n+    if (options.specializeInitialModule) {\n+        passes.addAll(getMainOptimizationLoop());\n+        if (options.crossModuleCodeMotion) {\n+            passes.add(crossModuleCodeMotion);\n+        }\n+        if (options.crossModuleMethodMotion) {\n+            passes.add(crossModuleMethodMotion);\n+        }\n+        passes.add(specializeInitialModule.makeOneTimePass());\n+    }\n     passes.addAll(getMainOptimizationLoop());\n     passes.add(createEmptyPass(\"beforeModuleMotion\"));\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.crossModuleMethodMotion) {\n         passes.add(crossModuleMethodMotion);\n     }\n     passes.add(createEmptyPass(\"afterModuleMotion\"));\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n     }\n     if (options.flowSensitiveInlineVariables) {\n         passes.add(flowSensitiveInlineVariables);\n         if (options.removeUnusedVars) {\n             passes.add(removeUnusedVars);\n         }\n     }\n     if (options.collapseAnonymousFunctions) {\n         passes.add(collapseAnonymousFunctions);\n     }\n     if (options.moveFunctionDeclarations) {\n         passes.add(moveFunctionDeclarations);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n         passes.add(nameMappedAnonymousFunctions);\n     }\n     if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n         passes.add(extractPrototypeMemberDeclarations);\n     }\n     if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n         passes.add(ambiguateProperties);\n     }\n     if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n         passes.add(renameProperties);\n     }\n     if (options.reserveRawExports) {\n         passes.add(gatherRawExports);\n     }\n     if (options.convertToDottedProperties) {\n         passes.add(convertToDottedProperties);\n     }\n     if (options.rewriteFunctionExpressions) {\n         passes.add(rewriteFunctionExpressions);\n     }\n     if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n         passes.add(aliasStrings);\n     }\n     if (options.aliasExternals) {\n         passes.add(aliasExternals);\n     }\n     if (options.aliasKeywords) {\n         passes.add(aliasKeywords);\n     }\n     passes.add(markUnnormalized);\n     if (options.coalesceVariableNames) {\n         passes.add(coalesceVariableNames);\n     }\n     if (options.collapseVariableDeclarations) {\n         passes.add(collapseVariableDeclarations);\n     }\n     passes.add(denormalize);\n     if (options.instrumentationTemplate !\u003d null) {\n         passes.add(instrumentFunctions);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n         passes.add(invertContextualRenaming);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n         passes.add(renameVars);\n     }\n     if (options.groupVariableDeclarations) {\n         passes.add(groupVariableDeclarations);\n     }\n     if (options.processObjectPropertyString) {\n         passes.add(objectPropertyStringPostprocess);\n     }\n     if (options.labelRenaming) {\n         passes.add(renameLabels);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n         passes.add(nameUnmappedAnonymousFunctions);\n     }\n     if (options.checkSymbols) {\n         passes.add(sanityCheckVars);\n     }\n     return passes;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "aafd3788df73bd0d21c9411014a7cbda0a5bbd17": {
      "type": "Ybodychange",
      "commitMessage": "\nA bit of clean-up:\nrename GoogleCodeRemoval -\u003e ClosureCodeRemoval\nfix warnings.\n\nR\u003djohnlenz\nDELTA\u003d475  (236 added, 234 deleted, 5 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d90005\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@329 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/4/10, 12:49 PM",
      "commitName": "aafd3788df73bd0d21c9411014a7cbda0a5bbd17",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "7/19/10, 4:32 PM",
      "commitNameOld": "4cf197f69d8733ac68b02672b2e23d7939e5eb76",
      "commitAuthorOld": "bella@google.com",
      "daysBetweenCommits": 15.85,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getOptimizations() {\n    List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n    if (options.runtimeTypeCheck) {\n        passes.add(runtimeTypeCheck);\n    }\n    passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n    if (!options.idGenerators.isEmpty()) {\n        passes.add(replaceIdGenerators);\n    }\n    if (options.optimizeArgumentsArray) {\n        passes.add(optimizeArgumentsArray);\n    }\n    if (options.optimizeParameters) {\n        passes.add(removeUselessParameters);\n    }\n    if (options.closurePass \u0026\u0026 options.removeAbstractMethods) {\n        passes.add(closureCodeRemoval);\n    }\n    if (options.collapseProperties) {\n        passes.add(collapseProperties);\n    }\n    if (options.tightenTypes) {\n        passes.add(tightenTypesBuilder);\n    }\n    if (options.disambiguateProperties) {\n        passes.add(disambiguateProperties);\n    }\n    if (options.computeFunctionSideEffects) {\n        passes.add(markPureFunctions);\n    } else if (options.markNoSideEffectCalls) {\n        passes.add(markNoSideEffectCalls);\n    }\n    if (options.chainCalls) {\n        passes.add(chainCalls);\n    }\n    if (options.inlineConstantVars) {\n        passes.add(checkConsts);\n    }\n    if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n        passes.add(replaceStrings);\n    }\n    if (options.ignoreCajaProperties) {\n        passes.add(ignoreCajaProperties);\n    }\n    assertAllOneTimePasses(passes);\n    if (options.smartNameRemoval || options.reportPath !\u003d null) {\n        passes.addAll(getCodeRemovingPasses());\n        passes.add(smartNamePass);\n    }\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.devirtualizePrototypeMethods) {\n        passes.add(devirtualizePrototypeMethods);\n    }\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n    }\n    passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n    passes.addAll(getMainOptimizationLoop());\n    passes.add(createEmptyPass(\"beforeModuleMotion\"));\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.crossModuleMethodMotion) {\n        passes.add(crossModuleMethodMotion);\n    }\n    passes.add(createEmptyPass(\"afterModuleMotion\"));\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n    }\n    if (options.flowSensitiveInlineVariables) {\n        passes.add(flowSensitiveInlineVariables);\n        if (options.removeUnusedVars) {\n            passes.add(removeUnusedVars);\n        }\n    }\n    if (options.collapseAnonymousFunctions) {\n        passes.add(collapseAnonymousFunctions);\n    }\n    if (options.moveFunctionDeclarations) {\n        passes.add(moveFunctionDeclarations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n        passes.add(nameMappedAnonymousFunctions);\n    }\n    if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n        passes.add(extractPrototypeMemberDeclarations);\n    }\n    if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n        passes.add(ambiguateProperties);\n    }\n    if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n        passes.add(renameProperties);\n    }\n    if (options.reserveRawExports) {\n        passes.add(gatherRawExports);\n    }\n    if (options.convertToDottedProperties) {\n        passes.add(convertToDottedProperties);\n    }\n    if (options.rewriteFunctionExpressions) {\n        passes.add(rewriteFunctionExpressions);\n    }\n    if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n        passes.add(aliasStrings);\n    }\n    if (options.aliasExternals) {\n        passes.add(aliasExternals);\n    }\n    if (options.aliasKeywords) {\n        passes.add(aliasKeywords);\n    }\n    passes.add(markUnnormalized);\n    if (options.coalesceVariableNames) {\n        passes.add(coalesceVariableNames);\n    }\n    if (options.collapseVariableDeclarations) {\n        passes.add(collapseVariableDeclarations);\n    }\n    passes.add(denormalize);\n    if (options.instrumentationTemplate !\u003d null) {\n        passes.add(instrumentFunctions);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n        passes.add(invertContextualRenaming);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n        passes.add(renameVars);\n    }\n    if (options.groupVariableDeclarations) {\n        passes.add(groupVariableDeclarations);\n    }\n    if (options.processObjectPropertyString) {\n        passes.add(objectPropertyStringPostprocess);\n    }\n    if (options.labelRenaming) {\n        passes.add(renameLabels);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n        passes.add(nameUnmappedAnonymousFunctions);\n    }\n    if (options.checkSymbols) {\n        passes.add(sanityCheckVars);\n    }\n    return passes;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 322,
      "functionName": "getOptimizations",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,148 +1,148 @@\n @Override\n protected List\u003cPassFactory\u003e getOptimizations() {\n     List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n     if (options.runtimeTypeCheck) {\n         passes.add(runtimeTypeCheck);\n     }\n     passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n     if (!options.idGenerators.isEmpty()) {\n         passes.add(replaceIdGenerators);\n     }\n     if (options.optimizeArgumentsArray) {\n         passes.add(optimizeArgumentsArray);\n     }\n     if (options.optimizeParameters) {\n         passes.add(removeUselessParameters);\n     }\n     if (options.closurePass \u0026\u0026 options.removeAbstractMethods) {\n-        passes.add(removeAbstractMethods);\n+        passes.add(closureCodeRemoval);\n     }\n     if (options.collapseProperties) {\n         passes.add(collapseProperties);\n     }\n     if (options.tightenTypes) {\n         passes.add(tightenTypesBuilder);\n     }\n     if (options.disambiguateProperties) {\n         passes.add(disambiguateProperties);\n     }\n     if (options.computeFunctionSideEffects) {\n         passes.add(markPureFunctions);\n     } else if (options.markNoSideEffectCalls) {\n         passes.add(markNoSideEffectCalls);\n     }\n     if (options.chainCalls) {\n         passes.add(chainCalls);\n     }\n     if (options.inlineConstantVars) {\n         passes.add(checkConsts);\n     }\n     if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n         passes.add(replaceStrings);\n     }\n     if (options.ignoreCajaProperties) {\n         passes.add(ignoreCajaProperties);\n     }\n     assertAllOneTimePasses(passes);\n     if (options.smartNameRemoval || options.reportPath !\u003d null) {\n         passes.addAll(getCodeRemovingPasses());\n         passes.add(smartNamePass);\n     }\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.devirtualizePrototypeMethods) {\n         passes.add(devirtualizePrototypeMethods);\n     }\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n     }\n     passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n     passes.addAll(getMainOptimizationLoop());\n     passes.add(createEmptyPass(\"beforeModuleMotion\"));\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.crossModuleMethodMotion) {\n         passes.add(crossModuleMethodMotion);\n     }\n     passes.add(createEmptyPass(\"afterModuleMotion\"));\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n     }\n     if (options.flowSensitiveInlineVariables) {\n         passes.add(flowSensitiveInlineVariables);\n         if (options.removeUnusedVars) {\n             passes.add(removeUnusedVars);\n         }\n     }\n     if (options.collapseAnonymousFunctions) {\n         passes.add(collapseAnonymousFunctions);\n     }\n     if (options.moveFunctionDeclarations) {\n         passes.add(moveFunctionDeclarations);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n         passes.add(nameMappedAnonymousFunctions);\n     }\n     if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n         passes.add(extractPrototypeMemberDeclarations);\n     }\n     if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n         passes.add(ambiguateProperties);\n     }\n     if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n         passes.add(renameProperties);\n     }\n     if (options.reserveRawExports) {\n         passes.add(gatherRawExports);\n     }\n     if (options.convertToDottedProperties) {\n         passes.add(convertToDottedProperties);\n     }\n     if (options.rewriteFunctionExpressions) {\n         passes.add(rewriteFunctionExpressions);\n     }\n     if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n         passes.add(aliasStrings);\n     }\n     if (options.aliasExternals) {\n         passes.add(aliasExternals);\n     }\n     if (options.aliasKeywords) {\n         passes.add(aliasKeywords);\n     }\n     passes.add(markUnnormalized);\n     if (options.coalesceVariableNames) {\n         passes.add(coalesceVariableNames);\n     }\n     if (options.collapseVariableDeclarations) {\n         passes.add(collapseVariableDeclarations);\n     }\n     passes.add(denormalize);\n     if (options.instrumentationTemplate !\u003d null) {\n         passes.add(instrumentFunctions);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n         passes.add(invertContextualRenaming);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n         passes.add(renameVars);\n     }\n     if (options.groupVariableDeclarations) {\n         passes.add(groupVariableDeclarations);\n     }\n     if (options.processObjectPropertyString) {\n         passes.add(objectPropertyStringPostprocess);\n     }\n     if (options.labelRenaming) {\n         passes.add(renameLabels);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n         passes.add(nameUnmappedAnonymousFunctions);\n     }\n     if (options.checkSymbols) {\n         passes.add(sanityCheckVars);\n     }\n     return passes;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4cf197f69d8733ac68b02672b2e23d7939e5eb76": {
      "type": "Ybodychange",
      "commitMessage": "\nBroke gmail\n\nR\u003dnicksantos\nDELTA\u003d50  (29 added, 14 deleted, 7 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d54004\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@290 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/19/10, 4:32 PM",
      "commitName": "4cf197f69d8733ac68b02672b2e23d7939e5eb76",
      "commitAuthor": "bella@google.com",
      "commitDateOld": "7/19/10, 2:02 PM",
      "commitNameOld": "de6bda7da621841ee37e8a92399a9e7f0088dbf2",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getOptimizations() {\n    List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n    if (options.runtimeTypeCheck) {\n        passes.add(runtimeTypeCheck);\n    }\n    passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n    if (!options.idGenerators.isEmpty()) {\n        passes.add(replaceIdGenerators);\n    }\n    if (options.optimizeArgumentsArray) {\n        passes.add(optimizeArgumentsArray);\n    }\n    if (options.optimizeParameters) {\n        passes.add(removeUselessParameters);\n    }\n    if (options.closurePass \u0026\u0026 options.removeAbstractMethods) {\n        passes.add(removeAbstractMethods);\n    }\n    if (options.collapseProperties) {\n        passes.add(collapseProperties);\n    }\n    if (options.tightenTypes) {\n        passes.add(tightenTypesBuilder);\n    }\n    if (options.disambiguateProperties) {\n        passes.add(disambiguateProperties);\n    }\n    if (options.computeFunctionSideEffects) {\n        passes.add(markPureFunctions);\n    } else if (options.markNoSideEffectCalls) {\n        passes.add(markNoSideEffectCalls);\n    }\n    if (options.chainCalls) {\n        passes.add(chainCalls);\n    }\n    if (options.inlineConstantVars) {\n        passes.add(checkConsts);\n    }\n    if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n        passes.add(replaceStrings);\n    }\n    if (options.ignoreCajaProperties) {\n        passes.add(ignoreCajaProperties);\n    }\n    assertAllOneTimePasses(passes);\n    if (options.smartNameRemoval || options.reportPath !\u003d null) {\n        passes.addAll(getCodeRemovingPasses());\n        passes.add(smartNamePass);\n    }\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.devirtualizePrototypeMethods) {\n        passes.add(devirtualizePrototypeMethods);\n    }\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n    }\n    passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n    passes.addAll(getMainOptimizationLoop());\n    passes.add(createEmptyPass(\"beforeModuleMotion\"));\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.crossModuleMethodMotion) {\n        passes.add(crossModuleMethodMotion);\n    }\n    passes.add(createEmptyPass(\"afterModuleMotion\"));\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n    }\n    if (options.flowSensitiveInlineVariables) {\n        passes.add(flowSensitiveInlineVariables);\n        if (options.removeUnusedVars) {\n            passes.add(removeUnusedVars);\n        }\n    }\n    if (options.collapseAnonymousFunctions) {\n        passes.add(collapseAnonymousFunctions);\n    }\n    if (options.moveFunctionDeclarations) {\n        passes.add(moveFunctionDeclarations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n        passes.add(nameMappedAnonymousFunctions);\n    }\n    if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n        passes.add(extractPrototypeMemberDeclarations);\n    }\n    if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n        passes.add(ambiguateProperties);\n    }\n    if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n        passes.add(renameProperties);\n    }\n    if (options.reserveRawExports) {\n        passes.add(gatherRawExports);\n    }\n    if (options.convertToDottedProperties) {\n        passes.add(convertToDottedProperties);\n    }\n    if (options.rewriteFunctionExpressions) {\n        passes.add(rewriteFunctionExpressions);\n    }\n    if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n        passes.add(aliasStrings);\n    }\n    if (options.aliasExternals) {\n        passes.add(aliasExternals);\n    }\n    if (options.aliasKeywords) {\n        passes.add(aliasKeywords);\n    }\n    passes.add(markUnnormalized);\n    if (options.coalesceVariableNames) {\n        passes.add(coalesceVariableNames);\n    }\n    if (options.collapseVariableDeclarations) {\n        passes.add(collapseVariableDeclarations);\n    }\n    passes.add(denormalize);\n    if (options.instrumentationTemplate !\u003d null) {\n        passes.add(instrumentFunctions);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n        passes.add(invertContextualRenaming);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n        passes.add(renameVars);\n    }\n    if (options.groupVariableDeclarations) {\n        passes.add(groupVariableDeclarations);\n    }\n    if (options.processObjectPropertyString) {\n        passes.add(objectPropertyStringPostprocess);\n    }\n    if (options.labelRenaming) {\n        passes.add(renameLabels);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n        passes.add(nameUnmappedAnonymousFunctions);\n    }\n    if (options.checkSymbols) {\n        passes.add(sanityCheckVars);\n    }\n    return passes;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 322,
      "functionName": "getOptimizations",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,148 +1,148 @@\n @Override\n protected List\u003cPassFactory\u003e getOptimizations() {\n     List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n     if (options.runtimeTypeCheck) {\n         passes.add(runtimeTypeCheck);\n     }\n     passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n     if (!options.idGenerators.isEmpty()) {\n         passes.add(replaceIdGenerators);\n     }\n     if (options.optimizeArgumentsArray) {\n         passes.add(optimizeArgumentsArray);\n     }\n     if (options.optimizeParameters) {\n         passes.add(removeUselessParameters);\n     }\n     if (options.closurePass \u0026\u0026 options.removeAbstractMethods) {\n         passes.add(removeAbstractMethods);\n     }\n     if (options.collapseProperties) {\n         passes.add(collapseProperties);\n     }\n     if (options.tightenTypes) {\n         passes.add(tightenTypesBuilder);\n     }\n     if (options.disambiguateProperties) {\n         passes.add(disambiguateProperties);\n     }\n     if (options.computeFunctionSideEffects) {\n         passes.add(markPureFunctions);\n     } else if (options.markNoSideEffectCalls) {\n         passes.add(markNoSideEffectCalls);\n     }\n     if (options.chainCalls) {\n         passes.add(chainCalls);\n     }\n     if (options.inlineConstantVars) {\n         passes.add(checkConsts);\n     }\n     if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n         passes.add(replaceStrings);\n     }\n     if (options.ignoreCajaProperties) {\n         passes.add(ignoreCajaProperties);\n     }\n     assertAllOneTimePasses(passes);\n     if (options.smartNameRemoval || options.reportPath !\u003d null) {\n         passes.addAll(getCodeRemovingPasses());\n         passes.add(smartNamePass);\n     }\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.devirtualizePrototypeMethods) {\n         passes.add(devirtualizePrototypeMethods);\n     }\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n     }\n     passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n     passes.addAll(getMainOptimizationLoop());\n     passes.add(createEmptyPass(\"beforeModuleMotion\"));\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.crossModuleMethodMotion) {\n         passes.add(crossModuleMethodMotion);\n     }\n     passes.add(createEmptyPass(\"afterModuleMotion\"));\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n     }\n     if (options.flowSensitiveInlineVariables) {\n         passes.add(flowSensitiveInlineVariables);\n         if (options.removeUnusedVars) {\n             passes.add(removeUnusedVars);\n         }\n     }\n     if (options.collapseAnonymousFunctions) {\n         passes.add(collapseAnonymousFunctions);\n     }\n     if (options.moveFunctionDeclarations) {\n         passes.add(moveFunctionDeclarations);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n         passes.add(nameMappedAnonymousFunctions);\n     }\n-    if (options.extractPrototypeMemberDeclarations \u0026\u0026 options.variableRenaming \u003d\u003d VariableRenamingPolicy.ALL \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n+    if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n         passes.add(extractPrototypeMemberDeclarations);\n     }\n     if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n         passes.add(ambiguateProperties);\n     }\n     if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n         passes.add(renameProperties);\n     }\n     if (options.reserveRawExports) {\n         passes.add(gatherRawExports);\n     }\n     if (options.convertToDottedProperties) {\n         passes.add(convertToDottedProperties);\n     }\n     if (options.rewriteFunctionExpressions) {\n         passes.add(rewriteFunctionExpressions);\n     }\n     if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n         passes.add(aliasStrings);\n     }\n     if (options.aliasExternals) {\n         passes.add(aliasExternals);\n     }\n     if (options.aliasKeywords) {\n         passes.add(aliasKeywords);\n     }\n     passes.add(markUnnormalized);\n     if (options.coalesceVariableNames) {\n         passes.add(coalesceVariableNames);\n     }\n     if (options.collapseVariableDeclarations) {\n         passes.add(collapseVariableDeclarations);\n     }\n     passes.add(denormalize);\n     if (options.instrumentationTemplate !\u003d null) {\n         passes.add(instrumentFunctions);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n         passes.add(invertContextualRenaming);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n         passes.add(renameVars);\n     }\n     if (options.groupVariableDeclarations) {\n         passes.add(groupVariableDeclarations);\n     }\n     if (options.processObjectPropertyString) {\n         passes.add(objectPropertyStringPostprocess);\n     }\n     if (options.labelRenaming) {\n         passes.add(renameLabels);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n         passes.add(nameUnmappedAnonymousFunctions);\n     }\n     if (options.checkSymbols) {\n         passes.add(sanityCheckVars);\n     }\n     return passes;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "de6bda7da621841ee37e8a92399a9e7f0088dbf2": {
      "type": "Ybodychange",
      "commitMessage": "\nOnly run prototype extraction when variable renaming is on.\n\nR\u003dacleung\nDELTA\u003d50  (14 added, 29 deleted, 7 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d53016\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@286 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/19/10, 2:02 PM",
      "commitName": "de6bda7da621841ee37e8a92399a9e7f0088dbf2",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "7/13/10, 10:54 AM",
      "commitNameOld": "98d279bce83ddb2dca499be4bc365939f809a923",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 6.13,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getOptimizations() {\n    List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n    if (options.runtimeTypeCheck) {\n        passes.add(runtimeTypeCheck);\n    }\n    passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n    if (!options.idGenerators.isEmpty()) {\n        passes.add(replaceIdGenerators);\n    }\n    if (options.optimizeArgumentsArray) {\n        passes.add(optimizeArgumentsArray);\n    }\n    if (options.optimizeParameters) {\n        passes.add(removeUselessParameters);\n    }\n    if (options.closurePass \u0026\u0026 options.removeAbstractMethods) {\n        passes.add(removeAbstractMethods);\n    }\n    if (options.collapseProperties) {\n        passes.add(collapseProperties);\n    }\n    if (options.tightenTypes) {\n        passes.add(tightenTypesBuilder);\n    }\n    if (options.disambiguateProperties) {\n        passes.add(disambiguateProperties);\n    }\n    if (options.computeFunctionSideEffects) {\n        passes.add(markPureFunctions);\n    } else if (options.markNoSideEffectCalls) {\n        passes.add(markNoSideEffectCalls);\n    }\n    if (options.chainCalls) {\n        passes.add(chainCalls);\n    }\n    if (options.inlineConstantVars) {\n        passes.add(checkConsts);\n    }\n    if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n        passes.add(replaceStrings);\n    }\n    if (options.ignoreCajaProperties) {\n        passes.add(ignoreCajaProperties);\n    }\n    assertAllOneTimePasses(passes);\n    if (options.smartNameRemoval || options.reportPath !\u003d null) {\n        passes.addAll(getCodeRemovingPasses());\n        passes.add(smartNamePass);\n    }\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.devirtualizePrototypeMethods) {\n        passes.add(devirtualizePrototypeMethods);\n    }\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n    }\n    passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n    passes.addAll(getMainOptimizationLoop());\n    passes.add(createEmptyPass(\"beforeModuleMotion\"));\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.crossModuleMethodMotion) {\n        passes.add(crossModuleMethodMotion);\n    }\n    passes.add(createEmptyPass(\"afterModuleMotion\"));\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n    }\n    if (options.flowSensitiveInlineVariables) {\n        passes.add(flowSensitiveInlineVariables);\n        if (options.removeUnusedVars) {\n            passes.add(removeUnusedVars);\n        }\n    }\n    if (options.collapseAnonymousFunctions) {\n        passes.add(collapseAnonymousFunctions);\n    }\n    if (options.moveFunctionDeclarations) {\n        passes.add(moveFunctionDeclarations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n        passes.add(nameMappedAnonymousFunctions);\n    }\n    if (options.extractPrototypeMemberDeclarations \u0026\u0026 options.variableRenaming \u003d\u003d VariableRenamingPolicy.ALL \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n        passes.add(extractPrototypeMemberDeclarations);\n    }\n    if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n        passes.add(ambiguateProperties);\n    }\n    if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n        passes.add(renameProperties);\n    }\n    if (options.reserveRawExports) {\n        passes.add(gatherRawExports);\n    }\n    if (options.convertToDottedProperties) {\n        passes.add(convertToDottedProperties);\n    }\n    if (options.rewriteFunctionExpressions) {\n        passes.add(rewriteFunctionExpressions);\n    }\n    if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n        passes.add(aliasStrings);\n    }\n    if (options.aliasExternals) {\n        passes.add(aliasExternals);\n    }\n    if (options.aliasKeywords) {\n        passes.add(aliasKeywords);\n    }\n    passes.add(markUnnormalized);\n    if (options.coalesceVariableNames) {\n        passes.add(coalesceVariableNames);\n    }\n    if (options.collapseVariableDeclarations) {\n        passes.add(collapseVariableDeclarations);\n    }\n    passes.add(denormalize);\n    if (options.instrumentationTemplate !\u003d null) {\n        passes.add(instrumentFunctions);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n        passes.add(invertContextualRenaming);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n        passes.add(renameVars);\n    }\n    if (options.groupVariableDeclarations) {\n        passes.add(groupVariableDeclarations);\n    }\n    if (options.processObjectPropertyString) {\n        passes.add(objectPropertyStringPostprocess);\n    }\n    if (options.labelRenaming) {\n        passes.add(renameLabels);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n        passes.add(nameUnmappedAnonymousFunctions);\n    }\n    if (options.checkSymbols) {\n        passes.add(sanityCheckVars);\n    }\n    return passes;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 322,
      "functionName": "getOptimizations",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,148 +1,148 @@\n @Override\n protected List\u003cPassFactory\u003e getOptimizations() {\n     List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n     if (options.runtimeTypeCheck) {\n         passes.add(runtimeTypeCheck);\n     }\n     passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n     if (!options.idGenerators.isEmpty()) {\n         passes.add(replaceIdGenerators);\n     }\n     if (options.optimizeArgumentsArray) {\n         passes.add(optimizeArgumentsArray);\n     }\n     if (options.optimizeParameters) {\n         passes.add(removeUselessParameters);\n     }\n     if (options.closurePass \u0026\u0026 options.removeAbstractMethods) {\n         passes.add(removeAbstractMethods);\n     }\n     if (options.collapseProperties) {\n         passes.add(collapseProperties);\n     }\n     if (options.tightenTypes) {\n         passes.add(tightenTypesBuilder);\n     }\n     if (options.disambiguateProperties) {\n         passes.add(disambiguateProperties);\n     }\n     if (options.computeFunctionSideEffects) {\n         passes.add(markPureFunctions);\n     } else if (options.markNoSideEffectCalls) {\n         passes.add(markNoSideEffectCalls);\n     }\n     if (options.chainCalls) {\n         passes.add(chainCalls);\n     }\n     if (options.inlineConstantVars) {\n         passes.add(checkConsts);\n     }\n     if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n         passes.add(replaceStrings);\n     }\n     if (options.ignoreCajaProperties) {\n         passes.add(ignoreCajaProperties);\n     }\n     assertAllOneTimePasses(passes);\n     if (options.smartNameRemoval || options.reportPath !\u003d null) {\n         passes.addAll(getCodeRemovingPasses());\n         passes.add(smartNamePass);\n     }\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.devirtualizePrototypeMethods) {\n         passes.add(devirtualizePrototypeMethods);\n     }\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n     }\n     passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n     passes.addAll(getMainOptimizationLoop());\n     passes.add(createEmptyPass(\"beforeModuleMotion\"));\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.crossModuleMethodMotion) {\n         passes.add(crossModuleMethodMotion);\n     }\n     passes.add(createEmptyPass(\"afterModuleMotion\"));\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n     }\n     if (options.flowSensitiveInlineVariables) {\n         passes.add(flowSensitiveInlineVariables);\n         if (options.removeUnusedVars) {\n             passes.add(removeUnusedVars);\n         }\n     }\n     if (options.collapseAnonymousFunctions) {\n         passes.add(collapseAnonymousFunctions);\n     }\n     if (options.moveFunctionDeclarations) {\n         passes.add(moveFunctionDeclarations);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n         passes.add(nameMappedAnonymousFunctions);\n     }\n-    if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n+    if (options.extractPrototypeMemberDeclarations \u0026\u0026 options.variableRenaming \u003d\u003d VariableRenamingPolicy.ALL \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n         passes.add(extractPrototypeMemberDeclarations);\n     }\n     if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n         passes.add(ambiguateProperties);\n     }\n     if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n         passes.add(renameProperties);\n     }\n     if (options.reserveRawExports) {\n         passes.add(gatherRawExports);\n     }\n     if (options.convertToDottedProperties) {\n         passes.add(convertToDottedProperties);\n     }\n     if (options.rewriteFunctionExpressions) {\n         passes.add(rewriteFunctionExpressions);\n     }\n     if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n         passes.add(aliasStrings);\n     }\n     if (options.aliasExternals) {\n         passes.add(aliasExternals);\n     }\n     if (options.aliasKeywords) {\n         passes.add(aliasKeywords);\n     }\n     passes.add(markUnnormalized);\n     if (options.coalesceVariableNames) {\n         passes.add(coalesceVariableNames);\n     }\n     if (options.collapseVariableDeclarations) {\n         passes.add(collapseVariableDeclarations);\n     }\n     passes.add(denormalize);\n     if (options.instrumentationTemplate !\u003d null) {\n         passes.add(instrumentFunctions);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n         passes.add(invertContextualRenaming);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n         passes.add(renameVars);\n     }\n     if (options.groupVariableDeclarations) {\n         passes.add(groupVariableDeclarations);\n     }\n     if (options.processObjectPropertyString) {\n         passes.add(objectPropertyStringPostprocess);\n     }\n     if (options.labelRenaming) {\n         passes.add(renameLabels);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n         passes.add(nameUnmappedAnonymousFunctions);\n     }\n     if (options.checkSymbols) {\n         passes.add(sanityCheckVars);\n     }\n     return passes;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6afe53cb82f87071567808d816dea524a74ae3ab": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/07/02 09:18:28 by johnlenz\n\n\tFix a minor code size regression:\n\tSeperate marking the AST unnormalized and the denormalize pass so that\n\tit can take advanced of the dead assignment elimination and var\n\tgathering.\n\n\tR\u003dbowdidge\n\tDELTA\u003d22  (20 added, 1 deleted, 1 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d46008\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@263 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/2/10, 12:32 PM",
      "commitName": "6afe53cb82f87071567808d816dea524a74ae3ab",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "7/1/10, 8:10 PM",
      "commitNameOld": "7faf5924ea9c2ea0910cac2f6be17faa843ccf54",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 0.68,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getOptimizations() {\n    List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n    if (options.runtimeTypeCheck) {\n        passes.add(runtimeTypeCheck);\n    }\n    passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n    if (!options.idGenerators.isEmpty()) {\n        passes.add(replaceIdGenerators);\n    }\n    if (options.optimizeArgumentsArray) {\n        passes.add(optimizeArgumentsArray);\n    }\n    if (options.optimizeParameters) {\n        passes.add(removeUselessParameters);\n    }\n    if (options.closurePass \u0026\u0026 options.removeAbstractMethods) {\n        passes.add(removeAbstractMethods);\n    }\n    if (options.collapseProperties) {\n        passes.add(collapseProperties);\n    }\n    if (options.tightenTypes) {\n        passes.add(tightenTypesBuilder);\n    }\n    if (options.disambiguateProperties) {\n        passes.add(disambiguateProperties);\n    }\n    if (options.computeFunctionSideEffects) {\n        passes.add(markPureFunctions);\n    } else if (options.markNoSideEffectCalls) {\n        passes.add(markNoSideEffectCalls);\n    }\n    if (options.chainCalls) {\n        passes.add(chainCalls);\n    }\n    if (options.inlineConstantVars) {\n        passes.add(checkConsts);\n    }\n    if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n        passes.add(replaceStrings);\n    }\n    if (options.ignoreCajaProperties) {\n        passes.add(ignoreCajaProperties);\n    }\n    assertAllOneTimePasses(passes);\n    if (options.smartNameRemoval || options.reportPath !\u003d null) {\n        passes.addAll(getCodeRemovingPasses());\n        passes.add(smartNamePass);\n    }\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.devirtualizePrototypeMethods) {\n        passes.add(devirtualizePrototypeMethods);\n    }\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n    }\n    passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n    passes.addAll(getMainOptimizationLoop());\n    passes.add(createEmptyPass(\"beforeModuleMotion\"));\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.crossModuleMethodMotion) {\n        passes.add(crossModuleMethodMotion);\n    }\n    passes.add(createEmptyPass(\"afterModuleMotion\"));\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n    }\n    if (options.flowSensitiveInlineVariables) {\n        passes.add(flowSensitiveInlineVariables);\n        if (options.removeUnusedVars) {\n            passes.add(removeUnusedVars);\n        }\n    }\n    if (options.collapseAnonymousFunctions) {\n        passes.add(collapseAnonymousFunctions);\n    }\n    if (options.moveFunctionDeclarations) {\n        passes.add(moveFunctionDeclarations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n        passes.add(nameMappedAnonymousFunctions);\n    }\n    if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n        passes.add(extractPrototypeMemberDeclarations);\n    }\n    if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n        passes.add(ambiguateProperties);\n    }\n    if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n        passes.add(renameProperties);\n    }\n    if (options.reserveRawExports) {\n        passes.add(gatherRawExports);\n    }\n    if (options.convertToDottedProperties) {\n        passes.add(convertToDottedProperties);\n    }\n    if (options.rewriteFunctionExpressions) {\n        passes.add(rewriteFunctionExpressions);\n    }\n    if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n        passes.add(aliasStrings);\n    }\n    if (options.aliasExternals) {\n        passes.add(aliasExternals);\n    }\n    if (options.aliasKeywords) {\n        passes.add(aliasKeywords);\n    }\n    passes.add(markUnnormalized);\n    if (options.coalesceVariableNames) {\n        passes.add(coalesceVariableNames);\n    }\n    if (options.collapseVariableDeclarations) {\n        passes.add(collapseVariableDeclarations);\n    }\n    passes.add(denormalize);\n    if (options.instrumentationTemplate !\u003d null) {\n        passes.add(instrumentFunctions);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n        passes.add(invertContextualRenaming);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n        passes.add(renameVars);\n    }\n    if (options.groupVariableDeclarations) {\n        passes.add(groupVariableDeclarations);\n    }\n    if (options.processObjectPropertyString) {\n        passes.add(objectPropertyStringPostprocess);\n    }\n    if (options.labelRenaming) {\n        passes.add(renameLabels);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n        passes.add(nameUnmappedAnonymousFunctions);\n    }\n    if (options.checkSymbols) {\n        passes.add(sanityCheckVars);\n    }\n    return passes;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 304,
      "functionName": "getOptimizations",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,147 +1,148 @@\n @Override\n protected List\u003cPassFactory\u003e getOptimizations() {\n     List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n     if (options.runtimeTypeCheck) {\n         passes.add(runtimeTypeCheck);\n     }\n     passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n     if (!options.idGenerators.isEmpty()) {\n         passes.add(replaceIdGenerators);\n     }\n     if (options.optimizeArgumentsArray) {\n         passes.add(optimizeArgumentsArray);\n     }\n     if (options.optimizeParameters) {\n         passes.add(removeUselessParameters);\n     }\n     if (options.closurePass \u0026\u0026 options.removeAbstractMethods) {\n         passes.add(removeAbstractMethods);\n     }\n     if (options.collapseProperties) {\n         passes.add(collapseProperties);\n     }\n     if (options.tightenTypes) {\n         passes.add(tightenTypesBuilder);\n     }\n     if (options.disambiguateProperties) {\n         passes.add(disambiguateProperties);\n     }\n     if (options.computeFunctionSideEffects) {\n         passes.add(markPureFunctions);\n     } else if (options.markNoSideEffectCalls) {\n         passes.add(markNoSideEffectCalls);\n     }\n     if (options.chainCalls) {\n         passes.add(chainCalls);\n     }\n     if (options.inlineConstantVars) {\n         passes.add(checkConsts);\n     }\n     if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n         passes.add(replaceStrings);\n     }\n     if (options.ignoreCajaProperties) {\n         passes.add(ignoreCajaProperties);\n     }\n     assertAllOneTimePasses(passes);\n     if (options.smartNameRemoval || options.reportPath !\u003d null) {\n         passes.addAll(getCodeRemovingPasses());\n         passes.add(smartNamePass);\n     }\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.devirtualizePrototypeMethods) {\n         passes.add(devirtualizePrototypeMethods);\n     }\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n     }\n     passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n     passes.addAll(getMainOptimizationLoop());\n     passes.add(createEmptyPass(\"beforeModuleMotion\"));\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.crossModuleMethodMotion) {\n         passes.add(crossModuleMethodMotion);\n     }\n     passes.add(createEmptyPass(\"afterModuleMotion\"));\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n     }\n     if (options.flowSensitiveInlineVariables) {\n         passes.add(flowSensitiveInlineVariables);\n         if (options.removeUnusedVars) {\n             passes.add(removeUnusedVars);\n         }\n     }\n     if (options.collapseAnonymousFunctions) {\n         passes.add(collapseAnonymousFunctions);\n     }\n     if (options.moveFunctionDeclarations) {\n         passes.add(moveFunctionDeclarations);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n         passes.add(nameMappedAnonymousFunctions);\n     }\n     if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n         passes.add(extractPrototypeMemberDeclarations);\n     }\n     if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n         passes.add(ambiguateProperties);\n     }\n     if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n         passes.add(renameProperties);\n     }\n     if (options.reserveRawExports) {\n         passes.add(gatherRawExports);\n     }\n     if (options.convertToDottedProperties) {\n         passes.add(convertToDottedProperties);\n     }\n     if (options.rewriteFunctionExpressions) {\n         passes.add(rewriteFunctionExpressions);\n     }\n     if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n         passes.add(aliasStrings);\n     }\n     if (options.aliasExternals) {\n         passes.add(aliasExternals);\n     }\n     if (options.aliasKeywords) {\n         passes.add(aliasKeywords);\n     }\n-    passes.add(denormalize);\n+    passes.add(markUnnormalized);\n     if (options.coalesceVariableNames) {\n         passes.add(coalesceVariableNames);\n     }\n     if (options.collapseVariableDeclarations) {\n         passes.add(collapseVariableDeclarations);\n     }\n+    passes.add(denormalize);\n     if (options.instrumentationTemplate !\u003d null) {\n         passes.add(instrumentFunctions);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n         passes.add(invertContextualRenaming);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n         passes.add(renameVars);\n     }\n     if (options.groupVariableDeclarations) {\n         passes.add(groupVariableDeclarations);\n     }\n     if (options.processObjectPropertyString) {\n         passes.add(objectPropertyStringPostprocess);\n     }\n     if (options.labelRenaming) {\n         passes.add(renameLabels);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n         passes.add(nameUnmappedAnonymousFunctions);\n     }\n     if (options.checkSymbols) {\n         passes.add(sanityCheckVars);\n     }\n     return passes;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7faf5924ea9c2ea0910cac2f6be17faa843ccf54": {
      "type": "Ybodychange",
      "commitMessage": "Resync SVN to perforce. MOE exploded, and we lost a bunch of changelist\ndescriptions. Argh.\n\nFixes issue 175\nFixes issue 191\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@262 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/1/10, 8:10 PM",
      "commitName": "7faf5924ea9c2ea0910cac2f6be17faa843ccf54",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "6/29/10, 2:10 PM",
      "commitNameOld": "541402929a600a95bf099513908b4efd8b0e1c5b",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 2.25,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getOptimizations() {\n    List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n    if (options.runtimeTypeCheck) {\n        passes.add(runtimeTypeCheck);\n    }\n    passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n    if (!options.idGenerators.isEmpty()) {\n        passes.add(replaceIdGenerators);\n    }\n    if (options.optimizeArgumentsArray) {\n        passes.add(optimizeArgumentsArray);\n    }\n    if (options.optimizeParameters) {\n        passes.add(removeUselessParameters);\n    }\n    if (options.closurePass \u0026\u0026 options.removeAbstractMethods) {\n        passes.add(removeAbstractMethods);\n    }\n    if (options.collapseProperties) {\n        passes.add(collapseProperties);\n    }\n    if (options.tightenTypes) {\n        passes.add(tightenTypesBuilder);\n    }\n    if (options.disambiguateProperties) {\n        passes.add(disambiguateProperties);\n    }\n    if (options.computeFunctionSideEffects) {\n        passes.add(markPureFunctions);\n    } else if (options.markNoSideEffectCalls) {\n        passes.add(markNoSideEffectCalls);\n    }\n    if (options.chainCalls) {\n        passes.add(chainCalls);\n    }\n    if (options.inlineConstantVars) {\n        passes.add(checkConsts);\n    }\n    if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n        passes.add(replaceStrings);\n    }\n    if (options.ignoreCajaProperties) {\n        passes.add(ignoreCajaProperties);\n    }\n    assertAllOneTimePasses(passes);\n    if (options.smartNameRemoval || options.reportPath !\u003d null) {\n        passes.addAll(getCodeRemovingPasses());\n        passes.add(smartNamePass);\n    }\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.devirtualizePrototypeMethods) {\n        passes.add(devirtualizePrototypeMethods);\n    }\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n    }\n    passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n    passes.addAll(getMainOptimizationLoop());\n    passes.add(createEmptyPass(\"beforeModuleMotion\"));\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.crossModuleMethodMotion) {\n        passes.add(crossModuleMethodMotion);\n    }\n    passes.add(createEmptyPass(\"afterModuleMotion\"));\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n    }\n    if (options.flowSensitiveInlineVariables) {\n        passes.add(flowSensitiveInlineVariables);\n        if (options.removeUnusedVars) {\n            passes.add(removeUnusedVars);\n        }\n    }\n    if (options.collapseAnonymousFunctions) {\n        passes.add(collapseAnonymousFunctions);\n    }\n    if (options.moveFunctionDeclarations) {\n        passes.add(moveFunctionDeclarations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n        passes.add(nameMappedAnonymousFunctions);\n    }\n    if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n        passes.add(extractPrototypeMemberDeclarations);\n    }\n    if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n        passes.add(ambiguateProperties);\n    }\n    if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n        passes.add(renameProperties);\n    }\n    if (options.reserveRawExports) {\n        passes.add(gatherRawExports);\n    }\n    if (options.convertToDottedProperties) {\n        passes.add(convertToDottedProperties);\n    }\n    if (options.rewriteFunctionExpressions) {\n        passes.add(rewriteFunctionExpressions);\n    }\n    if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n        passes.add(aliasStrings);\n    }\n    if (options.aliasExternals) {\n        passes.add(aliasExternals);\n    }\n    if (options.aliasKeywords) {\n        passes.add(aliasKeywords);\n    }\n    passes.add(denormalize);\n    if (options.coalesceVariableNames) {\n        passes.add(coalesceVariableNames);\n    }\n    if (options.collapseVariableDeclarations) {\n        passes.add(collapseVariableDeclarations);\n    }\n    if (options.instrumentationTemplate !\u003d null) {\n        passes.add(instrumentFunctions);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n        passes.add(invertContextualRenaming);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n        passes.add(renameVars);\n    }\n    if (options.groupVariableDeclarations) {\n        passes.add(groupVariableDeclarations);\n    }\n    if (options.processObjectPropertyString) {\n        passes.add(objectPropertyStringPostprocess);\n    }\n    if (options.labelRenaming) {\n        passes.add(renameLabels);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n        passes.add(nameUnmappedAnonymousFunctions);\n    }\n    if (options.checkSymbols) {\n        passes.add(sanityCheckVars);\n    }\n    return passes;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 304,
      "functionName": "getOptimizations",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,147 +1,147 @@\n @Override\n protected List\u003cPassFactory\u003e getOptimizations() {\n     List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n     if (options.runtimeTypeCheck) {\n         passes.add(runtimeTypeCheck);\n     }\n     passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n-    if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n-        passes.add(replaceStrings);\n-    }\n     if (!options.idGenerators.isEmpty()) {\n         passes.add(replaceIdGenerators);\n     }\n     if (options.optimizeArgumentsArray) {\n         passes.add(optimizeArgumentsArray);\n     }\n     if (options.optimizeParameters) {\n         passes.add(removeUselessParameters);\n     }\n     if (options.closurePass \u0026\u0026 options.removeAbstractMethods) {\n         passes.add(removeAbstractMethods);\n     }\n     if (options.collapseProperties) {\n         passes.add(collapseProperties);\n     }\n     if (options.tightenTypes) {\n         passes.add(tightenTypesBuilder);\n     }\n     if (options.disambiguateProperties) {\n         passes.add(disambiguateProperties);\n     }\n     if (options.computeFunctionSideEffects) {\n         passes.add(markPureFunctions);\n     } else if (options.markNoSideEffectCalls) {\n         passes.add(markNoSideEffectCalls);\n     }\n     if (options.chainCalls) {\n         passes.add(chainCalls);\n     }\n     if (options.inlineConstantVars) {\n         passes.add(checkConsts);\n     }\n+    if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n+        passes.add(replaceStrings);\n+    }\n     if (options.ignoreCajaProperties) {\n         passes.add(ignoreCajaProperties);\n     }\n     assertAllOneTimePasses(passes);\n     if (options.smartNameRemoval || options.reportPath !\u003d null) {\n         passes.addAll(getCodeRemovingPasses());\n         passes.add(smartNamePass);\n     }\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.devirtualizePrototypeMethods) {\n         passes.add(devirtualizePrototypeMethods);\n     }\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n     }\n     passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n     passes.addAll(getMainOptimizationLoop());\n     passes.add(createEmptyPass(\"beforeModuleMotion\"));\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.crossModuleMethodMotion) {\n         passes.add(crossModuleMethodMotion);\n     }\n     passes.add(createEmptyPass(\"afterModuleMotion\"));\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n     }\n     if (options.flowSensitiveInlineVariables) {\n         passes.add(flowSensitiveInlineVariables);\n         if (options.removeUnusedVars) {\n             passes.add(removeUnusedVars);\n         }\n     }\n     if (options.collapseAnonymousFunctions) {\n         passes.add(collapseAnonymousFunctions);\n     }\n     if (options.moveFunctionDeclarations) {\n         passes.add(moveFunctionDeclarations);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n         passes.add(nameMappedAnonymousFunctions);\n     }\n     if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n         passes.add(extractPrototypeMemberDeclarations);\n     }\n     if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n         passes.add(ambiguateProperties);\n     }\n     if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n         passes.add(renameProperties);\n     }\n     if (options.reserveRawExports) {\n         passes.add(gatherRawExports);\n     }\n     if (options.convertToDottedProperties) {\n         passes.add(convertToDottedProperties);\n     }\n     if (options.rewriteFunctionExpressions) {\n         passes.add(rewriteFunctionExpressions);\n     }\n     if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n         passes.add(aliasStrings);\n     }\n     if (options.aliasExternals) {\n         passes.add(aliasExternals);\n     }\n     if (options.aliasKeywords) {\n         passes.add(aliasKeywords);\n     }\n     passes.add(denormalize);\n     if (options.coalesceVariableNames) {\n         passes.add(coalesceVariableNames);\n     }\n     if (options.collapseVariableDeclarations) {\n         passes.add(collapseVariableDeclarations);\n     }\n     if (options.instrumentationTemplate !\u003d null) {\n         passes.add(instrumentFunctions);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n         passes.add(invertContextualRenaming);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n         passes.add(renameVars);\n     }\n     if (options.groupVariableDeclarations) {\n         passes.add(groupVariableDeclarations);\n     }\n     if (options.processObjectPropertyString) {\n         passes.add(objectPropertyStringPostprocess);\n     }\n     if (options.labelRenaming) {\n         passes.add(renameLabels);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n         passes.add(nameUnmappedAnonymousFunctions);\n     }\n     if (options.checkSymbols) {\n         passes.add(sanityCheckVars);\n     }\n     return passes;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c9e89727dc8063d087d28e42629606f4fd74a6e5": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/06/22 by nicksantos\n\n\tvariable coalescing better be run AFTER ambiguate properties, and\n\tafter denormalization.\n\n\tR\u003djohnlenz\n\tDELTA\u003d36  (20 added, 16 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d34005\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@248 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/22/10, 4:00 PM",
      "commitName": "c9e89727dc8063d087d28e42629606f4fd74a6e5",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "6/16/10, 12:33 PM",
      "commitNameOld": "e33e925eea3a8e4de958864e531e1adc4da62e18",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 6.14,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getOptimizations() {\n    List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n    if (options.runtimeTypeCheck) {\n        passes.add(runtimeTypeCheck);\n    }\n    passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n    if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n        passes.add(replaceStrings);\n    }\n    if (!options.idGenerators.isEmpty()) {\n        passes.add(replaceIdGenerators);\n    }\n    if (options.optimizeArgumentsArray) {\n        passes.add(optimizeArgumentsArray);\n    }\n    if (options.optimizeParameters) {\n        passes.add(removeUselessParameters);\n    }\n    if (options.closurePass \u0026\u0026 options.removeAbstractMethods) {\n        passes.add(removeAbstractMethods);\n    }\n    if (options.collapseProperties) {\n        passes.add(collapseProperties);\n    }\n    if (options.tightenTypes) {\n        passes.add(tightenTypesBuilder);\n    }\n    if (options.disambiguateProperties) {\n        passes.add(disambiguateProperties);\n    }\n    if (options.computeFunctionSideEffects) {\n        passes.add(markPureFunctions);\n    } else if (options.markNoSideEffectCalls) {\n        passes.add(markNoSideEffectCalls);\n    }\n    if (options.chainCalls) {\n        passes.add(chainCalls);\n    }\n    if (options.inlineConstantVars) {\n        passes.add(checkConsts);\n    }\n    if (options.ignoreCajaProperties) {\n        passes.add(ignoreCajaProperties);\n    }\n    assertAllOneTimePasses(passes);\n    if (options.smartNameRemoval || options.reportPath !\u003d null) {\n        passes.addAll(getCodeRemovingPasses());\n        passes.add(smartNamePass);\n    }\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.devirtualizePrototypeMethods) {\n        passes.add(devirtualizePrototypeMethods);\n    }\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n    }\n    passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n    passes.addAll(getMainOptimizationLoop());\n    passes.add(createEmptyPass(\"beforeModuleMotion\"));\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.crossModuleMethodMotion) {\n        passes.add(crossModuleMethodMotion);\n    }\n    passes.add(createEmptyPass(\"afterModuleMotion\"));\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n    }\n    if (options.flowSensitiveInlineVariables) {\n        passes.add(flowSensitiveInlineVariables);\n        if (options.removeUnusedVars) {\n            passes.add(removeUnusedVars);\n        }\n    }\n    if (options.collapseAnonymousFunctions) {\n        passes.add(collapseAnonymousFunctions);\n    }\n    if (options.moveFunctionDeclarations) {\n        passes.add(moveFunctionDeclarations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n        passes.add(nameMappedAnonymousFunctions);\n    }\n    if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n        passes.add(extractPrototypeMemberDeclarations);\n    }\n    if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n        passes.add(ambiguateProperties);\n    }\n    if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n        passes.add(renameProperties);\n    }\n    if (options.reserveRawExports) {\n        passes.add(gatherRawExports);\n    }\n    if (options.convertToDottedProperties) {\n        passes.add(convertToDottedProperties);\n    }\n    if (options.rewriteFunctionExpressions) {\n        passes.add(rewriteFunctionExpressions);\n    }\n    if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n        passes.add(aliasStrings);\n    }\n    if (options.aliasExternals) {\n        passes.add(aliasExternals);\n    }\n    if (options.aliasKeywords) {\n        passes.add(aliasKeywords);\n    }\n    passes.add(denormalize);\n    if (options.coalesceVariableNames) {\n        passes.add(coalesceVariableNames);\n    }\n    if (options.collapseVariableDeclarations) {\n        passes.add(collapseVariableDeclarations);\n    }\n    if (options.instrumentationTemplate !\u003d null) {\n        passes.add(instrumentFunctions);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n        passes.add(invertContextualRenaming);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n        passes.add(renameVars);\n    }\n    if (options.groupVariableDeclarations) {\n        passes.add(groupVariableDeclarations);\n    }\n    if (options.processObjectPropertyString) {\n        passes.add(objectPropertyStringPostprocess);\n    }\n    if (options.labelRenaming) {\n        passes.add(renameLabels);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n        passes.add(nameUnmappedAnonymousFunctions);\n    }\n    if (options.checkSymbols) {\n        passes.add(sanityCheckVars);\n    }\n    return passes;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 304,
      "functionName": "getOptimizations",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,147 +1,147 @@\n @Override\n protected List\u003cPassFactory\u003e getOptimizations() {\n     List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n     if (options.runtimeTypeCheck) {\n         passes.add(runtimeTypeCheck);\n     }\n     passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n     if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n         passes.add(replaceStrings);\n     }\n     if (!options.idGenerators.isEmpty()) {\n         passes.add(replaceIdGenerators);\n     }\n     if (options.optimizeArgumentsArray) {\n         passes.add(optimizeArgumentsArray);\n     }\n     if (options.optimizeParameters) {\n         passes.add(removeUselessParameters);\n     }\n     if (options.closurePass \u0026\u0026 options.removeAbstractMethods) {\n         passes.add(removeAbstractMethods);\n     }\n     if (options.collapseProperties) {\n         passes.add(collapseProperties);\n     }\n     if (options.tightenTypes) {\n         passes.add(tightenTypesBuilder);\n     }\n     if (options.disambiguateProperties) {\n         passes.add(disambiguateProperties);\n     }\n     if (options.computeFunctionSideEffects) {\n         passes.add(markPureFunctions);\n     } else if (options.markNoSideEffectCalls) {\n         passes.add(markNoSideEffectCalls);\n     }\n     if (options.chainCalls) {\n         passes.add(chainCalls);\n     }\n     if (options.inlineConstantVars) {\n         passes.add(checkConsts);\n     }\n     if (options.ignoreCajaProperties) {\n         passes.add(ignoreCajaProperties);\n     }\n     assertAllOneTimePasses(passes);\n     if (options.smartNameRemoval || options.reportPath !\u003d null) {\n         passes.addAll(getCodeRemovingPasses());\n         passes.add(smartNamePass);\n     }\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.devirtualizePrototypeMethods) {\n         passes.add(devirtualizePrototypeMethods);\n     }\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n     }\n     passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n     passes.addAll(getMainOptimizationLoop());\n     passes.add(createEmptyPass(\"beforeModuleMotion\"));\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.crossModuleMethodMotion) {\n         passes.add(crossModuleMethodMotion);\n     }\n     passes.add(createEmptyPass(\"afterModuleMotion\"));\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n     }\n     if (options.flowSensitiveInlineVariables) {\n         passes.add(flowSensitiveInlineVariables);\n         if (options.removeUnusedVars) {\n             passes.add(removeUnusedVars);\n         }\n     }\n     if (options.collapseAnonymousFunctions) {\n         passes.add(collapseAnonymousFunctions);\n     }\n     if (options.moveFunctionDeclarations) {\n         passes.add(moveFunctionDeclarations);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n         passes.add(nameMappedAnonymousFunctions);\n     }\n     if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n         passes.add(extractPrototypeMemberDeclarations);\n     }\n-    if (options.coalesceVariableNames) {\n-        passes.add(coalesceVariableNames);\n-    }\n     if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n         passes.add(ambiguateProperties);\n     }\n     if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n         passes.add(renameProperties);\n     }\n     if (options.reserveRawExports) {\n         passes.add(gatherRawExports);\n     }\n     if (options.convertToDottedProperties) {\n         passes.add(convertToDottedProperties);\n     }\n     if (options.rewriteFunctionExpressions) {\n         passes.add(rewriteFunctionExpressions);\n     }\n     if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n         passes.add(aliasStrings);\n     }\n     if (options.aliasExternals) {\n         passes.add(aliasExternals);\n     }\n     if (options.aliasKeywords) {\n         passes.add(aliasKeywords);\n     }\n+    passes.add(denormalize);\n+    if (options.coalesceVariableNames) {\n+        passes.add(coalesceVariableNames);\n+    }\n     if (options.collapseVariableDeclarations) {\n         passes.add(collapseVariableDeclarations);\n     }\n-    passes.add(denormalize);\n     if (options.instrumentationTemplate !\u003d null) {\n         passes.add(instrumentFunctions);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n         passes.add(invertContextualRenaming);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n         passes.add(renameVars);\n     }\n     if (options.groupVariableDeclarations) {\n         passes.add(groupVariableDeclarations);\n     }\n     if (options.processObjectPropertyString) {\n         passes.add(objectPropertyStringPostprocess);\n     }\n     if (options.labelRenaming) {\n         passes.add(renameLabels);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n         passes.add(nameUnmappedAnonymousFunctions);\n     }\n     if (options.checkSymbols) {\n         passes.add(sanityCheckVars);\n     }\n     return passes;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3c2047d4ed1b14fc5e5269d08ee17bfc19bb5374": {
      "type": "Ybodychange",
      "commitMessage": "\n\nChange on 2010/04/27 by john\n\n        A generic replacement for ReplaceDebugStrings.\n\n        R\u003danatol\n        DELTA\u003d864  (860 added, 0 deleted, 4 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dfpmbak\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@200 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/28/10, 11:13 AM",
      "commitName": "3c2047d4ed1b14fc5e5269d08ee17bfc19bb5374",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/13/10, 2:39 PM",
      "commitNameOld": "de13c3313c05f4449c50c560324389d6905a214d",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 14.86,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getOptimizations() {\n    List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n    if (options.runtimeTypeCheck) {\n        passes.add(runtimeTypeCheck);\n    }\n    passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n    if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n        passes.add(replaceStrings);\n    }\n    if (!options.idGenerators.isEmpty()) {\n        passes.add(replaceIdGenerators);\n    }\n    if (options.optimizeArgumentsArray) {\n        passes.add(optimizeArgumentsArray);\n    }\n    if (options.optimizeParameters) {\n        passes.add(removeUselessParameters);\n    }\n    if (options.closurePass \u0026\u0026 options.removeAbstractMethods) {\n        passes.add(removeAbstractMethods);\n    }\n    if (options.collapseProperties) {\n        passes.add(collapseProperties);\n    }\n    if (options.tightenTypes) {\n        passes.add(tightenTypesBuilder);\n    }\n    if (options.disambiguateProperties) {\n        passes.add(disambiguateProperties);\n    }\n    if (options.computeFunctionSideEffects) {\n        passes.add(markPureFunctions);\n    } else if (options.markNoSideEffectCalls) {\n        passes.add(markNoSideEffectCalls);\n    }\n    if (options.chainCalls) {\n        passes.add(chainCalls);\n    }\n    if (options.inlineConstantVars) {\n        passes.add(checkConsts);\n    }\n    if (options.ignoreCajaProperties) {\n        passes.add(ignoreCajaProperties);\n    }\n    assertAllOneTimePasses(passes);\n    if (options.smartNameRemoval || options.reportPath !\u003d null) {\n        passes.addAll(getCodeRemovingPasses());\n        passes.add(smartNamePass);\n    }\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.devirtualizePrototypeMethods) {\n        passes.add(devirtualizePrototypeMethods);\n    }\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n    }\n    passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n    passes.addAll(getMainOptimizationLoop());\n    passes.add(createEmptyPass(\"beforeModuleMotion\"));\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.crossModuleMethodMotion) {\n        passes.add(crossModuleMethodMotion);\n    }\n    passes.add(createEmptyPass(\"afterModuleMotion\"));\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n    }\n    if (options.flowSensitiveInlineVariables) {\n        passes.add(flowSensitiveInlineVariables);\n        if (options.removeUnusedVars) {\n            passes.add(removeUnusedVars);\n        }\n    }\n    if (options.collapseAnonymousFunctions) {\n        passes.add(collapseAnonymousFunctions);\n    }\n    if (options.moveFunctionDeclarations) {\n        passes.add(moveFunctionDeclarations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n        passes.add(nameMappedAnonymousFunctions);\n    }\n    if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n        passes.add(extractPrototypeMemberDeclarations);\n    }\n    if (options.coalesceVariableNames) {\n        passes.add(coalesceVariableNames);\n    }\n    if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n        passes.add(ambiguateProperties);\n    }\n    if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n        passes.add(renameProperties);\n    }\n    if (options.reserveRawExports) {\n        passes.add(gatherRawExports);\n    }\n    if (options.convertToDottedProperties) {\n        passes.add(convertToDottedProperties);\n    }\n    if (options.rewriteFunctionExpressions) {\n        passes.add(rewriteFunctionExpressions);\n    }\n    if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n        passes.add(aliasStrings);\n    }\n    if (options.aliasExternals) {\n        passes.add(aliasExternals);\n    }\n    if (options.aliasKeywords) {\n        passes.add(aliasKeywords);\n    }\n    if (options.collapseVariableDeclarations) {\n        passes.add(collapseVariableDeclarations);\n    }\n    passes.add(denormalize);\n    if (options.instrumentationTemplate !\u003d null) {\n        passes.add(instrumentFunctions);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n        passes.add(invertContextualRenaming);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n        passes.add(renameVars);\n    }\n    if (options.groupVariableDeclarations) {\n        passes.add(groupVariableDeclarations);\n    }\n    if (options.processObjectPropertyString) {\n        passes.add(objectPropertyStringPostprocess);\n    }\n    if (options.labelRenaming) {\n        passes.add(renameLabels);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n        passes.add(nameUnmappedAnonymousFunctions);\n    }\n    if (options.checkSymbols) {\n        passes.add(sanityCheckVars);\n    }\n    return passes;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 292,
      "functionName": "getOptimizations",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,144 +1,147 @@\n @Override\n protected List\u003cPassFactory\u003e getOptimizations() {\n     List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n     if (options.runtimeTypeCheck) {\n         passes.add(runtimeTypeCheck);\n     }\n     passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n+    if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n+        passes.add(replaceStrings);\n+    }\n     if (!options.idGenerators.isEmpty()) {\n         passes.add(replaceIdGenerators);\n     }\n     if (options.optimizeArgumentsArray) {\n         passes.add(optimizeArgumentsArray);\n     }\n     if (options.optimizeParameters) {\n         passes.add(removeUselessParameters);\n     }\n     if (options.closurePass \u0026\u0026 options.removeAbstractMethods) {\n         passes.add(removeAbstractMethods);\n     }\n     if (options.collapseProperties) {\n         passes.add(collapseProperties);\n     }\n     if (options.tightenTypes) {\n         passes.add(tightenTypesBuilder);\n     }\n     if (options.disambiguateProperties) {\n         passes.add(disambiguateProperties);\n     }\n     if (options.computeFunctionSideEffects) {\n         passes.add(markPureFunctions);\n     } else if (options.markNoSideEffectCalls) {\n         passes.add(markNoSideEffectCalls);\n     }\n     if (options.chainCalls) {\n         passes.add(chainCalls);\n     }\n     if (options.inlineConstantVars) {\n         passes.add(checkConsts);\n     }\n     if (options.ignoreCajaProperties) {\n         passes.add(ignoreCajaProperties);\n     }\n     assertAllOneTimePasses(passes);\n     if (options.smartNameRemoval || options.reportPath !\u003d null) {\n         passes.addAll(getCodeRemovingPasses());\n         passes.add(smartNamePass);\n     }\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.devirtualizePrototypeMethods) {\n         passes.add(devirtualizePrototypeMethods);\n     }\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n     }\n     passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n     passes.addAll(getMainOptimizationLoop());\n     passes.add(createEmptyPass(\"beforeModuleMotion\"));\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.crossModuleMethodMotion) {\n         passes.add(crossModuleMethodMotion);\n     }\n     passes.add(createEmptyPass(\"afterModuleMotion\"));\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n     }\n     if (options.flowSensitiveInlineVariables) {\n         passes.add(flowSensitiveInlineVariables);\n         if (options.removeUnusedVars) {\n             passes.add(removeUnusedVars);\n         }\n     }\n     if (options.collapseAnonymousFunctions) {\n         passes.add(collapseAnonymousFunctions);\n     }\n     if (options.moveFunctionDeclarations) {\n         passes.add(moveFunctionDeclarations);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n         passes.add(nameMappedAnonymousFunctions);\n     }\n     if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n         passes.add(extractPrototypeMemberDeclarations);\n     }\n     if (options.coalesceVariableNames) {\n         passes.add(coalesceVariableNames);\n     }\n     if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n         passes.add(ambiguateProperties);\n     }\n     if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n         passes.add(renameProperties);\n     }\n     if (options.reserveRawExports) {\n         passes.add(gatherRawExports);\n     }\n     if (options.convertToDottedProperties) {\n         passes.add(convertToDottedProperties);\n     }\n     if (options.rewriteFunctionExpressions) {\n         passes.add(rewriteFunctionExpressions);\n     }\n     if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n         passes.add(aliasStrings);\n     }\n     if (options.aliasExternals) {\n         passes.add(aliasExternals);\n     }\n     if (options.aliasKeywords) {\n         passes.add(aliasKeywords);\n     }\n     if (options.collapseVariableDeclarations) {\n         passes.add(collapseVariableDeclarations);\n     }\n     passes.add(denormalize);\n     if (options.instrumentationTemplate !\u003d null) {\n         passes.add(instrumentFunctions);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n         passes.add(invertContextualRenaming);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n         passes.add(renameVars);\n     }\n     if (options.groupVariableDeclarations) {\n         passes.add(groupVariableDeclarations);\n     }\n     if (options.processObjectPropertyString) {\n         passes.add(objectPropertyStringPostprocess);\n     }\n     if (options.labelRenaming) {\n         passes.add(renameLabels);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n         passes.add(nameUnmappedAnonymousFunctions);\n     }\n     if (options.checkSymbols) {\n         passes.add(sanityCheckVars);\n     }\n     return passes;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1c2f9589453a5269f45adefed4f38b1b8253d235": {
      "type": "Ybodychange",
      "commitMessage": "Group Variable Declarations in Scope. Merges all variable declarations in a scope into the first var statement in that scope.\n\nWhen doing the merge, only merges var statements with \u003c\u003d 1 var initialization (any number of declarations is acceptable). The assignment is not merged. Only the declaration is merged. (Vishal)\nR\u003drobert,alan\nDELTA\u003d422  (421 added, 1 deleted, 0 changed)\n\n\nRemove out-of-data/bogus comment. (John)\nR\u003dantonio\nDELTA\u003d1  (0 added, 1 deleted, 0 changed)\n\n\nClean up some eclipse warnings. (John)\nR\u003drobert\nDELTA\u003d47  (10 added, 34 deleted, 3 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@161 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/30/10, 3:01 PM",
      "commitName": "1c2f9589453a5269f45adefed4f38b1b8253d235",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "3/25/10, 1:21 PM",
      "commitNameOld": "40ab7fc97ed52e3a1c1235ee20f97c10e39d6390",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 5.07,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getOptimizations() {\n    List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n    if (options.runtimeTypeCheck) {\n        passes.add(runtimeTypeCheck);\n    }\n    passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n    if (!options.idGenerators.isEmpty()) {\n        passes.add(replaceIdGenerators);\n    }\n    if (options.optimizeArgumentsArray) {\n        passes.add(optimizeArgumentsArray);\n    }\n    if (options.optimizeParameters) {\n        passes.add(removeUselessParameters);\n    }\n    if (options.closurePass \u0026\u0026 options.removeAbstractMethods) {\n        passes.add(removeAbstractMethods);\n    }\n    if (options.collapseProperties) {\n        passes.add(collapseProperties);\n    }\n    if (options.tightenTypes) {\n        passes.add(tightenTypesBuilder);\n    }\n    if (options.disambiguateProperties) {\n        passes.add(disambiguateProperties);\n    }\n    if (options.computeFunctionSideEffects) {\n        passes.add(markPureFunctions);\n    } else if (options.markNoSideEffectCalls) {\n        passes.add(markNoSideEffectCalls);\n    }\n    if (options.chainCalls) {\n        passes.add(chainCalls);\n    }\n    if (options.inlineConstantVars) {\n        passes.add(checkConsts);\n    }\n    if (options.ignoreCajaProperties) {\n        passes.add(ignoreCajaProperties);\n    }\n    assertAllOneTimePasses(passes);\n    if (options.smartNameRemoval || options.reportPath !\u003d null) {\n        passes.addAll(getCodeRemovingPasses());\n        passes.add(smartNamePass);\n    }\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.devirtualizePrototypeMethods) {\n        passes.add(devirtualizePrototypeMethods);\n    }\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n    }\n    passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n    passes.addAll(getMainOptimizationLoop());\n    passes.add(createEmptyPass(\"beforeModuleMotion\"));\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.crossModuleMethodMotion) {\n        passes.add(crossModuleMethodMotion);\n    }\n    passes.add(createEmptyPass(\"afterModuleMotion\"));\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n    }\n    if (options.flowSensitiveInlineVariables) {\n        passes.add(flowSensitiveInlineVariables);\n        if (options.removeUnusedVars) {\n            passes.add(removeUnusedVars);\n        }\n    }\n    if (options.collapseAnonymousFunctions) {\n        passes.add(collapseAnonymousFunctions);\n    }\n    if (options.moveFunctionDeclarations) {\n        passes.add(moveFunctionDeclarations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n        passes.add(nameMappedAnonymousFunctions);\n    }\n    if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n        passes.add(extractPrototypeMemberDeclarations);\n    }\n    if (options.coalesceVariableNames) {\n        passes.add(coalesceVariableNames);\n    }\n    if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n        passes.add(ambiguateProperties);\n    }\n    if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n        passes.add(renameProperties);\n    }\n    if (options.reserveRawExports) {\n        passes.add(gatherRawExports);\n    }\n    if (options.convertToDottedProperties) {\n        passes.add(convertToDottedProperties);\n    }\n    if (options.rewriteFunctionExpressions) {\n        passes.add(rewriteFunctionExpressions);\n    }\n    if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n        passes.add(aliasStrings);\n    }\n    if (options.aliasExternals) {\n        passes.add(aliasExternals);\n    }\n    if (options.aliasKeywords) {\n        passes.add(aliasKeywords);\n    }\n    if (options.collapseVariableDeclarations) {\n        passes.add(collapseVariableDeclarations);\n    }\n    passes.add(denormalize);\n    if (options.instrumentationTemplate !\u003d null) {\n        passes.add(instrumentFunctions);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n        passes.add(invertContextualRenaming);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n        passes.add(renameVars);\n    }\n    if (options.groupVariableDeclarations) {\n        passes.add(groupVariableDeclarations);\n    }\n    if (options.processObjectPropertyString) {\n        passes.add(objectPropertyStringPostprocess);\n    }\n    if (options.labelRenaming) {\n        passes.add(renameLabels);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n        passes.add(nameUnmappedAnonymousFunctions);\n    }\n    if (options.checkSymbols) {\n        passes.add(sanityCheckVars);\n    }\n    return passes;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 283,
      "functionName": "getOptimizations",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,141 +1,144 @@\n @Override\n protected List\u003cPassFactory\u003e getOptimizations() {\n     List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n     if (options.runtimeTypeCheck) {\n         passes.add(runtimeTypeCheck);\n     }\n     passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n     if (!options.idGenerators.isEmpty()) {\n         passes.add(replaceIdGenerators);\n     }\n     if (options.optimizeArgumentsArray) {\n         passes.add(optimizeArgumentsArray);\n     }\n     if (options.optimizeParameters) {\n         passes.add(removeUselessParameters);\n     }\n     if (options.closurePass \u0026\u0026 options.removeAbstractMethods) {\n         passes.add(removeAbstractMethods);\n     }\n     if (options.collapseProperties) {\n         passes.add(collapseProperties);\n     }\n     if (options.tightenTypes) {\n         passes.add(tightenTypesBuilder);\n     }\n     if (options.disambiguateProperties) {\n         passes.add(disambiguateProperties);\n     }\n     if (options.computeFunctionSideEffects) {\n         passes.add(markPureFunctions);\n     } else if (options.markNoSideEffectCalls) {\n         passes.add(markNoSideEffectCalls);\n     }\n     if (options.chainCalls) {\n         passes.add(chainCalls);\n     }\n     if (options.inlineConstantVars) {\n         passes.add(checkConsts);\n     }\n     if (options.ignoreCajaProperties) {\n         passes.add(ignoreCajaProperties);\n     }\n     assertAllOneTimePasses(passes);\n     if (options.smartNameRemoval || options.reportPath !\u003d null) {\n         passes.addAll(getCodeRemovingPasses());\n         passes.add(smartNamePass);\n     }\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.devirtualizePrototypeMethods) {\n         passes.add(devirtualizePrototypeMethods);\n     }\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n     }\n     passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n     passes.addAll(getMainOptimizationLoop());\n     passes.add(createEmptyPass(\"beforeModuleMotion\"));\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.crossModuleMethodMotion) {\n         passes.add(crossModuleMethodMotion);\n     }\n     passes.add(createEmptyPass(\"afterModuleMotion\"));\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n     }\n     if (options.flowSensitiveInlineVariables) {\n         passes.add(flowSensitiveInlineVariables);\n         if (options.removeUnusedVars) {\n             passes.add(removeUnusedVars);\n         }\n     }\n     if (options.collapseAnonymousFunctions) {\n         passes.add(collapseAnonymousFunctions);\n     }\n     if (options.moveFunctionDeclarations) {\n         passes.add(moveFunctionDeclarations);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n         passes.add(nameMappedAnonymousFunctions);\n     }\n     if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n         passes.add(extractPrototypeMemberDeclarations);\n     }\n     if (options.coalesceVariableNames) {\n         passes.add(coalesceVariableNames);\n     }\n     if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n         passes.add(ambiguateProperties);\n     }\n     if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n         passes.add(renameProperties);\n     }\n     if (options.reserveRawExports) {\n         passes.add(gatherRawExports);\n     }\n     if (options.convertToDottedProperties) {\n         passes.add(convertToDottedProperties);\n     }\n     if (options.rewriteFunctionExpressions) {\n         passes.add(rewriteFunctionExpressions);\n     }\n     if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n         passes.add(aliasStrings);\n     }\n     if (options.aliasExternals) {\n         passes.add(aliasExternals);\n     }\n     if (options.aliasKeywords) {\n         passes.add(aliasKeywords);\n     }\n     if (options.collapseVariableDeclarations) {\n         passes.add(collapseVariableDeclarations);\n     }\n     passes.add(denormalize);\n     if (options.instrumentationTemplate !\u003d null) {\n         passes.add(instrumentFunctions);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n         passes.add(invertContextualRenaming);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n         passes.add(renameVars);\n     }\n+    if (options.groupVariableDeclarations) {\n+        passes.add(groupVariableDeclarations);\n+    }\n     if (options.processObjectPropertyString) {\n         passes.add(objectPropertyStringPostprocess);\n     }\n     if (options.labelRenaming) {\n         passes.add(renameLabels);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n         passes.add(nameUnmappedAnonymousFunctions);\n     }\n     if (options.checkSymbols) {\n         passes.add(sanityCheckVars);\n     }\n     return passes;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2131059de15ba858adf7646bfba5cbd04b661336": {
      "type": "Ybodychange",
      "commitMessage": "Add @override annotations to externs. (Nick).\nFixes issue 123\nR\u003dAlan\nDELTA\u003d62  (58 added, 0 deleted, 4 changed)\n\nUpdate out of date comment. (John)\nR\u003drobert\nDELTA\u003d1  (0 added, 0 deleted, 1 changed)\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@138 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/16/10, 10:44 AM",
      "commitName": "2131059de15ba858adf7646bfba5cbd04b661336",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "3/11/10, 9:31 PM",
      "commitNameOld": "7bfdbd9164601af44d17edd51be829fde2cc51aa",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 4.51,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getOptimizations() {\n    List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n    if (options.runtimeTypeCheck) {\n        passes.add(runtimeTypeCheck);\n    }\n    passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n    if (!options.idGenerators.isEmpty()) {\n        passes.add(replaceIdGenerators);\n    }\n    if (options.optimizeArgumentsArray) {\n        passes.add(optimizeArgumentsArray);\n    }\n    if (options.optimizeParameters) {\n        passes.add(removeUselessParameters);\n    }\n    if (options.closurePass \u0026\u0026 options.removeAbstractMethods) {\n        passes.add(removeAbstractMethods);\n    }\n    if (options.collapseProperties) {\n        passes.add(collapseProperties);\n    }\n    if (options.tightenTypes) {\n        passes.add(tightenTypesBuilder);\n    }\n    if (options.disambiguateProperties) {\n        passes.add(disambiguateProperties);\n    }\n    if (options.computeFunctionSideEffects) {\n        passes.add(markPureFunctions);\n    } else if (options.markNoSideEffectCalls) {\n        passes.add(markNoSideEffectCalls);\n    }\n    if (options.chainCalls) {\n        passes.add(chainCalls);\n    }\n    if (options.inlineConstantVars) {\n        passes.add(checkConsts);\n    }\n    if (options.ignoreCajaProperties) {\n        passes.add(ignoreCajaProperties);\n    }\n    assertAllOneTimePasses(passes);\n    if (options.smartNameRemoval || options.reportPath !\u003d null) {\n        passes.addAll(getCodeRemovingPasses());\n        passes.add(smartNamePass);\n    }\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.devirtualizePrototypeMethods) {\n        passes.add(devirtualizePrototypeMethods);\n    }\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n    }\n    passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n    passes.addAll(getMainOptimizationLoop());\n    passes.add(createEmptyPass(\"beforeModuleMotion\"));\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.crossModuleMethodMotion) {\n        passes.add(crossModuleMethodMotion);\n    }\n    passes.add(createEmptyPass(\"afterModuleMotion\"));\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n    }\n    if (options.flowSensitiveInlineVariables) {\n        passes.add(flowSensitiveInlineVariables);\n        if (options.removeUnusedVars) {\n            passes.add(removeUnusedVars);\n        }\n    }\n    if (options.collapseAnonymousFunctions) {\n        passes.add(collapseAnonymousFunctions);\n    }\n    if (options.moveFunctionDeclarations) {\n        passes.add(moveFunctionDeclarations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n        passes.add(nameMappedAnonymousFunctions);\n    }\n    if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n        passes.add(extractPrototypeMemberDeclarations);\n    }\n    if (options.coalesceVariableNames) {\n        passes.add(coalesceVariableNames);\n    }\n    if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n        passes.add(ambiguateProperties);\n    }\n    if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n        passes.add(renameProperties);\n    }\n    if (options.reserveRawExports) {\n        passes.add(gatherRawExports);\n    }\n    if (options.convertToDottedProperties) {\n        passes.add(convertToDottedProperties);\n    }\n    if (options.rewriteFunctionExpressions) {\n        passes.add(rewriteFunctionExpressions);\n    }\n    if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n        passes.add(aliasStrings);\n    }\n    if (options.aliasExternals) {\n        passes.add(aliasExternals);\n    }\n    if (options.aliasKeywords) {\n        passes.add(aliasKeywords);\n    }\n    if (options.collapseVariableDeclarations) {\n        passes.add(collapseVariableDeclarations);\n    }\n    passes.add(denormalize);\n    if (options.instrumentationTemplate !\u003d null) {\n        passes.add(instrumentFunctions);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n        passes.add(invertContextualRenaming);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n        passes.add(renameVars);\n    }\n    if (options.processObjectPropertyString) {\n        passes.add(objectPropertyStringPostprocess);\n    }\n    if (options.labelRenaming) {\n        passes.add(renameLabels);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n        passes.add(nameUnmappedAnonymousFunctions);\n    }\n    if (options.checkSymbols) {\n        passes.add(sanityCheckVars);\n    }\n    return passes;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 293,
      "functionName": "getOptimizations",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "4938fd2f88debf796c181d44ae5b9a35aa595513": {
      "type": "Ybodychange",
      "commitMessage": "Add a pass type that just reports an error (Brad)\n\nAdd externs for new events. (Eric)\n\nMake CrossModuleCodeMotion detect more recursions. (Alan)\n\nRun cross module code motion before and after devirtualization. (Alan)\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@132 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/9/10, 10:24 PM",
      "commitName": "4938fd2f88debf796c181d44ae5b9a35aa595513",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "2/24/10, 4:14 PM",
      "commitNameOld": "4922461babcc37fb037d2a6db3fcb33fe4127a60",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 13.26,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getOptimizations() {\n    List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n    if (options.runtimeTypeCheck) {\n        passes.add(runtimeTypeCheck);\n    }\n    passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n    if (!options.idGenerators.isEmpty()) {\n        passes.add(replaceIdGenerators);\n    }\n    if (options.optimizeArgumentsArray) {\n        passes.add(optimizeArgumentsArray);\n    }\n    if (options.optimizeParameters) {\n        passes.add(removeUselessParameters);\n    }\n    if (options.closurePass \u0026\u0026 options.removeAbstractMethods) {\n        passes.add(removeAbstractMethods);\n    }\n    if (options.collapseProperties) {\n        passes.add(collapseProperties);\n    }\n    if (options.tightenTypes) {\n        passes.add(tightenTypesBuilder);\n    }\n    if (options.disambiguateProperties) {\n        passes.add(disambiguateProperties);\n    }\n    if (options.computeFunctionSideEffects) {\n        passes.add(markPureFunctions);\n    } else if (options.markNoSideEffectCalls) {\n        passes.add(markNoSideEffectCalls);\n    }\n    if (options.chainCalls) {\n        passes.add(chainCalls);\n    }\n    if (options.inlineConstantVars) {\n        passes.add(checkConsts);\n    }\n    if (options.ignoreCajaProperties) {\n        passes.add(ignoreCajaProperties);\n    }\n    assertAllOneTimePasses(passes);\n    if (options.smartNameRemoval || options.reportPath !\u003d null) {\n        passes.addAll(getCodeRemovingPasses());\n        passes.add(smartNamePass);\n    }\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.devirtualizePrototypeMethods) {\n        passes.add(devirtualizePrototypeMethods);\n    }\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n    }\n    passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n    passes.addAll(getMainOptimizationLoop());\n    passes.add(createEmptyPass(\"beforeModuleMotion\"));\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.crossModuleMethodMotion) {\n        passes.add(crossModuleMethodMotion);\n    }\n    passes.add(createEmptyPass(\"afterModuleMotion\"));\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n    }\n    if (options.flowSensitiveInlineVariables) {\n        passes.add(flowSensitiveInlineVariables);\n        if (options.removeUnusedVars) {\n            passes.add(removeUnusedVars);\n        }\n    }\n    if (options.collapseAnonymousFunctions) {\n        passes.add(collapseAnonymousFunctions);\n    }\n    if (options.moveFunctionDeclarations) {\n        passes.add(moveFunctionDeclarations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n        passes.add(nameMappedAnonymousFunctions);\n    }\n    if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n        passes.add(extractPrototypeMemberDeclarations);\n    }\n    if (options.coalesceVariableNames) {\n        passes.add(coalesceVariableNames);\n    }\n    if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n        passes.add(ambiguateProperties);\n    }\n    if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n        passes.add(renameProperties);\n    }\n    if (options.reserveRawExports) {\n        passes.add(gatherRawExports);\n    }\n    if (options.convertToDottedProperties) {\n        passes.add(convertToDottedProperties);\n    }\n    if (options.rewriteFunctionExpressions) {\n        passes.add(rewriteFunctionExpressions);\n    }\n    if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n        passes.add(aliasStrings);\n    }\n    if (options.aliasExternals) {\n        passes.add(aliasExternals);\n    }\n    if (options.aliasKeywords) {\n        passes.add(aliasKeywords);\n    }\n    if (options.collapseVariableDeclarations) {\n        passes.add(collapseVariableDeclarations);\n    }\n    passes.add(denormalize);\n    if (options.instrumentationTemplate !\u003d null) {\n        passes.add(instrumentFunctions);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n        passes.add(invertContextualRenaming);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n        passes.add(renameVars);\n    }\n    if (options.processObjectPropertyString) {\n        passes.add(objectPropertyStringPostprocess);\n    }\n    if (options.labelRenaming) {\n        passes.add(renameLabels);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n        passes.add(nameUnmappedAnonymousFunctions);\n    }\n    if (options.checkSymbols) {\n        passes.add(sanityCheckVars);\n    }\n    return passes;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 293,
      "functionName": "getOptimizations",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,138 +1,141 @@\n @Override\n protected List\u003cPassFactory\u003e getOptimizations() {\n     List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n     if (options.runtimeTypeCheck) {\n         passes.add(runtimeTypeCheck);\n     }\n     passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n     if (!options.idGenerators.isEmpty()) {\n         passes.add(replaceIdGenerators);\n     }\n     if (options.optimizeArgumentsArray) {\n         passes.add(optimizeArgumentsArray);\n     }\n     if (options.optimizeParameters) {\n         passes.add(removeUselessParameters);\n     }\n     if (options.closurePass \u0026\u0026 options.removeAbstractMethods) {\n         passes.add(removeAbstractMethods);\n     }\n     if (options.collapseProperties) {\n         passes.add(collapseProperties);\n     }\n     if (options.tightenTypes) {\n         passes.add(tightenTypesBuilder);\n     }\n     if (options.disambiguateProperties) {\n         passes.add(disambiguateProperties);\n     }\n     if (options.computeFunctionSideEffects) {\n         passes.add(markPureFunctions);\n     } else if (options.markNoSideEffectCalls) {\n         passes.add(markNoSideEffectCalls);\n     }\n     if (options.chainCalls) {\n         passes.add(chainCalls);\n     }\n     if (options.inlineConstantVars) {\n         passes.add(checkConsts);\n     }\n     if (options.ignoreCajaProperties) {\n         passes.add(ignoreCajaProperties);\n     }\n     assertAllOneTimePasses(passes);\n     if (options.smartNameRemoval || options.reportPath !\u003d null) {\n         passes.addAll(getCodeRemovingPasses());\n         passes.add(smartNamePass);\n     }\n+    if (options.crossModuleCodeMotion) {\n+        passes.add(crossModuleCodeMotion);\n+    }\n     if (options.devirtualizePrototypeMethods) {\n         passes.add(devirtualizePrototypeMethods);\n     }\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n     }\n     passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n     passes.addAll(getMainOptimizationLoop());\n     passes.add(createEmptyPass(\"beforeModuleMotion\"));\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.crossModuleMethodMotion) {\n         passes.add(crossModuleMethodMotion);\n     }\n     passes.add(createEmptyPass(\"afterModuleMotion\"));\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n     }\n     if (options.flowSensitiveInlineVariables) {\n         passes.add(flowSensitiveInlineVariables);\n         if (options.removeUnusedVars) {\n             passes.add(removeUnusedVars);\n         }\n     }\n     if (options.collapseAnonymousFunctions) {\n         passes.add(collapseAnonymousFunctions);\n     }\n     if (options.moveFunctionDeclarations) {\n         passes.add(moveFunctionDeclarations);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n         passes.add(nameMappedAnonymousFunctions);\n     }\n     if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n         passes.add(extractPrototypeMemberDeclarations);\n     }\n     if (options.coalesceVariableNames) {\n         passes.add(coalesceVariableNames);\n     }\n     if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n         passes.add(ambiguateProperties);\n     }\n     if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n         passes.add(renameProperties);\n     }\n     if (options.reserveRawExports) {\n         passes.add(gatherRawExports);\n     }\n     if (options.convertToDottedProperties) {\n         passes.add(convertToDottedProperties);\n     }\n     if (options.rewriteFunctionExpressions) {\n         passes.add(rewriteFunctionExpressions);\n     }\n     if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n         passes.add(aliasStrings);\n     }\n     if (options.aliasExternals) {\n         passes.add(aliasExternals);\n     }\n     if (options.aliasKeywords) {\n         passes.add(aliasKeywords);\n     }\n     if (options.collapseVariableDeclarations) {\n         passes.add(collapseVariableDeclarations);\n     }\n     passes.add(denormalize);\n     if (options.instrumentationTemplate !\u003d null) {\n         passes.add(instrumentFunctions);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n         passes.add(invertContextualRenaming);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n         passes.add(renameVars);\n     }\n     if (options.processObjectPropertyString) {\n         passes.add(objectPropertyStringPostprocess);\n     }\n     if (options.labelRenaming) {\n         passes.add(renameLabels);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n         passes.add(nameUnmappedAnonymousFunctions);\n     }\n     if (options.checkSymbols) {\n         passes.add(sanityCheckVars);\n     }\n     return passes;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4922461babcc37fb037d2a6db3fcb33fe4127a60": {
      "type": "Ybodychange",
      "commitMessage": "Fix a bug in expression decomposition (Alan)\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@115 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/24/10, 4:14 PM",
      "commitName": "4922461babcc37fb037d2a6db3fcb33fe4127a60",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "2/19/10, 5:21 PM",
      "commitNameOld": "0f655dc72070acbdcc5fe3a1aecf91c11955c37b",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 4.95,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getOptimizations() {\n    List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n    if (options.runtimeTypeCheck) {\n        passes.add(runtimeTypeCheck);\n    }\n    passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n    if (!options.idGenerators.isEmpty()) {\n        passes.add(replaceIdGenerators);\n    }\n    if (options.optimizeArgumentsArray) {\n        passes.add(optimizeArgumentsArray);\n    }\n    if (options.optimizeParameters) {\n        passes.add(removeUselessParameters);\n    }\n    if (options.closurePass \u0026\u0026 options.removeAbstractMethods) {\n        passes.add(removeAbstractMethods);\n    }\n    if (options.collapseProperties) {\n        passes.add(collapseProperties);\n    }\n    if (options.tightenTypes) {\n        passes.add(tightenTypesBuilder);\n    }\n    if (options.disambiguateProperties) {\n        passes.add(disambiguateProperties);\n    }\n    if (options.computeFunctionSideEffects) {\n        passes.add(markPureFunctions);\n    } else if (options.markNoSideEffectCalls) {\n        passes.add(markNoSideEffectCalls);\n    }\n    if (options.chainCalls) {\n        passes.add(chainCalls);\n    }\n    if (options.inlineConstantVars) {\n        passes.add(checkConsts);\n    }\n    if (options.ignoreCajaProperties) {\n        passes.add(ignoreCajaProperties);\n    }\n    assertAllOneTimePasses(passes);\n    if (options.smartNameRemoval || options.reportPath !\u003d null) {\n        passes.addAll(getCodeRemovingPasses());\n        passes.add(smartNamePass);\n    }\n    if (options.devirtualizePrototypeMethods) {\n        passes.add(devirtualizePrototypeMethods);\n    }\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n    }\n    passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n    passes.addAll(getMainOptimizationLoop());\n    passes.add(createEmptyPass(\"beforeModuleMotion\"));\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.crossModuleMethodMotion) {\n        passes.add(crossModuleMethodMotion);\n    }\n    passes.add(createEmptyPass(\"afterModuleMotion\"));\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n    }\n    if (options.flowSensitiveInlineVariables) {\n        passes.add(flowSensitiveInlineVariables);\n        if (options.removeUnusedVars) {\n            passes.add(removeUnusedVars);\n        }\n    }\n    if (options.collapseAnonymousFunctions) {\n        passes.add(collapseAnonymousFunctions);\n    }\n    if (options.moveFunctionDeclarations) {\n        passes.add(moveFunctionDeclarations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n        passes.add(nameMappedAnonymousFunctions);\n    }\n    if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n        passes.add(extractPrototypeMemberDeclarations);\n    }\n    if (options.coalesceVariableNames) {\n        passes.add(coalesceVariableNames);\n    }\n    if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n        passes.add(ambiguateProperties);\n    }\n    if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n        passes.add(renameProperties);\n    }\n    if (options.reserveRawExports) {\n        passes.add(gatherRawExports);\n    }\n    if (options.convertToDottedProperties) {\n        passes.add(convertToDottedProperties);\n    }\n    if (options.rewriteFunctionExpressions) {\n        passes.add(rewriteFunctionExpressions);\n    }\n    if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n        passes.add(aliasStrings);\n    }\n    if (options.aliasExternals) {\n        passes.add(aliasExternals);\n    }\n    if (options.aliasKeywords) {\n        passes.add(aliasKeywords);\n    }\n    if (options.collapseVariableDeclarations) {\n        passes.add(collapseVariableDeclarations);\n    }\n    passes.add(denormalize);\n    if (options.instrumentationTemplate !\u003d null) {\n        passes.add(instrumentFunctions);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n        passes.add(invertContextualRenaming);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n        passes.add(renameVars);\n    }\n    if (options.processObjectPropertyString) {\n        passes.add(objectPropertyStringPostprocess);\n    }\n    if (options.labelRenaming) {\n        passes.add(renameLabels);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n        passes.add(nameUnmappedAnonymousFunctions);\n    }\n    if (options.checkSymbols) {\n        passes.add(sanityCheckVars);\n    }\n    return passes;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 293,
      "functionName": "getOptimizations",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,135 +1,138 @@\n @Override\n protected List\u003cPassFactory\u003e getOptimizations() {\n     List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n     if (options.runtimeTypeCheck) {\n         passes.add(runtimeTypeCheck);\n     }\n     passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n     if (!options.idGenerators.isEmpty()) {\n         passes.add(replaceIdGenerators);\n     }\n     if (options.optimizeArgumentsArray) {\n         passes.add(optimizeArgumentsArray);\n     }\n     if (options.optimizeParameters) {\n         passes.add(removeUselessParameters);\n     }\n     if (options.closurePass \u0026\u0026 options.removeAbstractMethods) {\n         passes.add(removeAbstractMethods);\n     }\n     if (options.collapseProperties) {\n         passes.add(collapseProperties);\n     }\n     if (options.tightenTypes) {\n         passes.add(tightenTypesBuilder);\n     }\n     if (options.disambiguateProperties) {\n         passes.add(disambiguateProperties);\n     }\n     if (options.computeFunctionSideEffects) {\n         passes.add(markPureFunctions);\n     } else if (options.markNoSideEffectCalls) {\n         passes.add(markNoSideEffectCalls);\n     }\n     if (options.chainCalls) {\n         passes.add(chainCalls);\n     }\n     if (options.inlineConstantVars) {\n         passes.add(checkConsts);\n     }\n     if (options.ignoreCajaProperties) {\n         passes.add(ignoreCajaProperties);\n     }\n     assertAllOneTimePasses(passes);\n     if (options.smartNameRemoval || options.reportPath !\u003d null) {\n         passes.addAll(getCodeRemovingPasses());\n         passes.add(smartNamePass);\n     }\n     if (options.devirtualizePrototypeMethods) {\n         passes.add(devirtualizePrototypeMethods);\n     }\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n     }\n     passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n     passes.addAll(getMainOptimizationLoop());\n     passes.add(createEmptyPass(\"beforeModuleMotion\"));\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.crossModuleMethodMotion) {\n         passes.add(crossModuleMethodMotion);\n     }\n     passes.add(createEmptyPass(\"afterModuleMotion\"));\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n     }\n     if (options.flowSensitiveInlineVariables) {\n         passes.add(flowSensitiveInlineVariables);\n+        if (options.removeUnusedVars) {\n+            passes.add(removeUnusedVars);\n+        }\n     }\n     if (options.collapseAnonymousFunctions) {\n         passes.add(collapseAnonymousFunctions);\n     }\n     if (options.moveFunctionDeclarations) {\n         passes.add(moveFunctionDeclarations);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n         passes.add(nameMappedAnonymousFunctions);\n     }\n     if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n         passes.add(extractPrototypeMemberDeclarations);\n     }\n     if (options.coalesceVariableNames) {\n         passes.add(coalesceVariableNames);\n     }\n     if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n         passes.add(ambiguateProperties);\n     }\n     if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n         passes.add(renameProperties);\n     }\n     if (options.reserveRawExports) {\n         passes.add(gatherRawExports);\n     }\n     if (options.convertToDottedProperties) {\n         passes.add(convertToDottedProperties);\n     }\n     if (options.rewriteFunctionExpressions) {\n         passes.add(rewriteFunctionExpressions);\n     }\n     if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n         passes.add(aliasStrings);\n     }\n     if (options.aliasExternals) {\n         passes.add(aliasExternals);\n     }\n     if (options.aliasKeywords) {\n         passes.add(aliasKeywords);\n     }\n     if (options.collapseVariableDeclarations) {\n         passes.add(collapseVariableDeclarations);\n     }\n     passes.add(denormalize);\n     if (options.instrumentationTemplate !\u003d null) {\n         passes.add(instrumentFunctions);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n         passes.add(invertContextualRenaming);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n         passes.add(renameVars);\n     }\n     if (options.processObjectPropertyString) {\n         passes.add(objectPropertyStringPostprocess);\n     }\n     if (options.labelRenaming) {\n         passes.add(renameLabels);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n         passes.add(nameUnmappedAnonymousFunctions);\n     }\n     if (options.checkSymbols) {\n         passes.add(sanityCheckVars);\n     }\n     return passes;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0f655dc72070acbdcc5fe3a1aecf91c11955c37b": {
      "type": "Ybodychange",
      "commitMessage": "Runtime type check. (Nada and Andrew)\n\nAdds Database/readTransaction to the HTML5 externs\n\nMore user-friendly error messages for trailing commas (Nick)\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@111 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/19/10, 5:21 PM",
      "commitName": "0f655dc72070acbdcc5fe3a1aecf91c11955c37b",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "2/11/10, 1:02 PM",
      "commitNameOld": "1771d2005a441cb87df2a488069f265bd71ed9ee",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 8.18,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getOptimizations() {\n    List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n    if (options.runtimeTypeCheck) {\n        passes.add(runtimeTypeCheck);\n    }\n    passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n    if (!options.idGenerators.isEmpty()) {\n        passes.add(replaceIdGenerators);\n    }\n    if (options.optimizeArgumentsArray) {\n        passes.add(optimizeArgumentsArray);\n    }\n    if (options.optimizeParameters) {\n        passes.add(removeUselessParameters);\n    }\n    if (options.closurePass \u0026\u0026 options.removeAbstractMethods) {\n        passes.add(removeAbstractMethods);\n    }\n    if (options.collapseProperties) {\n        passes.add(collapseProperties);\n    }\n    if (options.tightenTypes) {\n        passes.add(tightenTypesBuilder);\n    }\n    if (options.disambiguateProperties) {\n        passes.add(disambiguateProperties);\n    }\n    if (options.computeFunctionSideEffects) {\n        passes.add(markPureFunctions);\n    } else if (options.markNoSideEffectCalls) {\n        passes.add(markNoSideEffectCalls);\n    }\n    if (options.chainCalls) {\n        passes.add(chainCalls);\n    }\n    if (options.inlineConstantVars) {\n        passes.add(checkConsts);\n    }\n    if (options.ignoreCajaProperties) {\n        passes.add(ignoreCajaProperties);\n    }\n    assertAllOneTimePasses(passes);\n    if (options.smartNameRemoval || options.reportPath !\u003d null) {\n        passes.addAll(getCodeRemovingPasses());\n        passes.add(smartNamePass);\n    }\n    if (options.devirtualizePrototypeMethods) {\n        passes.add(devirtualizePrototypeMethods);\n    }\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n    }\n    passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n    passes.addAll(getMainOptimizationLoop());\n    passes.add(createEmptyPass(\"beforeModuleMotion\"));\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.crossModuleMethodMotion) {\n        passes.add(crossModuleMethodMotion);\n    }\n    passes.add(createEmptyPass(\"afterModuleMotion\"));\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n    }\n    if (options.flowSensitiveInlineVariables) {\n        passes.add(flowSensitiveInlineVariables);\n    }\n    if (options.collapseAnonymousFunctions) {\n        passes.add(collapseAnonymousFunctions);\n    }\n    if (options.moveFunctionDeclarations) {\n        passes.add(moveFunctionDeclarations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n        passes.add(nameMappedAnonymousFunctions);\n    }\n    if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n        passes.add(extractPrototypeMemberDeclarations);\n    }\n    if (options.coalesceVariableNames) {\n        passes.add(coalesceVariableNames);\n    }\n    if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n        passes.add(ambiguateProperties);\n    }\n    if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n        passes.add(renameProperties);\n    }\n    if (options.reserveRawExports) {\n        passes.add(gatherRawExports);\n    }\n    if (options.convertToDottedProperties) {\n        passes.add(convertToDottedProperties);\n    }\n    if (options.rewriteFunctionExpressions) {\n        passes.add(rewriteFunctionExpressions);\n    }\n    if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n        passes.add(aliasStrings);\n    }\n    if (options.aliasExternals) {\n        passes.add(aliasExternals);\n    }\n    if (options.aliasKeywords) {\n        passes.add(aliasKeywords);\n    }\n    if (options.collapseVariableDeclarations) {\n        passes.add(collapseVariableDeclarations);\n    }\n    passes.add(denormalize);\n    if (options.instrumentationTemplate !\u003d null) {\n        passes.add(instrumentFunctions);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n        passes.add(invertContextualRenaming);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n        passes.add(renameVars);\n    }\n    if (options.processObjectPropertyString) {\n        passes.add(objectPropertyStringPostprocess);\n    }\n    if (options.labelRenaming) {\n        passes.add(renameLabels);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n        passes.add(nameUnmappedAnonymousFunctions);\n    }\n    if (options.checkSymbols) {\n        passes.add(sanityCheckVars);\n    }\n    return passes;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 293,
      "functionName": "getOptimizations",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,132 +1,135 @@\n @Override\n protected List\u003cPassFactory\u003e getOptimizations() {\n     List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n+    if (options.runtimeTypeCheck) {\n+        passes.add(runtimeTypeCheck);\n+    }\n     passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n     if (!options.idGenerators.isEmpty()) {\n         passes.add(replaceIdGenerators);\n     }\n     if (options.optimizeArgumentsArray) {\n         passes.add(optimizeArgumentsArray);\n     }\n     if (options.optimizeParameters) {\n         passes.add(removeUselessParameters);\n     }\n     if (options.closurePass \u0026\u0026 options.removeAbstractMethods) {\n         passes.add(removeAbstractMethods);\n     }\n     if (options.collapseProperties) {\n         passes.add(collapseProperties);\n     }\n     if (options.tightenTypes) {\n         passes.add(tightenTypesBuilder);\n     }\n     if (options.disambiguateProperties) {\n         passes.add(disambiguateProperties);\n     }\n     if (options.computeFunctionSideEffects) {\n         passes.add(markPureFunctions);\n     } else if (options.markNoSideEffectCalls) {\n         passes.add(markNoSideEffectCalls);\n     }\n     if (options.chainCalls) {\n         passes.add(chainCalls);\n     }\n     if (options.inlineConstantVars) {\n         passes.add(checkConsts);\n     }\n     if (options.ignoreCajaProperties) {\n         passes.add(ignoreCajaProperties);\n     }\n     assertAllOneTimePasses(passes);\n     if (options.smartNameRemoval || options.reportPath !\u003d null) {\n         passes.addAll(getCodeRemovingPasses());\n         passes.add(smartNamePass);\n     }\n     if (options.devirtualizePrototypeMethods) {\n         passes.add(devirtualizePrototypeMethods);\n     }\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n     }\n     passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n     passes.addAll(getMainOptimizationLoop());\n     passes.add(createEmptyPass(\"beforeModuleMotion\"));\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.crossModuleMethodMotion) {\n         passes.add(crossModuleMethodMotion);\n     }\n     passes.add(createEmptyPass(\"afterModuleMotion\"));\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n     }\n     if (options.flowSensitiveInlineVariables) {\n         passes.add(flowSensitiveInlineVariables);\n     }\n     if (options.collapseAnonymousFunctions) {\n         passes.add(collapseAnonymousFunctions);\n     }\n     if (options.moveFunctionDeclarations) {\n         passes.add(moveFunctionDeclarations);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n         passes.add(nameMappedAnonymousFunctions);\n     }\n     if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n         passes.add(extractPrototypeMemberDeclarations);\n     }\n     if (options.coalesceVariableNames) {\n         passes.add(coalesceVariableNames);\n     }\n     if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n         passes.add(ambiguateProperties);\n     }\n     if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n         passes.add(renameProperties);\n     }\n     if (options.reserveRawExports) {\n         passes.add(gatherRawExports);\n     }\n     if (options.convertToDottedProperties) {\n         passes.add(convertToDottedProperties);\n     }\n     if (options.rewriteFunctionExpressions) {\n         passes.add(rewriteFunctionExpressions);\n     }\n     if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n         passes.add(aliasStrings);\n     }\n     if (options.aliasExternals) {\n         passes.add(aliasExternals);\n     }\n     if (options.aliasKeywords) {\n         passes.add(aliasKeywords);\n     }\n     if (options.collapseVariableDeclarations) {\n         passes.add(collapseVariableDeclarations);\n     }\n     passes.add(denormalize);\n     if (options.instrumentationTemplate !\u003d null) {\n         passes.add(instrumentFunctions);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n         passes.add(invertContextualRenaming);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n         passes.add(renameVars);\n     }\n     if (options.processObjectPropertyString) {\n         passes.add(objectPropertyStringPostprocess);\n     }\n     if (options.labelRenaming) {\n         passes.add(renameLabels);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n         passes.add(nameUnmappedAnonymousFunctions);\n     }\n     if (options.checkSymbols) {\n         passes.add(sanityCheckVars);\n     }\n     return passes;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "819dd2d2f8dc36cc6770236f1eb91635f3f9410e": {
      "type": "Ybodychange",
      "commitMessage": "Move the devirtualizer later in the optimization process. We\u0027re\nnot really sure why this improves things (yet).\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@88 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/2/10, 10:18 AM",
      "commitName": "819dd2d2f8dc36cc6770236f1eb91635f3f9410e",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "12/23/09, 9:33 AM",
      "commitNameOld": "915752b8e4ffd312eea298fb749dddd0edc0db2e",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 41.03,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getOptimizations() {\n    List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n    passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n    if (!options.idGenerators.isEmpty()) {\n        passes.add(replaceIdGenerators);\n    }\n    if (options.optimizeArgumentsArray) {\n        passes.add(optimizeArgumentsArray);\n    }\n    if (options.optimizeParameters) {\n        passes.add(removeUselessParameters);\n    }\n    if (options.closurePass \u0026\u0026 options.removeAbstractMethods) {\n        passes.add(removeAbstractMethods);\n    }\n    if (options.collapseProperties) {\n        passes.add(collapseProperties);\n    }\n    if (options.tightenTypes) {\n        passes.add(tightenTypesBuilder);\n    }\n    if (options.disambiguateProperties) {\n        passes.add(disambiguateProperties);\n    }\n    if (options.computeFunctionSideEffects) {\n        passes.add(markPureFunctions);\n    } else if (options.markNoSideEffectCalls) {\n        passes.add(markNoSideEffectCalls);\n    }\n    if (options.chainCalls) {\n        passes.add(chainCalls);\n    }\n    if (options.inlineConstantVars) {\n        passes.add(checkConsts);\n    }\n    if (options.ignoreCajaProperties) {\n        passes.add(ignoreCajaProperties);\n    }\n    assertAllOneTimePasses(passes);\n    if (options.smartNameRemoval || options.reportPath !\u003d null) {\n        passes.addAll(getCodeRemovingPasses());\n        passes.add(smartNamePass);\n    }\n    if (options.devirtualizePrototypeMethods) {\n        passes.add(devirtualizePrototypeMethods);\n    }\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n    }\n    passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n    passes.addAll(getMainOptimizationLoop());\n    passes.add(createEmptyPass(\"beforeModuleMotion\"));\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.crossModuleMethodMotion) {\n        passes.add(crossModuleMethodMotion);\n    }\n    passes.add(createEmptyPass(\"afterModuleMotion\"));\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n    }\n    if (options.flowSensitiveInlineVariables) {\n        passes.add(flowSensitiveInlineVariables);\n    }\n    if (options.collapseAnonymousFunctions) {\n        passes.add(collapseAnonymousFunctions);\n    }\n    if (options.moveFunctionDeclarations) {\n        passes.add(moveFunctionDeclarations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n        passes.add(nameMappedAnonymousFunctions);\n    }\n    if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n        passes.add(extractPrototypeMemberDeclarations);\n    }\n    if (options.coalesceVariableNames) {\n        passes.add(coalesceVariableNames);\n    }\n    if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n        passes.add(ambiguateProperties);\n    }\n    if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n        passes.add(renameProperties);\n    }\n    if (options.reserveRawExports) {\n        passes.add(gatherRawExports);\n    }\n    if (options.convertToDottedProperties) {\n        passes.add(convertToDottedProperties);\n    }\n    if (options.rewriteFunctionExpressions) {\n        passes.add(rewriteFunctionExpressions);\n    }\n    if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n        passes.add(aliasStrings);\n    }\n    if (options.aliasExternals) {\n        passes.add(aliasExternals);\n    }\n    if (options.aliasKeywords) {\n        passes.add(aliasKeywords);\n    }\n    if (options.collapseVariableDeclarations) {\n        passes.add(collapseVariableDeclarations);\n    }\n    passes.add(denormalize);\n    if (options.instrumentationTemplate !\u003d null) {\n        passes.add(instrumentFunctions);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n        passes.add(invertContextualRenaming);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n        passes.add(renameVars);\n    }\n    if (options.processObjectPropertyString) {\n        passes.add(objectPropertyStringPostprocess);\n    }\n    if (options.labelRenaming) {\n        passes.add(renameLabels);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n        passes.add(nameUnmappedAnonymousFunctions);\n    }\n    if (options.checkSymbols) {\n        passes.add(sanityCheckVars);\n    }\n    return passes;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 294,
      "functionName": "getOptimizations",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,131 +1,132 @@\n @Override\n protected List\u003cPassFactory\u003e getOptimizations() {\n     List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n+    passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n     if (!options.idGenerators.isEmpty()) {\n         passes.add(replaceIdGenerators);\n     }\n     if (options.optimizeArgumentsArray) {\n         passes.add(optimizeArgumentsArray);\n     }\n     if (options.optimizeParameters) {\n         passes.add(removeUselessParameters);\n     }\n     if (options.closurePass \u0026\u0026 options.removeAbstractMethods) {\n         passes.add(removeAbstractMethods);\n     }\n     if (options.collapseProperties) {\n         passes.add(collapseProperties);\n     }\n     if (options.tightenTypes) {\n         passes.add(tightenTypesBuilder);\n     }\n     if (options.disambiguateProperties) {\n         passes.add(disambiguateProperties);\n     }\n     if (options.computeFunctionSideEffects) {\n         passes.add(markPureFunctions);\n     } else if (options.markNoSideEffectCalls) {\n         passes.add(markNoSideEffectCalls);\n     }\n     if (options.chainCalls) {\n         passes.add(chainCalls);\n     }\n-    if (options.devirtualizePrototypeMethods) {\n-        passes.add(devirtualizePrototypeMethods);\n-    }\n     if (options.inlineConstantVars) {\n         passes.add(checkConsts);\n     }\n     if (options.ignoreCajaProperties) {\n         passes.add(ignoreCajaProperties);\n     }\n     assertAllOneTimePasses(passes);\n     if (options.smartNameRemoval || options.reportPath !\u003d null) {\n         passes.addAll(getCodeRemovingPasses());\n         passes.add(smartNamePass);\n     }\n+    if (options.devirtualizePrototypeMethods) {\n+        passes.add(devirtualizePrototypeMethods);\n+    }\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n     }\n     passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n     passes.addAll(getMainOptimizationLoop());\n     passes.add(createEmptyPass(\"beforeModuleMotion\"));\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.crossModuleMethodMotion) {\n         passes.add(crossModuleMethodMotion);\n     }\n     passes.add(createEmptyPass(\"afterModuleMotion\"));\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n     }\n     if (options.flowSensitiveInlineVariables) {\n         passes.add(flowSensitiveInlineVariables);\n     }\n     if (options.collapseAnonymousFunctions) {\n         passes.add(collapseAnonymousFunctions);\n     }\n     if (options.moveFunctionDeclarations) {\n         passes.add(moveFunctionDeclarations);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n         passes.add(nameMappedAnonymousFunctions);\n     }\n     if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n         passes.add(extractPrototypeMemberDeclarations);\n     }\n     if (options.coalesceVariableNames) {\n         passes.add(coalesceVariableNames);\n     }\n     if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n         passes.add(ambiguateProperties);\n     }\n     if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n         passes.add(renameProperties);\n     }\n     if (options.reserveRawExports) {\n         passes.add(gatherRawExports);\n     }\n     if (options.convertToDottedProperties) {\n         passes.add(convertToDottedProperties);\n     }\n     if (options.rewriteFunctionExpressions) {\n         passes.add(rewriteFunctionExpressions);\n     }\n     if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n         passes.add(aliasStrings);\n     }\n     if (options.aliasExternals) {\n         passes.add(aliasExternals);\n     }\n     if (options.aliasKeywords) {\n         passes.add(aliasKeywords);\n     }\n     if (options.collapseVariableDeclarations) {\n         passes.add(collapseVariableDeclarations);\n     }\n     passes.add(denormalize);\n     if (options.instrumentationTemplate !\u003d null) {\n         passes.add(instrumentFunctions);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n         passes.add(invertContextualRenaming);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n         passes.add(renameVars);\n     }\n     if (options.processObjectPropertyString) {\n         passes.add(objectPropertyStringPostprocess);\n     }\n     if (options.labelRenaming) {\n         passes.add(renameLabels);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n         passes.add(nameUnmappedAnonymousFunctions);\n     }\n     if (options.checkSymbols) {\n         passes.add(sanityCheckVars);\n     }\n     return passes;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "14ddcfdc0b8d1cece3c79221b1870b84f055d419": {
      "type": "Ybodychange",
      "commitMessage": "Change the internal representation of constant variables.\n\nRun inline-variables before smart-name-removal.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@37 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/17/09, 4:20 PM",
      "commitName": "14ddcfdc0b8d1cece3c79221b1870b84f055d419",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "12/16/09, 6:37 PM",
      "commitNameOld": "06377401a3b08af2cc75c10e603b3ded983aaf8c",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 0.9,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getOptimizations() {\n    List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n    if (!options.idGenerators.isEmpty()) {\n        passes.add(replaceIdGenerators);\n    }\n    if (options.optimizeArgumentsArray) {\n        passes.add(optimizeArgumentsArray);\n    }\n    if (options.optimizeParameters) {\n        passes.add(removeUselessParameters);\n    }\n    if (options.closurePass \u0026\u0026 options.removeAbstractMethods) {\n        passes.add(removeAbstractMethods);\n    }\n    if (options.collapseProperties) {\n        passes.add(collapseProperties);\n    }\n    if (options.tightenTypes) {\n        passes.add(tightenTypesBuilder);\n    }\n    if (options.disambiguateProperties) {\n        passes.add(disambiguateProperties);\n    }\n    if (options.computeFunctionSideEffects) {\n        passes.add(markPureFunctions);\n    } else if (options.markNoSideEffectCalls) {\n        passes.add(markNoSideEffectCalls);\n    }\n    if (options.chainCalls) {\n        passes.add(chainCalls);\n    }\n    if (options.devirtualizePrototypeMethods) {\n        passes.add(devirtualizePrototypeMethods);\n    }\n    if (options.inlineConstantVars) {\n        passes.add(checkConsts);\n    }\n    if (options.ignoreCajaProperties) {\n        passes.add(ignoreCajaProperties);\n    }\n    assertAllOneTimePasses(passes);\n    if (options.smartNameRemoval || options.reportPath !\u003d null) {\n        passes.addAll(getCodeRemovingPasses());\n        passes.add(smartNamePass);\n    }\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n    }\n    passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n    passes.addAll(getMainOptimizationLoop());\n    passes.add(createEmptyPass(\"beforeModuleMotion\"));\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.crossModuleMethodMotion) {\n        passes.add(crossModuleMethodMotion);\n    }\n    passes.add(createEmptyPass(\"afterModuleMotion\"));\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n    }\n    if (options.flowSensitiveInlineVariables) {\n        passes.add(flowSensitiveInlineVariables);\n    }\n    if (options.collapseAnonymousFunctions) {\n        passes.add(collapseAnonymousFunctions);\n    }\n    if (options.moveFunctionDeclarations) {\n        passes.add(moveFunctionDeclarations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n        passes.add(nameMappedAnonymousFunctions);\n    }\n    if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n        passes.add(extractPrototypeMemberDeclarations);\n    }\n    if (options.coalesceVariableNames) {\n        passes.add(coalesceVariableNames);\n    }\n    if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n        passes.add(ambiguateProperties);\n    }\n    if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n        passes.add(renameProperties);\n    }\n    if (options.reserveRawExports) {\n        passes.add(gatherRawExports);\n    }\n    if (options.convertToDottedProperties) {\n        passes.add(convertToDottedProperties);\n    }\n    if (options.rewriteFunctionExpressions) {\n        passes.add(rewriteFunctionExpressions);\n    }\n    if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n        passes.add(aliasStrings);\n    }\n    if (options.aliasExternals) {\n        passes.add(aliasExternals);\n    }\n    if (options.aliasKeywords) {\n        passes.add(aliasKeywords);\n    }\n    if (options.collapseVariableDeclarations) {\n        passes.add(collapseVariableDeclarations);\n    }\n    passes.add(denormalize);\n    if (options.instrumentationTemplate !\u003d null) {\n        passes.add(instrumentFunctions);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n        passes.add(invertContextualRenaming);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n        passes.add(renameVars);\n    }\n    if (options.processObjectPropertyString) {\n        passes.add(objectPropertyStringPostprocess);\n    }\n    if (options.labelRenaming) {\n        passes.add(renameLabels);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n        passes.add(nameUnmappedAnonymousFunctions);\n    }\n    if (options.checkSymbols) {\n        passes.add(sanityCheckVars);\n    }\n    return passes;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 287,
      "functionName": "getOptimizations",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,133 +1,131 @@\n @Override\n protected List\u003cPassFactory\u003e getOptimizations() {\n     List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n     if (!options.idGenerators.isEmpty()) {\n         passes.add(replaceIdGenerators);\n     }\n     if (options.optimizeArgumentsArray) {\n         passes.add(optimizeArgumentsArray);\n     }\n     if (options.optimizeParameters) {\n         passes.add(removeUselessParameters);\n     }\n     if (options.closurePass \u0026\u0026 options.removeAbstractMethods) {\n         passes.add(removeAbstractMethods);\n     }\n     if (options.collapseProperties) {\n-        passes.add(undoConstantRenaming);\n         passes.add(collapseProperties);\n-        passes.add(renameConstants.makeOneTimePass());\n     }\n     if (options.tightenTypes) {\n         passes.add(tightenTypesBuilder);\n     }\n     if (options.disambiguateProperties) {\n         passes.add(disambiguateProperties);\n     }\n     if (options.computeFunctionSideEffects) {\n         passes.add(markPureFunctions);\n     } else if (options.markNoSideEffectCalls) {\n         passes.add(markNoSideEffectCalls);\n     }\n     if (options.chainCalls) {\n         passes.add(chainCalls);\n     }\n     if (options.devirtualizePrototypeMethods) {\n         passes.add(devirtualizePrototypeMethods);\n     }\n     if (options.inlineConstantVars) {\n         passes.add(checkConsts);\n     }\n     if (options.ignoreCajaProperties) {\n         passes.add(ignoreCajaProperties);\n     }\n     assertAllOneTimePasses(passes);\n     if (options.smartNameRemoval || options.reportPath !\u003d null) {\n-        passes.addAll(getCodeRemovingPasses(true));\n+        passes.addAll(getCodeRemovingPasses());\n         passes.add(smartNamePass);\n     }\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n     }\n     passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n     passes.addAll(getMainOptimizationLoop());\n     passes.add(createEmptyPass(\"beforeModuleMotion\"));\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.crossModuleMethodMotion) {\n         passes.add(crossModuleMethodMotion);\n     }\n     passes.add(createEmptyPass(\"afterModuleMotion\"));\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n     }\n     if (options.flowSensitiveInlineVariables) {\n         passes.add(flowSensitiveInlineVariables);\n     }\n     if (options.collapseAnonymousFunctions) {\n         passes.add(collapseAnonymousFunctions);\n     }\n     if (options.moveFunctionDeclarations) {\n         passes.add(moveFunctionDeclarations);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n         passes.add(nameMappedAnonymousFunctions);\n     }\n     if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n         passes.add(extractPrototypeMemberDeclarations);\n     }\n     if (options.coalesceVariableNames) {\n         passes.add(coalesceVariableNames);\n     }\n     if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n         passes.add(ambiguateProperties);\n     }\n     if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n         passes.add(renameProperties);\n     }\n     if (options.reserveRawExports) {\n         passes.add(gatherRawExports);\n     }\n     if (options.convertToDottedProperties) {\n         passes.add(convertToDottedProperties);\n     }\n     if (options.rewriteFunctionExpressions) {\n         passes.add(rewriteFunctionExpressions);\n     }\n     if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n         passes.add(aliasStrings);\n     }\n     if (options.aliasExternals) {\n         passes.add(aliasExternals);\n     }\n     if (options.aliasKeywords) {\n         passes.add(aliasKeywords);\n     }\n     if (options.collapseVariableDeclarations) {\n         passes.add(collapseVariableDeclarations);\n     }\n     passes.add(denormalize);\n     if (options.instrumentationTemplate !\u003d null) {\n         passes.add(instrumentFunctions);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n         passes.add(invertContextualRenaming);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n         passes.add(renameVars);\n     }\n     if (options.processObjectPropertyString) {\n         passes.add(objectPropertyStringPostprocess);\n     }\n     if (options.labelRenaming) {\n         passes.add(renameLabels);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n         passes.add(nameUnmappedAnonymousFunctions);\n     }\n     if (options.checkSymbols) {\n         passes.add(sanityCheckVars);\n     }\n     return passes;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a2d8936fae3eb0e3873c7f7c0233344c81436404": {
      "type": "Ybodychange",
      "commitMessage": "Add warnings for functions that are ambiguously defined on different\nbrowsers.\n\nAdd better support for Caja.\n\nRollback the change to CoalesceVariableNames, because it had problems.\n\nInternal type system refactoring.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@33 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/15/09, 1:52 PM",
      "commitName": "a2d8936fae3eb0e3873c7f7c0233344c81436404",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "12/14/09, 4:18 PM",
      "commitNameOld": "31193006e16b909a3115f998789057fb05d76b18",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 0.9,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getOptimizations() {\n    List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n    if (!options.idGenerators.isEmpty()) {\n        passes.add(replaceIdGenerators);\n    }\n    if (options.optimizeArgumentsArray) {\n        passes.add(optimizeArgumentsArray);\n    }\n    if (options.optimizeParameters) {\n        passes.add(removeUselessParameters);\n    }\n    if (options.closurePass \u0026\u0026 options.removeAbstractMethods) {\n        passes.add(removeAbstractMethods);\n    }\n    if (options.collapseProperties) {\n        passes.add(undoConstantRenaming);\n        passes.add(collapseProperties);\n        passes.add(renameConstants.makeOneTimePass());\n    }\n    if (options.tightenTypes) {\n        passes.add(tightenTypesBuilder);\n    }\n    if (options.disambiguateProperties) {\n        passes.add(disambiguateProperties);\n    }\n    if (options.computeFunctionSideEffects) {\n        passes.add(markPureFunctions);\n    } else if (options.markNoSideEffectCalls) {\n        passes.add(markNoSideEffectCalls);\n    }\n    if (options.chainCalls) {\n        passes.add(chainCalls);\n    }\n    if (options.devirtualizePrototypeMethods) {\n        passes.add(devirtualizePrototypeMethods);\n    }\n    if (options.inlineConstantVars) {\n        passes.add(checkConsts);\n    }\n    if (options.ignoreCajaProperties) {\n        passes.add(ignoreCajaProperties);\n    }\n    assertAllOneTimePasses(passes);\n    if (options.smartNameRemoval || options.reportPath !\u003d null) {\n        passes.addAll(getCodeRemovingPasses(true));\n        passes.add(smartNamePass);\n    }\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n    }\n    passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n    passes.addAll(getMainOptimizationLoop());\n    passes.add(createEmptyPass(\"beforeModuleMotion\"));\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.crossModuleMethodMotion) {\n        passes.add(crossModuleMethodMotion);\n    }\n    passes.add(createEmptyPass(\"afterModuleMotion\"));\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n    }\n    if (options.flowSensitiveInlineVariables) {\n        passes.add(flowSensitiveInlineVariables);\n    }\n    if (options.collapseAnonymousFunctions) {\n        passes.add(collapseAnonymousFunctions);\n    }\n    if (options.moveFunctionDeclarations) {\n        passes.add(moveFunctionDeclarations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n        passes.add(nameMappedAnonymousFunctions);\n    }\n    if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n        passes.add(extractPrototypeMemberDeclarations);\n    }\n    if (options.coalesceVariableNames) {\n        passes.add(coalesceVariableNames);\n    }\n    if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n        passes.add(ambiguateProperties);\n    }\n    if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n        passes.add(renameProperties);\n    }\n    if (options.reserveRawExports) {\n        passes.add(gatherRawExports);\n    }\n    if (options.convertToDottedProperties) {\n        passes.add(convertToDottedProperties);\n    }\n    if (options.rewriteFunctionExpressions) {\n        passes.add(rewriteFunctionExpressions);\n    }\n    if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n        passes.add(aliasStrings);\n    }\n    if (options.aliasExternals) {\n        passes.add(aliasExternals);\n    }\n    if (options.aliasKeywords) {\n        passes.add(aliasKeywords);\n    }\n    if (options.collapseVariableDeclarations) {\n        passes.add(collapseVariableDeclarations);\n    }\n    passes.add(denormalize);\n    if (options.instrumentationTemplate !\u003d null) {\n        passes.add(instrumentFunctions);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n        passes.add(invertContextualRenaming);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n        passes.add(renameVars);\n    }\n    if (options.processObjectPropertyString) {\n        passes.add(objectPropertyStringPostprocess);\n    }\n    if (options.labelRenaming) {\n        passes.add(renameLabels);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n        passes.add(nameUnmappedAnonymousFunctions);\n    }\n    if (options.checkSymbols) {\n        passes.add(sanityCheckVars);\n    }\n    return passes;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 287,
      "functionName": "getOptimizations",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,130 +1,133 @@\n @Override\n protected List\u003cPassFactory\u003e getOptimizations() {\n     List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n     if (!options.idGenerators.isEmpty()) {\n         passes.add(replaceIdGenerators);\n     }\n     if (options.optimizeArgumentsArray) {\n         passes.add(optimizeArgumentsArray);\n     }\n     if (options.optimizeParameters) {\n         passes.add(removeUselessParameters);\n     }\n     if (options.closurePass \u0026\u0026 options.removeAbstractMethods) {\n         passes.add(removeAbstractMethods);\n     }\n     if (options.collapseProperties) {\n         passes.add(undoConstantRenaming);\n         passes.add(collapseProperties);\n         passes.add(renameConstants.makeOneTimePass());\n     }\n     if (options.tightenTypes) {\n         passes.add(tightenTypesBuilder);\n     }\n     if (options.disambiguateProperties) {\n         passes.add(disambiguateProperties);\n     }\n     if (options.computeFunctionSideEffects) {\n         passes.add(markPureFunctions);\n     } else if (options.markNoSideEffectCalls) {\n         passes.add(markNoSideEffectCalls);\n     }\n     if (options.chainCalls) {\n         passes.add(chainCalls);\n     }\n     if (options.devirtualizePrototypeMethods) {\n         passes.add(devirtualizePrototypeMethods);\n     }\n     if (options.inlineConstantVars) {\n         passes.add(checkConsts);\n     }\n+    if (options.ignoreCajaProperties) {\n+        passes.add(ignoreCajaProperties);\n+    }\n     assertAllOneTimePasses(passes);\n     if (options.smartNameRemoval || options.reportPath !\u003d null) {\n         passes.addAll(getCodeRemovingPasses(true));\n         passes.add(smartNamePass);\n     }\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n     }\n     passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n     passes.addAll(getMainOptimizationLoop());\n     passes.add(createEmptyPass(\"beforeModuleMotion\"));\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.crossModuleMethodMotion) {\n         passes.add(crossModuleMethodMotion);\n     }\n     passes.add(createEmptyPass(\"afterModuleMotion\"));\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n     }\n     if (options.flowSensitiveInlineVariables) {\n         passes.add(flowSensitiveInlineVariables);\n     }\n     if (options.collapseAnonymousFunctions) {\n         passes.add(collapseAnonymousFunctions);\n     }\n     if (options.moveFunctionDeclarations) {\n         passes.add(moveFunctionDeclarations);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n         passes.add(nameMappedAnonymousFunctions);\n     }\n     if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n         passes.add(extractPrototypeMemberDeclarations);\n     }\n     if (options.coalesceVariableNames) {\n         passes.add(coalesceVariableNames);\n     }\n     if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n         passes.add(ambiguateProperties);\n     }\n     if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n         passes.add(renameProperties);\n     }\n     if (options.reserveRawExports) {\n         passes.add(gatherRawExports);\n     }\n     if (options.convertToDottedProperties) {\n         passes.add(convertToDottedProperties);\n     }\n     if (options.rewriteFunctionExpressions) {\n         passes.add(rewriteFunctionExpressions);\n     }\n     if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n         passes.add(aliasStrings);\n     }\n     if (options.aliasExternals) {\n         passes.add(aliasExternals);\n     }\n     if (options.aliasKeywords) {\n         passes.add(aliasKeywords);\n     }\n     if (options.collapseVariableDeclarations) {\n         passes.add(collapseVariableDeclarations);\n     }\n     passes.add(denormalize);\n     if (options.instrumentationTemplate !\u003d null) {\n         passes.add(instrumentFunctions);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n         passes.add(invertContextualRenaming);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n         passes.add(renameVars);\n     }\n     if (options.processObjectPropertyString) {\n         passes.add(objectPropertyStringPostprocess);\n     }\n     if (options.labelRenaming) {\n         passes.add(renameLabels);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n         passes.add(nameUnmappedAnonymousFunctions);\n     }\n     if (options.checkSymbols) {\n         passes.add(sanityCheckVars);\n     }\n     return passes;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "168bc14ff5e9e664863c3b1146f2a5b7a30ffb42": {
      "type": "Ybodychange",
      "commitMessage": "Add a pass for collecting symbols exported like window[\u0027x\u0027] \u003d ...\n\nFix for issue #70.\n\nAssorted minor bug fixes.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@31 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/11/09, 3:29 PM",
      "commitName": "168bc14ff5e9e664863c3b1146f2a5b7a30ffb42",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "12/2/09, 5:12 PM",
      "commitNameOld": "3924ff1e4a236d68a0b5448d185537d90ca04419",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 8.93,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getOptimizations() {\n    List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n    if (!options.idGenerators.isEmpty()) {\n        passes.add(replaceIdGenerators);\n    }\n    if (options.optimizeArgumentsArray) {\n        passes.add(optimizeArgumentsArray);\n    }\n    if (options.optimizeParameters) {\n        passes.add(removeUselessParameters);\n    }\n    if (options.closurePass \u0026\u0026 options.removeAbstractMethods) {\n        passes.add(removeAbstractMethods);\n    }\n    if (options.collapseProperties) {\n        passes.add(undoConstantRenaming);\n        passes.add(collapseProperties);\n        passes.add(renameConstants.makeOneTimePass());\n    }\n    if (options.tightenTypes) {\n        passes.add(tightenTypesBuilder);\n    }\n    if (options.disambiguateProperties) {\n        passes.add(disambiguateProperties);\n    }\n    if (options.computeFunctionSideEffects) {\n        passes.add(markPureFunctions);\n    } else if (options.markNoSideEffectCalls) {\n        passes.add(markNoSideEffectCalls);\n    }\n    if (options.chainCalls) {\n        passes.add(chainCalls);\n    }\n    if (options.devirtualizePrototypeMethods) {\n        passes.add(devirtualizePrototypeMethods);\n    }\n    if (options.inlineConstantVars) {\n        passes.add(checkConsts);\n    }\n    assertAllOneTimePasses(passes);\n    if (options.smartNameRemoval || options.reportPath !\u003d null) {\n        passes.addAll(getCodeRemovingPasses(true));\n        passes.add(smartNamePass);\n    }\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n    }\n    passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n    passes.addAll(getMainOptimizationLoop());\n    passes.add(createEmptyPass(\"beforeModuleMotion\"));\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.crossModuleMethodMotion) {\n        passes.add(crossModuleMethodMotion);\n    }\n    passes.add(createEmptyPass(\"afterModuleMotion\"));\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n    }\n    if (options.flowSensitiveInlineVariables) {\n        passes.add(flowSensitiveInlineVariables);\n    }\n    if (options.collapseAnonymousFunctions) {\n        passes.add(collapseAnonymousFunctions);\n    }\n    if (options.moveFunctionDeclarations) {\n        passes.add(moveFunctionDeclarations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n        passes.add(nameMappedAnonymousFunctions);\n    }\n    if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n        passes.add(extractPrototypeMemberDeclarations);\n    }\n    if (options.coalesceVariableNames) {\n        passes.add(coalesceVariableNames);\n    }\n    if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n        passes.add(ambiguateProperties);\n    }\n    if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n        passes.add(renameProperties);\n    }\n    if (options.reserveRawExports) {\n        passes.add(gatherRawExports);\n    }\n    if (options.convertToDottedProperties) {\n        passes.add(convertToDottedProperties);\n    }\n    if (options.rewriteFunctionExpressions) {\n        passes.add(rewriteFunctionExpressions);\n    }\n    if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n        passes.add(aliasStrings);\n    }\n    if (options.aliasExternals) {\n        passes.add(aliasExternals);\n    }\n    if (options.aliasKeywords) {\n        passes.add(aliasKeywords);\n    }\n    if (options.collapseVariableDeclarations) {\n        passes.add(collapseVariableDeclarations);\n    }\n    passes.add(denormalize);\n    if (options.instrumentationTemplate !\u003d null) {\n        passes.add(instrumentFunctions);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n        passes.add(invertContextualRenaming);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n        passes.add(renameVars);\n    }\n    if (options.processObjectPropertyString) {\n        passes.add(objectPropertyStringPostprocess);\n    }\n    if (options.labelRenaming) {\n        passes.add(renameLabels);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n        passes.add(nameUnmappedAnonymousFunctions);\n    }\n    if (options.checkSymbols) {\n        passes.add(sanityCheckVars);\n    }\n    return passes;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 287,
      "functionName": "getOptimizations",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,127 +1,130 @@\n @Override\n protected List\u003cPassFactory\u003e getOptimizations() {\n     List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n     if (!options.idGenerators.isEmpty()) {\n         passes.add(replaceIdGenerators);\n     }\n     if (options.optimizeArgumentsArray) {\n         passes.add(optimizeArgumentsArray);\n     }\n     if (options.optimizeParameters) {\n         passes.add(removeUselessParameters);\n     }\n     if (options.closurePass \u0026\u0026 options.removeAbstractMethods) {\n         passes.add(removeAbstractMethods);\n     }\n     if (options.collapseProperties) {\n         passes.add(undoConstantRenaming);\n         passes.add(collapseProperties);\n         passes.add(renameConstants.makeOneTimePass());\n     }\n     if (options.tightenTypes) {\n         passes.add(tightenTypesBuilder);\n     }\n     if (options.disambiguateProperties) {\n         passes.add(disambiguateProperties);\n     }\n     if (options.computeFunctionSideEffects) {\n         passes.add(markPureFunctions);\n     } else if (options.markNoSideEffectCalls) {\n         passes.add(markNoSideEffectCalls);\n     }\n     if (options.chainCalls) {\n         passes.add(chainCalls);\n     }\n     if (options.devirtualizePrototypeMethods) {\n         passes.add(devirtualizePrototypeMethods);\n     }\n     if (options.inlineConstantVars) {\n         passes.add(checkConsts);\n     }\n     assertAllOneTimePasses(passes);\n     if (options.smartNameRemoval || options.reportPath !\u003d null) {\n         passes.addAll(getCodeRemovingPasses(true));\n         passes.add(smartNamePass);\n     }\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n     }\n     passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n     passes.addAll(getMainOptimizationLoop());\n     passes.add(createEmptyPass(\"beforeModuleMotion\"));\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.crossModuleMethodMotion) {\n         passes.add(crossModuleMethodMotion);\n     }\n     passes.add(createEmptyPass(\"afterModuleMotion\"));\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n     }\n     if (options.flowSensitiveInlineVariables) {\n         passes.add(flowSensitiveInlineVariables);\n     }\n     if (options.collapseAnonymousFunctions) {\n         passes.add(collapseAnonymousFunctions);\n     }\n     if (options.moveFunctionDeclarations) {\n         passes.add(moveFunctionDeclarations);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n         passes.add(nameMappedAnonymousFunctions);\n     }\n     if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n         passes.add(extractPrototypeMemberDeclarations);\n     }\n     if (options.coalesceVariableNames) {\n         passes.add(coalesceVariableNames);\n     }\n     if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n         passes.add(ambiguateProperties);\n     }\n     if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n         passes.add(renameProperties);\n     }\n+    if (options.reserveRawExports) {\n+        passes.add(gatherRawExports);\n+    }\n     if (options.convertToDottedProperties) {\n         passes.add(convertToDottedProperties);\n     }\n     if (options.rewriteFunctionExpressions) {\n         passes.add(rewriteFunctionExpressions);\n     }\n     if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n         passes.add(aliasStrings);\n     }\n     if (options.aliasExternals) {\n         passes.add(aliasExternals);\n     }\n     if (options.aliasKeywords) {\n         passes.add(aliasKeywords);\n     }\n     if (options.collapseVariableDeclarations) {\n         passes.add(collapseVariableDeclarations);\n     }\n     passes.add(denormalize);\n     if (options.instrumentationTemplate !\u003d null) {\n         passes.add(instrumentFunctions);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n         passes.add(invertContextualRenaming);\n     }\n     if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n         passes.add(renameVars);\n     }\n     if (options.processObjectPropertyString) {\n         passes.add(objectPropertyStringPostprocess);\n     }\n     if (options.labelRenaming) {\n         passes.add(renameLabels);\n     }\n     if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n         passes.add(nameUnmappedAnonymousFunctions);\n     }\n     if (options.checkSymbols) {\n         passes.add(sanityCheckVars);\n     }\n     return passes;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3924ff1e4a236d68a0b5448d185537d90ca04419": {
      "type": "Ybodychange",
      "commitMessage": "Warn about all with statements, unless there\u0027s an explicit\n/** @suppress {with} */ tag\n\nRefactor a bunch of stuff into PassConfigs\n\nAdd a bunch of parser tests.\n\nUp-integrate John and Norris\u0027 latest changes to Rhino at trunk\n\nMinor type-tightening bug fixes.\n\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@18 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/2/09, 5:12 PM",
      "commitName": "3924ff1e4a236d68a0b5448d185537d90ca04419",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/25/09, 6:53 AM",
      "commitNameOld": "3bee5d740c96572faea4b9fb8b632e0e07b13cbb",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 7.43,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getOptimizations() {\n    List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n    if (!options.idGenerators.isEmpty()) {\n        passes.add(replaceIdGenerators);\n    }\n    if (options.optimizeArgumentsArray) {\n        passes.add(optimizeArgumentsArray);\n    }\n    if (options.optimizeParameters) {\n        passes.add(removeUselessParameters);\n    }\n    if (options.closurePass \u0026\u0026 options.removeAbstractMethods) {\n        passes.add(removeAbstractMethods);\n    }\n    if (options.collapseProperties) {\n        passes.add(undoConstantRenaming);\n        passes.add(collapseProperties);\n        passes.add(renameConstants.makeOneTimePass());\n    }\n    if (options.tightenTypes) {\n        passes.add(tightenTypesBuilder);\n    }\n    if (options.disambiguateProperties) {\n        passes.add(disambiguateProperties);\n    }\n    if (options.computeFunctionSideEffects) {\n        passes.add(markPureFunctions);\n    } else if (options.markNoSideEffectCalls) {\n        passes.add(markNoSideEffectCalls);\n    }\n    if (options.chainCalls) {\n        passes.add(chainCalls);\n    }\n    if (options.devirtualizePrototypeMethods) {\n        passes.add(devirtualizePrototypeMethods);\n    }\n    if (options.inlineConstantVars) {\n        passes.add(checkConsts);\n    }\n    assertAllOneTimePasses(passes);\n    if (options.smartNameRemoval || options.reportPath !\u003d null) {\n        passes.addAll(getCodeRemovingPasses(true));\n        passes.add(smartNamePass);\n    }\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n    }\n    passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n    passes.addAll(getMainOptimizationLoop());\n    passes.add(createEmptyPass(\"beforeModuleMotion\"));\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.crossModuleMethodMotion) {\n        passes.add(crossModuleMethodMotion);\n    }\n    passes.add(createEmptyPass(\"afterModuleMotion\"));\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n    }\n    if (options.flowSensitiveInlineVariables) {\n        passes.add(flowSensitiveInlineVariables);\n    }\n    if (options.collapseAnonymousFunctions) {\n        passes.add(collapseAnonymousFunctions);\n    }\n    if (options.moveFunctionDeclarations) {\n        passes.add(moveFunctionDeclarations);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n        passes.add(nameMappedAnonymousFunctions);\n    }\n    if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n        passes.add(extractPrototypeMemberDeclarations);\n    }\n    if (options.coalesceVariableNames) {\n        passes.add(coalesceVariableNames);\n    }\n    if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n        passes.add(ambiguateProperties);\n    }\n    if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n        passes.add(renameProperties);\n    }\n    if (options.convertToDottedProperties) {\n        passes.add(convertToDottedProperties);\n    }\n    if (options.rewriteFunctionExpressions) {\n        passes.add(rewriteFunctionExpressions);\n    }\n    if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n        passes.add(aliasStrings);\n    }\n    if (options.aliasExternals) {\n        passes.add(aliasExternals);\n    }\n    if (options.aliasKeywords) {\n        passes.add(aliasKeywords);\n    }\n    if (options.collapseVariableDeclarations) {\n        passes.add(collapseVariableDeclarations);\n    }\n    passes.add(denormalize);\n    if (options.instrumentationTemplate !\u003d null) {\n        passes.add(instrumentFunctions);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n        passes.add(invertContextualRenaming);\n    }\n    if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n        passes.add(renameVars);\n    }\n    if (options.processObjectPropertyString) {\n        passes.add(objectPropertyStringPostprocess);\n    }\n    if (options.labelRenaming) {\n        passes.add(renameLabels);\n    }\n    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n        passes.add(nameUnmappedAnonymousFunctions);\n    }\n    if (options.checkSymbols) {\n        passes.add(sanityCheckVars);\n    }\n    return passes;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 287,
      "functionName": "getOptimizations",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,63 +1,127 @@\n @Override\n protected List\u003cPassFactory\u003e getOptimizations() {\n     List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n     if (!options.idGenerators.isEmpty()) {\n         passes.add(replaceIdGenerators);\n     }\n     if (options.optimizeArgumentsArray) {\n         passes.add(optimizeArgumentsArray);\n     }\n     if (options.optimizeParameters) {\n         passes.add(removeUselessParameters);\n     }\n     if (options.closurePass \u0026\u0026 options.removeAbstractMethods) {\n         passes.add(removeAbstractMethods);\n     }\n     if (options.collapseProperties) {\n         passes.add(undoConstantRenaming);\n         passes.add(collapseProperties);\n         passes.add(renameConstants.makeOneTimePass());\n     }\n     if (options.tightenTypes) {\n         passes.add(tightenTypesBuilder);\n     }\n     if (options.disambiguateProperties) {\n         passes.add(disambiguateProperties);\n     }\n     if (options.computeFunctionSideEffects) {\n         passes.add(markPureFunctions);\n     } else if (options.markNoSideEffectCalls) {\n         passes.add(markNoSideEffectCalls);\n     }\n     if (options.chainCalls) {\n         passes.add(chainCalls);\n     }\n     if (options.devirtualizePrototypeMethods) {\n         passes.add(devirtualizePrototypeMethods);\n     }\n     if (options.inlineConstantVars) {\n         passes.add(checkConsts);\n     }\n     assertAllOneTimePasses(passes);\n     if (options.smartNameRemoval || options.reportPath !\u003d null) {\n         passes.addAll(getCodeRemovingPasses(true));\n         passes.add(smartNamePass);\n     }\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n     }\n     passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n     passes.addAll(getMainOptimizationLoop());\n     passes.add(createEmptyPass(\"beforeModuleMotion\"));\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.crossModuleMethodMotion) {\n         passes.add(crossModuleMethodMotion);\n     }\n     passes.add(createEmptyPass(\"afterModuleMotion\"));\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n     }\n+    if (options.flowSensitiveInlineVariables) {\n+        passes.add(flowSensitiveInlineVariables);\n+    }\n+    if (options.collapseAnonymousFunctions) {\n+        passes.add(collapseAnonymousFunctions);\n+    }\n+    if (options.moveFunctionDeclarations) {\n+        passes.add(moveFunctionDeclarations);\n+    }\n+    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n+        passes.add(nameMappedAnonymousFunctions);\n+    }\n+    if (options.extractPrototypeMemberDeclarations \u0026\u0026 (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026 options.propertyRenaming !\u003d PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n+        passes.add(extractPrototypeMemberDeclarations);\n+    }\n+    if (options.coalesceVariableNames) {\n+        passes.add(coalesceVariableNames);\n+    }\n+    if (options.ambiguateProperties \u0026\u0026 (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n+        passes.add(ambiguateProperties);\n+    }\n+    if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n+        passes.add(renameProperties);\n+    }\n+    if (options.convertToDottedProperties) {\n+        passes.add(convertToDottedProperties);\n+    }\n+    if (options.rewriteFunctionExpressions) {\n+        passes.add(rewriteFunctionExpressions);\n+    }\n+    if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n+        passes.add(aliasStrings);\n+    }\n+    if (options.aliasExternals) {\n+        passes.add(aliasExternals);\n+    }\n+    if (options.aliasKeywords) {\n+        passes.add(aliasKeywords);\n+    }\n+    if (options.collapseVariableDeclarations) {\n+        passes.add(collapseVariableDeclarations);\n+    }\n+    passes.add(denormalize);\n+    if (options.instrumentationTemplate !\u003d null) {\n+        passes.add(instrumentFunctions);\n+    }\n+    if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n+        passes.add(invertContextualRenaming);\n+    }\n+    if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n+        passes.add(renameVars);\n+    }\n+    if (options.processObjectPropertyString) {\n+        passes.add(objectPropertyStringPostprocess);\n+    }\n+    if (options.labelRenaming) {\n+        passes.add(renameLabels);\n+    }\n+    if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n+        passes.add(nameUnmappedAnonymousFunctions);\n+    }\n+    if (options.checkSymbols) {\n+        passes.add(sanityCheckVars);\n+    }\n     return passes;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6a6ea480bae01f40f9795218ac911bb7de18d34a": {
      "type": "Ybodychange",
      "commitMessage": "Don\u0027t warn about duplicate variable declarations unless warning_level is\nset to VERBOSE.\n\nImplementation of libary function goog.base.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@13 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/19/09, 1:23 PM",
      "commitName": "6a6ea480bae01f40f9795218ac911bb7de18d34a",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/16/09, 4:04 PM",
      "commitNameOld": "2acd6c1986e36bfdbae85c09eb83ac1940b86c73",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 2.89,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getOptimizations() {\n    List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n    if (!options.idGenerators.isEmpty()) {\n        passes.add(replaceIdGenerators);\n    }\n    if (options.optimizeArgumentsArray) {\n        passes.add(optimizeArgumentsArray);\n    }\n    if (options.optimizeParameters) {\n        passes.add(removeUselessParameters);\n    }\n    if (options.closurePass \u0026\u0026 options.removeAbstractMethods) {\n        passes.add(removeAbstractMethods);\n    }\n    if (options.collapseProperties) {\n        passes.add(undoConstantRenaming);\n        passes.add(collapseProperties);\n        passes.add(renameConstants.makeOneTimePass());\n    }\n    if (options.tightenTypes) {\n        passes.add(tightenTypesBuilder);\n    }\n    if (options.disambiguateProperties) {\n        passes.add(disambiguateProperties);\n    }\n    if (options.computeFunctionSideEffects) {\n        passes.add(markPureFunctions);\n    } else if (options.markNoSideEffectCalls) {\n        passes.add(markNoSideEffectCalls);\n    }\n    if (options.chainCalls) {\n        passes.add(chainCalls);\n    }\n    if (options.devirtualizePrototypeMethods) {\n        passes.add(devirtualizePrototypeMethods);\n    }\n    if (options.inlineConstantVars) {\n        passes.add(checkConsts);\n    }\n    assertAllOneTimePasses(passes);\n    if (options.smartNameRemoval || options.reportPath !\u003d null) {\n        passes.addAll(getCodeRemovingPasses(true));\n        passes.add(smartNamePass);\n    }\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n    }\n    passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n    passes.addAll(getMainOptimizationLoop());\n    passes.add(createEmptyPass(\"beforeModuleMotion\"));\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.crossModuleMethodMotion) {\n        passes.add(crossModuleMethodMotion);\n    }\n    passes.add(createEmptyPass(\"afterModuleMotion\"));\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n    }\n    return passes;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 206,
      "functionName": "getOptimizations",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,63 +1,63 @@\n @Override\n protected List\u003cPassFactory\u003e getOptimizations() {\n     List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n     if (!options.idGenerators.isEmpty()) {\n         passes.add(replaceIdGenerators);\n     }\n     if (options.optimizeArgumentsArray) {\n         passes.add(optimizeArgumentsArray);\n     }\n     if (options.optimizeParameters) {\n         passes.add(removeUselessParameters);\n     }\n-    if (options.closurePass) {\n+    if (options.closurePass \u0026\u0026 options.removeAbstractMethods) {\n         passes.add(removeAbstractMethods);\n     }\n     if (options.collapseProperties) {\n         passes.add(undoConstantRenaming);\n         passes.add(collapseProperties);\n         passes.add(renameConstants.makeOneTimePass());\n     }\n     if (options.tightenTypes) {\n         passes.add(tightenTypesBuilder);\n     }\n     if (options.disambiguateProperties) {\n         passes.add(disambiguateProperties);\n     }\n     if (options.computeFunctionSideEffects) {\n         passes.add(markPureFunctions);\n     } else if (options.markNoSideEffectCalls) {\n         passes.add(markNoSideEffectCalls);\n     }\n     if (options.chainCalls) {\n         passes.add(chainCalls);\n     }\n     if (options.devirtualizePrototypeMethods) {\n         passes.add(devirtualizePrototypeMethods);\n     }\n     if (options.inlineConstantVars) {\n         passes.add(checkConsts);\n     }\n     assertAllOneTimePasses(passes);\n     if (options.smartNameRemoval || options.reportPath !\u003d null) {\n         passes.addAll(getCodeRemovingPasses(true));\n         passes.add(smartNamePass);\n     }\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n     }\n     passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n     passes.addAll(getMainOptimizationLoop());\n     passes.add(createEmptyPass(\"beforeModuleMotion\"));\n     if (options.crossModuleCodeMotion) {\n         passes.add(crossModuleCodeMotion);\n     }\n     if (options.crossModuleMethodMotion) {\n         passes.add(crossModuleMethodMotion);\n     }\n     passes.add(createEmptyPass(\"afterModuleMotion\"));\n     if (options.customPasses !\u003d null) {\n         passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n     }\n     return passes;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,63 @@\n+@Override\n+protected List\u003cPassFactory\u003e getOptimizations() {\n+    List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n+    if (!options.idGenerators.isEmpty()) {\n+        passes.add(replaceIdGenerators);\n+    }\n+    if (options.optimizeArgumentsArray) {\n+        passes.add(optimizeArgumentsArray);\n+    }\n+    if (options.optimizeParameters) {\n+        passes.add(removeUselessParameters);\n+    }\n+    if (options.closurePass) {\n+        passes.add(removeAbstractMethods);\n+    }\n+    if (options.collapseProperties) {\n+        passes.add(undoConstantRenaming);\n+        passes.add(collapseProperties);\n+        passes.add(renameConstants.makeOneTimePass());\n+    }\n+    if (options.tightenTypes) {\n+        passes.add(tightenTypesBuilder);\n+    }\n+    if (options.disambiguateProperties) {\n+        passes.add(disambiguateProperties);\n+    }\n+    if (options.computeFunctionSideEffects) {\n+        passes.add(markPureFunctions);\n+    } else if (options.markNoSideEffectCalls) {\n+        passes.add(markNoSideEffectCalls);\n+    }\n+    if (options.chainCalls) {\n+        passes.add(chainCalls);\n+    }\n+    if (options.devirtualizePrototypeMethods) {\n+        passes.add(devirtualizePrototypeMethods);\n+    }\n+    if (options.inlineConstantVars) {\n+        passes.add(checkConsts);\n+    }\n+    assertAllOneTimePasses(passes);\n+    if (options.smartNameRemoval || options.reportPath !\u003d null) {\n+        passes.addAll(getCodeRemovingPasses(true));\n+        passes.add(smartNamePass);\n+    }\n+    if (options.customPasses !\u003d null) {\n+        passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n+    }\n+    passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n+    passes.addAll(getMainOptimizationLoop());\n+    passes.add(createEmptyPass(\"beforeModuleMotion\"));\n+    if (options.crossModuleCodeMotion) {\n+        passes.add(crossModuleCodeMotion);\n+    }\n+    if (options.crossModuleMethodMotion) {\n+        passes.add(crossModuleMethodMotion);\n+    }\n+    passes.add(createEmptyPass(\"afterModuleMotion\"));\n+    if (options.customPasses !\u003d null) {\n+        passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n+    }\n+    return passes;\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getOptimizations() {\n    List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n    if (!options.idGenerators.isEmpty()) {\n        passes.add(replaceIdGenerators);\n    }\n    if (options.optimizeArgumentsArray) {\n        passes.add(optimizeArgumentsArray);\n    }\n    if (options.optimizeParameters) {\n        passes.add(removeUselessParameters);\n    }\n    if (options.closurePass) {\n        passes.add(removeAbstractMethods);\n    }\n    if (options.collapseProperties) {\n        passes.add(undoConstantRenaming);\n        passes.add(collapseProperties);\n        passes.add(renameConstants.makeOneTimePass());\n    }\n    if (options.tightenTypes) {\n        passes.add(tightenTypesBuilder);\n    }\n    if (options.disambiguateProperties) {\n        passes.add(disambiguateProperties);\n    }\n    if (options.computeFunctionSideEffects) {\n        passes.add(markPureFunctions);\n    } else if (options.markNoSideEffectCalls) {\n        passes.add(markNoSideEffectCalls);\n    }\n    if (options.chainCalls) {\n        passes.add(chainCalls);\n    }\n    if (options.devirtualizePrototypeMethods) {\n        passes.add(devirtualizePrototypeMethods);\n    }\n    if (options.inlineConstantVars) {\n        passes.add(checkConsts);\n    }\n    assertAllOneTimePasses(passes);\n    if (options.smartNameRemoval || options.reportPath !\u003d null) {\n        passes.addAll(getCodeRemovingPasses(true));\n        passes.add(smartNamePass);\n    }\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n    }\n    passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n    passes.addAll(getMainOptimizationLoop());\n    passes.add(createEmptyPass(\"beforeModuleMotion\"));\n    if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n    }\n    if (options.crossModuleMethodMotion) {\n        passes.add(crossModuleMethodMotion);\n    }\n    passes.add(createEmptyPass(\"afterModuleMotion\"));\n    if (options.customPasses !\u003d null) {\n        passes.add(getCustomPasses(CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n    }\n    return passes;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 195,
      "functionName": "getOptimizations",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}