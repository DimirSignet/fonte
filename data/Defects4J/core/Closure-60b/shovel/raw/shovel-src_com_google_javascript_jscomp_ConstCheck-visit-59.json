{
  "origin": "codeshovel",
  "repositoryName": "Closure-60b",
  "repositoryPath": "/tmp/Closure-60b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ConstCheck.java",
  "functionName": "visit",
  "functionId": "visit___t-NodeTraversal__n-Node__parent-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/ConstCheck.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 59,
  "functionEndLine": 117,
  "numCommitsSeen": 12,
  "timeTaken": 337,
  "changeHistory": [
    "5da32cba7b68d69acfc535f57f21d652475d256f",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "5da32cba7b68d69acfc535f57f21d652475d256f": "Ymultichange(Yannotationchange,Ydocchange)",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5da32cba7b68d69acfc535f57f21d652475d256f": {
      "type": "Ymultichange(Yannotationchange,Ydocchange)",
      "commitMessage": "\nChange on 2010/04/19 by anatol\n\n        Replace {@inheritDoc} javadoc annotation with @Override.\n        @Override is better as it implies documentation inheritance plus checks\n        that the parent method exists at the compile-time.\n\n        R\u003dnick\n        DELTA\u003d137  (0 added, 70 deleted, 67 changed)\n\nChange on 2010/04/19 by nick\n\n        Change how we resolve types.\n        Instead of leaving shell proxy types around, unbox the proxy types.\n\n        R\u003dandrew,john\n        DELTA\u003d103  (84 added, 5 deleted, 14 changed)\n\nChange on 2010/04/19 by acleung\n\n        Enable Flow Sensitive Inlining by default.\n\n        R\u003djohn\n        DELTA\u003d1  (0 added, 0 deleted, 1 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dpqvliw\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@191 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/19/10, 4:28 PM",
      "commitName": "5da32cba7b68d69acfc535f57f21d652475d256f",
      "commitAuthor": "Nicholas.J.Santos",
      "subchanges": [
        {
          "type": "Yannotationchange",
          "commitMessage": "\nChange on 2010/04/19 by anatol\n\n        Replace {@inheritDoc} javadoc annotation with @Override.\n        @Override is better as it implies documentation inheritance plus checks\n        that the parent method exists at the compile-time.\n\n        R\u003dnick\n        DELTA\u003d137  (0 added, 70 deleted, 67 changed)\n\nChange on 2010/04/19 by nick\n\n        Change how we resolve types.\n        Instead of leaving shell proxy types around, unbox the proxy types.\n\n        R\u003dandrew,john\n        DELTA\u003d103  (84 added, 5 deleted, 14 changed)\n\nChange on 2010/04/19 by acleung\n\n        Enable Flow Sensitive Inlining by default.\n\n        R\u003djohn\n        DELTA\u003d1  (0 added, 0 deleted, 1 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dpqvliw\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@191 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "4/19/10, 4:28 PM",
          "commitName": "5da32cba7b68d69acfc535f57f21d652475d256f",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "3/29/10, 7:04 AM",
          "commitNameOld": "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 21.39,
          "commitsBetweenForRepo": 29,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    switch(n.getType()) {\n        case Token.NAME:\n            if (parent !\u003d null \u0026\u0026 parent.getType() \u003d\u003d Token.VAR \u0026\u0026 n.hasChildren()) {\n                String name \u003d n.getString();\n                Scope.Var var \u003d t.getScope().getVar(name);\n                if (isConstant(var)) {\n                    if (initializedConstants.contains(var)) {\n                        reportError(t, n, name);\n                    } else {\n                        initializedConstants.add(var);\n                    }\n                }\n            }\n            break;\n        case Token.ASSIGN:\n        case Token.ASSIGN_BITOR:\n        case Token.ASSIGN_BITXOR:\n        case Token.ASSIGN_BITAND:\n        case Token.ASSIGN_LSH:\n        case Token.ASSIGN_RSH:\n        case Token.ASSIGN_URSH:\n        case Token.ASSIGN_ADD:\n        case Token.ASSIGN_SUB:\n        case Token.ASSIGN_MUL:\n        case Token.ASSIGN_DIV:\n        case Token.ASSIGN_MOD:\n            {\n                Node lhs \u003d n.getFirstChild();\n                if (lhs.getType() \u003d\u003d Token.NAME) {\n                    String name \u003d lhs.getString();\n                    Scope.Var var \u003d t.getScope().getVar(name);\n                    if (isConstant(var)) {\n                        if (initializedConstants.contains(var)) {\n                            reportError(t, n, name);\n                        } else {\n                            initializedConstants.add(var);\n                        }\n                    }\n                }\n                break;\n            }\n        case Token.INC:\n        case Token.DEC:\n            {\n                Node lhs \u003d n.getFirstChild();\n                if (lhs.getType() \u003d\u003d Token.NAME) {\n                    String name \u003d lhs.getString();\n                    Scope.Var var \u003d t.getScope().getVar(name);\n                    if (isConstant(var)) {\n                        reportError(t, n, name);\n                    }\n                }\n                break;\n            }\n    }\n}",
          "path": "src/com/google/javascript/jscomp/ConstCheck.java",
          "functionStartLine": 60,
          "functionName": "visit",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,57 +1,58 @@\n+@Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     switch(n.getType()) {\n         case Token.NAME:\n             if (parent !\u003d null \u0026\u0026 parent.getType() \u003d\u003d Token.VAR \u0026\u0026 n.hasChildren()) {\n                 String name \u003d n.getString();\n                 Scope.Var var \u003d t.getScope().getVar(name);\n                 if (isConstant(var)) {\n                     if (initializedConstants.contains(var)) {\n                         reportError(t, n, name);\n                     } else {\n                         initializedConstants.add(var);\n                     }\n                 }\n             }\n             break;\n         case Token.ASSIGN:\n         case Token.ASSIGN_BITOR:\n         case Token.ASSIGN_BITXOR:\n         case Token.ASSIGN_BITAND:\n         case Token.ASSIGN_LSH:\n         case Token.ASSIGN_RSH:\n         case Token.ASSIGN_URSH:\n         case Token.ASSIGN_ADD:\n         case Token.ASSIGN_SUB:\n         case Token.ASSIGN_MUL:\n         case Token.ASSIGN_DIV:\n         case Token.ASSIGN_MOD:\n             {\n                 Node lhs \u003d n.getFirstChild();\n                 if (lhs.getType() \u003d\u003d Token.NAME) {\n                     String name \u003d lhs.getString();\n                     Scope.Var var \u003d t.getScope().getVar(name);\n                     if (isConstant(var)) {\n                         if (initializedConstants.contains(var)) {\n                             reportError(t, n, name);\n                         } else {\n                             initializedConstants.add(var);\n                         }\n                     }\n                 }\n                 break;\n             }\n         case Token.INC:\n         case Token.DEC:\n             {\n                 Node lhs \u003d n.getFirstChild();\n                 if (lhs.getType() \u003d\u003d Token.NAME) {\n                     String name \u003d lhs.getString();\n                     Scope.Var var \u003d t.getScope().getVar(name);\n                     if (isConstant(var)) {\n                         reportError(t, n, name);\n                     }\n                 }\n                 break;\n             }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "@Override"
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "\nChange on 2010/04/19 by anatol\n\n        Replace {@inheritDoc} javadoc annotation with @Override.\n        @Override is better as it implies documentation inheritance plus checks\n        that the parent method exists at the compile-time.\n\n        R\u003dnick\n        DELTA\u003d137  (0 added, 70 deleted, 67 changed)\n\nChange on 2010/04/19 by nick\n\n        Change how we resolve types.\n        Instead of leaving shell proxy types around, unbox the proxy types.\n\n        R\u003dandrew,john\n        DELTA\u003d103  (84 added, 5 deleted, 14 changed)\n\nChange on 2010/04/19 by acleung\n\n        Enable Flow Sensitive Inlining by default.\n\n        R\u003djohn\n        DELTA\u003d1  (0 added, 0 deleted, 1 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dpqvliw\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@191 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "4/19/10, 4:28 PM",
          "commitName": "5da32cba7b68d69acfc535f57f21d652475d256f",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "3/29/10, 7:04 AM",
          "commitNameOld": "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 21.39,
          "commitsBetweenForRepo": 29,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    switch(n.getType()) {\n        case Token.NAME:\n            if (parent !\u003d null \u0026\u0026 parent.getType() \u003d\u003d Token.VAR \u0026\u0026 n.hasChildren()) {\n                String name \u003d n.getString();\n                Scope.Var var \u003d t.getScope().getVar(name);\n                if (isConstant(var)) {\n                    if (initializedConstants.contains(var)) {\n                        reportError(t, n, name);\n                    } else {\n                        initializedConstants.add(var);\n                    }\n                }\n            }\n            break;\n        case Token.ASSIGN:\n        case Token.ASSIGN_BITOR:\n        case Token.ASSIGN_BITXOR:\n        case Token.ASSIGN_BITAND:\n        case Token.ASSIGN_LSH:\n        case Token.ASSIGN_RSH:\n        case Token.ASSIGN_URSH:\n        case Token.ASSIGN_ADD:\n        case Token.ASSIGN_SUB:\n        case Token.ASSIGN_MUL:\n        case Token.ASSIGN_DIV:\n        case Token.ASSIGN_MOD:\n            {\n                Node lhs \u003d n.getFirstChild();\n                if (lhs.getType() \u003d\u003d Token.NAME) {\n                    String name \u003d lhs.getString();\n                    Scope.Var var \u003d t.getScope().getVar(name);\n                    if (isConstant(var)) {\n                        if (initializedConstants.contains(var)) {\n                            reportError(t, n, name);\n                        } else {\n                            initializedConstants.add(var);\n                        }\n                    }\n                }\n                break;\n            }\n        case Token.INC:\n        case Token.DEC:\n            {\n                Node lhs \u003d n.getFirstChild();\n                if (lhs.getType() \u003d\u003d Token.NAME) {\n                    String name \u003d lhs.getString();\n                    Scope.Var var \u003d t.getScope().getVar(name);\n                    if (isConstant(var)) {\n                        reportError(t, n, name);\n                    }\n                }\n                break;\n            }\n    }\n}",
          "path": "src/com/google/javascript/jscomp/ConstCheck.java",
          "functionStartLine": 60,
          "functionName": "visit",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,57 +1,58 @@\n+@Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     switch(n.getType()) {\n         case Token.NAME:\n             if (parent !\u003d null \u0026\u0026 parent.getType() \u003d\u003d Token.VAR \u0026\u0026 n.hasChildren()) {\n                 String name \u003d n.getString();\n                 Scope.Var var \u003d t.getScope().getVar(name);\n                 if (isConstant(var)) {\n                     if (initializedConstants.contains(var)) {\n                         reportError(t, n, name);\n                     } else {\n                         initializedConstants.add(var);\n                     }\n                 }\n             }\n             break;\n         case Token.ASSIGN:\n         case Token.ASSIGN_BITOR:\n         case Token.ASSIGN_BITXOR:\n         case Token.ASSIGN_BITAND:\n         case Token.ASSIGN_LSH:\n         case Token.ASSIGN_RSH:\n         case Token.ASSIGN_URSH:\n         case Token.ASSIGN_ADD:\n         case Token.ASSIGN_SUB:\n         case Token.ASSIGN_MUL:\n         case Token.ASSIGN_DIV:\n         case Token.ASSIGN_MOD:\n             {\n                 Node lhs \u003d n.getFirstChild();\n                 if (lhs.getType() \u003d\u003d Token.NAME) {\n                     String name \u003d lhs.getString();\n                     Scope.Var var \u003d t.getScope().getVar(name);\n                     if (isConstant(var)) {\n                         if (initializedConstants.contains(var)) {\n                             reportError(t, n, name);\n                         } else {\n                             initializedConstants.add(var);\n                         }\n                     }\n                 }\n                 break;\n             }\n         case Token.INC:\n         case Token.DEC:\n             {\n                 Node lhs \u003d n.getFirstChild();\n                 if (lhs.getType() \u003d\u003d Token.NAME) {\n                     String name \u003d lhs.getString();\n                     Scope.Var var \u003d t.getScope().getVar(name);\n                     if (isConstant(var)) {\n                         reportError(t, n, name);\n                     }\n                 }\n                 break;\n             }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "@inheritDoc}\n",
            "newValue": ""
          }
        }
      ]
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,57 @@\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    switch(n.getType()) {\n+        case Token.NAME:\n+            if (parent !\u003d null \u0026\u0026 parent.getType() \u003d\u003d Token.VAR \u0026\u0026 n.hasChildren()) {\n+                String name \u003d n.getString();\n+                Scope.Var var \u003d t.getScope().getVar(name);\n+                if (isConstant(var)) {\n+                    if (initializedConstants.contains(var)) {\n+                        reportError(t, n, name);\n+                    } else {\n+                        initializedConstants.add(var);\n+                    }\n+                }\n+            }\n+            break;\n+        case Token.ASSIGN:\n+        case Token.ASSIGN_BITOR:\n+        case Token.ASSIGN_BITXOR:\n+        case Token.ASSIGN_BITAND:\n+        case Token.ASSIGN_LSH:\n+        case Token.ASSIGN_RSH:\n+        case Token.ASSIGN_URSH:\n+        case Token.ASSIGN_ADD:\n+        case Token.ASSIGN_SUB:\n+        case Token.ASSIGN_MUL:\n+        case Token.ASSIGN_DIV:\n+        case Token.ASSIGN_MOD:\n+            {\n+                Node lhs \u003d n.getFirstChild();\n+                if (lhs.getType() \u003d\u003d Token.NAME) {\n+                    String name \u003d lhs.getString();\n+                    Scope.Var var \u003d t.getScope().getVar(name);\n+                    if (isConstant(var)) {\n+                        if (initializedConstants.contains(var)) {\n+                            reportError(t, n, name);\n+                        } else {\n+                            initializedConstants.add(var);\n+                        }\n+                    }\n+                }\n+                break;\n+            }\n+        case Token.INC:\n+        case Token.DEC:\n+            {\n+                Node lhs \u003d n.getFirstChild();\n+                if (lhs.getType() \u003d\u003d Token.NAME) {\n+                    String name \u003d lhs.getString();\n+                    Scope.Var var \u003d t.getScope().getVar(name);\n+                    if (isConstant(var)) {\n+                        reportError(t, n, name);\n+                    }\n+                }\n+                break;\n+            }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "public void visit(NodeTraversal t, Node n, Node parent) {\n    switch(n.getType()) {\n        case Token.NAME:\n            if (parent !\u003d null \u0026\u0026 parent.getType() \u003d\u003d Token.VAR \u0026\u0026 n.hasChildren()) {\n                String name \u003d n.getString();\n                Scope.Var var \u003d t.getScope().getVar(name);\n                if (isConstant(var)) {\n                    if (initializedConstants.contains(var)) {\n                        reportError(t, n, name);\n                    } else {\n                        initializedConstants.add(var);\n                    }\n                }\n            }\n            break;\n        case Token.ASSIGN:\n        case Token.ASSIGN_BITOR:\n        case Token.ASSIGN_BITXOR:\n        case Token.ASSIGN_BITAND:\n        case Token.ASSIGN_LSH:\n        case Token.ASSIGN_RSH:\n        case Token.ASSIGN_URSH:\n        case Token.ASSIGN_ADD:\n        case Token.ASSIGN_SUB:\n        case Token.ASSIGN_MUL:\n        case Token.ASSIGN_DIV:\n        case Token.ASSIGN_MOD:\n            {\n                Node lhs \u003d n.getFirstChild();\n                if (lhs.getType() \u003d\u003d Token.NAME) {\n                    String name \u003d lhs.getString();\n                    Scope.Var var \u003d t.getScope().getVar(name);\n                    if (isConstant(var)) {\n                        if (initializedConstants.contains(var)) {\n                            reportError(t, n, name);\n                        } else {\n                            initializedConstants.add(var);\n                        }\n                    }\n                }\n                break;\n            }\n        case Token.INC:\n        case Token.DEC:\n            {\n                Node lhs \u003d n.getFirstChild();\n                if (lhs.getType() \u003d\u003d Token.NAME) {\n                    String name \u003d lhs.getString();\n                    Scope.Var var \u003d t.getScope().getVar(name);\n                    if (isConstant(var)) {\n                        reportError(t, n, name);\n                    }\n                }\n                break;\n            }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/ConstCheck.java",
      "functionStartLine": 64,
      "functionName": "visit",
      "functionAnnotation": "",
      "functionDoc": "@inheritDoc}\n"
    }
  }
}