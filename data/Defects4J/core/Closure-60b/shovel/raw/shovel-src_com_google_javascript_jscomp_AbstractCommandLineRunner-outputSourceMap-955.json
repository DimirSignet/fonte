{
  "origin": "codeshovel",
  "repositoryName": "Closure-60b",
  "repositoryPath": "/tmp/Closure-60b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractCommandLineRunner.java",
  "functionName": "outputSourceMap",
  "functionId": "outputSourceMap___options-B",
  "sourceFilePath": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
  "functionAnnotation": "",
  "functionDoc": "Outputs the source map found in the compiler to the proper path if one\nexists.\n\n@param options The options to the Compiler.\n",
  "functionStartLine": 955,
  "functionEndLine": 965,
  "numCommitsSeen": 79,
  "timeTaken": 3477,
  "changeHistory": [
    "4cede4f156740b7ce93d92d824066e9a42257541",
    "82a9956c6337d2f5d4a94ebe624d64faa54d9182",
    "6d00ac1a68612aade8a19d7ecc9b180f00ae5234",
    "97bbbffb65eda01aa9b38a5cec43a598afb39070",
    "848ace840362a1f5558bec065cb40548ff66587a",
    "c306f810ac0d653caadb7bf0b7cf7c12d6c06a20",
    "bca9abb0e3062d373fe52c0e8340337588c05708",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "4cede4f156740b7ce93d92d824066e9a42257541": "Ybodychange",
    "82a9956c6337d2f5d4a94ebe624d64faa54d9182": "Ybodychange",
    "6d00ac1a68612aade8a19d7ecc9b180f00ae5234": "Ydocchange",
    "97bbbffb65eda01aa9b38a5cec43a598afb39070": "Ymultichange(Yparameterchange,Ybodychange)",
    "848ace840362a1f5558bec065cb40548ff66587a": "Yfilerename",
    "c306f810ac0d653caadb7bf0b7cf7c12d6c06a20": "Ybodychange",
    "bca9abb0e3062d373fe52c0e8340337588c05708": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4cede4f156740b7ce93d92d824066e9a42257541": {
      "type": "Ybodychange",
      "commitMessage": "\nUnify output encoding for real this time\nFixes issue 224.\n\nRevision created by MOE tool push_codebase.\n\nR\u003djohnlenz\nDELTA\u003d39  (5 added, 5 deleted, 29 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d196345\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@394 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/30/10, 4:16 PM",
      "commitName": "4cede4f156740b7ce93d92d824066e9a42257541",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "8/27/10, 3:52 PM",
      "commitNameOld": "e152ec001d2c6a9bbd6e0d9443552371d11e461f",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 3.02,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "private void outputSourceMap(B options) throws IOException {\n    if (Strings.isEmpty(options.sourceMapOutputPath)) {\n        return;\n    }\n    String outName \u003d expandSourceMapPath(options, null);\n    Writer out \u003d fileNameToOutputWriter(outName);\n    compiler.getSourceMap().appendTo(out, outName);\n    out.close();\n}",
      "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
      "functionStartLine": 865,
      "functionName": "outputSourceMap",
      "functionAnnotation": "",
      "functionDoc": "Outputs the source map found in the compiler to the proper path if one\nexists.\n\n@param options The options to the Compiler.\n",
      "diff": "@@ -1,9 +1,9 @@\n private void outputSourceMap(B options) throws IOException {\n     if (Strings.isEmpty(options.sourceMapOutputPath)) {\n         return;\n     }\n     String outName \u003d expandSourceMapPath(options, null);\n-    Writer out \u003d toWriter(outName);\n+    Writer out \u003d fileNameToOutputWriter(outName);\n     compiler.getSourceMap().appendTo(out, outName);\n     out.close();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "82a9956c6337d2f5d4a94ebe624d64faa54d9182": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/07/09 08:36:29 by nicksantos\n\n        when injecting param checks, do not inject them before any function\n        declarations, because that will break normalization constraints.\n\n        R\u003djohnlenz\n        DELTA\u003d22  (18 added, 0 deleted, 4 changed)\n\nChange on 2010/07/09 09:36:54 by johnlenz\n\n        Prefer FileWriter to PrintStream when charset translation isn\u0027t needed.\n\n        R\u003dacleung\n        DELTA\u003d68  (13 added, 2 deleted, 53 changed)\n\nChange on 2010/07/09 10:54:42 by nicksantos\n\n        our mechanism for injecting boilerplate does not work\n        for code that uses @const externs. So just don\u0027t use\n        any @const externs.\n\n        R\u003djohnlenz\n        DELTA\u003d3  (1 added, 0 deleted, 2 changed)\n\nChange on 2010/07/09 11:30:29 by nicksantos\n\n        Scan functional properties of object literals for invalid use\n        of \"this\".\n        Fixes issue 182.\n\n        R\u003dacleung\n        DELTA\u003d21  (19 added, 0 deleted, 2 changed)\n\nChange on 2010/07/09 12:40:16 by dcc\n\n        Separate pass instance for peephole preprocessing.\n        Now that I\u0027m writing instructions for how people can add their own\n        peephole passes, I want to make sure that the preprocessing\n        peephole optimizations that relies on don\u0027t get disturbed.\n\n        R\u003djohnlenz\n        DELTA\u003d18  (15 added, 0 deleted, 3 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d49008\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@270 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/9/10, 4:02 PM",
      "commitName": "82a9956c6337d2f5d4a94ebe624d64faa54d9182",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "7/8/10, 5:15 PM",
      "commitNameOld": "0c8a0c53b2124d05b017a63bdbc720a57c89ead2",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 0.95,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private void outputSourceMap(B options) throws IOException {\n    if (Strings.isEmpty(options.sourceMapOutputPath)) {\n        return;\n    }\n    String outName \u003d expandSourceMapPath(options, null);\n    Writer out \u003d toWriter(outName);\n    compiler.getSourceMap().appendTo(out, outName);\n    out.close();\n}",
      "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
      "functionStartLine": 778,
      "functionName": "outputSourceMap",
      "functionAnnotation": "",
      "functionDoc": "Outputs the source map found in the compiler to the proper path if one\nexists.\n\n@param options The options to the Compiler.\n",
      "diff": "@@ -1,9 +1,9 @@\n private void outputSourceMap(B options) throws IOException {\n     if (Strings.isEmpty(options.sourceMapOutputPath)) {\n         return;\n     }\n     String outName \u003d expandSourceMapPath(options, null);\n-    PrintStream out \u003d toPrintStream(outName);\n+    Writer out \u003d toWriter(outName);\n     compiler.getSourceMap().appendTo(out, outName);\n     out.close();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6d00ac1a68612aade8a19d7ecc9b180f00ae5234": {
      "type": "Ydocchange",
      "commitMessage": "\nChange on 2010/05/27 by johnlenz\n\n        Cleanup some import, unused code, and javadoc warnings.\n\n        R\u003dacleung\n        DELTA\u003d167  (3 added, 119 deleted, 45 changed)\n\nChange on 2010/05/27 by nicksantos\n\n        Use a new heuristic for CheckGlobalThis.\n        Fixes closure-compiler issue 144.\n        i *think* this is the right behavior, because it more closely\n        maps to how we infer \"this\" types in type-checking, but there\n        may be cases i haven\u0027t thought of.\n\n        R\u003djohnlenz,acleung\n        DELTA\u003d57  (51 added, 0 deleted, 6 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d14003\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@234 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/27/10, 10:18 PM",
      "commitName": "6d00ac1a68612aade8a19d7ecc9b180f00ae5234",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "5/13/10, 5:34 PM",
      "commitNameOld": "260f0ffc9243ef15bd17e324c9cf7e2dfac9cc6a",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 14.2,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "private void outputSourceMap(B options) throws IOException {\n    if (Strings.isEmpty(options.sourceMapOutputPath)) {\n        return;\n    }\n    String outName \u003d expandSourceMapPath(options, null);\n    PrintStream out \u003d toPrintStream(outName);\n    compiler.getSourceMap().appendTo(out, outName);\n    out.close();\n}",
      "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
      "functionStartLine": 754,
      "functionName": "outputSourceMap",
      "functionAnnotation": "",
      "functionDoc": "Outputs the source map found in the compiler to the proper path if one\nexists.\n\n@param options The options to the Compiler.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Outputs the source map found in the compiler to the proper path if one\nexists.\n\n@param options The options to the Compiler.\n@param path The path of the generated file for which the source map was\n       created.\n",
        "newValue": "Outputs the source map found in the compiler to the proper path if one\nexists.\n\n@param options The options to the Compiler.\n"
      }
    },
    "97bbbffb65eda01aa9b38a5cec43a598afb39070": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "\nChange on 2010/05/12 by nick\n\n        simplify how we build source map paths.\n\n        R\u003djoey\n        DELTA\u003d111  (76 added, 4 deleted, 31 changed)\n\nChange on 2010/05/12 by nick\n\n        Use generics magic to clean up the graph code a bit.\n        These changes don\u0027t give the performance improvements that I hoped,\n        but i think they\u0027re good changes anyway.\n\n        R\u003dalan\n        DELTA\u003d253  (69 added, 121 deleted, 63 changed)\n\nChange on 2010/05/12 by nick\n\n        API clean-up: don\u0027t store null return types or parameter-list types.\n\n        R\u003drobert\n        DELTA\u003d195  (89 added, 54 deleted, 52 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003ddzaoho\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@209 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/13/10, 10:46 AM",
      "commitName": "97bbbffb65eda01aa9b38a5cec43a598afb39070",
      "commitAuthor": "Nicholas.J.Santos",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "\nChange on 2010/05/12 by nick\n\n        simplify how we build source map paths.\n\n        R\u003djoey\n        DELTA\u003d111  (76 added, 4 deleted, 31 changed)\n\nChange on 2010/05/12 by nick\n\n        Use generics magic to clean up the graph code a bit.\n        These changes don\u0027t give the performance improvements that I hoped,\n        but i think they\u0027re good changes anyway.\n\n        R\u003dalan\n        DELTA\u003d253  (69 added, 121 deleted, 63 changed)\n\nChange on 2010/05/12 by nick\n\n        API clean-up: don\u0027t store null return types or parameter-list types.\n\n        R\u003drobert\n        DELTA\u003d195  (89 added, 54 deleted, 52 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003ddzaoho\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@209 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "5/13/10, 10:46 AM",
          "commitName": "97bbbffb65eda01aa9b38a5cec43a598afb39070",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "5/3/10, 7:03 AM",
          "commitNameOld": "9147da9979fb00599efd700fa5e0cccfa93d25a5",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 10.15,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "actualSource": "private void outputSourceMap(B options) throws IOException {\n    if (Strings.isEmpty(options.sourceMapOutputPath)) {\n        return;\n    }\n    String outName \u003d expandSourceMapPath(options, null);\n    PrintStream out \u003d toPrintStream(outName);\n    compiler.getSourceMap().appendTo(out, outName);\n    out.close();\n}",
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
          "functionStartLine": 744,
          "functionName": "outputSourceMap",
          "functionAnnotation": "",
          "functionDoc": "Outputs the source map found in the compiler to the proper path if one\nexists.\n\n@param options The options to the Compiler.\n@param path The path of the generated file for which the source map was\n       created.\n",
          "diff": "@@ -1,9 +1,9 @@\n-private void outputSourceMap(B options, String path) throws IOException {\n-    if (options.sourceMapOutputPath \u003d\u003d null) {\n+private void outputSourceMap(B options) throws IOException {\n+    if (Strings.isEmpty(options.sourceMapOutputPath)) {\n         return;\n     }\n-    File outputFile \u003d new File(path);\n-    PrintStream out \u003d openSourceMapStream(options, path);\n-    compiler.getSourceMap().appendTo(out, outputFile.getName());\n+    String outName \u003d expandSourceMapPath(options, null);\n+    PrintStream out \u003d toPrintStream(outName);\n+    compiler.getSourceMap().appendTo(out, outName);\n     out.close();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[options-B, path-String]",
            "newValue": "[options-B]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nChange on 2010/05/12 by nick\n\n        simplify how we build source map paths.\n\n        R\u003djoey\n        DELTA\u003d111  (76 added, 4 deleted, 31 changed)\n\nChange on 2010/05/12 by nick\n\n        Use generics magic to clean up the graph code a bit.\n        These changes don\u0027t give the performance improvements that I hoped,\n        but i think they\u0027re good changes anyway.\n\n        R\u003dalan\n        DELTA\u003d253  (69 added, 121 deleted, 63 changed)\n\nChange on 2010/05/12 by nick\n\n        API clean-up: don\u0027t store null return types or parameter-list types.\n\n        R\u003drobert\n        DELTA\u003d195  (89 added, 54 deleted, 52 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003ddzaoho\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@209 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "5/13/10, 10:46 AM",
          "commitName": "97bbbffb65eda01aa9b38a5cec43a598afb39070",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "5/3/10, 7:03 AM",
          "commitNameOld": "9147da9979fb00599efd700fa5e0cccfa93d25a5",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 10.15,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "actualSource": "private void outputSourceMap(B options) throws IOException {\n    if (Strings.isEmpty(options.sourceMapOutputPath)) {\n        return;\n    }\n    String outName \u003d expandSourceMapPath(options, null);\n    PrintStream out \u003d toPrintStream(outName);\n    compiler.getSourceMap().appendTo(out, outName);\n    out.close();\n}",
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
          "functionStartLine": 744,
          "functionName": "outputSourceMap",
          "functionAnnotation": "",
          "functionDoc": "Outputs the source map found in the compiler to the proper path if one\nexists.\n\n@param options The options to the Compiler.\n@param path The path of the generated file for which the source map was\n       created.\n",
          "diff": "@@ -1,9 +1,9 @@\n-private void outputSourceMap(B options, String path) throws IOException {\n-    if (options.sourceMapOutputPath \u003d\u003d null) {\n+private void outputSourceMap(B options) throws IOException {\n+    if (Strings.isEmpty(options.sourceMapOutputPath)) {\n         return;\n     }\n-    File outputFile \u003d new File(path);\n-    PrintStream out \u003d openSourceMapStream(options, path);\n-    compiler.getSourceMap().appendTo(out, outputFile.getName());\n+    String outName \u003d expandSourceMapPath(options, null);\n+    PrintStream out \u003d toPrintStream(outName);\n+    compiler.getSourceMap().appendTo(out, outName);\n     out.close();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "848ace840362a1f5558bec065cb40548ff66587a": {
      "type": "Yfilerename",
      "commitMessage": "Rename CompilerRunner -\u003e CommandLineRunner.\nI\u0027ll also do this for JSCompilerRunner, but it will be a much\nbigger change. (Nick)\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@119 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/26/10, 6:04 PM",
      "commitName": "848ace840362a1f5558bec065cb40548ff66587a",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "2/26/10, 3:45 PM",
      "commitNameOld": "50c1b3d39ff5b17c956a2235f97f7b5da05ab6f0",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void outputSourceMap(B options, String path) throws IOException {\n    if (options.sourceMapOutputPath \u003d\u003d null) {\n        return;\n    }\n    File outputFile \u003d new File(path);\n    PrintStream out \u003d openSourceMapStream(options, path);\n    compiler.getSourceMap().appendTo(out, outputFile.getName());\n    out.close();\n}",
      "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
      "functionStartLine": 881,
      "functionName": "outputSourceMap",
      "functionAnnotation": "",
      "functionDoc": "Outputs the source map found in the compiler to the proper path if one\nexists.\n\n@param options The options to the Compiler.\n@param path The path of the generated file for which the source map was\n       created.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/com/google/javascript/jscomp/AbstractCompilerRunner.java",
        "newPath": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java"
      }
    },
    "c306f810ac0d653caadb7bf0b7cf7c12d6c06a20": {
      "type": "Ybodychange",
      "commitMessage": "don\u0027t run RemoveUnusedVars to a fixed point, because the\nPhaseOptimizer does that already.\n\nmake sure %outname% works properly with js binaries.\n\nfix a bad call to getClassesDefinedByCall\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@107 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/16/10, 12:03 PM",
      "commitName": "c306f810ac0d653caadb7bf0b7cf7c12d6c06a20",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "2/8/10, 3:25 PM",
      "commitNameOld": "c0face2a48665e46f4829f54ee24cfa4cf8d4589",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 7.86,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "private void outputSourceMap(B options, String path) throws IOException {\n    if (options.sourceMapOutputPath \u003d\u003d null) {\n        return;\n    }\n    File outputFile \u003d new File(path);\n    PrintStream out \u003d openSourceMapStream(options, path);\n    compiler.getSourceMap().appendTo(out, outputFile.getName());\n    out.close();\n}",
      "path": "src/com/google/javascript/jscomp/AbstractCompilerRunner.java",
      "functionStartLine": 881,
      "functionName": "outputSourceMap",
      "functionAnnotation": "",
      "functionDoc": "Outputs the source map found in the compiler to the proper path if one\nexists.\n\n@param options The options to the Compiler.\n@param path The path of the generated file for which the source map was\n       created.\n",
      "diff": "@@ -1,9 +1,9 @@\n private void outputSourceMap(B options, String path) throws IOException {\n     if (options.sourceMapOutputPath \u003d\u003d null) {\n         return;\n     }\n     File outputFile \u003d new File(path);\n-    PrintStream out \u003d openSourceMapStream(options, path + \".js\");\n+    PrintStream out \u003d openSourceMapStream(options, path);\n     compiler.getSourceMap().appendTo(out, outputFile.getName());\n     out.close();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bca9abb0e3062d373fe52c0e8340337588c05708": {
      "type": "Ybodychange",
      "commitMessage": "Make sure that InlineVariables can inline variables that are never defined.\n\nCreate a function-inlining blacklist.\n\nSome minor type inference fixes.\n\nStart re-architecting type resolution to happen differently.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@77 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/26/10, 1:59 PM",
      "commitName": "bca9abb0e3062d373fe52c0e8340337588c05708",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "1/8/10, 1:41 PM",
      "commitNameOld": "6d374c3ee4c9c2651ffb44048924e127fd2bf37c",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 18.01,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "actualSource": "private void outputSourceMap(B options, String path) throws IOException {\n    if (options.sourceMapOutputPath \u003d\u003d null) {\n        return;\n    }\n    File outputFile \u003d new File(path);\n    PrintStream out \u003d openSourceMapStream(options, path + \".js\");\n    compiler.getSourceMap().appendTo(out, outputFile.getName());\n    out.close();\n}",
      "path": "src/com/google/javascript/jscomp/AbstractCompilerRunner.java",
      "functionStartLine": 862,
      "functionName": "outputSourceMap",
      "functionAnnotation": "",
      "functionDoc": "Outputs the source map found in the compiler to the proper path if one\nexists.\n\n@param options The options to the Compiler.\n@param path The path of the generated file for which the source map was\n       created.\n",
      "diff": "@@ -1,9 +1,9 @@\n private void outputSourceMap(B options, String path) throws IOException {\n     if (options.sourceMapOutputPath \u003d\u003d null) {\n         return;\n     }\n     File outputFile \u003d new File(path);\n-    PrintStream out \u003d openSourceMapStream(options, path, null);\n+    PrintStream out \u003d openSourceMapStream(options, path + \".js\");\n     compiler.getSourceMap().appendTo(out, outputFile.getName());\n     out.close();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,9 @@\n+private void outputSourceMap(B options, String path) throws IOException {\n+    if (options.sourceMapOutputPath \u003d\u003d null) {\n+        return;\n+    }\n+    File outputFile \u003d new File(path);\n+    PrintStream out \u003d openSourceMapStream(options, path, null);\n+    compiler.getSourceMap().appendTo(out, outputFile.getName());\n+    out.close();\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void outputSourceMap(B options, String path) throws IOException {\n    if (options.sourceMapOutputPath \u003d\u003d null) {\n        return;\n    }\n    File outputFile \u003d new File(path);\n    PrintStream out \u003d openSourceMapStream(options, path, null);\n    compiler.getSourceMap().appendTo(out, outputFile.getName());\n    out.close();\n}",
      "path": "src/com/google/javascript/jscomp/AbstractCompilerRunner.java",
      "functionStartLine": 739,
      "functionName": "outputSourceMap",
      "functionAnnotation": "",
      "functionDoc": "Outputs the source map found in the compiler to the proper path if one\nexists.\n\n@param options The options to the Compiler.\n@param path The path of the generated file for which the source map was\n       created.\n"
    }
  }
}